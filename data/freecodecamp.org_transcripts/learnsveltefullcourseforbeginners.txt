00:00 - Lee Howe is a core maintainer of felt so
00:03 - he is a great person to teach this
00:05 - massive svelte course for beginners
00:08 - spell is a front-end JavaScript
00:10 - framework for making interactive web
00:12 - pages leave starts at the absolute
00:14 - beginning with creating your first svelt
00:16 - component and continues on to teach
00:18 - every component you need to know to
00:20 - develop applications using svelte hello
00:23 - hello I'm Lee how
00:26 - so today we are going to write our first
00:29 - Spell components
00:34 - so
00:36 - usually when I write a spell component I
00:39 - will head over to the svelt rapple it's
00:42 - it's like a playground where you can
00:44 - write your components without having to
00:47 - worry about all the setup it's just
00:49 - right and then you take a look at the
00:51 - results and if you're happy with it you
00:54 - can even download the codes and run it
00:56 - in your environment so let's see so
01:01 - let's head over to the repo which is
01:03 - felt.dev Rebel or if you are in the
01:07 - svelt.dev website you can come over here
01:11 - to the top right corner and click on the
01:13 - rebel button and so here is this
01:16 - playground that I mentioned you can play
01:19 - around with it I'm something and see the
01:21 - results immediately on the right
01:24 - and you can download as I said which you
01:27 - can run your code so we'll take a look
01:29 - at that later on but first let's open uh
01:33 - Zoom this up and let's start with our
01:36 - first component so I'm going to name
01:37 - this first component about components
01:42 - so first thing first as well component
01:44 - is if it's written in one file and the
01:47 - file extension is have to be end with
01:50 - dots s v a l t e dot svelte so a spell
01:55 - component is a file that ends with a
01:57 - dots felt extension
01:59 - and the syntax of what you're going to
02:02 - write in here is going to be similar as
02:05 - HTML
02:07 - so uh as felt syntax is actually a
02:10 - superset of the HTML syntax so if you're
02:13 - familiar with writing HTML you can just
02:15 - write it over here for example I'm going
02:17 - to write H1 hell
02:20 - my first cell component
02:25 - whoops
02:28 - and I'm gonna have a few paragraphs
02:31 - uh let's see paragraphs
02:35 - hello world
02:39 - and I can have style text like how you
02:43 - would in your HTML uh file where you can
02:47 - have style tag and install your elements
02:50 - that you like so I'm gonna make my H1
02:52 - the color
02:55 - Rebecca purple
03:00 - this is the purple color that Rebecca
03:02 - loves the most and
03:05 - a Rebecca's favorite color and you can
03:07 - change P tag to maybe a different font
03:10 - size font size
03:13 - 44 pixels right so you can add Styles
03:16 - you can have HTML just like you would in
03:19 - HTML right so you can add some
03:23 - um attributes so I'm going to come over
03:25 - here and say at the anchor attack so
03:28 - link
03:29 - to my YouTube and then can add okay
03:33 - attributes just like how you would in
03:35 - HTML so I'm come over here and say okay
03:37 - this is my YouTube channel uh hopefully
03:40 - you come
03:43 - okay this is my link to my YouTube
03:46 - channel so you can click over here
03:49 - so you can have a hashref
03:53 - um attributes and you can have children
03:56 - like you would in HTML so
04:00 - um let's see let's come over here gonna
04:01 - have a I'm gonna wrap all this within a
04:04 - div
04:06 - right so you can have children you can
04:08 - have attributes just like you would in
04:11 - HTML
04:12 - and lastly could the Logics for your
04:16 - components will be in a script tag
04:19 - right so we will explore how you will
04:23 - write your logic for your components but
04:25 - just for you know anything within script
04:28 - text will be like JavaScript so you can
04:30 - have something like let's uh name equals
04:33 - Lee how right this is Javascript you can
04:36 - write any JavaScript you like over here
04:40 - so one thing you need to take note is
04:42 - that unlike HTML you can have multiple
04:45 - Styles uh tag but in a Cell component
04:49 - you can only have one styled egg right
04:54 - only one and that one is important right
04:59 - same goes with script hack you can only
05:01 - have one script tag or else you get a
05:05 - warning an error a build error right so
05:08 - that it is that is it sorry that is it
05:13 - lastly
05:15 - um when I show you this I'm going to
05:17 - download this I'm going to open it up
05:19 - I'm gonna open it up
05:23 - and let's let me allow me to open up my
05:26 - code editor
05:28 - so I'm using a vs code over here
05:32 - um
05:34 - where I have so this app.spel is what
05:37 - we've written over just now
05:40 - and to use this components in in a setup
05:45 - that you would right this is a quick
05:47 - preview of how you would do is you will
05:50 - come over here in the mean JS file and
05:53 - you will import your swell components
05:55 - and it will be a class it will be a
05:57 - default export and you can use it where
06:01 - you choose where to Mount Your
06:04 - components I will talk about this in
06:07 - more detail later on and even how to set
06:10 - up your environments how to set up build
06:12 - settings right but this is just to let
06:15 - you know that your components will be in
06:18 - a DOT spell file and you can import from
06:21 - anywhere and use it like a component
06:24 - like a class
06:28 - let's talk a bit more in detail about
06:30 - styling in Spell components
06:34 - so over here on my screen we seen what
06:38 - we have left over from the last video
06:40 - where we created a H1 a paragraph a div
06:44 - and a link right and we started using
06:46 - CSS
06:48 - uh it within a style tag
06:51 - and now I have another component called
06:53 - components Dot svelt and I'm going to
06:55 - import this component into my
06:59 - app.spel right so bear with me if you
07:03 - are not familiar with this because we're
07:04 - gonna talk a bit about them more in
07:07 - detail later but as you can see how
07:10 - important is I'm going to import
07:12 - components from the file and then when I
07:15 - can drop my component over here right
07:17 - like this so
07:20 - my first component hello world and link
07:22 - to my YouTube is from amplus felt and
07:25 - component another components by wall and
07:28 - link to my Twitter is within another
07:31 - component
07:33 - so what I'm going to share today is a
07:36 - few things first
07:38 - the style that you write within a
07:40 - component is going to be scoped meaning
07:44 - all the styles that you write only apply
07:47 - to all the elements within this
07:49 - component
07:51 - see take a look at this I have the same
07:56 - heading 1 paragraph and div and anchor
07:59 - tag in another component
08:01 - and but if I write the Styles over here
08:04 - it's only going to apply to the H1 in my
08:07 - component only the this only the my
08:10 - first component is being colored in
08:12 - purple
08:14 - and only the paragraph within this
08:16 - component is going to be font size 44
08:19 - pixels see the other com paragraph in
08:22 - another component is much much smaller
08:25 - so first thing the style is being scoped
08:29 - within your component meaning any
08:32 - elements it only apply to all the
08:34 - elements within this file this file that
08:37 - you look at right now
08:40 - so uh it it means actually spelled
08:44 - will read through all the selectors and
08:48 - figure out what element that it will
08:50 - apply to and then does some svelte
08:53 - Magics over there
08:55 - so this gives us a few Advantage first
08:58 - is that of course you are more confident
09:01 - with the styles that you're writing
09:03 - right now because uh it will you will
09:06 - make sure that it will only apply to the
09:08 - components over here to the elements
09:11 - over here of course not just limits to
09:14 - attack uh if you can have a class like
09:17 - this class
09:19 - I'm gonna say uh links and I can style
09:23 - it over here as well so links will have
09:26 - a
09:28 - let's see uh text align right so your
09:33 - right line and even if you have another
09:37 - class over here
09:39 - it will not write a line right so it's
09:43 - not just elements you can have class
09:45 - selectors the same it will only applies
09:47 - to all the elements that's written
09:49 - within this file component so you are
09:52 - confident enough that if you change
09:54 - something will only apply to all the
09:57 - elements within a component so you don't
09:59 - have to worry about messing up other
10:01 - components
10:02 - two
10:03 - because svelt knows what elements it
10:06 - will apply to and this also means that
10:08 - if you write something like uh for
10:12 - example if I already remove this I don't
10:14 - have any elements that has a class links
10:16 - actually this felt will know that you
10:19 - have a selector that is not applied to
10:22 - any elements within this file
10:25 - so
10:26 - um there is a warning and also you you
10:30 - and so that you know that you have to
10:32 - remove them because it's not applied to
10:34 - any elements anymore
10:36 - and what's good about it is also that
10:38 - during compilations fellow actually
10:40 - removes it so if you go to look at the
10:42 - CSS output uh text align right is no
10:46 - longer here
10:48 - so while we are looking at this CSS
10:50 - output I do have to point out that right
10:54 - now if you look at
10:57 - um I want to point out actually how this
10:59 - works so svelt will actually find out
11:03 - all the elements that
11:06 - will be targeted and then add a special
11:09 - class to the elements that will be uh
11:12 - that that will be targeted by all your
11:14 - class and then so and then it will use
11:17 - that class to increase the specificity
11:19 - of your selector of course your selector
11:22 - will be more specific right now but it
11:25 - will make sure that they will increase
11:26 - the specificity the same way for all the
11:29 - selectors so that
11:30 - um if you have selectors over here make
11:33 - sure that the specificity the relative
11:36 - specific specificity among the selectors
11:39 - is still the same
11:41 - right so so that it does not just add
11:43 - like a class over here and then bricks
11:46 - uh make this slightly higher specificity
11:49 - than the links you will not do that like
11:51 - it will make sure that relative
11:53 - specificity is still maintained
11:57 - so if I come over here and inspect the
12:00 - elements you will see that because I'm
12:02 - targeting H1 and P over here
12:05 - uh if you take a look only H1 and P will
12:08 - have that special class applied let me
12:11 - Zoom
12:12 - hopefully it's not too small
12:13 - all right so let's let me zoom and let's
12:18 - scroll so only the H1 and the P tag will
12:21 - get that uh special cost supplied but
12:24 - the div and anchor attack because you
12:27 - are not you don't have any selectors
12:30 - that applying to this element so that uh
12:32 - so the special class will not be added
12:35 - to your to these two elements right so
12:38 - spelled nose felt will do what is the
12:41 - most optimized thing it will not just
12:43 - apply blindly to all the elements
12:46 - so look again at the CSS output you have
12:48 - H1 and p uh being increased with this
12:52 - class special class right so so just let
12:56 - me demonstrate the case where I'm saying
12:58 - that if I have class over here say links
13:03 - um you'll make sure that if you come
13:04 - over here link starts felt and P dots
13:07 - felt so relative specificity is still
13:11 - the same uh is still one up in the class
13:15 - specificity
13:19 - uh yup so
13:21 - so this is scope styling and this is not
13:26 - just applied to selectors it's also
13:29 - applies to
13:31 - um keyframes animation frames so if I
13:34 - come over here I see keyframes
13:36 - I'm going to write a zoom animation so
13:40 - like bear with me
13:41 - let me type that out transform
13:46 - scale
13:49 - three
13:51 - and maybe 50 time I'm gonna transform uh
13:56 - scale 0.5 okay I'm gonna apply this uh
14:01 - Zoom animation for
14:03 - my header come over here animation and
14:07 - then I would say Zoom uh five seconds
14:10 - and finite
14:12 - so you see that I'm applying an
14:15 - animation to this H1 for five seconds
14:17 - with this Zoom
14:19 - and my point is this Zoom is being
14:22 - scoped to this component only
14:25 - uh meaning if I come over here I'm going
14:28 - to copy this and I want to apply it to
14:31 - my H1 as well
14:34 - sorry I should write Style
14:36 - H1
14:38 - animation
14:41 - Style
14:45 - you'll see that
14:47 - Zoom is not applied to these elements
14:50 - right or rather you apply the zoom
14:53 - animation to these elements but Zoom is
14:55 - not defined because these keyframes that
14:59 - you write is only limited available to
15:03 - your elements over here it will not
15:05 - pollute any other Zoom animations out
15:08 - there
15:09 - so look again at the CSS output you will
15:12 - see that
15:14 - animation uh uh although it's minified
15:17 - but you can still weekly figure out that
15:20 - this keyframe name has been changed it
15:22 - will add svelt Dash Zoom special just
15:27 - it's a hopefully it will be unique
15:29 - animation name and then you also apply
15:32 - that to your animation so this animation
15:35 - that you write over here is scoped
15:38 - within your component
15:41 - so you may ask me like yeah that's great
15:45 - but what if I want my Styles I want my
15:49 - selectors to be not just apply to the
15:54 - components over here I want you to apply
15:56 - to all the Hedge ones out there as well
15:59 - yes so if you want to do this and you
16:02 - are very sure that you are going to do
16:04 - this we have a backdoor hash uh catch
16:08 - hatch that you can work around right you
16:12 - can this is like an escape door to use
16:14 - if you want your if you are sure enough
16:17 - that you want these selectors to be
16:19 - available globally and how you would do
16:22 - it is you will apply your ads a pseudo
16:26 - selector called global
16:27 - and wrap it with your H1
16:30 - so immediately if you take a look at
16:33 - let's come over here and inspect first
16:35 - immediately you can see that your
16:40 - sorry let me expand your H1 immediately
16:44 - you can see a H1 no longer has that
16:46 - special class because it's not going to
16:48 - Target this H1 only right so it does not
16:51 - need to have that special class anymore
16:52 - and if you come over to look at the CSS
16:55 - output H1 is
16:58 - no longer having that special class so
17:00 - this H1 will apply will have effect to
17:03 - all the H1s out there right so if you
17:05 - look at here you can see immediately
17:07 - this uh component is also a purple color
17:12 - as well
17:14 - right so if I come over here for P tag
17:17 - global
17:22 - you see that Bible or like
17:27 - yeah buy wall will be
17:30 - um
17:31 - 44 pixels as well so this selector will
17:35 - become a global selector as well
17:38 - and lastly you will ask me how about my
17:40 - animation frames I want to have a zoom
17:43 - over here
17:45 - um how what how
17:47 - um if I want to use zoom out elsewhere
17:49 - say I want to come over here and say H1
17:52 - and P to apply the zoom animation
17:55 - how do I make this animation keyframe to
17:58 - be globally available well you would
18:00 - have to prefix it with a global
18:04 - Dash Global Dash so you have to prefix
18:07 - your animation name with this prefix and
18:11 - there you go it will be available
18:13 - globally right so if you take a look at
18:15 - the CSS output again your Zoom will be
18:18 - your keyframes will be named zoom and it
18:20 - will go everywhere
18:22 - so there you have it you can CSL Styles
18:26 - in svelt is scope to your components to
18:29 - all the elements within your components
18:30 - only and if you want to escape from this
18:33 - there's an escape door for you which is
18:35 - to use a global pseudo selector uh sorry
18:38 - yeah pseudo selector or you can
18:42 - uh use a dash Global dash for your
18:45 - keyframe to make it globally available
18:51 - let's take a look at how we can add data
18:54 - to your Spell components
18:57 - over here I have written as well
18:59 - component which has a h heading which
19:02 - says hello world and image tag that has
19:06 - a logo for the spell logo
19:08 - what if I want the the contents of the
19:13 - header to be dynamic I wanted to come
19:15 - from somewhere that can Define from my
19:18 - code import from somewhere
19:20 - and how about I want a dynamic
19:23 - image URL for my image tag right so that
19:27 - is when you need to write a script tag
19:30 - over here
19:31 - script tags in as well components allows
19:34 - you to add Logics to your components and
19:38 - add Logics and data in your component
19:43 - so I can come over here and Define
19:45 - content say hello okay let me just copy
19:48 - instead of typing it out hello world
19:52 - and I can also have an image URL
19:56 - um which is this one let me copy it
20:00 - whoops
20:01 - and if I so that I can have Dynamic
20:04 - contents over here Dynamic data and I
20:06 - want to apply it to the
20:09 - um to my elements over it below so how
20:13 - do I do that
20:14 - well in this result if you want to use a
20:18 - JavaScript expressions in your HTML you
20:22 - would use Clear brackets curly brackets
20:26 - so instead of writing hello world I can
20:28 - have my curly brackets
20:30 - and I within a clear brackets I can
20:33 - write any JavaScript I want so over here
20:35 - I can write content so any variables
20:40 - that you define within a script tag as
20:42 - long as it's at the top level then it
20:45 - will be available for your script tag
20:47 - what I meant by top level is that if I
20:51 - come over here if I Define a function so
20:53 - I call it function full and I Define
20:55 - contents over here hello I buy world
21:00 - then this variables that you define is
21:03 - actually scoped within a function it's
21:05 - not at the top level so if I comment
21:06 - this out then you will say content is
21:09 - not defined
21:11 - fair enough so I have to Define it at
21:13 - the top level
21:15 - same thing goes for um
21:18 - your attributes I can come over here
21:20 - remove this and have a curly bracket so
21:24 - anything within curly brackets will be
21:26 - able for me to write JavaScript so I'll
21:29 - come over here I say image URL paste it
21:31 - in boom I have a dynamic attribute in
21:36 - um in in my HTML elements
21:39 - so a few things about this uh you can
21:43 - omit if if this is uh this is just a
21:48 - value for the entire variable will be
21:50 - able for your attributes you can
21:52 - actually omit the code sign well it's so
21:57 - it is useful for some people where maybe
22:00 - they are writing HTML uh they are used
22:03 - to writing HTML then you can keep that
22:05 - code sign and it's also useful for
22:07 - editors that does not support svelt
22:11 - um you have that code sign on it makes
22:13 - the and you can start you can select
22:16 - your language as HTML and then it will
22:19 - syntax highlight the syntax highlighting
22:22 - will still works fine
22:24 - so that's one thing and secondly if I
22:28 - instead of defining image here I'm going
22:31 - to define a source over here you see I'm
22:33 - typing Source it goes to Source
22:36 - um this may be a bit more keystrokes
22:40 - than you type so we create a shorthand
22:42 - for this if you have case like this you
22:45 - can actually write this in States so
22:47 - this curly brackets wrapped with the
22:50 - source is exactly the same as writing
22:53 - Source equals source so if you have a
22:56 - variable that the name of the variable
22:58 - is exactly the same as your attribute
23:00 - name then you can have this shorthand
23:03 - instead
23:04 - so in summary you can write a curly
23:09 - brackets and you can have any JavaScript
23:11 - in there B it's the content or an
23:14 - attribute and lastly we've seen how you
23:16 - can write a shorthand for attribute if
23:19 - your variable name is the same as the
23:21 - attribute name
23:24 - we are going to talk about reactivity in
23:28 - sweld
23:29 - well reactivity is a previous fancy word
23:32 - that means that if you update a variable
23:34 - it should reflects on to the Dom or your
23:37 - screen
23:38 - in the previous video we've seen how we
23:40 - can add Dynamic data Define your data in
23:44 - the script tag and then you can use them
23:46 - in your HTML templates and today we're
23:49 - going to look at how we can update those
23:51 - data and then get it reflected onto the
23:54 - screen
23:56 - so over here I have a count it says I
24:00 - Define a count variable as 0 and I use I
24:03 - show it on the screen using the color
24:05 - brackets count over here
24:08 - and that's it and I have a buttons and
24:12 - these buttons what I want to do with
24:14 - this button is I want when I click on
24:16 - this button it will increment uh the
24:19 - count variable so we haven't learned
24:21 - about events handlers yet but let me
24:24 - just type it in and show you that how
24:26 - it's done
24:27 - we'll talk about them in more details in
24:31 - the next in the next videos so in this
24:34 - video just assume that this will add on
24:37 - click so they increments the count so
24:40 - how do I increment the variable counts I
24:43 - can do it like how I would do it in
24:45 - JavaScript I'll just come over here
24:47 - account and then I say plus plus this
24:50 - will increment the count
24:53 - will it work yes of course it will just
24:56 - work like this so you come here you
24:59 - increment count and then it just works
25:01 - like magic uh do you don't have to do
25:04 - anything else so what happens over here
25:08 - what I just felt will analyze the code
25:11 - redraw the code and it will has some
25:14 - sort it has a sense of what are the
25:16 - variables being used in the template and
25:19 - these variables is called a state a
25:22 - stitch within your components so this
25:24 - stage is only for your components so the
25:27 - state we have over here is called count
25:30 - and whenever we're trying to update the
25:32 - state
25:33 - spelled will knows as well so whenever
25:36 - you update the state spell will update
25:38 - the components uh updates elements and
25:41 - then reflect over here you're using
25:43 - console right it will reflect it will it
25:45 - will update this element and so that it
25:47 - will reflect the latest value of the
25:49 - count
25:51 - so now this begs the question how does
25:53 - swell knows that I'm updating the state
25:58 - well it tries to analyze the code that
26:01 - you write but of course it has its
26:03 - limitation so there's a few things that
26:05 - svelt looks at and sveld knows that it's
26:08 - updating the states so here is
26:12 - here let me list them what they are
26:14 - right first is assignments so if you try
26:18 - to sign counts to another variables so
26:20 - let me remove this for now counts equals
26:24 - to 10 this is assignments you're
26:26 - assigning 10 to count as well knows that
26:28 - this is updating the variable count
26:30 - right the states count so click C 10
26:33 - appears on the screen
26:35 - secondly let me go ahead let me comment
26:38 - this
26:39 - secondly you can have update statements
26:43 - update statements so what are update
26:46 - statements update statements are like
26:47 - this this is like updating this is a
26:51 - unary operator that updates a variable
26:54 - so this works
26:56 - uh you can have update assignments so
26:58 - counts plus equals to two let me comment
27:02 - this when you click your plus equals to
27:05 - two so uh so plus plus minus minus plus
27:09 - equals times equals divides equals uh
27:12 - times equals all these are update
27:15 - statements so else knows that you are
27:17 - updating this variable count
27:21 - and if count is a state variable then it
27:24 - knows that it needs to update the
27:25 - component
27:27 - so let me comment this and let's take a
27:29 - look at the third one and it's the last
27:32 - one updating
27:35 - or assigning
27:38 - a property
27:41 - so say for example instead of having
27:43 - count I have an object object equals and
27:47 - then I'm gonna this object has a
27:49 - property called count so that I don't
27:51 - have to change too much of my code so
27:54 - over here in the clear brackets any
27:55 - JavaScript you can write so I can write
27:57 - object.con still works
28:00 - so here if I try to update this property
28:04 - say I try to update it by say object
28:07 - count plus plus
28:09 - then this will still works so how how
28:13 - spell looks at this statement is that I
28:15 - see you're updating a property of an
28:18 - object this object this variable called
28:21 - object and if this variable is a state
28:24 - variable right again if this variable is
28:27 - a state variable in this case it is then
28:29 - it knows that this is uh when when you
28:32 - do this you need to update the component
28:35 - at the components you have to trigger
28:37 - component updates
28:39 - same thing goes with object dot counts
28:42 - equals to 10 let me comment this out
28:46 - uh if you click it will update as well
28:49 - so uh updates or assignments on property
28:53 - will Kickstart that
28:56 - so anything that falls outside of this
28:59 - three category will not Kickstart uh the
29:03 - spell will not know that you're actually
29:05 - updating
29:06 - the variable and thus it does not runs
29:09 - an update cycle
29:11 - which means that you're still able to
29:13 - change the variable but then it's just
29:15 - not reflected on the screen
29:17 - so let me get you a few examples
29:21 - so uh
29:24 - not
29:25 - an update to svelts
29:28 - so first is
29:30 - um again we have an object right so
29:32 - let's let's take this example if I now
29:35 - object uh if I assign this object to say
29:39 - data
29:40 - and I come over here data.account plus
29:43 - plus
29:44 - you you would expect that the object
29:48 - counts has incremented right you would
29:50 - expect that
29:51 - um if I click this you should see but no
29:54 - it does not why so swell looks at this
29:57 - yes it's an update statement but this
30:00 - data is not the states this variable
30:02 - data over here is just a variable within
30:05 - this function so it has no idea no idea
30:09 - that um
30:10 - this data over here as a state so that's
30:12 - why it does not
30:14 - updates the component so you may ask me
30:17 - like well this is obvious right data is
30:20 - equal to object yeah this is obvious in
30:22 - this case but what if you have another
30:24 - case where data comes from
30:27 - a parameter or something else right this
30:30 - is object you pass by reference you
30:32 - Updates this data you should expect to
30:35 - see it reflected but how does shroud
30:37 - knows you you have to trace a lot of
30:39 - things so swell does not know at all it
30:42 - is too difficult to know so that's why
30:44 - if you are updating a variable and this
30:47 - variable uh is not a state object it
30:50 - will just look at this statement and if
30:52 - this statement the object is not a state
30:54 - this is not a state then it will not
30:57 - Kickstart an update cycle
31:00 - just so you know that we have already
31:04 - updated this data but it's just not
31:06 - showing on the screen I'm going to come
31:08 - over here
31:10 - uh uh have another function called uh do
31:15 - something else
31:18 - and I'm going to this time around I'm
31:21 - going to say object dot uh full equals
31:24 - to 1.
31:26 - so calling this function will will tell
31:28 - us as well that object has updated and
31:31 - you need to go through and update this
31:34 - the component so if I have a button over
31:37 - here
31:39 - says do something else
31:44 - something else
31:48 - right so my the point I want to show you
31:50 - is this if I click increments a few
31:52 - times
31:53 - the data the object the data is pointing
31:56 - the same object as the object it's the
31:58 - same reference so uh you you should have
32:01 - already updated the count the value has
32:03 - changed balance well does not know that
32:06 - it needs to update the components so
32:08 - that's why you don't see this being
32:10 - reflected over here
32:11 - but right now if I come over here I have
32:14 - a do something else and this do
32:16 - something else uh
32:18 - assign one to the object right so it
32:22 - looks over here object.full object
32:26 - is a state so I'm gonna update my
32:29 - component so if I click this right now
32:31 - you see that it reflects immediately
32:33 - right it tells that object has updated
32:35 - so it it knows that you need to update
32:38 - all the elements that relies on the
32:39 - object it comes over here it looks at
32:41 - object account huh what's the value
32:43 - right now it is 11 so I need to update
32:46 - so you see 11 reflected on the screen
32:48 - but if you click again this nothing
32:51 - happens because well just look at this
32:53 - statement it says data data is a state
32:56 - no okay I I can't do anything about it
32:58 - right so this is something you need to
33:01 - know you you need to know this is the
33:04 - limitation of the svelt's reactivity
33:07 - over here
33:09 - let's take a look at another example
33:12 - this time round we are going to look at
33:15 - um methods for example array methods so
33:19 - calling a method
33:24 - so if I have
33:27 - um object as an array instead
33:31 - okay
33:33 - and I am going to call up
33:36 - object dot push okay so here I am going
33:40 - to say object.lank right so every time
33:43 - when I call I'm going to push one item
33:45 - again
33:46 - and over here I should show the object
33:49 - length I want to see the length of the
33:51 - object but if I click click click click
33:54 - click click nothing happens
33:57 - I think better you should just
33:59 - json.string G5 so they can
34:01 - have a better look at all the items
34:04 - right so I click click click click click
34:06 - nothing happens again object the push
34:11 - it's felt has no idea you're calling a
34:13 - method whether this method will affect
34:15 - this object itself no idea at all it
34:18 - could be just calling a function method
34:20 - and it does something else like console
34:22 - long or do something else right it has
34:24 - no idea that this will affect object
34:28 - so that's why it does not updates to
34:31 - everything so you've come again if I
34:33 - come again to click at this something
34:34 - else this will do an assignment and a
34:38 - signing object tells that object has
34:40 - changed and then hopefully it's felt
34:43 - will
34:44 - Updates this right so if I click here
34:46 - see it's updated because well knows that
34:49 - okay you are
34:51 - updating objects so I come over here
34:53 - object has changed uh Json 25 of object
34:56 - has changed I reflects it on the screen
34:58 - so now svelt knows right so
35:02 - um calling a method or update or you're
35:04 - assigning a a reference to another
35:06 - variable and update that variable
35:08 - has no idea that you are changing the
35:12 - states so these are the few caveats of
35:17 - limitation of the svelt's reactivity
35:20 - lastly let me share you with a tip this
35:24 - tip hopefully will help you to
35:26 - understand this whole reactivity better
35:29 - so over here
35:31 - um
35:32 - zwelts will compile all this code into
35:36 - JavaScript so let's take a look at the
35:38 - JavaScript outputs come over here we
35:41 - scroll down you will probably see
35:44 - um this increment function
35:46 - right so everything that we've written
35:48 - is copied over here
35:50 - right it's nothing special
35:52 - well nothing special is a problem if you
35:55 - don't see anything different then which
35:58 - means that any when you try to change
36:00 - the variables over here it has no it
36:03 - does not trigger an update cycle
36:05 - if we scroll down to look at the do
36:07 - something else you see that something is
36:10 - different you you see this dollar dollar
36:13 - in validate function this function tells
36:16 - svelts that hey
36:19 - update this uh uh assign this update
36:22 - this object and then also click start a
36:26 - new update cycle so if I uncomment this
36:30 - you see that in each statements that I
36:33 - said wool Kickstart an update cycle you
36:36 - see that they all comes together with a
36:38 - dollar dollar invalidate a well counts
36:41 - does not okay that's because we count is
36:44 - no longer as dates right so if I Define
36:46 - counts over here
36:48 - uh you probably will see that and to use
36:52 - it to show this conversion
36:55 - you'll see that all of them will have
36:58 - the dollar dollar in validate
37:01 - um
37:02 - function being called alongside with
37:05 - them because it knows that uh you are
37:08 - updating the states and this state is
37:10 - being used in your template so go
37:13 - updates right so all this has invalided
37:16 - by the case that I say the caveat the
37:18 - limitation does not have
37:20 - so this hopefully this little tips will
37:23 - help you to better understanding house
37:26 - wealth reactivity works so try to write
37:29 - something on the left and take a look at
37:31 - the right and see where the swell picks
37:34 - it up at this dollar invalidate function
37:36 - and you know that whether this will
37:39 - Kickstart an update cycle
37:43 - let's talk about event listeners on
37:46 - svelt
37:48 - so you probably have seen me done it
37:50 - before how I add a click event listeners
37:52 - to increment the buttons but in this
37:55 - video we are going to dive deeper and
37:57 - explain all the things you need to know
38:00 - about adding event listeners
38:02 - on your elements in your spells
38:05 - components
38:07 - so let's take a look at the rebel over
38:09 - here
38:11 - I have a H1 and if I want to add event
38:14 - listeners this is how I would have done
38:17 - it if I write vanilla JavaScript I would
38:21 - have a reference to the elements like
38:23 - the H wand and then I will say add event
38:27 - listener and then I'll pass in the
38:30 - events name in this case if I want to
38:32 - add click I will say click and then I
38:34 - will pass in the event handler so I will
38:37 - write event I will have a function
38:40 - and then I will do something on the
38:42 - events right I can have a I can Define
38:45 - this function ahead of time
38:47 - say on click
38:50 - so there's two ways I can uh create the
38:53 - function inline or I can create a
38:55 - function ahead of time and pass the
38:57 - reference to the function in this add
38:59 - event listener method
39:02 - so the same thing goes in the elements
39:05 - in your svelte component I will start
39:08 - with the on directive so on o n and then
39:13 - a colon defines that I will start to
39:15 - Define an event listeners so ons and
39:18 - then I'll pass in the
39:20 - name of the event so over here I say
39:23 - click right so I'm going to copy it and
39:25 - paste it over here so on click
39:28 - and then I just like how you would pass
39:31 - values to a attribute you you do a equal
39:35 - sign and then curly brackets because I
39:37 - want to pass in a function so curly
39:40 - brackets and then I'll pass in the
39:41 - function reference to the function over
39:43 - here and there you have it so if in
39:46 - these events I would I do a console log
39:51 - click
39:54 - you will see that when I click on the
39:57 - hitch one there's console out the click
40:00 - message
40:01 - so that's
40:03 - that's how easy it is to add events
40:05 - listener to elements in your cell
40:07 - components but one thing we didn't cover
40:09 - is that if you have to if you do it this
40:12 - way in your vanilla JavaScript you have
40:14 - to remember to remove the event listener
40:17 - when you no longer need this H1 heading
40:20 - 1. but in svelt if you do on click over
40:23 - here the event listener will be
40:26 - automatically clean up by its weld
40:28 - component if this H1 is no longer in the
40:32 - Dom so one thing it's automatically
40:34 - clean up so you don't have to worry
40:36 - about it at all
40:38 - so uh and then as I mentioned earlier on
40:41 - we can either pass in a function or a
40:45 - inline we can inline a function over
40:47 - here so same thing we can do that in
40:50 - zvelts as well you can come over here
40:52 - and create an inline function so
40:55 - anything within the curly bracket is uh
40:59 - we can write JavaScript in there so
41:01 - click again
41:04 - so I can write an inline function over
41:06 - here
41:07 - and you would expect it to work as well
41:10 - you may be worried about inline
41:13 - functions if you're using other
41:15 - Frameworks because you might be
41:18 - wondering uh would this be creating this
41:20 - function over and over again uh there's
41:23 - no such thing as well about having to
41:26 - running something over again right this
41:29 - function is not if you are not going to
41:31 - change this function this function is
41:33 - not going to be changed then this
41:35 - function will be just defined once and
41:37 - attached to this H1 once and that's it
41:40 - so if you don't believe me come over to
41:42 - the GS output you can take a look over
41:45 - here this function click again is
41:48 - defined over here once and then this is
41:51 - being passed into somehow pass it into
41:54 - this uh
41:56 - uh my uh function right so this function
42:00 - is being declared defined once you you
42:01 - don't Define you if you try to search
42:03 - around there's no law no one is defining
42:06 - this function over and over again I can
42:08 - guarantee that to you so no worries
42:10 - about uh no any performance penalties
42:14 - whether you're using a function or
42:17 - inline functions
42:19 - okay with that settled one thing I want
42:22 - to cover before we end this video is
42:24 - about event modifiers so let me come
42:28 - back with this on click because it's
42:31 - easier for me to do it over here so a
42:34 - lot of times we love to do things like
42:37 - say uh events that prevent defaults
42:40 - right for example if you have a form and
42:43 - then you add on-summit event and you
42:45 - want to prevent default prevent the
42:47 - default behavior of that Summit so that
42:50 - you can make some validation and then
42:52 - cancel the requests things like that you
42:54 - you often come in case where you have to
42:56 - write events of preventive for if you
42:58 - have some events like drag and drop you
43:00 - always needs to do like prevent defaults
43:03 - then one great tip for you you don't
43:07 - have to do it you don't have to like
43:09 - come over here and then for each of the
43:10 - click you have to write it here you can
43:12 - come over here and add event modifiers
43:14 - basically you do this
43:17 - uh pipe and then you pass in a modifier
43:20 - so a prevent default modifier will
43:23 - automatically add the event prevent
43:26 - default for your uh event handler
43:30 - so uh so you can have event prevent
43:33 - default so what else besides that you
43:35 - can have stop propagation so that is
43:39 - application that is also another
43:41 - modifier that does the events.stop
43:44 - propagation for you by default
43:47 - so for example if you have a nested
43:51 - element so for example here I have a
43:53 - parent and then I have a child I can
43:56 - come over here on click and stop
43:59 - propagation
44:09 - and come over here on click on parent
44:11 - you would assume that uh
44:19 - oops
44:22 - so you assume that this will not
44:25 - propagate the events up to the parents
44:28 - to that will not propagate and Bubble Up
44:30 - the events to the parents right so this
44:33 - is uh you write stop propagation is the
44:35 - same thing as coming over here and have
44:37 - events and write event.stop propagation
44:40 - it's the same thing so you can use even
44:43 - modifiers or you write it your own it's
44:45 - up to you
44:47 - so for people who are familiar with ad
44:49 - event listeners you know that the third
44:51 - parameter over here is that you can add
44:54 - some options to the events listener
44:56 - right let me pull up the
44:59 - mdn documentation when you say add event
45:02 - listeners when you scroll down there's
45:03 - options and options you can pass things
45:05 - like uh capture once passive so how do
45:09 - you pass these things to your event
45:11 - listeners because you can't really
45:12 - control it over here right you you have
45:14 - no way to to get involved with the
45:16 - advantages so you use event modifiers as
45:21 - well so for example if you want to have
45:24 - a capture event you want to register
45:27 - event at the capture phase you can write
45:30 - on clicks pipe capture
45:33 - now if you click on uh when you click on
45:36 - a child you see that the parent is on a
45:38 - capture face so parent will be called
45:39 - first before child
45:41 - and once about once you can do that as
45:44 - well you can have a pipe and then once
45:47 - so now the parent will only
45:50 - register once so it was you it will be
45:53 - using these options once uh as as
45:56 - defined over here in the add event
45:58 - listeners same thing with passive so
46:00 - passive is a you have to pass in a
46:02 - Boolean so true or false has different
46:05 - meaning in it right so if you want true
46:08 - you will pass it as passive and you want
46:11 - false you will pass in as non-passive so
46:14 - it really depends on which one do you
46:16 - want
46:17 - okay and then uh
46:20 - so you can see over here I
46:24 - um I can pipe as many
46:26 - [Music]
46:26 - um
46:27 - many event modifiers as I want and the
46:30 - order does not matter I can type in
46:32 - all the event modifiers as I want right
46:35 - so the order does not matter and one
46:38 - last event modifier I want to share with
46:40 - you is self
46:42 - so um if I come over here and say self
46:44 - so this is not in the event listeners
46:48 - over here
46:49 - but what self does is hopefully it's
46:53 - self-explanatory self means that if your
46:56 - event listeners uh if the events or
46:59 - Target is self only it will trigger
47:01 - right so meaning in your event handler
47:03 - you're checking event.target
47:06 - equals to the current element and if if
47:09 - it's true then you will do something
47:12 - right if it's true then you do something
47:16 - so if I do self then if I come over here
47:19 - and click apparent you'll see that log
47:22 - out parents but if I click on the child
47:24 - then yeah the current the target is the
47:27 - child and it propagates to the parent so
47:29 - it's the target is not the parent so you
47:32 - don't see console log parents when you
47:34 - click on the child
47:35 - so prevent default stop propagation and
47:39 - then we have capture then you have
47:41 - passive and non-passive you have once
47:43 - and then you have self seven modifiers
47:46 - that you can use if you can't remember
47:48 - all this don't worry you can always find
47:50 - them in the spell.dev docs they will
47:54 - they are all listed over there
47:57 - events modifiers
48:02 - yeah all of them all seven of them are
48:05 - listed over here you can take a read
48:10 - we are going to talk about one big
48:13 - important features in svelt and it's one
48:17 - of those powerful thing that sets vaults
48:20 - apart with everyone else
48:22 - which is the reactive declarations or
48:26 - statements well so what is reactive
48:29 - declarations and statements
48:32 - we shall see
48:33 - but let's start with this example first
48:36 - so over here
48:38 - I've created a component that has
48:41 - accounts variable initialized with one
48:44 - and I have two buttons which has
48:47 - decrements and increments so whenever I
48:49 - click I will increment all decrements
48:53 - the value of counts and at the same time
48:56 - I have these Expressions called counts
48:58 - times two
49:00 - this this uh anything within a curling
49:03 - brackets can be a JavaScript expression
49:05 - so over here I'm going to say counts
49:08 - times two over here so I can see this is
49:10 - always two times of the count
49:13 - so this is okay right uh nothing's wrong
49:16 - with this but what if I have another
49:18 - button over here
49:20 - and
49:22 - uh but I'm gonna call it do something
49:24 - because I'm not sure what I'm gonna do
49:26 - yet because they click me
49:29 - okay and in this function I'm gonna
49:32 - Define this
49:34 - uh okay now I know what I'm gonna do I
49:37 - want to console out
49:39 - the value two times of counts
49:43 - so I probably have to come over here and
49:45 - say counts times two again and so that
49:49 - every time when I click I see the value
49:51 - two times of account is printed in the
49:55 - console
49:56 - so nothing's wrong with this
49:58 - because this example is simple but what
50:01 - if you have a more complicated example
50:05 - where you have a super complex formula
50:08 - over here and you and you want to assess
50:12 - this variable
50:14 - adopt at a lot of places well at that
50:17 - point of time you probably would realize
50:19 - that you can't calculate this on the fly
50:21 - anymore and you want to come here and
50:25 - Define this variable called double
50:28 - so initialize with counts times two
50:31 - so I'm going to show double over here
50:34 - but and then I can use this as well
50:38 - but as soon as you do this you realize
50:40 - that
50:42 - um so at first it's 2 is correct but if
50:45 - you increment it's still two because you
50:48 - got to update this variable double so
50:50 - you come over here and look at all the
50:52 - places that you does you do counts plus
50:55 - plus that you all count minus minus
50:58 - anywhere that you make changes to counts
51:01 - you have to say updates the value of
51:03 - double as well and this does not scale
51:06 - uh it works but this does not scale
51:09 - because what if you have another button
51:11 - uh
51:13 - I'm gonna call uh
51:17 - e scale because it's just not scale all
51:21 - right
51:21 - okay I'm gonna say multi multiply
51:26 - all right so I come over here as a
51:28 - function called multiply
51:31 - and what I have what it does is that it
51:33 - counts equals counts times count
51:36 - always multiply by yourself
51:39 - um so now again
51:40 - uh I need this is our single again
51:44 - because I need to come over here and do
51:47 - double equals counts times two I need to
51:50 - remember to do that every time I change
51:53 - I add a way to updates
51:57 - um
51:57 - count
52:00 - so this is error prone every time your
52:03 - updates counts you need to remember to
52:04 - update double and this is this does not
52:06 - scale so what should we do well this is
52:09 - where reactive declarations
52:12 - comes in
52:14 - so uh this
52:16 - statements itself
52:18 - so a declaration is a type of statement
52:20 - and this statement itself is a
52:22 - declaration statement
52:24 - because over here we actually declare
52:27 - this variable double
52:29 - so reactive declaration is a
52:33 - it's a declaration statement that
52:35 - instead of use called let's double equal
52:37 - something it starts with a label dollar
52:43 - so this dollar label over here
52:46 - um if you if you have so you use a
52:49 - dollar label over here and you write
52:51 - double equals counts times two right so
52:54 - you replace the
52:56 - good old declaration and you with this
52:59 - reactive declaration
53:01 - so what is this dollar label thing well
53:04 - this is actually a label statement
53:08 - um used usually with loops uh for Loops
53:11 - while Loops where you can label a loop
53:14 - and then you can break it right if you
53:15 - have a multiple nested loops and you
53:18 - want to break
53:19 - the loop at the second level right you
53:22 - normally break can only break the
53:24 - nearest level but you want to break like
53:25 - some first level second level or the
53:27 - level of Loops then you have to label
53:29 - them and then you break with the label
53:32 - so this is actually a label and if you
53:36 - know if you know that this is a label
53:37 - which means that actually I need to
53:39 - Define this variable double
53:41 - right uh but then you don't have to you
53:44 - don't have to come over here and let's
53:46 - double right in normal JavaScript you
53:48 - you would have to do this but in results
53:51 - what we do is that we call this reactive
53:53 - declarations and we will inject the lens
53:56 - double for you so you don't have to
53:59 - declare it or you don't have to define
54:01 - it
54:02 - so you write this and then there's this
54:06 - magic of reactive declaration what this
54:08 - does is that it will always execute
54:10 - every time when you call when you change
54:13 - count so which means I can save my time
54:16 - not to do this uh my code is cleaner as
54:20 - well I don't have to come over here and
54:23 - manage the double whenever I change
54:25 - count and you can see this double value
54:28 - changes
54:31 - instantly when I change counts so this
54:34 - this is reactive declaration
54:38 - so let's talk a bit more on this
54:41 - reactive declaration so you've seen like
54:43 - why we need this because every time when
54:45 - you change a variable you have to
54:47 - manually pin stickingly updates a new
54:50 - value that derives from this right
54:53 - so you see the why but let's talk about
54:55 - like how it works in more detail so uh
54:59 - over here the title I say reactive
55:01 - declarations and statements so this does
55:04 - this is not just declarations this can
55:07 - be any statements so any statements that
55:09 - start with a dollar colon will be a
55:12 - reactive statement so I can come over
55:14 - here and say console log count this is
55:17 - again a reactive statement so reactive
55:20 - statement reactive calculations the only
55:22 - difference is that
55:23 - the creation is to declare something and
55:26 - if you declare something means that you
55:29 - don't have to Define let's double
55:30 - yourself right it's being declared
55:33 - together with these statements
55:35 - um and sometimes of course you you uh if
55:38 - you write this it does not uh it is
55:41 - still okay right you can still Define it
55:43 - but the point is you can you can omit it
55:45 - if you want to
55:48 - so
55:49 - um so these two okay
55:52 - reactive declarations and reactive
55:54 - statements and how does that work how do
55:57 - they work how that works is that
55:58 - actually they will actually look at what
56:02 - I call a dependency after statements so
56:05 - what dependency means is that if
56:07 - something so these statements this
56:10 - reactive decorations or statements
56:11 - depends on something and what is that
56:15 - something that something is variables
56:18 - States variables that is
56:23 - um that is being used within this
56:25 - statement itself okay so what are they
56:28 - so for declarations it will always be
56:31 - the all the variables on the right of
56:34 - the equal sign
56:35 - right it depends on these variables to
56:37 - to to update the value of double right
56:40 - so anytime when you see an assignments
56:42 - in a reactive statements on equations
56:44 - the one on the right are the
56:47 - dependencies so this double depends on
56:50 - count right two is not available so for
56:53 - statements you don't have assignments
56:55 - then all any variables that you can see
56:57 - here are the dependencies right so if I
57:01 - say count uh so over here this example
57:04 - will have two the console it depends on
57:06 - console and depends on count
57:08 - over here it depends on count
57:13 - so I prepared some more examples over
57:15 - here
57:16 - let's let's see them
57:19 - so full name
57:21 - first name last name so this is a
57:24 - decoration so all assignments so
57:27 - whatever on the right which is the first
57:28 - name
57:30 - on the last name is the dependent so
57:33 - anytime first name or last name change
57:35 - this whole thing will be evaluated
57:37 - but here for us this case will be a b
57:40 - and c any time A or B or C changes this
57:44 - whole statement will be evaluated
57:46 - but here is num1 num2 and calculate
57:51 - uh because it's still the assignment and
57:53 - over here this is statement so whatever
57:55 - is account if this is the same example
57:57 - so I'm gonna remove this
57:59 - right copy this down over here
58:03 - right over here
58:05 - um do something
58:07 - A and B so anytime any of these changes
58:12 - um you will have to re-evaluate these
58:13 - statements right so when we reevaluate
58:16 - say in our previous example we
58:18 - re-evaluate meaning we'll re uh re
58:21 - re-evalid this which means that we're
58:22 - gonna reassign the new value to the
58:25 - double the variable double
58:28 - so why this is important well this is
58:30 - important because if say for example if
58:33 - you have do something
58:36 - do something
58:38 - A and B
58:40 - but you do something with say console
58:44 - log a b and c
58:46 - you do something at A and B and C
58:49 - um
58:51 - then you have to know that anytime C
58:53 - changes it will not really you will not
58:55 - call this function at all because it
58:57 - only depends on here right so if you
59:00 - define this only do something A and B A
59:03 - or B or do something changes we'll call
59:06 - this function again but anything that is
59:09 - being used over here C is from outside
59:11 - like if you have counts out from here or
59:15 - you
59:16 - come up with a new variable D over here
59:19 - whenever they okay this can't change
59:21 - right but any variables that you refer
59:23 - from this function outside of this
59:25 - function changes uh this will not call
59:29 - meaning it will not call this function
59:31 - right so that is one thing that you need
59:35 - to take note of
59:38 - so second thing that you need to take
59:39 - are notes off is that
59:43 - um when this is being evaluated right
59:46 - one this is being called is important
59:48 - because when this is being inverted
59:51 - depends well decides when this the value
59:54 - of the double being updated so if you
59:57 - come over here and I say console log
60:01 - double
60:03 - uh I'm just gonna add this so that you
60:05 - know that it's double
60:07 - I come over here and you run this and I
60:10 - click increments
60:11 - you'll see that this value always lags
60:13 - behind of what what it shows in fact
60:16 - this is actually the previous value that
60:18 - you see right if I click scale you see
60:20 - that this uh wait now it's 18 when I
60:24 - click it shows 18. this is the previous
60:26 - value you have an update double right
60:28 - you tell me that whenever you change you
60:31 - will you will update this value of
60:32 - double yes but not immediately it's not
60:35 - immediately it's asynchronous it's
60:37 - asynchronous it's it does not happens
60:39 - immediately but it happens right right
60:44 - before svelt update the Dom right before
60:48 - right so uh right before it Updates this
60:51 - double over here the the it evaluates
60:54 - this okay it gets a new value of double
60:56 - now it's 20 and then it shows on the
60:58 - screen
60:59 - but over here
61:00 - it's not yet not there yet so when you
61:03 - come over here you change counts see
61:05 - that the double uh the value of double
61:07 - is still the old value
61:10 - so this is important because uh spell
61:13 - can't go all everywhere else whenever
61:15 - you change counter and then increment a
61:16 - double immediately uh there's a lot of
61:19 - work so it only happens right right
61:23 - before
61:24 - this is felt updates are done so this
61:27 - note number two that you need to take
61:29 - note of
61:31 - then uh the third thing that I want to
61:33 - talk about is the order of
61:37 - um
61:38 - the reactive statements right so I can
61:40 - come over here
61:43 - um I can come over here and then do
61:44 - something like uh console log double
61:48 - so let's let's practice what this
61:52 - statement depends on depends on Console
61:54 - depends on double right so anytime
61:57 - console a double changes uh this
61:59 - statement will be re-evaluated
62:04 - so uh you expect that double
62:07 - uh so so over here every time doubles
62:10 - changes your this all right so you
62:12 - expect this will shows the latest value
62:14 - of double well in fact it does right so
62:16 - now it's four you re-evaluate this right
62:19 - before it updates the Dom okay uh double
62:21 - is now four and then you console log
62:23 - four
62:25 - but what happens if you write this right
62:28 - before the when you evaluate double
62:32 - or if you write it right before
62:35 - uh civil actually will reorders it for
62:37 - you
62:38 - so what it means is that spell actually
62:40 - will look through all the reactive
62:43 - statements and reorder them reorder them
62:46 - based on the dependency order
62:48 - so uh in this case double depends on
62:50 - counts right this statement says double
62:53 - depends on count
62:55 - this statement says it depends on double
62:57 - right nothing not it does not create
63:00 - anything but it depends on double and if
63:02 - I come over here and have another
63:04 - variable say quadruple
63:12 - uh equals to double times two so this
63:16 - quadruple depends on double
63:20 - so you would expect that a okay you
63:25 - can't see quadruple okay let me let me
63:27 - show it here quadruple
63:31 - right so
63:33 - um
63:34 - whoops
63:39 - yes quadruple is written before the
63:43 - double equals to count times 2 but
63:45 - the dependency has order itself so you
63:48 - have to reorder as well not you have to
63:51 - but as well will reorder this for you
63:53 - we'll say Okay doubles depends on count
63:56 - so this but then quadruple depends on
63:58 - double so this has to come after
64:02 - all right and then this console depends
64:04 - on double so this has to come after so
64:08 - if you have cases like this you have
64:11 - cases where
64:13 - two things that depends on double then
64:15 - the initial ordering does matter right
64:18 - the order does matter is just that if
64:21 - there but then if there's dependency
64:23 - other than that counts in priority
64:25 - higher priority than your initial
64:27 - ordering so for example if I come over
64:30 - here console log uh
64:34 - double two equals to double
64:37 - right these two statements both this
64:40 - step both the both of these two
64:42 - statements depends on double
64:44 - but the initial order does matter so if
64:48 - you write double two first then C double
64:50 - two and double but if you come if you
64:52 - reorder this reshuffle come over here
64:55 - you'll see double first before double
64:57 - two right the order does matter but if
65:00 - the dependency but the dependency order
65:03 - comes first
65:04 - so that is notes number three the
65:07 - dependency uh the order of reactivity
65:10 - reactor the order of your reactive
65:12 - statement
65:13 - will be reordered based on the
65:15 - dependency order
65:19 - um so hopefully this uh these three
65:22 - notes the dependency order
65:25 - and then the what is the dependency and
65:29 - the
65:30 - sorry let me let me and then they will
65:33 - be evaluated since asynchronously these
65:36 - three things if you remember it
65:38 - carefully
65:39 - you will you can avoid a lot of a lot of
65:42 - pitfalls involved with reactive
65:44 - statements or declarations
65:47 - uh lastly a few other things that
65:49 - probably you also need to take note of
65:51 - is that reactive decorations or
65:54 - statements only happens at the top level
65:55 - so only here if you come over here and
65:58 - they find something like this uh double
66:02 - equals counts plus two
66:06 - or something it has no effect outside of
66:08 - the top level it already shows you this
66:11 - warning right so
66:13 - yeah that is something else a small
66:16 - thing that you need to take note of
66:21 - to talk about reactivity as well as we
66:24 - talk about reactive declarations and
66:27 - statements and I think it's time for us
66:30 - to talk about the tick function so what
66:33 - is Tick well tick is a built-in function
66:37 - from zwelt that returns a promise and
66:41 - This Promise will be resolved when the
66:44 - update is finished right right after as
66:47 - soon as any updates any pending updates
66:51 - that is already applied to the Dom then
66:53 - the tick the promise returns from a tick
66:56 - function will be resolved
66:59 - um enough with this definition let's
67:01 - take a look exactly what it is so over
67:04 - here I've prepared an example over here
67:07 - you can see that this is what we left
67:10 - off from the reactive declarations uh
67:14 - video If you haven't watched that links
67:16 - in the description
67:19 - so over here we talk about uh if you
67:22 - remember I talk about reactive
67:24 - declarations are evaluated
67:26 - asynchronously they are evaluated right
67:30 - before as well applied the changes to
67:33 - the Dom right right before so over here
67:35 - if you have an increment uh so it right
67:39 - over here you have a double reactive
67:41 - double that is always two types of
67:43 - counts but in this function increments
67:46 - when you increments count double is not
67:49 - this statement is not evaluated
67:51 - immediately right so over here if you
67:54 - console out double you will still get
67:55 - the old value
67:57 - so if I click over here you can still
67:59 - see that it's it's showing four but it's
68:02 - already updated to 6.
68:05 - so
68:06 - how do we make sure if we really want to
68:09 - get the uh the value of double uh to be
68:13 - the latest value what should we do over
68:15 - here
68:16 - well we talk about tick function right
68:18 - so obviously we're going to use the tick
68:20 - so you're going to import tick from
68:22 - sveld
68:24 - and tick is a function that returns a
68:28 - promise
68:29 - so you can use dot then when the promise
68:32 - resolved
68:33 - and when it resolves which means that
68:36 - all the changes that's going to be made
68:39 - uh will has already been applied to the
68:42 - Dom meaning Dom changes has been applied
68:44 - meaning this double has been already
68:47 - updated to the latest value right this
68:50 - this statement will be evaluated right
68:52 - before you apply a changer so when
68:54 - changes has already applied definitely
68:56 - double is already two times of the
68:58 - latest variable account so come over
69:00 - here and I move this double in
69:04 - all right so this I'm gonna say after a
69:06 - tick
69:08 - and just for comparison I will come over
69:11 - here and say before tick
69:15 - so let me click on the button you can
69:18 - see that before tickle gets to
69:21 - because uh this is a
69:23 - synchronously and then at and then when
69:27 - swell decides to update because there's
69:29 - a changes value decides to updates the
69:32 - Dom and you evaluate this double and
69:35 - then you apply all the changes you see
69:37 - two times two equals to four on the
69:39 - screen and then this promise returns
69:42 - from tick will be resolved which you can
69:45 - then console this value out so this
69:48 - although it look it seems that it's
69:50 - coming right after another but it's
69:52 - actually a run a little bit longer than
69:56 - that right so if I come over here if I
69:58 - say uh if you're familiar with
70:00 - asynchronous and synchronous you should
70:02 - know that this happens
70:05 - asynchronously so it's way after even if
70:08 - I have put before here you should see
70:10 - that before comes uh comes way earlier
70:13 - before the aftertick
70:16 - so
70:17 - um this so tick function it's it returns
70:20 - a promise and a lot sometimes I I I
70:23 - don't really like to use the then this
70:26 - is just my personal preference sometimes
70:28 - I like to change the function to be a
70:30 - asynchronous function so that I can
70:33 - await the tick
70:35 - so I come over here and with the tick
70:38 - and then console
70:41 - console this out over here so this this
70:44 - is a Sim this is the same behavior as
70:48 - what we've seen before instead of um
70:50 - it's just that I can use async awaits so
70:53 - that
70:54 - um it's less nested I would say like I
70:57 - because I don't have to do the Callback
70:58 - function in the dot dance it feels like
71:01 - it's nested in I since it's one straight
71:03 - line I can I can wait for this promise
71:06 - to resolve and then do my thing over
71:07 - here so it's the same thing it's just my
71:09 - personal preference of writing it
71:12 - so what are the use cases of this tick
71:15 - function
71:16 - well I prepared another example that
71:20 - um you can use this tick function as
71:22 - well so I'm going to import this
71:23 - component called input dot spelled
71:33 - so let me come comment out everything
71:35 - and just show the inputs
71:42 - so this input I uh we've learned how you
71:46 - can add event business right so I add an
71:48 - input event listeners so every time when
71:51 - something has changed I will update the
71:54 - value to be whatever the value of the
71:56 - input to uppercase so right now I have
71:59 - my so just to show that show the effect
72:02 - I comment all the two uppercase when I
72:04 - type anything
72:05 - the value will this the value because
72:10 - we're passing in the value in so the
72:11 - value will be whatever I'm typing in
72:13 - right so I don't have my caps lock on uh
72:16 - but I when I type something you see that
72:19 - it will automatically converts to
72:21 - uppercase because
72:22 - the two uppercase will convert the value
72:25 - and then you get the uppercase value of
72:27 - the value and you pass it in and then
72:29 - you update the input
72:31 - however this way of updating the value
72:34 - of the input because the input the value
72:38 - of the input originally is lowercase and
72:41 - then you you change you assign it to a
72:43 - value and then you've you have to use
72:46 - this variable value to assign the input
72:49 - value right you're calling
72:51 - uh internally it's calling input of
72:54 - value to this new value that we
72:56 - evaluated and this value is not the same
72:58 - as whatever it's internally in the input
73:02 - so what happens is that it will clear
73:05 - whatever state you have within the input
73:07 - uh it's a bit
73:10 - I'm not sure I will describe it well
73:13 - enough but what what it means is that if
73:15 - I come over here I type something and I
73:18 - try to highlight something
73:19 - and when I try to highlight something
73:21 - there's an internal state of this input
73:23 - so if at this point of time I try to
73:26 - change the input value programmatically
73:28 - right if I do don't do anything and I
73:30 - change the value programmatically
73:33 - um we'll lose the state you will create
73:34 - all the text and then replace with the
73:36 - new text and what happens is that right
73:39 - now if I manually type some uh let's
73:42 - let's come over here I have a button
73:45 - right just to demonstrate this
73:52 - on click
73:54 - if I come over here and say
73:57 - value equals to XXX
74:01 - all right so I type something I
74:03 - highlight something and as soon as I
74:05 - click
74:07 - oh okay I think we need to set some time
74:11 - out over here then
74:13 - I want to make sure that we are still in
74:15 - focus of the input so when I click I
74:18 - have uh
74:20 - five sec
74:22 - three seconds
74:25 - before it's being triggered
74:28 - all right so I try to type something
74:30 - highlight something okay I can highlight
74:33 - something and as you see when the value
74:35 - updated the cursor will shift all the
74:38 - way to the right right because you
74:40 - change every you change the text right
74:43 - there's no way to restore the cursor
74:44 - position it so even if you come over
74:48 - here
74:48 - and you do something like
74:52 - uh value equals to Value 2 uppercase
74:56 - because just now we change it to xXx
74:58 - right definitely there's no way to
74:59 - restore the cursor but if you come over
75:01 - here type something all lower caps and
75:04 - highlight something
75:06 - and then I change everything to
75:08 - uppercase you see that my cursor jumps
75:10 - all the way to the back so that that's
75:13 - annoying actually if you if you don't if
75:15 - you haven't realized it yet that this is
75:17 - actually very annoying especially when
75:20 - you implement this updating the value
75:23 - within a input Handler
75:25 - meaning if you come over here
75:28 - you try and type something
75:30 - and I highlight something and I suppose
75:32 - to press on Q right now
75:35 - uh it jumps all the way to the back and
75:37 - I type Q again you'll see that it it
75:39 - it's typing at the end of it instead of
75:41 - like it where my cursor was supposed to
75:44 - be
75:46 - so how should I solve this well I can
75:48 - save the selection start and end of
75:52 - where the I can get the selection start
75:55 - and end from the input so I can come
75:57 - over here and say let's selection start
76:00 - go to this
76:02 - input.selection start
76:04 - and get the end of as well
76:13 - and one once I change this value I want
76:16 - to restore the selection right input a
76:18 - selection starts equals to selection
76:21 - start
76:23 - so once I update I want to restore it
76:32 - so let's try and see
76:35 - so if I type okay right now I'm going to
76:37 - type Q I'm going to press q q
76:40 - but it still jumps all the way to the
76:41 - back
76:43 - well at this point of time you probably
76:45 - should realize that yes uh you change
76:48 - the value but then the updates happens
76:50 - far later on right asynchronously as as
76:54 - we have this scene if you want to have a
76:56 - reactive statements and you console out
76:58 - immediately it does not update similarly
77:01 - because you haven't updated the Dom so
77:03 - any changes right now happening right
77:05 - now uh the Dom hasn't updated yet so we
77:09 - haven't really actually called
77:10 - input.value Equals value internally
77:13 - within swelt yet
77:15 - so the only way to wait for it to happen
77:17 - before we restore back the selection is
77:19 - to
77:20 - use tick
77:22 - so we come over here import tick
77:29 - and I'm gonna come over here and I want
77:31 - to wait for the tick so I can't use a
77:34 - weight unless I make my function async
77:38 - so come over async function and wait for
77:40 - the tick so wait for it to update the
77:42 - thumb so internally this will be called
77:45 - to update of down value
77:47 - and then we restore the input selection
77:49 - and start and end
77:52 - so let's see how what's the end result
77:54 - of this right so I'm going to type ASDF
77:56 - ASDF okay okay I think I'm gonna
77:59 - type A so that it's more obvious I'm
78:02 - going to highlight this 3A I'm gonna
78:04 - press Q right now Q you see the cursor
78:07 - is still maintained at where I was and
78:09 - press q q
78:12 - and that it is that is what we are
78:15 - achieving so tick allows you to wait for
78:18 - Dom updates to be applied so it returns
78:22 - a promise so that when this promise
78:24 - resolved all the Dom updates has been
78:27 - applied and then you can do something
78:28 - with it so you can
78:30 - um
78:31 - check any value of the relatively
78:35 - declared variables or you can make some
78:38 - changes to the Dom
78:40 - or you get any updated value of the Dom
78:43 - right you can probably instead of
78:45 - getting selection of the inputs you can
78:48 - maybe right before you make changes
78:50 - check the scroll position of your
78:52 - elements and then you add new items
78:55 - updates and wait for that update to
78:57 - happen without all the updates to finish
78:59 - before you say restore the scroll
79:01 - position or something like that right so
79:03 - tick will be very useful in that sense
79:08 - I'm going to talk about components and
79:11 - props
79:12 - you probably have seen me done this you
79:15 - have seen me adding a component into
79:17 - another's wealth components and I
79:19 - promised you back then that I would make
79:22 - another video to talk about this in more
79:25 - detail so the time is now I'm going to
79:28 - talk about components in more detail
79:30 - so here I have a component called
79:34 - app.velt and I have another component
79:36 - called component of sprouts bad naming
79:39 - but bear with me so here
79:43 - um to use these components what I do is
79:46 - I need to import from this file right
79:48 - this Rebel allows us to create multiple
79:51 - this attempts and this is actually
79:54 - multiple
79:56 - files in your file system if you are
79:58 - developing locally so each of them are
80:01 - named dot swelt so you have to import it
80:04 - to use in your components so you can
80:06 - come here and say Imports component from
80:09 - component
80:11 - that is welt svelte
80:14 - so uh one thing to take note is that
80:18 - you're importing from a default export
80:20 - so this is one key thing about uh file
80:24 - is that your component itself will be a
80:26 - class and then it will be an export
80:28 - default so you import it from export
80:31 - from the default exports and to use it
80:34 - you use it like any other elements
80:37 - you're getting buckets and there's a
80:40 - component so a different one thing to
80:43 - differentiate between what is a
80:45 - component and what is an element because
80:48 - you could write something like this and
80:51 - how does felt knows that what whether
80:53 - this is a component or an element so the
80:56 - differentiator is that component
80:58 - starts with a capital letter and element
81:01 - starts with a lowercase letter
81:04 - uh so I I believe this is quite uh
81:08 - prevalent in other Frameworks as well
81:10 - anything that starts with a capital
81:12 - letter is always a component anything
81:15 - that starts with a lowercase will be a
81:18 - elements
81:20 - so this is how I use my components and
81:24 - I'm not sure you're paying attention to
81:26 - me speaking or you actually are looking
81:27 - at the screen because at the screen
81:29 - right now you already see a component
81:31 - right this is the components that I've
81:33 - written over here if I change it uh say
81:36 - hello hello
81:39 - then yeah you can see that over here
81:42 - reflected over here this is the
81:44 - components I can create multiple
81:46 - components if I want they will be
81:49 - created this way
81:50 - and there's no limit in
81:53 - um your components where how many top
81:55 - levels elements right there's no such
81:58 - thing right you can have multiple divs
82:00 - as you want come over here I have like
82:03 - two divs three divs okay I think I don't
82:06 - think we can see a difference let's say
82:08 - one two and three you can have men as
82:11 - many divs as many top level elements in
82:14 - one component as you want there's no
82:16 - limit at all what's what's the point
82:18 - right so here you have components four
82:22 - components and create this
82:25 - then having a components you know uh
82:29 - element in your component having a
82:31 - nested components in your components is
82:34 - not that fun at all if you just show
82:36 - like content that it has right you can
82:39 - have Logics in your component itself
82:42 - but what's great about what's what's
82:44 - more interesting is what if you can pass
82:47 - the data
82:48 - from
82:49 - I would call this the parent components
82:51 - to the child components right I call
82:54 - this a parent and this component is a
82:55 - child because parents bear a child right
82:58 - so any anything that is used inside is
83:01 - called considered a child component by
83:04 - this current component which is called a
83:06 - parent so you can pass data from parent
83:08 - to the child
83:10 - how pass it by what I we called it a
83:13 - props
83:15 - so same thing as how you will pass
83:17 - things uh attributes to elements you can
83:20 - pass attributes to components and we
83:23 - call it props right we don't call it
83:25 - attribute to call it props so you can
83:27 - pass something like over here I have
83:28 - name right so I can pass name to
83:32 - the component as props
83:34 - and same thing that you need to remember
83:36 - as well is that same as how you can
83:39 - write attribute shorthand you can have
83:41 - shorthand for props as well so this and
83:45 - this are the same if the if the
83:48 - attribute name and the value variable
83:50 - name is the same you can do it this way
83:52 - so how do I receive it within the child
83:55 - component well um of course probably I
83:59 - have something like a variable right I
84:00 - need to receive it into a variable and
84:03 - how do I make this variable a props well
84:07 - you
84:08 - use exports so use export let's name
84:12 - then this way
84:14 - um
84:15 - this way what you define is this name is
84:18 - the props so you have to follow exactly
84:20 - the name itself right if you come over
84:22 - here and say Nami
84:25 - then this is not the props that you're
84:28 - passing in you're passing in something
84:29 - else so you can only part you need to
84:32 - make sure that this name and this is the
84:34 - same
84:36 - okay
84:37 - and once I do that I can come over here
84:40 - and use it right I'm gonna say component
84:43 - uh I'm gonna put it a div so that you
84:46 - can see
84:47 - clearly right so as a div components and
84:50 - a name so I pass wool for the first two
84:54 - cases and over here I didn't pass it
84:56 - because I call it Nami Nami something
84:58 - else I don't know what it is and this I
85:00 - didn't pass anything so I get undefined
85:02 - as well right it does not have to be a a
85:05 - variable you can pass it with like a
85:07 - string
85:09 - right this sorry this works as well
85:14 - so what if the case that you didn't pass
85:16 - but you want to have a default value so
85:18 - anytime when you don't pass something
85:19 - but I want to show a default value what
85:21 - do I do
85:22 - well it's like defining a variable like
85:25 - right now you are defining a variable
85:27 - what do you do to provide default value
85:29 - for the variable before you do some
85:31 - changes well you
85:32 - said something right so you come over
85:34 - here and say uh default uh say svelt is
85:40 - amazing
85:42 - then this will be the default value and
85:44 - as you can see over here uh the last
85:46 - component does not pass in anything
85:49 - that's not pass in name then the name
85:51 - will have the default value which is
85:53 - spelled is amazing it is amazing it
85:56 - isn't if it feels amazing click like on
85:59 - the video
86:01 - so we've seen how you can create props
86:03 - you can have default value of the props
86:05 - and one thing I want to show you is a
86:08 - lot of times we are lazy uh we are lazy
86:12 - so we like to do things lazily so what
86:15 - if I have over here is this component I
86:19 - have two props like spot let name and
86:22 - then export let email
86:24 - so can I have default email address as
86:26 - well blah.com
86:31 - and because I say email right
86:36 - and I'm lazy in a sense where uh what if
86:40 - I have an object
86:43 - that has name
86:46 - uh little and email
86:51 - .com this is this is not a real email
86:54 - don't email me to this address so what
86:56 - if you have this object and you want to
86:59 - um
87:00 - add it to your components you would have
87:04 - to basically come over here and say
87:06 - object.name
87:09 - equals to object dot email right this is
87:13 - this is what you have learned so far
87:15 - this is what you have to do
87:18 - but humans are lazy and lazy humans come
87:22 - up with lazy ways to work around things
87:26 - um
87:27 - if you imagine if you remember uh cases
87:30 - where you if you have no object and you
87:33 - want to copy some of the properties to a
87:35 - Target object you can spread the values
87:38 - the properties of the object over right
87:40 - so if I have a Target
87:42 - and I want to copy all everything from
87:44 - here I can do a
87:47 - spread
87:49 - all right so same thing goes same idea
87:51 - goes I can come over here and copy this
87:54 - because I'm going to prove it it's the
87:55 - same thing I can come copy this and I'm
87:58 - gonna paste it in over here so this
88:00 - spreads the object into the props and as
88:04 - you can see uh let me comment this out
88:07 - this is the ones that we already spread
88:10 - the objects into the props and so it has
88:15 - name and email so it's spread and you
88:17 - get name and email over here
88:18 - of course you don't I think this is a
88:21 - bit ugly to me it's hurting my eyes
88:23 - usually I write it within just one line
88:25 - so that it looks concise and compact
88:29 - so I can come over here and write this
88:31 - you can spread props so what we have
88:34 - learned so far components Imports
88:37 - components default exports
88:39 - you write props
88:41 - how do you create props exports syntax
88:44 - allows you to create props and then
88:47 - default props as long as you provide
88:49 - Define the problems with a value that is
88:52 - the default value if the props is not
88:54 - passed in and we have seen how we can be
88:56 - lazy spread the props into the
88:59 - components using this syntax where you
89:02 - spread like an object right like how you
89:04 - spread an object you come over here and
89:06 - do the same thing three dots and it's
89:08 - spread it
89:12 - so we have learned about how we can use
89:14 - Elements by passing in attributes as
89:17 - well as how to add event listeners to
89:19 - elements and in the last video we
89:21 - learned about components we learned
89:23 - about components can be used almost as
89:26 - the same way as elements and you can
89:28 - pass in props almost as the same way as
89:30 - you can pass in attributes to the
89:32 - elements so can an component
89:37 - attach any event listeners
89:40 - well we'll take a look in this video so
89:43 - over here I prepared an example I've
89:46 - created a component called profile uh
89:49 - and I pass in props just like how a
89:51 - processing attributes I pass in props I
89:53 - have a name called Lee how which is me
89:55 - and then I have a status which is a
89:58 - status that I'm currently learning
90:01 - svelte okay so in my components I
90:04 - declared two props name and Status
90:05 - that's how I pass that in
90:07 - and I also have this button called uh
90:11 - skill points it's a local state skill
90:13 - point and I have
90:16 - um
90:17 - buttons that I can increment or
90:19 - decrement my skill points
90:21 - so if I click you can see my skill point
90:24 - is increasing or decreasing not quite
90:26 - sure what to do with the skill points
90:28 - yet but uh that that is how this
90:31 - component works so if I want to know
90:34 - when my skill point has changed
90:37 - what should I do if I want to know my
90:40 - skill point whether my when my skill
90:42 - point has changed from this parent
90:44 - component from the app.spel what should
90:46 - I do
90:48 - well
90:49 - um one way is I can firstly I of course
90:52 - I need a callback function so that I can
90:54 - do something when that change so I can
90:56 - define a
90:57 - on skill point change
91:04 - and hopefully this is some sort of event
91:07 - right maybe like skill points the new
91:11 - skill point
91:13 - and why I need to what I want to do over
91:16 - here is just to console it out so that
91:18 - you can see that it's it's being called
91:20 - so I'm gonna say on skill point change
91:23 - and then my new skill points so how do I
91:27 - pass this function into my components
91:31 - well you can pass a
91:33 - anything through the attribute through
91:36 - the props so it could be a string it
91:40 - could be numbers and it could be
91:41 - functions as well no one says that you
91:43 - can't pass in a function as a props so
91:46 - you can come over here and say maybe on
91:48 - skill point change
91:51 - and pass in my props
91:53 - and because this the props name and the
91:56 - variable name is the same I can actually
91:58 - use this prop shorthand or the attribute
92:02 - shorthand
92:03 - so of course I need to do Define these
92:05 - props or else I can't receive it so I'm
92:08 - going to find this on skill point change
92:10 - and I need to use it as well I need to
92:13 - come over here and call this with the
92:16 - updated skill point value
92:18 - so come here and say skill point
92:21 - and I need to do it for my skill point
92:24 - over here as well
92:26 - okay looks good so uh let's come over
92:29 - here and take a look at the console
92:32 - so if I change something you can see
92:34 - that this function is being called right
92:36 - that that's good
92:38 - because if you take a look at this you
92:41 - say okay this has to be called every
92:42 - time skill point uh exchange actually we
92:46 - can use a reactive statements right no
92:49 - one says you can't do that so I can come
92:51 - over here and say uh on skill point
92:54 - change skill point so this statement
92:57 - let's take a look what when will this be
93:00 - called whenever on skill point has
93:01 - changed or whenever skill point has
93:03 - changed exactly what we want so we can
93:06 - come over here
93:07 - click click click click you can see that
93:10 - this is being logged out whenever any of
93:14 - it has changed
93:16 - okay so far so good
93:18 - yep but what if I come over here okay
93:22 - I'm not sure whether you like the butts
93:24 - but but is how I segue into uh what I
93:28 - want to share next so if I come over
93:30 - here I have another profile
93:32 - um
93:33 - call
93:35 - me again and learning
93:39 - component events
93:42 - okay but this time now for this profile
93:45 - I don't want to know about when the
93:49 - skill points change right I can know and
93:51 - I can just don't care about it right um
93:54 - not all the events I want not everything
93:57 - I want to know right so for this case I
93:58 - don't want to know but then because we
94:01 - kind of assumed that on skill point
94:03 - change is a function because we call it
94:06 - no matter what then uh that that is a
94:09 - problem to us and we kind of have to so
94:12 - the way to work around this is we have
94:14 - to check uh
94:16 - if type of is a function
94:21 - then we call this right so so there's
94:24 - actually there's two ways uh I jump the
94:26 - gun too fast but actually there's two
94:27 - ways to work around this right first is
94:29 - every time we want to call this on skew
94:31 - Point change you check whether it's a
94:33 - function if it's a function then you
94:35 - call it another way that uh you if you
94:39 - assume that it's either always a
94:41 - function or it's just that not being
94:43 - passed in then you can have a default
94:46 - function over here default value for
94:48 - on-screw Point change right so if it's
94:49 - not passing then it's always this
94:52 - fallback function and if it's defined
94:54 - then yeah you can call so if you know
94:56 - that it's either passing and always be a
94:58 - function or not passed in then you can
95:01 - do it this way
95:02 - so two ways that you can do right
95:05 - every time when you call you check if
95:07 - it's a function or secondly it's you
95:08 - provide default a fallback function so
95:11 - that if it's not provided you can you
95:13 - can still call it you you can still you
95:15 - it's fall back to a function so it can
95:17 - always trust that it's always a function
95:22 - um yeah so nothing wrong about this
95:25 - but as you can see we kind of couple
95:27 - strongly about assumptions of skill
95:31 - points change has to be a function right
95:34 - or else we have to provide a fallback
95:36 - function
95:38 - um but if you take a look at
95:40 - um buttons and all the Dom elements you
95:44 - have
95:45 - usually it's it's very common that uh
95:50 - the function the events itself is
95:52 - optional right it's not all buttons you
95:54 - have to listen to on click on or not all
95:56 - inputs you have to listen to on input on
95:58 - change on anything right so it's very
96:01 - common that you listen to events only
96:03 - you I when only you are interested in so
96:07 - that should be the same case as a events
96:10 - from uh components right it shouldn't be
96:13 - like this where you you have to always
96:17 - assume that within the function a
96:18 - component itself always assume that it's
96:20 - always there and you can always call it
96:22 - as a function you should
96:23 - it's it's more of the other case where
96:26 - you should assume that any events that
96:28 - you're going to come out uh it should be
96:29 - optional to be received on the other end
96:32 - so I would
96:35 - kind of prefer if you check whether this
96:39 - is being
96:40 - defined and only then you call it
96:44 - um of course there's an even better way
96:47 - to do it which is to use a component
96:50 - event so let's take a look at how you
96:53 - can uh
96:55 - dispersion component event so before we
96:57 - dive into how we can take a look at how
97:01 - it should be written instead from from
97:03 - the outside right instead of passing it
97:06 - as a function
97:07 - right it should be more like an event
97:09 - listener so instead which we can listen
97:13 - to events so I'm going to come on event
97:16 - and pass in the name of the event so I
97:18 - can come up with any name but now I'm
97:21 - going to call it as a skill point change
97:23 - as the name of the event and I can pass
97:26 - in this function instead right this is
97:30 - to handle when this event has it's been
97:34 - this patch it's over here I'm not going
97:37 - to listen to so I'm not passing it in
97:39 - and here I can so it's it's an optional
97:41 - thing right when whenever you do this
97:43 - you know that it's kind of an optional
97:44 - it's like event listeners for your
97:46 - elements
97:47 - so how do I make my component to able to
97:50 - dispatch this event
97:52 - I can come over here and I need
97:56 - something called uh event dispatcher so
97:59 - I'm going to come here and I'm import
98:01 - create event dispatcher
98:04 - oops
98:09 - and this uh this is a function that
98:12 - creates the event dispatcher so let me
98:17 - call this function so this function
98:20 - itself the create event dispatcher has
98:23 - to be called during a component
98:25 - initialization meaning it has to be
98:27 - called at the top level when we uh so
98:31 - this all these are going to be called
98:32 - during the component initialization
98:34 - right so you have to call it at the top
98:35 - level you can't create event dispatcher
98:38 - within say within a function right that
98:41 - does not work we're trying to call it
98:43 - here and you try to decrement you'll see
98:46 - that your through an error it says that
98:48 - function called outside component
98:50 - initialization
98:51 - well why is this so well this is because
98:54 - uh when I call when during component
98:56 - initialization
98:57 - svelt's uh knows that okay I want to
98:59 - initialize this component this instance
99:02 - of this component so I it turns it's
99:04 - it's remember okay this is the component
99:06 - I'm setting up and then
99:08 - Whenever I Call this function so this
99:10 - function itself uh you import directly
99:13 - from spell right so this function itself
99:15 - has uh itself
99:17 - kind of like stateless but at the same
99:20 - time it's it's when you call this it
99:22 - will reach your asphalt hey what is the
99:25 - component that you are currently
99:26 - initialization initializing right when
99:30 - because this function is not coming from
99:32 - anywhere within this component right
99:34 - it's not some some function that pass it
99:35 - in so the this function within this
99:38 - function itself has asked well okay what
99:40 - is the component you are initialization
99:41 - in initializing and then you know okay
99:45 - this function okay I'm gonna register
99:48 - I'm gonna get something from this
99:50 - component right so you get the dispatch
99:53 - function you get what is the component
99:55 - that was initializing at that point of
99:57 - time so you get this dispatch function
99:59 - and then you can dispatch events so
100:02 - dispatch events is like how you would
100:03 - dispatch an event on your elements right
100:06 - element can dispatch an event so so that
100:08 - anyone from outside can listen to it so
100:11 - get this dispatch function
100:13 - and I'm come over here
100:15 - so whenever skill points change I want
100:18 - to dispatch a new event so there's two
100:21 - parameters first is the
100:25 - um first is the
100:28 - the name of the event so I come over
100:30 - here I I kind of assume that I'm gonna
100:32 - listen to this event called skill point
100:34 - change right so I copy this and I'm
100:37 - gonna paste this in so this is the name
100:39 - of the event
100:40 - and then uh Skip and then the next thing
100:44 - is the I'm going to pass the data
100:46 - whatever I'm gonna call with uh with the
100:49 - events so uh okay so I don't need this
100:53 - on skill point change anymore and then
100:55 - remove this
100:56 - so let's take a look over here
100:59 - over here when I change something okay
101:01 - you can't see it because this is no
101:04 - longer the new skill point if uh because
101:07 - okay so if you inspect this you could
101:09 - see that this is actually the event
101:10 - right and uh okay I think as always I
101:15 - told you don't take my word for it so
101:17 - you should always inspect element and
101:19 - take a look
101:21 - so go to combo console and clear
101:23 - everything and I'm gonna click over here
101:26 - you see that this is a custom event an
101:30 - event has this property called detail
101:32 - and detail is the data that we pass
101:35 - along with this event
101:37 - so I'm gonna close this and I'm gonna
101:40 - say events.detail which is the data that
101:43 - I pass in from here so this is the event
101:46 - detail you can pass in anything I can
101:48 - pass in a string a number an object an
101:50 - array and anything that you can think of
101:52 - so events are detail over here and now
101:55 - if I decrement you can see that it still
101:58 - works you can have on skill point change
102:00 - and
102:01 - print out the skill point right the
102:04 - current skill points so this is a way
102:07 - that you can't dispatch an event from a
102:11 - component by creating event dispatcher
102:14 - and then dispatch the event
102:16 - and as you can see how we work through
102:18 - then and decides that okay we need to
102:21 - use an event dispatcher is realize that
102:23 - this way when we do it this way it kind
102:25 - of decouples uh from the user
102:28 - perspective the user of this component
102:30 - versus the internal of the components
102:31 - right you right now it decouples where
102:34 - you don't assume that this event is
102:37 - always being listened by the user it's
102:39 - not always being passed in you don't
102:40 - have to always pass in a function we can
102:42 - always dispatch an event and anyone can
102:45 - listen or not it's optional right so you
102:49 - see that both we can click on both
102:52 - both components skill points we can
102:55 - change the both skill points but it does
102:57 - not throw an error if I'm not listening
102:59 - to it it's optional so it's some at some
103:02 - sense it's it's being decoupled already
103:04 - whether you're listening or you are
103:06 - dispatching it's it's the couple
103:08 - so that's why we and so to use this
103:12 - events listener you add event listener
103:14 - as the same way as adding event
103:15 - listeners to your elements add on skill
103:18 - point change
103:20 - uh you pass in a function just like how
103:22 - you would and you can pass in data for
103:25 - your event so this will be the data if
103:27 - you don't pass anything it will be
103:29 - undefined don't take my word for it it
103:31 - should be undefined in the event the
103:33 - detail and let's see oh wait what
103:38 - okay so right now if you look at this
103:41 - statement this patch uh what what are
103:44 - the dependence right the dispatch all
103:46 - the skill points uh this is a string so
103:48 - this if this change will so right now if
103:51 - I change skill point it will not
103:52 - re-evaluate these statements so uh one
103:55 - workaround is I can add I can call this
103:58 - skill point
104:00 - and then comma so that this whole
104:03 - statement will be evaluated when skill
104:05 - point or dispatch has changed so if I
104:07 - come over here and then you can see that
104:09 - right now it's okay that's why I told
104:11 - you not to take my word for it it's now
104:13 - instead of undefined if you don't pass
104:15 - anything it's now
104:17 - all right so you your event or detail
104:19 - will be now
104:21 - um and if I change it back now you will
104:24 - see that
104:27 - uh it's it's it's the value again so
104:31 - that's that's how you create uh events
104:33 - for your components
104:38 - in the last video we talked about
104:40 - component events and in this video we
104:43 - are still going to talk about component
104:44 - events because there's one thing that I
104:47 - didn't mention about in the last video
104:49 - uh which is I feel it's important and
104:52 - you should know about about component
104:54 - events which is about event bubbling so
104:58 - event bubbling it's it's not a concept
105:00 - in com it's a concept in elements events
105:05 - so if you have a element like this over
105:08 - here as you can see when I click on any
105:11 - of the buttons element button one or two
105:14 - and the events will bubble up to the
105:18 - parent so if I even if I click on the
105:20 - buttons and I don't uh the events will
105:22 - be bubble up meaning uh any of the
105:26 - parents that listen to the event should
105:28 - be able to uh listen it should be able
105:32 - to trigger the events Handler even it's
105:34 - uh even if it's on a parent level right
105:38 - so this button when I click
105:41 - um if it has an event listeners it will
105:42 - be handled and then it will bubble up if
105:45 - it's not if it's not prevent uh
105:48 - propagation then it will propagate up
105:49 - right it will go to the parents which is
105:51 - this div and then go to this parent and
105:54 - then in this parent you have the event
105:55 - business uh registered you you are
105:57 - listening to on click so the on element
105:59 - button click event listener will be
106:02 - triggered and therefore you can console
106:06 - out the value of course it's still the
106:09 - target the events Target the the
106:11 - elements that is this uh The Click is on
106:16 - is this two buttons so if I
106:19 - um check the data set dot value which is
106:22 - the data value attribute over here I can
106:24 - get button one or two right so if I
106:25 - click on the element button one or
106:28 - button two you can see that this is
106:30 - being triggered and you can get button
106:32 - one or button two
106:34 - so this is uh events bubbling in Dom
106:38 - elements but what about components if I
106:41 - have an app I have this parent component
106:45 - um listening to this component button
106:46 - click right so if I look into parents I
106:49 - have another component called child
106:50 - looking at child I have another
106:51 - component called grandchild and in the
106:54 - grandchild I have another component
106:56 - which is okay no it does not have so it
106:59 - has two buttons same two buttons I have
107:02 - button one and button two uh wait hold
107:05 - on button two does not have one click
107:07 - let me add it in
107:10 - so button one and button two have two on
107:13 - click event listeners and over here I am
107:16 - dispatching component events I I use
107:20 - create event dispension to create a
107:22 - dispatch and I dispatch component button
107:24 - click event
107:26 - and I pass in the events uh I pass in
107:29 - data like pattern one and button two so
107:31 - that
107:32 - the component uh when I listens to it I
107:35 - can get event or detail and will access
107:37 - the button one or button two
107:39 - so will this event when I click wallet
107:42 - bubble up to the parent which is this
107:45 - child component to its parent which is
107:47 - this parent component and then to its
107:49 - parents again which is this
107:51 - app.component and receives it from here
107:53 - and the name is the same and then you
107:56 - get handle over this on component button
107:58 - click
108:00 - callback function Handler functions does
108:02 - it will it work well let's see let's
108:04 - click
108:05 - well it does not work okay that that's
108:09 - why we make this video because I'm going
108:10 - to tell you how you can make it work
108:13 - so um
108:15 - so first and foremost I have to tell you
108:17 - unfortunately
108:19 - component events does not bubble meaning
108:22 - it does not go one left it does not go
108:25 - through all its parents and then bubble
108:27 - up all the way to this app.spel right it
108:31 - does not bubble all the way to this uh
108:33 - parent component over here so what I can
108:35 - do instead is a workaround sadly it's a
108:39 - workaround so I have to come over here
108:41 - on ciao I have
108:43 - um I'm dispatching an event from this
108:46 - grandchild right so I can definitely
108:48 - listen to this event called a component
108:52 - button click
108:54 - I can listen to this so I can handle it
108:57 - over here and come over here and create
109:00 - this event
109:03 - so if I come up here and I say in ciao
109:07 - does felt and take a look at event dot
109:10 - detail
109:11 - hopefully this works if I click yes you
109:13 - can still see button one button two
109:16 - right so if I once
109:18 - to Bubble Up to the parents
109:21 - like bubble it does not bubble right so
109:23 - if I want my parents which is in this
109:26 - parent that's felt to able to listen to
109:28 - this event I'll have to dispatch this
109:30 - event myself so I have to come over here
109:33 - Imports create event dispatcher
109:38 - whoops
109:41 - and I am going to create this dispatch
109:45 - function
109:48 - oops
109:53 - and then I'm going to dispatch this
109:55 - event okay so I'm going to dispatch I'm
109:57 - going to use the same name so that the
109:58 - parent can listen to the same name as
110:00 - well and I can come over here and pass
110:04 - in the same data which is the event or
110:06 - detail all right so we're going to come
110:07 - over here paste it in uh comment okay I
110:11 - can still leave it in
110:12 - so with this in place I can come over
110:15 - here to my parents and listen to it I
110:17 - can listen to this component button
110:20 - click
110:22 - event
110:24 - console
110:26 - in parent dot spell
110:29 - and events.dto right let's see so I
110:33 - click yes my child receives it and then
110:36 - I dispatch the same
110:37 - it's not the same event per se but I
110:40 - dispatches another a new event with the
110:42 - same events name and the same data so
110:44 - that in the parents I can register I can
110:47 - listen to that event
110:49 - I can log out uh the data as well so I
110:52 - get the same data so in order for my
110:55 - app.velt over here to listen to it I
110:58 - need to do the same dance again I need
111:00 - to come over here copy this
111:03 - paste this in
111:04 - I have this patch come over here the
111:07 - scratch the same event so I'm going to
111:09 - dispatch the same events name which is
111:12 - component button click so that in amp
111:15 - does felt I can listen to it alright so
111:18 - the moment of truth let's click the
111:20 - buttons and now you see on component
111:23 - button click logs out the data right
111:26 - finally after passing one by one it's
111:29 - it's like running a relay marathon where
111:32 - you relay this you relate the events
111:35 - from the grandchild to the child to the
111:37 - parent and then all the way to the eye
111:39 - dots felt
111:40 - so if you look up this on this Felts
111:44 - website or documentation it's called
111:46 - event forwarding you have forward the
111:48 - event from one place to and to the
111:50 - parents all the way to the its parents
111:52 - to its parents and and therefore you you
111:54 - achieve this event bubbling effect that
111:58 - you would get it normally in a Dom
112:01 - elements
112:03 - of course this is uh this is
112:07 - this is a lot of keystrokes to type so
112:11 - uh sveld comes up with a shorthand right
112:14 - everything that is annoying a lot of
112:17 - keystrokes we have short hands for it so
112:20 - if you are listening to this event and
112:22 - you are going to dispatch the same event
112:24 - right your dispatching the same event
112:25 - you can come over here
112:28 - and just do this instead so you can
112:30 - remove all this
112:34 - and there you go
112:35 - so you click still works right you still
112:39 - dispatch all the way so you you listen
112:41 - to the events and dispatch the parents
112:43 - and the uh like forward it right so it's
112:46 - the same uh thing that we've written so
112:49 - far except that so so let me keep this I
112:52 - commented out so that
112:54 - you can compare so previously is you
112:56 - have to register your own event
112:58 - listeners and you do a special own now
113:00 - you forward it by just doing this so I
113:04 - click again everything works you forward
113:07 - all the way to its uh parent
113:11 - so there you have it event forwarding
113:15 - shorthand and this shorthand actually
113:17 - does not just apply to component uh to
113:21 - show you that this actually applies to
113:23 - elements as well so if I come over here
113:26 - and I will do this then this is actually
113:30 - the same shorthand of
113:33 - um having adding a
113:36 - on
113:38 - a shorthand of so previously we were
113:41 - doing okay let me let me copy this and
113:43 - so that we can comment it out
113:46 - all right so previously we were adding
113:48 - event listeners to on click one and then
113:50 - dispatch this event so if you do this
113:52 - then this is the same as dispatching the
113:55 - same the event of the same name right of
113:58 - this name so this is the same as doing
114:00 - this
114:01 - uh on on click on the button so you can
114:05 - listen to so we if we want to fold all
114:08 - the way to the to the top we do this
114:11 - come copy this forward it up
114:14 - and then come over here those felt and
114:17 - let's listen to this
114:19 - so I'm gonna whoops what's going on
114:23 - so I have my inline event handlers
114:27 - okay it's a bit hard to read so I'm just
114:30 - tap in so I have my invent inline event
114:33 - handlers and I'm gonna come over here
114:35 - and console log on click in at dots felt
114:40 - and I have
114:42 - yeah and there you go and let's click on
114:46 - the click me too right on button on
114:49 - component button click and click me one
114:51 - which is on click in app.spel
114:54 - so we you can use this shorthand on
114:57 - elements as well on element
114:59 - um on
115:01 - element events as well Dom events as
115:03 - well uh it will be the same as how
115:07 - writing this right so this code over
115:10 - here it's not evaluated we are not
115:13 - passing on click one to anywhere right
115:14 - so this is just to demonstrate that if
115:17 - you write this in state and dispatch
115:20 - click then it will be exactly the same
115:21 - as using on colon click shorthand
115:25 - so when would you use this on Dom
115:28 - elements well usually if you create a
115:31 - component that is kind of like a button
115:33 - and you uh button with a different
115:35 - styles or you come up with an inputs but
115:38 - input with a different styles or
115:40 - different behaviors small Logics and you
115:42 - want to Bubble Up the Dom events to the
115:45 - parent as well so that if I come over
115:47 - here have a custom button
115:51 - and I kept my button over here as I say
115:54 - a custom button and I want to forward
115:56 - this Dom event on click Dom event to the
115:59 - parent as well so that I can import
116:01 - custom event a custom button and listen
116:03 - to click event then I can do this right
116:06 - this will save me time of having to
116:09 - register event listeners and then
116:11 - manually create event dispatcher and
116:13 - dispatch the same uh create an event of
116:16 - the same name
116:20 - so today I'm going to talk about
116:21 - installing your elements with class wait
116:24 - I thought we learned about this before
116:26 - right in this example you we we talk
116:30 - about how you can add a class and then
116:32 - you can add a class selector in your
116:35 - Styles and then boom you apply the
116:38 - styles to elements right what else to
116:41 - learn about
116:42 - well that's right have you learned about
116:45 - a conditional class
116:47 - well that's not that hard either right
116:50 - um if you come over here if I have class
116:53 - over here I have a profit where if a
116:55 - profit is negative I'm going to apply a
116:57 - negative class if it's positive I can
116:59 - apply a positive class so a class
117:02 - attribute is is a you can pass in a
117:05 - string and within string within this
117:07 - string you can have curly bracket so
117:10 - anything within color brackets is you
117:12 - can pass in any JavaScript expression so
117:14 - I can come over here
117:16 - um
117:17 - I'll check whether the profit is next
117:19 - time zero then apply a negative class uh
117:22 - if it's greater than zero I use positive
117:24 - class
117:26 - um
117:26 - yeah that that's that's it is there
117:29 - anything else you want to show me
117:31 - well it is can you make this more
117:34 - concise well of course there's a little
117:36 - way to write this uh you can okay so if
117:39 - it's profit less than zero I use
117:41 - negative and I can combine these two
117:44 - expressions together
117:46 - um is that what we are looking for so
117:48 - it's like this then I can be like this
117:51 - uh
117:53 - right yeah can you make it more concise
117:56 - and easy to read well yes kind of uh
118:00 - maybe I can come over here I can define
118:02 - a class
118:04 - or
118:05 - so class so this is a profit class
118:10 - and I can use I can apply this over here
118:14 - and then I can add this as the string to
118:18 - my yeah to my class so that I can change
118:21 - whatever string it is is that it's well
118:26 - well we've seen a lot of different ways
118:28 - of writing right so there's no a perfect
118:31 - way of writing but today I'm going to
118:33 - share with you one thing one tips which
118:35 - is to use a class directive yes class
118:38 - itself can be attractive as well so if I
118:41 - come over here
118:43 - uh let me undo a bit and if I come over
118:45 - here I've written this a class
118:49 - let me back it up even more I I have
118:53 - these two conditions over here and you
118:55 - can immediately see that negative class
118:58 - should be applied when profit is less
119:01 - than zero and there's a nice way to
119:04 - write this to express this
119:07 - um in using a class directive so same
119:10 - thing I same thing as what we have over
119:12 - here I'm gonna copy this first I'm gonna
119:15 - use a class directive so as a directive
119:17 - is anything with a colon right so I
119:19 - write class and then a colon and I can
119:22 - pass in the name of the class so the
119:25 - name of the class is called the negative
119:27 - and it passing a condition for this so I
119:30 - can come over here and write a profit
119:32 - Less Than Zero so this thing this whole
119:36 - thing class colon negative equals to
119:39 - profit less than zero it's the same way
119:41 - of writing expressing this but I find
119:44 - this is more ex
119:46 - is more expressive it is it expressed
119:50 - more to me where it says that uh if this
119:53 - Cloud uh negative class apply based on
119:56 - this condition rather than you have a
119:59 - ternary Expressions that tries to return
120:03 - a string from your JavaScript
120:05 - expressions and we kind of have to
120:07 - figure out like what that string is by
120:09 - reading this and we figure that oh it's
120:11 - either a positive string or an empty
120:13 - string and and then what is the
120:15 - condition and I find that reading this
120:18 - this writing it this way is is much more
120:20 - readable I'm gonna come come over here
120:23 - and convert this to class positive
120:27 - with the condition for the class
120:30 - positive as well so I can write it this
120:33 - way now so I have class negative profit
120:36 - less than zero and plus positive plus
120:38 - relation one so let's try it still works
120:41 - I always try don't take my word from it
120:43 - always try whether it works or not
120:46 - okay so I have one more thing for you to
120:48 - try as everything goes where we like to
120:51 - have shorthand
120:53 - class directive also has its own
120:56 - shorthand and I
120:58 - hopefully you can guess what it is it's
121:01 - basically it's like this uh if you're if
121:04 - this condition so this condition can be
121:07 - any JavaScript Expressions right what if
121:09 - this condition is a
121:11 - is a variable if I write negative over
121:15 - here as a variable and I declare a
121:17 - negative
121:18 - as a relatively declared variable so
121:22 - this the value of negative always change
121:25 - when whenever I change the profit
121:28 - um
121:29 - then I would end up writing this right
121:31 - class color negative equals negative and
121:34 - since this class name and the variable
121:36 - name the condition variable name is the
121:39 - same I can omit this I can write this so
121:43 - class colon negative it's equals to let
121:47 - me copy the previous one and then
121:49 - comment it out so that you can do a
121:50 - comparison you want okay
121:54 - paste it over here so this is equal to
121:58 - this is the same thing so let's try it
122:01 - out right it works so if you have a same
122:04 - condition name as a class name then you
122:06 - can do this shorthand
122:08 - and there you go a class directive
122:11 - hopefully it adds a new way for you to
122:14 - specify what's the class of the elements
122:17 - um instead of just having to
122:19 - concat strings to form your class names
122:22 - so hopefully you learned something new
122:25 - and I like to see you applying this in
122:29 - your in your swell components
122:34 - we are going to talk about bindings
122:36 - what is binding well we shall see let's
122:39 - take a look at one example that I
122:41 - prepared for you so over here we have an
122:45 - input and and a variable called value so
122:49 - this is a state where we can change the
122:51 - value of the value variable and we show
122:55 - that value variable on the screen over
122:56 - here
122:57 - so we add input events on the input so
123:01 - that we know whenever we type something
123:05 - like this we this will be called and
123:07 - then we update the value of the value so
123:09 - this will pass this value into your
123:12 - into the input itself so that it's
123:14 - updated and also it will show it on over
123:16 - here on the screen
123:18 - so every time when you want to add event
123:21 - listeners from an input and then uh
123:25 - update a value of a variable and then if
123:27 - you want to
123:29 - somehow change the value and then get it
123:31 - reflected onto the input so when I say
123:34 - we get it reflected is what if I over
123:36 - here I have a button
123:38 - and whenever I click on the button
123:44 - uh I want to change the value to see
123:48 - ASDF right so I can type over here every
123:51 - time I hope come over here I change the
123:54 - valuable available valuable variable
123:55 - call Value and get it reflected and I
123:58 - can do the other way around which is I
124:00 - click click me after the value of the
124:02 - verb the variable of the the value of
124:05 - the variable value and then get it
124:07 - reflected on the input so I click you
124:09 - see it's updated to ASDF instead so
124:11 - there's two ways of updating this
124:13 - variable value one from the input events
124:16 - or two is
124:18 - by just changing it directly
124:20 - and this is this is very common pattern
124:23 - that you would come out to control your
124:26 - inputs and so so that's so uh svelt
124:30 - comes up with a
124:33 - um directive that handles this so that
124:36 - you don't have to come over here Define
124:37 - the event listeners Define a variable uh
124:40 - I mean you have to Define a variable but
124:41 - like you you can save time typing all
124:45 - this and just do this one thing instead
124:48 - which is
124:50 - bind that bind directive that's why the
124:53 - title of this video bindings bind and
124:56 - then I need to bind what
124:57 - I'm going to bind
125:00 - um
125:01 - the value of the input right so
125:02 - inputs.value is the value of the input
125:04 - we over here we read this value from
125:07 - here in this event and then we pass this
125:10 - value in in this variable so uh so this
125:13 - two way we we want to read and write
125:16 - also right so we want the value property
125:19 - of this input and bind with what we're
125:23 - going to bind it with a variable call
125:26 - Value so I'm going to copy this variable
125:28 - and pass it in here
125:29 - so I can remove all this at once so this
125:33 - and this is the same
125:36 - binding is to re receive an event
125:39 - listeners to uh get the value of this
125:42 - input and assign it to this variable
125:44 - call Value
125:45 - and also this is also doing this where
125:48 - whenever the value of the variable value
125:51 - has changed we're going to update the
125:53 - value property of this input
125:56 - it's it's it's a bit mouthful so let's
125:59 - let's try to change this I'm going to
126:01 - call this a
126:02 - full instead so that it's it's
126:05 - so that you can differentiate where this
126:08 - is right
126:10 - okay come over here up here all right so
126:12 - inputs you read a property called value
126:16 - okay you can do this now a real
126:18 - political value and then over here you
126:20 - want into full and then you want to set
126:22 - full into the value the property called
126:24 - value it's the same this is the property
126:26 - name this is a value you read it to the
126:28 - variable called Foo and if you've
126:30 - changed full we want to update it back
126:32 - to the property called value so I come
126:34 - over here I can type as you can see uh
126:37 - this is this
126:39 - okay I I should comment this out so only
126:42 - have this by input that has bind so when
126:44 - I type it will get the value of the
126:46 - input so this is no longer in use right
126:49 - just just so you know
126:50 - a type of value of the input value of
126:53 - the input comes to variable called full
126:56 - and
126:57 - so you see full reflected over here and
127:00 - if I click okay let me type more and I
127:02 - click on this button I change the value
127:04 - of full it should update so this full
127:07 - variable should update the property
127:09 - called value
127:11 - so there you go so binding we bind a
127:14 - variable a property called value to the
127:17 - variable called full and it works two
127:19 - ways it's a two-way data binding
127:21 - changing in the property will update a
127:23 - variable changing the variable will
127:25 - update the property
127:28 - and
127:29 - and if your variable instead of calling
127:32 - it full you call it value instead let's
127:35 - come back value value call it value
127:37 - instead then you can have a shorthand
127:40 - right the property and a variable name
127:42 - is the same then you can wow
127:46 - omits the whole thing so this and the
127:49 - above is the same right so I'm going to
127:52 - change this so that you you have a clear
127:54 - value so this and this is the input bind
127:58 - value equals value and bind value is
128:00 - exactly the same so let's type and see a
128:03 - change and you change okay
128:06 - and you click on you update variable
128:09 - called value it will update it backed to
128:11 - your elements a property of the element
128:15 - so there you go binding on elements
128:18 - can't you do binding with components
128:21 - well yes you can as well you can imagine
128:24 - uh
128:26 - instead of attribute instead of the
128:28 - attribute of the elements you can change
128:30 - on the property of the component the
128:32 - props of the component and so I have a
128:36 - component called components I'm going to
128:37 - impart this over here
128:45 - and in this component I am going to use
128:48 - it over here and comment out everything
128:50 - that I'm not in use
128:53 - so this component has a
128:58 - a counter called count and I have a
129:01 - button that just increments discount
129:02 - value
129:04 - so to to listen to uh discount changes
129:08 - we we maybe we can add event listeners
129:10 - and then uh so that I can update a
129:13 - variable over here so I can come over
129:14 - here have a variable called count
129:17 - and I can uh to count equals count
129:22 - okay so this is a shot I can do a
129:24 - shorthand Chronicles count
129:26 - uh I can have a button that changed this
129:28 - value
129:32 - whoops
129:36 - because 999
129:42 - so I can have a button that updates
129:45 - account value
129:46 - and whenever I change okay I need to
129:49 - also have a
129:51 - event right so I come over here this
129:53 - patch count
129:56 - change
129:59 - foreign
130:05 - Imports
130:07 - create event
130:10 - dispatcher
130:13 - from sveld
130:15 - and create event dispatcher
130:25 - so every time counts change I'll
130:27 - dispatch discount change event
130:30 - come over here uh on wait wait it should
130:34 - be on a component
130:35 - on count change
130:43 - uh whoops I receive an event
130:47 - let me get it to a new line so that you
130:50 - can really carefully clear
130:52 - right on count change you have events
130:54 - and the count will equal to event dot
130:57 - detail
131:00 - so over here
131:02 - you guys do think whenever we change
131:05 - inside oh click me uh increments I'm
131:09 - gonna name it differently so if every
131:11 - time when you increment
131:13 - um
131:14 - this will be called this event will be
131:16 - called and I need to come over here and
131:18 - show you that this value is updated
131:21 - so every time it's called I will get the
131:25 - latest value of the count and it will be
131:27 - reflected on the screen over here
131:29 - right and anytime
131:31 - and and when I click on this button I
131:33 - want to update this value count to 999
131:35 - so when I click this
131:37 - it'll be 999 and this value will be
131:39 - passed in so this count will be updated
131:42 - right so if I increments yeah and you
131:45 - get received over here so can so it's
131:48 - it's kind of the same as your inputs
131:50 - where you events happening you update
131:52 - the value and if the value
131:55 - changes you update the property of the
131:57 - attributes of the elements so I can do
132:00 - the binding for any props in fact any
132:03 - props so this props is called count so I
132:05 - can come over here and bind
132:08 - bind count to count
132:12 - second comment okay so this
132:17 - whoops let me comment this and just
132:21 - leave this for you
132:24 - so buying counts to count
132:28 - is again exactly the same as distance to
132:32 - events of the variable accounts and
132:34 - whenever count change update the props
132:36 - call count right so this is the same as
132:38 - above so I try over here you see it's
132:41 - the same
132:42 - the same behavior
132:43 - and in fact since this variable and the
132:46 - this property of the component is the
132:49 - same as the variable that we're going to
132:50 - assign to we can use the binding
132:52 - shorthand and just write this
132:55 - increment and click me increments click
132:58 - me so here you go bindings for elements
133:02 - as well as components
133:07 - today we're going to talk about bindings
133:10 - wait we talk about bindings
133:12 - but there's a lot of examples a lot of
133:15 - things that you can cover about bindings
133:18 - and I'm not going to cover all them to
133:21 - be honest you should learn yourself and
133:24 - I'm going to show you where you can read
133:25 - about them so over here I am at this
133:29 - result tutorials so as well prepares as
133:32 - well and the main official docs it
133:34 - prepared a very amazing tutorials step
133:37 - by step you can come over here to start
133:40 - from the day ones both of the things we
133:42 - have covered
133:44 - um and what I'm going to show you now is
133:46 - you come over here and you look for
133:48 - bindings and you see text inputs this is
133:51 - where it starts and from this drop down
133:53 - you probably have seen that you probably
133:56 - will see that there's a lot of things
133:58 - that you can do bindings with right text
134:00 - inputs numeric inputs check box uh group
134:03 - inputs text in text area select content
134:06 - edible editable media Dimension this
134:11 - components a lot a lot of them some of
134:14 - them I'll cover for example component
134:16 - bindings and like text input element
134:19 - bindings I have covered some of them
134:21 - but some of them I would not cover you
134:24 - can explore yourself so I'm going to
134:26 - show you how you can explore yourself so
134:29 - you choose one of it say I'm going to
134:30 - come over here in numeric inputs and it
134:33 - will show you that it will tell you
134:35 - things that you need to know about for
134:37 - example if you have a numeric input then
134:40 - you set type equals number or type
134:42 - equals range then you will mix it make
134:44 - it into a numeric input
134:46 - which means that the value will become a
134:49 - number before assign it to a variable
134:52 - um so buying value takes that for you
134:54 - so um it will show you for example uh in
134:59 - this example over here uh some example
135:02 - that has prepared but I believe we don't
135:05 - have bindings here and if you click show
135:07 - me you replace the code with bindings
135:10 - and then you see that uh everything
135:13 - works now so you can compare the before
135:16 - and after you can reset and show me to
135:18 - compare yourself quickly toggle and see
135:20 - what's the difference and then play with
135:23 - it right change this this is a ripple
135:25 - the Sim Ripple that I've been using all
135:28 - the while so you can play around and
135:31 - learn about it
135:33 - so today I want to cover is group inputs
135:36 - because I find that it's slightly
135:40 - um different uh it needs more
135:43 - explanation hopefully you are smart
135:45 - enough you don't need my explanation but
135:47 - I believe uh maybe with my explanation
135:50 - or maybe some people might need it maybe
135:51 - with my explanation you make it clearer
135:53 - all right hope I do that for you if you
135:56 - feel that I have make it very clear
135:58 - comes up comments share this video out
136:02 - to everyone else right so
136:05 - um I'm gonna come over here with a rebel
136:07 - that I have prepared
136:09 - uh so one is group inputs right so group
136:13 - inputs
136:15 - um it's actually mean it actually means
136:17 - that you can bind a group of inputs with
136:20 - a binding group
136:22 - so this binding is called buying group
136:24 - and what you do is you can bind two
136:28 - kinds of inputs with this only two kinds
136:31 - it's either a radio button or a check
136:34 - box button all right so review button is
136:37 - one that you usually see with a circle
136:39 - where you have to choose single option
136:43 - and check box is usually uh when you see
136:46 - there's a square boxes where you check
136:48 - and uncheck you can have multiple
136:50 - choices
136:52 - so what this uh buying group is does is
136:55 - that instead of making your own group of
136:59 - checkbox by setting them the same name
137:02 - you should set them the same name but
137:06 - um besides just setting the same name
137:08 - what else you can do to say collect all
137:11 - the values from this inputs together and
137:14 - assign it to a variable
137:16 - what you can do with is you use a verb
137:19 - you use bind group
137:22 - so say for example if I come over here I
137:25 - have already three check boxes uh value
137:28 - one two and three
137:30 - uh what you usually do is you okay I
137:34 - should remove this sorry let me remove
137:36 - this first
137:37 - what you usually do is you should come
137:40 - over here and name it uh say
137:45 - Foo
137:46 - all right sorry I'm better naming this
137:49 - has come a full full and then you just
137:51 - use radio for now radio radio radio
137:55 - so with the same name you expect that
137:59 - you can only choose one of them
138:02 - right
138:04 - um
138:05 - if I create one more four
138:08 - you expect them to to only choose one
138:12 - and how do you bind the value of this
138:14 - group uh to a variable right I want to
138:18 - bind it to a value you can't say because
138:22 - radio usually you have a property called
138:24 - checked so do you do like buying checked
138:26 - but this will only bind the checked to a
138:29 - variable and bind the value of the
138:31 - checked off like this want input how do
138:35 - you bind
138:36 - a group of inputs because it works
138:39 - together you want to say this growth
138:41 - input I want to know which value is
138:43 - being selected
138:45 - so what you do is use binding group in
138:48 - States so I can bind it to a variable
138:50 - over here I'm going to say uh come
138:52 - create a variable call options
138:58 - uh come up here say options
139:03 - select the option so if it's radio then
139:07 - you can only choose one option
139:10 - and so I'm gonna uh come over here and
139:13 - bind it to option so one so it should be
139:17 - naming is important I'm gonna use a
139:20 - single noun
139:21 - right I'm going to use a singular noun
139:23 - and I'm gonna paste this bind group over
139:24 - here
139:25 - mine group oops sorry
139:29 - mine group now this variable now becomes
139:33 - sorry let me uh
139:37 - I have my camera just block my view so
139:39 - I'm going to resize this a bit so that I
139:41 - can see it clearly
139:44 - so if I select you can see that the
139:47 - option the current option selected will
139:49 - be assigned to this variable call option
139:51 - alright so it depends on the value so
139:54 - what you have to make sure the value is
139:56 - uh
139:58 - not you have to make sure but whatever
140:00 - is Select whichever radio input is
140:03 - selected the value of that variable uh
140:07 - value of that input will be assigned to
140:09 - this group variable called
140:12 - option all right so the option variable
140:15 - will be assigned to whatever input radio
140:18 - button that is being selected at the
140:20 - moment
140:22 - um so this is a binding which means it's
140:24 - two-way if I come over here and
140:26 - initialize with say three it should okay
140:29 - with a string three you would expect
140:31 - that this ring 3 will be selected by
140:34 - default
140:36 - um and if I come over here I have a
140:38 - button uh resets
140:41 - okay I'm gonna this function will will
140:44 - try to set uh option
140:47 - to say four
140:49 - right I change change and I say click
140:52 - this oh sorry I click once and I click
140:55 - reset I'll set option value to 4 and 4
140:57 - is selected right so I can bind Group
141:00 - which is the group of inputs uh what is
141:02 - the value of that group of inputs uh
141:04 - with buying group
141:06 - and it works with uh check boxes as well
141:09 - so I'm gonna come over here comment this
141:11 - out so that you can play with it later
141:13 - on
141:14 - and come over here and paste this and
141:15 - I'm going to replace all this with check
141:17 - boxes check box check box check box and
141:21 - checkbox in most cases check boxes you
141:25 - have multiple selections right so most
141:28 - likely you what you want is more of like
141:30 - an array of selected options so you use
141:34 - arranged it and for the sake of naming
141:37 - it should be a plural form so it's
141:39 - options so I'm going to change it to
141:42 - options options options options
141:46 - um and just to show it nicely and join
141:50 - with uh and a comma right and a space
141:55 - so whenever I click on select select and
141:59 - unselect you see that uh it will add all
142:04 - of the selected options to this variable
142:06 - call options so it's an array it will
142:09 - add more items to that array
142:11 - and because it's a two-way binding I can
142:14 - change this up value of options I can
142:16 - come over here where on click on this I
142:19 - will select uh one and four
142:22 - right so I can select something I can
142:25 - select two and click reset I'll select
142:27 - one and four and four one will be the
142:29 - value of the options
142:32 - so buying group allows you to bind a
142:35 - group of check boxes or a group of radio
142:39 - inputs uh where checkbox when you're
142:42 - buying group you bind uh you you
142:46 - expect to pass in a array as a variable
142:49 - right because you can select multiple
142:51 - inputs select multiple check boxes so
142:54 - all the selected check boxes the value
142:57 - of them will be uh will be the value uh
143:00 - will be they will collect all the values
143:02 - of the selected checkboxes into an array
143:04 - and that array will be assigned to the
143:07 - variable that you are binding with
143:09 - right um
143:11 - so say if I have now if I have two
143:14 - variables I have options and options two
143:18 - come over here and have another variable
143:22 - now this will allows me to
143:26 - um have collect the options to only bind
143:29 - to the
143:30 - the
143:31 - up checkbox three and four so anytime
143:34 - when I change the value I check on it's
143:36 - not changed I check and uncheck the
143:38 - value of three or four it will collect
143:41 - them and then assign it to this options
143:45 - to variable and then you will see
143:47 - whether options to what what are the
143:49 - inputs that is selected by options two
143:53 - right and it works two ways so whenever
143:55 - you change this variable
143:57 - programmatically then you will reflected
143:59 - by uh all the variables all the inputs
144:02 - boxes that binds group on that input so
144:06 - that's all hopefully that is useful for
144:10 - you when you want to have a group of
144:12 - radio boxes or check boxes reminds you
144:15 - of using buying grouped to bind them
144:21 - today we're going to talk about another
144:23 - type of binding which is bind this so
144:27 - what is buying this well we shall see in
144:29 - this example over here over here I have
144:32 - prepared a component which has an input
144:35 - and a button
144:37 - so over here if I type something in my
144:40 - input yeah you got that something from
144:42 - the input
144:44 - um oftentimes when we write this we
144:45 - assumes that a cell wall understands
144:49 - this component goes through some
144:50 - compilation into JavaScript and what the
144:53 - JavaScript do is to create that input
144:57 - element and inserts it into the Dom
145:01 - um yeah and most of the time you don't
145:03 - have to care about that element itself
145:05 - you don't need to know like what you
145:08 - don't have you don't need to get the
145:09 - reference of the elements because if you
145:11 - want to manipulate say the value of that
145:13 - input you use a bind value to bind the
145:16 - value of the inputs and you control from
145:18 - there and most of the times you just
145:19 - want to control the value of the input
145:21 - or maybe some validation which you can
145:24 - pass in Via other attributes
145:27 - but if
145:29 - for some circumstances you want to get
145:32 - the reference of the element then you
145:35 - probably would want to use this which is
145:38 - the bind this
145:39 - so buying this allows you to bind a
145:43 - variable
145:44 - so let's say I'm gonna get I'm calling
145:47 - I'm creating a variable called elements
145:49 - and I want to bind this
145:52 - this input so this stands for this
145:55 - reference of this input to this variable
146:02 - so buying this is actually one way
146:06 - binding you you do this you will bind
146:10 - the reference of the inputs to this
146:12 - variable but it does not go the other
146:15 - way around you can't go the way where
146:17 - you say sets update the value of this
146:20 - variable and hopes that it will
146:23 - somehow reflect on this element no it
146:26 - does not work that way you can't say I
146:28 - have this element now and I want to
146:30 - create
146:30 - um say a button element and hope that
146:33 - with this binders I'll make this input
146:35 - into button no it does not work that way
146:37 - it works only one way input when it's on
146:41 - the screen when it's Felts created and
146:43 - added onto the screen then bind this
146:45 - will uh will bind the reference of that
146:49 - input element to this variable called
146:51 - element
146:53 - so um hope that you hear the keyword
146:56 - over there when it when the spell mounts
146:59 - these elements then you will get this
147:00 - right so which means that if you want to
147:03 - access the variable right now if your
147:05 - console log element right now at this
147:07 - point of time you probably will get
147:10 - undefined
147:11 - and when does it being defined well it's
147:14 - being defined when spells creates this
147:17 - element and mount it onto the Dom so if
147:20 - you come over here on Mount so on Mount
147:23 - is a life cycle that will be that allows
147:25 - you to register a lifecycle event when
147:29 - um when element is mounted or when the
147:31 - component is mounted then I can call uh
147:34 - at that point of time
147:36 - the elements should be available
147:38 - uh you don't have to worry about on
147:40 - Mount we'll talk about it later but as
147:42 - you can see over here uh I can say type
147:45 - of elements and you can see it's it's
147:47 - something it's object right
147:50 - um so the spell ripple does not allow me
147:52 - to print out elements reference but if I
147:56 - come over here and
147:59 - uh open up the elements tab you will see
148:03 - that it is
148:05 - console.s and input right the reference
148:08 - of the input so what can you do with it
148:11 - so let me comment this out what can you
148:13 - do with it well you can do something or
148:16 - you can since you access the reference
148:19 - of the elements now you can do anything
148:20 - with it you can say reset the value of
148:23 - the input which conveniently we have
148:26 - this function called reset and this is
148:28 - what I'm going to do I'm going to say
148:29 - reset
148:30 - I'm going to reset it to just an empty
148:34 - string okay so if I come over here I
148:36 - type something
148:37 - and at this point at this juncture you
148:41 - can see that element has mounted most
148:43 - likely the reference to that input is
148:45 - already assigned to this variable called
148:47 - ambulance so if I come over here when I
148:49 - click reset it will oh sorry this is
148:52 - elements not inputs
148:55 - all right at this point most likely the
148:58 - element is pointing to the input so when
149:00 - I say if the element dot value equals
149:02 - empty you expect that this you will
149:05 - reset will clear some of these inputs
149:07 - right so when I click it it clears up
149:09 - right so
149:11 - um this is what you can do with uh
149:13 - reference to the elements so anytime
149:15 - when you want to get a reference of an
149:17 - element you use buying this
149:21 - and as a lot of things in this world's
149:24 - components work similar to elements so
149:27 - if I say you can use bind these two
149:30 - elements you can use bind this to
149:32 - component as well so if I come over here
149:35 - I prepared a component so I'm going to
149:36 - import it let's say import component
149:40 - from component dot spelled
149:45 - and then I'm gonna create this component
149:47 - uh over here
149:50 - and okay I'm gonna still keep this
149:53 - variable called element but you know
149:55 - that I'm going to bind this to a combine
149:56 - this component right so this element is
149:58 - going to point to the reference of the
150:00 - component so we're going to say bind
150:02 - this elements
150:05 - again this is a one-way binding so uh
150:10 - you you only get the reference of the
150:12 - components on this variable when this
150:14 - component is mounted on the screen
150:16 - you can't say the other way around where
150:19 - uh changing this variable in hopes that
150:22 - change something on the component itself
150:26 - but of course this component over here
150:28 - that I'm going to show you now
150:30 - um have uh variables right uh States
150:34 - it's called count so when I click this
150:37 - button it will increment the count and
150:40 - also it expose a props right so Props
150:44 - can be variables can be functions uh in
150:47 - this in this case the props is a
150:50 - function
150:52 - um why I say you can be anything it's
150:53 - like you can come over here and do this
150:56 - uh it's it's like a props but it's a
150:59 - function right uh this is same as this
151:01 - is similar to this right you're
151:04 - exporting something like a props which
151:05 - is a function
151:07 - so uh you can come over here and get the
151:11 - reference of this component which means
151:13 - you also uh you get the reference of
151:15 - this component which means that you can
151:17 - access all the props from this instance
151:21 - of this component
151:22 - so anything that's exported can be
151:26 - accessed say for example if I exports
151:28 - the count as a props and if I come over
151:31 - here
151:32 - and I say console log
151:35 - elements dot count
151:38 - uh okay so two right now you click you
151:42 - expect that oh what
151:48 - ah sorry
151:50 - so I can't really read it like this
151:54 - except unless I pass in this flag
151:59 - over here
152:03 - so don't worry about uh spell options
152:05 - accessors this is something we will talk
152:08 - about later on but as as the warning
152:12 - shows it's clear enough you just copy
152:14 - paste this thing in and now you can see
152:17 - that we can get uh we can console out
152:20 - this count over here right a basic
152:23 - explanation of what this is is that it
152:25 - allows us to compile this component in a
152:28 - way that you can access props uh with
152:32 - this uh directly with these accessors uh
152:36 - using like getter function to get the
152:38 - props value right
152:40 - um of course however uh if you look at
152:43 - functions you don't need that you don't
152:45 - get use accessors like Getters to get
152:48 - the value of the props you call the
152:50 - function directly so over here in States
152:53 - I could replace this with elements
152:56 - dot reset
152:58 - and we export this function called
153:01 - resets which it will resets accounts to
153:04 - zero
153:05 - so if I click a few numbers over here
153:07 - and when I click reset it will get it
153:11 - will use the reference of this component
153:13 - and call a method on that component
153:15 - we'll call the props function which is
153:18 - this reset over here right and so I call
153:21 - this reset and this will be called this
153:23 - function and you will set the counts to
153:25 - zero so when I click reset it will
153:26 - resets the value to zero and when I
153:28 - click now it does resets to zero and
153:31 - there you have it uh why if you ask me
153:35 - why you need a reference of a component
153:38 - this is the reason you can access to any
153:41 - methods of the components then uh you
153:44 - you
153:46 - um unlocks yourself not just control the
153:49 - components by its props you can also
153:52 - control the components via its methods
153:55 - you can export more functions more
153:58 - methods from this exports a lot of
154:00 - functions which will be like a methods
154:02 - of this component and once you get the
154:04 - reference of a company you can call all
154:06 - these methods and it will in some sense
154:09 - control your internal state right
154:12 - so in this case if I want to set the
154:14 - counts to zero I need to have a props I
154:18 - need to pass in count it goes to a
154:21 - variable somewhere and any different
154:22 - counts and then you set it to zero right
154:25 - and
154:26 - and if I have more than that I have a a
154:29 - group of props then I would have to
154:32 - coordinate them out here but if I get a
154:36 - reference of this component and I can
154:39 - call a methods to do all of that at once
154:42 - then
154:43 - wasn't even isn't that great
154:46 - right so buying this allows you to get
154:50 - the reference of the element or the
154:53 - components that you're binding right if
154:55 - you use other elements you get the
154:57 - reference of that element you get a you
154:59 - use it on a components you get the
155:01 - reference of the component
155:03 - and when do you get the reference you
155:05 - get it when that element or the
155:07 - component is mounted it's created and
155:10 - mounted by its felt
155:12 - and this binders is a one-way binding
155:16 - which means that it will when it's
155:18 - mounted it will update the variable but
155:20 - updating the variable itself does not
155:23 - reflex does not goes back to change the
155:26 - elements or component itself
155:30 - let's talk about component life cycle
155:33 - events there's four life cycle events uh
155:37 - there's a on Mount and on Destroy and
155:41 - then there's a before update and after
155:43 - updates
155:45 - so let's take a look at some examples on
155:47 - how you can use them
155:50 - so over here I've prepared app.spel and
155:53 - I have a component
155:55 - so in this component I have a import
155:58 - unmount on Destroy before update and
156:01 - after updates from svelt so each of in
156:04 - each of the life cycle I try to comment
156:06 - a console out the lifecycle name so in
156:10 - the console you take you you see that
156:13 - um when you when you first Mount Your
156:16 - components there will be three events
156:18 - fired uh before updates and then on
156:21 - Mount and after updates so do notice
156:24 - that before updates and after updates
156:25 - will be fired even if you are
156:29 - uh just mounting your components
156:32 - and on Mount will be fired when you try
156:34 - to Mount Your component right right
156:37 - right after the all the elements like
156:40 - the buttons over here is being mounted
156:42 - then unmountable fire and after updates
156:45 - will fire as well so if I come over here
156:47 - in the components and I try to add a if
156:52 - statement if condition
156:56 - and if I try to have a checkbox that I
157:01 - can toggle on and off the condition
157:05 - checkbox
157:07 - buy and check
157:15 - then if I turn it on you'll see that
157:19 - it's called mounts and if I turn it off
157:21 - you'll see on Destroy being called
157:24 - okay let me try that again like clear if
157:28 - I turn it on before updates on Mount and
157:30 - after updates and if I turn it on you
157:32 - see on Destroy
157:34 - and within a component itself I have
157:38 - prepared a buttons which will update the
157:41 - count over here
157:43 - so if I click onto the button right now
157:45 - then I will update the account and it
157:48 - should kick in an update cycle so if I
157:50 - click here you see that before updates
157:52 - and after updates although you can't
157:55 - really see the timing that when this is
157:57 - being called but according to the Spell
157:59 - documentation it says that before
158:01 - updates fires right before you update
158:04 - the Dom
158:06 - uh and then after update fires right
158:08 - after you up the Dom has updated
158:11 - and in the docs it says that it will
158:13 - after update will fire once right after
158:16 - the Dom uh is updated so it has this
158:21 - word once and I was curious like why is
158:24 - it so and it's because if you come over
158:26 - here in after updates you could possibly
158:29 - go and update the state again
158:34 - and if this happens this actually kicks
158:36 - in another round of updates on your
158:39 - component and this could lead to an
158:42 - infinite Loop if it's not carefully
158:44 - handled and I'm and somehow apparently
158:49 - swell handles it by make sure that after
158:51 - update only called once throughout the
158:54 - whole updates right so if you kicked in
158:56 - another update cycle in the after
158:57 - updates uh you will go
159:01 - updates again but then after update will
159:03 - not be called again so
159:06 - uh I'm not quite sure whether this is
159:09 - this makes sense to you but for S5s I
159:13 - can see this does help prevent infinite
159:16 - Loop recursive calls so the cell version
159:19 - that I'm using right now is is 3.35 so
159:23 - this Behavior stays at this current
159:25 - version so if I click on
159:29 - over here you can see that before
159:31 - updates on Mount after update and this
159:33 - kicks in another round of updates
159:35 - so you you see that before update being
159:38 - fired so if I click click me again
159:40 - you'll see that before update after
159:42 - update and before updates being called
159:45 - uh yeah so this is something
159:49 - um weird but of course I wouldn't expect
159:52 - you to actually change the state in
159:54 - after updates that is
159:56 - um you shouldn't do that
159:58 - effects
160:00 - so that that is one Edge case that I
160:04 - want to point out over here and you can
160:07 - see that I'm calling this component uh
160:10 - calling all this lifecycle methods to
160:13 - register the event uh to register a
160:15 - callback so did you call this on mounts
160:18 - or any of this uh and you pass in a
160:20 - function so this function will be called
160:22 - at the right point of time and you can
160:25 - only call you can only do this
160:27 - registration during the component
160:29 - initialization
160:31 - what that means is that you have to be
160:33 - written at the top
160:34 - uh when at the top level when you're
160:37 - trying to execute this this whole script
160:39 - over here so if you do it something like
160:43 - do it slightly later for example if I
160:46 - say set timeout
160:48 - and call it at the next timeout
160:52 - then what you have actually is an error
160:55 - it will say that function called outside
160:57 - component initialization you have to
161:00 - call it during the component
161:01 - initialization
161:04 - um but that does not stop us if we say
161:06 - if we come with a function over here
161:08 - full
161:12 - and we make sure that we call the food
161:14 - during initialization of your function
161:16 - which is calling it at the top level
161:18 - over here then of course there's no
161:21 - error right so it's not about where this
161:24 - amount has to be it's more about when
161:26 - you should call it you should call it
161:29 - during your component initialization
161:30 - this is because whenever a asphalt
161:34 - component is initializing your component
161:37 - sorry spell is initializing your
161:39 - component
161:40 - it knows which component is initializing
161:42 - so so you're importing on Mount on
161:45 - Destroy before update you know that
161:46 - you're importing this function this
161:48 - function has no idea uh it or rather
161:52 - these functions are so called uh is is
161:56 - importing from sveld right so you it has
161:59 - to know that what are the current
162:01 - components being initialized
162:03 - so you have to call it during
162:06 - initialization so that it knows that oh
162:08 - the current component is being
162:10 - initialized is this and I want to
162:12 - register this this event this amount on
162:15 - destroyed to this components but once
162:18 - it's finished in installation that then
162:21 - you couldn't find that component anymore
162:23 - and therefore you get this error of you
162:26 - have to you can't call it during after
162:28 - you have to call it during component
162:31 - initialization
162:34 - uh so one last thing that I want to
162:37 - share is that one great example that you
162:40 - can one great use case that you could
162:42 - use uh when it stems out from this where
162:46 - you can actually call this somewhere
162:48 - else meaning actually you can have a
162:51 - function say full right in this case and
162:55 - save it somewhere else uh some food.js
162:59 - and you export this function
163:03 - and so for each of the components that
163:05 - wants to do something during our mounts
163:08 - for example calling on Mount you can
163:12 - import Foo for all of this components so
163:14 - so there's ways that you can reuse
163:19 - lifecycle logic
163:22 - so you call full from here you can have
163:25 - multiple components and import full and
163:27 - when you so you you have to call it
163:29 - during combination component
163:31 - initialization initialization but then
163:34 - this will make that all any component
163:36 - that you call this will have a one
163:40 - callback registered for on Mount and it
163:42 - will which is to print out the on Mount
163:44 - during on Mount
163:46 - right so it's a bit mouthful but yeah
163:48 - uh so one example I can think of is to
163:52 - have this function called Mac updated
163:54 - Mac updates
163:57 - uh so uh let me show you how I can use
164:01 - this I can import
164:03 - let's let's remove this I can import Mac
164:07 - update
164:14 - and
164:16 - call it over here and this function
164:18 - actually returns an action
164:20 - curious why right so I'm going to say
164:22 - action so this action can apply to any
164:25 - elements
164:27 - use action
164:29 - and you'll see that my element will have
164:32 - a outline uh drawn on top of that
164:36 - element right this is this is done by
164:38 - the action but anytime when I change
164:40 - something it turns red the outline turns
164:43 - red so there's no way that this action
164:46 - will know that something has changed
164:47 - right because there's no way this action
164:50 - we are not passing any parameters to
164:51 - this action so there's no way that for
164:53 - you to know
164:55 - but one curious point is we are actually
164:58 - creating this action on the fly over
165:00 - here this Mark updates so over here Mark
165:03 - updates I actually call the before
165:04 - update so I'm gonna so any for any
165:08 - component that I call this I'm actually
165:10 - registering something in the before
165:12 - update so that actually I know that some
165:14 - this component is updating
165:17 - and what I do for the action is actually
165:19 - just add this element that I apply the
165:22 - action to to a set so that every time
165:25 - when something has updates I draw and
165:27 - read outline to that element to all
165:30 - these elements so that that is one
165:33 - interesting use case of uh where you can
165:37 - have before updates or unmounts being
165:39 - called within a function and you can
165:41 - reuse Logics of them right it does not
165:44 - have to write you don't have to write
165:45 - this within the component itself you can
165:47 - write it in other functions but make
165:50 - sure make sure you call them during
165:53 - component initialization
165:57 - in the last video we talked about how we
166:00 - register component lifecycle events such
166:03 - as on Mount
166:04 - on Destroy before updates and after
166:07 - updates
166:08 - we talk about some of the do's and
166:11 - don'ts about registrating them for
166:13 - example you have to call them during the
166:16 - component initialization we briefly
166:18 - talked about when they will be called
166:20 - but today in this video I want to dive
166:23 - slightly deeper into the on Mount
166:25 - component life cycle so let's take a
166:28 - look at the two examples I prepared for
166:30 - you for on Mount so over here I have my
166:34 - app.velts that renders two example if
166:38 - the show is true so I use a checkbox to
166:40 - turn that on and off
166:42 - so what other use case of a good example
166:46 - use case of using on Mount well I can
166:48 - think of two but of course there's a lot
166:50 - more so the first one is I use on Mount
166:53 - to set an interval right so you you
166:57 - wouldn't want to kick off this interval
166:59 - of like uh some events that you're doing
167:01 - during interval this should be only
167:04 - triggered started when your component is
167:07 - mounted onto the Dom right over here I I
167:10 - set an interval on every second so that
167:13 - I can see the counter increase by one
167:17 - every second and then the second example
167:19 - that I can think of is using on mounts
167:22 - to fetch data so if you use a server
167:27 - side rendering and a client-side
167:29 - hydration kind of model where you want
167:32 - to fetch some data in the client side so
167:35 - mainly usually because you want this
167:38 - data is less important it's it's
167:40 - probably showing up later on so you you
167:43 - you are able you're okay to fetch them
167:45 - later on in a client side then probably
167:47 - you can add it in the on Mount uh life
167:51 - cycle right you you wouldn't want to do
167:53 - it
167:55 - um in like component initialization uh
167:59 - and because that will be actually being
168:00 - triggered by the server side rendering
168:02 - right during server side rendering you
168:04 - you would want this to only happens in a
168:07 - client side then probably you add this
168:09 - fetch within on Mount
168:11 - if it's purely client-side rendering you
168:13 - don't have any server side rendering
168:15 - then uh
168:16 - um yeah you can fetch this during
168:19 - component initialization because the
168:21 - time difference isn't that much and then
168:23 - probably you can even like fetch make a
168:26 - network call way before your component
168:28 - is mounted so that when it's mounted the
168:30 - data Maybe it's already there
168:33 - so uh on Mount so remember uh you don't
168:39 - take my word for it that I say that on
168:41 - Mount will not be fired during server
168:43 - side rendering uh remind me later on I
168:46 - will show you uh we have to try
168:49 - everything so that you don't take any
168:51 - word from anyone right but let's take a
168:53 - look at these two examples so when I
168:55 - turn on this flag uh you should be able
168:59 - to see the counter is incrementing and
169:02 - also I fetch this data
169:06 - um and then also have because on I
169:08 - either the console log so on every
169:10 - interval you see that the console is
169:12 - logging in the log but but
169:16 - if I turn it off
169:18 - see that this is still running
169:20 - you're still running 33 94.5
169:23 - because we didn't clear the interval
169:26 - this is another source of memory leak we
169:29 - set an interval to run on mounts and
169:31 - then we didn't clear it up and the next
169:33 - time when we Mount this component again
169:35 - we set off another timer and we turn
169:38 - this off see that there's two run two
169:41 - timers running at the same time now so
169:44 - we need to remember to clean it up
169:47 - so how do you do that uh in on Mount
169:49 - maybe we can uh take this interval
169:52 - instead of setting it over here we uh we
169:55 - we Define the interval ID on top so that
169:59 - on Destroy
170:02 - we have to remember to clear interval
170:07 - interval ID
170:10 - let me save this and hold on let me just
170:13 - pass it over here we save this and
170:16 - refresh because the old interval is
170:17 - still running so if I come over here
170:21 - and I turn it on
170:22 - console is running and turn it off
170:25 - it's gone right that's great we remember
170:28 - to clean up uh whatever we set it off
170:31 - during on Mount because this is a bit
170:35 - um
170:35 - wordy like you have to remember to do an
170:38 - on Mount and on this right path and
170:40 - because this is a very common pattern
170:42 - that we usually do uh if so actually
170:46 - well provides a way that you can do it
170:49 - all of this within just one on Mount
170:51 - event life cycle Handler
170:54 - so what you do is you re you can return
170:57 - a function in on mounts and this will be
171:00 - called uh when you this will be called
171:04 - when the component is destroyed so you
171:07 - can have the interval ID over in within
171:10 - on Mount and clean it up at the same
171:13 - time within the same event handler so
171:15 - you can save a few keystroke you don't
171:17 - have to import on destroy you can even
171:20 - you don't even need to define interval
171:22 - ID on top you can do this and
171:26 - hopefully it's more concise so let's
171:28 - let's try this out turn it on
171:30 - console
171:32 - and turn it off it's gone right so you
171:34 - can return a function in uh in the on
171:38 - Mount event handler so that it will
171:40 - clean up it will be called when the
171:41 - component is destroyed so they will do
171:43 - the cleanup necessary
171:45 - same thing goes for fetching
171:47 - um if you Fetch and your component is
171:49 - destroyed you don't really need the data
171:52 - anymore then probably you can use a bot
171:54 - controller and you return a function to
172:00 - I bought the fetch so if I take a look
172:04 - at the network tab
172:06 - over here clear this up turn on and turn
172:11 - off immediately you see that uh wait
172:14 - hold on I think this is returned now
172:16 - let's let's do it faster let's turn it
172:19 - off you see that this is being canceled
172:22 - right because you don't need this data
172:23 - anymore
172:25 - uh yeah so remember to do remember to
172:28 - clean up whenever you use on Mount
172:30 - anything there's a lot of things that
172:32 - can be cleaned up so remember to do that
172:34 - right so timeout intervals fetches uh
172:38 - there's a lot of things right so that's
172:41 - there you have it
172:43 - um on Mount and remember to clean up so
172:45 - before we end this I promise you I'm
172:47 - gonna show you how to run this in a
172:50 - server side rendering uh so I'm gonna
172:53 - save this and I'm gonna download the
172:55 - projects and then come over here and
172:57 - compress this
172:59 - allow me for a while we're gonna run
173:01 - this with my code editor so I have vs
173:04 - code open and come over here most likely
173:06 - I need to install something
173:10 - right so this one I'm Gonna Change it to
173:14 - server side rendering so we're going to
173:16 - come over here SSR
173:22 - wait no
173:34 - right I think it's the oh generates
173:36 - called generate
173:42 - and come over here let me know install
173:45 - my dependency
173:54 - and build my code
173:59 - okay so actually this is not gonna work
174:01 - because we're gonna compile it as a
174:03 - Services rendering so I'm going to come
174:04 - over here at dot render uh props empty
174:08 - props I'm going to come up here let's
174:09 - have the HTML I'm gonna just cancel it
174:13 - out
174:17 - and build this again
174:20 - and I'm gonna run it
174:22 - oh man what did I do
174:28 - build this
174:30 - and run this
174:33 - yep you can see my HTML is up and you
174:36 - will notice that
174:39 - okay so we haven't really console out
174:42 - anything in on Mount so this is what I'm
174:44 - gonna try see whether this online is
174:46 - being called
174:47 - uh we can default to true so that you
174:51 - will show the example one and two
174:53 - okay let's let's build this again
174:57 - and then run this
174:59 - and you just as you can see over here we
175:03 - did not run anything we don't see
175:06 - anything on on Mount right so this zero
175:09 - is this count over here so we do render
175:12 - this uh this image over here is the
175:16 - image
175:17 - and we didn't see any on Mount so on
175:20 - Mount is not fire during server side
175:22 - rendering
175:25 - hope that uh hope that's clear
175:30 - today we're going to talk about if logic
175:33 - block
175:34 - we have seen how we can use Dynamic data
175:38 - to present uh onto the templates in your
175:41 - swell component but we haven't talked
175:44 - about how we can based on a certain
175:47 - condition show or hide a certain content
175:50 - so this is what we're gonna do today
175:53 - so over here I have prepared some
175:57 - examples for you as always
176:00 - so here I have two buttons one uh called
176:03 - condition
176:05 - the second button is also called
176:06 - condition right but they are controlling
176:09 - different conditions so let me name it
176:12 - better so this is condition one and this
176:13 - is condition two
176:15 - so as I click on each of the buttons I
176:18 - add event listeners so that it will
176:21 - toggle that condition so if it's
176:24 - initially true then it will turn to
176:25 - false if it's initially false returns it
176:27 - to true alright so as I click you'll see
176:29 - that it turns from True to false false
176:31 - to true
176:33 - so now with all this set up we're gonna
176:36 - see how we can based on this condition
176:38 - to show some content
176:40 - so firstly first is that to write this
176:45 - if block we use uh we we start with a
176:48 - clear brackets and then a hash and if
176:53 - so this is how we start the if block and
176:55 - then we type in the condition so this we
176:58 - are going to use the condition one
177:01 - and with that to close it we use curly
177:04 - brackets again and then backslash if
177:08 - so in between you can pass in any
177:11 - content right so I'm going to say any uh
177:15 - condition one is true
177:19 - so if the condition if I turn toggle on
177:22 - toggle off the condition one you'll see
177:24 - that this will be hidden but when I turn
177:27 - condition one to true this will be
177:29 - should
177:30 - so anything uh within this
177:33 - block of uh if condition
177:37 - uh will be shown based on the condition
177:39 - itself so the condition is any
177:42 - Expressions you can pass in any
177:43 - Expressions so I can see
177:47 - um say condition one and condition two
177:50 - so this time round if I turn on any of
177:53 - it it will be hidden but if I turn on
177:56 - both then it will be shown right so this
177:59 - will be based on both the condition and
178:00 - condition one and two
178:03 - so anything here can be a expressions
178:07 - right and
178:09 - um so again so to recall we start with a
178:12 - hash if and then we end so if a slash if
178:15 - so this marks the beginning and the end
178:19 - and as what we will do in JavaScript we
178:22 - have if we sometimes like to have else
178:25 - right if certain things do this else do
178:28 - something else so um same thing goes
178:31 - with the logic block as well we can have
178:34 - an else condition so if show something
178:37 - else show something else so over here we
178:40 - can type else but this time around when
178:43 - we see else we are going to start with a
178:46 - colon sign so curly brackets again and
178:49 - then colon else and then close your
178:51 - curly brackets
178:54 - so else uh I would say either condition
178:58 - one or two is false
179:02 - so as you can see if I turn on it will
179:04 - see either one of the condition is false
179:06 - uh if I both is true then uh it will it
179:09 - will show the first content
179:11 - okay so now I'm going to tell you
179:13 - there's actually a pattern there's a
179:15 - pattern in logic blocks so so you learn
179:19 - the pen this pattern now it applies to
179:22 - other logic blocks that we're going to
179:24 - talk about in future the pattern is this
179:26 - uh when you want to start something you
179:29 - start with a hash sign so curly brackets
179:31 - hash sign and something right in this
179:34 - case we are learning about if then we
179:36 - will start with a hash if
179:37 - to end that we will have to use a slash
179:40 - if right so this marks the beginning and
179:43 - this marks the end and anything in
179:46 - between anything in between you use a
179:50 - colon sign so in this case we have colon
179:52 - else we can have colon else if as well
179:56 - right in JavaScript we have if else and
180:00 - then n right you can have if else if
180:03 - another condition else if another
180:05 - condition and else an N or without else
180:09 - as you can see right you can have as as
180:12 - many else if or else in between
180:14 - so the same thing goes with uh spell
180:17 - logic blocks you can have else if so
180:20 - anything in between of the if you use a
180:24 - colon right so else if and then you can
180:26 - type anything you like so in this case I
180:28 - want to say uh condition
180:30 - one or condition two
180:34 - so again this is whatever you type over
180:37 - here can be any JavaScript Expressions
180:41 - it could be condition one or condition
180:44 - two it could be a function call right
180:46 - maybe I'm going to say check
180:49 - condition one
180:51 - two and I'm going to Define this
180:54 - function
180:55 - on the top so I'm going to say check
180:58 - condition one
181:00 - oops
181:02 - condition two
181:05 - and return
181:12 - all right this this works as well we can
181:14 - if we can pull this function uh extract
181:17 - this into a function and call a function
181:19 - over here
181:20 - right and then probably over here I put
181:23 - some content so you you can you can see
181:25 - really if I don't put anything spell
181:27 - actually will complaints like oh uh you
181:30 - you have nothing over here right uh so
181:35 - uh
181:36 - so that which means there's rooms to
181:38 - improve in this code itself we probably
181:41 - don't have to check this condition uh to
181:43 - put an empty maybe we can have else an
181:46 - alternate uh condition and then put like
181:50 - over here instead right we can compact
181:52 - this instead of leaving like one
181:54 - condition that has empty block
181:57 - so uh over here I'm going to say
181:59 - condition one
182:03 - or two is true
182:05 - all right so now if I turn you will see
182:08 - that it will change the wording and if
182:11 - both of them are false then either is
182:13 - false right I think now it should say
182:17 - both condition one and two is false
182:22 - right so you can play with this uh
182:24 - however you want right so logic blocks
182:28 - um so logic blocks itself uh like any
182:31 - other elements is felt they can Nest
182:34 - itself as well so I can come over here
182:36 - and I can Nest again so say for example
182:41 - I have condition three
182:45 - uh right and I can come over here and
182:49 - Nest it at anywhere I like I can Nest it
182:52 - over here say if condition three uh
182:57 - another content
183:02 - all right so if I you can see over here
183:05 - and I can put it over here as well if I
183:09 - want I can have as many uh within a Blog
183:13 - I can have as many number of elements I
183:15 - want so I can have one div
183:18 - oh in fact I can have two divs if I want
183:21 - to uh if any content I like right I can
183:25 - Nest conditions and I can keep nesting
183:28 - them and the ones that I can't do that
183:30 - right so uh the sky is the limit you can
183:34 - you can do as as however you want the
183:37 - sky is the limit you can come you can
183:38 - just treat a logic block itself like an
183:40 - element which can have children and so
183:44 - you can Nest uh have like logic blocks
183:46 - and then element and then maybe logic
183:48 - blocks again and an element and then and
183:52 - all the way down to Nowhere right so
183:55 - so there you go here you have a if Logic
183:59 - box for you to show or hide content
184:03 - based on the condition right based on
184:06 - certain Logics which is the if the
184:08 - condition is true then you will show
184:10 - something if it's false you hide it and
184:13 - we've seen how you can start and end a
184:15 - block and we see the pattern over here
184:17 - where to start a block you use a you use
184:21 - Clear brackets and a hash sign and to
184:22 - end it you use the same name right so if
184:25 - you start with a clear uh you should
184:27 - start with if then you have to end with
184:28 - an if block and this time around when
184:30 - you end you use a slash and anything in
184:33 - between say else if else you start with
184:36 - a clear brackets and then a colon sign
184:41 - today we're going to talk about each
184:43 - logic block
184:45 - in this example I use I have a list of
184:49 - colors and I want to show all the colors
184:52 - in a list
184:53 - so what I do is I come over here I
184:56 - create one list item by one one by one
185:00 - so I show like The Colors the I use
185:03 - index to get the first color the second
185:05 - color and the third color but when I
185:07 - need to add another color say I want to
185:09 - add yellow
185:11 - then I have to come over here copy and
185:14 - paste
185:15 - uh change this to three and to show like
185:18 - the the fourth color
185:20 - so is that a way to
185:22 - reduce this so that we can just write it
185:25 - once and some way to Loop through all
185:28 - the colors and display it on the screen
185:31 - well there is right there's the point of
185:33 - this example that I want to show you is
185:36 - there is a better way of doing this
185:37 - which is to use the each logic block
185:42 - so before we go dive into the each block
185:45 - I'm going to draw a comparison for uh
185:50 - from JavaScript on how you would Loop
185:53 - through a list of colors and do
185:57 - something with it right so we're going
185:59 - to compare that with our each logic
186:01 - block so that you can see the
186:03 - similarities so that you can draw the
186:05 - connection between them okay
186:07 - so over here I if I'm going to look
186:10 - through the colors uh usually there's a
186:12 - few ways I can use a arrays or forage
186:16 - right I can use arrays.forage
186:19 - I could use a for loop with index
186:24 - to Loop through
186:26 - uh length
186:29 - look through all the colors
186:31 - but my favorite is if I just want to get
186:34 - the colors I don't care about index I
186:37 - would use four cons off Loop which is
186:40 - four color
186:42 - off colors
186:45 - for off Loop right so in this fall off
186:48 - loop on every iteration what I get is
186:50 - the color so I uh so in this example I'm
186:54 - gonna just console out what is in the
186:56 - color and you can see from the console
186:58 - let's read green blue and yellow so
187:01 - every iteration I'll print out that
187:03 - color at at this point of time right so
187:06 - the same thing goes with each logic
187:08 - block to start the each block so I I
187:12 - think I give a big hint for you the
187:15 - block name is called each and we've
187:18 - learned previously how to start a block
187:19 - you start with coming with a curly
187:21 - brackets and a hash sign
187:23 - and then the name of the logic block
187:25 - right so we're going to use each logic
187:28 - block so we're going to type h
187:30 - and before we type further uh the way we
187:33 - end it is to come over here
187:35 - slash H right you start with a hash and
187:39 - you end with a slash
187:42 - so how do you Loop through an array
187:44 - using each logic blocks well it's kind
187:47 - of a bit uh inverse of how you do with a
187:50 - fall off Loop right you start with
187:53 - the erase the name of the erasers so
187:56 - each of the colors
187:58 - and then you use S so each s is a four
188:02 - off right so for each of the colors as
188:06 - as a variable so I'm going to say color
188:08 - so over here I have access to the color
188:10 - so it's so you can see this is kind of
188:14 - like with uh
188:16 - inverted right u4 item off an array and
188:20 - you each the array as the item
188:25 - so in each of this content over here you
188:28 - can treat it as each iteration what you
188:31 - are going to show for each of the
188:32 - iteration
188:33 - so for each of the iteration I'm gonna
188:35 - show a list item which is this one so
188:38 - I'm gonna copy come over here and paste
188:40 - it in
188:41 - and I'm gonna use the color that uh in
188:44 - in the current iteration so which is the
188:47 - color variable
188:48 - right so now I can remove this and you
188:52 - can see immediately that uh green blue
188:54 - yellow is how I would it trade through I
188:58 - print out red green blue yellow I use
189:00 - each block it will iterate through all
189:02 - the colors and it will show in other red
189:05 - green blue and yellow
189:06 - all right so that is how you use each
189:09 - logic block
189:12 - so
189:14 - let's move on to the next thing right so
189:17 - um over here right now I'm going to
189:19 - change a bit on my array I'm going to
189:20 - come up here and change slightly to
189:23 - include uh do not just use a string but
189:28 - an object because so that you know in
189:30 - each item I can not just telling you
189:33 - what is the name of the color
189:35 - I would also tells you like what's the
189:38 - hex uh representation of the number of
189:41 - the color so for red is f zero zero
189:47 - for green it's a
189:55 - um
189:57 - zero
189:59 - green blue F0
190:03 - for blue it's gonna be uh
190:07 - red green blue so zero zero f
190:11 - and for yellow this is a tricky one I
190:14 - don't really know the hex of a yellow
190:16 - color I'm guessing it's gonna be a red
190:18 - green blue green and blue zero FF I'm
190:22 - gonna I'm just gonna guess but let's see
190:24 - how it is right so uh we have a list of
190:27 - colors uh which is object and you have a
190:30 - name and a hex right as you can see here
190:33 - we are we are considering our object and
190:36 - if we show an object directly on the
190:38 - screen it's just gonna see the string
190:40 - representation of it right you just cast
190:41 - it into a string right it will be
190:44 - similar as you call string with the
190:46 - color this is the same thing but what we
190:49 - want instead is maybe for now we're just
190:52 - just gonna show the color the object
190:54 - itself so I'm gonna use json.swing G5
190:59 - so that you can see the resemblance of
191:02 - this in the console and this in the
191:05 - screen
191:07 - so with a for Loop uh sometimes I'm
191:11 - gonna cheat a bit instead of I can say
191:14 - let's not do the cheat first right so if
191:17 - I want to access the name of the color I
191:19 - will come here and say color.name all
191:22 - right I mean again I get all the colors
191:24 - and I can get color dot hex I get all
191:27 - the hexa representation of color so the
191:31 - same thing goes I can come over here and
191:33 - say color dot Nim
191:36 - right again I'm going to see red green
191:38 - blue yellow and I'm gonna color I'm
191:42 - gonna add a Style by color the item with
191:46 - the hex right so I'm going to say color
191:49 - and then color dot hex really okay so
191:52 - this is definitely not yellow I can't
191:55 - remember what's the yellow
191:57 - oh yeah okay ff0 ff0 yellow
192:01 - so this our style the item with the hex
192:06 - of the
192:08 - uh using color.x and color name right
192:11 - same same way how you would access it
192:14 - using a for Loop but sometimes I'm
192:16 - getting lazy right uh getting lazy
192:18 - that's why I'm going for because
192:20 - sometimes I am lazy and I I I know that
192:23 - I don't really need the color I want to
192:25 - destructure immediately of this
192:30 - array so how do you do destructuring
192:32 - right destructuring you can destructure
192:35 - it like this and you can name out the
192:37 - properties of of the item right so
192:40 - previously we have color right color has
192:43 - two properties name and hex so I'm going
192:45 - to say name and hex so I can use it
192:48 - directly from here
192:50 - all right as you can see again in the
192:52 - console you console out red and the hex
192:56 - value in each iteration
192:58 - so can I do the structuring over here as
193:01 - well well yes you can so I'm going to
193:04 - destructure so
193:06 - um let's do type I'm just going to copy
193:08 - this and paste it over here so now I
193:10 - have name and hex to use it I will
193:13 - replace this with a hex and this is name
193:16 - and again nothing's changed but we have
193:19 - changed our code so this shows that this
193:22 - what we've written previously and what
193:24 - we're writing now is the theme right you
193:26 - can you can do this you can destructure
193:29 - directly in the each logic block and it
193:33 - will work
193:35 - so if I come over here again if I want
193:39 - to add another color name it goes black
193:45 - uh this color itself
193:47 - does not have any hex value
193:51 - so you can see if you print out is
193:54 - called undefined because you don't have
193:55 - any hex value so if you inspect over
193:58 - here you probably will see that the
193:59 - style color will be undefined so uh
194:03 - sometimes you have that what happens is
194:05 - that you want to have fallback right you
194:07 - fall back to some other things over here
194:10 - I'm gonna just say a purple
194:14 - just so that it's it's obvious right so
194:16 - the fallback for this is you can do it
194:19 - this way right you fall back to a purple
194:21 - color
194:23 - uh but this is this is uh falling back
194:26 - on the usage of hex right when you want
194:29 - to use the hexadecimal representation uh
194:32 - you want to use it you say okay if it's
194:34 - defined yes show me this value if not uh
194:37 - fall back to purple but what if you want
194:40 - to provide like some sort of uh
194:42 - default value when you're declaring the
194:46 - variable hex over here right here we are
194:48 - this declaring name and hex in a
194:51 - destructuring way and we can provide a
194:54 - default value by say a hex equals to
194:56 - purple
194:57 - like this so what it means is that if I
195:00 - remove this if hex is not defined it
195:02 - will be purple
195:04 - right so black you have a hex called
195:06 - Purple
195:07 - so how do you do this over here you can
195:10 - do it the same way so I'm gonna just
195:11 - copy
195:12 - so to show that it it's the same thing
195:15 - come over here and I can remove this you
195:19 - can see really again
195:21 - uh it's showing purple color right
195:24 - nothing's changed because it works
195:26 - because it works that's why uh nothing
195:29 - has changed so
195:32 - um so here you can see we are drawing
195:34 - very closely to the four cons off loop
195:38 - with the each logic block except that
195:40 - you start with a four the item of the
195:44 - array but in each you use each of the
195:47 - array as item so anything over here
195:51 - um you can write anything that you write
195:53 - over here can be just copied over and
195:55 - paste it in over here and it will work
195:58 - as you would expect and whatever inside
196:00 - the content will be
196:03 - evaluated on every iteration of the loop
196:06 - just like how you would do something at
196:09 - every iteration within this block
196:11 - so you have access to name and hex the
196:14 - same way as here as the for Loop right
196:17 - so and as of the for Loop you can Nest
196:21 - it right so I will come over here and
196:24 - because I'm lazy to come up with a raise
196:27 - uh I'm I'm gonna Loop through the hex
196:31 - string itself so can I say a character
196:34 - uh of hex
196:39 - so if I console log
196:41 - you'll see that it will Loop through all
196:43 - the characters of the hex
196:46 - all right so same thing uh over here if
196:49 - I I can come over here and add this uh
196:52 - block but I need to write as each block
196:55 - right so I'm gonna say each
196:57 - and we copy the array first s and then
197:02 - the item
197:04 - every time when you start you need to
197:06 - close it so I'm going to come here and
197:08 - close the block and what are we going to
197:11 - do in between okay what are we going to
197:13 - do in between is we're going to create
197:15 - more items right because I am dim and
197:19 - can't think of anything uh so I'm gonna
197:22 - say character
197:24 - uh and you can see you are looping
197:27 - through all the hexa characters of the
197:30 - hexadecimal uh representation of the
197:33 - color so you can see we draw very close
197:37 - comparison with the four off loop with
197:40 - the svelt logic uh each logic block we
197:44 - are going to continue to talk about the
197:47 - H logic block
197:49 - in the last video I've drawn comparison
197:52 - with each logic block with the four cons
197:55 - of loop
197:57 - um we draw we've seen that they have a
198:00 - lot of similarities on how you use it
198:02 - use them except that they are in a
198:05 - mirror inverted ways of using because
198:07 - you use four an item of the array but in
198:11 - each use each array as item
198:15 - but in this video I'm going to show you
198:17 - two more things that you can do with
198:19 - each block that is
198:22 - not available in a far off Loop
198:26 - so are you ready let's take a look what
198:30 - are they so the first thing is
198:33 - um each block allows you to get the
198:35 - index of the phone of your item right
198:39 - the current so as you iterate through
198:41 - the item uh you can specify the index of
198:45 - what you're iterating through
198:47 - so I can come over here uh to get the
198:49 - index and come over here after the each
198:52 - array as item
198:55 - and then I will type a comma
198:57 - and I can define a name for the variable
199:00 - to get the index so over here I can get
199:03 - this index called a
199:05 - I
199:08 - uh index
199:11 - I name it index so to use it I can come
199:14 - over here and let's say index name Dash
199:19 - Index right as you can see now read
199:22 - index 0 green is index one blue is index
199:25 - two yellow is index three four and so
199:28 - and so forth right you can get the index
199:30 - of the current iteration which something
199:33 - you can't do it with a fall off Loop
199:37 - well you can't do it for off Loop but
199:40 - you can do it with a for each Loop so
199:43 - one is for each right so you can come
199:44 - over here uh colors for each
199:49 - and you pass in a function over here and
199:52 - in this function you can have the item
199:55 - itself again you can do similar things
200:00 - and you can have comma and then you type
200:02 - in the second parameter is the index
200:04 - right so this now this each logic block
200:07 - is actually more closely related to the
200:12 - four h Loop where you have an array
200:14 - forage and then the item comma and then
200:17 - the index over here
200:20 - so for on each iteration you get the
200:22 - index uh this the value variable so you
200:26 - can Define any variable you like the
200:27 - name any variable name you like and it
200:30 - will be shown over here right so this is
200:32 - the same way you get index for your each
200:35 - block so which is something you can do
200:37 - with four off Loop right so that is
200:40 - number one
200:41 - and number two is
200:43 - what if your array is empty
200:46 - right in this case uh both of these four
200:50 - Loop or for each Loop will not do
200:53 - anything because the array length is
200:55 - zero
200:56 - right so if I
200:59 - comment everything array is empty you
201:04 - don't do anything right you don't
201:06 - console anything but what if I want to
201:09 - show something when it is empty I want
201:12 - to fall back to say
201:14 - okay my list is empty just show one item
201:17 - that says list is empty what should I do
201:20 - well
201:22 - in ish logic block you can have else
201:26 - interesting right because else is not
201:29 - just for the if block right if else else
201:31 - if but this is also this
201:34 - um this you can use the else when each
201:37 - has no item right so you have
201:40 - um so how do you add the else
201:42 - as you have learned in how you add else
201:45 - in the if logic block anything in
201:48 - between you start with a column sign
201:50 - right so I'm going to curly brackets
201:51 - colon and else
201:53 - so over here else you can put in item
201:57 - that says uh
201:59 - um anything right I can say uh the list
202:03 - is empty so you can put in the content
202:06 - that that will show only when the list
202:09 - is empty right as soon as I add
202:12 - something back that this content is is
202:16 - not going to shown anymore it's hidden
202:18 - right this will only be shown when
202:23 - the list has no item right when the list
202:26 - link the length of the list is zero
202:30 - so here you go two things that you can't
202:32 - do with a fall off Loop that you can do
202:35 - with each logic block
202:37 - first you can get the index of the
202:39 - current iteration
202:40 - second you can show something when the
202:43 - list is empty using else
202:49 - today we're going to talk about key h
202:52 - block
202:54 - what is kit each block
202:56 - well it's like a ish block but with key
203:00 - but what does that key do well we'll
203:03 - learn about it in this video
203:05 - before that let's take a look at one
203:07 - example so over here I've prepared an
203:11 - example which
203:13 - again we look through a list of colors
203:15 - so I have three colors red green blue
203:18 - and I have a button to add a new color
203:20 - so when I click on the button I'll push
203:22 - in a yellow and hopefully you'll see
203:25 - yellow added to the list
203:26 - so under here I add I Loop through the
203:30 - colors uh with the least color and then
203:33 - I yeah I show what's the color it what
203:37 - what's the color right now right so when
203:39 - I click you'll see one new color added
203:42 - at the end of the list
203:44 - so what happens here if we investigate
203:48 - this what happens is that svelt will
203:51 - actually Loops through the list all
203:53 - right so previously the list only have
203:54 - three items now you have four items so
203:57 - you will look through a list and compare
203:58 - one by one the color and the index
204:02 - well it does not really compare the
204:04 - color and the index it Compares what is
204:07 - being shown on the screen and what it's
204:09 - going going to show what is showing and
204:11 - what it's going to show right so right
204:13 - now uh the first item is showing rate
204:15 - and we're gonna show red as well so
204:18 - nothing to do and second item is showing
204:20 - green and we're going to show Green as
204:22 - well so nothing to do uh third item is
204:25 - blue and we're going to show Blue as
204:26 - well so nothing to do over there and
204:29 - then we don't have any items left but we
204:31 - still want to show one more item which
204:32 - is the fourth item is yellow so we add a
204:35 - new item at the end of the list and show
204:38 - it uh add it as a list item and the
204:41 - content is yellow and there you have it
204:43 - right so if I come over here and I
204:46 - inspect
204:48 - elements uh we're gonna see uh close uh
204:53 - a little bit closer and what what is
204:56 - happening right so gonna reset this uh
204:58 - I'm gonna inspect again so before we
205:01 - inspect I am going to use the
205:06 - developer tools to save the reference of
205:09 - the list item so that you can know that
205:11 - whether what I say is true right what I
205:14 - say is that you will compare compare
205:16 - compare the first three items and then
205:18 - the fourth item is is newly inserted
205:20 - right so I compare reference and see
205:22 - whether do I remove any of the elements
205:26 - or are they the same reference so I'm
205:28 - going to save it
205:29 - um over here so I'm gonna say a uh okay
205:32 - I'm gonna name it better right so the
205:35 - first uh first item equals to the
205:38 - current element I'm selecting
205:41 - so this this one the rate and highlight
205:43 - the second one and the second item is
205:46 - zero
205:48 - and third item
205:52 - so first second and third okay and now
205:55 - I'm going to click the button to insert
205:58 - yellow into the list
206:00 - okay if you notice over here as well uh
206:04 - it flashes something over here right I
206:07 - don't want to restart because I have to
206:09 - retype everything but
206:11 - rewind pause this and Rewind you can see
206:14 - that uh it it flat the fourth item
206:17 - flashes and nothing flashes on the first
206:19 - three item because you don't have
206:20 - anything changed all right so now
206:22 - interesting thing happens right we want
206:24 - to compare the item so if I come over
206:27 - here this is this current item and we're
206:29 - going to compare first item is it equals
206:32 - is it is a reference equals the first
206:34 - one yes it is so we are not we're using
206:37 - the same element okay that's good
206:40 - let's check the second item uh and let
206:43 - me highlight the second
206:45 - right and whoops right it is true right
206:49 - so the second item is equals to the
206:52 - second elements over here
206:54 - let's highlight the third element and
206:56 - let's type third item it is true as well
206:59 - so that's great and the fourth one uh no
207:03 - one is
207:04 - um we don't have that fourth item yet so
207:08 - it's it's a new item so we can't compare
207:09 - with any of the elements right that's
207:11 - great so
207:13 - um what happens if right now instead of
207:16 - pushing yellow at the end of the list
207:18 - I'm gonna insert yellow and say the
207:21 - second position so I'm gonna use spice
207:23 - instead
207:25 - uh zero uh so the index I'm going to
207:29 - insert it in the second index
207:31 - I remove nothing and then insert yellow
207:33 - right so if I oh sorry splice
207:36 - so I click you'll see yellow inserted at
207:39 - the second position well it's
207:41 - third in a second it index or it's a
207:44 - third item right
207:46 - okay so let's let's come over here and
207:50 - before we do that let's restart again
207:52 - before we do that I'm going to keep all
207:54 - the reference of the elements
207:57 - and let's guess what what's gonna happen
207:59 - right now all right so we're gonna
208:01 - before we do that I'm gonna say first
208:03 - item
208:06 - oops highlight the second item
208:12 - and then highlight the third item
208:16 - all right so first second third you can
208:19 - see it it's also how when I hover it's
208:22 - also highlighted on the left on the
208:23 - Ripple over here
208:25 - right so as I click what happens right
208:28 - so this is what I'm going to explain
208:30 - what happens and we're gonna see whether
208:32 - it it matches what I explained right so
208:36 - I have red green blue three elements and
208:39 - right now I'm gonna render four items
208:41 - right and I'm going to insert yellow at
208:43 - the third position so you're gonna have
208:45 - red green yellow blue so compare the
208:48 - first element and the first thing I'm
208:50 - going to render right first thing I want
208:52 - to show is read and read okay I'm gonna
208:55 - not go into anything I'm gonna see next
208:57 - thing right the next thing I have on the
208:59 - screen is the green and what I'm going
209:01 - to show is green as well so nothing's
209:03 - changed okay that's good third thing
209:05 - that I have on the screen is blue but
209:07 - what I'm gonna show is yellow so instead
209:11 - of uh inserting yellow I'm gonna change
209:15 - the blue color to Yellow right blue to
209:18 - Yellow because that's the third item I'm
209:19 - going to show
209:21 - and then fourth item I don't have
209:22 - anything I don't have fourth item
209:24 - element on the screen so I'll create one
209:26 - new element called blue and then I
209:28 - insert it on the screen right so
209:32 - that that's what happened right of
209:34 - course in my mind when I do this you're
209:36 - gonna say like isn't shouldn't the
209:39 - better way or what I want is more like
209:42 - keep these three elements and insert
209:44 - yellow and new elements as yellow in the
209:47 - third third position rather than you
209:50 - know change the blue to yellow and then
209:52 - insert one at the last it shouldn't that
209:54 - be the way well it's not really and it
209:59 - trust me what I say is what's actually
210:02 - happening and I'm gonna show you I'm
210:03 - gonna prove it to you right now then
210:06 - click on the buttons and you'll see
210:08 - yellow on the screen now and again if
210:11 - you haven't noticed on over here on the
210:13 - right you can backward a bit and you you
210:16 - will notice that both of these elements
210:19 - flashes right flashes means that
210:21 - something has changed right the the
210:24 - Chrome extent developer tools will flash
210:26 - on elements when it's changed
210:28 - so we're gonna come over here and do the
210:31 - element uh reference comparison right so
210:34 - I come over here and say it is the first
210:36 - item equals to the current element well
210:40 - it's true yes
210:41 - and the second element is the green
210:43 - color one I'm going to come over here
210:46 - and compare is the second item equals
210:48 - the current yes it is and I'm gonna
210:52 - highlight on the third one and say is
210:56 - uh is this the element equals to this it
210:59 - is true again right but previously
211:01 - remember third item shows the color blue
211:05 - but now it's showing color yellow so
211:08 - it's reusing the same elements but then
211:10 - change the text and for the blue itself
211:12 - we recreate a new ones this one is not
211:15 - equal to anything else so it happens as
211:18 - I what I said right it will compare one
211:21 - by one and if it's different you will
211:23 - update it and if you have more items at
211:26 - the bottom you will add it in
211:29 - right so in general uh whenever the
211:33 - length of the array changes
211:36 - um whenever the array changes in general
211:38 - what happens is that swell will go
211:41 - through list one by one and compare what
211:43 - is on the screen and what is going to
211:45 - show Even if you rearrange the things it
211:48 - will still go one by one in order and
211:51 - update the text or the contents
211:54 - according to what it's going to show
211:55 - right it does not know whether it does
211:58 - not have no idea know what idea
212:00 - whatsoever about how you rearrange the
212:03 - item right you just go one by one
212:05 - compare and update compare and update
212:08 - and at the end of the list if you have
212:10 - more items then they will be created and
212:12 - inserted into the Dom or if you have
212:15 - less item then the extra items will be
212:17 - removed right that is what what happened
212:21 - so uh again to prove this to show you
212:24 - this is what actually happens I have
212:27 - another component over here this way I
212:30 - can show you that the component will
212:32 - actually tells you that when it's being
212:34 - mounted and what it and it will console
212:37 - out the color of the element that is
212:40 - provided to this component itself all
212:42 - right so I can come over here import
212:44 - this component
212:52 - I'm going to show this component in
212:54 - States
212:56 - I'm going to pass color
213:00 - so on Mount you see that I will Mount
213:03 - red green and blue right you can see red
213:06 - green blue
213:08 - okay and I have another variable that's
213:10 - called initial color which will be
213:12 - computed will be stored the value of
213:14 - color and the initialization right
213:17 - during initialization uh your storage
213:19 - and it's it's not a reactive variable so
213:23 - anytime when you change color this will
213:25 - be stuck at the initial color you you
213:27 - pass into this component
213:29 - and as now what I'm going to do is I'm
213:32 - going to insert yellow in the third item
213:35 - as soon as I click that you see that a
213:39 - long blue right it inserts a new item
213:42 - inserted is actually a blue color
213:43 - instead of yellow although we insert
213:45 - yellow in the middle it does not matter
213:48 - it will only check like what we have and
213:50 - what we're gonna render we have the
213:53 - extra item and that extra item is the
213:55 - fourth item which is blue color so as
213:57 - you can see here it locks out blue
213:59 - instead
214:01 - and then one thing you can see here is
214:04 - that the third item although the color
214:06 - right now is yellow but the initial
214:08 - color is blue right this tells you that
214:10 - previously this is blue and we change it
214:13 - we change the color property to Yellow
214:15 - right to show on the screen but this is
214:19 - purposely designed such a way that it
214:21 - still show you that what was the initial
214:23 - color right so they will swallow go
214:26 - through the list updates every element
214:28 - in in order and then anything that is
214:31 - extra it will be inserted or anything
214:34 - less than it will be extra extraneous
214:37 - elements will be removed right spelled
214:40 - has no idea whether you insert something
214:42 - in between or rearranged order
214:44 - rearrange my hair as well so
214:47 - is there a way to let svelt knows that
214:50 - you want to rearrange the item right
214:53 - I've said so many things so that you
214:56 - know like how it works and so that you
214:58 - can know that you make a conscious
215:00 - choice to know that okay
215:03 - I know it's felt you have no idea that I
215:06 - rearrange but can I tell you that
215:10 - some odds can I tell you that
215:14 - a way so that you know that when I
215:17 - reorder something you know when I
215:18 - reorder it well can you well that's the
215:22 - point of this video we're gonna do a key
215:25 - each block and a key
215:28 - you can think of it like an identifier
215:31 - for the elements because anything can be
215:35 - anything over here can be a as your item
215:39 - uh element item of your array right so
215:42 - as well has no way to know that whether
215:44 - you rearrange or you just modify one
215:48 - property of it right if it's a string
215:49 - yeah sort of you can compare the string
215:51 - but if it's an object how can I know
215:54 - whether do I use like object reference
215:57 - or like how can I know right so you can
215:59 - provide a way to tell us about that okay
216:01 - this is this property or this value is
216:05 - the key you use this key to compare if
216:09 - right now if I show a list of elements
216:11 - each of them has its own key and anytime
216:14 - when uh
216:16 - and and then when I update something you
216:19 - compare I will also use I for each of
216:22 - the things that I'm going to show will
216:23 - also have a key and you compare the key
216:26 - first so if the key shows uh so if the
216:30 - key appears previously but now it's in a
216:33 - different order because it's showing
216:35 - early on or you rearrange it somehow
216:38 - then you know that this element should
216:41 - be shuffled onto the top rather than you
216:44 - know compare one by one and update
216:46 - element one by one right so how you
216:49 - write that key well you come over here
216:52 - each array as item and then you can add
216:56 - index as well uh whether you have index
216:59 - or not is up to you but to provide a key
217:02 - what you do is you use a bracket
217:05 - and inside bracket you can write any
217:07 - JavaScript Expressions again any
217:10 - JavaScript Expressions you can call a
217:11 - function you can have a plus you can
217:15 - like adding up multiple elements or you
217:18 - can do whatever you want any JavaScript
217:20 - Expressions but of course make sure that
217:23 - it evaluates to
217:25 - uh something that you can store in a map
217:28 - right of course you can store anything
217:29 - in the map but I will suggest that you
217:32 - know put in some sort of strings or
217:34 - numbers or that's that kind of thing
217:37 - something simple right don't put uh
217:39 - because you smell will have to hold it
217:42 - in reference in a map and you you
217:44 - wouldn't want to throw everything in
217:45 - there
217:46 - uh so over here I
217:51 - um of course whether is there a
217:54 - performance penalty uh you would have to
217:56 - test it out to know for sure but in most
217:59 - cases you just need something like a
218:01 - string right in this case uh we have
218:04 - colors and we can use the color itself
218:06 - as key right so that I know that okay
218:08 - red green blue right if I insert yellow
218:11 - in between uh yellow should have a key
218:13 - of yellow as well so you know that blue
218:16 - uh the key blue is still there right uh
218:19 - it's just like Shuffle to the bottom so
218:21 - that
218:22 - um
218:23 - we know that okay we compare the key
218:25 - first right all of the item is still
218:27 - there but then yellow is a new one so
218:30 - you insert yellow in and then we push
218:32 - the blue down at the end right so that
218:35 - is
218:36 - um
218:37 - what will happen so I can use a color as
218:40 - a key so uh so to show you I'm going to
218:44 - say key is color
218:48 - I will comment this for temporarily so
218:51 - you have red green blue and the key is
218:52 - the red green and blue you can have
218:54 - anything as a key in this uh in this
218:57 - example I'm just use I'm just gonna use
218:59 - the color itself as a key okay
219:03 - um so I come over here
219:05 - uh now do the same thing that we have
219:09 - done earlier on I'm going to skip the
219:11 - reference and then we compare the
219:13 - reference right so in this time round
219:15 - we're gonna see what we what we're gonna
219:17 - happen is that
219:19 - uh you will compare the key first right
219:21 - so right now you can show red green blue
219:23 - you have three keys and when you insert
219:25 - yellow you have red green blue yellow
219:27 - you have four keys right so you will
219:30 - find every time when you render uh you
219:33 - see red the key is red fine where is it
219:35 - and then if if it appears at the bottom
219:37 - you will move it to the top right and
219:40 - then I'm gonna use green and find
219:43 - through the list where is the key which
219:45 - one which element has a key green insert
219:48 - it there right yellow do you have
219:51 - anything that is yellow no that will
219:53 - create one and then blue do we have any
219:55 - elements that is blue yes we will insert
219:57 - that over here right so things will be
219:59 - reshuffled
220:01 - uh so if I come over here and I keep the
220:04 - reference uh so I'm gonna keep the
220:06 - reference first so I'm gonna say first
220:08 - item equals this right first item equals
220:12 - this
220:13 - second item equals uh highlight this on
220:17 - this
220:18 - and third item equals to this
220:23 - all right it's first second third and
220:25 - now when I insert yellow
220:28 - uh if you bank was a bit you'll see that
220:31 - only the third item flashes right the
220:33 - fourth item will be shift downwards so
220:35 - let's compare whether the reference uh
220:38 - of each of the elements has changed
220:39 - right so if I come over here and say
220:41 - first item equals to the current element
220:45 - yes it's true right we will use this
220:48 - second element uh
220:51 - it is true as well
220:53 - and let's look at the third item
220:57 - third element
221:00 - it is false right this is a newly added
221:03 - newly inserted element newly created and
221:05 - newly inserted so yellow is something
221:07 - new
221:08 - uh and then but you compare the fourth
221:11 - one and you see it's true right we reuse
221:14 - this right we reuse blue so blue is
221:16 - shifted downwards and we insert yellow
221:18 - in inside
221:21 - right so if I come come over here and
221:23 - use a component in the States you see
221:26 - that okay initially we are say red green
221:29 - and blue right we are mounting green and
221:32 - blue and when I click uh to add a new
221:36 - yellow insert a yellow in between and a
221:39 - third item you see that a new component
221:41 - is created which is colored yellow
221:43 - and now as you can see also the asian
221:46 - color of that is also yellow right this
221:49 - is a newly created component inserted
221:51 - into the list right so if you uh instead
221:56 - come over here if we do something like a
221:59 - reverse
222:01 - uh colors dot reverse
222:05 - uh you see that when I click uh again
222:09 - it's also yellow is created and even
222:12 - though like we should reshuffle
222:14 - um we're gonna reuse all the elements
222:16 - elements will be just Shuffle and
222:20 - it knows uh it use the key to look up
222:23 - for from the previous render version to
222:26 - find out where the element is and then
222:28 - insert it in order of what you're gonna
222:30 - show next
222:32 - right so
222:35 - um why is this important well this is
222:37 - important uh in a few ways in two ways
222:40 - first is that you reuse uh the element
222:43 - reference in ways that you are expecting
222:46 - it to right you don't updates uh the
222:49 - elements one by one to change this right
222:51 - so if you have a huge list which you
222:55 - want to insert something in between
222:57 - right uh so if you don't have a key each
222:59 - map you what would happen is that uh you
223:02 - compare and from that item onwards you
223:04 - always have off by one error where all
223:07 - the elements have to update it's update
223:09 - to new value because you know something
223:11 - has inserted below and you shift down so
223:13 - you compare the uh for example you
223:16 - insert at the second position then the
223:17 - third item is equals the old the old
223:21 - second item is equals to the third item
223:23 - and you know third is equal to four
223:25 - fourth equals to fifth it always have to
223:28 - update itself because you know the value
223:29 - is different
223:30 - right so uh having KH allows you to
223:34 - insert anything in between but still
223:36 - keep a reference keep using the same
223:39 - reference instead of updating of course
223:41 - there's a penalty in terms of space you
223:44 - actually have to keep a reference uh
223:47 - using a key uh you have a map to keep
223:50 - keep the key with uh reference to the
223:53 - elements so that you can reuse that
223:55 - elements right so that is like a
223:57 - changing
224:01 - sorry you are trading a space with like
224:04 - time efficiency right
224:07 - um of course however if you are using
224:10 - components where it itself has some life
224:13 - cycle methods where you know when
224:16 - companies created like in an example
224:18 - we've shown you use unmounts and when
224:20 - you update it you use like before
224:22 - updates and things like that well you
224:25 - and and probably you want to make some
224:27 - API calls or make something when the
224:30 - properties has changed well in a list in
224:35 - a context where you use it in a list
224:37 - most likely you want to uh you know if
224:41 - if the item is not changed you most
224:43 - likely will want to use the same item is
224:46 - like if something is inserted in in
224:48 - front or reshuffle you most likely want
224:50 - to reuse the same data for the component
224:53 - rather than you know update the comp
224:54 - data for each of them so that it matches
224:57 - the New Order right in that case you
225:00 - want to use a key each block
225:04 - and lastly there's also one reason you
225:07 - want to use a kit each block is when you
225:10 - add transitions or animations when you
225:12 - reshuffle the items uh this is something
225:16 - we're going to learn later on on how to
225:18 - add transitions or animations when you
225:21 - add something to the list but here here
225:26 - is how it will work with no with them
225:28 - right you need to know uh you need to
225:32 - keep the reference of where it was and
225:34 - you have to move it up instead of just
225:36 - updating the value right if you update
225:38 - the value then there's nothing to
225:39 - transition or animate about right so you
225:43 - need to keep the reference you need to
225:45 - know that okay I'm going to reuse the
225:47 - same element but previously it's at the
225:48 - fourth position now you have to shift to
225:50 - the first position and while you move it
225:53 - over you need to add some animation
225:55 - that's how animation or transition will
225:58 - work with a key each block
226:01 - um so
226:03 - uh there you have it a key each block
226:05 - and I hope that I explain it clearly
226:08 - with you uh and if you're not clear
226:10 - enough uh watch the game watch this
226:13 - video again and play around with the
226:15 - reference or life cycle so that you can
226:17 - clearly see the effect of you know
226:20 - whether you're updating an element or
226:22 - reusing your elements or create a new
226:24 - element right especially when you insert
226:26 - something it should be it should it be
226:28 - created or should it be updated on on
226:32 - existing elements in the video I share
226:34 - with you the differences between each
226:36 - block and a keyh block in particular how
226:40 - the updates right so
226:43 - um in the video I try to explain to you
226:46 - with a lot of hand gestures and I'm not
226:49 - sure whether you get it or not so in
226:52 - this video we're gonna see how key each
226:55 - block is different than each block
226:58 - true visualization right so this video
227:01 - is going to be visualized I have
227:04 - prepared a very simple example with a
227:07 - very nice slides so let's take a look so
227:11 - here is my slides key each visualization
227:15 - so let's first talk about how each block
227:19 - updates so here I have an array
227:22 - four items right each with ID and name
227:26 - and here is my code where I use the each
227:29 - block where each array as person
227:32 - and in each iteration I will render I
227:36 - will have like a list item which uh
227:39 - inside that will have a person.name as a
227:42 - Content as a text content right so what
227:44 - you get is like this
227:46 - uh Alfred Bob Danny and Elliot right so
227:51 - we look through the we look through all
227:53 - the persons within an array and then
227:56 - there we have for this item
227:58 - so what happens if I add a new item so
228:02 - here I add the third item in in between
228:05 - uh the first two so right I insert one
228:08 - item and the third position
228:10 - and what see what happens so the first
228:13 - thing that's going to happen is uh
228:16 - internally so what I'm going to show you
228:18 - next is um what's it's gonna happen
228:22 - within svelt conceptually right it does
228:25 - not happen one for one because you know
228:28 - uh spelled May optimize the
228:30 - implementation but conceptually it
228:32 - happens like this right so that if you
228:34 - get this idea clearly then probably most
228:38 - likely or not um it will not change
228:40 - right the concept the concept behind
228:42 - will not change
228:44 - so what happens when you have this is
228:46 - what we will what we need to prepare is
228:48 - what the end result would look like
228:51 - right so
228:52 - this is like the target result this is
228:54 - what we're gonna We want to end up with
228:58 - so what happens is then we actually
229:01 - iterate through the target result and so
229:05 - right now we are looking at the first
229:07 - item which is Alfred and then we compare
229:10 - with the first item of the current Dom
229:13 - right what we have currently on the
229:15 - screen versus what we're gonna end up
229:18 - with so if compare the first item with
229:20 - us for the Target and first item for the
229:22 - what we have currently right it looks
229:25 - the same uh the text content is the same
229:27 - as well so we move on the next one so
229:30 - the second item uh second iteration we
229:33 - have personal name which is Bob uh and
229:36 - it's exactly the same of what we have on
229:37 - the screen so we move on the next one so
229:40 - the next one the next personal name is
229:42 - actually Charlie right in our array the
229:44 - third item is actually Charlie but what
229:46 - we have on the screen is Danny so
229:49 - Charlie is not equal to Danny so we
229:51 - change Danny to Charlie so so over here
229:55 - after the titration after your updates
229:58 - it looks the same now so we move on the
230:00 - next one
230:01 - next one we have Danny because the
230:03 - fourth item is Danny right now and what
230:05 - we have on the screen is Elliot Danny is
230:08 - not equal to Elliot so we update Elliot
230:10 - to Danny and then we'll move on to the
230:12 - next one so the next one is Elliot's but
230:15 - on the screen we only have four of these
230:16 - items so what happens is we create
230:18 - another one create a new item and name
230:21 - it Elliot and we insert it in the screen
230:24 - right instead in the Dom and there you
230:26 - have the end results
230:28 - so five items as you can see over here
230:31 - in the process we update two list items
230:34 - and insert one at the very end right
230:36 - although we conceptually we know that
230:38 - when we look at the array we know
230:40 - actually we added only one item and
230:42 - there's no change right we insert one in
230:44 - the center but in terms of operations
230:47 - that swell does to updates
230:49 - um the Dom to match up what we want to
230:52 - render in the end we actually end up
230:54 - with two operations two updates
230:56 - operations and one insert uh operation
230:59 - at the end of the list
231:01 - so let's take a look at another example
231:04 - which is to remove an atom item right
231:07 - now if you have have a notice we remove
231:09 - the second item right second item is Bop
231:11 - but we remove it now so this on the top
231:15 - or the bottom right corner is what is
231:17 - the target what will end up to look like
231:19 - what we want to end up to look like
231:22 - so uh
231:23 - once you have the target we again we do
231:26 - the same operation which is We compare
231:28 - item by item right the first item is
231:31 - Alfred uh first item is Alfred in the
231:33 - screen the same we move on the next one
231:35 - next one what we have on this on what we
231:38 - want to render is Charlie but on the
231:41 - screen we have Bob so we're gonna rename
231:44 - that we're gonna update that list item
231:46 - to show Charlie in the states and then
231:48 - we'll move on to the next item next item
231:50 - what we want to render what we want to
231:53 - see on the screen is Danny the third
231:55 - item is Danny but what we have the third
231:57 - item is showing Charlie so we'll update
231:59 - the list item change it to Danny and
232:02 - we'll move on we have Elliot but Danny
232:04 - is not Elliot to updates Elliot and move
232:06 - on uh now we reach the end of the list
232:10 - of what we want to render but we have
232:12 - some extra list items in the screen on
232:15 - the Dom right what we do is we remove it
232:17 - right no extra elements so we remove
232:19 - everything and this is what we end up
232:22 - with although by comparing the array we
232:25 - know that we remove the second item but
232:28 - if you look at the the target results
232:31 - and try to update the current Dom
232:34 - towards that Target results what we do
232:36 - end up is we remove one item and modify
232:41 - or update three this item so that is
232:45 - what happens under the hood right that
232:47 - is what happens
232:49 - so
232:50 - is there a way that we can tell svelt
232:53 - the engine tell it that okay actually
232:56 - you know what this is what actually
232:58 - happens we remove only one item and just
233:02 - do that right or tell it that okay we
233:05 - don't we we only insert one item in this
233:09 - in the middle of the list just do that
233:12 - can you do that well we can we can do
233:15 - that by using a key each block
233:19 - so what KH block is different from
233:22 - normal each block is that
233:24 - we add this bracket and in this bracket
233:27 - we have Expressions telling um spells
233:30 - that for each of the item within a list
233:33 - one is the key it can be anything it can
233:35 - be any Expressions but whatever it
233:38 - evaluates into what you see is that okay
233:41 - right now we created four elements and
233:44 - for each of the elements we also
233:45 - evaluate its key so we have we use the
233:48 - person ID as a key so on the screen we
233:51 - also have we have the key as one two
233:53 - four and five right so this uh this
233:56 - represents the key of each of the item
233:59 - and let's take a look at what happens
234:01 - next so what's happened next is that we
234:04 - insert a third item right into the array
234:09 - so this is what we will end up look we
234:12 - will end up what we would end up what we
234:14 - want to end up with right five item each
234:17 - of them with the key which is calculated
234:20 - evaluated on the right
234:22 - so what's next
234:23 - what's next is uh svelt will actually
234:26 - first go through the the Dom go through
234:30 - a current Dom go through all each of the
234:32 - item
234:33 - and use the key
234:36 - as a key use the key as a key of a map
234:39 - we will create a map use the key as a
234:41 - key of the map and then each of the the
234:44 - value would be a reference to the actual
234:47 - elements on the Dom
234:49 - so this is what we created we have a
234:52 - four entries in the map one two four
234:56 - five each of them is pointing to the
234:58 - elements on the Dom right so if you
235:01 - compare this item and this they're
235:03 - exactly the same so this is construct
235:06 - conceptually what happens it may
235:09 - differ a bit on what actually happens
235:11 - under the hood but this is what happens
235:13 - conceptually right imagine when you have
235:16 - pH block what will do every time we want
235:18 - to update we will create like a mapping
235:21 - of a key to the actual elements
235:25 - and then let's take a look at what we're
235:27 - going to do with that mapping so first
235:29 - is we're going to go through the Target
235:31 - and we're gonna go through one by one
235:34 - and then compare the key uh component
235:39 - key
235:40 - of that element and then we see whether
235:43 - we have that element on the screen or
235:45 - not
235:46 - right so we we have the first element is
235:49 - Alfred and we look at the key the key is
235:52 - one we go through look at the mapping
235:54 - okay mapping one has Alfred right so the
235:58 - the content is the same okay let's move
236:00 - on
236:01 - so let's look at the second element on
236:04 - the target results we have Bob which is
236:06 - the key too let's take a look do we have
236:08 - key two yes we have and content is the
236:11 - same so we don't do anything
236:13 - right next is Charlie Charlie is key
236:16 - three do you have a key that's number
236:18 - three in the map no we don't so what we
236:21 - do is we create one and then we
236:26 - create that at least element called
236:28 - Charlie and then insert it into the
236:30 - mapping right so this will be inserted
236:32 - later on right this is something we need
236:34 - so we created one list item and let's
236:36 - move on We compare the fourth element
236:38 - which is Danny key four do we have key
236:42 - four yes we do next we have Elliot's key
236:45 - five so do we have uh
236:48 - key number five and Elliot yes we do in
236:51 - the mapping yes we do okay so we are
236:53 - done with the targets and let's take a
236:55 - look let's go through the target again
236:57 - which compares to the results right this
237:01 - time around we just look at the key
237:02 - right we have created all the elements
237:05 - for all the keys that will end up to be
237:08 - right in the Target result we have
237:09 - already created all of them in a Target
237:10 - in the mapping right uh things that are
237:14 - keys that already exist will also be in
237:18 - a mapping so we already have all the
237:19 - elements we need
237:20 - so now it's just go through the list for
237:23 - example we look at the key one compare
237:25 - key one okay and then we look good and
237:28 - since it's already there so we remove
237:30 - from the mapping right we don't need it
237:32 - anymore let's go for key two key two on
237:35 - the results okay that's correct now
237:38 - three key three right the the target one
237:41 - two one is key number three exit at this
237:44 - position right now but what we have at
237:46 - the position right now is uh not key
237:49 - three is is four right so what we do is
237:52 - we insert it the key number three inside
237:55 - this results
237:57 - uh and then we move on right next is key
238:00 - number four we have uh right now we're
238:04 - also seeing key number four in the
238:05 - results in the current Dom which is
238:07 - correct then we move on key number five
238:09 - we look at the Dom key number five which
238:11 - is correct okay and then that's all and
238:14 - we take a look at the mapping we have
238:16 - almost every elements all the elements
238:19 - is being used up so which is good and
238:21 - let's and we can call it a day
238:25 - so uh hopefully you can see that what we
238:28 - have go through so far is we only create
238:31 - one list element and then we insert it
238:34 - into the right position and left the ref
238:37 - rest of the elements untouched
238:40 - right this is by by doing the way we do
238:43 - it do this is by marking each of the
238:46 - element with a key and then we use the
238:49 - key to compare whether that element
238:50 - exists or not only we create elements
238:53 - that if the key does not exist
238:56 - right and we when we want to update we
238:59 - also compare elements based on the key
239:01 - so if uh if the current existing element
239:05 - is the same key has the same contents
239:09 - then we don't have to update them
239:11 - let's take a look at another example
239:14 - when we try to remove an item right so
239:17 - over here we have remove bulb just like
239:20 - how we did we remove Bob the second item
239:23 - in the ish array each logic Block in a
239:28 - previous example
239:30 - so let's take let's do the same thing
239:32 - again let's go through right now on the
239:34 - screen we have five elements with five
239:37 - different keys and what we want to end
239:39 - up is only four elements with four
239:41 - different keys
239:42 - so first thing first is we go through
239:44 - all the elements on the current Dom and
239:47 - then build this mapping right so we have
239:49 - five elements so and five different Keys
239:51 - one two three four five
239:53 - and now stick let's go through the
239:55 - Target and see uh go through Key by key
239:58 - element by element and then see whether
240:00 - it already exists on the mapping or not
240:03 - right so we look at right now the key is
240:04 - one uh there's already a mapping uh
240:07 - there's already an entry with a key
240:09 - number one in the mapping contains the
240:11 - same so we move on
240:12 - three we have key number three in the
240:15 - mapping content is the same so we move
240:17 - on okay number four we have four in the
240:19 - screen mapping is the same in the
240:21 - mapping content is the same so we move
240:23 - on
240:24 - key number five the same
240:27 - we move on right
240:28 - now
240:30 - let's take a look at now let's go
240:33 - through a Target go through each of the
240:35 - keys again and go through
240:38 - um the re the current Dom right so first
240:41 - element is key one and what we have also
240:44 - key one okay so we can strike that off
240:46 - from the mapping
240:47 - second element is key three and let's
240:50 - take a look at currently we have key
240:52 - number two which is extra Okay so it
240:57 - does not mean that we're going to remove
240:58 - this immediately but we're gonna take it
241:00 - out from the Dom
241:01 - right and then yeah take it out from a
241:04 - Dom that's all right so here we call it
241:06 - slightly different just just to let you
241:08 - know that this is something uh it was
241:12 - there previously in the current dome but
241:14 - we've taken up temporarily right now
241:17 - so with that taken out let's take a look
241:19 - at the next element the next element is
241:22 - key three on the Dom which is map which
241:25 - maps with what we have and then so we
241:27 - move on right key four we want key for
241:30 - next and we have key for in a Dom let's
241:32 - move on we want key five next and we
241:34 - have key five on the Dom which is great
241:37 - so uh we have all the elements we have
241:41 - all the elements in the targets and
241:43 - let's take a look at what we left in the
241:45 - mapping these are elements that we are
241:49 - not going to need it anymore because you
241:51 - know we have showed up all the target
241:53 - results so these are extra elements and
241:56 - we're going to remove it so so we clean
241:59 - it throw it away
242:01 - so we clean up the mapping by straight
242:04 - away and that's all so by the end of end
242:07 - of the whole
242:08 - update cycle what you see is we end up
242:11 - with four elements with four different
242:13 - keys right that element is removed all
242:16 - right so operation wise what happens on
242:19 - the Dom is we remove one element and
242:21 - that's all we didn't update any elements
242:23 - and only remove one element which is
242:25 - what we want
242:26 - let's take a look at a last example of a
242:29 - key h block update
242:33 - here if you take a look at the array we
242:35 - swap the second and the third item right
242:37 - so right now the order will be Alfred
242:39 - Denny Charlie Elliott
242:42 - so we have what the target at uh we have
242:44 - our Target Alfred Dennis Charlie Elliott
242:47 - key 1435 and what we have on the screen
242:50 - is one three four five
242:52 - right so first thing first we create a
242:55 - mapping out of the edges current uh Dom
242:58 - so we have all the keys and the
243:01 - reference of the Dom elements on the
243:03 - Stomp
243:04 - and go through and we go through each of
243:07 - the key by looking at the elements uh
243:10 - finding the key where the Alfred uh so
243:12 - where the key number one is as is in the
243:14 - mapping it does content elsewhere is the
243:17 - same okay we move on camera four and
243:20 - this is in the mapping contains Danny
243:22 - Danny the same key three Charlie Charlie
243:26 - the same we don't have to update
243:27 - anything Elliot uh key number five is
243:30 - Elliot and we have key number five for
243:32 - the mapping and Elliot Elliott is the
243:34 - same we don't have to update anything
243:35 - that's great and now let's go through
243:38 - this again
243:39 - um by just looking at the key right we
243:41 - have key one we have key one on our
243:43 - first elements on the Dom that's great
243:45 - let's move on we have key four on the
243:48 - what we want is key for and what we have
243:51 - is key number three on the screen okay
243:53 - that is not correct so we're gonna
243:56 - temporarily take it out
243:58 - um take it out for now and let's take a
244:01 - look at the next element on the screen
244:02 - which is keynote 4 which match what we
244:06 - want right and
244:08 - that is that uh so we can strike that
244:11 - off from the mapping and let's take a
244:13 - look at the next elements we want to
244:14 - render which is key number three
244:16 - and what we have instead is schema 5 on
244:19 - the screen which is what
244:21 - not what we want but let's take a look
244:24 - at the mapping right mapping wise we
244:26 - have key element key 3 with a Charlie
244:29 - right a reference to a Dom element
244:31 - called Charlie so we insert that in
244:35 - I will insert that in
244:37 - and since we insert it in then we are
244:40 - good and we move on to the next one
244:42 - right so we look at the Target we have
244:44 - km5 let's look at the Dom right now also
244:47 - key five so it's the same and that's all
244:51 - all the elements we have already we
244:53 - already go through the target results
244:54 - all the keys are there and we call it a
244:57 - day so that we have it
245:00 - um so key each update also will help us
245:03 - rearrange item right we you see that we
245:06 - take it uh took
245:09 - um the element Charlie out and insert it
245:12 - after Danny right uh this is how what it
245:17 - will happen conceptually but
245:19 - um in terms of like what actually
245:21 - happens under the hood whether we remove
245:24 - Charlie and innocent after Danny or
245:26 - maybe the other way around where we
245:27 - actually uh remove Danny and insert
245:30 - before Charlie that is uh that is
245:34 - implementation detail you don't have uh
245:36 - it could be optimized uh different ways
245:39 - in future so we're not going to say that
245:42 - that this is exactly what happened but
245:44 - conceptually what you see is that with a
245:46 - key you know that element has been
245:49 - rearranged and the only operations you
245:51 - need to do is to pull elements out and
245:54 - insert it at the right position and that
245:57 - will be it
245:58 - right so we have seen three different
246:01 - kind of operations uh adding removing
246:05 - and rearranging items and we have
246:07 - compared that with how uh it will
246:11 - how how the update operations is done
246:14 - for the each block we see that there's a
246:17 - lot of updates if you don't have a key
246:19 - and we see that if we have a kit each
246:21 - block uh the up the update operation
246:24 - should be slightly more so-called
246:26 - optimized of course uh in terms of less
246:29 - updates on the elements but of course
246:32 - you trade it off with having more memory
246:35 - consumed because you have to have a
246:38 - mapping of all the keys versus the
246:40 - elements and go through a slightly
246:42 - longer operations of comparing elements
246:44 - with the key and the mapping and
246:47 - rearrange items right so
246:49 - there you have it there you have the
246:52 - difference between uh each block and the
246:55 - key each block with visualization
247:01 - so today we are going to talk about how
247:04 - you can fetch data in svelt's components
247:08 - and how you can use a weight block to
247:11 - make that make your life easier
247:15 - so
247:16 - let's take a look at an example that
247:19 - I've prepared for you
247:20 - so over here we have a app.spel
247:23 - component which we have a list of breeds
247:28 - okay only have three
247:30 - but the reason of using uh uh so this is
247:34 - these are dog breeds right and we have a
247:37 - we have a select a drop down uh elements
247:41 - and we use each block we learn about
247:43 - each block and here we are using it
247:45 - right now right we learn and we use
247:48 - apply what you've learned
247:50 - so we uh we use each block to Loop
247:54 - through all the Brits and we create
247:57 - um an option element on every iteration
248:00 - and we use a value over here
248:03 - and we bind value right you learned that
248:06 - before if you haven't even know how to
248:08 - use it links on the descriptions to that
248:10 - previous video that we have talked uh
248:12 - discussed previously
248:14 - so you bind the value of the select
248:15 - element with this variable called
248:18 - selected breed
248:20 - so these are dog breeds and the reasons
248:23 - you are using dark bridge in our example
248:25 - is that we have this API called doc Co
248:29 - or doc API sorry docso doc API
248:33 - uh this uh
248:36 - API will return us a list of
248:40 - docs or random or it can return us a
248:44 - random dot images based on the breed so
248:47 - this is the API http.co API breed breeds
248:52 - image.com random
248:55 - so we are going to use it to fetch
248:57 - random dot images over here and so so
249:01 - let's take a look at how we can do that
249:03 - so first thing is every time when
249:06 - selected breed has changed we can call a
249:08 - function to fetch uh our dog images
249:11 - right so uh we're gonna have a variable
249:14 - called image source so this is a
249:17 - variable that will start the image of
249:19 - the dock and we're gonna display it on
249:22 - the screen so we're gonna come over here
249:23 - and say image
249:25 - source is the image source
249:29 - and of course we need the L alt which is
249:33 - a duck
249:35 - picture
249:36 - right
249:38 - sorry dog I'm gonna say dot
249:41 - and now we need to function to update
249:45 - this variable so we're going to create a
249:47 - fetch
249:48 - dot image
249:51 - and we're gonna pass in the breed
249:54 - and we're going to call the API over
249:55 - here so I'm gonna say French I'm going
249:58 - to use the window.fash API
250:01 - uh pass in the grid over here
250:04 - breathe slash images at random oops
250:14 - whoa hold on
250:16 - fetch okay
250:19 - so this will return us as a promise and
250:22 - we have a promise we're gonna say dot
250:24 - then so the promise will return resolve
250:28 - with a response so the response itself
250:31 - will have some methods and one of the
250:34 - methods that we're going to use is
250:35 - called uh Json so this will
250:39 - uh pass the body of the response and con
250:42 - as if it's a Json object and then will
250:45 - return us another promise
250:48 - and This Promise itself will have the
250:51 - body right so if you take a look at a
250:54 - doc API uh if you okay let's see the
250:57 - documentation it says that
251:00 - uh the
251:02 - API will return an object which contains
251:05 - two field right the message and the
251:08 - status which it says whether it's
251:09 - success or not so message we're going to
251:12 - come here and say so this will be an
251:15 - object right and object.message
251:20 - is gonna be the image URL so I'm going
251:23 - to assign it to image source equals this
251:26 - and we're good
251:27 - of course uh what if the API fails then
251:31 - or any of the steps that above feels
251:34 - then you will need to catch them right
251:36 - so you to catch a promise you use dot
251:39 - catch
251:39 - and this will give us an error object
251:42 - and what should we do with an error
251:44 - right for now what we're going to do is
251:47 - uh we're going to have a variable called
251:50 - has error uh and initialize with false
251:53 - so every time we have it we're going to
251:55 - say it has error is true all right so we
251:59 - can show some generic error message
252:02 - so every time we start fetching we're
252:03 - going to reset this to false so this
252:07 - will be reseted every time we fetch a
252:09 - new DOT image
252:11 - so uh come over here and we say if
252:15 - has error
252:17 - then I'm gonna say we're gonna show like
252:21 - oops
252:22 - something
252:24 - wrong
252:28 - right
252:31 - and we only show image if
252:34 - a
252:36 - if there's no error right so if else
252:39 - there's no error then we're gonna show
252:41 - the image
252:43 - but then you see that uh before we
252:45 - finish anything the image is uh
252:49 - we haven't have any image yet right so
252:51 - in this case okay we need to call the
252:55 - fetch right so uh we want to call this
252:58 - fetch dot image every time when a bridge
253:00 - change
253:01 - so we're going to use a reactive
253:03 - statements if I haven't know what
253:05 - reactive statement is again videos on
253:08 - the description
253:09 - we have done that previously so we're
253:11 - going to cover this in this video I'm
253:13 - gonna say uh fetch dot image we will
253:17 - breed
253:18 - selected
253:20 - breed so this statement will be
253:23 - re-evaluated every time when the Brit
253:26 - has changed or the fat stock image
253:29 - function has changed right this one we
253:31 - won't change it because we initialize
253:32 - once and we didn't update this variable
253:34 - so so far from what we can see over here
253:37 - is every time we change selector this
253:39 - one should be called right and true to
253:42 - that every time we change something it
253:44 - will be called
253:45 - uh but when we change something uh we
253:49 - see that
253:50 - while we're fetching we didn't reset
253:52 - this image source right
253:55 - that's why you can see that it's showing
253:58 - a previous image until the the response
254:01 - is back so what happens if we come over
254:05 - here uh
254:07 - what we should do is come over here and
254:10 - we should reset it right to now
254:13 - right so every time when you change it
254:16 - is reseted and then you see when it
254:19 - returns from the API response and then
254:21 - only you show the image of course it's a
254:24 - bit
254:26 - ugly if you show an image with no sauce
254:27 - right and usually what when that happens
254:31 - is actually when we are fetching
254:33 - something right we can have a flag
254:35 - called it's fetching
254:39 - so initialize is false
254:41 - so every time we call every time we
254:43 - start fetching we're gonna say it's
254:46 - fetching is true
254:49 - and we are done uh
254:52 - and when we are done we say I'm going to
254:55 - set it to false right and we are done
254:57 - it's either we have a
255:01 - uh resolved or we have catch right so we
255:04 - can actually do that called a finally
255:05 - this is at the end of everything right
255:10 - either we have an error or either we
255:12 - have finish uh resolve either we have
255:17 - resolved with a value or we have
255:19 - rejected the promise has been rejected
255:21 - with an error finally we will still be
255:23 - caught right so this will sets the is
255:27 - fetching to be false
255:29 - so uh now we're gonna come over here and
255:32 - say if it's fetching
255:35 - then I'm gonna show loading
255:38 - and else only we are going to show the
255:42 - results
255:43 - this is fetching
255:47 - right
255:48 - seems like the finally is not being
255:52 - oh wait it does
255:56 - right so loading and results loading and
256:00 - results
256:02 - so here you see how we can
256:06 - fetch a new dog image every time we
256:08 - change the bridge
256:10 - so this is how you're gonna fetch data
256:14 - in as well components
256:16 - but this is troublesome right because
256:19 - you you have to maintain the state of
256:21 - whether it's still fetching or not or
256:23 - whether it has error or not and and turn
256:27 - on and off that flag to signify whether
256:29 - you are fetching or you finish fetching
256:32 - but you have error or you have finished
256:34 - fetching and you don't have error and
256:36 - you have a result
256:37 - right and this is a very common patent
256:39 - and we come out with a way to write it
256:43 - easier easy more easily right
256:46 - so the way of writing it better is using
256:50 - a width or chip block so width is like
256:53 - how you would await a promise
256:58 - so talking about awaiting a promise
257:00 - right now what we do over here is more
257:03 - of like a promise chaining way of
257:06 - handling promise right an alternate way
257:09 - of doing this of or writing this let's
257:12 - say async uh wait
257:15 - using a weight
257:19 - we're gonna use a width to do that right
257:22 - so this uh this function and this
257:25 - function is going to be the same uh in
257:28 - terms of the execution but one of it is
257:31 - using a weight and one is using a
257:33 - promise chaining right uh it's just
257:35 - difference in terms of style on how
257:37 - you're going to write them so you can
257:38 - await a promise
257:40 - and every time when you await a promise
257:42 - what it returns is the results so over
257:45 - here what we get instead is the response
257:51 - and with the response we are going to
257:54 - call
257:54 - response.json which also returns as a
257:57 - promise so we await for that
258:00 - and what we end up getting or what we
258:03 - want to get is the object so let's see
258:06 - equals to oh wait over here
258:10 - and with the object
258:12 - we can assign image source equals to
258:16 - object Dot message
258:18 - which is what we have done over here so
258:21 - you can remove these two lines
258:22 - and if there's an error we want to catch
258:25 - it so we can write wrap the whole thing
258:27 - with a try catch block
258:33 - and catch it with an error and over here
258:36 - what we're going to do is call has error
258:38 - equals to true
258:40 - and with a try cash flow you also can
258:42 - have a finally
258:43 - and this is where we're gonna pass the
258:45 - finally in right so finally it's
258:48 - fetching is false
258:52 - okay so there's a reason why I try to
258:54 - rewrite this whole thing in a try cash
258:57 - block
258:57 - because
259:00 - um this is how an awit block would look
259:02 - similar to this right a width is using a
259:06 - weight it's similar to a weight in
259:08 - JavaScript
259:09 - so we overall over here what we are
259:12 - waiting for is a promise right uh these
259:16 - two are actually the promise uh we we
259:19 - have two promise to wait right we wait
259:20 - for the first to finish and we wait for
259:22 - promise to resolve in a Json object and
259:26 - we use that results right this is where
259:28 - we actually use the results so uh to
259:31 - make it clearer I'm gonna re copy this
259:34 - and
259:36 - into another function I'm going to say
259:38 - uh
259:40 - get random talk image
260:00 - okay so here I can rewrite the whole
260:03 - thing with this
260:05 - breed
260:07 - so always get random dot image breed
260:10 - give me a response okay so you should
260:12 - give me an object and object that
260:15 - message is the image source
260:18 - okay so now we are closer to how what we
260:22 - want to write in the end in a weight
260:24 - block right so let me collect some of
260:26 - the code that we are not going to use
260:28 - right now
260:29 - right so the first thing of how you
260:31 - write an awits block is you use you
260:35 - start with a hash sign and you start
260:36 - with a width and and whatever you do you
260:39 - also have to remember to end it with a
260:41 - slash and a weight
260:44 - so over here the first thing we're going
260:45 - to pass is is the promise and the
260:47 - promise is this this is the promise that
260:49 - we're going to wait for and this is the
260:51 - results right so we're gonna wait for
260:53 - this promise
260:56 - come here wait for this promise
260:59 - uh and we're not calling Bridge we're
261:02 - gonna selected breed okay
261:04 - and review for this promise and and then
261:07 - we have a den which is when this promise
261:09 - resolve what we get over here is the
261:12 - object so we can copy object over here
261:16 - and with the object what we're gonna
261:18 - show is we're going to use object a
261:20 - message as the image source all right so
261:22 - we're going to copy this
261:25 - paste it over here and we also have our
261:27 - image so you can copy the image come
261:30 - over here replace this with the image
261:32 - source
261:36 - okay
261:38 - and over here we also do a catch right
261:41 - if there's an error so cache is also one
261:44 - of the uh thing that you can have in a
261:47 - weight block so you can catch an error
261:50 - and the way of handling it is to so when
261:53 - this is true we're gonna show an error
261:55 - message right so we're gonna copy this
261:57 - and paste it over here oops something is
261:59 - wrong and now when we are waiting when
262:03 - we're waiting we show a loading right so
262:05 - this is what we're gonna show in States
262:07 - so we when we are waiting we have
262:09 - loading and when we have results we're
262:11 - gonna show the image and when there's an
262:13 - error we show up something is wrong
262:16 - so now as we change you'll see that we
262:19 - have loading okay let me commence this
262:21 - out so that you know we are not looking
262:23 - at this uh we have loading and we change
262:26 - we have loading and then we have a new
262:27 - image
262:29 - right and if you come over here and if
262:32 - we purposely change something right typo
262:34 - and what you get is oops something is
262:37 - wrong
262:38 - so uncomment this we have our dog image
262:41 - back and so you can rewrite this using a
262:45 - width block and what we end up is we can
262:47 - throw all of this away we don't need all
262:50 - of this anymore right we don't need this
262:54 - uh don't do this all of them is we don't
262:59 - have need to write them anymore just
263:01 - need a function that returns us a
263:02 - promise
263:04 - and we can call that function over here
263:06 - if you don't want you can come over here
263:09 - you can have a variable called Promise
263:12 - or any variable name you like right so
263:15 - this will get evaluated every time when
263:17 - selected has changed and can use this
263:20 - promise variable to replace this as well
263:23 - so now it is the same so which means
263:27 - that a weight can have any Expressions
263:30 - you want as long as that expression
263:33 - itself is a promise and there that and
263:36 - and you go right and every time this
263:38 - expression This Promise changes or any
263:41 - Expressions we even hear changes
263:43 - that returns a different promise then we
263:45 - will have to relay the whole logic block
263:48 - where we will show loading and then we
263:50 - resolve will show the results
263:52 - or if there's an error we show the cache
263:54 - block
263:56 - so uh let's take a comeback and take
263:59 - another look at the code over here that
264:02 - when we use an awaits block
264:04 - right so over here we instead of getting
264:08 - object a message over here like this
264:11 - using a property reference we could have
264:15 - um this structure it right we could have
264:17 - Destructor a message out of it using
264:19 - object destructuring and just assign the
264:21 - variable directly right you could do
264:24 - this as well uh and which block you can
264:27 - come over here and destructure it if you
264:29 - want
264:31 - uh it's the same
264:33 - right and then
264:36 - and the next thing I'm going to tell you
264:38 - is that some of this block
264:41 - can be skipped right the promise can be
264:44 - skipped the result can be skipped or the
264:46 - error handling the error block can be
264:50 - skipped as well
264:52 - does that mean well that means is that
264:55 - what that means is that you can skip it
264:56 - so uh to skip bits you don't even need
265:00 - uh to write that block at all you can
265:02 - come over here and say await promise
265:04 - dance and then you show the results
265:06 - immediately right there you go you can
265:08 - skip the results right or you can have a
265:10 - you can have loading but you skip the
265:13 - whole results
265:14 - right you skip the promise you skip the
265:17 - loading you can skip the results or you
265:20 - could skip the error handling as well
265:24 - right uh let's see you can just like how
265:28 - you would await promise dent
265:30 - what you can do over here is also you
265:33 - can avoid promise catch
265:36 - and do it this way as well right so in
265:40 - this case our promise has no error has
265:42 - no loading State you see nothing
265:44 - right
265:45 - so these are other forms of the obit
265:49 - block where you can have part some of
265:52 - the blocks uh be omitted because you
265:54 - don't have if if you don't have anything
265:56 - to show right uh this would lead to
265:59 - other interesting pattern for example
266:01 - you can use a width block to show only
266:03 - the loading State and when some so you
266:06 - can have a component called loading
266:08 - components and only
266:10 - only render something when the promise
266:13 - being passed to you is in a loading
266:16 - state in a pending State and whenever
266:18 - it's resolved or rejected you'll show
266:21 - nothing right so you could have some a
266:23 - component that like that
266:25 - so uh in this video we learn about how
266:28 - you can use fetch in as well component
266:31 - and we've seen by moving things around
266:34 - we slowly comes into weight and how we
266:36 - write it using async with syntax and we
266:40 - realize that actually we can have even
266:42 - easier to write an easier way to write
266:44 - it or a similar way to write it in a lot
266:47 - a weight logic block which kind of match
266:50 - the a width in a JavaScript block so
266:53 - we've seen how we can use a weight block
266:55 - and we've seen how we can omit some of
266:57 - the blocks if you don't have anything to
267:00 - show
267:03 - so today we are going to talk about key
267:06 - block not key each block is a key block
267:09 - so we've talked about a few logic blocks
267:12 - about if each await and today we're
267:17 - going to talk about key
267:19 - so what is the key block
267:22 - well have you ever have this
267:25 - scenario where you want to
267:29 - recreate elements or components when
267:32 - something has changed
267:34 - right it's not like you want to it's not
267:36 - if where you because of the condition
267:39 - you want to show a height it's more like
267:41 - if this condition is if this variable
267:43 - has changed I want to recreate component
267:46 - recreate the components or recreates
267:48 - elements
267:50 - uh sounds vague right who would want who
267:53 - wants to do that well I will show you an
267:57 - example and you understand why before
267:59 - that let me show you uh how to use a key
268:03 - block
268:04 - all right so over here I have one
268:07 - example a very simple example uh I have
268:09 - an input and I have a buttons so input
268:13 - is something I can type and buttons is
268:15 - when I click it will increments the
268:17 - count
268:18 - sounds simple right okay so what if
268:21 - whenever the count changes I want to
268:24 - recreate the input
268:27 - okay don't ask me why but what if I want
268:30 - to do this right so if I want to do this
268:32 - what I can do is I can come with here
268:35 - and say key
268:36 - so every time when you have a logic
268:38 - block you start with the curly brackets
268:41 - and hash sign so this logic block is key
268:43 - so we're gonna save this and we're gonna
268:45 - end with key
268:47 - and uh in the logic block we say key and
268:51 - then we write an Expressions so this is
268:53 - uh kind of like your reactive
268:56 - declaration or reactive statement right
268:58 - you can put in any kind of Expressions
269:00 - uh you uh you treat it like like a
269:04 - reactive statement so any variable
269:07 - within that expression changes this
269:10 - whole thing will be re uh created so the
269:14 - input will be recreated so I'm going to
269:15 - pass in count so every time when I click
269:18 - uh the number increment the number and
269:20 - when I change count this input box is
269:23 - recreated so how do you know it's
269:25 - recreated uh when I type something right
269:28 - and I click this you see that when I
269:31 - type in is it's gone right actually I
269:34 - didn't really I didn't go and change the
269:36 - value of the input but rather that
269:39 - inputs the previous input with all this
269:41 - value is thrown away and a new input is
269:45 - created in replace of uh replacing this
269:49 - current input right so when I click I
269:52 - create a new one and replace it that's
269:53 - why you don't see anything
269:55 - so this is the key block let me clarify
269:58 - a bit uh if uh when so the key block
270:03 - will whenever the expression has changed
270:06 - and the value of that expression is
270:09 - different so it depends on two
270:11 - conditions right first is whenever the
270:13 - expression is changed it will be kind of
270:15 - you will re-evaluate the expressions
270:17 - like your reactive statements and to
270:20 - compare the result of the expression and
270:22 - whenever the result which is the value
270:24 - of the expression is a change then the
270:27 - content inside inside the key block will
270:31 - be recreated right all the so if you
270:34 - have input here the input will be
270:35 - recreated if you have a few divs or
270:38 - contents for example here I have another
270:40 - count and a divs uh all this will be
270:44 - recreated
270:46 - so what what is so good about this uh
270:50 - like what is the purpose of having this
270:51 - uh key block right so one thing uh I can
270:55 - show you which is based on something we
270:58 - haven't learned yet but I'm gonna show
270:59 - you which is if which is to add
271:03 - transitions so transitions so let me do
271:06 - like a fade transition
271:12 - so for transition uh transition is like
271:15 - an animation where it it applies to
271:18 - element when it is created and added to
271:21 - the Dom or when it is destroyed or
271:23 - removed from the Dom right so this
271:25 - animation will play uh when it comes in
271:27 - or you will play when it goes out so I
271:30 - can add an animation to fade in when uh
271:34 - when this div is is is created so now
271:38 - whenever I increase uh the number over
271:40 - here you see that this div is destroyed
271:44 - and created right because discount value
271:46 - of count is changed has changed so this
271:49 - div will be recreated every time and
271:51 - therefore you see that every time when
271:53 - it recreates you replay this uh fade
271:56 - transition that's why you can see that
271:58 - it's it's come fading in every time when
272:00 - you change the value
272:02 - so this is probably one of the use cases
272:05 - that you would want to use with key but
272:08 - there's another case where I feel it's
272:10 - even
272:12 - um
272:13 - it's not just about animations there are
272:15 - cases where you want to recreate
272:16 - components so over here I prepared
272:20 - another example where over here you can
272:23 - see that this looks like a chat app
272:25 - where you can click on different users
272:29 - and you can type message try to chat
272:31 - with the person right right now you're
272:34 - talking to Charlie or Ben or Dawson
272:36 - right so of course you see but you over
272:40 - here you see that does not really work
272:42 - over here although we have a list of
272:44 - names and whenever we click on one of it
272:48 - we will change the selected friend right
272:50 - I use each block I use a radio box to
272:54 - buying group we've learned that before
272:57 - uh and we right over here we pass the
273:01 - selected friend to this component called
273:02 - chat
273:04 - so in a chat component what we have over
273:07 - here is a
273:10 - um yeah we we have a props called friend
273:13 - and we read out the name uh we have
273:17 - chats and we try to load the chat what
273:20 - we don't what we didn't do over here is
273:22 - that whenever a friend change we
273:24 - actually have to uh reactively update
273:27 - all the different inner states right for
273:29 - example over here the name name is
273:32 - initialized whenever we create a chat
273:34 - component and whenever this props change
273:37 - we actually never update this variable
273:39 - name that's why you see talking to name
273:42 - is always the same person even if I
273:44 - switch to different people so I can I
273:47 - can use reactive uh statements that
273:50 - already declare the name every time when
273:52 - I change right I'm talking to band I'm
273:54 - talking Alfred I'm talking Dawson all
273:56 - right same thing goes with messages over
273:58 - here when I type something what you
274:00 - expect is whenever a switch to different
274:02 - users you want to
274:05 - um
274:06 - I'm going to clear this uh this this
274:08 - import input over here right so this
274:12 - input uses a buying value to bind value
274:14 - of the input to the variable called
274:16 - messages which is initialized to be
274:18 - empty string makes sense fair enough but
274:21 - now we kind of have to you know whenever
274:24 - a name change name exchange we want to
274:28 - initialize something right so we create
274:31 - a function called init
274:33 - and or or reset right we want to reset
274:37 - uh so we create a function called reset
274:40 - let me let me write it over here reset
274:43 - so I reset what I reset do is it will
274:45 - send message to an empty string so
274:48 - hopefully when I type something and I
274:50 - switch to different user it will reset
274:51 - by
274:53 - setting an empty setting message to
274:55 - empty string right and as you can see
274:58 - over here also one thing that is
274:59 - important is the chat message where when
275:03 - I switch to different users I need to
275:05 - load a different uh
275:09 - a lot of different chat messages so I
275:12 - need to come over here uh instead of
275:14 - calling it over here I need to
275:17 - paste it in the resets right it's it's
275:19 - kind of like reset whenever you change
275:21 - the name
275:22 - right it sounded weird when you change
275:24 - okay maybe when you change friend
275:26 - whenever the friend has changed we'll
275:29 - call reset right although we're not
275:31 - gonna for now we are not doing anything
275:33 - yet but probably we will use the friend
275:36 - uh okay maybe we use a friend's name
275:40 - uh to to load the chat
275:44 - so when I switch over to band you see
275:47 - that it's loading uh a band's message as
275:50 - usual Dawson you'll see that it's
275:52 - loading a Dawson's message
275:55 - but if I switch quickly
275:58 - you see that it loads Charlie's and then
276:01 - Benz and Alfred and then Ben and because
276:03 - it's the same components over here uh
276:06 - when when and and our logic is quite
276:08 - simple we just call this load chat every
276:10 - time when we change the friend
276:13 - and whenever it's come back it will
276:15 - update the chats right so uh you can see
276:18 - if I change quickly I'll update the load
276:21 - chain will be fired a few times
276:22 - subsequently very fast and whenever it
276:25 - comes the first one comes back to update
276:27 - the chance and then the next one will
276:28 - come and updates right uh so this one
276:31 - whenever we change when we call this
276:34 - function every time we we kind of have
276:36 - to actually cancel the previous one
276:38 - before we so it's like a reset your
276:42 - reset we need to cancel previous ones
276:44 - before we
276:46 - um
276:47 - load a new one so this is something we
276:49 - need to do as well so there's a lot of
276:52 - things we need to do like reset things
276:54 - whenever we switch uh to a different
276:56 - friends when you're looking at a chat
276:58 - app and actually you know what there's a
277:03 - very simple way of doing it right we'll
277:06 - learn about key and I say that whenever
277:08 - the keys expression has changed
277:11 - you will recreate right you destroy the
277:14 - elements and recreate elements or
277:15 - destroy components and recreate the
277:17 - component instance so this is actually a
277:20 - perfect
277:21 - scenario or use case to use a key
277:25 - um I let me let me undo all this right
277:27 - let me undo all this but I say let's
277:29 - name equals a friend's name uh let's
277:32 - message to be an empty string and then
277:36 - we call a load chat right we call a
277:38 - little chat over here so this is a
277:40 - perfect simple component where we don't
277:44 - have much Logics over here uh everything
277:46 - is is uh the initialized over here at
277:49 - the start and all the states are
277:52 - initialized to the style we don't really
277:53 - handle whenever like we don't really
277:55 - care whether a friend handle the case
277:58 - where a friend has changed and just
277:59 - treat that we just assume that it's not
278:01 - going to change right in this component
278:03 - so so the logic within the component is
278:05 - much simpler and when we come over here
278:08 - we can actually use a key block
278:12 - to say that
278:21 - whenever the friend has changed
278:24 - we want to recreate this chat component
278:27 - right whenever it's changed we recreate
278:30 - so things that you initialize whenever
278:33 - it uh will be kind of re-initialized
278:36 - because you you destroy this component
278:38 - and create a new one right definitely
278:39 - you will have a new brand new component
278:42 - with everything initialized and initial
278:44 - initial States right so your code over
278:47 - here is much simpler you don't have to
278:49 - care about whenever friends change you
278:51 - want to do something you can initialize
278:53 - all the things you want and the thing
278:55 - that you need to do is just just throw
278:57 - it away and recreate a new one right so
278:59 - the state over here that we in this
279:01 - example is much it is fairly simple
279:03 - right only a message fetching some data
279:06 - and that's all but if you have a
279:09 - slightly more complex
279:11 - more complex components where you have
279:15 - more
279:18 - uh in more states that is uh defaults to
279:22 - different kind of values based on
279:23 - different kind of props and things like
279:25 - that uh an easier way for you to is just
279:27 - to destroy the component and recreate if
279:29 - you want to reset the whole state right
279:31 - rather than having a function that tries
279:33 - to figure out what to reset and what not
279:35 - and handle all the things right so
279:38 - that's why there's this logic block
279:41 - called key which really helpful when you
279:44 - want to destroy uh whatever elements or
279:48 - components within a block whenever an
279:51 - expression the value of an expression
279:52 - has changed and this is useful when you
279:55 - want to reset everything within the
279:57 - component or elements or you you just
280:00 - want to recreate elements because you
280:02 - know that you have an uh you have
280:05 - transitions applied to elements so that
280:07 - they can replace
280:08 - or whenever it's coming in
280:13 - So today we're going to talk about
280:14 - context so what is context well context
280:18 - is a way for a component to pass data
280:22 - to all its children components always
280:26 - child components all this grandchild
280:29 - grandchildren in plural grandchildren
280:31 - children any component that is within
280:35 - this parent component will get the data
280:38 - right it's a way for you to pass the
280:40 - data to all of them
280:41 - so if you pass data from what we learned
280:44 - previously is you can pass by props
280:46 - basically you have to pass one by one
280:48 - but context is a way that you can set up
280:50 - and all these children components or its
280:53 - grandchildren components will receive
280:55 - the data
280:56 - so to see how we're going to do this how
280:58 - we're going to use this context let's
281:00 - take a look at an example that I've
281:02 - prepared for you
281:04 - so over here
281:07 - I have app.spel
281:09 - which uh shows a parent component so
281:14 - this parent component is what we're
281:15 - going to focus on right this parent
281:18 - component has a child one child
281:22 - um and this parent component will shows
281:25 - a the child and pass the color called
281:28 - red
281:29 - right so now we have a child component
281:32 - which has two grandchild
281:34 - and to so to pass the data down we have
281:37 - to pass this color to when child a and
281:40 - grandchild B because we need both of we
281:43 - need to color in both of the components
281:46 - right grandchild a uses the color to
281:48 - change the color of the text so as you
281:50 - read when child B use the color to show
281:54 - data right show show the color as a text
281:58 - so you can have uh as many components as
282:01 - you want over here right say I'm gonna
282:03 - have another child child two
282:06 - which uh I'm gonna create right now
282:10 - but let's color and I'm gonna say ciao
282:14 - two
282:15 - the color
282:19 - and maybe add some weird text over here
282:21 - and we're going to import child too
282:24 - so come over here and say import child
282:27 - two from ciao to
282:31 - and I'm gonna use child two and also
282:36 - need to pass in the color red
282:39 - right invalid tag name ciao hold on what
282:43 - is okay child two ah okay this is
282:47 - uh okay
282:50 - so you see the parents so once okay let
282:54 - me I I have two color rates over here
282:57 - let me just make it nicer I'm gonna
282:59 - declare a color called red
283:01 - and as you can see if I want to pass
283:03 - down the color
283:05 - I need to do it one oh on All My
283:09 - Children components and for each of my
283:11 - children if I if it has a grandchildren
283:14 - I will have to pass it down to each of
283:17 - them as well so that uh so you can see
283:20 - over here let me adjust this you can see
283:22 - over here a parent has two children
283:25 - child and child two and two
283:28 - grandchildren grandchild one a
283:30 - grandchild a grandchild B and you can
283:33 - see we have to pass the color down layer
283:36 - by layer to each of the components
283:41 - so
283:43 - alternate of doing this is to use get
283:46 - context and let's take a look at how we
283:49 - can use get contacts to do this instead
283:51 - of having to pass down color level by
283:54 - level
283:55 - first thing first is I'm going to import
283:58 - get contacts
284:00 - from svelte
284:03 - and I am going to
284:05 - sorry set context so the parent will set
284:08 - the context and all the child or
284:10 - grandchildren that needs this value will
284:13 - will use get context to get it from them
284:16 - so I'm going to call set context
284:19 - and I'm going to pass in two parameters
284:21 - so set context takes in the first thing
284:24 - is a key and second thing is the value
284:28 - right so you can actually pass in any uh
284:32 - you can have multiple contacts for one
284:34 - component and it depends on the key of
284:39 - uh what value you want to pass in right
284:42 - so when you call get context in the
284:44 - child you will get contacts with the
284:47 - same key so they can get the same
284:49 - uh some key of the context right so over
284:53 - here since we're going to pass colors
284:55 - we're going to name it color as the key
284:58 - of the context and the value of it would
285:00 - be the color rate
285:02 - all right so I don't have to do this
285:04 - anymore I don't have to pass Carl to all
285:07 - my child
285:09 - right so let's see ciao I I don't really
285:12 - need color over here as well so can I
285:14 - remove this and I'm going to pass it to
285:17 - grandchild a
285:19 - because you get it from the context
285:22 - for childhood who we actually need color
285:25 - right so the way we get it is we're
285:27 - gonna say Imports gets context
285:30 - from svelt and we're gonna get contacts
285:34 - I'm gonna pick in the same key so the
285:37 - parent use color so I'm going to use the
285:40 - same key over here
285:42 - so um
285:43 - so they will return me the color so I
285:46 - can use the color right now right so you
285:49 - can see it's updated to color to red
285:51 - so um in internally context is like a
285:55 - map and this is the key to the map which
285:59 - means you can pass in anything uh that
286:02 - you can pass as a key to a map right so
286:06 - um if you worry about getting conflicts
286:08 - then probably you can pass you can you
286:10 - can create an object right and and pass
286:14 - and use that object for example I can
286:16 - come over here and say a context
286:20 - I can create a
286:22 - key
286:24 - so this is
286:26 - a
286:28 - an object that you created and you can
286:31 - import this and use this key in your
286:36 - contacts
286:37 - right so because
286:39 - um
286:45 - so because the data itself is the the
286:48 - key itself is by reference because it's
286:50 - a map it depends on the reference of the
286:52 - key then you can instead of worry that
286:56 - maybe you know what if someone else have
286:58 - this context name color will I get
287:01 - conflict and this way you kind of can
287:03 - ensure that this key will always be
287:07 - unique right because this uh if you if
287:11 - Because unless you get a hold of the
287:13 - reference of this object you'll never
287:15 - create an object that has the same
287:16 - reference as this let's kill it over
287:19 - here so I can actually come over here
287:21 - and do this instead
287:23 - right uh now you see it's not available
287:25 - but I can come over here and import key
287:31 - from Context
287:33 - and replace this you can see now I I can
287:37 - read it out again right setting with the
287:39 - same key and this key is an object
287:41 - reference and I'm going to get this from
287:43 - there so I can and as soon as as long as
287:46 - I ensure that the key reference is is
287:49 - unique then I can make sure I I
287:53 - basically I'm sure that I don't get
287:55 - conflicts with naming keys with your
287:57 - contacts right so let's let's finish
287:59 - this let's come over here grandchild a
288:01 - and you know import get from the context
288:04 - so actually I can copy these two lines
288:06 - these few lines
288:07 - which is to get context import get
288:09 - context from svelt and then import the
288:12 - key and then I use get contacts with the
288:15 - key to get the color
288:17 - all right let me copy this over for
288:19 - grandchild b as well replace this you
288:22 - can see now grandchild B is a
288:26 - also get the value rate
288:29 - all right so all the children components
288:32 - grandchildrenal components will get the
288:34 - same value from the context
288:37 - right now I'm going to create another
288:39 - component called a parent
288:43 - 2 that's felt
288:45 - and in this parent two component I am
288:49 - actually going to import this a
288:51 - grandchild a grandchild a from Grand
288:59 - ciao
289:01 - and I'm gonna show you why in the moment
289:04 - but I'm gonna come over here and
289:07 - uh
289:08 - do this and I am going to import parents
289:11 - two
289:13 - in the apps that's felt
289:23 - so grandchild a okay the now you okay so
289:27 - the grandchild actually gets contacts
289:31 - and from the parent
289:34 - and use it as a color for the text right
289:37 - so the context over here for parent uh
289:40 - this parent is that the context value of
289:43 - this key is the value for this context
289:46 - is red right so all grandchild a gets
289:49 - the value called red and then set the
289:51 - color as red
289:52 - but the grandchild in these parents too
289:56 - uh receives nothing in the context so
289:59 - most likely what you see if you try to
290:01 - console out the color
290:06 - you'll see that one is red and one is
290:09 - undefined because you didn't Define the
290:12 - context uh within this for for this
290:16 - component uh grandchild a right this
290:18 - grandchild a lives within parents too
290:20 - and lives within which lives within app
290:23 - and app does not set any contacts parent
290:25 - 2 does not set any context so it does
290:28 - not get any value from the context
290:30 - so we can actually come over here and
290:33 - set it up so we're going to say import
290:35 - sets contacts
290:38 - from svelt
290:40 - I'm going to say set contacts okay I
290:43 - need the keys I'm going to import the
290:44 - key as well import
290:46 - key
290:47 - from
290:49 - context
290:51 - key
290:52 - and I'm going to say blue
290:55 - right as soon as I do this you can see
290:57 - this screenshot a which is in parents 2
291:00 - which sets up the context which value is
291:04 - blue and then now I get it and I can't I
291:07 - install it as blue color right so one so
291:11 - it depends on where grandchild a is
291:13 - located whether it's within the context
291:16 - of the parents the first parent then you
291:18 - get color red which in the parents two
291:20 - you get color blue
291:23 - and context itself can't override each
291:26 - other so say for example
291:29 - the in this example we see that parents
291:32 - creates a context right uh which is
291:36 - color red and now I have child which I
291:39 - have grandchild a and grandchild B right
291:41 - let's let's also import
291:45 - uh grandchild a
291:50 - okay
291:53 - in the uh in the channel 2 I'm going to
291:57 - use it over here
291:59 - so this is still within the context of
292:01 - the parents which which has the color
292:04 - red right but what if in the child who
292:08 - I'm going to set a new context here I'm
292:11 - gonna import this
292:13 - okay I'm gonna set a new contact with
292:15 - the same key right so although this uh
292:18 - grandchild uh this child 2 receives a
292:21 - context from the parent which is the red
292:23 - color but from this channel 2 on below
292:27 - it will set a new context for all the
292:29 - children and grandchildren and this
292:32 - context is going to have a value called
292:34 - Green
292:37 - right as soon as you do this all right
292:40 - let's let's
292:42 - all right it does not matter the order
292:44 - but as soon as you do this you can see
292:46 - that actually the order mentors okay
292:49 - let's just do this you see that
292:51 - everything below
292:53 - color is going to be green right
292:56 - grandchild a is is is Green Oh although
293:00 - it's within parent
293:02 - B uh sorry parents the first parent
293:05 - right it says read but then parent
293:08 - inside have a child to child tools
293:10 - that's a context called Green which
293:12 - overwrites it right so how do you think
293:14 - about this is actually you you try to it
293:17 - it matters on where grandchild is being
293:20 - created so it looks up to the parents
293:23 - right so the parent has uh the parent
293:26 - has one A Child two child who has
293:28 - contacts then you will use that one
293:30 - right if it does not you go up again one
293:32 - level and see parents parents as
293:34 - contacts yes and then you use the parent
293:35 - one right so as soon as it finds the
293:38 - value then it will be override
293:40 - overridden right
293:42 - and apparently the order of set contacts
293:45 - and get context matter
293:47 - right so I think in in terms of
293:49 - implementation it's a very simple map
293:51 - right so if you set the value first for
293:54 - this context then any time later on when
293:57 - you're trying to get context from this
293:58 - mapping it's actually being uh
294:01 - overlapped overwritten right so now you
294:04 - get contacts it's the value called Green
294:06 - rather than red but if you get first and
294:09 - then you set it
294:10 - later on then you get uh this still gets
294:14 - the one from the pattern which is
294:15 - straight and then this will over
294:16 - override it and become green
294:19 - right but this will only override for
294:20 - all these children right it does not
294:22 - matter if you come over here and say uh
294:25 - grandchild
294:27 - sorry I think it should be come over
294:29 - here and you know the order of child one
294:33 - or two uh it does not matter right
294:35 - because uh this will only override for
294:38 - itself and it's all its children right
294:40 - so whether it's it's sibling it's uh
294:43 - whether the siblings whether you you
294:45 - override the context first for yourself
294:47 - and then you know whether does it affect
294:49 - sibling well it does not
294:53 - so here you go having a context where
294:55 - you set up a way to pass data to all
294:58 - your children and grandchildren right
295:02 - um there there's a few rules on how you
295:05 - use this basically first is that set
295:08 - context and gets context has to be
295:11 - called during component initialization
295:13 - meaning right here right you can't call
295:16 - it later on for example sets timeout
295:20 - you can't do it like this right so this
295:23 - is similar to a common life cycle
295:26 - methods you can't call it outside
295:28 - component initialization because this
295:31 - function itself needs to know what other
295:32 - com what is the component that is
295:34 - initializing right now and then set the
295:36 - context to that component so you can't
295:39 - do it inside set timeouts same thing
295:41 - goes with great context right so that is
295:44 - rule number one and rule number two is
295:47 - that it's not really a rule but it's
295:50 - it's if you take a look at here you get
295:52 - context this function will be only
295:55 - called during initialization meaning
295:57 - uh this value will only be read out
295:59 - during initializing this component right
296:03 - meaning again meaning if this value is
296:06 - like a state where you change it
296:08 - dynamically it won't reflect over here
296:12 - right this this you reach up once so uh
296:16 - it won't change later on if you change
296:18 - the value of the variable in the parent
296:24 - today we're going to talk about how you
296:26 - can communicate through the context
296:29 - in the previous videos we talk about how
296:31 - we can use context to sort of pass the
296:34 - data to all your descendants all your
296:38 - children's or your grandchildren's
296:39 - components and today in this video we're
296:42 - going to talk about a more in depth
296:45 - about how to use context to communicate
296:48 - between the ancestor the parents and all
296:51 - its descendants
296:53 - right so today we're going to focus on
296:55 - two directions of the communication
296:58 - first is how you can send data from the
297:01 - parents to all its descendants and of
297:05 - course we're going to talk about how you
297:06 - can from all its children's and
297:08 - descendants send data updates the parent
297:11 - right so we focus on two-way
297:13 - of course the first way from parents to
297:16 - all its descendants we kind of have seen
297:19 - how we can do that in the
297:22 - um
297:23 - in the last video when we talk about
297:25 - context but there are some more things I
297:28 - want to add on so let's take a look at
297:31 - this example over here
297:33 - just my mic
297:36 - so in this V in this example we
297:41 - have an app component
297:45 - and within the app component we have a
297:47 - parent component which uh shows two
297:50 - children component one child one and
297:53 - child two uh in terms of code they are
297:55 - pretty much the same it's just that you
297:58 - know uh just want to create more
298:00 - children over here I could have
298:02 - um actually on a hindsight I could have
298:04 - just used the same component and that
298:06 - does not matter actually
298:08 - uh nonetheless just leave it here
298:10 - nonetheless uh what we can see over here
298:12 - is
298:14 - we want to pass the color the color
298:16 - which is red we set context over here we
298:19 - pass down the color from the app and you
298:22 - see that we don't pass it through the
298:23 - parents so the parent does not know
298:25 - about the color at all it does not pass
298:27 - like from children to all these
298:29 - grandchildren but rather we set this
298:31 - context in app thoughts felt and all its
298:34 - descendants for example in child one and
298:36 - two we can actually get the color by
298:38 - calling get context
298:39 - over here we can get the color
298:42 - um color and now you can see that the
298:45 - color is red so you you see the red
298:48 - color
298:49 - right so all this set context and get
298:52 - context is called during the component
298:56 - initialization let me reiterate it's set
299:00 - context and get context it's being
299:01 - called in the component initialization
299:04 - meaning once this is initialized uh you
299:08 - set you call this set color now right
299:11 - now uh you basically set this color to
299:14 - context right uh later on if you change
299:16 - it anymore it does not matter right you
299:19 - only call this function once this is a
299:21 - variable uh and you pass in a value so
299:24 - you pass by value because it's a string
299:26 - is passed by value this value is already
299:29 - in the context there's no way they can
299:31 - change this value anymore unless it's an
299:34 - object you can't change the object but
299:36 - you can change its property right and
299:40 - over here the same thing as well in the
299:42 - ciao once is being uh initialized where
299:45 - this function get context is called you
299:48 - read this value out from the context you
299:50 - have this color and that's it you can't
299:53 - do anything you can't uh basically this
299:57 - this is done right you you read this
299:58 - value anything change in the context
300:01 - somehow by whatever means it does not
300:04 - matter anymore because you read this
300:06 - value during initialization and that's
300:08 - it right you don't call this function
300:10 - anymore right if this color is a value
300:14 - it's like a string number uh or Boolean
300:17 - then that's it if it's an object the
300:20 - object reference does not change anymore
300:22 - but the property could have changed uh
300:25 - you could have maybe set timeout or
300:27 - interval to to constantly read the value
300:30 - and see whether it's changed right it
300:32 - could change because you can change you
300:34 - can mutate an object a property value
300:37 - so
300:39 - uh and that's what we are going to do
300:41 - actually because right here I have an
300:44 - input call which is a type of color
300:45 - which is a Color Picker and I want and
300:48 - binding is a variable called color so I
300:49 - want to change the color
300:52 - I change the color but it does not
300:54 - reflect over here
300:56 - right so there's two reasons first is
300:58 - this set context is set is called once
301:01 - and that's all right so if you
301:04 - um try to change the color it does not
301:05 - matter to this anymore
301:08 - so one way I can do is a probably I
301:12 - would say two ways one is
301:15 - maybe pass an object so I'm gonna say uh
301:20 - uh a clear object called color object
301:24 - and the value of the color J is called
301:27 - color I'm gonna say rate over here
301:32 - right so I pass this object down
301:35 - and when I bind I actually use color
301:38 - object
301:40 - dot color
301:42 - right so when I change I actually change
301:45 - the color object the color okay I need
301:48 - to change this as well
301:51 - so you see that this is this is changing
301:54 - on real time
301:55 - and then children I can read out and
301:58 - this is an object right so what it means
302:02 - is that I'm gonna say color this this
302:05 - guy context returns me an object
302:09 - and I can get the color
302:12 - from color object dot color
302:16 - right this gives me the color so I can
302:19 - change
302:22 - um still it does not reflect but in
302:25 - appearance I have a checkbox that I can
302:28 - show and hide component if I unhide and
302:32 - I show again now you see these values
302:34 - updates uh there's no updates actually
302:37 - because you you show you hide it you you
302:40 - destroy the component and when you show
302:42 - you actually recreate a new one and give
302:44 - you a new component when you initialize
302:45 - it reads from the context and you
302:47 - realize that okay this object value okay
302:50 - Char one this object value uh the
302:54 - property the object itself the reference
302:56 - of the actual cell is still a Sim but
302:58 - then the property value is different
302:59 - right now you read a different value
303:01 - from this property and that's why you
303:03 - see a different color
303:05 - actually why I'm gonna remove this file
303:08 - because I'm gonna change one for now so
303:10 - just
303:13 - but hope you get this idea right so you
303:16 - you can change the object and now you
303:19 - get it updated but if what if I want to
303:22 - change this color and I want to see the
303:26 - sorry
303:27 - I wanted to I want to see the color
303:30 - change on real time as well
303:32 - well there's a few ways you can do one
303:35 - is um in future videos you'll probably
303:37 - see this I'm gonna talk about store and
303:41 - you can actually pass a store
303:43 - over the context and you can have a
303:46 - reactive context via the star
303:49 - right without learning about that we can
303:52 - create like a simplified version of it
303:54 - which is
303:56 - um
303:57 - I can say that let me think
304:01 - okay
304:04 - I can passive create another function
304:08 - and this object is not just about the
304:13 - the color itself I can also have my own
304:16 - methods which is say I'm gonna have this
304:20 - listener kind of mechanism where all my
304:23 - children can list register itself to
304:26 - listen to it so that okay so we're gonna
304:28 - add uh listen let's say listen to color
304:32 - change
304:37 - all right so they can listen to it and
304:39 - when the color change so that they can
304:41 - notify it and read the latest value out
304:43 - of it right so I'm gonna pass in a
304:46 - function and here I'm gonna
304:48 - um maybe keep a list of all the
304:50 - listeners so I'm gonna create a set new
304:53 - set
304:55 - uh this set is going to call color
304:59 - listeners
305:01 - so I can come over here and add the
305:04 - function in
305:05 - and every time when I change the color
305:08 - right every time I change I probably
305:11 - will have to notify them so I can come
305:13 - over here and say uh color object
305:17 - uh dot color
305:20 - so this is a reactive statement every
305:22 - time this cloud has changed I would have
305:25 - to
305:26 - execute this statement so this
305:28 - statements what I'm going to do is I'm
305:30 - gonna say a color
305:34 - listeners.4 h
305:37 - listener and maybe I'm gonna just call
305:41 - this with the new color
305:43 - right this is a
305:48 - so I'm gonna look through the listeners
305:50 - and call each of the function with the
305:52 - latest color right whenever the color
305:53 - change so this is a reactive statement
305:55 - and when does it uh execute re-evaluated
306:00 - it will be Revisited by when all of
306:02 - these variables has changed right so
306:04 - what are the variables over here color
306:05 - listeners is one color object is one
306:08 - listen is not because you create a
306:10 - listener over here and that's all right
306:12 - so colorlessness has changed our color
306:14 - object exchange we will um
306:17 - uh revalid this statement but because
306:21 - um over here we only call them add
306:23 - method so add method does not cause a re
306:27 - and method is neither like assignments
306:30 - or updates uh
306:32 - Expressions so basically this statement
306:35 - over here
306:37 - um
306:38 - will not Trigger
306:40 - re-render or revalue this statement
306:43 - right but that is okay that that is uh
306:47 - what we want actually as well uh so
306:49 - let's after once we implement this
306:52 - listen color change gonna come over here
306:55 - and say in
306:57 - well let's see if the color object has
307:00 - another method right at listen to color
307:04 - change and this can pass in a function
307:07 - and the function itself
307:09 - returns us a new color right new color
307:14 - so what we can do with this is probably
307:16 - we can set colors length so color equals
307:20 - to new color
307:24 - let's see oh this is color object
307:28 - so as you can see now if I change my
307:31 - color
307:33 - you can see the color has changed over
307:35 - here as well right because every time we
307:37 - change the color we'll call The Listener
307:40 - and you can
307:43 - get notified when the new color is
307:44 - changed and we update the color States
307:48 - within this child one component right so
307:52 - um when you pass data down it's only set
307:55 - up during the initialization right so
307:57 - the value that you pass in will be there
308:00 - during this like when you it will be set
308:02 - during initialization when you call set
308:04 - context right so if you pass a string a
308:07 - Primitives like string numbers booleans
308:09 - then they will be
308:11 - there will be it you can't change it at
308:13 - all but if you pass in a more complex
308:17 - objects like objects or arrays then
308:21 - you can still mutate them although you
308:23 - can't change the reference in the
308:24 - context anymore but you can still mutate
308:26 - them right and then during on the other
308:29 - hand get contacts will be called during
308:30 - initialization so
308:33 - um if you if you destroy and recreate
308:35 - you will you call this function again so
308:37 - if you pass in uh objects during uh from
308:41 - a context then if you mutate the object
308:43 - when you call when you initialize the
308:46 - object a component again you probably
308:48 - read the latest value of the object
308:50 - right but you still read the same object
308:52 - reference right that you can't change
308:54 - that anymore
308:55 - so if you want to uh so-called
308:59 - reactively updating the context value
309:01 - and get it updated from the child then
309:04 - you probably have to set some sort of uh
309:06 - pop sub mechanism where you have a
309:09 - publisher of changes and listeners
309:12 - subscribers or listeners to subscribe to
309:14 - the changes right over here we kind of
309:18 - manually implement this and there's a
309:20 - lot of things that we didn't handle for
309:22 - example we didn't actually uh do a
309:24 - cleanup so this listener will only
309:26 - listen a function and we didn't clean up
309:28 - right if you uh if we
309:34 - a few times actually create a multiple
309:37 - of child ones functions over here and we
309:39 - actually didn't which are added to this
309:41 - set and we didn't really remove them at
309:43 - all and this causes some issues like
309:46 - memory leaks uh which can be easily
309:49 - handled if we are using store we should
309:51 - be covered in future videos right stay
309:54 - tuned for that
309:56 - so we've seen how we can use get
309:57 - contacts and contacts to pass data from
310:00 - parents to the child right now we're
310:03 - gonna take a look at a different
310:05 - direction from children from all the
310:07 - grandchildrens and children from
310:09 - descendants to send data all the way to
310:11 - the parents and usually when you want to
310:13 - send data from a child to parent in
310:16 - normal way what you do is you use a
310:19 - callback or you event listeners or
310:22 - callback functions right that is how you
310:24 - pass data up if the parents want to know
310:26 - something from you you want to pull
310:27 - something from you maybe they can use
310:29 - like a binding to binder one of your
310:32 - props to a variable to the parents
310:34 - variable so they can reach so that you
310:36 - can update this uh parents States from
310:40 - the props from your props but the other
310:42 - way where you want to actively pushing
310:44 - data from the children to the any
310:47 - children to parents usually you uh you
310:50 - still you you're taking a function where
310:52 - of course you still have to get the
310:54 - parents to pass in the function but then
310:55 - you can call all this function anytime
310:57 - you want to identify the parents that
310:59 - hey I have something has changed
311:01 - so this is what I did for the counts so
311:05 - in in child one I have a buttons which I
311:10 - use a component event and also about
311:12 - forwarding events when you don't know
311:15 - about forwarding events from components
311:17 - probably you can watch my previous
311:20 - videos so links in the descriptions as
311:23 - well so this is to forward the event I
311:26 - followed a click event to the parents
311:28 - and parents forwards click events to
311:30 - each parent which is the app which
311:33 - listens to this event and registers
311:36 - these events to on click so every time
311:38 - when click happens or increment accounts
311:41 - so when I click any of this button it
311:43 - will increment account
311:46 - so this is this is a lot of things to
311:48 - set up right uh child have to dispatch a
311:52 - component events to the parents parents
311:54 - would just listen to it and dispatch and
311:56 - to the app app has to do it as to
311:59 - register it right if you add a few more
312:01 - layers to the parents each of them have
312:03 - to kind of forward the events upwards
312:05 - which is a bit tedious
312:08 - um it's just it's not like it's a bad
312:10 - idea maybe you you want it that way uh
312:13 - there is reasons where you want to do a
312:15 - component event forwarding but in this
312:19 - case we actually don't want it in this
312:21 - case we want a very simple setup where
312:24 - um I want my I want to create I want all
312:28 - my children to tell me if they want to
312:30 - click something right so what I can do
312:33 - is
312:34 - um I can set set up a context as well
312:37 - okay instead of context
312:39 - call click
312:42 - and I can pass in this on click function
312:44 - over here
312:45 - right so this what this means is that
312:47 - any children Within Me
312:50 - can read this function called on click
312:52 - via this context called click
312:55 - and they can call them call this
312:57 - function anytime they want
312:59 - so um with that I'm going to come up
313:02 - with you in a trial and I'm going to say
313:04 - I'm gonna come over here and
313:06 - get that function right so on click
313:10 - uh get contacts click
313:15 - and I pass this function to my own click
313:19 - okay and now I can actually remove the
313:22 - parents component for event forwarding
313:26 - can also remove the event listeners from
313:28 - over here
313:30 - and let's take a look at what we have
313:33 - right so we get the click function for
313:36 - context and we call it right and lo and
313:40 - behold it still works right now you
313:42 - don't have to care about how many layers
313:44 - in between all the children or
313:46 - grandchildren all your descendants can
313:49 - actually read these functions that you
313:52 - want to call back and call them at any
313:55 - time they want and you can actually pass
313:57 - data up if you want to right so for
314:00 - example if over here I say a on click uh
314:06 - I can if I say I wanna uh uh maybe like
314:10 - a Delta and so that I can increment my
314:14 - accounts by a certain Delta right I'm
314:16 - increment by one increment by two or any
314:18 - numbers right then I can convert here
314:21 - and do that if I want to right so this
314:24 - is Click me plus one
314:27 - and I can have a button called click me
314:29 - plus two
314:31 - which increment by two
314:33 - and see if I click the number one I
314:35 - increment by one click number for two
314:37 - increment by two right I can pass any
314:39 - kind of data up this this is now the CH
314:43 - all your children will be like you're a
314:46 - publisher of events and the app can now
314:49 - change rules to become like a subscriber
314:51 - of events I want to subscribe this
314:54 - function called click anyone's can just
314:57 - call this and notify me something has
314:59 - changed right you can any of my children
315:01 - can let me know when something has
315:02 - changed this is the function to call
315:04 - right I have set this context just read
315:06 - it and by design of context uh what so
315:10 - amazing is that your child one can be in
315:14 - and different parents right it could be
315:17 - with under this m.cell it could be maybe
315:19 - under app2.felt as long as they provide
315:22 - this function called click uh this
315:24 - context called click but uh have a
315:27 - different implementation of it it does
315:28 - not really matter for child one right
315:30 - where you are underlying where uh
315:34 - no if you under okay which component
315:38 - you're under then you will call which uh
315:40 - which contacts you're under with then
315:42 - your call which function that context is
315:45 - set to
315:46 - right so that's all for this for today
315:49 - so we have learned about how we can
315:50 - communicate uh from parents to children
315:53 - via contacts
315:55 - where you see a parents two children by
316:00 - how we pass data out and we also see how
316:03 - we can pass data from a child all the
316:05 - way to the parent
316:09 - today I'm going to share with you all a
316:11 - concept in svelt which is the star
316:13 - in particular what is a store and also
316:17 - why do we need a star
316:19 - is felt
316:21 - so to explain this it's easier to look
316:24 - at an example and so let's take a look
316:27 - at this example that I've prepared for
316:28 - you
316:29 - so over here you can see that there's a
316:32 - sample component in the app
316:35 - and in a sample components we have one
316:37 - input and a heading
316:40 - which tells us the value of the value
316:43 - variable so over here when we in the
316:46 - inputs we have want input events
316:48 - listener so every time when we type uh
316:51 - the it will trigger input event and then
316:54 - we will use the value of that input to
316:58 - updates the value variable over here so
317:00 - if I type something you will see that
317:02 - the value changes immediately
317:05 - right so within a sprout uh components
317:09 - you when any variables is like a state
317:12 - within a component right when you change
317:14 - it uh you the reference of that variable
317:18 - will be updated immediately
317:19 - so you can see that changes on the
317:21 - screen immediately right but what
317:23 - happens if we are going to break this
317:26 - input and the
317:29 - heading one into two components and how
317:33 - do we share
317:35 - um variables or States across components
317:38 - right so firstly let's do that first I'm
317:41 - gonna say uh inputs component
317:44 - and I'm gonna have
317:46 - heading component
317:49 - so on the inputs what I will have is
317:52 - just the inputs
317:54 - right over here
317:56 - and in a heading I will have just
318:00 - the heading right so there's no callback
318:04 - function so just a heading
318:06 - so how do I share this value with this
318:09 - value in the input over here how how do
318:12 - how do I Bridge them together so that I
318:14 - can share the same variables or States
318:16 - across the components
318:19 - right so
318:21 - um if you know about
318:23 - uh props probably you can pass it in as
318:25 - a props from one component to another
318:27 - component
318:29 - um but what if in our case the
318:33 - components are side by side like a
318:35 - sibling how do I pass one State's inner
318:39 - state within one component to another to
318:41 - its sibling component
318:43 - um probably you might think of maybe we
318:46 - can lift the state up we can define a
318:49 - variable called value over here
318:52 - in the parent com in a common parent
318:55 - component and we can pass this value
318:57 - down to the output so the inputs will
319:00 - change this value and you pass that
319:02 - value to the output yeah you can do that
319:05 - but what if I have a few other
319:10 - component
319:11 - when
319:13 - in this case when a
319:15 - contract for example to show that this
319:19 - may not seem as easy as you think
319:22 - for example if I have a parent component
319:25 - that renders the output
319:29 - and then have another grandparent
319:32 - component that renders the parent
319:38 - and finally you use the grandparent
319:40 - component in
319:42 - in the common
319:46 - parent right so this app right now
319:49 - app.fl component is actually a common
319:52 - ancestor right they don't they are not
319:55 - exactly the input the output and input
319:58 - is not exactly C blinks right now it's
320:01 - like a nice
320:02 - or nephews
320:05 - grandchildren right
320:07 - uh yeah so so how do you pass the states
320:10 - do you pass one by one level by level or
320:14 - you create a context over here and share
320:15 - it across well you can do all that but
320:19 - you might think one question is that
320:21 - does the app does fail should the app.fl
320:25 - knows about the variable value
320:28 - right because over here it acts like a
320:32 - mediator or ancestor that tries to
320:34 - mediate all the verse all the different
320:37 - states across all the children or the
320:40 - grandchildrens
320:41 - like a hub that controls all of them
320:43 - right is that uh does this app does felt
320:48 - component should the app.strual
320:50 - component knows all of this should it
320:52 - control all of this or is there another
320:54 - way or an alternative that you can do
320:56 - well we do not have to share
321:00 - um the states and across like the
321:04 - component hierarchy you can have it as a
321:07 - separate file
321:08 - so maybe I'm going to call this as
321:11 - data.js
321:14 - I'm gonna move this to the front because
321:17 - this is the
321:18 - thing that we're going to focus right
321:20 - now
321:21 - so why not we have this data.js that
321:24 - exports a variable called value
321:27 - as well as a function that we can update
321:31 - it right spots a function that we can
321:34 - update the value
321:36 - right and in this case what we can do
321:39 - here now is that you can come up with
321:41 - the inputs and we can import updates
321:46 - from data
321:49 - and we're going to call this update
321:51 - instead
321:53 - and in the output we're going to say
321:55 - import
321:57 - value
321:59 - from data
322:02 - and use this value in States
322:04 - right so now we can still share across
322:09 - um we can have a common file that does
322:12 - not that is beyond the app component
322:16 - hierarchy and all these components any
322:19 - components whether it's it's your
322:21 - sibling your grandchildren your niece
322:23 - nephew or your grandparents all of them
322:25 - can just import this file
322:28 - and you can share the states within this
322:30 - file across all the different components
322:32 - that scatter across your application
322:34 - right so here I import the updates from
322:38 - the data for in the input so that we can
322:40 - update that variable and over here in
322:42 - outputs we can import the value and
322:44 - hopefully it's changed right so let's
322:47 - try it out type the value
322:50 - oh so the value does not update
322:53 - well
322:54 - why well that's because uh this data.js
322:59 - is a Javascript file uh it's not and
323:01 - it's felt component so the variable when
323:04 - you update it is not reactive when you
323:07 - try to change the value over here yeah
323:10 - it's changed it's updated but it's not
323:12 - reactive over here in this output of
323:15 - swelt does not know that the value has
323:17 - changed it will not
323:19 - re-render or update the value over here
323:23 - it does not know that it's updated so
323:25 - what can we do
323:27 - well again we can use like a
323:30 - subscription model
323:33 - um
323:33 - like an event listener kind of style
323:35 - where we can subscribe to the changes
323:37 - that's happening within the data.js and
323:40 - then what is when there's a new changes
323:42 - uh we try to re-render ourselves right
323:46 - so what we're going to do here is I'm
323:47 - going to have a function called
323:49 - subscribe
323:51 - and we can take in a function that lets
323:53 - us know let us know that what are the
323:55 - functions that you need to trigger a
323:57 - call when something has changed
323:59 - so um right now I'm gonna have a
324:02 - variable called subscribers
324:08 - and a subscribe method is nothing but
324:11 - pushing it uh pushing this function
324:14 - burst dot push
324:17 - into this subscribers list and when we
324:20 - have an update we're gonna do is we are
324:23 - going to notify all the subscribers that
324:26 - hey this value has changed the
324:28 - subscribers start for age
324:30 - function we'll call
324:33 - function all right I'm going to three
324:35 - I'm going to call each of the function
324:37 - tells them that hey uh the vet we have a
324:40 - new value
324:42 - so over here in outputs Source felt we
324:45 - can call subscribe
324:47 - and we can sub call this function to
324:50 - subscribe to change
324:52 - um
324:53 - okay
324:55 - so over here what should we do
324:57 - right one simple way we can do is that
325:00 - instead of using value directly so over
325:03 - here what we know is that here the value
325:05 - definitely has changed but how do we
325:07 - tell that this has changed or what we
325:10 - can do is that we can say value equals
325:12 - value
325:14 - okay that does not work because you can
325:16 - assign to the value so maybe we can have
325:18 - a variable called underscore value
325:21 - we can use it here
325:23 - actually use it here as well
325:25 - and let's see so we type
325:28 - yes let's change right we subscribe to
325:31 - the data over here and when there's a
325:34 - new value of the data
325:36 - we get notified and then we update our
325:40 - internal state which is the underscore
325:41 - value variable and when it's the
325:44 - internal state has changed this will be
325:45 - re-rendered will be updated and you will
325:48 - see the change reflected on to your Dom
325:50 - immediately
325:52 - so
325:54 - um the concept of star is
325:55 - this right uh you can have a variable or
326:00 - like a data or some sort of states of
326:04 - your application that is not uh
326:08 - presented with that is not uh part of
326:11 - your app component hierarchy it's in a
326:14 - separate file right which you can import
326:17 - across different components it does not
326:20 - matter whether
326:22 - all the components that's importing it
326:24 - are
326:25 - siblings or nephews or grandchildren's
326:28 - or grandparents it's not a matter of the
326:31 - how their
326:33 - importing hierarchy within the component
326:37 - app component hierarchy
326:39 - right and then you provide a way to
326:42 - change that value
326:43 - and then to know that when is the value
326:46 - is updated provide ways to subscribe to
326:49 - it to know that the data has changed
326:52 - so that uh you get notified right so one
326:57 - thing we need to do over here as well is
326:59 - that when we subscribe we also need to
327:02 - unsubscribe right so there's two ways
327:05 - one is you export another function
327:06 - called uh unsubscribe
327:11 - right
327:12 - or and then so here is that subscribers
327:16 - dot supplies
327:17 - subscribers Dot and next of FN
327:22 - okay we can remove it
327:24 - are an easier way of doing this is that
327:27 - instead of creating another API we
327:30 - return this function immediately from
327:32 - the Subscribe method
327:34 - right so here what we can do over here
327:37 - now in output.s field we can't import uh
327:41 - on Mount from sweld
327:47 - which we can subscribe to uh
327:52 - during on Mount
327:54 - and one cool thing about on mounts is
327:57 - that you can return some a function
328:00 - during in the on Mount which will be
328:03 - called when this
328:04 - component is unmount right so or when
328:09 - the component is destroyed so here we
328:11 - can return this immediately which is to
328:13 - return the unsubscribed method so that
328:16 - um
328:17 - this function will be removed from the
328:19 - subscription list or else if you
328:23 - um still have still being subscribed to
328:25 - it then you know you this will always be
328:28 - called whenever the value is changed
328:30 - although this component is no longer on
328:31 - the screen and then it tries to update
328:34 - some sort of component or it will create
328:37 - some sort of a memory leak because
328:38 - you're trying you're still trying to
328:40 - update a component that is no longer
328:42 - being in use right so it has to be
328:44 - retained in the memory
328:45 - so one way you can do it is doing like
328:47 - this right it's on Mount and then return
328:50 - a subscribe
328:52 - so uh in essence this is a very uh this
328:56 - is a concept called store in svelt you
328:58 - can Implement a store like this yourself
329:00 - or you can use some built-in uh store
329:04 - Creator function that is provided by
329:06 - swelts
329:09 - let's talk about
329:11 - um built-in shell store function right
329:15 - these are built-in functions provided by
329:17 - salt allows you to create store easily
329:20 - right in the last video you've seen me
329:22 - create like a subscribe function a
329:24 - method and update methods and then we
329:26 - manage our subscribers manually
329:28 - you don't have to do it your own there
329:31 - is a built-in's felt functions that you
329:34 - can do so how you use it is that you
329:37 - import them
329:39 - from
329:40 - asphalt star
329:43 - so there's two uh two apis one is the
329:47 - writeable and another is readable
329:51 - right and as the name suggests a
329:54 - writable star is read and write
329:57 - that allows you to read and write and
329:59 - readable store only allows readable only
330:02 - right so both of the store has a method
330:06 - called subscribed which is pretty
330:09 - similar than what we have over here
330:12 - that allows you to subscribe
330:15 - um
330:17 - to subscribe if the store itself has
330:19 - changed so to create it what you can do
330:23 - here is that let's Value Store
330:27 - okay I'm gonna yeah Value Store equals
330:29 - to writeable
330:31 - and then you provide a default value so
330:33 - over here I'm going to mimics this so
330:36 - I'm going to say empty string
330:39 - okay and I'm gonna export this right
330:42 - and actually I don't need all of this
330:45 - I'm gonna comment out
330:46 - and when I come over here in the input
330:49 - so I'm going to import the uh
330:53 - value Star right
330:55 - okay Value Store
330:56 - [Music]
330:58 - over here
331:00 - so to update it there's a method called
331:03 - set so I'm going to say values value
331:06 - star dot sets
331:08 - this value
331:09 - right and then let's take a look at a
331:11 - over here so now we don't have value And
331:14 - subscribe we only have a value store
331:17 - what we can do here is
331:20 - um instead of Define it now over here we
331:22 - can Value Store dot subscribe with a
331:26 - value
331:27 - I'm going to update value equals value
331:30 - over here
331:32 - same thing it returns an absorb scribe
331:34 - method a function so I need to return it
331:37 - over here
331:38 - change it here like this and yeah we are
331:41 - done
331:42 - so let's try
331:44 - something over here see it's updated
331:47 - it's reactive so uh using writable and
331:52 - then passing the initial function allows
331:54 - save others a lot of time implementing
331:56 - ourselves uh previously we've seen that
331:59 - we have to implements like a update then
332:02 - subscribers And subscribe method all of
332:04 - this is done within a function called
332:07 - writable and this is so much easier
332:10 - right
332:14 - So today we're going to work on readable
332:16 - Stars
332:18 - so you may ask like if the star is
332:21 - readable only
332:22 - which means you have no way that you can
332:25 - update it from the outside then how does
332:27 - the value of the star changes
332:30 - well we're gonna look at it right now
332:33 - so over here we continue from where we
332:36 - stopped the last time
332:37 - so just a reminder previously we have a
332:40 - writable star which is going to be
332:43 - updated by calling the store.set so over
332:46 - here I'm going to type something you
332:47 - will see that we update the store value
332:49 - and then to listen to what uh when the
332:52 - storm has changes we use the Subscribe
332:54 - method to subscribe for the store
332:56 - changes and the Callback function will
332:59 - be called with a value that the latest
333:02 - value of the star
333:04 - so right now instead of writable we are
333:07 - going to change it to a readable star
333:10 - and with a readable star there is no way
333:12 - you can call the set
333:14 - right it is undefined it's not a
333:17 - function so over here what we're gonna
333:20 - do is gonna
333:21 - removed it remove this input components
333:25 - for now
333:26 - right because there's no way they can
333:28 - update the store from the outside
333:30 - so with a readable store the first
333:32 - argument at the same as writable store
333:34 - is the initial value so over here if I
333:38 - change the elliptical value to hello
333:39 - then you can see initial value is hello
333:41 - right now
333:43 - and then one thing that is slightly
333:46 - different or with with the writable
333:49 - store is that the second argument is
333:51 - actually something that you need to do
333:54 - because without that you have no way
333:57 - that you can update the readable store
333:58 - no way that you can update the value of
334:01 - the star so the second argument which is
334:04 - optional for writable star is mandatory
334:08 - for for
334:10 - I mean there's no error but
334:13 - it does not make any sense if you don't
334:15 - provide it right so
334:17 - this function is called
334:20 - um
334:21 - a start stop Notifier what does it mean
334:24 - is it means that this function will only
334:27 - be called when there is someone
334:31 - subscribing to the store
334:33 - right if that's so imagine you have five
334:37 - people that's kind of subscribe the star
334:38 - from the Zero from nothing from zero to
334:41 - one uh from from no one subscribing to
334:45 - someone subscribed then this one should
334:46 - be called but then if you subscribe it
334:48 - multiple times this function will not be
334:51 - called anymore so it's only at the edge
334:53 - of no one subscribing to someone
334:55 - subscribing
334:57 - and this function within a function you
335:00 - can return a function
335:01 - so imagine this function is like your
335:03 - cleanup function you want to clean
335:06 - something up so this function will only
335:08 - be called when
335:11 - from some subscribers maybe like one to
335:14 - become zero subscriber then this
335:17 - function will be called so it's a
335:18 - cleanup so when when it reaches no one
335:21 - is subscribing then this one uh this
335:23 - return function will be called
335:24 - right later on we're gonna look at uh
335:27 - we're gonna see we're gonna console out
335:29 - and prove this uh it works as I
335:32 - explained right
335:34 - so this function takes in one parameter
335:38 - which is set
335:40 - and this set is the same sets where you
335:43 - see in your readable store basically in
335:46 - a readable star you have a way that you
335:48 - to set the value of the star this is
335:50 - exactly the same one right so if I come
335:53 - over here and I say Set uh world
335:58 - you can see that initial value is hello
336:00 - and then you set it to world right maybe
336:03 - it's too fast your eyes cannot catch it
336:05 - it's okay we set the timeout
336:09 - over here
336:11 - for one second I'm gonna call sets from
336:14 - here
336:15 - so one second later it turns to whirl
336:18 - right hello world
336:21 - so now you see it right
336:24 - so uh as anything goes when you try to
336:28 - set something up like set timeout you
336:30 - need to clean up right what if uh right
336:33 - before you even like trying to set the
336:36 - world
336:37 - um
336:38 - everyone subscribes from your store no
336:41 - one cares about whether your timeout
336:42 - triggers right so you need to clean up
336:45 - so when you set a timeout you need to
336:46 - clean up so I'm gonna say uh timeout ID
336:49 - over here
336:51 - and I'm gonna say
336:54 - clear
336:56 - timeout
336:57 - over here so now I want to show you uh
337:02 - the point that I was trying to make so
337:04 - over here I'm gonna console out uh I'm
337:07 - going to say start
337:11 - right so you only see one starts uh
337:16 - right because we only have one
337:18 - subscribers over here but what if I
337:20 - remove this
337:21 - then this never
337:25 - started right the store itself has no
337:29 - subscriber then it will not start at all
337:33 - but if you come over here value
337:36 - store.subscribe
337:38 - when I'm passing a function over here
337:42 - okay
337:43 - um there's an arrow over here it's okay
337:45 - let me save and refresh
337:55 - yep I think the error is gone
337:58 - um yeah so probably a bit error that
338:02 - what happens just now is that we as this
338:05 - whole code is executed as I type right
338:08 - so I think when I type this is not a
338:11 - function so it it creates you'll see
338:15 - that error
338:16 - and because as
338:20 - uh every time we start we every stroke
338:23 - that we type in we create a new timeout
338:25 - that's why that error keeps popping out
338:27 - so now I clear it it should be gone so
338:30 - as you can see it says start and if I
338:34 - paste this multiple times you can only
338:36 - see one start
338:38 - where if I remove all of them
338:40 - no start right comment only one starts
338:44 - okay so no matter how many times you
338:46 - subscribed uh it only have the start
338:49 - only call one so this you can think of
338:51 - it as you only need to set it up only
338:54 - once so uh that that creates the value
338:58 - of the star
338:59 - and if you subscribe then unsubscribe
339:02 - them
339:03 - answer
339:05 - right uh
339:07 - one two
339:10 - see
339:12 - three
339:14 - four
339:15 - I call all that I'm subscribed uh one
339:19 - okay so this function I'm going to say
339:21 - console.stop
339:23 - and if I call unsubscribe once it's not
339:26 - going to call two it's not gonna call
339:30 - um tree still there and let's remove the
339:34 - last unsubscriber and then you can see a
339:36 - stop if I comment one of it you only see
339:39 - start right so this tells you that this
339:42 - will this function is like setting
339:45 - setting up the store and only will be
339:48 - called when there's uh starting that
339:51 - there is one at least one subscribers
339:54 - and then the subsequent subscribers you
339:57 - will not see this being called and when
339:59 - you tear down uh only this return down
340:02 - function the function and return will
340:04 - only being triggered when all of when
340:07 - there's no more subscribers left right
340:09 - until the last ones unsubscribes uh this
340:12 - will be called
340:14 - right so you can use a readable store by
340:18 - this way by creating a function and you
340:21 - can use this set to set whatever the
340:24 - value of the readable store is
340:28 - so in the previous videos we talk about
340:30 - the writable and the readable stars and
340:33 - I told you that in this video I'm gonna
340:35 - talk about what makes the two of the
340:38 - Stars similar
340:40 - which is both of them actually follows a
340:43 - strong contract so what is a star
340:46 - contract
340:47 - well before I deep dive into what is
340:50 - this contract itself let me show you
340:52 - something that um a secret syntax that's
340:55 - felt provides
340:57 - that leverages on this store contract so
341:01 - if you have a star that follows the
341:03 - contract you can use this secret special
341:06 - syntax to get the value of the store
341:10 - right so let's take a look at this
341:12 - example that I prepared over here
341:15 - so in this example I have two stores one
341:19 - is a readable star which is star one and
341:22 - the second star is a writable star star
341:25 - 2.
341:27 - right
341:28 - over here I have an inputs box which I
341:32 - um imported the store tool and use the
341:34 - store.set to set the value of the store
341:37 - and over here in the output of spelled I
341:40 - basically on the mount I subscribe to
341:43 - both of the store
341:45 - and then as the value changes I assign
341:48 - it assign the store value to the first
341:50 - value one variable and a value 2
341:52 - variable right and over here you can see
341:54 - the value of the Star by value 1 and
341:57 - value 2 over here
341:59 - um so the first star is a readable star
342:01 - which the value of the star is being Set
342:05 - uh via the set interval so every one
342:08 - second you will see that the value will
342:10 - be incremented by once
342:12 - and for the star 2 we set it in the
342:16 - inputs box right so when we type
342:17 - something
342:18 - we will set the value of the star over
342:20 - here right like this
342:22 - right and as I mentioned both of this
342:25 - star follows the star contracts
342:27 - and because of that we can use this
342:30 - secret special syntax that provides
342:34 - which is a dollar prefix variable name
342:37 - right so what does that mean so if for
342:40 - example if this star 2 follows a star
342:42 - contract instead of just using a star 2.
342:46 - sets and a value
342:48 - we can use a dollar prefix of that store
342:51 - value and we can assign variable
342:55 - to its direct the value to the variable
342:57 - directly right so dollar prefix of the
343:01 - store variable so this is a special
343:05 - variable
343:06 - um that you can't Define anywhere
343:09 - um so if you have a variable like this
343:11 - basically you are referring to the store
343:13 - but the value of the star and you can
343:16 - assign value right trade it as a normal
343:18 - variable you can assign
343:21 - value to that store like this so is so
343:25 - let's just try it out right so over here
343:27 - when I try to type something
343:29 - as you can see this behaves the same as
343:33 - store tool that sets the value right so
343:36 - instead of sets value we use a dollar
343:39 - prefix of the variable equals and your
343:41 - assign value to it to that variable and
343:43 - it behaves the same
343:45 - right so is that all that
343:48 - um a star that follows a store contract
343:50 - can do
343:51 - of course not right over here
343:55 - um this is only when we are trying to
343:56 - set a value right how about over here
343:58 - when we're trying to subscribe to a
344:00 - value uh subscriber value of the store
344:03 - right if you if the star one or Star 2
344:07 - follows a star contract
344:10 - uh we can directly access the value of
344:13 - the star using a dollar prefix variable
344:16 - of that star right so for example over
344:19 - here I'm gonna say
344:21 - store one so this will get the value of
344:24 - the star of star one and use a dollar
344:27 - prefix right so this is a shorthand for
344:30 - a lot of things right first thing is
344:33 - subscribes to the store so it does this
344:35 - it subscribes to the store and then this
344:38 - variable dollar prefix store one will
344:40 - always have
344:43 - um
344:43 - will always be the updated value of the
344:46 - store
344:46 - and also when you unmount it it will
344:49 - also unsubscribe from the store right so
344:53 - it also does this thing when you return
344:55 - the unsubscribe function where you
344:57 - unmount right so it does three things
344:59 - subscribe to the store and then this
345:02 - variables the value of this variable is
345:04 - always updated as the value of the star
345:06 - and then when your component is
345:08 - unmounted it will unsubscribe from the
345:11 - store as well so you don't have to write
345:14 - all this to clean it up you can directly
345:16 - use a dollar prefix star 1 to access the
345:19 - value of the star
345:21 - right over here let's do this as well
345:23 - store two
345:25 - and as we type you can see the value of
345:28 - the store is updated and reflected
345:30 - immediately right so now we can say
345:33 - goodbye to subscribing to the store on
345:35 - Mount you can even remove the on mounts
345:37 - and yeah everything still works fine
345:41 - right so this is the power of the store
345:44 - contract if you follow the star contract
345:47 - anything any variable that follows a
345:49 - star contract you can access the value
345:52 - of the store via a dollar prefix syntax
345:54 - and then you can set the value of the
345:57 - Star by just assigning it
346:00 - right so what is the star contract
346:06 - so listen carefully right so as a star
346:11 - um probably you have known you need to
346:14 - have
346:15 - two variable one is uh two methods one
346:19 - is the subscribe
346:21 - and another would be okay so I'm gonna
346:23 - call it star tree
346:25 - another would be the sets right so set
346:29 - is for you to set
346:30 - the value of the star and then subscribe
346:33 - is to subscribe from it
346:34 - right and as we create this and we as we
346:37 - use the store
346:39 - probably when you call subscribed you
346:41 - probably will want to pass in a function
346:42 - right the function that
346:45 - uh a subscriber function
346:48 - and this subscribe method should call
346:51 - this function immediately synchronously
346:55 - right you need to call it call the value
346:58 - of this call this function with the
347:00 - value of the value of the store
347:01 - immediately right so right now I call it
347:04 - immediately right you cannot say uh set
347:07 - timeout
347:09 - and then
347:10 - you know call it later uh in in
347:15 - the next take or next timeouts and
347:16 - things like that no you can't you need
347:18 - to call it immediately right you need to
347:21 - call it with the current value of the
347:23 - store or maybe your initial value or all
347:25 - these things you need to call it
347:26 - immediately
347:27 - and then the Subscribe method should
347:29 - also return a function
347:33 - that's unsubscribes this function from
347:37 - the subscriber list
347:39 - right so one way you can implement it is
347:41 - probably create an array called
347:43 - subscribers
347:46 - and then whenever you have a function
347:48 - you're gonna push it in to the
347:50 - subscribers list
347:56 - and then the return function probably
347:58 - will have to remove it so subscribers
348:01 - dot Supply subscribe person and next of
348:05 - FN
348:07 - one
348:09 - right so your subscriber method again
348:11 - let me recap text in a function and you
348:14 - need to call the function immediately
348:15 - synchronously
348:17 - and then this subscribe method should
348:19 - return a function that unsubscribes this
348:21 - function
348:22 - right and then when are you calling
348:24 - these subscribers when are you noticing
348:26 - notifying them it's up to you right it
348:28 - can be uh maybe like you have a time
348:31 - timer for example over here maybe you uh
348:36 - say set interval
348:41 - and maybe it's a set interval for
348:44 - one second again and for every one
348:47 - second we'll Loop through the subscriber
348:49 - list
348:51 - subscriber of subscribers
348:54 - and call them
348:57 - with the value of the Star right so over
348:59 - here I'm going to call
349:01 - um
349:02 - uh uh let's see probably let's create a
349:05 - variable called uh I I mean okay let's
349:09 - let's just create a
349:10 - use the time so this is the time right
349:14 - now
349:15 - right so I'm going to call this
349:17 - so uh so this star tree follows a star
349:20 - contract which we right now kind of
349:23 - Define the stock contract for the
349:24 - Subscribe method
349:25 - uh which is sufficient enough that we
349:28 - can call store tree with a dollar syntax
349:31 - and as you can see over here
349:34 - this star tree values is updated on
349:36 - every second right this makes your star
349:39 - tree as your start three variable
349:42 - follows a star contract now you can
349:45 - access the value of the store via dollar
349:47 - star tree
349:49 - right and what is the value of the star
349:51 - well that will be whatever value you are
349:54 - going to call with the subscribers right
349:56 - this function is a subscriber you call
349:58 - it with empty string and the value of
349:59 - the store is the empty string if you
350:01 - call it with the current timestamp then
350:04 - the current timestamp would be the stop
350:06 - value
350:07 - right
350:08 - and if you're trying to access it try to
350:12 - set the value of the star using dollar
350:15 - star tree equals something
350:17 - then the sets method will be called with
350:19 - the value right so uh yeah depends on
350:24 - what you want to do with it right you
350:26 - can call you can set a value of the star
350:28 - and then notify all the subscribers that
350:31 - is one way so for example let me show
350:34 - you for example if I sent and say
350:37 - subscribers uh let's copy this for over
350:41 - here
350:42 - for each of the subscribers you're gonna
350:45 - call notify with the new value
350:49 - right and as I okay let's see
350:54 - we have a button on click
351:00 - um click me
351:02 - right over here
351:04 - when I say star
351:06 - 3 equals
351:09 - um hello
351:10 - right so whenever I'm type I'm click on
351:14 - it the sets function will be set method
351:16 - will be called and it will notify all
351:18 - the subscribers telling that okay this
351:19 - value of the star has changed to this
351:21 - value whatever you are passing in which
351:23 - in this case will be hello right so when
351:25 - I click hello
351:26 - right uh it's it's updated immediate uh
351:29 - reflected back immediate because this
351:30 - set interval is still happening right uh
351:33 - if I remove this
351:35 - no longer see anything it's not going to
351:37 - update as a timestamp so when I click me
351:39 - it will turn into hello and it will stay
351:41 - there right
351:43 - so
351:44 - let me recap on the store contract you
351:49 - mandatory as a store if you want to
351:52 - follow a stock contract you would need
351:54 - to implement it's an object that you
351:56 - need to have a method called subscribe
351:58 - it takes in a function and you have to
352:00 - call that function immediately
352:02 - and then that function is your
352:04 - subscribers right so
352:06 - um you can return a function to remove
352:10 - that subscriber
352:11 - and to notify whatever the value of the
352:14 - store is you have to tell the
352:15 - subscribers right so you have to notify
352:17 - all the subscribers that a value has
352:19 - changed
352:20 - optionally you can Implement a sets
352:24 - method which takes in a value which is
352:26 - you want a value that you want to update
352:28 - your store with
352:30 - right so to kind of reflect that to tell
352:33 - everyone that your store value has
352:34 - updated you also need to notify all the
352:37 - stores uh subscribers right whether or
352:41 - not to notify them is up to you right
352:43 - you can batch them you can
352:44 - asynchronously call it after maybe after
352:47 - you set everything and yeah on the next
352:49 - kick and things like that but
352:52 - the outside world would not know what
352:54 - the value of the store is until you
352:56 - notify them
352:58 - right so this sets method is optional
353:01 - because for example as you can see
353:03 - readable store does not implement this
353:04 - you can't set the value of readable
353:06 - store because this set method is not
353:08 - there
353:09 - but the Subscribe method is mandatory
353:12 - right as soon as your variable follows a
353:16 - star contract
353:17 - what you can do is you can use a dollar
353:20 - prefix of that variable to access the
353:23 - value of the store as well as using
353:26 - assignments like this to set the value
353:28 - of the store
353:30 - right so if this is the star contract
353:37 - so in the previous videos we talked
353:38 - about how we can use store
353:40 - to manage applications state that is not
353:43 - constrained by the component hierarchy
353:46 - of your application
353:47 - and what makes Stars different is that
353:51 - um if the star follows a star contract
353:54 - we can use the dollar prefix variable to
353:57 - access the value of the star and
353:59 - automatically subscribe to the store and
354:01 - unsubscribe when the component is
354:02 - unmounted so in this video I'm going to
354:05 - talk about some of the application State
354:07 - Management libraries out there in
354:10 - particular how are we going to use them
354:11 - in a svelt application
354:13 - if we can make them to follow the star
354:16 - contract probably we can use the dollar
354:20 - prefix syntax with them
354:22 - So today we're going to look at one of
354:25 - the state management Library which is
354:28 - Redux
354:29 - right Redux has been well known in a
354:31 - react World where you use Redux with the
354:35 - Redux binding that allows users to
354:38 - connect and map the property from the
354:42 - store State into your application props
354:45 - right and you can dispatch actions to
354:49 - which will be run through a reducer
354:52 - which will create a new state of your
354:54 - application
354:55 - right so in this video I'm not going to
354:57 - talk particularly in how we're going to
354:59 - use Redux
355:00 - uh like it's not a relaxed beginner 101
355:04 - video but more of how you can make Redux
355:08 - to follow the store contract and you can
355:10 - use a dollar prefix syntax uh in with
355:14 - the Redux store
355:16 - right so over here as you can see we
355:19 - have prepared some simple code
355:22 - to use reduction spelled I have a Redux
355:27 - file which I create a store from the
355:31 - Redux package so over here I use patch
355:34 - processors to define the process
355:36 - environment because it it reads that but
355:39 - once you run this which once you define
355:42 - this variable process in the window even
355:45 - if you remove it it will not cost
355:47 - anything because it's already defined
355:48 - right but you have to have it in the
355:52 - first run
355:53 - over here I use crit store from Redux
355:55 - package and I Define a reducer function
355:59 - which this function will tell takes into
356:02 - parameter a state and action which uh
356:05 - depends on the action you will Define
356:07 - the next States right this will return
356:10 - the next state based on the action and
356:12 - we take this reducer and we pass into a
356:14 - great store
356:16 - which over here will return us a new
356:18 - store
356:19 - and we're going to use this store uh
356:22 - there's two apis from the Redux store
356:24 - the first one is the get state so if you
356:26 - call get State you get a current state
356:28 - of the store
356:29 - and if you call subscribe you can pass
356:32 - in a function to be called whenever the
356:34 - state has changed right uh it does not
356:36 - takes in any parameter for the Callback
356:38 - function so to get the next stage you
356:40 - basically have to call a store or get
356:42 - State again to get this current state
356:45 - right so these are the two apis State
356:48 - guested and subscribed and then uh one
356:52 - more is the dispatch right so here you
356:54 - can dispatch actions so this action is
356:57 - the one that's going to be passing over
356:58 - here which if which over here you have a
357:01 - switch case to decide what's going to be
357:03 - the next state based on this action
357:06 - so here I have two function stored
357:09 - decrement and increments which I
357:11 - dispatch a decrement action and
357:13 - increment action
357:15 - and over here I show uh I'm going to
357:18 - call this decrement when I click on the
357:19 - minus button and I'm going to call the
357:22 - expression increment action when I click
357:24 - increment here you will see the state of
357:26 - the Stars changing because we have this
357:29 - subscribe method over here which will be
357:31 - called and then update the state
357:33 - variables every time when the state has
357:35 - changed so as you can see over here the
357:38 - Redux store does not follow the spell
357:40 - store contract
357:41 - in a few points right so firstly is that
357:45 - the function that you pass into the
357:47 - Subscribe method should takes in the
357:49 - value of the Star right you shouldn't
357:51 - call
357:53 - another EPA to get the state of the
357:55 - store or which in this case is the value
357:57 - of the Star right
357:59 - and secondly
358:02 - um
358:03 - when you call subscribe methods this
358:05 - function does not being called
358:06 - immediately
358:07 - that's why we have to manually set the
358:10 - state of the store by calling store like
358:13 - a state if you don't do anything
358:16 - the state will be undefined because this
358:19 - function will not be called
358:20 - synchronously immediately when it calls
358:22 - subscribed that is required for the
358:25 - store contract
358:26 - so we're going to fix that we're gonna
358:28 - wrap it with another object that does
358:31 - all this
358:32 - right so
358:34 - um I'm gonna keep using this star
358:35 - variable over here but I'm going to come
358:37 - over here and do the changes
358:40 - right so over here I'm going to say uh
358:43 - star uh Redux star
358:46 - which is we call it create star
358:51 - and then we're gonna
358:52 - return a new uh sveld star that follows
358:56 - a spell store contract right so here I'm
359:00 - gonna have the Subscribe methods and I'm
359:04 - gonna also have all the other apis that
359:07 - Redux stores provides right so I'm gonna
359:09 - spread this out Redux store and then
359:12 - subscribe subscribe sticks in a function
359:15 - which we're gonna call with Redux store
359:19 - dot subscribe
359:22 - um right
359:24 - I'm gonna call
359:28 - let's see the call with this function
359:33 - that's it no we're gonna
359:36 - call this and then for each of them
359:39 - we're gonna call function within this
359:42 - new function that we're going to create
359:43 - right over here I'm gonna
359:46 - call this function with the store dot
359:49 - get state
359:51 - so that the function itself right now
359:54 - um
359:55 - is being caught with the state of the
359:57 - star
359:58 - also we need to call it immediately when
360:01 - we call it subscribe so I'm going to do
360:03 - it here as well
360:05 - and similarly Redux stored or subscribe
360:07 - returns us and unsubscribe method which
360:10 - is good because we can return it
360:11 - immediately so that we can subscribe
360:13 - from the store
360:14 - and now this more or less follows the
360:17 - spell store contract so I can return
360:20 - this
360:21 - and since it follows that contract
360:25 - let's see spell store it's not defined
360:28 - ah okay it should be Redux store Redux
360:31 - store since it's follow the store
360:34 - contract what we can do here now instead
360:37 - of calling State and all this
360:40 - gonna say comment this out I'm gonna say
360:43 - dollar star
360:45 - right now
360:47 - uh this will give us the state or the
360:50 - value of the star which is the state of
360:52 - the redox star
360:54 - right so when you click increment
360:55 - decrement
360:57 - as you can see it it works immediately
360:59 - right and good thing about this is that
361:01 - if you unmount these components we will
361:04 - unsubscribe it as well because if you
361:07 - follow spells store contract we will do
361:09 - that for you
361:10 - now as you can see it's it's much
361:12 - simpler in a sense where to access the
361:16 - value of the star you don't have to call
361:18 - subscribed unsubscribed take care of
361:21 - subscribing as well as store against it
361:23 - all of this is being handled with just
361:26 - one dollar
361:27 - prefix variable right of course you may
361:31 - think or you may ask me all this
361:34 - complexity is being hidden but it's
361:36 - still being done somewhere which is
361:37 - being done over here which is like a
361:40 - wrapper to make uh your Redux store to a
361:45 - spell store right yeah maybe
361:47 - you're right but we can I mean this is
361:51 - pretty standard we can make it like a
361:52 - function and we can call it like make
361:57 - uh Redux store spell
362:01 - into spell store
362:04 - and I'm gonna pass in Redux store over
362:06 - here
362:08 - and I'm gonna copy all this in
362:13 - I'm gonna call return
362:15 - right this will return me
362:17 - a new uh spell Star right so I can call
362:21 - this
362:22 - over here like this
362:29 - let me so that it's easier to read yeah
362:33 - so I can do this over here right now
362:36 - uh right
362:39 - nicely formatted
362:43 - yep as you can see over here
362:45 - this still works fine perfect so now I
362:48 - have this function I can just call with
362:50 - any Redux store and it will mix me a
362:54 - spell store which follows the star
362:55 - contract
362:59 - so before I end this actually there's a
363:01 - better way of doing this if you are very
363:04 - familiar with Redux you probably would
363:06 - know that Redux has an API call and an
363:09 - answer
363:11 - right and an answer is the second
363:13 - parameter or the third parameter that
363:16 - you can call
363:18 - uh with when you're creating a Redux
363:21 - store
363:22 - right
363:24 - and this enhancer
363:27 - um
363:28 - it's like a higher order function that
363:31 - will text in the create store API and
363:34 - returns a new create store API
363:36 - and we can
363:38 - have this uh
363:41 - we can do all this in a real enhancer
363:44 - and just pass it in as an enhancer in a
363:48 - create store API right ideally similar
363:51 - is just using a different uh using a
363:54 - Redux API to do it instead of having to
363:57 - wrap this
363:58 - um make Redux store with your new store
364:02 - right so let me show you how you're
364:04 - going to do this so we're gonna say
364:07 - it's felt star enhancer
364:12 - which takes in a great
364:16 - store API
364:19 - right and then you need to return a new
364:22 - create store API which is uh texting
364:26 - reducer and initial States
364:30 - so create store API texting reducer and
364:34 - initial state
364:35 - right so over here we're gonna call Star
364:40 - equals to create store API with the
364:44 - reducer and initial state
364:48 - and then we can make we can return this
364:52 - which is return this so this is a new
364:57 - store we're going to create that
364:58 - enhances the existing Redux store so
365:01 - this is a Redux store
365:06 - I'm going to enter format this nicely
365:08 - here
365:09 - Yep this is a spell store enhancer and
365:13 - we can use this over here
365:16 - by calling create store
365:21 - with the enhancer
365:24 - right and yeah and we may try to do this
365:28 - it still works fine as you would expect
365:31 - except that right now we're going to use
365:33 - an enhancer instead of yeah wrapping the
365:37 - create store with another store right
365:39 - all this
365:41 - um this is I would I would prefer doing
365:43 - this because it
365:45 - follows more of like a Redux API style
365:48 - where
365:49 - yeah it already supports so why not use
365:51 - it use it right
365:54 - so yeah if you want to take a read on
365:58 - this Ripple the links is in the
366:00 - description
366:03 - I've talked about how uh spell store
366:07 - allows us to share application State
366:09 - across components without having to
366:12 - worry about the component hierarchy
366:14 - and this actually is a problem that is
366:16 - being trying to be solved with all those
366:19 - application State Management libraries
366:21 - out there for example Redux valtios and
366:24 - many many more if a star follows a star
366:27 - contract we can use dollar prefix
366:30 - variable to access the value of the star
366:32 - this saves us time in terms of having to
366:36 - set up boilerplates to subscribe and
366:38 - unsubscribe from the store if you can
366:41 - make the application State libraries
366:43 - that we want to use follows the store
366:45 - contract then we can have a very
366:47 - simplest experience using them in
366:50 - spelled application right so in the last
366:52 - videos we have talked about how we can
366:55 - make Redux store a special store which
366:59 - if you haven't watched it please click
367:01 - on the link on the top right corner
367:04 - and in this video I'm going to take a
367:06 - look at a different application State
367:08 - Library which is valtio right so valtio
367:12 - is a proxy based uh State library that
367:17 - allows you to wrap an object into a
367:19 - self-aware proxy according to them which
367:22 - you can subscribe to any changes made to
367:25 - that object right so
367:28 - so you can have a subscribe method that
367:30 - listens to any changes and when that
367:33 - change you can get a snapshot of the
367:35 - object at that point of time
367:37 - right so subscribe unsubscribe pretty
367:40 - much the same of the store so let's see
367:42 - how we can use it in Asphalt application
367:45 - so over here I have set up an example in
367:48 - code sandbox
367:50 - because of some package issue it's a bit
367:52 - hard to set up on the spelled Ripple so
367:55 - I do it on the code sandbox right so
367:59 - over here
368:00 - I have my app.spel and the data.js so in
368:04 - the data.js I create a proxy State using
368:08 - proxy from valtio vanilla so this let me
368:12 - zoom in a bit I mean hopefully that you
368:14 - guys can see it clearer
368:16 - so proxy
368:18 - well taking an object and create a proxy
368:21 - state
368:22 - which allows you from this data where we
368:26 - import from f.field allows you to change
368:28 - the data like this
368:31 - immediately right you can change this
368:34 - data any way you like count minus minus
368:36 - count data.com equal to something
368:38 - however like
368:40 - and to know that when this data has
368:44 - changed use a subscribe method from
368:46 - value vanilla so I use a vanilla version
368:50 - because by default value supports react
368:52 - but this is like the core of the value
368:56 - which just subscribed and snapshot and
368:58 - proxy
368:59 - right so subscribe allows you to
369:01 - subscribe Adidas state
369:03 - uh proxy state so we pass in the data
369:07 - and then or it will have a callback
369:09 - function so when when this function is
369:12 - being called we know that the data has
369:13 - changed so to get the snapshot off the
369:18 - states
369:19 - we use a snapshot so we pass in the
369:21 - proxy State and then gives us a snapshot
369:24 - so every time when you change because
369:25 - snapshot it gives us the snapshot so
369:28 - very simple way of understanding is this
369:31 - is that snapshot shows the exact point
369:34 - of like what is the value of
369:36 - the states so we use Snapshot to read
369:40 - the data from the states so we use
369:41 - Snapshot accounts over here on
369:43 - Assumption of the text over here
369:45 - right and when in whatever we want to
369:47 - manipulate data we just manipulate data
369:49 - directly right so over here we have a
369:53 - button that on click you say dot dot
369:56 - counts minus minus decrement it and
369:59 - data.com incremented and snapshot
370:02 - account over here and then we can also
370:04 - bind data.txt because using bind we are
370:08 - going to set the value of data or text
370:10 - directly
370:13 - um
370:14 - and then
370:15 - yeah and read the data text value from
370:18 - it so this makes the binding works as
370:21 - well so if we type something the
370:24 - snapshot will always get updated because
370:26 - of this subscribe method and you'll see
370:28 - the snapshot of text reflect over here
370:30 - same thing goes with counts increments
370:33 - and decrements
370:35 - right so if you take a look at the
370:37 - Subscribe method of the data
370:40 - well it does not follow the store
370:43 - contract right
370:46 - um so three points about the subscribing
370:48 - right so first thing is that subscribe
370:51 - is an API so
370:53 - it's not an object data does not have
370:55 - that subscribe methods so probably we
370:57 - have to create an object that has this
370:59 - subscribe method so point two the
371:01 - Callback function does not calls with
371:04 - the
371:06 - uh
371:07 - state of the Star right you have to call
371:09 - an API to get the states right and then
371:12 - point three is that this thing uh does
371:16 - not call this copy function immediately
371:17 - right it calls
371:20 - so you have to initialize the data of
371:23 - the snapshot over here yourself
371:26 - right so
371:28 - because of all these three points we
371:30 - kind of have to make it have to turn
371:32 - this data into a spell store following
371:36 - the store contract
371:38 - so over here let's see what we can do
371:40 - over here so I'm gonna Define a function
371:42 - a util function I'm going to export
371:44 - function to
371:46 - svelt star
371:49 - right
371:50 - and then taking the proxy state
371:56 - and we're going to return an object so
371:58 - over here we are not going to change the
372:02 - star so we just make it readable which
372:04 - means we only need to implement the
372:06 - Subscribe method
372:09 - subscribed takes in a function
372:13 - which in this case we should subscribe
372:17 - directly to the
372:19 - proxy and return the Subscribe good
372:23 - thing is that it returns an unsubscribe
372:25 - method so we can return it directly as
372:27 - well
372:28 - so over here I'm gonna take a value then
372:31 - FN and I'm gonna get the snapshot of the
372:34 - store so snapshot let's say uh subscribe
372:38 - to the proxy state
372:43 - and then I'm going to call this with
372:45 - snapshot of the proxy state
372:49 - right and we also need to call this
372:52 - function immediately so I'm going to do
372:54 - it over here as well
372:56 - and here we have it so we're going to
372:59 - import this function from data
373:04 - and we're going to pass I'm going to get
373:06 - a new star
373:08 - uh snapshot star
373:12 - equals to do cell star and then data
373:15 - and then since this star follows the
373:18 - star contract we can use dollar prefix
373:20 - to assess the value of the store so I
373:24 - don't need Mount I don't need to do it
373:26 - or not anymore dollar prefix Value auto
373:29 - subscribes when the command component is
373:31 - mounted and unsubscribes when the
373:33 - component is unmounted so we can remove
373:35 - all of this
373:37 - uh remove on Mount as well and remove
373:41 - all the Subscribe snapshot everything so
373:44 - now I can use dollar prefix over here
373:47 - snapshot.com
373:49 - snapshot.tanks
373:51 - right and let's see it still works right
373:55 - it works fine as it's supposed to
373:59 - right so
374:01 - this is how you can convert a value
374:03 - proxy States into a swell saw following
374:07 - the star contract
374:09 - so one great thing about velto star is
374:12 - that you can uh any sub property or
374:17 - nested objects of the value store is
374:20 - also sorry of a value proxy state is
374:24 - still another it's another proxy state
374:26 - right so which means that you can
374:28 - actually subscribe to parts of the value
374:30 - store and ignore the rest of the things
374:33 - right what I mean is that for example
374:37 - over here
374:38 - say for example I have a dollar prefix
374:41 - which is a reactive statement where I'm
374:44 - going to console out every time the
374:46 - snapshot store has changed you're gonna
374:48 - see uh sorry let's see this
374:52 - change
374:55 - so every time the snapshot star values
374:57 - changes I'm gonna call this console log
375:01 - over here
375:04 - okay so when I
375:06 - every time when I change something you
375:07 - will see that
375:09 - your console out over here
375:11 - change your console out over here
375:14 - and if I type something over here it
375:16 - will console up as well
375:18 - right I'm not sure why it's consoled
375:20 - twice Let me refresh this
375:22 - probably it's of the Hot Wheel loading
375:26 - let me let me refresh
375:30 - and at the same time let me disable the
375:34 - heart reloading
375:36 - configuration
375:40 - sandbox config
375:43 - hot reload okay
375:48 - save close
375:50 - come back
375:52 - sorry for that
375:54 - okay I have my Applause felt and data.js
375:58 - collapse this
376:02 - let's see yeah whoops so so it's still
376:06 - called toy
376:08 - is it something wrong with the
376:10 - subscription let's see
376:13 - it's supposed to
376:16 - okay
376:17 - yeah only called once right
376:20 - when I change when I change the text you
376:22 - will see the console out when I change
376:24 - the account you'll see the console out
376:25 - right because you're subscribing the
376:27 - whole
376:28 - object right which contains both the
376:31 - count and the text but we can actually
376:33 - subscribe to only one of it right and
376:36 - that that is how
376:38 - a value star works right I can say the
376:42 - count snapshot
376:46 - I'm going to say data account
376:49 - and over here I'm gonna
376:51 - console.log
376:54 - change
377:02 - right because of hot reload hard reload
377:06 - it has to refresh itself every time so
377:08 - let's save again
377:11 - refresh
377:17 - or proxy objects ah I think I know why
377:19 - okay so I'm Gonna Change uh because this
377:23 - is a primitive so it can't do well with
377:26 - this let's say uh count
377:29 - value zero over here and we are going to
377:34 - change counts.value
377:36 - instead
377:41 - okay
377:43 - let's see
377:48 - Okay so
377:50 - okay by default we have a snapshot
377:53 - change and count change right so if we
377:56 - change anything over here
377:58 - you'll see snapshot and the count
377:59 - snapshot has changed so we kind of
378:02 - monitor that anytime when this uh when
378:05 - we change the count of value these two
378:07 - will be executed because the whole proxy
378:09 - state has changed right but if we type
378:12 - over here you see that only the snapshot
378:14 - store has changed but not the count
378:17 - snapshot because you just subscribes to
378:19 - a part of it which is only the count uh
378:24 - sub object right so whatever whenever
378:27 - the text is changed we don't care about
378:28 - it so this is one great thing about
378:31 - velto you can subscribe to a partial
378:34 - object of the whole entire proxy store
378:36 - because
378:38 - some the proxy state is made up of
378:41 - smaller proxy States so some object is
378:43 - also another proxy state right so one
378:45 - great thing about using valtio so would
378:47 - you consider using velto with swelts
378:50 - comments down below I would love to hear
378:53 - your thoughts about it
378:57 - svelt star allows us to have a state
379:01 - that does not binds to the hierarchy
379:04 - component hierarchy of your application
379:06 - you can have a spell store declared in a
379:09 - file and we can have all our different
379:11 - components imports from it so different
379:14 - components irrelevant on the hierarchy
379:16 - within that application can share the
379:19 - same States
379:21 - right but spell store itself has is very
379:26 - flexible it does not care about how you
379:28 - update it or use it right it's a very
379:32 - simple construct that allows us to
379:34 - subscribe to the changes of the store
379:36 - itself and get updates from it and
379:40 - because of the star follows a star
379:42 - contract we can have a very simple
379:44 - dollar prefix variable syntax to access
379:47 - the value of the star and auto
379:49 - subscribing to the store itself so that
379:52 - whenever it's changed the value the
379:54 - value of the variable will get updated
379:55 - itself
379:57 - so if you are coming up with a more
380:00 - complex application and you are thinking
380:02 - about using some other libraries like
380:04 - State Management libraries or state
380:06 - machines to control your States
380:09 - then you you might think that maybe if
380:13 - that's the case then are we losing out
380:15 - I'm not able to Leach on uh using this
380:20 - dollar prefix variable syntax well maybe
380:24 - not as long as we can make the library
380:27 - itself follows the store contract then
380:29 - we can actually leverage this on the
380:32 - spell dollar prefix syntax to subscribe
380:35 - to the value of whatever libraries that
380:37 - you are using so that you can have a
380:39 - control in terms of how the state
380:42 - changes from one to another yet at the
380:44 - same time when you're using it you can
380:46 - still use a dollar prefix syntax to get
380:49 - updated every time whenever the state
380:52 - has changed so today we're going to look
380:54 - at one state machine library that has
380:56 - gained some hype in the JavaScript World
380:58 - recently which is exit
381:01 - so right now we are looking at the
381:04 - GitHub page of X dates says that it is a
381:07 - state machines and state charts for the
381:09 - modern web
381:10 - and as you scroll down below you'll see
381:12 - that it has a lot of sub packages such
381:15 - as the finite State machine for x-state
381:18 - utilities or hooks for react for View
381:21 - and testing libraries and inspection
381:25 - utilities
381:26 - and a lot of templates that you can get
381:28 - started with as well as the x-state with
381:31 - spell template over here let's take a
381:33 - look at on the docs or apis so over here
381:37 - we have open up X States apis you can
381:41 - see a quick start guide will be
381:43 - installing exit and creating a state
381:46 - machine uh so I'm not going to delve
381:48 - into how you're gonna do that
381:50 - but uh so we we can start with uh
381:54 - defining the state machines and then we
381:56 - interpret the machines which when you
381:58 - run starts it will give you a service
382:00 - where you can send actions
382:04 - um to to stop to transition from one
382:07 - state to another
382:08 - and you can and then this service you
382:11 - can based on the service value you can
382:13 - know whether which state are you at
382:15 - currently right now right so I have
382:19 - started this I've copied all over this
382:22 - into a spell code so over here I have
382:26 - data.js which has defined the state
382:28 - machine and have started the machines
382:31 - like the docs have said uh specified
382:34 - and over here with toggle service it has
382:37 - apparently a subscribe method which give
382:39 - us the current state
382:41 - and this States uh so we assign the
382:45 - states to the the current state
382:47 - and so we can use the states have which
382:51 - has methods like matches to tell us
382:53 - whether it matches whether the state
382:55 - currently is an interactive or active
382:58 - right as well as it has like uh it
383:01 - returns enough subscribe methods and
383:04 - to sense actions with toggling the
383:07 - service like send toggle and stuff so if
383:10 - we take a look at this toggle service
383:11 - variable does it follow the spell store
383:15 - contract
383:16 - well okay let's see so first of all it
383:19 - has a subscribe method check once
383:23 - and the function within the Subscribe
383:26 - methods has one parameter which is the
383:28 - states which is the state that it will
383:31 - you get check two right
383:34 - then if you can see here the Subscribe
383:37 - method this function get called
383:38 - immediately right so I I just do this I
383:42 - don't have to initialize the value of
383:43 - States but right over here when you
383:45 - console out you can see the state
383:47 - already which means the moment when you
383:50 - call subscribed this function will be
383:52 - get called and it will update the
383:53 - variable States
383:55 - right check 3 which means
383:58 - um yeah it the the function itself will
384:00 - get called synchronously immediately
384:01 - when you start subscribing it
384:04 - right then this function variable itself
384:07 - when you call subscribe it should return
384:08 - a function
384:09 - uh which is the unsubscribe which you
384:11 - can call to unsubscribe uh the service
384:15 - check for basically as the basic
384:19 - mandatory of get of a star contract
384:21 - having the Subscribe method that
384:23 - fulfills all this check which means it
384:25 - is following the star contract
384:29 - what does that mean means that actually
384:31 - you can use dollar prefix syntax of this
384:34 - toggle service and actually gets the
384:36 - state value immediately right so over
384:39 - here instead of state which is the value
384:41 - from this state we can use toggle
384:44 - service
384:47 - but with a dollar prefix which is
384:49 - getting the value of this uh the service
384:52 - or the states of your ex State service
384:55 - right and let's try and see everything
384:59 - works still still works fine which means
385:02 - that we can remove all this code
385:04 - uh remove on Destroy remove all this
385:08 - and everything still works
385:12 - as expected
385:15 - let's see let's refresh yeah everything
385:17 - still works so very simple nothing much
385:20 - to do for using a x-state uh install
385:23 - because the exit service has already
385:26 - been following spell store contract and
385:30 - that's so easy to use sexted in svelt
385:36 - so in the previous videos we have seen
385:39 - what is a store and how do we can create
385:41 - a custom source and we have seen
385:44 - examples on how we create custom stores
385:47 - out of application State libraries out
385:50 - there we converted a Redux store
385:54 - um valtio States state machines ex State
385:58 - machines into svelt's custom store
386:01 - and today we're going to look into how
386:04 - we can actually convert Dom events like
386:08 - a state of a Dom events into a svelt
386:10 - customs Customs felt store Oswald custom
386:14 - store well I'm not really sure which one
386:16 - is grammatically correct but anyway in
386:20 - this example I'm going to show you is
386:22 - we're going to use Mouse events so every
386:25 - time when you move your mouse you
386:27 - probably want to record the mouse uh X
386:29 - position and Y position right so you
386:32 - probably would have
386:34 - um
386:35 - and event listeners as you can see over
386:37 - here we use a mouse move event listeners
386:40 - and we use a client X and client y value
386:44 - and we'll assign it to a variable X and
386:46 - Y over here
386:48 - right and we use these two variables
386:50 - over here where we trying to say show it
386:53 - on the screen or you can in the other
386:56 - hand maybe use like a reactive
386:59 - statements where you do something with
387:01 - the X and Y position
387:04 - right so in this example we're going to
387:06 - look at how we can
387:09 - um instead of having to have like X and
387:12 - Y variables you try to extract out all
387:15 - this into a field store
387:18 - because as you can see over here it
387:20 - behaves pretty much similar as well star
387:25 - um for example we when the component is
387:28 - mounting we listen to something right
387:31 - it's akin to spell store where it starts
387:33 - or subscribes to something
387:35 - and as we unmount we unsubscribe
387:38 - unlisten oops this this should be
387:41 - removed even listeners so we are remove
387:43 - event listeners which akin to
387:46 - unsubscribing from a spell store
387:48 - right and over here whenever there's
387:51 - something change we update the variable
387:53 - X and Y
387:55 - so it could be like a value of your
387:57 - store which probably have X and Y
388:00 - properties so your store is like an
388:01 - object which have X and Y properties so
388:04 - every time something has changed like a
388:06 - mouse move then the X and Y value should
388:09 - updates and you should get no about it
388:11 - right so that is pretty much like a
388:14 - spell Store where the value is updating
388:16 - every time something has happened
388:19 - so we can encapsulate this logic over
388:22 - here into a svelt store
388:24 - so that you can reuse this you don't
388:27 - have to always like declare X and Y
388:28 - variable and then write all this thing
388:30 - over here and hopefully it updates X and
388:32 - Y variables and do all this stuff we can
388:36 - take all this and convert it into a
388:38 - spelled store so that's what I'm gonna
388:40 - do over here right now so I'm going to
388:42 - create a new file called Mouse position
388:46 - dot Js
388:47 - and I am going to copy all this over
388:50 - here right now
388:52 - so we don't have an on Mount but we have
388:55 - a move event listener
388:57 - and yeah we have all this
389:00 - uh remove so we're gonna take care of
389:04 - when to call this remove event listeners
389:06 - right now
389:07 - and I think we can start with
389:11 - uh creating a star right A Star is an
389:15 - object that follows the store contract
389:18 - uh you can have subscribe method
389:21 - as well as the sets methods in our case
389:24 - we don't have to set anything right the
389:26 - set is we don't allow anyone else to set
389:30 - the value of the store which is the X
389:31 - and Y position of a mouse no one says
389:33 - that uh you only updates it so you only
389:35 - reads from it so it doesn't implement
389:38 - the sets when you do the subscribe so
389:40 - we're gonna pass in a function and we're
389:42 - gonna need to call this function
389:43 - immediately with like the value so value
389:46 - over here I'm going to say mouse
389:49 - position but we're going to Define this
389:51 - we're here right now
389:53 - so I'm going to say mouse position
389:55 - whoops
389:57 - uh so I'm going to initialize it with x
390:00 - equals to 0 and Y is 0 at first
390:05 - right and then something something
390:07 - happened and when that happens okay I
390:11 - think we can add event listeners over
390:12 - here
390:14 - Mouse move and then
390:17 - uh move so move it's gonna copy over
390:21 - here
390:22 - move
390:25 - right and then we should return a
390:27 - function to unsubscribed right so return
390:30 - a function so this function should
390:33 - unsubscribe from yeah the doc body so
390:36 - let's say remove event listener
390:40 - we're here whenever we have X and Y
390:42 - position we are going to call the
390:45 - function again to update right I'm going
390:48 - to say uh
390:50 - X
390:51 - is the event client X
390:54 - and Y is the event client y
391:00 - right let me remove all this clean this
391:03 - up I think actually we might not need
391:05 - this variable over here I'm gonna copy
391:07 - all this over here right now remove this
391:12 - uh remove this as well and I'm gonna
391:15 - call this with uh the default uh it may
391:18 - be initial is the X and Y is zero right
391:25 - okay and I think that's done so let's
391:28 - export default
391:30 - a star
391:32 - and let's import this star uh so let's
391:36 - see
391:37 - it's Mouse position
391:40 - from Mouse position
391:44 - and let's remove all this you don't need
391:47 - any more
391:50 - and since this is a star
391:53 - it follows a star contract
391:55 - we can use dollar prefix of this to
391:57 - access the value of the mouse position
392:01 - as you can see here the value has
392:03 - changed can move around yeah you can see
392:06 - it it works right
392:08 - so um and good thing about it is that we
392:12 - can have another component say over here
392:14 - I'm going to say uh ciao
392:16 - from ciao
392:19 - dot spelled
392:22 - I'm gonna render this component over
392:24 - here
392:25 - create a child or spells
392:28 - and we can also subscribe to this uh
392:33 - Mouse position store over here I'm gonna
392:36 - say children
392:45 - uh create a line break over here I think
392:48 - it's
392:48 - yeah I'll create a div to wrap all this
392:50 - thing up
392:55 - and yeah
392:57 - both of them works fine
392:59 - uh that's yeah sorry I have my camera
393:02 - over here so it blocks my sights but
393:05 - yeah as you can see over here it works
393:07 - fine right except that if you actually
393:10 - scrutinize this
393:12 - probably even ask me like every time you
393:14 - subscribe you listen to the body uh you
393:17 - listened to event listeners every time
393:19 - you subscribed wow um isn't that a lot
393:22 - of event listeners
393:24 - um yeah you're right every time I create
393:26 - a new event listeners I create a new
393:28 - move function so
393:29 - there is uh there is as many
393:33 - um Mouse move event listeners as num is
393:37 - the same number of how many uh new
393:40 - subscriptions I have so over here I have
393:42 - one in a child and one in the app.spel
393:44 - so there's two I create two more smooth
393:46 - event listeners so is there a way to
393:49 - improve this I mean yes we can do it one
393:52 - better as in probably we can say for
393:55 - example collect all these functions and
393:57 - then we only create event listeners once
394:00 - if it's the first time subscribing so
394:03 - let's let's Okay let me type while I'm
394:05 - saying all this so that you can have a
394:08 - better understanding of whether uh grasp
394:11 - of what I'm trying to say over here so
394:13 - probably I have a variable called
394:14 - subscribers
394:16 - um so every time when I subscribe I will
394:19 - gonna
394:19 - what I'm going to do is um I'm gonna
394:22 - push this function
394:23 - that push into function so every time
394:27 - uh subscribing I will
394:31 - add this new function to the array right
394:33 - over here I'm gonna have a variable
394:36 - called Mouse position
394:38 - so this is like telling me the last uh
394:41 - I'm gonna say this is like the last
394:43 - Mouse position
394:44 - right so I'm going to have uh so this is
394:51 - so I'm going to call this from here
394:54 - but we're going to update this mouse
394:56 - position later on as well so this is
394:58 - kind of like the last Mouse position
395:05 - right and over here I'm going to move
395:07 - this uh add event listeners into
395:10 - um
395:11 - a function on its own
395:13 - so I'm going to say setup uh setup event
395:18 - listener
395:21 - and I'm gonna say uh remove
395:24 - event listener
395:28 - so over here
395:33 - set up okay so I'm gonna have a variable
395:35 - called uh is set up equals to false so I
395:41 - can call this setup event listeners
395:42 - multiple times over here
395:45 - but if it's already set up
395:49 - then I will not do anything I'll return
395:51 - immediately but if it's not then I'm
395:54 - going to set this as a true first and
395:56 - then we're gonna set event listeners uh
395:58 - to listen over here
396:02 - um so this is like we only set once uh
396:05 - if it's not set up so you only have one
396:07 - event listeners listening so on a move
396:10 - event what I'm gonna do over here move
396:13 - as I am going to visit this text in an
396:17 - event
396:18 - I'm going to Loop through all the
396:19 - subscribers
396:22 - for each subscriber
396:26 - okay so first thing is I actually need
396:28 - to read out the X and Y position
396:32 - so over here I am going to update the
396:35 - last Mouse position
396:38 - now x equals to this
396:41 - and last Mouse position dot y equals
396:45 - this
396:46 - so the next time when you subscribe
396:48 - later on you don't get zero zero again
396:51 - you get the last Mouse position uh that
396:54 - we have collected so far
396:57 - um so over here I reset it and so for
396:59 - each subscriber
397:01 - is a function that we push into the
397:03 - array we're going to call it with last
397:05 - Mouse position
397:07 - okay so that is it for move
397:11 - and when we want to remove event
397:13 - listener uh is we're going to call this
397:16 - every time
397:19 - when uh in the return function right so
397:23 - this it will be called as many time
397:26 - um
397:28 - as many times as you unsubscribe so
397:31 - first thing is we need to remove splice
397:34 - uh
397:36 - subscribers dot index of
397:40 - the function
397:45 - uh one item we remove that one item and
397:49 - then
397:50 - um if okay if if only when we have no
397:56 - more subscribers
397:58 - and then we remove the event listener
398:02 - right so in this case remove event
398:04 - listener will be
398:06 - document body dot remove
398:09 - event listener Mouse move move
398:12 - right so now if you look at this code
398:15 - now again
398:17 - we are subscribing uh we're only setting
398:21 - up if once once it's set up we are not
398:25 - going to set up anymore I think we need
398:27 - to also okay over here we're gonna say
398:28 - setup is false since we already tear it
398:30 - down so when you set it only once so how
398:33 - many times when you call this setup in
398:34 - event listener doesn't matter we only do
398:37 - it once when we add event listener once
398:40 - right and tear down we're gonna check
398:42 - only if the last one is removed we don't
398:45 - have any subscribers left only we remove
398:48 - event listeners so we are going to tear
398:51 - it down and then we see the setup is
398:53 - false so that next time whenever we have
398:54 - a new subscribers we're gonna set it up
398:56 - again at event listeners right so over
398:59 - here now Mouse move still works but
399:01 - Mouse move only will only have one Mouse
399:04 - moves event for this entire store
399:07 - and yeah this is quite lengthy code if
399:12 - you ask me
399:13 - so is there a better way of doing it of
399:17 - course right I've been setting up all
399:19 - this just to tell you that actually you
399:21 - don't have to write all of this because
399:24 - this has already been done by readable
399:26 - star all this setup like setting up
399:30 - event listeners if only setup only said
399:32 - at once and things like that should have
399:34 - just been already written up all this
399:36 - logic has already written up uh by the
399:38 - readable store you don't even have to
399:40 - maintain like the list of subscribers
399:42 - and push it in and stuff like that so
399:45 - let me show you how you can do it
399:46 - instead so import readable
399:49 - from svelt Star
399:53 - and in States so I'm gonna remove I'm
399:55 - gonna comment only so that you know if
399:58 - you want to read this code uh The Links
400:00 - of this Rebel will be in the description
400:02 - so that you can still read all this so
400:05 - I'm going to remove comment out and I'm
400:07 - gonna create a new one spot default
400:10 - readable and this is the initial value
400:13 - so when we say initial value is x is 0 Y
400:16 - is zero
400:17 - and then this is a function
400:20 - where it has a set
400:22 - parameter so uh as I've said in the
400:25 - readable store video this function will
400:28 - only be called whenever you have only
400:29 - have when you are starting from zero to
400:32 - one subscriber you will be called and
400:34 - then you can return a function
400:36 - which will be called whenever
400:39 - um
400:40 - The View you you your subscribers is
400:43 - removed unsubscribing from until zero so
400:46 - when you have zero subscribers and the
400:48 - return function will call exactly as a
400:50 - logic that we have mentioned earlier on
400:53 - so over here we can copy like uh this
400:56 - over here event listeners at move
400:59 - and remove event listener click here for
401:03 - remove
401:04 - and lastly for the move events copy over
401:08 - here
401:10 - whoops
401:11 - uh we we need we need these two and we
401:16 - don't have to Loop through all the
401:18 - subscribers because the sets will do it
401:21 - for us to go set why
401:25 - is this but we call a set with an object
401:27 - which as the X as the client X and Y has
401:32 - the client why
401:36 - right we call this sets it will handle
401:39 - everything for us we don't have to worry
401:41 - about it
401:43 - uh let's see what's wrong over here okay
401:45 - this right set has handled everything
401:47 - for us we don't even need to manage the
401:50 - subscriber list everything is handled
401:52 - and as you can see here everything work
401:54 - still works fine as previously
401:57 - right so I'm Gonna Keep both of this
401:59 - code over here for you to have a read
402:01 - links in the description
402:04 - so yup you can use you can convert a Dom
402:08 - event uh anything that you are listening
402:10 - from a Dom events like a mouse position
402:12 - scroll position or intersection Observer
402:16 - whether it's observing or not observing
402:18 - the values of it everything any
402:21 - snapshots of like the Dom events can be
402:25 - used as a store value and you can
402:27 - subscribe to it like how you listen to
402:30 - The Domain listen to what the value is
402:32 - right so with by making it following a
402:36 - stock contract uh by implementing
402:38 - yourself or using the readable
402:40 - this allows you to use the dollar prefix
402:43 - variable syntax to read the value of the
402:45 - star and take care of all the
402:48 - subscription from the store itself
402:53 - today we are going to look at one more
402:56 - Library which is emergs so Emer allows
403:01 - us to make
403:03 - um
403:03 - an object to become like an immutable
403:05 - object allow us to work with immutable
403:09 - states with very convenient API
403:12 - so right now I'm at its um documentation
403:15 - it says that it's based on a copy on
403:18 - rights mechanism I'm not really sure
403:21 - what it means but a basic idea is that
403:24 - you have a current object
403:26 - and then you can apply
403:29 - um changes to a temporary draft so over
403:32 - here you have a draft object which you
403:35 - make changes on there you can make
403:36 - mutations but it will not affect your
403:39 - current object and then once all the
403:41 - mutations are complete you can apply all
403:45 - them and create and gives you a next
403:47 - state
403:48 - so current and next are immutable you
403:51 - don't change them and you only change
403:53 - the draft
403:55 - so this allows you to make changes make
403:58 - mutations uh
404:00 - easy mutations while still keeping
404:03 - making sure that current and next are
404:05 - still immutable
404:08 - so um
404:10 - let's take a quick look at like the API
404:13 - of emerges so over here you import
404:17 - produce
404:19 - and you have a base state
404:22 - and you call Produce with the base stage
404:24 - which in this case is the current state
404:26 - and then it gives you a draft state so
404:29 - you can make changes on the draft States
404:31 - anyway you like for example pushing a
404:33 - new item to the array or marking sump
404:38 - object as done
404:40 - and when it returns this whole produce
404:44 - when this function ends will be and then
404:47 - it will be returned by this produce will
404:49 - gives you a new next state
404:51 - and you can ensure that the base state
404:53 - is unchanged everything in base state is
404:56 - still the same everything in the next
404:57 - state is already changed so if you keep
405:00 - the snapshot of pasted and next state
405:02 - you kind of able to time travel to the
405:05 - previous state or the current state
405:08 - so we're gonna take a look at how we can
405:10 - use it in the svelt and I have already
405:14 - prepared a simple example over here
405:17 - uh in the spell repo
405:20 - so over here I have a state with two
405:23 - users user one and user two which has a
405:26 - different first name and last name so
405:28 - um and over here I when I'm gonna change
405:32 - the name I use emergency as produce
405:36 - so I said produce if the current states
405:38 - and then I give us a drop State and I
405:40 - can mutate to the draft State anyway I
405:42 - like it
405:43 - and it will return me a next date
405:47 - ah so same thing goes with all the last
405:49 - name and over here I copy and paste all
405:52 - this for over four inputs and as you can
405:55 - see here
405:56 - um over here I'm going to show the
405:58 - states
405:59 - um user one or user 2. first name and
406:01 - last name so when I type something see
406:04 - I'm gonna say hello then this will be
406:07 - changed immediately right
406:09 - and because it's immutable
406:12 - you are not if we keep a reference of
406:15 - the previous state
406:16 - and and then the next current states
406:19 - actually there are different objects
406:22 - and so if you compare for example
406:24 - previous States equals to current state
406:29 - what you can see is that so initial
406:32 - initially it's they're all true but when
406:34 - you change something you can see that
406:36 - the previous state and the next state is
406:37 - two different objects we are not
406:39 - mutating on the same object compared by
406:41 - reference the I3 difference
406:44 - and one great thing about Emer is also
406:47 - that it will make sure that if you're
406:49 - only changing user one
406:51 - then only a new object created for user
406:54 - one but the user 2 reference since we
406:57 - are not changing it is still referencing
406:58 - the same object so previous state user 2
407:01 - equals the current state user 2 is still
407:03 - the same right so if I change anywhere I
407:04 - like this is still true and if I change
407:08 - user 2 you can see that now user 1 is
407:12 - always
407:12 - the same right the reference of the
407:15 - object is still always the same
407:17 - so uh this is this is Emer
407:21 - and let's take a look how we can make it
407:24 - converted into a spell store by
407:27 - following a spell store contract
407:29 - so first thing is I'm going to create a
407:31 - function
407:33 - uh
407:34 - let me see
407:36 - get Emer
407:38 - star
407:40 - and I'm going to pass in an object
407:43 - so over here there's two things one is
407:46 - actually
407:49 - um the draft
407:51 - right the draft State and which we can
407:53 - change it directly and the next thing is
407:56 - the base the states
407:59 - so it feels like there's we can have
408:02 - like a tool store approach where we have
408:04 - a draft store and a current store uh the
408:07 - state store
408:08 - so if we can make if you can have a
408:12 - draft as a store you can make changes to
408:14 - it directly
408:16 - and then for the base store the states
408:20 - actually is another store once when we
408:22 - are done with all the changes we can get
408:26 - a new state and this will get updated to
408:29 - it
408:31 - um it sounds complicated I'm not quite
408:33 - sure but let's take a look over here
408:35 - right so
408:37 - um how do we get a draft so from what I
408:40 - can see over here let's take a look at
408:42 - all the apis
408:45 - there's a create draft
408:47 - uh probably you can use it we can use a
408:50 - create draft let's take a look over here
408:52 - create drafts
408:55 - so you can create a draft along object
408:57 - you can make all the changes we want and
408:59 - then we call Finish draft which returns
409:02 - us a new hopefully this is a new user
409:05 - right which is a new state okay so let's
409:07 - let's create two stars so first is the
409:10 - draft
409:11 - star
409:13 - which is an object and the state star
409:17 - same object so a star is an object that
409:21 - follows the store contract and if you
409:24 - can still remember the store contract
409:26 - says that uh you
409:30 - need to implement the Subscribe methods
409:33 - which takes in a function
409:36 - so I'm going to implement that
409:39 - and the Subscribe method should be
409:42 - called the function being passed in the
409:43 - Subscribe method should be called
409:44 - immediately
409:46 - so over here I'm going to call
409:47 - immediately but I haven't figured out
409:49 - what to call or what value to be passed
409:51 - in
409:53 - for the states I think we just call pass
409:55 - in this right
409:58 - um and then for the draft okay so let's
410:00 - probably let's create a variable so
410:02 - let's Stitch equals to object
410:06 - and let's uh draft equals to create
410:10 - draft
410:11 - object or hostage
410:14 - I'm going to import create draft
410:16 - from Emer and also finish draft
410:24 - so since I will use State variable I
410:27 - just used States so this is the draft
410:31 - so the function has to be called
410:32 - immediately
410:34 - and then you need to return uh
410:38 - a function to unsubscribe your store
410:42 - so I need to return a function
410:46 - which means that I need to keep track of
410:48 - the function so probably let's create an
410:50 - array over here uh so draft Subs
410:54 - cribers
410:57 - we make it a set so that it's easier to
411:00 - retake it and remove so same thing for
411:03 - the state subscribers
411:07 - so I'm gonna say uh
411:10 - add function
411:12 - and over here I'm gonna say dot delete
411:15 - function
411:20 - so same thing goes uh come up here oops
411:25 - uh State subscribers
411:30 - now return the function
411:32 - that I
411:35 - delete the function right so okay so we
411:41 - we have a subscribe method taking a
411:43 - function call a function synchronously
411:45 - written the unsubscribe method all right
411:48 - everything looks fine and then
411:51 - um optionally optionally you can have a
411:54 - set step set method so I'm going to
411:57 - implement it for this draft because we
411:59 - can set something on the draft so value
412:03 - so hopefully this is like the new value
412:06 - but
412:07 - um I'm not quite sure uh so a new new
412:10 - draft right
412:13 - not quite sure how we're going to use it
412:15 - for now I'm gonna say to do
412:17 - uh but we're gonna not change we're
412:19 - gonna not allow to set anything on a
412:21 - state uh because it's suppose it's meant
412:24 - to be immutable it's meant to be uh
412:26 - readable only
412:28 - so okay we are done with here I'm gonna
412:31 - return this to written an array of uh
412:35 - State star
412:37 - and the draft
412:39 - star
412:43 - so outside over here I am gonna
412:47 - um since over here is gonna call this
412:49 - States and draft
412:54 - and I say create email
412:58 - star
413:06 - Okay so
413:10 - um so we still use this over here
413:12 - um so to get the value of the state
413:14 - probably is like dollar prefix because
413:17 - it follows
413:19 - I think I named immerse store
413:22 - because it follows a store contract we
413:25 - can use the dollar prefix variable to
413:27 - access the value of the star
413:28 - so over here we can access it with that
413:31 - dollar States same thing goes from here
413:33 - and here
413:37 - and over here what we want to do okay
413:39 - here I think uh State as well
413:46 - but over here what we want to do
413:48 - differently is that we want to actually
413:50 - use the draft store
413:52 - to actually change it so uh we use do
413:57 - this over here
413:58 - I think we remove this as well
414:01 - right
414:02 - um over here as well uh draft store
414:12 - over here
414:18 - okay draft star
414:21 - um
414:21 - [Music]
414:23 - let's see
414:26 - I think this is irrelevant now let's
414:29 - let's uncomment this for now
414:33 - uh okay let's type something
414:36 - updated because we changed the draft so
414:39 - this is uh hopefully this is going to be
414:41 - called so I'm gonna say console log
414:43 - value over here
414:45 - this is being called
414:47 - uh I think it's an object it's a draft
414:50 - object so that you can see it but it's
414:52 - being called so over here what we need
414:55 - to do is that we will have to
414:58 - um
414:59 - finish the draft and then get the new
415:01 - States but not immediately we can do it
415:04 - in a debounced way
415:06 - so which means is that we can allow
415:12 - uh
415:14 - setting multiple times over and then we
415:17 - update the states at once right so we're
415:21 - just gonna set like a set timeout
415:26 - uh set timeouts
415:31 - and over here we are saying uh finish
415:35 - draft
415:37 - value
415:39 - okay so this is this should be the value
415:44 - so this is the new state so when I say
415:48 - State equals to this
415:50 - and then draft since it's already
415:52 - finished we're going to create a new
415:53 - drop so uh draft
415:56 - here state
416:00 - and then
416:01 - um
416:02 - I need to
416:07 - notify all the subscribers I'm going to
416:10 - come over here drop subscribers dot uh
416:13 - for each
416:19 - and call it with the draft object
416:23 - and do the same thing for the state
416:26 - subscribers
416:28 - call it with a new state
416:33 - and
416:35 - we want to debounce this right so okay
416:37 - so timeout we're gonna say say let's say
416:39 - for 500 milliseconds only we change it
416:42 - and we want to debounce this meaning um
416:44 - if you type it multiple times We're not
416:47 - gonna like five times we're gonna not
416:49 - set five timeouts and Trigger this like
416:52 - in sequence five times we're actually
416:54 - gonna cancel the previous timeout so we
416:56 - type five times and then only the last
416:59 - one will wait for 500 milliseconds and
417:01 - then trigger so all the changes are
417:03 - batched in one time one go
417:06 - so over here I'm gonna get the timer ID
417:13 - equals now
417:16 - so if timer ID
417:19 - then we got clear timeouts so this is
417:22 - going to clear the previous timeout
417:26 - and and then if we successfully trigger
417:29 - a timeout then we set it to null then
417:31 - we're not gonna clear timeout right so
417:34 - here I'm gonna declare the timeout ID
417:39 - and let's take a look at what we have
417:42 - done so far so over here I'm going to
417:44 - change something and in 500 milliseconds
417:47 - this is going to be updated so if you
417:49 - feel it's a bit slow it sets it to 100
417:52 - sorry
417:54 - and let's type right it feels
417:57 - immediately
417:58 - um so what we have we achieved so far we
418:00 - make it like a store uh contract that
418:03 - allows us to use the sets method to like
418:06 - update the draft immediately
418:08 - but what's good about using email
418:12 - um does it like justify all this uh
418:16 - boiler extra piece of code
418:20 - so I'm going to show you something
418:22 - called immutability right so for example
418:26 - um hopefully because that over here when
418:29 - we see that if after updates the
418:31 - previous stage is not changed then
418:34 - uh user if boosted for user one is not
418:38 - changed you can see that it's it's not
418:40 - updated right so over here what we want
418:43 - to do something similar as well gonna
418:45 - say uh
418:47 - previous state is equals to the value of
418:49 - the state
418:52 - and come over here uh we can compare it
418:55 - again
419:01 - and we can see that
419:04 - um
419:06 - because of immutability this is not this
419:10 - is referring to the same uh still
419:13 - referring to the same object this is
419:15 - false this is true so which means that
419:17 - this object itself is not uh
419:22 - create a new object right the reference
419:24 - of the object is still the same
419:26 - but because of how uh spell works if you
419:30 - have a reactive declaration and if you
419:33 - try to console out say uh state
419:38 - user one
419:41 - this is gonna be called every time even
419:44 - if you're not updated in you are not
419:46 - updating it right you kind of expect
419:48 - that this
419:50 - since it's the same uh you shouldn't
419:52 - console out anymore
419:54 - right but because of how this felt works
419:57 - is that as long as the states is
420:00 - the same is different then this will be
420:03 - called
420:05 - so because this is always going to be
420:07 - false if we're going to update something
420:08 - then
420:10 - yeah then it's too bad for us
420:12 - so we can use something called derive
420:15 - from spell star which we can
420:19 - try to
420:24 - the revenue store
420:26 - out of the current store
420:29 - so for example I'm going to come here
420:31 - this is a lot of
420:34 - boilerplate code
420:36 - um it's
420:37 - uh it's meant for just for your example
420:41 - education purpose
420:43 - um you you shouldn't you don't have to
420:44 - do this for a very simple application
420:46 - but just bear with me let me show you
420:49 - like what this will leads us do
420:52 - all right so over here I can create two
420:54 - derived Stars so if one is the user one
420:57 - I'm deriving from the
421:00 - the store uh the states and then
421:04 - can return the value which is
421:08 - state.user1
421:10 - so this gives us a new store which is
421:13 - the user one it's a derived star so this
421:16 - is giving us a new store uh by creating
421:20 - like uh coming out from deriving from
421:22 - another store which is the the hosted
421:24 - and give us the state DOT user one
421:27 - right and so this user one is another
421:30 - store and we can create another store
421:32 - called user2
421:34 - and over here let's try console out
421:37 - again
421:41 - so in this time round you kind of hope
421:45 - that
421:46 - uh this shouldn't be
421:50 - user one shouldn't be called again when
421:52 - if you are updating user 2 and user 2
421:55 - should be called when we're trying to
421:56 - update user one so let's see is that
421:59 - holds true so I'm gonna type something
422:01 - over here
422:02 - but two bets uh user one and user 2 is
422:05 - still being called
422:06 - um
422:08 - uh yeah it so it's kind of like
422:12 - what's the point like even if you know
422:14 - that user one is still the same object
422:17 - you like by using email we make sure
422:20 - that it's exactly the same object we
422:21 - don't change it we don't mutate it but
422:24 - it's still that uh it's still telling us
422:26 - that
422:28 - uh either one has changed
422:31 - well that's because by default uh
422:33 - spelled allows you to mutate objects
422:36 - directly does not know that you are
422:38 - trying to do something immutable so any
422:41 - changes to an object uh anything that
422:45 - they assume that has changes to an
422:47 - object is a change and you will try to
422:50 - console this out right meaning even if
422:53 - it does not actually check whether it's
422:55 - a strict referential equality it just
422:59 - says that oh if this is object then I
423:01 - assume that this has changed because you
423:03 - cannot mutate it and the object
423:04 - reference is still the same and we have
423:06 - no way to know that whether it's a
423:07 - change or not so any object when you
423:10 - kind of feel that it's changed and
423:12 - because in user one is it feels that it
423:15 - has changed because state has changed so
423:16 - user probably has changed and because of
423:19 - that uh we're gonna re execute this
423:22 - statement
423:24 - and we do it for this as well
423:27 - and I have said that this is because uh
423:30 - you can uh spell assumes that you are
423:32 - trying to make things uh you're gonna
423:33 - try to mutate an object
423:35 - and if you can cancel that we're not
423:38 - going to mutate any objects whatever we
423:40 - do over here we're gonna make any state
423:42 - changes over here uh gonna be immutable
423:46 - then you can use a strict equality
423:49 - referential equality to compare an
423:51 - object if it's exactly the same uh
423:55 -  assume that um no changes has to
423:58 - be made don't have to assume that uh
424:00 - yeah you can assume that no
424:02 - changes has to be made you don't have to
424:04 - do that weird uh stuff that assumes that
424:07 - as long as an object you kind of assume
424:10 - has something has changed so what that
424:12 - means is that you can use you're trying
424:14 - to tell felt it is immutable and how do
424:20 - we do that we can use a Spell option
424:24 - called immutable true
424:26 - this tells felt that any changes made in
424:29 - any states
424:30 - it's going to be immutable so you use uh
424:34 - so if user one uh this reference if
424:38 - they're referring to this like and I
424:40 - read changes when you see on user one if
424:42 - they are still the same exact object
424:46 - triple equals the same then
424:49 - it has no changes because if you're
424:52 - going to make a changes it's gonna be a
424:54 - new object
424:55 - so let's come back over here and let's
424:57 - try to type something
424:58 - Mary can see something's different now
425:01 - when you change on user wants user 2 is
425:04 - no longer console log anymore if we
425:06 - change on user true we don't see any
425:08 - console log on user 1 anymore
425:11 - right
425:12 - um
425:12 - so image.js has helped us to create an
425:16 - immutable a new immutable object
425:19 - um over here
425:21 - and because of email JS we can still
425:26 - make changes like they are immutable uh
425:29 - because we are mutating the draft object
425:32 - we are rotating the draft state
425:35 - and whenever uh once we have changed
425:39 - something on the draft States uh the
425:41 - sets method of the draft store will be
425:43 - called
425:44 - and we debounce it
425:46 - um just for performance sake we debounce
425:49 - it and once uh and then we notify that
425:53 - okay uh all these changes that you have
425:56 - made on the draft State should be
425:58 - applied and
426:01 - uh use it as the should be applied and
426:04 - then you
426:06 - create a new immutable state right so
426:09 - this is like finish the draft and create
426:11 - a new immutable State and because it's
426:13 - immutable we are not changing the
426:15 - previous state uh the reference if
426:18 - there's changes the reference to that
426:20 - object will be there will be different
426:22 - because we're going to create a new
426:23 - object
426:25 - um so over here if you change user two
426:28 - you only see console log of user 2 user
426:31 - one is always the same reference object
426:34 - it's no changes
426:36 - uh so you don't see a console off right
426:38 - there
426:39 - and and then
426:42 - and we also have to tell svelt that we
426:44 - when we make changes we actually make
426:46 - make changes immutably so by passing in
426:49 - options called immutable equals to true
426:54 - so
426:55 - um before we end this let's make let me
426:57 - show you one more thing that you can do
426:58 - with Emer which is in Emer uh you can
427:02 - have patches
427:05 - so to enable patches we need to enable
427:08 - it first
427:10 - it's gonna come over here and paste
427:12 - these two lines over here so we enable
427:14 - patches
427:17 - and with patches we can
427:21 - uh
427:23 - when we we can apply patches
427:26 - right what that means is that
427:29 - um I think in the finished draft method
427:34 - finish draft method we can we actually
427:36 - can pass in a callback
427:38 - and there's there's uh two parameters
427:42 - one is the changes one is the inverse
427:46 - changes
427:49 - so changes is that the changes that
427:52 - you're gonna you can apply to which is
427:54 - the changes that is going to be applied
427:55 - to and inverse changes is uh changes
427:59 - that you can
428:00 - unapply the onto the states so we can
428:05 - apply patch on the next date with the
428:08 - inverse change will give us the previous
428:10 - state
428:11 - so this this can actually helps us to
428:14 - create undo and redo kind of uh
428:17 - interaction so I'm just gonna save just
428:21 - the inverse changes
428:23 - and I'm gonna come over here and push it
428:25 - into undo list
428:34 - so I'm gonna have a variable called undo
428:36 - this
428:39 - on an array
428:41 - and in the draft you can provide more
428:43 - methods right so you uh as long as you
428:46 - fulfill a store contract you can
428:48 - actually Implement more methods it's up
428:50 - to you as long as the Subscribe is there
428:52 - follows a song contract and optionally
428:54 - set method is there and follows the
428:57 - store contract that's good about uh
428:59 - that's that's good enough
429:01 - so we can have an undo method
429:04 - and this undo method I'm gonna check if
429:08 - undo list dot length
429:11 - which means there's something to undo
429:13 - I'm going to call undo.pop
429:16 - and do list of pop
429:20 - and I'm going to apply the patch so
429:23 - apply patches
429:25 - apply patches onto the states
429:28 - with the undo
429:31 - this should give me a new Stitch which
429:34 - is still immutable uh so can I say State
429:38 - equals to this
429:40 - and I'm gonna say draft
429:43 - equals to create draft from the state
429:46 - and I notify all the subscribers
429:50 - so I'm gonna paste this over here
429:53 - okay and let's try to use this undo
429:56 - method
429:58 - so we're gonna come over here have a
429:59 - button
430:00 - on click
430:04 - undo
430:07 - and I'm going to come here and say uh
430:09 - draft dot undo this time around I'm
430:12 - going to call it on the draft store
430:14 - itself right uh if the dollar prefix is
430:17 - getting you the states of the draft but
430:21 - we're not going to get the value of this
430:22 - the draft store we're going to use the
430:24 - draft store itself we're called undo
430:27 - so over here we have an undoom button
430:29 - now so if we type something
430:32 - the changes has been made type something
430:34 - changes has been made and then we undo
430:37 - oh wait undo is not working hold on
430:39 - apply patches is not defined sorry let's
430:42 - let's come back over here and import it
430:46 - okay so make some changes applied make
430:49 - changes applied undo undo
430:54 - you cannot do and and yeah you can apply
430:57 - patches
430:59 - um from your JS it will create so when
431:03 - you do when you use image yes you can
431:05 - make changes on the draft
431:08 - States itself are mutably and then when
431:11 - you finish it when you finish drafts it
431:14 - gives you the next state immutable next
431:17 - date as well as the changes you can you
431:20 - have made in these drafts and you can
431:22 - apply the changes again or you can
431:25 - inverse the changes
431:26 - right there's a lot of more advanced
431:28 - stuff that you can do with Emer which is
431:32 - probably very Advanced where you you
431:34 - when you're dealing with some sort of a
431:36 - complex kind of state
431:39 - so I don't recommend you to immediately
431:42 - jump and use this in a very simple
431:44 - application but as your application
431:46 - grows you have a very big object and you
431:49 - want some immutability in your States
431:52 - then probably you can take a look at
431:53 - emerge.js and take a look at how we can
431:57 - use Emer make it like a store contract
432:00 - and use it in svelt using the dollar
432:04 - dollar prefix variable syntax
432:09 - and today we're going to take a look at
432:11 - one built-in method from sveld that
432:14 - allows us to quickly create another
432:16 - store from existing stores
432:19 - so the way for us to derive stores from
432:22 - existing stores that you have
432:25 - so self provide us with this method
432:27 - called derived and we're going to take a
432:29 - look at how we can use this methods so
432:31 - let's take a look at an example that
432:33 - I've prepared for you so over here I
432:36 - have a writable star
432:39 - and I create a writable store with
432:41 - initialize with a value 10. and I've
432:44 - bind the value of the star with an input
432:46 - with the type number so over here if I
432:49 - change if I move the number along you
432:52 - can see that it's updating the value of
432:54 - the star using the dollar prefix syntax
432:56 - because the writable stores uh matter
433:00 - from spell implements the store contract
433:02 - so we can access the value of the store
433:05 - using dollar prefix variable of the
433:08 - store variable name and we can do it
433:11 - over here as well
433:13 - and bind will set the value so the the
433:16 - store the writable store also follows
433:19 - the store contract for the set method so
433:21 - we can set the value of the store
433:23 - directly from this bind so that we can
433:25 - update the value of the star like this
433:27 - right so if you change the value of the
433:30 - store you can see that it's updated
433:31 - immediately
433:33 - so right now I'm going to show how you
433:35 - can use the derived method from spelled
433:38 - so same thing as sorry same thing as
433:42 - spells writable imported from svelt Star
433:45 - so it's a name it's called derived
433:49 - and over here how we use derived is you
433:54 - can write for example new
433:57 - num equals derived and pass in the store
434:01 - which is in this case is num is the
434:04 - store
434:05 - and we can pass in a function so in this
434:09 - function we can we will have the value
434:13 - of num
434:14 - so the this is the value of the star so
434:18 - if you can you can see here the the
434:20 - variable over here we kind of prefix it
434:22 - with dollar but it's just any name so
434:24 - any name you like it's easier for us to
434:27 - think about value of a star is prefix if
434:29 - dollar and star itself is without the
434:32 - dollar sign
434:33 - right but this itself can actually be
434:36 - any uh any variable name so uh just to
434:39 - demonstrate I can say
434:42 - haha okay and over here I'm going to
434:45 - return a value for this derived star so
434:49 - um this derived star will subscribes to
434:51 - the store and anytime every time when a
434:53 - star value has changed this callback
434:55 - function will be called and the value of
434:57 - the store will be here hardcore haha
434:59 - variable and then we're gonna return a
435:01 - new value for this derived store it's
435:04 - going to say uh return haha
435:07 - times two
435:09 - so this is always two times of the value
435:12 - of the store of num so if I come over
435:15 - here and I
435:17 - because derived follows a store contract
435:20 - whatever returns from derived followers
435:21 - of store contract we can get the value
435:24 - of the star using a dollar prefix
435:25 - variable as well so you can see over
435:28 - here this right now has a value of 20.
435:31 - so I'm going to say num times
435:33 - oops
435:35 - 2 equals to this and when I change the
435:39 - value of the num star you can see the
435:41 - value of the derived new num star is
435:45 - also updated immediately
435:48 - so uh where can I read from like apis
435:51 - for derived so you can find the API for
435:54 - derives in over here in the docs you can
435:57 - see over here derived
436:00 - um
436:02 - so there as you can see over here
436:05 - there's actually a lot of different kind
436:06 - of uh whoops let me Zoom it in and yeah
436:10 - if you take a look at the docs right
436:12 - there's actually a lot of ways that you
436:15 - can define derived and
436:18 - at first glance you may see me it's a
436:20 - bit overwhelming so let me break it down
436:23 - to you so that it's easier for you to
436:25 - understand all this right so
436:27 - I I you can think of it as
436:31 - um
436:33 - you can think of it as a two by two
436:35 - variants I'm gonna have I'm gonna write
436:38 - it all of the variants over here so that
436:40 - it's easier for you to think about it so
436:42 - first is whether you derive from one
436:46 - store
436:47 - versus derived from multiple Stars
436:52 - and then uh in in either case you can uh
436:58 - get the derived value synchronously
437:04 - or
437:06 - get the derived value asynchronously
437:12 - okay so what does it mean so let's take
437:16 - a look at the first two component uh
437:18 - combination so derived from one store so
437:21 - in this case derive actually derived
437:22 - from one store right so we only have one
437:24 - store called num and then we derive from
437:26 - just one store uh and then it says
437:29 - derive multiple stores which means that
437:31 - actually we can derive from multiple
437:32 - stores so let's do that so let's create
437:34 - another store called num2 in this case
437:37 - uh initial value is 42.
437:40 - and we are going to to have another
437:44 - input
437:47 - that binds to num2
437:49 - and now I can derive from the num and
437:53 - num2 stores so instead of taking it as a
437:59 - instead of taking it as
438:02 - just a store the first argument for
438:05 - derived can actually be
438:08 - an array
438:09 - and so you can pass in as many stores
438:12 - you want so I can have num and num2 two
438:14 - stores right so over here if you have
438:17 - two stars then this variable the first
438:20 - uh parameter over here will become an
438:23 - array now so this is the value of the
438:25 - first star and then the value of the
438:27 - second star
438:28 - do note again this variable name uh can
438:31 - we can name the variable name any way we
438:33 - want this is just that a convention for
438:37 - us that tells us that this is the value
438:39 - of the star instead of the star variable
438:41 - itself
438:42 - right so right now I'm gonna say
438:45 - um this this new value the derived value
438:48 - for a new num2 would be num times num2
438:55 - and if we come over here
438:58 - I think let me rename it better so
439:01 - that's less confusing so this is I'm
439:03 - going to call this multiplication
439:06 - and this is a double
439:09 - of num
439:10 - right so double of num we're gonna come
439:13 - over here
439:15 - and multiplication
439:17 - let's come over here and let's let me
439:19 - another div
439:22 - so num
439:24 - times num2
439:27 - equals to
439:29 - the value of the star multiplication
439:34 - as you can see here uh whenever I change
439:37 - this value of star this derived store
439:39 - value will get updated immediately right
439:42 - I'll change this the second store value
439:44 - also get change updated immediately
439:48 - right so this so you can derive from one
439:50 - store or you can derive from multiple
439:52 - stores
439:54 - so from all the examples we've seen over
439:56 - here so far is we return a value
440:00 - immediately from the call from from the
440:03 - second parameter right but then there's
440:06 - a case where probably you may want to
440:11 - um do something like do something
440:12 - asynchronously and then
440:15 - set the value of the derived store later
440:18 - on for example over here I'm gonna have
440:21 - this called uh this new store called
440:24 - delete num
440:26 - so this delayed num is special in a
440:29 - sense where every time when the num
440:31 - store value has changed
440:33 - uh we were gonna update this delete num
440:35 - the value of the direct num store but it
440:39 - will go it will be updated uh in one
440:41 - second later
440:43 - so how you're gonna do it is
440:47 - um
440:49 - the same thing we have in function and
440:52 - then the first parameter is the value of
440:54 - the num star
440:57 - and then if if okay so let me show you
441:00 - uh
441:02 - uh so by the previous we want to have
441:05 - like the the value of the delayed num to
441:08 - be set as the same value of the num
441:10 - store but only delete one second right
441:12 - so if I come over here uh
441:16 - okay
441:20 - delete
441:23 - I come over here uh if you see right now
441:26 - right now we return this num directly
441:29 - right so if we change the value you see
441:32 - the value is updated immediately
441:34 - but if we now start to take in a second
441:38 - parameter you see that this becomes
441:41 - undefined immediately
441:43 - why when you pass in a parameter called
441:46 - set right now uh this is this derived
441:50 - function is assumed to be asynchronous
441:53 - and when it assumes to be asynchronous
441:55 - it no longer look at what is being
441:58 - written from this function anymore
442:01 - right this is important right so once
442:04 - you take in a second parameter it no
442:07 - longer takes into account of what
442:09 - returns from this function as the value
442:11 - of the star no no longer right so now
442:14 - the value of this uh derived star is
442:18 - still undefined and if you want to have
442:21 - an initial value you can take it over
442:23 - here as a third parameter so I'm going
442:25 - to say uh not set and you can see this
442:28 - is the initial value right whatever
442:31 - written here is not the value of the
442:33 - derived store when you take in a second
442:35 - parameter if we remove this
442:38 - then you can see that immediately this
442:40 - is synchronous and then we just take
442:43 - whatever from here as the value of the
442:45 - derived star if you're taking an
442:47 - apartment second parameter sets this is
442:49 - asynchronous whatever written is not the
442:52 - value of the derived star and what is
442:55 - the derived store the initial value will
442:57 - be this the third parameter for the
442:59 - derived function a derived method and if
443:02 - you want to set the value of store you
443:03 - have to call the sets
443:05 - so here I call sets again now the
443:08 - initial value is not set but then we
443:10 - call set immediately now you can see
443:13 - that this value has updated to this 10
443:15 - right so if I come over here
443:18 - the 10 14 15 uh we this function will be
443:21 - called every time and the value of the
443:23 - store will be
443:25 - uh updated by calling this sets right
443:29 - but we say we want to delay the value
443:32 - right so what we can do over here now is
443:35 - we can set timeout
443:39 - for example one second
443:42 - and we want to set the value of the star
443:44 - one second later on
443:48 - so by default initial value is not set
443:50 - but once we set the value for example
443:54 - right now we want to update it okay
443:56 - first is let's see the initial loading
443:58 - so focus on the delete uh over here
444:02 - once we refresh the initial value is not
444:05 - set and then one second later it turns
444:06 - into the value uh over here where we
444:09 - call sets and whenever we update the
444:12 - value gets updated one second later
444:16 - right
444:17 - and remember that whenever we say we
444:20 - want to use set timeout we need to
444:22 - remember to clear the timeout because
444:24 - what if no one is subscribing to this
444:27 - store anymore or the whole component is
444:29 - being unmounted you wouldn't want this
444:31 - timeout to still be triggered and then
444:33 - call the sets for not for nothing right
444:36 - no one is listening anymore
444:39 - so here is the Thing Once you add the
444:43 - set parameter whatever it written if
444:46 - it's a function it should be the cleanup
444:49 - function
444:50 - so this is kind of similar with um if
444:55 - you have seen previously how we a
444:57 - subscribe method where you return in a
444:59 - subscribe method of following the store
445:01 - contract whatever you return is the
445:03 - unsubscribe it's the cleanup so we're
445:05 - going to do the same thing over here so
445:07 - I say clear this is a timeout
445:10 - ID
445:12 - and I return a function called
445:16 - clear timeout
445:20 - timeout ID
445:25 - so this is synchronous this is
445:27 - asynchronously
445:31 - so I'm gonna to demonstrate that this is
445:35 - actually being called I'm gonna console
445:37 - over here hi
445:40 - uh the reason is uh if we're gonna
445:44 - update this value of the start very fast
445:46 - then most likely is that before we the
445:50 - set timer is being triggered it's going
445:52 - to be clean up and then we have a new
445:54 - set timeout later on
445:56 - right so if I change this very fast
445:59 - you see that uh instead of going from 10
446:02 - 11 12 13 change to 13 immediately so
446:05 - right now I'm gonna go from 13 to 10.
446:09 - you see that it does not go step by step
446:12 - because every time we
446:14 - update the value the cleanup function is
446:17 - being called will clear the timeout and
446:19 - then the new set timeout is being
446:21 - triggered
446:23 - Heights
446:24 - so as you can see over here as well the
446:26 - highest being consoled out many times
446:27 - when I update this so this is a good way
446:31 - for you to clean up the timeout because
446:33 - it's no longer in use and
446:35 - so that uh you
446:40 - so that uh you can clean up and remove
446:43 - any unnecessary sets store value
446:47 - so
446:49 - so I've said that this is a two by two
446:51 - Matrix that means is that
446:54 - um
446:55 - you can derive
446:57 - from multiple stores asynchronously as
446:59 - well right so in these two examples we
447:02 - derived from single store synchronously
447:04 - derived from multiple stores
447:06 - synchronously we can also derive from
447:09 - a single store asynchronously and
447:11 - derived from multiple Stars
447:13 - asynchronously
447:14 - so over here I'm going to create another
447:16 - delete multiplication
447:23 - and over here I'm gonna copy this to
447:28 - and now since we are passing an array
447:30 - this will be an array of two value
447:34 - num2
447:36 - and I'm going to return the
447:38 - multiplication num 2 over here
447:41 - so we're going to look at the value
447:43 - delete
447:46 - foreign
447:48 - so if I change this this will get
447:51 - updates one second later and change this
447:54 - as well this will go updates as well but
447:57 - one second later so you can derive from
448:00 - one or multiple stars and you can set
448:03 - the derived value of the derived star
448:05 - synchronously or asynchronously
448:11 - we've been talking about stores over the
448:13 - past few videos
448:15 - and don't you find Stars a bit boring
448:18 - and dull like whenever you set a value
448:21 - you just change to that value does not
448:25 - moves to that value elegantly
448:28 - right when I in this example that I
448:30 - prepared over here I have a writable
448:32 - stores that is initial value is zero and
448:37 - whenever I change it it just change that
448:40 - value
448:42 - why don't it like move slowly from zero
448:45 - to one instead of just changing from
448:47 - zero and then one
448:50 - wouldn't be better if we can have a
448:53 - special kind of stores where whenever we
448:56 - try to increment it it moves slowly from
448:58 - one to two
449:00 - like and showing the values in between
449:02 - like 1 1.1 1.2 1.3 more form by five all
449:07 - the way to two would that be
449:10 - more beautiful and elegant
449:13 - right so today this is what we're gonna
449:15 - do now create a custom store
449:18 - that allows us whenever we set the value
449:20 - allows us to uh the value of that store
449:24 - itself will not go to that value the
449:26 - target destination value directly but
449:29 - rather it will slowly move to that value
449:32 - and we're gonna do it right now
449:36 - so over here
449:37 - I have my boring dial star called value
449:43 - created using writable
449:45 - I'm gonna create a new custom store
449:49 - and I'm gonna use a
449:52 - function called twin
449:56 - initial value
449:59 - and then uh
450:02 - and I'm gonna use this to create my
450:06 - create a store for myself so I'm going
450:09 - to replace it with uh twin uh replace
450:11 - the writable to twin
450:13 - but over here I'm returning nothing so
450:16 - nothing is not a store whatever store
450:18 - has to follow a store contract and a
450:22 - stock contract dictates that it has to
450:24 - be an object and an object has to have a
450:28 - function a method called subscribe
450:31 - which takes in a function
450:33 - and you kind of have to call the
450:35 - function immediately uh like say FN and
450:39 - then call some value right so I'm going
450:41 - to call the initial value
450:46 - uh immediately
450:48 - and over here I need to return and
450:51 - unsubscribe methods
450:54 - right so that I can unsubscribe from
450:57 - this custom store
450:59 - so over here as I've shown you many many
451:02 - times in the previous videos where I
451:06 - need to push this function into an array
451:08 - we have to keep track of the uh all the
451:11 - list of some sorry subscribers and then
451:14 - remove it from that list in this
451:16 - function so today I'm gonna be a bit
451:19 - lazy and actually a bit more efficient
451:21 - which is actually you don't have to
451:24 - manually write this subscribe method to
451:27 - maintain a subscriber list we can create
451:31 - say uh I'm gonna create a store called
451:35 - uh using writeable
451:38 - with the initial value
451:40 - and then we can cheat a bit by using the
451:44 - Stars subscribe method instead
451:51 - so this way you can delegate all that
451:54 - responsibility of maintaining a list of
451:56 - subscribers returning and unsubscribe
451:58 - methods and everything to this store
452:02 - and if you want to notify all the
452:04 - subscribers that a new value that you
452:06 - have then what you need to do is to call
452:08 - store.sets a value and this will notify
452:12 - all the subscribers the new value
452:15 - So today we're gonna cheat a bit right
452:19 - so over here I have a subscribe method
452:22 - and I also need a set method and I'm not
452:26 - going to use a store.set directly
452:29 - because we want to do something
452:30 - different over here for the set method
452:33 - of our custom store so I'm going to call
452:36 - sets and a new value
452:39 - so over here
452:41 - I need to
452:44 - slowly move my value from the like the
452:48 - value of my write-up of my star slowly
452:50 - to the new value and it takes time take
452:53 - some sort of duration uh probably we can
452:56 - make it like a parameter over here say
452:59 - duration and let's give it a default
453:01 - value so here I'm gonna say one second
453:05 - so at least I don't have to pass it in
453:07 - the default is a thousand uh
453:09 - milliseconds
453:10 - and over here uh what we can do is we
453:14 - can
453:15 - use something like maybe like set
453:18 - interval so on interval uh maybe we can
453:22 - have an interval of say
453:25 - 100 milliseconds
453:27 - so on every 100 millisecond we do
453:30 - something
453:32 - so um
453:35 - so we can keep uh we keep updating this
453:38 - on every 100 millisecond we keep
453:41 - updating our store to a value
453:45 - um and then we have to calculate the
453:46 - value here okay
453:49 - so every we we have an interval of
453:51 - upkeep updating the value and of course
453:53 - we need to know when to stop so uh when
453:56 - we call set we can get the starting time
454:00 - equals to date dot now
454:02 - and we can get an ending time
454:06 - equals okay starting
454:08 - start time and end time
454:11 - so this will be the start time
454:14 - plus duration
454:17 - so in the set interval we can check that
454:20 - maybe let's get the current time
454:26 - it goes to date dot now and if current
454:29 - time is greater than
454:33 - the end time
454:34 - that we know we need to end this
454:36 - interval
454:37 - so here to end it we need a interval ID
454:40 - interval ID
454:47 - so copy it and clear time interval
454:52 - the interval ID and I need to return so
454:55 - I don't need to do whatever I'm going to
454:57 - do next
454:59 - so over here
455:00 - uh if it's not ending if we are still
455:03 - looping we need to know what is the new
455:07 - value uh what is the value like the
455:09 - intermediate value that we need to set
455:11 - to our store
455:13 - so let's do the calculation
455:17 - so we need to use something like a ratio
455:20 - We compare for example uh the current
455:24 - time
455:26 - minus the starting time
455:31 - uh divide by the ending time minus start
455:35 - time so end time minus start time is
455:37 - actually the duration so I'm going to do
455:38 - it by duration
455:39 - so how long we elapse from the starting
455:43 - point over the whole duration will be
455:46 - have to be equals to how long uh
455:50 - well it goes to the
455:53 - the
455:54 - value that we want us
455:57 - um
455:58 - the uh
456:00 - [Music]
456:02 - the
456:04 - well equals to uh the same ratio will
456:07 - equals to the the value that we want to
456:09 - set value to set
456:11 - minus the initial value
456:15 - over
456:20 - over the new value minus initial
456:24 - value
456:28 - right so
456:30 - uh how long it elapsed over the total
456:32 - duration will be equals to uh how how
456:35 - far from the initial value over the
456:37 - distance total distance uh that's new
456:40 - value over the initial value and we need
456:43 - to calculate the value called the value
456:44 - to sets so we need to do some aromatics
456:47 - to move this around
456:49 - um so I can shift this new value minus
456:53 - initial value over to the other side so
456:55 - this will be multiplication
456:58 - let me repeat that with a bracket and
457:02 - then value to set will be uh
457:05 - and then we shift the initial value over
457:08 - as a plus
457:11 - so this whole thing plus initial value
457:15 - will equal to the value to set so over
457:17 - here I can copy this value to set and
457:20 - then put it as the
457:23 - the value that we are calculating over
457:25 - here
457:26 - cons value to set
457:29 - so this is the value that we need to set
457:31 - and so I'm going to set it in
457:36 - and foreign
457:38 - let's have a try
457:40 - right so now I'm gonna click increment
457:45 - you see that the value slowly moves from
457:48 - zero
457:49 - to one it's not going to set
457:51 - 0 1 directly right we slowly moves from
457:54 - zero to one
457:56 - and now we click again
457:58 - whoops it starts from zero again do you
458:01 - notice that let's try again uh
458:04 - let's let's clear this
458:07 - so the first time starts from zero
458:09 - to
458:11 - okay almost one point nine so this is
458:15 - something we need to fix uh and then
458:17 - when we click again
458:19 - it goes from zero again and all the way
458:21 - to 1.9
458:23 - uh what's wrong over here
458:25 - let's see ah okay so there's two things
458:28 - to fix right first is
458:30 - um whenever we increment it always
458:33 - starts from zero counting from zero
458:34 - again
458:35 - and that's because we keep using initial
458:38 - value over here
458:39 - once we have set the star like once the
458:43 - value has reached the new value we
458:46 - should update this initial value to the
458:48 - new value right this will be the new
458:50 - initial value
458:52 - so over here I am gonna come over here
458:55 - current when we hit the ending this is
458:59 - when it ends I'm gonna say initial value
459:03 - it's equals to the
459:06 - um new value
459:09 - so let's try this again
459:11 - zero plus all the way to almost one so
459:15 - this is something we haven't fixed yet
459:16 - and when we increment it moves
459:21 - continuous moving right from one all the
459:23 - way to almost two and then we click
459:26 - again it moves from two to almost like
459:28 - three
459:29 - so when I say almost it is almost
459:32 - um so to make this looks nicer uh this
459:35 - is and this is actually because the time
459:38 - um our interval is not always in like
459:40 - 100
459:41 - uh milliseconds it actually sometimes it
459:45 - offshoots a bit and sometimes it's less
459:47 - a bit so probably when you reach the end
459:49 - uh uh maybe the the last time you update
459:53 - is not yet three and then this time
459:55 - around when you offset uh overshoots a
459:58 - bit we don't really update the store
459:59 - anymore so the here before we end
460:02 - actually we can do one more update which
460:04 - is we're gonna set store dot sets
460:07 - uh to the new value
460:11 - so if we do this right now
460:13 - I'm gonna try again
460:15 - it always ends nicely at the Target
460:18 - value
460:20 - all right so one and then now in
460:22 - increments all the way to two if
460:24 - decrement two all the way to one nicely
460:26 - done
460:28 - let's set this slightly longer duration
460:31 - and let's try again
460:34 - it takes five milliseconds or five
460:36 - seconds but if the Midway if we try to
460:39 - decrement uh you probably see something
460:42 - as
460:43 - the value it's it's jumping a lot
460:46 - it's jumping a lot from uh if you can
460:50 - okay let's let's try
460:53 - let's try Plus
460:56 - uh minus equals 10.
461:01 - so when we
461:02 - go this it slice tries to go from 0 to
461:06 - 10 and then we try again
461:09 - oops
461:10 - uh you
461:15 - you see that it's jumping it's trying to
461:17 - update like it feels like there's
461:19 - multiple things trying to update
461:22 - um
461:23 - our
461:24 - value at the same time
461:27 - let me do this I think it's easier to
461:30 - demonstrate it this way where we have uh
461:33 - where this value is over here so that I
461:35 - can click on the minus or plus easily so
461:38 - if I click decrement it should go to
461:40 - negative and I should click plus you
461:42 - should go to positive value right and if
461:45 - you click this and we try to do this you
461:48 - see that it's still in negative and it's
461:50 - like flipping from negative to like
461:53 - I'm not sure positive or something
461:56 - um
461:57 - so what's what's the what's my point
461:59 - okay so my point is whenever we change
462:02 - halfway we can we have to actually
462:04 - cancel this interval and then moves to
462:08 - the Target new Target value from there
462:10 - on
462:12 - what that means is that uh this
462:15 - shouldn't be uh in the interval ID
462:17 - shouldn't be a variable inside here
462:19 - anymore should be
462:21 - declared outside
462:24 - and when we have a new set we should
462:28 - actually if interval ID
462:31 - we need to clear interval
462:36 - ID
462:39 - and then start from there
462:42 - so I do clear over here I also need to
462:47 - just to clean up this set interval ID
462:50 - now and then return
462:55 - so let's see minus and I Plus
463:00 - uh
463:04 - no it seems like the new one does not
463:07 - takes in effect at all
463:12 - um
463:15 - yeah what could be wrong let's see
463:18 - um
463:18 - stand Arrow I see an error clear
463:20 - interval Ido clear interval no wonder
463:23 - okay
463:25 - so plus minus
463:28 - Plus
463:31 - and then minus you can see that the
463:34 - number
463:35 - jumps uh if I do minus now it jumps to
463:40 - zero and then slowly moves down and I it
463:43 - does not continue from where the current
463:46 - number is actually uh you you could you
463:49 - could kind of feel that
463:51 - uh we're starting from negative 10 to 20
463:54 - right anyway plus immediately it still
463:57 - said it's trying to move from negative
463:59 - 10 to some other numbers instead it does
464:02 - not
464:03 - um
464:04 - hold on this to be fair this should be
464:07 - plus 10 okay so for example what I'm
464:10 - trying to say is right now it's zero and
464:12 - quite a click decrement
464:15 - -10 it slowly moved from 0 to negative
464:18 - 10 but in Midway if I click plus it
464:21 - should be moving from zero to
464:25 - it it feels like it's going to move from
464:27 - 0 to 10 instead of like halfway
464:29 - 2 10.
464:32 - um so let's let's
464:34 - see that again so I'm moving halfway
464:37 - which is negative five and I click plus
464:38 - it jumps from zero all the way
464:41 - to
464:44 - a new value
464:45 - so this new value is actually
464:48 - correct in a sense where I actually
464:51 - click plus 10 when I add negative 8. so
464:55 - negative 8 plus 10 is 2 plus 2.5
465:00 - something right so if I move over here
465:04 - it slowly moves to negative eight
465:07 - maybe right now negative four and I'll
465:08 - click it moves all the way to negative 4
465:11 - plus 10 is like six ish but then it
465:14 - moves from
465:16 - uh the two instead of like negative four
465:21 - so what's my point my point is that
465:24 - um the initial value
465:26 - has to be always updated has to be
465:29 - always updated so that whenever we
465:32 - cancel and we start from there on this
465:34 - initial values should be the latest uh
465:37 - should be calculated as the latest of
465:39 - the value to sets
465:41 - but we shouldn't um
465:44 - affect this initial value uh we
465:47 - shouldn't change this initial value
465:49 - like this like I shouldn't say initial
465:52 - value
465:53 - to Value to set
465:56 - we can't do it like this way because
466:00 - um this will affect the formula or value
466:03 - to set again because this the the range
466:05 - from new value to initial value will be
466:07 - wrong we still need we still want the
466:11 - previous initial value before we we
466:13 - cancel and then we
466:15 - um
466:16 - I guess you try to get what I'm trying
466:19 - to say
466:20 - so over here there's a few ways to do it
466:23 - so first thing is
466:26 - before we start over here before we
466:29 - clear interval
466:32 - we can get a hold of the value like the
466:37 - current value
466:38 - so for example instead of having set of
466:41 - a uh like constant uh this as a local
466:44 - variable I can have value to set over
466:48 - here
466:50 - and over here if I try to set against
466:53 - which if I clear interval
466:56 - then
466:57 - this tells me that okay I need to
467:01 - interval ID equals to know this tells me
467:04 - that uh previously the value to set is
467:06 - some sort of value and I need to
467:10 - I need to update it
467:13 - uh I need to update the initial
467:16 - value
467:21 - to Value two sets
467:23 - and this reminds me I need to do this as
467:25 - well over
467:27 - here actually okay we have done this
467:29 - right
467:32 - so this will be slightly correct so
467:36 - let's try again and see
467:38 - so we move halfway to three to four or
467:41 - five and then I click it slowly moves
467:43 - down from three to one all the way to uh
467:46 - just now was what seven or eight ish and
467:50 - then minus 10 is like roughly 2.8 ish
467:53 - right
467:54 - so
467:56 - few we have with with me a lot of code
468:00 - over here it looks very complex
468:04 - right but hopefully you get the flow of
468:07 - this if we want to make a variable
468:10 - slowly move towards the target this is
468:13 - what we would have to write
468:15 - or no
468:17 - actually this twin
468:19 - is actually provided it's actually built
468:21 - in from svelte you can use it directly
468:25 - although it's not from the store
468:27 - but it also still implements the stock
468:30 - contract
468:31 - so it's actually from svelt motion
468:37 - so I'm not gonna remove this because
468:40 - maybe you want to take a read what we
468:43 - have accomplished so far but let me
468:44 - comment it out
468:46 - you can use twin
468:48 - API does not change but as you can see
468:52 - oh okay ignoring the moving faster parts
468:55 - we it's not using an interval it's using
468:57 - a request animation frame which is much
468:59 - faster uh as in we can make it fast as
469:04 - well if we have like a smaller intervals
469:06 - as well right but ignore the fact uh it
469:10 - still works The Way We Were designing
469:12 - right so in this does not the second
469:17 - parameter of the twin is not a number
469:20 - it's not duration but an object where
469:23 - you can pass in a duration
469:25 - so let's pass in like five
469:28 - millisecond again and take a look at the
469:30 - problems that we're trying to solve just
469:32 - now right move halfway and I kind of
469:34 - remove it continues from there instead
469:37 - of jumping here and there all right I
469:39 - think spell does a very good job in
469:42 - handling all those edge cases
469:45 - and if we start from zero it also nicely
469:50 - lands at
469:52 - 10
469:54 - instead of having all the decimal points
469:56 - right that is something that we've done
469:58 - over here as well make sure it nicely
470:01 - set the value at the end of the time
470:03 - so um let's take a look at the docs for
470:10 - twin
470:11 - and see what else we can pass it in
470:17 - so twin takes in not just duration it
470:20 - takes in also delay easing and
470:23 - interpolation and delayed cells is
470:25 - pretty interesting
470:28 - because for example if I say a delay of
470:32 - say one second okay maybe two seconds
470:36 - and I change takes two second delay and
470:39 - then slowly move up and when I click
470:42 - minus it does not change immediately
470:44 - except two seconds later it's slowly
470:47 - going back right uh two seconds later
470:52 - then two seconds later it's only
470:55 - decreased back so it still takes in it
470:58 - still moves from where it is at at that
471:01 - point of time but it takes delay of two
471:03 - seconds
471:05 - and then here you have a easing easing
471:08 - is a function that you can control how
471:11 - much uh what's the rate of moving from
471:16 - the initial point to the final point
471:19 - and it interpolates which is how
471:23 - um
471:24 - which is depending on what kind of value
471:27 - you have you can interpolate it
471:29 - differently right for example if you are
471:32 - you can use Queen with colors as well
471:35 - you can twin between colors and you also
471:38 - can twin dates and time and a lot of
471:41 - things you can try that out
471:44 - so beside twin uh spell also provides
471:47 - something called Spring so spring is
471:50 - also something like twin except that it
471:53 - moves like a spring it it has like uh so
471:57 - let's let's replace this
472:00 - and let's take a look at the value
472:04 - so let's increment you can see the value
472:07 - is incrementing a bit like a
472:13 - like a like a spring and you can't tell
472:15 - that from the number itself so what I'm
472:18 - going to do now is I'm gonna use
472:21 - um
472:23 - a colored diff so that you can visualize
472:27 - it better
472:30 - so style equals to say background red
472:36 - and then with one PX height
472:41 - 5px
472:43 - and front Okay this is a bit short
472:46 - that's 10 PX
472:48 - at 20px okay this is this is more like
472:52 - it and then transform
472:55 - scale
472:58 - and I'm going to use
473:01 - the spring value
473:06 - you can see it does not move
473:09 - directly it has some kind of springy
473:13 - feeling to it and if you if you can pass
473:16 - in values like uh stiffness to control
473:21 - the spring itself
473:24 - so here if I say
473:29 - stiffness equals to zero
473:34 - oops see
473:36 - is zero to one right
473:41 - I'm sure too stiff moves one
473:47 - um if we move to like 0.8
473:55 - um 0.4
473:59 - you have different kind of uh okay I
474:01 - think we need to add some dampening
474:04 - damping
474:05 - so that's
474:10 - if you have more damping it will have
474:12 - more springy feeling a less stamping you
474:14 - have more
474:16 - springy feeling it does not
474:18 - and like the movement does not and
474:21 - immediately and if we have like a lot of
474:23 - damping
474:25 - then it will less springy
474:28 - right so you can play around with this
474:30 - value
474:31 - but the point is as well provides two
474:34 - billion function spring and twin which
474:37 - allows to which returns an object that
474:41 - follows a store contract so it's still
474:43 - like a star
474:44 - but when you set a value to the store it
474:46 - does not does not update the value of
474:48 - stock immediately but it slowly moves
474:50 - from one value to that value
474:53 - um through some sort of twinning
474:55 - interpolation and some springy feeling
475:01 - so in the last video I talked about
475:03 - custom stores in which the value of the
475:05 - star slowly moves from the current value
475:07 - to the Target value that you are setting
475:10 - it with I explain how you could write
475:13 - such a star and in the end of the video
475:15 - I show you that you could actually use
475:18 - the building methods from sveld like
475:19 - twin and spring depending on what kind
475:24 - of a movement that you want to
475:27 - um in that video I didn't explain in
475:29 - depth about how uh what are the possible
475:32 - ways that you can use twin and spring in
475:34 - which it does not do them justice so in
475:37 - this video what I'm going to do is I'm
475:40 - going to show you how you can use twin
475:43 - and spring and make full use of them
475:46 - so the first thing I'm going to share
475:48 - with you is Twin so let's take a look at
475:51 - this Ripple that I have prepared for you
475:54 - so over here I imported both twin and
475:57 - spring but right now we are looking at
475:59 - Twin first
476:00 - so in Twin uh so right now I am not
476:05 - using anything I'm using a writable
476:09 - so when you have a writeable when you
476:10 - change the value of the star where you
476:12 - try to assign a value to it it will turn
476:16 - into that value immediately by itself
476:18 - right so there's no move there's no
476:20 - transition from the current value to the
476:22 - Target value
476:23 - but if I import twin from swept motion
476:27 - and I use that instead of writable
476:30 - now as I change the value you see that
476:33 - it
476:34 - slowly moves towards 20 right and I
476:37 - change to zero it will turn to zero
476:39 - slowly so here is so the second
476:43 - parameter of twin
476:45 - is actually options that you can adjust
476:48 - the tweeting so first thing is you can
476:51 - adjust the delay so for example if I set
476:54 - delay in milliseconds like 500
476:57 - milliseconds then the value does not
477:00 - change until 500 milliseconds later
477:03 - next thing is duration
477:06 - if I set the duration to be 5
477:10 - 000 milliseconds which is 5 second then
477:13 - it will take one two three four five
477:17 - okay
477:18 - my counting is bad but as you can see it
477:21 - takes five SEC whole second to reach
477:24 - from 0 to 20. now next is the easing the
477:28 - easing is
477:30 - a function that describes how the number
477:33 - uh the acceleration the rate of the
477:36 - number changing from the current value
477:38 - to the next value so if you don't pass
477:40 - it easing then the value is moving
477:42 - linearly which means it moves in a con
477:44 - it in it moves in a constant speed but
477:48 - if you can pass but if you pass it in
477:50 - custom easing for example right now I'm
477:52 - going to import cubic in
477:54 - from svel easing
478:02 - now you may not notice but the number
478:04 - actually increased in an increasing
478:07 - speed
478:07 - right it stays at for example right now
478:11 - I am at 20. you'll see that it will
478:14 - stays at 20 okay let me remove the delay
478:17 - but you notice that from for example
478:20 - from 1 to 20 you see you see that the
478:23 - number stays at one to two a very long
478:25 - time and then it starts to accelerate
478:28 - and moves faster and increase faster and
478:30 - all the way it shoots up like a curve
478:32 - over here and a rich 20 probably a very
478:36 - short time from reach from 15 to 20
478:39 - right so pay attention
478:42 - right it stays at one for a very long
478:44 - time and then suddenly it shoots up and
478:46 - then it hits 20. so you can control all
478:49 - these different kind of easing using a
478:51 - different easing function
478:54 - so the next option we have is called the
478:56 - interpolates
478:58 - before we move into interpolate let's
479:00 - take a look at what actually what are
479:02 - the type of values that you can pass
479:05 - into twin a store right now in most of
479:09 - my examples you see what I've do have
479:11 - done is I twin from a number to another
479:14 - number so I I start with the initial
479:16 - value if it's just a number and then I
479:18 - set it to another number but it does not
479:21 - have to be just a number it can be other
479:24 - data types for example it could be
479:28 - um an array of numbers so I have to say
479:30 - 0 1
479:32 - 0 50.
479:35 - and I want to
479:38 - interpolate to I want to set the target
479:41 - value to be say 100 and then maybe zero
479:47 - right 100 zero
479:49 - if I click this you can see that both
479:51 - numbers will change
479:54 - together at its own speed
479:56 - right so 0 moves to 150 will move to
480:01 - zero so if I remove the easing and delay
480:05 - let me just comment them out you can see
480:09 - that it's it's
480:10 - both numbers are moving right towards
480:13 - their Target number in five seconds
480:17 - so you can have a number you can have an
480:19 - array of numbers
480:21 - and then the next thing is what you can
480:23 - have is actually object
480:24 - where the values are numbers
480:28 - so for example I can have an object say
480:31 - a is zero B is 50
480:38 - is 100 B is 0.
480:45 - so all the property value has to be and
480:50 - oh sorry
480:56 - let's see how should I do this
480:59 - um because this will be interpreted as a
481:02 - Expressions which I don't want so
481:05 - probably I will use HTML and let's do
481:08 - this instead
481:12 - okay
481:14 - so
481:15 - um
481:16 - I change so I have a proper object with
481:19 - two properties 0 and 50. a is zero B is
481:22 - 50 and I change both properties will be
481:25 - updated at once right
481:30 - so um you could have
481:32 - more properties right
481:38 - but then
481:40 - oh because C is not there it is
481:45 - undefined initially then you have error
481:48 - but right now if I set C to say 40
481:52 - hold on hold on
481:54 - um this is not okay I think I made a
481:56 - mistake over here there should be null
481:58 - and two so that this is multi-line okay
482:01 - let's take a look at how these three
482:03 - property uh interpolates to each other
482:05 - right just to make it clearer let's
482:09 - update the button as well the button
482:11 - text although it does not make any
482:13 - effect so right now we change from 0 50
482:16 - 40 to 100 0 30. right so you can see
482:20 - that all the numbers is being
482:22 - interpolated at the same time
482:25 - okay so besides object where its
482:28 - property is numbers and arrays which is
482:31 - item is numbers can actually have each
482:34 - of them nesting each other so for
482:37 - example I can have array of numbers over
482:39 - here 50 and turning into 30 70
482:45 - see it still works all the numbers still
482:48 - changing
482:49 - or I kind of array of objects over here
482:53 - instead
482:55 - and maybe another item equals to 40 and
483:01 - here is a equals to 30
483:04 - change all the numbers are still
483:07 - interpolating correctly so as long as
483:09 - the number of items matches uh the
483:12 - number of properties is the same and
483:15 - each of the property has the same type
483:17 - for example number matches with number
483:19 - array matches with array
483:22 - um the built-in twin function will able
483:25 - to handle all of them nicely
483:28 - right and lastly it's not just about
483:30 - numbers it can be about uh time
483:34 - so if I have new dates over here and new
483:37 - date uh say
483:40 - zero
483:42 - right and I change you can see the time
483:45 - will moves
483:47 - um
483:49 - well will between as well
483:52 - so numbers dates object with keys is
483:57 - numbers arrays where it's proper uh
483:59 - sorry object where it's value is numbers
484:01 - and array in which the item is numbers
484:04 - and nested of either nested object array
484:07 - array nesting with object what else
484:11 - um basically I think that's all so if
484:13 - you try to change it to string and try
484:16 - to interpolate you can't interpolate
484:18 - string
484:20 - so that's where the
484:23 - that option called interpolate comes in
484:26 - so interpolates
484:28 - um
484:29 - is of option allows you to
484:32 - add more features to Twin to tell them
484:35 - okay I'm getting a number I am getting a
484:38 - string and here's how you can twin them
484:42 - so here's how you can interpolate them
484:45 - so for example let's uh make our example
484:48 - simple I start with a string which is a
484:53 - and I want to move I want to set it to
484:59 - Zack right I'm gonna say A to Z
485:03 - so I change I can't interpolit string
485:06 - value so over here I can Implement a
485:09 - function called interpolate
485:11 - which is a function that takes in a
485:14 - which takes in A and B and returns
485:18 - another function that takes in a t and
485:20 - then returns something that you need to
485:22 - implement over here
485:23 - so what's a b and t so let's print this
485:27 - out and take a look so a b t
485:32 - so a is actually the starting point B is
485:35 - the target point and T is the value from
485:38 - 0 to 1. so as you can see here a is z
485:42 - because you start with
485:44 - e and then B is actually exact itself
485:47 - and then the t is the time from 0 to 1
485:51 - uh so which is the position where like
485:56 - you are currently at from 0 to 1. so it
486:00 - will start moving from zero and all the
486:01 - way to one
486:02 - right so for example right now I want to
486:05 - Twin from A to Z then what should I do
486:08 - well probably I can do something like
486:11 - this where
486:13 - I can maybe interpolate in terms of the
486:16 - characters so for example Ace chart code
486:20 - at zero
486:23 - is a number right
486:27 - a code
486:29 - and B code
486:32 - sb.char code at
486:36 - zero
486:37 - and then I can interpolate between these
486:40 - two numbers
486:41 - so I will say uh result code equals to a
486:47 - code plus b code
486:52 - all right sorry it's a b code minus a
486:55 - code
486:59 - um times t plus a code
487:03 - so we get the difference between a and b
487:06 - and then we type so uh if it's zero and
487:09 - then we plus times t and n plus a code
487:12 - so a code uh if a t is zero then what
487:17 - you get will be just a the value of a
487:19 - code right but if T is one which is the
487:22 - target value then
487:24 - um this will be B code minus equal plus
487:27 - a code will release you to B code right
487:29 - so this is uh standard format of how you
487:33 - would write interpolation
487:35 - so with the chart code we are going to
487:37 - convert it back to its own character so
487:40 - a chakra has to be an integer so and we
487:43 - are going to round it so math dot round
487:45 - result code and to convert it to a
487:48 - character I'm going to say a string Dot
487:52 - from Char code
487:55 - I'm going to return this whole thing
487:58 - and let's see we'll change from a all
488:01 - the way to Z
488:03 - right
488:05 - um so if I change this Z to A okay so
488:09 - and change a to z and then change it
488:12 - back to a
488:16 - it's cool right so you can write your
488:18 - own interpolation
488:21 - um as long as you follow this uh
488:23 - function
488:25 - so let's summarize what we have learned
488:26 - so far
488:28 - um we have seen how to use the twin
488:30 - method to create a twin star
488:32 - so the first parameter is the initial
488:36 - value and second parameter is the
488:38 - options in which you can control the
488:40 - delay duration easing as well as
488:43 - interpolation
488:44 - we have seen what can be supported by
488:46 - the built-in twin what can be
488:49 - interpolated by them and we also seen
488:52 - what how we can write the custom
488:53 - interpolation function so next let's
488:57 - move on to the spring methods so let's
489:01 - allow me to copy this
489:03 - and let's take a look at the spring star
489:07 - so again uh spring is like a writable in
489:12 - which you can change its value but by
489:14 - default when you change the value it
489:16 - moves it changed the value directly so
489:19 - if you use spring instead
489:21 - then your value have the value changes
489:26 - moves like a spring
489:28 - and a spring has actually properties
489:31 - like how stiff the spring is and how
489:34 - much resistance the spring has so this
489:37 - two value is being summarized by
489:39 - stiffness
489:41 - and damping
489:44 - so for example if my spring is very
489:46 - stiff which means that it will snap back
489:49 - to the Target value very quickly
489:52 - so for example let me just uh choose
489:56 - average value like a 0.5 and maybe
489:59 - damping is also 0.5
490:02 - let's see how it what we get
490:05 - so if your num if the stiffness is if
490:08 - you have a higher value in terms of
490:10 - stiffness the the value will snap to the
490:13 - Target value faster so let's see if I
490:16 - starts from 0.2
490:18 - you'll see that you will move slightly
490:20 - slower
490:21 - and if I go for a higher number like 0.9
490:25 - then it snaps to the it moves faster to
490:28 - the Target value
490:29 - of course it will move faster which
490:31 - means that it will also overshoots and
490:33 - then snaps back like a spring
490:36 - and then damping which means damping is
490:38 - a function for uh slowing things down so
490:42 - it works in an opposite pair of your
490:44 - stiffness so if you
490:48 - um if you have a very small number
490:50 - for example 0.2 which means that um
490:55 - uh it will it will decrease in terms of
490:57 - velocity slower so you will see your
491:00 - spring your you will see a spring moves
491:02 - oscillation a lot oscillate oscillates a
491:06 - lot but if you have a higher number for
491:09 - example 0.8 then your spring will not
491:12 - oscillate that much and then settle down
491:14 - faster
491:17 - so these are the two values that you can
491:19 - play around with spring
491:23 - and over here we set the value right so
491:26 - when you set the value you'll move to
491:28 - that Target value but sometimes you want
491:30 - to move to that value but without but
491:33 - without
491:35 - um springing to that Target value
491:38 - so how you would you do that so you can
491:41 - do that by uh coming back to the sets
491:44 - method
491:46 - so value dot sets
491:48 - so if you write dollar value Sim
491:51 - variable over here where you assign
491:54 - value to 20 it actually means value dot
491:57 - sets 20. uh but you can't uh in this way
492:03 - of writing you can't actually specify
492:04 - the second option arguments if you have
492:07 - so here we we fall back to value.sets
492:10 - because we want to pass in a second
492:12 - argument and the second argument that
492:14 - you can pass to a spring store is first
492:17 - is an object and the first is you can
492:20 - have a property called heart goes to
492:23 - true
492:23 - This Heart
492:25 - indicates that you want to move to that
492:28 - Target value immediately without
492:31 - without making like a spring where it
492:33 - Springs to that value for example you
492:35 - have moved to 60 it's like a spring 80
492:37 - and then 40 it's like hard jump to that
492:40 - value
492:43 - and opposite of Hearts what you get is
492:46 - um soft
492:48 - so value dot sets 60 soft
492:53 - so you might ask like uh if you already
492:57 - if you already like if you assigned a
492:59 - value it's already moving like a spring
493:02 - to that Target value right then what's
493:04 - the point of having to pass in soft well
493:08 - um I'm not
493:10 - able to show you a particular in in this
493:15 - example I probably we can't really see
493:17 - the difference but then the difference
493:19 - is this when you said soft you actually
493:22 - tries to maintain the speed of the
493:27 - moving value for example if I'm moving
493:29 - to from from 0 to 100 and then I quickly
493:33 - click 60. it will maintain the speed
493:38 - to reach you will maintain a speed and
493:42 - instead of
493:43 - setting 60 as a Target value and trying
493:46 - to snap to 60.
493:49 - and
493:50 - how long do you want to maintain the
493:52 - speed will be this value that you pass
493:55 - into soft
493:57 - so this soft actually tells you zero to
494:00 - one you can pass the value from 0 to 1
494:03 - indicates like how many seconds it takes
494:08 - to recover to turn back to become a
494:11 - spring
494:13 - I know it's a bit abstract and
494:15 - personally I also can't tell the
494:18 - difference visually but that is how it
494:21 - works
494:22 - so um
494:25 - so for example if I say
494:27 - um I want the
494:31 - I want I pass in zero which means that
494:35 - it does not take it takes zero time to
494:39 - convert back to a spring and which means
494:42 - that this actually is the same as
494:44 - calling value equals to 20. right value
494:48 - sorry value equals to 60. so setting
494:50 - soft to zero is three the same as
494:53 - setting value to 60 without passing any
494:56 - soft because uh you you take zero second
494:59 - to recover back to become a spring
495:03 - right and if it's one then it takes like
495:05 - one second
495:06 - so that is it's that is all the options
495:11 - that you can pass in for spring so let's
495:13 - summarize about spring is you can
495:15 - control the stiffness and the dampness
495:17 - of damping of your spring she controls
495:21 - how much how much it will spring and how
495:25 - much it has resistance in slowing it
495:29 - down
495:30 - right and then you can have options like
495:32 - hot and soft to control whether you want
495:35 - the Springs to kick in when you change
495:37 - the value or you want it to be disabled
495:40 - just for the moment
495:45 - in this video I'm gonna bring in a
495:48 - concept from functional programming to
495:50 - allow you to create more stores
495:53 - using uh function pure functions right
495:57 - and this concept is what I'm going to
495:59 - introduce you is called
496:01 - higher order Stars
496:03 - so what is higher order Stars so if you
496:06 - are familiar with functional programming
496:08 - uh terminologies you know that higher
496:11 - order functions is a function that takes
496:13 - in a function
496:15 - and then return a new function which the
496:18 - new function is being enhanced by your
496:20 - function
496:21 - and probably if you're familiar with
496:23 - react or other component libraries
496:26 - you're familiar with this concept called
496:28 - higher order components which means that
496:30 - your function take it takes in one
496:33 - component and return a new enhanced
496:36 - component
496:38 - and I'm going to borrow this concept
496:39 - this idea of higher order function I'm
496:42 - going to bring it to store
496:44 - so right now I'm going to share with you
496:46 - a few uh higher order stores
496:49 - which is a function that takes in your
496:52 - store and then return a new enhanced
496:55 - store so you can do cool things with the
496:59 - star
496:59 - so are you excited
497:02 - let's jump right in and take a look at
497:04 - this example that I've prepared for you
497:05 - over here
497:07 - so if you take a look at this code right
497:09 - here let me zoom in a bit so that you
497:12 - can see the text clearer
497:14 - I have a mouse position which is a star
497:19 - if you have followed me on how you can
497:21 - create a star using dumb events this is
497:24 - exactly the same code that I have
497:26 - written over there
497:29 - um links in the description if you want
497:31 - to watch that video
497:33 - so um I use this star
497:36 - and I assign it to a variable so you
497:39 - don't have to I mean right now I'm going
497:41 - to assign it to this variable called
497:43 - position so position is actually equals
497:45 - to Mouse position
497:47 - um you don't have to do it you can use
497:49 - the mouse position directly if you want
497:51 - to as well but just bear with me for now
497:54 - so this store
497:56 - the store value itself has two property
497:59 - it's an object and has two property it
498:01 - has Y and X
498:03 - so when I move my mouse the X and Y
498:07 - property value of this star will updates
498:09 - according to my store a mouse position
498:13 - so over here I created a div which is
498:15 - really in color uh 100 times 100 in size
498:19 - and then make it a position absolute and
498:22 - so that it has a transform that moves
498:26 - based on the value of the star the mouse
498:30 - position star So based on the X and the
498:32 - Y value so right now if I move my mouse
498:34 - you can see that this box is following
498:37 - me around with my mouse so
498:41 - um so as I move my mouse the value of
498:44 - the star is updated and
498:47 - the code over here subscribes to that to
498:50 - the value of the star so that it always
498:52 - gets updated so over here you always get
498:54 - updated value of the X and the Y
498:56 - position and you can also see it over
498:59 - here where I print that both value out
499:01 - in
499:03 - in the Box over here
499:05 - so um so let's let me introduce a few
499:11 - higher order
499:12 - store that I've prepared ahead of time
499:16 - so the first one is called the bounce so
499:19 - the bounce is a function and takes in a
499:21 - star and it's going to return a new star
499:24 - so over here I use derived to do that
499:28 - so I use a function called derive and
499:31 - takes in a star and derive metal will
499:33 - return me a new store
499:35 - right but then this the bounce itself is
499:37 - a fun it's a high order star it takes in
499:39 - a star and return me a new star so what
499:42 - this derived method does is that it will
499:46 - um
499:46 - I will set timeout
499:48 - um so that it uh it will debounce the
499:51 - value of the star so the the starter is
499:53 - text in by this the bounce function
499:56 - whenever the value has changed it does
499:58 - not change the return star value
500:01 - immediately you only updated in maybe
500:05 - after 100 milliseconds if nothing else
500:10 - has changed right so you make a lot of
500:12 - changes at once it's not updated until
500:14 - uh 100 milliseconds after the last
500:17 - change
500:18 - so to use it you can import
500:23 - the Bounce from the bounce
500:27 - and since this is a function and it that
500:30 - takes in a store and returns a new store
500:32 - I can do it like this
500:34 - all right so you see that this is still
500:37 - a star you don't have to change anything
500:39 - we just wrap your store with a function
500:41 - which is a higher order store function
500:43 - and this will gives us a new enhanced or
500:47 - a customized store
500:49 - so with this the bounce what you can see
500:52 - is when I move my mouse it does not move
500:54 - immediately but uh the value of the X
500:57 - and Y is being the bounced
501:00 - right
501:01 - so it feels a bit weird but it it is how
501:06 - the bounce work but probably what we
501:08 - want is not the bounce but throttle or
501:11 - throttle means is that for every
501:15 - so whenever you have valuable changes
501:17 - you don't
501:19 - um you limit the changes to happen only
501:22 - maybe uh once in maybe 100 milliseconds
501:26 - so you have changes that happens very
501:28 - quickly in successive that does not
501:30 - happen only the value will only be
501:32 - throttled to only change in every 100
501:35 - millisecond
501:36 - so we're going to use this throttle
501:38 - function
501:39 - apparently we haven't implemented it but
501:42 - you can see immediately the the ID of
501:44 - high order star is texting the store and
501:46 - returns a star
501:48 - right so
501:49 - um I can so I can easily replace this
501:52 - like throttle
501:53 - with throttle and replace this function
501:57 - I still get my star I still get my store
502:00 - and I don't have to change anything else
502:01 - so
502:03 - um I can
502:04 - and good thing about because of the
502:07 - functional programming idea I can change
502:11 - multiple star
502:14 - at once for example I can debounce and
502:17 - then throttle and yeah this still gives
502:20 - me so this gives me a new star and then
502:23 - the bounce will give me another new star
502:24 - and I the the position is still a star I
502:28 - can still use it like a star
502:30 - so yep so let's since I haven't
502:35 - implemented throttle let's do that
502:37 - together
502:39 - okay so here I have my function a star
502:44 - I remember the last time we used derived
502:47 - to derive the star
502:48 - um I'm gonna do the same thing over here
502:50 - as well so I am going to import derive I
502:54 - find that derive is a very uh great way
502:57 - to create a new store out of an existing
503:00 - store
503:02 - so that is what I'm gonna do it over
503:04 - here as well
503:06 - so derive
503:08 - from the store and it takes in the value
503:12 - and the sets method
503:17 - and over here
503:19 - I am going to take I'm gonna know like
503:23 - what take note of what is the time right
503:25 - now so now it's equals to date dot now
503:29 - so I also need because of throttling I
503:31 - need to so the idea of throttle is that
503:34 - things happens at most uh at the the
503:38 - value the the star changes happen at
503:40 - least uh 100 milliseconds apart right
503:44 - that that amount of time is something
503:46 - that we can control but it happens in uh
503:48 - in a fixed interval so to to have this
503:52 - kind of fixed in the bowl we have to
503:54 - know like what is the last time that we
503:55 - have changed the value of the star so
503:57 - this is the last uh I need to derive uh
504:01 - declare a variable called last time
504:03 - uh that we just change the value of the
504:07 - star
504:07 - so if last time
504:11 - is probably undefined
504:13 - it's not
504:15 - it does not have a value or
504:18 - now minus the last time
504:21 - is
504:23 - more than 100
504:26 - which means that either case so if
504:28 - there's no last time we need to change
504:30 - set the store right now because it
504:32 - hasn't been set before and it was set
504:34 - before then we only set it again if the
504:39 - time right now is more than the last
504:41 - time
504:42 - so over here I'm gonna say uh set value
504:47 - oh sorry value
504:50 - and last time and then we need to update
504:53 - the last time so last time it goes to
504:55 - now
504:55 - or else we're not doing we're not doing
504:57 - anything right let's try and see
505:01 - so yeah it's it's slightly slower it's
505:04 - following around but it's slower it
505:07 - updates slower so we have like some sort
505:10 - of throttling happening right now so we
505:13 - can compare you can have two divs uh so
505:16 - I'm gonna create another div
505:20 - um so here is the throttle position
505:33 - which has the color of maybe blue uh set
505:37 - it uh 120
505:41 - 120
505:44 - uh this should be negative 60 60 okay
505:48 - and let's create a new star let throttle
505:52 - position equals to throttle Mouse
505:55 - position
506:00 - so we can remove this for now
506:03 - and let's see so with throttle you can
506:06 - see that it does not update immediately
506:09 - all right
506:11 - and however it feels like
506:15 - um
506:16 - once we stop uh if it's just recently
506:20 - updated the last value is not being
506:22 - updated uh
506:24 - to the store as well so probably we want
506:27 - that to be updated as well so that you
506:30 - know it does not stuck at like uh either
506:33 - like it still honors uh last few changes
506:36 - that's made but then still within the
506:38 - interval so what I'm going to do here is
506:42 - I'm gonna set a timeout if
506:45 - uh it's not changing I need to set a
506:47 - timeout and probably clear this if uh if
506:51 - there's new changes coming in
506:53 - so I'm going to say uh set timeout
507:00 - which is let's say also 100 milliseconds
507:04 - and if this timeout triggers I'm going
507:08 - to call set timeout with the value
507:12 - um over here I am going to get the timer
507:15 - ID
507:17 - I remember remember that when I say
507:20 - derive uh if it's a synchronous mode you
507:23 - can return a function that clears that
507:26 - does the cleanup so I'm gonna do that
507:28 - over here now so I'm return the function
507:30 - that say clear time out with the timeout
507:33 - ID
507:35 - if it does not return a function so if
507:37 - it's in this if case it does not return
507:38 - the function it's okay as well we'll
507:40 - handle that but in if it's the else case
507:43 - return the function so when the next
507:46 - time this async this function has been
507:48 - called again uh as well clean it up
507:51 - first by calling this function first
507:52 - before executing the holes it will clean
507:56 - the previous return function and then
508:00 - run the script again
508:02 - so let's try again so at least I think
508:06 - right now you can see is that uh even we
508:09 - move very fast the
508:12 - um the last value is still being updated
508:14 - uh like even if it's not like even if
508:17 - the last update happens uh right just
508:20 - right after the last star changes we're
508:23 - still gonna change it um uh 100
508:25 - milliseconds later
508:27 - right I think it's a bit abstract to
508:29 - understand the bounce usually uh if you
508:32 - are not familiar with the uh sorry
508:34 - throttle if you're not familiar with
508:36 - throttle uh
508:38 - you can take a look at maybe like some
508:40 - diagrams of throttling and you can see
508:43 - over here what throttle means is that it
508:46 - will ensure that uh events events happen
508:50 - at a fixed interval right so this one uh
508:54 - what happens over here and then if like
508:56 - a lot of things happening at once only
508:59 - this this interval is fixed so that it
509:02 - will it will just show like the last
509:03 - value over here and then show this last
509:06 - value over here right
509:09 - so
509:10 - um yeah if you are you if you are still
509:13 - confused you can comment down below and
509:15 - I try to probably find some link uh to
509:18 - help you with help with help you with
509:20 - right so
509:22 - uh as you can see here I have other uh
509:26 - high order stars that I want to share
509:28 - with you as well so another one I can
509:31 - think of is actually called a read-only
509:33 - high order star
509:34 - so for example if you have a star that
509:37 - you can change the value with for
509:38 - example right now I'm gonna create like
509:40 - input box
509:42 - buying value with a value star
509:48 - and you want to create a new store
509:52 - which is called read only value
509:56 - but somehow uh the user of this store
509:59 - does not know and still binds it to a
510:01 - input and you want to actually want them
510:04 - like no don't do that right uh so let's
510:08 - see so for example right now I have a
510:10 - writable
510:11 - star so that's our writable spell star
510:14 - and declare like a value equals to
510:17 - writeable
510:20 - let's
510:21 - read only value equals to value
510:31 - yep so for example okay let me hide this
510:35 - two box first
510:38 - for example I have uh value is a
510:41 - writable star so when I change something
510:43 - should change and I want to pass this
510:45 - store around to anyone to subscribe to
510:48 - it but I don't want them to actually set
510:50 - the value I just want them to able to
510:52 - subscribe to it and just read only
510:54 - right so if you pass this store as like
510:58 - a variable and if you assign it to a
511:00 - variable called read only value and you
511:03 - expect it to only read only and then you
511:06 - are wrong uh because they actually can't
511:08 - set the value so this this variable is
511:10 - being used by this second input and the
511:13 - second input tries to set the value and
511:15 - actually manage to set it
511:18 - so if you want to prevent that
511:20 - you can wrap this door with um
511:23 - instead of writing your own trying to
511:27 - come up with a custom store you can
511:29 - write a higher order Stars so that if
511:32 - you have a lot of similar use case not
511:34 - just for this store and a lot of other
511:36 - stores you can take in the store and
511:39 - then pass it into this higher order
511:41 - store and this higher the store will
511:43 - make sure that whatever store you text
511:45 - in will become a read-only store so you
511:48 - will return a new copy a new star that
511:51 - is read only and without touching the
511:52 - existing star
511:54 - so this year I um import read only from
511:58 - read only
512:02 - and I'm going to call this read only
512:05 - with the value
512:07 - so this will return to me a new star so
512:10 - I can it's still able to subscribe to
512:13 - this the value star but if I try to
512:16 - change over here although you don't see
512:19 - it immediately but you can see that
512:21 - there's already console error that tells
512:25 - you that the value your unable to set a
512:27 - value of a read only star
512:29 - uh you still The Binding still works is
512:32 - just because the uh in uh we we don't
512:35 - really we don't really do a uh because
512:38 - an area has already thrown out so right
512:40 - now you are changing the value of the
512:43 - input uh but after that the input will
512:46 - try to set the value store and there's
512:48 - an error and it does not come back again
512:50 - to reset the value of the inputs that's
512:53 - why you still see the values there but
512:54 - actually an area has already thrown and
512:57 - uh error has already happened
513:00 - right so read only star and how you
513:02 - implement it
513:04 - you don't always have to use a derived
513:07 - to create a higher the star or custom
513:08 - store you can create your own for
513:10 - example in this case I only need the
513:12 - Subscribe method from the store so I say
513:14 - subscribe it goes to the store subscribe
513:16 - but
513:18 - um to to give up a better to give out a
513:20 - nicer error I also implement the sets
513:23 - method that it throws an error whenever
513:25 - you call it so without it I will still
513:28 - it will still it is still a read-only
513:31 - store for example when I said something
513:34 - it is still a read only store except the
513:37 - error is slightly different it says read
513:39 - only value.set it's not a function
513:41 - so to give a meaningful error I say I
513:44 - still implement it and say it will throw
513:46 - in an error so that you know that you
513:48 - have done something that you shouldn't
513:50 - have done
513:51 - so lastly I want to show you is called a
513:54 - spring higher order star so
513:57 - um you've seen that we're able to
513:59 - throttle the value of the position
514:03 - so let me comment this out and let's
514:05 - come back to this two Box Thing
514:08 - right you see that we have able to
514:11 - um
514:12 - passing a throttle and then throttle the
514:14 - position right
514:16 - um that's we that's not so we we doesn't
514:19 - have to limit ourselves with like things
514:21 - like the bounce throttle or delay we can
514:23 - do something like a spring and this
514:25 - example I'm going to show you
514:26 - particularly and we can write it out
514:28 - together because it's I find that it's a
514:31 - bit interesting to think about this
514:33 - so I want to implement uh spring higher
514:37 - order uh
514:40 - star
514:42 - so such that I can call Spring with the
514:46 - value I
514:47 - the value of the uh to pass in a star to
514:52 - the spring higher the star and returns
514:53 - me a new star that is hopefully well the
514:57 - value of the star will be springy
515:00 - so over here
515:03 - um
515:05 - I am going to imp I'm going to use the
515:08 - built-in spring
515:10 - method from the spelled motion
515:13 - so hopefully you have watched my
515:16 - previous video about spring and twin I
515:19 - leave the links to that video in the
515:22 - description
515:23 - so over here I'm gonna import
515:26 - spring
515:27 - from svelt motion
515:31 - and over here
515:33 - I want to implement a spring store I
515:36 - want to return a new spring store
515:39 - um
515:41 - yeah I want to return a new spring store
515:43 - so I need to create a spring store first
515:45 - spring star it goes to spring
515:49 - and
515:51 - the initial value of this spring should
515:54 - come from this star
515:55 - but we can set it later on so so for now
515:58 - I'm going to say undefined so if it's
516:00 - undefined or now it will be now
516:03 - undefined and when you set a value it
516:06 - will not like spring to that value like
516:08 - the first value that is not null or
516:10 - undefined will be
516:12 - um will be set it directly so there's no
516:15 - springing from undefined to like your
516:17 - number
516:18 - so over here I say I'm gonna Define some
516:21 - like properties of the spring for
516:23 - example stiffness probably I'm going to
516:26 - go for 0.6 damping maybe on like 0.2
516:30 - thing
516:31 - so that it's more springy so that I can
516:34 - see the effect
516:36 - and over here if I return spring store
516:38 - directly
516:40 - um
516:41 - written spring store directly
516:44 - you we still haven't have a way to
516:47 - update the spring store right you have
516:49 - ways to subscribe to it but you have no
516:51 - way to update it
516:54 - and I don't want to return spring store
516:56 - directly as well because
516:59 - um that in that case springstall will
517:01 - have both uh subscribe and a set method
517:03 - and I only want people to subscribe to
517:05 - Spring store I don't want to set the
517:07 - value of spring store and yeah it should
517:10 - be a read-only thing as well
517:12 - so I can say uh subscribe for now
517:17 - it goes to springstall.subscribe
517:23 - um over here
517:25 - I need to subscribe to the store
517:30 - uh to the original store and I'm going
517:32 - to have a fun whenever something has
517:35 - changed I need to use this value to set
517:37 - the value of the spring star so over
517:39 - here I'm going to say um
517:41 - spring
517:43 - store.sets
517:47 - so let's try uh
517:50 - whoops it's not work is it working is it
517:53 - not working
517:58 - yeah it is working it is very springy
518:02 - it is very springy
518:07 - um I'm guessing shouldn't need throttle
518:11 - for now
518:12 - let's take a look at how it will
518:17 - it's still very springy
518:20 - uh oops yeah very springy so I'm gonna
518:24 - reduce this spring uh maybe like damping
518:28 - increasing the damping so that it it
518:30 - settles faster
518:34 - right
518:36 - so uh if you take a look over here the
518:39 - code you may notice that we subscribe to
518:42 - the store but we do not unsubscribe from
518:46 - it
518:48 - all right this is this this will lead to
518:52 - us always subscribing to the store even
518:56 - if say for example we are no longer
518:59 - subscribed
519:00 - uh for example this function written the
519:03 - Subscribe method should returns an app
519:04 - subscribe and over here we should
519:07 - um unsubscribe uh if it's we should
519:10 - unsubscribe from the store as well
519:12 - and if we do something like this uh so
519:16 - if we come over here
519:18 - and have a function
519:20 - subscribed to it
519:28 - and let oh this one also have to be
519:30 - unsubscribed from Star
519:36 - you can do something like this right
519:39 - so that we unsubscribe from both
519:42 - subscribe from store and um subscribe
519:44 - from Spring
519:51 - yeah
519:52 - but this doesn't
519:53 - this isn't
519:55 - exactly correct as well because if you
519:58 - take a look over here
520:01 - um this unsubscribes it's just
520:03 - unsubscribe from
520:05 - like once instance of unsubscribing so
520:08 - if you have multiple
520:09 - people subscribe like multiple cases to
520:13 - sub subscribe to the the return store
520:15 - for example you have five cases of
520:18 - subscribing to it as long as one of it
520:20 - unsubscribing from this store uh we uh
520:23 - immediately unsubscribing from this uh
520:26 - the initial position store
520:29 - you cannot subscribe from
520:31 - this spring star is okay right because
520:34 - you still have four other people
520:36 - subscribing to it and receiving it but
520:39 - you shouldn't unsubscribe immediately
520:40 - from this
520:42 - um original store
520:44 - so we can't really do this we want to do
520:46 - this we have to
520:49 - um maybe Keep A Memory of reference
520:51 - counts of how many functions that we
520:54 - have and only unsubscribe from the store
520:58 - if all of them is being unsubscribed
521:01 - which means we have to manage again come
521:03 - again to manage the number of functions
521:06 - that is being subscribed being
521:08 - subscribed to the to our to our store
521:11 - and yeah so so that is something we
521:15 - should probably change to
521:17 - but I have an idea over here we can
521:20 - define a readable star
521:22 - so if I say okay so that let me type it
521:25 - out first I can use readable
521:28 - from svelt Star
521:32 - readable
521:36 - um I can have undefined first and a set
521:39 - so over here
521:41 - this function of the readable star
521:45 - will be caught only once when someone is
521:50 - subscribing to it and you can return a
521:53 - function if that will be called only if
521:57 - all of the subscribers unsubscribe from
522:00 - it so probably we can set up the
522:03 - subscription of the store over here
522:05 - instead
522:08 - and I'm subscribe it from here only in
522:12 - here
522:14 - right we answer we subscribe we only
522:17 - subscribe once when there's someone
522:21 - subscribing from this readable store and
522:24 - unsubscribed immediately
522:26 - uh unsubscribes when not immediately but
522:29 - only when everyone has unsubscribed from
522:32 - this readable store which is great right
522:34 - and which we probably should return this
522:36 - readable store instead so
522:39 - yeah but then how about over here
522:43 - um so when we subscribe
522:45 - to the store and we should also uh have
522:49 - this in here as well right we should
522:52 - also subscribe from the
522:57 - uh spring star subscribe so we should
523:00 - also subscribe to the Sprint store
523:03 - and since uh when whenever the spring
523:06 - store has changed should update the
523:08 - value of the readable store as well so
523:10 - instead of function this is actually
523:12 - sets so this set will notify all the
523:15 - subscribers that uh the spring star has
523:19 - changed and oh and then notify all the
523:22 - subscribers of the readable store
523:25 - right so over here I copy this over
523:30 - and I think this is much better
523:32 - implementation than the previous one so
523:34 - I'm going to remove this
523:36 - and I'm gonna clean up over here a bit
523:39 - and here we have readable and Spring
523:42 - right so if I move along
523:45 - it still works
523:47 - pretty much the same we don't really
523:49 - test out the unsubscribing parts but
523:52 - based on the logic that I've walked you
523:54 - through I hope that you understand uh
523:58 - where I'm coming from and why is it so
524:00 - right if you are not sure comments down
524:02 - below you can ask questions and I love
524:04 - to answer them okay
524:06 - so finally we have seen uh various kind
524:10 - of high order stars like throttle the
524:13 - bounce read-only spring
524:16 - and
524:17 - if you uh being inspired by this video
524:21 - and you think that you also want or you
524:24 - already have some sort of some higher
524:27 - the stars that you want to share
524:28 - comments down below I want to see them
524:30 - and if they are good I'm going to share
524:33 - them to the World on my Twitter account
524:34 - and probably I will want to also make a
524:38 - video out of it right I want to learn
524:40 - from you as well
524:43 - so you have seen how we can create
524:46 - custom stores and it's felt out of
524:49 - popular state management libraries such
524:52 - as Redux State machine exit value and
524:57 - you're seeing how we can create a
524:58 - immutable
525:00 - star using images
525:03 - and there's one Library although it's
525:06 - not entirely like a state management
525:07 - libraries but it has helped us with a
525:10 - lot of event streaming uh which is rxjs
525:15 - so today I'm going to let's take a look
525:17 - at how we can use rxjs as a store in
525:20 - spelled application
525:22 - so um I'm actually very new to arcgs and
525:25 - in fact I haven't really used rxjs
525:28 - before prior this recording this video I
525:31 - have done my research it's just solely
525:34 - because of this video because I know
525:37 - some of you have been using rxjs and
525:39 - wanted to see how you can use rxjs with
525:42 - spells
525:43 - um so if I do anything wrong please
525:46 - comment down below and let me know about
525:48 - it okay thank you
525:51 - so rxjs so rxjs provides us like
525:55 - observables that you can subscribe to
525:58 - and get the value of the observables
526:02 - and that actually the concept of debts
526:05 - actually very similar to cell store
526:07 - where you can subscribe to the store and
526:10 - get the value of the store
526:13 - and you can subscribe from it
526:15 - so if you take a look at observable and
526:18 - the stock contract
526:20 - you'll notice that observable actually
526:22 - kind of follows the spell store contract
526:26 - so what that means is that if you have
526:28 - an observable
526:29 - you can use the dollar prefix value
526:32 - variable syntax to access the value of
526:35 - uh the all the the values that is being
526:38 - generated out of the observable
526:41 - so let me show you an example over here
526:44 - I have a rebel so now I want to create
526:49 - an observable using from event
526:52 - so from event allows us to create
526:54 - observable from an event listener so I'm
526:58 - import from rxcs and over here I'm going
527:00 - to create a mouse position observable
527:04 - so over here I use from events say
527:07 - document and then listens the mouse move
527:11 - even from a document
527:15 - and immediately uh if I do something
527:19 - like this
527:21 - Mouse position
527:23 - merely I can already get the value uh
527:26 - all the events from Mouse move
527:29 - observable so it's it's mouse event but
527:32 - there's nothing uh it's it's like the
527:35 - event itself so if you want to actually
527:37 - get the client X and client one of the
527:41 - mouse move event
527:43 - you will have to pipe it through
527:45 - um
527:46 - rxjs operators to maybe pick up uh pick
527:50 - up some X and Y position right from the
527:53 - from the event so for each of the events
527:56 - I'm going to call map so map is an
527:58 - operator from arcgis
528:01 - um so
528:02 - I'm pretty new to this uh I've tried to
528:06 - do my best on researching this if I'm
528:08 - doing something wrong let me know in the
528:10 - comments right so our shares operators
528:14 - so I'm using map and oops sorry from and
528:19 - I need to map the events to maybe an
528:22 - object so I'm going to say x is
528:24 - events.client X Y is event.client y
528:30 - so I pipe this event to the mouse
528:33 - position and now let's try and see what
528:35 - happens come over here okay object
528:37 - object so I'm gonna say uh instead I'm
528:40 - gonna say Json or 3G file to see the
528:42 - mouse position
528:44 - so when I move around you can similarly
528:47 - that this is like um
528:50 - a star you can subscribe to it and it
528:53 - also returns and subscribe unsubscribe
528:55 - method then you cannot subscribe from
528:56 - the store so basically it's
528:59 - it works out of box right what about
529:03 - using rxjx with shell you just work out
529:05 - on a box you can use it immediately
529:07 - so um you've seen how we can convert an
529:10 - observable to a spell store basically
529:13 - not really convert because observable
529:14 - has already implemented the spell store
529:17 - contract so you can use it like a
529:20 - spelled store
529:21 - using the dollar prefix syntax to
529:23 - subscribe automatically subscribes and
529:25 - unsubscribe from it and get the value of
529:27 - out of the observable events
529:30 - but now we're going to look at a flip
529:32 - side of it
529:33 - for example if you have a spell store
529:35 - can you convert that to become an
529:38 - observable well of course the answer is
529:41 - yes I'm going to roughly show you how I
529:44 - would do it
529:45 - again disclaimer this is my first time
529:48 - doing this uh if you have a better way
529:51 - of doing it or better API that I don't
529:52 - know of let me know comments down below
529:54 - right so here I'm gonna say uh from uh I
529:58 - have a decline function called tool
530:01 - observable
530:03 - and it should take in a star and I'm
530:05 - gonna return a new original observable
530:09 - so I can create Observer a new
530:11 - observable using the Constructor
530:12 - observable
530:14 - and for each of the Observer
530:18 - um
530:19 - we need to subscribe from the store and
530:21 - for each of the value coming out from
530:23 - the store we are going to call Observer
530:25 - dot next
530:27 - with the value
530:29 - so
530:30 - um I think I need to return this
530:33 - unsubscribe method so
530:35 - um so the observable can be upsubscribed
530:37 - from it as well if you return the
530:39 - unsubscribe method if you can from uh
530:41 - from for each of the Observer
530:44 - so I can convert a star to observable
530:47 - right so here I've created a store using
530:50 - a mouse position it's the same event but
530:53 - it's it's using it's creating a new
530:57 - readable store which is a custom so we
530:59 - can create a custom spell store out of
531:01 - the mouse position
531:04 - uh you should watch the video on how I
531:06 - created this links in the description
531:08 - below
531:09 - so over here I'm going to import that uh
531:12 - Mouse position store
531:20 - and actually over here I also need to
531:24 - know that I need to import this
531:25 - observable right so over here I'm gonna
531:28 - I have my mouse positioned as a store
531:31 - okay Mouse position star
531:36 - I would do to create
531:40 - um
531:41 - observable out of it I probably will
531:44 - have to uh call observable
531:50 - the store and since it's observable we
531:54 - can subscribe to it and take a look at
531:57 - the value out of it right so here I'm
532:00 - gonna say value console log value
532:04 - so this is now an observable
532:07 - uh we can see the value out of it and to
532:10 - prove that this is already an observable
532:12 - we're going to use pipe like one of the
532:15 - rxjs operator again over here so I'm
532:18 - going to say pipe it to see um this time
532:21 - I'm going to use a new operator called
532:23 - plug so I can just pick one value out of
532:25 - the uh
532:27 - uh objects so this object the store
532:30 - gives us X and Y value so here I'm going
532:33 - to plug just the X
532:36 - so if I move around you'll see that only
532:38 - the x value oh I think I forgot to
532:40 - unsubscribe that's why you can see the
532:42 - console again Let me refresh this
532:48 - uh
532:51 - whoops
532:53 - yeah so you can see that the x value is
532:57 - coming out from the console
532:59 - so here we're here um
533:02 - I am going to so this is like the X
533:05 - observable uh using I'm gonna say x
533:09 - dollar
533:12 - uh and I'm gonna create another
533:14 - observable called y dollar equals to two
533:16 - observable
533:18 - Mouse position star
533:21 - dot pipe and you can plug just a y
533:24 - property
533:26 - and finally we are maybe going to create
533:29 - a news uh new observable by zipping this
533:34 - to where these two observable into one
533:37 - let's say sum of X and Y equals to zip
533:42 - maybe X and Y
533:46 - and pipe it so I'm gonna use map again
533:49 - over here I'll become an array of x
533:52 - value and Y value and I am going to
533:55 - return the sum of both
533:57 - X Plus y so again this are all
534:02 - observables right to prove that this is
534:04 - observable you can do all the operators
534:06 - from observable uh from arcgs
534:12 - finally this is an observable which
534:14 - means it follows a store contract and
534:16 - you can still subscribe to it but here I
534:19 - am you can see sum of X and Y so as I
534:23 - move along you can see that over here
534:25 - you can see the sum of X and Y being
534:27 - shown over here
534:30 - right so that's all for
534:34 - um rxjs with svelte star you can uh this
534:39 - rxjs observable is already following the
534:42 - swell star contract which means that you
534:44 - can already Subs subscribe automatically
534:47 - subscribes from it using a dollar prefix
534:49 - variable syntax
534:51 - and it's and also actually we can also
534:56 - in this video I've showed you how you
534:58 - can convert a store to come observable
535:01 - so that you can play around using all
535:04 - the observable rxjs operators to play
535:08 - around with all those events and then
535:10 - finally because it is a store you can
535:12 - use it directly again so instead of you
535:15 - know coming out with your own derived
535:17 - and uh deriving like custom store uh
535:21 - deriving store from an existing store
535:23 - you can convert it to our xjs maybe it's
535:26 - easier for you to play around with it
535:28 - using all the rxjs operators and then
535:31 - finally it is still following a store
535:33 - contract so although essentially it's
535:35 - observable but you can still subscribe
535:37 - it like a store
535:42 - so today I have a challenge for you how
535:45 - to make a Class Property
535:48 - to be like a star
535:50 - so the question is like this I have a
535:52 - scenario where I have a class called
535:54 - clock
535:55 - which has a property called time so this
535:59 - time right now is the current time but I
536:02 - have a function called tick that will
536:03 - update this property every tick so I I
536:07 - can call this tick function tick method
536:09 - every time every second or every few
536:13 - minutes uh that does not matter but
536:15 - every time I change call this method I'm
536:19 - going to change this property called
536:20 - time
536:21 - and what I want is that I want to
536:23 - subscribe to this class property I have
536:25 - so over here I am using this clock I'm
536:28 - creating a new instance of this clock
536:30 - and every interval I'm calling a tick
536:33 - method right every one second for now
536:36 - and I over here I want to have I want to
536:39 - always show this clock time I want to
536:42 - show that it's uh I want to so I have
536:45 - two places one is in a reactive
536:48 - statements where I'm assigning this
536:52 - clock time to a variable and hopefully
536:54 - this variable can
536:57 - uh this this hopefully these statements
536:59 - will be reviewed re-evaluated every time
537:02 - when the clock time has changed uh of
537:04 - course right now it does not uh because
537:07 - if I uncomment this you notice that
537:09 - actually we are calling a tick method
537:11 - every second but you only see one
537:14 - console over here which means that those
537:17 - Felts not all the variables over here
537:19 - say this is a assignment so all the
537:23 - variables on the right which is the
537:25 - clock uh has not changed so far right
537:28 - which is true because we haven't changed
537:30 - the clock variable over here time yeah
537:33 - time is being assigned over here so all
537:36 - as well I can see is that the clock has
537:38 - not changed and therefore we are not
537:40 - going to this is not going to be
537:42 - re-evaluated every time when you call
537:45 - the clock.tick
537:46 - same thing goes if I come over here and
537:50 - say clock the time instead
537:55 - um again this clock is this clock
537:58 - variable has never changed so we are not
538:00 - going to
538:01 - update this text over here
538:05 - um but how about when we assign it to a
538:07 - variable I'm assuming that the time
538:09 - proper clock does not change is okay but
538:12 - I'm assuming the time variable should
538:13 - change I'm I guess this this should
538:16 - change right because the time variable
538:18 - is the time property is what we are
538:20 - changing so far but again Phil does not
538:23 - see that so it does not know that
538:26 - um every tick you update this property
538:28 - does not know when this is updated
538:30 - there's no way to know
538:32 - um so
538:33 - what should we do
538:35 - so to know a variable
538:38 - that has changed is either whether the
538:40 - variable is being defined as a top level
538:42 - variables in a script tag which is like
538:43 - a stitch to the components yes there's
538:46 - ways if your update is those variables
538:48 - spell would know immediately but over
538:50 - here clock is a class it could be
538:53 - written in a separate file or it could
538:55 - be written in your M plus field but then
538:57 - all this property is not a top level
539:02 - um top level variables in a script tag
539:05 - therefore it is not a state to the
539:06 - components and therefore spell has no
539:09 - way that to know that day has changed
539:12 - spell the compiler will not analyze
539:15 - until that level to know actually this
539:17 - property has changed there's no way to
539:19 - trace this you can change this variable
539:20 - everywhere right if you pass this clock
539:23 - um because plus this crop clock instance
539:26 - to anywhere and you call the tick
539:28 - function a tick method uh the the
539:30 - variable will change in terms of
539:32 - compiling time you in in terms of the
539:34 - compile time there's no way to trace
539:36 - that deep to know actually all the
539:38 - places where you call the tick method
539:40 - and therefore end those kind of
539:42 - reactivity over there unless you trace
539:44 - it unless you use some sort of runtime
539:47 - method like a proxy to to to figure
539:50 - those things out right or maybe like
539:52 - some sort of dependency tracking but
539:55 - here so what we left over here is of
539:59 - course yes you can use some sort of
540:00 - dependency tracking Library memory
540:03 - to to help us with this but in this
540:07 - video we're going to take a look at how
540:08 - we can use store to help us right so
540:11 - star I can see two ways to use a store
540:14 - to to help us out in this scenario
540:17 - so first is take a look at so to
540:22 - to come up with this tool to come up
540:24 - with that two ideas that I have is it
540:27 - stamps up with this statement time
540:28 - equals clock dot time
540:31 - and as I explained earlier clock has
540:34 - never changed so spell
540:36 - treat does not treat this as something
540:38 - that will ever be re-evaluated anymore
540:41 - so there's only two ways two methods
540:44 - that you can do over here right first is
540:46 - that how about we let sellout knows that
540:48 - clock actually is a star clock is
540:52 - something that you need to subscribe to
540:54 - right that is that is possible right so
540:57 - one is you make a clock like a store and
541:00 - a store with a property that has a Time
541:04 - so over here you you kind of subscribe
541:06 - to the clock right that is one way uh
541:08 - way number one and don't worry we're
541:11 - gonna explore both of them we're gonna
541:12 - try both of the uh idea that I I can
541:16 - think of for now so first is you treat
541:18 - uh clock as a star okay second way that
541:23 - I can think of is how about we treat
541:25 - time as a star so what I mean is that
541:28 - say for example let's come up with
541:31 - another reactive statement uh or not
541:34 - maybe we have like a Time store variable
541:37 - equals to clock Dot
541:40 - time
541:42 - okay and what you have here instead is
541:45 - you are consoling
541:48 - the Time store
541:52 - so this is a
541:54 - you can even do chords right this is a
541:56 - variable but this is a store variable
541:58 - which means that this can be subscribed
542:00 - and the value can change so if you do
542:02 - this over here we are telling that
542:05 - thanks spelled that okay this is a star
542:07 - subscribes to it you if it if the store
542:09 - value changes then you have to run this
542:11 - again so the way you probably would want
542:15 - to use is come over here and do this
542:18 - right you come over here and write time
542:20 - star
542:22 - so this is Method number two
542:28 - all right time star
542:31 - so let's let's write the method number
542:32 - one as well here is the clock
542:35 - the time right
542:39 - so if you
542:41 - if you take a look at how I come up with
542:43 - this you notice that the initial code
542:45 - the initial code that we have
542:48 - time equals the clock but time I'm
542:51 - looking at this statement time equals
542:53 - clock on time and this if you want this
542:56 - to be reactive to be something like a
542:59 - store that you can subscribe to then
543:01 - there's only two possibilities right one
543:04 - is the clock itself is a store or
543:06 - secondly is that the clock the time the
543:08 - time is the star
543:09 - so that's why first one is I retrieve
543:12 - the clock as a store and we do this so
543:14 - that we can subscribe to the cloud and
543:16 - secondly is we treat time as store so if
543:19 - you get the time out as a variable then
543:21 - we can subscribe to it all right uh do
543:24 - not do know that uh although time is a
543:27 - storm we can't really do like this
543:29 - because
543:31 - cloud.time is not a uh you have to
543:35 - Define this as a property and again this
543:38 - does not mix well things that it is a
543:41 - star uh spell only looks at the variable
543:43 - over here right so if we assign it to
543:45 - something else and we now itself is a
543:48 - variable then we can use a dollar uh
543:51 - that variable to subscribes to it okay
543:55 - so let's start with the first
543:58 - idea right clock as a store
544:01 - so what is a store
544:04 - is a contract where star says that any
544:07 - variable that you can treat this as a
544:10 - store when it implements this method
544:13 - called subscribe
544:15 - and of course if you want it to be
544:17 - readable you want the store to be able
544:19 - to be updated then you implement the
544:23 - sets method right and the Subscribe
544:25 - method itself takes in a function which
544:27 - is to be which is like a listener a
544:30 - subscriber and you have to notify that
544:32 - function every time that you something
544:35 - has changed
544:37 - so um yeah and then that function once
544:41 - you when you call subscribe method you
544:43 - should return also a function to
544:44 - unsubscribe to the store right so this
544:47 - is the score contract we've explored
544:49 - that and you can find this video in the
544:51 - link in the description or even in my
544:54 - channel say what is a store contract and
544:56 - you will find that
544:57 - so let's start with
545:00 - implementing
545:02 - clock itself the class itself as a store
545:06 - right so this clock is a class right and
545:09 - all these are the methods so what we can
545:11 - do actually uh very simply is to
545:13 - implement this subscribe
545:16 - methods once you experiment this
545:18 - subscribe method you
545:21 - clock this is another subscribe
545:24 - you can already treat the clock as a
545:28 - star right so if I come over here and
545:31 - comment other things away
545:33 - is not a star with us wait wait I do
545:36 - write subs or Subs
545:39 - cribe right now you see that this is a
545:42 - subscribe and you need to return a
545:45 - function
545:45 - written
545:48 - a function to unsubscribe now you
545:52 - right now you implement this immediately
545:55 - you are making this clock
545:57 - instance This Cloud class instance a
546:00 - store
546:02 - so what do we notify what do we send
546:04 - this clock right so
546:06 - um we can come over here and record down
546:09 - all these functions subscriber function
546:11 - uh Subs function and we need to tell
546:15 - them the value right I need to tell like
546:17 - a value for example time okay I I can do
546:20 - it two ways one is I pass it with
546:22 - everything I have for this class so
546:24 - every time this class has something
546:26 - changed uh yeah I would have to notify
546:30 - the subscriber
546:31 - um with the entire thing so whatever I
546:34 - get from this whatever is treated as a
546:37 - store value from this store variable is
546:40 - the whole class instance
546:42 - okay so if I do this then it can get
546:45 - every anything I have so it's not about
546:47 - time it also have this uh tick
546:52 - you do this
546:53 - hold on what's wrong again subscribe
546:57 - subscriber okay
546:59 - yeah you can also call Tick over here it
547:02 - will still work right so it will
547:05 - the store value itself is the class
547:07 - itself right everything you see there is
547:10 - is a value so that is one way of course
547:14 - if you want to limit whatever you can
547:16 - subscribe to like you limit only the
547:18 - properties that you can get then maybe
547:20 - you can create an object instead and
547:22 - just pass down properties that you want
547:24 - to be accessible from the store as a
547:28 - star value so I'm going to pass just the
547:30 - time this Dot time
547:32 - and now you see that clock.tick is not a
547:35 - function it complains because whatever
547:37 - is treated as the store value is
547:39 - whatever you pass it over here so you
547:41 - only has the time
547:43 - right so it it kind of
547:46 - I'm not sure about you it really depends
547:48 - on what you want right so this may make
547:50 - it a bit less intuitive because you know
547:54 - clock itself has all this time and tick
547:57 - method but once you treat it like a
548:00 - store then the store value only have
548:01 - time
548:02 - property so it's up to you right so for
548:06 - for Simplicity I'm just gonna pass
548:08 - everything like I'm just a password this
548:10 - over here so that I don't have to write
548:12 - so many things over here and now uh I
548:16 - also need to
548:17 - record the subscriber down so that every
548:20 - time I call Tick I also have to call the
548:22 - subscriber
548:24 - uh this right I have to come over here
548:27 - to get this reference and call this this
548:29 - right so probably I would have to do
548:32 - things like uh maintain a list of
548:35 - subscribers
548:36 - and over here I'm gonna push this this
548:39 - like subscribers that push subscriber
548:43 - and over here I'm gonna Loop through
548:45 - desktop subscribers
548:49 - dot push
548:51 - uh sorry the forage
548:55 - for each of them
549:00 - I'm gonna call this right every time I
549:03 - tick I will have to come over here and
549:05 - notify with a new value and immediately
549:09 - you can see now I this is updating uh
549:12 - even
549:13 - here even here hey sorry yeah even here
549:18 - it's it's it's being triggered right you
549:20 - can see this has been controlled out now
549:22 - this is great except that it's undefined
549:24 - because this is Tick so I'm gonna change
549:26 - it to time you can see that this is
549:28 - being called with a new time every time
549:29 - now right we are making our clock
549:32 - a star we're making a clock class uh
549:35 - instance a store
549:37 - because this is a lot to implement
549:39 - um although it does not seem that way
549:40 - any uh and we even forget to how to
549:43 - implement the unsubscribe which is we
549:45 - have to uh subscribers and supplies and
549:49 - gets the instance to remove it
549:50 - subscribers
549:54 - ah that index of subscriber
549:59 - and we need even to need to remember to
550:01 - clean it up right this does not look a
550:04 - lot but there's actually an easier way
550:06 - to do this which is to use a writable
550:09 - store so we can use uh inbuild Stars
550:12 - writable for example
550:17 - and we can rely on them to to handle all
550:20 - the subscribers for us so what we can do
550:22 - what we need to do now is uh just create
550:25 - a store first up front so I'm gonna say
550:28 - this is the store okay writable
550:32 - so what you pass in is the value of this
550:34 - store right we're going to pass in this
550:36 - and
550:38 - over here in the Subscribe method we can
550:40 - do is we can call it store and then we
550:44 - say a uh subscribe we can call this
550:48 - subscribe we can delegate this to our
550:50 - store uh object over here it's called
550:53 - subscribe and subscriber I'm gonna
550:55 - return this right so the store helps us
550:58 - to do the subscriber it also returns a
551:00 - function to unsubscribe so we just
551:02 - return it directly so all of this being
551:05 - delegated to this writable store that we
551:08 - have over here
551:09 - okay then the next thing is ah man I
551:12 - forgot
551:13 - probably there's too many stores running
551:15 - that's why because we forgot to do a
551:18 - cleanup so I'm going to refresh this
551:19 - page now so that it does not it stops
551:22 - consoling
551:24 - right okay now uh and it stops because
551:28 - we haven't notified uh
551:31 - our store that something has changed I'm
551:33 - gonna come over here
551:35 - uh now we don't need subscribers so we
551:37 - come over here and we notify our store
551:39 - so we're gonna see this store and sets
551:42 - this right so we're gonna set whatever
551:45 - is the updated value right so now you if
551:47 - we are using this as the value of the
551:50 - star then we use this if you were
551:52 - thinking of doing this like the time
551:54 - then you have to write this over here
551:58 - like this right so it's up to you
552:00 - whatever what what is being what is the
552:03 - value of this store so I'm gonna be lazy
552:06 - and write this and that's all and you
552:08 - can see now it's nicely done
552:11 - uh my star is ticking this is the this
552:15 - is the
552:16 - um
552:18 - uh we treat the clock
552:19 - instance as a star
552:22 - okay so next we're gonna try a second
552:25 - method which is to treat just a property
552:28 - itself as a store
552:30 - so over here I am gonna pause it for now
552:34 - I'm gonna uh let's see not pause it I'm
552:38 - gonna copy all this and create another
552:40 - file clock
552:42 - so that
552:43 - um the link of this Ripple will be in
552:46 - the description and so that you can
552:47 - compare this to uh implementation right
552:51 - clock 2. so I'm going to replace this
552:54 - I'm going to replace okay no I don't
552:56 - have to replace let's say import Clock
552:58 - Two
553:00 - from two
553:04 - okay and uh for the time being and stop
553:08 - ticking so that less noise over here
553:11 - and then I'm gonna use my clock to
553:16 - I'll create a clock too
553:23 - clock2.tick
553:30 - and now we want to figure out how to do
553:33 - this which is
553:34 - get a property and treat it as a store
553:39 - so
553:42 - let's see so we can use the same idea
553:44 - which is to use a writable but itself
553:47 - has to be a star right so this time
553:50 - actually has to be a writable star
553:55 - and now every time we tick we're gonna
553:58 - say this dot time dot sets
554:04 - right so every time we tick I'm gonna
554:07 - update this writable store over here
554:11 - so over here uh Cloud Dot
554:13 - climb store
554:17 - oh hold on clock that time oh this
554:20 - should be Clock Two the time is a star
554:24 - and now if I uncomment this you see that
554:27 - this number is updating every tick
554:29 - because and over here you can see this
554:32 - is being consoled
554:35 - out on every tick because yeah this
554:39 - itself is a store now so what does that
554:42 - mean what that means is that if I clock
554:44 - that clock to the time if I get this
554:46 - this is no longer a value I can't read
554:49 - this value now I have to treat it as a
554:51 - store and I have to either do this to
554:54 - get the value of the store or I have to
554:57 - import the get
555:02 - from svelt Star
555:06 - to get the value out of this time
555:10 - variable over here like I have to get
555:12 - the time
555:14 - to actually read out the value
555:16 - because it's no longer it is it is no
555:20 - longer a property uh no longer a
555:23 - primitive it is an object right even you
555:25 - can't see it over here
555:27 - so
555:28 - um
555:29 - that's great
555:31 - um depends on your use case but to me I
555:34 - feel like we kind of gain something and
555:37 - lose something at the same time I want
555:39 - this property to be a Just A Primitive
555:44 - number
555:45 - but maybe we can have some sort of
555:47 - convention to tell
555:49 - um
555:51 - to to kind of tell the user that maybe
555:56 - this is
555:58 - a very primitive value which is a number
556:01 - but if you do something like this right
556:04 - this should give you the store that you
556:06 - need
556:07 - or maybe even like this
556:10 - should give you the star that you knit
556:12 - right so what that means is that
556:14 - actually uh this has no special meaning
556:18 - until we give it to them right so uh
556:20 - what this means is that we can actually
556:22 - have time as a normal variable but we
556:25 - also did find another proper another
556:28 - property called maybe time dollar is
556:31 - equal to writeable uh this dot time
556:35 - so every time we change the time maybe
556:38 - we can come over here and say this
556:41 - dot time equals to the date now
556:47 - and we also update this star over here
556:50 - and say this dot time
556:55 - so now this is not a sub something you
556:58 - can subscribe to but rather this is
557:00 - something that you can subscribe to
557:05 - so uh so I I kind of uh
557:09 - I have
557:13 - yeah so it kind of allows us to a
557:19 - have a flexibility of you know just use
557:22 - it as a normal value or have it
557:25 - especially right have some sort of
557:27 - special thing that is like a special
557:28 - property that is like a store that you
557:30 - can subscribe to so user can use both of
557:33 - them if they want to so here I can still
557:37 - console
557:39 - hello
557:40 - time
557:43 - primitive
557:46 - I can have still console it as a number
557:48 - and if I want to subscribe then I use a
557:50 - subscribable property right so this is
557:53 - this is your this is up to you this is
557:55 - how you design your components
557:58 - um yeah so before I end this I'm going
558:00 - to say that this star is created every
558:03 - time when we create a clock even no one
558:05 - is subscribing to it and we can actually
558:08 - um
558:09 - change this slightly we can add slide uh
558:11 - if this is a bottleneck that you
558:13 - encountered and realize that hey I
558:15 - shouldn't create this store every time
558:17 - when I have this clock instance because
558:20 - no one is subscribing to me and if you
558:22 - if you know no one is actually assessing
558:24 - this time Dollar property if you notice
558:27 - that then maybe some you can optimize it
558:31 - this way I'm gonna show it how I I would
558:33 - do it so first is I
558:37 - i instead of doing this
558:39 - I I can have like again like us
558:43 - more of a private property called uh
558:46 - time star
558:50 - uh yeah so I haven't defined it yet so I
558:53 - just wait so I'm gonna have this private
558:55 - property called time and that that
558:57 - starts with a pro underscore but at the
558:59 - same time I look at a gather for this
559:01 - class called time dollar
559:04 - right so this is the geta method so this
559:07 - tells us that if I call this right it
559:09 - means that I'm reading the time a dollar
559:13 - I'm gonna read I'm reading this time
559:14 - Dollar property out from this class all
559:17 - right so uh that tells me that okay if
559:20 - someone is accessing this meaning
559:22 - someone is interested to the store and
559:24 - someone wants to subscribe to it so only
559:26 - then we we create this store so I will
559:29 - do here is that I would create a store
559:33 - and store it somewhere which is like
559:34 - privately so this this is the variable
559:36 - that I'm gonna start this is a state I'm
559:38 - gonna start in it so I'm going to come
559:39 - over here and say uh if this dot
559:42 - underscore time
559:44 - uh it's already defined right so it's
559:48 - like if this is not undefined
559:51 - then I'm going to return this
559:53 - immediately
559:55 - or else I am gonna
559:57 - uh create this right so maybe I can do
559:59 - the other way around if it's not defined
560:02 - yet
560:03 - I can create this this dot underscore
560:05 - time dollar equals to writeable this dot
560:08 - time so I want to create this writable
560:10 - store only when I'm assessing this time
560:13 - Dollar property of my class
560:17 - only created and when in a tick method I
560:21 - will also if this
560:23 - time
560:24 - is not undefined and I only do this only
560:28 - when it's already defined I only update
560:31 - it let's say this dot time
560:34 - uh dot sets this the time so I only
560:37 - update this store create this store only
560:40 - when it's needed and only update the
560:41 - store when it's created so this way you
560:44 - kind of uh
560:46 - delay the creation of the writable store
560:49 - if it's if it is a bottleneck to you
560:53 - right so that's all that that we have
560:56 - done so far uh how to make a Class
560:58 - Property a store or how to make how to
561:01 - subscribe to a class property right you
561:03 - can make the class itself a store and
561:05 - you kind of subscribe to the class
561:07 - itself so that whenever the property has
561:08 - changed you kind of know on the know
561:11 - about it or you make the Class Property
561:13 - a store and you subscribe to that
561:16 - property right so we've explored two
561:18 - different methods and I hope that this
561:21 - opens up the possibilities that you can
561:23 - do and if it if you quit something so
561:26 - amazing that you want to share paste
561:29 - your link to the Rebel or your project
561:30 - in the comments and share it to the
561:32 - world
561:36 - hello I'm Leo so today we're going to
561:38 - talk about how we can create a store
561:40 - that allows us to do undo and redo
561:43 - right so we have a store that stores our
561:45 - data and we can make changes to the
561:48 - store so presumably you have history of
561:51 - the changes that you are making and then
561:54 - right now what we want is that we want
561:57 - the ability to undo the changes or we do
562:01 - it after you click undo right so here I
562:04 - have done a basic setup I've created
562:07 - something like a mini calculator where I
562:10 - have an input field over here
562:12 - and I have ADD button so I can type a
562:15 - number and then I click add or add the
562:17 - number 10. and then hopefully I can type
562:20 - say 50 and add 50 to it to 60. so what I
562:24 - want to do is that uh this is
562:26 - implemented as a store and I want to
562:29 - have the undo or redo ability in the
562:31 - store that allows me to click undo and
562:34 - jump back to 10. and then redo will jump
562:37 - back to 60 because uh yeah because we
562:41 - created with 60 first and then undo back
562:43 - to stand and then we back jump back to
562:45 - 60. so to create this kind of stars so
562:49 - how should we approach this so that's
562:51 - what we're going to talk about in this
562:53 - video
562:54 - so
562:56 - um
562:57 - the thing about how we can create an
562:58 - undo reduced store right we want to
563:01 - think about the undo redo mechanism
563:05 - right so most likely you will have an
563:08 - array that stores a history
563:10 - and that history could be of two kinds
563:13 - right so that defines uh that determines
563:15 - the two different approaches that we can
563:18 - look at for this video uh for this
563:21 - problem right so the two approaches
563:23 - would be first is that we have a history
563:25 - we have an array of actions so that the
563:29 - array of the history array records every
563:32 - action that you are making right so
563:34 - hopefully uh when you do Undo It means
563:37 - that you are reverting that actions
563:40 - right so the action will probably have
563:43 - two different kind of methods or maybe
563:45 - the action itself uh is is designed a
563:50 - way that can make changes to the store
563:52 - in one way as well as reversing the
563:55 - changes right advancing like applying a
563:58 - changes and reversing the changes right
564:00 - so you have a array of debts
564:04 - record then doing undo or redo BS
564:08 - straightforward as
564:11 - applying the changes or reversing those
564:14 - changes
564:15 - right so that is one approach and we
564:18 - shall explore that later but let me tell
564:22 - explain like the second approach right
564:25 - the second approach would be
564:27 - the history array starts a snapshots of
564:31 - the value at every changes so every time
564:34 - when you make changes you store the
564:36 - snapshot of the value that you're
564:38 - storing right so when you and so when
564:41 - you make new changes you store again a
564:43 - new snapshot so you have a history of
564:45 - snapshots of your value the star value
564:50 - and doing undo or redo will be
564:54 - um reverting to that snapshot right so
564:57 - you'll be kind of like setting back the
565:00 - value of the star to a previous value or
565:02 - previous snapshots and then redo will be
565:04 - setting it to a new snapshot but of
565:07 - course the act of
565:09 - um
565:10 - and do what we do shouldn't like
565:13 - affect the history itself right so
565:16 - setting like doing undo will be setting
565:19 - your the star value to a previous
565:21 - snapshot but that shouldn't uh set the
565:25 - store value is in a sense where it's
565:27 - like setting a new snapshot right that
565:29 - is just reverting snapshots that's all
565:31 - it doesn't touch the history of it at
565:34 - all right so probably so we're going to
565:36 - explore these two approaches
565:38 - uh this will most likely will be like a
565:41 - live coding kind of way of explaining
565:43 - things so you will see like my thought
565:45 - process along the way on how I'm gonna
565:48 - tackle this so I've laid down my two
565:52 - um General
565:53 - approaches two way of thinking of it and
565:57 - we shall take a look at both of them
565:59 - right so this video
566:00 - may be long so I will try to put in some
566:04 - landmark in the
566:06 - um in the YouTube video so you will have
566:08 - like sections if you want to jump on the
566:10 - first approach or the second approach
566:13 - right so before I get started if you
566:15 - like this video or you think that this
566:17 - video is going to help you a lot please
566:19 - consider to like my video as well as
566:22 - share it if you are at the end of the
566:25 - video if you think it's it's great right
566:27 - so liking my video will definitely help
566:30 - me as well as you because anyone who
566:34 - likes my video will give YouTube an idea
566:37 - that this video is great and it will
566:39 - share and recommend to more people like
566:41 - you and more people like you will able
566:43 - to see this kind of video and help them
566:44 - right and in return may help you right
566:47 - so
566:48 - let's see the first approach so the
566:51 - first approach we're gonna do
566:53 - is we're gonna so here we have a simple
566:56 - store where every time when I add
566:58 - something we are actually
567:01 - changing the value of salt right we say
567:03 - store plus equals value where we change
567:05 - the star right so what we want to do
567:07 - here is we want to add
567:10 - an array called a
567:13 - history
567:15 - history
567:18 - okay so remember this approach number
567:21 - one
567:22 - um I'm gonna create a new file called
567:24 - approach
567:25 - 1.js so this approach number one is
567:28 - we're gonna uh start a history of a
567:34 - star history of actions
567:38 - applied to the star
567:42 - right so
567:44 - okay I think I should do it this way I
567:46 - should import
567:48 - something from approach one so this
567:50 - approach one let's see we're gonna use
567:57 - meeting how should I do this
567:59 - okay someone could use a concept that I
568:02 - introduced previously it's called a
568:04 - higher order star so it's a function
568:06 - that sticks in a store and create a new
568:09 - store so this star hopefully will gives
568:12 - you a
568:15 - um
568:17 - and enhance ability uh to the existing
568:21 - Star right so much like you learn about
568:23 - in JavaScript where you have higher the
568:25 - functions which is a function that
568:26 - returns a new function I'm probably
568:28 - taking a function and return a new
568:30 - function right so how the star sticks in
568:32 - one store so that star itself can be any
568:34 - kind of stars can be a readable can be a
568:36 - twin star can be anything right so we
568:39 - don't care about what is that store
568:42 - under the hood but we just add we're
568:44 - just gonna wrap this door and add two
568:46 - more abilities which is to do an undo
568:48 - and redo right so here we're gonna
568:51 - export this function uh which is our
568:55 - higher order store function I'm going to
568:57 - call it approach one right so it takes
569:00 - in a store and hopefully it returns a
569:03 - new star
569:05 - right so a star is
569:07 - a normal object any object can be a star
569:10 - as long as it follows the spell store
569:12 - contract which is to have the Subscribe
569:15 - function that takes in a function and
569:18 - return an unsubscribe function and the
569:20 - function will be called with the sort
569:22 - value right every time when you change
569:23 - the function should be called to notify
569:26 - all the subscribers that a new value has
569:27 - changed right so you have to follow the
569:30 - store contract which we're gonna
569:31 - Implement implement store contract over
569:35 - here
569:37 - okay so here I'm gonna take it I'm going
569:40 - to import approach one
569:43 - from approach one
569:47 - and here we have our store right so
569:49 - we're just gonna make this star a
569:51 - undo redo Star right so we're going to
569:53 - create uh we're gonna say undo redo
569:58 - redo star
570:00 - it's gonna be approach one wrap around
570:03 - with our existing store
570:05 - and hopefully this function will return
570:08 - to us a new store with with the same
570:10 - store ability but with two more
570:12 - functions which is to do undo and redo
570:14 - so we're gonna use this undo reduce
570:17 - store instead so everywhere here we're
570:19 - gonna just use undo reader star
570:21 - and in
570:24 - and over here one click
570:27 - for undo and redo we're going to call
570:29 - undo from the under region store and
570:32 - redo
570:34 - right so we haven't implement the store
570:37 - contract that's why it says that under
570:39 - review store is not a star with a
570:41 - subscribe method and we're gonna
570:42 - Implement stats right so first thing
570:45 - first we can
570:48 - um
570:49 - we can still use the underlying store
570:52 - subscriber method over here so subscribe
570:54 - can still be the store subscribe
570:58 - okay and Set uh is something that we're
571:01 - gonna overwrite right set
571:04 - value
571:06 - okay
571:07 - and then we have the undo function
571:09 - method and the redo method over here
571:14 - okay
571:16 - so first is we need to have a history
571:18 - restore history of actions that is going
571:21 - to be applied to the store right so I'm
571:23 - going to create this history array
571:28 - um okay so now we are doing a history of
571:31 - actions applied to the store
571:33 - so which means that we right now because
571:37 - of this design we can't do this and do
571:40 - resistor plus equals value anymore right
571:42 - because uh if you just do this we're
571:44 - gonna setting a new value to the store
571:46 - but we didn't tell the store that how we
571:49 - are going to do a reverse action of it
571:52 - right so
571:54 - um
571:57 - of course of course there's a lot of
571:59 - ways to um
572:00 - yeah so we can't really do we want to we
572:05 - can't write this straight away but we're
572:07 - gonna write it in a way where I say
572:10 - um I'm gonna say undo redo store
572:15 - and then
572:17 - um
572:18 - I'm going to call let me think of a
572:23 - okay I'm going to call it do action
572:27 - so I'm going to define a function called
572:29 - do action which
572:32 - uh we're gonna have
572:34 - two methods right as I say it's either
572:37 - you apply the action or you reverse the
572:40 - action right so it's apply
572:44 - or reverse
572:48 - right so apply and reverse so do action
572:52 - so now we we change this to
572:56 - um a method called direction that does
572:58 - that that takes in the object that you
573:02 - would have to apply this this object
573:04 - itself is like an action right which is
573:06 - something that we're gonna store in the
573:07 - history
573:08 - so it has two methods in this object
573:11 - which which is to apply something or
573:14 - reverse something right so say for
573:17 - example here I this should text in like
573:19 - the value of the star of this undo
573:22 - register so apply meaning we wanna here
573:25 - we are adding right so apply is to uh
573:33 - at at Value right we're going to return
573:36 - a new value of the star so we're going
573:37 - to add this value and reverse it is
573:40 - actually going to be subtract from it
573:42 - right so written is value minus
573:45 - this
573:47 - uh this value from from it right so you
573:51 - you apply or reverse so we have to do
573:54 - this kind of pair of course you're
573:56 - saying wow this is uh this this is
574:01 - ugly right this this way is a bit ugly
574:03 - to write this
574:05 - um so this isn't an action object that
574:07 - has two methods right apply reverse and
574:09 - a lot of times if you look at libraries
574:11 - like um or best practices of when you
574:14 - see how people use Redux and Redux like
574:18 - um libraries you'll see that they have a
574:21 - function that creates this object itself
574:23 - right so that function kind of abstracts
574:26 - away a bit of this ugliness and makes it
574:29 - more easy to every time when you want to
574:31 - add value it's not gonna write like this
574:33 - object
574:33 - right so this is an action object and
574:36 - the functions usually is being called an
574:38 - action Creator right a function that
574:41 - creates that action
574:43 - so I'm going to call I'm going to create
574:45 - this function just to show you how that
574:47 - function usually look like so we're
574:49 - going to call x a sum right uh which sum
574:53 - takes in a value so
574:55 - this should create this object right so
574:58 - I'm gonna
574:59 - create this
575:02 - object
575:04 - so this value comes in over here right
575:07 - so so to call this we're going to call
575:09 - do action and sum with the value
575:12 - right uh so hopefully this looks less
575:16 - ugly-ish
575:17 - right
575:20 - um I guess we have problems with
575:22 - okay having a
575:25 - I'm gonna call I think this is a bug
575:27 - from svelt said that does not allow
575:29 - dollar value in an argument right that's
575:33 - just me removed it okay so
575:36 - this function returns a
575:39 - object right so we're going to call this
575:42 - to return us that object so this is the
575:45 - action Creator I'm just gonna add this
575:47 - in the comment action
575:48 - greater you probably see this kind of
575:51 - action creators a lot people think it's
575:53 - a boilerplate kind of age I think but
575:56 - here we want to because we want to have
575:58 - like two kind of two methods where we'll
576:00 - apply changes and reverse changes
576:02 - probably we're gonna
576:04 - have to create this kind of object that
576:06 - we're gonna push it into the history so
576:08 - so this is something that we kind of
576:10 - have to do right history of actions
576:12 - right that's what we're gonna have of
576:14 - course you can't
576:15 - um
576:16 - uh hide this somewhere else right you
576:20 - can have maybe
576:22 - um like storing this part of the
576:26 - definition of the store itself and then
576:29 - maybe over here instead of directions
576:31 - you maybe you call like the sum
576:34 - of value something like this but having
576:37 - like this action is defined in green
576:41 - within the store itself right so the
576:44 - star kind of know that okay it has a
576:47 - function that calls sum that actually
576:49 - does that pushes this object
576:52 - uh this this object this ugly object
576:54 - here into the history right so over here
576:57 - we're going to do something more generic
576:59 - we can say just like do action and push
577:02 - the whole action into the history
577:04 - right so this is about the boundary of
577:07 - where you abstract things out whether
577:09 - you keep more push push more of that
577:11 - detail into the story self or maybe just
577:13 - like expose or have a more generic and
577:15 - expose that option to to the user
577:18 - right so here we are calling do actions
577:22 - so maybe do action meaning we are going
577:24 - to have a do action method instead of
577:27 - value and this is not value anymore this
577:29 - is actually
577:31 - uh
577:33 - action right we're gonna do this action
577:36 - so first thing is we're going to push
577:38 - this
577:39 - action into the history right so we have
577:43 - a list history of actions and of course
577:46 - we want to do this action right so we're
577:47 - going to say action dot
577:49 - um
577:52 - action dots what's that apply
577:56 - action.apply
577:58 - and we're going to apply the store value
578:00 - right so what's the value of the star
578:02 - well we would have to say import and get
578:06 - rom spell store you get the value of the
578:09 - store
578:15 - right and then this will return a new
578:18 - value
578:19 - new store value
578:22 - and this new store value we're gonna set
578:25 - it back to the stock right store dot
578:27 - sets new star value
578:30 - because this is
578:34 - um
578:35 - um a lot of line of codes and maybe
578:37 - slightly unoptimized because every time
578:39 - you get store when you use get it's what
578:42 - it does under the hood is trying to
578:44 - subscribe to the store and grab the
578:46 - value and then I'm subscribe from SQL
578:47 - right so we can work around we can have
578:50 - a much concise way of actually
578:52 - expressing this right which is to call
578:55 - Star dot update
578:58 - the star value
578:59 - okay so this is the value
579:03 - and over here uh we are calling action
579:06 - to apply with that value
579:10 - and we are returning immediately
579:13 - so returning immediately which is to set
579:15 - this written value as a store value
579:17 - right so this replaces these two lines
579:20 - right so we don't even need to get glue
579:23 - the cats over here
579:24 - right so we have history the push and
579:28 - now uh undo is nothing but history.pop
579:33 - to pop up the action
579:37 - okay and we have this so we pop up the
579:42 - action we're going to do is action dot
579:44 - reverse
579:48 - right so we're gonna copy do this like
579:51 - store the update by using installer
579:53 - reverse instead of store.apply
579:55 - so I'm going to copy this
579:59 - okay
580:00 - so let's let's try this out
580:02 - right we have we're gonna ADD stand
580:06 - I'm gonna add 20
580:09 - we have 30 so we have and then let's add
580:12 - 30 to get 60 right so we have we start
580:15 - from 0 10 20 0 10 30 60 right when you
580:19 - click undo we jump to 30 and undo we
580:21 - jump back to 10 and do we jump back to
580:24 - zero okay so um
580:27 - uh a great thing about using the
580:31 - higher other star is that instead of
580:33 - having to just use writable we can have
580:35 - actually
580:37 - twin twin
580:40 - star it's spelled motion
580:44 - whoops
580:47 - Twin Star
580:49 - right so now we can add
580:51 - you can add 20
580:54 - okay at 30
580:56 - and we can still do undo undo and undo
581:00 - right so
581:01 - um it doesn't we don't really care
581:03 - what's the underlying implementation of
581:05 - a star it can be a twin it can be a
581:06 - spring story it can be readable anything
581:08 - you depends on what you want but the the
581:11 - key is we are adding this undo redo
581:14 - ability to your store that allows us to
581:17 - change the value right however if you
581:22 - right now we want to implement this redo
581:24 - we realized that
581:26 - um
581:28 - it's not as straightforward as this it
581:30 - is anymore because we pop out the action
581:32 - right we pop up the action meaning the
581:33 - exchange is no longer in the array so
581:36 - right now if you want to do a redo
581:39 - um
581:40 - we kind of we want to do a redo
581:45 - what other actions do we do right so
581:48 - meaning we can't really when we do undo
581:51 - we can't really pop it out because if we
581:53 - pop it out uh this this action will be
581:55 - dis be used and then discarded after
581:57 - this action this this methods and with
582:00 - no way to redo it unless we maybe
582:02 - collect this undo action right but a
582:06 - much easier way to do this is actually
582:09 - maintaining a index
582:11 - like what is the sorry
582:14 - zero so what as in what is the current
582:16 - index which is what is the current uh
582:19 - history right so it starts with zero and
582:23 - the history itself should actually start
582:24 - with the current value of the Star right
582:27 - so here we're gonna just get the first
582:29 - initial value when we create this new uh
582:32 - approach one undo redo Star right so
582:35 - let's add Bank the get
582:42 - Okay so
582:44 - here we do action what we want is that
582:48 - we want to
582:51 - forward this index and we say history
582:56 - index
583:00 - is equals to the action
583:04 - and we're gonna
583:07 - get
583:08 - the this one
583:10 - history history index dot apply
583:14 - the value
583:16 - right so undo will be actually
583:18 - decrements the index history index
583:24 - and then
583:25 - uh again same thing history history
583:28 - index
583:30 - to refer to that action and then reverse
583:33 - it right and then redo is actually to
583:36 - increments again back again
583:42 - and this time round is to apply it right
583:45 - apply that action
583:50 - uh of course there's one thing you we
583:52 - kind of need to take care of here right
583:54 - so when you do undo a few times and then
583:57 - you do
583:58 - um when you want to make a new changes
584:01 - you actually want to discard the the
584:04 - rest of the undo uh whatever is undo you
584:08 - can't do a redo anymore right you want
584:10 - to remove all the undo actions all right
584:13 - so that is what we need to implement it
584:15 - but before that let's let's just try
584:17 - this out first right so we add 10 we're
584:20 - at 20
584:21 - we had 50
584:23 - right we undo back to 60 undo back to
584:28 - ha
584:31 - so something is from over here let's
584:33 - let's see what's wrong
584:36 - so let's ah okay reverse is not a
584:39 - function so I think we need to check if
584:43 - we
584:44 - greater than zero
584:51 - only we can do undo
584:53 - right so
584:56 - um
584:59 - uh I think this is sure this is not a
585:02 - start we need an action right so sorry
585:04 - no idea why I wrote that line okay so
585:08 - um
585:09 - while we still have it uh we just keep
585:13 - increasingly this one should just start
585:15 - with negative one right so index is zero
585:17 - and then action okay so greater than
585:20 - zero
585:21 - while we still have something on the uh
585:25 - history array we just decrement and then
585:28 - apply that okay so let's set with 10
585:32 - Rich 10 and then it starts with 20 which
585:35 - 30. and then 30 which 60 right undo
585:43 - okay undo should
585:45 - bring us back to 30.
585:48 - and then undo should bring us back to
585:51 - if something is wrong over here right so
585:53 - let's let's take a look at it 10
585:56 - and okay let's I think
586:00 - let me change back to a writable
586:02 - so let's start with 10.
586:05 - and then 20
586:07 - and 30.
586:09 - I undo should be
586:12 - ah okay okay
586:15 - so
586:17 - we should
586:21 - okay I think I got the logic mess up
586:23 - okay so here we are while we still have
586:28 - history right greater than zero right
586:31 - greater or equal to zero we apply the
586:33 - current action
586:36 - right because the current action is the
586:37 - one that is pointing at the history
586:39 - index we could apply the current action
586:41 - as a reverse and then decrements the
586:44 - history index
586:45 - right so
586:47 - yeah so if you are at zero you apply
586:50 - that zero actions reverse methods and
586:52 - then you decrements to negative one and
586:54 - then therefore you can't do an undo
586:56 - anymore right so we have 10
586:58 - 20.
587:00 - 30. undo is 30 and do a stand and do is
587:04 - zero okay that's right correct so if we
587:07 - do redo
587:09 - again we should
587:11 - apply the current let's see
587:16 - no no so redo is because undo will move
587:20 - the index back right so redo is we will
587:22 - move forward and apply that action so
587:25 - we're gonna say uh yeah move forward and
587:28 - apply that action but we have to make
587:31 - sure that if history in next is less
587:34 - than uh
587:36 - history dot length minus one
587:39 - right so because the last index that you
587:41 - can get is history length by the minus
587:43 - one right so if uh you the most you can
587:45 - increment is to that place right so if
587:47 - you're less than that you still can
587:48 - increment
587:54 - okay so at 10
587:56 - 20
587:58 - 30. right undo is 30 undo stand reduce
588:02 - 30 redo is 60 and then you can do and do
588:05 - a read yeah you can redo animal unless
588:07 - you undo right
588:10 - um so why sit before that before we
588:12 - train out and fix things around is that
588:15 - when we do action we also make sure that
588:19 - uh if we have undo previously we want to
588:22 - remove all this undo history when if we
588:26 - do a new action right so what I mean is
588:29 - that say we redo is 60 right so you undo
588:33 - 30 but right now if you add say 40
588:36 - we should not allow any more reduce
588:39 - right we should all the reduce should be
588:42 - nullified
588:43 - right so in this case what we're going
588:45 - to do is uh once we increment a plan
588:48 - action uh we should also add another
588:51 - check which is uh to remove everything
588:54 - all the history index above
588:58 - all the history Beyond history Index
589:01 - right we remove all the past histories
589:04 - right we of course we can overwrite this
589:05 - but then whatever is beyond that it's
589:08 - going to be nullified
589:09 - and thus we don't allow any reduce
589:12 - anymore right so see for example I do
589:15 - add 10
589:16 - 20
589:17 - 30 I will do undo and then we apply say
589:21 - 20
589:23 - right so now if you do redo it jumps to
589:25 - 60 which doesn't really make sense right
589:28 - because 60 was like the
589:37 - then we should be a redo again so here
589:40 - we're gonna uh remove them right so
589:43 - we're gonna do for Loop uh a very simple
589:45 - follow-up to go through everything and
589:47 - remove everything
589:49 - um I think I'm just gonna use a
589:52 - instead of for Loop I'm going to use a
589:54 - while loop to say while uh okay I'm
589:57 - gonna say let's I equals to history
590:00 - in next start
590:02 - um
590:04 - index plus one right we're going to
590:06 - remove everything
590:10 - okay I don't know so while
590:12 - um say history index
590:15 - is less than the history Dot
590:20 - link
590:24 - minus one
590:27 - right so this means is that once this
590:30 - line it says that um
590:33 - history index should be the history
590:35 - length minus one right if you are less
590:37 - than that meaning we have still a lot of
590:39 - histories in the history array we should
590:42 - remove them the way of removing is going
590:44 - to say history.pop it's gonna pop out
590:47 - from the end of the array
590:49 - right so while history length minus one
590:55 - yep correct so let's try that out so
590:58 - we're at 10
591:00 - 20.
591:02 - right 30
591:04 - could you undo twice back to 10 I'm
591:06 - going to add 50
591:08 - and now I can't do redo
591:12 - oh wait you can't tell the difference
591:13 - okay hold on let's let's uh say let's
591:16 - let's restart everything again so can I
591:18 - say start with 10
591:20 - uh 10 again and 10 again so we have 10
591:24 - 20 30 undo undo and then now we're gonna
591:27 - add 80.
591:30 - right so if if this works I should not
591:33 - redo back to 30 right so yeah if I click
591:36 - redo nothing happened but undo will
591:39 - bring us back to 10 and we do bring us
591:41 - back to 90. right so here we have our
591:43 - first approach brush number one which is
591:46 - to start a history of actions an action
591:49 - is um this is nothing but an object
591:52 - right it's nothing but an object that
591:54 - has apply method as well as a reverse
591:58 - method right so we have this kind of
592:01 - object with apply and reverse we store
592:04 - them in an array of history as a history
592:06 - so every time when you want to undo it's
592:08 - going to be calling the reverse method
592:10 - and you want to make changes you're
592:12 - going to call the apply method right so
592:15 - undo is reverse reverse and then redo is
592:18 - apply apply apply again right so you
592:20 - start this history of actions and there
592:23 - you go there you have a history under
592:25 - redo kind of star right and we say that
592:28 - creating this object this actions is is
592:32 - uh it's a lot of boilerplate then maybe
592:35 - instead of like having to create this
592:37 - object every time maybe you create a
592:39 - function that's called an action creator
592:41 - that creates that action for you and
592:43 - maybe this makes the code more slightly
592:47 - concise and easy to understand and you
592:50 - could Define this action right with
592:53 - inside this store itself like say maybe
592:56 - have like uh maybe like adding this
592:59 - whole thing like sum in here foreign
593:06 - which is to do like this dot do action
593:10 - to
593:12 - to do this action itself right you can
593:15 - have this built into the store then
593:18 - you'll be able to just like like calling
593:21 - the
593:23 - sum itself instead of having to call
593:25 - like the do action right you you can do
593:29 - that
593:29 - uh you can you can do that uh it's it's
593:32 - up to you on how you designed your store
593:36 - like how you abstract out the
593:38 - functionalities of your store
593:40 - right so yeah we've we've seen how we
593:43 - can do the approach one which to have a
593:45 - history of actions let's explore
593:48 - approach number two which is how we're
593:50 - gonna have a history of
593:52 - star values
593:55 - so if you like
593:56 - how I approach the approach number one
593:58 - so far uh don't forget to smash the like
594:02 - button because that is very important as
594:04 - I said it's important to you as well as
594:07 - the me so that we all know YouTube knows
594:10 - that this is a good video and you will
594:12 - try to
594:13 - um
594:14 - promote all to more users so that they
594:18 - all all of you will enjoy and learn more
594:20 - together and grow together right so
594:23 - let's take a look at approach number two
594:25 - approach
594:27 - 2.js
594:29 - same thing uh I'm gonna create a higher
594:32 - order store
594:33 - so I'm going to copy some of the things
594:35 - over here of course maybe we don't need
594:37 - this
594:39 - all right approach number two
594:41 - it's a star history of star value
594:45 - snapshots
594:46 - right so the way of implementing this
594:49 - would be uh every time when you set a
594:51 - new value we are going to a
594:56 - so a new value into the history and
594:58 - every time we do undo is to
595:00 - reset uh set the store within with the
595:04 - previous history value or on whatever is
595:07 - the value inside that you store in the
595:09 - history stack all right so here first is
595:12 - we're gonna again create this uh I'm
595:15 - gonna have the similar concept over here
595:18 - history history index
595:20 - um here we're going to store a snapshots
595:22 - of the store right so we're gonna I
595:24 - think the first item you can have in the
595:27 - store is the value of the star the
595:29 - current value of a star so history Index
595:31 - right now is is zero
595:33 - okay uh next thing is
595:37 - gonna have same thing this is gonna be a
595:39 - star
595:41 - and copy some of some of the things that
595:43 - we've done over here
595:45 - uh subscribe okay and do uh maybe we
595:49 - don't need uh this is to be determined
595:53 - right but the idea of History index is
595:56 - still valid
595:57 - uh redo this is too still to be
596:00 - determined by the idea of not going over
596:03 - the array is still valid
596:05 - right so we have our new start approach
596:08 - number two
596:11 - um I think I should just copy this whole
596:13 - code over here and say app
596:16 - one right so if you want to play with
596:19 - this Ripple you can look at the link in
596:22 - the description right so I'm not going
596:24 - to remove like modify this code this is
596:26 - app one for approach number one
596:29 - okay so right now we're gonna import
596:31 - approach number two
596:34 - create a new approach number two undo
596:36 - redo star
596:37 - and this time round we don't need uh we
596:42 - can't do this directly because we're
596:47 - gonna just set the value right we what
596:49 - doing this is to call undo reduce store
596:52 - with a DOT sets method to set a new
596:54 - value to the under redo star so the
596:56 - magic itself will lies within the sets
596:58 - function right so here we have a set so
597:02 - let's write set
597:05 - okay set will be called with a value
597:09 - okay this will be the new value
597:12 - right so we want to store a history of
597:15 - values right so here first thing is we
597:19 - say history
597:21 - index increments when I say history of
597:25 - History
597:27 - index would be the new value
597:32 - and now we want to set this value to our
597:36 - store as well so that's whoever is
597:38 - subscribing to the store this so This
597:41 - return store is still using the same
597:42 - store subscribe right so the subscribed
597:45 - subscriber of this doll will get the new
597:48 - value out of it so we're gonna say star
597:50 - dot sets uh new value
597:54 - okay so this is actually the same of
597:56 - writing this let me just do it like this
597:58 - for now because later on you will
598:00 - realize that we are making a lot of this
598:02 - and we hope uh we're gonna do this all
598:05 - over and over and maybe we can make this
598:07 - into a function right abstract this out
598:09 - right so
598:10 - um
598:11 - for undo
598:13 - undo will be take a step back and sets
598:17 - the store to the previous value right so
598:19 - here we're going to say his story again
598:21 - history minus minus is correct
598:24 - um but we're gonna do it while history
598:26 - index is greater than zero because we're
598:28 - gonna
598:29 - take the value from history after we
598:31 - decrement right and we're gonna copy
598:34 - this because we're going to set it
598:35 - backed
598:36 - and over here
598:40 - redo will be playing the history next
598:42 - right so uh while history index is less
598:45 - than length minus one we incremented
598:48 - correct and then we're gonna set the
598:51 - value of the Star right so you realize
598:53 - that we're going to do this over and
598:55 - over maybe maybe we can't make it a
598:58 - function we're going to say update star
599:04 - uh I'm gonna paste this in and I'm gonna
599:08 - replace it over here like this
599:11 - right
599:13 - place it like this
599:17 - okay so we have all this and of course
599:21 - one last thing that we did for the
599:24 - previous approach is that when we
599:27 - increment and we update the value we
599:29 - also need to remember to clean up all
599:32 - these three right so what we did over
599:34 - there was to say while it's less than
599:37 - that we're going to pop the history all
599:39 - right so we're going to do that as well
599:40 - and let's try this out okay so
599:45 - let me say 10 right if not 10. we have
599:49 - another 10 okay
599:52 - now we undo we're going to jump back to
599:56 - 20 and do back to 10 and redo 20 reduce
599:59 - the 30 right undo undo and we add 80
600:04 - and now we can't redo anymore but we can
600:06 - still undo undo or redo redo right so
600:09 - there you go have a history of
600:12 - values like the snapshots of the values
600:15 - of the store
600:16 - ah so before we end this there's a cache
600:20 - on this approach
600:22 - oh there's a cache on both approaches
600:24 - depending on how you design the the
600:26 - action of approach number one
600:28 - which is that what if we want to
600:34 - um
600:35 - star instead of storing numbers
600:38 - primitive values like numbers or strings
600:40 - we want to have a store in the stores an
600:44 - objects right what if we want to store
600:46 - an object why does that matter well
600:48 - because object itself is mutable right
600:51 - you can mutate object right then
600:53 - oftentimes we are so used to in spelled
600:56 - we assigned a value to the property of
600:58 - the object right to the store right that
601:01 - actually mutates up Star right so let me
601:05 - so so if you are storing a snapshots uh
601:09 - yeah I think that will mainly affect
601:12 - approach number two which is if you
601:13 - store snapshots of the store and you're
601:15 - storing a reference to the store itself
601:18 - right and if you mutate that up star
601:21 - object the value the star value objects
601:23 - every time when you changing it starting
601:27 - a reference ejectories storing the same
601:29 - reference over and over and over again
601:32 - and in the end you are not uh when you
601:35 - want to try to redo it or undo it you
601:38 - realize that
601:40 - there's no effect because you are still
601:42 - storing a steam object reference right
601:44 - because all along when you make changes
601:46 - you are actually mutating the object
601:48 - right so to demonstrate this let me show
601:51 - you what I meant right let me change a
601:53 - bit on the code itself right just make a
601:56 - very simple change let's just say
601:58 - writable is a value it's an object with
602:01 - a value
602:02 - property value zero right so here we
602:07 - I'm going to have two uh
602:11 - two ways of displaying the value so
602:13 - first is we're gonna sleep stringify the
602:16 - undo redo star so this shows us what is
602:20 - in the store itself right now and here
602:23 - we are uh getting the value itself right
602:28 - so
602:29 - okay so now we have the star value right
602:32 - so every time we increments we are we
602:35 - need to
602:36 - plus one of the value
602:38 - right so technically this is the changes
602:40 - that we just need to do right uh because
602:44 - this will still this line itself will
602:46 - still call the sets method of the undo
602:48 - reducer to set the new value of the star
602:51 - because in this case the star itself is
602:54 - the value of the stars is not change
602:57 - uh the reference itself is not changed
603:00 - the value in inside it has changed right
603:03 - the value the store value dot value has
603:07 - has is
603:09 - updated right so uh let's see right so
603:13 - when we add this is this has changed
603:15 - we're at 10 you see that it comes 11
603:18 - we're at 20 it turns it to 31. and if
603:22 - you when you want to undo it you realize
603:24 - that it's not possible
603:27 - it's not possible at all
603:32 - so what is happening right as I
603:36 - explained this is because everything
603:38 - within the history is still
603:40 - um record is still
603:44 - everything within the history is
603:45 - referencing the same object to just show
603:49 - you one more step that this is itself is
603:52 - true I'm gonna create I'm gonna expose
603:55 - the history out I'm gonna say this is a
603:58 - writable Pro okay import writable from
604:01 - spell star
604:03 - right and so I'm going to make history a
604:06 - writable store as well
604:07 - uh I'm just going to create a new
604:09 - history right
604:11 - the ball
604:17 - okay sorry history star
604:20 - and I'm gonna have uh
604:23 - uh property called history that returns
604:25 - history store
604:27 - and everywhere we will change the
604:30 - history which is over here only over
604:33 - here I'm gonna set
604:35 - uh which is called histories start or
604:39 - set
604:40 - history
604:42 - okay
604:43 - so here we have it and here right now
604:45 - we're gonna just have somewhere to show
604:49 - you the value of the star
604:51 - gee fine
604:55 - uh okay so this is the
604:58 - history
605:00 - but history
605:03 - and this is a star so we're gonna say
605:05 - star
605:07 - okay I'm gonna add a new line
605:11 - so this is the history I'm gonna add 10
605:16 - whereas that I'm pushing a new value to
605:19 - the history but then because both of
605:21 - them are referencing the same store the
605:25 - steam object both of them the value is
605:28 - updated right if I do this you realize
605:31 - that
605:32 - uh we are update we are pushing another
605:34 - same reference into history so undoing
605:37 - itself does not have any changes it does
605:40 - not have any effect at all
605:42 - right so uh
605:44 - yeah
605:45 - so what should we do
605:48 - so one way is I say we're gonna save the
605:51 - snapshot so snapshots of the objects
605:55 - inside the history array right so
605:58 - um getting a snapshot itself can be as
606:02 - can be a very simple straightforward way
606:06 - of doing it would be using the Json
606:09 - stringify or Json parts a combination of
606:12 - both right so if we turn the whole star
606:15 - value into a string and then convert it
606:18 - back to an object what you get is a new
606:21 - object of whatever the the store value
606:24 - is right this is a new object so we
606:26 - store that new object into the history
606:29 - so every time when you make changes it
606:31 - will not affect uh
606:34 - huh
606:35 - it will not
606:38 - affect the sorry
606:40 - you're not affect the reference within
606:42 - in the array right so
606:45 - I'm gonna so what we're gonna do here is
606:47 - we're gonna say json.35
606:50 - uh
606:53 - okay I'm gonna create a new function
606:55 - instead
606:56 - so sometimes this has been called as as
606:59 - like clone cloning the object right a
607:02 - very uh a fastest way of cloning the
607:06 - whole object out right which is to
607:07 - convert it to a string
607:09 - and return it and then pass it again to
607:14 - return back the object itself of course
607:17 - this is this has his drawback for
607:21 - example this has uh this
607:25 - uh there's a cache on this clone
607:27 - function which is it only works with
607:29 - object that has no cyclical reference
607:31 - because if you have a cyclical reference
607:33 - a string G5 will not work it will break
607:35 - and also it works if the object itself
607:38 - just a plain Json object because if you
607:42 - stringify you can't specify functions
607:43 - all of them functions now undefined
607:46 - things like that will be gone right so
607:48 - you have your own drawback over here
607:51 - and then lastly of course about
607:53 - performance whether it's it's puff it's
607:56 - it's performed the performance is good
608:00 - if you just like if you have a very huge
608:02 - complex star you want to stringify it
608:04 - and pass it again the stick uh is the
608:07 - performance okay well it's it's it
608:10 - depends it it's Dependable right so I'm
608:14 - going to just show you like a simple
608:16 - straightforward way of doing a cloning
608:18 - first and then I can and then later on
608:21 - I'll suggest some alternative of
608:23 - um using the idea of immutability to
608:26 - reduce this cost of course immutability
608:29 - itself introduce some sort of cost but
608:32 - then if you have a more far more complex
608:34 - big object that you want to get a
608:37 - snapshot that you want to not mutate it
608:40 - then you immutability will come in handy
608:43 - in that case right so firstly we just do
608:45 - a simple cloning because our object
608:48 - itself is so simple right it's a value
608:49 - right uh that you only have one property
608:51 - called value and it's number right so
608:53 - here I'm just going to call clone
608:56 - the value of the star
608:58 - and every time I push something into
609:00 - this history I'm going to clone it as
609:03 - well
609:06 - right shouldn't you find it's not a
609:09 - function oh sorry my spelling string
609:13 - G5
609:15 - okay
609:17 - let's clear this okay so let's try this
609:20 - out so now I
609:24 - add a number right you see here this is
609:28 - not
609:29 - mutated right because we we actually
609:32 - clone a new copy and store it into the
609:34 - array and if we make changes again
609:38 - hold on hold on hold on
609:42 - ah okay I think this is
610:00 - okay so we we clone it and stored in the
610:03 - history but then when we call up this
610:04 - story we are actually setting the the
610:06 - Clone version
610:08 - right
610:11 - which is not what I uh and then if you
610:14 - mutate that clone of the the Clone
610:16 - version of it you are still changing it
610:20 - mutating it right so uh I think over
610:22 - here
610:24 - um let's see it's starting free
610:34 - okay so I think over here update star
611:03 - okay so the update star actually okay
611:06 - shouldn't we don't have to
611:08 - um
611:12 - you have to start a clone version in
611:14 - history in this case right so of course
611:17 - the first time we we started
611:19 - clone so we are
611:23 - not changing the first history right but
611:27 - then after that we are going to every
611:30 - time when we sell something we are not
611:32 - storing a clone we just start the change
611:33 - version but because we calling this the
611:37 - Clone right so this is just not taking
611:40 - care of the place where we just call set
611:42 - also taking care of the place where you
611:44 - do undo and redo right so every time I
611:46 - undo redo we are pointing back to the
611:48 - previous snapshots but then we are
611:50 - giving a new clone to the store the
611:53 - underlying store so that you whenever
611:56 - you change
611:57 - from the history again we're not
611:59 - changing whatever it started in the
612:01 - history you are changing from the clone
612:03 - of the history
612:05 - right so let's let's try that out again
612:07 - so let's say that's that 10.
612:10 - at 20 right and let's add 30. so we have
612:15 - history of six or four four items in the
612:19 - history and to undo
612:21 - we're going back to 30 undo back to 10
612:24 - and we can even redo undo and we can
612:27 - even like change the value at 20 or
612:30 - sorry actually at 20. undo and then add
612:34 - 80
612:36 - right so this uh
612:40 - this does not change the current the
612:42 - state that I was changing right it does
612:44 - not change this value 10 like just now
612:46 - but it's created new it's actually
612:48 - modifying a new clone and then updates
612:51 - and then push that new value into the
612:54 - history right so
612:56 - um cloning it cloning object allows us
613:00 - to create new snapshots objects that
613:01 - because object is mutable and you can't
613:04 - if you change the object if you want to
613:06 - store it snapshots of objects within the
613:09 - history and then make sure that each of
613:11 - them are a different reference so that
613:13 - you don't mutate the the snapshots that
613:17 - you are storing in the history
613:21 - so finally with as I said about cloning
613:26 - I I mentioned about the drawback uh in
613:30 - terms of performance things like uh
613:34 - so and I suggested that we are going to
613:37 - talk about immutability right because
613:39 - immutability itself will allows us to
613:42 - immutably change the object
613:46 - uh meaning you when you make changes you
613:49 - actually create a new reference of the
613:51 - object you are creating a new object and
613:53 - then we're going to store that object
613:54 - into the store instead right so in that
613:57 - case we don't have to do clothing right
613:59 - every time when you make changes you
614:00 - actually create a new reference of the
614:02 - object and you just started a reference
614:04 - into the store right so even and so so
614:07 - you don't need to do a cloning right so
614:09 - the immutability parts of the algorithm
614:13 - of the library whatever you are using
614:15 - will help solve that problem
614:17 - right so a very simple way of doing the
614:20 - immutability is to
614:23 - instead of assigning a value directly
614:25 - we're going to say
614:28 - we're going to spread it out right so
614:29 - we're going to create a new object
614:31 - reference
614:33 - and then value equals to the new value
614:38 - right uh actually the new value will be
614:41 - that this the Value Plus value
614:46 - right
614:52 - so this will create a new store a new
614:56 - object reference I'm going to store in
614:57 - the store and that way you don't have to
615:01 - you don't need a clone function anymore
615:02 - you don't need
615:04 - uh
615:06 - clone yeah at all and we try to run this
615:11 - right that 10
615:13 - at 20 they are all different it will
615:16 - always create a new object before you're
615:18 - calling a set to the store right so here
615:21 - you will allows you to uh
615:26 - um having a snap array of snapshots
615:28 - without mute changing mutably changing
615:31 - the star value of the in the history
615:35 - of course you may ask me like okay how
615:37 - about using libraries like images and
615:39 - things like that where because uh
615:42 - writing this
615:44 - sounds easy if you have a very simple
615:47 - object but it may get Harry if the
615:50 - object itself is humongous right if you
615:53 - have like a very nested object itself
615:55 - then you have to keep doing this and
615:57 - then maybe like a fool and then you have
615:59 - to spread uh
616:02 - undo redo star.full and then you because
616:06 - you want to add a new value to full and
616:08 - then you fool the bar you will and then
616:10 - you have to spread it again and things
616:12 - like that and in the end it just makes
616:14 - the whole thing very messy and you will
616:18 - just like to use emergency because that
616:20 - allows you to assign uh make changes
616:23 - more is more intuitively to just make
616:26 - changes because image.js will create
616:27 - give you uh the library itself will give
616:30 - you like a draft state where you can
616:31 - make changes to draft
616:33 - States directly and then you can commit
616:36 - that and then apply and return a new
616:38 - object reference right so we shall take
616:41 - a quick look at how you would pair this
616:43 - with say image.js
616:46 - so uh first thing is I'm going to import
616:49 - produce
616:52 - from email
616:54 - right and actually I've created a video
616:56 - about how you can use images with stars
616:59 - and yeah you should watch that video if
617:02 - you're interested like that will be a
617:04 - full
617:04 - length video about talking about images
617:06 - and spell sore right how to make
617:09 - image.js
617:11 - into a spell store right but over here
617:14 - we're gonna do a much lighter version of
617:16 - it right so uh you have a function
617:19 - called produce an image yes which uh
617:23 - if you come over here how it works is
617:26 - that you can call it produce with this
617:28 - with an object
617:30 - and it will give you a draft right a
617:34 - draft the draft itself is actually the
617:37 - the value itself but but the
617:41 - implementation of it is like it's like a
617:43 - proxy to the actual object right so this
617:45 - object right the solve value is an
617:47 - object and draft is a proxy to that
617:49 - object so changes make to it mix to it
617:52 - will be applied to it later on uh and it
617:55 - will apply it in a way that it's done
617:57 - immutably without changing the reference
617:59 - of this right and so you return a new
618:01 - reference new object reference in this
618:04 - and you can assign it to the start right
618:06 - so here every time when you make changes
618:08 - you'll just create a new star reference
618:11 - right so draft over here we're gonna
618:13 - because the drop is the object itself
618:15 - we're going to just say drop.value x
618:18 - equals to Value right that is what it
618:20 - writes
618:22 - I mean uh
618:24 - make it nicer
618:27 - okay
618:28 - right so this way is much nicer and
618:31 - simpler to write right I I thought I
618:34 - believe that you will agree with that so
618:36 - let's try this try this out right let's
618:38 - add 10 okay our process is not defined
618:41 - so
618:43 - because of how emergencys library is
618:45 - implemented I believe it's it's
618:47 - using like the process right so uh
618:51 - process variable and it will be handled
618:53 - by your bundlers but let's just Define
618:57 - this first and then so that's so quickly
619:00 - Define this would be uh going to the
619:09 - sorry iframe that we are running this
619:11 - and just Define this window.process
619:14 - equals to f
619:18 - uh which is an object I believe node f
619:21 - is should be maybe I'm just gonna say
619:23 - production
619:27 - and this just need to do once
619:31 - uh processes oh sorry hold on
619:34 - uh
619:35 - uh I'm not
619:38 - I okay that's that's just not play
619:42 - around with that let's just Define
619:43 - ourselves in pots
619:46 - patch
619:50 - I'll call this patch
619:53 - we know the process equals to f
620:00 - node f equals to production
620:04 - okay uh yep I believe we fixed it and
620:09 - let's try it
620:11 - okay find a full error okay there's some
620:15 - errors while using with the
620:18 - draft I believe uh
620:25 - let's see let's let's try again
620:29 - okay it works okay I I believe we
620:32 - shouldn't return any value from that so
620:33 - just make it a void
620:36 - uh so here you see we
620:38 - we just make it this way and now it's
620:40 - very simple we just add something always
620:43 - give us a new reference but from this
620:47 - produce function now we can undo make
620:49 - changes
620:51 - and we do and do redo things like that
620:54 - and it just works right so
620:57 - um
620:57 - if you want to start a history of
621:01 - objects of snapshots of the store values
621:05 - then uh if you're it's a store value
621:08 - itself is primitive then it's simple for
621:10 - you because you always store the
621:12 - Primitive value but if your star
621:15 - value itself is an object then having so
621:20 - you then you would have to either one
621:23 - clone it so that clone to always clone a
621:27 - snapshots to store in a history or two
621:30 - uh make changes immutably right don't
621:33 - mutate the object itself so you can do
621:35 - it yourself by using spread or use
621:37 - libraries like images to help you to do
621:40 - that
621:41 - right so that's all from my video
621:43 - hopefully this uh long winded video
621:46 - helps you and makes you to learn
621:49 - understand more about star itself in
621:51 - general as well as like Concepts like
621:53 - Hydro stars
621:55 - um and undo redo kind of uh operations
621:59 - and hopefully uh you learn a lot from
622:02 - this video
622:05 - today I'm going to share with you about
622:07 - context in particular how to make
622:09 - contacts reactive using Stars
622:14 - so let's start I've set up something
622:17 - over here I have three components app
622:20 - ciao and grandchildren so app Imports
622:24 - child and when there's a child child
622:26 - Imports and uses a grandchildren and
622:28 - grandchildren over here as you can see
622:31 - all right so I want to use context to
622:34 - share data from app to grandchildren by
622:37 - passing ciao in real life you probably
622:39 - have a very nested deep uh component
622:43 - structure where you have multiple layers
622:45 - of component and then and but then you
622:49 - want to share data across
622:52 - uh across like the parent the
622:54 - grandparents and the grandchildren
622:56 - component
622:58 - um if you want
622:59 - if you want your data to be irrelevant
623:01 - of your component structure you can use
623:03 - an external star but in this case we
623:06 - want only all the grandchildren of this
623:09 - grandparent component to have to share
623:11 - the same data that's why we go for
623:14 - context
623:15 - so the way of using context over here is
623:18 - you come over to app.silts and you use
623:21 - set context from svelte
623:24 - so it's a key and then value so you pass
623:27 - in a key for this context and then the
623:30 - value of
623:32 - of the context value
623:34 - so in this case I'm setting the context
623:36 - name value and the value the value of
623:39 - that context variable the context data
623:42 - is called count
623:43 - so initially I have counts equals zero
623:45 - so I'm accepting a context of value of
623:49 - value 0.
623:50 - and in the grandchildren to receive it I
623:54 - use get context and pass in the same key
623:57 - in this case the value and I get the
623:59 - count over here
624:00 - so now I have two variables
624:03 - um so to make to show that it works I
624:06 - can initialize counts to 100 and now my
624:09 - grandchildren when I received it the
624:11 - count is value 100.
624:14 - I'm sharing the count over here and I
624:16 - have buttons to increment and decrement
624:17 - the count
624:19 - and same thing goes with the app.s felt
624:23 - but context is actually linked up during
624:28 - the component initialization meaning
624:30 - when the component grandchildren is
624:32 - mounted initialized the link from the
624:36 - app and the grandchildren is being
624:38 - linked up and that is when you get the
624:41 - context
624:42 - so get context will get the initial
624:45 - value of the account which is 100 and
624:48 - that and that is being linked up during
624:50 - initialization so the value of the count
624:53 - is that variable but then
624:56 - um discount is a number number itself is
625:00 - not
625:00 - um say mute is you can't mutate a number
625:03 - you get the value by value rather than
625:06 - by reference so now we didn't
625:08 - grandchildren if you're trying to
625:09 - increment discounts you only uh it only
625:12 - change within this grandchildren
625:15 - component
625:16 - same thing goes from app.felt since this
625:19 - set context will be only called and
625:21 - linked up at the initialization now when
625:24 - you try to increment and decrement it
625:26 - don't really change the context value in
625:28 - the grandchildren
625:30 - so two bands there are linked up at the
625:33 - start but then it lost synced out of
625:37 - sync so how do you make sure that it's
625:39 - reactive in a sense where when you
625:42 - change the value over here the context
625:45 - the value of this so-called context is
625:48 - always get updated like all the
625:50 - grandchildren get updates when this
625:52 - where when the counts value in the
625:55 - grandparent has changed
625:57 - well that's right you can use store
626:01 - so here instead of
626:04 - just defining the variable as a number
626:07 - 100 and can import
626:10 - writable
626:12 - from svelt Star
626:16 - and make my account a writable star
626:20 - so now I can um I'm still pass in the
626:23 - store over the context but to show the
626:25 - value I'm going to reference it using
626:27 - the dollar prefix variable syntax now I
626:31 - am seeing this count over here
626:33 - and now since I'm getting a star to read
626:36 - the value of the star I use dollar
626:38 - prefix
626:41 - and now uh although it's being linked up
626:44 - at the initial initialization of both
626:46 - components but because it's a star and
626:49 - it changes to the star uh all both app
626:52 - and grandchildren is subscribing to it
626:54 - so both of them will know that whenever
626:56 - this store has changed the parent in the
626:59 - app will incremented it's it's being
627:02 - notified on the grandchildren because
627:03 - they're subscribing the store and that's
627:05 - why the value of the star is being
627:07 - update uh being showed over here the
627:09 - latest value of it is being shown right
627:12 - same thing goes with the grandchildren
627:13 - when you click over here it's being
627:15 - updated right on the start
627:17 - so summary uh context is being set up
627:20 - during initialization
627:22 - and therefore value if you change the
627:24 - value is not being the updated value
627:27 - will not be reflected at the
627:28 - grandchildren to make it reactive in a
627:31 - sense where whenever you change the the
627:34 - variable in the context in the
627:36 - grandparent if you change the value and
627:39 - you want it to be reflected to all your
627:41 - grandchildren then you should use a
627:43 - store in States you can pass the star
627:46 - um over the context just like passing
627:48 - any variables and hopefully your
627:51 - grandchildren will subscribes to it and
627:53 - get notified whenever you change it in a
627:55 - grandparent
627:59 - I'm going to share with you tips and
628:01 - tricks to manage stores complex stores
628:05 - in your spell application
628:07 - I believe a lot of you love to learn
628:10 - about this in fact the prepared content
628:13 - the material of this video is it's been
628:16 - very difficult not all problems can be
628:19 - solved with one solution right different
628:22 - applications different styles different
628:24 - Logics
628:26 - requires different
628:27 - ways or methods to optimize them
628:32 - um so I try to look around in the front
628:36 - end wall try to gain get some
628:38 - Inspirations from different libraries or
628:41 - different Frameworks out there and try
628:43 - to summarize a few points
628:45 - I would say tips that you can use in
628:49 - your application
628:50 - of course you don't have you you
628:52 - shouldn't apply all this
628:54 - methods blindly to your application
628:58 - optimization is a science you need to
629:01 - First measure before you do anything
629:04 - right you need to know whether there's a
629:06 - problem to be fixed in the first place
629:09 - so over here I have prepared an example
629:11 - and hopefully that is real life enough
629:15 - and under in this example I have two
629:19 - main issues that we are going to solve
629:20 - so let's dive in and take a look at the
629:23 - example that I prepared for you
629:25 - so over here I have
629:28 - an app that is like a to-do list
629:32 - so you can come in and type to do you
629:36 - type a checklist say uh record a video
629:40 - you can click add you can add more uh
629:45 - edit my video
629:48 - and let's say uh publish to YouTube
629:54 - and oh what okay so something must be
629:58 - wrong in the logic over here
630:01 - um which we will take a look at what it
630:03 - is but at the same time take a look at
630:06 - here there's a nav bar and this is like
630:09 - a notification that shows you what has
630:12 - happened so far
630:13 - and we have my username so when I click
630:17 - I can change my username over here so
630:20 - the house
630:22 - it's the best
630:24 - oh no the worst
630:26 - okay I have fun uh so let's take a look
630:30 - at in terms of code how how what how
630:33 - this works so here I have a nav bar
630:37 - in the nav bar I have a notification
630:40 - components that shows the notification
630:43 - and then I have my username and then I
630:46 - have my profile so this edit profile is
630:51 - a a buttons that will pop up and then
630:55 - you make changes so anytime when you
630:58 - make changes you see over here I uh edit
631:02 - the notification so all the changes for
631:04 - example edit profile or add to do I will
631:08 - insert a new entry to the notifications
631:10 - right so that the notifications you can
631:13 - see that there's a new events coming up
631:16 - right so all of this
631:20 - the data itself comes from this file
631:23 - called Data so everything in this
631:25 - application is controlled from one store
631:29 - one writable store which is in which is
631:32 - created using a writable so I have a
631:34 - list of to-do's notifications users so
631:38 - users information
631:40 - right so that's roughly about the
631:43 - application itself
631:45 - so at to do it's it's a form that you
631:48 - can add to do and there's a to-do list
631:50 - that shows a list of to-do's
631:55 - okay so if you want to follow along
631:59 - um I am going to share the link of this
632:02 - Ripple will be in the description so
632:05 - that you can follow along with with me
632:08 - right so the problem that we face just
632:11 - now right when I type something
632:14 - and type something again
632:17 - uh okay this time now it's it's it seems
632:21 - like it's
632:22 - there's nothing wrong but somehow in the
632:25 - first time when I create some to-do's
632:27 - it's like gone immediately
632:30 - so
632:33 - um this is a problem with having a
632:37 - writable stars like this you have a
632:39 - writable starts with a to-do and
632:42 - basically you allow people to change the
632:45 - to-do's anywhere right anyone who
632:47 - Imports this will be able to change it
632:50 - we change it uh over here in the to-do
632:52 - list where we feel where we come over
632:56 - here and we
632:58 - you know Mark some to do to be done over
633:01 - here on the other side an attitude we
633:03 - push into the list
633:06 - um so it's part
633:08 - so anyone who Imports this file can
633:10 - change the to-do's so we kind of have no
633:18 - um no way to enforce like what can be
633:21 - done by to-do's right so
633:24 - just previously we add a few to-do's and
633:26 - suddenly the to-do's is gone uh it's it
633:29 - shouldn't be something that is being
633:32 - allowed so let's try to find out the bug
633:35 - over here let's
633:37 - say okay so whenever we want to change
633:40 - the to-do's probably will assess to data
633:43 - to Do's right so let's let's search for
633:46 - this
633:48 - um there's two okay there's only one
633:52 - place that makes this change access to
633:54 - data the to-do's okay so let's not
633:56 - change in this file let's try to search
633:58 - over here at the profile
634:01 - uh no okay how about navbar
634:05 - okay we we checked if the to-do's length
634:08 - and then oh this will show the to-do
634:11 - slang okay so this is filter this is
634:13 - length okay oh everything looks okay
634:15 - normal how about notifications
634:19 - nothing nothing okay to do this
634:23 - okay you filter the to do
634:26 - um this is showing the count and then we
634:28 - Loop through to those uh this is okay we
634:31 - are removing something splice but this
634:34 - is in a delete button so it's supposed
634:36 - to just slice off one item
634:38 - so I don't think that's about it let's
634:41 - let's see data nothing wrong okay
634:45 - nothing nothing's wrong over here I have
634:48 - those Felts so nothing is wrong at here
634:50 - so but then something is wrong right if
634:54 - you if I try to add again
634:57 - it's all gone something is wrong but I
635:01 - can't find where it is so if your
635:03 - application application is getting
635:05 - bigger and bigger you have code all over
635:07 - the place and you have a writeable that
635:11 - is like this uh that allows you allows
635:14 - you to
635:15 - modify the two Do's within that writable
635:18 - object any way you like
635:20 - um
635:21 - then you have a problem right this is
635:24 - not about whether your right your to
635:26 - Do's is like you can have a writable
635:28 - that is an array
635:30 - as a to-do
635:34 - but if you pass this to-do store
635:36 - anywhere anyone can change it anyone can
635:39 - modify it as they want and it's very
635:42 - hard to track that you it's not just
635:45 - searching for to-do's to-do's can be
635:47 - renamed you can change
635:50 - um assign it to another variable and
635:52 - then do something about it and subscribe
635:54 - to the store and stuff like that you
635:56 - can't really find out where is going
635:59 - wrong
636:01 - so
636:02 - and this is not a new problem
636:06 - when you have a big state this is bound
636:09 - to happen because anyone around
636:13 - every anywhere in your code can change
636:16 - that state
636:18 - in fact a few years ago I think many
636:21 - years ago Facebook has come up with a
636:23 - architecture to handle states which is
636:27 - called the flux architecture
636:29 - and pop you can take a look at this the
636:33 - links will be in the description but
636:35 - basically the idea is this
636:37 - um you are the way that they want to
636:40 - design is that they want to design a
636:43 - single
636:44 - directional flow of the data right so
636:48 - you have your you have a store and then
636:50 - store changes will go to your view that
636:53 - is okay but then anyone can change the
636:56 - star which is not so okay so we want to
636:59 - draw the boundary we want to create one
637:02 - more abstraction which is called the
637:04 - action any time when you want to make
637:07 - changes to a store you should
637:10 - um make an action call an action
637:12 - dispatch an action and then the action
637:14 - itself will modify your star so no one
637:16 - can modify a star except uh actions
637:19 - right and I believe
637:22 - if you are very familiar with a react
637:25 - well this sounds very familiar with you
637:27 - this is actually one of a very famous
637:30 - implementation of this flux architecture
637:32 - is the Redux library right every time
637:35 - when you want to make changes to the
637:37 - store you have to make you have to call
637:39 - you have to dispatch an action and the
637:41 - action will change the value of the star
637:43 - and
637:45 - the changes is being made in one uh one
637:49 - unit of code which is in Redux is called
637:51 - reducer but it does not have to be a
637:53 - reducer but the logic is there anyone uh
637:57 - the only logic to make changes to the
638:00 - star is is contained in one unit and
638:03 - anywhere else in the code if they want
638:06 - to make changes to the store they will
638:08 - have to dispatch an action and then if
638:10 - you make the action easy enough to be
638:13 - look for then it's it's easy to to
638:15 - figure out where where went wrong right
638:18 - so you can trace out where who is
638:20 - dispatching this action and then figure
638:22 - out why is this place dispatching an
638:24 - action
638:25 - right so we can
638:26 - um
638:27 - borrow this idea right
638:30 - um maybe let me come up with another
638:33 - example library that uh maybe some of
638:35 - you all are more uh excited about that
638:38 - which is a state machine library right a
638:40 - state machine is also a state the no one
638:44 - can change the state except uh actions
638:47 - that's being done on onto the machine
638:49 - itself right every time when you
638:52 - um
638:52 - make some changes you have to say Okay
638:55 - based on this state that I am at right
638:57 - now and these are the actions that I can
638:59 - receive and
639:01 - only when all these actions coming into
639:04 - my action my state I will derive a new
639:06 - state
639:07 - and then again again right uh so no one
639:10 - is modifying the state directly they all
639:13 - make changes through actions and and
639:17 - that is how you can make
639:20 - um make like control your data flow from
639:24 - your application you can control who big
639:26 - changes right you buy your controlling
639:28 - who making the actions
639:31 - so
639:33 - over here let's let's make a very simple
639:36 - modifications to our code right now
639:38 - right we we want to uh provide some API
639:42 - to make uh changes to the to-do's so
639:44 - that if you want to make changes to to
639:46 - those you have to make it this way so
639:48 - I'm going to provide some API for
639:50 - example uh add to do
639:53 - data and this is okay I'm gonna
639:58 - call this
640:01 - okay data right so
640:05 - uh new to do
640:09 - whenever I have a new to-do I need to
640:11 - come over here and uh update data
640:20 - so data dot to lose
640:24 - data dot to those
640:27 - uh new to do
640:31 - right so I'm going to come up with a few
640:34 - methods that that I approve of to make
640:39 - changes to the to the to this to do
640:42 - stars
640:44 - and okay so I'm going to create more of
640:47 - this
640:48 - right and in the meanwhile
640:50 - whoops
640:51 - and in the meanwhile I and what I'm
640:54 - going to do is I'm gonna freeze the to
640:56 - do
640:57 - I'm gonna freeze it so that this uh this
641:01 - is just for for demonstration only right
641:04 - I'm gonna freeze the to do such that
641:07 - whenever I make changes I can't right so
641:10 - you you have to call add to do in this
641:14 - case so I'm gonna so this also I'm gonna
641:17 - freeze it every time when I create a new
641:19 - to do so I'm gonna come over here at to
641:22 - do uh this is at the add to do stops
641:26 - felt
641:26 - over here I'm gonna say add to do right
641:30 - this is something new
641:38 - okay and
641:41 - let's see add to do
641:47 - foreign
641:59 - okay this is working
642:01 - okay so we are going to handle the done
642:03 - and delete as well but I think the rough
642:07 - idea is it's clear for you we are going
642:10 - to
642:11 - we we should have methods that um allows
642:15 - us to modify the to-do's directly and
642:17 - then only call this
642:20 - um methods from outside from your view
642:23 - so that you know that uh we have one
642:27 - file that has we have one every
642:29 - functions that modify the state of the
642:32 - star in one place and everyone else just
642:35 - call these functions right so so that
642:38 - you you have a clearer control better
642:41 - control of your stock your states of
642:43 - your application
642:44 - of course this is a very simple example
642:47 - uh if you have slightly more complex
642:50 - Stars more complex Logics I would
642:52 - definitely recommend you to look at
642:55 - State Management libraries and then see
642:58 - how you can incorporate them using stars
643:00 - and in fact I've created some videos
643:03 - um
643:04 - links on the description on say how you
643:07 - can use a state machine Library exit
643:10 - as a star or how you can use Redux as a
643:13 - store right the ideas are the same you
643:16 - they allows you to have a better control
643:19 - of how your state changes from one to
643:22 - another
643:23 - of course once we've done like having
643:26 - our state freeze right now we kind of
643:29 - probably we probably have a better sense
643:31 - of where this comes from right because
643:33 - if I change right now if I'm gonna
643:35 - change the state a few times you'll see
643:38 - an error and let's just Trace where this
643:40 - error comes from
643:42 - um okay this is this is bad this is not
643:45 - easy to trace
643:46 - but because I prepared this uh
643:49 - example I know where it comes from
643:52 - actually coming from here see uh
643:56 - somewhere someone just leave this code
643:59 - maybe because of testing they want to
644:00 - test something on the to-do's it says
644:02 - that if notification link is three I'm
644:06 - gonna
644:08 - I'm gonna remove everything from the to
644:10 - Do's uh so this is this is the
644:15 - point right you could have a code
644:18 - written anywhere like this and it's very
644:21 - it will be very hard for you to trace
644:23 - out where it is so I'm going to remove
644:25 - this and hopefully we fix our
644:28 - issue right when I'm trying to create
644:30 - more uh it's not deleted it's not
644:33 - cleared right now and we've solved this
644:35 - so tip number one is if you want to have
644:39 - a complex store store that has complex
644:41 - Logics it's better to use some State
644:45 - Management libraries or write out your
644:46 - own reducer kind of thing or state
644:48 - machine counting to to manage your store
644:51 - or else it would be a very it will be a
644:54 - huge mess if you allow anyone any
644:57 - components to make changes to the store
644:59 - directly
645:01 - of course some of you may have
645:05 - doubts or concerns uh
645:08 - about using libraries like Redux right
645:12 - uh I think that's that this stems from
645:15 - overusing Redux right not all the states
645:17 - are complex you don't have to use it
645:21 - and every situation but only when cases
645:24 - where the store logic itself is complex
645:28 - then probably you that the idea the con
645:32 - uh that reduction stock have may be
645:36 - helpful for you
645:37 - right and also one thing that stems from
645:39 - that is a huge Stars right you typically
645:43 - somehow we end up with right having a
645:46 - very huge Redux stores in our
645:48 - application as the applications go big
645:50 - and this is something that uh
645:53 - will have effect as well and let's take
645:56 - a look at our example in our example we
645:58 - have a data store that has to Do's
646:01 - notifications and users
646:04 - which means that anytime when you change
646:07 - something like change the username
646:09 - um you have to change the star and
646:12 - change the star which means that the
646:14 - whole star is being invalidated anywhere
646:16 - that is subscribing install
646:18 - will get notified and then try to see
646:21 - whether they should update their
646:22 - component right to to demonstrate this I
646:26 - write a simple utility
646:28 - over here called Mac updated and I
646:32 - applied to all the components over here
646:35 - so uh I have I've applied this Mac
646:38 - updates for each of the components like
646:40 - the nav bar the add to do the to-do list
646:44 - and
646:46 - um and also notifications and edit
646:48 - profile so every time we make changes to
646:50 - the States you see that it will turns
646:53 - red
646:54 - right it will transfer it every time I
646:56 - add a to-do it will turn red on places
647:00 - that has updates meaning places that
647:02 - because add to do changes the data right
647:05 - and anywhere that subscribes to the data
647:07 - store
647:08 - get notified and try to update its
647:11 - content and that's where you see the it
647:13 - will turn red outline
647:16 - so uh if as you can see here if I open
647:19 - turn on the
647:21 - profile you'll need you only see that
647:23 - this turns red because
647:25 - uh this
647:27 - this is controlled using a locals state
647:30 - right show so only the local component
647:33 - will get updated and if you come over
647:35 - here you want to update your username so
647:38 - this username is over here this input we
647:41 - binds this to the data.user.name
647:46 - meaning that anytime we change username
647:49 - we have to update the data and the whole
647:52 - data will be in will be updated and
647:55 - anywhere there is that subscribes to
647:58 - this data will get updated right so if I
647:59 - type something you see everywhere turns
648:01 - red time again all the places has a read
648:05 - outline so that is bad right if you
648:08 - imagine that you have a lot of
648:10 - components that is
648:12 - uh you have a lot of components then it
648:15 - is just dragging you down and it doesn't
648:18 - have to be this way right so let's try
648:21 - to break this down let's try to make
648:23 - user and
648:25 - separate store because user itself the
648:28 - logic of user does not got to do
648:30 - anything got to do with the to-do's and
648:32 - notifications you change notifications
648:34 - or to Do's independent of your users you
648:37 - don't have to know them together to make
648:40 - changes so I'm gonna take out the users
648:43 - in its own store and come out export
648:47 - concern
648:49 - user equals to this writable
648:58 - and to use it I am going to come over
649:01 - places that uses the user star say the
649:05 - edit profile I'm going to import from
649:07 - I'm not sure I can still use the data
649:10 - but I definitely need user and come over
649:12 - here and change it to subscribe to user
649:15 - name
649:16 - okay I still need data okay uh let's see
649:19 - this should be user name
649:23 - and I think at the nav bar I also need
649:27 - user
649:29 - and change this to user name
649:33 - and let's see what happens right so if I
649:35 - turn on and I'll change something
649:38 - only the nav bar stands real because
649:42 - only you you only because only the
649:44 - navbar component is subscribing to this
649:46 - user store and
649:49 - if you of of course this is uh the the
649:53 - highlighting itself is uh is saying that
649:55 - this component itself will update but of
649:58 - course uh my spell actually has
650:01 - optimized that the update only happens
650:03 - to the element that uh uses only the
650:06 - elements that uses the information from
650:08 - user and only when the information has
650:11 - changed only this text elements is is
650:15 - going to be re-rent uh updated by its
650:19 - felt
650:21 - but immediately you can see the changes
650:24 - right you you can see that anytime when
650:26 - you do something
650:28 - um only the youth components itself only
650:30 - has changed so that is tip number two
650:34 - have your store small have a small store
650:39 - Only Store
650:40 - information that is needed for that
650:42 - store and if you have separate concerns
650:45 - then store it in a separate store
650:47 - so that your component that subscribes
650:50 - to that store only concerns to the data
650:52 - that is needed for that store right in
650:54 - our example we've seen users you don't
650:57 - need to know about users exchange
650:59 - anywhere else in the component then you
651:01 - can have users separately as a separate
651:04 - store
651:05 - however if unfortunate circumstances
651:08 - that you have you have to have a big
651:11 - complex star for example in this case
651:13 - our to-do list is big and complex you
651:16 - have an array of objects an object can
651:18 - contains a lot of information
651:20 - and if for example in this case in our
651:23 - nav bar take a look at our navbar
651:26 - whenever we add a to-do it will have to
651:30 - be updated because it updates the
651:32 - account right every time we Mark
651:35 - something as done it will have to update
651:37 - itself as well
651:40 - um so
651:41 - uh
651:42 - so that is an unfortunate circumstances
651:45 - but there's something else we can do as
651:48 - to help this to alleviate this which is
651:50 - to use a derived star
651:54 - so for example if I come over here I'm
651:56 - gonna import derive
652:03 - while I'm typing let me explain like why
652:06 - this helps right so over here
652:09 - um our inner com application over here
652:12 - we are subscribing to the data because
652:15 - we need the data to lose length we need
652:18 - the length of the to Do's maybe the
652:19 - length of the to-do's that is filtered
652:21 - out for for those that has marked as
652:24 - done and we need the length of
652:25 - notifications but if you are changing
652:28 - the to do right we just change the to do
652:30 - anywhere
652:31 - we still get notified that data has has
652:35 - changed and events and when we check the
652:39 - length and fill down everything and
652:40 - check the length it's actually the same
652:42 - number right of course uh spell will not
652:45 - do any updates to your component over
652:48 - here it will see that oh if it's the
652:50 - same text value it will not update it
652:53 - but then there's still update cycle
652:55 - happening in your component which means
652:58 - that if you have life cycle events uh
653:01 - for example if you register before
653:02 - updates or after updates in your
653:04 - component they'll still be triggered and
653:06 - run so what can you do
653:09 - uh what we can do is we can create
653:12 - derive store derive a new store from the
653:16 - existing data
653:18 - and if the derived stop value does not
653:21 - change then there will no there will no
653:24 - there will no uh update cycle happening
653:27 - in your components so I'm going to
653:29 - create a few star over here because we
653:32 - have uh we have three three different
653:35 - things right first is we have the to do
653:38 - slang
653:41 - derived from data and then data equals
653:46 - to
653:47 - data to reduce link
653:52 - we also have a
653:54 - uh let's see notifications
654:01 - so it derives from data but then data
654:04 - notification link
654:06 - and then I have a to-do's done link
654:08 - right
654:11 - then link
654:15 - the copy of this and paste it over here
654:18 - so I'm going to replace them over like
654:21 - this
654:23 - to lose length uh okay this over here
654:29 - to this line over here
654:33 - notifications link over here
654:41 - now okay let's see what what it's
654:44 - missing
654:47 - oh
654:50 - okay so then if we come over here and
654:54 - mark the do laundry as done
654:56 - uh it's some it's not supposed to be
654:58 - updated but I'm not sure you can see it
655:00 - clearly so I'm gonna come over Mark
655:02 - updated and make every element with some
655:06 - margin uh let's see four pixels eight
655:10 - pixels of margin right so then let's try
655:13 - this again if I come over and click done
655:15 - you see that this whole nav bar is not
655:19 - rent uh does not go through an update
655:22 - cycle right if I try to add a few to do
655:26 - um come over here Mark has done this
655:28 - does not go through the update cycle
655:29 - because we are not updating to data the
655:32 - data store we only are subscribing to
655:35 - three stars the to-do link to do stun
655:37 - link and notifications link
655:39 - and when you click on the done button we
655:44 - the length does not change yet so in
655:48 - that sense uh nothing has changed yet uh
655:52 - this the the uh yes they are subscribing
655:55 - to the data and they are updating the
655:57 - store value but then the value is not
655:59 - changed yet so in this component when we
656:02 - are subscribing to these stores we are
656:04 - not getting notified therefore that we
656:06 - are not going through an update cycle
656:09 - um of course this may be a contract I
656:12 - think
656:13 - in some sense it may be up to over
656:16 - optimizing but of course you have to
656:18 - look at it by Case by case basis
656:21 - and
656:23 - and this example definitely is a
656:24 - contrive example where we check about
656:26 - the length sometimes we want to know
656:29 - about certain to do item that is whether
656:32 - it is um certain to do in this list uh
656:37 - so sometimes you have a store that is an
656:40 - array and then you want to check a
656:42 - certain item within that array a certain
656:44 - property of it whether it has changed
656:47 - um yeah things like that right and if
656:50 - you can create a derived star out of it
656:53 - and only subscribe to that derived star
656:55 - then although the derived stall gets uh
656:58 - well we'll keep evaluating to get that
657:01 - new value out of it but if the value
657:03 - itself is a primitive and it does not
657:05 - change
657:06 - then the component subscribes to that
657:09 - derived store will not go through an
657:11 - update cycle right so when I say update
657:13 - cycle is a cycle that goes through like
657:16 - checking uh running through before
657:18 - updates update after update lifecycle
657:20 - and also checking through like what
657:22 - other element uh what are the values uh
657:25 - that any Expressions over here and check
657:28 - the value see whether they have changed
657:30 - or not
657:31 - right so it does not go through that
657:34 - um
657:35 - of course
657:37 - um you
657:39 - so you you can also come out uh this I'm
657:43 - not sure whether it rings a bell to you
657:45 - but you can also have your star that is
657:48 - immutable based star so I've done a
657:51 - video uh links in the description as
657:53 - well on how you can make your store to
657:55 - be immutable so an immutable star allows
657:58 - you to
657:59 - um know what other things that will
658:01 - change right so if you have a big
658:03 - complex store that has unfortunate
658:06 - situation you have to have a big complex
658:08 - store uh immutable store allows you that
658:10 - if you change one place then only part
658:13 - of that store has changed the identity
658:16 - has changed right it changed the
658:17 - reference of the object so the rest of
658:20 - the star you can still subscribe and
658:21 - still does not get
658:23 - um notified because that part of the
658:25 - store has not changed yet right or you
658:28 - can come up with a proxy based store uh
658:30 - proxy allows you to change uh part of
658:34 - the states object and you can subscribe
658:37 - to the part subscribe so part of of the
658:39 - state object and get notified only that
658:41 - part of the things that you subscribe
658:43 - has changed right so I've done another
658:46 - video about using value is a proxy based
658:50 - State Management Library so you can use
658:52 - value to create your store so that
658:56 - only if that part of the states that
658:58 - you're interested has changed you get
659:00 - subscribed you get notified and go
659:02 - through the other Cycles if only
659:04 - necessary right so that is three tips
659:07 - number three uh have use some uh
659:11 - immutable star or proxy base star or you
659:15 - can come up with your own derived store
659:17 - that only subscribes to a small part of
659:21 - the store that you are concerning about
659:23 - so that your component does not have to
659:26 - go through update Cycles to
659:28 - updates everything when the things that
659:31 - you're concerning is not updating at all
659:33 - it's not updated at all right so I have
659:36 - three tips for you and hopefully that is
659:39 - useful for uh as a serve as a good guide
659:43 - for you to think about how you can
659:45 - manage your store in a sprout
659:48 - application and how you can optimize
659:50 - your application
659:54 - today I'm going to share with you how
659:55 - you can get store value outside a
659:59 - spelled component you may ask like why
660:02 - what's the problem with getting a store
660:04 - value outside of sveld component is that
660:07 - hot well let's see at this example so
660:10 - over here uh this is a disclaimer this
660:13 - is a very contrived example just to
660:15 - demonstrate you how difficult it is to
660:18 - get the store value of sales felt
660:20 - component right so over here I have a
660:24 - star
660:25 - uh created using a writable star
660:28 - and in here to get the star value within
660:31 - a spell component one and good what I
660:33 - can do is I use a dollar prefix variable
660:36 - to get the value of the Star right this
660:39 - automatically subscribes to the store
660:40 - and gets the value so the this variable
660:43 - represents the value of the star
660:46 - but then I also have a function called
660:48 - calculate double value I pass in my
660:51 - store and so this function I Define it
660:54 - within
660:57 - um a Javascript file so it's outside
660:59 - this felt component so in this
661:02 - function I want to get the value of the
661:04 - star and then calculate the double of
661:06 - the value of the star
661:08 - but then how do I get the value of the
661:10 - star if I do something like this uh this
661:13 - does not work because it says dollar
661:15 - store is not defined you can't do this
661:17 - over here you can't uh subscribe to this
661:21 - star value and get this variable defined
661:24 - over here because this is outside of
661:26 - swell component
661:28 - so how do you get the value of the store
661:30 - then
661:31 - well one way is we can Define this
661:35 - variable uh we just for the sake of
661:39 - telling you that this variable is going
661:41 - to be the value of the star I'm gonna
661:43 - Define a prefix with a dollar but this
661:46 - got nothing to do with the dollar prefix
661:48 - variable in a spell component where it
661:50 - automatically subscribes to the star
661:52 - right so I Define this variable and I
661:55 - can subscribe to the store
661:58 - subscribe and then I will get the value
662:01 - of the star over here right so I can
662:03 - just immediately I can assign this value
662:07 - to the variable called star
662:10 - and since I get the value so this
662:14 - subscribe method will return me and
662:15 - unsubscribe function and since I already
662:19 - have the value of the star actually I
662:22 - don't really need to know what's the
662:24 - next value I just need to know the
662:25 - current value so I can unsubscribe it
662:27 - immediately so come over here and call
662:29 - unsubscribe
662:30 - so at this point of time
662:33 - um I should already get the value of the
662:36 - store
662:37 - in this variable
662:40 - right so should but it it I there's no
662:44 - guarantee right it depends on how this
662:46 - store is being defined so remember when
662:48 - I say in a writable store in the
662:50 - previous video
662:52 - um you when you call subscribe when you
662:55 - put you when you define a subscribe
662:56 - method you need to call the value of the
662:59 - star immediately are you sorry you need
663:01 - to call the function with the current
663:04 - value of the star because us and
663:07 - synchronously because or else this
663:10 - function if it's not being called
663:11 - immediately then then the store will
663:14 - still be undefined so you have to call
663:16 - it immediately so that you can assign to
663:19 - this value immediately and then right
663:21 - now you can already get uh use the value
663:24 - of the star for example star times two
663:28 - right so
663:30 - luckily writable store does that
663:33 - writable stores always give you the uh
663:36 - always will call when you call a
663:37 - subscribe this callback function will be
663:39 - called synchronously Always to give you
663:41 - the current value of the star
663:44 - so uh this is how you would get the
663:48 - value of the store at that moment you
663:50 - subscribe it and then immediately
663:53 - unsubscribes from it and then you get
663:55 - the value of star
663:56 - and actually there's something that I
663:59 - didn't really talk about which is if you
664:01 - come over here if I Define this function
664:04 - over here in States
664:06 - let's let's remove this I can't actually
664:10 - um
664:12 - gets the value of the star using a
664:15 - dollar prefix variable as well so star
664:18 - has to be a top level variable that for
664:22 - example over here and only you can use
664:24 - dollar prefix to access them
664:26 - right so if you're trying to Define any
664:30 - function any variable that has prefix
664:32 - dollar it will you will get one and if
664:34 - you try to access any variable uh that
664:37 - is any store variable that is not
664:40 - defined in the top level it will
664:42 - complain as well because a spell
664:45 - component can't really subscribe to this
664:47 - automatically subscribes to this value
664:49 - and then updates it because
664:53 - uh you may just call this function once
664:55 - and yeah things like that right you uh
664:59 - there's no like automatically subscribes
665:02 - and clean up uh that that ties to the
665:05 - component life cycle because you can
665:06 - call this function at any point of time
665:08 - and how many however many times you want
665:10 - right and every time when you call the
665:12 - store value X the story will actually is
665:15 - a different value
665:17 - so to
665:19 - yeah so over here uh this warnings just
665:23 - tells us that we probably have to call
665:25 - it a different variable name so I'm
665:27 - gonna say um
665:29 - prefix
665:34 - and this will gives us the same value as
665:37 - well
665:39 - and finally if let me comment this out
665:42 - and come back to the previous code so
665:45 - finally one I one thing I want to share
665:47 - is that
665:49 - um this piece of code actually we
665:52 - already have a util built in from swell
665:54 - that does this this this whole thing
665:56 - over here and it's called a get
666:00 - so gets will do exactly what we are
666:02 - doing over here
666:04 - so we don't have to write it ourselves
666:06 - every time so we can call up do this
666:09 - instead and it will still works right so
666:12 - get will do the same thing it will
666:15 - subscribe to us R and then get the value
666:17 - immediately and unsubscribes immediately
666:20 - so uh here you go here is how you can
666:24 - get a value of a star outside of a sveld
666:28 - component
666:32 - let's talk about the difference between
666:34 - Star and context
666:36 - well you know that I've made a video
666:39 - about how you can pass star over context
666:43 - to make a reactive context
666:46 - right and some of you may ask me like
666:49 - what is the difference between a store
666:51 - and context right if you have a store
666:54 - why do you need contacts or if you have
666:57 - contacts where you store for example so
666:59 - let's take a look at one example over
667:01 - here over here I have a
667:05 - app which has two parents right parent
667:08 - one and parents two these two components
667:11 - actually are the same uh yeah actually
667:15 - they are the same right I just create
667:17 - two of them for no reason
667:20 - but anyway anywho uh parents one
667:24 - uh imports from Imports the children and
667:27 - these children with this child component
667:30 - reads a context from the parents right
667:33 - the parents set the context over here
667:35 - called data which is a context data and
667:38 - the child reads from it right get
667:40 - contacts the context data we pass a the
667:44 - data that will pass in is actually a
667:46 - store so when you read this to get a
667:50 - value out of it you use a dollar prefix
667:52 - syntax to read the value of the context
667:55 - um on the other hand also I created a
667:57 - file called storage yes which Imports
668:00 - the writable and create a writable store
668:03 - and I import this um to parents as well
668:06 - as the child so in the parents one I
668:10 - import this uh the star data
668:13 - and have a range inputs to kind of like
668:18 - modify the value of the star same thing
668:21 - goes for parents too
668:23 - it's the same code right so I have two
668:26 - inputs one to modify the data of the
668:28 - context for these parents and modify the
668:31 - data of the store which is from this
668:33 - store file parent2 as well as a context
668:36 - data where I have where it has one's
668:38 - inputs to modify a data of the inputs
668:40 - and once inputs to modify the data of
668:44 - the store which is coming from this file
668:46 - and a child uh both of them have a child
668:49 - and the child component is the same
668:51 - component which reads imports from the
668:54 - store data and imports get the context
668:56 - for context data and show both of the
668:58 - value of the star and that's it
669:01 - so um
669:03 - so let's try to play things around and
669:05 - see what happens right so if I change
669:07 - the value of the Star right now
669:09 - when I change it you can see that all
669:12 - the all the instances that imports from
669:14 - this store right pass one in front of
669:16 - this file and two imports from this file
669:18 - trial imports from this file so all of
669:20 - them are reporting from the same store
669:22 - instance and when one of the value of
669:25 - when one of these instances changed the
669:27 - value all the other instances actually
669:29 - get notified and update the value itself
669:31 - as well so you can see that the store
669:34 - when it changed from the parent one is
669:37 - the child within pen one is updates as
669:40 - well and the parent two updates as well
669:42 - oh sorry yeah updates as well and the
669:45 - child within parent two updates as well
669:47 - as well if I change from parents to same
669:50 - things happens right all of them are
669:52 - importing from a steam store
669:54 - therefore all of them get notified or
669:57 - get updated at the same time they are
669:59 - all in synced
670:00 - now take a look at context right so for
670:03 - context wise I actually create two two
670:06 - stars right I create one store for the
670:09 - parents want
670:11 - and send it to the context I create
670:13 - another store for parent 2 and send it
670:17 - to the contact so they are actually
670:18 - different store
670:19 - uh in child the child component is the
670:22 - same where this in terms of code is it
670:25 - is the same component file but imported
670:28 - in two different places right meaning uh
670:30 - where it's being imported where it's
670:32 - being used then what kind of context
670:34 - you'll get all depends on where it's
670:36 - being used right so uh I uh so the child
670:40 - is being used in pair one and parent two
670:42 - then uh irrespectively they receive the
670:45 - context from each of their parents uh so
670:48 - if I change the parent wants context
670:50 - value
670:51 - you can see that the child in context uh
670:54 - in the parents one get updates get
670:56 - updated by the child and parents too
670:59 - does not right does not know at all
671:02 - because it's it's living in a different
671:03 - context it's receiving the context data
671:06 - from a different parent it's receiving
671:08 - from these parents too so if I change
671:10 - the value of the context in the parents
671:12 - too then you can see that the child in
671:14 - parents 2 is has has changed is changing
671:18 - right but not the child uh the data in
671:22 - the child in the parent one right so now
671:26 - you see that there's this difference and
671:28 - this is the main difference uh between a
671:31 - context and a star
671:33 - although so the star itself if you're
671:36 - using the same instance of the store
671:38 - basically you can make anyone anywhere
671:41 - that's using the store to be updated to
671:44 - be in sync at the same time
671:46 - context on the other hand uh works is a
671:50 - slightly different concept right context
671:52 - says that for all the components that is
671:55 - within my context will receive this
671:57 - context we'll receive the data they're
671:58 - going to pass through this context so
672:00 - you can get the same data right so if I
672:02 - passing the same uh if I create one
672:05 - store instance that all of the children
672:07 - will get the reference of that store
672:09 - instance we're gonna pass uh if I'm
672:12 - gonna pass this uh the instance of this
672:14 - store from store.js then you probably
672:18 - see that if I change all of the uh if I
672:21 - if I if I pass the same Store contact
672:23 - store instance to both the parent one
672:25 - and two then you still you will see that
672:29 - all the instances will be updated that's
672:31 - not because they are you are not about
672:33 - the context anymore it's about the store
672:35 - instance because if they're getting the
672:37 - same store instance then they're gonna
672:38 - do it they are going to get updated at
672:40 - the same time in sync right but uh for
672:43 - for context it's more of where you are
672:46 - living under right in this case we
672:48 - create a different content store
672:50 - instance then you are living in a
672:53 - different context therefore you get a
672:55 - different store instance and therefore
672:57 - if you change from parent one to only
672:59 - the child in the parent one will get
673:01 - updated you change your parent to only
673:03 - the child uh you know only the story
673:05 - instance in the store in the child and
673:08 - the parents two will get updated right
673:10 - so so there you go so there you see the
673:12 - difference between the store
673:14 - and a context
673:16 - and they are not like a mutually
673:18 - exclusively kind of different therefore
673:20 - you can actually use them together you
673:24 - can have a store inside context to
673:27 - create a reactive star
673:29 - okay so here is the difference between a
673:32 - star and a context
673:35 - but some of you may still ask me like
673:38 - hmm I know the difference but how should
673:41 - I decide when should I use a store or
673:45 - when should I use a context how do I
673:47 - differentiate when or what kind of
673:49 - scenarios I should use which of the
673:51 - things
673:52 - I know how it behaves I know how it
673:54 - works but which one should I use
673:57 - so here I'm going to share you a way to
674:00 - think about how or when you should use a
674:04 - store or when you should use a context
674:06 - or when you should use both
674:08 - okay so imagine over here you have a two
674:12 - by two matrixes which is a two by two
674:15 - different kind of scenarios that you can
674:17 - encounter
674:18 - so it depends on the data right the data
674:20 - you you want uh on an excesses let's say
674:24 - x-axis what you want is whether this
674:28 - data is static or this data is dynamic
674:33 - so static data is something that you you
674:35 - wouldn't expect any changes but Dynamic
674:38 - data is you you want this to be changed
674:40 - uh during the runtime which is during
674:43 - during user interactions where user
674:45 - interacts and you want this data to
674:47 - change
674:48 - and on the vertical axis on the other
674:51 - hand
674:52 - you have
674:54 - um
674:55 - what I call a global data or a local
674:58 - data so for global data it's it's not
675:02 - about how pervasive this data is being
675:04 - used it's more of uh this data should be
675:07 - one and only one right this data should
675:10 - be usually have one data for all of the
675:14 - components or wherever you use it it
675:16 - does not matter where you're using it
675:17 - you're using you're you're gonna have
675:19 - just one copy of the data and for local
675:22 - data it's more of where you are using it
675:25 - it depends where you're using and what
675:28 - kind of data you're going to get okay
675:31 - um so you have static Dynamic and Global
675:35 - to local so you have a static local kind
675:39 - of data or static Global kind of data
675:41 - and you can have a dynamic local or
675:44 - dynamic global data right so let's take
675:47 - a look at
675:48 - example right I come out I've I've been
675:51 - trying to think about what is the best
675:53 - example for you and I have been thinking
675:56 - about this and coming out of like
675:58 - different examples for different
676:00 - scenarios
676:02 - um may not be convincing because
676:04 - sometimes this example can actually be
676:09 - like be
676:11 - become like be part of any kind of
676:14 - scenarios right because for example say
676:16 - for example a team it can be a global
676:19 - team but it could still be a local team
676:21 - right sometimes in your application your
676:25 - some parts of it I use is using like
676:27 - this maybe like a dark blue team and
676:29 - part of it is like a dark green team
676:31 - right you can have different kind of
676:33 - teams within the com within the
676:35 - application at the same time so team can
676:37 - be a global thing it could be a local
676:40 - team and team itself can be fairly
676:43 - static for example you don't expect
676:44 - users to change the team but it could be
676:47 - fairly dynamic as well sometimes it
676:49 - allows your user to change the team
676:51 - um
676:52 - uh from maybe the light team to a duck
676:54 - team to a different kind of team right
676:56 - so depends it really depends on your use
676:59 - case it really depends on what your
677:01 - requirement is determine it rather than
677:04 - say a team should be always be like a
677:07 - dynamic thing or team should always be a
677:08 - static thing right so this is exactly
677:11 - the example that will come up with I'm
677:13 - gonna have a data called color over here
677:16 - let's take a look at the first scenario
677:18 - a static and a global data right in this
677:21 - data.js I have a color so this color I'm
677:24 - not going to use a star because it's
677:26 - it's static right so for static data
677:28 - you're gonna just Define this variable
677:30 - it as it is Define it as a variable so
677:34 - that you can use this variable across
677:36 - components
677:38 - um so I'm using this data in a button so
677:43 - in a button I import this color and use
677:45 - it and I also have this over here I have
677:49 - like a game controller thing so in the
677:52 - controller I also
677:54 - um let's see right oh I think it's a
677:56 - game ah okay I didn't do that so in the
677:59 - controller I also import the color
678:06 - right in the controller also Imports the
678:09 - color
678:10 - so this color is static I can Import in
678:14 - multiple components and just use it
678:16 - right and it's because if it's it is a
678:19 - global thing so uh I can Define it in
678:22 - maybe like a one file and everyone can
678:24 - just import this file and use this data
678:28 - right so static and Global right static
678:31 - means that you would not use store and
678:34 - Global means you don't have to use
678:35 - context it does not matter where your
678:39 - button or where your game component is
678:42 - you just use this same color so you
678:45 - import from the same file
678:46 - okay and static locals so in this case
678:51 - uh still color but it depends on where
678:54 - the button is or where your component is
678:56 - you may want to have a different color
678:59 - right so all of this uh the game all of
679:03 - the button you can see on the screen is
679:05 - the same component it's this button
679:07 - components so it depends on where this
679:09 - button resides in the component tree of
679:13 - the app component tree it shows a
679:15 - different color it shows a different
679:16 - background color so in this case uh to
679:19 - do that I I'm using a context right an
679:23 - easier way for me is to use a context or
679:25 - I can have maybe like spot as a props
679:28 - instead of getting it from a context
679:31 - right so Props is your parents pass the
679:34 - data to you context is a parent pass
679:36 - data to all of you all those children in
679:40 - this case I'm going to use the context
679:41 - instead of props because uh the place
679:44 - that sets the color is actually very
679:46 - high up in the component Tree in this
679:48 - case it's in the app and the app I set I
679:51 - pass different colors to the game I pass
679:53 - green and past blue that's why you can
679:55 - see like there's a green game and
679:57 - there's a blue game
679:58 - and in the game I set context right I
680:01 - set the context using the color from
680:03 - this props so that all the elements
680:06 - within this um
680:08 - component for example a button over here
680:11 - so game has a controller controller has
680:14 - buttons so button reads this data from
680:17 - the context and sets the color of the
680:19 - button and one thing you can see here
680:22 - also is that actually in the top of this
680:25 - component we have the app which already
680:28 - sets the color which is already sets the
680:31 - orange color but then because of context
680:34 - you can also override whatever is being
680:36 - said and apparent right so you just look
680:38 - at the most immediate parents to
680:41 - determine what context color you're
680:43 - getting
680:44 - so here I am still part I don't use a
680:47 - star because the color itself is is
680:49 - determined by the component tree and
680:52 - it's static I'm not going to change I'm
680:55 - I'm not allowing user to change the
680:56 - color right this color can be coming
680:59 - from maybe say some configuration files
681:02 - or maybe change of requirements or
681:05 - coming from API but once this data is
681:07 - once you get this data this data is
681:09 - fixed you don't change this data by user
681:12 - interaction then this can be a very
681:14 - static data you don't need a store for
681:16 - this
681:17 - and for but for in our case we want this
681:21 - data to be local Right Where You resets
681:23 - depends where what color you're getting
681:26 - so you are getting using a context to
681:28 - handle it right so static means no store
681:31 - and locals means we're going to use a
681:33 - context
681:35 - now last two
681:37 - example right now we have a dynamic and
681:40 - a global uh
681:42 - component example right so this scenario
681:44 - I have a Color Picker so when I come
681:47 - over here Color Picker I change color
681:49 - you can still pick that on on the right
681:52 - right you see that whenever change these
681:55 - colors are changing
681:57 - all right so this the data itself is
681:59 - dynamic although the color wise is is
682:03 - global every buttons every controller
682:05 - are changing at the same time so because
682:08 - if it's Global I can Define it in the
682:10 - external file I can Define it in in a
682:12 - separate file but because it's Dynamic
682:15 - I'm going to use a star so that I can
682:17 - change the value of the star and all the
682:19 - components that's using a Sim store will
682:21 - get reflected immediately right getting
682:23 - a data updated dynamically
682:26 - lastly I have Dynamic and locals so in
682:30 - this case let's take a look at the
682:32 - example I have I have three different
682:36 - kind of colors right different
682:37 - components different buttons are getting
682:39 - a different colors and they are Dynamic
682:42 - I can change the color anytime I want
682:45 - right I change this to be dark green or
682:48 - maybe purple I can change this to be
682:51 - blue like a blue I can change it any
682:54 - color I want right so this is
682:58 - uh Dynamic data and local data so
683:02 - because of its dynamic
683:03 - Behavior I will need a star
683:07 - and because it's local I need a context
683:10 - and therefore I need to use context to
683:12 - pass down the star so here you can see
683:14 - that I am now passing down stores and
683:17 - I'm using the uh context to puzzle store
683:21 - and I'm using a writable store right so
683:23 - this all these three Color Picker is
683:25 - changing this value of star
683:27 - and all the components that is using the
683:30 - star value it gets update dynamically
683:34 - right and I pass the data through the
683:36 - store through context so depends on
683:39 - where my button is it will be reading
683:41 - from a different context therefore
683:42 - reading from a different store and
683:45 - therefore gets a different color updates
683:47 - right so this uh player one color will
683:50 - not be updated if I change the first
683:52 - Color Picker and and vice versa right so
683:56 - here you can see four different kind of
683:58 - scenarios by splitting by two by two
684:01 - quadrant again static or dynamic no con
684:05 - no star or with a star and Global or
684:09 - local so not using a context or using a
684:13 - context so I hope this can explain can
684:16 - answer your question well
684:21 - so today I'm going to show you what is
684:23 - felt actions well spelled actions is
684:27 - um essentially a life cycle functions
684:29 - for your elements right so it's a very
684:33 - powerful feature if you know how to use
684:35 - them but before we learn about what are
684:38 - the use cases that you can use actions
684:40 - let's take a look at how you can write
684:43 - actions
684:44 - right so it's over here I have a rebel
684:47 - over here
684:48 - so um actions is nothing but a function
684:53 - so I can name my functions any name like
684:56 - I want so I can call it a
684:58 - Lee how action
685:00 - right
685:02 - and I can use an action
685:06 - on an element so any elements in the
685:09 - screen so I have like a H1 over here I
685:12 - probably have another H2 over here but
685:15 - if I want to add an action on this
685:17 - element I will use a directive use and
685:21 - then a name of the action right so this
685:24 - name itself has to be defined right it
685:26 - can be
685:27 - um functions that you define in a script
685:29 - in a function you define in the global
685:31 - scope as long as it's a function then
685:34 - you define it somewhere the name then
685:36 - you can use it
685:38 - right so this function now we are using
685:41 - this action right so this section itself
685:43 - sticks in a couple of parameters and the
685:46 - first one that we're going to look at is
685:48 - called a node
685:50 - right so if you console log over here
685:53 - right now
685:56 - what you will see is that
685:58 - um you get
686:01 - the note itself in this action right so
686:05 - whatever elements that you apply with
686:07 - the action you will get it over here
686:08 - right like this right
686:11 - and remember that say that it's like a
686:14 - life cycle events for an action well
686:17 - that's because uh when this element H1
686:20 - is mounted on the screen onto the Dom
686:22 - then this function is being called
686:25 - immediately right so you have the access
686:27 - to this Dom uh this node that you are
686:30 - adding action to you can also access to
686:33 - like the parents and everything else
686:35 - right so it's like a life cycle you know
686:37 - that this will be called when this
686:39 - element is added to the Dom
686:42 - right and to know that when it's removed
686:44 - you can return a method call so you can
686:48 - return an object in action and you can
686:50 - return something called and within
686:53 - object it's expecting to have a method
686:55 - called destroy so this is optional you
686:58 - can return this or not as you can see
686:59 - earlier we didn't return anything still
687:01 - works right so over here you can console
687:06 - log something where it's destroyed
687:10 - which means that
687:13 - which means that this node itself is
687:15 - being removed from a Dom
687:17 - right so this will be called when it's
687:19 - being removed so let's take a look at an
687:21 - example of
687:23 - um how this is being used right so over
687:26 - here I have a checkbox
687:28 - uh which which I check and uncheck will
687:32 - show uh I use with an if block so check
687:36 - and uncheck will show this div over here
687:38 - right so in this diff I use an action
687:42 - called action
687:43 - so um this high should be called when
687:46 - this div is added to the Dom and this
687:49 - Destroyer should be called when it's
687:50 - being removed right so let's see I'm
687:54 - gonna Zoom a bit on the console and I'm
687:55 - going to click so when it once I click
687:58 - it's on the down you'll see that it's
688:00 - called high with the note itself and
688:02 - when I unchecked it was removed and it
688:04 - will call the buy function right so this
688:07 - way you can know when the element is
688:10 - being added and being removed
688:12 - right so early on I mentioned that
688:15 - action itself has a couple of parameters
688:18 - so the first one is a node which is the
688:20 - element itself and it actually takes in
688:22 - two parameters so one is the node the
688:24 - second one is called the params
688:27 - right so params so what params does is
688:30 - that actually in an action you can pass
688:32 - parameters to the next one you can do it
688:35 - by uh some like this right so it's like
688:39 - imagine this in attribute this is like
688:41 - the value of the attribute so you can
688:43 - pass in anything over here you can pass
688:45 - in something probably like the name as a
688:48 - variable you can pass it a string
688:50 - because pass in a number over here I'm
688:53 - going to pass it name right so here in
688:55 - the console log I'm going to just
688:56 - console log out params as you can see
688:59 - really the name has the value of wool so
689:01 - over here you can see wall in the
689:04 - console let me Zoom it up a bit and you
689:06 - can see it clearly
689:09 - okay so let me clear this and run this
689:11 - again
689:12 - right so you can see the node and the
689:14 - world over here
689:16 - right so what you can do with it is that
689:18 - now you have access on both things you
689:21 - can play with a note right so for
689:22 - example I want to say no dot inner HTML
689:25 - equals params immediately once I run
689:29 - this action you can see that the notes
689:31 - in a HTML is changed to params right so
689:35 - um this is this is very powerful and I'm
689:38 - going to show you what you can do with
689:40 - it in the next video so over right now
689:43 - well what we have learned so far is that
689:45 - actions is nothing but an action uh
689:48 - sorry but a function that you can call
689:50 - uh and it's like a life cycle method or
689:53 - event for your action for your elements
689:57 - so when the element is added to the Dom
690:00 - you actually caught and when it's
690:01 - removed the destroyed method we call
690:04 - right and an action can text in the
690:07 - parameters like this and it will be
690:09 - appear as a second parameter to action
690:12 - right and then you can play with
690:13 - anything with the note and the
690:15 - parameters you like
690:19 - so in the last video I shared about what
690:21 - is spelled actions right and some of you
690:24 - may ask like for example you have a
690:26 - variable then you pass in as a parmes of
690:28 - the action and you want to change that
690:32 - um the parameters and how will that
690:35 - reflect how do you get that parameters
690:37 - will be reflected in your action
690:39 - right so probably a bit big but let me
690:42 - try to explain this to you with um
690:46 - example in this Rebel so over here you
690:49 - have an input box
690:51 - that is buying the value of the inputs
690:53 - is bind to this variable called name and
690:56 - I'm going to show a name over here as
690:58 - well so when I type in over here say I
691:00 - change the world to spelled you can see
691:03 - the name changes to spelled right
691:06 - and I'm using this name variable in this
691:09 - action called the how action
691:11 - right
691:13 - but this action is being only called
691:16 - once when this element is added to the
691:18 - Dom right and the REM and the destroy
691:22 - will be called when it's removed from
691:23 - the Dom right okay but I want this name
691:27 - variable to be always in sync with this
691:30 - action
691:31 - I'll put it the other way I want this
691:33 - action to know that whenever these
691:36 - problems change I'm going to do
691:37 - something
691:39 - because in this example in this action
691:40 - I'm setting the inner HTML as the params
691:43 - which is a string that I'm passing in
691:46 - and it's only being called once when
691:49 - this Dom is this div is added to the Dom
691:51 - which is when it's say whoa when the
691:54 - value is wool right but then
691:57 - um when I change this variable which is
692:00 - the pumps I want to get notified as well
692:02 - right how do you do that
692:05 - well actually this object that you've
692:08 - written besides you can return a method
692:10 - called destroy you can actually return
692:12 - another method called updates right and
692:15 - this updates methods will also will
692:18 - contains the new params right so this
692:21 - function will always be called
692:24 - whenever this problems change right so
692:28 - update because see I'm trying to say
692:30 - updates and new params I'm going to show
692:33 - you
692:35 - over here right so gonna when I type I'm
692:39 - gonna change something you're gonna see
692:40 - that update is being called with world
692:43 - one as I'm typing right
692:46 - so this way I can change it uh I can use
692:49 - this and updates my next demo if I want
692:52 - to right so I'm gonna oh come here and
692:55 - say this equals to new params
692:58 - right so whenever I change
693:01 - this inner HTML updates as well right
693:03 - that's cool right that's slick so that's
693:07 - that's that you have it right
693:09 - um so let me conclude it even more even
693:12 - better which is that an action is a
693:15 - function that will be called uh when
693:18 - your element is added to the Dom
693:20 - right you can pass in the parameters
693:22 - which will be the second parameters to
693:24 - your action right if you if your action
693:27 - returns an object and if that object has
693:30 - a method called update that updates
693:33 - matter will be called every time when
693:34 - your palms change
693:36 - and if that return object contains a
693:39 - method called destroy that method
693:42 - destroy method will be called when your
693:43 - element is removed from the Dom right so
693:46 - any of updates are destroyed or return
693:49 - object is optional right once if you
693:52 - have it you will it'll be called right
693:54 - so it's very simple you to use an action
693:56 - you call a use
693:58 - directive so use a colon and the action
694:01 - name equals to parameter right a
694:04 - parameter can be numbers objects and
694:06 - strings and so on and so forth
694:11 - today I'm gonna answer a hypothetical
694:13 - question what happens if felt does not
694:16 - have a feature called sveld actions
694:20 - why do I ask this question well because
694:23 - um to me in my opinion the best way to
694:26 - understand what a feature is how this
694:29 - feature works is to think about what if
694:31 - there is no such feature
694:34 - right so there will be most likely two
694:36 - outcomes right one is that you can't do
694:40 - anything at all so which means that this
694:42 - feature is necessary it's essential to
694:45 - help you to achieve something without it
694:47 - it's not it's impossible
694:50 - a different outcome would be
694:53 - um you can still do what you want but
694:56 - probably it will be slightly harder to
694:59 - achieve what you want maybe when you
695:01 - want to write code you'll be more
695:02 - complex uh more boilerplate code or
695:06 - maybe you have to do a roundabout way to
695:09 - in order to achieve something right so
695:11 - which means that this kind of feature
695:12 - actually does not change the essential
695:15 - of like
695:17 - like ability or possibility of doing
695:19 - something but actually helps you to
695:21 - accomplish something in a much simpler
695:25 - or easier way
695:26 - right so
695:28 - so what about spelled actions is it like
695:31 - an enabler enabling you to accomplish
695:33 - something that is not previously
695:35 - possible or it's like a facilitator like
695:39 - allows you to accomplish something in a
695:42 - much simpler and easier way to think
695:44 - about well let's find out
695:47 - so over here I have
695:49 - um
695:50 - a simple application
695:53 - where basically I have an input over
695:56 - here and a counter all right so if you
695:59 - can as you can see over here this
696:01 - counter uses an action called counter
696:04 - so how it works is that whenever I click
696:07 - on this button
696:08 - we with the one the button with the
696:10 - action applied when I click on it the
696:13 - button will increment by once and this
696:16 - number which apparently uh
696:18 - coincidentally it's this number one
696:21 - right so if you see that this number is
696:23 - bind by this input and it's being passed
696:26 - into this action so if I try to
696:28 - increment this to say 5 then whenever I
696:31 - click on it it will increment by five so
696:34 - if I change it to 10 then increment by
696:36 - 10.
696:37 - all right so this is
696:39 - um so all this is the doing of the
696:42 - action right so your action over here
696:44 - let's take a look quick look at how this
696:47 - action is being defined so this counter
696:49 - action uh itself defines a variable
696:52 - called count and it will update the text
696:54 - which is to up to set the buttons in a
696:58 - HTML to be the count the value of the
697:00 - count
697:01 - right and then it adds an event
697:03 - listeners so whenever you click your
697:05 - increments account and then update the
697:07 - text
697:09 - over here returns an object which has
697:11 - two methods one is updates which is to
697:14 - updates whenever the increments is
697:16 - changed you will update to that new
697:17 - increment so this uh if you remember in
697:19 - the last video this is this parameter
697:22 - that we pass in so we pass in this
697:23 - number so that will be our increment so
697:26 - whenever this change this update
697:28 - function will be called which means that
697:30 - your increment the value of increments
697:32 - will update as well and the destroy will
697:35 - remove the event listeners
697:37 - right so we take a look again at this
697:40 - function
697:41 - I mean the the behavior of this action
697:43 - isn't that complex right so it's like
697:46 - once you have this um button you
697:49 - probably would want to um add an event
697:51 - listener and
697:54 - and then uh probably you keep
697:57 - um uh knowing that what is the value of
698:01 - the counter and then uh probably with
698:03 - which you
698:07 - um whenever you increment you you
698:10 - uh increments with a new number right so
698:14 - I probably want to do now is to rewrite
698:16 - this without actions right because we
698:20 - are trying to answer like what if
698:21 - there's no action so what would we have
698:24 - to write
698:25 - so yes if we don't have an action then
698:29 - probably we have other things that is
698:31 - available to us right
698:33 - um we can use buying
698:35 - this
698:37 - uh to get the instance of the button and
698:40 - we can use that to add event listeners
698:42 - or we can also use
698:44 - um on click to register for event
698:47 - listener and then um
698:50 - and then do the job right so what I'm
698:53 - trying to do now is instead use bind
698:56 - this the button
698:58 - that I have a reason of doing this but
699:01 - probably uh you will it will be more
699:03 - obvious later on
699:06 - right so if I use
699:10 - okay so here I'm going to define a
699:12 - button variable so whenever bind this
699:15 - when this button is on the screen it
699:18 - will make sure the ref this variable
699:21 - will be updated with the reference of
699:22 - that button
699:23 - right which means that um
699:26 - over here when we have like on Mount
699:31 - we will have access to the instance of
699:33 - the button right so over here we can do
699:36 - the things that we have done over here
699:38 - which is
699:40 - um
699:42 - register a non-click listener on the
699:45 - pattern
699:47 - and then
699:49 - we can return
699:51 - a function which is being will be called
699:53 - when this component is being destroyed
699:56 - um
699:57 - with this remove event listener
700:02 - right
700:05 - and we're going to Define on click
700:08 - which is over here we can copy it over
700:11 - here so on click
700:13 - uh we'll update account so we need to
700:17 - Define count as well we're going to
700:19 - Define it here
700:20 - and you're gonna update text so we need
700:23 - to Define update text as well
700:26 - so we're just going to change this to
700:28 - button
700:29 - and then
700:32 - lastly we'll import on Mount which is
700:36 - from svelt
700:42 - right and lastly we also need to call
700:44 - update text to set the
700:48 - text to one so count is starting with
700:52 - zero right so now we are not using this
700:55 - counter at all let me collapse this this
700:58 - is not being used anywhere
701:01 - um
701:02 - and supposed to work but let's see
701:05 - what is missing
701:07 - okay increment is not defined oh sorry
701:09 - so we need to Define a variable
701:10 - increment as well
701:15 - right so
701:18 - uh increment should be equal to number
701:20 - okay so now we need to update the value
701:23 - of increments right so increments is
701:25 - actually
701:26 - um the value num over here
701:28 - so probably we can
701:30 - maybe do something like this
701:33 - increment
701:34 - equals number
701:38 - okay num sorry
701:40 - now in Click we can increment with
701:42 - updates
701:44 - it works right
701:46 - so
701:48 - not big no big deal right you can
701:50 - achieve this without using action so
701:52 - what's so cool about action right
701:54 - well how about this okay so instead of
701:57 - having one button we have two buttons
702:00 - which both of them using
702:02 - uh counter right
702:12 - so I'm just use counter on both buttons
702:14 - so
702:16 - um let me comment out this first
702:20 - oh nevermind let me keep this uh so that
702:24 - this button still works so you the first
702:26 - two button is the one that with actions
702:28 - so right now if I try to click on both
702:32 - the increments independently right and
702:36 - when I change this both of them
702:38 - increments independently uh the counts
702:41 - within this button is not the same as
702:43 - this right so
702:46 - how do you do that with
702:49 - um how do you reuse this uh buying this
702:51 - button right can you do that well I mean
702:57 - um so probably we instead of having one
703:01 - button variable probably we need two
703:04 - button variables and then probably we
703:06 - have to copy this over
703:09 - um and then replace all of them as
703:11 - button two
703:13 - right I guess that would work
703:17 - so replace all of them as button two
703:23 - um
703:24 - and then counts probably you need
703:26 - account two for button two
703:29 - right on click as on click tool update
703:32 - text tool
703:34 - well
703:40 - let's see what else is missing count uh
703:43 - increment update text to
703:47 - no update text 2 over here
703:51 - um up to text to text to
703:55 - on click two
703:58 - this is two
704:05 - I'm gonna have two buttons
704:09 - right
704:11 - um what else is missing let's see
704:13 - button to count to
704:16 - okay I think we are missing button
704:18 - one
704:21 - um not really oh okay so here instead of
704:24 - returning probably we
704:27 - have it on both sides
704:30 - right and yeah we can do that as well
704:33 - they're both incrementing
704:35 - um
704:36 - independently right as you can see over
704:39 - here probably we have to duplicate like
704:41 - the instance of the button in order to
704:44 - like try to replicate this but if you're
704:47 - using actions right um the but the
704:50 - element itself the counts itself they
704:53 - are all encapsulated within your action
704:55 - so every time when you create when
704:58 - you're using one actions all these
705:00 - variables are locked in in the scope of
705:02 - that action and it's only
705:04 - um available for your instance of this
705:07 - element so you can call it multiple
705:09 - times on you can apply this action on
705:11 - multiple times on multiple elements each
705:14 - of them will have their own scoped
705:16 - accounts update tags and everything else
705:20 - right so
705:22 - um yeah that is one thing that
705:24 - it's a bit inconvenient if you are doing
705:26 - without
705:28 - um action but is that the deal breaker
705:32 - well not let's see right so the next
705:36 - thing we're going to do here is that
705:37 - we're going to add a check box
705:42 - okay so over here I'm gonna have input
705:44 - called
705:45 - type check box
705:48 - let's say a show
705:51 - a wrap it with a label
705:57 - so
705:59 - buttons
706:05 - and over here I'm going to bind this
706:07 - checked with a variable called checked
706:11 - which I'm going to Define it over here
706:12 - let's check it goes through
706:16 - right and I'm gonna say
706:19 - if checked
706:24 - I'm gonna show this right if if check is
706:27 - true then I'm going to show the buttons
706:29 - if not I'm going to hide the buttons
706:31 - show hide show and hide right
706:34 - immediately you can you can see if I
706:36 - checked and uncheck a few times
706:38 - um
706:39 - because this is only being executed on
706:42 - Mount therefore uh as you can see here
706:45 - once we recreate this button as because
706:49 - we create a button without in a Content
706:51 - the button is now without any content
706:53 - right
706:55 - um so probably something we can change
706:57 - over here uh is
707:01 - to use ons uh use after updates in
707:05 - States
707:08 - right probably that
707:11 - would work
707:12 - not really right so what why what
707:15 - happened right so once you hide the
707:18 - buttons so after update will be called
707:21 - every time when there is a new uh when
707:25 - there's an updates right so when you uh
707:27 - so when you when you show the buttons
707:30 - you'll run after update when you hide it
707:32 - you'll run again and when this time when
707:34 - you run again
707:36 - um you are trying to run execute this
707:37 - thing right which is button two and
707:39 - event listener and button two now is
707:41 - undefined because the button is removed
707:44 - from the Dom
707:45 - right so
707:47 - yeah that is something that we probably
707:49 - will have to take note of
707:51 - right so we're gonna say if button two
707:54 - only we add event listener
707:58 - right and
708:00 - if not so which means that button 2 is
708:03 - hidden then we are going to remove event
708:07 - listener for the button too
708:12 - right and same thing goes for button one
708:15 - and two button one right so over here uh
708:20 - button button button
708:23 - and as probably at this point of time
708:27 - probably you might have already noticed
708:29 - is that having returning this previously
708:33 - during an on Mount is not that accurate
708:37 - right because this button this actually
708:39 - creates and removed
708:42 - um on on change
708:44 - which is right now where we are changing
708:47 - something
708:48 - which means that um
708:50 - if we hide this button we should also
708:52 - remove event listener from the button
708:55 - but if we are using it inside and on
708:58 - Mount it will only be in caught when the
709:01 - whole component is being removed
709:04 - so if within this component is still
709:06 - here and you're just toggling showing
709:09 - and hiding the button well it will not
709:12 - call this remove event listener
709:15 - right so that is something that you
709:18 - might want to take note of
709:20 - um probably you have already noticed so
709:22 - can I remove this now
709:23 - okay so show and hide right same thing
709:27 - goes with the update text probably you
709:30 - can't call it right now
709:31 - uh we're gonna call it
709:34 - only when the button 2 is available
709:37 - over here as well
709:40 - um button to
709:45 - button one
709:47 - all right show height
709:49 - uh hold on remove your lens off now
709:54 - okay so now
709:57 - it's something uh
710:03 - okay so now a button is actually
710:06 - undefined when you you hide it right
710:09 - which means that um
710:11 - see now
710:13 - we we if the button is there which means
710:16 - that uh we want to add an event listener
710:18 - right but when you hide it which means
710:20 - that the button is right now is already
710:22 - undefined so how do we remove event
710:24 - listener if we can't even get the
710:26 - instance of the button
710:28 - well probably we can do something like
710:32 - um assign the button on
710:36 - the event remove event listeners as um
710:40 - uh let's see
710:44 - right so probably we can still do it but
710:47 - I think at this point you notice that
710:50 - it's not that easy anymore while having
710:53 - let me comment this while
710:55 - having um
710:58 - okay let me collapse this and comment
711:00 - this as well
711:06 - while having actions everything still
711:09 - works pretty much the same if I
711:12 - change this they are still incremented
711:15 - individually
711:17 - if I change this
711:19 - still works
711:21 - right
711:22 - still works perfectly fine
711:25 - right so let's see should we continue on
711:29 - fixing this
711:31 - um I think we can still try a bit
711:34 - so let's get back to just with one
711:37 - button
711:38 - and with that one button I am going to
711:42 - uh resurrect this part of the code
711:48 - so probably maybe let's don't do it with
711:51 - after updates maybe that's not the right
711:55 - um let's see whether it's the right way
711:57 - of doing it
711:59 - okay so imagine we don't have this right
712:01 - just without this probably we can go
712:03 - away with a lot of things
712:05 - oh let's see event remove event listener
712:09 - um count counts button button
712:14 - okay
712:17 - now click2 is undefined ah okay
712:20 - and click
712:23 - okay so I think we can still get away
712:25 - with
712:26 - um without remove even listener but
712:29 - um you know that it's not entirely
712:31 - exactly like the one with the actions
712:34 - right and now if we try to increment
712:36 - this
712:38 - um
712:39 - okay so see that this is not quite
712:43 - working
712:45 - um let's see what happened
712:50 - oh
712:52 - I think my whole screen hang
712:55 - uh
712:57 - let's see what's going on
713:04 - probably runs into some sort of infinite
713:07 - Loop somewhere
713:19 - okay I think I'm gonna give up and I'm
713:21 - gonna okay uh refresh
713:26 - okay but it just come back let's try
713:30 - again
713:31 - no it died so
713:34 - I'm gonna give up on this one let's just
713:37 - refresh again and hope for the best
713:41 - well as you can see over here it's it's
713:43 - not that simple to do this without an
713:47 - action right
713:50 - um so probably it's for the best that
713:52 - you have an action
713:54 - um to help you achieve like something
713:56 - such simple as adding an event listener
714:00 - um and
714:02 - exit page
714:05 - having an event listener and then you
714:07 - know increments whenever that this is
714:10 - incremented right
714:13 - so let's shall we just try one more time
714:16 - this time around let's do it do
714:19 - something different
714:21 - I'm gonna
714:22 - same thing goes we're gonna have binders
714:24 - with button
714:27 - this time around I'm probably trying to
714:29 - probe it in a different approach which
714:32 - is to use
714:34 - reactive declaration
714:37 - right so if pattern is
714:40 - so this will be this will execute when
714:46 - um any time went so I'm if I'm using a
714:49 - button variable in here which means that
714:51 - this whole X statement will be execute
714:53 - anytime when this button variable change
714:56 - so if button is available then we are
715:00 - going to add event listener
715:05 - right click and call on click
715:16 - right on click then we're gonna say
715:18 - buttons uh okay so we also need a
715:22 - variable called count so let's count
715:24 - equals to zero
715:26 - and count should add plus num
715:31 - and then we need to set the HTML of the
715:33 - button equals to count
715:36 - right so now uh we also need to do the
715:40 - same thing over here
715:42 - so now when we click
715:44 - uh it will work right as we increment
715:48 - this and we click again it will continue
715:50 - to work then again the deal breaker
715:53 - which is what if we have a checkbox
715:58 - that was a true initially
716:01 - and I'm going to say
716:04 - okay have
716:07 - new line up here new line over here
716:11 - input type
716:14 - check box
716:18 - um
716:21 - um bind checked
716:24 - also checked
716:27 - okay so now I'm gonna
716:29 - and have an if statement if check
716:35 - this show this
716:39 - um and see what I can still increments
716:41 - yep it works
716:43 - I increment this number is still works
716:46 - as fine
716:48 - well
716:50 - um
716:52 - but actually not quite so if I console
716:54 - log over here
716:56 - on click
717:01 - um
717:02 - I'm gonna see it
717:07 - oh wait yeah it works right so
717:13 - okay
717:14 - um
717:16 - yeah probably this works now probably we
717:19 - have to think about how we can remove
717:21 - event listener
717:23 - um which is over here
717:25 - let's see
717:26 - remove event listener
717:29 - when button is defined uh but but then
717:34 - but then you don't have the reference of
717:36 - this button so what we're going to do is
717:39 - that
717:40 - um
717:43 - we
717:45 - I'm gonna use before
717:49 - okay I'm gonna stop here because there's
717:53 - no straight easy way if you as if you
717:57 - follow with me so far you may really
717:59 - realize that there's no straight easy
718:00 - way of doing it uh without going even
718:04 - more detail so probably I feel like
718:07 - probably we have adding more Logics over
718:09 - here and
718:12 - and I think we have achieved our goal so
718:15 - far is to demonstrate that how what
718:17 - happens if you don't have an actions is
718:21 - felt uh probably you have to write all
718:23 - this uh
718:25 - quotes just to achieve something where I
718:28 - think it's much easier to reason about
718:30 - and read about if you have an action
718:33 - and so first thing is it's much harder
718:36 - to write this second is that it's
718:39 - um you can easily reuse this the same
718:42 - action over and over and over if you
718:45 - without it you probably would have to
718:48 - copy paste your code multiple times
718:50 - having multiple references of the same
718:52 - uh having multiple variables reference
718:56 - to the different elements
719:00 - today I'm going to talk about how you
719:02 - can use felt actions to integrate with a
719:05 - UI Library
719:07 - right so swell actions is a very
719:10 - powerful construct in svelt as I
719:13 - mentioned in the previous video If you
719:14 - haven't watched them the links is over
719:17 - here okay click them watch them right so
719:21 - today I'm going to show you one of the
719:23 - many ways of
719:26 - one after sorry one of those cool ways
719:30 - that you can use actions for which is to
719:32 - integrate with a UI Library where it
719:35 - does not have to be UI but it can be any
719:38 - library but most likely you would want
719:40 - to use it with a UI Library so what is a
719:43 - UI library and that I am referring to
719:46 - and how do you integrate it in svelts
719:49 - using actions
719:51 - okay so maybe let's let's have a story
719:54 - first right so the background of this is
719:56 - that maybe one day you want to build a
719:59 - date picker right you know those kind of
720:01 - date picker when you click on the button
720:03 - you see a calendar you can swipe to look
720:05 - at different months of the calendar and
720:08 - then choose a few dates and then you
720:11 - select a date
720:12 - right
720:13 - um probably there's a built-in one but
720:14 - you feel you don't like the look or feel
720:17 - of the browser defaults uh calendar
720:19 - input date input you want to build your
720:22 - own but you can't so you find you look
720:26 - online Google you find some libraries or
720:29 - someone recommend you this very cool UI
720:32 - library that allows you to create a date
720:34 - picker so because you're using us you're
720:38 - writing a swell application
720:40 - um will that work with svelte right I
720:44 - mean usually if you work with other
720:46 - libraries usually what you do is that if
720:48 - you're using react you look for react
720:50 - date picker if you're looking at view
720:52 - you look for view date picker right so
720:55 - is there a spell date picker and if
720:57 - there's no and you find some date picker
720:59 - it says that zero dependencies and
721:03 - very good how do you integrate it with
721:05 - svelt and today we're going to show you
721:06 - how right so I'm I before this video I
721:11 - Google around and I found this date
721:14 - picker which says that it is
721:16 - um lightweight and Powerful
721:19 - lightweight and powerful and it's like
721:21 - lean extensible and does not depend on
721:24 - any Library which is great right because
721:27 - which means that you just install this
721:28 - you don't install come with all the
721:30 - bells and results of every other library
721:32 - is not the weight of all the other
721:34 - libraries you just need this Library
721:35 - that's all
721:37 - so you'll look around and you see like
721:40 - getting started which is how do you
721:42 - start using this it says install this
721:44 - library and probably add this in your
721:48 - HTML
721:49 - so to include the CSS and then to use it
721:53 - you import flat picker and you wrap it
721:57 - around an element and that element
721:59 - itself will become a date picker how
722:01 - easy is that so how do you do it in
722:04 - sales actions it's Felts using actions
722:07 - well uh so now first thing is I'm gonna
722:09 - have like I should say we need an
722:11 - element right so I'm going to use
722:13 - probably a button
722:16 - date picker
722:19 - so now when you click on button nothing
722:21 - happens right so next thing is we are
722:24 - going to
722:27 - um so to use this first thing is you
722:28 - include this CSS right so this probably
722:32 - want to add it in a hit of the HTML so
722:35 - I'm going to use felt hit
722:38 - angular copy paste this thing in
722:40 - right the Cs is loaded you can't you
722:43 - can't see it but it's there okay next
722:45 - thing is we're gonna have a script text
722:48 - and we're going to import flat picker
722:52 - right one thing cool about this Rebel is
722:53 - that you can import any Library uh we
722:56 - will try to find it from the unpackaged
722:59 - CDN where it will download exactly what
723:02 - you would download from the npm right so
723:04 - I have this flat picker and now how do I
723:09 - um
723:10 - integrate this with this button right so
723:12 - one way you can do is you can bind this
723:14 - button
723:16 - and uh
723:19 - and then when button is defined
723:22 - probably you call Flat picker with the
723:24 - button right
723:28 - uh button so we're gonna say let's
723:30 - button
723:32 - right and that's it
723:35 - so you click you have a date picker
723:36 - that's cool
723:39 - um now next thing is
723:40 - um well I'm showing I'm buying this
723:43 - right so
723:45 - why not actions right yeah we can do it
723:48 - with actions as well let's see how how
723:50 - it will look like in actions right so I
723:52 - can comment this out and I'm gonna
723:54 - comment this out sorry let me copy this
723:57 - and comment this out so that we can have
724:00 - it compare side by side so now
724:02 - instead of buying this I'm going to say
724:04 - use date picker
724:06 - and this will be a function
724:11 - restricting an element
724:14 - I'm gonna call Flat picker
724:17 - elements right
724:20 - this works as well
724:22 - right nicely done so
724:25 - um whether to use this or use an action
724:28 - I mean it's pretty much similar is there
724:31 - a difference well if you are thinking
724:34 - about this question you should watch my
724:36 - other video over here the link will be
724:39 - over here which is what happens if we
724:42 - don't have a feature instead called
724:43 - scrapped actions how would you have to
724:45 - go about it
724:46 - right um it talks about how you have to
724:49 - work around it and let me show you one
724:52 - thing that it's not easily done if you
724:53 - don't have action is that I can copy
724:55 - this paste this in
724:57 - I have two buttons with typical each of
725:00 - them can pick individual dates while
725:03 - having this I will have to Define uh two
725:06 - buttons and then bind it to a different
725:08 - button variable and do it this way right
725:11 - smart much hassle
725:14 - um
725:15 - so I'm not going to do it anymore right
725:17 - so I'm just remove this forget about it
725:19 - and focus on this right
725:22 - so next thing is let's see so let's look
725:25 - at the examples and see how we can use
725:27 - with this flat picker
725:30 - and as you read through it you realize
725:32 - that you can pass in some sort of
725:35 - options
725:36 - right some sort of configurations so
725:40 - let's look at what is the configurations
725:42 - so one of those configurations would be
725:45 - say uh
725:47 - let's see let's see
725:49 - um
725:50 - the previous Arrow
725:52 - right um
725:54 - wait let's see maybe Showman's number of
725:57 - months to be shown at the same time
725:58 - right show months
726:00 - so
726:02 - how cool if is if you can just pass in
726:06 - an object in here instead and it says
726:08 - show month is three
726:11 - and how cool is that if you can do it
726:13 - this way so this is config and you can
726:16 - call it like this way
726:18 - so the first button has show months of
726:21 - three months second button has none so
726:23 - probably by default is one so over here
726:25 - you can see you have three months
726:28 - this one you have only one
726:31 - right three months one right this is
726:34 - it's that easy right and this month
726:38 - itself can be a variable right so if I
726:40 - say inputs bind um
726:43 - value equals to show months
726:49 - uh type number
726:52 - and show months is up say let's
726:56 - equals to 3
726:59 - use it over here
727:01 - so if I change this I want to able to
727:04 - change
727:05 - number of months to be shown so let's
727:07 - change to set one well it's not working
727:11 - because you need to implement update as
727:13 - well because you know this
727:15 - variable is going this parameter is
727:17 - going to be updated all the time when
727:19 - you change it right so I'm gonna say
727:21 - return
727:22 - um
727:24 - sorry return an object
727:26 - with an updates method
727:29 - so it's the new config over here now and
727:32 - what should we do with a new config
727:34 - right so let's see a flat picker
727:36 - instance probably have some methods that
727:39 - you can call say um to
727:42 - sets options uh is there a setting
727:47 - there is a config
727:50 - configurations
727:52 - set options set
727:56 - okay sets option
727:58 - right so I'm going to say uh this is the
728:01 - calendar
728:03 - and calendar dot sets
728:07 - right so probably you have to read about
728:09 - it in your UI library that you're using
728:12 - and see what other apis I can use can be
728:15 - used to uh
728:19 - uh that can be changed and things like
728:21 - that and you you can update It On Demand
728:24 - using the update method right so now if
728:26 - it's two then you will show two months
728:28 - it's one then only show
728:30 - sorry one month
728:33 - right it only show one month
728:36 - and if it's
728:38 - um six then it will show six months
728:40 - right it's it's it's highly configurable
728:43 - and you can just change it at the whim
728:46 - right you just do it this way
728:48 - so one thing I noticed just now is that
728:50 - probably there's this parameter called
728:52 - open
728:53 - and
728:55 - close right so let's let's try core
728:59 - methods instead in the update function
729:01 - so what that means is that so let's say
729:03 - instead of this uh I'm gonna have an
729:06 - input called type checkbox
729:11 - buy and check
729:14 - equals to variable called checked
729:19 - so let's
729:22 - Okay so
729:25 - I'm gonna pass in this as a parameter
729:27 - instead right so this is like open
729:32 - right so now this is also like this
729:35 - value opened so you see if you change
729:37 - this variable if open
729:40 - then I'm just going to say calendar dot
729:42 - open
729:44 - so this uh this method is something I
729:47 - read from here where you can call open
729:49 - or close
729:52 - um in the API documentation so probably
729:56 - you have to
729:57 - see what
730:00 - all the things that you can do with your
730:02 - UI Library so this is going to tell you
730:05 - that okay see to show you that if I buy
730:07 - this check and then pass it in over here
730:10 - then now when I check and unchecked
730:13 - basically you can control opens and
730:15 - close right changing this or changing
730:17 - this parameter and in terms will be
730:19 - called this update function a method and
730:22 - over here we can call methods of your
730:24 - library instance right and in most cases
730:28 - you probably would have to remember to
730:30 - do to implement the destroy method
730:33 - because in most libraries when you uh
730:36 - when you remove these elements you also
730:40 - remove this button element you also do
730:42 - need to do cleanups right and probably
730:45 - some libraries will provide methods like
730:47 - destroy to clean like all the event
730:49 - listeners and all the stuff right so
730:52 - over here probably you will have to
730:54 - remember to call calendar
730:57 - uh dot destroy as well
731:00 - um but we are not gonna demonstrate how
731:02 - it will take an effect but trust me it
731:05 - will work right remember to clean up
731:07 - whatever you have set up so remember to
731:09 - implement the destroy of your actions so
731:12 - that it will clean it up
731:14 - so um that's all for
731:18 - Implement integrating uh UI Library
731:20 - using swell actions with swelt right
731:23 - integrating a UI library with felt using
731:25 - stealth actions
731:30 - so today I'm going to share with you how
731:32 - you can use swell actions to reuse event
731:35 - listeners to do so I'm going to share
731:37 - with you three examples right so let's
731:41 - take a look at
731:42 - the first example
731:45 - so over here I have an example and a
731:48 - result
731:49 - which you will see the example will be
731:52 - on the left side of the Rebel and the
731:55 - results will be on the right right so
731:57 - what we're going to do here is that
731:58 - we're going to have three examples on
732:01 - using event listeners and I'm gonna
732:04 - rewrite it to use actions to replace
732:07 - them and that will be on the right right
732:10 - so so that we can compare side by side
732:13 - like to make sure that the effect still
732:16 - looks the same but it's Rewritten using
732:19 - actions right and you can then decide on
732:22 - your own whether you prefer to write it
732:24 - with actions or continue to use your
732:26 - event listeners right no judgment over
732:28 - here I'm just going to show you how you
732:30 - can do it
732:32 - so the first example over here let's
732:34 - take a look at the first example so the
732:36 - first example is called a blur on X
732:40 - Escape right which means that I'm
732:42 - informal type over here
732:44 - type something and when I click on the
732:47 - Escape key
732:49 - the input itself will be blur right
732:51 - which is it loses the focus and you can
732:54 - you know like you don't see the blue
732:57 - outline of that input anymore and the
732:59 - cursor is no longer in there it's losing
733:01 - focus so how we can achieve this is that
733:04 - um you can there's multiple ways of
733:07 - doing it right so one way I'm doing it
733:09 - over here is that I'm having an input
733:12 - and I'm bind the inputs to a variable so
733:15 - the ref so this input variable will
733:17 - reference to this uh input element and
733:20 - then I have a key down which uh on key
733:23 - down will listen to key down and in the
733:25 - event handler over here
733:27 - I will check if the key is escaped then
733:30 - I will blur the input right so far so
733:34 - good
733:35 - so one of the things that I mentioned
733:37 - earlier if you haven't seen this video
733:40 - about why uh like what's so good about
733:43 - swell actions you can click over here
733:45 - the links over here is that one of the
733:48 - things that you can do is that you can
733:49 - reuse uh
733:51 - it's it makes you easier to reuse um
733:55 - actions on the same elements on multiple
733:57 - elements so in this case if I want to
734:00 - have multiple inputs and want to blur uh
734:04 - let multiple inputs then probably I
734:07 - would have to make it like input two
734:09 - input 3 and you know uh probably over
734:13 - like blood Escape 2 and 3 which
734:16 - uh would have to blur a different input
734:21 - right probably I would have to do that
734:24 - instead to achieve this effect then as
734:27 - you can see over here then there will be
734:30 - um duplication of code over here I would
734:32 - have to create input one input two and
734:36 - input 3. all right so that uh I can
734:39 - escape from the first input from second
734:41 - input and from the third input
734:43 - right so you know do I have to do this
734:48 - well if you're smart enough you would
734:50 - you might notice something well uh
734:53 - you don't have to declare a variable
734:55 - called inputs in order to blur each of
734:57 - them well you can you can get like event
735:00 - dot current Target
735:03 - right and then you can just remove all
735:05 - this and you can reuse the Sim events
735:09 - listener get do away with this
735:12 - uh bind this
735:14 - you can still achieve the same effect
735:18 - I skip I skipped and Escape right you
735:22 - can still achieve that
735:23 - do you need action
735:27 - do you need it well um
735:30 - yeah I'm not here to pass judgment on
735:33 - whether you should use or not but I'm
735:35 - here to show you how you can rewrite
735:37 - this to use actions and then you can
735:40 - reuse that action on multiple places
735:43 - where you don't have to import or so
735:48 - instead of importing this event list
735:50 - Handler or writing it multiple times now
735:53 - you are instead you are importing that
735:55 - actions and reuse it multiple times
735:58 - right so over here I'm gonna create a
736:01 - result
736:02 - one
736:03 - last felt I'm going to copy this over
736:08 - and I'm going to import from result one
736:10 - instead
736:11 - right so over here on the right is the
736:13 - result
736:15 - so I'm gonna change this to use actions
736:18 - instead of event handler
736:22 - right so over here I'm gonna say
736:24 - function so an action is a function so
736:28 - I'm going to say I'm gonna call it uh
736:31 - blur on Escape function below action
736:35 - and this function an action function
736:37 - takes in a node
736:39 - and param right in this case we don't
736:42 - really need a parameter so we just leave
736:43 - it like this
736:44 - right and then what we can do next is
736:47 - that it should
736:49 - um
736:51 - return an object which could be called
736:54 - when you are updating the parameter or
736:57 - you are destroying that element right so
737:00 - right here we have if we were using
737:02 - actions instead so I'm going to just use
737:04 - Action Now use this
737:08 - you can copy paste over multiple times
737:12 - so if you use an action instead of event
737:14 - listener then you will have to add event
737:17 - listeners yourself
737:19 - right which means that I will probably
737:20 - have to say no dot add event listener
737:25 - key down
737:27 - and then I'm gonna have the same events
737:29 - over here so I'm gonna copy this over
737:32 - and have it here instead
737:39 - all right so blur on Escape let me pass
737:42 - it over here
737:43 - I'm gonna re return a destroy
737:48 - I'm gonna remove event listener instance
737:53 - all right so this is the same way this
737:57 - will achieve the same effect of using an
737:59 - event listener instead right so let's
738:02 - see whether it still works I'll click
738:04 - Escape type type type Escape type type
738:07 - Escape right so
738:10 - um
738:11 - yeah so over here example if you're
738:13 - using an event handler now you're using
738:16 - um
738:17 - an action instead and you have to
738:20 - register and unlisten the event listener
738:23 - right so let's move on to see example
738:26 - two
738:27 - right so we're gonna change this to
738:29 - example two and let's see what we have
738:32 - for example two
738:34 - so the second example over here is that
738:37 - um we have
738:39 - uh same thing goes we bind inputs to a
738:43 - tree inputs element
738:45 - and on key down I'm going to call next
738:48 - on enter meaning when I type something
738:49 - when I click on the enter key it should
738:52 - go to the next input
738:53 - click on the next inputs right so how it
738:56 - works is that I bind these three
738:58 - variable input one two three and then I
739:01 - on each of the event handler when I
739:03 - click enter I'm going to focus on the
739:05 - next inputs
739:08 - right so over here I'm going to do this
739:10 - multiple times
739:12 - um
739:13 - is there a way that we can instead of
739:16 - so in the previous example we see that
739:19 - we if we we don't have to
739:23 - create multiple event handlers when we
739:25 - can somehow assess like the current
739:28 - Target of the event so that we don't
739:30 - have to reference any
739:32 - elements that we assign outside of this
739:35 - event handler then we can reuse this
739:37 - event handler right so in this case we
739:39 - are referencing input 2 but 3 in this
739:41 - event handler and input 3 in on the uh
739:45 - this event handler right so the first
739:46 - second one is the focus and the third
739:48 - one is that when I click enter because
739:50 - there's no next uh event input then I
739:52 - will have to blur myself right so
739:56 - stay away that you can
739:59 - um somehow pass this inputs as an uh
740:03 - parameter of this event handler or
740:05 - something like that right is there a way
740:06 - well remember that action sticks in not
740:10 - just the element itself also perms right
740:12 - so probably you can use that instead and
740:15 - probably with that maybe we can just
740:18 - need one event handler so we're gonna do
740:20 - that right now
740:24 - two and I have copies it over here and
740:27 - I'm gonna use reference to result 2 in
740:29 - States
740:31 - right so over here
740:33 - I'm gonna create is called uh next on
740:37 - enter action
740:39 - that takes in the elements
740:42 - and a param
740:45 - so same similar things we're going to
740:47 - copy one of the event handler
740:51 - and we're gonna say um
740:55 - elements that add events
740:59 - listener
741:01 - so copy this event name key down and
741:04 - gonna call uh next on enter
741:09 - so we're going to re rename this to next
741:11 - on enter
741:13 - and also I need to remember to remove
741:14 - event listener because now we are adding
741:17 - on ourselves then we have to do the
741:19 - cleanup ourselves as well let's say
741:21 - return and then call it destroy
741:25 - I'm gonna copy this line
741:28 - paste it in except that I need to call
741:31 - remove instead of ADD
741:35 - okay so with with this I'm going to say
741:38 - uh okay so now we're going to change
741:40 - this right we can pass it as a param
741:42 - what it means is that now uh instead of
741:45 - on key down I'm gonna say use this
741:47 - I'm going to pass in as oh sorry
741:50 - uh
741:52 - over here use this I'm going to pass in
741:55 - inputs two right which is that I need to
741:58 - focus on input 2 on on next on action
742:01 - over here gonna focus on
742:03 - input tree
742:06 - and over here we're gonna
742:09 - just not passing anything so not passing
742:12 - anything meaning you have to blur
742:13 - yourself right so we can Define that
742:15 - ourselves
742:16 - um so meaning this will this uh input is
742:21 - the params of that action so which is
742:23 - this so now I'm going to say if param
742:27 - then param dot Focus
742:30 - right
742:31 - else
742:33 - okay now next so okay probably a better
742:36 - naming would be instead of called Parma
742:38 - gonna say next element
742:41 - uh
742:42 - to focus
742:45 - it's going to say here we're gonna paste
742:47 - it in place it in and then if not there
742:50 - will be event dot current Target Doppler
742:54 - right so now I can remove all these
742:56 - three event handlers well just focus on
742:58 - one big action that does a job right so
743:01 - I'm gonna type something enter wait wait
743:04 - wait not working uh event listener
743:11 - next element of focus
743:14 - wait
743:16 - wait hold on okay so next element to
743:19 - focus
743:21 - next on enter
743:23 - destroy element remove event is now
743:27 - see okay so I'm gonna try and see um
743:31 - console log next element to focus
743:40 - which is undefined okay
743:43 - over hold on so this one is input two
743:48 - ah okay
743:50 - so this action will is called on this
743:53 - input on the
743:56 - so now now we find the bug and then we
743:58 - can fix it right so which means that
744:00 - when you call this action we will bind
744:02 - so the action
744:05 - um is happen when you are mounting this
744:08 - component which happens uh where so
744:11 - initially which what happens is that the
744:15 - when we are mounting these elements
744:17 - input to 1 2 3 are all undefined right
744:21 - and once we mounted all everything so so
744:24 - this is being called on when we're
744:26 - mounting it right so this is passing in
744:28 - undefined over here
744:30 - um and then after we mounted all the
744:32 - three inputs we the bind this will
744:35 - update the variable input one two three
744:37 - to the reference of that elements right
744:39 - but we didn't and this will be updated
744:41 - as well but to get that updates we need
744:46 - to call and up we need to add update
744:48 - method over here
744:50 - which is the
744:52 - like we call next next element to focus
744:59 - which is the next uh next element to
745:01 - focus that pass in I'm gonna say uh this
745:04 - equals to this
745:06 - right
745:08 - so now
745:09 - probably will work
745:11 - so I'm going to say enter it will focus
745:12 - on next one right so this will since
745:15 - this action uh on mounts you receive
745:17 - undefined because we haven't defined
745:19 - input one two three and once it's
745:21 - mounted uh they call the action first
745:23 - and then it's passing undefined right
745:25 - and then The Binding bind this will be
745:28 - will updates the variable one two three
745:30 - to the reference of these three inputs
745:32 - and then uh because input one two three
745:35 - is changed it will notify these two
745:38 - actions as well telling them that since
745:39 - they have the update method it will call
745:41 - it to tell you that okay what's the new
745:43 - reference of this parameter right so we
745:46 - have it we updates to this next element
745:48 - to focus and now so we assign it to the
745:51 - next element to focus so now the next
745:53 - element to focus is updated with the new
745:55 - reference
745:56 - so when we type something and click
745:57 - enter it will focus and then it will
745:59 - blur right which works as expected
746:04 - so um so a
746:06 - so now using actions save us some uh
746:10 - some code like we don't we can reuse all
746:13 - the event listeners with one action
746:15 - where we can have like variables passed
746:18 - in like the parameters to the action
746:22 - well
746:24 - is that like a limitation of an event
746:27 - handler well not
746:29 - it is but not really right so if you
746:32 - look at over here
746:34 - one thing you can do is that we can
746:36 - write in instead of having like an event
746:38 - handler that defines that uses a
746:40 - variable input 2 over here you can write
746:43 - a higher order function
746:45 - what that means is that we can hire a
746:47 - function
746:48 - uh
746:50 - create next on enter so so we write a
746:54 - function that returns us this event
746:58 - handler
746:59 - right why we want to do that is that
747:02 - we can
747:04 - create this function that returns us and
747:06 - it can take in parameters so you can
747:08 - text in a parameter called like input
747:09 - and then we can use it over here instead
747:13 - right so input could be again uh
747:17 - the next inputs are undefined right so
747:20 - I'm going to say if input
747:22 - then it's inputs.focus
747:26 - and else I'm going to be event
747:29 - so this is the same thing that we have
747:31 - done to the actions earlier on so even
747:34 - the current Target dot blur
747:39 - all right so so now instead we can
747:42 - remove all these three Event Center
747:44 - rather we have a
747:47 - function that creates a new event
747:49 - handler all every time
747:51 - and we're going to call it over here
747:53 - instead
747:55 - input one
747:58 - oh sorry input 2 and this will be input
748:02 - 3
748:04 - and this will be
748:05 - no inputs right so once again we can try
748:09 - still works still works right
748:13 - so you may ask whether
748:16 - um
748:17 - this is better do it this way or
748:20 - uh using actions right
748:23 - well if you ask me I would prefer to do
748:27 - it using an action and here's my reason
748:29 - why
748:30 - right so if you take a look at over here
748:34 - this event listener which is uh this
748:38 - over here when we pass in an event
748:40 - listen over here it's um
748:42 - this thing is the create next on enter
748:45 - is a function creator that creates a new
748:47 - function every time we call it right so
748:50 - what that means is that
748:53 - we are creating multiple event handlers
748:55 - every time
748:57 - um over over every time when we have a
749:02 - when the input 2 has changed uh the
749:04 - input over here has changed right so so
749:06 - the first time is that input 2 is
749:08 - undefined so this will return us a new
749:10 - function where the input over here is
749:13 - referenced to undefined
749:14 - and then as we mounted all the inputs
749:17 - where we assigned the value of input 2
749:20 - to like reference of the inputs to input
749:23 - 2 then this will get this function will
749:26 - get caught like this expression will be
749:27 - inverted again which means this function
749:29 - will call again with a new input
749:31 - reference and returns us a new function
749:35 - right so every time when we change input
749:37 - 1 2 or 3
749:39 - we will create a new function
749:41 - right is that costly uh I'm not sure but
749:45 - it's definitely something right so in
749:47 - this very simple example probably you
749:50 - don't feel it right on the other hand
749:52 - over here results too
749:54 - uh when we use an action on an element
749:58 - this action will be only called once
750:01 - when we Mount the input
750:03 - and then it will return us two methods
750:06 - and then we just call that method right
750:07 - so whenever input 2 is changing to maybe
750:10 - pointing to different references what it
750:12 - does is only call this uh method which
750:15 - is the updates and it will do an
750:17 - assignment to update that reference
750:18 - right so there's no it does not create
750:21 - new functions or create anything new
750:23 - right so that that's the difference of
750:25 - using an action versus like um maybe a
750:28 - higher order a function Creator over
750:30 - here in States
750:32 - right so um probably in this example the
750:36 - differences is negligible and if you do
750:39 - it well
750:41 - um namely like if you make sure that you
750:43 - don't have any memory leaks probably new
750:46 - functions they created the old function
750:48 - will be Memory garbage collected and it
750:51 - does not feel much difference to your
750:53 - app anyway
750:54 - right but just for the information it's
750:57 - that's the differences that's the
750:58 - difference between using an event
751:00 - handler and action
751:02 - right so we have seen two examples and
751:04 - let's move on to the last example which
751:06 - is example three so I'm going to change
751:09 - this to example 3 and the same time this
751:11 - as well so I'm just gonna copy all this
751:14 - and create a new file called result
751:16 - three
751:18 - and paste all of them in and let's take
751:21 - a look at what we have for example three
751:24 - so in example three is what I call a
751:27 - secret inputs uh
751:29 - combo uh
751:32 - inputs so what it means is that I can
751:36 - have
751:37 - um
751:37 - so I I'm listening on key down and if I
751:41 - typed some sort of secret combo like
751:44 - Arrow up down up down left right left
751:45 - right so I'm going to do now up down up
751:47 - down left right left right I'll unlock a
751:50 - secret right
751:52 - so how it works is that I have this
751:55 - secret key over here I can Define it
751:59 - um and then on key down I will push
752:02 - whatever I click on and do an array
752:05 - called keys
752:06 - and then
752:07 - um
752:08 - also and make sure that uh if I stop
752:11 - typing for maybe uh one second then I
752:14 - will just clear that array right so I
752:17 - need to click fast enough that in
752:19 - between the keys does not um
752:22 - um lasted more than one second right so
752:25 - at the same time I will so after I click
752:28 - a key I will I will set a timeout so
752:30 - that I will clear but at the same time
752:32 - if I type another key then I will clear
752:35 - that timeout meaning um
752:38 - which means that sorry which means that
752:40 - the timeouts will be cleared and then uh
752:43 - it will not this this callback will not
752:46 - be called you will not clear a key and
752:47 - then we'll register a new timeout to
752:49 - clear another in the next one second
752:51 - right so once we type in enough uh
752:56 - keys that it matches the secrets which
753:00 - will just simply do like a rate of join
753:03 - with a comma so all the items in the
753:05 - array will be drawn with a comma and if
753:07 - it matches the secret then it will
753:09 - unlock the the unlock right so
753:14 - so that's that's how the code works
753:16 - right I think I think I need to do
753:18 - something over here which is I need to
753:20 - make sure that uh once I set timer over
753:24 - here and ID equals to now
753:27 - and then I'm only clearing if
753:30 - there's a timeout ID over here instead
753:34 - okay
753:36 - so
753:39 - um let's rewrite this I'm gonna I'm not
753:42 - gonna explain like how you would do it
753:43 - otherwise but
753:45 - I'm gonna ex like show you how I would
753:47 - rewrite this using action
753:50 - and you can judge yourself whether
753:53 - it's better writing and using an action
753:55 - or writing using like event handler like
753:58 - like we've shown earlier right
754:01 - so
754:03 - first thing is we're gonna call this a
754:06 - secret use
754:08 - Secret
754:11 - combo
754:13 - action
754:15 - by the way you don't have to always name
754:16 - your action with ending with an action
754:18 - it's just
754:20 - to let you know that it is selection
754:22 - that's all
754:23 - um
754:26 - I don't usually add that suffix of
754:28 - action right so I've heard I will call
754:31 - so the action will text in an element
754:32 - and probably taken us a params which I
754:37 - would
754:38 - um see let me see what I can do so I
754:41 - will take in the secrets
754:44 - as the param
754:46 - as well as maybe something like a
754:49 - callback function right so if I want to
754:51 - pass in a secret as well as a callback
754:54 - like I want to pass in multiple things
754:56 - then a easier way of doing it is to pass
754:59 - in as a function sorry as an object so I
755:02 - can pass multiple things within a Sim
755:04 - object right so an action will only have
755:05 - two parameters so the second parameters
755:07 - if you want to pass in not just more
755:09 - than one thing then probably you have to
755:11 - pass in as an object that collects all
755:12 - the things it could be an array as well
755:14 - so anything like object or array that
755:17 - has that is like a collection of
755:19 - multiple things that's all right so I'm
755:22 - going to say secrets and a call back
755:27 - and over here I what I'm going to do
755:29 - here secret combo action is I'm gonna
755:31 - add event listener and event
755:35 - listener
755:37 - key down
755:39 - okay and then I'm gonna copy all this
755:42 - thing over here
755:46 - format nicely key Downs are on key down
755:52 - right and then I'm going to return
755:56 - an object where I will have update
756:01 - as well as the destroy
756:04 - so on Destroy I need to remember
756:06 - remember most important thing of all is
756:09 - to remember to remove event listener if
756:12 - you are adding an event listener in an
756:14 - action right remember to clean things up
756:16 - you don't want uh if you do not do that
756:19 - it will memory leak because
756:21 - um it will still listen so your elements
756:23 - itself still listen to some even
756:25 - listeners and probably you couldn't and
756:28 - key down is probably referenced
756:29 - somewhere and you just couldn't garbage
756:32 - collect your elements right so
756:36 - over here let's see
756:39 - um so I'm going to clear I can remove
756:41 - this
756:43 - so the way of using it would be instead
756:45 - I'm going to say use I'm going to say
756:47 - use secret combo action
756:51 - and I'm going to pass in param so I can
756:53 - pass in an object so I'm going to say
756:55 - I'll create that object over here so uh
756:57 - the outer brackets is like whatever you
757:00 - put in a param and then inside I want to
757:02 - pass in objects I create another clear
757:04 - brackets right so over here I have
757:09 - um I'm gonna pass in
757:12 - Secrets which is a small key lower key
757:17 - passing as a secret and
757:21 - then a callback function which is a
757:23 - function
757:25 - and this function will be setting the
757:28 - unlock
757:29 - to
757:31 - true
757:33 - right so
757:35 - now let's update the code over here so
757:39 - this is the secret
757:40 - and this if it matches I'm going to call
757:43 - the Callback
757:46 - right and now uh
757:49 - all these things can be defined inside
757:53 - so it's locked within the scope in a
757:55 - scope it's not leaked out outside you
757:57 - can still Define keys and timeout ID for
758:00 - other users
758:01 - right so now let's see what we have come
758:05 - over here which is the results up down
758:07 - up down left right left right it's not
758:10 - working hold on let's see
758:13 - secret secrets
758:15 - unlock callback
758:18 - okay let's let's see what we have over
758:20 - here uh console log key start drawing
758:25 - come on
758:26 - type in something up down left right
758:29 - left right oh okay it works well it
758:32 - works
758:33 - so
758:34 - um
758:34 - there you have it uh rewr write it using
758:38 - actions
758:40 - right so we can have multiple inputs
758:43 - over here you can have
758:45 - um
758:46 - a different kind of Secrets maybe over
758:49 - here we want to just uh
758:52 - up down six uh three times up down up
758:56 - down up down
758:58 - then this one will be up down up down up
759:00 - down unlock the secret
759:02 - right so um callback
759:05 - um yeah so you have it uh using a secret
759:09 - and a callback
759:12 - today I'm going to share with you how to
759:14 - create events using spelled actions
759:17 - so you may ask me why do I need to
759:20 - create events what do you mean by
759:22 - creating events
759:23 - well
759:25 - you know the last video we talked about
759:27 - how to reuse event listeners using
759:29 - spelled actions and there's this one
759:32 - example that we use in actions to allows
759:36 - us to create like a custom secret unlock
759:39 - inputs which we're gonna see over here
759:43 - so I'm just a recap so if you haven't
759:46 - seen this you can click on the videos
759:48 - link over here on the top right corner
759:52 - and so here's a recap on the examples
759:55 - that we've created so over here we
759:58 - create an actions using secret combo
760:00 - action that takes in two parameters one
760:03 - is a secret one is a callback so in this
760:06 - example we pass we call use secret combo
760:09 - action where we pass in a secret which
760:11 - is a secret combo key and then a
760:13 - callback which is whenever we
760:15 - successfully call this key like press
760:20 - that secret combo Keys the Callback
760:22 - function should be called which will do
760:24 - things that we want to do when it's
760:26 - called right
760:28 - so um nothing wrong about doing it this
760:31 - way but so let me copy this over and go
760:34 - to the results
760:36 - but what if we can
760:39 - have an event listener that listens to a
760:42 - custom event which tells us that the
760:45 - secret is unlocked
760:48 - right so probably we can have like a
760:50 - custom events listener over here which
760:52 - is like we so it's a custom event
760:54 - listener right so we listen to this
760:56 - custom event so we can use on directive
760:59 - to listen to it and the events name so
761:03 - for example like input you can on like a
761:06 - key down key press or you can have on
761:09 - value events listener change but over
761:12 - here we can have our custom event name
761:14 - that we can Define ourselves right so
761:17 - this name probably would be something
761:19 - like since we are using a secret combo
761:21 - action would be like secret combo
761:24 - achieve
761:27 - and since this is a event listener we
761:30 - can pass in an event function so here we
761:33 - say unlock equals true
761:37 - right so uh which means that we don't
761:40 - need a callback function right we can
761:43 - call we can have our secret combo action
761:46 - that looks like this
761:48 - and by adding this action probably we
761:52 - have a custom event that's called secret
761:54 - combo achieve when that event happens
761:58 - the triggers will call this callback
762:00 - function which is to set out on not to
762:02 - be true
762:03 - right if you write it this way you you
762:05 - find it um slightly more elegant than
762:08 - what we have done earlier where we pass
762:09 - in a callback right now we can have like
762:12 - events listener right so this is what I
762:15 - meant by creating an event uh so an
762:18 - action can create events
762:20 - I mean you can create events yourself
762:22 - but we can use actions to create a
762:24 - custom event that is being triggered by
762:27 - a custom trigger right so by for example
762:30 - in this case is when the combo action uh
762:33 - when we when you type in a combo uh in
762:35 - in your input right so how do we do that
762:39 - so over here when so in the existing
762:42 - Hood we pass in a callback which is
762:45 - being called over here so over here is
762:48 - where
762:49 - um we successfully triggered I mean we
762:51 - successfully pressed down the combo Keys
762:54 - which is a callback which we'll call the
762:56 - Callback so now we don't want to get the
762:59 - call back from the uh
763:02 - action or on the other instead you want
763:06 - to
763:07 - um dispatch a custom event so I'm going
763:10 - to say elements dot dispatch
763:13 - events New custom events
763:17 - right and the custom events can have a
763:20 - custom event name which in this case is
763:22 - the secret combo achieved
763:26 - right and that's about it so instead of
763:30 - passing a callback where you pass in the
763:32 - Callback function that we call we just
763:34 - dispatch events and you can decide
763:37 - whether you want to listen to it or not
763:39 - right so having a callback function
763:42 - passed in you probably have to check
763:43 - whether
763:44 - um this callback is uh it's passed in
763:48 - it's a function and then you call it
763:49 - right doing it this way it decouples
763:52 - with like whether you the need of having
763:54 - to pass in the function where you just
763:56 - dispatch events whenever you feel like
763:58 - it and in this case uh and then the user
764:02 - itself will be deciding on its own
764:04 - whether to pass in this and then we do
764:06 - dispatch an action this like it's
764:09 - whether the there's event listener or
764:11 - not it's optional uh so one great thing
764:13 - about it
764:14 - in this case we change it this way and
764:16 - yeah let's try it out so
764:19 - um like in the last video we have uh in
764:22 - the apps itself we have the example and
764:24 - the result which is the example would be
764:26 - the original code that does not create
764:29 - an event and result is the one that
764:30 - creates an event right so this uh is um
764:34 - Rebel will be shared down the link in
764:36 - the description so that you can play
764:38 - around with it right so on the left is
764:40 - the example and on the right is the
764:42 - results which we use the create custom
764:45 - events so let's see whether it works so
764:48 - I'm gonna press in the custom uh combo
764:51 - key which is up down up down left right
764:54 - left right right so up down up down left
764:56 - right left right secret unlocked right
764:59 - so that's so easy right
765:02 - yeah so let's take a look at another
765:05 - example and so just to like drill you in
765:08 - this like way of uh creating custom
765:10 - events using actions
765:13 - right in this example example two we're
765:15 - gonna change to example two and result 2
765:18 - which is the same I'm going to create a
765:20 - file called result two dots felt
765:25 - right and over here
765:28 - example two
765:30 - it's what I call a triple click event
765:34 - right so over here I can open up the
765:37 - console
765:38 - so I I sent an on click event listener
765:42 - and when I click and I have to record
765:44 - account so when I click I'll in clip
765:47 - increments accounts right so when I
765:49 - click three times in quick succession
765:51 - then it will be triggered like it will
765:53 - call like console triple click
765:55 - right so how do you know that it's being
765:57 - clicked fast enough in succession uh
766:00 - basically we set a timeout
766:02 - so I'm just like arbitrary time in this
766:06 - case it's 800 milliseconds So within
766:08 - eight milliseconds if you haven't
766:10 - figured another click then you will
766:12 - reset the counts back to zero right so
766:15 - what I do is I record this timeout ID so
766:17 - whenever the next time I click on it
766:18 - I'll clear this time up so it won't
766:20 - reset my account and at the same time I
766:22 - create a new timeout so that I can
766:24 - record I can see whether the next time
766:26 - out next click and then next next
766:28 - subsequent click whether they are within
766:30 - 800 milliseconds as well
766:33 - so if I click once there's no effects if
766:35 - I click twice no effect Okay click one
766:38 - two three and you'll see a triple click
766:40 - right so
766:43 - um in like in elements you don't have an
766:46 - event called triple click but what uh
766:49 - how good it is if you can so a copy over
766:52 - the result if you can have some you can
766:54 - write something like uh
766:58 - on Triple click
767:01 - right what how good is it that you can
767:04 - do this and you can console log triple
767:08 - click
767:10 - right
767:13 - how good is this to have have this right
767:16 - so how what can you do probably you can
767:20 - write an
767:22 - um an action right so that that's like
767:25 - the aim of this video you can write an
767:26 - action
767:27 - and you can apply that action on this
767:29 - button and once you apply that action
767:32 - uh amazingly it has this triple okay try
767:35 - click triple sorry let me
767:38 - triple click event and then you can
767:40 - listen to and you can pass in the
767:42 - Callback function
767:44 - so that is what the action that we are
767:48 - going to use that we're going to write
767:49 - we're going to say use triple
767:53 - click action
767:56 - so not all so so I'm just adding a
767:59 - suffix of action to this so that you
768:01 - know that it is an action uh it's not a
768:04 - mandatory thing to name your action that
768:06 - ends with an action got nothing to do
768:08 - it's just you just need to be a plain
768:10 - function and then you just can and then
768:11 - you can pass it into the use directive
768:14 - all right so I'm gonna call Triple click
768:16 - action
768:18 - and this will give me an important
768:20 - element
768:22 - so over here I'm going to copy over the
768:24 - code over that I've written over here
768:27 - uh over here
768:30 - and over here
768:33 - as well as this on click
768:35 - right you're gonna paste it in
768:40 - okay so I paste everything in and then I
768:44 - need to remember to up uh the elements
768:47 - that add events listener
768:51 - click
768:52 - on click and when I add event listener I
768:56 - need to always remember to
768:59 - um I remove events listener on Destroy
769:03 - so that you remember to clean it up
769:07 - let's say elements remove event listener
769:14 - event listener yeah okay so yeah so you
769:18 - have this action and hopefully so
769:22 - to to have this triple cook events you
769:25 - just need this triple click action that
769:27 - apply to the button and now when you
769:29 - click the button three times you get
769:30 - Triple click
769:32 - yay so there you have it you create an
769:35 - action events using swell actions right
769:38 - so
769:40 - with cell actions you can enhance your
769:43 - elements so that it can dispatch any
769:46 - kind of events where you can listen to
769:48 - them right so I believe that if you
769:52 - visit spell rebel I sorry spell tutorial
769:56 - on actions
769:59 - um the one that they introduce about
770:01 - actions which is this Panama as you can
770:04 - see here you also in this example is
770:07 - also uh where once you add this Panama
770:10 - action you
770:13 - magically have this pen start pen move
770:17 - and pen and event which you can listen
770:19 - to and react to it
770:24 - today I'm gonna share with you something
770:26 - that I feel that you should know about
770:28 - spelled actions something that is
770:30 - important but you may not even notice
770:33 - about until you run into some kind of
770:36 - bugs so
770:37 - um what I'm going to share with you
770:39 - today is about the order of sveld
770:41 - actions
770:43 - so let's take a look at this example
770:44 - that I prepared for you
770:46 - so in this example we have um two
770:49 - variables one called value before action
770:52 - and the other call Value after actions
770:54 - and you will see why because over here I
770:58 - have two inputs input one and input two
771:01 - one on the left one on the right uh the
771:03 - difference is that the the one on the
771:06 - right on the left the value we bind
771:09 - using a value before action and then we
771:11 - apply an action use uppercase and the
771:15 - other inputs next the second input is
771:17 - that we use an action first and then we
771:19 - bind the value value after action right
771:22 - so
771:23 - you may ask me whether
771:25 - wait is it is the order important in in
771:29 - like buying and use
771:32 - um well that's what I'm going to share
771:35 - with you so let's before that on the
771:38 - action itself uppercase
771:40 - uh is very straightforward I think
771:44 - um which is it listens and inputs events
771:47 - on the element and then destroy and to
771:50 - remove it so in this event listener what
771:52 - you do is then you get the value of that
771:55 - element and then you set it to its
771:57 - uppercase value
771:59 - right so
772:01 - yeah and then in this over here we're
772:03 - gonna say I'm gonna show the value
772:05 - before action and the value after action
772:07 - so that you can compare
772:08 - the two of them
772:10 - so what do you think about the order of
772:12 - actions does it matter that you apply an
772:15 - action before you bind it or you bind
772:17 - first and then your plan action
772:19 - well it does matter right so or else
772:22 - that wouldn't be in need to video this
772:25 - right so over here I'm gonna pull it
772:28 - over and I'm gonna type so right now I'm
772:30 - on caps lock off so I'm not on in any
772:33 - caps lock I'm going to type ASDF let's
772:36 - say a
772:37 - s d f as you can see when I type
772:43 - the the last character is always
772:45 - lowercase
772:47 - right so I'm trying to do again a s d f
772:52 - that's because whenever type
772:55 - um the bind will get that value first uh
772:59 - so uh why when I type I type in a small
773:02 - letter A
773:04 - so that that the value before action
773:07 - will get that value but then an action
773:09 - applied later on the bind because it
773:12 - comes later on in the order and that's
773:15 - when you change it to an uppercase right
773:17 - so can I type so right now I have
773:19 - uppercase a I'm going to type with s so
773:21 - it will applique a and lowercase s which
773:25 - is the value that I get from The Binding
773:27 - and so the bind get first and then an
773:31 - uppercase uh action will apply and then
773:34 - a change that my action the value of the
773:37 - inputs to be an uppercase right that's
773:39 - how you see that
773:41 - um it's always lowercase on the last
773:43 - letter because I'm typing in a lowercase
773:46 - right if I apply an action before the
773:49 - bind
773:50 - then the action will comes first before
773:52 - the bind
773:54 - right so I the same thing I'm going to
773:56 - type ASDF in lowercase but notice that
773:59 - uh whenever I type the value after
774:03 - action is always in full uppercase right
774:07 - that's because we change it to uppercase
774:09 - first and then you get you update the
774:11 - buying value right so the order does
774:13 - matter in terms of the in the attributes
774:15 - in the terms of when you apply that
774:18 - action
774:20 - right so
774:22 - um you may ask me
774:23 - um
774:24 - uh like is there a cash on cash on this
774:27 - right so that
774:29 - um so first thing is that yes the order
774:32 - is always applied in the order of
774:35 - um The Binding I mean in order of how
774:38 - you declare it in the attribute list
774:39 - right and and to make this uh example
774:43 - works is that I know that bind value
774:47 - actually listens to an event listener on
774:50 - input
774:51 - so you you listened so an event listener
774:54 - the input event listener always adds
774:57 - um
774:58 - always being triggered in the first come
775:00 - first serve on uh first in first out
775:02 - order or first come first serve order so
775:04 - uh the buying get applies first so the
775:07 - event listener for the buying gets added
775:09 - first and then the event listener for
775:11 - the actions to apply it later on because
775:13 - it's applied later on right so and then
775:16 - when you trigger the inputs
775:18 - um the bind event listeners get callback
775:20 - get called first and then the actions
775:23 - event listeners get caught later on
775:25 - right so
775:27 - um to demonstrate this if I add um
775:31 - events
775:32 - dot stop immediate propagation
775:37 - basically what it does is that it will
775:39 - stop the propagation of that event to
775:41 - other event listeners that listening to
775:44 - the same element
775:46 - what happens is that you'll notice that
775:48 - this buy will no longer get the value of
775:51 - the inputs because it's listening to
775:52 - inputs events listener but then it's uh
775:56 - what the uppercase will register first
775:58 - and then stop it from stop from it to be
776:01 - propagated to the other event listeners
776:03 - right so if I'm going to try over here
776:06 - everything still works like normal but
776:09 - you want to try over here you'll see
776:11 - that the buying value no longer gets its
776:13 - value right so
776:15 - um I not sure when you need this but
776:18 - this is something very important and
776:20 - your actions are there uh within the
776:23 - attribute list is important so it it
776:26 - works the same thing as applying the ons
776:28 - event listener as well so all uh on use
776:33 - and bind the orders are important which
776:35 - come first and which comes later are
776:37 - important so that um
776:40 - if you're listening to the same event
776:42 - listeners or changing the elements at
776:45 - the same time probably the the one that
776:49 - registers earlier will have effect
776:50 - earlier before the one that registers
776:53 - later on
776:56 - let's talk about some examples of using
776:58 - spelled actions and today we're going to
777:01 - look at one example which is use click
777:04 - outside
777:05 - so you may have seen some applications
777:08 - that has models or pop-up and when you
777:11 - click outside of the model uh it may do
777:15 - a few things one is maybe prompt you
777:17 - that are you sure you're gonna quit or
777:19 - you just close that pop-up itself so
777:24 - we are going to achieve that using an
777:27 - actions instruct
777:29 - so as you can see over here we have a
777:31 - div that is called a class model which
777:34 - we just add like some paddings and
777:36 - border so you can see that that is like
777:39 - the region of the model
777:41 - and we're gonna add a action an action
777:45 - called click outside
777:48 - and we can decide to do something that
777:52 - we want about it right so but first
777:54 - let's have
777:55 - um the action so action is nothing but a
778:00 - function that takes in two parameters
778:02 - one is the elements which is these
778:04 - elements that we we call the actions
778:06 - with as well as some parameters right so
778:10 - if we pass in some parameters over here
778:12 - this will be available as the params
778:15 - um so a few ways you can do this so
778:17 - usually before we start anything we
778:20 - probably want to decide or design how
778:22 - the actions will behave right so on use
778:25 - click outside we can maybe a few ways of
778:29 - we can do this one is probably we pass
778:31 - in um callback so when you click outside
778:34 - this is a callback function that will be
778:38 - called right so
778:41 - click
778:43 - I would say
778:45 - right so this params will be a function
778:47 - that you just pass in
778:50 - um or you can use click outside and then
778:53 - probably you know pass in something like
778:57 - um
778:59 - where in
779:02 - uh we can where we can once we use click
779:05 - outside probably we have a new event
779:07 - that we can listen to right for example
779:09 - on click outside
779:12 - so this is uh if you are not sure about
779:14 - what is this probably you can take a
779:17 - look at my previous videos over here on
779:20 - the top right corner where I basically
779:22 - talk about how you can use actions to
779:25 - create events right so
779:28 - um like once you add these actions then
779:30 - this element itself will have a new
779:34 - event that we can listen to probably
779:36 - called click outside I mean we can name
779:38 - anything we want right but in this case
779:40 - I guess I mean click outside will only
779:43 - needs one parameter so probably instead
779:46 - of having it as
779:49 - uh like kind of decoupled using an event
779:52 - probably in this case I just want to
779:55 - pass that function is as a parameter
779:58 - right so now
780:00 - um let's go down to how we're going to
780:02 - implement this action right action is a
780:05 - function and it also returns uh which
780:08 - which will be called when this div is
780:10 - mounted where the element is the div
780:12 - that is being passing and the parameters
780:14 - is that function so I think I'll just
780:16 - rename this to be callback function
780:19 - right and over here it can return to an
780:22 - object with two methods one is the
780:25 - update
780:27 - um the other one will be called destroy
780:29 - this is when uh the element itself is
780:32 - being removed right update will be
780:34 - called whenever this phone like the
780:37 - comparable parameter is changed right so
780:39 - I'm gonna for the completeness sake I'm
780:41 - going to say this is the Callback the
780:43 - new callback function
780:45 - and I'm going to assign callback equals
780:48 - sorry the new callback function
780:52 - right
780:54 - and now we're gonna add an event
780:56 - listener to the elements right so
780:58 - instead of adding it to the elements
781:00 - what I want to do is adding actually
781:02 - adding it to the document body
781:04 - and when I click anywhere on the body
781:07 - um I I would
781:09 - uh want to be called like so this is the
781:13 - events Handler event
781:14 - right I'm going to listen to the
781:16 - document body so that I can know that
781:17 - it's not just clicking on this element
781:19 - but anywhere within like the documents
781:21 - right so document.body dot at events
781:25 - listener click and on click
781:30 - and every time when we add an event
781:32 - listener we need to remove it in the
781:34 - destroy
781:36 - right anytime when you want repeat again
781:38 - anytime when you want to add an event
781:40 - listeners in an action remember to
781:43 - remove it and the destroy method right
781:45 - clean it up you wouldn't want a stray
781:49 - event listener registered and you know
781:52 - that will cause memory leak
781:54 - so now I've added a click event and I
781:56 - remove a click event now in the click
781:58 - event
781:59 - I can know the event.target which is
782:03 - what I'm clicking at right and if
782:07 - uh these things that the element that
782:09 - I'm clicking at is not within uh the
782:14 - model which is the element that I'm
782:16 - calling with the uh action
782:20 - then uh then I know that it's clicking
782:24 - outside of this element which I will
782:26 - call the Callback function
782:28 - right so let's pull up the console and
782:31 - let's try to click on the model and
782:33 - click outside right you can see as it
782:35 - works
782:36 - right now so you can use this to be
782:39 - probably pass in a function to instead
782:42 - of console out click outside probably
782:43 - you can do something like you know close
782:45 - the models and things like that right so
782:48 - here you go uh creating a click outside
782:50 - actions
782:53 - let's talk about examples of using
782:55 - spelled actions and today we're going to
782:57 - look at one spelled actions which is use
783:00 - tooltip
783:02 - so let's take a look over here and let's
783:04 - let me tell you what is a use tooltip
783:06 - action do
783:08 - right so
783:10 - um you have an element over here in this
783:12 - case maybe hello world let me just
783:14 - change it over like make it simple like
783:16 - Hello World right no Dynamic elements
783:19 - and whatsoever but uh over here we can
783:22 - have
783:22 - um title
783:24 - say
783:25 - um this is hello world and this is a
783:29 - greeting okay
783:30 - right so what happens is that when you
783:33 - hover over hello world
783:35 - wait for me and then you will see a toe
783:37 - tip right this is a built-in uh browser
783:40 - Behavior like when you hover over on an
783:42 - element that has a title it will show
783:44 - you that this is a greeting
783:46 - uh yeah the the title right but what if
783:49 - you want to customize the tooltip you
783:52 - want something different you want you
783:55 - know like something that looks nicer
783:58 - that suits your style or theme of your
784:00 - website
784:01 - right then probably you want to do uh
784:03 - you you want to build your own tooltip
784:06 - right so what you can do over here is
784:09 - that maybe we add like on Hover events
784:12 - like like Mouse over and like when you
784:15 - all hover on top of this
784:17 - elements you want to show like customize
784:20 - nicely built a tooltip element instead
784:23 - of like the default browser Behavior
784:26 - right so that's probably what we want to
784:28 - do over here and that's what I'm going
784:29 - to achieve right so
784:32 - um
784:33 - so that would be having like use tooltip
784:37 - uh action and we're gonna Implement that
784:41 - use tooltip action
784:43 - right so before we actually dive in
784:48 - um to implement this
784:50 - um what I want to do today which is
784:52 - slightly different let's approach this
784:54 - differently right why I want to do this
784:57 - is that there's multiple ways of doing
785:00 - something right uh I can't say that
785:02 - actions is always the best way of doing
785:04 - it
785:05 - um you know some some other ways may be
785:07 - better than using actions right so uh
785:10 - you you would never know which one is
785:12 - better right it comes with probably a
785:14 - bit of experience and probably a bit of
785:16 - like gut feeling as well as like what
785:19 - kind of stylistic how way that you
785:21 - prefer to write instead of the other
785:24 - so what I'm going to do today is I'm
785:27 - going to try something different which
785:28 - is we're going to approach this by use
785:30 - writing it as a component a tooltip
785:33 - component
785:34 - and then
785:36 - we will refactor it a bit to convert
785:39 - that component into an action
785:41 - and then hopefully by the end of it you
785:44 - will see like side by side two different
785:45 - kind of two codes side by side and you
785:48 - compare yourself whether you prefer the
785:51 - way of writing it as a component or do
785:53 - it as action
785:55 - right so let's go in and take a look
785:58 - okay to start writing as a component I
786:01 - will start with a tooltip component
786:04 - oops sorry
786:07 - 20 plus results
786:09 - so
786:10 - um so before I implement this again I
786:13 - will have to imagine how I would use
786:15 - this tooltip component right so probably
786:19 - I would have like a tooltip
786:24 - um that wraps around
786:27 - the inner content right so probably I
786:30 - have over here a tooltip component and
786:32 - within it is like the hello world
786:37 - and in a tooltip component probably I
786:40 - have a props
786:41 - um called title and that is like this is
786:44 - a greeting
786:46 - right so
786:48 - um tooltip will wrap around this hello
786:49 - world whatever it is you can have like
786:51 - multiple divs multiple like all kinds of
786:54 - different kind of children elements in
786:55 - it it will wrap around it and then
786:58 - whenever you hover on those elements it
787:02 - will show you a tooltip called
787:04 - uh type the title which is this is a
787:06 - greeting
787:08 - so to do this I'm going to start with
787:10 - having a script that has a props call
787:13 - Title
787:14 - probably I just defaulted to empty
787:16 - string
787:18 - um
787:18 - right so this is how this is what we're
787:21 - being passing in and then we will render
787:24 - whatever it is as a slot right we'll
787:28 - call it as a default slot so whatever is
787:30 - inside the tooltip component will be
787:32 - rendered in here
787:34 - and to add event listener probably will
787:37 - have to wrap around with a div I mean
787:41 - because
787:43 - um you can't add a directive on you
787:45 - can't add event listener to slots like
787:47 - say on Mouse over
787:49 - uh
787:51 - uh yeah you can't so if I import it you
787:53 - will see the error now
788:00 - yep you can't have directives on the
788:02 - tooltip and this is because you know a
788:06 - slot over here can have can be this text
788:09 - element can be having can have multiple
788:12 - divs and all the stuff right you you
788:15 - wouldn't know like which of these
788:18 - elements needs to be applied with that
788:20 - action or you're going to add apply to
788:22 - all of the elements right
788:24 - um I mean it's not impossible but it's
788:26 - not implemented right now so
788:29 - you know probably you can go and
788:31 - implement it right so as far as we are
788:35 - doing right now in uh version 3.31.2
788:41 - right this is not possible so we will
788:43 - have to wrap it with a div and
788:46 - apply that
788:48 - over here
788:50 - uh so on Mouse over
788:53 - and we are going to have a mouse over
788:56 - event
788:57 - and then we were going to listen to okay
789:00 - so we're gonna listen to three different
789:01 - kind of events one is mouse over so that
789:03 - we know that um
789:05 - uh it's hover on on top of it and then
789:09 - we are going to listen to on Mouse Leaf
789:12 - so that we know that uh
789:16 - uh the mouse is left the element itself
789:19 - so that we need to remove that
789:21 - um
789:22 - remove that tooltip right and over here
789:25 - we are going to have uh based on the
789:28 - condition which is is Harvard
789:31 - I'm gonna show a tooltip which we can
789:34 - style if you want so we're going to call
789:36 - div and then over here is we're going to
789:40 - render like the title in here
789:43 - right
789:44 - and okay so over here we're gonna Define
789:48 - all these three because like you know
789:50 - spell is complaining about them let's
789:52 - define uh is Harvard
789:54 - is false by default uh function on mouse
789:59 - mouse over
790:02 - gonna set is Harvard
790:06 - to true
790:08 - uh Mouse leaf
790:13 - is Harvard is false
790:19 - okay and over here we can start a bit on
790:23 - our
790:25 - you know this tooltip so what I'm going
790:27 - to do here is I'm gonna put some border
790:30 - so that you know that it's there
790:33 - uh
790:35 - um position it's gonna be absolute
790:39 - um and I'm gonna so that you know it
790:42 - will replace that right where your mouse
790:44 - is hover on too right
790:46 - um
790:47 - yeah I think that's for now uh probably
790:51 - background would be white
790:53 - so that you know back back black uh
790:57 - border white background and yeah maybe
791:00 - adding some padding as well four pixels
791:02 - okay so we're done with here I'm gonna
791:05 - show this a tooltip component
791:09 - so I'm going to copy this over
791:11 - title
791:13 - I'm gonna remove this
791:16 - I'm going to call tooltip
791:20 - right so um
791:24 - wait hold on tooltip and we will remove
791:28 - this
791:29 - uh hello world
791:32 - us uh I have two div over here so let me
791:35 - re uh let me add a class for this one
791:38 - called tool tip
791:40 - so right now the the I have two divs so
791:43 - it's applied the style to both of the
791:45 - divs so probably I want to make it more
791:47 - specific make this a tooltip class and
791:51 - states right so when I hover and I hover
791:54 - over you you'll see that this is a
791:56 - greeting and I remove my mouse on Mouse
791:58 - Leaf I will hide that tooltip
792:03 - right so
792:04 - um this itself can be uh as previously
792:08 - what we have is a H1 right so we're
792:10 - going to wrap replace this H1
792:13 - tooltip now yeah so one thing you
792:17 - probably notice is that this is always
792:20 - below the uh wherever we hover on it
792:24 - always show that it's below
792:26 - um the elements right because it's it's
792:29 - written over here like it's right below
792:31 - it so we have set position is absolute
792:34 - but we haven't set like the top and left
792:36 - position so that you know it's it's
792:38 - always right below the mouse position
792:42 - the cursor position when we hover over
792:44 - so I'm going to have Style
792:46 - over here
792:48 - and I think I will gonna have two
792:51 - variables which is one is the X uh
792:54 - and another would be y
792:57 - right and over here we Mouse over where
793:00 - you can take the event and then we can
793:03 - set like x equals to event dot pitch X
793:06 - and Y equals event dot pitch why
793:10 - so what this means is that
793:13 - [Music]
793:13 - um
793:15 - that we have the event object and itself
793:18 - has like uh some properties like pitch X
793:21 - and Pitch y will tell us that the X and
793:24 - Y position within a pitch right so once
793:27 - we have this we probably see like the
793:29 - top
793:30 - uh well based on the X
793:34 - pixel and
793:36 - left sorry top should be Y and then left
793:40 - should be
793:42 - X pixel
793:43 - wait and let's see
793:46 - right it will based on where but once I
793:49 - move around it it's not showing because
793:50 - Mouse uh over will only happens when we
793:54 - move move in right so moving from here
793:57 - you will see it's here but it starts
793:58 - there and I come out hidden and move on
794:01 - here you will see that it's showing here
794:03 - it Stacks here and yeah right so
794:06 - um
794:08 - if I need to move around as my mouse is
794:10 - moving probably what I need to do is add
794:15 - a mouse move event right so Mouse move
794:19 - event
794:20 - and I can do this I can copy this over
794:23 - so Mouse move also have a pitch most
794:27 - move events also have page X and Y so I
794:29 - can constantly update the accent why so
794:32 - here what I want to do is I'm going to
794:33 - have on Mouse move Mouse move
794:38 - right now when I come in hey let's see
794:42 - uh it's it's not showing probably
794:45 - because as uh it's it's constantly
794:47 - rendering right below my cursor and as
794:52 - it's showing right below my cursor
794:54 - um my cursor is now hover on top of uh
794:58 - that tooltip that's why it's uh
795:02 - it's it's like a mouse Leaf because it's
795:04 - leaving from my Hello wall element right
795:07 - so I can solve that by probably add some
795:10 - distance like five over here
795:14 - so that it's not right below my mouse so
795:18 - when I come in yeah it's always five
795:20 - from uh five to the right and to the
795:23 - bottom of like my mouse cursor so yeah
795:26 - looks good right
795:29 - so
795:30 - um probably I'm gonna say now since we
795:34 - can see the tooltip I'm gonna start it
795:36 - slightly nicer right not like a
795:38 - square-ish white background black border
795:41 - kind of thing I'm gonna probably add
795:43 - some border radius
795:47 - 4 pixels
795:49 - um border will probably
795:52 - um
795:53 - slightly grayish maybe uh let's see
795:57 - 888 let's see
796:00 - looks slightly better
796:02 - or not I probably even like lighter or
796:05 - say
796:06 - DDD right slightly lighter and yeah
796:12 - looks nicer I guess right
796:16 - so um this will be okay I think last
796:19 - thing I
796:20 - I probably would like to have some box
796:22 - Shadow like one pixel one pixel
796:25 - pixel DDD
796:28 - some sort of shadow makes it nicer right
796:30 - it's like it stands up right so now we
796:33 - we have this tooltip implemented using a
796:36 - component
796:37 - right
796:39 - um
796:41 - yeah so this is how you would write it
796:43 - as a component and as mentioned earlier
796:46 - we're gonna write it re-implement this
796:49 - whole thing
796:50 - as uh
796:52 - as an action
796:54 - and let's see how we can do it right so
796:58 - we're gonna have like a tool tip JS
797:02 - which is an action an exports function
797:04 - tooltip
797:06 - uh so an action is a function that takes
797:09 - in two parameters and say one is the
797:11 - elements one is the params and again
797:14 - before we even start we're going to
797:16 - decide how we would want to use this
797:18 - action right I think over here you have
797:21 - seen how I
797:23 - Envision how I would be using it will be
797:26 - use tooltip and you might ask me like do
797:30 - I need to pass in a title I mean like no
797:32 - because the title I can get it from the
797:35 - elements attribute called title and I
797:37 - don't even have to pass in like you know
797:40 - as a string over here as a params yeah
797:42 - no point
797:44 - um unless you're telling me that this
797:46 - title can oh can can be changed right so
797:50 - are you able to dynamically read the
797:53 - title from this attribute
797:56 - and if it's not then probably we might
797:59 - want to pass in dynamically over here so
798:01 - that you know when it changes it will
798:03 - inform our tooltip action that it
798:05 - changes then we'll update the tooltip
798:07 - contents and
798:10 - uh in our tooltip right but I think for
798:13 - now we just assume that it won't change
798:15 - so
798:16 - this is clear enough we just use tooltip
798:19 - and we just read it from these elements
798:21 - attributes
798:23 - so
798:25 - which means that I don't really need a
798:27 - paramps right and I don't even need
798:29 - since I don't have param stand I don't
798:32 - even need a
798:34 - an update methods because it will never
798:36 - update because there's no params parents
798:39 - is always undefined so over here I will
798:42 - have to
798:43 - so I have two tips that I use three
798:46 - events right so I would have to do the
798:48 - same thing as well I'm gonna listen to
798:50 - these three events
798:51 - so I'm gonna say element
798:53 - elements that add event
798:57 - listener
798:59 - then Mouse over
799:02 - probably Mouse over over here
799:04 - so I'm gonna be quick Copy all this
799:09 - come here paste
799:12 - paste it in
799:15 - okay and as I mentioned otherwise when
799:19 - you you add an event listeners in and
799:21 - action remember remember to remove them
799:24 - from destroy method so that's what I'm
799:27 - going to do now first even before I
799:29 - implements like Mouse over Mouse leaf
799:31 - and mouse move right remove event
799:33 - listener remove event listener remove
799:36 - event listener okay so now I need to
799:39 - implement Mouse over Mouse move and
799:41 - mouse leaf
799:43 - I'm gonna have it over here
799:47 - um of course uh
799:50 - I mean variables over here will have no
799:52 - effects will not be reactive at
799:54 - whatsoever right
799:56 - um so what mouse over is going to do is
799:59 - going to create a div dynamically and
800:04 - then append to the body and yeah
800:08 - so I'm gonna have a reference of a div
800:10 - here because once we created a div when
800:14 - we leave we're gonna remove it right so
800:17 - what this means is that we probably will
800:18 - have to re-implement this Logic the if
800:22 - logic right so we know that this
800:25 - Hardware has always been triggered by
800:26 - the mouse over and it will be true when
800:30 - it's Mouse over change to True when it's
800:32 - Mouse over and we change to false when
800:34 - it's Mouse Leaf so we can simply like
800:37 - create a div over here
800:39 - and
800:42 - create a div and append it
800:48 - and we can know that we can now receive
800:51 - that to remove it over here which is uh
800:55 - sorry which is document
800:59 - body dot remove child death
801:02 - which means
801:04 - um this uh these two lines and this one
801:08 - line is actually trying to implement
801:09 - this logic of if it's hover right when
801:12 - it's hover the if and the is Harbor uh
801:16 - we are creating a div and it's false and
801:18 - we remove it
801:20 - so we can remove these two lines now
801:23 - so this div right we need to know what
801:27 - is the tooltip title
801:30 - so what we can have over here now is um
801:34 - we're gonna probably
801:36 - see let's see
801:38 - okay we are going to read it from here
801:40 - so div dot Set uh text content
801:47 - I'm gonna do it all this right before
801:49 - the append Channel
801:51 - just that you know we create elements
801:53 - and
801:55 - uh update all of it before we just
801:58 - append it to the body right
802:01 - um it's just like uh there's no
802:04 - particular reason why this has to be
802:05 - this way
802:06 - um it's just my personal habit so we're
802:09 - gonna set the text content as element
802:11 - dot get attribute title
802:15 - right and
802:18 - and then over here uh we need the X and
802:22 - Y position I think div dot style will
802:26 - need something to do because basically
802:29 - we don't have this so we're gonna copy
802:31 - all of it over here and paste it in
802:35 - and then X and Y which is the top and
802:40 - left copy these two as well and paste it
802:43 - right in over here
802:45 - right so this is a
802:48 - so X and Y right so probably this can
802:51 - move it up so that we've defined X and Y
802:55 - uh I guess probably we just remove
802:58 - we just paste this whole thing in over
803:00 - here
803:03 - right so you now you notice that
803:06 - manipulating Dom yourself manually is a
803:09 - bit
803:10 - it's a bit hard isn't it right if you
803:12 - can use components use fill to handle
803:15 - all this for you isn't that great
803:18 - so here I need to also install the top
803:22 - uh
803:24 - I'm gonna update this as well top equals
803:27 - this plus pixel
803:30 - I think better to just make it like a
803:32 - string literal
803:35 - uh oops okay and this as well
803:41 - pixel
803:42 - so div.style dot left
803:47 - right and I believe that's it so I'm
803:53 - gonna uncomment this
803:55 - and I'm gonna import the tooltip
803:57 - function
804:00 - from the tooltip.js
804:05 - and to differentiate this is Hello wall
804:08 - from action and this is Hello wall from
804:11 - components let's see uh whoops create
804:15 - elements a spelling error create element
804:21 - whoops let's see whoops it's not
804:25 - creating uh let's see let's see what is
804:28 - missing position uh
804:30 - [Music]
804:37 - okay this is working this is not
804:42 - let's see
804:44 - I think we can inspect elements a bit to
804:47 - help us out
804:50 - let's see I have a H1 and a div okay
804:54 - when I hover
804:56 - it's not adding something isn't it
805:00 - and does this show any error
805:03 - it's not showing any error as well as in
805:09 - okay I'm gonna just not doing anything
805:13 - on Mouse leaf and
805:17 - okay
805:18 - so it's
805:26 - is it the same area where it's showing
805:29 - and then it's removing console. Mouse
805:31 - the leaf
805:42 - ah I know okay okay so Mouse leaf Mouse
805:49 - move
805:51 - ah this is a
805:53 - kindergarten Mystic and I made it Mouse
805:57 - leaf
805:58 - Mouse move right so let's see
806:01 - this is a greeting
806:03 - this is a greeting so from actions and
806:06 - from
806:07 - components
806:09 - right
806:10 - so um if you're gonna ask me whether
806:13 - which one I'm gonna do and
806:16 - I mean honestly I I don't want to pass
806:19 - any judgment over here you can decide
806:21 - yourself right
806:23 - um doing it in a
806:25 - component is slightly more declarative
806:27 - right you don't have to take care about
806:28 - creating a div and stuff
806:31 - um doing it over a tooltip probably will
806:34 - have to
806:35 - manually add event listeners manually
806:38 - create the div and stuff right
806:43 - um
806:43 - yeah but then uh one thing that we can
806:47 - think about here is that
806:49 - I mean one thing about the component is
806:52 - that you wrapped the whole slot with a
806:56 - div right so that is one extra idea
806:59 - created even your slot will only have
807:02 - one element but using a tooltip is
807:05 - different
807:06 - uh in a way that you will apply it on
807:09 - that element that you want right you
807:12 - don't wrap it with any div so one
807:14 - difference is that probably for example
807:16 - maybe I have a paragraph over here let's
807:19 - say hello story something and I want to
807:22 - have a tooltip right and I'm gonna say
807:27 - it's from felt right and then you note
807:31 - as you notice that this is creating in a
807:33 - new line because it wraps it with a div
807:36 - but if say I want to wrap it in a span
807:41 - you know spend
807:43 - and I use tooltip
807:49 - okay I'm gonna add title so that you can
807:51 - see that it's showing something
807:55 - uh yeah I wouldn't do this as well over
807:59 - here and you know I came from spelled
808:02 - and
808:03 - uh this is inline because you just add
808:06 - it to the span you can choose to use a
808:10 - span instead of using a div
808:12 - well yeah I mean that that is probably
808:15 - one of the side effects of using
808:18 - components because of multiple reasons
808:21 - one is that you can't add event it's not
808:24 - directly on the slot right now
808:26 - and probably then you would stay there
808:29 - oh
808:30 - maybe I need to you know dynamically
808:33 - change this div to it depends on whether
808:35 - I want to spend I want to div you know
808:37 - uh is there Dynamic elements no there's
808:40 - no Dynamic elements for now there's only
808:42 - Dynamic components so uh yeah I can't
808:45 - can I like choose div or something else
808:49 - uh yeah that that's like a
808:52 - uh some limitations that we have using
808:55 - components right now but you don't have
808:57 - it with actions but I wouldn't say
808:59 - action is better because you know
809:00 - writing this all this is kind of a
809:02 - hassle but yeah it up to you choosing
809:06 - yourself right uh there's things that
809:09 - you can do it better with components
809:11 - there are things better with actions and
809:13 - yeah I'm trying to show you side by side
809:16 - so that you can see it yourself and I
809:19 - write it this way like we write it from
809:21 - a component and then I translate the
809:22 - actions you can see that actually
809:25 - that component itself handles a lot of
809:28 - like adding and removing 11 listeners
809:31 - some decorative way of writing something
809:34 - and you have to manually manual uh do it
809:37 - yourself if you write it as an action
809:40 - all right
809:42 - um so one last thing that I want to show
809:44 - you
809:45 - uh is that you can com kind of com
809:48 - combine the both of like Goods of the
809:51 - Both Worlds which is the good of having
809:53 - components writing it declaratively as
809:57 - well as having actions created using
810:00 - connections right so this is one last
810:03 - trick that I have for you which is now
810:05 - I'm gonna say tool tip from action just
810:08 - to differentiate it
810:10 - and this thing is gonna be just a
810:15 - tooltip uh
810:17 - itself so as a script I'm gonna export
810:21 - let's title
810:24 - and over here I'm going to use the title
810:29 - okay and over here I'm gonna have I'm
810:32 - gonna copy all these things over here
810:35 - to apply to the style
810:41 - apply to the diff
810:48 - and then this one right
810:51 - p over
810:53 - Style
810:58 - um
810:59 - this wait
811:02 - let me just remove this I can make it
811:04 - multiple lines so that it's easier to
811:06 - read
811:07 - enter
811:11 - right and then so this should be X and Y
811:17 - I'm gonna export let X export that's y
811:22 - and
811:23 - I'm not sure whether you're guessing
811:25 - where I'm going from basically I'm going
811:27 - to import this x component
811:30 - tool tip from
811:33 - tool
811:34 - tip from action thus Felts
811:38 - right and I'm gonna use this to render
811:42 - uh the component for me
811:46 - meaning I created a div let's see
811:49 - register even I create a div
811:51 - yeah I can create a div
811:53 - and
811:56 - let's see let's see
812:01 - oh no I don't even need to create Thief
812:04 - I can create a let's tooltip
812:10 - and told hey
812:12 - tool tip component
812:16 - so when I say tooltip component equals
812:18 - new tooltip
812:20 - and the props will be
812:24 - title
812:26 - will be the element get title
812:31 - and let's see I am
812:35 - part of me I'm not fairly sure right now
812:38 - uh sveld component API
812:42 - hey Paradox create components components
812:51 - okay options
812:54 - right when I say oh props and the
812:57 - targets right so
813:00 - props they have the title
813:04 - X would be the event pitch X plus five
813:09 - over it I think I have plus five over
813:11 - here so event pitch X
813:14 - y equals to events page y
813:18 - and I'm gonna have uh yeah that's it and
813:23 - targets is the documents.body
813:27 - and that's it I think
813:30 - so I can comment all this away
813:33 - and comment this out
813:36 - and let's see it works whether it works
813:45 - it's kind of work right uh it's just
813:47 - that we didn't remove it uh so
813:51 - yeah it kind of works
813:53 - let's see let's see uh this is position
813:56 - absolute and everything okay it's
813:59 - correct so next is that we need to
814:01 - update whenever we must move and we need
814:03 - to remove when it's not so here I'm
814:06 - going to say tooltip component
814:08 - dot destroy right I think it's called
814:11 - destroy
814:13 - right yeah
814:16 - destroy
814:19 - and here I have this uh
814:23 - I'm going to set a color sets
814:29 - right I can call this sets which is
814:34 - uh tool tip
814:36 - component dot sets
814:39 - let's say um
814:42 - left uh no X and Y right x y
814:45 - so X is the pitch X and Y is the page y
814:52 - right top is the ah top is the Y and
814:56 - left is the X
814:59 - okay so no wonder just now was place it
815:02 - weirdly now you see it's working
815:05 - it's working fine
815:08 - from actions so you can use
815:11 - um
815:12 - you can Define it like as a component
815:14 - and then you can use a spell component
815:16 - within an action right this way
815:19 - um you know what I'm going to copy this
815:21 - over I'm going to say tooltip
815:23 - tool tip using
815:28 - V1 right so that uh
815:33 - uh this file is still around you can oh
815:35 - this is GS file
815:38 - right this file is around you can read
815:41 - it I will send this a rebel in the
815:44 - description so they can play with it you
815:46 - can see the three different versions so
815:49 - I'm going to uncomment all this so that
815:51 - it's it's around for you to
815:53 - play around
815:56 - I yep let me just do it
815:59 - so this is you use you you do it with
816:03 - you know iteratively programmatically
816:05 - create like a div and then you
816:08 - set elements and attributes and styles
816:10 - and stuff you manually update it this
816:13 - way is you utilize a swell component API
816:16 - you create you create a component using
816:20 - Felts you create a tooltip like just a
816:22 - tooltip you can start your very run like
816:25 - all the you know the uh CSS scoping of
816:30 - the style class themes and all these
816:32 - things are there works fine right even
816:35 - like you see X and Y you can like
816:37 - declaratively say X and Y which is the
816:39 - top and left everything works like a
816:41 - component as you wish and then you
816:43 - create a new component instance you can
816:46 - Target anywhere you want probably a body
816:49 - and then you just update it with sets
816:51 - API and you can remove it when you
816:55 - destroy it when you are done with it
816:57 - right this way you kind of get the
816:59 - breath of Best of Both walls right so
817:03 - I'm going to just leave it here for you
817:05 - to decide what is your prefer way of
817:08 - writing
817:12 - let's talk about some examples of using
817:14 - swell actions and today let's take a
817:17 - look at one example which is use
817:19 - viewports
817:21 - so we're going to write one actions that
817:24 - will allow us to uh know that whether an
817:27 - element is has entered the viewports or
817:29 - has exceeded the viewport
817:31 - right so probably will be something a
817:35 - quick and easy and we can take a look at
817:37 - how we can do that using spelled actions
817:39 - so um over here we're gonna have uh one
817:43 - um
817:44 - uh
817:46 - header one tag over here
817:49 - I think I will just name it hello world
817:51 - simply just remove all this and let's
817:55 - gonna have this actions called use
817:58 - viewport
818:00 - and let's design how this use viewport
818:03 - actions would work
818:04 - so I would want this use viewport to be
818:07 - just like this but when um and then we
818:12 - by using this viewport probably it will
818:14 - give me some events like uh like on
818:19 - enter viewport
818:21 - and on exit viewport
818:25 - so having these two actions are two
818:28 - events and I can listen to it and I can
818:31 - handle I can do things with it so right
818:34 - now I'm just gonna print out enter and
818:37 - [Music]
818:39 - exit
818:41 - right
818:43 - so um if this is the first time you're
818:46 - watching my video about spell actions
818:48 - probably you can take a look at this
818:50 - video on the top right corner where I
818:53 - talk about how you can create events
818:54 - using spelled actions
818:56 - so basically this actions view use
818:59 - viewports will create two events which
819:02 - is one is the interview part the other
819:04 - will be exit viewports whenever my
819:06 - elements is entering or exiting the
819:09 - viewport
819:11 - sorry let me adjust this okay so let's
819:15 - implement this action
819:18 - so we're going to create a new file
819:19 - called view use viewport action dot Js
819:25 - and I'm going to Define this use uh this
819:28 - viewport action so the action is a
819:32 - function
819:33 - that takes in and two parameters and
819:36 - elements and the params so in this case
819:38 - we're not expecting to take in any param
819:41 - so I'm going to just leave it as element
819:43 - an issue written an object that has two
819:46 - methods one is updates one is destroy if
819:49 - you're not taking any parameters then
819:51 - you wouldn't expect that the parameters
819:53 - will be updated so we can ignore the
819:55 - update methods but implement the destroy
819:58 - method
820:01 - right so this function method would be
820:03 - called whenever the element is destroyed
820:05 - so we're going to just export default
820:07 - this action and I'm going to import it
820:10 - from here
820:13 - use viewport action.js
820:18 - right so now we are going to implement
820:21 - uh the action
820:23 - right so I'm going to use um
820:26 - an intersection Observer
820:29 - to do it for me so probably I can create
820:31 - and enter section Observer
820:36 - new intersection Observer
820:40 - and the Constructor of intersection
820:43 - Observer should give me uh should be
820:47 - ticking in and callback function
820:49 - whenever and any elements that is
820:51 - observing is enter or exit the viewports
820:54 - right so this is something I will have
820:57 - to fill up later on
820:59 - and the action itself will be this
821:02 - function will be called whenever this
821:04 - element is mounted on the screen and at
821:07 - that time we'll probably want to observe
821:09 - this element to see whether it's
821:11 - entering or exiting the viewport and
821:13 - once this element is removed from the
821:16 - Dom we probably will want to get tell
821:18 - the Observer to unobserve this element
821:23 - right and now let's fill up the Callback
821:27 - function right so this intersection
821:29 - Observer takes in a callback function
821:31 - that will have an entries of element
821:34 - where each of the elements could be
821:36 - either entering or exiting the viewport
821:39 - right so what we need to do is to look
821:42 - through these entries so for each entry
821:47 - and in each entry it has two um
821:51 - properties one is the entry dots is
821:54 - intersecting
821:56 - telling us that whether this element is
821:58 - intersecting which is true if it's
822:01 - within the viewport or false it's not
822:03 - within a viewport right and we have
822:06 - entry.target which is the elements that
822:10 - um is within this entry
822:12 - so what we're going to do here is that
822:15 - we are going to dispatch a custom event
822:18 - when the element on the element itself
822:21 - whenever it's intersecting or
822:24 - depending whether it's intersecting or
822:26 - not right so I'm gonna call this patch
822:30 - event over here I'm going to create a
822:32 - new custom event
822:35 - right so this event will be depending
822:38 - whether it's intersecting or not so I'm
822:40 - going to say I'm going to Define a
822:42 - variable called event name
822:44 - and if it's intersecting which means
822:47 - it's within a viewport I'm gonna
822:49 - dispatch an event called enter viewports
822:52 - which is this one right it will copy it
822:55 - over I'm gonna paste it in here and if
822:57 - it's X it's not which means that it's
823:00 - just exiting the view you copy this
823:02 - which is exit viewport event right so
823:06 - entries will have only the elements that
823:08 - has just triggered the intersection
823:09 - Observer so it's either just entering or
823:12 - just exiting right uh so that's why uh
823:15 - whether to know whether it's existing or
823:17 - enter entering based on this flag and so
823:21 - that will depends on this slide will
823:23 - depends on what events that we're
823:24 - dispatching and I'm going to copy this
823:26 - event nymph I'm going to paste it in the
823:28 - custom events
823:29 - right and I think that's it
823:34 - that's that's easy right
823:37 - um so to test it out what I'm going to
823:39 - do here is I'm going to create some
823:42 - you know some placeholder elements that
823:44 - we can push this uh hello wall header
823:47 - down and then we can scroll up and down
823:50 - to see where the like the intersection
823:52 - Observer is being the enter viewport
823:55 - like exit viewport events being
823:56 - triggered all right so I'm going to
823:58 - create div style if it's like
824:01 - um maybe height of 200 pixels and
824:04 - background of read
824:06 - uh
824:08 - uh I'm gonna copy a few probably just to
824:11 - know that it's different I'm gonna say
824:12 - blue and green
824:15 - go copy a few over this and paste a few
824:19 - at the bottom as well okay so let's take
824:22 - a look at the console right uh once at
824:24 - the first when we adding this
824:28 - um
824:29 - use viewport actions the moment that we
824:31 - start observing probably we need to know
824:33 - also whether the element is entering or
824:35 - exiting or is like within or outside of
824:37 - the viewport so this is when the exit
824:40 - viewport is being triggered the first
824:42 - time
824:43 - right it depends on whether you want it
824:45 - probably you have to handle it so that
824:46 - you know whether you are you should be
824:48 - doing something or not right and as you
824:50 - scroll
824:52 - um
824:53 - once we see that hello was entering the
824:56 - viewport you see that enter
824:57 - and then if we scroll Plastics as it
825:00 - right coming back enter
825:02 - and exit right yeah that's that's pretty
825:06 - easy
825:07 - right I mean that's that's about a use
825:11 - viewport action
825:13 - so before we end this I want to add a
825:16 - few tweaks to my viewpoint actions which
825:20 - is over here as you can see that we
825:22 - created an intersection Observer once we
825:26 - like at the beginning like in the entry
825:28 - of this module uh what I mean is that
825:31 - when I import this action whether or not
825:34 - I'm starting to observe an element uh I
825:37 - am initializing a new intersection
825:39 - Observer at the very beginning right so
825:42 - even I'm not using it at all it's it's
825:44 - been created right
825:47 - um I can either create a new
825:49 - intersection Observer every time for
825:52 - each of the elements that I'm monitoring
825:54 - I could use just one instance of it and
825:58 - I feel like just using one is good
826:00 - because you know it's designed to
826:02 - observing multiple elements at the same
826:04 - time
826:05 - but I wouldn't want to start
826:07 - initializing this in the section
826:09 - Observer uh right at the start right
826:13 - before I'm observing anything probably
826:15 - you can see where I'm coming from what I
826:17 - want is that this intersection Observer
826:19 - is being lazily initialized so let's do
826:23 - that right now
826:24 - so I can Define this intersection
826:27 - Observer
826:29 - um
826:30 - at the very beginning
826:32 - but I would create another function
826:35 - called initialize intersection
826:39 - Observer
826:43 - which I would initialize it over here
826:48 - right and there there's a few ways
826:52 - multiple ways of doing this
826:55 - uh one is that I can
826:57 - keep calling this over here many many
827:00 - times
827:01 - but within this function I would check
827:04 - that if it's defined or return early
827:09 - right another way of doing it would be
827:12 - not checking it over here but you know
827:16 - uh if it's not defined then I will
827:19 - initialize it
827:20 - right I think either way is fine uh it
827:23 - depends on how uh how you like to write
827:28 - it right
827:30 - um but for me my personal preference is
827:32 - that if I'm doing if I name my function
827:35 - called initialize intersection Observer
827:37 - then probably I will check whether it's
827:39 - defined first before I initialize it
827:40 - right it doesn't make sense for me to
827:43 - call this initialize many many times
827:44 - because it should be call it once right
827:47 - but if I want to do it the other way
827:50 - where I check within itself then uh I in
827:55 - this case right
827:57 - um
827:58 - written then I will call it like Ensure
828:05 - intersection Observer initialize is
828:08 - initialized right
828:09 - so it's just me where I'm particular
828:12 - about the name of the function that
828:15 - because it carries some meaning about
828:17 - how you should use it and yeah this is
828:20 - this is my
828:23 - uh pet peeves about names and how it
828:26 - should behaves right so either way if
828:29 - it's unsure then yeah you can call it
828:30 - multiple times and if it's initialized
828:33 - then you return earlier but it probably
828:36 - is not even it's initialize just ensure
828:38 - that intersection Observer right ensure
828:41 - that it's it's there
828:42 - uh but if I call it initialize then I
828:45 - will check if it's initialized first
828:46 - before I call it
828:48 - right this way we have our intersection
828:51 - Observer being lazily initialized so
828:54 - meaning
828:55 - um if you don't use uh the intersection
829:00 - Observer at all uh which means you the
829:03 - element that has a user viewport is not
829:05 - mounted at all then it's not initialized
829:07 - right you are not creating a new
829:09 - instance that is doing nothing right
829:12 - that's lying over there and doing
829:13 - nothing
829:17 - let's talk about some examples using
829:19 - sveld actions and today I'm going to
829:21 - talk about one example which is I'm
829:24 - using swell actions to integrate with
829:27 - this UI Library called popper.js
829:30 - why am I talking about popular.js in
829:33 - specific well um the last time when I
829:36 - wake up did this video about using swell
829:39 - actions to create tooltip
829:41 - um someone commented on Reddit about
829:44 - about if you want to use proper GS which
829:48 - allows you to create Dynamic tooltip
829:50 - that overflows and I click in to look at
829:54 - the implementation of the svelt proper
829:57 - JS by Brian Lee and I find that it's
830:01 - pretty interesting you can take a look
830:03 - at it if you want but we're gonna do it
830:05 - on ourselves uh why is it so interesting
830:08 - is that if you take a look at the proper
830:11 - GS API you import a create popper from
830:15 - proper JS core
830:17 - and you pass two elements in this proper
830:22 - JS API which is the one is the
830:25 - uh the tooltip uh the the elements and
830:28 - then the second one will be the tooltip
830:29 - right so you wrap this API you call this
830:32 - API with two elements and remember when
830:34 - we use actions we only use
830:37 - we're going to apply it on one element
830:39 - so what if you want to apply it to two
830:42 - elements like this proper JS and how
830:44 - would you do it and that is what we are
830:46 - going to try it out in this example
830:49 - right so over here I have my ripple open
830:52 - up let me split it on half so that you
830:56 - know okay look it side by side
831:00 - what we're going to do here is I'm going
831:02 - to copy this whole chunk of code over
831:05 - here and I'm going to create use popper
831:09 - uh dot Js
831:14 - which we're gonna export an action
831:17 - called use popper
831:19 - and an action is a function that takes
831:22 - in an element
831:24 - and a paramps and it returns uh and it
831:28 - could return an object that has like
831:30 - updates and destroy
831:33 - and over here we're going to import the
831:35 - proper JS which we're going to take in
831:38 - um
831:39 - if you call create popper we need to
831:42 - take in two elements right one is the uh
831:46 - the elements and the other one is the
831:48 - tooltip
831:50 - right and probably we also need to copy
831:52 - this which is the placement on top
831:57 - right so now we have a problem right
832:01 - where do we get tooltip right if you use
832:03 - use popper with this element
832:05 - um
832:06 - how do you get the tooltip or whether
832:09 - it's these elements the tooltip but not
832:11 - the elements
832:14 - um yeah so the thing is you can only
832:16 - apply an action to one element and how
832:18 - are we going to
832:21 - do that if
832:24 - if your API requires two elements right
832:27 - so this is something we're going to
832:30 - explore now but in the meantime I'm
832:32 - going to say div and then use use pop
832:34 - use proper
832:36 - right
832:37 - I'm going to add some words over here
832:41 - uh hello world
832:45 - right so tooltip is undefined so how do
832:48 - we do it
832:49 - so um let's think about how you want our
832:53 - API to look like
832:54 - so let's imagine our API
832:57 - so if this is the elements that when we
833:00 - hover will show a tooltip then we
833:03 - probably will also have another element
833:05 - which is the tool tip itself
833:09 - right and
833:12 - we would also want to apply some sort of
833:16 - actions over here
833:18 - right so that probably this is like
833:20 - proper tooltip and this is the proper
833:23 - element
833:24 - in such the way that you know uh this is
833:28 - the elements that when we hover there
833:31 - will show two tip and this is the
833:32 - tooltip itself and so that we can get
833:34 - two elements and then apply the action
833:37 - to it
833:39 - so if we're going to have two elements
833:42 - two actions that are in a pair
833:45 - why don't we create a function that
833:46 - returns these two this pair of action
833:50 - what if we have a function that looks
833:53 - like this
833:55 - um probably
833:56 - it returns an array of actions a way of
833:59 - two actions so the array of contains two
834:02 - elements first is the action for the
834:04 - elements and then the next would be the
834:06 - action for the tooltip
834:08 - and probably here I will call something
834:11 - like a create popper
834:13 - action
834:32 - so probably here we will have a great
834:34 - proper action
834:36 - and go level
834:41 - so probably here we will have the great
834:43 - proper action
834:46 - and that will return us two actions and
834:49 - these two actions should work in a pair
834:52 - where once the action is applied on both
834:55 - elements we get both elements only we
834:58 - call this create proper API from the
835:01 - proper JS core
835:03 - and so let's take a look how we can
835:06 - implement this right so now we have
835:08 - imagine our API
835:10 - let's come back over here and think
835:12 - about how you can write this we will
835:14 - have a create proper function so I'm
835:17 - going to say a function called create
835:19 - proper action and it should return us an
835:22 - array of two action
835:25 - right the first action is called the use
835:28 - proper element
835:30 - so use proper element
835:33 - and the next action is called the use
835:35 - proper tooltip
835:37 - right use proper tooltip
835:41 - and these tools are these two are
835:43 - actions so they both text elements and
835:46 - params
835:51 - which um in our case probably we're just
835:54 - gonna ignore the problems for now and
835:57 - you're gonna return these two action
835:58 - over here
835:59 - so these two should works like a pair
836:03 - um
836:04 - and we'll take a look at how we're going
836:06 - to implement this right so this we're
836:07 - gonna make it as our default exports so
836:11 - we're gonna remove whatever is here
836:13 - and we're gonna call this uh create
836:16 - proper action for the use popper
836:19 - right so now let's come back to the use
836:22 - popper let's open up a bit over here
836:27 - we are going to call this function uh
836:29 - this action will be called when the
836:31 - proper element is mounted but at that
836:33 - time the tooltip element may not be
836:35 - mounted right so we want to have like a
836:38 - reference somewhere like the proper
836:40 - element and the proper tooltip
836:44 - and we're gonna assign this
836:46 - um
836:47 - elements
836:49 - whenever the element itself is mounted
836:52 - so we're gonna say this is this and this
836:56 - is sorry this element
836:59 - and because doing so we will now
837:02 - probably want to have a function that is
837:06 - the actual grid popper
837:08 - uh I'm gonna say initialize popper so
837:10 - because create popper is here already so
837:12 - initialize proper
837:15 - so this function uh will be called in
837:19 - both actions so we don't care about
837:21 - which uh order of like proper element is
837:25 - defined or proper tooltip is defined but
837:28 - we're gonna call it call it on both
837:31 - sides and we only do our thing when both
837:35 - proper elements and proper tool tape is
837:36 - ready right so if this function is
837:39 - called first then proper element may be
837:42 - ready but it may not or if this is
837:45 - called First and proper tool tip is
837:46 - ready but proper element is not so
837:49 - only the second time when we call
837:51 - initialize proper after in both actions
837:54 - where the proper both element and the
837:57 - tooltip is ready so we're going to say
837:59 - popper element
838:01 - and proper tool tip
838:05 - is ready what I call the create popper
838:09 - uh
838:12 - API
838:17 - right
838:21 - let's see here
838:23 - let's see process is not defined ah I
838:27 - believe this property.js core itself is
838:31 - using some imp process
838:34 - environment what I can do as a hack here
838:38 - is that Define process
838:43 - JS let's say um go window dot process
838:48 - equals to F production
838:53 - okay and
838:56 - no
838:59 - so this is ignore me this is going to be
839:01 - a hack uh
839:04 - and we're gonna import this Define
839:06 - process first
839:12 - yep
839:14 - so yeah probably let me explain a bit on
839:18 - this hack basically we're going to
839:19 - Define process as the global variable
839:22 - which is the nth node nth is production
839:25 - because I know that in some Library they
839:27 - like to assess a
839:30 - process.f.node f as they assume that
839:32 - this is being imported uh in node.js as
839:36 - well as your
839:38 - bundlers like webpack or roll up
839:40 - understand this process.nf but not in
839:44 - the browser right so we're going to
839:45 - Define this right before we import our
839:48 - use proper which Imports this proper JS
839:50 - which itself is using that process so
839:54 - now as you can see this is showing up
839:56 - over here
839:58 - I believe this is working let's see
840:01 - placement uh top end
840:06 - um
840:07 - would it be because the hello world is
840:10 - gonna okay how about let's try bottom
840:13 - starts
840:14 - uh pot placement
840:19 - bottom starts
840:22 - right ah yeah so probably the default
840:25 - placement is over that right corner now
840:27 - it's bottom starts so this is
840:31 - the placements and all the power arms
840:33 - probably we would also want to pass it
840:36 - in somewhere we can decide whether we
840:38 - want to pass it in the proper element or
840:40 - proper tooltip but decide only one
840:42 - because you know what happens if you
840:44 - pass two conflicting problems on both
840:46 - sides I'm going to reconcile that so I
840:50 - probably would want to pass it in the
840:52 - tooltip element because it feels like
840:54 - it's a tooltip related power ramps so
840:57 - over here we're going to say proper
840:59 - params equals to Prime Rams
841:02 - so I'm going to Define this over here
841:05 - and I'm going to replace it over here
841:10 - right so after replace it I'll probably
841:13 - have to pass it myself so it's at the
841:16 - proper two tip I'm gonna say um equals
841:18 - to placement bottom starts
841:21 - and now it's back to the bottom start
841:23 - again right so if you are curious why is
841:27 - there two curly braces well the first
841:30 - outside most the outermost curling
841:32 - brackets is just telling that this is
841:34 - what is within is an expression and the
841:38 - one inside is just like an object
841:40 - right so the expression is an object so
841:43 - we say use proper tooltip and we have
841:46 - params and over here we do popular dot
841:50 - equals params right that means that
841:52 - we're accepting prompts here we also
841:54 - need to prepare to be prepared that you
841:58 - know there will be an update whenever
841:59 - you're using that params be sure that
842:02 - you also Define and updates methods
842:04 - because
842:06 - params itself can change
842:08 - right if you don't have it over here
842:10 - then yeah we don't have to care about
842:11 - but if you are taking problems here yes
842:13 - please define new params let's see
842:16 - proper dot params equals the new params
842:20 - by the same time we would also want to
842:23 - like changing it this alone wouldn't
842:25 - affect the proper here so probably would
842:29 - have to have to look up and the proper
842:32 - API documentation to see whether how we
842:35 - are going to update the params so I'm
842:39 - gonna say prop I'm gonna guess probably
842:42 - it's in over here create popper
842:45 - and see let's see
842:48 - instance
842:50 - updates set options
842:53 - I would believe this is the options
842:58 - right so set options
843:01 - takes in an option
843:04 - write a shape of options right so
843:06 - probably is this one I'm gonna
843:08 - come over here and say uh
843:12 - popper
843:14 - dot set options with each the proper
843:17 - params
843:19 - but what is proper well proper will be
843:22 - this instance of after you create a
843:25 - popper right so I'm gonna come over here
843:28 - and say popper equals to create popper
843:32 - lead popper
843:35 - right so now if you okay see let's let's
843:39 - try and see it's a buttons
843:42 - uh let's create let's make placement
843:45 - uh variable
843:48 - I'm gonna say it starts I'm gonna
843:49 - replace this placement over here
843:52 - and I'm gonna have a button that
843:55 - click me
843:57 - that when I click
844:01 - we change the placement to say
844:07 - let's see
844:09 - what other placement you have on the
844:11 - right all right let's let's try on the
844:13 - right
844:14 - equals right
844:18 - so when I click yeah it's on the right
844:20 - right
844:22 - okay it works right so make sure when
844:25 - you're taking the pumps please be sure
844:27 - that you also Define updates so that it
844:29 - it it feels good where it's you can
844:32 - dynamically change whatever is inside
844:35 - the params and see it reflected
844:37 - immediately right if you don't have
844:38 - updates defines then it will not update
844:41 - itself
844:43 - so um as you can see over here
844:47 - um when we're looking at the apis we
844:49 - also see a destroy which is to clean up
844:51 - the instance which means that whenever
844:53 - an API provides a way to clean up we
844:56 - also need to do our own cleanup
844:58 - which is over here we will have to
845:00 - define the destroy
845:02 - to do a cleanup
845:04 - and
845:05 - [Music]
845:07 - so if proper
845:09 - uh okay because we can destroy this
845:13 - tooltip as well as this proper element
845:16 - so I'm gonna extract that method out
845:21 - um just like how we say initialize
845:23 - proper right so when I say uh destroy
845:26 - popper
845:30 - uh over here I'm gonna I would copy the
845:33 - same thing as well over here
845:35 - and then
845:37 - um also once we are destroying then
845:40 - probably will say proper tool tip is now
845:45 - and over here we're going to say proper
845:47 - element is now
845:49 - so that you know we don't hold the same
845:51 - reference against uh we release the
845:54 - reference from from this action pair and
845:57 - Destroy popper let's define this
845:59 - function destroy proper and I'm gonna
846:02 - say if you still have popper
846:04 - then popper
846:07 - dot destroy
846:13 - and we also
846:15 - you know popper equals null so that's if
846:19 - you call destroy multiple times it's
846:20 - it's not going to call the destroy API
846:22 - anymore
846:23 - so how do we validate this so probably
846:26 - we have um
846:28 - show tooltip as a variable uh we're
846:32 - gonna say True by default
846:34 - I'm gonna come here and I'm gonna
846:37 - uh probably have the tooltip as you know
846:40 - down in place shown whether this show
846:43 - tooltip is
846:44 - is true or false right and to the
846:48 - easiest way to check uh true false is to
846:52 - have a checkbox
846:53 - uh buy and check
846:56 - equals to a show tooltip
846:58 - so when we turn it off
847:01 - tooltip should be hidden and we turn it
847:02 - on it should show and height show and
847:04 - height
847:05 - and we say click me which change the
847:08 - placement to the right and we show it
847:09 - should be on the right right
847:12 - so that's about it we we have shown I've
847:17 - shown you how you can uh integrate the
847:20 - proper JS using action and in this case
847:23 - why is it so special is that popular.js
847:26 - Library uh takes in two elements and
847:30 - usually an action is only taken one so
847:32 - you would have to create an action pair
847:34 - in this case where you have two actions
847:37 - and they have to work together to to
847:41 - create the proper tooltip right and so
847:46 - as I said you can return an array of two
847:50 - actions and to coordinate between the
847:53 - actions you would have to kind of
847:56 - abstract like the initialization or
847:58 - destroy function where you would have to
848:01 - check in during initialization is to
848:03 - check whether if both elements are
848:06 - present only you create the proper and
848:08 - when you destroy make sure that as long
848:11 - as one is being called you will destroy
848:13 - it once and you don't destroy multiple
848:15 - times because you know both elements can
848:18 - be hidden at the same time you only
848:20 - destroyed once
848:21 - right and then
848:23 - um
848:25 - also when you have two actions that
848:29 - potentially can take in params you have
848:31 - to decide which action to take in params
848:35 - or you or you or you kind of like split
848:38 - into some params to be configured on the
848:42 - one action and some to the other or you
848:44 - just make all problems to be configured
848:46 - on only one action well this this is
848:48 - because it will be slightly harder if
848:50 - you want to reconcile the pumps you know
848:53 - what if both actions params one says
848:56 - that you need to place on the right one
848:57 - says you need to place on the left you
848:59 - need to come away to reconcile that and
849:02 - in either case I don't feel it makes
849:05 - sense you know like why must tooltip
849:07 - takes priority than the proper elements
849:09 - right so an easier way is to say proper
849:13 - element will not take any params and
849:14 - proper tooltip will take all the params
849:16 - and once you're taking params make sure
849:19 - that you have an updates methods so that
849:23 - you can make sure your parents is
849:25 - dynamically reflect uh the library under
849:28 - the hood right so that's about it
849:34 - so in the last video we talked about how
849:36 - we Implement uh use viewports and this
849:39 - video we're going to talk about how we
849:40 - can use that and to implement a use lazy
849:44 - image basically it's an action that
849:46 - allows you to lazily load your image
849:49 - only when the image is within the
849:51 - viewports that's why we're going to use
849:53 - the use viewports over here
849:55 - so let's take a look at the code
849:58 - so this is uh continuing what we had
850:01 - done so far we has we have a H1 that has
850:06 - used viewports and if you scroll you'll
850:10 - see that when it's enter it's it will
850:13 - cancel out enter and when it exits you
850:15 - will say exit
850:16 - right so I'm going to reuse this I'm
850:19 - going to firstly create an action called
850:21 - use uh I'm gonna lazy image action
850:26 - so action is nothing but a function
850:29 - I'm gonna say lazy image default
850:34 - that takes in parameter which is
850:36 - elements and optionally params if you
850:39 - provide if you are allowing people to
850:42 - provide parameters to the action
850:44 - and okay so this is your action and we
850:47 - import this okay import lazy image from
850:51 - lazy image
850:53 - over here and we are going to use our
850:57 - lazy image action to replace this H1 so
851:00 - I'm gonna have an image tag
851:02 - I'm gonna say I use lazy image
851:06 - and I'm gonna remove this so now I need
851:09 - an image okay I'll take I'm gonna say uh
851:13 - lazy image demo
851:16 - I need an image so
851:18 - um let's see
851:20 - let's probably let's steal this image
851:23 - over here I'm gonna inspect
851:25 - and it says oh hold on
851:29 - says a background image you're gonna
851:32 - copy this over here
851:36 - um so let's collapse this
851:40 - so I'm going to use Source equals to
851:44 - spell dot def slash spell logo dot
851:47 - horizontal SVG probably needs to add the
851:50 - https over here
851:53 - so if I scroll this you'll see that the
851:56 - image is already in the screen
851:58 - and if I inspect the elements and take a
852:01 - look at the network tab
852:04 - so let's clear everything let's let's
852:07 - collapse everything unused let's only
852:09 - focus on the image tag filter with SVG
852:13 - um let's refresh
852:15 - and see that the image is loaded
852:17 - immediately
852:18 - and if I scroll up and I refresh you can
852:22 - see that the image is still loaded
852:23 - immediately
852:25 - right
852:27 - immediately and what we want to do here
852:29 - is that we want to prevent this we want
852:32 - to we want the image to only load when
852:36 - we scroll until we see the image is
852:38 - within the viewport
852:40 - so what we can do here is that instead
852:42 - of using the source attribute which will
852:46 - lets the browser to load the image
852:49 - immediately what we can do is we can
852:51 - rename it to data source right so
852:55 - um it's just like random other
852:57 - attributes but over here I just use I
852:59 - use the data attributes custom data
853:00 - attributes here
853:02 - uh it can be data Dash anything that you
853:05 - like but I'm going to call it data
853:07 - source so if I refresh this again
853:10 - you'll see that the image is not loaded
853:13 - which is good and if you scroll down you
853:16 - see that the image is not showing it's
853:19 - not loading so what are we going to do
853:21 - so let's come back to Lazy image action
853:24 - and let's try and implement this
853:27 - so uh we have implemented
853:30 - um use viewport action that uses
853:33 - intersection Observer to know whether
853:36 - the element is entering or removing
853:38 - leaving the screen so why not reuse this
853:41 - logic over here
853:43 - and we use this actually we can reuse
853:45 - the action itself so action is nothing
853:47 - again is nothing but a function that
853:50 - takes in the elements and optionally in
853:53 - params and it could returns us an object
853:55 - like destroy with a destroy method or
853:57 - updates method so to use an action
854:00 - outside of svelt what you can do here is
854:05 - you can call it yourself so let's see
854:08 - let's import viewports from use viewport
854:11 - action
854:13 - what I mean is that you can call this
854:15 - viewport action
854:18 - rename this
854:20 - Yarns
854:22 - right you can do that
854:24 - um
854:26 - you can do this and it should work
854:28 - because it's nothing but a function
854:31 - and he returns us
854:33 - um I'm gonna say uh action methods
854:39 - viewport action methods it returns us an
854:43 - object
854:45 - and this object has a destroy and
854:47 - updates methods so if we are going to
854:51 - destroy these elements which we'll call
854:53 - the digital method of this lazy image we
854:56 - should also call the destroy of the
854:58 - inner action as well so that is what I'm
855:00 - going to do now let us come here and
855:03 - destroy
855:05 - I'm gonna call viewport action methods
855:08 - dot destroy as well
855:11 - all right so this will cleanse up
855:13 - whatever is called set up when we call
855:16 - the action right so if if you have
855:20 - something like an update and it's
855:22 - relevant to your action then probably
855:25 - you can also call like dot par update
855:29 - with the new params
855:32 - right so probably over here you have a
855:34 - paramps and you can pass it in and if
855:37 - something updated you can call updates
855:40 - method of that
855:42 - viewport action methods as well but in
855:46 - our case we don't have it our viewport
855:48 - actions
855:49 - does not take any problems that does not
855:52 - return us any updates so we're gonna
855:55 - remove this
855:56 - remove this revert this okay right
856:00 - so once you use the viewport action
856:03 - remember what happens you have two new
856:06 - custom events right the enter viewport
856:09 - and exit viewports and what we're going
856:11 - to focus now is just the enter viewport
856:14 - because when we enter the viewport we
856:16 - want to load the image
856:17 - so we can
856:21 - elements.at event listener
856:24 - call enter viewports and then we're
856:26 - going to have enter viewport
856:30 - event listener right and every time when
856:32 - you add an event listeners in your
856:34 - action you need to remember to remove
856:38 - events listener over here
856:43 - okay so let's see and the Viewpoint now
856:45 - defines so let's define enter viewports
856:50 - okay so what are we going to do when we
856:53 - enters the viewports right
856:55 - um over here the element is an image tag
856:58 - and we can get the source of the image
857:01 - that is supposed to be the actual Source
857:04 - in the data source right so we can
857:06 - basically get
857:09 - elements.datorsets.source which is this
857:12 - the value over here
857:15 - and what we do we can do is we're gonna
857:18 - set the source of the image
857:21 - to this value
857:24 - right so when we enter we're going to
857:26 - set it to to this value right so let's
857:29 - let's refresh this let's clean this
857:32 - come over here
857:33 - let's do a refresh okay you can see that
857:37 - there's no image being loaded and when I
857:39 - scroll
857:40 - and as soon as the image comes into
857:43 - viewports you see that it's being loaded
857:45 - and the image is being downloaded you
857:47 - can see it it's reflected in the network
857:49 - Tab and why is it two entries over here
857:52 - well it's basically because one let's
857:56 - see not quite sure why
858:00 - um
858:01 - but I think that's
858:03 - besides the point
858:04 - so uh
858:07 - over here
858:11 - um
858:12 - let's see one thing we need to do also
858:14 - once our image is loaded we probably
858:20 - wouldn't want to kind of load the image
858:23 - again so what we can do over here is
858:26 - also to remove event listener over here
858:30 - so once it's done we can remove the
858:33 - enter viewport listener so we don't care
858:35 - about whether it's entering reports
858:37 - anymore and
858:39 - yeah that's that's about it that's how
858:42 - you would Implement a lazy image using a
858:45 - viewport action right so what you have
858:48 - learned so far is you can use an action
858:50 - to compose an action within another
858:53 - action right so if you have multiple
858:55 - actions and probably you can use that to
858:58 - compose it right so here you have it
859:01 - lazy image using actions
859:07 - I want to talk about
859:08 - Ensemble actions so what is Ensemble
859:12 - actions well as you can see if you
859:15 - Google around you probably couldn't find
859:17 - this because this is a makeup word for
859:18 - uh patterns that I found arising in
859:22 - creating a few actions and I find that I
859:25 - need something I need an actions that I
859:28 - can apply to a group of elements and I
859:31 - want to apply an action to them together
859:35 - right so I have an action so usually
859:38 - actions is applied to one uh per element
859:41 - basis where you just interact with one
859:43 - elements but sometimes I want these
859:46 - actions to be interacting with a group
859:48 - of elements that apply this action
859:51 - so it's not applying to all the elements
859:54 - you can group different elements
859:56 - together with one actions and so we're
859:58 - gonna look at some examples about this
860:02 - right I come up with three examples as
860:04 - you can see over here in the rebel and I
860:08 - would I will go through with you in
860:10 - detail in the first example right so
860:12 - we're gonna see how I transform
860:14 - something into that an ensemble actions
860:17 - and we're gonna take a look at example
860:20 - two and three which I already come off
860:22 - with that actions so for the example one
860:25 - uh over here you can see I'm use showing
860:27 - example one example one is like this I
860:30 - have two box
860:32 - that I have enabled Dragon top drop so I
860:35 - can basically drag an items into the box
860:39 - and then you will see that it shows up
860:41 - whatever I'm dropping into so I can drop
860:44 - into the box 2 as well but
860:47 - I can't drop a into box two
860:51 - well uh so so there's a limitation of
860:54 - like I can only drop A and B in drop uh
860:57 - in box one but not C and I can only drop
861:00 - B and C but not a in the Box too
861:04 - right so this is a very contrived
861:06 - example but I want I I purposely
861:08 - designed this so that you can show you
861:11 - can see one coming over here right so
861:13 - over here I use a drag and drop API
861:17 - I use on drop and drag over event
861:21 - listeners for for different boxes and
861:24 - then for each of the ABC I add draggable
861:27 - and on drag starts and on drag n
861:30 - and as you can see because of the I want
861:34 - the first bug to only receive a and b
861:36 - but not C and second box for only B and
861:39 - C but not a what I have to do is that my
861:44 - on drop will have to be I I can't reuse
861:46 - the same on drop actually I can't use
861:49 - the same on drag over because on drag
861:51 - over I I checked for a flag whether I
861:54 - can drop it if I can then I'll prevent
861:57 - default I will prevent the default
861:59 - behavior of the browser which is to
862:00 - prevent all drag and drop
862:02 - so uh so because of that I have to have
862:06 - two different kind of event listeners uh
862:08 - checking different flags
862:10 - and for the on drop I have to use a
862:13 - different event listeners again because
862:15 - I am going to call uh I'm gonna append
862:19 - the drop the data to a different Drop
862:22 - Zone string so this string is going to
862:25 - be shown over here
862:27 - so
862:28 - um if you have watched my previous video
862:30 - about how to reuse event listeners with
862:33 - action you can even immediately see that
862:37 - uh I have defined a lot of actions over
862:40 - here and probably I can reuse event
862:42 - listeners and create a new event out of
862:45 - it
862:47 - um same thing goes with the drag up
862:49 - draggable uh token the circles A and B
862:52 - and C
862:54 - um but then I also want to incorporate
862:56 - this logic of what can be dragged into a
863:00 - certain Drop Zone I I don't want to just
863:03 - apply this draggable on all of them and
863:05 - then
863:06 - proof I can drag and drop all of
863:08 - elements into all the Drop Zones right I
863:10 - want to have
863:11 - like I want to scope
863:13 - um certain items to be only drag dropped
863:17 - into a certain Drop Zone so so that we
863:22 - shall explore how I'm gonna do this so
863:24 - I'm gonna come over here and create
863:26 - example
863:30 - three final
863:32 - okay so this is the end result
863:34 - and the main point mean time I'm gonna
863:36 - copy example one oh sorry example one
863:40 - final no example three so I'm gonna
863:42 - paste it in
863:44 - and we are going to use the example one
863:47 - final instead
863:49 - and so I'm going to keep this example
863:51 - one for you in the meantime I'm gonna
863:53 - change this example one final
863:56 - so uh let's imagine how I would want the
864:00 - end result to look like
864:02 - so let me collapse everything so that
864:05 - it's cleaner for us to
864:07 - explore imaginations
864:09 - so I'm going to come over here and this
864:12 - is how I would imagine instead I would
864:14 - want to have a function uh function I'm
864:17 - going to call it get drag
864:19 - and drop actions
864:23 - so you see it's not an action but it's a
864:26 - function that creates an action so this
864:29 - function hopefully I gives me a pair of
864:33 - uh drop uh drag and drop action so
864:38 - hopefully these two are actions so I can
864:41 - have two different pairs of this drag
864:44 - and drop action so I'm going to call
864:45 - drag one uh drag two drop one and drop
864:49 - two
864:50 - so if this two pairs I can come over
864:53 - here and okay so so the first drop zone
864:55 - I'm gonna use drop one
864:59 - and for the second one I would use drop
865:03 - two
865:07 - and now I'm gonna come over here for the
865:09 - draggable part I say A and B I can drag
865:12 - from am so for the drop zone one I can
865:15 - only drag from A and B so I'm gonna use
865:17 - drag one for this two
865:25 - and for B and C uh for the drop zone do
865:28 - I can drop B and C right so I can come
865:30 - over here and then use drag two
865:37 - okay so as you can see it's it's quite
865:40 - clean I have dropped one use drag one
865:42 - and use drag one drop two use drag two
865:44 - and use drag two over here
865:46 - so this is the end result that I would
865:49 - once my actions to look like
865:53 - um so of course you say uh drop one what
865:57 - does it what happens if you dropped yeah
865:59 - then I would have probably a custom
866:02 - events as dispatch right if you don't
866:04 - know how to do how to create a event
866:07 - using actions you can watch my video
866:09 - links in the description
866:12 - so probably I will with this drop one
866:15 - action I will create a new
866:17 - um
866:18 - new actions I called it uh on receive
866:22 - drag data
866:25 - so on receive direct data
866:28 - oops so for here I can have my event
866:33 - handler I'm gonna inline this uh by
866:37 - saying uh
866:38 - dragzone Drop Zone one plus equals event
866:42 - dot detail so hopefully the string that
866:45 - is carried over from the drag one and
866:48 - drag two will be in the events detail I
866:51 - will be received from the drop one event
866:53 - and then receive as event or detail so
866:55 - I'm going to come over here and copy the
866:57 - same thing over as well but change it to
867:00 - drop zone 2.
867:03 - so this is how you're gonna look like
867:06 - and maybe I can change this as well so
867:10 - previously I'm just use a
867:14 - when I start dragging I use the inner
867:16 - text as the data that pass into the drag
867:21 - and drop API data transfer
867:23 - but over here maybe since I'm using
867:26 - actions probably I can pass this data in
867:28 - for my action so then this data can be
867:32 - dynamic as well uh as you if you change
867:35 - the data and then I can change my
867:39 - I can change my poweramps over here
867:41 - hopefully by now you should able to know
867:44 - how to
867:45 - um
867:46 - updates these poweramps to your action
867:50 - so
867:51 - um if you are adventurous enough you can
867:54 - pause over here and try to implement
867:56 - this pair of actions yourself
868:00 - if not I'm going to continue over here
868:03 - so I'm going to Define this get drag and
868:05 - drop actions so I'm going to come over
868:07 - here say function get drag and drop
868:09 - functions so I'm going to Define two
868:12 - actions right so the first one is called
868:15 - the drag action
868:16 - and the second one is called
868:19 - the drop action
868:23 - so you may ask me like why is it
868:25 - returning it as an array and you do this
868:28 - um I think since
868:32 - react comes up with the hooks pattern
868:35 - hooks API a lot of us realize that
868:37 - actually we can return an array of
868:40 - results and then you and then you can
868:44 - destructuring using array destructuring
868:46 - right we all know that but then this is
868:49 - one good way that we can return
868:50 - something without enforcing the
868:54 - the name of the thing that we are going
868:57 - to return a lot of times if we are
868:59 - coming you're going to use this multiple
869:01 - times then you kind of have to think out
869:04 - of a name to rename it right so if I
869:06 - gonna return uh drag and drop as an
869:10 - object then because I'm gonna use this
869:13 - twice I would have to manually rename it
869:16 - like come and drag drag one and drop
869:18 - equals to drop one and do the same thing
869:21 - for drag two and drag drop two
869:24 - but if I know by convention by Design I
869:28 - say that okay this will only always
869:29 - return two items or maybe one or three
869:33 - items okay not one but two or three like
869:36 - a fixed number of items I think the best
869:38 - number is two at most three
869:41 - then since it's
869:43 - only three items and I design in a way
869:47 - that maybe for some convention there's
869:49 - always a pattern on in terms of the
869:51 - position of the items they're gonna
869:52 - return
869:53 - then I can say that I'm going to return
869:55 - it as an array
869:57 - so you can come up with your own name
869:59 - without having to destructure in this
870:02 - structure at the same time rename it
870:05 - so I don't force whatever name that you
870:07 - want you can come up with drag one drop
870:09 - one or blah blah blah one and blah blah
870:12 - two right so it's up to you
870:15 - so here I have my functions and I'm
870:18 - going to return it so these two are
870:20 - actions so remember actions is a
870:23 - function and function that takes in a
870:25 - note and a paramps so I'm going to come
870:27 - over here and do this two for now
870:30 - and now so I need to incorporate some of
870:33 - this logic uh so for the drag uh
870:37 - previously when I have drag I have set
870:40 - the draggable to true and on Drexel and
870:43 - on drag and so I'm going to copy this
870:45 - and come over here
870:48 - and whoops and Define it
870:52 - right I'm gonna Define this too so first
870:54 - thing is note dot draggable equals to
870:56 - True okay that's settle
871:00 - and then I am going to say
871:06 - hold on let me check my notes
871:12 - I'm not sure whether I can pass it as a
871:14 - string but let's just try as a as a
871:16 - Boolean and then I'm gonna add um two
871:18 - event listeners right on dragstart and
871:20 - on drag n so instead of writing it I'm
871:23 - going to copy
871:24 - um come over here and drag start drag
871:26 - and
871:33 - so previously we have a custom
871:35 - um
871:36 - Logics over here that says a what can be
871:41 - dropped right so right now since we're
871:43 - returning as a pair we don't have to
871:45 - come up with this custom logic we just
871:47 - need to say Define a variable here can
871:50 - drop
871:51 - it goes to false and can turn this flag
871:54 - on so anytime when we are
871:57 - dragging anything it should always turn
872:01 - on as true
872:02 - so this flag is going to be used on a
872:05 - drop right so I'm going to use the same
872:07 - flag in my drop event so that so that's
872:09 - why I'm Define it outside of the drag so
872:12 - that the drop can use it as well so as
872:14 - long as this flag is turned on then I am
872:17 - I am open to receive this data coming in
872:22 - so okay then on drag and I need to set
872:25 - reset it back to false
872:29 - okay and then the data instead of
872:31 - reading from text since we're in passing
872:33 - as params this is going to become over
872:35 - here
872:37 - and I think that's it so I am going to
872:40 - add event listeners
872:48 - uh drag start
872:50 - and then on drag start
872:52 - and do the same thing for on drag n as
872:55 - well
872:59 - and then
873:01 - if I'm adding event listeners I need to
873:03 - be a good citizen I need to remember to
873:06 - remove it when during this drawing so
873:09 - I'm going to come over here copy these
873:10 - two lines paste it in
873:12 - oops
873:15 - and then replace it with remove event
873:17 - listener
873:21 - and one thing I need to do also is I
873:24 - need to make sure that I can updates my
873:26 - program if it's Dynamic so this will be
873:29 - the new Power ramps
873:31 - so uh I think name it to be the contents
873:36 - is better so data right this is a data
873:38 - that we are passing in so this will be
873:41 - the new data
873:42 - and I just need to update this as the
873:45 - new data over here
873:47 - so this will always get the latest data
873:50 - okay I think that's that's great for the
873:53 - first action so I'm going to remove this
873:56 - sounds good okay now let's focus on the
874:00 - second action the drop
874:03 - oops so I can come over here and let's
874:06 - see
874:10 - okay hold on this
874:12 - I need to be a string
874:20 - okay so I'm gonna come over here for the
874:23 - drop I am going to copy the drop
874:28 - handlers over here
874:31 - okay so for the drop action
874:34 - I'm gonna do this too right on drop and
874:36 - on drag over so in drag over you so
874:39 - let's let's copy these two events
874:41 - listener
874:43 - uh okay just copy these two so on the
874:46 - drag on drop is to handle when this is
874:49 - being dropped I'll do what happens and
874:52 - then on drag over is to handle the time
874:55 - where
874:56 - should I prevent default which is if I
874:59 - prevent defaults which means not the
875:01 - browser default Behavior which means you
875:03 - allow uh people do drag over this item
875:07 - right the default behavior from browser
875:09 - is to prevent anything
875:11 - so I come over here and I said dot on
875:13 - drop
875:14 - uh event and then I'm gonna get the data
875:17 - out of it so this drop event I I don't
875:20 - have to do this handle it myself I can
875:23 - come over here and dispatch a new custom
875:26 - event new custom event
875:30 - and I'm gonna call it
875:33 - receive drag data
875:36 - and for the data that I'm going to pass
875:39 - in for my custom event will have this
875:40 - detail called the data
875:44 - okay
875:47 - and on Direct over
875:50 - what I need to do is I need to check the
875:52 - flag to see whether this is turned on
875:54 - which is only when I'm dragging anything
875:57 - that is covered by this drag action only
876:00 - them can be dropped into my drop zone
876:02 - and check this flag if it's true then I
876:05 - event different defaults allow the
876:07 - dragging over and I think that's it so
876:10 - I'm gonna add event listeners again so
876:12 - note that at events listeners
876:18 - drop and then on drop
876:21 - note that at event
876:26 - drag over on drag over and by now you
876:30 - should know what I'm gonna say be a good
876:32 - citizens remember every time when you
876:34 - add events listener you need to do
876:37 - destroy to remove them so copy this to
876:41 - come over here
876:43 - replace the ad to remove
876:48 - oops
876:50 - and I think that's it so let's remove
876:53 - this and let's Okay add event this there
876:56 - a listener not listeners listen there
877:01 - okay I think that's it's it's good now
877:03 - and let's try
877:05 - so okay I can remove anything that we
877:08 - don't need anymore so on drop one all
877:11 - these functions can be removed even this
877:15 - flag can be removed okay so we have this
877:18 - get drag and drop actions probably you
877:20 - would you if you want to reuse across
877:22 - multiple components you can move this
877:26 - into a file and you can create it you
877:29 - can call this outside of swell component
877:32 - as well and then pass this drag one into
877:36 - um one of the components in any
877:38 - components that you want to drag and
877:39 - then drop one the drop pair into any
877:42 - other components you want so you can
877:44 - doesn't have to use these two pairs in
877:46 - the same components you can pass it to
877:49 - multiple components as soon as they come
877:51 - with so that's the beauty of coming as a
877:54 - pair you can control where uh you can
877:57 - control what are the pairs and then use
878:00 - it as a group all right so they together
878:03 - these two actions and because they come
878:05 - as a pair the internally they are sort
878:08 - of like linked they and then all these
878:10 - actions all the elements that apply with
878:13 - these actions works together to achieve
878:15 - one effect therefore I call it the
878:17 - Ensemble actions
878:19 - so does it work let's try it out
878:24 - let's come come over here and I'm gonna
878:25 - drag okay it looks draggable go over and
878:28 - drop a drag drop B
878:32 - yeah I can't drop C okay let's look at
878:35 - the second I drag a okay I can't drop it
878:38 - that's good I can drop B and can drop C
878:41 - well that's that's great we've achieved
878:44 - it I will achieve a Ensemble actions a
878:48 - group of actions you can be one actions
878:51 - or multiple actions but they are and
878:53 - they can apply to on a list of elements
878:57 - a group of elements and these elements
878:59 - apply with these actions works together
879:01 - in a in an ensemble manner so I come up
879:06 - with a few other
879:08 - um
879:08 - examples it may be some contrived but
879:11 - let's take a look at them
879:13 - so let's take a look at the example two
879:16 - so example two is what I call a Mac
879:19 - update action
879:20 - so um this action again it returns of
879:23 - action
879:24 - this function returns an action and this
879:27 - action I can apply to multiple elements
879:29 - and they worked together so what this
879:32 - does is that this function over here uh
879:35 - I call before updates within this
879:38 - function right I can call this because I
879:41 - call this function immediately within
879:45 - the component initialization so it still
879:47 - knows that I'm initializing this
879:49 - component so it register a callback
879:52 - function for this component what I
879:55 - purposely call it inside this function
879:57 - so that it has a scoped it receives the
880:00 - same scope as the action that I'm going
880:02 - to create later on so I'm create this
880:05 - action
880:06 - so this action what it does is that
880:08 - every time when you use this action I'm
880:10 - going to add and the element that is
880:11 - applied to into a set over here
880:15 - and when I destroy it and I'll remove it
880:17 - from a sense
880:18 - so anytime when there's an update I'm
880:21 - going to come over here and iterate
880:23 - through the list of elements that
880:25 - applies this action and add an outline
880:28 - color read to them so every time I
880:31 - change online color read and great thing
880:34 - about this is I can't uh instead of use
880:38 - it over here I can
880:40 - call it I can I can call this function
880:44 - so say uh I'm gonna name it first get
880:48 - Mark updates
880:50 - right and I can call this function
880:53 - immediately in my gets default right so
880:57 - what this means is I can oh hold on I
881:00 - can't ah I can't do it can't do it over
881:03 - here because I have to call before
881:05 - updates well well that's that's a that's
881:08 - that's it but
881:10 - um I can't figure a way to pass this
881:13 - Mark update function around right so if
881:15 - I come over here and say
881:17 - let's see
881:19 - let's let's think of our work around
881:21 - over here I'm gonna pass this Mac
881:23 - updates in do okay and then design
881:27 - something very ugly but just for the
881:29 - moment just for demonstration purpose
881:32 - design function called sets mark the
881:44 - so I'm going to create a pair of get and
881:46 - center and I'm gonna come over here Mac
881:49 - updates
881:50 - so return this
881:54 - and so bear with me this is this is ugly
881:57 - this is not what you're gonna do but
881:59 - this is just for me to demonstrate that
882:01 - I can come over here check mark update
882:06 - and pass this action in
882:09 - so for the sake of demonstrating that
882:11 - this a
882:14 - this thing works this actions that
882:17 - you're gonna see what works in a pair
882:19 - I'm going to come over here and okay I'm
882:22 - gonna come over here an app over here
882:24 - and I'm gonna import that actions
882:29 - and I am going to
882:32 - use it so see whether it works come over
882:37 - here get Mark updates
882:47 - okay Mark Updates this should give me an
882:49 - action
882:51 - and then come over here diffuse action
882:57 - uh
883:00 - okay so probably there's a risk
883:02 - condition where basically this get my
883:04 - updates
883:05 - uh this this registration
883:09 - this this initialization calls after my
883:13 - app thoughts felt after right that's why
883:17 - this is not set yet so probably I can
883:21 - come over here uh action
883:25 - all right I'm gonna say this is even
883:28 - uglier and I would I imagine I didn't
883:31 - prepare this ahead of time but let's see
883:34 - whether this works uh I'm gonna say on
883:37 - Mount
883:41 - so by default is a no function so I'm
883:44 - going to say a function that does
883:46 - nothing
883:47 - but then I'm going to change my action
883:50 - let's see
883:52 - hey there's whoops I don't think it
883:56 - works I think it works this way uh
883:59 - action itself is
884:01 - um not
884:04 - reactive at all
884:07 - um
884:10 - well I can come out again another
884:14 - weird idea they're gonna compose an
884:17 - action right so
884:19 - sorry for this I didn't plan this but
884:22 - let's come up with a new uh an action an
884:25 - actual action over here
884:27 - and my action what I will do is I am
884:30 - going to
884:32 - ah I don't think that works sorry
884:35 - so um
884:37 - let's grab this but I think one is point
884:42 - out this
884:43 - this I can't point it out if it does not
884:47 - work well I can okay I know I want to do
884:50 - when come over here example four
884:53 - I am going to pass that function in
884:55 - script okay export
884:58 - let's
885:00 - action
885:02 - and I'm gonna come over here I have a
885:04 - div full
885:06 - use this action all right I'm going to
885:09 - pass this action in
885:11 - uh
885:13 - okay I don't need all this
885:16 - I don't need all this crap
885:19 - I'm gonna import example for
885:25 - well it's not an example the stricter
885:28 - stance it's just a sub component I'm
885:30 - gonna come over here action it goes to
885:32 - mark update so I'm passing this action
885:34 - in as you can see now it applies the
885:37 - same action and if I come over here and
885:39 - do this update right this will
885:43 - turns the ball outline of this will turn
885:45 - into red as well
885:47 - um there's nothing relates to them they
885:49 - are not the only thing that relates to
885:52 - them is they are applying the same
885:53 - actions so all the elements apply the
885:55 - same actions they have the same behavior
885:58 - or they form together to form one
886:00 - behavior and therefore I'm going to call
886:02 - it Ensemble actions I can call this name
886:05 - again and again so that it will be a
886:07 - real name uh when everyone anyone tries
886:11 - to refer this next time
886:13 - all right so
886:14 - last example example three I'm gonna
886:18 - come over here change it to example
886:19 - three
886:21 - this example three is again contrived
886:24 - but I want to show you something
886:26 - uh again the idea is the same
886:29 - I am going to a
886:32 - uh create I'm gonna apply this action uh
886:36 - stats I'm gonna have again have a
886:39 - function that returns me an action so
886:41 - why oh what so you you I guess you kind
886:44 - of slowly see this pattern where on
886:45 - simple actions you have to have a
886:48 - factory function that creates this
886:49 - action you have to have a function that
886:51 - creates this action because whatever
886:53 - this function is this function is always
886:56 - to be created anew and
886:59 - and only the function so this function
887:01 - itself is unique and if you apply it to
887:04 - a few like so so that when you apply to
887:07 - these elements they work together right
887:10 - it's slightly different where you you
887:12 - already Define a function all the
887:14 - function is the same function going to
887:16 - apply for all the elements
887:18 - yes they can still works together right
887:21 - but this has slightly different sense
887:23 - where you always come up with a new
887:25 - function and this new function so so you
887:27 - can apply this function to a group of
887:30 - elements so you can have multiple groups
887:33 - of elements applied to this same action
887:35 - that has a similar
887:39 - Behavior but then they are grouped
887:41 - together they are only formed in smaller
887:43 - groups because each groups use this one
887:45 - unique actions that was created for them
887:48 - you can create three if you have three
887:51 - groups you create three actions that
887:52 - logically they are the same but because
887:54 - of the scoping that you you do because
887:57 - of the closure sorry not scoping but
887:59 - because of the closure it it stores this
888:03 - growth elements in that closure so the
888:05 - the behavior happens together in that
888:08 - way
888:09 - so over here I have again I create a
888:11 - stat actions and this um
888:14 - I got applied to all the items so one
888:18 - thing interesting is I can actually uh
888:20 - this stats action is not an actual
888:23 - actionation experience object so if you
888:25 - come over here and look at the code I am
888:27 - actually returning an object
888:30 - and one of the property contains that
888:32 - action itself right this is the action
888:34 - and this object can also have more
888:36 - methods where I can use these methods to
888:39 - control my elements that apply this
888:42 - action so I have more
888:45 - x uh
888:47 - I have more methods over here from this
888:49 - action so I can actually apply an action
888:52 - uh this way where I use and then colon
888:56 - and then together action I go to call
888:58 - object dot actions right so you can
889:00 - actually it doesn't have to be just a
889:02 - function you can be a method or yeah in
889:05 - this case actually a method right
889:06 - because you define action on the object
889:08 - itself so it can be in a method so it
889:11 - can be a yeah and so I get past
889:14 - something some information to this
889:16 - action
889:17 - and over here whenever I change I have a
889:20 - different I does something like I do a
889:22 - toggle what it does is that it will call
889:25 - this object dot get all the elements
889:28 - that has a value less than 20 and change
889:30 - the background to Red so if I toggle on
889:32 - and see all of them turn rates and
889:34 - toggle off back to normal you can
889:36 - Shuffle again and this way and just
889:38 - demonstrate that this item data
889:42 - can be dynamic and again uh I so because
889:47 - it has can be dynamic I'm gonna up when
889:50 - I during the update I'm gonna update uh
889:52 - what other elements that is less than 20
889:54 - or something after the sets things like
889:56 - that right like I could have uh done it
890:00 - within this function as well instead so
890:03 - I can have a set of all the elements and
890:04 - then only filter out filter them out and
890:07 - get less than 20 or I can do it
890:10 - um during the update as well so up to
890:13 - you
890:14 - so I shuffle Shuffle and then toggle we
890:16 - can see it it's updating all right of
890:19 - course this has a glitch in this example
890:22 - if you
890:24 - haven't spotted let me show it to you so
890:27 - I can I can toggle it on and then I can
890:30 - Shuffle so whenever I shuffle uh I am
890:33 - not going to call this reactive
890:34 - statement again because a shuffle does
890:38 - not change this variable nor this
890:40 - variable so it's not run again and
890:43 - therefore uh I couldn't like go in and
890:47 - highlight the elements uh that uh that
890:50 - is less than 20 to be read right so this
890:52 - is not highlighted rate and the rest
890:54 - also not being removed background color
890:56 - because I only take care of the element
890:58 - that is less than 20 right so if I
891:00 - toggle on and off on Tech cast items S7
891:03 - and 20. well there's a bug on this but
891:06 - yeah I'm just trying to show you how you
891:09 - could do uh with an ensemble action but
891:12 - yeah I didn't really bother to fix this
891:15 - Behavior Uh well if you if you're
891:17 - interested you can come up with
891:19 - something else uh refine it to be better
891:22 - but I yeah so uh Ensemble actions
891:27 - you've seen three examples and
891:30 - so Ensemble actions again is an action
891:33 - that applies to a sample of elements and
891:36 - because they apply to the same actions
891:39 - the works together to create one
891:41 - Behavior
891:46 - So today we're going to talk about
891:48 - slots
891:50 - so what is slots
891:52 - well slot is a way for us to compose
891:55 - components
891:57 - what what is compose components well
892:00 - um in in a HTML Dom elements you can
892:05 - have other elements within your Dom
892:07 - elements right you can have a span
892:09 - element within a div element
892:11 - and you can do the same thing for
892:13 - components as well you can have other
892:16 - components or other elements within your
892:18 - components
892:20 - and
892:22 - well let's take a look at one example
892:25 - and you'll know okay so here I have
892:28 - prepared an example where I have created
892:30 - a component called component
892:33 - right and I'm going to use it over here
892:35 - so if I said earlier
892:37 - uh within a div you can have other
892:40 - things like text and spend right and
892:42 - spend element and inside components you
892:45 - can have same thing as well so I can
892:47 - come over here within components I can
892:50 - paste other things within over here
892:54 - but how would you how how does this
892:57 - elements that you created like you
893:00 - insert it over here gonna be used within
893:03 - a component
893:04 - well
893:05 - over here I have a component where the
893:08 - content of component is like components
893:10 - right so where where do I place in the
893:13 - hello world over here within the
893:15 - component
893:17 - um well you can decide your own
893:19 - you can decide within this component you
893:22 - can decide where this uh if if the user
893:26 - of this component provides something as
893:28 - like so-called like a children within my
893:30 - component then where will the content be
893:33 - go to where will the component be
893:34 - inserted into
893:36 - and you can specify that using a slot
893:40 - so if you guys come over here say slots
893:42 - over here component and Slot then you
893:44 - can see that it's slotted after my the
893:47 - text call component if I put it in front
893:50 - then you can see that hello world
893:52 - component is slotted in front right
893:55 - wherever so depends on where you have a
893:58 - slot then there it is where where it is
894:01 - being slotted into and you can actually
894:03 - have multiple of this right so
894:06 - slot is it's like a place where you can
894:09 - insert the content into and you can have
894:12 - multiple of them
894:13 - if you like to
894:16 - and if you have other other Logics
894:20 - within our components say for example
894:22 - I'm going to create a variable called
894:24 - show
894:28 - which will be which you can toggle it on
894:31 - and off using a checkbox
894:37 - then I with if it is true right if show
894:41 - is true
894:43 - I show a slot
894:46 - if it's not I will hide it
894:48 - okay so
894:51 - um over here if you see if I show I will
894:53 - show the slot if not I'll hide it this
894:55 - way if I turn on you will see the slot
894:57 - if I turn it off you'll be hidden so
895:00 - this so within a component you can
895:03 - control how you want any contents that
895:06 - is being passed within a component
895:09 - inside your components right you can so
895:12 - all this uh what what whatever things is
895:15 - passing over here you can control from
895:18 - within a component so that you know that
895:20 - where it will be slotted into and you
895:22 - use this special element called slot to
895:25 - decide that
895:28 - and just so that you know that uh
895:32 - elements over here is is nothing but
895:35 - like a normal elements that you can
895:37 - expect that you can write within this
895:40 - app.s felt I'm going to create a
895:42 - variable called count equals to zero
895:45 - and I can show this value over here
895:47 - count
895:49 - show the same value over here as well
895:51 - and I can have a button over here
895:55 - to
895:57 - Maybe
895:59 - increments the count
896:04 - and have another button over here to say
896:07 - decremented all right so this is
896:09 - decrement
896:11 - this is to increment
896:13 - so if I show this component if I click
896:17 - increments you can see that this this is
896:20 - just like uh other uh just like a normal
896:25 - Expressions that you can write within
896:27 - this M plus felt got nothing to do with
896:29 - this component this component just says
896:31 - that where you're going to slot my
896:33 - content in right if I hide there's no
896:36 - way to study in that that'll be it if
896:38 - you unhide you should say that okay here
896:41 - you're going to be sliding then yes
896:42 - you're gonna slide it in right but then
896:44 - the data inside the expressions or
896:46 - whatever you have inside is still be
896:49 - treated like you are rating them within
896:51 - this emboss felt you can increment you
896:53 - can decrement them
896:55 - and remember when I talked about
896:58 - um scope Styles scope CSS I say that
897:02 - when you have when you write Styles
897:04 - within a component say for example if I
897:06 - say button where the button font size is
897:10 - say 42px it affects all the buttons
897:13 - within this component file right it
897:16 - affects everything within the file so
897:18 - you have one button over here and one
897:20 - button over here they'll be both
897:22 - affected
897:23 - this is not depends on whether this
897:26 - button is you know kind of like placed
897:29 - inside somewhere within a com this
897:31 - component does not matter the only thing
897:33 - that matters is that this button is
897:35 - written within this file then your style
897:38 - uh your scope style will be effect to
897:40 - all to the button itself
897:43 - so now you have a slot and you have
897:47 - components and you can insert content
897:49 - inside
897:50 - so what if uh what if your slots on the
897:55 - other hand
897:57 - does not have any content which is
898:00 - so over here you write slot to say that
898:02 - okay if if you have anything within a
898:04 - component you could just slot it in
898:06 - right what if you create another
898:07 - component like this
898:10 - and you close it immediately so that
898:13 - there's nothing inside then what happens
898:16 - then right so this is the first one
898:19 - you see you slot the content in this is
898:21 - the second one you slot nothing in right
898:23 - of course you've slot nothing in there
898:26 - there's nothing but what if there's
898:27 - nothing and you want to show like a
898:29 - fallback well there what you couldn't do
898:32 - is you're gonna have you can write slots
898:35 - and you can put some content inside so
898:37 - whatever you pass in over here inside
898:39 - the content it's like a fallback
898:41 - the fallback content if you have nothing
898:43 - right if you have something then you see
898:45 - something but if it's nothing then
898:46 - you'll show the fallback content
898:49 - so this is one way you can fall back
898:52 - content so that it does not really
898:53 - depends on whether
898:55 - so it depends on whether like whether
898:57 - the parents passing something into your
899:00 - component if there's something that you
899:01 - Slaughter in if there's nothing then you
899:03 - just show the fallback
899:05 - so one last thing before I end this
899:07 - video is
899:09 - um what if you have more things that you
899:11 - want to pass into the components uh
899:15 - leave more places to slot into right
899:17 - over here you only have one component
899:19 - called slots and you can only pass you
899:21 - can only pass in a
899:23 - or what all the things that is within
899:25 - this component will be slotted in what
899:27 - what if you have multiple places of
899:31 - so-called placeholders or slots that you
899:33 - want to put things in and you want to
899:35 - decide where and things like that what
899:37 - should you do
899:38 - well you can have name slots so let me
899:43 - come remove this and let's create a few
899:45 - slots uh first thing is I'm gonna remove
899:48 - okay I'm gonna remove everything first
899:50 - I'm gonna come here and say this is the
899:53 - header
899:54 - and this is the footer right so for
899:56 - example you have this maybe like a
899:58 - layout component where you create a
900:01 - tether and a footer
900:07 - right and you can allow people to pass
900:11 - in different content for header and
900:13 - different content for footer then you
900:16 - can have different slots
900:18 - all right so if you pass in a steam slot
900:21 - over here then you're getting the same
900:23 - elements into both of the slots but what
900:26 - if you want different things and you can
900:29 - have name slots you can have name for
900:32 - the slots over here you're gonna name it
900:34 - um call it footer
900:38 - then this is a folder name slots so if
900:41 - you want to pass something to footer
900:43 - then you can have to come over here
900:46 - maybe you create an element
900:48 - for food element for footer
900:53 - and what you do is you're gonna call
900:56 - you're gonna pass in the attribute name
900:59 - footer and the value will be the name
901:02 - for that slot right so this is the slot
901:05 - attribute to determine which element
901:09 - should this
901:11 - um
901:12 - slots to be inserted into so this
901:15 - specify that I'm gonna go into the
901:17 - footer slot this attribute tells you
901:19 - gonna put the slot and over here you
901:21 - have a name slot you have a name for
901:23 - this slide called footer and there you
901:26 - there is where you insert the the
901:28 - elements that has a slot attribute
901:30 - called footer in
901:31 - right
901:33 - so uh by default uh a slot without a
901:37 - name is actually named default
901:40 - right so you can't have a slot named
901:43 - default
901:45 - right this is reserved for the default
901:47 - slots
901:48 - so yeah one thing you have to take note
901:50 - about
901:53 - so you can have name slots and come over
901:55 - here I'm gonna say this is going to be a
901:57 - hitter slot
901:59 - and now I am going to add this button
902:04 - into the header slots
902:07 - right but I also want to add the the
902:11 - count into a header slot
902:14 - so now what we can do instead is create
902:16 - what I call a slots template
902:20 - and this can this allows me to wrap over
902:24 - multiple elements
902:28 - so I can
902:30 - I can have
902:32 - multiple elements wrapped within the
902:34 - slots templates and all all the elements
902:36 - within here will be part of the slot
902:38 - header because of the attribute called
902:40 - slots header and they will be inserted
902:43 - into the slot named header right so you
902:47 - can see slot header has has zero and
902:50 - minus right a button and you can have
902:53 - element for footer over here right so
902:55 - you have name slots so let's recap what
902:57 - we have uh gone through so far we can
903:00 - have child elements for your component
903:05 - right and the the way where these com
903:09 - elements within the component will be
903:10 - inserted will be depends on the slot
903:13 - Right Slots is where you slots the
903:14 - content in
903:16 - you can have fallback content for the
903:18 - slots if you have if you pass in like a
903:21 - children within a slots element
903:24 - and if you want to have multiple slots
903:25 - you can but if you want to differentiate
903:28 - from different slots that like this is
903:31 - the Halo content for the slot this is a
903:33 - header slots for header content and this
903:35 - is a footer slot for Fuller content then
903:37 - you can have a name slot you can provide
903:39 - a name for your slot
903:41 - and then since you provide name for
903:43 - slots so determine which where does the
903:46 - element goes to Which slot that will
903:48 - insert into you can pass in a slot
903:51 - attribute to name like Which slot you go
903:54 - into so if you slot in on one only one
903:58 - element then you can pass it as
903:59 - attribute but if you want to group
904:01 - multiple elements
904:02 - into the same slots then you can use a
904:05 - slots template
904:07 - and same thing slot attribute to
904:09 - determine which slots name slots you're
904:11 - going to slot into
904:13 - and we also talk about Styles where if
904:16 - you have
904:17 - uh again just a recap of scope styling
904:21 - or if it affect button then it will
904:25 - affect all the buttons within this
904:26 - component file it will irrelevant
904:29 - whether this is being inserted in like a
904:32 - child component right so any button
904:33 - that's written in this file will be
904:34 - affected
904:38 - so in the last video we talked about
904:39 - slots
904:41 - we talk about slots it's a way that you
904:43 - can insert elements inside the component
904:47 - into
904:49 - a slot right within a component you can
904:53 - provide elements as like a children to
904:55 - component and they can be inserted into
904:56 - the slots in this video we're going to
904:59 - talk about how we can pass data into
905:01 - that element or pass data from the
905:03 - elements to the outside world
905:06 - right so here in this example that I've
905:08 - prepared for you
905:10 - I have a app.felt which is the parent
905:13 - component which uses the component the
905:17 - child component
905:18 - and I pass a an element right I pass in
905:23 - a fragments of elements which is the app
905:25 - count data
905:27 - and do these slots so inside components
905:31 - you will have this element called slots
905:32 - that determines where this
905:35 - app count is going to be passed in if I
905:38 - don't have this then you will see that
905:41 - uh although you pass in the app counts
905:44 - but there's no nowhere that you're gonna
905:46 - specify because you're gonna insert it
905:47 - into right slot is where you specify you
905:50 - can insert oops where you're gonna
905:52 - insert that into
905:55 - now inside this the elements that you
905:58 - have that we have we use data like app
906:01 - count which comes from the apps file
906:03 - right from this file you have this
906:05 - variable called app account where you
906:07 - can increment or decrement you see that
906:09 - this data updates
906:12 - uh accordingly this is what we have
906:15 - shown in the last video as well
906:16 - but how about the data within this
906:19 - container components I have accounts
906:21 - minus and count plus plus uh sorry I
906:25 - have accounts and I can increment a
906:27 - decrement but how do I pass this data
906:29 - into this element inside over here
906:33 - well you can do that using a slot props
906:38 - which is props for this slot element
906:41 - so for example I can pass in counts like
906:44 - this pass in accounts as a props to this
906:47 - slot
906:48 - then I can read it out into this uh
906:54 - slots templates
906:56 - so what I do is I can come over here and
906:58 - say let's count
907:00 - so let is the way it's a directive and
907:04 - it says that if I have a props
907:08 - for the slot then it will be available
907:11 - over here uh
907:13 - within this uh
907:16 - fragment over here
907:18 - so uh I'm gonna say this is the
907:22 - variable uh count so it has to match up
907:25 - and now I can use this variable count
907:28 - over here so component I'm going to say
907:31 - component count is this count
907:34 - right so if I increment like this you
907:36 - can see it changes if I increment like
907:37 - this you'll see that it changes for the
907:39 - component's count
907:41 - uh that let me
907:47 - right uh so so that you can see that
907:49 - there are side by sides one is I'm count
907:51 - one is component count
907:53 - so um so this is how you can get so
907:58 - within your templates within this swell
908:01 - fragment you can have data coming from
908:03 - two places right one is within this app
908:06 - component file
908:08 - and another is from the
908:11 - the components right the child
908:13 - components the other one is from here
908:15 - the component counts
908:18 - now um
908:20 - so this is I wouldn't say like past data
908:23 - in or out right uh because it's it's
908:26 - probably it's a bit confusing for you
908:28 - over here to think about that like
908:30 - passing in or passing out but you can
908:32 - take a look at you can think of it this
908:34 - way so all the data that's from uh
908:37 - there you if in the perspective of this
908:41 - felt fragment think about where the data
908:43 - can come from and where the data can go
908:45 - to right it can come from this app. so
908:48 - This resides in this app component and
908:53 - also within the component component
908:56 - right so you can have the data from here
908:59 - and you can have the data from component
909:01 - from component from here and this comes
909:04 - by getting it from a slot props and you
909:08 - assign that count over here you can
909:10 - reassign this variable to something else
909:12 - or if for example you have like count
909:16 - over here instead
909:20 - then you run into the issue where if you
909:23 - want to use count
909:25 - you realize that uh they are both
909:30 - they are both coming from this slot
909:32 - props right so you can actually rename
909:35 - the variable if you want to you can
909:37 - rename it from here I see I don't want
909:39 - to use count I want something else I'm
909:43 - gonna say uh
909:44 - a count
909:46 - then I can let a call in States and get
909:50 - the value over here
909:52 - but what if you have no choice uh this
909:55 - is the problem the name of the problem
909:58 - is called count you have no choice to
910:00 - use let counts then you kind of actually
910:02 - rename it you can rename to something
910:04 - else so actually you can come up here
910:06 - and it goes to a new name you can bind
910:08 - it to a new name and bind it to count
910:11 - from component
910:14 - and I can use it over here like this
910:17 - right now you can see that I'm getting
910:20 - the count from this app component and
910:22 - come from components from the component
910:24 - component
910:27 - right so we see that how we can get data
910:29 - from here inside to uh from app and
910:32 - component now let's take a look at how
910:34 - we can get
910:36 - something out of it out from here from
910:39 - this field fragments to inside this app
910:42 - dot spell or component as felt right so
910:45 - first thing is if you have say a button
910:47 - I'm gonna copy this button and paste it
910:49 - over here but if this button
910:52 - um whatever I do over here actually will
910:54 - affect outside whoa or I can also Define
910:58 - a function say ink uh increment
911:03 - which is
911:05 - count plus plus and can also call this
911:08 - function over here to notify that this
911:11 - uh
911:13 - let's
911:18 - let me add this okay I can also so this
911:23 - button is is within this felt fragment
911:26 - right I can
911:28 - have any function declared within apps
911:31 - felt and I can call it right I can call
911:34 - this function so it's like passing data
911:37 - outwards right I can also do things like
911:41 - increment and say increments by five
911:46 - and then again come up here and say
911:48 - Delta plus equals Delta so I can also do
911:53 - it this way by passing different kind of
911:54 - data out to the app.f files and how
911:58 - about passing data into the components
912:00 - Fields well it would be like passing a
912:02 - callback function right I can come over
912:04 - here copy this function I can have my
912:08 - own increment function over here
912:11 - and I can pass it in
912:14 - as a slot props
912:16 - now I can come over here to get to
912:20 - receive the slot props from within my
912:23 - template I can come and see let's
912:25 - increment and because this is using the
912:30 - same variables name as the function over
912:33 - here and I don't want to override it
912:35 - then I can rename it again I can rename
912:37 - it but I say int from component I can
912:41 - rename anything I want right and I can
912:44 - come over here and use it
912:46 - so I have two buttons uh
912:49 - one is to increment in the apps felt one
912:53 - is to increment from the components
912:55 - right so if I call this you can see this
912:57 - is incrementing if I call this this is
912:59 - incrementing so you can pass different
913:01 - data from this templates out to the app
913:04 - and the components felt and we have seen
913:07 - how we can pass data from app.strual and
913:09 - common spell into these templates so
913:12 - things over here is is you can have a
913:15 - combination of both walls you can also
913:18 - maybe swap this out where I'm going to
913:21 - call this the increment by the counts
913:24 - from components and increment for
913:26 - component with the count
913:28 - right then uh if this is three then I
913:31 - can increment by three and if this is 12
913:34 - now I can increment by 12. right this
913:37 - you can mix and you can take data from
913:40 - both sides and then do your own
913:41 - combinations and and also sending data
913:45 - out to both of the components
913:51 - so in the last videos we talked about
913:53 - slots and how we can communicate data
913:57 - through slots and in the previous videos
914:00 - I might have misspoke about the slot
914:03 - template there's no such thing as slot
914:06 - template it's spelled fragment
914:09 - uh so sorry for misspoken and mistyped
914:12 - it I must have been sleeping while
914:14 - recording this video uh that video right
914:17 - so uh today we're going to talk about
914:19 - slot forwarding it's a good way for us
914:23 - to
914:24 - um revise and ensure that we really
914:28 - understand how slots works so let's take
914:31 - a look at what is slot forwarding and
914:34 - have a check where how good we know
914:37 - about slots
914:38 - so first thing is over here I have
914:40 - prepared a rebel where I have three
914:43 - components I have a I have B and I have
914:46 - C right so a in Parts B Be import c c
914:49 - and the app will import a so we just
914:52 - just leave the app component alone and
914:55 - we're just gonna take a look at the a
914:58 - component
914:59 - or rather let's take a look at the C
915:01 - component first so the C component is
915:04 - the most interesting one we have three
915:06 - slots the header
915:09 - um
915:09 - we have three slots element three of
915:12 - them are named slots so they have names
915:14 - for it right they are not default slots
915:16 - they have names right we have header
915:18 - content and we have footer
915:20 - okay so how do you pass elements uh into
915:25 - this header slot
915:27 - well if you are in the B component and
915:30 - you want to do that you would first
915:33 - create a component called C
915:35 - and within C you can have elements as
915:38 - long as your elements has the slot
915:40 - attribute called header then elements
915:44 - and all these children will be inserted
915:46 - into the header slots so for example if
915:49 - I come over here
915:51 - I have say
915:54 - a div the slot name header so you have
915:59 - to make sure that this slot attributes
916:00 - value is the same as the name then all
916:04 - its content will be
916:07 - all its contents will be inserted into
916:10 - the header in C right so here I'm going
916:12 - to say C header
916:15 - and this is C
916:18 - footer
916:19 - all right so C header C footer so you
916:22 - see that this is being inserted into it
916:24 - right if you have a few elements right
916:26 - uh that is so one element can have only
916:30 - one element cannabis attribute called
916:32 - slots with the same uh
916:35 - so you can have multiple elements within
916:37 - this components but the slots attribute
916:40 - value has to be unique right you can't
916:43 - basically do this where you have
916:46 - multiple elements with a name called
916:48 - slots uh no elements with attribute a
916:52 - slot attribute value that has a is the
916:55 - same right you can't have two slots
916:56 - header so if you want
916:59 - to have two siblings elements to be
917:02 - passed into the same slots element then
917:05 - what you need is is felt fragment right
917:09 - this is a way for you to group your
917:13 - elements
917:15 - you group your elements so over here
917:17 - you're going to copy this slot attribute
917:20 - and yeah we don't need this copy our
917:23 - slot attributes and wrap these two
917:25 - elements these two siblings element
917:27 - together and now we insert both the div
917:30 - into
917:31 - the C header right okay so so far so
917:36 - good we've learned this before right
917:38 - this is just a revision so now let's
917:41 - make things slightly harder so for say
917:43 - for example now I want to pass content
917:46 - from a
917:48 - to B
917:50 - uh what do I do well B will have to have
917:53 - a slot say for example I come over here
917:55 - and Define the slots
917:56 - I'm going to this name a b header
918:01 - okay I have a slot okay I just can close
918:04 - it directly I don't need any fallback so
918:06 - I have a b header over here
918:09 - and to pass contents from A to B header
918:13 - what I need is I need to come over here
918:16 - in a create this component called B and
918:18 - I have elements inside so here I'm going
918:21 - to create div again uh header from a and
918:25 - I need to have a slot attribute to tell
918:28 - because this is a name slot so this is
918:30 - not a default slot this is a name and
918:33 - then I need to create and a I want to
918:35 - pass something into that named slots I
918:37 - need to have a slot attribute with the
918:39 - same
918:40 - value with this name of the slots so
918:43 - let's say a slot
918:46 - attribute value is equal to the same
918:48 - thing right so now you see that b here
918:50 - has the either from a
918:53 - header from a over here
918:55 - and then
918:57 - yeah this is the same thing as how we
918:59 - pass from B to C right okay so let's
919:02 - move on one more step what if I want
919:06 - contents from a I want uh I want to have
919:10 - this slot uh
919:12 - whatever the content is passing to be
919:14 - hater slots to be passed into cease
919:20 - uh header slots
919:22 - right so what do I do okay so first
919:23 - thing I could come over here uh instead
919:27 - of having this div remove all this and
919:30 - tick and copy this and put the slots in
919:33 - over here
919:36 - okay so now what you can see is I
919:41 - uh I still use the same slots elements
919:44 - but this slots element is being placed
919:47 - inside a
919:49 - instead of being put somewhere else you
919:52 - can put in here as well right it's how
919:55 - the the slots element can place anywhere
919:58 - now what I want is I'm going to place it
920:00 - inside a c component
920:03 - and into this slot called header slot
920:07 - attribute called header so that it is
920:09 - all the contents from a will be inserted
920:11 - into the slot named header in C
920:15 - component right so now you can see that
920:17 - I can do this and
920:20 - it's kind of a forward like the content
920:21 - from a into B uh to be insert into B but
920:25 - then the content you insert into B is
920:28 - going to take
920:29 - and insert into the C component right so
920:33 - this is like like forwarding the slots
920:35 - and if you guys do this you can simplify
920:39 - it by come over here uh if if this is
920:42 - all you have because slot frame as well
920:45 - fragment is usually used when you want
920:48 - to group multiple elements to insert
920:49 - into one's slot right but in our case we
920:53 - only want to
920:56 - I have only one element which is this
920:58 - slots element so a further way to
921:02 - simplify this we can copy this slot
921:04 - attribute and pass it inside this slot
921:06 - elements and we can remove this uh cell
921:10 - fragment right and you can see that it's
921:13 - still working
921:14 - right it's still working you taking
921:17 - contents from a
921:19 - in the a file
921:20 - uh you take it in and pass it into the B
921:24 - component over here right so the slots
921:26 - attribute says b header so we're going
921:28 - to pass insert into a slot element in B
921:32 - component named B header
921:35 - and then I want to pass this B uh this
921:40 - elements this whole element coming from
921:42 - a I want to slot it inside a slot in C
921:45 - component name header so I come over
921:48 - here and add slot attribute called
921:50 - header and there it is it's being slot
921:52 - slotted into C component right to make
921:56 - metal worse or confusing sometimes you
921:59 - want you might write something like this
922:02 - where the name and the slots is the same
922:03 - so here it's like this but you need to
922:07 - know that uh you you after X my
922:10 - explanation hopefully you are clearer
922:12 - now where basically slots and the name
922:15 - creates a slot a name slots element
922:17 - which says that whatever comes from a uh
922:21 - whoever create a b component then you
922:23 - can create something with a slot
922:24 - attribute called header that will insert
922:25 - into there right and at the same time if
922:28 - you have a slot attribute then it means
922:31 - that I want to insert into this
922:33 - components right wherever it has a slot
922:36 - name header inside C component
922:41 - okay so now let's take a look uh
922:45 - hopefully this you understand this and
922:47 - let's take a look
922:49 - revise again what we've learned in the
922:51 - previous video where we say about
922:52 - communication right data how do we pass
922:55 - data right so say for example if I come
922:58 - over here I have a script tag
923:00 - and I have a counter equals zero and as
923:05 - always I like counter because it's easy
923:07 - to create and demonstrate
923:12 - a button
923:14 - so oops okay uh and I have a buttons to
923:18 - counter
923:20 - I have a button to increment this
923:23 - counter value
923:25 - okay I want to pass this counter
923:28 - into the slots counter
923:32 - so when I pass it in
923:35 - you will see that in over here I can
923:39 - assess this value right by via the let
923:44 - the let's right so I can have a let
923:48 - counter
923:51 - right and but
923:55 - okay I have a let's counter but then
923:57 - again I have a lead counter but I
924:02 - you know this is usually used in Elder
924:04 - elements right if I if I come over here
924:06 - and if I put div
924:09 - uh I I would have this
924:15 - I could now use this counter over here
924:17 - and you know do something about it right
924:19 - I can I can show this counter directly
924:21 - this this is the element
924:24 - right as you can see it's incrementing
924:27 - but instead of having a div or something
924:30 - else I have a slot element right so that
924:33 - element is for people to insert
924:36 - something inside right so now probably I
924:38 - would want to also pass this counter
924:41 - value to whoever is slotting into my
924:44 - slots so I can come over here and say
924:46 - counter I'm do this so I'm going to pass
924:48 - this counter value go over and insert
924:52 - and provide to whoever is slotting into
924:54 - the header so this is the slot header
924:56 - over here and I can take this same thing
924:59 - let counter and then come over here and
925:02 - use this value now
925:05 - you see that when I increment this data
925:09 - as being
925:10 - updated right over here so this data
925:14 - comes from uh how I pass this data is
925:17 - when I create a slot element slots
925:20 - elements I can have props so all the any
925:23 - props you have the data will be passed
925:26 - into whatever elements that is going to
925:29 - insert into that slot element so
925:31 - whatever elements are elements with
925:34 - slots attribute with the same name
925:37 - so in here C component we have slots
925:39 - attribute called header so this will
925:42 - receive that counter right the receives
925:44 - it you use a let's counter
925:47 - and now because we also this element
925:50 - just coincidentally is a slot element or
925:53 - else we were just gonna use this counter
925:55 - but this is a stock element which means
925:57 - uh it's not showing anything but
926:00 - someone to insert content in right so we
926:03 - also want to pass this data into uh
926:06 - whoever is inserting into this slots
926:09 - element so we're gonna create this props
926:11 - so that we can pass that data down
926:13 - and of course of course you say that
926:16 - this slots element could have fall back
926:19 - right so this is a fallback
926:23 - so this is uh this content will be
926:26 - rendered if you don't pass in a element
926:28 - with a slots named header right so for
926:31 - example if I say this is header
926:33 - Z Now you see a fallback and this
926:37 - fallback has this content right where
926:39 - basically it's this one right you you
926:42 - take that counter and you're gonna show
926:43 - the content over here
926:45 - but if you pass something that has the
926:48 - same slot attribute now you want to pass
926:51 - the counter to that though these
926:54 - elements right if you want to right you
926:56 - don't have to you can pass as a counter
926:58 - you can maybe rename it as say full
927:02 - equals counter now what you
927:06 - can do is maybe let full and then take
927:10 - the value of 4 over here and show full
927:12 - right
927:13 - so this is this is the full value over
927:15 - here you can see over here right so of
927:19 - course so it's up to you whether you
927:20 - want to pass it down or maybe something
927:22 - else or do something with it maybe full
927:24 - counter times two uh so what you get
927:28 - over here the full value that you
927:29 - receives is always two times of the
927:32 - counter that's that's really up to you
927:34 - right I'm just gonna show how you can
927:37 - pass data all the way back in and as as
927:40 - we learn we can also pass data upwards
927:43 - or uh over here we we have this data go
927:46 - through a b and c right so everyone can
927:49 - be participated into this the data to be
927:52 - passed in so now I'm gonna have a b
927:55 - value
927:58 - create a button
928:00 - on click
928:09 - me
928:13 - okay I have a button called B button
928:17 - that I will
928:19 - I'm going to pass a props call sum now
928:21 - uh I'm gonna counter uh plus b
928:27 - okay
928:28 - and so so this one I'm gonna be uh
928:31 - nicely puts this is C
928:33 - this is B and now I also in a I also
928:36 - gonna have something called uh let's a
928:40 - equals to zero
928:42 - I'm gonna copy this code over
928:47 - a plus plus a
928:50 - a
928:52 - now uh this will be sum so we're gonna
928:55 - take let's sum
928:57 - and sum
929:01 - plus a
929:03 - uh so this is a sum from a
929:06 - this is but then the sum plus a so what
929:10 - is some sum is actually coming from here
929:13 - which is let me make it a new line so
929:15 - it's easy to read sum is equal to
929:17 - counter plus b so B comes from the B
929:19 - component and what is counter counter
929:22 - comes from here right from the left so
929:24 - which means this come from C so what is
929:26 - counter over here this counter is this
929:30 - variable from C
929:31 - right so we increment any of them you
929:33 - see that it is adding all the variables
929:37 - all the counters from a b and c
929:40 - right so this is
929:43 - amazing if you uh this this unlocks a
929:46 - lot of possibilities that you can do
929:49 - um
929:50 - possibilities are endless imagination is
929:53 - endless it's up to you right hopefully I
929:56 - explain this slot folding concept
930:00 - um to you clearly
930:01 - and I think that this slot for the idea
930:04 - of slots falling like forwarding a slots
930:06 - really and forces you to think about how
930:10 - slots really work what is the
930:12 - relationship between a slots element and
930:14 - the slots attributes and how do you pass
930:16 - data across them right hopefully after
930:20 - this video you don't have any doubts
930:21 - anymore but if you still do comments
930:24 - down below ask me any questions if you
930:27 - have if you still have right I'm I'm
930:30 - very more than welcome to answer all
930:31 - them
930:34 - today we're going to talk about a magic
930:37 - variable called dollar dollar slots
930:40 - so what is this magic variables about
930:43 - well we're going to take a look in an
930:46 - example and we're going to learn about
930:47 - from that so over here I have is
930:51 - uh app a DOT spelled components which it
930:54 - has three name slots name a b and c
930:58 - each of them has it's wrapped by a div
931:01 - and it also contains a fallback for the
931:06 - content right so if you don't provide
931:09 - this name a slots you don't provide a
931:12 - element when you're using this a
931:13 - component with a slot attribute called a
931:16 - then you will see the fallback instead
931:20 - so uh and the same thing goes for B and
931:23 - C so over here if you come over here and
931:25 - see a has three uh a has nothing you
931:28 - don't pass anything so you see fallback
931:30 - A and B and C and for this one you have
931:33 - ABC you pass something you so each of
931:35 - them has something for it right and and
931:38 - then if you come over here and say you
931:41 - do this then you get a b and fall back
931:44 - for C
931:46 - so this is useful when you so this is
931:49 - very useful when you have fallbacks
931:51 - right so if you don't pass something you
931:54 - you see the fallback but sometimes
931:57 - um
931:58 - sometimes you have text like this like
932:01 - the B and you you don't want to fall
932:04 - back for B
932:05 - sometimes you don't want to fall back
932:07 - right so for B case you don't want the
932:09 - fallback so if you don't have anything
932:10 - you don't want to show you you don't
932:13 - want to show anything right this one you
932:14 - don't have fallback don't show anything
932:16 - but at the same time you also don't want
932:18 - to show the text called B you don't want
932:20 - to even show any of this div
932:23 - but you know this is outside of the slot
932:26 - elements how do you know whether sums
932:29 - whether the slot element itself has
932:32 - something or how do you know whether a
932:35 - component Pro whe whether or not it
932:38 - provides elements with a slot attribute
932:40 - called B
932:42 - well as the name suggests as the name of
932:46 - the video suggests
932:47 - we'll use a magic variable called dollar
932:49 - dollar slots to tell us
932:52 - so this dollar dollar slots is a
932:55 - variable uh which is an object and this
932:59 - object contains key
933:00 - for each of the slots
933:03 - um
933:04 - for each of the slots
933:06 - attributes that is being passed into
933:08 - this component
933:09 - so for example in this case I probably
933:12 - will see
933:14 - um an object with a b and c right so
933:17 - this object the value of the object for
933:19 - now is Trudy
933:22 - um and if you take a look it's actually
933:23 - true right but
933:26 - um I can't say for sure what is going
933:28 - about so you're looking at you don't
933:29 - have to you shouldn't care about what is
933:31 - the value for now
933:33 - um so at the point of this recording
933:35 - version 3.37 right you just need to care
933:39 - about the key whether the key is exists
933:42 - and where the key value is Trudy right
933:46 - as long as truly then you can assume
933:48 - that the slot is there
933:51 - so over here what we have now uh is we
933:54 - can use this dollar dollar slots right
933:58 - so if B is truly which means um I can
934:03 - use this in the if
934:06 - I can use this in the if logic block to
934:08 - determine whether this is truly or not
934:10 - if it's truly then I'm going to show
934:12 - this whole thing right
934:14 - now if someone does not pass in anything
934:17 - for B it will not see this div and B
934:20 - colon right so if you see here I have
934:23 - fall back for a I fall back for C but
934:26 - you don't see B at all you will only see
934:28 - B if something for B is being passed in
934:31 - only when you have an attribute a slot
934:34 - attribute named B so over here if I
934:37 - remove this then you'll see that b is
934:40 - gone right you don't have B at all
934:43 - um so there
934:45 - and in those case in those scenarios
934:47 - then it's uh it's probably pointless to
934:51 - have any fallback for here right because
934:53 - for this slot name B because you
934:56 - probably would not need uh probably it
935:00 - will be hidden because of this if thing
935:03 - so this slots double slots it's a
935:06 - variable again it's a variable it's an
935:08 - object and it contains key for the name
935:11 - of the slots attribute being passed in
935:13 - and if you're gonna check whether if
935:15 - there's a pass in then you probably will
935:17 - check whether you have a whether this is
935:19 - truly or not uh if you check for C then
935:22 - you probably will check slots see
935:24 - whether it's 2D or not so for default
935:27 - slots then it will be default
935:29 - all right so default slots are the one
935:31 - that slots element without name at all
935:34 - right so we don't name that it would be
935:36 - a default slots
935:39 - so uh by uh at the point of this
935:43 - recording version 3.37
935:46 - uh you don't have a way to conditionally
935:48 - say hide or show a certain slots add an
935:52 - element with a slot attribute you can't
935:54 - really say I want to hide this or show
935:56 - this
935:57 - which means that it's probably uh the
936:00 - slot the order slot itself is it's not
936:03 - reactive at all right so it will only
936:06 - look for elements whether it would have
936:09 - a slot attribute right so if say for
936:11 - example if you do something like this uh
936:14 - okay so if you do something like this
936:17 - yes it seems like it's empty but it is
936:20 - not you still have an element with a
936:21 - slot attribute called B so it's not
936:23 - hiding for this right even if you see if
936:26 - you come over here and slap spell
936:28 - fragment
936:32 - again uh this is this is not empty right
936:37 - as in you you sorry you still have
936:39 - elements with a slot attribute called B
936:42 - it it's not it does not care whether
936:44 - it's empty or not it just care whether
936:46 - you have element called slot attribute
936:48 - called B at this point of recording
936:50 - right I'm not sure this is the best way
936:52 - of doing it the best feature we have but
936:56 - at this point what we have from svelt is
936:58 - that we'll check for elements with the
937:00 - slots attributes I will not care about
937:03 - the contents so even if you have no
937:05 - content uh you you still this this thing
937:08 - is still
937:11 - hold on
937:13 - slots B
937:16 - yeah if you have no content
937:19 - okay because for this yes you don't have
937:21 - a content right because it's empty at
937:24 - all right yeah so so I also sorry
937:27 - but if you
937:29 - um
937:30 - but if you have something like this if
937:32 - some condition
937:39 - then
937:40 - oops
937:44 - then again this is some sort of like
937:47 - content right this is content so I
937:50 - correct myself
937:52 - um you will check for the slots and then
937:54 - it will look at the so-called content
937:56 - but the content itself
937:58 - um
937:59 - uh does not have to be like actual
938:01 - having a Content it's really like uh
938:05 - whether anything is written inside this
938:07 - uh spelled fragment or elements that you
938:10 - have right even if you have a if logic
938:12 - block inside you because of the
938:14 - condition you're rendering nothing is
938:16 - still considered as having some sort of
938:18 - content uh for your slots attribute B
938:21 - and therefore you you this is still a
938:24 - Trudy so it will only be falsy if you
938:27 - have if it's totally empty right totally
938:31 - empty
938:33 - um so I think even if you have a space
938:36 - okay space is too empty okay ignore me
938:38 - right so
938:40 - yeah every day within us new things
938:42 - right we're trying to test boundaries
938:44 - and and I would say this is not like the
938:48 - personally I feel that that there's room
938:51 - to improve as well probably in the
938:53 - future versions future versions but at
938:56 - this point and the point of recording
938:58 - version 3.37
939:01 - um does double dollar slot stop B only
939:04 - checks whether you write anything inside
939:07 - these slots
939:10 - all right so hopefully you you learned
939:12 - something today the slots where you can
939:14 - use it to determine whether
939:17 - um a slot attribute is being passed in
939:20 - if it's not sent you can use this to say
939:23 - to to wrap it around with elements so
939:26 - that you know it's not just about the
939:28 - slots if it's nothing is passing this is
939:30 - empty right but then also the
939:32 - surrounding elements if you want to hide
939:34 - surrounding elements if the slot is not
939:36 - being passed in you can use these total
939:38 - slots with an if logic block
939:44 - so we have learned a lot and we have
939:46 - come a long way we've learned how to use
939:49 - a store how to create a store we have
939:51 - learned how to create an action how to
939:52 - use an action and we've learned how to
939:56 - compose or create components how to
939:59 - share data across components how to
940:01 - create slots where you can insert some
940:03 - contents from your component into
940:06 - somewhere that you want to insert into
940:08 - the inner components right and we learn
940:11 - about how to transfer data across we've
940:14 - also learned about how you can
940:16 - dispatch an events from components or
940:19 - dispatch events from elements we've
940:22 - learned a lot and today we're gonna try
940:24 - to use all of them all of the things I
940:27 - have mentioned so far into one example
940:29 - which is how are we going to create an
940:32 - infinite list
940:34 - so what is an infinite list you probably
940:36 - have seen this kind of UI where you
940:39 - scroll and scroll and as you scroll it
940:43 - loads more data and then if you scroll a
940:45 - lot small data and it skips scrolling in
940:48 - finely and we are addicted with this
940:51 - especially in social medias with you
940:53 - keep scrolling and keep seeing new
940:55 - contents where you just can't stop
940:57 - scrolling and scrolling and scrolling
940:59 - I'm going to create this
941:01 - um component called in finite list
941:05 - whereby you can pass in different kind
941:08 - of data to this component and you can
941:11 - decide how to
941:13 - um how to render or how how how does
941:16 - each item within the infinite list looks
941:19 - like
941:21 - so this will involve in how we compose
941:24 - our components so first thing first uh
941:27 - let's take a look at this Ripple that I
941:29 - have kind of prepared actually nothing
941:32 - much over here except that I've created
941:34 - a few files the app the list component
941:38 - which we are going to do the data.js so
941:41 - this is where we're going to fetch the
941:42 - data and an action use viewport action
941:45 - you probably have seen this you probably
941:47 - have done this before in the previous
941:49 - video where I showed how I create this
941:52 - viewport action
941:54 - so links in the description if you
941:56 - haven't seen that before
941:59 - so over here app thoughts felt let's
942:01 - let's imagine how we're gonna use this
942:04 - infinite list so most likely most likely
942:07 - or this is how I imagine right I'm gonna
942:10 - share how I come up with this and uh if
942:14 - you if you if you disagree or something
942:16 - let's comment down below and let's
942:17 - comment uh discuss about it so this is
942:20 - how I would imagine my list component
942:23 - uh will be will be used right usually
942:27 - when you come up with a component you
942:29 - probably instead of like hit you that
942:32 - there's two ways right first is you want
942:34 - to experiment you want to play with it
942:36 - then yeah go ahead uh go hits down to
942:39 - the component and try to experiment with
942:41 - something but sometimes on the other
942:43 - hand when you want to design a component
942:45 - you want to think in terms of how you
942:47 - want to use it how you want to
942:49 - allow people to use it and then figure
942:52 - out how to provide that behavior so over
942:55 - here I want I am imagining that I have a
942:58 - list component
943:00 - okay I have a list component where I can
943:03 - pass in
943:06 - data right I can pass in data like this
943:09 - right so this will be an array of the
943:12 - elements okay so this is empty array for
943:14 - now
943:15 - and
943:17 - I would imagine that I would have also
943:21 - um ways to get so this list will render
943:25 - in finite list right so for each of the
943:28 - elements I probably would want to uh
943:32 - Define how how each of the elements will
943:34 - show right so uh for each of the
943:36 - elements probably I have a variable
943:38 - called a item
943:41 - over here item item is like one of the
943:44 - item of the list of arrays so I don't
943:46 - have to do like a four inch Loop within
943:48 - like in in this app right so the list
943:51 - will do that looping of creating each of
943:54 - the items whenever they need
943:56 - uh all I need over here is I let item
944:00 - and I probably will able to say maybe
944:03 - show a some contents for each of the
944:06 - item right something like this
944:10 - right this is what I would imagine my
944:12 - component will look like
944:14 - I I pass in a list of data and then for
944:18 - each of the item I have I can bind it
944:21 - and then I probably will show like how
944:24 - how each of the item will show
944:26 - and then probably I also would have
944:29 - maybe an event called load more
944:33 - so this will prompt me to load more data
944:38 - right fetch more data so that uh so most
944:41 - likely this will be called when I scroll
944:44 - to the end of the list
944:46 - so this is roughly how I would imagine
944:49 - my list would look like of course there
944:52 - might be more things say for example
944:54 - loading you know you never know that
944:56 - whether you are loading or not or
944:59 - yeah you never know whether you are
945:01 - loading or not right so
945:03 - um I I could pass in as a props
945:06 - or probably maybe like a lot more is a
945:11 - maybe it's like a async function so
945:15 - um then maybe I don't need loading right
945:17 - so every time when I call load more I
945:18 - will just wait for it and when it's done
945:21 - I would
945:22 - when it's when it's pending then I will
945:25 - show a loading icon indicator and when
945:28 - it's done and I I don't need right so
945:30 - then in that case I don't even need to
945:32 - pass in the props called loading
945:34 - um and probably one more thing that is
945:37 - uh
945:38 - maybe like no more data
945:41 - right this is uh helpful when you scroll
945:45 - to the end of this and you realize
945:46 - actually there's no more data to fetch
945:48 - right maybe this this can be a props or
945:52 - maybe we can somehow indicate from the
945:53 - load more I don't know but this is this
945:56 - is one way
945:57 - right so the way I design it this way
946:00 - which means that uh in this app does
946:02 - felt I
946:04 - I will have to Define how what is the
946:07 - data and how do I load the data right
946:10 - um of course there's a lot of different
946:11 - ways of Designing this list this
946:14 - infinite list
946:15 - component it could be that your load
946:18 - more will always return the next items
946:22 - right then probably you would not need
946:25 - this data props because every time when
946:28 - you call load more you will try to the
946:30 - list itself will handle like a pending
946:32 - will maintain a list and pass it right
946:35 - um there's another that that could be
946:37 - another way of doing it but for now I'm
946:39 - probably will keep it simple where list
946:41 - itself will handle that right so
946:43 - probably you'll come here you'll call a
946:45 - fetch more will we will update this data
946:48 - and we'll pass the data down to the list
946:50 - component
946:51 - right
946:53 - um of course you can trick around if you
946:54 - want to feel free to grab the rebel Link
946:59 - in the description and play around and
947:01 - try out different ideas you have
947:04 - so uh first thing is so this is what
947:08 - we're gonna go and first thing is let's
947:09 - come up with an API or what is the data
947:12 - they're going to show right I I found
947:14 - this lorem pixum
947:17 - which gives us a lot of mock
947:21 - photos and there's
947:24 - um there is this link list API where I
947:27 - can call
947:28 - where it has a page ID and a limit so
947:32 - that I can keep calling for get the next
947:35 - page so I probably will gonna use this
947:37 - and use this to show images right so
947:40 - probably my item would have a say
947:44 - download URL which is the image URL so
947:46 - if I click this this is the image URL
947:49 - you can probably would have a download
947:51 - uh download URL over here so here I I
947:55 - let item right I can I could have used
947:57 - item but I can also assign it to a
948:00 - different variable right I think we've
948:02 - learned that where we can say
948:04 - another variable
948:08 - and use like another variable here
948:11 - we can rename the the variable name
948:14 - right and actually you can also you
948:17 - could also if you don't know you could
948:19 - also destructure it
948:20 - and use this download URL instead so
948:23 - here in my list probably I would have
948:26 - image source as the download URL
948:29 - and probably also have like maybe the
948:31 - author where I could use this author as
948:36 - the alt all right I'm gonna say uh taken
948:40 - bye
948:44 - stunning view taken by author
948:48 - right this is
948:50 - this is just to show that I I could
948:52 - destructure and you know have a
948:57 - take out different properties of the LED
949:00 - okay now let's let's since we have this
949:02 - API now let's try to implement the data
949:06 - right okay so first thing is I probably
949:09 - will use a writable data so that
949:12 - whenever I change it changes you your
949:15 - component get notified and then you you
949:17 - would render right so here I will say
949:19 - import writable
949:21 - from svelt Star of course you could use
949:24 - a normal data and then in the app itself
949:29 - you can update that variable right so if
949:32 - I put it in an external file then most
949:34 - likely the best way to update and get
949:37 - notified is through a writable here I'm
949:40 - going to Define some variable say maybe
949:43 - loading
949:44 - false I have no more no more data
949:49 - false and then I have my uh page so this
949:54 - will increments every time when I Fetch
949:55 - and then maybe I have my data over here
949:58 - as an empty array
950:01 - so the first thing I'm going to Define
950:03 - is the list
950:04 - which is the writable
950:08 - all right so this I'm gonna have the
950:10 - data itself and the no more data
950:15 - all right I think I probably would want
950:17 - to yeah this the same name so it's
950:20 - easier for me to do to
950:22 - to assign uh to use it later on okay so
950:26 - so this is the list writable
950:29 - um I I could have just exported this
950:32 - list writable but I also
950:34 - um I I want to also add more methods to
950:39 - this list uh to the store that I'm going
950:42 - to export and also remove some of the
950:44 - methods right I so here is the final
950:48 - star that I would have is I'm gonna have
950:52 - a subscribe method
950:54 - all right subscribe it's a must
950:57 - for to be considered as a store
950:59 - according to the store contract but I
951:02 - don't want to expose the sets and
951:03 - updates method right so I don't want the
951:06 - user of this data this uh image lists
951:10 - data to to update it to modify it I
951:13 - don't want to expose the sets and update
951:14 - I just want to expose subscribe but I
951:16 - also want to add one more methods which
951:19 - is called Fetch more
951:22 - this will allow us
951:24 - um
951:26 - the user of this store to call this and
951:28 - fetch more data right so in later on I
951:31 - will probably come over here and you
951:33 - know look more I will say uh the store
951:36 - dot fetch more
951:38 - I I would call this to fetch more data
951:42 - uh
951:44 - uh yep
951:46 - so before that let's come over here and
951:48 - say okay so now when I called this
951:51 - um I maybe just make some some checks
951:54 - first for example if there's it is
951:57 - loading
951:58 - or is there's no more data
952:03 - then probably will just end immediately
952:05 - so so nothing happens right but then I
952:09 - would say loading to be true
952:12 - and next I would come over here and
952:15 - actually refresh the data right so
952:18 - called Fetch copy this API let me use
952:22 - uh so the page will be page okay I'm
952:27 - gonna say plus plus
952:28 - the limit I'm gonna say just limit to 10
952:30 - 10 items every fetch
952:33 - so here I'm gonna get a response
952:37 - from waiting this fetch API
952:40 - and I would also need to wait for the
952:43 - response to
952:45 - um after I get a response I'm gonna get
952:47 - the Json
952:49 - format of I'm going to Json data of the
952:53 - response body so we're gonna say uh data
952:56 - uh okay I don't want to use the same
953:00 - variable over here we're going to say
953:01 - new data
953:03 - equals to a weight
953:05 - response
953:07 - Json
953:09 - and then
953:11 - um okay so now I'm gonna update this
953:14 - loading it's going to be false now
953:19 - and then a no more data will be depends
953:23 - on how many data that I have so this
953:25 - returns me an array right so if I go to
953:29 - the extreme end say 100 then I get empty
953:33 - array so which means that if the new
953:36 - data.lank equals to zero then it's no
953:40 - more data
953:41 - and now I my data needs to be updated
953:44 - I'm going to push all the new data in
953:47 - and finally I'm going to update my store
953:49 - right so I'm going to say list dot sets
953:53 - uh here and get the data and no more
953:58 - data
954:00 - so I'm going to update my list okay so
954:03 - there we have it and now we're gonna
954:05 - import from
954:07 - data so this is going to call data from
954:11 - data
954:13 - so this is not started this is the
954:15 - data.fresh more
954:18 - um so I'm going to create an async
954:20 - function that calls and return fetch
954:22 - more right this is this can be
954:25 - simplified to just pass it like this
954:28 - right data.fresh more and over here
954:30 - because my my store value has data and
954:34 - no more data I could actually just
954:36 - spread it right I can just spread the
954:40 - data right because the the value of the
954:43 - star is an object with data and no more
954:46 - data I can I can spread this instead of
954:48 - having to come over here and you know
954:51 - data.data and data no more data right I
954:56 - can I can spread it instead
954:58 - okay that is done and
955:02 - we have that done which is nice and now
955:05 - let's take a look at the list components
955:09 - okay so in the list component
955:11 - I need first to create some of the props
955:14 - that we're passing in so the first thing
955:17 - is the data
955:19 - and next is the no more
955:23 - data
955:25 - right and then yeah that's it and
955:29 - because over here we have an event from
955:31 - this component so probably we also want
955:33 - to import create event
955:38 - dispatcher
955:44 - all right so you will create a dispatch
955:46 - method
955:48 - to dispatch this to dispatch a no uh
955:53 - do dispatch
955:55 - dispatch a lot more event later on
955:58 - right now I'm gonna create a list
956:02 - so firstly I'm gonna have
956:05 - unordered lists
956:07 - whoops
956:11 - and we're going to use each to Loop
956:14 - through the data so each data as item
956:19 - and look through each of the data
956:23 - um over here I could use a
956:28 - key each block if I want to
956:31 - um or okay let me think now we can use
956:34 - key each block all right so that
956:37 - if if we somehow reorder them then then
956:40 - it's it's useful
956:43 - but let's let's leave it like this first
956:46 - but if you want to use a pH block you
956:49 - would have to decide what as the key the
956:51 - prop or the attribute to treat as the
956:54 - quiche block and if we're gonna do that
956:56 - but we we have no idea in this this
956:59 - component to know what is the
957:01 - um what are the attribute of this item
957:04 - to be treated as the key for the for
957:07 - each of the item right then probably you
957:09 - would have to say exports that key you
957:13 - would have to have it as a props and ask
957:17 - maybe the user of it to Define like okay
957:20 - so the key should be ID
957:22 - right because you know we can see over
957:24 - here uh for each of the item ID is kind
957:27 - of unique so I can come over here and
957:30 - see Item ID is the key sorry item key is
957:34 - the key and key in in this case is a
957:37 - string ID
957:39 - so in my uh in my each block I'll what I
957:44 - need to do now is actually to create
957:46 - each of the list item and have a slot
957:50 - so slot is where you pass in a
957:56 - this uh where where we we have a default
957:59 - slot so whatever is being written over
958:02 - here this is being inserted into the
958:05 - slots right so as we Loop through we
958:07 - create one list item and every list item
958:10 - will have its slots and for the slots
958:12 - for each of the different slots that we
958:14 - have that we iterate through we can
958:16 - actually pass a different item
958:18 - data right we can pass a different item
958:21 - so over here maybe the first item so the
958:25 - item will be the first item the second
958:26 - the second first image second image
958:29 - third image and so for each of the slots
958:32 - elements that you create maybe you
958:34 - create because of the each block you
958:35 - have three slots elements and each of
958:38 - them has a different item right so each
958:40 - of them will actually insert a different
958:43 - image from here because
958:45 - this image takes in the props of the
958:48 - item and takes a download URL as a
958:50 - source right each of the download URL is
958:52 - different so you have a different image
958:57 - um okay
958:58 - so although I'm not quite sure why is it
959:01 - not okay so next the next thing is we
959:04 - have a fresh data that's why we are
959:06 - seeing nothing over here so to fetch the
959:09 - data we're gonna create another list
959:10 - item
959:12 - and this list item uh I would be uh
959:17 - let's see I'm gonna come over here uh
959:20 - okay use viewports we're gonna import
959:23 - the viewports
959:30 - use view Port action
959:35 - I'm going to use viewport
959:37 - for this list element
959:40 - okay so if say if no more data
959:44 - if if no more data then probably would
959:47 - we would not need to use this again
959:50 - right this list item this last list item
959:52 - will have the viewport so that we know
959:55 - that when it's entering the screen
959:58 - so uh you call enter viewport event
960:04 - on enter viewport so when it enters what
960:07 - we want to do is actually to call uh
960:11 - fetch more data right so uh over here
960:13 - instead of calling a method we are
960:15 - dispatching a new event called load more
960:18 - so here I'm gonna say a hold on load
960:22 - more
960:23 - yeah I I could have
960:27 - um
960:28 - was that I I could have a used event uh
960:33 - forwarding by for the enter viewport
960:36 - instead so if I don't do anything then
960:39 - this will actually create whenever this
960:41 - event is happen this event happens it
960:43 - will dispatch a new event from this
960:47 - component called uh this enter viewport
960:50 - right that's where you see this is being
960:52 - called and fetch more data but I I for
960:57 - the sake of pattern naming because it
960:59 - does not make sense of list to have a
961:01 - and the viewports events so I'm going to
961:03 - come here and dispatch action myself I'm
961:06 - going to say here and dispatch
961:09 - uh enter viewport sorry not enter
961:11 - viewport but load more
961:18 - right um okay so the image is a bit too
961:20 - big so I'm gonna come over here and
961:22 - maybe have a style
961:24 - with equals a hundred percent
961:27 - right so I have a smaller image right
961:30 - now as you can see as you can see my
961:32 - scrolling if I scroll to the end it will
961:35 - this enters and it will load more right
961:37 - uh the image just now is it's like it's
961:41 - trying to load the image right and as I
961:44 - scroll down you see that it will loads
961:46 - more image more image is being loaded so
961:49 - every time when I scroll uh when I this
961:52 - list item enters the viewport you will
961:54 - see that the viewport uh enter viewport
961:58 - event will be dispatchers and here I
962:00 - handle it by Dispatch a new event
962:02 - component event called load more and
962:05 - over here I listen to that and fetch
962:07 - more data
962:10 - um I I initially I was planning like
962:12 - maybe to use this
962:14 - um to give us like the loading but then
962:16 - because events when you dispatch events
962:19 - it's kind of like a couple you don't
962:20 - really get whatever is returned from
962:22 - this event handler so probably I would
962:26 - want to pass in loading into uh exports
962:30 - that's loading
962:37 - uh in in here so that you know uh when
962:41 - when it's loading
962:46 - if loading
962:48 - Flash
962:50 - show a text call loading
962:56 - but we haven't passed this loading in
962:58 - right we haven't passed loading so I can
963:00 - come over here and maybe have this
963:03 - loading as part of the writable as well
963:06 - so loading over here
963:09 - so that means when I said loading to
963:11 - true I also need to update the store by
963:14 - set loading to true
963:17 - right I could use sets I could also
963:20 - because of writable I could also come
963:22 - over here and say update so I have my
963:25 - original
963:26 - uh see
963:29 - data and then return Yes okay no
963:32 - it takes in a function and returns right
963:35 - the
963:36 - current list
963:39 - and I can create a new list by setting
963:43 - loading
963:44 - only
963:45 - which answers okay I need to
963:48 - return new
963:51 - current list
963:54 - or I can do this as well now I have my
963:57 - loading I'm not sure this is easier to
964:00 - read uh probably I'm going to change it
964:02 - back to just to this this is this is
964:05 - much simpler
964:07 - to my eyes right uh in terms of like the
964:10 - effect is is roughly the same it's
964:12 - simple to my eyes with this right so now
964:15 - you can see when I scroll down you will
964:17 - see loading and then you load more data
964:19 - and then you you kind of
964:22 - show more data right so what you've seen
964:25 - over here is probably we
964:27 - didn't really mention it but it's
964:31 - possible where you can have multiple
964:34 - slots elements in a component and you
964:38 - can have multiple slot this slot is the
964:40 - same slim slot name right this is a
964:43 - default slot right if you can have you
964:45 - can have a different name maybe like
964:46 - item and you can come over here and have
964:51 - like this image as a slot attribute
964:54 - called item then they are the same this
964:58 - is still inserted into this slot right
965:00 - so you can have multiple slots elements
965:03 - in a component and you can create them
965:06 - using if each or all any logic blocks
965:09 - they can think of you can have a lot of
965:10 - those kind of slots and for each of the
965:12 - slots you can actually pass in different
965:14 - data right I can I'm passing a different
965:16 - item as props now you get different item
965:20 - over here for each of these slots and so
965:24 - that you can
965:26 - show different Data Insights you can
965:29 - create a different image for each of the
965:31 - item right we can create different image
965:33 - over here so here you go here is how we
965:37 - create an infinite list using all the
965:40 - techniques or knowledge that we have
965:43 - learned so far we'll learn about how we
965:45 - can create a writable star custom
965:47 - writable style basically you have at
965:49 - different meta Studio writable store
965:52 - we learn about actions although we
965:54 - didn't write an action today but we we
965:56 - use it right inside this list components
966:00 - and in a component wise we learned about
966:03 - how to create components how to create
966:05 - slots elements and how to have slot
966:07 - attributes to inserts into them right
966:09 - how we can pass data in so we are
966:12 - passing item from the list components to
966:15 - this main component we'll learn about
966:17 - events so lists we we are listening
966:21 - events from an item we are also
966:23 - dispatching a new event called loot more
966:25 - so you can fetch more data over here
966:29 - we will learn about spreading yeah we've
966:31 - done spreading over here as well so
966:35 - here you go how you can combine all the
966:37 - knowledge you've learned into an
966:39 - infinite list
966:43 - So today we're going to attempt to build
966:45 - another component which is tabs you
966:50 - often see this or even you see this
966:52 - every time when you try to use the
966:54 - spelled Ripple which is the tab right
966:56 - you can come over here and switch a
966:58 - create tab right and you can switch
967:00 - between tabs and the content will change
967:03 - because
967:04 - yeah because you switch the tabs right
967:06 - so let's come up with this tab component
967:09 - and let's try to design this tabs
967:11 - component together right oftentimes when
967:14 - you want to try things yes you can go
967:17 - hit down and try it out but sometimes
967:19 - when you want to design a components you
967:21 - will try to imagine how you want the
967:24 - user to use your components so for here
967:26 - let's try to put on our thinking hat to
967:29 - try to go into imagination try imagine
967:32 - how you would want to use this awesome
967:35 - superb type components that you write
967:38 - right so
967:40 - how this is how I would imagine how I
967:43 - would want to use I'll probably want to
967:45 - have a tabs component at the outsides
967:49 - right I have a tabs and inside I can
967:51 - Define as many tabs I want right so I
967:55 - have tab
967:56 - I can have multiple tabs I want
968:00 - and sometimes based on certain condition
968:03 - I want to show or
968:05 - or remove or hide right based on certain
968:08 - conditions so see if here I'm going to
968:10 - say is logged in
968:13 - okay just just a random condition I'm
968:15 - going to say if based on this condition
968:17 - I'm going to show us hide certain tabs
968:20 - right so for example maybe this is a tab
968:23 - that can at least be seen by a login
968:26 - user right and maybe sometimes I want
968:29 - more than that right I want uh maybe
968:31 - height two tabs at the same time I'm
968:34 - just trying to imagine how I want the
968:36 - user to use this okay uh these are
968:39 - annoying so let's let me just come over
968:41 - here create a script tag
968:44 - just let Define tabs like tab
968:48 - let's
968:50 - log in
968:52 - so they stop bugged me okay let's come
968:54 - back and try imagine again okay continue
968:57 - imagine I have a tabs component inside I
968:59 - can shove as many tab I want
969:02 - and I can have certain conditions to
969:04 - show hide the tabs right so
969:07 - another way of doing this show or hide a
969:10 - certain tab so this is when your height
969:12 - is like it's gone right you don't see it
969:14 - over the tab it's not like whether you
969:17 - are choosing that tab at the current
969:19 - moment right it's just gone so sometimes
969:21 - uh some a different alternative
969:24 - alternate way of Designing this would be
969:27 - maybe
969:27 - uh maybe come to use a props right show
969:31 - uh
969:33 - like shoot show right is look it may be
969:37 - like alternate way of Design This will
969:39 - be uh uh this way right you use a props
969:43 - to decide whether the tabs itself should
969:46 - be shown or not but I find that maybe
969:49 - what I want okay let's let's try to get
969:53 - our imagination well right I want to
969:55 - design it in such a way that I just use
969:57 - the if logic block 2 decides when to
970:02 - show or hide a certain tab I want it
970:04 - this way right okay so I here I have it
970:07 - uh so here is what I want and then next
970:11 - thing is what about tab content right
970:13 - type content should be as easy as go
970:16 - into the tab components and write things
970:19 - right I wanna hey hey for this one
970:23 - and log in content one
970:27 - and I have a login content too and here
970:30 - are like
970:31 - who ha
970:35 - okay so I have three tabs four tabs two
970:39 - of the tabs may be showing uh maybe
970:42 - there or may not be there because
970:44 - depends on the condition call is logged
970:46 - in
970:48 - um so here when you I write this you
970:50 - probably
970:51 - think of like oh I'm gonna use slots
970:54 - Right Slots is the perfect way of having
970:57 - contents inside the components to be
970:59 - inserted somewhere right yeah that's
971:02 - that's right probably will use slots
971:04 - slot element for this
971:07 - and tabs usually comes with a title
971:09 - right so title probably I can come over
971:12 - here and write the title of my tab so
971:14 - I'm gonna have my tab is this is a lack
971:18 - of good names I'm going to call this
971:20 - type one
971:21 - uh this is gonna be a log
971:24 - in tab 2.
971:29 - secret tab three okay I will probably
971:33 - just call it secret as well secret tab
971:36 - two and so type three
971:38 - and this is the final
971:44 - final tab okay maybe final tab will be I
971:49 - want to just show that this can be
971:51 - dynamic I'm gonna come out Divine a name
971:53 - called username
971:55 - and the final tab is actually based on
971:57 - the username right so huhahi this is the
972:02 - user con user
972:05 - uh this is the
972:07 - info for the user
972:10 - name okay so this is the content itself
972:14 - can be dynamic as well this is how I
972:16 - like it and let's try to figure out how
972:19 - to implement this right we just it's
972:21 - come up with like all the things that we
972:23 - want and then we reverse engineer about
972:25 - how we can implement this okay so we
972:27 - need
972:28 - two components right the tabs and tab so
972:31 - I'm going to create the tab component
972:35 - um
972:35 - so for the tab it's quite obvious right
972:38 - you need a props called title and
972:40 - whatever inside is just that types
972:42 - content so I'm going to come over here
972:43 - I'm going to create script export let's
972:46 - title
972:48 - and I have my slots
972:50 - for all the content inside tab
972:52 - right so for the tabs itself yes again I
972:56 - need
972:56 - to use slots to basically insert all of
972:59 - this into somewhere right if you if you
973:01 - don't have a if you don't have a slot
973:04 - for this then you you know shorten all
973:08 - this content will be nowhere to insert
973:10 - and it will not be available at all
973:13 - right so I'm going to come over here and
973:15 - add the slots for this tab
973:18 - so here I now instead of let's tabs I'm
973:22 - going to import Steps From the tabs
973:24 - those Felts
973:27 - same thing goes with tab Imports tab
973:31 - from
973:33 - tap dot spelled
973:37 - okay so now
973:41 - so now I have all
973:43 - the tabs showing on the screen okay
973:46 - username I should say username is me
973:49 - right Liao
973:50 - okay uh oh we've said we wanted it to be
973:54 - dynamic right so we're going to create a
973:55 - input mind value
973:58 - called username
974:01 - so that I can come over here and
974:08 - come over here and change my name okay
974:13 - so we have all the tabs shown at once
974:15 - which is not really what we want we want
974:19 - to
974:21 - uh we want to
974:23 - we want to only show the one that is
974:26 - being selected at the moment right so
974:29 - probably here we can have
974:33 - um I would say like a key for the tab
974:36 - right so usually you you would have like
974:39 - certain things like a key or ID for the
974:41 - tab and in the tabs component you want
974:44 - to see what are the default selected tab
974:46 - right the selected
974:49 - uh
974:50 - uh I selected tab will be the ID would
974:55 - be say something right so I'm going to
974:57 - call ID would be this is this number
974:59 - right so I'm going to see here will be
975:01 - one
975:02 - so I'm going to create id1 id2 ID3
975:09 - and id4 for this
975:12 - so usually you will have a default
975:13 - selected Tab and you could be changed by
975:18 - someone else right so uh you can up this
975:22 - is optional so here my tabs I'll
975:24 - probably will have defined these props
975:26 - all right script
975:28 - uh export let's selected tab
975:32 - and default maybe I'm just gonna say one
975:34 - for now I have no idea what's going to
975:36 - be
975:37 - okay and then tab I also needs to come
975:40 - over and say Define the ID as well
975:46 - okay so now
975:48 - tabs and tab has to talk to each other
975:50 - right I need to tell my tab when you
975:53 - should show your content right now my
975:55 - all my tabs is showing all their content
975:57 - let me let me wrap this whole thing with
976:00 - a div so that it looks
976:03 - nicer right I'm gonna wrap all this with
976:07 - a div
976:08 - so that they are on different lines
976:12 - so I have two tabs content right now
976:15 - because it's login is false right so
976:17 - once I set this to true then you see
976:19 - that you have four contents
976:21 - so I want to have a way for the tabs
976:25 - component to tell the tab that hey uh
976:29 - you should be hidden or hey you should
976:31 - be showing right now
976:34 - and usually that is being done by if you
976:38 - if you have the tab component within the
976:40 - tabs component then what you usually do
976:42 - is you probably pass the props tell that
976:45 - right but in this case we don't really
976:47 - part don't really import tab component
976:49 - in the tabs uh but we actually pass a
976:53 - tab inside tabs so tab is actually a a
976:57 - children it's actually a children of
976:59 - tabs but we just don't have a way to
977:02 - communicate right so there's a few ways
977:04 - to do this
977:05 - first is you could pass it through slots
977:09 - right you can say uh select the tab is
977:12 - this
977:16 - select the tab is this and you can come
977:18 - over here and use let's binding
977:22 - right let's select the tab and for each
977:25 - of the tab you kind of pass in selector
977:27 - Tab and decide whether you should be
977:31 - showing a you should be showing your
977:35 - slots
977:36 - right based on a certain condition
977:38 - whether your selector tab is equal to ID
977:42 - and it should show or not right so let's
977:46 - So based on this ID this decides whether
977:49 - you should show your tab or not but
977:52 - we're adding one more thing over here
977:54 - which which is I don't like right I
977:56 - already come up with a design where I I
977:58 - don't have to pass all this right I just
978:00 - want to write like this
978:01 - so what's the alternative to pass data
978:05 - besides going through props
978:08 - context are you thinking about context
978:11 - hopefully hope I hope that you are
978:13 - thinking about context because that's
978:14 - what we're gonna use so we're going to
978:16 - come over here with tabs I'm going to
978:18 - import
978:19 - set context
978:22 - from these Felts
978:26 - and I'm going to set a tab context right
978:29 - so we're going to set set context
978:32 - um call selected tab
978:36 - I'm going to pass the selected tab over
978:39 - okay and over here each of them I don't
978:42 - have props anymore to read it I'm gonna
978:44 - say get contacts
978:49 - and
978:50 - let's select it tab equals to get
978:54 - contacts
978:56 - select a tab
978:59 - and now you can see that you only have
979:02 - one tab showing right which is hey hey
979:05 - because right now you're selecting
979:06 - number one if you say number three
979:08 - number two then number three then you
979:10 - will see login content two right you can
979:13 - say number two then you'll see login
979:14 - content once right that's great that is
979:17 - what we exactly what we want
979:19 - now
979:21 - um now we have one more thing that we
979:23 - haven't settled which is the title right
979:24 - there's no way to click the tab right
979:26 - here you can choose between tabs because
979:28 - you can see the title and click it but
979:30 - here you can't right so once again how
979:34 - do you pass data from one component from
979:37 - a grandchild from your tab component to
979:39 - the parent right previously we learned
979:42 - several props where you can do something
979:43 - binding to pass but uh we we've come
979:48 - we've come to the conclusion that we
979:50 - should use the context to pass the
979:52 - selector tab to the child component
979:55 - which is a tab
979:56 - and we can do the same thing as well to
979:58 - use context to pass data from the tab
980:01 - all the way back to tabs right so here
980:04 - I'm going to create another context
980:07 - uh called titles
980:10 - and here I'm going to gonna have a
980:12 - personal object uh with two methods one
980:16 - is called register tab
980:19 - and one is called unregistered tab
980:25 - so this is a way for me to register and
980:27 - unregister tab uh using a so I'm going
980:30 - to call it with a ID with a title and
980:34 - unregister with an ID okay so here I I
980:38 - provide these two methods let's say tab
980:41 - titles
980:43 - well probably doesn't matter okay
980:45 - provide two methods so that uh over here
980:48 - my tabs I can get this and I'm going to
980:50 - register myself and cover here gets
980:53 - contacts
980:55 - uh this is the uh tab titles
981:00 - and I'm gonna register myself so guys
981:02 - call here type titles
981:04 - register
981:08 - uh ID
981:10 - right and when I am
981:12 - unmounted so say for example on Destroy
981:20 - I need to unregister myself because say
981:23 - tab titles dot unregister ID
981:28 - actually I need to pass ID and the title
981:32 - okay so I've registered myself and I
981:34 - remember to unregister myself of course
981:37 - I need to import this from sveld as well
981:41 - okay hold on tap titles is not register
981:45 - oh I should call register Tab and
981:48 - unregister tab
981:52 - all right so you register yourself when
981:54 - you are being created and when you are
981:56 - destroyed you unregister yourself so
981:59 - that is how we can achieve when certain
982:01 - things is on and off you
982:04 - um when this is false then you are
982:06 - destroying these two and we need to
982:08 - unregister ourselves to remove the two
982:11 - tabs right
982:12 - so here now I can come over here and
982:15 - implement the array
982:18 - okay
982:20 - probably do it here array which is a
982:23 - titles that I have
982:26 - let's see probably I'm gonna use okay
982:29 - I'm gonna push
982:31 - on the title and the ID
982:36 - as an object into this array
982:39 - right and when I want to register
982:42 - unregister I need to find out uh
982:47 - index want to find out the titles so I
982:52 - need to find out the title that you know
982:55 - I'm gonna title that ID that matches
982:58 - the ID that I'm gonna remove
983:01 - all right Tap index and I'm gonna remove
983:05 - it so I'm gonna say type if tab index
983:11 - if I find if I can find it if it's
983:14 - greater than negative one then I will
983:15 - say titles dot splice
983:19 - uh okay that this have to be less than
983:22 - title dot supplies
983:25 - um type this tab index
983:28 - and what I'm going to remove one item
983:30 - and I need to make sure I update the
983:33 - title so I'm going to say titles equals
983:35 - titles over here same thing goes for
983:37 - here so that's spelled knows that I am
983:40 - updating this variable called titles
983:43 - okay so here I have all the titles I'm
983:47 - going to create all the tabs so can I
983:49 - use I'm just gonna use simple things
983:51 - like button
983:53 - uh and I'm gonna use each to Loop
983:57 - through all the titles
983:58 - titles as so each of the item is an
984:02 - object that has I ID and a title
984:07 - oops that's let me come over here and
984:11 - each
984:12 - right so each of the button I can show
984:14 - the title
984:20 - right so I have four tabs right now
984:22 - and upon clicking
984:29 - I want to set the selected
984:32 - tab
984:34 - to the ID right
984:38 - so here I have four tabs and if I come
984:43 - over here and say for example if I have
984:45 - certain condition
984:47 - inputs fine
984:49 - check
984:52 - equals to is log in
984:55 - this is my favorite way of defining a
985:01 - of to control a variable right using a
985:04 - checkbox so if I unchecked you see that
985:06 - I only have two tabs left if I check
985:10 - then you have
985:12 - um
985:13 - four tabs right okay the order is wrong
985:16 - now because this is being pushed in
985:18 - later on so this probably something that
985:21 - we need to think about and figure out
985:23 - later on but here let's have all my tabs
985:27 - um let's here let's switch between tabs
985:30 - does not work
985:31 - right we've updated this variable but
985:33 - it's not a
985:36 - it's not updated it's not reactive
985:38 - because variables are not reactive
985:41 - across context you can't react make it
985:44 - reactive across components and we have
985:46 - to talk about this in a context versus
985:48 - Star when when should you use a reactive
985:51 - star a reactive context using store
985:54 - which is a writable plus context combo
985:56 - and this is exactly the case when we we
985:59 - need it so someone come over here and
986:01 - say import writable
986:03 - from svelt's store
986:06 - I'm gonna make this a writable object
986:13 - okay
986:14 - make this a writable
986:16 - so I'm going to pass in a writable
986:18 - selector tab
986:19 - and here since it's writable I'm going
986:23 - to come here and see where where am I
986:27 - yeah I'm gonna update this using a
986:29 - dollar sign right select the tab equals
986:31 - ID
986:33 - okay
986:36 - but
986:38 - um this over here we pass in selected
986:41 - tab S2 right this again has to be uh so
986:46 - two ways of doing this this can be a
986:48 - default
986:50 - uh a default selector tab or this we
986:55 - want to pass in a string then probably
986:57 - we cannot reuse this anymore
986:59 - we can we would have to create a new
987:02 - variable called selected
987:04 - tab star
987:07 - and create a writable store like this
987:10 - right writable
987:12 - selected tab
987:16 - and I'm going to pass it this over here
987:19 - write this instead
987:22 - and now what I'm getting is a star so I
987:27 - need to use a store to to to get the
987:30 - value of the store right now as I switch
987:33 - you can see that I am switching the
987:34 - switching the step right and the title
987:38 - is it uh reactive no it's not
987:42 - so what should I do I need to come over
987:45 - here
987:46 - um get the title exchange right every
987:49 - time my title change I need to do
987:51 - something right I probably would
987:54 - whenever title change I want to update
987:57 - my title right so this slide starts to
988:00 - become more complex we need to come over
988:02 - here and see we can register and
988:04 - unregister we can also come over here
988:07 - and
988:08 - do things like update my title my ID
988:12 - title because the all the list of titles
988:16 - is being managed over here in the tabs
988:18 - right I need to provide a way to update
988:19 - Title if I want to and I'm going to copy
988:22 - this
988:23 - find the ID I find the index and then
988:27 - I'm going to say titles tab index.t
988:30 - title
988:32 - equals to the title that it wants right
988:35 - so now if I come over here
988:37 - I need to call tab titles dot update
988:42 - Title
988:44 - with the ID and the title
988:46 - now when I change this you can see that
988:49 - the title is updating now right if I
988:51 - switch to this tab this is updating as
988:52 - well so it's remove right I can update
988:56 - my title dynamically
988:59 - okay so what's next what's left right we
989:02 - can switch between tabs
989:04 - we can have a
989:07 - uh we can hide and show tabs although
989:10 - the order is wrong but they are still
989:12 - working fine I I resume okay so here I
989:17 - can also change the selected tab from
989:20 - outside
989:21 - can we I think we we should allow people
989:24 - to change the tabs right so say for
989:27 - example for some reason I have a button
989:29 - over here
989:40 - click me
989:42 - for some reason I can change the
989:45 - selector tab
989:47 - to say 4 okay
989:50 - so this now suddenly becomes a variable
989:53 - that I can change that is dynamic I
989:56 - select the tab equals to two
990:01 - let's see yeah
990:02 - so I can switch between tabs
990:05 - and I also want to click this and switch
990:08 - to 4 but it's not it's not switch to so
990:12 - what should I do well again come over
990:14 - here you see that this uh it's just red
990:18 - once when you create a writable and then
990:20 - it that's it so here probably you will
990:23 - have once to have a relative statements
990:25 - to update this variable every time right
990:28 - selected
990:29 - tab star equals to selected tab right so
990:33 - this what is the dependency of this
990:35 - statement select the tab so every time
990:37 - select the tab change you want to update
990:38 - the value to the store
990:40 - all right so we can just come here to
990:42 - switch my tabs and if I click this it
990:45 - should switch to this tab as well
990:47 - uh of course here we can't really see
990:50 - what is being selected from the button
990:53 - so maybe I can come over here and maybe
990:55 - add some Style
990:56 - right so I can come here and say a
990:59 - button that says that has a class called
991:02 - selected maybe you should have a
991:05 - background
991:07 - color uh background black
991:11 - and color white
991:15 - so we have learned this before how do we
991:17 - dynamically add class we can based on a
991:20 - certain condition you can see it's class
991:21 - selected equals to
991:25 - this right this is the condition if the
991:27 - class is selected
991:29 - it goes to ID
991:32 - let's see okay now this is this this
991:34 - should be a dollar right at the class
991:37 - when it's being selected so now you can
991:38 - see that secret Tab 2 is selected a
991:41 - switch is it will highlight the tabs
991:43 - being selected
991:44 - right if you can switch the last tab
991:46 - come over here and
991:48 - hold on oh yeah so this switch
991:52 - internally but it does not update the
991:53 - variable outside so that is something
991:56 - still something slightly wrong
992:00 - um so I would say we can come over here
992:04 - we want to update back this variable
992:06 - called selected type right so probably a
992:08 - better way is to bind it right to bind
992:12 - the value out to the variable outside so
992:15 - over here you can see that a selected
992:18 - tab is number two right and I switch I
992:21 - should update this variable as well uh
992:24 - which means I need to come over here and
992:27 - do the reverse of this if you come over
992:29 - here and say select the tab equals to
992:33 - to select the tab star
992:35 - right uh however it gives me a cyclical
992:40 - dependency detected okay so
992:44 - um let's see what should I do
992:51 - obviously you can see that I never
992:53 - planned this before I just wing it so
992:56 - let's let's figure out how we should do
992:58 - this right so every time uh
993:01 - select the tab has changed we need
993:03 - updates like the tab store and select
993:05 - the tab change
993:12 - okay obviously uh
993:16 - I wouldn't say Obviously but a
993:18 - workaround to bypass this cyclical
993:20 - dependency is to create a function
993:24 - uh
993:26 - so that it does not see this
993:28 - dependencies cyclical dependency
993:31 - but that does not mean it's a good idea
993:34 - to do it because we if we
993:38 - override it
993:42 - if we do it this way
993:48 - we may end up with an uh
993:52 - we may end up with a circular recursive
993:57 - endless request recursive Loop of
994:00 - updating right but let's try and see
994:03 - okay I I at least right now it seems
994:06 - okay
994:07 - let me switch this before switch back
994:10 - again yeah it looks okay from now set so
994:13 - hopefully that is still doing good so if
994:16 - you have so what what what's happened
994:19 - and what how do we divert this hard
994:22 - limit well
994:24 - um we we change this to a function
994:27 - instead of like assigning the value
994:28 - directly and what that changed is that
994:31 - now spell only sees that uh you only as
994:35 - long as update props change or selected
994:37 - tabs store changes then you will call
994:40 - this declarative statement right
994:44 - so what's what what happens is that
994:48 - um
994:48 - if you have a variable over here instead
994:51 - then it would know it will look at this
994:53 - variable and say this depends on this
994:56 - and so it depends on this store
995:00 - and this star depends on selected tab
995:02 - right if you have selected tab equals to
995:04 - store and start go to selected tab then
995:07 - they are depending on each other right
995:09 - so if you remove it and you just shove
995:12 - it into another function spell will only
995:14 - see this statement and couldn't figure
995:16 - that that is actually a cyclical
995:17 - dependency here so I'm not telling you
995:19 - that you should do this uh do it at your
995:22 - own cost I feel that there are some
995:23 - things that I I I can't think of right
995:26 - now but there might be something that
995:28 - may not be that right maybe there will
995:30 - be a few Loops before it settles
995:33 - um but let's let's so let me know if you
995:37 - see any issue with this right so I'm
995:40 - just going to leave it here because
995:41 - apparently it seems like it's working
995:44 - right it changes my variable and I click
995:46 - I can update them as well
995:49 - and now if I come over here and I hide
995:52 - this
995:53 - and I turn it on again
995:55 - it's showing but at the wrong position
995:59 - so now let's take a take a look at here
996:02 - and let's think about how we can fix
996:04 - this
996:05 - well apparently again I've never
996:08 - prepared for this so that's why I'm
996:10 - thinking together with you so here I'm
996:13 - hiding I'm showing
996:15 - okay so let's let's take a look at how
996:18 - do we how are you able to tell
996:21 - the order from here to the uh
996:30 - to the tabs right
996:32 - there's no way that we can tell and how
996:35 - how but how do we get the order right in
996:37 - the first place well the order was right
996:39 - because its login was turned on
996:43 - okay false
996:45 - in the first place right so if you it's
996:48 - false and you create this then these two
996:51 - will be definitely be pushed later on
996:54 - we push later on into the array and you
996:57 - never know where it was intended in the
997:00 - first place right so now let's think a
997:02 - bit at how is there a way for the tabs
997:06 - components to know uh their relative
997:11 - position amongst each other
997:16 - I feel like there's no way to do that so
997:20 - it means that there's no way that we can
997:21 - fix this
997:27 - now for now I don't think there's a way
997:29 - that we can fix this so let me know
997:31 - again on the comments down below uh
997:34 - comment if you have any good idea to
997:36 - handle this right so there's no good way
997:39 - then which means that we kind of have to
997:41 - sacrifice a bit with our design
997:46 - and come about and say maybe other right
997:49 - if you want like some fixed ordering
997:52 - come up with a props call order and uh
997:57 - and therefore you can get away with
998:00 - having a
998:03 - yeah come up with a thing called order
998:05 - and then you can register and pass this
998:07 - order to the titles so that you can have
998:10 - a control with the other
998:12 - right
998:14 - I guess that's why
998:16 - uh
998:18 - maybe a less
998:21 - obnoxious way of doing like having to
998:23 - pass order is to pass maybe a condition
998:27 - to say show tab right so this way
998:32 - uh
998:37 - this way you maintain the order because
998:40 - the component has obviously created but
998:43 - then because of show tab you can say
998:45 - that hey you can tell over here you can
998:48 - have a way to say hey this tab is hidden
998:50 - and another method they say hey show
998:52 - this tab now right so you you have your
998:55 - titles being created at the right order
998:57 - at the very beginning because all the
998:59 - components has already been there except
999:01 - that you also pass in the flag to tell
999:03 - that which tabs should be shown or
999:06 - should be hidden so that
999:08 - um when you un untoggle that you still
999:12 - maintain the right order
999:15 - so that's all for now I think because I
999:19 - can't basically I'm hunting of a better
999:21 - way of solving this so as I said I'm not
999:24 - I I don't know every no I I don't know
999:27 - everything so if you have a better idea
999:29 - comment down below tell me and we can
999:31 - learn this together
999:33 - right so uh what we have done so far
999:36 - we've created a tabs component uh by
999:38 - coming up with a nice uh a nice design
999:42 - component uh component design that we
999:45 - have and then figure out how to fill in
999:47 - the gaps on how to achieve what we want
999:50 - right so things that we have used so far
999:52 - we have we have used context to pass
999:54 - data around from tabs to the tab and
999:57 - pass the tab to the tabs right we pass
1000:01 - um we pass like uh one other selected
1000:03 - tab from the tabs to Tab and we pass uh
1000:06 - titles register like our title register
1000:08 - our
1000:10 - contents ID and title from tab to tabs
1000:15 - then we use uh store in our context
1000:18 - right a reactive store a reactive
1000:21 - context and along the way we also use
1000:24 - things like binding and let's see how we
1000:27 - can use a rectif statements and we have
1000:30 - some workarounds with that so hopefully
1000:32 - this is useful for you to implement
1000:35 - something more nice nicer than what I
1000:38 - have over here my tabs is hideous right
1000:41 - although it's working but it's hideous
1000:43 - but I believe you can do something much
1000:45 - better
1000:48 - So today we're going to talk about two
1000:50 - more magic Global variable which is
1000:53 - dollar dollar props and dollar dollar
1000:55 - rest props
1000:57 - so what are they what are they used for
1001:00 - what are they good for well we'll take a
1001:03 - look at examples and I'm going to show
1001:05 - you what are they for okay so let's take
1001:07 - a look at the example
1001:10 - so here I am trying to come up with a
1001:14 - super nice button component so maybe say
1001:17 - you're a button Library author and you
1001:20 - write very good button library and you
1001:22 - come up with this button
1001:24 - and
1001:26 - and you saw that the user can pass in
1001:29 - different kind of button different types
1001:31 - of button so you can pass in a primary
1001:33 - type or secondary type which renders a
1001:37 - very nice red and gray button for
1001:39 - primary and secondary well that's that's
1001:41 - great so let's take a look at how the
1001:43 - button is implemented over here we are
1001:46 - actually using an actual button but
1001:48 - based on the button type we create a
1001:51 - different class for this button right
1001:53 - and whatever is being passed into this
1001:55 - button and what is whatever is passed in
1001:58 - will be slotted into this slot element
1002:00 - that we've written over here so users
1002:03 - can come over and say do different
1002:06 - things to a button maybe add some bold
1002:09 - text
1002:10 - right it's up to them this looks fine
1002:12 - right this looks great until someone
1002:16 - requests new features to a button say oh
1002:19 - I like your button but can I add
1002:22 - custom styles to your element to your
1002:24 - button component I say yeah sure you can
1002:27 - pass Styles right you can pass Styles
1002:29 - like this a let's see font size equals
1002:33 - to 20 pixel right you can pass those
1002:36 - like this
1002:37 - yes but I have to handle it so you go
1002:40 - over to your button component and you
1002:43 - export let's style you create a new
1002:46 - props so that the user can pass that in
1002:48 - and after that you have to pass the
1002:50 - style to your
1002:52 - um button element as well so you pass it
1002:54 - around to a button element
1002:56 - and that's it now your button can have
1002:59 - custom Styles isn't that great
1003:02 - and then again more requests comes the
1003:06 - user was happy but now they want more
1003:08 - they want to see him
1003:11 - I read about a accessibility I want to
1003:15 - pass in
1003:17 - area label to my button because for some
1003:21 - reason my text is X but it's actually a
1003:25 - close button I want the I want the
1003:28 - uh
1003:30 - speech sorry what's that called again on
1003:33 - a screen reader yes I want a screen
1003:35 - reader to read out this button as a
1003:37 - close button I want to see Aria label
1003:39 - for this is close
1003:41 - can does that work it does not work I
1003:44 - pass this property but it does not work
1003:46 - so you say let me think about it okay
1003:50 - I'm probably gonna say how about I I
1003:54 - can't really name my prop as
1003:57 - Arya
1003:59 - props area label contact I can't do that
1004:02 - right I probably will have to say a real
1004:05 - label no it does not really work that
1004:08 - way as well so I will say okay I'm going
1004:10 - to come up with a property called Aria
1004:12 - label
1004:13 - and I'm gonna come over here and say
1004:15 - Arya
1004:17 - label
1004:18 - to this Aria label
1004:22 - and now you should change it to this way
1004:25 - right
1004:26 - so you go and change your code you add
1004:29 - more props to your component and
1004:31 - sometimes you have to rename your
1004:33 - components and
1004:35 - so that you can pass it you can you can
1004:37 - handle it and pass it to your button
1004:39 - elements that's great right again user
1004:43 - wants more they wants to do more thing
1004:45 - with this button they want to say um is
1004:47 - it possible to pass in like on click to
1004:50 - your button is it possible to
1004:54 - um
1004:55 - passing other attributes that is
1004:57 - available for HTML elements right on
1004:59 - click is available for HTML elements
1005:01 - Aria label is available HTML element
1005:04 - style and there's a lot of other uh
1005:07 - elements HTML attributes that you can
1005:09 - pass the button I want to add them I
1005:13 - want you they want to add it to the
1005:15 - button and they want you to support it
1005:18 - and now you say now you have a headache
1005:20 - every time they come up with a new
1005:21 - attribute someone invented a new
1005:23 - attribute you kind of have to think
1005:25 - about I need to add it to my props and I
1005:27 - need to pass it to my elements so is
1005:29 - that a way that you can
1005:31 - um do it once and for all
1005:35 - all right let me just remove this I
1005:37 - think three attributes is enough to
1005:40 - handle this is kind of too much to
1005:42 - handle
1005:43 - I feel I'm not sure about you
1005:46 - all right so what should you do well the
1005:50 - dollar dollar props and dollar rest
1005:52 - props is here to rescue
1005:54 - so what are they well basically uh
1005:57 - dollar dollar props if you try to
1005:59 - console
1006:00 - dollar dollar props it's actually
1006:05 - I kind of showed it here why can't I
1006:09 - let's see no problem I shall come over
1006:13 - and
1006:16 - just show it here
1006:18 - so dollar dollar props
1006:21 - is actually an object
1006:23 - which
1006:29 - has all which is all the properties that
1006:33 - you bring past into this component all
1006:35 - of them right so if you see style area
1006:38 - label and maybe you add class
1006:44 - do it
1006:46 - um let's see Class A B C all of them uh
1006:51 - you can even have like uh full equals
1006:54 - bar all of the props that you can pass
1006:56 - in will be available as the in object
1006:59 - called dollar dollar props and it will
1007:01 - be reactive so if you change your if you
1007:04 - change your value over here say for
1007:07 - example if it's a timeout
1007:14 - so maybe your type initially is called
1007:17 - primary
1007:18 - and then maybe one second little type
1007:20 - becomes secondary
1007:25 - uh let's see
1007:30 - all right then you see that it changes
1007:32 - as well the props the props itself is
1007:36 - reactive
1007:38 - and that's great so now you basically
1007:40 - need to you have an object and you have
1007:43 - an element that you want to apply it an
1007:45 - object of properties to it what do you
1007:47 - do well you use a spread props so over
1007:51 - here you try to spread over all the
1007:56 - props that you have
1007:59 - oops that's that so you can remove all
1008:02 - of divs and spread all of them to your
1008:06 - button right as you can see your button
1008:09 - itself now
1008:11 - um is big
1008:12 - because you spread the style over the
1008:15 - button itself is now
1008:18 - um have an area label of clothes so
1008:20 - you've inspect
1008:23 - the button element in the inspector
1008:28 - oops
1008:30 - inspects it you should see that the
1008:33 - button itself
1008:34 - has an area label of close it has all
1008:39 - the properties that you were passing
1008:42 - into that sorrow
1008:46 - it has
1008:49 - all the properties that you're trying to
1008:52 - pass through right the class area label
1008:55 - the food the style name type and
1008:57 - everything
1008:59 - well but we lost the color aren't we
1009:02 - right uh so we we kind of lost this uh
1009:07 - the color of the
1009:10 - button because we we spread all the
1009:14 - things over here which include which
1009:17 - include class let me let me remove these
1009:19 - two since we are not using it anymore
1009:22 - we spread everything over the props
1009:24 - include a property called class so that
1009:27 - class overwrites whatever in the class
1009:29 - over here right so so that's that's too
1009:32 - bad you kind of spread everything that's
1009:35 - being given by the button so all the
1009:39 - props that you can see type style area
1009:41 - label class full are all spreaded to
1009:44 - this which is great but not that great
1009:47 - because first thing you you override the
1009:50 - class because you already spread the
1009:51 - class over and you overwrite it
1009:54 - um the the way I walk around is probably
1009:57 - come over and reverse it but
1010:01 - um if say for example in my app does
1010:04 - felt I really do have a class called a
1010:08 - okay I should make it Global because it
1010:12 - does not match anything at the moment
1010:13 - okay Global a I'm going to make the
1010:16 - phone uh style to be italic
1010:21 - now you don't see or you don't see your
1010:24 - buttons to be italic don't you but if
1010:27 - you reverse this
1010:31 - you see your text is italic but then you
1010:34 - don't see your class button primary
1010:37 - applied
1010:38 - aren't you so what should we do about
1010:40 - this
1010:41 - uh maybe we should take out the the
1010:45 - class
1010:48 - um are we supposed to come over
1010:51 - spread over first and then uh class and
1010:54 - then we add a prop start class right is
1010:57 - that is that is that how we should do
1011:00 - yeah probably right but then again if
1011:03 - you inspect element you also see that
1011:04 - the type is being spreaded onto this
1011:07 - button as well but we don't really need
1011:08 - type right type is something that we
1011:11 - can't kind of invented for our
1011:13 - components that is just for us to decide
1011:16 - what kind of class that we apply to the
1011:18 - button and we don't really need that
1011:19 - type to be spreaded into the attribute
1011:22 - of the button
1011:23 - so what should you do
1011:25 - well
1011:26 - Here Comes rest props so rest props
1011:30 - on the other hand
1011:32 - is the rest of the properties that are
1011:35 - not defined as the properties
1011:38 - okay so Props are whatever so dollar
1011:41 - dollar props are whatever being passed
1011:44 - over here right what are all the props
1011:46 - that you pass over here are dollar
1011:48 - dollar props
1011:49 - and rest props are all of the props so
1011:53 - everything of dollar double props minus
1011:55 - the one that is declared as props so
1011:58 - type is declared as props so you don't
1012:02 - um
1012:03 - so dollar dollar rest props itself will
1012:06 - not
1012:07 - have the type right if I come over here
1012:09 - and you inspect
1012:11 - this button
1012:13 - you'll probably see that you'll probably
1012:15 - see you probably won't see type oops
1012:21 - let me close this drag it down yeah you
1012:25 - probably don't see type over here let me
1012:27 - zoom in a bit so that if you can see it
1012:29 - clearly you don't see types over here
1012:32 - all right previously if you use
1012:35 - props instead
1012:37 - then you'll see that the type primary or
1012:39 - secondary is being passed in so rest
1012:41 - props is great if you know some of the
1012:44 - things that you don't want because you
1012:46 - want to handle it differently so you you
1012:48 - export them as props at the same time
1012:50 - you want the rest of the things that
1012:52 - unknown kind of like being specified to
1012:54 - your but being specified over here as a
1012:56 - button that is unknown but you want all
1012:58 - of them collectively and then do
1013:00 - something with it then rest props is
1013:03 - great for that case so I use rest props
1013:06 - and then
1013:08 - I can also I can also do this I can
1013:14 - Define class as my props as well
1013:17 - okay class is ah this is tricky because
1013:20 - class I can't really use this as the
1013:24 - color the
1013:26 - ah okay I can't really do that so
1013:30 - um so I can't uh kind of fix it with
1013:34 - class but we can show uh how about style
1013:38 - right let's just show about style so say
1013:40 - for example I have a star over here and
1013:42 - say a color it goes to Green
1013:48 - right you have a green text and if you
1013:51 - come over here and say I want to add
1013:53 - other styles like font size you probably
1013:56 - see that the font size is being undoed
1013:59 - right uh and because this style comes
1014:02 - before it comes after the rest props or
1014:05 - if you reorder this you'll see that the
1014:07 - text itself is now no longer green and
1014:10 - if you are one both of them you probably
1014:12 - will have to like this way you do dollar
1014:15 - dollar props and Dot class right to get
1014:17 - it but if you say export let's start
1014:22 - over here then you extract the style
1014:26 - away from rest props early because rest
1014:28 - props is what it's all the things being
1014:31 - passed as I shouldn't come over here
1014:34 - it's all the things that you're being
1014:35 - passed as the props minus of whatever
1014:39 - thing that you kind of declared over
1014:41 - here so you have a type style area label
1014:45 - class full minus type and style so you
1014:48 - get only only available class and full
1014:51 - right and now you can just get this
1014:54 - and add it over here right nicely done
1014:58 - and you can see you get a big text and a
1015:01 - green text as well
1015:03 - so here I was initially I was thinking
1015:06 - of doing it for class but then you can't
1015:09 - really export let class it's it's not a
1015:12 - JavaScript it's not a valid JavaScript
1015:15 - syntax so I'm just going to leave it be
1015:17 - all right so now you learn about rest
1015:19 - props and props
1015:21 - we see mostly I think most of the time
1015:24 - it's it's kind of useful when you want
1015:27 - to spread all the attributes to your uh
1015:31 - elements from a component props to a
1015:33 - spread all the unknown component props
1015:36 - known on unknown mostly unknown uh onto
1015:40 - the component from the component props
1015:43 - to something else right for example like
1015:45 - the elements attributes
1015:47 - and let's take a look at another example
1015:50 - so that you don't uh let's try and see
1015:53 - different possibilities of using props
1015:55 - or rest props
1015:57 - here I'm going to create a component
1016:00 - called joke because I found this joke
1016:03 - API web that can create jokes for us
1016:07 - okay so this API is called joke API dot
1016:12 - Dev
1016:13 - and I'm going to come over here and copy
1016:16 - it so here I have I'm going to call this
1016:20 - API with a width uh
1016:23 - okay I probably would want to just have
1016:26 - a button to load so just in case we
1016:28 - don't
1016:28 - um
1016:29 - uh hit the rate limiting so I'm going to
1016:33 - create button and I'm gonna say load
1016:37 - joke
1016:46 - okay so here I Define a function called
1016:49 - load joke
1016:52 - I'm going to call this API
1016:54 - and I okay right now I'm gonna call any
1016:58 - joke with a single type
1017:00 - so here I'm going to async
1017:03 - okay response a wait
1017:07 - and I'm gonna uninstall
1017:09 - um data equals a with response.json
1017:14 - and let's see what should I get from the
1017:16 - data
1017:18 - um joke right I'm gonna get a joke so
1017:21 - here I'm going to Define a variable
1017:22 - called joke
1017:24 - and I'm going to assign joke
1017:26 - equals the data.joke
1017:29 - okay so every time I load a joke I will
1017:31 - get a joke and I'm gonna display it so
1017:34 - here is the joke
1017:36 - okay this is my joke component I'm going
1017:39 - to come here and import this import joke
1017:42 - from joke that's felt okay let me Let Me
1017:46 - Maybe remove this let's see where I'm
1017:49 - gonna use my joke over here
1017:54 - okay when I load the joke you see that I
1017:58 - get a new joke
1018:00 - okay so what does this gonna do with
1018:02 - props can you please direct go to the
1018:06 - point well over here if you take a look
1018:08 - at the joke API there's a lot of things
1018:10 - that you can configure
1018:12 - and it doesn't make sense that you come
1018:15 - over here and Define all the different
1018:17 - props that allows people to Define for
1018:19 - your joke right
1018:21 - um sometimes you want to have joke that
1018:24 - is maybe of type a single
1018:27 - see type single
1018:30 - or you want to type okay no let's let's
1018:32 - not do single things where do you have
1018:34 - we have done that let's do a two-part
1018:36 - joke so the type if it's the type two
1018:38 - parts then you're gonna see a two-part
1018:40 - joke
1018:42 - okay and what else can we do for joke
1018:45 - API we can have Flex to Blacklist so now
1018:49 - I want to Blacklist Flex called NSFW not
1018:52 - safe for work okay let's let's do that
1018:55 - okay what else can I pass to my joke API
1018:58 - say for example I want a custom joke
1019:01 - maybe just a programming joke
1019:03 - um so this is the type it's the
1019:07 - categories right so categories
1019:11 - it's called programming
1019:14 - uh let's see if I don't miscellaneous
1019:16 - what happens okay if I miscellaneous I'm
1019:19 - gonna have comma right so I'm gonna have
1019:21 - programming and dark joke so this is
1019:24 - gonna be my
1019:25 - Doc and programming joke okay so uh what
1019:30 - else can can I get different kind of uh
1019:33 - configuration amount of jokes on my
1019:35 - language let's switch for a French joke
1019:38 - so language code is called French
1019:40 - although I don't understand French but
1019:42 - let's try and do that so language is
1019:44 - French
1019:46 - okay so we have custom joke component
1019:49 - with I want to customize through the
1019:51 - props and
1019:54 - I could have defined all the different
1019:56 - possibilities all the uh
1019:59 - the things that you can pass over here
1020:01 - as an API but I don't have to do that I
1020:04 - can say I can only I think I just need
1020:08 - to define the categories
1020:11 - because the default categories that I
1020:13 - can do
1020:16 - the defaults categories that I can have
1020:19 - is called any if I don't pass in
1020:21 - anything
1020:21 - okay so now I can take this I and I can
1020:26 - use it to change my
1020:29 - query params
1020:31 - so say for example if I come over here
1020:34 - and I'm going to create uh I'm gonna use
1020:38 - what should I use props or rest props
1020:40 - well rest props right because categories
1020:43 - I don't need it anymore as my query
1020:45 - prompt I only need rest props so I'm
1020:47 - gonna come over here and get my rest
1020:49 - props okay rest props
1020:52 - but I need to convert it to a
1020:55 - URL search params so can I say params
1020:58 - equals to new URL search params
1021:03 - do I get the correct I'm not quite sure
1021:06 - let me let me Google there for a while
1021:09 - okay yeah you are such parameters yeah
1021:11 - okay I need to capitalize URL
1021:14 - okay search params
1021:17 - and let's uh let's insert all of them
1021:22 - so what I need is I've got a pen uh all
1021:27 - the rest props
1021:29 - look through my uh
1021:32 - look through the key in rest props
1021:39 - and I'm gonna append this
1021:42 - up and
1021:45 - key and the data
1021:54 - and I'm gonna get the two string to get
1021:58 - my query params okay so here I'm gonna
1022:01 - say
1022:04 - oops sorry
1022:05 - I need the yeah I need question mark
1022:11 - come over here question mark and params
1022:14 - dots to string
1022:18 - okay what did I miss
1022:21 - yeah I don't miss anything okay so now
1022:23 - let's see I have my custom joke that is
1022:28 - dark and programming and two parts
1022:32 - and French joke
1022:35 - and I have another joke that is just
1022:37 - dark and what other languages that I can
1022:41 - have
1022:42 - um say
1022:43 - Portuguese joke PT
1022:47 - which is just a single joke one part
1022:50 - joke
1022:51 - okay and let's try and run this little
1022:54 - joke
1022:56 - oh no what's this ah man let's see can't
1023:00 - access data before initialization
1023:05 - oh this is key this is not data
1023:08 - okay so I have a Portuguese joke
1023:11 - hopefully it's loaded
1023:14 - no please loot the joke
1023:22 - what is happening let's see
1023:25 - Haram starts to string
1023:34 - loot joke
1023:36 - yeah that's correct
1023:38 - and probably I can't load any joke
1023:41 - because
1023:43 - let's see what do I get for data okay
1023:46 - there's no
1023:50 - no matching joke found okay I don't have
1023:53 - a Portuguese duck
1023:56 - joke
1023:58 - that is not safe forward let's try no
1024:01 - Blacklist Flags
1024:03 - let's try run this
1024:05 - no matching joke okay probably just
1024:08 - Portuguese joke with no categories
1024:11 - ah
1024:12 - there's no such language oh no
1024:17 - okay how about just come back and get
1024:20 - some German joke
1024:22 - d e
1024:26 - oh man that's so sad okay let's just use
1024:30 - English joke
1024:32 - okay now I have
1024:34 - an English joke
1024:36 - right
1024:38 - let's talk about this one I can have
1024:42 - um no matching joke found again uh that
1024:45 - is still so sad I'm gonna use French
1024:47 - with two parts joke
1024:50 - no okay two parts you have a setup and a
1024:54 - delivery okay so I am
1024:58 - gonna just make it one thing it's a joke
1025:02 - okay so uh let's see what's the again
1025:05 - probably I have the
1025:09 - uh what is that let's type two parts
1025:11 - right so if data DOT type equals to true
1025:16 - part
1025:18 - then the joke
1025:20 - will be data.setup
1025:23 - plus data.delivery just punch it in
1025:28 - in one sentences
1025:30 - if it's not if it's a single joke then
1025:32 - I'm gonna just do it this way
1025:35 - okay A little joke I have a French
1025:38 - two-part joke
1025:40 - and I can also have an English single
1025:42 - joke
1025:44 - okay so here you see I can use rest
1025:46 - props in in anywhere I want it does not
1025:50 - have to be spreaded over as attributes
1025:52 - on elements I can use rest props or
1025:55 - props as as part of data when I want to
1025:57 - want to fetch something or I will just
1025:59 - use it in somewhere else I can use it
1026:01 - any way I like
1026:04 - so this allows me this opens up that I
1026:07 - don't have to Define all I don't have to
1026:09 - declare all the props over here I can
1026:11 - and allow people to just Define as many
1026:13 - props as they want and I used dollar
1026:15 - dollar props or rest props to access
1026:18 - them
1026:22 - So today we're going to talk about lazy
1026:25 - components what is lazy component well
1026:28 - lazy component is like any component but
1026:32 - you only created create them lazily
1026:34 - which means you only create a component
1026:37 - only when the user can seize it or only
1026:39 - added at a later time what is this
1026:42 - useful for this is useful when you
1026:46 - um have a big huge page a very huge list
1026:49 - or a page that user may scroll to see
1026:53 - more and oftentimes user may or may not
1026:56 - see more of the content so you want to
1027:00 - get only download the necessary
1027:03 - components or the informations you need
1027:05 - and only load more if the user Scrolls
1027:09 - to see them or you know expands or click
1027:11 - on certain interactions to see more
1027:13 - content so we're gonna use what we have
1027:15 - learned so far like the a width block as
1027:19 - well as maybe the dollar dollar props
1027:21 - that we've just learned so far right so
1027:23 - let's take a look at example a rebel so
1027:27 - over here I have app.spel that written
1027:30 - that is importing the component
1027:34 - um not lazily so I'm going to call say
1027:36 - it's importing synchronously so you
1027:38 - directly import this components and this
1027:40 - component will be available right when
1027:42 - you are using the Applause felt
1027:45 - so you import this components and we're
1027:47 - going to pass some props like full and
1027:49 - bar so this component is just like any
1027:52 - other components that you have seen so
1027:54 - far
1027:54 - and now we want to see how we can lazy
1027:58 - load this component
1028:01 - so first thing is we're going to change
1028:03 - how we import this component so if you
1028:06 - use Imports components from a file you
1028:10 - are you are saying that when you have
1028:14 - this app.fl components this component
1028:16 - should be ready together as well until
1028:18 - so you will wait until this com this
1028:21 - file is ready only you you
1028:23 - um
1028:25 - only you proceed with whatever in the
1028:27 - appbox files and usually with a bundle
1028:29 - with a bundler with a build tools like a
1028:32 - webpack or roll up you usually bundle
1028:35 - these components together with the
1028:37 - airport spout right so they are they
1028:39 - come together so they are not loaded
1028:42 - later on deferred
1028:44 - to be loaded later on lazily
1028:47 - so what I'm going to do here is to
1028:49 - change the way how we import this we can
1028:51 - use the dynamic Imports to import the
1028:54 - component file so as if I say this
1028:56 - component does
1028:58 - felt
1029:03 - and I remove this
1029:05 - this okay let me just comment this out
1029:07 - first this hints the browser that okay
1029:11 - this we're gonna fetch this file now
1029:14 - right if you call this function now
1029:16 - you're saying we're going to fetch this
1029:17 - file but this does not blocks whatever
1029:20 - app.fl is doing right now so you import
1029:23 - this and this will return to you a
1029:25 - promise this will return to your promise
1029:26 - that will be resolved
1029:29 - when this component is when this when
1029:32 - this file is being fetched over the
1029:34 - network and it's ready for you to use so
1029:36 - this will return the promise that's why
1029:38 - it's not blocking you can continue to
1029:40 - see whatever over here uh continue to
1029:44 - have whatever in your approach field
1029:45 - while
1029:47 - waiting this later on and you know when
1029:50 - the problem is resolved then you handle
1029:51 - it later on so this creates a promise
1029:54 - and if you use build tools like webpack
1029:57 - and roll up that I mentioned earlier on
1029:59 - what this what the build tool will do
1030:01 - for you is that it will create a
1030:04 - different it will not bundle the
1030:05 - Commerce field together with the AdWords
1030:07 - felt it will create another file right
1030:10 - often in case we call it a separate
1030:12 - chunk so it's a separate file that will
1030:14 - be fetched over later on so they are
1030:17 - although the bundle will try to bundle
1030:18 - all the files together but you'll create
1030:20 - a separate file for this component as
1030:21 - well because it knows that this import
1030:23 - statement hints the bundle that this has
1030:26 - to be a separate file this can be
1030:28 - fetched later on this can be deferred
1030:30 - later on it should not block whatever we
1030:33 - are doing so far
1030:34 - okay so come back to this we right now
1030:38 - we are loading this we
1030:41 - we are fetching this as a separate file
1030:43 - and if you take a look at the network
1030:46 - tab right this is a let's see
1030:51 - I'm not sure whether we can see this but
1030:53 - let's let's try
1030:55 - you should
1030:58 - okay
1031:02 - okay uh sorry I think you can't see this
1031:04 - from a network type but if you use a
1031:06 - build because because of the Ripple
1031:08 - um all these files uh
1031:11 - are not actually fetched they are
1031:13 - somehow simulated to be fetched lazily
1031:17 - but they are not actually going through
1031:20 - the network so if you use a build tool
1031:22 - and you build it probably will see that
1031:24 - you have two files over here on a
1031:26 - network tab one is the bundle for the uh
1031:29 - like the Applause Road and another one
1031:30 - will be the component as felt right
1031:34 - so uh trust me when I say that this will
1031:37 - be loads lazily right so over here when
1031:40 - it's finished loaded it should return me
1031:43 - a promise right this this is a promise
1031:44 - so I'm gonna say a component promise
1031:49 - I can wait for this promise so I can use
1031:52 - a weights block to do that for me I can
1031:55 - see I can wait
1031:56 - this component promise
1031:58 - and I can say maybe loading
1032:03 - right and when it's resolved
1032:06 - um this will give me an object
1032:10 - with
1032:11 - a default property right so I can I can
1032:14 - do I can have my destructuring over here
1032:17 - but you have not uh familiar with it
1032:20 - this is like
1032:23 - um
1032:24 - yeah I I can have a destructuring so I
1032:26 - can get out the get the default property
1032:29 - from this uh from the resolve object
1032:31 - from this promise and can use it later
1032:34 - on so over here when I want to use it so
1032:36 - first thing I would want to rename this
1032:38 - property because if I can use default uh
1032:41 - but I can't really use the uh but if I
1032:44 - destructure it as a default I probably
1032:46 - can't use it like this as an element
1032:48 - called default because
1032:52 - um it starts with a lowercase letter
1032:54 - which means it should be an element
1032:55 - rather than a component right itself
1032:58 - just looks at the first character and
1032:59 - say okay it's a low case there should be
1033:01 - a element it's not a component we want
1033:03 - to create a components that's being
1033:05 - returned from here and the components is
1033:07 - in the default property so what we can
1033:09 - do is we can rename this we can rename
1033:11 - it to say component
1033:13 - okay and we we use it over here so this
1033:15 - is capital letter so we can use it and
1033:18 - now we have our components same thing
1033:20 - goes we want to pass some props to this
1033:22 - component we can come over here and
1033:25 - we can pass it to this component and now
1033:27 - you see that this component is is being
1033:30 - loaded and you can see full one two
1033:32 - three bar four five six
1033:35 - right as if nothing has changed
1033:37 - but you can come over here and
1033:41 - um
1033:42 - load this later on so here we call
1033:45 - Imports immediately when we we call it
1033:49 - immediately when you uh
1033:52 - in the initialization of the app does
1033:55 - felt right but sometimes that is not
1033:57 - what we want we want to wait for certain
1034:00 - interactions or wait for this components
1034:03 - to be actually shown to the user only we
1034:05 - load this uh this component because for
1034:08 - example sometimes you have a very huge
1034:10 - list and you want to okay so I'm going
1034:12 - to create a huge list over here so
1034:14 - imagine I have a big uh big block of
1034:19 - content over here
1034:21 - and let's say background is blue
1034:25 - and the height is
1034:29 - 1000 pixels you have a very huge blue
1034:32 - content over here and if I come over
1034:34 - here in a component uh console.log
1034:41 - you see that
1034:44 - this initialize has been called
1034:45 - immediately although I haven't seen my
1034:47 - components I can actually load this
1034:49 - later on until you know when I scroll to
1034:52 - the end and see this component so what I
1034:54 - can do instead I can come over here and
1034:58 - maybe create a small div
1035:02 - that has this used viewport action so
1035:06 - this viewport action is an action that
1035:08 - we have written I've created a video
1035:10 - over here that talks about how we can
1035:13 - write a viewport action in the use
1035:15 - viewport action example
1035:18 - so this action what it does is that it
1035:20 - will observe
1035:23 - um your elements if it intersects with
1035:27 - the viewport if it comes into the
1035:29 - viewports then you'll get notified you
1035:31 - get an event and therefore you that's
1035:34 - when we want to load our component so
1035:36 - I'm going to use this use viewport and
1035:38 - then import import viewport from the use
1035:43 - viewport action
1035:45 - okay you import this file viewport when
1035:48 - you use this action on this component
1035:50 - using use
1035:52 - and then when it's entering the viewport
1035:55 - you will see this event called
1035:59 - on enter viewport
1036:01 - so I can call on enter viewport and I'm
1036:03 - going to do something
1036:05 - which what I'm going to do is
1036:10 - I am going to load my component so here
1036:15 - I can
1036:21 - I can have maybe a flag over here is
1036:25 - loaded it goes to false
1036:28 - and here when I enter I'm going to say
1036:30 - is loaded
1036:32 - to true
1036:34 - and I want to load my component as well
1036:38 - so I only want to load it once so when I
1036:40 - say check if it's loaded
1036:44 - if it's not loaded then I'm going to
1036:46 - load it and I'm going to set it's loaded
1036:47 - to true and therefore I will load it
1036:50 - once so what I'm going to do here is
1036:52 - that I'm going to change this component
1036:54 - problem is to be let
1037:00 - and we'll come over here and
1037:02 - uh set this component promise
1037:07 - to this import
1037:09 - ant component.felt over here
1037:11 - okay and now my component promise is
1037:15 - um is is undefined at first so I
1037:18 - probably wants to check first before I
1037:21 - await for it I wait for anything okay
1037:23 - for now I wait for undefined I will get
1037:26 - resolved uh to do whatever it is right
1037:29 - because sometimes uh when you await a
1037:31 - promise you will get whatever is you you
1037:34 - wait for that promise to return but
1037:36 - you've await something that is not a
1037:37 - promise then you kind of immediately
1037:39 - resolve with whatever that thing is so
1037:43 - uh so right now what happens is that we
1037:45 - are awaiting undefined and undefined
1037:49 - it's not an object and we can't
1037:51 - destructure here that's why it says
1037:52 - cannot be property default of undefined
1037:54 - so we're going to first check if a
1037:57 - component promise is
1038:00 - something right I can do this just make
1038:04 - sure that it's not undefined and we
1038:06 - promise that we always set it to set it
1038:09 - to something else which is a promise
1038:11 - when we want to actually load it so now
1038:13 - you see when we do this
1038:16 - um
1038:16 - first thing you'll notice is that
1038:18 - component is not loaded yet if you look
1038:20 - at here initialize it's not called and
1038:23 - if you try to inspect the elements you
1038:26 - probably gonna see that there's nothing
1038:30 - here right you only okay let me Zoom it
1038:32 - up a lot more
1038:34 - I think this is big enough
1038:36 - you probably see that you have the blue
1038:38 - diff over here this is our little div
1038:41 - that we try to see whether we um
1038:44 - we are
1038:46 - uh whether whether we are entering the
1038:48 - viewport right this is like our little
1038:50 - marker over here that that is right
1038:53 - above the component where the component
1038:56 - will be right so now if I scroll
1039:00 - scroll and when this div enters the
1039:03 - viewport oh no it's not working
1039:07 - let's see let's see uh on enter viewport
1039:10 - is not loaded then
1039:17 - okay let me check over here whether an
1039:19 - interview part
1039:26 - will be called okay so if I come here
1039:28 - and scroll
1039:31 - ah it's not being called so something is
1039:33 - wrong with the action itself maybe is
1039:36 - the event
1039:39 - name
1039:45 - and maybe is that this div has no
1039:48 - content
1039:49 - maybe I'm gonna set maybe like a style
1039:54 - wait hold on it's entering viewpoints ah
1039:56 - man what happened
1039:58 - uh
1040:00 - okay so if I scroll
1040:02 - you see that it's loaded so I'm not very
1040:05 - sure what
1040:07 - what's happening probably
1040:09 - I was okay I typed this out maybe my
1040:12 - spelling was wrong so play back and see
1040:15 - what happens I have no idea what's
1040:16 - happening so here uh as you can see we
1040:19 - didn't really change much but but only
1040:22 - when you so so only
1040:26 - when this initialize it's not called
1040:28 - this component is not loaded yet it's
1040:30 - not being fetched yet and when we scroll
1040:32 - down all the way you see that once it's
1040:34 - entering a viewport it's being fetched
1040:36 - and it's being loaded and you see this
1040:38 - component right
1040:40 - um because how the rebel works this
1040:42 - component is being finished so fast that
1040:44 - you can't see the loading state but yeah
1040:47 - you probably have to handle like a
1040:48 - loading put something like a placehold
1040:51 - over here so that when it's loading
1040:54 - um you you you have something nice to
1040:57 - wait for
1040:58 - right so uh this is how you would
1041:01 - roughly create a
1041:04 - lazily loaded component but then again
1041:07 - to do this to to do all this is a lot
1041:11 - and if you want to do it for every time
1041:12 - every every time you want to lazily load
1041:15 - a components that you have to write this
1041:16 - right viewport and have a promise and
1041:20 - wait for it and all this it is not that
1041:23 - hard but how about let's make it into a
1041:26 - component that handles this for us so
1041:29 - we're gonna have this component called
1041:31 - lazy component lazy
1041:33 - and let's again go for API first
1041:37 - approach to design how we want to look
1041:40 - how we want this lazy component to do
1041:42 - feel like how you want to use this and
1041:45 - then if you go take a step back and
1041:46 - figure out whether this is possible is
1041:48 - feasible and let's see how we can
1041:50 - Implement that so how I would want my
1041:53 - lazy components to be is I'm going to
1041:55 - write lazy over here
1041:57 - all right I want to have my lazy
1041:59 - components and hopefully this lazy
1042:01 - component handles all the viewports
1042:04 - thing for me so I don't have to take
1042:05 - care of that
1042:06 - and probably I would want to also pass
1042:09 - in uh maybe like a props call this
1042:12 - which is the com uh the okay not this
1042:15 - but get
1042:17 - component
1042:19 - right it has to be okay it has to be a
1042:22 - function
1042:26 - import
1042:31 - okay it has to be a function at first I
1042:34 - was thinking of writing maybe lazy
1042:37 - uh let me let me enter a few lines so
1042:40 - that we don't get disrupted by that so
1042:42 - initially I was thinking of like writing
1042:43 - as lazy and
1042:46 - look at this just like how we would
1042:48 - write the spelled component with this
1042:51 - right I was thinking of having this kind
1042:54 - of similar props and API Style
1042:58 - but the thing about it I need to have a
1043:01 - function rather a component I can still
1043:04 - use this the name
1043:06 - I'm kind of not that hinting that it's
1043:08 - gonna be a function but I can still use
1043:10 - this okay maybe let's just decide that
1043:12 - it's called this I'm going to call
1043:14 - import right this this has to be a
1043:17 - function because this only will be
1043:18 - called this function will only be called
1043:20 - when we want to load it right if it's if
1043:24 - it's a components then there's no point
1043:26 - and if it's already if you already call
1043:29 - it Imports directly then it has it has
1043:32 - no point as well because this is like
1043:34 - yes it is another file but you kind of
1043:36 - call it immediately right we want this
1043:38 - lazy component to handle the viewport
1043:40 - when we only load this only call this
1043:42 - function I'll call this import when we
1043:44 - are entering the viewport so we're gonna
1043:46 - change this to a function
1043:48 - and of course what we want also we want
1043:51 - to come over here and pass whatever
1043:53 - props that we want to pass to this
1043:55 - component
1043:57 - so that yeah we want to pass all of this
1044:00 - to this component so that uh you can
1044:03 - pass it over to this component itself
1044:06 - okay now we have this and also maybe we
1044:11 - want to think about loading States we
1044:13 - can have a fallback for a loading state
1044:14 - that shows loading dot right but we want
1044:17 - to also may be a way to specify that by
1044:20 - the user so I'm gonna come over here and
1044:21 - say lazy
1044:23 - and I can use a slot to do that for me I
1044:26 - can write a
1044:28 - okay not not that different but I'm
1044:31 - gonna write loading
1044:34 - but I'm gonna style it over here so that
1044:37 - it looks slightly different at style
1044:39 - okay first thing I want to have a slot
1044:41 - attribute first because I don't want to
1044:43 - use a default slots because I may want
1044:46 - to use that for something else but this
1044:48 - one the name slots uh I'm gonna name it
1044:51 - I'm going to name it as a loading state
1044:53 - right loading
1044:55 - and now I'm gonna install my
1044:58 - style my div let's see what I'm gonna
1045:01 - have is
1045:03 - uh div
1045:08 - ING with all this indentation
1045:10 - nothing wrong okay
1045:13 - it's my div I'm gonna say a color is
1045:16 - blue just just to see that it is being
1045:19 - styled right okay this is not class this
1045:22 - should be an element okay we are done
1045:24 - with here and now let's design our lazy
1045:27 - component
1045:30 - so far so good although you can't
1045:33 - respond but hopefully you you can see
1045:34 - where I'm coming from now let's design
1045:36 - our lazy components so you can see over
1045:39 - here we we can pass arbitrary
1045:42 - numbers of properties to our lazy
1045:45 - component and hopefully you can see by
1045:47 - now uh what we have learned so far we've
1045:49 - downloaded all the props all the rest
1045:51 - props this is what we're going to use to
1045:53 - pass all this to the component to the
1045:56 - underlying components all right first
1045:58 - thing is we're gonna take in a prop
1046:00 - called this right this
1046:02 - spot let's this
1046:05 - uh let's import lazy import lazy from
1046:15 - and meantime I'm gonna I'm gonna copy
1046:18 - all this
1046:19 - and then comment it out right we don't
1046:21 - need this but we probably would have to
1046:22 - implement something like this over here
1046:25 - okay so we can't uh oh no we can't use
1046:28 - this let's this over here
1046:33 - um
1046:34 - that because this is a keyword that we
1046:37 - can't really use this so probably we can
1046:40 - rename this somehow right I'm gonna say
1046:43 - this is gonna load component
1046:47 - and let's see I wanna but I I can have I
1046:52 - can do this where I simply
1046:55 - rename it with my export so export load
1046:58 - component as this
1047:00 - so here this is not going to complain
1047:02 - that this is a a special default uh it's
1047:05 - this will treat this as just a normal
1047:08 - variable name it does not have the
1047:10 - context of being a
1047:13 - uh was that call again
1047:16 - uh
1047:19 - uh yeah
1047:20 - a certain a special keyword a projected
1047:23 - keyword this over here whatever you pass
1047:25 - in can be any string or even emojis if
1047:28 - you want
1047:30 - so here uh let's let's try to import
1047:32 - some of the stuff that we have imported
1047:34 - previously
1047:36 - the viewport
1047:40 - and then a I think that's all so we need
1047:44 - a state called it's loaded and the
1047:46 - component is
1047:47 - component promise right so you can see
1047:51 - oops that's not what and let's is loaded
1047:56 - and let
1047:58 - component
1048:01 - promise
1048:04 - okay
1048:06 - uh we are done with this
1048:08 - and now let's see
1048:11 - external reference only please con
1048:16 - so I'm gonna use this load component
1048:18 - over here in States
1048:25 - so we enter viewport we're gonna load
1048:27 - okay so I'm gonna uh I think all this
1048:30 - will is okay now and you're gonna come
1048:33 - over here and use the rest props instead
1048:42 - um yeah rest props because we don't need
1048:44 - the this props as the props to our
1048:47 - component right and I think that's all
1048:50 - so uh one oh another thing over here
1048:54 - um we we have our slots loading slots so
1048:57 - we're gonna install have a defaults
1048:59 - we're gonna have a slot component named
1049:01 - loading
1049:04 - and of course we're going to provide
1049:06 - some fallback called loading if it's not
1049:08 - provided so if I scroll down
1049:10 - see again it's called initialize and
1049:12 - then you see the data over here and
1049:14 - everything is still passed through
1049:16 - nicely because if you use a rest props
1049:19 - so we press everything that is being
1049:20 - passed to our lazy component
1049:22 - to our components to the underlying
1049:25 - component so let me clean this up we
1049:27 - don't do this anymore
1049:30 - okay we're not don't need all of this
1049:32 - anymore
1049:34 - and let's clean this up
1049:39 - so before we end probably let me do some
1049:42 - more do some more cleanup right uh first
1049:45 - thing is I don't need this div anymore
1049:48 - uh once I've entered right so the way I
1049:51 - do it is I still have it and I still
1049:53 - listening to the viewports but every
1049:55 - time
1049:56 - uh it's entering again the next time I
1049:59 - will check this flag when this flag is
1050:01 - false uh when this flag is true then I
1050:04 - am not triggering anything anymore but
1050:06 - what I can do instead is I can have a
1050:09 - different flag which is uh I can use the
1050:12 - same flag but only render this div when
1050:15 - it's not loaded so if it's loaded if
1050:18 - it's not loaded I'm going to show this
1050:21 - diff
1050:22 - so every time when I enter I will load
1050:26 - something right
1050:27 - but then we also know that
1050:30 - one is being called this load is loaded
1050:33 - Will turns to True which means that it
1050:36 - will hide this div and that's
1050:40 - oops
1050:44 - which means we'll hide this div and that
1050:46 - is the only time you will see this on
1050:49 - enter viewport uh
1050:51 - the events being triggered right so once
1050:54 - it's been once it's called loaded
1050:56 - uh
1050:58 - it doesn't mean that it's actually
1051:00 - loaded right it's just that okay we now
1051:02 - we are trying to load this uh component
1051:05 - uh this lazy component so maybe I can
1051:07 - change this name again to to some more
1051:10 - suitable to our case oh yeah uh
1051:14 - uh
1051:17 - okay I'm just gonna leave it I can't
1051:18 - think of good names right now so this is
1051:21 - only this is like loaded it just tells
1051:23 - us okay now we are going to show this
1051:24 - component right if you haven't show uh
1051:27 - okay I'm gonna stay showing okay it's
1051:29 - showing component
1051:33 - right if it's not showing
1051:36 - okay by default is false if it's not
1051:38 - showing then you have this div that has
1051:41 - this viewport action that tells us
1051:43 - whether it's entering a viewport one is
1051:45 - entering we set it to True which means
1051:47 - we're gonna hide this if
1051:49 - we're gonna hide this uh
1051:53 - div anymore we're gonna hide this div
1051:55 - and now we're gonna fetch our
1051:59 - a lazy component
1052:01 - right so over here we also don't really
1052:04 - need to check if component promise
1052:06 - because once we know that if it's
1052:09 - showing component is true uh the
1052:11 - component promise is
1052:13 - assume that it will be a promise right
1052:16 - so we can also remove this check uh this
1052:19 - is unnecessary now because every time a
1052:22 - showing component is through this
1052:24 - component will always be a promise so
1052:26 - let me nicely format everything and here
1052:30 - we end up with if showing then we if
1052:33 - it's not showing we have a div that
1052:34 - tells us whether we are entering
1052:35 - Viewpoint once it's enter showing is
1052:38 - true then now we're actually waiting for
1052:40 - our component promise to wait for this
1052:42 - to resolve and show our component so
1052:45 - let's let's scroll back up and let's run
1052:48 - this thing again
1052:51 - right okay let's see okay run this thing
1052:54 - again so now you don't see the
1052:55 - initialize combo is not loaded and once
1052:58 - we scroll it all the way down you see
1052:59 - components here and immediately it's
1053:01 - initialized so that's all well
1053:05 - I thought so too but then I think about
1053:07 - it even more I realized that yes I have
1053:11 - my lazy component but at the same time
1053:14 - I'm kind of lost something is lost along
1053:17 - the way for example if my component self
1053:21 - have same binding for example I'm going
1053:24 - to come over here and create this uh bar
1053:27 - that can bind to a variable
1053:30 - so input bind value equals to bar
1053:35 - if I create this input
1053:37 - and somehow over here I also want to
1053:40 - show this value of bar which is a
1053:44 - variable let's bar
1053:48 - over here
1053:50 - and I want to bind This Bar
1053:54 - with bar
1053:56 - and let's okay let's initialize this
1053:59 - with four five six
1054:01 - let's try this so let's scroll all the
1054:04 - way down okay we see four five six over
1054:07 - here and the bar and the input and if I
1054:10 - try to do something like this you see
1054:12 - that the binding is not working
1054:15 - and you may ask like why
1054:18 - well here's why
1054:20 - um
1054:21 - binding is actually passing a
1054:24 - property called bar to this component
1054:27 - and also tries to subscribe to any
1054:30 - changes in the props of the lazy
1054:32 - component but the lazy component itself
1054:35 - does not have anything does not change
1054:38 - the props directly it spreads all the
1054:41 - props to this component so it passed
1054:44 - down the bar to this component but
1054:46 - itself does not pass down The Binding
1054:48 - that it's receiving to the component
1054:51 - itself so there's no way uh as in once
1054:55 - you use this lazy component you kind of
1054:57 - lost the thing that you can do with
1055:00 - these components now you can't do events
1055:04 - you would have to to add events you
1055:06 - would have to forward all the component
1055:09 - events uh through the means of component
1055:12 - event forwarding and at the current uh
1055:17 - and currently there's no way to forward
1055:19 - all the events you can only forward
1055:22 - um
1055:23 - again only forward based on the events
1055:26 - names that you know right so there's no
1055:28 - way that you can in advance know all the
1055:31 - events that you need forward so that is
1055:32 - one issue and also binding does not
1055:35 - works so you kind of lost this when you
1055:38 - are using this lazy components that
1055:41 - tries very hard to encapsulate the logic
1055:45 - of lazy loading right and capital logic
1055:48 - of trying to know when to load when
1055:51 - you're entering viewport and then
1055:52 - showing a loading uh components when
1055:56 - it's loading and then only use the
1055:58 - components
1055:59 - so I I think about I thought about that
1056:03 - and I realized that hey there's one
1056:05 - thing we haven't utilized that's one way
1056:07 - they can use it's like it's uh which is
1056:10 - to use a let props
1056:13 - so here is how it is going to be so
1056:16 - imagine here I have my lazy components
1056:18 - and I pass all this uh properties and
1056:21 - bindings and stuff to this uh via this
1056:24 - lazy components right but what about how
1056:27 - about uh we can also create another slot
1056:30 - attribute over here I'm going to call it
1056:31 - uh spelled fragment
1056:36 - oh sorry hold on this should be a
1056:38 - closing
1056:40 - I'm gonna use felt fragment so that I
1056:42 - can read more things uh here as also
1056:45 - components here my lead binding I can
1056:48 - actually use a let's component I can
1056:51 - have uh I can only I can get this
1056:55 - component from lazy components right so
1056:58 - it will load and here I'm going to use a
1057:01 - slot attribute called component
1057:04 - right meaning when this component is
1057:07 - finished loaded it will try to have a
1057:11 - slot element with a name called slot
1057:14 - name called components so this part
1057:17 - whatever I'm going to render within this
1057:19 - felt fragment will only be shown when
1057:22 - the component is loaded and what is that
1057:24 - component the component itself is
1057:27 - provided through this let's binding so
1057:29 - here I can actually do I will change
1057:31 - actually create this component
1057:34 - and I can pass all the props I want
1057:37 - myself right so here I don't have this
1057:40 - limit of having to
1057:42 - um
1057:44 - event forwarding for the component
1057:45 - because I'm already using this component
1057:48 - right here I don't have to worry about
1057:50 - buying things to pass down bindings and
1057:52 - stuff uh because I'm doing myself
1057:54 - directly to this component
1057:57 - right so this component can be any
1057:58 - component being resolved from here
1058:01 - uh this is just like a variable but you
1058:03 - can treat it as yeah it is a variable
1058:06 - you treat it as a variable but it itself
1058:08 - is a component and I'm gonna use it over
1058:10 - here
1058:10 - so now how do I uh
1058:13 - uh implement this
1058:15 - so um we've learned so far that if you
1058:18 - are slot attribute called component then
1058:20 - you need a name slots call components so
1058:23 - here when it's done and create a slot
1058:26 - name component
1058:29 - right and we learned that if you want to
1058:31 - use a lead binding over here this data
1058:33 - is being passed into the slot as props
1058:36 - so here we what we want to pass in is
1058:38 - this component so we're going to pass
1058:40 - this component as props to my slots and
1058:43 - now I can remove this because I don't
1058:45 - need any more
1058:47 - and let's and everything still works
1058:50 - fine right so now let's take a look
1058:52 - Moment of Truth and now we're gonna
1058:55 - scroll so nothing is initialized until
1058:58 - we scroll the way down
1058:59 - so this component as you see even if we
1059:01 - write it here it's not created yet right
1059:04 - and all the way when you scroll down now
1059:07 - it's initialized and this component is
1059:08 - created and added and mounted to the Dom
1059:10 - here during initialization phase you see
1059:13 - the console log right and now when we
1059:15 - want to try The Binding or type
1059:17 - something you notice that this four five
1059:19 - six seven eight nine comes from here so
1059:24 - The Binding Works The Binding Works
1059:26 - nicely and we don't have to sweat about
1059:29 - trying to figure out how to pass down
1059:31 - The Binding through a component
1059:33 - and if you try to add events over here
1059:36 - right on click Maybe
1059:41 - oops
1059:45 - I'm just gonna say this and let's add
1059:48 - the buttons and forward that event
1059:55 - you'll realize that when I click this
1059:56 - button let me uh add more space over
1060:00 - here I'm not sure my hit is blocking
1060:03 - this so let me add it at the front
1060:09 - so now when you click me you'll notice
1060:12 - that this event is also being dispatched
1060:15 - and I can listen from here right so
1060:18 - there's no need to go through this lazy
1060:20 - component previously we create this
1060:22 - component within the lazy component so
1060:24 - if you want you have to forward the
1060:27 - event yourself and now we don't have to
1060:29 - do that it's so easy right now so I
1060:32 - would say that this will be what imagine
1060:35 - my lazy components be like
1060:40 - So today we're going to talk about a
1060:42 - special elements called svelte component
1060:46 - so have you ever have this situation
1060:48 - where you want to based on the condition
1060:50 - use component a but as a different
1060:54 - condition you want to use component B
1060:55 - and at a certain condition you want to
1060:57 - use component C
1060:59 - this ABC component I actually
1061:01 - interchangeable they are they're taking
1061:04 - a different the same props it's kind of
1061:06 - taking the same
1061:08 - um have the same behavior but you just
1061:11 - want to use different components
1061:12 - different of them
1061:14 - for different situations
1061:16 - and how do you do that usually let's
1061:19 - take a look at an example usually what
1061:21 - you would do is you would have a if
1061:24 - statement and switch between them right
1061:27 - so right now I have if statement based
1061:30 - on the condition I want to use full and
1061:32 - sometimes I want to use bar
1061:36 - and actually Foo and bar can take in can
1061:40 - bind value
1061:42 - right you can bind value to full and Bar
1061:46 - and so that full and bar can handle them
1061:48 - right can they oh no I haven't
1061:50 - implemented so let's come let's do this
1061:53 - so let's have this let's value
1061:56 - and full will show an input type
1062:01 - uh number
1062:03 - and bind value so full have its own
1062:07 - input
1062:09 - and bind a value bar will do almost the
1062:13 - same thing as well
1062:15 - um yeah except they show a different
1062:17 - words okay
1062:18 - um of course there's better way of doing
1062:20 - this but let's assume that the looks
1062:24 - almost the same takes in almost the same
1062:26 - props and have almost the same behavior
1062:28 - actually this is exactly the same
1062:30 - behavior so let's maybe let's try uh
1062:32 - something else let's say aim
1062:36 - okay I need actually exports let's value
1062:39 - in the states
1062:40 - so that it's a props
1062:43 - for bar I am going to have buttons and
1062:47 - States on click
1062:53 - this is 200
1062:56 - okay on click value will be 200.
1063:00 - another button on click will be 400.
1063:05 - okay so bar has this button that you can
1063:07 - click and change the value and full has
1063:10 - this number
1063:12 - uh that you can change input text that
1063:15 - you can change
1063:17 - so they they both have the same props
1063:19 - called value and they can they work
1063:22 - slightly differently internally and what
1063:24 - when do you want to render full or bar
1063:27 - basically based on some other conditions
1063:29 - right in this case based on value if
1063:30 - it's 50 you will show full or else your
1063:33 - show bar okay this is very contrived but
1063:35 - this is just going to show how this
1063:37 - works right so when you come over here
1063:39 - and you change this value to say 70 you
1063:42 - will see full right and full can change
1063:45 - this back to zero and then you see bar
1063:46 - but I can click to change to 200 and you
1063:49 - see full right based on the condition
1063:50 - you want to switch between different
1063:51 - components
1063:53 - so one way is of course use an if else
1063:56 - statements then you would have to
1063:58 - implement
1064:00 - uh if you have a lot of props that you
1064:02 - want to pass in a equals something b
1064:04 - equals something c equal to something if
1064:07 - a lot of props that you know pass into
1064:08 - both of them and both of the case have
1064:13 - actually the same props that you want to
1064:14 - pass them
1064:15 - then you may start to question yourself
1064:17 - is there a way that I can extract all
1064:21 - this out
1064:22 - and switch between prop components well
1064:25 - if you don't have a bind value then yes
1064:29 - there's of course some ways that you can
1064:30 - do say for example you can come up with
1064:32 - props object so I can say a equals a
1064:37 - b equals to B
1064:38 - C equals to C
1064:41 - and I can spread the props right I can
1064:45 - spread the props so
1064:51 - so I can kind of still keep them the
1064:55 - same uh try to reuse as many code as
1064:59 - possible but buying you can't do that
1065:00 - right if you have events like on click
1065:04 - over here and on click over here you you
1065:08 - can't reuse it right uh so directives
1065:11 - you can't really reuse by using a
1065:13 - spreadable using a spread props you have
1065:16 - to write them manually
1065:18 - so again you are thinking Hmm can I have
1065:21 - a way that dynamically changed between
1065:22 - full and Bar while you're watching The
1065:26 - Right video to learn the right stuff as
1065:29 - a title show this is called swell
1065:31 - component so we are going to use felt
1065:33 - component to solve this
1065:34 - so how does that work well spell
1065:36 - component
1065:37 - over here
1065:39 - it's spelled component
1065:41 - is a special elements in swelt so
1065:44 - usually special elements starts with a
1065:47 - swelt and a colon right so these are not
1065:49 - normal elements there are special
1065:50 - elements in svelte okay so Spell
1065:54 - components must have a this attribute so
1065:57 - what this attribute though is that
1066:00 - whenever you pass in should be a
1066:02 - component
1066:04 - so for example based on a certain
1066:06 - scenario I want full or one a bar I can
1066:08 - say uh okay I can I can have eternal
1066:12 - real over here and say I want full based
1066:14 - on this scenario and I want bar for this
1066:16 - scenario okay so I can now come over
1066:20 - here and copy all the rest
1066:23 - to this special elements and this will I
1066:28 - can replace whatever I have written back
1066:31 - there with this all right so spelled
1066:33 - component this is the this takes in the
1066:37 - component that I want and then I can
1066:39 - pass in however many props that they are
1066:42 - sharing right you can have some extra
1066:45 - ones that just for full and of a bar
1066:48 - um if but does not text it it's okay you
1066:51 - can have more than you need for for one
1066:54 - of them right but I think it's okay
1066:58 - um so here you you use this and now
1067:00 - let's see does it still works if I
1067:02 - change to 200 now you see full and I
1067:05 - switch it back to zero now you see bar
1067:07 - and all the binding still works right so
1067:09 - for example if I change it to 200 and
1067:12 - come over here and I change it uh 200 to
1067:15 - 300 oh sorry 200 and I'm gonna type
1067:18 - something all the binding still works
1067:20 - you can just treat this as a component
1067:23 - that is being created with full or with
1067:26 - bar based on this condition over here
1067:28 - and and all the all the directives uh
1067:32 - different kind of directives bindings on
1067:35 - event listeners and as well as props
1067:38 - spread props all kind of props they are
1067:40 - all works they will all of them will be
1067:42 - passed to full or bar
1067:45 - so here you go you have a spell
1067:47 - component that allows you to quickly
1067:49 - switch between uh different components
1067:52 - and while while you have while they can
1067:55 - text in the same props
1067:57 - right so sometimes you don't write it
1067:59 - this way where you don't kind of a
1068:02 - uh
1068:04 - uh have this Expressions over here maybe
1068:07 - sometimes you may want to say come over
1068:10 - here and declare a
1068:11 - reactive the variable called component
1068:15 - and do it this way
1068:17 - it's fine as well this works as well
1068:20 - right if you switch between it still
1068:23 - works
1068:24 - and sometimes for some reason right say
1068:26 - for example maybe value is greater than
1068:29 - 200
1068:31 - then you actually don't want to show
1068:34 - something you use a null or undefined
1068:37 - over here
1068:39 - let's see I think undefined works as
1068:41 - well so in this case when you hit 400
1068:45 - you're actually not render anything
1068:47 - right I think now works as well let's
1068:49 - let's let me try I can't remember yeah
1068:51 - now works as well so now or undefined
1068:54 - now or undefined as long as the
1068:57 - component is now undefined that you pass
1068:59 - it over here for the disk so if this is
1069:01 - now undefined you don't see anything
1069:03 - right there's no error there's no error
1069:06 - where uh the component is undefined and
1069:09 - you can't create it right spell will
1069:11 - just remove it so if you are rendering
1069:14 - nut if you chose nothing here then you
1069:16 - don't see a component and if you go back
1069:19 - turn it back to 50 then you you start
1069:21 - see your component based on this
1069:22 - condition so what components you're
1069:24 - giving was your comp component you are
1069:26 - getting out over here
1069:30 - So today we're going to learn about a
1069:32 - special swell element wait
1069:35 - it's felt special Elements which is
1069:38 - spelled self so what is civil self well
1069:43 - it's well let's take a look and we shall
1069:45 - see take a look at an example so the
1069:47 - example I prepared for you over here
1069:50 - is I want to create a visualization for
1069:54 - arrays right so if I have an array say
1069:57 - the data is one two three four five
1069:59 - I'm going to display it uh
1070:02 - um like like this right I I wrap the
1070:04 - array with a blue box and each of the
1070:07 - item with a red box so you see that this
1070:09 - array has five items
1070:11 - nicely done
1070:13 - but sometimes life is not that easy
1070:15 - sometimes the array is not flat this
1070:18 - array is flat right you only have one
1070:19 - level but sometimes some people may
1070:22 - create a really that are nested for
1070:25 - example like this you can you get nested
1070:27 - arrays so what should you do with it
1070:29 - right
1070:31 - um by default if you don't do anything
1070:34 - if you get an array it will you you will
1070:37 - make it a string by calling like a
1070:39 - string and wrap it become a string and
1070:41 - when you wrap a make a real string you
1070:43 - get a comma separated value of the item
1070:46 - right so this is what you get
1070:50 - um
1070:50 - yeah but this is not what we want we
1070:53 - want is wrap this with a blue box and
1070:56 - each of the item with red box and then
1070:58 - do it recursively because 3 is another
1071:01 - level of another level of the array
1071:03 - right so what can you do probably we can
1071:06 - extract this out into another component
1071:09 - and call it again right call it
1071:11 - recursively
1071:12 - well how about call yourself recursively
1071:15 - because this component itself will know
1071:18 - it already handles a rape and we can use
1071:22 - ourselves inside ourselves recursively
1071:25 - when it's an array
1071:27 - and as a title suggests you can do that
1071:30 - with this specials spell special
1071:34 - elements called spelled self so let's
1071:37 - take a look at how we can do this right
1071:39 - so over here if you come up here you see
1071:41 - that item we can check the type of the
1071:44 - item right so if say for example if the
1071:48 - or the item is an array I use array is
1071:51 - array
1071:57 - then we can
1072:00 - um come over here and use I'm gonna
1072:02 - render ourselves right so our self is
1072:04 - self
1072:06 - and can pass data to ourselves right so
1072:09 - here what I'm gonna do is the data is a
1072:12 - props I'm gonna pass in item the sub
1072:14 - item over here
1072:17 - pass in data and if it's not okay let me
1072:22 - let me format this nicely right so if
1072:24 - it's an array then I'm going to use
1072:26 - myself
1072:27 - and if it's not which I'm going to use a
1072:30 - else
1072:32 - then I'm going to show my I'm just just
1072:34 - showing myself so over here you see
1072:38 - um
1072:39 - it creates this nicely recursive pattern
1072:42 - so I have a blue box which is the big
1072:44 - the array itself and I have three Red
1072:47 - Box inside right one and then this uh
1072:50 - two I have two red three three Red Box
1072:53 - because I have three items and within
1072:55 - one of it I have another blue array a
1072:58 - blue box because it's an array and I
1073:01 - create uh two three four right three
1073:04 - items and then this is a server yourself
1073:06 - and I create this thing over here over
1073:09 - and over again right so when you want to
1073:11 - recursively render yourself over and
1073:13 - over and over again you can use this
1073:16 - component called as well cells and it
1073:18 - pass props to it right so
1073:21 - you can or can uh you you can choose
1073:24 - past to pass or not to pass any props to
1073:26 - it and you can do this recursively right
1073:30 - render yourself recursively with spelled
1073:32 - cells so there's a few rules that you
1073:34 - when you use felt self right to prevent
1073:36 - yourself to unconditionally render
1073:39 - yourself again and again and again and
1073:41 - reach and infinite Loops you can't use
1073:45 - felt self outside here right so it says
1073:48 - spelled self can only exist inside if
1073:50 - each or within a slots right so inside
1073:54 - if hopefully it's because hopefully you
1073:57 - are smart enough to not come out with
1074:00 - condition like if true and always render
1074:02 - myself right hopefully you don't do that
1074:05 - at the top level of course this is still
1074:08 - kind of uh safe in a sense where item
1074:12 - itself can is is numb
1074:17 - is
1074:19 - uh sorry what was I'm trying to say
1074:23 - yeah save that this is this bricks
1074:26 - because items sometimes is not an array
1074:28 - it's a data right so if you still pass
1074:31 - something that is
1074:33 - um
1074:34 - something that is part of yourself then
1074:37 - yeah you're still okay you're still
1074:39 - stiff right
1074:41 - for example if I come over here and as
1074:45 - long as I wrap it with if right even if
1074:47 - I say if always true
1074:50 - um then I can come over here and pass
1074:52 - like some some data that probably
1074:55 - supposedly to be lesser than itself and
1074:59 - no that's not true also so you have to
1075:01 - have a condition to stop that recursive
1075:04 - Loop if you have that then you are safe
1075:06 - then you don't end up with a un
1075:08 - unconditionally
1075:10 - going all the way down the rabbit hole
1075:13 - and never ending
1075:14 - all right so let me undo all this and
1075:17 - let's come back and enjoy and be amazed
1075:21 - by this recursive components created
1075:24 - using spelled self
1075:28 - let's continue with our svelt special
1075:30 - elements we'll talk about spelled self
1075:33 - and sveld component today we're going to
1075:36 - talk about svelt window
1075:38 - so let's take a look at some examples on
1075:41 - when we can use this spell window and
1075:43 - what is it about
1075:45 - so over here we have our application
1075:49 - so sometimes you want to listen to
1075:52 - window events for example over here we
1075:55 - try to listen to resize because we want
1075:58 - to get
1075:59 - the windows inner width right so we
1076:02 - listen to on the window and then you
1076:05 - um listen to this event listeners and
1076:07 - then get the window in a width so every
1076:09 - time when you resize you get a new value
1076:12 - right so as you can see here the width
1076:14 - itself is changing because I'm resizing
1076:17 - the window
1076:18 - and sometimes you want to also listens
1076:22 - to events uh for example key down in
1076:26 - this case so it's the same case
1076:27 - previously as we listened to precise and
1076:29 - then we get the property from the window
1076:31 - and this time we listen to events and
1076:34 - try to react to it right so this time
1076:37 - this one when we add event listeners
1076:39 - like key down for example when you click
1076:41 - Ctrl f
1076:43 - you will want to focus on this input bar
1076:46 - rather than having the bit default
1076:48 - browser Behavior which is event prevent
1076:51 - default right prevent the default
1076:53 - behavior from the browser which is to do
1076:55 - a global search like here
1076:57 - uh let's see like
1077:00 - yeah something like this a global search
1077:03 - you want to change that you want to
1077:05 - Focus over here in States
1077:08 - so um
1077:10 - so how you would usually do is you would
1077:13 - maybe wait for a component to be mounted
1077:16 - so you add the event listeners in on
1077:18 - mounts and remember to return a function
1077:20 - to clean it up so that you don't lead to
1077:23 - like a memory leak
1077:25 - so um yes you can do it this way but
1077:29 - today we'll talk about swell window
1077:32 - right and spelled window is actually a
1077:34 - way for you to add event listeners and
1077:38 - read out some properties such as inner
1077:40 - width from the window without having to
1077:43 - manually set up your event listeners and
1077:46 - listen to it and update it so let's take
1077:50 - a look at maybe the first one which is
1077:53 - this one which is closer so that we can
1077:54 - change one by one so here we listen to
1077:58 - the keto events and we add this
1078:01 - um call this event handler right
1078:04 - so
1078:05 - uh
1078:06 - an alternative would be having a spelled
1078:09 - window
1078:11 - element
1078:13 - and we add this event listeners over
1078:14 - here so you can treat this special
1078:16 - element spelled window like your window
1078:18 - element except it won't render anything
1078:20 - so there's nothing being rendered uh
1078:23 - that there's nothing new there's no new
1078:25 - element created by this special element
1078:28 - itself but rather this special element
1078:30 - is here for you to add event listeners
1078:33 - so here I can add on key down
1078:38 - and let's stick let's copy this event
1078:42 - handler let's collapse this and comment
1078:46 - all of them
1078:47 - uh on key down
1078:50 - so pass this in over here
1078:52 - and let's try to click Ctrl F and
1078:55 - everything still works
1078:57 - so you can
1078:59 - use you can write this instead using on
1079:02 - key now
1079:03 - and the same thing as how you add event
1079:06 - listeners with elements spell well take
1079:08 - care for you when you want to announce
1079:11 - this component you remember to remove
1079:14 - the event listeners from window so this
1079:16 - is a slightly shorter version of writing
1079:19 - all that we have written so far adding
1079:22 - event listeners and remove even
1079:23 - listeners when we are when we don't need
1079:26 - it all right so it's felt window again
1079:28 - it's a special element so that you can
1079:29 - do this on a window object another
1079:32 - example that we've seen so far is to add
1079:34 - a resize and then read this inner width
1079:37 - right so
1079:39 - so we can add also or you can come over
1079:41 - here and
1079:44 - add this on resize
1079:46 - and this event listeners call on resize
1079:49 - I'm going to copy all this
1079:51 - I wouldn't say all this but it's just
1079:54 - one
1079:55 - a few lines over here
1079:58 - on resize
1080:00 - copy this and pass it over here
1080:03 - right so now when we resize our width
1080:05 - you can see that we still update the
1080:08 - value we still have these event
1080:11 - listeners and update this value uh in a
1080:13 - way right
1080:15 - um is there a better way or is it a
1080:17 - shorter way I would say better but
1080:19 - that's a shorter way of writing this yes
1080:22 - that's actually a shorter way of writing
1080:24 - this which is if you which is you can
1080:26 - use a binding right binding is like a
1080:29 - two-way binding uh where you can bind
1080:32 - you can set the width of the window well
1080:35 - I'm not sure whether you can but you can
1080:37 - also when when the events happening you
1080:40 - will update this variable from the
1080:42 - property of a uh from property of your
1080:45 - element right in this case of element is
1080:46 - window we are we want to listen to some
1080:48 - event we want spell to handle that know
1080:51 - what event so listen and listen to the
1080:53 - event and then update our variable so we
1080:55 - can actually bind inner wave over here
1080:57 - instead of writing it on resize so let
1081:01 - me comment this let me remove this let's
1081:03 - come over here bind ER with and I'm
1081:08 - going to bind to the variable with the
1081:10 - same name
1081:11 - all right so there's a shorthand writing
1081:13 - there for binding which is just do this
1081:15 - and now we can even go ahead and remove
1081:19 - this on precise handle
1081:22 - and everything still works fine
1081:26 - so one of the things that you can buy
1081:27 - into and what events you can listen to
1081:29 - well for events you can listen to all
1081:31 - the events uh that is available on
1081:34 - window or any elements right but most uh
1081:38 - but of course it's on you make sure that
1081:40 - it makes sense to listen on to the
1081:42 - window right so you can basically listen
1081:43 - to any events you can there's no
1081:45 - restriction over here but for binding on
1081:48 - window elements there is
1081:51 - um some of the things that you can do so
1081:53 - here I'm at the tutorial for swelt and
1081:57 - this chapter where it says well binding
1082:01 - it's spelled binding you'll see that
1082:04 - there's a few properties that you can
1082:06 - bind to
1082:08 - um so in a weave in the height of the
1082:10 - width of the heights scroll X scroll Y
1082:12 - and online so you can bind all this
1082:14 - variable so the first four is more about
1082:18 - the window size and as you can see here
1082:21 - everything except scroll X and scroll y
1082:23 - are read only meaning although you are
1082:25 - using a two-way binding The Binding but
1082:28 - you only have one direction from it
1082:30 - which is from the element events and
1082:32 - then update the variable instead of
1082:33 - having a variable update step right it
1082:35 - does not make sense that you have a
1082:37 - variable that can update can change the
1082:39 - window size right that is most of the
1082:42 - case I use that is only user Dragon like
1082:45 - resizable height and width right um
1082:49 - as well as online status right online
1082:51 - whether the user is connected to the
1082:53 - internet or not this is um
1082:56 - this is not you can't change the user's
1083:00 - connectivity you can only have events
1083:02 - like the online on offline events from
1083:04 - the window and then read this property
1083:06 - out of Windows and Navigator
1083:08 - although of course scroll next and
1083:10 - scroll why you can change both ways
1083:12 - right you can change the scroll position
1083:13 - or get the scroll version to change your
1083:16 - variable so these are things that you
1083:19 - can bind to the window and instead of
1083:22 - writing your own event listeners on a
1083:24 - window object you can use this special
1083:26 - element called spell window
1083:31 - let's continue with our svelt special
1083:34 - elements we've covered spelled self it's
1083:37 - felt component spelled
1083:39 - was that spelled window and now we're
1083:42 - gonna conquer threat body
1083:45 - so by the name svelt body you kind of
1083:48 - know that it's kind of similar with
1083:50 - spelled window which is allows you to
1083:54 - add event listeners on the body so take
1083:57 - a look at this example that I prepared
1083:58 - for you so far
1084:01 - um I spent some time to create this nice
1084:03 - visual which uh at a mouse move event
1084:07 - listeners on the body so whenever I move
1084:10 - my mouse on the body you see that uh I'm
1084:13 - updating the mouse position X and Y and
1084:16 - does create this very nice pattern which
1084:19 - I use two linear gradient so one is
1084:22 - linear gradient from top to bottom from
1084:25 - a transparent linear transparent color
1084:28 - and do all the way to a solid color
1084:31 - solid red color but with 50 opacity so
1084:36 - that you can see that on the next
1084:38 - gradient I'm going to lay on top which
1084:40 - is from left to right transparent and
1084:44 - then on the right side you have blue
1084:46 - which is again opacity of 50 so on the
1084:50 - so you get a top bottom transparent to
1084:54 - red and then left to right transparent
1084:57 - to Blue so on the bottom right corner
1085:00 - you you see a combination of both color
1085:02 - which is kind of a little bit of
1085:03 - purple-ish color so um so the gradient
1085:08 - we use a color we use a stop point which
1085:12 - is the percentage which is calculated by
1085:14 - the mouse position X and Y divided by
1085:18 - the body kind height and width therefore
1085:21 - you can see this when I move my mouse
1085:22 - you can see that it's drawing a gradient
1085:25 - at uh stopping at a different position
1085:29 - so with n we use document body event
1085:33 - listeners to add this
1085:34 - and as we've seen in the earlier video
1085:38 - which on the spelled window we say that
1085:40 - if you have we can use a special element
1085:43 - like spell window to add event listeners
1085:45 - on it so that as felt can also help us
1085:48 - take care of removing even listeners
1085:49 - when we are not needed anymore so same
1085:52 - case like this we don't have to come
1085:53 - over and add our own village at our own
1085:56 - village event listeners and remove them
1085:58 - you can create this special element
1086:00 - called
1086:01 - svelt body
1086:03 - and add our event listeners over there
1086:05 - so sveld body itself will not create
1086:08 - anything on your screen except it's just
1086:10 - a special element that allows you to add
1086:13 - event listeners onto the body so here
1086:15 - I'm going to say add on
1086:17 - and we're going to use a mouse move
1086:19 - event
1086:21 - and call this function Mouse move
1086:24 - so at the same time we're going to copy
1086:26 - this mouse move event handler collapse
1086:29 - this on Mount and comment everything
1086:31 - oops let me let me do this comment
1086:35 - and now I'm going to create this
1086:36 - multiple function
1086:38 - so
1086:39 - um now everything still works the same
1086:42 - except now we don't have to come don't
1086:46 - have to add event license on unmount and
1086:48 - then remember to clean it up we can have
1086:50 - all this handled by the special element
1086:53 - svelt body to allow us to attach event
1086:56 - listeners onto the body
1086:58 - so um that's all about cell body there's
1087:01 - nothing more that you want that's all
1087:03 - about it
1087:04 - um so at least if you download this if
1087:06 - you go over take it over to the link on
1087:09 - this Rebel you can also play around with
1087:11 - this so that you learn something
1087:13 - unexpected
1087:17 - so let's continue with our special
1087:20 - elements
1087:21 - if you talk about self spell
1087:23 - component
1087:25 - spell Windows felt body and now we can
1087:29 - continue with svelt hit so what is felt
1087:32 - hit similar to sveld window and spelled
1087:35 - body it allows us to add event listeners
1087:37 - to the window or body weight but we
1087:41 - don't add event listeners to as well to
1087:43 - hit to the Head element right no we
1087:46 - don't do that but we do use a head
1087:49 - element to add links meta tags and other
1087:52 - stuff right so swell hit is these
1087:55 - special elements that allow you to add
1087:57 - things to the Head element in your HTML
1088:01 - right you usually use as well components
1088:04 - to
1088:05 - um render something or to add elements
1088:07 - on a specific Target which is usually in
1088:10 - the within the body but sometimes you
1088:13 - want for for what for some reasons you
1088:16 - want because of SEO reasons you want to
1088:18 - add some meta tags meta tags based on
1088:21 - your content onto the title or onto the
1088:24 - description or you want to add external
1088:27 - links just only when this component is
1088:31 - loaded you want to add some external
1088:32 - links to the head you want to do
1088:34 - something add something to the Head this
1088:37 - is this special elements swell hit 4.
1088:40 - so here I have an empty rebel I haven't
1088:44 - done anything but just to show you that
1088:47 - how this works I'm gonna create
1088:50 - um svelt hit
1088:53 - and I'm gonna come over here and
1088:56 - go to I randomly Google some
1089:00 - um Mana text for SEO and here is the
1089:03 - first link that I see so I'm just gonna
1089:05 - come over here and copy some of the
1089:06 - stuff okay so we need some title text so
1089:10 - how about the title of the tag is based
1089:14 - on
1089:15 - [Music]
1089:15 - um
1089:16 - based on the name variable so here I'm
1089:19 - going to have a input by value
1089:22 - equals a name
1089:25 - so here is the wall and here I can use
1089:28 - this variable over here like name like
1089:30 - this
1089:32 - so you although you don't see the title
1089:34 - change over here but because this Ripple
1089:37 - is within an iframe so I'm going to
1089:39 - inspect element and take a look at the
1089:43 - HTML within this uh documents these
1089:48 - iframe documents so here if I zoom
1089:51 - enough so that you can see clearer I
1089:53 - have my head elements and there's this
1089:55 - title called wool so as I type over here
1089:59 - as I type you see that this title is
1090:02 - updating right the content of this title
1090:04 - is changing based on is is dynamic and
1090:08 - it's based on the variable or content
1090:10 - over here so that's why you you will
1090:12 - want this felt hit a special element if
1090:15 - your hit content is fairly static you
1090:17 - know that you want this for all your
1090:19 - pages then you can just write it into
1090:21 - your HTML you don't need this special
1090:22 - elements you usually use it because you
1090:25 - have some Dynamic contents inside
1090:28 - right so next if I take a look what's
1090:30 - next over here is some description
1090:34 - right meta description text so copy
1090:37 - again and I'm gonna paste it in
1090:41 - um again I'm just gonna use name for the
1090:43 - contents in this meta tag
1090:46 - and you will see that now the meta
1090:49 - description the content is called world
1090:51 - and as I type the meta description
1090:54 - changes as well so here you can add as
1090:58 - many meta text you want anything as long
1091:01 - as you wrap it within swell hit they
1091:03 - will be inserted into the head
1091:06 - so let's take a look at another use case
1091:09 - that sometimes I would use because of
1091:12 - the rebel I want to add some
1091:15 - some fonts to this Rebel and usually
1091:20 - when I come over here on Google fonts
1091:21 - when I select some of the fonts it tells
1091:24 - me to come over here
1091:26 - to use it on web use a link and add it
1091:30 - to your head of your HTML but on a rebel
1091:33 - I have no way to whoops sorry
1091:36 - and the rebel have no way
1091:38 - to add HTML to control the HTML so I
1091:41 - need spell head to do that for me so
1091:44 - over here I'm going to copy these two
1091:46 - links this links uh over in the head
1091:51 - and now I can apply the style to my
1091:53 - elements so here I'm gonna have
1091:56 - I'm going to add the div
1092:02 - over here and I'm going to add style
1092:05 - tags so that I can style the div
1092:07 - oops Style
1092:10 - the div and the input
1092:13 - and come over here and copy the font
1092:15 - family I'm not sure you can see this
1092:17 - hopefully not covered by my head but I'm
1092:19 - going to copy it
1092:21 - um over I'm just copying things from the
1092:23 - Google Phone website you can see here my
1092:26 - phone family is just now dancing script
1092:27 - and cursive if I switch over you can see
1092:30 - that now I am showing a cursive script
1092:33 - on both the input and the div
1092:36 - if we take a look at the
1092:39 - um the head of the HTML you will see
1092:42 - that besides title and some Styles this
1092:45 - Styles is added uh this is the style
1092:48 - that is added for this newly Creator
1092:51 - Styles and also have some meta tags
1092:53 - links as we added over here in the spell
1092:57 - head
1092:58 - okay so there's a lot of things anything
1093:02 - is possible within swell hit you can
1093:05 - even have say a style tag added over
1093:08 - here and maybe a
1093:11 - maybe use some uh so anything that you
1093:15 - can write over here will be inserted to
1093:16 - the spell head right so here maybe I
1093:18 - want to do something like
1093:20 - um style and then I have what is that
1093:23 - I'm gonna say Okay root can add some
1093:27 - um
1093:29 - CSS custom properties I'm gonna say
1093:31 - roots and over here I'm gonna have the
1093:34 - maybe font color equals and then I'm use
1093:37 - name for the value okay and here I am
1093:42 - going to use my CSS custom property so
1093:45 - color equals to VAR font color
1093:50 - and as I change this to say red hold on
1093:55 - uh maybe I'm not doing it right let's
1093:57 - take a look at
1094:00 - whether this is updating correctly
1094:03 - because it may not be
1094:05 - uh
1094:11 - let's take a look at our special Style
1094:13 - Elements that we just created root okay
1094:16 - this does not handle nicely okay so this
1094:20 - does not work but we can use HTML
1094:25 - and set the content over here instead
1094:34 - wait hold on I'm not supposed to add it
1094:36 - over here but rather I'm going to add
1094:38 - this whole thing
1094:40 - to wrap over the whole Style Elements
1094:48 - so I'm going to use a HTML tag to add
1094:53 - content over here and this content and
1094:55 - add this content on to the hit so if you
1094:58 - look at here this is being added okay
1095:01 - sorry hold on this should be like this
1095:03 - this whole thing is added to
1095:08 - the it's holding is added to the Head
1095:13 - Right the style is added to the head if
1095:16 - you want anything to edit hit use a
1095:18 - spell hit element and here now if you
1095:21 - change this word to Red you kind of see
1095:23 - that this font color turns to Red
1095:26 - because we set uh the font color custom
1095:30 - property to be
1095:33 - uh to be whatever we are typing in the
1095:35 - inputs and we use that value to be our
1095:38 - color of our uh text over here so if I
1095:43 - change it to uh Rebecca purple
1095:49 - you can see that it changes to replica
1095:51 - purple
1095:52 - of course it doesn't have to add this
1095:54 - Style Elements onto the head then you
1095:56 - can yeah add it over here somewhere in
1095:59 - the body as well it's up to you right so
1096:01 - because style element itself does not
1096:04 - have to be just on the head it can be
1096:06 - anywhere right but usually people like
1096:09 - to edit on the head that's why we are
1096:11 - adding it over here like this
1096:13 - so there you go as well hit element a
1096:16 - special element that does not do does
1096:18 - not add anything on the screen
1096:20 - that you see but edit at the behind the
1096:24 - scenes which is on your head element it
1096:27 - adds anything you add to this felt hit
1096:29 - element will be added to the Head
1096:33 - today we're going to talk about svelt
1096:35 - options
1096:37 - so as well options is a special element
1096:39 - in svelte which allows you to
1096:44 - customize compile options of your Spell
1096:47 - components
1096:49 - customize compile options for as well
1096:52 - components what is that
1096:54 - well if we're not sure about compile
1096:58 - options of components basically spell
1097:01 - options is it's it's beyond our Beyond
1097:05 - us right so let's first take a look at
1097:07 - what are they so over here and I when
1097:10 - I'm looking at API docs which shows uh
1097:14 - which if you go to the spell compile
1097:16 - section it says that you can use this as
1097:19 - well or compile method a function to
1097:23 - compile just felt source code so usually
1097:26 - you don't do this yourself you use it
1097:29 - you use some plugins or loaders
1097:32 - in based on your build tools so for
1097:35 - example if you are using roll up you're
1097:37 - using rollup plugins welt if you're
1097:39 - using webpack you're using spell loader
1097:40 - using something else it's something
1097:42 - something plugins well something
1097:44 - something right so under the hood they
1097:46 - are calling svelt's compiler which is a
1097:49 - metalcore spell.compile to compile your
1097:52 - code
1097:53 - into JavaScript right it takes in this
1097:56 - source code that you write and it spits
1097:58 - out JavaScript code
1098:00 - and this method itself the first
1098:02 - argument is the source code you write
1098:04 - the second argument is the options it's
1098:06 - actually the compile options uh for your
1098:09 - result component so over here there's a
1098:12 - lot of things for example the file name
1098:14 - so this is useful for debugging there's
1098:17 - like name there's format there's
1098:19 - generally there's Dev uh whether it's a
1098:22 - development mode or production mode so
1098:24 - that whether you insert more uh runtime
1098:26 - checks or insert more debugging
1098:29 - um
1098:30 - debugging methods or functions inside
1098:32 - right then you have immutable
1098:35 - hydratable Legacy assessors custom
1098:39 - elements so there's a lot of things over
1098:41 - here which I'm not going to go through
1098:43 - each of everyone especially those that
1098:45 - are related to its custom elements we're
1098:48 - going to talk about them more
1098:49 - extensively we will talk about custom
1098:52 - elements okay so stay tuned if you want
1098:55 - to watch about that subscribe to my
1098:58 - channel so that you get notified when
1098:59 - that's it out so here
1099:03 - um if you scroll through you probably
1099:05 - see that some of the things
1099:07 - sounds familiar
1099:09 - if you read the docs for or tutorials
1099:13 - for spell options okay if you haven't so
1099:17 - here I'm gonna jump over to take a look
1099:19 - right here I'm at the spell tutorial it
1099:22 - says that you can have small options to
1099:25 - come to make some changes right so here
1099:27 - here are the options that you can set
1099:29 - immutable assessors namespace and tags
1099:34 - um so these are here right so you have
1099:38 - tag you have accessors and you have
1099:41 - immutable
1099:43 - so here if I read it out it says that
1099:46 - blah blah blah blah blah right so
1099:48 - instead of reading them out we're gonna
1099:49 - try one by one and see what that affects
1099:53 - the source code that's about is
1099:55 - generating for us
1099:57 - right so we are going to focus on these
1099:58 - three uh rather we're going to focus on
1100:00 - two which is immutable and accessors uh
1100:05 - and name space so three so for tag which
1100:08 - is related to custom elements again I've
1100:10 - said we're going to talk about that
1100:12 - extensively when I talk about custom
1100:14 - elements subscribe to my channel again
1100:16 - okay if you want to get notified for
1100:19 - that so here let's take a look at the
1100:21 - first one which is a more simpler one
1100:23 - right we start from simpler and move our
1100:25 - way up to something more complex so
1100:28 - we'll start with namespace so here we
1100:31 - are back at our Rebel over here this is
1100:33 - our code and over here on the right is
1100:37 - the output
1100:39 - so if you take a look when you write div
1100:42 - and if we write some SVG elements for
1100:45 - example a group element
1100:48 - if you go over here and look at the JS
1100:51 - outputs
1100:53 - you'll realize that they end up
1100:55 - a different code which is one is created
1100:59 - using a function called elements and the
1101:02 - other is using a function called SVG
1101:04 - elements why are they different that's
1101:07 - because the underlying API is different
1101:10 - one is created using document.create
1101:13 - element
1101:14 - and another will be document create
1101:17 - element name space right if I'm not
1101:19 - wrong so
1101:21 - um
1101:23 - why is this different well because svelt
1101:26 - has a little how does veld knows that
1101:29 - this G element is supposed to be SVG
1101:31 - Wells felt uh maintains a list of all
1101:35 - the elements over here so here I'm at
1101:37 - the source code
1101:39 - um and compiler
1101:41 - where it sees that over here SVG
1101:44 - elements are all this right odd glyph
1101:46 - devs animates animate motion Circle
1101:49 - color depths and all everything that you
1101:52 - see over here so they are created using
1101:54 - a different API from the Dom that's why
1101:57 - you need to differentiate them but
1102:00 - however if for some reasons when you're
1102:02 - creating an element and this element is
1102:06 - not in this list in this SVG list as
1102:09 - well has no idea that this is actually
1102:11 - an SVG element
1102:14 - then there's one way that you can tell
1102:16 - spell that okay hey how how about this
1102:19 - all these elements that is written in
1102:21 - this component should be considered as
1102:23 - an SVG element
1102:27 - and how you do that is you're going to
1102:29 - use a namespace option over here so you
1102:33 - could either pass it to the
1102:36 - I'm not sure you have this name space
1102:37 - over here
1102:42 - yeah you could either pass it as
1102:45 - namespace over here in the compile
1102:48 - options
1102:51 - which you can have a HTML math
1102:54 - ml SVG foreign and and foreign over here
1103:00 - what we want is SVG right so you can
1103:03 - tell that okay hey you create this
1103:05 - element using SVG element so you say
1103:08 - you'll come over here and write asphalt
1103:10 - options
1103:12 - namespace equals SVG
1103:16 - uh you can close it immediately you can
1103:18 - create you can close it later on it's
1103:20 - okay but here you see namespace is SVG
1103:23 - and you take a look at the code now
1103:26 - we're creating elements we even treat
1103:28 - divs as SVG
1103:30 - right so if you're using other things
1103:32 - like say spelled natives or other
1103:35 - um compose elements that seems like a
1103:38 - normal Dom elements but it's not then
1103:40 - you can actually pass different
1103:42 - namespace for example Hub but instead
1103:45 - you're using document elements maybe you
1103:48 - create a new namespace called foreign
1103:51 - and you use that to create an element
1103:57 - right Custom Custom namespace so this is
1104:02 - um
1104:02 - the namespace option fair enough right
1104:05 - just treat all these elements whether
1104:07 - they are using a normal element document
1104:10 - create element API because that's only
1104:12 - for HTML with SVG or it's other things
1104:15 - math HTML and other stuff you use a
1104:17 - different you just tell them you just
1104:19 - tell spell that okay use a different
1104:20 - name space
1104:22 - okay so let's move on to the next one
1104:24 - which is ancestors true or false right
1104:27 - adding Getters and Setters what does
1104:29 - that mean okay so here if you have props
1104:32 - for example here I have name props I can
1104:35 - add accessors which is like Getters for
1104:39 - this Getters and Setters for my props
1104:42 - so um let's take a look at
1104:45 - what does that mean so over here I'm
1104:48 - going to copy all these codes and come
1104:50 - over here and say component
1104:53 - paste this in
1104:55 - I remove this
1104:59 - okay so here I have my components and if
1105:03 - I import this component in Parts
1105:06 - component
1105:16 - and
1105:17 - add this in over here
1105:21 - I can bind the
1105:23 - instance of this component to a variable
1105:25 - so I'm going to bind this to component
1105:31 - here
1105:32 - um
1105:34 - I'm going to add on Mount so that I know
1105:36 - for sure this component instance is
1105:38 - available
1105:43 - and on Mount
1105:47 - cover here and say component
1105:49 - I'm gonna console log this component so
1105:53 - this should gives us the instance of
1105:56 - this component so of course I need to
1105:58 - declare this variable
1105:59 - so here uh probably you can see anything
1106:02 - but if you inspect you open the console
1106:06 - you should see that
1106:10 - okay let me clear this and run this
1106:13 - again you should see that this component
1106:15 - have some methods to it
1106:18 - um most of them are private the only
1106:23 - thing that you kind of able to use is if
1106:25 - you come over here to look at component
1106:28 - API which is this these are the
1106:32 - so-called slightly public methods for
1106:36 - example sets and for events and Destroy
1106:40 - to remove your components right so if
1106:42 - you come over here and you set
1106:45 - uh you can set uh the props right so
1106:50 - here I'm gonna say component
1106:52 - dot sets
1106:54 - I'm going to pass in a object and here I
1106:58 - have name right so I'm going to pass
1107:00 - name to something else name to buy
1107:04 - foreign
1107:05 - [Music]
1107:12 - update the value of the props using the
1107:15 - sets dollar sets method to update the
1107:17 - buy a name to buy and you see this value
1107:19 - has changed
1107:21 - uh of course this you can use this but
1107:24 - sometimes you want a slightly easier way
1107:27 - of getting the props or changing the
1107:31 - props over here there's no way that for
1107:33 - you to basically read out the value of
1107:35 - the props right so what we need is
1107:39 - so-called assessors so we're going to
1107:42 - add the swap options to the components
1107:44 - that we want to have accessors which is
1107:46 - this component come over here and say
1107:48 - spell options uh assessors
1107:51 - equals to true
1107:54 - so false is the default
1107:57 - if we take a look here it says false
1107:58 - it's the default if we want the asset
1108:00 - getter and Setters we need to pass it as
1108:02 - true
1108:03 - so here we have accessors as true now
1108:07 - what we can do is you can convert here
1108:10 - and say component dot name equals to buy
1108:16 - at the same time if you take a look at
1108:19 - one of the components that's log out you
1108:22 - can see properties over here right now
1108:24 - previously there's no such thing and now
1108:26 - you have new property and we can now
1108:30 - read the value out and update value
1108:32 - directly over here using accessors so
1108:35 - now if I close the console and take a
1108:37 - look at the output let's see what's the
1108:39 - difference right so we'll focus on the
1108:41 - components and see the code over here so
1108:45 - it generates a class
1108:47 - for your component
1108:49 - and it adds this to the name the getter
1108:52 - for the name and the center for updating
1108:54 - the name right under the hood is still
1108:57 - using the dot sets method except that
1108:59 - it's much easier for you to just call
1109:02 - component.dame equals something right so
1109:04 - that you can set it if you remove this
1109:06 - line or just change this to false
1109:09 - then these two getter and Setter is not
1109:12 - generated
1109:13 - so by default this is false for some
1109:16 - reason if you want this you can turn it
1109:18 - to true all right this is usually I'm
1109:21 - not sure what is being used in real life
1109:23 - but one very nice cases that been using
1109:27 - is in the test test cases for source
1109:31 - code you will see that this is turned on
1109:33 - so that we can just read out the props
1109:36 - value so that we can verify you can
1109:38 - check uh but we can check in our test
1109:40 - cases asserts whether the props is right
1109:43 - now the value that we are expecting
1109:45 - so this is excesses so if you have
1109:48 - multiple options that you want to change
1109:50 - for example just now we were saying like
1109:51 - a namespace and now it's accessories
1109:53 - then you use the same Spell option
1109:55 - element and add more stuff over here
1109:58 - right
1110:00 - um if you try to create another spell
1110:01 - options elements you probably see that
1110:04 - you will say that one component can only
1110:06 - have one spell options tag so you can
1110:09 - only have one so if you want to have
1110:11 - configure multiple of them just create
1110:13 - multiple attributes right here now we
1110:17 - are fully that's okay for assessors so
1110:19 - we're gonna move on to
1110:22 - um the last one which is immutable
1110:25 - so if you watch my previous videos on
1110:29 - spell store you probably noticed that uh
1110:32 - in the immutable star we talk about how
1110:35 - we use this when we are saying that we
1110:38 - want to have immutable data so what is
1110:41 - this immutable options okay so here is a
1110:45 - ex explanation from my a slightly easier
1110:49 - explanation on this option itself so by
1110:53 - default uh if you come over here let's
1110:56 - continue using this component let me set
1110:58 - it up first say for example I have
1111:01 - another state object called uh object
1111:05 - okay this is an object
1111:07 - and has a few properties say maybe
1111:10 - name equals my name and maybe ish oh no
1111:16 - it's a secret okay secrets
1111:19 - so here I have an object
1111:21 - and I can
1111:25 - show the value of this uh state so I'm
1111:28 - coming over here and object dot uh okay
1111:32 - let me
1111:34 - okay this is not let's just
1111:37 - commence this out
1111:40 - right hey what's wrong with okay
1111:43 - now we have object dot name
1111:48 - and is
1111:50 - object.h
1111:54 - okay so I I'm gonna read this name and
1111:57 - of the object a name and object H and
1112:00 - you can see this display on the screen
1112:02 - okay that shouldn't be a problem so now
1112:04 - we have a buttons that we want to uh
1112:09 - updates the object right so when I have
1112:12 - this button when I click this button
1112:14 - what happens is that
1112:20 - uh I will set maybe object.name it goes
1112:25 - to
1112:27 - felt so I when I click this button let's
1112:31 - see let's have this button button
1112:35 - hey where does my button go okay names
1112:40 - access namespace is fpg so it's creating
1112:42 - an SVG element equipment element in the
1112:45 - SVG namespace that's why you don't see
1112:47 - the button over here let's remove this
1112:48 - or change it to HTML to tell you that
1112:51 - this is the default see the button over
1112:53 - here so here if I click on the button it
1112:57 - mutates the object
1112:59 - uh by setting the name equal to svelte
1113:02 - and now you can see this is updated on
1113:05 - the screen right I think we've been used
1113:07 - to do this for and this is the default
1113:11 - behavior of svelt right so what happens
1113:13 - is that actually uh what spell cares is
1113:18 - uh down to the bottom of this is it only
1113:21 - cares about the state variable right so
1113:24 - name is not really a state variable it's
1113:26 - it's the object itself is a variable
1113:27 - that is a state so any top level
1113:29 - variables over here that is being that
1113:32 - can be changed and is being used in a
1113:34 - template is considered as States
1113:36 - variable so like name and object over
1113:38 - here not this object name or object.h
1113:41 - right so
1113:43 - every time when you change something
1113:45 - when you change this object it will
1113:48 - um it will
1113:50 - go to spelled and say okay this is
1113:53 - changed but before that we also need to
1113:55 - verify whether is it actually changed so
1113:58 - for example if you come over here and do
1114:00 - something like name it goes to world
1114:04 - since it's already wool and you try to
1114:06 - click and so if you do this you're
1114:09 - changing name to bank to the same value
1114:12 - nothing will happen when I say nothing
1114:15 - will happen it's not like you click and
1114:18 - you see nothing and husband right of
1114:20 - course it's gonna even if something has
1114:22 - happened it's updating the variable wall
1114:24 - the name to the value wall and you don't
1114:27 - see it happen but when I say nothing is
1114:29 - happening has happened is that it's
1114:31 - actually nothing has happened so if you
1114:33 - import
1114:35 - uh say before update
1114:37 - so technically this function should call
1114:39 - when there's an update and right before
1114:41 - something has updated right so if you
1114:43 - come over here and register before
1114:45 - update and let's just add uh maybe like
1114:48 - a console log to let us know whether
1114:50 - something is happening like something is
1114:52 - updating
1114:53 - you realize that okay when I click this
1114:57 - button nothing has happened you don't
1115:00 - see a before update it's being logged
1115:02 - out we change this to world to wall two
1115:05 - when you click you see that before
1115:07 - update is being called right two times
1115:09 - right the first time is when when we
1115:11 - Mount this component second time is when
1115:12 - you click on the button but you are
1115:14 - changing back to the same value nothing
1115:16 - has happened why because right before
1115:19 - when you assign or right after you do an
1115:22 - assign and before I'll say hey this
1115:24 - variable has changed and this file does
1115:26 - one check it checks whether the value is
1115:29 - the same as what is being assigned to
1115:32 - so if the value is exactly the same
1115:35 - then we can just even skip this update
1115:38 - cycle don't run like before updates and
1115:41 - you know go and check like updates as
1115:43 - elements and then call like after update
1115:46 - and all those stuff don't do anything
1115:47 - because nothing is Gonna Change
1115:50 - um but how about object if you do this
1115:53 - if you come over here and do this to
1115:56 - object
1115:58 - what are you going to compare with if
1116:01 - we're going to compare by the object
1116:03 - reference
1116:04 - nothing has changed right you are
1116:06 - mutating the object object reference is
1116:08 - still the same then technically nothing
1116:11 - should happen
1116:12 - but because we've been kind of promoting
1116:17 - mutating this object uh in a sense where
1116:20 - we're saying like you can just change
1116:21 - this object directly and it should
1116:24 - trigger a
1116:26 - um a change and update so this
1116:29 - comparison this compare method of
1116:32 - comparing whether something has changed
1116:33 - or not is not your typical triple equal
1116:37 - it's not your typical referential equal
1116:40 - that compares and see whether something
1116:42 - has changed it actually has an uh
1116:45 - special case for
1116:48 - special case for objects and function it
1116:51 - treats all objects of function as it's
1116:54 - always changing right as long as you do
1116:56 - this and say oh I guess object is
1116:59 - changing and you call this function a
1117:01 - check it will always say that okay if
1117:03 - it's on the object it should be changing
1117:05 - right I don't check the value at all and
1117:08 - if you take a look at this
1117:11 - um
1117:12 - generated code over here what this
1117:15 - function that I just described is called
1117:17 - save not equal over here and you can
1117:21 - read this Source or save not equal
1117:25 - over here let me find it for you it's
1117:28 - called runtime internal util it's called
1117:33 - save not equal
1117:35 - let me Zoom it up if it's not clear
1117:38 - enough it says that compare this object
1117:41 - right if something has changed or as
1117:43 - long as the object is object or function
1117:46 - it should be changing just treat it as
1117:49 - it will change if you if you assign to
1117:52 - something else although you're assigning
1117:53 - it to the same object reference as long
1117:56 - as you are assigning to an object it
1117:58 - should just you just treat it as it has
1118:00 - changed right so this is how it is
1118:05 - um
1118:06 - and you can actually change this
1118:08 - Behavior right if you all the assessors
1118:12 - that sorry all the assignments that
1118:14 - you're doing even to objects are not
1118:18 - mutable meaning you are not mutating
1118:20 - this object then you can have this flag
1118:23 - turned on which is called
1118:26 - immutable immutable we set it to true
1118:30 - then now it's spelled
1118:32 - uh trust you that you say that
1118:34 - everything when you want to change it's
1118:36 - going to be an immutable change meaning
1118:38 - it believes you say that this is not
1118:42 - gonna happen so whenever you try to
1118:44 - assess or something like this it will
1118:46 - just check the object reference it will
1118:48 - check your object versus the reference
1118:50 - of the object that was currently and if
1118:53 - you try to click this button now you see
1118:55 - that nothing has happened before update
1118:57 - it's not being called
1118:59 - but don't forget you are still mutating
1119:03 - the objects meaning if you come over
1119:05 - here and say uh maybe we add some time
1119:09 - out uh some interval to log out the
1119:12 - value of the object say here on Mount
1119:16 - and we're gonna add this uh when on
1119:19 - Mount
1119:24 - let me type uh let's interval ID equals
1119:29 - to set interval
1119:33 - uh every maybe one second
1119:36 - I'm gonna say console log object
1119:41 - and return
1119:44 - clear interval
1119:46 - interval ID
1119:53 - okay so now every second we are
1119:55 - Consulting out the object
1119:58 - and
1119:59 - when you click yes nothing has changed
1120:02 - but you realize that this object name
1120:06 - has changed to svelt okay that I believe
1120:09 - we have been running this uh there's a
1120:13 - lot of things being running because we
1120:15 - we refresh so let me just refresh and
1120:17 - only it it
1120:20 - hot reloads every time when I type
1120:22 - that's why maybe there's a lot of things
1120:24 - printed out at the same time right so
1120:25 - now we only have one object printed once
1120:28 - a second so here again when we click the
1120:31 - button nothing has changed but you
1120:34 - mutate the object and now you see that
1120:36 - the object name is spelled emitted
1120:39 - object right but then because swell
1120:42 - trusts you that when you you won't do
1120:44 - mutation right meaning when you do this
1120:46 - it will still say Okay I want to
1120:49 - something has changed object has changed
1120:51 - here okay go and check but now you're
1120:54 - not used this uh what's that called
1120:56 - again you're not calling save not equal
1120:59 - you're not using save not equal you're
1121:01 - using uh not equal over here you're
1121:05 - using not equal which is comparing uh
1121:08 - it's a triple equal comparison to your
1121:12 - um
1121:14 - to the object right so if you take a
1121:16 - look at the source code now scroll all
1121:18 - the way down it's called not equal right
1121:20 - this is a triple equal meaning if your
1121:22 - object reference is still the same
1121:25 - we are not considered it as a change
1121:27 - right there's no special case for object
1121:29 - over here so if you do this then
1121:32 - yeah you're not gonna see any
1121:36 - changes happening on the screen
1121:38 - so the way to now is to do this right
1121:42 - object equals to and then you do uh uh
1121:45 - you do not mutating object rather you
1121:48 - try to maybe update the object over here
1121:50 - manually so H equals to object.h
1121:53 - right you create rather update red sorry
1121:56 - I shouldn't say updates but rather you
1121:58 - uh create a new object every time you
1122:01 - want to mute it
1122:02 - so here you call name spelled and H
1122:05 - equals the original H are usually what
1122:08 - people likes to do is to just spread
1122:10 - this object and because there's a lot of
1122:12 - properties that could be changing so you
1122:15 - do a spreading
1122:16 - uh let me let me oh no wonder it's not
1122:19 - working it should be clear interval
1122:22 - no wonder it's not cleaning up for me
1122:23 - okay let's be refresh again
1122:31 - right so here
1122:35 - uh you you do this
1122:38 - and now uh you look at the object when I
1122:43 - click it change to spelled right now you
1122:47 - see I'm I'm not gonna mutate I'm I'm
1122:49 - gonna create a new object for you right
1122:52 - so when is this useful this is useful
1122:54 - when you are using when you
1122:57 - when you update object every time
1123:00 - immutably right meaning every time you
1123:02 - want to update something you create a
1123:04 - new object or maybe when you're using
1123:07 - some sort of library that promises your
1123:09 - data that makes your data to be
1123:11 - immutable
1123:12 - right and you can turn on this immutable
1123:15 - flag only on that component when you're
1123:17 - using those kind of data you don't have
1123:18 - to apply to all the components right
1123:20 - some usually when you come over here to
1123:23 - your compile options that we've seen so
1123:25 - far uh usually you specify this in your
1123:29 - build tool to your plugins right or
1123:31 - swell loaders or roll-up plugins felt so
1123:34 - that will apply to all the components
1123:37 - but here you are only turning it on for
1123:40 - this particular component if your other
1123:43 - component is changing object mutably is
1123:47 - still okay it is still okay so right now
1123:50 - if I look at GS output this is still
1123:52 - safe not equal but for components felt
1123:54 - if you scroll down it says it's not
1123:56 - equal right so this will only apply to
1123:59 - one component only
1124:01 - so um using if you so the the inverse of
1124:06 - it is you're gonna say immutable to be
1124:08 - false but that we know is the default
1124:11 - Behavior right it says this is the
1124:14 - default Behavior
1124:17 - so so there you go we've talked about
1124:19 - immutable options namespace options and
1124:23 - assessors options so options are like
1124:26 - compiler options that determines what is
1124:29 - your output your generated code will
1124:31 - look like where to add extra code or
1124:34 - change some of the output of your
1124:37 - generated JavaScript code from asphalt
1124:40 - source code right usually you apply you
1124:43 - Pro you provide this to your plugin for
1124:46 - your build system but if you want to
1124:48 - apply this only for particular for one
1124:51 - component only then you can use these
1124:53 - swell options element which allows you
1124:57 - to change only this component
1125:01 - so there you go spell options if you
1125:03 - have any questions any questions
1125:06 - comments down below because I believe
1125:08 - all these are very
1125:11 - different from what we have used to be
1125:13 - doing because this is more of a meta
1125:16 - level you try to change the output code
1125:18 - and tweak a bit on the behavior which we
1125:22 - don't usually interact every time when
1125:25 - we're using svelt but it is there
1125:30 - so we have seen how we able to style our
1125:33 - elements in svelts using the style
1125:36 - attributes class attributes we've talked
1125:39 - about how we can use the class directive
1125:41 - that you can toggle on and off apply
1125:44 - certain class to your elements and today
1125:46 - we're going to explore another features
1125:48 - from svelts that allows us to pass
1125:50 - custom properties from CSS CSS custom
1125:54 - properties to a component and we're
1125:57 - going to explore how that help us to
1125:59 - style our components control certain
1126:03 - Styles within our components well this
1126:06 - is actually a new feature added and it's
1126:07 - felt in version 3.38
1126:10 - based on this RFC as you can see on the
1126:13 - screen RFC
1126:15 - pr13 it says passing CSS custom
1126:17 - properties to components and it's say
1126:21 - that there's a lot of text that you can
1126:23 - take a read about this I'll link this in
1126:26 - the description
1126:28 - explain the motivations and things like
1126:30 - that but you know uh it's we're not
1126:33 - going to read all this out for you
1126:35 - rather we're going to explore how this
1126:37 - will help us
1126:39 - um in part like controlling some parts
1126:43 - of your components uh
1126:46 - stylings from the outside this feature
1126:49 - will give us one more tool in our tool
1126:52 - chain to help us style our components
1126:56 - so let's take a look at an example that
1126:58 - prepared over here
1126:59 - so here I have a button component I
1127:02 - create three buttons on the screen with
1127:05 - the red button the blue and the yellow
1127:07 - and as you can see how I control the
1127:09 - style of the components is by using the
1127:12 - props so I'm going to pass in a props
1127:15 - called button color and sometimes I pass
1127:18 - a props called text color that control
1127:20 - the color of the text
1127:22 - because if you take a look at the codes
1127:24 - in this button component you'll see that
1127:27 - actually allows two props a button and a
1127:30 - text and the there's some default colors
1127:33 - so the default will be the red color and
1127:35 - default colorful text will be white and
1127:38 - as you can see we're gonna use these two
1127:40 - uh value in our style attribute so the
1127:44 - background is using the button color and
1127:45 - the color is using the text color
1127:48 - so all good
1127:50 - um yeah I would say that this is this is
1127:53 - one of a good pattern for you to allow
1127:57 - um
1127:58 - installing the your components right but
1128:02 - sometimes you you might want you might
1128:05 - think that sometimes you know for some
1128:07 - reasons you you don't want to
1128:10 - um
1128:11 - use the props to control the style of
1128:14 - your components because sometimes you
1128:15 - think that a
1128:18 - like props should be more of like data
1128:20 - kind of thing more for JavaScript site
1128:22 - if you want styling maybe you want to do
1128:24 - it on a CSS side right so here we have
1128:28 - another here I would like to propose an
1128:30 - alternative
1128:31 - um to what you can do over here I
1128:33 - wouldn't say this is better or like
1128:36 - worse is it's just like an alternative
1128:38 - one more tool in your toolbox that you
1128:41 - can use and employ
1128:43 - so here sometimes you want to style your
1128:46 - elements using a CSS custom properties
1128:49 - so CSS custom properties
1128:52 - um
1128:52 - custom properties that is
1128:55 - um that that are not like world uh
1128:58 - that that are not defined then you can
1129:01 - customly Define so properties are like
1129:04 - background and color they are like
1129:07 - built-in properties right but then you
1129:09 - also can Define some custom properties
1129:11 - for example
1129:13 - um
1129:14 - uh
1129:15 - um the way you do it is that you come
1129:17 - over here and you add
1129:20 - two dashes and you name your custom
1129:22 - properties over here so here I can say
1129:25 - maybe a custom property called button
1129:27 - color
1129:29 - um and then I pass in a value so maybe I
1129:31 - can pass in value like red and to use
1129:34 - this custom property I will come over
1129:36 - here and say VAR button color
1129:40 - in States
1129:47 - right so now you can see all my buttons
1129:49 - are in red color so this is the custom
1129:53 - property right you can Define it
1129:55 - anywhere any element and it will follow
1129:59 - inheritance based on the Dom tree
1130:02 - structure right so if your parents
1130:04 - Define this custom properties all the
1130:06 - elements Dom elements based on the Dom
1130:08 - structure of the three Elementary will
1130:11 - will receive these custom properties and
1130:13 - can able to use this custom property
1130:16 - right so here you uh we we are defining
1130:19 - and using it on the same elements so you
1130:22 - can have you can come over here and have
1130:24 - a span instead
1130:25 - uh and come over here and use this value
1130:30 - if you want to so say style background
1130:33 - it equals to yeah over here and it does
1130:37 - not have to be used in an inline style
1130:39 - you can also have uh things like maybe a
1130:42 - style tag and say Define like a spine
1130:45 - elements with a background equals to VAR
1130:49 - background color right so you can Define
1130:52 - this custom property over here called
1130:54 - button color and all its elements and
1130:56 - its element to room will be able to use
1130:59 - this custom property
1131:01 - um so depends on what the value is you
1131:03 - you will use that value over here and
1131:05 - you can use this value across a lot of
1131:08 - places right it doesn't have to be just
1131:11 - in Span background color it can if you
1131:14 - have another say a div over here
1131:17 - um
1131:18 - see some text some text you can also use
1131:22 - it uh multiple places right so it's just
1131:25 - all all the elements that uh is
1131:28 - underneath of
1131:29 - all the elements that is within this
1131:32 - scope of your custom property will be
1131:34 - able to use this custom the value of
1131:38 - this custom property over here so as you
1131:39 - can see you can have the text and some
1131:42 - text in different color and yeah using
1131:44 - background and color different
1131:46 - properties can use the same custom
1131:48 - properties over here
1131:50 - so
1131:52 - uh what this means is that because you
1131:56 - can use this uh element uh this custom
1132:00 - property
1132:02 - once you apply to one element all these
1132:04 - children will receive it right so
1132:06 - meaning it doesn't have to be come over
1132:07 - here it doesn't have to be within uh
1132:11 - this button component you can have this
1132:14 - written somewhere else somewhere higher
1132:17 - uh as long as it's a parent of the uh of
1132:23 - your elements in the elementary
1132:25 - structure in your Dom tree structure
1132:27 - right so if I say I wrap this button
1132:30 - with this uh if I wrap the button with a
1132:33 - div and I come over here and Define
1132:37 - the style of say button color
1132:42 - as read
1132:43 - you can see that now this button will
1132:47 - receive this button calibrate because
1132:49 - these two Now does not have any color
1132:52 - plight because the button color is
1132:55 - undefined and if you have undefined then
1132:58 - the background and color will be
1132:59 - undefined
1133:00 - so you can uh this so in CSS if you want
1133:04 - to use a custom property and sometimes
1133:07 - you know that maybe this may be
1133:10 - undefined you want to provide a fallback
1133:11 - so the way of providing fallback for a
1133:14 - custom property will be come over here
1133:16 - in your bar you see a custom property
1133:18 - name and then a fallback value so here
1133:20 - I'm going to fall back to say blue
1133:23 - uh and here I'm gonna fall back to say
1133:27 - blue as well
1133:29 - and now as you can see
1133:31 - oh sorry yeah it's not working because I
1133:34 - shouldn't have the quotes and now you
1133:36 - can see that now uh instead of red
1133:39 - you'll fall back to Blue
1133:41 - and if I come over here and ramp this uh
1133:45 - buttons
1133:46 - and I say
1133:51 - style equals to button color yellow
1133:57 - you'll see that now this will be in
1133:59 - yellow color
1134:00 - right and so in this is this is all CSS
1134:05 - right it has nothing actually has
1134:07 - nothing to do with felt
1134:09 - um and one more thing I want to point
1134:10 - out is this itself can be uh there there
1134:15 - is like hierarchy uh there is like
1134:17 - inherit some sort of like inheritance in
1134:20 - terms of the elementary of of your
1134:22 - custom property right if
1134:24 - um the when you are reading a custom
1134:26 - property you read from a nearest parent
1134:28 - that is defining this custom property
1134:30 - meaning if you come over here and uh
1134:34 - and Define another div
1134:39 - that
1134:40 - has a style called button
1134:45 - color green you see that you still the
1134:49 - yellow still applies this is the same as
1134:50 - how you add CSS property in your in your
1134:54 - style of sheet in your elements right
1134:56 - when you when you change the color to
1134:59 - green and you change the color in this
1135:01 - div to be yellow then all the text will
1135:03 - be in color yellow because the nearest
1135:06 - parents rule applies right and it
1135:09 - overwrites whatever is set out there
1135:11 - right so if I if I remove this you'll
1135:13 - see that now it's in yellow in green
1135:15 - color because now the the nearest one
1135:18 - will be this one that's been defined
1135:20 - right so so CSS custom property is very
1135:23 - similar as a normal property in CSS
1135:26 - except uh this is custom you can Define
1135:28 - any name you want and you start it with
1135:31 - two dashes and you can use it in any way
1135:34 - you want uh like like a variable in CSS
1135:37 - where you use VAR and then this custom
1135:39 - property name and then if you want
1135:41 - optionally you can have a fallback value
1135:45 - right so all of this is is about CSS
1135:48 - we've got nothing to do with components
1135:51 - but now we're going to tie it back a bit
1135:53 - on how we can use it
1135:56 - um in our components how we can use this
1135:59 - to style a component
1136:01 - so here instead of providing props if we
1136:07 - now have another way that we can instead
1136:11 - of providing props now we have another
1136:12 - way that we can
1136:13 - um
1136:14 - allow people to affect
1136:17 - um the colors or the styles of our
1136:19 - elements right here we instead of
1136:22 - providing props we now we say if we
1136:25 - Define you know docs somewhere like in
1136:28 - our component if I say that okay we are
1136:30 - going to use this property called button
1136:32 - color to style our button
1136:35 - then from outside here we know that okay
1136:38 - we just need to provide this style like
1136:41 - color green then you'll affect a color
1136:43 - yellow over here then you will affect
1136:44 - the color inside right this is this is
1136:46 - somewhat like a props but it works in a
1136:49 - element Dom tree Dom element structure
1136:53 - way and it works using CSS it got
1136:56 - nothing to do with the Spells at all
1136:59 - but here once you define like okay I
1137:02 - would accept CSS variable like color and
1137:06 - CSS uh maybe property called text right
1137:09 - let me let me go back to here and say
1137:12 - let me revert some of our changes let's
1137:14 - say background color it's going to be
1137:17 - VAR
1137:19 - button color and then fall back to red
1137:24 - and color will be
1137:28 - using VAR text color and fall back to
1137:32 - White okay I forgot I shouldn't use
1137:35 - quotes because quote the snow Works in
1137:37 - CSS okay if I do this
1137:40 - um I can also remove all these things
1137:44 - all right just let me just revert all
1137:46 - the changes I've made so far
1137:48 - now we can don't we don't have to take
1137:51 - in any props and we can allow people to
1137:54 - come over here and style this right I
1137:56 - can see uh text color is black
1138:00 - and now you can see I'm styling this
1138:02 - yellow button to be yellow color and
1138:04 - black and this button to be a div
1138:08 - style button color
1138:11 - blue
1138:14 - and text color
1138:17 - uh
1138:20 - uh yellow right
1138:31 - so some people will prefer uh using CSS
1138:34 - to style like everything relates to
1138:37 - style use CSS some people may have that
1138:40 - preference and this is one of the way
1138:42 - that you can use right this is this is
1138:44 - purely CSS got nothing to do with uh
1138:46 - spell at all it's just about you can use
1138:49 - you can pass a CSS custom properties
1138:51 - from the outsides and then you can
1138:53 - affect Styles and inside of your
1138:56 - component
1138:57 - uh one good thing about using this
1138:59 - method is that you don't have to come
1139:02 - over here and reach into
1139:04 - elements inside the components so
1139:07 - meaning you don't have to know uh like
1139:09 - for example
1139:11 - uh previously if you if you don't have
1139:14 - CSS custom properties to to change the
1139:17 - style inside using CSS and you don't
1139:19 - have any props to change that the one
1139:21 - way that you can do uh is to to use the
1139:25 - style to to try to change it right where
1139:28 - you would write div and then maybe you
1139:30 - know that somehow you know that within a
1139:32 - component there's a button so you look
1139:34 - for the button elements and you want to
1139:36 - change uh something inside there right
1139:39 - uh maybe font size
1139:43 - 20 pixels and because the button itself
1139:46 - is not written like there's in this
1139:48 - element itself there's no div button and
1139:50 - because this button is written inside
1139:52 - the components usually right here with a
1139:54 - global so that we can Target uh go
1139:59 - buttons that is within not within this
1140:01 - component file but it's within some
1140:03 - components that we are using so we we
1140:06 - have retargeting the div that is scope
1140:08 - to these components all the div and if
1140:11 - they have a button inside those buttons
1140:13 - should be font size of 20 pixel
1140:17 - right so this somehow is a bit leaky in
1140:21 - a sense where you kind of have to know
1140:23 - uh what elements is rendered inside your
1140:26 - components of course you can document
1140:28 - that you can you can publicly say okay I
1140:31 - will have a buttons elements and you can
1140:33 - style it right it's up to you but
1140:35 - sometimes you don't want to expose that
1140:37 - sometimes you know sometimes you're
1140:38 - using a button element sometimes for
1140:40 - some logic you're using a span or some
1140:42 - other elements and you don't want to
1140:44 - expose that as a public API for publicly
1140:47 - for other people to know
1140:49 - um so so that is so in that sense you
1140:53 - wouldn't want to do this
1140:55 - so here is an alternative where you can
1140:57 - use CSS is that okay how about I don't
1140:59 - tell you what kind of elements that will
1141:01 - be but I tell you like what kind of CSS
1141:03 - custom properties I've been using for
1141:05 - example in this case button color and
1141:07 - text color and just style them right you
1141:09 - don't know how I would use them because
1141:11 - I may have multiple elements that use
1141:14 - the same custom Properties or use a few
1141:17 - custom properties say I can use this
1141:20 - button color as a background I can use
1141:21 - it in my box Shadow and all these things
1141:23 - I'll just let you know you don't have to
1141:26 - like find a way to override them I just
1141:28 - let you know I'm going to use this
1141:29 - custom property and you can just change
1141:31 - it to change the style of my component
1141:34 - right in that way uh you use a CSS
1141:37 - comfortable property to override them
1141:38 - over here
1141:40 - so so there is there you go how to use
1141:43 - Uh custom properties to do this but
1141:45 - sometimes you don't want to add an extra
1141:46 - div and that there is for good reasons
1141:49 - you don't want to add an extra div
1141:52 - um because if I revert all this you may
1141:55 - notice something happens when I add an
1141:57 - extra div uh you notice okay not just
1142:00 - the color I've changed notice that this
1142:03 - button and all this button button itself
1142:05 - is an inline element uh display inline
1142:08 - block uh you notice that now
1142:12 - uh these two buttons are side by side
1142:16 - but once you add a div like this
1142:20 - kind of create a new uh
1142:23 - for Block formatting context which makes
1142:26 - this diff uh renders in a new line right
1142:29 - so you add Styles over here and you say
1142:32 - uh
1142:33 - button color yellow
1142:36 - and text color black creates a new light
1142:40 - right so oh I think I need two dashes
1142:44 - over here create a new line and
1142:46 - sometimes we don't want that right so if
1142:48 - you know okay this is creating a new
1142:49 - line maybe we can use a span because
1142:52 - span is inline itself but that means we
1142:56 - kind of
1142:57 - uh have to know like what kind of
1143:00 - elements inside and kind of have to
1143:02 - decide whether we are going to use a div
1143:04 - or span or maybe you know within these
1143:07 - components is actually rendering two
1143:09 - buttons
1143:10 - and it itself may have some sort of uh
1143:14 - if if the parents container is using
1143:17 - some display Flex or something you may
1143:19 - adding an extra element over here means
1143:22 - all that your will break your layout
1143:24 - right for example maybe you you're using
1143:27 - a grid right a grid is a good example
1143:29 - because using a grid uh each elements in
1143:32 - a grid level uh decides which
1143:35 - um
1143:36 - where do you place that grid element
1143:38 - right so for example I come over here
1143:40 - and say div
1143:42 - uh over here with a div we're going to
1143:45 - use display grid
1143:49 - um you create template columns
1143:52 - uh I'm just gonna one fi one FR grid
1143:57 - template rows okay I don't even need
1144:00 - this right you notice that now I have
1144:03 - um two by how many however many rows of
1144:07 - a grid okay maybe I just do three right
1144:11 - uh if you know if I don't have this div
1144:14 - all the wrapping diff you'll notice that
1144:16 - buttons are rendered in a three by two
1144:20 - Matrix but once you wrap with a span
1144:22 - over here this whole thing is considered
1144:24 - as one right this whole span is
1144:26 - considered as one now these two buttons
1144:28 - are rendered within a one grid one grid
1144:32 - cell
1144:33 - right uh which is which is which is not
1144:35 - great which is not what we want we just
1144:37 - want to have a way to style at like a
1144:40 - style custom elements on over here and
1144:43 - it now breaks our layout
1144:46 - uh it doesn't matter whether we are
1144:48 - using default span right it's just
1144:50 - because
1144:50 - previously there's two elements now it
1144:52 - becomes only one element
1144:54 - so the way to solve this again we're
1144:57 - going to reach out to CSS a way to solve
1145:00 - this is to use a custom display value
1145:03 - which is called display
1145:06 - contents
1145:08 - what this display contents means is that
1145:11 - uh treat this div itself as nothing SS
1145:16 - nothing at all in terms of layouts right
1145:19 - so what this means is that I'm it's I'm
1145:22 - just don't consider me at all when
1145:24 - you're doing layout just consider all my
1145:26 - contents right if my contents has two
1145:28 - elements it should consist two elements
1145:30 - and and you place these two elements
1145:33 - separately in your Grid or whatever
1145:34 - layout you're using just consider me as
1145:37 - nothing consumers has gone I'm not here
1145:39 - at all in terms of layout so which means
1145:41 - this element itself cannot be applied I
1145:44 - cannot have like padding can I have
1145:45 - margin can I have anything right just
1145:47 - it's just gone in terms of CSS layouts
1145:52 - so here uh we kind of solved this with
1145:55 - display contents and
1145:58 - um and now again we can add uh CSM Uh
1146:02 - custom properties to this button right
1146:04 - of course this is a very contrived
1146:06 - example because sometimes you don't have
1146:10 - all these different buttons that you
1146:11 - want to have different styles maybe in
1146:14 - your case all your buttons are all your
1146:17 - buttons you want is yellow and black
1146:19 - text button right then maybe you don't
1146:22 - even need to wrap div at this level
1146:25 - you just need to wrap it over here you
1146:27 - just need to add this custom properties
1146:29 - over here right uh
1146:32 - just need to add over here and all the
1146:34 - buttons are yellow color and black right
1146:37 - then you don't even need to worry about
1146:38 - display contents at all because yeah
1146:41 - it's it's this does not matter at all
1146:43 - right so the the case that I've showed
1146:46 - you just now is when
1146:48 - um you want to start a particular button
1146:51 - component over here you you want to wrap
1146:55 - around a particular components because
1146:57 - it wants to have
1147:00 - starlings custom properties defined on
1147:03 - that is specific to this button itself
1147:05 - right so let me revert some of the
1147:08 - things uh let me copy back this and I
1147:12 - just want to say that it's different
1147:14 - because this is
1147:16 - green and white okay you can see now
1147:19 - again it's not too um it's not occupying
1147:22 - two cells separate independently now we
1147:24 - use display
1147:26 - um contents
1147:28 - and now you see there are individual
1147:30 - cells
1147:33 - so we we have talked uh we will spend
1147:36 - the whole video talking about how we CSS
1147:39 - CSS custom properties how we can use
1147:41 - them what kind of uh situation that you
1147:44 - may occur how you can work around and
1147:47 - fix it how you can use display contents
1147:49 - and things like that so where does this
1147:51 - where does our passing CSS custom
1147:54 - properties to components come into play
1147:57 - well
1147:59 - uh we are actually staring at it pretty
1148:02 - close right now
1148:04 - so here we we say that we come into some
1148:07 - sort of conclusion when you have certain
1148:09 - scenarios where you want to wrap a
1148:12 - component with a div just because you
1148:14 - want to style it and you want to have
1148:17 - this div to have display contents
1148:19 - because you don't want to affect the
1148:21 - layouts because maybe this button itself
1148:24 - the parent of it has some sort of
1148:26 - display grid or display Flex you don't
1148:28 - want to break it
1148:29 - and you want to have a div elements that
1148:32 - you define some some CSS custom
1148:35 - properties so that you can
1148:37 - um
1148:38 - affect this button only and not its
1148:41 - neighbor and stuff like that right so
1148:44 - um so svelt actually provides a sugar
1148:47 - syntax so to to
1148:50 - um to have a shortcut syntax to write
1148:52 - all this to write this div that as has
1148:55 - display contents as custom properties
1148:57 - applied to it right so it's a shortcut
1149:00 - uh it's a sugar sugar syntax what it
1149:03 - means is that we write some nicely
1149:06 - written syntax but under the hood it's
1149:09 - going to translate into what it is which
1149:11 - is what we're going to see over here
1149:12 - right what you're going to translate is
1149:14 - you have a div and display contents and
1149:16 - all this thing over here
1149:17 - so let's let's see how the sugar syntax
1149:20 - looks like so here instead of writing
1149:22 - this we can have okay I think these two
1149:25 - props are useless so we can remove
1149:28 - and just to compare I have my original
1149:30 - code over here and I'm going to show you
1149:32 - how it will turn out to be uh
1149:36 - in in over here right so the sugar
1149:40 - syntax is that you can have a props that
1149:42 - starts that starts with double dashes
1149:45 - and you can name with uh you can have a
1149:48 - property value like this
1149:51 - right and now you can remove this div
1149:54 - yeah and both of these looks the same I
1149:58 - will inspect element you'll notice that
1150:00 - this and this is actually the same
1150:03 - exactly the same just that allows us to
1150:06 - write this way it looks like Slicker you
1150:08 - don't have to figure out you don't have
1150:10 - to write display contents you don't have
1150:12 - to write extra divs uh your your code
1150:14 - looks shorter and nicer sweeter because
1150:17 - of the sugar but under the hood it's
1150:20 - actually doing this right this this just
1150:22 - translates to this and then you you
1150:25 - um
1150:26 - yeah and then you get spelled to uh
1150:29 - render whatever to control this div
1150:31 - right and also what this means is that
1150:34 - we've seen previously where we can have
1150:37 - Dynamic styling from on the diff where
1150:40 - you can have say color over here a
1150:43 - property called color
1150:45 - let's that color equals to Green
1150:50 - you can have that over here as well
1150:53 - color
1150:56 - um and then this variable itself can be
1150:58 - dynamic so if I have an input type color
1151:03 - buying value equals to color
1151:07 - you can see over here if I come over
1151:09 - here and choose uh
1151:12 - pink you can see all these button colors
1151:14 - change so this is dynamic
1151:18 - right so uh here you go passing CSS
1151:20 - custom properties to components
1151:24 - um so one caveat over this is that this
1151:27 - is this custom property these custom
1151:29 - props that you pass in as a custom
1151:31 - property for your component
1151:34 - um
1151:35 - um has to be written this way you can't
1151:38 - use a spread props meaning you can't
1151:40 - actually spread it uh if you have an
1151:42 - object that have discount property
1151:48 - right this does not works because
1151:52 - um it's a limitation of this
1151:54 - this custom properties for components
1151:57 - right now because in compound time we
1152:00 - actually have to know what this uh what
1152:03 - what are the whether you have an extra
1152:06 - whether you have custom properties uh
1152:09 - defined on this CSS custom property
1152:11 - defined on this component itself if you
1152:14 - do this and you have like some sort of
1152:15 - variable that you can spread over in
1152:17 - compound time there's no way to know
1152:19 - whether you have custom properties using
1152:21 - right with custom properties then you
1152:23 - will wrap the component with a div
1152:26 - without then you don't even need this
1152:28 - div at all because yeah pointless right
1152:31 - so you need to know whether you need to
1152:33 - create this extra diff compile time
1152:35 - that's why itself cannot be spreaded
1152:39 - across this this custom props cannot be
1152:41 - spreaded
1152:43 - so I hope that explains why and the
1152:45 - limitations of what you can do and of
1152:47 - course you don't always have to reach
1152:49 - out for this as I explained earlier you
1152:51 - can also Define custom properties over
1152:53 - here if you want to when you want to
1152:55 - wrap across all the components you want
1152:58 - yeah then you don't have to actually
1153:00 - reach out to this this will be even
1153:02 - better
1153:04 - but instead of having like wrapping all
1153:06 - the button components with extra div
1153:09 - elements
1153:12 - So today we're going to talk about ad
1153:14 - HTML so what is it well we shall take a
1153:18 - look
1153:19 - so imagine you have this scenario where
1153:21 - you have a HTML string that is
1153:23 - dynamically generated and you want to
1153:26 - insert all this HTML string in somewhere
1153:29 - in your head in your document right in
1153:32 - your Dom so what do you do so maybe you
1153:35 - can use an action well let's take a look
1153:38 - if if you want to use an action and how
1153:40 - you would do that right so here I have a
1153:43 - div and a text area that I can edit my
1153:47 - HTML so what I need to do is probably
1153:50 - use an action over here uh
1153:53 - inner HTML
1153:56 - and I'm gonna pass my HTML into this
1153:58 - action right so let's define this
1154:00 - uh this action so I can have inner HTML
1154:05 - as an action that takes in a node so
1154:07 - node will be the div that I'm applying
1154:09 - this action to
1154:11 - and the HTML which is the text that I'm
1154:13 - going to pass in over here
1154:15 - right so usually what you would do is
1154:18 - maybe you want to add all this HTML
1154:20 - inside this element right so actually
1154:23 - dump your your Dom API provides an API
1154:26 - called a you know HTML so you can say
1154:30 - node.inner
1154:32 - HTML
1154:34 - equals to no it goes to HTML
1154:37 - right here you see that you get
1154:40 - this is a baltex and click me button
1154:43 - right
1154:44 - that's that's easy right so next thing
1154:47 - is if you try to update this
1154:50 - uh return so you need to return an
1154:53 - update method over here
1154:55 - HTML what we need to do is constantly
1154:58 - update the
1155:04 - in the HTML of your nodes so if I type
1155:07 - something
1155:09 - it should update
1155:12 - a sequence uh update on Demand right as
1155:16 - you as you change the text
1155:18 - so you could use this
1155:20 - um
1155:21 - action to achieve what you want to do
1155:23 - but that's an even easier way to do it
1155:26 - in sveld which is used at HTML so as
1155:29 - HTML actually does all of the above that
1155:32 - we have done so far but using
1155:34 - uh but we we've packaged it up in a nice
1155:38 - API which is called at HTML so let's
1155:40 - write add HTML
1155:42 - and you can throw all these things away
1155:44 - and here you pass in an Expressions so
1155:48 - an Expressions can be anything that just
1155:50 - form a string that you would like to be
1155:53 - installed as an inner HTML in your in
1155:56 - the element so you would say HTML over
1155:58 - here
1155:59 - and now we remove this action
1156:02 - see that everything still looks the same
1156:04 - and you don't have to even handle the
1156:06 - case where Dynamic taxes text you can
1156:09 - change it dynamically it will update by
1156:11 - itself
1156:12 - that's good right so
1156:15 - um sometimes uh this is good enough for
1156:19 - you but sometimes you have some
1156:21 - requirements right so sometimes this
1156:23 - HTML comes from some API somewhere that
1156:27 - you can control
1156:29 - um but itself have some some
1156:32 - parts of the HTML is Interactive
1156:35 - right so uh there's two parts over here
1156:38 - so if this HTML is somewhere that you
1156:40 - can't control at all then you kind of
1156:42 - have to insert it as ADD HTML over here
1156:45 - right uh dynamically update it right but
1156:47 - if it's somewhere that you can control
1156:49 - then my suggestion for you would be copy
1156:52 - all this come over here create a new
1156:54 - component paste it in and then just
1156:57 - import it right then
1156:58 - um then it's once it's a lot way easier
1157:02 - to add interactions to elements over
1157:04 - here for example adding on click for the
1157:07 - button have some Dynamic contents to
1157:09 - update the text things like that right
1157:11 - but how about your case that is that you
1157:14 - can't control for example this text is
1157:16 - being clapped out over here
1157:18 - um and so so the text is generated On
1157:21 - Demand on the Fly uh somewhere that you
1157:23 - can't really control like for example
1157:25 - this is being typed out by the user and
1157:29 - now uh the tricky part is you want to
1157:32 - add interactions to some of the elements
1157:33 - so for example you want to make all the
1157:35 - buttons click to have a kind of like a
1157:39 - similar
1157:40 - click you want to have a click
1157:42 - Handler on the buttons right so each
1157:44 - button probably has some ID right over
1157:47 - here I have some ID uh XYZ and when I
1157:51 - have a quick function I want to know for
1157:53 - example here
1157:59 - I want to know uh maybe
1158:01 - once the
1158:03 - buttons ID and I can do something with
1158:05 - it right so here I could have say
1158:08 - event.targets uh dot ID
1158:11 - and I just console out but you know I
1158:15 - can I can do anything with projects
1158:16 - right the thing is how do I attach this
1158:18 - event listener to this button that we
1158:21 - just generated
1158:23 - so this is tricky
1158:25 - right so when you
1158:29 - right right now when you want to do it
1158:31 - you realize that you haven't have the
1158:35 - reference to this to any of the buttons
1158:38 - yet so how do you add event listeners to
1158:40 - the button right so where you have to
1158:43 - edit is you have to add it during on
1158:45 - Mount why because before once models and
1158:48 - only if you do it over here for example
1158:50 - you come over here and say
1158:51 - document.query uh selector button
1158:58 - and you will add event listener
1159:01 - you realize that uh
1159:10 - realize that you have error because the
1159:12 - button you can't find the buttons yet
1159:13 - because the button is not yet available
1159:15 - for you
1159:16 - so what you have to do is come in here
1159:18 - use unmount
1159:22 - and then run this during unmount so I
1159:25 - can come over here and say on Mount
1159:28 - and find the buttons and then add event
1159:31 - listener right that that's that's only
1159:34 - when the button is available for you but
1159:37 - in this case
1159:38 - it's a bit tricky
1159:39 - let's select all the buttons on the
1159:41 - screen right uh meaning uh because your
1159:44 - query selector on a button on the
1159:46 - document so if if uh
1159:49 - if this is an optional uh if if I said
1159:53 - for your situation that it's possible
1159:54 - for you to find out all the uh like a
1159:58 - container elements then a better way is
1160:01 - you have maybe like a div buying this
1160:06 - right you have a container reference a
1160:09 - container and you use that to query all
1160:11 - the buttons inside this div right so
1160:13 - this is slightly safer than doing a
1160:16 - documented query selector all right
1160:17 - you're finding all the buttons within
1160:19 - the documents right so here we only find
1160:22 - all the buttons within this div
1160:25 - so
1160:26 - hopefully that's only limited to only
1160:28 - this HTML buttons over here so over here
1160:31 - I add event listener
1160:33 - um and I console log
1160:35 - click right
1160:39 - now you see that it works
1160:43 - however if I'm going to change this now
1160:46 - this most likely will set in the HTML
1160:49 - updates all this all everything over
1160:51 - here replace the HTML
1160:54 - text which then will uh by for the
1160:57 - browser it means to recreate all the
1160:59 - elements right now when you click on
1161:00 - click me nothing happens
1161:03 - so what should you do now
1161:06 - well uh one way that you can do is
1161:10 - um have a way to
1161:13 - uh runs every time on HTML changes right
1161:17 - and that is to use a reactive statement
1161:20 - right so you have over here HTML
1161:23 - and then you would do something
1161:25 - uh
1161:28 - Dutch button this
1161:32 - so what what this line of code means is
1161:35 - that forever for this is how a reactive
1161:37 - statement works right so when you look
1161:39 - at it you'll see two variables over here
1161:41 - HTML and attach button listeners
1161:43 - whenever either of the uh whenever
1161:46 - either of the
1161:48 - um
1161:49 - either of the variable has changed then
1161:52 - this statement will be reruns right in
1161:55 - this case since function attach button
1161:58 - listener is a function and we never
1162:01 - change it then it's indirectly means
1162:05 - that anytime when a HTML changes uh this
1162:07 - this whole statement is being
1162:09 - re-evaluated because uh you can write
1162:12 - this way as well it doesn't
1162:15 - in our case it doesn't really matter
1162:16 - because HTML is kind of always something
1162:19 - right so if you write this HTML attach
1162:22 - button listener then yeah you want to do
1162:24 - something
1162:25 - foreign
1162:33 - selector you'll realize that there's a
1162:36 - few errors first is that div is not yet
1162:39 - available because you have a mount a
1162:43 - you you will run this you either this
1162:47 - first before your first mounting any
1162:49 - elements right so relative statements or
1162:51 - reactive declarations will be run uh
1162:54 - even before like after initializing your
1162:56 - component but before you try to
1163:00 - mount the elements when you're trying to
1163:02 - create elements the all the reactive
1163:04 - statements will be run because sometimes
1163:06 - you want to declare some reactive
1163:09 - variables right and you're going to use
1163:10 - it in a template so this has to be run
1163:12 - ahead before you
1163:16 - before you actually create an element
1163:17 - and mount it on a Dom so over here diff
1163:20 - will be undefined
1163:22 - um so what do you do in this case I
1163:24 - would think that um
1163:26 - we would
1163:29 - either check like we could check if div
1163:32 - is it's not available then
1163:36 - we return right so we we over here if we
1163:40 - look at console log
1163:44 - every time I will change something
1163:47 - where I said it will be Evil Dead
1163:49 - but again this is going to be evaluated
1163:53 - before we're going to update something
1163:56 - so
1163:58 - um what this means is that if you notice
1163:59 - that uh I uh although I I I type and I'm
1164:04 - gonna call this every time but when you
1164:05 - click nothing happens why because this
1164:09 - runs right before any changes right
1164:12 - because you you want to if it's a
1164:14 - reactive statements or variables that
1164:16 - you're trying to update it you want the
1164:18 - variable to be updated before you
1164:19 - actually make changes with them right
1164:20 - before you update them and things like
1164:22 - that because you want the variable to be
1164:23 - ready first right all those reactively
1164:26 - declare variables to be updated first
1164:28 - before you up to the top so over here
1164:31 - when this is being run you're actually
1164:33 - accessing the old contents right you are
1164:36 - finding all the all button and then
1164:39 - attach event listeners to them
1164:41 - so this is
1164:44 - not what you want what you want is you
1164:47 - want to come over here at
1164:50 - tick
1164:52 - you want to wait for a tick before you
1164:58 - oops
1165:00 - you want to wait for a tick before uh
1165:05 - before you actually search for the
1165:07 - buttons and then make some changes right
1165:10 - so now once the tick is done actually
1165:13 - the div is also being defined because
1165:15 - the tick happened the tick will be
1165:18 - resolved the tick will return a function
1165:20 - that will be resolved when updates or
1165:22 - mounting has has done if you're not sure
1165:25 - about how tick works I have a video
1165:27 - about tick you should check that out
1165:29 - links in the description and hopefully
1165:31 - you're on somewhere in your screen right
1165:33 - so
1165:35 - uh we wait for our tick and then we
1165:37 - select uh so we wait for updates as wait
1165:40 - for updates happens and then only you
1165:42 - look for buttons and attach even
1165:44 - listeners right so here if I click now
1165:47 - you can still see a click me I'm gonna
1165:50 - change something and then I click this
1165:52 - will still happen because uh you will
1165:55 - anytime HTML changes your your way for
1165:58 - the changes to be applied then only you
1166:01 - figure out uh you find the the newest uh
1166:05 - buttons and then you attach event
1166:06 - listeners
1166:07 - so here we always attach event listeners
1166:12 - um
1166:13 - but we never remove them so will this be
1166:16 - an issue and how do we resolve it right
1166:19 - so here uh let's let's try to just use
1166:22 - this event listener in States
1166:27 - no matter no big deal it's just that uh
1166:30 - it's easier to remove this because we
1166:31 - can reference to the same function right
1166:33 - so here
1166:35 - um
1166:37 - this still works right we still print we
1166:40 - print out the XYZ of the button so if
1166:43 - you have multiple buttons over here
1166:46 - I can use selector all and then for each
1166:53 - button
1166:55 - button dot add event listener
1166:58 - all right so here if I create more
1167:01 - button
1167:03 - ID equals to exact
1167:07 - click me to
1167:11 - whoops
1167:16 - what's wrong with this
1167:23 - okay
1167:26 - okay so if I click this you see exactly
1167:28 - it click this you say XYZ right and
1167:30 - every time we change something uh
1167:32 - everything still works but we actually
1167:35 - haven't we haven't removed event
1167:36 - listeners for for previously selected
1167:39 - button so here what should we do is that
1167:42 - we should as I mentioned here we kind of
1167:45 - know that if we call this is every time
1167:48 - when a HMR changes right so there's two
1167:50 - phase one is before you want to create
1167:53 - uh any elements right the first time
1167:55 - when the component is mounted you run
1167:57 - this uh first and then only you mount a
1168:01 - component and we use a tick to wait for
1168:04 - that mounting to what be done only we
1168:06 - select for any elements and updates
1168:07 - attach event listeners right the same
1168:10 - thing happens when HTML changes you call
1168:12 - this function
1168:14 - but that's update hasn't been done right
1168:15 - you call this function so we wait for
1168:18 - tick we wait for the changes to be
1168:20 - actually applied to the Dom
1168:22 - then we select the newly created buttons
1168:25 - and attach the balances so there's
1168:27 - there's always like before the update is
1168:29 - done which is like the prior right which
1168:31 - is over here before things has been
1168:33 - updated or before the things has been
1168:35 - created over here we can actually find
1168:37 - out all the buttons that we have over
1168:39 - here and then
1168:41 - um remove evaluations from them right so
1168:44 - here uh I would need to check if this is
1168:47 - being defined first because
1168:49 - um
1168:50 - there's two cases right one is mounting
1168:53 - One is updating right when you're
1168:54 - mounting the diff it's not even existed
1168:57 - uh you don't even have any buttons that
1168:59 - you can query for right so if you you
1169:01 - check if div only you try to if it
1169:04 - exists then only you try to remove any
1169:06 - evidence from the buttons right over
1169:08 - here I'm going to copy the code and say
1169:10 - button remove event listener click all
1169:14 - right so now uh although if you take a
1169:16 - look at the code nothing much has
1169:18 - changed but we remember to remove event
1169:21 - listeners that we just uh added to to
1169:25 - their
1169:26 - uh
1169:28 - add it to the buttons right and that's
1169:31 - now we have we handle the mounting case
1169:34 - and the updating case we actually have a
1169:36 - handle one case which is when we try to
1169:39 - remove unmount the component right over
1169:42 - here when you unmount the component this
1169:44 - will not be called because HTML is not
1169:46 - changing we just just want to remove the
1169:48 - component right so right before that we
1169:51 - still have one last chance to do cleanup
1169:53 - which is living on destroying
1169:56 - so on Destroy we're going to come over
1169:59 - here on this drive I'll just removed I
1170:02 - comment this on this try I'm gonna find
1170:05 - out all the buttons that we have
1170:08 - and remove event listeners so now when
1170:12 - you detach I remove this container all
1170:15 - the all the buttons has already been
1170:18 - clean up with all the event listeners
1170:21 - so here you go here is how you would
1170:23 - have to if you want to not just adding
1170:26 - HTML string as as part of your container
1170:29 - you want to add some interactive like
1170:32 - event listeners and do something you
1170:34 - would have to do this dance of
1170:36 - um a wait for the content to be changed
1170:39 - before you apply some changes right and
1170:42 - if you want to add event listeners
1170:43 - remember to un remove event listeners
1170:46 - when you're not need you don't need them
1170:48 - anymore
1170:49 - uh of course uh depends on your design
1170:53 - sometimes you don't have the luxury of
1170:55 - having uh
1170:57 - a div container that wraps your elements
1171:01 - right in this case uh HTML you have to
1171:04 - write it at the root level well then
1171:07 - it's
1171:08 - um how do you Scope this so this is just
1171:11 - about like how how do you Scope the
1171:13 - query selector right um
1171:17 - uh if you ask me I would say that every
1171:19 - time when you want to apply like when
1171:22 - you have something like this and you
1171:24 - know that you want to find out all the
1171:25 - buttons
1171:26 - um probably you can add some hints to
1171:29 - the HTML right so for example over here
1171:32 - I can see because this is a string right
1171:35 - so I can come up here and replace all
1171:39 - I can replace all pattern text
1171:46 - ah okay uh so so the thing about here is
1171:50 - okay is I think it's just a syntax
1171:52 - highlighting
1171:55 - uh I can replace all button text
1172:00 - with button and maybe add some data
1172:05 - attribute that I can query for so
1172:07 - special
1172:12 - okay uh lee how right so I I replace all
1172:17 - this button to be button data special
1172:19 - the house so what does that mean if you
1172:21 - inspect element over here
1172:23 - you realize that
1172:25 - um this line of buttons that I created
1172:28 - all have this special attribute called
1172:30 - Data special my name right so here you
1172:33 - don't have it here you have it so uh
1172:35 - this is because HTML is just a string
1172:37 - right you can you can replace string you
1172:38 - can make some manipulation before you
1172:41 - insert HTML into the Dom right so here
1172:43 - you kind of
1172:44 - have some way to scope up all the
1172:46 - buttons that you only created in this
1172:48 - component so maybe this is a string that
1172:51 - not just the harmony dynamically
1172:53 - generated you ID that attached to this
1172:56 - component and now what you do instead of
1172:58 - div the query selector all you come over
1173:01 - here and say
1173:03 - uh
1173:04 - document like query selector
1173:07 - all
1173:09 - button with this special attribute
1173:12 - data special equals the how
1173:15 - and then for each of them you attach
1173:17 - event listener
1173:21 - right and now if you try to click this
1173:27 - yeah so uh I think it's just like the
1173:32 - hot building something messed up just
1173:33 - now so now if I try to click me you see
1173:36 - that this this works and we only scope
1173:39 - out to the buttons uh that has this
1173:42 - special attribute called lihao my name
1173:44 - right so any buttons outside will not be
1173:46 - selected right so you can remember this
1173:49 - is just you can pass in any string and
1173:52 - even if it's a dynamically generated
1173:54 - string that provides to you you can
1173:56 - still manipulate the string replace like
1173:58 - the button to add some special attribute
1174:00 - things like that of course this does not
1174:03 - handle some edge cases where maybe this
1174:07 - is part of your text that you don't want
1174:09 - to be transformed this is some button
1174:10 - that you want to replace you want more
1174:12 - sophisticated things then you have to
1174:15 - have some more specific way of doing the
1174:17 - replace all right but this is just a way
1174:19 - to this is a very simple case to
1174:21 - demonstrate for you that
1174:24 - you can do a simple replace all to um to
1174:28 - scoop out the button that is only at
1174:30 - created via this HTML and then only
1174:33 - attach event listeners to them right
1174:35 - only at
1174:37 - interactions right so you don't affect
1174:39 - other buttons outside
1174:41 - um but if you're lucky enough that you
1174:43 - have a container then I think the easier
1174:45 - way is to just uh query selector from
1174:48 - the content itself so only find out all
1174:50 - elements but if you're unlucky enough to
1174:52 - have maybe like other buttons over here
1174:55 - then yeah maybe you would have to do
1174:58 - this to only limits button that is
1175:00 - created only from this HTML
1175:05 - so let's talk about at debunk
1175:09 - so this is a very useful uh
1175:13 - tag in svelt that allows you to help you
1175:16 - to debug
1175:18 - um some of the data that you're using in
1175:20 - your field components so let's take a
1175:22 - look at an example and see how we can
1175:24 - use this at the back tag in as well
1175:27 - components so here I have a components
1175:31 - that has a written array and
1175:34 - attacks a value right so I look through
1175:37 - the array to render some input tag and
1175:42 - also use an input to bind some value so
1175:44 - I can type on it
1175:46 - so as a type yeah you can see that it uh
1175:49 - you can't really see a data change
1175:50 - unless you try to come over here and say
1175:52 - value so that you know that you're
1175:54 - actually updating the value so when you
1175:57 - type you see that the value is changed
1175:59 - maybe this is okay for you but let me
1176:02 - show you an alternative that you can use
1176:04 - as well right it does not mean that my
1176:06 - alternative is better it's just that
1176:08 - more Tools in in your toolbox so that
1176:11 - you can try and mix and match different
1176:13 - kind of things that helps you to debug
1176:15 - your application
1176:17 - so here instead of using value I can use
1176:19 - add debug tag so I say I will write
1176:22 - start I will start with a curly brackets
1176:24 - and say add debug and then I can pass in
1176:29 - any Expressions that I want to debug so
1176:32 - here if I say I want to debug the value
1176:35 - or say I debug value immediately you can
1176:38 - see in the console you see it's printing
1176:40 - on the object with a value and a value
1176:43 - of the value itself
1176:46 - so as I type you sure enough you can see
1176:49 - that this value is is updating you'll
1176:52 - see more things printing out in the
1176:54 - console
1176:55 - and one script about this is that if you
1176:57 - internally inspect Elements which is
1177:00 - when you try to open up your Dev tools
1177:03 - and one when you try to type something
1177:06 - uh the debug tag itself also will send a
1177:09 - debugger so here you are you are you are
1177:12 - breaking so the the Chrome Dev tools
1177:15 - will break at a point where
1177:18 - we are printing out the value of this
1177:21 - value right so here you can see that's
1177:23 - what that's how this value is being
1177:25 - printed out console.log value and now
1177:28 - you all console can do things like
1177:31 - getting this value and you know type out
1177:33 - in the console say what is the link
1177:36 - um do something and check check some
1177:38 - other things right so if you have some
1177:39 - sort of complex object that you're
1177:41 - trying to log over here then this is
1177:43 - very useful where you can uh like you
1177:46 - don't have to manually set a breakpoint
1177:47 - somewhere within your Spell components
1177:49 - uh this will get triggered will be
1177:51 - tripped and now you can
1177:53 - um yeah open up console and check things
1177:56 - like that right so let me close this and
1177:58 - get out from the debugger
1178:01 - um and I want to show you one more thing
1178:03 - right so besides like using this debug
1178:06 - value and like in the normal input value
1178:09 - or things like that okay it doesn't have
1178:11 - to be in value you can come over here
1178:13 - have some uh reactively declared like a
1178:17 - double equals Value Plus value you could
1178:19 - also have double over here
1178:22 - right so every time you change you see
1178:24 - double bring that double over here
1178:27 - so besides doing this at the top level
1178:29 - you could also have this debug tag
1178:32 - somewhere in in inside like each tag or
1178:35 - if tag uh each each block or each block
1178:37 - uh why is this useful this is useful
1178:40 - when you know when you're trying to
1178:41 - iterate through an array and uh you want
1178:43 - to debug like a certain item inside the
1178:45 - array and exactly ah I want to
1178:49 - take a look at this item over here
1178:52 - here right I want to I want to look at
1178:54 - this um uh what are all these item value
1178:58 - is right so let me let me remove this
1179:00 - depart let me just comment this out I
1179:03 - want I want to debug what are the items
1179:04 - available over here and if I try to type
1179:07 - something and see you know uh it will
1179:09 - print up more and I can say that oh this
1179:12 - item value is 12 right it would be
1179:15 - useful for me when I have a breakpoint I
1179:16 - can break this uh at the particular item
1179:19 - but of course uh you see that every time
1179:22 - I change something I'm updating the uh
1179:25 - the array itself so all this uh all this
1179:29 - item is being updated and
1179:33 - um too bad there's no way that you can
1179:34 - just limit scope limit this debug in for
1179:38 - particular index
1179:41 - um at least you don't have you can't do
1179:42 - it this way so a trick that I have is I
1179:46 - can have each each block if in the index
1179:49 - goes to say I just want to check those
1179:52 - the second one which is index at one
1179:55 - and print out this debug right so now
1179:59 - um I when I change something else it's
1180:00 - not cheap anything only when
1180:07 - you know what I think this is a bug and
1180:10 - I'll probably fix this so um if you're
1180:12 - watching this video uh right now I'm
1180:15 - using at version
1180:16 - 3.32.8 uh 38.2
1180:19 - um this does not work but I'll try to
1180:22 - make it work in the future versions and
1180:25 - hopefully this will be very helpful that
1180:26 - you just need to you know debug at a
1180:28 - certain item and and see it changes
1180:31 - right so uh yeah too bad I feel this is
1180:34 - a bug but anyway I hope that you learned
1180:37 - something to use an ad tag
1180:42 - so today I'm going to talk about module
1180:44 - contacts in svelts what is module
1180:47 - context well we shall take a look at
1180:49 - examples and we'll figure that out along
1180:51 - the way so let's take a look at examples
1180:54 - so here I have my app and I have a
1180:58 - component called map
1181:00 - this is a very contrived example I tried
1181:03 - to come out
1181:05 - a very convincing example but I feel so
1181:09 - this is a very very contrived example
1181:11 - but it it serves its purpose well I
1181:15 - believe to explain this concept for you
1181:17 - okay so bear with me with like
1181:19 - unreasonable
1181:21 - variables over here so I have two
1181:23 - components I have one components but use
1181:25 - it twice I have two maps over here and I
1181:28 - have inputs okay so over the map
1181:30 - components uh I have a div so this is
1181:34 - one map component it says it has
1181:39 - some uh it it has it Imports some stores
1181:42 - and it has some buttons that you can
1181:45 - click right send me and who sets so the
1181:47 - store itself
1181:49 - um because we want to share it across
1181:52 - um components as in it doesn't have to
1181:54 - be across like component a and component
1181:56 - B it's more of like across all the map
1181:59 - components instance then I probably
1182:02 - would have to create this store
1182:04 - somewhere else outside the component and
1182:06 - to be able to use it and import it over
1182:09 - here right because if you try to create
1182:11 - a star variable over here like I try to
1182:14 - say import writable
1182:17 - from svelt
1182:21 - s spell store and try to create a star
1182:25 - from here
1182:26 - what I end up creating is this store is
1182:29 - actually like a stitch within this
1182:31 - component
1182:32 - um so if I have multiple map components
1182:34 - I will have multiple store created and
1182:38 - that's not what I want I want to be able
1182:40 - to share across all the map
1182:42 - um all the map components that is going
1182:45 - to be created so what I do is that I
1182:48 - create a new file external file and
1182:50 - create and store here so all the every
1182:53 - time when I import here when I create a
1182:55 - new map component where it imports from
1182:57 - this store they're actually importing
1182:58 - from a steam store right it's the same
1183:00 - store instance so there's only one
1183:02 - instance sometimes you call this a
1183:04 - Singleton because it's just single one
1183:07 - done right so if it's a single turn one
1183:10 - star instance then I would have to ex
1183:13 - move it out into one separate file and
1183:15 - import it from here right so here I have
1183:17 - a map store file I create this in store
1183:21 - instance and I import it into the map
1183:23 - component
1183:25 - okay so uh so this is the map store and
1183:30 - I also use this uh star
1183:33 - uh over here in the app component right
1183:35 - so here in app component I render uh
1183:37 - inputs that I can change and I can
1183:40 - update the value of the store from from
1183:42 - the outside right so that's um so this
1183:45 - star is like external where I can import
1183:47 - from uh
1183:49 - I can import from across multiple files
1183:52 - but and use it and update it there right
1183:55 - so here I have some problem over here I
1183:57 - wouldn't say a problem but
1183:59 - um I have some questions over here where
1184:02 - I would think like is there a better way
1184:04 - of writing this is that the map store
1184:06 - itself uh we kind of agree that I can't
1184:09 - in create this map store within this map
1184:12 - component because it will end up become
1184:14 - like a state for this component I want
1184:16 - it to be a Singleton I want one instance
1184:18 - across all components but this map store
1184:20 - itself is
1184:23 - uh it's very couple or related to this
1184:27 - map component right so
1184:29 - um I doing it this uh imported from
1184:32 - separate files feels like they are two
1184:34 - separate things so
1184:37 - um
1184:38 - that is something that I doesn't really
1184:41 - like so this is something that we're
1184:43 - gonna take a look and how we can fix it
1184:45 - later
1184:45 - right uh so now take a look at another
1184:49 - file another file I have is called a map
1184:51 - data so this is also an external file
1184:55 - um where I have variables up that
1184:58 - exported so this is again like a single
1185:01 - turn right this is a module oh no matter
1185:03 - how many people import this module
1185:05 - there's only one instance of this module
1185:06 - so there will be only one instance of
1185:08 - the current map and I also expose
1185:11 - functions to update this current map so
1185:14 - what this current map does is that no
1185:16 - it's contrived but what it tries to do
1185:18 - is that it will take in a current map
1185:20 - for now this current map is like a div
1185:22 - that wraps around each of the map right
1185:25 - it takes in this div if it's uh there's
1185:27 - something that's set as a current one I
1185:29 - will set the border to none and then
1185:32 - um so this is kind of like reset the
1185:34 - previous set previous current map and
1185:37 - now we're gonna update my current map
1185:38 - and also set a border so that you can
1185:40 - see that it's being set this is the
1185:42 - current map this is the value of the
1185:44 - current maps right now
1185:46 - so uh so fair enough so here in my map I
1185:50 - have two buttons when I click Send me is
1185:52 - to set call Set current map the current
1185:55 - div so that you can see that it's it has
1185:57 - a border so that visually you know that
1186:00 - I have updated the value
1186:02 - um but uh you want to actually know
1186:04 - whether the value then I have another
1186:06 - button called who sets that will console
1186:08 - out current map so this is what we
1186:11 - exported so you may not know this this
1186:13 - may still this may feel like a variable
1186:15 - that you to you that uh does it gonna be
1186:18 - updated but it it will right it it will
1186:21 - because uh anything that is being
1186:23 - imported is actually a live binding
1186:25 - anytime when you try to out the variable
1186:27 - value over here like this this variable
1186:30 - actually will be updated live uh this is
1186:33 - uh this is not some magic from spell
1186:36 - this is actually the specs from
1186:38 - JavaScript okay so if you import
1186:40 - something uh if this is a variable uh
1186:43 - like you do export let something or
1186:45 - export con something this variable
1186:47 - itself
1186:49 - okay export coins you can't change
1186:51 - because it's a constant right export let
1186:53 - something this variable itself uh if you
1186:55 - update it from anywhere uh wait I'm not
1186:58 - sure about anywhere but if you update it
1187:00 - from a file like here uh this real value
1187:03 - actually will will change right this
1187:05 - will actually change
1187:07 - um so uh let's see so let's try run
1187:10 - something right so here I call set me so
1187:13 - this has a border and I call whose sets
1187:16 - you'll see that in the console so I will
1187:19 - print out the the current sets value so
1187:23 - I click whose sets you'll see this div
1187:25 - if I hover it you see which one is being
1187:29 - turned on right so if I click on this
1187:31 - button it is still showing the same
1187:33 - current map
1187:35 - if I'm trying to change this sent me now
1187:38 - if I click who sets you'll see that now
1187:40 - it's uh log print out this different
1187:43 - state this button is the same thing
1187:45 - right so now I can change my div and I
1187:48 - can print out who is being set
1187:50 - that's great
1187:53 - um so what is this context a module
1187:57 - context thing how does this help me
1187:59 - improve my code
1188:01 - um I mean in this situation over here
1188:06 - um so map data again like map store I'm
1188:10 - going to say is that this current map
1188:12 - and this Set current map is very very
1188:14 - tight to this component itself right if
1188:17 - it's possible you want to actually write
1188:19 - them in the same file but unfortunately
1188:21 - you can't right because if you try and
1188:22 - declare current map in this map as well
1188:25 - if you say let's current map
1188:28 - then these variables itself over here
1188:31 - will become a state of this component
1188:33 - which is not what you want you want to
1188:35 - share this variable across all the maps
1188:38 - instance right as you see just now when
1188:41 - I try to click who sets across this
1188:43 - current map is the same value across and
1188:46 - it's being updated with the same
1188:48 - function to update all across them right
1188:50 - so this is something that you you
1188:51 - wouldn't want to put it in the Sim that
1188:54 - you can't put it in the same file
1188:56 - but with model context we're going to
1188:59 - show you that actually you can there's
1189:02 - actually ways to do that
1189:04 - so
1189:06 - um remember the point the time when I
1189:08 - say that a file you can only have one
1189:11 - script tag well I kind of actually lied
1189:13 - a bit because we haven't learned about
1189:15 - model context module contacts is
1189:17 - actually telling me us that uh you know
1189:20 - you can have another tag another script
1189:22 - tag but whoops you have another script
1189:26 - tag but this time around uh yes you can
1189:29 - only have one script tagged but this
1189:31 - script tags we're gonna add module
1189:33 - contacts which is I'm going to say
1189:35 - context is module
1189:38 - when I do this you see the errors is
1189:40 - gone so this script text and the this
1189:43 - script text is different so take a look
1189:46 - at the errors right let me remove this
1189:49 - and look at the errors it says one
1189:51 - component has only have one instance
1189:53 - level script element
1189:54 - instance level so uh what's felt called
1189:58 - this script tag is actually an instance
1190:00 - level of script tag right instance level
1190:02 - of the script element so instance
1190:05 - meaning for each of the instance you
1190:06 - create like variables right so these
1190:09 - variables are for are created for each
1190:11 - instance and therefore they are like
1190:13 - States within your component every time
1190:15 - you have a new map component you have a
1190:17 - new div variable uh for for this new map
1190:21 - instance right but if you have a context
1190:24 - module over here this is
1190:26 - a module level uh script it's not
1190:29 - instance level so anything they find
1190:31 - over here is is on a module level
1190:34 - uh do you hear what I'm trying to say is
1190:37 - a module level so meaning previously I
1190:40 - say that you you have to import over
1190:41 - here and you have a module Singleton you
1190:44 - import from this module everything over
1190:46 - here is defined like in a more in this
1190:49 - module and everywhere you import is
1190:51 - important same thing this is actually
1190:53 - creating a model inside your component
1190:57 - and anyone can import or do something
1191:00 - like this this is shared across this is
1191:03 - this only have one copy for one module
1191:06 - um
1191:08 - and therefore what we're going to do is
1191:10 - we can actually copy these two file this
1191:13 - the two code from this file into this uh
1191:16 - context module and and you can just
1191:20 - refer it directly over from your
1191:22 - component
1191:24 - so uh that that makes us have uh just
1191:28 - write one component file and and have a
1191:31 - code that can be on variables that are
1191:33 - like instance level are like states to
1191:35 - your components and as also variables
1191:37 - that are like module levels so like this
1191:39 - content map is module level all the
1191:41 - instance are importing from the same
1191:42 - level so if I come over here and Define
1191:45 - current map
1191:48 - uh of course this this has conflict but
1191:51 - uh right now I'm gonna just uncomment I
1191:54 - commence this out I'm gonna say this
1191:55 - current map is actually just one copy of
1191:57 - current map
1191:59 - um
1191:59 - um and so what happens later on is that
1192:02 - when you try to call sets you're
1192:04 - actually updating one copy all the
1192:06 - instance all the component all the maps
1192:08 - instance that you're going to create the
1192:10 - two different components only have
1192:12 - sharing one current map variable
1192:16 - right here I'm going to copy this
1192:17 - function as well to set current map to
1192:20 - come over here and
1192:23 - do it over here right so now your Set
1192:25 - current map and current map actually
1192:27 - interestingly they are available over
1192:30 - here in your
1192:31 - everywhere in your code right so now
1192:35 - what I'm trying to do now is that I'm
1192:36 - going to click Send me
1192:38 - uh and and I'm gonna open up the console
1192:42 - again and take a look at what is whose
1192:44 - is being set right so now this variable
1192:47 - is like a module level it's not your
1192:49 - State anymore and if I click who said
1192:52 - from here it's pointing this who said
1192:54 - from here is still pointing the same
1192:55 - variable right they are actually
1192:56 - pointing the same variable they are not
1192:59 - like States in your component I try to
1193:01 - set me over here click who sets is this
1193:05 - who said from outside is still this
1193:08 - um this this div right so they are
1193:10 - actually being shared across all the
1193:13 - um components just like how you would
1193:15 - write it over here uh one module and
1193:17 - every component is important in the same
1193:19 - module right so this is a module level
1193:21 - variables functions and everything that
1193:23 - you can think of
1193:25 - so
1193:27 - um before I go ahead and talk about more
1193:30 - you you may have questions like how how
1193:32 - would this be different from
1193:35 - um from other states like yes I I get
1193:37 - what you're trying to say but why is
1193:39 - this different right how does spell
1193:42 - um create this like module instance for
1193:44 - me and actually there's no magic to this
1193:46 - right so you know like every spell com
1193:49 - file like the file that ends with DOT
1193:52 - spelled it's going to be compiled down
1193:53 - into JavaScript right and and you import
1193:55 - this field component you're actually
1193:59 - importing the file you're importing this
1194:00 - file and it export default the component
1194:04 - itself right
1194:05 - um so this is actually a module that
1194:07 - you're importing right it's because it
1194:09 - dot spell file it's actually a module
1194:10 - and you're importing and all this code
1194:12 - over here if you open up the JS code you
1194:15 - realize that all of these are being
1194:19 - um paste it over
1194:21 - that's that's fine it's actually on the
1194:23 - module level right over here so this is
1194:26 - so-called module level uh it's it's in
1194:29 - this JavaScript module level so let if
1194:32 - you have other things like like States
1194:34 - like for the div they are actually
1194:36 - defined inside this function called
1194:38 - instance so this instance function is
1194:40 - being called every time when you have a
1194:42 - new map instance component being created
1194:44 - right so this variable every time we
1194:46 - have new map components this new
1194:48 - instance function being created this new
1194:50 - variable is being created and and being
1194:52 - used but variables or functions over
1194:55 - here like current map and Set Card map
1194:57 - are defined at a model level there are
1195:01 - paste like they are copied over at the
1195:03 - module level so
1195:05 - JFL does not do any uh Magic over here
1195:09 - anything that you write on the content
1195:10 - or context module over here will be
1195:12 - pasted over here no no magic over here
1195:17 - at all and no reactivity at all you
1195:20 - can't really expect that you change this
1195:24 - um this this variable over here and get
1195:26 - everything to be updated you still need
1195:28 - like a start you still treat this like
1195:31 - like a shortcut of not having to write a
1195:33 - separate module file to declare them
1195:36 - just paste everything in here and if you
1195:39 - want the reactivity you still need like
1195:41 - you want to up you have you want the
1195:42 - store like reactivity you still have to
1195:45 - do that
1195:46 - um yeah so now I'm going to copy all
1195:48 - this over here as well and create a yeah
1195:52 - a map value so now I don't need this I
1195:56 - can directly use this map value over
1195:58 - here and do you notice that I do the
1196:01 - export cons over here so if I export
1196:04 - things over here this
1196:07 - uh being exported like like a module
1196:09 - right this is module level so I can
1196:11 - import map value from this map dot smell
1196:14 - so personally I'm import this over here
1196:17 - now I can write this
1196:20 - like this
1196:21 - I can import map and map value this is a
1196:25 - module level export and get if you use
1196:28 - exports in the instance script tag that
1196:31 - could be a props or could be a component
1196:33 - method but if you have it over here then
1196:36 - you're able to import it in your module
1196:39 - so this is like a module level export so
1196:41 - you module you import like a module name
1196:44 - exports from a module right so you do it
1196:46 - over here so one thing you can't do is
1196:49 - export default over here uh because you
1196:53 - already have export default which is the
1196:55 - component itself so so you can't export
1196:58 - defaults
1197:00 - in a module context hopefully that's
1197:03 - reasonable
1197:05 - so we have everything copied from the
1197:07 - two files map store and map data into
1197:09 - our component as a con module level
1197:12 - module context
1197:14 - and let's try to see whether everything
1197:16 - still works as previously right so the
1197:20 - star still works as we said just now
1197:23 - and
1197:24 - so here we see that we have a function
1197:29 - called Set current map and actually it
1197:31 - does not matter whether we you define
1197:34 - this function over here or actually in
1197:36 - the script tag the instant script tags
1197:40 - um that's big so you may ask like okay
1197:43 - will this be
1197:45 - um creating an extra functions every
1197:47 - time well it depends uh spell actually
1197:49 - will do some optimization so you will
1197:51 - see that well this function is actually
1197:53 - updating something uh that is like a
1197:56 - state or it's it's not a state at all
1197:59 - right so this is not a state if you take
1198:02 - a look at the codes you would probably
1198:04 - realize that
1198:06 - um like this is still at
1198:09 - the module level right so it doesn't
1198:11 - really matter whether you you do it at
1198:14 - over here or within an instance right
1198:16 - but as soon as you try to set something
1198:18 - like this
1198:20 - then then that's a difference that's a
1198:23 - different story you you make it
1198:25 - um
1198:26 - inside as like a States methods right so
1198:30 - here
1198:32 - um since we can do it this way we can
1198:34 - update this current map like this then
1198:37 - we might as well not have this function
1198:40 - at all and in the sets me we just
1198:42 - directly sets
1198:44 - you know our current map so you can you
1198:47 - can directly change variables inside the
1198:50 - context module context you just can't
1198:53 - assume that it's like a state right so
1198:56 - every time when you so what it means
1198:58 - what that means is that if you try to
1199:00 - say Define maybe a variable like count
1199:03 - over here
1199:04 - and I I'm showing this count right you
1199:08 - can see that it is
1199:10 - one for now but every time when you're
1199:13 - trying to change it
1199:16 - uh on click
1199:21 - cons plus plus you
1199:25 - you can't really expect it to change it
1199:27 - it does not work this way you have to
1199:29 - you have to think that all these
1199:31 - variables are like variables that you
1199:33 - have defined in external filed external
1199:35 - modules so when you have this usually
1199:38 - what you do is you make it the writable
1199:40 - star
1199:41 - right
1199:43 - and you that you update the very
1199:47 - valuable value of the star using a
1199:49 - dollar sign
1199:50 - to reference it and to update it right
1199:52 - so this will update all and you can see
1199:55 - that this shares across all instances
1199:57 - it's it's not a state of your component
1200:00 - so hopefully you get that right and
1200:02 - that's all for now
1200:07 - here I have a task list application
1200:09 - where I can add more items or remove
1200:12 - them I'll create more lists
1200:16 - and remove the list
1200:19 - so here I'm going to take a look at
1200:20 - another implementation of the similar
1200:23 - application
1200:24 - so here I have the same Task List
1200:27 - application
1200:28 - where I can add items or remove them
1200:32 - add a list
1200:33 - and remove the list
1200:36 - notice the difference yes the second
1200:39 - application
1200:40 - feels more fluid
1200:42 - because we added Transitions and today
1200:47 - we are going to talk about how you can
1200:48 - add transitions in this felt let's take
1200:51 - a look a bit on the code structure
1200:52 - before we get started so we render each
1200:56 - of this list within the each block
1200:59 - and depending where the
1201:01 - the list should be shown or not we have
1201:04 - a h block and then for each of this list
1201:07 - we have another each block that Loops
1201:10 - through all the items
1201:12 - and then here is where we each of the
1201:15 - items is rendered with a list item to
1201:17 - start using transition since Felts we
1201:20 - need to import spell transitions cell
1201:22 - transitions provide five built-in
1201:24 - transition fade blur fly slide and scale
1201:28 - and we are going to look at how we can
1201:30 - use them in the example
1201:32 - to start using transitions you can use
1201:35 - the transition directive
1201:37 - here you type transition colon and the
1201:40 - name of the transition in this case fate
1201:43 - so here I add transitions to the list so
1201:46 - when it's added or removed
1201:48 - it will fade in and Fade Out you can add
1201:51 - arguments to the transitions in this
1201:54 - case we're going to add duration equals
1201:56 - to four seconds
1201:59 - so now it will fade in four seconds
1202:02 - and fade out within 4 seconds
1202:05 - to look at a complete list of all the
1202:07 - arguments you can provide to the
1202:08 - transitions you can take a look at spell
1202:11 - docs under the title of spell transition
1202:13 - here you can see that fit takes in three
1202:16 - arguments delay duration and easing next
1202:19 - we are going to make the item fly in
1202:21 - when we add or remove the item so I'm
1202:24 - gonna add the flight transition so
1202:27 - flight transitions takes in the X and Y
1202:30 - offset which means that in this case the
1202:32 - item will fly from 30 pixels from the
1202:35 - right if I want the item to just fly in
1202:37 - but not fly out I can change the
1202:39 - transition directive to in
1202:42 - now the item will fly in but not fly out
1202:45 - and similarly I can change it to the out
1202:48 - directive
1202:49 - then it will not fly in but it will fly
1202:52 - out so I can use the ins or out
1202:54 - directive to control the enter or exit
1202:57 - transition
1202:58 - this also means that we can have
1203:00 - different transitions for enter and exit
1203:03 - in this case I want to fly in but I want
1203:06 - to blur out
1203:10 - we are going to look at how we can
1203:12 - coordinate between transitions so take a
1203:14 - look at this example if I click on this
1203:16 - button
1203:18 - the item will fit in and the item
1203:21 - supplies it are slice in at the same
1203:22 - time right let me do that again
1203:25 - two transitions happening at the same
1203:27 - time is it possible that we can
1203:29 - coordinate them such that the first
1203:31 - transition happens at the first and then
1203:33 - after that subsequently on the next
1203:34 - transitions so it is possible to do with
1203:37 - a property called DeLay So in here we
1203:39 - can look at transition phase tickets 400
1203:42 - milliseconds over here on all the items
1203:45 - we fly in and the default delay is zero
1203:49 - seconds so which means that these two
1203:51 - transitions is happening at the same
1203:52 - time so if you want to make this happens
1203:55 - right after the fade in of that list
1203:58 - what we can do is we can add a delay
1204:02 - of 400 milliseconds as well so this
1204:05 - fades in in 400 milliseconds and 400
1204:08 - milliseconds later the item flies in so
1204:11 - let's take a look at the effect
1204:14 - right take a look at that again so 15
1204:16 - and then after that slides in
1204:19 - so if you don't want the elements say in
1204:23 - this case to slide in all at once what
1204:25 - we can do here is we can have the delay
1204:28 - based on index of the item so for
1204:31 - example if I add an index so this is the
1204:33 - index of that item we can add 400
1204:36 - milliseconds times uh but plus index
1204:40 - time 300 milliseconds right so it
1204:44 - depends on where the item is it will
1204:46 - have a different kind of delay right so
1204:49 - let's take a look at the effect right
1204:50 - now
1204:53 - if I have multiple items
1204:56 - close it one two three
1204:59 - right
1205:01 - one two three
1205:03 - so here is how you can coordinate in
1205:06 - between transitions using delay
1205:09 - so the next thing I want to show you is
1205:12 - this let's take a look at what happened
1205:14 - if we close this list
1205:16 - well it's not that obvious but let's
1205:20 - change this to slides and let's take a
1205:22 - look at it again
1205:25 - so when I close this and focus on this
1205:28 - item When I close this
1205:29 - it slides up when it close
1205:32 - right because this element is going to
1205:36 - be removed together with the parent and
1205:38 - when it's being removed it will play
1205:40 - this out transition
1205:43 - right but what I want to do is that I
1205:46 - don't want the transition of this
1205:48 - element to play when I'm removing the
1205:50 - parent I'm okay when I want to remove
1205:53 - this
1205:54 - elements itself but I'm not okay to play
1205:57 - that transitions when I want to remove
1205:58 - the parents
1205:59 - so what I can do here is to provide a
1206:01 - modifier called local
1206:04 - so let's take a look at how this local
1206:06 - effect
1206:08 - When I close
1206:10 - it does not play the transitions right
1206:13 - so the local modifier makes that this
1206:15 - transitions will only happen
1206:18 - when this element itself is being
1206:20 - removed or being added
1206:22 - but if this element is being removed
1206:25 - together with the parent the transitions
1206:27 - will not be played
1206:29 - right so if I removed it you can see the
1206:31 - transition but I remove the parent it
1206:33 - will not play the transition so if you
1206:36 - take a look at here when required to add
1206:38 - an item it takes a while to be added and
1206:42 - it takes even longer to be added for the
1206:44 - third item that's because the duration
1206:46 - for the transition elements is based on
1206:49 - the index so that is what we're going to
1206:51 - fix in the next video
1206:56 - So today we're gonna fix the bug that
1206:59 - was mentioned in the previous video so
1207:02 - the bug was like this we added a delay
1207:05 - based on the index of the item in the
1207:08 - list so that when we have multiple items
1207:11 - when we try to close it and try to play
1207:13 - it the item is added in succession
1207:16 - however because the delay is based on
1207:20 - the index
1207:22 - um the the transition better is coming
1207:25 - in is being added as item or the
1207:28 - transition is being played together as
1207:30 - the with the list
1207:31 - it's the same transition so now the
1207:34 - delay when we add the third item is
1207:36 - going to be very long
1207:38 - because that is how we've coded over
1207:40 - here so what we're going to do in this
1207:42 - video is to try to see whether we can
1207:46 - have a condition for the delay so we're
1207:48 - going to have this condition based on
1207:51 - whether the list is being shown if the
1207:54 - list has been shown then whenever we add
1207:57 - a new item
1207:58 - the condition should be true and the
1208:01 - item should be added with no delay if
1208:04 - the list is not on the screen try to add
1208:06 - the list item then the condition should
1208:09 - be false and each of the items should be
1208:11 - played with a delay so over here I'm
1208:14 - going to have I'm going to write this
1208:16 - condition list
1208:17 - dot shown
1208:22 - then the delay will be zero and if the
1208:25 - list is not being shown
1208:27 - the delay will be based on the index
1208:32 - so now what we're going to do is how or
1208:35 - when are we going to update this value
1208:37 - the list are shown
1208:40 - we can do this using a custom
1208:42 - transitions event
1208:45 - so on the list item we can have a few
1208:48 - custom
1208:50 - transition events such as on intro
1208:53 - starts on intro and
1208:57 - on outro starts and on outro n
1209:02 - as if the name suggests interest time
1209:05 - will be played when the intro transition
1209:08 - starts to play
1209:09 - and when it ends it will call this event
1209:12 - handler
1209:13 - and if you have outro when it starts
1209:16 - playing this event will be triggered and
1209:19 - then when it ends this will be played
1209:22 - all right so these are the events
1209:24 - handlers so now we can add event
1209:26 - transfer for intro n
1209:28 - and outro n
1209:32 - I'm going to remove these two
1209:35 - so now intro n we're going to set the
1209:37 - list start shown equals to true
1209:41 - and on the outer land we're going to set
1209:43 - list dot shown equals to false
1209:47 - so let's see what we have right now when
1209:50 - we click on it you have a delay
1209:56 - so when you click on this element you
1210:00 - have a sudden delay when you are showing
1210:02 - the item
1210:03 - but when you're trying to add a new item
1210:06 - because the list as shown is true
1210:07 - there's no more delay
1210:09 - I try to close this and try to play
1210:11 - again
1210:12 - the delay is based on the index if I add
1210:15 - a new item it shows immediately
1210:17 - so a summary of what we've done so far
1210:20 - we have a custom condition to determine
1210:23 - what is the delay of the item
1210:26 - and then we also seen a custom event for
1210:29 - transitions such as intro start into n
1210:32 - Ultra start and Ultra n
1210:34 - so we have seen how we can use delay and
1210:37 - duration to customize a transition but
1210:40 - there's one more thing that we haven't
1210:41 - covered which is easing easing can add a
1210:44 - lot of flavors to a transition and
1210:46 - that's what we're gonna look at in the
1210:48 - next video
1210:52 - in this video we're going to take a look
1210:54 - at how we can use easing to add flares
1210:57 - and add flavors to a spell transition
1211:01 - so the first thing is what is easing
1211:04 - so easing is a function that specifies
1211:06 - the rate of change of the entire
1211:09 - duration of your transitions so there's
1211:12 - a lot of built-in easing functions from
1211:14 - spelled and these are all of them
1211:18 - right and you can visualize them through
1211:20 - each visualizer
1211:22 - over here we have each visualizer open
1211:24 - what we're going to take a look at is
1211:26 - firstly a quad is in easing function so
1211:30 - this is the shape of the easing function
1211:32 - so on the x-axis is the time and the
1211:34 - y-axis is the value of the animation
1211:37 - that we are animating right so in this
1211:40 - curve if you play it again you can see
1211:42 - that how does it takes from the
1211:44 - beginning point to reach the destination
1211:46 - point right so different kind of easing
1211:48 - functions have different kind of curve
1211:50 - for example for this elastic it moves
1211:52 - towards the destination and goes further
1211:54 - from it and goes all the way back up to
1211:56 - the destination so different easing
1211:58 - functions will give you different kind
1212:00 - of flavors in your transition right so
1212:02 - let's head back to the task list and
1212:04 - let's try one of the easing function to
1212:07 - use easing we're going to import it from
1212:09 - the spelled easing so in this example
1212:12 - we're going to import bounce and out
1212:14 - ROMs felt easing to use this we're going
1212:17 - to copy the name of the easing function
1212:19 - and we're going to find one of the place
1212:21 - where we have like so in this case we
1212:24 - are going to add it in the fly where
1212:27 - when the this items flies in I'm gonna
1212:30 - add easing to be bounce ins out
1212:33 - so take a look at how it will look like
1212:35 - now so the element will fly will bounce
1212:38 - in when you fly in
1212:41 - right probably let me add this
1212:45 - to have a longer distance for the
1212:47 - element to fly in and probably that
1212:49 - would be more obvious
1212:53 - all right it says like that it's shaking
1212:56 - over here uh we can add slightly long
1212:58 - duration to make it even more obvious
1213:04 - right so that gives us a different kind
1213:07 - of although we are using the same
1213:09 - transition which is to fly in from the
1213:11 - right
1213:12 - but then with easing functions we can
1213:14 - control how it flies from the source to
1213:17 - the destination so let me try another
1213:19 - easing function and in this case we are
1213:22 - going to use sine out I'm going to
1213:24 - replace it over here and let's look at
1213:27 - how it is different right now begins
1213:29 - slow and then it accelerates and move to
1213:32 - the destination if we remove this all
1213:34 - the way you'll find that the elements
1213:36 - just fly in without any acceleration
1213:39 - right so easing functions you have a lot
1213:41 - of different kind of easing functions
1213:42 - that is built in from swelds you can
1213:45 - import damps from Spell slash easing and
1213:48 - the list of all the easing functions are
1213:51 - specified in the swell docs and you can
1213:53 - visualize them with each visualizer
1213:59 - today I want to talk about something as
1214:01 - important as making a site cooler with
1214:04 - decorative animations or transitions
1214:07 - because some users outright experience
1214:09 - motion sickness when faced with Parallax
1214:12 - scrolling zooming effects and so on
1214:15 - I mean vestibular disorders reactions
1214:18 - includes dizziness nausea and migraine
1214:22 - headaches so today
1214:24 - I'm going to share with you some
1214:26 - techniques on creating an open and
1214:29 - inclusive spelled app
1214:31 - we're going to continue on this to-do
1214:34 - list app which we added some transitions
1214:36 - such as fade slide and blur when adding
1214:39 - a new item many operating systems have
1214:42 - accessibility settings for specifying a
1214:45 - preference for reduced motion
1214:47 - on the web we can use media query such
1214:51 - as prefers reduced motion which was
1214:54 - introduced in a media query levels 5 to
1214:57 - detect if the user has sets an operating
1214:59 - system preference to minimize the amount
1215:02 - of Animation or motion so now we are
1215:05 - going to take a look at how we can
1215:07 - utilize that firstly svelt's transitions
1215:10 - or animations depends on the CSS
1215:13 - animation
1215:15 - so we can use a media query
1215:17 - to disable or set the duration of the
1215:21 - animation to be zero
1215:23 - so right over here I'm going to add
1215:25 - media
1215:27 - prefers reduced motion
1215:30 - to reduce so there's two values that you
1215:33 - can provide for this media query sorry
1215:36 - for the typo
1215:38 - which is reduce or unspecified
1215:41 - so if the user chose to prefers A
1215:45 - reduced motion then we can Target the
1215:48 - element that has animation or transition
1215:50 - and add animation duration to be zero
1215:54 - seconds I'm excited to important so that
1215:57 - it always has the highest priority
1216:00 - right I'm using a star over here because
1216:02 - I'm going to Target all elements but you
1216:04 - can do that for in this example would be
1216:07 - div you can do it to div only as well
1216:12 - so it depends on your use case you can
1216:14 - use a star to Target all the elements in
1216:17 - in this component or you can Target
1216:19 - specific elements in the component
1216:24 - so let's let's try that out right now if
1216:26 - we click on this button it has
1216:30 - a transition to emulate prefers reduced
1216:33 - motion on Chrome you can go for the
1216:35 - Chrome Dev tools
1216:37 - and then search for rendering
1216:41 - over here there is this emulate CSS
1216:45 - media feature prefers reduce motion so
1216:47 - if you choose prefers reduce motion to
1216:49 - reduce
1216:50 - and let's try to close this list and try
1216:53 - to open it again
1216:55 - now you realize that there's no any
1216:57 - transitions for this container
1217:00 - right although there's still transitions
1217:02 - for the item that's because we are using
1217:06 - a list items instead of a div
1217:09 - so over here we're going to add list
1217:14 - and now the item itself does not has any
1217:18 - transition so you try if you try to open
1217:21 - the list you may realize that there is
1217:24 - some delay on the item showing up on the
1217:27 - screen
1217:28 - right so when we use CSS a solution to
1217:33 - disable animation duration by disabling
1217:35 - how long it takes for that animation but
1217:37 - in this case we still have a delay when
1217:40 - the item is showing up on the screen
1217:44 - so we need a JavaScript solution so that
1217:48 - we can pass a different delay for the
1217:50 - transition over here
1217:55 - so the delay right now is based on list
1217:58 - shown 0 or 400.
1218:02 - plus index times 300 so we need to add
1218:05 - another condition over here where if the
1218:07 - user prefers reduced motion and that's
1218:10 - what we are going to do now
1218:13 - so over here
1218:15 - we're going to have
1218:17 - cons media query
1218:19 - it goes to window.match Media
1218:23 - prefers
1218:25 - reduce
1218:27 - motion to reduce
1218:38 - and the value where it matches or not
1218:40 - would be
1218:42 - media query
1218:46 - dot matches
1218:51 - so this will be computed at the very
1218:55 - beginning of your component and
1218:57 - depending on the user which I think is
1219:00 - unlikely
1219:01 - but there may be user like us where we
1219:04 - try to switch between reduce and no
1219:06 - Emulsion back to reduce so if you want
1219:09 - to check that as well you want to
1219:12 - constantly update these variable matches
1219:14 - you can use media query
1219:17 - look at event listeners
1219:25 - change
1219:29 - and you can update the value of matches
1219:31 - equals the media query
1219:35 - that matches
1219:37 - right in that way the matches will
1219:40 - always
1219:42 - reflects the latest CSS prefers reduced
1219:46 - motion
1219:47 - right so the user may go on to the
1219:50 - system operating system settings and
1219:53 - change it and you want that to reflect
1219:56 - on your spell component immediately then
1219:58 - you would have to listen to any media
1220:00 - query changes for this prefers reduce
1220:02 - motion
1220:05 - and now we know that whether it matches
1220:07 - or not to this media query so if it
1220:10 - matches which means that the user opted
1220:13 - to reduce the motion then we are going
1220:17 - to pass this in as a direct condition
1220:20 - for the duration
1220:22 - all right so we're gonna add here our
1220:26 - matches
1220:29 - then if I
1220:31 - click now there's no more delay for this
1220:34 - item to come out on the screen
1220:36 - right another alternative that if you
1220:38 - don't like to pass in a delay or
1220:40 - duration
1220:42 - for each of the transitions depending on
1220:45 - whether the user opted A reduced motion
1220:47 - what we can do here is that we can
1220:49 - create a custom transition
1220:52 - right so I will talk a bit more on
1220:55 - custom transitions later on but over
1220:58 - here a custom transition is none other
1221:00 - than a function that returns an object
1221:03 - that describes how your transition works
1221:06 - over here we can pass we can return a
1221:10 - delay of zero and duration of zero so
1221:14 - meaning this custom transition is
1221:16 - actually no transition right you can
1221:19 - still pass into the transition directive
1221:21 - but itself has no effect at all because
1221:23 - it has no it has no duration it has no
1221:27 - delay it just happens immediately right
1221:30 - what we can use here is that we can use
1221:32 - this node transition
1221:33 - and then we can have what we call a
1221:36 - reduced fly is equals to whether we
1221:38 - matches the user preference for reduced
1221:41 - motion if it if thus we will return a
1221:45 - node transition
1221:47 - or else we will return a flight
1221:49 - transition from the spelled transition
1221:52 - right so we can use this reduce fly
1221:55 - instead of
1221:56 - the
1221:58 - built-in fly
1221:59 - this way this reduce fly will have no
1222:02 - effect at all you don't have to use a
1222:04 - custom delay and whatnot and this itself
1222:07 - will be a no transition if the user
1222:10 - opted for a produced motion and it will
1222:13 - be back to a normal fly transition if
1222:16 - the user didn't specify any preference
1222:17 - all right so let's try it again
1222:24 - it works
1222:28 - and that's all so we have seen how we
1222:30 - can use CSS solutions to have to stop
1222:34 - all durations that would be one way of
1222:36 - doing things we also see how we can use
1222:39 - JavaScript with match media query and we
1222:42 - use that to have a custom transitions or
1222:45 - we use that to set like the delay or
1222:48 - duration to be zero once again I believe
1222:50 - that web should be open please for
1222:53 - everyone and we as a developer should
1222:56 - take responsibility to build an open and
1222:58 - inclusive web and app for everyone
1223:04 - so the other day I saw this um talk and
1223:07 - swell Summit by Annie Taylor Trent on
1223:10 - building a mail flicks which you guys
1223:12 - should definitely check it out
1223:14 - um within a talk I saw her slides when
1223:17 - she moves from one slice to another
1223:19 - there's this very amazing transitions
1223:22 - that swipes through the text and then
1223:26 - transitions to the next slide so take a
1223:29 - look
1223:30 - um so I played it slowly at a quarter
1223:32 - speed and as you can see the there's a
1223:36 - block but there's a color block that
1223:38 - swipes through the text and as it
1223:41 - shrinks it reveals a text behind so let
1223:44 - me play that again
1223:45 - so
1223:47 - um the color blocks grows and shrinks
1223:49 - and reveals the text behind
1223:52 - see that again
1223:58 - growth shrinks rebuild attacks
1224:01 - and what we're going to do today is so
1224:03 - what I'm trying to do today is to try to
1224:05 - replicate this behavior in a spelled
1224:07 - Rebel using custom transitions so here I
1224:11 - have my basic setup so you can see
1224:14 - there's a checkbox and then as it clicks
1224:17 - to check to show it will reveal slow
1224:19 - text hello world and custom transitions
1224:22 - and as I unclick it it will hide it so
1224:26 - it's implemented using IF block over
1224:28 - here
1224:30 - so the first thing we're going to do is
1224:32 - to write a custom transition
1224:33 - right so custom transition is nothing
1224:36 - but a function so I'm going to call this
1224:39 - transition name swipe
1224:41 - and it returns an object
1224:46 - right so it takes in a note that you're
1224:48 - going to apply the transition to so now
1224:50 - I'm going to apply the transitions to
1224:51 - the element itself it's going to call
1224:53 - transition swipe
1224:55 - over here as well transition swipe
1225:01 - okay so what's going to be returned from
1225:04 - this object so if you check the docs
1225:06 - about custom transition
1225:10 - since that it's gonna return an object
1225:13 - that has the following key values uh
1225:17 - delay duration easing and CSS
1225:20 - and today we're going to focus more on
1225:22 - writing the CSS function
1225:24 - right so in the CSS function
1225:28 - uh it takes in a parameter called T
1225:31 - which represents a time through the
1225:34 - transition
1225:36 - so the time T itself will
1225:39 - grow from T will gross from zero all the
1225:42 - way to one right
1225:46 - um so I'm gonna
1225:48 - replicate or reproduce these transitions
1225:51 - right is to try to break it down into
1225:53 - two parts so the first part is where the
1225:57 - solid color block grows from like zero
1226:00 - width all the way to
1226:02 - um
1226:02 - full width covering the whole text so
1226:05 - I'm break it
1226:10 - and then the second half of it will be
1226:12 - shrinking the solid color block to
1226:15 - reveal the text behind
1226:17 - so I'm going to chop the time into two
1226:19 - halves so the first half is
1226:22 - from 0 to 0.5 which is where we will
1226:26 - grow the solid color
1226:30 - and at this point the text is hidden
1226:35 - and the second half would be from 0 to 5
1226:38 - to 1 which will shrink
1226:41 - the solid color
1226:44 - and the text is revealed in this case
1226:48 - right so so I'm gonna have a basic
1226:52 - structure of how the code will look like
1226:54 - so 0.5
1226:56 - and else it will be
1226:58 - here
1227:01 - right so the next thing is how are we
1227:04 - going to create like a growing solid
1227:07 - color block
1227:09 - um so I have an idea is to use a linear
1227:12 - gradient as a background so let's try
1227:15 - out like how linear gradient looks like
1227:17 - here I'm going to write the div with a
1227:19 - width of 100 pixel and height of 100
1227:23 - pixel so and then let me put a border
1227:25 - right so over here you can see like we
1227:28 - have a solid square with 100 pixel width
1227:30 - and height
1227:31 - so linear to gradient takes in a few
1227:33 - parameters uh which is like the color
1227:35 - stops so it specifies like the color and
1227:38 - the position of the color
1227:40 - so you can specify multiple color stops
1227:43 - that will create the gradient right so
1227:47 - when I have the first stop as red color
1227:50 - at zero position
1227:52 - and the second color will be yellow at
1227:56 - the 100th position
1227:57 - you can see here it starts from zero all
1228:00 - the way to Yellow at the bottom
1228:03 - so we can change the direction over here
1228:05 - so I want it to be left to right so I'll
1228:09 - write to right
1228:11 - now you can see the color grows from Red
1228:14 - all the way to the right which is yellow
1228:16 - 100 if I shrink this number to 40
1228:18 - percent
1228:19 - you'll see that the rate transitions to
1228:22 - Yellow is from zero percent to forty
1228:25 - percent off the block and then from 40
1228:28 - onwards all the way to 100 will be a
1228:31 - full solid yellow color so in linear
1228:33 - gradient there's a concept called a
1228:34 - color hint which indicates how the two
1228:38 - adjacent colors should transitions so in
1228:42 - this example if I specify 40 percent
1228:45 - it means that the color red will start
1228:47 - to transition from 40 of the position
1228:50 - all the way to Yellow which is at forty
1228:52 - percent so in this case both values are
1228:55 - forty percent so you'll see like a very
1228:57 - sharp distinction uh from the first 40
1229:00 - of a break color and forty percent all
1229:03 - the way to 100 is um
1229:06 - yellow color so I can change the yellow
1229:09 - color to say transparent
1229:12 - in this case you will see
1229:15 - a red color block at 40 width
1229:20 - so if I change this value from 6 40 to
1229:23 - 60 then you'll see a solid color block
1229:25 - of width 60 percent
1229:28 - so I'm going to use this as a means to
1229:30 - create a solid color block which grows
1229:34 - and shrinks based on the value that we
1229:36 - can control over here so let me just
1229:38 - copy this out and remove the rest
1229:44 - so in CSS method you are going to return
1229:48 - a CSS strings so in this case we're
1229:50 - going to return
1229:52 - this ring and here I'm going to do the
1229:56 - same thing as well
1229:57 - so now let's figure out how what's the
1230:00 - value that we are going to put in over
1230:01 - here
1230:02 - right so in this case
1230:04 - um oh it should be less than 0.5 so in
1230:07 - this case we're going from 0.0.5 I'm
1230:10 - going to grow the solid color from the
1230:12 - left to the right
1230:14 - so um over here we have the rate which
1230:18 - is a color which we'll Define later
1230:22 - so let's say color goes to read
1230:26 - and the value of here should go so it
1230:30 - grows from zero to a hundred percent
1230:34 - right so we have a value t
1230:37 - that goes from 0 to 0.5 and we are going
1230:41 - to calculate the value uh percentage
1230:45 - that goes from 0 to 100.
1230:49 - so let's do some math over here so
1230:52 - percentage
1230:53 - should be a value times t
1230:57 - and this value is um so
1231:00 - 200 because 0 times 200 is 0 and 0.5
1231:04 - times 200 is a hundred
1231:07 - so we're going to use this value
1231:09 - percentage
1231:11 - but here and over here
1231:17 - right and over here on the other hand we
1231:20 - are going to have a gradient of
1231:23 - transparent all the way to the red color
1231:26 - so you should start from transparent
1231:29 - to read That's because
1231:33 - um the red solid block color will shrink
1231:37 - um from the left to the right
1231:41 - so let's calculate the value of here
1231:44 - so as it shrinks it's also going to grow
1231:47 - from zero to 100 percent
1231:50 - so T is now 0.5 to 1 and we're going to
1231:55 - calculate a percentage we should go from
1232:00 - um zero to a hundred so how to calculate
1232:03 - that
1232:04 - um so we can shift the value from 0 to 5
1232:08 - to 1 to 1 to a value of U which is um T
1232:13 - minus 0.5
1232:14 - this value itself will go from 0 to 0.5
1232:19 - right so 0.5 minus 0.5 is 0 and 1 minus
1232:24 - 0.5 is 0.5
1232:25 - and now we have a range from 0 to 0.5
1232:28 - which is the same as above so we times
1232:31 - it 200.
1232:33 - so U times 200.
1232:36 - now we have the value of percentage
1232:37 - let's pass it in over here
1232:42 - and we're going to use a variable color
1232:45 - instead of red
1232:47 - so let's see what we have
1232:50 - right so it's a bit too fast I'm gonna
1232:54 - change the duration
1232:56 - to let's say three seconds
1233:01 - it says it grows and it shrinks
1233:07 - all right
1233:14 - so if I don't have the first half of the
1233:18 - so let me comment this out first so that
1233:21 - you can see what it's doing on the first
1233:24 - half
1233:29 - right
1233:31 - and what we have on the second half
1233:44 - okay
1233:46 - um
1233:47 - so we're almost there the next thing is
1233:50 - that we are going to hide the text
1233:52 - right so for the first half the text is
1233:55 - hidden and the second half the text is
1233:57 - revealed
1233:58 - how we're going to do it is that we're
1234:00 - going to change the color of the text to
1234:02 - transparent for the first half of the
1234:03 - time and change it back to the original
1234:05 - color on the second half of the time
1234:08 - so assuming the color of text is red
1234:10 - we're gonna
1234:12 - or rather this very variable color that
1234:15 - we will compute later on
1234:17 - we'll set
1234:18 - um over here color is transparent for
1234:21 - the first half of time
1234:23 - and here is the color is
1234:28 - color
1234:30 - right so let's check it out again
1234:34 - right
1234:36 - and transvestit
1234:40 - yeah it looks okay now right so on the
1234:44 - first time of time we don't have the
1234:45 - text and second half you see the text
1234:49 - and then as it transitional the first
1234:52 - half you see the text and then the text
1234:54 - is heated so when you hide or you
1234:58 - Transit out
1235:00 - um what happened is that the value will
1235:02 - goes from T from the value T will go
1235:05 - from one to zero instead of zero to one
1235:07 - if we calculate all of this correctly
1235:09 - it's still the the same animation will
1235:13 - actually be reverse
1235:17 - so the next thing we are going to do is
1235:19 - we have to figure out the color of the
1235:21 - text
1235:23 - so we can use a browser API called
1235:26 - window dot get computer Style
1235:31 - sorry let me fix the text okay and pass
1235:34 - in a node
1235:35 - and color
1235:39 - okay so over here you will get the color
1235:42 - that is being
1235:45 - computed for this node in CSS so
1235:49 - depending on how what the specificity or
1235:52 - whatever you specify in the Styles or in
1235:54 - the CSS once it's sets we can get the
1235:57 - computed style and we can get the color
1236:00 - of this
1236:01 - so here let's take a look at again
1236:06 - right so the the color of the block is
1236:08 - no longer red but rather the color that
1236:11 - is specified for the text which we
1236:13 - specify over here in the CSS
1236:17 - all right let me show that again
1236:20 - so the last thing is the ice the icing
1236:24 - on the cake is to
1236:26 - take in a parameter called params over
1236:29 - here so the second argument of um a
1236:33 - custom transition is actually the object
1236:36 - that you can pass in over here so I want
1236:38 - this to have a certain kind of delay
1236:40 - which is say
1236:43 - um
1236:44 - 500 milliseconds right uh if I so this
1236:49 - params will be that object the delay
1236:52 - 500 milliseconds right so I need to use
1236:55 - these params and provide it to the
1236:59 - transitions itself if I don't do
1237:01 - anything there's no delay
1237:04 - right
1237:07 - so what I'm going to do is uh if nothing
1237:09 - is being provided I'm going to fall back
1237:11 - to an empty object and I'm going to
1237:14 - spread this over here
1237:16 - so I'm going to return the same delay or
1237:19 - duration that's being passed in by
1237:21 - the object itself and take a look
1237:25 - it's a five second of delay sorry 500
1237:29 - milliseconds of delay right nearly five
1237:32 - milliseconds before you exit out
1237:34 - and
1237:36 - so I'm gonna remove this duration so
1237:38 - that it goes to a default duration
1237:41 - right think so in default in spell for
1237:45 - duration will be 400 milliseconds which
1237:48 - is things should be written somewhere in
1237:50 - here in the docs
1237:52 - right 400 milliseconds that's the
1237:54 - default
1237:57 - um so here you go custom transitions uh
1238:00 - with the animating color solid block
1238:02 - based on the color of the text
1238:07 - today I'm going to show you how I create
1238:11 - a custom transition which I call a
1238:13 - Flipboard animation transition
1238:15 - this inspiration comes from a tweet from
1238:18 - Pine where he showed one of his art
1238:20 - created using JavaScript and CSS as you
1238:24 - can see over here this is one of his art
1238:27 - and while looking at it it reminds me of
1238:31 - a Flipboard where you can see in a
1238:33 - departing terminal where basically text
1238:35 - being flipped in the Flipboard and in
1238:38 - the transition you can see different
1238:39 - characters showing up before it reveals
1238:42 - the actual text that you want to the
1238:45 - Target text
1238:46 - right sorry for my bad explanation but
1238:48 - you get the idea right so I'm thinking
1238:51 - of creating this animation as a
1238:55 - transition where if you reveal the text
1238:57 - you have this kind of a transition where
1239:00 - it flips uh show different kind of
1239:01 - characters until you actually reveal the
1239:03 - actual characters the text that you want
1239:05 - to review
1239:06 - right so that will be a great transition
1239:09 - idea that I think of and today I'm going
1239:11 - to try to do that so first of all we
1239:14 - have this custom transition starter
1239:16 - which is uh nothing but a checkbox
1239:20 - which uh check and uncheck to reveal the
1239:23 - text
1239:24 - as you can see here we use a if block
1239:27 - so if you want to follow along you can
1239:30 - get the link at the description where
1239:32 - you can get this starter and you can
1239:34 - follow along with me right so let's get
1239:37 - started
1239:39 - so first thing first a custom transition
1239:42 - so a custom transition is nothing but a
1239:46 - function so let me name this transition
1239:49 - I'm going to call it a Flipboard
1239:52 - and it's going to return that object
1239:55 - so to use this custom transition I am
1239:58 - going to use the transition directive
1240:03 - I'm going to apply for both of the span
1240:05 - okay
1240:07 - and over here uh what we are going to do
1240:09 - is we're going to use the tick function
1240:12 - which takes in the T
1240:14 - right so um a custom transition is a
1240:17 - function that returns an object and that
1240:19 - object has several properties that you
1240:22 - can Define
1240:23 - and that uh that will Define how your
1240:26 - transition will behave right take is one
1240:29 - of them so this tick function takes in a
1240:31 - t which so this tick function will be
1240:33 - called by its Fields when the element is
1240:36 - being transitioned out or in and it will
1240:38 - be called on every frame so this T value
1240:42 - will represent whether it's it stands
1240:46 - for time but it represents uh what the
1240:49 - state of that element is so if you are
1240:52 - transition in meaning uh from nothing to
1240:55 - something then the T value will be a
1240:58 - value from 0 to 1 and as so zero as in
1241:02 - it's not shown on the screen and one is
1241:04 - being shown on the screen and if the
1241:06 - element is being transitioned out then
1241:08 - you'll get from one to zero right so
1241:10 - this tick function will be called a lot
1241:12 - of times while transitioning and the T
1241:14 - value you get for each time will be
1241:16 - different right from one to zero
1241:19 - so to get started uh Flipboard over here
1241:22 - on the other hand actually takes in an
1241:24 - argument called node so this node will
1241:27 - be the actual the elements that uh the
1241:30 - animation is the transition is being
1241:31 - applied to so this node for this case
1241:34 - will be this band and for this case will
1241:36 - be this band right so let's get started
1241:39 - so the first thing first is to get the
1241:41 - text for the text contents of the node
1241:44 - so this is the text that we are going to
1241:47 - reveal we're going to keep it as a
1241:50 - variable because in the meantime when we
1241:53 - are transitioning we're going to use um
1241:54 - we're going to change the value over the
1241:57 - time right and so this will be the final
1242:00 - text that will be shown on the user
1242:03 - right so over here uh if
1242:08 - T equals to 1 which is at the ending
1242:11 - state
1242:13 - ending where it's it should be revealed
1242:15 - then we're gonna set we're going to
1242:17 - revert back the content of the node to
1242:20 - be the text and then we're going to
1242:22 - return over here so we're going to stop
1242:23 - here
1242:24 - and in between we're going to figure out
1242:26 - what should be the value of the text
1242:31 - right so
1242:33 - um
1242:34 - okay so now uh if it turn on and off you
1242:40 - didn't see much so let's let's figure
1242:42 - out uh how we should try to do this
1242:45 - right so imagine this is the text right
1242:49 - imagine I have a text like a b c d e f g
1242:52 - this is the text and if the value of T
1242:56 - is say 0.5
1242:59 - um what should I see on the screen
1243:02 - right so
1243:04 - um
1243:06 - so this is
1243:07 - this is something that we figure out so
1243:10 - I'm thinking
1243:12 - uh if the time is T is 0.5 which is a
1243:15 - halfway point then I should at least see
1243:18 - half of the text and then the rest of
1243:20 - the text is
1243:22 - probably nothing right so probably I
1243:24 - represent it with Dash
1243:26 - um
1243:27 - and probably uh
1243:30 - some of the text will be revealed as
1243:33 - like X which is the
1243:36 - which these two characters will be
1243:38 - actually tries to
1243:39 - uh will be replaced by a random
1243:42 - character right so
1243:45 - imagine these two will be replaced by a
1243:47 - random character and then this is the
1243:49 - characters that has been revealed
1243:51 - because we have passed the time of 0.5
1243:54 - right so if the time is say at the sort
1243:58 - of like beginning
1243:59 - then if my text is a b c d f g again
1244:03 - then the text I'm going to see probably
1244:05 - will be a and then some random text and
1244:09 - then dash of like this is like kind of
1244:12 - empty space that represents uh
1244:14 - the unrebuilt text right these two will
1244:18 - be uh
1244:19 - random characters
1244:21 - right so as you can see here is that um
1244:25 - it what characters that we are going to
1244:27 - show it depends on the position of the
1244:28 - character
1244:30 - right so we are gonna
1244:31 - probably create a string like this this
1244:34 - will be the string that we're going to
1244:35 - create so I'm going to call it like
1244:38 - uh SDR string I'm gonna start with the
1244:41 - empty string
1244:42 - and probably we're going to set the text
1244:44 - content equals to string
1244:47 - right so now what we're going to do is
1244:49 - we're going to try to construct this
1244:51 - string
1244:53 - okay so uh probably we're going to look
1244:57 - through the length of the text right so
1245:00 - this the length of this string that
1245:01 - we're going to construct will be equal
1245:03 - the length of the original string over
1245:05 - here
1245:06 - so I'm going to look through the length
1245:09 - of that original string uh so I less
1245:12 - than uh text Dot link
1245:16 - I plus plus
1245:17 - so now what I'm going to create is a
1245:19 - variable called J
1245:22 - which is the value of I
1245:25 - divided by the text length so this is
1245:28 - the percentage of
1245:29 - where the character is so I'm going to
1245:32 - represent like each character will be a
1245:34 - percentage of where it is the position
1245:35 - of it uh relative to entire the length
1245:38 - of the string right so the character
1245:40 - would be one out of say
1245:43 - uh seven and the middle of text will be
1245:46 - say 3.5507 and the last character will
1245:49 - be seven out of seven right so J will be
1245:52 - that position so if J and T is the same
1245:55 - or J is less than t
1245:58 - meaning J is uh at the position that is
1246:02 - in front of the T value
1246:04 - we are probably going to
1246:06 - reveal the actual text right so if J is
1246:12 - less than t
1246:15 - then I'm going to append
1246:19 - the actual text which is
1246:22 - um
1246:23 - the text I
1246:25 - right
1246:27 - and then probably we're going to have
1246:29 - one or two extra characters over here
1246:32 - um so this is a bit arbitrary but what
1246:36 - I'm gonna try is that probably I would
1246:39 - say if it's 0.1 I'm gonna like
1246:43 - point two percent of the text
1246:45 - less than like point one two point two
1246:48 - percent of the text should be a random
1246:50 - character right so in this case I would
1246:52 - say like 0.5 to 0.75
1246:56 - right which is like
1246:58 - um 1.5 times of t uh if it's less than
1247:03 - else if J is less than
1247:06 - 1.5 times of T I'm going to have a
1247:10 - random character
1247:16 - and the rest of it will be
1247:20 - a dash
1247:22 - right
1247:24 - so let me Define this function called
1247:26 - random character over here firstly is
1247:29 - let me collapse this
1247:30 - can Define the function over here
1247:34 - okay so
1247:36 - um I'm going to create a string called
1247:39 - uh
1247:40 - random cars
1247:43 - that contains basically all the
1247:46 - character that you can think of
1247:52 - even including numbers
1247:57 - right
1247:58 - so what I'm going to have here is that
1248:01 - I'm gonna randomly pick one of the
1248:03 - character so math dot random
1248:07 - uh times the length of the
1248:11 - so this will be giving a random value
1248:15 - that is
1248:16 - within the length so I'm not sure 26
1248:20 - characters plus 10 so it's a random
1248:23 - correct random number that is within 36.
1248:28 - and I'm going to round it so I'm going
1248:30 - to call it floor
1248:31 - and after I get that number I'm going to
1248:34 - pick it I'm going to use that over here
1248:37 - right
1248:38 - so this will return me a random
1248:40 - characters from from this set of string
1248:43 - okay so I think we are done over here
1248:47 - and let's see how the effect looks like
1248:51 - it's a bit fast so let me slow that down
1248:54 - uh rather increase the duration
1248:57 - so I'm going to have the relation of um
1248:59 - say five seconds
1249:01 - so the default duration of a custom
1249:04 - transition is 400 millisecond which you
1249:07 - can see uh which you can find it on the
1249:10 - spelled docks
1249:12 - so now we have a duration of five
1249:14 - seconds so let's take a look
1249:19 - as you can see here the text is
1249:21 - the length of the text or the length of
1249:24 - the span is is vibrating right you can't
1249:26 - see the dash fix at one point
1249:29 - um that's because
1249:31 - the width of each character is diff is
1249:34 - different right so while we are randomly
1249:36 - choosing one character
1249:38 - um say I is actually narrower than say n
1249:42 - or S right because different characters
1249:44 - has different width and if we choose a
1249:47 - narrow or Slimmer character then the
1249:50 - dash will be then the hold width of the
1249:53 - text will be is narrow that's why you
1249:57 - can see that uh the a jiggly part on the
1250:00 - dash over there and that's because the
1250:03 - text has different width right if we use
1250:07 - a monospace text a font so if I use
1250:10 - monospace
1250:15 - font family
1250:19 - then you will not see that jiggling in
1250:21 - fact
1250:22 - because in essence a mono space font
1250:25 - have the same for weight for each
1250:28 - character
1250:29 - right now as you can see the dash
1250:31 - basically steals
1250:34 - fix fixated on the screen
1250:38 - right I think we are really good we are
1250:41 - making really good progress uh this is
1250:43 - exactly the effect I'm looking for
1250:47 - um exact except one point that I
1250:50 - probably want to point out is that I
1250:52 - find that the character is moving
1250:54 - uh random uh shuffling way too fast
1250:57 - uh probably I want to slow that down a
1250:59 - bit
1251:01 - but let's see but how are you going to
1251:03 - do that because we can't control when
1251:06 - svelt will call this tick function and
1251:08 - actually still will call this tick
1251:10 - function on every frame right so we
1251:12 - can't
1251:13 - on everything when this function is
1251:15 - called we are going to generate this
1251:16 - string uh every time right and because
1251:20 - we have random characters generated on
1251:22 - every time the tick function is called
1251:24 - we can't guarantee that we're getting
1251:25 - the same random character therefore uh
1251:28 - the character we're going to be
1251:30 - change very fast or rather out of our
1251:33 - control over here right so one thing we
1251:36 - can do is that probably over here in
1251:39 - this function before we start to
1251:41 - recreate the string we can do some check
1251:44 - uh check that uh sub check the
1251:48 - subsequent invocation of the tick
1251:50 - function to see whether it passed a
1251:52 - certain number a period of time if we
1251:54 - pass that period of time then we're
1251:56 - gonna recreate a new string if it's less
1251:59 - than that period of time then probably
1252:01 - we're gonna say hold on here we don't
1252:03 - have to do anything let's just skip what
1252:05 - am I going to do next
1252:06 - right so every time when you want to
1252:10 - measure like the time we need a variable
1252:13 - outside of here because we can't Define
1252:15 - that variable in here because this
1252:16 - variable will be created every time so
1252:18 - we're going to create a variable out
1252:20 - here in this group that basically
1252:23 - represents the last time that we just
1252:25 - execute this tick function right so
1252:28 - every time when it has tick function
1252:30 - we're going to calculate the current
1252:32 - time
1252:38 - and if the current time
1252:41 - is
1252:43 - minus the last time
1252:45 - is greater than say 30 milliseconds
1252:50 - right so
1252:52 - uh
1252:54 - usually a browser will execute on it if
1252:57 - we execute this on every frame usually a
1252:59 - browser renders at 60 frames per second
1253:01 - that means that it will be this function
1253:04 - will be called on every 16.66 second a
1253:08 - milliseconds
1253:09 - right so this will be like double of
1253:12 - that amount of time
1253:14 - so if it's greater than that then uh
1253:19 - or rather if it's less than that we're
1253:21 - gonna end here we're not gonna do
1253:23 - anything
1253:24 - but if it's greater than that uh then
1253:27 - last time will equals to the current
1253:29 - time
1253:30 - and then we'll allow to calculate a new
1253:34 - string
1253:34 - all right let's see the effect
1253:38 - right you can see here definitely it's
1253:42 - shuffling less frequent than we had just
1253:46 - now if you can't tell the difference let
1253:48 - me bump this up a bit so 300
1253:50 - milliseconds
1253:52 - so text is being updated every 300
1253:54 - milliseconds
1253:56 - right probably very slow right 100
1253:59 - milliseconds
1254:01 - slightly faster
1254:03 - right so this is updated on every 100
1254:06 - milliseconds
1254:08 - rather than every frame so every frame
1254:09 - this function will still be called but
1254:11 - we are not going to do anything if it
1254:13 - doesn't pass a hundred milliseconds
1254:15 - right so this is one of the way that you
1254:18 - can kind of control or throttle how fast
1254:20 - that you you want the tick function uh
1254:24 - the rest of the tick function to be
1254:25 - called so there you have it a custom
1254:26 - Flipboard animation
1254:30 - so today I'm going to talk about
1254:32 - component API in svelte more
1254:35 - specifically client-side component API
1254:39 - so what is that about
1254:41 - so let's take a look at one example
1254:44 - um where we over here I have app.strout
1254:46 - and importing
1254:47 - components.felt the component is all the
1254:50 - things that we have talked about
1254:51 - previously for example dispatching
1254:53 - events having prompts having reactive
1254:56 - statements and some uis binding event
1254:59 - listeners and all these things right so
1255:02 - this components when we import we write
1255:05 - import components from component.s
1255:07 - Fields so in this statement we can see
1255:10 - that the component that we just written
1255:12 - in this component as well file is
1255:15 - exporting a component that you can use
1255:18 - in a default export right here we are
1255:22 - imagine if this is normal JavaScript
1255:26 - module then this will be your default
1255:28 - export right so we're importing default
1255:31 - exports importing a component and we
1255:34 - just write this and we can use this
1255:36 - component on the Fly
1255:37 - of course this is in the app cells but
1255:40 - what if you want to use this component
1255:43 - and use it somewhere else
1255:47 - so we know that a component if you look
1255:50 - at the JavaScript output it says that
1255:52 - it's a class that is being exported
1255:54 - right so we want to use this class
1255:57 - somehow mounts on
1256:00 - um somewhere else on us by ourselves so
1256:03 - what do we do well we will just
1256:06 - instantiate this class and and use it
1256:09 - and that is the component API that I'm
1256:11 - going to talk about we in this example
1256:13 - we're going to talk about how we can use
1256:15 - this class one other API that we can use
1256:19 - and for example how we can update the
1256:22 - props as well as how we can listen to
1256:25 - events coming from the component
1256:28 - so here we
1256:31 - it's a bit limited to do this in the
1256:33 - rebel so I'm going to download this file
1256:36 - download this project and on I'm
1256:40 - compress it and I'm gonna use it and
1256:42 - open it on vs code and do it over here
1256:45 - instead okay so here we've seen that uh
1256:49 - in the main JS file this is the main
1256:51 - file of your application over here we
1256:54 - can see that we are importing app from
1256:56 - app.felt and we are actually
1256:58 - instantiating the component like this so
1257:02 - um there are some properties that you
1257:04 - can pass in for the app right if we
1257:07 - remove this line if we just do nothing
1257:09 - don't do anything from here
1257:11 - you see that now there's nothing shown
1257:14 - on the screen
1257:15 - right so this part is where it will
1257:20 - attach or Mount your app component onto
1257:23 - the screen
1257:25 - so what I'm going to do here is I don't
1257:27 - want to use this I want to use my
1257:29 - component directly because the component
1257:32 - I've written has has props as event
1257:36 - listeners
1257:37 - um
1257:39 - as as component events list component
1257:41 - events and and we're going to play with
1257:44 - that instead right so here I'm gonna
1257:46 - import directly import the component
1257:49 - directly
1257:51 - and now uh just like how we did for
1257:54 - app.spel we are going to a mount these
1257:58 - components onto the screen so I'm going
1257:59 - to say app equals new
1258:01 - component
1258:05 - and Target
1258:08 - document.body
1258:10 - all right so how about just use the same
1258:13 - use component instead of app so now if
1258:16 - we go if we split the screen into two
1258:19 - parts you'll see that we can still see
1258:22 - the components of the screen
1258:24 - right so here the first thing we're
1258:27 - going to take a look over here is what
1258:30 - are you what can you pass in uh for the
1258:33 - as as the parameters for your
1258:36 - Constructor right you are constructing
1258:38 - this component instance and what can you
1258:40 - pass it so the first thing you can see
1258:42 - is we can pass in an object and the
1258:44 - first property we can see is targets so
1258:46 - Target is where you are mounting your
1258:49 - components so if we come over here
1258:51 - inspect elements uh if you take a look
1258:54 - at the HTML let me try to zoom this up
1258:58 - all right let me close everything else
1259:02 - we try to expand you realize that now
1259:05 - the component is mounted on the document
1259:07 - body right this is this diff is what
1259:10 - we've written over here in the
1259:12 - component.s fields right exactly the
1259:14 - same div with the grids right so
1259:17 - um let's try to play with this let's try
1259:20 - to mount it somewhere else so let me
1259:22 - open this file uh in the HTML file I'm
1259:25 - going to add some div over here I'm
1259:27 - going to add maybe like header uh well
1259:30 - hello components
1259:32 - API
1259:35 - and I'm gonna come over here and then
1259:38 - create
1259:39 - a div or maybe a main tag right main con
1259:42 - main content will be added over here in
1259:45 - the main tag
1259:46 - and then maybe some foot over here uh so
1259:49 - here I'm gonna put the second hitting a
1259:51 - footer right footer uh
1259:54 - examples
1259:56 - prepared by the house okay so I have I
1260:01 - have a title main tag and a footer right
1260:03 - by default you will realize that because
1260:06 - we are adding the com we're mounting the
1260:09 - components on the body itself so it will
1260:13 - be appended to the body right so here
1260:15 - you see that all this H1 main footer is
1260:18 - still intact on on the
1260:21 - on the screen but then the components
1260:24 - right this this div is a component is
1260:26 - being attached
1260:27 - um appended at the end of the document
1260:30 - of body right so now we can change this
1260:33 - target to
1260:35 - um to the main uh elements instead so we
1260:38 - can do document dot query selector
1260:42 - Main
1260:44 - and now if I refresh realize that this
1260:48 - components being sandwiched between the
1260:50 - header and then a footer right so now
1260:53 - inside main is where you see the
1260:55 - components
1260:56 - okay so uh how do you know all this is
1261:00 - you can come over here to the document
1261:03 - and you probably can whoops you can
1261:06 - probably scroll all the way down to find
1261:09 - client side
1261:10 - components API then you'll probably find
1261:13 - that it says Target is where the HTML
1261:16 - the elements of the component will be
1261:18 - rendered to
1261:20 - right then you also can find things
1261:23 - um like props so Props is something we
1261:25 - can pass in as well so over here I'm
1261:27 - gonna
1261:28 - um since we in a component of spells we
1261:31 - created we have two props right A and B
1261:34 - so the default value of the props is one
1261:37 - for both of them that's why when you
1261:39 - create the components it says one right
1261:41 - so now how about let's just try and re
1261:46 - uh change add some props to these
1261:49 - component props let's say a equals to 5
1261:53 - and b equals to 10. I save this you
1261:56 - realize that now it's being rendered
1261:58 - with 5 and 10 as a props value and now
1262:01 - you the product is 50 right so so here
1262:04 - is how you can pass in the props if you
1262:06 - don't have props then it will be it will
1262:08 - use the default value of of the props
1262:11 - okay fair enough right so if we take a
1262:14 - look over here again it says context you
1262:17 - can pass a context uh for your
1262:20 - components so say for example if I have
1262:22 - my components over here and say it gets
1262:24 - contacts
1262:26 - foreign
1262:28 - text I am going to get a value called C
1262:35 - equals get context
1262:37 - C
1262:40 - okay I'm gonna show this value C value
1262:43 - over here on the screen as well
1262:49 - okay as you see
1262:52 - okay maybe put it at the end see
1262:57 - okay so if we see C is right now
1262:59 - undefined and we can come over here and
1263:02 - say context
1263:04 - and we can create a new uh context is
1263:08 - where we can pass in a map it's uh here
1263:11 - it says default is a empty map so you
1263:14 - can create a map a map with some value
1263:17 - in it right so I can create uh maybe I
1263:21 - create a new variable called context it
1263:24 - goes to new map
1263:26 - and context dot sets C equals to
1263:31 - 10 20. right and then pass this context
1263:36 - I save this and then you realize that
1263:39 - now C is 20 because C is is
1263:43 - um
1263:44 - the context will be reading will be read
1263:47 - from this map that we just created right
1263:49 - of course if you don't like to write so
1263:51 - many lines of code you want to have a
1263:53 - more compact code then of course your
1263:56 - map can be instantiated directly with
1264:00 - um key value pair so here I'm going to
1264:02 - say uh
1264:04 - C and 20.
1264:08 - right
1264:10 - so here uh so just like a
1264:15 - explanation of how this works is that
1264:17 - you can pass in an array of key value
1264:19 - pairs so you can have as many uh key
1264:23 - value pairs over here for your map that
1264:25 - you're creating and since we are doing
1264:27 - this we why not we just inline this
1264:30 - whole thing over here this whoops
1264:33 - this would work as well right if you if
1264:37 - you really like a very compact uh code
1264:39 - for for some reason right so just to
1264:42 - just now I was trying to like explain
1264:44 - you can pass in a map and creating now
1264:46 - just like yeah one liner okay so we can
1264:49 - pass in our props that we want you can
1264:51 - pass in contacts uh what else can we do
1264:53 - over here anchor anchor says that this
1264:56 - is a child uh that the render
1264:59 - immediately before an element right so
1265:02 - for example over here if I come over
1265:04 - here and say previously we will say
1265:06 - document uh body right we were we're
1265:09 - rendering uh at the body so by default
1265:13 - it will be appended at the end of this
1265:15 - uh body so you see H1 main footer and
1265:19 - then the the components that we just
1265:21 - written but we can add an anchor anchor
1265:24 - and see where we want to anchor anchor
1265:27 - meaning this will be
1265:29 - um
1265:30 - uh this component will be inserted right
1265:33 - before the anchor so here if I say uh if
1265:36 - I come over here and maybe query for the
1265:38 - footer right document
1265:41 - dot query selector
1265:43 - footer
1265:44 - save and realize that this now this
1265:48 - component is inserted right before the
1265:51 - footer right right before the footer so
1265:54 - anchor is where you want so by default
1265:57 - your app when you're inserting to the
1265:59 - targets you're inserting you're
1266:01 - appending this components at the end of
1266:04 - the children so if it's there's existing
1266:07 - children you will add at the end of the
1266:08 - children list but Anchorage is that you
1266:10 - want to add into uh as my children but
1266:14 - before something else right so if you
1266:16 - are familiar with the Dom API called
1266:19 - insert before this is how
1266:21 - um this is this is being used by when
1266:24 - you're trying to insert elements right
1266:26 - so anchor is like inserts these
1266:29 - components before an anchor and by
1266:31 - default anchor is now then insert before
1266:33 - if you're passing and now actually
1266:34 - you're inserting at the end of the list
1266:36 - so
1266:37 - um so there's nothing unique or special
1266:39 - over here okay
1266:41 - so let's take a look what else we can do
1266:43 - right so hydrate and intro right hydrate
1266:47 - is when you want uh when your HTML has
1266:50 - already has something in it uh and you
1266:53 - want to
1266:55 - um hydrate it right meaning uh if if you
1266:58 - use a server-side rendering and then
1267:00 - then you probably will want to specify
1267:04 - uh hydrate equals to
1267:06 - true and you want to
1267:09 - hydrate the uh
1267:12 - but existing HTML dot Dom elements with
1267:15 - with your components right probably will
1267:18 - explain this more extensively when we
1267:20 - talk about server side rendering all
1267:21 - right so let me just remove this for now
1267:24 - um then what else okay so lastly Intro
1267:27 - by default is false right so what is
1267:30 - intro say for example if I come over
1267:32 - here and try to import
1267:34 - fade
1267:36 - from svelt transition
1267:40 - and I add fade
1267:43 - transition to my
1267:45 - component
1267:49 - okay by default if I try to refresh this
1267:52 - you don't see any fading right although
1267:55 - I'm adding this transition fade
1267:58 - um to to the component
1268:00 - um why that's because by default when
1268:02 - you are in the initial
1268:05 - when you initially the first time when
1268:07 - you're trying to show the component uh
1268:09 - the transition will not be played by
1268:11 - default right of course if you come over
1268:13 - here and maybe add another variable
1268:15 - called D equals to truth or initially
1268:19 - and if and we're gonna use this D to
1268:22 - depend to try to show a height
1268:26 - um
1268:27 - the whole component content
1268:30 - and then I maybe create a check box
1268:45 - now I
1268:47 - notice when I refresh the page there's
1268:49 - no transition being played
1268:52 - at all but now if I try to turn it off
1268:55 - and turn it on you see that the
1268:58 - component is fading right but then the
1269:00 - first time when you see on the screen
1269:01 - there's no fading being played
1269:05 - um right I refresh no no fading is being
1269:08 - played so uh this is
1269:11 - um to some people this is not what they
1269:14 - want but to most people this is this is
1269:16 - good right because you you wouldn't want
1269:20 - um at first glance when you try to add
1269:22 - components everything is fading right
1269:24 - this is this is some like the initial
1269:26 - content it should be just there
1269:28 - um of course if you want to change this
1269:30 - Behavior then this is where the intro uh
1269:34 - useful right remember if we look at the
1269:37 - docs by default it says false says that
1269:40 - it will not play transition on the
1269:42 - initial render right it will not play
1269:44 - but if it's true you will play
1269:45 - transition on initial render
1269:47 - so if I come over here and say intro to
1269:50 - true I save this
1269:53 - um
1269:54 - okay and I try to refresh you see that
1269:57 - if you take notice over here it will
1269:59 - refresh you'll see that the intro fading
1270:01 - is being played
1270:04 - right so this is uh how did how this
1270:07 - intro is being useful right so even if
1270:09 - we don't have this at all we don't have
1270:12 - any condition we have just our
1270:15 - components with a transition the
1270:16 - transition will be plate uh during the
1270:19 - intro when during the initial mounting
1270:22 - of your component all right so here
1270:24 - basically we covered
1270:26 - all of the options that is available uh
1270:29 - in your Constructor
1270:31 - but let's move on to other things that
1270:35 - we can do with a
1270:38 - with the components instance results
1270:40 - right because when we try to initialize
1270:42 - this and instantiate these components we
1270:45 - have the component instance and this
1270:47 - component instance actually you can do
1270:48 - certain things to it
1270:50 - so for example if I take this component
1270:52 - and come over here and try to
1270:55 - do something right so before we do
1270:58 - something we maybe let's add some
1271:00 - buttons
1271:01 - tradition the traditional old school way
1271:04 - adding some buttons over here I'm going
1271:06 - to add one button called ID a
1271:11 - random okay let's say ID goes random
1271:14 - random mice
1271:16 - okay so old school way we create a
1271:18 - buttons and now we want to add some um
1271:23 - we are going to add some
1271:25 - um event listener to this button so
1271:27 - we're gonna say document dot query
1271:30 - selector random
1271:33 - at event listener click
1271:46 - ok
1271:48 - not sure you can see this clearly let me
1271:50 - try to expand it bigger wider and let's
1271:54 - just make this narrower so that okay
1271:57 - hopefully you can see the whole lines
1271:59 - okay now I have my function uh let's do
1272:02 - something with this right
1272:05 - okay so uh when I click on the on the
1272:10 - button what I want to do is I want to
1272:12 - randomize the props so I want to pass
1272:15 - the different values to A and B so first
1272:17 - thing is how do I pass values to A and B
1272:19 - uh what I can do over here is I can come
1272:22 - over here and say component dot sets
1272:26 - and sets the props value so set is a
1272:29 - method for you to actually set props
1272:33 - value to the component so here I can say
1272:35 - a
1272:36 - a equals to 20 and b equals to 70 right
1272:40 - safe so when I click randomize you'll
1272:43 - see that it will change a to 20 and B to
1272:46 - 70. so I want random right so probably I
1272:49 - can map.random
1272:52 - um and then let's see
1272:55 - um times 100
1272:59 - math.flor so I can get a nice round
1273:02 - integer number and a range from 1 to 100
1273:04 - so let me save this so now I randomize
1273:08 - you can see that this is changing A and
1273:10 - B right every time when I click so this
1273:12 - is useful when
1273:14 - um
1273:15 - for example now we we don't have we are
1273:18 - not being restricted on just using a
1273:20 - spell component in another swell
1273:23 - component you can actually take this
1273:25 - component and use it anywhere right so
1273:28 - for some reason you have an existing
1273:31 - um react app or have existing PHP
1273:33 - application Ruby on reels any framework
1273:36 - do you have existing uh you if you want
1273:39 - to uh just have a very small part of it
1273:42 - being written in svelt then you can
1273:45 - compile your spell component right you
1273:49 - can import the spell component and if
1273:51 - you compile it using a Serial compiler
1273:53 - what you get is a a spell component
1273:59 - class right so you import that class
1274:00 - you're trying to instantiate this class
1274:02 - and you can pass all these things like
1274:05 - say props and context into it and can
1274:08 - use it and you can still interact with
1274:10 - your components by sending the props
1274:13 - or you can set the props with this
1274:15 - component and if you watch my video
1274:18 - about uh props the two timer props one
1274:21 - is like normal variables there are also
1274:24 - um what I call a component methods for
1274:26 - example if you export function say do
1274:29 - something
1274:33 - uh what this will do is
1274:36 - um I'm gonna say Okay instead of do
1274:38 - something called resets do so a sets
1274:41 - reset a and b equals to one
1274:43 - uh this component method can be also
1274:46 - used by
1274:49 - uh from your component instance over
1274:52 - here right so here I can't come over
1274:54 - here
1274:55 - uh maybe have another button called
1274:58 - reset
1274:58 - and I'm going to call this method reset
1275:01 - all right let me save this let me add
1275:04 - another button called reset
1275:08 - okay
1275:11 - so here I have two buttons a randomize
1275:13 - and change the value and reset and we
1275:15 - reset everything back to one right so I
1275:18 - can interact with these components by
1275:21 - setting the prompts or getting some
1275:23 - complementals and call it directly
1275:25 - right so the last thing I want to show
1275:27 - you is actually how do you listen events
1275:30 - component events being dispatched from
1275:32 - this component itself so here I'm
1275:34 - dispatching a product event the name of
1275:37 - the event is called Product right so
1275:39 - here I want to listen to it how I what I
1275:42 - can do is I can come over here and say
1275:43 - component dots
1275:46 - on
1275:48 - and pass in the name of the events so
1275:51 - this is called Product and I can get a
1275:54 - event listener
1275:57 - and the date um let me think let me just
1276:01 - console out the data right so console
1276:04 - logged
1276:07 - uh product event
1276:10 - events.detailed right events dot detail
1276:12 - is where you can get the detail of the
1276:15 - product which is the data that you're
1276:17 - going to pass in over here which is the
1276:18 - product itself all right so here let me
1276:21 - open my console
1276:23 - uh let's show the console at the bottom
1276:28 - let me hide my head and let's see so
1276:31 - here uh every time when I change the
1276:33 - value you you notice that the product
1276:35 - event is being
1276:37 - triggered and you get the detail of the
1276:40 - events which is now the value is 70
1276:42 - right of course you can pass more things
1276:45 - say products
1276:49 - oops Pro product Oh I mean our products
1276:54 - A and B can pass in all these things in
1276:57 - here and so every time when you change
1276:59 - you get products A and B right so you
1277:02 - get
1277:03 - um
1277:04 - data coming out uh by listening to
1277:07 - events so I believe this is almost
1277:10 - everything that you can do with the
1277:12 - components right you can't set the props
1277:15 - or call functions or even listen to
1277:18 - events coming out from the components so
1277:21 - lastly
1277:22 - um here we introduce how you can
1277:26 - mount the components but what if you
1277:28 - have some buttons that you want to do
1277:31 - where you want to unmount components
1277:33 - right how do you unmount your component
1277:35 - that will be calling the destroy method
1277:38 - right so first thing so this fry will be
1277:41 - here in the docs right destroy so first
1277:44 - thing is I am going to create a button
1277:47 - for that I'm going to say destroy
1277:51 - okay so upon's click clicking on this
1277:54 - destroy button button whoops
1278:01 - let's see destroy ideas destroy
1278:07 - I'm gonna call destroy
1278:10 - okay so once it's dimming destroyed
1278:13 - you'll be removed and it will be it you
1278:17 - can't uh Mount the component backed
1278:19 - again anymore you have to have to create
1278:21 - a new component because the Destroyer
1278:23 - will do all the cleanup for example
1278:25 - remove any event listeners being added
1278:27 - for the component it will
1278:30 - um stop everything it will call the on
1278:33 - Destroy component lifecycle events and
1278:37 - things like that and the it's the best
1278:40 - for you to just recreate a new instance
1278:43 - and mount it on the screen Dom right so
1278:45 - that's why when you create the component
1278:47 - you have to pass in a Target and like
1278:49 - when you create an instance it's like it
1278:51 - should be immediately mounted on the Dom
1278:53 - and when you destroy there's no more
1278:55 - mounts method that you can call anything
1278:58 - else right so now let's take a look over
1279:01 - here if I come over here
1279:03 - um I
1279:04 - click destroy and this whole thing is
1279:06 - being removed and that's it you try to
1279:09 - inspect
1279:11 - um or take a look or anything uh it will
1279:14 - it should be it will be gone right you
1279:16 - won't see this anymore and and you have
1279:18 - to create a new component instance
1279:23 - um I see in the docks that says like
1279:25 - component props I I believe this we we
1279:28 - talked about this before
1279:30 - um if you if you remember the video I
1279:33 - will talk about uh spell options called
1279:34 - accessors
1279:36 - um links will be in the description if
1279:38 - you haven't watched that video so if you
1279:40 - set if you use an access uh set
1279:42 - accessors to true then you will also not
1279:46 - uh you you will get a getter and Setter
1279:49 - method for your prompts so not only you
1279:51 - can set it with a dollar sets methods
1279:54 - you can also directly assess the value
1279:56 - of a or sets a directly
1279:59 - um as like like as if this component
1280:02 - property like this right
1280:06 - so today I'm going to talk about
1280:08 - components API in svelt
1280:11 - specifically
1280:13 - server-side rendering component API
1280:16 - if you have watched my previous video
1280:18 - it's about client-side component API
1280:20 - meaning you can import components
1280:24 - um on the client side which is in the
1280:26 - browser and then you try to
1280:29 - instantiate a class and to mount it on
1280:33 - the dump and then you can call like the
1280:35 - set or on to set the props call some
1280:39 - functions or listen to component events
1280:42 - and runtime
1280:43 - right so but today we're going to talk
1280:45 - about more on the server-side kind of
1280:48 - things right so uh spell supports server
1280:51 - side rendering meaning
1280:53 - um svelts can actually uh provides a
1280:56 - method for you to call which returns a
1280:59 - string which is like a HTML string which
1281:02 - you can then return to a user so this
1281:04 - code can run it on the server and
1281:06 - whenever every someone tries to
1281:09 - um query something from you you can
1281:14 - um return some contents to the user so
1281:17 - the content can be dynamic
1281:19 - um maybe your your site is about food
1281:22 - blog and every time user visits a
1281:24 - different URL you want to return some
1281:26 - different different foods then it's good
1281:28 - to have this function in a server site
1281:32 - where you can call and then returns a UI
1281:35 - HTML content HTML string that's rendered
1281:37 - for different food right so you have
1281:39 - this function that returns and we're
1281:41 - going to talk about this function which
1281:42 - is the server-side rendering components
1281:45 - API
1281:47 - so here we are take looking at the same
1281:51 - examples that are prepared for
1281:52 - client-side component API the same old
1281:55 - components that we have
1281:57 - um but one thing is different right now
1281:59 - is that we are going to stare at the
1282:01 - JavaScript output for a while so this
1282:04 - JavaScript output is what you would
1282:07 - expect from client sites uh codes right
1282:10 - this is what you expect to be run on the
1282:13 - client side you see methods like
1282:16 - mounting elements
1282:19 - um sorry let me just open on the
1282:20 - component of spells you'll see codes
1282:22 - like creating elements mountings
1282:25 - elements you see codes like listen to
1282:28 - component events handle it or set the
1282:31 - component elements values and things
1282:33 - like that and then last but not the list
1282:35 - you'll see that this is exporting
1282:37 - defaults the component which is a class
1282:40 - which you can use to
1282:43 - instantiate amounts on the Dom and call
1282:46 - the methods that I've said early on
1282:48 - right but you do you know that there's a
1282:51 - compile options uh for swelts that will
1282:55 - compile this code that you write the
1282:57 - same old code that you write but compile
1282:59 - it for server side rendering which is
1283:01 - the function I just mentioned where you
1283:04 - can call this function and return you a
1283:05 - HTML string amazing right same piece of
1283:08 - code can compile to JavaScript that
1283:10 - adding elements on the Dom as well as
1283:13 - can compounds to a function that returns
1283:16 - a HTML string that can run can be run on
1283:19 - the server side
1283:20 - and you can use a flag on a compiler to
1283:25 - turn this on which is called the
1283:27 - generate right by default it sets to Dom
1283:29 - which is for the client sites but you
1283:31 - can change it to SSR which is to export
1283:35 - a function that returns a string right
1283:37 - so if you take a look at here still
1283:40 - again it is expanding default components
1283:42 - but now you look at the component itself
1283:45 - it looks different now and it feels like
1283:49 - a function over here where you can see
1283:51 - that this is a function that's written a
1283:55 - pretty much like a string right returns
1283:57 - a string
1284:00 - um so it's a Pity that you can't really
1284:02 - run and try server side rendering
1284:05 - components API
1284:07 - um or server side rendering at all on
1284:09 - the Ripple this is meant to be
1284:11 - interactive and only for client-side
1284:13 - rendering only
1284:15 - so what we're going to do is we're going
1284:16 - to download this example and we are
1284:18 - going to try to
1284:22 - run it ourselves right so that we can
1284:24 - verify how this works okay so before I
1284:28 - start running anything I want to bring
1284:31 - attention over here in the roll up
1284:33 - config this is the config file for
1284:36 - um this the basic setup for to to start
1284:39 - to compile your spell component and
1284:42 - start a Dev server
1284:44 - um so here if we scroll to look at
1284:47 - spelled you'll see here we're passing
1284:50 - compiler options this is exactly the
1284:53 - same that we are looking over here
1284:54 - compile options and now I want to change
1284:56 - a bit I want to add generate
1284:59 - to SSR so that we are generating
1285:02 - server-side rendering code uh uh in
1285:06 - States okay so I changed to generate SSR
1285:10 - and now I try to run this young Def
1285:15 - and before we run anything we're gonna
1285:18 - now take a look at the main.js right so
1285:22 - previously in the previous video I said
1285:24 - I want to throw all this away because
1285:26 - I'm going to take a look at just the
1285:28 - component as felt so I am going to
1285:30 - import that component
1285:34 - that's felt
1285:38 - but now I I can't really instantiate
1285:41 - this like a new
1285:43 - component and mount it on the Dom it
1285:45 - does not work that way for server side
1285:48 - rendering now anymore
1285:50 - so suicide rendering uh what you import
1285:52 - you you still get the export default
1285:54 - right as we see here export default is
1285:57 - the component but this component itself
1286:01 - has only one method which is component
1286:06 - whoa
1286:08 - components dot render only wants methods
1286:12 - so this is where you uh rent you this is
1286:16 - the function I mentioned
1286:18 - because uh all in all and again this is
1286:21 - a function that returns you
1286:25 - a HTML string so I'm going to console
1286:27 - log that because it does not really
1286:30 - returns a HTML string per se it's
1286:34 - returning an object and then object
1286:36 - contains some HTML string and some other
1286:38 - information that you would want to know
1286:40 - about right so I just console lock
1286:43 - everything out
1286:44 - so you can call this function so if I
1286:46 - come over here and try to open
1286:52 - this browser open the points you see
1286:55 - nothing because we are not mounting
1286:58 - anything anything on the Dom but if you
1287:00 - open up the console let me drag it all
1287:03 - the way up you probably see that it's
1287:06 - it's printing up a
1287:09 - um
1287:10 - it's printing up some content right CSS
1287:14 - hit and HTML
1287:16 - so um
1287:18 - you can pretty much see that the HTML is
1287:21 - the uh you can pretty much guess that
1287:23 - HTML is the HTML string that I mentioned
1287:26 - but you also see strings like hit and
1287:30 - CSS
1287:31 - so if you have a style tag in your
1287:34 - component then you probably have
1287:35 - something in the CSS which is
1287:38 - um
1287:39 - some CSS code that you would want to add
1287:43 - to your uh in in your HTML they want to
1287:48 - return to the user so usually what you
1287:51 - would do is you probably come over here
1287:53 - and piece everything up into one nicely
1287:57 - one nice HTML document and then send it
1287:59 - to the user
1288:01 - um
1288:02 - yeah send it to the user right so here
1288:04 - let's let me try to instead of doing
1288:07 - that let me just uh have a quick code to
1288:11 - show you how that would roughly works
1288:12 - right so first is in this object you
1288:15 - have CSS you have hit and you have HTML
1288:18 - okay
1288:21 - okay so now
1288:22 - um in the
1288:25 - so first thing first thing let me try
1288:27 - how about that let me do this let me
1288:29 - come over here and in the body I am
1288:31 - going to add a pre-tag
1288:34 - uh and I'm gonna add all the contents
1288:37 - over
1288:39 - a to the pre elements right so here I'm
1288:42 - gonna document dot query selector free
1288:48 - dot inner text equals to the HTML
1288:55 - so now you can see that
1288:57 - um
1288:58 - this is the
1289:02 - this is the HTML uh string that is being
1289:07 - written right you you get a div
1289:10 - um yeah basically everything that you
1289:13 - you can think of right
1289:15 - um let's see and I think what we want to
1289:19 - uh focus our attention is over here uh
1289:23 - first thing is so two things right so
1289:26 - this component that we just written as
1289:28 - props called a equals one and b equals
1289:30 - to one
1289:31 - all right so here you would uh if you
1289:34 - pay more attention uh here we have an
1289:37 - input that we binds a value right a the
1289:39 - value of a and value of B
1289:41 - so here if you zoom in let me zoom in a
1289:45 - bit and you focus over here I know it's
1289:47 - not nicely formatted but let's let's try
1289:50 - our best if you focus over here that I'm
1289:52 - highlighting over here you see that the
1289:54 - value is is one right so this is like
1289:57 - the default default value that you will
1289:59 - find in the
1290:01 - um
1290:02 - in your input when you load this HTML on
1290:06 - the screen
1290:07 - right and here you have the second input
1290:10 - value equals one and then here you have
1290:13 - the product which is one as well so you
1290:17 - can change this by passing a props to
1290:20 - your render function right so here the
1290:22 - render can actually takes in US quite a
1290:25 - few options
1290:27 - um so that you can
1290:28 - you know same component but render
1290:30 - different kind of content and here the
1290:32 - first thing you can do is you can pass
1290:34 - in the props
1290:36 - um says
1290:38 - a equals to 5 and b equals to ten if I
1290:42 - save this and I try to
1290:45 - oh hold on let me did I did I get it
1290:48 - right let's see
1290:50 - uh oh no okay so the first first
1290:54 - argument is the prop itself so there's
1290:56 - no props okay so I'm gonna pass a equals
1291:00 - five b equals to ten let's save this and
1291:03 - now immediately you realize that here
1291:06 - same inputs but value is five
1291:09 - and this input value is 10. you can see
1291:12 - here the product the product is 50. so
1291:15 - you can see that you can't
1291:18 - um generate a different HTML string
1291:19 - based on the different props that you're
1291:21 - gonna pass into this component right so
1291:25 - um of course not just about props you
1291:28 - can also pass in some context
1291:30 - so here let's come over here in our
1291:33 - components let's write some context uh
1291:36 - import
1291:38 - contacts uh get contacts
1291:41 - from sveld
1291:45 - okay and I am gonna get C from context
1291:52 - lowercase C just in case
1291:55 - and then I am going to show the value of
1291:58 - C so c c okay
1292:01 - so here let's take a look at the docs it
1292:03 - says that second options you can pass in
1292:06 - context which has which is a map same
1292:11 - thing as the client-side component API
1292:13 - right so uh first thing is we take a
1292:16 - look here it says C is undefined so
1292:20 - we're gonna change that we're going to
1292:21 - come over here and pass in the context
1292:23 - right so here we're going to create the
1292:25 - second argument it says context equals
1292:28 - some new map
1292:31 - C equals to 10 whoops
1292:36 - uh let me make it 20 right so now if I
1292:39 - come back you'll notice that c is now
1292:42 - 20. so uh you can pass in context you
1292:45 - can pass in props and that's basically
1292:48 - the extent that you can do with
1292:51 - um you know on the server side rendering
1292:53 - right you you can't really change props
1292:55 - uh it does not make sense right you are
1292:57 - you are have a function that just
1292:59 - returns a HTML there's no reactivity or
1293:02 - whatever that you you intend to because
1293:03 - this instrument was just going to be
1293:05 - sent to the client and then the client
1293:08 - browser receives it and render it on a
1293:10 - screen right that's uh and that's the
1293:12 - end of the job of the server side
1293:14 - rendering right there's a job it's just
1293:15 - to return a HTML string so there's no uh
1293:19 - methods for you to play with uh change
1293:21 - the prompts or there's no mentors for
1293:23 - you to sort of like listen to component
1293:26 - events
1293:27 - um the X so the extent of server side
1293:29 - component API is just returning a
1293:32 - function and returns
1293:33 - um HTML string
1293:36 - of course we we said earlier on there's
1293:39 - also CSS and there's also hit so
1293:42 - um if you come over here you take a look
1293:45 - at this HTML this is like not a very
1293:47 - complete HTML right you you probably
1293:49 - what you want to send to the client is
1293:52 - probably a full HTML document right
1293:55 - nicely formatted so here let me try to
1293:57 - do that uh let's let's create a template
1294:01 - string so here I have HTML
1294:04 - right as as how you imagine a HTML and
1294:08 - now I have a
1294:11 - uh so the this usually goes to the body
1294:14 - so I'm gonna have a body element let me
1294:18 - Zoom it up a bit so they can see clearly
1294:20 - body and I'm gonna add this over here
1294:23 - nicely done and then sometimes you have
1294:26 - a hit
1294:27 - right uh where you put in things like
1294:30 - titles and stuff like that right title
1294:37 - so let me refresh you probably see like
1294:39 - this is more like it a nicely formatted
1294:42 - HTML uh document that you would usually
1294:48 - um use right so here
1294:51 - um let's come into this components and
1294:54 - add some
1294:56 - contents to the head right so what you
1294:59 - can do is you can spell uh whoa spells
1295:03 - okay and you can add things like title
1295:07 - why why you can add things like meta
1295:11 - I'm not very familiar with meta decks
1295:13 - let me try to search for One HTML meta
1295:16 - uh
1295:19 - okay this this is this sounds like good
1295:22 - enough author uh keywords
1295:26 - okay
1295:27 - um let's save this and let's take a come
1295:30 - over here and take a look at how this
1295:33 - hit would look like
1295:35 - right
1295:36 - um oh I didn't print that out so let's
1295:39 - go back to our editor
1295:42 - um here I'm gonna print out what is in
1295:44 - the hit
1295:49 - so you'll see that the heat now contains
1295:53 - um
1295:56 - this it is also a string which contains
1295:59 - everything that we just returned in
1296:02 - these felt hit element so let me copy
1296:06 - this and
1296:08 - let me try to replace this in States so
1296:12 - anything in the head will be
1296:14 - head
1296:16 - so if I ref I don't think I need to
1296:19 - refresh let me just collapse this down
1296:21 - now you see that everything is over here
1296:23 - is in the head everything in the body is
1296:26 - nicely your component so if you have uh
1296:30 - maybe you have a props that is like the
1296:32 - title
1296:34 - let's
1296:38 - and you use this props in your title
1296:43 - over here like this
1296:45 - then you could also pass in a as a props
1296:49 - and to change it so like this is server
1296:52 - sites rendering
1296:54 - [Music]
1296:56 - components API
1296:58 - and take a look here is your title right
1297:00 - you can pass in title as props and then
1297:03 - you render it inside the spell hit as a
1297:06 - title and when you call a server side
1297:10 - component API to rent a DOT render
1297:12 - function to returns then the hit will be
1297:15 - a string that contains all the elements
1297:18 - in your
1297:20 - in the render function over here and
1297:22 - HTML will be everything about
1297:27 - that is that should be that is over here
1297:29 - that is not in a spell hit every part of
1297:32 - like the body lastly you have CSS right
1297:36 - um I think we've seen CSS it's like an
1297:38 - object right uh if I come over here you
1297:40 - see CSS like an object so you just need
1297:43 - to peer focus on the code right so
1297:46 - there's code and that's map so map is
1297:48 - more like a source map it'll be useful
1297:50 - if you uh you want to debug something
1297:54 - um I believe it will be turned on if you
1297:57 - pass in the developer mode to be true
1298:01 - then you have some more debugging
1298:03 - information
1298:04 - I'm not quite sure this is my guess
1298:07 - right but I think the focus here is the
1298:10 - code so here you will come over here and
1298:13 - say uh maybe in a hit you would also
1298:16 - have uh
1298:19 - say for example a style tag
1298:22 - and then put everything in the css.code
1298:26 - inside over here
1298:29 - okay
1298:31 - uh yeah everything like this
1298:34 - so now you see the style also have some
1298:37 - inputs and this class name matches the
1298:39 - one that you added so this this has like
1298:42 - the CSS class CSS scoping built into the
1298:47 - component it's not just work on the
1298:48 - client side it also works on a server
1298:50 - side as well
1298:51 - so here now I have everything
1298:54 - um how about just you know um
1298:58 - add this let's let's save this whole
1299:02 - thing let's let's copy all this whoa let
1299:04 - me try to select all copy all this and
1299:09 - let's try to save it into a file
1299:11 - all right so public I'm gonna say
1299:14 - um SSR dot HTML let's save all of this
1299:19 - into a file let's try to open this file
1299:21 - right so let's try to visit SSR
1299:24 - and here you have it we have styles you
1299:28 - have everything nicely done
1299:30 - um of course you still don't have any
1299:31 - interaction because
1299:33 - um we haven't load any JavaScript in it
1299:35 - right this this whole uh file that you
1299:38 - see over here if you view paste sauce is
1299:40 - exactly everything that we just copied
1299:43 - uh being written from the server side
1299:46 - rendering function render function
1299:48 - right so this is
1299:51 - this is what you get
1299:53 - um so probably the next thing we're
1299:55 - going to talk about is hydration
1300:00 - today I'm going to talk about stroke
1300:01 - compiler API we know of swell is a
1300:05 - compiler
1300:06 - or kind of know about spell as a
1300:08 - compiler because I've been on and on
1300:10 - saying that you write your spell
1300:12 - component and then uh spell or transform
1300:15 - it into JavaScript right so that process
1300:17 - is called a compilation you compile your
1300:20 - code that you've written in one language
1300:23 - or something into another thing which is
1300:27 - Javascript in this case so we the spell
1300:29 - compiler compiles a component code that
1300:32 - you write into plain JavaScript that
1300:35 - browser that can execute right so most
1300:38 - of the time when we interact with felt
1300:40 - for example import get contacts
1300:43 - um import uh create event dispatcher
1300:46 - from svelt we are interacting with the
1300:50 - sort of like the client side of a uh of
1300:53 - svelte which is the runtime of svelt the
1300:56 - code that actually runs in your browser
1300:59 - but today we're going to talk about one
1301:02 - step back back which is how
1301:06 - um the the part of sveld which is the
1301:09 - compiler part how do we use it to
1301:11 - convert your spell component into
1301:14 - JavaScript code
1301:15 - all right so we're gonna take a look at
1301:17 - how we can use the spell compiler okay
1301:20 - so in most of the time you wouldn't have
1301:22 - to do this because most of the time you
1301:25 - will probably be using
1301:27 - um
1301:28 - uh some bundling tools some build tools
1301:31 - that you're using for example roll up or
1301:33 - webpack and there's already a roll-up
1301:36 - Plugin or webpack loaders that can
1301:39 - handle those for you
1301:41 - but you know it's never
1301:44 - um there's nothing wrong to learn
1301:47 - something else uh that how how these
1301:50 - plugins Works under the hood right So
1301:52 - eventually these plugins for example
1301:54 - spell roller Plugin or Rolex file Plugin
1301:57 - or spell loader in webpack under the
1302:00 - hood they're still using the spelled
1302:01 - compiler API to compile your component
1302:04 - code to JavaScript code right so we're
1302:07 - going to take a look at how that is
1302:08 - being used one of the options that can
1302:10 - be used and and probably some scenarios
1302:14 - of how you can use them right so let's
1302:16 - take a look at some examples right now
1302:19 - so here
1302:21 - on the screen that I have is a very very
1302:25 - very basic setup you can see that I have
1302:30 - on the left or I have
1302:32 - um
1302:34 - four files right so I think three of the
1302:38 - files that you just need to pay
1302:39 - attention for so the first one is the
1302:41 - component as well so this is a plain
1302:44 - this is my typical spell component that
1302:47 - you would write just a normal cell
1302:49 - component that has
1302:51 - um yeah that import forms felt that has
1302:54 - some functions templates hit and
1302:58 - everything else over here
1302:59 - so index.js is what we're going to fill
1303:02 - in later on so this is where we're gonna
1303:03 - import the spell compiler API and we're
1303:07 - gonna use it to compile our code
1303:09 - but here package.json
1303:12 - um this is very common
1303:15 - um npm uh sorry node.js setup where you
1303:18 - have a package Json where you specify
1303:20 - all dependencies so that you can use
1303:22 - them right here I specifies felt as my
1303:24 - dependencies so I'm importing's belt so
1303:27 - the first thing we're going to do is
1303:28 - we're going to import spell compiler and
1303:31 - start compiling our spell com code into
1303:34 - JavaScript so here I am going to
1303:36 - index.js and I'm going to import this
1303:39 - field compiler so this is this felt
1303:42 - compiler from oh sorry require
1303:46 - swell compiler okay and of course I need
1303:52 - to find this file so I'm going to use uh
1303:55 - f
1303:56 - I'm going to read out the content of
1303:58 - this file first so that I can compile
1304:01 - them so I am going to use FS require RFS
1304:05 - so FS is a built-in node
1304:08 - modules API that you can read content
1304:11 - from a file
1304:12 - um also I'm going to use path so that I
1304:15 - can form a path
1304:17 - for this component so here the path
1304:20 - would be
1304:22 - path to my component
1304:24 - will be path.join
1304:27 - current directory
1304:30 - Source component does
1304:34 - let's see
1304:42 - okay
1304:45 - then I would have next thing is that
1304:48 - okay hold on I oops sorry
1304:52 - let me wrap around okay
1304:56 - so next thing I'm gonna do is I'm going
1304:58 - to read the content so fs.read file
1305:02 - sync I'm going to use a synchronous
1305:04 - version of the read file so that I can
1305:06 - just uh
1305:08 - yeah or whatever everything is like one
1305:11 - line we don't have to use uh promises uh
1305:13 - deal with promises and stuff so here I'm
1305:15 - going to read the file content
1305:17 - encoding is utf-8
1305:20 - uh spell code so this is a spell code
1305:24 - that we just read out from this file and
1305:26 - then the next thing is we're going to
1305:28 - call sveld compiler
1305:31 - to compile our codes so let's take a
1305:34 - look at how we can use this so if you
1305:36 - import compiler you get a spell dot
1305:39 - compile so here's dot compile
1305:42 - and then you pass in the code
1305:45 - so this is the code
1305:48 - and then you can pass in some options
1305:50 - over here so some of these options we've
1305:53 - seen before for example like file name
1305:56 - um sorry some of not not file name but
1305:59 - some of we've seen before such as
1306:02 - um but in the in a episode when we talk
1306:04 - about asphalt options we say that spell
1306:06 - options allows us to specify some of the
1306:08 - spell compiler options so these are the
1306:11 - ones like immutable
1306:13 - accessors custom elements
1306:15 - um tag right these are the ones that
1306:18 - we've seen before so I'm gonna I'm not
1306:20 - gonna go through them but for file names
1306:22 - and names would be what will be the
1306:27 - um
1306:28 - uh class of the the name of the the
1306:33 - class name of the cell component right
1306:35 - so if you take a look at spell rapple
1306:38 - over here sorry
1306:41 - where we see that this is the JavaScript
1306:44 - output let me take a look come over here
1306:46 - we see that app is the class name right
1306:49 - so you can change this you can specify
1306:51 - what kind of class name it will be and
1306:54 - by default it will be component right so
1306:58 - um I'm not touching this but this is
1307:00 - like just to tell you like what will
1307:02 - what you get if you will change this
1307:04 - right so by default also if you don't
1307:07 - have if you don't specify a name it will
1307:09 - try to infer from file name but founding
1307:12 - by default is is now if you don't
1307:13 - specify so found it if so meaning
1307:17 - uh if you specify file name and uh
1307:21 - if you like if you specify a file name
1307:25 - for example in this case our file name
1307:26 - is the uh
1307:30 - component component that's felt
1307:34 - right uh then it probably would know
1307:37 - that
1307:38 - uh it will probably will infer this as
1307:41 - as component is the as the class name
1307:44 - right if you if our component name is
1307:47 - say tab bar then Tap bar will be the
1307:51 - class name so if you don't have file
1307:53 - name then you're based on the name that
1307:55 - you specified so Name by default is
1307:58 - component if you don't specify one if
1308:00 - not you can still change it as I say
1308:02 - name is a
1308:05 - um scrollable list right then then the
1308:09 - name will be the component class name
1308:10 - will be Scrabble list okay
1308:12 - so here we also have formats which is
1308:14 - esm or CGS this uh this will change how
1308:18 - the code will be exported right so uh
1308:22 - things like uh
1308:25 - okay you can't change it here so
1308:27 - probably we will continue and we'll take
1308:29 - a look we'll compare the uh the
1308:32 - difference of the output and then we
1308:33 - will take a look at it right so by
1308:35 - default I think we don't have to specify
1308:37 - anything
1308:38 - we can come over here because most of
1308:40 - the things has reasonable fallback a
1308:43 - reasonable sorry reasonable default for
1308:45 - example format is esm generate this term
1308:47 - and things like that so what you gather
1308:50 - from here is gonna be
1308:53 - um JavaScript CSS EST warnings variables
1308:57 - and stats so a lot of things that you
1309:00 - don't really need to know or care about
1309:01 - I think the most important one is the
1309:03 - JavaScript and CSS
1309:06 - so Jessica and CSS would be an object so
1309:10 - let's take a look let's just console off
1309:11 - for the moment
1309:13 - all right JavaScript and CSS
1309:16 - uh no let me Zoom this up a bit as well
1309:20 - okay
1309:22 - no index.js
1309:26 - okay so now you see that
1309:29 - um the JavaScript would be an object
1309:32 - that has code which is
1309:35 - the JavaScript code that you see as well
1309:38 - as a map which is like a source map so
1309:42 - Source map will help will be helpful for
1309:44 - you if you want to do debugging later on
1309:46 - right so this is the source map object
1309:49 - that you probably would want to save it
1309:53 - in a separate file
1309:55 - um yeah as a separate file
1309:58 - um then CSS will also have two uh it's
1310:01 - also an object that has code as well as
1310:03 - Source map all right so first thing what
1310:05 - we can do is now is we're just gonna
1310:07 - save the JavaScript into a file right so
1310:11 - we're gonna create I'm going to write
1310:13 - this file write file sync and I'm gonna
1310:16 - create another path
1310:18 - so half name.join
1310:23 - and I'm gonna
1310:26 - maybe called output.js
1310:29 - and then the JavaScript code
1310:32 - and
1310:34 - format is utf-8
1310:37 - right I'm gonna say for CSS file as well
1310:40 - output.css
1310:46 - okay so let's run this again
1310:51 - we're done let's open our you'll see
1310:54 - that we have
1310:56 - oops uh I think I save JavaScript code
1311:00 - into the CSS okay now let's try running
1311:02 - again
1311:03 - okay we're done I'll put CSS we have
1311:08 - we have a CSS file over here
1311:10 - okay JavaScript we have a Javascript
1311:12 - file over here
1311:14 - um
1311:17 - yeah we have everything over here let's
1311:19 - scroll all the way down
1311:21 - um yeah this is the component so by
1311:23 - default the as I said component name is
1311:26 - component right so let's try to change
1311:28 - that
1311:30 - um so I can come over here and say
1311:33 - um
1311:34 - let's think let's see our name equals to
1311:38 - fool okay if I run that again
1311:42 - okay and now you see that output is is
1311:45 - full right let me try to just open both
1311:49 - sides so that uh
1311:51 - probably we can see changing immediately
1311:54 - hopefully if we have enough space okay
1311:56 - so
1311:58 - um a big cramped maybe not
1312:00 - okay so this is one thing we can change
1312:03 - the class name and here you see that
1312:06 - it's using ES module so it says export
1312:08 - default full
1312:10 - um okay so let me interrupt for a bit so
1312:13 - you may ask me like what what does it
1312:15 - matter of the class name well
1312:17 - um most of the case it doesn't matter
1312:19 - unless probably you are using something
1312:23 - uh for some reason you um
1312:27 - uh maybe in the script module you write
1312:30 - you you have another uh
1312:34 - uh context
1312:39 - you have something else over here
1312:43 - um like a class
1312:45 - component or something then maybe you
1312:49 - are worried about conflict but I will
1312:52 - assure you that
1312:54 - um
1312:55 - it doesn't really matter
1313:02 - because uh the the name is it's like
1313:07 - it's it's based on
1313:09 - um
1313:10 - yes you you give a hint about the
1313:13 - component name but when during the
1313:15 - output it will still try to deconflict
1313:17 - and prevent prevent any conflict between
1313:20 - um
1313:22 - uh prevent any conflict between the code
1313:25 - that you write and the code that we the
1313:27 - spell compile is going to generate right
1313:29 - so you don't have to really worry about
1313:30 - that so it's mostly for nicely printing
1313:33 - out the codes where you have a nice
1313:35 - class name and also maybe when you print
1313:37 - out the instance some debugger will tell
1313:40 - you like this extends from a certain
1313:42 - class and if all the spell component
1313:45 - class that you created are all named
1313:47 - components it's a bit hard to debug I
1313:50 - would say so this is mainly for nicely
1313:52 - printing out and nicely debugging right
1313:54 - so as I was saying that this output
1313:58 - export default is es modules so you can
1314:00 - change that you can come over here
1314:02 - and make a change right so we can see
1314:06 - uh this is part of the format so now if
1314:09 - I change it to format to CGS common GS
1314:12 - now if I run this again
1314:15 - you see that the output now change to
1314:17 - common.js right previously it's export
1314:19 - default
1314:20 - um something now it's exports.default
1314:22 - equals to something this is the common
1314:24 - JS export so you still get not default
1314:29 - so that when you import no matter
1314:31 - whether you are importing from a common
1314:34 - GS file or like um
1314:37 - yes modules I think your bundler will
1314:40 - know how to handle this case where uh
1314:42 - components will still be the dot default
1314:45 - export so it could be the named defaults
1314:47 - or like actual default export from es
1314:50 - modules
1314:52 - so next we have generates I think we've
1314:55 - seen this before the last video when we
1314:57 - talked about server side rendering so
1314:58 - this would depend or will
1315:01 - um
1315:02 - will allow us to specify whether we are
1315:05 - generating for a server-side rendering
1315:06 - so SSR
1315:11 - so this is a service ironing code or it
1315:14 - should be a
1315:15 - code that run on the client side on the
1315:17 - browser right so by default is Dom okay
1315:21 - so
1315:22 - um we have some Dev this is to turn on
1315:24 - or turn off some of the
1315:26 - um
1315:28 - uh debugging code that you have so for
1315:32 - example if you use add debug or if you
1315:34 - are using a spell Chrome extension to do
1315:38 - a spell debugger
1315:40 - um this actually will when you turn this
1315:43 - on by default actually it has some sort
1315:46 - uh will add extra code for you to for
1315:49 - for the for your code to talk to the uh
1315:53 - swell Chrome extension
1315:56 - um so here we have we've seen yeah I
1316:00 - think it's best for me to just also show
1316:03 - you that
1316:05 - what are those codes so if I def equals
1316:07 - to true
1316:09 - I think it's true by default
1316:12 - but
1316:13 - um over here you'll probably see like
1316:15 - things like add location
1316:17 - uh things like insert depth so it's a
1316:21 - developer a Dev version which when you
1316:24 - call this function internally it will
1316:26 - also inform the
1316:30 - uh Chrome extension that oh you're
1316:32 - inserting some elements over here uh
1316:35 - there's also some Dispatch they have
1316:38 - some some Dev uh some communication is
1316:41 - happening from your code to the swell
1316:43 - Chrome extension right so if you specify
1316:46 - this as false which you should if you
1316:49 - are building for production
1316:54 - then all this code will be will not be
1316:58 - generated right so you you don't have
1317:00 - this yeah all those codes will not be
1317:02 - generated will not be inserted into your
1317:04 - compile code
1317:06 - right so here um
1317:08 - you can also have this flag turn on
1317:11 - called Legacy so this will try to
1317:13 - generate uh try as as much as possible
1317:16 - to generate code that will also work in
1317:19 - ie9 and IE10 so try not to generate
1317:22 - codes that is uh
1317:26 - so this okay so so there's a difference
1317:28 - between using this and using Babel for
1317:31 - you to do Transportation right so uh
1317:34 - this will only ensure that the code that
1317:36 - smell generates spelled injects
1317:39 - will also works in I9 and IE10 but if
1317:43 - you are yourself writing
1317:46 - syntaxes that is not supported in 9910
1317:49 - for example if you are writing optional
1317:51 - chaining for example uh those will not
1317:54 - be converted to support for I9 and A10
1317:57 - you will need to pass this code that you
1318:00 - have for example right now it's
1318:02 - outputting a JavaScript code right so
1318:04 - this code will be uh what we will inject
1318:08 - some of the Spells code so those will
1318:09 - work for I9 and 10 but the code that you
1318:12 - write will also be copied verbatim so
1318:16 - so we don't do any transformation for
1318:18 - those code except for like reactivity
1318:20 - and stuff right so here if you have code
1318:23 - that is written for I like newer
1318:27 - browsers and you want to support all the
1318:29 - browsers Legacy browsers then your
1318:31 - JavaScript code over here you probably
1318:33 - will have to come over here and maybe do
1318:35 - a Babel transform
1318:37 - [Music]
1318:39 - sync with a JavaScript code and you get
1318:42 - a transform
1318:43 - [Music]
1318:46 - yeah maybe a trans like a Babel
1318:50 - transform over here and you write this
1318:52 - to your your to the output right so if
1318:56 - you so this will help you to transform
1318:59 - the rest of the code that you write into
1319:02 - uh to JavaScript code that uh ie9 or 10
1319:06 - or any browsers that you're targeting
1319:08 - that supports them right so uh in this
1319:11 - example I'm not going to show here I'll
1319:13 - just leave it as it is
1319:15 - okay so the rest of the options are I
1319:18 - think you've seen before uh most of the
1319:21 - things are
1319:22 - uh pretty much
1319:25 - um
1319:26 - self-explanatory like the file name
1319:28 - output file name CSS Apple file name
1319:30 - that's felt path so this felt path
1319:32 - itself is interesting because this right
1319:34 - if you come over here and take a look at
1319:37 - the output code it is importing from
1319:40 - svelt right it's spelled internal
1319:42 - spelled and spelled right so this uh
1319:46 - assumes that
1319:47 - um spell is available at this current
1319:49 - location that you are putting a code to
1319:51 - right so for example and this is okay
1319:54 - and most of the case when you are using
1319:56 - a bundle because this uh but the bundle
1319:58 - will know how to look for a Sprouts in
1320:00 - our case also I think we reinstall in no
1320:03 - module so this is okay for us as well uh
1320:07 - but in rare cases that maybe yours felt
1320:10 - um is in some other folders that you
1320:13 - somehow
1320:14 - for some reasons okay you can change
1320:16 - that you can come over here and say
1320:18 - spell path equals to
1320:21 - um XXX right just just for demonstration
1320:25 - then you'll see that now instead of
1320:28 - importing as well you're importing XXX
1320:30 - internal so if you have a custom version
1320:32 - of svelt or your spell is in certain
1320:35 - folder somewhere then you can have this
1320:38 - you can change this and
1320:40 - and the rest of the code is still like
1320:43 - like normal that how cell generates
1320:45 - right so here if we take a look at when
1320:47 - we are generating for Dom you'll see
1320:49 - that there's a function called at CSS
1320:51 - this uh will try to add the CSS into so
1320:56 - this this function will be run when you
1320:58 - are mounting your component and this
1321:01 - function will try to add a style element
1321:04 - with the CSS that uh
1321:07 - that it's generating right but we really
1321:10 - have an output CSS file as well right or
1321:13 - this will also give us a CSS code that
1321:16 - we can write in a CSS file as well so
1321:18 - it's up to us whether we want to have
1321:20 - the CSS as like a separate file or or
1321:24 - just let the JavaScript to just do it
1321:26 - right so if by default the JavaScript
1321:29 - code that the slot generates will also
1321:31 - take in charge of adding CSS to the Dom
1321:34 - so you don't have to worry about that uh
1321:38 - so yeah but then if you don't want that
1321:40 - you don't want that extra could uh thing
1321:43 - that you've been generated by JavaScript
1321:44 - you don't want JavaScript to insert CSS
1321:46 - but rather you have an external you you
1321:50 - want to get a CSS output and save an
1321:53 - external file and include this CSS file
1321:56 - in your HTML right if you want to do
1321:58 - that then what you need to do is you're
1322:01 - going to come over here and specify CSS
1322:04 - to false
1322:06 - right so this is this option it says
1322:08 - over here CSS false then you will not be
1322:12 - included in the JavaScript so if I run
1322:15 - this probably see that
1322:19 - now you don't have the CSS function over
1322:22 - here right we don't the jet skill will
1322:24 - not take care of adding CSS but of
1322:27 - course your your component is Right will
1322:30 - still have
1322:32 - the class names right those those are
1322:35 - scoped class names so it's up to you to
1322:38 - figure out how when you want to load
1322:40 - your CSS so you still can get your CSS
1322:43 - output from here and you know try to
1322:45 - write in a file or do whatever you want
1322:47 - with it but just make sure that you have
1322:50 - it available so that at least your
1322:53 - component is style right
1322:55 - uh there's another function called CSS
1322:58 - hash so this one
1323:01 - if you take a look over here it says
1323:03 - that it's a function that takes in a
1323:04 - hash CSS name and file name and you
1323:07 - should return some a string right so
1323:10 - what this means so over here you see
1323:13 - that CSS uh to to do a scoping we add
1323:16 - some Spell customs felt hash class names
1323:20 - to your elements right and here is a
1323:22 - spell Dash and blah blah right so this
1323:25 - this hash is generated
1323:28 - um
1323:29 - uh based on it's a hash
1323:33 - of your code that you you written so
1323:36 - every time when you change your code it
1323:37 - join a different hash right and and some
1323:40 - people doesn't like the prefix call
1323:42 - spell Dash prefix so you can change that
1323:44 - uh so this is a CSS hash uh function
1323:48 - that can change these class names right
1323:50 - so it's a function that that's not so
1323:53 - you you just Implement you you specify a
1323:55 - function that returns a string and that
1323:57 - string will be used
1323:58 - um will be
1324:00 - will be used in States
1324:02 - that that string will be used instead of
1324:05 - the the default class name that provides
1324:07 - right so by default a hash is a function
1324:10 - and you can pass in a CSS or whatever
1324:12 - and then you generate this right this is
1324:14 - the default uh spell class that spell
1324:17 - generates but you can change that so for
1324:20 - example I'm gonna say I don't care about
1324:22 - hash I don't care anything I just want
1324:24 - my all my class to prefix with uh x y z
1324:29 - okay but you have to be careful with
1324:31 - this so everything prefix if x
1324:33 - everything will be x y z
1324:36 - okay uh let's take a look over here
1324:39 - so all your special scope class name
1324:42 - will be x y z and when I say you have to
1324:45 - be careful is that now if you have
1324:47 - multiple components that has this class
1324:50 - name then they are not scoped to just
1324:53 - one component anymore because all the
1324:55 - components share this special unit class
1324:57 - name right previously this class name
1324:59 - also includes a hash that is unique to
1325:02 - this component because it's generated
1325:04 - based on this component based on the
1325:06 - code that you write you've written for
1325:08 - this component so if you don't have that
1325:10 - stand
1325:11 - um yeah it's it's a bit uh you have to
1325:14 - it's a bit worrying that your scoping
1325:17 - may not work right so by the uh so it's
1325:20 - recommended that you use the hash
1325:23 - function to generate some hash right so
1325:26 - you have a hash you have CSS you have
1325:29 - name and file name right so this name
1325:31 - and file name is the one that being
1325:33 - passed over here previously we say we
1325:35 - can specify name and file name right uh
1325:38 - of course
1325:39 - so here we're gonna say this plus uh
1325:43 - maybe a hash CSS
1325:47 - all right let's try run
1325:50 - oops
1325:52 - let's see so at least now you have some
1325:54 - hash in injected as well or maybe you
1325:58 - don't even you don't like xyzing you can
1326:00 - total it's totally up to find so this is
1326:03 - customizable it's really up to you what
1326:05 - you want you can have a hash only uh and
1326:09 - if you find that hash hash is too long
1326:12 - you can change it but you have to be
1326:14 - careful right
1326:15 - um just make sure that there's enough
1326:18 - characters to make sure that the
1326:21 - Collision the possibility of collision
1326:23 - is very very low right if you only have
1326:26 - like one character imagine you only uh
1326:28 - have like a to z and one to zero to nine
1326:32 - that's like 36 characters and it's very
1326:35 - high probability like 1 in 36 chance to
1326:37 - get Collision all right I hope I get my
1326:40 - match correct so anyway
1326:43 - um oh okay I think my match should be
1326:45 - every as long as my pigeonhole principle
1326:48 - more than 36 if you have 37 components
1326:50 - then you will have one two components
1326:53 - that will have Collision right so uh
1326:55 - here we have some um
1326:58 - other flags that are just uh for
1327:01 - developer uh that is turned on for
1327:03 - developer mode for example Loop got
1327:07 - timeout this one is we added this for
1327:10 - the repo for example if you
1327:12 - um
1327:14 - for example accidentally added a while
1327:16 - look that never ends this will try to
1327:18 - throw an error for if your Loop goes uh
1327:22 - um goes more than like how many cycles
1327:25 - or something like that right so this
1327:26 - will oh if your Loop goes more than like
1327:29 - a certain period of time so this guards
1327:31 - the the loop so um yeah you want to have
1327:36 - this if you have a look if you
1327:39 - just in case your your code will like
1327:43 - in finite looping and freeze up the
1327:45 - whole browser
1327:46 - but this is mostly for developer
1327:49 - potentially right because once you your
1327:51 - code is written you you tested it most
1327:53 - likely you don't have any infinite Loop
1327:56 - happening right I believe I believe in
1327:58 - you
1327:59 - so uh here are some other things like
1328:01 - say whether you want to preserve a
1328:03 - comments or you want to preserve some
1328:04 - white space in between elements and
1328:06 - things like that and I think that's
1328:08 - mostly of most of the options that you
1328:12 - can do with uh your spell compile
1328:17 - the last video we talked about spell
1328:19 - compiler API and this video I'm going to
1328:21 - talk about spelled pre-process
1328:24 - so um in a spell compiler API will learn
1328:28 - that we have a function called
1328:29 - spell.compile which takes in the spell
1328:32 - code in string that you write and it
1328:35 - will return an object that has like
1328:37 - JavaScript and CSS which you can use it
1328:40 - and write in a file or use it somehow
1328:42 - right so
1328:44 - um you you take self code that you write
1328:46 - and it transforms to spell to JavaScript
1328:48 - code
1328:49 - but sometimes the spell code you write
1328:51 - it's not actually it's spelled code per
1328:54 - se for example uh as well expects that
1328:57 - the code you write is in normal CSS code
1329:00 - and also like normal JavaScript code and
1329:03 - HTML but sometimes you are lazy or you
1329:06 - want to use some tools that you have for
1329:09 - example like typescript or you want to
1329:11 - write a says or less instead of normal
1329:13 - CSS or you want to use park instead of
1329:16 - normal HTML then you want to pre-process
1329:20 - your code before you pass that code that
1329:23 - you have into
1329:24 - this filter compile function so imagine
1329:27 - your code whatever you write spark CS
1329:30 - says less subscript or coffeescript the
1329:34 - code you write over here on the on your
1329:37 - on the left so this is my right spot I
1329:40 - know this will be reflected on your left
1329:43 - um whatever you write you have to pass
1329:45 - you have to transform them into normal
1329:48 - code which is just HTML CSS and
1329:51 - JavaScript and then use felt the compile
1329:53 - to transform that into JavaScript and
1329:56 - CSS right so this step from whatever you
1329:59 - write to HTML JavaScript and CSS
1330:02 - um you can do it yourself you can just
1330:04 - transform yourself or you can use
1330:07 - pre-process which is a helper function
1330:10 - that extracts out
1330:12 - um pieces uh it will break your code
1330:15 - into pieces into like CSS uh not CSS it
1330:19 - will break into the style text script
1330:22 - tags and markup everything that you
1330:24 - write
1330:25 - and you break them down into pieces so
1330:28 - that you can
1330:32 - um
1330:32 - so that you can transform each part
1330:35 - individually if you want
1330:37 - right so let's take a look at an example
1330:39 - over here so here we have the code that
1330:42 - we we just written for as well compiler
1330:44 - API so we we read all the code from
1330:46 - asphalt code from a file and we pass
1330:49 - that file directly into our search
1330:51 - compiler right so say for example right
1330:54 - now let's remove everything from the
1330:56 - slope
1330:57 - component that we have that except we
1331:01 - just left with normal script tag style
1331:04 - tag and some HTML right so first thing
1331:07 - is maybe we don't want to write a script
1331:09 - tag we want
1331:11 - um
1331:12 - let's see okay let's let's just try to
1331:15 - write some basic CSS right let's Stitch
1331:17 - equals that name
1331:20 - equals to over here I will say I want to
1331:24 - have
1331:25 - like a global variable uh which I want
1331:27 - to be injected when we were uh by some
1331:31 - process right so maybe I have a value
1331:33 - that I I only would know during
1331:36 - composition process so here I'm going to
1331:38 - replace it with a placeholder like uh
1331:40 - maybe using this right so name
1331:45 - um using a percentage sign okay so this
1331:47 - as you can see I have some red underline
1331:49 - You by by the looks of it you know that
1331:52 - this is not a valid JavaScript code
1331:53 - right you can't have a variable name
1331:55 - that starts with a percentage so
1331:58 - um
1331:59 - and then we have HTML code so here I'm
1332:02 - going to have a div tag
1332:05 - that that restart name right so here we
1332:09 - want to
1332:10 - um take this code read this piece of
1332:12 - code and then we're going to process it
1332:14 - we want to transform it into a normal
1332:16 - JavaScript uh sorry a normal Circle and
1332:19 - then only pass it to spell compile
1332:20 - because if I just take this read this
1332:23 - code oh this file and pass it to spell
1332:25 - compiler uh what you see that is that it
1332:29 - will have a past error because the code
1332:31 - you just written is not a valid
1332:33 - JavaScript code so let's see so here we
1332:36 - read this file out it's a normal code so
1332:38 - what we can do is we can
1332:41 - um
1332:42 - process I'm going to have a new variable
1332:44 - called process code equal to 0 could
1332:48 - not replace
1332:52 - uh this thing
1332:55 - into
1332:58 - whoops
1333:01 - into valid string so here I'm going to
1333:04 - say it has hello world okay
1333:08 - now uh if you try to look at this
1333:11 - process code you realize that we have
1333:12 - replaced this percentage into a string
1333:17 - and hopefully that will be that will end
1333:20 - up with a valid JavaScript code in the
1333:21 - script tag so if you run this now
1333:25 - hold on okay we need to pass this in as
1333:28 - well I run this now
1333:34 - replace
1333:36 - let's see what do I missed
1333:39 - um
1333:46 - okay so most likely we don't have CSS
1333:48 - that's why this is this is throwing an
1333:50 - error okay
1333:51 - now we run everything works if you come
1333:55 - over here and take a look at the output
1333:57 - JavaScript code we'll take a look at the
1333:59 - code over here you see that the name is
1334:01 - now replaced to hello world and
1334:03 - everything still works right so
1334:06 - um of course this is
1334:09 - you so this is the essence of
1334:12 - pre-processing you have your code you
1334:16 - run through a function in this case a
1334:19 - function that we're going to run through
1334:20 - is replace like name and then we pass
1334:23 - the preprocess code to the cell compiler
1334:28 - right so sometimes it's not as
1334:30 - straightforward as this sometimes your
1334:32 - code itself the entire piece of code is
1334:34 - is written in like say typescript or
1334:37 - coffeescript that you can't really uh do
1334:40 - like just a normal replace you will have
1334:42 - to go through like they are compiler to
1334:44 - transpile it out to just normal
1334:46 - JavaScript then you probably would want
1334:48 - to have this function called a
1334:50 - preprocess so sveld compiler has a
1334:53 - function called preprocess
1334:56 - that's again taking our string
1334:59 - and taking a list of preprocessors
1335:03 - okay uh it could be an array or it could
1335:06 - be an object and this will again return
1335:09 - us a process code
1335:18 - okay let me comment this out okay
1335:20 - Returns the process codes so
1335:23 - here in a pre-process what you
1335:27 - what you pass in is an array
1335:30 - of objects so each of this object is
1335:33 - called a preprocessors and this over
1335:36 - here you can
1335:38 - this object itself can be a
1335:42 - can have three properties one is the
1335:44 - markup
1335:46 - or the
1335:48 - style or the script so individually each
1335:53 - of this is a is a function that takes in
1335:56 - the code just in the script tag and
1335:58 - transform it out right so uh what is so
1336:01 - let's take a one example I'm going to do
1336:04 - here I have this you know we said about
1336:07 - this is is have in our script tags but
1336:12 - we also have the same
1336:13 - text over here in HTML so we want to
1336:17 - handle only the case in the we only want
1336:19 - to trans uh replace it okay so let's
1336:23 - let's do this
1336:26 - we want to replace if it's in a script
1336:28 - tag but not replace it if it's in the
1336:30 - HTML
1336:32 - so what we can do here is that we can't
1336:34 - really rely on replacing all anymore
1336:38 - but rather we have to come into a
1336:40 - pre-process serve preprocess part and we
1336:44 - only do we only transform in the script
1336:46 - parts right so here it takes in a
1336:49 - Content which is the codes
1336:52 - so it's a function so this is a function
1336:57 - so taking contents and we're going to
1336:58 - replace the content right so we're going
1337:00 - to use the same code over here and do a
1337:02 - replace
1337:06 - and now we then that's it that's like a
1337:10 - simplest preprocessor that I can think
1337:12 - of now you have a pre-process code and
1337:14 - you pass it on the compiler and now we
1337:17 - run it through
1337:19 - hold on it must be a string
1337:21 - okay and then pre-process code is
1337:24 - oh it's a promise okay
1337:27 - now I need to uh okay so I have done
1337:36 - uh value
1337:40 - okay I'm gonna copy all this shove all
1337:42 - this in
1337:50 - so value like code is the code
1337:54 - so value is an object that has a code as
1337:57 - well as a source map so that Source map
1338:00 - can works or can map back to the
1338:03 - original code before you do a
1338:05 - pre-processing okay so for now we just
1338:08 - for Simplicity we just pass in the codes
1338:10 - in
1338:11 - uh let's
1338:13 - going on
1338:19 - that's oh I need to return this right
1338:24 - and what you return is actually going to
1338:26 - be
1338:28 - um
1338:28 - object as well
1338:31 - and you should return a object with
1338:34 - content
1338:36 - right so it says over here that sorry
1338:39 - not contents code
1338:42 - it says over here that your preprocessor
1338:45 - should return
1338:49 - um
1338:51 - if you return the object with a code
1338:53 - property that represents the transform
1338:57 - code right so here let's run again and
1339:00 - we are done and let's take a look at the
1339:03 - output which we have Hello World being
1339:06 - transformed over here at the same time
1339:08 - in the text content you still see like
1339:10 - the normal percentage percentage name
1339:12 - right so
1339:13 - um if you try to log out from here you
1339:16 - try to console out from here you notice
1339:19 - that the content will just only uh
1339:21 - having the contents in the script tags
1339:25 - so this is how you would probably use
1339:27 - this spell preprocessors
1339:30 - um because then you probably would have
1339:32 - to handle like uh like and so so you can
1339:35 - write your own preprocessors if you like
1339:37 - too right so it's not just about
1339:39 - contents what you get over here is also
1339:42 - attributes so attributes is all the
1339:45 - attributes that's available on the
1339:48 - script element here so for example uh
1339:52 - sometimes you know we don't want to
1339:54 - transform all the script tags uh it
1339:57 - depends on maybe say a language is it a
1340:00 - typescript a coffee or you have some
1340:03 - other things like contacts also special
1340:06 - things like that and you only want to do
1340:09 - a pre-processing for
1340:11 - um code that has this attribute script
1340:14 - tag that has only this attribute if you
1340:16 - want to do that then what you can do is
1340:19 - you can come over here and check the uh
1340:25 - attributes right so say for example uh
1340:28 - maybe I have attribute say name
1340:31 - equals to special so this attribute is
1340:34 - what we're gonna read from this
1340:36 - attribute and actually we're going to
1340:37 - replace percentage percentage name with
1340:40 - this name right so for some reasons you
1340:43 - already know it but you just want to use
1340:44 - it over here and you want to replace
1340:46 - everything from here to here so what we
1340:48 - can do is we can't
1340:51 - um
1340:52 - check attributes dots
1340:56 - name this will give us a value so this
1341:00 - will gonna replace it over here instead
1341:02 - and this is the string itself right and
1341:06 - we can't just put in a string if we just
1341:08 - put in a string like this what you'll
1341:11 - get is
1341:14 - um
1341:15 - what you get is
1341:18 - special like like a variable right but
1341:20 - what you want is actually like just a
1341:23 - string so we're gonna do a Json string
1341:25 - G5
1341:26 - as in a spring literal that directs with
1341:29 - a quartz sign so now if you drive run
1341:34 - again now we see our code will have name
1341:37 - equals to special
1341:39 - right so here you can read
1341:41 - um attributes and most of the times it
1341:44 - will also some people would like to do
1341:46 - is it will check say for example
1341:48 - attributes the type uh language is
1341:52 - typescript only then we do some
1341:54 - transformation or else we just leave it
1341:56 - alone and things like that right so you
1341:59 - should also you could probably see some
1342:01 - examples over here as well like if it's
1342:04 - if it's attribute this language it says
1342:07 - then we we return we don't do anything
1342:08 - if it's not sense we don't know anything
1342:10 - and the rest will be like pre-processing
1342:13 - for for sales right so here um
1342:16 - uh you see that this is how you would
1342:20 - write your own preprocessors and code is
1342:24 - just one of the
1342:26 - um
1342:27 - uh
1342:29 - property that you can return you can
1342:31 - also return one thing that's called
1342:33 - dependencies so here optional array of
1342:37 - dependencies so dependency should be an
1342:39 - array of files that
1342:42 - um
1342:43 - that you return from from the process
1342:46 - code right here process code actually
1342:48 - will have not just
1342:51 - code you can also have
1342:54 - dependencies right this will be an array
1342:57 - that combines all the dependencies for
1342:59 - all the preprocessors so um in our case
1343:02 - we don't really need uh this this array
1343:05 - is useless to us but in some cases it's
1343:08 - useful for uh your bundles for example
1343:11 - roll up a webpack because they want to
1343:13 - know like what your file is depending on
1343:16 - right it's not just depending on the
1343:18 - current file itself it also maybe
1343:19 - depending on some config file some of
1343:22 - the files so for example if your if
1343:25 - you're writing a preprocessors and you
1343:27 - uh
1343:29 - uh you read the name like this name from
1343:33 - some files then you probably also have
1343:35 - to specify the the the path of the file
1343:38 - so that every time when someone change
1343:39 - that file
1343:40 - um your bundler will know that it will
1343:42 - have to
1343:43 - um go come over here again and run
1343:46 - through the previous process again and
1343:47 - update so that it will pre-process again
1343:50 - and up have an updated name for your
1343:53 - component right updated value for this
1343:55 - name right so dependencies will be that
1343:57 - array that you specify like what other
1343:59 - files will depend on so another example
1344:02 - would be say you are using Tailwind you
1344:05 - pre-process Tailwind in your CSS and you
1344:08 - will want to specify Tailwind config as
1344:11 - your dependencies so every time when you
1344:13 - change the Tailwind config like changing
1344:14 - like the font some colors then the your
1344:18 - bundle would know that oh
1344:20 - um all the files are depending on that
1344:22 - config will have to be recompiled have
1344:24 - to be run through the preprocessor again
1344:25 - and and that's where this dependencies
1344:29 - array will be useful for you
1344:31 - so uh we we've seen how um how we can do
1344:35 - with scripts but it will be the same for
1344:37 - style and a markup
1344:39 - right so that I will not go too deep on
1344:42 - that anymore I'm gonna not gonna show
1344:44 - any examples
1344:46 - um so this is this felt compiled a
1344:48 - pre-process is only uh useful if you are
1344:52 - like me then write this code and show
1344:54 - you an example but most of the case this
1344:56 - pre-processors pre-process function will
1344:59 - be called the same way as how the spell
1345:02 - compiler compile will be called by the
1345:05 - plugin for your bundles say for example
1345:07 - spell rollout Plugin or like spelled
1345:09 - loaders right so
1345:11 - um in in those loaders or plugins
1345:15 - usually they have a few called
1345:17 - pre-process that you can pass in
1345:19 - preprocessors so that is where you can
1345:22 - pass in this object into that option
1345:26 - right so it's still useful to know that
1345:30 - um how to write like one preprocessors
1345:32 - and you can try it out with a spell
1345:34 - compiler and try it out yourself but
1345:37 - usually you wouldn't want you most cases
1345:40 - you wouldn't call pre-process directly
1345:43 - and you would let your uh
1345:47 - bundles plugins like Plugin or spot
1345:51 - loaders to do that for you
1345:55 - in this video we're going to talk about
1345:56 - hydration so we have talked about how we
1345:59 - can use client-side component API
1346:01 - server-side component API we talk about
1346:03 - compilers API and naturally I'm not sure
1346:07 - whether it's natural but we are going to
1346:09 - talk about hydration so what is
1346:11 - hydration
1346:13 - um and how do we use hydration in
1346:14 - Sprouts well we're gonna check that out
1346:16 - okay so what is hydration so hydration
1346:20 - is a process where you have uh content
1346:25 - in HTML that is coming from the server
1346:27 - be it rendered dynamically whenever
1346:29 - there's a new request or the HTML has
1346:32 - already generated ahead of time via
1346:34 - pre-rendering and you get this HTML
1346:37 - download it to your browser and it
1346:39 - creates all the Dom elements right so
1346:41 - you already have existing Dom Elements
1346:43 - which is the same elements that you
1346:45 - might have or you could have or you
1346:48 - would have created using uh on a client
1346:50 - site uh you over by your cell components
1346:54 - so instead of recreate like instead of
1346:57 - recreating elements
1346:58 - um you look at the existing Dom elements
1347:00 - and say hey actually they are the same
1347:02 - element we are going to use this
1347:04 - existing Dom elements instead of
1347:06 - creating everything from scratch then uh
1347:10 - you would do the process called a
1347:12 - hydration in which you kind of find
1347:14 - you'll try to go through on elements in
1347:17 - your template that you are supposed to
1347:19 - create and instead of creating them
1347:21 - you're referring you're you're pointing
1347:23 - a reference to elements that's existing
1347:25 - existed on the Dom
1347:27 - and later on when there's interactions
1347:29 - you since you already have the reference
1347:32 - or Dom you can immediately later on you
1347:35 - can immediately make changes to it or
1347:38 - react to any user interactions so that
1347:41 - is in essence uh how what is a hydration
1347:44 - and in this video we're going to take a
1347:46 - look at how we can use how we can do
1347:49 - hydration in svelt are you ready okay so
1347:53 - here I have my component written ahead
1347:56 - of time so I have two props name and
1347:59 - language at the same time the name is
1348:02 - actually a state where I bind and inputs
1348:06 - to this name variable right so you can
1348:09 - see I will expect this when on the
1348:12 - client side when I hydrate I still have
1348:15 - my own the same input and I can make
1348:17 - changes to the input
1348:19 - and over here I have some elements that
1348:22 - shows the content
1348:24 - um based on whatever the data that we're
1348:26 - getting
1348:27 - so uh first thing of hydration is you
1348:31 - probably want to render this out in the
1348:34 - server side right you you want to have a
1348:37 - way to generate a HTML first and then
1348:39 - you serve that HTML user so here what
1348:41 - I'm going to do now is that I'm going to
1348:43 - come over here in next year's and I'm
1348:45 - gonna write all that out right so first
1348:47 - is I'm going to import this felt
1348:49 - compiler uh from spell compiler
1348:54 - um
1348:56 - so here I'm gonna write out
1348:58 - um the raw process the manual process
1349:00 - that you you might uh you would have to
1349:02 - write if you are not using any framework
1349:04 - such as um swiper or in future maybe
1349:07 - spell kit right this is what is being
1349:10 - done under the hood I'm gonna take a
1349:12 - look at like the the raw way of doing
1349:14 - things right so we have a spec compiler
1349:16 - and we're going to compile our code
1349:19 - um uh using a Target to SSR so so that
1349:22 - we get a function and we can call this
1349:25 - function to get us a HTML right so first
1349:28 - thing is I'm going to call spell
1349:30 - compiler dot render uh dot compile
1349:34 - and when you pass in the code right so
1349:37 - first is we so we need to read our code
1349:39 - so we're going to use import file system
1349:43 - from node API and as well as a path
1349:47 - so that we can read out the path
1349:51 - um so our source code would be here uh
1349:53 - path to component is path.join
1350:03 - okay
1350:05 - okay and then we're gonna read out the
1350:07 - source code so code equals to read file
1350:12 - sync so I'm going to use a synchronous
1350:13 - version of the read file so that I don't
1350:16 - have to away from anything I can just
1350:18 - like read it out so I'm gonna pass in a
1350:21 - path to components and encoding would be
1350:24 - UDF
1350:28 - so here I'm going to pass in this code
1350:30 - in and I'm going to specify my targets
1350:32 - uh no I think it's called generate to
1350:36 - SSR so we're going to generate an SSR
1350:38 - code and also most importantly because
1350:40 - we want to do hydration we also need to
1350:43 - pass in a flag called hydratable to be
1350:45 - true
1350:46 - so this will generate uh the function
1350:49 - the that the function that we end up
1350:51 - getting that will return as a HTML will
1350:54 - be a hydratable HTML so uh cell may do
1350:57 - some optimization or add some reference
1350:59 - here and then
1351:01 - um so that it's easier for us to find
1351:03 - out where the element is later on when
1351:05 - we want to hydrate this um from this
1351:08 - from the HTML that is being returned
1351:10 - from our code right here uh if you take
1351:13 - a look
1351:14 - we have just cut and CSS
1351:19 - I think we can leave the CSS alone and
1351:22 - get the JS and so now js.code
1351:27 - uh would be the
1351:29 - code outputs that uh it's a function
1351:32 - that there's a function right so what we
1351:35 - can do is we are going to
1351:38 - um
1351:39 - take this phone uh take this piece of
1351:41 - code okay so first is let's take a look
1351:44 - at what this is
1351:51 - right this is a piece of
1351:56 - code
1351:59 - um JavaScript codes
1352:01 - that is compiled using SSR mode right
1352:05 - um probably we would let's see
1352:09 - yeah so
1352:10 - um
1352:11 - we have to call this we will have to
1352:14 - treat this as a module and then call it
1352:16 - later right so I think the easiest way
1352:18 - is we're gonna write this piece of code
1352:20 - into a file and then we execute the file
1352:22 - later on so I'm gonna do that so
1352:25 - right
1352:28 - file sync and then they wanna say
1352:32 - path.join
1352:37 - um
1352:39 - oh
1352:42 - uh
1352:44 - component.ssr.js so we're gonna write
1352:47 - this content into a file and we're gonna
1352:50 - import it later on
1352:51 - so this file is
1352:54 - um see it's an es module and right now
1352:56 - we are running in common.js so probably
1352:58 - we also say the uh out
1353:02 - what's that
1353:08 - uh we need the option call let's see
1353:21 - formats right we're gonna change our
1353:23 - formats to
1353:28 - CGS I'm going to write this file
1353:31 - the this this the JavaScript code that's
1353:34 - generated into a file
1353:36 - so if I run this
1353:39 - you'll see that now we have a new file
1353:41 - called component SSR which is in
1353:43 - common.js and probably we can run it so
1353:47 - the way you run it is to just require it
1353:50 - right so probably I will save this path
1353:53 - as a
1353:54 - path to SSR code
1354:04 - um so
1354:06 - SSR component
1354:10 - and remember we use a Xbox on defaults
1354:14 - right so we can probably we need not
1354:16 - default to get this
1354:18 - value
1354:19 - now if you console out SSR
1354:23 - components it will be the SSR you'll be
1354:26 - object with a render function right so
1354:28 - we're going to call this render function
1354:30 - to render
1354:31 - um to render our component into a HTML
1354:34 - code and glass so now we're gonna
1354:38 - call this
1354:40 - render
1354:41 - and I'm going to pass in some props so
1354:43 - the first so here if we took a look at
1354:46 - our code there's two props name and
1354:48 - language so I'm going to say uh name
1354:51 - would be
1354:53 - uh
1354:55 - Scout and language
1354:58 - it's also called sprouts
1355:00 - right okay maybe name is the how Okay so
1355:04 - we're gonna call render and this
1355:07 - will return us
1355:11 - um
1355:13 - some contents right so if you take a
1355:16 - look at server side component API this
1355:18 - is the results result will return us
1355:20 - ahead the HTML and the CSS
1355:22 - right so he HTML and CSS so we're gonna
1355:26 - piece all this together and then we'll
1355:30 - um
1355:31 - to form HTML content I'm gonna send that
1355:35 - contents to a user right so here we're
1355:37 - gonna what we're gonna do is we are
1355:40 - going to firstly
1355:42 - okay so I wanna my plan is I'm gonna
1355:44 - write this HTML file into a folder
1355:46 - called public
1355:48 - um so that later on we're gonna open
1355:50 - this folder right so this folder will be
1355:52 - uh I'm gonna create this folder now
1355:55 - public
1355:56 - so this folder will have our HTML file
1355:58 - and later on we're going to compile the
1356:00 - JavaScript code uh and we're gonna
1356:02 - include that JavaScript code in this
1356:05 - public folder as well so here we're
1356:07 - gonna say a
1356:09 - let's see
1356:10 - okay so the
1356:14 - output HTML would be looks like this so
1356:18 - we have a HTML
1356:21 - and then we have a hit this is where we
1356:24 - put in the hit content
1356:28 - and also we can have some Style
1356:30 - this is where we put in our CSS
1356:35 - and then we have okay
1356:38 - I think style text should be placed
1356:41 - inside the head
1356:45 - all right let's say format it okay and
1356:48 - then we have a body
1356:50 - and I guess that's where we'll put in
1356:52 - our HTML con our
1356:55 - our HTML content right so here if I
1356:58 - output HTML that looks like this and
1357:00 - we're gonna write this HTML output to a
1357:04 - file inside public folder right so I'm
1357:07 - gonna do that now so
1357:09 - um write file sync
1357:12 - path dot join
1357:16 - public
1357:20 - index.html
1357:22 - content
1357:28 - all right so we're going to write this
1357:29 - file into a HTML
1357:32 - file into the index HTML right so when I
1357:34 - run this
1357:36 - see that now I have a new file over here
1357:39 - and I have all our content so
1357:43 - ah wait hold on CSS is not
1357:46 - so CSS knob and object which will have
1357:50 - to write the css.code
1357:53 - in
1357:57 - all right now we have everything ready
1358:00 - and if you try to open this file over
1358:03 - the browser it's gonna say open
1358:06 - public
1358:08 - index
1358:09 - I'm sorry
1358:11 - public index HTML
1358:16 - oh
1358:23 - whoops
1358:26 - foreign
1358:31 - you see this now okay but there's no
1358:34 - interaction yet so when I type something
1358:36 - there's no reactivity at all because uh
1358:40 - we haven't load our JavaScript code so
1358:42 - now the next thing we're going to do is
1358:43 - we're going to compile our codes uh for
1358:46 - JavaScript for the client sites
1358:49 - and write it to a file in a public
1358:51 - folder as well so next thing is we're
1358:54 - gonna do is we can come over here
1358:57 - um
1358:58 - I'm gonna have the same Parts but we're
1359:01 - gonna we'll still do a compilation but
1359:03 - now we're gonna do we're gonna compile
1359:05 - for our client sites and make sure that
1359:07 - we also have high readable to true
1359:10 - and we format will be I think we can
1359:13 - leave the format as it is as esm
1359:16 - okay and next thing is uh let's see
1359:25 - and okay so because uh server side we
1359:29 - already have like CSS inserted so here
1359:32 - we can uh
1359:34 - just don't have to compile CSS for our
1359:38 - client-side component so if you check
1359:40 - here there's this flag call
1359:43 - CSS right so CSS you can find as false
1359:48 - because we don't need don't need it
1359:49 - right so now we get our JavaScript code
1359:52 - I'm going to write it into a file so FS
1359:54 - dot write filesing
1359:57 - uh now we're gonna have uh
1360:02 - this one and I'm gonna say index.js
1360:06 - yes I could and
1360:09 - encoding as UDF
1360:13 - okay so um
1360:15 - now if you run this we
1360:17 - oops sorry
1360:24 - ah okay so we have to rename this I'm
1360:27 - gonna say JS client side Js
1360:34 - okay you're gonna build again
1360:39 - uh I don't see anything different yet
1360:42 - but we have X at we have a new
1360:46 - file created
1360:49 - um
1360:49 - add over here index.js right so here uh
1360:53 - we are going to also we are now we need
1360:57 - to
1360:58 - add this file into our index uh refer
1361:02 - reference to this file in our HTML so
1361:04 - that we can load this JavaScript on the
1361:06 - by the browser so let's see uh we can
1361:09 - come over here and add a script tag
1361:14 - Source will be index.js
1361:18 - and because we are using import
1361:21 - statements so we also need to make sure
1361:23 - that uh it's uh the type is module
1361:29 - right so let's let's try to run that
1361:32 - again
1361:35 - and if you take a look over here it says
1361:38 - that
1361:39 - um
1361:41 - okay uh we can't we need to be a
1361:44 - relative path
1361:52 - okay so the thing is we can't load a
1361:57 - module scripts
1361:59 - um
1362:01 - uh using
1362:03 - uh in the file protocol right so if you
1362:06 - open this file like this you can't
1362:07 - really serve this file so what we need
1362:09 - is we need a file server uh that serves
1362:13 - all the folders from the public folder
1362:15 - so here I'm going to open a new tab
1362:21 - um and run the hdb server to serve the
1362:23 - public folder
1362:26 - so here I'm going to visit this and it
1362:29 - will still serve our index HTML right
1362:32 - you can take a look now
1362:35 - uh we realized that oops
1362:40 - we reloaded index.js and
1362:44 - still not working
1362:47 - take a look at
1362:48 - um I think jet index.js is loaded
1362:50 - correctly
1362:51 - hmm I'm not sure maybe because of this
1362:54 - right uh how are we going to import from
1362:56 - svelt slash internal because if I come
1362:59 - over here and say
1363:01 - um part 8080 spell internal
1363:06 - um this does not lead to anything so the
1363:09 - files felt slash internal is giving us a
1363:11 - 404 we can't find this file uh fair
1363:13 - enough uh this file is not even in the
1363:16 - public folder at all
1363:19 - so if you're using if you're using a
1363:22 - bundler this shouldn't be a problem
1363:23 - because a bundler will look through all
1363:26 - its dependency and try to bundle
1363:27 - everything into one file in our case
1363:31 - um we don't have this we don't have a
1363:33 - bundle we only compile one code one
1363:37 - spell component code into like one
1363:41 - normal JavaScript module right so all
1363:44 - these import statements are still there
1363:46 - um we will have to figure a way to
1363:49 - find this file and
1363:52 - um resolve it ourselves right so first
1363:54 - thing is this is not like a valid import
1363:59 - statement you can't really import
1364:02 - um like this it's either where you start
1364:04 - with a slash where it says it's absolute
1364:06 - from the root folder root as in this
1364:09 - case is the public folder or relative to
1364:12 - the file the current file which is
1364:14 - public index.js relative to the current
1364:16 - file right so we're gonna
1364:19 - um what we're gonna do is we're gonna
1364:21 - probably try to copy this file from the
1364:23 - new modules and paste it into the public
1364:25 - folder so here this will be coming from
1364:28 - root folder uh Slash internal and also
1364:33 - you need extension so that you know what
1364:34 - file to find right uh it's unlike
1364:38 - unlike you when you're doing a bundling
1364:41 - uh the bundle will figure out that okay
1364:43 - spell internal uh which file am I
1364:45 - reading from in this case if you take a
1364:47 - look at the node modules you'll find
1364:49 - that
1364:50 - svelt's internal slash internal there's
1364:55 - a package Json so a bundle will look at
1364:58 - this file and then figure The Next Step
1364:59 - so if it's internal it's a folder and it
1365:02 - finds a package just on your figure okay
1365:03 - let's read this one and figure out okay
1365:05 - uh a bundle so figure out whether to get
1365:08 - like the main file or the module files
1365:10 - or you know and and try to get resolved
1365:14 - to that file but in our case we don't
1365:16 - have a bundle so what I'm going to do is
1365:17 - I'm going to just copy this index MJS
1365:20 - file and gonna paste it into the public
1365:23 - folder right
1365:25 - um so these are like manual works so I'm
1365:27 - gonna copy paste the index so I'm gonna
1365:30 - have root paths slash
1365:33 - internals Dot
1365:36 - MGS okay so here I need to rename my
1365:40 - file to be spelled slash internal MGS as
1365:44 - well so that I can resolve to this I can
1365:47 - find this file right luckily this file
1365:48 - does not have any more import statement
1365:51 - so I think that will be the extent of it
1365:54 - so let's save this let's save our
1365:56 - index.js as well uh let's and let's try
1366:00 - to refresh again
1366:04 - um interesting this is not
1366:06 - uh resolving from the let's see bundle
1366:11 - will load this file index.js type module
1366:15 - oh we didn't close our script tag that's
1366:17 - why that's problems over here okay so
1366:20 - let's see uh let's come over here and
1366:23 - close our script tag
1366:27 - uh we I think we just come over here and
1366:32 - do it ourselves in the build code as
1366:35 - well
1366:37 - okay and let's refresh again
1366:43 - okay in this case we loaded index.js as
1366:46 - well as internal MGS right everything is
1366:48 - loaded but if you try to run
1366:51 - nothing happened yet right so what's the
1366:54 - problem now uh the problem is we have
1366:57 - this component we loaded but we haven't
1366:59 - really used it right recall the
1367:01 - client-side component API where we
1367:03 - actually import this component and then
1367:05 - we actually use it in a sense where we
1367:10 - uh instantiate this component right so
1367:12 - what I'm going to do now is I'm going to
1367:15 - move this index.js file into a
1367:18 - component.js
1367:20 - and I'm gonna create another file called
1367:23 - index.js and here I am going to write uh
1367:27 - Imports component from component Dot Js
1367:34 - right and then I am going to create an
1367:37 - instance okay component equals new
1367:40 - component
1367:42 - and now I need to figure out my targets
1367:45 - so in my case in our case the target is
1367:48 - the body because we pasted everything
1367:50 - HTML into the body so we're gonna say uh
1367:54 - I'm gonna come over here and say targets
1367:58 - it goes to the body
1368:00 - sorry document.body
1368:04 - and then hydrate the bow
1368:07 - uh let's see so let's look at the
1368:11 - component event hydrate the ball
1368:15 - whoops
1368:16 - I think it's called the
1368:20 - hydrates we need to pass it as true
1368:24 - now we need to specify the same props as
1368:26 - what we get over here as well in our
1368:29 - server side when we render this
1368:31 - component a our component let's see
1368:35 - where are we
1368:37 - okay we don't when we call this uh props
1368:41 - is Lee how and spelled so we're gonna
1368:42 - copy this over as well
1368:45 - you see there's a lot of things to make
1368:47 - sure everything goes correctly
1368:50 - right but when you have something like a
1368:53 - stepper or spell kit all this is being
1368:55 - done for you
1368:56 - so here we
1368:59 - instantiate okay so the most important
1369:02 - thing that is different from what we've
1369:04 - done previously is that this has to be
1369:05 - true hydrate has to be true and
1369:09 - I have to make sure that this uh our
1369:12 - code that we built is hydratable to be
1369:14 - true for server side as well as the
1369:16 - client side so let's save this save
1369:19 - everything
1369:20 - and let's try to refresh again
1369:23 - this time round uh we loaded in next
1369:26 - year's component and internal MGS now
1369:30 - hopefully the uh we there's no error in
1369:33 - the console except we didn't have a
1369:35 - fevicon very con right but now we we
1369:40 - already Mount our component so if I try
1369:43 - to type something you see that now
1369:45 - everything is reactive
1369:47 - right so
1369:49 - um
1369:50 - so this is how it's it's gonna be what
1369:53 - uh how it works right so now you maybe
1369:55 - will ask me like oh okay
1369:57 - um it feels like nothing's different if
1370:00 - say if your HTML has no elements at all
1370:05 - right if I remove everything from the
1370:07 - body
1370:09 - I remove all this
1370:10 - like this nothing inside the body
1370:15 - um if I refresh again
1370:17 - everything still works fine how do I
1370:19 - know the hydration kicks in and how do I
1370:21 - know whether it's being hydrated
1370:23 - correctly or not well let's take a look
1370:25 - so let's restore back the
1370:29 - let me put it back put back the original
1370:33 - elements right and let's refresh
1370:36 - everything looks normal uh so how do I
1370:40 - know whether hydration Works usually
1370:41 - this is how I'm gonna take a look first
1370:43 - is I'm gonna open up the network
1370:47 - condition
1370:49 - so let's let me find where is the
1370:52 - say Network condition so I use command P
1370:55 - to open up this drawer and find like uh
1370:58 - you can manually type this arrow symbol
1371:02 - and say Network condition
1371:04 - so here I'm gonna see I'm gonna okay
1371:07 - sorry I'm not sure I'm not going for no
1371:09 - condition first is I'm gonna disable
1371:11 - JavaScript
1371:12 - JavaScript disable
1371:15 - so what this do is that now I load my
1371:18 - page this whole thing is so called
1371:21 - server rendered because we uh of course
1371:24 - on our case it's more like we don't
1371:26 - dynamically render this page on per
1371:27 - request but we render ahead of time when
1371:30 - we run our code to generate HTML right
1371:34 - so this HTML is already rendered is
1371:36 - being generated so here you get this
1371:39 - static HTML that has no JavaScript at
1371:42 - all so no interaction at all you can
1371:43 - still type but no reactivity at all
1371:46 - right so here when I
1371:48 - I can do is I am going to look at this
1371:53 - elements right look over here these are
1371:57 - the elements and if I turn on JavaScript
1372:02 - uh what I expect is that later on when I
1372:05 - refresh uh let's see
1372:07 - okay
1372:09 - I think I miss one step so first is I'm
1372:12 - gonna come over here
1372:14 - and set a
1372:18 - timeout
1372:19 - you know timer is a bit uncomfortable
1372:22 - okay let me add another
1372:25 - button
1372:27 - in the HTML
1372:29 - let me add one button so it's okay that
1372:32 - you have extra elements over here uh
1372:35 - High trade I'm gonna call it
1372:38 - um ID it feels hydrate so I'm gonna have
1372:40 - this extra button over here
1372:43 - and in our code we will uh
1372:54 - um
1372:55 - only 100
1372:58 - our
1373:00 - HTML when I click this hydrate button
1373:02 - right so I'm going to say you'll see
1373:05 - hydrate
1373:07 - and then I will
1373:09 - instantiate our component so here is
1373:11 - where we actually do the hydration
1373:14 - right so let's let's try refresh again
1373:17 - so everything is done uh but if you look
1373:20 - at console there's no hydrate yet
1373:21 - meaning we haven't hydrated out elements
1373:24 - we try to type something nothing's
1373:26 - changed right so if you inspect elements
1373:28 - you see that these are the elements that
1373:30 - is Created from the HTML written form
1373:34 - when we do that rendering now uh first
1373:37 - thing is I'm gonna ins cop take a look
1373:40 - at this element I'm gonna store the
1373:43 - reference of this H1
1373:46 - so this is I'm going to start as a
1373:48 - variable uh H1 equals to this
1373:51 - so now here's one
1373:53 - is pointing to this session element okay
1373:56 - so what I want to see is that later on
1373:59 - when I hydrate
1374:01 - um this is still the same H1 element
1374:04 - rather than you know being discarded and
1374:06 - thrown away and I want to make sure that
1374:08 - later on it's still the same element and
1374:11 - the
1374:13 - input is still the same input so I'm
1374:15 - gonna do this as well input equals to
1374:20 - this the input is still the same input
1374:23 - but then the input and the H1 has
1374:26 - interactivity has reactivity right
1374:28 - that's what we're gonna aim for when we
1374:31 - click the hydrate so uh at the same time
1374:34 - you can start at this screen usually
1374:36 - whenever whenever element has changed
1374:38 - when something has done to the elements
1374:41 - it will flash us right so let's click
1374:45 - actually everything is flashing I'm not
1374:48 - sure whether we're hydrating correctly
1374:49 - but let's take a look so uh H1
1374:53 - uh yeah it's still referring to the same
1374:56 - element so we didn't we didn't create a
1374:59 - new H1 this is still the H1 that we
1375:03 - reference to just now before we hydrate
1375:05 - and this is the new uh this is still the
1375:07 - same one that we see on the screen so no
1375:09 - new H1 being created right if I look for
1375:12 - input
1375:14 - this is still the same input elements
1375:17 - that you see uh just now and the one
1375:21 - that right now we are looking at is
1375:23 - still the same input element so no new
1375:26 - input element being created is still a
1375:27 - same input element but right now the
1375:29 - input element is reactive right when
1375:31 - you're trying to type something you see
1375:33 - that it's reflected reacted and uh yeah
1375:36 - things change right so this is hydration
1375:39 - hydration is you get the HTML being
1375:43 - um rendered when you uh pre-rendered
1375:47 - meaning render ahead of time or render
1375:50 - when you have a request you get that
1375:52 - HTML
1375:53 - as software user at the same time you
1375:55 - compile the code for the client side
1375:57 - which uh when you instantiate you should
1376:00 - pass the flag call hydrate so that it
1376:02 - will instead of recreate any new
1376:04 - elements it will look for the existing
1376:07 - elements and then
1376:09 - um Point reference to them right so
1376:11 - let's if I don't have this hydrate to
1376:14 - true what it means is that you ask felt
1376:17 - to actually
1376:18 - recreate this component and rather than
1376:20 - recreate actually what swell will do is
1376:22 - it will
1376:24 - create a new set of elements inserted at
1376:28 - the end of the body right we learned
1376:30 - that we can have as many elements we
1376:32 - have on the screen when we do when you
1376:34 - create an element it will actually
1376:36 - create a component the amount component
1376:37 - actually will insert at the end of the
1376:40 - children right so if you don't have
1376:42 - hydrate this is what's going to happen
1376:43 - but you pass hydrate to true then it
1376:46 - will
1376:47 - claim existing elements as uh as the
1376:51 - elements that that's treated like
1376:53 - existing elements as elements that it
1376:55 - will be creating and then pointing
1376:58 - reference to them and then add event
1377:01 - listeners so that whenever something has
1377:03 - changed it will update the existing
1377:05 - elements
1377:09 - so in this video we're going to talk
1377:10 - about svelt register
1377:12 - as I was trying to read through the docs
1377:15 - I found that
1377:16 - um there's this section that says swell
1377:19 - register it says that two render cell
1377:22 - component in node.js without bundling
1377:24 - use requires felt register after that
1377:27 - you can use required to include any.spel
1377:30 - file
1377:31 - but apparently this is like a magic
1377:33 - where you can require a spell register
1377:35 - and therefore you can start import
1377:37 - requiring the spell file how does that
1377:40 - even work right let's let's try it out
1377:43 - so uh we shouldn't know that right we
1377:46 - try we're trying to require something it
1377:48 - should be requiring a JavaScript module
1377:50 - right or else it won't work it should
1377:53 - require a JavaScript
1377:54 - um
1377:55 - common Jazz model because we are using
1377:57 - require
1377:59 - so over here if we try to run this
1378:04 - we'll end up in the
1378:06 - unexpected token syntax error because
1378:09 - this it itself it's not a JavaScript
1378:12 - right so apparently there's this magic
1378:14 - that you can do oops where I can copy
1378:17 - over here
1378:19 - paste it in
1378:20 - and if I run this now amazing we can now
1378:25 - import dot spell file so how does that
1378:27 - work
1378:29 - um in this video of course we're gonna
1378:31 - learn about yes you can do this as
1378:34 - expected but how does that work
1378:37 - um
1378:38 - so apparently from what I found that is
1378:41 - that there's this secret API from
1378:44 - node.js says that
1378:47 - require extension apparently it's
1378:50 - deprecated since version
1378:53 - zero is that yeah version zero so it's
1378:57 - it's added in the very beginning and
1378:59 - it's deprecated since very early on
1379:02 - because right now I think node.js latest
1379:05 - version is 14 or 16 right at this point
1379:09 - moment when I try and record this so
1379:11 - this has been added very early on and
1379:13 - it's deprecated since it's very very
1379:15 - early on but it's still apparently it's
1379:17 - being you in use
1379:20 - um so apparently this require extension
1379:22 - Works uh
1379:24 - in a way that you can
1379:28 - in a spell register it tries to add
1379:32 - um like a pre-processing before you
1379:34 - require any files and it's using this
1379:37 - require extension API from node.js that
1379:41 - does the magic so in this video we're
1379:44 - going to take a look at how it's being
1379:45 - done and how we can use uh use uh try to
1379:49 - write one ourselves right so
1379:53 - instead of importing still module for
1379:56 - now we're going to create a file called
1379:59 - a DOT n f file right so this is a very
1380:02 - common file you see that the end files
1380:05 - you can write some environment variables
1380:09 - that was supposed to be secret and only
1380:12 - so that you don't commit this file it
1380:14 - should be a git ignore file so every
1380:16 - time by then uh to save time to every
1380:20 - time when you run a command you have to
1380:22 - provide some environment variable maybe
1380:24 - you write this file right so this file
1380:27 - usually will look something like this
1380:28 - where you have a secret
1380:32 - a equals to xXx and secret b equals to y
1380:36 - or Y right something like this
1380:38 - so imagine this is a file just like any
1380:41 - files that we have uh imagine what we
1380:44 - want to do is we want to require this
1380:46 - file
1380:48 - oops
1380:56 - variables
1380:58 - I want to see whether we can
1381:01 - um
1381:03 - require this all right if you try to run
1381:06 - of course you will end up with an error
1381:08 - because this it's not even a
1381:12 - valid JavaScript so we're gonna learn
1381:15 - from spelled register where how we uh to
1381:19 - use these require extensions so how it
1381:22 - works is that you can come over here and
1381:24 - say require
1381:26 - .extensions
1381:30 - and you can add an extension so in this
1381:32 - case our extension would be a dot f so
1381:36 - any file that ends super.f would be
1381:40 - uh
1381:42 - have to go through this ex this
1381:47 - e this function this
1381:50 - let's see dot f equals so you can pass
1381:53 - in a function apparently so module it
1381:56 - takes in two parameters one is module
1381:58 - one is file name
1382:00 - so here what you can do is that you can
1382:03 - read the content or file process it make
1382:05 - it like a JavaScript and then uh use
1382:08 - this module to do something to uh
1382:13 - to parse it parse the JavaScript and
1382:16 - then return whatever it is
1382:19 - all right so uh it's it's easier to do
1382:23 - than say so I'm going to type it out
1382:24 - right now so first is uh here we get a
1382:27 - file name so probably we're going to
1382:29 - read the file content so I'm gonna have
1382:31 - FS equals require FS
1382:34 - so we're going to read the file content
1382:46 - content
1382:48 - so here I'm just going to console log
1382:50 - the content here
1382:52 - I'm gonna add some logs
1382:57 - um and let's try to run this
1382:59 - okay we are we able to
1383:04 - it's not defined okay apparently we are
1383:08 - not we didn't trigger this so uh maybe
1383:10 - we need to add some file name let's
1383:14 - let's try that I have no idea how this
1383:15 - works uh maybe Dev dot EnV
1383:20 - so let's require.dev.env
1383:26 - oh okay so now
1383:28 - you you have to have a file name and
1383:31 - then an extension extension so in this
1383:34 - case
1383:36 - um
1383:38 - what we have is when we try to require
1383:41 - any file that ends with DOT ends in this
1383:43 - case Dev dot at the F what we get is
1383:46 - what happens is that this function will
1383:48 - be triggered and you will gonna uh you
1383:51 - able to do something right so here we're
1383:53 - going to read this content and we're
1383:55 - going to process it like treat every
1383:57 - line is a property so we're gonna
1384:00 - content dot splits new line
1384:04 - um
1384:05 - and map for ish
1384:08 - okay the Creator object
1384:13 - for every line for each
1384:15 - line
1384:19 - the line that splits Again by equal sign
1384:23 - so you have a key and a value pair
1384:26 - so object equals key use value
1384:29 - so I create an object from the content
1384:33 - and I want to create a Javascript file
1384:37 - JavaScript code of it that makes sense
1384:40 - so the JavaScript code should look
1384:42 - something like this module that exports
1384:44 - equals to blah blah blah whatever right
1384:46 - so you should be having like a secret
1384:50 - a equals to xXx and Secret
1384:54 - b equals YY right it should look
1384:57 - something like this right hope that
1385:00 - makes sense so instead of uh so what we
1385:03 - need to do is we already have this
1385:05 - object in JavaScript uh so we can
1385:08 - serialize it using Json 25 to make it
1385:11 - like this object to print it out like an
1385:13 - object
1385:14 - json.string G5
1385:19 - and also we need to add this so we're
1385:23 - gonna make a string that looks something
1385:25 - like this
1385:30 - so instead of like having a module that
1385:33 - looks like this we have a
1385:35 - JavaScript code that looks like this so
1385:38 - it's it's a string it's a code it's a
1385:40 - piece of code it's a string
1385:41 - and what we do with this piece of code
1385:43 - is we are going to use module dots
1385:48 - compile
1385:51 - all this
1385:53 - with a file name
1385:58 - and this will return us as a module
1386:01 - which we just returned from this
1386:02 - function
1386:06 - okay now what we've done is that we
1386:09 - create a module out of any file
1386:12 - and if you try to run this you realize
1386:14 - that now
1386:15 - uh let's remove this
1386:18 - uh and let's print out here
1386:22 - realize that we ourselves we make any
1386:25 - file to become just a normal JavaScript
1386:27 - module so this is a secret behind spell
1386:31 - register and actually what it does is
1386:33 - that it will go and require extension
1386:39 - uh those fields file and make it a
1386:43 - module so it will make it
1386:45 - or make it um
1386:47 - a cell module so here I'm going to read
1386:50 - the content
1386:52 - and I am going to use fill compiler to
1386:56 - sorry
1387:02 - to compile our code
1387:06 - compile our code
1387:09 - with a generate SSR
1387:14 - and of course the format is CGS
1387:18 - right we have the code so this is the
1387:22 - JavaScript part of it
1387:24 - I'm gonna return
1387:27 - module so since we already have a
1387:29 - JavaScript code when it is going to
1387:31 - module compile the JavaScript code with
1387:35 - the file name
1387:37 - right so this is the secret behind
1387:40 - spread register so if we have this
1387:43 - you have this code over here it tells us
1387:46 - that we are able to import file and this
1387:49 - function here will focus on transforming
1387:53 - that source code you have into
1387:55 - JavaScript code and then use modular
1387:57 - compile to compile it to a JavaScript
1388:01 - module
1388:02 - so now with this code we have we can
1388:06 - now
1388:08 - import
1388:12 - adjust group uh file like a JavaScript
1388:16 - module
1388:18 - right you see that we don't have short
1388:20 - register at all so resistance is just a
1388:23 - file meaning uh just another module
1388:25 - meaning we can actually move this all of
1388:28 - this into the file register
1388:32 - like this
1388:34 - and we just import it import that
1388:37 - register
1388:38 - module and it will do it will try to try
1388:42 - to set up the required extension for
1388:45 - self module and allows us to import
1388:48 - spell module just like in any JavaScript
1388:50 - module so this is essentially what's
1388:53 - felt register is so it allows us to
1388:56 - import any field module so if your cell
1388:59 - module is important another skill module
1389:01 - what happens is that every time when you
1389:03 - require something importing something uh
1389:05 - it will keep on triggering the
1389:07 - extensions and then therefore you're
1389:09 - able to import so a module just like a
1389:11 - JavaScript module
1389:12 - so that's the secret between register I
1389:16 - hope you learned something if you if you
1389:19 - love this video share it to your friends
1389:21 - uh when anyone who is learning spell at
1389:25 - the same uh right now share to them so
1389:28 - that they can learn as well so see ya
1389:31 - bye