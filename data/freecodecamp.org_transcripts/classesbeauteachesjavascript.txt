00:00 - classes
00:01 - classes are new in es6
00:04 - at least for javascript a class is a
00:06 - blueprint from which individual objects
00:08 - are created classes provide a much
00:10 - simpler and clearer syntax to create
00:12 - objects and deal with inheritance
00:14 - one way to define a class is using a
00:16 - class declaration
00:18 - to declare a class you use the class
00:20 - keyword with the name of the class
00:22 - you can see here this is the class
00:24 - declaration the important part about
00:26 - this is it just starts with the word
00:28 - class
00:30 - a class expression is another way to
00:32 - define a class class expressions can be
00:34 - named or unnamed the name given to a
00:36 - named class expression is local to the
00:39 - class's body
00:40 - so you can see that a
00:42 - a class expression starts with the the
00:44 - variable name
00:46 - and for the unnamed and then the name
00:48 - also starts with the variable named
00:51 - but then this one has the class name
00:53 - here the named one the unnamed does not
00:55 - have the class name but let's go back up
00:58 - here a little bit i'm actually going to
01:00 - paste some code in here
01:02 - the first thing i want to talk about is
01:03 - the constructor function the
01:05 - construction function starts with the
01:06 - word constructor and i'll have the
01:08 - variables that you're going to pass in
01:10 - when you're creating the class and you
01:12 - can see that i just assigned those
01:14 - variables that i pass in or the data
01:16 - that i pass in to be properties of the
01:19 - function when you say this.name equals
01:21 - name now the class is going to have a
01:23 - property called name and a property
01:25 - called yearborn
01:28 - i also have another function that i put
01:30 - in called get age when a function starts
01:33 - with get that means you're going to call
01:36 - this age
01:38 - as a property and not a function
01:40 - when you call a function you put the
01:42 - parentheses after it uh when you call it
01:44 - property there's no no parentheses i'll
01:47 - give you an example in just a minute
01:49 - and you can see that this getter
01:51 - function actually calls this dot calc
01:54 - age which is down here so it can
01:57 - actually do a calculation and send the
01:59 - calculation back as a property
02:02 - so let me show you an example down here
02:06 - if we create a new
02:08 - instance of this class i'm going to put
02:11 - var me equals
02:12 - new
02:13 - person
02:15 - i'm going to pass in
02:18 - a
02:19 - name
02:20 - and a year
02:23 - so you can see i put the name of my new
02:26 - instance of this class and you have
02:28 - always when you're creating a new
02:30 - instance you always use the new keyword
02:32 - and the word person that just comes from
02:34 - the name of the class up here
02:36 - and then seeing the constructor we have
02:38 - you passing a name and you're born
02:40 - so that's what i passed in
02:42 - into the new person
02:43 - now now that i've created it i can
02:45 - actually use this information let me
02:47 - show you an example console.log
02:53 - and if i
02:55 - run this here
02:57 - you can see in the console
02:59 - beau was born in 1983. so you can see
03:02 - you can actually just add these variable
03:04 - names with with strings
03:07 - and when i call this me dot name
03:10 - that's going to take out the the name
03:13 - bow that we passed in when we created
03:16 - the function or when we created the the
03:18 - instance of the class and we do meet a
03:20 - year born it's going to call out
03:23 - the year
03:24 - that we passed in when we created that
03:27 - that instance
03:28 - here we called properties of the
03:31 - instance of the class meet.name but we
03:33 - can also call functions
03:35 - if you look up here we have another
03:37 - function what and it's going to actually
03:40 - log right in the function it says
03:41 - console.log.this.name
03:43 - is a person
03:44 - so if i type in
03:47 - me dot what now this time i'm going to
03:49 - have to put the um two parentheses after
03:51 - that because i'm calling a function and
03:52 - not just a property so let's run that
03:55 - and you can see right in the console it
03:57 - says the first thing bo was born in 1983
03:59 - and it shows bo is a person there's
04:02 - another type of function we can put in
04:03 - here and that is a static function so
04:06 - i'm going to
04:08 - create a new function i'm going to type
04:09 - in static
04:12 - now when you put a function in a class
04:14 - and use the word static that defines a
04:17 - static method for a class
04:19 - static methods are called without
04:21 - instantiating their class and are also
04:24 - not callable when the class is
04:25 - instantiated
04:27 - and static methods are often used to
04:28 - create utility functions for an
04:30 - application
04:31 - so
04:32 - here to call the meetup name mee.what we
04:36 - had to instantiate it by doing var me
04:38 - equals new person
04:40 - but to call the arms function we don't
04:44 - need to make an an instance of it so let
04:47 - me give you an example console.log
04:55 - so as you can see instead of
04:57 - calling me the arms i actually called
05:00 - person.arms
05:02 - so to call a static function you you put
05:05 - in the name of the class and then call
05:08 - the function instead of the name of the
05:10 - instance of the class which would be me
05:12 - so let's run that and see what it does
05:17 - yeah see it says um bo has two arms you
05:21 - can also put in a space there
05:23 - okay another thing i want to tell you
05:25 - about is the extends keyword the extends
05:28 - keyword is used in class declarations or
05:30 - class expressions to create a class as a
05:32 - child of another class
05:35 - when you create a child it can use all
05:36 - the properties and the functions of the
05:38 - original class but then you can add some
05:40 - more let me give you an example
05:47 - so as you can see i have defined another
05:50 - class
05:51 - called juggler that extends a person
05:54 - so
05:55 - usually when you're going to use the
05:56 - word extends it should be in is a
05:59 - relationship for instance a juggler is a
06:02 - person so that's how i juggler extends
06:05 - person juggler is a person now you can
06:08 - see in the person class we have what if
06:12 - you call what
06:13 - it's going to console.log this.name is a
06:16 - person however in the juggler class
06:20 - we've redefined the what function and
06:23 - it's going to
06:24 - say console.log this.name is a juggler
06:29 - so let me show you an example of how
06:30 - this works
06:32 - first we're going to create a new
06:34 - a new instance of this juggler class
06:37 - so
06:41 - so i've created a new instance of the
06:42 - juggler class i called the juggler jay
06:45 - born in 1980. then i called me dot what
06:48 - that was the original instance of the
06:50 - person class and now i called u dot what
06:52 - that's the instance of the juggler class
06:54 - so let's see what happens i'm going to
06:56 - hit run
06:57 - now you can see the last two lines of
06:59 - the console
07:00 - bo is a person
07:02 - and
07:03 - jay is a juggler
07:05 - so you can see that for
07:08 - you that called the the j
07:11 - and the only thing in the juggler class
07:13 - is
07:14 - the what says console.log this.name but
07:17 - juggler doesn't have a this dot name
07:20 - that's because it's it's bringing in the
07:22 - this dot the dot name from the person
07:25 - class so this dot name is a juggler so
07:28 - it changes the what function depending
07:31 - on if it's the person or the juggler
07:34 - and the only other thing i wanted to
07:36 - talk about during this lesson is the
07:38 - super key word
07:40 - so if you add a the word
07:43 - super you can call functions on an
07:45 - object's parent so the parent of the
07:47 - juggler class is the person class so if
07:49 - i type in super dot what
07:53 - and then
07:54 - i'm going to
07:56 - clear the console again and now i'm
07:58 - going to run this
08:01 - so if you look at the last two lines now
08:04 - it says j is a person
08:07 - and then j is a juggler
08:09 - that's where this super dot what when it
08:11 - says super dot what here it's calling
08:15 - this command up here
08:17 - console.log this.name is a person which
08:20 - is calling j is a person because we're
08:22 - in the j
08:24 - uh instance and then we're gonna
08:25 - console.log this.name is a juggler so
08:29 - using the super command allows you to
08:30 - call the
08:31 - the function from the previous from the
08:34 - parent of the class well thanks for
08:36 - watching my name is beau carnes don't
08:39 - forget to subscribe and remember use
08:41 - your code for good