00:09 - mhm
00:39 - all right just getting started here
00:41 - getting the stream all hooked up
00:47 - i am now live
00:49 - awesome
01:01 - everything looks good over here memories
01:04 - good cpu
01:06 - load good
01:09 - all right
01:13 - so i can minimize u
01:16 - no actually i should keep that open
01:22 - i'll get rid of you though
01:36 - and
01:51 - hello everybody who's already here we're
01:53 - just getting set up
01:55 - and uh getting ready to get started
02:06 - how's everyone doing today
02:22 - okay
02:23 - that good put this up here
02:29 - all right i'll give it a few more
02:31 - minutes so people get in um
02:33 - anyone can give me feedback on if
02:36 - connection is good or anything like that
02:38 - be much appreciated or in the live chat
02:46 - i'll keep this down here
02:51 - all right
02:53 - let's get i mean
02:55 - i'm just going to get right into
02:56 - starting here and then we'll um
02:59 - like chat as people show up
03:02 - so uh to start off we are working on es6
03:06 - today um same code base as the last one
03:09 - earlier this week however we are going
03:12 - to be refactoring um there is some
03:14 - issues with the use strict keyword um i
03:16 - did a little bit of work on my own
03:18 - adding the used strict word to every
03:20 - single challenge but then i realized
03:21 - that that caused errors um and it caused
03:24 - a bunch of linting errors so we're going
03:26 - to go back through and fix it up and all
03:28 - the meanwhile changing some of the tests
03:30 - so they're a little bit easier to
03:31 - understand
03:32 - um
03:34 - i'm gonna start off by
03:36 - just kind of going through all the going
03:37 - through all the json and then once we're
03:39 - done with that because this is it's a
03:41 - little bit of a faster process if i work
03:43 - directly on the json um a conversing to
03:46 - just jumping back and forth
03:48 - so i'll do all the json first and then
03:50 - once i get that all set once i get all
03:52 - that running we'll just do a live q a as
03:54 - we work through um all the stuff
03:58 - all right so got some people in the chat
04:01 - oh hi jesse great glad to hear it um
04:07 - coding and caffeine my favorite remember
04:09 - the last time i actually got up and got
04:10 - a cup of coffee but i already had my cup
04:12 - this morning so uh i'm good to go
04:15 - awesome glad to know it's all working
04:16 - well all right so let's get right into
04:18 - the coding here um
04:21 - where are we at so the last challenge i
04:24 - did was
04:26 - the destruction assignment to assign
04:28 - variables from objects
04:30 - so we
04:32 - um
04:33 - made this uh this challenge into a
04:35 - function just get length passing it a
04:37 - string and then we have the function
04:40 - scoped use strict definition
04:42 - um from there we have the change code
04:44 - below change code above
04:46 - and what's cool about this challenge is
04:48 - that we want the user to return len as
04:51 - the variable rather than just like the
04:54 - um keyword length because i like to
04:57 - reserve that
04:58 - um so the solution here would be
05:00 - you know you would do
05:03 - const
05:04 - length
05:05 - is len
05:07 - equals str which is the string up here
05:10 - and this uses the object destructuring
05:12 - because string is an object technically
05:14 - and they have properties like length
05:17 - hello glad you can join us
05:19 - and
05:21 - so this is a great way of testing this
05:24 - where basically we're like
05:26 - yeah you can we have a length variable
05:28 - here but we actually want you to return
05:29 - len so that's kind of a hint for people
05:31 - going through this challenge
05:34 - some of the testing features we're still
05:37 - able to test
05:38 - so this is an interesting one so the
05:39 - type of length is number is no longer a
05:42 - valid test because the variable length
05:44 - is no longer um
05:46 - like global scoped it's function scoped
05:49 - so what we can do though is we can type
05:51 - of the return value
05:54 - of get length and then we just pass it a
05:56 - um a blank string because that will
05:58 - technically return zero um
06:02 - sergio asks is the es6 challenges now
06:04 - live so a version of them are but they
06:08 - are very um
06:10 - like there may be a lot of things wrong
06:11 - with them and that's why we're here
06:12 - today we're gonna refactor everything
06:14 - and then we're gonna all go back through
06:16 - it and do some live challenge completion
06:19 - just do some live bug testing
06:22 - i've already done the first 13
06:23 - challenges last night and so we're gonna
06:25 - try to get through the rest of them
06:26 - right now
06:28 - um
06:30 - so this will say
06:32 - the funk let's change this message to
06:34 - say the function
06:39 - um
06:40 - get length
06:42 - returns a number
06:47 - and then we're going to test if the
06:49 - string
06:50 - returns the correct value
06:52 - and then we're going to
06:54 - expect the user to have used a
06:57 - the length as to lan assignment
07:01 - and moving straight on to the next one
07:02 - um and like i said we're going to go
07:04 - through everything and then we'll go
07:05 - back through um and actually test this
07:07 - all live
07:09 - cool
07:10 - so
07:11 - destruction assignment to assign
07:13 - variables from nested objects
07:17 - okay i do remember this one
07:19 - so let's go ahead and let's think about
07:21 - how we can function scope this
07:24 - i believe
07:28 - we could probably do something as simple
07:30 - as
07:33 - a function
07:35 - get
07:36 - max
07:37 - of tmrw
07:41 - and then oh we can't do that and then
07:43 - we'll go ahead and do a new line
07:47 - grab the use strict from there
07:51 - paste it put that in there
07:53 - and then we'll go ahead and grab all
07:56 - this chunk of code put that in there
08:00 - and i want to return
08:06 - we should be returning
08:10 - max of tomorrow
08:12 - so
08:15 - and we need that you need to use um
08:17 - destructuring
08:19 - uh idris asks how about using mocha and
08:22 - chai
08:23 - so yes we could total like this actually
08:26 - uses an assertion library very similar
08:28 - to that of a generic javascript testing
08:31 - framework um in fact i would love to be
08:33 - using mocha or chai but or tap or tape
08:36 - or intern you know all of them
08:38 - however because all of these challenges
08:41 - are in our index and version control and
08:44 - are able to be deployed anywhere um and
08:46 - they wanted to do it in a way that's
08:48 - like
08:48 - very quick to deploy it's all wrapped in
08:51 - json so we can't exactly write full like
08:54 - test like test.js scripts which is where
08:58 - mocha and chai would be great uh i
09:00 - imagine you could refactor the free
09:01 - codecamp project to do that
09:04 - but i feel like it would be slightly
09:05 - more complicated and would be harder to
09:08 - like you know drop into multiple
09:10 - instances and get running
09:12 - um
09:13 - but a lot of the principles of mocha and
09:16 - chai is implemented here with the
09:18 - assertion library just very basic you
09:20 - know assert this statement and then
09:22 - here's your message to display out to
09:24 - the user
09:26 - um
09:29 - so this so we should be able to pass an
09:31 - object into here
09:33 - so actually we'll pass forecast but this
09:36 - is not so this is just an argument
09:38 - forecast so they'll be able to use that
09:41 - we should say
09:42 - um
09:44 - we call this one local
09:50 - forecast
09:55 - and then we'll pass
09:58 - get max of tomorrow
10:03 - local
10:05 - forecast
10:08 - and now that function should be
10:10 - returning the valid
10:14 - uh the valid
10:16 - value so the solution would be the the
10:19 - structuring here
10:21 - where we would want to use like the
10:23 - tomorrow and then the sub nesting of max
10:25 - and then assign that to the word max of
10:27 - tomorrow um you know obviously users
10:30 - could like break this pretty easily and
10:33 - just you know return whatever they want
10:35 - to
10:36 - um
10:37 - but this test right here this assertion
10:40 - should should block that because they
10:42 - need to use destructuring
10:44 - um
10:47 - and now this one
10:49 - meth we need to actually test
10:52 - get max
10:54 - of tomorrow
10:57 - local
10:58 - forecast
11:00 - cool
11:02 - all right moving straight on through
11:05 - use the structuring assignment to assign
11:07 - variables from arrays ah this is a fun
11:09 - one this is when you swap a and b i
11:12 - really like this one um
11:14 - so how can we do this properly with you
11:17 - strict
11:24 - um
11:28 - so we're because we're reassigning we
11:30 - could probably keep that declaration up
11:32 - there
11:33 - and then we'll go ahead and we'll write
11:36 - this guy
11:38 - and then that one's now nested in there
11:40 - this one should be nested in there and
11:41 - then we'll put on the
11:44 - after burner
11:46 - there we go
11:47 - that closes it off
11:49 - and we can snag this guy throw that in
11:52 - there
11:54 - and then
11:56 - yes so the user should be editing their
11:58 - code right in here which will swap the
12:01 - values a and b
12:02 - using you know the a comma b equals
12:06 - b comma a
12:08 - and that should actually
12:09 - keep the hoyt the let the global scoped
12:12 - a and b's because you don't need to
12:13 - reassign it and then this should all
12:15 - work fine
12:16 - cool
12:18 - let's see what we have to do we have to
12:20 - change any tests i don't believe so
12:21 - because those remain on the same level
12:24 - um
12:27 - mocha chai yeah those are coffee types
12:29 - but uh no they're also testing libraries
12:34 - use the structuring assignment with the
12:35 - rest operator to resign array elements
12:41 - similar to the last one we should be
12:43 - able to
12:45 - then
12:46 - declare
12:47 - let array out here
12:51 - and then do a go go ahead and write one
12:53 - of these
12:55 - snag the use
12:57 - uh
12:58 - oh that was not what i wanted to do
13:00 - there we go
13:02 - nope wrong line
13:03 - there we go put that in there put that
13:06 - there there there
13:07 - array now goes down to here
13:11 - um so this is invalid currently
13:17 - and then go ahead and write that line
13:22 - um
13:24 - because they should change this
13:26 - yeah i think this is fine
13:30 - and then
13:32 - that should be good
13:37 - that's a good destructuring assignment
13:38 - and we're testing for the
13:43 - there we go not all right that's nice
13:46 - what is that
13:49 - see this is an issue because
13:51 - if they use a redot slice they're
13:52 - actually going to have stuff between
13:54 - here so we should only be testing for
13:57 - the
13:58 - array.slice
14:00 - um because then of course they'd have to
14:02 - wrap it let's see do we have videos on
14:04 - how to actually use just unit test
14:06 - testing frameworks while making an npm
14:07 - module
14:08 - i don't know if free code cam has one um
14:12 - but i could definitely do one i love
14:13 - writing tests it's a very important
14:15 - thing in fact a lot of my contributions
14:17 - to node.js and react are all via testing
14:21 - um in the implementation yeah i actually
14:24 - uh
14:25 - been working on
14:26 - some like deployments of like like
14:29 - pretty like complex node.js apps and
14:31 - i've been finding the travis ci platform
14:33 - as long as as well as code coverage
14:35 - really useful and uh making those set up
14:38 - so maybe i'll do something along those
14:39 - lines in the future when i'm working on
14:40 - a side project and not
14:42 - free code cam
14:45 - all right let's go on to the next one
14:47 - use the structuring assignment to pass
14:49 - an object as a functions parameters
14:53 - okay
14:54 - so this one uses we just have we're
14:57 - basically just destructuring inside the
15:00 - function declaration itself
15:03 - okay
15:05 - so this uses a very like simplified so
15:08 - we're gonna expand this
15:12 - um
15:13 - this arrow function out a little bit
15:16 - in fact i'm just going to rewrite it
15:17 - because it's a little bit nicer
15:20 - const as i say half equals
15:24 - and then
15:28 - we're going to want to write
15:30 - return
15:35 - stats.max plus stats.min
15:39 - divided by 2.0
15:42 - and then we want to do
15:44 - close off that and this is going to have
15:46 - the stats variable in it
15:48 - and then we're going to say
15:51 - sorry grab that
15:53 - paste it there
15:57 - now we can then use function
15:59 - argument destructuring
16:04 - um we're not even going to keep or we
16:05 - can put that
16:13 - here
16:15 - get rid of this line
16:19 - and then i'd like to do
16:25 - we'll do a
16:26 - do not
16:27 - change this
16:29 - line
16:33 - okay
16:34 - almost there and now stats should still
16:37 - be valid because it's hoist because it's
16:39 - global scoped and half stats should be
16:40 - very valid
16:42 - great
16:43 - bohemian city asked which program am i
16:46 - writing i am currently writing the um
16:49 - es6 challenges for the
16:52 - upcoming beta free code camp beta
16:57 - i dress yes travis ci is
17:00 - is awesome it how it works is it
17:02 - basically watches your pull requests as
17:05 - well as branches
17:06 - and when you
17:08 - push code to a pull request it'll
17:10 - automatically run a
17:13 - test suite your it'll automatically run
17:15 - whatever tests you have written for your
17:17 - application
17:18 - and
17:19 - then if it passes it'll return like a
17:22 - green light and if it fails it'll return
17:24 - to red light and you can get github
17:27 - add-ons to like track those testings in
17:30 - fact i think we have that on the free
17:31 - code cam platform you'll see at the very
17:33 - bottom of a pull request it'll have like
17:34 - the travis ci symbol and it's running
17:36 - it's trying to build and if it fails it
17:38 - tells you that that way you don't merge
17:40 - anything that would crash potentially
17:41 - crash the site
17:43 - um
17:44 - it's all that's pretty easy to set up
17:46 - what's something that's fun that i've
17:48 - been working on is using heroku which is
17:50 - like a web server hosting kind of
17:52 - platform and i've been working on making
17:55 - um like node.js deploys that start off
18:00 - on staging in heroku pass the travis ci
18:03 - test and then auto deploy themselves so
18:06 - that you can see the like the see the
18:08 - application you just wrote and if you're
18:10 - happy with what it looks like in staging
18:11 - all you have to do is click a button and
18:13 - it pushes it to production and then you
18:16 - have like your production update um and
18:18 - then all you have to do is just keep
18:20 - pushing code and github to the staging
18:23 - branch and then it does this really nice
18:24 - loop um
18:26 - again like i'd be happy to go into that
18:27 - in another video but um for today
18:31 - we're working on this
18:33 - we are
18:34 - making moves because we want to get this
18:37 - curriculum up and running for you guys
18:39 - as soon as possible
18:42 - let's check our stuff real quick type of
18:44 - stats is remains an object good
18:47 - the assert that the value returns that
18:50 - great
18:52 - and get user input
18:54 - assert
18:56 - matches
18:57 - using the structuring
18:59 - good
19:02 - all right create strings using template
19:04 - literals
19:06 - um
19:08 - ah
19:15 - i think we just got to use another
19:17 - function scope
19:18 - so we'll say
19:19 - function
19:24 - make lists and we're going to say
19:28 - array
19:33 - and i'll go down here and add the
19:35 - closing line
19:41 - okay let's see we can do here
19:48 - um
19:52 - so we're actually going to want
19:54 - to
19:57 - and then just do return
20:02 - result display
20:04 - array
20:10 - make list should return
20:32 - i think we go like do that
20:35 - and you know make this make people know
20:37 - that they're actually making a list here
20:39 - of things oh no
20:41 - like making like making a list of oh
20:45 - of um jsx elements
20:50 - tutorial and travis ci in the future
20:52 - video tutorial and travis ci will come i
20:54 - can uh that would be a lot of fun to
20:56 - film
20:57 - i'll i'll do that not as a live stream
20:59 - though i'll make sure to do that as i um
21:01 - oh how's it
21:03 - also my name pronunciation is
21:07 - e-i-d-d
21:08 - rhys
21:09 - idris
21:11 - just the i'm really bad at phonics so i
21:14 - probably won't probably not saying it
21:16 - right still
21:17 - but
21:19 - idris idris
21:21 - okay
21:23 - i'll see how that goes
21:28 - um okay i put that one there
21:37 - this should be fine now
21:45 - all right and we want to say type of
21:52 - we're going to test for
21:54 - make list
22:00 - is an object and has a length of three
22:03 - and then
22:12 - result display array
22:15 - we don't get that so instead
22:20 - let's do this
22:22 - so i'm actually i actually have the
22:24 - solution to this problem in the um
22:27 - in the test code so
22:30 - yay all right cool i did get it right
22:33 - idris cool
22:35 - nice to meet you
22:38 - all right let's see one more time and
22:40 - now we're going to make we're we're
22:42 - verifying that the user has this
22:47 - because this is like we're literally
22:48 - saying we want this so
22:51 - this code right here is doing that just
22:53 - that
22:58 - oh
23:02 - this needs to be placed with
23:04 - a word
23:07 - all right we'll see how that goes
23:10 - um
23:16 - well yeah chatting and chatting and
23:18 - coding
23:20 - i'm just doing a lot of refactoring i've
23:21 - been looking at this code for many hours
23:24 - so it's kind of it's a lot i'm a lot
23:25 - more familiarized with it
23:29 - cool this one should be easy we can
23:30 - probably just pop this
23:32 - in here
23:33 - and be done with it
23:37 - in fact we can take this and put it in
23:40 - here
23:45 - and then place that one above
23:50 - and we should be good to go with this
23:52 - one
23:58 - let's think
24:02 - oh yes we have our little shallow equals
24:06 - there's supposedly an assert that deep
24:08 - equals method in here but i don't
24:10 - i don't know how to use it i don't want
24:12 - to try to rely on that so i'm just going
24:14 - to keep my
24:15 - what i wrote um
24:18 - dependencies are never fun because if
24:20 - something is not working then it all
24:22 - breaks for you
24:23 - and then good this i'm asking for them
24:25 - to remove the colon which is expected
24:27 - awesome
24:31 - coding is actually fun coding is a lot
24:32 - of fun
24:37 - all right let's see
24:45 - all right so let's snag this use strict
24:47 - variable
24:50 - and we're just going to slap that in
24:55 - crap
24:56 - that's what i want not wanted to do put
24:58 - that
25:00 - come on
25:02 - there we go
25:05 - cool
25:08 - that should be okay i don't see anything
25:10 - else to do with this one
25:14 - okay we're getting through these and
25:16 - then we'll um do some live q a
25:24 - this is a larger one
25:27 - so we want to we want them to make the
25:29 - class vegetable oh
25:34 - we also want to implement you strict
25:50 - this one looks like we're just gonna
25:52 - have to um
25:56 - i don't like this
25:59 - uh could we how would this work if i did
26:01 - like let
26:03 - c
26:05 - oh nope just the wrong one node now we
26:08 - do let's see and then can can we then
26:11 - assign
26:13 - a class to c within a function let's see
26:23 - class c
26:26 - constructor
26:31 - x
26:34 - this dot y equals x
26:46 - oh something didn't work
26:54 - um
26:56 - i mean can i just reassign c is that a
26:58 - thing
27:13 - has already been declared yeah can't do
27:15 - that
27:18 - hmm
27:21 - although i can't see anything clear
27:23 - except the color green is it grainy or
27:26 - is it
27:28 - yeah i know that the syntax lighting
27:30 - here isn't really great it's because
27:31 - it's on all json so i wish it would be
27:34 - better but
27:36 - um
27:38 - right now i'm writing some code down
27:40 - here
27:41 - i can actually move
27:43 - i'll move the facecam thing so that you
27:45 - guys can see the code i'm writing
27:48 - i'll stick this up here
27:51 - cool
27:52 - so you guys can see i'm right now i'm
27:53 - trying to um
27:56 - i'm trying to see how we can declare
27:58 - like declare like
28:00 - um
28:01 - declare a
28:04 - variable and then assign it to a class
28:07 - malicious hex and my monitor freeze or
28:09 - just me my i haven't frozen yet sorry
28:12 - about that before i was writing code
28:13 - where you guys might not have been able
28:14 - to see so you might have thought i was
28:16 - frozen but i was just writing
28:18 - um off screen but so let's see
28:21 - uh keep me updated though if things are
28:23 - still causing errors
28:26 - let's see what we can do here
28:28 - can i say class
28:30 - uh class a
28:35 - what does a do a is a function but then
28:38 - kind of then
28:42 - see this isn't great this doesn't work i
28:44 - don't like this um
28:47 - because i can't run any of these tests
28:50 - i could return uh can you return a class
29:06 - a type of
29:18 - yeah i guess it does let's let's work on
29:20 - this a little bit more so let's do
29:22 - say function x
29:25 - and it's going to return
29:27 - class
29:29 - class y
29:37 - stephen what does my computer set up
29:39 - look like we never get to look at
29:41 - monitor system setup etc
29:44 - um great question i could actually um
29:46 - i'll actually do a picture um and a
29:48 - little when you go on break i'll do a
29:50 - little do a quick picture and put it on
29:51 - on twitter but i actually uh move around
29:55 - a lot a college student so i've been
29:57 - jumping around between homes and going
29:59 - between my my own home and where i go to
30:01 - school so i actually just have a laptop
30:03 - and i have a monitor and i just hdmi the
30:06 - monitor and then i have a usb mic and an
30:09 - ethernet cable and it's pretty pretty uh
30:11 - it's pretty not not too shabby set up
30:13 - but it's definitely not as high-tech as
30:15 - some other people's
30:17 - um and then dinesh says that's terminal
30:20 - ic and you're working on json yes so
30:22 - right now i'm working on a terminal it's
30:23 - an embedded terminal within vs code i
30:25 - can actually make it a little bit larger
30:26 - for you guys so you can see a little bit
30:28 - better but um right now i'm just working
30:31 - through like declaring a function that
30:33 - returns a class because we're going to
30:34 - use that in the challenge above
30:38 - but i'm just writing it in a node
30:39 - instance at the moment
30:41 - so we're going to return class y and y
30:44 - is going to have a constructor
30:46 - that is going to do is going to take in
30:49 - the character zed
30:51 - and it's going to say this dot foo
30:53 - equals zed
30:56 - and then we're going to say
30:59 - like
31:01 - uh that should be good enough and we can
31:03 - close off
31:06 - the class declaration and then the
31:08 - function declaration and now
31:10 - if we're going to say let
31:13 - um bar equal
31:16 - x uh
31:18 - crap
31:22 - well what if i did
31:26 - new
31:31 - is this gonna work let's see
31:34 - fuzz
31:40 - class constructor y cannot be invoked
31:41 - without new
31:47 - hmm
31:49 - so what if i did
31:51 - uh let
31:54 - y equal
31:56 - and then
31:59 - first let
31:59 - should just do
32:00 - bar equals
32:03 - new yy
32:04 - fuzz
32:09 - up okay
32:16 - ah okay
32:18 - what's this new why why i do
32:22 - okay cool it does do
32:23 - that um
32:29 - yeah two monitors helps a lot i can do
32:32 - i've gotten pretty good at writing with
32:33 - one when i have to um because like i
32:36 - said i find myself traveling a lot and
32:37 - working in a coffee shop or a plane or a
32:40 - train or a bus
32:41 - but um definitely there's perks to
32:43 - having a nice home set up with a double
32:45 - monitor even triple monitor um
32:47 - those are fun
32:50 - okay
32:52 - we're almost
32:54 - there okay so let's say we're going to
32:57 - say
33:00 - we're going to call this function
33:02 - make class
33:07 - and then within it
33:10 - declare that
33:12 - we have u-strict
33:14 - and then we're going to grab
33:16 - this line
33:17 - paste that in there
33:20 - snag
33:22 - you it's not you
33:27 - and then what we do
33:34 - return
33:36 - vegetable
33:41 - okay
33:42 - and then
33:44 - we're going to call
33:46 - const
33:48 - see this is a fun one we just go
33:50 - vegetable out here and this is going to
33:52 - equal
33:54 - make class
33:58 - so four monitor setup now i'm down to
33:59 - three anything less than that feels
34:01 - weird now
34:03 - and then dinesh when you are when you
34:05 - are coding while speaking it seems like
34:07 - you are you're and you're having a
34:09 - conversation
34:10 - that's just so amazing
34:14 - yeah i guess i guess it does
34:16 - and then jesse said definitely i used to
34:18 - have okay yeah um
34:20 - was it different for fun once i had like
34:22 - a desktop and i like tried to see how
34:24 - many monitors i could plug in and i
34:26 - somehow got like six monitors all
34:28 - working and it was just like i had them
34:30 - all spread around the room like there
34:31 - was no way to actually get that set up
34:32 - nicely um
34:35 - and it's just like
34:36 - really it was like really silly but it
34:38 - was hilarious to be able to be like yeah
34:40 - six monitor setup
34:46 - uh i'm having a discussion with my code
34:48 - and myself yeah
34:50 - yeah it is that's kind of how it goes
34:51 - here
34:53 - a lot of coding is talking to yourself
34:56 - so this should be a valid
34:59 - thing uh
35:07 - now when we say
35:10 - i don't want to mislead them this is
35:11 - very ambiguous let's just show that and
35:13 - then they should
35:15 - put the class declaration in there
35:22 - okay
35:23 - so this one more time let's test this
35:25 - out down here
35:27 - so we're going to solve or have a
35:28 - function
35:30 - it's going to we're just going to call
35:31 - this or actually let me um clear out
35:34 - node so i get all the variables back
35:36 - let's go ahead and write function
35:39 - foo
35:41 - is going to take in no arguments
35:44 - but it's going to return
35:47 - a class
35:51 - x
35:53 - that is going to have a very basic
35:56 - constructor which is going to take y
36:02 - and return
36:04 - no
36:06 - this dot z equals y
36:09 - close the
36:10 - constructor close the
36:14 - class
36:15 - close the function
36:16 - and then we should be able to say go
36:18 - ahead and write const
36:20 - x equals foo
36:23 - and then we should be able to say const
36:25 - bar
36:27 - equals
36:28 - new
36:29 - x
36:30 - and we're just just going to give it a
36:32 - um
36:33 - buzz
36:34 - keep writing
36:36 - this thing
36:38 - and then we should be able to go bar dot
36:40 - zed
36:41 - yes all right
36:42 - awesome that works
36:47 - so type of vegetables function and
36:49 - vegetable should have a constructor
36:50 - that's so valid
36:54 - and
36:55 - get user input assert
36:57 - get user input matches class so we want
37:00 - to use class keyword
37:02 - and then assert that constant a equals
37:04 - new
37:06 - vegetable
37:07 - apple
37:09 - yeah that's a fun that was a silly one i
37:10 - wrote in
37:14 - wow it's just just vegetable can be
37:17 - instantiated
37:19 - great
37:28 - tool um what's your what's your question
37:31 - chris
37:34 - this one all right
37:38 - yeah i love this one this so this is my
37:40 - favorite challenge i think in the whole
37:41 - section use getters insiders control
37:43 - access to an object because it actually
37:46 - is a little challenging it um you have
37:48 - to you have to create a thermostat class
37:51 - that has a constructor a getter and a
37:53 - setter and you have to implement the
37:56 - celsius and fahrenheit functions and
37:58 - it's very like it emulates a sort of
38:00 - state management that is much higher
38:02 - level with classes and kind of like you
38:04 - know more um
38:06 - just high level high level object
38:07 - oriented stuff but it's really cool um
38:10 - i hope it's not too difficult when
38:11 - people go give it a shot
38:13 - let's see dinesh i'm just made a
38:15 - function javascript that asks your name
38:16 - and tells you what your favorite dish is
38:20 - house it does is is it completely random
38:21 - dinesh or does it process like the
38:24 - characters in the name and make
38:25 - something off that
38:30 - okay so we're back on here how are we
38:33 - going to adjust this one
38:37 - um
38:37 - [Music]
38:41 - i could totally just use the same thing
38:42 - shouldn't i just the function make class
38:44 - and then have it return that out
38:46 - yeah let's do that
38:57 - how do you delete that line we don't
38:59 - want to be misled
39:02 - we go return
39:03 - thermostat
39:10 - oh okay and
39:12 - then we're going to say
39:15 - const
39:16 - thermostat
39:18 - equals
39:21 - make class
39:33 - i love this this what we're doing um
39:35 - here is really really nice though
39:37 - because
39:38 - we get to use the function we get to use
39:41 - use strict which is really good keyword
39:43 - because it makes sure things aren't
39:44 - overwritten and it throws type errors
39:46 - instead of just crashing the whole
39:47 - program
39:48 - um
39:49 - and
39:50 - we still get like a standard constructor
39:54 - um and it's not very obfuscated this is
39:56 - actually very nice syntax i wonder um
39:59 - i wonder if this could be implemented in
40:01 - other applications to make things a
40:03 - little bit easier
40:05 - uh yeah you got to tell me your your
40:07 - dish first
40:10 - my favorite food has to be
40:13 - cheesesteak
40:14 - um or as the bostonians like to call it
40:18 - steak and cheese
40:24 - all right
40:25 - and now we're on to the import and
40:26 - require challenges so i'm actually going
40:29 - to leave these because they're still not
40:31 - working at all and i don't want to try
40:33 - to mess with them so we're going to
40:35 - we're basically done here with all this
40:39 - so let's go ahead and
40:41 - run a quick
40:43 - let's push our code
40:45 - and we're going to run npm run commit
40:49 - and then we're going to do fix i'm going
40:52 - to say challenges and we're going to say
40:56 - what do we do
40:58 - um
41:00 - refactor
41:02 - es6 challenges
41:05 - what are y
41:06 - refactored
41:09 - refactored es6 challenges
41:13 - up to
41:15 - 23 i believe
41:17 - um
41:20 - up to 22
41:21 - because we didn't do 23.
41:23 - and
41:26 - to use
41:27 - function scope
41:29 - use strict i want to
41:42 - great breaking changes none none
41:45 - let it run its thing then we're gonna go
41:46 - ahead and get push origin
41:49 - fix
41:50 - es6
41:52 - challenges
41:56 - okay
41:58 - let's go check over here oh
42:01 - quincy started queuing
42:04 - let's see
42:21 - so getting error confusing messages
42:24 - all right
42:25 - so quincy's having some issues um with
42:28 - this obviously there's a little bit of
42:30 - work to do
42:31 - so let's go ahead and
42:33 - start cueing a knees ourselves
42:36 - um i wonder what is going on here though
42:41 - let's go check
42:43 - that's one of the first ones
42:55 - okay yes
43:00 - this should
43:05 - all right let's go see what's up um
43:07 - obviously some things are not working so
43:09 - we're going
43:10 - to debug and make it all work
43:14 - all right let's add another one here
43:15 - we're going to run node seed after the
43:17 - database is going running
43:25 - cool and now we're going to run gulp
43:38 - awesome
43:40 - okay
43:42 - let's go over here
43:43 - we're gonna run localhost 3000
43:48 - and that should kick us into
43:52 - the can't and we're going to start at
43:54 - number one
44:07 - saved work
44:08 - all right why is this
44:12 - oh let's reset
44:16 - here we go
44:23 - so we should be able just to go over
44:24 - here and run let
44:27 - and let
44:32 - and that should do it
44:35 - all right something went wrong let's
44:36 - check what it is
44:48 - what
44:51 - unexpected token
44:53 - what's wrong
44:55 - it's a function calling it
45:04 - let's see real quick
45:08 - you know okay
45:09 - maybe it has to do with it being an
45:11 - arrow function
45:14 - let's fix that
45:18 - but this should be a valid way to call a
45:20 - function
45:32 - maybe we can just do
45:36 - this
45:40 - that's not i don't even i don't like
45:42 - that syntax let's just update this let's
45:44 - just say
45:45 - um
45:49 - you know
45:50 - cat function
45:56 - cat talk here we go cat talk
46:07 - and then below this we should just run
46:10 - run the method cat talk
46:14 - okay
46:16 - let's go ahead and
46:18 - bash let's run node seed
46:23 - okay we're gonna also go back here and
46:24 - update quincy
46:31 - uh it sounds rainy is it going to rain
46:34 - on out there
46:37 - it might
46:38 - uh you might as well be hearing my fan
46:40 - um my computer i wish my microphone
46:42 - wouldn't pick it up but i don't really
46:43 - know how else to make it not i can try
46:46 - to place it in front of the fan
46:49 - and that might help but there's really
46:50 - not not a whole lot i can do about there
46:52 - but it actually might rain outside too
46:56 - okay working
46:57 - on
46:58 - them a lot on these
47:01 - live right now
47:03 - um the error
47:06 - you ran into
47:08 - has something to do
47:11 - with the
47:13 - function declaration
47:17 - this self
47:18 - calling function declaration
47:21 - i'm updating
47:23 - them to look
47:26 - nicer now and still use
47:31 - and still use
47:32 - use strict
47:35 - it's important that when you're working
47:36 - on open source code that you keep the
47:39 - information on the github otherwise you
47:41 - know what i might be doing right quincy
47:43 - might still be working through these and
47:45 - if he doesn't receive an update like
47:47 - this he might be spending hours
47:49 - scratching his head so by telling him
47:51 - that we're working through it and that
47:52 - this is like what's up he's like all
47:55 - right cool so he knows what's going on
47:56 - he knows how to fix it
47:58 - um someone asked can i watch the full
48:00 - live stream afterwards when it's
48:01 - finished yes you can um my live streams
48:03 - always get re-uploaded it'll take a
48:05 - little bit the process because it'll be
48:06 - quite long but they will definitely be
48:08 - there for you to watch
48:11 - um
48:13 - cool
48:14 - let's go back over here so we've we've
48:16 - done node seed let's
48:18 - gulp or let's reset
48:27 - okay it's done and then let's do a nice
48:29 - refresh here
48:35 - let's reset the code
48:37 - yep clear it
48:41 - and then if i unlock and run it should
48:43 - work
48:47 - good
48:48 - because now we gotta go here
48:57 - but var does not exist in the code
49:05 - that's confusing um
49:14 - oh
49:17 - that's silly
49:19 - there we go
49:23 - i should probably not write code at 3 am
49:26 - because errors like that happens
49:38 - cool
49:40 - refresh that
49:43 - and unlock the code and it should run
49:45 - and pass
49:47 - good stuff all right
49:50 - reset please
49:54 - you know what actually
49:56 - i'm gonna go ahead and
50:01 - how can i do this
50:04 - how do i how do i reset
50:06 - local storage
50:08 - oh
50:10 - it's in these isn't it
50:15 - local storage
50:25 - really delete everything
50:27 - is that a thing i can do
50:33 - oh great can i just delete all
50:36 - awesome all right cool
50:38 - give a nice refresh
50:41 - yeah so this browser guys the reason i'm
50:42 - able to do that and not care is because
50:44 - this browser is a dev browser that i the
50:47 - firefox dev browser um developer edition
50:50 - so like i don't use it for anything
50:52 - professional i just use it to write code
50:54 - and test code
50:58 - so this is a
51:00 - backed stuffed right
51:04 - i need you to back end back no actually
51:07 - this is all um this is very front end um
51:10 - a lot of the syntax you use in es6
51:13 - will be used in
51:15 - react and redux and a lot of the front
51:17 - end libraries you see in today's world
51:19 - all this code that you're seeing right
51:20 - now do that
51:22 - all right cool
51:24 - i love not seeing any errors over here
51:26 - because of the nice u strict so let's
51:28 - see
51:29 - var variable does not exist in the code
51:31 - so we should just do variable let i and
51:33 - then block scoped
51:41 - let's run the tests
51:46 - okay same deal probably i think the
51:48 - variable message is messed up here
51:51 - yeah looks like copied and pasted it
51:55 - okay that fixes that
51:57 - let's be verbose and check
52:17 - awesome my computer's doing a lot better
52:18 - today
52:20 - in terms of performance
52:22 - it's good to see
52:25 - let's run this
52:27 - love it
52:29 - all right
52:37 - i guess
52:45 - all right there seems like there's some
52:46 - spacing issues let's clean that up
52:54 - and i know that's not gonna work
52:57 - let's go ahead and run it anyways just
52:59 - to see
53:01 - loop protect is not defined uh-oh
53:06 - um
53:10 - i wonder what that is
53:22 - no i asked for
53:28 - protect not defined
53:38 - this looks like it's a free code camp
53:40 - error let's see
54:04 - you're in the example
54:06 - okay well i'm not trying i don't want to
54:09 - divide so this is a firefox issue let's
54:12 - see so it still gets transpiled down the
54:14 - es5 because of use of the for older
54:16 - browsers compatibility right yes all
54:18 - right great question let me talk about
54:20 - that just for a second here
54:22 - so this whole section is es6 and
54:25 - everything that is written everything
54:27 - that we write for the
54:29 - um
54:30 - for free code camp is es6 because it's
54:33 - the standard it's awesome has some
54:34 - really cool things but you're right it
54:36 - doesn't run everywhere es6 is not
54:38 - currently supported on all browsers the
54:40 - way we do that is by transpiling it
54:42 - using babel or something else but i'm
54:45 - pretty sure we're using babel and
54:48 - when we do this code you write your code
54:50 - here and then webpack actually will take
54:53 - the code chunk from here
54:55 - put it into an object and then before it
54:58 - transpiles it using babel it actually
55:00 - stores it in a variable called get user
55:03 - input which is why we're using it right
55:06 - here get user input we're passing out
55:08 - that's a variable and then
55:10 - we pass it through we can do we can do
55:12 - stuff with it we can test it we can run
55:14 - regular expressions against it we can
55:15 - run the code inside of it all normal
55:18 - in es6 because whenever code is executed
55:21 - in this environment it's transpiled with
55:24 - babel first and then the output is sent
55:27 - so
55:28 - um
55:29 - when you have words like let and
55:31 - constant and const they will
55:33 - automatically get changed to the too far
55:36 - appropriately um
55:38 - through the use of something awesome
55:39 - like babel
55:41 - um right so i'm having an issue with
55:43 - loop protect which seems sounds like
55:45 - it's a firefox error
55:54 - is not defined on not defined problem on
55:56 - beta
56:00 - yes
56:02 - ah they're experiencing it in chrome as
56:04 - well
56:29 - um
56:43 - let's see
56:46 - where did he add this
56:48 - re-challenge builders
56:53 - that should fix this i'm going to assign
56:55 - myself to this
56:56 - and i'm going to review his code in a
56:58 - little bit
57:13 - and we're actually going to do live
57:15 - github stuff okay we're going down the
57:17 - rabbit hole
57:19 - i'd like to
57:22 - what is he doing
57:36 - this looks good to me
57:39 - um i'm just going to say
57:43 - actually we'll do it over here all day
57:44 - we'll say review changes say
57:46 - looks good to me
57:49 - going to
57:50 - um
57:52 - run locally
57:54 - and test with
57:57 - one of my
57:59 - es6 challenges
58:08 - next
58:09 - and approve
58:11 - if it solves
58:13 - the
58:16 - loop
58:16 - protect
58:18 - issue
58:25 - okay
58:30 - we will hold off on this for now
58:33 - but we're going to make a note of it
58:35 - so what challenge is this
58:37 - declare a read-only variable with the
58:39 - cons keyword where is that where can i
58:41 - write that
58:44 - i'm just going to go ahead and just
58:46 - link everything together
58:50 - to do
58:51 - tests
58:54 - with
58:58 - all right cool
59:05 - um sorry did not want to
59:08 - get rid of that cool
59:11 - okay back to this let's um skip to the
59:14 - next problem
59:19 - which one did we just use
59:23 - all right mutated array declared with
59:25 - const let's go
59:31 - okay
59:33 - how does this one go if we do
59:49 - something went wrong please try it yeah
59:51 - okay
59:51 - same deal here this kind of function
59:53 - declaration just is not working
60:04 - function edit in place
60:22 - okay
60:25 - i should fix this let's go ahead and run
60:27 - node seed
60:44 - cool
60:47 - refresh
60:52 - reset
60:54 - clear the code
60:57 - what's wrong
60:59 - ah
61:03 - missing semicolon
61:07 - okay
61:15 - two
61:19 - five
61:21 - seven
61:23 - run it and
61:25 - pass great
61:28 - okay got the same deal here let's go fix
61:30 - the function declaration
61:37 - um
61:40 - i'm going to call this function
61:42 - freeze
61:44 - object
62:12 - cool cool
62:17 - it's great to reset all we should have
62:19 - to do is write object dot freeze
62:24 - math constants
62:32 - uh oh
62:43 - oh
62:48 - i see
62:53 - so
62:56 - can we do a can i go try
63:02 - is that this is valid
63:07 - and then when it doesn't work catch
63:11 - exception and then
63:21 - math constance is not defined
63:25 - i see let's see what says
63:30 - i'm actually going to write grab this
63:46 - okay we're getting there
64:10 - this is
64:12 - [Music]
64:27 - awesome and now
64:38 - i see so that's that's an issue
64:42 - let's return
64:53 - and then let's go ahead in here and
64:55 - write return
64:59 - math
65:00 - constants dot
65:02 - pi
65:05 - okay and then we should be able to go
65:07 - ahead and
65:09 - say
65:10 - const pi equals
65:14 - that
65:16 - i know it's a little not optimal but all
65:18 - right let's see how did you get to be
65:19 - the person that writes the challenges
65:21 - for free code cam
65:22 - i've been contributing for free code
65:24 - camp for a few months now and
65:27 - uh quincy reached out and said we need
65:30 - to get this ready to go by christmas and
65:32 - i know you know new i know you know es6
65:35 - and i know you know how to write
65:36 - challenges so
65:38 - right all the es6 challenges and i was
65:40 - like
65:41 - yes let's do it so now we're doing it
65:46 - um
65:48 - let's keep that there
65:50 - and then
65:51 - [Music]
65:54 - go ahead and write assert
65:57 - pi
65:58 - equals 3.14
66:03 - message
66:06 - say i want to actually have this
66:10 - we want to write code
66:13 - pi
66:16 - equals three point four
66:41 - reset gulp and let's get right back into
66:44 - it
66:46 - okay
66:47 - refresh
66:53 - reset
66:54 - yes please
66:58 - i'm missing a semicolon okay
67:05 - check stuff freeze
67:14 - ah
67:15 - okay i'll fix all that
67:24 - okay
67:35 - let's get rid of this real quick
67:37 - something's going wrong i don't know
67:39 - what it is
67:50 - okay let's just try this
67:55 - how did you contribute to free cocaine
67:56 - in the first place um
67:58 - i don't know what my first free code
68:00 - camp thing was um
68:03 - but i know i got into
68:06 - just the general curriculum
68:08 - um probably doing some styling or
68:11 - some basic challenge review
68:14 - and then
68:15 - i
68:16 - did a lot of contributing for some other
68:18 - projects like react and node.js as well
68:20 - as did my own github stuff
68:23 - learned more github skills kept up with
68:25 - the free code camp repository um started
68:28 - taking on some more challenges um even
68:32 - uh began work on a python curriculum for
68:35 - a bit
68:36 - but that has fallen through at the
68:37 - moment um
68:39 - and then
68:41 - from there
68:42 - i transitioned into
68:45 - uh the guides platform pretty heavily um
68:48 - doing a lot of review for that as well
68:50 - as
68:51 - doing some leg work on um
68:53 - fixing some things and you know
68:56 - some of the some of the back end code
68:58 - for that setup
69:00 - and then
69:01 - from there i got invited to work on
69:05 - the free code camp project to do the
69:07 - challenges
69:08 - sebastian says typo question mark
69:12 - um
69:14 - let's see
69:16 - yes you're right
69:17 - that probably is it
69:20 - let's see
69:24 - math constance
69:27 - there we go
69:29 - should be constance
69:32 - see i would have taken forever to figure
69:34 - that one out
69:36 - that's the issue with writing and json
69:38 - is that you don't get you don't get to
69:40 - know if your variable is like correctly
69:41 - named or not
69:57 - i'm just going to snag this line
70:01 - and reset the code so i can make sure i
70:02 - see it from a good slate
70:05 - makes no errors paste that in
70:08 - unlock and run
70:12 - i still spent i still spelled it wrong
70:16 - where
70:24 - oh in my object line
70:33 - finally
70:35 - all right let's go fix up this one
70:48 - yeah i don't even know what i was doing
70:49 - here this is an easy one
70:59 - it
71:09 - we don't even need these we to change
71:11 - the whole like basically we're going to
71:12 - be able to change the whole function
71:14 - here
71:29 - yep
71:32 - yes sebastian the chat is about 30
71:34 - seconds behind me so
71:36 - um sometimes i will uh see i'll like
71:40 - you'll you'll see something but you'll
71:42 - see 30 seconds later i'll already have
71:43 - seen it but thank you though for
71:45 - pointing it out
71:53 - it's just good enough is that all we
71:54 - need to do yeah because all they're
71:55 - doing here is changing it to
71:58 - the other thing
72:01 - excuse me
72:20 - martin is that what so
72:23 - it's not
72:24 - the only it's not like contributing to
72:27 - open source does not guarantee a job um
72:29 - nor is it a requirement
72:31 - but it definitely helps um i actually
72:35 - hopefully a blog post should be getting
72:37 - published soon um on the free code camp
72:40 - publication on medium that talks about
72:42 - that that was me sharing my experience
72:45 - and how contributing to open source has
72:47 - gotten me into um has gotten me into
72:52 - my current internship position
72:54 - and
72:55 - it definitely does help um but it is not
72:58 - necessary
72:59 - and you can achieve
73:01 - uh
73:02 - internships or full-time positions
73:04 - without open source contributing
73:07 - um
73:09 - but yeah as jesse is just just pointing
73:11 - out it is definitely a very big help
73:46 - right we're getting through these
74:04 - take you
74:07 - come on
74:11 - oh well that's not what i wanted but
74:13 - whatever at this point
74:17 - uh
74:19 - take that away good
74:24 - and we're just basically going to lead
74:25 - up to here
74:35 - get rid of this line
74:45 - yeah sebastian's right um i talked last
74:47 - time about how
74:49 - applying your code is a lot better than
74:52 - just learning it because
74:54 - anyone can sit down and watch a youtube
74:56 - video over and over again but it's until
74:58 - you apply that code where it really will
75:00 - stick and then if you can produce
75:02 - something even if it's as simple as a
75:04 - static website but it's written with
75:06 - react or written with view and then you
75:09 - know you you use gatsby to bundle it all
75:11 - up and then you deploy it on heroku
75:14 - those steps are monumental to a
75:17 - bigger project and if you can just show
75:19 - someone or an employer that like hey
75:21 - i've done this before on a much smaller
75:24 - scale but i've done it i'm familiar with
75:26 - it they'll be like that's awesome we'll
75:28 - take you we'll teach you how to do it on
75:31 - a larger scale and then you'll be you
75:33 - know
75:34 - the next best thing on this team
75:36 - um
75:37 - so yeah don't ever think that you need
75:39 - to like make your own facebook for it to
75:42 - count like every tiny small project
75:44 - makes a big impact um just make sure
75:47 - you're able to talk about it and talk
75:48 - about the tools you used and
75:50 - um things you learn things you didn't
75:52 - learn all that kind of fun stuff or
75:54 - things you failed and learned from
75:57 - all right
76:00 - function declaration
76:11 - with you strict
76:20 - this should be good
76:22 - all right let's run this
76:47 - good
76:48 - and then
77:06 - cool
77:07 - but i think i want to change this to var
77:09 - there we go
77:30 - um
77:31 - is it getting an interview or is it
77:34 - passing the interview martin
77:37 - um because getting interviews
77:40 - there's
77:41 - uh that's just resume and side projects
77:44 - you need to be able to show them that
77:46 - you've done some cool stuff
77:49 - through a piece of paper and
77:52 - you know there's a lot of tips there's a
77:53 - lot of tips you can get on that
77:55 - the next step is acing the interview
77:58 - that is a serious
78:00 - um it's a challenge you know it's not
78:02 - like you're not gonna i'm not gonna lie
78:03 - it's a challenge but there's but there's
78:06 - so many things you can do um and i bet
78:08 - you're doing them but you just gotta
78:09 - keep it up and uh keep trying you know
78:13 - working on side projects and then being
78:15 - able to talk about them quickly
78:17 - um doing like coding challenges knowing
78:19 - your algorithms knowing your data
78:21 - structures um and maybe consider
78:23 - starting out like
78:24 - depending on how much you're shooting
78:26 - for like if you shoot directly to
78:28 - facebook or microsoft or amazon or any
78:31 - of the big companies it's gonna get
78:33 - difficult very quickly and those
78:34 - interview sessions can be very
78:36 - competitive if you can go with some you
78:38 - know more smaller teams or maybe
78:40 - something that's a little bit less
78:42 - esteemed at first work through there and
78:45 - then apply later down the road that
78:47 - might go a lot better for you because
78:49 - it's definitely going to be easier to
78:50 - get a job at a different tech company
78:52 - than it would be to go and work for like
78:54 - amazon or facebook where they have some
78:56 - pretty intensive
78:57 - um interview
78:59 - processes
79:06 - what did i change here
79:09 - oh i had to change all this
79:11 - all right we're getting through it
79:14 - so
79:20 - i'm gonna go ahead and write a function
79:22 - called
79:27 - square
79:28 - list
79:49 - getting an interview
79:51 - um
79:52 - resume resume resume resume um
79:58 - it's worth it to take a class you know
80:00 - see if there's any programs in your
80:02 - local area universities do a lot of
80:05 - career prep
80:12 - yeah the the interview processes at
80:15 - these big companies can be a little
80:16 - ridiculous
80:17 - [Music]
80:18 - they are they can be quite difficult but
80:21 - they are changing um
80:23 - when i uh
80:25 - when i interviewed with microsoft i
80:27 - didn't have to do a single coding
80:28 - challenge um
80:30 - so there is there is times when you can
80:35 - uh when those when those larger
80:36 - companies are changing their ways but um
80:38 - it's a way to show
80:40 - the the coding challenges i've seen are
80:43 - it's a way to demonstrate a little bit
80:45 - of aptitude
80:47 - um
80:48 - yeah
80:49 - preparation is
80:51 - ridiculous i was spending a lot of time
80:53 - doing that
80:55 - it's definitely tricky and it's
80:57 - definitely not it's definitely not the
80:59 - way it really should be but sadly it is
81:01 - and you kind of have to
81:03 - play the game and then eventually you
81:05 - won't have to any longer you know
81:07 - suck it up and get that first job
81:09 - through the interview through that
81:10 - horrible interview process and then you
81:12 - should be good
81:14 - uh that's a shame
81:16 - reach out to other ones though other
81:18 - universities sometimes have public
81:20 - programs too you know they don't a lot
81:22 - of universities aren't just like for
81:24 - their students i know mine has you know
81:27 - they could reach out and they would they
81:29 - would provide um their resources if
81:31 - someone asked
81:33 - also just general career help that knows
81:36 - a lot of websites on online that have
81:38 - resources
81:40 - all right let's go from here so function
81:43 - square list passes the array and we just
81:46 - want to so we're going to want to say
81:47 - const
81:50 - squared integers
81:55 - snag this chunk
81:59 - delete all that
82:01 - and paste that in there
82:13 - udemy also has some good courses um
82:16 - and they tend to be a little bit cheaper
82:17 - than udacity unless some sometimes you
82:19 - can find the free udacity programs
82:22 - um there's also plenty of websites too
82:27 - let's see where we're going
82:29 - you just want to be able to return this
82:49 - and then we should be able to say go
82:50 - ahead and write
82:53 - const
83:01 - but yeah this won't work yeah you like
83:04 - you're actually sorry let's do
83:23 - i want to say const
83:26 - squared
83:29 - oh sorry square
83:31 - list
83:33 - i want to write real number array
83:39 - uh but we want to first want to write
83:41 - squared
83:42 - integers equals
83:58 - um
84:13 - i think the reason why people encourage
84:16 - you people to go into development is
84:17 - because it's a growing industry um it
84:20 - has a projected
84:22 - job growth that far exceeds other
84:25 - um
84:26 - other job paths
84:28 - um
84:31 - i know
84:33 - everyone is really encouraging until you
84:34 - actually looking to get a job
84:36 - yeah that is uh that is a challenge and
84:38 - it's kind of
84:40 - because it's hard
84:41 - um
84:43 - then it's back to only wanting the top
84:45 - percent
84:47 - um
84:48 - well i mean from a professional
84:50 - standpoint
84:51 - you don't really want to hire people
84:53 - that aren't going to like do the job
84:55 - well but that said there's a lot of
84:57 - companies that still hire and then they
84:59 - want to teach you on the job um so
85:01 - there's a balance there
85:04 - anyone can be a developer it takes a lot
85:06 - of work to get to that like developer
85:08 - standpoint because you know you aren't
85:11 - um
85:13 - i would say this you aren't like a full
85:15 - developer until you're writing code that
85:17 - is being used by the world up until that
85:20 - point you're just learning you know i'm
85:21 - still learning i haven't written
85:23 - anything that uh is people are directly
85:26 - interacting with up until with my open
85:28 - source work um
85:31 - so there isn't balance between the like
85:34 - learning and you know going for the job
85:36 - and then while being in a job
85:46 - all right we're going with here
85:54 - okay this should be good to go to test
85:56 - this
86:18 - let's refresh
86:27 - okay
86:28 - if i remember this correctly which do
86:30 - dot reduce
86:33 - and then it's
86:34 - accumulator value
86:38 - and then the return
86:41 - which is
86:43 - number
86:44 - dot is integer
86:47 - value
86:49 - then a dot concat
86:52 - v times v
86:54 - or return a
86:57 - and make sure you pass in
86:59 - that guy
87:06 - oh
87:37 - how is it any different whether it is
87:39 - deployed publicly for company or not
87:41 - though
87:42 - in what sense like the code that i've
87:45 - written for open source
87:47 - and how that differ okay i think i know
87:49 - what you're getting at the difference is
87:51 - if you're just publishing code on open
87:54 - source
87:55 - that is not it is it's awesome because
87:57 - they can see it
87:58 - um
87:59 - but then it's another thing if you're
88:01 - contributing to currently active
88:03 - projects because
88:05 - little bits of my code currently run
88:08 - in node.js and react.js and having my
88:12 - name in those repositories
88:14 - means something it shows that you know
88:17 - my code is being used by people and that
88:20 - tiny factor i think is what
88:22 - employers really enjoy seeing
88:27 - so if you can if you can
88:29 - uh do that basically
88:32 - and get you know where even free code
88:34 - camp that's the one of the i love
88:36 - working on free code camp because um
88:38 - it's a lot easier to get into and it's a
88:40 - lot uh it's a lot easier to teach people
88:42 - how to use it and it means all the same
88:45 - you know you're writing code that
88:46 - thousands of people are going to be
88:47 - using so if you can
88:49 - if you can benefit and work on
88:52 - free code cam that would do
88:54 - a lot of good things
88:57 - okay let's see if we run this should we
88:59 - pass everything yay but i want to update
89:01 - the thing over here
89:10 - const equals
89:13 - equals
89:15 - cool all right
89:27 - ugh
89:45 - see what it is
89:51 - non-simple parameter in strict mode
89:55 - uh
89:56 - what
90:08 - does it not let you do
90:12 - let's see this
90:27 - all right so
90:51 - i don't like that syntax though
90:53 - um should i not do tutorial too
91:06 - um martin to answer your
91:08 - first thing
91:10 - keep doing full stack projects and
91:12 - publish them on github um
91:14 - that are those are great things to have
91:16 - on there
91:17 - and answer your second question
91:20 - yes
91:21 - um
91:22 - how
91:23 - looking around just constantly starring
91:26 - different repositories that i use
91:29 - and um
91:31 - well i know you might not be interested
91:32 - in a specific repo but if there's a
91:34 - thing that you use like react for
91:36 - example i love using react so i start it
91:38 - and then i look through its issues every
91:40 - now and then if i see something that's
91:42 - labeled as beginner friendly i grab it
91:47 - otherwise with free code camp i knew
91:49 - specifically the goal with contributing
91:51 - a free code camp
91:52 - because it was easy to get into and now
91:55 - i'm making a big difference writing some
91:57 - really awesome code
92:03 - amy martin that's if that's what your
92:04 - intentions are um you know just doing it
92:07 - to get better and looking to get a job
92:11 - then just do it if that's you know if
92:13 - that's what's if that's what you're
92:14 - reasoning behind open source is then go
92:16 - for it um
92:18 - you know
92:19 - if you're gonna write good code and make
92:21 - projects better then
92:23 - doesn't matter what your reasons are i
92:24 - would totally recommend you go for it
92:27 - and maybe start with free code camp
92:29 - there's plenty of challenges there's
92:30 - plenty of issues open on the free
92:32 - codecam project
92:33 - and they have a really active
92:34 - contributor channel getter channel that
92:37 - they can help you if you run into any
92:38 - snags while said setting up or running
92:41 - through the code
92:43 - all right let's implement this though
92:48 - how does that look
92:54 - this one here var
92:58 - increment
92:59 - equals
93:03 - let's see
93:06 - function
93:20 - oh
93:32 - i believe so martin that should work um
93:36 - hello how you doing today manchu
93:52 - hmm
94:14 - okay let's see if this works
94:22 - that's okay martin everyone's got to
94:24 - start somewhere i re uh free code camp
94:27 - is a really good one to get started with
94:30 - both the beta project as well as guides
94:32 - have some really nice um
94:35 - open issues
94:59 - awesome
95:00 - sweet
95:05 - next challenge has arrived oh how many
95:08 - have we done so far
95:10 - use the rest operator with function
95:12 - parameters
95:15 - i don't know which number that is
95:20 - use the rest operator
95:25 - oh wow we've done a few one two three
95:28 - four five six seven eight nine ten all
95:31 - right cool
95:32 - um i'm actually going to do this one and
95:35 - then take a quick break just two or
95:37 - three minutes and then we'll get right
95:39 - back into
95:40 - um going through the next few
95:44 - cool um
95:48 - this one looks pretty done so far let's
95:50 - see
95:51 - ah it wants me to destructure so i think
95:53 - this is gonna give another issue but
95:54 - we'll try it anyways
95:57 - yep
96:31 - is this it
96:34 - oh
96:36 - same deal all right we gotta wrap it
96:49 - i want i wanted to ask why too much
96:52 - javascript framework
96:54 - um
96:55 - can you clarify please i'm not sure what
96:56 - you're trying to ask
97:00 - why why too much
97:02 - javascript framework
97:04 - is there a specific one you're asking
97:05 - about like react
97:49 - okay
98:15 - oh wow oh that's a great question um is
98:17 - martin is clarified
98:20 - why are there so many um
98:23 - it's a good question i think
98:25 - there's i mean there's definitely a
98:26 - point of you know certain companies
98:28 - built their own and then open sourced it
98:30 - and said this is what we use you guys
98:31 - should as well um i know like you know
98:33 - angular started and then google now
98:35 - acquires it now google uses angular all
98:37 - the time and then
98:38 - um react was released by facebook and
98:41 - everyone's using it and then you know
98:43 - people realize that angular and react
98:45 - were quite large so they just created
98:47 - their own like view um but there's also
98:50 - some before those like backbone and
98:52 - ember um that all have their pros and
98:54 - cons um but i don't know much about them
98:56 - to go into detail but basically people
98:59 - build different frameworks for different
99:00 - reasons and then
99:02 - they release them because it's what they
99:04 - use at their company or whatever and
99:06 - then the community
99:07 - if the community enjoys using it then
99:10 - they keep pushing it
99:14 - yep mine's about right just you know
99:15 - people make it to suit their own needs
99:17 - you know react was developed for
99:18 - facebook and then people then they
99:20 - realized how awesome of a framework it
99:22 - was and just decided to release it and
99:24 - now they support it for everyone and
99:25 - it's turned into an incredible
99:27 - incredible framework
99:28 - angular has moved into more of an
99:30 - enterprise direction
99:32 - um
99:34 - so you won't so you'll see because it's
99:36 - now in full support of typescript which
99:38 - react is not but angular is and a lot of
99:41 - larger companies especially enterprise
99:42 - level companies like google and
99:44 - microsoft really love using typescript
99:47 - so
99:48 - angular's direction now is more
99:49 - enterprise will react as more developer
99:52 - um
99:53 - yeah
99:54 - plenty of different differences
100:07 - see
100:10 - yeah
100:25 - ah we gotta return this
100:32 - now i can't remember
100:34 - if you just do
100:37 - arguments
100:42 - cool
100:55 - okay guys so i just finished this one
100:57 - let's um
100:59 - give me a few minute break and then just
101:02 - going to be two or three minutes and
101:03 - then we'll be back to do the next few
101:05 - actually before i leave let's commit to
101:07 - github
101:08 - um
101:10 - always a great thing to do
101:20 - oh there's there's actually a refactor
101:22 - that's interesting i didn't know that
101:24 - let's um
101:28 - test
101:30 - challenges qa es6
101:34 - challenges
101:41 - yeah martin yes um one cool thing with
101:44 - javascript this is imposed by tc39
101:48 - guidelines is
101:50 - any once they make a decision about how
101:52 - something is going to work it will not
101:54 - change so for example the spread
101:56 - operator the three dots that will
101:58 - forever
101:59 - destructure things like it does in es6
102:02 - and when es7 and 8 and 9 and wherever
102:05 - javascript goes in the future
102:07 - the three dots will always destructure
102:09 - just like objects can always be accessed
102:13 - by um
102:14 - the array blocks and by dot notation um
102:18 - those will not change and that's a part
102:20 - of the way tc39 runs
102:22 - if you don't know tc39 is the like
102:26 - people that make decisions about esx in
102:27 - the direction of the language and the
102:29 - standards
102:30 - um
102:32 - give descriptions what changed why what
102:34 - optional um
102:36 - refactored es6 challenges
102:42 - getting tested
102:44 - and q8
102:49 - nothing nothing
102:51 - cool i'll get push origin fix
102:55 - es6
102:57 - challenges
103:01 - awesome all right
103:04 - where can you get the code
103:08 - which i'm doing right now yeah i cannot
103:10 - show you guys the
103:12 - stuff
103:13 - um
103:15 - if you'd like
103:18 - i don't know if this will let me post a
103:20 - link
103:21 - but
103:22 - here we go
103:27 - so that was the link to
103:30 - the github
103:31 - um challenge it's or this is the pull
103:34 - request pull request
103:37 - number
103:39 - 16
103:40 - 262
103:43 - and
103:44 - um
103:46 - that's where all my code is currently
103:47 - sitting
103:50 - and there's the chow and then there's
103:52 - the um where we are addressing
103:56 - issue number
103:57 - 16 254.
104:00 - okay
104:02 - right be right back guys
104:08 - be right
104:09 - back
106:56 - whoa whoa hello hello
106:59 - all right let's see
107:00 - one question always if i'm learning one
107:03 - framework and doing project with same
107:05 - framework
107:11 - new project with new framework
107:33 - uh archer needs you to uh so am i i'm
107:36 - able to learn and code
107:38 - in required framework yeah
107:41 - um i uh i've said it before but um
107:44 - applying something that you're learning
107:46 - is the best way to
107:48 - in semester oh yeah for sure you don't
107:50 - ever need to fully master framework
107:52 - there's
107:53 - trust me there's there's many aspects of
107:55 - free of uh react that i still
107:57 - no clue and probably will never use or
108:00 - maybe not told a very small you know
108:02 - niche case in the future but that
108:04 - doesn't mean that i'm not that i don't
108:06 - have that i'm not confident with my
108:08 - react skills um
108:10 - just applying it keep building projects
108:13 - even when you're learning it's the best
108:14 - way to do it um so definitely keep it up
108:17 - all right
108:18 - let's get back into it let's see what we
108:19 - got here if we have any comments
108:23 - okay we gotta make sure we go back and
108:24 - test that one
108:26 - um good so the commit came through
108:28 - everything is building correctly still
108:31 - good to see
108:38 - let's see
108:48 - don't you know man get it have fun you
108:50 - know i've never used i think you meant
108:52 - to write couch i've never used couchdb
108:54 - before um unless there's something
108:56 - called pouchdb but i know there is one
108:58 - called couch
108:59 - electron is a lot of fun and
109:03 - you know
109:07 - um
109:09 - yeah there's too much to know everything
109:10 - so just
109:12 - use what you can keep building have fun
109:14 - with it
109:16 - no one's expecting you to just become a
109:18 - master of one framework um
109:22 - that's a little crazy
109:23 - all right
109:26 - what are we doing with this one ah
109:28 - spread operator
109:46 - uh
109:58 - i think all we have to do here is go
110:02 - change this to function
110:05 - and i think we add it out here that
110:07 - should fix it
110:15 - let's run node
110:18 - i'll do it oh well let's go do it in
110:21 - here
110:26 - pouchdb works in the browser and can
110:28 - sync with couchdb oh cool
110:30 - yeah i've never i i just know about them
110:32 - i've never actually touched them um i'm
110:34 - a big fan of
110:36 - and firebase for a while now the new
110:39 - firestore um
110:42 - but
110:44 - plenty good reasons to use other things
110:55 - don't break on me come on
110:57 - there we go
111:00 - oh that's not how you write function
111:12 - cool
111:26 - oh cool
111:29 - interesting i'll have to keep that in
111:30 - mind i was trying i'm uh currently
111:33 - thinking about a offline capable app
111:36 - the app can still store and read data
111:38 - from pouch and when there is a network
111:39 - connection it can sync with couch oh
111:41 - cool so i was going to do something
111:43 - similar but i was just going to local
111:44 - storage at all
111:47 - and then just using reacts thing
111:49 - whenever the like whenever the app like
111:52 - loads up it would check the local
111:54 - storage and be like yo is there
111:55 - something in there if there is
111:57 - it would like commit it to the database
111:59 - um but all right cool pouching couch
112:01 - that sounds fun
112:04 - do you guys know if it's a nosql or sql
112:07 - based database or does it not matter
112:09 - it's more of like a wrapper
112:30 - airbnb is popular martin um
112:33 - yeah go with the airbnb um the standard
112:36 - eslint options are very standard and um
112:39 - they actually get changed quite often
112:41 - um but no one's going to be judging you
112:43 - based on your syntax really as long as
112:46 - it's readable
112:47 - um i would also recommend looking into
112:48 - the prettier um project
112:51 - and using prettier to style your code um
112:53 - i've found that that
112:55 - is a lot easier than using eslint and
112:58 - doing it manually
113:02 - okay
113:15 - oh well
113:18 - something's broken in here let's see
113:19 - what it is
113:36 - nope right here
113:43 - uh
114:01 - oh no sql awesome
114:04 - is it a key value or document based
114:13 - databases are my like favorite thing in
114:16 - the world i hope to
114:18 - study them more in the future
114:36 - why is nothing working here
114:48 - oh nope that's not what i wanted
114:54 - i figured how to just run the con run
114:56 - the code
115:00 - i should know
115:04 - yeah um prettier formatter for visual
115:06 - for vs is a great one um prettier is
115:08 - just a framework
115:10 - but you can um it can be but it's been
115:12 - like ported to like different types of
115:13 - editors so you could just auto pretty
115:16 - auto profiles
115:17 - undefined why is that undefined
115:20 - oh
115:21 - i failed i didn't even do the task here
115:23 - we go
115:26 - there we go
115:29 - what did it change over here though
115:33 - um
115:35 - document based with json awesome
115:39 - best book to learn data structures and
115:41 - algorithms in javascript oh friend let
115:43 - me tell you um
115:48 - this one right here
115:50 - introduction algorithms i don't know who
115:52 - it's by but
115:56 - here
115:59 - um
116:06 - thomas
116:08 - h corman
116:11 - charles
116:13 - learson
116:15 - ronald rivest
116:19 - clifford stein
116:21 - highly recommend that one
116:23 - and then data structures
116:25 - oh i don't want to read it
116:27 - here we go fourth edition
116:33 - data structures
116:36 - with abstractions
116:39 - with java
116:42 - frank m
116:44 - carano
116:46 - timothy
116:48 - m
116:49 - henry
116:50 - two phenomenal books um they are
116:53 - textbooks college textbooks but
116:56 - uh i
116:58 - best thing ever you know there's they
117:01 - don't get any better than that that
117:02 - algorithms textbook is like the best
117:04 - thing ever the data structures one is
117:06 - um you know it has its pros and cons but
117:15 - yeah i was just writing it down so if
117:17 - you wanted to copy and paste be a little
117:18 - bit easier
117:22 - okay
117:23 - we're on to the next one guys
118:01 - four case is not defined
118:04 - good shouldn't be
118:15 - well just
118:16 - just because i just wanted to
118:19 - but that was an easy fix
118:21 - great
118:28 - that needs to get fixed
118:34 - real quick am i crazy or
118:39 - yes see this is wrong that should get
118:41 - let me edit that
118:44 - just in case ever someone ever comes by
118:46 - and asks
118:52 - better
118:54 - okay
118:59 - and this is this one
119:02 - so berkeley approved them
119:04 - um
119:06 - cool we'll get to that one soon
119:11 - so we just made a basic edit over here
119:14 - oh come on
119:17 - great and that was what we do just wants
119:18 - me to do this
119:38 - put that there
120:09 - oh that's an issue so see this oh
120:14 - i can't do that here
120:22 - let's just return the right
120:33 - crap okay
120:34 - gotta fix this one up let's re-name this
120:36 - function
120:39 - um
120:41 - remove
120:44 - first two
120:50 - all right have a good one jesse have a
120:52 - have a good night himanshu
120:54 - glad you guys enjoyed it
120:57 - thank you for thank you for coming
121:05 - i hope it's not the last either him
121:06 - aren't you i do well there's plenty of
121:09 - these on free code camp so make sure to
121:10 - come by in the future
121:12 - i'm glad
122:12 - okay
122:42 - awesome
122:51 - oh hi sammy you're welcome for that
123:19 - so
123:28 - oh okay something went wrong
123:39 - ah use the structuring and
123:41 - that can't do that
124:09 - you
124:22 - [Music]
124:26 - we're getting there we're getting there
124:35 - okay we gotta grab
124:37 - all this code right here
124:44 - apologies if you guys can hear the dogs
124:46 - barking i think there's a boat coming by
124:55 - oh wait actually these need to go out
124:57 - there
124:58 - now this line
125:00 - gets to go up here instead
125:12 - okay
125:29 - i'm so excited for these all to be ready
125:31 - for everyone to run through themselves
125:34 - all right i'll um start talking about
125:36 - what i was just doing
125:38 - so
125:39 - basically
125:41 - i forgot a semicolon um
125:45 - es6 an es5 there's this awesome mode
125:48 - called strict mode which basically
125:51 - keeps
125:51 - things from going wrong doesn't it it
125:54 - prevents the user from writing bad code
125:56 - um like rewriting over variables and
125:58 - stuff
125:59 - now there are some rules with you strict
126:02 - for example you're technically not
126:03 - allowed to destructure variables or
126:08 - assign defaults within a function
126:10 - declaration of your strict which is what
126:12 - happens when you put you strict within
126:14 - the function that you're going to do the
126:16 - destructuring in
126:18 - so
126:20 - by
126:24 - by doing what i just did
126:27 - hopefully
126:30 - uh hold on a second
126:32 - by doing what i just did
126:34 - this will still implement you strict
126:37 - over this function but will then still
126:40 - let us go ahead and do our
126:42 - destructuring in
126:45 - inline
126:48 - so
126:51 - plus i personally think this code looks
126:53 - pretty baller
126:55 - awesome all right let me clean this up a
126:57 - little bit before we move on
126:59 - so i want it to look like that
127:05 - i want a space oh please don't
127:08 - i want to paste that in
127:11 - do we want a space above no we want it
127:13 - right up against it good
127:15 - remove this line i want to place it
127:17 - right here
127:20 - and then i'll put one more line in there
127:28 - cool
127:30 - all right we are moving right on through
127:37 - all right
127:46 - know what's going on here
127:50 - let's get rid of this console log
127:54 - um and replace it with a
127:56 - white line
127:59 - white space
128:01 - white space
128:03 - we should be golden
128:05 - actually
128:10 - there we go
128:13 - actually take this line and place that
128:15 - one above it ah crap nope
128:18 - it's not there
128:21 - okay
128:24 - so just to emulate that let's just
128:26 - delete this line
128:28 - all right know what this one does so we
128:29 - have to do
128:30 - a raw
128:32 - dot
128:33 - map
128:36 - and then we're going to pass
128:41 - the value
128:43 - to the template literal which is
128:46 - ally class equals
128:48 - text warning
128:50 - and then we're going to do
128:52 - the v in right there oh no we'll send
128:54 - syntax
128:56 - v right in there
128:58 - and then close off this little thing
129:00 - majig
129:02 - and get that going there
129:06 - and we should be
129:08 - golden
129:16 - we have to go ahead and then do
129:21 - cons to result display array
129:27 - equals make list result dot
129:32 - failure
129:36 - awesome
129:38 - snag this
129:41 - and sneak it in
129:44 - right here
129:53 - yes martin an entire lesson section is
129:56 - one json file
129:58 - um
129:59 - the dream would be for it to be way
130:01 - easier to edit but at the moment this is
130:04 - what we're doing
130:06 - and
130:07 - it does have a little bit of learning
130:08 - curve but it ain't that bad once you get
130:11 - to know it
130:22 - okay
130:28 - did we remove
130:31 - yeah i fixed everything else up
130:46 - nope every challenge is just one every
130:49 - section is just one big json file
130:51 - um
130:53 - the json is
130:55 - processed and stored in a database
130:58 - and then we take that database and
130:59 - then that's what we pump into
131:01 - the
131:02 - um
131:03 - the client through
131:05 - like when they when you want this page
131:07 - it goes and reaches into mongodb is like
131:09 - i want this and builds this challenge
131:32 - uh-huh
131:46 - what's the meaning of life
131:55 - yes martin um
131:58 - the
132:01 - in here we actually it's like when we
132:03 - want to build these code blocks
132:06 - every new line is considered a entry
132:09 - into the list
132:10 - and then you can also input like html
132:13 - like block quote code hr br to break on
132:17 - the line
132:18 - when it comes to the challenge seed this
132:20 - code is what's rendered into here
132:23 - so
132:24 - the way you write that is you use just
132:27 - you write your javascript code but you
132:28 - have to put in all your it um
132:31 - white space matters so it actually holds
132:33 - its white space so
132:34 - like you know you i have my indents here
132:37 - and that is emulated on the screen when
132:39 - it when it's rendered
132:40 - um so you gotta be very deliberate with
132:42 - what you write otherwise it would be
132:43 - issues and this is why we're refactoring
132:45 - and cueing and using q a to make sure
132:47 - everything's good
132:52 - yes teemo the custom editor for
132:54 - challenges i wish
132:56 - that that existed and i hope that
132:58 - someone someone in the future builds one
133:00 - but for now this is the old-fashioned
133:03 - way and hello nice seeing you
133:07 - very tired
133:23 - ah my favorite challenge
133:26 - all right
133:27 - you guys could see
133:29 - all the solutions
133:42 - so this is past fahrenheit to start
133:48 - and then
133:51 - you get
133:53 - temperature
134:01 - um
134:04 - yeah right you do that right
134:07 - yeah
134:08 - this is going to return
134:14 - this is returning celsius so we want 5.0
134:48 - so i actually do not listen to lo-fi um
134:51 - i do enjoy it though but i'm actually
134:54 - listening to a
134:56 - alternative
134:58 - um playlist at the moment um believe
135:00 - it's called good vibes or something like
135:02 - or no um called good future club they're
135:05 - like a company
135:06 - and uh they have a playlist of a bunch
135:08 - of alternative music so i listen to that
135:10 - when i code
135:11 - um i enjoy the the rhythm and the beat
135:14 - to it
135:15 - um is this javascript you writing yes
135:18 - yes it is um
135:20 - javascript this is es6 challenges for
135:23 - the upcoming
135:24 - beta curriculum um we are writing the we
135:28 - are writing the challenges as well as
135:29 - queuing them
135:32 - yes javascript is very flexible it's a
135:34 - very loosely typed language compared to
135:36 - java um
135:37 - but java has a special place in my heart
135:39 - because it it enforced some really good
135:43 - coding practices for me that i um get to
135:46 - emulate with javascript and it helps a
135:48 - lot um plus
135:50 - algorithm and data structure design
135:54 - using excuse me
135:57 - using java was awesome because
136:00 - i got to take full advantage of all the
136:02 - object oriented features like
136:04 - inheritance encapsulation and
136:08 - typesetting and all that wonderful stuff
136:10 - um
136:11 - iterators and private and public
136:13 - variables
136:14 - made the most of most use out of it and
136:17 - built some really awesome data
136:18 - structures that had some really good use
136:20 - cases and were really efficient so
136:23 - and that would have been slightly harder
136:24 - with javascript because you have to be
136:26 - very cognizant of
136:28 - you know what you're declaring and how
136:29 - you're using everything that you declare
136:31 - all right how we set temperature
136:33 - set temperature receives celsius
136:36 - so we want to say
137:00 - i saw typo
137:06 - where is this one
137:08 - thermostat
137:23 - you know javascript does have classes it
137:26 - is an
137:27 - an esx feature um i believe it was also
137:29 - an es5 but definitely less adapted but
137:32 - um nope it has classes it kind of fakes
137:34 - it though um you know if you're actually
137:37 - actually real quick so we're done um we
137:40 - just finished up the rest of these are
137:42 - imports and requires and this section is
137:44 - still broken so i'm not going to try to
137:45 - qa them at the moment
137:47 - um which means let's shut down gulp
137:49 - and
137:51 - shut down mongodb
137:55 - and let's quickly commit and i'm going
137:57 - to show you nino go into a little bit
137:59 - about es6 classes
138:01 - so we'll add this and then
138:04 - npm run commit
138:08 - what we call this we called this a fix
138:10 - no we called this um
138:18 - let's just fix it uh
138:19 - challenges
138:23 - refactor oh no we um qa
138:27 - remaining yes six
138:29 - challenges
138:32 - yeah we don't need any of that all right
138:34 - that's good to go get push origin fix
138:38 - es6
138:40 - challenges
138:42 - so all that
138:43 - while we wait for uh everything to run
138:45 - on the background
138:48 - let me go into a little bit detail about
138:49 - classes for you you know
138:51 - so right now i'm running an instance of
138:53 - oh come on
138:57 - all right nevermind then
138:59 - um
139:00 - can this work
139:03 - sorry hold on a second what's the
139:05 - command there we go that's what i wanted
139:07 - all right cool we're cleared the console
139:08 - so we're looking at a node console right
139:10 - now so we're gonna be able to write
139:11 - javascript code
139:13 - you know that if we write type of um
139:15 - function
139:17 - you know we'll get function you write
139:20 - type of you know object you get object
139:23 - now if you write type of
139:27 - class or
139:28 - so let's now let's define a class so
139:30 - we're going to say class
139:33 - c
139:34 - e or
139:35 - class c
139:37 - doesn't really have anything in it
139:38 - so we write type of c
139:42 - it's called a function
139:45 - um
139:49 - so
139:50 - you notice
139:52 - type of c
139:53 - is a function
139:55 - and that's the same as a traditional
139:57 - function
139:58 - um
139:59 - but then what if we wrote type of
140:01 - newsie
140:03 - oh well that's not what i want to write
140:04 - type of
140:06 - new c
140:07 - it gives us an object
140:09 - so what that what this means is that
140:11 - classes in javascript by default return
140:15 - an object
140:17 - but if you notice we wrote type of
140:20 - function
140:22 - here let's do a self-calling function
140:29 - so if you so when a a default function
140:32 - in javascript returns undefined because
140:35 - you don't declare it a return statement
140:38 - with object with classes it
140:40 - automatically returns an object and this
140:43 - is built upon because if you go ahead
140:44 - and you write class c2
140:47 - and then you add a constructor
140:50 - that takes a variable foo in a variable
140:52 - bar
140:54 - and then assigns them appropriately you
140:56 - know
140:57 - this dot x equals foo
141:00 - and this dot y equals bar
141:03 - and then you close everything off you
141:05 - can then go ahead and do things like
141:07 - const you know instance
141:10 - equals new c2
141:12 - you know
141:14 - abc
141:15 - def
141:17 - and then
141:19 - if you um
141:22 - class as a constructor
141:28 - um class has constructors it uh default
141:31 - it has a you know its default statement
141:33 - is constructor because when you go ahead
141:35 - and you use the new keyword on a class
141:38 - it will automatically return
141:41 - it'll automatically call the constructor
141:44 - so what this means that instance now has
141:47 - an x value an instance now has a y value
141:51 - and this you can take this further and
141:52 - you can define functions and state and
141:55 - you know if you go into react that's
141:56 - where a lot of this awesome stuff comes
141:58 - in
141:59 - and as you can see you can actually go
142:00 - ahead and say type of c2 it's a function
142:05 - type of
142:06 - c2.constructor
142:08 - is also a function
142:10 - um
142:11 - type of
142:12 - new c2
142:14 - is an object
142:15 - and type of
142:17 - uh i believe if you do this might not
142:21 - work
142:24 - uh-huh so see if you try to call
142:26 - constructor directly it doesn't exactly
142:28 - work
142:29 - um
142:31 - but yeah that's a brief intro into
142:34 - classes
142:35 - okay
142:37 - so
142:38 - let's go over here
142:40 - so we refactored everything
142:43 - um this should refresh
142:46 - shouldn't it
142:50 - there we go
142:54 - and now we have
142:56 - one
142:59 - one more thing to do today
143:03 - let's go ahead
143:15 - and check out these edits
143:30 - um
143:36 - wait i forget how to do this
143:43 - yes martin so when you call typeof and
143:46 - it returns function it tells you that by
143:48 - default the class is returning like it's
143:50 - saying like here's my constructor you
143:52 - know let me do something
143:54 - um
143:57 - i forget how to check out
144:16 - uh
144:18 - when you add two empty arrays together
144:19 - you get an empty string why
144:22 - beats me it's a javascript thing um
144:26 - we can actually explore that uh
144:28 - you add
144:29 - two empty arrays you get a string so if
144:32 - you think about it type of that is an
144:34 - object so if you were to add two objects
144:37 - together what do you get
144:39 - oh
144:40 - something ugly um well i think
144:43 - by default like an array returns
144:46 - um would probably return like its values
144:49 - so if you had like
144:52 - uh
144:53 - you know like an array with something in
144:54 - it
144:56 - it would it wants to return itself and
144:58 - show you it
145:00 - so if this if these are empty lists
145:02 - considered like null entries or null
145:05 - value or empty then
145:07 - when it adds together it might just be
145:09 - returning like
145:11 - it's contents
145:14 - yeah it's all coercion um
145:21 - yes teemo i wanna i wanna pull down that
145:24 - pr locally i was just about to look it
145:25 - up but if you know how to do it and you
145:27 - wanna share that would be incredible
145:30 - um
145:32 - do mult do can class have multiple
145:34 - constructors
145:35 - um
145:38 - like overloading
145:43 - i don't know if javascript does
145:46 - overloading let's find out
146:11 - class we only got only only have one
146:13 - constructor in javascript
146:25 - oh
147:06 - i see
147:09 - okay
147:13 - yeah i found a team out it's actually
147:15 - right here so i'm gonna check check out
147:17 - b
147:19 - actually let me
147:20 - just copy this and
147:23 - run that from here
147:46 - okay good and then we should be able to
147:48 - then
147:49 - run npm install
147:52 - get our stuff
148:15 - this is a fun one guys
148:17 - check this out
148:18 - um
148:19 - this is the type coercion table
148:22 - so
148:23 - you know true is the true false you know
148:26 - is it false
148:27 - true is one true is also the string one
148:31 - true is also the array containing one
148:34 - um
148:36 - you know null equals null undefined
148:38 - equals undefined but they also equal
148:40 - each other
148:41 - infinity only equals infinity as well as
148:43 - negative infinity only equals negative
148:45 - infinity
148:46 - um but like empty string is false it's
148:49 - also zero it's also an empty string
148:52 - it's also an empty array it's also a
148:55 - doubly nested empty array
149:01 - okay installed that
149:03 - and we should be able to run
149:10 - mangoed
149:16 - cool
149:19 - where is this
149:39 - where's this one at yeah
149:42 - all right gulp
149:53 - all right
149:54 - and which challenge do i want to test
149:56 - this with
150:01 - um declare read-only variable
150:46 - uh today you're wrong
150:51 - uh hold on a second
151:09 - ah
151:11 - this meant i meant to put sentence in
151:12 - here
151:22 - uh what
151:28 - this is completely wrong
151:32 - hold on a sec guys
151:42 - can you post a link to that table yeah
151:44 - let me grab it for you guys um
151:48 - it doesn't exactly like doing links in
151:50 - here so i'm actually going to split it
151:52 - up and then i'm just going to let y'all
151:55 - connect it all back together
152:00 - yeah we get links turned off
152:01 - automatically because otherwise people
152:03 - could post
152:04 - um bad things but as the i i think i can
152:07 - just put that link back together and you
152:08 - all should be able to get to it
152:17 - oh
152:21 - this has the old code
152:24 - never mind i don't think i'll be able to
152:27 - let me see if i can do some magic
152:50 - alright well
152:57 - uh crap this one and i should be able to
152:59 - do
153:08 - what's wrong
153:32 - ah this is not this ain't going well
153:37 - um
154:20 - all right this ain't going to work um
154:22 - because i'm going to have to re
154:25 - oh let me see if i can
154:32 - no we're going to do guys
154:35 - um
154:53 - uh
154:55 - we are going to go
154:58 - rogue here
154:59 - and
155:01 - we're going to do some real fun get
155:03 - stuff
155:05 - all right so what just popped up on
155:07 - screen is from the amazing
155:10 - um dan abramov from react and he taught
155:13 - me how to
155:14 - basically keep something up to date but
155:16 - it also has
155:18 - some really fun things in it like how to
155:20 - reset something back to its original
155:22 - state um which is a very useful tool a
155:25 - useful thing to know how to do
155:28 - um
155:29 - so we're first of all
155:31 - we're just gonna reset hard
155:34 - to
155:38 - scissors need food to
155:41 - fix
155:42 - loop pro
155:44 - tect
155:46 - undefined
155:48 - error
155:50 - that did not work
155:53 - um i think i forgot the
156:01 - nope
156:07 - okay just get reset
156:18 - there we go
156:27 - yeah so all these issues are all right
156:30 - so we're just gonna basically
156:32 - uh close we're just gonna get check out
156:38 - or sorry
156:42 - um get check out
156:49 - fix es6
156:59 - ah
157:00 - getting sloppy
157:03 - okay cool
157:16 - you
157:21 - i'm a little confused
157:23 - this is not gonna let me
157:32 - on disk
157:35 - in digital code
157:39 - i think this is good
157:41 - okay
157:44 - i misspelled fix where
157:48 - oh before
157:51 - yeah probably
157:54 - oh so i'd check out spelled incorrectly
157:57 - um
158:00 - can i get remove the branch
158:03 - how do i i just wanna oh
158:05 - you always gotta look your stuff up when
158:06 - you're doing
158:07 - get you never wanna just go for it
158:09 - because you could break things
158:11 - um get remove branch
158:21 - delete a local branch cool okay
158:24 - so let's get that branch name back up
158:31 - i'll just do get
158:32 - check out d
158:35 - right now we got right branch
158:38 - hello how you doing today
158:42 - just cleaning up here
158:44 - having some fun with git
158:57 - um some other ones why don't we just
158:59 - clean up i'll clean up a little bit of
159:00 - my
159:19 - thank you very much and okay i
159:23 - misspelled it in the reset all right
159:25 - it's whatever i i was i needed to cherry
159:27 - pick like four different commits and
159:28 - that wasn't gonna happen so what i'm
159:31 - gonna do is i'm gonna do a little
159:31 - cleanup and then i'm going to go and
159:33 - squash my commits for the es6 challenges
159:36 - into one and then i'm gonna re-fork the
159:39 - thing that i just grabbed and then i
159:41 - should be able to cherry pick that
159:42 - singular commit and then
159:45 - merge all new
159:47 - do the whole thing run the database all
159:49 - that and then i should be able to test
159:50 - my new challenges with that loopback fix
159:53 - um
159:54 - so i just need to just try and do some
159:57 - cleanup
159:58 - and i should be able to now because i
160:00 - believe the feature one we merged last
160:03 - night
160:06 - awesome okay so now we're on get branch
160:10 - good that's all i want to see
160:12 - okay so now give me a moment we're going
160:16 - to open
160:18 - a new mozilla window you guys don't need
160:21 - to see that perfect because over here
160:24 - and now we're going to run some other
160:26 - fun ones so first of all we're going to
160:27 - get log the
160:30 - um
160:33 - the commits
160:36 - for my last
160:37 - for the last four commits that i have
160:42 - uh
160:47 - that did not work what did i miss
160:54 - unknown revision or path not a working
160:56 - tree
161:04 - should i be able to do that oh no that's
161:06 - not what i wanted to do
161:09 - oh god
161:12 - nope still not
161:14 - all right
161:15 - i just wrote git log
161:18 - there we go look at the last few
161:22 - so we have qa remaining challenges qa
161:24 - es6 challenges refactor es6 challenges
161:28 - um and then
161:31 - add function scope of u strict those are
161:33 - the four
161:35 - yep
161:37 - cool
161:39 - so now we want to
161:41 - get rebase i head
161:45 - and we want to do the sub
161:48 - we want to grab the last four so this
161:50 - grabs the previous three plus the parent
161:54 - does it
161:56 - nah did not okay so then i just quickly
161:58 - have to run
162:00 - just escape out just quit without saving
162:04 - um
162:05 - do the four there we go
162:07 - and then
162:09 - we're gonna go ahead and just call
162:11 - squash on all these
162:16 - ah wait we gotta pick first so this the
162:18 - first one we pick
162:20 - and then we squash the rest
162:24 - into
162:29 - into the first one
162:31 - and what this does is takes all the
162:33 - changes that i made up till now
162:35 - and um
162:38 - pushes it all into one commit
162:42 - um
162:43 - dot dot instead of that that probably is
162:45 - it uh timo
162:47 - what is all of that okay so
162:50 - this is github this is like how i make
162:52 - changes to this is how we track all the
162:54 - changes and what you're looking at is
162:56 - the logs
162:58 - of all the work that we've done so far
163:00 - so in the for the past 12 hours i have
163:02 - created four different commits
163:04 - on the code that on these es6 challenges
163:07 - and those are four separate things like
163:10 - they're called like diffs like diff
163:12 - differences
163:13 - what i'm doing right now is i'm taking
163:14 - all three and compressing them into one
163:17 - and that then that one difference can be
163:19 - merged at once and then i can also take
163:22 - that big difference that one single
163:24 - difference and
163:26 - plop it onto another branch which is
163:29 - what i plan to do in the next step
163:30 - because we want to test someone else's
163:32 - code on our challenges to make sure that
163:34 - challenge works um
163:37 - the way you do all that is you have a
163:39 - squash commits and that's what we're
163:40 - doing right now so we just edited the
163:42 - the commit history and we've added the
163:44 - squash commands
163:46 - and then once we've done that we can
163:47 - then escape and then do right quit
163:52 - good this is a combination of four
163:54 - commits
163:55 - good
163:58 - we just want to scroll through it
164:01 - the
164:02 - hash
164:03 - lines or comments they don't get printed
164:05 - be ignored
164:08 - great
164:09 - last command's done
164:15 - i love it
164:19 - okay
164:24 - golden
164:25 - so now
164:27 - we need to
164:28 - uh get push
164:31 - force
164:32 - the origin
164:35 - es6 challenges
164:42 - great
164:43 - and if everything went correctly
164:50 - this should have reset
164:53 - the history here
164:58 - um
165:01 - and it did not
165:03 - uh
165:04 - missed one step i don't know what it was
165:07 - oh here we go okay
165:10 - so
165:12 - you now you'll see all of my code has
165:15 - just been compressed into a singular
165:16 - commit
165:17 - so all 178 plus all the 123 differences
165:21 - is one singular commit
165:23 - if you go and click on the commit you'll
165:25 - notice that it actually has the previous
165:28 - three commits in here
165:30 - this is uh what it looks like
165:32 - so what is this all about
165:35 - basically these this is the kind of a
165:36 - higher level get function
165:39 - which maintains
165:41 - the state of a repository in an easier
165:43 - way
165:45 - let's pretend that
165:47 - this this pr right here was to get
165:50 - merged into the project with four
165:52 - different commits in it
165:54 - but something went wrong you know
165:56 - something broke in the and we broke the
165:58 - ma the staging
165:59 - the the production level
166:02 - application because we merged from this
166:04 - pull request
166:05 - we would have to go back and revert the
166:07 - four commits that we merged four times
166:10 - manually with each different commit code
166:13 - and that's a process it's annoying
166:16 - instead
166:17 - before we merge this whole chunk of code
166:20 - into the main project we squash
166:22 - everything into a singular commit one
166:25 - code change it's called
166:27 - we make it we we tell the
166:29 - version control system here
166:31 - that
166:32 - everything we've done we want to commit
166:34 - all at once instead of in little bits
166:36 - and pieces
166:38 - so
166:39 - if let's say we now work now we merge
166:42 - this pull request with one singular
166:44 - commit and something went wrong on the
166:46 - staging side all we would have to do is
166:48 - reverse this single commit all the
166:51 - changes would be removed and we'd be
166:53 - okay
166:54 - um
166:55 - and
166:57 - we are maintaining the history here
166:59 - because there's been a big aspect of the
167:01 - the history of things that have been
167:03 - changed so people can know who changed
167:05 - what when
167:06 - so by rebasing and doing all that
167:08 - squashing and stuff that i just did in
167:10 - the command line
167:11 - we have this beautiful
167:13 - you know this really easy to read
167:16 - descriptive
167:18 - commit
167:19 - definition
167:20 - along with
167:22 - you know all of our code changes bundled
167:24 - into one
167:26 - okay that was kind of a long explanation
167:29 - um and it comes with a reason because
167:31 - we're also about to do something cool
167:34 - so i'm going to go over back over to
167:36 - here i'm going to copy this
167:40 - and we're going to go ahead and run it
167:43 - great
167:44 - now i want to get cherry pick
167:54 - my singular commit
167:58 - yes it does need to get approved um i
168:00 - will not be merging it uh until quincy
168:03 - or bouncy or berkeley or anyone teemo or
168:07 - anyone else reviews my code and tells me
168:09 - it's all good
168:11 - cool so we just cherry picked and you
168:13 - guys noticed that we just changed
168:15 - everything in this file in one click
168:17 - with no merge conflicts
168:19 - so happy it's a good sign
168:21 - now what we have to do is run npm
168:23 - install
168:34 - and then we should be able to run
168:38 - uh
168:40 - mongod
168:42 - oh oh someone was running ah
168:46 - this one's been running the whole time
168:47 - that's not good
168:50 - oops
168:52 - um
168:54 - let's go ahead and just go back to one
168:56 - and now we're gonna write mongodb
168:58 - and then we're going to create a new tab
169:00 - and run node seed
169:09 - and then we run gulp
169:19 - awesome and then
169:21 - we get to go back over here
169:23 - do a nice hard refresh on here
169:28 - i might have to clear local storage
169:30 - we'll see
169:32 - it's working it's working
169:36 - yes and we unlock the code
169:39 - run it
169:41 - passes
169:42 - no loopback errors so now we can go back
169:45 - and we can say
169:47 - um let's go ahead and let's quit gulp
169:50 - and quit out of
169:53 - then let's go get check out back to our
169:57 - fix
169:58 - um es6
170:00 - challenges
170:06 - and then
170:10 - uh
170:13 - i'm not touching that that's not um
170:18 - hold on just one second guys get branch
170:22 - i'd like to just
170:30 - modified package lock json that's not a
170:33 - good sign
170:34 - um
170:36 - i'm just gonna get reset
170:45 - don't know why that's acting up um
170:48 - oh
170:52 - i have to rerun npm install that's fine
170:55 - um honestly that doesn't really matter
170:56 - that much because we've already changed
170:58 - it online and once we get to merge up
171:00 - there we're good
171:01 - um so we're good over here get rid of
171:02 - this this challenge is great and ready
171:06 - for qa
171:08 - and then we can go back over here and we
171:10 - can say um
171:13 - let's let's
171:15 - code this out and let's say
171:17 - completed
171:19 - and successful
171:24 - update the comment
171:25 - and then i'm going to go over here and
171:27 - i'm going to say
171:30 - i'm going to go ahead and approve
171:35 - approve
171:41 - and
171:47 - we should be good to squash and merge
171:50 - because berkeley approved it i've
171:52 - approved it quincy approved it
171:55 - squash and merge
172:04 - awesome
172:11 - great work
172:12 - great work on this
172:16 - was able to run my new
172:19 - changes
172:20 - to
172:21 - es6 curriculum
172:24 - and
172:25 - get the
172:27 - back error
172:28 - to go away
172:30 - or loop protect
172:40 - cool
172:41 - so this is the so that we've done that
172:43 - and now we can go over here
172:46 - um
172:48 - we should be refreshed that should merge
172:49 - that should say merged
172:52 - and now this gets closed automatically
172:55 - and
172:58 - we get committed together
173:06 - awesome
173:08 - awesome
173:09 - let's refresh this
173:14 - uh
173:16 - so this is the issue that is going to
173:18 - get closed when this one gets closed
173:21 - and
173:22 - if we refresh this
173:25 - we should get a green light um so i'm
173:27 - going to quickly do this i'm going to
173:29 - say
173:31 - i'm going to change this to the check
173:33 - mark
173:37 - q aid
173:40 - locally
173:41 - on live stream
173:44 - update the comment
173:47 - so this will close that issue
173:49 - quincy stuff got solved i've done this
173:53 - completed and successful
173:55 - and
173:58 - add function scope to use strict
174:01 - verifies so now all that someone has to
174:03 - come through
174:05 - is come and check everything and then
174:07 - squash and merge when they're ready to
174:08 - go
174:09 - and
174:11 - our changes get successfully done um
174:14 - with that
174:16 - uh let me run get status again this
174:18 - package.lock is still being weird
174:22 - so i'll figure that out on my own time
174:24 - but
174:26 - with that guys i think we're done for
174:28 - today
174:29 - if you have any other questions i'm down
174:31 - to hang around and answer some stuff but
174:34 - yeah that was a crazy amount of work um
174:37 - both coding and with git
174:40 - i'd be happy to do to go over what i've
174:42 - done again and talk more about it and
174:44 - share some of my resources so let me
174:47 - know i'll hang around for a few more
174:48 - minutes and then i'll
174:50 - but then after that i'll sign off and
174:52 - all that good stuff
175:33 - all right i don't see anything in the
175:35 - comments so i'll take that as a
175:38 - time to head out so guys thank you so
175:41 - much for coming today i love doing these
175:43 - streams expect more from them in the
175:45 - future
175:46 - um
175:47 - have a wonderful day happy coding please
175:49 - reach out if you need anything or
175:51 - assistance or help or guidance be happy
175:53 - to give it with that have it going guys