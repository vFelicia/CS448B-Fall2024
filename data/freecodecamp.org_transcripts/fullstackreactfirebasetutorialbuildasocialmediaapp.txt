00:00 - Hi. In this series, we're going to be learning
how to use react and Firebase to create a
00:05 - fully featured social media application. So
application will let us sign up by filling
00:09 - the signup form right here, which will be
validated once it's submitted. And if all
00:14 - the info is valid, an account will be created
for us and we will be redirected to the homepage.
00:20 - In the homepage, we can view posts, which
are called screams in this platform, we can
00:24 - see comments and the number of likes and scream
has, we can also upload an image that will
00:29 - be our profile picture that will be stored
in our Firebase Storage bucket. We can also
00:35 - update our profile by adding details about
ourselves such as a bio, our location, and
00:42 - our personal or professional website. Once
these are submitted, they are validated. And
00:46 - once they're valid, these details will be
publicly visible to other users of the application.
00:52 - We can also always edit them again, if we're
not happy. We can like other people's screams,
00:58 - we can make as many screens as we want. We
can of course, post comments to screams. And
01:05 - they will be reflected immediately, as we
will see here. And we can of course post our
01:11 - own screens by pressing the plus button at
the top and type in stuff, as you see me here
01:17 - type very slowly, and pressing Submit. And
once we submit a post, it will immediately
01:24 - show up on the application. And we can of
course like our own post, as absurd as you
01:31 - or I might think that is we can of course
post as many screens as we want. And if we
01:36 - make a mistake, we can also delete the screen,
we using the delete button will show us a
01:42 - screen, a confirm dial just to make sure that
we don't accidentally delete them, we can
01:47 - see other users pages and their posts. And
if we do log out right now. And if we do log
01:52 - in as the other user that we just liked and
commented to the screen, we will see a bunch
01:59 - of notifications informing us of exactly just
that. And if we click on any notification,
02:05 - it will take us to that post that the notification
was talking about. As I mentioned, our app
02:10 - will use Firebase as a back end. And this
right here is the database. And we can see
02:15 - it update in real time as we add screens,
which is going to be super useful when we
02:19 - are developing our app, we can see our database
collections, things like screams, notifications
02:24 - and comments right here. And all the other
collections. We can also see information about
02:30 - our users and stuff like that. We will also
be using Redux for managing our application
02:35 - wide state, which will hold the data needed
in our react application. This right here
02:40 - is the Redux dev tools, which will be super
useful later when we are developing our app,
02:45 - it will make it easier to see what's happening
in our application, what data we have, and
02:49 - what errors we have. And this will all be
you clear when we dive into Redux later.
03:00 - Before we start anything, I just want to give
a quick run through the tools that we're going
03:04 - to be using. Starting with the big one, the
front end library of choice that we're going
03:08 - to be using is react. React is a great framework
for building component based web applications.
03:15 - Even though it's technically not frameworks,
the library, we will be complementing it with
03:20 - things like react router, Dom and axios, and
a couple of other libraries that will make
03:25 - it feel like a complete framework and will
allow us to do everything that we need to
03:29 - do. So yeah, it's a great library for building
components, building templates for our pages,
03:34 - and building dynamic markup for our for our
application pages. Now, I do have a big disclaimer
03:42 - though. If you are not familiar with react
a an absolute newbie and have never touched
03:48 - react, this series is not for you. I recommend
that you learn the basics of react and get
03:53 - comfortable with it. And of course, be comfortable
writing JavaScript, and then come back to
03:58 - the series and then you will do some proper
learning. If you're familiar with react, then
04:03 - you're right at home. So next thing is Firebase.
Firebase is a great platform as a service,
04:11 - we will use it as our back end. It offers
us multiple services, of which we will use
04:17 - Cloud firestore as a database. It's a real
time database. And it gives us two access
04:24 - to a couple of really cool functionalities
to use a no SQL database document base, which
04:30 - we'll see later. Next thing is Cloud Functions
we're going to be we're not going to be writing
04:36 - like a Node JS. Like server code. Even though
Cloud Functions are based on address, we will
04:42 - be writing a couple of functions that will
be run whenever we need to run them. Next
04:48 - thing is authentication. We're going to be
using Firebase authentication to register
04:52 - our users and log them in and get authentication
tokens and a bunch of other cool stuff. And
05:00 - we will also use their cloud storage service
to store our profile images that are submitted
05:06 - by our users. Next thing is material UI, which
is something that I've come to learn and really
05:13 - love recently. Material UI is one of the best
if not the best react implementation of Google
05:20 - material design standards. Think of Google
material design is like a CSS framework. It's
05:25 - a couple of standards for designing user interfaces.
It's really cool. I really like material UI,
05:31 - they have amazing documentation, which makes
learning and implementing it really smooth
05:38 - sailing. Next thing is this might come as
a surprise to some of you, we're going to
05:43 - be using Express. I know we're not using Node
JS. But Cloud Functions are essentially no
05:48 - JS code that is executed on demand. So we
don't need to use Express, but it's better.
05:54 - I think, in my opinion, if we do because it
makes the code much cleaner. As you will see
05:59 - later, it will help us group our code and
separate our routes properly, and handle our
06:05 - requests and send our response properly in
writing our API. Last but not least, for sure,
06:13 - is Redux. So our application is going to have
a lot of components. And they're going to
06:18 - need to access data. And best practices when
you have a lot of components. And a lot of
06:24 - them need to access data is to not pass data
from one to the other, aka prop drilling,
06:30 - I will post a link to a really cool post that
explains why Redux is a thing and why people
06:36 - use it instead of just passing props around.
Redux makes it really seamless to have an
06:42 - application wide state that all the components
can separately talk to and fetch data and
06:48 - send data to if needed. So yeah, we will of
course be diving deeper into the definitions
06:54 - and functionalities of each of these tools.
When we work with them separately, I just
06:58 - wanted to quickly show you what this series
is going to be using.
07:05 - So in this video, we're going to start to
work on our back end by creating some of the
07:10 - Cloud Functions that will give us access to
our database. And that will give users access
07:16 - to the Authentication Service, etc. So before
going to start, I'm going to go over some
07:22 - of the prerequisites that you need to work
on this project. So number one is no js, we
07:28 - need this just to use NPM for installing some
of the packages. Number two will be VS code.
07:33 - Now this is optional, but I recommend VS code
is the best text editor for me out there.
07:38 - Even atom and sublime are pretty good as well.
But some of the extensions of VS code are
07:43 - really, really, really good. Number three
is postman. If you don't have it, download
07:48 - it, we're going to be using this to run an
API request to test our API, either Windows,
07:53 - Mac OS, or Linux, all download links are available.
I want to show you something on VS code, just
08:01 - so that we are on the same page, I will be
using bracket pair colorizer, which will color
08:07 - some of the brackets differently that will
make our code easier, easier to read. prettier,
08:13 - which formats the code each time I save, so
that we don't have to indent and yes seven,
08:19 - React Redux etc. snippets, which will give
us access to some of the snippets that would
08:24 - generate code without without us having to
type all of it. Okay, that's it with the prerequisites.
08:31 - So let's actually start creating our project.
So here, and firebase.google.com. Let's go
08:43 - to our console by clicking go to console.
And as our console loads, now we can create
08:50 - our project, click Add project. And let's
call this social ape. Because that's what
08:56 - we all are at the end of the day, I guess.
Select your region and country. I'm in the
09:02 - UK. So I'm going to select United Kingdom,
select the server that is closest to you.
09:06 - To me, it's your request, and hit they accept
and create your project. This will now create
09:12 - a basic Firebase project with everything initialized.
Okay, now that it's done, click Continue.
09:25 - First thing I want to do, let's go to functions.
And once that loads, let's click get started,
09:33 - which gives us some instructions tells us
to install this package. Let's click continue
09:38 - and finish. We'll do this separately. Okay.
Let's go to our desktop or whatever, really.
09:44 - And I'm going to use the basic command line
because it's interactive and not good bash.
09:50 - Here, let's install that package. So npm install
dash g Firebase dash tools, which will give
09:58 - us access to the Firebase command. line interface
that will let us create our functions and
10:03 - deploy them to our application. And I'll be
back once this is done installing. Okay, now
10:08 - that it's done installing, by the way, you
can just ignore this message thing. It's not
10:14 - important, we can run Firebase login, so that
we can authenticate today it would know who
10:20 - we are. And for me, it says, I'm already logged
in for you, maybe it will just pop up a browser
10:26 - window, and you just select your Google account.
So here, I'm going to go to my desktop. And
10:32 - I'm going to create a directory called social
Pape dash functions. Going to CD into that.
10:44 - And here, we're going to run Firebase and
knit for initialize, which will create our
10:49 - project, we want to proceed Yes, and hit space
on functions. And this is all that we're going
10:56 - to select for now as from services, and here
you choose from your projects, choose the
11:01 - project that we just created, it's going to
ask us to use JavaScript or TypeScript, we're
11:06 - going to use JavaScript and ies Linton, I'm
going to say no to this. And let's say yes
11:13 - to installing packages, which will now install
all the dependencies that we need, I think,
11:19 - like two or three dependencies. So I'll be
back once this is done. Okay, now this, this
11:25 - is done. If you have Visual Studio code, you
can run the command code dot, which will open
11:30 - this in VS code. And there we go. So this
is what we get a get ignore file, and a Firebase
11:38 - config file that has our project ID, we go
to the folder functions to index dot j, s,
11:44 - this is where our functions will sit. And
as you can see if we uncomment this, this
11:49 - is a basic hello world function that comes
shipped with Firebase. Let's change this text
11:56 - to say, Hello world. And oops, hello,
12:02 - world.
12:03 - Let's open up the command line. And let's
run Firebase deploy. This will now deploy
12:09 - this function so that we can test it and see
if everything is working fine. Funny that
12:17 - our hello world function didn't actually have
hello world as the return. Okay, so now we
12:23 - will deploy our function to our, to our functions,
and it will give us an endpoint which we can
12:29 - call to see the response from that function.
And if you're, by any means familiar with
12:36 - node, this, the syntax of request response
and a callback should be familiar to you.
12:43 - If not, we will work with a new you will get
familiar with it. Okay, so now that our function
12:49 - is deployed, we get an endpoint right here.
So let's copy this. And let's open up postman.
12:59 - And let's see if this is working. To wait
for postman to open. Let's put these side
13:09 - by side. So let's base this on. Let's hit
send. And indeed, it says hello world. So
13:18 - we're up and running. Okay, let's do something
a bit more complicated than that. Let's go
13:23 - to our project. We're here to close these
windows. Let's go to database and initialize
13:30 - our database. So we click CREATE DATABASE.
And it asks us whether to start in locked
13:37 - mode, or test mode, which these are like database
access rules that give us access to read or
13:44 - write some of the documents for now let's
go in test mode, which will leave all resources
13:49 - open for everyone to edit, which is crazy,
but we're not in production yet. So it's fine.
13:55 - As well wait for it to set up everything.
Now we can actually start creating some documents
14:01 - in our database. Let's create the first collection
which will hold our posts which are screams
14:06 - if you remember, so screams is the collection
name. And let's actually create our first
14:13 - document. This will have a field called user
handle, which will determine which will let
14:21 - us determine which user submitted this last
type user. Now this user doesn't exist yet,
14:28 - but let's just roll with it for now. The body
of the scream should say first scream are
14:36 - under no. And this will have a created add
field. This will be a timestamp. Let's give
14:45 - it the date of today. And it was posted at
midnight because why not? And now this will
14:52 - create our first screen. Let's actually create
another one quickly Here's a user handle again,
15:02 - it's the same user. And it's got the body
field, this should say, second scream. And
15:12 - let's add the created field as timestamp,
and give it the date of today. Let's say this
15:21 - was created at 1am. So let's save. Now we
have a database with a collection of screams
15:28 - with two documents in it. Now, let's try to
whoops, yep, let's try to actually fetch these
15:35 - posts from the database. So let's create another
function. We'll call this exports dot get
15:41 - screams. And this will be from the functions
namespace. And from the HTTPS area, I guess.
15:53 - And we will use honor requests, we will use
some other handles some other functions later.
15:59 - But for now, we'll stick with on request,
oops. So this will be will take a request
16:05 - and a response. And these are arguments so
we can name them however we want. And our
16:12 - function now needs access to the database,
we will be using something called the Admin
16:18 - SDK, we will import that by doing constant
admin, we already have the package installed,
16:25 - let's do require. As you notice, here, we're
not doing import from this is not your sixth
16:31 - because this is this is basically no JS code
to do require Firebase admin. And to use the
16:39 - admin, we need to initialize our application.
So we'll just do admin dot initialize app.
16:47 - And usually, we would pass an application
but this project already knows that this is
16:51 - our ID of our application. So we just do it
like this. And now we have access to the admin
16:57 - object, we can do admin dot firestore dot
collection. And now we give it the name of
17:08 - the collection that we want to access. By
the way, all of this is in the documentation.
17:12 - If you want to see quickly, we can go to Firebase,
actually, we can just google just duplicate
17:22 - this thing, just google Firebase firestore.
And by the way, I really recommend checking
17:31 - out the Firebase documentation that really,
really comprehensive so if we go to fire,
17:36 - cloud firestore, and we go to read data, get
data once. And let me change this for readability.
17:44 - And I believe, yeah, it's right here. So to
get all documents in a collection, you run
17:50 - DB dot collection, which in this case is admin
Docker dot firestore. And you give the name
17:56 - of the collection, and you just run dot get,
which returns a promise, which holds a query
18:01 - snapshot. And in that query snapshot, we have
an array of documents, and I'll show you how
18:05 - we're going to fetch that fetch those. But
let's actually maximize this. So the collection
18:11 - is screams. And let's do dot get. And then
we do dot, then we have some data. And if
18:21 - you hover over here, you see that this whoops,
this should not be any, you should give us
18:25 - a type. For some reason, it doesn't. Okay,
let's just go with it for now. So we say data.
18:33 - Yeah, now it does. So this is a query snapshot
type, which has a Doc's in it. So if you do
18:42 - data dot Doc's, you'll see it has a property
Doc's which has an array of documents, snapshots,
18:48 - which are documents, so we can do data dot
for each document. And we need to store them
18:58 - in something. So let's initialize an array
called screams, which is an empty and empty
19:04 - for now. Here for each document, we want to
do screams dot push. And we don't just do
19:11 - Doc, because this is just a reference, we
do doc dot data, which is a function that
19:16 - returns the data that's inside the document.
And now this after this for loop, the screen
19:22 - should be populated with the data of the screams
that we have. Now we need to return them.
19:27 - So let's do return response dot JSON to return
it as a JSON object. And let's do screams.
19:39 - And let's put a colon and of course this returns
a promise it will be good practice to catch
19:48 - any errors that might happen. So we do catch
error. And if any error happens, we just want
19:54 - to console. log it to the console using console
error. error. Like this. Now we hit save.
20:03 - And now we can do Firebase deploy again. And
this will deploy our function. And we can
20:11 - test if it's actually working. Okay, now that
our function is deployed, we can actually
20:16 - test it. So let's copy this endpoint. And
let's go to postman. Let's make this bigger.
20:24 - And let's paste our endpoint here, and hit
send. And this should bring up the documents
20:32 - that we just created. And it does. So this
is the first document. Rather, this is the
20:38 - second document, which says second screen.
And this is the first one which says first
20:42 - scream are perfect. So so this is for getting
documents, let's create another function for
20:50 - actually creating documents. So let's do exports
dot. Let's call this create, scream. And we
21:01 - can actually just copy this, like this, remove
the code inside of it.
21:10 - And
21:11 - here, we're going to get a request body because
this should be a POST request. So let's initialize
21:17 - our screen, let's call this new screen. And
this will have a body of request, and our
21:26 - request will have a body. And don't get confused
this, this body is the body of the request.
21:32 - And we're going to do dot body, which is a
property in the body of the request. And this
21:37 - will make sense in a second. And the user
handle will be request dot body dot user handle.
21:48 - And we need a created art. So as to create
art equals I think this is admin, dot firestore
21:58 - dot timestamp timestamp that will use a function
called from date, which will create a timestamp
22:07 - from a normal JavaScript date object. So we
do new day, we'll pass it a new date. And
22:13 - now we have our object, we need to persist
it in our database. So let's do admin dot
22:19 - firestore dot collection. And same collection
screams. This time, we're going to use a function
22:30 - called add, which will take a JSON object
and add it to our database. And the object
22:36 - in this case is our new scream object. And
this again, returns a promise. So we do thought
22:42 - then this will give us a document reference
as a response, which is actually which we're
22:50 - not going to do anything with this document
reference. So we need we can just do this,
22:54 - because we're not going to do anything. Actually
we are the scope that document reference.
22:59 - Now, if we are here, that means the document
has been created. So we can return a response
23:05 - or concept JSON. And this will have a message
that will say, I'm going to put backticks,
23:13 - because we're going to put a variable inside
of here, I will say document. And let's do
23:19 - dollar sign curly braces to pass the ID of
the document, which is a property in a document
23:24 - reference type, we'll just do doc.id. And
we need to say create, we're going to say
23:31 - created successfully. Now, if there was an
error, okay to catch error, for some reason,
23:40 - or do console dot, actually, let's return
a response. So we will do rest rest dot JSON.
23:50 - And by actually not, because there was an
error, we need to change the status code will
23:54 - shouldn't return the status code of 200. Which
means success. Let's do dot status. And let's
24:01 - give a status code of 500. Because this is
a server error. And let's give a JSON object
24:07 - that will have a error, prop property or key.
And this will say something
24:14 - went wrong.
24:20 - And let's actually console error it as well.
Okay, so let's save. Now we can run Firebase
24:33 - deploy and test it. There's nothing wrong
with that. But deployment takes some time,
24:38 - we can instead run Firebase, which will serve
our application locally, which is so much
24:44 - faster and will give us the ability to save
and then immediately serve again and we don't
24:50 - have to deploy each time we make a change
and we want to test. So now this is gonna
24:56 - serve locally. A using our machines server
Give us the endpoint. So let's take the Create
25:02 - scream endpoint, as you can see, says localhost
instead of the endpoint that we had earlier,
25:09 - and open up a new tab. And let's test this,
let's change the type of the request to the
25:14 - port to a post request. And let's give it
a body, we're going to click raw, and select
25:20 - application slash JSON. And let's give this
a body of new scream. And let's give this
25:31 - a user handle of a say knew less than the
request.
25:42 - And,
25:45 - and it says document something, something
created successfully. And if we go to our
25:51 - Firebase database, and we check, I don't know
why I click that it shows without us reloading,
25:58 - and there we go, our new screen is here. And
what's beautiful about this, put them side
26:03 - by side. And we say new screen too. And we
click Send, it updates in real time. And we
26:10 - see oops, we see new screen too. Fantastic.
Now, we shouldn't there's a problem here,
26:18 - which is that if I would send a get request
to this, of course, without a body, it will
26:26 - say we have an error, like a server error,
when actually this is not a server, this is
26:32 - a client, we shouldn't send a get request
to a route that is meant for a POST request.
26:37 - We can prevent this by doing this. So we can
say if request, oops, if request dot method
26:46 - does not equal post, we should stop here and
return a response. So res dot status, it's
26:55 - not gonna be 500, there's going to be 400,
which means this is a problem from the client.
27:00 - This is a bad request, as they send a Jason
with an error that says, method not allowed.
27:10 - Now, this will solve the problem of not having
to answer to a get request. So if we go to
27:18 - postman, and click Send, this time, it will
say method not allowed with an error code,
27:26 - rather a status code of 400. So you can start
to see how this is coming together and how
27:32 - we can send the request to fetch data send
request to persist data. And this is obviously
27:39 - just the start, we're gonna have so much more.
In next in the next video, we're going to
27:43 - start to implement express to so that we don't
have to say this f request method on each
27:50 - request, and we can group our requests and
handle them so much better use an Express.
27:59 - So let's install now Express and make this
code look much better than it does now. So
28:04 - one problem with having our functions structured
like this, is that when we want to have two
28:11 - endpoints of our API, point at the same name
of the endpoint, but handle two different
28:17 - functionalities, we would have to put everything
in one function and check the request method
28:23 - and respond accordingly, which doesn't look
really good. So this is, this is one of the
28:28 - things that Express is going to help us with,
okay, so let's install Express. Let's go to
28:33 - the console and make sure that we are in the
functions folder, CD functions, and run npm
28:39 - install, dash dash save, save, Express. And
once it's installed, we can actually start
28:50 - bringing it in. And that's installed. Let's
do const. Express, equals require Express.
28:58 - And when you have to initialize the app, let's
do const. App equals Express and call it like
29:08 - a function, because that's what it is. Let's
remove this comment and this hello world function.
29:13 - We don't need them anymore. And let's see
how we can change this route. So instead of
29:19 - get screams, we can actually copy this code
that's inside of the get screens route, and
29:26 - get rid of this. And we can do app dot get.
And we do slash screens. Because the first
29:35 - parameter of this function is the name of
the route. And the second one is the handler,
29:41 - which takes a request and a response, similar
to what we did like earlier. And here we're
29:48 - going to paste back the code that we had.
And now this on its own will not do the trick,
29:55 - we need to tell Firebase that this app is
the container for all our routes. Or actually
30:01 - the routes that are in the app. So we can
do exports. And this is one of the things
30:07 - that
30:08 - that express will let us do, because what
we want to have is one of the best practices
30:13 - for having an API is if we, let's say, have
an endpoint, HTTPS, and let's say our base
30:20 - URL is called base URL Comm. We don't want
something like this straight away slash scrims.
30:27 - Because it's good practice to have slash API
and slash something. Because on the actual
30:32 - base URL itself, you might have your website.
But when you do slash API slash, whatever,
30:37 - you can have your API there. And some cases,
they do API dot base URL, but it's just different
30:45 - conventions. So we want to this prefix. So
what I'm going to do now is that we're going
30:50 - to do exports dot API equals functions.https.on
request. And here, instead of passing one
31:04 - route and one function, we just pass our app.
And this will automatically turn into multiple
31:10 - routes. And now if we save and when we deploy,
so we run Firebase deploy. It should prompt
31:20 - us a, it should ask us that, whether we're
sure we're going to delete the get screens
31:28 - function, because we just deleted that code.
Yes, it does, we will say yes, delete HelloWorld
31:37 - and get screamed because we don't need them
anymore. Okay, now that it's deployed, we
31:43 - can actually go to our Firebase console, go
to functions, make sure you're on that project.
31:50 - And there we go, we have this one function
called API. And we have create screen and
31:54 - the other ones that we created are gone. Okay,
so let's actually test this. So we go to postman.
31:59 - And I believe, well, we will not go to localhost
because we didn't do a serve. So let's actually
32:06 - copy this. Oops, let's go to here and copy
this endpoint. Yep, from here and go to postman.
32:16 - And if we take this, we have to add our actual
endpoint, which is screams as we set it to
32:22 - be. And we send a get request. And we wait
for it. And there we go, we get our screams.
32:32 - And now if we send a POST request, it should
fail. And it does fail. And it says that the
32:38 - route was not found, which is cool, because
so now we don't have to do this thing where
32:43 - we do if request method equals post, don't
send an error, the like, express takes care
32:48 - of that. Okay, so let's change the Create
screen route as well. So what we're going
32:53 - to do is actually just delete this part, or
just right up dot post. And the route would
33:01 - be slash scream. And this is the handler.
And here, I think everything is fine. We don't
33:11 - check if it's a post, because this is automatically
doing that. And let's leave everything as
33:18 - is for now. And actually, instead of deploying,
let's just serve so that we can test it locally,
33:24 - we don't have to deploy. So we run Firebase
serve. So nowadays served and by the way,
33:32 - if you get a warning that your node version
is higher than the one that Google Cloud Functions
33:37 - support, don't worry about that. As long as
you write your code that is compatible with
33:42 - node six, and you don't use any features that
are not supported by node six, you should
33:46 - be fine. So let's copy this. And let's go
to postman.
33:51 - Oops, not wrong, postman.
33:54 - let's paste this here, because now we're on
the localhost. And if we leave this as a POST
34:00 - request, and we add scream without an S, and
we give it a request body, and this request
34:09 - body will have a body new scream, I think
three, we didn't submit three, and the user
34:17 - handle and I say, Johnny Yeah, that's it.
If we send it should successfully create a
34:28 - screen. And yes, document something something
created successfully. And if we go to our
34:35 - database just to make sure. And, or Zed there
is so screen three by Johnny. Brilliant. Okay,
34:44 - so let's go here. Let's actually fix up the
screams route. What I want to do is that on
34:54 - whenever we return a scream, I want to return
its ID as well and you'll see later why we
34:58 - actually need it. So here, instead of pushing
all what's inside of that screen, let's push
35:05 - an object. And this will have a scream ID.
And we will take this from doc.id. That's
35:12 - the property that the doc document, reference,
or snapshot, rather has access to get the
35:20 - body, which is Doc, sadly, this is node six.
So we cannot use the like, maybe some of you
35:28 - are thinking, why don't we just do this? Like
doc dot data, which is called a spread operator
35:34 - and just spread all those properties. But
because this is node six, this feature is
35:39 - not yet supported. So we have to do we have
to do them one by one. So bodies doc dot data
35:45 - dot body, and user handle is doc dot data.
35:55 - dot whoops,
35:58 - though, use a handle. What else do we have
created art? Is dog data, dog created art?
36:14 - Think this is it? Yeah, this is okay. So if
we save now, when we get the screams, forgot
36:23 - to postman when we get the screams. So let's
add an s here, make this a get request and
36:27 - remove the body. We send this request, because
we're still serving, it should update. And
36:33 - there we go, we get the scream ID as part
of our screen. Cool. Now let's change something
36:41 - because there's a problem here, we want to
order our function, our screams, and we want
36:45 - to get the latest one first. So let's actually
ordered them by date. And we can do that by
36:51 - after collection screams let's chain a method
called order by. And let's pass the property
36:59 - of created at make sure you don't misspell
anything. And this by default takes an ascending
37:06 - order. But we want descending, we want the
latest one to be first. So let's hit Ctrl.
37:13 - Save. And we go and we send this request.
And we should get the latest screen first.
37:20 - And we do the one we just submitted earlier.
Brilliant. Now one thing I want to change
37:25 - as well is that these created art, I don't
want to use the Firebase timestamp type, let's
37:33 - just use a normal date string, because that's
recognized in JavaScript. And we can format
37:38 - it however we want. We want. So here, when
we create the scream, I don't want to use
37:44 - the timestamp thing anymore thing anymore,
let's just use new date. And let's just transform
37:49 - this into an ISO string. So dot new data.to
ISO
37:54 - string. And it's
37:56 - a function. So this will make it into a string.
And let's let me actually do that do something,
38:05 - let's create a file called DB schema. And
this, by the way, has no implications whatsoever
38:11 - on our code is just something that I like
to do, still let DB equal. Here, we're going
38:18 - to write how our data is going to look like,
just as a reference thing, we're not going
38:24 - to use this file in anything. So I want each
screen to have actually, in the database,
38:32 - it's not going to have scream ID, we just
returned that from our code, it's going to
38:36 - have a user handle though, which we will use
to identify who is the owner of this screen.
38:42 - Let's make this an object like this. Like
this, okay, it's gonna have a user handle,
38:50 - and let's give this a dummy value of user,
it's gonna have a body give this a dummy value
38:57 - of this is the scream, body. And it's gonna
have a created at, and this is an ISO string.
39:09 - Now let's actually quickly like generate one
for this do new date, to ISO string, not ISO
39:22 - and string, ISO string. Let's copy this, I
know you don't have to do this. But it just,
39:29 - I think it's a good practice as a reference
point, you don't have to open Firebase each
39:33 - time. One other property that we get one or
two other properties, actually we're gonna
39:37 - have, we're gonna have like count, she's gonna
be a number, let's say five. And we're gonna
39:43 - have common count. Now, this is good practice,
because each time we get a scream, we don't
39:49 - want to as well check the comments that have
the ID of the scream and count them and return
39:55 - that number because Firebase charges you on
the amount of reads that you do So you're
40:00 - trying to minimize the amount of reads that
you execute each time a user sends a request.
40:06 - So if you store these here already, you will
avoid too many reads on your database and
40:13 - be charged less. Okay, so let's, let's just
leave this for now. So this is what our screens
40:18 - would look like. And yeah, okay, so this is,
let's test this screen, this post screen.
40:27 - Let's make sure it's still working. So let's
send a let's, let's open up a new tab. So
40:34 - we don't have to type the URL again. Okay,
so post, I'm gonna have a body of type application
40:41 - Jason. Let's give this a body of new scream
400. I don't feel creative right now. Use
40:51 - the handle of j Jane. And we send this request,
oops, not screams scream. We send this post
41:02 - request. And there we go. We get document,
something Something was created. Let's go
41:11 - to our database. And now we see the new one.
And when is it the new screen for another
41:19 - created that is a string instead of a timestamp?
Cool. Okay, so I think this is it for this
41:26 - video. Oh, actually, one, one thing that I
want to add, for those of you that are not
41:32 - in America, and you're wondering why your
functions are being deployed to where is it
41:39 - to us central instead of Europe. By default,
Firebase deploys to us zone US Central one.
41:47 - Now, this is a bit of a problem, because it's
going to add, like 300 to 400 milliseconds
41:52 - of latency on each request. Maybe it's not
a problem right now in testing, but later
41:56 - in production, this is going to slow down
your application. So if you are like me, in
42:01 - Europe, and you want to change deployment
region, you just chain after functions here,
42:08 - you chain, the method region, and you specify
the string, the name of the region, in my
42:14 - case, it's going to be Europe, dash, West
one. And by the way, you can go to Google
42:21 - Docs, Google Firebase documentations, to find
all the regions available. If you're in America,
42:26 - this doesn't apply to you just leave it as
is. By changing this next time we deploy,
42:31 - it can actually be deployed to the zone Europe,
42:35 - West one.
42:36 - In this video, we're going to start to work
on authentication. And on signing up users.
42:44 - In particular, let's go to our project dashboard.
Let's go to authentication and enable it by
42:51 - clicking here setup sign in method. And here
on email slash password, let's enable it and
42:57 - click Save. Let's go to our project settings.
And let's go here your apps. And let's grab
43:05 - this config object. And let's go to our project.
Now, we're going to be using the Firebase
43:12 - library, which is a actually a client library.
But we're going to use it to sign in and sign
43:18 - up our users and get authentication tokens.
So let's CD into functions. And let's run
43:24 - npm install dash dash safe Firebase. Okay,
so let's initialize our Firebase application.
43:32 - This is important. So const, Firebase equals
require fire base. And let's do Firebase dot
43:44 - initialize up. And we need to pass it config
object. Let's do const. And let's paste in
43:51 - our config actually not var const. And let's
take this config and pass it to as the argument
43:57 - to initialize up so that Firebase knows which
app we're talking about. Let's actually make
44:03 - this Express line. Mix Express into one line
by doing require Express and calling it on
44:10 - the same line. I think it just looks neater
like this and let's put it up here. Let's
44:17 - create our signup route. Let's delete this
comment. replace it with another comment saying
44:22 - sign up route. And this would be a post route.
So app dot post. It will be slash signup.
44:30 - And the owner is gonna have a handler so request
responses the arguments. And now we need to
44:38 - extract the form data from our request body.
So let's do const new user equals an object.
44:47 - It's gonna have an email. If you remember
our form has an email password Confirm Password
44:53 - and handle field. So as to email equals request
dot body, dot email. comma, and let's copy
45:01 - this line and paste it three more times, select
Email, Ctrl, D undo password, select Email,
45:10 - control the Confirm Password, and handle.
We're not gonna validate the data for now.
45:20 - But let's write a to do here, validate data.
And let's sign up our user. So let's use the
45:26 - Firebase package we installed Firebase dot
auth as a function like this dot create user
45:34 - with email and password. And let's pass it
exactly that. So new user dot email. And the
45:43 - second argument will be new use of password.
This returns a promise so as to dot then data,
45:53 - which I think it's credentials as user credentials,
so let's do it. If we are here, that means
46:01 - we've successfully registered so let's pretend
a response response dot status of actually
46:08 - 201, which means a resource created as give
a JSON object with a message with a template
46:16 - string, because we need to use a variable,
let's say user. And let's do dollar sign curly
46:22 - braces to use a variable data dot user dot
UID stands for user ID. And let's say signed
46:31 - up successfully. And course, let's catch any
potential errors. And let's console error,
46:43 - the error. And let's return res dot status
500 oops, 500 server error. And it's gonna
46:55 - have a JSON with an error. Let's pass the
error code. Let's return it in case there's
47:02 - any error. Let's save. Let's run Firebase.
So and see if this is working. Let's copy
47:11 - this endpoint. Let's go to postman actually
already have it. So let's do slash sign up
47:20 - instead of screams. And it's going to be a
POST request. That's gonna have a body of
47:26 - type application JSON. So we're gonna have
an email, I'd say this is user@gmail.com.
47:38 - We're gonna have a password of 123456. Oops,
we're gonna have a Confirm Password, which
47:49 - does, which does nothing right now. But it
will later 123456. And the handle,
47:59 - which is going to be user, so listen, this
request. How do we get user, the ID of the
48:05 - user signed up successfully, and we get our
code of 201. Cool. So if we go to our Firebase
48:13 - project, let's close this. Let's go to authentication.
And there we go. We got our user with this
48:19 - user ID right here. Let's copy this user ID.
And I'll tell you why in a second. What we
48:25 - need to do right now is that Firebase by default,
doesn't allow us to store more information
48:31 - in about our users in the authentication collection.
But what we can do manually is we can create,
48:39 - of course, right now manually, but later programmatically,
we can create a collection here, we call it
48:44 - users. And this will store documents for each
user, we will have one document that holds
48:50 - extra details that we need, such as the handle,
and later, like a bio image URL, any extra
48:57 - details that you want to add. So And the key
thing that I want to do here is that our users,
49:04 - of course, by default, because of Firebase,
even though we can change this, but by default,
49:09 - each user is rich, each email is restricted
to one user. So the email has to be unique.
49:15 - But we want to also have the handle as a unique
thing, like, of course, because this website
49:20 - is kind of like a copy of Twitter. So our
handles will be unique. So we can use our
49:27 - handles as the ID. So here, let's not to do
auto ID. And let's give the ID of the user
49:33 - that we just created, which is user as the
document ID. And here we're going to
49:39 - have
49:41 - user ID key. and the value of that is the
ID we just copied. We're going to have a created
49:47 - art. And let's give this a timestamp the date
today and say I don't know midnight doesn't
49:58 - matter. Let's add another field. This is gonna
hold, what's this hold? Actually? Yeah, let's,
50:07 - let's put the email actually. Because if we
need it, we're gonna have it here. So user
50:13 - at email, calm. I think this is all we have
for now. So let's save. So now what we need
50:21 - to do each time someone signs up, we need
to check this collection. And we need to make
50:26 - sure that this handle is not taken. So if
right now if someone tries to sign up with
50:33 - a handle of user, or the desired behavior
should be, you cannot sign up because this
50:40 - handle is already taken. And if they tried
to sign up with the same email, Firebase will
50:44 - automatically give them the error. So let's
actually write the code that checks for the
50:49 - handle being unique. Let's look at our DB
dot. Actually, we don't have DB yet. Okay,
50:57 - let's change something. I saw this in the
in the Firebase documentations. And I like
51:03 - it, let's do db, db equals admin dot fire
store as a function like this. And wherever
51:12 - we need firestore, we just do db.so. Let's
replace where they will find admin dot firestore.
51:17 - Like this, we'll replace it with DB because
that makes more sense. So dB. And there we
51:23 - go. Okay, so in our signup route, we need
to do DB dot collection, users dot document.
51:33 - Actually, we can do document without collection.
So let's do DB dot document. And we need to
51:40 - pass it the path. So let's do a template string.
And the past will be slash users for the collection.
51:46 - And the document will be as the dollar sign
curly braces, new user dot handle. And let's
51:56 - do dot get. Of course, this returns a promise.
And this will hold a as we see here documents
52:04 - snapshot Yes, document snapshot. So doc. And
the way fibers works, even if this document
52:12 - doesn't exist, we'll have a snapshot. So what
we need to do is we need to have a conditional
52:17 - here, say if doc dot exists, which is a Boolean,
if this document exists, it's true. So if
52:25 - this document exists, then this is a problem
because this handle is already taken. So let's
52:32 - return ress dot status of let's give 400 bad
request. And let's give a JSON response. And
52:43 - the way we're going to structure our react
app is that we're going to return a not an
52:49 - array an object containing errors. And for
If the error pertains to any field, let's
52:54 - say the error pertains to the email, the errors
name will be email. So in this case, the errors
52:59 - name will be handled, and the message will
be this handle is already taken. Alright.
53:08 - And if this document doesn't exist, then cool.
Let's create this user. So let's do here.
53:15 - So let's do Firebase. So let's do this Firebase
dot all of this Firebase Auth, create user
53:24 - with email and password, new user email and
this. But since we're already in a then block,
53:28 - we need to return this return. So we return
this and then we chain another dot then. So
53:35 - that we will have the result or like the return
promise from this call here. Will which will
53:43 - hold data as to here. Now this, if we get
here, that means we have our user created.
53:52 - What we need to do now is I want to return
an access token and authentication token to
53:59 - our user so that the user will later use to
request more data. So we can do that by we
54:07 - know that in data here, we have access to
the ID. So let's do user ID equals data dot
54:14 - user dot UID for user ID. And we can do data
dot actually user ID, or is it user ID. Actually,
54:27 - we can even call it on the user itself. We
don't need this.
54:29 - So we can do data dot user dot get ID token.
Right now, it's not recognizing the, the type
54:39 - for some reason, but this should work. Get
ID token. And this, this actually is a returns
54:48 - a promise. So let's do return like this. And
you're like this and then let's chain another
54:56 - dot then and this will have token, so token,
don't know why the types are not being returned,
55:07 - being displayed properly. But let's just go
with it. Let's return the token. So let's
55:11 - return a response to JSON. Let's give the
status again of 201. json token, we can just
55:25 - say token like this because the name of the
property and the name of the value are the
55:29 - same sort of token like this should have the
value of our token. Okay, let's delete this
55:35 - code here. And let's do a dot catch error.
In case any error happens. Console dot error,
55:47 - the error and return as a response res dot
status 500. json with an error, error dot
56:00 - code. Cool. Okay. Let's actually let's not
put them side by side, let's run the same.
56:10 - Let's actually register a new user. So let's
say new att email, same password and the handle
56:16 - is new. This should return us a token. And
it does. So we have an access token right
56:24 - now. And this we will use to use whenever
we need to access a router that is protected.
56:32 - Okay, let's try to actually register a user
that already exists. So let's send the same
56:37 - request. So send we should get and there we
go. We get an internal server or email already
56:44 - exists. Okay, so we shouldn't this shouldn't
be happening we shouldn't get Actually no,
56:51 - this should be happening because it's the
error from here. So let's handle it here.
56:55 - We want we don't want to return like this.
We want to check if the code of the error
57:00 - is this code exactly here. That means it's
not a server error is just actually, it is
57:07 - a client error, technically. So what we need
to do here, we can do if error code, no code
57:19 - equals the string off email already in use,
we need to return. Yeah, I think 400 less
57:29 - give a res dot status 400 dot JSON. And the
error pertains to email. So as the email,
57:38 - we say, email is already in use. And if it's
anything else, so else return this. And do
57:52 - we do we handle any other errors? I think
we don't. Okay, so let's go to postman again.
58:00 - Listen, this request. Cool. ml is already
in use. Now, we haven't yet created a field
58:09 - for this, we need to create a new field a
document for our user whenever the they register.
58:15 - So let's do that. So right here, before we
get the token, do we do it before we get started?
58:23 - Or should we don't we don't return this token
here. So let's store it in a variable. Let's
58:29 - do here. Let's token initialize token here.
And then here we have a student token equals
58:39 - token. And here instead of returning a response,
let's, let's, let's do const. user credentials.
58:52 - equals and let's create our user document.
So this will have a handle of new user dot
59:02 - handle. And we will have the email of new
user dot email. And we will have created that
59:13 - which will be new date to ISO. Why do I always
type the end after ISO? Okay, the ISO string,
59:24 - make sure you didn't misspell anything.
59:27 - And we need the user ID here. Us user ID or
actually how do we access the user ID, we
59:37 - need to put the user ID as well in a variable
so that we can access it. So let's declare
59:42 - the user ID here. And we have access to it
here. So let's do user ID equals data dot
59:50 - user dot UID. And then we use we use oops,
on this user ID We can just do this, because
60:02 - it's the same name. Okay, here we are. Now
we need to persist these credentials into
60:07 - a document in our collection in our users
collection. So we need to do DB dot document.
60:16 - And this will be in the users collection.
Don't forget, by the way, thing, template
60:22 - literal string, slash user slash. And we'll
give it we'll give it the handle as the document
60:29 - ID. So this will be new user handle. And we
need to do dot set, which creates the document,
60:40 - unlike get, so let's pass this user credentials.
All this returns a promise, I keep forgetting.
60:49 - So to return it. And then let's do yet again,
another than promise you, I'm pretty sure
60:56 - this is the last then
60:59 - what do we get? We get some data here. What
type of data is is the right result, this
61:06 - is actually useless. So let's just not even
use it. Okay, return rest rez dot JSON. dot
61:16 - status, let's give the status. I don't I can
just return 200. But I just like to return
61:24 - to a one once something is created. So status
to a one JSON. And we need the token. So token.
61:32 - Yeah, this will work because it's the same
name. Yeah, same name that property. And let's
61:38 - save. Let's actually, let me delete this.
Let's delete the entire document or the entire
61:48 - collection. And let's delete these two users.
Because I don't want to keep coming up with
61:52 - new emails. Okay, let's test this out. Make
sure we saved we did. Or I did make sure you
62:02 - save as well. Let's do this as user again.
62:08 - user has to be the first one.
62:10 - Okay, sent Let's cross our fingers. And hope
for a token and we get to a one button empty
62:17 - object. Interesting. Let's go here. Refresh.
We get our user we go to the database. Users
62:28 - collection has been created cool. And the
ID is user. And we have the details here.
62:34 - Everything is fine. But why don't we get the
token back? Okay, so the problem was variable
62:40 - naming ambiguity. I named this token and this
was token as well. Okay, so this is token
62:48 - now. And then I renamed the return from the
promise to ID token and then assigned token,
62:56 - this token to this ID token, and then here
as the response return token, which will hold
63:04 - the value of this. And if we test this, we
go here and we do new five, I don't know,
63:13 - new five, and we post and we get the token
back
63:20 - cool.
63:23 - In this video, we're going to be implementing
validation to validate the data that's coming
63:28 - in and making sure that it's valid before
we do anything related to our database. And
63:33 - we're also going to write a login route where
users can log in. The reason one of the reasons
63:39 - why we need validation is that, for example,
if I would do this, I'll give an empty email,
63:46 - I'll give a handle that exists, it would already
go and check, oops, I need to run Firebase
63:53 - serve. If I would send data without an email,
but with a handle that exists, it will already
64:01 - go because of how our code is structured,
check whether this handle is taken or not,
64:06 - instead of just stopping here and saying that
the email must not be must not be empty. So
64:14 - if you would give as well, no handle, he would.
I don't even know I would would do which is
64:20 - give us like some word error like this, I
guess. Yeah, the value of the argument or
64:27 - something like this, but we need to just validate
everything ourselves and return errors accordingly.
64:33 - So yeah, the document path. Yeah, it was.
We gave an empty string right here and it
64:42 - caused the problem. Okay. So what we need
to do right now is we need to follow the each
64:46 - field. What we want to do is that we need
to make sure that email is not empty and email
64:52 - is actually in a valid email address, and
password and confirm password and handle all
64:57 - of them. We need to make sure they're not
empty and We need to make sure that the password
65:01 - and the Confirm Password match saw the same
value. Okay, so let's start implementing.
65:07 - So let's start working on the email. So we
need to make sure that it's not empty, let's
65:11 - write a helper function that lets us determine
whether a string is empty or not. So let's
65:16 - do const is empty, which is a function that
takes a string and does the following. So
65:24 - it does if string dot trim, oops, not string
dot trim. So we need to make sure that we
65:33 - eliminate any white spaces, because someone
can submit like one space, and that would
65:39 - be considered non empty, and we don't want
that behavior. So we need to trim. And if
65:45 - it equals an empty string, then return true.
Else return return false. Simple as that.
65:56 - Okay, so here, what we need to do is, we need
to say if is empty new user dot email, then
66:12 - we need to return all the errors together.
So what we need to do here is we need to declare
66:17 - or how do we say initialize an errors object
and set it to an empty object. And here, if
66:25 - we have an empty email, if the email is empty,
we need to set a property in this errors object
66:32 - and say errors dot email equal, say email
must not be empty. Now, if it is not empty,
66:45 - then we need to check whether it's a valid
email. And we need to check for empty first
66:49 - because we don't check whether it's a valid
email if it's empty anyway. So here we do
66:53 - else. If, and here, we're going to use another
helper method. So let's create that now. And
67:00 - this method would be ups const is email equals,
and it takes an email as an argument, and
67:11 - it checks whether this is a valid email. Now,
we could use like a validating JavaScript
67:17 - library, but there's no need, we just need
these two helper methods. So what I'm going
67:22 - to do is I'm going to paste here a regular
expressions. So let's do a const. Reg x equals
67:29 - all of this, and I'll post this in the video
description. Don't let this intimidate you.
67:34 - It's just a regular expression that matches
for a pattern of an email. So what we will
67:40 - do here we'll do f email, which is this string
that we pass to the function dot match, which
67:47 - is a function that matches a string against
a regular expression. And we pass it our regular
67:52 - expression right here. If they do match, then
we return true. That means this is a format,
68:00 - the string is formatted as an email, it is
a valid email. And else return false. What
68:07 - did I do? true false, return false. Okay,
cool. So here, we do else if is email, or,
68:19 - rather not is email. So if it is not an email,
and we pass new user dot email, if it's not
68:28 - an email, we do errors, dot email equal must
be a valid email address. Okay, so this is
68:42 - for the email. Now let's do the other three
fields. So first one is password. So if is
68:49 - empty, new user dot password, dot password,
68:58 - then
68:59 - errors dot password, we can just do a line
like this equals must not be empty. And let
69:11 - me by the way change this too just must not
be empty. Because on the front end, when you
69:16 - have an email input that says email on it,
it's not it doesn't look pretty when under
69:20 - the email as well, there's another error message
saying email must not be empty. The user already
69:27 - knows that this is the email field so it's
more proper to say just must not be empty.
69:32 - And this isn't the must not be empty. And
do we do the same? We don't do the same for
69:39 - password for Confirm Password rather. In fact,
we will just check if they are equal to each
69:46 - other. So what we need to do is that if a
new password or new user password does not
69:55 - equal, new user, Confirm Password Then errors
dot Confirm Password equals passwords
70:09 - must
70:10 - much
70:11 - all must be the same, it's up to you. Okay,
the next thing is the handle. So the handle
70:16 - must not be empty as well. So we can just
copy this and paste it and replace password
70:23 - with handle. And now what we need to do is
that here we have this errors object, we need
70:32 - to make sure that this errors object is empty,
that means there's no errors, that means we
70:36 - can proceed with the rest of the logic. Otherwise,
if there is a key in this error object, that
70:41 - means we have an error, we should just break
here and return. So we need to do is that
70:46 - let's do an if object with a capital O, because
this is a JavaScript namespace, or class rather
70:57 - object dot keys, and we pass in errors. dot
length, we need to make sure that the length
71:08 - of the array of keys is not equal is not bigger
than zero. Because if it is, that means we
71:14 - have some errors. If it is bigger than zero,
then we just return res dot status of 400
71:22 - or JSON, and we pass it the errors. I think
this is it. So let's actually test this. And
71:32 - we save and we go to postman. And here let's
send just empty values like this. See what
71:39 - happens. Cool. We get email and password unhandled.
We don't get confirmed password. But that's
71:47 - okay. So let's try to give it a an invalid
email. thread. Let's give it a password. But
71:55 - no Confirm Password. Cool. must must be a
valid email address for email, Confirm Password,
72:02 - it says passwords must match. That's actually
must much password. And says, Yeah, okay,
72:09 - so that Confirm Password error is gone. Now
let's give a valid handle. Now, Oh, I forgot
72:20 - to change the address. So let's give a valid
email address. And now it should go through
72:25 - cool, it still gives us gives us another error.
But this is from later on when we check whether
72:30 - the handle exists or not. Cool. So our validation
is working. One thing you do have to note
72:35 - though, if we give, if we miss out on a key
and not pass it, it will, it will have an
72:41 - internal error and not report anything back.
But I'm okay with this. Because we will be
72:46 - the only people consuming our own API. So
that so we will make sure from the React side.
72:53 - Because it's an HTML input, it will never
send a key that is undefined or no, it will
72:59 - send an empty value, but it will still send
that key will just send an empty value. And
73:04 - then we'll get the error, the proper error
validation. So we shouldn't worry about that.
73:10 - Alright, so that's validation done for our
signup route. Let's actually write the login
73:15 - route. So let's scroll down here. Let's do
up top post. And this will be slash login.
73:31 - This will have as per usual, or request the
response for the handler. And we need to now
73:37 - validate the data for for the login and the
login takes two things an email and a password.
73:43 - So let's do const user equals and this user
will have an email from the request body.
73:52 - Sure, can we use Never mind actually request
dot body dot email. And the password is request
74:03 - dot body password. And here we do validation
as well so that errors
74:13 - equals an empty object. And let's do if is
empty and we pass user dot email. If it's
74:24 - empty then errors dot email equals must not
74:28 - be empty. And oops. And if copy the same thing
actually. Let's select Email Ctrl D and do
74:43 - password and password must not be empty as
to F object.
74:50 - Keys. Pass errors is bigger than zero oops,
what am I doing length is bigger than zero,
75:03 - then we need to return res dot status 400.
And the JSON errors. So here, if we don't
75:16 - have any errors whatsoever, we need to actually
log in the user. So firebase.no actually dot
75:25 - auth dot sign in, sign in with, with email
and password, and then pass those. So user
75:36 - dot email, and then user dot password. This
returns a thing, a promise. So then data.
75:50 - And then we need to do the same as in the
sign in as in the signup rather. And we need
75:54 - to return the token. So what we need to do
here is the return data dot get ID token.
76:02 - And chain another dot then, and this will
have the token. And we just do return rest
76:11 - dot. Jason, I don't need this to do status
code. And we just put token like this.
76:20 - Catch,
76:22 - we have any error, the usual console. log,
not log error, rather. Error. And res dot
76:33 - status 500 dot Jason. Error. Error code. Alright,
so let's test this out. We save and we're
76:47 - still serving. So let's go to postman. Let's
check which uses we have forgotten. So we
76:54 - have used that email Comm. So let's go here,
change this to login. And what am I doing?
77:03 - Wrong? Yeah. What's happening? What does it
look like this? Okay, so Oh, yeah. Application
77:14 - JSON. Email is user and password is that we
hit send. And we should get a token, and we
77:22 - don't we get an internal server error. Why
is that?
77:33 - Get ID token. Okay, because it's data dot
user. dot get ID token? Because go back, postman
77:42 - sent, and we should get a token. Cool. We
do. Let's test out the validation. So empty
77:50 - email.
77:51 - Yep, must not be empty and the wrong password.
Oh, we should handle this, actually. So let's
78:03 - go here. If we have an error, let's do if
error code equals this code that we just got.
78:15 - Then
78:18 - return response dot status 403. Which, which
is, which means unauthorized and Jason error,
78:28 - actually not error, let's say, give general.
And this will make sense later.
78:35 - Let's say wrong. credentials. Please try again.
And if it's any other error, we'll just return
78:46 - it. So else like this. return that. And let's
say but let's test it. So the same input,
78:54 - let's hit send.
78:57 - And there we go. We get wrong credentials.
Please try again. Cool. So now we got the
79:03 - login route working and the signup route.
And we have validation. Yeah, we're done for
79:09 - this video. So in the next one, we're going
to be implementing middleware, we're going
79:14 - to be making sure that each time someone says
because right now our send post, submit scream
79:22 - request, router router is not protected. So
we need to make sure that whenever someone
79:27 - submits a post, they are actually logged in
so that this route is protected. Okay, so
79:36 - so far in our application, we have two routes,
the slash screams, which gets also the screams
79:42 - and the slash post, I mean post at slash scream,
which both one scream. Since we have already
79:49 - implemented authentication, it would be nice
to have some code here, that would check the
79:56 - authentication token that's being sent from
the user to see whether this user has logged
80:00 - in or not. Because this should be a protected
route, we don't want anyone posting screens
80:05 - to our database, they have to be logged in.
That's one functionality. And the other functionality
80:10 - would be, we need to extract the user handle
from that data, and then submit it into our
80:17 - database. So if you were to look at our database,
our screens are stored, having one property
80:24 - inside the document saying, that's called
user handle, which has the handle of the user
80:28 - so we can know whose screen that says. So
the way this this is done is that whenever
80:36 - we post a request to a protected route, we
need to add a header called authorization,
80:44 - right? Like this. And we will have a value
of bearer space and then a token right here.
80:51 - So it would be something like this. But of
course, this would be an actual token. So
80:57 - let's actually write code that would the code
of this token or like obtain this token and
81:03 - get data from it, and make sure that our request
is authorized. Alright, so we would actually,
81:15 - we could write the code right here. But since
we need this functionality for multiple routes,
81:21 - then we need to make this into a function,
and then run it, chain it before any request.
81:26 - So let's actually write this in a function.
And the way Express works is that we can pass
81:33 - a second argument to, to this post, or any
actually any route. And this argument would
81:40 - be a function that does something that intercepts
the request, and then does something depending
81:46 - on what the request has, and then decides
whether to proceed towards our handler, or
81:53 - to stop there and send the response, aka middleware,
a piece of middleware. So let's, let's call
81:59 - our middleware, which we haven't created yet,
if the auth for Firebase authentication, and
82:06 - let's create her so let's do const. So it's
going to be a function const, FB auth equals,
82:12 - and it's going to take three things to you've
already seen the request, and then the response.
82:18 - And the third one is called next, which is
gonna, which is something that if we return
82:24 - it and call it as a function, it's going to
proceed towards our handler right here. And
82:29 - we can chain as many pieces of middleware
as we need. But in this case, we only need
82:33 - one. Okay, so here we have access to our request
object, what we need to do is that we need
82:39 - to check if request, oops, no, not release
requests, dot headers, dot authorization.
82:51 - So if this exists, and we need to check now
we don't have to do the bearer thing. But
82:58 - it's a convention and in multiple frameworks
and other languages, and it's a good it's
83:04 - a good standard good convention that everyone
follows that your token has to be, has to
83:10 - start with the bearer space string. So what
we need to do here is we need to do another
83:17 - check another condition, which is request
dot headers, dot authorization, dot start
83:27 - with, which is a JavaScript function that
checks that a string starts with a certain
83:33 - other string. And let's do bearer space. Now,
if of course, as it suggests, if our string
83:41 - starts with bearer space, the and and it exists,
then this condition is satisfied. So we'll
83:48 - go in here. And actually, we need to initialize
a ID token variable here. So let's do a lead
83:57 - ID token. And then here, if these are true,
that means our ID token equals request dot
84:06 - headers, dot authorization. Now remember,
we need to extract it, we need to extract
84:15 - it because there's a bearer space before it.
So what we need to do is, we need to do dot
84:21 - split, which is a JavaScript function that
splits a string by a certain other string.
84:28 - So if we split it by bearer space, that means
it's going to have an array of two, it's going
84:34 - to give us back an array of two strings. The
first one is bearer space, and the second
84:38 - one would be the left, which is the token.
So as to one that means we want to take the
84:45 - the second element, which is the token. And
now that we have our token, we can proceed
84:49 - with our logic. But we need to do an else
statement here. Because if we don't have an
84:54 - authorization header or it doesn't start with
bearer, we need to actually stop the request
84:58 - here and send back an error. response. So
let's do return response dot status 403 because
85:07 - this is an unauthorized error, let's do Jason
with an error that says
85:16 - on,
85:17 - authorized. misspelled that unauthorized,
cool. Okay. And let's actually console log
85:25 - This Just In Case console, or console error.
Unless so Oh, no. token found. Alright. So
85:36 - here, if we pass through here, that means
there is a token. So it's not enough that
85:43 - there is a token, we need to actually verify
that this token was issued by our application
85:48 - and not from somewhere else. So what we need
to do is that we need to do admin dot auth.
85:55 - And here we have a function called verify
ID token. And we will pass it our ID token,
86:02 - ID token. And this returns a promise. So we
do then. And this promise holds a decoded
86:08 - ID token, as you see here. So let's do decoded
token. And like this. And then here, what
86:17 - we need to do is we need to this decode the
token holds the data that is inside of our
86:23 - token, and which is going to be user data.
So we need to add this data to our request
86:31 - object so that when this request proceeds
forward to let's say, this route, our request
86:37 - here will have extra data that we've added
from this middleware, and this case is going
86:41 - to be user data. So what we need to do is
the request dot user equals decoded, decoded
86:47 - token. Did I misspell that? No, it's fine.
Okay, so decoded token. And we also need to
86:56 - get the handle, because this by default doesn't
have the handle because the handle is not
87:00 - stored in Firebase authentication system.
It's stored in our collection users. So we
87:06 - need to actually do a database request as
to return DB dot collection users. And we've
87:18 - also stored user ID in our users collection.
So we can do where user ID equal equal equal
87:29 - equal. And we already have the user and the
request. So we can do request dot user. And
87:37 - this will have a property of UID. And that's
actually here, let's console log the, the
87:45 - decoded token just so that you see what it
looks like. Okay, so now where we have this,
87:53 - we need to limit let's let's do a limit one,
which, which does exactly that limits our
87:59 - results to just one document. And let's run
get, and then let's train another, then we
88:08 - get data back. And because this is a a DB
dot collection, query, and we using where,
88:16 - even though that we've limited it to one,
this will still have a Doc's property, which
88:21 - is an array, and of course, it's going to
have only one element. But to access it, we
88:26 - need to access the docs. So we need, we want
to add a property to our request user. So
88:33 - request dot user dot handle. And let's do
equals data, dot Doc's, the array, and then
88:41 - we take the first element dot data, the function
which extracts the data from this document,
88:47 - dot handle, I believe we have a handle, I
think, let's check in our users. Yeah, we
88:54 - have a handle property. So we're getting this
object and then we get in this property and
88:58 - attaching it to our request dot user. Cool.
So now here, when we got here, we need to
89:04 - return next as a function like this, which
will allow the request to proceed towards
89:12 - here. So now that we have this setup, actually,
let's handle the catch block. Because here
89:21 - if it verifies the token and the token, and
it fails at verifying it, that means this
89:26 - token is either expired or blacklisted, or
from some other issue. If it fails, it will
89:32 - come here. And here we catch the error. And
we need to send the error, an error an error.
89:40 - And let's actually console error. This error
and let's say error.
89:46 - While
89:47 - very fine.
89:49 - Oh boy,
89:51 - very How do you spell verifying, verifying
token And we put the error like this. And
90:03 - let's do return response dot status. Again,
a 403. And Jason error is already adjacent,
90:13 - so we can just do this. And then Okay, so
this is done. So here, now, this means in
90:21 - this route, or in any other route, where we
add this FB auth as a middleware, if we get
90:27 - here, by the, by the time we get to this block
of code, we've already been verified. And
90:34 - we've already it's already been checked that
we are authenticated. And we have access to
90:39 - request dot user. So what we need to do is
here in user handle, we just need to do because
90:48 - we have this user now. So we just need to
do request dot user handle, because we have
90:53 - we've added it to our request thing. So for
our post request, we just need to send a body
91:01 - and that will be enough. Alright, so let's
actually test if all of this is working. So
91:07 - we say then we do Firebase serve. Okay, let's
copy this endpoint. Think I already have it
91:14 - on postman? Yes, I do. Let's log in to get
a token. So the same data is still valid.
91:23 - Apparently, it's not Oh, yeah. Okay. I just
needed to correct the password. Okay, we get
91:31 - a token. Let's now send a request to slash
API slash screen. And it's still a POST request.
91:42 - And here, we have an authorization header.
With the value bearer, let's actually test
91:48 - like a random value here, so that we further
on purpose. And our body would have a body
91:55 - property of body and it says,
91:59 - another
92:01 - screen submitted, I don't know. Okay, let's
send the request. And it felt the coding Firebase
92:10 - token fails, cool, we get this error 403 forbidden.
And if we were to give the correct token,
92:16 - so here bearer space, this token that we got,
and we send, it should be successful, cool
92:25 - document something, something was created
successfully. And notice, we didn't even have
92:28 - to send the handle. And if we go to our database,
in screams, and if we sort them by created
92:35 - at the sending. So this is the latest one.
And there we go, we have the user handle user,
92:42 - because that's the user we use to log in with.
And yeah, it's submitted and everything works.
92:49 - Cool. So we've already we've set up our authentication
middleware. So whenever we have any protected
92:55 - route, we just need to add this. And there's
your decoded token, it's got some token metadata,
93:01 - like the user ID, the expiry time, the email,
and any other user extra data that you would
93:08 - add. So before we start to write more code,
and more routes and more functionality, let's
93:18 - start to refactor our code and organize it
so it's actually easier to maintain and to
93:23 - work with here, let's create a folder called
utility or util. And here, let's create a
93:29 - file called admin dot j s. In this file, we're
going to put, let's see, let's take a stick
93:39 - admin. So cut and paste it here. Let's take
where we initialize the app. And let's take
93:48 - the creation of dB. And now we need these
two admin in dB. We need them we need to import
93:55 - them in other in other files. So what we need
to do is the module module, dot exports equals
94:05 - this admin, and dB. Alright, so next thing
is we need to separate the routes for screams
94:14 - and the routes for users to two different
files. So here in functions, I'm going to
94:18 - create a folder called handlers. And inside
of handlers, I'm going to create a file called
94:24 - screams dot j s. And another one called users.js.
Okay, so let's take the So here, we don't
94:35 - take the whole thing, we just take the handler,
and I'll show you why in a second. So we just
94:39 - take this chunk of code, and let's go to your
screams. And let's do exports dot. What was
94:49 - that? That was slash scream. So let's call
it get all screens equals the following. Now,
94:56 - of course, we need dB. So we need To import
that, so let's do const DB equals require.
95:05 - And we require that we go back one level,
and then we require that file created the
95:12 - admin file. So utils dot admin. Alright, so
here, what we need to do is that we need to
95:20 - do const get all screams, which is that handler
function. And let's do require equals require
95:30 - one on the same directory slash handlers,
handlers slash screams. And then here, we
95:38 - just give it the get all screams, function
reference. And let's call, let's put a comment
95:46 - here and say, scream. routes. And this, there's
another one here. So we take the handler,
95:53 - we leave the middleware. And this is post
one scream, let's call it, let's call it just
96:00 - that post one, scream. And let's go to the
screens, and do an exports don't have to worry
96:09 - about formatting because prettier will do
that for me. So thanks, ex post, post, one
96:14 - screen equals all of this. And we save and
it formats. I go back to index, let's copy
96:22 - this, or cut it, split it with the screen
routes up here. What else we have? Let's forget
96:31 - about this for a second, we have the post
signup route. So let's take all of this. It's
96:38 - actually a lot of code. And let's call this
signup, which we haven't created yet. But
96:44 - we go to users. And we say exports. dot signup
96:49 - equals all of that. And exports now export.
So here we need, what do we need? We need
96:57 - dB. Do we need admin? Let's search for admin.
We don't need admin. Let's remove this to
97:02 - do because we've already done that. And let's
bring in dB. So const dB, Rick, because require,
97:13 - go back to one level and do slash detail slash
admin. One thing one other thing we need here,
97:21 - I think is Firebase. Yeah, we need Firebase.
So we can do here five days, or construct
97:30 - a const. Firebase equals require the package
Firebase and Firebase, let's initialize it.
97:41 - So Firebase dot initialize up, we pass it
config. And it's good practice to put the
97:47 - config file separately. So let's do const
config equals require. We haven't created
97:56 - this yet, but we will in a moment. So we go
back one level, and we go into util. And we
98:01 - do config like this. Let's create that. So
here we do config dot j s. Oops, what did
98:09 - I do? No, not conflict slash j s. Let's delete
that. Or let me delete that you probably didn't
98:14 - make this mistake. So config dot j s. Let's
go to the index. Let's grab this. So go to
98:24 - config and we do module dot exports equals
this. And, okay, so what's next? Okay, let's
98:38 - bring in the signup handler. So const. Sign
up. Let's do login as well, which we haven't
98:44 - created. But we will, because require handlers
slash users. Okay, so let's take the login
98:58 - handler as correct and right login instead
of it. Let's do this. Let's go to users. Still
99:10 - exports got login, equals all of that. And
we need Firebase we've already instantiated
99:18 - or initialized rather Firebase. Do we need
admin? We don't. Okay. So in the index, now
99:27 - we have these helper methods. Let's take these
routes, let's put them let's put them here.
99:30 - Let's call these users routes.
99:31 - And
99:32 - let's take this off middleware Ops, pay, copy
all of it. Now let's create a new file called
99:33 - FB auth dot j s and you Let us do module dot
exports equals equals all of that equals all
99:34 - of this. And what does it need it needs admin.
So we need to import that const admin equals
99:35 - require admin, which is in the same directory.
Okay, so let's take these two helper methods,
99:36 - or functions. And let's create a validation
file or validators, validators dot j s. And
99:37 - let's have these two functions here for now.
Let's go to screams. Not screams users. So
99:38 - let's take this validation from here. Let's
copy all of this. Okay, let's see how we can
99:39 - do this. Let's copy all this. So this is for
the signup route. So let's create a function
99:40 - exports dot let's say validate, sign up, like
signup like this signup data equals, it's
99:41 - a function that takes data and does the following.
So we have errors. And here instead of new
99:42 - user, we just say data. Wherever there is
a new user, we put data. And the thing is
99:43 - we don't return status or anything from here.
We will return errors. But let's also return
99:44 - another key with errors. So let's do what
do we do? Let's do return error errors. And
99:45 - along with errors, we return another Boolean
called valid. and the value of this is this.
99:46 - Actually, let's compare it to zero. So if
we have zero then or do we actually need to
99:47 - put the ternary operator? Actually, let's
do because it might be a different data type.
99:48 - So So if it's if there is no keys, it's true.
Otherwise, it's false. Because if there's
99:49 - no keys again, in errors, that means there's
no error, that means the data is valid. So
99:50 - we return this object that contains the property
valid. And if it's the property valid is true,
99:51 - that means the data is valid, then we should
carry on with whatever that's happening in
99:52 - that function. Or in that handler. Okay, so
I think everything is okay here. So we need
99:53 - to import this. So we go back to users. And
let's do right here. Let's do const, validate
99:54 - signup, data equals require. And we go back
one level, and we go to util slash validators.
99:55 - And let's do as well, validate. Do we need
to validate login data? Yeah, yeah, by the
99:56 - login data, which we haven't created yet.
So here, in the signup, we'll do const valid.
99:57 - So we this is called destructuring. Because
we're going to extract valid and errors from
99:58 - validate signup. Like this. Yeah, it's like
this sign up. Data. Why is it not? suggested
99:59 - I misspell something here. I did. Okay. Oh,
actually, wait, sign lots sign like this.
100:00 - Yep, sign up data. And we pass new user. And
let's correct that because here we call it
100:01 - like something wrong. So sign like this, or
I called it. Let's create also. Okay, so here,
100:02 - we need the conditional, so if not valid,
then we return result dot Jason, or that status
100:03 - first. of 400. Got Jason. We passed the earth.
Otherwise, we just carry on. So let's do the
100:04 - same thing. Let's copy these two lines here.
Let's go to login. And here we do like this.
100:05 - But instead of sign up, we say login.
100:06 - And we pass user, not new user. And everything
is fine here. Let's copy this logic here.
100:07 - And make it into a function and validators.
And the fun shall be called exports dot function
100:08 - will be called validate login data. And it
will take data and it will do the following
100:09 - errors. Let's do the same thing here. So return
errors and valid. Okay, so did we also in
100:10 - the index we need to import the auth middleware
authentication middleware. So const FB auth
100:11 - equals require you to slash util slash FB
off like this. Let's save everything. Let's
100:12 - see if it works. Firebase. So let's see if
I didn't mess up anything.
100:13 - Okay.
100:14 - config is not defined index. config. Oh, we
don't need to initialize Firebase here. Excuse
100:15 - my dog. Okay, we need to bring post one scream
actually. Let's try again. One more time.
100:16 - All right, let's copy the URL. And let's go
to postman.
100:17 - Let's try to fetch all the scripts. So get
through the authorization header, even though
100:18 - it doesn't matter. Okay, fetches all the screens.
And we tried to go to sign up. And it's a
100:19 - POST request to give a body. And here let's
give it an email. Give it like something wrong.
100:20 - SATs. Password 123456. Let's give a Confirm
Password. The same? Actually, let's try the
100:21 - validation. See if it's linked properly. So
handle let's say new. Let's send. Cool. Okay,
100:22 - so let's give a valid email. So new at email
calm. And the handle is new. And we give same
100:23 - password we hit son. Cool, and it works. So
as you can see, now our code is looking so
100:24 - much better, like the index file is so minimal.
And everything is now separated into their
100:25 - respective files. So now this will make it
so much easier for us to work on our routes.
100:26 - And we know where to go if any error happens.
So now that we have our handlers for our route
100:27 - for screens and users in two different files,
who can actually start to add more routes
100:28 - to further enrich the functionality or up
Alright, so before we do anything, I want
100:29 - to like fix two things that I they forgot
to fix. So here in the auth middleware, we
100:30 - need to actually import DB because we need
it right here to access our database. And
100:31 - in validators here, when validating user data,
we don't check for user email, we check for
100:32 - data, because that's the name of the argument.
Cool. Alright, so the thing that I want to
100:33 - work on this video is setting a route for
users to upload the profile image to so let's
100:34 - do that. Alright, let's create a route here.
And the users route is going to be a post
100:35 - route. So slash app dot post is going to post
to slash user slash image. And the function
100:36 - is going to be called upload, upload image.
And let's import that
100:37 - from our not from
100:38 - users. So upload image Let's actually create
that let's save this and close, close this,
100:39 - save this and close this. Well, let's go to
users. And here at the bottom of users, let's
100:40 - create this function exports dot upload. Image
equals, it's going to take a request response
100:41 - and an error function and it's going to do
something. Alright, so for this, we're going
100:42 - to need the package called, well, there's
multiple packages that do this, but that we're
100:43 - going to install something called busboy so
and make sure that you're in functions, and
100:44 - run npm install, dash dash save bus, boy.
Alright, so if we look at the documentation
100:45 - for bus Boy, you just install it, and you
in your function, ignore this HTTP thing because
100:46 - we're already in a handler in your function,
you run this on event on file, and then you
100:47 - handle the file upload, and then you run on
finish. And then you stop the process. And
100:48 - you upload your image using whatever library
that you're using. In our case, it's Firebase,
100:49 - or the Admin SDK. Alright, so let's do const.
busboy equals require bus, boy. Let's bring
100:50 - in a couple of other things. So const path
equals on path is a default package that's
100:51 - installed on any node. Node project, spring,
another default package called OS. So OS equals
100:52 - require OS. Another one, it's Fs. Triple D
stands for file system. Alright, that's all
100:53 - the imports. Let's instantiate an instant
instance of busboy color. busboy equals new
100:54 - bus, boy. And this takes an options object
mainly had his item in it, and this is going
100:55 - to be we're going to give it the our headers
that we got in our request. So request dot
100:56 - headers. And here, let's do our own file event.
So busboy.on, and the event name is called
100:57 - file for file uploads, and the handler is
going to take a couple of things. So first
100:58 - one is field name. And as you see here, second
is file. Third is file name. Fourth is encoding.
100:59 - And fifth is MIME type. Now, and don't be
overwhelmed by this, we don't need all of
101:00 - these, we just knew the file name, your file
name, and MIME type. But even though that
101:01 - we don't need encoding, for example, we can
just do this because otherwise MIME type will
101:02 - have the value of encoding because it's the
fourth argument in the handler or in the callback
101:03 - function. So here, we need to get the extension
of our file or of our image file. So let's
101:04 - do const. Image extension. Extension. Yes,
public correctly equals, now let me show you
101:05 - how we're going to extract this. Let's say
we have an image file called image dot png,
101:06 - or not orangey. png, we need to get this PNG
or if it's a JPEG, we need to get the JPEG.
101:07 - What we can do is, we can, the problem is
we can have an image called for example, my
101:08 - dot image dot png. So what we need to do is
we need to split this string by dots on each.so.
101:09 - Let's do is a file name, your file name, dot
split. And we pass this a string and not a
101:10 - string, a dot. And here we have an array of
strings or strings. So we're going to have
101:11 - an array that we'll have for example, in this
case, it's going to have the first value is
101:12 - my second image. And third is PNG. So we need
to access the last one. So here, this is an
101:13 - array, so we need to access the last item,
which is going to be file name dot split by
101:14 - dot again, dot length minus one. All right,
so here, this is gonna give us the index of
101:15 - the last item. And then this will give us
the value of that which is going to be either
101:16 - PNG or JPEG or whatever. So here we need the
actual image file name. So let's actually
101:17 - actually create one so const or we call it
image or image file name. And let's just give
101:18 - it like a random value. So math dot random
times, times, I don't know 10,000 billion.
101:19 - Actually, we need to run Under this to get
rid of the decimals, so math dot round surround
101:20 - all in math dot round, like this. And we need
to concatenate a dot and concatenate the extension.
101:21 - So let's make this into a template literal
string. And make this into a variable like
101:22 - this with dollar sign curly braces, let's
add a dot and do another dollar sign curly
101:23 - braces and add the image extension. So an
example of this would be like this. So it
101:24 - could be like some random numbers dot png.
Alright, so let's close the template string.
101:25 - And let's do a semi colon. And now we need
to get the file path. So let's do const file
101:26 - path equals path, dot join, join. And here
we need the OS namespace, OS dot temp there
101:27 - for temporary directory, because this is not
an actual server, but and, but a cloud function.
101:28 - So let's do image. We can catenate image file
name that we just created. And then here,
101:29 - we'll create a way actually, what am I doing?
Yeah, we're gonna need image file name and
101:30 - this object that we're going to create later.
So let's actually declare them, we're going
101:31 - to need them in a different scope. So let's
declare them here. So let's do let image file
101:32 - name. And we're going to need something else
called image. Give it a more expressive name.
101:33 - So image to be uploaded. and initiate, initialize
it as an empty object. So here, we need to
101:34 - actually create this image to be uploaded.
So image to be uploaded. It's an object and
101:35 - it's going to have two properties, the file
path with the value of file path, so we can
101:36 - do it like this. And the MIME type. Let's
console log this, so that you see what these
101:37 - values actually hold. It's useful to sometimes
do it. So field name, we don't need file because
101:38 - it's a weird to where doctor console dot log,
file name.
101:39 - And
101:40 - console dot log
101:41 - mimetype.
101:42 - All right, we don't need the rest, we just
want to see these values. Okay, so now that
101:43 - our file is created. Now, I mean, our object
is created, we need to use the file system
101:44 - library to actually create this file. So let's
do file dot pipe, which is a no j s method.
101:45 - And we pass it Fs dot create, write, stream
stream. And inside of the stream, we give
101:46 - it our file path that we created. And now
this is going to create the file. Now after
101:47 - this event is due busboy.on. And this event
is the finish events. Once this is done, this
101:48 - will be executed, it's going to have a callback
that doesn't take any argument. And here,
101:49 - we need to upload this file that we just created.
So admin, that, Oh, we don't have admin, we
101:50 - need to bring admin in. So here we bring admin,
let's go back down. So here we do admin, dot
101:51 - storage. dot bucket, dot upload. And this
takes a file path or a path string called
101:52 - here, which is going to be image to be uploaded
that file path. And the second parameter or
101:53 - argument is an options object. And there are
a couple of options, but we just need resumable
101:54 - resumable. And we give this value of false.
And we need an object for metadata, which
101:55 - holds and by the way, this stuff is in the
Firebase Admin SDK. documentation for now,
101:56 - I really suggest you look at that because
it helps understand what what the hell we're
101:57 - doing. So this metadata holds another object
called metadata. And we're gonna have a key
101:58 - called content type that I'm spelled correctly
I did and this will have the image to be uploaded,
101:59 - dot MIME type. Alright, so this upload function
returns a promise. So we change then and I
102:00 - believe we don't need anything from that.
Yeah, so we just go like this arrow. And here,
102:01 - what we need to do is we need to construct
the image URL to add to our user. So actually,
102:02 - yeah, yeah, we need to do const. image URL
equals, and this will be template string,
102:03 - HTTPS, colon slash slash. Was it for Firebase
Storage dot Google. Google API's dot com,
102:04 - slash v zero. And I'll show you in a second
how I know that this is a thing, slash v zero
102:05 - slash b slash dollar sign, curly braces to
put here, what we need to put is forgot to
102:06 - the conflict file, find that we have a storage
bucket key. So we need this. So we need to
102:07 - do we already imported it in this file. So
we need to do config dot Storage bucket. And
102:08 - we need to keep on going so slash Oh slash,
here, we need the image URL that we just created.
102:09 - Now, we need to know we need the image file
name. So image, file name. And this is why
102:10 - we created both of these outside of this scope
so that we can access them here. Okay, so
102:11 - image filename, and we. This is not actually
we need to chain alt, this URL parameter alt
102:12 - media, alt equals media. Because if we don't,
whenever we access this URL, without the ultimate
102:13 - idea, it's just going to download the file
to our computer instead of showing it on the
102:14 - browser by adding this alt media actually
shows it on the browser. Alright, so this
102:15 - is the image URL we need to do now is we need
to add this image URL to our users use a document
102:16 - which is right here. So let's go to our database.
Our user here needs to have a key called image
102:17 - URL, and we'll have this value. And so here,
what we need to do is we need to do return
102:18 - Doc
102:19 - not.db dot doc, and this document would have
so template string, you the path for this
102:20 - document is slash users. So in the users collection,
slash dollar sign, don't forget that this
102:21 - is a protected route, if we go to admin, and
non admin index. So in the index, I actually
102:22 - made a mistake here. So this is a protected
route, we need to add our auth middleware
102:23 - authentication, middleware FB auth, because
this is we can't have anyone upload an image
102:24 - to our server, or to our storage bucket. So
we add the middleware here. And because we've
102:25 - added the middleware, this gives us access
to the request dot user, because when we reach
102:26 - here, that means this has been authenticated.
And we have that user object. So here, we
102:27 - do request dot user dot handle, which will
let us access the document of this user. And
102:28 - instead of running get we run update, so dot
update, an update takes an object and in each
102:29 - object, you can do field and give it a value,
and it will update update that field with
102:30 - that value. So here, we need to update the
field called image URL. And of course, if
102:31 - it doesn't exist, it's going to create it,
that's going to have the value of image URL
102:32 - that we just created here. So we can actually
just get rid of this and put it like this.
102:33 - Cool, this returns a promise we already put
return was changed, then what does this have
102:34 - the right result, that's useless. So just
don't take it away, just go here. And here,
102:35 - we just return res dot Jason.
102:36 - And
102:37 - it's going to have a message, this doesn't
matter, really. And let's say image uploaded,
102:38 - successfully. Cool. And of course, here, we
handle the error case. So catch error, console,
102:39 - dot error, error. And then we return res dot
status 500. And with a Jason with an error,
102:40 - error code. Alright, one thing I forgot to
do, actually, is that whenever a user signs
102:41 - up, by default, they should have whoops, here.
No, not postman here. So I click on postman
102:42 - again. I didn't actually that was a bug. Okay.
So whenever a user signs up, we need to add
102:43 - an image URL right here that will have a an
image that has like no face. I mean, this
102:44 - I don't know. How to describe this this thing
I've already downloaded, I'll put the link
102:45 - in description. So we want by default, whenever
someone signs up, we give them this image.
102:46 - And until they upload a new image for themselves,
they have this when they upload a new one,
102:47 - they will have the new one. So let's actually
manually upload this to our bucket. So we
102:48 - go to storage. I think for you, you have a
blue button here says activate storage, I've
102:49 - already done that. And that's up upload this
file. And the no image file, I called it no
102:50 - dash image dot png, I'll tell you why matters
what I called it. So it's right here, it's
102:51 - in our bucket. Now what we need to do is go
back to our code. And here whenever someone
102:52 - signs up, let's give them this image. So after
the validation, let's do const image, or no
102:53 - image equals that name. So no dash image dot
png. And here when we create the entry in
102:54 - the users table, we are the key news is document.
Then why keep saying table? Because of SQL.
102:55 - Okay, so image URL, and the image URL would
be the same thing that we had we had here.
102:56 - Whereas this thing, so let's copy all of this.
102:57 - Let's go back up.
102:58 - Where are we? So right here, Storage bucket,
but instead of image file name, it's gonna
102:59 - be no IMG. All right. And that's the comma.
Alright, let's test all of this. It should
103:00 - be working. So yeah, let's save everything.
And let's run Firebase serve. Not save serve
103:01 - Firebase serve. Let's sign a new user up.
Okay, so this sign up. And here we have given
103:02 - new@gmail.com password of that password. The
same thing? And, or not password? Confirm
103:03 - Password. And here we'll have a handle new.
And let's send this email is already in use.
103:04 - Is it? Clear? Let's do another one. So new
to handle is new to cool get a token. That
103:05 - means we've signed up successfully and go
to authentication we have new to we go to
103:06 - database. And in that user new to There we
go. We have the image URL, and it's the images
103:07 - the no image. And if we copy that, and we
access it out, we get four or three error.
103:08 - And why's that? Oh, okay, I know why. It's
because we in the storage in the database
103:09 - access rules. By default, it doesn't allow
anything and unless we're authenticated. But
103:10 - we're not using the client library, we're
checking the authentication through Cloud
103:11 - Functions. What we can do here we can do allow,
read. So this by default will not allow right
103:12 - we will only allow read, which is not a problem
for us, because all the files that we're storing
103:13 - here are just use a profile images, which
are public anyway. So let's do allow read
103:14 - publish, as published. Now, if we refresh,
there we go. We see that image. Cool. So now
103:15 - by default, our users have this no user image.
So let's actually test if uploading a new
103:16 - image works. So we have this user new two,
they have this new image. Let's log in as
103:17 - new two. So remove these two things and change
this login. Actually, we could just use this
103:18 - token, it's the same as take this token. And
on the same route, let's go to I mean, on
103:19 - the same tab, let's go to slash user slash
image, it's going to be a POST request. And
103:20 - it's going to have the header also realization
there. And we paste that token. And here instead
103:21 - of a raw body, we give a form data type body.
And this key Let's name it image doesn't matter.
103:22 - But let's name it image. And here. Yeah, let's
change the type from text to file. And let's
103:23 - select the file and let's select this user
dot jpg. And let's send let's see if it's
103:24 - actually uploaded successfully.
103:25 - keeps going forever. Oh, okay. I know why.
Whoops. All right. So here at the end, where
103:26 - am I? Okay, we're here. So after this unfinished
event, we need to add busboy that and and
103:27 - we pass this request to row body, which is
a property that's in every record. object.
103:28 - Let's save and it runs again. And let's send
the same request. And it says image uploaded
103:29 - successfully status code 200. Cool. Let's
go to our new two. And there we go, we have
103:30 - a new image with a random name if we go to
storage. And by the way, when you click on
103:31 - storage, you go here, file location, and you
take this download URL. And you go here, it
103:32 - gives you a URL with a token and an access
token, which you need if you don't have access
103:33 - permission. And if you just remove that you
hit enter, there we go, we get that image.
103:34 - And the same URL is stored is stored in the
database in the user's document. So which
103:35 - one is new to, and there we go with that URL,
we copy it, we paste it, and it's exactly
103:36 - the same image. Cool. And if we try to upload
another image, let's upload this PNG, sand.
103:37 - And it's uploaded. Someone called this image
young men instead of young man. Nice English.
103:38 - Alright, so we copy that, we go here, and
we see the young man. Alright. So the image
103:39 - upload is working successfully. But there
is a catch here. So let's say I already created
103:40 - this, how convenient. So let's say we have
a text file called hello world. And for some
103:41 - reason, it takes ages to open a text file,
and it's got the value hello world, we can
103:42 - actually upload this file instead of an image,
text and we upload it as uploaded successfully.
103:43 - And it's actually assigned to our user image,
a text file. And if you don't believe me,
103:44 - if we paste it, we get hello world. That's
not very good. So what we need to do we need
103:45 - to handle that here. And by the way, these
are the prints we're printing. What are we
103:46 - printing? What is this? Oh, this is the decoded
token. Let's actually remove that. Let's go
103:47 - to FB auth. And remove this print or this
console log, we save. So if you as you can
103:48 - see here, we're actually logged in the after
the token will login the the the name of the
103:49 - field, and the name of the file and the MIME
type. So when we uploaded the text, the MIME
103:50 - type was text slash plain. And when we uploaded
the PNG was image dot png, PNG and the JPG
103:51 - is exactly that. What we need to do here we
need to, if the file type is not PNG, or jpg,
103:52 - we don't want to allow our users to upload
GIFs or text files or whatever. So we need
103:53 - to do here. Let's do F, MIME type does not
equal image slash jpg. And MIME type does
103:54 - not equal image, oops, image slash PNG, then
here we just return an error, return res dot
103:55 - jpg, not just give a status code of 400, bad
request dot JSON with an error message that
103:56 - says
103:57 - wrong.
103:58 - file type submitted. Let's test if that's
working, we save then we go to postman with
103:59 - the same text file, we send. Call, we get
wrong type, file, file type, whatever. And
104:00 - then if we submit the user dot jpg, it actually
uploads and it changes in our database that
104:01 - it changes to a JPEG. Cool, so that's image
upload. I know this has been a long video,
104:02 - but yeah, it's it's a little bit complex to
handle image upload. In this video, we're
104:03 - gonna work on adding user details. I don't
know if I've written this in a past video,
104:04 - but you can take a time to write or read this.
So this is our basic user basic user info.
104:05 - And these are extra credentials that we could
use through that we could add through our
104:06 - front end, a bio, a website and a location.
And of course, they're optional. So let's
104:07 - write a function to actually add these details.
Let's go to our index file, create a route
104:08 - for this. And this will be a post route. So
I've got a post. And this will point at slash
104:09 - user. And this will, of course be a protected
route. So let's add the middleware FB auth.
104:10 - And the function will be Add User details,
which we haven't created yet. But we will
104:11 - in a moment. So let's import user details.
So let's go to users save this and go to users.
104:12 - And here Actually, I'm going to put it above
the upload image. Let's put a comment here.
104:13 - Add User details and exports dot add User
details, request response as per usual arrow
104:14 - function, let's actually put a comment on
this as well upload an image, a profile, not
104:15 - an a profile image for user. Comment here
as well log us in. Now, I'm not writing a
104:16 - lot of comments, because that could take up
some unnecessary time you feel free to write
104:17 - comments as you go. But I believe in if you
write expressive code, and you name your variables
104:18 - properly, whenever you write clean code, you
feel like you don't need to comment as much.
104:19 - But of course, sometimes commenting can be
useful for other people to read your code.
104:20 - Okay, so let's actually write this function.
So here, we need to take a couple of details.
104:21 - And the thing is, I'm going to write right
now not a validation method or function, but
104:22 - it's, it's a function that will take the input
and make sure let's let me actually write
104:23 - something and then I'll explain so let say,
let us details. The details equals, we're
104:24 - gonna write a name of a function that I haven't
created yet reduce user details. And this
104:25 - will take in the request body. And, whoops,
what did I do? Okay, semicolon right there.
104:26 - And let's bring in this request, reduce. Reduce
user details from validators, let's go there
104:27 - and create it. So and validators at the bottom
here, let's do export dot reduce user details,
104:28 - it will take data. And here, like we mentioned
earlier, we need, we're gonna take three things
104:29 - a bio, a website, and a location. So as to
let user details, initiate this as an empty
104:30 - object. And here, we're going to do one check,
actually, a couple of checks here, if not,
104:31 - is empty. And we take in the property data.
Remember that this data is request dot body.
104:32 - So in body, we have our properties bio, that
is the first one so data dot bio, of course,
104:33 - dot trim, to remove any whitespace. So if
it's if it's not empty, then user details,
104:34 - dot bio, equal equals data dot bio. If it's
empty, then this will not have a bio property.
104:35 - So here we list do If not, is empty data dot
website, dot trim. Now here, I'm gonna do
104:36 - something like this tiny, clever trick, where
what I want to do is that if a user submits
104:37 - a website like this with HTTPS, or HTTP at
the start,
104:38 - so website.com, we're going to save it as
it is. But if they don't, if they just submit
104:39 - website, comm, we want to add HTTP, colon
slash slash, and make sure that HTTP not HTTPS,
104:40 - because if a website doesn't have SSL, it
will actually crash or not load anything if
104:41 - you do HTTPS, but a website that does it will
still allow us to use the protocol, protocol
104:42 - HTTP and we can still access it. So let's
do If not, we've already done our if there
104:43 - is not if here, so user. Oops, user details.
The website. Yeah, the website, actually doing
104:44 - it another. Yeah. Whoops, we need to check
for the HTTP. So let's do if data dot website,
104:45 - dot trim again, dot substring. Actually, the
S is miniscule. So substring, all lowercase.
104:46 - And here what we're going to do substring,
it takes a substring from a string, and you
104:47 - give it a start and an end. So the start would
be zero, and the end will be four. And actually,
104:48 - this is not a four here is actually the P
for some reason, and it's not s you would
104:49 - think that four would be in HTTPS, four would
be s but apparently it's not this, this function
104:50 - behaves in a weird manner. So if we compare
this substring to HTTP, and then so if this
104:51 - is true, that means the website already has
no actually this is what Compare it, we're
104:52 - making sure that it's not actually to be if
it's not HTTP. That means we need to add that
104:53 - to the to the website. So let's do user details,
dot. Now you don't have to do this, but I
104:54 - think it makes it makes it more neat. So we
add HTTP, colon slash, slash. And then remember,
104:55 - this is a backticks. And then dollar sign
curly braces, data dot website, dot trim.
104:56 - All right. Now else, else, this means it has
HTTP already, we just actually, we don't need
104:57 - curly braces, we can just say else user details,
that website equals data website. Now for
104:58 - the location, it's oops, not here. So for
the location, we just say, if we're gonna
104:59 - do the same thing as the bio, nothing fancy.
If replaced bio here with bio, so location.
105:00 - What, why we're doing this is that with our
front end is definitely gonna send three properties
105:01 - by a website or location, even though if a
user doesn't send a bio, if they leave it
105:02 - empty, our, our react app is going to send
a bio property with an empty string. So our
105:03 - code here makes sure that we don't actually
submit a an empty string for a value of a
105:04 - property to our database. If it's an empty
string, we don't even add that key. So here,
105:05 - we just do return user details. And this function
is done. So let's save and go back to our
105:06 - users file. And we've brought that in. So
where are we we're here? is odd us? Oh, boy.
105:07 - Okay, we're here. Sorry about that. Okay,
so here, what we're gonna do is, we're just
105:08 - gonna look for the document of this user.
So let's do const user document. What do we
105:09 - do the document? Yeah, we're actually going
to need just actually we just do.db Doc, and
105:10 - backticks slash users. Remember, this is a
protected route. So we have access to the
105:11 - to the users object. So request our user handle
105:12 - dot get,
105:13 - sorry, not get the update. And here, it's
actually as simple as just passing this user
105:14 - details. Because this user details will have,
let's say, if it has bio on a value, this
105:15 - will just update exactly that. So it actually
works out to have an object shape like that.
105:16 - So here, the update returns a promise. So
then, and here, we just return a message.
105:17 - So let's do return res dot JSON. And the message
will say, details did successfully. And catch
105:18 - we have an error, which is console dot error,
error. And we return it return res dot status
105:19 - 500 dot Jason error
105:20 - code.
105:21 - All right, I think this is it for this function.
So let's save and test it. Let's make make
105:22 - sure we we saved all files. And I've already
got Firebase running. So if we go to postman,
105:23 - and here change this route to just slash user,
as opposed at slash user, and yeah, I'll send
105:24 - and Okay, my token has expired. it expires
after an hour, so we need to log in again
105:25 - and get a new token. So let's login. Let's
copy that token. let's paste it here. Okay,
105:26 - I'll just type again, space token. Let's send
this Oh, actually, I need the body. What am
105:27 - I doing? Yeah, yeah, the thing is like the
other vital the validation as well, we have
105:28 - to have our keys. And of course, our front
end is going to make sure that we have our
105:29 - keys. So let's do actually an empty bio. to
test whether it's not submitting an empty
105:30 - key to the database. To do a website. Let's
call this user.com to test whether it's going
105:31 - to add HTTP to it. And let's do a location
of London, UK. And that sound cool. It says
105:32 - details added successfully. Let's check our
database. So go to our app database. Go to
105:33 - our user, which is user right here. Cool,
we have a location. And we have a website
105:34 - and it's other HTTP two. And we don't have
a bio, because it's empty. Let's try to override
105:35 - these details. Let's say, my bio now says,
Hello, I use a whatever. And I changed the
105:36 - website to google.com. For some reason, I'm
the owner of Google Now. And I moved to Los
105:37 - Angeles, California, because why not? Let's
send details added successfully. Go to the
105:38 - database. And there we go. We have the new
details. google.com la, California, and, and
105:39 - yeah, Hello, I'm user, we have the bio now.
Okay, cool. And if we actually add the HTTP
105:40 - to HTTPS, colon slash slash google.com, and
we send There we go. So HTTPS, so it doesn't
105:41 - alter it right now. All right. So next thing,
let's actually work this other route, because
105:42 - the way our application is going to work is
that we keep the login route minimal to reduce
105:43 - response time. So that when we log in, we
only get a token. And then when we're redirected
105:44 - or directed to the homepage, we use that token,
and we send the request to a different route
105:45 - to get all the details for our user. gonna
copy something, just to not waste time writing
105:46 - it from a different file. And I'm going to
paste it actually, I'm just gonna copy a part
105:47 - of it. User details, and I'll explain it in
a second. So let's close this object here.
105:48 - So this is going to be our Redux data. This
is going to be what user information that
105:49 - we're going to hold in our Redux state in
our front end application. And we will use
105:50 - to populate our profile with, we need credentials
to show them on our profile on the right.
105:51 - And we need likes to actually check on the
homepage or on any page, whether any of the
105:52 - posts that are listed there are liked by us,
and to like show a different icon. If they
105:53 - are, if they're not, we just show the empty
heart icon. Alright, so we need to write the
105:54 - router that actually returns this data for
us. And this data will have more later when
105:55 - we implement notifications. But for now, we're
just going to get credentials and likes, you
105:56 - can take your time to write this if you want.
Alright, so let's go to index and create this
105:57 - route. And it's going to be an app dot get
slash user as well, it's going to be protected,
105:58 - because we're going to use that token to get
the data. And it's going to be called get
105:59 - authenticated. user or just get authenticated
user. The names don't really matter, as long
106:00 - as they make sense to you, and you can remember
them it's fine. Alright, so let's import that.
106:01 - And let's go and create it. So in users here
underneath our user details, put a comment,
106:02 - get own user details. And let's do exports
dot get often dedicated user equals request
106:03 - response arrow function. And here, we need
to, first of all, let's declare a
106:04 - let rest data. Because empty object This is
the response data, we're gonna start adding
106:05 - data to it as we go through our promise chain.
So first thing we need to get the user so
106:06 - DB dot doc, slash users slash dollar sign
curly brace again, request dot user dot handle
106:07 - dot get dot then. So here we're gonna get
a one document. So Doc, our function, we're
106:08 - gonna do a check if the document exists, just
in case because if you don't do this check
106:09 - is going to crash. So Doc, if doc dot exists,
if it exists, then user data, actually, is
106:10 - it user data? response data? Yeah, rest data.
It can be a user data, let's change it actually,
106:11 - to user data. It makes more sense. Now that
I thought of it like that, off the top of
106:12 - my head, it does make sense. Okay, so user
data credentials. Equals as simple as doc
106:13 - dot data. And don't, don't forget that this
is a function. So don't take and do curly
106:14 - parentheses. So here, Let's now get the screams
of this user. Actually, we don't need the
106:15 - screens, we just need to get the likes which
don't exist right now. Okay, let's do that.
106:16 - I don't know if it's gonna crash the app if
it doesn't exist, but let's try. It never
106:17 - hurts to try something. So DB dot collection
likes where use a handle. We haven't even
106:18 - created this collection yet. But let's roll
with it equals request dot user dot handle.
106:19 - And we're not gonna order this by anything
because they don't have a created a created
106:20 - art.
106:21 - So it's just do don't get then we get data.
I'm here, we need to look through this data.
106:22 - So let's do data dot for each
106:23 - document. We need to actually initialize user
data.so as to use the data because if we don't,
106:24 - it's going to crash because it doesn't know
it's gonna mess up with types. So it's actually
106:25 - not user data user data dot likes equals an
empty array. And here for each document, we're
106:26 - going to do use it data likes dot push, document
that data like this. And then when it's done,
106:27 - we just return the data. So when it's done
here, we do return response, or stress dot
106:28 - JSON. And we pass user data like this. So
of course, here, catch
106:29 - her
106:30 - the usual console, error, or return rest dot
status 500. Jason code. All right, let's test
106:31 - if this is working. Let's go to postman. Make
sure you saved all your files.
106:32 - And here with the same token, we're gonna
send the get request and put the body as non
106:33 - because it's a get request with the token,
and let's hit sand. Cool, we got credentials,
106:34 - and we get an empty likes array. And even
though the the collection doesn't exist yet,
106:35 - it returns an empty array. This is how Firebase
works based on document references, it will
106:36 - still have a document, and it will still have
a reference even though the document doesn't
106:37 - exist, or the collection in this case doesn't
exist. Cool. So we have credentials. So we
106:38 - have now a route to get user credentials.
Alright, so far, we only have two routes for
106:39 - screens, one that gets all the screens, and
one that posts a screen. Let's add a route
106:40 - for getting one screen and getting all the
details that are pertaining to that one screen.
106:41 - Alright, first of all, like these three user
routes should be grouped with the user routes
106:42 - like this. And let me remove this whitespace.
Let's, let's write this route. So this will
106:43 - be a post, of course. So up, sorry, get get
at slash. So this, this is the URL that would
106:44 - need the scream ID that we need to because
this is the only way of sending data through
106:45 - a get request is in the URL parameters. So
we'll do a slash screen slash colon slash
106:46 - scream ID, this colon will tell our application
that this is a route parameter. And we can
106:47 - access its value. And of course, it's not
protected because we want in our application
106:48 - to allow users to view screams and comments
and all this stuff, even when they're not
106:49 - logged in like Twitter, because this is kind
of a Twitter clone. Alright, so the function
106:50 - will be called get scream. And let's actually,
I want to write all the other routes as a
106:51 - to do so that I'll so that you have an idea
of what we're going to actually be creating
106:52 - later. So we're going to have a route for
deleting, so delete screen, and we're going
106:53 - to have to do let me copy this to do so that
I have to type it again. Like a scream oops,
106:54 - scream and we're gonna have another one for
unliking a screen We're gonna have a comment
106:55 - on screen. And I believe this is what we're
gonna do next, because it's the one that makes
106:56 - sense the most. All right, so we have a route
for getting one screen. But before we do that,
106:57 - I want to add some dummy data on Add a collection,
a comments collection, which holds exactly
106:58 - that. And before I add the document, I want
to copy something and paste it, I don't want
106:59 - to type it and waste time on it, because you
might not want to type it, I'm going to paste
107:00 - it right here. So these are the, our comments
are stored in our database. So they have a
107:01 - user handles so that we will know who submitted
this comment. And they have a scream ID. And
107:02 - that refers to which screen they pertain to.
So when we grab a screen, we grab it's comments
107:03 - by this scream ID property. And they have
a body of what the comment says. And of course,
107:04 - they have created add on of one they were
actually created. Alright, I believe maybe
107:05 - later, they will hold an image URL as well
of their user. But but we'll see, I'm not
107:06 - sure yet. Alright, so let's create a comment
like this. So what we need is for things a
107:07 - user handle a scream, ID, a body and a created
that. So a scream, Id will get from this one
107:08 - screen, so copy this. And then let's create
the collection. Again, it's gonna have an
107:09 - auto ID a field of scream ID, that scream
ID a user a handle. We only have one user
107:10 - right now, or at least because I deleted the
other users a body which will say nice scream,
107:11 - man, exclamation marks, or ape, I suppose
makes more sense. And a creator that which
107:12 - will be a string. And let me copy this date.
From here, cool. Alright, so save. There we
107:13 - go, we have a comment that is attached to
the screen. I mean, it's not attached, because
107:14 - this is a document based collection, but we
will make it so. So let's go to our screens.
107:15 - Actually, let's go back to index, we need
to import this, copy this get screen and add
107:16 - it to here. And let's save all files, go to
screens dot j s and let's create this get
107:17 - screen function.
107:18 - So exports dot get screen. Equals takes a
request the response are a function to let's
107:19 - declare a variable scream data. It's an empty
object. Let's do DB dot document doc and the
107:20 - back backticks and do slash screams slash
dollar sign curly braces to access a variable
107:21 - request dot params. four parameters dot scream
Id like this. Get, of course this returns
107:22 - a promise. And this will hold the document.
So let's do let's do another check as well.
107:23 - So let's do if not doc dot exists, which is
a Boolean that that tells us whether this
107:24 - document exists or not. We'll hear stop and
return res dot status of 404, which stands
107:25 - for not found JSON with an error of the scream,
not found in case someone sends a request
107:26 - to slash scream slash an ID that doesn't exist
anymore. All right, so else we just add this
107:27 - data. Well, we don't need to do an else because
it's inferred already. So let's do screen
107:28 - data equals document dot data as a function.
And then now we want to add the ID of the
107:29 - screen to the data because we're going to
need that later. So let's do screen data dot
107:30 - scream ID equals doc.id. All right, so now
we need to fetch the comments of this screen
107:31 - as well. So let's do return DB dot collection.
Calm comments where scream ID equals request
107:32 - dot params dot scream ID dot get. So this
returns a promise. So we do another one here
107:33 - then and we get a query snapshot because this
one Won't be this can be multiple documents.
107:34 - So let's initialize a safe scream data dot
comments equals an empty array. And let's
107:35 - do data dot for each document. Allow us to
scream data dot push,
107:36 - and we push doc dot data. And we don't need
the IDs of the comments. So after here, so
107:37 - our comments are already there. So we just
need to return the data. So
107:38 - let's do return. scream. No, not not scream
data res dot Jason. No without curly braces
107:39 - just scream data like this because it's already
adjacent.
107:40 - And of course, catch and response dot status
500 dot Jason. Code. All right, I think this
107:41 - is it for this function. Alright, let's test
if this is working. So I'm already running
107:42 - Firebase serve. If you're not take the time
to run it. And let's go to postman and test
107:43 - this up. Okay, so this is going to be slash
scream, slash a scream ID. And let's go to
107:44 - our database and grab this scream ID right
here. Paste it. And it's a get request with
107:45 - no headers. Even though if you have headers,
it doesn't affect it, sort of just send it
107:46 - and loading. internal server error, interesting.
Scream data dot push is not a function. Oh,
107:47 - it's because scream data dot comments. dot
push, oops, as comments
107:48 - is the array of scream data is an object.
All right, let's try again. Cool, we get our
107:49 - data. And what we need to do though, because
right now we have only one comment. So it
107:50 - this problem doesn't appear. But if we'd have
multiple comments right here, it's going to
107:51 - sort them differently. Actually, I'm not sure
what it sorts them by. But we needed to sort
107:52 - them by created that because we want to show
the latest one first. So let's go here. Let
107:53 - me close the console. And here after we fetch
our comments, after the collection thing,
107:54 - and we say order, like this order. How do
you spell order by by created art, and in
107:55 - a descending order. So let's save and run
the query again. Well, of course, we're not
107:56 - going to see any difference because it's just
one comment. And we get an internal server
107:57 - error. Oh, I know why. It's because Firebase,
when you have a five complex Firebase query,
107:58 - you need to create an index for it. But usually
it gives us a URL. But some for some reason,
107:59 - this URL is formatted in a very funny way.
Let's try again and see if if the the response
108:00 - like the console log is actually formatted
properly here. Alright, so this is the URL
108:01 - you're going to get as well, the URL, it says
it's going to say the query requires an index,
108:02 - you can create it here. So you just collect
this Ctrl Click from the console, so that
108:03 - opens it on the browser. And what's cool about
Firebase, the index is already ready for us
108:04 - to be created. However, this doesn't show
anything for some reason. Let's go to index
108:05 - this again.
108:06 - Okay.
108:07 - Let's copy and paste this. All right, we'll
click Create index. And this is gonna take
108:08 - a couple of minutes so I'll be back on system.
Okay, now that our index has been created,
108:09 - we can actually send this request again and
it should show us the data And it does. And
108:10 - now even if we add another comment, actually,
let's add another comment just to show that
108:11 - it works. So let's go to our comments. And
let's do oops, no other comment. And what
108:12 - fields Do we have, we have a user handle the
same user, and we have a body, say another
108:13 - comment. And we have a creator that may copy
that date from that file, right here. And
108:14 - we're going to add one day, instead of the
15th of March, it's going to be the 16th of
108:15 - March. And we're going to have another field
of scream ID. I'm going to copy it from here.
108:16 - And submit that and send the query again,
we get two comments. And the latest one is
108:17 - this one, we get it first. Cool. All right.
So let's create a route for actually submitting
108:18 - comments without having to create them on
Firebase manually. So let's go to index instead
108:19 - of this to do comment to let's do app dot
post, add slash scream, slash screw, colon,
108:20 - scream ID, screen ID slash comment. And this
will be a protected route. So let's add the
108:21 - auth middleware. And this will say comment,
on
108:22 - scream
108:23 - scopic comment on scream, let's go to here.
And let's go and create it. So here at the
108:24 - bottom of the comment here saying, Our get
or fetch, fetch one scream. Fetch makes it
108:25 - makes it sound like like the code is my, you
know? Like, the code works for me, which makes
108:26 - more sense, because it does. Alright, exports,
I don't know, comment on screen equals request
108:27 - response. And here, what we need to do is
we need to validate the body, but we only
108:28 - have one field, so we don't create a function
for it, we just say request dot F request
108:29 - dot body, dot body again, because the property
is called body dot trim the equals an empty
108:30 - string. That means the user sent empty data.
So let's do on the same line return res dot
108:31 - status 400 with a JSON error, I say, comment
must not be empty. Or actually it just must
108:32 - not be empty, because the input will already
say comment on it. So if we say comment, again,
108:33 - doesn't make sense. Otherwise, I'll do const.
Let's create this comment object that we're
108:34 - going to persist to our database. New comment
equals object. The body of the comment is
108:35 - request apps request dot body dot body. The
created art is a new date, to ISO string.
108:36 - The screen ID is request dot params dot scream
ID, the user handle we get from our request
108:37 - dot user object that's passed through our
middleware. So the handle of course. And actually,
108:38 - we do need to store the user image. Because
what we want to do later when we fetch the
108:39 - comments, we don't want to fetch the comments.
And then depending on that comment, as well
108:40 - fetch, depending on the user handle of the
comment as well fetch the profile image of
108:41 - the user. So let's do here user image, add
something called user image. And this will
108:42 - be request dot user dot image URL. Now, we
haven't added this yet, but we can. So let's
108:43 - go to our util. What's cool about this because
we've already sent a request to the database.
108:44 - So we already have all the properties of the
user. so here we can just add another one
108:45 - called request dot Use a dot image URL equals
data dot Doc's zero dot data the function
108:46 - dot image URL. All right? Yeah, we're done
here. Let's go back. So here we have the user
108:47 - image stored with the comment. So let's persist
this. What do we do actually? Oh, we need
108:48 - to actually confirm that the scream exists
because this screen might not exist anymore.
108:49 - So let's do DB dot doc backticks slash screams,
slash dollar sign thing. curly braces, request
108:50 - dot params dot scream ID to get this screen
dot get, then Doc, because this is DB dot
108:51 - doc, so it has to return one document. So
let's say if not, dot dot exists. So if it
108:52 - doesn't exist, we return res dot status 404.
Because we don't want users submitting comments
108:53 - to ideas that don't exist anymore, and then
we will have to like persist comments with
108:54 - scream ideas that don't exist anymore. So
we just say here, if the scrim doesn't exist,
108:55 - we say, screaming not found. And then if we
pass this, if and nothing happens, not not
108:56 - pass it as in if it's not triggered, then
we just do DB dot collection. And it will
108:57 - be the collection of comments. Now we add
our comments. So dot add, which I believe
108:58 - we haven't used yet is this is the function
that you use to add a document and you pass
108:59 - it a Jason. And in this case, our Jason is
already created. So we copy that and we add
109:00 - our new comment object. And here we do dot
then this returns a result, I think, not actually
109:01 - a document reference, but we don't need it
anyway. If we come to this done blog, that
109:02 - means the document was created successfully.
So we just say rez, you actually need to return
109:03 - it res dot Jason new comment, we return our
comment back to the user, because they need
109:04 - to add it on the user interface. Because here
we do catch error. And console dot log. rows,
109:05 - rez not released event res dot status 500
JSON error code
109:06 - or
109:07 - oops, actually, what am I doing? This could
happen a lot. So we could just say error.
109:08 - Just say something, the classic something
went wrong. Okay, so let's save all files.
109:09 - And now let's go to postman. So we have this
scream ID we do slash scream slash scream
109:10 - ID slash comment. And before we do that, we
need to actually log in. Let's copy all of
109:11 - this, open a new tab, send a POST request
with the body of type application Jason. And
109:12 - let's login. So email will be user@gmail.com
or whatever user you have on your database.
109:13 - password will be the password we set for we
set for it. What 404 not found, oh, oops slash
109:14 - login. Let's get the token. So here, still
bearer token. And by the way that a request
109:15 - we did earlier to get the screen was not protected
one just to prove to you. Let's send a get
109:16 - request without the authorization header.
We still get the screen because it's not protected.
109:17 - So here slash comment, and we put the token
and in the body we have if you remember we
109:18 - have only one property of body. And this will
be comment. Number three. Let's send or not
109:19 - get post. Send. Scream not font. Really. It
makes sure I got the right ID
109:20 - Did
109:21 - scream not found? Oh, what am I doing scream
ID not screams. Okay, let's try again. Something
109:22 - went wrong. Let's check the error log. line
number 96 return DB dot collection. Comment,
109:23 - add. You comment? What's wrong with that?
Okay, so after console login, the comment
109:24 - that object I created, turned out that the
user image was undefined for me, you probably
109:25 - didn't have this error. Because the because
when I log signed up this user, I hadn't implemented
109:26 - the image URL logic at that time. So let's
just add image URL here. Or let me just add
109:27 - this and add the link to the new image. And
this should fix the problem. Yeah, okay. So
109:28 - now image URL should would not be undefined
call. Because when I was trying that one,
109:29 - one of the keys, we had the undefined value,
which is not allowed by Firebase. All right,
109:30 - so the comment is submitted now, and I get
the comment back with the user image, which
109:31 - we'll use to display on the comment and the
front end. And if we go to our comments collection,
109:32 - we see that we get comment number three cool
with the user image. We're going to create
109:33 - two routes, one for likeness cream, and one
for unlikeness. Cream. So we got app dot post,
109:34 - or is it post, actually, it can be a get request
to opt out, get slash scream, slash, colon
109:35 - scream, ID, slash, like, or Yeah, just like,
and then it's gonna, of course, going to be
109:36 - a protected route, is gonna point to like,
scream. And let's copy it, paste it again,
109:37 - this will be on like, and I've changed this
to unlike as well. So let's bring these two
109:38 - functions that we haven't created them. So
like screen. Unlike screen, one thing that
109:39 - I forgot to do last time. So here, where we
post a screen, we need to actually get the
109:40 - image of the user as well, because we don't
want to send another query to fetch it. So
109:41 - we can do user image here, we store the user
image in the document of the screen. So user
109:42 - image equals request dot user. Remember in
the last video, we actually did this image
109:43 - URL thing. So request dot user the image URL
through the middleware, we're adding it. And
109:44 - we need to set like count initialism. So like
count is zero, and comment count is zero as
109:45 - well, because this post has just been created.
And when we create it, as well, as a response,
109:46 - we need to return it and not just return a
message. So here when we get the document
109:47 - back what after adding, let's do const. rest
on our response scream, I guess rest scream
109:48 - equals new screen. And here, let's do ress
scream dot scream ID because we want to add
109:49 - the ID equals doctor ID. Now you might be
thinking, whoa, this is a constant, how can
109:50 - you edit a key in it? But actually, you can
add a key in the constant, you just can't
109:51 - change the data type or the complete value
of the object. Alright, so here response to
109:52 - Jason, we just returned this rez scream. And
let's quickly test that. So I already have
109:53 - Firebase running. Let's go to postman. We
already have a token to hope isn't expired.
109:54 - So slash scream. Let's keep this open. Let's
just copy this. Yeah, let's copy this here.
109:55 - Slash API slash scream to post the scream.
So let's copy this token. Go to headers. Authority
109:56 - authour. Oh boy, authorization. bearer space
that token I did it guys I spelled authorization
109:57 - properly. The body will be I don't know. Hello.
Hello. Whatever. That's And,
109:58 - and cool we get Hello, hello the body will
you use our images not image because this
109:59 - user does have an image yet, I get the scream
Id like con created. Brilliant. Okay, so that's
110:00 - fixed. Alright, let's create the like function.
So export, like a screen, split a comment
110:01 - here that says, like a scream, like a person
could not understand from like scream that
110:02 - it's what it does, I don't know, request response.
And here what we need to do? Actually, I want
110:03 - to explain something first. It's theory time.
All right, what we're going to do here, because
110:04 - you might be thinking, Wait, why don't we
store all the comments and the likes of each
110:05 - screen in the screen document itself. And
you would be right in the sense that yeah,
110:06 - it makes more sense to store them in the same
document. But the way databases work, you're
110:07 - supposed to keep each document actually really
small in size, and try to spread all the properties.
110:08 - And the way Firebase in particular works is
that it, it has a maximum of four megabytes
110:09 - per document that Allah allows you. And of
course, if you would have a big social media
110:10 - website, let's say something like Twitter,
one tweet could have 1000s of likes and 1000s
110:11 - of comments. So it would be extremely inefficient
to store everything in one document, because
110:12 - it will be really slow to query that one document.
And if you needed only a few properties, instead
110:13 - of everything, the way how query languages
work, you need to fetch the whole document
110:14 - to get to get any properties. So it's more
efficient to actually spread these properties,
110:15 - and have the likes and the comments in different
collections and fetch them separately. I'm
110:16 - going to post in the description a video by
the Firebase developers themselves explaining
110:17 - how you structure your database like this
and why it's actually more efficient. And
110:18 - why it costs you less money on Firebase, remind
me if I forget to pause the video. And by
110:19 - the way, I have one quick thing to say, Tell
me, please let me know in the comment section
110:20 - if you prefer the, you know, the just code
and let me write the code behind you. Because
110:21 - I just want to learn this framework approach.
Or you prefer the approach where I actually
110:22 - explain the stuff that I'm writing, because
I noticed I do spend quite a lot of time explaining
110:23 - some of the principles, but I personally think
it's better for you to understand them. But
110:24 - okay, run over, let me know give me I'd like
to get some feedback on that. All right, let's
110:25 - get to business. Let's create a collection
called likes. And the way our likes are going
110:26 - to work simply each like will hold a user
handle of who liked the screen. And another
110:27 - key scream ID of what scream they liked. Let's
grab this ID because it's the only scream
110:28 - I have on my database. So let's put it here.
And we could add a created art. But it's only
110:29 - useful for statistics and data analytics,
because we just want to show the amount of
110:30 - likes, you can do it if you want, but I'm
just gonna stick to scream ID and user handle
110:31 - for now. So yeah, we got likes now. And that
means technically this. Actually, I have the
110:32 - other screen. So this screen now has one like
by this user. Let's not worry about like count
110:33 - for now.
110:34 - Actually, let's worry about it. Let's just
let's just Oh, it doesn't have it. It's okay,
110:35 - let's not worry about.
110:36 - Alright, so here, what we need to do is that
we need to check whether a live document exists
110:37 - or not, we can't just add like we fetch, we
query from our database. And if this like
110:38 - document already exists, we need to return
a message to the user saying scream, scream
110:39 - already liked, you can't like it again. And
as well, we need to check whether the screen
110:40 - itself exists. And if it doesn't, we'll be
like, hey, the screen doesn't exist. You can't
110:41 - like a screen that doesn't exist. This function
is going to have a lot of code. But it's it's
110:42 - good practice if you you need to take care
of the edge cases. So we're going to get both
110:43 - documents right now and set them in variables
because we're going to need to reference to
110:44 - them multiple times. And we don't want to
like type a lot of this code again. So let's
110:45 - do const like document equals DB dot collection
likes where the user handle of the like equals
110:46 - the user handle of the user that's trying
to like again, or trying to like not potentially
110:47 - a lot again, so request dot user dot handle
because this is protected again. That means
110:48 - we have access to that handle. And we chain
another word here where scream ID equals request
110:49 - dot params because this is the idea of the
screen will be in The URL itself, dot scream
110:50 - ID. All right, and let's do limit. One. Because
this is a query, that means it's going to
110:51 - return a couple of documents. And even by
the way, when we limit to one is still going
110:52 - to give us an array with one document, it's
not going to give us one document. So let's
110:53 - do const. Scream document. Equals DB dot doc,
slash, screens, slash, dollar sign curly braces,
110:54 - request dot params dot scream, ID. All right,
let's do let's initialize that scream data
110:55 - equals an empty object. Do scream document.
So first check is we'll check that document
110:56 - that this screen document exists dot get dot
then doc. Here we do if if not doc dot exists.
110:57 - And return. Actually, let's start with doc
exists, because it's more efficient to start
110:58 - with the case that what you think is more
probable to happen. So if doc exists, then
110:59 - we need to actually give this scrim data this
data, so scream, data equals, we don't have
111:00 - to actually ensure that as an object because
it's going to become an object now, so scream
111:01 - data equals doc dot data, we need the scream
ID as well. So we do scream data dot scream,
111:02 - ID equals doc.id. And here return like document
dot get. And here we do else that means If
111:03 - the document does not exist to do return res
dot status 404 JSON with an error scream not
111:04 - found. Alright, so after the then No, not
catch, we have another one. Because we did
111:05 - return like document. So this will give us
a query snapshot. So data, if so data has
111:06 - an empty property if if the array is empty,
so if data are empty, that means we don't
111:07 - have the life so we can't actually create
it. So let's do return DB dot collection.
111:08 - Likes, likes like this dot add. And here we
pass an object. And this object will have
111:09 - a scream ID of request dot params dot scream
ID and the user handle quest dot user dot
111:10 - handle.
111:11 - And
111:12 - the thing is, we can't do return here and
and then handle the promise in the next two
111:13 - then. Because this, the problem is that even
if it's not empty, it might, it might actually
111:14 - go through so we're actually gonna put we're
gonna nest the than inside of this if block
111:15 - to avoid that problem. So we're gonna do them
scream, data, dot, like count. So we're going
111:16 - to increment the light count, because we liked
so we're going to increment the life count
111:17 - of the screen by one so we do scream data
that light count plus plus. So let's do now.
111:18 - So now we've already added a like to our likes
collection, what we need to do is we need
111:19 - to actually persist not persist, add increment
the like document, sorry, the like count in
111:20 - the property in the light in the document
of the scream in the database, oh boy, or
111:21 - ice cream, God document dot update. And we
need to update one property, which is the
111:22 - like count. And we set it to scream data like
count, because remember the screen data equals
111:23 - the data that we got from the screen from
the database. And we've already incremented
111:24 - the light count here. So we just passed this
here. And and here we chain another one. And
111:25 - this returns a right result we don't need.
So we're here we just say return res dot Jason.
111:26 - So here Everything was successfully so we
return the screen data to hold the screen
111:27 - and Yeah, without any likes just the screen
with the new like count. So here, this f block,
111:28 - let's do ELS, that means we have no likes.
Rather, we have a like in this data array.
111:29 - That means we can't like this because it's
already liked by this user. So return res
111:30 - dot status 400 and dot Jason. And the URL
will say, scream, already liked. All right,
111:31 - so after this, then we do catch error, res
dot status 500 error code. That's console
111:32 - error as well, I don't know why I'm formatting
because prettier is gonna format it anyway.
111:33 - Alright, let's save all of this. And let's
save this. Let's comment this because this
111:34 - unlike doesn't exist yet. Or let's actually
create it and just return nothing. Or do we
111:35 - write the whole thing? Screw it, let's write
the whole thing. So exports dot unlike, and
111:36 - I did say Screw it, I'm keeping it PG. Alright,
request response.
111:37 - const
111:38 - is very similar to, to like, so we can actually
copy everything. Now I know, I could do everything
111:39 - in one function the like that. But unlike
but the code will get too massive. And we
111:40 - could just add another route doesn't harm
anyone. So here we are the like document,
111:41 - same thing, scream document, same thing, let's
cream data. But here instead, it's the opposite
111:42 - down here. So if the if the data is empty,
this is where we return the error. So let's
111:43 - copy this return. Let's go here and say, error,
scream, scream not liked. Because we can't
111:44 - unlike a scream that we haven't liked yet.
Otherwise, if we do have something in that
111:45 - array data array, what we need to do is we
need to delete the entry. So let's remove
111:46 - all of this. Let's do DB dot collection. I
do we do that? Oh, we have the path for it.
111:47 - So we need to do is that DB dot collection
likes dot actually dot doc. We haven't done
111:48 - this yet. dB dot collection dot doc. So this
already adds the slash thing. Or maybe we
111:49 - can do this. Let me try something to make
it more simple. So DB dot doc, this backticks
111:50 - slash likes. Slash and remove this bit of
code, then we add data, the array of data
111:51 - zero the first member of data that actually
know what am I doing data dot Doc's zero,
111:52 - because this is the the array dot data, the
function.id should give us the ID. So this
111:53 - is the actual path for that document. And
we chain delete, which will delete the function,
111:54 - the document rather. And then here, we chain
them inside of this block. And then this we
111:55 - don't need the right result to a scream data
dot like count minus minus two decremented
111:56 - by one and we return scream document dot update.
Like count is scream data dot like count.
111:57 - But the column here screen data dot like count.
And then as well here. And we'll say we just
111:58 - return a response res dot JSON. We return
actually the screen data. And here after this,
111:59 - then we have the catch. It's gonna have the
same error. Cool. All right, so unlike, unlike
112:00 - scream is done as well. So let's save everything.
Make sure you're running. Let's go to postman.
112:01 - So here we already have an author. And token,
because we were trying to comment now we will
112:02 - try to actually like slash like, and let's
not send any body and it's a get request.
112:03 - So let's send this Okay, it says scream already
liked, because we added to that document.
112:04 - So let's actually put them side by side. So
you can see updates in real time. Let's do
112:05 - unlike, let's try to unlike this comment,
the screen. Okay, there's an internal server
112:06 - error. dB doctor delete is not function. Oh,
did to Wow. All right. Save. You probably
112:07 - didn't make this make this mistake. All right.
Oh, that's weird. It didn't delete the actual
112:08 - like, and the light count is No. Oh, it's
because the screen itself it didn't have a
112:09 - light count in the first place. Let's give
this a value of zero as decrementing the light
112:10 - count, but it's not deleting the light
112:11 - itself. Okay, let me have a look at this and
come back.
112:12 - Okay, it's actually this dB, data dot Doc's
not the data, the ID is actually stored in
112:13 - the document reference and not in the data
itself. My bad. Okay, let's, what we're gonna
112:14 - do is we're going to go to the screams. So
this what scream was it was the scream, or
112:15 - was the scream. So let's put the like count
to one because that's what it was because
112:16 - there's only one like, and it's on that screen.
And let's send the like, again, it should
112:17 - say scream already liked. Cool. Let's do unlike
cool, it deletes the document. And if we go
112:18 - to screams, it decrements on Oh, it's this
one decrements the light count to zero. And
112:19 - if we send like, it increments the light count
to one. And if we go to likes, he created
112:20 - the like document a different like document
but with the same credentials, which is we're
112:21 - already here. And this video is not that long
yet, we could keep going and created the Delete
112:22 - screen route. But before we do that I want
to fix something on functionality that's missing
112:23 - is that here when we comment on the screen,
we actually have access to the screen documents.
112:24 - So we could actually just increment the comment
count right
112:25 - here.
112:26 - So here instead of this return collection,
thing, let's cut this. And let's do return
112:27 - document, which is the scream document. And
here to use the update function, we have to
112:28 - add the prefix reference and use update. And
here we need to update the comment count.
112:29 - So let's do an object and comment count. Who
should be equal to doc dot data? dot comment
112:30 - count, which is the current comment count
plus one. All right, so here, let's change
112:31 - a dot then to have the right result which
we don't need. And then here we paste back
112:32 - the adding the comment. So DB dot collection
comments, add new comment. Alright, so this
112:33 - should do the trick. And if we go to our database,
we see we have three comments all on this
112:34 - screen. So if we go to that screen, actually,
this screen doesn't even have a field comment
112:35 - count, because it was created too early. So
as to comment count, and it's a number and
112:36 - it has three comments. So now if we submit
a comment to this, we should see this comment
112:37 - count increase increment by one. And of course
the comment would be created. So we have the
112:38 - idea right here. Let's write comment here.
Let's get a token. Well, we already had to
112:39 - talk about what it was take that new token.
Let's go here and how does come all the way
112:40 - here paste the new token. And we're here it's
comment and comment is a post route. So post
112:41 - In the body, a say comment number four, that
sand. And this look here. I mean, here a core
112:42 - common count has incremented by one. So we
have four comments now. And in our comments,
112:43 - we have a new one comment yet. There we go.
Comment number four. Great. Alright, so let's
112:44 - write the route for deleting a scream. So
in the index, let's instead of this comment,
112:45 - let's do app dot delete, because it's a delete
request. And it's going to point to slash
112:46 - scream, slash scream, colon, scream, ID, of
course, gonna be a protected route. And the
112:47 - function will be delete, scream. Let's import
that. Delete screen. Save go to screams here
112:48 - at the bottom. Let's do a comment, delete.
I always misspell the word ScreenFlow delete
112:49 - for some reason. Alright, so exports dot delete
script, delete. I hate the word delete. request
112:50 - response. And we need a reference to it. So
const document equals dB. Doc backticks slash
112:51 - screams slash dollar sign curly braces request
dot params dot scream ID. Now here we do document.
112:52 - dot get the band get document. And here we
do if not, Doc dot exists. Well, if it doesn't
112:53 - exist, we say make it doesn't exist. You're
trying to delete something that's already
112:54 - been deleted or potentially never existed
in the first place. So restart status 404.
112:55 - Jason error, the good old not found. Oh else
if it's found. What do we do here? Actually,
112:56 - here, we need to check. Because we need to
check that the ID, the user ID of this screen
112:57 - is the same as the user ID of the user decoded
from the token, because we need to make sure
112:58 - that this user is the actual owner of this
screen, because you can't delete someone else's
112:59 - screen. So we need to check doc dot data dot
user handle has to be. So if it's not equal
113:00 - to request the user dot handle, because we
already have that through the middleware,
113:01 - we need to return rest dot status 403 unauthorized
with a Jason with an error
113:02 - of an authorized else we're return document.
This is why we actually put it in a variable
113:03 - because we needed to. To use it again. Delete
oh boy misspelled delete What's happening?
113:04 - Then I need a button on my mouse that whenever
I click right to delete, because I don't like
113:05 - that word. Okay, so a message would say scream
deleted. Yes, I did it success fully. Alright,
113:06 - let's
113:07 - catch
113:08 - just in case console. dot log, log or error.
Response dot status 500. json error, error
113:09 - code. Alright, let's test all of this. And
we're already running. So let's go to postman.
113:10 - And so I'm user. And this Alright, let me
make sure. So let's get the screams. So this
113:11 - screen is by user and I'm logged in as user.
So if I send a delete request to this scream
113:12 - slash, the scream ID slash delete. We should
Actually successfully deleted? Wait, do I
113:13 - actually we don't need this delete? Because
this can be the same. This can be like this
113:14 - without the extra path here or not here, here.
Where are we? Okay. Oh, we don't have to delete.
113:15 - Okay, my bad. I confused myself there. So
if I send this it should successfully deleted.
113:16 - Cool. And it does if we go to our database
that scrim is gone. Yeah, the screen is gone.
113:17 - If we tried to do it again, it should say
scream not found. Brilliant.
113:18 - I have a question for you.
113:19 - How can we have a social media platform without
bombarding our users with notifications? Answer,
113:20 - we can't. So let's implement notifications,
I want to start by explaining something. So
113:21 - if we go to screens right here, you see when
we like a scream, or unlike, it's already
113:22 - like a bunch of requests to the database.
Now, notifications don't have to arrive instantly.
113:23 - So we can handle them separately. And we can
do so by taking advantage of something called
113:24 - database triggers. So if you go to File firestore
documentation, and you scroll down to triggers,
113:25 - there's a bunch of different triggers on authentication,
or real time database on an on firestore.
113:26 - We're interested in the firestore one. So
basically, these are kind of like events that
113:27 - watch changes in certain document a document.
And then on those changes, it triggers an
113:28 - event and it does something. So you have onCreate
on update on delete, and on right. Alright,
113:29 - you can read the documentation page, I'm not
gonna talk too much about the theory, let's
113:30 - actually implement this. First thing is we
need to have, we need to create a notification
113:31 - whenever someone likes a post. Okay, a scream
is not a post, what is a post? That's not
113:32 - a thing. All right. So export dot create,
I'm really trying to push the idea of like
113:33 - a scream is like kind of an ape screams and
a bird tweets like Twitter, and this would
113:34 - be different. But yeah, anyway, so create
notification on like, and this would be equal
113:35 - to functions dot, and I'm going to change
this region function, maybe you don't have
113:36 - to, maybe you do. So check with your depending
on your case. So I'm going to add the region,
113:37 - Europe or west to, and I'm going to chain
here the namespace, firestore dot document.
113:38 - And the document we're interested in is in
slash likes,
113:39 - slash
113:40 - or slash, could just do likes
113:41 - slash,
113:42 - like this ID in curly braces. And here our
event is the onCreate. So whenever a document
113:43 - is created, and this will have a handler that
will take a snapshot and a context, for us,
113:44 - we don't need the context, we just need the
snapshot, which is basically a snapshot of
113:45 - this like document that has just been created.
So here inside of here, let's do dB. We can't
113:46 - do dB, because we haven't imported it yet.
That's important. So const dB, equals require.
113:47 - And if you remember, this is in the util.
So dot slash on the same level, flush utils
113:48 - slash admin. Okay, like this. And here, we
do DB dot document. backticks slash screams,
113:49 - slash, we want to get the scream. Because
we need some data from the source slash scream
113:50 - slash snapshot, dot data. dot scream ID remember
that this is the like document, so we have
113:51 - access to the scream ID. So don't get returns
a promise, then this will hold a document.
113:52 - So here we need to, we need to add this check
if doctor exists. Now of course, it's always
113:53 - going to exist in this case, but it's just
good practice to add, still return. Now inside
113:54 - of here, we're going to create a notification
the reason why we fetch this screen, because
113:55 - we need some data from it. So because we need
the the owner of the screen the handle of
113:56 - the owner of the screen, so let's do return
DB dot collection, or actually, db dot doc,
113:57 - because we know that it's going to be in the
notification. So notifications, make sure
113:58 - you don't misspell anything. Because they
sometimes do that you'll t snapshot.id now
113:59 - we're gonna give the IDE, the notification
the same idea as the like or the comment later
114:00 - on. And I'll show you later why this is useful.
So we do not set And inside of here, we're
114:01 - going to have a created art, which is going
to be new date, dot two, ISO string. And we're
114:02 - going to have actually let me copy and paste
this for you to use as a reference. So let's
114:03 - go to dB schema. And under comments here,
I'm going to paste this. So this is what our
114:04 - notification is going to be like, it's going
to have a recipient, which is who's getting
114:05 - the notification, a sender who's sending it
a read of true or false by default, it's false,
114:06 - because it hasn't been read when it's created
a scream ID of which scream does pertains
114:07 - to a type. In our case, we only have likes
and comments. So two types, and I created
114:08 - that. Alright, let's go back to our index.
So we have a recipient. And it's going to
114:09 - be the doc dot data of this, because doc refers
to the screen remember, dot user handle. And
114:10 - we have a sender. And it's gonna be the snapshot
dot data, which is the like document, the
114:11 - user handle. We're going to have a type. In
this case, it's a like, So type is like a
114:12 - read of false. Okay, this is five things,
let's check if we have covered everything
114:13 - 1235 we're missing? The Scream ID, curse,
go back. Scream ID is the snapshot. Or let's
114:14 - just do use the document can use both. So
let's do doctor ID, which is the screen call.
114:15 - So this returns a promise that holds a What
does it hold? Right result, I think, but it
114:16 - doesn't matter, we're gonna we're not gonna
need it. So I can just leave that empty. And
114:17 - we could just say return. And here to do catch
error. case an error happens, we just, we
114:18 - don't need a block which needs to console
error. Actually, we do because we need to
114:19 - return. Alright, console dot error, the error
and return, we don't need to send back any
114:20 - response because this is a database trigger.
And it's not a an API endpoint. Let's create
114:21 - the next one. So here we need to do create
notification, do the same name, but we change
114:22 - on like to uncomment. This will be functions
dot region. Again, I may copy this, but here
114:23 - functions dot region. And the document will
be in comments slash ID. And we're going to
114:24 - listen to on create as well. And here we're
going to have a snap shot. And inside of here,
114:25 - we're gonna get the scream again. So it's
kind of the same. So I'll just copy all of
114:26 - this. And here we get the document, we'll
check if it exists. And we create a notification
114:27 - with the snapshot ID, which is the comment
document ID and created the same recipient
114:28 - is the same, sender's the same that type is
comment. First change this to comment. The
114:29 - doc ID is the same, everything is the same.
Cool. So I'm going to keep going, I'm going
114:30 - to create all of them, and then we're going
to test them. So let's save and then underneath
114:31 - here, we don't have the ability to delete
comments. So we don't have to worry about
114:32 - that. But we have the ability to unlike post,
actually, I'm going to put it here. So we
114:33 - need to because the thing is we're going to
create notifications. But if someone unlikes
114:34 - the post, we want to delete that notification.
I don't want to use it to have a notification
114:35 - for some that someone liked their post. And
then after they unlike it, they still get
114:36 - the notification and then they go there and
they're like what no one like that. Alright,
114:37 - so this is going to be called delete notification.
On on like, like this. So it's going to be
114:38 - a functions. Guy. Let me copy this bit. So
functions that region a document and the event
114:39 - is going to be on delete
114:40 - a snapshot.
114:41 - And what we need to do here is we just need
to do DB dot doc and backticks slash What
114:42 - is that? Okay slash notifications
114:43 - slash
114:44 - snapshot to idea remember because the it has
the same ID the ID of the Like is the same
114:45 - as the ID of the notification that pertains
to that, like slabs slash snapshots slash
114:46 - ID dot delete. This returns oops, this returns
a promise that holds a right result that we're
114:47 - not going to use. So we just leave the thing
empty. And we do return inside of her. And
114:48 - I do catch error, console dot error, the error,
and then return. All right, let's save. And
114:49 - these are DB triggers that we need to deploy
for them to work, save this, make sure you
114:50 - in the functions folder and let's do Firebase.
Actually, I
114:51 - think the command even works from the root
folder. So I don't know why I always have
114:52 - to go into functions.
114:53 - Okay, now that it's deployed, let's go to
our functions in on Firebase. As you see,
114:54 - we have our DB triggers. Let's go Let's copy
the endpoint and let's go here. Let's login
114:55 - or let's actually create a new account. Because
why not? So sign up? Just test out just in
114:56 - case the functionality for adding the default
no image picture. and stuff like that Confirm
114:57 - Password.
114:58 - Same.
114:59 - And the handle will be Jane. All right, we
sent the post request to slash sign up.
115:00 - Oh, email is already in use. Let's just use
like new to. And the handle is new to send.
115:01 - Excuse me. All right, let's take this token.
And let me make sure that the ID is still
115:02 - correct. I didn't delete that screen. Okay,
so we have one screen that starts with q Ed.
115:03 - Yeah, the ID is correct. Because this is a
new account. That means we have like that
115:04 - yet. So we'll change the endpoint to slash
like, oops, not here. And in the authentication,
115:05 - we do bearer, and we paste the token, and
we send a request. All right, so like count
115:06 - incremented to two, we should see a notification
collected, collection created and a notification
115:07 - created in a second.
115:08 - Alright, so the notification has been created.
Let's actually unlike that post, or that screen,
115:09 - and see if the notification is removed. And
it is removed. Alright, so let's post a comment.
115:10 - And see if we get a notification when we post
a comment. Let's change this to a post. And
115:11 - we have a raw body of type application Jason,
and we're gonna have a body of the comment
115:12 - will say, nice scream again, as opposed to
comment. Alright, we get nice screamer, get
115:13 - our comment back to us. And we should get
a notification created here. We do our get
115:14 - our notification and click on assess type
comment, and it has the correct recipient
115:15 - and sender. The sender was new to the account
we just created and the recipient was user
115:16 - which is the owner or like the person that
posted the screen. Cool. So everything works.
115:17 - One other thing that I wanted to edit is in
the users handlers file. When we get authenticated
115:18 - user here, we return the user and the likes,
we need to return that their notifications
115:19 - as well because we need to access them and
show them on the front end. So let's add that.
115:20 - So here instead of returning user data, we
need to do return DB dot collection. Notifications.
115:21 - Where recipient is request, use the handle
and we order by the created art date in a
115:22 - descending order and we limit by 10. I want
to limit to just 10 you can Not limit if you
115:23 - want, and then we get them. So let me make
sure I didn't misspell anything. All right,
115:24 - so here we chain another gun. And this will
have a data. So we'll do data dot, let's actually
115:25 - initialize user data, dot notifications equals
an empty array. And here we do data dot for
115:26 - each document. User Data dot notifications
dot push. And we actually need the notification
115:27 - ID as well. So what we're gonna do is, we're
going to push all the fields one by one. So
115:28 - let's do, what do we have? I put this on the
side, just remember what we have. So we have
115:29 - recipient is doc dot data, dot recipient.
And let's copy this and paste it like 123.
115:30 - Okay, five more times. So we have sender,
we have created art. We have the scream ID,
115:31 - that type and the red. And we also need the
ID. So let's say notification. Id is doc.id.
115:32 - And so after this after the for each loop,
we just do rest, or return res dot Jason,
115:33 - use data. Let's test this out. Let's Login
as user because user right now is the only
115:34 - user that's got any notifications. So let's
change that to login. And let's delete these
115:35 - two keys and change this to user at email
calm. So we get our token, let's send a get
115:36 - request at slash API slash user. Actually,
we need to either deploy or, or serve I'm
115:37 - going to serve right now. Alright, if you
said make sure you're on localhost and not
115:38 - the deployed one, let's send the request.
And error nine oh, it's because we need to
115:39 - create an index. So let's copy this URL. Because
it's like a complex query, and we need to
115:40 - create an index for it. Create index, this
will take a couple of minutes, so I'll be
115:41 - back once it's done. Alright, so our, our
indexes not created. So if we send this request
115:42 - again. And there we go, we get our credentials,
and we get our notifications as well. And
115:43 - if we had any likes, we would get them here,
but we don't. Cool. So this is working. Alright,
115:44 - there is two more routes that I want to create
for users. Before we finish off this video.
115:45 - Let me close this. Let's go to index dot j
s and create two routes here for users. One
115:46 - would be the route where we use to get a user's
details like another user's details or even
115:47 - our user. So this is, say, app dot get. And
it's at slash user. Or let's say yeah, slash
115:48 - user slash colon handle. So this is we pass
the handle and the application gives us back
115:49 - the details of this user. And this is a public
route. So and we're going to call this function
115:50 - get user details. And one other one is app
dot post,
115:51 - slash
115:52 - notifications. And these names don't matter.
By the way, these are not front end routes.
115:53 - These are not what the user sees. These are
just what we send as requests for our back
115:54 - end. So slash notifications, and we'll call
this mark notifications. Red. Let me make
115:55 - sure that I spelled that correctly. Yes. Okay.
And this is of course protected. Let's add
115:56 - these two and we will create them in a second.
So here and users, we have get user details,
115:57 - and Mark ratifications read. Alright, let's
save and let's go to users and create them.
115:58 - I'm going to put the get user one here. So
let's call this get another or any user There,
115:59 - any user users details will be exports dot
get user details. It's gonna take a request
116:00 - and a response. And let's initialize a C user
data cause an empty object. And here we do
116:01 - DB dot doc backticks slash users slash, dollar
sign curly braces to put a variable request,
116:02 - dot params. dot got. Handle? Yeah, we call
that handle. And here we do not get so we
116:03 - get this user, though, then we get a document.
And here we are the credentials. But of course,
116:04 - let's first check if the user exists. So doc
doc exists. And here we do user data dot user.
116:05 - equals, do we need to initialize this? No,
I don't think so. So do user that doctor data.
116:06 - So this is our user data. And here we do return.
Now we want to get their screams. So return.
116:07 - Remember, this is the Users page, we need
to see that screams. So return DB dot collection,
116:08 - screams and where user, as a user, user handle
the ID is a handle equals. So we have this
116:09 - in our request, params request dot params
dot handle. And we need to sort these as well.
116:10 - So order Order, order by created at descending,
we might have to create an index for this.
116:11 - So get, so we're going to return it. So in
the next 10 block, we're going to have data.
116:12 - And here we initialize user data dot screams
as an empty array. And here we do data dot
116:13 - for each. And we get a document here for each
document, we need to do user data screens.
116:14 - Now here, we could just push the data, but
we need the ideas. Also, we need to do the
116:15 - screens that push and we create a new object.
So we need the body of the screen. Doctor
116:16 - data dot body, and let's copy this. And so
we have a created user handle a user image,
116:17 - like account and comment count. And here we
have scream, ID equals dog.id. So what did
116:18 - we say created art? Don't forget to click
Control the user handle user image? Like count,
116:19 - and comment count. Alright, so I think this
is Yeah, this is it, we just need their screams.
116:20 - Alright, so after the four H, we need to do
return risk response dot JSON user data. And
116:21 - here after the done we do dot catch error.
Console dot error, the error and return res
116:22 - dot status 500 500 dot Jason Error
116:23 - Error code. Alright, so this this is sorted.
And I'm gonna serve just to start creating
116:24 - the I was already serving, what am I doing?
I'm going to serve and test this just for
116:25 - it to prompt me to create the index and then
let it index. Let it let's create and then
116:26 - we're going to create the mock notifications
read route what's happening. Right post requires
116:27 - a callback function but got an object undefined.
Oh, because we're not we haven't created this
116:28 - function yet. Let's just comment this out
and try again. Of course, let me remove it
116:29 - as well from here because there is no export
for that.
116:30 - Actually When not handling if the user if
the document doesn't exist, so let's do an
116:31 - ls here. So if the document actually doesn't
exist, we need to return a response return
116:32 - response that Jason, or that status first
of 404. But Jason
116:33 - error,
116:34 - user, not found less safe, and it's gonna
serve a gun. And here, let's do a get request
116:35 - without any authorization header, slash API
slash user. And we get let's see, Jane, do
116:36 - we have Jane is found Actually, I didn't delete
the account itself. I just deleted the entry
116:37 - in user stable. We have Johnny I'm pretty
sure. Oh, it's gonna give us the error for
116:38 - the index, I think. Can I misspelled something?
116:39 - status.
116:40 - But why would it get here? Oh, yeah. Okay,
there we go. So let's copy this and create
116:41 - the index. Okay, while this index is being
created, let's create the other Mark notifications
116:42 - read function. So exports dot Mark notifications
read. Now the way this is going to work is
116:43 - that when you open a sec, when you open a
drop down, that has a couple of notifications
116:44 - that are not red, we were going to send to
our server a an array of IDs of those notifications
116:45 - that the user has just seen. So we can mark
them red, so they're not marked as unread
116:46 - on the client side anymore. So we're here,
we're going to need to need to do something
116:47 - new called a batch, right, which is in Firebase
when you need to write or update multiple
116:48 - documents. So let's do let's let batch equals
DB dot batch, like this as a function. And
116:49 - let's do request dot body. And here we're
going to have a property called. But actually,
116:50 - we're going to have an array as the body.
So let's do for each. So our body is an array.
116:51 - And for each notification, and here, it doesn't
matter. We can call it anything but let's
116:52 - call it notification const. Notification equals
DB dot doc. And where slash notifications.
116:53 - Remember, this is backticks. So I can use
this variable notification. Yeah, notification,
116:54 - this one. But this is an array of ideas. But
let's so let's change this name to notification
116:55 - ID, here, notification ID, so it makes more
sense. So now we have this document, we need
116:56 - to do batch dot update. And this, I misspelled
that update. And this is gonna take a document
116:57 - reference, which is the notification that
we just created there. And what we wanted
116:58 - to update. So the key is read. And we want
to make it true because the US has just read
116:59 - this. So once the four H is done, we can do
batch dot commit, oops, commit, which returns
117:00 - a promise, and we do then doesn't hold anything,
I think and we just return response that Jason,
117:01 - Jason and it's going to have a message. Also
notifications
117:02 - marked.
117:03 - For read.
117:04 - Write and catch. Doing it. Return response.
Yes. So let's say console. dot error, the
117:05 - error. Okay, so this is done, Mark notifications
red, and let's bring it back here. So Mark
117:06 - notifications red
Let's uncomment this route. And what we need
117:07 - to do now let's, okay, so the index has been
created. So we can send this request to get
117:08 - the data of Johnny. And we should be able
to see the data of Johnny here. And we do
117:09 - cool. So we get users and we get the screams,
he doesn't have any screams, user has the
117:10 - screen we should see here. Cool user has a
screen. Alright. So let's try to get so user
117:11 - has some notifications, right? If we go to
our database, no authentication database.
117:12 - So notifications, user has one notification,
let's actually add another notification for
117:13 - user somehow. How do we do that? Let's log
in as john, or Johnny. Let's get Johnny's
117:14 - handle or but or let's comment, actually,
so we can comment on john. As Johnny, we can
117:15 - comment on users scream. So here, we'll say
nice scream from Shawnee, and we send this
117:16 - post request. Yeah, nice screen from Johnny.
And we go here, find that there is a comment.
117:17 - Actually, there's multiple comments on the
same post on the same screen. But we don't
117:18 - have Okay, now we have two notifications.
So let's take these IDs. This is why we needed
117:19 - to send back the ID of the notification, because
we need to use it when we want to mark it
117:20 - as red. So our body is going to be of type
Jason is going to have an array of strings.
117:21 - So the first string is going to be this ID.
And second string is going to be this ID and
117:22 - remember that they are false. They have false
for read. They're not read yet. So this is
117:23 - the second ID. And we need to send this request
at slash API slash notifications is a POST
117:24 - request.
117:25 - And
117:26 - we need actually john is token. Actually,
we need to use this token. All right, we send
117:27 - this actually slash API slash notifications
that I make a mistake. Okay, I misspelled
117:28 - notifications. Let's send this request. We
get notifications marked red. And if we look
117:29 - at our database, they have true for red. Cool.
So this is going to be the last video in right
117:30 - in the backend of our application, we're going
to add two more DB triggers to finish up the
117:31 - functionality of our server logic, or our
server less logic, I guess. But before we
117:32 - do that, I want to fix a couple of things.
So let's start with users. Let's go to users
117:33 - dot j, s and in the signup, so here, here
in the sign up, we here at the bottom, when
117:34 - we return errors, here, if an a server error
happens, I want to actually return something
117:35 - to the client. So let's say General, not error
like general and I want to say something went
117:36 - wrong. Please try again, just in case this
happens, we will show it in the front end.
117:37 - And one of the another thing here when we
handle our E authentication error in login,
117:38 - we want to we don't want to check for this
password thing. We just want to return in
117:39 - general wrong credentials. And by the way,
if you want, there is two status codes to
117:40 - error status codes, two main ones related
to login in the whoops, the auth wrong password,
117:41 - and the auth user not found. It's not recommended,
but you can actually use them to show on your
117:42 - front end that either this user doesn't exist
or it's the wrong password. But I'll stick
117:43 - to the safe just return like this just return.
General wrong credentials. Please try again.
117:44 - But you It's up to you. What do you want to
do? Alright, so two more things in Scream
117:45 - dot j s, all the way up here in get all screams,
we want to get the user image of the of the
117:46 - post so that we can show it in the postcard.
So Doc, user image equals doc dot data dot
117:47 - user image. And down here in comment on screen,
when we validate the body, we want to return
117:48 - the error, comment must not be empty. All
right, cool. So these are the fixes. Now,
117:49 - let's add our DB triggers. But actually wanted
to fix more stuff here. If you have been wondering
117:50 - why you've been getting these weird errors
from our DB triggers saying function returned,
117:51 - undefined expected promise or value. I tried
before returning zero and it doesn't work.
117:52 - You either return a boolean value like true
or false, or you just return a promise. So
117:53 - what we're going to do on our triggers is
here, for example, in Well, we're going to
117:54 - change all of them. So here, when we do our
promise, here we are the return in front of
117:55 - it. So we return this promise. And don't worry,
just because we wrote return here doesn't
117:56 - mean the execution stops here, we actually
get through here. And then here, when we return
117:57 - this promise, we don't do another dot then
and return nothing, we just do like this.
117:58 - And we don't return anything when console
and or we just do that. And in delete notification,
117:59 - we actually do return DB dot doc, dot whatever
dot delete, and then we remove this then block.
118:00 - And here as well on create notification on
comment, we return DB dot doc, and we remove
118:01 - this block.
118:02 - And one thing that I wanted to fix, I noticed
that we are creating a notification on like
118:03 - an uncomment, even when we like our own posts,
which is obviously not a good thing. So what
118:04 - we need to do here, when we check if document
dot exist, we also need to check that the
118:05 - ID. So not the ID the handle of this, for
example of this, like is not the same with
118:06 - the handle of the post. Because what this
would mean it would mean the person that liked
118:07 - to dispose, this is the same person that posted
this scream. So we don't want to notify them
118:08 - if that's the case. So what we want to do
here is, and no, not here. So if doc exists,
118:09 - and doc dot data, dot user handle, so this
refers to the screen does not equal snap,
118:10 - not spawn, snap shot, dot data dot user handle.
So this would be the like, actually, that
118:11 - make make sure it's user handle. So likes,
yeah, they have a user handle. So if we do
118:12 - this, and we would copy this, and we would
go to create notification on comment, and
118:13 - we do the same right here. Now we no longer
get notifications if we like our own post
118:14 - or our own scream or comment or our own scream.
Alright, so now I want to add two more triggers.
118:15 - The first one is that, what I want to do is
that if a user so for example, right now we
118:16 - have screams and each scream has an image
URL, user image of the user image at the time
118:17 - they created this screen. While I want to
do now if the user changes their profile picture,
118:18 - I want to add a DB trigger that actually changes
the user image of all the screens submitted
118:19 - by this user to show them as well on the card.
So let's add a new new trigger here called
118:20 - Expo called while exports dot and we're going
to call it on user image change. And this
118:21 - will be a functions. For me, I'm going to
region, Europe, West one and firestore dot.
118:22 - What is this going to be? I think it's Your
Honor, not on update on update. And we will
118:23 - the doc we're on update. We actually I forgot
to change document. So document. So we need
118:24 - to say first what document we want to listen
to. So slash users slash curly braces, user
118:25 - ID. And then we want to say on update, so
on update, and this will take a change and
118:26 - context. We don't need context. So we just
take change. And what's cool about this change
118:27 - object is that it has two properties. So let's
actually console log them. So you see how
118:28 - This works. So to console log change dot before
dot data. And if we were to just copy this,
118:29 - and then type after here, it's exactly that
this snapshot has two values, the before it
118:30 - was edited, and then the after. So we can
compare these and we can see what actually
118:31 - changed. So what we want to do here is we
want to change the image of the the posts
118:32 - that this user has created. Actually, this
is we're going to change multiple documents
118:33 - potentially. So we need to do a batch, not
read write a batch, right? So let's do lead
118:34 - batch equals DB dot batch. As a function like
this, and then here, we do return DB dot collection.
118:35 - Screams what whoops, what is this? What am
I doing? Okay, so where? What does it use
118:36 - a handle? Equal equals?
118:37 - What is equal actually?
118:38 - Yeah, change, we have the data and change
change dot doesn't matter which one we use,
118:39 - because we can't use we can't change the user
ID or use the handle anyway. So change dot
118:40 - before dot data, dot E, it's just handle in
the document of the user. And we do get and
118:41 - then here we get data. So data dot for each.
So for each document that this user has created.
118:42 - To do const, scream equals DB dot doc backticks
slash screams, slash, dollar sign curly braces
118:43 - doc.id. So this is the document. And here
we do batch dot update. And we passed the
118:44 - document, which is scream. And our change
would be user image will now be change dot
118:45 - after. So this snapshot of after the change
of this user document dot data dot image,
118:46 - URL. Alright, so here after the forage, yeah,
we're after the forage here. So we do return
118:47 - batch dot commit. Yeah, that's it. So Oh,
actually, oh, we need let's, we need to only
118:48 - do this if the user image or the image URL
has changed, because the user can also change
118:49 - the, what we call them the details like the
buyer, the website and the location. And we
118:50 - don't want to run this batch, right? If they
didn't actually change the image. So we'll
118:51 - want to do here if want to do it, want to
check if change before data, dot image. URL
118:52 - does not equal change dot after dot data dot
image URL. So we'll execute this only if the
118:53 - image URL of this user document has changed.
Let's do a console here just to make sure
118:54 - that it's only executing on the image changes.
And merge has changed. And yeah, I believe
118:55 - this is zero, we can actually test this. Yeah,
but actually, that's right, the other trigger
118:56 - and unless this both of them to save time,
I don't want to make this video long, because
118:57 - the last one was quite long. So export that.
So for this one, what I want to do is a problem
118:58 - is that if we have screens, and each screen
could have likes and comments and notifications,
118:59 - and if a user deletes their screen, what I
want to do is that I want the trigger to delete
119:00 - all the notifications, the likes and the comments
that are related to that one screen that was
119:01 - deleted. Alright, so we'll call this expose.on
scream, scream, scream deleted. On scream
119:02 - delete, two functions. Let's copy this. I
don't like writing this. I still functions,
119:03 - functions dot region, the same document screams
scream id.com On delete, and here we gonna
119:04 - have a snapshot and the context. I have an
arrow function here, we're not going to need
119:05 - the snapshot, we're just gonna need the context
because the context is, has the parameters
119:06 - that we have in the URL. So let's do const.
Scream, ID equals context, dot parents, dot,
119:07 - scream, your scream, Id choosing the URL.
And let's do our batch here. So const batch
119:08 - equals actually here, we could have made it
into a const as well, because logicals that,
119:09 - so batch equals DB dot batch. So function
like this, and now we do return DB dot collection.
119:10 - Let's start with comments. comments. Were
the scream ID equals scream ID dot get. What
119:11 - is it? Yeah. Okay, so get that then. And then
we have data. Now data for each.
119:12 - Doc.
119:13 - Let's do Can we do it in one line? Yeah, batch
dot delete. And we can say DB dot doc. backticks
119:14 - slash comments. Slash dollar sign. doc.id.
Like this? Yeah, this is I think this is such
119:15 - comments slash doc.id. Yep. Now we need to
also after the forage, we need to delete as
119:16 - well, the likes, let's do return DB dot collection.
likes my God, where scream, ID equals scream,
119:17 - ID. I think we can copy this block. And then
we just paste it and what we do here, delete,
119:18 - slash, like slash doc.id, like this. And then
so we've looked for comments, and then deleted
119:19 - them. And then we looked for likes and then
deleted them. Now we look for notifications.
119:20 - And then paste this oops, not this. Let's
paste this block. Yeah, so we paste this block.
119:21 - And so data and delete slash notification
slash this ID. And then here we just return
119:22 - batch dot commit, like this. And we do a catch
block, batch error. Console dot error, the
119:23 - error. All right, so we have to deploy because
these are DB triggers. So fire base deploy.
119:24 - Okay, let's test out our so what's cool about
dB triggers is that we don't have to actually
119:25 - just send a request, we can change stuff in
the database here on the interface, and it
119:26 - will trigger the DB triggers. So if we were
to go to this, okay, so this screen was submitted
119:27 - by user, let's change the user, the user dot
image URL right here. Alright, so let's change
119:28 - this from oops, no image to no image is like
with an S, even though that this image doesn't
119:29 - exist, but the database knows nothing about
actual images. So let's look for change here,
119:30 - this should change to no images, and it does
cool. So the DB trigger is working. And if
119:31 - we go to functions, and to logs, we scroll
down you see this is the before, and this
119:32 - is the after. So this is the before and you
see here the before had no image and then
119:33 - after had no images. So these are the before
and after. And here the image has changed
119:34 - was triggered. This, this conditional, actually
here in the F we need to do as well and else
119:35 - is to else return true and K Actually it goes
through this because it can go if the user
119:36 - just changes their details. Or if I were to
go here and change something that's not the
119:37 - image URL. Clear, let me open this on a different
window. So I don't keep waiting for it. So
119:38 - here for it to go to user and change something
else. Like, I don't know, location would be
119:39 - London again. And I'll do update. And if I
were to go to screens, of course, nothing
119:40 - changes. And I forget to go to the logs. Because
that trigger will still happen. Yeah, the
119:41 - trick? Oh, but I think it's because it hasn't
been deployed properly. So. Okay, let's just
119:42 - change something one more time. So let's change
for example, now the email the website from
119:43 - google.com, to Twitter. And then if we look
here, we're still Oh, we're still getting
119:44 - function returned undefined because it went
through here. And this, this was not satisfied
119:45 - this condition. So we didn't return anything.
But with our newly deployed code, this, this
119:46 - problem should go away. It doesn't, or does
it? Oh, it does. Okay, so we get before we
119:47 - get after. So here, we changed Google to Twitter.
But image hasn't changed. So that block of
119:48 - code, of course, didn't get executed. Cool.
So let's test out as well as deleting our
119:49 - own post. So we will log in as user because
user has this scream. And then there are these
119:50 - notifications that are related to this screen.
So you see the ID is starting with 14. And
119:51 - it's this post. And here the likes are these
two likes are related to the screen, and then
119:52 - this comment as well as related to the screen.
So if you were to delete the screen, all these
119:53 - comments and likes and notifications should
be deleted. So let's make sure that that's
119:54 - the case. So we log in as user. We take the
toll token. And let's do slash API slash scream,
119:55 - scream, slash and then we change this to a
delete request, we remove the body and let's
119:56 - get the ID of the screen. And we do this and
this should delete the screen it says unauthorized
119:57 - or because we didn't add our snap, I have
to log in again. We didn't add that token
119:58 - and now I don't have it in the clipboard anymore.
Sorry, guys. I changed this to a post let's
119:59 - get token may put the token in the authorization
spell this correctly. Or like this authorization
120:00 - cool bearer token and then change this to
a
120:01 - delete
120:02 - take the ID from here to slash scream slash
that ID and that's a delete with sundered
120:03 - scream deleted successfully and then we go
here. So everything should be deleted from
120:04 - these three collections. Okay, I must have
made a mistake in the code. Okay, it says
120:05 - in the log it says data dot four H is not
a function. Oh, what am I doing Of course,
120:06 - here when we return these DB dot collection
dot whatever. Here of course we do get can't
120:07 - get anything without chaining get after it
just like here. Okay, it should work now.
120:08 - Let's save and let's deploy
120:09 - my bad
120:10 - and we need to create that that screen again
manually because it's deleted now. So let's
120:11 - get the ID of that screen from here.
120:12 - Screams are the collection is gone because
it was the only scream that screams and the
120:13 - ID is this Sir. And
120:14 - what's gonna have a user handle? user and
a body? How this is the screen? What else
120:15 - we need the created art. It doesn't matter.
It could just be anything. Let's give it actually
120:16 - a string. I don't know just this.
120:17 - Give it a like count of three or two, number.
These dogmatic guys we're gonna delete anyways.
120:18 - Why did that one go away? So on those one,
okay, I think this is it? Yeah. Alright, we'll
120:19 - create it. Let's try to delete it again, this
code has been deployed. And this time when
120:20 - we delete it, it should actually, the our
code should delete the notifications, the
120:21 - likes and the comments. So let's send this
request.
120:22 - Scream deleted successfully. All right, dedications,
deleted, comments deleted, and likes deleted.
120:23 - Sorry about that mistake, guys. One more thing,
though, if we would go to the Google firestore
120:24 - REST API documentation page, you could find
that this is basically a REST API that any
120:25 - firestore or Firebase application can use
to access their database. So it would actually
120:26 - copy this endpoint right here, up to slash
documents. And we're to go to postman and
120:27 - paste this here. And then get our project
ID can get our project ID from our config
120:28 - file. So this is our project ID. Let's copy
that. So if we paste it here, and we do, let's
120:29 - say documents, slash screams, and send a get
request, it will actually, oh, we have no
120:30 - screens. Try users. Yeah, I'll actually get
our users formatted in a different way by
120:31 - we'll still actually get our users which is,
of course, a big No, no, it's a big security
120:32 - hole.
120:33 - So let's patch that hole. So if we were to
go to Firebase on go to database, and then
120:34 - go to rules. Here, because what we're doing
is we're using only the Admin SDK to access
120:35 - our database. Here, instead of allow read
and write we can say allowed read and write
120:36 - colon, if false, which means don't allow,
read and write basically, so we're locking
120:37 - down a database. So now if we were to go back
to postman, and we send this request, it will
120:38 - say unauthorized. But if we were to send a
request at our endpoint out our API endpoint
120:39 - at slash screams, we will still get our screams.
Now we get an empty array, because we have
120:40 - no screens right now. But it's a 200, we did
get the data from the server. So yeah, this
120:41 - is the last thing that I wanted to add to
actually finish off the backend. So yeah,
120:42 - guys, we're done with the back end. And now
we will start working with the React applications.
120:43 - So look forward to that. In this video, we're
going to start to create our react app. And
120:44 - we're going to get create react app to scaffold
all the boilerplate needed to run our application.
120:45 - But before we do anything, I want to show
you something. So I didn't emphasize enough
120:46 - the point of why we had to write all the backend
in Cloud Functions instead of using the Firebase
120:47 - client library. So this is basically our event
of eventual bundle our complete project bundle.
120:48 - And this is, by the way, a tool called source
map explorer that you can use to see which
120:49 - packages are have which size in your bundle.
And I'm using it to look at the final bundle
120:50 - of our application, which will be 457 kilobytes
in size. And as you see here, material material
120:51 - UI has 171 kilobytes from that. And the rest
are all necessary stuff that we need. So this
120:52 - is the bare minimum that you we can use to
actually have the full functionality of our
120:53 - application work properly. And or should we
compare this to something like this, which
120:54 - is a project I've worked on before that has
very minimal functionality, actually, but
120:55 - uses the Firebase library Implementation Firebase
client library to actually access the Firebase
120:56 - database and perform operations on there.
If you notice, this package is 907. This bundle
120:57 - is 907 kilobytes, which is double the first
one. And Firebase alone is almost 500 kilobytes
120:58 - of that. And stuff like react, Redux Firebase
is 60 kilobytes. So you see how using Firebase
120:59 - on the client can inflate the size of the
bundle by a lot. And this is important for
121:00 - many, many reasons of which you can use services
that charge you with by bandwidth, like a
121:01 - most notably AWS s3. So you will get charged
more because your users will request bigger
121:02 - chunks of data. Second is if you're shipping
your single page application to slower mobile
121:03 - devices, they will have to unpack this massive
JavaScript bundle. And, and by the way, this
121:04 - project doesn't even have material UI and
and the other stuff that we're using in our
121:05 - project, so this will be more than one megabyte,
which is, which is kind of a lot for a react
121:06 - app that of this scale. So yeah, I just wanted
to show you this quickly. Alright, so let's
121:07 - actually start to create our application and
the desktop here, I'm gonna open up Git Bash.
121:08 - And if you don't have create react app installed,
you can just Of course, you have NPM installed,
121:09 - I'm assuming you can just run npm install
dash g create react app, I already have it,
121:10 - so I can just run create react app, and then
the name of the directory will be social,
121:11 - a dash client. Now, this is gonna take some
time, so I'll be back once it's done. Alright,
121:12 - now that it's done installing, we can see
the interior. So CD, social, a dash, would
121:13 - we call it? client? Yeah. Okay, let me open
it in VS code by running code dot. Alright,
121:14 - so create react app comes ships, a, a web
pack development server that's already configured
121:15 - for us. So we can just run NPM start, and
it will start our app. Let me open up here.
121:16 - Alright, so this is our app right now. Nothing
fancy. Let's clean up the stuff, we don't
121:17 - need this logo, so we can just delete the
logo.
121:18 - So let's delete this. Surely I need this font
family thing from here. I'm just going to
121:19 - delete this file, go to the app CSS, just
delete everything. But here, I'm gonna keep
121:20 - that font family thing just in case, the user
doesn't have the Roboto font, which is the
121:21 - main font that materially we will use. So
let's go to index CSS, js and remove index
121:22 - CSS from it. Go to App j s, remove that logo
because we deleted it. And here, I'm just
121:23 - gonna say I'm just gonna have a header one
that says up. Alright, let's save all files.
121:24 - All right, cool, are up. Let's, I want to
change the icon here and change the name of
121:25 - the app. I already have the icon downloaded,
but I'll post a link to this in the description.
121:26 - So if you go to our app, public, we paste
it down, we delete this favorite icon thing.
121:27 - And let's go to public index HTML and change
fav Ico to icon dot png, or whatever you named
121:28 - it, I named it that and change the title here
to social ape, save, go back and everything's
121:29 - changed. Cool. Alright, so here in the sole
source folder, there are a couple of conventions
121:30 - on how to group your components, I'm going
to have two folders, one that's called pages.
121:31 - For the actual pages, we're not going to have
a lot of pages, it's going to be like five
121:32 - of them. And here we're gonna have components.
So I'm gonna put I'm gonna create three pages
121:33 - for now. So home the J s and the pages I'm
going to have with lowercase with camel case,
121:34 - I'm going to they're going to start with a
lowercase letter basically. So I'm going to
121:35 - have home j s login j s, and sign up dot j
s. Alright, so here, because remember guys
121:36 - I'm using es seven react Redux graph. qL React
Native snippets extension. I'm just gonna
121:37 - sorry for reading the whole name. I don't
know why I did that. Just gonna Do RC E. So
121:38 - this is a class based component and it's already
exported for us. And here I'm gonna have a
121:39 - header one that says homepage. Let's copy
the whole thing, go to login and change this
121:40 - to Ctrl, D Ctrl. D and do login. And then
paste here and then do Ctrl, D Ctrl. D, login,
121:41 - or lowercase login. Oops, no, this is sign
up. What am I doing? Sign up? Cool, save everything.
121:42 - Let's go to App j, s. And here, I already
want to install react router Dom so that we
121:43 - can have our different pages in different
routes. So I'm going to open up a new command
121:44 - line, a new terminal and say, well, it's bugged.
Okay, let's do npm install dash dash safe,
121:45 - React dash router dash DOM. Let's hit Enter.
And while that installs, let me create a component
121:46 - here. The good old navbar can't have a website
without an app bar. Can you? Alright, so I
121:47 - still RC here, even though we're not going
to use it yet. And here in the home, or in
121:48 - the app, brother, let me close the index HTML,
the app CSS index CSS, we don't need this.
121:49 - So here in the app. Okay, that's done installing
let's import a couple of things from from
121:50 - react router DOM. So we have browser router,
you have open router, we have switch and route.
121:51 - Well, my OCD is telling me to sort them alphabetically.
So these are from react,
121:52 - router.
121:53 - Dom if I can spell correctly, all right. So
for react router Dom to work, or for the router
121:54 - to work, we have to wrap everything here in
a router. In the route component, actually,
121:55 - let me name it router, because that makes
more sense. So as route, browse the router
121:56 - as router, and here, I'm gonna put our routes,
but we need to put a switch and not not the
121:57 - JavaScript switch, but the components which
close this and then put our routes here. So
121:58 - the first route will be the home route. And
this will be to, not to sorry, path equals
121:59 - slash. And this will have a component which
we haven't brought up yet. brunnen yet, of
122:00 - home. So this is the homepage. Let's bring
them, let's say here, pages, and let's bring
122:01 - our pages so import home from slash pages
slash home. Let me copy this two more times.
122:02 - And here, select those Ctrl D and do login
and sign up. And actually, this will be exact.
122:03 - So the exactly this path. So if we add something
here, it's not it's not that path, may copy
122:04 - this, space that two more times, and this
will be two slash login. And the component
122:05 - will be login. And this will be to slash sign
up. And the component will be signed up. Alright,
122:06 - let's save everything. And let's see if this
is working. So we get home page here and we've
122:07 - typed slash we get home page. Again, slash
login should give us the login page. And it
122:08 - does and slash sign up, gives us the signup
page. Now obviously, we want some sort of
122:09 - like navigation bar here with those links.
We don't want to type them here each time.
122:10 - So we're going to install material UI right
now. So let's do npm install dash dash save
122:11 - at material, dash UI slash core. Now, you
can go to material material, dash ui.com,
122:12 - they have really good documentation. And here
you can go to actually getting started and
122:13 - it will tell you to install it. And if you
want to link it with through HTML, not actually
122:14 - this is the font. And any component you want
to use, you go to component API or component
122:15 - demos rather. And in this case, we're going
to use the app bar, which is the navbar technically,
122:16 - and yeah, so you can take any of their examples,
you click on show the source and you actually
122:17 - get the source code and how to use these numbers.
But the way I'm going to Want to use the navbar
122:18 - is different to all their implementations.
So I'm actually going to do it manually right
122:19 - now. But there are certain things where I'm
going to copy some code, so that I don't waste
122:20 - time. Alright, so material wise has been installed,
let's go to nav bar. And here we need to bring
122:21 - it, bring a bar and a couple of other things.
So we're gonna have a lot of imports in our
122:22 - file. So I want to put some comments on our
imports so that we can navigate them easily.
122:23 - So here I'm gonna do movie stuff, which is
material UI. So here are the cons are not
122:24 - constant. Because this is iOS six, by so import
our bar.
122:25 - From
122:26 - material, not actually add to material, material,
UI slash core slash bar. Now, we could actually
122:27 - up bar like this, now we could actually group
all our imports like this, for example, we're
122:28 - going to need now something called two bar
and just do this, this would work. But this
122:29 - is not good practice right now, because we're
going to new need to do something called tree
122:30 - shaking, where we import each module alone.
Plus, the problem with doing stuff like this
122:31 - is that each time you run your app, it's importing
the whole framework, and it's gonna make your
122:32 - compiled time a bit slower. So we're actually
going to do the practice they actually recommend.
122:33 - So let's do a bar on here slash core slash
app bar. And if we were to go back to the
122:34 - documentation page, and expand any of them,
you notice that every app bar needs a toolbar
122:35 - inside, and then you have your buttons inside
of that. So let's go here. And let's import
122:36 - the toolbar. Let me just copy this actually,
and then select this Ctrl D and do two
122:37 - bar,
122:38 - where's the bar actually is the B capital?
No, it's just toolbar like that. Okay. So
122:39 - here for our number one, we're gonna need
to do return like this up bar, I'm gonna want
122:40 - I want to have it fixed at the top. So let's
do position fixed. And by the way, if you're
122:41 - wondering how I know that there is this thing
called position, here, you can just on any
122:42 - on any element, you can just scroll down,
and you will see the API reference, or you
122:43 - can go to component API and pick your component.
And if we would go to our bar here, it will
122:44 - show us that these are all the properties
that this component can take and the values
122:45 - that they take. So I'm using right now position.
And these are the values you can have. And
122:46 - actually, the default value is fixed. So I
shouldn't even type that. Alright, I learned
122:47 - something right now. So I should just leave
it like this, because that's the default value.
122:48 - So let's do toolbar. And here, we wanted to
actually there's nothing right now, I'm just
122:49 - gonna leave it like that. And I want to put
some buttons inside. And for this, I'm going
122:50 - to bring in button from material UI is not
actually 100 kilobytes, this import cost extension
122:51 - sometimes doesn't calculate the size properly.
Okay, so here, we'll say button. And this
122:52 - has a property color. I'm going to do in I'm
going to give it inherit. And, and button
122:53 - actually can take some this is this is a can
be a higher order component, and you can pass
122:54 - it a component, a different component, and
then pass it the properties of those components.
122:55 - And then you will have that component as a
child. So what I'm talking about, you can
122:56 - right now just say button, and say to what
is this, this is login. And then let's paste
122:57 - this two more times, and then say home. And
then this will be sign up. Let's save as go
122:58 - to our app. Now what we want in our application
is that we want the navbar to be at the top
122:59 - and then the navbar never changes. It's only
the content of the page that changes. So this
123:00 - navbar right here is not going to go inside
the switch it's going to be outside. Of course
123:01 - it's still going to be in the router, but
it's going to be right here. See nav bar.
123:02 - Let's actually bring it in, say components.
And let's do import nav bar from components
123:03 - slash nav bar. Let's save. Let's go to our
up and there we go. We have our nav bar and
123:04 - we have our buttons, but the text is gone,
because it's actually behind the navbar. So
123:05 - let's give our, let's make this section that's
got the text a container, like a bootstrap
123:06 - container fusion use that before. So let's
go in the app, actually, I'm going to go to
123:07 - the global CSS file, app dot CSS, let's do
dot container, this class. And I want to give
123:08 - it so I want to give the container a margin
top so that the top content doesn't hide behind
123:09 - the nav bar. So actually just do margin. And
then here, let's say, so the way margin works,
123:10 - you can, you can give for a numbers, you can
give one or which applies to all you can give
123:11 - two values which apply to top and bottom and
left and right, and then you can give four,
123:12 - so the first one would be top, and then goes
clockwise, right bottom and then left. So
123:13 - here, I'm going to do 84, top, not 2080. And
then for for right, I'm going to give the
123:14 - auto for bottom, I'm going to give it zero,
and then for left, I'm going to give it auto,
123:15 - so that it it actually stays in the middle
of by giving it auto, I'm going to give it
123:16 - a max width of 1200 pixels, so that it's actually
kind of pushed to the middle. Alright, so
123:17 - let's save that. But we need to give this
class to something. Think, what do I surround?
123:18 - Where do I surround, I think I'm gonna surround
the whole thing. So let's copy the cut that
123:19 - and then do dot container. And then put our
stuff here. Let's look here. All right, cool.
123:20 - Actually, the navbar shouldn't be in the container.
So the navbar should be outside, like this.
123:21 - All right. But our buttons right now don't
do anything. So let's go to the navbar. Here.
123:22 - Like I said earlier, we can pass a component
and here we need the link component from react
123:23 - router DOM, the import link from react dash
router ashdon. And here we're using tree shaking
123:24 - as well. So we're importing only that component.
So here, let's take the link. Let's do, let's
123:25 - write in all of these fields. And let's do
component equals link. And here, we can actually
123:26 - pass the properties of the component link,
and it will be under the button. In a way,
123:27 - it's like actually putting it here, but it
looks cleaner. So here, let's do so the link
123:28 - needs a two property. And for login, it's
going to be two slash login. For home, it's
123:29 - gonna be to slash to just slash. And for sign
up, it's going to be to slash sign up. So
123:30 - we save, and then we go to our app. And there
we go. So click on our buttons. Actually,
123:31 - it takes us to those pages. Cool. Let's bring
these buttons to the middle. Um, how do we
123:32 - let's give this toolbar a class name of nav
dash container. eyes go to our CSS, CSS, app
123:33 - CSS and do nav dash container which is going
to have margin auto. Let's save save everything.
123:34 - Let's go and there we go. Buttons are in the
middle. Cool. Alright, so our application
123:35 - so far has no content. I mean, there's no
markup, our pages are empty. So let's start
123:36 - working on the homepage. Let's start showing,
let's fetch the screams that we have and show
123:37 - them here. Alright, but before we do that,
let me go to the material UI documentation.
123:38 - I show you something. So first thing is I
want to implement a theme. Alright, where
123:39 - is it? utils. No, no customization? Yeah,
themes. Okay, so we don't have to necessarily,
123:40 - you know, create a theme but I want to create
one. You can do so many things with the theme.
123:41 - You can set a color scheme you can have like,
font, your font size, your global styles,
123:42 - all this stuff. So I'm going to create the
theme and just set some colors. And because
123:43 - I don't like this blue, alright, so to do
that, let's go to our app j s. So here, we
123:44 - need to bring in two things. Go right here
and do import Mui theme provider from to add
123:45 - material dash UI slash core slash movie, not
actually stylish life
123:46 - styles
123:47 - slash Mui theme provider. Next thing is the
Create theme function. So import, create theme,
123:48 - oops theme from at material UI slash course
lash styles slash create. Actually, it's create
123:49 - Mui theme, I may copy that and put it here.
Alright, so to create the theme, we just need
123:50 - to do const theme equals and we just call
that function create Mui theme. And here we
123:51 - pass it an object with some options.
123:52 - Oops.
123:53 - So here, we pass it this object with options.
And for me, I just want to have like a color
123:54 - palette theme. If you want to create yours,
you can go to hair color. And you can take
123:55 - any of these colors and you can scroll down
and there's a color tool here, pick your colors,
123:56 - you can just have the primary colors, or you
can have multiple shades. I've already got
123:57 - mine, I started in this text file, I'm just
gonna copy it, you can take the time to create
123:58 - yours, I'm just gonna paste my hair. And I'll
just save. Actually, one more thing we need
123:59 - to provide the more with the provider, I'm
just going to cut all of this and do Mui theme
124:00 - provider. And it has a property of theme.
And it's just theme because we named this
124:01 - variable theme. And close that and let me
paste everything back in it. Alright, so now
124:02 - everything that's got the color primary will
have this main and everything that's got the
124:03 - color, secondary will have this main. And
this contrast text is basically the color
124:04 - of the text that's on this element. And for
me both colors, they have to have white text
124:05 - on them, which stands out the most. So let's
go to our app. And there we go, the color
124:06 - has changed to this beautiful blue that I
chose. Alright, so next thing, let's let's
124:07 - start showing the start showing the screens
here. So to do that, let's go to so the home.
124:08 - In the home, what I want to do is I want to
have a section here on the left four screens,
124:09 - and I want to have a section on the right
for the profile. And I want to have like,
124:10 - if you've used bootstrap before, you're going
to have a core row. And inside of that we
124:11 - have columns, I want a column on the left,
that's of the width eight out of 12. And the
124:12 - right one would be four. And for that, we're
going to use the grid system. So the grid
124:13 - is basically there. So if we expand this,
you just bring in grid, which is right here
124:14 - from material UI, and you just put the container
with the grid and you add this container property,
124:15 - and then the elements will have this item
property. So let's just do that here in the
124:16 - home, I'm gonna, I'm going to remove this
stuff. And I'm gonna put grid container. Close
124:17 - this on the inside of here, I'm going to put
grid item. And this will have a property small
124:18 - of eight, which means of the small screens
gonna have a width of eight an x s, which
124:19 - is extra small of 12. So in really small screens,
it's gonna take take the full width, but I'm
124:20 - gonna put the text saying content. And let
me copy this paste. And this will be for an
124:21 - extra small screens is going to be 12 as well.
And this is going to be profile profile like
124:22 - this. Let's save, we need to bring in grid
of course, or grid from material UI slash
124:23 - go slash that just grabbed the just grid like
this with save. Let's go back to our app.
124:24 - And there we go. We have this which has if
we inspect we'll have summit bring this let
124:25 - me put them side by side if you can see her
takes on the full width. Right now. Actually,
124:26 - I want to edit it because this is right now
leaving no space between them. And as you
124:27 - can see her you can have this property spacing.
Okay, let me look at the example the proper
124:28 - example. So here Yeah, the second example.
So if we look here, it's got this. Where is
124:29 - it? Yeah, here you give the value of the spacing
okay, right here. So grid spacing, and then
124:30 - you give a number. So for me, I want the number
16. So here, I'm going to say, spacing equals
124:31 - 16. And a save. Let's go back. Right now if
we inspect, you're going to see that this
124:32 - would have a padding. Yeah, there we go. So
it's got a padding, which is going to push
124:33 - the content a little bit to the middle. So
there would be space between our element elements.
124:34 - Alright, so let's go back to our app. So here
in home, we have our, our grid here that says
124:35 - content. But here, we content is not enough,
obviously, we want to put our our screams.
124:36 - So for this, we need to fetch them from our
server. So in component that mount,
124:37 - I'm going to send a request to our server.
And for that, actually, we're going to use
124:38 - axios. So let's install that, open up a terminal
and say NPM, install dash dash save axios.
124:39 - And let me go to my Firebase dashboard and
grab the, the endpoint, or the base URL of
124:40 - our API, I go to the project to functions.
And if you're just doing the React bit, this
124:41 - is going to be in the video description of
part 14, or in a comment in the first video,
124:42 - or in both. Alright, so I'll copy that. And
if you've done the backend, of course, you
124:43 - know what to do. And so in react, the way
we set up our base URL, instead of using it
124:44 - everywhere, we can just go to the package
JSON. And here at the bottom, we can add a
124:45 - property called proxy. And let's paste this
and without the last slash, because I want
124:46 - to add on each request, because it makes more
sense like that. Alright, so axios is installed.
124:47 - So let's bring it in. So import axios from
axios. And here in the component did mount
124:48 - we can do axios. The get, and here we send
a request to slash screams. And if you remember,
124:49 - or if you've seen the backend, okay, let me
send this request. This is the type of data
124:50 - oops, it's a get request, and remove the body.
So this is the type of data that we're gonna
124:51 - get. This is one screen, it's gonna have this
these properties. So here to slash screens,
124:52 - because this returns a promise. So then result,
we want to do we want to store these screams
124:53 - in the component state. So let's initialize
that. So state state equals an object and
124:54 - it's got screams, and that's going to have
an initial value of naught. So here, if we
124:55 - get a result successfully, we do this dot
set state. And in the state, we set the screams
124:56 - to because this is axios. We don't just say
response. The data is actually stored in a
124:57 - key called data inside the responsibility
rest data. And let's handle any potential
124:58 - errors. If there's any error with just console
log, error. Cool. Alright, so let's actually
124:59 - show our screams. Because right now we're
just fetching them. And when we get them,
125:00 - let's, you know, stinkers, let's just console,
log them and see res dot data. Cool. All right.
125:01 - So here, content will get want to put like
a variable here, and let's call it haven't
125:02 - created it yet, but let's just call it because
these are the recent posts, excuse me, say
125:03 - recent screams, mock up. Let's create that.
So here, let's say let recent screams mock
125:04 - up equal. And what we want to do here is we
want to check if we have screams in the state.
125:05 - If the screens in the state are still no,
that means are still no, that means we're
125:06 - still loading the most still fetching them
from the server there. The request hasn't
125:07 - got a response yet. So we can use this in
a ternary operator, we can do this dot State
125:08 - DOT screams as a condition. That means if
it's, if it's not, no, that means we've got
125:09 - the data. So let's actually show the data.
So what we did here, let's do parentheses,
125:10 - and let's do this dot State DOT screams. So
if it's true, that means it's got some value
125:11 - in it, it's not not. So this set of screens
dot map, and for each screen, let's For now,
125:12 - let's for now returns return a paragraph and
in that paragraph, we put the opening curly
125:13 - braces. And remember, this is the data we
get that show the body. So let's go back.
125:14 - So for each screen that shows screen, dot
body, and as you see right now we have only
125:15 - two screens. Alright, so for each one we show
that else if it's still no, then we'll just
125:16 - show a text that says loading dot, dot, dot.
All right, and we put that markup variable
125:17 - there. And we save, call it compile successfully,
we go to our app. And it says loading because
125:18 - inquire, status 404. Or there's another problem
here for material materially Why? Because
125:19 - of the topography, are we even using topography,
we need to add this to our theme. I've seen
125:20 - this error before. So we got up to our theme,
we add this property at the bottom. typography
125:21 - use next variance and that error should be
gone. But we're still not getting our screams
125:22 - because we get error 404 localhost 3000 slash
screams is not found. Maybe we need to rerun
125:23 - our though server when we change the proxy,
let's let me do that. So stop it and run it
125:24 - again. Alright, so yeah, we had to restart
our server. And there we go, we get the text
125:25 - for the body text of our screams. For each
screen, we get the body text. So the first
125:26 - one says hello, user. And the second one says
something. So there we go, we got them cool.
125:27 - Let's actually show them in a better way we
show who posted them and when and stuff like
125:28 - this. Now for this, we're gonna need to have
to create a component. Well, where are we
125:29 - in home, let me close this. And this. So here
in the home, we need to actually use a component
125:30 - that's specifically made to show us details
for screens. So let's create a component,
125:31 - let's say here screen. For screen, we pass,
we actually pass a property called screen,
125:32 - which is going to be the screen. And let's
close this, let's import it and then create
125:33 - it. So import scream from and then we're going
to put it in. So go back one level and go
125:34 - to components to slash scream. So let's create
this. So here let's do new file, scream. Of
125:35 - course, this is a component. So it's, it's
Pascal cased. So the first first letter is
125:36 - a capital. So as to RC e tab, remove this
export. Now for this here, like I know we're
125:37 - going to do some styling later. So let's let
me show you something in the material UI material
125:38 - you why they prefer to use this CSS, JS type
of styling where where you actually write
125:39 - a write an object, a JavaScript object, and
then use a higher order component to apply
125:40 - those, those styles and make them into classes
and then use them. If you know, if you want
125:41 - to see an example of that, let's go to for
example, buttons. And as you see here, they
125:42 - import this with styles component or higher
order component. And then they create a styles
125:43 - object. And it's optional. If you want to
bring in the theme, the global theme that
125:44 - you created in your app. js, you can do that.
So any stylings that are kind of shared between
125:45 - components, you actually write them in the
theme in app js, and then get the theme and
125:46 - then use them there. So you don't have to
repeat yourself in multiple components. So
125:47 - it's like this Your brain with styles, you
create your styles object, and then you export
125:48 - your component with this higher order component
with styles. So you pass it that styles and
125:49 - then you pass it your component. And then
this will create an object called classes
125:50 - in the properties of this component. And then
you get the classes and then you use it like
125:51 - this. So for each component, you say class
name equals classes dot button, and now these
125:52 - styles in the button will be applied to this
button right here. So let's let's implement
125:53 - that. Okay, so let's, for now, I'm just gonna
put like some random style, just to apply
125:54 - this method first. So here we will have styles.
And here we're gonna have a card. So let's
125:55 - put here for the card, let's just say display.
Flex, which I don't think changes anything.
125:56 - Let's bring that with styles, but doesn't
change anything. For this example. Of course,
125:57 - in many cases it does. So let's do import
with styles. From Material art material, UI
125:58 - slash core slash style slash with styles.
And then we go here at the bottom, we do export
125:59 - defaults with styles, and then open parentheses
and pass the Stiles constant, this one, close
126:00 - parenthesis, open parentheses, and then pass
our component scream. Now, this will give
126:01 - us access to a variable classes and the properties.
So inside, actually inside the render, we
126:02 - can D structure this variable, we can say
const.
126:03 - Like this, when classes equals this dot props.
And of course, this is the this is the equivalent
126:04 - of saying const classes equals this dot, props,
dot classes, this call destructuring. So anyway,
126:05 - so now we have classes, we can actually access
them. But let's create the markup of our of
126:06 - our screen. And each of our screams is going
to be a card. So let's look at the card element.
126:07 - So if we go to cards, component demos, cards,
this is the card This is one of my favorite
126:08 - elements in material design, it's this card
actually has these the side shadow that looks
126:09 - it's kind of like on top of the background,
like kind of extruded a bit. So this is what
126:10 - we're going to use, we're going to have an
image, but it's going to be on the left. So
126:11 - this is the kind of the kind of structure
that we're having, we're going to have a card
126:12 - with a card media, let's take some of these
imports. So namely, these four right here
126:13 - are these five. let's paste them up here to
see movie stuff. I spaced these, but we're
126:14 - not gonna need actions or action area. To
do this. Let's do caught on like this card.
126:15 - And inside of card, we're gonna first thing
was gonna, we're gonna have the image. So
126:16 - card media. And this will have an image property.
And this will be the image of the few image
126:17 - of the post of the screen, it's going to be
in a variable called user image. So let's
126:18 - do image equals scream. Or actually, let's
just say user image, let's extract all those,
126:19 - those properties. So let's do const. Or actually,
it's in the props as well. So the scream is
126:20 - in the props, this remember guys, the scream
that we pass here, excuse me, as in the props.
126:21 - so here we can, we can further destructure
properties from property from an object inside
126:22 - of props by doing this, so scream, like this.
And then we do colon, and then we do another
126:23 - object here, and then we extract properties
from inside the screen. So what we need is,
126:24 - we need the body. We need created art. Use
image, we need the use handle. I think this
126:25 - is all we need for now, maybe the scream ID.
Well, let's get all of them the light count,
126:26 - and then the comment, count. Alright, so this
will extract them and we're going to access
126:27 - them like this. So Alright, so the we have
the image. So it's there is the title property
126:28 - for the card, mid card media, let's say profile,
profile image. If I can spell. Alright, so
126:29 - after card media, we're going to have our
content. But I want to correlate or just let's
126:30 - just put the card content for now, let's not
worry about the styling for now. Let's look
126:31 - at what it looks like and then style it. So
here we're going to have the handle of the
126:32 - user. So let's we're going to use this thing
called typography. In materially why it's
126:33 - preferable whenever you have some sort of
text that you want to show you want to use
126:34 - this typography object. so here if we go to
component demos, or actually it's up here.
126:35 - Yep, in the style, typography, typography
is any type of text you have in your app used
126:36 - Pog, Rafi and then you give it a different
variant, which is going to give it a different
126:37 - size and styling. So for this, we're going
to use typography. And by the way, whenever
126:38 - you're confused with these objects, you just
are with these components. You can check them
126:39 - the documentation and the API component API.
And you can as well when you put they have
126:40 - types so when you put a component you can
press Control space in VS code, and you See
126:41 - all the properties or actually have an important
that so we can't see any. Okay, so let's import
126:42 - typography from material, UI slash core slash
typography. Now, if I press Control space,
126:43 - there we go, we get all the properties that
can exist on this. And then if we type, let's
126:44 - say one of them, which is variant, and we
do equal, and then we can get as well more
126:45 - properties here. For this, we're going to
use the head of five want it to be a slightly
126:46 - big. And let's close this and let's say the
value will be used to handle.
126:47 - And then after this, we want to show when
this was posted, so as to typography, variant,
126:48 - certain body board, give body to Okay, body
to, and let's give this a color of text secondary,
126:49 - which makes it a bit gray, because we don't
want it to distract from the content is just
126:50 - like metadata. So this will be the created
art. Now we want the actual body of the, of
126:51 - the of the screen. So type biography, variant.
body, body one, let's give it body one. Let's
126:52 - see what this looks like. Alright, so this
is the screen. Alright, let's save. And let's
126:53 - save here as well. compiling, it complains
that we didn't use those variables. Let's
126:54 - look at our app. Alright, so there we go,
we get our card. But there's the color of
126:55 - the card and the color of the background are
kind of the same. So let's change that. Let's
126:56 - go to App CSS, and the global CSS and actually
here, the body want to give it some sort of
126:57 - background color. Give it like very light
gray, RGB, going to give it to 45 to 45 to
126:58 - 45. Let's save. Cool, so we have not great
and these cards are white. So they stand out.
126:59 - Let's give this some kind of like margin.
And this should be a link to the user's page.
127:00 - Clear screen. Actually, this we want to give
it the component. Link. And the to oops, do
127:01 - not go to will be actually a template string.
So curly braces backticks. And is to slash
127:02 - users. We haven't created this page yet. But
let's just do slash users and then pass user
127:03 - handle to import link, import link from react
router, Dom slash link. Alright, let's check
127:04 - our app. Oh, this is underlined and the color
is still the same. Let's fix that. So here
127:05 - let's give the anchor tag globally. Let's
give it no text decoration. So text dash decoration,
127:06 - oops, decoration.
127:07 - None.
127:08 - And to change the color, it's good to scream.
Where are we we're here. So let's change the
127:09 - color which is going to give it the color
primary to get the our blue color. Let's save
127:10 - everything. Cool. So there's not underlining
and the color is blue. We click on it. And
127:11 - it takes us to slash user slash Johnny. Cool.
But we don't see that image actually, because
127:12 - for some reason it has zero width. Can we
inspect this and try to fix this. So Oh, it's
127:13 - it's Oh, it's in a div. That's, that's interesting.
Let's just actually edit some styling here.
127:14 - So starting with the card, I wanted to have
a margin bottom margin bottom, so that we'll
127:15 - have some space between the cards. Give it
20. And I think that's it for the card. Let's
127:16 - edit. Let's give this a class of classes dot
details. Which we don't always say content
127:17 - because it's the card content. And let's give
the card itself class name. classes. Remember,
127:18 - we have this classes object. So classes dot
card. Oh, we actually didn't give it earlier.
127:19 - And where's the image? Do I give the image
a class? Yes, I think so. Classes class name
127:20 - equals classes dot image. We go here, let's
give image some styling. Let's give it a minimum
127:21 - width of 200. And, yeah, that's it. Let's
style the content. So content. Um, what do
127:22 - we want to do, actually? Okay, let's give
it some padding, because it's too close to
127:23 - the edges. Okay, feel like padding of 25.
Let's see what it looks like. Alright, so
127:24 - we got the image now. But I think the image
is kind of being stretched. Okay, I don't
127:25 - like this way, let's do object fit.
127:26 - No, cover
127:27 - the same. But I think if I were to make this
div longer, it will stretch this because we
127:28 - let's let's give an object fit cover because
that's a good property to give your images
127:29 - so that they don't get stretched by the change
the changes of the dimensions of the image.
127:30 - Are let's save this. And let's look at this.
Alright, slick and much better. Of course,
127:31 - we need to format this because we don't want
to show this ISO time string. In the last
127:32 - video, we started working on the homepage,
we created a screen component. And now we're
127:33 - showing our recent screens on the homepage.
Now, I've went ahead and added one more screen
127:34 - and some likes and comments, which we can't
see right now because we're not displaying
127:35 - that data. So. But I noticed something, if
you open up the console window, we have a
127:36 - couple of errors that we need a couple of
warnings that we need to fix. By the way,
127:37 - this is the data that we got back from our
API endpoint from our request. We printed
127:38 - it right here, here, but I'm going to remove
the print because we don't need to have the
127:39 - data. Let's look at these errors. So first
one is react router Dom apparently it doesn't
127:40 - like it when we import link separately. So
let's fix that. So here in the screen, here,
127:41 - so let's do structure link from the entire
library. I think we're using it in the home
127:42 - as well. No. Yeah, in the navbar, we're using
a navbar. So here, let's remove the slash
127:43 - link and just do like this. And by the way,
my server still run in my development server,
127:44 - if yours is not just run npm install, I'm
going to close this window, I'm going to save
127:45 - all files. Let's go back to our console window,
that error is gone. And here it says each,
127:46 - each child in a list should have a unique
key, or this is a react thing. I think it's
127:47 - in the home. Yeah, here. Whenever we are looping
through an array, and we're showing some data,
127:48 - each child has to have a unique key property.
So let's pass this a key property. And we
127:49 - know that our screams they have the scream
ID property which is unique. So let's do scream
127:50 - dot scream, ID. And that error should be gone
when we save. And it is apparently I gave
127:51 - some class a class instead of class name cinna
card content. So that's in scream. Yeah, right
127:52 - here. So class name instead of class, and
all the errors should be gone. And we only
127:53 - get these warnings that we're not using these
values. Cool. Alright, so I want to format
127:54 - this, like you see in Facebook and Twitter
whenever someone posts something you see like
127:55 - five minutes ago, or like two days ago or
whatever. And for this, I'm going to use a
127:56 - library called dangerous Now we could use
moment moment is great, but moment has like
127:57 - loads of extra functionality that we're not
going to use. And it's adds like more than
127:58 - 50 kilobytes to our bundle size. So I'm just
gonna use an old lightweight alternative code
127:59 - they they j s as my voice is cracking. So
npm install dash dash save day j s. And as
128:00 - it's installing, I'm actually gonna bring
it in here. Let's do import de j s from they
128:01 - j s and not the stage s. So if you forget
to go To the documentation, you'll see it's
128:02 - it follows the same convert or like same format
that you would use the moment you just call
128:03 - the class, or Lamine the library, and then
you pass it the date, like here, and then
128:04 - you do dot format, and you format it like
you want. But for this one, we don't need
128:05 - that format we need. Actually, we need a functionality
that comes from a plugin, where's the plug
128:06 - in list right here. So I'm going to search
for from now Yeah, so it's this from now thing,
128:07 - we want to show the date like this, this relative
time plugin, so we need to bring this plugin
128:08 - just like this. So let's copy this. Let's
go here to import relative time from there.
128:09 - And the way they just works is that we need
to call this extend function to actually add
128:10 - this plugin. So at the start of our code we
need to do they are not in the class in the
128:11 - render method. So here we say they j s
128:12 - dot extend, and we pass it our plugin so relative
time. And here where the date is right here,
128:13 - we cut this created that we say day j, s,
and then we pass it the creator that date,
128:14 - and then we do dot from now, simple as that
we save, go to our app, I close this console,
128:15 - go, we get this was posted an hour ago, this
was posted 17 hour, hours ago, and this was
128:16 - posted 19 hours ago. Cool. So we get the relative
time thing. Now we could keep working on the
128:17 - buttons that are on the card, on the screen
cards, like Like buttons, the comment and
128:18 - the expand and the delete button. But most
of these buttons actually depend on our authentication
128:19 - state. So for example, the like button, if
you are not logged in, it will, if you click
128:20 - it, it will direct you to the login page if
you are logged in. And if your legs if you
128:21 - have like the screen, it will be a full heart.
And if you haven't, it would be like an empty,
128:22 - just outline heart. Now, because all this
functionality depends on authentication, that
128:23 - means let's actually work on authentication,
and then come back to continue with the screen
128:24 - cards. So let's actually implement the login
page, because there's nothing there. Alright,
128:25 - so let's go to login. And here, we're going
to use text fields. So let's go to the movie
128:26 - Doc, let me close this. Go to component demos,
we're going to use something called text field.
128:27 - And it's this thing right here. Well, there's
multiple implementation, but we just need
128:28 - a simple text field. So as you see, you just
bring in text field. And, and yeah, you just
128:29 - put text field inside of your form, which
form which is a standard HTML form. And you
128:30 - put these properties inside of it. Alright,
so let's go to our login. Let's first implement
128:31 - the width style or styles thing, because we're
going to need later we're going to need to
128:32 - bring in some global styles and access the
global theme. So let's do import with styles
128:33 - from material UI. Slash cause slash styles,
slash with styles. All right, let's create
128:34 - a styles object for now is going to be empty.
Let's do export default, with styles, path,
128:35 - pass the styles. And then for the second thing,
pass login. Actually, login should be lowercase
128:36 - login. Again, and here we're going to have
inside the render actually, we'll do const
128:37 - as take our classes, or we have none right
now. But we will in a moment. So let's do
128:38 - equals this dot props with the destructor.
From props, let's actually use prop types.
128:39 - It's a good practice to use prop types, which
is a way that a built in method in react for
128:40 - type checking. It minimizes like the potential
errors that you can get in your application.
128:41 - So as to import prop types from prop types.
And here we do login dot prop types camel
128:42 - case. So the first P is lower case equals
an object. And here, right now we only have
128:43 - this classes. So we'll say classes. And this
will be an object. So there's two prop types.
128:44 - Remember this prop types, capital p.object.is
required because it is required. And now we're
128:45 - going to have our form here. But what I want
to do is here in the login page, I want the
128:46 - form to be in the middle. So not to take up
the whole space. So what I'm going to do,
128:47 - maybe there's a better way of doing that,
but for now, I'm just gonna have a grid, and
128:48 - then have three columns, and then have the
one in the middle have a hold our form. So
128:49 - let's bring in grid, let's do here, movie
stuff. That's important grid from material,
128:50 - dash UI slash go slash grid. Yeah, that's
all we need are now, here, let's remove this
128:51 - div, and let's do return grid, this is going
to be the container.
128:52 - And
128:53 - let's give it a class name. Even though we
haven't created it yet, say classes dot, I
128:54 - know this is not the form, it's the form container,
but I'm just gonna call it form for now. Let's
128:55 - do three grid items. So grid item, and I'm
gonna give this a value of small for small,
128:56 - they will take up the whole width. And let
me copy this and paste it two more times.
128:57 - And then here, this one is gonna is gonna
have a, it's gonna have content, so it's gonna
128:58 - have a closing tag, like this. And for now,
here, let's just say I don't know, you're
128:59 - here, we need this form, class, say, form.
And what the form is gonna, well, I know we're
129:00 - gonna have a text align, we might add some
stuff more later, I still text align center,
129:01 - on the everything to be aligned to the center,
like the the title of the page, and we're
129:02 - gonna have an icon as well. Let's save this
for now. And let's look at it. So we get yo
129:03 - and it's in the middle. And if we inspect
this face, if you see we have three divs.
129:04 - And they share exactly, like, what's cool
about material UI is I don't have to say that
129:05 - this is this has a width of four and four
and four. By default, if you put three elements,
129:06 - and you don't give any default, any width,
value, I mean, any like column width value,
129:07 - it will automatically split the, by the number
of you have the children you have. So if you
129:08 - have four grid items, it's going to give them
25% each, if you have five, it's going to
129:09 - give them 20, etc, right? And I was given
them 33%. But the problem with these divs
129:10 - is that they don't have any padding, we need
some spacing, to push, or do we actually we
129:11 - don't, it's just like, because we're not going
to have other divs from this side. And this
129:12 - side, I'm not gonna have any content from
the left and right, so let's leave it like
129:13 - that. Let's so here at the top, I want to
have the monkey image thing. Let's actually
129:14 - bring it from the public folder. So let's
copy this icon. png let's create a folder
129:15 - here called images. And let's paste it. Close
it as bring it in. Let's do import. What do
129:16 - we call it up icon? Doesn't matter. We can
call it anything. We go back on level you
129:17 - go into images. And what does that icon dot
dot png. Cool. Here let's put image the source.
129:18 - What is that source? tab CRD equals? What
is it up? I can't I already forgot what I
129:19 - call it. Yeah, icon. And yeah, let's give
it an alternative property because react warns
129:20 - us if we don't let's just say I don't know,
monkey image. We'll just monkey. Close this.
129:21 - And under here, I'm going to have a title
that was that says typography. Actually, I
129:22 - noticed something here that I made a mistake
here. I forgot to fix. I imported typography
129:23 - and typography. And as well here I use typography
instead of typography and one of them Yeah,
129:24 - this one. Space this here, save. Cool. All
right here let's bring in typography. typography
129:25 - from from material, cash UI slash core slash.
typography. Cool. All right here we're gonna
129:26 - have our title. So we're gonna do typography
and by variant of a variant of video How to
129:27 - one or how to to, as to how to one, it's good
for search engine optimization to have a header
129:28 - one in each page. And let's give this a class
name of classes.is called this page title.
129:29 - This is gonna say, oops, it's gonna say login
and Let's just look at it right now. Oh, it's
129:30 - massive, she's heard it too. Okay, heard it
is better, let's have some padding or margin
129:31 - between this monkey image between I wanted
to like kind of have its own space. So let's
129:32 - give this a class name of classes dot image.
Let's do image, oops, image and
129:33 - margin,
129:34 - give this. So I want to give it 20 on the
top, although on the right, and then 20 at
129:35 - the bottom, and then auto on the right on
the left, call, there's some space between
129:36 - it and the title. And let's create our form
now. So under the typography, here, let's
129:37 - do form. I'm going to give this no validate,
because we're going to have an email here.
129:38 - And by default, html5 will try to validate
the email field. And let's give it a name
129:39 - on submit this dot handle submit, we haven't
created yet. created, handle, handle, submit,
129:40 - we're gonna make it an arrow function so that
we don't have to bind to it. And it's gonna
129:41 - take an event. And here, we're gonna just
console log on a high for now. And here, we're
129:42 - gonna have our text fields. So we're bringing
in textfield, we have an a spring in has to
129:43 - import text field from, to material UI slash
core slash text field. Now if we type text
129:44 - field, you can do Ctrl Space to see older
the stuff you can add to it, I already know
129:45 - I'm going to use, I'm going to give it an
ID of email, and name of email, which we're
129:46 - going to use later for when we are handling
the change, a type of email, which is, to
129:47 - be honest, not that important, but it's just
good practice, let's just add a label. The
129:48 - label is just gonna say, email. This is what
is written on it before we type anything.
129:49 - Gonna give it a class name of classes dot
txt field. This is our Java JavaScript object.
129:50 - So stick to like, we should stick to camel
case, variable names. I'm going to come here
129:51 - gonna give this a value. Actually, we haven't
declared our state yet. You're gonna give
129:52 - us a value of this dot State DOT, what is
this the email, the email. And here, I'm going
129:53 - to, there's two. Well, there's two main ways
of handling forms in react. One is the references
129:54 - where you create references for your input
fields. And then you get the values that references
129:55 - and the second one is the more popular one
called controlled component, which is using
129:56 - the state. I mean, they're both the same,
I just prefer the controlled component one,
129:57 - so I'm going to use it. Actually, maybe they're
not the same. Maybe there's different applications
129:58 - for different different, you know, scenarios.
But I prefer to use the controlled component
129:59 - one, because we can use the React dev tools
and check out to the state to make sure that
130:00 - everything is working fine. So let's do this
dot state equals we're going to have an email
130:01 - and a password because this is our login form.
We're going to initialize them as empty strings.
130:02 - Actually, we're also going to have a loading
property, which is false by default. This
130:03 - is when when you press the login button, I
wanted to show like a spinner as it's requesting
130:04 - stuff from the server because we're using
Cloud Functions. Well, in general, it's a
130:05 - good practice by using Cloud Functions. Sometimes
the first execution is kind of slow. It's
130:06 - called a cold start. So having a spinner actually
gives makes the user gives the illusion of
130:07 - the app being more responsive and it actually
doesn't. It seems like the time it takes loading
130:08 - is less when you see a spinner. Okay, so we're
gonna have an errors array in case any errors
130:09 - happen or invalidating the form. Okay, so
we're here. And what do we what else? Yeah,
130:10 - on change, which we haven't created yet. There's
gonna be this dot handle, change. Let's create
130:11 - that. So we could actually do a handle change
and pass this the name of the field. But since
130:12 - we already have a name here, we can do it
in a, in a more generic way, by doing handle,
130:13 - change, equals, so I have an event. And here,
we're going to say, whatever put the handle
130:14 - submit outside the class. All right,
130:15 - so handle change is going to take an event,
and this event will have because we're here,
130:16 - well, or any on any other textfield, this
event will have a target property. And if
130:17 - we're on this text field, this target will
be this text field or the input actually in
130:18 - the HTML. And the input has a couple of things.
One of them is the name, because we gave it
130:19 - here the name and then one of them is the
value because it's what's written in it, or
130:20 - what's in the state. So what we can do here,
we can do this dot set state, we want to set
130:21 - the value of the input to the value of the,
to the to the to its corresponding value on
130:22 - the state. So we can say, this dot state,
and we want to set so this is generic, it's
130:23 - going to take an event dot target, dot name,
so if it's if it's the email input, it's gonna
130:24 - have email, if it's the password input, which
we haven't created yet. It's gonna be password.
130:25 - and the value of this is going to be event
dot target, dot value. All right, so this
130:26 - would work for both of them. And yeah, okay,
so we have this on change. And I'm going to
130:27 - add this full width property, which is going
to let this textfield take the full width
130:28 - of its containing div, I'm going to close
like this. And by the way, if you're wondering
130:29 - how I know this full width thing, or anything
else, you could just go to here, textfield,
130:30 - go at the bottom to the API reference, click
on the text field here. And you can see all
130:31 - the all the properties that you can actually
use this, there's tons of different stuff
130:32 - that you can use. To make the experience better,
we're gonna use a couple more later. But for
130:33 - now, let's, let's copy this text input or
text field rather. And paste it. And the second
130:34 - one will have the idea of password was just
actually select Email and then Ctrl D, three
130:35 - times or four times or three times rather,
and the password. So yeah, I just password
130:36 - name is password type his password so that
we don't see when we're typing. And the label
130:37 - is password with capital P. class name is
that textfield values, this dot State DOT
130:38 - password on change is the same and, and for
width as well. Alright, so now we need a button
130:39 - to submit this form. And for this, we're actually
going to bring in the material UI button.
130:40 - So as to import import button
130:41 - from
130:42 - material UI slash core slash button. button.
Alright, so where are we we are here. So here
130:43 - we say button. of type Submit. And I'm going
to give it a variant. You can go to the material
130:44 - y, doc and go to button, not the API the demo.
Pick any variant you want, you can have the
130:45 - this one, I don't know what you call this
actually was the variant of this, this is
130:46 - the default, maybe Yeah, it's the default.
But this is called contained. So I like the
130:47 - content one, it has the whole color, and it
has this drop shadow, it looks cool. Alright,
130:48 - so let's give a variant of content contained
the color of primary and the class name of
130:49 - classes dot button. And we need to create
all these styles actually. So okay, let's
130:50 - close this.
130:51 - And
130:52 - let's go here. Let's do what do we need to
style we need to style the the page title.
130:53 - So page title, I want to have like some margin
for the page title. So let's give it margin.
130:54 - Still the same for same for the image. Save,
let's look at it. All right. Oh, this looks
130:55 - weird. Okay, so we have our inputs, but there's
too much space between the login and the images.
130:56 - Just reduce this to Ctrl D reduced this to
10. Let's look at, okay, this is better. Actually,
130:57 - I want the inputs as well to have some margin
on the top and the bottom. So let's style
130:58 - that. Let's do
130:59 - text field. Yeah, thanks to the old text field.
So I need to give the text field the margin
131:00 - as well.
131:01 - Give it give it the same as the title. Let's
look at it. Alright, cool. I don't know what's
131:02 - wrong with the button. Why is it doing that?
Oh, actually, what am I saying? Of course,
131:03 - I know what's wrong with the button? Because
the button needs some text inside of it. Of
131:04 - course. Login. Yeah, there we go. Alright,
so text field. And what do we do now? We need
131:05 - some margin between the button and the input.
So let's do button margin, or just margin
131:06 - top? margin top because just say 20, you can
do a number. And yeah, this is it. All right.
131:07 - Let's test this out. email@gmail.com? Oh,
of course, we didn't write the handle submit,
131:08 - what am I saying? Okay, we need first to prevent
default behavior. Because of course, we don't
131:09 - want to show this information here. And we
don't want to reload the page. So let's do
131:10 - let's do event, dot prevent default. And here,
what we want to do is we want to send a request
131:11 - to our server, and then show any errors or,
or if it's successful redirect to the homepage.
131:12 - So we're going to use axios. So let's bring
it URL. So let's do import axios, from axios.
131:13 - And here, what we need to do, well, actually,
we need to implement the loading thing as
131:14 - well. So once the this so the form is submitted,
we do this dot set state. Two, and then we
131:15 - give loading, true. And then once everything
is done, we're gonna set it back to false.
131:16 - And now we're going to do axios dot post.
And it's gonna be at slash login. And by the
131:17 - way, if you if you haven't, if you don't know,
or if you haven't forgot, or if you haven't
131:18 - seen the part for the API, this is how the
login works. You send an email and a password.
131:19 - And if it's wrong, you like, if the email
is wrong, you get an error. Actually, if anything
131:20 - is wrong, get the general error that wrong
credentials, please try again. And if if the
131:21 - email is empty, you get an error just for
the email. So we're going to use this errors
131:22 - object and give just that input the error
that corresponds to it. And if it's, it's
131:23 - like, if it's correct, we get a token. When
we get Oh, user, not users. Yeah, so if it's
131:24 - correct, we get a token, of course, an OK
response, which will allow us to redirect
131:25 - to our homepage. So here, so post that login,
let's get the data so const user user data,
131:26 - let's call it and it's going to be an object.
And this will be will have a an email, this
131:27 - will be this dot state. So remember, we bound
those values to our state, this dot State
131:28 - DOT email, and the password will be this dot
State DOT password. And then we pass user
131:29 - data here, I mean, we could put this object
here but it looks cleaner like this. And this
131:30 - returns a promise. So then if we get a result
so if we get here that means we're successful.
131:31 - So let's actually console log our result.
Result Oh, this is axial. So with the data
131:32 - will be in resultant data. So first successful
we want to redirect so want to do all a set
131:33 - the loading to false actually, first, let's
do this dot set state. Loading to false. And
131:34 - then here we do this stop props dot history
dot push and then This is a, this is a method
131:35 - we use in react to, to push state URL and
then we go to it, or a path. So here we push
131:36 - slash, which is the homepage. So this should
redirect us to the home page. And but if we
131:37 - have any problem if we have any errors, so
we do catch error, and here, we need to set
131:38 - the errors of our form. So what we need to
do is this dot set state.
131:39 - And we want to give the errors, the value
of error dot response dot data. And we want
131:40 - to, actually, this is errors. And we want
to set the loading to false. Right now the
131:41 - loading is not being used by anything. Let's
get the loading from from the state. That's
131:42 - actually good errors as well. So we can display
them. So let's get errors. And loading from
131:43 - state. This dot state is in the structure
and again, and here for the input, we're gonna
131:44 - use something called helper text. So if you
if you click on an input, actually not here,
131:45 - so if we go to text field, yeah, this is the
helper text, this text right here, and you
131:46 - can use it to display arrows, or you can use
it to display hints. We're going to use it
131:47 - to display errors if there's any. So here
what we need to do, we need to say, helper,
131:48 - oops, helper text equals, and this will be
because this is the email this will be errors
131:49 - dot email. And we don't have to worry about
if there is nothing errors, if there is no
131:50 - emails, if email property is just not going
to show anything. And here as well, we need
131:51 - to have an error property, which sets the
field to be read. So here we say error. And
131:52 - the way we determine whether we have an error
or not, is because we this is the email we
131:53 - say errors dot email, and use a ternary operator.
So that means if we do have this key, that
131:54 - means there's an error in the email because
we have received an email key in the errors
131:55 - array. object. So we say true, else. It's
false. There's no error. Otherwise, if we
131:56 - don't have this, so let's copy this and give
it to the password as well. So here, let's
131:57 - do errors dot password, Ctrl D, and the password
like this. So now when we get our response,
131:58 - and we get errors like this, or is it errors
like this? Let me cause an error to happen.
131:59 - Actually, no, I mean, how this empty. We can
have this email and we can show it in the
132:00 - helper text. All right, so let's save. So
let's leave them empty. And we click Login.
132:01 - Oops, it says, type error cannot find data.
Oh, it's because I misspelled response. response.
132:02 - All right, so we sent there we go, we get
our errors and put in the helper text and
132:03 - the input is invalidated. And if I would put
an email here, so let's say I don't know,
132:04 - like something at something. Whenever I type
something random, it's like sad what the hell.
132:05 - Alright, so login, that error is gone. And
if I give like a random password, Oh, actually,
132:06 - we need to show if the credentials are wrong,
we need to show some error right here. So
132:07 - So here, I show it under the button, or not
actually show on top of the button. And let's
132:08 - say here, we do like a conditional errors
dot, because if we have wrong credentials,
132:09 - we get we get an error called general. So
let's check for that error lead to errors
132:10 - dot general. So if it's the case, so and and
if we have errors dot general then render
132:11 - this understood typography variant, give this
body to this we'll have a class name. Because
132:12 - we want to change the style of this classes
dot custom error, I'm going to call it and
132:13 - here we're going to have the value of that
general key. So we do errors. dot Gen. And
132:14 - here let's, let's get discus. Let's style
this. Let's Okay, so custom error. Let's give
132:15 - it a, like a red color color. Red like this.
And let's give it like a smaller font size,
132:16 - font size. Let's give it like naught point
eight, run. Yeah, I think that's it. Okay,
132:17 - let's try some wrong email. And some wrong
password.
132:18 - Cool. We
132:19 - got wrong credentials, please try again. Let's
give it some margin. So it's not too close
132:20 - to the to the input. So let's give it margin
top, say 10 pixels, like this, or just 10
132:21 - like this. Oh, I mean, I have to put something.
Yeah, there we go. Much better. Let's as well
132:22 - add some text here that says, if you don't
have an account, go to sign up. And with a
132:23 - link that redirects to sign up. Let's go here
under the button. Let's say give us put a
132:24 - small and say don't have an account. Sign
up. And then put a link here
132:25 - to
132:26 - slash sign up. This is the React router Dom
link. And it will say here. So this will the
132:27 - word here will be a link. So let's go and
bring in link. Import link. Whoops link from
132:28 - react router. Dom. All right. Oh, actually,
as well, I want to do something I want when
132:29 - we click Oh, this is not cool. So I want when
we click on login, I want to show a spinner
132:30 - inside of the inside of the login button.
And I want to make it this disabled. So we
132:31 - don't we can't click it again. Alright, let's
make this actually come down. Like under the
132:32 - button. Let's just add a line break. So. Yep.
All right. It's cool. So if you click here,
132:33 - it goes to the signup page, which has nothing
right now. Alright. By the way, this looks
132:34 - purple because it's visited you can change
the color of that. I'll add the login the
132:35 - spinner thing you can go here. Yeah, progress
is progress thing, we can add the indeterminate
132:36 - progress one. So which is just what is it?
It's circular progress, we can copy this.
132:37 - Let's go here. On the movie stuff. Let's bring
it in. And here it's gonna be inside the login
132:38 - button. So here let's do if loading. So if
we're loading we do we return this circular
132:39 - progress thing. And let's do a class name.
Because it's gonna need some styling classes
132:40 - dot progress. Now, the way I want to do it,
I want to have it in the center of the button.
132:41 - So I'm going to do to the button is okay there
we give class progress. Okay. So so the button
132:42 - will have a position of relative so that we
can give the spinner a position of absolute
132:43 - so that we can put it in the middle. So position.
position. Absolute.
132:44 - All right.
132:45 - Okay, we've got a spinner for like a fraction
of a second sexually. Why is it being too
132:46 - fast on it to be slow. So let's give the wrong
password lesson as being too fast, but all
132:47 - spinner is a bit too big.
132:48 - To give it can take actually a size property.
Just just a number. Let's give it a size of
132:49 - 20 or 3030s. Okay. I don't know I can't see
it right now. But we get a spinner back. Oh,
132:50 - actually, it's, it's in the middle. Let's
go. That's fine. What do we do? Actually,
132:51 - I want to I want to make the button disabled
when we're logged in We are loading. So we
132:52 - will do disabled, which is a Boolean, and
we just pass that loading. So if it's loading,
132:53 - it's disabled, if not, it's not disabled.
So let's refresh, hit the login button, see
132:54 - becomes like disabled for a second. Cool.
And if we have the correct credentials, so
132:55 - email us@gmail.com, we get 123456, the password,
cool, we're redirected the homepage. And,
132:56 - of course, we're not setting the state to
be authenticated or anything, we're just redirecting
132:57 - right now. So in this video, we're gonna create
the signup form. But before I get to that,
132:58 - I want to recommend you guys download the
React developer tools, Chrome extension, I'm
132:59 - assuming you're using Chrome if not find an
equivalent in your browser, it's really helpful.
133:00 - If I open up my developer tools, put them
side by side, open up the React tab, you can
133:01 - see we can drill in all our components and
see what's happening, what components we have,
133:02 - what state they hold. For example, if we click
on our login component, you see the state
133:03 - right here. And if we type stuff updates,
you see update live, if we get some errors,
133:04 - you can see our errors. Here, you can see
the loading Boolean, you can even trigger
133:05 - change values and see how your front end reacts
to it, you see, I can put the loading and
133:06 - I can see that animation. Alright, so it's
just that one, one thing I recommend you guys
133:07 - do. Alright, let's actually create the signup
form, it's actually gonna be so similar to
133:08 - the login form. So let's go to login, copy
everything from here, and then go to sign
133:09 - up. Let me close the terminal, paste everything.
And we're going to change a couple of things.
133:10 - So first thing, first thing, these styles
are shared between the two components, so
133:11 - we can make them global. So let's copy everything
here. Let's go to App j s. And here, we can
133:12 - paste them in our theme. And we can get them
by making the styles actually a function that
133:13 - takes the theme object and returns the following.
And here, we can just spread the theme. And
133:14 - we will have access to everything that's in
the global theme. So let's do the same for
133:15 - login actually. So let's go to login. And
here instead of styles, we'll just do styles
133:16 - like this. And we're going to have the theme
in there. Cool. So now here, let's change
133:17 - a couple things. So the class is sign up.
And here we have an email and password. And
133:18 - we have a Confirm Password. And we have a
handle as well. Alright, so that's the same,
133:19 - this is the same here, we have new user data.
And we also send the Confirm Password. This
133:20 - dot State DOT Confirm Password, and the handle
as well. So this dot State DOT handle. All
133:21 - right, so here we send an axios request post
request to slash sign up. And we send the
133:22 - new user data. One thing I forgot though,
when we get the token, in res dot data dot
133:23 - token, we need to actually store it in local
storage so that if our application somewhere
133:24 - refreshes the page or closes the browser opens
it again will have access to the token locally.
133:25 - So we can do local storage dot set item. I'm
going to call this FB for Firebase ID token
133:26 - like this. And the value will be a template
string bearer space. And here we do dollar
133:27 - sign curly braces res dot data dot token.
And we need to do the same for login actually.
133:28 - Let's copy this one line and go to login.
And here when we get a response, we do the
133:29 - same. Alright, so let's go back to sign up.
Okay, so we set the state to load loading
133:30 - to false we push to the homepage, everything
is the same, we get classes. And here the
133:31 - title will be sign up.
133:32 - Excuse me. Here the first text field is the
same as the email the second one is the password
133:33 - is the same. And here we need two more text
fields. So let's copy this and paste it. The
133:34 - third one will have the ID of Confirm Password
we're not really using these IDs but it's
133:35 - if you want to use them to style or anything
you can or to do anything else. The name will
133:36 - be confirmed password like this and the type
will be password the same the label will be
133:37 - confirmed password like this. Class Name is
the same the error will be error dot Confirm
133:38 - Password. Same thing here and here. Starts
data Confirm Password and handle changes the
133:39 - same. The third one, the fourth one, rather
will be handled. The type is text, the name
133:40 - is handle the ID, the label is handle with
a capital H. And here the errors errors dot
133:41 - handle. So we can do Ctrl, D twice and right
handle the rest of the same. And here the
133:42 - button should say sign up. And here we should
say, already have an account on which should
133:43 - say login here. And this will redirect to
slash login. And this will be let's do control
133:44 - D here as well. So you can we can change both
of these and do sign up dot prop types equals
133:45 - classes is an object and is required. Alright,
I think this should be fun. So let's save
133:46 - all files. I've already got the server running
the dev server up and running. So if we go
133:47 - to our app, we go to sign up, we see this
phone call, we send we got our errors. And
133:48 - we actually if we actually like do new three,
et CIE email.com. And the password will be
133:49 - 123456. And we let's do a handle that exists,
it's going to check you will see that let's
133:50 - do a new three with sign up. Cool, so works,
redirects, everything is fine. These are just
133:51 - the requests that we send, and we're not valid.
So that's fine, we go to application for local
133:52 - local storage, we find that our token is now
stored. Alright, that's cool. One thing though,
133:53 - if we refresh, actually not not for refresh,
if we go to the login now or the signup, it
133:54 - still lets us through, even though we're logged
in. So let's let's implement something that
133:55 - prevents this behavior. So let's go to here
in app j, s, actually, let's move all of this
133:56 - because I don't want to scroll this much here.
Let's move all of that object. And let's create.
133:57 - Let's create a folder here called util for
utility. And let's create a file in there
133:58 - called theme dot j s. And inside of here,
we'll say export default. And we just export
133:59 - this, this theme. So this object, let's save.
And here, let's bring it in, let's say import
134:00 - theme, or there is a theme. So let's say theme
file from go back one, we're on the same level
134:01 - slash utils. Slash theme, since it's the default
export, we can name it anything and here we
134:02 - just pass it to the Create Mui theme, and
the behavior should still stay the same. And
134:03 - here, what we want to do is that once this
code that's here executes one once the application
134:04 - is started. So what we want to do, we want
to get to the token. So let's do const token
134:05 - equals we can do local storage dot get item.
For actually we could just local storage is
134:06 - an object, we could just access this property,
so local storage.fb ID token. So we get this
134:07 - property. And we do if token. So if we don't
have a token, this will be undefined. So this
134:08 - condition would be false. So here, what we
do is, if we have a token, what we want to
134:09 - do is we want to get this token decoded. And
inside of the decoded token, we have an expiry
134:10 - date. And actually to decode the token, we
need to install a library. Let's do npm install
134:11 - dash dash save j wt dash decode library that
decodes JSON Web tokens. I know this is a
134:12 - Firebase ID token. But
134:13 - essentially, it's a still a JSON web token.
So let's bring that and let's do import j,
134:14 - wt decode like this camel case, from J WT.
Well, you can name it anything but just don't.
134:15 - Whatever you name it here, you name it, where
you use it just to avoid any errors. So here,
134:16 - let's do const decoded, token equals j, wt
decode. And we pass it our token. And now
134:17 - this will have a property called ESP. And
if you were to go to the dev tools to the
134:18 - console, you'll see we have this token. Actually,
we can't decode it here. But let's do console
134:19 - dot log decoded token. And here, it will find
the token it will console log this decoded
134:20 - token and it's got this ESP value whereas
it is right here. So this is a time value.
134:21 - That's like a time from epoch. It's gold.
So if you new date, and you pass it this.
134:22 - Actually this is in second, so we need to
pass it this times 1000, you get exactly when
134:23 - this token is going to expire. Alright, so
what we need to do now is we need to compare
134:24 - it with, with now actually, so as the if decoded
the code ID token dot x p times 1000 is less
134:25 - than date dot now as a function, that means
it's actually expired. So we need to redirect
134:26 - to the homepage or to the login page. So we
do window dot location, dot h ref equals slash
134:27 - login. And actually, let's do a, let's do
let us do a property a global variable called
134:28 - authenticated, and it has no value initially.
So here if it's expired, we say authenticated
134:29 - equals false. Now else if it's not expired,
authenticated, equals true. And now here,
134:30 - for our routes for the login and signup, we
want to do something where we check that if
134:31 - we're for authenticated, we redirect to the
home page. So here, let's actually instead
134:32 - of this route, let's control D on this type
of route. Let's create this component. Let's
134:33 - bring it in and then create it. So let's do
import auth. Route. And you'll see what this
134:34 - author does in a minute. Components slash,
actually, this will be in util. utils, slash
134:35 - auth. Route. And then utils, let's create
an Krishna we put it in neutral or let's put
134:36 - it in utility utility. And we're not going
to use it, it's not a markup component. So
134:37 - orthros.js. And here, let's do it's going
to be a functional components. So RFC tab,
134:38 - I'm going to change the syntax to const. Off
route equals props, and then gives us the
134:39 - following. And let's do export default, off
route. Actually, let me destructor straightaway
134:40 - what we need from it. So we're going to pass
it a component. So from the component, I'm
134:41 - going to get the component with capital C
naught, capital C, which is going to hold
134:42 - the component that we passed it. And here
we're going to get authenticated, the property
134:43 - authenticated. And we're going to spread the
rest of the properties. So if we add anything,
134:44 - it's going to be added here. So here what
we return, actually, we can change this syntax
134:45 - to just parentheses so it straight away return
something. And here we need the route from
134:46 - react router DOM.
134:47 - And re direct react router DOM. Riley, close
that. And here we do route. And we spread
134:48 - the props that the rest props. So rest, and
here, we're going to trigger a render method.
134:49 - And so take the props.
134:50 - And it's going to check for authenticated.
So if authenticated equals true equals true.
134:51 - Then we run a redirect redirect. And this
is so forth indicated, we redirect to slash,
134:52 - which is the home and we close this, else,
we just give that component which is going
134:53 - to be either the login route or the signup
route. Now props, let's spread the spread
134:54 - the props here, I mean, not arrest. Alright,
this should be fine. We need to close the
134:55 - route toggle or route component and let's
save. Alright, so one more thing though. Here,
134:56 - we actually pass it authenticated. So click
here and hold Alt and click here and do authenticated
134:57 - equals authenticated. Alright, let's save
this. Let's go to our app. Let's make sure
134:58 - we have a token and it's not expired. So if
we go to login, cool, it redirects us back
134:59 - to the homepage. And if we actually if we
delete the token, now, it's not going to redirect
135:00 - us to the homepage. Because this doesn't execute
again, only executes once the app runs. But
135:01 - when we implement Redux later, it's going
to fix it. So now we Don't have a token, if
135:02 - I refresh the entire page, if I go to login
and sign up there, we're gonna work fine.
135:03 - But yeah, once we implement Redux, and we're
going to have like a global state and is going
135:04 - to update each time we do something, it's
going to this we're going to behave much better.
135:05 - As our application grows bigger, and we will
have more components and all these components,
135:06 - or most of these components will need to have
access to the data we have on to our user,
135:07 - it would be better that we would implement
a solution that manages a global state for
135:08 - our application. There are a lot of situations
where something called context API, which
135:09 - comes shipped with react is actually better
than Redux. You can look into that if you
135:10 - want. But for this application, it's better
to use Redux. And to use Redux, we're going
135:11 - to need to install a couple of packages. And
if you don't know what Redux is about, I will
135:12 - post a link to this really cool article that
I think you should read to understand what
135:13 - Redux is and why we use it. It will introduce
you to concepts like a prop drilling like
135:14 - and funnily enough, it uses an example that's
like what we're making right now, which is
135:15 - the social media platform that's similar to
Twitter. So if you look here, you will see
135:16 - that it becomes a problem. For example, in
here, if we wanted to have the user in this
135:17 - avatar component, we have, we'd have to pass
it from the app to this avatar, and then down
135:18 - or down this chain of or rather hierarchy
of components. So it becomes really inefficient,
135:19 - and it becomes really ugly code. So what we
need to do instead would have something set
135:20 - up like this, where we would have a store,
and whatever component no matter how deep
135:21 - or down in the tree it is, it can directly
talk to the store, fetch data or send actions
135:22 - that will tell our reducers to mutate our,
our global state and change it so that all
135:23 - the other components will be aware of these
changes that are happening. Now there's a
135:24 - really cool
135:25 - diagram that I want to show you in this article,
which I will link a description, link in the
135:26 - description as well. But funnily enough, I
don't want you to read this article. Because
135:27 - I don't know this guy I feel like is trying
to use too many like buzzwords and fancy language
135:28 - and try referencing other libraries that maybe
you're not even aware, like aware of. But
135:29 - I just wanted to focus on this diagram, because
it kind of encapsulates what react is, essentially,
135:30 - we have events triggered from our UI, or user
interface, like someone clicking a button
135:31 - submitting a form, whatever any of these actions
could trigger an event, and then an event
135:32 - will fire up an action. And this action will
dispatch an action with a type and sometimes
135:33 - with a payload as well. And then that type
gets received by the reducer. And the reducer
135:34 - will then decide depending on the type of
received, what to do, and how to mutate our
135:35 - state. And then once the state has changed,
all of our obligation is aware of the state.
135:36 - Now, this might not make sense right now to
you. But once we get into the code, trust
135:37 - me, it will make sense. One thing you need
to install if you don't have it already, if
135:38 - you're using I'm assuming you're using Chrome
if you're not, then do or use Firefox is cool
135:39 - as well. But I don't know if they have Redux
dev tools on Firefox, you can install Redux
135:40 - dev tools as a Chrome extension, which will
help drastically actually this is one of the
135:41 - reasons why I prefer always prefer Redux over
context API, because of this dev tool makes,
135:42 - makes our lives much more convenient. Alright,
enough of the chitchat and enough of the theory,
135:43 - let's actually start to implement Redux.
135:44 - Okay, so let's go to our app. I'm going to
open up a new terminal, and we're going to
135:45 - install three packages. So NPM, install dash
dash safe. First is Redux, which is a standalone
135:46 - JavaScript thing. Second is react Redux. And
third is Redux thunk. So react Redux is the
135:47 - library that kind of is the middle middleman
between Redux and react. And Redux thunk is
135:48 - a piece of middleware that gives us access
to something called dispatch, which allows
135:49 - us to run asynchronous code in in our Redux
actions, is something that you shouldn't worry
135:50 - yourself too much about right now, to be honest.
Alright, so in the source, I'm going to create
135:51 - a folder called Redux. I like to keep everything
related to Redux inside one folder, and here
135:52 - we're going to create two folders reducers
and actions. I'm going to create two files,
135:53 - one called store dot j s, and one called types
dot j s. Alright, so here in the store. Our
135:54 - store is basically what contains The container
of this state. So here we're gonna bring in
135:55 - a couple of things from Redux. So let's do
like this from Redux. And here we need create
135:56 - store to create our store, we need combine
reducers, which is something when we because
135:57 - we can have all our reduced, you know, reducers
in one file, but it doesn't look good. So
135:58 - we we split them into a couple of files, and
we will use this to combine them, we'll have
135:59 - apply middleware, which does exactly that.
And we will have something called compose.
136:00 - And I'll tell you in a second, why we need
that. So we need to bring in funk, which is
136:01 - a piece of middleware or, or store enhancers,
well, you can call them that as well. And
136:02 - here, we need to initialize an issue, an initial
state,
136:03 - which is going to be just an empty object.
And here, we're going to have an array of
136:04 - middleware,
136:05 - just going to have thunk, actually, you can
use other middleware, you can create your
136:06 - own depending on what use case you have. And
here, we're going to have our reducers, which
136:07 - we actually create, I'm going to create three
files, but I'm not going to write anything
136:08 - in them right now. Data reducer dot j s, which
is going to handle every all the actions related
136:09 - to our data, going to have root user reducer
dot j, s. And we're going to have UI reducer
136:10 - dot j s.
136:11 - And here in the actions, well, might as well
create them now. So data actions, dot j, s.
136:12 - And what's the other one user actions? dot
j s, and we're not going to have a UI actions
136:13 - because we're going to fire those from both
the user and the data actions. So here we
136:14 - do because reducers Actually, we need to import
them import first as user reducer, in no particular
136:15 - order, calls input. What am I doing from this
is not as five from slash reducers slash user
136:16 - reducer, I'm just gonna copy this, paste it
two more times. And here, I'm going to say
136:17 - Ctrl, D, and do data reducer. And here, I'm
going to do UI, reducer, whoops, reducer.
136:18 - And here, we're going to combine them. So
reducers equals, combine reducers. And if
136:19 - this code is a bit confusing to you don't
don't make it confusing, because this is just
136:20 - one thing you're going to write once, and
then you're going to do the actual code inside
136:21 - the actions themselves. Alright, here, this
is our actual state. And here, we get to name
136:22 - our objects inside the state. And for the
user data, I'm just going to name it user
136:23 - and give it the user reducer. So everything
that comes from the user reducer will be stored
136:24 - inside of this user object. It's not Yeah,
inside the user object inside our state, we're
136:25 - going to have data. And this is going to be
from data reducer. And we're going to have
136:26 - UI from UI reducer. Now we can create our
store. So we do const. Store equals create
136:27 - store. And here, we pass it through things
are reducers. And the second is our initial
136:28 - state. And the third will be usually it would
be just the middleware. But if we were to
136:29 - go to our application, and we do have 12.
And we go to the Redux extension. I don't
136:30 - know why it's saying that we have a store,
we don't actually have a store. But to have
136:31 - like, let's look at the Redux Dev Tools set
up because there's this, this long string
136:32 - that that we need to put here, this one right
here. So window dot Redux dev tool extension,
136:33 - we need to apply it as a store reducer. So
that we can, so that we can see the data shown
136:34 - on that on that. Extension, so apply middleware.
And here we spread our array of middleware,
136:35 - so dot dot, dot middleware, and then the second
argument to compose we actually paste that
136:36 - the string we copied from From the React Dev
Tools GitHub page, so we save and it formats.
136:37 - Let me close these console windows. Yes. Okay,
so this is our store, we actually need to
136:38 - export it. So let's do export default store.
So this is basically what contains our application
136:39 - state. Now we need to actually give it to
our application. So we can do this by going
136:40 - to App dot j, s. And here we're going to bring
two things.
136:41 - Let's say Redux. Here, we need to bring something
called provider from react, Redux. And what
136:42 - do we need, we need our store. So store from
136:43 - one level, or on the same level rather, Redux
slash store? Yeah, we just need these two
136:44 - things. And we need to wrap all of our application
inside of this provider. And it doesn't matter,
136:45 - it can wrap the movie provider or the movie
provider can wrap it, it doesn't matter. They
136:46 - don't interact with each other. So we can
just put this provider and it takes a store,
136:47 - which is going to be our store, we close this.
Now let's cut everything and put it inside
136:48 - of this provider. So now, as you can see,
everything that's inside of this provider
136:49 - will have access to our store, which is our
state. And by the way, we can remove this
136:50 - div up, because it's not stealing anything.
It's not doing anything, actually, that's
136:51 - safe. Okay, right now, we just introduced
Redux, but we don't have anything. And if
136:52 - we would go to our application, and refresh,
my dev server still running. If we go to Redux
136:53 - here in our state, actually, we haven't initialized
that. Okay, so now what we need to do is that
136:54 - we need to go to our data actions. Rather
user actions, let me close everything, user
136:55 - actions, because what we're going to start
to do is we're going to start to move this
136:56 - code or this login code from the login component
and the same from the signup component, and
136:57 - move them into the user actions. So here in
user actions, I'm going to actually Before
136:58 - that, we need to create some types. Now, you
don't have to create types, these types can
136:59 - be just strings, but the fact that we create
them and put them into variables, it makes
137:00 - it impossible for us to make a mistake, because
we can actually pass because if we make a
137:01 - mistake, name and a variable, it's not going
to run so that it makes it easier to spot
137:02 - our mistakes. So let's do export const. And
here, I'm gonna create a couple of types.
137:03 - First one will be set, authenticated. Thumb
to cated, which equals actually exactly that,
137:04 - but as a string. You also need oops, a type
for set. And it's, it's just a convention
137:05 - that we named them in all caps, set unauthenticated,
which is going to be the same as a string.
137:06 - So paste it here. And we need also a set user
type called set user.
137:07 - What else we need a tie. Now we're not going
to use all of them in this video, but I just
137:08 - know that we're going to need them later.
We need a loading
137:09 - user. She's gonna be just that. We actually
let's, let's put a comment here, say user
137:10 - use reducer types. And here we say UI reducer
types. And we're also going to have data reduce
137:11 - types. And here for the UI reducer, we're
gonna need export const set errors. I'm gonna
137:12 - just copy this. We're gonna need what else
loading Ui Ui like this UI clear errors. I
137:13 - think this is it for now, if we need any more
types, we're gonna create them. So let's go
137:14 - to user actions. And let's bring in as bringing
these types that we need for user. So set
137:15 - user, we need set errors. We need clear errors,
and we need loading UI.
137:16 - Ui
137:17 - from go back one level and go to types. And
here, we're gonna actually just move this
137:18 - code that's inside of the handle Submit. So
the login code, so let's copy, actually, from
137:19 - here, this axios call, and let's paste it
into, let's call this action, export const
137:20 - login user. And it will take user user data.
And here, it's gonna, we're gonna as well
137:21 - get this batch. Because here we need to access,
we need to use the special because we have
137:22 - some asynchronous code. And so we paste that
code in. But actually, here, we need to set
137:23 - the loading to true. Actually, we can remove
the loading code from login, and we can even
137:24 - remove it from the state. So we can set the
login from the action itself. So here, what
137:25 - we need to do is we need to say this batch.
And this is where we actually send an action.
137:26 - So this action is going to have a type. And
this type will be loading UI, you can start
137:27 - to see how this works. We dispatch a type.
And then we will catch the type from the reducer.
137:28 - So let's actually just check if this code
is sound. So we log in, and then when we get
137:29 - the data back, okay, so here, when we get
the data back, we want to, we want to actually
137:30 - fetch the user, I'm going to create a new
account, I'm going to create a new action
137:31 - that we for some functionality that we didn't
even have in the last video, and it's going
137:32 - to call this get user data. And it's not going
to have any, it's not going to take any argument
137:33 - because it's going to use the token that we
got back. And it's going to use this batch.
137:34 - Actually, before I do that, now we get the
token. So if we get here, that means we have
137:35 - the token in res dot data dot token. So what
we need to do, we not only need to set it
137:36 - in the local storage, but now each request
that we need to send to a protected route,
137:37 - we need to add the authorization header. But
it wouldn't be efficient for us to each time
137:38 - we send the request, we add we add it there,
we can take advantage of this axios axios,
137:39 - default headers thing. And we can do axios
dot default, dot headers, dot common. And
137:40 - by the way, this is in axios GitHub documentation
page. And here, the header will be authorization.
137:41 - and the value of it will be the actual token
that we got plus bearer so we can do bearer.
137:42 - I should put this in a variable. So we can
say const, FB ID token equals template, string
137:43 - bearer and space and then we do res dot data
dot token. So now we can give this variable
137:44 - here. And we can as well assign it here to
the headers. So now when we do this, each
137:45 - time we send a request through axios, it's
gonna have a header, an authorization header
137:46 - with this value even to not unprotected routes,
which is not a problem at all. So here in
137:47 - get user data, we can just say axios dot get.
And if you remember, we can send a get request
137:48 - to slash user, which will get us the user
data. So here we do dot then recce. So if
137:49 - we get a result success result, we need to
dispatch an action. So here we dispatch an
137:50 - action of type. And this type will be set
user. And this action actually takes a payload.
137:51 - And a payload is basically some data that
we send to our reducer, and then the reducer
137:52 - does something with it. And the data here
would be just response to data which we get
137:53 - back which is the user data. And of course,
we need to handle in case there's an error.
137:54 - Catch. And if we get an error here, we just
console logger console dot log error. All
137:55 - right. So We get the user data when we log
in. And here what we need to do when we get
137:56 - the data. So there is no state because we're
not in the component. And we don't log it.
137:57 - So here, what we need to do is we need to
dispatch, the get user action, we can actually
137:58 - just do this after all of this, we can just
actually just do this batch. And we can dispatch
137:59 - this function that's right here. So we say,
Get user data.
138:00 - And it's going to call this and thing is Oh,
actually, we need to redirect. So what we
138:01 - need to do, actually, we need to pass. So
here, when actually, we need to pass the history
138:02 - from this component to the action, and then
the action will use it. So we can put it as
138:03 - a second parameter here, let's call it history.
And here, we just do history dot push, and
138:04 - it will actually work it will read the redirect
even from from the action. And so here, like
138:05 - we get user errors, and we need to dispatch
another another type. Actually, we were not
138:06 - handling these types, yet, you will see in
a moment what these types do. So here we need
138:07 - to dispatch another type. Another action with
the type, clear error, clear errors, just
138:08 - in case there is any errors in our form. And
then we actually redirect. And if there is
138:09 - any problem, we need to not set date, we need
to dispatch an action with the type set errors.
138:10 - And with a payload of error, dot response
dot data very similar to what we have inside
138:11 - the component. But this will actually do this
to the global state. Now let's let's go to
138:12 - the reducers and handle these types. So let's
go to the the user reducer. So here, we're
138:13 - going to need the actions, I mean, the types
that we have as well. So let's do a springing
138:14 - set, we can actually just copy not from login
from the actions, we can just copy these types
138:15 - from that we've run, Oh, actually, I forgot
something, we need to bring in axios, because
138:16 - we're using it inside the actions. So from
axios. And here, we copy this, we go to use
138:17 - the reducer we paste them. And here is where
we need to give an initial state an initial
138:18 - state to our This is not the global state.
But this is remember this is what's stored
138:19 - inside of this user. So this real reuse the
reducer is actually this state, of course,
138:20 - it's going to change it's not going to stay
the initial state. So we're going to have
138:21 - a an authenticated Boolean, which is going
to be false by default, we're going to have
138:22 - credentials. If you remember, if you've seen
our API, you know what these are, we're gonna
138:23 - have a likes array. And we're gonna have a
notifications array. And initially, everything
138:24 - will be empty. And here we will export default
function, and this function will take a state.
138:25 - And here we give initial state as the initial
like the default value of the state. And the
138:26 - second parameter is going to be the action
that we receive. So here, we're going to have
138:27 - a switch. So depending on the action, we're
gonna do something actually not depending
138:28 - on the action type, we're gonna do something.
So here, this is where we catch all types.
138:29 - So cat case, first one will be set authenticated.
And here, we do remember this word switch.
138:30 - So we do have a colon here, and we we here,
if we get the type set authenticated, this
138:31 - is a simple type that I'm going to actually
call from the app dot j s, this just returns
138:32 - the state. And each time we return the state,
we actually spread the state that we already
138:33 - have, and then we change a couple of things
in it. Here, what we changed is the authenticated,
138:34 - we make it true. And let's handle the set
unauthenticated state. We're not using actually
138:35 - these two types in this video, but we will
set them for future use. And here, we just,
138:36 - if we set on authenticated, this is going
to be used when we try to log when we log
138:37 - out. So here we just actually returned the
initial state which has authenticated a false
138:38 - on a no data. Now here we can handle the set
user type, which we just dispatched from the
138:39 - user actions. And here we simply return
138:40 - authenticated, we set it to true because we
got the user data. And we need to spread action
138:41 - dot payload. Because remember from our API,
when we send our token to slash users, and
138:42 - we get the data, we actually get something
like this with credentials and lights and
138:43 - notifications. So if we just spread it like
this, it's gonna bind the credentials to credentials,
138:44 - likes the likes and notifications to notifications.
And of course, this is a switch. So we need
138:45 - the default case. So default, we just return
return to state that we have right now, which
138:46 - is this. Alright, so let's save this. And
let's go to our login. And here in the login,
138:47 - now we need to connect to this component to
to the Upstate. So here we bring in two things,
138:48 - let's say here, Redux, Redux stuff. And here
we bring in something called Connect, which
138:49 - does that. And this is from react Redux. And
we need to bring in the action, the login
138:50 - user action. So here we do import login user
138:51 - from.
138:52 - So we go back actually one level to Redux
slash actions slash user actions. So here,
138:53 - instead of doing what we did earlier, we actually
just do this. Actually, we need to bind it
138:54 - first. But let's just type this, this dot
props, oops, this dot props dot login user.
138:55 - And remember, we pass it the user data, which
is user data right here. And we pass it this
138:56 - dot, props dot history. so that it can use
it to redirect us on success. And here are
138:57 - the bottom, we need to actually use Connect,
which is another higher order. component.
138:58 - Let's cut this and let's do connect. And let's
leave this empty for now. And the second one
138:59 - will be our width style styles login. And
here it it takes. It takes three things, but
139:00 - we have those three things we need to one
is called map state to props. We'll create
139:01 - these in a second. And one is called map actions,
to props. And the map state to props whose
139:02 - will be const. Map state to props, it's going
to be a function that takes our global state,
139:03 - and returns. So now it takes global state
and then from the global state, we take what
139:04 - we need, basically. So right now what we have
is we have user data and UI. And for the login
139:05 - component, we don't need data because we don't
need to show any screens in the login thing.
139:06 - So it makes sense that we only get the user
and the UI. So let's actually do that. So
139:07 - let's get user. And we'll be State DOT user.
And UI will be state.ui. Alright, UI like
139:08 - this. And here, we need to say as well const,
map actions, to props. And this will, we're
139:09 - telling which actions we're actually going
to use. And in this case, we just need logged
139:10 - in user. So we passed them here. And actually,
this will be props. All of these will be props.
139:11 - So let's add them to our prop types. So here
we say, login user is a prop types. It's actually
139:12 - a function. So prop types.func.is, required.
And we have user which is an object, I'm just
139:13 - going to copy this. And then we have UI, which
is one object, and I'm going to paste this.
139:14 - So yeah. Alright, so now the user and the
UI are actually brought in from the global
139:15 - state and mapped into our component props.
So these will be in our props right now. And
139:16 - so is going to be the login user. This is
why we can actually here do this dot props
139:17 - dot login user. And here, what we need to
do is the loading now we no longer have it
139:18 - in our local state. We have it in the props,
so we can get it from the props. But of course,
139:19 - we can't just get it like that. It's inside
the UI. So we do UI and then colon, and we
139:20 - get it from inside the UI. And I think this
is it for here. One thing we're not doing
139:21 - is we're not actually here when we get the
errors, we're not handling that. So user actions.
139:22 - Here. When we do set errors, we need to handle
that from the UI reducer. So in UI reducer,
139:23 - we need to Bring in set arrows and clear errors
and loading UI actually as well. Loading underscore
139:24 - UI from go back one level and then types.
And here we need as well as an initial state
139:25 - for this. And our UI reducer will hold the
loading, which is initially false, and an
139:26 - errors object, which is not initially. And
here we do the same thing, export default
139:27 - function, which will take a state, the initial
state, and we'll take an action as well. And
139:28 - here we do a switch. And here depends on action
type, types type. Here, we have a list of
139:29 - default list or default, which is returned
state. And here we can do case, what's the
139:30 - first ones that errors?
139:31 - So if we get any errors, we actually, we just
spread, so we just like spread the state.
139:32 - And which, what do we do actually? Actually,
yeah, we said the loading to false because
139:33 - we finished loading, we actually got some
errors, and we set errors to our action dot
139:34 - payload. And if we get the clear errors, case,
we do return state. And we said the loading
139:35 - false, and we set errors back to No. We have
loading you actually as well. So let's do
139:36 - case. Loading. UI.
139:37 - Oops. Here, we
139:38 - just return Oh my god. Return state. And we
just set the loading to true. Alright, is
139:39 - that everything, get set errors? Clear errors,
loading UI. Okay, this look looks good for
139:40 - now. I think this is everything. Let's check
if we have any errors. We don't actually stop
139:41 - this and run it again.
139:42 - Hmm, no errors. That's strange. Okay, so let's
open up the console. I mean, put them side
139:43 - by side. Do we have a token? No, we don't.
Okay. All right. Oops. All right. That's what
139:44 - our first error login user is not a function.
139:45 - Is it not? Because I didn't save this file.
Okay. Okay, let's try to login. So user at
139:46 - email, com
139:47 - 123456. Login. Oh, actually login successfully.
And we got the token in the storage. Let me
139:48 - delete the token. Actually, let's look at
the Redux state. So state. All right, cool.
139:49 - We got our, like user details mapped into
our into our user object and the state. Oops,
139:50 - let's go back to row Yeah. All right. So we
got our user we got authenticated equals true.
139:51 - Let me actually reload to see the initial
state. The initial state is what we had it
139:52 - and authenticate to this false. And if let
me actually try wrong credentials
139:53 - are interesting. We get an error here, but
we don't get it here. Hmm, I get errors here.
139:54 - But what they don't show up.
139:55 - Okay, okay. It's because these props don't
come straight away. Actually, we need to do
139:56 - component component will receive props and
this takes Next props. And here what we need
139:57 - to do simply is this dot set state. Yeah,
we need to get the errors and then set them
139:58 - to our local errors. So set state and we do
errors equal next props.ui that errors. All
139:59 - right, actually, we need, we need to actually
put a check, because we will always be receiving
140:00 - props. And this will be inefficient, we need
to do if next props.ui got errors. So if we
140:01 - get this, then we actually set the errors
to the errors object. This should fix it.
140:02 - Alright, let's look at our state, we have
no errors and, and there we go, we got our
140:03 - errors. And they're shown on our login form.
And if I fix just this, say, user email.com,
140:04 - or hit send, I need the password. If I have
a wrong password, code, get the general one.
140:05 - And then if I have the right password, we
get redirected. Sweet. Let's go to the signup
140:06 - component. Where is right here. Okay, we need
to actually first let's create the action.
140:07 - So let's go to user actions. And here let's
create an action that's like login user, but
140:08 - it's the sign up, it's actually going to be
very similar. So we can just copy this, and
140:09 - then paste it here. Instead of login user,
this will be sign up user, it's going to take
140:10 - the same stuff here, let's call this new,
or this way, let's Ctrl D, and then call this
140:11 - new user data. Just for readability. With
dispatch, login, loading user loading UI,
140:12 - that's fine. We'll change this to slash signup,
we send the request to slash signup. And the
140:13 - same thing happens here we said the token
will get the user data and we clear the errors,
140:14 - we push the home page. And we set the errors
if any cool. But one thing though this code
140:15 - is repeating itself. So let's let's make it
into a helper function. So let's cut this.
140:16 - Let's make a function here. Let's call it
set authorization header. It will take the
140:17 - token. And here we will have that same code.
But instead of restaurant data token, it will
140:18 - be just token which is this function argument.
So we can just actually call it from here.
140:19 - So here as well. So here we just do SATA theorisation
header when we pass it res dot data dot token.
140:20 - And let's copy this and instead of all this
in the login, we paste it. So set authorization
140:21 - header, read set token, header, data dot token.
Cool. Let's create actually another action
140:22 - for for logging out. So const, export const
log out user. And this won't take anything
140:23 - and think you won't even take this bachelor
will think that Well, alright. Yeah, well.
140:24 - Alright, so here, what we need to do is we
just need to remove the token from the storage.
140:25 - So we do local storage, the rim remove item,
and we just pass it the name of the item which
140:26 - is as a string, of course, FB ID token. And,
and here what we need to do, we need to remove
140:27 - the header, the authorization header from
the defaults of axios. So we can actually
140:28 - just delete the entry by doing delete like
this axios dot headers, not actually dot default,
140:29 - defaults, dot headers, common and the header
is authorization.
140:30 - And here we need to dispatch a type an action
rather and of type set on authenticated our
140:31 - product, we brought the end and we have it
in types. So this will clear out our user
140:32 - state if you remember, if we go to use a reducer
it will set unauthenticated will return the
140:33 - initial state and it will it will set us back
to being not authenticated and having no credentials
140:34 - and nothing. Let's remove these unused imports
right now so I can get rid of the warning.
140:35 - Let's save this. And this is well let's go
to sign up and actually Start using that.
140:36 - So here we're gonna bring in. So we're gonna
bring in oops import, connect, let's say Redux
140:37 - here Redux Redux stuff. And here is to connect
from not equal from react Redux. And we need
140:38 - to bring in the sign the sign up user from
Redux, go back one level, go to Redux slash
140:39 - actions slash user actions. Alright, right.
And let's go to the bottom and actually connect
140:40 - the components. So here we do export default
Connect. And we pass a map state, to props.
140:41 - And a map state. Now, map actions, to props.
Close this, and then we open another parenthesis,
140:42 - and we close another set of parentheses. And
here, let's say const. Map state, to props.
140:43 - equals equals, it takes the state and it returns.
So we need the user. So user equals or colon
140:44 - State DOT user. And we need the UI. So state
state.ui. Okay, so yeah, we need the map.
140:45 - Actually, we, we can just pass it like this,
because we only have one action. So it's still
140:46 - clean to type something like this. So log
out user, without actually putting it into
140:47 - a variable and putting it there. Let's add
them to the prop types. So we have user is
140:48 - a prop type stock, almost typed user object
that is required. And we have UI, shares,
140:49 - prop types, the object that is required. And
what else we have the function log out user
140:50 - is a prop types.funk.is required. All right,
and we brought the function. So we need to
140:51 - use it here when we submit. So we can cut
all of this. Actually, we already have it
140:52 - in the other code. So we can just here we
just say this dot props. Remember, it's in
140:53 - the props already logged out user and we pass
the new user data or just call it user data
140:54 - here, let's change this to a new user. They
that doesn't make that big of a difference,
140:55 - but it's more readable. So this dot props
dot history, we pass it so that we can redirect.
140:56 - And yeah, I think actually, now we need to
set the errors. Let's just copy this from
140:57 - login component will receive props. But here,
and let's remove the loading from the state,
140:58 - we keep the errors because we can set them
from here. And here we from the props we get
140:59 - from the props from the UI, we get loading,
removed the loading from the state, and this
141:00 - should be fine. Let's save. Let's see if we
get any errors. We do. logout user is not
141:01 - defined in signup. Oh, not log out, sign up.
Why did I put log on? So actually sign up.
141:02 - Okay. And here's what sign up. Not sign up
this dot props dot sign up. Alright, so that
141:03 - should be fine. Forgot to sign up. Actually,
we're logged in. So let's go to application.
141:04 - Let's remove the token. Let's go to sign up.
Actually, we need to fix this because it needs
141:05 - to know. Okay, we got to sign up. We'll fix
the author out in a bit. Right. If we send
141:06 - a call, we get the errors.
141:07 - And let's try to sign up a new account new
six@gmail.com 123456123456 handle the new
141:08 - six cent sign up. Cool. We got redirected.
We got our token. Everything works. All right.
141:09 - What else? Let's go to the app. So here the
way I want to check is that I want check if
141:10 - the token is in the storage, but this authenticated.
Obviously it's really bad practice to have
141:11 - global variables like this. So we need to
call the action from, from, from our user
141:12 - actions and set ourselves to to be authenticated
and then edit the state accordingly. So here
141:13 - at the top, here under Redux we're gonna bring
in, we're gonna bring in two types, because
141:14 - we can actually call them from here as well.
So we're going to bring in set authenticated,
141:15 - we're going to bring in set errors, or do
we I don't think we need to actually know.
141:16 - So just set authenticated from go back one
that actually we don't get on the same level
141:17 - Redux slash types. And we bring in the logout
user, because in case the token is expired,
141:18 - we just log out from here logout user and
get user data, how we created get user data
141:19 - we have yeah. Oh, yeah, of course, we have
from Redux slash actions slash user actions.
141:20 - And here when we compare the token. So if
it's expired, we just do, we can actually
141:21 - do store dispatch. And here what we need to
dispatch, we need to dispatch the action log
141:22 - out user. And that will delete the token and
log us out. Let's get rid of this authenticated
141:23 - variable. And we are as well like set the
href to slash login, so we get redirected.
141:24 - And let's remove this authenticated equals
true. But instead, let's do store dot dispatch.
141:25 - And here, we dispatch an action with a type
set authenticated, which just sets authenticated
141:26 - to true. And then when we go to the homepage,
we actually get the data or when we call get
141:27 - user data, we get the data. So let's do store
dot dispatch. So after we dispatch that we
141:28 - are authenticated with dispatch, get user
data. And actually, actually for this to work,
141:29 - because when we set axios default headers,
when we actually refresh the page, those headers,
141:30 - like those defaults are gone, and axios is
re initiated again, we need to again do axios
141:31 - dot default, or we need to bring in axios.
And VS code did me the courtesy of doing it
141:32 - itself, but it did this capital thing. axios,
the default dot headers, dot common. And here
141:33 - we say authorization. And it's equal to the
token that we have up here. Not rochen token.
141:34 - All right, and then we get the user data,
this should work. But because we got rid of
141:35 - the authenticated thing, we can't use it here.
So let's delete that. And but I think our
141:36 - throat will complain because we're let's fix
authorizers Well, we might as well, since
141:37 - we're here. So let's bring in Connect, we
need to connect to this component as well
141:38 - to our, to our state. So it's bringing connect
from react Redux. And now actually, that's
141:39 - just connect. And let's explore the fault
Connect. Map state, to props. And we don't
141:40 - need any actions. So we can admit that the
argument and here we do const map state to
141:41 - props equals, it takes in the state. And here
Oh, actually, this function returns an object.
141:42 - and here we can actually even get a certain
key within an object. So we can say authenticated,
141:43 - and then do State DOT user dot authenticated.
And you will get just that one key. One property.
141:44 - And here, it's it's going to be in the props.
So nothing changes here. So we get authenticated
141:45 - from the props. And then we get here, and
we redirect if needed. Let's do actually prop
141:46 - types as well, because, you know, you never
know what's going to happen, because they're
141:47 - prop types. And it's always good to practice
these, these best practices so that you get
141:48 - used to them. Alright, so prop types. And
here we say, what is the author route of Route
141:49 - dot prop types, equals, and what do we have?
We have just user so prop types dot object
141:50 - Thought is required. Actually, this is a capital
P. and everything should be fine. Let's save
141:51 - all files. Sign up. axios is defined Oh, actually,
we don't need axios anymore here. Because
141:52 - we're doing that from the user actions. We
have axios in the login as well, let's get
141:53 - rid of that. All right, we will use these.
So let's just ignore that warning for now.
141:54 - Let's go here. Let's see we have a token.
And if we click here, it redirects us. And
141:55 - if we delete the token, now click here. Hmm.
Somehow that arthralgias, not working. we
141:56 - deleted the token. But we're still we're still
logged in. Oh, because we need to actually,
141:57 - oh, this executes once the app is submitted,
actually, it's behaving as behaving Normally,
141:58 - I don't know what I was thinking. Because
that would be triggered. Actually, because
141:59 - a login would not be triggered by someone
deleting the token, it will be triggered by
142:00 - us deleting the token from the app, there
will be a login button and that login button,
142:01 - when you click it, it doesn't just delete
the token, it actually sets the state to unauthenticated.
142:02 - So yeah, no one will actually go and delete
the token like this. If they do, they will
142:03 - actually break our app, and we have no way
of fixing that. Alright, so this is our application
142:04 - right now. And right now we don't have a profile.
So let's actually create that let's create
142:05 - a section where we show the profile because
we if we go to dev tools to Redux, we actually
142:06 - are fetching the profile, we have all these
details, we just need to show them on the
142:07 - interface. Alright, so let's go to the homepage
is the homepage here. So here we have this
142:08 - text profile, and it's actually put a component
profile, which we haven't created yet. Let's
142:09 - import it. Import something that hasn't been
created yet. Because why not? Alright, let's
142:10 - go to components. Let's create a profile dot
j. s. And here it is. Do RC top whoops. Again,
142:11 - it didn't work. Come on. Yes, Third time's
the charm, I guess. All right, so let's remove
142:12 - the export. And here we're gonna need a couple
of things. Of course, we're gonna have prop
142:13 - types. So prop types. What is that prop types
from prop types. We're gonna need with styles.
142:14 - For
142:15 - material you wore slash core slash style slash,
with styles. We're gonna need some movie stuff.
142:16 - So we're gonna need the button. From material
UI slash core slash button. When I know we're
142:17 - going to need some icons actually need to
install the package for icons. So let's open
142:18 - up a new window and do an NPM, install dash
dash save to material, UI slash, slash icons.
142:19 - let's actually look at the documentation.
So basically, these are all the so we go to
142:20 - styles, icons, these are all the material,
Google Material Design icons, there are SVG
142:21 - icons. And the way you use them is just like
you import the icon with the name of it. So
142:22 - let's say delete. So import, add material,
UI slash icon, slash delete, and you use it
142:23 - as a react component. And if you would go
here to see the full list of the of the Google
142:24 - Material Design icons, you know, I said the
whole thing again, you can see all the icons
142:25 - and if you want to use one, basically, you
just camel case the name so for example, Play
142:26 - for Work will be not camel case basketball
case. So it would be like Play for Work, and
142:27 - you will get that icon. Alright, so let's
head back to our application. We're not going
142:28 - to use any icons right now. But here at the
start, actually, we need to first let's say
142:29 - with styles, styles, unwrapped the profile
as well. And then let's wrap the entire thing.
142:30 - And here that's connected, connect, which
we haven't brought in yet and brings the connect
142:31 - from HTTP to okay VS code. Perhaps the To
props. I don't think we need any actions for
142:32 - now. So here let's do, we bring Connect, not
actually from react Redux. And we need to
142:33 - create the map state the props. Takes the
state the usual, and it returns an object.
142:34 - And we only need to access the user so users
data user. And all we need to do the prop
142:35 - types. So let's do what is this profile. So
profile, prop type types. We have user some
142:36 - object, it's required. And we have classes
from a spouse. Almost typed classes. And this
142:37 - is a required call. Okay, so here at the start
of the render, let's get get classes. And
142:38 - let's get some details from our user. So from
user let's as well destructor, from this,
142:39 - actually, inside of us that we have credentials.
142:40 - And from that,
142:41 - we're going to need some stuff. This is some
nested destructuring. So we're going to need
142:42 - handle, we're going to need to create the
art image URL. What else? Oh, yeah, we need
142:43 - the details. So bio, and website and location.
Alright. So this is what this is after credentials.
142:44 - I confused myself a bit. Yeah, that's it,
we need the credentials. And we need the Well
142:45 - actually, actually, we need to create another
property I forgot about. So inside the user
142:46 - we're going to have. So here we put a comma,
we do loading, we're gonna have a loading
142:47 - for the user. Let's not forget to say this
equals this dot props and save. So formats,
142:48 - we're going to have actually a loading property.
So when the profile is loading, we can see
142:49 - a loading skeleton. So which is different
to the UI loading. So let's go to our user
142:50 - reducer. And here we need to bring from types
loading user. And here we need to initialize
142:51 - a property loading with false. And here, let's
add a case for that case, loading user. And
142:52 - all it does here, we just return the state.
And we do loading equals true. And here, when
142:53 - we set the profile, we actually stop the loading.
So we do loading equals false. In case it
142:54 - was true. So let's save this and let's go
to use the actions. Let's bring it in as well
142:55 - here. So from types loading user, oh, it's
already created, actually, it's already in
142:56 - the types. Okay, so loading user. And here,
when we try to get the data, that's before
142:57 - we try to get the data, we dispatch an action
with the type loading user. I think we're
142:58 - done with this part. Yeah, we're done with
this part. So let's go back to our save the
142:59 - home, let's close this. Let's close this,
let's not worry about this. Let's create concepts
143:00 - styles equals empty object for now. I noticed
I'm spending too much time writing CSS rules,
143:01 - which is not the main focus of this course,
on the series. So what I'm going to do for
143:02 - now, I'm just going to paste in like stars
for this profile, because there's quite a
143:03 - bunch of them, I don't want to I don't want
to waste time doing that. I'm gonna Of course,
143:04 - post the link to this, this object style subject.
And so you can copy it and paste it right
143:05 - now as we're doing this video. And then you
have everything styled. And you can go Of
143:06 - course through it and and you know, and understand
what's happening the way I wrote what I did.
143:07 - Okay, so here, we're going to actually create
one object and then return it. And then we're
143:08 - going to call it profile markup, because this
markup is going to be completely different
143:09 - depending on whether we're loading or whether
we're syndicated. So here we have, let's do
143:10 - let profile mark up. Now we're going to have
this is going to be a bit confusing. We're
143:11 - gonna have two ternary operators. So the first
one, let's say, if not loading. So let's do
143:12 - question mark, parentheses colon parenthesis.
So if we're not loading, show this for loading
143:13 - show this. So for loading let's For now, let's
Just show a paragraph say loading dot dot
143:14 - dot. And if we're not loading, don't worry
about this, it's going to be fixed once I
143:15 - write anything here. So if we're not loading,
which check if we're authenticated. So if
143:16 - we're authenticated, show this, else show
this. So if we're not loading, if we're loading,
143:17 - show loading, if we're not loading check for
authenticated, if we are authenticated, show
143:18 - the profile of authenticated. If not, we're
going to show you know a section that says
143:19 - there's no profile data, please log in or
sign up. And we will show two buttons for
143:20 - users to do exactly that. So here I'm going
to use something called paper from material
143:21 - UI is basically just like, Where is it? So
component demos paper. So yeah, this just
143:22 - this kind of surrounding frame, thing that
stands out from the background, it looks like
143:23 - a card because basically a card is built on
top of a paper. So here with the paper, I'm
143:24 - going to give it a class name of classes,
paper. So we already have the style. So this
143:25 - styles will apply and it will look
143:26 - cool off the go. So here, I'm going to do
a oops. So this time here, let's do a div
143:27 - with a class name of and then this profile.
And here, I'm going to have a wrapper for
143:28 - the profile image. And actually, we could
still use traditional class name, you know,
143:29 - strings, we can, if you go here, and you see,
we can still use stuff like this. So inside
143:30 - of profile, we can say and space, and then
we give the class and it will still work like
143:31 - traditional SAS. And
143:32 - yeah, so
143:33 - we can do that. So this is profile image,
actually not image profile. So profile. Or
143:34 - is it a profile dash image. So here inside
of this div, we're gonna have the, the image,
143:35 - Sony image, or just image tab, and the source
is going to be image URL, we already disrupted
143:36 - that, and the alternative will be just profile.
And it's gonna be okay, I'm just going to
143:37 - leave it like that. For now, here, we're going
to do a horizontal ruler, which I've already
143:38 - styled to not have any border, so it will
be invisible, just create some space between
143:39 - them. And here, here, actually, I'm going
to put a link, but this is not going to be
143:40 - like the normal react link. Actually, it is
but indirectly. But here, let's first bird
143:41 - div with the class profile details. And I'm
going to bring in something from material
143:42 - UI.
143:43 - So this is not more stuff. This is Redux stuff,
Redux. And hear from Mui. I'm gonna bring
143:44 - in what is it from material? Why is it not
until the sensing material dash UI slash
143:45 - core slash link. And I can name it anything,
because the default is the default. Export,
143:46 - I don't want to confuse it with the React
router Dom link, which we need to bring in
143:47 - as well. So import link from react router
DOM. And here, where are we? So we're here,
143:48 - here, I'm going to say, movie link. And I'm
going to give it the component of link. And
143:49 - here, it's gonna have the two, actually, it's
going to be like this template string, it's
143:50 - going to be two users slash, put a variable
there. And it's going to be the handle of
143:51 - this user. So this is going to be like a title
that says the name of the user, and it's going
143:52 - to be a link as well to that to the page of
the user, and the color will be primary. And
143:53 - since this is built on top of typography,
we can give a variant to change the size.
143:54 - And I'm going to give the vine variant of
H five, header five, and this will say at
143:55 - handle, just like in Twitter, and here, we
will do an HR. And here I want to show an
143:56 - always show the details of the profile. So
first, first will be the bio. So and these,
143:57 - we don't have to have them because a user
can have no bio, so it's going to be no. So
143:58 - what we need to do, we need to first check
if they have a bio. Then we show the bio.
143:59 - So here what we're going to use, we're going
to use typography, typography. And is it important
144:00 - from the right place? Or not like this, I
need to shake this. So typography need to
144:01 - put up with movie stuff. Okay. So here, this
is going to be typography of variant. What
144:02 - variant do I give this body to, I guess, think
its body to pretty sure its body to so here
144:03 - bio, biome bio. And after this, I'm going
to put another HR to make some more space.
144:04 - And here, I'm going to check if a user has
the location. And here I'm going to do parentheses
144:05 - because there's going to be multiple things
I want to use like an icon on the left, that
144:06 - shows a look location icon. And this is called
location on me bring it in from icons. So
144:07 - this will be here. Import location on from
material UI should not slash core slash icons
144:08 - slash location on I'm going to need two more
icons, so might as much excuse me bring them
144:09 - now. I'm going to need the link icon. I'm
going to call it link icon. I own icon. And
144:10 - it's gonna be from icon slash link. Shoot
me check. I don't remember what the other
144:11 - icon was that I need to bring. styles. icons.
calendar, but calendar Yeah, calendar today.
144:12 - Okay. All right. So it's gonna be let me select
this control the calendar today. Alright,
144:13 - so here. Where are we? So location on? Color
primary? Yeah, that's it. And here next to
144:14 - it. I'm going to do space, actually without
which is do spawn location inside like this.
144:15 - And I'm going to put an HR but it has to go
inside of here. Because if there is no, if
144:16 - there's no location, I don't want to put two
hrs on top of each other. Or this has given
144:17 - me a must have one parent element. Oh, yeah.
Okay, let's wrap this in a fragment, which
144:18 - if you don't know what it is, it's a react
component that actually doesn't render anything,
144:19 - but just wraps things so that they will be
in one element. So let's actually bring that
144:20 - in. fragment. And here we need to show the
other way. Yeah, the website website. And,
144:21 - and, and two parentheses expression. So another
fragment as well. And here lets us use the
144:22 - link icon, so link icon with a color of primary.
And, under the link, I'm going to actually
144:23 - have a normal anchor tag anchor tag
144:24 - with an H ref to the website, I'm going to
give it a target on the scope blank so that
144:25 - it doesn't open in this window opens in a
different window. And this is a react thing
144:26 - you have to give this REL equals no opener.
No referrer otherwise, React will complain.
144:27 - So we close this on inside of her. I do like
oops. Because this icon is kind of thin on
144:28 - a give like some it's kind of white, I'm gonna
give some space and then put the website like
144:29 - this and put in like a horizontal ruler, HR.
And here under the website, I'm going to put
144:30 - the the joint since date thing so I'll put
the calendar to the icon with a color of primary
144:31 - again. And after I'm going to put some space
like this, and I'm gonna put a span and so
144:32 - joint and here actually we need to format
this so we need to bring in DJ s so let's
144:33 - say important they j s from DJ s. And where
are we we're here. Wait here. So here I need
144:34 - to say de JS past this the created art And
here I want to format and pass a string, say
144:35 - M, which is going to say like the month but
in three digits, line three letters, and quadruple
144:36 - why to just show like the the year in a normal
format. Alright, so this is for the profile.
144:37 - But here I want to show as well if we're not
authenticated. So here let's do paper, again
144:38 - with a class name. Oops, class name of classes,
dot paper. And close this. And then inside
144:39 - of here, we're gonna have some texts type
Pog Rafi with a no color variant of body two.
144:40 - And I'm going to give this a line takes a
property align, and say center. So the text
144:41 - is actually aligned in the center. And let's
say no profile found, please login again.
144:42 - Here, I'm going to put a div div, and this
is going to have a class name of classes dot
144:43 - buttons. button, what buttons? buttons, yeah,
buttons. Alright, so buttons. And here, I'm
144:44 - going to put a button. Did we bring in button?
We did okay, I am going to put what is this
144:45 - first button. And this will have a variant
of contained, contained like this with a color
144:46 - primary color primary with a component of
link so that we can actually go somewhere
144:47 - within our application with a tooth to slash
login. And this button will say login. And
144:48 - we can actually just copy this. Copy this
button. Right here. We'll have the color of
144:49 - secondary and it will go to sign up. And he
will say sign up I think this is it for our
144:50 - profile markup. Yes. So yeah, for logged in,
we will show this for not where shoulders
144:51 - for loading will show this. Okay, let's save.
Our paper is not defined how we need to bring
144:52 - in paper. So let's copy this. Select this
Ctrl D save paper. What else? authenticated
144:53 - is not defined? How come? Oh, we need to take
authenticated as well from user so authenticated.
144:54 - So theme is not defined. Oh, we need theme
we need to spread theme here. Actually, we
144:55 - need to take theme. So do like this theme.
And then wrap this in parentheses so that
144:56 - it's returned from the function. Let's save
and it should fix everything and it does.
144:57 - Cool. Oh, okay. So our image is massive. But
the rest is cool.
144:58 - Because this image needs the class what is
the class actually profile image this so what
144:59 - is the image? Class Name? Equals that at save
Oh, that's a line to the left for some reason.
145:00 - That's what from actually Oh, actually the
div that contains his his image dropper and
145:01 - not not not profile image. So delete this
and then so rapper. Alright, cool. So our
145:02 - profile is like this, we show the website
person has Twitter as their website joined
145:03 - in March to 2019. And if you would like logout,
of course now manually will implement a logout
145:04 - button in the next episode. When we finish
up the profile call, we get the buttons and
145:05 - click on login, it goes to login and click
on Sign up it goes there. If I would sign
145:06 - up as let's say john, who doesn't have any
bio or anything. Go ahead and turn. There
145:07 - we go. We don't get the details that this
user doesn't have and the image is running
145:08 - quite nicely. Let's start implementing some
action buttons where we can add details for
145:09 - our user. Alright, first thing I want to work
on is the image upload function. Want to add
145:10 - a button when we click it, we can select an
image and upload it to our server. So let's
145:11 - go to profile Jess. And here right under the
profile image, we're going to add an input
145:12 - input of type file. And it's gonna have an
ID of image, or let's call this profile image
145:13 - or image upload or image file. image or image
input, I don't know, I didn't feel creative
145:14 - in that moment. So onchange, eight equals.
So this input itself is going to trigger the,
145:15 - the handler function. So let's call this handle
image change. And this the way a file input
145:16 - file input works is that the on change is
triggered each time you select a file. So
145:17 - if you click and you select the file, the
on change is triggered. And the way I want
145:18 - to set this up, I don't want to set up two
buttons where you select one image, and then
145:19 - you click Upload. Because that's a bit too
much for our profile, what I want to do is
145:20 - that once a user selects an image and clicks,
select, it automatically uploads to our server.
145:21 - So let's go here and create this handler method.
Let's call this handle image change, it's
145:22 - going to take an event because it's an input,
after all. And here, what we want to do is
145:23 - we want to get the file. So how we get it
is let's do const image equals, because this
145:24 - is a file input event target, it's going to
have a property files. And because we said
145:25 - file, we can only select one, but it will
still have them in an array. So let's select
145:26 - the first one. so files zero. And here, we
can open like do a comment here, like send
145:27 - the server, I just want to look at it right
now and see if it's working. Okay, so we can
145:28 - actually spend some time and style this and
change these, these things that come to choose
145:29 - File message and remove this message. But
what we can do, which is more easy and convenient
145:30 - is that we can just hide this and put a button
here, and that button will trigger the input.
145:31 - So what I want to do is I want to add this
a property hidden with value hidden, so we
145:32 - don't see this. But what we do is that we
add a button next to it, that when clicked
145:33 - it triggers this input. So it's the icon,
icon button I'm going to use which is a it's
145:34 - built on top of button is just an icon that
triggers an event and then you put a button
145:35 - inside of it so that it looks like well it
has a button. So on click equals. And let's
145:36 - call this handler, handle, edit, picture.
And let's give it a class name of button.
145:37 - Remember, we've already written those CSS
rules. So here I'm gonna put a an edit icon,
145:38 - which if you go to material UI icons or Material
Design icons, you'll see it's just a pen.
145:39 - And I'm gonna give it the color primary. So
let's bring these two things in. So here,
145:40 - under Mui stuff, I'm gonna do import icon.
button from
145:41 - material UI slash core slash icon button.
And the edit icon, import, edit icon from
145:42 - material UI, slash icons slash edit like this.
Alright, so let's create this handle edit
145:43 - picture function. Go here and say, handle
a picture equals takes no arguments. And what
145:44 - it does is that it needs to find this input
and just click it basically. So what we need
145:45 - to do is const file input. And we can get
it since it has an ID. So let's do document
145:46 - dot get element. I don't know why I'm not
getting IntelliSense here, slow, okay, so
145:47 - get element by ID, and the ID will be OCR
the image input. Now that we have it, we could
145:48 - just say file input dot click, simply and
it will actually click it which will open
145:49 - the selection file selection window. And then
when we select an image, it will trigger this.
145:50 - So let's save. And there we go. We got our
button and the other input actual input is
145:51 - hidden, and the button is already placed in
its perfect spot because of the CSS rules
145:52 - that we pasted in the last video. So if I
click it, it will actually trigger the input.
145:53 - And I can select a file, and I don't see the
name of the file selected or anything, it's
145:54 - just done behind the scenes. Alright, but
what I want to do actually, this button, and
145:55 - maybe it's not that descriptive, so I want
to use something called a tooltip. Which if
145:56 - you go to material UI on component demos,
right here, tooltips is basically when you
145:57 - hover over something, and you see this message
that kind of helps you tells you what this
145:58 - does. And you can place it on any side, I
prefer the top. So the way you do this, you
145:59 - just bring in this tooltip from material UI,
core tooltip. Let's copy that. Let's go here
146:00 - under Mui stuff. let's paste that. And the
way it works is that you surround your element
146:01 - with a tooltip, like this. So if you want
this button to have a tooltip, you just surround
146:02 - it and you put a title and a placement. So
here, our icon button here, let's cut this,
146:03 - and let's do two tip, it has a title on here,
the title, I wanted to say, edit profile picture.
146:04 - And the placement is dope. I think the default
placement is bottom. So okay, let's paste
146:05 - that. If you want it on the bottom, you can,
you can do that. But I just prefer the top.
146:06 - So let's save. And let's see what it looks
like. Alright, cool. So we get our message
146:07 - when we hover over, which is very helpful.
So it's good UX acts, practice. Alright, so
146:08 - let's actually send our file to the server.
So not here, here, what we need to do, we
146:09 - need to send a request of top with with form
data. So let's create that. So let's do const
146:10 - const form data equals new form data. Pascal
case, because this is a class. So let's do
146:11 - form data dot append. So we're going to append
a value like an input to the to the form data.
146:12 - And this takes three things, a name, which
is going to be a string, and let's just say
146:13 - image. This doesn't matter because we know
what our server code looks like. But let's
146:14 - call it image, or value, which will be image,
which is this file, and a blob, which is going
146:15 - to be image dot name. And here, we can actually
send an axios request from here. But of course,
146:16 - since we have Redux, let's centralize everything
in the user actions. Plus, we need to trigger
146:17 - the user loading action. So let's do this
dot props, as call an action that we haven't
146:18 - created yet. It's upload image. And let's
pass it this form data. Simple as that. And
146:19 - let's go and create this action actually.
So let's go to actions, user actions. Here
146:20 - at the bottom, I'm going to do export const,
146:21 - upload image, it's going to take form data,
and then do the following. So let's do axios
146:22 - dot post. But actually, before that, let's
call the, the user loading action. So let's
146:23 - do let's dispatch an action with type, not
user loading loading user. And actually, I
146:24 - forgot to include the dispatch. So here, we
need dispatch. So let's add it here. So dispatch.
146:25 - So after we dispatch the action, we can send
our request. So post, if you remember, this
146:26 - is to slash users slash image. And the data
will be that form, not don't form data. And
146:27 - here, then we get a response. What we need
to do here, we just dispatch the get user
146:28 - details, get all get user data, and then get
like basically get our user. So then here,
146:29 - let's do catch error, which is console log
error. And here, we don't need this result.
146:30 - So we can just have an empty function arguments
there. Yeah, I think this is for the upload
146:31 - image. That's actually important in the profile.
Here, import. Let's import the logout function
146:32 - as well because we're gonna, we're gonna use
the logger actions Oh, we're gonna use it
146:33 - later. So log out user. And upload image from
go back one level Redux slash actions slash
146:34 - user actions. Alright, let's go to the bottom
and a create a map actions to props. So here's
146:35 - the const. Map actions, to props equals an
object which has logged out user, an upload
146:36 - image Unless passed, that is the second argument
to our Connect. So map actions to props. And
146:37 - let's add them to the prop types. So here,
let's say logout. user is a prop types.func.is.
146:38 - required. We need to upload image, oops, upload
image, prop types.funk.is required. Alright,
146:39 - let's save all files, and the dev server is
still running for me. Let's go to the application.
146:40 - Let's click on the on the button, let's select
this guy's image, and it loads and there we
146:41 - go, we got our image, and even uploads on
the spot right there, because we dispatched
146:42 - the get user data action. And if we do it
again, we put this monkey image. And there
146:43 - we go, we get the image uploaded again, so
cool, it's working. And if we go to our data
146:44 - or storage bucket, we see that, of course,
the images here. So the latest one is this.
146:45 - Actually, we might later add a DB trigger
that deletes the user's old image and then
146:46 - uploads the new one as well. So in this video,
we're going to create two buttons in the profile
146:47 - section, a logout button and the Edit Details
button. So let's do that. Alright, let's go
146:48 - to our text editor. And let's go to profile
images.
146:49 - And
146:50 - here where we are not loading and authenticated
at the bottom here after this div, let's add.
146:51 - So first, let's add the logout button, which
is we've already we've already imported the
146:52 - logout user function, or action. So let's
do that. So let's use it. So here, let's say,
146:53 - I'm going to surround this with a tooltip
as well. And the title of the tooltip will
146:54 - be logged out. And the placement will be at
the top. And here we're going to have our
146:55 - icon button. And the onClick for this on click
is as cold as this thought. We call it handle
146:56 - logout. And let's close it. And inside of
here, the icon that I'm going to use is called
146:57 - keyboard, keyboard return. And it's going
to have a color of primary. Let's close the
146:58 - tag unless there's an error her nights Fine.
Let's bring in the icon. So here on the icons
146:59 - as to import keyboard, return, oops, import
keyboard return from material UI slash icon
147:00 - slash keyboard return. All right, and this
handle logout let's create that so handle
147:01 - log out. It's actually just gonna call this
this dot props dot log out. user. All right,
147:02 - did we actually add that to our? Yeah, we
have that we have that here. We've imported
147:03 - it. And it should work fine. Let's save. Let's
look at our app. Did we get an error? Now
147:04 - cool. So we get this error back and click
it we actually get logged out. Let's look
147:05 - log back in. So the user at email, comm 123
through six. All right, we're back in. Now
147:06 - let's create a button for editing these details.
And for this, I'm going to use the the dialog
147:07 - for go to component demos dialogue. Let's
try this one. Not this one. The one with a
147:08 - form. Yeah, this one. So we're going to have
something like this A dialog that has three
147:09 - fields, one for the buyer, one for the location
and one for the website. And if we do like
147:10 - it's going to be saved instead of subscribe,
and that will send a request to our server.
147:11 - And the way dialogues work is that you're
going to have a button or a button at the
147:12 - top. It's this one that triggers the dialogue
to open and then you're going to have the
147:13 - content of the dialogue. But since this will
have a lot of code, let's actually put it
147:14 - in its own component. So here under the logout
button, let's say let's add this component
147:15 - called edit details, which we haven't created
yet. Let's go up here and it's important To
147:16 - end, so added details from we go back one
level, we go to components, slash edit details.
147:17 - Alright, let's go to components. Actually,
it's in the same directory same is on the
147:18 - same level. So just do like this. So here,
let's create a new file called edit details,
147:19 - dot j s basketcase, of course. And here, let's
do RC tab. Again, come on, there we go. Let's
147:20 - remove this export. Let's take these three
imports, because we need them. So we're going
147:21 - to need fragment as well, any prop types.
Let's, let's do a styles here. const styles
147:22 - is we're going to need the global theme. So
stick the global theme and return. Let's just
147:23 - spread the theme for now. We need to add anything
we're going to add it later. And we're going
147:24 - to need Of course, Redux to get our details
from the server and actually show the values
147:25 - on that form. So let's say import connect
147:26 - from
147:27 - react, Redux. And we're also going to need
an action that we haven't created yet, let's
147:28 - actually create the action first, not data
actions in user actions. Let's go to the bottom
147:29 - here, as to export const. And this is going
to be the function that sends a request to
147:30 - edit our details. Let's call it edit user
details. And you will take user details. I
147:31 - knew it needs dispatch. So let's take this
patch as well. And here we start by dispatching
147:32 - an action with the type loading user, is it
Yeah, it's loading user. And here we send
147:33 - our request. So axios dot post, and it's going
to be to slash user is going to take the user
147:34 - details, object, not post them. Here, when
we get our response. Actually, we don't need
147:35 - the response, because we're just going to
call get user data from here. So with dispatch,
147:36 - get user data. And here's the catch if we
have any error, let's console log it. Alright,
147:37 - this is done. Let's save this. And here, let's
bring it in. So import the user details from
147:38 - the go back one level Redux slash user actions,
slash, not just user actions, actually slash
147:39 - actions, slash actions, slash user actions.
Alright, let's connect our component. Let's
147:40 - cut to this edit, edit details. And I'd say
export default Connect. And we're gonna have
147:41 - map state, to props to props. And here, we're
just gonna have one action. So let's do an
147:42 - object like this with the action edit user
details. And here let's do with styles. We
147:43 - pass in styles. And then for the second one,
we pass in our edit details component. Alright,
147:44 - let's create our prop types as well. So let's
do edit. Details. Prop types, equals, the
147:45 - first is the function so edit user details
is a prop types dot func that is required.
147:46 - We're gonna, we're gonna need classes as well.
Prop types.object.is required. And I think
147:47 - this is it. Yeah. Okay. So, here, we're gonna
need to initialize the state. And in our state,
147:48 - we're going to have three fields bio, which
is going to be initially an empty string,
147:49 - website, an empty string and location, an
empty string, we need a Boolean for open,
147:50 - which is going to be initially false, because
by default, it's it's closed the dialog. And
147:51 - here what we need to do is that we need to
once this component is rendered, once it mounts
147:52 - we need to get the details from that we have
of this user and put them as the values of
147:53 - our input. So let's say if our location says
Los Angeles, California, we want to when we
147:54 - open the dialog in location, it will be already
written there so that the user can edit or
147:55 - change And if we don't have anything, of course,
it's going to be empty. So here in component
147:56 - did mount. Actually, we need to create our
map state the props, const map state to props,
147:57 - it's gonna, it's gonna be a function that
takes the state and returns the following,
147:58 - I can actually get credential just credentials
we need. So we do create done shows, it's
147:59 - going to be from State DOT user dot credentials.
Alright, so here, in component did mount,
148:00 - we need to do this dot set state, we need
to set the bio. And we could actually in our
148:01 - credentials not have a bio, so we need to
check for it. Otherwise, we're going to set
148:02 - it to undefined. So what we need to do is
we need to do this dot props, actually lets
148:03 - the structure the credentials, const creed
done shows equals this dot props. And here,
148:04 - what we need to do is that we need to say
credentials dot bio. So if we have, so a ternary
148:05 - operator like this, if we have done, we have
a bio, let's say. So we just say that again.
148:06 - So the value would be this, else, it's going
to stay empty. So let's copy this other comma,
148:07 - space that paste it twice. So let's replace
here Ctrl, D, and say website and control
148:08 - D and say location. All right, so when the
component is loaded and mounted, it's going
148:09 - to set these values. So let's create our,
our dialog. So here, instead of this div,
148:10 - I'm going to use fragment. Oops, it didn't
close. Did we not bring it in? We did that
148:11 - Oh, why didn't close to. So fragment. Alright,
so inside the fragment, so first thing is
148:12 - going to be our button, which is going to
be inside a tooltip. And the title of the
148:13 - tooltip is going to be edit details. Placement
as usual, on the top, I don't know why these
148:14 - tags are not being closed, is it because I
didn't import them? I think because I didn't
148:15 - import these things. Let me import stuff that
we're going to use. So import tool, from material
148:16 - UI slash core slash tooltip. Let's copy this,
we need icon button. Actually, we can just
148:17 - bring in some stuff from here. So let's just
bring in all this stuff until here. I spaced
148:18 - that before. So we're gonna need this icon
button. And we're gonna need the edit icon.
148:19 - So say import edit icon from material UI slash
icon slash edit. I'm here I'm just gonna say
148:20 - icons. Here. I'm gonna do Redux, oops. Redux
stuff. And here, say movie stuff. Alright.
148:21 - So now, if I do this, yeah, closes the tooltip.
And here we have our icon button. icon, button.
148:22 - The on click. Let's call it handle open. And
let's give it a class. So I know we're gonna
148:23 - need to style it later. of class classes dot
button classes. Actually, let's destructor
148:24 - classes as well. So let's do const classes,
equals this dot props. Let's close this. And
148:25 - inside of here, we're going to have our icon
which is the edit icon with a color of primary.
148:26 - Let's close it. Actually, let's create our
handle open and handle close functions. So
148:27 - let's do handle open is takes nothing and
it sets the state to open. So open will be
148:28 - true. And actually here as well, we need to
get the details. We need to do this. But let's
148:29 - make this into a function of its own because
we we don't want to repeat our code. Let's
148:30 - call this set user details to stay Or map
makes more sense. And it takes the credentials
148:31 - because we need them. And here, let's face
this and it. So here, we get the credentials,
148:32 - and we call it with credentials. And here
as well, we need to call it. So let's do like
148:33 - this, I can just pass it this dot props dot
credentials. And it will do the same. Let's
148:34 - create the handle close. Takes, yeah, it takes
nothing. And here we just say this dot set
148:35 - state. Open,
148:36 - is false.
148:37 - All right. Thank you, this is it. Okay, so
here, we need to, after the button, we need
148:38 - to put our form. But here, let's create, let's
actually do the dialogue. And the dialogue
148:39 - will take the open, the open would be this
dot State DOT open. And is the on close callback
148:40 - or font method, this would be the this dot
handle close. And I'm going to give it a property
148:41 - of full width, which will make it take forward.
And I'm going to give it a property max width
148:42 - of SM. If you see there's a cool example here,
let's close this, the full width dialog and
148:43 - if you change here, you can actually customize
the width. So I'm going to do the SM It seems
148:44 - the most you know, the one that makes the
most sense, or the one most appropriate or
148:45 - for application. Don't know why these tags
are closing, let's close the dialog. Pretty
148:46 - sure I imported the dialogue. Yeah, did excuse
my text editor guys. Alright, so here we need
148:47 - the dialogue tech title. So dialogue, title.
And this will say Edit your details. And under
148:48 - under here we put dialogue content. All right,
close this one cool
148:49 - form.
148:50 - And here we'll have a form. And but it's not
going to have a submit action because our
148:51 - dialogue actions are going to do that for
us. So here we're gonna have text fields.
148:52 - So I'm going to have text, I'm going to save
text field. And I'm actually no need to give
148:53 - it some properties. So first, we'll have the
name. So the first will be a bio will have
148:54 - a type of text, have a label of bio, capital
B. And I'm going to give it a property of
148:55 - multi line, which will make it a text area.
Because this is a bio, so we'll need some
148:56 - some more space, and we'll give it three rows.
And let's give it a placeholder. Like they
148:57 - will work like a hint. So here let's say a
short bio about yourself. Let's give it a
148:58 - class name of classes dot remember we have
access to our global theme. So we can do classes
148:59 - dot text field and it will style in the same
way the signup and login text fields are styled.
149:00 - So it will give it a value as well with this
will be this dot State DOT bio. And an unchanged
149:01 - which we haven't created yet will be this.on
change. And let's give it full width. So it
149:02 - takes up the full width. And we close this
as copy it and paste it two more times. But
149:03 - from these two, let's remove the multi line
and the three rows because these will be just
149:04 - normal text fields. And this will be website.
And the label is website. And text holder
149:05 - will be your personal slash professional.
Professional I can't spell website. This dot
149:06 - State DOT website and same for the rest and
here will be the location so location is the
149:07 - name. The label is location with a capital
L. and here let's say let's just say where
149:08 - you live. And here let's say dot this dot
State DOT location
149:09 - And yeah, that's fine. Let's create the on
change. Actually, it will be a generic on
149:10 - change that we have already written. So let's
just copy it from, from here from the login
149:11 - or from the signup. But did we say this will
be actually let's call it handle change,
149:12 - change,
149:13 - because you want to stick with the same names
that you've used across the same project.
149:14 - So that it makes more sense. So let's face
this handle change here. And we also need
149:15 - at the bottom here, we need our actions or
dialogue actions will be outside the dialogue
149:16 - content. So here, let's say dialogue. Actions,
which will be the buttons at the bottom of
149:17 - the dialog, and we'll have two of them. So
the first one is a button, and it has an onClick.
149:18 - And this will be the close button. So this
dot handle close. And this will be the button
149:19 - if people want to cancel, let's give it a
color of primary and let's call this cancel.
149:20 - And let's copy it, paste it, this is this
will be the save. So this will be the one
149:21 - that sends the request. And let's give it
the handle submit, which we haven't created
149:22 - yet. Okay, so we have handled change, let's
create handle submit, will be handle, submit,
149:23 - it won't take an event because it's not based
on a form. Let's do const
149:24 - const,
149:25 - user details equal to get the bio from this
dot State DOT bio. Let's copy this twice.
149:26 - This will be website. And this will be location.
And here we just need to call our function.
149:27 - So this dot props, our action edit user details
and pass it our user details. And here, we
149:28 - actually close the dialog after we submit
so this dot handle close, I guess. And I think
149:29 - this is it for this dialogue. Let's remove
this dialogue text because we don't actually
149:30 - use it. And let's save all files and look
at our app. Okay, map user details to state
149:31 - is not defined. Map user details to state
it needs to go before the other ones. So that
149:32 - they will know what we're talking about. Oh,
silly mistake, this dot map user details.
149:33 - All right. Let's look at our app cannot resolve
icon edit. Its first of all edit icons. But
149:34 - either I or just edit. Yeah, I forgot the
slash. Alright, so we get the edit button.
149:35 - So let's say I wanted to change London, UK
to let's say Paris, France, and I wanted to
149:36 - remove Hello, um, user and say, I don't know.
I am the user. So let's save loading. Cool.
149:37 - We got the new details. Paris, France, and
I am the user. But I want this button to be
149:38 - on the right so let's go here under theme.
Let's see button. I gave it class button I
149:39 - think Yeah, we did. So we simply gonna say
float. Right? And we save. Cool. We got our
149:40 - button on the right and it says Edit details
when you hover it and it works just fine.
149:41 - For remove this text we see our placeholders.
Yeah. Alright. So right now if we log in the,
149:42 - the navbar doesn't change, the buttons still
remain the same. So let's actually change
149:43 - it so that when we are authenticated, we have
buttons here to add a post and to see notifications
149:44 - and stuff. Alright, let's go to our project.
And here in navbar. The navbar now needs to
149:45 - know whether we're authenticated or not. So
it needs to connect to the state. So let's
149:46 - bring in so here let's import import connect
from react Redux. And let's connect our navbar.
149:47 - So here export default Connect, let's say
map state to props. And it doesn't take a
149:48 - mark. It doesn't use any actions. So we just
admit to that argument. And here let's say
149:49 - const. Map state to props takes the state
And returns the following. So we need authenticated
149:50 - so we can extract only that so authenticated.
That's going to be from State DOT user dot
149:51 - authenticated. All right, let's, let's ram
prop types as well, I might as well. So prop
149:52 - types from prop dash types. And here, let's
say dot prop types. We have authenticated,
149:53 - not state prop types, dot bull, because it's
a Boolean, and it's required. Alright, so
149:54 - here, now that we have the authenticated,
let's extract it. So inside the render, let's
149:55 - say const. authenticated equals this dot props.
And inside the toolbar here, let's cut this,
149:56 - let's say let's do an expression and say authenticated.
So ternary operator, if it's for authenticated,
149:57 - we show something on here, colon, so else,
we show this. And because there's three elements
149:58 - here, we need to wrap them in a fragment,
so frog meant. And we need to actually import
149:59 - that. So inside of here, let's paste our buttons.
And let's import fragment
150:00 - here, add fragment. and here if we are, if
we're actually authenticated, let's do another
150:01 - fragment here fragment tab. And here, we want
to show three buttons. One, that's actually
150:02 - a plus. So here, I'll do of course, with the
tooltip. We're going to use the same pattern
150:03 - from this button here. So tooltip icon button.
But actually, there is like a bunch of elements
150:04 - here, let's create a component for this button
that so that we don't actually have to import
150:05 - all these things into our components whenever
we want to use this button. So let's create
150:06 - a custom component in utils. Let's create
my, my button, dot j s, you can call it whatever
150:07 - I chose to call it my button. This is a functional
component. So RFC tab. And here, we can just
150:08 - say export default, like this, and we're gonna
destructor from the props is going to have
150:09 - children. So the way this thing works is that
let's go back here. So the way it works is
150:10 - that it's going to take a tip, so for the
title of the tip is going to take the onClick.
150:11 - And in case we need to style the tooltip or
the icon button, we're going to take two class
150:12 - names for both of them. Of course, we don't
have to have them, but if we do, it's going
150:13 - to style them. So here, we're going to take
children and children is going to be whatever
150:14 - that's inside. And usually it's the icon.
So we're going to have my button and then
150:15 - we're going to give the props and inside of
that we give any icon and that icon will be
150:16 - will be the children will be rendered inside
the button. So we're going to take an onClick
150:17 - we're going to take a btn class name, which
is going to be for the icon button, we're
150:18 - going to take a tip class name, which is the
class name for the tip for the tooltip. And
150:19 - we're going to take a tip as well, which is
the title for the tooltip. And here instead
150:20 - of doing return like this, we can actually
just do parenthesis, because we don't need
150:21 - to process any logic here. And here, we'll
say tooltip it's actually important, the tooltip
150:22 - and the icon button. So here import tool.
From art. Yeah, I'd like this material, UI
150:23 - slash core slash tooltip. And we need the
icon button. Material UI, slash cause slash
150:24 - icon button. Alright, so here we say tooltip.
With the title. That's tip, class name of
150:25 - tip class name. But of course, this is, if
we don't give a class name. It's not a problem.
150:26 - It's just not going to have a class. So we
can have it like this. And inside we'll have
150:27 - icon button. We'll have an unclick of on click
and a class name of btn. Class Name button
150:28 - class name. And actually, let's do this because
we're going to have stuff inside of it. And
150:29 - here will be just children which is going
to be the icon. All right, let's save this
150:30 - Let's go to nav bar. Here, let's import it.
So let's do over here at the bottom here to
150:31 - say import my button.
150:32 - From
150:33 - we go back one level to utils, slash my button.
And here, instead of tooltip, we do. So this
150:34 - will be the plus button my button. And it's
gonna need that, it's not going to have an
150:35 - onClick. Right now it's not going to do anything.
So we just give it the title of the tip or
150:36 - just tip to say, create a scream, or post,
a scream. And inside is going to have the
150:37 - Add button or add icon. Let's say here icons.
Actually, I'm going to bring all the icons
150:38 - we need right now. So we need the Add icon
from material, UI slash icons slash add. And
150:39 - by the way, this is the Like I said before,
this is a default export, you can just have
150:40 - ADD, but the fact that I add icon to it makes
it more readable in my code, I'm like, Okay,
150:41 - so this is an icon. Or let's copy all of this
as paste it twice. And here, we're going to
150:42 - have Home icon. Here, this is going to be
home. And here, I'm going to have notifications.
150:43 - From notifications, or Alright, here, we're
going to have the icon, the Add icon, so add
150:44 - icon. Let's give it a color of primary. Let's
close this. So that's the first button. The
150:45 - second one is going to be the home button.
So my button and tip will be home. Will we
150:46 - have a class? No, I don't think so. So here
we'll have the icon. So Home icon, color,
150:47 - primary. Actually, this is going to be a link
to home. So let's wrap it in a link. Let's
150:48 - cut that and do link. We already imported
link, let's do two, slash and close this.
150:49 - And inside paste our button. And the third
one is going to be the notification. So let's
150:50 - say my button with a tip notifications. Let's
close this. And inside we're gonna have the
150:51 - notifications icon, the color of prime primary.
Alright, so with afueras dedicated, we should
150:52 - see these buttons. Let's save. I'm already
running my project. Let's refresh. Oh, actually,
150:53 - the tip is not showing and the color shouldn't
be primary, of course, don't always think
150:54 - in the because it's going to be the same as
the bar. But the way these buttons work, they're
150:55 - actually svgs. So we can actually target them
from our CSS. So let's go to our app CSS.
150:56 - And inside of here, I'm going to say and,
actually, this is not sass to CSS. So I can,
150:57 - I need to say dot nav container. And here
I'm gonna say SVG. So any SVG inside of the
150:58 - container and the nav container, so any SVG
inside of our navbar. Let's give it a color
150:59 - of hashtag fff, which is white. Let's say
let's go back. Cool. They're white now. But
151:00 - let's fix this notification. This the text
not working. It must be from the button here.
151:01 - So tooltip or title, not title. I misspelled
title. So let's save. Alright, so we got our
151:02 - tooltips. And if we click on a user, and we
click on home, it actually redirects to home.
151:03 - Of course, these don't do anything yet, but
we will fix that. That's actually changed
151:04 - as well the buttons and so in profile here,
instead of this, we're going to have my button
151:05 - so as to my button. And it's going to have
a tip of edit profile picture. And we're going
151:06 - to have an onClick of this dot handle edit
picture. And because this button has a class
151:07 - name, we're going to give btn class name equals
button. And yeah, this is it. And inside the
151:08 - my button will have the edit icon. Actually,
I forgot something inside the knob bottom,
151:09 - we need to remove this color primaries, because
they're they don't serve any purpose right
151:10 - now.
151:11 - So back to the profile here, we actually need
the color primary. So primary, we closed the
151:12 - icon. Don't know why there's this squiggling.
Okay, it's fixed. So we can remove this. And
151:13 - let's copy all of this. Let's come here under
this tooltip. Let's do so the tip will be
151:14 - logged out. The onClick will be handle logout.
And we don't need a btn class name here. So
151:15 - let's remove this. And this will be keyboard
I keyboard, keyboard return instead of icon,
151:16 - we can remove all this now. And we need to
remove the inputs because we don't need them,
151:17 - because they're already in the button. And
we need to bring in the button. So here to
151:18 - say, import my button. Oops, button from utils
slash my button. Oops. That's fine. Let's
151:19 - go to the details. So let's remove tooltip
an icon button. And here let's bring in my
151:20 - button. So my button. Again, I did this you
capitalized. So we go back one level slash
151:21 - shooto slash my button. And I think I still
have it copied on I don't. So I could just
151:22 - say my button. And the tip will be edit details.
And on click will be this dot handle open.
151:23 - And we need a btn class name. Classes dot
button. And close this tag inside we have
151:24 - the edit icon with the color primary. Close
this remove this. Let's copy this. So actually,
151:25 - no, this is the only button we have here.
So let's just save all files. And let's check
151:26 - if nothing is broken. Cool, this still works.
And we get the message where the placement
151:27 - is actually at the bottom. So here, I forgot
to add the placement. So in the tooltip place,
151:28 - placement equals top, as you guys wanted on
the bottom, you can leave as the default.
151:29 - I like the top one. And even here, if there's
no space, it's going to be on the bottom,
151:30 - even though that actually says placement top
and then the other one's going to be on the
151:31 - top. Alright, so now we want to show the like
button and number of likes and number of comments
151:32 - on the screen cards. But one thing I want
to fix is here in the home was the home here.
151:33 - So in the home, we're still using axios, we
need to create an action for getting old screams,
151:34 - we need, we need to create actually a couple
of actions that we're going to use as well
151:35 - in the scream components. So here I'm going
to import some types. So we have set screams
151:36 - maybe some of them we haven't created yet.
But we will in a second. So loading data as
151:37 - well. Like screen. Unlike screen, I think
that's it. Yeah, that's it from we go back
151:38 - one level, and it's types. Of course we need
axios. And here we needed to do the first
151:39 - one is the one we need in home. So export
const get screens. Equals doesn't take anything
151:40 - and it just first dispatcher say loading.
Oops, we need to use dispatch. So here we
151:41 - say dispatch. And here we say dispatch an
action with the type of loading data like
151:42 - this. And then here we can send our requests.
So axios get to slash screams and we get our
151:43 - result we dispatch an action with the type
set screams and the payload will be the response
151:44 - data. and here if we get any error we need
to clear out the screams Actually, we don't
151:45 - need to type for this, we can just dispatch
type will be the same actually set screams
151:46 - and the payload will just be north. So just
reset them back to No. Or are actually empty
151:47 - object, well, this will almost never happen
but, you know, you never know. Alright, so
151:48 - let's put some comments here, let's say get
all screams and now we're going to create
151:49 - the, like a screen,
151:50 - okay?
151:51 - So like a screen like this, let's say on like
a screen okay here in the types, let's create
151:52 - these new types. So what do we have we have.
So we have set screens loading data like screaming,
151:53 - unlike screen. So these are all data types
or data reduce the types. So here we say const
151:54 - or export const, set screams equal set, screams
not scream set screams we actually need another
151:55 - one for way later forgetting one screen that's
called just set screen without an S. We need
151:56 - us control D here and do like screen. We need
unlike screens or control the on oops, unlike
151:57 - screen. And what else we need loading data,
which is going to be a UI thing. So here we
151:58 - paste, select this control the loading data
thing this is it. Yeah. Okay, let's do the
151:59 - other actions as well so that we don't have
to return to this file. So export const like
152:00 - scream. And this will take the screen ID of
which screen to like, we'll take this batch.
152:01 - And first thing with dispatch to dispatcher
loading No, actually, we don't. Let's do axios
152:02 - dot get and do template string slash scream
slash dollar sign curly braces scream ID slash
152:03 - like. And then forget a response. We dispatch
an action with the type like scream, like
152:04 - screen. And the payload will be rest data
because we're going to get the like back.
152:05 - and here we can see catch. We have any errors,
we actually just console log them. console
152:06 - log error. All right. Unlike scream I think
is almost the same. We can just copy and paste
152:07 - it here. So unlike screen, it takes the ID.
152:08 - And
152:09 - it does the same a sends a request to slash
scream slash ID slash on unlike. And here
152:10 - we get the data we dispatch a type of unlike
scream. And yeah, it's the same. So it's good
152:11 - like this. Alright, let's go to the data reducer.
Let me close the console window actually is
152:12 - taking up unnecessary space. So we need some
types of set screen. When it actually screams
152:13 - we need like screen. We also need unlike screen.
What else loading data? Yeah, I think this
152:14 - is it for now. So types, and we need to initialize
to do an initial state variable which will
152:15 - have screens. So this will be the array that
holds all screens whether in the homepage
152:16 - or in a user's page. And we have a singular
screen, which will be one we want to see just
152:17 - the details of one screen and we will have
a loading as well. She's initially set to
152:18 - false so export default, whoops default function
that takes a state which is equal to the initial
152:19 - state initially and an action switch. Same
thing as the data reducer. So action type.
152:20 - And here first, let's take care of the loading
case. So loading data before loading, we just
152:21 - return types of return, we spread the state,
and we set the loading to
152:22 - true.
152:23 - Next case will be the set screens, set screens,
we return spread the state. And here are the,
152:24 - we set the screens to what we get. So action
dot payload. Remember here, if we get the
152:25 - screens here, the response to data which is
in the payload will have the array of all
152:26 - the screens. So we do screams action, not
actions action dot payload, and we set the
152:27 - loading to false. So next will be the like
scream. So case, like screen. So in this case,
152:28 - what we want to do is let me look at the Redux
here. So what we want to do if we go to Redux,
152:29 - we go to our state, the way we determine whether
we like a scream or not, we look at the likes
152:30 - array. And here, what we want to do is that
if we like a scream, then we add that like
152:31 - to this array here, for the user. And we also
add the number of the soda, the light count,
152:32 - let's say the screen has a light count of
two, we add three to it. Or actually, no,
152:33 - actually, we get the entire screen back once
we like a screen. So we just need to find
152:34 - that scream in the scream array. Or is it?
Why don't we have screams here? Or because
152:35 - we didn't actually have that we don't have
that reducer yet. What am I saying? So when
152:36 - we have the scream array, we will add the
number to that screen, you'll you'll see,
152:37 - when we start testing it. I should have explained
that later, actually, but whatever. So let
152:38 - index. Now we want to find the screen. So
let's say State DOT screams dot screen dot
152:39 - find index, we need to find the index in the
array first. And here is a higher order function.
152:40 - So this scream, we want to find the screen
that has the scream dot scream ID the same
152:41 - as the one we got back from our payload. So.
So if remember, when we like a scream, we
152:42 - get a screen, we'll get to that screen back.
And then now we have to find it an increment,
152:43 - it's like count. So now we get the index of
it. And what we do here, we do state and dot
152:44 - screams. And now we use the index equals action
dot payload. So we replace it in the state.
152:45 - And now here as well we do state and for the
unlike screen, actually, actually is the same
152:46 - even when we are like we get a screen back
with the different, like count. So we can
152:47 - we can do this we can chain unlike scream
like this. Yes scream like this. And this
152:48 - will that means in both cases do the same
right here. And we need as well to handle
152:49 - like scream and unlike scream from the user
reducer as well. So here, let's import the
152:50 - type. So like ups,
152:51 - like scream. And here. We do case, like and
here they are actually different like screen.
152:52 - Here what we want to do, we want to add to
that like so we can have
152:53 - this cap
152:54 - keys annoying. Alright, so we return the state
as it is. And here in the likes array. We
152:55 - return an array and we spread State DOT likes.
And we are the new ones. So here we add a
152:56 - new like and it will have a user handle just
like the other likes, would have the State
152:57 - DOT credentials. Because it's this user so
we can use the handle from the end it will
152:58 - have a screen ID of the same screen ID of
the screen that's returned from the pay in
152:59 - the payload because after all, we return the
same screen from our server or from our Cloud
153:00 - Function. And here let's see case. Unlike
screen Now here's different, we just need
153:01 - to remove it from that array. So here we do
return return, we spread the state. Here,
153:02 - we do likes, equals State DOT likes dot, we'll
use filter to remove one of them. So here
153:03 - what we need what we need to do we say like,
so we filter out any like, which has a scream
153:04 - ID, which is equal to the action dot payload,
dot scream ID. Alright, so we're done in the
153:05 - reducers. Now we need to go to our screen
and actually show this like button. So here,
153:06 - we need to actually reconnect our home. Actually,
we need to connect our home. So here, let's
153:07 - connect our home first. So here import, connect.
153:08 - From react, Redux, we need to get the get
screams. From Redux actions, data actions.
153:09 - Let's get prop types. And here, we need to
connect the home. So Connect map state to
153:10 - props. And here we have only one action so
we can put it here. So get screams. And we
153:11 - wrap this home in parenthesis, and here we
say const. Map, state to props. Takes the
153:12 - state returns the following. So we need we
need the data. So data is state data. Remember,
153:13 - this is our reducer our data reducer puts
all the data in this data object. So we need
153:14 - to get this in the home. And we need to do
our prop types. So home prop types equals
153:15 - we have our get screams she's a prop ups prop
types dot funk is required. And we have data,
153:16 - which is a prop types.object.is required.
All right, so here, we don't have a state
153:17 - because we're going to get them from the props.
And here when the component mounts we just
153:18 - need to call get screams asexually get screams
not get scream here. And Yep, that's correct.
153:19 - And here we get in the render. We get our
screen screens rather. So from data we get.
153:20 - Or actually we can do like this. So screams
and we need loading as well. equals this dot
153:21 - props dot data. So here, we do. So we check
we don't check the screams we check the loading.
153:22 - And here we do just screams like this. And
we don't need this parentheses actually. And
153:23 - here we don't need these parentheses as well
because it's one element. All right, so this
153:24 - should fix the home. And actually our app
is crushed so like scream is not exported
153:25 - because we didn't save save here as well.
assignment for function call is that homeland
153:26 - 14
153:27 - home
153:28 - Oh, yeah should call the function. Data reduce
action is not defined and stay is an undefined
153:29 - Yes. So Oh, here it's state and action. or
his action not actions. Yep. Okay. Okay, unlike
153:30 - scream is not defined in user reducer. Because
we didn't actually bring it in. Or I didn't
153:31 - bring it in. Come on. This time it works.
Oh boy. Data return undefined during initialisation.
153:32 - Oh, because we don't have a forgot about the
default actually. This switch default case
153:33 - So default would just return state. All right.
Okay, this is loading. Let me reload, just
153:34 - in case seems to load forever. But if we check
the state, we actually have the screams. So
153:35 - must be some problem with the logic here.
Oh, actually, no, if we're not loading then
153:36 - show the screams. Alright, cool. So again,
the screens, everything works fine for home
153:37 - nuts. Now let's take care of the likes the
like button. Now here and actually, first
153:38 - let's connect to the component. So here we
connect from react.
153:39 - Redux.
153:40 - And we need like an unlike so like, scream,
and unlike scream
153:41 - from
153:42 - Redux actions, data actions. And let's get
prop types. While we're here. Okay, so here,
153:43 - let's do, let's cut this and say Connect map
state to props and map actions to props. And
153:44 - here, we just paste that here, let's say const.
Map state to props, equals takes the state
153:45 - and returns we need the user not the state
to use a
153:46 - map
153:47 - map actions to props oops actions to props
for now, just the two that we have. So like
153:48 - scream and unlike scream and we do the prop
types. So we have like screen is a prop types
153:49 - function that is required. Let's actually
copy this oops, hurts just unlike and we have
153:50 - user is prop types.objects.is required. We
have scream, which we actually have been passed
153:51 - here this one
153:52 - prop types.object.is required. We have classes
because of with styles. Alright. So here after
153:53 - after the body, I want to put we it's going
to be we're going to depends on our authentication
153:54 - state, we're going to create a different like
button so like button, as well whether we'd
153:55 - like to scream or not and after the like button
or put a spawn with the number. So here we'll
153:56 - have like, count and says likes here. So the
number of likes next to it the word likes.
153:57 - And so while we're here, actually we can put
the I need to bring in my button, we can put
153:58 - the comment ones as well. So here we have
a tip that will say comments. And actually
153:59 - doesn't have any doesn't do anything. But
here we'll have a chart icon which I need
154:00 - to bring in as well with a color of primary
color. Primary. Yep, let's bring in this actually
154:01 - is actually as well after this is to say how
many comments there are. So here we say comment,
154:02 - count and space comments. And so we need to
bring in my button and shut chat icon.
154:03 - So here is to import my button from utils
slash my button and what else the icon so
154:04 - here let's A icons.
154:05 - Here let's actually Redux space here we have
import shot icon from material, UI slash icons
154:06 - slash, shot. And here this, we need to create
this like button. And the way we're going
154:07 - to do this is that we need to actually find
out whether the user, this user that's logged
154:08 - in, has liked this screen or not, too. So
I'm going to use these two icons. So if the
154:09 - user has like the screen, you see this filled
heart, if not, you see this empty heart. And
154:10 - as well, if the user is not logged in, you
see this empty heart. But when you click on
154:11 - it, it redirects you to the login page. Because
you're not logged in, you can't like screen
154:12 - when you're not logged in. So here inside
the component, I'm going to create a function
154:13 - called liked screen, which will tell us what
whether we've liked this screen or not. And
154:14 - it takes a scream ID. Actually, it doesn't
need to take the scrim ID because it only
154:15 - works for this screen. So it can do like this.
And it checks if, first of all, we need to
154:16 - check whether we have a likes in our user
object. Because if we don't, that means we
154:17 - don't even need to check it's false. Is there
is no like there if there's no like array.
154:18 - And of course, if we don't, yeah, okay, let's
do this dot props. I don't know, I was gonna
154:19 - say that, and then I'll stop. likes. If we
have this array, and that and this array as
154:20 - well has this screen. So we do this dot props
dot user dot likes, and we're going to need
154:21 - to use find the D array, higher order method
or for forgetting, like, so we need to find
154:22 - a like with the like, with this scream ID.
So which equals to this dot props, dot, scream,
154:23 - dot scream, ID, because remember, we have
this, this screen, we have it passed down
154:24 - from the home. So this condition, find returns
undefined if it doesn't find anything. So
154:25 - if it doesn't find one, the condition is false.
So here if it's if, if it's if this is the
154:26 - case, then return true. Else. return false.
always save. So this will this will check
154:27 - if we've liked the screen or not. And we'll
have now two functions for like methods for
154:28 - liking and unliking. And by the way, if you're
wondering why I'm like saying method instead
154:29 - of function because we're inside of a class,
technically, a function that's belonging to
154:30 - a class is called a method, because it operates
on that class alone. So this dot props dot
154:31 - scream, yeah, we just use the slike scream,
and we pass it the ID. So that scream Id let
154:32 - me just copy this because unlike is almost
the same, but we just changed this to unlike
154:33 - scream, you change this as well. Alright,
so here, let's create this button. So inside
154:34 - of the render, let's say const. Like Button
equals, now we're going to have two ternary
154:35 - operators. First thing is we're going to check
if not authenticated. Actually, we need to
154:36 - get authenticated as well from the props.
So here in the props, we have the user because
154:37 - we mapped it from the state. So we do user
from the user we get we get the likes, don't
154:38 - think we get the likes we get authenticated.
Think we only get authenticated. Yeah. So
154:39 - if not authenticated, then what we need to
do is we need to show a button, my
154:40 - button.
154:41 - Tip also, like and inside of this button,
we're gonna have a link. I'm not sure do we
154:42 - have it? Yeah, we we have link important so
link to slash login. So if we're not logged
154:43 - in, it's gonna redirect us to login or we're
gonna use favorite icon or fav not actually
154:44 - is the owner be the empty one. So favorite
border. So yeah, this is called favorite border
154:45 - and the other one is just favorite. So we
show favorite border with the color of primary.
154:46 - And yeah, we close this. It's actually important
those two icons so we can just copy This.
154:47 - And here, replace chart with favorite, because
I want to call the favorite one favorite icon,
154:48 - spaced again. And here, Alt and select these
two and say, a favorite border. Alright, so
154:49 - now we have to both the icons, we can use
them. So yeah, if we're not logged in, we
154:50 - show the empty heart and we flick off, click
on it redirects to the homepage, I mean to
154:51 - the login page. Else, if we are logged in,
we need to do another check now. So our check
154:52 - would be this dot liked scream. Oh, actually,
I called it scheme apparently. So like scream.
154:53 - So like screen. So now if it returns true,
that means we have liked this screen if it's
154:54 - in our likes array. So we need to show a full
heart. So here we say my, my button with the
154:55 - tip. Now because we've already liked it, the
tip should say undo like, and we're going
154:56 - to have an onClick for this. So on click will
trigger the this dot unlike screen. And yeah,
154:57 - we're not going to have any classes. And here
we're going to have the favorite icon with
154:58 - the color of primary. And here, let's copy
this. Else. So if we haven't liked it, we
154:59 - show a button with the tip like and it triggers
like scream. And the icon here would be favorite
155:00 - border. So favorite border. All right, let's
save all of this. And let's, let's see if
155:01 - this is working. So let's go to social ape.
And there we go. We've actually apparently
155:02 - liked all the screams, look at our status,
put them side by side like this. First of
155:03 - all, let me log out. And yeah, we get an empty
heart. And if we press on it, it redirects
155:04 - us to login as login. So user at email. COMM
123456. So here we have three likes, we've
155:05 - liked all the screens, and if I unlike this
Hmm, there's something weird with these. Oh,
155:06 - okay, so it's removing the wrong ones. It's
removing the other ones instead of removing
155:07 - just that. So think, okay, so in the US, okay,
here Yeah, if I unlike a screen, it should
155:08 - filter out the one that is not equal. So it,
it should just leave the other ones that are
155:09 - not equal to that one and remove. So filter
filter removes these one keeps these ones
155:10 - not removed, this one's okay, this should
fix it. Alright, so if I refresh, if I like,
155:11 - call, it shows the number and if you click
on like scream and click on difference, that's
155:12 - what it did it incremented the light count
of that scream in the screams array. And added
155:13 - dislike to our users like array. And it will
do the same here to like, click here different
155:14 - shows you just the difference between the
stage and the last stage. And if I unlike
155:15 - this, the unlike screen action, yeah, decrements
the light count here and removes the like
155:16 - from the likes array. So let's now add a delete
button for deleting our screams. Alright,
155:17 - so in the scream.js component, let's add the
button under the handle right here. So under
155:18 - the typography that's got the handle, actually,
it's gonna depend on a couple of things. So
155:19 - let's do here, delete button. And let's create
this delete button. object. So here, let's
155:20 - say const. Delete button equals, and this
is going to depend on whether we're logged
155:21 - in. And whether we are the owner of this screen.
We don't want to show a delete button on this
155:22 - screen because it's not users scream. We're
going to show the button on this and this
155:23 - and this one. Alright. So here we say, authenticated.
So we need to make sure that we are authenticated.
155:24 - And user handle, which is the handle of this
screen, the user handle of this screen equals,
155:25 - actually, we need to bring. So from here from
user, we need to bring in the handle of this
155:26 - user, the current authenticated user. So it's
inside of credentials. So here we do credentials.
155:27 - And from credentials, we destructor, the handle,
which is handled. And so here, let's say how
155:28 - user handle equals handle. And here, let's
say render this, or actually, it's a ternary
155:29 - operator. Because if it's not, we need to
say no. So it doesn't render anything. So
155:30 - here we, we need to say, we're going to create
a component for this with let's call it the
155:31 - lead, scream, like this. And actually, we
need to pass it the scream ID of this current
155:32 - scream, because the Delete, scream component
will not access any data from the state. So
155:33 - we pass it a scream ID of this scream ID that
we already have of the screen. So let's create
155:34 - this component. So here, I'm going to create
the lead scream, dot j s, let's do our sea
155:35 - top, remove this export. And let's bring in
some of the imports that we have here. We're
155:36 - going to need us just copy all of this, we're
going to need fragment I think we're styles,
155:37 - I don't think we're going to need link or
none of these, actually, I'm gonna need my
155:38 - button. And I'm gonna need some stuff from
the from movie. Actually, because this button
155:39 - is going to open up a dialog. So let's import
we need button. Because the the option, the
155:40 - dialog actions are going to have buttons.
So t y slash co slash button. Now we can just
155:41 - copy this, paste it three more times. Here
Ctrl D, we need dialogue. Control the dialog
155:42 - title. We also need dialogue actions. We need
the icon the Delete icon, which is called
155:43 - delete outline, you can also use the Delete
which is full icon. But I prefer the the outline
155:44 - one because it doesn't. It doesn't distract
too much from the screen itself. You don't
155:45 - want to emphasize the delete button in your
design, so slash actually slash icons, slash
155:46 - delete.
155:47 - outline.
155:48 - All right here, let's bring in Connect. Because
we need Actually, we need to create the the
155:49 - action for deleting a scream. So let's import
delete, scream from Redux slash actions
155:50 - slash
155:51 - data actions. Let's go and create this. So
here at the bottom, let's say export const.
155:52 - Delete. screen, it's got to take the screen
ID. We need dispatch. And here we're not going
155:53 - to do we're not going to dispatch a loading,
we're just gonna send a request axios to delete
155:54 - to backticks, slash scream, slash and we concatenate
the scream ID that we got passed. And here
155:55 - we say dot then we don't need what's written
in the result. There's nothing there's just
155:56 - a message. So here we say we dispatch a action
with a type, which we haven't created yet.
155:57 - Delete, scream. And the payload is going to
be the scream ID that we passed to the to
155:58 - the function, this one. So here, I say dot
catch. error, we just console log it. This
155:59 - is it. Let's actually copy this delete screen.
Important from types and let's create it and
156:00 - types. So it's spot of the data reducer. So
here we say, export const paste Delete screen
156:01 - equals a string delete screen. Let's go to
data reducer, or data reducer. And here, we
156:02 - handle the case. So let's say case, delete
screen. Because the way this is gonna work
156:03 - is that what we can do, we can as well delete
the scream and then call get screams. But
156:04 - I don't think that looks good. Because if
you delete a scream, and then you again, show
156:05 - that all screams are loading, it kind of gives
away that you're actually fetching the screens
156:06 - again. And plus, we actually send an extra
request. And that's not necessary. Because
156:07 - the fact that we get a response here, that
means that the screen is deleted, we can just
156:08 - delete it from the local state because we
know that it's deleted on the server. So what
156:09 - am I doing this custom data data reducer,
and here, we just need to find the index of
156:10 - that scream and remove it from screams. So
here, we say, we can use the same index variable
156:11 - from here, it's already declared here, say
index equals State DOT screams, dot find index.
156:12 - And we need to find the index of the scream
that has a scream dot scream ID. That's the
156:13 - same as the action payload. This is why we
passed that scream ideas action pedal. And
156:14 - now we say State DOT screams, dot splice,
which removes which removes elements of a
156:15 - an array starting from one index, which is
the index and a number of them, which is just
156:16 - one, we just remove that one. And here we
do return and spread the state. Alright, so
156:17 - the auction is done. Now we need to create
the component. Let's connect this and actually
156:18 - let's initialize a state's const styles rather,
object. And here, let's say let's get this
156:19 - let's say, export Connect. Map state to props.
And we need one action, which is the Delete
156:20 - screen. And here we connected to with styles.
We pass the styles. And for the second one,
156:21 - we pass the component. So here let's do const
maps date the props. Actually, no, we don't
156:22 - need anything from the state. So we don't
need a map state to props. so here we can
156:23 - actually just pass No, we just need the action.
Let's create our prototypes. So delete, scream,
156:24 - dot prop types, equals, we have the delayed
scream function. So prop types.funk.as required.
156:25 - We have classes prop types, dot object that
is required. Quiet. And we have the scream
156:26 - ID that we got passed down from from our scream
called scream ID prop types.string.is required.
156:27 - All right, so let's create our component here.
Here in the render, we need our classes const
156:28 - classes.
156:29 - This dot props. Here, let's do return. Wrap
everything in a fragment. So here the first
156:30 - thing will be the button that triggers this
dialogue to open. So my button with a tip.
156:31 - Let's say delete, scream, actually with space
in between. and the onClick will be this dot
156:32 - handle open and the btn class name. Do you
need a btn class? Yeah, we do we need to style
156:33 - this. Let's give classes dot delete button.
Actually not like this. So we close the button
156:34 - like this. And inside the button we need to
have the Delete icon. So delete. outline with
156:35 - a color of secondary wanted to be red because
it's the delete button. Let's create these
156:36 - handler methods. So actually we need to set
the state as well. Because this we need an
156:37 - open very an open Boolean which is false by
default, we need a handle open. She takes
156:38 - nothing and does this dots setstate. Open
true. And we can just copy this and say handle
156:39 - close. Sets date open to false. And we need
as well. One called delete scream, which calls
156:40 - the function as the action this dot props
dot delete screen. And we pass it this dot
156:41 - props dot scream ID, which was passed down
from the screen. So where are we? Yeah, this
156:42 - one right here. So the scream ID, we passed
it here. And then we set the open to false.
156:43 - So once we delete the screen, we close the
dialog. Alright, so under the button here,
156:44 - we actually do our dialogue. So dialogue.
And this will take a while we have yet to
156:45 - open, which is going to be this dot State
DOT open. And the open close, which is this
156:46 - dot handle close. Let's give it a property
of full width. Because I want to specify the
156:47 - width of this and give it max width. Small,
SM, close this. And here we will have a dialogue
156:48 - title. And the dialogue title will simply
say Are you sure you want to delete, oops,
156:49 - delete, I hate the word delete the scream.
And you can as well add like a body that says
156:50 - this action like in between brackets like
this action is not reversible, or guys like
156:51 - Feel free to customize what we're doing. Don't
like if you want to add something you can.
156:52 - So experiment all you want, I actually recommend
that you learn a lot by doing that. So we
156:53 - have now actions, we need to do our actions
which are two buttons, one that cancels, which
156:54 - closes and one that says delete, which actually
confirms the Delete and calls this delete,
156:55 - scream and closes the dialog as well. So the
first one will be button on click. This is
156:56 - the cancel. So it's going to trigger 100 clothes.
And just give it a color of primary. Yeah,
156:57 - that's an inside the button it will say cancel.
Or we could just copy this and add a second
156:58 - one that says delete. And we'll call delete,
scream. And the color will be secondary. We
156:59 - want it to be red. And I think this is it.
Yeah, this is a you had the thing. Oh, we
157:00 - need to style this button. I want it to be
so I want the button. Scream is on the phone
157:01 - and Data Register because we didn't save or
think or did we not? We didn't import it.
157:02 - So delete screen like this. Where's the up?
delayed scream is not defined. It is. So in
157:03 - scream delete. All I didn't import my bad.
157:04 - So here are the top, say import, delete scream
from delete screen. All right. Okay, cool.
157:05 - So we get the button on this right here. But
let's actually test this. Let's delete this
157:06 - another one. So we get a dialog that says
are you sure if we cancel it closes the dialog.
157:07 - And if we click again, it opens it. If I click
Delete, it's gone. And it's removed as well.
157:08 - Instantly from here, cool. But I want to place
this button right here facing the user. So
157:09 - let's do so here let's add this delete button
style. and here we can say left 80% or actually
157:10 - as a string 80%. We need to give this a positive
position of absolute. So you can move it around.
157:11 - So absolute cool. Let's save look at it. Or
is it actually it's right here. Oh, actually,
157:12 - we need to give the court a position of relative
so that the absolute on the button could work.
157:13 - So here in the card. Yeah, this here Let's
put it at the top, let's say position puts
157:14 - session of relative. Now it should this absolute
and refer to the card. Cool. And it does.
157:15 - On let's let's set it right here, actually.
So inspect this. And this button would be,
157:16 - yeah, this button right here. Let's remove
the left because I want to align it with a
157:17 - some of the left for now. And then other top.
So I want to align it exactly what the user
157:18 - here. So say top 5%. Actually, a bit more.
Yeah. 10%. And then actually, the left should
157:19 - be maybe like 90%. As to 90. Yeah, perfect.
It's, it looks much better like this. Alright,
157:20 - so here in the Delete, say left 90%. And then
top of 10%. That's safe. Cool. We got the
157:21 - button on the may remove the inspect window,
and we got the button and it works. we delete
157:22 - this yet another one works. Cool. All right.
Yeah, by the way, guys, I will put a link
157:23 - in the description for the get get repository
for this for all this code. And let me commit
157:24 - right now and show you how I've been committing
this. Let me clear.
157:25 - So git add git commit. This is what part 24
I think. Yeah, it's part 20 as part 25, Part
157:26 - 25. Alright, so git log, let me show you how
you can actually. So
157:27 - what does this get? Log? Yeah. Okay, so part
25 right now. And if you have, let's say you're
157:28 - stuck up, but like 22, or something, you can
just do a git checkout and take this. So it's
157:29 - like, zero, a, two, five, or is that two zero,
F. And here you have the code that exactly
157:30 - part 22. And I only recommend you to get the
code if you're actually completely stuck.
157:31 - And you're like, what the hell, I typed the
exact same code, but mine doesn't work in
157:32 - his works. You can just compare against yours.
So that you see where you actually type something
157:33 - wrong or something like this. I mean, go back
to go check out master. Yeah, so I will put
157:34 - a link in the description for the for the
get repository for this code. So let's add
157:35 - some functionality to our post Screen button
right here. So I wanted to open a dialog.
157:36 - And then in that dialog, we type our scream,
and we press submit, and then it shows it
157:37 - right here. Here, let's create a new component,
call it post scream, dot j s basketcase, of
157:38 - course. And here in the navbar. Let's replace
this first button. Yeah, this one right here.
157:39 - Let's say post scream, close the tag is removed
the Add icon, we don't need it anymore. And
157:40 - here, let's import the component we just created.
Suppose scream from same level post scream.
157:41 - Alright, we are here. So this one is going
to have a dialogue, it's going to need a bunch
157:42 - of things, very similar to the Edit details.
So we can actually copy all of these and then
157:43 - edit it. So let's bring the Redux stuff down.
I prefer to have it at the bottom. And we
157:44 - need Redux react component fragment prop types,
all this stuff we need. We're not going to
157:45 - need auctions. I mean, remove auctions. And
instead, not instead, we also need the circular
157:46 - progress. So So killer progress. I want to
show a spinner one we are sending our request,
157:47 - cemetery UI slash core slash circular progress.
All right, we don't need edit user details.
157:48 - Instead, we need post scream from data actions.
And we need to create that in a moment. And
157:49 - here we say class, post scream, extend extends
component. Here let's do export. Default Connect.
157:50 - We're gonna have a map state to props. And
we only need one action. So let's say here
157:51 - inside this object post screen, we cannot
get with with styles and we pass it styles
157:52 - and the second parameter Is our component
post scream here, let's say const styles.
157:53 - Let's leave it empty for now. Let's do our
prop types. So post scream dot prop
157:54 - types. Here we have post scream. Prop types
dot funk is required. And we're going to need
157:55 - the UI. So say UI,
157:56 - prop types, the object that is required to
map state to props const map state, to props
157:57 - equals takes in the state, and returns the
following. So we just need the UI. So UI is
157:58 - state.ui. Okay, before we carry on, let's
actually create the auction. So let's go to
157:59 - data auctions. And here, I'm going to put
it under the get screen, let's put a comment,
158:00 - say post a scream. And here, let's say, export
const. Post scream, it takes in new scream
158:01 - in his dispatch, as well, so we go through
dispatch. And here I want as well. So we got
158:02 - that loading spinner, we want to show some
loading. So let's dispatch a an action with
158:03 - the type loading UI. After that, let's do
our axios call. So axios dot post, to slash
158:04 - scream. And we pass the new scream as the
data. So that then when you get a response,
158:05 - here, we're going to dispatch a new one a
new type. So this will be type, I'm going
158:06 - to call this post screen. And the payload
will be the response. So restaurant data,
158:07 - which is going to be one screen. And here.
Actually, let's do the catch first. So it
158:08 - would make sense. Because we can get some
validation errors, if you remember, we could
158:09 - have an empty body and it will say like body
must not be empty. so here if we get an error,
158:10 - we need to dispatch set errors. So type set
errors, and the payload is. So error dot response
158:11 - dot data. And here Actually, let's dispatch
a clear errors, just in case there is some
158:12 - errors. So type is clear. errors. Let me make
sure everything is fine. So your post screen
158:13 - restaurant data, will dispatch clear errors.
Okay, everything is fine here. And let me
158:14 - make sure we brought everything. So we need
post scream, which, which I think doesn't
158:15 - exist yet in the types. So it's set errors
and clear errors. And yeah, loading you Why
158:16 - do we have loading UI, we don't loading UI.
Let's go to types and create the ones that
158:17 - we don't have yet. So for data, we need to
say export const. Post screen equals post,
158:18 - scream. And we need loading UI is created
set errors, we need clear errors. So let's
158:19 - say export const, clear errors equals clear
errors. All right, so now we need to go to
158:20 - the data reducer and change the state accordingly.
So here, under here, we say case post screen.
158:21 - So okay, let's bring in the type as well and
actually both screen. so here if we get a
158:22 - scream, we need to add it to our to our screams
array. So here we say return the state as
158:23 - it was. And in screams, we're gonna, we're
going to actually put it at the top. So because
158:24 - it's the newest one, so here we do action
dot payload. And then we spread the rest of
158:25 - State DOT screams. Alright, so we're done
here. Let's save everything and let's go to
158:26 - our post screen and created. So inside of
this component, we're going to have a state
158:27 - we have a dialogue. So we need the open So
initially set to false, we need a body for
158:28 - our screen, which is empty, and potential
errors that we can get, which is an empty
158:29 - object initially. So here we need handle open
and handle close. Doesn't take anything, just
158:30 - this dot set state to open to true. Let's
copy this and do the same for clothes. We're
158:31 - not the same, but we just change the value
of open to false. All right, here we are,
158:32 - let's do our render, render. Let's get errors
in case there's any from the state, oops,
158:33 - this dot state. And let's get our classes.
And we also need the loading from UI. Actually,
158:34 - we need just the loading. So what we can do
here, we can do in map state the prospect
158:35 - to say loading, oops, not like this loading.
And it will be Yeah, we need loading. And
158:36 - here we'll say loading as well. And it will
be the state.ui dot loading. So we get just
158:37 - that. Actually, no, nevermind, I'm wrong,
because errors is stored in there. And we
158:38 - will need errors as well. Oops. Okay, so from
UI here, we need loading. And here, we get
158:39 - these from this dot props will return gonna
have a fragment that's gonna surround everything,
158:40 - and first is going to be the button that triggers
this. So my button is going to have the onClick
158:41 - of this dot handle open. And the tip, oops,
the tip will say, post a screen with an exclamation
158:42 - mark, because it's screaming, of course. And
here we'll have a an Add icon with a color
158:43 - of primary. Or will it be a primary? I don't
think it's going to be a primary because it's
158:44 - going to be blue. So we just say Add icon.
And let's bring the icon. So here, let's do
158:45 - import Add icon from material, UI slash icons
slash add. Here, we're going to have our dialogue.
158:46 - So dialogue. And here, we need a What do we
need an opener? This dot State DOT open, we
158:47 - need an on close. She has this dot handle
close. Let's give it full width, and a max
158:48 - width of SM.
158:49 - All right,
158:50 - here, let's stop. And let's say what do we
need, we need a title first. So actually,
158:51 - I'm going to put a button First, I want to
put like a close button on the top right.
158:52 - So let's say my button. And this will have
a tip that says close. It's just I just wanted
158:53 - to show you like you can do this as well.
I can do a Cancel button. But I just want
158:54 - to show you this style as well as have some
variety. This thought, yeah, this close button
158:55 - as well has handled close when you click it.
So it closes the modal oops, close the dialog.
158:56 - And let's give it a class name because we'll
need to style this. And what do we call this?
158:57 - classes, close button. And inside of here,
I think there is a close icon. Let me check
158:58 - quickly. Summary docs are shiny the material
design. Yep, close, so it's going to be just
158:59 - close. So let's copy this and select our then
Ctrl D and do Close, close icon. So here is
159:00 - a close icon without any color, leave it black.
And here under the button, we need our title.
159:01 - So dialog title. This will say post a new
screen. And under here we need our dialogue
159:02 - content. So dialogue content. And here we're
gonna have a form Say on submit equals this
159:03 - dot handle, submit, haven't created yet. But
we will in a moment, here we'll have a oops,
159:04 - what is this? Here we'll have a text field
with a name, body type of text label of what
159:05 - do we say scream. Because why not? We're gonna
give it multi line because this is going to
159:06 - be a text area. Let's give it three rows.
So rows three, give it a place holder. And
159:07 - that's a, I don't know, scream, scream at
your fellow friends, or apes, since this is
159:08 - social. And of course, we need an error. In
case there's any errors. And here, the error
159:09 - is the the errors dot body, if you remember,
we have that in our validation. So actually,
159:10 - inside the expression, we say, if it's true,
then the true else false. Alright, so here
159:11 - helper text, which will show the error message.
Text like this. And this will say we'll have
159:12 - errors dot body. Of course, if it's undefined,
we're not going to have any text. And here,
159:13 - let's give it a class name of classes, dot
text field, the global text field styling
159:14 - that we have classes, actually, to use the
global styles, we need to take in our our
159:15 - theme sort of theme.
159:16 - And return this and then spread the theme
here. So that we can use the global styles.
159:17 - What's wrong?
159:18 - All because this is not close. Okay? Think
this is it, actually, when you're not the
159:19 - on change, on change. And we'll say this dot
handle change. Say full with Yep, that's it.
159:20 - That's one beefy textfield. Here, we'll put
a submit button. So button. And it's gonna
159:21 - have a type of Submit. variant of contained
because that's the style we went with, we'll
159:22 - continue with that style, a color of none
other than primary. Just give a class name
159:23 - of
159:24 - classes that Submit button. A disabled gonna
do the same thing like the signup form. And
159:25 - the login as well disabled on loading, unloading.
And inside the button, we're gonna have the
159:26 - circular progress. So let's say sir, killer
progress. Let's give it a size of 30. I think
159:27 - the size does matter. Actually, as long as
it's inside something it's going to be it's
159:28 - not going to be bigger than it but you can
experiment and find out. Skip this the progress
159:29 - spinner class, because we need to make this
we need to give it the position of absolute
159:30 - and give this the position of relative so
that this would be centered within the button.
159:31 - Okay, so Oh, yeah, the button is to say, Where
are we? So here? Inside the button, we need
159:32 - to say Submit. Yup, I think this is it. Oh,
actually, what am I saying they're circular
159:33 - progress should only appear if we're loading.
So here we do an expression I cut it actually
159:34 - and you say loading and and not this and and,
and do parentheses and put the circular loading
159:35 - inside of it. Okay, so here and the styles.
Let's style the the submit button. I give
159:36 - it Submit button you met Yep, submit button.
So here let's give this a position of relative
159:37 - and the progress spinner. Give this a position
of absolute
159:38 - and
159:39 - all the close button as well. We need to give
the close button position of CIO position
159:40 - of absolute Unlike absolute, left is given
90% was 90, something like the delete button,
159:41 - guys. And the top. Let's give it 10%. And
I think yeah, this is it. Let's see what this
159:42 - looks like. Just make sure we don't have any
errors. And we do of course.
159:43 - Oh, we
159:44 - already had clear errors. And we removed that.
Yeah, I don't know what that post screen was
159:45 - so stopped and run again and it didn't happen.
Okay, so source selector is not a function.
159:46 - Okay, I added a pair of parentheses here by
mistake. Okay, so for click on post screen,
159:47 - it opens up this modal call this dialogue.
And if I submit, okay, reloads the whole thing.
159:48 - Oh, of course, forgot, right, the handle submit
function, and the own change as well for that
159:49 - matter. So handle change will take the event.
And here we'll say this dot said state. So
159:50 - we have event dot target dot name. And we
set it to event dot target dot value for the
159:51 - handle, submit, submit to extend the event
to event dot prevent fault. And here we use
159:52 - the post screen action so this dot props dot
post scream and we pass it this object with
159:53 - the body. This dot State DOT body. Alright,
let's save. Let's check it out. All right,
159:54 - this is our like dialogue. This is the close
button. If you click it, it closes it supposed
159:55 - to scream. If we actually leave it empty,
we send we don't get the errors. And it shook
159:56 - state roll. We do have an hour. Okay, I need
to do use component will receive props and
159:57 - assigned error. So component or receive props.
Next props. And here let's check for the error.
159:58 - So if next props.ui dot errors, we do this
dot set state errors is next props.ui dot
159:59 - errors. All right, let's check a gun. So if
we tried to send an empty call get an error.
160:00 - And if we say hello, and we click Submit,
okay submits it. And we see which is cool,
160:01 - but it doesn't close the this what we can
do here, but we still have the errors, what
160:02 - we need to do is that we need to check if
there is no errors. And the loading has stopped.
160:03 - We actually from the component received props
close the handle, mean close the the dialog
160:04 - so we can say here if not next props.ui dot
errors. Because we clear the errors on success
160:05 - if you remember from the action. And next
props.or we could just say and not oops. And
160:06 - not, not. Next props.ui dot loading. So if
this is the case, this dot set state actually
160:07 - lets as well empty the body because otherwise
if we open the dialog again, the body will
160:08 - have some text. So we put the body to an empty
string. And we do this dot handle close. Yeah,
160:09 - which will as well. The handle close was well
clear. Actually the handle close should clear
160:10 - the error. So here, we say we said open to
false. And we set the errors to an empty object
160:11 - because if we don't, we're still going to
see the errors. Okay, so here we get errors
160:12 - and we close it. Yeah, we don't get the errors
anymore because we cleared the errors once
160:13 - we close it and if we submit now a new one
I don't know why I saw that error for a second.
160:14 - All because there was already errors in the
state, maybe I'm not clear on them properly.
160:15 - Okay, so we're submitting screens. Cool. So
it works. And it instantly shows them here
160:16 - as delete them. Yeah. So yeah, we're done.
160:17 - A couple of things I want to edit about this
model this dialogue quickly. This button,
160:18 - I want to align it exactly. Okay, let's put
them side by side on align exactly in front
160:19 - of the title. So let's go here. Let me remove
the left so we can align it let me adjust
160:20 - this. Okay, so 6% seems decent. And 90, or
maybe like a bit more, yeah, 90. Yeah, 91.
160:21 - I also want some margin between the submit
button and and I want to put the submit button
160:22 - on the right side as well. So six and 91 that
added these values. So here, yeah, the left
160:23 - is 91. And the top is six, and the button
on a given a property of float right. And
160:24 - some margin. Top think tanks should be fine.
Let's save slick our app. Hope. Yep, the reloads.
160:25 - Okay, reload the gun. Alright, there we go.
Cool. It looks much better. Now. I like the
160:26 - button on the side. One problem with this,
though, that I didn't fix last video is that
160:27 - if I click Submit, and there's some errors
in the state, and I close, these errors are
160:28 - still in the state. So if I click here, I
don't see them, because we only received them
160:29 - using component will receive props, by file
type something and I would submit will quickly
160:30 - see the error. And then it submits. That's
not. That's not very cool noise. Let's fix
160:31 - that. So in the data actions, I'm going to
create a function, let's call it export const.
160:32 - Let's call it clear errors, which does just
that it doesn't take anything we it goes through
160:33 - this patch. And it dispatches the action with
type clear errors, that's it just clears the
160:34 - errors essentially. And yeah, we have that
type. So here, when we get when we close the,
160:35 - the when we close the dialog, we want to clear
the errors as well, just in case. So we aren't
160:36 - clear errors here when we close the dialog.
So let's bring it in as well. So clear. errors.
160:37 - Let's copy it. Let's add it here in our map
actions to props. And let's add it as a prop
160:38 - type. And it's the same as this we can copy
this colon and paste this. And let's Oh prop
160:39 - types not rock types. Let's save.
160:40 - Oh shit, I
160:41 - didn't mean to open that. Alright, failed
to compile clear errors is not exported or
160:42 - because I didn't save all files and save all
files. We go Okay, so we open post the screen
160:43 - will close it. Whoa, what is this maximum
update depth exceeded there must be like an
160:44 - infinite loop or something. So handle clothes.
So setstate under clothes and unclear ORS.
160:45 - Hmm.
160:46 - As no UI reducer, so clear set loading false,
or is No. Oh, I see. There's an infinite loop
160:47 - here. Because whenever we call handle close,
it calls clear errors, which sets the errors
160:48 - to know and loading to false, which triggers
this again, which triggers handle close. So
160:49 - there's like an infinite loop. So we can solve
it by here, instead of calling handle close,
160:50 - we can manually close without calling this
function so that it doesn't loop. So we can
160:51 - just give it this. Actually, you could just
copy this stuff over here. So yeah, we can
160:52 - close it without calling handle close, which
shouldn't have an infinite loop. So if we
160:53 - open here, and we close, cool, it doesn't
bug out. And if we type something and we get
160:54 - an error, oh no, no, we don't get nearby.
Alright, so if you get an error like this
160:55 - and we close it. Now we shouldn't get an error
once we submit. Cool and we don't nice, the
160:56 - errors are being cleared once we close the
dialog All right, let's actually start working
160:57 - on the on the button that let us expand our
screens and see all the details of one screen.
160:58 - Alright, let me close this dev tools. Let's
go. Here, let's create a file called screen
160:59 - dialogue. Actually, let's start by creating
an action. Because we're going to need the
161:00 - action that gets only one screen with all
the details. So here, let's add data actions.
161:01 - Let's export const, get scream without s,
so singular, and we pass it the scream, Id
161:02 - need this patch as well. And here for loading,
I'm going to use the UI loading and not the
161:03 - loading that's inside of screams or inside
of the scream. Yeah, the data reducer. So
161:04 - here, we dispatch an action with the type
loading UI. And here we do axios dot get template
161:05 - strings slash scream, slash, we pass it that
scream ID. And here, we do that, then I get
161:06 - a result. And we need to dispatch a new type.
Summon to enter the type set screen without
161:07 - an S on imports that automatically and the
payload is the rest of data. And here after
161:08 - we need to stop loading, because it doesn't,
nothing changes the loading from the UI to
161:09 - false if we don't do it manually, first. So
dispatch type stop loading UI, which we haven't
161:10 - created yet. And here we have any error. We
What do we do, we just console log, I guess
161:11 - we'll never have an error unless our databases
corrupt or something. So let's go to UI reducer
161:12 - and handle the stop loading UI. So case, stop
loading, slow loading UI. Here, we just return
161:13 - the state as it is. And we set loading to
false. So the opposite of loading UI, basically,
161:14 - let's copy this. Let's go up here. Let's import
it, as do the same in data actions. Let's
161:15 - go to our types. And we have set screen, we
only need to create the the stop loading UI,
161:16 - export const, paste, and paste again. Alright,
let's go to our to our scream card. And here,
161:17 - let's import our scream dialog. Import scream,
scream dialog from the same directory. And
161:18 - let's put it at the bottom. Right here at
the end of the chord content. So screen dialogue,
161:19 - we're gonna pass it the scream ID
161:20 - so that it uses that to fetches the screen
so that it knows which screen to get. We're
161:21 - gonna pass the user handle which we will need
way later. Use a handle. Alright, we're done
161:22 - here. Let's close this. Let's close all of
these. We don't need to use them anymore.
161:23 - Let's save this and close it. Make sure we
don't have any errors we don't cool. Here,
161:24 - we're going to need a bunch of things similar
to what is it to post screen. So let's take
161:25 - these, paste them here. We're going to need
de j s as well to show when a screen was posted.
161:26 - So import day j s from day j s. We're going
to need link to have a link to the user that
161:27 - posted this screen. So no react user what
react router DOM and here we're going to need
161:28 - a bunch of material UI stuff which is let's
let's copy from the the post scream this stuff
161:29 - the dialogue stuff. We need a copy from here
to here. We don't need to add icon. So instead,
161:30 - we can just put a common a common saying icons.
And here we need the grid, because I'm going
161:31 - to split the card into two sides, one side
has the picture on size has the details
161:32 - from
161:33 - material, UI slash core slash grid. And we're
gonna need typography, of course,
161:34 - typography. And we're gonna need the Redux
stuff. So Connect, and we're gonna get scream.
161:35 - Let's create an empty styles. Array object
for now, let's say class. Scream, dialog,
161:36 - extends, component. And here, let's do the
prop types. So scream, dialog, prop prop types,
161:37 - we're going to have the get screen function.
161:38 - So a prop
161:39 - types.funk.is. required. We're gonna have
the scream ID from passed down. So prop types.string.is
161:40 - required. We're going to have the user handle,
we got passed down as well. Prop types.string.is
161:41 - required. And from the state, we're going
to get the screen the object is required.
161:42 - And we can just copy this same thing for the
UI, we need the UI for loading. and here we
161:43 - can do our map state to props to take the
state and return the following. What do we
161:44 - need, we need the screen which will be in
State DOT data dot scream. And we need the
161:45 - UI which is in state the UI. All right, when
we're going to see map, action const map actions
161:46 - to props. For now it's just gonna have get
screens get screen.
161:47 - I need to export the fault. Connect map state
to props, map actions to props and who have
161:48 - passed with styles. Styles, and the second
will be scream dialog. Alright, so in our
161:49 - component, so this is a dialogue. So we need
a in our state, we need an open Boolean, which
161:50 - is false by default, we the handle open which
sets the state open is true. Let's copy it,
161:51 - paste that change this with close and open
false. All right. Actually, we need to call
161:52 - here when we open the screen we need to call
the get screams because when we caught when
161:53 - we open the screen we need to when we open
the dialog we need to send a request to our
161:54 - server to get our scream so we call the get
scream and we pass it the ID this dot props
161:55 - dot scream ID that we got passed down from
the scream card. And here inside of we need
161:56 - to create the render render inside of here
let's get so let's do const let's get classes.
161:57 - Let's get the scream. And this will be because
get scream is going to get us the scream and
161:58 - set it in our props as the screen because
we get it from the state here. So here from
161:59 - scream are going to get everything so it's
great scream ID we need the body. We need
162:00 - the credit Related art, we need the like count.
We need a comment count, even though we're
162:01 - not going to use all of them in this video,
but let's get all of them anyway, we need
162:02 - the user image we need, what else user handle?
And after scream actually, why did I do a
162:03 - scream twice? Like this. And here like this
after scream, we need to get the loading from
162:04 - you Why? So you why. And with the structure
loading from it. And all of this equals this
162:05 - dot props. Let's save. So it formats. And
here after we get all the stuff, we need to
162:06 - return a fragment. Why is it not closing?
Come on, fragment? Oh, what am I doing this
162:07 - is inside the render. So inside the fragment
first thing, of course, is the button that
162:08 - opens this dialog. So my button and the onClick
will be this dot handle open. And the tip
162:09 - will say expand, scream. And we'll have we'll
have to style it. So let's do tip class name.
162:10 - Let's say classes dot expand button. And Yep,
inside the button, we will have an icon. This
162:11 - will be the unfold more. And with a color
of primary. Actually, I forgot to import this.
162:12 - So here let's copy this and select this old
select this and say on fold more. So yeah,
162:13 - we have the icon. After we put our dialogue,
so dialogue, lock, close it, we can actually
162:14 - get the stuff from post screen. It's exactly
the same. Actually, even the close button
162:15 - will be the same I think let's copy all of
this. So let's go back here. Let's do this.
162:16 - Yeah, this dot state open handle close for
with max width. And the button close has the
162:17 - onClick contact, close and close button as
the class call. Alright, so here after the
162:18 - button right here, we put our content. So
I say dialogue content. And let's give this
162:19 - a class name of classes dot dialog content.
162:20 - And here because we need to check for loading
or not, let's say dialog, markup. And here
162:21 - after all this stuff, let's say const. Dialogue
markup equals if loading. Then we're going
162:22 - to use our brought in the the circular progress.
So here, let's say circular progress on this
162:23 - needs to be massive. So sighs let's give 200.
And yeah, this is it. And also, if we're not
162:24 - loading, then we need to show me the grid
container. spacing, let's give a spacing of
162:25 - 16. Why didn't close it, grid. And here we
need items. So grid item. This is the site
162:26 - for the image. So I'm going to give it a width
of five. So SM five. And here we'll put an
162:27 - image source will be user image. And the old
let's say profile. And here let's say let's
162:28 - give it a class name because we need to style
this image profile image. And let's copy this.
162:29 - Actually, it would have been faster if I typed
it but whatever. Actually, maybe not. And
162:30 - here we will. First thing we need to show
is the handle of whoever typed this in whoever
162:31 - posted the screen typography and then here
we'll have a component link because this needs
162:32 - to link to the Users page. Karla primary,
and here we give a variant similar to the
162:33 - scream card actually exactly the same variant
of H five. And this will go to still backticks
162:34 - slash users slash, dollar sign curly braces,
use a handle. And here, let's close the typography.
162:35 - Actually, no, let's close it like this, because
we need to write stuff inside of it. And here's
162:36 - the art. And then we concatenate the user
handle. I misspelled user handle here like
162:37 - this. Cool. After the typography, we need
to put a horizontal ruler, but I need to click
162:38 - to style this. So let's call this let's call
this I don't know, invisible separator. And
162:39 - let's go up here in our styles, I think we
might, we might need the global styles. So
162:40 - let's do a steak theme. And then return and
then spread theme here. And this invisible
162:41 - separator will have a border of non because
a horizontal rulers, by default Have some
162:42 - water, I don't want to, I don't want it to
be visible. And let's give it a margin of
162:43 - four. So it creates some space between our
elements. So let's close this tag. And here
162:44 - we get our created art. We put one This one,
this was when this screen was posted. So here,
162:45 - the variant will be body two. And let's give
this a color. Same like the in the scream
162:46 - card, that color of text secondary. So it's
kind of great to know why these tags are not
162:47 - closing again. So oops, inside of typography,
here, stone expression de j s, and we pass
162:48 - it the created art. And we do dot format.
And I've written this in front of myself in
162:49 - a piece of paper, let me check. So it's H,
colon, dash, a, I mean space a comma, capital
162:50 - M, Double D, quadruple y. So this is the format
of the date. And here we'll have another HR
162:51 - with a class name of classes dot invisible
separator again. And here we'll put the body
162:52 - so say typography. And here, let's have a
variant of body one. That's it. And here,
162:53 - we just put body. All right.
162:54 - This is it for now, let's save. Let's check
if we have any errors. We don't. Cool. All
162:55 - right, so we get this expand button. And if
we click it, we get nothing. Let's look at
162:56 - our state. Receive truffe one on Boolean attribute
container. That's interesting. And here in
162:57 - our state, look at the data. We're not getting
scream for some reason. Hmm, this dot props
162:58 - dot get screen. Oh, because in the data register,
I forgot to handle the type. Or the Yeah,
162:59 - the type gets set screen. So here, let's say
case, set, scream, scream like this. And here
163:00 - we need to Oh my god, no. Really, come on.
Okay. Sorry about my cups, guys. So state
163:01 - and here we set the scream the singular scream
to simply action dot payload. Let's save.
163:02 - And this time, let's check, we expand. Cool
we get our screen we get all the details of
163:03 - our scream. And if we look here, in our state,
in our data in the singular scream, we get
163:04 - this scream. So let me change the view to
the tree. So yeah, we get that scream and
163:05 - then if we go to this screen, it will know
here it will change to that screen. All right,
163:06 - so let's style the image. Because right now
it's massive. In the dialogue dialog here
163:07 - in the styles, let me close the terminal.
And here, the profile image, give it a max
163:08 - width of 200 or 200, not 300. And let's give
it a height. Same 200, I want it to be circular.
163:09 - So let's give it a border radius of 50%. And
us give it object fit of cover in case the
163:10 - ratio doesn't match the one by one so that
it doesn't stretch it. And here as well, I
163:11 - want to style the content. Because right now
all the oldest stuff is kind of going to the
163:12 - edges as well. It's too close to edges, I
want to have some padding, so to push it a
163:13 - bit in. So let's do dialogue content. And
here, we're just going to give it a padding
163:14 - of 20. Let's save. Let's go here. Let's, let's
make this button go to the right. And now
163:15 - this is container. All right, so our grid
is behaving properly. Now this button is to
163:16 - take to go to the right. So here we say. Close
button. And what do is position? Absolute.
163:17 - And here we say left 90%. Cool, but some reason
the padding is not working. So what is the
163:18 - padding dialog content? So class name equals
class name, that dialogue content actually
163:19 - with lowercase d? All right, cool. So we're
getting our details inside of the screen.
163:20 - And yeah, looks it looks okay for now. So
here, want to fix some styling. Before we
163:21 - do anything, I want to bring this button to
the right, so it's more visible. So let's
163:22 - go to scream, scream dialog. And we've actually
given it a class, I believe, where is it?
163:23 - Yeah, expand button. Let's copy this. We've
given it a class, but we didn't style it.
163:24 - So here, let's do expand button. And here,
let's do position.
163:25 - Absolute. Let's give it a left of 90%. Let's
see what it looks like now. we refresh. Cool.
163:26 - It's on the right now. All right, I want to
move this button as well move it a bit down.
163:27 - So it faces the user. And I want to change
the styling. By the way, you can go to Redux.
163:28 - And if you have something that's like going
too fast, for example, the loading stage here,
163:29 - the loading UI, we can go back one level and
just pause there and you can see your animation,
163:30 - or whatever you have, and you can style it.
So this I want to bring it to the middle.
163:31 - And I want it to be a bit less thick than
then what it is right now. So let's go to
163:32 - our code. And here. Where is it? So I'm going
to put it in a diff? Well, we kind of have
163:33 - to so let's do div. And let's paste it in.
And we're gonna change the thickness. This
163:34 - can take a value for thickness. I'm going
to give it to and here the div will have a
163:35 - class name. And it will be classes dot scollard,
spinner, Dev. And here. Let's do spinner
163:36 - div.
163:37 - Let's give it a text align. of center. So
aligned to the center. Let's give it some
163:38 - margin on the top and bottom. So a margin
top 50 and margin. Bottom 50. Let's see what
163:39 - it looks like. Here. Alright, we expand. us
go back. Yeah, cool. It's in the middle and
163:40 - it's less thick. It looks much better and
the button is a bit to the left now. Let's
163:41 - actually remove this just Yeah. Alright, so
it looks much better now. Alright, so now
163:42 - what we want to work on is the action buttons.
So this like button here and the common button
163:43 - which does nothing, but it's just an icon,
and the number of comments and likes here
163:44 - as well the same as in the screen. So what
I thought about is that since they're the
163:45 - same, we can go to the screen and this like
button, or we can make it into its own component,
163:46 - because we will need it in the scream dialog
as well. And one of the good things that you
163:47 - will do one of the best practices is to try
and keep your components as small as possible.
163:48 - And I noticed the screen dialog will be really
massive if we don't divide it into further
163:49 - components. So here in components, let's create
a Like button, button dot j s. And here, we
163:50 - can actually cut this. Oops, bring it in.
Let's do ice top. Here in the render, we can
163:51 - say return like button. And before that, we
can say const like button, and we need to
163:52 - get authenticated from the state. So we need
the user, we need a couple of things actually
163:53 - here. So we need my button. Because we're
using it from the same level. Actually, it's
163:54 - in the youtell. Go back one level slash utils
slash my button when need link, so import
163:55 - link from react router DOM. We need prop types.
Of course, we need the icons that we have
163:56 - here. So icons, say import, we can actually
just cut to these from here because we don't
163:57 - need them. So paste them here. We need connect
from react Redux. And we need to bring the
163:58 - like and unlike auctions, we don't need the
oops, we don't need them here anymore. So
163:59 - we can cut this line. We can go down here,
we can remove them from the prop types. And
164:00 - we can remove this map actions to props for
now. And yeah, let's save let's go here. Let's
164:01 - paste it here. And here, we're going to have
prop types sold like button dot prop types.
164:02 - We we need to access the user to user let's
say prop types.object.is required. We need
164:03 - the scream Id actually we were going to pass
it down. So to say prop types dot string that
164:04 - is required. We need the two functions. So
like scream, pro prop types dot funk that
164:05 - is required. We can copy this line and just
add on here. And here we export the fault
164:06 - that's called this Connect map state to props,
map actions to props. connected with this
164:07 - we don't need styles because we have no styles
here can say const. Map state to props equals
164:08 - takes the state and returns we need the user
state user we need to create the map oops
164:09 - map actions to props. So we'll have the like
scream and the unlike on like scream like
164:10 - this. So here the same actually we need to
cut to these functions as well. So like scream
164:11 - and unlike scream. And here for the here instead
of like button here. We do the component like
164:12 - button and we pass it a scream ID of scream
ID
164:13 - because we've disrupted it from the screen
right here. And here we need to import it
164:14 - for like button from Same level like button.
And here in like button inside the component,
164:15 - we need to paste those functions. And here,
this approach, the user likes everything.
164:16 - And here we check if the like, scream equals
this dot props dot scream ID, because we don't
164:17 - have a scream, we have a scream ID. And actually,
we need that in the URL, we have that in the
164:18 - prop types already. This is like button with
a lowercase L. Here, we need to say this dot
164:19 - props, dot scream ID. And here the same thing.
And here we need to get authenticated. So
164:20 - const authenticated from this dot props dot
user. And authenticated. And yeah, I think
164:21 - this is for this component, and we save there.
And we save here as well. As check if we have
164:22 - any errors. We don't. Let's check our app,
see if the button is working properly. And
164:23 - it is working the same if we refresh to make
sure that Yep, it's working the same way.
164:24 - If we log out, or click on the like button,
or it doesn't redirect, us check the console.
164:25 - Or this is not working. Everything looks okay.
Let me check again. Oh, it's actually working.
164:26 - Oh, I see. Because if we click on the side,
that doesn't work, because there's just as
164:27 - big as the icon itself. So what we can do
is we can, we can surround the whole button
164:28 - with the link. So let's put this outside,
let's put the whole button inside of the link.
164:29 - Yeah, and this way it works. Even if we click
on the sides, the whole thing is the link
164:30 - now. Alright, so let's do the same thing inside
of here. Let's show these two things here.
164:31 - So now that we have it in its own component,
we can just use it like that in the screen
164:32 - dialog. So let's go to scream dialog. Under
the body. So right here, we can see like button
164:33 - and pass a scream ID of scream ID. And we
have it Yeah, we how we got it from the screen.
164:34 - And under that we need to say we need to have
a span. And you will have like count count,
164:35 - like in the scream card. And here we say likes.
And we will have as well the we can copy this
164:36 - actually from screen, this comment button
and the comments icon and the comments text.
164:37 - So let's save. Actually we need to import
it as well. So here let's say import like
164:38 - button from same level like button. Let's
save see if we have any errors we do. Chat
164:39 - icon is not defined. Sure we don't need this
dialog title. And here let's bring the icon
164:40 - we can copy all this. And here's the Chat
Chat icon. And here say just chat. Space save.
164:41 - We have no errors. Cool. All right, let's
with get the same button Actually, we have
164:42 - to log in because we're logged out. Alright,
so here if I expand cool, we see the buttons
164:43 - here. And if we click it turns into full Oh,
but the the like count doesn't update here.
164:44 - Let's check our state data. scream. Do we
have any error? The prop uses marked required
164:45 - an auth route, but the values undefined.
164:46 - Okay, this because when we log out, it's okay.
We'll fix this later. All right. So the light
164:47 - count is not changing. I think because the
the screen is not updating. Yeah, so the scream
164:48 - like count is not updating. We need to update
it. So let's go to data reducer. And right
164:49 - here when we like or unlike the screen, we
need to do a check. So if State DOT screen
164:50 - singular dot scream, ID, so we need to check
when we like a scream, we need to check that
164:51 - scream that's stored in the singular scream
object. If they have the same ID, that means
164:52 - we're like the scream that we have open. So
we need to update the scream, the singular
164:53 - scream with this data that we get back from
the like, or unlike route, which is the scream
164:54 - with the like, count updated. So we do if
it equals action, dot payload, dot scream,
164:55 - ID, then we just do State DOT scream equals
action dot payload. It should fix it. We open
164:56 - up here, and let's open the state as well
to check. We like cool and we get this updated
164:57 - and the like screamers. Look at the difference.
Yeah, it no here, yeah, incremented the count.
164:58 - And if we unlike it, decrements. So it updates
the data. So this is the current state of
164:59 - our screen dialog, it has only the details
of the screen, I want to add a section where
165:00 - we display the comments that are submitted
to each screen in this dialog. So let's do
165:01 - that. I'm actually going to create a couple
of folders here to organize our components
165:02 - more otherwise, it's going to be less navigatable.
So let's create a folder called screen. And
165:03 - another one called layout, and another one
called profile. So in the layout, we're going
165:04 - to put the navbar. And then we're going to
put the profile and edit details in the profile
165:05 - folder. And the rest of them will go to the
screen. Alright, so VS code should fix the
165:06 - the relative imports and change the directories.
Actually here and now bar, the post screen
165:07 - would come from we go back one level, and
we go into screen slash post screen. And the
165:08 - rest should be fine. In edit details is changing
automatically. And it's opening up it open
165:09 - in the mob, because it's changing them right
now. And we need to save all files and close
165:10 - this. Let's go to app. And here, we get the
navbar we're going to get it from slash components
165:11 - slash layout slash navbar. And in the home
as well. here where we get the screen, we
165:12 - get it from slash scream slash scream. And
from profile, we get it from slash profile
165:13 - slash profile. Save. Cool, no more errors.
Let's go to actually let's get rid of this
165:14 - warning. So let's go to home and remove axios.
We don't need it there anymore. Let's save
165:15 - cool, we have no warnings. And our app works
the same way it did earlier. All right. So
165:16 - let's add the comments. And let's go to the
screen dialog. Here. We're going to import
165:17 - a component that we haven't created yet. Let's
do import comments
165:18 - from
165:19 - see this would be in the same directory. So
comments like this. And let's go at the bottom.
165:20 - So here when we are actually not loading,
and we are rendering stuff, let's go here
165:21 - under this grid right here. So here, let's
do comments. And we need to pass it our comments.
165:22 - So let's pass a prop comments with the value
comments. And this comment referred to refers
165:23 - to the actually we haven't extracted it yet
haven't disrupted it. So let's do that. So
165:24 - it's going to be this comment from inside
the screen. Because if you remember from the
165:25 - API, if we go to Redux go to the state. For
look at data screen, we have an array of comments.
165:26 - And if we don't have any comments, it will
be an empty array. So here we do our comments.
165:27 - And let's save this let's go here in scream
Oh, there's a problem cannot resolve comments
165:28 - because we haven't created that yet. In scream
let's create comments dot j s. Actually before
165:29 - the comment section I want to add a separator.
So here let's do HR class name is classes.
165:30 - And unlike the one we have already, this is
going to be the visible separator. separator
165:31 - and I want to move the code the styling for
the invisible separator from here to the global
165:32 - theme So let's go to utils theme, unless based
at the bottom, because we're going to need
165:33 - it in comments as well. And here, let's do
visible separator. And this one is going to
165:34 - have a width of 100%. And as a string, actually,
because this is JavaScript, and it's going
165:35 - to have a border button of one pixel solid,
let's give it a gray. So I'm going to do RGBA
165:36 - 000. So so far, it's just black, and we give
it the opacity of 10%, or 0.1. This is going
165:37 - to be a light gray. So let's give it a margin
bottom of 20 pixels. All right, so this is
165:38 - visible, let me make sure I didn't misspell
anything I didn't call. Alright, let's go
165:39 - to comments. And here we're going to bring
in these three, so react component, fragment
165:40 - with styles and prop types. Here, we're going
to need some movie stuff. I know already,
165:41 - we're gonna need the grid. So import grid
from material, material UI slash core slash
165:42 - and grid. an import typography from the same
material was slash core slash typography.
165:43 - Alright, let's initialize a styles. Actually,
we need the global theme. So let's take the
165:44 - theme and return this object. Let's spread
the theme for now. And here, let's do our
165:45 - class. Comments, extends, extends, component.
And, here, let's do our prop types. So comments
165:46 - dot Prop, prop types, here, we're only going
to have the comments that are passed on. So
165:47 - this would be a prop types dot array that
is required. And here, let's do export default.
165:48 - With styles, styles, and comments. All right
here in the component, we're gonna have the
165:49 - render, render. And here, let's extract the
comments to const comments. From the props,
165:50 - this stop props. And, yeah, we need to return
something I saved, but doesn't like it. Actually,
165:51 - we need the classes as well. So classes here,
let's do return. Here, we're gonna have a
165:52 - grid container, because this is the container.
And inside of this, we're going to have, what
165:53 - are we going to have? We're going to look
through the comments. So let's do comments.
165:54 - dot map. And for each comment, we're gonna
actually, let's do curly braces, because we
165:55 - need to destructure the stuff from inside
comments. And if you remember, comments, me
165:56 - check the singular comment, actually, we don't
have one as a problem, you need to save her.
165:57 - Anyway, I just want to show you in the state
that the comment the comments will have a
165:58 - four four keys. So body, I just want to remind
you probably know this body created art and
165:59 - use the image and the user handle. So we get
these from comment. So equals comment. And
166:00 - here we do return. So inside we are inside
the grid, the container grid, so let's do
166:01 - a fragment. And since this is a we're looping
through something, because I'm going to learn
166:02 - in react, we need to give it a key and let's
use the created art as a key because it almost
166:03 - never will be not unique. Okay, so here, let's
say grid. And this will be an item. Let's
166:04 - give it a width of 12. And inside of here,
we're gonna actually nest another grid. So
166:05 - let's say grid container. Because inside of
each comment, we're gonna have a left grid
166:06 - item there where there's a picture, the image
and on the right, there's the details of the
166:07 - comment. So here this is, here we have the
picture. So grid item, as equals, we're gonna
166:08 - have again a width of two inside of it, we're
gonna have the image with the source user
166:09 - image. The alternative, let's say comment,
we're gonna have, we're gonna give it a class
166:10 - because otherwise, we need to start it otherwise
is going to be massive. So let's give this
166:11 - classes dot comment image. On after this,
we're going to have a grid item. With SM nine,
166:12 - we don't actually have to specify this because
material UI can automatically give it the
166:13 - width nine. But it just looks more readable
in my opinion. So there's let's give this
166:14 - a class name of classes. or comment, data,
and style, this div lighter. And inside of
166:15 - this div, we're first thing is going to have
we're gonna have the, the handle of the user
166:16 - as a link. So typography variant. Let's give
it a head of five similar to the one in the
166:17 - scream card. So component, B link, do we import
linkwithin Let's import link import link.
166:18 - From react router DOM. Here the component
is linked the two will be so backticks slash
166:19 - users slash dollar sign curly braces user
user handle. All right, we're gonna give it
166:20 - a color of primary. And here, let's close
this. Now actually, here we close it. And
166:21 - inside of the typography, we're gonna have
the handles. So let's say art or without an
166:22 - art, actually, let's just put the user handle
166:23 - on here are actually in close this done on
what this curly brace I added here for?
166:24 - Hey, we need to show the one the one The comment
was submitted. So typography, the variant
166:25 - of body two with a color of text secondary.
And inside of here, we're going to format
166:26 - the date Actually, let's import ajs. For digests
from DHS, and inside this expression, we're
166:27 - gonna say d, j, s and pass it the created
art dot format. And here, let's format to
166:28 - have this in front of me H, colon. Space a
call corner, quadruple capital M, d, d, and
166:29 - quadruple y. Alright, so under here we're
going to have a separator, so HR with the
166:30 - class name, classes dot invisible is Bo, separator.
Oops, here, we're gonna have the body. So
166:31 - let's say typography. But the very end variant
of body one. And inside of here, we'll put
166:32 - body
166:33 - and
166:34 - yeah, I think this is it actually has a ruler
between them. So let's do here, let's say
166:35 - HR. Class Name of classes dot visible separator.
Actually visible not invisible. Alright, let's
166:36 - save. Let's save everything. Let's see what
this looks like. So we open up here. Oh, yeah,
166:37 - I forgot to style the image. So let's go here.
So in the styles, that's the most common image.
166:38 - Here let's give it a max width of 100 or 100%.
Near let's give it a height of 100. An object
166:39 - fit in case the ratios are actually one by
one of cover. And let's give it a border radius
166:40 - of 50%. So it's rounded 50 percent. And here
we need to style this div as well. Because
166:41 - I want to give it some margin between an image.
So it's a comment, data. margin, left, margin,
166:42 - chin left, have a say 20 pixels 20. At save.
Look at our depth. So here, cool. If we look
166:43 - at here, we push the rule, actually, we need
to not put the ruler after the last comment.
166:44 - So what we can do we need to access the index.
So yeah, the map gives us actually access
166:45 - to a second parameter of index, and gives
us where in which index we are. So here, let's
166:46 - take this ruler. And let's put a condition
here, let's say. So you always want the ruler
166:47 - unless we're in the last index. So let's say
index does not equal if index does not equal
166:48 - the last index. So comments, dot length, minus
one. So if it doesn't equal the last index,
166:49 - then give us the ruler, so render the rule
otherwise, don't render it. So on the last
166:50 - one, it doesn't render it. So yeah, now it
doesn't run the ruler under the last comment.
166:51 - Cool. All right, so we got our comments. So
now that we're showing comments, let's actually
166:52 - show a comment input or comment form right
here that allows us to submit comments as
166:53 - go to scream dialog. And I'm going to create
a component for this. Actually, it's not going
166:54 - to be here, it's going to be under the separator,
sort of a comment form. And we're gonna pass
166:55 - it the scream ID, because we need this one
we're sending one, we're sending a request
166:56 - to that endpoint. By the way, I'm not just
creating a component just for the sake of
166:57 - it, it's better to divide your application
into smaller components. Because if I were
166:58 - to put the code here on all the functionality
and bring the functions from the Redux actions,
166:59 - it's going to bloat this one component. So
it's good to separate your components. Plus,
167:00 - it helps when debugging, the problem happens,
you will know exactly where it came from.
167:01 - So let's import this. So let's go up here.
So import comment form, from same directory
167:02 - comment
167:03 - form.
167:04 - Alright, let's create this in the scream directory.
Let's say comment, form dot j, s. And here
167:05 - before we write anything, let's actually create
the action, the Redux action. Let's go to
167:06 - Redux actions. Let's actually create a type
for this first. So here, let's say export.
167:07 - const. Submit. Comment. Which equals, actually,
it's not a string here. What am I doing? Here
167:08 - is submit. fuckin type comment. Alright. I
submit comment. Yeah, didn't misspell anything.
167:09 - Here in data actions. Let's bring it in. Submit,
comment. Let's go under the unlike here, let's
167:10 - say, submit a comment. Here. Let's do export
const. Submit comment. equals, and due to
167:11 - the nature of the endpoint, we need the scream
ID. So let's take the scream ID. And let's
167:12 - take the common data. We need dispatch. So
let's return dispatch. And then do the following.
167:13 - So here, I'm going to say axios dot post.
And the endpoint is slash scream, slash the
167:14 - scream ID. So put a variable here scream,
Id slash comment. And here we pass the comment,
167:15 - data returns a promise. So then Russ, here
with dispatch, the type that we just created.
167:16 - So type, submit, comment, and the payload,
which the payload which when we submit a comment,
167:17 - we get that comment back. So let's do the
payload is rest or data. We'll show you in
167:18 - a second what we're going to do with the payload.
Here we dispatch clear errors. Since we have
167:19 - the function clear errors here, which by the
way, this is called a an action creator when
167:20 - you create a function that just dispatches
an action. So let's dispatch this action creator
167:21 - and we call it Like this. And actually, let's
look where we have clear errors and replace
167:22 - it with. Let's Let's search for clear errors.
Yeah. So where else actually we have somewhere
167:23 - else where we have, I think, yeah, here, we
can just dispatch clear. Oops, clear errors,
167:24 - the function. Cool. All right. So let's go
back to our Submit. With dispatch this. Are
167:25 - these are curly braces Not, not square, like
this. And here, we see a catch. And we can
167:26 - actually get validation errors for the comment,
because if it's empty, we get an error for
167:27 - that. So we need to dispatch set error. So
type, set errors, and the payload will be
167:28 - the error dot response dot data.
167:29 - Alright, let's save this. Let's go to the
data reducer and handle this. Submit comment
167:30 - is not exported, or because we didn't save
her. So here let's do or I didn't save, maybe
167:31 - you saved? I don't know. Submit comment? And
I think it's important. Yep. And here, let's
167:32 - say, what do we do? We need to Okay, let me
do return first. Sometimes it's hard to talk
167:33 - and type at the same time. All right, let's
spread the state. And what we need to do is
167:34 - that, we get this comment back. And since
we have opened this screams dialogue, so this
167:35 - is in this singular scream object, we need
to add this comment that we get back to the
167:36 - comment array in this in the screen. So if
we look here, just to reiterate, so here,
167:37 - if we open up this, let's say the screen,
let's go to our dev tools, we go to our state.
167:38 - So inside data screen, we have this array
of comments, what we need to do, we need to
167:39 - get that comment and put it at the top. So
if we were to put a comment here, it will
167:40 - be at the top here, because it's the newest
one. And here so what we need to do is we
167:41 - spread the state and we say, scream, which
and then we spread our existing screen. So
167:42 - status screen. And here we say comments. And
inside of comments. We say action dot payload,
167:43 - which is the comment that we just submitted.
And then we spread the rest of the comments.
167:44 - So spread State DOT scream dot comments. All
right, let's save. Now let's go to our comment
167:45 - form. Hey, we need a couple of things. Let's
get the these three. A safe first ice tub,
167:46 - remove this export here, and then paste here.
Here, we're going to need some movie stuff
167:47 - as well. So movie stuff, let's get, we're
going to need the button, the submit button
167:48 - of the form. So from material UI slash core
slash button. Let's copy this two more times,
167:49 - we're going to need the grid because we're
already remember we're already integrated
167:50 - because of the screen dialog. And here we're
going to need the text field. Alright, let's
167:51 - do a styles const styles equals theme. And
then returns we're going to need the textfield
167:52 - styling. So to spread the theme. I don't think
we have any styling for this component. So
167:53 - let's leave it like that. Here we have a state.
Since we have a form, we'll have the body
167:54 - of the comment as empty initially. And here
let's do actually we need to bring in Redux.
167:55 - So or like Connect Redux stuff, say import
can connect. Now guys, you don't have to do
167:56 - these comments. But if you expand your functionality
more and you bring in more stuff, it's cool
167:57 - to comment on your on your code or on your
import. It makes it easier to navigate. So
167:58 - we get Connect as per usual from react Redux.
And we need this action that we just create
167:59 - soldiers to import. Submit comment. From go
back one level go back another level Redux
168:00 - slash actions slash data actions. Alright,
so here Yeah, we got prop types who can do
168:01 - prop types. But before that, let's let's cut
this and let's say export default, connect
168:02 - map state to props. Since we have one action,
we can just But her submit comment. And the
168:03 - second one will be with styles, styles. And
we pass our component. So here let's do const.
168:04 - Map state to props equals state and returns
the following. And here we need to access
168:05 - the both the UI and case we get errors. So
UI is state.ui. And we need, we need authenticated
168:06 - from user. Because we don't want to show this
form for not authenticated. So let's say authenticated
168:07 - from State DOT user dot authenticated. Alright,
let's do the prop types. So comment on dot
168:08 - prop types. We have our function. So submit
comment is prop types dot bank that is required.
168:09 - We have our props from the state which is
which our UI prop.
168:10 - Prop. Okay, let me try again. prototypes that
object that is required. And we can just copy
168:11 - this. Here we see what do we have? We have
the classes from, from with styles, and we
168:12 - have the scream ID that we got passed down.
This is a string and we have the authenticated,
168:13 - then dedicated. And this is a Boolean, so
disable. I think this is it for our props.
168:14 - Yeah. Okay. Let's go to the render, let's
say const. Let's get our classes and authenticated
168:15 - from this dot props. And here we say let's
say return. Comment, form markup.
168:16 - And
168:17 - here, let's say const. comment, comment, form
markup equals, and we do a ternary. operator.
168:18 - So if authenticated, if we are authenticated,
we return something else we actually return
168:19 - No, because we don't want to see this if we're
not authenticated. So here let's, what do
168:20 - we return we return a grid item because we're
already in a container, because of house in
168:21 - screen dialog right here. Where are we? Yeah,
we're here. So we're already in a container
168:22 - yet. So we just put a grid item s
168:23 - equals 12. Here, let's give it an inline style.
And let's give it a text align. Center. I
168:24 - want the button to align in the middle. Here,
let's do a form on submit equals this dot
168:25 - handle, submit. And he will put up whoops,
we'll put our text field
168:26 - text field, we're going to have a name. It's
going to be body.
168:27 - Whatever we'll we'll have a type of text.
We have let's put a label, of course that
168:28 - says comment. On scream. Spread a place hole
actually has not put a placeholder. It's kind
168:29 - of self explanatory. So let's put an error
of errors dot whoops, Oh, actually, this reminds
168:30 - me that we didn't put errors. So errors comment,
this is what we get back from our endpoint.
168:31 - We have an validation error with the comment.
So if it if we have a comment, or a comment,
168:32 - we set this to true, else we set it to false.
And let's put errors in the state errors.
168:33 - And let's actually get errors from the state.
So const errors equals this dot State DOT
168:34 - errors. So here we have a helper text in case
we get an error, and this will be arrows.rs
168:35 - comment, sick of saying errors, twisting my
tongue too much value equals this dot State
168:36 - DOT body. An on change is this dot handle
change. And let's give it forward. Because
168:37 - otherwise it's just gonna take off Let's give
it actually the our class. So class name,
168:38 - the global styling, so class classes, classes,
that text field. I think this is it. Yeah,
168:39 - let's close this tag. And let's have a button
of type Submit. variant contained, because
168:40 - that's the style we've been going with color
primary and the class name, the global class
168:41 - name classes dot button to give it the margin.
Let's close this. And this will say Submit.
168:42 - And I think this is it. Actually, no, let's
put a ruler under here. So let's say, hey,
168:43 - char, the class name. Classes dot, visible,
separate. Alright, let's close this tag. And
168:44 - no, not like this, like this. And, here, let's
create our form. For methods. So let's say
168:45 - on change takes an event. And here we do this
dot set state. Oops, we said the state and
168:46 - the name will be event dot target dot name.
We only have one input, but this is this works
168:47 - for all forms. So event, we bind it to event
dot target dot value. All right, let's create
168:48 - the onsubmit not on change, handle change.
I'm doing this handle thing because in the
168:49 - movie document documentation, they do that.
So to be less confusing, I just follow the
168:50 - the convention because I'm using that framework.
But you don't have to. So handle submit takes
168:51 - the event. And here we do event dot prevent.
Default. And here we call our our action this
168:52 - dot props. dot submit comment. comment, comment.
And we passed this paper Oh yeah, the scream
168:53 - ID. So this dot props we've passed, we've
been passed this already. So scream ID and
168:54 - the second will be an object with a key body,
not Cody body. And the value of this will
168:55 - be this dot State DOT body. And we need to
get the errors as well. In case there is any
168:56 - so let's say component. component will receive
props. Next props. Here we need to check for
168:57 - them if next props.ui to get you why. Yeah,
we did. If next props.ui dot errors, then
168:58 - this dot set state errors. Next props.ui.ui
dot errors. calls. I think this is it. Yeah,
168:59 - this is let's test this out. Let's save errors
is not defined.
169:00 - Oh, to initialize it as an empty object here.
Yeah, fragment is defined but never used.
169:01 - Actually, we don't need fragment, because
we're returning one element anyway. Cool.
169:02 - Let's check our up. So we open up.
169:03 - There's no form. Oh, we're not logged in?
Of course. So use that we're not logged in.
169:04 - Maybe you're logged in.
169:05 - So use that. At email, comm one through six
login. I open up this, we get a comment section
169:06 - here. Cool. I write a comment Hello, mate.
I send it call it persist and it shows up
169:07 - instantly. But it doesn't clear the form that's
handled up. So
169:08 - huh?
169:09 - here when we receive props, or we can check
because once we send this, we can check. Once
169:10 - we get props, we can check that we don't have
errors. So actually not here. So exclamation
169:11 - mark. Not errors. I mean not next props.ui
dot errors. And the same thing we did in the
169:12 - ad scream guys. So our next Next props.ui
dot loading, or just not here as well. And
169:13 - what we need to do here, if this is the case,
this dot set state body is empty. All right,
169:14 - let's try again. I say hello again, bro. We
send this cool and it resets it. If I send
169:15 - empty, we get errors cool. If I submit, actually,
oh, we're not clearing the earth. So I know
169:16 - now, I'm going to submit it's going to show
me an error instantly. Yep, we need to clear
169:17 - the errors as well. From here. What we need
to do is that we need to clear errors once
169:18 - we close this dialog. So we will do this from
the scream dialog. So here, actually, we need
169:19 - to import the clear errors first. So here,
let's say clear errors.
169:20 - And
169:21 - where are we so here, in handle close, we
need to set the state open to false. And we
169:22 - need to call the clear arrows this dot props
dot clear. Earth, call it like this. We need
169:23 - to add it to our prop types. Up here, so clear
errors is a prop types.funk.is required. Comma,
169:24 - let's save. Let's go here. So if we get an
error, and we go again, and oh, the stop prosecutors'
169:25 - not function is or not clear errors. Call
it here. Oh, of course forgot to add it to
169:26 - the map actions to props. Clear errors like
this save this time it should work. So if
169:27 - there is any error, let's let's double check
as well in the state. So tree UI, there's
169:28 - no error right? Now. Let me put them like
this. So actually, no, I don't need to type
169:29 - anything. If I have an empty we have an error.
And if I close it, it dispatches clear errors
169:30 - and it clears the errors cool. So let's actually
create the user page. So when we click right
169:31 - now on a user handle, it just takes us to
slash user slash that user handle and there's
169:32 - nothing. So let's actually create this page.
Alright, let's go to pages, and let's create
169:33 - here, a user dot j s, lowercase, it doesn't
really matter. I've got questions on this,
169:34 - why use components and pages, it's just a
convention, you know, there's multiple conventions
169:35 - on how to do things, just pick yours and stick
with it. Alright, let's go to app. And actually,
169:36 - let me close the terminal. Let's set up a
route here. So here, I'm gonna import it first.
169:37 - So import user. From same level, but pages
slash user. Let me put a space between those.
169:38 - And here, let's put a route. So route, exact
path equals, and this will be slash users
169:39 - slash colon handle. Handle not handle. Sorry,
for the typos, guys. So component equals user.
169:40 - Now, before we create the sound or create
the action, so let's go to data actions. And
169:41 - we're going to create export const, I'm going
to call it get user data. But don't confuse
169:42 - it with the other get user data from the user
actions. And this will take a user handle
169:43 - and it will go through dispatch. And here
first would dispatch a loading type. So dispatch
169:44 - type, loading data. And here we say axios
dot get backticks slash user singular. That's
169:45 - how we set up our back end route. Don't confuse
the two. So dollar sign curly braces use a
169:46 - handle that we have passed to this function.
And here we do, then, then
169:47 - result.
169:48 - Guys, if you remember, if you don't remember,
I'll remind you so this is the type of data
169:49 - we get from requesting from slash user slash
handle. So we get a user object and the screens
169:50 - object. So what we want to do now is we want
to set the screens to our state screams. So
169:51 - here we do dispatch. The type will We'll be
set screams and we're not going to set the
169:52 - so payload will be action, not not action
sorry, rez dot data dot screens. And we're
169:53 - not going to set the user details to this
because the user details is always the authenticated
169:54 - user. Here, we say the catch, we don't need
to stop loading because set errors that set
169:55 - screams does that. And here let's do catch
errors. And here we just dispatch the same
169:56 - type set screams with the payload of No. Alright,
so yeah, no, no semicolon, here, we save.
169:57 - Actually, we don't need or here, we could
just like keep it like that. Save here. And
169:58 - let's actually create this user component,
or page. So RC e tub, let's get rid of this
169:59 - export. And here, we're going to need the
prop types.
170:00 - Let's import axios. And I'll show you why
we need axios in a second. Let's import scream.
170:01 - Components slash scream, slash scream, Pascoe
cased here. Let's import the grid from material
170:02 - UI. And we need, we need to connect. And we
need this function that we just created. So
170:03 - get us a data
170:04 - from
170:05 - Redux actions, data actions. Let's set up
our prototypes. So let's actually set up the
170:06 - map the map state to props first. So const,
map state to props is going to take the state
170:07 - and return the following. So we just need
the data. So So data, state that data. And
170:08 - here let's just do connect map state to props.
We only need one action. So we can put it
170:09 - in a object like this. So get user data. And
we wrap the component in the parentheses and
170:10 - here, let's say user, the prop types equals
the function get user data, which is a prop
170:11 - types.funk.is required. And the data which
is an object. So prop types.object.is, required.
170:12 - So here, let's, when we load the component,
so let's do component did mount. And here
170:13 - when we load the component, we want to fetch
the user, this user's details, so let's get
170:14 - the handle from the URL. So we can do that
by doing the columns handle, let's put it
170:15 - in a variable. So this dot props dot match,
which holds the details about the URL, the
170:16 - path, name, base URL, all this stuff, the
parents, which are the parameters, and we
170:17 - have access to only one parameter, which is
the handle, because that's how we set up the
170:18 - route if you remember, so we have this one
parameter handle, now we get it, we put it
170:19 - in this variable. And we can do this dot props,
dot get user data and pass the handle. And
170:20 - we also now need to get the user details.
So let's do axio. So I want to send another
170:21 - request to see got axios slash users slash
user rather singular, the same request that
170:22 - we send from our action. So here we pass the
handle, oops handle. Get then rather. And
170:23 - then here, actually, we need the profile and
the state. So let's do state equals. Here
170:24 - we have a profile property. Survey no for
now. And here when we get the result we do
170:25 - this dot set state. We said the profile to
res dot data The user and we forget an error,
170:26 - we just console log it. Now I know we can
as well create another, another entry in our
170:27 - data in the state and put this data in there.
But this is going to be a static profile,
170:28 - it's not nothing's going to change about it.
So we don't need to store it in our global
170:29 - state. So we can just fetch it and have it
here inside the component. So here in the
170:30 - render, skirt, the screams, and the loading
from the data. So we destructure these from
170:31 - this dot props dot data. And here where we
return stuff, we're going to have something
170:32 - similar to the homepage. So can we actually
copy it from the homepage? Yeah. Let's copy
170:33 - this. Let's go back to user space. This here,
we already brought in grid right here. And
170:34 - here, we say, screams. markup. And here instead
of profile, I'm going to put a thing called
170:35 - static profile component called static profile,
which we haven't created. But we will in a
170:36 - moment on let's pass it a profile, this dot
State DOT profile. And here, let's create
170:37 - the screen mock up. So const, screen mock
screams mock up equals. And of course, let's
170:38 - check for loading. If we are loading then
show a paragraph saying loading data. Else.
170:39 - Here we do. What do we do? Actually, we do
another check here. So let's do else if screams,
170:40 - because there could we could go to a user's
page, and they could have no screams, maybe
170:41 - they haven't posted then yet. So if screams
equals No, then we set we set the content
170:42 - to be a paragraph that says, No screams from
this user. Now you can style this more. It's
170:43 - up to you. I'm just gonna leave it like this
for now. If we do have any screams, accused,
170:44 - excuse me. We do screams dot map. And then
for each scream, we're going to return a scream
170:45 - with the key scream dot scream ID similar
to the homepage. And we passed the scream.
170:46 - scream. We close the tag. So I think we're
done here. Yeah, let's create the static profile.
170:47 - Let's import it from so right here, say import
static profile from go back on level components
170:48 - slash profile slash static profile. Let's
create this here. Static profile address.
170:49 - Here let's import react and fragment from
react.
170:50 - And
170:51 - maybe let's copy some stuff from here. Or
maybe from here prop types. I wanted to get
170:52 - with styles, sexually typed out styles from
material UI slash courses slash styles slash
170:53 - with styles. We're going to need a j s. From
data they j s. And here let's do import link
170:54 - from material UI. Slash link. Here we need
paper. trail uY slash course slash paper.
170:55 - Copy this but it's never too late control
the typography, typography. And let's get
170:56 - some icons. Here we say the movie Still, we
need the calendar today. So similar to profile
170:57 - so we can get those three icons from here.
So calendar location and the link icon. So
170:58 - these three spaced them here. We're going
to use styles similar as well to the user
170:59 - profile style. So let's go copy these. Let's
go back to static profile, let's paste. And
171:00 - here, I'm going to remove the button because
we're not going to have edit buttons, because
171:01 - this is not our profile. This is static profile.
So we removed that button. So here we remove
171:02 - as well, the buttons, and the so the buttons
from here and we removed this SVG button thing
171:03 - from here. Let's save. And here this, this
component is going to be a functional component.
171:04 - So let's say static profile. Equals takes
a props. And let's export it. So export default
171:05 - with styles, styles. And what is this static
171:06 - profile?
171:07 - Let's do our prop types. We have profile which
have been passed down. So this will be prop
171:08 - types.object.is. required. And we have classes
from with classes with styles rather, prop
171:09 - types.object.is required. Alright, so here,
we need to destructure a couple of things.
171:10 - So let's say const classes. And we have profile.
So we need some stuff from there. So profile
171:11 - colon, and we do curly braces. And we get
what do we get, get handle created art. Okay,
171:12 - image URL, and the bio, website and location.
And this equals this dot props, actually just
171:13 - props because this is a functional component.
So here we do return. And here, let's wrap
171:14 - everything in a paper. Actually, I think I
could copy everything from profile and edit
171:15 - it. So it's good to profile, copy this whole
paper tag. And let's come here, paste it.
171:16 - So we're gonna need, so we're gonna need the
image, we don't need the input and the button
171:17 - here. So let's delete this. We're gonna need
the link the same way I did I call it mu link.
171:18 - Let's call it more link from link. And we
need the link from react router Dom actually.
171:19 - So let's do import link. The structure is
structured from react router, Dom. So we need
171:20 - that we need the link, we show the buyer the
location, the website. And here we don't have
171:21 - the edited details of the button to log out.
So I think this should work. So let's save
171:22 - everything. And let's look if we have any
errors. We don't. Cool. let's reload the entire
171:23 - thing. And let's go to a profile. cannot read
property No. Handle have no. So the profile
171:24 - we got passed down is no I think profile check
on the user. This that stayed that. Oh, of
171:25 - course. Here we actually check if we have
a profile because it could be loading or we
171:26 - don't have any profile. So let's cut this
and let's do an expression here. Let's say
171:27 - this dot State DOT profile and the equals
No. So for equals No Then let's return a paragraph
171:28 - saying loading profile.dot.we do hear colons.
So else we show Yeah, we show this we paste
171:29 - what we had there. So let's save. Let's go
back cool. And we get the profile of Jane
171:30 - last. And her screams which are just one could
go back to home click on Johnny we get his
171:31 - profile and his scream. And this is the normal
screen so we can still interact with it the
171:32 - same way we do in the home. So cool. Like
we have now the user page and we can go to
171:33 - it and everything works just fine.
171:34 - What I want to do right now is we need before
we implement notifications, we need to set
171:35 - up a way where when we type a URL for a screen
we straight away Go to the screen because
171:36 - otherwise when we click on a notification,
we can't do anything. So what we need to do
171:37 - we need to set up a way in which when we let's
say you want to go to user slash Johnny slash
171:38 - scream, slash scream ID of whatever his scream
when we click And to hear, we need to go straight
171:39 - away to that screen. One thing I want to fix
first, when we are actually logged out, there's
171:40 - a an error, or a warning that says the proper
user in auth route is not required. Let's
171:41 - fix that. So let's go to our auth route right
here. And here, let's make it not required,
171:42 - because sometimes we won't have a user if
we're not logged in. And that's okay, this
171:43 - is still gonna work. So remove is required,
let's save and the error should be gone. And
171:44 - I'm going to be checking if we have any other
one warnings and fix them. Alright, let's
171:45 - go to App let's set up a route for for what
we're trying to do. Let me close the terminal.
171:46 - So here, I'm going to add another route. So
route, exact path equals, and this will be
171:47 - slash users slash colon handle, slash scream,
slash colon scream, ID. And this will go to
171:48 - the component, the same component user, but
with a trick and you will see, let's save
171:49 - here, let's go to user or as user right here.
Now here in user, we need to check if we have
171:50 - this parameter in our URL, or in our path.
So here in component did mount I go here,
171:51 - actually, I say const. Scream, ID equals this
dot props dot match, dot params, dot scream,
171:52 - ID. Now of course, we could maybe just be
on the user's page, so we don't have this,
171:53 - which is fine, it's going to be undefined.
So here, we do if scream, ID. So if we have
171:54 - it, then this dot set state, let's call it
scream, Id Param. and set it to scream ID
171:55 - that we just got. So if we have it, we set
it in the state, sexually initialized here,
171:56 - this variable and give it a valid value of
null initially. So we can come down here in
171:57 - the in the render right here. Let's extract
it. So const. What is that scream? Id Param
171:58 - equals this dot state. So of course, if we
don't have it, it's going to be no, which
171:59 - is fine. And right here, we don't actually
just run through the screens, we do another
172:00 - check. So if we actually have screens, then
here we do another check. And we say, if not
172:01 - scream, Id Param. So if it's not, then yeah,
show the screens like this. That's fine. Now,
172:02 - another. So actually, yeah, actually, here,
I need to put a question mark, because this
172:03 - is another ternary, we're chaining another
ternary operator. So if not scream ID parents
172:04 - then don't do anything else. So if we have
the scream ID params. So we're trying to visit
172:05 - a screen, then let's do this. Now what we
need to do here, we need to find the screen
172:06 - that has this scream ID and pass it a property
of open dialog so that we will know which
172:07 - screen to open once the page loads. So here
I'm going to do if scream dot m. Actually,
172:08 - no, I need to do the map first. So let's do
screams, screams dot map. And here I say scream.
172:09 - Inside curly braces in here, we do our Chuck's
of F scream, dot scream ID does not equal
172:10 - scream, Id Param then it's not this scream
that we want to open. So we just return like
172:11 - this. So I can just copy this the same way
we return them here. Now here, else return.
172:12 - Now this is when we actually find that one
scream that has the script, same scream ideas
172:13 - that one we're trying to open. So here we
just pass a pass a prop open dialogue. And
172:14 - if we just pass it like this is just going
to pass the property open dialogue with the
172:15 - value of true. Okay, so now let's go to screen.
Now this is kind of this is prop drilling,
172:16 - but it's okay, we're drilling only one property,
not massive objects and a lot of updates and
172:17 - stuff like this. So how would we go actually
here?
172:18 - No, actually, we need to pass it to the screen
dialog. So here in the screen dialogue, let's
172:19 - say open dialogue equals this dot props because
we passed it down, dot open dialogue. And
172:20 - so if we don't have, it's not, it's gonna
pass a, an undefined value. So that's okay.
172:21 - And here let's add it to the prop types. So
we say open dialogue is a prop types dot For
172:22 - bullying, and it's not required because most
of them will not have this property. And some,
172:23 - sometimes none of them will have it. So let's
go to the open dialog and handle this logic.
172:24 - Now, here, we're going to add a component
did mount. So let's go here under the state,
172:25 - let's say component. There did mount. And
here, what we need to do is we just need to
172:26 - check if we have the open dialog. So which
if you do this dot props, if this dot props
172:27 - dot open dialog, then we just call this dot
handle open. Let's save all files. And let's
172:28 - check our application. So let's open the Redux
state. So let's look for example, this one.
172:29 - This one right here. So now we have this one
in our screen. Let's take the idea of it.
172:30 - So this is by Johnny, and we have the idea
of it. So did Oh, no, actually, I typed that.
172:31 - Earlier, I got confused for a second. Okay,
let's refresh the homepage, just in case.
172:32 - And now if I type slash users slash Johnny,
slash, scream, slash that ID, it should take
172:33 - us to that user's page and open the screen,
which it does cool. And, and so now what I
172:34 - want to do is I want to do something like
Twitter. So here on Twitter, as you see, if
172:35 - I open this scream, I mean, the scream this
tweet, if I open this tweet, it's going to
172:36 - change the URL to that slash that user slash
status slash the ID of this tweet. And if
172:37 - I close it, it goes back to the original one.
And if I open this, and I actually just go
172:38 - to this URL, so I type enter, who go to that
user's page and open it. And if I click away,
172:39 - it just goes back to that user's page. So
let's actually implement the same behavior
172:40 - for our application. So let's go to Let's
close Twitter. Let's go to our app. So here
172:41 - in the handle open, we're gonna have some
logic. So this happens after we open the,
172:42 - the screen. So here, let's make some space.
Oops, make some space like this. Let's say
172:43 - we're gonna have two variables here. Let's
call this one old path. And the old path will
172:44 - be the path that we have currently. So window,
dot location, dot path name. And here, I'm
172:45 - gonna get two things const. Use a handle,
handle. And the scream ID remember, we've
172:46 - been passed these down from scream, so equals
this dot props. And here, we're going to form
172:47 - the path that is supposed to be the path for
this scream. So we'll be we'll call it new
172:48 - path. So this should always be the path for
this scream that we've just opened. So backticks,
172:49 - slash users slash, and put the user handle
and then slash scream, slash, and then put
172:50 - the scream ID. Now here, we can just do window,
dot, push, push state. And here, we don't
172:51 - need to pass any data. So you can say no,
no. And then for the URL, we just passed the
172:52 - new path. Let's save and let's see, look at
our app. So now if I open this, it should
172:53 - change the URL to slash users slash user slash
scream slash the ID of this one. Okay, so
172:54 - push date is not a function. Oh, window dot
history. dot push date. Sorry about that.
172:55 - So let's refresh. We open this cool, and we
get this URL. Nice. Oh, but it's actually
172:56 - not, we wanted to actually change back. So
let's add that logic as well.
172:57 - So here, we need to as well reverted the change
from handle close. So we need to store them
172:58 - in the state. So you can access them from
both functions. So or methods rather. So here
172:59 - when I said the state, we need to set as well
values for the old path and the new path,
173:00 - we need to put them here. So old path. Ups
path is an empty string and new path. This
173:01 - is well an empty string. So here when we close
the dialog, we want to do a window dot history,
173:02 - which does nothing By the way, it just changed.
Is the URL at the top. But of course, it benefits
173:03 - the the application so that we will know where
to go. And you will know where we are by just
173:04 - checking the URL from different components.
So this dot, State DOT old path. So now when
173:05 - we go, when we close it, it should revert
back to the old path. So let's save and let's
173:06 - test that. Let's refresh. Let's open this.
Cool, it takes us back to the old path. And
173:07 - even from the Users page, if we do this, and
we go back, it gives us the old path. So it
173:08 - doesn't just give us slash, it actually saves
the path that we had. And then when we close,
173:09 - it takes us back. Okay, there's an edge case
for this, which is, when we just take a URL,
173:10 - let me go to another user because slash user
slash user is a bit confusing. So when I take
173:11 - this screen, and I just press enter, right
now, there is no old URL. So if I click away,
173:12 - it's not going to work because the old URL
is the same as the new one. So let's actually
173:13 - handle this edge case. So here, under here,
I'm going to say if old path equals new path,
173:14 - then what we need to do is we need to say
old path equals slash users, users slash user
173:15 - handle like this. Because when we come from
another from another, from completely a different
173:16 - place, and we click away, we should just go
back to the Users page, like exactly like
173:17 - on Twitter, and it works right now. So if
I click on this, and I just click enter here,
173:18 - and I click away, it will go back to the Users
page. Cool. Okay, so let's create the notifications.
173:19 - Now. Let's go to here in navbar. And here,
instead of notifications in this button, let's
173:20 - just leave this notifications tag, but it's
not going to actually be the icon is going
173:21 - to be a new component that we're going to
create. Let's put it in the same folder. So
173:22 - let's say import notifications from same directory
notifications. And let's create this file.
173:23 - So notifications, dot j, s, and here, we're
going to have some similar imports to screen.
173:24 - So I'm going to take the first six right here.
Let's go back to notifications, paste them,
173:25 - the only one we don't need is the width styles.
And for this, we're going to use the menu
173:26 - component. So if we go to material UI component
demos, and where is it right here menu, we're
173:27 - just going to use the simple menu. So if you
if you expand the code, it has something called
173:28 - anchor element, and you can change the anchor
and you will anchor around a different one.
173:29 - So for example, if What if it were to anchor
around my account, when you click it, my account
173:30 - appears in the middle. But for our case, I'm
just gonna let it always anchor at the top,
173:31 - so we just see as a normal drop down. Alright,
so here, I'm going to bring in some movie
173:32 - stuff. So let's say movie stuff. And here
we'll say first is the menu is the menu, excuse
173:33 - me. Slash material UI,
173:34 - slash
173:35 - core slash menu. And here, I'm just gonna
copy this line and paste it five more times.
173:36 - So let's click here Ctrl. D, we need menu
item. We need icon button. We need tooltip.
173:37 - Type, hug, typography, and batch, show you
what these things do. We need a couple of
173:38 - icons. So here let's say import notifications
icon
173:39 - from
173:40 - material, UI slash icon slash notifications.
And we can copy this on here, let's say favorite,
173:41 - favorite. And here we'll say chat. Select
this control the chat. Here, let's bringing
173:42 - the Redux stuff. Import connect from react
Redux. Here, let's import an action that we
173:43 - haven't created yet. Let's call this mark
notifications, notification notifications.
173:44 - Read, which is going to be executed once we
expand our notifications. So just like on
173:45 - Facebook, or I think even on Twitter, when
you expand your notification They're automatically
173:46 - marked red. So from go back to levels Redux
slash actions slash user actions. And here
173:47 - let's do our class notifications extends,
component. And we will have a state will have
173:48 - an anchor element of no initially, let's export
here, export, connect, map state, to props.
173:49 - And here, guys, if you remember, we already
have our notifications, we got the state,
173:50 - we go to user, or actually, we're not logged
in, let me log in quickly. So okay, so if
173:51 - you look here, we already have a couple of
notifications. So we just need to show them.
173:52 - Alright, let's go to our notifications here
map state to props. And we only need one action.
173:53 - And we can put it in the subject is Mark notifications
read. And we connected to notifications. Here
173:54 - is export default, let's say notifications
dot prop types. And we have only two so the
173:55 - function mark, notifications read is a prop
types dot func is required. And the notifications
173:56 - is as well a prop, whoops, prop types.object.is
required. And here let's do const map state
173:57 - to props will take the state and return the
following. And here we need notifications
173:58 - from State DOT user dot notifications. Alright,
let's actually create this action first, because
173:59 - that makes more sense. Let's go to user actions.
And here at the bottom, I'm gonna say export
174:00 - default. Actually, let me create the type
first. So it imports it. Here under the user
174:01 - types, I'm gonna say export const. Mark, notifications,
read. I'm just gonna copy this so that I don't
174:02 - make a typo because I always do that. So equals
the string. So let's go back to user actions
174:03 - here, let's say the not default, export const,
Mark, notifications read. And here it will
174:04 - take. Let's call it data for now. Or let's
call them notifications. Actually, they're
174:05 - an array of IDs. So let's say notification
IDs. And it's going to take this patch. And
174:06 - here, we just need to send an axios request.
So post to slash notifications. And we pass
174:07 - the what is it notifications IDs. And here
that then if we get a result, we dispatch
174:08 - a type of Mark notifications rather than an
import system. It's important, we don't need
174:09 - actually a payload. So here we say the catch
error. We're just console dot log. So
174:10 - Alright, let's go to our user reducer and
handle this type or this type. So here, I'm
174:11 - say case mark, notifications read. And make
sure if it doesn't import it for you, you
174:12 - import it yourself. And here, what we need
to do is when we mark some notifications read
174:13 - if we go to our state here, so let's go to
user notifications. If we mark them read,
174:14 - we just need oops, we just need to loop through
them and change this red property from false
174:15 - to true. So we have access to them right now,
by just doing State DOT notifications. And
174:16 - what we need to do we need to do for each,
we loop through them. For each not I'm going
174:17 - to call it for notifications. We will say
not dot read, not read equals true. All right.
174:18 - So here we just we need to return the state
of course, returns spread the state. Okay,
174:19 - so this is this is fine. For now let's go
back to notifications. And here in the render
174:20 - We need to take the notifications from the
props const notification notifications equals
174:21 - this dot props dot notifications. Here, we
need to do the anchor element equals this
174:22 - dot State DOT anchor element. And notice I'm
not using the structure in here because sometimes
174:23 - it makes less sense to use D structuring when
you have one thing. Okay, so let's say let
174:24 - notification notification icon. Now, depending
on the type of notification, we're going to
174:25 - have a different icon. So if it's a notification
on a comment, we're going to have the chat
174:26 - icon. If it's a notification on a like, we're
going to have the favorite icon. So here,
174:27 - we need to check if we have any notifications
in the first place. So if notifications, and
174:28 - if we have notifications, we need to check
that notifications. The length is bigger than
174:29 - bigger than zero. So if this is the case,
we need to, what we need to do is we need
174:30 - to have two types of notifications. If it's
red, we're going to give it a color of secondary,
174:31 - otherwise, we're going to give it like a normal
color. So here we will say, so here we check.
174:32 - If we have any unread notifications, then
we need to show a, so we broke our thing.
174:33 - So we need to show a badge on the icon of
the notification with the number of the unread
174:34 - notifications. Otherwise, we just show the
icon without any badge. So here, we can check
174:35 - by doing notifications dot filter. And here
we filter for not where not the red equals
174:36 - false. So this will, by filter filter in like
this, this will have a result of only the
174:37 - notifications that have a read of false. I
mean, if the array that has some notifications
174:38 - that have a read property of false is has
a length of bigger than zero, that means there
174:39 - are certain notifications that are unread.
So here if this is the case, so we use it
174:40 - as a condition, and we do a ternary. So if
this is the case, that means we have unread
174:41 - notifications. So let's open this. And let's
say notifications, notifications icon equals
174:42 - the following. So here we say badge, we're
surrounded with badge. That's how badge works.
174:43 - And when we say badge, content equals and
here, we need to actually give it a number.
174:44 - So how many notifications are unread, which
is this array right here. So actually, I forgot
174:45 - to change change dot length. So actually,
this is the number of the notifications that
174:46 - are unread. So this is the content of the
of the badge. And here we need to add a color
174:47 - of secondary so it stands out and we can see
it. And here let's close this badge and inside
174:48 - the badge, we put the icon so notification
icon, which is just the notification icon.
174:49 - And here, so outside of here between these
two parentheses, we do a colon so else, we
174:50 - just do notifications. icon equals just the
regular notifications icon. Actually, this
174:51 - is a lower case, because it's it's this this
thing right here.
174:52 - Actually, it's this. I mean, make sure I have
the right variable here. So notifications
174:53 - icon is this one. Cool. Okay, I have a problem
with my parenthesis. I think these are extra.
174:54 - Okay, yeah. So this is fine. Now, we need
to handle the else case. So else we can we'll
174:55 - we'll do the same here. So notification icon
equals notification icon, because we could
174:56 - have notifications and all of them are read.
In that case, we do this and we have no notifications.
174:57 - And in that case, as well as this, we just
put the icon. Alright, so here we are actually
174:58 - just to return. Inside, we're gonna wrap everything
in a div. Or actually, let's bring in a fragment
174:59 - That's better. So avoid the div soup. So let's
replace this div with fragment. And here,
175:00 - I'm gonna start of course with the button
that triggers all of this. And here to say
175:01 - we're surrounded with a tool tip with a placement,
not placeholder place meant of top and this
175:02 - will Have a title and you will say, just notifications.
And inside of here, we're going to have an
175:03 - icon button. With an area area owns, oops,
area owns you have if anchor element, then
175:04 - we'll just do a simple menu. This is from
the documentation. Oops, else is undefined.
175:05 - Here, which I don't know, I honestly don't
know what these do, but they're from the documentation.
175:06 - So I'm just going to put them these two properties
has pop up, construe, and it's gonna have
175:07 - an onClick. This dot handle open. And inside
the icon button, we're gonna put our notifications
175:08 - icon, so notifications icon. All right, so
under this tooltip, we're gonna have our menu,
175:09 - some menu menu like this, here will give us
an idea of simple menu in case. Actually,
175:10 - we don't need the ID, I didn't even type it
correctly. So anchor element will be the anchor
175:11 - element with that we just that we disrupted
the structured earlier, the open will be let's
175:12 - change the Boolean on anchor elements. So
if we have one is going to be true else it's
175:13 - going to be false. So the unclose will be
this dot handle close. And we'll give it an
175:14 - on entered. Now this all entered is triggered
once the menu is opened. And this is what
175:15 - we're going to use to actually send a request
to our back end and mark these notifications
175:16 - red. And we'll call this on menu opened as
close this and inside of here, we're going
175:17 - to have something called notifications markup.
And this is of course, it's going to depend
175:18 - on a couple of things. So here, let's create
our notifications markup. So I'm gonna say
175:19 - let notifications, markup equals. And here
I'm gonna say if notifications. And notifications,
175:20 - oops, notifications, the length is bigger
than zero. So here what we need to do, we're
175:21 - going to map through the notifications and
show each one. So here we say
175:22 - notifications dot mob, I'm sorry about the
typos guys, like it's the end of the day,
175:23 - and I'm kind of like tired to be honest. And
this is going to be the last video I'm recording,
175:24 - otherwise, I'm just not going to be that productive.
Alright, so inside of this notification, we're
175:25 - gonna have a couple of things because, like,
let me just show you depends on the on the
175:26 - notification, we're gonna have a different
string that we put inside of the notification.
175:27 - So, for example, if the type is comment, we'll
say commented on if the type of like will
175:28 - say liked your excetera. And you'll see what
in a second. So say const verb, I'm going
175:29 - to call it equals. Now depending on the notification
that type, so I just called it not by the
175:30 - way, in this map, so not dot type, in equals,
like, then we will call the verb liked. Else,
175:31 - we have two types. So else is probably it's
definitely a comment. So we say commented
175:32 - on. And here, we need to also have the time
when this happened. And for this we're going
175:33 - to use the dangers from now. And actually,
we need to extend digest so inside the render,
175:34 - let's say they, they j s dot extend, and we
pass it the relative time plugin to actually
175:35 - important Yes, pass it the relative time.
And inside of here we'll say time equals day
175:36 - j s, and we pass it not dot created art dot
from now. Now we need the icon color. Because
175:37 - if it's unread, it's going to be red. If it's
red, it's going to be like normal. So here
175:38 - we say If not the red, then it's going to
be primary. Else it's going to be secondary.
175:39 - And we also need the icon, the, the icon depends
on the on the type of the notification. So
175:40 - here we close, not dot type, equals like.
So if it equals like, then open parentheses,
175:41 - and let's say favorite icon. So if it's a
like, it's going to be a hot icon, and the
175:42 - color will be icon, color. Color. And the
What do we have, we have, let's give it a
175:43 - style, style of margin. Actually, we need
two curly braces here margin, right? Of 10.
175:44 - Doing in lifestyle for this one guys, you
can, I don't want to add with styles just
175:45 - to have this style. And here, if not, it's
going to be a chat icon, because it's going
175:46 - to be a comment notification with a color
of icon color. And with the same style, and
175:47 - we close the the icon like this. Actually,
before we carry on, let's handle the else
175:48 - so that it doesn't show any like squiggly
lines here. So elsewhere notifications, we
175:49 - show and menu item with an onClick. That just
closes this. So on click of handle, close.
175:50 - And it's going to say you have no notifications
yet. So here, let's carry on. So now after
175:51 - we have all these variables, we can return
what we want to return. So let's return the
175:52 - following. And here it's going to be a menu
item. With the we have we need the key because
175:53 - we're iterating through an array with the
key would be the created art. And we need
175:54 - an onClick. And this will be this dot handle
close as well. And inside the menu, we're
175:55 - going to have the icon The first thing, and
after that we'll have a typography of component
175:56 - link, because this is going to be a link to
the screen and the color of the fault. And
175:57 - the variant of body one, and it's gonna have
a to property because it's a link to slash
175:58 - users slash and we put the notification dot
recipient like this, slash scream slash notification
175:59 - dot scream, ID, I will close this typography
and here it's gonna say not dot sender. So
176:00 - the the, the handle of this person, space
176:01 - verb,
176:02 - so whether liked or commented on. And then
we say your scream, spray, and then here we
176:03 - put the time at the same time like this. And
this will say like five minutes ago or whatever.
176:04 - So let's go up here and create our functions
our handle open and handle close and all that
176:05 - shit outside the render. So here's the handle
open equals, it's gonna take an event. I'm
176:06 - just gonna do this dot set state unka element
is event dot target, which is always going
176:07 - to be the icon here to say handle close equals
doesn't take anything. And it just sets the
176:08 - state on element to Nola gun, so closes the
thing the menus. And here let's say on menu
176:09 - opened, this is what sends a request to our
back end to to mark the notifications read.
176:10 - And if you remember properly, like the back
end, we need to send an array of the notification
176:11 - the IDs of the notifications that we want
to mark read. So we can do this by a say LED
176:12 - on red. Let's call it unread notifications,
IDs equals IDs equals this dot props dot notifications
176:13 - dot map. And what we're going to need to do
here not, we need to map through the notifications
176:14 - that have a not read or false or not, not
read. And actually know here we filter will
176:15 - filter them, not map them. So we only have
the ones that are not read. Now we chain a
176:16 - map. And what we need to do we map the notification
to not.we have a key, a key notification,
176:17 - ID. So this will return us an array of the
IDs of the ones that have red false. And what
176:18 - we need to do with this array, we just need
to call this dot props dot Mark notifications
176:19 - red, and we just passed this unread notifications
ID and that should take care of it. So this
176:20 - should work. Let's look at our console. And
we have notifications icon not defined line
176:21 - 53. Or is it because it's notifications icon.
Oh, cool, no more Earth. Alright, let's look
176:22 - it up and cool. We get three unread notifications.
And if we open our state, let's, let's put
176:23 - this like like this, we open the state, we
go here, we look at our user, we go look at
176:24 - our notifications, and they have a read of
false. And if we click here, so now there
176:25 - are already because they're all unread. And
if we click on this action, or click on difference,
176:26 - we see that it changed in the notification
and it changed all the reds, all the red properties
176:27 - from false to true. Cool. And if we click
away, there's no more badge anymore. And if
176:28 - we click we see that there are blue because
they are red. And if we click on this one,
176:29 - it takes us to this to this scream ID cool.
So right now in our application, if we load
176:30 - if we reload or load our up, we'll see quickly
these loading texts show instead of the profile
176:31 - and the screens while they are actually loading.
So let's change this into something more visually
176:32 - appealing. The technique that I really like
is called a loading skeleton YouTube user
176:33 - set. So if I reload YouTube, you'll see these
boxes, these placeholder divs, while the videos
176:34 - actually load, and the thumbnails and everything,
let's actually implement this in our application.
176:35 - Oh, by the way, one thing that I changed I
fixed from last video, the notifications in
176:36 - the prop types in the notifications component
is a prop types dot array and not prop data
176:37 - object because there's multiple ones. So make
sure you fix that. So let's go to home. And
176:38 - here in the home while we're loading the screams,
we don't say loading, we say,
176:39 - scream, skeleton, which we will create in
a second. Let's copy that unless go here,
176:40 - say import screen skeleton from go back one
level. And we were going to put this in the
176:41 - util so utils slash screen skeleton. And let's
copy this whole import or let's go to the
176:42 - user page. And here paste it. And let's go
down here. While we load the data, we just
176:43 - put the scream skeleton is that alright, let's
create this component. So when you tell I'm
176:44 - going to say scream, scream skeleton.js I
here we're going to need react for react and
176:45 - fragment, because we're gonna have multiple
ones. So we need to wrap them in a fragment.
176:46 - So here we're going to bring these from react,
we're going to need the no image because we
176:47 - want to show this no image while the images
are loading, because we don't have the actual
176:48 - user image. And by the way, I'll put this
link in the description so you can download
176:49 - it. So I'm just going to download it now download
the 640 by 641. And we can actually just grab
176:50 - a drag and drop it into the image folder.
I'm going to call this no dash image. And
176:51 - it's dot png. So let's import that. So import,
no image from and by the way this you can
176:52 - name anything, it's just an identifier. So
it's going to be from going back one level
176:53 - slash images slash no dash image or whatever
you named it. dot png. Let's bring prop types.
176:54 - on here it's good to see Mui here we need
three things the card is going to be just
176:55 - like the actual card but with no content material,
the material UI slash core slash card. Let's
176:56 - copy this and paste it two more times. This
will be called media and this will be called
176:57 - content Actually we need with styles as well.
So let's import that. Material UI slash courses
176:58 - slash styles slash with styles. Let's create
a styles object, which will take the theme.
176:59 - So I'm not sure if we're going to use the
theme, but let's just take it anyway. And
177:00 - I'm going to leave it empty for now. And here,
let's say, we're going to make it a functional
177:01 - component, because we don't need to manage
any state or do any have any methods. So we'll,
177:02 - we'll make this a functional component. So
let's say const. Scream skeleton equals is
177:03 - going to take some props. We'll do parentheses,
curly braces here. And let's pause that for
177:04 - a second say scream skeletons dot skeleton
dot prop types, which is going to have the
177:05 - classes from with styles. So this is going
to be prop types, whoops, prop types.object.is
177:06 - required. And here we need to say export default,
with styles, styles, and we're gonna pass
177:07 - our screen skeleton. Alright, so here, we
need to do our fake chord. So say, let's bring
177:08 - in the styles First, the classes rather. So
const classes equals oops, classes with two
177:09 - s's equals this dot props. And here, I'm going
to say return fragment, inside the fragment,
177:10 - I'm gonna put the content, I mean, I could
put the whole thing here, but it looks cleaner
177:11 - when I put it in a variable. So say const
content. And here, we're gonna have our card,
177:12 - it's going to be like an empty card. And inside
there is like a blue div here and a gray div
177:13 - here and this image right here. But of course,
we need multiple ones. And I want to fill
177:14 - up the screen. So just in case, I'm going
to put five which fills up the screen. And
177:15 - of course, if there's three later, they're
gonna see that there's only three. But for
177:16 - now, I'm gonna put, I mean for the loading,
we're gonna put five of them. So the way we
177:17 - do this, we can say, so content equals, we
can do can use array dot from. And here, we
177:18 - can pass some attributes to this array, and
I only need the length of five. So this is
177:19 - basically like a for loop. But, but more efficient.
So here, we do the map on this array that
177:20 - we just created. And we do item. And we're
going to need to actually more than two parentheses
177:21 - here. So item, and I'm only saying item just
to access the index, we don't need the item,
177:22 - there is no item actually. And here, let's
do parentheses, we just outright return stuff.
177:23 - Sorry, let's do card, I'm going to give this
class name of classes card, because we need
177:24 - this to style these depths. And I'm gonna
give it the key of index. And this is why
177:25 - we need index. And here we're gonna have card
media, which is the non image image with a
177:26 - class name of classes dot cover. And here,
we will say we'll give it the image, which
177:27 - is the no image. Oops, I'm gonna close that
like this, because there's no content in here,
177:28 - let's say cod content. Let's give this a class
name of classes dot call this card content.
177:29 - Let's close this. And here inside the content,
we're gonna have these big divs. So so far,
177:30 - what we have is we have this card with this
image, but there's nothing here. So what we
177:31 - want to put, I want to put a blue div here,
and then a gray div, and then two full lines
177:32 - and one half a line. So it gives the illusion
that there is some content that's being rendered
177:33 - right now, but actually, it's just a fake
skeleton. Alright, so here, I'm gonna, the
177:34 - first diff, these are just divs. And we're
going to style them. So say, div class name.
177:35 - I'm going to give this a classes dot handle,
because this is the placeholder for the handle.
177:36 - I'm just going to copy these paste. What is
it four more times to four more times. So
177:37 - this is going to be the date, because that's
what's under the handle. And these two I didn't
177:38 - get to do Ctrl D, and I'm going to call this
full line is that the two four lines and this
177:39 - is going to be the half oops, half line like
this. So let's actually style this. So up
177:40 - here in the styles, I'm going to use Flexbox.
To make sure that they, they are arranged
177:41 - properly, one on top of the other. So for
the card, yeah, so we gave this card, we're
177:42 - going to style this card itself. Let's give
it a display of flex a margin bottom, just
177:43 - like the actual cord of 20. a position to
it to give a position No, I don't think so.
177:44 - Alright, so let's do a comma. And here we
have our chord content. For this, I'm going
177:45 - to give it a width of 100%. Because by default,
it takes the minimum width. Absolutely, this
177:46 - needs to be a string. kind of confusing jumping
from CSS, back to JavaScript back to CSS.
177:47 - Alright, so flex direction, and give this
a direction of columns. So they stack up on
177:48 - top of the of each other. And I'm going to
give it a padding just like the actual card
177:49 - of 25. And here, let's style the image to
cover we're going to give it a minimum width,
177:50 - otherwise is going to be not visible at all.
So of 200 and an object fit of 200 of 200
177:51 - cover, even though I know that this image
is actually a square image. But in case the
177:52 - dimensions changed, I don't want it to be
like stretched or like kind of shrank. Here,
177:53 - we're going to style the handle. So handle.
So guys, these are divs. So by default, they
177:54 - take zero width, so we need to give them a
width. I'm going to give this a hard coded
177:55 - width of 60 pixels, and the height of 20 pixels.
And the back background. Let's just say background
177:56 - colors, the background. And here I'm going
to give it the color from our theme the primary
177:57 - color. And if we go to our theme right here,
where is the Utila theme, we need to access
177:58 - this property. So we need to access the palette
dot primary dot main. So back to our skeleton
177:59 - here, let's say theme dot what is that pilot
dot primary dot main. And here we need our
178:00 - theme to access that. So let's spread the
theme. And then do comma. So this will have
178:01 - the blue like a link word. And here let's
give it a margin bottom. Otherwise, they're
178:02 - gonna stick to each other. Let's give it seven.
Alright, let's let's save let's see what this
178:03 - handle looks like.
178:04 - Alright, there's a problem here cannot read
property. Props of undefined. Oh, this is
178:05 - not a class based component. So we don't use
that this keyword. Let's go back. Let me reload.
178:06 - Alright, so we see. Okay, we can actually
use Redux to pause our animation at that state.
178:07 - So we can just go here, go back one step,
actually here. Alright, so we can pause at
178:08 - the loading of the data and we can see our
skeleton. Alright, so this looks cool. Not
178:09 - bad, we need to add the other ones. Because
if we don't style them, they're here but they're
178:10 - gonna take zero space. So let's actually style
the full What is it now the date. So the date
178:11 - I want to give this a should we give it I
think we should give it a like smaller height,
178:12 - because it's kind of a smaller font. So let's
give it maybe 14. And should we give it I
178:13 - think we'll give it more width. Let's do 100
for the background color I want to give Hey
178:14 - gray, so we can say okay, I'm gonna use RGBA.
So I'm just gonna give it a black with the
178:15 - with opacity. So not point, I think not point
three with do. And let's carry on and actually
178:16 - style the rest so we have the full line. Now
this will take a height of 15 because this
178:17 - is a bigger font size. And for the width,
we're going to give it a percentage value.
178:18 - So I'm going to give it 90%. I could give
it 100 by four to give it 100 is going to
178:19 - come away here and that
178:20 - Not our actual actual code looks like. Let's
give it a margin bottom margin bottom of 10
178:21 - pixels. Actually, I forgot to give this a
margin bottom margin bottom, give us seven
178:22 - pixels or 10 pixels 10 pixels. Now we have
the half line, which is going to have the
178:23 - same height, it's going to have a width of
actually 50% is going to have a margin bottom,
178:24 - the same one. All right, let's save.
178:25 - She's got to our app. Let's go back to the
loading state. And interesting, we don't see
178:26 - the other depths. To get this depth, oh, we
didn't give it a color, of course, as take
178:27 - this background color here to control or like
Altair, and then paste it. Let's make this
178:28 - a bit darker. So here we'll do Ctrl D and
give it naught point four. Let's save. Alright,
178:29 - let's look at our app. Let's go to Redux go
back to the loading. Actually, I want it to
178:30 - be much darker than this. So let's give it
nonpoint.
178:31 - Thanks, six, we'll do save. Let's go back
to our loading. Okay, so this is a health
178:32 - line as well. So make a mistake. So full line.
Oh, yeah, this needs to be half line, the
178:33 - way CSS works is that it takes the latest
one, so ignore this. Yeah. So this is how
178:34 - offline not for loan. So it's save
178:35 - us go back. All right. I saw for a second
by looked cool. All right. So this looks perfect,
178:36 - I think. Okay, you see the difference? Now
it goes from here to here. Maybe the user,
178:37 - the user dev needs to be a bit shorter. So
here, the handle. So here, let's give it a
178:38 - height of 18. Okay, yep, this is more. It
makes more sense this more appropriate. All
178:39 - right, cool. So if we were to just play, press
play, and if we're to reload, this looks so
178:40 - much better. And even if there is some sort
of, like delay, it doesn't, it doesn't feel
178:41 - like there's any like delay from from the
server to the client. Alright, let's make
178:42 - the profile skeleton as well. So let's go.
Let's go here and utils and create another
178:43 - file called profile, skeleton, dot j, s. And
let's go What do we need that you need in
178:44 - the user. So here when we are loading, they
need to say, profile skeleton. And let's import
178:45 - that. So here from the same directory, select
this control DSA profile skeleton. Let's go
178:46 - to the home as well on here. So profile profile,
fuckin type skeleton. Right here, when we
178:47 - are loading the profile, actually, this is
going to be inside the profile. So oops. So
178:48 - cut that and let's go to profile here in profile
profile. Here, let's import it. Actually,
178:49 - we go back one more level. And right, right
here, so in the loading, say, profile skeleton.
178:50 - And actually, a lot of the styles that are
going to be used in the profile skeleton are
178:51 - going to be the same as the styles in the
profile. So we can just cut all these these
178:52 - styles and put them in the global theme. So
cut that and spread the theme like this so
178:53 - we can still access them. Let's go through
the theme. And at the bottom here, let's put
178:54 - a comma and paste all that stuff. And actually,
you could do the same thing for static profile.
178:55 - So here just select the entire thing and just
remove it and spread the theme instead. And
178:56 - let's save and make sure that we didn't break
anything. Our theme is not defined. And theme.js
178:57 - Oh, okay. has to be this okay. So this Yeah,
we can't refer to it like that we can just
178:58 - copy the value. So this let's go here. Yeah,
okay, because our screen skeleton doesn't
178:59 - have anything yet it doesn't export anything
yet. Let's start creating. With the snippets,
179:00 - I'm going to do RFC E, tab. And change the
syntax to const profile skeleton to the arrow
179:01 - syntax. And we're going to need prop types
we're going to need with styles, slash core
179:02 - router, style slash with styles. We're gonna
need the no image port no IMG from we go back
179:03 - to levels, or one level images slash node
dash image dot png. Here we need the paper
179:04 - just like the actual profile from paper from
material UI paper. And we're going to need
179:05 - the same icons. So let's go to the profile.
And let's get let's get the all the icons
179:06 - here. And the only ones we don't need all
the return and the Edit because we don't have
179:07 - a logout and edit button. Here let's see movie.
Oops. No, we let's declare styles const styles
179:08 - equals theme and returns nothing for now let's
do prop types. So profile, skeleton dot prop
179:09 - types, equals I'm gonna have a classes
179:10 - prop types.object.as required. Yeah, that's
it just classes. Let's get these classes.
179:11 - Props like this without the disk keyword.
And here let's do paper with a class name
179:12 - from the global classes, classes dot paper.
And here kind of similar to the profile so
179:13 - so there's actually like really similar to
the profile except the buttons. Class Name
179:14 - classes dot profile. And inside of here, we're
going to have the image wrapper, which is
179:15 - just actually a normal String class. So dot
image wrapper. And here we'll have image with
179:16 - the source of no IMG given alt profile, oops
profile, the class name of profile dash image.
179:17 - Here we could put a horizontal ruler. And
here I say dot profile details, we have these
179:18 - from the proof from the global styles. Here,
let's put a div with a class name of classes
179:19 - dot handle. HR to make some space is that
a another div with a class name of this is
179:20 - going to be of two full lines because this
is going to be a fake bio. So as to classes
179:21 - dot full line. Just going to copy this one
more time. Copy and paste it and put the HR
179:22 - and here we're gonna put the location icon
so location on the color of primary. And we
179:23 - can put like a placeholder word or we can
put a place to hold a div. I can like we can
179:24 - even put some word in there. So I'll put location
like this. And here let's put HR and here
179:25 - we'll put the link. So the Websites link.
And you can omit these, by the way, guys,
179:26 - because maybe a user wouldn't have these at
all, I'm just going to put them, you know,
179:27 - just for reference. So if you want to not
use them, if you're just like skip, like,
179:28 - or like not use these. So I'll put the link
icon, I'm just gonna put a dummy website,
179:29 - so HTTPS, colon slash slash website, Comm.
But another HR, and here we put the join date.
179:30 - So calendar today, they call of primary that's
going to be joined, they date. So let's style
179:31 - these placeholders. So here, we spread the
theme, so we can use it here for the handle,
179:32 - it's gonna have a couple of things gonna have
a height of 20. By the way, don't forget that
179:33 - the rest of this stuff is already styled from
the global theme. So just style the image
179:34 - or the handle rather, it's gonna have a background
ground color of the, the blue, so we can use
179:35 - the same palette, so themed palette, that
what is a primary, not main, we're going to
179:36 - have a width of 60. Here, we'll have some
margin to actually adjust margin. So margin.
179:37 - So the first one is the top, let's do a string.
So I give it seven on the top, so seven pixels.
179:38 - And on the right and left, I want to give
it auto. So right it's going to be auto, auto
179:39 - bottom, actually that the top is going to
take seven not that. So the top zero, I mean,
179:40 - the bottom is going to take seven. So here
I'll say, seven pixels. And then here for
179:41 - the left, I'm going to put auto. So actually,
that set the handle next thing is we style
179:42 - the the full line, so let's do
179:43 - full line. And here we're gonna have a height
similar to the God stuff 15, and the background
179:44 - color. And we're gonna have the same grace.
So RGBA 000, and here is 0.6. Let's give it
179:45 - a width of 100%. And let's give a margin.
So here we need. So I think you're on the
179:46 - top, although on the on the right. And on
the bottom. Actually, could we give just the
179:47 - bottom, let's try just the bottom, I think
there's the bottom would work. So I'm just
179:48 - going to give 10 on the bottom. And yeah,
let's copy all of this space to call this
179:49 - half line. It's gonna have the same height,
the same color, but the width will be 50%.
179:50 - And the margin bottom will be the same. Let's
save all of this. And let's look at our AP
179:51 - classes dot paper is a problem cannot read
paper of undefined.
179:52 - Oh, it's because here we need to say with
styles, because we don't have classes otherwise.
179:53 - So past styles. And we passed the skeleton.
Alright, let's go back to our app. Go back
179:54 - on the profile loading. Cool. So get the two
full lines for the bio and these icons and
179:55 - the location. So press play. We just reload
our app. Go it looks fine. These, by the way
179:56 - the snap in is because we only have four screens.
So we get to this scroll bar, which pushes
179:57 - the content and then once the content loads,
it goes away. So once we have more screens,
179:58 - this snap in is not going to happen. Alright,
so we're done with the skeletons. Yeah, actually,
179:59 - guys, we're done with the app. So now that
our application is done, we can actually bundle
180:00 - it up and deploy it to Firebase. First of
all, we could build it out and test it first.
180:01 - Sometimes there's production errors that you
don't foresee. So what we're going to do in
180:02 - the app in the terminal, we're going to run
NPM run build, which is a script that comes
180:03 - already already in create react up applications.
Now is going to build it to this build folder.
180:04 - Alright, now that it's built, so everything
is here the static files And everything, we
180:05 - could see the into that. And I have this package
this tool called live server. And you could
180:06 - just run live server in that directory. And
we get a problem. And the problem is the server
180:07 - responded with status 404. Okay, so what is
trying to do is trying to get to the is trying
180:08 - to get Ryan to this I forgot to fix this is
trying to get our resources from localhost
180:09 - from the same origin. And the problem is like,
our proxy only works in development. So we
180:10 - can, we need to actually set up a way to tell
axios to always send requests this instead
180:11 - of the local, not local host or the machines
IP. So here in app j, s, so I'm just going
180:12 - to say, Here axios dot default, dot base URL
equals and we just give it this URL. And this
180:13 - should fix that problem. So let's again, build
it. pm run, build. Alright, let's run it again.
180:14 - Cool, it works, we get our data, no errors,
and we get the users can even like go to the
180:15 - Users page. And the Users page doesn't work.
Oh, okay, we get a cross origin error. So
180:16 - this is a course error. Actually, this is
my bad this is from the server. Let me fix
180:17 - that right now, actually, so in the functions,
and if you've done only the React part, then
180:18 - don't worry, I'll fix this. And it will, it
should work for you. If you've done your own
180:19 - functions, then go to index JS in your functions
directory. And here Actually, let's go into
180:20 - functions, we need to install something called
course. So npm install course, was just add
180:21 - some headers that tell our application that
you can give these resources to any anyone
180:22 - that requests them. So now that it's installed
here, we can say const. Course equals require
180:23 - course like this. And we just need to tell
our Express app to use this middleware. So
180:24 - here we say course use, I would just I mean
up us, and we pass course and we call it here
180:25 - like a function. So let's save. Let me deploy
this function. So Firebase deploy. Okay, now
180:26 - that it's done installing, or deploying, rather,
we could reload our app. Since seems to get
180:27 - the user's details. Okay, it was just some.
Sometimes when you deploy on Firebase, it
180:28 - takes some time for the code to work. And
it works a bit weird at the beginning. All
180:29 - right, so everything works, fine. I can log
in. So let's try to log in here, just to make
180:30 - sure that everything works.
180:31 - And I do login and everything is fine. Cool.
Let's actually deployed to Firebase. Now you
180:32 - go to Firebase, go to your app. And if you
don't have an app, you can create a new one,
180:33 - you can go back to part two of this series.
And there we set up Firebase tools and everything
180:34 - related to that, go to hosting. And I've already
enabled it because I've already tested the
180:35 - host, you know, I don't want to have like
some problems on the video, even though I
180:36 - already had a couple. So you could just click
Enable, and it will work. And let's go to
180:37 - our app here. Let's stop the development server
or like the live server, go to the root directory.
180:38 - And here we're going to initialize Firebase
up. So let's do five days in net, just like
180:39 - we did for our Cloud Functions. Here. Let's
say yes, I want to proceed. And here we want
180:40 - to use the hosting. So space on hosting and
press Enter. And select this up. Do you want
180:41 - to use No Actually, we don't want to use the
public. We want to use the build directory.
180:42 - That's where our build files are. So we say
build, configure single page up. Yes, we say
180:43 - this. already exists. overwrite. Yes, overwrite
it. Cool. So we've already built our app,
180:44 - we could just run Firebase deploy. And if
you want to make a change, you just make your
180:45 - change and you run NPM run build, you build
your your app, and you just run Firebase deploy
180:46 - a new will deploy it. Alright, so it's done
deploying this is the URL head control and
180:47 - I click it. Whoops. Alright, there we go.
So we get our application is deployed. Let's
180:48 - try to log in.
180:49 - All right, the login works. Everything works.
I can post the screen Hello from deployed
180:50 - up Submit it, and it works. Cool. All right,
so this is deployed. So we're done with this
180:51 - project completely. Guys, please any feedback
anything you want to know anything any praise,
180:52 - likes subscribes, please feel free to and
let me know in the comments if what you want
180:53 - me to do like a video on any framework. I've
got a bunch of video ideas right now. So feel
180:54 - free to like, you know, contribute. So thank
you for watching and I will see you soon.
180:55 - Bye