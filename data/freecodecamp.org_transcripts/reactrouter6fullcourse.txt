00:00 - this course will teach you to build real
00:02 - world apps with react router 6. you will
00:06 - Master essential react router features
00:08 - such as layout and index routes nested
00:10 - routes search parameters route
00:12 - protection and the new remix inspired
00:15 - data router apis Bob's role teaches this
00:18 - course he is one of the most popular
00:20 - react instructors ever and is also the
00:23 - head of education at scrimba hi there
00:26 - free code campers and welcome to this
00:28 - interactive scrimba course where you are
00:30 - going to learn how to use the react
00:32 - router library to build single page
00:34 - applications in react since this is a
00:36 - course dedicated to a specific
00:37 - third-party react package it's going to
00:40 - be pretty important that you already
00:41 - know react if you haven't yet learned to
00:43 - react or you just need a refresher I've
00:46 - got you covered I've got another free
00:47 - course here on free code camp and on
00:49 - scrimba that's a complete introduction
00:51 - to react you can check the video
00:53 - description below for a link to that
00:55 - course and then when you're ready you
00:57 - can come back to this course it'll still
00:59 - be here for you I promise now the
01:01 - special thing about this course is that
01:02 - it is fully challenge based which means
01:05 - you as a student are going to get your
01:07 - hands on the keyboard again and again to
01:09 - really practice the topics that we're
01:10 - learning and if you're feeling a little
01:12 - bit concerned at all about following the
01:14 - challenges of this course on your local
01:16 - development environment don't worry
01:18 - that's why we've created an interactive
01:20 - version of this course over on
01:21 - scribba.com there you can solve all of
01:24 - the challenges directly in your browser
01:25 - without having to worry about anything
01:27 - with your local environment If instead
01:29 - you do want to follow all of the
01:31 - challenges on your own local environment
01:32 - that's great too I've got a GitHub
01:34 - repository with all of the code that
01:36 - you'll need in order to follow any of
01:38 - the challenges that we have throughout
01:39 - the course again check the video
01:41 - description below in order to get links
01:43 - to that GitHub repository one final
01:45 - thing if you are enjoying this course I
01:48 - ask that you please give it a thumbs up
01:49 - here on YouTube and if you have any
01:51 - feedback for me you can always reach me
01:53 - on Twitter at bobserol so with all that
01:56 - said let's get started
02:01 - welcome to this course on react router
02:04 - 6. I am so excited to guide you through
02:06 - one of the most popular and impactful
02:09 - libraries that exists in the react
02:11 - ecosystem now react router is a library
02:14 - used for enabling something called
02:16 - client-side routing and understanding
02:19 - what client-side routing even means is
02:21 - just one of the many things that we're
02:23 - going to learn in this course from a
02:25 - really high level we're going to be
02:26 - learning about the basics of using
02:29 - routes and routing we're going to learn
02:31 - about how to navigate between our routes
02:33 - we'll learn about layout and index
02:35 - routes nested routes we'll dive pretty
02:37 - deep into learning about search params
02:39 - and how to filter results and we'll be
02:41 - creating protected routes so that you
02:43 - can allow only authenticated users to
02:45 - visit certain parts of your page along
02:47 - with those there's a ton more that we're
02:49 - going to be learning and of course in
02:51 - the typical scrimba fashion we'll be
02:52 - doing tons of Hands-On practice in order
02:55 - to drive the curriculum forward we're
02:56 - going to be building a really cool app
02:58 - called van life which is a way for
03:00 - people to rent out camp Vans for their
03:02 - next road trip adventure this app will
03:04 - have over 10 routes we'll be able to
03:06 - filter the Vans by their type we'll
03:08 - learn about active nav link styling so
03:10 - we can very easily tell in the user
03:12 - interface where we are in the current
03:14 - APP as I mentioned we'll be including
03:16 - protected routes so that certain pages
03:18 - will only be accessible if you're logged
03:21 - in and will be hitting hard the concept
03:23 - of nested routes because this app goes
03:25 - multiple levels deep into nested routes
03:27 - then towards the end of the course we're
03:29 - going to be shifting Focus briefly to
03:31 - learn about how we can migrate our fake
03:33 - data into a real database using Firebase
03:35 - and periodically throughout the course
03:37 - we're going to update a live version of
03:40 - our site by deploying it to netlify here
03:42 - on the scrim I do have the final version
03:44 - of the code for the app that we'll be
03:46 - building so you're welcome to poke
03:47 - around the app get a feel for it you of
03:49 - course are also welcome to look around
03:51 - the code don't let it be intimidating
03:53 - because jumping into a new code base is
03:55 - always a bit intimidating instead be
03:58 - excited that you're going to be learning
03:59 - everything you see here now this should
04:01 - be really relatively self-explanatory
04:02 - but the things you should know before
04:04 - starting this course are of course react
04:06 - I would expect before you start this
04:08 - course that you have a pretty solid
04:10 - foundation in react if you are feeling
04:12 - Rusty or you have not yet had a chance
04:14 - to really learn react this course will
04:16 - not be a good starting point for that it
04:18 - will assume that you already have the
04:20 - basics in your tool belt so if you do
04:22 - need to spend some time learning react
04:24 - or just brushing up on certain topics I
04:26 - have a free course here on scrimba it's
04:28 - over 12 hours long it's got tons of
04:31 - practice tons of projects and is
04:33 - completely free you can click the
04:35 - screenshot here which will take you to
04:36 - that course on scrimba if you'd like my
04:39 - name is Bob zerol I'm going to be the
04:40 - course instructor for this entire course
04:42 - the most active place you can find me
04:44 - online these days is on Twitter you can
04:46 - click this little Twitter icon to go to
04:48 - my profile page on Twitter and without
04:50 - any further delay let's jump in and
04:52 - start learning about react router
04:54 - version 6.
04:58 - I mentioned that react router enables us
05:00 - to do something called client-side
05:02 - routing however that might not make a
05:04 - whole lot of sense on its face if you're
05:06 - not familiar with the history of
05:08 - multi-page applications versus single
05:10 - page applications so let's spend a
05:13 - second talking about the difference
05:14 - between these two in a more traditional
05:16 - website you have multi-page applications
05:18 - or mpas on the left side of this diagram
05:21 - we have a client it's showing a computer
05:23 - but more accurately the client is really
05:25 - the browser in our case and on the right
05:28 - side we have a server which really is
05:30 - just a computer that lives off-site
05:32 - usually somewhere else so when you go to
05:35 - your browser and you navigate to a
05:36 - website let's say mysite.com a
05:39 - simplified version of what happens is a
05:41 - request is made to the server that's
05:43 - associated with the domain of my
05:45 - site.com and it's requesting the HTML
05:48 - page that is needed to display the web
05:50 - page at that point the server will do
05:52 - some processing it will grab the HTML
05:55 - page but it also might be evaluating
05:57 - some CSS or some JavaScript it could
06:00 - potentially be reaching out to a
06:02 - database or making API calls to other
06:04 - servers in the end with the ultimate
06:06 - goal of putting together a completed
06:08 - home page to send back to the browser in
06:11 - the form of an HTML file that HTML file
06:13 - is then sent back as a response from the
06:16 - server to your browser and your browser
06:18 - then loads that page for you to view so
06:21 - then once you're looking at that home
06:22 - page you might go ahead and click on the
06:24 - about page the URL for this would be my
06:27 - site.com about which would then perform
06:30 - another request to the server the server
06:32 - again would go through similar processes
06:34 - where it would be searching for the
06:36 - about page to then deliver up to the
06:38 - browser your browser would then replace
06:40 - the old home page with the new about
06:42 - page from the browser's point of view it
06:45 - might look something more or less like
06:46 - this not including this actual animation
06:48 - when you're on the home page you can see
06:50 - all of the homepage content including a
06:53 - header let's say and a footer and when
06:54 - you click on the about page the entirety
06:57 - of that page is disk carded and replaced
06:59 - with the entirety of the new page of
07:02 - course it's usually not a sliding motion
07:04 - like this instead it will appear more
07:06 - like a Flicker and that Telltale flicker
07:08 - is a good way to know that you are
07:10 - currently looking at a multi-page
07:11 - application so how does a single page
07:14 - application differ well don't be
07:16 - confused by the name single page
07:18 - application it doesn't actually mean you
07:20 - can only have one page on your website
07:22 - but instead it means that your browser
07:24 - is only loading a single web document
07:26 - one time and then your app will make
07:29 - incremental updates to that existing
07:31 - document through different methods like
07:33 - internal react State changes or fetch
07:35 - requests to an API it all starts in a
07:38 - very similar fashion in your browser you
07:40 - navigate to mysite.com that makes a
07:42 - request to the server the server will
07:45 - then process a few things but this time
07:47 - instead of its job being to process and
07:49 - build an HTML file it's going to send
07:52 - back an entire react application so that
07:55 - application is sent back to the browser
07:57 - it's loaded into the browser and when
07:59 - new requests like going to the about
08:01 - page are made oftentimes portions of
08:04 - that new page are able to load directly
08:07 - inside of the react app without any new
08:09 - requests being made out to the server
08:11 - that said the about page might still
08:13 - need some extra information or data from
08:16 - a server or an API and so a request
08:18 - could still be made out to a server at
08:21 - which point it would do its job and this
08:23 - time instead of sending a new page back
08:25 - because remember that view already
08:27 - exists inside of the react app itself
08:29 - it's likely only going to be handling
08:31 - sending back something like Json data
08:34 - that Json data gets sent back to your
08:35 - react app which then loads into the
08:38 - react app gets consumed by it and
08:40 - changes whatever view you're looking at
08:41 - to include the new Json data that you
08:44 - just loaded from the server all that
08:45 - said on the client side the real
08:47 - difference that you'll see is there
08:49 - won't be the same flicker of the entire
08:51 - page when you're going from one page to
08:53 - the next because remember we're not
08:54 - reloading the entire document it's just
08:57 - one document one page but the content on
09:00 - that page might change in essence what
09:02 - that does is it might swap out the home
09:04 - page content for the about page content
09:06 - because the react app was loaded on the
09:09 - initial render of your website it
09:11 - already knew what content the about page
09:13 - was going to contain and it may or may
09:16 - not have had to reach out to a server to
09:18 - get some additional data in fact in our
09:21 - van Life app we're going to see this
09:22 - where we can transition to the about
09:24 - page without any delay without any of
09:27 - that flicker that happens with the
09:28 - multi-page application and the about
09:30 - page doesn't request any additional
09:32 - resources or Json data from the server
09:35 - instead it's already loaded on the
09:37 - initial render of our site however when
09:39 - we go to the Vans list page the
09:41 - beginnings of that page will load in
09:43 - sort of a skeleton UI you could say
09:45 - while in the background a request is
09:48 - being made to the server to ask for the
09:50 - specific data about the vans that we
09:52 - need to list then once that data comes
09:54 - in it will update the page to display
09:56 - the Vans this will make a bunch more
09:58 - sense once we actually start developing
10:00 - it so that's a very high level overview
10:02 - of what will be happening as we're
10:04 - building a single page application using
10:06 - react router now it's time for us to
10:08 - actually dive in and start learning the
10:10 - code
10:13 - hey free code campers this is a special
10:16 - message just for those of you that are
10:18 - taking this course on YouTube when
10:20 - you're following this course on YouTube
10:22 - you likely will want to complete the
10:24 - challenges and write the code alongside
10:26 - me in your own local environment and so
10:28 - I wanted to make a quick note about
10:30 - developing through this course locally
10:32 - at this point in your Learning Journey I
10:34 - assume you're already familiar with some
10:36 - kind of editor like vs code and at least
10:39 - know your way around the program in
10:41 - order to create new files and open a new
10:43 - project and so forth well the code for
10:46 - every lesson in this course exists
10:48 - inside of a GitHub repository that I
10:50 - really want to encourage you to go
10:52 - follow using this GitHub repository will
10:54 - give you the starting code for every
10:56 - single lesson in this course not only
10:58 - that but it will have a really important
11:00 - readme down here that will give you
11:03 - specific instructions for how to set
11:05 - this up on your local machine and any
11:07 - gotchas that you might run into while
11:09 - you're developing locally as well as any
11:11 - updates to this course that you might
11:12 - need to be aware of of inside of scrimba
11:15 - I have the power to record new lessons
11:17 - and insert them anywhere inside the
11:19 - course that I want but with the course
11:20 - being here on YouTube I don't have that
11:22 - same capability so this GitHub
11:24 - repository and the readme therein is
11:27 - going to be a really important tool for
11:28 - you as you work through this course to
11:30 - make sure that you're getting the most
11:32 - up-to-date information so even if you
11:34 - don't plan to use the code from this
11:36 - GitHub repo and you just are going to
11:38 - start the project up completely from
11:39 - scratch on your own still make sure that
11:41 - you come to this GitHub repository start
11:44 - it watch it bookmark it whatever you
11:46 - need to do and make sure to check it
11:48 - regularly in case there are any updates
11:50 - that will be important to you as you
11:51 - learn react router in this course the
11:54 - link to this GitHub repository should be
11:55 - readily available in the description
11:57 - down below if for whatever reason you
11:59 - get stuck developing locally while it is
12:02 - a great experience to debug those local
12:04 - development issues I don't want that to
12:06 - become a demotivator for you and stop
12:09 - you from your progress in the course so
12:11 - if at any point you do feel like you're
12:12 - getting stuck you are of course is
12:14 - always welcome to head over to the
12:15 - scrimba platform and just pick up where
12:17 - you left off in the react router 6
12:19 - course okay that's all I have to say
12:21 - about this for now let's keep moving
12:22 - forward in the course
12:27 - okay we're gonna start this app from the
12:29 - almost bare bones we have a very basic
12:32 - react project here you can see that all
12:34 - we really have is a simple hello world
12:36 - there's one thing I do want to point out
12:38 - and that's something that I haven't
12:39 - really talked much about before and you
12:41 - might have noticed it real quick over
12:43 - here in the index.html you'll see that
12:45 - our script tag is pointing to
12:47 - index.jsx when you're working in a react
12:50 - project you can specify any files that
12:53 - have react components in them
12:54 - specifically ones that are using the jsx
12:57 - syntax as having a DOT jsx extension now
13:01 - under the hood in scrimba we've made it
13:03 - so that it's using Veet in order to
13:05 - compile the language if you were to
13:06 - download this onto your local machine
13:08 - and run it and Veet expects any
13:10 - components you make in the jsx syntax
13:12 - are using the dot jsx file extension now
13:15 - here on scrimba it's going to work just
13:17 - fine if you decide to make these as dot
13:19 - JS files but I did want to introduce you
13:21 - to that in case you had never seen it
13:23 - before so throughout this section and
13:25 - this project we are going to be using
13:26 - jsx files when there's a react component
13:29 - involved okay let's move on to react
13:31 - router setup you can see I have react
13:33 - and react Dom included as dependencies I
13:36 - need to include another module called
13:38 - react router Dom and that's react Dash
13:41 - router Dash Dom so I'll add that here
13:44 - you can see the current version is 6.4.3
13:47 - now for a little extra information react
13:50 - router Dom 6.4 introduced a whole new
13:53 - set of tools that you can use in react
13:55 - router I'm planning on touching on those
13:58 - new additions to 6.4 a bit later in the
14:01 - course however in this section I'm only
14:03 - going to be focusing on the basics that
14:05 - come with version 6. we will not be
14:08 - going into the data layer apis that come
14:10 - with 6.4 okay let's start out with the
14:13 - most basic thing in order to set our
14:15 - project up as a single page application
14:17 - with routing using react router we need
14:19 - to import a few things and in this
14:22 - screencast the only thing we're going to
14:23 - be worried about is importing something
14:25 - called browser router and that comes
14:29 - from react router Dom
14:31 - now we just learned about context
14:33 - recently in this course so I think this
14:35 - will be interesting to you what browser
14:36 - router is doing under the hood is it is
14:39 - a context provider and so in order to
14:42 - give our app the power to include
14:44 - routing in its functionality we need to
14:46 - wrap our entire app with this browser
14:49 - router so I'm going to put browser
14:53 - router around the app like this we'll
14:56 - hit save and nothing much should have
14:58 - changed we should still get our hello
15:00 - world text right there but by simply
15:02 - adding browser router we now have a
15:04 - whole Suite of tools that come with
15:06 - react router Dom that we can use to
15:08 - control our app now just in case you see
15:11 - this in the wild sometimes people will
15:13 - rename browser router since it's a bit
15:15 - of a mouthful and so they'll import
15:16 - browser router but then rename it to
15:18 - something like router now we're also
15:20 - going to be seeing that there is a
15:22 - routes component and a route component
15:25 - so I'm not going to rename it as router
15:27 - because those are all very similar so
15:29 - we'll just call it browser router for
15:31 - now awesome this is a great start like I
15:34 - mentioned there's a few other components
15:35 - we're going to be importing so that's
15:37 - what we'll be working on next
15:41 - as we mentioned browser router is a
15:44 - context provider and it provides context
15:46 - to all of its children components very
15:48 - similar to what we were doing in our
15:50 - reusability section so browser router is
15:52 - the provider we need to set up a way to
15:55 - define the routes that we want in our
15:58 - application we're going to start with a
16:00 - really simple Home Route and an about
16:02 - route and there's two components I need
16:04 - to pull in in order to start setting
16:06 - that up the first one is one called
16:08 - routes the routes component goes as the
16:11 - first child inside the browser router so
16:14 - I'll set up routes here and I think to
16:17 - avoid confusion I'm actually going to
16:18 - stop rendering our app component so we
16:21 - just have the browser router and this
16:23 - empty routes element notice here it has
16:25 - a separate closing tag and that's
16:27 - because inside of routes will need to go
16:30 - a series of new components that is just
16:32 - called route now just in case you don't
16:35 - know a route is just part of your url
16:38 - that specifies where on your website you
16:40 - are so let's say you have a website like
16:43 - example.com example.com would be your
16:46 - home page and oftentimes it has a
16:49 - trailing slash so that route might just
16:51 - be called the slash route but if you
16:53 - wanted to create an about page on
16:55 - example.com you would maybe have a route
16:57 - called slash about and then this part of
17:00 - your url is the route for your site
17:02 - maybe you have a contact page that would
17:05 - be slash contact or maybe you have a
17:07 - Blog Page slash blog now routes can be
17:10 - nested and we're going to cover nested
17:11 - routes later but if you had a Blog you
17:13 - might want to specify that you have
17:16 - another route as part of this URL that
17:18 - leads you to blog article one you
17:21 - hopefully have more interesting titles
17:22 - than that oftentimes blogs will use the
17:25 - title of the blog as this part of the
17:27 - URL although you might see sometimes
17:29 - it's just an ID number where it
17:32 - specifies for the database under the
17:34 - hood which blog ID number it should be
17:36 - looking for currently over here in the
17:38 - mini browser you can see that it says
17:40 - slash index.html and when we're just
17:42 - serving up a single HTML file that might
17:44 - be true but once we set up our routes
17:46 - we're going to just see the route
17:48 - portion of our mini browser it's not
17:50 - going to say something like example.com
17:52 - it's just going to say slash or in our
17:55 - case slash about it'll also say in the
17:58 - app we're building it'll be slash Vans
18:00 - it'll be a Vans route and then we're
18:02 - also going to have Vans slash and then
18:04 - some ID number for the van okay we're
18:07 - getting a little ahead of ourselves we
18:08 - don't have any routes to find so now we
18:10 - have a place to put our routes we need
18:12 - to start using this route component to
18:14 - actually Define our routes and actually
18:16 - we've covered enough material I want to
18:18 - get your hands on the keyboard so we're
18:19 - going to have a quick challenge before
18:20 - we move on
18:25 - before we get too far I want to make
18:27 - sure that you are practicing some of
18:28 - this so you're basically starting from
18:30 - scratch I've actually removed the app
18:32 - component because in this case we're not
18:34 - actually going to render anything to the
18:36 - page yet and I've already included the
18:38 - react router Dom dependency over here so
18:40 - all you need to do is to render our
18:42 - browser router with a routes component
18:45 - inside of it so pause here and work on
18:47 - this challenge
18:53 - okay first things first let's make sure
18:55 - we import the browser router and the
18:59 - routes components from react router Dom
19:03 - again the browser router is a context
19:05 - provider so we are going to wrap
19:08 - everything that we have Below in the
19:10 - browser router and for now we're just
19:12 - going to put one nested child component
19:14 - in there and that's going to be the
19:16 - routes component all of the rest of our
19:18 - work with react router is going to
19:20 - happen inside of this routes component
19:22 - okay hopefully everything has made sense
19:24 - so far we haven't gotten too deep yet so
19:26 - when you're comfortable with what we've
19:27 - done here we'll move on next to creating
19:29 - our route definitions
19:34 - the next component we'll talk about is
19:36 - the route component which we also need
19:38 - to import from react router Dom and this
19:41 - is really where the meat of what you'll
19:43 - be working on will happen it's within
19:45 - these route components the most basic
19:47 - way to use a route component is to
19:49 - render it as a self-closing element here
19:52 - and the route component can take a few
19:54 - different props the most common of which
19:56 - are the two that we're going to learn
19:57 - now and that is path which is where we
20:00 - specify what the path to this route
20:02 - should be remember I mentioned that the
20:04 - Home Route is going to be called just
20:06 - slash well that's what we're talking
20:07 - about here we're talking about the route
20:09 - path if I wanted to create an about page
20:12 - I would make this slash about or a
20:14 - contact page slash contact for now let's
20:17 - create a home page and secondly we need
20:20 - to tell it which react element we want
20:22 - to render if the path in the URL bar
20:25 - matches the path that is defined here on
20:28 - this route component now you'll see that
20:30 - I put a set of curly braces that's
20:32 - because inside the curly braces I need
20:34 - to render some kind of jsx in this case
20:37 - we'll say when the home page is loaded
20:39 - or rather when the path is just a plain
20:41 - old slash we want to render our app
20:44 - component that we have up here now I
20:46 - haven't quite shown you this yet but I
20:47 - want you to see if you can figure out
20:49 - what we need to put here I mentioned
20:51 - that we need to render our app component
20:53 - see if you can read between the lines
20:54 - and figure out what it is that's going
20:56 - to happen inside my curly braces here
20:58 - this is the kind of thing that's fun
21:00 - just to play around if it doesn't work
21:02 - that's completely fine you're not
21:03 - breaking anything that can't be undone
21:05 - so notice that our mini browser is
21:07 - currently at slash see if you can make
21:09 - it so that when you fill in this element
21:11 - and then hit save that your hello react
21:14 - router H1 will show up here on the page
21:16 - pause now and see if you can get that to
21:18 - work
21:24 - one thing you may have tried was to pass
21:26 - a component as a function like this and
21:29 - actually in past versions of react
21:31 - router you actually could do something
21:33 - very similar to that however I did
21:34 - mention that we need to render the app
21:36 - so I'm going to surround it with the
21:38 - angle brackets like we see here okay
21:40 - let's hit save
21:41 - and there we go we are at the slash
21:43 - route and we're rendering the app
21:45 - component when we're at the slash route
21:47 - out of curiosity let's see what happens
21:49 - if I add a slash about here and hit
21:52 - enter okay it sends us to the slash
21:54 - about page but there is no slash about
21:56 - path and so nothing is showing up this
21:59 - seems like a great place for another
22:01 - challenge
22:02 - okay your task is to create an about
22:05 - component just right here underneath our
22:07 - app component and it can render whatever
22:09 - you want I mentioned an H1 that says
22:11 - about page but then I realize that's
22:13 - probably pretty boring so choose
22:14 - whatever you want to render there and
22:16 - then you need to create a new route so
22:18 - that it will render the about component
22:19 - when the path is slash about I've
22:22 - already put it here at slash about so
22:23 - you will know that this worked when you
22:25 - hit save or refresh over here and your
22:27 - H1 or whatever it is you render in your
22:30 - about component is rendered to the page
22:32 - pause now and work on this challenge
22:40 - I'm feeling a little bit boring so I'm
22:42 - not going to be super creative and I'm
22:44 - just going to copy my app component and
22:46 - we'll put this as an about component and
22:49 - we'll just say about page goes here okay
22:52 - maybe we can make it a little more
22:54 - interesting we'll put a little Tada
22:55 - symbol there okay now down here where my
22:58 - route definitions live I'm going to just
23:01 - copy my route this path will be slash
23:03 - about and the element will be the about
23:06 - component getting rendered I'm already
23:09 - at slash about let's hit save and there
23:12 - we go about page goes here and if I get
23:14 - rid of Slash about in the mini browser
23:16 - URL bar and hit enter it sends us back
23:18 - to the home page or maybe more
23:20 - specifically the slash route let's clean
23:23 - this up so we can see a little bit more
23:26 - awesome work now you might have noticed
23:28 - it's quite annoying to have to click up
23:30 - into the URL bar in the mini browser and
23:33 - type out slash about usually that's not
23:35 - how navigating around the website's
23:37 - going to work so in the next lesson
23:39 - we're going to briefly cover another
23:40 - component from react router Dom called
23:42 - link that will help us navigate through
23:44 - our routes in a much easier way
23:50 - okay before moving on I actually want to
23:52 - do a very quick reorganization I didn't
23:55 - just want to do it behind the scenes
23:56 - because I was worried that you might get
23:57 - a little Jarred by me having changed the
24:00 - code so quickly but right now it's I
24:02 - guess a little wonky maybe it's just me
24:03 - but I have this app function or app
24:06 - component that's being rendered as the
24:08 - home page but I have an about component
24:10 - that's being rendered as the about page
24:12 - I feel like I'd rather keep the names a
24:14 - little bit different and then instead of
24:15 - rendering the entire browser router
24:17 - inside of this render method I think
24:18 - what I'm going to do is treat the app
24:20 - like the top level so I'll just render
24:23 - app and that means I'm going to take
24:25 - this entire browser router put it inside
24:27 - of app and then I'll create a separate
24:30 - component just called home that
24:32 - represents the home page
24:35 - then instead of rendering the app as the
24:39 - home page will render the home component
24:40 - that we just made and down here we need
24:43 - to render our app and maybe let's move
24:45 - this onto its own line
24:49 - okay that feels a little better to me
24:51 - let's move on
24:55 - like I mentioned it's a bit annoying to
24:57 - have to go up to our menu bar just to
24:59 - change which route we're in so if I want
25:01 - to go back to the home page I have to
25:03 - hit slash and then if I want to go back
25:05 - to the about page I have to type in
25:08 - slash about we also can see that when I
25:10 - do that the page is actually blinking
25:12 - which means it's refreshing it's doing a
25:14 - complete full page refresh it's not that
25:17 - big of a deal when you only consider
25:19 - about the blink but if you have any kind
25:21 - of state living in your app that needs
25:23 - to be passed to the about page or well
25:25 - really any state at all doing that page
25:28 - refresh is going to completely wipe out
25:29 - any state that you were maintaining if
25:31 - you really think about it a react app is
25:33 - a little bit delicate when it comes to
25:35 - State because if that page refresh
25:37 - happens then all your state just
25:38 - completely disappears unless you're
25:40 - saving it in local storage or something
25:42 - like that it will just completely reset
25:44 - now the way to solve this problem in
25:46 - HTML is to have an anchor tag the
25:48 - problem with an anchor tag is when you
25:50 - click it it will do another page refresh
25:53 - so we need some way to navigate between
25:56 - our different routes within the
25:58 - ecosystem of react router Dom
26:00 - Unfortunately they give us a component
26:02 - to do that and it's called link so I'm
26:04 - going to import the link component
26:06 - capital L link and if you actually look
26:08 - at your Dev tools when you render a link
26:10 - it's just rendering an anchor tag but
26:13 - it's intercepting the path that the
26:15 - anchor is sending you to and making sure
26:17 - it doesn't do that page refresh so you
26:19 - can maintain your state now this isn't
26:21 - the real way that you would do this but
26:22 - to avoid having to put links in both the
26:25 - home and about Pages I'm just going to
26:27 - stick a link element right here and the
26:29 - way that link works is very similar to
26:32 - an anchor tag so it will have an opening
26:34 - and a closing portion to it whatever you
26:36 - put inside is what will be the text that
26:39 - shows up on the page but instead of an
26:41 - href property a link takes a two
26:44 - property and this is actually kind of
26:46 - nice because it reads like English this
26:48 - is a link to the following route and so
26:50 - I'll say equals slash to go to home
26:53 - we'll duplicate that and we'll say it
26:54 - goes to slash about to go to the about
26:57 - route again you aren't going to usually
26:59 - stick your links just inside your
27:01 - browser router like this we're going to
27:03 - see a more robust way to have this
27:05 - navigation element that will appear on
27:07 - every page later but let me hit save
27:09 - it's going to be poorly styled it's just
27:12 - kind of shoved together because they're
27:13 - inline elements but when I click the
27:15 - home button it takes me to the slash
27:17 - route and when I click about it takes me
27:19 - to the about route and if you look
27:21 - closely you'll see that there's no page
27:23 - refresh happening between the two if I
27:25 - were to create some state in my app and
27:27 - pass that as props to my home and about
27:29 - components whatever state I created even
27:32 - if I decided to change it maybe like a
27:34 - counter that I had a button that said
27:36 - incremented and it counted up to 10 when
27:37 - I go back and forth between the about
27:39 - page and the home page both of those
27:41 - will still have that state of 10 as
27:44 - opposed to using an anchor tag or typing
27:46 - into the URL bar because that would
27:48 - refresh the page and refresh my counter
27:50 - State back to zero because it would take
27:52 - quite a bit of code I'm not going to
27:53 - bother actually showing that example
27:54 - hopefully it makes sense if not that's
27:56 - okay the main thing to take away is that
27:58 - if you want to link from one place to
28:00 - another or navigate from one place to
28:02 - another inside your react app using
28:04 - react router you have to use the link
28:06 - element now if I want to style these
28:09 - links I could either give each one of
28:10 - them a class name and select that class
28:13 - name in my CSS or if I need to use the
28:16 - element selector then I can go into my
28:19 - CSS I can say select my nav or maybe if
28:22 - I had some kind of class on my nav then
28:24 - I would put it there but to select the
28:26 - element of the link remember it's
28:27 - rendering an anchor tag so I need to
28:29 - select the anchor so maybe I don't like
28:32 - the underline we would say text
28:33 - decoration none and there goes the
28:35 - underline we are going to be revisiting
28:38 - the links a little bit later in this
28:39 - section but for now this is good enough
28:41 - for us to more easily navigate around
28:44 - our app without having to type into the
28:46 - navigation bar or use these little back
28:48 - buttons and lose our state in the
28:49 - meantime as always feel free to play
28:51 - around with everything we've learned
28:53 - here and when you're ready we'll move
28:54 - forward
28:57 - before we move on we're going to apply
29:00 - what we've learned so far by creating
29:02 - the first two pages of our van life
29:04 - project so your challenge is to do
29:07 - exactly that I do have the react router
29:09 - Dom dependency already installed in this
29:11 - project so you don't have to worry about
29:13 - adding the dependency but you'll see
29:15 - that I have no Imports I'm not using
29:17 - anything with react router yet and so
29:19 - that's going to be your task as a part
29:21 - of that I want to make sure that you
29:22 - also include a navigation bar so that
29:25 - you can at least get to the home page by
29:27 - clicking this van life logo or the about
29:29 - Page by clicking the about route if you
29:32 - want you can add a Vans route but we're
29:33 - not going to be dealing with that quite
29:35 - yet as a part of that you'll notice that
29:37 - both the home page and the about page
29:39 - have the same navigation bar we haven't
29:41 - learned sort of the official way to
29:43 - handle this but I did show you one
29:45 - example in a recent scrim so I wouldn't
29:47 - worry too much about it if you want to
29:49 - copy and paste the code you use for the
29:51 - navbar on the two pages that's totally
29:53 - fine if you find a way to use the same
29:55 - code on both Pages that's fine too we're
29:57 - going to learn learn a more official way
29:59 - to handle that situation in an upcoming
30:01 - lesson now this isn't something I'll say
30:03 - super often but I do trust you to know
30:05 - where your strengths and your weaknesses
30:07 - lie if you do feel like you struggle
30:09 - with CSS then I would encourage you to
30:11 - actually do all of the CSS by yourself
30:13 - it's not an insignificant amount that
30:16 - you would be spending trying to get this
30:17 - designed this way so I just wanted to
30:19 - give you a heads up since I have already
30:21 - designed this on the side we're not
30:23 - going to be spending our time actually
30:25 - thinking through and writing all the CSS
30:27 - I'm just going to copy and paste what I
30:29 - already have but since this isn't school
30:31 - I'm not going to be giving you a grade
30:33 - so if you have a weakness in CSS then
30:36 - practice it exercise it actually do this
30:38 - yourself you can click on either of
30:40 - these screenshots which will take you to
30:41 - the figment design where you can grab
30:43 - all of the spacing and fonts and colors
30:45 - and everything you need however if you
30:47 - do feel pretty confident in CSS and you
30:49 - really are just here for the react then
30:51 - I totally understand if you just want to
30:53 - make a Bare Bones white background black
30:56 - text page that will link you between the
30:59 - home and about page to practice react
31:01 - router specifically and not necessarily
31:03 - to practice the CSS so I'll leave it up
31:05 - to you just do whichever will be best
31:07 - for your own education okay that's
31:09 - enough of an intro pause now and work on
31:11 - this challenge
31:17 - okay let's import some of the things
31:19 - that we already know we are going to
31:21 - need we know we need browser router
31:24 - that's going to be the context provider
31:26 - that will set up everything with router
31:28 - we'll need the routes component and some
31:31 - routes inside using the route component
31:34 - the naming is a little confusing and
31:36 - we're going to need the link component
31:38 - and all of this will come from react
31:42 - route or Dom there's a few different
31:44 - ways that we can set this up let me buy
31:46 - myself some space here we could either
31:48 - put all of our react router stuff here
31:50 - inside of app or we could put all of the
31:53 - react router stuff right here in the
31:55 - render I'm going to prefer that my app
31:57 - act almost like a table of contents for
32:00 - my react router stuff and so I'm going
32:02 - to render the browser router right here
32:06 - in my app we'll create our set of routes
32:09 - and inside there we will have a route
32:13 - we'll have two routes and these are both
32:16 - going to have a path and the second one
32:18 - is going to be about but we'll handle
32:21 - that in a second and then it will be
32:23 - rendering an element
32:25 - and let's have the first one do a home
32:28 - element the second one do an about
32:30 - element this will be slash about and
32:33 - then that is going to lead us to some
32:35 - errors where we don't have a home or
32:37 - about element so let's import those even
32:40 - though they don't exist yet and actually
32:42 - you know what I think I'm going to put
32:43 - all of my pages into a folder called
32:46 - pages so we'll say that I'm importing
32:49 - this from dot slash Pages slash home and
32:52 - about okay that means I'm going to have
32:55 - to create those so we'll create a Pages
32:58 - directory and I'll create a home dot j
33:02 - let's see jsx because I'm going to use
33:04 - jsx in this project
33:07 - and we'll also create an about.jsx
33:13 - okay import react from react
33:17 - hopefully by now this has become kind of
33:19 - second nature just being able to spin up
33:22 - a quick react opponent like this
33:25 - let's do our classic H1 that says home
33:28 - page and then I'm just going to copy
33:30 - this whole thing and put it in the about
33:32 - we'll change this to say about page okay
33:35 - this is good it's now displaying home
33:38 - page here so let's go back to index and
33:42 - I guess let's test to see if we have our
33:44 - different routes so for now because I
33:45 - don't have any links we'll have to type
33:47 - in slash about okay we got to our about
33:49 - page cool now like I mentioned in the
33:52 - challenge I didn't want you to spend too
33:54 - much time looking into how you would
33:56 - include the navigation bar only because
33:58 - there's a sort of this designated real
34:01 - way to do this in react router and we
34:03 - haven't learned about that yet obviously
34:05 - when we have a site with a lot of
34:06 - different pages it's not very
34:08 - maintainable to copy and paste the
34:10 - navigation bar into every one of our
34:12 - Pages if that's the way you solved this
34:14 - challenge of getting the navigation bar
34:16 - up there that's completely okay I
34:18 - specifically mentioned that that could
34:19 - be something that you do but one other
34:21 - thing we could do is before we start
34:22 - rendering our routes I could stick the
34:25 - navigate education bar right here under
34:27 - my browser router above my routes so
34:29 - that's what I'm going to do for now but
34:31 - we'll be learning the real way to do
34:32 - this very soon so let's maybe put this
34:35 - all inside of a header element and
34:38 - that's where we will have our navigation
34:40 - and let's see to be honest I'm not sure
34:43 - if the logo that is clickable and sent
34:46 - you to the home page should be a part of
34:48 - this nav element because it's also kind
34:50 - of serving as the site logo for now I
34:53 - think I'm going to just consider what's
34:55 - on the right here part of the navigation
34:57 - and I'll call this maybe its own link so
34:59 - in the nav I'm not going to use an a tag
35:02 - because that is not how we transition
35:04 - from one page to the next in react
35:06 - router I'm going to use a link element
35:08 - but I need to import this so oh I
35:11 - already did import it okay awesome this
35:13 - one will lead us to the about page I
35:16 - need a two prop that goes to slash about
35:18 - and then as part of the header but not
35:21 - part of this nav we'll say that we have
35:24 - another link
35:26 - this is the one that will say hashtag
35:28 - van life and this is going to send us to
35:32 - the home page or slash okay I'm sure
35:34 - this isn't going to be pretty but let's
35:36 - see if it works that takes us home that
35:39 - takes us to about okay now this is kind
35:41 - of what I was talking about the rest of
35:43 - our efforts would really just be into
35:45 - putting some content on the page and
35:48 - then dealing with CSS however because
35:50 - we're learning about react router I'm
35:52 - not going to spend our precious time
35:53 - making you watch me do CSS so I'm going
35:56 - to snap my fingers
35:57 - and just like that we have a project
35:59 - that is designed now don't be thrown off
36:02 - this is basically what we had before
36:04 - just with a few changes and I'll walk
36:06 - you through them so it's not so
36:07 - disorienting our home page and about
36:10 - page I've really just put in some CSS
36:12 - classes and some content same with the
36:15 - about page over here one thing you can
36:17 - see is that I also added these images I
36:19 - put them inside of a folder called
36:21 - assets and then images so we have the
36:24 - two Heroes on the two pages I have some
36:26 - styles that I plan to use throughout
36:28 - like this button right here I called a
36:30 - link button just because it is actually
36:32 - a link but I wanted it to look like a
36:34 - button and there's a few places where
36:36 - that exists I think over on our home
36:37 - page we also have this one I think right
36:40 - now this might be sending to the slash
36:41 - Vans route yeah but we don't have that
36:44 - yet we're going to get there soon so
36:45 - feel free to poke around the CSS if
36:47 - you'd like it's really just 145 lines on
36:51 - top of what we already had so it's
36:52 - really not too bad so the next thing
36:54 - we're going to start learning about is
36:56 - something called nested routes so once
36:58 - you feel good about what we have here
37:00 - let's move on
37:04 - you know it may not look like much but
37:06 - darn it it is worth sharing so let's
37:08 - talk about continuous deployment using
37:10 - netlify the terminology may sound
37:12 - complex but I promise it's easier than
37:14 - it sounds in this lesson we're going to
37:16 - walk through every step that you'll need
37:18 - to accomplish in order to get your
37:20 - project deployed up on netlify and have
37:22 - an Associated repository on GitHub but
37:25 - once you go through all of these steps
37:26 - as you'll see at the end of this lesson
37:28 - it is dead simple to update your app and
37:30 - have that change automatically deploy to
37:32 - netlify so the idea behind continuous
37:35 - deployment is that as you make changes
37:37 - to your code you will push those changes
37:39 - to GitHub which is an online place to
37:41 - hold your code and when you push
37:43 - something to GitHub it will
37:44 - automatically deploy to netlify and
37:46 - netlify being a web host makes it so
37:49 - that people around the world can access
37:51 - your website from their browser in the
37:53 - end the idea is we will be able to have
37:55 - an actual URL that you could send to a
37:58 - friend family member or post in a tweet
38:00 - and that person could go see the actual
38:02 - site that you have built in deploy again
38:05 - this will happen in three easy steps
38:07 - first we're going to push our project up
38:09 - to GitHub then we're going to tell
38:11 - netlify which GitHub repository we want
38:13 - it to deploy and it will automatically
38:15 - watch for changes to that repository and
38:18 - the truth is it's only two steps then
38:20 - you're done now there's a few things we
38:22 - need to take care of before we begin and
38:24 - actually I'm going to walk us through
38:25 - creating a netlify account so in reality
38:28 - you just need to make sure that you have
38:30 - a GitHub account and that you install
38:32 - GitHub desktop there's a bunch of
38:34 - different ways to use git and GitHub of
38:36 - course I've found that for somebody
38:38 - first learning git and GitHub it's
38:40 - easiest just to use GitHub desktop if
38:43 - you are already familiar with using git
38:45 - then you don't have to do that at all
38:46 - you can use command line git or whatever
38:48 - method you feel like using so before
38:50 - moving on ensure that you have a GitHub
38:52 - account make sure that you have GitHub
38:54 - desktop installed or you are already
38:56 - familiar with how you're going to push
38:57 - your code up to GitHub so for creating a
39:00 - netify account you can click netlify
39:02 - account here and that will take you to
39:03 - the account page or you can even click
39:05 - this logo here and you'll go through the
39:07 - steps of setting up an account just like
39:09 - you would anywhere else it'll ask for
39:11 - your email and password you can hit sign
39:13 - up that should send you a verification
39:15 - email you'll go and you'll click that
39:17 - link clicking that link will take you to
39:20 - a sort of getting started page for me I
39:22 - chose that this would be primarily used
39:25 - as a personal account and I identified
39:27 - myself as a hobby developer I don't
39:30 - think it matters much what you say your
39:31 - first project will be I just put a
39:33 - personal portfolio site and for naming
39:36 - your team because this is a completely
39:38 - personal account I just put my own first
39:39 - name as my team name then I hit setup
39:42 - and continue we get to this page for now
39:45 - I'm going to skip this step because
39:46 - we're going to come back to this later
39:48 - that said if you're already familiar
39:50 - with Git and GitHub and you've already
39:52 - pushed your code to GitHub then you can
39:54 - skip the next number of slides and at
39:56 - this point just say that you're going to
39:58 - import an existing project for the sake
40:00 - of completeness I'm going to go through
40:01 - those steps and just skip this part for
40:03 - now so that brings us over to GitHub
40:06 - desktop I'm going to open GitHub desktop
40:08 - and in the upper left I see a drop down
40:11 - for adding a new repository and I'm
40:13 - going to create a new repository
40:15 - clicking create new repository will
40:17 - bring up a modal I can give it a
40:19 - repository name everything else I'm just
40:22 - going to leave the same and for now I'm
40:24 - going to put it on my desktop but I
40:26 - would recommend organizing it somewhere
40:28 - that you actually want to keep it then
40:29 - click create repository that will bring
40:31 - you to the main page for your repository
40:34 - that you just created and next we need
40:36 - to actually put some files inside of
40:39 - this folder now depending on how you're
40:41 - following along this next step will look
40:43 - a little bit different for you I'm going
40:45 - to show you how you could do it directly
40:47 - from scrimba in the current scrimba
40:49 - interface there's a little gear icon in
40:51 - the lower right that you can click and
40:53 - choose download as zip and in fact you
40:55 - can do that right from the scrim here it
40:58 - basically has everything that we just
41:00 - saw where we left off in the last lesson
41:02 - do be aware that in the future as the
41:04 - scrimp interface changes the location
41:06 - for this option to download the project
41:08 - as a zip may change so just search
41:11 - around until you can find the option to
41:13 - download this project as a zip now that
41:15 - will create a zip file you'll have to
41:17 - unzip it which will have a folder with
41:19 - your project files in it and because
41:21 - we've already created a new folder that
41:23 - is a git repository I've found that the
41:26 - simplest thing is just to take all of
41:28 - the files from the project that we just
41:29 - downloaded from scrimba and drag them
41:31 - over to the new folder that we just
41:34 - created with GitHub desktop then you can
41:36 - take that van life folder and open it in
41:39 - vs code now this next step is going to
41:42 - be pretty important we haven't yet run
41:44 - an npm install on this project as you
41:47 - can see we don't have a folder called
41:49 - node modules but it's pretty imperative
41:51 - that we don't commit our node modules
41:53 - along with a few other things that are
41:55 - really good to never commit to your
41:57 - GitHub repository so I would highly
41:59 - recommend at this point immediately
42:01 - before doing anything else to create a
42:03 - DOT get ignore file in this file each
42:06 - line will contain a folder or a file or
42:09 - some kind of naming structure that you
42:11 - are telling Git You don't want to ever
42:13 - include in any commits that you make if
42:15 - that doesn't make a lot of sense that's
42:17 - okay just know that it's important to
42:19 - have a DOT git ignore file and to
42:21 - include at least a few basic items now
42:24 - if you were just following along and you
42:26 - downloaded this project I did create a
42:28 - DOT get ignore file already mostly so
42:30 - that anybody who isn't downloading this
42:33 - can actually come in here and copy the
42:35 - items that I have listed here and paste
42:38 - them into your dot get ignore file that
42:40 - you just created I also made this a
42:42 - little bit larger so it's a bit easier
42:44 - to see now that we've made a change to
42:46 - our project we can go over to GitHub
42:48 - desktop and we will see that it is
42:50 - already tracking the changes that we've
42:52 - made including dragging all those new
42:54 - files over and creating a new git ignore
42:56 - file manually so let's go ahead and
42:58 - commit these changes we can do that by
43:00 - adding a summary down here in the lower
43:02 - left I'm just saying adding files and
43:05 - git ignore and then I can say I want to
43:07 - commit these changes to the main branch
43:09 - so I can click that button and after a
43:11 - few seconds that will be done if you're
43:13 - relatively new to git and GitHub it
43:16 - might be important to note at this point
43:17 - that you have only committed to your
43:19 - local git repository but you have not
43:22 - yet pushed anything up to your online
43:24 - GitHub account so that's what this
43:26 - published repository button is for we'll
43:28 - go ahead and click this at this time
43:30 - we'll get a modal here it should already
43:32 - have a name filled out you don't
43:34 - necessarily need to change anything else
43:36 - unless you feel like adding a
43:38 - description or making this a private
43:40 - repository and you can click publish
43:42 - repository and once that is done it will
43:44 - send us back here to the GitHub desktop
43:47 - dashboard at this point you can click
43:49 - the button to view on GitHub which will
43:51 - show you that your code is now live
43:52 - online the stock readme that we get from
43:55 - scrimpa is a little bit ugly but that's
43:57 - okay for now okay now that our project
43:59 - is live up on GitHub we are primed to go
44:01 - back to netlify and sync up our
44:04 - repository with our netlify account so
44:06 - back on netlify we are greeted with this
44:09 - dashboard page and we can click this
44:11 - button down here that says we want to
44:13 - import an existing project from git when
44:15 - you click that button it will ask you to
44:17 - connect your git provider in our case
44:20 - we're using GitHub so I'll click the
44:22 - GitHub link which will send me to an
44:24 - oauth page where I can authorize netlify
44:26 - to access information on my GitHub page
44:29 - and when I do that I'll have the ability
44:31 - to search through my entire list of
44:33 - repositories I've here searched for Van
44:35 - Dash life that pulled up my new van life
44:38 - repository so I'll select that
44:40 - repository doing that netlify will try
44:43 - to figure out the best way that it can
44:45 - deploy this project and it usually does
44:47 - a pretty good job so for me I was able
44:50 - to keep all of the stock options here
44:52 - exactly the way that they were the most
44:54 - important thing is that we run npm run
44:56 - build as the build command and that the
44:59 - publish directory is dist unless you
45:01 - have gone out of your way to change the
45:03 - Veet config settings for the
45:04 - package.json so that this is different
45:06 - so this is what popped up for me I'm
45:09 - just going to keep it that way and hit
45:10 - deploy site doing that sends me back to
45:13 - a dashboard page for this specific site
45:15 - and we can see that it says it's
45:17 - building a new production build after a
45:19 - pretty short wait we'll see that board
45:21 - building change to published and at this
45:24 - point it's just chosen a random URL
45:26 - which is going to be good enough for us
45:28 - for now that we can click on and see our
45:30 - site live on the web super cool now oops
45:34 - it does look like we have a little bit
45:35 - of an issue here on scrimba of course we
45:38 - pretty much develop everything as a
45:40 - mobile style but even when I turn on the
45:42 - mobile view in my developer tools we can
45:44 - see that the styles are not really
45:46 - looking like a mobile styled site to be
45:48 - honest this is something I almost always
45:50 - forget to include when I'm spinning up a
45:52 - new project completely from scratch and
45:54 - that is to include this line of code
45:56 - which is a viewport meta tag so the
45:59 - reason I'm showing you this process is
46:01 - not because I actually forgot to do this
46:03 - but because because I want to show you
46:05 - how once you have deployed your site
46:06 - live you can make changes and update the
46:09 - live version really really easily this
46:11 - is where the benefits of having
46:13 - continuous deployment setup really shine
46:15 - now if you are actually following along
46:17 - and you want to add this line of code
46:18 - you can actually click this screenshot
46:20 - it will take you to a page on mdn which
46:23 - has a quick way to copy this line of
46:24 - code and you can paste it into your
46:26 - index.html page right below the start of
46:29 - the head tag like I did here now once I
46:31 - paste this in we can go back to GitHub
46:33 - desktop and see that it is tracking some
46:35 - changes here I think my formatter might
46:38 - have changed the way that things were
46:39 - lining up which is why it's showing a
46:41 - little bit more green than what we
46:43 - actually added and just like before I
46:45 - can add a little summary up here if I
46:47 - want I can also add a description and
46:49 - hit commit to main again this is only
46:51 - committing to my local repository and
46:54 - doesn't automatically make changes to my
46:56 - GitHub repository in order to do that I
46:59 - do need to remember to push these
47:00 - changes this commit up to my origin
47:02 - which is the Repository that lives on
47:05 - GitHub and from GitHub desktop I can do
47:07 - that by just clicking push origin then
47:10 - without doing anything else I can go
47:12 - over to netlify and see that it has
47:14 - noticed a new commit to my main branch
47:16 - on my GitHub repository and so it starts
47:19 - rebuilding my site and after a few
47:22 - seconds again it will have a new
47:24 - published site that includes my changes
47:26 - awesome so again the process for
47:28 - updating the deployed site in just three
47:30 - easy steps one we change our code to we
47:34 - commit and push those changes to GitHub
47:36 - again it's just two steps that's how
47:38 - simple it is now that you have a live
47:40 - site that you could share with family
47:42 - and friends I'd recommend jumping in
47:44 - both feet with the build in public
47:46 - mentality if you have a Twitter account
47:48 - you can click this screenshot which will
47:50 - pre-populate a tweet that you could send
47:52 - out to the world and really show off the
47:54 - work that you're doing on your projects
47:55 - of course make sure to add your actual
47:58 - Netflix link here at the bottom one last
48:00 - important thing to mention is that even
48:02 - though you've downloaded your code code
48:04 - to your local machine and push it up to
48:05 - GitHub it will still be pretty important
48:07 - for you to follow here on scrimba
48:09 - scrimba isn't intended to be the
48:11 - ultimate place that your code lives
48:13 - you're not going to open scrimba in
48:14 - order to write production level code for
48:16 - example but for the sake of learning
48:18 - scrimbab makes a lot of other things
48:20 - easier it lowers the barrier to get your
48:22 - hands on the keyboard and follow along
48:23 - so in the future when we talk about
48:25 - deployment again we'll cover the steps
48:27 - on how to update the code that you just
48:29 - downloaded to your local machine so that
48:31 - you can deploy the most updated stuff
48:33 - but for the best learning experience
48:35 - just remember to keep following the
48:37 - course here on scrimba okay that's
48:39 - everything we have to touch on right now
48:40 - for continuous deployment using
48:42 - netlifice so let's keep pushing forward
48:44 - and building our van Life app
48:49 - in these upcoming sections we are going
48:51 - to be working on a Vans list page and a
48:54 - van detail page and as you can see
48:56 - there's some data here that needs to be
48:58 - coming from somewhere in the past what
48:59 - I've done is created just a simple
49:01 - data.js file and kind of pushed all the
49:04 - data in there but that meant that we
49:06 - were just importing that file instead of
49:08 - actually doing a fetch request to a
49:10 - server and a database like you would in
49:12 - the real world however I also didn't
49:14 - want to create a real server and
49:16 - database just because of the maintenance
49:18 - problems that can happen Over time
49:20 - however I found a solution that I think
49:22 - will be a really good compromise and
49:23 - we're going to try it out in this
49:25 - project there's an npm package called
49:27 - mirage.js you can click on the
49:29 - screenshot here to go to their website
49:31 - if you want to learn more about it and
49:32 - it's a way to create a mock server that
49:35 - will intercept any API requests you make
49:38 - and it will return the data from your
49:40 - mock server instead of having to worry
49:42 - about reaching out to the real world
49:44 - this isn't something you have to worry
49:46 - about but if you want to look in this
49:48 - server.js file that I I created you can
49:50 - see there's the data for our vans and
49:52 - down here at the bottom there's a simple
49:55 - routes section which you can think of
49:57 - like the server code that will run
49:59 - whenever you make a request to slash
50:02 - fans or to slash Vans slash the ID
50:05 - number of the van again this doesn't
50:07 - have to make sense in fact you can think
50:09 - of it more like you are the front-end
50:10 - developer on this project and a back-end
50:13 - developer one of your co-workers has
50:14 - already created the server and some
50:16 - endpoints for you to get data from
50:18 - what's nice about this is I don't have
50:19 - to pollute my code too much the only
50:21 - thing I need to do is say import server
50:24 - so import dot slash server and
50:26 - everything else will work out just fine
50:28 - we'll get to see this in action in a
50:30 - little bit but I just wanted to show you
50:31 - what I'm doing there with server.js so
50:33 - that didn't become confusing okay that
50:35 - sets us up perfectly to Now work on our
50:38 - vans page so that's what we'll do next
50:43 - okay the next thing we're going to do is
50:44 - create the Vans list page and this won't
50:47 - really require you to do anything that
50:49 - you haven't learned yet so I'm going to
50:51 - make this into a two-part challenge the
50:53 - first part is going to help you practice
50:55 - creating a new route modifying the
50:58 - header creating a new page and the
51:00 - second part is going to require you to
51:03 - use a fetch request to get some data and
51:05 - use a map method to map over the data
51:07 - all of this is kind of the introductory
51:10 - level react stuff that you should
51:11 - already know by now but let's not get
51:14 - too far ahead of ourselves let's start
51:15 - with part one again your challenge is to
51:17 - create the Vans list page that's going
51:19 - to be over in the Pages directory the
51:21 - route which is what will happen down
51:23 - here and a link in the header so that
51:26 - you can actually navigate to it now even
51:28 - though this is something that you have
51:30 - done recently I really want you to
51:32 - practice this before just skipping ahead
51:34 - and watching me do it however if you get
51:36 - stuck of course we will be going over
51:37 - this together so pause now and work on
51:39 - this challenge
51:46 - let's start by creating the page so I'll
51:49 - create a new file called vans.jsx and
51:53 - we'll just do some of the regular setup
51:55 - stuff
51:57 - nothing fancy quite yet we're going to
52:00 - get to that in the next challenge then
52:02 - over here we need to import the Vans
52:05 - page
52:06 - we'll create a new route so I'll just
52:09 - duplicate this line and change this to
52:12 - Vans and this will render the Vans
52:14 - element
52:15 - and then we will link to vans so this
52:18 - will lead to slash fans bands and I
52:22 - think that should be it let's hit save
52:25 - okay we have our vans here and if we
52:28 - click it man's page goes here awesome
52:30 - now comes the fun part in the next
52:33 - challenge we are going to actually pull
52:35 - in our data so that we can display the
52:37 - actual Vans and the van information
52:40 - however before plowing ahead if you did
52:43 - struggle with this challenge then just
52:44 - revert back to the beginning of this
52:46 - video and try it again if you're
52:48 - confused about these parts then it will
52:50 - be more important that you kind of drill
52:52 - them in before you just pow ahead okay
52:54 - getting off my soapbox let's work on
52:56 - part two of The Challenge
53:01 - okay this is the fun part of the
53:03 - challenge this Vans page goes here is
53:05 - nice and all but we want to get the
53:07 - actual van showing up on the page as per
53:09 - usual you can click the design
53:11 - screenshots here to send you to the
53:13 - figma design in case you feel like
53:15 - spending the time to actually put the
53:17 - CSS together yourself but like I did
53:19 - before I'm not going to necessarily make
53:21 - you do that I'm just going to do a magic
53:22 - snap of my fingers and we'll have the
53:24 - design already implemented for us so
53:27 - your challenge is written out here
53:28 - you're going to use the fetch API from
53:31 - the web and you're going to fetch API
53:33 - slash Vans let me put some quotes here
53:35 - just to make sure that that's clear that
53:36 - that's a string you're going to use the
53:38 - fetch API and you're going to fetch to
53:40 - slash API slash fans this might look a
53:43 - little strange if you're used to only
53:45 - doing your fetch requests to another
53:47 - server or another URL somewhere because
53:49 - usually you have something like https
53:51 - colon slash example.com API slash fans
53:56 - but when you're fetching something on
53:58 - the same domain as what your site is
54:00 - running on then usually you only have to
54:02 - provide the relative path now remember
54:04 - we have our kind of fake server running
54:06 - here with mirage.js and you can see it
54:09 - says this dot namespace is API that
54:12 - means that all the requests are going to
54:14 - start with Slash API and then this
54:16 - function here is going to handle a get
54:19 - request to the slash API slash Vans
54:22 - endpoint and all it does is return all
54:24 - the Vans again you don't need to
54:26 - understand this this is not an important
54:28 - part for this course but sometimes it's
54:30 - nice to poke around and see an inside
54:31 - look and hopefully that helps make sense
54:33 - of why this URL or what it doesn't
54:36 - really look like URL but why this URL
54:38 - looks a little unique so you'll kick off
54:40 - that request you'll need to parse that
54:41 - Json and turn it into Data you need to
54:44 - think about what react hook you would
54:46 - want to use to fetch the data as soon as
54:48 - the page loads and how you would make it
54:50 - so that it only fetches it the one time
54:52 - and actually you know what number three
54:54 - is no longer an issue so I'm just going
54:56 - to get rid of that now parts of this
54:57 - challenge are going to require you to
54:59 - have prior knowledge in things like how
55:01 - to use the fetch API and where in react
55:04 - you can kick off a request when the
55:06 - component mounts if you're feeling a
55:08 - little rusty on that that's completely
55:10 - okay I've tried to include a couple
55:11 - helpful resources here this is a link to
55:14 - the fetching data in react scrim that I
55:16 - taught in my introductory course and the
55:19 - second one is how to take an array and
55:21 - to map over it using the dot map method
55:23 - and then how to actually display each of
55:25 - those as elements on the page so feel
55:27 - free to check out those resources brush
55:29 - up on some of those topics before trying
55:31 - to start this challenge here okay I
55:34 - think I've given you everything you need
55:35 - again if you don't necessarily feel like
55:37 - doing the CSS to make it all beautiful
55:39 - I'm actually okay with that this time
55:41 - just try to get each of the pieces of
55:43 - data displayed and if CSS is something
55:45 - that you feel Rusty on or you want a
55:47 - little more practice with then I would
55:49 - encourage you to do it okay enough of me
55:51 - talking pause now and work on this
55:52 - challenge
55:58 - I think I'm actually going to do these
56:00 - in backwards order I'm going to start
56:01 - with number two and the answer to this
56:03 - question is to use the use effect hook
56:05 - in react now the truth is and this is
56:08 - something we're going to explore later
56:09 - on down the road or possibly in a
56:11 - different course there's a bit of a
56:13 - movement away from trying to do your
56:15 - fetch requests for the data of a
56:17 - component in a use effect hook but for
56:19 - now let's go ahead and use a react.use
56:22 - effect this takes two parameters the
56:25 - first one is a function and the second
56:28 - parameter is an array of dependencies in
56:31 - this case we have no dependencies but
56:33 - it's important that I put this array
56:34 - here otherwise our effect will run every
56:37 - single time any State updates on our
56:39 - page at all inside the body of our
56:42 - function we will kick off our fetch
56:44 - request so I'm going to say fetch slash
56:46 - API Vans and again what our server is
56:49 - going to do this fake server it's going
56:51 - to intercept this fetch request instead
56:54 - of trying to actually make a fetch
56:56 - request out to some endpoint probably
56:58 - here on scrima.com it's going to
57:00 - intercept it and give back fake data
57:02 - this fetch function it returns a promise
57:05 - and so I'm going to unpack that promise
57:08 - which will come with a response and
57:11 - we'll turn that into a JavaScript object
57:14 - or just regular JavaScript by taking the
57:17 - Json part out of it that returns a
57:19 - promise so we will resolve that promise
57:20 - as well and that is where we will
57:22 - finally have access to our data I
57:24 - usually just like to console log our
57:26 - data for one just to make sure things
57:28 - are working we haven't made any mistakes
57:30 - along the way but also to see the
57:32 - structure of the data so we know what
57:33 - it's going to look like how we're going
57:35 - to access all the pieces of it so let's
57:37 - hit save and okay well we got something
57:40 - console logging looks like it's an
57:41 - object with a Vans property now in this
57:44 - case because we're choosing to kick off
57:46 - our request inside of a use effect and
57:49 - we're only kicking that request off one
57:51 - time when the component first mounts we
57:53 - need a place to save the data that we're
57:55 - pulling in just so that if anything were
57:57 - to change and this component got
57:59 - re-rendered the data wouldn't just
58:01 - disappear and you might remember that
58:03 - state is a place where data can survive
58:06 - the re-render cycle of a component so
58:08 - we're going to create some State let's
58:09 - call it maybe Vans and set Vans is
58:13 - react.use State I'll start this as an
58:17 - empty array and then instead of console
58:19 - logging our data we will use set Vans
58:22 - and we don't really care what it used to
58:24 - be so I don't need the Callback function
58:26 - I'm just going to set it to data and
58:28 - then remember there's a property called
58:30 - dot Vans that's the one that actually
58:32 - has the array that we want so if I
58:34 - console log Vans we'll hit save and
58:38 - first we get an empty array that happens
58:40 - when the state is set as an empty rate
58:43 - in the beginning and then it turns into
58:44 - our array of Van information from our
58:47 - fake server awesome actually you know
58:49 - what while we have this still console
58:51 - logging I'm going to grab one of the
58:53 - objects of our vans just so we know what
58:56 - properties it has let me get rid of our
58:59 - challenge text instead I'm going to put
59:02 - in the properties of our van okay so our
59:05 - van has an ID a name a price a
59:08 - description an image URL and a type so
59:12 - I'm going to turn our array of raw data
59:14 - into an array of elements that we can
59:17 - display on the Page by using the map
59:19 - methods so maybe I'll call this van
59:21 - elements is equal to vans.map and for
59:25 - each van we are going to render and you
59:29 - know what this is where normally we
59:31 - would just start creating one van
59:33 - element that we want to show on the page
59:35 - so one of these little sections here for
59:38 - the sake of time I'm going to paste in
59:40 - what I've already created since it won't
59:42 - provide a whole lot to this lesson or
59:45 - challenge to have you watch me go
59:46 - through each little piece like that okay
59:48 - so what you can see is just a div that
59:51 - has the elements that we see in the tile
59:53 - of one of these Vans and since we're
59:55 - doing a map it will end up being a tile
59:57 - for each one of the the vans in our
59:59 - database and there's a couple class
60:00 - names that are not here yet let's
60:02 - actually put van elements onto our page
60:05 - first and then we will fix the CSS so
60:08 - instead of our H1 that says Vans page
60:10 - goes here we'll have in fact let's use a
60:13 - fragment just because we don't need to
60:15 - necessarily add a bunch of more elements
60:17 - and we will just put our van elements
60:21 - here and let's see where we end up okay
60:23 - well that's a huge picture but we've got
60:26 - our picture and it's got the name of the
60:29 - van the price and this is the style or
60:32 - rather the type I think is what it was
60:34 - called yeah type is simple and okay we
60:36 - have our vans awesome let me go ahead
60:38 - and just use the magic of editing to
60:41 - make this look a little nicer
60:44 - and just like that our CSS is applied I
60:47 - had forgotten that we wanted a list
60:48 - container and then we have our list
60:50 - itself just for styling purposes so I
60:53 - got rid of our fragment and actually put
60:54 - in a div so that it could have a class
60:56 - name and actually we're missing
60:58 - something from the well we're missing a
60:59 - few things from the design but one
61:00 - that's really easy right now is this
61:02 - looks like maybe an H1 that says explore
61:04 - our van options so I'm gonna stuff that
61:07 - just right inside of our tile here we'll
61:10 - have our H1 that says explore our van
61:12 - options to hit save okay cool a little
61:15 - step closer we still have some other
61:17 - work to do like these buttons the footer
61:19 - and so forth but we'll get to that okay
61:22 - man that was a lot of work but hopefully
61:24 - this is mostly just review from previous
61:26 - lessons that you have learned about
61:27 - react but this does lead us to what
61:30 - we're going to learn next and that has
61:31 - to do with nested routes because what I
61:34 - want to have happen is I want each one
61:36 - of these tiles to be clickable basically
61:38 - anywhere on this tile and I want
61:40 - clicking each one of these tiles to take
61:43 - me to a nested route so it will be slash
61:45 - Vans slash and in our case we're going
61:48 - to keep it simple and just use the ID of
61:50 - the van so slash one will send us to a
61:53 - detail page of this modest Explorer man
61:55 - because that's the one with the idea of
61:57 - one slash two would take us to a detail
61:59 - page of the beach bum van and so forth
62:02 - there's a couple fun considerations to
62:04 - keep in mind when we're going to do that
62:06 - so that is what we're going to tackle
62:07 - next
62:11 - everything we've learned so far about
62:12 - react router you could say is like the
62:15 - meat of react router what with the
62:17 - browser router the routes these
62:19 - individual routes that we have and the
62:21 - link that allows you to navigate between
62:23 - one and the other everything else that
62:25 - we'll learn is sort of the I guess you
62:27 - could call it the vegetables of this
62:28 - plate they're really going to round out
62:30 - our experience and they're going to
62:32 - allow us to do some pretty cool things
62:33 - with react router we'll spend the next
62:36 - couple lessons learning about nested
62:37 - routes but to do that we're going to
62:39 - first see maybe the harder way to do
62:41 - this so in order for us to understand
62:43 - nested routes we're first going to learn
62:45 - about parameters or route params now we
62:49 - know that we have our van list page here
62:51 - and the list page is showing us all of
62:53 - our vans we want to be able to click on
62:55 - one of them and be navigated to a detail
62:58 - page for the specific van that we
63:00 - clicked on you can see in the design
63:02 - here we have the list page clicking on
63:04 - one of them sends us to the detail page
63:05 - and in our case we decided we want this
63:08 - detail page to have a route of Slash
63:10 - Vans slash Flash and then the ID number
63:12 - of the van but we don't want to go
63:14 - through and create a new route for every
63:16 - one of the vans in our data and have
63:19 - something like slash Vans slash and then
63:22 - slash one slash two slash three slash
63:25 - four we wouldn't want to manually create
63:27 - that because well it's just not
63:28 - maintainable if we were to add more Vans
63:31 - to our list then we wouldn't also want
63:33 - to have to come in here and create new
63:34 - routes create separate elements and so
63:37 - forth so this is where route params come
63:39 - in when we're defining our routes let me
63:41 - get rid of all these extra ones when
63:43 - we're defining our routes I'm going to
63:45 - copy this one just as a starting point
63:47 - and then instead of saying slash Vans
63:49 - slash and then a specific dedicated ID
63:52 - number or some other kind of text we're
63:55 - going to use a colon and then we're
63:58 - going to give it sort of a variable name
64:00 - in this case let's call it ID we get to
64:02 - choose whatever we want but let's call
64:03 - it ID because we will put the ID of the
64:06 - van in this spot because the colon sort
64:09 - of turns this into a variable it means
64:11 - that we can reuse this one route
64:13 - definition for every detail page that we
64:17 - want to create no matter what the ID is
64:19 - going to be now we need to change Vans
64:21 - because this right now is just leading
64:23 - us to the same Vans list page so instead
64:25 - we're going to create a van detail page
64:27 - so I'll Whip that together really fast
64:29 - we'll go to Pages create a new file call
64:32 - it van
64:33 - detail.jsx and I'll just set this up
64:36 - really quick
64:38 - okay like we did before just an H1 that
64:40 - says the van detail page goes here we
64:43 - will go back to our index page import it
64:47 - and instead of rendering the Vans here
64:50 - we will render band detail and we don't
64:52 - have a link yet to send us there so let
64:55 - me hit refresh and I'll just start by
64:57 - typing in in the URL slash one and hit
65:00 - enter and cool that sent us to the van
65:02 - detail page now we'll notice that this
65:05 - doesn't say anything about one it just
65:06 - says colon ID so I could change this to
65:09 - slash 42 even though we don't really
65:12 - have a van with an idea 42 I could
65:15 - change this to whatever I want and hit
65:19 - enter and it really doesn't care the
65:21 - colon is just saying there's going to be
65:23 - something here I don't know what it is
65:25 - but it's going to be something so
65:27 - there's two more things that we need to
65:28 - hook together in order for this to work
65:30 - the first is from my Vans page I want to
65:33 - have each of these Vans send the user
65:36 - when it gets clicked to slash Vans slash
65:39 - and then the ID of that specific van and
65:42 - then in the van detail page we want some
65:45 - way that we can access the ID that is in
65:48 - the URL after slash vans in that way
65:51 - from the van detail page we can grab
65:53 - whatever the ID is from the URL make a
65:56 - get request to our server to grab the
65:58 - detailed information for that one
66:00 - specific van and then go through the
66:02 - process of displaying the detailed
66:03 - information for that one specific van
66:05 - like you see here really I think the
66:07 - only information missing from the list
66:09 - page is this description down here but
66:11 - still for now what we'll do is whole
66:13 - extra get request to get the detailed
66:15 - information for this van so for the sake
66:18 - of breaking this up a little bit let's
66:19 - tackle those two different parts in
66:21 - separate scrims so that's what we'll
66:22 - start with next
66:27 - the first part of this involves a
66:29 - challenge that you should already be
66:31 - able to complete without learning
66:32 - anything new each one of our vans is
66:34 - listed in what we're calling a van tile
66:37 - here on this div and we want to make it
66:39 - so that if the user clicks anywhere at
66:41 - all within the contents of this div that
66:44 - they'll be sent to the Vans slash and
66:47 - then the ID of the van so your challenge
66:49 - is to wrap all of the contents of this
66:52 - div in a link from react router Dom and
66:55 - have it send the user to that page
66:56 - you'll know that you've completed it
66:58 - when it sends them to that then detail
67:00 - page goes here page so pause now and
67:03 - work on this challenge
67:10 - okay first we need to import link from
67:14 - react router Dom
67:17 - and then we will just wrap everything in
67:20 - a link
67:22 - we'll indent that and then the last
67:24 - thing is we need to send them to and I'm
67:27 - going to use string interpolation here
67:29 - so I can say slash bands slash and then
67:32 - because we're inside of the loop where
67:34 - we're mapping over the Vans we have
67:36 - access to each individual van and we'll
67:38 - say van dot ID okay let's hit save let's
67:41 - click on reliable red and of course it
67:43 - really doesn't matter but we can see in
67:45 - the URL in the mini browser that it sent
67:47 - us to slash Vans slash three because
67:49 - reliable red had an ID of three we can
67:52 - go back to Beach Bum which should be two
67:54 - and there it is now of course this van
67:57 - detail page is not very descriptive it's
67:59 - not really doing anything important next
68:00 - we need to make it so that the detail
68:02 - page can grab information about that
68:04 - specific van that they clicked on so we
68:06 - can display everything we need to
68:07 - display here to do that we need to learn
68:09 - about something called use params so
68:12 - that's what we'll learn next
68:16 - let's take a second to look back at what
68:18 - we've done just as a reminder before we
68:20 - move on in our app component where we
68:22 - have our route definitions we created a
68:25 - route that has a parameter as part of
68:28 - its path that's identified by the colon
68:30 - in front of this part of the path by
68:33 - putting a colon here it tells react
68:35 - router that this isn't going to be the
68:37 - literal text colon ID but instead
68:39 - there's going to be something here in
68:41 - its place I like to think of it as a
68:43 - variable inside of our path so whenever
68:45 - slash Vans slash anything is in the URL
68:48 - then it will load the van detail element
68:51 - here then we set it up so that in our
68:53 - vans page we link to the slash Vans
68:57 - slash and then whatever the ID of that
69:00 - specific van that we clicked on in the
69:02 - Vans Page by doing that it takes us over
69:04 - to slash Vans slash two in this case
69:06 - because we clicked the van with the ID
69:08 - of two and our next task is to make it
69:10 - so that in the van detail page it's able
69:12 - to grab the two out of the URL and then
69:15 - go and get the specific information
69:18 - about this one van that we're supposed
69:20 - to be looking at there's a bunch of
69:21 - different ways that we could do this and
69:23 - we're going to see some optimization
69:25 - that we can do for example right now if
69:27 - we go to the Vans page you'll see it
69:28 - delays for a second because it's doing
69:30 - another fetch request going to get all
69:32 - of the van information so really we
69:34 - should be caching that somewhere so that
69:36 - we can get that information much quicker
69:38 - and then there's probably a better way
69:40 - that we can handle getting the detail
69:41 - information rather than always doing
69:43 - another get request since we have all
69:45 - the information when we get all the vans
69:47 - in the first place the point is there's
69:49 - a lot of different ways to organize
69:50 - things to make it have better
69:52 - performance but for the sake of focusing
69:54 - on our learning with react router we're
69:56 - going to keep it simple react router
69:58 - provides us a tool called use params
70:00 - which allows us to grab any of the
70:03 - parameters that we have in our URL and
70:05 - that's a tool we will need to import so
70:07 - I'm going to import use params from
70:09 - react router Dom and inside the body of
70:12 - my component I'm going to grab the
70:15 - params so we'll call it const params
70:18 - equals and then we'll call use params
70:21 - and let's go ahead and just console log
70:23 - the params
70:26 - this function will run whenever the van
70:28 - detail component is mounted so I'll open
70:30 - up the console we'll hit save and cool
70:33 - we see that we get an object that has an
70:35 - ID property I want you to pause and
70:37 - think for a second where did ID come
70:39 - from
70:43 - remember over in our index.js after the
70:46 - colon we put this colon ID react router
70:50 - will look at any sections of the path
70:52 - that have a colon before it and it will
70:54 - add that as the key in the key value
70:56 - pair in the object that we get from use
70:58 - params so if I were to change ID to blah
71:02 - blah and hit save we'll see that now our
71:05 - object has a key of blah blah that's too
71:07 - silly let's go back to ID also it's
71:09 - important to note that the reason that
71:11 - react router chose an object instead of
71:13 - just giving you the value of what's
71:15 - there because you can have multiple
71:17 - params there's nothing stopping me from
71:19 - using slash Vans slash ID slash rent
71:23 - maybe like a rent page that's nested
71:26 - inside of the detail page now if I do
71:28 - this my URL currently isn't going to
71:30 - match anymore so I need to update it
71:32 - we'll say slash van one slash rent one
71:36 - really quick side note is there's
71:37 - nothing stopping us from having multiple
71:39 - params inside of our URL so I could
71:42 - after slash colon ID I could add another
71:44 - slash and say colon I don't know maybe
71:47 - type and when I hit save of course this
71:50 - path that we currently see isn't going
71:51 - to match anything on here so it's going
71:53 - to disappear but let's say we add to our
71:56 - URL slash rugged and hit enter and now
72:00 - we can see the van detail Pages back up
72:02 - because this path is now matching again
72:04 - and also the params that we're pulling
72:06 - in the van detail page and we're console
72:08 - logging over here is now including both
72:11 - vid and the type parameter for our needs
72:14 - we won't be needing multiple parameters
72:16 - but I just wanted to make that clear so
72:18 - let's go back we'll go to well let's hit
72:21 - save we'll go to Vans go back to our
72:23 - vans we'll do number two this time and
72:26 - cool our parameters are coming through
72:27 - as we saw before and now I think it's a
72:30 - good time to get your hands on the
72:32 - keyboard instead of building a whole
72:34 - separate app to have you get practice
72:36 - with this I'm actually just going to
72:37 - delete what we've done and have you do
72:39 - it from scratch so I will write up part
72:42 - one of this two-part challenge that
72:43 - we're going to video
72:45 - okay this will test if you were paying
72:47 - attention of course you can rewind to
72:49 - see exactly what it looks like but I
72:51 - want you to be the one who's writing
72:52 - this out so I want you to reroute what
72:54 - we did and I want you to console log the
72:56 - params object like we still see in the
72:59 - console from before in fact I'll hit
73:00 - save and that'll disappear and now it's
73:02 - your turn pause and work on this
73:04 - challenge
73:10 - so we need to First import the use
73:13 - params Hook from
73:16 - react router Dom and then we will grab
73:19 - the params object by calling use params
73:22 - and then simply console log params and
73:25 - that needs to be lowercase hit save and
73:28 - there we are back to where we were okay
73:30 - so now we're ready for part two and this
73:32 - lesson is getting a little bit long so
73:34 - we are going to do part two in the next
73:36 - scrim
73:39 - okay so in part two of The Challenge I
73:42 - want you to make a fetch request to get
73:44 - the data for the van that we're looking
73:46 - at on the van detail page based on the
73:49 - params.id that comes in we're using the
73:52 - mirage.js server fake server again to
73:55 - get the data and the endpoint you will
73:57 - make a fetch request to is slash API
73:59 - slash Vans slash and then the ID that
74:02 - comes from params in this case I'm just
74:05 - making this as a comment van ID has no
74:07 - significant meaning or anything I'm just
74:09 - saying that the ID of the van needs to
74:11 - go at this point in the URL for now you
74:14 - can just console log the data we won't
74:16 - be worrying about designing up the page
74:18 - I'm just going to give you all of the
74:20 - markup that I use for that okay pause
74:21 - now and work on this challenge
74:29 - okay let's get ourselves some room by
74:31 - closing the console and like we've done
74:33 - before we're going to use react.use
74:36 - effect to make a request when this
74:39 - component first loads so let's go ahead
74:41 - and do that maybe down here below this
74:44 - text we'll do react dot use effect the
74:47 - first parameter is the function the
74:49 - effect function that we want to run the
74:51 - second parameter is the array of
74:53 - dependencies now before what we did was
74:55 - we used an empty array of dependencies
74:57 - and that's because well the fetch
75:00 - request didn't rely on any other
75:02 - external piece of data to stay in sync
75:04 - with what we currently want to fetch
75:06 - however this time around we do want to
75:08 - rerun our effect if somehow this
75:11 - component were still loaded but the
75:13 - params ID were to change in our case
75:16 - this probably isn't going to happen the
75:18 - only way I can really think of this
75:19 - happening is if we had some link on this
75:22 - van detail page that linked to another
75:25 - van detail page in which case what would
75:27 - happen is the ID would change but but
75:29 - the component would not unmount and
75:31 - remount it would just re-run the
75:34 - function with a new params.id I suppose
75:37 - down the road maybe some feature that
75:39 - says here's some vans that are similar
75:41 - to the one that you're looking at could
75:42 - be implemented in which case this would
75:44 - make a difference if we left this as an
75:46 - empty array it would not refetch when we
75:49 - moved to another van like van 3 instead
75:53 - of Van slash two it wouldn't run the
75:55 - effect therefore it wouldn't run the
75:56 - Fetch and therefore the page wouldn't
75:57 - change that's not a feature we're
75:59 - worried about now but since we know it
76:01 - could happen we might as well put it in
76:02 - here so I'm going to say I want you to
76:04 - rerun this effect if params.id were to
76:07 - ever change okay so then we'll do our
76:09 - fetch request and we're fetching out to
76:12 - slash Vans no slash API slash Vans slash
76:16 - and then the van ID which we're getting
76:18 - from params.id so I'm going to use some
76:20 - string interpolation here
76:22 - and we'll say params.id
76:25 - then we will get the response and parse
76:28 - the Json out of it click this res dot
76:31 - Json that returns a promise that we will
76:34 - also resolve that will have the data and
76:36 - let's just console log our data
76:39 - and at this point I'll get rid of this
76:41 - console log and let's get rid of all the
76:43 - challenge text here just to clean things
76:45 - up a little bit we'll hit save and check
76:48 - our console okay it took a second
76:49 - because it's doing a fetch request going
76:51 - out to the quote unquote database but it
76:54 - pulled in the van with the ID of two in
76:57 - this case we can see that there's this
76:58 - object that has a Vans property and
77:00 - that's the only thing in here and the
77:02 - only thing we care about and awesome it
77:05 - has everything that we need at this
77:06 - point all of the next steps to get this
77:08 - page up and running actually looking
77:10 - good with the data that we need is
77:13 - really something that you should be very
77:15 - familiar with by now so once again I'm
77:17 - going to snap my fingers
77:19 - really all the changes that I made are
77:22 - instead of console logging the data I
77:24 - set that data into some localized State
77:27 - you can see we used data.vans because we
77:30 - had that Vans property in the data that
77:31 - was coming in up here we're initializing
77:34 - that state the rest of it is mostly just
77:36 - some markup you can see there's a little
77:39 - bit of conditional rendering happening
77:40 - here because we're initializing our van
77:43 - State as null if I try to access things
77:46 - like the image URL on null then that's
77:49 - going to be a problem so what I did was
77:51 - conditionally render if there's a van
77:53 - then I rendered all the markup and if
77:55 - there isn't a van then we just have this
77:57 - H2 that says loading when I refresh the
77:59 - page you can see it briefly it'll say
78:01 - loading and then it'll show the data
78:03 - everything else is really just some
78:05 - styling there's nothing too special here
78:07 - clicking the button at the bottom
78:08 - doesn't actually do anything but what's
78:10 - awesome about this is because we're
78:12 - using a dynamic parameter in the path we
78:15 - can go back to Vans we can click the
78:17 - modest Explorer and it's going to load
78:19 - the the data from the van with the ID of
78:21 - one we can go back to Vans and choose
78:24 - something like reliable red and we have
78:26 - net data as a separate piece of data so
78:28 - once again as a quick recap over in
78:30 - index we created a route parameter that
78:33 - was Dynamic by using the colon and part
78:35 - of the path that we have for our route
78:37 - definition by using that colon we're
78:39 - setting it up so that react router will
78:41 - save whatever value gets put in the URL
78:44 - when this page loads into a variable
78:46 - called ID in the Vans page we are
78:49 - linking to slash Vans slash and then the
78:52 - ID of that van it's important that that
78:54 - matches up because when we come to the
78:56 - van detail page which we're coming there
78:58 - because the element is set to go to the
79:00 - van detail page when we get to the van
79:02 - detail page the very first thing we do
79:04 - is grab the parameters from the URL so
79:06 - that we can make a fetch request to then
79:09 - get the van with that specific ID again
79:12 - we could definitely increase the
79:13 - performance of this app for example over
79:15 - here instead of doing a fetch request
79:17 - every time this component loads or or
79:20 - the Vans component loads we could
79:21 - probably save that maybe in local
79:23 - storage or do some kind of caching so
79:25 - that it can not have to make a request
79:27 - across the internet first but can just
79:29 - check our local cache and then because
79:31 - this data that's coming in has all of
79:33 - the information for each van we could
79:36 - theoretically just grab the piece of
79:38 - data that we need based on the URL
79:39 - instead of making a whole extra fetch
79:42 - request like we're doing in our van
79:43 - detail page but at this point with us
79:45 - learning react router that's not really
79:47 - our intent here is to make this a very
79:49 - performant app and just like that we
79:51 - have a majority of our app built at
79:53 - least the skeleton is all there there's
79:55 - a few little details that we still need
79:57 - to fill in so that's what we'll start
79:58 - working on next as always though if
80:01 - there's anything that was confusing
80:02 - about this Challenge Series that we just
80:04 - completed I don't want you to push
80:05 - forward I want you to go back I want you
80:07 - to practice practice practice what we've
80:09 - done that's going to be what helps you
80:11 - internalize what we've learned If This
80:13 - Were School you might be cramming for a
80:15 - test just so you could pass the test and
80:16 - move on but this isn't school I want you
80:18 - to actually learn the stuff of course
80:20 - it's always okay to use whatever
80:22 - resources you have using Google is
80:24 - something that even the most senior
80:26 - developers do every single day but
80:28 - getting the muscle memory by practicing
80:29 - this is what's going to help you truly
80:31 - deeply understand what's going on at
80:34 - least well enough to start building your
80:36 - own projects so spend as much time as
80:38 - you need reach out to the scrimba
80:40 - community and ask any questions that you
80:42 - might have and then once you feel
80:43 - confident with the things that we've
80:45 - been learning let's move on and we'll
80:46 - start learning some of the nuances about
80:48 - react router
80:52 - let's run through a quick quiz on Route
80:54 - parameters just to make sure that you
80:56 - are understanding everything we've been
80:57 - talking about again I'll remind you that
80:59 - this isn't school I'm not going to be
81:01 - giving you a grade on this it will have
81:03 - no effect on how you do in this course
81:05 - really this quiz is a tool for you to
81:08 - assess your own understanding of what
81:10 - you've done as such I recommend you
81:11 - don't just skip ahead if you were to
81:14 - struggle with any of the questions here
81:15 - but rather to maybe open a separate tab
81:17 - review the lesson that's associated with
81:19 - each of these questions and then come
81:21 - back and see if you can answer them for
81:22 - yourself skipping ahead and just
81:24 - watching me answer it will maybe help
81:27 - you understand it a little better but
81:29 - the understanding will be so much
81:30 - stronger if you're able to answer it by
81:31 - yourself okay that's enough of a guilt
81:34 - trip now with these quizzes on scrimba I
81:36 - do expect that you pause the screencast
81:37 - just like we do with any other Challenge
81:39 - and physically type your answer down I
81:41 - know when you hit play it's just going
81:43 - to erase your answers but that's not the
81:45 - point the point is to have that muscle
81:47 - memory that's included when you actually
81:49 - type on your keyboard it will really
81:51 - help you retain the amp answers that
81:52 - you're writing down okay pause now and
81:55 - work on answering the quiz questions
82:02 - okay number one what is a route or
82:05 - sometimes called a URL parameter in our
82:07 - route definitions we are able to tell it
82:10 - exactly what we want the URL to say when
82:12 - a certain component is loaded or more
82:15 - accurately when a certain element is
82:16 - loaded however it's pretty common for us
82:19 - to not know ahead of time as the
82:21 - creators or the developers of these
82:23 - route definitions what the actual URL
82:26 - will be this is most common when you
82:28 - have some kind of detail page that
82:30 - displays specific information for one
82:32 - specific item in a whole group of items
82:35 - that sounds super specific but if you
82:37 - think of basically any web app that
82:39 - you've been to there's probably
82:40 - something like this for example any blog
82:42 - will probably have something like a
82:44 - slash blog route but then after that you
82:47 - might want the detail for a specific
82:49 - blog entry in which case it would be
82:51 - slash blog slash and then probably some
82:54 - kind of slug of the title of the blog
82:56 - why I love react router for example the
83:01 - second portion would be a route param
83:03 - instead of copying and pasting our route
83:05 - pads a billion times every time we want
83:08 - to add a new blog entry instead we can
83:10 - create a parameter inside of our route
83:12 - path that makes it a sort of placeholder
83:14 - for any part of the path that might be
83:16 - put in there so let me try to summarize
83:18 - that in an answer here
83:20 - this sounds a bit wordy but I landed on
83:22 - a portion of our route path that is just
83:24 - a placeholder for what will eventually
83:26 - be the actual segment in the URL of the
83:29 - page so let me clean this up I'm already
83:31 - bleeding over into number two here and
83:33 - let's work on number two we need to add
83:35 - a route parameter called product ID I'm
83:37 - going to copy that to the path below we
83:39 - have a path that says slash products but
83:42 - we are going to add a slash representing
83:45 - a new segment of our URL and then
83:47 - instead of just putting product ID I'm
83:49 - going to put a colon in front of product
83:51 - ID if I just had product ID then it
83:54 - would be the literal Text slash product
83:56 - slash product ID with no deviation
83:59 - whatsoever in this however with the
84:01 - colon it says by the way this is just a
84:03 - placeholder for some other text that
84:06 - will actually be the segment in the URL
84:09 - of our page okay and then for number
84:11 - three we need to add some code below so
84:13 - that we can actually display whatever
84:15 - product ID gets put in the URL when it's
84:18 - displaying our product detail component
84:20 - in this case we would need to First
84:22 - import use params from react router Dom
84:27 - and then we can grab the specific
84:30 - parameter that we want in our case
84:32 - there's going to be the one called
84:34 - product ID and that will equal a call to
84:38 - use params and now with product ID in
84:41 - tow we could say something like product
84:43 - ID is and then stick in our product ID
84:48 - okay since this is just a markdown file
84:50 - we can't really save this and double
84:52 - check that it works but I feel pretty
84:54 - confident with my syntax here and more
84:56 - important than the specific syntax is an
84:58 - understanding of the concepts behind it
85:00 - once again if you feel like you need to
85:02 - review these things then now is the time
85:04 - to do that before we plow ahead and when
85:06 - you are ready we'll keep moving forward
85:11 - we are about to dive into what at least
85:14 - for me was one of the more complex
85:15 - topics about react router but that's
85:18 - okay we're going to walk through it very
85:20 - much step by step and hopefully we can
85:22 - get to the end and you'll just
85:23 - completely understand it perfectly and
85:25 - that topic is nested routes when we're
85:28 - talking about nested routes we're
85:30 - oftentimes talking about actually a
85:31 - couple different things first of all
85:33 - we're talking about nesting pieces of
85:35 - the URL so for example we've already
85:37 - seen something like this we have the
85:39 - slash van route and a nested route that
85:42 - we have is the slash van slash and then
85:44 - the ID or the name of the van or
85:46 - whatever it is you want to be in the URL
85:48 - but the URL is only a part of the story
85:51 - because when we're talking about nested
85:52 - routes we're also talking about some
85:55 - shared user interface or parts of your
85:57 - page that need to remain on the page
85:59 - when you transition from one route to a
86:02 - child route or a nested route and that
86:04 - might happen more than you think with
86:06 - the example with the slash van and the
86:08 - slash van ID over here we're are not
86:11 - doing much of that because if I come to
86:14 - Vans I mean we're sharing our navigation
86:16 - bar across the entire site but slash
86:18 - Vans doesn't really have any shared UI
86:21 - with its child route of Slash Vans slash
86:24 - and then the ID of the van slash van one
86:26 - even that little explore our van options
86:29 - wasn't part of this next page and so
86:31 - this page isn't really sharing any user
86:33 - interface but oftentimes you will want
86:36 - to do that a really great visualization
86:38 - of this is over on the remix website I
86:40 - included a link here if you wanted to
86:42 - see the live demo of this and the reason
86:45 - it's over on remix is because react
86:47 - router is actually now a part of the
86:49 - remix package remix is just a full stack
86:52 - framework for the web it uses react
86:54 - right now on the front end although I
86:56 - think in the future they'll be
86:57 - supporting whatever front-end framework
86:59 - you want to use but a major part of
87:01 - remix is the way that it handles routes
87:03 - so here we see an example app they call
87:05 - it fake books and we'll notice a few
87:07 - different things first of all we're
87:09 - inside of a nested route here we have
87:10 - exam sample.com sales slash invoices and
87:14 - then slash the number of one of the
87:16 - invoices and if we break this down
87:17 - you'll see that example.com is rendering
87:20 - everything that you see on the page that
87:21 - includes the navigation bar over here on
87:23 - the left the logo everything else as you
87:26 - might expect as you navigate with this
87:28 - navigation bar on the left it will
87:30 - probably go to example.com maybe
87:33 - dashboard slash accounts we happen to be
87:35 - here at slash sales and so that's the
87:37 - next part of our URL sales now we still
87:40 - have some shared UI here because we are
87:42 - maintaining the navigation bar on the
87:44 - left the slash sales part of this URL is
87:47 - going to render everything else that you
87:49 - see here in this teal color now here we
87:52 - have yet another navigation bar inside
87:54 - the sales portion of our website we have
87:56 - an overview of our sales subscriptions
87:58 - invoices customers and deposits again
88:01 - presumably if we click on overview well
88:04 - that might just be the slash sales
88:05 - endpoint by itself or maybe it's slash
88:07 - sales overview we click on subscriptions
88:09 - that's going to be slash sales
88:11 - subscriptions we're here at invoices so
88:14 - we have sales invoices this top portion
88:16 - is going to be a shared UI for those
88:19 - other routes so if we go to the next
88:21 - image we see that invoices is rendering
88:23 - this part down here but it's keeping
88:25 - everything from this kind of secondary
88:27 - navigation bar and then of course
88:28 - everything from the first navigation bar
88:30 - still exists too over here we have a
88:33 - list of invoices and presumably this is
88:36 - one of those invoices in fact it's the
88:39 - second one here so the last part of our
88:41 - URL which is the ID is going to be
88:43 - rendered in this little portion over
88:45 - here on the right so in this example we
88:47 - see not just a nesting of the portions
88:49 - of our URL but that Those portions of
88:52 - the URL are mapping to nested content on
88:55 - our site or another way to think of it
88:57 - is that there's quite a bit of shared
88:59 - user interface pieces on this site even
89:01 - if you navigate to another route so how
89:04 - do you actually create these nested
89:06 - routes well we know about the route
89:07 - component but up until now we've just
89:10 - been using it as a a self-closing
89:12 - component if we look at the code that
89:14 - we've written so far let's go to our
89:16 - index page every one of our routes is
89:18 - closing itself nothing is being nested
89:20 - however we can use route as a
89:23 - non-self-closing element or rather
89:24 - something that has an opening and a
89:26 - closing tag we're going to see exactly
89:29 - how that looks a little bit later but
89:30 - it's one of the most crucial
89:31 - capabilities of the route component that
89:34 - allows us to Nest our routes now we
89:37 - talked about there being a couple
89:38 - different reasons to do nested routing
89:40 - and I would like to propose that the
89:42 - primary reason that you would want to do
89:43 - it is whenever you want to keep some of
89:46 - the UI on your page but you also want to
89:49 - display more so you're linking to a new
89:52 - part of your website but maybe that new
89:54 - part of your website is really just
89:55 - changing one small part on the page or
89:58 - it could be a big part too the point is
90:00 - you have some things that you want to
90:01 - keep displaying kind of like we showed
90:03 - with the navigation bar or both of the
90:05 - navigation bars in that example but you
90:08 - also want to display some new stuff too
90:09 - another reason that you might want to do
90:11 - this is just so that you can avoid some
90:14 - repetition inside of your route
90:15 - definitions I put a little Caution sign
90:17 - here because sometimes that may end up
90:19 - being more work than it's really worth
90:21 - in the end for example over here we have
90:24 - a little bit of repetition where we're
90:25 - saying slash Vans and slash Vans slash
90:28 - colonid but as we mentioned we're really
90:30 - not sharing that much user interface
90:32 - actually we're not sharing any user
90:34 - interface between the Vans component and
90:36 - the van detail component and so in this
90:37 - case you could choose to Nest or you
90:39 - could choose not to Nest again we're
90:41 - going to see what that actually looks
90:42 - like in a different scrim but I wanted
90:44 - to lay the groundwork and say that the
90:46 - primary reason that I would suggest you
90:48 - actually consider nesting routes is when
90:50 - you have parts of your page that you
90:52 - want to keep but also that you want to
90:54 - display some more stuff to so this is
90:56 - really going to crack open our website
90:57 - because we have a lot of pages that
90:59 - we're going to build so that we can
91:00 - really practice with nested routing and
91:02 - hopefully really solidify our
91:04 - understanding of nested routing so let's
91:06 - take a quick look at what we will be
91:07 - adding to our site as of right now we
91:09 - are only can consumers of our van life
91:12 - site we can see the list of Vans we can
91:14 - see the details about one van we can
91:16 - click this button that does nothing to
91:18 - rent the van but on the other side of
91:20 - this equation are people who are renting
91:22 - out their vans so we are going to be
91:24 - adding an entire host section to our
91:26 - website hopefully it's not too small
91:28 - you'll see in the navigation bar we're
91:30 - adding a host link there and going to
91:32 - the host route is going to render a new
91:35 - navigation bar that we see here that
91:36 - navigation bar will have a dashboard
91:38 - which displays kind of a quick overview
91:40 - of the details the van host might want
91:43 - to know and also a list of the other
91:45 - information that the host would want to
91:47 - know like a detailed view of the income
91:49 - notice that it's also going to have this
91:51 - navigation bar that's going to be a
91:53 - shared user interface the reviews that
91:55 - their Vans are receiving again sharing
91:57 - the same user interface with that
91:59 - navigation bar and then we have this
92:01 - section for Vans now I'm keeping this
92:03 - separate because this is going to go
92:04 - even another level deep on the slash
92:07 - host slash Vans route we'll see a list
92:09 - of all the vans that this host is
92:11 - hosting on our van life website clicking
92:13 - on one of those vans will take you and
92:15 - again it's got the shared interface here
92:17 - by clicking on one of those is going to
92:19 - take you to a new page there's still
92:21 - some shared interface but this time we
92:23 - have yet another little navigation bar
92:25 - down here this allows the host of this
92:27 - van to see the details the pricing and
92:30 - the photos for this fan so the details
92:32 - will be kind of the default and when you
92:34 - go to the pricing it will have both of
92:37 - those shared user interfaces too and
92:39 - then some new information that displays
92:40 - same with the photos we'll have the
92:42 - photos of this van down here
92:44 - theoretically it would be where the host
92:46 - could then edit the photos so to get an
92:48 - overview of the routes that we'll be
92:50 - adding we will have the slash host route
92:52 - that's going to send us to the dashboard
92:54 - then we'll have slash host slash income
92:56 - slash hosts slash reviews and then we'll
92:59 - dive into the slash host slash Vans this
93:01 - is going to be the list page but then we
93:03 - have yet another level of nesting where
93:05 - we'll have slash host slash van slash
93:07 - the ID of the van that was clicked on in
93:09 - slash host slash vans and then yet again
93:11 - we'll go down to slash host slash fans
93:14 - slash ID and then slash pricing and
93:16 - slash photos so this one here where it
93:19 - just ends in slash ID that's going to
93:20 - sort of default to The Details page we
93:23 - also could choose to name this slash
93:24 - host slash fan slash ID slash details if
93:27 - we really wanted to but just making the
93:28 - executive decision to have that be the
93:30 - default view okay that is a lot we have
93:33 - a lot on our plates fortunately kind of
93:36 - like before because I really want to
93:37 - focus this course on react router and
93:40 - not necessarily on making a beautiful
93:42 - design I will do you the student a solid
93:45 - and I will Implement all of the styling
93:47 - and everything for you I know that's not
93:49 - usually my style but I do want to stay
93:51 - focused here on react router and of
93:53 - course that's not to say that you
93:54 - couldn't take the reins and actually
93:56 - design it yourself if that's what you
93:58 - want to practice so let's Center
94:00 - ourselves let's take some deep breaths
94:01 - if you need to and we will Jump Right In
94:07 - the first thing that I'd like to do to
94:09 - get our feet wet with this nested
94:10 - routing idea is to really fix what we
94:13 - have going on with our header right now
94:15 - we stuffed our header into our browser
94:17 - router just because it was outside of
94:20 - our routes which means that it will
94:21 - display on every page however this
94:24 - really doesn't feel clean to me in fact
94:26 - if we had a header that was more complex
94:28 - maybe it would take up 50 lines of code
94:30 - it feels like a weird place to just
94:32 - stuff it into our browser router like
94:34 - this I guess we could abstract it to a
94:36 - header component and then it would just
94:38 - say header but still it doesn't feel
94:40 - good to me to put something that's
94:42 - unrelated to our routes inside of our
94:44 - browser router like this so our
94:46 - introduction to nested routes is going
94:48 - to be through something called a layout
94:49 - route and I wanted to remind you that
94:51 - the primary reason we are nesting our
94:53 - routes is so that we can hit this second
94:55 - bullet point here when you want to keep
94:57 - displaying some information or some UI
95:00 - on the page but you also want to display
95:02 - more stuff that's exactly what we're
95:03 - doing with our navbar we're keeping our
95:05 - navbar on the page and I think our
95:07 - design has a footer too yeah we've got a
95:09 - footer that we haven't implemented yet
95:11 - but that would also be something that
95:12 - would just be on every page but we also
95:15 - want the changing of our URL to display
95:17 - other things as well so I added another
95:20 - slide to the end of this presentation
95:21 - let's bump forward a little bit this is
95:24 - an image taken from the documentation
95:26 - for react router it's specifically the
95:28 - spot that talks about layout routes you
95:30 - can click the image you see here to go
95:32 - to the documentation if you'd like you
95:34 - can read through this whole main concept
95:36 - section or at least parts of it or skim
95:38 - through it maybe it might be a little
95:40 - hard to grasp if you haven't done react
95:42 - router before but it honestly has great
95:44 - information there you might need to read
95:45 - it a couple times to make it stick so
95:48 - feel free to pause and go look at the
95:50 - documentation if you'd like but I'm
95:52 - going to be talking about these layout
95:54 - routes the idea of a layout route is
95:56 - that it doesn't have a path of its own
95:59 - per se but instead its purpose is to lay
96:02 - out your page we know that we want every
96:05 - one of our pages to have a header and a
96:07 - footer if you go to that documentation
96:09 - one of the things that they'll mention
96:10 - is how the concept of a route can be a
96:13 - little bit stretched I guess because in
96:15 - the case of a layout route you don't
96:16 - necessarily need to have a path if you
96:19 - look really closely it's a little bit
96:21 - small in this image but it says this is
96:23 - a bad example and it says danger
96:24 - basically don't do this what they talk
96:26 - about is how if I didn't want my header
96:29 - here inside my browser router but I did
96:31 - want to wrap all of my pages without
96:33 - using what we're about to talk about
96:35 - with layout routes I would have to do
96:37 - something like take my home component
96:39 - and maybe wrap it in a fragment or a div
96:41 - and then start stuffing in all my header
96:44 - code just right here and I would have to
96:46 - repeat that for every one of the
96:47 - elements that I want to have my header
96:49 - and I would have to do that with my
96:50 - footer as well this is obviously not a
96:53 - good example like it says in the
96:55 - documentation don't do this there's a
96:57 - much better way and that is by using a
96:58 - layout route so let me back this up to a
97:01 - reasonable spot now we do have a little
97:03 - bit of work before we throw the layout
97:06 - wrap together so I'm actually going to
97:07 - make a challenge I'm going to give you
97:09 - the chance to do this hard work for me
97:11 - and then we will actually implement the
97:13 - layout route in the next scrim so let me
97:14 - type up a challenge for you okay I'm
97:16 - sorry this is a bit administrative but I
97:18 - want you to create a new folder called
97:20 - components it's going to sit as a
97:22 - sibling to our assets and our Pages
97:25 - folders so not nested inside of them and
97:28 - in that components folder I want you to
97:29 - create two new component files
97:31 - layout.jsx and header.jsx and then you
97:34 - will simply move the header code here
97:37 - into the header.jsx file but I don't
97:39 - want you to necessarily go beyond that
97:41 - because we will actually not end up
97:43 - importing it here and using it at all
97:45 - inside of our index file so pause now
97:48 - and work on this challenge
97:55 - gosh you know I wish there were actually
97:57 - a way that I could just steal the code
97:58 - that you just wrote and use it in my
98:00 - recording here but alas that's not
98:02 - exactly how it works so I will be doing
98:04 - this work let's go ahead and create a
98:05 - new folder called components and inside
98:08 - I will create those two new files header
98:11 - and layout
98:13 - and then we will just steal our header
98:15 - from the index page we can actually just
98:18 - cut it we're going to lose our header
98:20 - for a little while so in the header
98:23 - we'll import
98:24 - react and we'll create our file
98:29 - or rather our function
98:31 - and we will return the header that we
98:34 - just copied all right let's hit refresh
98:36 - there and okay so yeah our header is
98:39 - gone which is a little bit inconvenient
98:41 - because we can't navigate our site
98:42 - anymore but that's okay we're going to
98:44 - fix that soon actually we're going to
98:45 - fix that now because we've done the
98:47 - administrative stuff we're ready to now
98:49 - just jump in and learn about how we can
98:51 - implement this layout component so that
98:53 - we don't have to repeat ourselves by
98:55 - putting the header on every one of the
98:56 - elements that we're rendering at every
98:58 - path
99:02 - okay so we mentioned how route is a
99:05 - self-closing element but it also can be
99:07 - an element that wraps around other
99:09 - elements and in fact when the route
99:11 - component does take children it needs to
99:13 - be other route components as its
99:16 - children what I mean by that is if I
99:18 - want to create another route up here and
99:20 - I want it to wrap around other elements
99:23 - I can't just go ahead and start putting
99:25 - other things like an H1 in here it needs
99:27 - it to be other route components as its
99:29 - children so I'm going to move this
99:31 - closing tag down here I want it to
99:33 - envelop or wrap around every part of my
99:36 - website that I want to contain my
99:38 - navigation bar which is everything now
99:41 - assuming that you have dealt with react
99:43 - children before you might start
99:45 - recognizing this pattern this route
99:47 - component is going to essentially take
99:50 - whatever element we pass to it so I can
99:53 - say an element and this is where we're
99:55 - going to put our layout component
99:57 - and it's going to render the layout
99:59 - component and then it will also render
100:01 - whatever child route matches the URL
100:04 - that we're currently at let's fix some
100:06 - of the bugs we have here first of all
100:07 - we're not importing layout so let's go
100:10 - ahead and import
100:11 - layout from our components folder slash
100:14 - layout and then we need to actually
100:16 - create that so we will get that set up
100:23 - okay easy enough this is obviously just
100:25 - a placeholder now I'm going to hit save
100:27 - we're going to see what happens and then
100:29 - well yeah let's just do that I'm going
100:30 - to hit save okay it's done loading this
100:33 - is everything that our site is now
100:34 - displaying at slash fan2 or if I go to
100:37 - slash fans also the same thing now
100:39 - assuming you do have some experience
100:41 - using react children I want you to think
100:43 - why is it that this layout component has
100:46 - now completely taken over our app it's
100:48 - the only thing being rendered here if
100:50 - you'd like you can pause for a minute to
100:52 - think about that I wouldn't necessarily
100:54 - try to fix it quite yet because we
100:56 - haven't learned what we need to learn in
100:57 - order to fix it
101:02 - if we were doing something like this say
101:04 - creating a layout component or actually
101:07 - rendering the layout component ourselves
101:09 - and wrapping it around everything here
101:12 - like this then we would have access to
101:14 - our route components inside of our
101:16 - layout through the children prop however
101:19 - this isn't the right way to do it
101:21 - because react router is not going to be
101:23 - able to render correctly if we do that
101:24 - so when we have our layout as an element
101:27 - that we're passing to this route
101:29 - definition there's a special tool that
101:32 - react router has provided us so that we
101:35 - can render the layout but then also tell
101:37 - it exactly where to render whichever
101:39 - route we're currently matching on the
101:41 - URL for example we're at the slash Vans
101:44 - route right now so it should render the
101:47 - layout and then we want it to render the
101:49 - Vans component that we're rendering here
101:51 - the element that we're rendering here or
101:52 - the element that we're passing to this
101:54 - route here so let's go over to layout
101:57 - and the tool that we're going to use is
101:59 - a component from react router called
102:01 - Outlet foreign we have to spell it
102:04 - correctly so we'll import that from
102:05 - react router Dom and the outlet is
102:08 - basically our way to create a hole in
102:11 - whatever our component is where the
102:13 - matching route that is a child of the
102:16 - route that we're nesting here or the
102:18 - parent route like this the outlet
102:20 - creates a hole where the matching route
102:22 - can render this took me a long time to
102:25 - wrap my head around so don't feel bad if
102:26 - that doesn't make sense playing around
102:28 - with this is going to be the only way
102:29 - that it makes sense if it didn't already
102:31 - let's actually implement it and then
102:33 - we'll go over it once again so right now
102:35 - I'm just rendering this H1 let's um
102:37 - maybe put some fragments around this
102:40 - just so we can actually render two
102:42 - things and below my H1 I'm going to
102:44 - render the outlet as a component so now
102:47 - I want you to think when I hit save what
102:49 - is going to happen
102:53 - well when I hit save I should get my H1
102:56 - just like it is but then I should also
102:58 - get the content that is supposed to
103:00 - display at slash fans
103:03 - and sure enough there we go so this is
103:05 - the layout route H1 up here is replacing
103:07 - our header so we're going to fix that in
103:09 - just a second but now we have the rest
103:11 - of the slash Vans page rendering below
103:13 - so let's look at that once again because
103:15 - we are nesting these routes inside of
103:18 - this parent route react router is going
103:21 - to notice that this route doesn't have a
103:24 - path so it's always going to match
103:26 - whatever URL we're currently at and it's
103:28 - going to render our layout component so
103:30 - when it renders our layout component if
103:32 - we don't have some way to tell it where
103:35 - to put the rest of the matching child
103:38 - routes like we have currently slash vans
103:40 - so this route path is going to match and
103:44 - we want to render this Vans element we
103:47 - need to tell react router inside the
103:49 - layout component where that Vans
103:51 - component should go just like the
103:53 - children prop Works in react children
103:55 - where we get to tell it where the
103:56 - children should be rendered so I want
103:58 - you to think what is going to happen if
104:00 - I were to switch these two I put the
104:02 - outlet on top and my H1 on bottom you
104:04 - can pause if you want to think through
104:06 - it or if you want to run it and actually
104:07 - see what it does
104:11 - well if I tell it that the content
104:13 - should be rendered first and then the H1
104:15 - second I'll hit save we'll see that my
104:17 - content is first and way down at the
104:19 - bottom we get our this is the layout
104:21 - route H1 okay now it's your time to
104:23 - shine let's do a challenge
104:26 - I'll be a little bit vague I want you to
104:28 - get the header working again you'll know
104:30 - that it works when you can go to the top
104:32 - of the page you'll see our header and
104:34 - you can actually navigate between the
104:35 - pages again pause now and fix our header
104:43 - well everything should be set up for us
104:45 - I'm going to move this Outlet to the
104:47 - bottom and then instead of using an H1
104:49 - I'm going to Simply import our header
104:52 - from and let's see it's inside the same
104:54 - folder so I can just say dot slash
104:56 - header and then I can render the header
104:59 - component and let's get rid of this
105:02 - challenge text we'll cross our fingers
105:04 - and hit save
105:06 - ah so close over in our header we're
105:09 - using the link component in a few places
105:11 - and I forgot to import that
105:14 - some of you were probably shouting at me
105:16 - about that and I apologize so react
105:20 - router Dom okay let's hit save again
105:23 - awesome I'm currently at the Vans page
105:25 - we see the list of Vans I can go into
105:27 - the van's detail page go back to Vans
105:29 - about the van lamp home page now I know
105:32 - we're not working on nested routes in
105:35 - the URL per se quite yet but we are
105:37 - definitely going to get there I think
105:39 - this is a great way to introduce the
105:41 - concept of nested routes and most
105:43 - importantly understanding how this
105:45 - Outlet works if it didn't totally make
105:48 - sense that's okay we're going to get a
105:49 - lot of practice with it but I've been
105:51 - blabbing on for a while we've done a lot
105:53 - of good work here we've got that ugly
105:55 - nav bar pulled out of our browser router
105:57 - the nephr wasn't ugly but it felt ugly
105:59 - to have it here in the browser router
106:01 - now if for some reason I didn't want
106:03 - let's say the about page to have access
106:06 - to the same navigation bar and I wanted
106:07 - it to be completely different I would
106:09 - need to move it outside of the children
106:12 - of this layout route so that would just
106:14 - have to move down here and then I hit
106:18 - save everything's working but when I go
106:20 - to about we lose our navigation bar
106:22 - hopefully that jives with your
106:24 - understanding of what we've been doing
106:25 - so far let's put it back in there so we
106:27 - can actually navigate back okay with
106:29 - that under our belts we're going to be
106:30 - bootstrapping out all of the host pages
106:33 - and remember there's a lot of different
106:34 - cool shared user interface things that
106:37 - we're going to have to deal with with
106:38 - nesting so we will get lots of practice
106:40 - with what we've talked about here so
106:41 - when you're ready that's what we'll
106:42 - start working on next
106:47 - okay before we can dive into actually
106:49 - doing the nesting that we want to do
106:51 - we're going to bootstrap out some of the
106:53 - pages that we need and so that's going
106:55 - to be one of your first tasks first of
106:57 - all I want you to add a host link to the
106:59 - navbar it should be before the about
107:01 - Advanced just over here to the left and
107:03 - when it gets clicked it should take you
107:05 - to the slash host path and of course
107:07 - that won't happen until we set up the
107:09 - rest of this but I want you to also
107:10 - create the following components that we
107:12 - see here dashboard income and reviews
107:14 - I've organized things a little bit I
107:17 - moved our van detail and vans pages into
107:20 - a dedicated fans folder and so I've also
107:22 - created this host folder currently it's
107:24 - empty and so you'll need to add these
107:26 - components there I've also included the
107:28 - routes here just in case you wanted a
107:30 - quick reference to them I also pulled up
107:32 - the slide here in case for some reason
107:34 - this is better for visualizing it and
107:36 - keep in mind I don't need you to build
107:37 - the pages right now I just want you to
107:39 - have maybe an H1 that says like host
107:41 - dashboard here and then once you have
107:43 - those components ready you'll need to
107:44 - import them and you'll set up the routes
107:46 - for each of the those now because we're
107:48 - just bootstrapping things I don't want
107:50 - you to worry yet about doing any kind of
107:52 - nesting you can just put everything as
107:54 - additional routes here right on the same
107:57 - level as these other ones all right now
107:59 - it's your turn to get your hands on the
108:00 - keyboard pause now and work on the
108:01 - challenge
108:08 - all right let's get this done so we'll
108:10 - first go to our header which is where
108:12 - our links are We'll add another one that
108:15 - will take us to slash host host
108:17 - awesome okay easy start if I go there
108:20 - nothing's going to show up because we
108:22 - don't have any route that matches that
108:24 - and oh no I broke it
108:27 - okay there we go we're back okay that's
108:30 - nice a quick easy win we'll get rid of
108:32 - that okay let's create some components
108:34 - dashboard income and reviews I won't
108:37 - Bore You by making you watch me do all
108:40 - of this so I just created a basic
108:43 - dashboard component and I'm going to do
108:45 - the exact same thing in fact I'm just
108:47 - going to copy this and paste it to some
108:49 - new components for the income and the
108:51 - reviews okay so now we have the income
108:54 - and reviews done let's go to our index
108:56 - here and we will import those
109:00 - we'll bring in the dashboard this is
109:02 - going to be in the host folder and it's
109:05 - the dashboard component and then we'll
109:08 - just do that for the other two
109:11 - okay so challenge part number two is
109:15 - done and next we need to set up our
109:17 - routes so I'm just going to take this
109:20 - Vans route and let's see we need one two
109:23 - three of them so we'll change Vans to oh
109:27 - this is well that's okay we'll change it
109:28 - to host and then I'm going to change
109:30 - this to the dashboard I guess I could
109:32 - call this host dashboard or something if
109:34 - I wanted to be extra clear and then this
109:36 - will be slash host slash income that
109:39 - will be the income component and slash
109:42 - host slash reviews and that will be the
109:45 - reviews component okay let's hit save
109:47 - we're not broken that's good news I'm
109:49 - gonna go to the host and we'll see
109:51 - dashboard goes here that's good now
109:53 - currently we don't have any kind of
109:54 - navigation that will be able to take us
109:56 - to the income and reviews routes so I'm
109:59 - just going to type it up here into the
110:01 - URL we'll hit enter okay income page
110:04 - goes here we'll do slash reviews reviews
110:06 - page goes here awesome okay that was all
110:09 - just some bootstrapping work nothing too
110:11 - groundbreaking but next we're going to
110:13 - see how we can actually on our host page
110:15 - have another navigation bar that will
110:18 - allow us to be a little more deeply
110:20 - nested so that we can navigate just
110:22 - through the different host Pages if
110:24 - anything that we did in this
110:25 - bootstrapping challenge here was
110:27 - difficult then that's probably a good
110:29 - sign that it's time to go back just
110:31 - review what you've learned maybe it's
110:33 - been a little while since you've done it
110:34 - but it really will be in your best
110:36 - interest to review what we've learned up
110:37 - until this point and try to catch
110:40 - yourself up so without further Ado let's
110:42 - start turning this into some more nested
110:44 - routes
110:47 - okay we are going to work on nesting
110:50 - these other routes inside of our slash
110:52 - host route and we're just going to take
110:54 - it one little step at a time so your
110:56 - first challenge is to take this route
110:58 - that is for slash host and turn it into
111:00 - a parent route that surrounds the host
111:02 - income and host reviews routes now
111:05 - because we don't have a navigation bar
111:06 - to get to these other paths here once
111:09 - you've done that you'll go to the URL
111:11 - and you'll type slash host slash income
111:12 - or reviews it doesn't matter hit enter
111:14 - and see what happens once you've done
111:17 - that I want you to pause and I want you
111:18 - to see if you can figure out why it did
111:20 - what it did okay so pause now and work
111:23 - on this challenge
111:29 - okay well let's simply take this closing
111:32 - slash away so that we can turn this into
111:35 - a parent route here we'll close it with
111:38 - a separate tag and move that down we'll
111:40 - indent these nested ones now okay let's
111:43 - hit save again we don't have any kind of
111:46 - navigation happening so I'm going to
111:48 - type in slash income and hit enter and
111:51 - okay well here we are it says we're at
111:53 - slash host slash income but we're seeing
111:55 - that the dashboard goes here and we're
111:57 - not seeing anything else so maybe you
112:00 - figured it out kudos to you if you did
112:01 - remember when we learned about layout
112:03 - routes we learned that this route as a
112:06 - parent to the other routes needs to have
112:09 - some kind of hole inside of that layout
112:11 - so that react router can know where to
112:13 - put the route that actually matches the
112:15 - URL in this case this dashboard element
112:18 - is acting like a layout route and if we
112:21 - go to our dashboard page we don't have
112:23 - the outlet component here anywhere so
112:26 - okay let's say we go ahead and we import
112:28 - the Outlet component from react router
112:32 - Dom and let's just do a really quick
112:34 - fragment so that we can add our Outlet
112:38 - we'll hit save and look at that we have
112:41 - our dashboard goes here that's from this
112:43 - dashboard page that's this H1 and then
112:45 - we have the outlet which is the sort of
112:47 - placeholder for the route that's
112:49 - actually matching best to go I guess the
112:52 - important thing to learn from this
112:54 - lesson is that the way react router is
112:56 - working is it's matching multiple routes
112:58 - and deciding that multiple things can go
113:01 - on the page at one time in this case
113:03 - this route with the path of Slash host
113:05 - is matching and so it's displaying the
113:07 - dashboard and because our dashboard has
113:10 - an outlet it's also matching this route
113:12 - here and by matching I just mean that
113:14 - it's comparing our path in this route to
113:17 - what's actually in the URL and because
113:19 - this route is matching it's also
113:21 - displaying this income and it's putting
113:23 - it inside the outlet from its parent
113:25 - route that should have been reviewed but
113:27 - maybe seeing it in this slightly
113:28 - different context is helping clarify
113:30 - that now there's one major problem here
113:32 - and that is that our dashboard is
113:34 - actually a different view altogether
113:36 - it's going to have a summary of our
113:38 - earnings our reviews a quick summary of
113:41 - the vans that we're renting so the
113:43 - dashboard isn't the shared user
113:45 - interface that we want to share between
113:46 - these three routes so think for a second
113:48 - what is the shared interface that we
113:51 - want to share between these three routes
113:55 - well it's this tiny little navigation
113:57 - bar at the top so in reality what we
114:00 - need to create is another layout route
114:02 - that is specific to the slash host route
114:05 - and this layout route is still going to
114:07 - be nested inside of our main layout
114:09 - route up here because we still want the
114:12 - top navigation and the footer we don't
114:14 - have a footer but eventually the footer
114:16 - to exist so in the next scrim we'll have
114:18 - another challenge where we create
114:20 - another layout route we'll call it the
114:22 - host layout and thankfully we'll create
114:24 - that little navigation so that we can
114:26 - actually navigate around this slash host
114:28 - nested routes without having to type
114:30 - anything in the URL so that's what's
114:32 - coming up next
114:36 - before we jump into this challenge we
114:38 - are going to backtrack on what we did on
114:40 - the dashboard file really quick as you
114:42 - might remember the dashboard itself is
114:44 - going to be the view that has sort of
114:46 - these summary stats and we also want it
114:49 - to include the navigation bar but the
114:52 - navigation bar isn't really the
114:53 - dashboard because if we navigate to
114:55 - another route like the income or the
114:58 - reviews route we want the navigation to
115:00 - stay but we don't want the summary to
115:02 - stay we want to switch to those other
115:04 - routes currently we set up our dashboard
115:06 - with this Outlet so we're just going to
115:08 - undo the changes that we made there so
115:11 - that we are all set to start now on the
115:14 - challenge for this script so let me type
115:16 - that out
115:17 - okay your challenge is to make the host
115:20 - layout component it's just going to have
115:22 - the navigation bar for the dashboard the
115:24 - income and the reviews like it mentions
115:26 - here and once you have created that host
115:28 - layout component you'll need to replace
115:30 - the dashboard being rendered here for
115:32 - our host route as a caveat to this it's
115:35 - going to make the dashboard disappear
115:37 - but don't worry too much about that
115:38 - we're going to fix that in the next
115:40 - lesson so your navigation will include
115:42 - something called dashboard but clicking
115:44 - it won't exactly show dashboard goes
115:46 - here the way that you might think I've
115:47 - left out a couple of the steps that
115:49 - you'll need to take so this is going to
115:50 - be a good challenge for you and it will
115:52 - really test your knowledge and make sure
115:54 - that you've been following along with
115:55 - the challenges and understanding what
115:57 - we've been doing so far especially
115:59 - regarding layout routes so now it's your
116:01 - turn pause now and work on the challenge
116:09 - okay let's go over to components I'm
116:12 - going to create my host layout in the
116:13 - components folder not the pages folder
116:16 - maybe there's an argument for doing it
116:18 - in the pages folder to me because first
116:20 - of all we have the layout component in
116:21 - the components folder it makes sense to
116:23 - put the host layout component there but
116:25 - secondly this isn't really a full page
116:27 - per se it's just this navigation bar
116:29 - that's going to be shared between the
116:31 - pages so let's go ahead and create a new
116:33 - component we'll call it host
116:35 - layout.jsx and we'll just kind of get it
116:37 - set up like normal
116:41 - for now we will just return an H1 just
116:45 - kind of do it one step at a time
116:47 - and we'll say host layout then we need
116:49 - to make sure that we import that so
116:52 - let's import it at the top of this file
116:54 - host layout that was kind of a cool
116:56 - shortcut I could do there and we'll
116:58 - replace the dashboard with host
117:01 - layout
117:03 - we're at the slash host route so going
117:05 - to that path should render the host
117:07 - layout
117:08 - and sure enough there we are okay let's
117:10 - go to the host layout we know we need
117:12 - our navigation here and to navigate
117:14 - around we're going to use the link
117:17 - component from react router Dom and
117:20 - let's use a nav element since this is a
117:24 - navigation on the site
117:26 - and we will create our links so this is
117:29 - going to go to slash host oh not slash
117:33 - host slash link there we go this will
117:35 - say dashboard again this one's not going
117:38 - to be working the way that we think but
117:39 - we'll fix that soon then we will create
117:42 - our other two we're going to have slash
117:45 - actually just here let's see Slash
117:46 - income slash reviews this will say
117:49 - income and this will say reviews as a
117:52 - quick aside for anybody who may be
117:54 - already familiar a little bit with react
117:56 - router you might be screaming at me that
117:58 - I don't need these absolute paths even
118:00 - over here in our index we have some
118:03 - repetition happening with Slash host
118:04 - slash host slash host so don't worry if
118:07 - you know that there's a better way I'd
118:08 - also know that there's a better way
118:10 - we're going to learn about that very
118:11 - soon if you have no idea what I'm
118:13 - talking about with relative paths or
118:15 - anything like that don't worry about it
118:16 - we will talk about it okay let's go back
118:18 - to host layout and well let's go ahead
118:21 - and hit save
118:23 - okay it's pretty ugly so I'm going to
118:25 - call on my magic snap
118:27 - and here we are perfect it's a little
118:29 - basic but the styling is there so let's
118:32 - see if the functionality is there now we
118:35 - already talked about this dashboard well
118:37 - we're at the dashboard I'm clicking it
118:39 - it's taking us to slash host but nothing
118:40 - else is showing up and well actually I'm
118:42 - getting ahead of myself these will take
118:44 - us to slash reviews and slash income but
118:46 - the part that I kind of left out was the
118:48 - fact that we would need the outlet if we
118:50 - want to show any of the other parts of
118:52 - the page so that's the next thing we
118:54 - need let's go ahead and import our
118:56 - outlet and I will need to turn this into
118:59 - something a little different so let's
119:00 - just wrap it in a fragment for now so
119:03 - that we can put more than one thing here
119:05 - and below our nav bar we will render our
119:07 - Outlet let's hit save okay awesome we
119:09 - were at the slash host slash income
119:11 - income page goes here that's of course
119:13 - where we would design the actual income
119:15 - page okay let's try reviews reviews page
119:19 - goes here awesome dashboard uh oh
119:21 - nothing's there let's go look at our
119:23 - index and I'm going to clean up this
119:25 - challenge here I want you to look at
119:28 - this nested route setup and see if you
119:30 - can figure out why it is that when we go
119:32 - to slash dashboard our dashboard page is
119:34 - not actually showing up in fact you can
119:36 - even pause here if you need a little
119:37 - extra time
119:41 - well one thing that might be obvious is
119:43 - that we are currently importing the
119:45 - dashboard but we're not using it
119:46 - anywhere so the program has absolutely
119:48 - no idea that we want the dashboard to be
119:51 - a part of this app we had it right here
119:53 - with the host layout but we needed to
119:55 - dedicate this parent route because the
119:58 - shared UI needs to be on the parent
120:00 - route to The Host layout so our
120:02 - dashboard is gone well there's one way
120:04 - to fix this but it's going to highlight
120:05 - what I was kind of alluding to a moment
120:08 - ago where I was saying that we have this
120:10 - kind of crazy nested repetition
120:11 - happening and we're going to eventually
120:13 - use relative routes to kind of fix this
120:15 - so the workaround is I could just repeat
120:18 - another path and say this one is also
120:21 - slash host and the element should be
120:23 - dashboard I want to make it very clear
120:25 - that you would never see this in
120:27 - production react router 6 code so I just
120:29 - want to make sure nobody takes this as
120:31 - their takeaway and decides This Is How
120:33 - They want to do it so let's hit save
120:34 - technically our dashboard is showing up
120:36 - react router is matching this route and
120:39 - it says the element is the host layout
120:41 - and then it looks at this child route
120:42 - and it says well yeah I already matched
120:44 - it but I guess I can display this
120:46 - element too in the parents Outlet so we
120:49 - have the host layout giving us this
120:50 - navigation bar and then the child route
120:52 - here displaying the dashboard as well so
120:55 - technically this is working but that
120:57 - leads us perfectly into the next topic
120:58 - which is all about using relative routes
121:01 - so that's what we'll learn about next
121:06 - the way react router works under the
121:08 - hood is when it is looking at a child
121:10 - route like the ones we have here and
121:12 - here and technically this one here as
121:14 - well inside of the context of that route
121:16 - it knows that this route is a child of
121:19 - the slash host route up until now we've
121:21 - included a slash at the beginning of
121:23 - every one of our paths but the truth is
121:25 - we don't need to do that all the time
121:27 - and in fact it's going to end up making
121:29 - our lives a lot easier to not have to
121:31 - have an absolute path like this every
121:33 - time that gives us the complete view of
121:36 - the path from the very home page at
121:38 - slash all the way to the end that might
121:40 - not seem like a huge deal here when we
121:42 - just have kind of two portions of our
121:44 - URL or of our path but if we look back
121:47 - at one of the pages we're going to be
121:49 - creating we have slash host slash Vans
121:51 - slash the ID of the van pricing and
121:54 - slash photos and that is going to start
121:56 - to get tedious plus if this were to grow
121:58 - into a much bigger site that might even
122:00 - get more and more and more nested and
122:02 - just become a little bit unmaintainable
122:04 - fortunately there is a better way and
122:06 - like I mentioned before for anybody who
122:08 - already knows a thing or two about react
122:10 - router we can clean up what we have here
122:12 - and make it better and the way we're
122:14 - going to make it better is through the
122:15 - use of relative routes Now Fair Warning
122:17 - by switching things to relative routes
122:19 - it is going to lead us into the next
122:21 - topic because we're going to break a
122:22 - thing or two here but that's okay that's
122:24 - how progress is made right the idea
122:25 - behind this is that the slash really
122:27 - should mean and should be dedicated for
122:29 - the very initial home page if I start my
122:32 - path with a slash then react router is
122:35 - going to treat it like an absolute path
122:36 - and technically as we've seen I can use
122:39 - that and I could just use that for the
122:41 - foreseeable future for my entire app and
122:43 - things would work if I do not use a
122:45 - slash at the beginning then it treats it
122:47 - as a relative route and what is it
122:49 - relative to well it's relative to its
122:52 - parent route in this case the parent
122:54 - route is not really determined we have
122:56 - this path of Slash which is our home
122:58 - page and the parent has no path it's
123:00 - called a pathless route because well
123:02 - there's no path there so it assumes
123:04 - because there is no parent that this is
123:07 - one of the first Pages like the first
123:09 - section of the URL here slash about
123:11 - Slash fans slash fan slash ID so I can
123:14 - do the same thing with my host here and
123:16 - just remove my slash and maybe we decide
123:19 - we get a little carried away and we're
123:21 - going to just remove all of these
123:22 - initial slashes well let's hit save and
123:24 - we'll see what happens okay I'm at the
123:26 - slash host route but suddenly my
123:28 - dashboard is gone but here it says that
123:30 - the host is the path well what's
123:32 - happening is because I don't have a
123:34 - slash here it is now relative to the
123:37 - parent route and the parent route is at
123:39 - slash host it doesn't say slash but
123:41 - that's because it's on the top level of
123:43 - our routes so think for a second if this
123:46 - host is relative to the parent and the
123:48 - parent is host what could I type into my
123:50 - navigation here my URL in order to get
123:53 - to the dashboard view you can pause now
123:55 - and kind of play around with that or
123:57 - think about it if you want
124:01 - well what I'd have to type in is slash
124:03 - host slash host hit enter and now I'm
124:06 - back to my dashboard so that's not ideal
124:08 - I go to income well that route doesn't
124:11 - even exist anymore and you can see
124:13 - actually none of it is matching because
124:15 - really we're defining slash host slash
124:18 - host slash income and now we're back to
124:20 - where we want it to be of course we set
124:22 - up these links as absolute paths to
124:24 - slash host slash income slash host slash
124:26 - reviews and so that's taking us to this
124:28 - unmatched blank page which we should
124:30 - actually put on our backlog because we
124:33 - probably want some kind of 404 not found
124:35 - page to really soak up any routes that
124:38 - are not being matched in our route
124:39 - definitions over here but that's for a
124:41 - future lesson let's go back okay well
124:43 - how could I fix this well if these
124:45 - routes are relative to the parent then I
124:48 - don't need to specify host again I can
124:50 - just say this is the path of income this
124:53 - is the path of reviews because in the
124:55 - context of these nested routes it
124:57 - already knows that the parent is host
124:59 - slash host so that should fix income and
125:01 - reviews let's hit save go to income and
125:04 - awesome our income page is back reviews
125:06 - Pages back the dashboard is still broken
125:08 - now at this point there's a couple small
125:10 - caveats that I want to talk about and I
125:12 - think that will probably be best served
125:14 - by doing it in the next lesson so before
125:16 - just moving on if you want you can play
125:18 - around with everything we've done here
125:19 - you can scrub back to the beginning of
125:21 - the video and see if you can recreate
125:23 - this relative path setup that I have
125:25 - here and when you're ready let's go to
125:27 - the next lesson we'll learn how to fix
125:28 - dashboard and a couple other minor
125:30 - things as well
125:34 - okay let's fix this weird conundrum
125:37 - where we have slash host slash host and
125:39 - that's where our dashboard lives we've
125:41 - already seen that the income and reviews
125:42 - are working because we do want them to
125:45 - be at slash host slash income and slash
125:47 - host slash reviews it's pretty common
125:49 - when you're creating a nested route
125:51 - scenario like we have here to put some
125:54 - sort of layout element at the parent of
125:57 - that nested Route Series that you're
125:59 - creating this layout element is of
126:01 - course as we've learned the one where
126:03 - all of the shared user interface in our
126:05 - case just this simple little navigation
126:07 - bar where that's going to be exposed and
126:10 - then everything else that matches more
126:12 - nested inside of it we'll just go into
126:14 - the outlet of the parent layout
126:16 - component because this is a pretty
126:18 - common setup in react router there's a
126:20 - way for us to say okay this is the
126:23 - layout element and this layout should
126:25 - exist on every route that starts with
126:28 - host or slash host but when you go there
126:30 - I also have a component that I want to
126:33 - render in the outlet of the this host
126:35 - layout component and not at some further
126:38 - nested URL path like slash host slash
126:41 - host just at slash host and the way that
126:43 - you do that is with something called an
126:45 - index route you can click this
126:47 - screenshot which will take you to the
126:48 - react router docs which talks a little
126:50 - bit more in detail about index routes
126:52 - but the main takeaway to remember that
126:54 - was at least most helpful for me is to
126:57 - know that if I have an element that I
126:59 - want to display in the outlet of the
127:01 - layout component but I want it to be at
127:04 - the same route as what the layout
127:06 - component is defined at then I can
127:08 - simply replace my path with the prop
127:10 - called index a way that I tried to
127:13 - understand this for a long time was to
127:15 - imagine it being like path equals slash
127:17 - but the problem is when a path starts
127:19 - with a slash it's an absolute path so
127:21 - doing this means that this would only
127:23 - display at the top level slash path up
127:26 - here it's like it would be the home page
127:27 - so the slash isn't going to work for us
127:29 - because that's an indicator to react
127:31 - router that it's an absolute path so
127:33 - their work around for that is to say
127:35 - index now there's a nuanced difference
127:37 - between the layout route that we have
127:39 - here that does include a path and the
127:41 - layout route we have above that does not
127:43 - include a path in this case the layout
127:46 - component will apply to well everything
127:48 - because everything is a child of that
127:51 - layout route and that's why we still see
127:53 - a navigation bar even though we're
127:55 - inside of our more deeply nested routes
127:57 - here now in fact I could switch this
128:00 - definition here so that it does include
128:01 - a path and the path would be path equals
128:04 - slash but if I do that I want you to
128:07 - think to yourself what tool did we just
128:08 - learn about that I would then have to
128:10 - use in order to maybe update my route so
128:13 - that they looked a little bit more
128:14 - consistent and clean well let me hit
128:16 - save let's go to our home page and
128:18 - everything seems to be working just fine
128:19 - that's very specific because of the way
128:22 - that the slash works and this being an
128:24 - absolute path but the point is we could
128:26 - also replace this path equal slash with
128:28 - index because once again index is saying
128:31 - I want you to put this element the home
128:34 - component inside the outlet of my parent
128:37 - route when it matches so when the path
128:39 - is just slash then first render the
128:42 - layout and then inside the outlet stick
128:44 - in the home element when it changes to
128:46 - slash about then I don't want you to
128:49 - render the home anymore because it's not
128:51 - the index anymore it's slash about and
128:53 - so you should render this element inside
128:55 - of the outlet of the parent I think for
128:57 - the sake of more closely matching what
128:59 - the documentation shows I'm going to
129:01 - leave it this way but it's helpful to
129:03 - point out that it was working before and
129:05 - it would continue to work the other way
129:07 - as well okay there's one other little
129:08 - caveat that you might be asking yourself
129:10 - about and that's right here we have this
129:12 - Vans path and then we're explicitly
129:14 - saying fan slash colon ID so what gives
129:17 - with that how come we're not using
129:18 - nested routing there well that's a great
129:20 - question if you were asking that and
129:22 - we're going to talk about it in the next
129:23 - lesson
129:26 - okay so what gives with having this van
129:29 - colon ID here if we were just talking
129:31 - about how we can Nest the routes so that
129:33 - we don't have to include these nested
129:35 - route definitions in our paths well I
129:37 - want to refer you back to when we first
129:39 - started talking about nesting the route
129:41 - component the primary reason you would
129:43 - want to do that is when you want to keep
129:45 - displaying some user interface on the
129:47 - page some part of your page will stay
129:49 - the same while other parts will display
129:51 - differently or new things will display
129:52 - on the page when you're changing from
129:54 - one route to the next and then we talked
129:56 - about how there's kind of this caution
129:58 - sign when the only reason you want to
130:00 - Nest routes is because you want to avoid
130:02 - some kind of repetition in your route
130:04 - paths let's take a look at that so the
130:06 - Vans and Vans ID we have this slash Vans
130:09 - page
130:10 - and it starts with explore our vans and
130:13 - then we click on one of these and
130:15 - nothing has remained the same I mean our
130:17 - navigation bar and our eventual footer
130:19 - will remain the same but that's outside
130:21 - the purview of these paths here these
130:23 - routes here so looking at these two
130:25 - pages because none of it is sharing the
130:27 - same UI there isn't necessarily a reason
130:30 - for us to Nest a route for just the
130:33 - colon ID portion inside of a nested
130:35 - route for vans in fact doing so would
130:38 - make us create a route that has a path
130:40 - but no element because as soon as we put
130:43 - an element in a parent route we have to
130:45 - include an outlet for that parent route
130:47 - and because we're not sharing any UI
130:50 - that parent component would be a layout
130:52 - route that only has an outlet in it and
130:54 - we end up with a whole extra component
130:56 - that's not really doing anything in fact
130:58 - Maybe Just for kicks and Giggles it
131:00 - could be fun for you as part of a
131:02 - challenge to see what that would look
131:04 - like so we can Nest this van colon ID
131:07 - route inside of a Van's route let me
131:09 - actually type that up as a challenge
131:11 - okay I'm gonna call this one a thought
131:13 - experiment because I personally don't
131:15 - believe that the way we're going to
131:16 - write this is going to be an improvement
131:18 - per se but it could be a good way to
131:20 - practice what we have recently learned
131:22 - and kind of better understand how these
131:24 - routes and these paths work with each
131:26 - other so I want you to rewrite the Vans
131:29 - route let me actually put this as a
131:31 - little separation so you know what
131:32 - you're working with you're working with
131:33 - these two routes here I want you to
131:34 - rewrite them so that they are nested in
131:37 - this case because there's no shared user
131:39 - interface between the slash Vans and the
131:41 - slash van ID route the parent Vans route
131:44 - that you create won't have its own
131:45 - element prop it's only going to have a
131:47 - path prop and that does mean that as
131:49 - part of this thought experiment you're
131:51 - going to have to figure out how to
131:53 - render something at the slash Vans route
131:55 - if the parent route here in the
131:58 - definition won't have its own element
131:59 - you can read the hint here which should
132:01 - help a little bit so pause now and work
132:03 - on well it's not a challenge let's maybe
132:05 - say work through this thought experiment
132:13 - okay let's go ahead and create a parent
132:16 - route that's actually wrapping these
132:19 - other routes
132:21 - go like that and in this case we need to
132:24 - move our path of Vans up to the parent
132:28 - route but because there's no shared user
132:31 - interface I'm not going to put an
132:32 - element here again putting an element at
132:34 - the parent route would mean that I would
132:36 - need some kind of Outlet inside that
132:38 - element so that it had a place to
132:40 - display the children routes but because
132:42 - we have no shared user interface I would
132:45 - just be creating a layout route that had
132:47 - nothing but an outlet in it which is
132:49 - totally extraneous that's not necessary
132:51 - at all so for this first child the Vans
132:53 - page I do want that to render when it's
132:56 - at the slash Vans route well we just
132:58 - learned about the index prop where I
133:01 - tell this route to render this element
133:03 - at the parents path technically speaking
133:05 - it usually wants some kind of Outlet in
133:08 - the parent element but in this case
133:09 - because we have no parent element it's
133:11 - just going to render the Vans page with
133:13 - no shared user interface between all of
133:16 - these children routes and that's exactly
133:17 - what we want so that should work out
133:19 - okay then the only other thing I need to
133:21 - change because we're already nested
133:22 - inside of this path equals Vans is I
133:25 - don't need to repeat the Vans and the
133:27 - slash here I can just say that the path
133:29 - is colon ID so let's hit save and things
133:32 - seem to be working the way that they
133:34 - were which is good that's what we'd
133:35 - expect again we're now using four lines
133:37 - instead of two lines which of course
133:39 - isn't that big of a deal but it is doing
133:41 - some weird things like we have a route
133:43 - which has no element and now we have to
133:45 - specify another child route using the
133:48 - index route so again as a thought
133:49 - experiment I wouldn't necessarily
133:51 - recommend doing this maybe there's a
133:53 - scenario where it makes sense but when
133:55 - there's no shared user interface between
133:57 - these routes there's really no reason to
133:59 - do a nested route setup like this so
134:01 - while that was fun to play around and
134:03 - get some practice under our belts let's
134:05 - go ahead and undo everything we just did
134:07 - honestly that's a really great part
134:09 - about practicing especially in an
134:11 - environment like we have here on scrimba
134:12 - you can mess with the code and maybe
134:14 - even get something completely completely
134:16 - wrong and it's not going to break
134:17 - anything if you're anything like me I
134:19 - suffer from some severe perfectionism
134:21 - sometimes and it can be really
134:23 - liberating to realize that it's okay
134:25 - when I'm just practicing I can mess
134:27 - everything up and then just go back to
134:29 - where I was before I think that's pretty
134:31 - cool but now it's time for us to move
134:32 - forward
134:36 - we've talked quite a bit about nested
134:38 - routes so let's pause for a minute on
134:40 - the curriculum and let's go over a quick
134:42 - quiz dealing with nested routes just
134:44 - like before I do actually want you to
134:46 - click into the editor here and type down
134:48 - your actual answers to this quiz and
134:50 - again of course I'm not going to give
134:52 - you any kind of grade or anything like
134:53 - that the purpose is to help you reflect
134:55 - on what we just talked about and
134:57 - hopefully wake you up a little bit just
134:59 - in case you've been in a bit of a dream
135:01 - state I know sometimes when I'm watching
135:03 - a course I will tune out a little bit
135:05 - and I'm hoping this will help combat
135:07 - that so pause now answer the questions
135:09 - in this quiz and then we'll go through
135:10 - it together
135:17 - okay what is the primary reason that we
135:19 - would ever want to use a nested route we
135:21 - saw two possible reasons but one of them
135:24 - is much preferable or rather one of them
135:26 - is much more important than the other
135:27 - one and that is whenever we want to use
135:29 - some kind of shared user interface
135:31 - amongst multiple different routes so
135:34 - I'll type that down for a reference
135:36 - if you have a larger app and there are a
135:39 - lot of nested routes that are all
135:41 - sharing the same name in its path I
135:43 - suppose there could be an argument made
135:45 - that using a nested route could help
135:47 - avoid some of that more often than not
135:49 - we'll focus on this primary reason which
135:51 - is when we want to share user interface
135:53 - between the routes so what is the layout
135:55 - route well a layout route is the actual
135:57 - route that hosts or contains the shared
136:00 - user interface portion of the nested
136:03 - routes so its job isn't to display the
136:06 - primary content from the nested routes
136:09 - or the routes from which you're trying
136:10 - to display content its primary job is to
136:13 - display just the shared portion that you
136:15 - don't want changing when you go from one
136:17 - nested route to another nested route
136:20 - as a segue into the next question
136:22 - another important aspect of a layout
136:25 - route is that it will use an outlet
136:28 - component
136:29 - I'm not going to go too much more into
136:31 - detail about that in this question
136:33 - because that is what the next question
136:35 - is so what does the outlet component do
136:37 - and when do you use it well to answer
136:39 - the when do you use it part first you
136:41 - use it inside of some kind of layout
136:44 - route where that route is the parent to
136:47 - some nested routes so maybe even more
136:49 - specifically rather than referring to
136:51 - the term layout route we would say that
136:53 - we use it anytime we have a parent route
136:57 - that's I guess by definition wrapping
137:01 - children routes and what does the outlet
137:03 - component do well it's an outlet or a
137:07 - placeholder that represents the place in
137:09 - your parent route where the matching
137:11 - child route will render its contents so
137:14 - the parent route will oftentimes have
137:16 - the shared user interface like we talked
137:18 - about with a layout route so that parent
137:20 - route element will contain the contents
137:23 - that you want shared across every child
137:25 - route and then the outlet is sort of
137:27 - like the concept of children if you have
137:29 - you compound components in react before
137:31 - where it's a placeholder where the
137:33 - children route elements will render I
137:35 - think I just said the same thing two
137:36 - times so hopefully it's starting to sink
137:38 - in let me write up a summary
137:41 - this is worded a little bit differently
137:42 - but it renders the matching child routes
137:44 - element prop and we'll say prop given in
137:48 - its wrap definition okay so then what is
137:51 - an index route well an index route is a
137:54 - child route that will match the path of
137:57 - the parent route if the parent route has
137:59 - a path defined that definition might be
138:02 - something you have to really think about
138:03 - a lot but I promise the more you use it
138:05 - the more it'll make sense but remember
138:07 - we might have a layout route as a parent
138:09 - which is containing any shared user
138:12 - interface you want amongst all the
138:13 - children routes but you might also want
138:15 - another element Beyond just the layout
138:18 - component to be rendered when the path
138:20 - of the parent route is matching or is
138:22 - rendered so a good way to think of an
138:24 - index route is like the default element
138:27 - that should render in the parents Outlet
138:29 - when the path matches the parent and
138:31 - nothing else I think that's a good one
138:33 - that we could write down
138:35 - I don't have the slides for the van Life
138:37 - app right now but a good example of this
138:39 - is how on our host page we have the
138:41 - route host and we want it to display
138:44 - both the little navigation bar for just
138:47 - the hosts that navigates us between the
138:49 - dashboard reviews Vans and income but we
138:52 - also want to display all of the
138:53 - information from the dashboard we could
138:56 - have made the dashboard display at slash
138:58 - host slash dashboard but just to keep
139:00 - things simple we wanted slash host to
139:02 - display both the shared user interface
139:04 - of that little secondary navigation bar
139:06 - but also all of the information from the
139:08 - dashboard okay that wraps up this quiz
139:11 - feel free to go back and review some of
139:13 - these answers if you'd like you can of
139:14 - course go back and re-answer them from
139:16 - scratch might be a good way to really
139:19 - help it sink in and as always when
139:21 - you're ready we'll keep moving forward
139:22 - with our van Life app
139:27 - this challenge is a bit off the beaten
139:30 - path for what we've just been working on
139:32 - but I wanted to put a little bit of
139:34 - space between when we added the header
139:36 - from before and now what your challenge
139:38 - is to add the footer that's just a way
139:40 - to test yourself and your abilities from
139:41 - what we learned prior so your challenge
139:43 - is to add the footer to the site I've
139:46 - even given you the markup here so you
139:48 - can use that in a new footer component
139:50 - that you create in the components folder
139:52 - and mostly I'm wanting to test your
139:54 - ability to see if you know where the
139:55 - footer would be added so I don't care
139:57 - too much about you getting the styling
139:59 - just right however you'll be the best
140:01 - judge for your abilities in CSS if it's
140:03 - been a little while you're feeling Rusty
140:05 - or you just want a little extra practice
140:07 - you're more than welcome to add the
140:09 - styled footer you can click on any of
140:11 - these multiple screenshots to take you
140:13 - to the figma design file for that if you
140:15 - wanted to get the details on it but
140:17 - otherwise I will just be handling the
140:19 - styling behind the scenes and mostly
140:21 - what I'm looking for is that on your app
140:23 - any page you go to will have the footer
140:25 - just tacked to the bottom of the page so
140:28 - if you're not going to be doing The
140:29 - Styling it will just appear maybe on
140:32 - this really short page like this right
140:33 - here below dashboard goes here on a
140:35 - longer page it would show up at the
140:37 - bottom you'd have to scroll down to see
140:39 - it if you are working on the styling
140:40 - then the idea is that the footer will
140:42 - always be at the bottom of the content
140:43 - even if you have to scroll to see the
140:46 - bottom then you would have an extra
140:47 - section where the footer sits if it's a
140:49 - small section like this then the footer
140:51 - would still be at the bottom of the page
140:52 - okay I think that should all make sense
140:54 - pause now and add the footer to our site
141:03 - okay you might remember that the layout
141:05 - component is where we are including our
141:07 - header and because this route that's
141:09 - using the layout component is wrapping
141:12 - every single route in our route
141:14 - definitions here inside of our router
141:16 - that means that the header is going to
141:18 - show up on every single page and since
141:20 - that's what we want to do with the
141:21 - footer that's what we're going to do
141:23 - we're going to put the footer inside of
141:25 - our layout route here or rather our
141:27 - layout component so below our Outlet
141:29 - remember the outlet represents whatever
141:31 - content will go below the header we're
141:34 - going to say we also want a footer in
141:37 - here and that's going to be at the
141:38 - bottom of the outlet to import our
141:40 - footer even though we don't have it yet
141:42 - created
141:43 - footer
141:45 - we'll hit save okay unknown error that's
141:48 - because footer is undefined so let's go
141:50 - ahead and create footer.jsx and we'll
141:53 - set this up like normal
141:57 - and fortunately for you I was so kind as
142:00 - to just give you the markup that you
142:02 - need to include let's hit save and great
142:05 - there's our footer as basic as it is and
142:08 - it should be showing up at the bottom of
142:10 - every page there we go like I said I'm
142:13 - going to handle the styling for you so
142:15 - I'll use the magic snap of my fingers
142:17 - and there we are so we can see that if
142:20 - we go to a shorter page here we have our
142:23 - van life footer down at the bottom the
142:25 - main point isn't about the CSS the main
142:27 - point is about this layout file you can
142:29 - see I've made a few changes here to make
142:31 - it so that everything laid out correctly
142:32 - great work hopefully that wasn't too
142:35 - much of a challenge I think the CSS was
142:37 - a lot harder than actually getting the
142:39 - footer to show up on every page and
142:41 - hopefully that was the same case for you
142:42 - okay it's time for us to jump back into
142:44 - some new material so let's do that next
142:49 - let's bring things back to a much
142:51 - simpler time than the more complicated
142:54 - app that we've been working on this is
142:55 - actually the current default react and
142:58 - react router scrim that scrimba produces
143:00 - when you tell it to create a new scrim
143:02 - with react router I've made a couple
143:03 - styling changes but that's about it
143:05 - currently I have it set up so that when
143:07 - you hover over one of these links it
143:09 - makes the link bold and underlines it
143:11 - this is actually going to be pretty
143:12 - similar to what we do in the van Life
143:14 - app however navigating around there
143:17 - really isn't any visual feedback as to
143:19 - where I am other than what's actually on
143:21 - the URL bar and of course the actual
143:22 - content on the page a really common
143:24 - practice is to have the navigation bar
143:27 - highlight the item that represents the
143:29 - page that we're currently on so if I
143:31 - click about and hover off of it maybe I
143:34 - want to keep this hover style to be
143:36 - always applied to this link here
143:38 - fortunately react router makes this
143:40 - fairly easy and it uses something called
143:42 - render props which if you're taking this
143:44 - course as part of the full Advanced
143:46 - react course you have already learned
143:48 - about so let's see how the this is done
143:50 - I'm going to replace the link import
143:52 - with something called nav link nav link
143:55 - is basically the same as link except the
143:58 - style prop and the class name prop can
144:01 - both take a function as its value let me
144:04 - show you what I mean first of all I'm
144:05 - going to change link to nav link
144:07 - everywhere and of course I have to do
144:09 - that here as well and as it stands I can
144:12 - hit save everything will work exactly
144:14 - the same as it was before and it's of
144:16 - course not working the way that we want
144:18 - it to yet where it keeps some visual
144:19 - feedback about what page we're currently
144:21 - on but that's where the difference comes
144:23 - with nav link let me actually put each
144:25 - one of these on their own lines okay
144:27 - this might look like Overkill since it's
144:29 - got so few characters in each one
144:31 - spreading them across five different
144:32 - lines is a little bit crazy but we're
144:34 - going to add to this this will help make
144:36 - it look a little more visually distinct
144:38 - from one another let's start with this
144:40 - slash about link here as I mentioned the
144:42 - nav link can take a regular class name
144:44 - just like you might expect and I could
144:46 - give this a string value like I don't
144:48 - know my link then I can save that I can
144:51 - go into my CSS I can Target my Dash link
144:54 - and I can maybe say the color is red of
144:57 - course that's going to add that class
144:58 - name no matter what route I'm currently
145:00 - on you'll see I'm at the slash contact
145:02 - route but just like we would expect in
145:05 - regular CSS this is styling my about
145:07 - text here my about link as read well
145:10 - with nav link we can do this
145:12 - programmatically let's go over to where
145:15 - we're using our nav link and instead of
145:17 - providing a string as my class name nav
145:20 - link allows us to pass a function
145:22 - because I'm going into JavaScript I need
145:25 - to use my curly braces and then I can
145:27 - provide a function and whatever that
145:29 - function returns will be the class name
145:32 - that gets applied to my nav link the
145:34 - reason this is beneficial is because
145:35 - react router will pass this function an
145:37 - object and that object will have a
145:40 - property called is active so right in
145:42 - line here I'm just going to destructure
145:44 - it this looks a little bit crazy with
145:45 - the curly braces parentheses curly
145:47 - braces but just know this is getting me
145:50 - into JavaScript this is my function and
145:52 - it's an arrow function so it's just
145:54 - parentheses Arrow curly braces and then
145:56 - inside of that function parameter I'm
145:58 - immediately destructuring it I guess I
146:00 - could say something like object and then
146:02 - I would have to use the object dot
146:04 - syntax in order to access the property
146:06 - in this case I'm just going to
146:07 - destructure it and the property that I
146:09 - care about in this object is called is
146:11 - active the is active property will be a
146:15 - Boolean and it describes whether or not
146:17 - this route the slash about route is the
146:20 - current active route so this is nice
146:22 - because I can use it to determine what
146:24 - my class name should be so inside my
146:27 - function I'm just going to use an
146:28 - implicit return so instead of using
146:30 - curly braces and then having to use the
146:32 - return keyword I'm going to implicitly
146:34 - return it's only that last curly brace
146:36 - there and we're going to say if is
146:38 - active is true so it's a Boolean I'll
146:41 - just say if is active then I want it to
146:44 - be the class my link but otherwise we'll
146:47 - just have an empty class or an empty D
146:49 - string representing the class we might
146:51 - also be able to do something like null
146:53 - let's see how this works so I'll hit
146:55 - save okay we're on the slash contact
146:57 - route remember we've only put this class
146:59 - name on the about link so when I go to
147:03 - about it turns red and it stays red
147:05 - awesome so it's not just on Hover right
147:08 - here this hover CSS rule is making it a
147:11 - font weight bold and a text decoration
147:13 - of underline but the my link class is
147:16 - what's making it actually red so I will
147:19 - make a copy of this and move it up to my
147:22 - home nav link and then we'll do the same
147:24 - down to
147:26 - contact
147:27 - and I want you to think for a second
147:29 - when I hit save what is going to change
147:31 - on our page
147:34 - well we're on the slash contact route
147:36 - and we just added this active style
147:39 - class name to the link that is for slash
147:41 - contact so when I hit save it should
147:43 - turn red hopefully perfect okay so now
147:47 - everything seems to be working you might
147:51 - remember I mentioned that nav link
147:52 - allows us to either use class name or
147:54 - the inline style prop and that is
147:57 - allowed to be a value of a function so
148:00 - if I didn't want to define a separate
148:02 - style in my CSS I could put an inline
148:05 - style directly here let's actually
148:07 - combine our hover State and our selected
148:10 - or our active State into one set of
148:12 - styles so inside my layout I'm just
148:14 - going to create a Styles object we'll
148:16 - say this is Maybe
148:18 - active Style
148:21 - and we will have our font weight of bold
148:27 - our text decoration of underline
148:31 - and we'll say our color
148:34 - is red
148:36 - now the only thing left we have to do is
148:38 - to actually use this active style and we
148:41 - will just take exactly what we had with
148:43 - our class name but instead of applying
148:46 - the last name of the string my link we
148:49 - will include our style of active style
148:51 - so we'll just say if it's active then
148:54 - the style should be this object of
148:56 - active style and otherwise well I think
148:59 - we can just keep note let's get rid of
149:01 - our class name and I will just copy
149:04 - these down here and clean up our class
149:06 - names there
149:07 - and this should have the same effect
149:09 - although now our active style includes
149:11 - the underline and the Bold so it'll keep
149:14 - it kind of the way that it is on Hover
149:16 - State except our hover state is not red
149:17 - so we would have to go over here and say
149:21 - that the
149:23 - color is red we can get rid of this
149:25 - style here well I'll leave it there for
149:27 - educational purposes I guess if you're
149:29 - looking through this later okay so hit
149:31 - save now the hover state is the same as
149:34 - the active State and when we click over
149:36 - to home that becomes the active State
149:38 - there awesome
149:40 - whether you use the nav link style prop
149:42 - or the class name prop is completely up
149:44 - to you if you're working in a team there
149:46 - will probably be some kind of standard
149:48 - or Norm that you should be following so
149:50 - just stick to whatever makes the most
149:52 - sense for that project and that team
149:55 - okay now that we've got the basic idea
149:57 - of nav link down we're going to back
149:59 - into the van life project and apply it
150:01 - over there
150:05 - let's apply what we just learned about
150:07 - the nav link element to our van Life app
150:10 - we have a few different places
150:11 - throughout our app because we have
150:12 - multiple navigation bars in these nested
150:15 - routes so we're going to work on those
150:17 - one at a time and there's going to be an
150:19 - extra thing or two that we learn along
150:20 - the way to start we'll do this easiest
150:22 - one and that is for us to style the main
150:24 - navigation header up here I've given you
150:27 - the CSS rules that you should apply to
150:30 - the link if that's the currently active
150:32 - route that the application is on and I
150:34 - made a little note too that we don't
150:35 - need to style this link that goes to the
150:37 - home page mostly because that's kind of
150:39 - our logo right now in fact I should
150:41 - probably get rid of this underline
150:42 - that's happening so only worry about
150:44 - these three links here don't worry about
150:46 - this link here with that said make sure
150:48 - you read through the challenge I think
150:49 - you should have everything that you need
150:51 - to know to complete this challenge so
150:53 - pause now and work on this challenge
151:00 - okay well we know that we need to change
151:03 - our links to nav links I do want to keep
151:05 - this link here so I'm not just going to
151:07 - change my import but instead I will also
151:10 - bring in nav link and then I will change
151:13 - all of these to navlink as it stands
151:16 - everything should work exactly the same
151:18 - there's nothing different about nav Link
151:20 - in its functionality but it does add the
151:23 - capability of adding that active class
151:25 - or the active style this is going to get
151:27 - a bit long vertically so I'm going to
151:29 - separate things onto their own lines and
151:32 - since these are going to be repeating
151:34 - themselves quite a bit I'm just going to
151:36 - keep my three cursors up here and as it
151:38 - mentions you could either use inline
151:39 - Styles or you could use a class name
151:41 - maybe just for the sake of seeing both
151:44 - ways I will start with a class name and
151:47 - the thing that's special about the nav
151:49 - link component is that I can provide not
151:51 - just a string as my class name but I can
151:54 - pass a function this is an example of
151:56 - nav link using a render props pattern
151:58 - where we pass a function and when that
152:00 - function gets called by the navalink
152:02 - component it's going to call it with an
152:05 - is active property on an object so it's
152:08 - going to call it with an object there's
152:10 - also an is loading property on this
152:12 - object but we're destructuring it to
152:14 - just make use of the is active property
152:17 - on that object and that way we know that
152:19 - we can check if is active is true then I
152:23 - want to provide maybe we'll call it
152:26 - active link will be the class name we
152:29 - haven't created that yet but we'll get
152:30 - there and otherwise I don't know we
152:32 - could say null or maybe empty string is
152:34 - better I'm honestly not sure last but
152:36 - not least let's go actually let's copy
152:38 - these Styles here and we'll go over to
152:40 - our CSS and actually maybe closer to the
152:44 - top is where we'll Define this here
152:46 - we're accessing some header anchors
152:48 - let's just style all anchors that have a
152:51 - class of active link
152:55 - we'll give it those CSS Styles let's get
152:57 - rid of these comment
153:00 - Stars here and I need to make sure let's
153:03 - see up in the header I hit save
153:05 - and okay well host is highlighted that's
153:08 - good news I click this and about is
153:10 - highlighted Vans is working and this one
153:13 - is not of course because we left it as a
153:15 - link this is really cool because without
153:17 - a whole lot of extra knowledge under our
153:19 - belts just understanding this kind of
153:21 - render prop pattern for a class name we
153:23 - were able to add something to our app
153:25 - that really does help quite a bit with
153:27 - the user experience in understanding
153:29 - exactly visually where they are without
153:31 - having to look up in the navigation bar
153:33 - especially because these days the URL
153:36 - bar kind of obfuscates what path you're
153:38 - actually on in a lot of browsers awesome
153:41 - work hopefully you were able to complete
153:42 - that challenge if not feel free to go
153:45 - back and try it again next we're going
153:47 - to go to this nested navigation bar that
153:50 - we have inside of our host routes and
153:52 - we're going to do the same thing there's
153:53 - going to be a small caveat but we'll get
153:56 - to that in the next challenge
154:00 - okay we're gonna do more of the same
154:02 - thing inside of our nested host view
154:05 - dashboard here or navigation bar here we
154:08 - have our dashboard our income View and
154:10 - our reviews View and none of them are
154:13 - really giving us a good indication as to
154:15 - which one is currently selected so your
154:17 - challenge is to do the same thing here
154:18 - you should know that there's a little
154:20 - caveat I included it in this note here
154:21 - there's a little bug that you're going
154:23 - to run into it's nothing to worry about
154:25 - while you're doing the challenge but
154:26 - we'll be fixing it right after we do the
154:28 - challenge this time around I'd recommend
154:30 - using an inline style and instead of
154:32 - using a class name and I'll tell you why
154:34 - after we do the challenge but let's get
154:36 - your hands on the keyboard pause now and
154:38 - add the nav links to our host layout
154:40 - navigation bar here
154:47 - this time around we will not be keeping
154:49 - any of our links so I'm just going to
154:51 - replace my link import and I'll select
154:55 - all of these links while I'm at it we'll
154:57 - replace it with nav link that gets a
154:59 - severe amount of the way there then I'm
155:00 - going to because there's some repeated
155:02 - code and it's going to get a bit long
155:04 - I'm going to put some of this stuff on
155:06 - its own lines just like before
155:10 - and let's go up to this two line and on
155:13 - the next line we're going to add a style
155:15 - prop instead of a class name again the
155:18 - value is not going to be a string or
155:20 - anything like that or even just to play
155:22 - an object it's going to be a function
155:26 - and that function will return the object
155:28 - that we want and we will receive in that
155:31 - function an object with an is active
155:34 - property and we'll use that to determine
155:37 - if we want the active Styles we haven't
155:40 - created that yet but we will or if we
155:43 - don't want any additional Styles applied
155:45 - let's go ahead and create this active
155:47 - Styles just put it right here say const
155:51 - active Styles is an object and let's
155:54 - pull in these properties now because
155:56 - this is an object and not just a CSS
155:59 - string
156:00 - get rid of this stuff we're going to
156:03 - have some syntax errors if we try to
156:05 - just copy over the CSS so we will use
156:09 - the regular inline Styles in react where
156:12 - we need that to be camel cased these
156:14 - will need to be strings and instead of
156:16 - semicolons
156:18 - commas easy enough I think everything is
156:21 - set up let's hit save okay we can see
156:24 - the bug here we have both our dashboard
156:25 - and our reviews showing as the active
156:28 - links but we can see that for the most
156:30 - part it's working we have income and
156:32 - reviews working and then if we go to
156:33 - dashboard neither income nor reviews are
156:36 - highlighted or have the active styles on
156:38 - them so why exactly is it matching both
156:40 - the dashboard and the reviews well an
156:43 - important thing to understand about
156:44 - react router under the hood is that it
156:46 - is not just matching a single route it's
156:49 - matching multiple routes whenever you
156:51 - have a nested route like this what I
156:53 - mean by that is under the hood react
156:54 - router is matching actually I think
156:57 - three routes here the first one is the
156:59 - slash route if we go to our index here
157:02 - as you might remember we have this
157:03 - parent route that has the path of Slash
157:06 - and that one is getting matched in other
157:08 - words react router is considering this
157:10 - an active route and that's really good
157:13 - for us because we want it to render this
157:15 - layout secondly it's matching the host
157:18 - route and that's again really good
157:20 - because we want it to render our host
157:22 - layout route so when we're at slash host
157:25 - it's matching both the slash route and
157:29 - the host route and therefore the link
157:31 - for the slash host route is being
157:33 - matched or rather the nav link is
157:36 - showing as this being an active route
157:38 - now when we go to income at the
157:41 - dashboard it was matching two of these
157:43 - routes this slash and this host when
157:45 - we're at income it's matching three
157:46 - routes the Slash the host and the income
157:50 - route because one of those matches is
157:52 - the host route this one here our nav
157:54 - link is considering this host link as an
157:57 - active link and therefore we get the
157:59 - dashboard being highlighted even when we
158:02 - know that it's really the reviews page
158:03 - or the income page that is the active
158:06 - page we didn't see that problem up with
158:08 - our main navigation bar because we
158:11 - decided not to change our logo here to
158:14 - the nav link we kept it as the original
158:16 - link so we didn't run into this problem
158:18 - but I think we would have if we had
158:20 - changed this van life logo to a nav link
158:23 - because it is Slash and host is slash
158:26 - host
158:27 - anyway I think you get the idea how do
158:29 - we fix it well it's really easy there's
158:31 - a prop that we can add to our nav link
158:33 - that's just called end and what n does
158:36 - is it tells react router to end the
158:38 - matching here so if a more nested route
158:41 - matches it won't also match this link on
158:45 - this route so we hit save we'll go over
158:48 - to income and now dashboard is no longer
158:50 - highlighted this might look a little
158:52 - funny if you're not terribly familiar
158:53 - with it when you just provide a prop
158:55 - name and not set it equal to something
158:57 - it considers it a Boolean this would be
159:00 - equivalent to saying end equals true or
159:03 - at least it would be functionally
159:04 - equivalent in the documentation they
159:06 - just use end so I'm going to stick with
159:08 - the way that they do it in the react
159:10 - router docs awesome work let's keep
159:12 - moving forward
159:16 - the next thing we'll be working on is
159:17 - the host Vans page this is different
159:20 - than the Vans page that we have in the
159:22 - navbar the main navbar up here because
159:24 - that lists all the vans on our entire
159:26 - van life site going into the host kind
159:29 - of sub menu the Vans page here just is
159:32 - supposed to list the vans that this
159:33 - particular host is the owner of keep in
159:36 - mind we don't have any kind of
159:37 - authentication so this is all a bit
159:39 - contrived but the idea is the host would
159:41 - only see this host link when they're
159:44 - actually logged in if they're a host and
159:46 - they would only then be able to get to
159:48 - this dashboard and navigation for hosts
159:50 - but that's beside the point your
159:52 - challenge is to start off by creating
159:53 - these first two pages you'll see there's
159:56 - a van list page again the vans that this
159:58 - host owns clicking on one of those will
160:00 - send you to the van detail page and that
160:03 - van detail page has details pricing and
160:06 - photos we're not going to worry about
160:07 - pricing in photos we're actually not
160:09 - going to worry about any of the user
160:11 - interface that you see here because the
160:13 - challenge is to add those routes and to
160:15 - to add the Vans Link in the host navbar
160:18 - right now we just have dashboard income
160:20 - and reviews we need to add the Vans link
160:22 - there like it says just create a stubbed
160:24 - out version of the pages that return an
160:26 - H1 for now and don't worry about adding
160:29 - the navigation from host Vans to the
160:32 - host Vans detail in other words because
160:34 - you're just going to have an H1 that
160:36 - says host fans page here there isn't
160:38 - going to be a way to have a link to the
160:40 - individual Vans quite yet don't worry
160:42 - we'll get there soon as a part of this
160:44 - challenge you'll need to decide whether
160:45 - or not you'll be using nested routes and
160:47 - I want you to keep in mind what will or
160:49 - won't be shared between these two pages
160:51 - you can take a look here remember that
160:54 - the navigation bar is being provided by
160:56 - the host layout component not the host
160:59 - Vans component so I'll leave that up to
161:01 - you and I think that's all the primer
161:03 - you need so pause now and work on this
161:04 - challenge
161:11 - we already have the slash host slash
161:13 - host slash income and the slash host
161:15 - slash reviews pages so all we need to do
161:18 - is create another route here for slash
161:21 - host slash Vans when that page is
161:25 - reached let's create an element that
161:27 - we'll call maybe host fans and for now
161:30 - we'll just create that component in our
161:32 - host folder here we'll call it
161:34 - hostfans.jsx and we'll set it up like
161:36 - normal
161:41 - as I mentioned for now it's just going
161:43 - to return in H1 we'll have it say host
161:45 - Vans list page let's go ahead and import
161:48 - that over here so we don't get that
161:50 - broken and actually let's copy this
161:52 - reviews one and we'll just make the
161:54 - change there we'll say host bans and
161:58 - that's the same name we already chose
162:00 - for our element so well we can hit save
162:03 - we don't have any kind of navigation
162:04 - there but I should be able to change the
162:06 - url to say slash host slash Vans and
162:09 - we're at the host fans list page awesome
162:11 - let's add that to our host navigation
162:14 - before we worry about the host Vans ID
162:17 - page or the host fans detail page you
162:20 - could say this navigation bar if you
162:21 - remember is under host layout and I will
162:24 - simply well let's look at the design the
162:26 - design has dashboard income then Vans
162:29 - then reviews so let's just follow that
162:31 - that means I will copy this income and
162:34 - put one right below it we'll change it
162:36 - to slash host slash Vans and we'll
162:38 - change this to say vans
162:40 - save awesome now we can actually
162:43 - navigate between these Pages now I
162:45 - imagine the biggest struggle was trying
162:47 - to figure out if you should nest the
162:50 - Vans or rather host Vans slash ID as a
162:54 - child of this route or if it should just
162:56 - be a sibling route like this and if you
162:58 - remember our decision up here in not
163:01 - nesting was because they didn't share
163:03 - any user interface and that's actually
163:05 - the case here as well we look at these
163:08 - two there's nothing that's shared
163:10 - between these two that isn't already
163:11 - being shared from a layout route above
163:14 - in which case it would be a lot more
163:16 - trouble to try and Nest these so in my
163:18 - opinion I'm just going to say I'm going
163:20 - to have a van slash colon ID and that
163:24 - will be a sibling route to the Vance
163:25 - route and we will call this host van
163:28 - detail doesn't exist yet but we'll
163:31 - create it we'll copy this host fans and
163:34 - change it to host fan detail and then
163:37 - create this component in our host pages
163:40 - so will say hostfand detail.jsx
163:44 - import react from react and get
163:46 - everything else set up like normal
163:48 - all right let's hit save no errors
163:51 - that's good again we don't have a way to
163:53 - link over there quite yet so in the
163:55 - navigation bar I'm just going to say
163:56 - host van slash one
163:59 - and there we go host van detail page it
164:02 - was a little bit subtle between the two
164:03 - because this one says Vans list page and
164:06 - this one at slash one says Vans nope
164:09 - that didn't work slash one van detail
164:11 - page and That Just About Does it for the
164:15 - whole challenge yeah we finished
164:16 - everything here awesome let's clean this
164:18 - up all right this gives us a good start
164:20 - the next thing we'll be working on is
164:22 - getting these nested routes implemented
164:24 - as well so that's what we'll jump into
164:26 - next
164:30 - because we need a way to get from our
164:33 - van list page or rather our host van
164:35 - list page to the host Vin detail page we
164:39 - do need to build out this page here
164:41 - however that doesn't have a whole lot to
164:43 - do with react router so I'm making it an
164:46 - optional challenge for anyone who wants
164:48 - to really Flex their react skills and
164:50 - exercise what they've learned in react
164:52 - in general to build out this page to
164:55 - make that a little more possible I've
164:56 - added some endpoints to our server the
164:59 - slash host slash Vans endpoint
165:01 - specifically that will return only the
165:03 - vans that are owned by this specific
165:05 - host that we're pretending to be logged
165:07 - in as you can see that it's searching
165:09 - all the Vans where the host ID property
165:12 - is equal to one two three that's not
165:14 - something that used to exist but up here
165:16 - I've added a host ID to a number of
165:19 - these Vans some of them including one
165:21 - two three I think three of them have the
165:23 - host ID of one two three and the others
165:25 - have just random other host ideas that
165:27 - are not owned by the currently logged in
165:29 - host aircraft notes around currently
165:31 - logged in remember all of these requests
165:34 - are implied to start with Slash API so
165:36 - when you make the fetch request you'll
165:38 - make it to slash API host slash Vans
165:41 - what actually gets displayed will be
165:43 - here in the host fans list page again
165:45 - this is an optional challenge I'm not
165:48 - going to be walking through the actual
165:50 - creation of this because it's a fair
165:51 - amount of work but this is the time to
165:53 - pause if you do want to work on that
165:54 - optional challenge
166:00 - if you know anything about me you know I
166:02 - don't do this very often making these
166:04 - challenges optional so I'll nudge you
166:06 - once again if you are feeling a bit
166:07 - shaky on your react skills then once
166:10 - again I really implore you to go back
166:11 - and to do this optional challenge but
166:14 - otherwise I'm just going to pull out my
166:15 - magic wand to snap my fingers
166:18 - and just like that we have our vans list
166:20 - page built as I mentioned there were
166:22 - three that had the ID of this particular
166:25 - host or the host ID of one two three and
166:28 - that is these three vans that you see
166:29 - here we have not yet built out the
166:31 - detail page we're going to work on that
166:33 - next if you click it it does take us
166:35 - successfully to the host van detail page
166:37 - but of course there's nothing specific
166:39 - to this one band here a few key things
166:41 - to note is that when we're mapping over
166:44 - our list events we're creating a link to
166:46 - the host Vans slash colon ID and we make
166:50 - sure to dynamically fill in the ID of
166:53 - the currently looping over van or the
166:55 - van that we're currently looping over in
166:57 - our use effect you're seeing that we are
166:59 - creating our fetch request to slash API
167:02 - fans we're setting that into the van
167:05 - State and because we're initializing our
167:07 - state with an empty array we're checking
167:09 - if the van's length is greater than zero
167:12 - and if it is then we're displaying the
167:14 - van elements that we created above but
167:16 - otherwise we're just creating this
167:18 - loading element here now that I look at
167:20 - this this isn't going to be a problem
167:22 - but there could be a little bug where if
167:24 - the currently logged in host has no Vans
167:26 - it's just going to say loading forever
167:28 - so I've used kind of a cheater's method
167:30 - here of getting whether or not it's
167:32 - loading usually we would look for some
167:34 - kind of loading state but that's a topic
167:36 - for a completely different lesson okay
167:38 - if you did this challenge hopefully it
167:40 - wasn't too hard if you didn't do this
167:42 - challenge I know for a fact that it
167:43 - wasn't too hard for you but now we're
167:45 - primed to work on the detail page so
167:47 - that's what we'll be doing next
167:51 - this challenge marks the start of
167:53 - embarking on I think the most
167:55 - complicated part of this app so we're
167:57 - just going to take it one little step at
167:59 - a time that said most of the things that
168:01 - we'll be covering should be things that
168:02 - you already know we're going to add some
168:04 - new knowledge along the way but in the
168:06 - meantime most of this should be doable
168:08 - and if it is a really big struggle for
168:11 - you that's a good indication that it's
168:12 - time to go back and just to review some
168:14 - of the things that we've learned already
168:16 - the challenge here is to start building
168:18 - out the shared UI portion of the host
168:20 - van detail page so that's this section
168:23 - right here at the top and if you
168:25 - remember from let's see one of these
168:26 - past slides here these last three pages
168:29 - are really all we have left to build
168:31 - this one it's a little hard to see
168:32 - because it's so small but this one is
168:34 - the detail page that we're working on in
168:36 - this challenge or rather just this top
168:38 - portion and that top portion is what's
168:40 - going to remain constant through the
168:42 - host fans ID pricing and the host fans
168:44 - ID photos page as well let's go back
168:46 - here to a little bit better of a view
168:48 - hopefully it rings a bell that because
168:50 - this is going to be some shared user
168:53 - interface between those pages the
168:55 - pricing and the photos page and The
168:56 - Details page you'll remember that we
168:58 - will end up using a layout route for
169:00 - this So eventually we'll have an outlet
169:02 - that we need to use for this challenge
169:04 - don't really worry too much about that
169:05 - you'll make it so that this appears when
169:07 - you're on the what is it host Vans and
169:10 - then the ID of the van so building this
169:12 - page out is not the optional part of
169:14 - this challenge but there is an optional
169:16 - portion and that's to style it so that
169:18 - it looks just like this if you don't
169:20 - feel like you need to practice your CSS
169:22 - at this time then you can just get all
169:24 - of this information displaying on the
169:26 - page and then I'm going to handle the
169:27 - CSS part on my end we're going to fine
169:30 - tune how the data gets into this page
169:32 - but for now just make a request to slash
169:35 - API host slash Vans slash and then
169:38 - whatever the ID is in the URL so the ID
169:40 - of this van the server is hard coded
169:43 - just to only pull when the ID is equal
169:46 - to the ID you pass in and the host ID is
169:48 - one two three so that's really already
169:50 - handled for you this is obviously not
169:52 - exactly how it would work in the real
169:54 - world but it's close enough for our
169:56 - purposes in learning react router so
169:58 - again you will just be building this top
170:00 - portion don't worry about changing the
170:02 - routes we have in our index or anything
170:04 - to set up for this bottom portion that's
170:06 - what we'll be working on in the next
170:07 - challenge okay it's your turn to get
170:09 - your hands on the keyboard pause now and
170:11 - work on the challenge
170:13 - okay let's set up some state for holding
170:16 - the current van so we'll say current van
170:19 - and Set current van is react.use State
170:22 - and until that data comes in we could
170:25 - initialize it as null or I suppose we
170:27 - could initialize it as an empty object
170:29 - let's go ahead and do null for now then
170:30 - we will do a use effect which is where
170:33 - we will grab our data we'll set up the
170:36 - dependency array and we'll leave it
170:38 - empty for now just saying if this
170:40 - component ever loads then we want you to
170:42 - run this effect and we will send out our
170:45 - fetch request so this will be to let's
170:48 - see I'm going to use a template string
170:49 - because I know that I need a dynamic
170:51 - access to the ID on the current URL so
170:55 - that's going to be actually let me just
170:56 - copy this part right here okay and then
170:59 - I will use a template string to inject
171:01 - some JavaScript now I need to figure out
171:03 - what the current URL is and if you
171:06 - remember way back we can get that from
171:08 - the params so I need to import use
171:12 - params from react effect router Dom and
171:15 - then I can grab the params by calling
171:18 - use params and let's see in our index.js
171:21 - I think we've called Everything ID yep
171:23 - so whatever I guess you could call it
171:24 - variable name we put here if I said this
171:27 - were colon whatever then over in our
171:30 - host and detail page params would have a
171:32 - property called whatever so it'd be
171:34 - params.whatever that's too silly so
171:37 - let's take that back and this will be
171:39 - params.id or if I wanted to I could just
171:42 - destructure it when I pull it in and say
171:44 - I only care about the ID property so
171:46 - then we could just say ID here okay and
171:49 - then we will get the response and get
171:51 - the Json turned into a JavaScript object
171:54 - and then we will have access to the data
171:57 - and if you know me I'm going to console
171:59 - log this data before we get too far down
172:01 - this Rabbit Hole so let's hit save open
172:03 - up our console not Json parentheses we
172:07 - need res dot Json cool okay so we get an
172:10 - object with a Vans property and oh this
172:13 - is interesting thing I guess this is the
172:14 - way that the server is returning the
172:16 - data the Vans property is an array but
172:18 - because of the way that I wrote This
172:20 - Server endpoint it's always going to
172:23 - return only one item just because the
172:25 - IDS are unique and especially when you
172:28 - take into regard the host ID so in that
172:30 - case I guess I could just always console
172:33 - log let's say data oops at no that's
172:36 - zero dot Vans at the index of zero which
172:39 - would always be the first object because
172:42 - I just know that it's always going to be
172:44 - one object let's just see what that
172:45 - looks like okay so that is the van that
172:47 - we care about and hopefully you were
172:49 - able to figure that part out because I
172:51 - am the creator of this server and I'm
172:54 - just going to cheat so I'm just going to
172:55 - put my index of 0 on the server because
172:58 - to be frank I probably should have done
172:59 - that in the first place so let's take
173:01 - off the index of zero here because now
173:03 - data dot Vans oops nope that's going to
173:06 - be let's see it's going to be that dot
173:08 - Vans at the index of zero okay let's see
173:10 - if this even works this might not even
173:12 - work let's say the data uh nope that's
173:15 - not gonna work okay bear with me here
173:17 - I'm actually going to change this from
173:19 - dot where to something called find buy
173:21 - and then we'll take this out the find by
173:24 - Method allows me to pass in an object
173:26 - with a bunch of key value pairs that it
173:28 - will find and return the first instance
173:30 - in our quote unquote database that
173:33 - matches these parameters so let's go
173:36 - back to host van detail and now let's
173:38 - see what comes in okay cool that's
173:40 - pretty much what we wanted it's still
173:42 - got a Vans property so we'll just say
173:43 - dot Vans cool okay again because I
173:46 - hadn't made that change before you did
173:48 - the challenge this is I guess outside of
173:51 - the purview of what we did for the
173:52 - challenge this makes a little more sense
173:54 - to me though okay well we don't want to
173:56 - console log data.vans we want to set the
173:59 - current van to data.vans and then in our
174:02 - markup the challenge just says that we
174:05 - need to display all the data so let's
174:07 - just stuff it into a div for now and
174:09 - then I'm just going to paste in the CSS
174:11 - and the markup that I used in creating
174:14 - this myself to speed up our process here
174:16 - so let's get an image we'll set the
174:19 - source equal to currentvan dot image URL
174:23 - and I can already see that there's going
174:25 - to be a problem here because we're
174:27 - initializing our current van State as
174:29 - null and so null dot image URL are
174:32 - trying to access the image URL property
174:34 - on null is going to throw an error so
174:36 - again hit save and we'll see I cannot
174:38 - read properties of null a quick kind of
174:40 - Band-Aid for this would be to
174:42 - conditionally render everything or maybe
174:45 - even better is just to say if there
174:47 - isn't a current van then will early
174:50 - return and we'll say return H1 that just
174:53 - says loading like I mentioned before we
174:56 - probably would want a real loading state
174:58 - to include here instead of just assuming
175:01 - that if there isn't a current van it's
175:02 - because it's loading and not because
175:04 - there's some kind of network error or
175:06 - some other problem but we're taking a
175:07 - few happy path shortcuts here so this
175:09 - will work for now okay let's try this
175:11 - again loading and then we get this Mass
175:13 - of image okay we're going to fix that in
175:15 - fact I'll just throw a Band-Aid on it
175:16 - and say that the width is equal to I
175:19 - don't know 150. okay let's see what else
175:22 - it said display the van image name price
175:24 - and type so we should be able to just
175:26 - kind of throw those in we'll say current
175:28 - fan dot let's see is it name yeah there
175:31 - it is okay name and let's just stuff
175:34 - these into a paragraph for now current
175:36 - band.price and we'll say currentvan dot
175:39 - type okay it's obviously not the form
175:42 - factor that we want but that is a great
175:44 - start for us if you weren't able to get
175:47 - to this point then I would recommend
175:48 - pausing and going back reviewing what
175:51 - we've done here honestly everything
175:52 - we've done so far except for the use
175:54 - params should not really be too new to
175:56 - you in react this might be a good time
175:59 - to mention that there's kind of a shift
176:01 - away from using use effects to do your
176:03 - fetches these days there's other methods
176:06 - that we're actually going to cover a
176:08 - little bit later in this course and some
176:10 - new really cool react apis that are
176:12 - coming out in the near future that will
176:13 - make this a lot easier to write and to
176:16 - reason about and you know what because
176:18 - this has actually been a bit of a
176:20 - challenge already it's taken a fair
176:21 - amount of time I think this last portion
176:23 - what we'll do right here is actually
176:25 - going to be something we work on in the
176:27 - next challenge if you were able to do
176:29 - this little navigation bar then that's
176:31 - perfect that's really really good we're
176:33 - going to do that in the next challenge
176:35 - if again you already did it then you can
176:37 - skip doing that challenge and you can
176:39 - just watch me do it over there in that
176:40 - lesson okay great work hopefully that
176:42 - went okay and if not you know what to do
176:44 - let's move on
176:48 - Okay I lied before we get to doing this
176:51 - nested navigation bar we need to spend a
176:54 - minute to talk about relative links
176:56 - we've covered relative route paths for
176:58 - example here we have our main route
177:00 - which is the path of Slash which enables
177:03 - us to put all of its nested routes as
177:05 - just about instead of specifying slash
177:08 - about because its parent is Slash the
177:10 - slash is sort of assumed a more obvious
177:13 - version of this is when we come down to
177:15 - the host ones where we have the path
177:16 - just as income but this is not slash
177:19 - income it's slash host slash income
177:23 - these are relative paths because this is
177:25 - a nested route inside of its parent
177:28 - route it assumes a known path leading to
177:31 - all of the parents above it or rather
177:33 - it's assumed that when we say income
177:36 - here it's referring to the absolute path
177:38 - of Slash host slash income down here we
177:42 - had to specify Vans and not just colon
177:44 - ID because we did not Nest this route as
177:47 - a child of this route and therefore we
177:49 - need to be a little bit more explicit in
177:51 - the path leading up to it however it's
177:53 - still relative because the URL is not
177:56 - slash Vans slash ID it's slash host
177:59 - slash Vans slash ID so that brings me to
178:03 - what I actually wanted to talk about and
178:04 - that's over in our host layout when we
178:06 - created these nav links we created them
178:08 - as absolute paths we said that this path
178:11 - this nav link goes to slash host slash
178:14 - host slash income slash host slash Vans
178:17 - and so forth however the truth is we
178:18 - actually don't need to do this and
178:20 - that's because this host layout is
178:23 - getting rendered right here in this
178:25 - route and this route is already a child
178:28 - of the slash route because our element
178:30 - is part of the route for path of host
178:33 - the element can assume the path of host
178:36 - in all of its links so if I come back to
178:38 - my host layout element this one that's
178:40 - being rendered on the slash host route I
178:43 - can change these to just say income fans
178:47 - and reviews going to talk about this top
178:49 - one in just a second but let's go ahead
178:51 - and hit save and I can see that this is
178:54 - going to take me to well this is the one
178:57 - that we didn't change because that's our
178:58 - dashboard let's go to income okay the
179:00 - link is still working slash host slash
179:02 - income slash host slash fans slash host
179:04 - slash reviews and once again the reason
179:06 - that's working is because this host
179:08 - layout is rendered or nested inside of
179:11 - the slash host path this means that if
179:13 - we have links inside of the income
179:16 - component here we don't need to specify
179:18 - the whole path leading up to income
179:20 - slash host slash income in fact let's
179:23 - see that just for the sake of learning
179:24 - I'm going to import a link from react
179:28 - router Dom and let's say that we are
179:31 - rendering both an H1 and a link let's
179:34 - see what happens if we put I don't know
179:36 - just something here let's hit save we
179:39 - have our click me I want you to think
179:40 - for a second where is this route
179:42 - actually going to take me to in the URL
179:44 - again if we look at the route hierarchy
179:47 - we have this income is is nested inside
179:49 - of Slash also inside of host and it's
179:52 - already rendering on the income sub
179:55 - route so slash host slash income so if I
179:58 - just say that the link is going to take
180:00 - me to this string of something it's
180:02 - going to take me to slash host slash
180:04 - income something so that's the idea
180:07 - behind relative routes let's get rid of
180:09 - these changes okay and we'll come back
180:11 - to our index file actually let's come
180:14 - back to our host layout file so this is
180:17 - why all of these relative paths are
180:19 - working something that's pretty
180:21 - pertinent to what we're about to work on
180:23 - is how to handle this nav link here that
180:25 - takes us to the dashboard because our
180:27 - route is not slash host slash dashboard
180:30 - it's just slash host whereas these other
180:33 - ones the routes are actually nested as
180:35 - one layer deeper in the URL we need to
180:38 - do something different well I guess we
180:39 - don't need to I could just leave this as
180:41 - slash host but one of the benefits of
180:43 - using relative routes and relative links
180:46 - is if for whatever reason I decide
180:48 - decided I wanted to change what this was
180:50 - called maybe I don't want it to say host
180:52 - I want it to say admin let me navigate
180:55 - to maybe the about page and then hit
180:57 - save I'll click on host well actually
180:59 - that one we didn't fix let me fix that
181:01 - in the header this one is oh these are
181:04 - also using absolute paths so let's say
181:06 - this is going to admin and this will say
181:09 - admin okay so I click admin and now when
181:12 - I click income my link isn't broken
181:14 - because it's a relative path I only had
181:16 - to make a couple small changes I didn't
181:18 - have to make a change on every link that
181:21 - leads to slash admin slash something
181:23 - else however my dashboard is still
181:25 - broken because it's linked to an
181:28 - absolute path of Slash host so let's
181:30 - undo these changes because I don't want
181:32 - to name it slash admin and we'll come
181:34 - back to our host layout these nav links
181:37 - are all fine so what exactly should we
181:38 - put here when basically what we want to
181:41 - say is I want to link to this route the
181:44 - route you're currently on just slash
181:46 - host well if you've had a chance to
181:48 - practice using your terminal on your
181:50 - computer if you want to reference the
181:53 - prior directory you can use something
181:55 - like dot dot it's a shorthand for The
181:57 - Parent Directory of the directory you're
181:59 - currently in using your terminal for
182:01 - example if I wanted to change directory
182:03 - to the previous directory I would say CD
182:05 - space and then dot dot which represents
182:07 - the Parent Directory well in a Unix
182:09 - terminal you also can say CD space Dot
182:12 - and that represents the current
182:14 - directory CD space dot does absolutely
182:16 - nothing it changes directory into your
182:18 - current directory but that little
182:20 - history can hopefully help you
182:21 - understand what I'm about to teach which
182:23 - is if we just want to link to the route
182:26 - that we're currently inside of I can
182:28 - just say dot this isn't by mistake or
182:30 - really has anything to do with the
182:32 - directory hierarchy it's just something
182:33 - that react router has implemented into
182:35 - the react router package and as a sneak
182:38 - peek very soon we're going to see when
182:40 - we might want to use dot dot but that's
182:42 - for the next lesson so for now we're
182:44 - going to say I want the dashboard to
182:45 - link me to the current route where the
182:48 - host layout out is being rendered and
182:49 - again a host layout is being rendered on
182:52 - the path of Slash host so let's go ahead
182:55 - and hit refresh I can hit income that
182:58 - takes me to host income let me come back
183:00 - out here to the host layout so income is
183:03 - a relative path Vans is a relative path
183:05 - reviews is a relative path and now
183:07 - dashboard is a relative path to slash
183:09 - host if I were to go back and change
183:11 - host to say admin I would really just
183:13 - have to change it here in this top
183:15 - navigation and in the path right here
183:19 - other than that all of my relative links
183:21 - would still be working hopefully you can
183:22 - see that there's a benefit in doing that
183:24 - and I've spent a lot longer talking
183:25 - about this than I originally planned but
183:27 - hopefully that gives us a quick primer
183:29 - into the next thing we're going to work
183:30 - on which I know I said would be this
183:32 - navigation bar but it's actually going
183:34 - to be this back to all Vans button I
183:36 - purposefully didn't teach this when we
183:37 - were doing these Vans list here because
183:40 - there's a little bit more we need to
183:41 - learn but when it comes to these fans
183:43 - right here adding a little back to all
183:45 - Vans button is something we now are
183:47 - capable of doing so buckle up that's
183:49 - where we're going next
183:53 - okay I even did some heavy lifting here
183:55 - and added this link for you and of
183:57 - course you can tell that I added all the
183:59 - styling to our van list detail page at
184:02 - least the beginnings of it so we have
184:03 - this back to all Vans link and this is
184:06 - supposed to take us back to this page
184:08 - slash host slash fans so let me click on
184:11 - this we have a quick mini challenge for
184:13 - you I want you to change the two so that
184:15 - it goes back to all Vans a major hint is
184:19 - how we just talked about the difference
184:20 - between saying CD space Dot and CD space
184:23 - dot dot in a Unix terminal or in a
184:26 - terminal and we mentioned how dot
184:28 - represents the current route when we're
184:30 - talking about react router relative
184:31 - links but before you get started a major
184:34 - caveat on this is that it's probably not
184:37 - going to do what you think it'll do but
184:38 - I do want you to give it a shot see if
184:40 - you can figure out what I want you to
184:42 - put here and then we're gonna learn one
184:43 - little extra tweak so that it will fix
184:46 - the problem that you're about to see
184:47 - okay pause now and work on this mini
184:49 - challenge
184:51 - hopefully your thought was to say well
184:53 - if I don't want the current route in
184:55 - fact let's see what happens I'll hit
184:56 - save I'll click back to all Vans and
184:58 - well nothing changes and that's because
185:00 - dot means the current route which is
185:02 - slash host slash fan slash one so
185:04 - theoretically I should be able to say
185:06 - well let's go back a route dot dot I'll
185:09 - hit save and what happens is well it
185:12 - takes us too far back we go to slash
185:14 - host we want it to be at slash host
185:16 - slash Vans this page here so why did it
185:18 - do that well something that I mentioned
185:20 - but didn't really dive deep into is the
185:23 - fact that when we're using relative
185:24 - links what it's relative to is the route
185:28 - hierarchy here it's not necessarily
185:30 - relative to the path that we currently
185:33 - see in the URL why does that matter well
185:35 - when we're here in this route slash fan
185:38 - slash ID or in this case slash band
185:41 - slash one sorry slash host slash van one
185:44 - to be more specific when I use the dot
185:47 - dot relative path the default in react
185:49 - router is not to go back exactly exactly
185:51 - one route which would be slash Vans but
185:54 - it's to go up one level into the parent
185:56 - route and our parent route is host or
185:59 - slash host which is why currently
186:00 - clicking back to all Vans takes us to
186:03 - slash host remember we realized that the
186:06 - Vans list page and the Vans detail page
186:08 - here didn't share any user interface and
186:11 - so we chose not to have a nested route
186:14 - for Vans like we might have otherwise in
186:17 - fact just for fun I'm going to show you
186:18 - what it might look like and we'll see
186:20 - how it's a little bit ridiculous if we
186:22 - were to Nest this route so I'll create a
186:26 - closing element rather for the route
186:28 - we'll stick our vans colon ID in there
186:31 - and now because we want this host Vans
186:34 - to show up on the index of Slash fans
186:36 - we'll have to create another route
186:38 - that's going to be actually you know
186:40 - what let me put some space around this
186:41 - just so we can see it a little easier
186:42 - this one is going to be the index in
186:46 - other words the host Vans is what we
186:49 - want to show up in the outlet of the
186:52 - parent route here well we don't have an
186:54 - outlet in host fans so we would need to
186:56 - just render an outlet let's bring in
186:59 - outlet from react router Dom now because
187:02 - I'm nested I don't need to specify Vans
187:04 - slash colon ID in fact it would be wrong
187:07 - to specify van colonid because that
187:09 - would mean slash host slash Vans slash
187:12 - Vans slash ID so let's get rid of the
187:15 - van slash part okay that was a bit of
187:17 - work and we have this kind of ridiculous
187:19 - just rendering an outlet in the parent
187:21 - here but let's hit save everything seems
187:23 - to be working and now that the parent of
187:27 - my slash ID route is slash fans the dot
187:30 - dot should work let's cross our fingers
187:32 - we'll hit back to all Vans and sure
187:34 - enough that takes us back there now the
187:36 - reason I was mentioning this is a bit
187:37 - ridiculous is because this is a lot of
187:39 - work just to get that back button to
187:41 - work so I'm going to undo all of that go
187:43 - back to the way we were we have no
187:45 - shared user interface between these two
187:47 - so there's not a really compelling
187:49 - reason to have a nested route scenario
187:51 - like we just saw so how do we fix this
187:53 - problem well react router has us covered
187:56 - if we go to the host layout no the host
187:58 - van detail our link one option for a
188:02 - prop that we can pass is something
188:03 - called relative and what we can tell it
188:06 - is to be relative to the path not the
188:10 - routes this means that when we say we're
188:12 - going back a route we mean that we're
188:15 - going back one level in our routing
188:17 - structure in our path structure not up a
188:21 - level in our routing hierarchy with this
188:24 - setup react router knows that there's a
188:26 - slash here and it knows that we're just
188:27 - going to go back one little path segment
188:30 - which would be this host Vans path so
188:33 - let me put my money where my mouth is
188:34 - let's hit save back to all Vans now
188:36 - successfully takes us just back to the
188:39 - parent path not the parent route that
188:42 - might have been a lot to take in I know
188:43 - we went kind of quickly if you need to
188:45 - watch this again that's okay
188:46 - understanding this relative path thing
188:48 - took me a while to fully a grasp but I
188:50 - am grateful that react router introduced
188:53 - this relative equals path prop because
188:56 - that wasn't always there and it really
188:58 - helps us out in scenarios like this okay
189:00 - I promise we're done talking about
189:02 - relative links let's get back to what we
189:04 - were working on which is getting this
189:05 - navigation bar working
189:10 - all right this challenge is going to be
189:12 - a little bit of a doozy so I've tried to
189:15 - give you the hints and the preparation
189:16 - you might need just to make this a
189:19 - little bit easier for you that being
189:20 - said just because it's a more difficult
189:22 - challenge it doesn't mean that you're
189:24 - not prepared for it assuming you've been
189:25 - following along and doing all the
189:27 - challenges you should have all the tools
189:29 - and knowledge you need to complete this
189:30 - challenge so what exactly are we doing
189:32 - we're not yet working on the navigation
189:34 - bar instead we're going to create a
189:36 - route or the routes that we need for
189:39 - these views underneath what we've
189:41 - already created to display so this view
189:43 - over here shows you the three different
189:45 - views that we're creating side by side
189:47 - up at top you can see the three
189:49 - different routes that we're expecting to
189:51 - use in order to see these views and so
189:53 - that's what your challenge is it's to
189:55 - set up the routes that you need here in
189:57 - our index file that are necessary so
189:59 - that we can access the host Vans ID
190:01 - pricing and the host fans ID photos
190:04 - views part of this challenge will be for
190:07 - you to add some stubbed out components
190:09 - in separate files I've already created
190:11 - these files for you we have the host van
190:13 - info the host van photos and the host
190:15 - van pricing components they're just
190:17 - empty files right now so that's part of
190:20 - your challenge just to fill those out
190:21 - but they can just be subbed out like I
190:23 - said you just maybe add an H2 that says
190:25 - pricing view goes here or whatever my
190:27 - first hint that I'll give you is that
190:28 - you need to use a special tool from
190:30 - react router so that we can keep all of
190:32 - this top info that you see over here in
190:35 - view while we navigate between the
190:37 - different sub views or sub routes that
190:40 - we are going to be creating this is
190:42 - going to require some slight changes in
190:44 - the host van detail page and I've tried
190:46 - to indicate where that will be exactly
190:48 - in that component now since we don't
190:50 - have the navbar yet you can test them
190:52 - manually by navigating in the URL bar by
190:55 - actually just typing in the path that
190:57 - you want to go to and actually as you
190:59 - might have noticed the slash host van ID
191:03 - view or path will display the
191:06 - information down here at the bottom
191:07 - currently we're not doing that but we
191:09 - are at that path so you should be able
191:10 - to start out by just adding what you
191:13 - need in order to display the information
191:14 - or more importantly for this challenge
191:16 - just a stubbed out version of that
191:18 - because this is a little bit more of an
191:21 - involved challenge I did include a
191:22 - hints.md file I'm not going to click on
191:24 - it here because it'll give away the
191:26 - first hint try not to go there if you
191:27 - don't need it but if you do start
191:29 - feeling stuck then feel free to go to
191:31 - the hints I have two hints that are
191:32 - separated by a lot of space so you have
191:34 - to scroll to see hint number two okay
191:36 - Lean On Your Instinct remember what
191:38 - you've learned rely on the community if
191:41 - you're really feeling stuck turn to the
191:42 - hints if you need them but I believe in
191:44 - you you've got this pause now and work
191:46 - on this challenge
191:49 - okay well the first thing I'm going to
191:51 - do is take this route here and turn it
191:54 - into a parent route to other routes
191:56 - currently it's self-closing let's go
191:58 - ahead and not make it self-closing and
192:00 - we will add a closing route element or
192:03 - tag here now the reason I'm doing that
192:05 - here again is because this van ID or
192:09 - rather slash host slash van ID is going
192:12 - to essentially become a layout route for
192:14 - the children routes that I'm going to
192:16 - create we're starting to sort of
192:18 - conflate what we're actually referring
192:20 - to when we talk about a page because if
192:23 - you think about it we're not really
192:24 - creating new pages here per se we're
192:26 - just swapping out a small portion of our
192:29 - UI but for the time being we're calling
192:31 - it Pages maybe this is where a good
192:33 - refactor of our folder structure would
192:35 - make a lot of sense I'm not going to do
192:37 - that now because it's outside the scope
192:38 - of what this challenge is but by doing
192:40 - this I'm turning this element this host
192:42 - van detail element what we see here into
192:45 - sort of a layout route or a layout
192:47 - component and when I have a layout
192:49 - component where I have child routes that
192:51 - need to be displayed I need to use the
192:54 - outlet component so before we even work
192:56 - on creating these nested routes let's go
192:59 - over to the host then detail component
193:01 - and my changes are going to go here this
193:03 - is where I'm going to include an outlet
193:06 - component I need to make sure that I
193:08 - import that from react router Dom so
193:10 - we'll import the outlet I think hitting
193:13 - save should change nothing at this point
193:15 - now let's go back to our index and let's
193:18 - create our child route this one will be
193:20 - self-closing for the time being we're
193:22 - not going to have any more children
193:23 - nested which hopefully makes you a
193:25 - little bit happy about getting closer to
193:28 - the end here we're going to say that the
193:30 - path is equal to and actually you know
193:32 - what this is not going to have a path
193:34 - instead this is going to be the index
193:36 - route as I mentioned the slash host
193:38 - slash fan ID route should automatically
193:41 - and by default display this information
193:44 - so we're not saying it's slash host
193:46 - slash ID slash details or anything like
193:48 - like that it's just what will
193:50 - automatically be displayed on this route
193:52 - so that's what I would use an index
193:54 - we'll say the element is going to be
193:56 - well you know what instead of going down
193:58 - the whole path of creating the stubbed
194:01 - out version here and importing it let me
194:03 - just kind of skip that for just a second
194:04 - and we will just render let's say an H2
194:08 - that says the detailed info goes here
194:12 - assuming we have this set up correctly
194:14 - it's not probably going to be pretty but
194:16 - let's hit save and look at that we have
194:18 - inside of the layout here the detailed
194:21 - info goes here perfect but if I navigate
194:23 - to slash host slash van one slash photos
194:27 - well because that route doesn't exist
194:30 - it's just going to give us a blank page
194:31 - so we're not quite there fortunately I
194:33 - can just make copies of this we'll
194:35 - change this one to have a path of
194:38 - pricing and let's say the pricing goes
194:42 - here and we'll change this to a path of
194:45 - photos or Foods nope photos and we'll
194:49 - say that the photos that'll be go here
194:54 - all right let's cross our fingers hit
194:56 - save detailed info goes here we'll
194:58 - manually go to slash photos hit enter oh
195:01 - and for some reason the URL did not
195:03 - listen to me sometimes this can be a
195:05 - little bit tricky I don't know let's try
195:07 - refresh okay that took a minute but here
195:09 - we go we have photos go here this has
195:11 - been quite a bit the rest of this is
195:13 - just kind of procedural so I'm going to
195:16 - import let's see I'll just copy this one
195:19 - since that's most closely related let me
195:21 - the third one so we'll bring in the host
195:23 - van info host van pricing and host van
195:29 - what is it photos components okay and
195:33 - then I'll just uh let's just copy this
195:36 - and replace each one of these okay those
195:39 - components have nothing in them so we
195:41 - need to fill them out okay so I created
195:44 - this one for the hostman info and we
195:46 - will cheat and copy copy this over to
195:50 - the host van what is this one photos
195:53 - photos go here and pricing say pricing
195:57 - info goes here and I think we should
196:00 - essentially be where we were before so
196:02 - let's go ahead and hit save okay photos
196:05 - go yeah because we're at the photos
196:06 - route we'll see if this even works
196:08 - pricing hit enter okay that takes me to
196:10 - the pricing page and then if I just go
196:12 - back to slash one and hit enter detailed
196:15 - info goes here now because I'm entering
196:17 - this in the URL bar and hitting enter
196:19 - it's actually doing a full page refresh
196:21 - but in the next challenge where we add
196:23 - our navigation bar that will take us
196:24 - from one page to the next without the
196:26 - whole full page refresh and flicker
196:28 - happening okay take a deep breath
196:31 - hopefully that was okay I completely
196:33 - understand if it wasn't even if you have
196:35 - been doing all the challenges I think
196:37 - this is probably the most involved
196:38 - challenge that we've had so far if you
196:40 - were able to do it pat yourself on the
196:42 - back that's a big congratulations if not
196:44 - again that's completely okay at this
196:46 - point I would scrub back to the
196:47 - beginning of this scrim and try doing it
196:50 - again from scratch as always that muscle
196:52 - memory is only going to set in if you
196:54 - are actually typing with your hands on
196:56 - the keyboard working through it in your
196:58 - mind trying your very best to get it
196:59 - done no matter what happened great job
197:01 - or good effort and now it's time to
197:04 - really tidy everything up by putting
197:06 - this navigation bar in and next we'll be
197:08 - working on adding the navigation bar and
197:10 - then figuring out how to make the actual
197:12 - information show up instead of these
197:14 - silly little stubbed Out versions
197:19 - before we even jump into the real
197:21 - Challenge on this scrim I want you to
197:23 - think for just a second we have here our
197:26 - host van detail page where on this page
197:28 - are we going to start writing our navbar
197:31 - code take a look at what we currently
197:32 - have where the outlet currently sits and
197:35 - what it's supposed to look like here we
197:37 - have the navbar and then the information
197:38 - so if you need to you can pause and
197:40 - think about it otherwise I'm just going
197:41 - to be quiet for five or seven seconds
197:43 - and let you answer the question
197:47 - will the outlet represents the switching
197:50 - out views or the user interface that
197:52 - will be changing from one route to the
197:54 - next and we show that our navigation bar
197:56 - is above that switching out view so
197:59 - we're going to add our navbar code above
198:01 - our Outlet here right here okay that
198:04 - sets us up for the challenge let me type
198:05 - that out okay this is fun the challenge
198:07 - text is actually here below where you're
198:09 - going to be writing your code now I did
198:11 - add the nav element with the correct
198:14 - class name and the CSS styles that you
198:16 - need just to make sure that everything
198:17 - looks okay so you should be able to just
198:20 - add your links as part of the challenge
198:22 - and this style should kind of work out
198:23 - okay so the challenge is to add the
198:26 - links to the navbar that's going to be
198:28 - above this information that's showing up
198:31 - below here that swaps out from one view
198:33 - to the next and if you need to check it
198:35 - out I mean it just says details pricing
198:37 - and photos so that's really what I mean
198:39 - by check out the figma design to see
198:41 - what the text of the links should be we
198:43 - also as you might notice want to make it
198:45 - so that there's a clear indication as to
198:48 - which route we're currently on so you'll
198:50 - have to remember how you can do that and
198:52 - of course you can look at the other
198:53 - parts of the code base where we're doing
198:55 - that we're already doing that in the
198:56 - snap bar and the snapbar and remember
198:58 - the details link here is just leading
199:01 - you back to host Vans ID it doesn't go
199:04 - to host fans ID details or anything like
199:07 - that so you'll have to remember the
199:09 - little trick we recently learned so that
199:11 - clicking the details link will take you
199:13 - to that route instead of one of the
199:15 - other nested routes okay that's enough
199:17 - of me talking pause now and add our
199:19 - final navbar to our app
199:22 - thank goodness it's our final nav bar am
199:24 - I right okay let's go to add our links
199:27 - here now because we want to indicate
199:30 - based on the current route a different
199:31 - kind of style for each link we're not
199:33 - just going to use the link we're going
199:36 - to which we're already importing we're
199:37 - going to also use nav link so we need to
199:40 - make sure we import that then we'll get
199:42 - rid of this and we'll say we're going to
199:44 - add a nav link and we're going to have
199:47 - three of them for details pricing and
199:50 - photos so let's just type in that text
199:52 - here details pricing photos now I do
199:55 - know that I'm going to be adding a few
199:57 - other things here so I'm just going to
199:59 - split things out onto their own lines
200:02 - right now and we'll put a little space
200:04 - just so it's a little easier to
200:06 - understand what's going on here okay
200:08 - first of all I need the two path so
200:10 - we'll say two equals and let's work on
200:13 - getting these right so hopefully the
200:15 - pricing and the photos was fairly easy
200:17 - because I'm inside of my nested route I
200:20 - can just say pricing and photos I don't
200:22 - need to specify the entire absolute path
200:25 - leading up to this this one is the
200:27 - tricky one because the details should
200:29 - lead us kind of back to the route where
200:32 - we're currently writing this code in
200:34 - other words all this code is living at
200:36 - Host slash fan slash and then the ID I'm
200:39 - going to use just a DOT and that
200:41 - represents the current path remember
200:43 - this host van detail is being rendered
200:46 - at the ID path or endpoint here host
200:49 - man's ID and so when I say to dot that
200:52 - means just go back to host fans ID and
200:54 - actually I think this is a majority of
200:57 - what we're trying to do so let's hit
200:58 - save we're going to see a little bug
201:00 - here oh actually we're not going to see
201:02 - that little bug till we get the styling
201:03 - in but I hopefully can navigate let's
201:06 - hit pricing awesome this is so cool
201:08 - photos details that takes us back to
201:10 - detailed info goes here perfect now
201:12 - let's add the actual active class that
201:15 - we need by using the style and again
201:18 - this is going to be a function that
201:20 - takes and is active prop or parameter
201:24 - and we want it to return if is active is
201:27 - true we'll return we haven't created
201:29 - this yet but we'll create some active
201:31 - Styles and yikes this is starting to
201:34 - bleed off the page here so active Styles
201:37 - or null okay sorry that that's being
201:40 - covered up there because I can scroll up
201:42 - and we can see that's the same I could
201:44 - make this a little bit smaller it's a
201:46 - little too small okay oh that wasn't me
201:48 - there we go good enough for now okay
201:49 - these are working no I have to hit save
201:53 - and we have to create active Styles so
201:55 - let's go up here maybe just before our
201:58 - use effect we'll create an active style
202:00 - so that's an object and you know what
202:02 - I'm going to steal it from my other ones
202:06 - so we'll just come back so in detail put
202:09 - it right there oops let's replace this
202:11 - whole thing and hit save okay this is
202:13 - where we see the little bug remember we
202:15 - have both of these matching because
202:17 - details is not a sibling route per se to
202:21 - pricing and photos we look here once
202:24 - again the host van info is being
202:26 - displayed at as an index route which
202:28 - means it's at this path and that means
202:31 - that this is matching currently even
202:33 - when I'm in pricing so to fix that I
202:36 - simply need to add let's go back down
202:37 - the end prop so I can say end we'll hit
202:41 - save and there we go okay so now details
202:44 - is the only nav link being displayed or
202:46 - being highlighted rather pricing photos
202:48 - perfect I hope everything went well one
202:51 - of the final major pieces that we're
202:53 - going to be working on is actually
202:54 - getting the correct information
202:56 - displaying here inside of our nested
202:59 - routes at first glance it might seem
203:01 - like it's easy because well we've
203:02 - already got this information why not be
203:04 - able to display it down there but
203:06 - remember we only have an outlet here
203:09 - we're not actually coding out the
203:11 - detailed info or the pricing or the
203:13 - photos here in this file where we have
203:16 - the information from our fetch request
203:17 - so we have a little bit of work to pass
203:20 - the information that we've gathered to
203:22 - the chat child routes so that they have
203:24 - access to that information in order to
203:26 - display it correctly fortunately react
203:28 - router has made this fairly easy so
203:30 - we'll be able to do that pretty quickly
203:31 - for now start to get excited we're
203:33 - almost done with the majority of our app
203:36 - we have a couple loose ends to tie off
203:38 - but those things are fairly minor in
203:40 - comparison to all the amazing work that
203:42 - you've done so far on this project once
203:44 - you're done with your little happy dance
203:45 - and maybe doing a lap around your house
203:47 - or something let's get back to work and
203:49 - we will figure out how to get the
203:50 - information into our child routes
203:55 - okay so here we are we have our
203:58 - navigation bar we have our outlet and
204:01 - the place where our navigation bar lives
204:03 - is also the place where we're getting
204:05 - our information from the server it's
204:08 - saved into State locally on this
204:10 - component and if we were just rendering
204:12 - a child component we could pass this
204:14 - information down through props to that
204:17 - component in this case we're not
204:19 - rendering the host bin info photos or
204:21 - pricing because we don't know which one
204:23 - of those is going to appear in the place
204:25 - of this Outlet fortunately react router
204:27 - makes it really easy for us to get
204:29 - information into the components that are
204:32 - rendered as part of this outlet and so
204:34 - this challenge is actually going to be a
204:36 - bit different than what I usually do let
204:37 - me go ahead and type it out the reason
204:40 - this is different is because I'm not
204:41 - going to teach you how to do this before
204:43 - I ask you to try and do it as part of
204:45 - the challenge instead I've linked the
204:47 - documentation to something called use
204:49 - Outlet context this goes directly to the
204:51 - react router docs on Outlet context and
204:54 - it will show you both how to set it up
204:56 - on this side of the equation as well as
204:58 - how to write the code on the receiving
205:01 - end in other words in the host man info
205:04 - photos in host van pricing components
205:06 - over there so go over to the
205:08 - documentation read through what they
205:10 - have it talks a little bit about
205:11 - typescript we're not using typescript so
205:13 - at this point you don't need to follow
205:15 - the advice that they have for typescript
205:17 - users okay pause now go to the docs and
205:19 - work on this challenge
205:22 - this makes a lot more sense if you
205:25 - already have some experience using
205:26 - context in react because in this case
205:28 - essentially Outlet is just a context
205:30 - provider in react if I were creating
205:33 - this I would create a value prop but the
205:35 - way that they've defined it I create a
205:37 - context prop and whatever value I pass
205:39 - to my context prop will be receivable in
205:43 - my other components using a hook called
205:46 - use Outlet context so we'll just go
205:49 - ahead and import that here for now and I
205:52 - guess while I'm at it I'll put this into
205:53 - my other components as well since I'm
205:56 - going to need the outlet context in each
205:58 - one of these okay let's actually pass
206:00 - something to our context before we go
206:02 - too far down that route as I mentioned
206:04 - we have the information in state called
206:07 - current van so let's go ahead and just
206:09 - pass the current van as the value of our
206:12 - context in this case we're passing the
206:15 - van object as the entire context value I
206:18 - guess what I could do is surround this
206:20 - in another set of curly braces which in
206:22 - the this case means I'm going to pass an
206:24 - object and it will have a current van
206:26 - property whose value is the current van
206:29 - object so this is the shorthand of
206:31 - saying this I do tend to see something
206:34 - like this a little more frequently than
206:36 - just passing the entire object by itself
206:38 - with nothing else so I think just for
206:41 - the sake of sticking with the example
206:43 - that the documentation gave I'll do it
206:45 - this way which means when I'm receiving
206:47 - it in the host van info we'll go ahead
206:50 - and say my const and I can't just say
206:53 - the current van is equal to use Outlet
206:56 - context because current van is an object
206:59 - that has the current van property so I
207:02 - can just destructure that right in line
207:04 - while I'm doing that again we'll go
207:06 - ahead and copy this into our other
207:08 - components and now I should have access
207:11 - to my current van so I can render let's
207:14 - go ahead and create a section and let's
207:17 - I don't know maybe render this as an H4
207:20 - since we're pretty far down this nested
207:22 - route that we have going here and we're
207:24 - going to display the name and I can
207:27 - access that with currentvan.name and
207:30 - actually these are all kind of the same
207:31 - if you look at the design they're the
207:33 - same level of typography so we'll just
207:35 - use h4s for everything we'll say the
207:37 - category is current fan dot I guess type
207:41 - this probably should say type instead of
207:43 - category that's all right we'll say the
207:45 - description is currentvan dot
207:47 - description and well the design has
207:49 - let's go back here visibility public
207:52 - that's not actually part of our current
207:53 - van so we'll just kind of hard code that
207:56 - one visibility public hopefully that
207:58 - didn't throw anybody off too much
208:00 - looking for the visibility information
208:01 - inside the current van I'm really sorry
208:03 - if it did okay well the route we're in
208:05 - is the detailed info so let's hit save
208:08 - scroll down and awesome okay we have
208:10 - some styling work to do I'm just going
208:12 - to handle that for you okay easy enough
208:14 - now I should be able to just go to the
208:17 - photos and the pricing and do exactly
208:20 - the same thing so I won't make you sit
208:21 - and watch me do all that okay and just
208:24 - like that we're rendering in the image
208:26 - where we're pulling in the current van
208:27 - dot image URL we'll hit save and go over
208:31 - to photos perfect of course if this were
208:34 - a real site we'd probably have multiple
208:36 - photos but we're not going to worry
208:37 - about that because it doesn't pertain
208:39 - strictly to react router okay and I will
208:42 - just do the same thing for the pricing
208:44 - okay let's hit save we'll go over to
208:47 - pricing and perfect we have covered a
208:50 - ton of ground here I mean look at the
208:52 - app that we've been building we have
208:54 - three different levels of navigation
208:56 - we've learned about relative routes
208:58 - relative navigation links and well
209:00 - there's just too much to list assuming
209:03 - you've been able to follow along and do
209:04 - all of these challenges you really
209:06 - should be super proud of yourself now we
209:08 - still have a couple features that I
209:09 - think would really be beneficial for us
209:11 - to add and it's going to teach us a
209:13 - couple more aspects about react router
209:15 - along the way but this would be a great
209:16 - time to take a break congratulate
209:18 - yourself maybe show off all that you've
209:20 - been learning to a friend and when
209:22 - you're ready we'll move on to learning
209:23 - just a few more pieces about react
209:25 - router
209:29 - this would be a great point in your
209:31 - progress to update the deployment that
209:33 - you did to netlify earlier in the course
209:35 - we've got some great new features to
209:37 - show off and maybe you want to put it
209:39 - out on Twitter or share it to some
209:40 - family or friends so if you already feel
209:43 - comfortable deploying the updated
209:44 - version of your site to netlify then you
209:46 - can just skip this entire lesson if on
209:49 - the other hand you have not yet deployed
209:50 - anything to netlify I have a link here
209:52 - to the original scrim back from the
209:54 - beginning of this course that talks
209:56 - about how to set up your netlify account
209:58 - how to push everything using git and
210:00 - GitHub with GitHub desktop and
210:02 - everything you need in order to get your
210:03 - site live you can click the screenshot
210:05 - here which will take you back to that
210:07 - other scrim showing you exactly how to
210:09 - do that process and what we're going to
210:11 - do is going to be very similar to that
210:12 - first we're going to commit our local
210:14 - code to git then we're going to push our
210:17 - code up to GitHub and netlify will just
210:19 - automatically handle the rest and
210:21 - assuming that you already have an
210:23 - existing netlify project that's
210:25 - connected to the same GitHub repository
210:27 - and you haven't deleted that full folder
210:29 - or the GitHub repository from before
210:31 - then netlify will just automatically
210:33 - update everything for you now because
210:35 - we're here on scrimba when you first
210:37 - downloaded the code in the earlier part
210:39 - of the course we have diverged since
210:42 - then with our code by writing a bunch of
210:44 - new code just here on scrimba so the
210:46 - first thing we need to do is download
210:47 - this entire project again in the current
210:49 - design of scrimba you can find that with
210:52 - the gear icon in the lower right a menu
210:54 - will pop up and you can click download
210:55 - as zip once you download that zip file
210:58 - and unzip it you will have all of your
211:01 - files from the project that we have and
211:03 - what I'm doing here in this GIF is just
211:05 - dragging everything over to my existing
211:08 - van life folder and replacing all of the
211:11 - files from before now something that's
211:13 - important to note that doesn't happen in
211:15 - this process is we are not deleting a
211:18 - hidden file called dot git ignore so if
211:20 - you open the van Life app with all of
211:22 - the new files that just replace the old
211:24 - files you should still see a file called
211:26 - dot get ignore with the contents that
211:28 - you see here I've made sure that it's
211:31 - included here in the project in case you
211:33 - downloaded the zip directly from this
211:35 - project so hopefully that is still there
211:37 - for you and doesn't cause any issues if
211:39 - not you can manually add this and that
211:41 - will work just as well then if we open
211:43 - up GitHub desktop and we make sure that
211:45 - we're looking at our van life repository
211:47 - we'll see the list of changes that
211:49 - happened we can commit those changes by
211:51 - adding a message down here and clicking
211:53 - commit to main which will then send us
211:55 - back to this state where we have no
211:57 - local changes and we can push our
211:59 - changes up to our GitHub repository by
212:02 - clicking this push origin Button as soon
212:04 - as you do that netlify is going to see
212:06 - that there has been a change on your
212:08 - repository and it's going to upload the
212:10 - new version build it and deploy your
212:12 - site so that it's live for anyone to see
212:14 - you can click on the link up here which
212:17 - will then take you to your site and
212:18 - voila everything is ready to share just
212:21 - like before if you'd like to share it
212:23 - out to Twitter I think it's a great idea
212:25 - to build in public and to share your
212:27 - wins with the world so if you're active
212:29 - on Twitter you can click this screenshot
212:31 - which will pre-populate a tweet for you
212:33 - of course you can change it however you
212:34 - want especially make sure that you add
212:36 - your custom netlify link right here at
212:39 - the bottom of that tweet and that's it
212:41 - now we're ready to continue working on
212:43 - our van Life app
212:47 - you may have noticed that we completely
212:49 - skipped adding this filtering section on
212:52 - our vans page this is the list of all
212:54 - Vans not just the host vans in fact you
212:57 - can even see this screenshot doesn't yet
212:58 - include the little host link up at the
213:00 - top in fact you can even see that this
213:02 - screenshot doesn't include the host link
213:04 - that we added to our navigation bar but
213:06 - don't worry we didn't forget to do it
213:07 - and now it's our time to tackle this
213:09 - feature the reason we put it off till
213:11 - now is because it will require us to
213:13 - learn about something called search
213:15 - parameters or query parameters I pretty
213:18 - commonly hear it called both of these
213:20 - things so I just put search query
213:22 - parameters because you'll hear spoken
213:24 - both ways let's talk for just a minute
213:26 - about what query parameters are the idea
213:29 - of a query parameter is that it can
213:30 - represent some kind of change in your
213:33 - user interface what you actually see on
213:35 - the page in your app probably the most
213:38 - common tasks for query parameters are
213:40 - whenever you need to do any kind of
213:42 - sorting of your list or filtering of
213:45 - something on the page or if you have a
213:47 - ton of results and you need to do
213:49 - pagination we have a pretty limited
213:51 - selection of hands on our site but if we
213:53 - had say 2 000 vans that were listed we
213:57 - might want some kind of pagination that
213:58 - said we only show 10 results at a time
214:00 - and the user can click through the pages
214:02 - to see more pagination like that and the
214:05 - kind of filtering that we're going to be
214:06 - working on in this app usually happens
214:08 - within a query parameter we're gonna see
214:11 - in just a second what that actually
214:12 - looks like and how you implement it but
214:15 - for now we're just talking about the
214:16 - theory a really helpful way that I have
214:19 - found to think about query parameters is
214:21 - to think of them as a single source of
214:23 - Truth for some of our application State
214:26 - I've talked about this before in another
214:28 - react course that I've created and the
214:30 - idea is that it can be really important
214:32 - to ensure that the state you're
214:35 - maintaining in your app no matter where
214:37 - that actually is happening has a sort of
214:40 - central Hub that we call the source of
214:42 - Truth so that everything else just
214:44 - derives the way that it looks based on
214:46 - that single source of Truth some
214:48 - examples of this might be something like
214:50 - react state or local storage or as we're
214:54 - seeing here the query parameters that
214:56 - are in your url or you might be using a
214:59 - third-party Library like Redux where
215:01 - that single source of Truth is
215:03 - maintained in memory in a Redux store
215:05 - for example so like I mentioned
215:07 - sometimes query parameters which will
215:09 - exist in the URL can be used as a single
215:12 - source of Truth for parts of your
215:14 - application State a really helpful
215:16 - metric that I have used is to ask myself
215:18 - should a user be able to revisit or
215:21 - share this page exactly like it is and
215:24 - have the experience be the same or
215:26 - rather have the results be the same if
215:28 - the answer is yes then it might be worth
215:30 - considering raising the state of our
215:33 - filtering or sorting or pagination or
215:36 - whatever it might be up to the URL in a
215:39 - query parameter so you might be thinking
215:41 - well what about react State maybe you've
215:43 - even done some filtering or sorting or
215:46 - maybe even pagination using react State
215:48 - as the single source of Truth something
215:51 - you've probably noticed about react
215:52 - state is what happens when you refresh
215:55 - your page in fact I want you to think
215:57 - for a second what does happen when you
215:59 - refresh your page say you're maintaining
216:01 - a counter and you've clicked the button
216:03 - seven times so the count is currently
216:04 - seven and then you hit refresh what
216:06 - happens the counter resets to whatever
216:09 - you initialize to your state as hitting
216:11 - Refresh on your browser is akin to
216:13 - loading the app up for the first time so
216:16 - assuming you initialized your counter at
216:19 - maybe zero when you hit refresh your
216:21 - counter is gone your state is wiped away
216:23 - and everything starts fresh as such can
216:26 - you share the current state using react
216:28 - state of your app with a friend well no
216:31 - if I had a counter app and for some
216:33 - reason I wanted to share the current
216:35 - count with a friend and I copied the URL
216:37 - and sent it to them when they load it up
216:39 - it's going to be fresh state for them in
216:41 - their browser so it won't include my
216:44 - account that I saw in my end maybe a
216:46 - more realistic example using our van
216:48 - Life app if we maybe had four different
216:51 - filters and some kind of text search or
216:53 - maybe even a location search like if we
216:56 - wanted to only see the Vans that were in
216:58 - our vicinity so that we could easily go
217:00 - pick them up that might be part of the
217:02 - filtering that we're doing on our list
217:04 - of vans so then let's say I want to take
217:06 - that list that I've created through my
217:08 - filters text search location search
217:10 - whatever it might be and share it with a
217:12 - friend well if I'm holding all of that
217:15 - state in react State I really can't do
217:17 - that in a meaningful way at least not
217:19 - without some kind of crazy work around
217:21 - so this would be a great example where
217:23 - the state of my filters and text search
217:26 - and whatever else it might be might be
217:29 - better to raise out of react and up into
217:31 - the URL in reality react router is
217:34 - handling our URL but under the hood it's
217:37 - using the native browser apis that are
217:39 - dealing with the URL now one thing that
217:41 - I've noticed over the last year maybe
217:43 - two years is that the best practices
217:45 - about using react State and actually
217:48 - about using other parts of react like
217:50 - use effect they're always changing in
217:52 - fact later in this course we are going
217:54 - to see an example of how we're not even
217:57 - going to be doing our fetching of our
217:59 - let's see where do we have our vans here
218:01 - we're not even going to be doing our
218:03 - fetching inside of a use effect and
218:04 - saving the results in state which might
218:07 - seem crazy that might be the only way
218:09 - you've ever done fetching but there's
218:10 - some serious drawbacks to the way that
218:12 - this is happening anyway we're getting
218:14 - down to Rabbit Hole so let me bring us
218:16 - back we'll see really quickly how query
218:18 - parameters are actually structured as I
218:20 - mentioned it's part of your URL and it
218:22 - represents key value pairs of
218:24 - information that can live directly in
218:26 - your url I'm almost certain you will
218:28 - recognize this pattern you create query
218:31 - parameters by first starting with the
218:33 - question mark So in our app if we have
218:35 - slash Vans we would include in the URL a
218:38 - question mark and then we would
218:40 - associate some information like the key
218:43 - of type and we would set it equal to a
218:45 - value of in the system sample rugged
218:48 - remember all our vans have this kind of
218:50 - type here that's simple rugged and
218:52 - luxury well if we only wanted to see all
218:55 - of the rugged vans that were available
218:57 - then we might include a query parameter
219:00 - where the type is equal to rugged and
219:02 - there's nothing that stops us from
219:03 - having multiple query parameters you may
219:06 - have seen URLs that were extremely long
219:08 - I think if you go to Amazon any product
219:10 - page that you find will have a really
219:13 - long URL and if you look at it it will
219:15 - have a number of different query
219:16 - parameters theoretically there should
219:18 - only be one question mark in the URL
219:20 - that begins the query parameter segment
219:22 - of the URL but you can have multiples
219:24 - that are separated by an ampersand so
219:27 - for example if we wanted to be able to
219:29 - filter by the type of rugged but also
219:32 - filter by Price or maybe even more
219:35 - common is to do something like sort by
219:37 - price if we wanted to see prices low to
219:39 - high for example then we simply include
219:42 - multiple key value pairs in our query
219:44 - parameters by separating them with an
219:45 - ampersand and you would just do do more
219:47 - and more ampersands with key value pairs
219:49 - in between if you wanted more query
219:51 - parameters okay I promise I'm done
219:53 - talking about Theory let's work on now
219:55 - implementing some query parameters and
219:57 - some filtering into our app by including
219:59 - the little filters that we have so far
220:01 - been neglecting from our design
220:06 - in order to handle search parameters in
220:09 - a react router app we're going to use a
220:12 - hook called use search params you can
220:14 - click on the screenshot here to go
220:16 - directly to the documentation and one
220:18 - thing that's really nice about used
220:19 - search params is that it is very similar
220:22 - to the signature of use State let me
220:24 - show you what I mean so here we have a
220:26 - very simple app that has a list of Star
220:29 - Wars characters they're either Jedi type
220:31 - or Sith type we have some conditional
220:34 - styling happening where they're either
220:36 - blue or red depending on their type and
220:38 - our goal is to make a couple buttons so
220:41 - one will say Jedi one will say Sith
220:43 - clicking them will add a search
220:45 - parameter to the URL which will then
220:47 - make it so that it filters this list and
220:49 - only shows either the Jedi or the Sith
220:51 - to start out we can use the hook for use
220:54 - search params we'll just do it here at
220:56 - the top of our component we can say
220:58 - const and then we will destructure an
221:00 - array that comes back by calling use
221:03 - search params just like in use State we
221:05 - will get back the the value of the
221:08 - params we're creating so we'll call it
221:10 - search params and that's in the first
221:12 - index of the array that we're
221:14 - destructuring and the second thing we'll
221:16 - get back is a Setter function just like
221:18 - in you state so we'll call it set search
221:20 - params let's go ahead and console Log
221:23 - search params and let's see what we get
221:25 - okay so this is not just a regular
221:28 - object or a string or anything like that
221:30 - it's actually an instance of the browser
221:32 - native URL search params object because
221:35 - of this the search params object that we
221:37 - have here actually has a whole set of
221:39 - methods that we can make use of when we
221:42 - need to and if you're interested you can
221:44 - go look at all of the methods in the URL
221:46 - search params documentation on mdn you
221:48 - can click the screenshot here to go
221:50 - there one of the methods that is very
221:52 - useful is one called dot get and we can
221:55 - provide the name of a key in a key value
221:58 - pair for our search parameters and it
222:01 - will return the value of that parameter
222:02 - so for example we are going to be using
222:05 - a parameter called type and so if we say
222:07 - searchprams.get type it will return that
222:10 - and then we are going to console log
222:11 - Whatever Gets returned or rather it will
222:13 - return the value of that so I'm going to
222:15 - hit save but I want you to take a look
222:17 - at what is currently in our URL and
222:20 - determine what you think the console log
222:22 - is going to return well we currently
222:24 - don't have a query string in here so
222:26 - let's go ahead and hit save and it looks
222:28 - like from the search params object when
222:31 - we try to get the parameter of type the
222:33 - value is null so let's go ahead and
222:35 - actually put a question mark and we'll
222:38 - say type equals Sif we'll hit enter it
222:42 - should re-render our component and we'll
222:44 - see if our search parameters are working
222:46 - okay look at that when we console log
222:48 - the search params I get type we get the
222:50 - value of Sith if we want a more full
222:53 - picture of what our search params are
222:55 - actually containing at any given time we
222:57 - can use a method on the search params
222:59 - called Dot tostring and I'll hit save
223:01 - you can see what that does so we get
223:03 - type equals if remember we can separate
223:05 - the parameters with an Ampersand so if I
223:07 - had another one like and scrimba equals
223:11 - awesome and that needs to be equals okay
223:14 - we can see that the search params.2
223:16 - string will return the entire query
223:18 - string it doesn't include the question
223:20 - mark in the beginning though so that's
223:22 - something to keep in mind okay so we
223:24 - have a way to get let me change this
223:26 - back we'll say we want to get the type
223:28 - and I'll go ahead and get rid of even
223:31 - though scrim is awesome I'm going to get
223:32 - rid of this other parameter here okay we
223:35 - have a way to get the value of type
223:37 - which currently is Sif soon we're going
223:39 - to learn how we can actually set our
223:41 - search parameters so that we can change
223:42 - it on the click of a button but before
223:45 - we even do that I think it would be
223:46 - useful for us to use the value in the
223:49 - search parameter to filter down our list
223:51 - of Star Wars characters so that it only
223:53 - displays the type that is in the search
223:55 - parameters at any given time so that's
223:58 - going to be the next thing that we learn
224:00 - but actually at this point let's get
224:02 - your hands on the keyboard let's take
224:03 - the small portion that we've learned so
224:05 - far we'll apply it to the van life app
224:07 - and then we'll come back to this and
224:08 - learn how to do the filtering
224:13 - you know sometimes when I'm watching a
224:15 - tutorial with somebody else doing all
224:16 - the work I find myself getting lost a
224:19 - little bit in their code base so this is
224:21 - a silly kind of intro challenge but the
224:24 - first thing I want you to do is to try
224:25 - and figure out where it is we're going
224:27 - to be implementing this search params
224:29 - challenge remember the idea is
224:31 - eventually we're going to add buttons
224:32 - here to our vans page so that when we
224:34 - click them it will alter the search
224:36 - params and filter our list so that it
224:39 - only shows Vans of a specific type like
224:42 - we have the Vans for the simple the
224:45 - rugged and the luxury types so if you
224:48 - need to pause and find the correct file
224:49 - you can do that or you can just maybe
224:51 - say it out loud or something to show
224:53 - that you know where it is we're going to
224:55 - be implementing this so go ahead and do
224:56 - that now
225:03 - because we are doing this work on the
225:05 - Vans page we are going over to the Vans
225:08 - component here and hopefully you were
225:10 - able to find that or at least understand
225:11 - that that's where we would be doing the
225:13 - work again the only reason I had you do
225:15 - that is because I know that for me
225:16 - personally sometimes I realize I've
225:18 - gotten this far in a code base while
225:20 - watching a tutorial and then kind of
225:22 - realize I actually get lost in it pretty
225:24 - easily because I wasn't the one doing
225:26 - all the work I guess that's a little
225:27 - different in this course because
225:28 - hopefully you've been typing along okay
225:30 - so we have our real challenge here and
225:32 - that is to access the search params
225:34 - inside of this component I guess an
225:36 - important distinction to make between
225:37 - what we're doing here with search params
225:40 - and what we have done in the past with
225:41 - state is to understand that state just
225:44 - lives inside of this component whereas
225:46 - the search parameters there's something
225:48 - that lives up in the URL so even though
225:51 - we are going to be accessing the search
225:52 - params here in this component we're not
225:55 - actually instantiating or initializing
225:58 - search params here instead the search
226:00 - params variable is simply going to read
226:02 - the per parameters that are up in the
226:04 - URL we can modify the URL and we will be
226:08 - modifying the URL from this component
226:10 - but it's a little bit different than
226:12 - State since state is just living in
226:14 - memory for this component only anyway I
226:17 - don't know if that clears anything up or
226:18 - makes it worse but hopefully that helps
226:20 - so I've laid out some steps for the
226:22 - challenge you need to use the hook that
226:23 - we just learned about from react rat or
226:25 - Dom set a variable and use it to set a
226:28 - variable called search params that
226:30 - search params object will have a
226:32 - property you can use to grab the value
226:34 - of the type parameter and I want you to
226:37 - save that to a variable that we call
226:39 - type filter and then simply log the
226:41 - value of type filter to the console now
226:44 - remember currently as it stands right
226:46 - now in this recording we don't have a
226:47 - query up here so don't be surprised if
226:50 - you get to the third step and you log
226:52 - the value of type filter and it isn't
226:54 - what you might think it would be to test
226:56 - it out you can simply type up into the
226:58 - URL question mark type equals and then
227:01 - whatever you want all right you should
227:02 - have every thing you need pause now and
227:04 - work on the challenge
227:10 - all right let's get started we will just
227:13 - do this right above our state
227:14 - declaration and we'll create a new
227:17 - search params object here so search
227:19 - params and we're not yet at the point of
227:22 - using set search params but we might as
227:24 - well do it now because we know we are
227:26 - going to use it in the future so we will
227:29 - call use search params and I need to
227:33 - import that from react router Dom then
227:36 - maybe right below our state let's buy
227:38 - some space here and we'll say type
227:40 - filter is equal to search params and
227:43 - remember this is an instance of the
227:45 - Native Constructor URL search params
227:48 - that comes with a number of methods that
227:50 - we just get for free like dot get dot
227:53 - get is where we specify as a string the
227:55 - name of the key in the key value pairs
227:58 - of our search params and it should
227:59 - return the value at that key of type so
228:03 - I'll go ahead and console.log type
228:06 - filter and again because we don't have a
228:09 - query string in our URL this I think
228:11 - will be null is what we discovered yeah
228:13 - so it's null and now I can test it out
228:16 - by putting in the URL question mark type
228:18 - equals and it really doesn't matter I'll
228:21 - just say blah blah blah hit enter and
228:23 - there it is in our case notice that
228:25 - we're getting it twice and that's
228:27 - because we are rendering the component
228:29 - we're grabbing the search param of type
228:32 - we're console logging it and then our
228:34 - use effect is running it's going and
228:36 - getting the data and then it's setting
228:38 - state so it's re-rendering this
228:39 - component which is then running our code
228:41 - again that's nothing to be concerned
228:43 - about right now okay great work the next
228:45 - thing we'll be doing is going back to
228:47 - our silly Little Star Wars characters
228:49 - app and we will apply the search
228:52 - parameter to filtering the array
228:57 - a notable thing that we are doing here
228:59 - is we are not using state in order to
229:02 - maintain the information about the
229:04 - filter or the filtered down list of
229:06 - characters or eventually the Vans but
229:08 - instead the filtering and the getting of
229:11 - the parameter and everything this is all
229:12 - happening right here at the top of our
229:14 - component notice it's also not happening
229:17 - inside of a use effect or anything like
229:19 - that the process of getting a search
229:21 - param is really fast and the process of
229:23 - filtering down in this example the list
229:26 - of characters is also really fast and so
229:28 - this isn't something that necessarily
229:30 - needs to happen as a side effect inside
229:32 - of a use effect in react instead if we
229:35 - just put it here at the top level then
229:37 - every time this component re-renders it
229:39 - will redo this work and that's not that
229:41 - big of a deal we don't need to worry at
229:43 - this point in over optimizing this
229:45 - because it's not showing us any
229:47 - performance problems so here we're
229:49 - creating our character elements which is
229:51 - what Char LS is short for and it's
229:54 - simply taking the full list of Star Wars
229:56 - characters up here and and mapping over
229:58 - it to create the jsx elements that we
230:00 - want to display right here so actually I
230:03 - want to type out just a quick challenge
230:05 - for you I want you to think how we might
230:07 - approach solving this problem of
230:09 - filtering our list of Star Wars
230:10 - characters Down based on the type filter
230:12 - that we just grabbed from the search
230:14 - params if you want a little extra credit
230:16 - there's not really extra credit but if
230:18 - you want to I guess feel extra good
230:20 - about yourself then you could actually
230:22 - try to do this for yourself right now we
230:24 - can see that there is a query in our URL
230:26 - it says type equals Sith so if you're
230:29 - able to successfully do this then it
230:31 - should grab Sith from the URL or from
230:34 - the search parameters and it should only
230:36 - show the two Sith characters that we
230:38 - have one kind of gotcha here is notice
230:40 - that the type in the object has a
230:43 - capital s in it whereas the parameter
230:45 - has a lowercase s that's something that
230:48 - you will need to take into account when
230:49 - you're working on this okay pause now
230:51 - and either just think through how you
230:53 - might approach solving this problem or
230:55 - if you're feeling extra confident try
230:57 - doing it yourself
231:04 - I'm sure that there are a number of
231:06 - different ways to solve this problem the
231:08 - first way that comes to mind for me is
231:10 - to Simply chain a DOT filter on our Star
231:13 - Wars characters before we then map over
231:15 - the array dot filter returns an array
231:18 - but it will be a more limited array than
231:21 - what the full array of Star Wars
231:22 - characters has dot filter returns an
231:25 - array and then we can just chain the dot
231:27 - map on top of the array that gets
231:30 - returned from dot filter if it's easier
231:32 - to understand you also could just set up
231:34 - a completely separate array variable
231:36 - like maybe you call this displayed
231:38 - characters and that would be equal to
231:41 - Starwars characters dot filter and then
231:43 - you could just change this to say we'd
231:45 - get rid of this filter and we would say
231:47 - displayed characters so that would also
231:49 - be a legitimate way to do that actually
231:51 - in fact you know what I think I am going
231:53 - to do it this way just because there is
231:55 - a chance that we have no filter in fact
231:58 - we know that there will be cases where
232:00 - we don't have a filter and so I may want
232:02 - displayed characters to 2 sometimes
232:05 - equal the full list of Star Wars
232:07 - characters so that might look something
232:09 - like this if I say do we have a type
232:11 - filter first of all so I'll put a
232:13 - question mark let's actually move it
232:15 - down to this line if type filter is a
232:17 - value in other words it's in our case
232:19 - either Sith or Jedi then displayed
232:22 - characters will be equal to the full
232:24 - list of Starwars characters dot filter
232:26 - and we'll figure this part out in just a
232:29 - second but otherwise it will just equal
232:31 - Star Wars characters okay let's figure
232:34 - out our filter that filter takes a
232:36 - function we're going to have access to
232:39 - each one of the characters in this
232:41 - function we need to return true or false
232:43 - if we return true then it will keep this
232:46 - current character in the new array and
232:48 - if we return false it won't and so we
232:50 - can say if the character DOT type and
232:53 - remember these have capital letters so
232:55 - I'm actually going to say character.type
232:57 - dot to lowercase if that is equal to our
233:01 - type filter then this will evaluate to
233:05 - true and therefore this character will
233:07 - get saved into the new array of
233:09 - displayed characters and we already
233:11 - switched this to say displayed
233:13 - characters so let me clear up this
233:15 - challenge text add a little space here
233:17 - and we already have type equals Sith
233:19 - let's see if this works I'll hit refresh
233:22 - cool look at that okay we have just the
233:25 - two Sith Star Wars characters in our
233:27 - list I should be able to change Sif or
233:30 - type equals if to type equals Jedi and
233:33 - hit enter and awesome okay everything is
233:36 - filtering down just like we'd think
233:37 - let's test it out without a search
233:39 - parameter so I'll delete the search
233:41 - parameter up there and we have everybody
233:43 - awesome work I really hope that went
233:45 - okay of course as always if it didn't
233:47 - just go back and try it again and
233:49 - actually even if you were able to do it
233:51 - try scrubbing back to the beginning
233:52 - before we had any of this code and try
233:54 - doing it again anyway next up is for us
233:56 - to apply this concept of filtering based
233:59 - on the search parameters to our van Life
234:01 - app
234:04 - okay your challenge for this one is to
234:06 - well basically do exactly what we just
234:09 - did but here in our van Life app in fact
234:11 - it's very very similar so hopefully you
234:13 - grasped what we just worked on because
234:15 - now it's your turn to get your hands on
234:17 - the keyboard pause now and work on this
234:18 - challenge
234:24 - well let's just do exactly what we just
234:27 - did we'll create a const displayed bands
234:32 - and that's going to check if type filter
234:34 - is a thing and if it is then we will use
234:39 - Vans this is the full array of Vans dot
234:42 - filter we'll look at each van and if the
234:45 - van DOT type is equal to the type filter
234:48 - then it will return true and that will
234:50 - become part of the array in displayed
234:52 - Vans otherwise if type filter is null in
234:56 - other words there is no type equals
234:58 - whatever up there then we just want to
235:00 - have the full list of Vans and then when
235:03 - we're mapping over it we will just put
235:06 - our displayed Vans again sometimes this
235:08 - will be the full array of Vans and
235:10 - sometimes it will be a filter down array
235:12 - we'll just use displayed bands to map
235:14 - over that and create our van elements
235:16 - don't think anything else needs to
235:18 - change let's clear this up
235:21 - and I already have type equals simple so
235:24 - let's hit save I'll scroll down a little
235:26 - so we can see that there's more than
235:28 - just the simple ones cool so I think the
235:31 - next logical thing for us to do is not
235:33 - have to actually type it up into the URL
235:36 - but have a way that we can click some
235:38 - buttons and have that change the query
235:40 - that's in the URL there's actually a
235:42 - couple different ways we can handle this
235:44 - so that's what we'll be learning about
235:45 - next
235:49 - the simplest way that I can think of to
235:51 - add search parameters is to Simply use a
235:54 - link element at this point we're pretty
235:56 - familiar with using link to send us to a
235:59 - specific path like if we were going to
236:01 - the slash about page or something like
236:03 - that but we also can use a link to not
236:05 - specify A New Path that we're going to
236:07 - but instead to specify a query so I can
236:10 - simply say question mark type equals
236:13 - Jedi and have this link be when it gets
236:18 - clicked the way that we add the query to
236:21 - the top I'll just create a duplicate of
236:23 - this we'll say Sith Sith
236:26 - let's hit save ah and we do need to
236:29 - import link so we will import link right
236:32 - here let's try that again okay it's not
236:34 - much to look at but we do have these
236:36 - links here and when I click Jedi well
236:39 - everything's just kind of working we can
236:40 - see that it put the question mark type
236:42 - equals Jedi in the URL and because it
236:45 - started with a question mark react
236:46 - router knew that it wasn't changing
236:48 - routes per se it's still the slash
236:51 - characters route but it is adding some
236:53 - search params and because these search
236:55 - parameters changed the component
236:57 - re-rendered it re-ran our code that got
236:59 - the type and it did the filtering and
237:01 - everything like that so again it's just
237:03 - kind of working out of the box by adding
237:05 - question mark type equals Jedi or type
237:07 - equals let's hit Sith and we can see
237:09 - that's working as well now let me throw
237:11 - in a quick challenge here
237:13 - okay your challenge is to see if you can
237:16 - add another link just right here next to
237:18 - the other ones that clears out the
237:20 - search params so in other words right
237:22 - now I'm filtered down by type equals
237:24 - Sith I should be able to press a button
237:25 - or a link that says clear and have it
237:27 - show me everything in the list again I
237:29 - haven't specifically taught how to do
237:31 - this but I'm hoping that your intuition
237:33 - will kick in and you'll be able to
237:35 - figure it out so pause now and give this
237:37 - a shot
237:43 - I found actually two different ways to
237:45 - do this and I'm sure there's plenty more
237:46 - but I'm just going to duplicate the link
237:48 - we'll change this to say clear and one
237:51 - way I found that works is just to say
237:53 - that the 2 is equal to an empty string
237:56 - we'll hit save I click clear and that
237:59 - clears out the search parameters and
238:00 - shows everything again the other way
238:02 - that I thought about doing this is to
238:04 - say that I want this to go to Dot and if
238:07 - you remember dot represents the current
238:08 - path or the current route so let's hit
238:11 - save I'll hit Sith to filter down and
238:14 - then we'll hit clear again and sure
238:16 - enough that seems to work as well I'm
238:18 - honestly not sure which one I prefer so
238:20 - I think either way is going to be fine
238:22 - I'll probably just leave it here as a
238:24 - DOT because I suppose you could argue
238:26 - that it's a little more explicit as to
238:28 - what we're doing we're saying just go to
238:29 - the current path without anything else
238:31 - attached to it okay that was fairly
238:33 - straightforward but there are a couple
238:35 - caveats that I want to talk about with
238:37 - this method of using the link so that's
238:39 - what we'll be doing in the next scrim
238:43 - okay let's learn what we just applied by
238:46 - adding some links to our van Life app so
238:49 - that we can filter the Vans by their
238:51 - type for now the Links are just going to
238:53 - have a hard-coded two string like we
238:55 - just practiced and the different types
238:57 - are going to be simple luxury and rugged
239:00 - I've given you some class names to use
239:02 - because we're not focusing on the CSS
239:04 - here so I've already written some CSS so
239:06 - for each of those links add a class name
239:08 - of Van Dash type and then the type of
239:11 - that link so if it's the simple link
239:13 - it'll say simple if it's the luxury link
239:15 - it'll say luxury and so forth for the
239:17 - link that will clear all the filters its
239:19 - class name should be van type space
239:21 - clear Dash filters give this your best
239:23 - shot I'm sure you can do it if you do
239:25 - get stuck we're going to walk through it
239:27 - in just a minute but of course as always
239:28 - you can reach out to the community for
239:30 - help too oh and one last thing is you'll
239:32 - add your links right here between this
239:34 - div that I created so right where I'm
239:36 - putting my cursor okay pause now and add
239:39 - those filtering links to our van Life
239:40 - app
239:46 - okay I can see that we already have link
239:49 - imported so we should just be able to
239:51 - create some links and while I'm at it
239:54 - I'll just add the class names now so our
239:56 - class name is going to be equal to
239:59 - van Dash type space and then this is the
240:02 - one we'll change here we're saying
240:03 - simple
240:04 - let's move this onto its own lines and
240:08 - we'll just leave it like that and we'll
240:10 - give it a two property of question mark
240:13 - type equals simple and let's just start
240:16 - out there let's see what it looks like
240:18 - okay and let's see if it works so I
240:20 - click looks like some styling needs to
240:22 - be fixed uh we'll click that okay we get
240:24 - type equals simple and we only show the
240:26 - simple Vans awesome let's go ahead and
240:28 - copy this link we'll create one for
240:31 - luxury and one for rugged and I guess
240:33 - one for clearing the filters and we'll
240:36 - just make some of these little changes
240:37 - like this
240:38 - and then for clearing out the search
240:41 - parameters we will just hit that the 2
240:43 - is the current route and this will be
240:46 - clear
240:47 - filters
240:48 - and this will say clear filters or
240:51 - filter okay let's hit save
240:53 - okay yeah The Styling is uh still
240:56 - needing some work but we can see that
240:59 - everything is working okay sometimes
241:02 - when you're developing it feels a little
241:04 - bit like a gamble you think you've done
241:05 - everything right and then you find some
241:07 - major bugs something still a little off
241:10 - by The Styling let me take a look at it
241:11 - ah okay there was a couple Styles so I
241:14 - forgot to copy over hopefully that
241:15 - didn't throw anybody off too much but
241:17 - the styles are one thing the
241:19 - functionality is another and the
241:21 - functionality is on point it's working
241:24 - great okay so now we've learned how to
241:26 - set a query string using a link element
241:28 - in react router but you might have
241:30 - noticed that we created this Setter
241:32 - function when we're initializing our
241:34 - search params we have this set search
241:36 - params function but we're not actually
241:37 - using it anywhere if we're just going to
241:40 - link directly to a hard-coded version of
241:43 - our search params then we don't
241:44 - necessarily need that search param
241:46 - Setter function however there are
241:48 - instances where you may need to use it
241:50 - so we are going to refactor what we have
241:52 - and learn about using the set search
241:55 - params function that we have here
241:59 - let's take a look at another way that we
242:01 - can set the search parameters in our app
242:04 - the way we have our link set up is a
242:06 - really really simple way to do this
242:08 - there's some caveats with it that we're
242:09 - going to talk about soon but first I
242:12 - want to comment these out actually I'll
242:14 - move them outside of my components so I
242:16 - can comment them out and I'm going to
242:18 - show you another way instead of linking
242:20 - to the query parameter that we want we
242:23 - can use the state Setter function that
242:25 - we received when we initialized our
242:27 - search params so this function here set
242:29 - search params just like in use state is
242:31 - a Setter where we can tell it what the
242:33 - new search params are going to be so let
242:35 - me create a couple buttons here
242:37 - okay the form factor is going to be a
242:40 - little bit different so I'll hit save
242:41 - and we have buttons instead of links of
242:43 - course we could style these however we
242:44 - want so this time around because buttons
242:47 - are not part of the react router
242:49 - ecosystem like link is we are simply
242:52 - going to use an on click event handler
242:54 - in order to call our set search params
242:57 - function so I'll create an on click for
243:00 - each of these and these will have a
243:02 - callback function and that function is
243:04 - going to run set search params just like
243:08 - with use State the setter function can
243:11 - either take a new value for the search
243:13 - params which will completely replace the
243:15 - old value or it can take a callback
243:18 - function first we'll look at just
243:20 - passing in a new value one thing I've
243:22 - learned with set search params is that
243:24 - it's very flexible we can pass any value
243:27 - into here that the URL search params
243:30 - this object here can take and if you
243:32 - look at the documentation here I think
243:34 - there's four different types of
243:35 - parameters that you could pass in for it
243:37 - to generate search params one of the
243:39 - ways that you can initialize new search
243:41 - params is by passing in a string that
243:44 - represents the new search params you
243:46 - want so this is actually almost
243:48 - identical to what we had with our links
243:50 - in the URL search params object is smart
243:53 - enough to figure out if there's a
243:54 - question mark at the beginning so it
243:56 - actually doesn't matter you can either
243:57 - say type equals and then we'll say Jedi
244:00 - this one will say Sith and then this one
244:03 - will actually just say we want to set
244:04 - the search params to an empty string or
244:07 - I could put question marks here and it's
244:09 - smart enough to figure it out so let's
244:11 - see with the question marks
244:13 - Jedi shows Jedi we see in the URL type
244:15 - equals Jedi Sith is the same Clear
244:18 - clears them out and without the question
244:20 - marks it does the same
244:22 - okay so yes this works to pass in a
244:24 - string like this however I don't
244:26 - oftentimes see this string
244:28 - initialization used very often more
244:31 - commonly I will see a record
244:33 - initialization or what you could just
244:35 - think of it as being an object
244:37 - initialization and this is very similar
244:40 - where the object has keys and values
244:42 - just like our search parameters have
244:43 - keys and values and so I can say that
244:45 - the type is going to be and then I can
244:48 - pass in my Jedi Sith and then here we're
244:53 - just going to pass in an empty object
244:55 - which says I don't want any search
244:56 - parameters
244:57 - okay we'll hit save
244:59 - Jedi we see that that translated into
245:02 - the query string just like we would have
245:04 - expected and that's happening by the URL
245:07 - search params object under the hood
245:09 - Sith does the same thing and clear clear
245:11 - smell now truth be told there's actually
245:13 - other ways that we can initialize this
245:15 - exact same thing each one has their own
245:18 - use case but more often than not if
245:19 - you're typing it in you're probably
245:21 - going to see people using an object like
245:23 - this so that's what we're going to stick
245:25 - with okay time to practice this let's go
245:27 - over to the van Life app and you'll get
245:29 - your chance to practice
245:33 - okay challenge time again your task is
245:36 - to change the links that we have into
245:37 - buttons and to use these set search
245:40 - params function which remember we
245:42 - instantiated up here to set the search
245:44 - params for the filtering of our vans
245:46 - make sure you keep all the class names
245:49 - exactly the way they are pause now and
245:51 - work on the challenge
245:57 - okay this should be pretty
245:59 - straightforward let's go ahead and
246:00 - select all of our links we'll select the
246:03 - link to the clear filter option as well
246:06 - and we will change these two buttons and
246:09 - then instead of having a to property
246:11 - we'll select all those we're going to
246:14 - actually let's leave the string there
246:16 - for now we'll say that when this button
246:19 - is
246:20 - clicked so on click is going to be equal
246:24 - to a function we'll need to run that
246:27 - inside of curly braces and I can't just
246:31 - say set search params right here because
246:34 - I would need to call it and that means
246:36 - it will get called as soon as the page
246:38 - loads not as soon as the button is
246:40 - clicked we need to pass a function and
246:44 - let's go ahead and move looks like my
246:47 - strings are a little off that's okay
246:48 - we'll make it so that
246:51 - this string goes inside here and then
246:55 - we'll move this string inside actually
246:57 - this is just going to be an empty string
246:59 - remember the dot string like this like
247:01 - we had with the link before that's
247:03 - something specific to react router that
247:05 - it's doing under the hood so set search
247:07 - params is actually using the URL search
247:10 - params Constructor and that won't I
247:13 - don't think know what to do with having
247:15 - a string of a dot in there so we'll just
247:17 - have it be an empty string again when
247:19 - we're passing in a string we can include
247:21 - or not include the question mark let's
247:23 - just leave it there because we're
247:25 - actually going to change this in just a
247:26 - second anyway so let's hit save and type
247:29 - simple type luxury type rugged and gone
247:32 - perfect now like we learned the string
247:35 - is not probably the most common way to
247:37 - do this although it works just great
247:39 - instead a little more commonly you'll
247:41 - see an object passed in here we'll
247:43 - actually just manipulate the string that
247:45 - we had and turn this into an object
247:48 - like this and then for here
247:52 - we'll pass in an empty object which
247:54 - means that we have no search parameters
247:56 - when we set the search parameters all
247:58 - right let's hit save
248:00 - and yet again it's working like we would
248:02 - expect great work
248:07 - now there's actually a major caveat to
248:09 - the way that we've been doing our query
248:12 - parameters so far and let me show you
248:14 - what I mean so up here I'm going to
248:16 - create a new query parameter that has
248:17 - nothing to do with what we've been doing
248:19 - so far I'll say name equals Jill we'll
248:22 - hit enter question mark name equals Jill
248:24 - that has no impact on the filtering of
248:27 - this part of the app well and we know
248:28 - that it has no impact on any part of the
248:30 - app at this point but it's so common to
248:32 - have more than one query parameter each
248:35 - one possibly having to do with a
248:36 - different part of your app or a
248:37 - different page in your app however the
248:39 - way that we've structured this right now
248:41 - because we're hard coding a question
248:43 - mark type equals Jedi or Sith and over
248:45 - here we're hard coding this object that
248:47 - just has one key and value in it as soon
248:50 - as I click one of these buttons or these
248:52 - links I will lose the context of the
248:54 - query parameter name equals Jill so if I
248:57 - hit Sif now it's changed the query
248:59 - parameter to type equals Sith because
249:01 - that's what we've hard-coded and rest
249:03 - assured the exact same thing would have
249:04 - happened if I'd clicked the buttons
249:06 - instead and the clear your buttons would
249:08 - do the exact same thing it clears out
249:09 - any search parameters that you might
249:11 - have not just the ones that you care
249:13 - about in this specific component so if
249:15 - for some reason you know for a certainty
249:17 - that you will not have any other query
249:18 - parameters in your project then the way
249:20 - that I've shown you here so far will
249:22 - work perfectly however for the purposes
249:24 - of education and an exercising
249:26 - completeness I'm going to show you some
249:28 - methods that you might use in order to
249:30 - merge your query parameters with
249:33 - existing query parameters instead of
249:34 - completely replacing them so we'll do
249:36 - that in the next scrim
249:40 - the main reason I think I want to show
249:42 - you how I figured out to do this is
249:44 - because I actually struggled with this
249:46 - for a long time and I don't even mean
249:48 - when I first started coding I mean just
249:50 - as I Was preparing these lessons I was
249:52 - really trying to figure out the best way
249:54 - to do this and I think I've come up with
249:55 - a good way but a caveat to that is that
249:57 - it's not the only way there are
249:59 - certainly a thousand different ways that
250:01 - someone could solve this problem so I'm
250:03 - going to split this into two parts the
250:05 - first part is how we can generate a
250:07 - query string like we see here in our
250:10 - links so that it will merge any existing
250:12 - query parameters with the one that we're
250:14 - trying to add and an important thing to
250:16 - know about that is we won't even be
250:18 - using the set search params for that
250:20 - we'll truly just be using vanilla
250:22 - JavaScript in a sort of helper utility
250:24 - function that we'll create right here
250:25 - and the second part is how we can do
250:27 - that using these set search params
250:30 - because there's some gotchas with using
250:32 - the set search params method that
250:34 - tripped me up for quite a bit of time so
250:36 - let's start with how to generate a query
250:38 - string like this this does require us to
250:40 - to understand the URL search parameters
250:43 - Constructor a little bit but it's not
250:45 - too bad it's just vanilla JavaScript the
250:47 - idea is that instead of hard coding a
250:49 - string here we're going to call a
250:51 - function but this time because the two
250:53 - prop is not an event handler like on
250:55 - click is we can't pass it a function
250:58 - like this because it will just never get
251:00 - called instead we are going to run a
251:03 - function as soon as this component loads
251:05 - and that function is going to generate a
251:08 - string which will get put in its place
251:10 - inside of the two prop so let's get rid
251:12 - of this callback function and maybe we
251:15 - call this generate or gen new search
251:19 - param string it's kind of a mouthful and
251:22 - I'm going to make it so that this
251:24 - function will take a new key and a new
251:27 - value
251:28 - and in the case of the Jedi link we're
251:31 - going to say that the key is type and
251:34 - the value is Jedi keep in mind I haven't
251:37 - written this function yet so nothing's
251:38 - going to work quite yet but let's go
251:40 - ahead and copy this
251:42 - to this one and here
251:46 - we will say what we really want to do is
251:48 - change the type to null or in other
251:52 - words we'll just remove the type
251:53 - property from the search params entirely
251:55 - okay let's actually create this function
251:58 - so I'll say function gen search params
252:01 - this is going to take a key and a value
252:03 - like we mentioned and what we're going
252:05 - to do is create a new set of search
252:07 - params and I'm going to do that by using
252:09 - the new URL search params Constructor
252:11 - keep in mind this has nothing to do with
252:14 - react router this is completely outside
252:16 - of the purview of react router at this
252:18 - point the only thing we will use is
252:19 - we're going to initialize our new URL
252:22 - search params with the value of the old
252:24 - search params we didn't talk about this
252:27 - before but you might remember I
252:28 - mentioned that URL search params is very
252:30 - flexible in how you can initialize it
252:32 - and you can take another URL search
252:34 - params object and use that to initialize
252:37 - your new URL search params so that's
252:39 - what we're doing here and then all we're
252:41 - going to do is use those methods that we
252:43 - briefly mentioned like dot set and Dot
252:46 - delete in order to alter the search
252:47 - params object that we just created now
252:49 - we do have a couple different options
252:51 - for Value it could either be a string or
252:53 - it could be the value of null and so
252:56 - we're going to check for that we'll say
252:58 - if there's no value or maybe more
253:01 - specifically if the value is equal to
253:04 - null
253:05 - then we're going to use the method dot
253:07 - delete on the search params object again
253:09 - this isn't something that I've taught
253:11 - per se I'm just showing you one possible
253:13 - way to do this maybe I'm teaching this
253:15 - more to solidify it for my own
253:17 - understanding since this was such a
253:18 - struggle for me to grasp okay and for
253:21 - the delete method we're supposed to pass
253:22 - a string of the key that we're trying to
253:25 - delete we know that it's going to be
253:27 - type down here but since we're passing
253:29 - that in as the value of key or the
253:32 - parameter of key so we'll just say SP
253:34 - dot delete key if the value is not null
253:37 - we'll say else then we want to use a
253:40 - method called set and set is going to
253:43 - take two parameters it takes the key and
253:46 - the value in our case this will say set
253:49 - the search parameter of key equal to
253:51 - whatever the value is that we passed in
253:53 - so the key that we passed in will be the
253:55 - key the value that we passed in will be
253:57 - the value now we need to return
253:59 - something from this function because
254:00 - it's running as soon as the component
254:02 - loads and we know that we want it to
254:04 - return a string that has a question mark
254:06 - at the beginning let's go ahead and
254:09 - console.l log
254:11 - sp.2 string this is another method that
254:14 - we mentioned and we will see what that
254:16 - generates for us again it should run as
254:19 - soon as we refresh the page
254:21 - okay we get type equals Jedi oh I forgot
254:23 - to change this one to Sith let's do that
254:25 - okay we get type equals Jedi or type
254:28 - equals Sith now and so we want to return
254:30 - that let's go ahead and return
254:32 - sp.2string but we also want it to start
254:35 - with a question mark so let's just go
254:36 - ahead and put that into a template
254:39 - literal we'll say question mark and then
254:41 - we'll interpret the value of sp.2string
254:44 - there okay let's hit save
254:46 - let's click on the buttons are not quite
254:48 - ready but let's hit well they should
254:50 - still work like they were before
254:52 - okay so the links are working just like
254:54 - they were before but now let's go ahead
254:57 - and add name equals Bob
254:59 - and I'll click the link for Jedi and
255:01 - look at that it actually concatenated
255:03 - the Ampersand type equals Jedi on top of
255:06 - the name equals Bob now let's go ahead
255:08 - and hit Sith just to make sure that
255:10 - that's working and then we'll hit clear
255:12 - and sure enough it only got rid of the
255:14 - type property on our search params okay
255:17 - again this is not something specific to
255:19 - react router but because it was such a
255:21 - struggle for me I really want to at
255:23 - least have some reference to how you
255:25 - could do this in case you run into this
255:27 - problem so that you don't have to spend
255:29 - three or four days down a crazy Rabbit
255:31 - Hole trying to figure out how to do this
255:33 - in the end I guess that's a little
255:34 - disappointing because this isn't a whole
255:36 - lot of code to solve this problem but
255:38 - that's okay sometimes in the pursuit of
255:40 - Education that's just what happens okay
255:42 - in the next section let's actually
255:44 - tackle how we might do this using the
255:47 - buttons and the set search params Setter
255:50 - function
255:53 - okay let's tackle doing this in our
255:55 - buttons as well I mentioned a few times
255:57 - how the use search params Hook is very
256:00 - similar to the use statehook from react
256:03 - and it's not just in that it returns an
256:05 - array with two items that include the
256:07 - value and a function for setting the
256:09 - value but more deeply the function for
256:11 - setting the value can take two different
256:13 - kinds of parameters just like in use
256:15 - state it can either take a replacement
256:17 - value for the state or it can take a
256:20 - callback function and that callback
256:21 - function will receive the previous state
256:23 - so that you can use it to make changes
256:25 - to it let's see what that looks like
256:27 - we're going to need a little bit more
256:28 - room than just doing this inline so
256:30 - below our gen new search param string
256:33 - function we're going to create a
256:35 - function that's called maybe handle
256:37 - filter change
256:39 - we'll just get rid of everything here
256:42 - and actually we are going to need to
256:44 - take a parameter we'll probably call
256:46 - this the new filter or the maybe new
256:49 - type and we will change everything here
256:54 - yeah I think that's right and we'll say
256:55 - handle
256:56 - filter change parentheses and then we're
256:59 - going to pass in the new type we'll say
257:01 - is this one is Jedi
257:04 - and then we'll just do the same for
257:06 - these other ones
257:07 - this time I'll remember to change this
257:09 - one to Sith
257:10 - and here we will pass in null
257:13 - it might have been Overkill to pass in
257:15 - both the type parameter and the actual
257:18 - value parameter or the key and value up
257:20 - here since this function is currently
257:22 - living in the place where the only thing
257:24 - we're changing is type I guess I wrote
257:26 - it so that we could eventually move this
257:29 - function out to some kind of utility
257:31 - folder and theoretically use it across
257:33 - the entire application in other
257:35 - circumstances other than type maybe just
257:38 - for the sake of being similar I'll do
257:40 - the same thing here so we'll say we're
257:42 - going to pass in the actual key of the
257:44 - key value pair and then we will not just
257:47 - take the new type but we'll take the key
257:49 - as well and what the heck let's make
257:51 - this more generic too we'll just call it
257:52 - value okay back to what I was saying
257:54 - these Setter functions so we called it
257:56 - set search params we were just using it
257:58 - where we just passed in a new object
258:00 - that represented the replacement for the
258:02 - params but we found that that completely
258:04 - overwrote any other parameters that we
258:07 - might have just like the state Setter
258:09 - function with u State we can pass in a
258:11 - function and this function will receive
258:14 - a previous version of the params because
258:17 - it's an arrow function and we just have
258:18 - one parameter I can get rid of those
258:20 - surrounding parentheses and we will do
258:22 - something very similar up here we'll
258:24 - check if the incoming value is equal to
258:28 - null
258:29 - now this is where the set search params
258:31 - Setter function diverges pretty
258:33 - dramatically from the state Setter
258:35 - function in the state Setter function we
258:37 - would never take the state that we
258:39 - received here and make any direct
258:40 - modifications to it instead we would
258:43 - always create a copy of it somehow and
258:45 - only use its old values in order to
258:48 - determine the new values and we would
258:49 - return a completely new state as far as
258:52 - I can tell and I've confirmed this with
258:55 - the way that react router has some of
258:57 - their internal tests set up it's
258:59 - completely okay for us to modify the
259:02 - previous params object so in this case
259:04 - I'm going to say if the value is null
259:06 - then we'll run previous params.delete
259:09 - and it'll be the key whatever key we
259:11 - pass in
259:12 - if the value is not null then we'll say
259:16 - previous
259:17 - params.set whatever key and then
259:20 - whatever value and at the end because in
259:23 - this case we're not trying to turn it
259:25 - into a string we're trying to set it as
259:27 - a URL search params object we're just
259:30 - going to return the previous params
259:32 - again this feels a little icky to me
259:34 - because I'm used to having the state
259:35 - Setter B where you never modify the
259:37 - original object but as far as I can tell
259:39 - this is okay and I think that's all the
259:41 - code we need let's hit save again our
259:44 - links were working before we still have
259:46 - the question mark name Nicholas Bob up
259:47 - there let's go ahead and hit Sith okay
259:50 - it appended it to this string that's
259:52 - great same with Jedi and clear clears
259:54 - out the type but it does not clear out
259:56 - the name now you could go even further
259:58 - down this Rabbit Hole the truth is
260:00 - search params can have the same key
260:01 - multiple times so for whatever reason if
260:04 - I wanted to I could say name equals Bob
260:06 - and name equals Joe or type equals Jedi
260:10 - and type equals if and the way that
260:12 - we've written this it would would clear
260:13 - out okay I just had to confirm it yeah
260:15 - it would actually clear out both types
260:18 - in fact let's just see it in action well
260:20 - let me start out type equals Jedi we'll
260:22 - get rid of name equals Bob just to buy
260:24 - some space okay question mark type
260:26 - equals Jedi Ampersand type equals Sith
260:30 - so you can see that okay it's got both
260:33 - the clear function we'll just clear both
260:35 - of them out so that might not be ideal
260:37 - you would have to get much more
260:38 - complicated to actually search through
260:40 - the params object and only delete the
260:43 - type that you're trying to delete but
260:45 - now we're venturing into a realm that's
260:47 - much past the scope of this course in
260:49 - fact we might have already done that a
260:50 - little bit here but that's okay it's all
260:52 - great learning and hopefully I can save
260:54 - someone out there at least a few hours
260:55 - trying to struggle with understanding
260:57 - this with that behind us let's go back
260:59 - to the van Life app I'm going to
261:01 - implement some of these changes for you
261:02 - since it is like I mentioned a little
261:04 - bit outside the scope of this course and
261:06 - you know what let's lighten it up a
261:08 - little bit we'll have a pretty simple
261:09 - conditional rendering challenge so
261:11 - that's what we'll do in the next scrim
261:15 - okay we'll actually be doing two
261:17 - challenges the first one is to
261:19 - conditionally render this clear filter
261:21 - button only if there is a type parameter
261:23 - currently being applied in the search
261:25 - parameters we've been working a lot down
261:27 - here at the bottom of the file and
261:29 - changing the search parameters down here
261:31 - but remember every time we navigate to a
261:34 - new URL even if it's the same base URL
261:37 - with a different search parameter this
261:39 - entire component is getting re-rendered
261:41 - which means we have this value up here
261:43 - called type filter which will always be
261:45 - up to date with the newest filter that
261:47 - we've applied so understanding that
261:49 - conditionally render just this button
261:51 - and then we will jump into the next
261:52 - challenge right after that so pause now
261:54 - and work on challenge number one
262:01 - because this whole component is getting
262:03 - re-rendered we have this type filter
262:06 - variable which will tell us if the type
262:08 - is existing so it'll either be simple
262:11 - luxury rugged or it will be null if
262:14 - there is no type parameter in our search
262:16 - parameters so I can conditionally render
262:19 - this clear button by first wrapping it
262:22 - in a set of curly braces
262:24 - and we'll just use some shorthand here
262:26 - we'll say if type filter exists it's got
262:30 - a value then render this button commonly
262:33 - we will put something like a set of
262:35 - parentheses around the component like
262:37 - that
262:38 - and then we'll say otherwise render null
262:40 - so just don't render anything there okay
262:43 - let's clean up the formatting a little
262:44 - bit I'll put a little space here too in
262:46 - case that's easier to read and for some
262:48 - reason I want to put this on the same
262:49 - line I don't know if that's better or
262:51 - worse but it should be clear either way
262:54 - okay let's go ahead and hit save the
262:56 - clear filter should disappear perfect
262:58 - because we don't have any parameters
263:00 - right now and then when I click on these
263:03 - it appears awesome
263:04 - okay let me type out the challenge
263:06 - number two for you okay one of the
263:08 - things that's added in our CSS is if
263:12 - there is a filter applied then that
263:14 - color that you see when we hover will
263:16 - actually stay on the button as long as
263:17 - that filter is applied currently it's
263:19 - not doing that because it's only showing
263:21 - that on Hover however there's a class
263:23 - called selected that I created in the
263:25 - CSS that should make it so that it will
263:27 - stay that color if that filter is
263:29 - applied well more specifically if that
263:31 - class exists on the button so your task
263:34 - is to conditionally render the selected
263:36 - class name if the type filter is equal
263:39 - to the value that the button wants that
263:41 - filter to be I hope that makes sense I
263:43 - gave you a little bit of a hint here
263:45 - since it's a little bit difficult to
263:46 - explain but notice here that I'm using
263:48 - template strings but down here we are
263:50 - not we're just using regular quotation
263:52 - marks that's something that you will
263:54 - need to change oops not there here okay
263:56 - pause now and work on Challenge number
263:58 - two
264:04 - okay this line is going to get a little
264:06 - bit long in case you're working on a
264:08 - small screen I'm just going to squish
264:09 - this which clearly I haven't optimized
264:11 - my styles to handle a really really
264:13 - small screen like that so because we're
264:15 - going to be interpreting some JavaScript
264:17 - inside of this string we're going to use
264:19 - string interpolation so I'm going to
264:22 - select these class names and we'll
264:25 - change this to a template string and oh
264:27 - I need to surround this with curly
264:29 - braces awesome okay and now I'm going to
264:33 - stick in my dollar sign curly braces so
264:36 - I can say if type filter is equal to and
264:39 - then we will just grab these values here
264:43 - simple luxury or rugged
264:45 - then we will apply the selected class
264:48 - but otherwise we'll leave it as an empty
264:50 - string you know what just in case that
264:52 - is a little too wide let's go ahead and
264:54 - just put this on the next line like that
264:56 - okay first let's hit save
264:59 - and well this is good news the simple is
265:01 - already highlighted because when I hit
265:03 - save we had clicked the type equals
265:06 - simple before okay luxury rugged and
265:09 - clear now just by way of information one
265:12 - thing that I tried to do was use a nav
265:14 - link to accomplish this same thing but
265:17 - it turns out the nav link does not care
265:19 - about your search parameter so when I
265:21 - used a navalink and I accessed the is
265:24 - active property on the render Prop class
265:26 - name and tried to use that instead of
265:28 - the type filter equals the simple it
265:31 - just didn't work well what happened is
265:33 - all of them were highlighted because
265:34 - this route Vans is active and the two
265:37 - prop was sending them to the same path
265:40 - it just was changing the query string so
265:42 - just a little extra information for you
265:44 - as if there wasn't already enough to try
265:46 - and digest in this course all right at
265:48 - this point we have just a few more
265:50 - little odds and ends that we need to add
265:52 - to our app so we're going to start
265:54 - working on those
265:58 - check it out I found a loose end that I
266:01 - just forgot to fix when we were learning
266:03 - about relative paths because here we
266:05 - have a link that still has an absolute
266:07 - path I actually also found one over in
266:09 - the host Vans page which you'll go check
266:11 - out next so I'm going to make you make
266:12 - these changes change the absolute path
266:14 - in this link and the one over in
266:17 - hostfans.jsx to be relative paths pause
266:19 - now and work on these many challenges
266:27 - we know it's an absolute path because it
266:29 - starts with a slash and so we had to
266:31 - give the entire route all the way up to
266:33 - the ID here but we don't need to do that
266:36 - because we're already living within the
266:38 - context of Slash Vans and so we can just
266:41 - get rid of Slash bands and then the
266:42 - Slash and we can just have the van ID
266:44 - however I can actually take this even
266:46 - one step further if we look closely at
266:48 - the server the IDS are strings already
266:50 - and so rather than create a template
266:53 - string and then just the only thing I'm
266:55 - rendering is the value of the ID we can
266:58 - just get rid of our template strings
266:59 - entirely and say van dot ID like this we
267:04 - can hit save and we can see that these
267:07 - are working just like they were before
267:09 - okay let's clean this up and let's head
267:12 - over to the host Vans page we're just
267:16 - doing the same thing so I'm going to
267:18 - clean this up too and here we have slash
267:20 - host slash Vans slash ID and we can just
267:23 - do exactly what we did before and just
267:25 - display the ID because again this
267:28 - component is living within the context
267:30 - of Slash host slash Vans already and so
267:33 - the link is relative to say just append
267:35 - the ID on the end of the URL we'll hit
267:38 - save go over to host Vans and clicking
267:42 - on any of these okay works great okay
267:45 - there's at least one more loose end we
267:47 - need to clean up so we'll do that next
267:52 - the design did show this back to all
267:54 - Vans link inside the host Vans detail
267:57 - page and we already implemented that
267:59 - however the design also shows that
268:02 - there's supposed to be one on the
268:03 - regular full list of Vans detail page
268:05 - you can see it here we're supposed to
268:08 - have back to all Vans now there's
268:10 - actually a bunch of different ways to
268:12 - implement navigation with react router
268:14 - and we've already seen using the
268:16 - relative let's see where is it host van
268:19 - detail this relative dot dot path which
268:22 - takes us up one level and we talked
268:24 - about the relative equals path which
268:26 - makes it so that it's a back button
268:28 - relative to the path or rather it takes
268:30 - us up one level on the path but not one
268:33 - level in the route hierarchy as we have
268:36 - here so one thing we could maybe think
268:39 - to do is go here just grab this link
268:42 - we'll come to our host Vans no our vans
268:46 - detail page and then just right here
268:49 - above where the van is supposed to go
268:51 - we'll just stick our link one thing
268:52 - that's I guess kind of nice about this
268:54 - is we have relative paths and so I think
268:57 - this should just work now we have back
268:59 - to all Vans we click it and sure enough
269:01 - it takes us back to slash fans okay we
269:04 - could just stop there but let's try to
269:05 - think of the user's workflow here maybe
269:08 - they're on the list of Vans page and
269:10 - they filter by let's say luxury they
269:13 - click on Good Old Reliable red and they
269:16 - maybe look at this and say Ah that's not
269:18 - for me I'm gonna go back now when they
269:20 - click back what is it going to take them
269:22 - back to well let's see we click back to
269:25 - all Vans and now we're back at the slash
269:26 - Vans page and they have lost their
269:28 - filtering of course with only one simple
269:31 - filter it's not that big of a deal but
269:33 - if you imagine something like Airbnb
269:35 - where you set up maybe four or five or
269:38 - six different filters for what you're
269:40 - looking for if you were to go into one
269:42 - and then click a link that said back and
269:44 - it just took you back and removed all of
269:46 - your filters that's not a great user
269:48 - experience well it turns out there's a
269:50 - number of different ways that we can
269:51 - Implement how to make it so that this
269:53 - takes us back to just the vans that we
269:56 - had filtered already by luxury so that's
269:58 - the next challenge we're going to be
270:00 - working on but don't worry it won't be
270:01 - too difficult that's what we're going to
270:03 - start working on next
270:07 - okay so we know that we want to be able
270:09 - to filter the list click on one of the
270:11 - Vans and then have some information that
270:14 - shows us what the filter used to be on
270:17 - the last page like I mentioned there's
270:19 - usually a lot of different ways to do
270:21 - things for example one way that we could
270:23 - accomplish this is take the search
270:25 - parameter directly from the current URL
270:28 - and instead of linking to slash van five
270:32 - in this example we could just tack on
270:34 - that query string that represents the
270:36 - search parameters and have it actually
270:38 - lead us to slash Vans slash Five
270:40 - question mark type equals luxury and
270:42 - then when we're on this page we would
270:44 - have that directly in the search
270:46 - parameters and we could pull it from the
270:48 - search parameters and go back to all
270:49 - vans that said I personally don't love
270:51 - the semantics of that solution and the
270:53 - reason is because if I'm looking here at
270:55 - slash van five I can already tell that
270:58 - this is a luxury van the query string at
271:01 - the top that would say type equals
271:02 - luxury would feel redundant to me
271:04 - because this represents a single van it
271:06 - doesn't represent represent a list that
271:08 - I can filter down and at this point we
271:10 - could Branch into two different user
271:12 - experiences let's say you found this
271:14 - awesome van you're really excited about
271:15 - it you grab the URL and you want to send
271:18 - it to your friend if it has that query
271:20 - string in there then theoretically they
271:21 - could come to this page and they could
271:23 - click go back to all Vans and it would
271:25 - take them back to just the luxury Vans
271:27 - because it's been filtered and if that's
271:30 - your desired use case then that's the
271:32 - best way to go the URL is the only thing
271:34 - that will persist from one user to the
271:36 - next however my argument would be that
271:39 - that's probably not as common so for
271:41 - this instance let's assume that we
271:43 - really don't care about keeping the
271:44 - filtering when we're sharing the URL to
271:46 - another friend and by that I mean on the
271:48 - detail page when we go back to all Vans
271:50 - if we filter it by luxury we probably do
271:53 - want to share only the list of luxury
271:55 - Vans when we're trying to decide what
271:57 - van we're choosing with a friend but
271:59 - maybe I'm making too many assumptions we
272:01 - talked about earlier how the search
272:03 - parameters are great for something
272:05 - that's going to persist especially like
272:07 - just said from one user to the next but
272:09 - I want you to pause for a second and see
272:11 - if you can remember what is the
272:12 - structure or maybe what is the tool that
272:14 - we can use if we want to save some
272:17 - information while we're still here on
272:19 - our page but we don't necessarily care
272:21 - if it's going to survive transferring
272:23 - the URL to another person that's where
272:26 - State comes in and in this case I'm not
272:28 - talking about react state I'm talking
272:30 - about something called history State and
272:32 - don't let that be scary the truth is the
272:34 - browser has the ability to save some
272:37 - kind of state between one link or one
272:39 - URL and the next and react router has
272:42 - made it very easy for us to add things
272:44 - to that link state so first what we're
272:47 - going to do is add some state to our
272:49 - link we're here in our vans page this is
272:51 - the Vans list page and the idea is to
272:53 - say we want to link to the individual
272:56 - van but we want to pass some additional
272:58 - information to that page so the first
273:01 - thing we'll do is see how to pass that
273:02 - state to the next page and in the next
273:04 - scrim we'll learn how to you could say
273:06 - catch that state and make use of it and
273:09 - this here is actually so simple it's not
273:11 - even challenge worthy when I'm linking
273:13 - to a resource I can simply add another
273:16 - prop to my link called State and I could
273:19 - set the state to whatever I want it
273:20 - could be a string I could just say
273:22 - whatever and when I get to my next route
273:24 - the van ID page I can grab that state
273:27 - and it will be the string whatever I
273:30 - don't prefer to pass raw values like
273:32 - this in my state I think it reads A
273:34 - little better to pass an object and so
273:36 - I'm going to use my curly braces to get
273:38 - into JavaScript and then I'm going to
273:40 - pass in an object and the idea here is
273:43 - we want to pass the information
273:44 - regarding the current type filter over
273:46 - to the next route so that that route
273:49 - when we get to say one of these Vans can
273:51 - grab that information about the type
273:53 - filter knowing which type it was just
273:55 - filtering from and can change the link
273:58 - here so that it goes back to just the
274:01 - for example luxury bands now I could
274:03 - just pass a property maybe called type
274:07 - and say that it's going to be equal to
274:09 - whatever the current type filter is
274:12 - remember type filter is coming from the
274:14 - search params and so it's either going
274:16 - to be just the plane string simple
274:18 - luxury rugged or I guess it was null if
274:21 - there are no filters but let's think one
274:24 - step ahead if the idea is that I don't
274:26 - lose all of my query strings when I go
274:28 - into the van and then click back to all
274:30 - Vans I'm going to try and future proof
274:33 - this a little bit so if I do have other
274:35 - query strings like we had name equals
274:37 - Joe
274:38 - and I go also to rugged so now I have
274:40 - two parameters I have name and type we
274:43 - go into an individual van when I click
274:45 - back to all vins I don't just want to
274:47 - have the type filter there because maybe
274:50 - eventually we have this sorted by Price
274:52 - or filtered by Price within a certain
274:54 - range or whatever other filters or sorts
274:56 - we might have so yeah let's try and
274:58 - future proof this instead of just
275:00 - passing the type by itself I'm going to
275:03 - take the entire query string and pass
275:05 - that down so let's get our object back
275:07 - and maybe what I'll do is let's just
275:10 - call it search params and actually I
275:13 - could just leave it like this I could
275:15 - just say search params is the search
275:17 - params value that we have this is the
275:20 - URL search params object but honestly I
275:23 - don't think the van detail page needs
275:25 - the entire object I think really what it
275:27 - needs is just the query string this
275:29 - one's just a judgment call it doesn't
275:30 - really matter too much maybe I will just
275:33 - call this search and then we'll say the
275:35 - value is search params.tostring again
275:38 - and it probably just depends on the
275:39 - needs in your scenario but the point is
275:41 - this should take the entire search
275:44 - params in its stringified version and
275:47 - pass it along to the next route that
275:49 - we're linking to this is beneficial
275:52 - again if we have multiple search
275:53 - parameters not just one filtering by
275:55 - type and just in case you forgot let's
275:57 - console.log search params dot to string
276:01 - so you have an idea of the value that
276:03 - I'm actually passing in the state here
276:05 - let's save open up the console and of
276:09 - course right now there is nothing will
276:10 - hit luxury okay so it's type equals
276:12 - luxury if I add other ones like and name
276:16 - equals Joe
276:17 - now we have type equals luxury and name
276:19 - equals Joe just note that it doesn't
276:21 - have the question mark at the beginning
276:22 - so we will need to add that manually we
276:25 - could either do it here or I'm just
276:26 - going to do it on the other side of the
276:28 - equation in the next scrum we'll talk
276:29 - about the van detail page and how we can
276:32 - grab the state that we're bringing in by
276:34 - adding it to the link to that page
276:39 - okay so we are linking to the van detail
276:43 - Page by its ID and we're passing this
276:45 - state along with the link so let's go
276:47 - over to Van detail and learn how we can
276:50 - receive the state from the incoming link
276:52 - that sent us to this page doing so will
276:55 - require us to learn a new hook called
276:56 - use location and I'm going to be
276:58 - perfectly honest you can probably tell
277:00 - from the screenshot here the
277:02 - documentation on use location I think
277:04 - has a little bit of work to be done but
277:06 - nonetheless I link to it here just in
277:08 - case it gets updated or maybe I'll
277:10 - submit a PR and actually update their
277:12 - documentation to have more useful
277:14 - examples so I'm going to import use
277:17 - location use location is more like the
277:20 - the use params where it doesn't bring in
277:23 - an array like we have with you state or
277:25 - with use search params so I'm going to
277:28 - say const location equals use location
277:31 - and this location object is well it's
277:34 - just that it's an object so let's go
277:36 - ahead and console log it and we need to
277:38 - go over to the detail page to run that
277:40 - code okay and you can see it's an object
277:42 - with a number of pretty helpful
277:44 - properties pathname gives us the
277:46 - absolute path to where we currently are
277:48 - in our routes search would have a query
277:51 - string there if this page had a query
277:53 - string in fact I can see that by saying
277:55 - question mark name equals Bob hit enter
277:58 - okay so now we can see the path name is
278:00 - slash van five the search is question
278:03 - mark name equals Bob and that came from
278:05 - the query up there of course you can
278:06 - also see that the state says it's null
278:08 - and that's because I navigated to a new
278:11 - page by adding this query string so let
278:13 - me actually go back in the browser and I
278:16 - guess this brings up a really good point
278:17 - you can see that just by hitting back I
278:19 - was able to bring back the search state
278:21 - if you look in the console there's a
278:23 - property called State and it has an
278:24 - object with a search property as a
278:27 - reminder that's what we created we chose
278:28 - to call it search this isn't something
278:30 - browser specific the property State
278:32 - however is something specific from react
278:35 - router but the cool thing is I was able
278:37 - to hit the back button and bring that
278:39 - state back even though it did a refresh
278:42 - of my app and in fact even if I do
278:44 - refresh the app you can see the state is
278:46 - maintained this is what I meant by
278:48 - saying that the browser has its own
278:50 - internal ability to maintain some kind
278:52 - of state based on where you are in the
278:55 - app and that's all react router is using
278:56 - under the hood now there is a limitation
278:58 - to this if I copy this URL and I send it
279:01 - to a friend their browser does not have
279:03 - that same state there's nothing in the
279:05 - URL that's hidden or secret about the
279:07 - state that I'm trying to maintain it's
279:09 - something specific in our browser in
279:10 - fact even if I were to open a different
279:12 - browser and use the same URL that state
279:14 - would just disappear in this case though
279:16 - that's probably okay because if I'm in a
279:19 - new browser or I send the link to my
279:20 - friend they may not necessarily care to
279:23 - go back to all the luxury Vans like what
279:26 - I'm trying to handle here okay so by
279:28 - using the use location hook we have
279:31 - access to the state which is an object
279:33 - that has a search property because
279:35 - that's how we set it up in the Vans list
279:37 - page so that sounds like a pretty good
279:39 - time for a challenge now
279:41 - okay your challenge is to modify the
279:43 - link to prop so that it can send the
279:45 - user back to the previous page with the
279:47 - search parameters included if and this
279:50 - is important if they exist like the
279:52 - little note says here we may not have
279:54 - anything in the state if there were no
279:56 - filters applied maybe I came to that
279:58 - page and you can see in this case it
280:00 - says the state search is an empty string
280:03 - or as we discovered we may not be
280:06 - sending State at all if I were to add a
280:08 - random parameter up here say name equals
280:10 - Bob then state is null so we don't even
280:12 - have a state.search keeping that in mind
280:15 - you'll want to make sure that you code
280:16 - defensively so that you don't run into a
280:19 - bug in case that happens okay pause now
280:21 - and work on this challenge
280:28 - okay now I did leave you in the dark a
280:31 - little bit and I'm hoping that you just
280:32 - had a chance to play with the code to
280:34 - figure this out yourself but when we
280:36 - have a relative path like this with just
280:38 - dot dot I still can say question mark
280:41 - maybe type equals simple and have that
280:44 - work so if I hit save I'm just hard
280:46 - coding this of course for now I'll click
280:48 - back to all Vans and you'll see that our
280:50 - simple filter is applied so let's change
280:53 - this back to luxury of course what this
280:55 - did is it lost the name equals Bob but
280:58 - that's because we're hard coding it this
280:59 - isn't the final solution let's go luxury
281:01 - we'll click on a van and we have state
281:03 - DOT search now we have location dot
281:07 - State actually let me open the console
281:08 - again location dot state DOT search and
281:12 - that's going to be the query that we
281:14 - want to include don't let this be
281:17 - confused with the location dot search
281:19 - again that's just whatever search is in
281:22 - the URL at the current time when this
281:24 - loads and actually you know what I'm
281:25 - seeing something now the way that react
281:27 - router handle search is is including a
281:30 - question mark at the beginning so for
281:31 - the sake of consistency I'm going to
281:33 - make a quick change over here instead of
281:36 - the value just being the search
281:38 - params.2string I'm going to have it
281:40 - include a question mark so we'll just do
281:43 - this I didn't expect you to figure that
281:46 - one out that's just a choice that I'm
281:47 - making okay so let's try this again
281:49 - we'll go back to all Vans let's maybe
281:51 - hit refresh we'll change the type to
281:53 - luxury go over here okay so now our
281:57 - search has the question mark in it again
281:59 - not necessary but it seems a little more
282:01 - consistent to me so because of that I
282:04 - can just change my to prop and we could
282:07 - just say this is going to be a template
282:10 - string and it's going to start with a
282:11 - dot dot and then include location dot
282:15 - state DOT search right well not quite
282:17 - because again there's a possibility that
282:20 - the value of state is going to be null
282:22 - if the value of state.search is an empty
282:25 - string this works fine but if state is
282:27 - null this is going to throw an error so
282:29 - what I'm going to do is create a sort of
282:31 - backup for the
282:33 - location.state.search just in case it
282:35 - doesn't exist let's go ahead and save it
282:37 - we'll call it maybe I don't know we'll
282:39 - say const search
282:41 - is equal to
282:44 - location.state.search and there's a
282:46 - relatively new feature in JavaScript
282:48 - that's called optional chaining in fact
282:50 - it's new enough that scrimp is going to
282:52 - complain about the syntax but I promise
282:54 - you it still works and so I can say if
282:56 - location dot state is a thing then check
282:59 - for a search property and that value is
283:02 - going to be the value of my new variable
283:03 - that I'm setting up but if that doesn't
283:05 - exist let's just say it's an empty
283:07 - string that gives me a fallback just in
283:10 - case location dot states does not exist
283:12 - my value will be an empty string so I'm
283:15 - going to take my search and replace well
283:19 - I guess we can just delete that part and
283:21 - say the search will go here let's hit
283:23 - save or close my console to buy some
283:26 - space let's go back to all Vans and
283:29 - awesome that took us to type equals
283:30 - luxury perfect rugged go into one of
283:33 - them back to all Vans type equals rugged
283:35 - if you didn't know about optional
283:37 - chaining or you didn't want to use
283:38 - optional chaining you could also simply
283:40 - say something like
283:42 - location.state and location dot state
283:46 - DOT search this is usually how it was
283:49 - done before optional chaining existed in
283:51 - JavaScript but because optional chaining
283:53 - does exist even though scrim is going to
283:55 - complain about the syntax I'm going to
283:57 - leave it in here what's nice about this
283:59 - is it should work with any other filters
284:02 - or queries that we have included in our
284:05 - URL so if I add back my and name equals
284:08 - Joe I click on one of the rug Advance
284:11 - now we have type and name in our queries
284:13 - we go here and then I say back to all
284:16 - Vans it's going to maintain both the
284:19 - type query and the name query all right
284:22 - that was a lot to take in as always if
284:24 - you did struggle through this challenge
284:26 - now that you've seen me do it I
284:27 - recommend you scrub Back to Before The
284:29 - Challenge and just try it again on your
284:31 - own practice really does make perfect
284:33 - since that one was pretty heavy let's do
284:35 - a quick challenge that's going to be a
284:37 - little bit lighter and then we'll be
284:38 - ready to move on
284:42 - let's say a product manager comes to you
284:45 - and says well when a filter is applied
284:47 - we don't want it to say back to all Vans
284:49 - we want it to say back to and then the
284:51 - filter then so back to luxury Vans or
284:54 - back to simple vans so that's what your
284:56 - challenge is and I'm not going to give
284:58 - you too much more information there's
285:00 - certainly more than one way to do this
285:01 - but I want you to put on your thinking
285:03 - Gap and try to figure it out so pause
285:05 - now and work on the challenge
285:12 - well one way I could do this is to take
285:14 - the string let me open my console I
285:17 - could take the
285:19 - location.state.search string and try to
285:21 - just do some regular string manipulation
285:23 - like split it on the ampersands and then
285:25 - split it on the equal signs and grab the
285:27 - one that's after the type or something
285:29 - like that however because the string is
285:31 - a query string one way to solve this is
285:34 - I could create a new instance of URL
285:36 - search params and then I have access to
285:38 - the methods like dot get to get the
285:40 - value of the type param so that's one
285:42 - way I could solve it another way I could
285:44 - solve it is in Vans I could just pass
285:46 - more State through so right now we have
285:48 - the search I could also say I want to
285:51 - pass the type in say the type is going
285:54 - to be equal to and in this case we
285:56 - already have access to that with type
285:57 - filter and we put these on their own
285:59 - lines and then if I do that over in Van
286:02 - detail I can grab that string by
286:05 - location.state.type since I've already
286:07 - got that typed out I might as well just
286:09 - keep going down this path so we'll hit
286:11 - save
286:12 - let's go back to all Vans and just do a
286:15 - refresh we'll say rugged
286:17 - okay so now you can see the
286:19 - location.state is an object that has
286:21 - search and type so I'll just do
286:23 - something similar here we'll say const
286:26 - type is equal to location dot State
286:30 - question mark DOT type and if that
286:33 - doesn't exist like for example if
286:35 - location dot state is null then we'll
286:37 - just set the type to well actually let's
286:40 - set it equal to all because we do want
286:42 - it to say back to all Vans if there is
286:44 - no filter applied and now I can take
286:47 - this type and just conditionally render
286:49 - this word here we'll just say back to
286:52 - and then put type Vans okay let's see if
286:56 - this works let me close the console
286:57 - we'll hit save
287:00 - okay it says back to rec advance so I
287:02 - think it's working let's go back we'll
287:04 - clear the filter we'll go back to one of
287:07 - them back to all Vans that's great let's
287:09 - try luxury back to luxury Vans simple
287:12 - awesome
287:13 - again we even talked about multiple
287:15 - different ways that you can solve this
287:17 - at that point it's just sort of a
287:18 - JavaScript challenge as a quick recap
287:20 - passing State through the links can be a
287:23 - really useful thing okay hopefully that
287:25 - challenge went okay again review it if
287:27 - you need to and then when you're ready
287:29 - we'll move on
287:33 - a really important part of any
287:35 - application is being able to give useful
287:38 - information to people when they come to
287:40 - a path that doesn't actually exist on
287:42 - your site sometimes this happens if you
287:45 - have outdated links within your own site
287:47 - and they lead to pages that no longer
287:49 - exist or it might happen if somebody
287:51 - else links to your site and they either
287:54 - got the link wrong or again they're
287:55 - using an outdated link that no longer
287:57 - exists for example if I'm here and I
288:00 - type in slash blah blah blah and hit
288:02 - enter you can see there's really no
288:04 - useful information on our site because
288:06 - react router is not handling a blah blah
288:09 - blah route this is where a good 404 page
288:12 - comes in and I've seen some really
288:14 - creative interesting 404 pages but we're
288:16 - just going to keep it pretty simple for
288:17 - now so how can we handle this in react
288:20 - router fortunately it's really easy
288:22 - there's something called a Splat route
288:24 - or a catch-all route and that has
288:26 - everything to do with what you put for
288:28 - your path here inside of my layout route
288:31 - because you can see in our example here
288:33 - we still have the navigation bar and we
288:35 - still have the footer so that's the
288:37 - reason I'm choosing to do this as a
288:39 - nested route inside of my layout I could
288:41 - if I didn't want to have the navigation
288:43 - or footer I could have a completely
288:45 - dedicated 404 page that didn't have
288:47 - those elements in which case it would go
288:49 - as a child of routes right here but
288:51 - let's keep it as a child of our slash
288:53 - route so I'll create a new route
288:55 - and a catch-all route is going to be
288:58 - very similar to if you've ever used a
289:00 - universal selector or a catch Hall
289:02 - selector in CSS we're going to use the
289:04 - asterisk this essentially means if there
289:07 - are no other routes listed then use this
289:10 - route which is why it's called a
289:12 - catch-all it'll catch anything that
289:14 - doesn't match elsewhere let's go ahead
289:16 - and put an element that just says maybe
289:18 - an H1
289:20 - that says page not found
289:22 - we're still on the slash blah blah blah
289:25 - route let's hit save and here we go we
289:27 - have this is a very basic version of it
289:29 - but we have a page not found sort of
289:31 - catch-all here one thing that's really
289:33 - cool about react router 6 is that it's a
289:36 - lot more intelligent under the hood
289:37 - about scoring the paths that we have
289:40 - based on what the actual text of our URL
289:43 - is what I mean is that even though our
289:45 - catch-all path is at the top of our list
289:47 - of paths I can still navigate around my
289:49 - site and it's not going to prefer the
289:53 - first one in the list instead it's going
289:55 - to give a score under the hood about
289:57 - which of these paths best matches where
289:59 - I currently am in my site in the past we
290:02 - did have to worry about what order we
290:04 - put things in but we no longer have to
290:05 - do that now it feels a little bit out of
290:08 - order for me to put the page not found
290:10 - first so I'm actually going to bump this
290:12 - down to the very bottom that'll go right
290:15 - there
290:16 - and because react router is really smart
290:18 - about how it prefers the different paths
290:21 - that we have available it doesn't really
290:22 - matter so I can still navigate around my
290:25 - site just like I was before and if I
290:28 - were to have a link that sent me to the
290:30 - wrong place like slash blah blah we'll
290:32 - get our page not found the way that we
290:34 - would expect now this isn't very
290:36 - exciting let's go ahead and as part of a
290:38 - challenge have you create a bit more of
290:40 - a polished 404 not found page let me
290:42 - type that challenge out now
290:45 - okay I deleted the not found that we had
290:48 - before so if I hit refresh we'll be back
290:50 - to a completely blank page and your
290:52 - challenge is to create an actual 404
290:54 - page I have the design here of course
290:57 - you can click on the screenshot to go to
290:58 - figma but the key components are just an
291:01 - H1 and a button that will take you back
291:03 - to the slash route so if you just want
291:05 - to put those and you don't want to spend
291:07 - time with CSS that's okay
291:09 - so you'll create a new component in the
291:11 - Pages directory you'll add that H1 and
291:13 - that button from the design and again
291:15 - you can style it if you want then you'll
291:17 - need to recreate the catch-all path that
291:20 - we just created and you will import and
291:22 - use that not found component that you
291:24 - just created as the element for that
291:25 - catch-all route pause now and create our
291:27 - 404 page
291:33 - foreign okay well let's just go through
291:36 - one at a time we'll create this new page
291:39 - called not found.jsx I guess you could
291:42 - call it 404 as well we'll get it set up
291:45 - like normal
291:49 - okay and I'll go ahead and add the
291:52 - message that we see in the design sorry
291:54 - the page you were looking for was not
291:56 - found
292:00 - okay there's no Styles quite yet but
292:02 - you'll notice that I also already
292:03 - imported the link from react router down
292:06 - because I wanted to send people back to
292:07 - the home page so I set up the link there
292:10 - I'll have to make it look like a button
292:11 - instead of an anchor later now let's
292:13 - make it so we can actually see this not
292:15 - found page let's go over to our index
292:18 - we will import the not found page
292:22 - and this one is under pages and so I'll
292:24 - actually move this to be up with the
292:26 - pages
292:27 - okay let's add our catch all route again
292:30 - I prefer this one just a personal
292:32 - preference to be at the end because that
292:34 - makes a little more sense to me we'll
292:36 - see that the path is the asterisk and
292:39 - the element
292:40 - is an instantiation of not found okay
292:45 - we're still on the blah blah route so
292:47 - when we hit save we should see our new
292:49 - not found page awesome yeah again this
292:52 - return to home is not styled at all like
292:54 - we would expect but that's something
292:57 - that a magic snap of the fingers can
292:59 - handle for us just fine so we have our
293:02 - 404 page we're at the blah blah blah
293:04 - route return to home takes us back to
293:06 - the home page hopefully this one felt
293:08 - like a quick win it's fairly easy to
293:10 - understand there's also some other
293:12 - things that you can do with these what
293:14 - they call Splat routes or catch-all
293:16 - routes but for now we're just going to
293:18 - use it as our 404 page great work and
293:20 - I'll see you in the next lesson
293:24 - we are now basically done with the
293:26 - majority of the features that we plan to
293:28 - add to the van Life app but at the time
293:30 - of this recording there's a relatively
293:32 - new addition to react router that I want
293:34 - to make sure we cover and that's
293:36 - something called the data layer apis
293:37 - that were introduced in react router
293:39 - version 6.4 in order for us to really
293:42 - understand the purpose behind the data
293:44 - layer apis we need to realize that so
293:47 - far at least in this app we've basically
293:49 - been coding what you could call the
293:51 - happy path the happy path is when you as
293:53 - a developer just assume that the user is
293:56 - going to do everything exactly the way
293:58 - that you expect and everything just goes
294:00 - perfectly according to plan coding this
294:02 - way can be great for getting something
294:04 - up very quickly if you need to show it
294:06 - off to somebody but it doesn't account
294:08 - for any errors or other problems that do
294:11 - occur in the real world so although it's
294:14 - maybe a little more fun to code the
294:15 - happy path it's important that we as
294:18 - seasoned developers will code the sad
294:20 - path as well and that's where it forces
294:23 - us to imagine what could possibly go
294:24 - rung and makes us plan accordingly this
294:27 - is where we add things like error
294:29 - handling loading states form validation
294:31 - and all of those other really useful
294:34 - user experience things that you have
294:36 - experienced when you've used real
294:37 - applications of course you've also
294:39 - probably used applications that didn't
294:41 - code this ad path and hopefully
294:43 - understand that can be a pretty
294:44 - frustrating experience that we don't
294:46 - want to give to our users of the van
294:48 - Life app let me show you an example of
294:50 - that I've actually altered the server
294:52 - here to return a 400 level response
294:55 - that's just a server response that means
294:58 - that things are broken it's not sending
294:59 - back what we'd expect the syntax of this
295:02 - doesn't matter because it's specific to
295:04 - mirage.js but the point is over in
295:06 - vans.js when we get to our vans page
295:09 - we'll click on Vans and you can see we
295:12 - don't have any kind of useful
295:13 - information about how the Vans struggled
295:16 - to load and maybe try again later or try
295:18 - refreshing the page or anything like
295:20 - that instead the app just completely
295:22 - crashed because it is expecting that
295:24 - this fetch request will work perfectly
295:27 - it's setting the van's State and then we
295:30 - just assume that Vans exist and we're
295:32 - mapping over them as if everything were
295:34 - just fine and of course that throws a
295:37 - type error as you can see in the console
295:39 - which is causing our app to crash so in
295:41 - the next screencast we're going to see a
295:43 - little bit of the pain that is required
295:45 - for us to handle the error State and the
295:47 - loading state which will then bring us
295:48 - back to these new data layer apis with
295:51 - react router and we'll get to see that
295:54 - there's a big Improvement in the way
295:55 - that this can be handled so let's go
295:57 - through and see how we might fix our
295:58 - code to better handle the errors that
296:00 - we're seeing
296:03 - the first thing I'm going to do just for
296:06 - the sake of best practice is to take my
296:08 - fetch completely out of this component
296:10 - considering I may want to fetch these
296:13 - fans somewhere else instead of repeating
296:15 - this code over and over it's a better
296:17 - practice for me to create some kind of
296:19 - library or utility where I can get the
296:22 - vans that I need from a function and
296:24 - then inside of my component I would just
296:26 - call that function so let me create a
296:28 - new file we'll just call it api.js which
296:32 - is supposed to indicate that we are
296:34 - going to be interfacing with the API and
296:36 - I'm going to export we'll use an async
296:39 - function that we call get vans
296:42 - since I'm transitioning from what wasn't
296:44 - an async function before to an async
296:47 - function I'm going to be essentially
296:49 - using this code but rewriting it using
296:51 - async await so let's paste this in as a
296:54 - reference but we will change up what
296:57 - this looks like we'll say the response
296:59 - is await fetch then we will get the data
297:03 - we'll say const data equals await res
297:05 - dot Json and then this function's job is
297:08 - basically done it just needs to return
297:10 - the data and I think it was the Vans
297:13 - property on that data that we cared
297:14 - about so we'll get rid of these lines of
297:17 - code we're going to come back and
297:18 - actually work on the sad path for this
297:21 - because right now it's assuming that
297:22 - this fetch request is going to work just
297:24 - fine but let's refactor back here we
297:27 - will import our get Vans function
297:31 - and then instead of manually calling our
297:34 - fetch request here I could keep using my
297:36 - DOT then promise resolution syntax by
297:39 - saying get Vans dot then but while we're
297:41 - at it I might as well update this and
297:43 - use an async function now it's important
297:45 - if you remember from the introduction to
297:47 - react course that I taught if you took
297:49 - that that you can't just change your
297:51 - function here for Muse effect into an
297:52 - async function so the easiest thing is
297:55 - just to create a brand new async
297:56 - function inside here so we'll say async
297:59 - function maybe we'll call it load Vans
298:01 - just to get a different name that's
298:04 - going to call get vans
298:07 - and we will save that data we will just
298:10 - say const data equals and then we get to
298:14 - await get fans because we now are inside
298:16 - of an async function and before I forget
298:18 - because I do this all the time I'm going
298:20 - to call my load Vans function even
298:22 - though it's not quite done yet otherwise
298:24 - sometimes I end up pulling my hair out
298:26 - wondering why it's not working when it's
298:27 - just because I forgot to call the
298:29 - function okay so now I get to call my
298:31 - set fans function and pass in the data
298:33 - that we got from calling get Vans and
298:36 - just to make sure that this is working
298:37 - I'm going to get rid of this 400
298:40 - response and make it so that it's
298:42 - working again so let's hit refresh okay
298:45 - good our vans are showing up we've made
298:47 - a little bit of refactoring using this
298:49 - API JS file and cool now let's start
298:53 - working on actually coding up the sad
298:55 - path just for the sake of
298:57 - compartmentalizing the topics that we've
298:59 - been learning we're going to do that in
299:00 - the next lesson
299:04 - one thing about the way that the code is
299:06 - currently running is that we are only
299:08 - initializing the fetch request to get
299:10 - our vans after this component has
299:12 - already been rendered to the page the
299:14 - experience is a little bit jarring if I
299:16 - hit refresh you'll see we get parts of
299:18 - our page and then it starts to load as
299:20 - the data comes in we do handle this a
299:23 - little bit differently I think under
299:24 - host fans we have a tiny little loading
299:26 - state right there which in my opinion is
299:29 - a better user experience than what we
299:30 - have going on here unfortunately the way
299:33 - that we are handling that in the host
299:35 - Vans page I think right here is by
299:38 - assuming if the van's length is not
299:41 - greater than zero then we are loading
299:43 - something however if we have an error
299:46 - the man's length is not going to be
299:48 - greater than zero it's going to be stuck
299:49 - on loading forever or maybe this is a
299:52 - new host on our platform they don't have
299:53 - any vans listed and so when they come to
299:56 - this page it's going to say loading
299:57 - forever even though there are no Vans
299:59 - for it to load so this approach was
300:01 - pretty naive and we're going to find a
300:03 - better way to do that so let's go over
300:05 - to our vans page and a relatively common
300:07 - way to do this is to set some loading
300:10 - state so I'll go ahead and create a
300:12 - loading and set loading Boolean which we
300:16 - will save in react.use state we'll
300:19 - initialize the loading State as false
300:22 - but then as soon as we call our load
300:24 - Vans function we will set the loading
300:27 - state to true
300:28 - and as soon as we're done setting the
300:31 - vans in our state we will set the
300:32 - loading State as false again
300:34 - so it will only be true for a short
300:37 - amount of time while it's getting the
300:38 - Vans but this allows us to use this
300:40 - Boolean of loading to either
300:42 - conditionally render something on the
300:44 - page or what I think I'm going to do
300:46 - just for the sake of Simplicity is use
300:48 - an early return so I'll say if loading
300:51 - is true then instead of returning the
300:54 - whole jsx that we see down here we'll
300:56 - just do something simple like an H1 that
300:58 - says we are loading it's not going to be
301:01 - beautiful we could conditionally render
301:03 - something maybe underneath our buttons
301:05 - but for now this will get the job done
301:07 - let's hit save okay we see our loading
301:10 - for just a second and then our vans pop
301:12 - in in fact while we're doing this just
301:14 - to make it a little bit more apparent if
301:16 - I go to server.js I can add this little
301:18 - feature that says maybe like it will
301:21 - take let's say two seconds for things to
301:23 - load this isn't a syntax you need to
301:25 - know again because it's specific to
301:27 - mirage.js but now if I hit save it will
301:30 - very clearly show loading for a lot
301:32 - longer than it did before before things
301:34 - actually get loaded okay that wasn't so
301:36 - bad we created a loading State we set
301:39 - the loading to True before we did our
301:41 - fetch request and then after the fetch
301:43 - request we set it back to false and we
301:45 - handle the user interface case when
301:47 - things are currently loading remember we
301:49 - would need to then do this for every
301:52 - component that is loading data like the
301:54 - van detail page the host Vans page and I
301:57 - think even the host man detail page has
301:59 - a fetch request yep for now we're just
302:01 - going to worry about the Vans page and
302:03 - it's again not so much the sad path per
302:05 - se because we're not throwing errors
302:07 - right now but of course if we were to
302:09 - throw errors like we were doing before
302:11 - where we're just hard coding a error
302:14 - response from the server we are not yet
302:16 - fixing that problem so we're going to
302:18 - have the app crash and that's not good
302:21 - so in the next screencast we're going to
302:23 - talk about how we can handle these
302:25 - errors but remember all of this is
302:27 - leading back to these new data layer
302:29 - apis that we're going to be talking
302:30 - about I think this buildup is important
302:32 - which is why I'm taking time doing it
302:34 - but this is also just good to learn
302:36 - anyway okay I'll see you in the next
302:37 - lesson
302:41 - okay I mentioned before that we had
302:43 - written our little API get Vans function
302:46 - in a happy path sort of way that didn't
302:48 - account for any errors that might be
302:50 - happening and so behind the scenes I
302:51 - went through and I added this little
302:53 - check to make sure that the response has
302:55 - come back okay this is something that's
302:57 - built into fetch it will have a res dot
303:00 - OK property and if it's a 400 level or
303:03 - 500 level Response Code then it will not
303:06 - be okay that will be a false value so if
303:09 - that happens then we're throwing an
303:11 - error and currently we're not handling
303:13 - that error in our vans.js page this is
303:15 - still assuming a happy path now I've
303:17 - changed the server again like we saw to
303:20 - only respond with a 400 response so
303:23 - let's go to vans.jsx and let's handle
303:26 - our sad path here now you'll notice that
303:29 - this says loading here and that's
303:30 - because if I refresh this we'll see that
303:33 - our bands never come back but our error
303:35 - is successfully throwing so let's go
303:38 - ahead and fix this now when I'm making
303:40 - this request because I don't know for
303:42 - certain that it's going to work
303:43 - correctly I'm going to wrap it in a try
303:46 - catch block this is the common way to do
303:48 - this inside of an async function and so
303:51 - I'll move my set Vans up here the try
303:54 - will assume the happy path but now I
303:56 - have the ability to catch any errors
303:58 - that might happen and the catch block
304:01 - will be the sad path now what should
304:04 - happen when I get an error well first
304:06 - let's just console log the error to see
304:08 - what shows up and actually let's go
304:10 - ahead and console log something like
304:12 - there was an error open the console okay
304:16 - we get there was an error and look at
304:18 - that we get our error that we threw from
304:21 - the server no from the API file this
304:24 - object here that has a message status
304:26 - text and Status we can see that that is
304:29 - coming through in our console just fine
304:31 - so now we are handling that error we're
304:33 - not displaying anything but we no longer
304:35 - show loading we just don't have any vans
304:37 - to display that's not super useful for
304:39 - the user so let's go back to bands jsx
304:43 - we'll buy ourselves some room by closing
304:45 - the console and similar to what we did
304:48 - in the loading State we're going to
304:51 - create another state that is for errors
304:54 - so we'll say if there is an error we
304:56 - will
304:57 - so I have set error we'll probably start
305:01 - this out as a null error and if there is
305:04 - an error that happens here in my catch
305:06 - block we will set the error and we'll
305:09 - just pass in that object that we got
305:11 - from the error that got thrown earlier
305:14 - let's go ahead and get rid of our
305:16 - console logs and just because it exists
305:19 - I'm going to use a finally block I don't
305:21 - get to use this super often so go ahead
305:23 - and put our loading to false because
305:25 - whether we get the Vans or we get an
305:27 - error we want to set the loading back to
305:29 - false okay now we can handle the case
305:32 - when there is an error we have this
305:34 - early return for loading we'll do the
305:36 - same thing if there's an error so we'll
305:37 - say if there's an error we'll return
305:40 - let's just do another H1 for now and
305:43 - we'll say there was an error and then
305:47 - we'll go ahead and just stick the error
305:49 - in there let's see what that looks like
305:50 - again I'm hard coding an error in my
305:52 - server.js so we know that it will error
305:54 - loading and it's taking a lot longer
305:57 - than before ah okay so I can't do this
306:00 - whole error object here let's maybe do
306:02 - error. message I think is what it was
306:04 - okay there was an error failed to fetch
306:07 - Vans it's not beautiful just like our
306:09 - loading isn't beautiful but it is some
306:11 - feedback to the user that tells them
306:13 - that something happened now again we
306:15 - would want to do this for our van detail
306:18 - page our host Vans page our host Vans
306:20 - detail page and hopefully you're
306:22 - starting to see that there's a bunch of
306:24 - repetition there's a lot happening just
306:27 - to handle this sad path and if you think
306:29 - really hard about it a major reason that
306:32 - all of this is happening is because we
306:34 - are only starting our fetch request
306:36 - after this component loads remember when
306:39 - we weren't considering the possibility
306:40 - that Vans would not come back as an
306:43 - actual array of Vans that's back when we
306:46 - saw that when there was an error in the
306:48 - server it actually crashed our app
306:50 - because we were trying to map over
306:52 - something that was not an array well if
306:54 - we didn't load this component before we
306:57 - had access to the data then we wouldn't
306:59 - have to worry about that and
307:01 - theoretically the same would be true of
307:03 - the loading State and the error State
307:05 - because we're sort of prematurely
307:07 - jumping to this route and then starting
307:09 - a fetch request for the data there's a
307:12 - bunch of little edge cases that we need
307:13 - to handle now all of this leads us back
307:16 - to the data layer apis react router has
307:19 - introduced us a way that we can load our
307:21 - data before it ever transitions us to
307:23 - the route which will allow us to get rid
307:25 - of quite a bit of our boilerplate code
307:27 - that we have here so let's finally dive
307:30 - into these data layer apis and we have a
307:32 - bit of setup to do before we can use
307:34 - them so let's get started with that
307:39 - the first aspect that we are going to
307:41 - learn about in the new data layer apis
307:43 - in react router is loaders you can click
307:46 - on the screenshot here which will take
307:48 - you to the loader prop in the route
307:50 - component which we're going to get to in
307:52 - a little bit but I think it's helpful to
307:53 - know that the creators of react router
307:56 - are also the creators of a framework
307:58 - called remix I've had a chance to play
308:00 - with remix it's an amazing framework
308:02 - it's a full stack application that uses
308:04 - react and it's definitely worth checking
308:07 - out but the concept of a loader comes
308:09 - directly from remix in fact they
308:11 - introduced it into remix and then they
308:13 - loved it so much that Ryan Florence and
308:16 - Michael Jackson who are the creators of
308:18 - react router and remix they brought the
308:21 - aspects of loaders and something else
308:23 - called actions directly into react
308:25 - router in fact you can even see if you
308:27 - look closely in the screenshot we'll see
308:29 - this export async function loader and
308:31 - there's this export async function
308:33 - action that's the aspect that I'm
308:35 - talking about loaders and actions so how
308:37 - does this affect react router well as as
308:39 - you saw we are currently using a use
308:41 - effect in order to fetch our data and
308:44 - for a really long time in react this was
308:46 - kind of taught as the de facto way to
308:48 - fetch data for your components let's say
308:51 - that I'm currently on the slash about
308:52 - route and I want to transfer over to the
308:55 - Vans route so I click the link in my nav
308:57 - bar which will take me to Vans and what
308:59 - happens is the about page goes away it
309:02 - gets swapped for the Vans page and
309:04 - because we're fetching our data inside
309:06 - of a use effect it immediately starts
309:08 - loading the data or rather fetching the
309:09 - data from some external Source
309:11 - oftentimes this request is pretty fast
309:14 - and once the request comes back with a
309:17 - response then we get some Json from the
309:19 - API that we work fetching data from and
309:21 - then react does its thing where it
309:23 - re-renders it takes that Json and
309:25 - displays it the way that we told it to
309:27 - in the code and we can certainly make
309:29 - this work like I said this is how things
309:31 - were done for quite a while but like I
309:33 - mentioned because we're only loading the
309:35 - data after we have already loaded the
309:37 - page or rather mounted the component
309:39 - component that represents our page we
309:41 - have a lot of extra stuff that we need
309:43 - to add we're saving State for the Vans
309:46 - themselves the loading State the error
309:48 - State we have this use effect which is
309:50 - calling the data and it's got some error
309:52 - handling built in we're also handling if
309:55 - it's currently loading and if there's
309:58 - currently an error and it's certainly
309:59 - not the end of the world but let's take
310:01 - a look at the paradigm shift that we're
310:04 - about to learn when we use a loader for
310:06 - fetching our data instead this might
310:08 - seem like a small tweak but we're going
310:10 - to see how it can dramatically change
310:11 - our code so we're here on the about
310:13 - route we click over on the Vans route
310:16 - and the first thing that happens is it
310:18 - delays for just a moment or two during
310:20 - that delay it's starting the fetch
310:22 - request to get the data for the Vans
310:25 - page and that way when the data is
310:28 - finished coming back from the request it
310:30 - is already a part of the Vans page when
310:33 - it gets loaded up again this might seem
310:35 - like a small difference but we're going
310:37 - to see how it's going to allow us to
310:39 - send simplify quite a bit of the code
310:40 - that we have now for a high level
310:42 - overview of how we will end up using
310:44 - loaders the first thing we need to do is
310:46 - to export a function we will call it
310:49 - loader it doesn't technically matter
310:50 - what it's called from the page that will
310:53 - fetch the data that it needs in our case
310:55 - we're going to be working on the Vans
310:56 - jsx page because this page needs data so
311:00 - we're going to be creating another
311:01 - function that isn't our component it'll
311:03 - just be right here above it probably
311:05 - that we'll call loader and that will be
311:07 - the function that gets the data since
311:10 - we're exporting it from here over in our
311:12 - index.jsx where we have our route
311:14 - definitions we're going to pass a loader
311:16 - prop to the route and we'll pass in the
311:18 - loader function that we exported from
311:20 - our vans page and then back in our vans
311:23 - component we'll use a new Hook from
311:25 - react router called use loader data
311:27 - which allows us to get whatever data was
311:30 - returned from the function that is doing
311:32 - the fetch request again this is a high
311:34 - level overview we're going to obviously
311:36 - go through each one of these steps so
311:38 - don't worry if this seems a little
311:39 - overwhelming there is one tiny little
311:42 - problem before we can start working on
311:43 - this and that is we need to opt in to
311:46 - the new data layer apis and the way that
311:48 - we do that will require us to make some
311:50 - changes to our browser router setup that
311:53 - we have here so first we're going to
311:55 - tackle that and then we'll be coming
311:56 - back and actually creating our loaders
311:58 - and changing how the data loading
312:00 - happens on our vans page
312:05 - before we can take advantage of any of
312:07 - the data apis in react router 6.4 and
312:10 - later we need to change the way that
312:12 - we're instantiating or creating our
312:14 - router you can click the screenshot here
312:16 - to go to this picking a router page in
312:18 - the react router docs but you can see
312:20 - from the screenshot that there are a
312:22 - couple different ways to create routers
312:24 - that do allow us to use the data apis
312:26 - and then there are some other ways that
312:28 - won't include the capabilities of the
312:31 - data apis so you can see the top of that
312:34 - list that does not allow for the use of
312:36 - data apis is the browser router and
312:38 - that's the one that we've been using
312:39 - this is actually that silly Star Wars
312:41 - app that we used when we were learning
312:43 - some search params I've cleared out
312:45 - anything that wasn't really relevant
312:46 - actually there's a couple other things
312:48 - up here let's get rid of those and you
312:50 - can see that what we were doing is
312:51 - importing browser router and then just
312:53 - creating an instance of the browser
312:55 - router component here well in order to
312:57 - use these new data apis we need to
312:59 - create our browser router in a little
313:01 - bit of a different way so the first
313:03 - thing I need to do is import something
313:04 - called called create browser router and
313:08 - maybe the astute amongst you would
313:10 - notice that with the lowercase C that
313:11 - means that this is not a component
313:13 - instead it's a function that we're going
313:15 - to run so I'm going to save the router
313:18 - that this function returns so I'll call
313:21 - create browser router and then save it
313:22 - as a variable called router now what we
313:25 - have always learned what we've always
313:26 - done is defining our routes based on a
313:29 - series of nested components but one
313:32 - thing that maybe we didn't know was
313:33 - happening under the hood is that this
313:35 - routes component it's actually taking
313:37 - every route that we have in here and
313:39 - it's just turning it into a plain
313:41 - JavaScript object or maybe more
313:43 - accurately it's recursing through all of
313:45 - the children of this routes component
313:47 - and it's turning every route and every
313:50 - child of those routes into an array of
313:53 - Route objects and those might look
313:55 - something like this let's say we have an
313:57 - array in this case we only have one
313:59 - route so this will be our route object
314:01 - and it's going to have a path which is
314:04 - just flash is going to have an element
314:07 - which is
314:09 - the home page component that we have
314:12 - there and if this were to have any child
314:14 - routes which it doesn't currently
314:16 - because it's just self-closing but if it
314:18 - did then there might be a property
314:19 - called children and that would be
314:21 - another array of nested objects and so
314:23 - forth so this routes component behind
314:26 - the scenes in the source code of react
314:28 - router that's all it's doing with our
314:30 - routes here is it's turning them into an
314:32 - array of objects with nested arrays of
314:34 - objects and so forth so with create
314:36 - browser router we could go down the path
314:38 - of basically rewriting all of our routes
314:41 - in this case there's only one but
314:42 - obviously in the van Life app there's a
314:44 - lot more we could go through the process
314:46 - of converting all of those manually into
314:48 - an array of objects like this however in
314:51 - order to make things a little bit
314:52 - simpler for updating our code from a
314:55 - version prior to 6.4 up to version 6.4
314:59 - and making use of the data layer apis
315:01 - they also included a utility function
315:03 - called create routes from elements so
315:06 - I'm also going to import that just to
315:08 - make my life a little a little bit
315:09 - easier since I already have my routes
315:11 - defined so we'll say create routes from
315:15 - elements and this is getting a little
315:17 - crazy I'm going to put each of these on
315:19 - their own lines
315:21 - okay so what we can do is when we call
315:25 - create browser router we will inside of
315:27 - there also call create routes from
315:29 - elements and this way I can put my route
315:32 - elements directly inside of the create
315:36 - routes from elements basically this
315:38 - function will turn my route component
315:41 - into an object and then it will pass
315:43 - that object to create browser router so
315:46 - basically it does all of that manual
315:48 - work for me to be totally honest if I
315:50 - were creating this from scratch without
315:52 - some existing routes already defined I'm
315:55 - not 100 sure which way I would use I'm
315:57 - so used to using components like this
315:59 - that I might just turn to that naturally
316:01 - instead of typing out an object or an
316:04 - array of objects and whatnot but I don't
316:06 - know maybe the standard way will be just
316:07 - writing out objects either way this
316:10 - should do the trick for us there's one
316:11 - last piece that we need to do and that
316:13 - is to get rid of our browser router
316:16 - because browser router was specific to
316:18 - the non-data layer API routers that we
316:21 - we could choose from we need to use
316:23 - something different so there's yet
316:24 - another thing we're going to import
316:25 - actually maybe I'll just replace browser
316:28 - router here and what I need to bring in
316:29 - is something called router provider and
316:32 - this is a component so I can get rid of
316:35 - my browser router and I can actually get
316:37 - rid of well actually I can get rid of
316:39 - everything here so we're going to create
316:41 - our new router and that's going to be by
316:43 - using the router provider and then we're
316:46 - going to pass a prop called router and
316:48 - its value needs to be the browser router
316:50 - that gets created from create browser
316:52 - router so I've said the word router too
316:55 - many times for it to make sense anymore
316:56 - but router equals router and then this
316:58 - can just be a self-closing element and I
317:01 - guess let's cross our fingers we'll hit
317:04 - save and okay home page is still working
317:06 - and well that's all we have to test so
317:09 - I'm going to recap what we did because
317:10 - in the next lesson it will be a
317:12 - challenge to create the browser router
317:14 - just like we did here but for our van
317:16 - Life app so I have three new Imports
317:18 - router provider create browser router
317:21 - and create routes from elements I
317:23 - actually don't need this routes import
317:25 - anymore because I'm not using routes and
317:27 - then outside of the function where I'm
317:29 - going to be using this router provider I
317:32 - created a new variable called router the
317:34 - name of this variable doesn't matter and
317:36 - I'm calling create browser router and
317:38 - because I already had a route defined as
317:41 - a component like this I'm also using
317:43 - Create routes from elements that allows
317:46 - me to just copy and paste my entire
317:48 - route definitions right here into the
317:51 - new create browser router function that
317:53 - I'm calling then with this router
317:55 - variable defined I'm going to use the
317:57 - router provider and pass that variable
317:59 - to the router prop in my router provider
318:02 - component okay that's a lot to take in
318:04 - especially not having typed anything in
318:06 - this lesson so look through the code if
318:08 - you need to and in the next lesson I'll
318:10 - have you work on it yourself
318:15 - okay here we are back in the comfort of
318:17 - our van Life app your challenge is to
318:19 - change our router so that we can use the
318:22 - newer one that supports the data apis
318:23 - then we'll finally be prepared to start
318:26 - actually learning about the data apis
318:28 - and loaders so you'll need to import
318:30 - these three things that we learned about
318:31 - in the last lesson you'll need to create
318:33 - a router variable and I put a little
318:36 - note here just because in our example we
318:38 - only had a single route that didn't have
318:40 - any children but in this case you're
318:42 - just going to be copying over everything
318:44 - inside of our main route here and all of
318:46 - its children so that will go in your
318:48 - router variable which makes use of these
318:51 - different functions that we are
318:53 - importing and then you will replace
318:55 - basically everything in our app all the
318:57 - way through yeah everything with the new
319:00 - router provider that we imported I think
319:02 - you have plenty of hints here so I'm not
319:04 - going to make it too easy on you I want
319:06 - you to get your hands on the keyboard of
319:07 - course and practice everything you can
319:09 - practice so pause now and work on this
319:11 - challenge
319:17 - okay I am going to cheat and just copy
319:21 - these things we'll import those let's
319:23 - see there's a couple things we can get
319:24 - rid of let's get rid of our browser
319:26 - router and routes it will import those
319:28 - and then kind of clean up my language
319:30 - here
319:31 - and while we're at it I'll go ahead and
319:33 - put these on their own lines since we
319:34 - are running out of space
319:36 - okay that looks better now let's create
319:39 - a variable here we'll call it router and
319:43 - we will call create browser router and
319:46 - then so we don't have to manually go
319:48 - through and change all of these routes
319:50 - into an array of objects we're going to
319:53 - call create routes from elements
319:56 - and then I can just take my main route
319:59 - here and I'm actually just going to
320:02 - slide it up that creates our router and
320:06 - then I can replace our browser router
320:10 - with the router provider
320:12 - that will take a router prop and its
320:16 - value will be the router that we created
320:18 - above let's double check I'll clean up
320:21 - the challenge text and
320:24 - let's give it a shot I'll hit save and
320:27 - sure enough everything seems like it's
320:28 - working let's kind of navigate around
320:30 - our app a little bit and
320:33 - perfect so again we didn't change
320:36 - anything that will be visibly different
320:38 - on our page but fortunately we now can
320:41 - finally jump into learning about loaders
320:43 - which is what all of this has been a
320:45 - build up toward as always if you want to
320:48 - practice doing this again just to see
320:50 - the two different methods of creating
320:51 - routers you can scroll back to the
320:53 - beginning of the lesson and try it out
320:55 - again from scratch and as always when
320:57 - you're ready we will keep moving forward
321:02 - okay we're going to approach loaders
321:04 - just one step at a time the first thing
321:06 - we need to do is go to the page that
321:07 - normally would use a use effect to get
321:09 - data as soon as that page is mounted and
321:12 - what we'll do instead is export a
321:14 - separate loader function instead from
321:16 - that page that will fetch the data that
321:18 - we need for that page so I tried to make
321:21 - this as simple as I could I did move the
321:23 - home page from our previous example to a
321:26 - separate component just so we could get
321:27 - this even a little bit closer to what we
321:30 - have in the van Life app so here I have
321:32 - my home page and let's say I'm going to
321:34 - be getting some really basic data
321:36 - outside of the component that I have
321:38 - defined I'm going to create a function
321:41 - that I export called loader now with
321:45 - react router the name of the function
321:47 - actually doesn't matter a fun fact in
321:49 - remix it does matter it has to be called
321:51 - loader but since we're not using remakes
321:53 - we're using react router we can really
321:55 - call it whatever we want and the job of
321:57 - this function is to get the data that we
321:59 - want to get now to make things even
322:01 - simpler to understand the truth is it
322:03 - doesn't really have to be a fetch
322:05 - request per se I think it almost always
322:07 - would be but to keep it as simple as
322:09 - possible I'm just going to return a
322:11 - string that says the data is here we'll
322:14 - see when this comes full circle and how
322:16 - we actually get the data from our loader
322:18 - into our component in a couple lessons
322:21 - from now okay so it's really as simple
322:23 - as that we export a function whose job
322:25 - is to get the data that we want to have
322:28 - access to in our component for now we're
322:30 - pretending that this string is the data
322:32 - that we have fetched from some API next
322:34 - we're going to pass a loader prop to the
322:37 - route that renders this page the home
322:39 - page and we're going to pass in our
322:41 - loader function so let's go over to
322:43 - index in our case we only have one route
322:46 - that we're defining and notice that I'm
322:48 - importing home page as a default import
322:50 - from my home component I can also bring
322:54 - in my loader function that I exported as
322:57 - a named import or a named export over
322:59 - there and all I need to do now is to add
323:02 - a new prop to my route that's called
323:04 - loader and I will pass in the loader
323:08 - that I imported with my home page
323:11 - now think in the van Life app how we
323:13 - have multiple page Imports many of which
323:15 - will have their own loaders so I'm not
323:17 - going to be able to just import a named
323:19 - function called loader for every single
323:21 - one of them in our case it's fine
323:23 - because it's our only one but a really
323:25 - common practice is to rename it as
323:27 - you're importing it so I might say
323:29 - import loader as and then maybe say like
323:32 - home page
323:33 - loader and this should probably be
323:35 - lowercase and then I would change loader
323:38 - equals loader to loader equals homepage
323:40 - loader okay that's a great start it's
323:42 - not quite done yet but let's go back to
323:43 - the van Life app and give you a
323:45 - challenge so that you can accomplish
323:46 - those steps for the Vans page
323:52 - okay you're basically going to do the
323:54 - same thing that we just did but here on
323:56 - our van Life app it's not going to be
323:58 - exactly what we ultimately want but
324:00 - we're gonna iteratively get there so
324:02 - your challenge is first to export a
324:04 - loader function from the file that we're
324:06 - currently looking at for now we'll just
324:07 - have that loader function return the
324:09 - string Vans data goes here or something
324:11 - along those lines then over in our
324:13 - index.jsx file we need to import that
324:16 - function and we will set it as the value
324:18 - for the loader prop on the route that
324:20 - controls this Vans page pause now and
324:23 - work on the challenge
324:29 - okay let's export a function that we'll
324:33 - call loader and it's just going to
324:35 - return the string Vans data goes here
324:39 - and then over on index.jsx we will
324:42 - import it now that file was right here
324:44 - with the van so we will bring in the
324:47 - named import loader let's call it vans
324:50 - loader okay and down on our vans page
324:55 - which is let's see Slash Vans we are
324:59 - going to add our prop called loader and
325:02 - set the value equal to bands loader okay
325:05 - that's everything we are equipped to do
325:07 - right now let's go back and complete the
325:09 - circle so that we can actually pull in
325:11 - the data from our loader into the
325:13 - component where we're trying to get it
325:19 - the last thing we need to do in order to
325:21 - get this loader actually working is to
325:23 - use the use loader data hook inside of
325:26 - our component and up until now it may
325:28 - not have been totally clear what
325:30 - direction we're heading in because we
325:31 - have this random function that's inside
325:33 - of our component file and then over here
325:36 - we're importing it setting it up as the
325:38 - loader this seems a little bit out of
325:40 - place but because we've done that little
325:42 - extra work what's really nice about this
325:44 - is inside of our component we can use a
325:48 - hook called use loader data so I need to
325:50 - import that from react router Dom use
325:53 - loader data from react router Dom and I
325:58 - can use that hook to grab the data that
326:00 - is being returned from my loader so I
326:03 - can say use loader data and I want you
326:05 - to pause and just think for a second
326:06 - what do you think console logging data
326:09 - is going to show
326:11 - first think about it and then actually
326:13 - try to run it and see if what you
326:15 - thought is what actually happens
326:21 - well let's hit save and we get the
326:25 - string the data is here so hopefully
326:27 - that makes sense because whatever we are
326:30 - returning from our loader is exactly
326:32 - what will come back when we call use
326:35 - loader data so how is this different
326:37 - from using a regular use effect well
326:39 - because we are not doing our data
326:41 - fetching inside of the code of our
326:44 - component react router can delay the
326:47 - rendering of our home page component
326:49 - until the loader has finished its task
326:52 - so it's a slight change in the Paradigm
326:54 - of how things get loaded in fact if you
326:57 - look at the documentation react router
326:59 - specifically says we don't care how you
327:01 - fetch the data the only thing we are
327:03 - doing with our data apis is changing
327:06 - when the data gets fetched so how is
327:08 - that useful well we're going to apply
327:10 - what we've learned to the van Life app
327:12 - and then we're going to start making
327:14 - some major changes to our code which
327:16 - hopefully will highlight how beneficial
327:18 - it can be to use these data apis so
327:21 - let's do that next
327:26 - all right so let's do exactly what we
327:28 - just did your challenge is to use the
327:30 - use loader data hook to pull in the data
327:33 - from our loader function and then I'll
327:35 - just have you console log it inside of
327:36 - your component here of course it's not
327:38 - actually data yet we are eventually
327:40 - going to use the get Vans function which
327:43 - really gets data and use that inside of
327:46 - our loader for now we'll stick with
327:47 - what's here so pause now and work on
327:49 - this challenge
327:56 - okay let's pull in the use loader data
327:59 - hook and we will now let's do it down
328:03 - here we'll say const theta equals use
328:06 - loader data and then we will console log
328:09 - the data and if everything is connected
328:11 - upright then it should give us the
328:13 - Advanced Data goes here string let's
328:15 - open the console hit save okay Advanced
328:18 - Data goes here now notice that it logged
328:20 - it three times that's actually because
328:22 - we have this use effect it ran when the
328:24 - code first loaded and then it set the
328:26 - van State and so it had to reload the
328:28 - page again and I'm not exactly sure why
328:31 - the third one is happening oh because of
328:33 - set loading probably so we're actually
328:35 - going to address what's going on here
328:37 - but for now let's do part two which I'll
328:41 - type out right now
328:42 - so here in our loader instead of
328:44 - returning a string I want you to place a
328:47 - call to the get Vans function and return
328:49 - what gets returned from get Vans we're
328:52 - still pulling in the data and console
328:53 - logging it so really the only change
328:55 - should be what happens right here pause
328:57 - now and work on part two of The
328:59 - Challenge
329:05 - okay simply enough instead of returning
329:07 - this string we're going to place a call
329:09 - to get Vans which should return our list
329:12 - of Vans and then from our loader we're
329:14 - going to return that list events that
329:16 - came back from this function call
329:18 - everything else is still hooked up here
329:20 - so let me buy us some space here we'll
329:22 - get rid of that we'll hit save check the
329:25 - console awesome look at this we have all
329:28 - of our vans which came through in the
329:30 - use loader data now currently we are
329:32 - only pulling it in and then logging it
329:34 - we're not actually rendering that
329:37 - anywhere on the page we're still using
329:38 - the vans that we had pulled in inside of
329:41 - this use effect but this leads us to a
329:43 - really exciting thing and that is we get
329:45 - to delete a bunch of code we'll talk
329:47 - about why and actually make those
329:49 - deletions in the next scrim
329:54 - okay so instead of just console logging
329:57 - the data I actually removed that console
329:58 - log we want to use this data in the
330:01 - component so your challenge is to make
330:03 - use of the data here throughout the
330:06 - component instead of using our state and
330:08 - our use effects to fetch and to hold the
330:11 - array of Vans the first thing you'll
330:13 - need to make sure that you do is just to
330:14 - comment out this entire use effect block
330:17 - and then you'll need to figure out what
330:18 - other changes you need to make so that
330:20 - things start working again as a hint I
330:22 - personally would make a change up here
330:24 - near the top instead of going through
330:27 - and changing a bunch of different things
330:28 - down here below hopefully that's not too
330:30 - cryptic I'm sure you'll be able to
330:32 - figure it out I'm trying to be vague so
330:34 - that you have to really think about it
330:36 - pause now and work on the challenge
330:43 - okay let's comment out this use effect
330:46 - to start and then instead of going down
330:48 - and changing wherever it says Vans to
330:50 - data I'm actually just going to change
330:52 - here to Vans and then comment out my use
330:55 - state so let's hit save
330:58 - and sure enough everything is working we
331:01 - can go into the Vans we can set filters
331:04 - and go there this is still working
331:06 - awesome now if you did have a chance to
331:08 - play around with this a little bit you
331:10 - might have noticed something and that's
331:11 - if I go back say to the host page or the
331:14 - home page then I come back to bands I'm
331:16 - going to click it right now you'll see
331:19 - that there was a slight delay before our
331:21 - vans actually got loaded remember react
331:23 - router here is making changes not to how
331:26 - the fetch occurs but to when the fetch
331:28 - occurs like we saw in the slides say
331:31 - we're at the about page or some other
331:33 - page as soon as we click to the Vans
331:36 - page it's going to start the fetch
331:37 - request then and only after the fetch
331:40 - request has completed and the loader has
331:42 - gotten the data then it will transfer us
331:45 - to the Vans page and it will include as
331:48 - part of the use loader data hook the
331:50 - Json or whatever data it is that we
331:52 - pulled in from our loader function so
331:54 - what does this mean for us well that
331:56 - means that we get to do one of the most
331:58 - cathartic things that I think you'll
332:00 - ever do as a programmer and that is to
332:02 - delete a bunch of code for example we no
332:05 - longer need our loading State because we
332:07 - are already here at the page and the
332:10 - data has already come into that page so
332:12 - I can just get rid of my loading state
332:15 - which means I can also I mean we saw
332:17 - first of all that this whole use effect
332:19 - we didn't need anymore we can get rid of
332:21 - that and we have this loading State down
332:23 - here that I don't need to handle anymore
332:25 - so we can get rid of that so let me
332:27 - clean this up too while we're in the
332:29 - habit of deleting things I also can
332:31 - delete my state instead of re-rendering
332:33 - my component because I am setting the
332:36 - state with the data that has come in
332:37 - after the component was loaded I know
332:40 - that the data is going to be there when
332:42 - I pull it in with the use loader data
332:44 - hook in the sense I get to treat this
332:46 - much more synchronously instead of
332:48 - having to think about how the component
332:51 - needs to mount and then do a fetch
332:53 - request and then update the state and
332:55 - then to re-render because the state has
332:57 - changed I don't have to worry about any
332:59 - of that the mental model for this is
333:02 - significantly simpler not only that but
333:04 - I can still do my loader code right here
333:07 - in the same file where I'm concerned
333:09 - about the display of that data that gets
333:11 - loaded from my loader I don't know maybe
333:13 - you're not quite as excited about this
333:15 - as I am but this is a really nice
333:17 - paradigm shift
333:18 - now there is something that we lost when
333:20 - we deleted our use effect and that is
333:22 - that we are no longer really handling
333:24 - any errors remember we have that catch
333:27 - Block in our try catch that would set
333:29 - the error well because we deleted our
333:31 - use effect we're not doing that anymore
333:32 - but that wasn't a mistake because react
333:34 - router has a way for us to handle errors
333:37 - and it's very simple once you've had a
333:39 - chance to bask in the glory of having
333:41 - deleted all of that useless code let's
333:43 - spend a minute to learn about error
333:45 - handling when we are doing our fetch
333:47 - request before the page loads instead of
333:49 - after
333:53 - surprise we're actually going to do a
333:55 - quick quiz before we move on to handling
333:57 - errors so you know the drill pause the
334:00 - screencast click into each of these and
334:02 - actually type your answers and then we
334:04 - will go through all of these together
334:11 - okay number one when does the code in a
334:14 - loader function actually run unlike how
334:16 - code inside of a use effect runs which
334:19 - happens immediately after a component
334:21 - mounts to the page a loader function
334:23 - runs before react router allows the
334:26 - route to change and that new component
334:28 - to load so in short a loader function
334:31 - runs before the component loads and the
334:34 - route change happens
334:35 - okay number two what are some benefits
334:37 - of using a data loader function instead
334:40 - of fetching our data in the use effect
334:42 - in a component well one of the main
334:44 - benefits is we don't have to handle
334:46 - error state which again we're going to
334:48 - be talking about next we don't have to
334:50 - write a lengthy use effect that's part
334:52 - of our component code we also don't have
334:54 - to worry about loading State because we
334:56 - know this component won't mount to the
334:58 - page until the loader has already
335:00 - completed its task or in other words
335:03 - react router will delay the transition
335:05 - to that new route until the loader has
335:07 - finished its task we know that when we
335:10 - access the data with use loader data we
335:12 - will have access to the data as if it
335:14 - were happening synchronously so we'll
335:16 - type something like that down
335:18 - okay number three what change do we need
335:20 - to make to our browser router before we
335:23 - can use loaders or really any of the new
335:25 - data layer API features in our app I
335:28 - guess the wording of this could be a
335:30 - little bit like a trick question because
335:31 - we just need to get rid of our browser
335:34 - router and we need to use one of the
335:35 - accepted data routers instead so we need
335:38 - to get rid of the browser router
335:41 - altogether
335:42 - and we need to use the create browser
335:46 - router function instead if you're really
335:49 - wanting to jump both feet in to the new
335:51 - system you can choose to use create
335:53 - browser router with the array of objects
335:56 - as we discussed in the lesson you can
335:58 - find more examples of that on the react
336:00 - router docs or if you already have some
336:03 - pre-written code that you're trying to
336:05 - transition to this new router using
336:07 - create browser router you can use that
336:09 - function create routes from elements to
336:13 - help you make use of the code that
336:15 - you've already written okay and then
336:17 - lastly what are the steps we need to
336:19 - take in order to use a loader on any
336:21 - given route first we need to define a
336:24 - new loader function and Export it
336:26 - usually it's defined in the same file
336:28 - that our component is being defined in
336:30 - and so we can write that down we'll say
336:32 - Define and Export a loader function
336:36 - secondly we need to import the function
336:38 - that we just exported into our route
336:41 - definitions and set it up as a loader on
336:43 - the route that we are trying to gather
336:45 - data for
336:46 - okay and lastly we need to use the use
336:49 - loader data hook inside of the body of
336:52 - our component so that we can get the
336:53 - data that was fetched or produced or
336:56 - evaluated or whatever it is inside of
336:58 - our loader function okay that was a lot
337:00 - of information but hopefully it sunk in
337:02 - okay when you're ready let's talk about
337:04 - error handling
337:08 - okay let's see how we can actually
337:10 - handle any errors that might happen now
337:12 - this example might be a little
337:14 - simplistic because we're not getting any
337:16 - data that will ever fail because
337:18 - javascript's probably not going to fail
337:20 - just returning a string like this so
337:22 - let's see what happens if I were to just
337:24 - manually throw an error we'll say maybe
337:27 - throw new error we'll give it a little
337:30 - message that says this is an error I'll
337:34 - comment out my return even though it'll
337:35 - never get run because I'm throwing an
337:37 - error manually let's see what happens
337:39 - I'll hit save okay we have an unhandled
337:41 - thrown error this is an error it tells
337:43 - you some of that information about the
337:45 - error and then it even has a little
337:46 - message here that says hey developer you
337:49 - can provide a way better user experience
337:50 - than this when your app throws errors by
337:52 - providing an error element prop on your
337:55 - route okay so what does that mean well
337:57 - if we go over to index.jsx here on my
338:01 - route you can see I've put things on
338:02 - their own lines to buy myself a little
338:04 - bit of room we have this element prop
338:06 - which is basically what element should I
338:08 - under assuming everything is going well
338:10 - well we can also add a prop called error
338:12 - element let me just hard code something
338:14 - for now maybe just an H1 it says there
338:18 - was an error and let's hit save okay we
338:22 - get there was an error this is our H1
338:24 - that is being rendered instead of the
338:26 - element that was supposed to be rendered
338:30 - because our app is experiencing some
338:33 - kind of error one thing that's neat
338:34 - about this is it will handle more than
338:36 - just an error that's happening inside of
338:38 - our loader for example let's say our
338:40 - loader is working just fine but for some
338:43 - reason we maybe try to access a property
338:46 - of an object that doesn't exist or a
338:48 - function that doesn't exist or something
338:49 - like that and that throws an error here
338:52 - so let's say we're throwing a new error
338:54 - this is a common one we'll say undefined
338:56 - is not a function this is just
338:58 - pretending that we're trying to call a
339:00 - function that we think exists but it's
339:02 - actually a value of undefined now we're
339:04 - not actually using this message anywhere
339:06 - but let's hit save and we get our error
339:08 - element that we set up here so I guess
339:10 - the point of this is the error element
339:12 - will happen anytime your component that
339:15 - you're trying to run has any kind of
339:17 - error it could be an error that occurs
339:19 - in the loader or it could be an error
339:21 - That's Just Happening inside your
339:23 - component just spitting out an H1 that
339:25 - says there was an error isn't the best
339:27 - user experience either but hopefully you
339:29 - can see that you could tailor a a
339:31 - well-designed and hopefully helpful
339:33 - error component that will display some
339:35 - really useful information in a nice way
339:37 - that isn't quite so jarring as what we
339:39 - have here okay so let's go back to the
339:41 - van Life app and we will bring back the
339:43 - ability to do some error handling by
339:45 - using an error element in our route
339:52 - okay let's apply what we just learned
339:54 - about the error element prop and we'll
339:56 - add one to the Vans route however you're
339:58 - going to do a little bit more than we
340:00 - just learned about this time instead of
340:02 - just putting the H1 directly inside of
340:04 - our error element I want you to create a
340:06 - completely separate component up here in
340:08 - the components folder that you can just
340:10 - call error.jsx at this point we're not
340:13 - going to get much more complex than just
340:15 - rendering an H1 that says something like
340:17 - an error occurred and then you'll want
340:19 - to import and use that error component
340:21 - as the error element on the Vans route
340:23 - remember right now our error is coming
340:26 - from the fact that we have just hard
340:27 - coded an error response when we try to
340:30 - get the vans from the slash Vans route
340:32 - so let's go back here to where you can
340:34 - see the challenge pause now and add an
340:36 - error component to our vans route
340:44 - all right up in our components I'm going
340:46 - to create a new file called
340:49 - error.jsx we will set that up and like I
340:53 - mentioned we're just going to return an
340:55 - H1 that says an error occurred we're
341:00 - going to revisit this later and beef
341:01 - this up we're going to see how we can
341:03 - make this a little bit more useful but
341:05 - for now this will do the trick over in
341:08 - index.jsx we have done step one so let's
341:11 - do step two we're going to import the
341:14 - error component oh and I refreshed it so
341:17 - now we have an error but let's uh call
341:19 - this error and down here maybe just
341:23 - right below the element we'll create an
341:25 - error element
341:27 - and we'll create an instance of our
341:30 - error
341:31 - okay so when I hit refresh react router
341:34 - will see we're at the slash Vans route
341:36 - that has a loader attached to it so it's
341:38 - going to run the Vans loader the Vans
341:41 - loader makes a fetch request to the
341:43 - slash API slash Advanced endpoint that
341:45 - we have on our mock server and the
341:48 - loader will interpret the 400 response
341:50 - as a problem let's see that's in the API
341:53 - git vans so in API yep it'll be not okay
341:57 - because 400 response with fetch is not
342:00 - okay and so it will throw an error and
342:03 - because the loader through an error it's
342:05 - going to search for an error element and
342:07 - that's the element that will get
342:08 - rendered so let's give it a shot we'll
342:11 - hit save
342:12 - an error occurred awesome so it worked
342:15 - as we would expect but right now just
342:17 - having an H1 this is an error occurred
342:19 - is not all that useful and we did take
342:21 - the time to provide some additional
342:23 - information in the error that we're
342:24 - throwing like having a message that at
342:27 - least says failed to fetch Vans that's a
342:29 - bit more descriptive than just an error
342:31 - occurred so how can we get the
342:33 - information from the actual thrown error
342:35 - to display on our page well that's what
342:38 - we're going to learn next
342:42 - all right let's learn how we can
342:44 - actually take the information from the
342:46 - error that got thrown and display that
342:48 - on the error element that we have set up
342:50 - at least that way we would have some
342:52 - additional information to display that
342:54 - ultimately would lead to a better user
342:56 - experience even though they're suffering
342:58 - through an error at that time when we
343:00 - have an error element that is catching
343:02 - an error there's a special hook in react
343:05 - router we can use to display information
343:07 - about that error so let's go to the
343:09 - error component that we just created and
343:12 - I'm going to import a utility hook
343:14 - called use route error that comes from
343:18 - react router Dom then just like some of
343:21 - the other hooks we can just grab the
343:23 - error we'll say that's equal to whatever
343:25 - comes back by calling use route error
343:28 - and let's go ahead also log the error to
343:31 - see what we get I hit refresh open the
343:34 - console okay look at what's in the
343:36 - console we have an object with a message
343:38 - a status text and a status properties I
343:41 - want you to think where did that object
343:42 - objects come from
343:46 - well that's the error that we threw from
343:48 - our api.js file we said try to get the
343:51 - vans in this get Vans function by
343:53 - fetching the data from slash API Vans
343:57 - and if the response is not okay in other
344:00 - words if it's not a 2 or 300 level
344:02 - response then throw this object as an
344:05 - error and so that object is what we're
344:07 - catching inside of error.jsx if we use
344:10 - error.jsx in multiple places then it's
344:13 - possible that this error will come back
344:15 - different so we would want to make sure
344:17 - that as we're throwing errors inside of
344:19 - our API that we're doing it pretty
344:21 - consistently preferably with a message
344:23 - status text and Status properties that
344:26 - said we're just going to be doing this
344:28 - in one place for now so I'm going to
344:30 - give you just a really quick challenge
344:31 - where you can use the information from
344:33 - our error object to have a little bit
344:36 - more of a descriptive error message let
344:38 - me type that up now
344:40 - okay so simply put use the error object
344:43 - that we just got from use route error to
344:45 - display something a little bit more
344:47 - helpful in our H1 here in fact you don't
344:49 - have to stick to Justin H1 you can go a
344:52 - little beyond that and design it however
344:53 - you want pause now and work on this
344:55 - challenge
345:01 - well the error has a message property so
345:04 - why don't we just go ahead and we will
345:06 - include the error.message as part of our
345:10 - H1 let's see what that would look like
345:13 - okay failed to fetch Vans is already
345:15 - better maybe I'll say error colon just
345:18 - to make it clear that that's an error
345:21 - and you know what I'm going to bring
345:22 - back my console log of the error here
345:25 - we also have a status text property and
345:28 - a status property this might be more
345:31 - interesting to a developer instead of
345:33 - the actual end consumer but I might want
345:35 - to put something like I don't know I'm
345:37 - curious what it would look like if I put
345:38 - it inside of a pre-tag
345:40 - so we'll say maybe we'll put the status
345:44 - so this is error.status and then a dash
345:47 - and we'll say error.status text see what
345:50 - that looks like well the pre-tag
345:52 - definitely makes it look like it's an
345:53 - error it's obviously not very beautiful
345:55 - but the point is we have an error and it
345:58 - accurately conveys that message to the
346:00 - user and to the developer okay let's get
346:02 - rid of some of our extraneous things
346:04 - here
346:05 - and awesome now we could make this a
346:07 - little more robust if we wanted to maybe
346:09 - check for the fact that there's a
346:11 - message property on here and if not then
346:13 - we could have some kind of generic error
346:15 - message and same goes for the status and
346:17 - the status text maybe if those don't
346:19 - exist on our error that we pulled from
346:21 - use route error we can either just omit
346:24 - this pre-tag completely or have some
346:26 - other kind of message there at this
346:27 - point I'm not going to worry about that
346:29 - too much along those lines if we did
346:31 - want to make our error a little bit more
346:33 - generic an important thing to know is
346:35 - that even though we are growing the
346:37 - error inside of our loader for the Vans
346:39 - path and that is the same place that we
346:41 - have our error element we can actually
346:44 - set up the error element to live on a
346:47 - different level in the hierarchy of our
346:49 - routes what I mean is we could say let's
346:51 - get rid of the error element here on the
346:54 - Vans path we could put it up on the main
346:57 - path and let's see this needs to go
347:00 - right there and by doing this any error
347:02 - inside of any child route let's say it's
347:04 - even the most nested child route way
347:06 - down here any error that gets thrown
347:08 - will bubble up to the nearest error
347:10 - element in the route configuration here
347:13 - so even though my error element does not
347:15 - live on the same route that has the
347:18 - error being thrown I can hit save and
347:21 - the error element will still correctly
347:22 - catch the information where the error
347:24 - was being thrown now in this case
347:26 - because we put it on the same level as
347:28 - the layout our layout is not getting
347:30 - rendered and so we no longer see our
347:32 - navigation bar or our footer so you'll
347:34 - want to be strategic about where you
347:36 - place your error elements but the
347:37 - important thing to know is that at this
347:39 - point this error element would now catch
347:42 - any error anywhere in my app even if it
347:44 - happened way down here if instead I put
347:47 - the error element down here on my what
347:49 - is a slash host slash band slash photos
347:52 - route any error that's thrown from this
347:55 - Vans route is not going to get caught by
347:57 - an air that's way down here in the
347:59 - hierarchy this way you could have
348:01 - multiple different error elements Each
348:03 - of which can be sort of a fallback
348:05 - depending on where you want that error
348:07 - element to show up maybe you want most
348:09 - of your page to show up and just one
348:11 - little nested portion that had the
348:13 - problem could show that there was some
348:15 - kind of error the options are basically
348:16 - endless and you have as much flexibility
348:18 - as you need to make those error elements
348:21 - and error boundaries work the way you
348:22 - want them to work in the meantime I'm
348:24 - going to move this back down here and as
348:26 - always at this point play around with
348:28 - the code make sure you understand what's
348:30 - actually going on you can come over here
348:32 - to api.js and mess with the error that
348:35 - we're actually throwing and see how that
348:37 - affects the rest of the app you can come
348:38 - to server.js one thing I did at one
348:41 - point was to choose a random number and
348:43 - to half of the time have it return an
348:45 - error and half of the time have it
348:47 - returned correctly just play with the
348:49 - code the more that you get your hands on
348:50 - it and mess with it and see what breaks
348:53 - and then go ahead and fix it the more
348:55 - you're actually going to deeply
348:56 - understand what we're learning about so
348:58 - since we've moved our error elements I'm
348:59 - going to hit refresh to see the updated
349:01 - View and when you're ready we will move
349:03 - on to the next topic
349:08 - in order for us to talk about some of
349:10 - the last remaining topics we have yet to
349:12 - learn in react router 6. we need to
349:14 - include some sort of authentication and
349:16 - there's a bit of gray area here because
349:18 - this isn't a course about authentication
349:20 - but we need to have authentication
349:23 - implemented at least in a very basic way
349:25 - in order for us to talk about those
349:28 - topics in react router 6. so this is a
349:30 - design for the login page that we're
349:32 - going to create and in fact I've already
349:35 - created it for you Hallelujah and so
349:38 - instead of throwing you into a bunch of
349:40 - code that I just wrote for you I'm going
349:41 - to walk us through it step by step so
349:43 - you know what steps I had to take to
349:45 - create this form and get it all set up
349:46 - it doesn't do anything yet we're going
349:49 - to be adding to the form but it's just a
349:51 - basic form right now the handle submit
349:53 - which happens when the button is pressed
349:55 - you can see right here the form on
349:57 - submit runs handle submit it's just
349:59 - console logging this form data this form
350:01 - data is just some state that we created
350:04 - right now it doesn't have anything in it
350:06 - it's just an empty email and password we
350:09 - have a handle change function which is
350:11 - going to run every time there's a change
350:13 - on either of the inputs this is just so
350:16 - that react is maintaining State for the
350:19 - login form data on every change and
350:21 - that's basically it for now with the
350:23 - form because the button is here inside
350:25 - of a form element it will trigger a
350:28 - submit event on the form I of course
350:30 - added a bunch of CSS that you can feel
350:33 - free to go to index.css to look up but
350:36 - the other piece is in our index.jsx I
350:39 - imported the login form and I set up a
350:41 - login route on the top level and then in
350:43 - the header I just put this little icon
350:45 - which is living up here as Avatar icon
350:48 - in our image Assets Now why do we need
350:50 - some form of authentication to talk
350:52 - about react router 6 well the main
350:55 - reason is this host route we want to
350:57 - make it so that this host route is a
350:59 - protected route which means you have to
351:01 - be logged in before you can go to this
351:04 - host route right now we sort of naively
351:06 - have this host route up here and you're
351:09 - able to see all the Vans whether you're
351:11 - logged in or not and in fact if you
351:13 - remember this is hard-coded the Vans to
351:15 - be the user with the ID of one two three
351:17 - I think in our user host Vans where the
351:21 - host ID is one two three so it's all
351:23 - pretty naive just for the sake of what
351:25 - we learned already but let's learn about
351:27 - protected routes so that's what we're
351:29 - going to be doing next
351:33 - I am coming to you from the future I've
351:35 - actually already finished recording and
351:37 - editing the end of this course but I did
351:40 - become aware of an issue that you'll
351:42 - likely come across time and again
351:44 - throughout the remainder of this course
351:45 - it's relatively minor it's not that big
351:48 - of a deal but I did figure out what was
351:50 - going on and thought it would be good to
351:51 - give you a quick update on that so
351:53 - you'll notice that right now I just
351:55 - imported this Avatar image and
351:58 - everything seems to be working fine but
352:00 - if I go a couple levels nested deeper
352:03 - into my URL and then hit refresh you'll
352:06 - see that the image breaks now in the
352:08 - past scrimba has done okay to just put
352:10 - the relative path to the assets right
352:12 - here inside of the source of an image
352:15 - element and in the past I've had to do
352:17 - that because the bundler that was
352:19 - bundling this code under the hood inside
352:21 - of scrimbo was webpack and I guess it
352:23 - was just kind of able to make this work
352:25 - however this was a constant source of
352:27 - questions from students because when
352:29 - you're following Along on your local
352:30 - machine you'll find that this just
352:32 - really doesn't work very well now a
352:34 - quick fix here on scrimba that I guess I
352:36 - could have done is just get rid of the
352:37 - relative path and have it be absolute to
352:40 - the root of the project so if I hit save
352:42 - you'll see that now my avatar image
352:44 - comes back that said now we are bundling
352:46 - all of our projects with Veet it is much
352:49 - faster and it's just overall better than
352:51 - webpack and now that means that I can
352:53 - inside of scrimba actually do things in
352:55 - a bit more of a realistic or correct way
352:57 - because when my project gets bundled up
353:00 - my assets might end up moving or getting
353:02 - renamed and having this hard-coded
353:05 - string here really won't handle the
353:07 - shifting around of our files very well
353:09 - and so the real way to do this is to
353:11 - import any assets that you need to use
353:14 - inside of your markup and I can do that
353:16 - by just saying I want to import let's
353:18 - call it image URL from and then we will
353:21 - just grab the absolute path to the image
353:24 - and put it in there and of course this
353:26 - is different than what you might be used
353:28 - to seeing because we're used to
353:29 - importing JavaScript functions and
353:31 - components and everything like that here
353:33 - we're importing from an npm package and
353:36 - elsewhere we're importing from our own
353:38 - JavaScript or jsx files but just know
353:40 - under the hood Veet is able to handle
353:42 - this and apparently I didn't know this
353:44 - until recently but apparently scrimba is
353:46 - also able to handle this internally so
353:48 - if I just take this image URL I can now
353:50 - use this as my source and that way when
353:53 - it gets bundled it will just have the
353:55 - correct path and file name and
353:56 - everything so that it works just fine so
353:58 - even though we're still in this nested
354:00 - path I can hit refresh and my avatar is
354:03 - still showing up so if you are following
354:05 - along locally then please just do it
354:07 - this way ignore the silly way that I had
354:09 - it before and excuse any times in the
354:12 - remainder of this course that you see
354:13 - the little broken image icon up there it
354:15 - doesn't happen terribly often but it
354:18 - does happen sometimes okay let's keep
354:19 - forging ahead
354:24 - it's time for us to venture into a topic
354:26 - that is often called protected routes as
354:29 - a pretty important caveat to this
354:31 - section it's important to know that
354:32 - protected routes is not really uh
354:34 - specifically created API that exists in
354:37 - react router but rather it's a paradigm
354:39 - or a pattern that you can use in order
354:42 - to protect certain routes so what do I
354:45 - mean by protected routes well the
354:47 - purpose of protected routes is to stop
354:49 - data fetching of sensitive information
354:51 - so that only logged in users can access
354:54 - their data and maybe on top of that the
354:56 - users can't access other people's data
354:59 - in any given website there's going to be
355:01 - information that you want publicly
355:03 - available and then there's going to be
355:05 - user-specific data which oftentimes
355:07 - needs to be protected through some kind
355:09 - of authentication the user needs to be
355:11 - logged in to see that data now at this
355:14 - point we're at kind of an interesting
355:16 - fork in this course because we have
355:18 - transitioned to using a data router and
355:21 - we've already started implementing
355:22 - loaders in our van Life app however I
355:25 - think it's going to be useful to see how
355:27 - this issue of creating protected routes
355:29 - is solved both with a data router like
355:32 - we're using but also in a more
355:34 - traditional sense when using the older
355:36 - routers that existed before react router
355:38 - introduced the data routers in version
355:40 - 6.4 unfortunately the approach to
355:43 - creating protected routes is very
355:45 - different between the two and so I think
355:47 - it's going to be helpful for us to see
355:50 - how we can do it not using a data router
355:52 - first and then we're going to see how we
355:55 - can use it with data routers we won't
355:57 - dive very deep into the non-data router
356:00 - version only because it won't apply to
356:02 - us throughout the rest of this course
356:04 - with our van Life app and then naturally
356:06 - we will dive a bit deeper in how we can
356:08 - create protected routes using the data
356:10 - routers in order to help us understand
356:12 - why the approaches are so different we
356:15 - need to remember what is happening when
356:17 - we're fetching our data if we're using a
356:19 - use effect in order to fetch our data
356:21 - then first what happens is we transition
356:22 - to a new page and then the fetch request
356:25 - is kicked off this means that the Vans
356:28 - page has to take into account the fact
356:30 - that there's a loading State and maybe
356:32 - an error state in case the data doesn't
356:34 - come back correctly and then after that
356:36 - fetch request is completed the Json will
356:38 - get sent to this component it will
356:40 - re-render and then that re-render will
356:43 - maybe set the loading state to false and
356:45 - it'll set the list events into State and
356:48 - therefore render the list events in
356:50 - react router when you have nested routes
356:52 - that are all displaying on the page at
356:54 - the same time sometimes it's possible
356:56 - that you end up with something called a
356:58 - request waterfall this screenshot comes
357:01 - from the remix homepage and if you click
357:03 - it you can go to a link there and see a
357:05 - much more interactive version of it that
357:07 - will show you side by side what a
357:09 - request waterfall looks like versus how
357:11 - remix and by association react router
357:14 - handles data fetching but here what you
357:17 - can see is we have a side navigation
357:19 - which might have some kind of loading
357:21 - State and in order for the rest of the
357:23 - nested a route to load this first needs
357:26 - to load then when this part loads or
357:28 - rather the sales nested route loads then
357:31 - and only then can we start kicking off a
357:34 - request to get the list of invoices once
357:37 - the list of invoices loads then and
357:40 - sometimes only then can we kick off
357:42 - another request in order to get the
357:44 - specific invoice that we're trying to
357:46 - see so this is where the name request
357:48 - waterfall happens because everything has
357:51 - to wait for the previous one to finish
357:52 - in order for the next one to start so
357:55 - I'm not necessarily saying our van Life
357:57 - app is set up exactly this way we're
357:59 - using some workarounds to kicking off
358:01 - this many requests but it's just
358:03 - important to know that this is not an
358:06 - uncommon thing in react apps so when we
358:08 - have a series of protected routes or
358:10 - routes that we only want a logged in
358:13 - user to access in the more traditional
358:15 - setup for react router a very common
358:17 - approach to creating protected routes is
358:20 - to prevent renders from happening of
358:22 - those protected routes or those
358:24 - components that have sensitive
358:26 - information so if the user isn't logged
358:29 - in then we stop the data fetching by
358:31 - just blocking those components from
358:33 - rendering in the first place and instead
358:35 - send the user or navigate the user to
358:37 - the login page and since that fetching
358:40 - is happening after the components are
358:42 - rendered to the page inside of a use
358:44 - effect for example if those components
358:47 - are prevented from rendering in the
358:49 - first place then the fetching will never
358:50 - happen this might look something like
358:52 - this you have your home page and then
358:54 - you have a series of protected routes we
358:57 - only want users to get to the host page
358:59 - or any of the nested routes under the
359:01 - host page if they're logged in so what
359:03 - this looks like is we can introduce an
359:06 - auth required layout route maybe to be
359:08 - clear auth required is just an arbitrary
359:10 - name that I came up with but it is a
359:12 - layout route that wraps all of the
359:14 - protected routes and the job of that
359:17 - auth required layout route is to check
359:19 - if the user is currently logged in if
359:21 - the user is logged in then it will allow
359:23 - the nested route components to render to
359:26 - the page and therefore they are then
359:28 - allowed to trigger any kind of fetch
359:29 - requests that they might be doing
359:30 - however if the user is not logged in
359:33 - then it's just not going to render those
359:35 - and instead it's going to navigate them
359:37 - to the login route so for the sake of
359:40 - completeness we are going to take a look
359:42 - at what this approach might look like in
359:44 - the code but then we're going to talk
359:46 - about why this doesn't work for us when
359:48 - we're using loaders inside of a data
359:50 - router with react router so in the next
359:52 - scrim we'll take a quick look at how we
359:54 - might implement this auth required
359:55 - layout route
359:59 - let's see one way that we could
360:01 - implement this auth required layout
360:03 - route in order to protect any nested
360:05 - routes that we don't want an
360:07 - unauthenticated user to access at this
360:09 - point you should be familiar with the
360:11 - concept of a layout route here we can
360:13 - see that we have one route that is
360:15 - wrapping all of the other routes in our
360:18 - really simple app here that only has two
360:19 - routes a home and a protected route and
360:22 - as you know the job of this layout route
360:24 - for example is just to create some
360:27 - shared user interface that will be
360:29 - consistent throughout any of its
360:31 - children routes if we go to that layout
360:33 - we can see that it just has a navigation
360:36 - and then it's got this main tag and it
360:38 - wraps an outlet and the job of the
360:39 - outlet of course is to render any
360:42 - children routes that match the current
360:43 - URL and while this is how we have been
360:46 - using layout routes so far there isn't
360:48 - anything stopping us from creating a
360:50 - layout route that can do some logic and
360:53 - conditionally either render the outlet
360:55 - or alternatively in the case of what
360:58 - we're doing here with protected routes
360:59 - instead send the person or navigate the
361:02 - person to a different route entirely so
361:04 - let me go in here and create a new
361:08 - component I'm going to call it
361:11 - authrequired.jsx and we'll go ahead and
361:13 - get this initial layout component setup
361:16 - then before we actually start working on
361:19 - the code inside of here I'm going to go
361:20 - and actually wrap my protected route
361:23 - inside of this auth required layout
361:25 - route so I'll need to import
361:28 - auth required and then we'll set that up
361:31 - as its own route which will be a parent
361:34 - of our protected route
361:37 - in this case we don't need to worry
361:39 - about anything dealing with a path
361:41 - because all we really want is for the
361:43 - elements to get rendered which will then
361:45 - as we'll see conditionally render either
361:48 - this child route or we'll navigate the
361:51 - person to the login route which we don't
361:53 - have a login route here but we'll get
361:55 - there soon okay so my element will be
361:57 - the auth required component that we just
362:00 - created we'll hit save we'll see that
362:02 - nothing is going to show up if I go to
362:04 - protected because I'm not rendering an
362:06 - outlet over there so let's go do some
362:08 - more work over here we'll import the
362:11 - outlet component from react router Dom
362:15 - and then just for the sake of taking
362:17 - things one step at a time we'll just go
362:20 - ahead and immediately return this Outlet
362:22 - of course this means that this auth
362:24 - required is not performing any kind of
362:26 - work or creating any kind of benefit but
362:29 - now I can go to protected and I can see
362:31 - my protected route component here again
362:33 - one thing I think could be helpful at
362:35 - this point is to just start making a few
362:37 - few comments as to how we're going to
362:40 - implement this auth required protected
362:42 - routes component because at this point
362:44 - we don't have any real authentication
362:45 - set up we're going to sort of fake our
362:47 - authentication so we'll say first we're
362:50 - going to fake our authentication that'll
362:52 - make more sense in just a minute and
362:54 - then we're just going to have some
362:55 - simple logic we're going to say if the
362:57 - user is not logged in then redirect them
363:01 - to the login route and otherwise
363:06 - we will return the outlet so here we are
363:09 - doing a check to see if the user is
363:11 - logged in and if they are already logged
363:14 - in then we just return the outlet as we
363:16 - normally would have expected kind of
363:18 - like we were doing right here and as we
363:20 - just saw in the comments if they're not
363:22 - then we'll simply redirect them to the
363:24 - login page like we show here
363:26 - now we've already covered quite a bit of
363:27 - ground in this scrim so if you feel like
363:29 - playing around in the code you're more
363:31 - than welcome to and when you feel ready
363:32 - we'll move on to the next lesson where
363:34 - we will actually Implement some of this
363:36 - logic
363:40 - you might be asking yourself how are we
363:42 - going to fake authentication well I'm
363:44 - going to take the shortest shortcut we
363:47 - can and say is logged in is true because
363:50 - this isn't a course about authentication
363:53 - specifically in one form or another
363:55 - we're going to be faking our
363:56 - authentication kind of similar to this
363:58 - so I hope that's not too terribly
364:00 - disappointing but it should help keep
364:02 - our focus on react router and how to
364:05 - build something in react router like
364:07 - when we're creating protected routes
364:08 - okay and then simply enough with the
364:11 - rest of this logic we can just use a
364:13 - conditional and say if the user is not
364:16 - logged in then I'll go ahead and move
364:19 - this up here and we can just get rid of
364:22 - this I could have an else and say Return
364:25 - Outlet but because we are going to
364:27 - return something from within our if I
364:30 - can just consider that an early return
364:31 - and then I don't actually need my else
364:33 - because if I'm returning in here then
364:36 - this return will never get run
364:38 - okay so how are we going to redirect the
364:40 - user somewhere without any kind of
364:42 - interaction on their part well you
364:44 - should already be familiar with the link
364:46 - component the idea of the link component
364:49 - is that when you render a link and the
364:51 - user clicks it then it sends them to
364:53 - another route in react router well react
364:56 - router also has a bit more of a forceful
364:58 - version of that which is called navigate
365:01 - and it is a component and if the
365:03 - navigate component ever gets rendered by
365:06 - react then it will immediately and
365:08 - automatically send the person to a new
365:10 - route that you specify in the navigate
365:12 - component simply enough I can just say
365:15 - I'm going to return an instance of the
365:19 - navigate component and just like with
365:22 - link there's a prop called two there's
365:24 - also a prop called to in navigate so I
365:27 - can say navigate to slash login
365:30 - now remember we don't have a login route
365:32 - registered in our router quite yet but
365:34 - we can still test this so I'll hit save
365:37 - remember I have hard coded that my
365:39 - authentication is currently set to true
365:42 - or my is logged in variable is set to
365:44 - true and so I'm able to get to my
365:46 - protected route just fine let's go home
365:48 - we'll change this to false I'll hit
365:51 - refresh and try to go to protected and
365:53 - we'll see what happens and okay this is
365:56 - great although we don't have a login
365:58 - page and so we get this 404 not found
366:00 - but the point is it sent us to the login
366:02 - page remember the approach we're taking
366:05 - is to prevent renders entirely of the
366:07 - protected routes and that's exactly what
366:09 - our auth required component has done
366:11 - here because it's wrapped as a parent
366:13 - component or rather apparent route to
366:16 - our children routes that are protected
366:18 - it intercepted the rendering of this
366:21 - route or rather this H1 here it's not
366:24 - really even its own component and before
366:26 - it ever allowed that to be rendered by
366:29 - returning this Outlet it instead sent us
366:31 - to the login page by doing this if we
366:34 - did have some sensitive information that
366:36 - was living inside of this component
366:38 - against just an H1 but imagine that this
366:41 - is a component that's doing some kind of
366:43 - fetch request to some sensitive
366:44 - information by stopping this from Ever
366:47 - Getting rendered it's not going to kick
366:49 - off that fetch request now before we
366:51 - move on it's I think important to
366:53 - remember that this is the approach that
366:55 - you would use if you were not using the
366:57 - features that come with the data layer
366:59 - apis and the data routers technically
367:01 - we're using a data router because we're
367:03 - using this create browser router
367:05 - function but we're not using any loaders
367:07 - here and the fact that we're not using
367:09 - any loaders means that it's okay for us
367:11 - to do it this way however once you
367:13 - introduce using loaders inside of any
367:15 - protected routes then everything kind of
367:18 - changes so as I mentioned this is about
367:20 - as far down this path as we're going to
367:22 - go I think it's really important to see
367:24 - this because at least at the time of
367:26 - recording this is the most common way
367:28 - that you will see people accomplishing
367:30 - protected routes and that's only because
367:32 - most of them are not using these data
367:34 - routers quite yet however for us we are
367:37 - going to jump into the future and
367:39 - actually use loaders and see how we can
367:40 - accomplish protected routes when we're
367:42 - using loaders
367:46 - it's that time again let's run through a
367:49 - quick quiz that deals with protected
367:51 - routes like before I want you to
367:53 - actually click into the lesson here and
367:55 - type down your answers and when you're
367:57 - done you can hit play and we'll go
367:58 - through the answers together so pause
368:00 - now and work on the quiz
368:07 - okay so how did we change our route
368:09 - definitions in order to protect certain
368:12 - routes from an unlogged in user well the
368:15 - first thing we did was to wrap all of
368:17 - our protected routes in a layout route
368:20 - that has some logic inside of it that
368:22 - will protect those routes if the user is
368:24 - not logged in with the next two
368:26 - questions we'll talk about how it
368:27 - actually protects those routes but for
368:29 - now for answer number one that's good
368:31 - enough I guess one thing we can be a
368:33 - little bit more specific about is that
368:35 - the way in which it protects the routes
368:37 - is by redirecting the user if they are
368:39 - not logged in to the login page okay
368:42 - number two what component can we use to
368:44 - automatically send someone to a
368:46 - different route in our app well that
368:48 - would be the navigate component if the
368:51 - navigate component renders at any time
368:52 - it will automatically forward them to
368:55 - the location or the path that we specify
368:58 - in the to prop so I can say navigate to
369:01 - slash login for example okay and lastly
369:04 - what component can we render if the user
369:06 - is logged in well if they're not logged
369:08 - in we will render the navigate component
369:10 - but if they are logged in then because
369:13 - we have wrapped a layout route around
369:15 - our protected routes we want to use an
369:17 - outlet in order to render the contents
369:20 - of the route that they're trying to
369:22 - reach okay short and sweet let's keep
369:24 - moving forward
369:28 - okay so let's start seeing how we can
369:30 - include protected routes when we're
369:33 - using these new features with the data
369:35 - later apis loaders and actions and so
369:37 - forth as a reminder if you're using a
369:40 - loader for fetching data the fetching
369:42 - actually happens before the route
369:44 - transition and before the target
369:46 - component the next component that you're
369:48 - trying to route to actually renders to
369:50 - the page this means if you were on the
369:52 - about page and you wanted to go to the
369:55 - Vans page when you click the link to the
369:57 - Vans page it's going to kick off the
369:59 - fetch request from the loader of the
370:01 - Vans page first before it ever
370:03 - transitions or renders the Vans page it
370:06 - gets the data and it includes it
370:08 - immediately inside the the Vans page A
370:11 - major benefit of this is that we don't
370:13 - need to check for the loading State
370:15 - because this component will only ever be
370:17 - rendered to the page if the loading is
370:19 - complete and there are no errors which
370:21 - also means that we don't have to
370:23 - necessarily check for the error State we
370:25 - can handle that in a more declarative
370:26 - way inside of our route definitions we
370:29 - saw the diagram from the remix website
370:31 - of a request waterfall and if you went
370:33 - to the website to look at that diagram
370:35 - you would have also seen what it looks
370:37 - like to load things in parallel another
370:39 - benefit of having these requests
370:41 - available to the data router before the
370:44 - routes even load is they know how to run
370:47 - your fetch requests before ever
370:49 - transitioning to that route so in remix
370:51 - which is what this diagram on the
370:54 - website is actually referring to but
370:55 - also in react router when you're using
370:57 - loaders if you have some nested route
370:59 - that you're trying to reach all of those
371:01 - fetch requests can happen simultaneously
371:03 - in other words all of the loaders that
371:05 - are required for your current route to
371:07 - display correctly are run in parallel
371:09 - they don't run one after the other but
371:11 - instead they all can run at the same
371:13 - time and then whenever the final one of
371:15 - the loaders finishes the entire
371:18 - completed page can render to your screen
371:20 - so I want to preface this by saying this
371:23 - is something that oftentimes leads to
371:25 - faster loading and arguably will also
371:27 - improve the user experience in the end
371:29 - so the reason I preface all this is to
371:31 - make it known that because all of the
371:33 - loaders for all of your routes will run
371:35 - as soon as you start the transition to
371:37 - that route it means that we can't put a
371:40 - layout route to wrap our routes and stop
371:43 - the fetch requests from running because
371:45 - they all just start running even before
371:47 - it transitions to that component we no
371:50 - longer can try to prevent the components
371:52 - from rendering because the fetch
371:54 - requests are happening before the
371:56 - opponent is rendering anyway so that
371:59 - means we need a slightly different
372:00 - approach to create protected routes when
372:02 - we're using loaders we're going to use a
372:04 - function that we are about to learn
372:05 - about called redirect and it's going to
372:07 - happen inside of our loader function so
372:10 - the high level overview is if the user
372:12 - is not currently logged in then we will
372:14 - run this redirect function and we'll
372:17 - send them to the login page inside of
372:19 - our loaders before any route rendering
372:22 - happens now at the time of recording
372:24 - this there is a downside to this
372:25 - approach and that is that the check for
372:27 - the currently logged in in user and the
372:29 - redirect has to happen in every single
372:32 - protected routes loader that said there
372:34 - is currently a proposal out there to
372:36 - include something called middleware
372:37 - inside of react router that would allow
372:40 - someone to run a function before any of
372:43 - the loaders happen again when I'm
372:45 - currently recording this that is not yet
372:46 - implemented into react router so I'm
372:48 - hoping in the future I can record an
372:50 - update that basically amends this and
372:52 - says now we can use this middleware to
372:54 - run this check instead but for now we'll
372:56 - just have to do a little bit of extra
372:58 - work in order to run all of our checks
373:00 - inside of every loader of every
373:02 - protected route okay let's see a diagram
373:04 - of how this works so with parallel
373:06 - loaders we might be loading something on
373:08 - our home page at which point we might go
373:10 - to a nested host page and all of these
373:13 - are going to load at the same time like
373:15 - we saw in that previous diagram and all
373:17 - of these loaders are going to check if
373:19 - the user is currently logged in now one
373:21 - of these loaders is going to recognize
373:23 - that the user is not currently logged in
373:25 - and so they will call this redirect
373:27 - function which will cancel any loading
373:29 - that's happening and it will never kick
373:31 - off a fetch request and instead it will
373:33 - redirect the person to the login page
373:35 - this way we still accomplish the goal of
373:38 - never kicking off a fetch request to
373:40 - protected data if the user is not logged
373:42 - in by the way the reason it's important
373:44 - not to even kick off this fetch request
373:46 - is if we did and the data came back if I
373:49 - were to go into my developer tools
373:51 - inside of my browser and look at the
373:53 - network tab I could potentially get
373:55 - access to sensitive information that I'm
373:57 - not supposed to have access to okay
373:59 - that's enough Theory let's actually jump
374:01 - into some code and see how we can
374:02 - implement this
374:07 - you should be familiar at this point
374:09 - with the concept of adding a loader to
374:11 - our routes typically we have a separate
374:13 - component and in that same file of that
374:16 - component we can export a function
374:18 - called loader and then we set a
374:20 - parameter or a prop on our route that's
374:23 - called loader and we just say this is
374:25 - the home loader for example for the sake
374:28 - of brevity and being able to see
374:29 - everything in one place instead of
374:31 - having a separately defined component
374:33 - and a separately defined loader function
374:35 - I'm just going to inline my loaders so
374:38 - let me create a loader here as well
374:40 - and I'm just going to make these some
374:43 - asynchronous functions for now and we'll
374:45 - just use an arrow function and open up
374:46 - the bodies now it's pretty important
374:48 - that you return something or even if you
374:51 - return null from your loaders because
374:52 - otherwise react router is going to
374:54 - complain we can see here you define a
374:56 - loader but you didn't return anything
374:58 - from your loader please return a value
375:00 - or null so the first thing I'm going to
375:02 - do here is just return null so we can
375:04 - get rid of that error suppose the
375:07 - homepage one isn't quite as important to
375:09 - us at this point so we are going to
375:10 - focus on our protected route loader
375:13 - similar to what we were doing in our
375:15 - auth required layout route which I left
375:17 - here just to be able to see but you'll
375:19 - notice that I've removed it from our
375:21 - route definitions similar to what we
375:23 - were doing over there we are just going
375:24 - to fake our authentication and so over
375:27 - here I'm going to say on the top line of
375:29 - my loader for my protected route that
375:32 - const logged in equals false for now
375:34 - actually let's go ahead and start this
375:36 - with true okay and then similar to what
375:38 - we had before I can say if we are not
375:41 - logged in if not is logged in then what
375:45 - we want to do is to redirect the user so
375:47 - I'll just put that as a comment here now
375:50 - because this is happening inside of a
375:51 - loader I don't need to then do any kind
375:54 - of other redirect or anything the loader
375:56 - is already the precursor to this route
375:58 - loading or rather this element being
376:01 - rendered to the page now how do I do
376:03 - this redirect remember right now I'm not
376:06 - not inside of a component I'm just
376:08 - inside of a regular async function which
376:11 - means I can't use the navigate component
376:13 - I can't return navigate because I'm not
376:16 - inside of a component that is ready to
376:19 - render anything to the page because of
376:22 - that react router gives us another
376:24 - utility function that is called redirect
376:26 - and so I can come down here and I can
376:29 - simply say we're going to redirect the
376:31 - user to slash login now a common
376:34 - Paradigm that I have found in my
376:36 - discussions with some of the core team
376:38 - at react router is that many people will
376:40 - actually throw this redirect instead of
376:43 - just doing a return I assume it's
376:45 - because it's kind of conceptually
376:47 - similar to a server that would be
376:49 - returning a 400 level error that says
376:51 - that the current user is not
376:52 - authenticated to access that endpoint
376:54 - either way we're not going to see that
376:56 - throwing our redirect is going to make
376:58 - that big of a difference so because it
377:01 - appears to be convention I'm just going
377:03 - to leave it there okay let's see what
377:05 - happens I'm going to hit save I'm going
377:07 - to try to go to protected and well of
377:10 - course that worked because we hard coded
377:12 - that the user is currently logged in so
377:14 - it's good to know that our protected
377:16 - route Works let's go ahead and change
377:18 - this to false and hopefully actually
377:20 - let's go home first hit refresh and I'll
377:23 - click protected and perfect that takes
377:25 - us immediately to the login page now I
377:28 - think this is pretty neat but I want you
377:30 - to pause for a second and think about
377:31 - this if I hit the back button where is
377:34 - it going to take me
377:38 - because the loader intercepted the
377:41 - direction to the protected route and
377:43 - before that could even render it sent me
377:46 - to the login page if I hit back it's
377:48 - going to take me back to the home page
377:50 - where I was before I attempted to get to
377:52 - the protected page I think the benefit
377:54 - of this is going to be a bit more
377:56 - obvious when we finally get back to our
377:58 - van Life app and start applying what
378:00 - we've been learning but conceptually I
378:02 - think this is pretty neat because the
378:03 - loader is running before the route
378:05 - transition ever happens okay we're
378:07 - almost ready to jump back into van life
378:09 - and start implementing this I'm excited
378:11 - to get your hands back on the keyboard I
378:13 - know I've been talking for a long time
378:14 - while we have this set up here I think
378:16 - it would be pretty interesting to see
378:18 - for just a second what we're talking
378:20 - about when we talk about parallel
378:22 - loaders and so I found a way that I can
378:24 - demonstrate this and we're going to do
378:25 - that in the next scrim
378:30 - okay do you remember when I was talking
378:31 - about how when you have nested routes
378:34 - how the loaders for each of those nested
378:36 - routes will run in parallel well we can
378:39 - see this in action by kind of Faking the
378:41 - concept of a fetch request but first we
378:44 - need a nested route and we don't have
378:46 - that per se we have this index route and
378:48 - then we have a protected route let's go
378:50 - ahead and turn our protected route into
378:52 - a parent so we'll close this as a
378:56 - separate component and then I'll create
378:58 - a new route and this one will say the
379:00 - path is I guess it really doesn't matter
379:02 - we'll just call it nested and it'll just
379:05 - say nested protected route okay I'm
379:09 - going to create a loader for this one as
379:12 - well so let me put these on their own
379:14 - lines create a loader that looks just
379:16 - like the other ones it'll be an async
379:18 - function okay let me get rid of the
379:21 - authentication stuff that we're doing up
379:22 - here for now and instead well let me
379:25 - move this return null because that's
379:26 - going to be important to be down there
379:28 - and we're going to do something fun in
379:30 - each one of these we're going to create
379:32 - a random number
379:33 - and then we're going to use that random
379:35 - number as part of a set timeout
379:39 - so timeout takes a function to run so
379:42 - we'll do this and then the second
379:43 - parameter is the amount of time it's
379:45 - going to wait before it runs so we'll
379:48 - put that random number in there the idea
379:50 - here is that we will run this function
379:52 - at a random amount of time between 0 and
379:55 - 1 seconds so that sometimes this
379:57 - protected route up here will have a
380:00 - let's do we'll just say console log
380:02 - protected
380:04 - route and down here we'll say nested
380:09 - protected route so sometimes this set
380:12 - timeout will finish first and sometimes
380:13 - this one will finish first and if our
380:15 - loaders are truly running in parallel
380:17 - instead of in sequence then we should
380:19 - sometimes see this console log first and
380:21 - sometimes see this console log first so
380:24 - I'll open up my console and we'll hit
380:26 - refresh but first we have to go to our
380:28 - protected route actually that's only
380:30 - going to run the protected one so let me
380:32 - type in slash nested at the end and I'll
380:34 - hit enter and okay so this time we got
380:37 - protected route first and then nested
380:39 - protected route this helps us see that
380:41 - multiple loaders are running one for
380:43 - this parent route and another for this
380:45 - child route but now let me just keep
380:47 - hitting refresh until we see something
380:49 - different
380:52 - well one thing I can do is make the
380:54 - spread a little bit greater we'll say
380:56 - maybe times two here let me hit refresh
380:59 - again okay here's an instance where the
381:01 - nested protected route finished first
381:03 - before the protected route this really
381:05 - does show us that react router is not
381:06 - waiting for this loader to finish before
381:08 - running this loader but instead both
381:11 - loaders are running at the same time
381:12 - okay that was a lot of work to get to
381:14 - maybe a bit of an underwhelming result
381:16 - but if you're a nerd like me it's kind
381:18 - of cool to see that these are running
381:20 - truly in parallel and it also helps us
381:22 - better understand why we're having to
381:24 - take this different approach as opposed
381:26 - to just putting a parent Route Around
381:28 - the other ones because if we imagine
381:30 - that these loaders are instead of
381:32 - console logging something they're making
381:34 - a fetch request to protected data then
381:37 - we can see that they're both running at
381:38 - the same time and so I can't simply have
381:40 - code inside of my parent route that is
381:43 - trying to stop the rendering of my child
381:45 - route because the loader is happening
381:47 - before the rendering is happening okay
381:49 - we're done with that aside let's go back
381:51 - to our van Life app final and get your
381:53 - hands on the keyboard with a challenge
381:55 - and have you implement protected routes
381:57 - as we've learned in the last few scrims
381:59 - in our van Life app
382:04 - actually you know what I lied I'm
382:06 - feeling a bit guilty for how much
382:07 - talking I've done without getting your
382:09 - hands on the keyboard so before we go
382:11 - into something with slightly higher
382:12 - Stakes by going into the van Life app
382:14 - and having you implement what we've
382:16 - learned I want you to get your hands on
382:17 - the keyboard now while we're still here
382:19 - and simply rewrite some of the code that
382:21 - we just wrote so your challenge is to if
382:24 - the user isn't logged in redirect them
382:26 - to the login page if you need to go back
382:28 - and see how we did that that's
382:29 - completely okay pause now and work on
382:31 - this challenge
382:38 - okay well you might have noticed that we
382:40 - are already importing redirect that's
382:42 - from when we did this before and all we
382:44 - need to do is check if the current user
382:47 - is not logged in so not is logged in
382:50 - then we are going to and in this case
382:52 - we're going to throw like we're throwing
382:54 - an error we're going to throw a call to
382:56 - the redirect function and it'll take us
382:59 - to slash login we have to keep our
383:01 - return null there just in case and so
383:04 - we're just going to keep that let's go
383:06 - ahead hit save we're currently not
383:08 - logged in because of this variable we'll
383:11 - hit protected and sure enough it takes
383:12 - us to the login page okay let's make our
383:15 - way back to Van life and it'll be your
383:16 - task to do the same thing over there
383:21 - okay we're going to try and take this
383:24 - one step at a time and unfortunately in
383:27 - this challenge you're going to get
383:28 - first-hand knowledge of that downside
383:30 - that I was talking about where you have
383:31 - to include a loader on every one of your
383:34 - protected routes in order to protect all
383:37 - of the routes and that's again just
383:38 - because they will always run in parallel
383:41 - as a reminder at the time of recording
383:43 - this there is a proposal for a
383:45 - middleware that would run before any
383:47 - loaders where you could instead write
383:49 - this authentication check before any of
383:52 - the loaders in which case you wouldn't
383:53 - have to write them in every single
383:54 - loader but as I'm recording this it's
383:56 - not quite yet a part of the react router
383:59 - API hopefully I'll be able to re-record
384:01 - this in the future and update with some
384:03 - good news okay so I'm sorry this will be
384:06 - a little bit tedious of a challenge but
384:07 - it's going to set us up to make these
384:09 - protected routes for now don't worry
384:11 - about checking for anything dealing with
384:13 - authentication so that we can just take
384:15 - it one step at a time pause now and work
384:16 - on this challenge
384:23 - okay I am going to make use of multiple
384:26 - cursors here so first just because it
384:29 - will be a little bit long I'm going to
384:31 - put everything on its own lines and this
384:34 - is going to get significantly longer but
384:37 - that's okay
384:38 - okay the only reason I did this on its
384:41 - own lines is so that it would be really
384:42 - easy for me to include a loader on every
384:46 - one of these
384:47 - okay so we'll include a loader and for
384:50 - now we're just going to do an inline
384:52 - function here one thing to note about
384:55 - loaders is that they could either be an
384:57 - asynchronous function or not an
384:59 - asynchronous function I happen to know
385:01 - that it's going to be useful for us to
385:03 - make these asynchronous functions so I'm
385:05 - going to do that and I'll open up the
385:07 - bodies here and just return null okay I
385:11 - guess the main way we'll know if this
385:13 - worked for now is that we don't get any
385:15 - errors when we load okay perfect this
385:18 - was a bit procedural so in the next
385:20 - lesson hopefully it'll be just a little
385:22 - more exciting and will actually start
385:24 - including some checks for authentication
385:26 - and protecting these routes
385:31 - before we continue on with protected
385:34 - routes using loaders we do need to make
385:36 - a few changes to our host routes because
385:38 - although we have implemented the loader
385:40 - for our vans.jsx file we have not done
385:44 - that for our van detail page our host
385:47 - events page or our host van detail page
385:50 - these are all still using a use effect
385:52 - in order to fetch data I think
385:54 - technically we could still get things to
385:56 - work but it would be a strange mashup of
385:59 - these two different paradigms where
386:00 - loaders really should be what's used in
386:03 - order to get data for the component that
386:05 - needs it especially since we've already
386:07 - started creating some loaders over here
386:10 - inside of our route definitions so I'm
386:12 - going to walk us through a quick
386:14 - refresher on how we did loaders with our
386:16 - vans page and then I'm going to
386:18 - implement it in Van detail and then your
386:21 - challenge is going to be to also
386:22 - implement it in host fans and host fans
386:25 - detail so you might remember when we
386:27 - were doing this what we did is we
386:29 - exported a function called loader and
386:31 - all it does is return the promise that
386:33 - comes back from get Vans then we're
386:36 - using use loader data in order to get
386:38 - access to our vans so that we can then
386:40 - map over them filter them and do
386:43 - whatever else we need to do with them in
386:45 - our file if we go to api.js you can see
386:48 - that I have beefed up our API functions
386:50 - here just a little bit our get Vans
386:52 - function is now able to take an ID if
386:55 - necessary and so we're sort of
386:57 - overloading this function where we can
386:59 - either not provide an ID and get a list
387:01 - of all the Vans or we can provide an ID
387:04 - and get the single van with the ID that
387:07 - we specify and then we have a separate
387:09 - get host Vans function which is almost
387:11 - identical to this except it reaches out
387:13 - to slash API host slash Vans instead of
387:16 - just slash API fans okay so let's go to
387:20 - Van detail and refactor this so that we
387:22 - essentially do the same thing as we did
387:24 - over in Vans I'm going to come up to the
387:26 - top I'm going to export a function
387:29 - called loader eventually will see that
387:32 - these functions can be async if we want
387:34 - them to be I'll come back later and
387:36 - Implement that if we need to and all
387:38 - it's going to do is return a call to get
387:41 - Vans let's see let's go to Vans okay
387:44 - this is basically exactly what actually
387:46 - it's literally exactly what we had there
387:48 - now we need to import get Vans for that
387:51 - to work so we will import get vans from
387:54 - the API file however at this time
387:57 - because this is the van detail page we
388:00 - need access to the ID of the van that
388:02 - we're trying to get before what we did
388:04 - is we used the use params hook which
388:07 - allowed us to access params.id but since
388:10 - the loader function is not a component
388:12 - we can't use hooks inside of it hooks
388:14 - can only be used in components that get
388:16 - rendered fortunately we have immediate
388:19 - access as one of the parameters to this
388:21 - function to an object called perhemps
388:24 - and so this is exactly what you would
388:27 - think we will now have params.id so I'll
388:30 - go ahead and just console params let's
388:33 - refresh oh actually before that will
388:35 - work we need to go to our file here and
388:38 - set up the van detail to have a loader
388:42 - so we'll move these on their own lines
388:44 - say the loader is equal to we'll call it
388:49 - the van detail loader and then we need
388:51 - to import that so here we're importing
388:54 - band detail we will also bring in the
388:57 - loader as van detail loader
389:01 - okay let's give this a shot now I will
389:03 - hit refresh we'll open the console I'll
389:05 - go to Vans and then go to the van detail
389:08 - page and sure enough we get the object
389:10 - with the ID of one it looks like we have
389:13 - another errant console log hanging out
389:15 - somewhere and that's right here with
389:17 - console logging our location we'll go
389:19 - ahead and get rid of that okay so I have
389:21 - access to the params object it has a
389:23 - property called ID and so I need to make
389:26 - sure that I pass that in to my get Vans
389:29 - function and then I'll need to use my
389:32 - use loader data hook and that should get
389:36 - me access to a van object I think let's
389:39 - call it data we'll say use loader data
389:43 - and then we'll console log the data
389:45 - I'm going to comment out my use effect
389:48 - here and actually I'm going to put a set
389:50 - of semicolons here just so that it
389:52 - relegates these squiggly lines to the
389:55 - semicolon instead of making it look like
389:57 - our return is broken okay let's hit save
390:00 - awesome now our loading is freaking out
390:03 - a little bit because our van is not
390:05 - coming from State anymore because we are
390:07 - no longer fetching it so let's go ahead
390:10 - and call this van so that we can just
390:12 - reuse that name we'll comment out our
390:14 - state we shouldn't need params anymore
390:17 - because we're doing that in the loader
390:19 - and let's hit save
390:21 - oh of course I'm still trying to console
390:23 - log data we can get rid of our console
390:25 - log now
390:26 - okay our van is showing up so let's get
390:28 - rid of this code here and then we no
390:31 - longer need to check if van exists
390:34 - because we can be pretty confident that
390:36 - it is going to exist since we are
390:38 - loading it before the route ever loads
390:41 - or before this component ever mounts so
390:43 - we will get that in there fix up some of
390:46 - these formatting issues and let's get
390:48 - rid of our console log up here while
390:50 - we're at it hit save
390:51 - and cool okay now that you've seen how
390:54 - we can do this and how we can access the
390:56 - parameters directly inside of our loader
390:58 - it's going to be your turn to do this
391:00 - for the host fans page and the host Vans
391:02 - detail page so that's what's coming up
391:04 - next
391:08 - okay just like I did in the van detail
391:10 - page you are going to do for the host
391:12 - Vans page and the host Vans detail page
391:15 - currently both of those are fetching
391:17 - data from a use effect and we want to
391:19 - move that to a loader instead so that's
391:22 - exactly what your challenge is you can
391:23 - read it here one thing to note is that
391:25 - you will be using the get host Vans
391:28 - function instead of the get Vans
391:30 - function since we're dealing with the
391:31 - host routes now and also the inline
391:34 - loaders that we put let's see where are
391:36 - they right here and here for our vans
391:39 - page our host fans page and our host van
391:41 - detail page these inline loaders you'll
391:43 - just replace with the ones that you will
391:45 - import up above that you are exporting
391:48 - from those component files here give
391:50 - this your best shot if you need to look
391:52 - at the Vans or the van detail page that
391:55 - should help you quite a bit and then
391:56 - we'll go through it together pause now
391:58 - and work on this challenge
392:05 - okay we'll just clean this up because we
392:08 - know what we need to do we are going to
392:10 - export a function called loader we're
392:14 - going to return get host Vans and then
392:17 - we need to make sure we import that
392:21 - and this is coming from the API file
392:25 - okay we will also need use loader data
392:28 - while we're in this same file and we'll
392:30 - go ahead and grab the list of Vans we'll
392:33 - call it Vans just like our state so we
392:35 - don't have to make other changes down
392:37 - below at least not too many and that's
392:39 - going to be equal to use loader data we
392:42 - can get rid of our state we can get rid
392:45 - of our use effect always feels really
392:48 - good we're using the same variable name
392:50 - so that can stay the same and then here
392:52 - we were sort of naively doing a
392:54 - vans.length check to see if it was
392:57 - loading or not this of course just
392:59 - assumes that the host has fans in their
393:02 - array so we can get rid of that
393:04 - completely now and get rid of this
393:06 - completely we'll do a little reformat so
393:09 - much simpler and I don't need that curly
393:11 - brace either that feels really good to
393:13 - clean up that code okay we're not quite
393:15 - done of course let's go over to our
393:17 - index file and we will come up to the
393:20 - top and right here host Vans we're going
393:23 - to import the loader as as host Vans
393:26 - loader and then come down to our route
393:29 - which was this one and again like I
393:32 - mentioned we'll just replace the inline
393:34 - one with a named function okay that was
393:37 - a lot of work without checking how we
393:39 - were doing so let's go ahead and refresh
393:42 - and we can test this by going to the
393:44 - host page and vans okay our vans are
393:47 - coming in perfect so now we will just do
393:50 - the exact same thing for our host van
393:53 - detail and I'm going to fly through this
393:55 - pretty quickly we know we need use
393:57 - loader data from react router Dom we
394:01 - need our get host Vans function from the
394:04 - API file we're going to export a loader
394:07 - function we will need access to the
394:10 - params this time and so we are going to
394:13 - return get host Vans by passing in
394:17 - params.id we don't need use params but
394:20 - we do need we'll just keep calling it
394:23 - current van
394:24 - and that will be from use loader data we
394:27 - don't need our use effect we don't need
394:29 - to worry if there isn't a current van
394:32 - and everything else I think should be
394:34 - the same so let's go back to our index
394:37 - file we will import see where is our
394:41 - right here host fan detail will import
394:43 - our loader as host and detail loader and
394:48 - once again we will replace we can find
394:51 - it right here we have our inline we will
394:53 - replace it with the host van detail
394:55 - loader function we'll hit save and oh it
394:58 - looks like I got close but not quite
395:00 - there we'll see if we can figure this
395:03 - out
395:03 - oh you know what uh we are still using
395:06 - the current van State I forgot to get
395:08 - rid of my state we need to get rid of
395:09 - that because there is a duplicate
395:11 - declaration for it okay let's try again
395:13 - those fans click on one of them perfect
395:15 - okay hopefully that was good practice
395:18 - it's a good example of space learning
395:20 - and repetition that's been a minute
395:22 - since we've dealt with the loaders so
395:24 - this is kind of good to get the practice
395:25 - back in and now we're perfectly set up
395:27 - to finally go back to implementing the
395:30 - protected routes now that we're doing
395:31 - things a little bit more in line with
395:33 - how it should be done with using loaders
395:39 - okay so we have a task now that we're
395:41 - finally back to including protected
395:43 - routes in our loaders and those tasks
395:45 - include checking for the user's
395:47 - authenticated status which we're just
395:49 - going to fake it like we did before and
395:51 - if they're not logged in we want to call
395:52 - that redirect function that comes from
395:54 - react router Dom to the slash login page
395:57 - and I was about to write step three and
395:59 - realize that that's it I know that it
396:01 - seems like we're doing a lot of work
396:03 - here because of the way that our loaders
396:04 - are but we are going to see how we can
396:06 - simplify it a bit now rather than inside
396:09 - of every loader doing some kind of const
396:12 - is logged in equals false or true and
396:16 - then trying to duplicate that for every
396:17 - loader it makes a ton more sense for us
396:20 - to create a utility function whose
396:22 - entire job is to do these tasks so I'm
396:25 - going to create a new file that I call
396:27 - utils.js that's just down here at the
396:30 - bottom and we're going to create a
396:32 - function that's just called require auth
396:34 - because this is a custom function you
396:37 - could call it whatever you want and
396:38 - inside this function I'm going to use my
396:41 - fake login status so I'll say is logged
396:44 - in equals false and then I'll do my
396:47 - check that says if not is logged in then
396:50 - we're going to throw that call to
396:52 - redirect to the slash login page and
396:55 - redirect is not a global function we
396:57 - need to import it so I will import
397:00 - redirect from react router Dom and
397:03 - eventually we're going to do a bit more
397:05 - work in here but for now I think this
397:07 - should be good so let's come back to our
397:09 - index we're going to import our function
397:12 - that we just created that's require off
397:15 - from the API no from the utils file and
397:20 - then we do have the tedious task of
397:23 - including it in each one of our loaders
397:25 - now this brings me back to a point I
397:28 - made earlier about how our loader can be
397:30 - an async function what we currently have
397:32 - in our utils as this hard-coded is
397:35 - logged in value and this conditional
397:37 - check none of this is is an asynchronous
397:40 - operation in JavaScript this will just
397:42 - run line by line and it will run very
397:44 - very quickly however much more commonly
397:46 - in require auth we might be reaching out
397:49 - to a database of some sort or a server
397:51 - rather in order to ensure that the user
397:54 - is currently logged in and doing that
397:56 - may be an asynchronous operation and so
397:58 - we don't want require auth to kick off a
398:02 - request and then continue doing fetches
398:04 - in the loaders if the person is not
398:07 - allowed to access that information so
398:09 - although what we currently have is all
398:12 - synchronous we are going to pretend like
398:14 - it could potentially be asynchronous in
398:16 - turn require auth into an async function
398:19 - which means that it's going to by
398:21 - default return a promise and then we'll
398:24 - go over here and we will make use of all
398:26 - of our async functions by using a weight
398:29 - we're going to await require auth again
398:33 - even though we currently are doing
398:35 - synchronous operations with require auth
398:37 - at some point in the future we may not
398:39 - anymore and so it will be important that
398:42 - we wait for require auth to kind of
398:45 - authenticate the user before we do any
398:47 - kind of fetching requests inside of our
398:50 - loaders now most of these loaders are
398:52 - not doing any fetches and if they were
398:54 - doing fetches and if they are doing
398:55 - fetches we are importing them as
398:58 - functions that come from the components
399:00 - like this one right here so that leaves
399:02 - us with two different ways that we can
399:04 - make sure that we include this await
399:06 - require auth everywhere that needs it as
399:08 - a protected route and I actually think I
399:11 - want this to be a challenge because it
399:12 - is going to take just a little bit of
399:15 - critical thinking so let me type out
399:17 - this challenge
399:19 - your challenge is to include this await
399:22 - require auth everywhere that it is
399:24 - needed in order to protect all of our
399:26 - host routes and the nested routes
399:28 - they're in now one thing we can do just
399:30 - to simplify our code a little bit this
399:32 - return null is a little bit extraneous I
399:36 - can just say return await require auth
399:38 - and that should get the job done as well
399:40 - so I won't need two extra lines in which
399:42 - case because I'm using an arrow function
399:44 - I could simplify this by just having it
399:47 - do the implicit return on one line which
399:50 - would then look more like this okay so
399:53 - let me go to the home page in our utils
399:56 - we are hard coding that we are not
399:58 - logged in and so I'll hit refresh and
400:00 - try to get to the dashboard and sure
400:03 - enough it's taking us to the login page
400:05 - let's see if I go to slash host slash
400:07 - vans
400:08 - okay and we can see that I'm able to get
400:10 - to host Vans because we haven't yet
400:12 - completed those protected routes so that
400:15 - is your challenge include await require
400:18 - auth everywhere it's needed and it
400:19 - should make it because we're hard coded
400:21 - as being logged out it should make it so
400:23 - that you can't get to any of these host
400:25 - routes and you're probably going to have
400:27 - to type a bunch of them out just to test
400:29 - so one last thing when it does come to
400:31 - the loaders that we're importing things
400:33 - will have to change a little bit as
400:35 - opposed to just tacking it onto the
400:36 - inline loader like we've done here but I
400:38 - think you probably figured that out okay
400:40 - pause Now work on this challenge
400:48 - okay well I should be able to just copy
400:51 - this loader and put it on every line
400:53 - that is still using an inline loader so
400:56 - fortunately that covers a majority of
400:59 - our loaders here okay and then for the
401:02 - remaining two with our host fans loader
401:04 - and our host van detail loader we can go
401:07 - over to host Vans and we need to import
401:10 - our require auth
401:14 - from the utils file I'm going to copy
401:17 - this and just put it right over in host
401:19 - van detail while I'm doing this okay and
401:22 - then I'm going to make this an async
401:25 - function this might have been one of the
401:27 - trickier things but we did not make this
401:29 - async originally but now we want to make
401:31 - it async so that we can await require
401:33 - off alternatively we could just say
401:36 - require auth dot then and do promise
401:39 - resolution that way but I like the await
401:41 - keyword so we'll say await require auth
401:44 - that ensures that this function can run
401:47 - completely before it ever tries to get a
401:50 - list of the host fans okay and then I
401:53 - should be able to go to my host van
401:55 - detail make this an async function and
401:58 - do the exact same thing okay Moment of
402:01 - Truth we were able to get to slash host
402:02 - slash fans before because we did not
402:05 - have a protected route there we'll go
402:07 - ahead and refresh
402:09 - and sure enough that took us to the
402:11 - login page so if I try to go to slash
402:14 - host login page slash host slash Vans
402:18 - let's say slash one slash photos
402:22 - awesome login page also I feel like once
402:25 - again it's important that I point out
402:27 - that there currently is talks on better
402:29 - ways to handle this where we can include
402:31 - middleware to the loaders that will run
402:33 - before any of the loaders so that we
402:36 - will only have to do this in one place
402:37 - but for now this is what we have to work
402:40 - with and even though there is quite a
402:42 - bit of repetition here I still really
402:44 - like the way that loaders will run
402:45 - before the route Transitions and gives
402:48 - us a more synchronous feel to our
402:50 - components no longer do we need to
402:52 - remember about render cycles and what
402:55 - will cause and what won't cause a
402:56 - re-render in our component then having
402:59 - to set up error States and loading
403:00 - States and all these other things that
403:02 - were really just about managing the
403:04 - react render cycle and not about
403:06 - managing our actual data that we care to
403:09 - use so yes you might be thinking to
403:11 - yourself this is so much harder than
403:13 - just including an auth required
403:15 - component that wraps everything else but
403:18 - for one the benefits of using loaders in
403:20 - the correct way I think outweigh any of
403:22 - the costs that we have here and secondly
403:24 - we very likely might be getting a
403:26 - middleware solution to this problem okay
403:29 - we've been staring at this login form
403:31 - for a while now and we haven't been able
403:33 - to make any use of it now that we are
403:35 - set up correctly it's time for us to go
403:37 - in and actually make use of our form and
403:39 - I can promise you you are going to fall
403:41 - in love with the way that forms can be
403:44 - handled with react router using the data
403:46 - routers that we're learning about so
403:48 - that's what we get to look forward to
403:49 - next
403:53 - here we are back in our simplified app
403:55 - and what we want to work on next is have
403:58 - it so that when someone tries to go to a
404:01 - protected route that there's some kind
404:03 - of feedback that says here's why I sent
404:06 - you to the login page for example they
404:07 - tried to get to protected it sent them
404:09 - to login we should probably display some
404:12 - kind of message that says You must log
404:13 - in first we don't want that message to
404:16 - show up when they just go directly to
404:18 - the login page but if they try to go
404:20 - through a protected route and they are
404:22 - not logged in we do want to display that
404:24 - message now over in our auth required
404:27 - this is the layout component when we
404:29 - were doing that before we were using
404:30 - loaders you might remember that we have
404:32 - this navigate component when you're not
404:34 - using loaders you can just pass State
404:37 - similar to how we did with links earlier
404:39 - in the course you can pass State and
404:41 - that state could have a message that
404:43 - says You must log in first this works
404:47 - because when you get to the login page
404:49 - you can check the location to see if
404:52 - there's a state.mess message variable
404:54 - and you do that with the use location
404:56 - hook but now that we're not using the
404:58 - auth required layout route but instead
405:00 - we're using this utils JS in order to
405:03 - navigate or redirect people to the login
405:06 - page we don't have the option to pass a
405:09 - state message through this navigate
405:11 - component like we did before so how can
405:13 - we accomplish this when we are
405:15 - redirecting to the new location instead
405:18 - of using this navigate component well
405:20 - the most common thing that I have seen
405:21 - is to include a search program that
405:23 - includes the message that you want to
405:25 - send along to the page that you're about
405:27 - to load so in the require auth function
405:30 - here that's as simple as saying question
405:32 - mark maybe something like message equals
405:35 - and then we can include the message that
405:37 - we want to send so you must log in first
405:42 - okay let's see what this looks like we
405:44 - should be able to see that in our
405:46 - browser so I'll click protected and now
405:48 - if you look in the URL it says not just
405:50 - slash login but slash login question
405:52 - mark message equals you must log in
405:54 - first you might notice that it's not URL
405:57 - encoded if I hit refresh it
405:58 - automatically gets URL encoded where we
406:00 - have the percent 20 that's representing
406:03 - the spaces between the words but even if
406:05 - we didn't have that it would work just
406:06 - fine so let's go over to the login page
406:09 - and that is not a dedicated login page
406:13 - here it's just this H1 which means at
406:16 - this point it might be worth just
406:17 - throwing together a quick login
406:19 - component so I'll do that really quick
406:22 - okay so now I have this login component
406:25 - and then instead of rendering an H1 I'm
406:28 - just going to render my login component
406:30 - and now I should essentially have the
406:32 - same thing so I'll hit refresh login
406:34 - page goes here awesome okay now that we
406:36 - have a dedicated login component in the
406:39 - next scrim we're going to see how we can
406:41 - actually pull in the query string that's
406:43 - saved in the search param of message so
406:46 - that we can display it on our login page
406:48 - then once we've done that we'll go back
406:50 - to Van life and you'll have a challenge
406:52 - where you get to implement this in the
406:54 - van Life app
406:58 - let's see how our login component can
407:00 - consume the query string that exists up
407:03 - in the URL if it exists when it gets to
407:05 - the login page and actually what I want
407:07 - to do is have just a quick thought
407:09 - experiment for you
407:11 - I want you to think about this in our
407:13 - login component how should we grab the
407:15 - search param from the URL on the login
407:17 - page in the login component in order to
407:19 - display that message if it exists I'm
407:22 - not asking how we should display the
407:23 - message I'm asking how should we get the
407:26 - value from the search param of message
407:28 - so I'd actually like you to pause and
407:30 - think through this try to come up with
407:31 - an answer if you want you can even click
407:33 - into here and type down your answer so
407:35 - pause now and see if you can come up
407:37 - with an answer to this question
407:43 - well the first thought that you may have
407:45 - had if you remembered way back at the
407:47 - beginning of this course we learned
407:48 - about the use search for Rams hook which
407:53 - we can use inside of our component and
407:56 - then that gives us access to the search
407:59 - params and a function to set the search
408:01 - params
408:03 - and that's equal to use search params
408:05 - I'm mostly going down this path to show
408:08 - you that it should work just fine
408:10 - I can console Log search params and
408:13 - remember this search params is actually
408:15 - the native web search params Constructor
408:17 - or object and so it has a parameter
408:20 - called dot get and I can ask it to get
408:22 - the message and we'll go ahead and
408:24 - console log that so let's just give it a
408:26 - shot I'll hit refresh open the console
408:28 - and sure enough we get access to our
408:31 - search params that are in the URL
408:32 - however now that we're using the data
408:35 - router it can be really beneficial for
408:37 - us to just go all in both feet into
408:40 - really working with those apis that we
408:42 - get with the data router including using
408:45 - a loader so another way that we could
408:47 - get the search params let me comment
408:49 - this out is to include a loader so I
408:52 - will have a loader function and in this
408:55 - case I don't need to export it because
408:56 - I'm just kind of stuffing everything
408:58 - into one file here maybe just for the
409:00 - sake of keeping our names similar we'll
409:02 - call this the login loader and the login
409:05 - loader just like we saw before where it
409:08 - can have access to a params object it
409:11 - also will have access to the full
409:13 - request object this request object is a
409:16 - native web request object that you could
409:18 - just go to mdn and learn more about so
409:21 - let's go ahead and console log this
409:24 - request and I need to set my login
409:27 - loader up on my login page so we'll say
409:29 - that this has a loader that's equal to
409:31 - the login loader and just so we don't
409:34 - get that error we will just return null
409:36 - for now go ahead and hit refresh okay we
409:39 - can see in the scrimba console that it's
409:41 - a request object capital r request
409:43 - object which represents an object that
409:45 - has a request Constructor and in this
409:47 - case like I mentioned it's coming from
409:49 - the web this is not something specific
409:50 - to react router this request object has
409:53 - a URL property so I can console log that
409:57 - and we can see the full URL that does
409:59 - include the search params at the end if
410:02 - you look in the console there's the
410:03 - question mark message equals and then
410:05 - the HTML encoded you must log in first
410:07 - so what we can do with that request URL
410:10 - L is create again another native
410:13 - Constructor called URL and so I can use
410:16 - the capital's URL instructor which will
410:19 - give us a URL object and as I mentioned
410:22 - this again is just a native web
410:24 - interface that's one of the things that
410:26 - if you get involved with the new react
410:28 - router and the remix team they will
410:30 - constantly be telling you that they're
410:32 - just using the platform there's no need
410:34 - to reinvent the wheel when these tools
410:36 - are really amazing and they've been at
410:38 - our fingertips in JavaScript for many
410:39 - many years if you were to go to mdn and
410:42 - learn about URL you would also learn
410:44 - that you can access the search params
410:47 - object on top of that and that object is
410:50 - an instance of the search params
410:53 - Constructor also from the Native web so
410:55 - if I were to let's go ahead and console
410:58 - log this whole thing and we can see that
411:01 - I get an instance of URL search params
411:04 - this is exactly what we had down here
411:06 - where we can run this dot get message on
411:08 - top of it and so let's go ahead and add
411:11 - that on dot get message and we'll just
411:14 - console log that whole thing and sure
411:16 - enough we are back to a place where we
411:18 - have our message and I know that this
411:20 - looks a bit more verbose than what we
411:22 - had before but I would argue that what
411:24 - you're writing here is much more akin to
411:27 - Native JavaScript for the web as opposed
411:29 - to something that has been created by a
411:31 - third-party Library obviously loaders
411:34 - and the whole concept here this request
411:36 - object is being passed in by that third
411:38 - party library but in the meantime you
411:40 - have just become more knowledgeable on
411:43 - the native web so I think that's pretty
411:45 - cool again I'm probably just nerding out
411:47 - about this so I'm going to go ahead and
411:50 - well this is all chained together so I'm
411:52 - just going to return the message that
411:55 - comes back from this search params we
411:57 - can get rid of this return null and now
411:59 - I want you to think how can I grab the
412:02 - information from my loader inside of my
412:04 - login component in fact I'll just go
412:06 - ahead and make that a challenge
412:09 - okay so the challenge is to grab the
412:12 - message that's being returned from the
412:13 - loader right here and display it on the
412:16 - login page I'll go ahead and just erase
412:19 - these two lines and you can display it
412:21 - either I guess you only have two options
412:22 - it's either above the H1 or below the H1
412:25 - and just go ahead and make it in H2 on
412:27 - the page pause now and work on this
412:29 - challenge
412:35 - in order to get information from the
412:38 - loader we need to use use loader data I
412:40 - don't need this use search params
412:42 - anymore so I will grab use loader data
412:45 - instead and down here I can grab the
412:48 - message from use loader data and let's
412:51 - go ahead and console log that message
412:53 - just to make sure that it came through
412:55 - okay
412:56 - okay we successfully got you must log in
412:59 - first but I am curious before we finish
413:02 - this up what happens if I just go to
413:04 - slash login instead okay we do get null
413:07 - okay so getting a value of null is not
413:10 - too big of a deal if I try to render an
413:13 - H2 that has the JavaScript value of null
413:16 - in it then it simply doesn't display
413:18 - anything but if you go into the
413:21 - developer tools it will show a
413:23 - completely empty H2 which feels a little
413:25 - bit extraneous to me plus I think it's
413:27 - informative to do a conditional render
413:30 - here so that other developers might see
413:32 - this and know that it's possible that
413:34 - this message will be null and so I am
413:36 - going to do that I'm going to instead of
413:38 - having just an H2 I'll go ahead and do a
413:41 - conditional rendering that says if
413:42 - there's a message then I will display an
413:46 - H2 that has the value of that message in
413:49 - it and this isn't long enough to be on
413:51 - its own line let's go ahead and just put
413:52 - this all in one place okay we're on the
413:55 - login page we'll hit refresh there's no
413:57 - message there because we didn't come
413:59 - from a protected route and then I'll
414:01 - click protected and awesome we get our
414:03 - message you must log in first now I know
414:05 - we spent a lot of time talking about
414:07 - this message but in the end all we did
414:09 - was we added this message inside of our
414:12 - require auth function we added a loader
414:15 - to our login page in order to load
414:17 - whatever data might be necessary to
414:19 - correctly display this page and then we
414:22 - did a conditional render if that message
414:23 - exists then display it in an H2
414:26 - obviously we'd probably want to make it
414:28 - red or something that will stand out a
414:30 - little more okay let's go take all of
414:32 - this new information and apply it to the
414:34 - van Life app
414:39 - okay let's put together what we just
414:41 - learned by passing a message from the
414:43 - require auth function which is down here
414:45 - in the utilsjs file that says You must
414:48 - log in first and display that message in
414:50 - an H2 below the H1 that says sign into
414:53 - your account I wrote some CSS that just
414:55 - has a simple red class and so you can
414:57 - just add a class name of red to get some
414:59 - quick styling and yeah that's it I'm not
415:01 - going to go too much more into detail to
415:03 - give you a chance to think critically
415:04 - and actually write all the code you need
415:06 - so pause now and work on the challenge
415:15 - well we could start from pretty much
415:17 - anywhere but let's go to utilsjs and
415:20 - I'll just say we'll throw the redirect
415:22 - to slash login question mark message
415:24 - equals you must log in first okay easy
415:28 - enough
415:29 - then I could make a decision if I wanted
415:32 - to use the use search params hook I
415:34 - could do that and it would probably work
415:36 - just fine but again in an effort to
415:38 - really keep with the theme of loading
415:40 - any data that we need for our login
415:42 - component inside of a loader that's
415:45 - associated with this component I'm going
415:47 - to go ahead and Export a function
415:50 - called loader and I already know that
415:52 - I'm going to need access to the request
415:54 - and we'll just go ahead and chain
415:56 - everything kind of like we did before if
415:58 - it makes more sense to you to split it
416:00 - out where you get the URL and that's
416:02 - equal to the new URL of request.url and
416:05 - then you get the search params and then
416:06 - you return the value of message that's
416:08 - totally fine I'm just going to do it all
416:10 - in one so we'll say new URL of
416:13 - request.url that will give me an object
416:16 - of search params which I can use the
416:18 - method of get on and get the message
416:20 - okay I'm exporting this loader and
416:23 - before I can do any kind of use loader
416:26 - data I need to make sure that I go over
416:28 - to my route definitions and let's import
416:31 - it let's see here's our login so we'll
416:34 - import the loader as login loader and
416:37 - then add it to my login page which is
416:40 - right here near the top so my loader is
416:42 - equal to the login loader okay that
416:45 - means here I can grab use loader data
416:49 - and actually you know what I think this
416:51 - is a Remnant from when I was testing
416:53 - something before we don't need the used
416:55 - navigate hook right now so I'm going to
416:57 - get my used loader data we will do it
417:00 - right here after state which as a sneak
417:02 - peek I'm really excited to get rid of
417:04 - we're going to clean up this form quite
417:06 - a bit with the abilities that come from
417:08 - the new data routers so get excited
417:10 - about that now I can get the message by
417:13 - accessing use loader data and then just
417:16 - like I did before I will conditionally
417:18 - render it and we'll say if there's a
417:20 - message then we want to display an H2
417:23 - that contains the text of that message
417:25 - and has a class name of red okay let's
417:30 - see how we did we're at the login page
417:33 - so we shouldn't have any kind of message
417:34 - when we refresh but now if I go to the
417:37 - host page which is protected by our
417:40 - require auth function I get that message
417:42 - in my URL and sure enough it shows up on
417:44 - my page I'm going to make a quick
417:46 - judgment call the H2 looks a little
417:48 - imposing maybe I'll bump this down just
417:50 - a tiny bit to an H3 okay that's a little
417:53 - less intense hopefully all that went
417:55 - okay I know that was quite a number of
417:57 - scrims just to pass this message here
417:59 - but we are going to be coming back and
418:01 - passing additional things as we are
418:04 - doing our redirect which will make the
418:05 - user experience even better but that's
418:07 - going to happen a little bit in the
418:09 - future for now it's finally time for us
418:11 - to come back to our forum and actually
418:13 - start learning about how forms are made
418:15 - so much simpler in react router if we
418:18 - use something called an action which is
418:20 - kind of a sibling to loaders so get
418:22 - excited that's what's coming up next
418:28 - I've got a bit of a hot take to add to
418:30 - this course and that is the fact that
418:32 - forms in react are just bad there's a
418:35 - number of libraries out there that
418:36 - attempt to make forms in react a little
418:38 - more bearable but the truth is they're
418:40 - just a really difficult thing to work
418:42 - with in react you can get used to it and
418:44 - you can get good at them but they're
418:45 - still pretty difficult and the reason is
418:47 - we try to build a system over the top of
418:50 - the Native input form elements that
418:53 - attempts to bypass the State Management
418:55 - that already happens natively internally
418:57 - by forms and brings that out into react
419:00 - and forces react to maintain all of that
419:03 - information you can see in this form
419:05 - which I copy and pasted from my learn
419:06 - react for free course that we have to
419:09 - create our own state that manages every
419:11 - piece of data that we're trying to
419:13 - maintain we also have this handle change
419:15 - event which is put on every single input
419:18 - and manually tracks any keystroke or
419:20 - change that happens to the input in
419:22 - order to update State and then we have
419:24 - to control the value so we have to tell
419:26 - the input that its value is what is
419:29 - being held in state and all of this is
419:31 - sort of extra on top of what is already
419:33 - happening internally from a form you see
419:36 - originally with forms you would have
419:38 - your form element you would give it a
419:40 - method so submitting the form would
419:42 - usually do a post request or a put
419:44 - request out to a server somewhere and
419:47 - you would add an action attribute which
419:49 - told it which endpoint to send that form
419:52 - data to and then that endpoint on the
419:54 - server would take that data it would
419:56 - process it and it would do something
419:57 - with it like log the user in or validate
420:00 - that the inputs were valid or create
420:02 - some new resource or anything that
420:04 - normally would be handled by a form so
420:06 - you've heard me talk about the full
420:07 - stack framework remix which was created
420:09 - by the same people who created react
420:11 - router and what they decided to do is to
420:13 - instead of completely subverting the
420:16 - entire purpose of a native form and
420:18 - overwriting it with our own logic I
420:20 - decided to use the native capabilities
420:22 - of an HTML form and remix in some more
420:26 - abilities with modern JavaScript and
420:28 - anyway all of this is to say that
420:30 - there's a perfectly good native ability
420:32 - for forms in HTML to maintain their own
420:35 - State and to submit their information so
420:37 - when the concept of actions was
420:39 - introduced in react router 6.4 we gained
420:43 - the ability to sort of go back to those
420:45 - earlier times when we could make forms
420:47 - in react a little bit easier to work
420:49 - with so in the next few lessons we are
420:51 - going to be refactoring the login form
420:53 - so that it can use this new actions
420:55 - feature from react router
421:00 - we're going to see an example of what I
421:03 - was talking about where forms in react
421:05 - are just pretty difficult to work with
421:06 - compared to Native forms which have
421:09 - their own State management system and
421:11 - submission abilities in HTML to do that
421:14 - we are going to complete a couple of
421:16 - challenges first of all I want us to
421:18 - hook up our form so that it at least
421:20 - kind of halfway works I've done a little
421:22 - bit of work for you behind the scenes
421:24 - over in our server.js file I've created
421:27 - a model for users and I've entered one
421:30 - user in the server the fake database
421:33 - that we have once again this mirage.js
421:35 - server file is not important for you to
421:37 - understand the syntax of but just know
421:39 - that I've created a user in our fake
421:41 - database it has the email of b.com and a
421:45 - password of p123 you can see of course
421:48 - we're just saving this raw password here
421:50 - which is never a good idea but that's
421:52 - beside the point I've also created this
421:54 - endpoint here for slash login which is
421:57 - simply finding the user in our fake
421:59 - database and if the provided credentials
422:02 - which is the email and password match
422:05 - the user in our fake database then it
422:07 - will return the user object and a fake
422:10 - token that we have here I've also
422:12 - created a new function inside of our
422:14 - api.js file called login user so this is
422:18 - the interface that you'll be using it
422:19 - makes the fetch request for you it
422:21 - handles any errors that might come back
422:23 - it will send those errors forward if
422:25 - there are errors but otherwise it will
422:27 - send that object that has a user in a
422:29 - token that came from the server so that
422:32 - brings us to what your challenge
422:33 - actually is your challenge is to pull in
422:35 - that login user function from the api.js
422:38 - file and then call login user as soon as
422:41 - the form is submitted passing the login
422:43 - form data that we are just currently are
422:45 - console logging and one thing to
422:47 - remember is because login user from
422:50 - api.js is an async function that means
422:52 - it's going to automatically return a
422:54 - promise in which case you'll either need
422:56 - to create a separate asynchronous
422:58 - function inside of your handle submit or
423:01 - you can just use the dot then syntax and
423:03 - chaining to log that data to the console
423:06 - and in case that wasn't clear from the
423:07 - first part in Step 2 you just need to
423:09 - console log the data that comes back you
423:11 - don't need to worry about setting
423:13 - anything else up at this point okay I
423:15 - think that's enough information for you
423:16 - to get started so pause now and work on
423:18 - this challenge
423:25 - okay let's import our login user
423:27 - function so we will import login user
423:31 - from see how far back do we need to go
423:34 - this is inside of the Pages directory so
423:36 - we'll go back one directory and get API
423:39 - I can spell it right API there we go
423:41 - okay and then instead of console logging
423:44 - our login form data I can just call log
423:48 - in user and I'll pass that login form
423:50 - data and I'm not going to bother at this
423:52 - point in creating a completely separate
423:55 - async function here like sign in or
423:58 - something I'm not going to worry about
423:59 - that I'm just going to use the dot then
424:01 - syntax and let's see we will get some
424:04 - data back and we'll consolid the data
424:07 - there might be a mistake or two here
424:09 - let's see how we're doing we'll hit save
424:12 - and we will enter b.com and p123 hit log
424:17 - in open the console and perfect there's
424:20 - our user object and the token that we
424:22 - were expecting this is the point at
424:24 - which you might typically take this user
424:26 - object and save it somewhere so that you
424:28 - can have access to it elsewhere in your
424:30 - application for example you might put it
424:32 - in context so that you can I don't know
424:35 - display the user's name or their email
424:36 - address in multiple places you also
424:39 - would likely want this token to live
424:41 - preferably in some kind of cookie
424:43 - although sometimes people might put it
424:44 - inside of local storage or session
424:46 - storage however we are going to be
424:48 - bypassing all of that for now because
424:50 - that's not terribly important for us
424:51 - when we're learning react router and
424:53 - client-side routing in general we're
424:55 - going to continue opting for kind of a
424:57 - fake version of authentication so we can
424:59 - see the routing aspects of
425:01 - authentication and then it will be up to
425:03 - you to actually Implement your real
425:05 - authentication in the way that you want
425:07 - our next step is to not just code up the
425:09 - happy path which is all we've done here
425:11 - we're assuming that login end user is
425:13 - going to work flawlessly so for the next
425:15 - part of this challenge we are going to
425:17 - code up the sad path all with the goal
425:19 - of embracing actions which I mentioned
425:21 - earlier is like a sibling to loaders
425:23 - which will allow us to really simplify
425:26 - our code and think about it in an
425:28 - entirely different way which I would
425:29 - argue is a much simpler way to
425:31 - understand so that doesn't mean that you
425:33 - can skip the next steps all of these
425:34 - challenges that we're doing here are
425:36 - still going to help make you a better
425:38 - react developer so I really implore you
425:40 - keep doing these challenges and then you
425:42 - will feel even more cathartic when we
425:44 - get to erase a bunch of the code in
425:46 - favor of something simpler so at this
425:48 - point let's move on to the next part of
425:49 - this challenge
425:54 - our job is never done as a developer
425:56 - until we have also taken into account
425:58 - the possibility of the sad path so
426:01 - that's what our challenge is going to be
426:02 - here you can see I even started this on
426:05 - number three because that's where we
426:07 - left off the job wasn't quite finished I
426:09 - won't necessarily read through all of
426:11 - these steps you should be able to
426:12 - accomplish everything and I've tried to
426:14 - specify where you might need to go to
426:16 - Google in case there is something in
426:18 - this challenge that you haven't quite
426:19 - tried to do before but that's okay
426:21 - that's the regular job of a software
426:23 - developer so read through these
426:24 - challenges one by one very carefully
426:26 - start working on them and when you're
426:28 - done with the challenge we'll come back
426:29 - together and work on it so pause now and
426:31 - code up the sad path for us
426:39 - okay let's go ahead and add a status
426:41 - State we'll default it to the string
426:43 - idle and let's see we'll just do that
426:46 - maybe right below our other use state so
426:48 - we'll have a status set status
426:52 - and that's react.use state with a
426:55 - default of idle
426:57 - there we go okay and then when the login
426:59 - form begins submitting set it to the
427:01 - string submitting and when it's done
427:03 - submitting whether it's successful or
427:05 - not set it to idle again okay so set it
427:08 - to submitting as soon as the form starts
427:11 - submitting so right here we will call
427:12 - set status we'll say submitting and it
427:16 - might be tempting to inside of my DOT
427:18 - then to open up that function and set
427:20 - the status back to idle however because
427:22 - we are working on the sad path and
427:24 - there's a possibility of a DOT catch
427:27 - that will eventually run I'm going to
427:29 - use a promise chain that you might not
427:30 - be quite as familiar with and that is
427:32 - Dot finally this is code that will run
427:34 - whether the promise resolved or was
427:37 - rejected and so in here I can set my
427:39 - status back to idle and that way it will
427:42 - go back to idle whether or not the login
427:45 - user was successful okay let's see that
427:48 - should do it for number three I'm just
427:50 - going to erase these as we finish them
427:52 - disable the button when the status state
427:54 - is submitting so this might have been
427:56 - one where you need needed to go out to
427:58 - Google for some answers but on button
428:01 - elements in jsx and well actually in
428:03 - HTML there's a property called disabled
428:05 - and in jsx I can set that equal to an
428:08 - expression and if it evaluates to true
428:10 - then the button will be disabled and if
428:12 - it evaluates to false then the button
428:14 - will not be disabled and so it says to
428:17 - disable the button when the status is
428:20 - submitting so we can say here if status
428:23 - is equal to submitting this will
428:26 - evaluate to a Boolean if status is
428:29 - submitting in other words if submitting
428:31 - equals submitting then that will be true
428:33 - and the button will be disabled and
428:35 - actually you know what this wasn't part
428:36 - of the challenge but I think I want to
428:37 - change the text to say logging in if
428:40 - it's currently in the process of
428:42 - submitting and so I can do that with
428:44 - just some basic conditional rendering
428:46 - I'll go ahead and separate these things
428:48 - out just a little bit to buy myself some
428:50 - room and then I'll open up an expression
428:53 - I'll say if the status is equal to
428:55 - submitting I'll use a ternary here then
428:58 - we'll say logging in and we'll do dot
429:01 - dot but otherwise we'll say log in here
429:05 - let's put these on their own lines like
429:07 - this okay and I think we should be able
429:10 - to test this now I'll hit save and I
429:13 - guess we can try b.com p123 we'll hit
429:16 - log in okay it said logging in for just
429:18 - a brief second it was a little bit hard
429:20 - to see and we still got our console log
429:22 - of the data back that's good if I were
429:25 - to maybe not enter any values in here
429:27 - that should be an error and okay we get
429:29 - our object here that is console logging
429:32 - with the no user with those credentials
429:34 - found I think we're getting a little bit
429:36 - ahead of ourselves but one thing that's
429:37 - nice is because our Dot finally is
429:39 - setting the status back to idle our
429:41 - button now says login again if we had
429:44 - only set the status to idle inside of
429:46 - our DOT then then it would probably be
429:48 - stuck in the submitting State because we
429:50 - never set it back to idle okay let's go
429:53 - back up we have done number four let's
429:55 - go ahead and erase that okay let's
429:57 - actually catch the error that comes back
430:00 - when we are maybe not submitting
430:02 - something or we have incorrect username
430:04 - and password combination so number five
430:06 - we need to add an error State and
430:08 - default it to null again we'll just do
430:10 - that with States so we'll have const
430:12 - error set error and that is react.use
430:16 - State and default to null when the form
430:19 - is submitted reset the errors to null
430:22 - okay so that's something we can probably
430:24 - just do here we'll set the error to null
430:26 - just in case there is an error and then
430:29 - the user fixes it and hits submit again
430:30 - we don't necessarily want that error to
430:32 - stick around that might not make a huge
430:34 - difference but we're just trying to
430:36 - cover all of our bases so we'll leave it
430:38 - there for now if there's an error from
430:40 - login user add a DOT catch in the
430:42 - promise chain then we need to set the
430:44 - error to the error that comes back okay
430:46 - so we have a DOT catch ready we'll catch
430:49 - the error and we will simply set the
430:51 - error to that error object that way we
430:54 - can save it in state we can start
430:55 - rendering things on the page age when
430:57 - that state changes and actually that's
430:59 - part number six so I'll delete five
431:02 - display the error.message below the H1
431:04 - if there's ever an error in state okay
431:07 - so that would be right here kind of
431:09 - again to our previous message that would
431:12 - say you must log in so I guess we can
431:15 - actually you know what I'm just going to
431:16 - copy this line down and we'll say
431:18 - instead if there's an error in state
431:21 - then we will display oh look we're even
431:23 - using the same term so I can say
431:24 - error.message and we'll keep the class
431:27 - name of red as an H3 and yeah let's
431:31 - clean this up kind of anticipating that
431:34 - we did everything perfectly but we never
431:35 - know let's go ahead and hit save I'll
431:38 - just click login without providing
431:39 - anything and sure enough no user with
431:42 - those credentials found perfect if I
431:44 - were to say something like C at c.com we
431:47 - don't have a user with those credentials
431:49 - and put anything in for the password we
431:51 - should get the same thing and I guess
431:53 - one thing that's nice about clearing the
431:54 - error to null is that when we logged in
431:56 - it made that error message disappear
431:58 - which made it much more obvious that we
432:01 - are having yet another problem with no
432:03 - user with those credentials found and
432:04 - it's not just the same one that's from
432:06 - before by the way if you're wondering
432:08 - where this message is coming from in the
432:10 - first place since you didn't code up the
432:12 - api.js or the server.js editions that I
432:15 - made that's where they're coming from
432:16 - login user is making a request to fetch
432:20 - the data from API login it's passing
432:23 - those credentials and if there is an
432:25 - error on the server then it's going to
432:27 - throw this error which has a message
432:28 - property with data.message and that is
432:31 - coming from the server so we go to
432:33 - server.js and we can see that if there
432:36 - is no found user then we just return a
432:38 - 401 response and have a message that
432:41 - says no user with those credentials
432:43 - found which makes its way back to our
432:45 - front end and displays to the user okay
432:47 - that was a lot of work let's go check
432:50 - out the login page and admire what we've
432:53 - done and maybe admire isn't the right
432:55 - word because what we're looking at here
432:57 - is a ton of boilerplate code if you're
432:59 - using a third-party form library in
433:01 - react then you might be able to avoid a
433:03 - bunch of this also if you're using a
433:05 - fetching Library like 10 stack query
433:07 - formerly known as react query or SWR or
433:11 - one of those other similar libraries you
433:13 - might be able to avoid some of the
433:14 - spoilerplate code however we are going
433:16 - to see how react router has brought back
433:18 - our ability to use the native form
433:20 - element its internal state that it's
433:23 - already able to maintain its ability to
433:25 - submit that form and then we're going to
433:27 - process the data from that form and
433:29 - we'll see just how much simpler our form
433:31 - can get however before we jump into that
433:34 - I promise only one more thing we're
433:35 - going to learn and it's going to be very
433:37 - quick we're going to see that there is a
433:39 - programmatic way in which we can send
433:41 - somebody to a new route mostly so that I
433:43 - can check that off my list as something
433:45 - that I've taught you the way that we'll
433:46 - do this when we start using actions will
433:48 - be slightly different so like I said I
433:50 - just want to get it out there and
433:52 - consider it taut so that we can finally
433:54 - move on to actions
433:59 - this last topic is so simple to grasp
434:01 - that I'm actually not even going to
434:03 - bother including this as part of a
434:05 - challenge or an aside or anything like
434:07 - that I'm just going to show it to you
434:09 - because then we're going to jump into
434:10 - refactoring everything anyway we've
434:12 - learned about the navigate component
434:15 - from react router if we ever were to
434:17 - render a navigate component like this
434:20 - and of course I would have to import it
434:21 - from react router then it would
434:23 - immediately redirect us to a different
434:26 - route that we specify here so for
434:28 - example if I went to the slash about
434:30 - page if I hit refresh here on the login
434:33 - well I need to import of course I just
434:35 - talked about this let's import
434:37 - navigate okay let's try again okay so
434:40 - you can see it tried to load me to the
434:41 - login page and it immediately navigated
434:43 - me to the about page so that's just a
434:46 - refresher of that which we've already
434:48 - learned that is a component version of
434:50 - what we're going to learn which is a
434:52 - hook called use navigate if inside of
434:55 - your more programmatic code not the UI
434:57 - code that we have with jsx but rather
435:00 - the code that's actually handling the
435:01 - logic if in that code you want to
435:03 - navigate somewhere you can use the use
435:05 - navigate hook to get access to a
435:07 - function that I'll call navigate equals
435:10 - use navigate and this function when you
435:13 - call it will navigate you to a new route
435:15 - in fact under the hood the navigate
435:17 - component I believe is just using use
435:20 - navigate and calling the navigate
435:21 - function so instead of console logging
435:24 - our data here we might decide that we
435:27 - just want to navigate someone to the
435:29 - slash not about let's say maybe slash
435:32 - host page okay so I'll refresh I'll go
435:35 - to login and one thing that I did have
435:37 - to change is over here in utilsjs I made
435:40 - sure that this head is logged in is true
435:42 - that way it wouldn't forever redirect me
435:45 - back to the login page and let's see so
435:47 - be at b.com p123 login logging in and it
435:52 - redirects me to the host page there are
435:54 - options to navigate for example right
435:57 - now if I hit back I go back to the login
435:59 - page there's an option I can include
436:01 - that just says replace true and this
436:04 - means it will replace my location in the
436:06 - history stack with what used to be there
436:08 - that might not make a ton of sense let
436:10 - me hit refresh I'll log in again p123
436:13 - I'll hit login but then if I hit back it
436:16 - takes me to the page I was on before I
436:18 - went to the login page instead of
436:20 - creating a new entry in my browser
436:22 - history for the login page it just
436:25 - replaces it with the new one for slash
436:28 - host now one thing you might be asking
436:30 - yourself is what is the difference then
436:32 - between using this navigate function and
436:34 - using the redirect function which we
436:36 - learned earlier an important thing to
436:38 - keep in mind about react is that any
436:40 - hooks that you have like use navigate
436:42 - they must be run at the top level of
436:45 - your component code however when we're
436:48 - working with other functions like we
436:50 - have with our loader and like we're
436:52 - about to see with our action function
436:54 - we're not able to use hooks like this
436:56 - because this function is not a component
436:59 - it's not rendering any UI it's simply
437:02 - helping the component do its job so
437:04 - while use navigate works if we're going
437:06 - to be running it inside of a component
437:09 - like this it's not going to help us when
437:11 - we're working with loaders or actions
437:13 - now I do want you to keep this little
437:15 - nugget of information that we covered
437:17 - about replacing the entry in the history
437:19 - stack because we're going to come back
437:20 - to that and it's also important to note
437:22 - that if you're using navigate like this
437:25 - inside of a component you're oftentimes
437:27 - going to need a use effect in order to
437:30 - avoid some kind of difficult bugs that
437:32 - can happen when you're using navigate
437:33 - okay that's enough delaying I promise
437:36 - let's move on and finally start learning
437:38 - about how we can simplify and improve
437:40 - our forms using react router
437:46 - we're back here at the super basic
437:48 - version of our web app that we have and
437:50 - I've spruced up this login form just a
437:52 - little bit and our goal is to set
437:54 - ourselves up so that we can use the new
437:56 - actions feature with the react router
437:58 - data layer apis you see natively forms
438:01 - know how to handle their own State and
438:04 - they know how to submit to some kind of
438:06 - backend so traditionally I might have a
438:09 - property or an attribute on my form that
438:11 - would say action and I would provide to
438:14 - it maybe a PHP file let's call it
438:16 - login.php so that when I submit this
438:19 - form or rather when the submit event
438:21 - happens the PHP file would get called it
438:25 - would serialize the information from the
438:27 - form either in a query string in the URL
438:29 - or it would collect it together as form
438:31 - data and send it to the login.php file
438:34 - which would then process the data and do
438:37 - something in response well we don't have
438:39 - a backend to submit to but maybe you can
438:41 - see where the name for the action
438:42 - function which we're about to learn
438:44 - about comes from instead of submitting
438:46 - into a back end react router gives us a
438:48 - component that allows us to intercept
438:50 - the outgoing request that normally would
438:53 - happen with the native form and process
438:55 - that information on the front end
438:56 - instead so let's get rid of this action
438:59 - and in order to use the action function
439:02 - that we're about to talk about we need
439:03 - to import a capital f form component
439:06 - from react router which is built on top
439:08 - of the Native HTML form but we'll use as
439:11 - a drop-in replacement for it and because
439:13 - the native HTML form is able to maintain
439:16 - its own State and has its own way to
439:19 - submit the data that's in the form we no
439:21 - longer need to do this imperative handle
439:24 - change or handle submit functions that
439:26 - we had before which means I can start
439:28 - the really exciting Act of deleting some
439:31 - code I can get rid of my handle submit
439:33 - which means I can get rid of this whole
439:35 - function here that feels really good
439:37 - we're no longer going to be controlling
439:40 - the state of the form with our internal
439:42 - state which means I don't need to
439:43 - control the value and I don't need to
439:45 - watch for the on change event which
439:48 - means I can get rid of those four lines
439:49 - of code as well because we're not using
439:52 - handle change anymore I can get rid of
439:54 - this whole function our on submit is
439:56 - where our navigate was being used we
439:58 - don't need that anymore and we're going
440:00 - to let the form maintain its own state
440:02 - so I can get rid of my react State and
440:05 - just look at that obviously we're not
440:07 - working in quite the same way that we
440:09 - were before but the form is so much
440:11 - simpler to understand and reason about
440:14 - and on top of that as we're going to see
440:16 - if we need to learn information about
440:18 - the form we don't need to go to the
440:20 - react documentation on how to handle
440:22 - forms in the react way we can simply go
440:25 - to the mdn docs and learn about the form
440:28 - object and form data I'm getting a
440:30 - little bit ahead of myself probably
440:32 - because I'm excited to delete code so in
440:35 - the next scrim let's jump in we're going
440:37 - to learn about how to set up the action
440:38 - function in react router
440:44 - where a farm would submit typically to
440:46 - some kind of back end in react router
440:49 - our capital F form is going to run a
440:51 - function that we tell it to run the
440:53 - Syntax for setting this up is going to
440:55 - look very similar to loaders where we
440:57 - had a function that we exported that we
441:00 - were calling loader instead we're going
441:02 - to create a function called action once
441:04 - again the actual name for this function
441:06 - doesn't matter but there's pretty much
441:08 - no reason not to stick to the Convention
441:10 - of using loader and action and then in
441:12 - remix if you're actually building a
441:14 - remix app I think it does matter that
441:16 - this is called loader and action now
441:18 - it's up to you if you want this to be an
441:20 - async function or not I'm going to
441:22 - choose for it to be an async function
441:23 - just to make the syntax a little bit
441:25 - nicer to deal with
441:27 - and just like we did with loaders I'm
441:29 - going to go over to my index where my
441:31 - route definitions are where I'm
441:33 - importing my login I'm going to grab my
441:36 - action and that's a named export so I
441:39 - need to say action and then we'll just
441:41 - rename it as login action just for the
441:43 - sake of it just in case we have other
441:45 - actions that we were to need at some
441:47 - point
441:48 - and where before we had a prop called
441:50 - loader this time we're going to have a
441:52 - prop called action and I'll just set up
441:54 - that imported function as the action on
441:57 - this route so what exactly does this
441:59 - mean well if I have anything that
442:01 - submits a form from my login component
442:04 - on this login route it's automatically
442:07 - going to call the function that I pass
442:08 - into the action prop on that route so
442:11 - let's go back to login and maybe for now
442:14 - I'll just console log I'm the action
442:17 - function
442:18 - and we're going to submit this form and
442:20 - we're going to see something pretty
442:22 - interesting so I'll hit login and it
442:24 - looks like nothing happened if you have
442:27 - quite the Eagle Eye you might have
442:28 - noticed that in our URL it did serialize
442:31 - the information based on the names of
442:33 - the form email and password and put them
442:35 - up inside of the URL log in question
442:38 - mark email equals nothing and password
442:40 - equals nothing that might seem confusing
442:43 - at first but you would quickly learn
442:45 - that that's the default way that forms
442:47 - work if you don't tell it that you are
442:49 - performing a post request as part of
442:51 - your form then it assumes that you're
442:53 - doing a get request and in a get request
442:56 - it serializes the inputs and it puts
442:58 - them up in the URL however we are going
443:01 - to be handling our login form as a post
443:03 - request which means on my form I'm going
443:05 - to include the by the way native
443:07 - attribute called method and set it equal
443:10 - to post now one last thing before we
443:13 - actually submit this I'm going to get
443:14 - react router complaining that I'm not
443:16 - returning anything from my action
443:18 - function so I'm I'm just going to add
443:19 - this return null here okay now that I've
443:22 - told my form that its method is post and
443:24 - again this is something native to HTML
443:26 - forms this is not something specific to
443:29 - react router I'll go ahead and hit save
443:31 - and let me click on login to get rid of
443:33 - those query strings again we'll hit log
443:35 - in and sure enough I get my I'm the
443:38 - action function console log running now
443:40 - you probably remember I was talking
443:42 - about how Native forms would take an
443:44 - attribute called action where you could
443:46 - tell it where to submit that information
443:49 - to like some kind of PHP file and
443:52 - technically in the react router capital
443:54 - F form you can also include an action
443:56 - prop here however the react router form
443:58 - does a pretty good job of having
444:00 - sensible defaults where I usually don't
444:02 - find myself having to include an action
444:05 - prop at all generally speaking the
444:07 - default is going to be wherever you set
444:09 - that action up in your route definitions
444:11 - so here I told it that the login action
444:14 - is going to be the action that should
444:16 - occur on the login path and so that
444:19 - default will just automatically be
444:21 - included or understood by this form so
444:24 - instead of saying action equals slash
444:26 - login since that's the route where the
444:29 - action function will be handled I can
444:31 - just omit that and it'll usually have
444:33 - the correct default there okay the last
444:35 - thing I want to do is see that there's
444:37 - actually an object coming in from the
444:40 - action function here so we'll go ahead
444:42 - and console log the objects just to see
444:45 - what that looks like I'll hit save and
444:48 - submit and we can see that object has a
444:50 - request property and a params property
444:53 - that should look pretty familiar because
444:55 - that's exactly what gets passed into our
444:57 - loaders as well and that's where we're
444:59 - going to get access to the information
445:01 - that gets submitted in this form that's
445:03 - what we're going to be working on very
445:05 - soon but since we've covered a bit of
445:07 - ground already we are going to come back
445:09 - to the van Life app and apply what we've
445:11 - learned over there
445:15 - all right let's apply what we've learned
445:17 - about action functions and start
445:18 - building it into our sign in form in
445:21 - this case I was pretty explicit about
445:23 - the steps you'll need to take in this
445:24 - challenge so just make sure to read
445:26 - these steps carefully and you should
445:28 - have a pretty easy time of this pause
445:29 - now and work on this challenge
445:36 - okay in order to replace this form with
445:39 - the capital F form we will need to make
445:41 - sure that we import that just because
445:43 - this is getting a bit long I'm going to
445:45 - go ahead and put things on their own
445:47 - lines and then we'll import our capital
445:50 - F form and go down and replace our form
445:54 - let's see where is it right here with
445:56 - the capital F form that comes from react
445:59 - router okay we need to add a method prop
446:02 - to the farm so right here we'll say the
446:05 - method is going to be post
446:08 - and this is getting a bit long I already
446:10 - know I'm not going to need my on submit
446:12 - so I will go ahead and get rid of that
446:14 - and I'll leave this here just so I can
446:17 - reference it if I need to we're just
446:18 - going to worry about the form for now
446:20 - okay so let's see that was number one uh
446:24 - oh and that was number two okay so we
446:26 - need to create an action function in
446:27 - this file maybe just right here below
446:30 - our loader I'll go ahead and create an
446:32 - async function called action and I'll
446:35 - just have it console log action function
446:38 - and we'll make sure to do the return
446:41 - null just so react router doesn't
446:42 - complain to us too much okay that's
446:45 - number three and then for number four to
446:47 - register the action function on the
446:49 - route okay we can do that get rid of
446:51 - this we'll go over to let's see we're
446:53 - already exporting it we'll come to our
446:56 - index file come up to where login is we
446:58 - have our loader as login loader and
447:01 - we'll go ahead and bring in our action
447:02 - as login action
447:05 - and just like we did let's see where is
447:08 - here we go loader we'll say action
447:10 - equals login action
447:12 - okay let's hit refresh and let's come to
447:16 - login just so we can take a look at our
447:18 - code we'll hit the login button and sure
447:20 - enough the console log for Action
447:22 - function ran okay let's go back to our
447:24 - practice app and we'll learn how we can
447:26 - pull in data from the form so that we
447:28 - can actually do something with it
447:33 - okay let's submit our form again so we
447:35 - can see what gets logged to the console
447:37 - again we have an object that has two
447:39 - properties request and params we'll take
447:42 - just a few seconds to talk about the
447:44 - params and then we're going to focus
447:46 - mostly on the request when you see
447:48 - params inside of our loader or our
447:50 - action objects that gets sent as the
447:52 - parameter to the function params is
447:54 - referring to Route parameters so if our
447:57 - path were something like slash login
447:59 - slash colon ID or colon whatever that
448:02 - would mean that this path or this route
448:04 - has parameters attached to it that we
448:06 - could grab from our action function in
448:09 - fact let me hit save our login is going
448:11 - to be gone because that route doesn't
448:12 - exist and we'll say login slash whatever
448:15 - in the URL we get our login page back we
448:19 - can go here we'll submit the form and
448:21 - now we can see that the params object is
448:23 - not empty it has a property called ID
448:25 - and the value is whatever because that's
448:28 - the parameter for this F so it's really
448:31 - just good to know that in our action
448:33 - function if we needed access to our
448:35 - params for example if we were trying to
448:37 - update one of our existing Vans we'd be
448:40 - at maybe slash host slash fan one we can
448:43 - grab the parameter of the URL and say
448:46 - hey we need to make a request out to
448:48 - slash API fans slash one which we
448:51 - grabbed from this object and make
448:53 - whatever change was necessary let me go
448:55 - ahead and undo this because that's not
448:57 - our use case here for the login page
449:00 - okay now let's talk about the request
449:02 - object and I think just for the sake of
449:05 - compartmentalizing the different topics
449:06 - into their own scrims we're actually
449:08 - going to do that in the next lesson
449:13 - okay let's look now at the request
449:16 - portion of this object so instead of
449:18 - pulling in the whole object I'm actually
449:19 - going to destructure it and just grab
449:21 - the request part in our case we don't
449:23 - need the params part so we'll just leave
449:25 - it this way now the reason this is
449:27 - called request is because in a native
449:29 - form when you submit it it normally
449:31 - would send a request out to that backend
449:34 - file for example I've been calling it
449:36 - login.php or it could be some endpoint
449:38 - whatever it might be and the back end
449:40 - would process that request and do
449:42 - something with it in our case because
449:44 - we're just working entirely on the front
449:46 - end react router with this action
449:48 - function is basically intercepting that
449:50 - request and giving you access to it here
449:53 - in your action function which gives you
449:55 - the chance to process the information
449:57 - from the form in whatever way makes the
449:59 - most sense for you essentially this
450:01 - action function is replacing the handle
450:04 - submit function that we had before
450:05 - inside of our component so what can we
450:08 - do with this request object well one of
450:10 - the pieces of that request object is the
450:12 - form data that's coming from our form I
450:15 - can get access to that form data by
450:17 - saying const form data or really
450:20 - whatever you want to call it is equal to
450:22 - request dot form data now calling this
450:26 - form data function is actually an
450:28 - asynchronous function so I can say I'm
450:31 - going to await the value that comes back
450:33 - when the promise is resolved and that
450:35 - will give me the correct access to my
450:37 - form data object and this form data
450:39 - object is the native JavaScript form
450:42 - data object that you could go to the
450:44 - Mozilla developer Network docs and read
450:46 - about in fact if you'd like you can
450:48 - click the screenshot here to take you to
450:49 - the mdn docs about form data instances
450:52 - of form data have a property called get
450:54 - and so now I can gather information from
450:57 - the inputs of my form by saying form
451:00 - data dot get and then I would pass the
451:03 - name property of the input that I'm
451:05 - trying to get information about or
451:06 - rather trying to get the value from so
451:08 - because this was named email I need to
451:11 - make sure that I say form data.getme
451:13 - Mill and for password I'm going to do
451:15 - the same thing for the password so I'll
451:17 - say password if this email were named
451:20 - the name property were something like
451:22 - blah blah then I would have to say that
451:25 - get blah blah let's keep it as email for
451:28 - now just getting it from the form data
451:30 - is kind of useless to me unless I save
451:32 - it so we will save it in a variable
451:33 - called email and password and at this
451:37 - point I could then just process this
451:40 - info however I wanted in the case of our
451:43 - van Life app this is where we would pass
451:46 - the email and password to the login user
451:50 - function so let's go ahead and make sure
451:52 - that this is working correctly we'll
451:54 - just console log both of these we'll go
451:56 - ahead and hit save we will fill in
451:59 - bfb.com and then I'll just do ASDF and
452:03 - hit login and cool inside of our action
452:05 - function we now have access to the
452:08 - values of our inputs since we're here
452:10 - mentioning the login user function from
452:12 - our van life app that's a great segue
452:14 - for us to take what we've learned here
452:16 - and apply it to our van Life app however
452:18 - before just jumping ahead feel free to
452:20 - take some time to play around with this
452:22 - code if you want you could add an input
452:24 - or two and try to get the values from
452:26 - your action function and try to commit
452:28 - the process that we've done here to
452:30 - memory because your challenge is going
452:32 - to be to apply these exact same
452:34 - principles to the van Life app so that's
452:36 - what we'll be doing next
452:41 - okay and now it's your turn to get your
452:43 - hands on the keyboard you'll essentially
452:45 - be doing exactly what we did before your
452:47 - challenge is to pull in the form data
452:49 - from our form when it gets submitted and
452:51 - for now you can just log the data to the
452:53 - console you'll probably notice that
452:55 - we're still doing all of the more
452:57 - imperative form handling stuff that we
452:58 - were doing in react including saving the
453:01 - form data as part of react state but for
453:03 - now it should still work if you pull in
453:05 - the email and password to the action
453:06 - function and just log it we'll be
453:08 - getting rid of a lot of stuff here soon
453:10 - so pause now and work on this challenge
453:18 - okay our action needs to get access to
453:21 - the request and with the request we can
453:24 - get access to a form data object by
453:27 - saying await request dot form data this
453:31 - await can be tricky to remember
453:32 - hopefully that didn't trip anybody up
453:34 - too much and then once we have access to
453:36 - our form data we can get the email with
453:39 - form data.get email and we'll just do
453:42 - the exact same thing with the password
453:44 - let's go ahead and console log our email
453:48 - and password we'll hit save open up our
453:51 - console type in b.com p123 login awesome
453:57 - again our action function is slowly
454:00 - starting to take shape as a replacement
454:01 - for our handle submit but with a number
454:04 - of really nice additional benefits that
454:06 - we haven't yet talked too much about
454:07 - before we start a major refactor of the
454:10 - login component code we are going to
454:12 - take the email password and actually log
454:15 - our user in and kind of complete that
454:17 - workflow and then we'll come back and
454:19 - we'll start cleaning up our login
454:20 - component
454:24 - you might remember in our form we had an
454:27 - on submit event handler that was calling
454:30 - our handle submit function here this is
454:32 - the function that was logging in our
454:34 - user but now that we're using these
454:36 - actions or this action function we're no
454:39 - longer logging in our user hopefully
454:41 - it's not too big of a leap to see that
454:42 - really all we need to do is to take our
454:45 - login user function and call it up here
454:48 - in our action so we'll go ahead and call
454:50 - login user this function expects an
454:53 - object that has an email property and a
454:56 - password property and since we chose to
454:58 - name our variables email and password we
455:00 - can use this shorthand to pass in an
455:03 - object with these properties the login
455:05 - user function is an async function we
455:07 - can look here in the api.js file and see
455:10 - that it's an async function and it's
455:12 - going to return data but since it's an
455:14 - async function it's automatically going
455:16 - to wrap that data in a promise and I can
455:18 - unwrap that by using the await keyword
455:20 - so I'll say const data equals await the
455:23 - call to login user let's move our
455:26 - console log down here and change it to
455:28 - log our data we'll hit save put in B at
455:33 - b.com p123
455:35 - and sure enough there we go we get our
455:37 - user object which you might then decide
455:39 - to put into some kind of authentication
455:42 - context or into local storage or
455:44 - wherever makes the most sense to have
455:46 - information about your currently logged
455:47 - in user and then we also get our token
455:50 - which we could save in a number of
455:52 - different ways oftentimes it's best to
455:54 - put it inside of a cookie which might be
455:56 - something that's actually handled by
455:58 - your server because we did go out of our
456:00 - way to code our sad path where we have
456:02 - the different status and the error
456:04 - states that we're maintaining in our
456:06 - component we're not quite ready to just
456:09 - delete everything but we can start down
456:11 - that path for example right now we are
456:13 - no longer meeting the state where we're
456:15 - maintaining the values of the inputs
456:17 - instead we're using the internal state
456:18 - of forms to handle that so I can go
456:21 - ahead and get rid of that local form
456:22 - State I can come down to my forms and I
456:26 - can get rid of my on change and my value
456:28 - props right here we don't need those
456:30 - anymore that simplifies our form quite a
456:33 - bit and because we're not watching for
456:35 - change just in the farm manually anymore
456:37 - I don't need my entire handle change
456:39 - function this is a great start we're
456:41 - going to see that we can clear up even
456:43 - more of this later but for now we've
456:45 - made some good Headway and there's one
456:47 - really small change that I want to make
456:48 - just to make our app seem a little bit
456:51 - more realistic even though we're still
456:52 - doing fake authentication so we'll touch
456:55 - on that next
456:59 - in our require auth utility function we
457:02 - are still hard coding the fact that the
457:04 - user is logged in and although I'm not
457:06 - going to suddenly insert real
457:08 - authentication and dealing with
457:10 - authentication context saving the user
457:12 - across the entire app or anything like
457:14 - that I do want to make it so that in
457:16 - some form or fashion when we log in from
457:18 - our form it remembers that we're logged
457:20 - in and then we can also log out and see
457:23 - how our app would react to that scenario
457:25 - so I'm actually going to type this up as
457:27 - a challenge for you
457:29 - okay so we're going to be saving the
457:31 - logged in state to local storage just
457:34 - again as a temporary way to fake our
457:36 - authentication I could have just typed
457:39 - this for you but I figured this might be
457:40 - a good way for you to navigate yourself
457:42 - around the app and to think critically
457:44 - about how this might work and play with
457:46 - some of the different files that we've
457:48 - created so when the user logs in I want
457:50 - you to save a value that we'll just call
457:53 - logged in to local storage and set the
457:55 - value of logged in to True maybe instead
457:58 - of saying save a value we'll say save a
458:00 - key called logged in and set the value
458:02 - of that key to true then over in the
458:04 - require auth function you need to check
458:07 - if the value of logged in in local
458:09 - storage is true instead of hard coding
458:11 - it like it currently is it's a fairly
458:13 - straightforward challenge it shouldn't
458:15 - be too difficult if you need a reminder
458:17 - on how to deal with local storage you
458:20 - can always do a quick Google search it's
458:21 - a pretty common thing so you should be
458:23 - able to find good answers out there and
458:25 - I need the spell challenge right okay
458:27 - pause now and work on this challenge
458:34 - the user is logging in here in our
458:37 - action function or rather we're calling
458:39 - the login user in our action function
458:41 - right now we're still only coding the
458:43 - happy path but we're going to get to the
458:45 - sad path later for now we'll just assume
458:47 - that everything will work well and so
458:49 - I'm going to say
458:50 - localstorage.set item with the key of
458:53 - logged in to the value of true in
458:56 - reality I think this might get
458:58 - stringified but that's okay it'll work
459:00 - because we're just going to completely
459:02 - remove the logged in value from local
459:04 - storage when they log out so that's okay
459:06 - for now we'll get rid of this console
459:07 - log and then over in our utilsjs instead
459:11 - of hard coding is logged in we're going
459:13 - to set it equal to
459:15 - localstorage.get item of logged in and
459:19 - that should be it again when we log out
459:22 - we'll make sure that we don't set it to
459:24 - false because I'm not sure if that would
459:26 - work I guess we can test it but we'll
459:28 - just go ahead and remove the logged in
459:29 - item completely okay let's hit refresh
459:32 - and we should be able to test this Now
459:35 - by trying to go to host so since I'm in
459:38 - host it appears that I am logged in I
459:40 - have something in local storage maybe
459:42 - from testing this previously that says
459:44 - that I am logged in and now that I think
459:47 - about it unless I open my developer
459:49 - tools which is probably what I should
459:51 - just do I don't have a great way to
459:53 - clear out my local storage so maybe what
459:56 - I'll do is just go to my file here in
459:59 - the index and I'll just type in
460:01 - localstorage dot remove item logged in
460:04 - run this code okay cool well it looks
460:08 - like it sent us to the login page so I
460:09 - think that worked and then I'll clear
460:11 - that what we should probably do is put
460:13 - just a simple button that will be
460:15 - temporary that allows us to clear out
460:17 - that local storage okay so we do see
460:19 - that it says You must log in first
460:21 - that's good we'll type in be at b.com
460:23 - and p123 log in and we are presented
460:27 - with what our next challenge needs to be
460:28 - because before we were redirected to the
460:31 - new page with this navigate function
460:33 - inside of our handle submit but we are
460:35 - no longer using our handle submit so
460:37 - that is what we are going to be working
460:39 - on next
460:43 - I was realizing that you should actually
460:46 - know everything you need to know in
460:48 - order to complete this challenge by
460:49 - yourself as a reminder the idea is once
460:52 - somebody successfully logs in they
460:54 - should be sent to the host route
460:56 - eventually we're going to add to that to
460:58 - make it an even better user experience
461:00 - but I wrote this a little bit vaguely so
461:03 - that you have to really critically think
461:04 - you can go look at other parts of the
461:07 - app if that might be helpful just a
461:09 - quick hint you're not going to be able
461:10 - to use the navigate function that's
461:12 - because we're going to be sending the
461:14 - user to this new route inside of our
461:16 - action function and navigate only comes
461:19 - from calling the use navigate hook which
461:22 - can only be called inside of a
461:24 - functional component and our action
461:26 - function up here is not a component at
461:28 - all so that's enough of a hint pause now
461:31 - and work on this challenge
461:39 - the tool that we need is the redirect
461:42 - function so I'm going to pull that in
461:44 - and you might remember that from our
461:47 - require auth function where we are
461:49 - redirecting people to another route and
461:51 - in this case we're including a message
461:53 - on top of it so back in login.js we will
461:56 - pull in our redirect and then right here
461:59 - we will call and actually I'm just going
462:02 - to return a call to redirect so we'll do
462:05 - redirect and for now we're going to hard
462:07 - code in the slash host route we'll clean
462:10 - up this challenge text and cross our
462:12 - fingers we'll hit save
462:14 - login bab.com p123 login and there we go
462:19 - now something I did just to make our
462:21 - lives a little bit easier is I included
462:23 - this little admittedly very ugly button
462:25 - here in our header that we can click in
462:28 - order to clear out local storage or at
462:31 - least to clear out this logged in value
462:33 - of local storage you can see it over
462:35 - here on components header if you want
462:37 - there's the fake logout function and
462:39 - just a simple button with absolutely no
462:42 - styling that when it's clicked calls
462:44 - fake logout now you'll notice that
462:45 - clicking logout doesn't actually change
462:47 - the user interface and that's because
462:49 - react is not observing local storage to
462:52 - make updates to the UI if that happens
462:54 - but now if I click host it should
462:56 - redirect me to the login page because it
462:59 - knows that I'm no longer logged in or
463:01 - rather that there's no more local
463:02 - storage entry for logged in okay
463:05 - hopefully that went okay for you now
463:07 - with this redirect included in our
463:10 - action we have a little bit of a funky
463:12 - user experience that happens so let me
463:14 - show you I go to the home page I'll try
463:16 - to go to the host page it'll take me
463:18 - immediately to the login page I'll go
463:21 - ahead and log in bib.com p123 log in and
463:24 - then if I as the user were to hit the
463:27 - back button I'm sent to the login page
463:29 - and maybe what's worse because we have
463:32 - the query string that has the message
463:34 - that you must log in first in the URL it
463:37 - means that this page that we're seeing
463:38 - makes it look like we're maybe no longer
463:40 - logged in although I can get to the host
463:42 - route because technically according to
463:44 - local storage I'm logged in so this is
463:47 - kind of a funky experience ideally we
463:49 - wouldn't be able to see our little
463:51 - detour to the login page at all
463:53 - unfortunately in order to do that it is
463:56 - very very easy we'll talk for just a
463:58 - second about the history stack in the
464:00 - next lesson and then see how we can
464:01 - essentially avoid having the back button
464:04 - take us back to this login page
464:09 - as I mentioned making this little user
464:12 - experience Improvement is actually a
464:14 - really easy thing to do in the code in
464:16 - the way that we have our code set up but
464:18 - I think it's useful to understand the
464:21 - concept of the history stack just in
464:22 - case you don't have any previous
464:24 - experience with it the idea behind the
464:26 - history stack is that your browser
464:27 - maintains a you could think of it as an
464:30 - array of locations that your browser has
464:32 - visited and under the hood when you
464:34 - transition from one route to another in
464:36 - react router it is automatically pushing
464:39 - new entries to the history stack for you
464:41 - so that you are able to use your
464:43 - browsers back and forward button the way
464:45 - that you would expect a regular app to
464:47 - work so for example if you show up at
464:49 - the home page it would enter in the
464:51 - slash route to your history stack then
464:53 - maybe you visit the about page so that
464:55 - would enter in the about page to your
464:56 - history stack if you hit the back button
464:58 - it would pop that off the stack and you
465:00 - would be back at the home page getting
465:02 - forward again would take you to the
465:04 - slash about page this is all exactly how
465:06 - you would expect now let's say our user
465:08 - is not currently logged in and they try
465:11 - to get to the host page what exactly
465:13 - happens well before the host page can
465:15 - load the require auth utility function
465:17 - that we set up stops the route
465:19 - transition from happening and that's
465:21 - because we set require auth to run
465:23 - inside of the loader for this host route
465:26 - and the loader will always run before
465:28 - the transition to the host route happens
465:30 - inside of require auth we redirect the
465:33 - user to the login page and so the login
465:35 - page is what actually gets entered into
465:37 - the history stack so that's a good thing
465:40 - for us however once the user logs in we
465:42 - are routing them to the host page in the
465:45 - host page and the login page are both in
465:47 - our history stack this means that if the
465:49 - user hits the back button they will end
465:51 - up on the login page despite already
465:53 - being logged in now we could change our
465:55 - setup so that if the user ever gets to
465:58 - the login page it will check their
466:00 - logged in status to be totally honest
466:02 - this is probably the best solution
466:04 - because then it doesn't matter how you
466:06 - get to the login page if the user were
466:08 - to type slash login then it would would
466:10 - automatically redirect them somewhere
466:12 - else so that's definitely something you
466:14 - could play with for the sake of
466:15 - Simplicity we are going to take a little
466:17 - bit of a different approach and while
466:18 - we're at it we'll learn a cool new tool
466:20 - that we can use so on our login page we
466:22 - have our form which is our login form we
466:25 - can add a very simple prop to that form
466:27 - called replace one thing that takes a
466:30 - little bit of time to get used to is
466:31 - recognizing that the submission of a
466:33 - form is actually considered a navigation
466:35 - event and so similar to how we had this
466:39 - little option that we have on our
466:40 - navigate function that says replace true
466:43 - this replace true says forget the
466:45 - current route that you're on just
466:47 - replace the current route which is the
466:49 - slash login route since this is the
466:51 - login component replace it with Slash
466:53 - host well the exact same thing is going
466:55 - to happen with our form because the
466:58 - submission of the form is also
466:59 - considered a navigation event we can
467:02 - instruct it to replace the current entry
467:04 - in the history stack with the upcoming
467:06 - entry in the history stack and so what
467:08 - happens is the login essentially gets
467:10 - removed from the history stack and we
467:13 - have sort of an amended history here
467:15 - that allows the user who now is logged
467:17 - in and is at the host page to click the
467:19 - back button and go back to the about
467:21 - page as if the little detour to the
467:23 - login page never happened so this is as
467:26 - simple as adding the replace prop to our
467:29 - form let me put these on their own lines
467:32 - and by adding the replace prop here when
467:35 - we submit our login form we will see
467:37 - that exactly what we saw in this diagram
467:39 - will happen so I'll go ahead and hit
467:41 - refresh I'm at the home page maybe I'll
467:43 - go to the about page I'll make sure I'm
467:45 - logged out here and then I'll go to the
467:47 - host route this redirects me to the
467:49 - login page notice that if I hit back
467:52 - here I go to the about page I don't go
467:54 - to host it didn't complete the
467:55 - transition to host so that never got
467:57 - entered in my history stack and then I
468:00 - will go ahead and successfully log in
468:03 - okay we're at the host route and now if
468:06 - I hit the back button it takes me
468:07 - directly to the about page which is just
468:10 - what we saw in this diagram it's where I
468:11 - was before I ever made that detour to
468:13 - the login page the same thing should
468:16 - happen if I were to clear out my logged
468:18 - in entry it will go directly to the
468:20 - login page not via the host route I'll
468:23 - enter my credentials again log in it
468:26 - takes me to the host page if I hit back
468:28 - we're back at the about page just like
468:30 - before again a more robust solution
468:32 - would be to first of all not render a
468:34 - login Link at all if the user is
468:36 - currently logged in or another solution
468:39 - could be to just make it so that the
468:40 - loader of the login page will check if
468:42 - the user is currently logged in and
468:44 - redirect them somewhere meaningful if
468:46 - they already are but at least now we've
468:48 - learned the concept of a form submission
468:51 - being considered a navigation event and
468:53 - this cool new prop that we can add to
468:55 - our forms if we ever want to ensure that
468:58 - the history stack doesn't include the
469:00 - route where we're currently rendering
469:01 - this form okay we have been working on
469:04 - our happy path transitioning it from
469:06 - using our more imperative form
469:09 - submission methods like our handle
469:10 - submit function here we've got an action
469:13 - function that's working fairly well
469:14 - let's go ahead and start coding up the
469:16 - sad path using our action function and
469:19 - moving a few things out of our component
469:25 - we're back here at our simplified app
469:27 - and I've created this fake login user
469:30 - function all it really does is it takes
469:32 - an object with an email and a password
469:34 - property it's just hard coding to check
469:37 - if those are equal to b.com and p123 and
469:41 - if that matches then it returns
469:43 - something we're not actually going to be
469:45 - making use of this right now I just
469:47 - wanted to have something there if on the
469:49 - other hand it is unable to log the user
469:51 - in then it's going to throw an error
469:53 - with a message of couldn't log the user
469:55 - in we want to start handling some errors
469:57 - where if the information that's passed
469:59 - in the email and password is incorrect
470:01 - we want to be able to display to the
470:03 - user that something is wrong before we
470:06 - started working with the action function
470:08 - we had to maintain all of our error
470:10 - State as react State inside of our login
470:13 - component however now we're going to
470:15 - have access to a little bit of a better
470:17 - way now first of all it's important to
470:19 - know that if I'm in my action function
470:21 - and I throw some kind of error let's go
470:24 - ahead and say we're 3 a new error there
470:27 - was an error okay that's just hard coded
470:29 - into the action which will happen when I
470:31 - hit login let's see what happens I'm
470:33 - going to hit login and we get an
470:35 - unhandled thrown error this screen that
470:38 - you might remember seeing before where
470:39 - it instructs us to use an error element
470:41 - when an error is thrown inside of our
470:44 - action or our component or our loader
470:46 - it's going to then exit out of the
470:49 - regular element flow of our route
470:51 - definitions and it's going to look for
470:53 - the nearest error element now we don't
470:55 - have an error element anywhere on here
470:57 - and we've already learned about that so
470:59 - if you need a refresher you can go back
471:00 - to the previous part in the course where
471:02 - we talk about the error elements but
471:04 - that's not actually what we're concerned
471:06 - with right now what we're concerned with
471:08 - is not throwing an error because we
471:10 - don't want to take the user away from
471:12 - the login form just because they got the
471:15 - information wrong instead we want to
471:18 - keep them here on the login page and
471:20 - simply display some information that
471:22 - might help them understand that their
471:24 - attempt to log in was not successful so
471:26 - in our action If instead of throwing an
471:29 - error we return something let me go
471:31 - ahead and just hard code a string that
471:34 - says
471:35 - I don't know couldn't log in this gives
471:38 - us a chance in our component to receive
471:41 - the data that we're returning from our
471:43 - action function and display a helpful
471:45 - message here in the actual component in
471:47 - order to grab data that has been
471:49 - returned from an action function very
471:52 - similar to how we did in a loader
471:54 - function we can use a hook called use
471:57 - action data remember when we return
472:00 - something from a loader we can use use
472:02 - loader data the naming convention is
472:04 - very similar for an action so we will
472:06 - use this use action data hook inside of
472:09 - our component and let's go ahead and
472:11 - just call it error because we know
472:13 - that's exactly what it is and we'll get
472:14 - it by calling use action data now think
472:17 - for a second when I refresh this page
472:19 - what is going to be the value of this
472:21 - error variable
472:26 - remember the action function will only
472:28 - run after the form has been submitted
472:31 - and so when we first render this
472:33 - component we're not automatically
472:34 - submitting the form and so we can see
472:37 - when we console log this error that
472:39 - we're going to get an undefined value so
472:42 - that just means that when we are trying
472:44 - to display this error we need to make
472:46 - sure that we are coding a little bit
472:48 - defensively which means using our good
472:51 - trusty friend of conditional rendering
472:52 - I'll go ahead and say if there is an
472:55 - error then we'll display maybe just a
472:58 - little H4 and because the error so to
473:01 - speak that we're returning from our
473:03 - action is just a string I'm just going
473:05 - to go ahead and display that error right
473:07 - here we do have a little class that we
473:10 - created earlier called red that will
473:12 - make this stand out a little bit more so
473:15 - let's go ahead and hit save we still
473:17 - have undefined but because we're now
473:18 - checking if error exists first before
473:21 - displaying our H4 we don't have any
473:22 - problems and then I'll click login and
473:25 - perfect we get the string that we
473:26 - returned from our action function great
473:29 - now that brings us to The Next Step
473:31 - which will be to check for any errors
473:34 - inside of our action function so that we
473:36 - can redirect like we were doing before
473:39 - if things go well or return some helpful
473:42 - information back to the form so that the
473:44 - user can take action accordingly so
473:46 - that's what we'll be doing next
473:51 - okay let's apply what we just learned
473:54 - about returning values from our action
473:56 - function in this challenge where I need
473:58 - you to add a try catch block that tries
474:00 - to log the user in with our fake login
474:02 - user and we pass the email and password
474:04 - to it if it's successful then you can
474:07 - redirect the user to the slash protected
474:09 - route but if there's an error you can
474:12 - return the error message that gets
474:13 - thrown from the fake login user function
474:16 - I put this down here because this is
474:18 - where you can start your coding you can
474:20 - just put this above the try catch and
474:22 - start your try catch right here okay
474:23 - pause now and work on this challenge
474:31 - all right so let's open up a try catch
474:34 - one thing that I kind of like about try
474:36 - catch is that I can put all of the code
474:38 - from my happy path inside of my try and
474:42 - then just catch any errors that might
474:43 - occur along the way this works for a
474:46 - simple task like this if it becomes more
474:48 - complex you may need to either Nest a
474:50 - try catch or do multiple try catches but
474:53 - we're not going to worry about that here
474:54 - so first thing we need to try to log the
474:57 - user in so we're going to call fake
474:59 - login user and we will pass the email
475:02 - and the password and I'm wrapping those
475:04 - together in an object because the fake
475:06 - login user expects an object to come in
475:09 - with an email property and a password
475:10 - property and I believe this is an
475:13 - asynchronous function so we will need to
475:15 - await that I mean we can just come up
475:17 - here and look so yeah it's an async
475:19 - function and it's returning an object
475:21 - that has an email and a token we're not
475:23 - really using that but just for the sake
475:25 - of it I'll go ahead and grab it in a
475:27 - variable okay and then assuming that is
475:29 - successful which we can do because we
475:31 - were here inside of our try we can
475:34 - redirect the user which we need to
475:36 - import from react router so we'll pull
475:38 - in redirect we want to redirect them to
475:42 - the slash protected route and I don't
475:45 - think it's strictly necessary but for
475:47 - some reason it feels better to me to
475:48 - return the redirect so we'll go ahead
475:51 - and add that there okay now inside of
475:53 - our sad path if we do have any errors in
475:56 - the process of trying to log the user in
475:58 - then we're going to receive that error
476:00 - and we will just go ahead and return the
476:02 - message portion of that error there's
476:04 - more than one way to do this you could
476:06 - send the whole error object down in case
476:08 - you needed other properties from that
476:09 - error but in our case let's just go
476:11 - ahead and send the message down maybe to
476:13 - make that absolutely clear inside of our
476:16 - component instead of calling this error
476:18 - let's go ahead and just call it error
476:20 - message that way it's pretty clear that
476:23 - we are talking about the string message
476:25 - that comes from our action function okay
476:28 - let's clean up our challenge text and
476:31 - give this a shot first let's try to log
476:34 - in for real we'll do bfb.com and p123
476:36 - login
476:38 - here we are at our super secret
476:39 - information okay we'll click this to log
476:42 - out try to go to protected that takes us
476:44 - to the login page and then let's just
476:46 - try to log in without any credentials
476:48 - couldn't log the user in perfect okay
476:50 - with that little bit of practice under
476:52 - our belts let's go back to the van Life
476:54 - app and we will implement the same thing
477:00 - currently our action still only has the
477:03 - happy path here and so we need to as
477:05 - part of your challenge remove all of the
477:07 - error handling that's currently
477:08 - happening inside of our component and
477:10 - the error component State and create a
477:13 - try catch inside of our action so that
477:15 - our action can handle errors in a better
477:17 - way like we just practiced now if any of
477:20 - this seems like it might be a bit
477:22 - complicated for you that's probably
477:23 - another good indication that it's time
477:25 - to go back maybe re-watch a couple of
477:27 - the last lessons as we have been
477:29 - practicing doing error handling inside
477:31 - of our action function because as it
477:33 - stands if you've been able to follow up
477:35 - until this point then you should be able
477:37 - to complete this challenge without too
477:39 - much difficulty so now's your time to
477:41 - prove to yourself that you can do it
477:42 - pause now and work on the challenge
477:50 - okay so right here is where our happy
477:52 - path exists so I'm just going to wrap
477:55 - that code inside of my try catch and
477:59 - right here we will include our catch of
478:01 - the error we can actually see what this
478:04 - error object is going to look like if we
478:06 - look at our api.js login user function
478:08 - we can see that if something doesn't go
478:10 - okay then it's going to just throw an
478:12 - object that has a message property in
478:15 - case you weren't familiar in JavaScript
478:16 - you can throw anything you can throw a
478:19 - string or a Boolean or in this case an
478:21 - object you don't always have to throw an
478:23 - actual error object that's made by the
478:25 - error Constructor so I'm in this case
478:28 - throwing an object so that I can include
478:30 - a message property but also include the
478:32 - status text and the status just in case
478:34 - that's useful it's not terribly
478:36 - important at this time but mostly it's
478:38 - important to know that we have this
478:39 - message that is going to come from our
478:41 - server file okay so in login.js we will
478:44 - just return and I think we can just
478:47 - stick to the message I don't know that
478:48 - we necessarily need the status or the
478:50 - status text to display inside of our
478:52 - component so we will just return the
478:54 - error.message and then we need to use
478:57 - use action data so I'll go ahead and
478:59 - pull that in use action data and inside
479:03 - of our component we can grab the error
479:06 - we'll say maybe this time we'll also say
479:08 - error message like we did in our
479:10 - practice just to make it really clear
479:11 - that we're just pulling in a string
479:13 - message and we can get rid of or update
479:17 - this so it's not error.message or error
479:20 - anymore we'll say if there is an error
479:22 - message then we will display this H3 and
479:25 - we can start getting rid of any of the
479:28 - error handling that we had before so we
479:30 - had some error stuff here inside of our
479:33 - catch here we were dealing with errors
479:34 - let's get rid of all that and I think
479:37 - that should be everything we are right
479:40 - on the cusp of finally getting rid of
479:42 - our handle submit but we have one last
479:43 - thing that we're not yet accounting for
479:45 - and that is these statuses on the state
479:49 - of our app if it's in the process of
479:51 - submitting or if it's idle fortunately
479:53 - we have a pretty easy way to update this
479:55 - and so that is what we're going to be
479:57 - learning and adding next
480:01 - here in our practice app we don't yet
480:04 - have any code that gives us a good
480:05 - indication of the status of our app when
480:08 - we're in the middle of submitting our
480:09 - form in our van life what we're
480:11 - currently doing is setting up some local
480:13 - react state that has a status property
480:15 - and we're setting that status manually
480:17 - while we're in the process of submitting
480:19 - our form however because the form
480:21 - submission is now happening inside of
480:23 - our action we can't update our local
480:26 - component State because the action is
480:28 - not part of our component it doesn't
480:29 - have access to our state fortunately
480:31 - react router gives us a utility that we
480:34 - can pull in called use navigation this
480:38 - is not to be confused with use navigate
480:40 - and use navigation will give us an
480:42 - object that gives us information about
480:44 - the current status of navigation in our
480:47 - app in other words if react router is in
480:49 - the process of for example loading in a
480:52 - loader that navigation object can give
480:54 - us information about that or if we're in
480:56 - the process of submitting a form like
480:58 - we're doing here it also will give us
481:00 - information about that so that's
481:01 - actually pretty easy we can just grab
481:03 - the navigation object by calling use
481:06 - navigation and there's a property on
481:10 - this navigation object well let's go
481:12 - ahead and just log the entire navigation
481:13 - object open up the console I'll hit save
481:16 - okay and even just rendering our
481:18 - component for the first time we can see
481:19 - that it's an object it has a bunch of
481:21 - different properties but currently the
481:23 - only one that is not undefined is a
481:25 - property called State and we can see
481:27 - that that state is set to the string
481:29 - idle maybe you can see where I'm going
481:31 - with this that navigation state is going
481:33 - to be our replacement for the local
481:36 - component state that we had set up in
481:38 - our van Life app so now that I have
481:40 - access to navigation.state in fact let's
481:43 - keep the console log here I'll hit
481:45 - refresh we can see it's idle I'll go
481:47 - ahead and click login we can see that it
481:49 - changed to submitting and then it
481:51 - changed back to idle in our case this is
481:53 - happening very fast because our login
481:55 - user function is just checking against a
481:58 - hard-coded be at b.com and p123 it's not
482:00 - actually reaching out to any kind of
482:02 - database and so we don't even see a
482:04 - delay really but it's cool to see that
482:06 - we now have access to some navigation
482:08 - state that we can use when we want to do
482:10 - things like disable the button in fact I
482:13 - wasn't planning on doing this but let's
482:14 - make that a challenge because you should
482:16 - be able to do this by now
482:18 - okay your challenge is to disable the
482:21 - button if the navigation state is set to
482:23 - the string submitting and also to change
482:25 - the text to say logging in instead of
482:27 - just login again if the state is
482:29 - submitting now because we don't have any
482:31 - kind of delay in this function I added
482:34 - this little sleep function which is just
482:36 - right here it all it does is pause
482:37 - execution of this function for 1000
482:40 - milliseconds or one second so that you
482:42 - actually have a chance to visually see
482:44 - the change that's happening when you're
482:46 - logging in okay pause now and work on
482:48 - this challenge
482:55 - all right so on our button we can add
482:57 - the disabled prop and set it equal to if
483:01 - navigation.state is equal to submitting
483:04 - and that should handle the disable of
483:07 - the button and the text we'll go ahead
483:10 - and wrap this in a JavaScript expression
483:13 - so that we can say navigation.state I'm
483:15 - going to spell this right is equal to
483:18 - submitting we'll go ahead and use a
483:20 - ternary here it's question mark then
483:22 - it's going to say logging in but
483:25 - otherwise it will say login let's clean
483:28 - up our challenge text and we'll get rid
483:30 - of this console log while we're at it
483:32 - refresh okay we'll hit login okay we get
483:35 - the logging in and don't have a space
483:38 - there sorry about that so we can see
483:40 - that's working the button is disabled
483:41 - and then if we actually log in
483:45 - we get the same thing and then it
483:47 - redirects us to the protected route
483:49 - perfect okay that's how we can set up
483:51 - navigation States or as we were calling
483:54 - them in Van life these status so now
483:56 - we'll go back to Van life and implement
483:58 - this method for tracking our current
483:59 - navigation State and that should allow
484:02 - us to finally get rid of our handle
484:04 - submit and the status date that we had
484:10 - one thing I did forget to mention is
484:11 - that I have a link to the documentation
484:14 - for use navigation right here so you can
484:16 - click the screenshot if you'd like to go
484:18 - read more about it there is quite a bit
484:19 - more to the use navigation hook and that
484:22 - navigation object that we aren't
484:23 - currently using in our app so it could
484:25 - be fun to go read up on it but once
484:27 - you're ready we have the challenge of
484:29 - including use navigation to track the
484:31 - current status of the form submission
484:33 - and remove all of the status tracking
484:35 - that we're currently handling manually
484:36 - in our state once you've done that and
484:38 - it's working then you should just be
484:40 - able to completely finally remove our
484:42 - handle submit function so let's get to
484:44 - it pause now and work on the challenge
484:53 - okay let us pull in use navigate
484:57 - actually you know what we don't need use
484:58 - navigate anymore so I'm just going to
485:00 - attack on to the end of that and pull in
485:02 - use navigation instead let me just
485:04 - double check we're not using navigate so
485:06 - we can get rid of this this is going to
485:09 - go away when we get rid of our handle
485:11 - submit function actually you know what
485:12 - I'm impatient I can't wait I'm just
485:14 - going to remove that completely wow that
485:16 - looks so much cleaner okay we're broken
485:18 - let's go ahead and fix what we have
485:20 - broken so I'm going to pull in
485:22 - navigation
485:24 - is equal to use navigation and you can
485:27 - probably see that I was already using
485:30 - the conventions for use navigation just
485:32 - because I knew that's what it was which
485:34 - means I can just change status to say
485:37 - navigation.state instead the idle value
485:40 - and the submitting value was one that I
485:43 - chose because I knew that it mirrored
485:44 - this navigation state so everything else
485:46 - should be able to stay the same let's
485:48 - clean up our challenge text we'll hit
485:51 - save
485:52 - and let's give it a shot so I'll try
485:54 - logging in without anything okay we did
485:56 - see it say logging in although I did
485:58 - forget to add a CSS rule for it I guess
486:01 - I can just do that really quick
486:03 - okay so let's go ahead and try it again
486:05 - I'll hit refresh logging in okay perfect
486:07 - no user with those credentials found
486:09 - we'll log in b.com p123
486:13 - login and it takes us to the host
486:15 - dashboard so now we can see that our
486:17 - form is doing everything that it was
486:19 - doing before but we've been able to
486:21 - offload a lot of that boilerplate
486:24 - imperative stuff that we were doing
486:25 - before with all of our local state and
486:28 - we've offloaded it to react router so
486:30 - that it can handle some of those very
486:32 - common tasks for us if you've been able
486:34 - to follow up until this point
486:35 - congratulations I know that we've
486:37 - covered a ton of ground we've really
486:39 - refactored a lot of things including a
486:42 - complete paradigm shift that you might
486:44 - not be used to if you've been working in
486:46 - react for a little while I've heard
486:47 - someone call these new data layer apis
486:49 - with react router kind of like remix
486:51 - Lite and the truth is if you can grasp
486:53 - what we've been doing here then you
486:55 - would be really primed to jump into
486:57 - remix and be able to start creating full
486:59 - stack applications there's quite a bit
487:01 - more to learn with remix as well but
487:03 - you'll be pretty surprised to see just
487:05 - how familiar remix feels once you've
487:07 - become accustomed to the patterns of
487:09 - using actions and loaders changing when
487:12 - data fetching happens with our
487:13 - components and all of the benefits that
487:15 - come there in in the next few lessons
487:17 - we're going to be touching on a little
487:20 - bug that we have or maybe it's just a
487:22 - inconvenience with the user experience
487:23 - when it comes to redirecting to the
487:26 - login page for example if I go to a
487:29 - nested protected route like slash host
487:31 - slash Vans slash one here and I'm not
487:34 - actually logged in so I'll log out with
487:37 - my silly button here and then I'll try
487:39 - to refresh the page now that I'm logged
487:41 - out we'll see that it takes me to the
487:43 - login page and so I can go ahead and log
487:45 - in but then what will happen is it will
487:48 - automatically send me to the host route
487:50 - it's not a bug per se it's just kind of
487:52 - a bad user experience because what I'm
487:54 - expecting is to go back to slash host
487:56 - slash fans slash one one way to fix this
487:59 - involves two different parts so we'll be
488:01 - jumping into fixing that for moving on
488:03 - to some of the last features that we
488:04 - have to learn
488:08 - I've made a few small updates to our
488:11 - practice app here first of all I've
488:13 - moved the inline protected component
488:15 - that we had it's really just an H1 and
488:18 - the inline loader function that it had
488:20 - over to its own separate component file
488:23 - here so we have the actual component
488:25 - right here again it's just an H1 but
488:28 - this way we have a separate loader that
488:30 - lives over here I'm importing the pieces
488:33 - that I need like redirect from react
488:35 - router and a new require auth function
488:37 - which I just put over here in its own
488:39 - utility file here called require auth
488:42 - also for the sake of demonstration I
488:44 - added another nested route so now the
488:46 - protected route is apparent to this one
488:49 - that I just called nested and then I
488:51 - added a link to nested here on the
488:53 - navbar now I'm currently logged in just
488:55 - to be able to show this if I go to
488:57 - protected takes me to slash protected
488:59 - and if I go to nested it takes me to
489:01 - slash nested in the URL actually you
489:03 - know what the nested has this H1 and the
489:06 - reason it's not showing is because I
489:08 - need my Outlets so I'll go ahead and put
489:10 - that in here and we'll just wrap this in
489:13 - a fragment
489:14 - and put in our Outlets okay so now with
489:18 - the nested route we have this nested
489:19 - protected route H1 showing up and again
489:21 - that is just here in line just for
489:24 - simplicity's sake okay so those are just
489:26 - some simple updates I've made and the
489:28 - reason that I did that is because let me
489:30 - go ahead and log out let's say we want
489:32 - to get to this slash protected slash
489:34 - nested route which I can get to by
489:36 - clicking this nested link here so I can
489:38 - go ahead and do that it takes me to the
489:40 - login page I log in with bfb.com p123
489:44 - and because of the way that we've
489:46 - written our login component up here in
489:49 - our loader we have hard coded that it
489:51 - should send us to slash protected in our
489:53 - case that's not terribly difficult to
489:55 - then just get to the nested route by
489:57 - clicking the link but the point is if we
489:59 - did have some kind of complex nested
490:01 - route that the user was trying to get to
490:03 - and they were redirected to the login
490:05 - page if we just hard code that we want
490:07 - to send them to slash protected it's
490:10 - kind of a weird user experience let's
490:12 - say for example they tried to get to
490:13 - this nested route by clicking a link
490:15 - from their email and maybe it has some
490:17 - kind of user ID in it that isn't
490:19 - accessible by navigating somewhere on
490:21 - the site but instead you have to get
490:23 - there at least it's much easier to get
490:25 - there by clicking the link in the email
490:26 - if we hard code that we're sending them
490:28 - to the slash protected route then
490:30 - they're going to have to open up their
490:31 - email clients again and click on the
490:33 - link again now that they're logged in
490:35 - hopefully it opens in the same browser
490:37 - and still has the same session they
490:38 - don't have to log in again so I'm hoping
490:40 - that you're seeing a limitation by hard
490:42 - coding the slash protected route here
490:44 - when we redirect the user after logging
490:46 - in so what we are going to focus on is
490:48 - making it so that if the user let me log
490:50 - out again and try going to the nested
490:52 - route if the user is redirected to the
490:54 - login page that we make it so that after
490:56 - they log in they will be redirected to
490:58 - that nested page instead of the
491:00 - hard-coded slash protected route now in
491:03 - the past we have been able to get the
491:05 - path Name by using the use location hook
491:07 - that comes with react router and we
491:10 - could make that work however because
491:12 - we're now using the data layer apis with
491:14 - three act router 6.4 we have another way
491:17 - that is a little more congruent with the
491:19 - new paradigm that we're using you see
491:21 - our loaders and our actions will both
491:23 - receive access to this request object
491:25 - let me go over to my protected route
491:27 - loader and pull in that request object
491:30 - and we will go ahead and console log the
491:34 - request actually let's do request.url
491:37 - well actually no let me let me do
491:39 - request first we'll hit save
491:41 - I'll make sure I'm logged out I'll go to
491:43 - protected and we'll open the console
491:44 - okay so we see that we have a request
491:47 - object and this request object is the
491:49 - actual native web request object it
491:51 - comes from the request Constructor you
491:54 - can go to the Mozilla developer Network
491:55 - docs in order to learn more about
491:57 - request and request objects have a
492:00 - property called URL which gives us
492:02 - access to the URL now we'll be able to
492:04 - see that when I refresh and click
492:06 - protected we get the entire URL and it's
492:09 - just a string in our case because our
492:11 - mini browser is running on the scrima
492:13 - platform it shows our full protocol we
492:15 - have https and then the cw1.scrima.com
492:18 - as our base URL and then at the very end
492:21 - we see Slash protected now I could go
492:23 - out of my way to try and grab the slash
492:26 - protected portion of the URL using some
492:28 - kind of string manipulation but another
492:30 - thing we can learn is that we can
492:32 - construct a URL again using the native
492:34 - URL Constructor so let me actually set
492:37 - this as a variable I'm going to say
492:39 - const URL equals new URL and this
492:42 - Capital URL that comes from just web
492:45 - apis so this Constructor is just
492:47 - universally available as a Constructor I
492:49 - can use as long as I'm writing my
492:51 - JavaScript code or the front end and
492:53 - when I pass the actual URL the string
492:56 - URL by accessing that request.url I've
492:59 - now created a URL object let's go ahead
493:02 - and console log
493:04 - URL
493:06 - okay and I'll try to get to protect it
493:08 - again okay so it's string representation
493:10 - is showing up exactly the same but
493:12 - what's nice about this URL object is I
493:14 - can actually access properties like path
493:17 - name for example you might remember when
493:19 - we were using the use location hook the
493:21 - location had something called path name
493:23 - and that is just coming from this URL
493:26 - object and so if I were to console log
493:28 - url.pathname go to protected I now have
493:31 - immediate access to the path name that I
493:33 - was trying to get to and if I go to the
493:36 - nested route I can see that it gives me
493:38 - the full path name of the nested route
493:40 - protected nested now I do want to
493:43 - address something here I think for maybe
493:45 - the untrained eye this might seem like a
493:47 - lot of additional work to get to just
493:49 - the path name having to pull in the
493:51 - request object and create a new instance
493:53 - of a URL object and then access the path
493:56 - name property but to be honest having
493:58 - been in the game for a while now I
494:00 - didn't really take the time to learn
494:02 - some of these platform apis like the URL
494:05 - Constructor until this became pretty
494:07 - much the right way to do this in remix
494:09 - and by association react router so
494:12 - honestly I actually really appreciate
494:14 - that I've spent a lot more time learning
494:16 - native web apis and spending time on the
494:19 - Mozilla developer Network docs then
494:21 - having to parse through a bunch of
494:23 - Google results and stack Overflow
494:24 - questions hoping that I get the most
494:26 - modern answer based on the newest
494:28 - version of react router but instead I
494:30 - can just spend time on the Mozilla
494:32 - developer Network docs and find the
494:34 - information I need because it's using
494:36 - the platform it's using the constructors
494:38 - and the tools that already exist in the
494:40 - web okay we've spent quite a bit of time
494:42 - just to get to this url.pathname but
494:44 - hopefully you can see in the end all I
494:46 - did was pull in the request create a new
494:48 - URL object and then access properties
494:50 - from that object so for the sake of time
494:52 - we're going to end this scrim here and
494:54 - in the next scrim we will talk about how
494:55 - we can make use of this so that after
494:57 - the user logs in they can be redirected
495:00 - back to this url.pathname so that's
495:02 - what's coming up next
495:07 - Okay so we've started diving into the
495:10 - Weeds on how we are going to solve this
495:12 - problem we now have access to a URL
495:14 - which has a path name property that we
495:16 - can use but what exactly is the overall
495:18 - strategy I think that might be helpful
495:20 - for us to look at remember it's our
495:22 - require auth function that is in charge
495:25 - of redirecting users to the login page
495:27 - and then the login page is in charge
495:30 - let's see where is the action function
495:33 - right here is in charge of redirecting
495:35 - users to the route that they're supposed
495:37 - to go to and this is what we're trying
495:38 - to fix remember we don't want this to be
495:40 - hard coded to slash protected so that's
495:43 - kind of the workflow that we have the
495:45 - protected loader runs that calls require
495:47 - auth that redirects people to the login
495:50 - page and the login page once they
495:52 - successfully log in redirects them to
495:54 - the route that they were trying to go to
495:56 - so how do we get information from our
495:59 - protected route which is where we have
496:00 - access to the request and easy access to
496:03 - that path name to the require auth
496:05 - function and then from the require
496:07 - author function to the login component
496:09 - well we saw very briefly when we
496:12 - redirect a user using the navigate
496:14 - component or the use navigate hook we're
496:17 - able to pass some State through the
496:18 - navigation event to the next location
496:21 - and that location object can grab the
496:23 - state that was passed to it however
496:25 - those are Hooks and those have to happen
496:28 - inside of components and mostly we are
496:30 - working inside of the loaders and
496:32 - actions because of that the most common
496:34 - way is for us to pass information
496:36 - through the URL so actually right here
496:39 - in require auth when we redirect someone
496:41 - to the login page I want you to think
496:43 - for a second how can we pass information
496:45 - using the URL
496:51 - we can use search parameters or query
496:53 - strings just like we did in Van life
496:55 - where we said question mark message
496:57 - equals
496:58 - you must log in first we can use this
497:02 - same strategy to pass information from
497:05 - our require auth function to the login
497:08 - page and then have the login page make
497:11 - use of that information to redirect us
497:13 - back to the correct spot so the next
497:15 - question then is how do we get this path
497:18 - name that we're able to access on our
497:20 - URL object to the require auth function
497:22 - so that we can include it in a query
497:25 - string maybe this would be a query
497:27 - string like redirect to we'll set that
497:31 - equal to some question marks for now and
497:34 - actually this seems like the perfect
497:35 - opportunity for a challenge
497:39 - okay so your challenge is to figure out
497:41 - how you can get the path name from this
497:43 - URL object from this loader into the
497:46 - redirect to query parameter inside the
497:49 - require auth function right here where
497:51 - the question marks are so let's come
497:53 - back here to the challenge text okay
497:55 - pause now and work on this challenge
498:03 - one approach you may have taken was to
498:05 - just pass in the URL dot pathname
498:08 - directly to the require auth function
498:10 - and then over in require auth we would
498:12 - receive the path name and just stick it
498:14 - into the query string right here however
498:17 - I happen to know that I'm likely going
498:19 - to be calling require auth in more than
498:21 - one place which means if I did it this
498:23 - way I would need to run this code and
498:26 - this code every time I wanted to use
498:28 - require auth so instead of that I'm
498:31 - going to copy this line and get rid of
498:33 - it and then just pass the entire request
498:36 - object down and that way require auth
498:38 - can do that logic and figure out exactly
498:41 - how to get the path name so we'll say
498:43 - it's receiving a request object and I'll
498:46 - paste in that line I'll even make a
498:48 - separate one that says dot path name
498:51 - actually I'm just going to tack on dot
498:54 - pathname since that's all I really care
498:56 - about and then we'll change our URL to
498:58 - say path name and then now that I have
499:00 - that value I can stick it here in inside
499:03 - my string I'll make these into template
499:05 - strings so I can do my interpolation
499:07 - here and just say we're going to pass
499:09 - the path name as the value to the
499:11 - redirect to query string okay we've
499:14 - covered a fair amount of ground for one
499:16 - scrim so in the next scrim we're going
499:17 - to see how we can from the login page
499:20 - grab the redirect to Value that's right
499:23 - here so that we can correctly redirect
499:25 - back to the right spot when the user
499:27 - logs in
499:31 - so we are sending users to the login
499:34 - page we're passing the information about
499:36 - where we want them to redirect to after
499:38 - the login is successful so I want you to
499:41 - pause here and think where will I need
499:43 - to write code next
499:48 - okay if you said that we need to go to
499:50 - our login page and our login component
499:52 - you would be correct but if that was all
499:55 - that you came up with I want you to
499:56 - think even more specifically I'm here
499:58 - inside of my login file that has the
500:00 - action and the login component a couple
500:03 - helper functions that are just helping
500:05 - us kind of fake authentication for now
500:07 - so more specifically where am I going to
500:09 - receive that query string that should be
500:12 - coming in through the URL remember as
500:14 - long as I'm logged out and I try to get
500:16 - to one of these protected routes I now
500:18 - have redirect 2 equals slash protected
500:20 - slash nested in my URL so again more
500:22 - specifically where in this file
500:24 - login.jsx am I going to receive this
500:27 - redirect to Value so that I can well
500:30 - redirect to the correct spot
500:36 - well technically I would have access to
500:38 - it inside of a loader function if I
500:40 - created a loader function I would be
500:42 - able to access the request object
500:44 - however the loader is not when I want to
500:47 - redirect to that new location it's right
500:49 - up here in the action we already have
500:52 - access to our request and so I can use
500:54 - this request to grab the URL grab the
500:57 - search params from that URL and use that
501:00 - as my redirect value right here on line
501:03 - 31. so right here above our try we will
501:07 - maybe just get our we'll say const path
501:10 - name is equal to and then I can just
501:12 - grab the URL I'm going to do this all
501:14 - kind of chained together so I'll say I'm
501:16 - going to create a new URL from
501:18 - request.url that's going to give me a
501:21 - URL object and then I can grab a
501:24 - property on it called search params and
501:26 - that is an object that has a get value
501:28 - and I can grab the search param with the
501:31 - redirect to key which should get me the
501:34 - value in this particular other case as
501:37 - we can see in the URL slash protected
501:39 - nested let's go ahead and console log
501:42 - that we'll cancel log the path name and
501:44 - because this is inside of my action I'm
501:47 - only going to see this console log if I
501:49 - try to submit my form so I think I can
501:51 - just hit login and sure enough there it
501:54 - is slash protected slash nested so all I
501:57 - need to do now is to replace this
502:00 - protected with path name okay let us
502:03 - give it a shot I'll refresh make sure
502:05 - I'm logged out I still have my redirect
502:07 - to in the URL so I don't need to change
502:10 - anything there we'll go ahead and log in
502:12 - bfb.com p123
502:15 - log in
502:17 - and oh we were so close what happened
502:19 - here is our slash protected slash nested
502:22 - route is running a loader as soon as it
502:24 - loads and we did that inline right here
502:26 - but we are missing something from this
502:28 - function can you think of what it might
502:30 - be
502:33 - well we taught our require auth that it
502:36 - will be receiving a request object and
502:38 - we did that inside of our protected
502:40 - loader here but we did not do that
502:42 - inside of our nested loader so one thing
502:45 - we could do is just grab the request and
502:48 - pass it along to require auth that
502:50 - should fix this problem okay here we are
502:52 - on the nested route alternatively we
502:54 - could go to require auth and make sure
502:56 - it only does this if request exists I
503:01 - think since we have it fixed right now
503:02 - just by passing in the request inside of
503:04 - this loader that's probably going to be
503:06 - good enough for now actually now that I
503:08 - think about it we might have to do it
503:10 - that way since we want to be able to
503:12 - redirect back to the nested route we
503:14 - need to make sure that if the require
503:16 - auth ever gets run here then it will
503:18 - pass that request through successfully
503:20 - so it's a good thing we tested that
503:22 - let's just make sure again I'll make
503:24 - sure we're logged out go to the nested
503:27 - route that took us to the login page I
503:29 - guess that was a little hard to see
503:30 - because we were already on the login
503:31 - page I'll go home and then nested that
503:33 - take takes us to the login page be at
503:35 - b.com p123 and okay here we are now one
503:40 - last final thing I'm going to log out go
503:42 - to my login page and log in like normal
503:45 - bfb.com p123 it logging in and we get a
503:49 - problem it's taking S2 slash login slash
503:52 - null so this is an interesting one I
503:54 - think it could be a good exercise if you
503:56 - want to try and see if you can debug
503:58 - that you can pause now if you'd like to
504:00 - do that and then we'll be going through
504:01 - it together
504:08 - okay so why is this happening well let's
504:10 - go through the regular workflow just to
504:13 - try and debug this in the login page
504:15 - this action is going to run every single
504:17 - time we submit the form whether we are
504:20 - coming to our login page via another
504:22 - route that we're trying to redirect back
504:24 - to or if the user actually clicks the
504:26 - login page when they click the login
504:28 - page there is no query string for
504:30 - redirect to which means when this line
504:32 - runs this path name is going to be null
504:35 - because the URL does not have a search
504:38 - param especially not of redirect to it
504:40 - doesn't have any search parameters and
504:42 - so calling.get on something that doesn't
504:44 - exist will return null and then we're
504:46 - kind of stringifying that when we put it
504:48 - inside of our path name it's going to be
504:51 - null and because it's a relative path
504:53 - it's not setting it up as slash null for
504:57 - example I mean this would be like a
504:58 - string but it's not slash null then it's
505:00 - using it as a relative path to the login
505:02 - page which then takes us to slash login
505:05 - null a really easy fix for this would be
505:08 - to choose a default where we say or if
505:10 - that is null let's just go to slash
505:13 - protected so let's try this again we'll
505:15 - get rid of that console log hit save
505:17 - we're just on the login page there's no
505:20 - query string there we'll type in our
505:22 - username and password and great that
505:24 - took us to the default route of Slash
505:26 - protected and now if I log out again and
505:29 - try to get to my nested page Log In
505:34 - perfect our redirect is working just
505:36 - like it was before okay we have covered
505:38 - a ton of ground let's go back to the van
505:40 - Life app and see if you are able to get
505:42 - your hands on the keyboard and complete
505:44 - the challenge of implementing this
505:46 - redirect to pattern that we just did
505:48 - over there in our van Life app
505:53 - okay here time to shine your challenge
505:55 - is to implement the redirect to feature
505:57 - like we just did in our practice app but
505:59 - here in Van life I've given you some
506:01 - starter instructions just since it took
506:04 - us a little while to get there in the
506:05 - last app this way it can be a bit of a
506:07 - refresher so make sure you read through
506:09 - numbers one and two really carefully and
506:10 - then for number three you are on your
506:12 - own for the last part but I know that
506:14 - you can do it pause now and work on this
506:16 - challenge
506:22 - okay we are going to pass the request
506:25 - objects to every function call for
506:27 - require auth that happens inside of our
506:29 - protected routes of course so let's go
506:32 - to maybe let's start here in our index
506:34 - and we'll just see all of our inline
506:37 - loaders that we have that are nested
506:39 - inside of this host path we need to add
506:42 - the request object here and I think
506:44 - there's some more down here host and
506:46 - info pricing and photos so we will go
506:49 - ahead and receive that request object
506:51 - and then we will pass it through to
506:54 - require auth and then inside of the
506:57 - other loaders that are separately
506:58 - defined but only the ones that need to
507:01 - be protected with require auth so that
507:03 - is our host fans loader and our host van
507:06 - detail loader and I think that's
507:07 - everything so let's see where are we
507:10 - here nope not Vance under host host Vans
507:13 - okay this loader right here this needs
507:16 - to receive the request object and pass
507:18 - it to require auth and then the same for
507:21 - our host van deta until we're already
507:23 - receiving params so we will just also
507:25 - pull in request asset 2 require auth
507:28 - okay that is a good start let's go to
507:32 - require auth and that should be
507:34 - everything for one we'll go ahead and
507:36 - clear that out then require auth is
507:38 - going to receive the request we'll
507:41 - construct a URL actually we can just do
507:43 - it all in one we'll say the const path
507:45 - name is equal to new URL
507:48 - request dot URL and then we'll use dot
507:52 - pathname to grab the path name that the
507:55 - app was trying to get to when we were
507:57 - first trying to get to the protected
507:58 - route without being logged in okay and
508:01 - in this case we already have the message
508:03 - that we're passing through this is
508:05 - important for us to keep so we are going
508:07 - to add another one on top I'm going to
508:09 - change this to template strings and I'll
508:12 - just put this on this online so that it
508:14 - can be a little easier to use and we
508:17 - will add in with an ampersand we'll say
508:19 - and redirect 2 equals and then we'll
508:23 - pull in our path name
508:25 - okay so this alone we should be able to
508:28 - test let's clear this out and since
508:31 - we're on our own for the last part we'll
508:32 - clear out the rest of this challenge
508:33 - let's hit save
508:35 - okay and then I'll make sure I'm logged
508:37 - out I'll go maybe to the home page and
508:40 - then I'll go to host okay and if we look
508:42 - closely we have the whole thing up there
508:44 - we have slash login question mark
508:45 - message equals you must log in first and
508:48 - redirect to equal slash host perfect now
508:51 - for the last part we need to go to our
508:53 - login page receive the search params so
508:56 - that we have access to this redirect to
508:58 - in the URL and then use that as our
509:00 - value for slash host or rather in place
509:03 - of the hard-coded slash host that we
509:04 - have here so actually we already have up
509:07 - here where we are grabbing the search
509:09 - param for message so I'm just going to
509:10 - copy this because I guess I'm a cheater
509:13 - and right here we will say that our path
509:16 - name is equal to and then I'll just
509:18 - paste that in but change this to
509:20 - redirect to since that's the key that
509:22 - we're trying to get the value from and
509:24 - maybe I will put this on its own line
509:26 - just in case that's getting a little
509:28 - wide for anybody and I'm going to have a
509:31 - default of Slash host that way if
509:34 - someone is coming through the regular
509:35 - your login workflow where they actually
509:37 - manually go to slash login we're not
509:39 - going to get null in its place okay so
509:42 - we'll take this path name and that is
509:44 - where we are going to redirect to let's
509:46 - hit save
509:47 - we will log in be at b.com p123 okay so
509:53 - that took us to slash host that's where
509:54 - we had been trying to get to before I'm
509:56 - going to go somewhere more deeply nested
509:58 - let's go to Vans maybe one I'm going to
510:01 - log out and then try to get to pricing
510:04 - okay great we can see in the URL
510:07 - redirect to equals host slash fans slash
510:10 - one slash pricing let's go ahead and log
510:12 - in again
510:13 - p123 enter and here we are perfect great
510:18 - work I know that may have been a
510:19 - challenge especially that last part
510:21 - since I kind of took the training wheels
510:22 - off and let you ride on your own if you
510:24 - did struggle with it and you had to
510:26 - watch me do it that's completely okay
510:27 - but now is the perfect time to scrub
510:30 - back and to try the challenge again
510:31 - maybe from the very beginning all by
510:33 - yourself great work and I'll see you in
510:35 - the next grim
510:39 - at this point in this course we are
510:41 - really rounding the corner on the final
510:43 - topics that we're going to learn about
510:44 - react router and at this point we are
510:46 - starting to venture into some more
510:49 - advanced territory it's nothing to be
510:51 - worried about we're going to go step by
510:52 - step so that we can understand
510:53 - everything we're learning but it also
510:55 - will touch on a couple topics in react
510:58 - not react router but core parts of react
511:00 - that you may or may not be familiar with
511:02 - I'll try to give a bit of an overview of
511:04 - them but we won't be diving deep into
511:06 - those topics specifically the topic of
511:08 - suspense the motivation for what we are
511:11 - about to learn can be seen here in this
511:14 - little weather app that I created
511:15 - clicking on the weather link which I'll
511:17 - do in just a second will get the weather
511:19 - for the current location where I'm
511:21 - recording this and the API is actually
511:24 - not very slow so what I've done in the
511:27 - utilities.js where I'm creating this get
511:29 - weather function I've added a three
511:31 - second pause just to make it so that
511:33 - it's as if getting the weather took a
511:35 - bit longer than it actually does and
511:37 - this is really to highlight one of the
511:38 - things that you certainly noticed when
511:40 - we first introduced the idea of a loader
511:43 - see the benefit of a loader is that we
511:45 - can write our code as if the data always
511:47 - exists at the time of rendering this
511:50 - component for example I can say that
511:52 - loader data is equal to use loader data
511:54 - and I don't have to do optional chaining
511:57 - or any kind of ternary check to make
512:00 - sure that loader data exists at the time
512:02 - this is being rendered otherwise I could
512:04 - get some kinds of Errors for trying to
512:06 - access the property main of undefined
512:08 - for example that is a nice benefit but
512:10 - you might remember from Van life when we
512:13 - first implemented the ability to go to
512:15 - the Vans page and load up the Vans we
512:17 - used react state to show that we were
512:19 - currently loading the Vans and we had a
512:21 - nice little loading message so that the
512:23 - user when they click the link would
512:25 - immediately go to that page and be
512:27 - informed that the Vans are loading when
512:29 - we switched to using a loader because it
512:31 - does the fetching before the component
512:33 - renders there's quite a bit of a pause
512:36 - before you switch to the next route so
512:38 - here if I click whether I will click it
512:40 - right now
512:45 - three seconds feels like an eternity
512:47 - especially when you're not navigated
512:49 - anywhere and it doesn't feel like
512:51 - anything really happened so on the
512:53 - developer side we get some nice benefits
512:55 - by knowing that our weather component
512:57 - will only load after the data has been
512:59 - fetched and is ready for display but on
513:02 - the user side we have a bit of a worse
513:04 - experience so over the next few lessons
513:06 - we're going to be learning about using
513:08 - deferred data this is going to give us a
513:10 - chance to bring back that user
513:12 - experience where clicking the link on a
513:14 - route that needs to fetch data will
513:16 - transition us to that route immediately
513:18 - and it will give us a nice API that
513:21 - allows us to render some kind of loading
513:23 - state in the meantime all of which we
513:25 - will be able to do without creating any
513:27 - of our own manual react state so buckle
513:30 - up and get ready to dive into world of
513:33 - deferred data
513:37 - it's probably safe to assume that some
513:40 - of you watching this might be a little
513:42 - bit hazy on your understanding of
513:44 - promises and how promises work I won't
513:46 - have time to dive deep into promises but
513:49 - one thing that I wanted us to remember
513:50 - is that when a function is an async
513:53 - function it will always return a promise
513:56 - so when I say await get weather that's
513:59 - an indication to me that get weather
514:01 - returns a promise because a weight can
514:04 - only be used on a function that is
514:06 - returning a promise if I go over to my
514:08 - utilsjs we can see that get weather is
514:11 - an async function and therefore it is
514:13 - always returning a promise when we say
514:15 - return data what's really happening
514:18 - under the hood is we are returning a
514:20 - promise that if it's resolved we'll
514:22 - return data it's not important that you
514:25 - have that perfectly memorized or
514:27 - understood the point that I'm trying to
514:28 - make is that when we have our loader
514:30 - function and we are calling a wait get
514:33 - weather What's Happening Here is we are
514:35 - waiting for the get weather call to
514:38 - finish and remember get weather is
514:40 - sleeping for three full seconds before
514:41 - it even executes the fetch request and
514:44 - then naturally the fetch request is
514:45 - going to take some time to complete as
514:47 - well and with loaders the code inside of
514:49 - my loader needs to complete before the
514:52 - component will ever get rendered by
514:54 - react that's beneficial to us because we
514:57 - know here that loader data will be
514:59 - accessible to us no matter what unless
515:01 - of course there's some kind of error in
515:03 - which case this component shouldn't get
515:04 - rendered anyway it will have some kind
515:06 - of error element that gets rendered
515:08 - instead but in order for us to bring
515:10 - back the benefits of switching to the
515:12 - route immediately before ever kicking
515:15 - off the request in our loader function
515:17 - we need to use a utility that comes from
515:19 - react router Dom called defer the entire
515:23 - process that we're about to go through
515:24 - starts with react router knowing that
515:27 - its loader function is allowed to wait
515:30 - or defer the loading of our weather data
515:33 - to a later point and therefore will not
515:36 - block the user interface from loading or
515:39 - more specifically it won't stop the
515:41 - weather component from being rendered
515:43 - before the data is completely gathered
515:45 - from the get weather function now we're
515:47 - not quite done yet because weather is
515:50 - still the actual value because I'm using
515:52 - this await keyword which is pausing
515:54 - execution of my loader function so I
515:57 - need to get rid of a weight which means
516:00 - that weather is no longer the actual
516:03 - resolved data from get weather I want
516:05 - you to pause for a second and think what
516:07 - kind of construct in JavaScript is this
516:10 - weather variable now that I've removed
516:11 - the await keyword
516:16 - well we can actually console log this
516:19 - let's console log whether I'm going to
516:21 - remove my defer right here and we'll
516:25 - probably get some errors here but let's
516:27 - give it a shot and see if at least okay
516:29 - good we can see that weather is not the
516:32 - actual weather instead it's a promise
516:34 - object so just for clarity I'm going to
516:37 - rename this weather promise now that
516:39 - we've gotten rid of a weight there we
516:42 - can get rid of our console log and let's
516:44 - bring back our defer call now what defer
516:47 - expects is an object and the key of that
516:50 - object is what I want to call the data
516:53 - that eventually will get resolved
516:55 - whenever the promise gets resolved and
516:58 - I'm going to pass to it the promise that
517:01 - eventually needs to get resolved and
517:03 - become the weather data that will get
517:05 - passed down to my used loader data I
517:07 - understand that we jumped around a bit
517:09 - so I'm going to undo everything and just
517:11 - show you that we actually haven't
517:13 - changed all that much
517:15 - okay this is where we were before we
517:18 - needed to import defer we're going to
517:21 - remove our await forget weather which
517:23 - means that this is not really the
517:25 - weather it's a promise to get the
517:27 - weather then we're going to call defer
517:30 - pass to it an object give it a key of
517:34 - whatever we want to call the data that
517:36 - we are deferring till later and then
517:38 - pass to it the promise that it should
517:40 - work on resolving for us and putting at
517:43 - this part in the object that's coming to
517:45 - loader data the tricky thing about
517:47 - learning this and partly why I call this
517:49 - an advanced topic is because there's
517:51 - quite a bit to put together before any
517:53 - of it will work so for the sake of
517:55 - practice I'm going to once again undo
517:58 - everything and have you type this out
518:00 - again so if you need to take a look at
518:02 - what we just typed in again try to
518:04 - commit it to memory because you're going
518:06 - to be typing it in just a second
518:08 - okay let's do it one more time start
518:10 - setting up our deferred data just like
518:12 - we did together and of course you can
518:13 - scrub back for a reference if you need
518:15 - to jog your memory again the tricky part
518:17 - is we're not quite ready to have this
518:20 - actually work for us so you're just
518:22 - going to have to try and do it for
518:23 - memory pause now and work on the
518:25 - challenge
518:31 - okay let's start up here again we're
518:33 - going to pull in this defer utility
518:37 - get rid of a weight
518:39 - we will call defer we're going to pass
518:42 - an object where the key is what we want
518:45 - to call the data when it gets pulled
518:47 - into use loader data and the value is
518:49 - the promise so let's call this weather
518:51 - promise this part is not strictly
518:53 - required it just makes it a lot easier
518:56 - for another developer to understand
518:57 - what's going on here and we'll pass this
519:00 - in now of course we could gain some
519:02 - shorthand benefits if we just kept this
519:04 - as weather because I could then just say
519:06 - weather but for the sake of learning
519:08 - we'll do this again I don't have a great
519:11 - way to test this yet because we have
519:13 - quite a bit more work to do down in our
519:15 - component so that's what we'll be
519:16 - jumping into next
519:21 - okay let's add defer to the loader of
519:23 - our vans route I added another one
519:26 - second delay on our server so when I
519:28 - click the van so we can see that it does
519:30 - take a little bit of time to get over
519:31 - there in the end I think it's important
519:33 - to remember that it's just a trade-off
519:35 - that you have you can simplify your
519:37 - developer experience and also
519:39 - parallelize all of the loaders so any
519:41 - nested resources can be more easily
519:44 - retrieved and as we get closer to adding
519:46 - fur await and suspense we're going to
519:49 - see that we can bring back some of the
519:51 - snappiness that we got when we first
519:53 - started using react router that way when
519:55 - we click the Vans route it will take us
519:57 - here immediately and we'll have some
519:59 - kind of indication that the Vans are
520:01 - loading okay so for now your challenge
520:03 - is just to add the fur to our loader
520:06 - which is up here and then there will be
520:07 - more to the challenge later I have a
520:09 - quick reminder here in case that is
520:11 - helpful so pause now and work on the
520:12 - challenge
520:19 - okay let's go ahead and import defer
520:22 - from react router I'll put these on
520:24 - their own lines just to make it a little
520:27 - easier to read okay and now I can return
520:30 - a call to defer we'll wrap our get Vans
520:33 - get Vans is going to return a promise
520:36 - notice that this is not set up as an
520:38 - async function and we're not using the
520:40 - await keyword so git Vans is going to
520:42 - return a promise just because that's
520:44 - what it does in the API file and I need
520:46 - to wrap this in an object and we'll call
520:49 - the value that is going to be resolved
520:52 - maybe Vans like this okay short and
520:55 - sweet as I mentioned we still have some
520:57 - steps to take in order for this all to
520:59 - work together so let's go back learn a
521:01 - little bit more and then we'll come back
521:02 - here to Van life
521:07 - if we try to get to our weather page now
521:09 - we'll see that well we are broken and
521:12 - that's because the protection that we
521:14 - had before where we could be certain
521:15 - that our loader data would be defined
521:18 - and ready for us to use when our weather
521:20 - component was mounted is no longer the
521:22 - case and that's because we are allowing
521:25 - the loader to defer for a later time and
521:28 - we're no longer awaiting our get weather
521:30 - call so the next piece in this puzzle is
521:33 - to use a component from react router
521:35 - called await a weight does a few
521:38 - different things first of all it allows
521:40 - us to surround the code that we will be
521:43 - waiting for when this component first
521:44 - renders and it will conditionally render
521:47 - only after the data has finished loading
521:50 - it'll make a little more sense if we
521:52 - just do it so I will put in my await
521:54 - component and this will not be a
521:56 - self-closing but instead will take some
521:59 - children and I'm going to move this H3
522:03 - and this image out and just comment it
522:04 - out for now we'll bring it back in in
522:06 - just a minute and there's two major
522:07 - parts to the await keyword that we need
522:09 - to use the first one is a prop called
522:12 - resolve our job is to pass the promise
522:16 - for the data that we're trying to get to
522:18 - this resolve prop and I want you to
522:20 - think for a second where am I going to
522:22 - get this promise from well up above we
522:25 - are returning this object that has a
522:27 - weather property and we're pulling in
522:29 - loader data kind of like we had before
522:31 - except before it was the actual data
522:34 - let's go ahead and console log loader
522:36 - data and we might still have this
522:39 - unhandled error thrown but let's see if
522:42 - it logged that to the console okay
522:43 - loader data is an object that has a
522:47 - weather property whose value is a
522:49 - promise so that's the promise that we
522:51 - need to pass to resolve in other words
522:53 - we give our promise to this await
522:55 - component I'll call it loaderdata dot
522:58 - weather and under the hood the await
523:00 - component will take that promise and
523:02 - after it has been successfully resolved
523:05 - it will call a render prop child
523:08 - function earlier in the course when we
523:11 - were talking about Dynamic class names
523:13 - with the nav link component from react
523:15 - router I mentioned that if you are
523:18 - taking this react router course as a
523:20 - part of my larger Advanced react course
523:22 - we will have already talked in detail
523:25 - about render props and how they work if
523:29 - you're taking this as a standalone
523:30 - course you may or may not be familiar
523:33 - with the concept of render props but as
523:35 - a quick high level overview I can can
523:37 - pass a child to a component and that
523:40 - child doesn't necessarily have to be
523:42 - another component we're very used to
523:44 - having parent-child relationships with
523:47 - our HTML or our jsx elements like we
523:49 - have already here but when I have a
523:51 - custom component I don't necessarily
523:53 - have to pass another jsx element as the
523:56 - child to my component instead I could
523:58 - pass a function for example and the code
524:01 - of that component could take that
524:02 - function and run it passing any
524:04 - arguments to it that it wants to that
524:06 - was a really quick rundown of render
524:08 - props and probably didn't do it justice
524:10 - so I'd recommend going and checking out
524:12 - my Advanced react course to get a much
524:14 - more in-depth look at render props that
524:17 - said the await component does use render
524:19 - props as a child and when our promise
524:22 - finally gets resolved it will pass to
524:24 - this function the loaded weather and we
524:28 - can call this whatever we want but in
524:30 - our case it makes sense to call it
524:31 - loaded weather and loaded weather will
524:33 - be the data that we used to be calling
524:35 - loader data so inside of this function
524:38 - is where one we can have access to our
524:42 - loaded weather for example this icon is
524:44 - going to be broken because loader data
524:46 - is a promise and does not have a weather
524:48 - property that's actually the error that
524:50 - we see over here it's saying that we
524:52 - can't read the property icon of
524:54 - undefined and so I'm going to bring in
524:57 - this URL assignment inside of my render
525:01 - prop over here
525:03 - and I can make the changes needed like
525:05 - changing loader data to loaded weather
525:08 - in fact let me move this console log
525:11 - down and we will console log our loaded
525:14 - weather so we can see what we're working
525:16 - with and there's a chance we'll have an
525:18 - error let's take a look
525:20 - okay and it did take a full three
525:22 - seconds plus a little bit to actually
525:25 - render anything on this page but you can
525:27 - see that the loaded weather is the
525:29 - weather object that we were working with
525:31 - before and because the await component
525:34 - will only render the children inside of
525:37 - the render prop or rather it will only
525:39 - call this child function after it has
525:42 - finished resolving our data we can again
525:45 - like we had in our original setup be
525:48 - sure that loaded weather will exist when
525:51 - we're writing our code here so let me
525:53 - get rid of my console log and I do want
525:55 - real children to exist here so I'm going
525:57 - to return the markup that I want to
526:00 - display when the loaded weather has
526:02 - finished actually loading so I'll open
526:05 - this up and I'm just going to put a
526:08 - fragment and then pull in
526:10 - these components that we had before now
526:14 - at least we're not broken let's hit save
526:16 - we'll see that it will also take a bit
526:19 - of time for it to load so I'll hit save
526:21 - right now okay and then lastly we need
526:24 - to update loader data here to be loaded
526:27 - weather
526:28 - and let's go ahead and hit save again
526:30 - I'll hit save right now okay it's
526:33 - working obviously we haven't quite fixed
526:36 - the user experience issue but we were on
526:39 - the weather route of course we could see
526:40 - that even the navigation bar didn't
526:42 - render which is a problem of its own
526:44 - that we're about to fix and cool well it
526:47 - might seem like we're done but once
526:48 - again there's a lot of pieces to making
526:50 - this work in the way that we would
526:52 - expect and we can actually get some
526:54 - insight into the problem that we're
526:55 - still facing if we go to home and then
526:58 - go back to weather we'll see that it
527:00 - says a component suspended while
527:02 - responding to synchronous input that
527:04 - doesn't necessarily have to make sense
527:06 - but it is something that we are going to
527:08 - fix by using a tool that comes directly
527:11 - from react not even react router this
527:13 - time but from react before we plow ahead
527:16 - because we have covered so much ground I
527:18 - want to get your hands on the keyboard
527:19 - practicing these things I know that we
527:21 - covered a lot of ground here and it may
527:23 - start to look a bit complicated but the
527:25 - truth is all we did was we added an
527:27 - await wrapper around the code that we
527:29 - wanted to display after the data had
527:31 - been loaded and we put that markup
527:33 - inside of a child function that will
527:37 - receive the successfully loaded weather
527:39 - and allow us to return whatever user
527:42 - interface that relies on having that
527:44 - successfully loaded weather let's bring
527:46 - this back over to Van life so we can
527:48 - practice this and then we will come back
527:50 - we'll learn about suspense and then come
527:52 - back again to Van life and apply it
527:56 - admittedly the code in our weather app
527:58 - is significantly more simple than the
528:00 - code here in our van Life app and so
528:02 - I've made a note of this your challenge
528:04 - is to implement a weight however it's
528:06 - important to note that the code here is
528:08 - more complex and so rather than maybe
528:09 - spood and feed you the answer or set you
528:11 - up perfectly for solving this I think
528:14 - this might be a good opportunity for you
528:15 - to really put on your critical thinking
528:17 - hat and see if you can solve this on
528:19 - your own really quick I'll highlight
528:21 - what the issue that we're going to face
528:22 - is and then I'll leave it up to you to
528:24 - figure out a solution there's going to
528:26 - be more than one way to solve this in
528:28 - fact we're going to see two different
528:29 - ways so the issue is before when we were
528:31 - pulling in vans from use loader data we
528:34 - had the Vans available to us but now
528:36 - because we're using defer we just have
528:38 - an object that has the ability to
528:41 - resolve fans eventually the benefit that
528:43 - we had before was we could just assume
528:45 - Vans were available to us but because we
528:48 - are deferring the loading of our vans to
528:50 - after the route transition happens we
528:52 - have to make some other tweaks the
528:54 - reason this is a problem is because we
528:56 - are making use of this Vans array for
528:58 - example when we filter the Vans and
529:01 - create our display Advanced variable and
529:03 - then we map over that in order to create
529:06 - the van elements and then at the bottom
529:08 - we render our van elements way down here
529:10 - at the bottom so you're going to have to
529:13 - think carefully about where we use our
529:15 - await component because I can't just put
529:17 - it here inside of the rendered markup
529:19 - near the very end because because at
529:22 - this point in the code it has already
529:24 - attempted to make use of the Vans array
529:27 - even though it's still an object with a
529:29 - promise inside so give this your very
529:30 - best shot I understand this might be a
529:32 - little more difficult but I also think
529:34 - it's really good to stretch yourself and
529:36 - push yourself in order to grow so pause
529:39 - now and work on this challenge
529:46 - okay so one thing that I think will help
529:48 - us figure out how to organize this would
529:51 - be for us to accurately name what's
529:53 - going to be coming back from use loader
529:54 - data because the name Vans implies that
529:57 - we have access to the Vans I'm instead
529:59 - going to change this to something like
530:01 - data promise maybe this way I can
530:04 - immediately know that I'm going to have
530:05 - some problems when I try to for example
530:07 - filter over the Vance Ray because I
530:09 - don't have access to the Vans array
530:11 - anymore so let's go down to where we're
530:13 - starting to return the elements that we
530:15 - have and I need to decide where I want
530:17 - my await to live I think it might be
530:20 - okay for us to leave our H1 as soon as
530:22 - we get to this page because it's not
530:24 - waiting on any data but I don't know
530:26 - that I want my filtering buttons to
530:28 - display if the data isn't there so maybe
530:31 - right below my H1 I'm going to include
530:33 - my await component
530:35 - and I need to make sure to import that
530:38 - and then let's just wrap everything that
530:40 - we have below it that'll go down to here
530:44 - and we'll format this okay and then the
530:46 - await component will take a resolve prop
530:49 - and we're going to pass data promise and
530:52 - in our case we would just specifically
530:53 - want to wait for the Vans array to
530:56 - resolve then await expects a child
530:59 - function so I need to enter into
531:01 - JavaScript and then put in my function
531:03 - here and we'll open that up and this
531:06 - function is going to receive the array
531:08 - of Vans as the data now that I have
531:11 - access to this Vans keyword I can just
531:13 - take everything above it that was
531:15 - expecting to have access to Vans and
531:18 - move it inside of that child function so
531:21 - I want to have all of my van elements
531:24 - because that relies on displayed vans so
531:26 - I'll need to bring in display Advance
531:27 - which relies on the Vans array so I'll
531:30 - just go ahead and cut all of this and
531:33 - paste it down here where to go inside of
531:36 - my await render props function here so
531:39 - we'll paste it and format it okay and
531:41 - then I have all of this markup that I
531:44 - need to be returning as the children
531:46 - elements so we'll go ahead and cut that
531:49 - out and right here below our van
531:52 - elements we will return and then we'll
531:54 - paste that back in and I think we have
531:57 - an issue here because we're trying to
531:58 - return two divs so let me just wrap
532:01 - these in a fragment and perfect okay
532:03 - that seems to fix that Let's cross our
532:06 - fingers and hope for the best we'll hit
532:08 - save
532:09 - okay and we have an issue right now
532:11 - where the entire screen shows up as
532:13 - blank we're going to be fixing that very
532:15 - soon but we have our vans data showing
532:17 - up awesome okay as far as a weight is
532:20 - concerned this is a great start we could
532:22 - just leave it like this but I did want
532:24 - to show just for the sake of learning
532:26 - another way that we could solve this
532:27 - problem it's actually only going to be
532:29 - one extra Step Beyond what we've already
532:30 - done and then we'll be able to learn the
532:32 - final piece we need in order to get the
532:34 - user experience back that we're hoping
532:36 - for which we'll be able to show a little
532:37 - loading State here when we get to this
532:39 - component so I know this challenge might
532:41 - have been a little bit difficult if it
532:43 - was that's completely okay as I always
532:45 - say it's important for us to get
532:47 - experience by trying these difficult
532:49 - things so if you weren't able to solve
532:51 - it on your own that's okay as always
532:52 - just scroll back and try again remember
532:54 - there's nobody that's giving you any
532:56 - kind of grade by completing this course
532:58 - faster it's more important that you
533:00 - grasp the concepts that we're learning
533:01 - and reach out to the community for any
533:04 - help you might need for just kind of
533:05 - plowing ahead so take all the time you
533:07 - need with this code try rewrite writing
533:09 - it again if you'd like and when you're
533:11 - ready we'll move on and see another way
533:12 - we could solve this
533:17 - we've seen one solution where our await
533:20 - keyword is up here pretty high inside of
533:22 - our return and then we just grabbed
533:24 - everything that was above it everything
533:26 - that was I guess preparing the elements
533:28 - to be displayed and just shoved it down
533:31 - here inside of our return so everything
533:33 - is just happening right here in line
533:34 - this isn't terrible by any means but it
533:37 - is a little bit difficult to parse and
533:39 - to read because everything is so deeply
533:41 - nested but if we think about it what we
533:43 - have here is a function that is handling
533:45 - all of the preparation for what should
533:47 - be ultimately displayed so one thing we
533:50 - could do and again like I mentioned this
533:52 - is just a minor refactor but hopefully
533:53 - it will improve the readability is we
533:56 - can take this whole function I'm going
533:57 - to go all the way down here to right
534:00 - here where the function ends and we'll
534:02 - just cut this out and we can see that
534:04 - was the right level because we just have
534:06 - an empty set of curly braces now and
534:08 - then before my return I can just Define
534:10 - a new function and maybe we'll call it
534:13 - render and elements and then let's paste
534:16 - the fun function that we just created
534:18 - and it just doesn't need to be an arrow
534:21 - function per se so I'll just go ahead
534:23 - and tidy this up I'll format this and so
534:26 - now everything is multiple layers less
534:28 - nested and I personally think is a
534:30 - little bit easier to read and then we
534:31 - can simply pass the reference to this
534:33 - function inside of our await way down
534:36 - here at the bottom so I think at least
534:38 - this has simplified the level of nesting
534:40 - and it's also simplified our return and
534:43 - then if we really wanted to clean this
534:44 - component up we could make kind of a
534:46 - utility helper function where this
534:48 - function render van elements might sit
534:51 - inside of a different file and then just
534:53 - import it if we really wanted to so
534:55 - let's hit save and see if this works in
534:58 - the first place okay we did get the
535:00 - delay where the screen is blank again
535:01 - that's what we're going to be fixing
535:03 - next but everything seems to be working
535:05 - and we can go into one of the nested
535:07 - bands perfect now it's time for us to
535:10 - solve the last little problem you can
535:12 - see if I click back to all Vans we
535:14 - actually get an error displaying saying
535:15 - that a component suspended while
535:17 - responding to synchronous input the fix
535:19 - for this is not something specific to
535:21 - react router but instead react itself so
535:24 - next we're going to start learning about
535:25 - the suspense component in react
535:31 - here we are back at our trusty weather
535:33 - app and you might remember that we had a
535:35 - little bit of an issue I'm going to go
535:37 - ahead and refresh this and we'll see
535:39 - that it's blank for a couple seconds and
535:41 - then all of our data gets loaded in at
535:43 - once not only that but if I go to
535:45 - another route and then try to come back
535:46 - to whether we actually get an error that
535:48 - gets thrown we can see that it says a
535:50 - component suspended while responding to
535:52 - a synchronous input this leads us to the
535:55 - final piece in our puzzle of actually
535:57 - creating the user experience that we
535:58 - originally set out to create and that is
536:01 - by using something that comes from react
536:03 - called suspense you can click the
536:05 - screenshot here to go directly to the
536:07 - react documentation on suspense it's
536:09 - fairly thorough so you're welcome to
536:11 - read through the entire thing if you
536:13 - want I'm not going to be teaching all of
536:15 - the ins and outs of suspense as a part
536:17 - of this course I'm simply going to be
536:19 - showing you how we can use suspense to
536:21 - finally get to that finished point that
536:23 - we've been trying to get to this whole
536:25 - time react has introduced the ability
536:27 - for mostly libraries third-party
536:29 - libraries to suspend and rendering of
536:32 - your react application until something
536:34 - has finished the benefit of this is we
536:37 - can treat our components as if they were
536:39 - synchronous like we see here where we're
536:41 - pulling in loader data and then we are
536:43 - just rendering what we need with that
536:45 - loader data instead of initializing our
536:47 - fetch request after the weather
536:48 - component is being loaded and then
536:50 - having to maintain the loading State and
536:52 - the error State and all those other
536:54 - things that we used to be doing suspense
536:56 - allows us to wrap our suspended
536:59 - component which is this await component
537:01 - in another component called suspense now
537:04 - I can just say react dot suspense here
537:08 - or if you don't like the dot syntax you
537:11 - could separately pull in suspense like
537:13 - this just to be totally clear that
537:16 - suspense is coming from react I'm going
537:18 - to leave it as react.suspense for now
537:20 - I'm going to put my closing tag down
537:23 - here after a weight and we'll indent and
537:26 - then the last thing that I need to do is
537:28 - provide a prop called fallback the idea
537:31 - of fallback is that it gives react an
537:33 - element to render while it's waiting for
537:36 - the other component that is suspending
537:38 - to finish in this case I can just put
537:41 - maybe an H2 that says loading and maybe
537:46 - I'll be a little more clear and say
537:47 - loading weather and with that simple
537:49 - addition I can hit refresh we see
537:53 - loading weather and then we get our
537:55 - weather now notice that I put my
537:57 - suspense boundary you could call it
537:59 - underneath my weather in Salt Lake City
538:02 - H1 if I were to move this up by one
538:05 - let's go ahead and indent that I'll hit
538:08 - save and we just get loading weather it
538:10 - doesn't have that H1 displaying anywhere
538:12 - and then it displays what is inside of
538:15 - the suspense boundary because I have
538:17 - this text hard coded it probably doesn't
538:20 - need to be inside of the suspense
538:22 - boundary but of course if I wanted to
538:24 - pull the city from my loaded weather
538:26 - which actually is part of the data that
538:28 - comes in then I would just need to move
538:30 - this down inside of this callback
538:32 - function so it would be down here where
538:35 - I'm returning the weather specific data
538:38 - I think the way it currently is right
538:40 - now is probably fine now that we've
538:42 - added this suspense boundary we also are
538:44 - handling that exception where this
538:46 - component was suspending and so I can go
538:49 - back to my home and let's go ahead and
538:51 - refresh just for giggles and then we'll
538:53 - go back to weather we get loading
538:55 - weather and then we get the weather
538:57 - loading in finally we're back to a point
538:59 - where the user experience is a lot
539:01 - smoother and sure we've had to learn a
539:04 - lot along the way and make quite a few
539:05 - changes to the code but in the end I
539:07 - don't have to maintain all of that
539:09 - error-prone react state in the meantime
539:11 - it's all being handled in a very
539:14 - declarative Way by other libraries okay
539:17 - I've talked quite a bit let's practice
539:19 - this in two phases I'm going to erase
539:21 - what I did and have you do it again and
539:23 - then we're going to move back to the van
539:25 - Life app again and have you implement it
539:26 - there as well
539:28 - okay simply put your challenge is to
539:30 - implement suspense pause now and work on
539:33 - the challenge
539:39 - maybe just to see it the other way this
539:41 - time I am going to pull in suspense as a
539:44 - separate component up there we'll just
539:47 - clear out this challenge since that's an
539:48 - easy one to remember
539:50 - and we will just wrap our await in the
539:54 - suspense component
540:02 - okay and we can't forget I need to give
540:04 - it a fallback property this is the
540:06 - element that will display while it's
540:08 - waiting for the suspended component to
540:11 - finish and so we'll just put back our H2
540:15 - that says loading weather hit save we
540:20 - get loading weather and then we get the
540:22 - weather okay let's jump back into van
540:24 - life and Implement what we've learned
540:29 - short and sweet to your challenge is to
540:31 - implement suspense pause now and work on
540:34 - the challenge
540:40 - the error that we saw earlier was that
540:42 - the component suspended while responding
540:45 - to synchronous input and that component
540:47 - that's suspended is our await component
540:50 - way down here at the bottom so any
540:51 - components that are going to suspend we
540:54 - need to wrap in a call to
540:56 - reacts.suspense I haven't imported it
540:58 - separately so I'm just going to call it
541:00 - react.suspense and we'll move this down
541:03 - here in indent and then lastly we just
541:06 - need to provide a fallback prop and I'll
541:09 - just be a little bit boring again we'll
541:11 - just say loading Vans okay let's refresh
541:15 - okay we get explore our van options and
541:18 - we had our loading Vans H2 there for us
541:20 - while things were loading in and we're
541:22 - back to a really Snappy user experience
541:24 - now I do want to be totally clear it's
541:27 - not that big of a deal if you don't want
541:29 - to go out of your way to include a
541:31 - weight suspense and defer because maybe
541:33 - the transition to the new route is not
541:35 - taking very long we need to remember
541:37 - that I did include a delay right here
541:39 - inside of our server so it's pretty much
541:42 - manufactured delay I'll come back here
541:44 - to Vans and then we'll click on the
541:46 - vents route and we can see that it's
541:48 - pretty Snappy anyway even if it were to
541:51 - delay for a half second or so before
541:53 - coming to the new route in the end it
541:55 - really just depends on what user
541:56 - experience you want there's one last
541:58 - thing that I just want to touch on
541:59 - really quickly and that has to do with
542:02 - this defer function you can see we have
542:04 - changed this to be an object and that's
542:06 - because if we did want to include
542:08 - additional data maybe there was
542:10 - something like the user that we needed
542:12 - to pull in and we say get user then we
542:14 - could have different await boundaries
542:16 - and suspense boundaries depending on
542:18 - what data we want to display first or
542:20 - what data we do or do not want to defer
542:23 - on if there was some data that was
542:25 - absolutely crucial for us to load before
542:27 - we even transition to this route then we
542:30 - do have some flexibility because we can
542:32 - come to our function we can turn it back
542:34 - into an async function into any pieces
542:37 - of data that we want to delay
542:39 - transitioning to the new route for we
542:41 - can just include a weight in front of
542:43 - the Promise by doing this it means that
542:45 - the route transition will not start
542:47 - until this get user function has
542:49 - completed but if the get Vans function
542:52 - takes longer than the get user function
542:54 - then it will transition as soon as the
542:56 - user is ready and will get our suspense
542:58 - boundary while the get Vans function is
543:01 - still resolving in our case we don't
543:03 - have any use for this per se so I'll
543:05 - just go ahead and delete this but I just
543:07 - wanted to round out our experience there
543:09 - by mentioning that just in case that was
543:12 - useful to you at some point in the
543:13 - future by the way that is actually
543:15 - documented inside of the Deferred guide
543:17 - in the react router documentation so if
543:20 - you do want to learn more about it you
543:21 - can go there for more information now
543:23 - we've been working exclusively inside of
543:25 - our vans component here but we still
543:27 - have changes to be made in the van
543:29 - detail page the host Vans page and the
543:32 - host van Details page all of these are
543:34 - using a loader and could potentially be
543:36 - using defer like we just did in our vans
543:38 - page so for the sake of some X or
543:40 - exercise we are going to implement defer
543:43 - and await and suspense over in our host
543:46 - Vans route so that's the challenge that
543:48 - we'll be doing next
543:52 - practicing one little piece at a time I
543:55 - think can be really helpful for grasping
543:56 - the concept of something but it's also
543:59 - super important to take the time to put
544:01 - all of those little pieces together and
544:03 - challenge Yourself by doing them all at
544:05 - once it's kind of like learning a new
544:07 - language you could memorize little
544:08 - phrases here and there but the real
544:10 - growth will happen as you practice real
544:12 - conversations and put those phrases
544:14 - together and also challenge your own
544:16 - understanding when you're listening to
544:18 - someone else speak to you maybe I'm
544:19 - extending the metaphor a little bit but
544:21 - it's similar with music you can practice
544:23 - small sections of a piece of music but
544:25 - it's a whole different experience to put
544:27 - it all together and what people are
544:28 - expecting is not for you to just perform
544:31 - a small piece but to put the whole thing
544:33 - together and it's the same with our code
544:34 - here so your challenge is to implement
544:37 - defer await and suspense here in the
544:40 - host Vans route so pause now and work on
544:42 - this challenge
544:49 - okay well we know already we will need
544:51 - to import defer and await so I'll just
544:54 - do that now and inside of our loader we
544:56 - are going to return a call to defer
544:58 - let's wrap that in that function and
545:01 - defer expects us to pass an object and
545:04 - we'll give it the key of Vans okay so
545:07 - now this should be a promise that will
545:09 - get resolved eventually but we will not
545:11 - wait for the route transition to happen
545:13 - but instead we will defer this data for
545:15 - after the route transition happens okay
545:18 - so inside of our host Vans we were
545:20 - calling this Vans maybe let's call this
545:23 - I think we chose data promise before
545:25 - let's just stick with that we'll say
545:26 - data promise is coming from userloader
545:28 - data and our host van elements needs
545:31 - access to vans in order to successfully
545:34 - complete the map so let's do what we did
545:37 - before where we create a function and
545:39 - that function will be in charge of all
545:41 - of the rendering tasks here so we'll
545:43 - create a function that we'll just call
545:45 - render let's say render van elements
545:49 - that's going to take the array of Vans
545:51 - and we can move this host fan elements
545:54 - inside of that function and I'm going to
545:57 - keep my H1 like we did before but we
546:00 - will return this so let's cut this out
546:03 - and inside of our render van elements so
546:06 - I guess it will be right here we'll
546:07 - paste that in actually we need to return
546:10 - that so I'll type in return and then
546:12 - paste it in and now we have a function
546:14 - which will be the render prop child
546:16 - function that we pass to the await
546:19 - component so let's render weight and as
546:22 - the child of a weight we will render the
546:24 - van elements and we need to tell it what
546:27 - it needs to resolve that's going to be
546:29 - our data promise dot bands okay and
546:32 - since await will suspend rendering we
546:34 - need to provide the suspense boundary so
546:37 - that's with react dot suspense and
546:40 - lastly we just need to provide the
546:42 - fallback finally all back prop so that
546:46 - it knows what to do of course this is
546:48 - where you'd probably be better off
546:50 - putting something a little fancier like
546:51 - a fun spinner of some sort or maybe
546:54 - something animated that makes it a
546:56 - little more exciting than just saying
546:58 - loading bands but for now this will get
547:00 - the job done okay let's see how we did
547:03 - we'll clean up the challenge text and
547:05 - hit save
547:06 - okay and it was it was pretty brief it
547:09 - showed up as loading Vans for just about
547:11 - a half a second while it was loading I
547:13 - guess I can come back to my server and
547:15 - putting this timing delay and hit save
547:17 - we'll see if that makes a difference
547:19 - let's hit refresh
547:21 - okay we get loading Vans and then the
547:23 - vans come in this way the transition to
547:25 - the Vans page is really Snappy and we at
547:28 - least get some kind of feedback that
547:29 - says that the rest of the UI with the
547:31 - Vans is still loading awesome work I
547:34 - hope that went okay putting it all
547:35 - together can be a really good experience
547:37 - especially when we see in the end it
547:39 - truly wasn't that much work to do and
547:41 - instead we got to simplify quite a bit
547:43 - of our code or at the very least we got
547:45 - to give a little bit of a better user
547:47 - experience to our users now at this
547:49 - point we still have our van detail page
547:51 - and our host van detail page which is
547:53 - not using defer await and suspense but
547:56 - for the sake of not beating a dead horse
547:58 - I'm going to actually Implement those
548:00 - myself for the next Grim that said if
548:03 - you would like to practice this even
548:05 - more you can go to the van detail page
548:07 - and the host van detail page and do
548:09 - exactly what we just did in the host
548:11 - Vans page Implement defer await and
548:14 - suspense just to get a little extra
548:16 - practice I'm going to leave it up to you
548:18 - I trust you to know that if you need
548:20 - more practice with this you have have
548:21 - some places where you can do that more
548:23 - practice and if not you can move on we
548:25 - have just a couple of little Loose Ends
548:27 - to clean up so that's what we're going
548:28 - to do in the next lesson
548:33 - look at us here at the end of this
548:34 - project just dotting some eyes and
548:36 - Crossing some T's before we can finally
548:38 - call it done one thing we can look
548:39 - closely and notice is that we are still
548:41 - doing a little bit of manual error
548:43 - handling here we are maintaining our
548:45 - error in state and down here we have an
548:47 - early return for the error but a while
548:49 - back we did learn about the error
548:51 - element property or prop on routes let's
548:54 - see let's go back to our index here and
548:57 - if we go up here on our vans route we
548:59 - have this error element that is handling
549:01 - this for us but we haven't yet
549:02 - implemented that everywhere that we
549:04 - might need it as a reminder the error
549:06 - element will render this error component
549:09 - anytime there is a thrown error either
549:11 - inside of this route or inside of any of
549:14 - its children routes if you've ever
549:16 - created an error boundary component
549:18 - using class components this essentially
549:20 - gives us a really declarative way to
549:22 - create those error boundaries on the
549:24 - route level but we have only done it
549:26 - here on the Vans path so let's open up
549:29 - our vans page again where our challenge
549:30 - text is your job is to remove any menu
549:33 - manual error handling code which I
549:34 - believe is only in this component this
549:36 - Vans component right here and also to
549:38 - set up an error element for error
549:40 - handling on the following routes that I
549:43 - have listed here as I mentioned we
549:44 - created an error component that you
549:46 - should be able to reuse for those error
549:48 - elements that you put on the routes so
549:50 - pause now and work on this challenge
549:58 - okay well let's get rid of our react
550:00 - State here and this early return we
550:03 - don't need those and actually this
550:05 - should be pretty simple I'm just going
550:06 - to check just to make sure but it looks
550:09 - like I don't have any react state that
550:11 - I'm maintaining here or any error
550:13 - handling over in my host Pages we've got
550:16 - host Vans yep it looks like we already
550:18 - removed the error handling there and
550:20 - host man detail same thing there okay so
550:23 - we should just be able to go over to our
550:26 - index page and honestly I'm just going
550:28 - to take this error element of air and
550:30 - start pasting it everywhere that needs
550:32 - it this is our van detail page we want
550:35 - it there we also want it see here we
550:38 - have a loader that is grabbing some data
550:40 - we'll put it there and with our host van
550:43 - detail page okay let's hit save we're
550:45 - going to log out just to make sure that
550:47 - we're logged out we'll go to the host
550:49 - page you must log in first if I try to
550:51 - go to slash host slash Vans okay we get
550:54 - the same thing
550:55 - login
550:59 - okay that loads just fine and then we
551:02 - can really test this by going to the
551:03 - server and here on the Vans page I have
551:05 - this commented out just in case I needed
551:07 - it again we're just going to hard code a
551:10 - 400 level response from the server and
551:12 - I'll go to Vans and okay it's not super
551:15 - pretty we could probably make some
551:17 - improvements here but at least our app
551:19 - is not completely crashing because we
551:21 - have this error boundary let's undo this
551:23 - so that we aren't hard coding an error
551:26 - and we'll refresh just to get our vans
551:28 - back you have been doing an amazing job
551:30 - following so far so you should
551:32 - definitely take the time to congratulate
551:34 - yourself and if you've been sitting down
551:36 - for a while maybe it would be a good
551:38 - time to get up stretch take a breather
551:40 - walk around outside if the weather
551:42 - permits and really soak in that good
551:44 - feeling of everything that you've
551:45 - learned and accomplished in this course
551:47 - while we're on the topic of dotting our
551:49 - eyes and crossing our T's I do have a
551:51 - little present for you so I'll reveal it
551:53 - to you in the next scrim
551:57 - now we have been staring at these
551:59 - default dashboard goes here income page
552:02 - goes here Pages for far too long and so
552:04 - my surprise to you is that I have
552:06 - completed them for you however to be
552:08 - honest I've taken some pretty serious
552:10 - shortcuts here just for the sake of
552:12 - getting the design up if we come to the
552:14 - income page we can see this graph well
552:16 - it turns out this graph is just an image
552:18 - and the image is completely static it's
552:20 - not pulling data from anywhere I've done
552:22 - the same thing over in the reviews page
552:24 - we have this reviews bar chart and this
552:26 - is just an image that's being rendered
552:27 - here if we go to those pages the income
552:30 - I just created uh transactions data
552:32 - array That We're looping over and
552:34 - displaying same with reviews we just
552:35 - have some reviews data hard coded right
552:38 - here inside of our component of course
552:40 - if we were doing this for real and we
552:41 - actually had a server where we could get
552:43 - this data from we would be pulling this
552:45 - in inside of our loader instead of doing
552:47 - it in any kind of use effect here inside
552:49 - of our component at this point in the
552:51 - course we have covered all of the topics
552:53 - that pertain directly to react router
552:55 - that we planned to cover I suspect you
552:58 - have spent a fair amount of time on the
553:00 - react router documentation as I have
553:02 - sent you there a number of times
553:03 - throughout the course so when you find
553:05 - yourself working in react router in your
553:07 - own projects hopefully you not only feel
553:09 - really comfortable with the topics that
553:11 - we have practiced and learned but also
553:13 - feel comfortable going to the
553:14 - documentation and learning what you need
553:16 - to learn I also can personally recommend
553:17 - that you check out the remix Discord
553:19 - server since react router is a part of
553:21 - remix if you have any questions about
553:23 - react router there's a really great help
553:25 - Channel there that some of the core
553:27 - contributors to react router and remix
553:29 - will oftentimes be able to answer
553:31 - questions from in the last part of this
553:33 - course we are going to be jumping into
553:35 - using Firebase as our mode of storing
553:37 - our data and grabbing data from a real
553:40 - database online our mirage.js server has
553:43 - served us really well throughout the
553:44 - beginning parts of this course and as a
553:46 - final way to tie the bow on this app
553:48 - we're going to migrate our data to Cloud
553:50 - firestore which is a part of Firebase
553:52 - and refactor our app so that we are
553:54 - pulling data from a real database
553:59 - as I mentioned mirage.js has been an
554:02 - awesome server for us thus far however
554:04 - it's time for us to move on to a real
554:06 - online database so that we can really
554:08 - round out this project piece and if
554:10 - you're someone who's searching for a job
554:11 - especially if you're just learning web
554:13 - development for the first time using a
554:15 - service like Firebase can be a great way
554:17 - to get real data real API endpoints that
554:19 - you can reach out to without necessarily
554:21 - having to build and maintain your own
554:23 - server and database so for this lesson
554:25 - we are going to walk through how you can
554:27 - set up Firebase and specifically we're
554:29 - going to be using firestore which is one
554:31 - of firebase's databases so that we can
554:33 - migrate our data over to Firebase and if
554:36 - you are following along here on
554:37 - skrimba.com then this would actually be
554:39 - a great time to stop following along
554:41 - here on scrimba and actually download
554:43 - this code to your local machine and
554:45 - follow along on your local machine
554:46 - instead in order to do that you can go
554:49 - down to the little gear icon in the
554:51 - lower right now at some point in the
554:52 - future scrimba's design is going to
554:54 - change so it's possible that this gear
554:56 - icon may not be exactly here in fact
554:59 - everything my might look completely
555:00 - different but either way you can search
555:01 - the app for this option that says to
555:03 - download as zip or at least worded
555:06 - something similar to that once you
555:07 - download this project to your local
555:09 - machine and unzip it you should have
555:10 - access to a folder now I'm going to be
555:13 - using vs code for my editor you can open
555:15 - that folder in whatever editor you
555:17 - prefer and then you need to install the
555:19 - dependencies now I've done that here all
555:21 - in one line with this double Ampersand
555:22 - so what I did is I ran npm install or
555:25 - npmi for short and as soon as that
555:28 - finishes I'm going to run the
555:30 - development server by using npm run Dev
555:32 - you can see that under the hood we're
555:34 - using Veet in order to package and
555:36 - bundle everything up and it should be
555:38 - really quick when you do this once
555:40 - that's all set up you should have a new
555:41 - folder called node modules in your
555:43 - project and it should tell you that you
555:45 - have a local environment the default I
555:47 - think is at Port 5173 where you can open
555:50 - up this project locally okay at that
555:52 - point we can head over to the Firebase
555:54 - home page you can click the screenshot
555:57 - here to head directly there and once you
555:59 - are there on that site you can click the
556:01 - button to get started that'll take us to
556:03 - a screen where we can create our first
556:05 - project so we'll click the button create
556:07 - a project we'll enter a project name I'm
556:09 - just going to call it van life and we
556:11 - can hit continue at that point we'll be
556:13 - given the option to include Google
556:15 - analytics in our Firebase project if you
556:18 - would really want to this will take a
556:20 - bit of extra setup so for now I'm just
556:22 - going to uncheck that and then click
556:24 - create project we're then sent to a
556:26 - loading screen and when it's ready we
556:28 - can click continue and that will drop us
556:30 - into this project overview page which is
556:33 - sort of a dashboard for this van life
556:35 - project Firebase projects can consist of
556:38 - multiple different applications like for
556:40 - example if you had an IOS app that was a
556:42 - dedicated IOS app and a dedicated web
556:45 - app for now we are only concerned with
556:47 - the web so I'm going to click this
556:48 - little angle brackets web icon here in
556:51 - order for us to register our web app we
556:53 - need to give it a name so I'm going to
556:55 - just put in Van life here or if you knew
556:57 - ahead of time that you were going to
556:59 - have other apps you might call this
557:01 - something like van life web and then
557:03 - I'll click the button for Register App
557:05 - and this will give us some important
557:07 - installation information that we are
557:09 - going to need so this would be a great
557:10 - time to click the little copy button or
557:13 - of course you can highlight it and copy
557:14 - it if for some reason that gets lost
557:16 - after you copy it that's okay it's
557:18 - pretty easy to get back here and I'm
557:19 - going to show you how to do that once
557:21 - you have that you can click continue to
557:22 - console and this will drop us into the
557:25 - web app that we just created for Van
557:26 - life and the next step is to tell our
557:29 - van life project that we want to use
557:31 - firestore as our database so probably
557:33 - the most accessible thing is just to
557:35 - click the Big Orange rectangle here that
557:37 - says cloud firestore or over on the left
557:39 - you can drop down the build option and
557:41 - click the firestore database there
557:43 - clicking either one of those will take
557:45 - you over to the cloud firestore homepage
557:48 - where we can click this create database
557:50 - button it's going to ask us if we want
557:52 - to start in production mode or test mode
557:54 - and this is kind of an important thing
557:56 - to understand about Firebase you might
557:58 - have noticed that a couple slides back I
558:00 - was completely okay exposing this API
558:02 - key and if you are familiar with the
558:04 - concept of API Keys usually you want
558:06 - these to remain secret for most API keys
558:09 - that I've used at least they expect that
558:11 - you keep the API key hidden you don't
558:13 - commit it to your GitHub repository and
558:16 - you only make requests using that API
558:18 - key from a server of some sort however
558:21 - Firebase is a little bit different and
558:22 - that's because they use something that
558:24 - they call security rules in order to
558:26 - secure your data so you can see here in
558:28 - production mode if you look closely it
558:30 - says allow read write if false which
558:32 - means that nobody not even yourself
558:34 - could read and write data to your
558:36 - database this is their way of forcing
558:38 - you to take the time to learn about
558:39 - security rules and actually Implement
558:41 - what makes the most sense for your needs
558:43 - but for us we're going to be okay just
558:45 - starting in test mode which basically
558:47 - says you are allowed to read and write
558:49 - for about the next month from when you
558:51 - created this database for now that's
558:53 - going to work okay for us you will need
558:55 - to make sure that you look up a little
558:57 - bit about how to create security rules
558:59 - with Firebase but for now this is going
559:01 - to work okay for us so I'll go ahead and
559:03 - click next it's going to ask us to set
559:05 - our location you can click the drop down
559:07 - and just choose the location that is
559:09 - closest to you geographically and then
559:11 - click enable that will drop you into the
559:13 - cloud firestore database view where once
559:16 - you have some data in here you'll be
559:18 - able to actually peruse the data and see
559:20 - all of the data that you have in your
559:22 - database what I did on my instance of
559:24 - this database is I actually just copy
559:26 - and pasted the data that we have from
559:28 - our six van objects and put it here in
559:30 - Cloud firestore for us so that as we
559:32 - start doing our refactoring we are
559:34 - primed to grab that data from firestore
559:36 - and that is it we have set up our
559:39 - Firebase firestore for us to start
559:41 - making changes to our code and even
559:43 - though that may have seemed like a lot
559:44 - of different steps to take if you think
559:46 - of the alternative which would be to
559:48 - spin up your own server and connect the
559:50 - database and have database structures
559:52 - and everything set up this truly was
559:54 - like a walk in the park so let's jump
559:56 - into our code and we will start making
559:58 - refactors so that we can pull data from
560:00 - our Firebase firestore instead of using
560:03 - our fake mirage.js server
560:08 - one really nice side effect of us having
560:10 - put all of our fetching code here inside
560:12 - of our api.js file is I won't have to go
560:15 - to all of my components in order to
560:18 - change where I'm getting this data from
560:19 - right now we're doing a fetch request to
560:22 - this local API which is handled by
560:24 - mirage.js and all we need to do is
560:26 - change where that data is getting
560:28 - fetched from so that's what we're
560:30 - primarily going to be working on but
560:32 - first we need to set Firebase up in our
560:34 - code so that we have the ability to
560:36 - access our data from firestore you might
560:38 - remember me asking you to copy down that
560:40 - configuration object if you did great we
560:43 - are about to use it if not it's pretty
560:45 - easy to get back to from your Firebase
560:47 - console you can click on the gear icon
560:49 - in the upper left and choose project
560:51 - settings that will take you to the
560:53 - project settings page and on this
560:55 - General tab if you scroll down to the
560:57 - bottom you'll see that configuration
560:58 - object again and you can click the
561:00 - rectangle to copy that so that we can
561:01 - use it then back in our api.js file I'm
561:05 - just going to paste that in and we can
561:07 - just clean up some of the these comments
561:09 - for now and I'll give a little bit of
561:11 - space before our actual API functions
561:13 - just so we can clearly see what is
561:15 - Firebase related now Firebase is a whole
561:18 - Suite of different tools and firestore
561:20 - is just one of those tools here we have
561:22 - initialized an application which will
561:25 - allow us to connect to our van Life
561:27 - Application in Firebase we also need to
561:29 - write code that is specific to firestore
561:31 - so I'm going to import a function called
561:34 - get firestore
561:36 - which will come from Firebase
561:39 - slash firestore now one of the major
561:42 - benefits of firestore that we actually
561:44 - aren't going to be using very much is
561:46 - its ability to have real-time data in
561:49 - other words I can create a connection
561:50 - between my application and the database
561:52 - and if that data ever changes in the
561:55 - database my application can listen for
561:57 - those changes and without any prompting
562:00 - on my end refresh my user's view so that
562:02 - the data can be real time this is
562:04 - perfect for applications like a chat
562:06 - interface where you want a new chat
562:09 - message that gets pushed to the database
562:10 - to also immediately display on your
562:13 - front end without the user having to do
562:15 - any kind of refreshing of the page
562:16 - however in our case we are not going to
562:19 - be using any of those real-time features
562:21 - from firestore and so I found there is
562:23 - actually a subset of this package
562:24 - Firebase firestore called slash Lite
562:27 - which is a lighter weight version as the
562:29 - name would imply of the full firestore
562:31 - library that allows you still to do
562:33 - reads rights updates and deletes but
562:35 - without including any of those real-time
562:37 - features so because I don't need the
562:39 - real-time feature I'm going to go ahead
562:41 - and use the slash Lite version of this
562:43 - library but if you do feel like you want
562:45 - to play around with the awesomeness of
562:47 - firestore's real-time data then you can
562:49 - just delete this slash light at the end
562:51 - now that we have access to this function
562:53 - called get firestore I'm going to create
562:55 - a database object which I'll be using
562:58 - anytime I need to interface with my apps
563:01 - firestore database and so I will set
563:03 - that equal to get firestore and I need
563:07 - to pass in the app that we just created
563:09 - when I was initializing the app and with
563:11 - that we should be set to start
563:13 - refactoring the fetching functions that
563:17 - are currently reaching out to mirage.js
563:19 - so that it will instead be reaching out
563:21 - to Firebase so that's what we'll be
563:23 - starting on next
563:27 - right from the start I'm going to show
563:29 - you the documentation for firestore you
563:32 - can click the screenshot to go over to
563:33 - the documentation one thing that I
563:35 - noticed as we are using this web version
563:38 - 9 which is more modular is that it
563:40 - includes a lot of nested function calls
563:43 - for example when we want to get
563:44 - documents from a certain collection most
563:47 - of the documentation shows calling this
563:49 - function called git docs and inside of
563:51 - that you pass a call to the collection
563:53 - function and inside of that you pass
563:55 - your database like the one that we
563:56 - created and the name of the collection
563:58 - that you're trying to get this might be
564:00 - completely fine to you maybe this makes
564:01 - perfect sense it makes sense to me but
564:04 - it's still a little bit confusing it
564:05 - also requires a lot of duplicated code
564:07 - where I'm going to be writing collection
564:09 - DB and in our case Vans multiple times
564:12 - so I'm going to do it a slightly
564:14 - different way I'm going to reference my
564:16 - collection in a separate variable so
564:18 - I'll call it maybe Vans collection ref
564:21 - and set that equal to a call to the
564:25 - collection function I'll pass in my DB
564:27 - that that I created and pass in the
564:29 - string Vans before anything else I need
564:32 - to make sure that I pull in the
564:33 - collection function because this is
564:35 - something that comes from Firebase and
564:37 - if you're wondering why this string Vans
564:39 - is here if you remember back a little
564:41 - ways when I was creating the data I had
564:43 - created a collection that I called Vans
564:45 - if I had named it something different I
564:47 - would need to put that different name
564:49 - here now first things first before we
564:51 - move on I lost a lot of hours trying to
564:54 - figure out when I was practicing this
564:55 - why my requests out to Firebase weren't
564:58 - making it all the way to Firebase in
565:00 - fact they weren't even making it to my
565:02 - network tab in my developer tools and
565:04 - the reason as it turns out is because
565:06 - mirage.js was intercepting every request
565:08 - that goes out this makes a ton of sense
565:10 - when you're using Mirage because you can
565:12 - make a regular fetch request in your
565:14 - code and not have to worry about it
565:16 - trying to reach out to a real resource
565:18 - or anything however it did cause me to
565:20 - pull my hair out quite a bit as I was
565:22 - trying to figure out why I couldn't get
565:23 - any data from Firebase but fortunately
565:25 - mirage.js has a really easy function
565:28 - that we can include called this Dot
565:30 - passthrough and we can put any URLs that
565:32 - we want mirage.js to allow outgoing
565:35 - requests to so if you're following along
565:37 - suppose one thing you could do is just
565:39 - delete this import server from your
565:42 - index file or I think maybe a better
565:44 - solution would be to use the this dot
565:46 - passthrough function and just make sure
565:48 - that you include this URL so that any
565:50 - requests out to firestore will make it
565:52 - past the sort of net or sieve that
565:54 - mirage.js puts up okay let's go back to
565:57 - our api.js file and start working on our
566:00 - get Vans function I think what I
566:02 - actually might do here is comment this
566:03 - out as I start working on them and
566:06 - create a new version of it so I'll just
566:08 - export async function get Vans and maybe
566:12 - I'll worry about this ID thing later if
566:14 - I need to something that can be really
566:16 - helpful to understand about Firebase
566:18 - because of those features where it can
566:20 - have a real-time component to it anytime
566:23 - we go to get data from Firebase it calls
566:26 - it a snapshot the reason is if we were
566:28 - to make a request to get the list of our
566:30 - vans and then after we got the data back
566:33 - let's say a tenth of a second later that
566:35 - data were to update somehow the data
566:37 - that we just got from Firebase would
566:39 - technically be outdated so the
566:41 - terminology of snapshot starts to make a
566:43 - lot of sense because it's sort of like a
566:45 - snapshot of the data at that given point
566:47 - in time but with the understanding that
566:50 - it could have changed even perhaps
566:51 - immediately after we finished making our
566:53 - get request to the firestore database so
566:56 - that's just a preference as to why I'm
566:59 - about to name this variable a snapshot
567:01 - so we'll call it query snapshot and that
567:05 - is going to come from a call we'll use
567:08 - the await keyword it's going to come
567:09 - from a call to the function called get
567:11 - docs I need to pass the collection
567:13 - reference that I want to get the
567:15 - documents from and that's going to be
567:17 - our vans collection ref and what we'll
567:19 - come back will not just be an array of
567:22 - documents but instead will be this
567:23 - snapshot of the query of the documents
567:26 - really that just means that it's going
567:27 - to have a bunch of additional metadata
567:29 - about the docs that come back when we
567:31 - take the snapshot so what I'm going to
567:34 - do is take that query snapshot and turn
567:36 - it into a data array that hopefully we
567:39 - can make it so that it mirrors the same
567:41 - data structure that we're already
567:43 - expecting in our component files so that
567:45 - we don't have to go make a bunch of
567:46 - changes to our components so I can do
567:49 - that by mapping over the documents that
567:51 - come back in the query snapshot I can
567:54 - access those by saying I need my equals
567:56 - so we'll say equals query snapshot dot
567:58 - docs and this one is an array of those
568:01 - documents and I can map over that array
568:03 - I'm going to look at each one of the
568:05 - documents in that array and I'm going to
568:08 - return an object and I can just do that
568:10 - in line by surrounding my object in a
568:13 - set of parentheses just so that it
568:15 - doesn't confuse it with me opening the
568:16 - body of this function and I want to
568:18 - include all of the data from the
568:20 - document so I can get that data by
568:22 - saying doc dot data and then calling
568:24 - that as a function and as it turns out
568:26 - this data does not not include the ID of
568:29 - the doc and so I also want to include
568:31 - that as a property here that I specify
568:33 - with doc.id this ID could be something
568:36 - that is generated by firestore when you
568:39 - create your documents or in our case I
568:41 - created this manually so that I could
568:43 - just have the simple IDs of one two
568:45 - three four five and six okay we went
568:47 - through that blazingly fast I guess as a
568:49 - side note it's important to know that
568:51 - I'm going through this Firebase
568:52 - information more as a reference instead
568:54 - of actually teaching it and that's
568:55 - because in the scrimba front-end
568:57 - developer career path we introduce our
568:59 - students to Firebase pretty early on in
569:01 - the career path and much of this has
569:03 - already been taught so I just want to
569:05 - preface why it seems like suddenly Bob
569:07 - is going really fast through this
569:08 - information instead of making me sit and
569:10 - practice it so let's go ahead and
569:12 - console log our data array and then we
569:15 - need to make sure that we also return
569:17 - the data array so that it can be used by
569:20 - any loaders that are calling get Vans
569:22 - now if I try to load up one of my van
569:25 - detail Pages it will probably be broken
569:27 - because the old version of get Vans was
569:29 - able to take an ID and those van detail
569:32 - Pages need to pass in an ID so let's
569:34 - just avoid doing that for now I'm going
569:36 - to go back to my home page and then
569:39 - we'll click the Vans page oh okay well
569:41 - actually this error boundary has been
569:43 - really helpful I called get docs and
569:45 - let's see where was that right here and
569:47 - I forgot to import it so sorry for
569:49 - anybody that was screaming at me to
569:51 - remind me to import that okay let's try
569:54 - saving okay so our vans came in we have
569:56 - our console which is displaying all of
569:58 - the information that we have saved in
570:00 - firestore what's really nice about the
570:02 - way that we have this setup is I didn't
570:04 - have to make any changes to my
570:05 - components or my pages because we had a
570:08 - nice separation of concerns where we had
570:10 - these API functions that are in charge
570:12 - of getting the data that is needed by
570:14 - the pages we can just make changes to
570:16 - those functions and get the data from a
570:18 - different place as long as that data is
570:20 - in the same shape you could say as what
570:22 - we had before everything should just
570:24 - kind of work out the component shouldn't
570:26 - really care how how or where the data is
570:28 - getting fetched from you really should
570:30 - just be taking that data and displaying
570:32 - what it needs to display accordingly
570:33 - okay we still have a bit of work to do
570:36 - because right now if we click into one
570:38 - of these we can see that a bunch of
570:39 - information is missing and that's
570:41 - because we have altered our get fans
570:43 - function it no longer has the ability to
570:45 - take an ID so next we will start working
570:48 - on being able to fetch data on a single
570:50 - document so that we can fix this page
570:55 - in the earlier iteration of our get Vans
570:58 - function we had this one that was a bit
571:00 - overloaded it was able to take an ID and
571:03 - if it had an ID then it would call out
571:05 - to this endpoint and if it didn't have
571:06 - an ID it would call out to this endpoint
571:08 - I'm going to just make an executive
571:10 - decision to split these functions into
571:13 - two separate functions one really good
571:15 - approach when you're creating these
571:16 - functions is to make sure that your
571:17 - function can do one thing and it does
571:19 - that thing really well this will also
571:20 - help with unit testing if we were ever
571:22 - to add unit testing to this project so
571:24 - I'm going to create a new function we'll
571:26 - export the async function we'll call it
571:29 - get van just singular and that will take
571:32 - an ID this does mean that we'll have to
571:34 - go into any files that originally was
571:36 - calling it Vans and passing an ID and
571:38 - instead just update it to say get van
571:40 - and we'll have to import it as well when
571:43 - we have access to an ID and we're
571:44 - reaching out to firestore we really only
571:47 - want to get a single document before we
571:49 - created this Vans collection reference
571:51 - using a collection function that comes
571:53 - from firestore this time we only need to
571:55 - get a single document reference not a
571:58 - whole collection reference so right
571:59 - inside of our get van function I'm going
572:02 - to access that document by using a new
572:05 - function called doc just like how
572:06 - collection was a way for us to get a
572:08 - reference to a collection Doc is a way
572:10 - for us to get reference to a single
572:12 - document so I'll need to import that
572:14 - we'll bring that in right after
572:15 - collection and I will save this as we'll
572:19 - just call it maybe doc ref it's going to
572:21 - be Doc and the dock is going to take
572:23 - three parameters where the collection
572:25 - took two it took the database instance
572:27 - and then the string of the collection
572:29 - that we're trying to get from that
572:30 - database we're still going to take the
572:32 - database we also need the string name of
572:35 - the collection that we're reaching into
572:36 - but then even one level deeper we need
572:38 - to pass the ID of the document that we
572:41 - are trying to get and that's the ID
572:42 - that's coming from our function right
572:44 - here now that we have a document
572:46 - reference we can get a document snapshot
572:48 - maybe I'll call it van snapshot and
572:51 - that's going to come in by calling a
572:53 - function called get doc just like we had
572:56 - get docs in order to get an array of
572:59 - docs I can use get Doc in order to get a
573:01 - single document then just like we did
573:03 - before where I passed the collection
573:05 - reference to get docs I'm going to pass
573:07 - the document reference to get Doc and at
573:10 - this point I think it actually would be
573:12 - helpful for us to do just a little mini
573:14 - challenge so I'll go ahead and type that
573:16 - out
573:17 - okay we have access to our van snapshot
573:19 - and in this case unlike what we were
573:21 - doing with get fans we aren't going to
573:23 - be iterating over an array of documents
573:25 - because we already have access to the
573:28 - one document that we're trying to get so
573:30 - I haven't necessarily taught how to do
573:32 - this but I'm hoping that through some
573:34 - inference looking at our function up
573:36 - here or if you would really like to you
573:38 - can go to the Firebase documentation to
573:40 - solve this Challenge and figure out what
573:42 - we need to return from the getvan
573:44 - function and as a part of that you'll
573:46 - have to go over to the van detail page
573:47 - and switch it so that it uses this get
573:49 - van function instead of the other get
573:52 - vans that it's currently using okay so
573:54 - pause now and work on this challenge
574:02 - what we had to do before was iterate
574:04 - over the array of documents and take
574:06 - each one of them and return this object
574:08 - here which has all of the data from the
574:11 - document and then it separately gathered
574:13 - the ID from it as well since for some
574:15 - reason the ID property of the document
574:17 - is not included in the data of the
574:19 - document well in our case we don't need
574:21 - to iterate over an array we can simply
574:23 - return the object that has all of the
574:27 - values from the van snapshot and rather
574:29 - I should say all of the values of the
574:31 - data portion of the van snapshot and
574:34 - then we will also create an ID for it
574:36 - which will be van snapshot dot ID this
574:39 - should put it in so to speak the same
574:41 - shape as what the original get Vance was
574:44 - doing before at least we'll hope so so
574:46 - let's go over to our let's see where is
574:49 - it van detail we're going to pull in in
574:51 - this case we don't need the get Vans
574:53 - anymore we're just going to do get van
574:55 - and then we'll need to make sure to
574:57 - change it in our loader and actually I
574:59 - think that might be it let's see we're
575:01 - already on the vanity tail page Let's
575:03 - cross our fingers and hit refresh
575:05 - and hmm then snapshot.data is not a
575:08 - function I bet someone else has already
575:11 - seen what I did wrong here we need to
575:13 - use await get doc okay let's try again
575:16 - super close awesome there we go I should
575:19 - be able to go back to all Vans and go
575:21 - into a different one perfect
575:24 - I guess while we're at it let's get rid
575:25 - of this console log up here we'll clean
575:27 - up the challenge and we can actually get
575:29 - rid of our old function as well
575:32 - okay now let's go back to our host pages
575:34 - and we will change our functions so that
575:36 - we're getting vans from Firebase instead
575:39 - of from our fake server
575:44 - let's switch over our get host demands
575:46 - to pull from Firebase instead of from
575:48 - our mirage.js server now you might
575:50 - remember over in server.js our get fans
575:53 - or our host fans is just hard coding the
575:56 - host ID of one two three since we're not
575:58 - dealing with authentication right now
576:00 - I'm going to do essentially the same
576:01 - thing but this time we'll be pulling it
576:03 - from Firebase instead of from mirage.js
576:05 - so in our api.js file what we are going
576:08 - to write will be very very similar to
576:11 - what we have in get vans so I'm going to
576:13 - copy that function and bring it down
576:15 - here and then I'll rename it get host
576:17 - Vans and comment out the code we have in
576:20 - the existing get host Vans and for now
576:22 - we also are not going to overload this
576:24 - the way we were before where it was
576:26 - taking an ID so we'll just forego
576:28 - putting an ID here in the parameter list
576:29 - now one thing to know about grabbing
576:31 - data from Firebase if you are trying to
576:34 - get the entirety of a collection then
576:36 - you can just pass the Vans collection
576:38 - reference that we created up above right
576:40 - here you can pass that to the get docs
576:43 - function and it will just get all of the
576:44 - documents from that collection however
576:46 - if I only want to grab certain of the
576:48 - documents from that collection then I
576:50 - need to create something that's called a
576:52 - query don't let that be confused with
576:54 - the query snapshot that we had before in
576:56 - fact we might be better off calling this
576:58 - something like van collection snapshot
577:00 - but just for legacy Reasons I'm going to
577:02 - leave it as query snapshot and maybe for
577:04 - now I'll just call it Q to mean my query
577:06 - and we can call a new function that's
577:08 - called query so we'll go up to the top
577:11 - here I'm going to put these on their own
577:13 - lines
577:14 - and bring in query and query is going to
577:19 - take let's see where are we down here
577:21 - query this function is going to take
577:23 - first The Collection reference that we
577:25 - want to filter through and secondly some
577:28 - kind of filtering operation and this
577:30 - filtering operation is going to come
577:32 - from yet another function that we pull
577:34 - from Firebase called where so let's go
577:36 - ahead and pull in where and you'll see
577:39 - why it's called where in just a second
577:41 - because when we're calling it we are
577:43 - going to provide three different
577:45 - parameters the first parameter will be
577:47 - one of the properties of our documents
577:49 - in our case we have a property called
577:51 - host ID and so it's saying where the
577:53 - host ID and then the second parameter is
577:56 - going to be some kind of equality
577:57 - operation in my case I want to say that
578:00 - the host ID is equal to and in Firebase
578:02 - we'll just use a double equals I don't
578:04 - know that they have the same conventions
578:05 - that JavaScript has with the triple
578:07 - equals so in the docs they talk about
578:09 - using a double equals so where the host
578:11 - ID is equal to and then we provide some
578:14 - kind of value in our case like I
578:15 - mentioned we're going to hard code this
578:17 - to the host ID of one two three so you
578:19 - can see why it's called where it's kind
578:21 - of like an English sentence where the
578:23 - host ID is equal to one two three I know
578:25 - that the Syntax for this is admittedly a
578:28 - bit strange but that's just how it is in
578:30 - Firebase and what we've been
578:31 - constructing here is a query object that
578:34 - we called q and that will allow us to
578:36 - filter documents out of the van
578:38 - collection so instead of getting the
578:40 - entire van collection we're going to
578:41 - pass our new Q variable or our query
578:43 - that we just constructed to get docs at
578:46 - that point everything else should
578:47 - essentially be the same we're going to
578:49 - receive an array of data we're going to
578:51 - Loop over it change the shape of that
578:53 - data so that it fits the way that we
578:55 - need it to fit and I think we should
578:57 - just be able to hit save and see
578:59 - everything kind of just work the way it
579:01 - was before in fact it's a little bit
579:03 - difficult to tell that it's working at
579:04 - all let's just make sure this is the
579:06 - code that's running we'll just you know
579:08 - Firebase at it in our console okay well
579:10 - that's running so great we can go ahead
579:13 - and get rid of this this old version of
579:16 - the function and because we have the
579:18 - same name it should just work however
579:20 - the function that we just deleted that
579:22 - we had commented out is what is
579:24 - controlling the detail page so this is
579:26 - what we're going to fix next
579:30 - just for the sake of completion we're
579:33 - just going to take a look at the
579:34 - instance where the host wants to get a
579:37 - single van now because we're not using
579:39 - real authentication we're not actually
579:41 - going to be able to make it so that only
579:43 - the logged in user can access their Vans
579:46 - remember we're currently hard coding
579:48 - that the get host fans is coming from
579:50 - one two three if I were to change this
579:52 - for example to 456 and hit refresh our
579:55 - host fans will show reliable red because
579:57 - in the database reliable red has the
580:00 - host ID of 456 and apparently no other
580:03 - Vans do because we're also pulling from
580:05 - get host fans on our dashboard by
580:08 - changing it here in our api.js file it
580:10 - also updates our dashboard at the bottom
580:12 - when we have your list advance but the
580:14 - problem is when we go to the detail page
580:16 - of these vans so I think if I click view
580:20 - we can see that the van information is
580:22 - not coming in currently originally git
580:24 - host Vans had the ability to take an ID
580:27 - but with Firebase if we are trying to
580:29 - get a single document that also is
580:31 - ensuring that the currently logged in
580:33 - user is the only one that's able to see
580:34 - it then we would have to set up some
580:36 - security rules inside of the Firebase
580:39 - console in order to ensure that we were
580:41 - only getting Vans at the currently
580:43 - logged in user was allowed to see since
580:45 - we're not dealing with authentication
580:46 - and really not bothering with some
580:49 - really stringent security rules what I'm
580:51 - going to do is simply go to my host van
580:53 - detail page and instead of pulling in
580:56 - get host Vans I'm just going to pull in
580:58 - get van as this will allow us to pass
581:01 - the ID and I guess I'll need to change
581:03 - it down here as well that way this page
581:05 - will get fixed again of course the
581:08 - problem is that anybody could go to this
581:10 - page and see this information because
581:12 - we're using a more public version of
581:14 - this get van function that doesn't
581:16 - really care what the currently logged in
581:18 - user is for us right now this isn't a
581:20 - big deal because we don't actually have
581:22 - any edit functionality in our app at
581:25 - this point anyway so it doesn't really
581:27 - matter somebody could just come up here
581:29 - and change the url to instead of host
581:31 - fans 3 they could maybe say host fans
581:33 - five and come to that page but again
581:36 - there's no edit access so it's not that
581:38 - big of a deal
581:42 - and that does it folks we are here at
581:45 - the end of the react router course
581:47 - congratulations great job on all of the
581:50 - challenges that you did all the quiz
581:52 - questions that you answered and in the
581:54 - end this amazing app that you had a
581:55 - chance to build by following this
581:57 - curriculum hopefully this gives you a
581:59 - really great appreciation for react
582:01 - router and just the concept of
582:02 - client-side routing in general there's a
582:04 - ton more that you could be learning but
582:06 - I think this would be a perfect time to
582:08 - head over to the scrimba Discord server
582:10 - and post something in the today I did
582:12 - Channel you can click the link to the
582:14 - screenshot here that will take you over
582:16 - to the Discord server and just let
582:18 - people know that you completed the react
582:19 - router 6 course and that you completed
582:21 - all of the challenges along the way so
582:23 - what comes next well as I mentioned
582:25 - multiple times we don't have real
582:27 - authentication in this app the main
582:29 - reason is because that would have taken
582:30 - us on quite a bit of a detour that I
582:33 - wasn't quite ready to do as a part of
582:34 - this curriculum but that would be a
582:36 - great thing for you to spend some time
582:38 - on just learning how to add real
582:39 - authentication another thing you could
582:41 - do is just to figure out a project that
582:43 - you are intrinsically interested in and
582:45 - build something completely unique now
582:47 - that you have the knowledge that you
582:49 - need to do client-side routing inside of
582:51 - an app the world is completely open to
582:53 - you another idea and this is a little
582:55 - bit far-fetched but you could try to
582:57 - build this van Life app again completely
582:59 - from scratch entirely on your own it
583:02 - might sound mundane when I say it like
583:04 - that but the truth is that would be one
583:06 - of the best things you could do to
583:07 - solidify all of the information that we
583:09 - just learned even if you ended up
583:11 - building it in a fairly different way
583:13 - than what we did together that's
583:14 - completely okay it would be a great
583:16 - learning experience nonetheless another
583:19 - idea and this is a bit of Shameless
583:21 - self-promotion but since you have made
583:23 - it here to the very end of this course I
583:25 - assume that you enjoy to some degree my
583:27 - teaching style and I apply all of my
583:29 - same pedagogy including tons of
583:31 - practices quizzes and project building
583:34 - over in my Advanced react course on
583:36 - scrimba the advanced react course does
583:39 - require a scrimba pro membership and it
583:41 - is part of the front-end developer
583:42 - career path which is tailored to helping
583:45 - people go from knowing absolutely
583:47 - nothing in web development all the way
583:49 - to being prepared for interviewing for
583:51 - their very first jobs and lastly you've
583:53 - heard me make the parallels a lot
583:55 - between react router and the remix
583:57 - framework I can highly recommend the
583:59 - remix framework it's a great way to dip
584:01 - your toes into full stack web
584:03 - development one of the greatest things I
584:05 - think about the remix framework is that
584:07 - their Mantra is to rely on the native
584:09 - web platform and so for me personally as
584:12 - I have been learning remix I have
584:13 - learned so many new things just about
584:16 - Native web that I feel like I probably
584:18 - should have known at this point in my
584:20 - career so feel free to check out the
584:22 - remix framework if you'd like to dive
584:24 - into a full stack framework I have been
584:26 - your instructor Bob zarol I'm most
584:28 - active these days on Twitter if you want
584:30 - to tweet at me or DM me you're more than
584:32 - welcome to you can click on the at Bob's
584:34 - role link here or on the Twitter icon to
584:36 - take you to my Twitter profile and with
584:38 - all of that said congratulations on
584:40 - finishing this course