00:00 - John smilga teaches this course about
00:02 - the Practical applications of typescript
00:05 - typescript is a strongly typed
00:06 - programming language that builds on
00:09 - JavaScript this is an excellent course
00:11 - for people who want to learn typescript
00:14 - hey what's up it's John from coding anic
00:16 - and welcome to practical typescript
00:17 - course we all focus on practical
00:20 - applications of typescript so you can
00:22 - start using it effectively in your
00:24 - projects right away during the course
00:27 - we'll cover everything from setting up
00:29 - your development environment to
00:31 - deploying your typescript applications
00:35 - the course consists of three major parts
00:38 - first part typescript fundamentals where
00:41 - we'll explore basic types interfaces
00:44 - classes generics and rest of the good
00:47 - stuff second part react and typescript
00:51 - where we'll integrate typescript into
00:53 - react projects create typed components
00:56 - and manage state with typescript and the
00:59 - third part
01:00 - is where we'll put our typescript
01:02 - knowledge to good use and build a modern
01:05 - store application with typescript shat
01:08 - UI and react router if you wish to
01:11 - explore all of the features of the store
01:13 - project it's located at this URL
01:17 - typescript comy sloth ny. apppp again
01:21 - the URL is typescript comy sloth ny.
01:26 - apppp quick sign not during this video
01:28 - will only cover Parts one and two so if
01:32 - you enjoy the content and wish to work
01:34 - on the big project as well consider
01:36 - enrolling in the full Course located at
01:40 - coding addict IO again the full course
01:42 - is available at coding addict IO okay
01:46 - and first let's recap that JavaScript is
01:49 - considered Loosely or dynamically typed
01:53 - because variable types are determined at
01:56 - runtime and can change as the program
02:00 - executes this means you don't have to
02:04 - declare the type of the variable when
02:06 - you create and variable can hold values
02:09 - of different types at different times so
02:12 - the following code is a valid JavaScript
02:15 - code however where are we going to
02:18 - encounter an error if we try to run this
02:21 - code correct at runtime and this is
02:24 - manageable if you have few lines of code
02:26 - but the bigger the project the more
02:28 - challenging it will be
02:30 - to spot such technically innocent bugs
02:34 - and this is where typescript enters the
02:36 - picture because it is a programming
02:39 - language that builds on JavaScript by
02:42 - adding static typing this means you can
02:46 - specify things like types of variables
02:49 - function
02:50 - parameters return values and some other
02:53 - things to help catch errors early and
02:57 - improve the code quality it is a super
03:00 - set of JavaScript so yes all the
03:03 - JavaScript code is also a valid
03:06 - typescript code now one way to think
03:08 - about it is as follows by using
03:11 - typescript in our project we'll still
03:13 - write the JavaScript we already know but
03:17 - with some elements or sprinkles of
03:19 - typescript and these elements will act
03:23 - as safeguards or constraints to help us
03:27 - catch potential errors more quickly and
03:30 - without the need for 10,000 console logs
03:35 - when we introduce typescript to our
03:37 - project we will write our app in the TS
03:41 - or in the case of react in the DSX file
03:46 - there will be a compile or transpile
03:49 - step where all of the typescript code is
03:52 - transpiled to good old JavaScript code
03:55 - and at the end since it is a vanilla
03:59 - JavaScript code we can run it anywhere
04:02 - quite often you'll hear people say
04:04 - something along the lines of well once I
04:07 - built my first project with typescript
04:09 - it was very hard to go back and build
04:12 - with just vanilla JS and even though I
04:15 - was also very skeptical of such
04:17 - statements I can verify that it was the
04:20 - same in my case yes typescript still has
04:23 - learning curve and yes it involves more
04:26 - work but at the same time you'll notice
04:29 - how how you're able to fix bunch of the
04:31 - errors quickly at build time without
04:34 - running around like a headless chicken
04:36 - before we set up a brand new typescript
04:38 - project I want to mention a few useful
04:40 - things if you're confused about some
04:43 - topic or simply want to research a
04:45 - concept in more detail a good place to
04:47 - start is typescript docs which are
04:50 - located at typescript l.org again the
04:54 - URL is typescript l.org also in there
04:58 - under the playground tab you will find a
05:02 - Nifty code sandbox or typescript
05:05 - playground which I might utilize from
05:07 - time to time during the course to
05:10 - underscore some particular point it
05:13 - works as follows on the left side we
05:16 - write a valid typescript code and we get
05:19 - back the resulting JavaScript code now
05:23 - you won't be able to build the entire
05:25 - project in there but it is a very cool
05:28 - option if you you quickly want to test
05:31 - something as far as the code editor I'm
05:34 - going to use VSS code and since it's
05:37 - practically an industry standard these
05:40 - days my assumption is that you'll use
05:42 - the same one since I record courses I
05:46 - use the very basic default theme and
05:49 - when it comes to my extensions I will
05:51 - mention some useful ones once there is a
05:54 - need during the course in order to work
05:57 - with typescript you will need no
05:59 - installed on your machine again
06:02 - something I assume you already have done
06:05 - but if it's not the case please visit
06:07 - nodejs.org again the URL is nodejs.org
06:11 - pick your operating system and follow
06:15 - the install steps also during the course
06:17 - I'm going to reference the main course
06:20 - repo where you'll find source code
06:22 - challenges notes useful references and
06:26 - tons of other useful stuff so I highly
06:30 - suggest getting a hold of the repo
06:32 - before you continue with the videos just
06:35 - look for my GitHub profile and under the
06:38 - repos search for typescript course
06:42 - repository there are few ways how we can
06:44 - add typescript to our project since it's
06:47 - available as an npm package we can
06:50 - install it globally or on the per
06:53 - project basis set up the configuration
06:56 - and run the compile step manually the
06:59 - this is definitely an option but we're
07:01 - going to take a different approach which
07:04 - is going to
07:06 - be pre-built template because at this
07:09 - point at least in my opinion it's a more
07:12 - realistic scenario chances are whether
07:15 - you want to build a nextjs or remix or a
07:19 - good old react app there will be already
07:22 - a template that contains the technology
07:25 - you want to use as well as types
07:27 - configuration so more often than not
07:30 - your job will be to write a valid code
07:33 - instead of losing your sleep over
07:36 - correct configuration setup for this
07:39 - course I picked V since it's one of the
07:41 - most popular build tools out there but
07:43 - please keep in mind as far as the
07:46 - typescript logic is concerned it's the
07:49 - same if for example you're going to use
07:51 - nextjs with a typescript template now we
07:55 - want to run one command in order to set
07:58 - up our template and I'll show you two
08:01 - places where you can get the command
08:03 - First Option you can navigate to V docs
08:07 - which are located at bejs
08:11 - dodev then click on getting started and
08:15 - pretty much you're looking for this
08:16 - command and then we just need to pick
08:18 - the template and since my npm version is
08:22 - bigger than seven I'm going to run my
08:26 - command with the Double
08:28 - Dash now as you can see we have tons of
08:32 - templates available and the idea is
08:35 - following we go with npm create V latest
08:39 - then project name then Double
08:43 - Dash go with the template one and pick
08:46 - the template as you can see we can go
08:49 - with reacts as a say not something we're
08:52 - going to use in the part two and three
08:56 - we can also for example set up The View
09:00 - with typescript and we're actually going
09:03 - to start the course with vanilla
09:07 - typescript template so this is just
09:09 - going to be an application built with
09:11 - vanilla JavaScript we're not going to
09:13 - use react and uh to tell you honestly we
09:16 - don't really care about the template we
09:19 - just want to use it in order to learn
09:21 - typescript so pretty much most of the
09:25 - first part of the course will spend in
09:27 - one file and you'll see what I'm talking
09:29 - about in a second now remember in the
09:33 - previous video I mentioned the main
09:35 - course
09:36 - repo navigate over here and then look
09:39 - for typescript tutorial and under this
09:43 - directory look for read me and here
09:46 - you'll right away get the command and as
09:49 - a this is something that I'm going to
09:52 - copy in literally a few minutes and I
09:55 - suggest actually doing the same because
09:57 - in here again you'll find find all of
09:59 - the notes and challenges and all that
10:02 - cool stuff so if you want to save
10:05 - yourself time on typing just navigate
10:07 - over here and grab the command again npm
10:10 - create V at latest then at least in my
10:14 - case the project name is going to be
10:15 - typescript then double dashes then
10:17 - template and we're going to go with
10:20 - vanilla DS so let me grab the
10:23 - command let me navigate I guess to
10:28 - desktop and and I'm going to zoom
10:31 - in then let me set up my
10:34 - command and once I have successfully
10:36 - installed the project on my machine I
10:39 - want to open up my text
10:41 - error drag and drop the folder and next
10:45 - we'll take a look at the files and
10:47 - folders available in this template as
10:50 - far as the files and folders we've got
10:53 - over here a public one so this is where
10:56 - we can place the public assets then we
10:58 - have a S one essentially this is where
11:01 - we'll do all of our work a get ignore
11:04 - where we specify which files are going
11:06 - to be ignored by The Source control then
11:10 - index HTML which is actually going to be
11:13 - our homepage also a package Json
11:17 - something we're going to cover in more
11:20 - detail in a few minutes and also a TS
11:23 - config which we'll cover in Greater
11:26 - detail later on in the course and before
11:29 - we take a look at the specific
11:32 - files and cover the build step here are
11:36 - a few things I want to do first since
11:39 - it's a node application we do want to
11:42 - install the dependencies so effectively
11:45 - just open up the integrated terminal and
11:48 - run npm install now also again I highly
11:53 - suggest getting the readme since in my
11:57 - opinion you will find find it super
11:59 - useful as you're following
12:02 - along so just navigate back to the
12:06 - project and somewhere create a read me
12:09 - markdown one and just paste the contents
12:12 - over here save it and once we install
12:16 - dependencies now we also get the node
12:18 - modules so this is where all of our
12:21 - dependencies are located then we want to
12:25 - go with npm run Tav which is going to
12:29 - spin up our project in local development
12:32 - and we're looking for Local Host
12:35 - 5173 and this is what we should see on
12:37 - the screen so essentially there's some
12:40 - images over here a text as well as the
12:43 - counter now if I'm being perfectly
12:45 - honest like I mentioned previously we
12:48 - really don't care about the actual
12:50 - vanilla JS application I believe towards
12:53 - the end of the first part of the course
12:56 - yes we will build a tiny app but most of
13:00 - our time we'll spend over here in a
13:02 - source one in one specific file called
13:06 - tutorial DS where effectively we will
13:10 - just learn all the typescript
13:14 - fundamentals now if we take a look at
13:16 - the package Json we see that we have the
13:18 - dev one this is the command we just
13:22 - invoked and also there's a build one now
13:25 - before we run
13:26 - build I do want to create a file and
13:30 - showcase how our setup is going to look
13:33 - like now one interesting thing that I do
13:36 - want to point out notice how before the
13:38 - build command they actually invoke
13:43 - tsnc so notice how typescript is a Dev
13:47 - dependency so before the project is
13:50 - built first it's compiled so that's the
13:53 - step I mentioned previously where we're
13:55 - going to write all of our code in the
13:58 - files with Ds extension and once we
14:02 - perform the build step it's going to
14:04 - spit out the vanilla JavaScript code so
14:09 - if we take a look at the index HTML like
14:11 - I said this will be our homepage so for
14:14 - example if you want to change the title
14:16 - it's definitely an option then they have
14:18 - over here this div with an ID of app and
14:23 - effectively in a second you'll see how
14:26 - in the main DS they in
14:29 - Jack the images the divs and all that
14:33 - into this app one so now let's navigate
14:36 - to the main DS in here they import
14:39 - styles again something we're not really
14:41 - concerned with also two images the
14:44 - typescript one and V1 and also a counter
14:48 - and then they
14:49 - select div with an ID of app and like I
14:54 - said they dynamically inject the
14:57 - elements into the d as you can see there
15:01 - are some already sprinkles of typescript
15:03 - and essentially this is something that
15:05 - we're going to cover during the first
15:09 - part of the course but most of the logic
15:13 - should look very familiar correct
15:15 - because this is straight up JavaScript
15:18 - again with just sprinkles of typescript
15:21 - now if we take a look at the counter
15:22 - it's going to be same idea this is
15:24 - straight up JavaScript with the only
15:26 - difference that now we're looking for
15:28 - element and actually we specifically say
15:30 - that the type is going to be HTML button
15:34 - element now how is our setup going to
15:37 - look like since I said that I mean we
15:39 - really don't care about this code and to
15:42 - tell you honestly we're not actually
15:43 - going to look too much in a browser
15:46 - either most of the time will spend in
15:48 - the error well in here in the source I
15:51 - want to create a new file in my case I'm
15:54 - going to call this tutorial TS the name
15:57 - is totally up to you just make sure that
16:00 - you add the TS extension so we're going
16:03 - to go over here with tutorial then TS we
16:06 - create a new file and for now I just
16:09 - want to log just so I can see that
16:11 - everything works and I'm going to go
16:12 - with typescript and then tutorial let me
16:16 - save it and then in order for this code
16:20 - to run we just want to navigate to Main
16:23 - TS and we just want to import a file
16:25 - that's it we're not going to do anything
16:28 - else we'll simply go with import and now
16:31 - we're just looking for our TS file so
16:35 - tutorial and TS and the moment we do
16:37 - that once we navigate to the browser if
16:40 - everything is correct we should see that
16:42 - console
16:43 - log and if that's the case we are in
16:46 - good shape and before we move on to
16:48 - typescript fundamentals let me show you
16:52 - the result of the build step again let's
16:56 - just recall that before V our build tool
17:01 - builds the production ready application
17:04 - it's actually going to compile our code
17:08 - which essentially just means that all of
17:11 - the typescript elements we're going to
17:13 - have in our code are going to be
17:16 - transpiled to good old vanilla
17:20 - JavaScript and essentially during this
17:22 - video I just want to showcase that so
17:25 - don't worry about the code I'm going to
17:27 - write in fact you don't have to follow
17:30 - along I just want to showcase the end
17:33 - result so let's say if we're going to
17:36 - add something typescript for example
17:39 - interface of course something we're
17:41 - going to cover during the first part of
17:44 - the course and I'm going to go with name
17:47 - String and ID number and as a sign note
17:52 - essentially it's just a shape of an
17:54 - object and then I'm going to create the
17:57 - object and I'm going to go with some
18:00 - value so add the type over here and now
18:03 - I just need to provide name which has to
18:06 - be a string now so I'm just going to go
18:09 - with random and comma and then we're
18:12 - going to go with ID and then one two 3
18:14 - and then let's also log so let's go with
18:18 - some object so once we navigate right
18:22 - now to a terminal we have few options if
18:26 - you want you can always stop the dev
18:30 - server and essentially you do that with
18:33 - contrl C or you can just open up a new
18:37 - terminal window and that is going to be
18:39 - my Approach so essentially now I want to
18:41 - go with npm and not Dev but we're
18:45 - actually looking for build so we run
18:48 - this command if we don't have any
18:50 - typescript
18:52 - errors we're going to be successful and
18:54 - now notice we have this this folder so
18:58 - this is our production ready application
19:00 - we still have index HTML okay everything
19:04 - is beautiful and then in the assets
19:07 - we'll have the index JS so this is
19:09 - essentially our application in vanilla
19:12 - JS and if we take a look at our code so
19:16 - notice I have this console log
19:17 - typescript tutorial so I clearly know
19:20 - that it's coming from our file notice
19:24 - there is no interface anymore again
19:27 - there is some kind of minified object
19:31 - over here and effectively we also conso
19:34 - log it that's it so there is no
19:36 - interface there is no type string or
19:38 - type number or in fact any of the other
19:41 - stuff that we have here as far as the
19:44 - typescript elements so again essentially
19:48 - we'll write all of our logic in files
19:51 - with Ds or DSX extension if we're
19:54 - working with react and then once we
19:57 - build our project
19:59 - we're going to get back our good old
20:02 - vanilla JavaScript code which
20:03 - essentially we can run anywhere so
20:06 - hopefully it's clear what's happening
20:08 - during the build process so now let me
20:11 - clean up our project first I want to
20:13 - remove the disc folder then also I'm
20:16 - going to remove my second terminal
20:19 - window and at the very end I just want
20:21 - to remove this code from tutorial yes so
20:26 - this is going to be our starting point
20:28 - essentially we have console log in
20:31 - tutorial DS and if we take a look at the
20:36 - browser we should see over here
20:38 - typescript tutorial and if you have the
20:40 - same result now we can move on to the
20:43 - next task okay and let's start our
20:45 - typescript journey by discussing type
20:48 - annotations which allow us to
20:51 - specify the variable type so let's say
20:55 - in my project I have a variable by the
20:58 - name of awesome name and if you have
21:00 - watched any of my courses and tutorials
21:03 - you know that the most awesome name ever
21:04 - is shake and B since I'm working in a
21:08 - typescript project I can actually
21:12 - explicitly set up the type and the
21:14 - syntax is following we go with colon and
21:18 - then since I want this to be a string I
21:21 - type string now there are quite a few
21:24 - types and I'm not going to list all of
21:27 - them I really find it pointless
21:30 - essentially the most straightforward
21:31 - ones are string number and Boolean and
21:35 - again the syntax is going to be the same
21:37 - so we just go over here with the colon
21:40 - and then the type and of course as we're
21:43 - working through the course we'll get to
21:46 - know the other types as well and the
21:49 - moment I set this type for my
21:52 - variable I get two things out of the box
21:56 - essentially it can never be something
21:58 - something else so I can go to the next
22:01 - line and set it equal to a function and
22:04 - also I'll WR way get the methods that
22:10 - are associated with this type so in this
22:13 - case it's going to be a string so just
22:15 - to demonstrate that if I go to the next
22:18 - line and if I set it equal to a value of
22:22 - something this is still valid why well
22:26 - because type is string so everything's
22:28 - correct correct also I can go to next
22:31 - line and set it equal to awesome Dot and
22:35 - notice right away I get only the methods
22:39 - that are
22:40 - associated with the typ string which
22:43 - again is super awesome because
22:46 - essentially I avoid some unnecessary
22:49 - bugs so in this case I'm just going to
22:51 - go to application and now if I log this
22:55 - value if I go with awesome name and take
22:58 - a look at my console if everything is
23:00 - correct should be equal to a something
23:03 - so we set it equal to different string
23:06 - value and then we ran the two uppercase
23:10 - method now one thing we canot do is
23:12 - something like this where I go with
23:14 - awesome name and set it equal to 20
23:17 - which is a different type so notice
23:19 - immediately typescript starts yelling at
23:21 - me type number is not assignable to a
23:25 - type string and I want to repeat the
23:28 - same thing for the number as well as the
23:31 - bullion so just so it's clear we're
23:34 - going to start with some kind of
23:36 - variable in my case I'm going to go with
23:38 - amount I'll set it equal to a number and
23:42 - again I can do anything that's allowed
23:46 - with the numbers for example and set
23:48 - equal
23:50 - amount 12 minus 1 something like that
23:53 - but cannot set amount equal to pens
23:58 - that's not going to work right away
24:01 - typescript is going to be super helpful
24:03 - it's going to say Hey listen you said
24:05 - this is going to be the number so yeah
24:08 - you can run the number methods you can
24:11 - do calculations but you cannot just
24:14 - reassign it to something else lastly
24:17 - let's take a look at the Boolean pretty
24:19 - much same
24:20 - deal we're going to go with is awesome
24:23 - we're going to add a colon set up a
24:26 - Boolean type for Star it's going to be
24:29 - true then we're going to set is awesome
24:33 - equal to false and then let's try to set
24:36 - it equal to shake and bake again the
24:38 - most awesome name ever so we're going to
24:40 - go with is
24:42 - awesome and let's go with shake and bake
24:46 - again cannot do it because the type is
24:50 - bulling and essentially in the process
24:53 - we're just avoiding this entire
24:55 - debacle where initially it can be one
24:58 - value then three lines later it's
25:00 - something else and then we're turning
25:02 - into a third thing and then start
25:04 - running some methods on it
25:06 - essentially this is static so now we say
25:10 - Hey listen this is going to be string
25:12 - and string only same goes for number
25:14 - Boolean and in the process we just avoid
25:17 - bunch of unnecessary bugs that come from
25:20 - typos that come from just using wrong
25:23 - methods and that sort of thing and
25:26 - before we work on our first challenge
25:28 - let me quickly mention something
25:31 - typescript is actually really smart and
25:33 - can infer the type of the variable based
25:37 - on the values when it's defined now the
25:40 - fancy name is type inference but
25:43 - essentially for us it just means that we
25:46 - can remove all of these type annotations
25:50 - and we'll still get all of the goodies
25:53 - that I covered in a previous video so
25:56 - now if I hover over the awesome name
26:00 - notice how based on the value when the
26:02 - variable was defined typescript can
26:05 - nicely infer the type so in this case
26:08 - it's string then it's the amount and
26:10 - then when it comes to is awesome
26:13 - typescript knows that it's a Boolean now
26:17 - don't dismiss the type annotations we're
26:20 - still going to use them but most likely
26:22 - not for such straightforward variables
26:25 - type inference also has some gotas
26:28 - especially when we start working with
26:29 - more complex values so yes typescript is
26:33 - always going to try to help you when it
26:35 - comes to functions when it comes to
26:37 - variables it will try to kind of get the
26:40 - type based on the value and obviously
26:43 - it's super awesome because it saves us
26:45 - time notice I don't have to go to Every
26:48 - variable and just make sure that the
26:51 - type is set but there are some
26:53 - questiones we need to aware of and don't
26:56 - dismiss type annotations because we're
26:57 - still going to use them throughout the
27:00 - course just not four variables like this
27:03 - okay and now it's time for our Challenge
27:06 - and since it's our first one I will
27:08 - cover the steps as well but with the
27:11 - future challenges just so we can save
27:14 - little bit of time I will most likely
27:17 - right away start working on the solution
27:20 - also since it's our first one it's going
27:22 - to be extremely
27:24 - straightforward I just wanted to get the
27:26 - ball rolling just so we get used to this
27:29 - idea that we learn some stuff and then
27:31 - we work on some kind of challenge so I
27:34 - want you to create a variable of type
27:36 - string and try to invoke a string method
27:39 - on it then same is going to be with a
27:42 - number create a variable and try to
27:45 - perform a math operation also I want you
27:48 - to create the Boolean one and perform
27:51 - The Logical
27:52 - operation and then try to just assign
27:57 - some values to those
28:00 - variables that are different types so
28:04 - just try to come up with something that
28:07 - shouldn't supposed to work and see
28:10 - whether typescript complains about it
28:13 - now you can use the type adaptation or
28:17 - you can also use the type inference
28:20 - that's totally up to you again super
28:24 - straightforward challenge where just
28:27 - want to navigate to tutorial I want to
28:29 - come up with some kind of variable for
28:33 - my string in my case I will use the type
28:36 - annotation don't ask me why just think
28:39 - that it's going to be better in this
28:42 - case so I'm going to go with hello and
28:44 - then let's go with
28:46 - typescript okay beautiful then let's run
28:51 - the two oper case so greeting is equal
28:54 - to greeting dot then two uppercase let's
28:58 - invoke this this should work we should
29:01 - have no issues and as long as I don't
29:03 - have the red squiggly lines I'm good to
29:05 - go so typescript is not yelling at me
29:09 - then also let me set up the age so in
29:12 - this case it's going to be a number I'm
29:14 - going to set it equal to 25 then let me
29:18 - add a five to it okay also works
29:22 - everything is beautiful and then we want
29:24 - to go with is adult so that's my Boolean
29:29 - let's add a type annotation here AG is
29:33 - let's say bigger or equal to 18 now this
29:36 - should be true and you know this is the
29:39 - case where I will log it so let's see is
29:42 - adult is true yep that's the one so now
29:45 - let me just set it equal to the opposite
29:48 - I'm going to go with his adult is equal
29:51 - to opposite is adult again let's log it
29:55 - and now it's going to be false and and
29:58 - then somewhere here let me just try to
30:01 - set the greeing equal to 10 that
30:04 - shouldn't work also we can go with age
30:07 - and set it equal to 30 so string again
30:10 - we're going to get the error and lastly
30:13 - we have the is adult and I'm just going
30:15 - to set it equal to yes and as you can
30:17 - see all of them result in errors so
30:21 - again we have one type and typescript is
30:24 - not happy when we just randomly decide
30:26 - that our variable is going to be of
30:30 - different type all right and before we
30:32 - continue with tutorial let me show you
30:35 - something interesting about the setup
30:37 - you see even though we have these
30:40 - typescript errors over here we're going
30:43 - to be able to run our project locally so
30:48 - what am I talking about well if I go
30:50 - here and set up the console and log and
30:55 - in my case I'm just going to look for
30:57 - all three values So reading age and is
31:01 - adult if we navigate to a console you
31:05 - can see first of all that all of the
31:07 - variables have the values that they're
31:09 - not supposed to so typescript is
31:12 - complaining but it's still works and
31:15 - also notice how our project didn't crash
31:18 - we're just getting these typescript
31:21 - errors correct so here's the deal when
31:25 - we're working with typescript actually
31:28 - project is going to work even with the
31:30 - errors locally but whenever we want to
31:33 - host a project what do we need to do
31:35 - well we need to build it that's usually
31:38 - the setup and in order to build it we'll
31:41 - have to pass the typescript checks so if
31:46 - we try to build with typescript errors
31:48 - we're going to fail and as a result we
31:51 - won't be able to host the project let me
31:55 - show you the package Json notice over
31:57 - here
31:59 - so we have Dev command which essentially
32:01 - just spins up the dev server and we also
32:04 - have the build command and remember
32:06 - before we even run feed build we
32:09 - actually compile this with typescript
32:12 - and again if we have some errors we
32:17 - won't get the I believe it was this
32:19 - folder where we have the static assets
32:22 - which in turn are going to be used to
32:25 - host our project so let me showcase that
32:28 - just so we are on the same page first I
32:30 - want to stop the dev server let me run
32:33 - npm run build so at the moment I have
32:37 - the errors typescript errors and
32:42 - immediately I just get back these error
32:45 - messages in my console so in order to
32:48 - fix it what do we need to do well in
32:50 - this case it's sort of simple where can
32:53 - just comment them out delete them
32:56 - whatever doesn't really matter again let
32:59 - me clear everything
33:01 - here let me run the last one npm run
33:04 - build and now since I don't have any
33:07 - typescript errors notice I have the this
33:11 - folder and this is where I have my
33:13 - production ready application so again
33:17 - locally even with typescript errors
33:20 - you'll be able to run the project
33:24 - however you have some issues once it's
33:27 - time to to deploy it once it's time to
33:30 - build the production ready application
33:33 - and up next let me introduce you to a
33:36 - union type which allows a variable to
33:39 - hold a value of multiple distinct types
33:43 - for now we're just going to take a look
33:45 - at some basic examples but since Union
33:49 - types are super powerful it's not the
33:52 - only time you'll see them in the course
33:55 - so once we start working with functions
33:57 - or and all that yep we're going to use
34:00 - the union type as well so let's imagine
34:04 - I have a variable by the name of tax and
34:10 - typically it's a number correct so I can
34:13 - set it equal to
34:15 - 10 typescript can nicely infer the type
34:19 - and I'm good to go but let's imagine
34:21 - that whether I'm getting it from the API
34:23 - or whether user provides that value it
34:26 - can also be a string I can go here set
34:30 - up my colon then go with number so it
34:34 - will definitely be a number and I can
34:37 - use this pipe operator and then I can
34:40 - just add another type which in my case
34:43 - is going to be string now please keep in
34:46 - mind you can add 10 another types but I
34:50 - mean in our case we're just going to
34:52 - stick with two but yeah you can go here
34:55 - and add for example Boolean it's
34:57 - definitely an OP option so now I can go
34:59 - to a next line and I can set it equal to
35:02 - a 100 and typescript is not going to
35:04 - complain because yeah one of the types
35:06 - is actually number now I can also go
35:09 - here and set it equal to a string and in
35:13 - my case I'm going to go
35:14 - with uh let's go with $10 over here so
35:18 - both of them are valid because now I
35:20 - have Union type where it can be either a
35:24 - number or a string now once we start
35:28 - working with more complex examples yes
35:31 - we'll have to do some checks and all
35:33 - that so all of that is coming up but
35:35 - this is a super powerful concept where
35:39 - essentially we can say to typescript hey
35:43 - this is going to be either this or it's
35:46 - going to be the another type now also
35:49 - something that I was blown away is the
35:51 - fact that we can set up the literal
35:54 - value type so that's the fancy name
35:56 - essentially it just means that I can
35:59 - provide the literal
36:01 - values let's imagine we have a
36:04 - request status so that's my variable now
36:08 - what are the typical values for the
36:11 - request status well quite often it's
36:14 - pending success and error so for
36:17 - starters I can just go here with pending
36:19 - so that will be my initial value then go
36:22 - with the colon and now I can just
36:24 - provide the potential string values
36:28 - which are going to be pending then again
36:30 - I use the pipe
36:32 - operator I provide success then another
36:36 - pipe and I'm going to go with error and
36:39 - what's super super cool is the fact that
36:43 - whenever I work with this request status
36:46 - notice I right away get these
36:49 - suggestions so it can either be error
36:52 - pending or success and
36:55 - again it helps me to avoid errors
36:58 - because it's way harder to mistype
37:01 - something and also I kind of just go
37:04 - here and say random I mean first of all
37:07 - it doesn't match my suggestions and
37:09 - second right away typescript is going to
37:11 - complain so I don't have to find doubt
37:13 - about this bug in the runtime I actually
37:16 - can see it right away as I'm building
37:18 - the project so let me go here with
37:20 - success error is going to work so
37:24 - there's nothing wrong with that but if
37:26 - I'll try to set it equal to random as
37:30 - you just saw I mean typescript is not
37:33 - going to be happy about it topic we're
37:35 - going to come back to when we set up
37:39 - more complex examples and again Union
37:42 - types allow us to set up multiple types
37:47 - for the same variable and while we're
37:50 - still in a roll let's also cover type
37:52 - any which allows us to opt out of the
37:56 - type checking so I'm going to create a
37:59 - variable and I'm going to name it not
38:02 - sure so not sure now I will set it equal
38:06 - to four and since we already covered
38:09 - that typescript can infert a Type we'll
38:12 - see over here this number but I can also
38:16 - go with colon and set up any over here
38:19 - now any means exactly what the name
38:23 - implies this going to be anything I can
38:25 - set it up equal to function string
38:27 - Boolean whatever so in next line can say
38:31 - you know what not sure is actually going
38:33 - to be a string maybe a string instead
38:38 - then on next line I can set it equal to
38:41 - false and as you can see that script is
38:43 - not
38:44 - complaining now as you're looking at it
38:48 - probably the first thought is well wait
38:51 - a minute that's
38:52 - how variables behave in JavaScript and
38:56 - you're absolutely absolutely correct now
39:00 - as with everything in programming
39:03 - there's bunch of fights over it whether
39:06 - you should use any at all as far as my
39:09 - two sents be very careful when you
39:12 - introduce any to your
39:14 - application because it can spread like
39:17 - wildfire so you started off with setting
39:20 - up one variable type any and then next
39:22 - thing you know you have any all over
39:25 - your application because for example
39:26 - when you return any from the function
39:29 - then the result is any and on and on and
39:31 - on and on so definitely have a good
39:35 - reason why you want to use any and as I
39:38 - note any is something you'll see quite
39:41 - often when typescript is trying to come
39:46 - up with a type but we haven't provided
39:49 - any clues for example if I'm just going
39:51 - to go with some random and I'm not going
39:54 - to set up the value as you hover over it
39:56 - notice now this is going to be type any
39:59 - so this is something we quite often get
40:02 - by default when typescript is trying to
40:05 - get the type but I mean I haven't
40:07 - provided any clues what this value is
40:11 - going to be and this is essentially
40:12 - something that we'll constantly try to
40:15 - fix where for example for functions
40:18 - implicitly it starts with any but we
40:20 - don't want it to be any we want it to be
40:22 - some kind of type so just be careful
40:26 - when you use it it's definitely an
40:27 - option it's useful if let's say you want
40:30 - to test something it's also useful if
40:32 - you have a pretty big codebase and you
40:36 - just slowly want to introduce typescript
40:39 - so you still want to run the project but
40:42 - you slowly want to add it to your
40:44 - project yeah it's definitely the case
40:47 - just again be very mindful when you set
40:51 - something any because next thing you
40:53 - know it half of the application is going
40:55 - to be any and then at that point I mean
40:58 - it kind of loses the sense to use the
41:01 - typescript in the first place again
41:03 - those are just my two scents if you go
41:06 - to Google you'll find definitely way
41:08 - stronger opinions but let's just leave
41:11 - it at that and let's move on to the next
41:13 - topic and next let's see a practical
41:16 - application of type annotation where
41:20 - essentially I have a list of books so I
41:22 - just have some strings over here and I
41:25 - also have a variable which at the moment
41:28 - is undefined and there's no type since
41:30 - again I want to showcase what type is
41:33 - going to be set by default and I want to
41:36 - set up a loop where I iterate over and
41:39 - then if it matches one of these titles
41:42 - over here then I'll set the variable
41:45 - Found book equal to that title so first
41:48 - let's set up the loop I'm going to go
41:51 - with four off Loop so lead book off
41:54 - books then we're going to set up the
41:57 - condition so if book and I think I'm
42:00 - going to go with the
42:01 - first string over here so I'm going to
42:04 - go with 1984 if that's the case then
42:08 - phone book is going to be equal to a
42:13 - book and we're also going to break out
42:17 - so let's add the break keyword let's
42:21 - save it if everything is correct this
42:23 - should be equal to a title so we can
42:27 - actually go with log and then found
42:30 - book let's take a look at the console
42:32 - yep we are good to go now everything is
42:37 - awesome but let's take a look at the
42:39 - type we have over here by default it's
42:42 - actually set to
42:43 - any which leads to problems because
42:47 - anywhere whether that is in the loop or
42:51 - over here I can do something like this I
42:53 - can set it actually equal to 10 so
42:55 - typescript is not stopping me and this
42:58 - is the behavior which I don't want
43:01 - because I actually want it to be a
43:03 - string otherwise yeah in here it's going
43:06 - to be a string if I'm successful inside
43:09 - of this Loop but then eventually it
43:11 - might turn into a function again good
43:13 - old JavaScript variable Behavior but I
43:16 - don't want this I want this to be a
43:19 - typescript project where I explicitly
43:22 - know what is the type so what's the
43:24 - solution well we can navigate back over
43:26 - here and and we can set it equal to a
43:28 - string but now we have another problem
43:31 - so let me remove these console logs how
43:35 - do we know that for sure it's going to
43:36 - be a string because keep in mind this
43:39 - runs when at runtime so if let's say I
43:44 - set it equal to
43:48 - 1983 well this Found book is not going
43:50 - to be equal to a book what is it going
43:52 - to be equal to well remember by default
43:56 - variable are what undefined so if you'll
44:00 - try to set up some kind of logic over
44:03 - here assuming that it's a string
44:06 - typescript is going to yell at you it's
44:09 - going to say Hey listen you are using it
44:11 - before there's even any kind of value
44:14 - because again typescript is not going to
44:16 - check whether at the runtime this will
44:18 - be equal to a book so yeah we can set up
44:21 - the logic over here where I can say if
44:24 - for
44:25 - sure the Found book is equal to a book
44:29 - typescript knows that actually these are
44:31 - strings so we can run the method on it
44:34 - for example again let's go with length
44:37 - so this is going to work but we cannot
44:40 - do it outside of the loop because in
44:42 - here there's no guarantee that actually
44:44 - this will be a string so we need to set
44:47 - up the union type where I'm going to go
44:49 - with okay it potentially could be a
44:52 - string but by default actually it is
44:56 - undefined so it's another type that we
44:58 - can use so now by default it's going to
45:00 - be undefined if we're successful it's
45:03 - going to be equal to a string and what's
45:06 - super super super awesome is the fact
45:08 - that typescript is going to be extremely
45:11 - helpful where if you try to again go
45:14 - with the good old length notice how it
45:17 - will immediately add this optional
45:20 - chaining why well because it can be
45:23 - undefined and we can see that if we take
45:26 - a look at the error message if you just
45:28 - added dot notice Found book possibly can
45:33 - be undefined and therefore typescript is
45:35 - going to add that optional chaining so
45:38 - now we only run this length if it's
45:41 - actually equal to a string if we have
45:45 - some kind of value so if we won't be
45:48 - able to find a book which is the current
45:51 - case then this actually won't trigger
45:55 - the runtime error now if we're
45:57 - successful then we'll be able to nicely
46:01 - see the length of the book you know what
46:03 - I will change this one around I'm just
46:05 - going to go here to Found
46:07 - book and set it equal to uppercase let
46:11 - me do it this way so we're going for
46:13 - uppercase let's invoke that and then
46:16 - this one I'll just log it again it
46:18 - really depends whether we're able to
46:21 - find the book or no so now let me move
46:23 - this pH book set it up here in my my
46:27 - console and let's see what is going to
46:29 - be the result so I'm going to navigate
46:31 - over here if everything is correct I'm
46:32 - going to get my four if I'm not
46:37 - successful then essentially it's just
46:40 - going to be undefined but I won't have
46:42 - that runtime error where I'm trying to
46:45 - access the property on undefined
46:47 - hopefully that is clear okay and before
46:49 - we move on to the next topic let's work
46:52 - on a small Union type challenge where
46:56 - first we want to create the order status
46:59 - and in there we'll set up the literal
47:01 - types and also we want to set up the
47:03 - discount which can be a number or string
47:07 - type and you know what just because I
47:10 - like to break the rules I'm going to
47:12 - start with the second one doesn't really
47:15 - matter I'm going to go with number or
47:18 - string by default I'll set it equal to
47:21 - 20 or any other number value and I also
47:25 - want to test it whether I can set it
47:27 - equal to
47:29 - 20% now this works but if I'll try to
47:33 - set up discount equal to True
47:37 - essentially a Boolean typescript will
47:39 - yell at me which is exactly what we
47:42 - expected and also let's set up that
47:44 - order status so order status variable by
47:49 - default is going to be equal to
47:51 - processing but we want to set up those
47:53 - literal types so this variable can be
47:58 - only one of these values so we're going
48:01 - to start with processing then we'll set
48:04 - up our pipe and we're going to go with
48:07 - shipped and also we want to add
48:11 - delivered over here so now we can go to
48:14 - the next line set it equal to one of
48:17 - these ones and everything is going to
48:19 - work but if I'll try to set it equal to
48:22 - canceled again typescript will yell at
48:25 - me so let me just set this one up
48:28 - quickly where if we go with order status
48:32 - I just decide that I'm going to pass
48:35 - this value over here not going to be
48:37 - successful since I can see this red
48:40 - squiggly line let me comment this one
48:42 - out we're done with the challenge and up
48:45 - next we're going to discuss arrays in
48:48 - tapescript and as far as the arrays in
48:51 - typescript the general idea is following
48:53 - let's say I have prices array and it's
48:57 - all numbers so we're going to go over
48:59 - here with 100 75 and then 42 if I want
49:03 - to set up the type which is something I
49:06 - want to
49:06 - do again same deal we go with colon then
49:10 - we go with type in this case number and
49:13 - then we set up the square brackets so
49:15 - now I'm essentially telling typescript
49:17 - that this array will only have numbers
49:22 - so if I had a number 34 everything is
49:26 - fine if file tried to stick hello I'm
49:29 - going to get the error because this one
49:31 - is type string and I
49:35 - explicitly told typescript that this is
49:37 - actually going to be an array of numbers
49:40 - and the same is going to work if I will
49:42 - try to invoke push so if I'll try to add
49:46 - the item number is fine string will
49:49 - cause the error so let me comment this
49:52 - one out the same works with string array
49:55 - let's say we have
49:57 - fruit and this is going to be equal to
50:00 - apple and orange we want to set up the
50:03 - type over here in this case it's going
50:06 - to be a string and the same rules apply
50:10 - if we try to add the item that doesn't
50:12 - match type we get the red squiggly line
50:16 - now be careful with the empty square
50:19 - brackets so if we go here and just come
50:23 - up with random
50:25 - values and set it equal to empty square
50:29 - bracket so if we won't provide the type
50:32 - over here typ script just assumes that
50:34 - this will always always be an empty
50:36 - array so if I set it equal to my array
50:40 - and start adding items typescript will
50:43 - immediately complain and notice as we
50:47 - hover it says well type string is not
50:49 - assignable to an Mt right so be careful
50:52 - with this one I know it's temp thing
50:54 - also be careful when you don't
50:56 - explicitly set up the type so if I were
50:59 - to create an empty values
51:04 - array typescript will get the type but
51:08 - check it out now the type is any so just
51:12 - like before we'll run into those issues
51:15 - because now we can change these values
51:18 - any way we want so we can take the
51:21 - string then it turns into a number and
51:23 - same deal so be careful yes
51:27 - typescript will infer the type but most
51:30 - likely you don't want to set it equal to
51:32 - any so this is the case where we want to
51:35 - create the MD but we explicitly want to
51:38 - say yeah this is going to be type number
51:40 - or string or Boolean or whatever now
51:44 - also while we're still on a subject of
51:48 - typescript inferring the type let's take
51:51 - a look at this example let's say I have
51:53 - the names array and I have over here
51:57 - Peter and Susan so if we hover over the
52:01 - names everything is correct typescript
52:04 - sees that we have over here a list of
52:07 - strings and it correctly says the type
52:10 - for this array is string but here's the
52:13 - gotcha since typescript is inferring
52:17 - those values based on what we have over
52:20 - here in the array it doesn't stop me
52:23 - from doing this and now if we hover over
52:26 - it we can see that actually we have this
52:29 - Union type like I said we'll be coming
52:32 - back to this topic and now we have
52:34 - string or number so essentially now I
52:37 - can add numbers as well therefore be
52:40 - careful when you're relying 100% on
52:43 - typescript to set the type it's not
52:47 - going to stop you from adding different
52:49 - values to the particular array and in
52:52 - that case well the type also is going to
52:55 - change now we can explicitly set up the
53:00 - array to be one or the other type so I
53:04 - can go with array for example and I can
53:07 - say that you know what this array is
53:10 - going to have either string or a
53:14 - Boolean again we still set up the square
53:17 - brackets over here and we set it equal
53:19 - to an array where we set up those two
53:22 - values so we can go with Apple
53:27 - then true which is a Boolean and the
53:29 - same deal orange and let's set the false
53:32 - one over here and with this in place we
53:35 - can start working on our next challenge
53:37 - okay and once we're familiar with arrays
53:41 - now let's work on a tiny challenge where
53:43 - we want to set up the temperatures array
53:46 - which will be type number and colors
53:49 - which is going to be type string and
53:50 - then we also want to set up the mixed
53:53 - array so let's start with temperatures
53:55 - essentially our array of numbers now
53:59 - this one
54:00 - probably is going to be the hardest as
54:03 - far as the spelling yep notice over
54:06 - here me fix that one okay good that took
54:10 - a while then I want to set up my type
54:14 - number and we're going to set up 20 then
54:17 - 25 and then 30 and let's try to push I
54:22 - don't know a string of hot so let's
54:26 - actually
54:27 - then go with push and let's try to pass
54:31 - in the string and we won't be successful
54:34 - so we can nicely comment this one out
54:37 - after that we have colors
54:39 - one so this will be actually type of
54:43 - string and in here we're going to go
54:46 - with red green and blue let's save it
54:50 - and let's try to add a Boolean why not
54:53 - so colors here dot then push and we're
54:57 - looking for a bull and mow which is not
54:59 - allowed and then let's set up the mixed
55:03 - one so we're going to go with variable
55:06 - in this case I'm going to call this
55:08 - mixed array and this one will be either
55:11 - a number or a string so number pipe and
55:16 - we set up a string so let's set it equal
55:19 - to our array and in here you know what
55:24 - just to make it interesting why don't we
55:25 - try to add true so bullan and notice
55:29 - right away I'll have my error so let's
55:31 - go with one then two and then we want to
55:35 - add three and with this in place we can
55:38 - move on to the next topic and up next
55:41 - let's discuss object in typescript in
55:45 - order to do that I'm going to create a
55:47 - car and here I'm going to set up the
55:50 - brand that one will be equal to a let's
55:54 - say Toyota and also I'll set up the year
55:58 - so first let me set up the string over
56:01 - here and then let's go with year and
56:03 - we'll set that one equal to a number and
56:08 - if we want to set up the type annotation
56:11 - it might look a little funky but we want
56:15 - to do it this way we again we go with
56:17 - colon then we go with curly braces and
56:20 - then one by one we set up those
56:23 - properties over here so I have a brand
56:26 - and what is the type well it's going to
56:28 - be string but also I have a year and
56:32 - what is that one well that's a number so
56:35 - again either if I try
56:38 - to add some
56:40 - property manually here where I'm setting
56:44 - up the object or for example if I do it
56:48 - dynamically by going card Dot and then
56:51 - the property value unless this property
56:55 - is in the type annotation it's not going
56:58 - to work I think I'm just going to use
57:00 - the color example so let's say I'll set
57:03 - up the color and it's going to be equal
57:06 - to Blue notice right away I have the
57:09 - complaint because the property is not in
57:12 - my type annotation and the same goes if
57:16 - I go with car and brand yeah I can set
57:19 - it equal to Ford since that's the
57:23 - correct type but again if I go with car
57:26 - and color it's not going to fly so
57:29 - typescript will immediately complain now
57:33 - if you're looking at it and you're
57:34 - thinking to yourself well boy this is
57:38 - super clunky over here I have this
57:41 - object and then actually this is going
57:43 - to be my type annotation don't worry
57:46 - this is just essentially the most basic
57:49 - setup but I wanted to cover it since I
57:53 - wanted you to understand how everything
57:56 - works under the hood but eventually we
58:00 - will cover something called type aliases
58:03 - where we will nicely be able to set up
58:06 - this shape somewhere separately and
58:10 - effectively just reuse the variable so
58:14 - again you won't have this clunky code
58:17 - most likely you won't use it but I
58:19 - definitely wanted you to kind of see
58:22 - this type of syntax so now once I have
58:25 - my first car well I can create another
58:27 - one in this case it's going to be a car
58:30 - one since I'm already using the car
58:33 - variable and then I'm going to go with a
58:36 - different brand and also I'll change the
58:40 - year and I don't think it's necessary
58:42 - for me to repeat all of the steps
58:44 - hopefully it's clear whatever we set up
58:47 - in this type annotation needs to match
58:51 - what we have in the object otherwise
58:54 - typescript is not going to allow us to
58:58 - compile essentially our code and now
59:00 - let's tie two things together I want to
59:03 - tie the arrays with the object and in
59:07 - the process we'll also cover how we have
59:09 - read only option with the typescript as
59:14 - well as the optional properties so first
59:17 - I want to create three objects I want to
59:20 - create book pen and notebook and I want
59:23 - to add them to the items array which by
59:27 - default is going to be let's say empty
59:29 - but we'll set up the types in a second
59:32 - so first let's just go with items not
59:34 - going to place anything inside of it and
59:37 - then let's create those three variables
59:39 - so in here we're looking for a book it's
59:44 - going to have two things we're going to
59:46 - go with title we'll set it equal to book
59:49 - and we'll also have cost okay set it
59:53 - equal to 20 and then I'll change this
59:56 - one around to
59:58 - pen
60:00 - okay and the cost I mean again totally
60:04 - relevant I'm going to set it equal to 10
60:06 - I guess and then I want to go with
60:09 - notebook but for Notebook actually want
60:12 - to remove the cost and like I said now I
60:16 - want to store all of these three values
60:19 - over here in the items but here's the
60:21 - kicker though I do want to make sure
60:24 - that all of them have the same shape now
60:28 - as we're looking at it we can clearly
60:30 - see that it's not the case with the
60:31 - notebook but let's imagine that we don't
60:35 - know that and at this point we have two
60:37 - options we can either repeat the same
60:41 - steps like we did for the car so
60:45 - effectively I can just set up this type
60:47 - annotation for all three of them one by
60:51 - one or since I have an array and I can
60:55 - also set up the type for array I can do
60:58 - it in one place where I have the items
61:00 - so far we know that we can set up the
61:02 - array to be equal to a string or a
61:06 - number or a bullion correct and we also
61:09 - cover the type Union but we can also do
61:12 - something like this where I can say yeah
61:15 - this is going to be an array of objects
61:18 - and then each object needs to have this
61:21 - particular shape now what is going to be
61:23 - the shape I'll say title is equal to a
61:27 - string or I'm sorry I don't know why I'm
61:30 - placing this in the quotation marks and
61:33 - then also I want to set up a cost so
61:36 - we're going to go with cost and we'll
61:38 - set it equal to a number and now one by
61:41 - one as I'm adding these items to my
61:44 - array once I get to a notebook check it
61:48 - out now typescript is like Hey listen
61:51 - this notebook that you're adding well
61:54 - notice it only has the string it doesn't
61:58 - have the cost so whatever type you set
62:01 - up over here well it doesn't match so
62:04 - again super useful where instead of
62:08 - setting them one by one if we have an
62:10 - array we can set it in one place because
62:13 - we also can set up types for array now
62:16 - what is the solution well technically we
62:19 - can go back and add cost over here but
62:22 - we also have this option of adding
62:25 - optional properties now please keep in
62:27 - mind you can use the same optional
62:30 - property over here as well when you're
62:33 - setting up the type annotation for an
62:36 - object I'm just doing it here in Array
62:39 - since this is where we're currently
62:41 - working hopefully that is clear and now
62:44 - I don't have the error because when I
62:47 - set up the cost to be optional well it
62:50 - could be there or it potentially could
62:52 - be missing which is the case for a node
62:56 - and what's also really interesting is
62:59 - that with typescript we can set up the
63:01 - properties to be read only again same
63:04 - deal of course we can set it up over
63:06 - here but in my case I'm going to do that
63:08 - for the title where right before I set
63:12 - up my property I'm going to go with read
63:14 - only so now if I go with items and I
63:18 - access let's say the first one here and
63:21 - if I try to overwrite the value so dot
63:25 - title is equal to a new book for example
63:30 - it's not going to fly so now typescript
63:32 - is immediately complaining that Hey
63:33 - listen title is readon so you cannot
63:37 - change this value over here so let me
63:39 - comment this one out this concludes the
63:41 - object fundamentals in typescript and
63:45 - now we can start working on the next
63:47 - challenge so now let's work on the
63:50 - objects challenge where we want to set
63:53 - up the bike we want to set up the laptop
63:56 - then we'll create some products and
63:58 - we're going to store it in the array so
64:00 - let's start with our bike that will be
64:04 - my object let me come up with some kind
64:08 - of values over here then we also want to
64:12 - add the
64:13 - year and now let's set up our type
64:17 - annotation so we're going to go with
64:19 - colon then brand will be equal to string
64:24 - and also we'll have the here and we'll
64:26 - set it equal to a number that should do
64:29 - it now we just want to change it to a
64:32 - laptop so let me copy this
64:35 - one change the name then brand stays
64:39 - year stays we're just going to add a
64:43 - different string value this case it's
64:46 - going to be Dell and also change the
64:50 - year and now let's see some errors so if
64:52 - I'm going to go with bike and year and
64:55 - set it equal to Old it's not going to
64:57 - fly why well because year is set to be
65:00 - equal to type number and same is going
65:03 - to work if I'm going to create a second
65:05 - laptop so I'm going to go with laptop 2
65:09 - and it's only going to have a brand so
65:13 - we're not going to have the year so if
65:15 - I'm going to set it like this notice we
65:17 - get our red squiggly which means that
65:21 - there's some kind of error and now let's
65:23 - set up those products so we're going to
65:26 - go with product one that one is equal to
65:29 - title let's go with
65:32 - shirt and let's set up the
65:35 - price that one will be equal to
65:38 - 820 then let's copy and paste we're
65:41 - going to go with two this one will be
65:44 - equal to a pants one why not pants are
65:47 - awesome now we don't want the price so
65:52 - we will need to set this one up as
65:54 - optional and let's create the product
65:57 - all right let's right away set up our
66:00 - type by the way this was supposed to be
66:03 - square brackets we want to go here with
66:06 - title that one is equal to a string and
66:10 - then also we want to go with price this
66:13 - one will be optional and we'll set it
66:15 - equal to a number so now in the array we
66:17 - can nicely store product one and product
66:21 - number two now it looks like typescript
66:23 - is complaining why well because I forgot
66:26 - the square brackets and at the very end
66:28 - let me just showcase something
66:29 - interesting where if I go with products
66:32 - and then push
66:34 - provide the object set up a title here
66:39 - in my case I'm going to go with shes
66:42 - even though price is optional we still
66:45 - need to provide the correct type so
66:48 - let's say if I don't provide anything
66:51 - notice how typescript is not complaining
66:54 - effectively this is optional
66:56 - the price one now if I do provide the
66:59 - price it has to be a number so if I go
67:03 - here with price and set it equal to a
67:06 - string T will immediately complain yes
67:10 - it's optional but if I do decide to pass
67:15 - the value the type needs to match
67:17 - whatever I have here in the type
67:20 - annotation beautiful we have finally
67:23 - arrived at the functions in typescript
67:26 - and I'm super excited to cover this
67:28 - topic for a few reasons first our
67:31 - examples are going to get more complex
67:34 - because we'll start tying together all
67:36 - of the concepts we covered previously
67:39 - and also once we start working with
67:41 - functions we absolutely have to start
67:44 - using typescript and you'll see what I
67:46 - mean in a second so let's say I have a
67:49 - function of say hi why not let's set it
67:52 - up say hi for now we're not going to
67:55 - pass any parameters and as far as the
67:58 - function logic we'll just leave it empty
68:00 - now say high is looking for what well
68:04 - probably some kind of name correct and
68:06 - in a function body we can nicely log it
68:09 - so the moment I type over here any
68:12 - parameter in my case name notice right
68:14 - away I'm getting these red squidly lines
68:18 - and this is what I'm talking about at
68:20 - this point we absolutely have to start
68:23 - using typescript otherwise typescript
68:26 - won't compile our code so if we hover
68:29 - over we notice parameter name implicitly
68:33 - has any type and essentially typescript
68:36 - complains about it so that's not allowed
68:39 - yes by default implicitly it's a set up
68:41 - as any but we need to fix it in order
68:45 - for typescript to compile our code and
68:48 - at this point essentially we have three
68:51 - options first we could set typ any
68:55 - ourselves elves that's definitely one
68:57 - option also and you know what let me
69:00 - just comment this one out also we can
69:03 - navigate to DS config and we can
69:06 - actually change the configuration
69:09 - something I'm going to Showcase in a
69:11 - second or the best scenario is for us to
69:16 - actually set this one up with a proper
69:19 - type annotation so in this case I'm
69:22 - looking for a string most likely so I'm
69:25 - I'm going to say type okay so let's try
69:29 - it out here with any what's the issue
69:32 - here well just like we covered before
69:35 - any is anything so everything that we
69:38 - can do in JavaScript pretty much will be
69:39 - able to do with the name here and
69:43 - actually I believe in two videos I'll
69:47 - showcase the any GOA that we need to be
69:49 - aware of so this is not going to be
69:52 - approach yes technically you can do it
69:54 - but I mean at at this point we kind of
69:56 - lose the benefits of typescript now
69:59 - second option we can navigate over here
70:01 - to the package Json or I'm sorry why am
70:04 - I going to package Json we're going to
70:06 - DS config and notice over here this
70:10 - strict rule technically we can change it
70:12 - around I can set it equal to false and
70:15 - at that point typescript won't complain
70:17 - about the fact that parameter by default
70:20 - is left as any so you can definitely try
70:23 - it out you can set it equal TOA and
70:25 - you'll see that actually code Works
70:27 - everything's fine but in my case I'm
70:29 - going to skip that I'm just letting you
70:30 - know that technically this is an option
70:33 - so we have finally arrived at the option
70:36 - we're going to use and that is setting
70:39 - name explicitly to the type we're going
70:42 - to use and just like before we simply
70:45 - want to go with colon and we want to
70:47 - come up with the type my case that is
70:49 - going to be string and again I know
70:52 - you're probably sick of this method but
70:54 - I'm just going to use two uppercase
70:56 - essentially I want to set up over here a
70:59 - log then I'm going to go with template
71:01 - string and we're going to go with hello
71:04 - there over here and now I'm going to
71:07 - access the name so the moment here we
71:10 - set up a proper type let's say string
71:14 - number or whatever two things are going
71:17 - to happen first when we call this
71:20 - function every time we'll pass in a
71:23 - wrong type typescript is going to yell
71:26 - at us and second within this function
71:29 - body we can only perform functionality
71:32 - that is allowed on this specific type so
71:36 - in here yes let's go to uppercase let's
71:40 - invoke it and let's try invoking say hi
71:45 - and let's say I'm going to pass in John
71:48 - and also in the next line I'm going to
71:50 - pass in three so if everything is
71:53 - correct we should get an error over here
71:56 - we can nicely see that we can only grab
71:59 - the string Methods inside of the
72:00 - function body and if we inspect the
72:03 - console we should see John over there
72:06 - and lastly if we try to pass more
72:08 - parameters than what we have specified
72:10 - we'll also get an error and typescript
72:12 - won't compile our code and with this in
72:15 - place now we can move on to the next
72:17 - topic okay and up next let's talk about
72:20 - function returns so first I'm going to
72:22 - create a function and I'm going to call
72:24 - this
72:26 - calculate
72:28 - discount discount over here it's going
72:31 - to be looking for price and I know that
72:34 - that type is going to be number for now
72:37 - inside of the function body I simply
72:39 - want to go with the return and we're
72:41 - going to go with price again since this
72:43 - is a number once I press do notice I'm
72:46 - only getting the methods that are
72:48 - associated with the type number and if
72:51 - you're sick of me hearing this I'm sorry
72:54 - but I'm going to keep on repeating that
72:56 - because again I find this truly helpful
72:59 - and let's say I'm going to multiply this
73:02 - by
73:03 - 0.9 so I'm going to go over here 0.9
73:06 - okay good and then I'm going to set up a
73:08 - variable so I'm going to go with cons
73:11 - final price and I'm going to set it
73:15 - equal to calculate discount I'm going to
73:19 - pass in 200 and I don't think I need to
73:23 - log the value I I don't think it's
73:25 - necessary so if I hover over the final
73:28 - price I can see that it's a number now
73:31 - why is that a case because again
73:34 - typescript is inferring the type
73:37 - typescript says okay so this is a number
73:40 - here we're returning a number multiplied
73:44 - by something so whenever we hover over
73:48 - this calculate discount we can nicely
73:50 - see another set of colon and a number
73:55 - over there and I know that it might look
73:58 - a little funky over here but yes
74:01 - essentially the syntax is following in
74:04 - order for us to set up the type for the
74:07 - function return we need to go after
74:09 - parenthesis we need to set up the colon
74:12 - and then we explicitly need to go with
74:15 - the type now again you can make a case
74:18 - well why do we need to set up type if
74:20 - typescript is already inferring the type
74:24 - well for essentially two reasons first
74:26 - of all if I set up over here a number
74:31 - type explicitly as I'm working in this
74:34 - function if for some reason I forget to
74:39 - set up the return or if I set up a
74:43 - return which doesn't match what
74:46 - typescript is expecting well I'm going
74:49 - to get an error so it's going to be
74:52 - super helpful let's Imagine This I have
74:56 - some kind of has discount variable over
75:00 - here and I'm going to just set up has
75:04 - discount so essentially some kind of
75:07 - condition and in here instead of
75:10 - returning a number I'm going to go with
75:13 - discount and applied notice right away
75:17 - typescript is complaining type string is
75:20 - not assignable to type number as we're
75:23 - working in the function typescript is
75:25 - kind of watching over us and if I return
75:29 - something that I'm not expecting well
75:31 - essentially typescript just starts
75:33 - yelling at me because again yeah it's
75:36 - trying to infer the type but once I
75:39 - remove my logic well essentially now it
75:43 - could be a string or it could be also a
75:47 - number correct so now if we hover over
75:51 - this notice we either have a number or
75:54 - it's going to be discount applied and
75:56 - the same goes over here either it
75:59 - returns a number or discount applied so
76:03 - even though it's technically optional
76:05 - it's a good practice to set up the
76:08 - return types explicitly since it helps
76:10 - us tremendously as we're setting up the
76:13 - functionality so now let me common this
76:15 - one out and I'm just going to go with
76:17 - price like so and with this in place now
76:20 - we can move on to the next topic and
76:22 - next I just want to show you why we want
76:25 - to be careful with type any but this is
76:28 - one of those videos where you don't have
76:30 - to type along if you're not interested
76:33 - essentially you can just sit back and
76:35 - relax so let's imagine I have a function
76:40 - and the name is add three so it's
76:44 - looking for one parameter which is a
76:46 - number and don't ask me why but I'm just
76:49 - going to set it equal to any so I'm not
76:52 - sure what would be the use case but
76:55 - let's just go with it then inside of the
76:58 - function body I'm going to create
77:00 - another number in this case type will be
77:03 - a number so I'm going to be explicit and
77:06 - then as far as the return let's just go
77:09 - with a return number plus another number
77:14 - why not and then let's set up two
77:16 - variables one is going to be result and
77:19 - then we'll also set up some value so
77:22 - let's try it out I'm going to go over
77:23 - here with result that one is equal to
77:26 - add three so as far as the value you
77:30 - know what let me just pass in three so 3
77:33 - + 3 and then also we want to set up some
77:37 - value so that one will be equal to a
77:40 - result so now M Dar question and now I'm
77:44 - not asking what is going to be the
77:46 - result I'm more interested well what is
77:48 - going to be the type so if we have our
77:51 - over some value notice something
77:53 - interesting
77:55 - how essentially it's any and what that
77:59 - means well go with some value and my
78:04 - method and technically it's going to be
78:06 - valid as I'm typing the code
78:08 - but hopefully it's clear that it will
78:12 - lead to some errors since there is no
78:14 - method My Method and as you can see
78:18 - everything starts with this innocent any
78:22 - and notice how it trickles down so we
78:24 - pass number that is type any and even
78:28 - though this is a number and technically
78:30 - this is a math operation typescript
78:32 - should infer that we're returning a
78:35 - number however if we hover over notice
78:38 - over here we're expecting any we are
78:41 - returning any so result is any then Su
78:44 - value is any and as I mentioned before
78:47 - be careful when you introduce any
78:49 - because it can slowly trickle down or
78:53 - spread like wildfire whichever term you
78:55 - want to use and next thing you know it
78:59 - you're going to be unintentionally or
79:01 - intentionally running some methods or
79:04 - setting up some kind of functionality
79:05 - which doesn't make sense and at that
79:08 - point you'll again need to start chasing
79:11 - those bugs at runtime not as you're
79:15 - writing the application so now if I
79:17 - navigate to the browser notice over here
79:19 - some value that my method is not a
79:22 - function an error which which we can
79:26 - expect since there is no such method on
79:29 - some value and with this in place now we
79:32 - can work on our next challenge beautiful
79:35 - and once we're familiar with the
79:37 - fundamentals let's work on our next
79:39 - challenge and you know what I actually
79:41 - changed my mind I will list out the
79:43 - steps for a few reasons first the
79:46 - challenges are getting more complex and
79:50 - also I want everyone to be on the same
79:53 - page let's say someone one is not
79:55 - reading the readme or utilizing the
79:57 - readme I still want them to kind of have
80:01 - an idea what I'm trying to build so
80:04 - effectively I want to create the array
80:08 - names and then I want to write a
80:10 - function that checks the name whether
80:15 - it's in the array so this function
80:17 - should take name as parameter and it
80:20 - should return a Boolean whether the name
80:24 - is in the array or not and then we want
80:27 - to set up one or few checks and
80:31 - essentially just test out some names so
80:34 - let me go to my file first I want to
80:36 - come up with a value and I'm going to
80:40 - say that it's going to be an array of
80:42 - strings and let's just provide some
80:45 - random values so I'm going to go here
80:47 - with John then I also want to go with
80:50 - Jane let's set up Chim and also will
80:55 - place a gill over there I don't know why
80:57 - I said all of them starting with J must
81:01 - have been a bad day in the office or
81:03 - something like that then let's come up
81:05 - with our function so in my case I'm
81:08 - going to go with is name in list and
81:12 - this function is going to be looking for
81:14 - a parameter the type is going to be
81:16 - string and I'll right away set up that I
81:20 - want to return from this function a
81:23 - Boolean so what
81:25 - the name is in the array or not
81:28 - therefore I'm going to set up my type
81:29 - over here and then right away let's set
81:33 - up the return I'm going to go with names
81:36 - so that's the array and I'm just going
81:38 - to use the includes method and in here
81:41 - I'll pass in the name so I pass the
81:44 - string over here and then I pass the
81:46 - same one into includes and essentially
81:49 - this is just going to return true or
81:52 - false then let me set up a variable name
81:56 - to check now technically I mean we don't
82:00 - have to do it we can just pass it in but
82:03 - you know what just to make things more
82:05 - interesting I'm going to go with name to
82:09 - check um in this case you know what I
82:11 - will rely on the fact
82:13 - that typescript will infer this type let
82:17 - me type over here Jane and let me set up
82:20 - if and else so I'm going to go with his
82:23 - name in a list and I'm going to pass in
82:26 - name to check that's the case I'll have
82:29 - one log if not I'll have something else
82:33 - so now let's set up those logs so in
82:36 - here we're looking for a name to check
82:40 - whatever it might be so now let me
82:43 - access this as a variable so name to
82:45 - check and then let's say in the list and
82:50 - now pretty much let me just take the
82:51 - same console
82:53 - log and and add not in
82:56 - list okay good and now let me save the
82:59 - file let me navigate to the browser and
83:03 - if everything is correct Jane is in the
83:05 - list so if I'm going to set it up over
83:08 - here a value of Peter now it's going to
83:11 - say Peter is not on the list and with
83:14 - this in place we're done with the
83:15 - challenge and we're ready to move on to
83:18 - our next topic and next let's discuss
83:21 - optional and default parameters in
83:25 - functions
83:26 - essentially how we set them up from the
83:30 - typescript
83:31 - perspective I'm going to start by
83:33 - creating a function
83:36 - calculate
83:38 - price it's going to look for two
83:41 - variables price which is going to be
83:44 - number and for now I'll set
83:48 - discount as a normal parameter so I'm
83:52 - not going to set it as default or
83:54 - optional so let me go with discount let
83:58 - me set it up as number then inside of
84:00 - the function body I'm going to go with
84:03 - return and we're going to look for Price
84:06 - minus the discount okay good makes sense
84:11 - I mean if we want we can set up over
84:13 - here a number as a return as well that's
84:16 - definitely an option and then let's go
84:18 - with price after
84:22 - discount and now will be equal to
84:25 - calculate price and I'm going to pass in
84:27 - some even numbers just so we don't need
84:29 - to log it so essentially I pass in
84:32 - 100 as a price and20 as a discount and
84:36 - then the result should be 80 all right
84:39 - but what if I want to make this one
84:41 - optional what if sometimes I'm going to
84:43 - provide the value and sometimes well
84:46 - it's not going to be available well the
84:48 - syex is following we want to go to the
84:50 - parameter and we need to add the
84:52 - question mark but notice right away
84:55 - typescript is
84:57 - complaining and the reason for that is
84:59 - because possibly discount can be
85:02 - undefined and in our case we already
85:04 - have a math operation where we take the
85:07 - price and then we subtract a discount
85:09 - but if this is undefined I mean it
85:12 - doesn't make sense so the key thing to
85:15 - remember about optional parameters is
85:18 - that a function with optional parameters
85:21 - must work when they're not supplied and
85:25 - as far as the effects well we just need
85:26 - to provide the fallback value so if this
85:30 - is undefined the discount one well then
85:33 - we'll have some kind of number value and
85:36 - the way we do that we just set up the or
85:39 - operator and in this case I'm going to
85:41 - go with zero that's how we can work with
85:44 - optional parameters in typescript and
85:48 - while we're still on a topic let's also
85:50 - discuss the default parameter now for
85:54 - this one I think I'm going to create
85:56 - another function why not let's just keep
85:58 - on practicing this one is not going to
86:00 - be calculate the price though we're
86:03 - going to go with calculate score we're
86:06 - going to pass in the initial score which
86:10 - will be a number and also we're going to
86:13 - go with penalty points and same deal for
86:17 - now we're just going to set it that it's
86:20 - actually a number I mean it will be a
86:22 - number but we'll just set it as a
86:25 - default eventually now as far as the
86:27 - return again same deal we're going to
86:30 - set it equal to a number and when it
86:34 - comes to logic we want to go with return
86:36 - initial score minus the penalty points
86:40 - and once I have the function in place
86:41 - now let me set up two variables so we're
86:44 - looking for
86:46 - score after penalty and I'll provide
86:50 - over here calculate score and again I'm
86:53 - going to go with with some even values
86:55 - so I'm going to go with 12 and now I
86:58 - want to set up another variable only in
87:01 - this case I'm going to go with without
87:05 - penalty and I'll just provide the first
87:08 - one so that will be my initial score and
87:11 - notice right away typescript is going to
87:14 - complain so here's the deal if we set up
87:18 - a parameter and we don't provide it or
87:22 - we provide one too many
87:24 - well then typescript will complain so
87:26 - this is something to keep in mind and
87:28 - how we can fix it well we can either go
87:31 - back to this optional parameter which we
87:35 - discussed in the previous video or we
87:38 - provide some default for this one so we
87:40 - make penalty points as a default
87:43 - parameter and the way we do that just
87:46 - like with JavaScript we just add the
87:48 - equal sign over here and come up with
87:50 - the value so in my case it's going to be
87:53 - zero so now
87:54 - if it's provided awesome we're going to
87:58 - use the penalty points value if not well
88:02 - then we'll just revert back to the zero
88:05 - because that one is the default one and
88:08 - here's the key difference if we use
88:10 - optional parameter we do need to set up
88:13 - this logic if we have a default one it's
88:15 - not the case then we'll just use
88:17 - whatever value is provided okay and up
88:20 - next let's discuss how we can work with
88:22 - rest parameters
88:24 - in typescript and also let me showcase
88:27 - one more time how smart the typescript
88:30 - is let's say we have a function and the
88:34 - name is going to be sum now for now I'm
88:36 - not going to pass any parameters I'm not
88:38 - going to set up any return type simply
88:42 - want to have my function and I'm just
88:45 - going to invoke it and show you what
88:48 - arguments I'm going to provide so this
88:50 - one will be equal to result and in here
88:54 - I just invoke the sum and effectively in
88:57 - here I want to provide two arguments so
89:00 - I want to provide a string and a list of
89:04 - numbers so string is going to say well
89:06 - the total is and then whatever numbers I
89:10 - provide they're going to be added
89:14 - together and that will be my sum so in
89:16 - here let me go with the string and let's
89:20 - say
89:22 - total is
89:25 - then we're going to go with the colon
89:27 - and then we have list of parameters so
89:29 - this is where we'll need to implement
89:31 - the rest parameter otherwise I mean one
89:35 - case I might add five numbers in the
89:39 - next instance it might be only three and
89:41 - hopefully you see where I'm going with
89:43 - this so it's not always going to be one
89:45 - or two numbers it's going to be a list
89:47 - of numbers so in this case I'm going to
89:49 - go with one 2 3 four and five now
89:54 - typescript is complaining since we
89:57 - haven't set up those parameters over
90:00 - here so let's start with a message in
90:03 - this case it's going to be a string and
90:05 - now let's see how it can work with such
90:09 - list and essentially the syntax is
90:12 - similar to JavaScript the only
90:15 - difference is that we need to provide
90:17 - well what type of array it's going to be
90:20 - so in JavaScript we use this syntax
90:24 - three dots then we come up with a name
90:26 - in this case I'm going to go with
90:28 - numbers over here and this is the rest
90:31 - parameter and essentially JavaScript
90:34 - treats this as an array so in here we
90:37 - want to go with number because I need to
90:41 - let typescript know what kind of type it
90:42 - is and then the array now please keep in
90:45 - mind if you have strings here as well
90:50 - essentially you just go with number then
90:53 - use the type Union and essentially set
90:56 - up a string there as well and now pretty
90:59 - much all of the arguments that are pass
91:02 - the string are going to be collected in
91:05 - this numbers array now I also right away
91:08 - want to set up what are we returning
91:09 - from this function and essentially it's
91:12 - going to be a string now before we set
91:15 - up the logic which we're going to do
91:18 - with reduce I also want to showcase how
91:20 - smart typescript is so I'm just going to
91:23 - create
91:24 - the doubled variable and I'm going to
91:27 - set it equal to numbers so that's my
91:29 - array then let's invoke map then we're
91:32 - going to go with
91:34 - num and let's just return num * 2 and
91:39 - again let me just log I guess here just
91:42 - so we can see that the functionality
91:44 - works but one I want to showcase though
91:48 - is this notice as we hover over
91:51 - typescript immediately knows that it's a
91:54 - number so let's say you have some kind
91:57 - of call back function that you pass into
92:00 - the map into the reduce and all that
92:04 - that's is going to see what kind of type
92:07 - array it is if you have supplied those
92:10 - values and it will immediately know that
92:13 - as we're iterating over this is a number
92:16 - now you can explicitly provide the value
92:20 - I mean no one is stopping you to go here
92:22 - and say number but in general typescript
92:25 - is super helpful and we also have right
92:28 - away this useful error where the type
92:32 - should be string as far as my return but
92:35 - at the moment well I'm not returning
92:37 - anything so let me set up that
92:38 - functionality as well and this is the
92:40 - case where I will use the reduce and
92:44 - then I'm just going to return the
92:46 - message the total is and then I'll sum
92:49 - up the values so I'm going to go with
92:52 - let total is equal two numbers then
92:55 - let's provide reduce over here I mean we
92:58 - can call this accumulator and total or
93:02 - current however you want to do it in my
93:04 - case I think I'm going to go with
93:06 - previous over here and the current
93:12 - one and then as far as the
93:14 - logic side of the function let's just
93:18 - return previous plus and then the
93:21 - current one and the same deal typ knows
93:24 - that it's a number since I have array of
93:27 - numbers now since I'm using reduce I
93:30 - also want to provide the default value
93:32 - which is going to be null and then from
93:35 - this function I want to return a string
93:38 - so I'm going to set up the template
93:39 - literal we'll provide the message and
93:42 - we'll also provide the total over here
93:45 - so now let me just see what the result
93:49 - is I guess so let me just log the result
93:53 - and also we should see that doubled one
93:55 - in console so notice this functionality
93:58 - works over here and the total is 15 and
94:01 - in the process we cover two important
94:04 - things how we can work with rest
94:06 - parameter which essentially collects the
94:09 - list of values if we don't want to
94:12 - access them one by one and also how
94:14 - smart typescript is in the Callback
94:17 - function we don't need to explicitly say
94:20 - well what type it's going to be
94:23 - typescript already knows and up next
94:25 - let's discuss what type we should return
94:29 - if we're not returning anything from the
94:31 - function and a good old example is just
94:34 - having a console log so let me go with
94:37 - function log message as far as the
94:41 - parameter we're looking for a
94:43 - message and that one will be equal to a
94:46 - string and then in here let's use our
94:50 - good old console log and let's just log
94:53 - the message now I do want to invoke it
94:56 - and I want to provide some kind of value
94:59 - so in this case I'm going to go with
95:01 - hello and typescript and since we have
95:04 - nice suggestions if we just hover over
95:07 - the log message we can see that
95:11 - typescript inferred the return type as
95:14 - void and void is a special type that
95:18 - represents the absence of a value and
95:22 - when we use it has a function return
95:24 - type void indicates that the function
95:27 - does not return a value now milon dollar
95:31 - question do you always have to set it up
95:34 - I mean it really depends on your
95:36 - approach but it is super helpful
95:38 - especially if you consider this once we
95:41 - add this void over here even if I set up
95:44 - some kind of return and I'm going to go
95:47 - with hello world notice how typescript
95:50 - right away says well you cannot assign
95:52 - string to a void so if we decide that
95:57 - this function is not going to return
95:59 - anything and we set up the keyword even
96:02 - if later on we mess up something and
96:05 - start returning some values from the
96:07 - function typescript is going to stop us
96:10 - from doing that and up next let's
96:13 - discuss Union types as function
96:16 - parameters and what the typ guards are
96:19 - now I did set up this topic as a
96:21 - challenge just so you can see firsthand
96:25 - the type of issues we will face so
96:28 - here's the task I want you to create a
96:32 - function called process input that
96:36 - accepts a parameter of Union type so it
96:41 - can either be a string or a number and
96:45 - when it comes to
96:48 - functionality if the input type is
96:50 - number we simply want to multiply it and
96:54 - log it in the console and if it's going
96:56 - to be a string just use one of the
96:59 - methods so in my case since my favorite
97:02 - method is the uppercase one most likely
97:05 - I'll use that one but it really comes
97:07 - down to the preference so I'm going to
97:09 - navigate to my tutorial and I want to
97:12 - come up with a function so I'm going to
97:14 - go with process and then input and I
97:17 - believe in one of the previous videos
97:20 - when we covered the rest parameter I
97:22 - mentioned that you can still use the
97:24 - union type I mean it's not a big deal
97:27 - here I can go with input and then just
97:29 - say string or the
97:32 - number however once we set up the
97:35 - functionality this is where we'll add
97:38 - additional logic since now we have two
97:42 - potential values correct so first let's
97:45 - go with process input and pass in then
97:48 - this should work and also let's pass in
97:51 - the hello now what about the logic if we
97:56 - simply log we should be good to go so if
98:00 - I type input notice there are no issues
98:04 - but now what if I want to multiply this
98:06 - what if I want to say times two notice
98:09 - immediately typescript is not happy why
98:13 - well we have a type
98:18 - string and we're multiplying this by two
98:21 - now typescript doesn't know that in here
98:23 - we passing in 10 and in here we have the
98:25 - hello so we need to set up something
98:28 - called type guard where before we do any
98:33 - functionality we actually make sure that
98:37 - the type is correct essentially if I
98:41 - want to run a string method I want to
98:42 - make sure that it's a string if I want
98:45 - to multiply I want to make sure that
98:46 - it's a number and again the fancy name
98:50 - for that is typ guard now we you'll look
98:53 - at multiple type guards the most
98:58 - straightforward one is just type off
99:02 - keyword and then we look for specific
99:05 - value so inside of the function I do
99:07 - want to set up a check so there's going
99:10 - to be a condition and I'm going to go
99:12 - with type off then I'm looking for my
99:16 - parameter and I'm going to say if it's
99:18 - equal to a number and notice how
99:21 - immediately typescript was helpful and
99:24 - provided bunch of options if you didn't
99:27 - let me go back notice these are the
99:30 - values that we can use and in this case
99:32 - we're looking for the number if that's
99:35 - the case what do I want to do well I'm
99:37 - going to log times two over here now if
99:41 - it's not the case typescript is also
99:44 - smart it knows that listen if it's a
99:48 - number we're going to do this
99:50 - functionality what is the alternative
99:53 - well the alternative it's a string
99:55 - correct so in here we simply can go with
99:58 - else then again we're going to go with
100:00 - log
100:02 - input and you know what just so people
100:05 - are not upset with me I'm just going to
100:07 - go with two
100:08 - lowercase again the official name for
100:11 - this one is type guard and we use it to
100:14 - check the parameter at the runtime and
100:18 - while we're still on a roll let's also
100:21 - see how we can work with objects
100:23 - as parameters in our function so I'm
100:27 - going to set up a new function let me
100:30 - call this
100:31 - employ and in here I'll pass in the
100:33 - object with the ID property and as a
100:37 - side
100:38 - note the second example which we're
100:41 - going to cover is going to use a little
100:43 - different syntax so in here essentially
100:47 - I'm right away D structuring the ID I'm
100:50 - saying yeah there's going to be an
100:52 - object with the ID property and I right
100:55 - away want to access it now as far as the
100:59 - typescript same deal just like with
101:01 - regular objects we want to set up this
101:03 - type annotation and we want to be
101:07 - specific well what are we're going to be
101:11 - getting here so is this a number string
101:14 - or whatever and in this case I'm going
101:16 - to set it equal to a number as a side
101:20 - note yes in like I believe three videos
101:24 - we will cover typee aliases so it's not
101:27 - going to be as clunky because at the
101:29 - moment I fully understand if you're
101:31 - looking at it and you're like whoa so I
101:34 - understand this part but does that mean
101:36 - that every time I'll have object with
101:38 - like 10 properties we have to set it up
101:41 - over here no there is a better solution
101:44 - and it's coming up and also just like
101:48 - with parameters can also set up the
101:50 - return type as an object out of does
101:53 - that look like well same deal I just say
101:57 - colon then I provide the curries and
102:02 - what are we returning from this function
102:05 - I'm going to go with ID which again is
102:06 - going to be a number and also there's
102:08 - going to be is active in this object and
102:12 - that one will be a Boolean and again we
102:15 - set up the
102:16 - Cur so we have two sets of curries over
102:20 - here and we also have two sets over here
102:23 - because we have one for return and one
102:25 - for
102:27 - functionality and as far as the logic I
102:30 - just want to return an object from this
102:32 - function and I need to make sure I
102:34 - follow this pattern correct I need to
102:37 - make sure that I return a number and a
102:40 - Boolean so in this case I'll just right
102:43 - away grab whatever I have over here and
102:46 - also as far as the is active I'm just
102:49 - going to do some basic logic I'm going
102:51 - to say ID and then I'm going to use the
102:54 - modulus operator essentially if ID
102:58 - modulus 2 is equal to zero then it's
103:00 - going to be true which means essentially
103:03 - that it's an even number if not then
103:06 - it's going to be false so now let's try
103:08 - it out we're going to go with const
103:11 - first set it equal to create employee
103:15 - and then let's pass in our object so in
103:17 - this case it's going to be one then copy
103:19 - and paste this will be equal to a second
103:23 - over here and then we want to log both
103:26 - of these results so let's look for first
103:30 - and second let me navigate to a console
103:33 - and for some
103:35 - reason says false because yep I didn't
103:38 - change this one this should be equal to
103:40 - two so now the first one is active is
103:43 - false and then the second one is active
103:46 - is true again we really don't care about
103:48 - the functionality I mean we can
103:50 - definitely hardcode over here doesn't
103:52 - really matter so hopefully it's clear if
103:54 - we have an object we nicely set up right
103:57 - away The annotation at least with the
104:00 - current knowledge we have now also we
104:03 - have alternative approach where we can
104:06 - give some kind of name to this object
104:09 - and then we can just use it inside of
104:12 - the function body again please keep in
104:14 - mind the general idea as far as
104:15 - typescript doesn't change but I do want
104:17 - to make sure that we understand that we
104:20 - have multiple approaches so let me call
104:22 - this
104:23 - alternative over here then we will go
104:26 - with function create student in this
104:29 - case and I know that I'm going to get
104:32 - the
104:33 - object and I'm just going to give it a
104:35 - name of student so this still will be
104:38 - object but I'll just access it with
104:41 - student. student do and same deal I want
104:44 - to go with my annotation I'll say that
104:47 - ID will be number and name will be equal
104:50 - to a string over here and and then as
104:53 - far as D function body I'm actually
104:55 - going to go with void so we're not going
104:57 - to return anything from this function
105:00 - and we're just going to log stuff so let
105:02 - me scroll down a little bit let's set up
105:04 - the template literal welcome to the
105:08 - course I
105:09 - guess and let's access the student where
105:12 - we go with student and notice we right
105:15 - away get the suggestion which properties
105:19 - are on this object since this is what we
105:22 - specified
105:23 - in our type annotation and in this case
105:25 - I want to go with name and then to
105:29 - uppercase also please keep in mind that
105:32 - yes we can the structure right here in a
105:35 - function body as well that's totally an
105:38 - option so now let me call
105:41 - it with the new student so in this case
105:45 - just to again showcase that we have
105:48 - multiple approaches we want to go with
105:50 - student we want to set it equal to an
105:53 - object I'm going to go with five over
105:55 - here and name is going to be Anna and
105:58 - I'm just going to rely on typescript to
106:00 - infer the type and then we'll go with
106:03 - create student pass in the new student
106:06 - and if everything is correct we should
106:08 - have the value in the console and with
106:12 - this in place we can move on to the next
106:14 - topic okay and before we move on and
106:17 - start working on our next challenge
106:19 - let's also cover the access property
106:23 - check gotcha and for this one actually
106:28 - we don't need to create too much code
106:31 - from the scratch I'm just going to
106:33 - remove my first function from the
106:37 - previous video I'll leave create student
106:40 - as it is and I simply want to invoke it
106:44 - right
106:45 - below and in this case I will pass
106:48 - everything in line so unlike previously
106:52 - where we set the object now I'll provide
106:55 - all of these properties one by one let's
106:57 - start over here with ID I'll set it
107:00 - equal to one as note it's totally
107:04 - irrelevant to what we pass in here
107:06 - that's not the gotcha the gotcha is
107:08 - following if we add here extra property
107:12 - what do you think is going to happen
107:15 - well we have a type annotation for ID in
107:18 - string correct so I mean logic tells us
107:23 - that if we add here email and we set it
107:27 - equal to Bobo at gmail.com typescript is
107:32 - going to complain and you're totally
107:35 - correct essentially it says Hey listen
107:38 - you didn't specify that there's going to
107:39 - be an email while you're adding this to
107:43 - the object so this is something we
107:46 - expect however notice this interesting
107:49 - Behavior where I can go here with an
107:52 - email
107:53 - and essentially pass in some kind of
107:56 - value and you know what it's going to
107:59 - work typescript is not going to complain
108:02 - so yeah this is this interesting
108:04 - Behavior
108:05 - where when we pass in object properties
108:09 - in line typescript expects to match this
108:13 - exactly so if we'll add some extra
108:15 - properties TPT will immediately complain
108:18 - because in typescript mind we have a
108:21 - full control of what we're adding in
108:24 - line however if we're just referencing
108:27 - the object and there's an extra property
108:30 - the only thing typescript cares about
108:33 - are the properties that are in the type
108:35 - notation so if there's 120 extra
108:38 - properties typescript is like okay do
108:41 - you have an ID and name if yes we're
108:44 - good to go if not then of course there's
108:46 - still going to be an issue hopefully
108:49 - it's clear just remember this gotcha and
108:52 - you'll be good to go all right I think
108:55 - we're ready for our next challenge and
108:58 - at least in my opinion this one is going
108:59 - to be super interesting because we'll
109:02 - combine multiple things from the
109:05 - previous videos so we want to create a
109:08 - process data function which is going to
109:11 - accept two parameters first one is going
109:14 - to be input parameter which can be a
109:17 - string or a number and second one will
109:20 - be a config object and instead of that
109:24 - config object we'll have the reverse
109:27 - property which is a Boolean so if we
109:31 - pass in a number we just want to
109:35 - multiply the number with its own value
109:38 - essentially input multiplied by the
109:41 - input however if the input is the string
109:46 - our second option and if the reverse is
109:50 - true we want to reverse the string
109:54 - and set it uppercase now if we provide a
109:58 - string but the reverse is set to false
110:01 - well in that case we'll simply set up
110:05 - the string to be uppercase and just
110:08 - return it so let me navigate to my
110:11 - tutorial I think I'll just remove all of
110:14 - this logic and you know what for stars I
110:17 - want to set up a
110:19 - function in here I'm going to call the
110:22 - this
110:24 - process data I'm not going to set up any
110:27 - parameters yet same goes for
110:30 - functionality and I simply want to log
110:34 - it in three places essentially invoke it
110:36 - and then log it so in the first case I'm
110:39 - going to pass in 10 and
110:42 - then I'll set up two more hellos so
110:46 - these are going to be instances where we
110:48 - pass in the string and now as far as the
110:51 - process data like I said we have input
110:54 - over here but we want to use the type
110:57 - Union so either it's going to be a
110:59 - string or it will be a number so that
111:03 - will be our first parameter now the
111:06 - second one is the config one if we pass
111:10 - this config in there there's going to be
111:13 - a reverse property and as a sign note I
111:16 - actually forgot to do that so first one
111:18 - is hello and then we want to go with our
111:22 - config
111:23 - object and I will set the reverse equals
111:26 - to true so let's navigate to our
111:30 - parameters and let's set up the second
111:32 - one so I'm going to call this config
111:35 - it's an object and in there I'll have
111:38 - the reverse property so I'll set it
111:41 - equal to a Boolean now here's the kicker
111:46 - what if I pass in the number do I really
111:50 - care about that reverse one
111:53 - and the answer is no I only care about
111:55 - it if it's a string correct only then
111:58 - we'll check but if it's a number I mean
112:02 - doesn't really matter and therefore I
112:04 - can nicely set this as default reverse
112:07 - false so I'm not going to have to do
112:09 - that additional check basically Once I
112:11 - pass in the number I don't have to pass
112:15 - this additional config object so in here
112:18 - let's go with default one and set it
112:21 - equal to verse and false now let's also
112:25 - set up what we're returning from this
112:27 - function so either it's going to be a
112:29 - string or a number and now when it comes
112:33 - to logic well we have two options
112:36 - correct so we can have a string or a
112:41 - number so we do need to set up a typ
112:44 - guard if we want to multiply it I want
112:46 - to make sure that it's actually a number
112:48 - so let's go with if then type off if the
112:52 - input is equal to a number well that's
112:56 - when we want to multiply and return so
112:59 - let's go with return that input times
113:04 - input and it looks like I have a tiny
113:06 - typ over here this should be return and
113:09 - also we want to set up the else and in
113:12 - here we're going to go with the return
113:14 - then we'll check the config reverse so
113:18 - by default it's going to be false so if
113:22 - it's true then we want to set it to
113:24 - uppercase split reverse and join if not
113:28 - well then we'll simply return it with
113:31 - the uppercase so let's set up over here
113:34 - a dinary operator we're going to go with
113:37 - input then to uppercase let's invoke
113:41 - that then we're going to split it then
113:44 - we'll call a reverse on
113:47 - it over here and then lastly let's use
113:51 - join method let's do this and if it's
113:55 - false which is the default one we're
113:57 - going to go with input then
114:00 - two uppercase and we're going to invoke
114:03 - it so now let me navigate to the browser
114:06 - and let's see so I have 100 then I have
114:09 - straight up hello just to uppercase and
114:12 - then I have the reverse value again in
114:15 - my opinion the biggest gotcha is over
114:18 - here you see if you're not going to
114:21 - provide this default value over here
114:24 - then pretty much every time you'll
114:26 - invoke this processed
114:29 - data it's also expecting this object
114:31 - over here and if that's the
114:33 - functionality you want to go for it's
114:36 - definitely an option but in my opinion
114:38 - it's super useful to add this default
114:41 - one because in that case well if it's a
114:43 - number or if I don't want to actually
114:47 - reverse it well I simply don't provide
114:50 - that argument at least that was my line
114:52 - magic and with this in place we're done
114:54 - with the challenge and we can move on to
114:56 - the next topic all right and we have
114:59 - finally arrived at the type alas at
115:03 - least in my opinion one of the most
115:04 - exciting topics because once I learned
115:07 - the topic I was super super excited
115:10 - since it just eliminated bunch of clunky
115:14 - code and for this one actually want to
115:17 - start with the code
115:20 - already present because I want to cover
115:23 - some stuff on I highly encourage you to
115:25 - do pretty much the same there's really
115:27 - no need to type this from the scratch so
115:30 - grab it from the readme and then let's
115:32 - go line by line so we have two objects
115:36 - and we nicely set up over here the type
115:39 - annotations where ID is a number name is
115:43 - a string and is active is a buan so if
115:47 - I'm setting up some wrong values
115:49 - typescript is going to be super helpful
115:52 - and then we have a function which again
115:55 - is looking for a user and that user must
116:01 - have this particular shape ID is a
116:04 - number name is a string and is active is
116:08 - a buing okay beautiful and not only that
116:12 - but from this function for some weird
116:15 - reason we return the same thing we
116:18 - return the same shape we return ID name
116:21 - and is active and so is the
116:25 - functionality we just set it to
116:27 - uppercase and then return the user and I
116:30 - can tell you right away that there's
116:31 - nothing wrong with this code as far as
116:33 - functionality all of this works what is
116:37 - the biggest issue I mean we have code
116:40 - over here same code over here same code
116:43 - over here and then we have the return
116:47 - and this is just one file what do we
116:49 - have like 20 lines of code and pretty
116:51 - much we just
116:52 - constantly keep repeating this so
116:55 - without further Ado I want to introduce
116:58 - you to a type areas in typescript which
117:01 - again in my opinion is extremely helpful
117:05 - feature now before we continue let me
117:08 - just make sure that we are all on the
117:10 - same page you see a type Alias is just a
117:15 - new name or a shorthand for existing
117:19 - type and in this case we're talking
117:21 - about this type over here this type
117:23 - annotation so nothing is actually going
117:26 - to change as far as this syntax is
117:30 - concerned however with type Alias it's
117:33 - going to be easier to reuse this one so
117:37 - again please keep in mind we're not
117:39 - creating a new type it's just an Alas
117:42 - and all of the same rules apply to the
117:46 - alas one that's why I
117:49 - wanted initially to cover how we set up
117:53 - such inline type annotation because
117:56 - nothing is going to change as far as our
117:59 - functionality including the optional
118:01 - property and read only modifier the only
118:04 - difference well now the code is going to
118:06 - be in one place so if we ever want to
118:09 - change something we will only need to do
118:12 - that in one specific place and also our
118:16 - code is going to be less clunky because
118:17 - we'll just use that name and once I'm
118:20 - done with my long and B Bing monologue
118:23 - why don't we set it up and essentially
118:25 - the syntax is following we want to go
118:27 - with type that's the keyword now the
118:30 - convention is to go with the uppercase
118:34 - but you don't have to I mean you can
118:36 - call this also like this but in my case
118:38 - I will go with user and like I said
118:41 - before the syntax is the same so I
118:44 - simply want to take my first instance
118:48 - and set it equal to my user so now all
118:51 - throughout
118:52 - my file document project whatever I can
118:56 - use this user and this will mean the
118:59 - same exact thing so in here I can go
119:02 - with yeah John is going to be object and
119:05 - a type is actually going to be user same
119:08 - is going to be over here Susan is going
119:10 - to be a user now when we're creating a
119:14 - user what is the type well it's a user
119:16 - type and you can probably already guess
119:19 - same is going to be over here so we can
119:22 - go with user and now me question which
119:26 - one is easier to manage and
119:30 - read and if you said the second one
119:33 - you're absolutely correct so I can mess
119:36 - with you and say that you know what no
119:38 - actually this one was easier to work
119:40 - with but in reality we can clearly see
119:43 - that this is definitely easier to work
119:46 - with and I'm skipping a little bit ahead
119:49 - but we can actually also export this one
119:51 - as well as well so it's definitely an
119:54 - option so let's say we set it up in one
119:56 - file and then if we ever want to use
119:58 - this type alas somewhere else we can
120:01 - nicely export it import it in the file
120:04 - and we're pretty much good to go okay um
120:07 - before we move on and start working on
120:10 - our next challenge I also want to
120:12 - quickly showcase that we're not limited
120:16 - to using type Alias for object so it's
120:20 - definitely an option it's definitely
120:21 - something thing we're going to do but
120:23 - you can also do it for our previous
120:26 - examples as well for example I can go
120:29 - here with type I'm going to call this
120:31 - string or number and I'll set it equal
120:34 - to string then use the union type and
120:38 - set it equal to a number so now anywhere
120:42 - in my project where I want to use the
120:44 - union string or number I can use my type
120:47 - Alias instead of this hardcoded value so
120:51 - let's say that there's a value this one
120:53 - will have a type string or number and
120:56 - then we can go with value hello and also
120:59 - we can set the value equal to 1 two 3
121:03 - now is this something you're going to
121:05 - see
121:06 - often uh most likely not but still I
121:10 - definitely want to make sure that you
121:13 - know that it is a possibility now
121:16 - something that you will see quite often
121:19 - at least in my code is this I'm going to
121:22 - set up an alas but in this case I'm
121:25 - doing that for the literal type so I'm
121:27 - going to go with light or dark so this
121:30 - will be my tee and those are the values
121:33 - so it can be only light or dark and now
121:37 - if I have a theme
121:39 - variable I can go type theme then let me
121:43 - just change the values here notice how I
121:46 - right away have only these two options
121:48 - something I have discussed already quite
121:51 - a few times
121:53 - and in this case I'm going to go with
121:54 - light and what's also super super
121:57 - awesome that I can use the same theme
122:00 - one in the function so if I go here with
122:03 - set
122:05 - theme it's going to be looking for a
122:08 - parameter by the name of T and the type
122:12 - over here is actually going to be a
122:14 - theme and now I want to set my theme
122:17 - variable equal to
122:20 - whatever parameter gets passed in so now
122:23 - when we invoke the theme same deal over
122:27 - here notice how we can only use these
122:30 - two values again super super helpful
122:34 - especially as your project grows bigger
122:37 - so we can nicely set up this Alias and
122:40 - then use it when we set up the property
122:44 - or when we pass some parameter in the
122:48 - function and up next let's work on
122:50 - another challenge and and during the
122:52 - challenge we'll cover a few interesting
122:54 - things we'll cover how we can set up
122:56 - type Alias with the array how we can set
122:59 - up type alas with type Union and how to
123:02 - set up a typ guard if we're working with
123:05 - the object so here's the challenge we
123:09 - want to set up two types one is going to
123:11 - be the employee type and second one will
123:14 - be a manager type now for employee
123:17 - will'll set up two instances and then I
123:21 - guess manager will set up only one now
123:24 - the key difference is that for a manager
123:27 - there's going to be employees property
123:30 - and it's actually going to be an array
123:34 - of employee types so this is where we'll
123:38 - combine the Alias with the array and
123:41 - then we want to set up a function which
123:44 - actually is going to accept both types
123:48 - whether that is the employee or the
123:51 - manager
123:52 - and if the instance is the manager then
123:55 - we just want to showcase how many
123:57 - employees they have and if it's not the
124:00 - case then we'll just log in which
124:02 - department the employee is working so
124:05 - let's try to set this one
124:07 - up I'm going to go with my alas first
124:10 - and I'm looking for
124:12 - employee so this one will set it equal
124:15 - to an object there's going to be an ID
124:18 - property which is a number then we'll go
124:20 - with name we'll set that one equal to a
124:23 - string and then also there's going to be
124:26 - a department and for some
124:29 - reason I have a hinch that this is not
124:32 - correct typing so let me fix that so
124:35 - we're looking over here for Department
124:37 - which is a string
124:39 - now there's also going to be an alias
124:42 - for
124:43 - manager for this one same deal ID number
124:48 - name String so let me just copy them in
124:52 - order to make it faster and now I want
124:53 - to set up the
124:55 - employees which is going to be an array
124:58 - but an array of what it's not going to
125:01 - be an array of strings or numbers and if
125:04 - you remember in one of the previous
125:06 - examples we actually covered that we can
125:08 - set up type to be an object only in this
125:12 - case we already have the type Alias for
125:14 - that so I can simply say yeah it's going
125:16 - to be an array but it's going to be an
125:18 - array of employees okay good now let's
125:22 - set up those instances and then we'll
125:24 - work on a function so for starters
125:26 - there's going to be first employee we'll
125:29 - right away set up the type just so we
125:32 - don't mess up anything
125:34 - ed1 then
125:36 - name let's set it up and also let's come
125:41 - up with the department and in my case
125:43 - I'm going to go with sales let me copy
125:46 - and paste now I want to change the
125:48 - variable name so in here we'll set up as
125:52 - Steve same deal over here and then as
125:55 - far as the department let's go with HR
125:59 - then let's set up our manager as well so
126:03 - this will be Bob the type will be
126:06 - manager ID one name Bob or Bobo even
126:12 - better and then we'll go with employees
126:16 - and this is our array correct so now I
126:19 - want to grab Alice and deep so let's set
126:24 - these two up and now let's invoke the
126:26 - function the print staff details but of
126:30 - course before I can invoke
126:32 - it it would be useful if we would have
126:36 - this function in the first place correct
126:38 - so let me come up with the function I'm
126:41 - going to call this print staff and then
126:45 - details but here's the kicker how are we
126:48 - going to pass this in because at the
126:50 - moment we have two
126:52 - types so are we going to pass in just
126:55 - employee and then set up another
126:57 - function for the manager or we can
127:01 - somehow some way combine the two and the
127:04 - answer is well we can use the type Union
127:06 - so essentially I can go with type and
127:09 - then staff and set it equal to employee
127:13 - or it's going to be a manager and now
127:17 - this is our type so now I can nicely go
127:20 - to print staff detail details and say
127:22 - okay there's going to be an object and
127:25 - as far as the type actually going to be
127:27 - equal to a stat now I do want to set up
127:31 - the void over here since we're not going
127:33 - to return anything and now another
127:36 - million doll question well how we can
127:39 - check whether the staff object is the
127:45 - employee or a
127:46 - manager because if it's a manager then
127:49 - we do have an array but if it's the
127:52 - employee that's not the case and we
127:55 - cannot go with well is type off equal to
127:59 - an object well both of them are equal to
128:01 - an object so that's not going to make
128:04 - much difference here's what we want to
128:06 - do so we want to go with our condition
128:09 - and then we need to pick a property
128:12 - which is specific to the object so in
128:16 - this case that's the employees correct
128:19 - so we go here with the property and we
128:22 - say in and then our object over here so
128:25 - that's the staff if it's the case well
128:28 - then we know that it's a manager if not
128:31 - then we know it's a staff one so let's
128:34 - go and log something here we're going to
128:37 - go with staff name so let me access this
128:41 - one
128:42 - staff name and then we'll say is an
128:46 - employee in the specific department so
128:49 - in here we want to access again the
128:52 - staff one and now we're looking for
128:54 - Department again a property which is not
128:57 - on a manager and again typescript is
128:59 - smart it knows that if there's an
129:03 - employees this is going to be a manager
129:05 - if not well that's the staff then and I
129:07 - can access the department so let me add
129:10 - this one and now I want to just grab
129:13 - this console log and we'll just change a
129:14 - few things around still going to be a
129:18 - console log but we're going to go with
129:20 - manager and notice how right away
129:23 - typescript is correcting us essentially
129:26 - it says well department does not exist
129:28 - on type manager so now what do we want
129:31 - to do well we'll remove this we're going
129:34 - to go with employees and we're looking
129:35 - for length and let's just type
129:39 - employees okay good let's try it out
129:43 - going to navigate to the bottom and
129:46 - we're going to go with print staff
129:48 - details let's pass in the first one and
129:51 - and let's also pass in the Bob once we
129:54 - navigate to the browser we see that
129:55 - Alice is the employee and Bob is the
129:58 - manager so this is how we can combine
130:00 - multiple features this is how we can set
130:02 - up type Alias with the type Union this
130:07 - is how we can start using type aliases
130:09 - with the array and this is how we can
130:13 - set up a typ guard if we are working
130:17 - with the object uh next let's discuss
130:20 - the intersection type in Union which is
130:24 - a way for us to combine multiple types
130:28 - into one let's imagine this scenario we
130:32 - have a type book it is equal to a number
130:37 - name is equal to a string and there's
130:40 - also a price so we set up this number
130:42 - over here and we're good to go then
130:46 - let's create let's say two instances I'm
130:49 - going to call this book one is equal to
130:53 - an object and let's right away set up
130:56 - our type our book type and then in here
131:00 - let's provide some dummy values ID will
131:02 - be equal to one name will be how to cook
131:06 - a dragon because why not and also let's
131:09 - set up some kind of price so in this
131:11 - case it's going to be some random
131:14 - 15 then let me copy and
131:17 - paste and instead of Po one this is
131:20 - going to be b 2 now the type will stay
131:23 - the same the ID will be two as far as
131:27 - the name we're going to go with the
131:28 - secret life of unicorns and we're going
131:31 - to set the price equal to
131:34 - 18 so all this is good but what if I
131:36 - have a discounted book where not only I
131:40 - have these three properties but there's
131:42 - also a discount so first let's set it up
131:45 - and you know what I think we can speed
131:47 - this up a little bit where it's not
131:50 - going to be a book we're going to go
131:52 - with
131:54 - discounted book okay good now for now
131:58 - type will be book but clearly we'll have
132:01 - some issues I can right away tell you
132:03 - that then let's come up with the name in
132:06 - my case I'm going to go with this one
132:08 - price will be equal to 25 and we also
132:12 - want to add this discount property and
132:14 - we'll set this one equal to
132:19 - 0.15 and notice the moment we do that
132:22 - typescript complains why well because
132:25 - it's not in our types so there is no
132:29 - discon anywhere here so what's the
132:31 - solution well we could create another
132:33 - type correct we could just copy and
132:36 - paste and set up over here a discounted
132:39 - book type and then just add that
132:41 - discount property it's definitely an
132:43 - option or we can nicely utilize the
132:47 - intersection type how's that going to
132:50 - look like well we have multiple ways how
132:53 - we can set this up you can definitely do
132:55 - it over here in line where you go with
132:58 - and operator and you just add what more
133:03 - types you want to have for this
133:06 - particular instance so in this case I
133:08 - can go with discount and I can set it
133:11 - equal to a number and notice typescript
133:14 - doesn't complain anymore so now
133:16 - essentially it uses all of the
133:18 - properties from the book type already
133:21 - but we just added nicely the discount as
133:24 - well so that's one option or we can set
133:27 - up another alas now the logic here is
133:30 - not going to change so I can just cut it
133:33 - out and go type then discounted book and
133:37 - we're going to set it equal to this one
133:40 - so now for my discounted book I can use
133:42 - the discounted book type Alas and again
133:47 - the difference with Union type it's
133:49 - either going to be this type or the type
133:51 - on the other side of the pipe however
133:55 - with the intersection type now we
133:58 - combine them now we say yeah it's going
134:00 - to have all of the properties that we
134:01 - have in the book type and also there's
134:04 - going to be this discount one which is a
134:07 - type number all right and at the end of
134:10 - the type Alias section I quickly want to
134:12 - mention that type Alias also supports
134:15 - computed properties so we we don't
134:19 - always have to hardore code for example
134:23 - if I have a tiger object and eventually
134:26 - I'll set up the type you know what for
134:28 - now let's just set up the object in here
134:31 - I can go with age and set it equal to
134:33 - five so nothing new but we can also set
134:38 - up a variable in there we'll have a
134:42 - string and we'll actually use that
134:44 - string as a property name so straight up
134:48 - JavaScript let's say we're going to go
134:50 - with const prop name and we're going to
134:52 - set it equal to age and now instead of
134:56 - hard coding I can just go with prop name
135:00 - so if I'm going to change the string
135:03 - value now my property is also going to
135:05 - change over here in a tiger and we can
135:08 - do the same thing in type Alias I can go
135:11 - with type
135:13 - animal let's set it equal to our object
135:18 - and then instead of hard coding we're
135:19 - going to go with prop name and set it
135:21 - equal to a number I just need to follow
135:25 - the proper syntax over here and now
135:27 - let's set up the type for a tiger and
135:30 - we're good to go so just like in regular
135:32 - JavaScript we can use computed
135:35 - properties in type alas okay and up next
135:39 - let's cover interface type which is used
135:42 - to describe the shape of an object as a
135:45 - side note we are purposely covering
135:48 - interface type right after type Alias
135:52 - simply because they are very similar and
135:55 - yes before you ask quite often you can
135:59 - use either one of them and the result is
136:01 - going to be the same now what do
136:05 - programmers do when the same thing can
136:08 - be achieved in multiple ways well we
136:11 - argue about it on Twitter and try to
136:14 - convince everyone else that our solution
136:17 - is somehow some way
136:19 - better why because apparently that's the
136:22 - best use of our time and remember if all
136:26 - the other arguments don't work you can
136:28 - always say it's just a better practice
136:31 - to do it apparently that one always
136:34 - works jokes aside I do personally prefer
136:37 - type Alias over interface and therefore
136:40 - during the course most likely you'll see
136:43 - type Alias syntax more often but just
136:46 - like I mentioned before it really comes
136:49 - down to your preference despite what yet
136:52 - another Twitter Guru says okay hopefully
136:55 - I did not scare you away with my joke SL
137:00 - rant and if you're still here let's set
137:03 - up a book object so I'm going to
137:07 - navigate to my
137:08 - tutorial I'm going to call this deep
137:10 - work and you'll see a second why so
137:13 - we're going to go here with deep work if
137:17 - I only would know how to spell this is
137:20 - going to be my object we're going to go
137:22 - over here with this
137:25 - ISBN which essentially is just used for
137:28 - books as the ID so in my case I'm just
137:30 - going to go with one two three then
137:33 - we're going to come up with title I'm
137:35 - going to call this deep work as a sign
137:37 - of this is an awesome book again I'm by
137:39 - any means not being sponsored or I'm not
137:44 - trying to sell you this book but this is
137:46 - an awesome book uh you won't regret
137:49 - whatever dollar it costs so we're going
137:52 - to go over here with author that is
137:54 - going to be Cal
137:58 - Newport awesome and then let's also set
138:01 - up the genre and I believe it's
138:05 - selfhelp self and we're looking for help
138:08 - now I do need to add over here a comma
138:11 - and we already know how to set up ttype
138:13 - alas so probably this is something we're
138:15 - going to set up at the very end but we
138:19 - also can use the interface again this is
138:21 - something that we use if we want to
138:24 - describe the shape of the object now the
138:29 - keyword is interface then we come up
138:31 - with a name same deal lowercase
138:33 - uppercase totally up to you in my case
138:35 - I'm going to go with the uppercase and
138:38 - then instead of the equal sign we just
138:40 - want to set up over here the curlies and
138:44 - then same deal we go with the property
138:47 - name and then the type and I write away
138:50 - want to mention that the
138:54 - readon modifier which we covered with
138:57 - type alas as well as the optional
139:00 - property is also allowed and therefore
139:03 - I'll go right away with read only then
139:06 - I'll Target basically this book ID and
139:09 - I'll set it equal to a number remember
139:12 - if we'll try to modify this value later
139:14 - it's not going to work then also let's
139:16 - set up a string okay beautiful that's
139:19 - going to be 40 title then the same deal
139:22 - we're going to do with author we're
139:24 - going to set it equal to a string and
139:26 - the same is going to be for genre but
139:28 - I'm going to set it as optional again
139:31 - just so we get this one out of the way I
139:33 - don't think we need to spend a separate
139:36 - video on these two things since we have
139:38 - covered them before and effectively if I
139:41 - go here where is my deep work and if I
139:44 - set it equal to my book I'm going to go
139:48 - so if for some reason I go with a deep
139:52 - work and try to modify this property
139:56 - which is read only let's say I'm going
139:58 - to go with some value notice typescript
140:01 - is going to complain same deal is going
140:03 - to be if I'll try to add property that
140:07 - doesn't exist let's say price and I'm
140:09 - going to set it equal to
140:12 - 800 that is not going to work and then
140:15 - let's say for genre since it's optional
140:19 - property I can just remove it basically
140:22 - comment out and my code is still going
140:24 - to work and if you enjoy working on the
140:27 - challenges you can set up a type Alias
140:31 - for this deep work object and you'll see
140:34 - that in this scenario you can use either
140:38 - of those approaches and the result is
140:40 - going to be exactly the same okay and up
140:44 - next let's discuss methods in
140:47 - interfaces and we're going to spend few
140:50 - video videos on it just because it's not
140:54 - in my opinion a complex topic but it can
140:58 - be a little bit confusing because you
141:00 - can set up methods as properties as well
141:04 - so essentially you can mix and match and
141:07 - at that point it might look a little
141:09 - confusing so start with just straight up
141:13 - approach which is my preference and then
141:16 - I'll show you the alternative code that
141:19 - you might see somewhere in the wild so
141:23 - effectively if this book has for example
141:26 - a method of print author I just go
141:30 - directly to my interface in this case
141:32 - I'm going to add a comment and I'm going
141:35 - to come up with that method now please
141:37 - keep in mind here we're not typing any
141:40 - logic I'm just saying yes there's going
141:42 - to be a print method or you know what
141:46 - should be print author for some reason I
141:49 - went with print method
141:51 - it's not going to look for any
141:52 - parameters and then as far as the return
141:55 - it's not going to return anything it's
141:57 - just going to log so the moment I do
141:59 - that now notice I have typescript
142:02 - complaining because I haven't set up
142:04 - that method over here you know what just
142:07 - so I have
142:09 - less code I'm just going to remove those
142:13 - comments over here so now let's set up
142:15 - that method again this is going to be my
142:18 - Approach where I go print auth
142:21 - setup over here my method and in this
142:24 - case I'm not looking for any prams we'll
142:27 - cover that in a second and then we just
142:29 - go with log and then since I'm not using
142:33 - the arrow function syntax I can access
142:37 - any of these properties over here by
142:39 - using this again we're going to cover
142:43 - the arrow syntax approach a little later
142:45 - for now we just want to log the author
142:48 - that's it so now let's go go right after
142:51 - the object we're going to go deep work
142:54 - then we're going to invoke print author
142:57 - and if everything is correct we should
143:00 - see in a console the author so let me
143:03 - take a look at the browser and yep I
143:06 - have my Cal Newport so my logic works
143:11 - now what is the syntax if there's going
143:14 - to be a parameter well let's try it out
143:17 - in this case I'm going to go with print
143:19 - title and I'm just going add some
143:21 - message after the title I'll say this
143:24 - book is awesome or something along those
143:26 - lines so let's go here with
143:30 - title we set up the parameter as a sign
143:34 - note this name doesn't need to match
143:37 - whatever we set up over here in the
143:40 - instance so in here I'm just saying yes
143:43 - there's going to be some kind of
143:45 - parameter and I'm going to reference
143:47 - this as message now type is going to to
143:50 - be string and Just for kicks let's also
143:53 - return from this function again we're
143:56 - not setting up any kind of logic over
143:58 - here I'm just saying that there's going
144:00 - to be a method by the name of print
144:02 - title so now we want to scroll down and
144:06 - same deal we want to set up our function
144:09 - so I'm going to go with print title and
144:11 - I'm just going to call this value just
144:13 - to Showcase again they don't need to
144:15 - match now is my preference to set them
144:18 - up the same yes but again that is just
144:21 - my preference and then inside of the
144:24 - function same deal in this case I do
144:27 - want to return and notice how typescript
144:29 - essentially is complaining that hey you
144:32 - said that it's going to be a string over
144:34 - here and at the moment it's still void
144:36 - what's up with that so let me just
144:39 - access again this dot since we're not
144:42 - using the arrow function then we can
144:44 - access nicely title and I'm going to
144:46 - provide over here whatever message is
144:50 - going to be passed in and then let's
144:52 - keep on moving I guess right after the
144:55 - print
144:56 - author either we can log it right away
144:59 - or in my case I think I'm just going to
145:01 - store it in a result so let's go deep
145:03 - work then print uh nope it's not the one
145:08 - we want to go with print title and then
145:10 - let's say
145:11 - is awesome book so this will return a
145:15 - string so what do we do with string
145:17 - value well we log it and yes it looks
145:21 - like everything is correct but text is
145:25 - not so let me set it up properly or here
145:29 - again if we have a method in here we
145:33 - just set up the
145:34 - blueprint so what is going to be the
145:37 - method name whether we're going to
145:40 - accept any parameters if we do then it's
145:43 - useful to set up right away a type and
145:46 - also whether we're going to return
145:48 - something from this function or or no
145:51 - and then inside of the instance we set
145:53 - up the method and we just need to follow
145:57 - our blueprint so if we're not returning
146:00 - anything from this
146:02 - function we just set up the
146:04 - functionality if we are returning we
146:05 - need to make sure that the types match
146:08 - and with this syntax we can access any
146:12 - Properties by using this keyword okay
146:16 - and up next let's cover an alternative
146:18 - way how we can set up method me in
146:21 - interfaces now let me stress something
146:25 - technically this video is optional I
146:28 - just wanted to cover this because you
146:29 - might encounter such syntax somewhere in
146:32 - the wild but I personally tend to stick
146:36 - with the approach we covered in the
146:38 - previous video simply because I find it
146:41 - way more
146:42 - straightforward alternatively we can set
146:44 - up the method in the interface as a
146:48 - property how's that going to look look
146:50 - like well we can go here with print
146:53 - something and again the example is going
146:56 - to be pretty straightforward and
146:58 - essentially we set it here equal to a
147:01 - function but please keep in mind this is
147:03 - a syntax we're not setting up over here
147:05 - the arrow function this is just the
147:07 - syntax that we're using so we say that
147:10 - it's going to return a number and then
147:13 - we set it equal to some value and pass
147:17 - in the number and now with this proper
147:20 - in place we want to go to a deep work
147:24 - object and here we have quite a few
147:27 - options to set up this function so I'm
147:31 - going to add these comments I'm going to
147:33 - say First Option then there's going to
147:36 - be a second option and I believe there's
147:40 - going to be a third one as well but
147:42 - we'll see most likely I will improvise
147:45 - as we go so first option well we can use
147:49 - the good old
147:50 - function keyword so I'm going to go with
147:53 - print something that's going to be my
147:54 - property right now then I go with
147:56 - function same deal it's looking for some
147:59 - value now what is going to be the value
148:01 - that will be a number correct and then
148:05 - as far as the function body just so I
148:08 - return a number essentially I'm just
148:10 - going to go with some value now let me
148:13 - scroll down a little bit I mean most
148:16 - likely we can just remove these values
148:18 - just so our console is less busy and I
148:20 - can go with my deep work then let's go
148:24 - with print
148:25 - something we want to pass in some number
148:28 - why not
148:30 - 34 and then let me set up the log and
148:33 - let me move this sucker inside then let
148:37 - me remove my semicolon let's navigate
148:40 - here and notice I have 34 so again
148:45 - instead of setting up the straight up
148:47 - method now I set up the proper
148:51 - which is equal to a
148:52 - function in here if I have some
148:55 - parameters then I set up the type and I
148:58 - also say well what is this function
149:00 - returning again you don't have to return
149:02 - something from this function just
149:04 - because it's a property right now so
149:06 - that is going to be our first option
149:08 - okay let's common this one out and our
149:11 - second option is going to be Arrow
149:13 - function so we can go here with print
149:16 - something
149:17 - remember we want to access the some
149:20 - value that is going to be our parameter
149:24 - and then as far as the logic I'm going
149:26 - to go with some value now there's a
149:28 - reason why I'm setting up the curlies
149:30 - I'm fully aware that we can set up the
149:33 - implicit return the reason for that is
149:36 - because I wanted to Showcase
149:39 - that there's a gacha with this and arrow
149:42 - functions so Arrow function is going to
149:46 - capture the global this please keep that
149:48 - in mind if you're using Arrow function
149:50 - functions unlike the good old regular
149:52 - function where we right away have access
149:55 - to this which is scoped to this instance
149:59 - it's not going to be the case with the
150:02 - arrow function so for example if you
150:04 - want to access any of the properties in
150:06 - my case I'm going to go with author
150:09 - we'll have to go with deep work and then
150:11 - the author now let's navigate over here
150:13 - notice we have both we have the 34 and
150:16 - we also have the author so this will be
150:19 - our second option and I guess what was
150:24 - somewhat
150:25 - confusing is the fact that you can also
150:27 - do another
150:30 - way where I can go with print something
150:34 - and effectively just use the syntax we
150:37 - already used before so this also is
150:40 - going to work and that's why again my
150:43 - preference is just to use this approach
150:46 - where I set up the method and I clearly
150:50 - do the same thing inside of my instance
150:54 - so this will also work so we can go here
150:57 - with return and then some value print
151:00 - something and notice once we navigate
151:03 - back to the console this also works and
151:07 - lastly I'm not trying to confuse you too
151:10 - much but this also is going to work so
151:14 - notice we have over here this print
151:16 - author which is set up as a method but
151:19 - we can set this one up as a property so
151:22 - we can go here with print author now I
151:25 - believe typescript is going to complain
151:27 - so I'll uncomment the first one my
151:32 - Approach I guess if I have a property
151:34 - then we're going to go print
151:37 - author and we will set this up as a
151:40 - property and we'll set it equal to an
151:42 - arrow function again not trying to
151:45 - confuse you too much but just showing
151:47 - you alternative syntax that you might
151:50 - see somewhere again
151:52 - remember we don't want to use this we
151:55 - actually want to go with deep work and
151:58 - then we're going to look for author now
152:01 - tespt will complain since I already
152:03 - have my first approach but again if you
152:06 - navigate to the console you'll see that
152:09 - the result is there now I'm not calling
152:12 - print author that's the reason why I
152:14 - don't have it let me go here let me
152:17 - invoke it and you'll see that as far as
152:20 - functionality it works again what's
152:23 - confusing is that you can set the
152:25 - property equal to a function so instead
152:29 - of straight up method you set up a
152:30 - property which is actually equal to a
152:33 - function and then you can start doing
152:36 - this mix and match where yeah it was a
152:39 - property but then actually in here it's
152:40 - going to be a method and then the other
152:43 - way that's why my preference is to set
152:46 - up methods with this syntax and and the
152:50 - same in my instance just set up straight
152:53 - up methods simply because in my opinion
152:56 - it's just less confusing hopefully I
152:58 - didn't lose too many of you and with
153:01 - this in place now we can start working
153:03 - on our next task okay and once we're
153:06 - familiar with the interface fundamentals
153:10 - let's work on a small challenge where we
153:12 - want to set up a computer interface
153:16 - inside of it we want to set up few
153:18 - properties one is going to be read only
153:21 - which is going to be for object then
153:23 - brand equals to string Ram is going to
153:26 - be number upgrade ram will be a
153:31 - method and in there we're going to be
153:33 - looking for number and we'll return a
153:35 - number and also there's going to be a
153:38 - storage property which is going to be
153:41 - optional but the type is going to be
153:44 - number also once we have the
153:48 - interface we will set up the instance
153:52 - and we'll provide the properties apart
153:54 - from the optional one and then finally
153:59 - we'll also invoke the upgrade ram method
154:04 - so let's try it out let me set up my
154:08 - interface name will be a
154:12 - computer let's go line by line this one
154:14 - will be read only so I'll set it equal
154:17 - to my ID then brand equals to A String
154:23 - after that let's go with the ram that
154:25 - will be number okay then upgrade
154:30 - ram this one will be a
154:34 - method so we'll look for
154:38 - increase and this actually is going to
154:40 - be a number now from this function we
154:43 - want to return a number and then also
154:46 - let's set up the storage which will be
154:49 - optional and we'll set it equal to a
154:51 - number so now let's create our instance
154:54 - in my case it's going to be a
154:56 - laptop so set it equal to our object and
155:00 - we right away want to set up our
155:02 - interface type now let's pass in those
155:05 - values there will be an
155:08 - ID then a brand is going to be a random
155:13 - brand after that we have a ram we'll set
155:16 - it equal to 8 I guess 8 gigs and let's
155:21 - also set up our method upgrade ram as
155:25 - far as the parameter I'm going to go
155:27 - with different name just so you can see
155:28 - that for sure everything works even
155:31 - though the names don't match and in here
155:34 - let's just set up functionality where we
155:37 - grab the current Ram value and we just
155:41 - add the amount which is past in and then
155:45 - since I want to return a number I'm just
155:47 - going to go with this Dot and RAM this
155:51 - is what we're
155:52 - returning since the storage is optional
155:54 - I'm not going to pass it in let's just
155:57 - set up our instance then storage and now
156:02 - I'm going to set it equal to
156:04 - 256 we can log it so let's go over here
156:07 - with our laptop let's see yep I have my
156:14 - object a brand RAM and everything up to
156:19 - the upgrade RAM and also let's invoke
156:21 - the upgrade ram let's pass in some value
156:24 - and let's keep our console locked so
156:27 - we're going to go over here with another
156:29 - one I guess since we're returning the
156:31 - value so let's go with laptop upgrade
156:35 - ram let's pass in some kind of value in
156:38 - my case I'm going to go with four and
156:40 - then if everything is correct this is
156:43 - what we're getting back from the method
156:45 - and also our Ram instead of eight is
156:49 - actually equal to 12 okay and up next
156:52 - let's see how we can perform interface
156:56 - merging how we can extend the interface
157:00 - and then we'll work on another challenge
157:02 - and during that challenge we'll see how
157:05 - we can use typu with interface for
157:08 - starters I want to create two interfaces
157:11 - one for person and one for dog owner now
157:15 - both of them will have two properties I
157:18 - guess well one is going to be be a
157:19 - method name and let's say details so
157:24 - let's go with
157:25 - interface I'm going to go with person
157:27 - I'm looking for name I'll set it equal
157:30 - to a string and also there's going to be
157:32 - a get details method which will return a
157:37 - string so that's my person one and I
157:40 - also want to set up one for dog owner so
157:44 - let's just go here dog
157:47 - owner so that one will have a dog name I
157:52 - guess that's going to be my property
157:54 - name which is going to be string and
157:56 - then instead of get details we're going
157:58 - to go get
158:00 - dog details let's invoke it and again
158:03 - we're looking for a string over here
158:07 - okay beautiful and first let's see how
158:10 - we can merge the interfaces so once I
158:13 - have my person one I want to create my
158:16 - object I'm going to call this person and
158:19 - the type is going to be equal to my
158:21 - person interface now what are the two
158:24 - values we need to provide first we need
158:26 - to go with John and as I not I'm missing
158:30 - here the equal sign and the second will
158:32 - be the get details one so let's just go
158:36 - with get
158:39 - details that's the
158:41 - function and we're going
158:44 - to set up the
158:46 - functionality with the template string
158:48 - name
158:50 - colon then let me access the this dot so
158:55 - this do name and also let's add
158:59 - age so this one will also be equal to
159:02 - this Dot and then the
159:05 - age now notice over here how we don't
159:08 - have the age correct and one way is to
159:13 - go back and set it up over here in this
159:17 - person but there's another way how we
159:20 - can add this property and that is by
159:22 - merging the
159:25 - interfaces and I know that this looks a
159:27 - little funky in the beginning please
159:30 - keep in mind that most likely you're not
159:31 - going to do that in the same file but
159:33 - let's say if you're getting the
159:34 - interface from somewhere if you know the
159:37 - name you can do something like this and
159:40 - as a said note yes essentially I'm using
159:43 - the same name I go with interface person
159:46 - and then I just go with age now number
159:50 - so I add that extra property over here
159:53 - now this also needs to be in my instance
159:56 - correct so in here I need to come up
159:58 - with some kind of value and now the get
160:01 - details is correct I can access both the
160:05 - name and age so I have the first one and
160:09 - then I just merge so whatever properties
160:11 - I'm going to set it up over here yes
160:15 - essentially if I create this instance
160:17 - now all of these properties
160:20 - will have to be there hopefully that is
160:22 - clear now just a showcase let me go with
160:26 - person Dot and then get details let's
160:28 - invoke it and for some reason I don't
160:32 - see anything in the console and of
160:34 - course because I'm returning so what am
160:37 - I doing here let me go with my log me
160:41 - move this sucker
160:43 - up and now let's try it out yep I have
160:46 - name John and age is 30
160:49 - and up next let's see how we can extend
160:51 - the interface which is a way for us to
160:54 - create a new
160:55 - interface that inherits or essentially
160:59 - just uses the properties and
161:01 - methods from the existing interface now
161:05 - it sounds more complex than it actually
161:08 - is imagine the scenario we have an
161:13 - employee
161:16 - instance and for now we're not going to
161:19 - set the type let's just set it equal to
161:21 - an object I'm going to go with some kind
161:23 - of name I'm going to go not with John
161:26 - let's go with Jane over here then let's
161:29 - also set up the age CU
161:32 - remember we already added this to a
161:34 - person so now essentially we need name
161:38 - we need get details and we also need an
161:41 - age so let's set up some kind of age
161:45 - here then let's go with our details
161:49 - however in this case since we're going
161:51 - to add one more
161:53 - property the return is going to be a
161:55 - little bit different here's the thing
161:58 - Jane is a person that kind of makes
162:00 - sense correct so I can definitely set it
162:03 - equal to a person and call it a day
162:07 - however let's imagine that Jane since
162:10 - she's an employee she also has the
162:13 - employee ID now I don't want to add it
162:16 - to a person so I want to keep this as a
162:19 - separate interface but I do want to use
162:22 - all of the properties that I already
162:25 - have in my person one and just add on
162:28 - that employee ID so here's how we can do
162:32 - that we go with
162:34 - interface then come up with a name in my
162:37 - case I'm going to go with employee and
162:39 - then we go with this extends and now
162:41 - we're just looking for a specific
162:44 - interface we want to use and now let's
162:46 - just add this
162:48 - employee ID and set it equal to a number
162:53 - so now Jane not only she's going to be a
162:55 - person but she's also going to be an
162:58 - employee so now when we set up the type
163:01 - we go with employee and now not only I
163:05 - have name and age but I also need to
163:08 - apply this employee ID so let's add this
163:12 - one let's say over here 1 two 3 and then
163:15 - remember details needs to return a
163:18 - string so in this case I'm just going to
163:21 - grab whatever we have over here and then
163:25 - let's just add the employee ID as well
163:28 - so let's add a
163:30 - comma we're going to go with ID and then
163:33 - let's access this Dot and then employee
163:37 - ID now just so we can see that
163:39 - everything works I guess instead of
163:41 - person
163:42 - details let me go with
163:46 - employee get details and yep and have
163:49 - all three values in the console now we
163:54 - can also inherit from multiple
163:57 - interfaces essentially I can extend from
164:00 - the person as well as the dog
164:04 - owner so we're going to go with a
164:07 - manager instance I guess so we're going
164:09 - to go here with
164:11 - manager eventually we'll set up the type
164:13 - for now I just want to provide a name
164:16 - it's going to be equal to a bob and also
164:19 - for now let's go with the AG which will
164:22 - be equal to
164:24 - A35 now when it comes to
164:27 - Bob not only is going to be a person so
164:32 - we'll need to provide all of the
164:33 - properties but also let's imagine that
164:35 - he's a dog owner so essentially we want
164:38 - to extend from both interfaces that we
164:40 - already currently have the person and a
164:43 - dog owner now since Bob is a manager I
164:47 - also want to add a a method onto the
164:51 - interface and in my case I'm going to
164:53 - call this manage people so let's move
164:55 - where we have Bob and first I guess
164:58 - let's construct the interface and then
165:00 - we'll worry about the properties so
165:02 - we're going to go with interface manager
165:05 - for stars let's just add that method
165:08 - that I was talking about so I simply
165:10 - want to go with manage
165:13 - people uh it's not going to take any
165:15 - parameters and we're not going to return
165:17 - anything and if we set this equal to a
165:20 - bob we'll have an issue since we have
165:23 - two properties that we haven't set up in
165:25 - our interface so now let's go with
165:28 - extends and one by one let's look for
165:31 - those interfaces so we're looking for a
165:34 - person and a dog owner so Bob is a
165:39 - manager a person and a dog owner and now
165:44 - if I navigate over here and set it equal
165:47 - to manager type I will have to provide
165:51 - all of these values what they are well
165:53 - we need to provide a dog name let's go
165:56 - direct Rex it's a super popular name
165:59 - then we also have get details and you
166:01 - know what in this case I will speed this
166:03 - up I really don't want to type
166:06 - everything from the scratch so we have
166:08 - get details what do we want to access
166:10 - here I guess let's just go with age
166:13 - since we don't have the employee ID then
166:16 - we also have one for dog so let's go
166:19 - with get dog
166:24 - details now we will go with name is and
166:27 - then let's access the dog
166:32 - name dog name over here then let's
166:35 - remove the age guess we don't need it
166:38 - and lastly let's set up that manage
166:41 - people manage people let's invoke it and
166:45 - for now we simply want to log so let's
166:48 - set up a console log and let's write a
166:51 - text managing people and lastly just to
166:55 - test it out that everything works want
166:57 - to go with manager and it's invoke
167:01 - manage people if everything is correct
167:03 - we should have this text in a console
167:06 - and again this is how we can merge
167:09 - interfaces by essentially using the same
167:11 - name and just adding the properties
167:14 - another name that you might hear is
167:17 - reopen essentially they mean the same
167:19 - thing where we declare the interface
167:22 - with the same name one more time and
167:25 - then typescript is going to merge them
167:28 - together and we can also extend so let's
167:32 - say if we have an interface with some
167:35 - properties and methods and we just want
167:37 - to grab methods and properties from some
167:40 - other interface simply go with extends
167:43 - we look for that specific interface and
167:46 - in the process we'll right away get
167:48 - those methods
167:49 - and properties and with this in place we
167:52 - can move on to the next task and up next
167:56 - let's work on another
167:58 - challenge and during the challenge we'll
168:01 - see how we can use
168:03 - typu with
168:05 - the interface now I did split up the
168:09 - challenge into multiple videos so in the
168:12 - first video we'll kind of prepare
168:15 - everything we'll set up our function we
168:18 - will will return one of the interface
168:22 - types and then in the following video we
168:24 - will work on more logic where we'll see
168:27 - how we can use the typ guard so I didn't
168:29 - want to jam everything in one video
168:31 - because there's quite a few lines of
168:32 - code
168:33 - and I mean the most important thing is
168:36 - kind of at the very end and usually if
168:38 - it's a long video then people just lose
168:41 - the interest so long story short we want
168:43 - to define a person interface with the
168:48 - name String then we want to set up a dog
168:51 - owner which extends the person and just
168:53 - add the dog name which is going to be a
168:55 - string and also we want to set up a
168:57 - manager which extends the person so not
169:00 - person and dog owner no the manager is
169:04 - going to extend only the person and
169:06 - we'll just add two more methods on it
169:10 - then we want to set up the instance
169:13 - which can be either of them so we'll use
169:17 - the Union type and actually we'll set it
169:20 - equal to get employee function now in
169:24 - there in get employee we'll just call
169:27 - math.random and based on value we'll
169:30 - return one of those interfaces so
169:34 - whether a person dog owner and a manager
169:37 - and again in the next video we'll see
169:39 - how we can use the typ guard because
169:41 - there's a
169:43 - gacha that we need to be aware of STS
169:46 - let's navigate to tutorial one by one
169:49 - let's set it up so this is an interface
169:51 - we want to go with person let's go with
169:54 - name equals string okay then let's also
169:58 - set up a dog
169:59 - owner so we have here
170:03 - interface dog owner now that one will
170:09 - extend the person so we'll get that name
170:13 - property and we also want to add the dog
170:16 - name dog name will be equal to a string
170:19 - and then the last interface is going to
170:22 - be a
170:25 - manager which is going to extend the
170:28 - person and in here let's go with manage
170:32 - people that's our method and we're
170:36 - simply going to go with void and also
170:38 - copy and paste and let's say delegate
170:43 - tasks so those are our two
170:46 - functions and then let's set up our our
170:49 - instance but before we do that let's
170:52 - also set up a function and I'm going to
170:54 - call this get
170:56 - employe and this is the function that
170:59 - we're going to use in our employee
171:01 - instance so for starters I'm going to go
171:03 - here with const
171:06 - employee and as far as the type I'm
171:09 - going to use the union type so either
171:11 - it's going to be a person or it's going
171:14 - to be a dog owner or it's going to be a
171:17 - manager and I'm going to say it equal to
171:19 - my get employee and I'm going to invoke
171:22 - it now I didn't want to move this
171:25 - function up simply because in the
171:29 - following video we'll write the code
171:31 - over here and I think it's going to be
171:33 - less confusing so let me move it up
171:35 - that's going to be our function and
171:37 - here's the task inside of the get
171:41 - employee I want to
171:44 - invoke math. random and then based on
171:47 - the value if it's say less than
171:51 - 0.33 well then I'm just going to return
171:53 - a person interface if not then it's
171:57 - going to be a dog owner and if not then
171:59 - it's going to be a manager so I have
172:01 - this employee notice over here it just
172:04 - says well the moment you're returning
172:07 - void
172:08 - and that's not what the employee is
172:11 - expecting so in here I'm looking for one
172:14 - of these three
172:15 - values now in this get employee we're
172:18 - not not going to pass any
172:20 - parameters simply want to go with our
172:22 - logic so let's set up the random that
172:26 - one will be equal to math. random so
172:28 - we'll get some random value between zero
172:31 - and one and now let's just work on those
172:35 - returns but also let's set up the type
172:38 - right away so we're looking for
172:40 - person we'll also grab the dog owner and
172:45 - potentially this could be a manager so
172:47 - again we don't know what the value is
172:50 - going to be so every time we'll refresh
172:53 - the browser we'll get some random value
172:55 - over here and then based on that value
172:58 - we'll set up that return so let's start
173:00 - with our first option if the value is
173:03 - less than
173:05 - 0.33 well in that case I want to go here
173:08 - and I want to return a name John so
173:12 - which interface is that well that's the
173:14 - person one correct so these two match
173:18 - then let's also set up another else
173:21 - if so if the random is less than
173:26 - 0.66 in that case let me grab this and
173:30 - now we just want to add the dog name so
173:33 - in this case we're going to go with
173:35 - Sarah and we're going to go with dog
173:39 - name and we're going to set it equal to
173:41 - Rex now
173:43 - lastly if it's not less than 0.33 if
173:48 - it's not less than
173:52 - 0.66 then we're going to go with another
173:56 - else and in here we want to return a
173:59 - manager interface so in this case we're
174:02 - going to go with return Then object name
174:06 - will be equal to a bob and then let's
174:08 - set up those two methods we're going to
174:11 - go with manage people and as far as the
174:13 - logic let me just go with console log
174:17 - and we're going to say managing
174:22 - people dot okay good and then let's do
174:26 - the same thing for delegate
174:32 - tasks that's my function and as far as
174:36 - the text it's going to
174:41 - match now let me navigate where I have
174:45 - the employee and let's just log it like
174:48 - I said we'll have to refresh the browser
174:50 - so once I navigate over here notice this
174:52 - was my person instance then I get over
174:56 - here the manager correct then I get the
175:00 - dog owner and as you can see every time
175:03 - we refresh the browser we're getting a
175:06 - different value so in here
175:08 - again we want to set get employee and we
175:11 - want to make sure that we only return
175:15 - one of these interfaces we use the unit
175:18 - type and then when it comes to the
175:21 - instance same deal I'm looking for one
175:24 - of these three values so employee is
175:27 - going to be either a person a dog owner
175:30 - or a manager and in the following video
175:32 - we'll introduce the typ guard and make
175:35 - this challenge more complex okay and
175:38 - with this in place now let's make this
175:40 - challenge more complex by adding a
175:43 - function which is going to check for
175:47 - specific interface and only if it's a
175:51 - manager we want to invoke delegate tasks
175:55 - because here's the kicker we get back
175:58 - our object we store it in the employee
176:01 - and if we try to go with name everything
176:04 - works why well because dog owner extends
176:07 - the person manager extends the person so
176:10 - that property will be definitely there
176:12 - we can navigate to the browser we just
176:14 - need to refresh and eventually we will
176:16 - see all three values but it's different
176:19 - with delegate tasks so notice once you
176:22 - start typing typescript is complaining
176:24 - it says well listen it could be either
176:27 - the person or a dog owner or a manager
176:30 - so you don't know that 100% the delegate
176:34 - tasks is going to be there at runtime
176:37 - this is why we want to set up a function
176:40 - and we'll start with somewhat
176:43 - straightforward approach and then we'll
176:46 - cover why we want to use type predicate
176:49 - so let's go here with a function my
176:51 - okaye I'm going to call this is manager
176:53 - so I want to make sure that it's a
176:55 - manager and then in the if block I'm
176:59 - just going to invoke delegate tasks
177:01 - That's My overall goal so I'm going to
177:04 - be looking for object because this is
177:05 - what we're getting back from employee
177:08 - but same deal as far as the parameter
177:10 - well it can be one of these three
177:14 - interfaces okay then as far as the
177:17 - return like I said for now let's just go
177:19 - with the straightforward approach where
177:21 - I'm going to go with Boolean either it's
177:23 - going to be true or false and I guess
177:26 - the first gotcha in here is the
177:29 - return remember previously when we used
177:31 - the typ guards we did something like
177:33 - this we went with type of then object
177:38 - and set it equal to something now is it
177:41 - equal to what object well all of them
177:44 - are objects so that's not
177:47 - specific so if I invoke his manager with
177:50 - employee this should return for all of
177:54 - them pretty much the same value let's
177:55 - try it out we're going to go here with
177:58 - log is manager then let's pass in the
178:02 - employee and let's take a look at the
178:03 - console notice as I'm clicking I'm all
178:06 - the time getting true so yeah this time
178:10 - guard is great but it's not going to
178:12 - work in this case so if we want to check
178:17 - for manager we want to look for
178:18 - something
178:19 - specific and that something specific is
178:22 - one of these methods and the syntax is
178:25 - following where we want to go with the
178:27 - method which will pass in the string and
178:31 - in and then the parameter in this case
178:34 - object so now let's correctly type one
178:39 - of the methods in my case manage people
178:43 - and now let's navigate to the browser
178:46 - and again once we refresh we'll actually
178:49 - see correct
178:50 - results only if the interface is manager
178:54 - then we return true and if it's not the
178:57 - case then we return false but there's
178:59 - another gotcha so now let's go and set
179:03 - up if block I'm going to go with is
179:05 - manager I'll pass in the employee pretty
179:09 - much our setup and then let's try to
179:12 - invoke
179:14 - employee and same deal I don't have
179:17 - delegate tasks for some
179:19 - reason let me try to invoke it and again
179:23 - typescript is complaining so here's the
179:25 - deal yes our logic over here is correct
179:29 - but just because we return a Boolean
179:32 - from this function doesn't automatically
179:35 - signal to a typescript that now
179:38 - employees actually type of
179:40 - manager and here basically yeah we
179:43 - passed the if condition but as far as
179:46 - typescript is concerned it it can be
179:48 - still one of these three types and this
179:51 - is where type predicate is super useful
179:55 - and that is a special kind of return
179:58 - that not only returns a bullion but also
180:02 - it
180:03 - asserts the argument to be a specific
180:06 - type so what am I talking about in here
180:09 - instead of the Boolean we can go with
180:12 - object that's going to be the syntax is
180:16 - and then since I'm checking over here
180:18 - for the
180:19 - manager that's the interface I'm going
180:21 - to use and now typescript definitely
180:24 - knows that once we pass this condition
180:28 - this will be a interface manager so once
180:33 - I navigate back over here going to
180:35 - refresh once I'm getting back the
180:38 - manager I'm also logging delegating
180:41 - tasks okay and at the very end of the
180:44 - interface section I also want to cover
180:47 - the differences between the interface
180:50 - and the type alas so if you're setting
180:54 - up the object since interface is used to
180:58 - provide the shape of an object you can
181:00 - use either of them so if I have object
181:03 - John with name and age I can either use
181:07 - the Alias type person or I can use the
181:10 - interface person now as far as the
181:13 - differences you see type alas we can
181:16 - also set up for primitive types for
181:20 - example if I have number or the union
181:22 - type number or string and the literal
181:26 - types you won't be able to do that with
181:28 - the interface so that's the first
181:30 - difference again when it comes to
181:33 - interfaces they're useful to provide the
181:36 - shape of an object but you won't use
181:39 - them with the Primitive or with the
181:42 - literal type now with interfaces we can
181:47 - merge them together like we covered
181:49 - before or another word is to reopen them
181:53 - you won't be able to do that with the
181:56 - type so with the interface you can set
182:00 - up the interface you can add some
182:03 - properties then I don't know three lines
182:05 - later you can create the same interface
182:08 - basically with the same name just add
182:10 - more properties and you're good to go
182:12 - that doesn't fly with the type that's
182:15 - another difference now as as far as the
182:18 - interfaces they can be implemented by
182:21 - the classes while the type aliases
182:24 - cannot be implemented in such way so if
182:27 - you work with classes this is something
182:28 - to keep in mind you can use the
182:32 - interface with the class but you won't
182:33 - be able to implement the type Alias with
182:36 - the class and lastly remember when we
182:39 - covered computed properties you can only
182:42 - do that with type Alias so you won't be
182:44 - able to use the computered properties
182:48 - with the interface and with this in
182:50 - place now we can move on to our next
182:52 - topic okay and up next let's discuss
182:55 - Tuple or Tuple in typescript which is a
182:58 - special type since we don't have it in
183:01 - JavaScript and essentially it allows us
183:04 - to set up an
183:06 - array with fixed
183:08 - length and ordered with fixed type in
183:13 - other words it's super useful when we
183:15 - want to group different types of values
183:18 - together so for example I have a let
183:23 - person now this is an array and here I
183:27 - have string of John and then number of
183:31 - 25 I can set the type in such a way
183:35 - where I go with my array and then I
183:38 - provide those values so in this case I'm
183:41 - going to go with string and number so
183:44 - now this value is fixed so if I'm going
183:47 - to try to add something else like hello
183:51 - typescript is going to complain if the
183:54 - types are not going to match if for
183:57 - example I do decide to place 25 over
184:02 - here typescript also is going to
184:04 - complain so not only we have fixed
184:07 - length but also we right away set up the
184:11 - fixed types so now this value can be
184:15 - only the string and number now there is
184:18 - a gacha something I'm going to cover in
184:21 - a second but for now let's just focus on
184:23 - this that yes it's going to be John and
184:26 - it's going to be 25 now you're not
184:28 - limited to only two values over here you
184:32 - can set up as many as you want and for
184:35 - example you can go here with number and
184:37 - number I mean that's also an option
184:40 - let's say you don't want to have just an
184:42 - array of numbers but you want to have an
184:45 - array with fixed amount of numbers so
184:49 - let me just go here let's say with
184:51 - date so in this case it's going to be
184:55 - number number and number and then
184:58 - depending where you live either you'll
185:00 - pass in the month or the day so let's
185:03 - say I'm going to go 12 then
185:06 - 17 and then we're going to go with
185:09 - 2001 so notice now this is a fixed array
185:13 - with number number number so again if we
185:16 - make any changes that typescript will
185:19 - complain about it now it's useful if
185:22 - let's say we want to return something
185:24 - from the function let me go with
185:26 - function get person and we're not going
185:29 - to provide any parameters I'm just going
185:32 - to say that yeah this function is going
185:34 - to return an array with such types so
185:37 - string and number so now let's set up
185:39 - the function body where we want to go
185:42 - with our array we want to pass in John
185:46 - and we're going to go with our
185:48 - 25 so now if we have random person now
185:52 - and that one is equal to a get person we
185:56 - invoke it if we
185:59 - log random person and then zero copy and
186:03 - paste and one in a console we should
186:06 - have both of those values now like I
186:10 - mentioned the gotcha here is that even
186:14 - though when we're hardcoding these
186:16 - values typescript is going to complain
186:19 - unless we provide over here this read
186:21 - only we can actually add items or remove
186:25 - items from our particular array so how
186:30 - is that going to look like well let's
186:31 - say if I go with date.
186:34 - push I can add the values and typescript
186:37 - actually is not going to complain about
186:39 - it now it complains because it's not a
186:42 - number right so it says well it's not a
186:45 - number but if I change this to do my 34
186:49 - everything is going to be fine so I can
186:52 - set up multiple instances and now if I
186:55 - loged the date check it out it's
186:58 - probably not something that we expected
187:01 - now the workr is to provide this readon
187:05 - over here so in this case I cannot do
187:08 - that so once we add this
187:10 - readon we cannot use anymore the push
187:13 - pop or whatever methods that's something
187:17 - to keep in mind now lastly I also want
187:19 - to mention that we can use the
187:23 - optional parameters as well so let's
187:27 - say if I'm going to create a new
187:31 - instance and I'm going to call this
187:34 - Susan so I'm going to go with my Tuple
187:38 - we're going to set up a string number
187:41 - and in here I'm just going to go with my
187:42 - optional parameter once I set it equal
187:45 - to my function notice I can just provide
187:49 - the string and basically I'm good to go
187:52 - typescript is not complaining this
187:55 - should do it for tuples in typescript
187:59 - and up next we're going to discuss enums
188:01 - in
188:02 - typescript okay and up next let's
188:05 - discuss enums in typescript against
188:08 - something we don't have in JavaScript
188:10 - and essentially enums allow us to define
188:13 - a set of named constants the syntax as
188:17 - following we want to go with keyword
188:19 - enum then let's come up with a name in
188:22 - my case I'm going to go with server
188:23 - response status since we'll have a
188:27 - little bit of functionality so we're
188:29 - going to go with response
188:32 - status then we want to go with the
188:34 - curries and this is totally up to you
188:37 - you can go all lowercase you can
188:40 - capitalize the first letter or you can
188:42 - go all
188:44 - uppercase totally up to you we just need
188:47 - to provide divide over here the values
188:49 - and in a second I'll show you what this
188:51 - actually results
188:53 - to so first one is going to be success
188:56 - and then the error now we can add more
188:59 - but for our example we really don't need
189:01 - it then let's set up the
189:05 - interface in this case I'm going to call
189:07 - This Server response and then the first
189:11 - property result actually is going to be
189:14 - type of enum so let's set it equal to to
189:17 - server response status and then another
189:21 - one is going to be a data and this will
189:23 - be an array of strings so now let's set
189:25 - up a function get server response which
189:29 - actually is going to return this
189:31 - interface so we go here with function
189:34 - get server response let's invoke that as
189:38 - far as the return type let's set up the
189:41 - server response so this is equal right
189:44 - now to our interface and then inside of
189:48 - the function body we want to go result
189:51 - and now since this is type enum over
189:54 - here this is what we want to use so we
189:56 - go over here with server response status
190:00 - and notice we either have error or
190:02 - success again you can use enm if you
190:05 - want to store some constants and then
190:07 - later on use it in your project so now
190:10 - in this case we only can provide success
190:14 - or the error so let me type this one and
190:17 - then in order to match our interface
190:20 - I'll provide data as well I'll say first
190:24 - item then comma and we're going to go
190:27 - with second item now I do need to add a
190:29 - comma over here we do want to invoke it
190:32 - and set it equal to response
190:35 - const response is equal
190:38 - to our get server response let's invoke
190:43 - this function over here and let's set up
190:46 - the type what we're expecting so we're
190:48 - going to look for our interface and then
190:51 - let's
190:52 - also log the response just because I
190:54 - want to show you the potential values we
190:58 - can set up over here so at the moment we
191:00 - have success and error and by default
191:04 - they
191:05 - actually get the numb starting with zero
191:09 - and I'll show you what I mean in a
191:11 - second so first let me just log the
191:13 - response and notice how the result is
191:16 - zero
191:17 - now why is that well because if we go up
191:21 - over here and we log server response
191:24 - status we'll see that we have right now
191:28 - the success and error and the values are
191:32 - zero and one so it starts with zero then
191:36 - one and then pretty much the more values
191:39 - you add well the more numbers you're
191:41 - going to have now don't be surprised if
191:44 - you see quite a few values in a console
191:46 - ENT
191:48 - at the moment we have four of them this
191:50 - is something we're going to discuss in
191:52 - the upcoming video for now I just want
191:54 - to showcase that even by default you get
191:58 - those values starting with zero so 0 1 2
192:01 - 3 and whatever you can also reassign
192:04 - them so for example I can say that
192:07 - success is going to be equal to a 500 or
192:10 - I'm sorry 200 and error is going to be
192:13 - equal to 500 or I can mix and match I
192:16 - can say that yeah error is actually
192:19 - going to be equal to this string this
192:22 - also is valid and again the main point
192:24 - is that now we have over here this
192:27 - constant which we can use all throughout
192:30 - our project instead of trying to make
192:32 - sure that we type the string or the
192:35 - number correctly okay and up next let's
192:38 - take a look at the gacha with enams
192:41 - which is the fact that when you have
192:42 - number values it's actually going to do
192:45 - the reverse mapping
192:47 - and remember it is the default so if we
192:51 - don't provide anything we will get that
192:53 - reverse mapping for example if I provide
192:56 - over here 200 and 500 if I navigate to
192:59 - the browser again I have more values
193:02 - over here in this object so not only
193:05 - error and success but I also have this
193:08 - reverse where number is actually a
193:11 - property and then whatever is my
193:14 - constant name is set as value now why do
193:18 - we care well because let's say we want
193:20 - to iterate over the values in JavaScript
193:24 - we have object. values and then we pass
193:28 - in the object in this case we'll pass in
193:31 - the inum and you'll see that everything
193:33 - is going to work but it's going to
193:35 - depend what kind of value we have over
193:37 - here if we have a number we'll have to
193:39 - do an extra check so let's go here with
193:43 - object dot values then let's provide
193:47 - server response status and we're going
193:50 - to go with for each so we're iterating
193:54 - over now I want to grab every value and
193:58 - we'll just log
194:00 - it and again since I have the number
194:04 - values I have this reverse mapping so
194:07 - now not only I have the number value I
194:12 - also have this success and error and
194:15 - it's not going to be the case if
194:17 - let's say we're going to go here with
194:20 - success and in here error again
194:23 - something valid that you might set up in
194:26 - your code now everything is correct now
194:29 - we're only accessing that string so if
194:33 - we have numbers which again is the
194:36 - default setup so again let me set it up
194:38 - here as 200 just so we're on the same
194:43 - page the solution over here is just to
194:46 - add another another typ guard so if I
194:49 - only want to access the values they are
194:51 - type what their number so this was going
194:55 - to be a string therefore in here I'll
194:57 - say if type
195:00 - off and value that was the name of my
195:04 - parameter if it's equal to a number well
195:08 - then I want to log it or do some kind of
195:11 - functionality in this case just log so
195:13 - we're going to go with console log and
195:15 - we'll log the value so now we
195:18 - correctly just access those number
195:21 - values now another place where we need
195:24 - to be careful is when we're setting up
195:27 - the value so notice something
195:30 - interesting if I have an
195:32 - enum I have a constant over here and the
195:35 - value is number then later when I set up
195:41 - this enum as my type I can still use the
195:44 - good old number so this is going to work
195:48 - because again typescript is doing that
195:50 - reverse mapping however if you have an
195:54 - enum where the constant value is
195:57 - actually string this is not going to fly
196:00 - so just to Showcase that I think I'll
196:03 - comment this one out so if I have here
196:06 - 200 and 500 if I set up over here this
196:10 - result to be equal to my enum I can go
196:13 - to my server response and this is going
196:16 - to work work so typescript is not going
196:19 - to complain about it and I can see that
196:21 - my code runs and everything is awesome
196:24 - however if again and I promised for the
196:27 - last time we'll change it around we go
196:29 - with success and error this is not going
196:33 - to fly if we navigate back to our get
196:36 - server response and try to provide the
196:39 - string value as you can see right now
196:42 - typescript is complaining so we cannot
196:44 - assign string to a type enum however
196:50 - when we use the number value it's going
196:52 - to work because there is this reverse
196:54 - mapping hopefully that's clear and now
196:56 - we're ready to move on to the next topic
196:59 - okay and now let's work on our next
197:01 - challenge where we want to define a enum
197:05 - with the consant of admin manager and
197:08 - employee Define the type Alias named
197:12 - user and in there we'll set up the ID
197:15 - property name as well as the rooll and
197:19 - the RO is going to be equal to our enum
197:22 - and also we'll set up the contact which
197:25 - is going to be a tuple on two elements
197:28 - the email which is a string as well as
197:31 - the phone then we'll set up a function
197:35 - by the name of create user which will
197:37 - take in the user object as a parameter
197:40 - and return the user object and then at
197:44 - the very end we'll call the user object
197:46 - provide the object object and we'll
197:47 - create the instance so in tutorial I
197:51 - think I want to start by defining that
197:53 - enum here let's call this
197:56 - user role let me set up my constants
198:00 - here and I think I'm going to rely on
198:02 - those default values so 0 1 two and I
198:06 - guess in this case that's going to be it
198:08 - only going to be 0 and one two then we
198:12 - also want to go with
198:15 - employee after that let's set up that
198:17 - type alias in this case
198:20 - user here one by one let's set up those
198:23 - properties ID is equal to a number then
198:26 - we also have name is equal to string
198:30 - we're going to go with roll and in this
198:32 - case it's going to be equal to a user R
198:35 - so one of
198:37 - our three constants and then we also
198:40 - want to go with contact and we set this
198:42 - one up as string and string we have
198:46 - create user function so let's set it up
198:49 - over here create user and this one is
198:52 - looking for a user parameter which is
198:56 - going to be type user same deal over
198:59 - here we're going to go with user and
199:01 - from the function we'll return the user
199:04 - and the last step is to create the
199:07 - instance so let's go with the user which
199:10 - will be type user let's call create user
199:14 - and now let's provide the values
199:17 - ID name John do then also we'll have a
199:23 - roll and since we're using our enum
199:27 - we're just going to set it equal to user
199:30 - R then Dot and one of the values in my
199:33 - case I think I'm going to go with admin
199:35 - one and then at the very end we also
199:38 - have the contact I want to set it equal
199:41 - to our array and let's just provide some
199:45 - values gmail.com comma and then we're
199:50 - going to go with 1 2
199:52 - 3 four 5 six and 7
199:57 - 89 the very end let's just log it and
200:02 - pre sure everything is going to be
200:03 - correct Yep looks like I have the
200:06 - correct value and with this in place
200:09 - we're ready to move on to the next topic
200:12 - and up next let's cover type assertion
200:16 - which is a way way to tell the browser
200:18 - what type an existing variable is and
200:23 - this is especially useful when we know
200:25 - more about the type than the typescript
200:29 - does as a side not it's very handy with
200:32 - dom elements so if these examples don't
200:36 - seem that convincing in the later
200:39 - sections we will cover different
200:42 - examples as well so let's imagine the
200:45 - scenario we have a variable and I'm
200:48 - going to go with some value and for some
200:51 - reason type is any now as far as the
200:54 - value I'll set this up as a string so
200:56 - this is a string and then in the next
201:00 - line I want to get the string length
201:03 - which actually is going to be a number
201:06 - so in here let's set it up type is going
201:09 - to be equal to a number and now I want
201:11 - to go with DOT length but I want to
201:15 - assert to a typescript that actually
201:18 - this is a string so I'll say some value
201:21 - and not just any type I'll say as string
201:25 - so the keyword we're looking for is this
201:28 - as that's the assertion where we tell
201:31 - typescript that yeah I know that maybe
201:35 - this is not something you expect but I
201:37 - know more and I know that this is the
201:41 - specific
201:42 - type this is also something that we can
201:44 - use for example with the Json parse
201:48 - because it returns any so let's say we
201:52 - have a type bird now this type bird only
201:58 - has a name and we'll set it equal to a
202:01 - string now it looks like I have a type
202:04 - over here so let me set it properly and
202:07 - now I'll set up two Json strings and
202:12 - we'll run pars now in order to speed
202:14 - this up I will grab those values from
202:17 - the read meor here so basically we have
202:20 - bird string and a dog string we want to
202:23 - set it up over here and now again once
202:26 - we'll run Json pars you'll see that type
202:28 - actually is any so let's say I have a
202:32 - bird object and that one is equal to
202:35 - Json then parse and now I'll pass in my
202:39 - bird string so again let me copy and
202:42 - paste and let me set up one for the
202:45 - dog and as we hover over like I said
202:48 - type is any but I don't want type to be
202:52 - any I actually want this to be a type
202:55 - bird so if we create an instance or any
202:59 - other functionality and we set it equal
203:02 - to a bird object instead of just leaving
203:06 - it as type any I can go with as and then
203:10 - my type because I clearly know that yeah
203:14 - maybe I'm getting this back as type any
203:16 - but I know that the signature matches
203:19 - whatever I have here for the type bird
203:21 - now please be careful you can also do
203:24 - something like this where you can set up
203:27 - the dog to be a bird and most likely
203:31 - that's not the behavior you want so if I
203:36 - go here with not bird object I'm going
203:39 - to go with a dog object and I'll set it
203:41 - equal to a bird I will be able to look
203:45 - for dog. name but if we take a look at
203:50 - the dog string it doesn't have that
203:52 - property so it has the breed so if we go
203:55 - here with log and we type bird name and
204:00 - as I said for some reason it's
204:02 - complaining it says cannot find bird and
204:05 - yep it's because for some reason I named
204:08 - it bed so let me go here with bird and
204:12 - also a dog notice how typescript is not
204:15 - complaining because
204:17 - I made a type assertion that yes this
204:19 - will be type bird even though we can
204:23 - clearly see that it's actually type dog
204:26 - now we don't have the type yet but you
204:29 - get the point so if I navigate right out
204:31 - of the browser notice how I will get
204:34 - this unexpected
204:36 - undefined at runtime and at the very end
204:40 - let me just show you a use case that I
204:43 - just encountered when I was working on
204:45 - my next JS project so in there there was
204:49 - a enum and I believe the name was status
204:53 - don't quote me on that and there were
204:55 - more values but I'm just going to set up
204:57 - two so we don't have to spend all day
205:00 - typing and essentially there was a
205:03 - constant and I set the values equal to a
205:06 - string so there was pending I believe
205:09 - interview declin but we're just going to
205:12 - go with these two so we're going to go
205:14 - with declined and we'll set it equal
205:16 - also to a string so I had this enum and
205:20 - then I was just adding it to I believe
205:23 - it was the job instance and I was saving
205:26 - it in a
205:27 - database now here's the kicker when I
205:30 - was saving actually in a database I was
205:33 - saving it as a string because that was
205:35 - the value for my status pending and then
205:39 - when I was getting back the value from
205:41 - the database it was already a string but
205:43 - I needed to reassign this value to one
205:47 - of the instances and at that point
205:49 - typescript was complaining because they
205:51 - didn't match and if this doesn't make
205:53 - any sense let me just
205:55 - showcase let's imagine that we have a
205:58 - user object and in there I have two
206:00 - things I have name String and also
206:03 - status is now going to be equal to a
206:06 - type status so we know that ually we can
206:10 - use status. pending status. decline
206:13 - everything is nice but since these
206:15 - values are not numbers we don't have
206:19 - that reverse mapping so if we'll try to
206:21 - set this value as a string it's not
206:24 - going to work so now let me quickly
206:26 - navigate to read me and I just want to
206:28 - grab these two comments over here again
206:31 - just so we don't have to type this from
206:33 - the scratch imagine this scenario now we
206:36 - save status pending in a database but we
206:39 - save it as a string so we'll save this
206:42 - value over here then we get it back from
206:44 - the database and
206:47 - now I'm going to go with the status
206:49 - value and I'll set it equal to the
206:54 - string value of pending so effectively
206:56 - this is what I'm getting back from the
206:58 - database again kind of makes sense
206:59 - correct because this is the actual
207:02 - string value now if I'm going to go here
207:06 - and set up my user instance and set it
207:08 - equal to my user
207:10 - type yep I typed the name everything's
207:12 - correct but if just going to go with the
207:15 - stat is equal to a status value notice
207:18 - how typescript immediately complains
207:21 - type pending is not assignable to this
207:24 - type so typescript doesn't know that I
207:27 - saved in the database as a string so I
207:29 - know for sure that it's the value that's
207:32 - going to
207:33 - match the constants here in the status
207:36 - TPT doesn't know that it just says Hey
207:38 - listen status here is type status so you
207:42 - cannot set it equal to a string and this
207:45 - is where the assertion is useful where I
207:48 - say yeah it is a string but I know for
207:51 - sure that is type status so again type
207:56 - assertion essentially is a way to tell
208:00 - the typescript that we know what the
208:04 - type is that we know more about the type
208:07 - than the typescript does okay and up
208:09 - next let's cover type unknown which is a
208:12 - type safe counterpart to type any so
208:16 - just like type any we can assign any
208:19 - value to type unknown but the difference
208:23 - is that before we can use the variable
208:25 - with type unknown we need to perform
208:28 - some type checking which again avoids
208:32 - the unnecessary runtime errors so let me
208:36 - go to tutorial and in here I want to
208:38 - create a variable and I guess in my case
208:42 - I'm going to call it unknown value so
208:46 - that will be my
208:47 - name and as far as the type I will set
208:50 - it equal to unknown so just like with
208:53 - any I can go here with unknown value and
208:57 - I can set it up for example to be a I
209:00 - don't know a hello world so Yep this is
209:04 - allowed I can also go to a next line and
209:06 - set it equal to for example array that
209:09 - is also allowed so let me set up my
209:12 - array I'm going to go with numbers okay
209:14 - good and then also we can set it up to
209:17 - be a number so let me go with 42 and
209:21 - then let me add some numbers after your
209:24 - D dot so this is allowed now the
209:26 - difference is that I cannot go over here
209:29 - and say unknown value and then set it
209:32 - equal to a fixed as we can see
209:35 - typescript complains it says Hey listen
209:38 - that type is unknown and right away
209:41 - you're running some kind of method how
209:43 - am I supposed to know that it's actually
209:45 - a number and we can run this particular
209:49 - method I mean maybe it's still a string
209:52 - so the difference again unlike type any
209:55 - before we can use that value if it's
209:58 - type unknown we need to check what is
210:02 - the type so in this case we can do
210:04 - following operation I can go type off
210:07 - and then unknown value and I can check
210:11 - well if it's a number well then I want
210:14 - to run my method so let me move this
210:17 - sucker down and notice now everything
210:19 - works because in this condition
210:22 - typescript knows that yeah unknown value
210:25 - is actually a number now one place where
210:28 - we'll definitely see type unknown is in
210:32 - the try catch block because by default
210:35 - typ scrip is going to set this error to
210:37 - be unknown now why do we care about that
210:40 - well what is typically the first thing
210:43 - we do over here go here with log
210:46 - and then error and then the message and
210:50 - notice how T says well error is type
210:54 - unknown so how do you know that there's
210:56 - definitely going to be over here this
210:58 - message property and this assumption
211:00 - comes from the fact that typically
211:02 - especially if we're throwing our own
211:05 - errors over here we use the following
211:07 - code we go with throw new error and
211:11 - provide whatever message and in this
211:13 - case I'm going to go there was an error
211:15 - so this is is a nice assumption but
211:18 - please keep in mind that JavaScript can
211:21 - also do something like this we can go
211:23 - with throw and some string over here and
211:27 - I know what you're thinking well there's
211:29 - no way I'll do that in try clatch block
211:33 - yeah but you might be running some code
211:36 - from third party library and at that
211:39 - point you don't know whether the error
211:41 - you're going to be getting back is going
211:42 - to be the instance of the error class or
211:46 - it's going to be something else again it
211:48 - literally can be a simple string now to
211:52 - demonstrate that I will use somewhat of
211:55 - a silly example where I'm going to set
211:57 - up the function over here I'm going to
212:00 - go with run some code so let's imagine
212:03 - that we're saving an image in a database
212:06 - or I don't know we're posting some data
212:09 - somewhere or sending an email or
212:12 - whatever and in here I'm just going to
212:14 - set it equal to I Rand them then let's
212:16 - go with math. random let's invoke that
212:19 - and essentially if it's less than
212:22 - 0.5 then I want to throw a new error if
212:25 - not then I'll just throw good old string
212:29 - so let's set up over here if
212:31 - else and let's check for random if it's
212:36 - less than
212:37 - 0.5 then I want to use the
212:40 - seconder let me set it up over here and
212:43 - if not then I'll just go with throw and
212:46 - we're going to go with
212:48 - some error so let me save this and now
212:52 - in Tri block let's go with run some code
212:56 - and effectively in here in a catch we
212:59 - want to check whether the error is the
213:01 - instance of the error class and if
213:04 - that's the case yeah then we'll have
213:06 - access to the message in this case there
213:08 - was an error and if not well then we'll
213:11 - simply log and provide some hardcoded
213:14 - error and this is essentially what
213:16 - you're going to do when you're working
213:17 - with typescript
213:19 - before you do something with that
213:21 - message you want to check whether the
213:24 - error you're getting is actually the
213:26 - instance of the error class so here in
213:29 - the cach block we want to go with
213:31 - error instance off we're looking for the
213:35 - error and then if that's the case yeah
213:38 - then tcri knows okay there is a message
213:42 - property and here we can go right now
213:44 - with log and and we can set up the error
213:47 - do message now if it's not the case
213:50 - since I already have some text I'll
213:53 - simply log the
213:55 - error let me log it so now let's
213:57 - navigate to the browser and check it out
214:00 - depending on that math random either
214:03 - we're going to get there was an error or
214:06 - we'll have that string some error and
214:09 - again just like any type unknown can be
214:14 - anything but before we can start using
214:17 - type unknown we'll have to do some type
214:19 - checking and therefore this is a type
214:23 - safe alternative to type any and up next
214:26 - let's cover type never which is a
214:29 - special type that represents the type of
214:31 - values that never occur now I'm not
214:36 - going to Sugar Code it especially in the
214:38 - beginning this entire concept might seem
214:41 - pretty confusing but hopefully after we
214:45 - cover one of the most common use cases
214:47 - of type never it's going to be easier to
214:50 - grasp the main concept of type never for
214:54 - starters let's just establish that if we
214:57 - have a variable with type never we
215:00 - cannot assign value to it so let's say
215:03 - if we set up a variable some value and
215:07 - if let's say it's zero if I'm going to
215:10 - go with type never typt is going to
215:14 - complain and I'm going to get the same
215:17 - result regardless of the value over here
215:20 - so this can be hello world this can be
215:22 - an array doesn't really matter we cannot
215:26 - assign any value to type never so that's
215:30 - the first thing we need to remember
215:33 - second you might encounter in your own
215:36 - code Type never if you set up one too
215:40 - many conditionals speaking from the
215:43 - personal experience so let's say you
215:45 - have a type theme over here
215:48 - and you set it equal to two possible
215:52 - values either is going to be light or
215:55 - it's going to be dark then let's set up
215:58 - a very useful function called check
216:01 - theme yes we'll say that theme parameter
216:05 - is going to be equal to our type of
216:07 - theme now we're not going to return
216:09 - anything so I'm just going to set it
216:10 - equal to void and then inside of the
216:13 - function I'm going to set up two
216:15 - conditions I'm going to go with well if
216:17 - theme is equal to and then I'm going to
216:20 - go with light one and I'm not going to
216:22 - be particularly original I'm just going
216:26 - to go with light theme and then let's
216:29 - return from the function and we already
216:31 - know that typescript is super smart it
216:34 - knows that at this point theme can only
216:37 - be value of dark correct because these
216:41 - are the only two options but let's
216:43 - imagine scenario where we do add another
216:46 - condition I'm going to go with if theme
216:48 - is dark okay good then I want to log it
216:53 - but I'll change the value and I'll also
216:55 - return let me change this one around let
216:58 - me go with dark theme and notice
217:00 - something interesting if we type theme
217:04 - after both of these conditions
217:06 - typescript says Hey listen theme is type
217:11 - never because we have handled all of the
217:14 - possible cases
217:16 - so at this point in time there is no
217:19 - possible value for the steam so if you
217:22 - ever encounter such scenario you'll have
217:26 - to go back and look at the original
217:27 - value and also all the conditions you're
217:31 - setting up because somewhere things are
217:34 - going south if you are at the point
217:36 - where variable is type never well then
217:39 - you already have handled all the
217:42 - possible cases and what's really awesome
217:44 - we can actually use it to our advantage
217:47 - the fact that we cannot assign any
217:49 - values to never and also the fact that
217:53 - typescript will immediately assign type
217:56 - never if we cover all of the possible
218:01 - conditions as far as our example we're
218:03 - going to go with enom I'm going to set
218:05 - it equal to a color we're going to go
218:07 - with red and blue so those are two
218:11 - possible values now we can assign it to
218:13 - a string but there's really no need then
218:16 - we want to set up a function in my case
218:18 - I'm going to go with get color name as a
218:21 - I not I'm just going to set up a switch
218:23 - statement where we check for possible
218:25 - values but if you work with Redux you'll
218:28 - find this example very similar to how we
218:31 - set up the Redux store so as far as the
218:34 - type for my parameter it's going to be a
218:36 - color and inside of this function I
218:38 - simply want to go with
218:40 - switch I want to check for my color and
218:43 - let's set up our cases so at this point
218:46 - we have two of them so we're going to go
218:47 - with color. red so if the color is red
218:52 - what do we do then well then we want to
218:54 - go with the return
218:56 - Red so let's set up our
218:59 - colon
219:00 - return and we're returning the string of
219:03 - red and if it's blue well then let's
219:08 - just change it around so let me select
219:10 - these
219:11 - two and let me just go with blue then
219:16 - let's set up to console logs iess let's
219:19 - invoke get color name and we'll pass in
219:23 - color then red and we're going to copy
219:27 - and paste and set up blue as well and
219:30 - everything's awesome if we take a look
219:32 - at the console yep we have red and blue
219:36 - but what if sometime later we go to a
219:39 - color and add green and notice
219:43 - everything is valid not breaking any
219:46 - rules over here the problem is going to
219:48 - be here when we invoke
219:51 - it this is going to
219:54 - fail but the worst case it's actually
219:56 - going to fail silently so if we navigate
219:59 - right now to the browser we can see red
220:01 - blue and undefined why well because
220:04 - we're not handling the case over here
220:06 - and again this fails silently so we set
220:10 - up nicely an additional enm we correctly
220:14 - pass it in and then unexpectedly we're
220:17 - getting an error correct and if you're
220:20 - familiar with such code you're probably
220:23 - screaming at me you're like Hey listen
220:25 - just set up the
220:26 - default case and throw the error and
220:30 - you're correct before typescript that
220:32 - was the approach so let's go here with
220:35 - default then we go with throw new
220:40 - error and for now let's just take a look
220:43 - at the color and all of the is nice but
220:46 - keep in mind this is again happening at
220:48 - runtime so yeah we have this default
220:50 - case where we throw the error if none of
220:54 - the conditions match but I actually
220:57 - would like to do that while I'm writing
220:59 - the code not when my application is
221:02 - running so we can definitely keep this
221:04 - one over here but a typescript approach
221:08 - is to come up with the variable and I'm
221:12 - going to go with at build time here and
221:15 - me add another comment and in here I'm
221:17 - going to go with at
221:18 - runtime and in here we want to set up
221:21 - another variable now the name is really
221:24 - up to you but I'm going to go with
221:29 - unexpected
221:31 - color the type will be equal to a never
221:34 - and I will assign it to the color and
221:37 - notice how immediately typ script
221:39 - complains why well because initially we
221:43 - only had two values so if we go back to
221:45 - this one everything is
221:47 - correct I only have this yellow squiggly
221:51 - line which is totally okay but if I'm
221:55 - going to add this green one then right
221:57 - Away tab script is going to yell at me
221:59 - because now I have one more condition
222:03 - and of course we already saw that if we
222:05 - don't handle it over here then
222:08 - essentially we will throw that error at
222:11 - runtime so what's the solution well we
222:14 - go with another case
222:16 - let's go color
222:18 - green and same deal just want to go with
222:21 - the return and return a string in this
222:25 - case it's going to be a green one and as
222:28 - you can see the moment we shut up our
222:31 - cage types doesn't complain anymore
222:34 - everything is fine because we have three
222:38 - possible enums and we're handling all of
222:42 - those cases in our get color name as
222:45 - well so essentially this is a great
222:48 - benefit for us where we can check for
222:51 - those potential errors at build time
222:55 - instead of just runtime okay and up next
222:58 - let's switch gears and quickly discuss
223:00 - modules and typescript now if you are
223:03 - familiar with how es6 modules work most
223:06 - of the things we're about to cover will
223:08 - be a nice review but when it comes to
223:12 - modules and typescript there are some
223:14 - GES
223:16 - we need to be aware of and let's start
223:18 - with the main one you see by default in
223:21 - typescript files are not modules they're
223:26 - actually treated as script in a global
223:29 - scope so what does that mean well if I
223:32 - go to a source come up with a name for
223:35 - example actions TS come up with some
223:38 - random variables one is going to be
223:41 - Susan then second one is going to be
223:44 - something so let something is equal to
223:49 - something if I create another file or in
223:53 - the tutorial try to use the same
223:56 - variable
223:57 - name not going to be successful so
224:00 - typescript is actually going to complain
224:03 - so it doesn't treat this file as a
224:07 - module so whatever I set up in my files
224:10 - is actually put in a global scope which
224:14 - obviously limits the variables I can use
224:18 - I have Susan over here and I also have
224:20 - Susan in the actions and therefore
224:22 - typescript is complaining so pretty much
224:24 - think of it this way everything that you
224:27 - put in the files by default again we'll
224:30 - fix that in a second but by default was
224:32 - actually put in the global
224:36 - scope so in order to fix it we have two
224:40 - options we can go to TS
224:43 - config and essentially set the property
224:46 - or we can add the export and import and
224:49 - the moment we add export and import then
224:51 - they're treated like typical es6 modules
224:55 - now also don't be surprised about this
224:57 - gotcha where let's say in
225:01 - tutorial you'll try to come up with the
225:04 - variable with the name of name and you
225:07 - won't be able to even though technically
225:09 - in actions we don't have this value over
225:12 - here you see such name is used in
225:16 - declaration file again something we're
225:18 - going to cover a little bit
225:20 - later and again we have this name
225:22 - Collision because typescript doesn't
225:25 - treat this file as a module so
225:27 - essentially unless we change that
225:30 - there's going to be some keywords that
225:31 - we cannot use and this was
225:34 - super confusing to me in the beginning
225:36 - because as I started learning typescript
225:39 - I wanted to use this name variable and I
225:41 - got this red Squigly line and I was like
225:44 - what's happening over here why I cannot
225:45 - use this name one I mean there's
225:48 - technically no error and again let me
225:50 - repeat for a third time it's because by
225:52 - default typescript is going to
225:55 - essentially treat the files as just
226:00 - scripts in the global scope so once we
226:03 - know the issue how we can fix that like
226:05 - I said we have two options over here we
226:09 - can either go to TS config and add the
226:12 - property and you know what let me just
226:14 - first showcase is how this would work
226:16 - with Import and Export if we add export
226:19 - or import statement to our file
226:23 - immediately typescript is going to
226:25 - essentially treat this as a module so
226:28 - for example if I'm going to go back to a
226:30 - tutorial and if I'm going to go with
226:33 - import and I believe this one was the
226:37 - named export so we're going to go with
226:39 - something from the actions everything is
226:42 - awesome so notice we don't have the
226:45 - issue anymore with the global scope
226:49 - correct so now these ones are scoped to
226:53 - tutorial and then these ones are scoped
226:56 - to the actions hopefully that is clear
226:59 - so this is one approach now what if I
227:02 - don't want to add Import and Export like
227:06 - force it in a way well then we can go
227:09 - over here to TS config and we're looking
227:12 - for the property by the name of my
227:14 - module detection and we want to go with
227:18 - Force so by default it's going to be set
227:20 - to Auto but we want to force it so in
227:23 - this case even if there is no export
227:27 - statement everything is going to work so
227:30 - notice now of course I have different
227:31 - complaint because I'm importing from the
227:33 - actions and there is no export but the
227:36 - moment I save I can use the name even
227:39 - though it's technically used in
227:41 - declaration file which was the issue
227:43 - before
227:45 - and I don't have this name collision
227:47 - with actions anymore as well so I have
227:50 - Susan over here and the same is in
227:53 - actions again few
227:55 - approaches we can either add the
227:59 - property in TS config or if we add
228:02 - Import and Export then immediately
228:05 - typescript is going to treat it as a
228:07 - module okay and once we're familiar with
228:10 - the main gotcha let's just see how we
228:13 - can use es6 modules in typescript and
228:16 - like I mentioned before if you are
228:18 - familiar with the main
228:21 - Concepts this is just going to be a nice
228:24 - review now before we start typing away I
228:27 - do want to mention one property in the
228:30 - TS config which is module and at the
228:33 - moment notice how we have the value of
228:36 - es next now this property controls what
228:42 - module syntax is set up in the out put
228:45 - code so effectively once the typescript
228:48 - is done compiling our code so if I
228:51 - navigate to a playground notice I have
228:53 - my export statement over here where I'm
228:56 - exporting some function and this is
228:58 - going to be the result now if I go to TS
229:01 - config and change from es next to for
229:04 - example commonjs and as a sign not if
229:07 - you're not familiar with
229:08 - commonjs it used to be the main module
229:12 - syntax in node.js but even no. JS is
229:15 - right now slowly but surely switching to
229:19 - a es6 module syntax and notice the
229:23 - moment we change it actually this will
229:26 - be the output so this is a common JS
229:29 - syntax so if you ever have a use case
229:33 - where you want to use different module
229:37 - syntax in the output code just look for
229:39 - the module property something I wanted
229:42 - to mention and now just go to actions
229:46 - and set up few values we want to export
229:50 - and then in tutorial we will import them
229:53 - again just to have a nice review how the
229:56 - es6 modules essentially work just so you
229:59 - can see that pretty much the idea is
230:00 - exactly the same first I want to go with
230:04 - um some kind of function I'm going to go
230:07 - with say
230:09 - hello let's set up name equal to a
230:12 - string and you know what I'll also say
230:15 - that we're not returning anything from
230:18 - this function in here we're going to set
230:21 - up a nice console log we're going to go
230:24 - with
230:26 - hello and let's access the name so
230:30 - nothing
230:31 - really groundbreaking then let's also
230:35 - export let person is equal to
230:39 - Susan and let's also set up a new
230:43 - student so this will be my object and
230:46 - there's going to be a type for this
230:48 - student so new
230:50 - student I don't have the type yet so let
230:52 - me just type over here
230:55 - Peter and age let's set it equal to 24
231:01 - and you know what let's do set up to
231:02 - type because I want to showcase how we
231:04 - can nicely export type so for now let's
231:06 - just go with
231:08 - type
231:10 - student and name is equal to a string
231:15 - then age is equal to not string sorry
231:19 - I'm going to go with number and then new
231:21 - student is going to be type student and
231:25 - now since I already have two named
231:28 - exports I just want to showcase how we
231:30 - can do the default one as well so we're
231:32 - going to go with export default then new
231:36 - student and essentially call it a day so
231:39 - now I want to navigate to tutorial and
231:42 - one by one let's grab all of those
231:44 - values since I have the default export
231:46 - I'm going to go with new student which
231:48 - is coming from the actions of course we
231:50 - can use a different name but I'm not
231:53 - going to do that and then for the name
231:55 - ones we're going to go and say hello and
231:58 - also we'll set up the
232:01 - person one second yep I want to save and
232:05 - let me open up the tutorial over here so
232:09 - these are the things we are importing
232:11 - right now let's invoke say hello we're
232:14 - going to go typescript okay good then
232:19 - let's log the new
232:21 - student and also a person just so we can
232:26 - see whether we're getting the correct
232:29 - values and then we'll talk about the
232:31 - types and how we can export them so
232:33 - hello typescript I have Peter as well as
232:36 - the Susan so everything works as we
232:41 - expect and as far as the types yes we
232:44 - can nicely export types as well so in
232:48 - here I can go with export then type
232:51 - student and then back in tutorial I have
232:54 - few options I can either go here with
232:56 - the student notice how I'm getting right
232:58 - away a nice suggestion or we can also
233:02 - add over here this type again this
233:04 - doesn't change anything as far as the
233:06 - functionality it's just
233:08 - a common approach to signal that this is
233:12 - a type we're importing
233:15 - so this clearly signals to me that hey
233:18 - this is a type that I can use in this
233:21 - file so for example I can go here with
233:25 - const another student set it equal to my
233:30 - student
233:31 - type and let me add different values so
233:34 - this will be equal to
233:36 - Bob me add an equal sign over here comma
233:41 - and we're also going to set up the age
233:43 - of 20 three and then if I log another
233:47 - student we can clearly see that we don't
233:50 - have any typescript errors and then in a
233:52 - console we should have the correct value
233:55 - now million doll
233:57 - question what is the correct quote
234:01 - unquote approach should we set up the
234:06 - types in a separate file and then import
234:08 - it or we keep it in the file where we're
234:12 - actually using the type and as always
234:17 - the answer is probably not something
234:19 - you're looking for it really comes down
234:21 - to your preference yes definitely you
234:24 - can set up over here a new file call it
234:28 - types DS and then pretty much every time
234:31 - you have a
234:32 - type in your project set it up in the
234:36 - types and then import in all the files
234:39 - where you're using that value it's
234:41 - definitely an option you can definitely
234:44 - do do that and another approach is to
234:46 - keep the type in the file where you
234:50 - initially are using it and then if you
234:53 - ever have a use case like in our case in
234:56 - tutorial you export and then grab it in
235:00 - tutorial and a common scenario is that
235:04 - you initially just set up the type in
235:06 - the file and then if you see that you
235:09 - are reusing it all over your project
235:13 - then yeah at that point it kind of makes
235:15 - sense to keep it in one place since the
235:19 - Imports are going to be easier you won't
235:20 - have to think about well where is the
235:23 - actual type located but again as always
235:26 - it really comes down to your preference
235:30 - all right and while we're still on a
235:31 - topic of modules let's also see how
235:35 - typescript treats JavaScript files so
235:39 - remember at the very very beginning of
235:41 - tutorial I mentioned that whenever we
235:43 - work with
235:45 - typescript in our case since we're
235:47 - working with JavaScript files and react
235:49 - files we need to stick with either do DS
235:53 - extension or DSX
235:56 - extension and now let's see how
235:58 - typescript is going to treat the file if
236:01 - it's just a JS extension so let's say
236:03 - I'm going to go with source and we're
236:05 - going to create the example
236:08 - JS and let's go with
236:11 - export some value
236:15 - that is equal to some value everything
236:17 - is awesome I'm just missing over here
236:20 - the keyword in this case I'm going to go
236:22 - with let and now if we go to tutorial
236:26 - what do you think is going to happen how
236:28 - do you think typescript is going to
236:30 - treat this file let's go with import
236:34 - some
236:35 - value and it's coming
236:38 - from and I don't see essentially it in
236:41 - my suggestions so I can try to force it
236:46 - I can say over here example JS but not
236:49 - going to be successful so effectively
236:53 - typescript is complaining that it
236:56 - couldn't find the file now the reason
236:58 - for that is because it's not a
237:00 - typescript file so here's the thing
237:02 - about typescript it pretty much needs to
237:04 - know everything about your project and
237:08 - this is something that we're actually
237:09 - going to come back to when we start
237:11 - working with the third party libraries
237:14 - in our project essentially when we start
237:16 - using the code that's coming from
237:18 - somewhere else so as far as typescript
237:21 - is concern no we need to set this one up
237:25 - as a typescript file so then it clearly
237:28 - knows well what is the shape for the
237:31 - data we're getting because at the moment
237:33 - typescript is like hey I don't know what
237:35 - are you getting over here I have no info
237:38 - on this sum value now we can force it
237:43 - there's a property we can add in the
237:45 - typescript config just keep in mind that
237:49 - typescripts ability to infert types it's
237:52 - not going to be as robust as when we're
237:55 - working with the typescript file so yes
237:58 - we can navigate right now to TS config
238:01 - we can look for compiler options and we
238:05 - can go with
238:06 - allowjs and essentially we can set it
238:09 - equal to true now we do need to add a
238:11 - Comm over here and now everything
238:14 - magically Works in our tutorial so
238:17 - essentially typescript can infer that
238:21 - some value is actually a string but just
238:23 - be careful with such approach
238:25 - effectively since we're working on a
238:27 - typescript project yes we do want to
238:30 - name our files
238:32 - TS because then typescript is going to
238:35 - know that it's a typescript file and
238:37 - it's going to have the info on the shape
238:39 - of the
238:41 - data and if you'll just set up
238:44 - JS file without making any changes to
238:48 - the DS config try to run it typescript
238:51 - will complain basically it's going to
238:53 - say Hey listen I'm not sure what are you
238:57 - exporting what's happening over here I'm
239:01 - not okay with this so let me remove and
239:05 - delete this import as well and with this
239:08 - in place now we can move on to the next
239:10 - topic and up next let's explore the
239:12 - tyard options available able in
239:15 - typescript basically my goal was to
239:17 - gather all of our options in one place
239:20 - and since we already discussed most of
239:22 - them throughout the course this section
239:25 - will primarily feature challenges so if
239:28 - you're interested read the steps and
239:31 - attempt to complete the challenge before
239:33 - watching the video also for some
239:36 - challenges I already provided star code
239:38 - so we can spend more time on the typ
239:42 - guard Concepts and we're going to start
239:44 - with the good old type off typ guard and
239:48 - this is going to be our star code where
239:51 - we have a type it's either string number
239:54 - or Boolean we assign it to a variable
239:58 - and then we just invoke math. random and
240:02 - then depending on the random value if
240:06 - it's less than
240:08 - 0.33 then the value is going to be low
240:12 - if it's bigger than 0.33 but less than
240:17 - 0.66 then it's going to be a number and
240:21 - if it's actually bigger than
240:25 - 0.66 then it will be a bullion and our
240:29 - goal is to set up a function in my case
240:33 - I'm going to call this check value that
240:35 - takes in one parameter value and the
240:38 - type will be this value type and instead
240:41 - of the function effectively we want to
240:44 - check for all of these conditions for
240:47 - the string number and Boolean and based
240:50 - on that we want to do something again it
240:52 - doesn't really matter what we do as far
240:54 - as the functionality but we do want to
240:57 - set up those typ guards correctly so let
241:00 - me just take the star code just so we
241:03 - can spend more time on the actual
241:06 - function let me set it up here in
241:09 - tutorial and let me start working on the
241:11 - function so we want to go here with
241:13 - function
241:15 - then check value is we'll be looking for
241:18 - the value parameter and I'll right away
241:21 - set it equal to a value type now this
241:24 - function is not going to return
241:26 - anything at least in my setup and then
241:30 - let's just set up those typ guards and
241:33 - remember one of the most straightforward
241:36 - type guards we have is type off and then
241:39 - we have bunch of possible values so if I
241:42 - go here with if then type off I'm
241:46 - looking for my parameter and I set it
241:48 - equal to and in here we should at least
241:53 - get a list now the reason why we don't
241:55 - have the list is because I have three
241:58 - equal signs over here so we have this
242:01 - big in fion function and you can read
242:04 - the rest so let's start with the string
242:06 - one over here and I guess since people
242:09 - are tired with the uppercase when don't
242:12 - we go with log
242:14 - and value two and let's try the lower
242:18 - case somewhere to lower case okay good
242:22 - let's
242:24 - return so we want to set up the return
242:26 - here then let's check for the number and
242:30 - if
242:31 - we bypass both of these conditions then
242:35 - logic tells us that the value is going
242:37 - to be bullan so I guess you know what
242:41 - order to speed this up I'll just copy
242:42 - and paste in this case I'm not looking
242:45 - for string we're looking for number and
242:49 - then we want to go with two and fixed
242:53 - and let's pass in two again we want to
242:56 - return and at this point it is a Boolean
242:59 - so let's go here with log and let's just
243:03 - log the value so let's access the value
243:06 - and let's invoke the
243:08 - function so let's go with check value
243:11 - and pass in the value now let me
243:13 - navigate to the browser notice at this
243:17 - point it's a number then I have hello
243:20 - and at this point it's a Boolean and
243:22 - with this in place we can move on to the
243:25 - next typ guard all right and the next
243:28 - typ Guard we're going to discuss is
243:30 - going to be equality narrowing now don't
243:34 - be scared of the fancy name essentially
243:37 - is just a narrowing which occurs when we
243:39 - use equality checks now I think will
243:44 - right away also go with the check for
243:47 - property typ guard because effectively
243:50 - we'll have the same starring code so we
243:54 - have these two types one is dog one is
243:56 - cat and in here we have the type
244:00 - property which references the actual
244:03 - type and also we have the name as well
244:07 - as the method which is unique to that
244:09 - specific type and essentially our goal
244:13 - is to come up up with a function which
244:15 - is going to check for that specific type
244:18 - and if it's a dog then we bark and if
244:20 - it's a cat then we meow and like I
244:23 - mentioned before we'll pretty much work
244:25 - on both of the challenges since the
244:26 - starting code is the same and we just
244:29 - have multiple options how we can narrow
244:32 - down one of the types so in tutorial I
244:36 - want to grab this code notice how we're
244:39 - using over here the Union as well so now
244:42 - we have this animal which could be a dog
244:46 - or a cat so now let's set up our
244:48 - function which makes the sound so make
244:51 - sound function we're going to go with
244:55 - animal so that is going to be our
244:57 - parameter and that one will be equal to
245:01 - our type animal and here let's go with
245:04 - animal and which property is unique well
245:08 - that will be the type one correct so we
245:10 - can just say well if animal type is
245:14 - equal to in our case dog well what do we
245:19 - want to do we're going to go with animal
245:21 - and bark because we know that it's a dog
245:25 - now if it's not the case we already know
245:27 - that we have animal and our other option
245:30 - essentially is to meow so if we go over
245:34 - here and just invoke the
245:36 - function depending on what we're going
245:38 - to pass in that's what we're going to
245:40 - get in the console now at the moment
245:42 - again there's no function a over here
245:44 - hopefully it's clear that effectively
245:46 - we're just narrowing down the types so
245:50 - this is one option we have also we can
245:54 - check for
245:55 - property and how does that look like
245:58 - well we can go here with function then
246:00 - make sound same deal animal is equal to
246:05 - our animal type and then inside of the
246:09 - function we want to set up if and now
246:13 - we're looking for a specific
246:15 - property in the type now in our case
246:20 - which one is the specific one well you
246:22 - can actually check for method you can
246:24 - take a look whether bark exists if it is
246:27 - an animal then we know that it's a dog
246:30 - if not then in our case we know that
246:32 - it's a cat so we're going to go with if
246:35 - and then bark in so this is a keyword we
246:40 - want to use in the animal well if it's
246:44 - the case let's go with animal bark and
246:48 - if not then we know that it's a cat so
246:50 - we can run the other method let's go
246:54 - with meow and let's invoke it so
246:56 - effectively when we have such setup
246:59 - these are the options we have either we
247:02 - can check for property or a method or if
247:06 - we have a property which has that unique
247:09 - value for example in this case it's a
247:12 - typon well then we can also use the
247:15 - equality checks all right and up next we
247:18 - have truthy or falsy guard and it's as
247:22 - straightforward as the name suggests
247:25 - essentially in here you just want to
247:27 - check for truthy or falsy value in the
247:31 - condition and depending on the result
247:33 - just set up the functionality and as far
247:35 - as the challenge we want to create a
247:37 - function in my case I'm going to call
247:39 - this print length we're going to be
247:42 - looking for a
247:44 - string parameter as far as the type
247:48 - we're going to use the union type so
247:50 - either it's going to be string null or
247:53 - undefined and then if it's truthy if
247:57 - it's a string then we just want to log
248:01 - string. length if not then we'll just
248:04 - say that no string was provided and then
248:07 - we'll just test with few values so here
248:10 - in the tutorial we want to go with
248:12 - function print
248:15 - length let's look for string I'm going
248:17 - to go with SDR and then as far as the
248:21 - type either it's going to be a string
248:24 - either it will be null or we're going to
248:27 - go here with undefined and if we want to
248:30 - check for a valid string we simply want
248:31 - to set up the if block and then pass in
248:34 - the SDR so if it's truthy if there's
248:37 - value in a string then we'll end up in
248:40 - this if block and as far as the logic
248:43 - we're going to go with s strr and then
248:46 - length so at this point we know that
248:48 - it's a string now if it's not the case
248:50 - I'm just going to go with log and let's
248:54 - just go with something generic no string
248:57 - provided even though as I'm looking at
248:59 - it I mean we're also going to end up
249:02 - here if there's no value in the string
249:05 - so technically it's not 100% correct but
249:08 - let's just go with this one for now
249:10 - again our main purpose was to set up the
249:13 - function it inside of the function so
249:15 - let's go with print length let's go with
249:17 - hello over here then let's pass in the
249:19 - empty string then we're going to go here
249:22 - with null and after that let's pass in
249:26 - pretty much nothing let's at least try
249:29 - to do that now we're not going to be
249:31 - able to since typescript is going to
249:33 - complain but let's just pass it in just
249:35 - for our reference so let's say if we
249:37 - don't provide anything and also at the
249:41 - very end let's go with print length and
249:43 - and set up the undefined now let's
249:46 - navigate to console and essentially
249:48 - notice if we provide a valid string yep
249:52 - the result is four so we get back this
249:54 - length and if not then we just have a
249:58 - list of no string provided again not
250:01 - 100% correct technically in here it is a
250:04 - string but it's an empty one but again
250:07 - these are just Minor Details the main
250:10 - goal of this video was to showcase the
250:13 - truthy or falsy type guard in typescript
250:18 - all right and up next we have instance
250:20 - off typu which is a way in typescript to
250:23 - check the specific class or Constructor
250:26 - function off an object at run time and
250:30 - this is something we actually covered
250:32 - very very recently when we talked about
250:34 - type unknown so therefore in this case
250:38 - again we'll have two examples we will go
250:42 - back to trying and catch so we'll
250:46 - reiterate pretty much everything we
250:48 - learned in the type unknown video and
250:51 - also we'll work on the another example
250:55 - where we'll check for the date so first
250:59 - let's just reiterate that if we have try
251:02 - and catch this error is unknown so even
251:06 - though we have over here for sure throw
251:09 - new error and if I pass in the message
251:12 - typescript will complain if we'll just
251:14 - go with error.
251:16 - message because there's also
251:20 - a possibility for different type of
251:25 - error
251:26 - essentially we might have an error which
251:28 - is not the instance of the error class
251:32 - so therefore if we do want to access the
251:34 - message first we want to go with error
251:37 - and then instance off and we're looking
251:40 - for our error class so if it's the
251:43 - instance yes then we know that there is
251:46 - that message if not well then we simply
251:49 - want to log something some kind of
251:52 - hardcoded message so let's go here with
251:54 - log and then let's provide some kind of
252:00 - string and we're looking for error
252:05 - object and now we just want to render I
252:09 - guess the error message so error that
252:11 - message so now we can access it if not
252:15 - well then let's simply log something
252:17 - else we'll just go with unknown
252:21 - error error and do dot dot again if we
252:26 - navigate to the browser if everything is
252:28 - correct we should have this one over
252:31 - here why well because at the moment in
252:34 - Tri block I have try new error now if
252:38 - I'm going to comment this one out or
252:40 - simply type above and say throw and some
252:45 - error now I should have unknown error in
252:48 - the console so again this is something
252:51 - we covered pretty much few videos ago
252:55 - now also we can use such setup to check
252:59 - for date so we can check whether the
253:02 - input we're passing in is a string or
253:05 - it's actually the instance of the date
253:09 - object so let's set up our function
253:12 - we're going to go with check
253:14 - input and in
253:16 - here the variable name is going to be
253:19 - input basically the parameter name and
253:22 - then either it's going to be date or
253:27 - it's going to be a string now from this
253:29 - function we want to return a string and
253:32 - now we want to check whether the input
253:34 - is the instance of the data object if
253:38 - it's the case then we want to turn it
253:41 - into a string now if it's not the case
253:44 - if it's simply a string then we want to
253:46 - return the input so let's go with input
253:49 - instance off then data object here and
253:55 - then let's use input since this is a
253:58 - date right now we have access to all of
254:01 - these methods we're looking for get full
254:03 - year let's invoke this one and we want
254:06 - to turn it into a string so notice if I
254:08 - just return this one typescript
254:10 - immediately complains because this will
254:12 - be a
254:13 - but we said that we want to return a
254:16 - string so let's invoke this two string
254:19 - so now typescript is not complaining and
254:22 - if it's not the case if it's not the
254:23 - instance of the date well then I don't
254:25 - need to do these acrobatics I can simply
254:28 - return the input so now let's construct
254:31 - two variables we're going to go check
254:34 - input in here let's just pass in new
254:37 - date and also we're going to go with
254:40 - some random values as well random
254:43 - and we'll set it equal to check input
254:46 - and let's just pass in some kind of
254:48 - string so
254:50 - 2020 the best year
254:52 - ever of course in the air quotes and
254:57 - let's pass in some random date then
255:00 - let's log both of these values we're
255:02 - going to go over here with year and
255:05 - random I'm not even sure whether we are
255:08 - really interested in the console but
255:10 - let's just log it and notice essentially
255:12 - both of them are strings and again the
255:15 - instance of typ guard is a Nifty way for
255:19 - us to check in typescript whether the
255:22 - object is an instance of a class or
255:27 - created by the Constructor function if
255:30 - it's the case it's going to return true
255:33 - if not it's going to return
255:35 - false all right and up next let's
255:38 - discuss type predicate function which is
255:40 - a special kind of function
255:43 - that not only returns true or false but
255:47 - also we can narrow down the type and
255:51 - again this should be a refresher because
255:54 - we did discuss type predicate previously
255:57 - as far as the star code let's just grab
256:00 - this one and then we'll go over the
256:03 - challenge so here in tutorial I have two
256:07 - types I have the student one as well as
256:10 - the user notice this property is the
256:13 - same it's a string and the only
256:16 - difference well they have different
256:18 - methods so one is study and the other
256:20 - one is login then I use the type Union
256:24 - to create type person which can be
256:26 - either the student or the user and then
256:29 - again I go with my math. random if it's
256:32 - bigger than
256:34 - 0.5 then I'll return one if not well
256:39 - then I'll return another one so either
256:41 - this is going to be a student or a user
256:44 - and effectively what we want to do is
256:46 - set up our type predicate function where
256:49 - not only we check for specific type but
256:54 - we also want to help typescript by
256:56 - narrowing down the type uh in my case
256:59 - I'm going to show you two options how we
257:02 - can check for specific type but feel
257:05 - free to use whichever makes the most
257:07 - sense to you and then after that we want
257:10 - to use if else essentially run our type
257:13 - predicate and if it's true we want to
257:15 - invoke one of the methods so let's say
257:17 - in my case I'm going to be checking for
257:19 - student if not then I'm going to invoke
257:22 - login which is for the user so right
257:25 - after the person I'm going to go with
257:27 - function is student at least in my case
257:30 - I'm going to be checking for student
257:31 - again this is totally up to you you can
257:34 - check for user as well now I'm going to
257:37 - be expecting a person which again can be
257:41 - either of them for now I'm not going to
257:43 - set up the return type and as far as our
257:46 - options well we can use the in operator
257:50 - something we talked about literally few
257:52 - videos ago where again we're looking for
257:55 - something unique in this case either
257:58 - it's going to be study or a login and we
258:00 - just go with the method name then in and
258:04 - then the person since that's our
258:06 - parameter or we can also use the type
258:11 - assertion which where we assert that
258:15 - person is going to be a student then we
258:18 - invoke the study method and then we
258:21 - check whether it's defined or not so
258:24 - again this part is totally up to you for
258:27 - now again we don't have any returns I
258:29 - just want to showcase that if we go here
258:31 - with return and then study again our
258:34 - method in person this will return either
258:37 - true or false so
258:40 - either this method is in the type or not
258:45 - now if it's the case then we want to go
258:48 - with person
258:50 - is the student correct because at that
258:53 - point that script knows for
258:56 - sure
258:57 - that the instance is the type of student
259:02 - and if that's the case then we can use
259:03 - the study method now alternatively we
259:06 - can use this approach where we go to
259:09 - return Then person and we assert that
259:13 - it's a
259:14 - student now what is the method student
259:18 - has it has the steud one but again just
259:22 - because we are asserting doesn't
259:24 - magically make this person to be a
259:26 - student and therefore in here we still
259:28 - check we say okay we assert that person
259:31 - is a student we know that there is a
259:34 - study property but it also can be
259:37 - undefined so it's only a student if it's
259:41 - not undefined
259:43 - like so so those are the two options you
259:46 - can use over here and now let's set up
259:48 - the if blog let's say well if it's a
259:51 - student then let's pass in the person
259:54 - what do we do at next well then we can
259:57 - use essentially our method correct and
260:00 - if it's not what options we have well
260:03 - then it's a user correct so we go here
260:05 - with person and then log in and also
260:08 - invoke it again a very fancy name type
260:12 - iate effectively just remember the is
260:15 - keyword and remember the fact that not
260:18 - only we're trying
260:21 - to check for a specific type but we're
260:24 - also helping typescript to narrow down
260:29 - that type okay and before we move on to
260:31 - the next topic I also quickly want to
260:34 - show you one
260:36 - gotcha and this involves type never now
260:40 - technically this video is optional if
260:42 - you're not interested you can just move
260:43 - on to the next video but I simply want
260:46 - to showcase that if we hardcode the
260:50 - person to be a specific type typescript
260:54 - is going to yell at us so in here yes we
260:57 - are setting up that person randomly
260:59 - correct so we have our random person and
261:02 - pretty much depending on the value well
261:05 - we either return a student or a user now
261:10 - if I set up my person differently let's
261:14 - say if I comment this one out again I'm
261:17 - going to go with person I'll say that
261:20 - this type is actually a person and then
261:23 - I'll hard code so I'll say name is equal
261:26 - to Anna and then since I'm creating a
261:31 - student I'm going to set up my study
261:33 - method so I'll come up with my function
261:37 - and I believe it doesn't return anything
261:39 - so I'll just go with log and study dot
261:44 - do dot okay let me fix the typos and all
261:48 - that so now I have this person but I'm
261:52 - hardcoding this is not any more random
261:56 - notice TPT essentially right away yells
261:59 - at me says well there's no way this
262:03 - person can be a user the other type why
262:07 - well because you hardcoded to be a
262:11 - student so yeah I can still check
262:15 - whether the person is
262:17 - student so type pred code still works
262:20 - but in the lse block you'll notice that
262:22 - person is
262:24 - never and this brings me back to the
262:26 - point that I was making in the type
262:29 - never
262:30 - video essentially if you have the
262:32 - scenario where type is equal to never
262:36 - you'll just have to go back to the
262:38 - initial place where you're setting up
262:40 - the variable and also start checking
262:42 - your conditions because effectively in
262:44 - here typescript just says Hey listen
262:47 - there's no way that person can be a type
262:51 - user because you hardcoded to be a type
262:55 - student now what's interesting if I
262:57 - change this around to a
263:00 - login now the person is actually a user
263:03 - correct so now I'm hardcoding to be a
263:05 - user so I have my type predic cut I
263:09 - check in my condition it's not the case
263:12 - and now we can successfully get to else
263:15 - but if I hardcode my person to be a
263:18 - student then there's no way for me to
263:21 - get to this pulse block hopefully it's
263:24 - clear and now we can move on to the next
263:27 - topic all right and up next let's
263:30 - discuss discriminated unions and also
263:35 - let's recall how we can set up the
263:37 - exhausting check using type never now
263:41 - again I I know that the name
263:43 - discriminated Union most likely sounds
263:46 - pretty scary but essentially it's just
263:50 - going to be a
263:52 - property which has a literal value now
263:56 - as far as the star code this is what we
263:59 - have over here so we have two types one
264:03 - is going to be increment action second
264:06 - one will be decrement action both of
264:09 - them taking the number the amount time
264:12 - stamp which is going to be a number
264:13 - again this is totally random and the
264:16 - same goes for user string this is
264:18 - totally random and then we have a type
264:24 - by the name of action where I use the
264:26 - union type and I just use both of these
264:29 - types here so either it's going to be
264:32 - increment or decrement and then I will
264:35 - set up a reducer function which is
264:38 - looking for two things it's looking for
264:40 - the state so again this is just going to
264:43 - be some random number and also the
264:46 - action so what do we want to do do we
264:48 - want to increase the number or we want
264:50 - to decrease so let's start setting up
264:53 - and in a process you'll see why we need
264:57 - the fancy discriminated unions which
265:00 - again is just a property with a string
265:04 - value so for S let's go here with new
265:09 - state and you know what I haven't set up
265:11 - the functions so maybe let's start with
265:13 - this one so we have a
265:16 - function looking for state which will be
265:20 - a number so some kind of hardcoded
265:22 - number and then also the action so
265:25 - whether we want to increase or decrease
265:28 - and by how much this is the amount over
265:31 - here so if we want to increase then byy
265:34 - this amount and the same goes for
265:36 - decrease now I'm not going to set up
265:39 - again anything as far as the
265:41 - functionality I simply we want to go
265:42 - with
265:45 - reducer that's the function and of
265:48 - course I forgot to add the name over
265:49 - here my bad so we're looking for
265:52 - reducer then as far as the initial value
265:55 - again we're just hardcoding something
265:56 - random so I'm going to go here with 15
265:59 - and then when it comes to action well
266:01 - now I'm going to pass in the object so
266:03 - either it's going to be increment or
266:06 - decrement and in this case I'm going to
266:08 - hard code that user value will be John
266:12 - we don't have the type yet so let's just
266:15 - go here with amount of five and then
266:18 - time stamp well let's set up 1 2 3 4 5
266:24 - six or something along those lines and
266:27 - now let's discuss why do we need the
266:30 - discriminated unions in the first place
266:33 - well we have two types
266:36 - and how are we going to check for
266:39 - specific type I mean we canot use type
266:42 - off we cannot use in we cannot use I
266:46 - mean instance off or any of the things
266:49 - that we covered previously why well
266:52 - because pretty much they're the same
266:54 - correct now they do have different
266:56 - meaning one is going to increase this
266:59 - state over here and the other one is
267:01 - going to decrease but in the reducer how
267:04 - I'm going to check for that action this
267:06 - is where the discriminated unions come
267:10 - into play where
267:13 - we'll have this unique literal value how
267:18 - is that going to look like we'll
267:19 - navigate back to increment action and
267:22 - yes effectively you'll just add here
267:24 - whatever property name you want in my
267:26 - case it's going to be a type and it's
267:29 - going to be equal to increment and now
267:32 - we want to do the same thing for
267:35 - decrement so instead of increment we
267:38 - want to go with decrement so now in the
267:43 - reducer we want to set up
267:46 - a switch statement where we're going to
267:49 - check for the type if it's increment
267:53 - then we'll increase if decrement then we
267:56 - decrease and also let's just recap how
267:59 - we can set up our default case with the
268:02 - help of type never now typescript is
268:04 - complaining because I'm not providing a
268:06 - typ over here so we do need to go with
268:10 - one of them in this case I'm just going
268:12 - to going to go with the increment again
268:13 - it doesn't really matter
268:15 - since our main focus is on this logic
268:18 - here in the reducer so first let's set
268:21 - up the switch one and we're going to be
268:24 - looking for Action type that's the
268:27 - property we're interested because it's
268:29 - Unique to each type over here and again
268:33 - if we have 10 types yeah we'll pretty
268:35 - much have to set up the type for all of
268:39 - them and provide that unique value then
268:42 - we want to go with case and this case
268:44 - I'm going to go with increment and as
268:47 - far as what do I want to return from the
268:49 - function well let's go with number so
268:51 - we're going to go with that initial
268:53 - value basically a state and we'll add
268:56 - action Dot and the amount that I'm
268:58 - passing in now we want to do the same
269:01 - thing for the decrement correct so let's
269:07 - just change it around and again let's
269:09 - just recall the issue with the setup if
269:13 - we add some other type to this action
269:17 - well it's going to fail silently correct
269:21 - and therefore we want to set up the
269:23 - default case and we want to assign the
269:27 - action to some variable which is type
269:30 - never because in that case if there's
269:34 - some other type over here it will
269:38 - immediately be assigned to that variable
269:42 - and we cannot assign to type never so
269:45 - let's just go over here say
269:48 - default that's going to be our default
269:51 - case let's also throw I guess quite
269:54 - typical scenario so throw new error and
269:58 - then I'm going to set up the template
270:00 - string and in here essentially let's set
270:04 - up
270:05 - unexpected for some reason this is the
270:08 - biggest challenge as far as the spelling
270:13 - unexpected action over here type will be
270:17 - equal to never and we'll assign it to an
270:19 - action so if actually action is never if
270:23 - we have handled all the possible cases
270:26 - we're good to go but if there's going to
270:29 - be some additional case and we're not
270:32 - handling right away typescript is going
270:34 - to yell and in here let's just type
270:37 - unexpected action and then let's access
270:40 - the unexpected action again the point
270:44 - really here is not to run the code I
270:47 - mean we're mostly focusing just on the
270:50 - logic over here in the redu sh so this
270:52 - is how we can set up the discriminated
270:56 - unions and exhaustive check using the
271:00 - never type in typescript okay and we
271:04 - have successfully arrived at the most
271:06 - complex and confusing Topic in
271:08 - typescript which is none other than the
271:11 - generics
271:12 - in short generics allow us to write for
271:15 - example functions with any data type and
271:20 - you can think of generics as a variable
271:23 - for types now I'm not going to Sugar Cod
271:26 - it it's not an easy topic the good news
271:29 - is though that most likely in the
271:31 - beginning at least based on my
271:33 - experience you'll primarily use generic
271:36 - functions or interfaces created by
271:39 - somebody else whether it be the creators
271:43 - of typescript or developers of some
271:47 - third party library and in that case
271:50 - you'll only need to remember one concept
271:54 - every time you see those funny looking
271:56 - angle brackets think generics and let's
272:00 - begin by taking a closer look at the
272:03 - arrays in typescript so at this point in
272:07 - tutorial we should be already familiar
272:10 - with this syntax so we have three
272:14 - variables the values are arrays and here
272:17 - we just say well what is the type for
272:20 - the array and as we're looking at this
272:23 - code and we're just focusing on
272:26 - typescript so please don't tell me that
272:29 - the answer here is the keyword let as
272:32 - you're looking at this code what is the
272:34 - one thing that doesn't
272:37 - change so what is the one thing that
272:39 - stays the same and it's kind of pretty
272:41 - obvious but I do want to start from this
272:44 - point and the answer is following notice
272:47 - how the type is changing here all the
272:49 - time but we're always always getting
272:52 - this array now of course we can make
272:54 - this complex we can provide our own type
272:56 - we can provide the union type whatever
273:00 - that doesn't change the main idea we're
273:03 - always always getting back this array
273:06 - and not only that we can pretty much
273:09 - pass here whatever we want as far as the
273:12 - type correct so it still needs to make
273:15 - sense as far as type and we'll always
273:18 - get back the array so it's not like I
273:20 - need to go somewhere and look for string
273:25 - array no I don't have such type I
273:28 - literally just have this one universal
273:30 - one that I can use because if you think
273:33 - about it how difficult it would be
273:36 - that not only we need to remember but
273:40 - also to construct such types let's say
273:43 - we'll need to have one numbers array
273:46 - type then one Boolean one and I can go
273:49 - on and on and on and
273:51 - on and actually we can examine what type
273:55 - are we getting back over here so let me
273:59 - remove this silly text and now let me
274:04 - right click then we want to go to type
274:07 - definitions and yes I know we haven't
274:10 - covered the Declarations yet don't worry
274:13 - all of that is coming up and you know
274:14 - what I'll actually pick the third one
274:16 - because it's going to be easier for me
274:17 - to show you so let's go here to type
274:20 - definition and then we're looking for
274:23 - this declaration one so we're looking
274:25 - for lib es5 D DS again we haven't
274:28 - covered them how we have access to them
274:31 - and all that all of that is coming up
274:32 - for now but just focus on this code so
274:36 - notice we have this interface again
274:38 - something we should be already familiar
274:40 - with remember we use it to provide shape
274:43 - of an object the name here is an array
274:46 - and check it out we have the funny
274:49 - looking angle brackets and inside of it
274:52 - we have this T now right away I want to
274:55 - mention T is convention you can call
274:57 - this shake and bake you will see that in
274:59 - a second once we set up our own generic
275:03 - interface or function or whatever
275:05 - basically this
275:08 - represents the notion that this type can
275:12 - be anything so I can pass here the
275:15 - string number Boolean my own type you
275:18 - name it and every time not only I'm
275:22 - going to get back the array with that
275:25 - specific type I'll also get all of the
275:28 - properties and methods that we know
275:30 - already exist on array so what am I
275:31 - talking about well we know that length
275:35 - is part of the array correct we can just
275:37 - call array. length and we're good to go
275:39 - so notice we have over here this method
275:42 - so we can definitely use it and then
275:44 - let's keep on moving and we'll see again
275:47 - all of the functions we already familiar
275:49 - with but here's the kicker for example
275:53 - pop now if you're not familiar this
275:56 - essentially is a function which removes
275:59 - the last element from the array and
276:01 - returns it but now notice what is the
276:05 - return here specified for the pop it's
276:07 - not string number or Boolean or your own
276:11 - no it's basically this D it's basically
276:15 - this generic so whatever I pass in
276:18 - whatever array I
276:20 - construct well I want to remove that
276:23 - last type
276:25 - correct I'm not saying hey this is the
276:28 - array of strings and now I need to call
276:30 - specific method to remove the string no
276:34 - basically whatever type we use to set up
276:38 - that array well that's the same type we
276:40 - remove and
276:42 - notice how essentially
276:44 - we're saving bunch of the code because
276:47 - imagine if you would have to set up such
276:50 - interface pretty much for any type that
276:54 - we can pass in the array I mean you
276:56 - would go most likely insane so that's
276:59 - why we use this variable where we say
277:01 - okay you can pass in any type and it's
277:05 - going to get treated the same way we'll
277:07 - create the array the same way we can you
277:09 - call the methods the same way so so none
277:11 - of that changes so whatever type we pass
277:15 - in well that's the type we're going to
277:17 - use to operate so hopefully again this
277:20 - is clear that it definitely makes sense
277:24 - in a lot of instances to set up the
277:27 - generic one because you don't want to
277:29 - set up essentially the interface for
277:32 - every possible type that you can pass
277:35 - intoa and now knowing this we can
277:38 - actually take a look at the second
277:41 - approach we have to construct the arrays
277:44 - now I can tell you right away that just
277:45 - because we know the generics you won't
277:47 - have to use the syntax so you can still
277:50 - use this I would say more userfriendly
277:53 - syntax but I do want to showcase that
277:57 - since this interface is an array we also
277:59 - have this option so now let me comment I
278:02 - guess these ones out you know what let
278:04 - let me start everything from scratch so
278:06 - I want to go here with let and again I'm
278:09 - going to call this array one and and
278:11 - then as far as the type sorry I'm not
278:14 - going to go with string I will go with
278:16 - array and then let's pass in the string
278:20 - and now as far as the result well that
278:22 - one is actually exactly the same so I'm
278:25 - just saying yeah it's going to be an
278:27 - array of
278:28 - strings and
278:30 - again this doesn't change the only thing
278:34 - that's going to
278:35 - change the type that we're passing in so
278:38 - if we pass in the string and of course
278:41 - course we'll get back array of strings
278:43 - as well as all the methods that we can
278:45 - call so if I call the pop on this one on
278:48 - array one guess what it's going to
278:51 - remove the last item and the type is
278:53 - going to be string and of course we can
278:55 - repeat the same for number and bullion
278:58 - and with this in place now we can move
279:00 - on to the next topic all right and once
279:03 - we're familiar with the main Concepts
279:05 - let's construct our own let's start easy
279:08 - let's just go with the function as well
279:10 - as the interface
279:12 - so here's the goal we want to create a
279:15 - function which is going to take any type
279:20 - and return the same type so one approach
279:25 - could be following we can go with
279:27 - function then let me go with create
279:30 - string as far as the argument I'm going
279:32 - to call this string basically I'll give
279:34 - it a type string it returns a string and
279:37 - then from the function we return the
279:40 - argument now
279:42 - everything is awesome but we pretty much
279:44 - need to return the same function for any
279:49 - type so we need to create one for the
279:52 - number for Boolean and rest of them now
279:56 - I'm not going to create function for all
280:00 - of the types but you know what let me
280:02 - just Showcase with a number so let's say
280:05 - if from this function we want to return
280:08 - a number this is what we'll need to do
280:11 - and as you can see this gets annoying
280:13 - pretty fast correct and we only have two
280:17 - types so this is what I was mentioning
280:18 - in the previous video imagine that array
280:21 - interface if it's not a generic that
280:24 - pretty much you'll need to copy and
280:26 - paste and everywhere where you have a
280:29 - string you'll have to change it to
280:30 - number and Boolean and then rest of the
280:32 - types so what's the solution well this
280:34 - is where we use the
280:36 - generic I will leave this one for your
280:39 - reference or you know what actually you
280:41 - have it going read me my bad let's start
280:43 - from the scratch I think it's going to
280:44 - be better we're going to go with
280:45 - function then let's call this something
280:48 - generic and I think generic function is
280:51 - good
280:52 - enough and we will set up the parameter
280:55 - we will set up the
280:57 - logic now I want to set up the variable
281:00 - for my type so instead of hard coding
281:03 - instead of number and string I'll say it
281:06 - can be any type and both my argument as
281:10 - well as what I'm returning are going to
281:13 - be that type so we go here with this
281:16 - angle bracket like I said you can call
281:18 - this shake and bake just make sure you
281:21 - use the same name and again the
281:24 - convention is just to go with d which
281:27 - stands for type so we go here with t
281:30 - then we say that yeah argument is
281:33 - actually going to be this type so I'm
281:35 - not going to say that it's a string
281:36 - number whatever no whatever type we have
281:39 - over here and as far as the return will
281:42 - also go with the T this is what I'm
281:45 - returning from this function and now we
281:47 - just need to set up the logic where we
281:49 - return the argument so now we
281:53 - can go here and set up some string value
281:57 - set it equal to generic function then
282:01 - since I'm creating a string value this
282:03 - is the type I want to pass in and then I
282:07 - just want to provide a string let's save
282:10 - this and now I can do the same thing for
282:12 - the number so instead of string we're
282:16 - going to go with number and instead of
282:19 - type string will set up the number now
282:22 - it does need to make sense as far as the
282:25 - argument so it's not like I'll randomly
282:27 - pass in the string as you can see
282:29 - typescript is complaining and we set up
282:32 - over here the number so now we can use
282:36 - this function with any type even the
282:39 - ones that we set up ourselves so this is
282:42 - not limited anymore to one specific type
282:45 - this right now is generic function where
282:47 - we can pass in any type and we'll get
282:51 - back the same type and while we're on
282:54 - topic let's also take a look at the
282:57 - interface so I'm going to go with
282:59 - interface and let me right away call
283:02 - this
283:03 - generic interface same deal if we want
283:07 - to set up a generic one we already know
283:09 - that we need to go with angle brackets
283:12 - let me stick with convention with the T
283:15 - and then there's going to be a value
283:17 - property the type will be whatever we're
283:21 - setting up over here SD that's why they
283:25 - need to match and let's also set up the
283:28 - get value
283:30 - function which is not going to take any
283:33 - parameters but it will return the same
283:36 - type and now let's create a new instance
283:41 - I'm going to call this generic string
283:43 - which is somewhat funny but let's just
283:45 - stick with that one since I have that in
283:46 - a read me so we're going to go with
283:48 - generic string we go here with generic
283:52 - interface we say that yep as far as the
283:56 - type it's actually going to be a string
283:59 - and now inside of our instance of course
284:02 - we need to follow the same rules so the
284:04 - value I'm going to be setting up has to
284:06 - be a string so we'll go here with hello
284:09 - world and then as far as get value
284:13 - one well let's just return this do value
284:17 - return this do value let's save it and
284:21 - once I save I have right now the string
284:24 - instance from my generic interface so
284:27 - this is how we can construct our own
284:30 - generic functions as well as generic
284:34 - interfaces all right and before we start
284:37 - working on the more complex examples I
284:40 - do you want to showcase something most
284:43 - likely as you're looking at these first
284:45 - few examples you're like I mean this is
284:47 - ridiculous what is the actual need for
284:51 - such functions I mean I do understand
284:53 - yeah there's angle brackets yeah I can
284:56 - use this T and it's going to work with
284:57 - any type but in reality this is just
285:02 - silly okay hold that thought and let's
285:06 - just set up a a sync function and
285:09 - remember in JavaScript
285:11 - what do async functions return they
285:14 - return a promise so let's go here with
285:17 - async call this function I'm going to go
285:20 - with some funk for now let's not worry
285:23 - about the return or you know what no
285:25 - let's set it equal to a string do
285:27 - definitely want to showcase something so
285:29 - we right away have the error this is
285:31 - something we're going to deal with for
285:33 - now let's just return and hello world so
285:37 - technically it's kind of correct we're
285:40 - return a string so what is typescript
285:43 - complaining well
285:45 - again same functions return what they
285:48 - return a promise so now let's do the
285:51 - same thing like we did with the arrays
285:54 - let's look at the type that we're
285:56 - getting back and hopefully in the
285:58 - process you'll see that even though this
286:01 - might look somewhat silly essentially
286:04 - this is the foundation that you'll see
286:08 - over and over and over in document ation
286:11 - so if I'm going to go here with
286:14 - result and some funk and we take a look
286:18 - at the result I mean it says that it's a
286:22 - string but we clearly have this issue
286:24 - over here and notice now we have this
286:27 - the return type of a sync function or
286:29 - method must be the global promise again
286:33 - funny looking angle bracket type did you
286:36 - mean to write promise and hm interesting
286:40 - we actually have the generic again so
286:43 - you know what let me remove the return
286:47 - type for now I'll rely on typescript to
286:50 - infer a type and now let's click on the
286:52 - result and type
286:54 - definition and same deal noce we have
286:57 - over here this
286:59 - interface the name is promise and again
287:03 - it's a generic and yes it has a little
287:06 - bit more code but not just the general
287:09 - idea effectively we just get back this
287:13 - promise and in there we have the type so
287:18 - the point is that every time we have
287:20 - this async function we do need to set up
287:24 - promise as a return type and we just
287:27 - need to remember that it's a generic so
287:31 - instead of typing string like I was
287:33 - doing before we just go with okay we're
287:36 - returning a promise but since it's a
287:40 - generic we need to specify the type in
287:44 - the angle brackets so again the main
287:46 - point is that yes I know that this might
287:50 - look silly but keep in mind that this is
287:52 - going to be the foundation that you see
287:54 - in documentation as silly as it looks it
287:58 - actually handles all of the cases that
288:00 - we're interested because in here I can
288:04 - return whichever type I need in that
288:07 - particular instance and I simply just
288:09 - need to provide the value over here in
288:13 - the angle bracket so let's say if I'm
288:16 - going to go with 234 or whatever number
288:20 - then is going to complain so now I just
288:22 - need to go over here and say yeah I will
288:25 - return a promise because it's a sync
288:27 - function but the type in this case is
288:30 - going to be a number so yes even
288:34 - though our first two examples might look
288:39 - super silly
288:41 - they use the same concept that you're
288:44 - going to see later in declaration files
288:47 - and with this in place now we can move
288:49 - on to the next topic all right and once
288:51 - we are familiar with the fundamentals of
288:54 - generics let's work on a tiny challenge
288:58 - where we want to set up a function in my
289:01 - case I'm going to call this create array
289:04 - which takes in two things it takes the
289:07 - number length so that just controls the
289:11 - length of the array so if I pass here
289:14 - three then I'm going to have three items
289:17 - if I have pass here 15 then obviously
289:19 - it's going to be 15 and then the second
289:22 - thing is going to be the actual value so
289:26 - if I pass in the string then I should be
289:29 - getting back the array of strings if
289:33 - it's going to be number then it's going
289:34 - to be an array of numbers and hopefully
289:36 - you see where I'm going with this and I
289:39 - guess let's start
289:42 - Again by hardcoding hopefully in the
289:45 - process we'll
289:46 - see why we want to use generics but
289:50 - first let's create a function I'm going
289:52 - to go with
289:54 - generate string array like I said we're
289:57 - looking for two things length is going
290:00 - to be the length of an array and also
290:03 - well what is the actual value and as far
290:06 - as the type I'm going to go with string
290:08 - now from this function since I'm taking
290:10 - in the string type I want to return a
290:14 - string and array now when it comes to
290:18 - logic I want to create the result
290:21 - variable this will actually be string
290:26 - and array and for now it's just going to
290:28 - be empty array but yes we're going to
290:32 - store over here the strings okay good
290:36 - then let's assign result to array so
290:40 - again we can use our object in there
290:43 - first we want to pass in the length so
290:46 - how long is going to be the array how
290:47 - many items we're going to have over
290:49 - there and then let's just call the fill
290:51 - method so pretty straightforward
290:54 - whatever value we pass over here we'll
290:56 - add to our result so we'll call fill and
291:00 - we'll pass in the value and then from
291:02 - this function since I want to get the
291:04 - array of strings let's just go the
291:07 - return and result let's save it and
291:11 - again everything is awesome but I need
291:15 - also the same array for numbers booleans
291:18 - or any other type so now we just need to
291:22 - make this function generic or you know
291:25 - what let me just quickly showus that the
291:27 - code actually works so generate string
291:31 - array how many items I don't know let's
291:33 - go with six because I have the example
291:36 - of three so you probably don't believe
291:37 - me let me go over here and notice
291:40 - everything works so I get back my array
291:43 - it's typ string and I have six items
291:46 - okay beautiful so now how we can make
291:49 - this function generic and again most of
291:53 - the logic is actually going to be the
291:55 - same the only difference everywhere
291:58 - where we have the string we just want to
292:00 - convert it to a generic we want to
292:03 - convert it to that variable and as a
292:06 - result we'll be able to pass pretty much
292:09 - any type
292:11 - so let me copy and paste instead of
292:13 - generate string array we'll just call
292:17 - this create array create array length
292:21 - stays the same but this one actually is
292:23 - going to be equal to at and now we want
292:26 - to set up that angle bracket so again we
292:29 - set up this variable for a type and we
292:32 - pass here DT so now everywhere where we
292:36 - want to reference the type we'll use the
292:39 - T instead so here instead of string
292:41 - instead of hardcoding that we'll go with
292:43 - array and pass in the T then instead of
292:48 - strings we're going to say that yeah the
292:50 - result is going to be just an empty
292:52 - array of this specific type this doesn't
292:56 - change this doesn't change now we just
292:59 - want to invoke it and we'll do the same
293:02 - thing like in the read me we're going to
293:04 - go with strings then create
293:07 - array we want to provide string over
293:10 - here here and far as the value let's go
293:13 - 10 the more the better I
293:15 - guess let's copy and paste and let's
293:19 - call this
293:20 - numbers so
293:23 - numbers this will be a
293:26 - number uh let's go with
293:28 - 15 and as far as the value I'm going to
293:31 - go with 100 so now we just want to log
293:35 - both of these values array of numbers
293:39 - and strings
293:41 - strings let me move this one
293:44 - up just because don't ask me why and if
293:48 - everything is correct this is the result
293:50 - we should see in the console so this is
293:53 - how we can create a function which takes
293:56 - any type and returns an array with
294:00 - specific length of that particular type
294:04 - all right and up next let's see how we
294:06 - can set up multiple variable types and
294:10 - in my case I'm going to use the function
294:13 - example so we want to set up a function
294:16 - called pair which takes in two
294:19 - parameters however the type is not going
294:21 - to be the same and then from the
294:24 - function we just return both of those
294:26 - parameters but again we need to return
294:30 - the same types so let's go here with
294:34 - function again the name will be pair we
294:38 - start with our good old T so we already
294:40 - know that one but if we have multiple
294:43 - variables like this we just add a comma
294:47 - and then provide the value again it's a
294:49 - convention to go with du and then if you
294:52 - have more parameters just follow the
294:56 - logic over here but you can name them of
295:00 - course differently as well then we're
295:03 - going to set up our param I guess one so
295:07 - this one will be equal to T and and then
295:10 - param 2 is going to be equal to U like I
295:14 - said from this function I want to return
295:16 - an array and I want to keep the same
295:19 - types so this will be equal to D and U
295:24 - and let's just set up the logic where we
295:26 - have Pam one comma and then Pam 2 so now
295:30 - let's invoke it and if everything is
295:33 - correct we should get the correct result
295:37 - so we're going to go with the result
295:38 - that one is equal to pair
295:41 - and then I'm going to go with number and
295:44 - a
295:45 - string let's go with one two three and
295:48 - hello and check it out typescript is not
295:51 - complaining so if you have more variable
295:55 - types add a comma and then the common
296:00 - approach is to go with you and then rest
296:02 - of the letters that follow you if you
296:05 - have more parameters or you can come up
296:07 - with your own names just make sure you
296:09 - use the same name in the parameters as
296:13 - well as the function logic and up next
296:16 - let me quickly show you that t script
296:18 - can still infer the type even if we
296:21 - don't provide the types here in the
296:24 - angle brackets but just like before we
296:26 - need to be careful yes if you're
296:29 - expecting to get back the number and a
296:32 - string everything is awesome but if by
296:35 - mistake you pass in some other type it's
296:38 - not like typescript can magically figure
296:40 - this out so therefore if you don't pass
296:43 - in the types You're Expecting just make
296:46 - sure that you pass in the correct values
296:49 - hopefully that is clear and as aen this
296:52 - is something that we're going to see
296:53 - later when we start working with react
296:57 - where use State hook actually is a
297:00 - generic which again if we think about it
297:03 - kind of makes sense right I
297:06 - mean we can pass in string into use
297:09 - state
297:10 - same how we can pass in the array so
297:13 - this used State hook needs to accept
297:17 - whatever value we pass in whether that
297:19 - is a string number all the way to array
297:23 - of
297:25 - objects and essentially since it's a
297:28 - generic we can technically bypass the
297:32 - angle brackets so let's say if it's a
297:34 - string I just let typescript to infer
297:38 - that yes for sure it's going to be a
297:39 - string since I'm passing in the empty
297:41 - string but for example when we're going
297:44 - to be setting up the Rays typescript is
297:46 - going to complain and at that point
297:49 - we'll need to specifically let
297:51 - typescript know hey is it going to be an
297:54 - array of strings numbers and in this
297:57 - case I'm just coming up with some fake
298:00 - product type so hopefully that is clear
298:03 - yes typescript can still infer the type
298:06 - just be
298:07 - mindful when you use such a pro approach
298:11 - and also I want to show you how we can
298:13 - set up the constraint on a type
298:16 - essentially I can limit the type options
298:20 - I can pass in so let's imagine this I
298:23 - have a function of process value
298:26 - function process value and in here I
298:31 - have my generic T but I only want to
298:34 - limit this to a string so the keyword
298:38 - we're looking for is extends and then in
298:41 - here we pass in the specific type now in
298:44 - the following video I'll show you a
298:46 - different example so don't think we can
298:48 - only use it here with primitive types
298:50 - but let's just start nice and easy so
298:52 - we're going to go over here with the
298:54 - string then we want to set up a
298:57 - parameter again I'm going to say that
298:58 - it's equal to at and you know what let's
299:01 - say that we're also going to return it
299:04 - so in here let's log it let's say value
299:08 - and let's also return the value let me
299:10 - save it let me call Process value now in
299:14 - this case I'm just going to infert the
299:16 - type and I'm going to say hello and as
299:19 - you're looking at it you're like well I
299:21 - mean at this point we can simply set up
299:25 - a function without the generic correct
299:27 - so I can simply say that yeah I'm going
299:29 - to be passing in the string and I'm
299:31 - expecting a string back and you're 100%
299:34 - correct so with this particular example
299:36 - I mean there is no real benefit of
299:40 - setting up the type and then extending
299:42 - it only down to a string but again it is
299:47 - a option and in a following video you'll
299:50 - see a more complex example where
299:52 - actually it definitely makes sense now
299:55 - we can also use the union type so
299:57 - effectively I can go with string or
299:59 - number and at this point if I call in
300:03 - process value I'm able to pass in the
300:07 - number as well so for example I can go
300:09 - with 12 now if I'm going to go with
300:11 - process value and then pass in I don't
300:14 - know true then of course typescript is
300:16 - going to complain because we can only
300:18 - pass in string or number in this generic
300:22 - function and once we're familiar with
300:24 - the extends keyword now let's see a more
300:28 - complex example where we have our own
300:32 - types so let's imagine the scenario
300:35 - where I have type car two properties
300:38 - branded model both of them strings then
300:41 - I create the instance same with product
300:44 - only in this case the properties are
300:46 - name and price and I have string and
300:48 - number again I create the instance and
300:51 - the same with students so the properties
300:53 - is the same the first one name it's a
300:57 - string but then the second one is age
301:01 - and in here I want to come up with a
301:03 - function I guess I'm going to go with
301:05 - print name because why not where I just
301:08 - want to access the name prop property so
301:10 - let's go with our function print name
301:15 - then let's provide the type the generic
301:18 - in this case we're going to say that
301:20 - input is also going to be D and we're
301:23 - not going to return it so I'm going to
301:24 - go with void now even if we just try to
301:28 - conso log input that name typescript is
301:31 - going to complain why because it has no
301:35 - guarantee that there will be that name
301:38 - properly so in this scenario we're not
301:41 - going to extend to a string we actually
301:45 - need to look for the types which have
301:49 - that name property correct and in our
301:52 - case we can either go with the student
301:54 - or with the product we just set up over
301:57 - here extends and we go with student so
302:00 - just like before with string number
302:02 - Boolean or whatever we can use our own
302:05 - types as well so now if I go and invoke
302:09 - the print name in here and if I'm going
302:13 - to pass in the student everything is
302:15 - going to work now it's going to fail if
302:18 - I pass in the product even though it has
302:21 - the name correct let's try it out so I'm
302:24 - going to copy and paste and once we
302:26 - invoke the not print name print name
302:30 - sorry we're looking for a product of
302:31 - course typescript is going to complain
302:33 - because the type is product in this case
302:37 - so yes we can still use over here the
302:40 - union type and passing the product but
302:43 - there's actually a better way because if
302:45 - we think about it what are we going to
302:47 - do now we'll look for all of the types
302:51 - where we have the name and then
302:53 - essentially just use the union type and
302:57 - add it to extend I mean technically it's
303:00 - an option but like I mentioned there's
303:02 - actually a better way and that better
303:04 - way is that we can set up an object we
303:07 - can set which property we're looking for
303:10 - and then we can pass here in the extends
303:13 - now we can set it up as a separate
303:15 - variable or we can pass here directly so
303:18 - instead of passing in my student or
303:22 - product types I can simply set up an
303:25 - object and I can say Hey listen I'm
303:28 - looking for name property and it has to
303:31 - be a string so now that script is smart
303:34 - where it says okay so student yeah it
303:37 - does have a name so everything is going
303:38 - to be fine same with the product but if
303:42 - I'm going to try to call it with a car
303:44 - it's not going to work because there is
303:46 - no such property so if I pass in this
303:48 - instance notice entually it complains
303:51 - that the name property is missing in the
303:55 - car so this is an interesting way how we
303:57 - can use extends not only with a
304:00 - primitive type or our own custom type
304:03 - but also we can simply narrow down to
304:06 - the shape that we are expecting okay and
304:10 - at the very end of generics let me show
304:12 - you how to set up default type just
304:14 - please keep in mind that it's not going
304:18 - to be super useful in our examples since
304:21 - we're hardcoding all of our data anyway
304:24 - basically they're going to be far more
304:27 - useful when we don't know what is going
304:30 - to be the shape of our data so let's
304:33 - imagine we have
304:35 - interface it's going to be a generic and
304:38 - I'm going to call this store data I'm
304:41 - going to say that I'm expecting T and
304:44 - then inside of it there's going to be a
304:46 - data and it's going to be equal to an
304:49 - array of types so whatever we pass over
304:53 - here then let's set up store numbers so
304:56 - store numbers and first let's set up the
305:00 - type so we go with store data then
305:04 - number and then we set it equal to data
305:07 - and in here since I want to store
305:09 - numbers I'm just going to go with one
305:12 - two three and four okay so this works
305:18 - but what if let's say I have some random
305:21 - stuff what if I don't know what I'm
305:23 - going to have in the array well let's
305:26 - try it out so we're going to go with
305:28 - random stuff set it equal to store
305:33 - data for now we're not going to pass
305:35 - anything in we're going to go with data
305:38 - and then we'll set up some random stuff
305:41 - so I'm going to go with my string over
305:43 - here as well as the number now store
305:47 - data is expecting the type so at the
305:51 - moment essentially we have two options
305:54 - either we set up over here the default
305:56 - one then we won't get the error over
305:59 - here or since let's say I not sure what
306:04 - data I'm expecting back technically I
306:07 - can hardcode here any I can say yeah I
306:11 - mean I'm not sure what values I'm going
306:14 - to have in this array so I'm just going
306:16 - to go with type any now if we want to
306:19 - bypass
306:21 - this essentially passing in any if we
306:24 - don't know what data we're expecting we
306:27 - can simply set D equal to any or any
306:31 - other default type as a side note you
306:33 - can go here for example with string or
306:35 - whatever is just somewhat common to see
306:39 - and as default type and in that case we
306:43 - don't need to even provide it so if I
306:46 - don't provide the type then right away
306:50 - typescript is going to use any as my
306:53 - default one again kind of hard to see
306:56 - over here because we can clearly see
306:58 - basically what we have in Array but just
307:01 - to Showcase that I'm not making this up
307:04 - let me grab the example from the readme
307:08 - so if you're interested that you can
307:09 - also copy and paste now there might be
307:12 - some errors since I don't have those
307:14 - values over here don't worry about it
307:16 - too much I just mainly want to showcase
307:19 - some
307:20 - stuff most likely you're familiar with
307:22 - the library called axios which is super
307:25 - popular to make HTTP requests and
307:29 - normally the syntax is following where
307:31 - we go with AOS then the method Now by
307:34 - default it's get but in here I hardcoded
307:37 - get as well and we pass it the URL and
307:40 - the data is
307:41 - located in the object in data property
307:45 - now if we take a look at their
307:48 - documentation we can actually see that
307:52 - get is a generic what does that mean
307:55 - well it's looking for the type but if
307:59 - it's not passed in over here it uses any
308:03 - so if let's say you just called axios
308:06 - doget it's going to set data as any so
308:10 - whatever we're getting back and we can
308:12 - actually see that if we continue
308:15 - inspecting the documentation notice
308:18 - there's also a second one which is r and
308:21 - that one by default is equal to aio's
308:24 - response and it uses the type we pass in
308:27 - so essentially this is another generic
308:31 - interface which is used as a second type
308:36 - over here and essentially it uses the T
308:39 - that we pass in now if we take a look at
308:42 - the axio response in our generic one we
308:45 - can see that we're getting back this
308:46 - data and this is set equal to T but
308:49 - again the default value is any so for
308:53 - example if we don't
308:55 - provide any info on a type it's going to
308:59 - be equal to any because that's the
309:03 - default as we can see it's used over
309:05 - here it's passed down to AIO response
309:07 - and the same deal in in the interface
309:10 - now if we set up the angle brackets and
309:15 - specifically say that Hey listen I'm
309:17 - fetching this data but I know that
309:20 - structure is going to be following I'm
309:22 - going to get back the array of object
309:27 - and in there I'm going to have name
309:31 - which is going to be a string in that
309:33 - case this data will have this shape so
309:38 - if we
309:40 - provide essentially a shape that we're
309:42 - expecting then the Ste becomes that
309:45 - shape and goes all the way down to data
309:48 - now if not then they use the default
309:52 - parameter and essentially set equal to
309:56 - any now I know it's a lot of code in
309:58 - here a lot of angle brackets and that
310:01 - but hopefully it's clear now we can
310:04 - nicely use type any if we don't know
310:07 - what shape we're getting back because
310:09 - again think about it this is an HTTP
310:12 - request so the shape can literally be
310:15 - anything and therefore the default one
310:17 - is any and then if we provide specific
310:20 - shape well that's the shape we're going
310:22 - to have here in this data property okay
310:26 - and while we're still on a topic of HTTP
310:29 - let's also see how we can fetch data
310:31 - with typescript now normally I use axos
310:35 - library with react query simply because
310:39 - the setup is super straightforward and
310:42 - react query is really good at inferring
310:46 - the types but let's start nice and easy
310:49 - and cover up the straightup pitch API
310:53 - first and also keep in mind that in this
310:56 - example we'll just log the result so we
310:59 - won't set any state or display pretty
311:01 - much anything in a browser we'll just
311:03 - check for correct results in developer
311:06 - tools all of that is coming up just be
311:09 - patient and wait for the react part of
311:13 - the course now also you will need the
311:15 - URL so in the read me I provided a URL
311:20 - back to my server where we can just
311:22 - fetch some random tours we were using
311:26 - this one in my react
311:28 - course basically build one of the
311:30 - projects so this is totally up to you if
311:33 - you want to use this URL feel free to do
311:36 - so if not if you have some other URL you
311:39 - you can of course use that as well and
311:41 - for now we'll just simply set up a fetch
311:44 - function we will log the result we'll
311:47 - see the issue if we don't have any type
311:51 - and then in the following video we'll
311:52 - have a challenge where you'll have to
311:54 - set up the type and proper returns and
311:57 - all that cool stuff so for now let me
312:00 - just grab I guess the URL so we're
312:03 - looking for this one over here and we
312:05 - want to come up with a function so in my
312:08 - case I'm going to go with
312:10 - sync function let's call this fetch data
312:14 - it's going to be looking for URL it will
312:16 - be a string over here for now no returns
312:19 - we just want to set up the TR catch
312:22 - since we have a sync operation it's
312:24 - always a good start now in here let's go
312:27 - with response so this one will be equal
312:30 - to a weight fetch we pass in the URL so
312:33 - notice how we can right away start using
312:35 - Fetch and actually we'll cover that in I
312:38 - believe two three videos how come we
312:40 - have access to this function without any
312:45 - issues and typescript doesn't complain
312:48 - and fetch has this interesting setup
312:50 - where it doesn't treat for example 404
312:55 - errors as errors it only treats the
312:59 - network errors as errors basically if
313:01 - you'll have 404 over here it's not going
313:03 - to come up in the catch block so we will
313:06 - do a manual check where else say if
313:10 - response.
313:12 - okay is not set well then I'll throw my
313:16 - own error again this is just an extra
313:18 - check we need to do with fetch for
313:21 - example you don't need to do that with
313:22 - axio so go row new error then let's set
313:26 - up the template string we go with HTTP
313:30 - error and the status here let's go with
313:34 - status and we're going to set it equal
313:37 - to a variable
313:39 - let me access that we're going to go
313:42 - response that status so now we're
313:45 - checking even if we'll have 404 error it
313:49 - will actually trigger the error and we
313:51 - will return whatever we have in catch
313:54 - block and now let's access the data
313:57 - again we're looking for the array of
313:59 - objects that's what we have here and you
314:02 - can definitely see that if you navigate
314:04 - to this URL in the browser
314:07 - and we want to set up another
314:10 - await let's go with the response and
314:14 - Json let's invoke that and at the very
314:17 - end of the tri block let's go with
314:19 - return data now in the catch block let's
314:23 - right away construct the message so I'm
314:26 - going to go with error message and this
314:29 - one will be equal to ter operator where
314:33 - I'll check if the error is instance of
314:37 - error well then I'll will set the error
314:41 - message variable equal to error. message
314:46 - since I know that the property is going
314:48 - to be there if not then I'll just go
314:50 - with something generic there was an
314:54 - error so let's set this one up and then
314:58 - let's log just so we can see what's
315:00 - happening we're going to go with error
315:02 - message here and then at the very end of
315:05 - the catch block we want to return empty
315:07 - array so if we're not able to get all of
315:11 - the tours will return
315:12 - MTR now I guess for now let's just log
315:17 - what we have in the data and let's
315:20 - invoke the fetch data fetch data let's
315:23 - pass in the URL if everything is correct
315:26 - in the console we should see this array
315:30 - of objects and if I go over here and
315:33 - mess with the URL since I have this
315:36 - check over here now the response is not
315:39 - going to be okay and I can clearly see
315:41 - that over here so we're nicely throwing
315:43 - the error as well and this is going to
315:45 - be my error message so this works now
315:50 - where is the issue well let's go over
315:53 - here set the tours away to TS so now I'm
315:58 - essentially assigning this to some kind
315:59 - of variable and notice something
316:01 - interesting what is the type well it's
316:04 - any because typescript doesn't know what
316:06 - I'm getting back so so yeah I was able
316:09 - to fetch data I have access to it I have
316:12 - no issues but this is equal to type any
316:15 - now why is that such an issue well let's
316:18 - try doing this let's go towards map we
316:21 - know that we're iterating over correct
316:24 - our array and we should have access to
316:27 - each and every object over there but if
316:29 - I type tour check it out typescript
316:32 - immediately complains says okay I have
316:35 - no info on this this is type any so how
316:39 - am I supposed to know what is this tour
316:42 - so we're not getting any suggestions
316:45 - we're not getting Auto completions
316:47 - anything like that so yeah I can set
316:49 - this equal to tour and and
316:52 - then go with tour. name but I mean this
316:58 - is not going to be sustainable in the
317:00 - long run so yeah I can nicely see
317:02 - everything in browser's console but
317:06 - since we're working with typescript we
317:08 - will have to figure out how to provide
317:12 - the shape of our data to typescript so
317:15 - typescript knows that Hey listen this
317:17 - tours is going to be an array of Tours
317:20 - where I have following properties so I
317:23 - have ID name info and rest of them and
317:25 - this is something that we're going to do
317:27 - in the next video as a challenge all
317:30 - right and once we see the issue now
317:32 - let's fix it how well we're working with
317:35 - typescript so we need to provide the
317:38 - shape and set up the correct return type
317:42 - for our fetch data and once we do that
317:45 - typescript is going to know what we have
317:49 - there and then we'll have Auto
317:51 - completion suggestions and all that cool
317:53 - stuff so here's the
317:55 - challenge set up to type a hint you can
317:59 - use the URL as your reference and also
318:03 - set up a proper return type for the
318:07 - fetch data again hint remember that it's
318:11 - a promise correct because it's a sync so
318:14 - first let me navigate to the browser and
318:16 - I can see that essentially each and
318:19 - every object is going to have ID name
318:22 - info image and price and guess what it's
318:25 - pretty straightforward all of them are
318:27 - strings so now I just want to navigate
318:30 - back to
318:31 - tutorial somewhere over here set up my
318:34 - type I'm going to go with type and name
318:36 - is up to you in my case I'm going to go
318:38 - with tool
318:39 - ID is going to be equal to
318:42 - string then I have the same for name
318:45 - info image and price so you know what
318:47 - let me just copy and paste hopefully
318:49 - it's going to be faster in the long run
318:52 - so we have info here then we have image
318:57 - and at the end we also have the price
319:00 - let's save this and there's two places
319:04 - where we want to set up this type so
319:06 - first we want to set it here where we
319:08 - have the return and I'm also going to
319:11 - set it over here where I have the data
319:14 - so I'm going to say that I'm expecting
319:16 - from this. Json back my array and it's
319:20 - going to be an array of Tours and the
319:23 - same over here for my fetch data I'm
319:26 - going to go with my return and remember
319:28 - this is a sync correct so what do we
319:30 - need to pass in a promise promis is what
319:34 - it's a generic so we go over here with
319:37 - tour and then we pass here the array as
319:41 - well now don't worry if it's empty it's
319:44 - still technically going to match
319:46 - whatever we have in our return and now
319:50 - we don't want to set this as any of
319:52 - course we can actually go back and we'll
319:55 - nicely see that this is a tour why is
319:58 - that super beneficial because check it
320:00 - out if I'm going to go here with log and
320:03 - tour dot notice I have all of these
320:07 - properties right away avail ailable I
320:09 - can go with name save it again the
320:11 - result in the browser is not going to
320:13 - change but essentially this is just a
320:17 - type Safe Way how we can fetch data
320:20 - where we come up with the type we set up
320:24 - proper return and after that can start
320:27 - using this data in a type Safe Way in
320:31 - our project all right and the moment we
320:34 - feel good about ourselves that we have
320:36 - nicely provided the type and Everything
320:38 - is Awesome we can start using in our
320:41 - project let me throw you a m grenade so
320:46 - what do you think is going to happen if
320:48 - I'm going to remove some Properties or
320:51 - I'm going to add some extra ones so
320:54 - let's say if I'm going to go with
320:56 - something and then I'm going to set it
320:58 - equal to a bullion what do you think is
321:01 - going to happen you think I'll have
321:03 - access to it you think typescript is
321:05 - going to complain and I guess you can
321:07 - clearly see that typescript is is not
321:08 - complaining and actually if I go over
321:11 - here technically I can even select it
321:15 - but what is the result I'm getting back
321:18 - undefined so here's the
321:21 - kicker yes this is definitely something
321:24 - we want to do we do want to provide a
321:28 - correct shape to the typescript but
321:32 - there's no way for typescript to check
321:35 - this at
321:36 - runtime so yes this is super useful for
321:39 - us to later use in our code you saw
321:43 - previously what happens if we don't do
321:44 - that then basically typescript thinks
321:47 - it's any but also just because we set up
321:50 - this type over here at build time it
321:53 - doesn't 100% guarantee that at run time
321:57 - we'll get the correct results because
322:00 - this is just build time in here we're
322:02 - saying yeah this is going to be my shape
322:04 - so I can type here whatever I want and
322:06 - typescript is going to be like Hey
322:08 - listen
322:09 - you told me that this promise is going
322:11 - to return the array of Tours and this is
322:15 - going to be the shape for the tour but
322:18 - what if the something is actually not
322:20 - there I mean there's no way for
322:22 - typescript to check that and therefore
322:25 - in the following video we'll take a look
322:27 - how we can do the runtime checks with
322:30 - the help of extra Library by the name of
322:34 - Zod okay and up next let's see how we
322:37 - can validate
322:38 - data at runtime first off let me just
322:42 - mention that technically you can do it
322:45 - manually so in this case yes we can
322:47 - iterate over data check if the specific
322:50 - property exists as well as has the
322:54 - proper type and even though it sounds
322:56 - super cute in reality it can get messy
322:59 - pretty fast so instead if you ever need
323:03 - to validate data in such a way Zod
323:07 - library is a very valid Choice simply
323:09 - because it provides bunch of options out
323:11 - of the box and it's far better battle
323:14 - tested than our own validation code now
323:18 - you can use Zod in other scenarios as
323:21 - well for example in my nextjs course we
323:25 - use Zod to validate form submissions on
323:28 - the client as well as server actions on
323:32 - the server if you interested in learning
323:35 - more about Zod just visit Zod Dev or you
323:40 - can follow the link I left in the read
323:44 - me first thing we'll need to do is
323:46 - install the library so I'm going to open
323:49 - up the terminal now I'm going to open a
323:53 - new window technically you don't have to
323:57 - just make
323:58 - sure if you stop the server to start it
324:01 - up again otherwise stuff is not going to
324:04 - work so in this window I simply want to
324:06 - run npm install
324:08 - and S so now we install this library and
324:12 - as a side note in few videos we're going
324:13 - to talk about declaration files so
324:16 - there's another reason why I'm
324:17 - installing this Library so we install
324:20 - Library okay everything's beautiful I
324:21 - can close this window there's really no
324:23 - need then we want to import Z from Zod
324:27 - and essentially it's a named import and
324:30 - then we want to construct our schema so
324:33 - let's set this one up and you know what
324:35 - I can just type it scratch I guess so
324:38 - let me go over here let me go with
324:40 - import then Z from and I'm looking for
324:44 - my Zod Library again if we have
324:46 - successfully installed should be
324:48 - somewhere over here notice I have
324:50 - dependency and there I have the Zod one
324:55 - so we import the e z and then we want to
324:58 - construct our schema so this is very
325:01 - similar to what we have over here this
325:03 - is going to be shape of our data but
325:08 - difference well we'll use Zod methods
325:11 - and this is going to be checked at run
325:14 - time so I'm going to come up with t
325:17 - schema and as a side note eventually
325:20 - we'll set this equal to a different
325:23 - value but not for now so in here we want
325:25 - to go with z and then the object is the
325:29 - method we're looking for so I'm pretty
325:31 - much saying that I'm constructing an
325:33 - object and here yes we pretty much want
325:35 - to provide the same properties and and
325:38 - as a side note I think I can remove this
325:41 - something here and this one here as well
325:43 - for now we'll figure out what we're
325:45 - going to do there in a second and yes we
325:49 - want to set up the validation for the
325:53 - same property so this is not going to
325:55 - change however in this case Zod provides
325:58 - bunch of methods now again I'm not going
326:00 - to go through each and every method in
326:02 - this case we simply want to check
326:04 - whether this is going to be a string and
326:05 - this is super easy I can go with ID and
326:08 - then Z Dot and then string so this
326:12 - method essentially is going to check is
326:14 - it a string or not and if it's not a
326:16 - string if it's not present then
326:19 - basically it's going to yell so now
326:21 - let's copy and paste and we simply want
326:23 - to provide different values so we're
326:26 - looking here for name then we want to
326:29 - get the
326:30 - info we also want to set up an
326:35 - image over here so
326:41 - image um lastly we also have the price
326:46 - so all of them are strings but the comms
326:49 - are missing over here that's why I have
326:51 - the errors so let me set this one up and
326:54 - then as far as the tour we can actually
326:57 - infer the type so I'm not going to leave
327:00 - this for your reference since you have
327:02 - access to it in a read me but
327:04 - essentially I can go with type door and
327:08 - instead of hard coding Zar has this
327:11 - method of infer and it is actually a
327:15 - generic and we should be familiar with
327:17 - this one so notice the syntax
327:19 - effectively we just go over here with
327:21 - these angle brackets and then inside of
327:23 - the angle brackets as far as the type we
327:26 - go type off and then tour schema so now
327:30 - we infer this T type and notice pretty
327:33 - much the result is the same but now
327:35 - we're nicely getting this from Tor
327:37 - schema and like I said you have more
327:40 - options for
327:42 - example ID has to be a string but I can
327:45 - also add min max and all kinds of
327:47 - methods again this is just scratching
327:49 - the surface and notice how we don't need
327:52 - to change anything here in return we're
327:54 - also here in a data but we do want to
327:58 - right now add some checks at runtime and
328:01 - in order to do that I'm going to rename
328:04 - this to Raw data so this this is not
328:09 - something we're going to be
328:10 - passing and instead we want to go with
328:14 - const result is equal to then we go with
328:18 - our schema it has an awesome method of
328:22 - array which we can invoke we're not
328:25 - going to pass anything in and we also
328:27 - have this safe pars so essentially safe
328:30 - pars is not going to trigger
328:32 - automatically the catch block we'll do
328:34 - it ourselves so we're going to go save
328:37 - Parts with we pass in our raw data so
328:40 - now we're going to check this at runtime
328:42 - actually not only at build time and then
328:46 - since we have a safe part since this is
328:49 - not going to trigger immediate error we
328:52 - want to check for the success property
328:55 - in the result so if essentially we don't
328:59 - have the success property over there
329:01 - then we'll go throw new
329:05 - error and let's again and come up with
329:08 - some message let's go with invalid data
329:12 - for example let's access the result Dot
329:17 - and we're looking for the error so if
329:21 - we're not able to parse then we'll throw
329:23 - the error manually and now where we have
329:26 - the return instead of data which we
329:29 - don't have anymore we're going to go
329:31 - with result. data so that's where our
329:34 - data is going to be located and again if
329:36 - we're successful this doesn't change
329:38 - still getting back that array but
329:40 - difference will actually check
329:43 - everything at runtime so now let me
329:45 - navigate to the browser I don't believe
329:48 - I'm doing anything so you know what let
329:50 - me just log the results just so you can
329:52 - see what we're getting back let's go
329:54 - with the result notice we're successful
329:57 - so success is true so we bypass that
329:59 - error one and then we get back the data
330:02 - over here so now I can navigate to my
330:04 - map one and again I have access to the
330:08 - door so let's log something let's go
330:10 - with door Dot and again let's access the
330:14 - name so this works now here's the
330:17 - biggest difference if I'm going to go
330:18 - over here and let's say add a property
330:22 - which I'm expecting but it's not there
330:24 - will actually get the error so if I'm
330:27 - going to go with something and set it
330:29 - equal to whatever number it doesn't
330:32 - really matter if I go over here notice
330:35 - how immediately this is going to trigger
330:38 - the error so success is equal to
330:41 - false and now I have this error message
330:45 - in the console and again the cool thing
330:48 - is that we're checking this at runtime
330:50 - not just at build time okay and I think
330:53 - at this point we're ready to talk about
330:56 - typescript declaration files and why
330:59 - they're so important and let's start
331:02 - with a small recap if I were to go to
331:07 - tutorial
331:08 - and you know what no let me create a
331:10 - file first so I want to create types DS
331:15 - on here I'll write away export and I'm
331:18 - going to go with export type and
331:22 - random and here let's just go with name
331:25 - and string if I were to import this so
331:30 - import I mean with the type keyword or
331:34 - without everything is going to work
331:36 - correct pick because typescript knows
331:39 - everything about this type random so I
331:41 - can start right away using it in our
331:44 - project so far so good but can you
331:47 - explain to me this how come I right away
331:50 - have access to the document object so if
331:54 - I type over here press dot have access
331:57 - to all of the methods and all of the
331:59 - properties and of course I'm not going
332:00 - to double check that so I'm not going to
332:04 - prove that it's definitely a document
332:05 - object but trust me the same one and
332:10 - again good luck trying to build
332:11 - something without this document object
332:13 - so how come we have access to it because
332:16 - I can guarantee you that I didn't set it
332:18 - up anywhere it's not like I went to the
332:21 - types and then started constructing the
332:24 - document type I mean that would be just
332:27 - a work for I'm not sure half a year so
332:31 - what's happening over here well you see
332:34 - when we work with typescript there's
332:37 - something called declaration files and
332:40 - the same is going to work for libraries
332:42 - something we're going to cover in a
332:43 - second but when it comes to typescript
332:47 - they get included and then
332:51 - essentially as we're working with
332:52 - typescript it already knows everything
332:56 - about the document so if we go here to a
332:59 - type definition there is a definition
333:02 - for this document like I said it's going
333:04 - to be
333:06 - giant but good luck
333:08 - working without the document so in
333:11 - here there's an info about every
333:14 - property every method what it's doing
333:16 - what um parameters the function is
333:19 - expecting and that sort of thing so in
333:23 - here technically there is no
333:25 - functionality that's going to be running
333:26 - in this file but there's going to be
333:28 - type
333:29 - definitions since when we work with
333:32 - typescript typescript needs to know
333:34 - everything about the shape of our data
333:39 - otherwise as you saw with the straight
333:41 - up JavaScript file it's just going to
333:44 - complain so I guess first I'll show you
333:47 - where
333:48 - the Declaration files are located and
333:51 - then I'll show you how we can add them
333:53 - or remove them from the project now as a
333:56 - side note since we're using the
333:58 - boilerplate V
334:00 - application it's already done for us but
334:03 - yes if you're starting everything from
334:05 - scratch you can add those things
334:07 - manually ually Stars if we navigate to a
334:10 - node modules and typescript which is a
334:12 - package we're using under the lib notice
334:16 - this long list well these are
334:18 - declaration files again once you
334:20 - navigate over here let me just find
334:23 - something uh maybe this one over here
334:25 - right notice you have these type
334:28 - definitions it's not like in here you
334:30 - have some kind of function that's
334:31 - running no but you have clear
334:34 - description of type definitions so so
334:37 - again if you want to start using
334:39 - something from the
334:42 - Dom you can only do it if there's a type
334:46 - definition for that something in one of
334:48 - the files again you'll see in a second
334:52 - if let's say we don't have access to
334:53 - these files typescript is not going to
334:56 - know what is a document or any other web
335:00 - apis and the way we control that let me
335:02 - just close the node modules again it's
335:05 - already set up for us but you can do it
335:09 - over here in this lib notice this Dum
335:13 - essentially in the lib you specify the
335:16 - set of bundle Library declaration files
335:19 - that
335:20 - describe the target runtime environment
335:24 - and notice over here this D well if we
335:27 - remove it notice something interesting
335:30 - immediately typescript is going to
335:32 - complain immediately typescript is going
335:34 - to say Hey listen what document I don't
335:36 - know what you're talking about
335:38 - so essentially we can either set it up
335:40 - ourselves or we need to have those type
335:44 - definitions without those type
335:45 - definitions we won't be able to
335:48 - essentially successfully build our
335:50 - project so let me just close this one
335:54 - and navigate back to TS config let me
335:57 - add the Dom since I do want to use it
336:00 - since we're building for the web and
336:03 - this leads me to the second Point yes
336:06 - the same works with any Library you want
336:09 - to use in our project remember how in
336:12 - previous
336:14 - video we were able to import Zod from
336:19 - the Zod library and we were good to go
336:22 - so notice how again typescript is not
336:24 - complaining and in fact typescript knows
336:27 - everything that there is to know about
336:29 - the import it knows the types it
336:31 - contains it knows the methods properties
336:33 - and all that how well let's check it out
336:38 - again we're navigating to node modules I
336:40 - want to close this one we are looking
336:43 - for a Zod in this case and under the lib
336:47 - guess what again we have the type
336:51 - declaration files and in there we have
336:54 - type definition and therefore once we
336:57 - start using the
336:59 - library typescript has no issues it
337:02 - right away knows what the method is
337:05 - expecting what is the interface and all
337:07 - that that which leads me to another
337:09 - Point yes if you're going to install
337:12 - Library which doesn't have the
337:14 - Declaration files basically there are no
337:16 - type definitions you won't be able to
337:19 - use it now the good news that there is a
337:21 - repo which essentially
337:24 - contains the types for a bunch of
337:27 - libraries but first let me show you what
337:29 - happens if we install such Library uh
337:32 - what is the result and again this is
337:34 - just random example I'm going to use
337:36 - bcrypt j s which is a password hashing
337:39 - library and technically this is optional
337:42 - I mean you don't have to follow along I
337:44 - just want to showcase something so let
337:46 - me go to a separate terminal window let
337:50 - me install it okay I installed the
337:54 - package clearly see that it's in my
337:56 - dependencies okay good let me remove all
338:00 - of this I'm going to go with import
338:04 - bcrypt Js from and definitely have the
338:08 - library but check it out so essentially
338:12 - typescript is complaining there is no
338:14 - declaration file so same issue like we
338:18 - had with the straightup Javascript file
338:21 - and like I mentioned before the solution
338:23 - is following there is a repo which
338:26 - contains bunch of types and I left the
338:29 - link in read me so let me try to
338:31 - navigate over here and in this repo
338:34 - under the types you'll be able to most
338:37 - likely find the library you just
338:40 - installed because it contains like What
338:43 - 7,802 entries so essentially you have
338:48 - typescript types for all of these
338:51 - libraries and the one that we're looking
338:53 - for in this case is bcrypt JS otherwise
338:56 - we cannot use it in a project and the
338:59 - way we install the types is following so
339:01 - we go with npm install we're going to go
339:03 - with save dev then at type
339:08 - and then bcrypt JS so our specific
339:12 - Library let me grab this line of
339:15 - code and the moment we do that
339:18 - typescript is going to know everything
339:21 - that there is to know about this bpjs so
339:24 - if I'm going to go over here type dot
339:26 - notice I have access to all of the
339:30 - methods the import provides hopefully
339:34 - it's clear why typescript declaration
339:36 - files are so important when we're
339:39 - building the typescript project and with
339:41 - this in place we can move on to the next
339:43 - topic okay and up next let's cover
339:47 - typescript config file where as the name
339:50 - already suggests we can configure our
339:54 - typescript setup now if I'm being
339:56 - totally honest I actually find this
339:58 - topic super boring and therefore I'm
340:01 - planning to cover only the properties
340:03 - which in my opinion are the most
340:05 - important ones but if you are interested
340:08 - in specific property or maybe you feel
340:12 - like a rebel and you want to explore all
340:15 - of them feel free to utilize this link
340:18 - in the read me so this is the link that
340:20 - you're looking for as you can see it
340:22 - guides us back to
340:24 - documentation and you can start
340:26 - scrolling and you'll see that this is a
340:28 - giant file where pretty much you can
340:31 - find everything that there is to know
340:33 - about the DS config again big picture
340:37 - this is where we control our typescript
340:40 - configuration I just want to mention
340:42 - that we have this include and in here we
340:46 - point to where the typescript files are
340:48 - going to be located so in our case where
340:51 - it is well it's in the source this is
340:53 - where we're setting up our project then
340:55 - we have compiler options and let's start
340:58 - with the target one over here and with
341:01 - this one essentially we control the
341:04 - output code so navigate to a typescript
341:09 - playground notice I have this export con
341:12 - and then the arrow function now if my
341:15 - target is a JavaScript language version
341:20 - which has the arrow function already
341:22 - then as you can see the output code is
341:24 - going to be pretty much the same but if
341:28 - let's say I change this to
341:30 - ES3 notice how it didn't have the arrow
341:33 - function therefore we get good old
341:36 - regular function so this is what we
341:38 - control over here in the Target now as
341:41 - far as the module
341:42 - remember with this one we're controlling
341:45 - what kind of module syntax again we're
341:47 - going to get back in the output code in
341:50 - the lib this is where we were
341:53 - controlling the Declaration files that
341:55 - we're getting and pretty much after that
342:00 - the one that we're interested is the
342:01 - strict one so this is this flag which
342:04 - controls how bunch of the errors and the
342:08 - warnings are treated so if we're going
342:10 - to go with false then bunch of the
342:12 - things that technically should fail are
342:14 - not going to and we'll be able to build
342:16 - the project now if we set this one to
342:18 - true then we have the strict type
342:22 - checking set to true and then for
342:24 - example we have this no unused locals so
342:28 - if I were to go to tutorial and come up
342:31 - with let something is equal to something
342:35 - notice how I get this warning that
342:38 - something is declared but I'm not using
342:42 - it well if we go here and set it equal
342:47 - to pulse or just remove it then
342:50 - essentially we'll have no warning
342:53 - message anymore again just a example of
342:56 - one of the properties that we can use
342:59 - this concludes the TS config and with
343:02 - this in place we can move on to the next
343:04 - topic and up next let's quickly cover
343:07 - class syntax in typescript now if you
343:10 - don't use classes in your project feel
343:13 - free to skip this section Al together
343:16 - since most likely you'll see very little
343:19 - benefit and first let's start with a
343:21 - recap that classes in JavaScript serve
343:24 - as blueprints for creating object and
343:27 - they also have this special method
343:29 - called
343:30 - Constructor which is automatically
343:32 - called when we create a new class
343:35 - instance with the new keyword
343:37 - and this keyword inside of the
343:39 - Constructor refers to the object being
343:43 - created so in this case I have a class
343:47 - notice we need to use the keyword class
343:50 - then the name is book now the convention
343:53 - is to go with uppercase but technically
343:55 - you don't have to and it has a
343:58 - Constructor it's a typical method
344:00 - basically we can pass here pams and in
344:03 - this case I have title and the author so
344:06 - every time I'm going to go new book and
344:08 - pass in the values they will be set
344:11 - inside of this object inside of this
344:14 - class instance and in order to set those
344:16 - properties I need to go with this dot
344:19 - then the name of the property in this
344:21 - case title and I just set it equal to a
344:24 - value just being passed in so in this
344:26 - case it's deep work and then the author
344:28 - name now since we're working typescript
344:31 - notice how we have few red Squigly lines
344:35 - how do we fix them for STS we we need to
344:37 - set up the annotations over here in the
344:39 - Constructor so what is going to be the
344:41 - type of the title and author and here
344:46 - let's just go with string and string and
344:49 - of course we can use the Boolean we can
344:51 - use the number pretty much everything
344:53 - that we have learned up to this point
344:56 - but here's the kicker I still have the
344:58 - red squigglies inside of the Constructor
345:02 - and you would think okay we can go over
345:04 - here and say that this is going to be a
345:05 - string and number or Boolean but when it
345:10 - comes to classes and typescript we
345:13 - actually need to go inside of the class
345:15 - and explicitly set the type for the
345:19 - properties we are setting inside of the
345:22 - Constructor so in this case since I have
345:24 - two of them I have title and author yes
345:27 - I need to go above my Constructor and
345:30 - essentially set this one equal to a
345:32 - string and the same is going to go for
345:35 - author so I set both of them up and then
345:38 - notice now I don't have the red
345:40 - squigglies
345:41 - and I'm able to create those instances
345:45 - again result is going to be exactly the
345:47 - same I will still have my instance in
345:51 - this case de work with the title and
345:53 - author properties the difference now
345:57 - typescript is happy as well so I'll be
345:59 - able to build my project just like a
346:02 - normal JavaScript we can also set
346:05 - instance properties or they're also
346:07 - referred to as default properties and
346:11 - essentially the idea is that we set this
346:14 - property inside of the class instead of
346:16 - the Constructor and then they get
346:19 - automatically added to all the instances
346:22 - we create now how's that going to look
346:25 - like well imagine we have this checked
346:28 - out property and it's a bullan and
346:32 - initially it's always going to be false
346:34 - so yes definitely we can go here with
346:36 - this Dot
346:38 - checked out and again notice we're not
346:41 - passing anything in a Constructor it's
346:43 - going to be set by default and I'm going
346:46 - to go with false so now I can navigate
346:48 - over here and say checked out and set it
346:53 - equal
346:54 - to Boolean correct so this is going to
346:58 - work but since I'm not passing this as a
347:01 - parameter we might as well set this one
347:03 - up as a default property so I can just
347:06 - move this line of code and where I have
347:10 - the checked
347:11 - out yes I can still keep it as Boolean
347:14 - and set it equal to false but we can
347:16 - also rely on the fact that typescript is
347:18 - going to infer this value so this is up
347:21 - to you you can go like this or you can
347:25 - set up the checked
347:28 - out like
347:30 - so equal to false for example or true
347:33 - and then typescript will immediately
347:35 - infer type now again just like other
347:38 - times when typescript infers the type
347:41 - just be mindful of potential pitfalls
347:45 - you might face and if let's say we're
347:47 - going to go with deep work and checked
347:51 - out we should see the value in the
347:54 - console so at the moment it's false and
347:56 - let's say if we decide to set it equal
348:00 - to true that's also an option so let's
348:02 - go with deep work checked out and let's
348:05 - set it equal to true now since it's a
348:07 - Boolean we can definitely do so now it's
348:09 - equal to true but if I'm going to change
348:12 - it to hello world of course this is not
348:16 - going to work typescript is going to
348:18 - complain because it is a bullion so this
348:21 - is how we can set up default properties
348:25 - in classes in typescript when we work
348:28 - with classes in typescript we also have
348:30 - this read only
348:33 - modifier which does exactly what the
348:36 - name suggest
348:37 - essentially if we add this read only
348:39 - modifier to any of the properties we
348:43 - won't be able to modify them for example
348:45 - if I'm going to go to my title add read
348:48 - only yes I can still read the value for
348:51 - example I can go with deep work and
348:53 - title and for some reason I keep
348:56 - forgetting to set up my
348:59 - logs so we can still nicely access the
349:03 - value problem is going to be if we try
349:06 - to change it so if we go here with deep
349:10 - work. title and set it equal to
349:14 - something else so this is not going to
349:16 - fly because now we have this read only
349:19 - modifier added to the title property
349:22 - also in typescript we have private and
349:24 - public
349:25 - modifiers which control whether we can
349:28 - access the property or the method from
349:31 - the outside now as a side note by
349:34 - default everything is public therefore
349:37 - if we go with deep work and type do
349:39 - notice we have access to author checked
349:42 - out and title but if I'm going to
349:45 - navigate over here and let's say
349:49 - set checked out to private notice how
349:52 - still will go deep work and now I only
349:54 - have access to author and title so yes
349:58 - of course I can go over here and say
350:00 - public just keep in mind that's the
350:02 - default Behavior let me just set it up
350:05 - so I'm going to go with with public over
350:07 - here and also as a side not you can
350:10 - combine them so notice in this case I
350:13 - have already read only four the title
350:16 - but I can also say that this is going to
350:18 - be a public one now typically the way we
350:22 - control some private property is by
350:26 - setting up some kind of method which we
350:27 - can call from the outside just to
350:30 - Showcase that let me go with the
350:34 - method and I'm going to call this check
350:37 - out
350:39 - then let's set up the functionality
350:42 - where I'm going to go with this dot
350:44 - checked out and I'm going to set it
350:45 - equal to true so as you can see I'm
350:48 - still able to access the property from
350:52 - within the class but like we just saw we
350:55 - were not able to see the checked out
350:58 - value from outside so in this case I can
351:01 - go with deep work then let me call the
351:05 - method check out out and now if we'll
351:08 - take a look at the Deep work again in a
351:10 - console the checked out should be set
351:13 - equal to True correct so let's navigate
351:16 - back over here and notice of course the
351:18 - value right now is true so this is
351:21 - typically how we would access the value
351:23 - we set this equal to private so we
351:25 - cannot access it from the outside but
351:27 - then we set up a method which actually
351:29 - controls this value and just to hammer
351:32 - home that we can mix and match I'll set
351:36 - up few more methods one is going to be
351:39 - is checked out where we're just going to
351:42 - check the value and then I'm going to
351:43 - set up the private method so again this
351:47 - is a bit of Overkill but I'm just going
351:49 - to add this public one over here as you
351:51 - can see that's the default Behavior
351:54 - everything is public then we're going to
351:56 - go with another one where we're just
351:59 - going
352:00 - to check what is the value so we don't
352:04 - need to take a look at the console so in
352:06 - here I simply want to return this Dot
352:09 - and checked
352:11 - out and then also I want to set up the
352:14 - private one where we're going to toggle
352:17 - so this will be a private method toggle
352:22 - and let's come up with the name status
352:26 - that sounds like a good one hopefully I
352:28 - have no spelling errors and from this
352:31 - function I simply want to return the
352:34 - opposite value so I'm going to go with
352:36 - this Dot and we're looking for checked
352:39 - out now since this is a private one
352:41 - again I'm not going to be able to call
352:43 - it here where I have my instance instead
352:46 - where I have the checkout one I'll just
352:48 - set it equal to this dot so now I'm
352:51 - accessing the private method and I'm
352:54 - invoking the toggle checked out status
352:58 - like so and now let's just navigate over
353:01 - here I guess let's clean up our code a
353:05 - little bit and and let's just invoke few
353:07 - functions so for STS let me go with deep
353:10 - work we have checkout that's the one
353:14 - that we want to invoke and after that
353:17 - we're going to go with log and again
353:19 - we're looking for our instance and now
353:22 - we want to check the actual status and
353:25 - notice over here this is set equal to
353:28 - true so by default it was set to false
353:31 - then I ran the checkout method which
353:35 - essentially just toggles the value and
353:38 - then I logged in a console that it's
353:42 - equal to true now let me try this one
353:44 - out let me run it two times and now this
353:47 - should be set equal to false because
353:49 - we're just toggling back and forth so
353:52 - this is how we can use public private
353:55 - and read only
353:56 - modifiers in classes when we work with
353:59 - typescript and up next let's see an
354:02 - awesome shortcut we can use which is
354:05 - going to say was quite a few lines of
354:07 - code now for starters I do want to clean
354:09 - this up since I want to discuss Getters
354:12 - and
354:13 - Setters in the upcoming videos and I
354:16 - think it's going to be too much logic
354:19 - inside of one class and also let me
354:22 - remove the first two properties as well
354:25 - as all of this code over here in the
354:28 - Constructor so the shortcut is following
354:31 - at the moment notice if I go with my
354:33 - deep work and type dot I don't see
354:35 - anything correct since we didn't set the
354:38 - properties correctly but what we can
354:41 - also do is add readon public or private
354:48 - modifier in front of the parameters and
354:52 - if we do that it will be automatically
354:55 - set as a property with the value inside
354:59 - of the instance so let me show you what
355:00 - I'm talking about we go here with read
355:03 - only and yes even though
355:07 - it might seem redundant since by default
355:09 - technically this is public if we go here
355:13 - and set up the public this will be set
355:16 - in my instance now we're not going to
355:18 - use this value but just to Showcase that
355:20 - same is going to work with private I'm
355:23 - simply going to go over here and say
355:26 - some value and let me set it equal to a
355:30 - number so now if I go to my deep work
355:33 - right now and type that notice I
355:36 - immediately have access to author and
355:39 - the title so this is the shortcut we
355:41 - don't need to use this anymore over here
355:43 - we don't need to explicitly set these
355:47 - properties in a class we simply can use
355:50 - either read only or public or private
355:54 - and effectively immediately tcri behind
355:58 - the scenes is going to set those
355:59 - properties with the appropriate values
356:02 - when we create the instance now since
356:06 - you might not believe me about the Su
356:08 - value let's come up with some random
356:13 - function let's just explicitly say that
356:16 - this is going to be public and I'm going
356:18 - to call this get some value okay and
356:23 - then we'll return this Dot and some
356:27 - value so notice inside of the class I do
356:30 - have access to it so let me call get
356:33 - some value and we do want to place it in
356:35 - a con log I guess so get some value
356:39 - let's invoke this let's set up our log
356:43 - let's move this inside and the moment it
356:46 - says
356:47 - undefined because I did not provide the
356:49 - value okay so notice of course it's
356:51 - missing so I have some value and since
356:55 - I'm looking for a number I'm going to go
356:57 - with
356:59 - 45 so once we log right now everything
357:02 - is correct so again this is an awesome
357:05 - shortcut we can use
357:07 - in the Constructor we can add one of the
357:10 - modifiers and this will automatically
357:14 - set those properties in our instance and
357:17 - up next let's work on the example with
357:19 - Getters and Setters which are special
357:22 - methods that are access like properties
357:26 - more specifically let's take a look how
357:28 - we can combine them with the private and
357:31 - public
357:32 - modifiers which we covered in the
357:35 - previous video
357:37 - so one cool thing that we can do with
357:40 - the getter is to set up a computed
357:42 - property so essentially I can create the
357:45 - property on a fly now in order to create
357:48 - the getter or the setter we want to go
357:51 - with get or set eord then we want to
357:54 - come up with a name so this essentially
357:57 - will be a property on this deep work and
358:01 - in here I just want to compute some
358:04 - value so in this case case I'm going to
358:07 - go with the template string first I'll
358:09 - access the title and I'll combine it
358:13 - with the author this dot author let's
358:17 - save it and now we want to go with our
358:20 - deep work and notice we have essentially
358:22 - this info property now since we're
358:25 - returning the value I keep forgetting
358:27 - that we want to place this inside of the
358:30 - log and in console now we have title
358:33 - followed by the author again what's
358:36 - super cool is that we can create this on
358:39 - a fly so I can just come up with the
358:42 - property then do my computation and I
358:45 - didn't need to set anything in the
358:47 - Constructor or above the Constructor and
358:50 - the same way we can set up the
358:53 - setter the keyword we're looking for is
358:56 - set and in this case again I'm going to
358:58 - control that checked out property first
359:01 - let me start with a set name now just
359:05 - like
359:06 - good old
359:08 - method we can provide over here
359:10 - parameters and in this case I'm going to
359:13 - call my parameter checked out now we do
359:16 - need to provide a type and then inside
359:18 - of the setter we're going to go with
359:21 - checked out and we'll set it equal to
359:25 - our parameter value and then let's
359:28 - navigate to the console log and right
359:31 - after that let's invoke our Setter so
359:33 - we're going to go with our instance then
359:36 - and set our name and in this case again
359:39 - this is the property so we set the value
359:41 - now if I'll try to go with hello and
359:44 - notice how typescript immediately
359:46 - complains so let me go back and yep I
359:49 - want to go true and now I don't see
359:52 - anything in a console since I'm not
359:53 - logging let me try one more time where
359:57 - I'm going to go deep work and if
359:58 - everything's correct the checked out
360:02 - should be equal to true and we can use
360:06 - the private and public as you can see
360:09 - again by default everything is already
360:11 - public but let me just showcase if we go
360:15 - here with private now we can only invoke
360:19 - this inside of the class so this is not
360:21 - going to work let me comment this one
360:23 - out and let me set up two more
360:29 - Getters one is going to be for the
360:32 - checked out value and in the second one
360:35 - will actually we use the check out
360:39 - method a lot of checkouts so let's go
360:42 - over here with get now as you can see
360:44 - the name can be exactly the same because
360:47 - one is a Setter and other one is a
360:49 - getter by default it's going to be
360:52 - public and then from this one we want to
360:56 - return checked
360:58 - out and now Just for kicks let's set up
361:01 - a getter but inside of it let's invoke
361:04 - the setter just to make it more
361:06 - confusing so let's go here with public
361:09 - even though again technically it doesn't
361:11 - change anything in this case I'm going
361:13 - to go with some info we're not going to
361:15 - pass anything in and in order to access
361:20 - our Setter our private one we want to go
361:22 - with this. checkout set it equal to true
361:26 - and then after that we want to return
361:29 - and since I want to return the same
361:32 - value you know what let me copy from the
361:35 - info and and let me just
361:37 - overwrite in here so now let's navigate
361:41 - to a console first we want to go with
361:45 - log I guess we're going to go with deep
361:48 - work then some info so this is going to
361:52 - set our checkout equal to true and also
361:55 - return this value and also
361:58 - let's copy and paste and set up one more
362:02 - and in this case I'm looking for my
362:05 - getter the checkout one and once I
362:07 - navigate to a console as you can see at
362:10 - this point it's false then I get back
362:13 - the
362:14 - same info the title followed by the
362:18 - author and at the very end we can see
362:20 - the checked out value which is now equal
362:23 - to true and that's how we can use
362:26 - Getters and Setters with public and
362:28 - private modifiers and up next let me
362:31 - showcase how we can implement the
362:34 - interface by the class and if you
362:38 - remember the video types versus
362:41 - interfaces it was one of the things
362:44 - which we could do with the interface but
362:46 - we cannot do with the type so let's
362:48 - imagine we have the interface and the
362:51 - name is I person which essentially
362:54 - stands for interface person because
362:57 - there will be a class of person let's
363:00 - come up with some random properties so
363:02 - we're looking for string then also we
363:04 - want to set up the age number and you
363:08 - know what let's go with greet method and
363:12 - it's not going to return anything and
363:14 - it's also not going to take any
363:16 - parameters then we're going to go with
363:20 - class let's come up with the name in my
363:22 - case person and we go with this
363:26 - Implement which essentially is promising
363:30 - that it will provide all of the
363:33 - properties and methods defined in in the
363:36 - interface so in this case we're looking
363:39 - for I person that's the interface I want
363:41 - to use and in here let's go with the
363:44 - shortcut which we covered before so I
363:47 - can go with public now what is the name
363:50 - it's a string correct so let's set up
363:54 - and also we want to go here with public
363:56 - age now this will be a number we're not
363:59 - going to set up anything in the
364:01 - Constructor well we don't have to we
364:03 - still have a red squiggly line because
364:06 - there is no method so right after
364:09 - Constructor let's go with greet it's our
364:12 - function and let's just log some stuff
364:15 - over here in this case I'm will go with
364:19 - hello my
364:21 - name is Slim
364:24 - Shady and this is name and also I
364:29 - am this. age let me access this. Ag and
364:35 - we're going to go with
364:37 - years old now we do want to set up our
364:41 - instance so let's go with
364:44 - con and hipster we're looking for a new
364:48 - person let's provide a name Shake and
364:52 - Bake and as far as the years well let's
364:55 - go with 100 and then at the very end
364:58 - let's invoke
364:59 - hipster GRE and if everything is correct
365:03 - we should see the text in the com so so
365:06 - that's how we
365:07 - can implement the interface with the
365:12 - class again something we canot do with
365:14 - the good old type Alias okay and once
365:18 - we're done with tutorial let's put our
365:21 - typescript knowledge to a good use and
365:24 - create a small tasks application as far
365:27 - as the setup for this project I'm going
365:30 - to set my code editor and browser side
365:34 - by side but you you don't have to it's
365:36 - just my preference since that way I
365:38 - don't have to switch screens like
365:41 - gazillion times also I will set up a new
365:45 - page in my case I'm going to call this
365:48 - tasks
365:49 - HTML keep in mind technically you can
365:52 - build everything in index HTML I just
365:55 - think that it's going to be easier if we
365:58 - separate the tutorial from the project
366:02 - so here's what we want to do navigate to
366:04 - the route again please don't set this
366:06 - one up in the source we want to create a
366:09 - new file and I'm going to call this
366:11 - tasks HTML now I will create a basic
366:16 - HTML structure and in the vs code
366:19 - essentially we just do that by getting
366:22 - the exclamation point I believe I mean I
366:25 - haven't created the straight up HTML
366:28 - project in so long that I already forgot
366:31 - so yeah basically we want to click shift
366:33 - and back tick and notice we get the this
366:36 - suggestion from EMT that you can create
366:39 - a HTML structure now in my case I'm
366:42 - going to call this tasks app or tasks
366:45 - then also there's going to be a link for
366:49 - CSS so that is coming up and in here for
366:52 - now let's just say tasks app let's save
366:57 - it now this is totally up to you you can
366:59 - navigate in the browser and just stay
367:02 - there or we can actually go to to main
367:06 - DS and notice we have both of these
367:10 - logos well at the moment these links
367:12 - navigate somewhere externally basically
367:15 - back to typescript and vat and we can
367:18 - actually change this around where I'm
367:20 - going to go with forward slash
367:23 - and
367:25 - tasks and of course if you named your
367:27 - page differently please make sure that
367:30 - the H matches and I'll do the same for
367:33 - this one so now once I click on one of
367:36 - them I'm going to navigate to the tasks
367:38 - app now I'm not going to set up the link
367:40 - back I don't think there's any need for
367:43 - it for now I think we can close the main
367:46 - one but we will return to it and also
367:50 - let's create an Source tasks DS so this
367:54 - is going to be our typescript file where
367:56 - we'll set up the logic let's go with Ds
368:00 - now in this case we're not going to
368:01 - import that in the main DS we actually
368:04 - want to go there directly to
368:07 - tasks somewhere here the bottom of the
368:11 - body we want to go with
368:13 - script then we're going to add type
368:15 - module and now let's look for
368:19 - Source we're looking
368:21 - for tasks I believe yep that was the
368:25 - file and I always prefer to set up some
368:29 - log just so I don't run around like a
368:32 - headless chicken looking for a bug but
368:35 - maybe there's an UT wrong or something
368:38 - along those lines now for some reason
368:41 - yep everything is fine so I see over
368:43 - here the tasks so I know
368:45 - that my logic works then let's navigate
368:50 - uh back to tasks
368:53 - HTML and now above the script
368:58 - effectively we want to set up the
369:00 - structure for the application so I just
369:02 - want to add some HTML elements now this
369:05 - is totally up to you but I also provided
369:08 - some CSS just so it looks a bit more
369:13 - presentable now you have two options you
369:17 - can either get it from the final folder
369:19 - so navigate to the final
369:21 - repo look for typescript tutorial and
369:24 - then more specifically look for task CSS
369:27 - so I didn't want to add this code in the
369:30 - main CSS file so we're going to create a
369:32 - separate file for that task CSS and then
369:35 - just grab that code or you can nicely
369:40 - navigate to the end of the readme and
369:42 - just copy this code again there's a
369:44 - bunch of Base Styles so let's not worry
369:48 - about the CSS too much as far as the
369:51 - actual CSS for the project there's not
369:53 - that much code but I'm not going to go
369:57 - over it because this is definitely not a
369:59 - CSS course so just select everything
370:02 - inside of the back dick where you see
370:04 - the CSS
370:05 - then we want
370:07 - to go I guess let's set up in a source
370:10 - doesn't really matter we're going to go
370:12 - tasks CSS copy and paste and now where
370:17 - we have a tasks HTML we want to set up a
370:22 - link we're looking for the CSS one and
370:27 - basically it's in the same or it's not
370:30 - sorry it's not in the same folder we're
370:32 - actually looking for t
370:36 - CSS so once we add that I mean at the
370:39 - moment most likely we won't see anything
370:42 - but once we add our elements we should
370:45 - have a nice CSS as well and with this in
370:48 - place now let's set up the structure and
370:51 - I'm not sure whether I mentioned that
370:52 - technically the CSS part is optional so
370:56 - I mean it's not going to affect any of
370:58 - our logic our application is just going
371:00 - to look tiny bit more representable then
371:05 - we want to go with tasks of some kind of
371:07 - value as a sign note we might need to
371:10 - refresh yep now everything works now I
371:12 - can see my tasks over here then let's
371:15 - create a form now we won't have the
371:18 - action but I do want to add the class
371:21 - and even if you're not using my CSS
371:24 - please make sure that you use the same
371:26 - classes or if you use a different class
371:28 - make sure that you remember that when we
371:30 - are setting up the
371:32 - logic then let's go with input inside of
371:35 - it the type is going to be text then we
371:38 - want to go with another class and we're
371:40 - going to go with form input save this
371:44 - okay this is what we should see then
371:46 - also let's add a
371:48 - button type will be equal to submit okay
371:53 - beautiful let's add a class name
371:55 - BTN let's call this add task okay again
372:00 - I'll have to refresh and then right
372:03 - after the form we have anord list class
372:08 - let's go with list we're not going to
372:10 - place any items so we will place the
372:13 - items dynamically with the help of
372:15 - JavaScript and then at the very end
372:17 - let's just add a test button because
372:21 - there's something we need to discuss
372:22 - first so technically this is not going
372:25 - to be part of the project but it's super
372:27 - important we cover two things and
372:31 - therefore we're going to go here with
372:32 - the
372:33 - button so we're creating the good old
372:37 - button let's add a class of test BTN and
372:41 - let's just right click me let me save
372:45 - Let me refresh and this is what we
372:48 - should see in the browser and if you
372:51 - have the same result now we can move on
372:53 - to the next step okay and before we
372:56 - start typing away let's address these
372:58 - two important points first when we use
373:02 - Query selector we actually get back the
373:05 - element which is the most General Base
373:08 - Class that only has the methods and
373:10 - properties common to all kinds of
373:12 - elements so that's Point number one
373:16 - second there's also potential for null
373:19 - and we also need to address that and no
373:22 - we cannot build this project unless we
373:25 - cover both of these things extensively
373:27 - now once we do it should be a smooth
373:30 - sailing so first let me just showcase
373:33 - the two important points
373:36 - if we go with cons button we know we
373:39 - have access to a document correct
373:41 - because we have the Declaration files
373:43 - and document has this awesome method
373:46 - called query selector where we just pass
373:49 - the class in this case and we can select
373:52 - the element and everything is awesome
373:55 - but as I hover over the button notice it
373:59 - can either be an element so it's going
374:03 - to be an issue if I try to
374:06 - get some properties and methods that are
374:07 - only specific to buttons which is
374:09 - actually going to be our second point
374:12 - and also it can potentially be null now
374:16 - why do we care about that well let's say
374:19 - if I want to go with BTN and then Dot
374:23 - and event listener it's not going to
374:25 - work well technically it's going to work
374:27 - because typescript is going to fix my
374:30 - code but notice it's only going to work
374:33 - if we go here with this question Mark so
374:36 - this is one approach how we can fix this
374:38 - because as far as typescript is
374:40 - concerned there's no way to tell whether
374:43 - yes for sure we're getting back to
374:45 - button unfortunately again this is built
374:49 - time this is not
374:51 - runtime so typescript is like okay
374:53 - you're selecting the element from the
374:55 - dumb potentially well this can be wrong
374:59 - correct and in that case you're not
375:01 - getting back the element you're actually
375:02 - getting back null and we need to handle
375:06 - that also don't be surprised if in few
375:09 - cases and I sign not yes we'll cover
375:11 - that
375:12 - actually when we talk about the element
375:16 - point you might need to do more checking
375:19 - you might need to do something like this
375:21 - where you go with if button and only
375:24 - then run the code so this is one
375:26 - approach how we can handle the case
375:30 - where element is null and yes every time
375:35 - you'll want to do something with the
375:37 - element you'll essentially need to first
375:40 - check whether the element actually
375:44 - exists now another approach to deal with
375:48 - the null issue is by setting up the non
375:52 - null
375:54 - assertion operator so effectively in
375:57 - here I'm telling T script yo I know for
376:01 - sure that the element exists over here
376:05 - and in that case notice I can go here
376:07 - with BTN then Dot and then add event
376:10 - listener and I don't need to use anymore
376:13 - the optional chaining and the same is
376:16 - going to work if I'll try to run for
376:18 - example disabled on a button I won't
376:21 - have to check
376:22 - for the element whether it's actually
376:25 - present so in here I'm just telling T
376:27 - script listen I know a bit more about my
376:31 - project than you do and I know for sure
376:34 - that the element is there and actually
376:37 - if we take a look at the main TS I
376:40 - believe it was over here now don't worry
376:43 - about the code after essentially they're
376:45 - just dynamically inserting the elements
376:47 - and all that notice this one over here
376:50 - where they go with document query
376:52 - selector they grab the development
376:56 - they're looking for the ID over here and
377:00 - then they just tell typescript Hey
377:02 - listen we know that the element is going
377:04 - to be there now how do they know that
377:07 - well we take a look at the index
377:09 - HTML notice this ID it's app correct so
377:14 - you have two
377:16 - approaches you'll see both of them used
377:19 - extensively as far as your project it
377:22 - really depends if you like this approach
377:24 - where essentially you let typescript
377:27 - know just be mindful if the element is
377:31 - not going to be there then of course you
377:32 - will have runtime errors or or you can
377:35 - use the optional chaining and then here
377:37 - and there you might need to actually
377:40 - check whether the element is present so
377:43 - that's the first point that I wanted to
377:45 - address now the second one is following
377:49 - I use over here this nonn assertion
377:51 - operator okay everything is awesome but
377:54 - what if I want to run disabled method I
377:57 - know that the button has this particular
378:00 - method so let's say I go here with BTN
378:04 - Dot and then I'm trying to type but I
378:08 - can see that it's not present so
378:11 - something is off why I have such issue
378:14 - well remember we are getting back what
378:17 - we're getting back actually an element
378:19 - which is the most General base class
378:22 - from which all
378:24 - elements in a document inherit now this
378:28 - one the element has only the methods and
378:32 - properties common to all the elements so
378:35 - where I'm going with this well there's
378:38 - going to be instances where you select
378:40 - elements and you need a specific method
378:44 - or a property which is only on that
378:47 - element and this is the case the button
378:50 - I know it has disabled one and I know
378:52 - for sure that I definitely want to use
378:54 - it but I'm not able to because I'm
378:58 - actually getting back the element now
379:01 - let's take a look why is that a case
379:03 - let's go here to type Ty definition and
379:06 - notice the query
379:07 - selector so query selector surprise
379:10 - surprise is what a
379:13 - generic now it's looking for the type
379:17 - and notice how there is actually type
379:19 - constraint where it says yeah you can
379:21 - pass in the element but it needs to
379:25 - extend from the element so this is a
379:29 - more interesting case for type
379:31 - constraint instead of our string and
379:33 - number our still EX examples actually
379:36 - this limits the element to the element
379:40 - and not only that notice how it actually
379:43 - provides this one as a default and what
379:47 - does that return it actually Returns the
379:50 - element we passing over here or it
379:53 - returns null so all of the things we
379:56 - learn we can now nicely use when we
379:58 - inspect the documentation so now it's
380:01 - very easy for us to look at this
380:03 - documentation and be like okay so we do
380:06 - need to provide the element we want to
380:10 - select it needs to extend from the
380:13 - element and if we're successful we're
380:16 - actually going to H it back so now let's
380:19 - navigate back and in a query selector we
380:24 - want to set up the angle brackets and
380:26 - then we want to look for
380:28 - HTML button and element so that's the
380:31 - one that we want to pass in so now we're
380:34 - not getting back the element or null
380:39 - we're actually getting back our HTML
380:41 - button element so now if we start typing
380:44 - notice BTN disabled and we can nicely
380:49 - set it equal to true now before I show
380:52 - you the type assertion option which is
380:55 - another approach you'll see let me just
380:57 - remove this non null assertion operator
381:02 - and showcase that here and there you'll
381:05 - have to actually check for the button so
381:07 - remember our second option where every
381:10 - time we will use a method for example ad
381:14 - event listener we need to add the
381:18 - optional training which as a side note
381:20 - is already done by typescript in this
381:24 - case in this case in the case of
381:27 - disabled it's going to be a little bit
381:29 - different so if we'll try to do that
381:31 - typescript is actually going to complain
381:33 - it's going to say hey L and you canot do
381:35 - that so instead we'll have to check
381:38 - button and then we can set it equal to
381:42 - True again this just brings me back to
381:45 - the point that we have two options over
381:47 - here and we can also always add this
381:50 - exclamation point and as far as the
381:53 - second option if we don't want to pass
381:55 - here in the generic we can also use the
381:58 - type assertion so let me just go here
382:01 - with disabled and let's set it equal to
382:03 - True again
382:05 - and let me remove now once I do that
382:08 - typescript is going to complain and
382:11 - another approach that you'll see is this
382:13 - one where we select yes we're getting
382:17 - back the element but then we use that
382:18 - type assertion and we say yeah actually
382:22 - this is going to be HTML and then button
382:26 - element now I personally prefer the
382:30 - other approach and that's why throughout
382:31 - the course you'll see that one but
382:34 - definitely don't be surprised if you see
382:36 - something like this in the code base
382:39 - this is also an option we can take where
382:41 - we select the element and then we just
382:43 - use the type assertion and you have the
382:45 - example in the read me so I guess I can
382:48 - just remove pretty much everything over
382:50 - here because we'll start everything from
382:52 - the scratch and we'll start working with
382:55 - our form so you know what let me clean
382:57 - this up we also don't need that silly
383:01 - button over here since we covered two
383:04 - important points and now we're ready to
383:06 - move on to the next step okay so let's
383:09 - start working on our project and in this
383:13 - video I want to select three elements I
383:16 - want to select the form I want to select
383:18 - the form input as well as the list so
383:22 - form input is where we'll get the value
383:24 - We'll add the event listener on the form
383:27 - so every time we submit the form we will
383:30 - grab the input value and also we want to
383:33 - get the list since every time we'll
383:35 - provide here a task if the value is
383:40 - there then we'll basically add it to our
383:42 - list and also this is where typescript
383:46 - is going to come into play we'll need to
383:49 - set up our type so this is something
383:51 - interesting every time you work on a
383:52 - typescript project yeah pretty much one
383:54 - of the first things you'll want to do is
383:57 - to start at least setting up the shape
384:01 - of your data this is at Le at least in
384:04 - my opinion biggest differences between
384:06 - the regular project and a typescript one
384:08 - you'll always always have the types or
384:11 - interfaces somewhere because typescript
384:14 - needs to know about the shape of your
384:17 - data so let's start I guess
384:20 - by selecting all three of them I'm going
384:23 - to go with task form now I'm not going
384:25 - to use the nonnull assertion
384:28 - operator throughout the project I'm just
384:30 - going to use that optional chaining so
384:33 - we're going to go here with do docent
384:35 - then query selector I do want to set up
384:38 - the angle brackets and I'm just going to
384:40 - say that this will be a HTML form
384:44 - element or
384:46 - no then let's go with the class and
384:50 - we're looking for the form and I believe
384:53 - I forgot to mention you see there's no
384:56 - way for typescript to know that this
384:59 - definitely is a form that's why we need
385:01 - to provide over here this form element
385:04 - so it cannot magically go to the HTML
385:07 - and figure out that since we're using
385:09 - the form class then for sure we're
385:11 - selecting the element which is actually
385:13 - a form that's why we get back this
385:17 - generic element and that's why we need
385:19 - to use the generic to provide what is
385:23 - the element we're actually selecting
385:25 - hopefully that is clear const form input
385:28 - is going to be the next one we're going
385:30 - to go with document query
385:32 - selector then will provide the
385:36 - HTML input element so this is the
385:40 - element I'm looking for input element
385:43 - okay good and then the class is Dot and
385:47 - then
385:48 - form input
385:51 - now I think I can make this one so
385:55 - everything is in one line I'm pretty
385:57 - sure we can see everything that's
385:58 - happening I mean you know what no let me
386:02 - make it like this and then
386:04 - Also let's go with const task list
386:10 - element and this one will be equal to
386:12 - document then query
386:15 - selector let me add the angle brackets
386:18 - as far as the class we're looking for
386:22 - list and over here we want
386:26 - HTML ul and list element and my
386:30 - apologies I'm just going to be kind of
386:33 - randomly moving the this stuff over here
386:35 - don't worry we shouldn't have issues
386:37 - with the later code it's just these
386:41 - select lines then let's create the type
386:45 - and effectively we will have a task with
386:48 - description which is going to be a
386:50 - string and is completed which is going
386:53 - to be a bullan so let's set up this one
386:56 - type
386:58 - task then let's go with the description
387:03 - set it equal to to a string and yes as a
387:06 - sign not you can set this one up as
387:07 - interface as
387:09 - well it's just my preference to go with
387:12 - typ aliases and we're going to go with
387:14 - Boolean and
387:16 - then I'm going to set up an array of
387:20 - tasks so this is where we'll store the
387:23 - tasks and as a sign note eventually
387:26 - we'll grab these tasks from the local
387:28 - storage as well so think of this as the
387:32 - state for our applications so we're just
387:34 - going to go with tasks it's actually
387:36 - going to be equal to an array of
387:39 - tasks and for now it's just going to be
387:42 - empty array okay and now let's start
387:46 - setting up the functionality so we want
387:48 - to add event listener on a form we're
387:51 - going to be listening for submit events
387:55 - we do want to prevent the default so we
387:57 - want to handle everything with
387:59 - JavaScript and after that inside of the
388:02 - Callback function we want to grab the
388:05 - form input value if some value is
388:09 - provided will actually wipe everything
388:11 - clean and return and of course before
388:14 - that we'll have to do quite a bit of
388:16 - logic and if there is no value then
388:18 - we'll just set up the alert so let's set
388:23 - everything up we're looking for task
388:25 - form again we can rely on typescript or
388:28 - we can manually add this optional
388:30 - chaining operator ourselves then we're
388:33 - looking for ad event listener like I
388:36 - said we're looking for submit and again
388:38 - notice how helpful typescript is so
388:42 - right away provides all the possible
388:46 - events that we can use over here for now
388:50 - we will provide call back directly but
388:55 - in the following video I'll show you the
388:57 - Goa we need to be aware of remember we
388:59 - have access to the event now if we hover
389:03 - over we can see the that actually it has
389:05 - a type of submit event something
389:07 - important we need to keep in mind and
389:10 - then let's go with event we're looking
389:12 - for prevent default and we just invoke
389:15 - it so now we'll handle everything with
389:17 - JavaScript after that let's grab the
389:20 - form input and more specifically we're
389:22 - looking for the value property which
389:24 - again is on the form input I'm going to
389:28 - give it a name of task description let's
389:31 - set it equal to form input
389:34 - same deal we don't have this non null
389:38 - assertion operator so again we can just
389:42 - rely I guess on typescript or in this
389:44 - case it simply complains so we'll just
389:47 - need to add this optional chaining so
389:49 - now we're grabbing the form input value
389:51 - if we have something in there if the
389:54 - user has provided something then we'll
389:57 - do a list of things if not then go with
390:02 - alert and
390:04 - we'll just say please enter a task
390:07 - description again it's not going to be
390:10 - the most complex application ever let me
390:13 - refresh and notice if I don't provide
390:15 - anything essentially I just get this
390:18 - alert box now if we are successful again
390:21 - there's going to be a list of things
390:23 - that we will
390:24 - do but once we're done adding a task to
390:29 - the list once we're done rendering the
390:31 - tasks and updating the local
390:34 - storage at the very end regardless we
390:38 - want to set the form input value back to
390:40 - an empty string and we want to return
390:43 - since I only want to hit this alert if
390:47 - no value has been provided now also for
390:50 - time being you know what let's just log
390:51 - here let's just say task description so
390:55 - if I provide some random value check it
390:57 - out I have it here in the console if not
391:01 - again we have this alert box and what
391:03 - this in place now we can move on to the
391:05 - next task okay and before we set up the
391:08 - logic to add new task to our list let me
391:13 - showcase the event object gotcha and as
391:17 - I know this is something you'll also see
391:21 - in react section of the course so pretty
391:24 - much the main idea is going to be
391:26 - exactly the same and it is following you
391:29 - see if we provide over here call back
391:33 - function directly everything's awesome
391:35 - typescript knows that yeah it's actually
391:37 - a submit event but it's not going to be
391:40 - the case if we set up the reference so
391:44 - can go here with function create task as
391:47 - a say not I don't think I'm going to
391:49 - keep it so I'll just set it up and
391:53 - eventually remove it but this is totally
391:55 - up to you of course you can also keep
391:57 - this code if we're going to go over here
392:01 - and basically take all of this
392:05 - logic like so everything should work
392:09 - correct we have access to the event and
392:11 - now we can just replace it well let's
392:15 - see let's go with create task and check
392:17 - it out so typescript essentially saying
392:21 - that event right
392:22 - now has the type of any so this is the
392:26 - case where if we're setting up
392:30 - functions and providing them as
392:32 - references here when we're listening for
392:35 - events then yes we'll explicitly need to
392:39 - provide what is the type so in this case
392:42 - we're looking for submit event and once
392:44 - we do that again our logic is going to
392:46 - work I can provide some value over here
392:50 - and everything is awesome and the same
392:51 - is going to work with the empty value
392:55 - and yes the same you'll have to do in
392:58 - react now in there the code is going to
393:00 - be more complex but the idea is the same
393:03 - if you're listening for some kind of
393:05 - event and you set up the logic directly
393:08 - in a callback function yes event will
393:10 - have that correct type straight out of
393:13 - the box but if you're setting up a
393:16 - function which you're then using as a
393:18 - reference it's not going to be the case
393:22 - something important to remember okay and
393:25 - up next let's see how we can add task to
393:28 - our list now in this video we're not
393:31 - going to set up the logic to render any
393:34 - tasks on the screen that is coming up so
393:37 - most likely we'll do right after we are
393:39 - able to add task to our list and in here
393:44 - I want to First create function I'm
393:47 - going to call this add task and as far
393:49 - as the parameter it's going to be a task
393:52 - but this is where we set up the type so
393:55 - we definitely say that we need to
393:57 - provide the task and we're not going to
394:00 - return anything from this function and
394:03 - as far as logic we want to go with task
394:06 - I'm sorry tasks and then push and we
394:09 - want to add our task so whatever we
394:13 - provide over here then we want to
394:15 - navigate back to our if block and you
394:19 - know what let's add three comments we'll
394:21 - say add task to list then second one
394:24 - will be render tasks and then we also
394:28 - want to update the local storage so all
394:32 - of that is coming up for now inside of
394:35 - the if block I want to construct a task
394:39 - so if I have a text I want to go cons
394:42 - task is equal again to my type my task
394:46 - type and I want to set it equal to
394:50 - description this will be equal to task
394:52 - description so this will be my string
394:55 - and then as far as the completed one we
394:58 - will hard code so go with is completed
395:01 - and we'll always always set it equal to
395:03 - false so once we create task now we can
395:07 - invoke add task and pass in a task and
395:11 - since I have the correct type everything
395:14 - is good script is not complaining and we
395:16 - can actually log the tasks here so let's
395:20 - go here with tasks let's add something
395:23 - so let's say first task and check it out
395:27 - now I have my array with my first task
395:30 - if I go with second task it's not going
395:32 - to be surprised if we have two items in
395:35 - the array and with this in place now we
395:37 - can move on to the next step okay and up
395:41 - next let's render the task on the screen
395:45 - now we will call actually render task in
395:48 - two places so for now we'll only call it
395:52 - here in a task description block so if
395:55 - we're successful we'll just render it on
395:57 - a screen but also once we're able to
396:02 - grab the tasks from the Lo local
396:04 - storage will iterate over and render all
396:07 - the tasks on the screen so think of it
396:09 - this way not only we want to render the
396:12 - task once we add new one to the list but
396:15 - also when the user first navigates to
396:18 - the page or we refresh we want to grab
396:21 - the tasks from the local storage where
396:23 - they are nicely saved and we want to
396:25 - render them on the screen as far as the
396:30 - function first we just set up our
396:32 - keyword I'm going to call this render
396:35 - task and again it's looking for a
396:37 - parameter but parameter has a specific
396:41 - type and it's equal to task then inside
396:45 - of the function first I want to create
396:48 - the element and in order to do that I
396:51 - need to come up with the name in my case
396:53 - I'm going to call this task element then
396:55 - we go with our document it has a method
396:58 - of
396:59 - create
397:01 - element and we just need to provide what
397:03 - element we want to create so either we
397:07 - scroll down or we just type Li and now
397:09 - we successfully create the list element
397:12 - then we also want to add the text
397:14 - content basically it's going to be the
397:16 - value for our task description the
397:19 - property is text content and we set it
397:21 - equal to task so whatever it's passed in
397:25 - and
397:26 - description and then at the very end
397:28 - remember we have our list somewhere here
397:31 - that's the one if
397:34 - it exists if it's not null then we want
397:37 - to add this element to the list so we go
397:40 - with task list element up in child again
397:46 - typescript Auto formats for us and just
397:49 - add this optional chaining and then we
397:51 - pass in our task element so now let's
397:54 - navigate up where we have render tasks
397:56 - and we want to go here with this
397:58 - function pass in a task and now let's
398:01 - try it out if we're successful
398:04 - we should see the task on a screen so
398:08 - let's again go with first task and check
398:11 - it out we successfully created the
398:14 - element on the Fly same is going to be
398:16 - with second task and all the tasks we
398:19 - add to the list all right and I think we
398:22 - are at the point where we can add local
398:24 - storage to our project because it's nice
398:27 - that we can render all the tasks we add
398:30 - to our array however if we na away or
398:34 - just refresh notice how essentially we
398:36 - lose all the tasks since they're just
398:39 - saved in the memory now before we do
398:41 - anything I actually want to make sure I
398:43 - have nothing in a local storage
398:46 - otherwise I mean I might get some weird
398:48 - bugs so let me navigate to my local
398:50 - storage and just clean everything again
398:53 - Let me refresh I have nothing in there
398:56 - so now again I can make this one
398:59 - smaller and as I said I'm looking for
399:02 - the console okay good
399:04 - and now as far as the functionality we
399:05 - want to create a function called update
399:08 - storage and in there we will use the
399:11 - local storage more specifically set item
399:15 - method and we'll need to provide the
399:18 - value and just stringify our current
399:20 - tasks so in my case I'm going to do it
399:23 - over here so we go with function let's
399:26 - call this update storage and as a yes
399:30 - we'll call it in multiple places so
399:32 - update storage
399:33 - as far as the parameters well we're not
399:36 - going to pass anything in and as far as
399:39 - the functionality we're just going to go
399:40 - with local storage then let's go with
399:43 - set item as far as mining it's going to
399:46 - be tasks then comma and then we're going
399:50 - to stringify the tasks as a sign note
399:54 - yes pretty much every time we will add
399:58 - the task to our list
400:00 - or when we click on the checkbox and we
400:04 - edit the task when we set it equal to
400:07 - completed or we uncheck that yes
400:11 - effectively we will overwrite all of the
400:13 - values that we have in the local storage
400:16 - with this new one so grab the tasks and
400:18 - overwrite with the current
400:21 - values now when do we want to call it
400:24 - well for starters we want to do it over
400:26 - here so we're going to go with update
400:30 - storage let's invoke that and you know
400:33 - what I will actually open up
400:36 - a bigger window I think it's going to be
400:38 - easier to see so that's my
400:42 - tasks let me open
400:44 - up application okay good and then let's
400:48 - go with first task again Yep this is
400:51 - what we have over here notice tasks and
400:54 - I have a d and if I'm going to go with
400:58 - second task now this is going to get
401:00 - added to the array so this should cover
401:03 - when we add the task to the array so
401:07 - this should cover the form submission
401:09 - now we also want to handle when we load
401:12 - the page so at the moment we always set
401:14 - it equal to an empty array but we want
401:17 - to change that and order to do that we
401:19 - will come up with a function called load
401:22 - tasks now you can set it up with all of
401:25 - the functions but I'm just going to do
401:26 - it over here since in my opinion it's
401:28 - going to be easier to see the entire
401:31 - functionality we we are looking for a
401:34 - return and from this function we want to
401:36 - return an array of tasks so an array and
401:40 - type is going to be the task now inside
401:42 - of the
401:43 - function first let's grab the tasks from
401:47 - the local storage so we're going to set
401:49 - it equal to stored tasks that is equal
401:52 - to local or I'm sorry not load local
401:56 - storage it has a method of get item and
402:00 - we're looking for the tasks now here's
402:03 - the kicker just like previously this can
402:06 - be a null and we definitely need to
402:09 - handle that so in here when we set up
402:11 - the return we're not just going to go
402:14 - with store tasks actually we will set up
402:18 - optional training and we'll say hey if
402:22 - there's a value okay awesome parse it so
402:25 - we're going to go with store tasks
402:27 - because keep in mind we cannot store
402:30 - essentially objects in the local storage
402:32 - we can only Only Store strings that's
402:35 - why we went with Json string ify and now
402:37 - we want to parse that value but we only
402:39 - want to parse it if we get something
402:42 - back correct if not well then we'll just
402:44 - return empty array and now where we have
402:47 - the tasks we'll actually go with load
402:50 - tasks we will invoke it and since
402:53 - potentially now we can get some tasks
402:57 - from the local storage we also want to
402:59 - iterate over and render the tasks so for
403:04 - every task we have in the local storage
403:07 - in our array we want to call render task
403:11 - method so I mean somewhere after the
403:14 - tasks we want to go with the name so
403:18 - tasks then dot we're looking for for
403:22 - each and we simply can pass in the
403:25 - render task now let me showcase
403:28 - that
403:30 - essentially it's pretty much the
403:34 - same as we have over here so notice we
403:36 - can either go tasks and for each and
403:39 - then pass in the call back function or
403:41 - you simply provide the reference to
403:45 - render tasks and now let me navigate to
403:47 - the browser and if everything is correct
403:48 - whatever tasks we have in local storage
403:51 - once we refresh we'll see them in the
403:54 - browser as well all right and at the end
403:57 - of the project let's also add the
404:00 - checkbox to our list item and every time
404:04 - we click on checkbox we'll be able to
404:06 - control this is completed so by default
404:09 - it's false but then once we click on a
404:12 - checkbox we can actually toggle that and
404:14 - I think I'll try to cover the part eight
404:17 - and part nine in this video hopefully
404:20 - it's not going to be too long STS we
404:22 - want to navigate to render task and at
404:26 - the moment we're just adding the list
404:29 - item to our list but we also want to add
404:32 - a checkbox to the item and then add that
404:37 - item to the list hopefully that makes
404:38 - sense so let's go here with checkbox we
404:42 - have const task checkbox that will be my
404:46 - variable we're looking for document then
404:48 - dot then we want to create the element
404:50 - and this is going to be the input so not
404:53 - list item we're looking for the input
404:55 - and then we'll set the type to be equal
404:58 - to a text box so we're looking for task
405:01 - checkbox type
405:03 - and we set it equal to checkbox then
405:07 - let's set check equal to is completed
405:11 - Again by default it's going to be false
405:13 - so let's go with task checkbox we have
405:16 - the checked property which controls that
405:19 - and we want to set it equal to task and
405:21 - then is completed and now before we add
405:25 - task element to our list we also want to
405:28 - go with task
405:30 - element so task element then
405:34 - upend child and we want to pass in task
405:40 - checkbox and check it out now we have
405:43 - the checkbox at the moment it's not
405:44 - doing anything since we don't have any
405:47 - functionality but we'll change that
405:50 - right after we create the checkbox I
405:53 - also want to add the event listener and
405:56 - the event we're going to be listening
405:58 - for is going to be change so before we
406:01 - add it to a task element element let's
406:04 - call
406:05 - toggle
406:07 - checkbox we're looking for our task
406:12 - checkbox that's the element then add
406:15 - event listener we're going to be
406:18 - listening for change event we're not
406:20 - going to access the event and as far as
406:23 - the functionality we want to go with
406:26 - task and then is completed set it to the
406:29 - opposite since we're going to be
406:30 - toggling and the way we do that is
406:32 - following so we go with exclamation
406:35 - point and task is completed so we set it
406:40 - equal to the opposite and then we call
406:42 - update storage so now once I click and
406:46 - you know what let me showcase that on
406:48 - big screen again let me start from the
406:50 - scratch just so you don't think that I'm
406:53 - cheating over here and if we take a look
406:56 - at the tasks okay this is what we have
406:58 - is completed is equal to false but then
407:00 - once I click notice it's set equal to
407:03 - true so when I refresh I get back the
407:06 - same result this concludes the tasks
407:09 - project hopefully everyone enjoyed it
407:12 - and up next we're going to take a look
407:15 - how we can use typescript in react all
407:19 - right and once we're familiar with the
407:21 - typescript fundamentals let's see how we
407:24 - can use typescript with react before we
407:27 - begin let me just mention that I assume
407:29 - you are already comfortable with react
407:33 - so things like components State most
407:36 - common Hooks and some of the popular
407:40 - libraries if you are confused about some
407:44 - react topics please pause the video and
407:47 - utilize some external resources since
407:50 - our main focus is going to be on
407:52 - implementing react with typescript
407:55 - otherwise this part of the course will
407:58 - easily turn into a react tutorial in
408:01 - order to follow along with this part of
408:03 - the course you will need a star project
408:06 - which is the second folder in the main
408:09 - course repo so if you have not already
408:14 - done so get a hold of the repo either by
408:18 - downloading or cloning it and once you
408:21 - have the main repo on your machine open
408:24 - the second folder in your text error so
408:28 - get a hold of the
408:30 - repo open up your text eror and then
408:34 - just access the second
408:37 - folder now it is a note app so same deal
408:42 - we want to start by running npm install
408:46 - first and also or you know what I'm not
408:48 - going to set up such command because
408:51 - here and there students complain that
408:53 - such command doesn't work on their
408:55 - operating system so first let's just run
408:58 - npm install and then we want to go with
409:01 - npm run run Dev and if everything is
409:05 - correct again you'll have the
409:06 - application on Local Host
409:09 - 5173 and this is what you should see on
409:12 - the screen and if that's the case we can
409:15 - move on to the next step all right and
409:17 - let's start by taking a look at the
409:19 - files and
409:20 - folders as well as the assets I provided
409:24 - so we have node modules over here this
409:27 - is where we have all of our dependencies
409:29 - we have the public one this is where we
409:31 - can set up some public assets a source
409:34 - folder again this is where we'll do all
409:37 - of our work but in this case we're going
409:40 - to be working with react so we'll create
409:43 - components and all that cool stuff we
409:45 - have the eslint file also a g ignore
409:49 - again this just provides info what files
409:53 - and folders are going to be ignored by
409:54 - The Source control index HTML this is
409:58 - where our root component is going to get
410:00 - injected so for example if you want to
410:03 - change the title feel free to do so a
410:06 - package Json so in here you can take a
410:08 - look what extra libraries I installed
410:12 - and also we can see that we have a Dev
410:15 - one so that spins up the dev server and
410:18 - also same deal we have over here a build
410:21 - command and before vit builds the
410:24 - project what do we do we compile our
410:27 - code then we have the good old
410:30 - typescript configuration file and also a
410:33 - few more configuration files for V and
410:36 - also the node one now you'll also find
410:40 - the readme over here and just like in
410:43 - the first part of the course we will use
410:46 - this readme to set up the challenges to
410:50 - take a look at the examples I also
410:52 - provided some links to useful resources
410:55 - and all that cool stuff and first thing
410:57 - that I just want to mention essentially
410:59 - this project is a straight up beat react
411:03 - TS boilerplate application the
411:06 - difference I just added some assets to
411:08 - it and removed some boiler plate files
411:11 - that's it so if you're going to run npm
411:14 - create V latest react typescript so this
411:17 - is the name of course you can change it
411:20 - then the double dashes template and
411:22 - provide react DS effectively this is the
411:26 - project you're going to get back and
411:29 - like I mentioned before most of our work
411:31 - we're going to do in a source
411:33 - so let's just navigate over there for
411:35 - starters just like
411:37 - traditional react application we have
411:40 - main DSX so this is where we inject our
411:44 - app basically our root component into
411:47 - that div with the ID of rot now also
411:51 - you'll notice few Imports but we'll
411:54 - discuss it
411:55 - later I mean these are just Imports for
411:58 - some extra libraries we're going to use
412:01 - then we have the app DSX so this is
412:04 - where all of our components are going to
412:06 - meet you can also call this the root
412:09 - component and we have a final and a
412:12 - starter and the way I set it up notice
412:15 - these are all the topics we're going to
412:17 - discuss and this is going to be our
412:20 - starting point and in here you'll find
412:23 - the complete code so
412:25 - essentially pretty much every time we'll
412:27 - start working on a new topic we'll just
412:30 - import the specific folder because if
412:33 - you notice all of them have index DSX so
412:36 - this will be the default import that's
412:39 - just a note thing and then as we're
412:41 - moving from topic to topic we'll just
412:43 - change the path over here now for all of
412:47 - them you'll just find this
412:50 - standard component where I have few
412:52 - heading twos and basically I'm just
412:55 - displaying some text on the screen so
412:57 - all of them pretty much will be the same
413:01 - but of course once we're done the topic
413:03 - there's going to be more files more
413:04 - logic and rest of the good stuff and
413:07 - just to Showcase how it's going to look
413:09 - like let me navigate to app TSX we want
413:12 - to go with import then let's come up
413:14 - with the name in my case I'm going to go
413:16 - pretty generic I'm going to say
413:19 - component from and now we want to go to
413:22 - a star forward slash and then again we
413:27 - have all of these topics and as you can
413:29 - see they are numbered so we'll start
413:32 - with
413:33 - return topic and then all the way to
413:35 - tasks so let's go with 01 return notice
413:39 - again we don't need to provide the file
413:41 - because all of the folders have already
413:44 - a index DSX and then we want to replace
413:49 - it over here we want to go with
413:50 - component and then render it on the
413:53 - screen again at the moment it's not
413:56 - going to change that much because we
413:59 - haven't set up any logic yet and
414:02 - basically as I'm moving from topic to
414:04 - topic I'm just going to change over here
414:07 - the path and then if you want to test
414:10 - something of course you can import the
414:12 - component from one of the final ones as
414:15 - well now also something I want to
414:17 - mention the idea with the react and
414:21 - typescript is following if we want to
414:23 - set up components basically react the
414:26 - stuff we need to go with DSX so that's
414:30 - the extension now if you just want to
414:32 - set up some logic some good old
414:34 - JavaScript logic just like we did in the
414:37 - first part of the course we just go with
414:39 - Ds so whether you want to set up some
414:42 - hooks file or utils file or types file
414:46 - that's the case you'll go with Ds but
414:49 - the moment you set up the component you
414:51 - want to go with
414:53 - TSX hopefully I clearly explained how
414:57 - our setup is going to work and if you're
415:00 - looking at the other files over here in
415:02 - the source one we'll discuss them
415:05 - essentially as we progress with the
415:08 - course content for example the hooks the
415:12 - store so all of that is coming up and I
415:16 - guess lastly let me just mention that
415:17 - yes I did provide some index CSS just so
415:21 - our examples look a bit more presentable
415:25 - but again this is totally optional and
415:28 - with this in place we can move on to our
415:30 - next topic which is going to be
415:32 - the component returns in react all right
415:36 - so we have the correct import again
415:38 - we're looking for Star 01 return so
415:42 - that's where we want to navigate and our
415:45 - first topic is going to be the component
415:50 - return now let's establish a few things
415:54 - for starters what are react components
415:57 - they are functions correct and what is
416:01 - the one thing that we know about
416:04 - function returns and
416:07 - typescript well it's the fact that
416:10 - typescript infers the return type so if
416:14 - I hover over notice how typescript sees
416:19 - that essentially this is a component and
416:22 - the return is jsx
416:25 - element so what does that mean well if
416:28 - for example I'm going to forget to set
416:31 - up the turn actually typescript is going
416:34 - to yell at me so notice once I save I
416:37 - have red squiggly line in app DSX and if
416:40 - we hover over we can see that component
416:43 - cannot be used as jsx component because
416:47 - it returns
416:48 - void and few things I want to mention
416:51 - first it's super helpful because when
416:55 - you're working on a bigger project I
416:57 - mean having no return sometimes can be
416:59 - tricky to spot as far as the error go
417:02 - and second one this is something that I
417:05 - will probably repeat 10,000 times during
417:08 - the second and most likely also the
417:11 - third part of the
417:12 - course code error is going to be your
417:15 - best friend the moment you hover over
417:18 - the squiggly line or in
417:21 - general the events and state values and
417:26 - all that it will immediately pretty much
417:29 - give you all the info you need so in our
417:33 - case let's say if we go back over here
417:36 - and set up the proper return we can
417:38 - clearly see that typescript infers the
417:42 - jsx element which leads me to another
417:44 - Point can
417:46 - we explicitly write jsx element in here
417:50 - as far as the component return yes it's
417:53 - absolutely an option we can go over here
417:56 - even though it's already inferred we can
417:57 - say hey you know what I'm going to go
418:00 - over here with jsx element we save it
418:03 - and since in this case I am returning a
418:05 - jsx element there's no issue pretty much
418:08 - it's the same deal but keep in mind what
418:11 - if in your component you decide that
418:15 - you're going to return a string well now
418:19 - it's not going to fly because now I
418:22 - already have here an explicit return
418:25 - where I say hey I'm going to return jsx
418:28 - element and what about null What if I I
418:32 - have some kind of logic and I'm going to
418:34 - go with null again same deal we cannot
418:36 - do that because we have explicitly over
418:38 - here this jsx element now if you don't
418:42 - have that typescript is smart typescript
418:45 - can infer that hey in this case it can
418:49 - be either hello either jsx element or no
418:53 - so again this really comes down to your
418:56 - preference one option you can simply let
418:59 - the typescript to infer a type and at
419:03 - least at the very basic scenario it's
419:05 - going to help you to avoid this case
419:08 - where you don't return anything second
419:10 - option you can start hardcoding over
419:13 - here explicitly what are you expecting
419:16 - back from this component just keep in
419:18 - mind as your logic changes you'll have
419:22 - to adjust because if you're just going
419:24 - to write all the time jsx element well
419:26 - typescript is going to be confused so in
419:29 - this case let me just hardcode it but
419:32 - for most part I just let typescript to
419:35 - infer a type so I'm going to go over
419:37 - here with jsx element that's going to be
419:40 - one option I'll say Hey listen it can
419:43 - also be null and also well let's just
419:47 - set up a string type let me save it and
419:49 - now notice Ty script doesn't complain
419:52 - everything's fine because I have the
419:56 - explicit return and the options that I
420:00 - have inside of the component match to
420:04 - whatever I have over here in the list so
420:08 - that's how we can set up component
420:09 - returns in typescript all right and up
420:12 - next on our list we have I believe props
420:16 - so first let's change the path so we're
420:20 - looking for 0 to props let's take a look
420:24 - at
420:25 - the browser yep we have react typescript
420:28 - and props so looks like everything is
420:31 - correct and essentially in here in the
420:34 - component let's just provide some values
420:36 - so we're going to go with something
420:37 - generic for example name and the ID
420:41 - which is going to be actually a number
420:44 - so 1 two 3 and immediately once we add
420:48 - those values typescript will complain
420:51 - because again it's like setting up a
420:54 - function providing the arguments but we
420:57 - haven't set up the parameters so
420:59 - typescript doesn't know what to expect
421:02 - so let's navigate right now to our props
421:05 - index DX and let's take a look at the
421:09 - multiple options we have for props and
421:12 - essentially the first one is the inline
421:14 - one remember in react props are gathered
421:20 - in this object which we access either by
421:24 - just the structuring over here where we
421:26 - go with the curly braces or we go with
421:29 - props now I'll show you the other option
421:32 - a little bit later for now let's just
421:35 - grab the object the props object and
421:38 - let's
421:39 - explicitly take a name and the ID so
421:42 - those are the two values we're looking
421:44 - for but before we can do that since
421:46 - we're working in a typescript yep just
421:49 - like regular function we'll need to set
421:51 - up the type and the first option we have
421:55 - is basically set up everything in line
421:57 - now I can tell you right away that it's
422:00 - most likely not going to be your
422:02 - approach especially for bigger projects
422:05 - where you have components with bunch of
422:09 - props because it's just going to be very
422:11 - messy so yes in here it will start nice
422:14 - and easy but in a second I'll show you
422:16 - also another approach that we can take
422:19 - so in here we just say Hey listen name
422:22 - is going to be a string and the ID will
422:25 - be a number and the moment we do that
422:29 - typescript should be happy it just
422:31 - complaining that we haven't essentially
422:34 - used it yet now notice how everything's
422:37 - fine in the component for some reason
422:41 - it's complaining over here so let's try
422:43 - to use these values and let's see
422:45 - whether that makes typescript happy so
422:47 - I'm just going to change it around I'll
422:49 - say adding one now that one will be
422:52 - equal to name and we're looking for our
422:57 - name value and then the second one will
423:00 - be Hing one and and we'll just provide
423:02 - the ID so let's go with ID and then
423:06 - let's access that let's save this and if
423:09 - everything is correct we should see name
423:11 - Peter and whatever ID
423:14 - provided again we just go back to the
423:16 - fundamentals section where we learn that
423:18 - every time we have a function we need to
423:21 - provide info to typescript what is this
423:24 - function going to receive as far as the
423:27 - argument and since props are essentially
423:30 - arguments that we pass in when we
423:32 - construct the
423:33 - component we need to provide the type
423:36 - annotations and what's really cool let's
423:38 - say that we're using this component in
423:41 - multiple places in our project if for
423:45 - some reason I'm going to forget provide
423:49 - one of the props notice how immediately
423:52 - typescript is going to complain so I
423:55 - won't have to realize this error at run
423:59 - time as I'm building the project let's
424:02 - say that I'm setting up this component
424:05 - somewhere and I just forget that I also
424:07 - need to provide the name typescript will
424:09 - immediately let me know that something's
424:12 - wrong and actually the same works if I
424:16 - decide that the name is actually going
424:17 - to be title I mean it's quite common to
424:20 - have a component and you think that yeah
424:24 - the name for the prop name is awesome
424:27 - but then you realize that hey you know
424:29 - what actually prop name should be titled
424:32 - let's say I do that notice how
424:35 - immediately in all the places where I'm
424:38 - passing in the wrong prop it's going to
424:42 - light up so again imagine scenario where
424:45 - you have this component in multiple
424:47 - places in your project immediately you
424:50 - know that something is wrong again
424:52 - something super super cool where you
424:55 - don't need to run around like headless
424:57 - chicken and then look for those
424:58 - instances you'll immediately know where
425:02 - you provided the wrong prop so let me
425:06 - set it back to name and ID and up next
425:09 - we're going to discuss alternatives to
425:11 - inline type annotations okay so our
425:15 - initial setup works but what if we have
425:18 - a long list of props or let's say we
425:23 - want to reuse these props well in that
425:26 - case we can either set up the type or
425:29 - the interface again this is the totally
425:31 - up to you I'm going to stick with type
425:33 - just because it's my preference I'm
425:35 - going to call this component
425:38 - props and in here we just want to
425:41 - provide pretty much the same values so
425:43 - actually you know what I can just cut it
425:46 - out remove these curries set it equal to
425:50 - and
425:50 - then where I have my D structuring I
425:54 - just want to set it equal to my
425:56 - component props save it and since I
425:58 - don't see any red squiggly lines I'm
426:01 - good to go now also please keep in mind
426:04 - that
426:05 - alternatively you can just reference the
426:08 - props so in here I can say yeah props is
426:12 - going to be equal to component props
426:15 - instead of the structuring name and ID
426:18 - and then every time I want to access one
426:20 - of the values I can go here with props
426:23 - ID and props name again this really
426:26 - comes down to your preference Some
426:28 - people prefer the props option and some
426:31 - people prefer this option as long as you
426:34 - don't have the red squiggly lines as
426:36 - long as typescript is not complaining it
426:39 - does really come down to your preference
426:41 - and the same goes for the type or the
426:45 - interface so if you want to use the
426:47 - interface over here you can definitely
426:50 - do so if you prefer type it's definitely
426:54 - an option as well and while we're still
426:56 - on a topic of props let's also discuss
426:58 - the special children prop which allows
427:01 - elements and components to be passed
427:03 - into other components so if I'm going to
427:08 - go to app
427:10 - PSX and set up my closing tag as well
427:15 - and then let's say add a heading to with
427:18 - a hello world typescript is going to
427:21 - complain because I haven't specified
427:24 - that I'm going to provide the children
427:26 - prop now the name is exactly the same so
427:29 - that doesn't change we just go over here
427:32 - with children and yes we do want to
427:35 - render it somewhere in our return as
427:37 - well but now M dollar question what is
427:41 - the type and essentially we have few
427:44 - options we can hardcode it ourselves and
427:48 - the type we're looking for is react node
427:52 - and we can import it or we can just go
427:54 - to react Dot and then react node so for
427:57 - example this is one option we can take
428:00 - where we go with react
428:02 - Dot and then react node so that's the
428:06 - type we have access to and the moment we
428:09 - do that we fix the first error but
428:12 - notice right now typescript is
428:14 - complaining because since I set up my
428:17 - children prop in the props component
428:21 - it's also expecting the same thing over
428:23 - here and one easy way how to fix that is
428:27 - to just make this one optional just like
428:30 - we covered through during the
428:31 - fundamentals part so I can just go here
428:34 - say that yeah children might be provided
428:37 - or not and if it's provided then it's
428:40 - going to be a react node now also a
428:43 - quick side note just like with vanilla
428:46 - JavaScript actually during development
428:48 - everything is going to work even though
428:50 - we have the error but please keep in
428:52 - mind you won't be able to build the
428:55 - project unless you change some
428:57 - configurations and
429:00 - allow the project to be built with the
429:03 - typescript errors hopefully that is
429:05 - clear so let me go back to this optional
429:09 - property and let me show you another way
429:11 - how we can handle the children prop
429:14 - alternatively we can also import a
429:17 - special type from react which is called
429:20 - props with children so yes we have
429:24 - access to a declaration file where there
429:27 - is a type called props with children
429:29 - which actually is going to handle
429:32 - the children prop for us now in order to
429:36 - import it we're going to go over here
429:38 - with import now I will add this type
429:41 - remember technically it's not a must
429:44 - then we're looking for props with
429:46 - children and this is going to be coming
429:48 - from react and if we hover over we can
429:51 - nicely see the type
429:53 - definition and this is where I would
429:55 - encourage you to stop the video and go
430:00 - over this logic
430:02 - and try to see whether you're able to
430:06 - understand everything that's happening
430:07 - under the hood since we have covered all
430:10 - of these things during the fundamentals
430:13 - part and again reading such type
430:15 - definitions is going to be a good
430:18 - practice for us not only to jog our
430:21 - memory as far as typescript but also to
430:24 - understand what is the specific type or
430:26 - function or I don't know property
430:29 - actually doing and if we take a look at
430:32 - the type definition we can see that
430:34 - props with children is a generic which
430:36 - again kind of makes sense
430:40 - because it's going to be used in a lot
430:42 - of situations so there's going to be the
430:45 - case where the component props has one
430:48 - shape and then in the second component
430:51 - the shape might be totally different so
430:54 - again a very good use case for generic
430:57 - Now by default it's actually going to be
431:00 - set equal to to unknown so this will be
431:03 - the default value and then notice how
431:06 - they use this intersection type so
431:09 - essentially whatever is passed over here
431:13 - is just combined with what with children
431:16 - property which is set equal to optional
431:20 - so it might be passed might not and the
431:23 - type here is going to be equal to react
431:25 - node or it's going to be equal to
431:28 - undefined so let's try it out
431:31 - I think I'm going to leave this one for
431:33 - your reference so let me just copy and
431:36 - paste let me comment out first one over
431:41 - here and then instead
431:44 - of setting up the children property
431:49 - ourselves we'll just go with props with
431:52 - children and then we'll provide this
431:55 - value over here so effectively it's
431:58 - going to look like this we're going to
432:00 - go with props with children remember
432:02 - it's a generic and it's looking for that
432:05 - type and the moment we do that as far as
432:09 - the result notice we get back whatever
432:13 - type we pass in and it's just combined
432:16 - with this children property and with
432:19 - this in place now I can go to the app
432:24 - remove the heading 2 or provide the
432:26 - heading 2 to the second instance and
432:29 - everything is going to work and
432:30 - typescript is not going to complain so
432:33 - again when we work with children prop we
432:36 - have few options either we can
432:39 - explicitly provide the value of react
432:43 - node ourselves or we can import the
432:47 - props with children which essentially
432:48 - does the same thing behind the scenes
432:51 - all right and once we're clear on
432:53 - component returns props up next let's
432:56 - talk about state so first we want to
432:59 - change the import and and this is
433:02 - actually going to trigger some
433:05 - typescript errors so I think I'm just
433:07 - going to go with good old component for
433:09 - now so let me render the component yep
433:13 - typescript still complains because we
433:16 - haven't changed the import so we're
433:17 - looking for a 03 State and now we render
433:21 - the component so now let's navigate to
433:24 - this particular component and let's just
433:28 - I guess set up heading two with some
433:30 - kind of value as well as the button
433:33 - because inside of the onclick we'll try
433:36 - to change the state values so I think I
433:38 - want to do that first and then we'll
433:40 - worry about the actual logic so in here
433:43 - inside of the div I want to go with
433:46 - heading two I'll add one of the classes
433:49 - so margin bottom is going to be set to
433:52 - one and I guess I'm just going to leave
433:55 - this one over
433:56 - here then let me go with a button let me
434:00 - remove this heading
434:02 - to and let me add some classes just so
434:05 - we have some basic styling so
434:08 - BTN Center over here and then let's just
434:12 - right click me and eventually we will
434:15 - set up the on click let's not worry
434:18 - about it right now this is what we
434:20 - should see on the screen now I don't
434:24 - know whether you remember but actually
434:26 - we already covered sort of the Ed state
434:31 - during the
434:33 - fundamentals we talked about it when we
434:36 - discussed the generics but let's go over
434:38 - it one more time so yes we can nicely
434:41 - use use state in react to control the
434:45 - local state but if we take a look at use
434:48 - State it's actually going to be a
434:50 - generic so let's start I guess with the
434:52 - import so looking for use State it's
434:55 - coming from the react and let me just
434:58 - hover over it notice this is going to be
435:01 - the type definition it's a function it's
435:04 - a generic and essentially we can either
435:09 - pass in the initial state or we can pass
435:12 - in the function and as far as the return
435:15 - notice it Returns the value we provide
435:18 - in the initial State and the function
435:21 - that controls it so where I'm going with
435:24 - this if we have just primitive values in
435:27 - the use State you'll see that typescript
435:29 - is very smart and it's going to infer
435:32 - the type so for example if I'm going to
435:34 - go over here with text and set text and
435:38 - set it equal to my use State I don't
435:41 - need to set up over here the type and
435:44 - say that is going to be a string because
435:46 - typ script is going to know that so if
435:49 - I'm going to go here with shake and bake
435:53 - and if I'll have our over text step
435:56 - script knows that it's a string so
435:58 - essentially whenever I will try to
436:01 - update this value it's going to expect
436:04 - the string and we can actually see that
436:06 - over here if we go with on click and
436:09 - let's not worry about how we can handle
436:11 - events in react we'll cover that a
436:14 - little bit later for now let's just pass
436:16 - in our Arrow function just so we can
436:19 - invoke set text and if I'm going to
436:24 - provide a wrong type it's not going to
436:27 - work so notice again as we're hovering
436:29 - over what is the set State action
436:32 - function looking for it's looking for
436:35 - type string so it's going to be okay if
436:37 - I go here with typescript yeah there are
436:39 - no complaints but if I'm going to
436:42 - provide the number immediately
436:44 - typescript complaints again the logic
436:47 - technically is going to work during
436:50 - development I can navigate over here
436:52 - press and technically I shouldn't have
436:54 - any errors in a console nope everything
436:57 - is fine but typescript is not happy with
437:01 - me and the same is going to work if
437:03 - let's say I'm going to set up the number
437:05 - so let me navigate over here and instead
437:08 - of text we're going to go with number
437:11 - and set
437:14 - number okay good and then we'll provide
437:17 - the Primitive value over
437:19 - here and you know what let me just
437:22 - comment this one out for your reference
437:24 - if we're going to go with set number
437:26 - again we can see that set State action
437:29 - function which essentially is a type for
437:31 - this one for our set number function in
437:35 - this case is expecting a number because
437:38 - typescript is going to infer the type if
437:41 - I'm going to provide it if I'm going to
437:43 - say 23 yeah everything's awesome if I'm
437:45 - going to go with some kind of string
437:46 - value it's not going to work now it
437:49 - doesn't stop me from explicitly going
437:52 - over here and saying number I mean we
437:55 - can still definitely do so but again the
437:57 - whole point is that typescript is going
437:59 - to do a very good job of inferring such
438:02 - type now it's going to be a different
438:05 - scenario if let's say we have empty
438:07 - array as our initial value so let's say
438:10 - we have over here a list then comma and
438:14 - set list and we set it equal to use
438:17 - State an empty array notice how
438:20 - typescript essentially sets list to an
438:24 - array but the type is equal to a never
438:28 - and at this point we have few options
438:30 - either we provide some values over here
438:33 - so typescript knows what the type is
438:36 - going to be so for example I can go with
438:38 - hello but keep in mind there are
438:40 - instances where you want the default
438:43 - value to be empty array so I'm not going
438:46 - to provide some random hello just to
438:48 - make typescript happy so the solution in
438:52 - this case is to use the generic approach
438:55 - where we know that US state is in a
438:57 - generic and we'll just say all right
439:00 - yeah yeah it's an array but it's going
439:02 - to be an array of strings and at that
439:06 - point if I'm going to go to my on click
439:09 - and go with my set list again my
439:12 - function everything is going to be
439:14 - awesome if I'm going to provide the
439:16 - strings over here I'm going to go with
439:19 - hello and maybe I'll also add over here
439:22 - world so this is going to fly because I
439:27 - have strings in my array however if
439:31 - we're going to change this around and
439:32 - we'll go with one and three notice
439:36 - typescript is not happy because it's
439:39 - expecting a type string so this is how
439:41 - we can work with use State and
439:44 - typescript by default typescript is
439:46 - going to infer the type but it is a
439:49 - generic and there's going to be
439:51 - instances where we'll need to
439:54 - explicitly provide the type that we
439:57 - expect for the value and automatically
440:00 - is going to be set for the set function
440:03 - as well okay and up next let's cover an
440:06 - example where we have a list of objects
440:10 - now in my case I'm going to create nav
440:13 - links but again the actual data is
440:17 - totally up to you so I'm going to go
440:19 - with naab links that will be my array
440:23 - and I'm just going to provide some dummy
440:25 - data and yes I will in the beginning
440:29 - rely on the fact that typescript is
440:31 - going to be able to infert a type so in
440:34 - here I'm going to go with id1 then URL
440:38 - I'll just type some URL so essentially
440:40 - it's going to be some kind of string and
440:43 - also text will be some kind of text so
440:47 - some text okay let's save it then we
440:51 - want to copy and paste so one and two
440:55 - let's just change these values over here
440:57 - two and three and I don't think think
441:00 - I'm going to change any of the actual
441:02 - values I don't think it's relevant now I
441:05 - do want to set up the type type will be
441:08 - equal to a link I'll say that ID is a
441:12 - number okay awesome then URL will be a
441:16 - string and then text will be a string as
441:20 - well let me save it I'm not going to set
441:23 - it up over here this is something we're
441:25 - going to do later and now let's see how
441:27 - we can work with that in our use state
441:30 - so in here I'll call this links and set
441:35 - links that will be my function name
441:37 - we're going to go with use state for now
441:38 - let's not set the type explicitly and
441:43 - now let's just provide the nav links and
441:45 - again typescript is super smart now it
441:48 - knows that essentially links has this
441:52 - shape and essentially we can go over
441:55 - here where we have our own click we can
441:58 - invoke set links let's say that I just
442:01 - want to add it to an existing array so
442:04 - I'm going to spread out all the current
442:06 - links and I'm going to try to add a new
442:08 - one if the values I provide don't match
442:11 - the signature you'll see that typescript
442:13 - will complain so if I'm going to go with
442:16 - id4 then URL is going to be equal to
442:20 - hello and then also a comma and I'm
442:23 - going to go with I don't know what was
442:26 - the last one I believe it was text right
442:30 - if I'm going to say hello yeah
442:33 - everything's awesome because this
442:35 - matches the signature however if I'm
442:39 - going to Omit text notice tapescript
442:43 - immediately is going to complain because
442:46 - the text property is missing so all of
442:48 - this is nice the problem
442:51 - becomes this is inferred and remember
442:55 - when typescript infers something it
442:58 - infers based on what on the original
443:01 - value so for example if I just go and
443:04 - comment this one out now notice
443:07 - typescript thinks that yeah links
443:09 - technically can be an array of objects
443:11 - with this shape or with this shape where
443:14 - text is actually missing so now if I'm
443:17 - going to go here I'm actually going to
443:19 - be successful so this is a good use case
443:22 - where we want to go with our angle
443:26 - brackets and we want to say
443:28 - yeah we have these links over here but
443:31 - actually the type is going to be
443:33 - following it's going to be an array of
443:36 - Link type so now typescript is going to
443:39 - complain it's going to say Hey listen
443:41 - you know whatever values you provided
443:43 - they don't match so we need to fix it
443:45 - over here and now the same deal is going
443:48 - to be in our on click as well we'll have
443:51 - to provide I believe it was our text one
443:55 - now lastly I just want to mention that
443:57 - technically we can avoid all of this
444:01 - debacle pretty much if we just go with
444:04 - our type annotation over here and we say
444:06 - with the link then of course I'm not
444:09 - going to be able to remove the property
444:12 - but keep in mind there's going to be
444:13 - some instances where you're not going to
444:16 - be setting that data so again that's why
444:18 - it's super useful to use the angle
444:22 - brackets and to explicitly let
444:24 - typescript know that the shape You're
444:27 - Expecting is going to be following and
444:30 - that way essentially later when you need
444:33 - to update it's going to be very hard to
444:37 - provide the wrong data and up next let's
444:40 - see how we can handle events in react
444:45 - for starters we want to change the
444:47 - import so we're looking for
444:49 - starter and the number four events one
444:54 - the component is not expecting anything
444:56 - because we just have the bare bone setup
444:58 - with the div and all that and initially
445:01 - I just want to set up two controlled
445:04 - inputs one is going to be for text and
445:06 - one will be for email and of course in
445:10 - the process you'll see why we have two
445:12 - of them so let's do that let's go with
445:15 - use state that is coming from react
445:18 - awesome then let's go with our text and
445:21 - email and yes I will rely on the fact
445:24 - that typescript can nicely infer the
445:27 - Primitive types so I'm just going to go
445:29 - with empty value
445:30 - that will be my string and the same is
445:33 - going to be for email let's provide the
445:38 - name here and let's go with email let's
445:41 - save this and now we want to set up two
445:45 - inputs inside of the form again just for
445:49 - better styling and all that I'll wrap
445:51 - this into a section then we'll provide a
445:54 - heading to I'll call this events
445:58 - example and we want to go with our form
446:01 - for now no action don't care about that
446:04 - but we do want to add a class of form
446:07 - and inside of it let's go with input
446:11 - type will be equal to text let's just
446:14 - add few classes here we're looking for
446:16 - form input and margin bottom is going to
446:19 - be set to
446:21 - one since I'm creating over here a
446:25 - controlled input I'm going to go with
446:28 - value and on change so let me go with
446:32 - value so that will be equal to my state
446:35 - value so I'll set it equal to my text
446:38 - and then also we have unchange which
446:40 - essentially controls that value so we're
446:43 - going to go over here with unchange in
446:45 - here I'm going to pass in the arrow
446:49 - function and remember we have access to
446:52 - the event and now let's go with our set
446:56 - text and let's pass in event. target.
447:00 - value so again this is typical setup for
447:03 - controlled inputs in react there's
447:06 - nothing really
447:07 - unique now we want to copy and paste and
447:10 - we want to set up one for email the
447:12 - difference we're not going to use the
447:14 - arrow function we'll actually set up the
447:16 - function reference so type yep still
447:19 - equal to or you know what no it's
447:21 - actually going to be email then the
447:25 - class name for input yeah that stays the
447:27 - same value will be email so this is
447:30 - coming from the state and
447:33 - also on change like I said there will be
447:36 - a reference so you know what for now I
447:38 - guess let's just remove it even though
447:40 - most likely it's going to complain then
447:43 - let's go with our button and Just for
447:45 - kicks let's go with type and let's set
447:48 - it equal to submit then let's add some
447:50 - classes BTN and BTN block and let's
447:54 - write over here
447:57 - submit and actually this is something
447:59 - that we covered previously when we
448:02 - worked on the tasks application during
448:05 - fundamentals you see in here when we
448:09 - provide the arrow
448:12 - function T script will nicely provide
448:15 - the value for the
448:17 - event as you can see it's react. change
448:21 - event so that's the type we get from our
448:25 - declaration files and it's a generic and
448:28 - essentially we provide over here
448:31 - the element the HTML input element and
448:35 - this gives us a good clue what we need
448:38 - to provide over here in the function
448:40 - reference so if I'm going to navigate up
448:43 - and I'm going to go with const and then
448:46 - handle change function and if I'm going
448:50 - to try to access the event typescript is
448:53 - going to complain and it's going to say
448:55 - Hey listen this is type any so for now
448:58 - let's not worry about it let's just go
449:01 - with event. target. Val just so you can
449:04 - see that we can access that and let's
449:05 - also go with our
449:07 - set email and we want to provide the
449:10 - same value so event. target.
449:15 - value now let me navigate to my browser
449:19 - so at the moment it's just complaining
449:21 - because we haven't set the onchange this
449:24 - is our form notice I can provide the
449:26 - value but I cannot do the same for the
449:29 - email and in order to provide the
449:32 - correct type again we simply want to
449:34 - reference what we have over here so
449:37 - notice this change
449:39 - event we want to go with event then
449:43 - react Dot and then we're looking for the
449:46 - change event and if we take a look at
449:49 - the docs if we take a look at the type
449:51 - definition we can see that change event
449:54 - type is a
449:56 - generic it's expecting a type which is
450:00 - going to be the HTML element and the
450:04 - default value is going to be element now
450:07 - where we get back is Target and that
450:10 - will be the intersection type between
450:12 - the event Target and the type we provide
450:17 - so now let's navigate back to our index
450:20 - DSX and set up the angle brackets and
450:23 - provide the correct element so we're
450:27 - going to set this change event on H DML
450:30 - and input element so now we have access
450:34 - to the Target as well as the value so
450:36 - this is what we need to do when we set
450:39 - up the function as a reference again if
450:43 - we just provide the inline
450:46 - one everything is going to be set
450:49 - already for us so now let me just
450:51 - navigate over here and we're going to go
450:54 - with on change and we'll set it equal to
450:57 - anal change and with this in place that
450:59 - typescript doesn't complain and also we
451:02 - have the correct values in the browser
451:05 - so let me go over here notice I'm able
451:07 - to provide a value and the same is going
451:09 - to be with my email okay and while we're
451:12 - still on the topic of events let's cover
451:15 - submit event and few things we need to
451:18 - be aware of when we work with form data
451:21 - API so let's say we want to handle the
451:26 - form submissions we know that in react
451:30 - there is onsubmit and same deal we can
451:33 - either pass in the inline function or we
451:37 - can set up the reference and just like
451:39 - with on change event essentially if we
451:44 - pass here the inline typescript will
451:46 - right away infer the correct type if we
451:49 - set up the function
451:52 - reference then we'll need to do it
451:54 - basically manually for
451:57 - ourselves and you'll see that the form
452:00 - event is very similar to change event
452:03 - it's also going to be a generic and
452:06 - we'll just need to provide the correct
452:08 - HTML element and I think I'll right away
452:13 - set up the function reference but you
452:15 - know what before we do that let me just
452:17 - mention that in between the videos I
452:20 - added two
452:22 - attributes one on each input and it was
452:26 - the name attribute so in here I just set
452:28 - the value for text and in here for email
452:32 - simply because we will use the form data
452:34 - in this video as well and in order to
452:37 - access those values we need to add those
452:40 - name attributes now I'm fully aware that
452:42 - these are controlled inputs so
452:44 - technically when we submit the form we
452:47 - can access both of these values directly
452:49 - but I do want to showcase some things
452:51 - about form data and therefore I added
452:53 - these attributes so if you want to
452:55 - follow along I suggest you do the same
452:58 - so like I said I'll right away set up
453:00 - the reference let me go here with on
453:03 - submit and I'm going to set it equal to
453:06 - handle submit a function I don't have
453:09 - yet so let me go with handle submit and
453:13 - what is
453:14 - typically the first thing we want to do
453:17 - that's correct we want to prevent the
453:19 - default so for now again I just pass in
453:22 - the event and since typescript has no
453:24 - idea what e I'm talking about it's going
453:27 - to complain and it's going to say that
453:29 - the parameter any so first let me just
453:32 - set up the logic
453:34 - prevent default and if we want to get
453:36 - the type again we can always use the
453:40 - editor as our best friend so notice
453:44 - essentially we have over here the HTML
453:47 - form element and then we're looking for
453:50 - form event or you can pass in the inline
453:53 - and you'll get the exact event type so
453:58 - in here where we have the event we want
454:00 - to go again with react or we just import
454:03 - this type then we're looking for
454:05 - form it's a generic and in here we
454:09 - simply pass in HTML form and element and
454:13 - now we have the correct type so now we
454:16 - can use all the properties and methods
454:19 - and typescript is going to be happy and
454:23 - not going to complain now as far as form
454:26 - data it's a nice interface to handle AE
454:32 - if you have bunch of form inputs and you
454:36 - don't want to deal with controlled input
454:38 - so you don't want to set up the state
454:41 - variables you don't want to set up the
454:43 - on change as well as the value then it's
454:47 - pretty straightforward just set up the
454:50 - form add those name attributes and
454:53 - you're good to go once you submit the
454:55 - form you'll have access to it by
454:59 - creating a a new instance of form data
455:01 - so in here we want to go const form data
455:05 - we want to set it equal to new
455:08 - form data so this is right away
455:12 - available to us we don't need to do
455:13 - anything and then if you don't work with
455:15 - typescript essentially we have two
455:17 - options we can either go with
455:20 - event. current Target and notice how
455:23 - with
455:24 - typescript we can do the same typescript
455:27 - is not going to complain however
455:30 - if we're going to go with event. Target
455:33 - which again we can do without typescript
455:36 - actually it's not going to work if we
455:38 - use typescript so let me just comment
455:40 - this one out for your reference and
455:42 - actually I'll use this one later on
455:45 - anyway but if we go here with
455:47 - event.target
455:49 - it's not going to fly so typescript is
455:52 - going to complain now way around that is
455:55 - to basically go with HTML and then
455:57 - provide form element so we just add this
456:02 - type assertion where
456:04 - yeah we're looking for event. Target but
456:07 - we say that Hey listen this is going to
456:09 - be actually a forum element now if we go
456:12 - with current Target typescript is smart
456:15 - and it can see that we already have this
456:19 - element over here so let me like I said
456:22 - come in this one out and actually use
456:24 - the current Target and then one more
456:26 - gotch about form
456:28 - data potentially the values could be
456:31 - null as well and we need to handle that
456:34 - so how does that look like well for
456:36 - stars let me just showcase how we can
456:38 - nicely access all of the values so if we
456:40 - go here with object dot then from
456:43 - entries so now we just need to provide
456:46 - deform data and we'll get access to all
456:49 - of the values so if I go with data then
456:53 - let me refresh and provide some values
456:56 - so some name and
457:00 - email at
457:03 - email.com let's see where we get back
457:05 - once we click on submit notice we'll
457:07 - have this object and even if we have 15
457:11 - inputs we'll have a object with 15
457:15 - properties with all of the values over
457:18 - here and as far as the gacha well let me
457:22 - first create a type just so we can
457:25 - clearly see that so let's say we have
457:27 - over here type person is equal equal to
457:31 - and then name and that will be equal to
457:33 - string so pretty straightforward type
457:36 - and then let's go here with const
457:40 - person let's set it equal to our person
457:45 - type and we're going to go here with
457:47 - name and now let's get the value now
457:50 - it's going to be the same for the object
457:52 - over here for the text property inside
457:54 - of this object but first I'll just
457:56 - showcase what happens if we use the form
458:00 - data. getet method which is available to
458:02 - us so let's say I only want to get the
458:05 - text value I can always go here with
458:07 - text equals to form data then dot get
458:13 - then we need to provide the name and the
458:15 - names need to match so let's say in this
458:17 - case I want to access the
458:19 - text notice the value that I'm getting
458:21 - back either it's going to be form data
458:24 - entry value type or it's going to be
458:26 - null now why do we care about that well
458:29 - if I'm I'm going to set my name equal to
458:31 - a text typescript is not going to be
458:33 - happy about that it says Hey listen
458:36 - potentially it can also be a null and
458:39 - you cannot
458:40 - assign this value to a string so the way
458:44 - around that is to again use the type
458:47 - assertion where essentially we go with
458:49 - as and then we set it equal to string
458:51 - and here again I'm telling typescript
458:53 - that I know more about the project where
458:56 - yeah maybe this can be known but in this
458:59 - case I know for sure that value is going
459:02 - to be correct because I know that these
459:05 - two values match and now notice how
459:08 - everything works and the same is going
459:09 - to be over here let's say if we go with
459:13 - data. text remember that was the
459:17 - property name again it's not going to
459:19 - fly so in that case we again need to go
459:22 - with as and then string and now
459:25 - typescript doesn't complain so just to
459:28 - recap whenever we set up events in react
459:33 - if we provide the inline
459:36 - function everything is inferred as far
459:39 - as the event type so there's really not
459:43 - that much difference between typescript
459:45 - or not typescript however if we set up
459:49 - functions as the
459:51 - references then we'll need to provide
459:53 - the correct type for the
459:56 - event and there are two things things
459:59 - that we're looking for we first need to
460:02 - grab the correct event type and also
460:06 - we'll need to
460:07 - provide the correct HTML element since
460:11 - most of these events are actually
460:13 - generic now if we want to get the quick
460:16 - suggestion we simply can set up the prop
460:19 - on the element and then provide the
460:22 - inline function and the moment we do
460:24 - that we'll get a nice suggestion with
460:27 - the correct event type and the correct
460:30 - HTML element okay and up next let's work
460:33 - on a small Challenge and I think it's
460:36 - going to be
460:37 - easier for me to
460:40 - showcase the requirements so
460:44 - first let's set up the import but in
460:47 - this case we're looking for the final
460:49 - folder so all this time we have been
460:52 - importing from the Star this is the case
460:55 - where we will import from the final one
460:58 - so let's go with Port let's come up with
461:00 - a name in my case it's going to be
461:02 - component from then we're going to go in
461:05 - the final one more specifically
461:07 - Challenge and then we'll set up two
461:10 - instances so first we're going to go
461:12 - with component we'll need to provide the
461:15 - type as far as the values notice we have
461:17 - two options we can either go with
461:20 - Advanced or basic so let's start with
461:22 - basic
461:24 - then if we have basic we'll also need to
461:27 - provide the name in my case I'm going to
461:29 - go with Susan let's close this component
461:32 - and let's set up another instance where
461:34 - we're going to go with component then
461:36 - type now if we go with Advanced now
461:40 - we'll need to provide more values not
461:43 - only we'll need to provide the name
461:45 - which is going to be Anna also we'll
461:47 - need to provide the email and let's go
461:50 - with Anna gmail.com and if we take a
461:55 - look at the browser you'll see something
461:57 - like this so so this is going to be the
462:00 - look for the basic one and this is going
462:04 - to be the look for I believe the name
462:06 - was Advanced so here's the challenge
462:09 - create a component that has following
462:12 - features if we provide type basic we
462:16 - only look for
462:18 - name however if we provide type Advanced
462:22 - we also need to provide email so for
462:26 - example if I'll try to set up ADV
462:29 - Advanced without the
462:30 - email typescript is going to complain
462:34 - and also based on a type notice how we
462:38 - have different looks so for the basic
462:41 - one we have this one and then for the
462:44 - advanced one we have a different look
462:46 - now a tiny hint as far as the classes in
462:50 - here in CSS you're looking for alert and
462:54 - alert danger and success so this CSS
462:58 - part is totally
462:59 - irrelevant technically you can skip it
463:02 - for example you can just add a red text
463:04 - or something along those lines for one
463:07 - of the classes the general idea is to
463:10 - create a component where based on that
463:13 - type we are
463:15 - first providing different sets of props
463:19 - and if we don't then we get the error
463:22 - and also we get a different look so try
463:25 - to work on this Challenge and in the
463:28 - upcoming videos I'll show you my
463:30 - solution okay and first let me show you
463:32 - a typical react solution prior to
463:35 - typescript we'll also take a look at the
463:38 - potential issues essentially we won't be
463:40 - able to complete the challenge and in
463:44 - the following video I'll show you a
463:46 - proper typescript solution so first let
463:50 - me comment some things
463:52 - out first one the import and then these
463:55 - two so I still want these for your
463:58 - reference because they will help me to
464:01 - showcase the potential issues and now
464:03 - let me grab the import component from
464:06 - and now we're looking for the starter
464:10 - and same folder so we're looking for the
464:12 - challenge and we want to render that
464:14 - component somewhere so let's render the
464:17 - component let's take a look at the
464:18 - browser so now we have react and
464:21 - typescript
464:22 - Challenge and initially our approach
464:25 - could look something like this where we
464:28 - know that we need this type prop we also
464:31 - know that we need name and email and we
464:33 - know that based on that type we will
464:36 - display one set of classes and if it's
464:40 - the opposite then we'll display a
464:41 - different set so let's navigate first to
464:44 - starter and then index I guess we can
464:47 - right away set up the type over here or
464:49 - interface that is totally up to you I'm
464:52 - going to go with type profile card props
464:56 - three properties so we start here with
464:58 - type
464:59 - just because I enjoy it so much I'm just
465:01 - going to go with the literal type so I'm
465:04 - going to say yeah the possible values
465:06 - here are basic or they're going to be
465:11 - Advanced then there's going to be a name
465:14 - which is a string and also we'll set up
465:18 - the email which also will be a string
465:20 - cool cool cool and awesome start then in
465:24 - the component I'll say yeah there's a
465:26 - prop subject and actually it's going to
465:29 - have this type so profile card props
465:32 - okay cool then let's gather all of these
465:34 - things so we're looking for type name
465:38 - and email and that is equal to our props
465:42 - typescript is complaining because we're
465:43 - not using these elements and you know
465:46 - what before we set up the return let me
465:48 - just set up the logic for the class so
465:51 - essentially if the type is basic I want
465:54 - to use the success one and if not I'm
465:57 - going to use the danger again just to go
465:59 - back notice in the index we have this
466:02 - class for alert so this is just going to
466:04 - add the padding and or radius and all
466:08 - that and then based on this class so
466:11 - either alert danger or alert success
466:14 - we'll just have the background color and
466:17 - color and yes of course we can set it up
466:19 - over here in the return but I'll do it
466:23 - above since in my opinion it's going to
466:26 - be easier to see what we're doing so
466:29 - alert type is going to be equal to type
466:32 - then either basic or Advanced that is
466:35 - totally up to you and I'm going to go
466:37 - with success since that's the class name
466:40 - and yes they do need to match and then
466:43 - based on this one I'll set up my class
466:46 - name so I'm going to go with const class
466:48 - name and we'll set it equal to alert so
466:52 - that's my main class and then alert iph
466:56 - and now let's access the alert type so
467:00 - hopefully it's clear that if it's going
467:03 - to be equal to Advanced essentially not
467:06 - basic then the value is going to be
467:09 - danger if going to be equal to basic
467:13 - then essentially the value will be
467:16 - success and as a result our card is
467:20 - going to look different so in here we
467:22 - want to go with
467:24 - article and then let's add a class name
467:27 - so let's access our variable over here
467:31 - or constant I guess more properly and
467:35 - then let's just access both of the
467:38 - props so the first heading two is going
467:40 - to be user so we're going to go user is
467:43 - equal to our name prop now when it comes
467:47 - to email it's going to be a little bit
467:49 - different simply because we only want to
467:52 - display the email if the type is equal
467:55 - to Advanced correct so in my case I will
467:59 - only display the email if it's
468:02 - provided now we can set up turn operator
468:05 - or we can use the good old hand operator
468:08 - and I think I'll stick with that one
468:12 - because in my opinion in this case it
468:13 - doesn't really make a difference so
468:15 - let's look for heading two then let's
468:18 - set it equal to email and now we just
468:20 - want to access the email prop okay good
468:25 - we have everything in place now let's
468:26 - navigate back and let's provide these
468:29 - values and you'll notice something
468:32 - interesting we will only be able
468:35 - to display the advanced component let me
468:40 - showcase why so let me go here with type
468:43 - we're looking for
468:45 - advanced then let's go with name again
468:49 - doesn't really matter what we provide so
468:51 - I'm going to go with Susan and let me
468:53 - also provide the email over here let me
468:56 - go with Susan at
469:00 - susan. let me save it everything looks
469:04 - correct but notice if I'm going to go
469:07 - here with the basic and just omit the
469:11 - email not going to be successful why
469:15 - well let's take a look at our type
469:18 - typescript is expecting this email one
469:21 - so if I'll copy and paste over here and
469:24 - if I'll say yeah the type is going to be
469:26 - basic and actually I don't want to
469:29 - provide the
469:30 - email typescript is going to complain
469:33 - it's going to say Hey listen I still
469:35 - need this email and technically you can
469:37 - make an argument okay well I could
469:40 - provide email over here and just provide
469:43 - empty string and even though it kind of
469:47 - works you have to agree that this is
469:49 - somewhat
469:50 - clunky
469:52 - my goal is to have a component where if
469:57 - I provide this type Advanced I am
469:59 - looking for email and if it's actually
470:02 - type basic I'm not even looking for this
470:05 - prop that's my
470:07 - goal now you could make an argument that
470:11 - we can go back and make this one
470:13 - optional over here and yeah technically
470:15 - it works for the basic one right now but
470:20 - what about the advanced one so now this
470:23 - technically is optional as well so if I
470:26 - remove it typescript doesn't complain
470:28 - but if I navigate back I'm not showing
470:31 - the email in my Advanced user card as
470:36 - you can see in both of the cases we have
470:39 - issues we don't have the
470:41 - setup that we're looking for and
470:45 - therefore in the following video we will
470:47 - cover a proper typescript solution and
470:51 - since I know that I'm going to get this
470:52 - question a lot let me just answer it
470:55 - here no adding following logic to our
470:59 - component is not going to solve the
471:02 - issue so yes
471:05 - definitely not only we can check for
471:07 - email we can also check for type and set
471:10 - up the tary operator where if the type
471:13 - is equal to advaned then we display the
471:16 - heading to with an email and if not we
471:18 - go with null but notice our component so
471:23 - for example if I have the advanced one
471:26 - yes it nicely requires the email and
471:29 - once I provide everything is
471:32 - awesome but it's going to be the same
471:34 - thing with our basic one so since the
471:38 - prop is present I need to provide it and
471:41 - yes I can still provide the empty string
471:45 - but remember that's not my solution
471:48 - that's not what I'm looking for I don't
471:50 - want to randomly provide these empty
471:52 - strings and if we change this one around
471:55 - to optional property same deal
471:59 - now if I go to app DSX and remove both
472:04 - of these values over here notice
472:07 - essentially the first card is correct
472:10 - but the second one has empty email value
472:13 - so yes even though this one looks like a
472:16 - better solution essentially it has the
472:18 - same
472:19 - issues as the one that we used before
472:22 - where we checked for the email all right
472:25 - and once we have covered the issues with
472:27 - our initial setup
472:29 - now let's complete the challenge
472:32 - by constructing a proper typescript
472:35 - solution for starters I do want to
472:39 - remove these ones so I want to start
472:41 - from the scratch and essentially in here
472:44 - we want to create two types so our
472:48 - component actually is going to have two
472:50 - types so the first one is going to be
472:52 - basic one and second one will be
472:54 - Advanced so we're not going to use this
472:57 - literal type over here we're actually
473:01 - going to hardcode it equal to a basic
473:03 - and since there's going to be two types
473:05 - I'll also name this one basic profile
473:08 - card props now let me copy this one and
473:12 - in here we want to remove the
473:15 - email and it's not going to be optional
473:17 - anymore so if the type is Advanced if
473:21 - we'll have this type then we'll look for
473:25 - all of these properties so type is going
473:28 - to be equal to Advanced name String and
473:30 - email string now for the basic one we'll
473:33 - only have type basic and name type is
473:37 - going to be a string now where we have
473:40 - the component I'll actually create
473:42 - another type I'll say profile card props
473:46 - and this will be a union type with basic
473:50 - profile card props and the advanced
473:53 - profile card
473:54 - props and in here we're actually going
473:58 - to set up to return based on a type so
474:02 - for starters what two properties we can
474:06 - always access well it's the type as well
474:08 - as the name correct because keep in mind
474:11 - we only have access to email if the type
474:14 - is equal to Advanced profile card props
474:18 - so therefore we're going to look for two
474:21 - properties that are always going to be
474:23 - there so name and type and now
474:27 - essentially we want to set up our return
474:29 - where we're going to go with well if
474:31 - type is equal to basic one of the
474:35 - potential values then we'll have one set
474:40 - of elements if not well then we'll
474:43 - return prey much the other card so let's
474:47 - go here with the return we're looking
474:49 - for the article so in this case we don't
474:51 - need to set up that logic to add classes
474:56 - based on type we simply we want to go
474:58 - with class name alert alert
475:03 - success and then inside of the article
475:06 - we're just going to go with heading two
475:09 - user and we'll access the
475:11 - name so let's set it up over here and
475:15 - then if the type is
475:18 - Advanced basically our second option
475:21 - you'll see that we have access to props
475:25 - that email so let's go here with the
475:26 - return and as a sign you can actually
475:30 - structure it here as well so in here you
475:33 - can go with email and actually
475:34 - typescript is not going to complain and
475:37 - it sees that email is actually a string
475:40 - simply because if the type is basic okay
475:43 - we have one return so it knows that at
475:45 - this point the email has to be present
475:49 - now in my case I will use the props that
475:51 - email again doesn't really matter which
475:54 - way you pick so we want to go over here
475:56 - with article then let's add the classes
476:00 - now we just want to provide the
476:01 - different values so it's not going to be
476:04 - success it's actually going to be a
476:07 - danger one and then inside of the
476:09 - article we're going to go with heading
476:11 - two we're looking for user then we want
476:15 - to access the name just like before and
476:20 - we'll also add the heading two with
476:22 - email and then we'll grab the props that
476:27 - email so now let's navigate to app and
476:31 - if everything is correct if we type
476:34 - basic we only need to provide the name
476:37 - and we'll get the correct look however
476:40 - if we go with Advanced we'll need to
476:42 - provide both of those values so if we go
476:44 - with component type notice we have basic
476:48 - or advanc so those are our two options
476:52 - if we go with basic we only need to
476:55 - provide the name so now we have property
476:58 - name is missing okay good it's provided
477:01 - and notice how we don't need to provide
477:04 - an email here with an empty value no
477:07 - that script is Happy everything's fine
477:09 - we have correctly a basic user card now
477:13 - if we're going to go here with component
477:15 - type and we'll set up the advanced now
477:19 - it's looking for name and email so one
477:22 - by one let's set it up we have name
477:25 - again let's go with our Anna and email
477:29 - and let's just provide the value Yep
477:32 - looks about right hopefully everyone
477:35 - enjoyed the challenge and we can move on
477:37 - to the next topic all right and up next
477:40 - let's see how we can use typescript with
477:42 - context API before we begin please keep
477:45 - in mind that we will write bunch of the
477:47 - boiler plate code meaning don't get
477:50 - overwhelmed by the amount of code since
477:54 - you'll be able to take it from Project
477:56 - to project and second at this point in
477:59 - time context API is not as popular
478:02 - anymore so if you don't find these
478:06 - examples useful don't stress about it in
478:09 - fact if you don't use the context API at
478:12 - all in your apps feel free to skip the
478:15 - following videos for context API I did
478:18 - prepare two examples the very basic one
478:22 - with just one state value and a more
478:25 - complex one with more bells and with
478:28 - just so we can cover all the topics step
478:30 - by step so let's start just like with
478:33 - the previous examples where we want to
478:36 - import from the star in this case we're
478:38 - looking for the context one and in this
478:41 - case we'll create two files so one is
478:43 - going to be for context and essentially
478:45 - in the index one we'll access the
478:48 - context now if you work with context API
478:52 - before you know that technically we can
478:54 - wrap the app component in context we can
478:57 - also set it up in the main
479:00 - DSX so there's tons of options but in
479:04 - this case I just decided to set up
479:06 - everything in the context just so it's
479:10 - easier add it to the final one and leave
479:13 - it for your reference so don't be
479:16 - surprised if in this example we'll have
479:20 - two files so for stars we're looking for
479:24 - component so this is coming from where
479:28 - we're going to final and then we want to
479:31 - look for context again let's render it
479:33 - somewhere here on the screen the
479:36 - component one and let's navigate to our
479:41 - 06 context one let's create a new one
479:45 - and the name is going to be context DSX
479:49 - in here we need two Imports and you know
479:52 - what actually I'll set up the third one
479:54 - as well since we'll use it in the
479:56 - following example so we're looking for
479:59 - two functions create context one and
480:03 - also use context since we'll set up the
480:05 - hook as well and then lastly in the
480:08 - following example we'll use the use
480:12 - state so I'll add that import here as
480:14 - well right away and for now let's just
480:17 - create a new context now as far as the
480:19 - naming you'll notice that I keep using
480:22 - this theme and it's simply because the
480:25 - following example is going to be for the
480:28 - theme and I prettyy much want to use the
480:30 - same names so we'll just build on this
480:34 - example that way we don't need to type
480:37 - too much so theme
480:39 - provider and let's call this context
480:43 - let's invoke create context now this is
480:44 - going to be generic and the difference
480:47 - between normal react and react with
480:51 - typescript is that we'll have to provide
480:53 - the default value so in this case I'm
480:55 - just going to go with undefined let's
480:57 - imagine that we don't know what the
480:59 - context is going to be then we want to
481:01 - set up a component which is actually
481:04 - going
481:05 - to wrap all of our components and
481:08 - provide the context so we're going to go
481:11 - here with
481:12 - theme provider and if you're familiar
481:15 - with the context API you know that this
481:18 - component normally is looking for
481:21 - children so it's looking for the
481:24 - component since it's a context provider
481:27 - so in here we'll definitely need
481:29 - children and we know already that as far
481:32 - as the type we can either use the type
481:36 - provided by react or we can just go with
481:39 - react and then do and react node
481:43 - somewhere here now as far as the logic
481:46 - here's where we want to go with return
481:48 - and we'll just set up one value so we're
481:51 - looking for theme provider context it
481:54 - has the provider component so we go here
481:58 - with the provider and then we want to
482:00 - wrap the children we'll go here with the
482:04 - children and notice how typescript is
482:07 - complaining because we do need to
482:08 - provide the value now once we provide a
482:12 - value you'll notice that typescript is
482:15 - not going to be happy with create
482:17 - context setup so for now let me just
482:19 - showcase the basic example let's say I
482:22 - provide over here the hello and the
482:25 - moment we do that notice we right away
482:27 - get the red squiggly line and the error
482:30 - message says well you cannot assign
482:32 - string to undefined so this was okay
482:36 - initially when we were creating the
482:37 - context we could say all right so it's
482:39 - going to be undefined but now typescript
482:41 - is complaining and in order to fix it
482:45 - create context is a generic and in here
482:48 - we'll use the type Union first we'll
482:51 - provide what is the eventual value which
482:54 - will be a string here and we'll also go
482:57 - over here and say that it can be
482:59 - undefined so this will be our initial
483:02 - value and then this will be our eventual
483:05 - value So eventually we'll have this
483:07 - value equal to string and that's why we
483:10 - have over here this type I'm purposely
483:12 - keeping still this undefined because
483:15 - it's going to be super useful once we
483:17 - set up our custom hook so even before we
483:20 - wrap any of our components I also want
483:23 - to set up a hook called use theme again
483:28 - I'm just going to keep these names since
483:30 - we will use them in our following
483:32 - example as well and in here we want to
483:34 - invoke use context which is looking for
483:37 - the theme provider context essentially
483:40 - any context so let's set up this one
483:43 - context is equal to use context and
483:47 - we're going to go with theme provider
483:49 - context and now if the context is
483:52 - undefined I actually want to throw the
483:54 - error now when the context is going to
483:57 - to be undefined because at the moment we
483:59 - can clearly see that actually we do have
484:01 - a string well this context could be
484:04 - undefined if let's say we're trying to
484:07 - access this use theme but the component
484:11 - where we're using the hook is not
484:13 - wrapped in the theme provider context
484:16 - and in my opinion it's a good setup
484:18 - because that way we immediately can see
484:21 - that there is an error and you'll see
484:23 - what I'm talking about in a second if
484:24 - this is confusing so I'm going to go
484:27 - here with context and if it's actually
484:29 - equal to Define I'm going to throw the
484:32 - eror and if everything is correct then
484:34 - we'll return the context so say here
484:37 - return context but before that we'll go
484:40 - throw new and error and let's just
484:44 - provide some kind of error message my
484:46 - case I'm going to go with use theme must
484:49 - be used
484:52 - within the theme provider let me save it
484:55 - over here and now let's navigate to our
484:58 - index one let's import both things the
485:03 - hook as well as the theme provider and
485:06 - now let's set up the parent component so
485:08 - we're not going to export this one as
485:10 - default actually there's going to be a
485:12 - parent component where we'll have our
485:15 - theme provider so first let's start here
485:18 - with use theme okay yeah that's coming
485:21 - from the context and I also want to grab
485:23 - the theme provider and then let's set up
485:26 - the parent comp component again this is
485:29 - just to demonstrate how we can wrap
485:31 - components please keep in mind that
485:32 - typically you'll do that in the app or
485:36 - in the main DSX so we go here with
485:40 - parent
485:43 - component that's our function basically
485:47 - our component and as far as default one
485:50 - I actually want to export the parent
485:52 - component not the component and then in
485:55 - here let's go with theme
485:58 - provider and then inside of it we want
486:02 - to place the component essentially this
486:04 - one and once we nicely wrap the
486:07 - component we can actually go over here
486:10 - and I can go with context go with use
486:13 - theme so that's my hook this is how I
486:17 - can access the values and basically if
486:19 - we log over here and provide the context
486:23 - if everything is correct we should see
486:26 - that value hello in the console so now
486:29 - let's navigate to the browser and H this
486:33 - looks
486:35 - interesting so it looks like I'm
486:38 - grabbing the file from the final one so
486:42 - let me navigate back yeah we're not
486:44 - looking for final my bad so we're
486:48 - looking for the starter in this case and
486:50 - once we do that notice the value is
486:53 - hello and essentially it matches
486:56 - whatever we pass over over here in the
486:59 - value prop now of course normally this
487:02 - is going to be more complex for example
487:05 - you could have here an object and name
487:10 - is going to be equal to something let's
487:12 - go with hello same deal now I'll just
487:15 - need to go back over here where we
487:17 - create the context and just provide that
487:20 - eventual value so again this is
487:22 - undefined this is the default one and in
487:25 - here I can say that yeah there's going
487:27 - to be an object and the property is
487:29 - actually going to be string so notice
487:32 - now if we navigate to the console we'll
487:35 - see this value instead and the reason
487:38 - why this line of code is so useful is
487:42 - because if we navigate back and for
487:44 - example we forget to wrap everything in
487:49 - our theme provider basically let's say
487:51 - that we are trying to access our theme
487:55 - context without wrapping the theme
487:58 - provider and I'm just going to simulate
488:00 - that by returning a component notice how
488:03 - immediately I'm going to have the error
488:06 - in a console and not only that it's
488:08 - going to be super helpful where it's
488:11 - going to say hey us te must be used
488:13 - within the theme provider so this is
488:16 - going to give me a super good clue what
488:19 - is wrong with my current code and of
488:21 - course now I just need to go back and
488:23 - wrap everything nicely in the theme
488:25 - provider so let me remove move this one
488:28 - and now again we're good to go the main
488:30 - deal over here when we use tapescript we
488:33 - will need to provide what is the
488:37 - eventual type for our value prop over
488:41 - here and we can simply say that yeah
488:43 - initially it's going to be undefined and
488:46 - then
488:47 - eventually whatever we set up in a value
488:50 - we'll need to provide the type over here
488:53 - and since the theme provider is always
488:55 - going to be looking for children so is
488:57 - going to be looking for components
489:01 - therefore we'll need to provide a type
489:03 - for a children prop as well all right
489:07 - and now let's work on more complex
489:08 - example please keep in mind that this
489:11 - code is going to be available in the
489:12 - readme just in case you ever want to
489:15 - reference and also in the final one
489:18 - you'll find this basic context and basic
489:22 - index
489:23 - TSX and essentially this is the code
489:26 - that we set up in the previous video
489:29 - because in my case I will modify my
489:32 - existing code right now so for starters
489:35 - I'm going to go here with type and theme
489:37 - and I'm going to go with literal types
489:40 - so we'll provide
489:42 - light uh we'll also provide dark and
489:46 - we're going to go with system and
489:48 - essentially we're building here a theme
489:51 - context provider so let's say in our
489:53 - application we want to toggle between
489:55 - the light and a dark theme and we want
489:58 - to do it globally therefore we're going
490:00 - to set up the context provider now let
490:03 - me navigate to theme provider and
490:06 - essentially I'll set up over here a use
490:09 - state so I'm going to go with use State
490:12 - and we know that it's a generic and I'll
490:14 - say
490:15 - yeah the value is going to be string but
490:18 - actually it's going to be type of theme
490:20 - and eventually we will provide the
490:22 - default value let's not worry about it
490:24 - right now and let's just go with
490:28 - theme and as I not I do need to provide
490:32 - the square brackets and we're looking
490:34 - for theme and also a set
490:38 - theme so we have these values over here
490:41 - and as far as what I want to pass down
490:44 - instead of this name hello I'll actually
490:47 - go with theme and also a set theme so
490:52 - now of course typescript is going to
490:53 - complain because this doesn't match
490:56 - whatever I have have here in the create
490:58 - context so let's fix that let's set up a
491:02 - type for our state which actually
491:05 - matches whatever I have in the value so
491:08 - we're going to go here with type theme
491:12 - provider and let's say State props State
491:16 - that's totally up to you I'm going to go
491:18 - with theme and that is equal to a theme
491:21 - over here so theme type and also a set
491:24 - theme and essentially we'll just say
491:27 - that that it's a function which is
491:28 - looking for a theme and type will be
491:32 - equal to a theme and it doesn't return
491:34 - anything so we
491:36 - simply provide void over here and
491:39 - instead of hardcoding the object with
491:42 - the name property which is a type string
491:45 - we're going to go with theme provider
491:48 - State now in this case it's complaining
491:52 - because it says well theme can also be
491:54 - undefined and we have multiple ways how
491:57 - we can fix that either we can provide
492:00 - the value like so so I can just say yeah
492:03 - the default value is going to be dark
492:05 - light or whatever
492:08 - or in my scenario I'm actually going to
492:11 - add one more property in the props and
492:16 - therefore I will set up a separate type
492:19 - so I'm going to go type theme
492:23 - provider and let's call this props and
492:27 - we'll look for two things first one is
492:29 - going to be children so this one is the
492:31 - same so react Dot and we're looking for
492:34 - react node and also I want to set up the
492:39 - default theme so let me add over here a
492:43 - property default theme I will set it
492:46 - optional and I'll actually set it equal
492:49 - to type theme so it's going to be
492:51 - optional but it needs to match one of
492:54 - these values so light dark or system one
492:57 - and where I have the theme provider I'll
493:00 - actually remove the hardcoded one and
493:03 - add theme provider props and in here
493:07 - let's go with default theme and I will
493:10 - add some default value which is actually
493:12 - going to be a system and now at the very
493:14 - end I'll go over here and provide
493:17 - default theme and pretty much this
493:20 - concludes our theme setup so as you can
493:22 - see once we understand how we can set up
493:25 - a basic context with just just one value
493:28 - it's pretty easy to set up a more
493:31 - complex one so now we just want to
493:33 - navigate to index DSX and we want to
493:37 - change our component around so this one
493:40 - will stay the same and of course if you
493:42 - want to test it out you can provide over
493:44 - here the default value and all that
493:46 - that's definitely an option but in my
493:48 - case I just want to grab the context
493:51 - with a theme and I also want to set up a
493:55 - button which I'll use to change the
493:58 - theme so in here right after this react
494:01 - and typescript so I guess I'm going to
494:03 - leave that I want to set up a button and
494:05 - remember now in our context we have
494:08 - multiple things not only we have theme
494:10 - system but we also have this set theme
494:13 - function so I want to try to invoke the
494:16 - set theme on a button click just so I
494:18 - can see whether my functionality works
494:21 - so let's add over here a value I guess
494:25 - I'm going to go with toggle theme and
494:28 - then also let's add the onclick so we're
494:31 - going to go over here with onclick let's
494:33 - provide the arrow function and I'm just
494:37 - going to check what is the value if the
494:39 - value is equal to dark then I'll set it
494:43 - back to system and if it's actually a
494:47 - system one then I'm going to go with
494:49 - theme dark so let's go here with context
494:52 - Dot and we're looking for theme then we
494:55 - want to check the value notice how we
494:57 - right away get our nice suggestions I'm
494:59 - going to say if it's equal to dark then
495:01 - I want to set it to system context then
495:05 - set theme and we provide the system one
495:09 - then we return like so now if it's
495:12 - already a system one then we just want
495:14 - to go with context set theme and we
495:18 - provide over here the value of dark and
495:22 - you know what I also want to add some
495:23 - classes here so let's go with BTN and BT
495:27 - and Center let's save it now I have my
495:31 - button and pretty much every time I'll
495:34 - click on it I'll change this value now
495:36 - we haven't set up any CSS so nothing is
495:40 - going to change as far as the background
495:44 - but notice as I'm clicking I'm actually
495:47 - changing the value in a state so that's
495:49 - how we can set up context API with
495:52 - typescript okay and up next let's see
495:55 - how we can use typescript with use
495:57 - reducer hook and just like context yes
496:00 - it's not as popular anymore since we
496:03 - have options like Redux toolkit and Zoo
496:06 - stand but you still might encounter it
496:09 - from time to time and therefore I
496:11 - decided to add it to the course just
496:13 - like before we want to start in app DSX
496:17 - hopefully this time I'm importing from
496:20 - the correct folder so let me go with
496:23 - star and now I want to go to Red
496:27 - producers okay let's save it let's see
496:29 - okay at the moment I have react and
496:31 - typescript reducers looks about right
496:34 - and this is the case where I do
496:37 - suggest navigating to a readme and
496:40 - basically we want to get some star code
496:43 - because I really don't think that it's
496:45 - going to be beneficial to type this
496:48 - together so essentially go to 07
496:51 - reducers and you're looking for this
496:53 - function so this is what you want to set
496:55 - up in your comp component not the app
496:58 - DSX make sure you navigate to the
497:00 - starter 07 and we're looking for the
497:03 - index one this is what you want to paste
497:07 - it over here and essentially this is
497:09 - what you'll see in the browser so we'll
497:12 - have increment decrement and reset so at
497:14 - the moment nothing is happening we just
497:16 - have some console logs over here and
497:19 - also we have this set status to active
497:22 - and inactive so basically our state is
497:26 - going to consider consist of two things
497:28 - so there's going to be some counter
497:29 - value and also we'll change the string
497:32 - value of active and inactive just to
497:35 - Showcase how it works and our goal
497:38 - essentially is to set up the US reducer
497:41 - hook and also set up the reducer initial
497:44 - State and all that cool stuff so now
497:47 - let's navigate back to the component we
497:50 - want to go with const and this is
497:52 - returning two things State and also a
497:56 - dispatch and we set it equal to use
497:59 - reducer so we import that and it's going
498:02 - to look for counter reducer so some kind
498:04 - of reducer function and also initial
498:08 - state so first let me just provide these
498:11 - values please don't import them from the
498:13 - final one we'll just go here with
498:15 - counter reducer and initial state so
498:19 - I'll set up both of these values now of
498:21 - course we don't have them in this file
498:23 - this is why we want to go to the folder
498:27 - and we want to create a new one so in
498:29 - this case I'm going to call this reducer
498:31 - TS again if we have a component file yes
498:35 - we go with DSX but if it's just going to
498:38 - be a Javascript file then we just go
498:39 - with TS so let's set up reducer yes and
498:44 - let's start with the initial state so
498:47 - this is something we're going to export
498:49 - we're going to go with initial state in
498:52 - a second we'll set up the type for now
498:54 - let's just go with count which is equal
498:56 - to to a zero and then status the initial
498:59 - value will be pending but this is where
499:02 - we'll change it to active and inactive
499:06 - so now let's set up the type for this
499:08 - one so export type counter State and in
499:13 - here we have two values we have count
499:16 - which is type number and also we have a
499:19 - status which is equal to a string so now
499:22 - we just want to go here where we have
499:23 - the initial State and set up our type so
499:27 - counter State okay awesome so we're
499:30 - exporting that I guess we can now go
499:32 - over here with import and we are looking
499:36 - for our initial State and this is coming
499:39 - from the same folder so we just look for
499:41 - reducer so now we just need to set up
499:43 - the counter reducer and for now it's
499:46 - simply going to be a function and if you
499:48 - know the reducer so it's looking for the
499:51 - state as well as the action so what is
499:54 - the state and what are we going to do
499:56 - with that State and for now we're just
499:58 - going to return that state so we're
500:00 - going to go here with export then const
500:03 - counter reducer so that will be the same
500:06 - name and we'll set it equal to our
500:09 - function our Arrow
500:11 - function as far as the parameters this
500:14 - is what we're looking for the state
500:16 - which is actually equal to a counter
500:18 - State and action and for now let's just
500:20 - set it equal to any of course as we're
500:24 - working on a functionality we're going
500:25 - to fix that and and as far as what we
500:27 - want to return from the function we're
500:28 - going to go with counter State and then
500:32 - inside we're going to go with a return
500:34 - and state so pretty much for now we're
500:37 - just going to grab the state and we'll
500:39 - return State as it is so then back in
500:42 - the index the
500:44 - SX not only we have initial state but we
500:47 - also have the counter
500:50 - reducer so in the upcoming videos we can
500:53 - start working on the functionality and
500:56 - once we have setup in place I guess
500:57 - let's start by displaying the value from
501:01 - the state so at the moment we're
501:03 - hardcoding the count as well as the
501:05 - status but keep in mind that in here we
501:07 - already have some initial values so
501:10 - let's just access
501:12 - those count is going to be equal to the
501:15 - state that we're getting back and notice
501:17 - how we have these two properties and in
501:20 - this case I'm looking for the count and
501:22 - the same is going to be for the active
501:25 - one instead of Ive actually is going to
501:27 - be equal to a state and then the status
501:31 - let's save it notice now we have count
501:34 - and also we have the pending one since
501:36 - that's my default value and I think I'm
501:39 - going to start with these ones so we
501:42 - want to set up few types one for
501:44 - increment decrement as well as the reset
501:48 - one and we're going to start by setting
501:51 - up a type and I'm going to call this
501:53 - update count action so that will will be
501:56 - my type over here so let's set it up so
502:00 - type update count action and here I'm
502:05 - going to go with the literal one so
502:07 - either it's going to be increment
502:09 - decrement or reset so type increment
502:14 - then Union we also can have decrement
502:18 - and also we can reset the value over
502:21 - here and now I'm going to create another
502:25 - type since there will be one for the
502:28 - status one but technically I mean if I
502:32 - would only have the count over here so
502:35 - if I wouldn't have functionality to
502:38 - change the status I can simply go to
502:40 - update count action and set it equal to
502:42 - my action so that will be my type but
502:45 - since there's going to be more logic I'm
502:47 - going to go with type and then
502:50 - counter action and that one will be for
502:52 - now equal to update count action so now
502:56 - where we have the action in the counter
502:59 - reducer we want to go with counter
503:01 - action and now let's set up our logic
503:04 - where inside of the counter reducer
503:07 - instead of returning the state we're
503:09 - going to go switch statement and we want
503:12 - to go with action and type notice again
503:15 - we have these potential three values and
503:18 - then
503:19 - based on the actual value we'll do some
503:22 - logic over here so first let's set up
503:25 - the default one and and let's say that
503:27 - by default we'll just return a state we
503:31 - say State over here and
503:34 - then as far as the cases let's go with
503:38 - increment first so that's going to be
503:40 - our first case and then we want to go
503:43 - with return and we want to pretty much
503:46 - spread out the current state so we only
503:49 - want to update and then count is going
503:51 - to be equal to State DOT and count Plus
503:56 - one and prettyy much we want to do the
503:58 - same thing for rest of them so the
504:01 - second one will be decrement case
504:05 - decrement as you can see we only have
504:07 - two options at the moment so decrement
504:11 - and we just want to change this around
504:14 - where instead of plus one we're going to
504:17 - go with minus one and then lastly we
504:19 - also have the reset case reset and if
504:23 - that's the case just want to grab this
504:27 - State and basically set the count equal
504:31 - to zero now in order to invoke we need
504:36 - to use the dispatch and we need to pass
504:39 - in the correct type so instead of just
504:41 - logging it over here we want to go
504:44 - dispatch and then we need to provide
504:47 - what is going to be the type and as far
504:50 - as the increment one it's over here and
504:54 - we want to repeat for decrement the same
504:56 - same
504:58 - dispatch type and then decrement and
505:02 - then at the very end we also have the
505:04 - recet one so as you can see the biggest
505:06 - difference is that now we have a clear
505:09 - control over the action type so usually
505:13 - this was the biggest pain points where
505:16 - you could provide some random value once
505:18 - we use the typescript it's actually not
505:20 - the case anymore we clearly have a list
505:22 - of values that we can provide and we're
505:24 - not going to provide anything random so
505:26 - notice now I navigate over here to the
505:28 - browser and I have these three working
505:31 - buttons okay and let's also see how we
505:33 - can handle the action where we have the
505:36 - payload so with our counter pretty much
505:39 - we're only handling the type correct and
505:43 - then based on that we control the state
505:45 - value but we can also pass in the
505:47 - payload and for starters let's set up a
505:50 - type for that so we're going to go with
505:52 - set status and let's call this action as
505:57 - well in here there's also going to be a
505:59 - type so this property we definitely need
506:02 - to
506:03 - provide and as far as the value I'm
506:05 - going to go with set status and then
506:08 - when it comes to payload I'm just going
506:10 - to go with few options and again I'm
506:13 - going to use my literal type so I'm
506:15 - going to go with
506:16 - active and also it's going to be equal
506:19 - to inactive then we want to navigate to
506:23 - our reducer and let's set up the case
506:27 - where we're going to go with set and
506:30 - status and as I note before we do that
506:33 - actually we need to add this set status
506:36 - action to our counter action to our
506:39 - counter action type because this is how
506:43 - we're checking actually in the reducer
506:45 - so let's go with set status action and
506:47 - now notice how we're going to get some
506:49 - nice suggestions so if I go over here
506:51 - with case and then set status now we
506:55 - just need to decide what are we going to
506:57 - do and in my case I'm going to return
507:00 - state so that doesn't change and as note
507:03 - there is a error over here and now we
507:06 - just need to update the I believe what
507:09 - was
507:10 - the value the status one correct so in
507:14 - the state there is a status one and
507:17 - we're just going to set it equal
507:19 - to action and payload so we'll set it
507:23 - equal to one of these strings over here
507:25 - so now we want to navigate to index
507:29 - DSX and where we have the console logs
507:32 - to active and inactive same deal we just
507:35 - want to dispatch it type going to be
507:38 - equal to and we want to go with set
507:42 - status and then we will need to provide
507:44 - the payload as well so in here let's go
507:48 - with payload and this will be equal to
507:51 - active one I guess that's going to be
507:53 - the first button and now we want to copy
507:55 - and based and just change these values
507:58 - around so instead of active we're going
508:01 - to go with
508:02 - inactive yep if I provide the correct
508:05 - value everything is awesome so now let's
508:08 - just navigate to the browser and not
508:10 - only we can control the counter but we
508:13 - can also change these values so we can
508:15 - also pass the payload and at the very
508:18 - end let's also not forget about the type
508:20 - never so let me navigate back to the
508:24 - reducer and we can see over here that by
508:27 - default we return the state which
508:30 - technically is okay but just keep in
508:32 - mind we can add some kind of type over
508:34 - here and this is going to fail silently
508:38 - so for example if I'm going to add
508:40 - another type over here I'm going to go
508:43 - with something random if I'm going to
508:45 - dispatch it I mean it's going to go
508:47 - through my cases and essentially I'll
508:49 - just get back to state so the problem
508:52 - with this one is that it's very hard to
508:55 - catch this error and therefore in here
508:58 - where we have the default actually we
509:00 - want to add some logic where I'm going
509:03 - to go with con on handled action type
509:07 - remember type is never and we're going
509:09 - to set it equal to an action and now
509:11 - notice how immediately it complains
509:14 - because effectively there is another
509:17 - type the moment actually it's random one
509:20 - over here and unless we handle it so
509:23 - unless I go over here case and then and
509:26 - random and then decide what I want to do
509:29 - for example return and then dot dot dot
509:32 - State unless I do that there will be a
509:36 - error and what's really cool that it's
509:38 - actually at buil time so not at runtime
509:42 - so now let me remove this example over
509:44 - here and let's just complete by throwing
509:47 - a error so let me go with throw new
509:50 - error and let's provide some error
509:53 - message and once we have this one in
509:55 - place now we can remove it and not only
509:58 - we'll be able to catch the error but
510:00 - also if for some reason we add type and
510:04 - we dispatch it there's going to be a
510:06 - super helpful error in the console which
510:09 - right away will lead back to the counter
510:11 - reducer all right and up next let's see
510:14 - how we can fetch data in react with
510:16 - typescript and we'll actually look at
510:18 - two options the good old use effect and
510:21 - fetch API and my current favorite one
510:24 - the react query with axio
510:26 - please keep in mind that this section
510:28 - will only make sense if you watch the
510:31 - fetch data fundamentals part since I'm
510:33 - not going to repeat things like Zod
510:36 - setup and the actual need for types just
510:38 - like in the previous examples we're
510:40 - going to start in the app TSX where
510:42 - we're looking for component and more
510:44 - specifically the star and then 08 fetch
510:48 - data and then if we take a look at the
510:50 - browser this is what we should see we'll
510:52 - also use the same URL like in
510:55 - fundamentals so basically will fetch the
510:57 - same doors from my server and therefore
511:01 - I suggest just navigating to read me
511:03 - you're looking for 08 fetch data and
511:06 - just grab these two lines of code so
511:09 - we'll utilize these hooks in a second
511:12 - and then also here's the URL we're going
511:14 - to use so grab it over here then we're
511:18 - going to navigate back and I guess let's
511:21 - just start setting up the state values
511:23 - now eventually we'll set up the tors
511:26 - but at the end of this video I'll show
511:28 - you why we're not doing that right now
511:30 - why essentially we need a type first and
511:33 - then let's set up two more State values
511:34 - we're going to have one for is
511:37 - loading and then also set is loading so
511:40 - this is going to be true while we're
511:43 - fetching we're going to go with use
511:45 - State and we can provide angle brackets
511:47 - here it's definitely an option or we can
511:50 - just type over here the default value
511:52 - and then typescript is going to be super
511:54 - smart and it's going to figure out that
511:56 - essentially this will be a Boolean so I
511:59 - guess let's just go with that one and as
512:01 - far as my default value it will be set
512:03 - equal to false then we also want to go
512:05 - with is error and we're going to set it
512:08 - to set is
512:11 - error so that will be our set function
512:14 - and here we're going to provide the
512:16 - angle brackets and there's going to be a
512:19 - union type so either it's going to be a
512:21 - string so if there's error I'm actually
512:24 - going to use the error message or or it
512:26 - will be null and null will be my default
512:29 - value so I'll just provide null over
512:31 - here then the good old use effect and we
512:34 - want to set up the fetch function inside
512:37 - of it so let's go with our use effect
512:39 - let's provide the Callback function
512:41 - we're just going to invoke it when the
512:43 - component mounts and inside of it let's
512:46 - set up our fetch data which will be my
512:50 - the same function so fetch data and
512:54 - let's set it equal to a
512:57 - sync and as far as the functionality
512:59 - since it's a sync we want to nicely wrap
513:02 - everything in the try and catch and also
513:06 - we want to start by setting is loading
513:08 - is true so while we're fetching we'll
513:11 - set it equal to true and then at the end
513:13 - we'll set it essentially equal to false
513:16 - and you know what actually in here let's
513:18 - go with finally so here we'll just set
513:21 - it set is loading and equal to false so
513:25 - whether we're getting the error or we're
513:27 - successful doesn't really matter at the
513:29 - end of the day we'll always set it back
513:31 - to false now in the tri block this is
513:35 - where we want to construct our fetch
513:38 - which again we can right away start
513:40 - using because we have access to it so
513:42 - we're going to go here with await fetch
513:45 - then we provide the URL then fetch API
513:48 - has that Quirk where effectively we do
513:51 - want to catch the 404 errors as well so
513:54 - I'm just going to check for that okay
513:56 - properly so if I have some kind of error
513:59 - I actually want to throw it over here so
514:00 - throw new error which of course will
514:04 - right away lead to a catch block and
514:07 - then as far as the message I'm just
514:09 - going to say failed to fetch doers and
514:13 - after this condition I want to set up my
514:16 - raw data since eventually we'll set up
514:19 - Zod as well and for now let's just go to
514:22 - response.
514:23 - Json and then let's log this data so
514:27 - we're not going to set anything in the
514:29 - state and when it comes to a catch let's
514:32 - again construct that message so we're
514:34 - going to go with message and this one is
514:36 - equal to error and we're going to check
514:39 - whether error is the instance off and
514:43 - error and if that's the case then we're
514:46 - going to go with error and
514:48 - message or there was an error so
514:51 - something generic and we also want to go
514:54 - here with set is eror and we want to
514:58 - provide our message so that should do it
515:01 - we just want to invoke it over here and
515:06 - we want to set up three returns so at
515:08 - the moment we have one so basically this
515:11 - is our standard return and now let's
515:14 - check for loading let's check for is
515:17 - error and then let's see whether we
515:19 - actually are getting data and then we'll
515:21 - discuss why we want to set up the tours
515:24 - in the following video so let's start
515:26 - over here we're going to go with if and
515:28 - then is loading okay good and then we're
515:33 - going to go with heading three loading
515:36 - and then d da D okay good then we also
515:40 - want to do the same thing pretty much
515:41 - for
515:42 - error so now we're checking for this
515:45 - value and we're going to go with error
515:48 - and actually we can display the message
515:52 - as well just in case there is any so I'm
515:55 - going to go with error and let's access
515:58 - the error
515:59 - message is error and then I'll just
516:02 - leave this one for now So eventually
516:04 - we'll iterate over that doors so now let
516:06 - me navigate to the browser again if
516:09 - everything is correct we should see
516:11 - those doors and I can see the array of
516:13 - Five Doors so that works should also
516:16 - have that loading for a split second and
516:18 - let's say if we're going to mess with
516:20 - the URL if I'm going
516:23 - to provide the wrong URL notice now I
516:26 - have actually error failed to fetch T
516:29 - and now again let's reiterate why do we
516:32 - need a type so let's try to set up do
516:36 - state value at the moment we don't have
516:38 - the type so essentially we'll just
516:40 - provide Mt then let's try to set it over
516:44 - here in the fetch data and then let's
516:46 - iterate over and see where the issue is
516:49 - going to be so for STS we want to go
516:51 - over here with const tours set tours
516:55 - okay beautiful then we want to go with
516:57 - use State and remember if we're just
516:59 - going to provide over here Mt aray which
517:02 - will be default value notice now T is
517:05 - actually set equal to never which means
517:09 - that yeah I can go over here and I can
517:12 - go with set tours I can provide broad a
517:16 - okay beautiful everything is awesome and
517:19 - then let's say right after the react
517:22 - typescript we're going to go with doors
517:25 - then map so we're iterating over and
517:29 - then as far as the function well let's
517:31 - access the tour correct okay good and
517:34 - then we're going to go with some kind of
517:36 - heading two we provide hello we can even
517:39 - see those hellos in the browser okay
517:41 - beautiful but what if we're going to try
517:44 - something like this let's say I want to
517:47 - access one of the properties I'm going
517:48 - to go with the name one so now if we go
517:51 - here and say tour and that name this is
517:55 - not going going to fly typescript is
517:56 - going to say well you cannot access the
518:00 - name property on type never and this is
518:03 - why we do again need to set up D type
518:06 - and in our case since we already know
518:08 - how to work with Zod and since we're
518:11 - going to use Zod
518:14 - to evaluate our data at run time anyway
518:17 - this is going to be our approach okay so
518:20 - now let's set up our type and we'll do
518:23 - that with the help of Zod Library since
518:26 - that way we can also check the data at
518:29 - runtime and this is totally up to you
518:31 - you can set up the file name utls or
518:35 - something along those lines I think in
518:37 - my case I'm just going to go with types
518:39 - now as a side note also in this file we
518:42 - will set up a fetch
518:44 - function with the axio so that is coming
518:47 - up so basically we'll just Jam bunch of
518:50 - the things normally in the bigger
518:52 - project you would separate them but I
518:54 - don't think there is any need so we're
518:55 - looking for Zod Library which again is
518:57 - already installed if you're using the
518:59 - star if not then just please install the
519:02 - library then let's construct that door
519:05 - schema which will also then infer to be
519:09 - our door so let's export that since we
519:12 - also want to use that one in the inex so
519:15 - we'll go with export then con store and
519:19 - then we're looking for schema over here
519:22 - so this one will be equal to Z do object
519:25 - so this is what we're
519:27 - constructing and I believe I had five
519:30 - properties in there so all of them were
519:32 - string that's for sure so we're going to
519:35 - go over here then let's copy and paste
519:38 - and I believe it's one too many by the
519:39 - way so let me remove this one and then
519:42 - we have one for name also we want to set
519:46 - up over here image then same deal info
519:51 - and at the very end we'll have the price
519:54 - one I'm missing comma
519:57 - so let me do that as well and now let's
520:00 - construct our type this is something
520:04 - also we're going to export so let's go
520:06 - here with export type and then tour and
520:08 - that is equal to Z infer so now we just
520:12 - infer a type which is a generic and
520:15 - we're just going to go type off and then
520:17 - to our schema so now we have both we
520:20 - have our schema and we also have our
520:24 - type so now let's navigate back over
520:26 - here and we want to import both of those
520:28 - things we want to grab the tour as well
520:32 - as the tour
520:33 - schema so let me set her up I think I'm
520:36 - going to type over here type tour just
520:40 - to make it more explicit what we're
520:43 - doing so we want to grab the scheme as
520:45 - well and then this one is coming from
520:48 - the types let's save this and now let's
520:52 - just start using the type and I guess
520:56 - right away also the tour schema so here
520:59 - where I have the hug state for tours I
521:02 - actually want to go with tour and the
521:04 - array so essentially I'm telling
521:06 - typescript that yeah this is an array
521:10 - but eventually it will be an array off
521:13 - TOS then we're going to keep on moving
521:16 - and where we have the raw data same deal
521:18 - I'm going to go a tour and I'll set it
521:21 - as an array then we actually want to run
521:25 - right now our tour schema remember there
521:28 - is an array method and again I want to
521:31 - save pars it so essentially I want to
521:33 - throw the a myself and it's going to be
521:36 - nicely caught over here so for now I
521:40 - think I can remove both of these ones
521:41 - over here we won't use them and
521:44 - essentially we want to get that result
521:46 - so let's go to the result then T schema
521:50 - array let's invoke this and then we're
521:53 - going to go save bars and and we're
521:55 - looking for raw data and then as far as
521:58 - the result remember we're checking for
522:01 - the success
522:02 - property and essentially if the data is
522:06 - not present then we're just going to
522:08 - throw the error so we're going to go if
522:10 - and
522:12 - result
522:13 - success that's not the case then I mean
522:17 - you know what I can actually log it so
522:19 - let's go the
522:20 - result error and message over here and
522:25 - also we want to throw our own error so
522:28 - let's go throw new error and again let's
522:31 - do the same thing we'll go with failed
522:34 - to
522:35 - parse and tours and then at the very
522:38 - very end we want to go here with set
522:41 - tours and we want to pass in result.
522:44 - data so if we're successful if we bypass
522:48 - this condition pretty much we're good to
522:50 - go and I think at this point essentially
522:54 - we can just navigate to to our return
522:56 - and we can just set up the proper return
523:00 - so in here let's go with the heading two
523:03 - I'm going to add some class so I'm going
523:06 - to go with margin bottom and set it
523:07 - equal to one then we're going to go here
523:10 - with doors okay and then let's iterate
523:14 - over so we have tours over here we want
523:17 - to call the map and now once I type the
523:20 - tour it will nicely be my object
523:25 - everything starting with ID all the way
523:27 - to a price and again this is something
523:30 - that doesn't stop to amaze me so we're
523:32 - going to go over here with return then
523:34 - we want to set up the paragraph again
523:36 - we're not going to really work on
523:40 - Amazing result in the browser for now we
523:42 - just want to grab the T ID we want to
523:44 - add some classes over here so class name
523:47 - and let's go with another margin bottom
523:48 - one and then let's access the door Dot
523:53 - and we're looking for the name and again
523:55 - if everything is correct this is what we
523:57 - should see in the browser yep everything
524:00 - is awesome and if we go over here to the
524:05 - types and let's say I'm going to add a
524:08 - property I'm going to say that I'm
524:10 - looking for something and that will be a
524:13 - string and let's invoke that check it
524:15 - out first I have over here a error
524:19 - message in the console and we can also
524:21 - see that over here now million doll
524:24 - question do you always need to add Zod
524:27 - when you're fetching data and to tell
524:30 - honestly most likely that's not
524:32 - something that you're going to see that
524:33 - often for the most part you're just
524:35 - going to rely on the fact that yeah the
524:37 - API is supposed to return some kind of
524:40 - type but it does come in handy when you
524:43 - definitely definitely want to check for
524:45 - that particular value so this is how we
524:48 - can essentially Fetch with react and
524:51 - typescript with the good old use effect
524:54 - and fetch API and now let's see how we
524:57 - can accomplish the same thing with less
525:00 - lines of code and essentially no
525:02 - headache and we're going to do that with
525:04 - the help of axios and react query and if
525:08 - you're not familiar with either of these
525:10 - libraries please utilize the library
525:13 - docs or some other online resource since
525:16 - our main focus is going to be on
525:19 - typescript and I actually want to start
525:21 - by constructing fetch tours with
525:25 - axios again normally you would set this
525:29 - up in a separate file but in this case
525:32 - I'm just going to do it right here in
525:34 - the types where I want to install or you
525:37 - know what actually it's already
525:39 - available in the starter we simply want
525:41 - to import the axios from axio library
525:45 - which is an awesome HTTP library and
525:50 - effectively we want to construct right
525:52 - now the fetch doors and you know what I
525:54 - also so I'm going to grab right away
525:56 - this URL and I'll actually remove it
525:58 - from the file since we'll set up use
526:01 - Query over here as a side note as always
526:04 - you can find
526:06 - the code from previous lessons in the
526:09 - read me so let me go over here this is
526:11 - going to be my URL and essentially we
526:14 - want to go with export const fetch doors
526:20 - it will be a sync and as far as what
526:23 - we're returning since it's a sync
526:25 - function we want to go with promise and
526:28 - then we'll set up our tour array and
526:32 - then when it comes to functionality we
526:34 - want to use axos and we want to stick a
526:37 - weight in front of it so let's go with
526:39 - const
526:41 - response and that is equal to a
526:44 - wait then axos doget remember this is
526:48 - actually a generic and therefore in here
526:52 - we pass in door and array so an array of
526:56 - doors and effectively in this response
526:59 - inside of the data property we'll get
527:02 - back our array but it will be nicely
527:06 - already set as type array off doors
527:10 - hopefully that is clear and we actually
527:12 - did cover that during the tutorial part
527:16 - now let me double check over here it
527:18 - looks like I have a syntax bug yep now
527:22 - everything's correct so we have response
527:24 - beautiful
527:25 - then we'll do the same thing like in the
527:28 - previous video where essentially I just
527:31 - want to check using Zod and since it's
527:34 - pretty much the same code let me again
527:37 - just take it out and set it up over here
527:40 - so we still use the result to or schema
527:42 - in this case we're not passing a raw
527:45 - data we actually go with response. data
527:48 - again that's where the array is going to
527:50 - be located and then from this function
527:53 - we want to return
527:56 - and we're looking for result. data so
528:00 - since we have multiple libraries yes
528:02 - we're pretty much passing this array
528:04 - from one to another so first we use
528:07 - axios and again just to demonstrate that
528:10 - basically if we go over here with type
528:13 - definition you'll notice somewhere here
528:15 - get see over here it's a generic and
528:19 - essentially it has this axio response
528:21 - and then if you take a look at the xos
528:23 - response one
528:25 - notice this data it's a generic type
528:27 - correct so whatever we pass in this is
528:30 - what we're going to get back and once we
528:33 - have this function in place now let's
528:34 - navigate I guess actually to the main
528:38 - DSX because we want to wrap everything
528:41 - in the query client provider so we want
528:44 - to install react query Library you can
528:47 - also install Dev tools they have as some
528:50 - Dev tools but in this case we're not
528:52 - going to do that and in here we want
528:54 - import the query client as well as query
528:58 - client provider first we want to set up
529:01 - a new
529:02 - instance like
529:04 - so and as a sign not something I want to
529:07 - mention react query is actually very
529:09 - good at inferring the types so as far as
529:13 - types is concerned we actually don't
529:16 - need to do much as long as we set up a
529:19 - proper return type here in the function
529:21 - basically what we are returning pretty
529:23 - much we're good to go
529:25 - so in here we want to go with new query
529:27 - client let's invoke this and then we
529:30 - want to wrap our app inside of the
529:34 - render so let me set up my query client
529:37 - provider we're looking for client that's
529:40 - the prop and we'll set it equal to a
529:43 - query client then let's wrap the app and
529:47 - now let's navigate to index DSX and like
529:50 - I said I'll pretty much start everything
529:53 - from scratch and if you want
529:55 - the code from the previous lesson please
529:58 - just utilize the read me in here we're
530:00 - looking for fetch dos a function we just
530:04 - set up it's actually located in the
530:06 - types okay and we also want to grab this
530:09 - hook which we get from react query
530:12 - called EU query again this is coming
530:16 - from and in this case we have this stand
530:19 - stack and react query so we have both of
530:23 - these Imports now let's set up our our
530:26 - component and let's also set up the
530:29 - export since I know that I'm going to
530:31 - forget to do that let's export the
530:34 - component as default and for starters
530:37 - let's invoke use Query so we're going to
530:40 - get bunch of the things back and we want
530:43 - to set it equal to use Query so notice
530:45 - we don't need to set up our loading
530:47 - error or any of that stuff and I'm not
530:50 - even talking about the use effect
530:52 - essentially we just invoke the use Query
530:54 - and and we're good to go it's looking
530:56 - for two things it's looking for a query
530:59 - key since we'll nicely be able to
531:02 - invalidate those queries later something
531:05 - we're not going to do but just telling
531:07 - you it is an option so essentially you
531:09 - just provide some kind of string over
531:11 - here so now this
531:13 - query we will reference with the name of
531:16 - doors just in case we ever want to do
531:19 - something with the query like for
531:21 - example invalidate and also we want to
531:24 - set up a query function now this query
531:26 - function has one rule and one rule only
531:29 - it needs to return a promise that's it
531:32 - that's all we need to do now if we
531:33 - navigate to types what is this function
531:35 - doing it's a sync what does that return
531:38 - it returns a promise and like I said
531:41 - react quer is awesome at inferring the
531:43 - type so if we set up properly over here
531:46 - that I'm going to be returning an array
531:49 - of Tours react query is going to figure
531:52 - that out so in here since I'm not not
531:54 - passing anything in Fetch dos any kind
531:57 - of argument I simply can set up the
532:00 - reference now what are we getting back
532:03 - over here we get back is pending so this
532:06 - is while we're loading we get back is
532:08 - error if there is any we also get the
532:11 - actual error object just in case we want
532:13 - to get the message and just like axios
532:16 - in here we have this data one and inside
532:20 - of that data we'll have that array of
532:22 - Tours now since I want to use pretty
532:24 - much the same name I'm just going to
532:26 - give it an alas of Tours okay good and
532:30 - with this in place now let's set up our
532:32 - return so one by one uh first we're
532:35 - going to go with is spending so check
532:38 - that one if that's the case again same
532:41 - deal we're going to go with heading two
532:43 - or heading three and we'll go with
532:45 - loading then we're going to go with is
532:48 - error so if we have the error actually I
532:51 - do want to
532:53 - access the error message so let's go
532:56 - here with error and we'll set it equal
532:59 - to error object and in there we have a
533:02 - message property and now let's iterate
533:04 - over the tours and same deal essentially
533:07 - we just want to showcase the tour name
533:09 - in some kind of paragraph so let me set
533:12 - up the return we're looking for div
533:16 - inside of the div we're going to go with
533:17 - heading two let's add a class name
533:21 - margin bottom set it equal to one that
533:23 - will be equal to
533:25 - tours and then we want to iterate over
533:28 - so let's call
533:29 - map then each and every tour okay good
533:33 - and then we want to return from the
533:36 - function and I'm going to go with my
533:38 - paragraph let's add a class name of
533:41 - margin bottom one and also let's add a
533:43 - key and we'll set it equal to tour and
533:46 - then ID and then inside of it let's
533:50 - render the door. name and if everything
533:54 - is correct again the result is going to
533:57 - be the same but like I said way less
534:00 - headache way less State
534:02 - values and pretty much everything is
534:05 - already inferred so we only need to set
534:10 - up a use Query we only need to set up
534:13 - fetch doors and pretty much we're good
534:15 - to go okay and now let's cover Redux
534:18 - toolkit setup which is a good option if
534:21 - you have a global State as side note if
534:25 - you're not a fan of Redux
534:27 - toit a Nifty alternative is Library
534:30 - called zustand I believe that's how it's
534:34 - pronounced which offers pretty much the
534:36 - same functionality but with less
534:39 - overhand and the code is also less
534:42 - clunky I have to admit but since at
534:45 - least at this point in time you will
534:46 - encounter Redux to K it more often I
534:50 - settled on rtk as far as typescript
534:55 - Redux toolkit just like react query also
534:59 - nicely infers bunch of the things so
535:02 - it's actually less work than for example
535:05 - use reducer but I'm not going to lie the
535:08 - setup so the initial setup to add Redux
535:13 - toolkit to our application with
535:15 - typescript is somewhat of a pain now the
535:19 - good news it's a boilerplate setup so we
535:22 - can take it from Project to project so
535:25 - most likely you'll only need to write it
535:28 - once and in fact we will do a setup in
535:31 - the following video so for now we'll
535:34 - just prepare everything we'll actually
535:36 - create our first slice and then in the
535:38 - following video we'll complete the
535:41 - boiler plate setup for Nots we want to
535:44 - go to app DSX we're looking for starter
535:48 - rtk the component if everything is
535:50 - correct this is what we should see on
535:52 - the screen and since we're shooting for
535:55 - the same functionality as in use reducer
535:59 - I suggest navigating to read me and just
536:03 - grab this code so again this is just
536:05 - going to set up some buttons
536:08 - which we will use later to control our
536:11 - state values so grab
536:14 - everything in here as far as the
536:17 - component is concerned you want to
536:18 - navigate back over
536:20 - here paste it and again you should have
536:24 - five buttons and pretty much every time
536:26 - you click on a button there's going to
536:28 - be some kind of console log and then we
536:31 - want to set up a slice now slice in
536:35 - Redux tokit essentially is just a piece
536:37 - of functionality so let's say in your
536:40 - application you're handling the user so
536:43 - the log out login whatever all kinds of
536:45 - things well you'll set that one up in a
536:47 - slice let's say you have a theme you'll
536:50 - create a slice for that and hopefully
536:52 - you see where I'm going with this now in
536:54 - our case we'll just dump everything in
536:56 - one so I'll say cter slice and we're
537:00 - looking for TS since we're not creating
537:03 - a react component then we want to import
537:06 - two things so create slice is going to
537:10 - create that slice for us it's a function
537:11 - coming from Redux toolkit and second one
537:14 - will be payload action which actually is
537:16 - a type and this is something we're going
537:18 - to use towards the end of the video so
537:21 - now let's go with create and Slash
537:24 - okay that's what we want to import over
537:28 - here good then let's also grab that
537:32 - payload but this is actually a type so
537:36 - payload action and yep it's coming from
537:38 - Redux toket beautiful now we will set up
537:41 - some types in a second let's start by
537:44 - creating that
537:45 - slice so counter
537:48 - slice and this will be equal to create
537:51 - slice and second will provide some
537:54 - values before I forget I do right away
537:57 - want to export and actually we export
538:01 - the reducer function so we go here with
538:04 - default counter slice and then dot
538:07 - reducer so this is something we're going
538:09 - to use when we set up the store so think
538:12 - of store as pretty much your entire
538:15 - State and then the slice well this will
538:18 - be that one functionality again in our
538:20 - case pretty much that will be the only
538:22 - functionality but in bigger applications
538:25 - this is where you'll set this one thing
538:29 - and as far as the crate slice it's
538:31 - looking for a few things it needs to
538:33 - have the initial State and we'll also
538:36 - right away set up those reducers so you
538:38 - know what let's just start setting
538:40 - everything up if you remember when it
538:43 - comes to the state we have count and
538:47 - Status over there and then it will be
538:50 - our initial State and this is something
538:52 - that we're going to provide over here
538:54 - here in the create slice so let's start
538:56 - here const
538:58 - initial state for now I'm not going to
539:02 - set the type I'm just going to say that
539:04 - count is equal to zero and then status
539:07 - will be pending and remember we'll just
539:10 - control it from active to inactive I
539:14 - believe then inside of the create slice
539:17 - we want to come up with the name and
539:20 - essentially I'm going to call this
539:21 - counter and then also we want to go with
539:24 - our initial state in a second we'll set
539:27 - up the reducers which control it but
539:29 - before we do that well why don't we just
539:32 - knock out those types over here so first
539:34 - let's set up a type for the counter
539:36 - state so type counter and state and in
539:41 - here count will be equal to a number and
539:44 - then when it comes to status I'll
539:47 - actually set up the literal type because
539:50 - we'll use it later to provide a proper
539:54 - type to payload action so we might as
539:56 - well set it up separately so let's set
539:59 - up a status but instead of setting up as
540:02 - a string I'll actually create another
540:04 - type I'll call this counter status so
540:08 - this is essentially something we control
540:10 - when we add that payload over here now
540:13 - when it comes to a counter we'll press
540:15 - these buttons over here without the
540:17 - payload and as far as the literal values
540:20 - well we're going to go over here with
540:23 - active
540:24 - inactive and let's also add the bending
540:27 - one and once I have this one in place
540:30 - status actually is going to be equal to
540:32 - a counter status so now where I have the
540:35 - initial state I'm going to go with my
540:39 - counter State and then we want to set up
540:43 - those reducers so reducers are going to
540:46 - be functions which essentially control D
540:49 - State and then in order to invoke those
540:52 - functions we'll need to display patch
540:54 - them and again remember when it comes to
540:57 - actual count the number the only thing
541:00 - we need is whether we want to increase
541:03 - decrease or reset but when it comes to
541:06 - set status this is where we actually
541:08 - pass in the payload now the good news
541:10 - with Redux toit effectively if we're
541:13 - just controlling this one value we don't
541:15 - even need to provide D type and you'll
541:17 - see what I'm talking about in a second
541:19 - so we want to go with reducers it's an
541:21 - object and then one by one let's up and
541:24 - pretty much I just come up with a
541:26 - function name so for example in this
541:28 - case increment I right away have access
541:30 - to a state and as side not yes redex to
541:34 - it nicely inverse all of the values that
541:37 - we need over here and then yes we can
541:39 - essentially just overwrite so I can just
541:41 - go with count plus and equals to one so
541:45 - notice I don't need to provide my type
541:48 - since I'm not providing any payload
541:50 - that's it I only want to set up this
541:52 - function over here and we will export it
541:54 - in a second and eventually we will
541:56 - dispatch it hopefully that is clear then
541:59 - we want to go with uh decrement I
542:02 - guess let's go with State same
542:06 - deal we want to go with State count and
542:09 - in this case we'll subtract and then
542:13 - when it comes to
542:15 - reset we just want to access the state
542:18 - okay good and then set the state count
542:22 - equals to zero as then note if you're
542:24 - wondering why we can just modify the
542:27 - state like that why don't we need to
542:29 - return state from this function it's
542:32 - because under the hood essentially Redux
542:34 - is using a library which does that for
542:37 - us so that's why we can actually kind of
542:40 - modify the state directly in here under
542:43 - the hood yeah we're still getting the
542:45 - latest value don't worry and then we
542:47 - have the St status which essentially is
542:50 - going to have two things not
542:52 - only we'll need access to a state but
542:55 - this is the case where we will provide
542:57 - eay load so effectively when we dispatch
542:59 - set status we will provide that string
543:02 - value and the string value is actually
543:05 - one of these ones so either active
543:07 - inactive or it's going to be pending and
543:10 - when we use a Redux stol kit we do have
543:14 - this special type which we need to use
543:16 - so it's called payload and for some
543:19 - reason not using so payload action not
543:23 - sure why I'm not able to access that so
543:28 - payload
543:30 - action and it is a generic over
543:34 - here and then inside of the generic we
543:39 - want to pass in our own type so
543:41 - basically we need to provide over here
543:43 - this counter State now I do have over
543:46 - here a syntax error and now as you can
543:48 - see everything works so if you have the
543:51 - action yes you'll need to provide this
543:53 - payload action which again is a generic
543:58 - and then in here you'll provide the type
544:00 - so in this case it's somewhat
544:01 - straightforward we just have a string
544:03 - but keep in mind yes if you have let's
544:06 - say an object with a bunch of properties
544:08 - you'll have to set up the type and
544:10 - provide it over here so typescript knows
544:14 - what do you want to do essentially when
544:15 - you pass in that payload and same deal
544:18 - we want to go with state. status and
544:20 - that will be equal to action payload
544:23 - since that's where we have the string
544:25 - now it looks like I have a bug my
544:27 - apologies by mistake I provided the
544:30 - counter state it should be
544:32 - counter status my apologies now
544:35 - everything's correct I don't have any
544:37 - bugs and also we want to export the
544:41 - increment decrement all the way to set
544:44 - status so we won't need to provide in
544:48 - our component let's say a type when we
544:50 - dispatch we simply can pass in our
544:53 - action and we'll be good to go so we go
544:55 - here with export const and then we
544:58 - should have access to all of our
545:00 - functions so increment decrement reset
545:04 - and then set status and that one will be
545:07 - equal to counter slice and then we're
545:10 - looking for actions this should do it
545:13 - for the slice setup and in the following
545:15 - video we'll do that somewhat annoying
545:19 - boiler plate setup where we'll add the
545:22 - Redux tokit to our application okay and
545:25 - now let's take a look at that
545:26 - boilerplate setup where effectively we
545:29 - want to create two files we want to
545:31 - create store DS as well as the Haw DS
545:35 - and as a side not if you're using the
545:37 - starter you should have already those
545:40 - files now there shouldn't be any code in
545:43 - them but you should have the files and
545:45 - store is where we set up all our slices
545:48 - so we create that Global store and hooks
545:51 - is a special one because we're using
545:52 - typescript and you'll see what we need
545:55 - to do over there in a second so first
545:57 - let's start with the store we want to
545:59 - import configure store this is coming
546:02 - from Redux tokit and also we want to
546:05 - grab counter
546:08 - reducer now this one is coming from our
546:11 - slice the counter slice and I need to
546:15 - make sure that it's coming from the
546:16 - start so let me go over here with the
546:19 - reducer from and let me look for
546:24 - star then the rtk and then I want to get
546:28 - the counter slice let me just double
546:30 - check yep I'm exporting so everything is
546:33 - correct and then back in a store we want
546:36 - to invoke configure store so we want to
546:38 - go here with export con store since
546:41 - we'll wrap our entire application in the
546:43 - store and inside of this function we
546:46 - have a reducer property and essentially
546:50 - this is where we set up our slices so in
546:53 - our case again we have only one so I'm
546:55 - going to go with counter is equal to
546:58 - counter reducer since we're using
547:00 - typescript we need to set up two more
547:02 - types so export type and again in the
547:05 - docs they use this root State they set
547:08 - it equal to return type and inside of
547:12 - this one they go type off and then store
547:16 - and get state so this is what they pass
547:19 - into this generic and the second type
547:22 - when you want to set up over here is
547:24 - export type app and dis
547:29 - patch and this one will be equal to type
547:32 - off and store this patch so once we have
547:37 - these two types in place we want to
547:39 - navigate to The Hook one and essentially
547:42 - we want to grab use dispatch and use
547:43 - selector so those are the two hooks we
547:47 - use with Redux toit one is to access the
547:51 - store and second one is to dispatch an
547:53 - action
547:54 - and we want to create our own and you'll
547:56 - see what that entails in a second so
548:00 - let's first grab use this patch again
548:03 - this is coming from react Redux so this
548:06 - is what I was talking about the annoying
548:08 - boiler plate setup but again you only
548:10 - need to realistically do it once so then
548:14 - import this is actually a type and we're
548:16 - looking for typed
548:19 - use selector hook so this is coming from
548:22 - react Redux and also we want to grab
548:26 - that root State and app dispatch the
548:29 - types we just set up so let's go here
548:31 - with root and state somewhere yep that's
548:36 - the one and I also want to grab the
548:38 - dispatch okay we have both of these so
548:41 - now let's set up both of those hooks so
548:43 - we're looking for export const
548:47 - use and the name is totally up to you
548:50 - just make sure that it starts with use
548:54 - that's just a rule for react talks and
548:57 - in this case we'll actually go with the
549:00 - function and we're going to go with app
549:03 - dispatch and we'll set it equal to use
549:07 - dispatch so it's going to suggest this
549:09 - use app dispatch that's not what you
549:11 - want to use you want to go with use
549:14 - dispatch which is actually the second
549:15 - one and then let's also set up the use
549:18 - app selector which also we're going to
549:21 - export so we go here with use
549:24 - app selector and in this case we just go
549:28 - with type selector hook we provide the
549:31 - root
549:34 - state or type that we have in a store
549:37 - and we'll set it equal to use selector
549:41 - here let's save it and now the last step
549:44 - is going to be in the main DSX where we
549:48 - want to import the entire
549:50 - store from store file and and we want to
549:53 - wrap it in the provider component which
549:57 - is coming from react Redux library now
549:59 - this provider component is looking for
550:01 - store prop and as far as the value we'll
550:04 - pass in our store so let's go here with
550:07 - provider then
550:09 - store set it equal to our
550:12 - store then let's wrap it and with this
550:15 - in place we have successfully added redu
550:17 - toit to our application and in following
550:20 - video we'll complete the functionality
550:23 - okay so now let's navigate to 09 rtk
550:27 - index DSX and we want to import few
550:31 - things first we'll grab those hooks so
550:34 - instead of use dispatch and use selector
550:38 - we're going to go with use app selector
550:41 - use app selector and we also want to
550:43 - grab use app dispatch and then also
550:48 - let's grab those actions from our slice
550:51 - so I'm talking about decrement increment
550:53 - reset and set status so let's grab also
550:57 - this one this is coming from the counter
551:00 - slice good then we have increment then
551:03 - we have
551:05 - reset and then we also have set status
551:09 - all of that is coming from the counter
551:10 - slice now in order to access the state
551:14 - values we want to go with the use app
551:17 - selector so that's the hook and
551:20 - essentially by default it right away has
551:23 - access to the entire state so I'm
551:26 - talking about this one over here more
551:28 - specifically we're looking for the
551:30 - counter so we're going to go over here
551:33 - and we're going to say State and as I
551:36 - not I do need to pass here function and
551:39 - then from the state we want to access
551:41 - the counter so this will be our tiny
551:44 - slice for the counter and we can nicely
551:47 - right away the structure two things what
551:50 - do we have in a state we have the count
551:52 - as as well as the status so those are
551:55 - the two things that I want to access so
551:57 - now where I have the count I'll actually
551:59 - change it around and I'll set it equal
552:02 - to count and as far as the
552:05 - status same deal over here now just to
552:08 - keep it more interesting I'll actually
552:11 - navigate back to my counter slice and
552:13 - let's say set up my initial value to be
552:16 - equal to 15 so now I can clearly see
552:18 - that I have access to the counter as
552:21 - well as my status one so now we just
552:24 - want to navigate back and we also want
552:27 - to invoke the use app dispatch which is
552:29 - going to return a dispatch function we
552:32 - can invoke so let's go here with cons
552:36 - dispatch set it equal to use app
552:40 - dispatch and then where we increment
552:43 - decrement and reset we'll just invoke
552:47 - these functions and then when it comes
552:48 - to set status remember we also need to
552:51 - pass in the payload so it's going to be
552:55 - a little bit more code so we want to go
552:57 - here with this patch and we just want to
553:00 - invoke the increment same deal is going
553:04 - to be for decrement and
553:05 - reset so I'm pretty sure I can just copy
553:08 - and paste so we're looking for decrement
553:12 - over here and then lastly we have one
553:14 - for reset as well so let me override
553:18 - this one that should do it notice now
553:21 - we're actually changing the count value
553:25 - and when it comes to set
553:27 - status it's pretty much the same we just
553:31 - want to actually pass in the string
553:34 - value whether that's active inactive or
553:37 - pending so let's go here with dispatch
553:41 - set status and again we'll get a nice
553:44 - suggestion so these are the values that
553:46 - we can pass in so it's kind of hard to
553:49 - mess up so let me copy this set it up
553:53 - over here and instead of active we're
553:56 - going to pass in inactive so now let me
554:00 - navigate quickly to browser and it looks
554:03 - like everything is working as expected
554:06 - and with this in place we have
554:08 - successfully added Redux toolkit to our
554:12 - application all right and up next let's
554:14 - build a small tasks application before
554:17 - we start coding away let me just mention
554:20 - that if you enjoy the challenge and want
554:23 - to build this project independently in
554:26 - the readme you will find a list of steps
554:29 - to build such app so if this is
554:32 - something you're interested in pause the
554:34 - video complete the steps independently
554:38 - and resume once you're ready to compare
554:40 - the results as far as the app it's
554:42 - actually very similar to the app we
554:44 - already built at the end of the
554:46 - fundamental
554:48 - section essentially we will create a
554:50 - form and a list of tasks and if the user
554:54 - provides a valid input we'll add a task
554:56 - to the list and with the help of the
554:58 - checkbox user will be able to toggle
555:01 - whether the task is completed or not now
555:05 - we'll start just like the other examples
555:08 - where we want to navigate to app DSX and
555:11 - we want to grab our components so in
555:13 - this case we're looking
555:16 - for folder number 10 I believe right so
555:20 - we're looking
555:21 - for
555:23 - starter then forward slash and
555:27 - tasks so let me replace whatever I have
555:30 - in
555:31 - here let me set up the component yep I
555:34 - have task list so that is good and just
555:38 - like before since we're working with
555:40 - typescript one of the first things we'll
555:43 - do is to set up a type and since we'll
555:46 - use this type in multiple files it
555:49 - definitely makes sense to set up types
555:53 - yes and in this case there's going to be
555:56 - only one type which will be a task so we
555:59 - want to go with export type task and in
556:03 - here we have three properties ID which
556:06 - will be actually a string then a
556:09 - description which will also be a string
556:12 - and then is completed which will be a
556:15 - Boolean let's set it up and then we want
556:18 - to create two more components which will
556:20 - render in the index DSX so so we have a
556:24 - form component we set it up and also
556:29 - there's going to be a list one new file
556:33 - and we're looking for a list and then we
556:35 - want to create our component and with
556:38 - this in place now we want to navigate
556:40 - back to index and we want to import use
556:44 - effect use State as well as form and
556:46 - list and also the type so one by one
556:50 - let's set it up so use State then let's
556:53 - also grab use effect and then let's grab
556:57 - the form
556:59 - one list
557:01 - one and at the very end let's also grab
557:04 - that type so import explicitly I'm going
557:07 - to type task and then this is coming
557:10 - from the types now inside of this
557:13 - component essentially we want to start
557:16 - by setting up the state value so in here
557:19 - let's go with tasks set t tasks and this
557:24 - one will be equal to use State let's
557:28 - invoke this one and by default it's
557:30 - going to be an empty array but we do
557:32 - want to provide the generic over here
557:35 - and we'll say that it's going to be an
557:36 - array of tasks and when it comes to our
557:41 - return I think I'm going to replace the
557:44 - div with a section and in here let's
557:47 - type the form component first and we
557:50 - also want to display the list let's save
557:52 - it over here now for some reason I don't
557:56 - see anything looks like there's a bug so
558:00 - it complains that Forum doesn't provide
558:03 - the
558:04 - import this is strange oh yeah probably
558:08 - because I didn't save it my bad let me
558:10 - try one more time if everything is
558:12 - correct this is what we should see in a
558:13 - browser and with this impl now we can
558:16 - start working on the form functionality
558:19 - okay and when it comes to form
558:21 - essentially we want to set up the form
558:23 - element inside of it there's going to be
558:25 - an input and it's going to be a
558:27 - controlled input so there will be a
558:30 - state value as well and once we submit
558:32 - the form we want to prevent the default
558:35 - we want to check whether there is a
558:37 - value provided in the input if not then
558:41 - we will trigger the alert and if
558:43 - everything is correct We'll add task to
558:45 - the list something that's coming up and
558:49 - also we'll set text back to empty value
558:52 - I guess I'm going to start by setting up
558:54 - two Imports over here so we're looking
558:57 - for use State and also we want to grab
559:02 - that type because eventually we will use
559:04 - it not for now but let's go with type
559:07 - and task which is coming from our types
559:10 - and then let's start I guess by setting
559:13 - up that state value so we have text and
559:16 - set text and that one is equal to use
559:19 - State and we want to start with empty
559:22 - string eventually we'll set up the
559:24 - handle submit for now I just want to
559:26 - work on the return so we're going to
559:29 - return a form element We'll add some
559:32 - classes just so it looks a bit more
559:36 - representable and we're going to go with
559:38 - task form so again on submit is coming
559:42 - up let's not worry about it right now
559:44 - inside of the form we want to go with
559:45 - input type will be equal to a text class
559:49 - name is going to be form input
559:54 - and also we want to set up the value
559:56 - since this will be a controlled input
559:59 - and let's also set up the
560:01 - onchange I'm going to provide the inline
560:04 - function since I don't want to bother
560:07 - with the event type and we're just going
560:10 - to go with set text and we'll go with
560:13 - event. Target and value okay good and
560:17 - then we also want to set up the submit
560:20 - button so button then type is equal to
560:25 - submit and class name will be equal to a
560:28 - button and we're going to go with add
560:30 - task let's save it this is what we
560:33 - should see in the browser so now let's
560:35 - just navigate back and set up that and
560:37 - I'll submit so first let me I guess set
560:40 - up the function this is going to be
560:43 - essentially a repetition pretty much for
560:47 - stuff that we already covered during
560:48 - tutorial so we're going to go here with
560:50 - handle submit remember we do want to
560:53 - access the event but we do need to
560:55 - provide the type ourselves in this case
560:57 - so we're going to go with form event and
560:59 - we're looking for HTML and form element
561:04 - this is what we want to pass in and as
561:06 - far as the
561:07 - functionality first we're going to
561:09 - prevent a
561:10 - default so prevent default let's invoke
561:13 - that then we'll check for text so if no
561:17 - text provided then we'll go with alert
561:20 - and let's just go with please enter a
561:23 - task then we're going to return so we're
561:25 - not going to do anything and if
561:27 - everything is correct basically if we
561:30 - bypass this condition then we're going
561:32 - to go with that task and we'll go with
561:34 - set text and we'll set it equal to an
561:37 - empty string so now let's just look for
561:39 - the form we're looking for
561:42 - onsubmit and we'll set it equal to andle
561:45 - submit so let's see let's see let's see
561:48 - I think we can just log so instead of
561:51 - adding the task for now let's just see
561:55 - what is the text value whether we are
561:57 - successful let me type some nonsense
561:59 - here and looks like everything's correct
562:02 - so I get the value in the console and I
562:05 - also end up with an empty input now if
562:08 - I'll try to submit without providing any
562:11 - value then we'll get back the alert and
562:14 - with this in place now we can start
562:16 - working on the add task functionality
562:19 - all right and up next let's set up
562:21 - functionality to add task to the list
562:24 - now we can take multiple approaches
562:27 - essentially we can pass down set tasks
562:29 - to a form and let's say if the value is
562:32 - provided we can invoke set tasks it's
562:35 - definitely an option but in my case it's
562:38 - just a preference to set up everything
562:40 - in the parent component and therefore I
562:43 - will create another function and I'll
562:46 - call this add task now this function is
562:49 - looking for one thing and one thing only
562:51 - which is a task but remember we have a
562:55 - specific type for that so we want to go
562:57 - over here with the task now it doesn't
563:00 - return anything so we can just call here
563:02 - void and as far as the functionality
563:05 - inside of the function body we just want
563:08 - to go with set tasks we want to spread
563:11 - out all the existing tasks and then we
563:14 - want to add the new one so we'll go over
563:17 - here with tasks comma and then we will
563:20 - add the task which was Prov divided to
563:23 - add task we do want to pass this down so
563:26 - add task is equal to add task and if
563:30 - everything is correct we should get
563:32 - bunch of red squiggly lines somewhere in
563:35 - this case it's in the index DSX simply
563:38 - because we haven't set up form to accept
563:42 - any props so let's work on that we
563:45 - already have D type task so now let's
563:47 - set up our type here for the props I'm
563:51 - going to call this for props and in here
563:55 - I'm looking for add task function same
563:58 - deal it's looking for this argument the
564:00 - task one and it's actually type task and
564:04 - then when it comes to the return we're
564:08 - just going to go with void and then
564:10 - right after our condition I think I can
564:13 - remove that console log I don't think
564:15 - there's a point anymore we can just go
564:17 - with add task and essentially one by one
564:19 - let's provide those properties we have
564:22 - over here remember it has to be a string
564:25 - so I'm just going to go with date then
564:28 - I'm going to invoke get time method
564:32 - and eventually I'm just going to turn
564:35 - this into a string then I still have red
564:38 - squiggly line
564:40 - because I mean I actually haven't set up
564:44 - the props properly my bad what am I
564:46 - doing let me go here with add task and
564:49 - this is actually going to be equal to a
564:51 - form props
564:52 - and now we get the correct red squiggly
564:55 - lines where essentially we can see that
564:58 - few properties are missing so let's
565:00 - provide them we're going to go with
565:02 - description so this one will be equal to
565:04 - a text and also let's go with is
565:07 - completed which we will hardcode and set
565:10 - it equal to false now I don't have any
565:12 - red squiggly lines and once we navigate
565:15 - to the browser I'm actually going to
565:18 - open up the components just so I can
565:21 - see what we have as far as the state and
565:24 - now let me go with first task me invoke
565:28 - this and yep notice over here we are
565:31 - successfully adding this task to our
565:34 - list all right so we're pretty much done
565:36 - with the form I don't think we're going
565:38 - to work in that component anymore now we
565:41 - just want to render the list and also
565:45 - toggle the task remember it has that is
565:49 - completed property which is Boolean um
565:52 - and just like in the fundamentals
565:54 - project we just want to display some
565:56 - checkbox and then every time we will
565:59 - click on that checkbox then we'll toggle
566:02 - that value and actually before we
566:04 - render the list I do want to right away
566:07 - set up this function since we'll pass it
566:09 - down to a list
566:11 - component the functionality is super
566:15 - straightforward where we want to go
566:17 - toggle task now this function is looking
566:20 - for the ID so so therefore let's right
566:23 - away set up the inline type annotation
566:26 - and let's say that ID is actually going
566:29 - to be type string now as far as the
566:32 - actual functionality we want to go with
566:34 - set tasks and then remember when we
566:38 - invoke map we get back a new array so
566:41 - now I just want to iterate over the
566:43 - array and if the ID matches the task ID
566:47 - I want to set the task is completed to
566:50 - the opposite value now if it's not the
566:52 - case if they don't match then we just
566:54 - return task as it is so let's go with
566:57 - tasks map and yes as a sign not there
567:00 - are Million Ways How we can write this
567:03 - functionality I just went with this
567:05 - approach so we're going to go here with
567:07 - task then we'll check if task ID is
567:11 - equal to ID we're passing in then we
567:14 - want to
567:16 - return this task with a new is completed
567:20 - value so we want to spread out the
567:22 - existing task and we want to go is
567:24 - completed and set it equal to the
567:27 - opposite so we're going to look for task
567:29 - and then is completed now if it's not
567:32 - the case then we'll simply return the
567:35 - task and with this in place now we can
567:38 - pass this toggle task down as well as
567:42 - our entire tasks list so first prop will
567:47 - be tasks and the second one actually is
567:50 - going to be toggle task now we haven't
567:54 - set up of course anything in the list so
567:57 - all of that is coming up let me just
567:59 - pass this down we're looking for toggle
568:02 - task then let's navigate to our list and
568:07 - first let's grab our task we will need
568:10 - our type so import type task and that is
568:15 - coming from my types yep that's the one
568:20 - and let's set up right away the list
568:22 - props so type list props and in here we
568:26 - have tasks which is actually an array of
568:29 - tasks and also we want to set up that
568:32 - toggle task so toggle task same
568:36 - deal it's going to have the ID and
568:40 - actually that ID will be a string but
568:43 - notice how essentially we're providing
568:45 - an object correct so make sure you have
568:48 - the same syntax okay good and in here we
568:51 - want to the structure both of them so
568:53 - tasks and toggle task and we'll set it
568:57 - equal to list props beautiful and now we
569:01 - want to iterate over the list display
569:04 - all the items and also let's right away
569:07 - set up the toggle task functionality so
569:10 - we're going to go over here with Anor
569:13 - list let's add a class name of list then
569:17 - inside of the unor list let's go with
569:20 - tasks. map let's invoke this and over
569:25 - here we're going to have a task and then
569:27 - for every task we want to set up the
569:30 - return it's going to be a list item and
569:33 - also we'll provide a key that's a must
569:36 - so we're going to go here with task
569:39 - ID Also let's set up the paragraph This
569:42 - is where we'll display the task
569:44 - description as far as the classes we're
569:47 - looking for task and text and over here
569:52 - let's set up task and description so we
569:55 - have access to that and now let's set up
569:57 - our input so at the very end over here
570:00 - we're going to go with input now it's
570:02 - not going to be a text actually we'll go
570:06 - with checkbox we're going to go with
570:09 - checked so it has this prop and we're
570:11 - going to set it equal to task and then
570:13 - dot is completed so if it's true then
570:18 - the checkbox is going to be checked if
570:20 - not then it's not going to be the case
570:22 - and we'll right away add this onchange I
570:25 - will pass over here the inline function
570:28 - we don't need actually the event I
570:30 - simply want to go with title task and
570:33 - then I want to provide the object with
570:35 - the ID property where I'm looking for
570:38 - TAS ID now before you ask can you
570:41 - essentially set up this
570:44 - ID as a straight up argument so
570:48 - essentially without that object yes
570:50 - absolutely it's just my preference to
570:53 - set it up as an object in this case and
570:56 - with this in place we're done with the
570:58 - list as well as toggle task
571:01 - functionality so if I add a second one I
571:05 - can nicely toggle over here this value
571:08 - as well now if I'm going to refresh the
571:12 - page of course I'm going to lose all of
571:13 - the values since we haven't set up the
571:16 - local storage yet and in fact this is
571:19 - something we're going to do in the
571:20 - following video okay so now let's just
571:23 - add local storage to our application and
571:26 - I want to start by navigating to the
571:28 - browser to the application and I want to
571:31 - remove the previous ones I believe I
571:34 - still have values from the fundamental
571:37 - section then we want to create two
571:39 - functions one is going to be load tasks
571:42 - so we want to load the tasks when the
571:45 - application starts up and we'll also
571:47 - have one to update the storage and since
571:50 - it's a react project we can use use
571:52 - effect and then pretty much every time
571:55 - there's going to be some change in a
571:56 - tasks list we will invoke the update
572:00 - storage let's start with the
572:03 - load tasks function so this function is
572:07 - going to return an array of tasks as far
572:11 - as the functionality we want to go with
572:14 - stored tasks so that is equal to local
572:18 - storage then we're looking for get item
572:21 - that tasks something we don't have yet
572:24 - and then we want to
572:26 - return and then based on what we have in
572:30 - the local storage either we're going to
572:33 - return those tasks or we're going to
572:36 - return an empty array so let's set up
572:38 - turning operator we're going to go with
572:40 - Json parse and we'll pass in stored
572:44 - tasks that's not the case we'll return
572:47 - empty array and then in here I'm just
572:50 - going to provide a function and then I'm
572:54 - going to invoke load tasks and then like
572:58 - I said we also want to set up one to
573:00 - update storage so every time we'll
573:02 - change something about the list be it
573:05 - add the task to the list or toggle D is
573:08 - completed we'll update the storage so
573:11 - update storage now this one is looking
573:14 - for the tasks and actually it's going to
573:17 - be an array of task now it's not going
573:20 - to return anything so we're just going
573:22 - to go with void and then we want to go
573:25 - with local
573:26 - storage then dot we're looking for set
573:30 - item the name is going to be tasks and
573:33 - we're going to go Json stringify since
573:36 - we can only store strings over there and
573:39 - we'll provide the tasks so this is how
573:42 - we're going to create those items and
573:44 - then when the project
573:46 - loads this is how we're going to access
573:48 - them like I mentioned since this is a
573:50 - react project
573:52 - we can go with use effect and then
573:55 - pretty much every time there's going to
573:58 - be some change in our dependency array
574:01 - which contains the tasks we will also
574:04 - invoke the update storage and we'll grab
574:07 - the tasks value so now let me navigate
574:11 - back to the browser or it's over here
574:14 - everything is empty I have no tasks but
574:16 - I can go with first task okay good
574:21 - second task task notice how they are
574:23 - actually saved in local storage I can
574:25 - also toggle the is completed and then
574:28 - once I refresh I still preserve the
574:31 - values that should do it for typescript
574:33 - with react section hopefully everyone
574:36 - enjoyed it and up next we're going to
574:38 - start working on a big typescript
574:40 - project where we're going to implement
574:42 - most of the things that we have learned
574:45 - in fundamentals and react with
574:48 - typescript sections