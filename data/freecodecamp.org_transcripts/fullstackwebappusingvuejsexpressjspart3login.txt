00:01 - hey everyone and welcome to part three
00:03 - of building a full stack web application
00:05 - using vue.js and express.js
00:08 - so if you remember in the last part two
00:10 - we kind of
00:11 - pulled in sqlize to connect to the
00:13 - database and when the user registers we
00:15 - create a user model and save that then
00:18 - we did a little bit of validation and
00:19 - stuff to return different error messages
00:22 - and then finally near the end we started
00:23 - to
00:24 - style this register page to kind of have
00:26 - a more like material looking design to
00:29 - it
00:32 - so i guess we'll start off going from
00:33 - there and the first thing i want to do
00:34 - is i want to kind of fix these input
00:36 - labels
00:38 - so let me go to the view to fi website
00:41 - again
00:43 - and we can try to find
00:44 - some other components that we could
00:45 - possibly bring in so if i go to the left
00:48 - go to components
00:49 - maybe i'll do uh i think text fields
00:52 - yeah there's a text fields component
00:54 - that we could potentially use
00:58 - so here are some examples of the text
01:00 - fields or labels whatever you can use um
01:04 - and again just to show you like how i
01:05 - kind of do this i just click on view
01:06 - source
01:08 - i look through the code really quick and
01:09 - i say okay well they have this as an
01:11 - example
01:12 - so i'll just go ahead and copy that so
01:14 - instead of using inputs let's just use a
01:16 - text field here
01:18 - and i believe that's all you need to do
01:21 - and now instead of doing i can just put
01:23 - the v
01:24 - model on that
01:27 - i don't even know if you really need any
01:29 - of these let's see
01:31 - let me go back to this really quick
01:34 - so i guess there's different styles
01:35 - depending on which one you want
01:37 - if we just want the normal one we could
01:40 - just start off with the normal one for
01:41 - now so if i were to search for
01:44 - normal with hint text label so i'll
01:46 - actually copy that one i kind of copied
01:48 - the wrong one
01:52 - and then inside here i can say
01:54 - v model is equal to email
01:59 - let's see
02:02 - labeled text we'll say email
02:05 - id i don't think we even need an id
02:08 - or a name
02:10 - so i'm gonna get rid of that stuff
02:14 - save this and see what it looks like on
02:16 - our page over here
02:20 - see there it's already filled out with
02:21 - my username
02:25 - cool so we got a
02:27 - we brought in the beautify
02:29 - text
02:31 - field component
02:32 - by just doing view text field or
02:34 - whatever and just kind of follow the
02:36 - approach that they're using
02:40 - and we want to do the same thing for the
02:42 - password down here so let's go ahead and
02:43 - just
02:45 - copy this
02:49 - make this password
02:51 - change this to password
02:53 - get rid of that input save this
02:56 - boom we have email and we have password
02:58 - here
03:00 - i'm not sure if they wrap this in
03:02 - anything
03:05 - oh it's just enough flex
03:08 - alright so i'm not sure why these don't
03:10 - have a black board at the bottom like if
03:12 - you go over here i would rather have a
03:14 - have a border bottom here just so you
03:15 - can tell that it's like an actual input
03:17 - box
03:18 - so what i'm going to do is just
03:22 - find out that class that i need to style
03:26 - so input group text field
03:29 - i can just go down to my scoped css
03:32 - and i'm just going to go ahead and say
03:34 - border bottom
03:36 - 1 pixel
03:37 - solid black
03:57 - in fact i think this is more of a global
03:59 - setting i want it to be on all the input
04:01 - boxes so i'm going to go over here to
04:03 - this app.view
04:04 - and notice that the style for this is
04:06 - not scoped so this is globally so
04:08 - anything here would be global in the
04:09 - whole app
04:10 - so if i save this now we have a border
04:13 - underline on these two input boxes and
04:15 - again i don't know why i need to do this
04:17 - because their example says
04:19 - that you know there's already a
04:22 - underline
04:24 - so maybe there's something i did wrong
04:26 - in the setup maybe there's something in
04:27 - version 5.2
04:29 - that broke that underline
04:31 - who knows but anyway it looks okay now
04:33 - so let's move on to um
04:36 - potentially adding some new features
04:39 - so again i like the text i want the text
04:41 - in this top bar to be
04:44 - white and not to be
04:46 - dark
04:48 - and i think before if i go back to the
04:49 - register.view page
04:52 - i thought if i added dark here it's
04:53 - supposed to add um
04:55 - like change the colors maybe i need to
04:57 - add the dark to that
05:00 - no
05:07 - yeah
05:08 - anyway it's just another thing i could
05:10 - probably
05:11 - style globally just to make it look a
05:13 - little bit nicer
05:14 - so i'm going to go ahead and figure out
05:16 - what class this uses
05:20 - toolbar title right so i should be able
05:22 - to go to toolbar title just say give it
05:24 - a color white
05:28 - so cool we got a color white there and
05:29 - so that should be effective for
05:31 - everything
05:32 - and then we also have button content
05:36 - i'm pretty sure for the buttons if i
05:38 - were to go and add a dark
05:40 - attribute to that
05:44 - i guess it doesn't change i don't know
05:45 - something must have changed or i have
05:46 - something set up where
05:48 - it's not styling like it was before
05:52 - but
05:53 - anyway
05:56 - i'll just go ahead and add that
05:58 - so globally our buttons will have
06:01 - a white
06:02 - color text and then our headers will
06:05 - have a white colored
06:07 - text for that
06:12 - all right so at this point um i think
06:15 - it'd be nice to add a a fixed header at
06:17 - the top and have like you know the name
06:19 - of the app
06:20 - maybe like a hamburger menu so i can
06:22 - open up a site nav and a login and log
06:24 - out register button
06:26 - so what i'm going to do is if you go to
06:28 - beautify i think they have a
06:31 - toolbar
06:33 - so toolbar is one of those components
06:34 - that they have
06:36 - and again they have like examples
06:39 - what not you could view the code to see
06:42 - how how exactly do a toolbar
06:46 - um again they have a ton of different
06:49 - examples so this is really good
06:50 - documentation
06:52 - so what we're going to do
06:53 - is inside our components let's just go
06:56 - ahead and make something
06:58 - new called header.view and that's going
07:01 - to represent
07:02 - our view header
07:05 - so inside here of course
07:07 - let me just go ahead and copy
07:09 - an existing one
07:11 - and gut it out
07:12 - so go here
07:14 - gut out that code and that code
07:17 - get rid of all that
07:19 - boom so we have a blank
07:21 - i have a blank view.js file
07:24 - or sorry a blank view
07:27 - file
07:28 - and what we want to do is we're just
07:29 - going to say our header is going to be
07:31 - composed of a toolbar which is fixed
07:34 - and that's one of the special attributes
07:35 - that you can find in their documentation
07:38 - go down here at the bottom their api
07:40 - says they have a fixed boolean that you
07:42 - can do
07:44 - sets the position of the toolbar to be
07:46 - fixed and that means that's basically
07:48 - going to stay attached to the top of the
07:50 - screen like if you notice this blue bar
07:51 - up here it's fixed
07:55 - so if you just add fixed here it should
07:57 - just become fixed
07:59 - go ahead and give it a class assign as
08:01 - well
08:10 - go ahead close that off
08:13 - so we have a toolbar let's go ahead and
08:16 - add a
08:19 - title to it so v toolbar
08:24 - title class of margin rate four
08:27 - we're going to call this tab
08:29 - tracker
08:34 - save this and now at this point we
08:36 - should be able to start using this so if
08:37 - we go to our app.view page
08:42 - what we want to do
08:46 - is we want to bring that in so first of
08:48 - all we can say
08:49 - components
08:52 - we want to bring in our header
08:55 - and of course we need to import that so
08:56 - i can say import
08:59 - page header
09:00 - from
09:02 - component slash header.view
09:06 - i think header might be a reserved
09:07 - keyword and view so i had the name this
09:09 - thick page header
09:10 - so once we include line 9 which
09:12 - basically brings in the header.view
09:15 - file that we've declared or component
09:17 - that we declared
09:19 - we can pass it into this components to
09:21 - allow our app to actually use it
09:24 - and what we mean by that is we can go
09:26 - over here
09:29 - and actually say page header
09:32 - and put it inside the template here and
09:35 - now when we save this
09:37 - make sure there's no let's see trailing
09:39 - spaces is not allowed on
09:41 - the header
09:45 - maybe that was the issue yeah
09:48 - so now if we go back to our client
09:50 - nice we have a fixed header at the top
09:52 - so you saw how easy that was to add
09:54 - something you basically just
09:56 - read through their docs
09:57 - look at their examples
10:00 - oh copy and paste it into your code and
10:02 - then change it as needed and then i'm
10:04 - also just kind of typing this from some
10:05 - notes
10:06 - to have it look a specific way for me so
10:12 - first thing you'll notice is this panel
10:15 - right here is a little messed up and i
10:16 - think we need to do a little bit more
10:18 - work
10:19 - on adding
10:20 - all the beautify components
10:26 - so i think if i go back to the beautify
10:31 - i thing somewhere they have it and they
10:33 - say you must have your app that looks
10:35 - like this
10:36 - pretty sure they say this so if i were
10:38 - to copy this
10:41 - and put that here
10:46 - that's probably why like my dark styles
10:48 - aren't working so
10:49 - basically they say you must have a v app
10:51 - and inside here you must have a main
10:54 - which has a v container and then inside
10:56 - the v container we can go ahead and put
10:57 - our router if we want so go ahead and
11:00 - put the router in we don't need this
11:01 - image anymore
11:03 - i'm going to go ahead and put the main
11:05 - page header
11:06 - on side view app there
11:12 - uh oops i thought i deleted that so go
11:16 - ahead and delete that
11:17 - go ahead and add a fluid attribute
11:19 - which basically allows it to be a fluid
11:22 - layout
11:23 - go ahead and save this and hopefully
11:25 - that works boom so we have a nice
11:28 - spacing already added for us because
11:29 - that's what beautify does for us
11:32 - um let me just
11:34 - try something out really quick i wasn't
11:35 - sure
11:37 - i wanted to add dark here and see what
11:40 - happens without having to actually like
11:42 - hard code
11:47 - get rid of this stuff
11:54 - yes okay so that whole stuff i added
11:57 - before with the colors we don't actually
11:58 - need because once we've set up our app
12:01 - to
12:01 - use
12:02 - this particular v app
12:05 - we can then start using dark onto things
12:07 - that we want to change the text to white
12:10 - so like in this case we can add dark to
12:15 - this
12:16 - save it
12:17 - and i believe this will become white
12:18 - awesome and then same with the button if
12:20 - we go to that register
12:22 - find b button add dark to it
12:26 - our text will become white so that's
12:27 - built into beautify
12:29 - so we don't really need that css hack
12:31 - that i did it before so sorry for about
12:32 - wasting time on that but at least it was
12:34 - fun to figure out how to do
12:36 - globally styled stuff inside that view
12:39 - style
12:40 - tag down here at the bottom
12:43 - and the same with this i doubt we even
12:45 - need that
12:46 - border bottom anymore because i assume
12:48 - that that's working now
12:50 - cool it goes to show make sure you read
12:53 - the docs before you start using
12:55 - because it says right here you must
12:58 - wrap everything in view app and i wasn't
13:00 - doing that so
13:02 - shame on me huh
13:06 - all right so cool we have a fixed top
13:08 - header here and what we want to do is
13:10 - over on the right
13:11 - let's go ahead and add like a login
13:13 - or a logout button
13:15 - depending on if you're logged in
13:17 - and then also like a signup button
13:20 - so let's go back to our header
13:24 - so here i'll go to header.view
13:28 - and then inside here we can inside the v
13:30 - toolbar which again is that cyan color
13:33 - toolbar
13:34 - we can add another component which is
13:37 - built into beautify called b toolbar
13:39 - items
13:44 - nsib toolbar items
13:47 - can add let's say
13:50 - a button
13:55 - and it's going to say browse
13:58 - and we can just um
14:00 - make that a flat button and a dark
14:02 - button
14:03 - see what that does
14:05 - oops
14:07 - name my brows instead
14:10 - so this is a browse button when you
14:12 - click it it's going to take you to all
14:13 - the songs but we can implement this
14:15 - later on
14:17 - let's go into the very far right
14:20 - we need to first add a v
14:22 - spacer
14:26 - and again these are in the beautify docs
14:29 - but a b spacer is going to pretty much
14:31 - allow you to put things all the way over
14:33 - here fixed to the right
14:34 - and then at this point we can say v
14:36 - another v toolbar
14:38 - items
14:43 - and then inside the v toolbar items
14:45 - let's just go ahead and make another
14:46 - button
14:49 - let's make it
14:51 - flat and dark
14:55 - the button and what we want to do is
14:57 - name this a sign up button
15:03 - and just
15:04 - to
15:05 - so we have to worry about this stuff now
15:06 - let's just comment out that browse
15:07 - button because we're not really even
15:09 - worrying about that functionality so we
15:11 - can come back later and you know say
15:18 - add a nice little to-do there so we know
15:19 - to come back and fix it up
15:22 - so now we have a signup button over here
15:24 - you you saw that pop up
15:26 - and what we want to do is we want this
15:28 - to actually navigate us
15:30 - to our register url
15:33 - so if i were to go to the base url here
15:36 - and click sign up it doesn't do anything
15:38 - because we haven't actually linked it to
15:40 - our view router
15:45 - so one thing
15:46 - [Music]
15:47 - that if you go to the view router
15:49 - documentation
15:52 - one way they tell you you should do this
15:54 - is by using a
15:57 - or the docs
15:59 - should be like the first link when you
16:00 - go to a github i'm not sure why they
16:02 - have it like hidden
16:04 - okay so
16:10 - router link
16:12 - all right so this is kind of one way you
16:14 - can kind of make
16:15 - links work
16:17 - basically you can use a router link
16:18 - which will
16:20 - wrap whatever you do inside an a tag and
16:22 - then you can do special stuff like
16:26 - writer link to
16:27 - whatever so i'm just going to go ahead
16:29 - and copy this
16:30 - let's just go ahead and put it right in
16:31 - our application
16:36 - sign up i'll say go to the register page
16:46 - and then we have to verify that we
16:47 - actually have a register page so if i
16:49 - were to go back to my router
16:52 - we do have a name called register and
16:53 - what this does is basically whatever you
16:55 - put in this two
16:57 - so two equals register it's going to
16:59 - look through this router routes array
17:02 - and find anything that matches that
17:04 - exact name
17:05 - and then if you were to click on it it's
17:07 - going to go ahead and
17:09 - point you or navigate you to that
17:12 - so you see here it's now a link
17:14 - with sign up if i were to click it
17:18 - it does nothing
17:20 - and that's because
17:22 - i think maybe i need to just
17:27 - wrap this on the outside
17:38 - yeah i don't know i guess the button was
17:41 - catching and preventing the propagation
17:43 - down to that sign up event so one thing
17:45 - i'll point out is this is again one way
17:47 - to do your whole router logic
17:50 - and it kind of wraps your html elements
17:53 - with a
17:54 - an a tag you see here and it completely
17:57 - jacks up your style
17:58 - i don't know if there's a better way to
17:59 - do it in beautify so
18:01 - please leave me some feedback if there's
18:02 - a better way to do this
18:05 - but my approach to a solution
18:08 - is instead of wrapping it with
18:11 - that router link directive or component
18:14 - instead what we can do is just say if a
18:18 - user were to click on
18:20 - this
18:22 - let's just go ahead and go to a register
18:24 - page manually so what we can do is
18:26 - manually you know set up a methods here
18:29 - so on click we can say methods
18:33 - and that's going to have a nav
18:35 - navigate to method
18:38 - and then we'll say route
18:40 - here and then when you use
18:44 - vue.router basically you have the router
18:46 - object that's put onto
18:48 - every component's
18:50 - local object so you can access the
18:52 - router by doing this dot money sign
18:54 - route
18:55 - and then i can push a new route by just
18:57 - doing like this
18:59 - so money sign or out push and then push
19:01 - the route in fact i'll change that to
19:05 - an object like this
19:10 - let's have name instead of two i'll put
19:12 - name
19:14 - so kind of a workaround not sure if
19:15 - that's necessary but it keeps the button
19:17 - completely styled how it should be and
19:19 - when i click it it goes to the register
19:21 - page
19:27 - oh maybe not i'm getting
19:30 - an error error in the event handler for
19:32 - click
19:33 - this.route.push is not a function
19:46 - oh
19:47 - should be router my bad
19:50 - so i changed that the router and now
19:51 - it's working so you saw here i clicked
19:52 - on sign up and it goes to the register
19:54 - page
19:59 - another thing i want to do is i want to
20:00 - be able to click on this logo here
20:03 - and go back to the home page
20:08 - so again if i were to go back
20:11 - to the app and go to the header view
20:15 - we could simply just
20:20 - i don't know should maybe we should make
20:21 - that a button too
20:24 - yeah i don't know
20:26 - but i'll just make it for now a span we
20:27 - can come back and change this later it's
20:29 - not that big of a deal
20:30 - so make it a span for now
20:33 - so if you anyone were to click on that
20:34 - span
20:37 - it will navigate them to
20:39 - the root
20:41 - i don't think i have a root installed so
20:42 - if i go back here to
20:45 - path and name this root
20:51 - now if we click on this it takes us back
20:52 - to the root of our application
20:55 - and again we can do some styling here
20:56 - right now like there's no hover effect
20:58 - there's no cursor um
21:02 - let me just do that really quick it's
21:03 - not that hard to do so in here we could
21:05 - say class equals
21:07 - logo
21:09 - i'll just say home
21:11 - so now that style that span has a class
21:13 - of home onto it if we go down to the
21:15 - scoped styles we can say pointer is
21:19 - or
21:20 - cursor
21:21 - is equal to the pointer
21:26 - save that
21:27 - now we have a cursor when we hover over
21:29 - it
21:31 - in fact let's just go ahead and do like
21:33 - home
21:34 - hover
21:35 - color is
21:41 - pick some random color
21:43 - cool
21:47 - and we can change that color later on
21:48 - but
21:50 - again recap we added a fixed
21:54 - view toolbar header
21:56 - by doing
21:57 - let's say
21:59 - a v toolbar fixed gave it a class a sign
22:01 - in dark so that the text is white
22:03 - remember dark makes the text white cyan
22:06 - changes the color so we can go over here
22:07 - we can just like green
22:10 - see how it changes the green or i know
22:12 - blue
22:15 - and there's a bunch of colors already
22:17 - defined
22:19 - on beautify
22:20 - so if i go to the style drop down and go
22:22 - to colors we can basically use any of
22:24 - these colors so they have like
22:27 - that one's cool let's use orange darken
22:29 - two so if we go over here change that to
22:32 - orange darken two and go back to our app
22:36 - awesome
22:37 - but in this case let's just keep it as
22:40 - cyan
22:42 - save that
22:44 - and start moving on to something new
22:46 - such as the login page
22:50 - so for the login page we we already have
22:52 - a way to register right but we don't
22:54 - really have a way to keep track of the
22:55 - state if the user's already registered
22:57 - or logged in
22:58 - so let's go ahead and work on adding a
23:01 - login component which we can you know
23:03 - have a link up here called login so
23:05 - let's just go ahead and
23:07 - go to that header
23:09 - we can go down here and say let's just
23:10 - go again go ahead and add a new button
23:13 - called login
23:16 - so i'm going to go ahead and say login
23:18 - and when we click it it's going to go to
23:19 - a login state
23:22 - so we have login here click it goes to
23:24 - login state but login state does not
23:26 - exist yet
23:27 - so if you remember you need to go to
23:29 - your route
23:30 - or router
23:31 - we need to go ahead and add a login
23:34 - state
23:38 - which means we need a login component
23:39 - which we haven't created yet so let's go
23:41 - ahead and copy a login component
23:43 - so go to register
23:45 - and i'm just going to copy and paste a
23:47 - register component because it's going to
23:48 - be very similar right
23:54 - so now if i were to
23:58 - just go through here anywhere it says
23:59 - registered let's just go ahead and
24:00 - rename to
24:03 - login
24:05 - and then for this logic we're probably
24:07 - not going to use it
24:09 - actually we might so
24:12 - right now we're kind of assuming there's
24:13 - a login method on this service
24:18 - um but there's not so let's just go
24:19 - ahead and save and see if this this
24:20 - works
24:22 - all right so now we're at a login page
24:24 - we have this login panel
24:26 - email and password we have a login
24:28 - button
24:30 - if we were to click login this should
24:32 - just throw an error
24:34 - mainly because login is not defined yet
24:37 - so you saw how easy it was to add a new
24:39 - link at a new view
24:41 - at a new component called the login
24:43 - component and we basically just copy and
24:45 - paste register and we could just change
24:47 - it as needed
24:50 - so now at this point what we want to do
24:51 - is actually invoke
24:53 - a login endpoint with this email and
24:55 - password
24:57 - so if you remember if we go to
24:58 - authentication service
25:01 - so i'll go over here to services
25:03 - authentication service we don't have a
25:06 - login method so let's go ahead and
25:07 - create one so if i were to copy and
25:08 - paste this
25:10 - change this to login
25:12 - we want to do a post request to a login
25:13 - endpoint with these credentials
25:18 - um again i think this is fine just you
25:20 - know prevent present an error if there's
25:21 - a login error
25:23 - call login from authentication service
25:25 - with email and password and i think
25:28 - honestly we're good to go with that
25:31 - got a little syntax error
25:34 - thank you webpack
25:38 - so now this point if i were to type in
25:41 - one two three test.gmail.com
25:41 - five six
25:42 - we hit log in and we go to the network
25:44 - tab we see that it does make a request
25:47 - to
25:48 - slash login using a post request it's
25:52 - pasting the payload
25:54 - email and password here
25:58 - and it's returning a 404 not found and
25:59 - why is that well it's because we haven't
26:02 - actually implemented a login endpoint
26:04 - all right so let's move on to the back
26:05 - end and try to implement that login
26:07 - endpoint
26:09 - so if i open up the server package and
26:11 - first go to routes
26:13 - we can just go ahead and copy
26:16 - these routes and
26:18 - what i'm going to do is just indent that
26:20 - and go to login
26:22 - and basically we actually don't need a
26:24 - policy for this one at the moment or
26:26 - let's not even focus on a policy so
26:28 - let's just focus on adding a new login
26:30 - method to the authentication controller
26:34 - so save that file and i'll go over to
26:36 - authentication controller let's go ahead
26:38 - and add a new async login method
26:42 - and inside this method um we're going to
26:45 - do
26:46 - let me just copy and paste this code
26:48 - what we need to do is first find
26:50 - a user
26:53 - which matches the email that's passed in
26:55 - right so the first thing we need to do
26:57 - is grab that email and password that the
26:59 - user has passed in in their body
27:02 - so we could do that on line 16
27:04 - and then instead of creating a user here
27:06 - we need to find one so find one user
27:10 - where the email is equal to the email
27:12 - that the user is passed in and we can do
27:14 - that like so
27:16 - so instead of using create we do find
27:18 - one it should return a user object
27:21 - and if it doesn't return a user object
27:23 - it could be undefined or null what we
27:25 - need to do is say if that user object is
27:27 - not defined
27:29 - let's go ahead and send back
27:31 - a 403 which is the authentication error
27:34 - status
27:35 - and then just say error
27:39 - the login information was incorrect
27:43 - it's typically a good idea to return
27:45 - generic messages back to the user when
27:47 - you're dealing with authentication or
27:49 - logging in
27:50 - so that a hacker doesn't you know find a
27:52 - way to figure out all the different
27:54 - users that are in their system
27:59 - so again we grab the
28:02 - email and password from the body we find
28:04 - one user in the database which matches
28:06 - the email
28:07 - we check that we actually found
28:09 - something and if not we're going to
28:11 - return
28:12 - a 403 status
28:14 - make sure you have return there and then
28:16 - finally what we need to do is say
28:18 - is password valid
28:21 - we need to verify that
28:23 - the password the user passed in matches
28:25 - the password that's attached to the user
28:27 - model
28:29 - so i could do this
28:31 - is password valid equals password equals
28:35 - user.password and say if
28:37 - the password is not valid
28:40 - again we're going to do that same logic
28:42 - to just return it 403
28:45 - and just say the login information was
28:46 - incorrect
28:48 - and then at this point if everything was
28:50 - good to go
28:51 - we're just going to return that user
28:58 - so i'll say user json is equal to
29:00 - user.2.json
29:02 - and we can send that back here
29:09 - and again if there's any type of error
29:11 - whatsoever
29:13 - we can just again return like
29:15 - valid login information
29:22 - i shall say an
29:23 - error has occurred
29:26 - trying to log in
29:31 - and in this case i think that might be
29:33 - like a 500 error because if for some
29:35 - reason
29:37 - you failed to make that
29:39 - sqlize call
29:41 - and it's pretty sure there's something
29:42 - wrong with the uh server
29:44 - so return 500 status to the user so they
29:46 - understand that it wasn't their fault
29:52 - so at this point
29:53 - we can go ahead and try to test that
29:55 - endpoint
29:58 - so if i were to go and make sure that we
30:00 - have a account registered
30:02 - we do
30:03 - and we go here and try to log in
30:05 - because the login information was
30:06 - incorrect
30:15 - and so let's try to figure out why
30:16 - that's happening
30:26 - you may not even be finding that user in
30:27 - the database
30:32 - so it's finding a user you see how it
30:33 - printed out
30:35 - user here
30:36 - so it should not be getting to that
30:40 - let's print out what's happening here
30:55 - it's printing out false it's saying
30:57 - password
30:58 - is not equal to user.password so let's
31:00 - go ahead and just
31:01 - do a little bit more debugging
31:04 - try to figure out why this is having
31:06 - issues
31:15 - and the password that user has is one
31:17 - two three four five six
31:19 - and the password expects is seven eight
31:25 - so for whatever reason
31:29 - i'm not sure why that user has
31:32 - password length of 6.
31:36 - so what i'm going to do is i'm going to
31:37 - go to the app.js
31:40 - i'm pretty much going to clear out the
31:41 - database so if you in in sqlize if you
31:44 - do sync and then pass this force flag it
31:46 - basically drops all of your tables so
31:48 - this is very dangerous in a production
31:50 - environment but when testing locally if
31:52 - you want a clean database
31:53 - you can just go ahead and add that and
31:55 - then run it
31:57 - so now that that is ran we should not
31:59 - have a single user in our database so
32:02 - i'm going to go back to register
32:04 - register with testing
32:07 - and then log in with this
32:11 - and it let us log in this time cool
32:16 - so
32:17 - we want to do
32:19 - jwt or java or json web tokens for kind
32:22 - of our authentication method
32:24 - so the first thing we need to do is
32:26 - install
32:29 - a package called
32:30 - json web token so i'll say npm install
32:33 - save json web token
32:37 - and while that's installing basically we
32:39 - can come up here and say const
32:41 - jwt is able to require
32:44 - json web token
32:50 - and we also want to go ahead and just
32:52 - include that config file that we had
32:55 - created earlier
32:58 - and i'll write a helper function called
33:00 - jwt sign user which basically is a
33:03 - function which is going to sign a user
33:05 - object
33:06 - using the gwt library to give us back a
33:09 - gwt token
33:11 - so i'm going to say
33:13 - first of all i'm going to declare this
33:14 - variable called one week which is
33:15 - basically
33:17 - 60 seconds times 60 minutes times 24
33:19 - hours in a day times seven days in a
33:21 - week and i'm going to return jw.sine
33:26 - give it the user
33:28 - i'm going to give it a second argument
33:30 - is some like options
33:32 - so let's say authentication.jdw
33:36 - jwt secret
33:39 - and then the third one is
33:41 - some more options where you can actually
33:42 - pass in the
33:43 - expires in
33:46 - so in here in config
33:48 - let's go ahead and define an
33:49 - authentication
33:52 - uh key
33:53 - and we say jw secret is equal to process
33:57 - env jwt secret or secret
34:02 - and basically what this is going to be
34:03 - used for is signing the jwt's token you
34:08 - typically need to pass it
34:10 - a secret string
34:12 - and that secret is only known by the
34:14 - server and basically it's used to
34:16 - determine
34:17 - if the jwt token is valid or not
34:21 - because technically anyone can go to
34:24 - you know jwc.io
34:26 - and create their own token and try to
34:27 - send it to my server
34:28 - but if they don't know what this secret
34:30 - is then my server is going to be like yo
34:31 - that's a bad token and just reject it
34:35 - and we'll see this used later on when we
34:37 - bring in passport and start
34:39 - validating using passport
34:42 - but for now our goal is to just send
34:44 - back a jwt token when the user signs in
34:46 - so again we have this helper method
34:48 - and what we need to do is down here
34:51 - we could just send back token
34:53 - jwt sign user and pass it to user json
34:56 - here so now when i save this file
34:59 - and go back and hit my login endpoint
35:04 - we get back our user information and we
35:06 - also get back our token
35:10 - all right so now as you might have seen
35:12 - when we register a user it's storing the
35:14 - password in plain text
35:16 - and that's again another security
35:18 - concern you shouldn't be doing that
35:20 - so let's go ahead and try to fix that
35:23 - issue by just using bcrypt
35:25 - and encrypting the password
35:28 - so yet again we're going to install
35:31 - another
35:32 - package and this one's going to be
35:34 - called be crypt node.js
35:38 - and basically as a package you can use
35:40 - for encrypting
35:41 - insulting and hashing passwords or
35:43 - whatnot
35:47 - so maybe i should rephrase that i'm not
35:48 - going to encrypt the password i'm just
35:49 - going to add a hash
35:51 - with assault hash so we can easily check
35:54 - to see if the password that's sent in by
35:56 - the user
35:57 - matches what we expect in the database
36:00 - so now that decrypt is done installing
36:03 - if we were to go back to the
36:07 - user model
36:10 - i'm going to go ahead and include
36:12 - that bcrip package
36:16 - and i'm going to
36:18 - promisify all
36:20 - of that be crypt package
36:31 - i like to use bluebird as the promise
36:33 - library i don't remember if we already
36:35 - brought that in so let me just go over
36:37 - here npm install bluebird
36:41 - and basically promisify all is going to
36:43 - take any typical function which has like
36:46 - a callback structure
36:48 - and it's going to wrap it to allow us to
36:50 - use the promise format
36:53 - and again i don't know how much that
36:54 - really matters since we're typically
36:55 - going to be using async and a weight
36:58 - where possible
37:00 - so this might even be used let me just
37:02 - try to write this out and see if we need
37:03 - it
37:04 - so
37:06 - i'm going to change this up a little bit
37:07 - i'm first going to say
37:09 - change this to
37:12 - that
37:13 - because i need the actual reference to
37:15 - the user object
37:17 - i need to return the user object here
37:20 - so that's just like a little refactoring
37:22 - just so i have access to user here and
37:24 - what i want to do is i want to on the
37:26 - prototype
37:27 - attach a method called compare password
37:33 - and that's so that
37:37 - the user model is kind of the one that's
37:39 - doing the
37:40 - the password compare instead of the
37:42 - controller and that's useful if we need
37:45 - to do like password comparisons anywhere
37:47 - else
37:49 - so starting off
37:51 - instead of doing
37:53 - that
37:54 - compare password where i do password is
37:56 - equal to user password
37:59 - we expect the password to now be
38:00 - encrypted so what we need to do is
38:03 - return
38:04 - be crypt
38:06 - compare async
38:08 - candidate password actually i'll change
38:10 - this to can
38:13 - candidate actually i'll just keep that
38:14 - as password why not so compare the
38:16 - password to the model's password
38:22 - in fact change that to function because
38:24 - we don't
38:25 - want to use the fat arrow
38:33 - so assuming that the password is
38:36 - stored using bcrypt we can just compare
38:40 - the password that the user sends in
38:42 - against the model's password
38:44 - so again any user
38:47 - object now is going to have that method
38:49 - so instead of having to do this logic up
38:50 - here
38:51 - we could just say
38:54 - user dot compare password
38:58 - i could pass it password
39:03 - and i could say await since that's going
39:05 - to return
39:07 - a promise i believe
39:10 - and now that's going to call this method
39:12 - which is going to use bcrypt to compare
39:14 - that password against the model's
39:15 - password
39:16 - and the second thing we want to do
39:21 - is before we store the user
39:25 - we instead want to hash the password
39:28 - so if i were to go here and say hooks
39:33 - i can add a couple of
39:35 - callback functions
39:44 - so i'll say before the object is created
39:46 - we want to hash the password
39:48 - we want to say before the object is
39:50 - updated
39:53 - hash the password and before we save
39:55 - this object
39:57 - also hash the password
39:59 - and then up here we can go ahead and
40:00 - just declare function hash password
40:06 - that takes a user object and options
40:10 - and so
40:11 - the method for hashing the password we
40:13 - first need a salt factor
40:16 - which is just used in by decrypt
40:18 - not sure what happens really behind the
40:20 - scenes i have to look into that but
40:23 - the second step is
40:24 - we need to check if the password has
40:26 - changed at all so if the password hasn't
40:28 - changed we can just go ahead and return
40:30 - out of this hash password function and
40:31 - not do anything
40:33 - otherwise
40:35 - we need to call bcrypt
40:38 - we need to tell it to gin
40:40 - generate which is gin salt async
40:43 - using the salt factor
40:46 - we need to then take that salt
40:51 - and then decrypt
40:54 - using the user's password
40:57 - so basically we just take the plain text
40:59 - password and we salt it
41:02 - which will give us a hash
41:05 - we can then update that user's password
41:08 - value
41:11 - with that hash
41:16 - [Music]
41:18 - so at this point let's just go ahead and
41:19 - do
41:20 - force true again to clear out the
41:22 - database of all those bad passwords
41:27 - and i can go back
41:30 - to here go to the register endpoint go
41:32 - ahead and register that user
41:37 - saying the account is already in use so
41:38 - i probably have some type of like
41:40 - exception that's been thrown
42:00 - so let's first make sure that we're
42:02 - getting into this hash password function
42:23 - okay
42:24 - so i guess they didn't clear the
42:25 - password last time so now
42:28 - you see that we registered and we got a
42:29 - user back
42:30 - with a strange looking hash of a
42:32 - password
42:34 - at this point what we can do
42:37 - is if we were to try to log in
42:41 - it's going to check that
42:43 - one two three four five seven eight
42:44 - string password against the hash
42:47 - to verify if it works or not
42:53 - so i can go back to here and just remove
42:55 - that
43:02 - um
43:03 - okay so let me just recap again really
43:05 - quick what all changed so inside routes
43:08 - we added a login endpoint
43:11 - which calls the authentication
43:12 - controller login method
43:15 - and then we went to authentication
43:16 - controller we added this login method
43:18 - which basically grabs the username and
43:19 - password from the body
43:21 - we find the user using the email
43:24 - we check if there wasn't any email our
43:26 - user returned
43:27 - we just returned an error
43:29 - if for whatever reason the password they
43:30 - pass and does not match the user's
43:32 - password return an error
43:34 - otherwise we are going to go ahead and
43:36 - return a
43:37 - jdbt token with that user information
43:44 - and that's about it for that
43:47 - and then the register endpoint we didn't
43:49 - change
43:50 - we did add this jwt sign user helper
43:53 - method which is used for generating that
43:55 - jwt token
43:57 - and then inside the user model
44:00 - we added some hooks which basically run
44:02 - whenever or before we create the method
44:05 - create the object update the object or
44:07 - save the object would cause it calls the
44:09 - hash password method up here
44:12 - which basically takes that user password
44:14 - and hashes it and then saves it again
44:19 - and then finally we added a prototype
44:22 - method called compare passwords so that
44:24 - any user model we can call compare
44:26 - password as needed
44:29 - and in fact just to make things a little
44:30 - bit easier let's just go ahead and do
44:31 - the exact same thing for register like
44:33 - we can return
44:35 - a jwg token while after they register
44:45 - otherwise i think the user would have to
44:46 - call login after registering to get that
44:48 - jwt token which
44:51 - i don't know
44:52 - i don't know what the better approach is
44:53 - for this but that's basically how we're
44:54 - going to go forward with that
44:56 - so at this point
45:00 - let's go ahead and go back to the ui
45:02 - remember we had that login
45:06 - endpoint that we created
45:13 - and let's verify that it actually works
45:15 - so if i go i think the account was
45:16 - testing or test
45:19 - yeah
45:20 - oops
45:21 - testing at gmail.com password is one two
45:23 - three four five six seven eight
45:25 - if we were to hit that login endpoint
45:27 - does it work
45:30 - yes it returned us the token
45:32 - and the user
45:34 - and again we did change the register
45:36 - method so let's go back here
45:38 - and try
45:40 - registering with something
45:43 - regression test manually so
45:46 - yes it allowed us to register we got
45:48 - back a token and we also got back a user
45:51 - and if i were to try to log in with that
45:52 - user
46:00 - we got back those things
46:04 - um
46:07 - one thing i'm noticing is it's allowing
46:09 - us to type in a plain text into the
46:11 - password instead of having stars so
46:14 - that's no good
46:16 - so let's go back to the client and go
46:17 - back to register endpoint i think we can
46:19 - just say type is equal to password here
46:24 - and do the same thing for the login
46:25 - controller
46:32 - okay
46:36 - that's working
46:41 - and i think one more thing i'm kind of
46:43 - annoyed how on the register page it's
46:45 - auto filling
46:47 - it's fine for login to autofill but i
46:49 - don't think that's good for the register
46:51 - page so there is a
46:54 - autocomplete new password attribute you
46:57 - can pass in
46:58 - to input boxes
47:02 - and that should prevent it from auto
47:03 - filling and i think
47:05 - it's also a good practice to like
47:07 - wrap everything in a form
47:16 - i think like internet explorer might
47:17 - need the form thing and then chrome uses
47:19 - this other thing it's just kind of a
47:20 - pain but
47:22 - whatever so hopefully now it doesn't
47:25 - autofill the register page
47:28 - good it doesn't
47:29 - because it doesn't make sense to me it's
47:31 - auto fill the register page
47:35 - but login
47:36 - that's cool for it autofills i don't
47:38 - really care about that
47:46 - all right so
47:48 - what we want to do now is we have the
47:50 - ability to log in and register and we
47:53 - get back that jwt token
47:56 - at this point
47:58 - let's bring in the view x
48:00 - library for the front end
48:03 - which is if i go to view x npm
48:08 - or maybe i should go to github not
48:09 - really sure
48:12 - probably github has better documentation
48:21 - basically vue x is the equivalent to
48:23 - redux which is the flux implementation
48:27 - you can go through these docs if you
48:29 - want to but basically when your
48:31 - application gets larger
48:33 - and you have components kind of
48:34 - interacting with other components
48:37 - the original approach was to use like
48:38 - message passing so like your
48:41 - parent component would use props to
48:44 - pass down to your children and your
48:45 - children will use events to propagate up
48:47 - to the parent
48:49 - and that's fine or you could use like a
48:51 - message bus
48:52 - to kind of communicate between all your
48:54 - components
48:55 - and i think it's fine for small
48:56 - applications but everyone always says
48:58 - that it gets out of hand
49:00 - when an application gets larger
49:03 - um i'm not really sure if that's the
49:04 - case because they don't really have that
49:06 - in angular one and i didn't see an issue
49:08 - with
49:09 - message passing becoming an issue in
49:10 - angular 1. maybe my application wasn't
49:12 - big enough but anyway they say you
49:14 - should be using vux for something like
49:16 - that
49:17 - if you need to keep track of a state
49:19 - that's used throughout your application
49:22 - and in fact that token that we're
49:24 - passing back and the user id
49:26 - those are two things that we want to
49:27 - keep track of throughout the entire
49:29 - application so it makes sense to use
49:31 - vuex here so i'm going to go ahead and
49:35 - again do an npm install but this time on
49:37 - the client i'll go ahead and install vue
49:39 - x
49:56 - and then i'm also going to install
49:57 - something called
49:59 - vuex router sync
50:01 - and it's a good way to kind of sync your
50:03 - router to your
50:04 - view x view x
50:07 - store
50:09 - so while those two are installing
50:13 - let's go back to our front end
50:16 - close all these tabs to make this all
50:18 - manageable
50:21 - go back to source we can go back to main
50:26 - and here let's go ahead and import the
50:28 - sync from vux view x router sync
50:32 - and we can go ahead and say sync
50:35 - store to router
50:38 - we need to import a store
50:40 - which we're going to have to define
50:41 - ourselves
50:44 - so import store from store store which
50:46 - means we need to create a
50:50 - store folder inside the store let's go
50:52 - ahead and make a store dot
50:55 - js
51:04 - so basically inside your store let's go
51:06 - ahead and import view
51:09 - let's import view x
51:12 - let's um
51:14 - tell view to use view x
51:17 - that basically allows you to access your
51:18 - store and all of your view components
51:21 - and then we can go ahead and create the
51:22 - store
51:31 - i think i could just do that export
51:32 - default new view store
51:34 - i'm going to say strict is true which
51:36 - means that you can never modify the
51:38 - state unless it's through an action or a
51:39 - mutation
51:41 - um
51:42 - for state i'm going to go ahead and just
51:43 - put
51:44 - token null
51:46 - and then user null
51:51 - and also say is user logged in i'll say
51:55 - false so these are kind of the
51:57 - global states of our application that we
51:59 - want to keep track of and they can be
52:00 - used for like
52:02 - adding stuff to the headers or changing
52:04 - and changing what's displayed in the
52:07 - header or side now depending if you're
52:08 - logged in or not
52:11 - and i'll go ahead and add
52:13 - a couple of mutations
52:19 - actually i think it might make more
52:20 - sense if i just keep it you know start
52:22 - with one and then add on later
52:27 - so how view x works is you have
52:31 - your actions your mutations and your
52:32 - state
52:34 - basically you should always invoke your
52:36 - actions from your like view components
52:38 - so your actions are like
52:41 - basically just like event names like i
52:44 - say set token
52:45 - which is going to take in a commit as a
52:47 - first argument and a token as a second
52:51 - and then inside your actions you
52:52 - typically want to call your commit or to
52:55 - your async calls
52:57 - basically this is where you do any type
52:58 - of async logic
53:00 - and then inside your mutations you'd
53:02 - have a method
53:04 - with the same name as that
53:06 - but in this case we're going to take a
53:07 - state and then whatever the
53:09 - the second parameter we pass in which is
53:11 - a token
53:13 - so here basically saying call the
53:15 - mutation called set token and pass it
53:17 - that token object
53:19 - and then inside here we can say
53:20 - safe.token is equal to token
53:26 - so it's kind of a lot of extra like work
53:28 - just to freaking change the value of a
53:30 - token
53:31 - but
53:32 - i guess it's supposed to allow your
53:33 - application to be easier to follow
53:36 - because you know that in order for this
53:38 - to change you must be invoking either
53:40 - you must invoke a mutation in order to
53:42 - invoke a mutation typically you want to
53:44 - invoke an action
53:47 - but okay so how does this help us right
53:49 - so when we log in
53:52 - if we go back to that logging dot
53:54 - logging.view
53:57 - component
54:03 - at this point
54:05 - if we keep track of the response that
54:06 - was returned which will have the
54:07 - username and the password our username
54:09 - and the token
54:11 - we can use that
54:17 - and call
54:18 - that action using dispatch we can say
54:21 - set token response.token
54:24 - and basically that's going to call our
54:26 - stores set token method
54:29 - which is going to call our mutation set
54:31 - token which is going to update our state
54:33 - to token
54:38 - and then we could do the same thing with
54:40 - a set user
54:43 - so response i think actually should be
54:45 - response
54:46 - data user and response data token
54:54 - so same idea with register
54:58 - go ahead and just
55:01 - copy and paste that code
55:03 - same idea
55:04 - set token and set user based on whatever
55:06 - we got registered or whatever is
55:08 - returned from that register endpoint
55:10 - and then i'll go ahead and save that
55:24 - all right so let's go ahead and just
55:26 - force refresh the page just in case and
55:28 - for view x
55:30 - you can install a chrome plug-in called
55:33 - like i think it's called view i don't
55:35 - know what it's called but if you search
55:36 - the chrome store
55:39 - it's called view dev tools
55:42 - so if you install that you basically can
55:44 - keep track
55:45 - of the events that are firing off and
55:47 - how
55:48 - they're affecting your application
55:51 - so like in this case if i were to change
55:52 - this to testing at gmail.com change the
55:55 - password to that and hit login
55:59 - we are getting an error back
56:03 - okay so i was kind of looking through
56:04 - the code and i found that i needed to
56:05 - add s it was mutation and i needed an s
56:09 - and then also i'm trying to call
56:12 - i'm trying i'm like jumping the gun
56:13 - right here i'm trying to call set user
56:14 - and we haven't even defined
56:17 - set user so
56:19 - that's an oopsy on my part again so
56:21 - let's just go ahead and
56:24 - allow us to also set a user state
56:29 - so set
56:30 - user
56:32 - users null
56:36 - and hopefully this will work this time
56:38 - it's going to hard refresh just in case
56:40 - there's like any type of
56:43 - issue
56:46 - please work
56:48 - no
56:52 - uh
56:57 - is it because i use a lowercase u there
57:00 - probably
57:03 - moment of truth
57:05 - oh my page refreshed oops
57:08 - all right sorry this is getting kind of
57:10 - annoying but you know debugging is part
57:11 - of programming so you got to get used to
57:14 - spending 20 minutes debugging something
57:15 - where you've left off a character or
57:17 - something
57:21 - all right i'm going to pause this video
57:22 - and i'll come back when it's fixed
57:23 - because i'm wasting too much time
57:26 - all right so
57:27 - i realized that in the main.js file i
57:30 - completely forgot to add
57:32 - state or sorry to add store
57:35 - so before vue had no idea how to even
57:37 - access the store
57:39 - but now it should be able to access the
57:41 - store now
57:44 - so let me just refresh this page and try
57:47 - that one last time
57:54 - cool it worked
58:00 - so now in
58:01 - this view dev tools you can actually see
58:04 - every time that
58:06 - we commit an action in the state changes
58:09 - we can kind of check how this state is
58:11 - changing over time
58:12 - if we want to we can actually revert and
58:14 - time travel back to
58:16 - like the state of the application before
58:18 - i set those tokens
58:20 - and time travel forward
58:23 - and we'll see this how this can be
58:25 - useful later on
58:26 - when i'm trying to hide these login and
58:28 - sign up
58:28 - tokens up here
58:32 - um
58:35 - so let's actually try to use those right
58:37 - so if we were to go
58:42 - to the header now
58:44 - and we only want to show these
58:47 - if the user is not logged in
58:53 - so what i could do just add another
58:54 - state say is user logged in
58:58 - set that to false
59:00 - and i could say if token is defined
59:05 - go ahead and say
59:07 - state dot is user logged in and signal
59:10 - to true
59:13 - otherwise
59:16 - set it to false
59:25 - and then i could use this is user logged
59:27 - in if i were to go to the header
59:29 - component here
59:31 - in fact let me just delete this hello
59:32 - component just like is that we even
59:34 - using that still
59:36 - yeah i guess we are i'll keep that so
59:38 - anyway uh the header component
59:42 - if i wanted to hide those two items
59:45 - i could simply do v if
59:49 - and then i could say
59:51 - store dot state
59:53 - dot is usually logged in
59:56 - so this will only display
59:59 - if that is true
60:02 - in fact i added that to the wrong thing
60:04 - so let me add it to the button
60:10 - same thing here i'll add it to the
60:11 - button
60:12 - so only display it if the user is not
60:14 - logged in so i'll go ahead and negate
60:16 - that
60:18 - save that file and hopefully these are
60:20 - hidden now
60:26 - i think i need to relog in one more time
60:33 - all right so after we logged in you saw
60:34 - that those two links actually
60:36 - disappeared from the header and i can go
60:38 - back and time travel
60:40 - to like different states so in this
60:42 - state user and token and is logged in as
60:45 - false
60:46 - and this state token is defined
60:48 - is user logged in is true
60:51 - uh user is no for some reason i think
60:53 - that's because we totally forgot to
60:55 - uncomment that code here
60:58 - so i will do that
61:00 - change that to response data token
61:05 - make sure register is all good
61:12 - let me just hard refresh this and
61:14 - retest that one more time
61:35 - so i keep getting all these like teeny
61:37 - little bugs and that's because i'm i'm
61:38 - moving too fast so just
61:40 - a little piece of advice you know slow
61:42 - it down and relax you don't have to like
61:44 - be a speed coder because the faster you
61:46 - go the more chances you're gonna make
61:48 - stupid mistakes
61:51 - so hopefully i'll slow it down in these
61:53 - future videos
61:56 - all right so now the user's defined here
61:57 - we can go back in time travel
61:59 - and we can see those links appearing and
62:00 - just disappearing as we
62:03 - change our state
62:06 - all right so like always let's do a
62:08 - quick little recap so we brought in the
62:10 - ux module
62:13 - inside the main.js we went ahead and
62:14 - included
62:16 - view router sync and we included the
62:18 - store
62:19 - we told
62:21 - view router sync to sync the store to
62:23 - the router and then we also make sure
62:25 - you include line 29 setup view to use
62:28 - that store
62:31 - and then inside this
62:32 - project the client project we created a
62:34 - store
62:35 - folder we created a store.js
62:39 - export
62:41 - which basically
62:42 - says
62:43 - or pretty much tells you to use view x
62:47 - we create a view x store we tell it to
62:49 - use strict mode we
62:51 - created these three different state
62:52 - variables that we're going to be using
62:53 - throughout our entire application
62:55 - and then we created the actions and
62:57 - mutations that are needed to kind of
62:59 - change those as needed
63:03 - and then lastly in the login and
63:05 - register
63:06 - endpoints
63:07 - we are keeping track of the response
63:08 - that's returned from the server
63:10 - and we are setting token and setting
63:12 - user based on those two responses and
63:14 - we're going to use these two later on
63:16 - right now we're kind of only focused on
63:18 - is user logged in but these will be
63:20 - useful later on
63:23 - and then lastly in the header
63:25 - we wanted to hide
63:26 - certain navigation based on that state
63:29 - so we're saying hide the login button
63:31 - and hide the signup button if the user
63:33 - is
63:34 - logged in
63:47 - all right so that pretty much wraps up
63:49 - part three i think we did a lot of extra
63:51 - work getting everything set up with the
63:52 - registration and login and then
63:55 - brought in a couple of new
63:57 - modules so
63:59 - i think it's good to have a little break
64:00 - here
64:01 - maybe make part four in a little bit
64:02 - after this is all sunk in
64:04 - um thanks for watching again i'm cody
64:06 - seibert and feel free to follow my
64:07 - twitter to get updates as to when i
64:09 - release part
64:11 - four alright thanks for watching