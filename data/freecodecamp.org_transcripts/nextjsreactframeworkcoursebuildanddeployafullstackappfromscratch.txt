00:00 - Alicia Rodriguez teaches this complete
00:02 - course on next.js she will teach you how
00:04 - to use nexjs to build an application
00:07 - from scratch nexjs is a react framework
00:10 - that gives you building blocks to create
00:12 - web applications Alicia is a senior
00:15 - software developer in London and she's a
00:18 - great person to teach this course
00:21 - in today's video we are going to
00:25 - [Music]
00:34 - a pool stack react app that has the
00:37 - whole front end
00:39 - combined into one project net yes is in
00:43 - high demand it's a trendy JavaScript
00:45 - react framework it makes building apps a
00:48 - small and large a lot easier because it
00:51 - has a lot of features out of the box
00:53 - that you can use that will save loads of
00:55 - time it also allows you to build react
00:58 - apps with built-in server-side rendering
01:01 - and Page free rendering if you don't
01:04 - know what these words mean don't worry
01:06 - we will cover these Concepts today for
01:08 - now you just need to know that it means
01:10 - that it's ideal for having a great user
01:13 - experience and good SEO I'm going to
01:16 - show you how to build this event website
01:18 - from the ground up but if you get lost
01:21 - at any point please don't hesitate to
01:24 - use the comment box below to ask for
01:26 - help also I'm going to leave the link to
01:29 - the whole source code in the description
01:30 - box below feel free to download it and
01:33 - make it your own you can customize it as
01:35 - device and add all the features you want
01:37 - by the end of this video I'm going to
01:40 - suggest a few things you can add to this
01:42 - project so you can keep practicing and
01:45 - using everything you learned in this
01:47 - video Try don't skip any of the steps so
01:50 - that we ensure that by the end of the
01:52 - tutorial you know how to use Nest yes to
01:54 - build up underscore features what
01:57 - exactly are we going to do I'm going to
02:00 - walk you through the content of this
02:02 - video and all the points we are going to
02:04 - cover which I'm going to leave right
02:07 - here we'll build all the UI components
02:10 - and we'll make them pretty by using CSS
02:12 - and we will create an API again within
02:16 - our project I know it sounds crazy but
02:19 - we can do this with API Roots because it
02:22 - lets us create an API endpoint as a node
02:24 - by the end of the video we will have a
02:26 - full foreign
02:30 - or the front and back will live within
02:33 - the same repository and finally we will
02:35 - deploy our website for free so you can
02:38 - share it with the world for exercise for
02:41 - this video I'm going to start with the
02:44 - perfect size for this tutorial you don't
02:46 - need to have a nastiest knowledge but I
02:49 - think you should know about web
02:50 - development HTML CSS and JavaScript and
02:54 - it will definitely really help if you
02:56 - have some basic knowledge of react if
02:58 - you haven't built a react app before I
03:00 - advise you to start by learning react
03:03 - before jumping on learning Nest or any
03:05 - other framework or technology is based
03:07 - on react but hey it's up to you you will
03:10 - then react on the way for sure
03:12 - let's start writing and let's start with
03:15 - what is next yes
03:17 - if we go to the Netflix website we can
03:20 - see that necess declared itself as the
03:22 - react framework for production
03:25 - next gives you the best developer
03:28 - experience with all the features you
03:30 - need for production hybrid static and
03:32 - server-side rendering type script
03:34 - support smart building root prefetching
03:38 - and more and no config needed react is a
03:42 - JavaScript library that help us to build
03:44 - complex user interfaces a lot easier
03:47 - than it would be with just JavaScript
03:49 - unless yes is a framework on top of
03:53 - react so the difference between a
03:55 - library and a framework is that a
03:57 - framework is bigger than a library it
03:59 - has more features and multiple built-in
04:02 - libraries so Nas yes then react
04:06 - capabilities by giving us as SDK server
04:09 - development kit these are a set of
04:11 - documentation processes rules and
04:14 - guidance that tell developers how to
04:16 - structure the Ripple and write the code
04:18 - and also all of these tools and
04:21 - libraries are out of the box so we don't
04:23 - need to spend time implementing or using
04:25 - or the third party libraries to solve
04:28 - common problems but it is still a react
04:31 - framework so we still build react
04:34 - components and the underlying we add
04:36 - principles remain the same one of the
04:38 - most important benefits of using necess
04:41 - is the built-in server-side rendering if
04:43 - you have experience working with react
04:45 - you probably know that reactive renders
04:47 - the page in the client with react 18
04:49 - they have introduced a bunch of new
04:51 - functionality to allow us to run their
04:54 - pages on the server side but reality is
04:57 - still mainly known for client side if
05:00 - you want to learn what's new in reacting
05:02 - team check this video
05:04 - okay what is the difference between
05:06 - rendering the page in the server or the
05:09 - client client-side rendering CSR let me
05:13 - go to a react website this page is
05:15 - getting rendered on the client what
05:17 - happened here is the client will
05:19 - download the code from the server then
05:21 - the JavaScript code will be executed by
05:24 - the browser and all the HTML content
05:27 - will be rendered to understand what code
05:29 - is render in the client or the server
05:32 - you can go to any website right click
05:35 - anywhere on the page and then click on
05:37 - view page Source here we can see that
05:40 - the content of our page doesn't show
05:42 - here
05:43 - if we try to look for these specific
05:46 - texts and we start here we can see that
05:50 - we cannot find it we only have the basic
05:54 - HTML structure this is because all of
05:57 - this content is being rendered in the
06:00 - browser of the user on the client not on
06:03 - the server so let's say one more time
06:05 - all the HTML code is sent from the
06:08 - server to the client the moment the user
06:11 - this is the page so we pasted this page
06:14 - we the client request the server to see
06:17 - this page this page which we are
06:19 - requesting doesn't contain the data yet
06:21 - the server serves to the client in a
06:24 - bundle all the JavaScript and the HTML
06:26 - code and then the browser executes this
06:28 - and is at that point when we see it this
06:32 - is what happened when we run the pages
06:33 - in the client server side rendering SSR
06:37 - now if we go to the next year site and
06:40 - we open the source code right click view
06:42 - source code we can see we have here all
06:45 - the content now if we search for this
06:48 - specific text
06:50 - um
06:51 - okay
06:53 - I can see it here
06:55 - so in this case all the content all the
06:57 - code has been pre-rendered on the server
07:00 - SSR is all about preparing the content
07:02 - of a page on the server instead of on
07:05 - the client so when we visit a page the
07:07 - client already has the content
07:09 - okay so server side rendering allow us
07:13 - to fetch the data and pre-render the
07:16 - components on the server okay so when a
07:19 - request hits the server the page and
07:22 - content will be ready for us to consume
07:24 - and for the search engines to Chrome
07:26 - that's why this is good for SEO when
07:30 - shall we use server-side rendering over
07:32 - client-side rendering them there are a
07:34 - few reasons why we will choose SSR over
07:37 - CSR or CSR over SSR it all depends on
07:41 - the user experience we want to create
07:42 - and on our requirements SSR has lots of
07:46 - benefits thanks to this for rendering
07:48 - like it can improve the performance and
07:50 - experience depending on the app you have
07:52 - it caches the data and it's great for
07:55 - seo seo stands for search engine
07:58 - optimization
07:59 - SEO is not important for all the pages
08:01 - for example if the user needs to log in
08:04 - to see a specific page then this page
08:06 - doesn't need to be rendered on the
08:08 - server search engines will never see
08:10 - this page because the user needs to log
08:12 - in first so in this case CSR is better
08:16 - If instead we have an event website and
08:19 - we want the certain news to find our
08:21 - content we want to be picked up by the
08:24 - search engine Scrolls so we have more
08:26 - probabilities to reach a bigger audience
08:28 - so people can find us and buy tickets to
08:31 - our events then SEO is really important
08:34 - for us okay I hope you have a better
08:37 - idea what Netflix is and why companies
08:40 - choose to use Ness yes
08:42 - so necess is a react framework ready for
08:45 - production because it comes with lots of
08:47 - configuration so you don't need to do it
08:49 - and it's fully extendable react is
08:52 - already really popular and some of the
08:54 - advantage that navies offer us is to
08:56 - render the pages on the server to
08:59 - improve SEO and cash
09:01 - how to create a nastiest project let's
09:04 - click on documentation and get started
09:06 - right next year's documentation is
09:09 - really complete and useful and you can
09:11 - learn how to use this framework just by
09:14 - going through it and reading about its
09:16 - features I'm not trying to make a sound
09:18 - super straightforward it is not it can
09:21 - be confusing and you might need to spend
09:23 - some time trying to figure out how
09:25 - everything works together but in general
09:28 - it's good to get familiar with reading
09:30 - and understanding the documentation of
09:32 - the tech you are using anyway now that
09:35 - we know what Ness yet is and we have an
09:37 - idea when we will want to use Nest yet
09:40 - let's click on documentation and get
09:43 - started okay so here they tell us their
09:45 - requirements we need to make sure we
09:47 - have node installed and we have the
09:50 - version 12 or later and we also need to
09:54 - have npm npm stands for node package
09:57 - manager and it's a tool for installing a
10:00 - managing Library risk in JavaScript
10:02 - projects and we will need that for
10:05 - installing Nest yes you can also use
10:07 - yarn or pnpm but I'm gonna use npm in
10:11 - this project
10:12 - okay so to check the version of note you
10:15 - can go to your terminal and do note
10:19 - and iPhone V and it will tell you the
10:22 - version I have installed the system one
10:25 - if you don't have it installed just go
10:27 - to Google and follow the steps it
10:29 - probably help reduce tool first and VM
10:32 - so NVM like this
10:34 - because this is the node versions
10:36 - manager so with this you then can go
10:39 - ahead and and do things like install
10:41 - version and you could copy this room for
10:45 - example and install it like this
10:47 - um and so I also
10:49 - um you can do NVM help and it's going to
10:52 - tell you all the commands that you can
10:54 - run and so on so if you don't have not
10:56 - installed you need this one because the
10:58 - built-in service I render it uses
11:01 - node.js under the hood so we need not
11:03 - installed okay
11:06 - so I hope you're all good and you have
11:08 - npm and not installed in your in your
11:11 - computer and now let's go ahead and
11:15 - create a new directory where we want to
11:17 - save our project
11:19 - so I'm just gonna clear this and I'm
11:22 - going to create a new folder so MK there
11:26 - and I'm just gonna call it
11:29 - um
11:30 - uh my projects
11:34 - okay so now I can go to this app folder
11:39 - just by doing CD my projects
11:42 - okay and I have it here so now let's go
11:45 - back to the website here and let's copy
11:49 - this line NPS create nest
11:52 - uh app so as as I said you can use yarn
11:56 - you can use pmpm but I'm gonna use this
11:58 - one
11:59 - okay so I'm just gonna paste it here and
12:04 - now we're going to add the name how we
12:07 - want to name our project so I'm going to
12:10 - call it
12:11 - um
12:13 - um events up
12:17 - and we click enter and it should only
12:20 - take a few minutes
12:23 - we'll wait until it finishes
12:28 - so I'm going to use vs code as my I did
12:31 - but you can use any ID you want web
12:34 - store or sublim or any other one I find
12:37 - vs code really easy to use and it's free
12:40 - so yeah so if you want to use vs code
12:43 - you can open the program
12:45 - this by I'm just gonna do it from here
12:48 - vs code
12:52 - oh
12:55 - okay
12:57 - one second
13:01 - yeah I have it in my other screen so I'm
13:03 - just gonna open a new
13:06 - um
13:10 - yeah Windows okay
13:13 - so let me bring it up here
13:20 - okay it's taking a little bit
13:23 - because it's going a little bit slow on
13:25 - my computer because he was installing
13:27 - next okay so if we want to open a vs
13:30 - code we can come here
13:32 - um open and click on uh
13:36 - open folder
13:42 - okay it's loading and then I could use
13:45 - navigate to wherever you um have your
13:48 - project but I like to do something else
13:51 - there is a command that is really handy
13:53 - that if you don't have it installed I
13:55 - recommend you to install it because
13:57 - allows you to open your project directly
14:00 - from your terminal
14:01 - and so you need to to install it you
14:05 - need to be in vs code and you need to do
14:08 - a command shift p
14:11 - and it is will open the command palette
14:14 - and type here a shell command here it is
14:18 - install code command impact press enter
14:23 - and successfully so I already had to use
14:25 - tools so maybe that's why it took no
14:27 - time to install it okay so now if we
14:29 - close this okay we are going to close
14:31 - this and we come to our terminal where
14:33 - we need to go into our projects first so
14:36 - and we can do LS and we see that now
14:38 - these events have folder has been
14:41 - created so we can go into it okay and
14:43 - now from here we can type code space Dot
14:48 - and
14:50 - that's it this is going to open our
14:53 - project
14:56 - hello hello
14:59 - and then clicking and open new folder
15:02 - and find the new project is just
15:04 - released to use that this and something
15:07 - else that you can do here is you can
15:09 - click um
15:10 - you can enter open space Dot and it's
15:15 - going to open the folder where you have
15:18 - and your projects okay so we can go to
15:22 - package.json and here we can see this
15:24 - the scripts to run our app
15:27 - and so we can see here the the next
15:30 - script to to run the the death
15:33 - environment
15:35 - so I'm just gonna click in new terminal
15:39 - let's undo npm run
15:42 - uh
15:45 - let me just
15:47 - let's shop again okay npm run that this
15:50 - is all we need and this is going to
15:52 - compile our code around the server it's
15:55 - going to uh hot reload and fast refresh
15:59 - the code this means that every time we
16:01 - make a change and we save a file next
16:04 - we'll reload the page for us
16:07 - okay we have an issue here okay
16:12 - okay I think I know why this is let's
16:14 - use type note hyphoon B
16:18 - oh yes okay so I can see that here in
16:20 - this terminal I'm using the version 8
16:23 - the note version eight I meet at 12 or
16:27 - later so
16:30 - it's great that I'm running into this
16:32 - issue so I can show you how to upgrade
16:34 - the version and so I'm going to use the
16:37 - MDM command
16:39 - um and so NVM and I already have
16:43 - installed the sustained version because
16:45 - this is what I'm having this other
16:47 - terminal
16:49 - um so I'm just gonna copy this I'm gonna
16:51 - type use and then paste V and the
16:55 - version that you want
16:58 - um okay I have another issue
17:18 - um go ahead and do npm run that
17:22 - and yeah we can see here that we have a
17:25 - local host available and if we click in
17:28 - the link it's going to open the browser
17:31 - for us
17:34 - and there you go we have a nest app
17:37 - already running
17:40 - it's going to take you to their own
17:42 - website but yeah
17:43 - this app is already running in our local
17:48 - now before coding our app we need to
17:50 - have a look at the app we want to build
17:52 - so first we have a home page
17:55 - we have a header with a VAR navigation
17:57 - at the top with home events and about us
18:01 - then this section is highlighted the
18:03 - events in London San Francisco and
18:06 - Barcelona and
18:07 - and it will scroll to the bottom we have
18:10 - a our footer here
18:13 - okay so then and the header and the
18:16 - footer sections are going to be shared
18:18 - across all the pages
18:20 - so if we go to about us we have both
18:23 - here you go to events we have them here
18:26 - as well okay so now that we are in the
18:29 - events page we can go to the events in
18:31 - London and it's going to show us all the
18:33 - events that take place in London
18:36 - so we can go to the at stack
18:39 - and it's going to show us information
18:41 - related to this event and also we have
18:45 - here a little form where we can register
18:47 - if we want to assist to this event
18:51 - so this is the idea
18:53 - okay this is going to be a simple
18:55 - website but as you can see we have here
18:57 - a few pages that are going to allow us
18:59 - to understand the dynamic routing we
19:02 - think next
19:03 - let's think about the what is going on
19:06 - Behind These screens we have an event
19:09 - website right where we are displaying
19:12 - events across different cities and in
19:15 - each City we have different events
19:18 - okay so let's think about how many pages
19:20 - we need here so we have a page for home
19:23 - for about us and for events that's three
19:25 - and then we have a page per city right
19:29 - so one for London San Francisco and
19:31 - Barcelona and then in each City we have
19:35 - a bunch of different events so three in
19:38 - London
19:39 - San Francisco 4 and Barcelona 5.
19:44 - so we have a total of 18 pages so what
19:48 - if I tell you that we only need to
19:50 - generate five pages we only need to
19:52 - generate home
19:54 - events one per City and one pair events
19:58 - a single event and the about us
20:01 - because next we've generate the rest of
20:04 - the pages for us
20:06 - so we will have three static Pages hopes
20:09 - events and about us and two template
20:13 - pages so this would be one template and
20:17 - this will be the second one
20:19 - so from 18 pages that our website has we
20:23 - only need to build five pages and this
20:25 - is the power of Nest yes
20:28 - now that we know what we are going to
20:30 - build let's have a look at what nurse DS
20:32 - has created for us
20:34 - as I said earlier netias requires a
20:37 - specific file structure so it's
20:40 - important we respect it and we place our
20:43 - files in the right folders
20:46 - right so let's just make this smaller
20:50 - uh yes so first we have and Dot next
20:55 - folder B dot vs code are not modules we
20:59 - don't need to worry about this for now
21:01 - so we can go to let's start first title
21:04 - something simple here is where we have
21:06 - our where we can place our CSS
21:09 - so at the moment we have this Global CSS
21:12 - and home module CSS then we have the
21:15 - public folder that holds the public
21:17 - resources we will place here any static
21:20 - content like images videos fonts and
21:24 - icons because this is going to be
21:26 - accessible from our root domain at the
21:30 - moment we have the favicon and this sdg
21:33 - and this favicon by the way the favicum
21:35 - is this logo here this
21:38 - okay so if we store any of these
21:42 - elements outside this folder so we store
21:45 - them outside here they won't be
21:47 - available by next year's and anything we
21:50 - stored here
21:52 - is going to be accessible by anyone so
21:55 - keep that in mind this is the public
21:56 - folder
21:58 - okay so then we have pages
22:02 - this is a really important folder
22:04 - because we are going to set up here the
22:06 - file based routing so we'll have here
22:09 - all the pages that our app has so home
22:12 - all events and about us and this folder
22:16 - here is our API
22:19 - is where we are going to create our
22:22 - backend connections
22:24 - um next yes as you can see gives us an
22:26 - example of
22:28 - um all the like pages that we can have
22:31 - like we give us an example of fun index
22:33 - and also a hello with I
22:37 - um HTTP request so basically we have
22:40 - three main folders public pages and
22:43 - styles in public we store all the static
22:46 - content pages is where we store all our
22:49 - source code and style is for our CSS we
22:53 - can add more folders if we want so we
22:56 - could for example have here a data
22:59 - folder
23:02 - then we could have a list folder oh I'm
23:07 - creating files sorry let me just do it
23:09 - again
23:11 - let's do it here
23:13 - I need to be outside so here data okay
23:18 - do you see how the icon has changed
23:22 - um
23:23 - helpers
23:25 - okay I also said that we could no
23:28 - outside we could have lips okay
23:33 - and yeah well we could let any other
23:37 - folder we want and okay yes another one
23:40 - and that I really like to have is a
23:43 - source folder that this is what I'm
23:46 - going to use to place all the components
23:49 - let's go ahead and start building our
23:52 - pages
23:53 - we need to put all our Pages here next
23:57 - is going to create a path for us so if
24:00 - we want to have a about us page we can
24:03 - create
24:05 - about us like this dot yes JavaScript
24:10 - click enter and um
24:14 - now we can create a react component here
24:17 - so
24:18 - um const page oops
24:21 - page
24:25 - and
24:26 - I'm gonna return here
24:29 - um a H1
24:35 - um about us page for example and down
24:39 - here I'm just gonna support this sport
24:42 - default page
24:45 - and now if we save this and and we go to
24:48 - the browser and I type um
24:50 - I type forward slash about us
24:56 - Nest is automatically creating a route
24:59 - for this about us page
25:03 - the file must match exactly the path
25:06 - that we specify here
25:09 - okay so we can now have something like
25:12 - for example about us without the iPhone
25:16 - okay and we will also don't use the
25:22 - extension so we wouldn't
25:23 - rely.js like this
25:27 - only like this okay our index is our
25:32 - root page so if I request reaches our
25:34 - domain like
25:36 - um slash and nothing our app will load
25:39 - our index page next don't create this
25:42 - root as in this so it doesn't create it
25:45 - like this
25:47 - it will throw an error so it creates the
25:50 - slash forward
25:53 - we can also create nested so folders
25:56 - let's say I want to have all my single
25:59 - events within events
26:01 - so if I create now a new file event one
26:06 - yes and we bring this code that we have
26:10 - over here here to over here and we just
26:14 - change
26:15 - days for event one
26:18 - and now this part the part that Nash
26:22 - will create for us will be events
26:25 - slash forward slash events what did I
26:29 - say event one
26:31 - okay so next we'll create a root based
26:35 - on this subfolder
26:37 - if we go to the path route events now
26:42 - we can see that these throws an error
26:44 - because we don't have any um we don't
26:46 - have an events page
26:49 - here we only have these events to folder
26:52 - and then we have the events one but we
26:54 - don't have a a event page like events
26:57 - page like this to have this what we need
27:00 - to do is to create an index page
27:03 - so indexed
27:06 - yes I'm gonna bring this code
27:13 - okay and now I'm just gonna call it
27:16 - events page
27:18 - now if we save this okay and now we come
27:20 - to our browser we can we can see now our
27:24 - page events page
27:26 - so it wouldn't work like this it just
27:29 - works like this
27:31 - so when SDS finds an index file within a
27:35 - folder next will create a root path for
27:38 - the files this is the routing file
27:40 - system of nasds and what next year's
27:44 - does is watches the URL and when this
27:47 - changes when we navigate to another page
27:50 - it prevents the browser for sending an
27:53 - extra request to the server and instead
27:56 - it displays the new page we specify so
28:00 - event one
28:02 - and this is the advantage of having a
28:05 - single page application nothing new from
28:08 - a real point of view we also have this
28:10 - will react but I think net yes makes it
28:13 - really easy to create pages and new
28:15 - directories if you compare it to react
28:17 - in real you will have to add a router
28:20 - library to manage this in next we can
28:22 - have multiple Pages here and that will
28:25 - take care of all of them and you don't
28:29 - need to install any external library to
28:31 - help you manage your pages you get it
28:33 - all out of the box with Nest so it makes
28:36 - it really easy to and and fast to start
28:39 - working with it
28:40 - okay so now let's clean up the index
28:44 - page and we'll get rid of everything we
28:47 - don't need
28:48 - just gonna go to here okay all of this
28:51 - let's just get rid of all of that
28:55 - so I'm just gonna leave this head here
28:58 - we'll come back to it so I'm just gonna
29:00 - change this for events
29:04 - events
29:08 - I'm just gonna leave this footer here
29:10 - okay we have our home page now I'm gonna
29:14 - start by adding um the sections that we
29:17 - have so first we have
29:19 - um we need a header so I'm just gonna do
29:23 - this
29:24 - Heather
29:25 - and in the header we have a navigation
29:29 - and then we also have a logo We'll add
29:32 - all of that later and we have an anchor
29:35 - href
29:37 - is gonna leave it empty for now I think
29:39 - and we have events
29:42 - and then I'm just gonna duplicate this
29:45 - by doing shift an option
29:49 - yeah it's shifting off you my keyword
29:51 - okay and I'm just gonna put here home
29:54 - and then about us about us and we
29:59 - actually have this page so we could do
30:03 - about
30:04 - uh somewhere we have all of them so
30:06 - let's just do it events
30:11 - okay
30:14 - okay yes so this Arrow will come back to
30:17 - this later when we have a look at how to
30:20 - well how to use this link component from
30:23 - next us
30:25 - all right so let's just save this and
30:28 - now
30:30 - okay we have here our links
30:33 - taking us to our page
30:35 - now about us okay this is working and
30:38 - then we have a main page and then the
30:42 - footer
30:43 - and I'm just gonna do
30:46 - um I have some text here with me so I'm
30:49 - just gonna copy this
30:52 - okay this is just a copyright
30:57 - okay so we have a footer we have some
31:00 - Styles we'll look into these Styles
31:03 - later at the moment I'm I'm only care
31:06 - about creating
31:08 - um the home page okay here in the
31:10 - section we should have three days for
31:12 - each event card okay so let's remove
31:16 - this and I'm just gonna add div and here
31:20 - we'll have uh H2 with
31:23 - events events
31:26 - in London
31:28 - then
31:31 - I'm just gonna hear some description
31:33 - text and for that I'm gonna use learning
31:36 - it soon so if you don't know this
31:38 - website let's go to it Laura ipsum
31:42 - and this is just a placeholder text
31:45 - okay so let's disc copy this
31:51 - okay so
31:54 - um I have
31:57 - for now I'm just gonna
32:00 - let's just leave it like this
32:03 - [Music]
32:03 - um
32:04 - and then we have the title and we have a
32:08 - test okay I just realized that
32:11 - um well we need links to each of these
32:14 - cars so this needs to be a link href and
32:18 - we Are Gonna Leave This empty for now
32:20 - I'm gonna duplicate this and say events
32:22 - in San Francisco
32:26 - and then duplicate this and in Barcelona
32:33 - okay so let's just go back to here
32:37 - yeah we have here all our events so you
32:41 - see there is a link but it's empty so at
32:43 - the moment
32:45 - um we'll just leave it like this let's
32:47 - just go to our about us page
32:51 - okay in our about us page we are gonna
32:53 - have a title and so let's just
32:58 - go here at this
33:02 - and I'm just gonna add some placeholder
33:05 - text
33:08 - we'll make this a little bit better
33:11 - later
33:13 - okay our about us page is done and then
33:17 - let's go to our events page okay
33:22 - uh events is this one yes and here what
33:27 - I have is
33:29 - we have we should have a div
33:33 - and here we need again the same
33:36 - structure as earlier so I'm just gonna
33:39 - copy it look what is it this
33:45 - foreign
33:49 - because here we again have the same
33:52 - Three Links in this case in in the
33:55 - design we don't have
33:57 - [Music]
33:57 - um
33:58 - we don't have this description
34:01 - the same as this
34:05 - and this we only have a link and within
34:09 - each link an image with the text
34:12 - so let's go let's go to the browser okay
34:17 - okay
34:21 - okay so we have our main Pages we have
34:24 - home we have events and we have about us
34:27 - but now we are missing all of our single
34:30 - events for all the webs we want to have
34:33 - Dynamic Pages this means we don't want
34:35 - to specify the names of the page so for
34:38 - example if we have event for Halloween
34:41 - we could come here and do Halloween
34:45 - in London but this would mean like I
34:49 - will have to create a specific page for
34:52 - all the events and we might have like
34:53 - 100 events but we don't want to do this
34:56 - what we want is to have one page and we
35:00 - want our path to be whatever the name of
35:03 - our event so we said that Halloween
35:06 - London so we want our path to be
35:09 - um Halloween
35:11 - in London
35:14 - or Halloween in
35:17 - um
35:18 - Barcelona or and so on so we want this
35:21 - part this this path to be dynamic and to
35:25 - be the same as the title of our events
35:28 - but there is a better way of doing this
35:30 - which is create a dynamic page if this
35:33 - is like a template that will dynamically
35:36 - render the content and create the this
35:41 - path for each event
35:43 - okay so I'm gonna delete this
35:47 - like this and to other Dynamic page what
35:50 - we need to do is create a new file and
35:54 - add square brackets and inside we are
35:57 - going to add identifier so I'm just
35:59 - gonna add ID like this and then dot Js
36:03 - and this this is how you create Dynamic
36:06 - files so now
36:08 - um if I copy I'm just gonna copy here
36:12 - um
36:13 - our okay just let's say event and
36:19 - Halloween in London
36:21 - no as you say our single event for
36:26 - example
36:28 - um and by the way this name here
36:31 - um this is up to you you can put
36:33 - wherever you want if you want you can
36:35 - put event
36:37 - ID
36:38 - or you can put hello you don't even need
36:42 - to use the ID word sometimes you use
36:45 - well it's quite common to use ID or
36:47 - slack like this but yeah I'm just gonna
36:51 - leave a like ID
36:53 - so this is how Nexus identified the
36:56 - dynamic files when we add the square
36:59 - brackets around them and this page will
37:01 - be loaded for different parts and
37:03 - different page names so we come here
37:06 - okay if I change this and I just write
37:09 - one two three four
37:11 - we also get it if I write 1 5 we also
37:15 - get it
37:17 - um
37:18 - so this means that at the moment any
37:20 - path that we specify here after the
37:23 - events forward slash will be picked up
37:27 - and we can still have a static Pace mesh
37:31 - to Dynamic one so for example here we
37:33 - have event one so if we come here we
37:36 - have still our event one page our stat
37:39 - static page
37:42 - okay so now we can have our single
37:46 - events render dynamically but what about
37:50 - our events per City so here we go back
37:54 - to the home page
37:57 - you can see here that we have three
37:59 - pages events in London event San
38:01 - Francisco and event events in Barcelona
38:04 - we could create a page for each of them
38:07 - so we could create three pages but in
38:10 - the future I might we might want to add
38:13 - more cities or other categories and we
38:15 - don't want to have to be duplicating
38:17 - work so we can also have Nest Dynamic
38:22 - world what do I mean by this
38:24 - Okay so
38:26 - we want to have something like
38:29 - here if I come here we want to have
38:31 - events I'm just gonna do it here that
38:34 - the better just let me type here so we
38:37 - want to have this path events
38:39 - is life
38:41 - um
38:42 - event per City I'm just gonna type it
38:45 - like this and then the event the event
38:49 - itself okay nobody is doing this but
38:52 - just leave it like this
38:54 - so this would be equal to
38:58 - events
39:01 - okay
39:03 - event in
39:05 - London
39:07 - and these for example Christmas
39:12 - and London
39:16 - or this could be the same as events in
39:20 - some from Cisco and then I don't know
39:25 - new your no sorry New Years if
39:31 - I guess
39:32 - okay
39:34 - so we could have something like this so
39:37 - to do this and you see that I'm adding
39:41 - here this square brackets well this is
39:43 - because we can always create a sub
39:46 - folders and random dynamically just by
39:50 - adding these square brackets so we could
39:52 - come here and where we have okay and we
39:55 - think events we are going to create a
39:57 - folder on
39:59 - I'm just gonna call it cut four
40:01 - categories and then within this one I'm
40:04 - I'm just gonna move this idea within
40:06 - this one yes
40:08 - okay and within the categories I need
40:11 - this page over here right so we need to
40:14 - create an index
40:16 - so index.js
40:20 - and then I'm just gonna be lazy and
40:24 - well yeah I'm just gonna copy this and
40:26 - then I choose the data okay
40:30 - okay
40:31 - events in London I'm just gonna leave it
40:34 - like this
40:36 - okay
40:41 - and I guess we have event one
40:47 - event two and then three and four and
40:52 - five I'm just gonna print six okay so
40:55 - let's see how this works if we go to our
40:57 - browser um we type events we can type
41:01 - here whatever we want as we said because
41:05 - this is going to pick up anything that
41:07 - match this path so F no no for example
41:13 - okay so I need to remove where was it
41:19 - this from here
41:21 - just save it again
41:23 - and we can see our single event and now
41:26 - we go to the events in London like this
41:29 - we can see events in London if I decide
41:32 - to type here wherever I want I can still
41:35 - see events in London
41:36 - great this is working now we need to
41:39 - connect these links with our pages so
41:42 - when we click in San Francisco here for
41:44 - example it take us to the right page
41:47 - and um it sure was the the right content
41:50 - at the moment and we just see the same
41:53 - contest for all the paths that goes
41:56 - after events
41:59 - okay but first we need the data so go to
42:01 - the description box and download the
42:03 - Json file I've attached I have it here
42:06 - ready so I'm going to drag it into this
42:09 - data folder
42:13 - so
42:14 - just drag it and let me show you what I
42:17 - have here
42:18 - okay so we have
42:21 - um
42:23 - two objects events categories and this
42:28 - is
42:29 - um an array of
42:31 - this is an array with all the events
42:35 - category that we have in this case our
42:37 - category category is the city so events
42:40 - for London with the title and an ID a
42:44 - description and an image that we are
42:46 - going to use for our Pages for for our
42:49 - homepage page
42:51 - um for our events page
42:53 - and and the same with San Francisco and
42:56 - Barcelona
42:57 - all events which is an array of objects
43:00 - each holds the information of the event
43:03 - the idea the title the city description
43:07 - image and email register we'll look into
43:11 - this later on okay so we have here
43:16 - um quite a few
43:18 - um events and as we can see we have
43:20 - identifier for each of them and and the
43:24 - city where each of these events take
43:26 - place okay now we need to get access to
43:29 - the specific data for each page so
43:32 - extract the dynamic enter path value
43:36 - this this Dynamic enter path and print
43:41 - the data that belongs to each idea so
43:45 - print all of these data this data could
43:48 - be coming from an external Source but in
43:51 - our case we'll have it within our
43:53 - project in this data folder next allow
43:57 - us to render our content in different
43:59 - ways depending on our application's use
44:02 - case so we have pre-rendering with
44:04 - server-side rendering or static
44:07 - generation and updating or creating
44:10 - content at runtime with incremental
44:13 - static regeneration if we want to render
44:16 - some content dynamically we need to have
44:18 - server-side functions so we are going to
44:21 - explore today how to render the pages
44:23 - using server size rendering and static
44:27 - generation okay so let's start with the
44:30 - server side rendering for this let's go
44:34 - to the home page so I'm gonna go here
44:38 - um
44:39 - this this is this is our home page
44:42 - and we need to add the function called
44:44 - get server side prop so outside this
44:46 - export function a sport page we need to
44:51 - add our functions so we say export
44:54 - function get server
44:58 - side props
45:01 - okay and now
45:04 - we think here we get the context but we
45:08 - don't need it for now so
45:10 - look into that later and
45:14 - um this function returns
45:16 - um an object
45:19 - that has props
45:24 - and here within this is where we'll pass
45:28 - um any props that we want our Pace to
45:30 - have
45:31 - so we can pass any props from here
45:36 - we can pass any pros from here to our
45:39 - page so let's test it out so I'm just
45:42 - gonna say a title
45:45 - I'm just gonna say
45:48 - hello everyone
45:52 - yeah and
45:57 - and now this is going to be available
46:00 - without our page props and we can use
46:04 - the structure function and just pass
46:07 - here title this is the same as doing
46:10 - this so this is your regular react
46:15 - um just as a reminder this is the same
46:17 - as doing this
46:18 - as it needs to be capital okay and say
46:22 - uh const
46:24 - title equal props
46:27 - or event and this is the same as
46:32 - um
46:34 - to improv props a DOT title
46:38 - okay we could also do this but I think
46:41 - it's a lot easier if we just structure
46:43 - this and we pass it directly
46:48 - okay so now we need to wrap this this is
46:52 - available and
46:55 - um
46:56 - and now it will refresh the page in home
47:03 - we are not getting this title
47:09 - okay we are not getting the title so
47:11 - let's inspect the element
47:15 - um I'm in May
47:17 - or am I adding this okay I'm adding this
47:20 - in the wrong place so I'm in events
47:24 - rather than I thought I was saying
47:27 - um home page
47:29 - okay so we can see okay so just in case
47:34 - you got lost and I was adding this and
47:37 - the index of the events rather than in
47:41 - the home page
47:43 - um I want to start by the home page so
47:45 - I'm going to quickly take this okay and
47:50 - just move it just go to this Index this
47:53 - is the home page
47:57 - right and now let's go back to this one
48:03 - and we don't have this anymore so I'm
48:07 - just gonna Advance page
48:12 - okay so now here
48:16 - [Music]
48:16 - um
48:18 - yeah I'm just gonna pass it here
48:20 - function home and let's just do a little
48:23 - bit of cleanup so we don't confuse
48:25 - ourselves like I did now so this is a
48:28 - page so we could say about
48:34 - um no about the US page
48:39 - um
48:41 - okay so we have about us page then this
48:45 - is events page
48:47 - okay
48:49 - like
48:50 - we call it all events events Pages fine
48:54 - and then within this cut
48:58 - um events per CT page
49:05 - okay or let's just call it category page
49:08 - because we said that
49:10 - sporty means cut category page and then
49:13 - this is our event page our single
49:17 - Advantage okay
49:19 - it's cool this is a little bit more tidy
49:21 - so now
49:24 - um
49:27 - we have yeah so let's go back to
49:32 - okay
49:34 - another issue if we change the name of
49:37 - this cons obviously we need to update
49:39 - this export default as well so let's
49:42 - just go through all of them and update
49:46 - it
49:46 - right
49:49 - we don't need this page anymore this was
49:52 - just an example so I'm going to delete
49:53 - it
49:56 - about us
49:59 - okay
50:00 - so
50:03 - I think we are good to go okay now I'm
50:08 - missing one
50:09 - events page
50:13 - and this one yeah as you can see we can
50:15 - also also export it directly
50:18 - okay so I think now we are good okay
50:24 - let's just double check that all our
50:26 - pages are working yep
50:37 - okay these are not working
50:40 - um because I haven't added the link so
50:47 - okay so this is something we could
50:50 - we could do this
50:56 - and
50:58 - this is obviously going to
51:02 - display the same page for all of them so
51:07 - I'm just gonna show you the I'm just
51:10 - gonna add it here for the moment but
51:12 - just gonna show you
51:14 - that's going to take us to the same page
51:16 - anyway
51:20 - and hit these bits
51:23 - see if I can get rid of all of them
51:31 - okay
51:33 - so if we click here it's going to take
51:36 - us to this same page okay if we need the
51:39 - in this path update we still use the
51:42 - same you we don't have Dynamic content
51:45 - for for them that's what we're going to
51:48 - do now
51:49 - okay so let's go back to the home page
51:54 - and
51:57 - um yes okay so as I was showing you I
52:01 - was showing you about how to get uh how
52:04 - to render content in the server side
52:07 - using this get server-side props
52:09 - function okay as we can see we can pass
52:13 - any props that we want from here into
52:16 - our page
52:17 - right
52:20 - and yes I think I already mentioned this
52:23 - but I'm gonna repeat it one more time
52:25 - this needs to be exported as a
52:28 - standalone function so this won't work
52:31 - if we move this block even if we ignore
52:35 - this port and we add it here within our
52:39 - home page and component function this
52:43 - won't work okay
52:44 - it needs to be separate you can put it
52:48 - above or you can put it at the bottom
52:50 - that doesn't matter so you could do this
52:52 - and come here
52:54 - and do this this doesn't matter because
52:56 - what is happening here is
53:00 - um I'm just gonna leave out the bottom
53:02 - um but what is happening here is
53:05 - um this code the next yes is going to
53:08 - run this code first so it's going to run
53:11 - the server side function first and then
53:14 - it will run our page and also this code
53:18 - here
53:20 - only run on the server side and never
53:23 - run on the browser so it never runs on
53:26 - the client so any information that we
53:30 - put here even if we put a key or some
53:33 - secrets and
53:36 - the client won't have access to this
53:38 - information so you could put you you
53:40 - could put here and any
53:43 - private information and the only way
53:47 - that the client the browser will get
53:49 - access to this information it's it will
53:52 - pass it through the props it's it will
53:53 - pass like this
53:55 - okay
53:57 - wait
53:58 - this is not the case for now
54:01 - okay so let's repeat it one more time
54:03 - this code here runs on the server only
54:06 - and it runs before our component before
54:10 - this component this component and this
54:15 - page will be created just in time after
54:18 - deployment so only after you deploy the
54:22 - navcs application this page will be
54:25 - pre-rendered for every incoming request
54:28 - if you are starting to learn to code
54:30 - it's really important you get familiar
54:32 - with the Frameworks or the libraries
54:36 - documentation and get used to learning
54:38 - how to use it just by reading the
54:40 - documentation so that's why I'm coming
54:43 - back to the next yes documentation
54:45 - because it's really complete and it is
54:48 - important that you don't get afraid
54:51 - about I know you can feel overwhelmed at
54:55 - the beginning because it has
54:56 - many entries many features and loads of
55:00 - text but it's important that you get
55:02 - comfortable searching for whatever you
55:05 - don't understand in the documentation
55:09 - Okay so
55:12 - um we can start here for whatever we
55:14 - want so in this case
55:16 - um we can search for I want to search
55:19 - for server
55:20 - side props and by the way if there is
55:23 - anything in this tutorial that is not
55:25 - really clear or I haven't covered in
55:28 - detail please come here and search for
55:31 - it because I'm sure you're going to
55:33 - solve your doubts just by just by
55:36 - reading the documentation okay so and
55:40 - get server side props
55:42 - as you can see you have here the Carter
55:44 - Smith where it shows you how to write
55:48 - this function and then if we scroll down
55:52 - okay this is what I'm looking for here
55:55 - it says that we should only use guest
55:58 - server side props if we need to render
56:01 - the page whose data must be fetched at
56:05 - request time
56:07 - this could be to the nature of the data
56:09 - or all properties of the request such as
56:11 - authorization headers or your location
56:14 - Pages using get server side props will
56:17 - be servicer render at request time and
56:21 - only because if cache control headers
56:23 - are configured if you do not need to
56:26 - render the data during the request then
56:29 - you should consider fetching data on the
56:32 - client side or get static props
56:35 - okay so it says we should use get static
56:38 - props if we don't need to render the
56:40 - page at the request time in our case we
56:43 - don't need this but nevertheless I want
56:46 - to show you how it works and so that's
56:49 - why we are gonna use it in the home page
56:51 - function
56:53 - yeah just so you I can show you how it
56:55 - works okay so in the home page we need
56:58 - to get the data and we need to get
57:03 - this data here we need to get the data
57:06 - for the events in London there is a
57:08 - description with an image and the title
57:10 - and the same for the other two
57:13 - so basically what we need is the data
57:16 - that we have here in events categories
57:19 - okay so and to fetch this first
57:23 - and we need to let me come to the home
57:29 - page okay we need to make this function
57:31 - asynchronous because we need to fact and
57:34 - we need to wait for the the response so
57:37 - support I think function
57:40 - and now we can do it as simple as doing
57:44 - import
57:45 - we pass here the past
57:48 - to where we have our data our Json
57:53 - and now const data equal and that's it
57:59 - now we're going to lock this
58:02 - this is going to give us the data an
58:05 - array with two objects
58:07 - this is returning a promise because this
58:10 - is an asynchronous function so we need
58:12 - to await this
58:14 - and now we can see here that we get
58:17 - um Advanced categories and all events
58:20 - the same data that we have here if you
58:22 - were fetching from an external API and
58:25 - it will be a little bit more
58:28 - um not complicated but you will need a
58:32 - few more lines of code so you you
58:33 - probably will need something like
58:36 - fetch
58:37 - where here you will pass the URL you'll
58:41 - probably would do something like this
58:44 - rest
58:45 - and then
58:47 - we will need to transform the uh the
58:50 - response into something we can work with
58:53 - and to do that we need to wait it and we
58:56 - need to do rest dot Json use these Json
58:59 - method okay so here we will get the same
59:03 - data that we are getting just by doing
59:05 - this but this is if you were fetching
59:07 - from an external API uh you probably
59:09 - will have to do something like this a
59:11 - list and uh you'll get an array of two
59:15 - objects let's go back to where we were
59:17 - okay so we are getting these data and
59:20 - the one that I'm looking for is the
59:22 - events category this is the one we want
59:25 - we need for the home page because it's
59:27 - the one that has the information about
59:29 - each category about each city
59:32 - um so we could
59:35 - um
59:36 - we could just do this
59:38 - um I guess
59:42 - yeah and so we are the structuring these
59:46 - data and
59:47 - here and and and now we could
59:52 - um remove this and set data equal
59:56 - events category
59:58 - okay so now we're going to have this
60:01 - data available in our component okay so
60:05 - in this component so we can't we can't
60:08 - come here and this the structure the
60:10 - data
60:11 - and then
60:13 - here is where I want to add my new data
60:17 - so I'm going to use the map method so
60:20 - this is just normal normal JavaScript
60:23 - actually and we just say data.map and
60:26 - what I'm going to do is I'm going to map
60:29 - all events so I'm going to create a link
60:35 - and and this is going to be I'm going to
60:38 - use the template and it's going to be
60:41 - events
60:44 - and now I'm going to pass here the
60:46 - variable which this is events dot let's
60:49 - just check the data okay so we have an
60:51 - ID title description and image
60:54 - okay so this is going to be the ID
60:57 - and then
60:59 - um
61:00 - Let's see we okay we are here
61:04 - and uh inside we have an image and in
61:10 - still using this image I'm just gonna go
61:13 - ahead and use the image coming from next
61:18 - which is
61:20 - um an optimized image
61:22 - okay
61:23 - so
61:25 - SRC
61:27 - source
61:30 - and
61:37 - okay and now we also have a H2
61:41 - and this would be why is it creating
61:45 - double okay so this would be event dot
61:49 - title
61:51 - okay and then we have description so
61:57 - and then dot description to description
62:08 - okay
62:10 - and each item here needs to have a key
62:13 - so every time that you use a map
62:17 - um you need to add a key
62:19 - I um and this should be a an identifier
62:23 - I'm just gonna add here the ID
62:27 - and now we could go ahead and just
62:31 - remove this and also remove this one
62:34 - here
62:37 - okay
62:39 - and this one here is complaining because
62:41 - it needs
62:43 - um
62:44 - the width
62:46 - image elements must have an ALT prop
62:48 - either with meaningful text or an empty
62:51 - string okay
62:53 - and I think we also need to add a width
62:55 - and a height
62:57 - uh at the moment I think I'm just gonna
63:00 - yes I'm I'm just gonna add event title
63:05 - and
63:07 - yeah okay it's complaining yeah with um
63:11 - height okay so let's just start that
63:16 - um
63:16 - it's gonna be like I don't know 50
63:18 - percent
63:21 - or let's just like
63:24 - size
63:30 - um then let's just add this as 100
63:32 - percent
63:35 - and now if we go to our browser
63:39 - we are running into another error okay
63:43 - so
63:45 - um
63:46 - the host name image and splash is now
63:49 - configured under images okay
63:52 - so we need to add this host name to our
63:56 - next config
63:57 - okay by the way this is plans as Angus
64:01 - plus is a website that I use it's a
64:03 - stock photography where you can download
64:06 - images for free and what you're saying
64:10 - is that we need to add
64:13 - this hostname in the image config so
64:16 - let's do that
64:20 - um
64:21 - Ms config and
64:25 - and there is a c more here let me just
64:28 - copy this first because I'm gonna need
64:30 - that
64:32 - um
64:34 - okay this is great as I was telling you
64:37 - is
64:38 - really good to get used to looking into
64:41 - the documentation because it just tells
64:44 - you how to do the things or how to solve
64:46 - the warning errors that sometimes you
64:49 - might get okay so it's showing us an
64:51 - example a sample of of how to add these
64:55 - domains
64:57 - okay so we need to we have images
65:08 - have three images and now it's an object
65:10 - right domains
65:12 - and we have here ours
65:17 - um okay we go back
65:20 - and this shouldn't worked just yet
65:22 - because we need to restart this server
65:25 - so when you make changes in the next
65:27 - config
65:28 - remember that you need to restart the
65:30 - server
65:33 - let's see if now yeah so now this is
65:36 - working
65:38 - we have
65:40 - um our images now displayed they don't
65:42 - display great
65:44 - um okay but we're going to show that in
65:48 - the next chapter when we start proper
65:51 - building the UI for our pages I think
65:54 - this is sold down to this high that I
65:57 - specified here because I have to specify
66:01 - um something let me just close this
66:04 - um
66:07 - yeah okay well this is okay for the
66:11 - moment let me just say why
66:13 - why do we have this space
66:19 - so weird I'm not sure why they are not
66:22 - all aligned
66:24 - um but it's okay
66:27 - now we have our data coming from the uh
66:32 - from our database our internal database
66:36 - okay as I said earlier there is another
66:39 - way we can progenerate our Pages
66:42 - progenerate meaning
66:44 - pre-render these pages on the server
66:48 - okay and that other way is called Static
66:51 - generation and the way it works is that
66:54 - um we regenerate next regenerate all the
66:58 - pages in advance during build time when
67:01 - we build our application we progenerate
67:04 - these Pages before we deploy it let's
67:07 - just go back to next and let's open it
67:11 - get a static path okay
67:14 - and
67:16 - um showing us how to use it here
67:19 - so in the server side rendering the the
67:23 - function that we just used here this one
67:26 - we were building the pages only after we
67:29 - deployed them at the request attempt so
67:32 - we send the pages to the client
67:34 - pre-pipulated with content in the get
67:36 - server side props we do it at the after
67:39 - we deploy at the requested high but when
67:42 - we use static generation we prepared
67:45 - this before we deploy our app
67:48 - and this is going to keep updating even
67:50 - after we deploy without needing to
67:53 - redeploy our app
67:55 - okay I hope that makes sense so let's go
67:58 - to the events page okay is this one and
68:03 - we are going to get the content the same
68:06 - content basically because we also need
68:09 - the content for events in London events
68:11 - in San Francisco and events in Barcelona
68:14 - but in this case we only need
68:18 - um the image and the title
68:21 - I mean
68:22 - we need same as this but apart from the
68:25 - description
68:28 - okay
68:30 - so let's go to yeah I'm here and the
68:34 - same this function that I'm going to use
68:36 - also needs to be a standalone function
68:39 - and before continue I'm just gonna close
68:43 - a few things
68:46 - okay
68:48 - I'm just going to remove this console
68:50 - log as well
68:52 - wow
68:53 - and I closed the date I didn't mean to
68:55 - do that let me just have the data there
68:57 - okay so we do export default and sorry
69:01 - sport function for one
69:04 - yeah sport function get static props
69:12 - right so as a standalone again we can
69:15 - move this above the component or just
69:19 - leave it below but never inside and this
69:22 - also needs to be an async function and
69:25 - we're going to use the same methods we
69:27 - did before const data equal import
69:32 - and we pass here the path for our data
69:38 - okay
69:40 - and this function also returns an object
69:45 - and one of the props of properties of
69:48 - these objectives props
69:51 - which is an object as well okay so we
69:54 - can say data equal to data
69:58 - um but
69:59 - um we only need these events category
70:04 - okay so we are going to do the same as
70:06 - we did here as you can see we can
70:11 - use the same approach here okay
70:16 - I'm just going to double check
70:23 - that we are getting okay
70:40 - okay and as always I'm always forgetting
70:44 - something await
70:47 - quite
70:49 - [Music]
70:49 - um
70:50 - so we get here all the data and by the
70:53 - way
70:54 - I'm not sure if I mentioned this already
70:55 - but I'll mentioned it again
70:58 - um I'm putting here this console log
71:00 - right we are on the server so we get
71:03 - here the log but we wouldn't get this on
71:05 - the client
71:07 - so here I refresh I'm not getting that
71:10 - console log okay that's because we are
71:12 - within the server with us within a
71:14 - server uh function okay
71:18 - so this doesn't make into the client the
71:21 - only way is by passing the props and by
71:24 - passing props through here right so now
71:27 - we can remove this and
71:29 - I'm just going to use the same approach
71:33 - okay so we are going to have a map and
71:37 - before doing that I need to the
71:38 - structure here the data first
71:41 - and then I do data map
71:45 - events
71:48 - okay and
71:51 - this is going to be an H rare
71:58 - okay and then this is going to be the
72:01 - The Descent the same as earlier
72:05 - so I'm going to use a template
72:11 - and now
72:13 - I'm going to add the variable F ID
72:19 - okay and here we have an image
72:23 - foreign
72:34 - just an H2
72:37 - and
72:41 - this is going to be a b
72:45 - title
72:49 - okay and we need a key
72:55 - each game is to be unique so like this
73:01 - you were building this for production
73:03 - this kit probably should be a little bit
73:05 - more
73:06 - uh it's Unique than just the name of the
73:10 - city maybe
73:11 - adding some numbers just to make sure
73:13 - you don't run into uh having two kids uh
73:19 - running into having two items with the
73:22 - same key
73:25 - okay
73:27 - so this is complaining for the same as
73:29 - before I'm just going to add the old
73:33 - FM title
73:36 - and with
73:40 - um
73:48 - this is not going to look good but it's
73:50 - okay and we need to import the image
73:53 - from
73:55 - [Music]
73:55 - um
73:56 - from next year's
74:00 - okay it's weird that it's not Auto
74:02 - important
74:05 - let me just try again image
74:08 - okay so now we can see that this has
74:10 - been imported so now I can remove all of
74:14 - this
74:19 - right I save it
74:22 - and here we have our images it's not
74:25 - looking radius
74:27 - I'm going to we're going to make
74:31 - this batter later no worries but
74:34 - just for the moment I
74:37 - this 100 maybe doesn't work like that
74:42 - exactly we'll have to check next
74:44 - documentation
74:46 - bye yeah this will be better okay so I'm
74:49 - gonna go to the home page and do exactly
74:51 - the same
75:03 - as you can see I'm preparing this course
75:06 - as I go with you I haven't created this
75:10 - project before
75:14 - okay so there you go now we have it and
75:18 - we clicking one is taking us to one page
75:21 - but
75:22 - we are all gonna take us to the same
75:24 - page
75:27 - okay so we can see that we can fetch
75:31 - data in the same way using both
75:33 - functions
75:35 - in a similar way at least using both
75:37 - functions let's look into something more
75:39 - challenging
75:40 - so when I click one of these cards I
75:42 - navigate to each specific page so in
75:46 - this page I want to get old event for
75:48 - London and if I go to
75:51 - Barcelona I want to get all the events
75:54 - for Barcelona rather than
75:58 - um this placeholder tags okay so let's
76:01 - look into how to do this
76:04 - I'm going to go to the category page
76:07 - this one here
76:10 - um which at the moment yeah we we have
76:12 - these links empty links and
76:16 - um
76:18 - by the way
76:19 - these links would be events
76:23 - um wherever here
76:26 - London this we will have to dynamically
76:29 - specify this and then event one for
76:32 - example
76:33 - and we will go to our page
76:38 - okay it's taking us to the single event
76:41 - cool
76:43 - okay
76:44 - so we need to have a root generated for
76:48 - um London San Francisco and Barcelona
76:51 - and Ness is going to generate all of our
76:54 - pages in HTML so we'll have one HTML per
76:58 - uh per event a category item so we are
77:02 - going to show a page base in this
77:05 - component that we have here
77:08 - okay so when we built our pace for
77:10 - production next is going to generate a
77:14 - page for each event so next is going to
77:17 - come here and now here exactly but it's
77:20 - going to generate a page for events in
77:24 - London
77:25 - and a page for events in Barcelona
77:29 - so it's in this case it's going to
77:31 - generate three pages for us these three
77:34 - all of them are gonna match this part
77:36 - here
77:37 - and this is the dynamic path name Point
77:42 - even if in our data we have three events
77:46 - items that we want to
77:49 - um create a page and next doesn't know
77:51 - this at this point Nest doesn't know uh
77:55 - how many roots and Pages it needs to
77:57 - generate because it doesn't know what we
78:00 - have in our data file and at most cases
78:03 - this data would probably come from an
78:06 - external API but even if it's an
78:08 - internal and next doesn't know and Nest
78:12 - also doesn't know what we want to do
78:14 - with this data right okay so we need to
78:17 - explicitly tell next how many pages it
78:20 - needs to create for us at build time and
78:23 - to do this we need to have a function
78:26 - called get a static path so export
78:29 - function this is going to be as well as
78:31 - a sync function so let's just write it
78:33 - Now function get static
78:36 - path if we go to our Json file we see
78:39 - that we have an ID property that looks
78:42 - like this this is actually the name that
78:44 - we would like to have for our path okay
78:47 - so this is all we need
78:49 - and so let's go back okay so in this
78:52 - function we can return
78:55 - um an object that has a path
78:58 - and this path
79:01 - oops
79:02 - um is an array we want to be we want it
79:05 - to be an array of objects where each
79:09 - object holds the root parameter and
79:11 - within this did so this is param
79:19 - and it has an object where it has an ID
79:22 - in our case our ID is this cut
79:27 - so and then here we'll pass the exactly
79:31 - path that we want so one two three for
79:33 - example okay so we need to generate this
79:37 - array with all the events per category
79:41 - that we have in our data because we
79:44 - don't want to come to here and have to
79:45 - have code in it like this like uh London
79:48 - and then
79:50 - um create another one
79:53 - and Barcelona because now we have three
79:56 - right but in the future we will have
79:59 - more and then later on when we create
80:01 - the a single event we are gonna see that
80:04 - we have maybe like
80:06 - I don't know 12 items in the database we
80:09 - don't want to have to create a specific
80:11 - path like this like this okay so I'm
80:14 - going to use the map method here so but
80:17 - first I need to
80:21 - I need this data first
80:26 - okay and now I'm going to do const all
80:31 - paths
80:32 - I'm gonna map this then category.map
80:41 - okay so what we are going to do here is
80:46 - um we're gonna hold we are gonna go
80:48 - through each iteration and we are going
80:51 - to take each object and return it with
80:55 - this format that we have here
80:57 - so I'm going to just copy this
81:00 - I have an extra
81:03 - okay and this is going to be the event
81:07 - ID
81:09 - and before this complaint I'm going to
81:11 - convert this into a
81:13 - string like this
81:17 - and
81:20 - I have a typo here get started paths
81:23 - okay
81:24 - so there we go okay so now let's just
81:28 - come to unlock this
81:29 - all parts
81:35 - yeah and we are getting here the data
81:37 - okay Londo San Francisco and Barcelona
81:40 - so now we can go ahead and replace all
81:43 - of this
81:44 - with our new variable
81:48 - okay there are more things that we can
81:51 - return here one of them that we actually
81:54 - need to because if we come here it's
81:56 - gonna tell us that it's missing a
81:58 - property is fullback
82:01 - so earlier we said that we could put any
82:05 - root here after events and and FCS was
82:10 - going to pick up anything that was
82:11 - matching these and this route this part
82:14 - but now we are specifying the paths we
82:17 - want next to build
82:20 - um and these roots for so here we are
82:24 - specifying and we're telling and next
82:27 - okay we want you to build a page using
82:32 - this component templates for this for
82:36 - this specific
82:38 - uh path which are the ideas we have here
82:44 - okay so the full pack
82:49 - with the fullback property we need to
82:52 - tell next what we want next to do in the
82:55 - situations where the user put something
82:58 - else that doesn't match the path that we
83:00 - specify it will specify to false this
83:04 - means that our page will only render
83:06 - will only be built for
83:10 - um the the paths that we specify here if
83:13 - we navigate to a different page
83:17 - okay
83:19 - seems like we have found Evra
83:23 - oh yes I have another type here this
83:27 - should be paths
83:30 - okay so I'm not going to be able to test
83:32 - it because we need to use get a static
83:34 - props first but
83:36 - basically now we are specifying that we
83:39 - have three parts London San Francisco
83:41 - and Barcelona if we type anything else
83:44 - here this is going to throw a 404 error
83:47 - Pace because we are saying that we don't
83:49 - want a fullback enough fallback is false
83:54 - but for now we don't need to worry too
83:57 - much about it and there are some fancy
84:00 - ways we could do here in the future I
84:03 - think I'm going to create a series of
84:05 - more next advanced concepts to optimize
84:09 - your website
84:11 - okay so and what we did here is we're
84:14 - telling nesk what pages and routes it
84:18 - needs to create in the build time before
84:20 - we deploy our app so a page for London a
84:23 - page for Barcelona pays for San
84:24 - Francisco
84:27 - um but now if we go to uh if we work
84:30 - here we see that we are getting this
84:32 - error where is missing get to static
84:34 - props so this function that we used
84:37 - earlier in the events page is missing
84:40 - this function so let's just go ahead and
84:43 - add this function I'm going to show you
84:46 - why we're missing it
84:52 - So within get static props we have a
84:55 - parameter
84:56 - whole context
84:58 - I'm going to console log this so just to
85:01 - show you what context has
85:21 - okay we need to return an object
85:32 - I probably need to do it properly props
85:36 - this return on empty props of an empty
85:39 - object
85:41 - there's your Photon empty object
85:45 - and this is what contest has so contest
85:48 - has information to all of this
85:51 - the parameters the categories our ID
85:55 - page and exactly the page where we are
85:58 - so if now I do this Barcelona
86:05 - foreign
86:07 - and now I come to
86:10 - this website now it's taking me no no no
86:15 - this page
86:17 - okay
86:19 - so we can see here that now the the the
86:23 - ID for our paint is different imagine
86:25 - what we specified here in the root
86:29 - okay
86:32 - so
86:34 - um this is what we are going to do in
86:36 - order to get the information from our
86:39 - Json is to filter through this um array
86:44 - of objects and get all the data get all
86:48 - the objects where the ID is equal to
86:50 - this category ID
86:54 - to do that I need to use this function
86:57 - again
87:01 - in this case
87:06 - I don't need this I need all events
87:13 - okay and in all events you will have a
87:16 - look at this object we have here this
87:18 - city
87:20 - okay
87:22 - this is what we are going to use as our
87:24 - identifier
87:29 - okay so first I'm going to and the
87:33 - structure and extract this parameter
87:36 - okay so
87:38 - um
87:42 - [Music]
87:52 - hold on
87:54 - parameters and move this again and cut
87:59 - okay
88:01 - so console log ID
88:04 - okay we're getting here cool amazing so
88:07 - we are getting the ID now
88:09 - so now what we need to do it
88:16 - let's just do const data
88:20 - I'm gonna filter through the array
88:26 - go to map
88:28 - no no filter
88:31 - I'm going to say
88:36 - events ID equal to ID no event CT sorry
88:44 - this bit here
88:47 - this okay
88:49 - so I want to get all the events data
88:52 - where
88:54 - um it has a city in the city where the
88:58 - city property is equal to our ID
89:05 - so let's counter lock this
89:10 - okay so now we can see that we are
89:13 - getting
89:14 - angry with all the events that we
89:17 - launched to in this case it's Barcelona
89:20 - if we go to London
89:26 - visual update and we are getting all of
89:28 - these okay okay so we are getting some
89:30 - data so let's do this so data equal data
89:35 - and this is the same as doing because
89:37 - it's the same name the same as doing
89:39 - this data
89:44 - good
89:46 - and now
89:51 - and now that our page is working I can
89:54 - show you how fullback works so
89:57 - if I type here
89:59 - something different Berlin for example
90:04 - as we said this is going to throw a
90:06 - four-fold error because we said we set
90:08 - fallback to false
90:11 - if we set this to True nevertheless we
90:15 - are going to get our page I think at the
90:17 - moment I prefer to leave it as full so
90:20 - we only render the pages that we specify
90:23 - here
90:25 - right okay so we are getting this data
90:29 - and now we can come events category page
90:32 - and the structure it and we get data and
90:36 - let's do it one more time the map method
90:39 - I love the map method
90:41 - so data.map
90:44 - and I'm just gonna return an event
90:48 - okay just gonna do it like this
90:52 - probably don't need that actually
90:55 - who just use a narrow function
91:04 - and what we have here is
91:07 - and we are going to look in just in a
91:10 - minute about
91:11 - replacing this anchor tasks with links
91:15 - with the links component coming from
91:16 - next yes
91:18 - let's just leave this for the moment
91:21 - and this is events
91:24 - we are also going to improve this but
91:26 - events
91:28 - um
91:31 - London well yeah we have we need some
91:35 - category
91:36 - here which we have okay so events
91:48 - and now
91:50 - this is going to be
91:52 - um event dot ID
92:07 - okay so we have a link
92:10 - we have an image
92:17 - just gonna
92:20 - paste it here
92:22 - click import click fix
92:28 - okay
92:30 - so I don't know why it's not working so
92:40 - okay
92:42 - don't then title event image
92:49 - then title and we have the description
92:52 - right
93:01 - let's let's just check the data
93:04 - description and
93:06 - we have it is we look into this later on
93:12 - okay
93:14 - so
93:16 - this should do
93:18 - I'm just gonna remove all of this
93:26 - okay so finger cross
93:29 - and hopefully now
93:33 - um
93:33 - okay so I took images from different
93:37 - websites so I'm just gonna add this
93:44 - to our coffee
93:51 - foreign
94:00 - let's restart the server
94:07 - cool so we are getting the data and
94:11 - we're getting only the events for our
94:13 - London page okay now is the moment to
94:16 - test what happened if not this one if we
94:20 - go to another page
94:22 - so let's go to San Francisco
94:27 - okay we're getting all the vents for San
94:30 - Francisco
94:31 - and now
94:33 - if we go to Barcelona
94:36 - same
94:37 - old events for Barcelona
94:40 - okay this is great okay so now if I
94:43 - click in one of these events it's taking
94:46 - us to our template page a single event
94:49 - so what does this mean this means that
94:52 - we need to do exactly same that we just
94:54 - done we need to create a template page
94:57 - like this one where we have two server
95:00 - side functions to get the static paths
95:02 - and they get the static Pros with props
95:04 - to tell next yes which path
95:10 - um we want next to create for us which
95:13 - Pages needs to create for us and uh more
95:18 - content it needs to generate for each
95:20 - path okay so let's recap in the static
95:25 - and ratio we have two functions and both
95:29 - needs to be Standalone similar of the
95:31 - server side rendering function and these
95:35 - functions
95:36 - um
95:37 - go back to here yeah these two functions
95:40 - get distracted path and get a stack the
95:43 - pro props for dynamic Pages we need both
95:47 - of them for the study Pages we will only
95:50 - need the get static props because we
95:53 - only need to get a static part when we
95:55 - need to specify how many parts we have
95:58 - we want to use this template for right
96:01 - so before deploying our app when we
96:05 - build that Nest is going to analyze our
96:08 - whole project and see how many HTML
96:10 - Pages needs to create based on our data
96:15 - okay so once it knows how many pages and
96:18 - Roots it needs to create it will then go
96:21 - and fetch data for each page so it will
96:25 - come here
96:26 - I'm just gonna close this it will come
96:29 - here I will say okay so here I need to
96:33 - generate
96:35 - um let me just okay so it will come here
96:37 - I will say okay so here I need to
96:39 - generate
96:41 - um all of these paths that we have here
96:43 - that in this case is three so I need to
96:45 - generate three three pages and then it
96:48 - will go to the next to this get a static
96:51 - props function and it will go here to
96:55 - fetch the data to know what data it is
96:59 - to generate in the component
97:02 - okay so once it knows how many pages and
97:05 - Roots it needs to create it will then
97:08 - come here to the get static props and
97:11 - fade and fetch the data for each page
97:13 - and it will put this data in the
97:17 - component here in this component
97:20 - so this Dynamic page components work as
97:24 - a template that's why I keep repeating
97:26 - the word template this means that we
97:28 - could have 100 events and only need to
97:32 - create one page and one template for all
97:34 - of them so if we need to make a change
97:37 - to one single events page let's say to
97:41 - add an option to buy tickets for this
97:43 - event we will only need to do it once
97:46 - and it will update the 100 event Pages
97:49 - we we might have so you can see how
97:52 - powerful nefgs is okay so before moving
97:56 - to the next section to the build in the
97:58 - UI
98:00 - um earlier I mentioned that we were
98:02 - going to replace the anchor tax for the
98:05 - link
98:06 - um coming from next year similar of this
98:09 - image rather than using the regular
98:11 - image tag so Netflix comes with loads of
98:15 - Handy features we can use okay so let's
98:17 - start
98:18 - fortunate so link
98:21 - it's gonna do like this and then import
98:25 - link from
98:28 - messages link I hope it's like this
98:32 - okay so this link
98:35 - gives us the ability to do client side
98:38 - navigation in the browser so the pages
98:41 - are loaded using JavaScript and we don't
98:45 - make a new request to the server so we
98:48 - don't need to make a new HTML page
98:51 - request
98:52 - if we go to the the website now and
98:56 - let's just ignore this arrow for a
98:58 - moment
98:59 - let's go to the home page
99:01 - and when we clicking here a about us we
99:07 - can see you see that below we can see
99:09 - that we are doing a full refresh of the
99:11 - page let's do it again we clicking about
99:14 - us and here we can see that we have a
99:17 - full refresh so what client-side
99:19 - navigation does is that
99:21 - um avoids this and we don't do a full
99:24 - refresh of the page we don't send a new
99:26 - request so this means that the
99:29 - transition between when the user
99:31 - navigates between pages is a lot
99:34 - smoother and quicker so improve this
99:37 - experience okay so the way this works is
99:40 - we can wrap our anchor tags with this
99:44 - link okay so it's as simple as doing
99:47 - this
99:48 - we are wrapper wrapping our whole anchor
99:51 - tag with the link and here it is telling
99:54 - us that is missing Okay so
99:57 - we need to move this to here now this is
99:59 - the parent but this link is missing the
100:02 - H ref that we have here okay so we're
100:05 - going to do eighth ref and we're gonna
100:08 - move it here
100:09 - and we remove it from here but this is
100:13 - not great for accessibility it's not
100:15 - good to have anchors without an edge
100:17 - breath so something that we could do is
100:21 - um the link has a property that is past
100:25 - href
100:27 - so when we pass it like this this is the
100:30 - same as saying patch of ref equal to
100:32 - True okay so we could just leave it like
100:35 - that and now if we reload this pay if we
100:38 - save this page we just go back to here
100:41 - okay if I click here
100:46 - okay we were still using the anchor in
100:49 - this point because this is in the home
100:51 - page and I'm in the categories page okay
100:53 - so here we can see just to see the
100:55 - difference this is reloading but now if
100:57 - I click in one of these ones you see how
101:00 - this hasn't reload we don't have like
101:02 - the load in there
101:03 - this is client side
101:05 - you see how fast it is
101:08 - look at this let's compare it again
101:11 - okay you could see there I'm clicking
101:14 - hearing events in Barcelona
101:16 - it's just like doing a full refresh if I
101:20 - click on one of them
101:21 - yes this is super fast right okay I'm
101:26 - just realizing that we are still
101:27 - printing here events in London so
101:31 - um let's do those changes now
101:33 - so what we could do is
101:37 - let me open this
101:38 - context
101:41 - we are getting this right
101:44 - um and what we can do is we have here
101:48 - the ID okay so we I'm going to pass
101:51 - another prop
101:52 - so this is like a page name you can call
101:58 - it
101:58 - we have a page name and
102:02 - and I have passed the ID okay so now I
102:05 - have this available here
102:08 - I can replace this
102:13 - okay and this whole set
102:17 - okay
102:22 - and there are more things that we can do
102:23 - here
102:25 - um
102:27 - as you see the name is lowercase rather
102:32 - like than the proper way so we could use
102:35 - like native math JavaScript methods to
102:38 - change these words and make the first uh
102:42 - letter Capital but I'm just gonna leave
102:44 - it like this for now right okay so let's
102:49 - just replace all the anchors that we
102:51 - have for this amazing link
102:54 - let's go to the home page
102:58 - importing the link and again
103:00 - what do we need to do
103:02 - is
103:04 - grab our anchors
103:07 - with this link
103:10 - we move this key
103:14 - and we say we are going to for
103:17 - accessibility
103:18 - passage to ref
103:28 - foreign
103:38 - oh okay
103:41 - capital
103:45 - okay
103:48 - um I could to do exactly semicolon I
103:50 - should do this until the same with the
103:52 - navigation so
103:55 - let's just do this
104:10 - okay
104:13 - and I'm just gonna I'm gonna copy and
104:16 - paste this
104:18 - event
104:29 - oops okay
104:32 - and now one more time for the about us
104:36 - about us about us
104:39 - on this path about
104:41 - us
104:44 - let's save this
104:47 - okay and I think I'm missing one more
104:50 - page so let's go to that page first I
104:52 - think I'm missing the events page
104:56 - yes I'm I am
104:58 - okay so same
105:01 - import link from
105:04 - next link
105:07 - okay
105:12 - now let's wrap
105:21 - this I'm gonna need I'm actually gonna
105:24 - need all of this
105:33 - okay
105:36 - um
105:37 - right
105:43 - [Music]
105:50 - foreign
106:21 - was going a little bit crazy and okay so
106:25 - I think I have updated all the anchors
106:28 - that we have
106:31 - um just to make sure I'm going to do
106:33 - this
106:38 - okay this is fine
106:42 - yeah cool okay so let's go back to the
106:46 - website and check this
106:51 - go to about us now it's super fast
106:55 - it makes such a big difference
106:59 - yeah
107:00 - San Francisco okay
107:03 - okay
107:05 - so when we built our app for production
107:08 - Nest is going to perfect the code for
107:11 - all of the pages that we have here in
107:13 - these links so when we specify links
107:16 - like this next is gonna go through our
107:19 - whole project as we say right it's gonna
107:21 - find the places where we have the link
107:24 - component and it's gonna say right I
107:27 - need to create a page for home I need to
107:29 - create a page for events I need to
107:31 - create a page for about us so every time
107:33 - we use the link component and we are
107:35 - pointing it into a internal page a page
107:40 - we have here in this folder Pages Nest
107:44 - is going to go through all the links and
107:47 - prefetch all the pages
107:50 - okay so now I think
107:54 - yeah I think we have covered how to
107:56 - build a static page how to build Dynamic
107:59 - page how to fetch the data using
108:02 - server-side function server side
108:03 - rendering and static generation
108:06 - functions and before starting building
108:10 - all the UI and all the components we
108:13 - need to create this our events page and
108:16 - this is really simple we have an image
108:20 - um a title and a text and we need to use
108:24 - the same approach that we use here for
108:26 - the categories page okay so let's go
108:28 - ahead and you still copy paste we're
108:30 - going to do it again
108:32 - so we made sure we are practicing what
108:35 - we just learned
108:37 - okay
108:38 - so as we said Standalone function okay
108:42 - and it needs to be an async function
108:51 - static paths
108:54 - okay so either made the semester I met
108:56 - earlier and it needs to return an object
108:59 - so it doesn't complain and it needs to
109:01 - return paths which this is a an array
109:05 - and what we need is to go through the
109:07 - whole list of all events and get all of
109:11 - these IDs these ideas is what is going
109:14 - to be our route
109:15 - all of this okay so we need to go
109:18 - through the whole all events array
109:22 - so to do that
109:25 - and I'm just gonna do like this for now
109:28 - okay like just to do it a bit different
109:30 - so cons data
109:34 - we access our data Json okay we need to
109:38 - weigh this because this returns a
109:40 - promise
109:42 - right and now this is comes data now we
109:45 - do we need to
109:47 - we we want this object so
109:51 - const all events equal data okay so this
109:56 - is the same as what we did earlier that
109:58 - it was doing this but let's just leave
110:00 - it like this
110:03 - and now I'm going to do const all parts
110:07 - equal all events dot map
110:17 - um
110:18 - path I'm just going to call it path
110:21 - probably there's more Santa's path okay
110:25 - so and what I'm going to return
110:28 - again is an object that needs to have
110:32 - this format so we have a params a
110:35 - property here
110:37 - and this is an object and within this
110:40 - object we need to specify this ID so in
110:44 - this case it's ID because we chose that
110:46 - name here if we have changed this and um
110:50 - and say hello
110:53 - now here we will have to write hello
110:55 - okay and I want to save it
110:58 - okay so ID and this is path dot ID
111:03 - as simple as this
111:06 - okay yeah I think this is all we need
111:10 - and we cannot forget that we need a
111:14 - fallback
111:15 - and as a fullback
111:16 - we want this to false
111:19 - we want to throw an error if
111:22 - um the rule doesn't match match these
111:24 - paths
111:26 - okay so let's go to the terminal
111:29 - terminal to the browser and is telling
111:31 - us that a required parameter cut with no
111:34 - provided as a string in get static paths
111:37 - okay this is because this page this path
111:40 - has events and then it has a dynamic
111:43 - part and it's Dynamic page itself so
111:48 - it's saying that we are not specifying
111:49 - here so the difference between this
111:51 - space as the other one is this is a
111:54 - child from this cut page right from this
111:56 - page
112:00 - set out from this page so here in this
112:04 - object we are missing categories
112:07 - so we are missing this cut and this is
112:10 - path dot City okay this is our category
112:14 - identifier
112:15 - that we have here
112:18 - okay maybe I should have called that
112:20 - category
112:21 - but maybe it's an improvement that we
112:24 - can do for the next video
112:26 - okay so now we save this
112:29 - okay
112:31 - this is fine we are missing to get
112:33 - static props as expected why is that
112:37 - because in SDS what he's doing here is
112:40 - it's going through this function get the
112:42 - static paths right so it's going through
112:44 - that will hold data uh is fetching our
112:47 - data we is retrieving our data and then
112:50 - you say okay so you want
112:53 - um I'm not sure how many items I have
112:55 - here within these all events but let's
112:58 - say you want 12 paths you want me to
113:01 - create 12 pages right now you need to
113:04 - tell me where is the content what is the
113:06 - specific contest for each page the way
113:09 - we get and we get that by using get a
113:13 - static props okay so export
113:17 - a sink
113:20 - function get static props
113:26 - okay I mean get to static props we get
113:29 - access to context
113:30 - that is what we can use to extract the
113:33 - path okay
113:36 - um so just a reminder again we'll teach
113:38 - inside context
113:44 - okay we are going to get Arrow because
113:46 - we are not supporting anything let's
113:49 - support something then
113:51 - let's support the empty object again
113:53 - props okay so this is what we get inside
113:57 - the context okay so now we can use this
114:00 - to get our data to get each of these uh
114:04 - objects okay
114:07 - so let's do this
114:11 - const data await
114:15 - import
114:21 - okay
114:23 - and now I'm just gonna do it
114:26 - like this this time because this you can
114:29 - see that m is quicker to
114:32 - extract the all events just by the
114:35 - structuring like this then
114:38 - um adding um these two lines but this
114:41 - implementation this one here
114:44 - is the same as this okay
114:51 - and now we have our context and I'm
114:54 - going to do the second const ID this is
114:57 - going to be equal to const terms and
115:01 - a ID
115:03 - right in our case is ID
115:09 - okay so cons Theta equal to
115:15 - um event data
115:18 - so all events and I'm going to use the
115:21 - filter method to filter down the list
115:24 - and let's say
115:28 - event
115:37 - okay and now we say if events
115:41 - um ID so basically what we want to do is
115:44 - we want to match we want to go through
115:46 - the whole our whole data let me make
115:49 - this a smaller and find and the object
115:53 - that match this root so I want to match
115:57 - this route right so I'm gonna go through
115:59 - the whole data and find the object the
116:02 - object of the ID the matches that root
116:04 - right so
116:07 - to do that that means that this ID let
116:11 - me just do it like this this ID
116:14 - which is this right it needs to be equal
116:20 - to event dot ID
116:23 - okay
116:24 - and now this is what we can pass here
116:26 - data
116:30 - right
116:32 - and
116:34 - let's just go ahead and destructure this
116:37 - data
116:39 - uh in this in our component page
116:46 - right
116:47 - and
116:50 - for now I'm just gonna put a console log
116:52 - data
116:54 - that we are going to see in the client
116:59 - okay so if I reload the page now this is
117:02 - not updating because we're having that
117:04 - add any data into our page but we added
117:07 - a locked here and we can see it here we
117:10 - are receiving an object with uh all the
117:14 - data for this event San Francisco
117:16 - Innovation Summit
117:19 - um San Francisco
117:20 - um like this description that is just a
117:23 - learning episode and our image okay so
117:27 - let's populate that uh that's that
117:30 - content
117:34 - so what we need here is uh
117:37 - meditative to wrap everything we are
117:40 - going to have an image
117:42 - okay
117:44 - and this is going to be data dot image
117:50 - with
117:52 - um
117:55 - foreign
118:01 - title
118:05 - now we can close the image and now we
118:07 - have an H1
118:09 - which is going to be our title
118:11 - so data Dot title
118:17 - okay and then we have a description
118:22 - so data dot this
118:25 - encryption
118:30 - um
118:32 - okay
118:34 - and
118:36 - let's just have a look see how it looks
118:41 - right
118:45 - okay so we can see that
118:48 - um what this is a sporting because I use
118:50 - the filter method okay I use the filter
118:53 - method and
118:55 - um what filter does is support a sports
118:59 - an array Sports an array so it's gonna
119:03 - go through the the whole list and Export
119:06 - all the items that are that all the
119:09 - items that match the condition
119:12 - okay so it's gonna go through the whole
119:14 - array and and create a new array with
119:19 - um all the items that match this
119:20 - condition right so maybe the filter is
119:24 - not the best method that we can use here
119:26 - because what we want to to have here is
119:28 - white so we won't find the one okay so
119:31 - you still filter
119:33 - I'm going to use I think is find
119:37 - and if I go here yes this is something
119:40 - different so now we get our limits let's
119:43 - just make this bigger
119:47 - okay we get our limits
119:53 - with our title and description and if we
119:57 - go back
119:59 - okay we're in London
120:02 - no yes let's go to London now we're in
120:05 - London and let's go to the house party
120:11 - there you go now we have our image with
120:15 - a our title and description let's go to
120:18 - another one to check
120:19 - that this is all working good and yes we
120:23 - get this event
120:25 - and let's try San Francisco
120:28 - okay and let's try this Opera event
120:32 - and there you go we have the specific
120:35 - information for our event page
120:40 - and
120:41 - have a look at this the client side
120:44 - navigation is just super fast
120:47 - and super smooth okay
120:51 - so I think that's all for this section
120:54 - we have let's just recap
120:57 - we have our home page
121:00 - with the Three Links looking a little
121:03 - bit bad but we'll sort that out in a
121:05 - minute then we have our events page with
121:08 - three links as well
121:10 - and about us which is using a static
121:14 - page and then if we go to one event we
121:18 - have a page to our events for
121:21 - um
121:22 - a page event per category and then if we
121:25 - go to specific events a single event
121:28 - right okay
121:30 - so I think it's time for us to start
121:33 - building the UI and something that you
121:36 - might be noticing it is that when we are
121:38 - here I cannot navigate to other Pages
121:40 - because we are missing the header and
121:42 - the footer so only in the home page we
121:45 - have the header and the footer so that's
121:47 - what we are going to be looking at next
121:49 - okay now we have all of our components
121:52 - created it's time for creating the UI at
121:55 - the moment we are adding everything to
121:57 - this pages so let's start by refactoring
122:00 - our header and our footer and create its
122:04 - own component when we build apps in this
122:07 - year we are still building react
122:09 - components so this works exactly the
122:12 - same the only difference is that Nest
122:14 - comes with some libraries and components
122:16 - under the hook that we can use
122:18 - we saw earlier that we could use a
122:21 - special custom next component for link
122:24 - and for the image and there are many
122:27 - others that we can use
122:29 - we can create these components within
122:32 - the folder uh source
122:35 - here what I usually do is create a new
122:39 - folder called components
122:43 - and then here I will create a folder for
122:46 - component pretty much so for example
122:49 - header
122:51 - okay Heather and now I can come to
122:53 - components and create
122:56 - footer okay and I'm just gonna make this
123:00 - lowercase
123:03 - yes footer
123:05 - I think I'm also going to add here now a
123:08 - folder for events
123:10 - and I'm going to create a component page
123:13 - that we hold all the code of our pages
123:15 - so we can keep our page as last as as
123:19 - light as possible
123:21 - um so
123:22 - unless you say in the events I'm going
123:25 - to create a event
123:28 - page
123:29 - oh
123:31 - no type of script maybe in the next
123:33 - version we'll use typescript
123:35 - okay and the same for home page I'm
123:38 - going to create another folder at the
123:41 - moment our home page is really simple
123:44 - but maybe in the future this wouldn't be
123:46 - the case we will add we could add a lot
123:49 - more features so
123:52 - um
123:53 - Okay cool so now let's start by bringing
123:59 - everything we have in the header
124:01 - into our home page
124:08 - so I'm going to leave the header for the
124:10 - moment
124:11 - I'm just gonna bring this main bit
124:28 - okay I'm just gonna paste it all here
124:30 - and now we need to import the link from
124:34 - Nest yes
124:37 - nope not coming like that so
124:49 - okay understand with the image so let's
124:52 - just duplicate I just duplicated this
124:54 - line I'm just gonna
124:56 - change the link swap the word link for
124:59 - image okay
125:02 - so now we have the home page
125:06 - have this data
125:10 - okay so what we need to do here because
125:13 - now this is going to be cold within our
125:16 - paste component so this is going to
125:18 - become a child what I need to do is pass
125:20 - these props so I'm just gonna do do it
125:23 - like this
125:26 - right and now uh if I go to the home
125:29 - page I can call here this component
125:32 - Okay so
125:34 - Capital here and
125:37 - so let's just call it home
125:40 - page
125:44 - I don't know why my visual studio code
125:47 - decided to don't work
125:53 - okay so let's just import it
126:00 - cool
126:02 - let's see if everything is working and
126:04 - it seems like we have an issue here
126:07 - um styles main okay so I'm just gonna
126:10 - get rid of all of this class name Styles
126:12 - because we are going to be adding a
126:13 - Styles in a minute so let's just get rid
126:16 - of this
126:17 - uh let's see what else is complaining
126:20 - about okay data
126:22 - so now here
126:25 - we come
126:28 - home page we need to pass the data so
126:31 - this will be data equal data
126:35 - okay I'm not sure exactly why I'm not
126:37 - receiving this data so what I'm going to
126:39 - do is to just
126:42 - put a console log here
126:44 - or I do know why I'm not receiving this
126:46 - data Okay so so
126:49 - I need to wrap all of this
126:53 - I'm missing the return
126:56 - okay keyword
127:10 - okay so now it's working okay so it was
127:13 - happening is I created our function and
127:17 - I opened the route I I was
127:20 - um creating it with the curly brackets I
127:22 - needed we need the keyword the key
127:25 - return and otherwise it doesn't work so
127:29 - this would be the same as doing if we
127:33 - don't want to use the word return like
127:35 - the Cure key will return we will have to
127:39 - remove this okay this is what I had
127:41 - before and instead opening curly
127:45 - brackets I will just like uh return it
127:48 - immediately this this Arrow function
127:53 - okay so this would be the same
127:57 - so let's just leave it like this
127:59 - actually
128:01 - so now we have the home page so now we
128:04 - need to move this into the footer
128:06 - component
128:07 - okay so let's just go to footer I need
128:12 - to create a new
128:15 - footer
128:17 - component okay
128:31 - right and let's support it here
128:40 - same little one this
128:45 - and let's just check that everything is
128:48 - working
128:49 - it's not working because we're having
128:51 - imported yet the Lesser less to die in a
128:54 - minute unless just
128:56 - cut all the header
128:58 - okay
129:00 - and come here header and create a new
129:03 - component
129:04 - so Heather Dot okay jsx
129:09 - and then export
129:11 - const header
129:17 - and let's just return it like this
129:21 - okay
129:23 - and we need to import the links
129:41 - cool okay so now now we can't just
129:45 - import the header that we just created
129:47 - cool
129:49 - and now let's do the same with the
129:51 - footer
129:59 - cold
130:02 - let's see if this works okay I can see
130:06 - the footer and I can see the header here
130:09 - nice this just works like any other
130:12 - react application and you can call this
130:15 - a folder components whatever you want
130:18 - and you can place it wherever you want
130:19 - but I think it's kind of like a standard
130:22 - to put it within source and put all your
130:25 - components within folder components okay
130:28 - but the problem here is that we get the
130:31 - header now in the home page and and we
130:34 - also get the footer but if we navigate
130:36 - to other Pages like events or the single
130:39 - events events per category or if we go
130:42 - to about us we don't get the header or
130:44 - the footer we could just uh go to the to
130:48 - about us for example and import the
130:51 - header right we could just do this and
130:53 - do the same in all the other Pages the
130:56 - problem is that we would be duplicating
130:58 - code that is common across all the pages
131:01 - and if we decided to remove the footer
131:04 - from our Pages
131:06 - um for any reason we will have to go to
131:09 - each specific page and remove it so this
131:14 - is not the best way of doing it there is
131:16 - a better way of the I'm doing it and for
131:18 - this we need to go to pages and go to
131:23 - the file underscore app
131:26 - this file is the application shell is
131:29 - the root app
131:31 - and this component here which will
131:34 - receive through props this is the actual
131:37 - component itself so this is the index
131:40 - page this is the about us page or this
131:43 - is the events page here is where we
131:46 - could add providers or code that we want
131:49 - to share across all the pages like
131:52 - um
131:53 - a provider that wraps our whole app we
131:58 - could do something like this provider
132:00 - and then in the middle we will just
132:03 - render our component okay and we will
132:07 - have to wrap all of this
132:08 - like
132:10 - this okay
132:12 - something like this so this is a great
132:15 - place to have our head around the footer
132:17 - that will be common for all the pages
132:19 - uh we could add them here like Heather
132:24 - and then
132:27 - like this Heather and then footer
132:32 - foreign
132:35 - we could have this
132:38 - and then to have like or
132:41 - um
132:42 - have components like this we will have
132:44 - to create a fragment you know so we can
132:46 - render more than one child in one return
132:48 - so we could do something like this and
132:51 - so in my app we will have the header
132:53 - then the components in the middle and
132:54 - then the footer but then again this is
132:57 - not the cleanest way of doing it so the
133:00 - resulting that I really like to do which
133:02 - is create a new component called main
133:05 - layout
133:06 - so let's go ahead and do it I'm going to
133:09 - create a new folder within components
133:13 - um code layout
133:15 - and then within layout I'm going to add
133:19 - a main
133:20 - uh layout
133:24 - file and then
133:30 - okay this is a shortcut to create a
133:33 - arrow function
133:36 - and then we just update this Main
133:39 - main layout
133:42 - we call this sport like this here okay
133:46 - cool okay so
133:49 - um here is where we could
133:52 - I'm just gonna have a fragment okay so
133:56 - I'm going to call Heather
134:01 - right nice
134:03 - and now I'm going to call footer
134:07 - nice okay
134:09 - so we have the header and the footer and
134:11 - then we need to get access to whatever
134:13 - is nested inside the layout because we
134:17 - want to render our components page
134:20 - within this within this header and the
134:23 - footer so to do that we need to pass the
134:26 - property children
134:28 - okay so what I'm doing here is I'm
134:30 - destructuring the children then the
134:32 - props and the structure in the props
134:34 - like this with the curly brackets and
134:36 - now I need to pass the children and to
134:38 - do that we just need to come down here
134:40 - and pass the children like this so
134:43 - basically now we can place anything
134:45 - inside our main layout component because
134:48 - of these children okay and so anything
134:51 - nested
134:52 - this will output the children inside
134:55 - this component now if we go back to app
134:58 - we can import these components so let's
135:00 - get rid of this I'm just going to import
135:02 - it I'm just saying main layout I have it
135:05 - here so
135:07 - I'm just gonna have it like this because
135:09 - here inside is where our children goes
135:12 - and what is our children our children is
135:14 - our component
135:16 - so just copy I just put it here in the
135:18 - middle and
135:20 - this is all this is all we need to do we
135:23 - have our components that is accepting
135:26 - our children as a prop here so now we
135:29 - think I will call this component mainly
135:31 - yeah we can pass anything that we want
135:32 - and in our case our components
135:37 - and now if we come here
135:40 - we can see we see a double because we
135:43 - haven't get rid of it just yet but now
135:46 - if I go to about us we can see the
135:48 - header and
135:51 - and the footer yeah it's down here or
135:53 - it's up here and now if I go to events
135:56 - page I see the header and I also see the
135:59 - footer Okay so
136:02 - let's repeat what we just done we have
136:05 - wrapped our component with the main
136:08 - layout
136:09 - uh components where we have our header
136:12 - and our footer and a children property
136:16 - in between where all of our Pages
136:18 - opponents will be render okay something
136:22 - else that we could add here is a head
136:24 - content and with some generic settings
136:27 - that applies to all of our Pages we
136:30 - could have a hat
136:36 - and we could have here like meta
136:39 - description and so on I'm not going to
136:42 - do it for now because this is just a MVP
136:45 - a minimal viable product so we leave
136:49 - this for the next time for the next
136:51 - video so now what we need to do is we
136:55 - can just go ahead and remove
136:57 - this header footer that we were
137:00 - importing here
137:03 - okay now it will reload the page yeah we
137:07 - only have one header and one footer
137:10 - um
137:14 - remove this
137:17 - okay cool so let's talk a little bit
137:21 - about let me just clean all of this that
137:26 - we don't need
137:27 - okay let's talk a little bit about
137:29 - Styles we can have CSS in different ways
137:32 - we have some Styles in the project
137:35 - already so if we go to the style folder
137:38 - and we open the global CSS sales sheets
137:41 - we can see here that we have all the
137:44 - styles that mess yes yes kind of added
137:47 - for us is to display something in the
137:49 - page and and This Global CSS is imported
137:53 - on our root component our underscore app
137:57 - so we come here we can see it here okay
137:59 - so everything inside This Global CSS is
138:04 - going to be applied to the whole website
138:06 - so let's just go ahead and add some
138:11 - background so I can say live body and
138:14 - now it's a background color equal a
138:18 - blue
138:19 - okay so if I come to the side I'm in the
138:22 - event page I can see the blue in the
138:25 - home page I can see the blue and it
138:27 - about us I can see the blue okay so this
138:30 - is applied to the whole website
138:34 - let's just remove this so we cannot
138:37 - import CSS like this in other pages so
138:42 - we cannot let's go to underscore app
138:45 - let's copy this and now I'm going to go
138:48 - to about us for example example and
138:51 - move this
138:54 - Okay so
138:57 - um yeah I mean the right path that's
138:59 - what I was checking so if I come to
139:02 - yes about us I have a warning message
139:06 - saying that Global CSS cannot be
139:08 - imported from files other than your
139:11 - custom app due to the global nature of
139:14 - style sheets and to avoid conflicts
139:16 - please move all first party Global CSS
139:20 - Imports to page underscore app or
139:24 - compare the import to component level
139:26 - CSS CSS modules okay so we cannot do
139:30 - this and it's already talking that
139:32 - telling us about CSS module so let's get
139:35 - rid of this
139:36 - okay so as now the warning message is
139:39 - gone and as it was saying us to apply
139:42 - its types to each specific components
139:45 - and we could use CSS modules and there
139:48 - are also other ways of
139:50 - um doing this
139:51 - so as these modules allow us to write
139:54 - statuses for each component and that we
139:58 - import the sheets to the component so we
140:00 - could bring about us and just imported
140:02 - here how we did before but only we use
140:05 - CSS modules Nest is going to scope those
140:08 - styles to that component by adding
140:11 - random characters to the class name so
140:13 - you don't have to worry about the
140:15 - conflicts names between different class
140:17 - names and there are other ways we call a
140:20 - CSS like using style components or
140:23 - emotions for example
140:25 - but this tutorial is about next year so
140:28 - I'm not going to go into any of these
140:31 - options in a future video if you are
140:33 - interested we can add styles by using
140:36 - CSS modules or style components and we
140:39 - can even compare both of them but for
140:42 - now I'm going to have all my style
140:45 - sheets in the global style sheets which
140:48 - is something I definitely don't
140:50 - recommend you to do so but we are
140:52 - learning how to use Nest yes here so
140:55 - it's fine
140:56 - actually I'm going to use SAS SAS stands
141:00 - for synthetically awesome style sheets I
141:05 - think
141:06 - and SAS is an extensive to CSS it's a
141:10 - CSS preprocessor we need to install it
141:14 - and we need to solve this as package so
141:17 - let me install that while I explained to
141:20 - you why I think it's better for us to
141:24 - use us okay so I'm gonna
141:26 - click here to create a new windows okay
141:29 - so I'm gonna do npm install shortcut eye
141:34 - for eye checker for install
141:36 - SAS
141:38 - and I'm going to save it in the
141:41 - development mode because we don't need
141:43 - this for production so there you go okay
141:47 - so
141:48 - um yes okay
141:52 - so I have a kind of an issue with this
141:56 - shells so I need to
142:00 - okay so the reason why why I'm going to
142:04 - use us is because search Nest supports
142:07 - such natively and it's a lot quicker to
142:10 - write code because we can use variables
142:12 - we can Nest the code that is especially
142:15 - the reason why I'm gonna use it we can
142:17 - Nest code and we can also
142:21 - um like avoid using some semicolons or
142:24 - columns on sampling to 18 so well yeah
142:26 - it's installed that was pretty quick so
142:30 - um now we only need to actually rename
142:33 - this
142:34 - um
142:34 - this style so for example we have here
142:37 - home module CSS so when you install an
142:39 - SDS as you can see it comes with the
142:41 - module CSS by default as well uh but we
142:45 - don't want to use module CSS for now I
142:47 - just want to do this is the Styles part
142:49 - as fast as possible because I prefer to
142:52 - focus this tutorial in learning SCS so
142:56 - having said that let's rename this and
142:59 - I'm going to remove all of this I'm just
143:02 - going to say help SAS okay
143:05 - so this should work you see how okay I'm
143:08 - just gonna undo what I just done I'm
143:10 - going to say so command save in mac and
143:14 - all the curly brackets and semicolons
143:18 - are gone okay so that is one of the
143:21 - reasons why I prefer to use SAS and I
143:24 - prefer to use SAS over as CSS cool and
143:27 - uh that's it now we just need to start
143:32 - adding our styles
143:34 - okay so now let's start building the UI
143:38 - okay I'm going to start by building the
143:41 - header then the footer and then we'll
143:43 - move to the home page events page
143:47 - um and all the other pages okay and the
143:49 - about that space so let's start I'm
143:52 - going to start by
143:54 - I have this home I'm just gonna say
143:57 - um General okay I'm just gonna place
144:01 - here everything I'm just gonna leave the
144:03 - global as it is and or actually
144:07 - let's just do
144:10 - let's just do something
144:14 - and just gonna remove all of this I'm
144:18 - just gonna rename this file here say SAS
144:22 - okay I'm just gonna remove the yellow so
144:25 - we are just gonna keep one as we said we
144:27 - are gonna keep it simple right
144:29 - so we just need to update this and let's
144:33 - see I hope anything I hope it didn't
144:36 - break okay I need to go to Global CSS
144:39 - and now save it to remove and Savvy in
144:43 - the right format for SAS and you we can
144:46 - say like all the cardio brackets are
144:48 - gone so we come here let's use refresh
144:52 - the page it's still failing okay
145:00 - and
145:02 - that's your wife finally
145:04 - let's just close this
145:07 - okay this is what
145:22 - I changed my mind I think
145:25 - um
145:25 - can't be bothered to check into that era
145:28 - so I'm just gonna leave Global CSS as it
145:30 - is I'm gonna come here I'm just gonna
145:32 - put this back into CSS okay so we have
145:36 - now our general SAS okay
145:40 - and I just need to go to the app and
145:44 - import this so I'm just gonna duplicate
145:46 - this
145:51 - SAS and now zero
145:56 - right
146:20 - okay it's just throwing an arrow here oh
146:25 - okay okay okay cool um I'm just I can't
146:28 - just get rid of all of this we don't
146:30 - need any of that okay so cool now we are
146:33 - here so in our designs we have like the
146:36 - header would be more like 300 height
146:39 - pixels so let's just go to
146:44 - Heather
146:45 - put up close and everything that I don't
146:48 - need
146:48 - so
146:50 - all of this
146:58 - okay
146:59 - I'm gonna make this even bigger
147:03 - and now let's just start by
147:08 - adding it like this and saying height
147:12 - 300 pesos
147:15 - there are better ways of doing CSS like
147:17 - using n or Ram but
147:20 - we are going to keep it simple okay
147:26 - cool okay so now we have that
147:29 - now uh we were going to have a look we
147:34 - are gonna have a logo here so let's just
147:37 - come here so I'm just gonna divide this
147:41 - for we have navigation
147:44 - okay
147:45 - um
147:46 - just gonna call it just gonna have a div
147:48 - I'm just gonna put the dip within the
147:50 - Navigator the navigation within the dip
147:52 - and here in this diff I'm going to have
147:56 - an image with this is going to be my
147:59 - logo right
148:22 - okay I'm going to import this image in a
148:24 - minute and now a navigation we are just
148:28 - going to leave it like this
148:31 - and down here I'm just gonna add a H1
148:36 - this is going to be the title of our
148:38 - page
148:43 - I'm just gonna use
148:45 - something like this
148:51 - okay maybe shorter
149:28 - okay so I have my logo ready and now we
149:33 - can come here to the public folder
149:35 - something that I like to do is to create
149:36 - a new folder for images
149:39 - and I'm just gonna drop my logo here
149:43 - okay
149:45 - just gonna copy this
149:47 - nice
149:50 - now I come to my header and I can just
149:53 - import it like this because these public
149:55 - folders with this public folder is
149:58 - saying the brute level so we don't need
150:01 - to do something we don't need to do this
150:04 - okay we can just specify it like that
150:07 - okay
150:08 - um
150:13 - okay
150:18 - logo
150:20 - and of course
150:24 - we need to import this
150:32 - okay doesn't complain now
150:45 - um
150:46 - okay do I need to do images okay
150:52 - a typo there okay now we can see our
150:55 - logo here okay
150:58 - so let's just do this let's just be like
151:02 - Paula's name okay and you say top bar
151:08 - top navigation top now
151:12 - okay
151:13 - now we come here
151:17 - top knob and then this is going to be a
151:20 - display Flex
151:22 - and justify content Center
151:28 - I don't remember how this is okay no
151:32 - space between
151:35 - space between and then
151:38 - um
151:39 - align content Center okay
151:42 - let's just Surfer look cool okay this is
151:45 - starting to look a little bit better
151:47 - then we need to give a bit of a padding
151:49 - around but we'll do this here actually
151:52 - uh padding let's just say
151:56 - I don't know we've got 50 pixels cool
151:59 - okay
152:01 - it's a bit too mad
152:04 - so
152:05 - let's just do this and let's go to the
152:08 - header and let's just add a bit of
152:10 - semantic asml okay so let's just do uh
152:14 - nav
152:15 - or do I need to I probably uh maybe I
152:19 - should yeah okay let's just do this
152:25 - okay I need
152:29 - okay
152:31 - and then I'm gonna have another layer
152:38 - and another one for about us
152:45 - and this should be fine
152:48 - okay
152:49 - so this is how it's looking at the
152:51 - moment but where about this we'll sort
152:53 - that out in a minute
152:56 - okay
152:57 - so
153:02 - let's go back here
153:13 - just thinking
153:16 - let's just move this let's just do this
153:19 - and we can see
153:22 - cool this is better right sorry
153:26 - this is better
153:34 - okay
153:47 - foreign
154:16 - and now I'm just gonna
154:18 - um
154:19 - add the lid like this and just say a
154:22 - font let me see if I can do it from here
154:24 - from the weight I'm just gonna do a 600
154:27 - okay
154:29 - and I'm also I also want
154:32 - all the text to be a bit bigger
154:35 - but let's just do it from here then font
154:39 - size
154:40 - 16 pixels
154:44 - so be better and now just to make sure
154:48 - um
154:54 - okay
154:57 - let's just do this and let's just say
155:24 - okay
155:46 - [Music]
156:06 - foreign
156:20 - because I can see it I can use this
156:25 - um the browser tools to adjust their CSS
156:28 - see it in real life a little bit faster
156:31 - than doing it in the code
156:34 - um so yeah I like doing it like this so
156:36 - this is how I do it
156:38 - so this is a
156:41 - a header and these are displayed
156:45 - Flex so it is not by going to be a
156:48 - display Flex
156:51 - okay
157:00 - um directional
157:02 - Flex
157:05 - column okay and align items space
157:10 - between what
157:16 - um okay
157:18 - all right
157:23 - stays between yeah there this one it is
157:27 - and then I think I'm just gonna leave it
157:30 - like this I'm just gonna copy this
157:34 - head up
157:36 - yeah but he's complaining this is fine
157:39 - now and now I want the title to be this
157:44 - smaller so 30 pixels okay
157:48 - 40 pixels I want the font size to be
157:51 - quite big
157:54 - okay
157:55 - so what about something like this
158:04 - and
158:06 - text transformation
158:08 - capitalize no uppercase uppercase
158:13 - cool okay this is a bit better
158:16 - again
158:18 - this is a prototype
158:21 - just to have something nice to
158:25 - show but
158:29 - and then
158:35 - okay so I cannot see the H1 style
158:38 - supplied and that is because I'm having
158:40 - it here inside the top knob so I'm just
158:43 - gonna cut this just need to move it here
158:46 - okay
158:48 - save it now it should work
158:57 - foreign
159:01 - okay so now let's just uh give it a
159:05 - little bit of a style of our cards okay
159:08 - so now before that let's just go under
159:11 - the footer okay
159:12 - so let's just close this and now footer
159:17 - and
159:19 - this okay so we can close the header I
159:22 - think the header is fine for now footer
159:24 - we want this to be background color
159:30 - foreign
159:53 - okay and now we are going to have some
159:56 - padding around so padding 10 pixels okay
160:02 - and I want it in the middle so text
160:07 - Santa
160:11 - text align Center
160:16 - okay I think this is fine for now this
160:19 - is looking cool it's okay footer done
160:21 - okay so now what we need to do is this
160:24 - bit here okay so use the home page so if
160:27 - we open the home page component let's
160:30 - see what we have here we have a main
160:34 - that we could wrap all of our other
160:36 - pages in main as well
160:38 - [Music]
160:39 - yeah actually something that I like to
160:41 - do is to have this Main in the main
160:44 - layout component so in this main layout
160:46 - component
160:48 - I like
160:49 - to have
160:51 - Main
160:54 - and then these children would think will
160:57 - be within May
160:58 - so then I can customize this meant for
161:02 - all the pages okay
161:05 - so I could say something like if I had
161:08 - it there I don't need it here right so
161:10 - let's get rid of this and just have a
161:11 - fragment
161:12 - so then I could come here and say Main
161:15 - and
161:18 - say with 100
161:24 - and then Max with
161:28 - um
161:29 - like this maybe
161:33 - okay and then margin
161:37 - O2 okay this is to sell like a maximum
161:41 - width so our Pace doesn't use like
161:44 - extracts to the infinite and basically
161:47 - of the size of your device because some
161:51 - user might have might have like a
161:53 - massive
161:55 - um monetary screen
161:57 - um so you you don't want that right you
161:59 - don't want to understand that it's just
162:00 - like the full width like that right so
162:03 - what you want is
162:05 - um
162:05 - to have a maybe a 1
162:10 - 450 and then anything that is gets
162:14 - bigger than that we can see here like
162:16 - any screen that is bigger than 1450 it
162:19 - will be just like margin around right
162:23 - so I think this is cool so I can show
162:25 - you how it looks so for example if I
162:28 - said okay responsive
162:30 - you can see
162:31 - how it looks like here okay the um
162:35 - so and we could do the same for the
162:38 - header
162:39 - um and I think that would be a good idea
162:42 - not the header like the color I wouldn't
162:44 - like that but maybe the content inside
162:46 - could do the same so for example this
162:49 - could be a
162:51 - [Music]
162:52 - um
162:53 - this all could be brought actually in
162:56 - another dip the whole stairs and then
162:59 - that is what it could be like Max width
163:03 - and so on
163:09 - um but yeah let's just leave it here
163:10 - okay and let's use
163:13 - close
163:15 - this
163:17 - and yeah so we said 1450 so this is how
163:22 - it should look like
163:24 - and yes so let's just add a bit of
163:27 - padding we still need padding wires so
163:29 - 30 pixels
163:30 - and then
163:37 - okay so let's just say what we have here
163:40 - we have here is links
163:44 - and we have this main main div
163:48 - and then we have a div we say in that
163:50 - okay with all our links
163:53 - and this depth within that is this one
163:55 - here so we could do this class name and
164:00 - um
164:01 - home body okay for example
164:15 - oh I don't need this now
164:18 - so display Flex
164:21 - Flex Direction
164:26 - go to column
164:32 - okay
164:34 - and now what I need is for each of them
164:38 - which is a link
164:40 - I need to add a class to each of them
164:42 - okay so I'm just gonna say class name
164:45 - equal a card okay
164:50 - so I can come here now and say card
164:55 - and now I I want to do yes so I want to
164:59 - say display Flex
165:03 - and then this is a flex
165:05 - Direction row
165:08 - okay as you said
165:11 - let's just say this
165:35 - so content and then we say the width we
165:38 - want to build with 50
165:42 - and then I'm going to wrap this in a div
165:46 - um and I'm going to move all of the
165:48 - content within that tip okay
165:50 - so it's looking like this let's make it
165:53 - look better and then class name this is
165:55 - going to be content okay so we have an
165:58 - image of a Kappa content
165:59 - and this is going to have a gap
166:03 - of 30 pixels
166:06 - okay and this is going to be justified
166:09 - content in the center
166:12 - um and align
166:17 - and I want a gap here of 50 pixels
166:30 - okay
166:32 - and I'm also I also want to wrap this
166:35 - image into a div because I've seen like
166:39 - let's make a little bit complicated to
166:41 - customize the image like that so this is
166:44 - going to just be image like that
166:48 - foreign
167:14 - pixels
167:20 - and now what we want to do is to just
167:23 - put this in the middle so Center all of
167:27 - this part this content okay so let's see
167:31 - how to do this
167:49 - okay so there you go I couldn't remember
167:52 - where the property was so we were
167:54 - missing align items in card okay that's
167:57 - why I love how them I love to use the
168:00 - browser because it is so handy
168:04 - um events in London events in San
168:06 - Francisco events in Barcelona okay so to
168:09 - make a little bit more interesting uh we
168:12 - said that we would want to
168:15 - um
168:15 - put this one the MS starting the right
168:19 - size so like reverse the order of the
168:21 - elements and something that I'm seeing
168:23 - here is that I would like to have more
168:26 - more potting at the top
168:29 - at the bottom so for that I'm gonna have
168:33 - here to the main I'm gonna sell like 30
168:37 - pixels is fine for left and right but I
168:42 - want 50 pixels for top and bottom okay
168:45 - and even
168:46 - less
168:48 - go crazy okay yes let's just leave
168:52 - something like this
168:53 - and now okay
168:55 - to change this order what I'm going to
168:58 - do is in the car because this is the car
169:01 - I'm going to say
169:04 - and this is the the odd so this is going
169:08 - to be like this child well what am I
169:13 - typing
169:15 - and then art
169:19 - and then I'm just gonna say order
169:22 - I think it's reverse
169:37 - no
169:38 - Direction
169:51 - okay yes direction direction
169:55 - I'm gonna say here the direction
169:59 - is a right to left okay so this should
170:05 - work amazing
170:07 - okay this is so I don't want the odd I
170:11 - wanted the even okay yes I think I think
170:15 - I'm not sure what it does
170:17 - what it looks better
170:22 - okay this doesn't looks great okay so
170:26 - let's just do something
170:30 - let's just make our resource screen
170:33 - smaller
170:35 - and what I'm going to do is to make the
170:38 - images a little bit bigger okay
170:41 - so
170:44 - now
170:47 - okay I think this looks a bit better
171:01 - okay and I think I want to do the same
171:04 - for the header because now I don't
171:06 - really like how it looks
171:13 - thank you
171:19 - so in the header I'm just going to open
171:23 - the header component okay I'm just gonna
171:25 - open it I'm just going to say
171:28 - right I want to wrap the whole thing in
171:31 - my div
171:38 - and now here when I'm in a header I'm
171:41 - just gonna
171:42 - just gonna do it like this okay this is
171:44 - not the best way of doing it but it's
171:46 - fine for now
171:51 - okay
171:52 - so now here is where we could
172:00 - we could say the same thing that we have
172:03 - down here
172:18 - foreign
172:36 - I want to have it here
172:40 - nice okay
172:53 - okay
172:55 - so this is the home page okay so I think
172:58 - we have the home page I think it's fine
173:00 - it's looking good
173:02 - and now let's just go to the about us
173:05 - page okay
173:08 - so we go to the about us page and let's
173:10 - just make this look a little bit better
173:13 - so we can see like we would like to have
173:15 - the footer at the bottom right
173:19 - so what I'm going to do is I'm just
173:22 - gonna give a main a minimum height
173:28 - I'm just gonna say 16 pixels it's a bit
173:32 - too much
173:33 - 14 pixels so it's literature it's a bit
173:36 - too little 500 pixels
173:40 - okay
173:43 - and yes I mean we could add a lot more
173:46 - text and a little more and other styles
173:50 - and
173:51 - so
173:58 - just to play around to be honest okay so
174:02 - to play around let's just do something
174:04 - like this we have like imagine that we
174:07 - have other sections where we talk about
174:09 - uh about this company about this my
174:12 - events company okay
174:14 - um
174:16 - this looks a little bit better already
174:18 - and now let's decide the H3
174:23 - okay and I will next text
174:27 - there you go it doesn't looks great but
174:32 - we can't always have something now like
174:35 - this
174:37 - thank you
174:52 - okay and then we'll have another one
174:58 - here where we select a different text
175:03 - to make it look a little bit different
175:07 - there you go
175:08 - [Music]
175:17 - out
175:19 - as list
175:30 - okay
175:32 - now let's just do it at the middle color
175:34 - bracket so let's just do it like this
175:39 - what
175:43 - okay so now we have display Flex row we
175:46 - have something like this so yeah I mean
175:49 - just to play around a little bit you
175:51 - know it doesn't looks great very great
175:54 - but
175:55 - I think it's okay it's something that I
175:57 - also want to change is
176:01 - we are in Main and
176:07 - okay I want to display this at the top
176:10 - starting from the top without leaving
176:13 - all of this separation but maybe this is
176:15 - what yeah this is what I added earlier
176:19 - yeah
176:20 - I make it smaller though I don't quite
176:23 - like it maybe I make eight pixels
176:34 - 80 pixels
176:37 - okay so we have hung about us page
176:43 - um
176:52 - how would this look like if we change
176:55 - this Row for column
177:01 - okay
177:02 - so maybe something like this cool okay
177:05 - so we have the home page we have the
177:07 - about page and let's go to the events
177:09 - page so this was just going to be like
177:12 - um
177:13 - a big image all in one word with the
177:16 - title in the middle so let's do this
177:18 - okay let's close this let's close all of
177:22 - these and let's go to events page
177:28 - onto the events
177:31 - real page
177:34 - so I'm going to do sectors and as I did
177:37 - in the home page
177:38 - I'm going to
177:40 - you say class name here
177:44 - it's going to be events page okay so I'm
177:47 - gonna use this I'm going to come to the
177:49 - CSS dot the class name
177:54 - and here's where I'm going to add all
177:56 - the styles to my events page okay
177:59 - so we have this and what we want is I'm
178:03 - just this is the page page so I'm gonna
178:06 - take this and
178:08 - just come here I have an arrow I have
178:11 - created a narrow function
178:13 - right
178:17 - and I'm just gonna paste all of that
178:20 - here
178:25 - okay I might be going a little bit fast
178:27 - but we've done this before so and now we
178:30 - when we go to this page we just need to
178:32 - call this this imported
178:36 - nice okay and now we need to pass the
178:39 - data
178:40 - okay because we have the data in this
178:43 - page that is coming from this get a they
178:46 - get a static props yeah so we come to
178:49 - the events page here with the structure
178:52 - and we pass the data like this right
178:55 - okay code so it's working okay
179:00 - so now
179:02 - something I need to fix is I need to add
179:07 - this so we don't have this here anymore
179:10 - I'm gonna add it to the component
179:22 - okay
179:26 - cool so all everything is working now
179:30 - I love the the the the link
179:35 - I definitely lost the link okay
179:38 - I'm saving this I go to events page I'm
179:41 - also saving this
179:47 - let's just give that reload
179:52 - okay so my local hotels
179:56 - welcome
180:00 - let's come here uh indeed so I'm calling
180:05 - the component with components the same
180:07 - so I'm going to update this one
180:10 - and or
180:13 - no I'm going to update this well okay
180:15 - I'm going to call it all events
180:21 - just like that it's fine and now I come
180:23 - here and
180:28 - foreign
180:37 - so let's go to all events we have events
180:39 - face here we have the title
180:42 - right events page
180:46 - I'm just gonna get rid of this title
180:49 - let's suppose that these eight to one
180:51 - title is personalized for this page this
180:53 - is something else that we can do in a
180:55 - next implementation let's use
180:58 - um add some Styles today so what I'm
181:00 - going to do is okay we have the events
181:03 - page
181:04 - and we have all of this on a div
181:09 - okay I'm not sure if we need that
181:21 - okay yeah we have a day within a div we
181:23 - don't need that
181:25 - cool okay
181:27 - now write events page this needs to be a
181:33 - display Flex row
181:36 - so
181:37 - here will be a row
181:40 - okay rules and then I'm going to leave
181:43 - some more gap between them well Gap
181:47 - 20 pixels
181:50 - and now I want these big letters in the
181:53 - middle so what I'm going to do is
182:02 - it's going to be class
182:07 - okay so I'm gonna come here I'm gonna
182:09 - say
182:11 - right
182:12 - card
182:14 - okay
183:27 - what I've been doing is font size 35
183:30 - pixels
183:33 - 30
183:34 - 8 pixels then color white I transform it
183:39 - and put it in the uppercase and then I
183:42 - added above Shadows used to
183:45 - um
183:45 - to make everything
183:48 - more visible okay
183:51 - so let's go here and just add all of
183:55 - these styles
184:02 - okay and
184:19 - so we have now the home page we have the
184:23 - about us and we have the events page
184:25 - okay so let's just go to
184:28 - um events in London and let's just start
184:31 - putting together these all of these
184:34 - cards okay so where we have like this
184:36 - image at the top and then the text and
184:40 - uh
184:41 - this text here okay so let's do that so
184:45 - let's go to index events category
184:58 - okay just leave this here something I'm
185:01 - seeing is that we have this big Title
185:03 - Here that we set as H1 but then we have
185:06 - the title of each page at H1 so we need
185:09 - to add effects to it but we'll do it
185:11 - once that we finish like styling all our
185:14 - page okay
185:16 - so let's start by bringing all of this
185:19 - into its own component now we can add
185:22 - within the events folder that we already
185:24 - created Okay so
185:27 - let's just yeah go here and let's go to
185:30 - the components folder
185:35 - yeah and I'm going to add a new no no
185:38 - folders no more folders just a new file
185:42 - that is event card
185:48 - yes I'm just thinking that I'm going to
185:51 - need another one that is going to be
185:53 - event
185:55 - events event per
185:58 - category event okay category
186:01 - just like this cartoon event
186:06 - cool okay just gonna leave it like this
186:19 - okay this is going to be the events uh
186:22 - category so I'm just gonna
186:25 - um take all of this as I did earlier I'm
186:28 - just gonna
186:31 - copy all of this
186:33 - I'm just gonna bring it to here
186:41 - okay and now I can come here and can I
186:45 - can call this component we only have one
186:48 - thing to call so instead of returning
186:51 - that like this I'm just gonna return it
186:53 - directly so this is going to be category
186:58 - um
187:03 - this is going to be
187:06 - actually rent
187:08 - okay and I need to pass these two bits
187:13 - so
187:14 - theta equals
187:18 - data and Page name
187:22 - equal
187:23 - page name
187:31 - okay
187:37 - cool
187:38 - so now
187:40 - category events
187:43 - we need these two
187:54 - and we need this as well
188:02 - cool okay let's just leave this here for
188:05 - the moment I'm just gonna start creating
188:08 - a this I'm just gonna call this class
188:12 - name catholi events
188:15 - and now this is going to be a
188:21 - our content
188:23 - and then I'm gonna call this class name
188:26 - card
188:29 - okay
188:35 - and I I created a specific component for
188:39 - this class because I really like to have
188:42 - everything really organized um
188:44 - like if this is a class com that this is
188:46 - a car this is an atom this should be in
188:48 - its own component
188:51 - um so but nevertheless I mean
188:54 - our application is quite small I don't
188:56 - want this tutorial to be super super
188:59 - long
189:00 - so for that reason I'm going to remove
189:02 - this one I'm just gonna leave it here
189:04 - okay just to make a little simpler but
189:06 - the idea is that this works in the same
189:08 - way I react so you should be dividing
189:11 - your components into smaller components
189:15 - okay so category events
189:19 - foreign
189:27 - let's see let's have a look
189:34 - okay for a start
189:38 - display flash Plus
189:41 - um
189:44 - Flex Direction column
189:47 - okay
189:49 - and I want all of these events
189:52 - um
189:55 - call this
190:09 - um
190:10 - content
190:19 - and this is going to be a display Flex
190:22 - row
190:25 - and this is going to wrap
190:27 - so wrap
190:31 - so this is
190:33 - Lex wrap
190:35 - wrap
190:39 - Okay cool so each each of them is going
190:44 - to have a width of Select this for
190:47 - pixels
190:49 - so like this
190:51 - and we are going to have a gap in the
190:53 - middle of
190:54 - 30 pixels
190:57 - cool
191:11 - Okay so
191:18 - sorry this cup needs to be here
191:23 - and now and we need to say that this is
191:26 - with
191:28 - 100 percent
191:33 - okay
191:35 - or we could do something even better so
191:38 - this is calculation with 100 minus
191:42 - 30 times three times
192:05 - it's probably worth 100 percent
192:09 - is with 100 yes device center uh just
192:15 - five
192:16 - items this five Contest Center
192:33 - okay
192:35 - so this is the event in London let's
192:38 - just go to all events let's just go to
192:41 - events in San Francisco and this is how
192:43 - it looks like
192:44 - right I don't really like that so I am
192:48 - going to
192:50 - just
192:51 - um have this displays flex and this is
192:54 - justify contest start
193:13 - okay
193:23 - okay and now we go to
193:26 - Benson Barcelona this is how it looks
193:29 - like
193:31 - well right now let's just go to the
193:34 - house party and this is our events help
193:37 - party
193:38 - um
193:39 - it's okay
193:40 - it could be the design to be better but
193:43 - I think for this demo for these uh
193:46 - tutorial I think is it's definitely okay
193:50 - so house
193:51 - and haunted house party 2022 this is our
193:56 - event
193:57 - and
194:00 - yes I think this looks good
194:03 - so let's just continue with let yes
194:07 - let's just finalize the eui
194:12 - okay
194:15 - um
194:23 - cool maybe there is something
194:27 - smaller we could do
194:34 - right okay
194:38 - so
194:39 - I think it looks okay I think I'm just
194:41 - gonna leave here this title as events in
194:43 - London and what I'm going to do in the
194:45 - header because we shouldn't have two H
194:47 - ones in the header I'm just going to I'm
194:52 - just going to transform this is into a p
194:55 - plus name still this is going to be a
194:58 - title so now when we come here
195:05 - title
195:10 - okay
195:12 - but that's fine not too bothered about
195:14 - that
195:16 - about pay yes
195:19 - okay events in London and see somebody's
195:21 - convincing Barcelona and the home page
195:24 - there's this clicking something physical
195:26 - you take us to this beautiful place a
195:28 - page and when we clicking one you take
195:31 - us to this to the single event I think
195:34 - this is good I think this is okay for us
195:37 - for this tutorials definitely okay so
195:40 - something else that we need to add now
195:42 - add to this page I'm just gonna quickly
195:45 - do this and is to add a button no a
195:52 - input
195:53 - type
195:55 - email
195:57 - okay I'm just gonna do it quickly now we
195:59 - we're going to do it properly but I'm
196:02 - just going to show you what we need to
196:03 - do and now we're gonna have a button to
196:05 - like
196:06 - soap neat
196:08 - okay
196:10 - so this this is what we are going to do
196:12 - for our next step which is build the API
196:16 - and interact with a internal API that we
196:20 - are going to have within our project
196:21 - okay so uh this uh let's just recap we
196:26 - just done and we just added Styles we
196:29 - added to this SAS uh
196:33 - file and we could add the Styles in
196:37 - different ways like CSS modules emotions
196:39 - style components but we decided to go
196:42 - for a simple option just adding all the
196:44 - Styles here okay
196:46 - where else have we done okay so we moved
196:49 - the header and the footer to its own
196:51 - components and they only we think main
196:54 - layout that we call in the root of the
196:57 - application that is the underscore app
197:00 - full file
197:03 - um so this one sweet we did this because
197:07 - we want these components to be shared
197:10 - across all the pages so we don't have to
197:12 - duplicate work and like create them and
197:17 - um coordinating every single page and
197:19 - then what we did is this move all the
197:22 - content that we have in each page into
197:25 - its
197:26 - um
197:27 - we move it into its own component and so
197:30 - here we have moved into its own
197:32 - component and
197:33 - yes just to clean it up a little bit and
197:37 - to make the pages as light as possible
197:39 - and just by doing this recap I just
197:41 - realized that we haven't created a
197:43 - component page for this one we still
197:45 - have it here so let's just quickly do it
197:48 - okay so we can finalize with the lesson
197:51 - of building the UI so let's just do
197:54 - super fast here
197:57 - just gonna add another one like single
197:59 - event
198:03 - and now I'm just gonna close this we
198:07 - don't need this for the moment
198:11 - you don't need this so we're gonna take
198:13 - all this come here
198:19 - just gonna paste it here so single event
198:23 - we're just gonna copy here I'm pasting
198:25 - the support default okay
198:29 - and we need to bring the image that we
198:32 - have here that we don't need in the
198:33 - other page anymore and just paste it
198:35 - down here after the react okay so now we
198:38 - need to destructure the data which we
198:41 - also need to pass here when we call this
198:44 - component so I'm just going to remove
198:46 - all of that just do a single event
198:48 - and they meet
198:50 - scroll it properly and now we just need
198:53 - to pass the data data equal data
198:57 - curly brackets okay
199:00 - and all of these should work just as
199:03 - good
199:05 - good working okay so yeah I think now we
199:09 - have finished with all the uis so it's
199:12 - time to start building our API
199:15 - okay so actually before moving to uh to
199:19 - the next point in our list that is
199:21 - building the API let's just
199:24 - um sort some issues that we have here
199:26 - you can see like then we've been doing
199:28 - some changes and now we have no planning
199:31 - at all here so just let's just change
199:33 - that okay so we're gonna come here and
199:37 - I'm also let's just change this to start
199:40 - four Flex start it's better to use the
199:43 - flex
199:45 - cool okay so as I told you earlier I
199:49 - like to do things in the browser a lot
199:51 - because I can see what I'm doing and
199:53 - then I just move into the code
199:55 - so I'm just gonna come here and head up
199:59 - and here is where I'm going to say
200:01 - padding uh 13 pixels I'm not sure this
200:05 - is
200:06 - uh a lot
200:09 - um
200:11 - maybe something like 15 pixels 13 pixels
200:16 - I think this would match our body
200:19 - content
200:21 - okay yes let's just go ahead I I mean it
200:25 - looks better than how it was before
200:28 - so
200:31 - just go back here
200:37 - just gonna make this a little bit bigger
200:38 - okay cool
200:40 - um
200:41 - I think the UI looks good so I think
200:43 - it's time for us to talk about apis
200:47 - so if you don't know what an API is I
200:50 - will advise you to do some Googling and
200:54 - understand how what they are how they
200:56 - work because it's quite an important
200:59 - concept to understand but but let's just
201:02 - go through it quickly API stands for
201:04 - application programming interface it
201:07 - allows software to interact with other
201:09 - software we can use apis when we want to
201:12 - interact with a computer or system to
201:15 - retrieve information or perform
201:17 - functions if we go to the next DS
201:21 - documentation let's just search for
201:24 - um API
201:26 - I'm just gonna go to the introduction
201:30 - so here is telling us API Roots provide
201:32 - a solution to build your API with nextgs
201:37 - so any file inside the folder Pages API
201:41 - is mapped to API and will be treated as
201:44 - an API endpoint in yourself a page they
201:48 - are server site only bundles and won't
201:51 - increase your client-side bundle size
201:52 - okay
201:54 - so let's just go to our project to our
201:57 - repo and go to pages
201:59 - here it is so by default we have a
202:03 - folder called API that has a hello file
202:06 - there this is just an example that an
202:08 - SDS has kindly added added for us
202:12 - so in this folder in this API folder is
202:16 - where we can inject API words and we can
202:19 - write server side code here which is
202:22 - then triggered for requests to these API
202:26 - groups so as we can see API I am sorry
202:28 - as we can see in SDS is allow us to
202:32 - build an API without having to build a
202:34 - separate project just by having this API
202:38 - folder within our pages
202:42 - so any page inside this folder will be
202:46 - treated as an API Point as we say right
202:49 - so this hello this example is is treated
202:53 - as an endpoint and and here as you can
202:57 - see we we are now a terminal a reactive
203:00 - component we have the other type of
203:02 - pages for that like these pages
203:06 - and what we do here is to is create a
203:10 - rest API endpoint and we use them to
203:14 - return a Json response
203:18 - if you are familiar with Express you'll
203:21 - find it easier to understand the code we
203:24 - write here like this thing this syntax
203:26 - and because I think both yes and express
203:29 - use a similar pattern
203:32 - and let me show you let's just go to the
203:35 - browser and here we can go to Diamond
203:37 - Point by doing API
203:39 - forward slash hello
203:42 - and
203:43 - you can see that we get the response
203:46 - named
203:47 - let's show you how to pronounce
203:50 - um but let's just change this name to
203:52 - Alicia
203:54 - foreign
203:56 - okay so we go back to our page we reload
204:00 - now we can see the new response
204:03 - okay before creating a new file let's
204:06 - have a look at what we the API
204:08 - interaction that we are going to create
204:11 - and go to the events page
204:14 - here we need to go to any event
204:19 - so add tag for example and here we have
204:23 - this uh input with submit so this I'm
204:27 - just gonna add a label so it's clear
204:29 - what we are going to do here
204:31 - here we are going to add the label
204:37 - and get register
204:40 - for this event so I think now it's more
204:43 - clear what this input email emphasis for
204:46 - if we go back to the yes on file
204:49 - you have you might have noticed that in
204:52 - each event in each event object we have
204:55 - here this entry for emails register so
204:58 - what this is is basically all the people
205:00 - that are attending this event all the
205:02 - people that have registered to attend
205:04 - this event so what we want to do is and
205:07 - we are going to have a form here so the
205:09 - user can introduce a his or her email so
205:13 - when the the user clicking submit we are
205:16 - going to have a post uh request
205:19 - and so we are going to create an API in
205:23 - point for that so the user clicks you
205:25 - submit we create a post and request and
205:29 - we are going to update our Json file and
205:33 - that's the new email email
205:35 - so um things that we need to consider is
205:38 - each email needs to be added to his
205:41 - right event right so we need to check
205:43 - that the ID and that the ID of this page
205:47 - which is this path
205:49 - and matches one of the options of one of
205:54 - the events that we have here in this
205:55 - year so and then at the events other
205:59 - things that we want to consider we want
206:00 - to
206:02 - um probably throw an error or some
206:04 - message if the user is not filling in
206:08 - um this input email correctly if it's
206:11 - not like in a
206:13 - um in the format of the email is not
206:16 - correct
206:17 - um something else that we probably want
206:18 - to consider is not allowing the user to
206:21 - into that introduce the same email twice
206:25 - so something like this have some tag and
206:30 - some logic there in place so we check if
206:32 - this email is already it has already
206:35 - been registered and show a message to
206:37 - the user like these are this email has
206:40 - has already been registered right okay
206:43 - so some of the things that we want to do
206:47 - okay so behind the screen how this
206:49 - usually work is we send data to some
206:52 - server This Server then connects with
206:55 - the database
206:57 - here and the database will store our new
207:00 - data
207:02 - this request is about storing the data
207:04 - accepting data and sending back adjacent
207:07 - response
207:09 - I want to send a HTTP request with
207:12 - JavaScript
207:14 - when the request hits our API we extract
207:19 - that data from the request and store it
207:21 - in a database
207:23 - okay so I want to send an HTTP request
207:25 - with JavaScript when the request hits
207:28 - our API we extract the data from the
207:32 - request and store it in a database
207:35 - we can send the request to our API root
207:40 - and then in the API root here we connect
207:43 - to our database this file here the idea
207:48 - is that when the user click submit after
207:51 - filling in this input we are going to
207:54 - intercept this email
207:56 - so
207:57 - for example we are going to intercept
208:00 - this email and send it to our database
208:04 - to this data Json file
208:07 - and to do that what we need to do is
208:09 - create an API root to allow Chief
208:13 - systems to communicate with each other
208:15 - our app and our database because we
208:19 - cannot send it to our database from our
208:22 - client app so from here for example on
208:25 - this component like adding some
208:27 - JavaScript this will be really secure I
208:30 - mean in this case our database is this
208:32 - Json file but
208:35 - um in most cases you will have
208:37 - credentials in the database and if you
208:41 - send data from the client directly to
208:43 - the database you will be exposing these
208:46 - credentials
208:48 - and before continue last year's uh make
208:53 - this properly and add some styles to it
209:00 - so I'm going to close some
209:03 - days we don't need this uh let's just
209:05 - leave here the Json so
209:08 - we're going to create a form
209:12 - and within the form we are going to move
209:14 - all of this within the form
209:17 - so now we are going to
209:21 - um
209:22 - like you said like the ID is
209:26 - email
209:31 - placeholder is please insert
209:36 - your email
209:39 - here
209:40 - yeah let's just leave it here for a
209:42 - moment and
209:44 - um in the bathroom
209:46 - this is fine we can add here type
209:49 - pattern if we want
209:52 - and in the old form is where we are
209:55 - going to we need to add it on submit
209:59 - and here we will create a function let's
210:01 - just leave it like this uh or actually
210:04 - let's just create a function so it
210:07 - doesn't complain
210:10 - okay just come here and create almost
210:19 - narrow function and let's just leave it
210:21 - like this for now
210:23 - okay because I just want to add these
210:27 - Styles first
210:28 - oh
210:30 - okay so now let's just I'm just gonna
210:33 - add a class name here I'm going to say
210:45 - and here I'm going to add another class
210:47 - name and say events event single
210:53 - page
210:55 - okay so now I come to the general
211:04 - and I'm also going to copy this one here
211:07 - so oh typo here okay
211:15 - cool
211:17 - okay and now I am going to start by the
211:22 - email
211:24 - so input
211:27 - and let's say I wouldn't decide to be 40
211:31 - pixels so it's a good size for the
211:34 - user's finger to click on
211:36 - because we need to make everything
211:38 - responsive
211:39 - think about mobile and mobile design as
211:43 - well
211:44 - I mean with probably something like 200
211:48 - pixels and then let's just have a look
211:51 - at what we have here okay
211:53 - I'm just gonna do it here in the
211:55 - inspector so as I said earlier so I can
211:58 - see how it looks like okay I don't want
212:00 - any both Shadow or anything I don't
212:02 - think we have anything here but box
212:05 - shadow
212:06 - just in case another browser adds
212:09 - something by default I'm just gonna say
212:11 - about selling to none and border
212:16 - um I'm gonna add a border radius
212:19 - like five pixels
212:22 - okay we can see that this is kind of
212:24 - like a border image to there I'm gonna
212:26 - say if it's known
212:29 - or maybe is
212:31 - okay let's use maybe it's the border
212:33 - border one pixel solid and I want this
212:37 - to be oops what did I do
212:43 - okay I was here I want this to be
212:48 - this gray for example yeah that was good
212:51 - so probably
212:54 - cool I also want that padding left
213:00 - two pixels well and we want this in a
213:04 - placeholder actually so we cannot do it
213:06 - from here and let's just say font size
213:09 - 16 pixels
213:10 - and I think we can just leave it here
213:14 - yeah
213:15 - um let's just make this 400 pixels and
213:18 - I'll make these looks a little bit
213:19 - better just fly now
213:23 - three picks
213:25 - 150. okay so I'm just gonna copy all of
213:27 - this come here and just paste it okay
213:31 - save it and the format will be applied
213:33 - cool and now I want these form to be
213:37 - display Flex Flex Direction
213:42 - and column
213:45 - with Auto
213:48 - or
213:50 - yeah well Gap I want a bit of gap
213:53 - between all of all of the elements
213:56 - and
213:59 - actually
214:01 - um
214:03 - no because I want these two to look to
214:07 - be side by side so what I'm going to do
214:11 - here is
214:13 - yes let's do this display Flex in the
214:15 - label and then I'm going to add a margin
214:18 - bottom
214:19 - of 15 pixels for example yeah this looks
214:23 - good and let's do some more bits font
214:26 - size 18 pixel phone way way
214:30 - let's just say 800 yes and I'm just
214:34 - doing capital
214:36 - not like this was a test decoration
214:39 - upper case say like that test one form I
214:44 - think
214:46 - yes okay
214:49 - cool and maybe
214:53 - margin top I want this to be
214:56 - and so there is more separation between
215:00 - the label and the top but I'm going to
215:03 - add this into the email registration
215:09 - I hope I haven't lost all of this okay
215:12 - good so I'm just gonna copy here I'm
215:15 - gonna come I'm gonna label just as it is
215:19 - save it
215:21 - come back
215:23 - here we have it okay let's add the
215:26 - styles to the button
215:29 - so I'm just gonna add battle all of this
215:33 - you really have two last names but our
215:35 - website is quite simple at the moment so
215:38 - let's just leave it like this cool okay
215:41 - so again
215:43 - let's have the Styles here
215:46 - so we are going to start for Border
215:48 - radius I want it to be the same
215:50 - and then a height the same
215:54 - men with
215:57 - um
216:00 - okay this is going to be like for
216:04 - example
216:06 - okay were there none we don't want any
216:09 - border and then we want the font size to
216:13 - stick 16 pixels as well text transform
216:17 - uppercase we want everything in Upper um
216:21 - yeah in uppercase
216:22 - and then margin left is the side
216:29 - pixels put
216:32 - weight
216:34 - 16
216:39 - okay
216:42 - um what else
216:43 - okay let's decide the background color
216:47 - so this is a treat that I do all the
216:49 - time I like to select when I like to
216:52 - select color from the page and I want to
216:55 - use this palette what I do is like the
216:58 - shirt is a color name to write with red
217:01 - so I usually just what I do is
217:04 - background red and then I click here in
217:07 - this Square I I choose the selector and
217:11 - then I come um to any part of the page
217:13 - and I just select the color that I want
217:15 - in this case I want to select this green
217:19 - okay
217:21 - and yeah I'm just going to leave this
217:24 - green it's a bit too clear actually
217:26 - maybe we can select like a darker
217:29 - version
217:32 - art before
217:34 - um
217:37 - maybe a border
217:44 - I do the same here red but then this is
217:48 - not going to be red I'm going to change
217:49 - this
217:52 - okay I'm just gonna leave it like this
217:54 - so I'm going to copy all of this come to
217:57 - our Styles paste it save down
218:04 - and you can you see that we don't have
218:07 - this hover over in the bottom
218:11 - um let's decide like a cursor pointer
218:14 - and now we have it okay
218:21 - pointer and then I'm going to add an
218:25 - uncover so
218:27 - to make more Interactive
218:34 - Okay so
218:36 - what I'm going to do is
218:39 - um
218:40 - swap the colors so I'm gonna have the
218:43 - color has this green
218:45 - and then
218:48 - the background is going to be
218:56 - it's going to be like a dark gray
219:04 - yeah
219:07 - okay
219:09 - so for some reason the background color
219:11 - is not working let's have a look
219:18 - oh okay let's just reload this page
219:23 - and now yeah now it's working okay so if
219:26 - you're working
219:28 - um here in the inspector because when we
219:31 - do changes in in our app thanks to nasty
219:35 - as great features and we don't need to
219:38 - reload the page to see our changes
219:41 - um if they get applied automatically
219:43 - with this how to refresh or how to
219:45 - reload so because of that
219:48 - um
219:56 - um so that's why I needed to reload okay
219:59 - so yeah we can see that now it's working
220:01 - okay so now that we have the UI already
220:03 - let's start by creating our API
220:07 - we are gonna come here to the API folder
220:12 - and we are going to create a new page
220:14 - that is going to be email
220:17 - registration
220:20 - foreign
220:26 - as default so let's just start by export
220:32 - default
220:37 - which is a Handler let's just call it
220:39 - like this um that has two props one is
220:43 - request and the other one is and
220:45 - response
220:47 - we can handle multiple HTTP methods in
220:50 - an API route so if we want to add some
220:54 - logic only for the Post method and we
220:58 - can identify it by by this by doing this
221:03 - equal post and then add some logic here
221:07 - okay so
221:10 - to do this I'm just gonna do it a little
221:12 - bit different I'm going to the structure
221:14 - the method that is inside request
221:19 - okay and then we can do this if method
221:26 - is equal to post
221:31 - then we want
221:36 - we add our code here
221:41 - okay
221:44 - one API is quite common normal that we
221:48 - will have different methods we could
221:49 - have like if the method is supposed we
221:51 - do this if the method is get we'll do
221:54 - something different and so on okay so
221:58 - let's use every couple we want to do
222:00 - what we want to do is when the user
222:02 - inserts here an email and click on
222:05 - submit we want to identify in which at
222:09 - which event ID we are on and at the new
222:12 - email to our Json file so add it here
222:16 - okay
222:17 - let's just close this
222:19 - cool so that's what we are going to do
222:21 - to do that first let's just go to let's
222:26 - just go to yeah start by adding the
222:29 - functionality in the client
222:31 - we said that we have here a submit
222:35 - button we have an input and here the
222:39 - form has an own submit function that we
222:41 - have created here and it's currently
222:43 - empty so we are going to start by adding
222:46 - there some and adding the logic okay
222:49 - so we want to first track whatever the
222:55 - user has insert we want to store the
222:59 - value
223:00 - for the user has introduced in the input
223:03 - and to do that I'm going to use the use
223:06 - ref hook
223:11 - this is a react hook
223:14 - so I'm going to say const input email
223:18 - equal use breath
223:23 - this is to get the reference of an
223:25 - element now we can assign it to the
223:28 - input email and now we can come here and
223:32 - in the input we can say ref equal
223:41 - input email
223:44 - oops so this is a variable okay okay so
223:49 - input email
223:51 - okay so Indiana I'm just gonna
223:56 - here we get an event prop automatically
223:58 - because we are adding this function to
224:01 - the omsum mid form so we only need to
224:04 - pass it like this and we can have access
224:07 - to this event Frost because the browser
224:10 - assumes we are sending a request and
224:14 - um and assumes that because we are
224:16 - adding this function to the building
224:18 - ultimate of the form and we want to
224:20 - prevent the default of reloading the
224:23 - paper we saw earlier that when we click
224:25 - here in submit this reloads by default
224:28 - so to do that is prevent the default it
224:32 - is like this okay so I come here and now
224:35 - I can say close email value
224:39 - and we said input email
224:42 - dot current dot value okay and
224:48 - um let's use other console logs so
224:51 - we know what we have within input email
225:09 - okay so this is all the information
225:11 - about our input
225:13 - by current and within current you can
225:16 - see that we have here value and then we
225:19 - have a bunch of other things we have
225:21 - loads of other things okay at the moment
225:24 - this is empty but if we introduce
225:26 - something here
225:28 - it will be empty because we will have to
225:30 - relocate in order to see this but
225:33 - um
225:34 - what we are looking for is the value so
225:38 - let's just keep it here value
225:41 - and now
225:43 - what we need is to identify the event ID
225:48 - and to do that I'm going to use another
225:49 - foot so comes router equal use router
225:54 - and this is a nav vs hook
225:57 - foreign
226:05 - automatically and now we are going to be
226:07 - able to get inside
226:10 - the power page the router page so let's
226:12 - just put another console log so we can
226:14 - see what
226:16 - this has in size so this has as part
226:19 - we can see this part here
226:22 - um we have other bits like the query the
226:25 - category London the ID
226:27 - that edge Tech was lead uh so this is
226:31 - what we are looking for this bit here
226:33 - I'm just gonna go to
226:36 - that this bit here okay so if we go to
226:39 - another page let's just go to Advanced
226:42 - in San Francisco
226:43 - um blockchain for example okay
226:49 - right so now we can see that the
226:50 - category San Francisco and the idea is
226:52 - at SF blockchain week so this is what we
226:55 - want to use
226:58 - so let's do a const event ID
227:04 - it's like this and this is router
227:08 - I'm just gonna add here this question
227:10 - marks optional trading just to double
227:14 - check that
227:15 - and to only get into query once that we
227:18 - have the router and ID and yeah just
227:21 - like this and then type it
227:24 - okay
227:25 - so
227:27 - um
227:27 - and what we want to do here this is
227:29 - going to be an Ascent function right
227:30 - because this is a this is our own submit
227:34 - notice we need this
227:37 - and so I'm just gonna add here the word
227:39 - Ascend and what we want to do what I'm
227:41 - going to use is a try catching block so
227:44 - we are going to have a try and we are
227:46 - going to have a catch
227:49 - with an arrow in the middle and like
227:52 - this okay
227:53 - so here in the try we want to do a fetch
227:58 - request
228:00 - and a post set request
228:04 - post-first Festival Quest okay something
228:07 - else that we want to do is we want to
228:09 - send in our body in the body of the fat
228:11 - request we want to send the email Valley
228:15 - and and the event ID and then in our
228:21 - cats what we are gonna do is we are just
228:24 - gonna leave the same as simple as
228:25 - console log and ever just like this
228:30 - error
228:31 - starting
228:34 - all right okay
228:36 - I'm just gonna show this one
228:40 - I think I'm gonna change the color of
228:44 - the same I kind of fancy
228:47 - working a lighter color
228:49 - so I'll say like
228:52 - this
228:54 - okay so to change this you just do
228:57 - command shift p and then you type thing
229:00 - I think you need to install the plugin
229:03 - so yes if you don't have this go ahead
229:06 - and install color thing and then you can
229:08 - choose between like a selection of
229:11 - different things okay I hope this is
229:13 - still visible for you so we were in
229:16 - email registration of air here if it's a
229:19 - method post we are going to send a Json
229:23 - response to that
229:26 - and
229:27 - um so we can go ahead and do rest status
229:31 - if the status is 200 if everything is
229:34 - good then Santa Json responds with a
229:38 - message
229:40 - like this message
229:45 - um you let's say you has been registered
229:49 - successfully
229:52 - with the amount and we will have to pass
229:55 - here the email okay so for now
229:58 - so this is if we do a post request and
230:02 - the response status is 200 this is what
230:05 - we do okay from here I'm just gonna go
230:08 - ahead and say const email
230:11 - and event ID
230:16 - and and this is going to be request dot
230:19 - body okay
230:22 - and
230:24 - yes okay so let's do a post-fetch
230:28 - request and test that this is working
230:30 - okay
230:32 - so here in try I'm going to say const
230:36 - response
230:37 - just let's just type the word like this
230:41 - I wait
230:42 - okay because these are synchronous and
230:45 - the function we are 30 so it's
230:47 - asynchronous and then and this is API
230:52 - and email registration
230:56 - okay I'm surprised it's not suggesting
230:58 - us be able to completion okay so this is
231:00 - like this and we had an external Source
231:03 - we will add it here in the same way just
231:06 - like specifying the end point
231:08 - and
231:10 - um
231:11 - but in our case we need to point it to
231:13 - to this to our API this needs to match
231:17 - the path where we save our API page so
231:20 - this is our current domain for a slash
231:24 - API email registrations and then we can
231:28 - open curly brackets and here is where we
231:31 - are gonna pass our options so method we
231:34 - want this to be a post request okay this
231:36 - is where we specify it we are going to
231:39 - be sending a Json so we need to specify
231:41 - the type of content so we add this to
231:44 - the header like Heather
231:47 - content type and
231:50 - application Json and here in our body we
231:54 - want to convert a JavaScript value
231:57 - whatever JavaScript value we are going
231:59 - to pass into a Json string so to do that
232:03 - we need the Json method dot string five
232:07 - as is suggesting us here
232:10 - okay so I'm here within
232:13 - um the curly bracket is where we send
232:15 - the data that we want to append to this
232:18 - request so we will pass email equal
232:21 - email value and then event ID
232:29 - okay because this is the same as doing
232:32 - this is the same as doing this event ID
232:35 - okay is the same word so we only need to
232:38 - specify like this
232:40 - cool as as we said we want to convert
232:43 - the JavaScript values here into a Json
232:46 - string okay
232:49 - so now and if I say this
232:54 - um I save this
232:58 - and I do here I'm going to do the dollar
233:02 - I'm going to add the variable here
233:05 - and let's just add the email as well
233:08 - it's so fun
233:10 - okay so now to to get this response to
233:14 - get this data we need to convert into
233:16 - something that we can work with and
233:18 - similarly what we said here to do that
233:20 - we need to use the Json method so we can
233:23 - say count data equal await because this
233:25 - is also and these returns are promised
233:28 - so a weight response Dot jsons
233:33 - dot Json okay
233:36 - and now we have the data that we
233:38 - probably should do something something
233:39 - it's a really good practice is to say if
233:42 - we don't get a response it responds no
233:45 - sorry if the response
233:47 - is not okay
233:49 - okay this is not okay we want to throw
233:52 - an error and we can just throw it like
233:54 - here so throw
233:59 - so throw New Era
234:02 - and then let's say error
234:06 - it's
234:10 - a wrap and then we say response dot
234:13 - status okay this is in case something is
234:15 - going wrong so we can see that there
234:18 - and so we can throw an error and this
234:21 - will catch it here
234:22 - okay so now we have the data and
234:26 - um
234:27 - we have the email registration we have a
234:30 - um
234:31 - our request our endpoint returning a
234:36 - Json okay
234:37 - okay so in email registration
234:40 - we have here a message if if and the
234:43 - response status is 200 which is means
234:46 - like a successful
234:48 - um so I'm just going to lock this so I'm
234:50 - going to say post
234:52 - layout here later
234:56 - let's have a look
234:58 - so we come here
235:00 - and
235:01 - let's just introduce something
235:03 - you can choose wherever you want and we
235:05 - clicking submit
235:07 - okay it's not working
235:11 - foreign
235:39 - okay
235:42 - okay so yes this is the type of this
235:46 - button is actually submit so that is the
235:49 - reason why it cannot be just like a
235:51 - normal button so I was wrong there when
235:54 - I was adding actually when I added the
235:56 - Thai button I was already thinking like
235:58 - this doesn't look right but I still did
236:00 - it uh but yes okay so remove the type
236:03 - button from the bottom
236:05 - and you can
236:07 - I believe you can actually add the right
236:10 - type to the bottom which is submit and
236:13 - this should work good yes this is
236:14 - working okay so as we can see here let's
236:17 - just clean this and we have invested
236:20 - successfully which is not true but our
236:24 - message is coming through and it's
236:26 - coming through with the right email that
236:28 - we have introduced and
236:30 - um the ID of the page so we have some
236:34 - things working good okay so from our
236:37 - single event and when we are submitting
236:40 - this form
236:42 - now we can send this value to our API
236:45 - root
236:46 - our API root is going to accept this
236:49 - extract it and save it in a database in
236:53 - our database
236:54 - so to do that let's just write here
236:57 - everything that we need to do okay so
236:58 - I'm just gonna do it outside the post
237:02 - um and here what we need to do is access
237:05 - our data
237:07 - which is this data Json file and once
237:12 - that we access our data we need to
237:13 - extract our data
237:16 - foreign
237:21 - we want to go here we are not interested
237:24 - in events category but we want to
237:26 - extract is the old events
237:29 - so
237:30 - we extract all events
237:34 - and then in all events we need to look
237:37 - through them
237:39 - and identify
237:42 - um the events ID and then there we need
237:48 - to add the email
237:51 - so add the email to
237:55 - this this entry emails register
238:01 - add email into this so what we need to
238:04 - is great
238:06 - and the right function
238:10 - you need to is right on our data
238:16 - what else do we need to do access our
238:20 - data extract our data extract
238:23 - specifically only events Loop through
238:26 - them and identify the event ID
238:29 - at the email into the email register
238:33 - right and on
238:36 - our data
238:39 - it doesn't make sense
238:40 - and something that we also need to do we
238:43 - could add it here is
238:45 - and the response should
238:48 - the response should be four or four if
238:51 - there are no
238:54 - all events okay this could be a
238:56 - possibility especially when you are
238:58 - interacting with external database you
239:00 - can you you always have to think about
239:02 - all possible errors some or everything
239:05 - that can't go wrong okay because in that
239:07 - case the response wouldn't be 200 you
239:09 - cannot tell the user yes your email has
239:12 - been registered like we do here if
239:14 - something goes wrong in the middle okay
239:16 - so if we have no data no all events the
239:21 - response is a 44 and once that we have
239:23 - all events we look through them and we
239:25 - identify the event ID we add the email
239:28 - into the email register but only okay
239:32 - I'm just gonna add this here like this
239:33 - only if that email doesn't exist
239:38 - and something else that we are going to
239:40 - to add but probably as a last point is
239:44 - check the format of the email is okay
239:49 - I'm not sure if this makes sense I hope
239:51 - it does let's just start creating it so
239:53 - first we need to access our data to do
239:56 - that I'm gonna come here I'm going to
239:58 - create a function
240:01 - so I'm going to call it
240:03 - um function
240:05 - the build path okay I'm going to build a
240:09 - path so I can easily access my data and
240:14 - um yeah so this is going to be a really
240:16 - simple
240:17 - um
240:18 - I need the path
240:20 - and so important path from path okay so
240:26 - we're going to need that
240:28 - imported like this without uh needing to
240:32 - install it because it comes with node.js
240:34 - and we install node.js when we install
240:37 - nastics so we need to construct a path
240:40 - so we can reach this file here the data
240:42 - Json which is our database and to do
240:45 - that we will use the join method so we
240:48 - will say dot join
240:52 - and then here inside we will add all the
240:55 - folders and finally the file to have an
240:59 - absolute path to the data Json file okay
241:03 - so first we need to get access to the
241:05 - current working directory so get access
241:09 - to the root okay so we will say
241:13 - process.cwd current working directory
241:15 - okay so now we are in the root of the
241:18 - project
241:20 - so if I open this again if we are in the
241:23 - root of the project the next thing that
241:24 - we have is the data folder and then we
241:26 - have the data Json so we need to add
241:29 - data and then Karma and data.json
241:34 - if we had another folder within data for
241:36 - example we had an event
241:40 - right and the data Json was within event
241:43 - then we could do
241:46 - um we could add the events like this
241:48 - okay so if we join all of this
241:51 - disconnect rate of events and also these
241:55 - folder because we don't need it
241:58 - cool okay so now we have access to this
242:03 - file so let me just return the path like
242:06 - this
242:08 - we also need to be able to update the
242:11 - file
242:12 - data Json so to do that there is
242:14 - something else we need to import and
242:17 - which is the model FS so import FS from
242:23 - FS just like this
242:25 - and again
242:26 - this comes kind of live by default
242:31 - this module here allows us to read and
242:34 - overwrite the data of a file so this is
242:37 - actually what we need I'm going to
242:39 - create another function here I'm going
242:42 - to call it
242:43 - um function extract data because this is
242:48 - what we are going to do
242:51 - because before updating our data we need
242:53 - to extract
242:55 - um this object let me just come here all
242:58 - events we need to extract this objects
243:00 - so we can look through the data and find
243:02 - the event ID and then once that we find
243:05 - this event ID we can register the new
243:07 - email and update the list
243:09 - okay so here we need to pass this file
243:12 - path
243:13 - okay so this is going to be a function
243:16 - that I'm going to call within our handle
243:19 - function so I'm going to extract it and
243:21 - so here we need to pass the file path
243:25 - and then
243:27 - I'll do
243:29 - const Json data
243:32 - is equal FF dot read file synchronize so
243:37 - read file sync and here is where I pass
243:40 - attach the file path
243:44 - and we need to parse this data so data
243:51 - equal Json dot parse
243:55 - now we pass Json data and we can return
243:58 - this and we can actually return this
244:01 - directly
244:03 - like this okay what I was doing Maybe
244:08 - let me just do it like this so it's more
244:11 - clear what we are doing here we are just
244:14 - returning these data here
244:18 - um so we need this past yearbook because
244:19 - we need to convert this into a
244:22 - JavaScript object okay so this now is a
244:24 - JavaScript object
244:26 - okay so now we need to go down and
244:29 - within our function uh here before the
244:33 - above here about the if statement I'm
244:36 - going to set the build path
244:39 - so can't
244:42 - file path equal and so I'm going to do
244:46 - build path
244:48 - just like this so now
244:51 - um we are storing within our function
244:53 - the our path
244:56 - our file path
244:58 - I'm also going to call the extract data
245:01 - function here so const data equal struct
245:07 - data and now here this is where I pass
245:09 - the file path
245:11 - okay but
245:13 - um here in this data if we if we go to
245:16 - our data we have two objects we choose
245:18 - event category and all events so what
245:20 - I'm going to do is I'm going to the
245:22 - structure them directly okay events and
245:25 - let me just copy it so I don't make
245:27 - mistakes
245:29 - um so like this and then all events I
245:33 - think it looks like that right
245:34 - oh okay and you realization that I
245:38 - probably should have followed the same
245:39 - standards and because here we have an
245:43 - underscore casing and for the old events
245:46 - I'm using a camel case I should probably
245:48 - just write it like this with underscore
245:51 - casing and yeah that would probably have
245:54 - been better but let's just leave it like
245:56 - this for now okay
245:58 - and give me this and uh okay so let's
246:03 - come here update this all events okay
246:07 - okay so now we want to set the response
246:11 - status to 404 if we don't get any data
246:15 - from if we don't get any data in all
246:19 - events in our case we own the data and
246:22 - we know we have data we can see it here
246:25 - right but we should always add these
246:28 - checks because we cannot assume that we
246:30 - are always going to have data
246:33 - so here I'm just going to say if
246:36 - all events so if we don't have data here
246:39 - in all events then we are going to
246:41 - return our response a status
246:44 - 404 and then we can add a Json response
246:48 - with it
246:49 - so the status would be
246:52 - 404
246:55 - and then the message
246:57 - we could say no
247:01 - um
247:02 - events data not found for example okay
247:13 - and we can actually move this about this
247:16 - if statement because we probably
247:18 - wouldn't want to run this this code if
247:22 - we don't have any dating all of that
247:24 - because that would mean that something
247:25 - goes wrong right and we obviously need
247:28 - to get some data back
247:31 - because otherwise this space wouldn't be
247:34 - working either but yes I think it makes
247:36 - more sense to just leave it above this
247:37 - okay so now within this if a statement
247:41 - what I'm going um I want to do is to
247:44 - create a new all events
247:49 - object okay so comes the new old events
247:53 - now what we want to do is we want to map
247:56 - through the all events so this like
248:00 - um
248:02 - foreign
248:08 - okay so what we want to do here is we
248:10 - want to check first if event dot ID is
248:15 - equal this event ID that we get in the
248:17 - request body
248:19 - if this is true okay because we want to
248:22 - find exactly the event ID that we need
248:25 - to add this new mail for okay so if this
248:28 - is true I I also want to check one of
248:31 - our requirements was to check that this
248:34 - email addressing is Sister ready right
248:36 - so we want to say if event email
248:40 - register
248:43 - and now dot includes and now it includes
248:48 - our email that again we're receiving the
248:51 - request body so if this is true we want
248:54 - to send a response
248:57 - so response status and this would be a
249:00 - 801 I think and your citation and
249:05 - message and we can say something like
249:08 - this email
249:11 - has already been registered
249:17 - okay
249:20 - okay so if this is not true then here we
249:23 - can return
249:26 - so here in this subject what we want to
249:28 - do is we want to return all the data
249:30 - that we already have in the object so
249:32 - all of these data here okay so what I'm
249:36 - doing is I'm using the spread operator
249:38 - so I can return everything without
249:40 - having to specify ID title and so on and
249:44 - in email register
249:46 - this is an array okay and what we need
249:49 - to return here is similarly we need to
249:52 - let me just go to one that has already
249:54 - tells yeah so for example this one we
249:57 - want to uh still return
250:00 - um the emails that we already have here
250:01 - register and the new email that we just
250:04 - added
250:04 - so to do that we will use again the um
250:08 - spread operator so we will do a event
250:11 - dot email register
250:14 - and now we will add the our new email
250:16 - which is this one that comes from this
250:19 - request body okay
250:22 - and now if this is not true okay so if
250:27 - and because this will Loop through all
250:29 - the old events okay so when it found the
250:32 - events ID it will do this operation if
250:34 - not it will just return the event object
250:37 - without adding without any
250:39 - transformation
250:43 - cool okay now we need to overwrite our
250:47 - file so we'll use
250:50 - um FS again so we can come here and we
250:53 - can say FS dot write file
250:57 - and
251:00 - write file sync again
251:02 - and here we pass file path
251:06 - and here we need to pass uh the data
251:09 - that we want to save in our file so what
251:12 - we have is
251:14 - um we have the structure earlier so we
251:16 - need to pass in the same way
251:19 - so we will pass a events categories and
251:22 - then
251:23 - our all events is now
251:26 - new all events okay so we need to pass
251:29 - it like this okay so this we need to
251:33 - drop it in Json string file
251:38 - foreign
251:40 - we need to pass it to this so okay so I
251:43 - I need to wrap this in Brackets okay so
251:48 - we need to pass it to a student fire
251:50 - because earlier we we convert into a
251:53 - JavaScript object so now we need to
251:55 - convert it back to a to a string
251:59 - so that's why we need this um json's 25
252:01 - method
252:04 - okay so now our code will go through all
252:08 - of these operations and once all of all
252:11 - of this is good we'll send back these
252:14 - response here
252:15 - okay so now if I save this
252:19 - let's see if this now works I'm going to
252:23 - so I'm in this event blockchain I'm
252:25 - going to add here an email Laura at
252:29 - gmail.com
252:31 - when I click submit
252:43 - okay let's have a look at what is going
252:46 - wrong here so let's make this bigger
252:51 - it says the path argument must be of
252:54 - type string receive type function
252:57 - Anonymous okay so let's go to this bit
253:00 - and we say path joint process okay of
253:04 - course so we are missing these brackets
253:07 - okay so we save this
253:11 - and let's see
253:14 - we're still running into errors all
253:17 - events
253:19 - Okay so
253:21 - all events okay so we are missing here
253:24 - and yes
253:26 - right yes so all events
253:28 - and
253:30 - okay let me just double check
253:35 - made this a smaller
253:37 - all events okay you know okay and yes I
253:42 - we are also missing here in I'm guessing
253:45 - emails write this stuff
253:47 - so that means that we are missing a yes
253:50 - here as well
253:51 - okay so now let's say this hopefully I
253:57 - haven't made any other mistake
254:00 - cool so now it's working so we get here
254:03 - this message
254:04 - you have been registered successfully
254:06 - and it says Laura and the SF blockchain
254:10 - week and this is the events ID and we
254:14 - get this message because we added here
254:16 - um console log
254:18 - like this so now let's go to the Json
254:21 - and check if it's actually registering
254:24 - this email properly
254:25 - um so I'm going to copy this ID
254:30 - okay so yeah it seems like something has
254:33 - happened because the format has changed
254:35 - so here we have um I'm gonna format this
254:40 - just to make it easier
254:43 - um to breathe uh no okay so format
254:48 - with
254:49 - okay Jason cool
254:55 - okay so now we can see here the email
254:57 - Laura so let's try and submit it again
255:03 - okay so it says that it has been
255:06 - registered successfully again
255:13 - let's go back to here
255:17 - okay
255:18 - so
255:20 - we can see here that we are not we
255:24 - haven't added the same email twice so
255:27 - let's go back to our code
255:30 - let's have a look at why we are not
255:32 - seeing this response
255:34 - and first I'm gonna start by updating
255:38 - this because this should be a four of
255:40 - one error okay
255:42 - so we get that for one error when
255:44 - Response Code already assist
255:48 - um
255:49 - right okay so I updated this as for the
255:53 - email register but I didn't update it
255:55 - here so this is
255:57 - coaching as an issue
256:00 - um something else that we also should be
256:02 - doing here is return the events like
256:05 - this okay
256:06 - and yeah this should work
256:10 - let me just reload this
256:14 - now if I go here okay so now it seems to
256:17 - be working they have four of them a 409
256:20 - response I mean we go to the network tab
256:23 - we click here in email registration
256:25 - payload
256:28 - um
256:28 - response we can see this email has
256:31 - already been registered it's cool okay
256:34 - so uh let's go up here of our list of
256:38 - things that we need to do okay so we
256:40 - have access our data we have extract our
256:42 - data all events we have sent a response
256:45 - to 404 if there are not all events good
256:49 - then all events look through them I
256:52 - identify the event ID yes add the email
256:54 - into the email register but only the
256:56 - email doesn't exist that's good and then
256:59 - check the format of the email and it's
257:01 - okay okay so this is the last thing that
257:03 - we are going to do so let's save this
257:05 - let's come here and what we are going
257:08 - trying to do is
257:10 - um show a message if the user or send a
257:13 - response if the user has introduced an
257:15 - email in the wrong format so something
257:17 - like this and and try to submit so if we
257:21 - go to our front we are using in the
257:24 - input type email so by default Google
257:27 - Chrome is adding this message
257:29 - here
257:31 - and sorry
257:33 - is saying that please include an ad in
257:36 - the now address and but the thing is we
257:39 - cannot rely in the front too at the
257:41 - security for us right because any user
257:45 - could easily remove these messages and
257:48 - try to submit a email in the wrong
257:50 - format
257:51 - and in this case
257:53 - um it's probably no big deal but when
257:55 - you're dealing with a different type of
257:56 - data um it's important that you check
257:59 - that this kind of things like the data
258:01 - is coming to your database in the right
258:03 - format so there are two things that we
258:07 - can do first is add a message in the
258:10 - front and also a a response in the back
258:14 - and by default as I said Chrome is
258:17 - adding this is adding these messages but
258:20 - we can we can add our own message
258:23 - because there might be a browser that
258:26 - doesn't do this by default right that
258:28 - doesn't have this built-in to be honest
258:31 - I'm not sure I assume the Safari on fire
258:34 - was Firefox do the same and but we can
258:37 - come here and
258:42 - okay and
258:45 - let's add it
258:49 - okay so we can come here and say can't
258:53 - value regex and this is equal to I'm
258:56 - just gonna add
258:58 - paste all of this here because yes this
259:02 - is just
259:03 - and something that you can use when and
259:06 - you want to check that your email okay
259:10 - so this is just a value ready that we
259:12 - can use for emails okay so you could
259:15 - just copy and paste it like this
259:19 - um I might just
259:21 - added you can take it from the source
259:23 - code of the project or
259:26 - um I might just add it in the
259:27 - description box below Okay cool so then
259:29 - we can do something like if email value
259:35 - this amount value here
259:40 - and so yes so if this email value
259:43 - doesn't match
259:46 - the value bridges that we just created
259:49 - okay and then we are going to display
259:52 - some message to the user and to display
259:55 - a message what we can do is
259:59 - and we can use a
260:02 - user state
260:03 - this is
260:05 - um a hook
260:08 - a react hook so we can say message
260:12 - and then set message
260:15 - so this is a really handy hook I hope
260:18 - you already know about it you have
260:20 - experience with react and we can leave
260:23 - this empty
260:25 - and now we can say set message and we
260:29 - can say
260:30 - please introduce a correct email address
260:36 - okay okay we need to come here and
260:39 - import this as well
260:41 - just like this and
260:44 - now we need to display this message so
260:47 - we come to our return
260:50 - and let's just display it
260:53 - so we come here and we say message just
260:58 - like this and we save it
261:00 - and
261:02 - Google Chrome is not gonna allow us to
261:05 - check this message because it's showing
261:07 - this and this prompt already so what we
261:11 - can do is
261:13 - we are going to remove this type email
261:17 - and now
261:19 - if you click and submit oops this is
261:23 - actually allowed so if we click and
261:25 - submit like this we can we can see our
261:27 - new message please introduce a correct
261:29 - email address
261:30 - so as we can see it will be really easy
261:33 - for the user to just come here and
261:35 - remove properties like what we just did
261:37 - here like removing the type email when
261:40 - we added back is asking us to introduce
261:42 - the email in the right format but any
261:44 - user could change at the front like this
261:47 - and then that that will make it possible
261:50 - for them to submit an email
261:53 - okay
261:56 - okay but this would be this wouldn't be
261:59 - enough because in the same way that we
262:01 - just removed here the the type email
262:03 - property to allow us to introduce an
262:06 - email in the wrong format any user could
262:09 - do the same so it's handy that we are
262:12 - and it's good it's a good user
262:14 - experience that we are adding messages
262:16 - here but we also need to add some text
262:19 - in the back
262:20 - so we come to the back and
262:23 - here we need to say if we don't get an
262:26 - email
262:28 - or the email
262:32 - doesn't include and it doesn't include
262:35 - because you have here this exclamation
262:37 - mark and ads for example we could add
262:40 - more checks but let's just leave it like
262:43 - this that the response status is going
262:47 - to be to
262:49 - 42 and then
262:52 - the Jason
262:54 - message and we could say something like
262:58 - invalid email address yes
263:03 - it's like this and we need to return it
263:07 - here
263:08 - if we go to the front
263:10 - and again okay we have removed the type
263:13 - email so
263:14 - you go back to the console we send this
263:18 - is showing us the 42 error we can go to
263:23 - the network tab email registration and
263:26 - here we can see the message invalid
263:28 - email address so this is working good
263:32 - code okay there are a couple more things
263:34 - that we can do to improve our app so for
263:37 - example when we add an email so let's
263:40 - just start another email
263:47 - okay you have been registered
263:49 - successfully but we know that because we
263:51 - have this console here and we have the
263:54 - console open but the user doesn't know
263:56 - that the user doesn't have any feedback
263:58 - if this went through or not so um one of
264:02 - the things that we could do is display a
264:03 - message here like a confirmation message
264:05 - and
264:07 - um
264:08 - bless this yeah
264:10 - um come here and
264:13 - we could say set message
264:17 - data Dot message
264:21 - okay we can remove this now
264:25 - this
264:27 - so now if we come here and we add one
264:30 - more character
264:31 - now we can see our
264:35 - um our message
264:38 - and we probably could get rid of this
264:42 - um so we could say for the event okay
264:47 - just like that something else that we
264:49 - can do here is get rid of this text
264:53 - so once that
264:56 - all of the
264:58 - goes through and it's all okay we can
265:00 - come here and say
265:03 - um
265:06 - so we want to make reference to this
265:08 - input so we will say input email dot
265:11 - current dot value
265:17 - equal empty strings okay so this this
265:20 - bit
265:21 - is the same
265:23 - uh that we had here but now what we are
265:26 - saying is setting it now what we are
265:29 - doing is to reset this value
265:33 - okay if now we reload this
265:39 - and let me just add another email
265:42 - let's just go for it James
265:45 - submit you have been registered
265:47 - successfully and now the input has been
265:50 - resetted
265:52 - um we can introduce here I know the
265:54 - email if we want okay so now this looks
265:56 - much better right
265:58 - and
266:00 - um
266:01 - yeah there are probably loads of
266:04 - improvements that we could do so
266:06 - um let me just test something
266:09 - if we try to introduce here an email
266:15 - in the wrong format
266:17 - yes
266:19 - yes
266:20 - okay this is good he's saying that
266:22 - please introduce a correct email address
266:26 - cool okay and now it went through
266:28 - because we added the ads
266:31 - so yeah they seems to be working good
266:39 - let's just recover we've done so far in
266:42 - our component we are hitting our API
266:45 - endpoint which is this one API and email
266:48 - registration with a post request we are
266:52 - sending in our body the email value and
266:55 - the event ID of this page the page that
266:58 - we are on okay and we check that the
267:02 - response is okay before continuing and
267:05 - if the response is okay we extract the
267:08 - data of this response and we set it up
267:11 - in the message so we can give some
267:13 - feedback to the user meanwhile in the
267:16 - back when we hit this endpoint here what
267:19 - we are doing is first second that the
267:22 - the HTTP method is post if it is post
267:25 - then it's going to run this code and we
267:29 - are extracting the email and event ID
267:31 - from the request body we are adding some
267:34 - validation checks to the email and then
267:37 - what we want is to interact with our
267:40 - database so first we need to read our
267:42 - database we need to locate it which
267:45 - build the path and then we need to read
267:47 - our database one that we read our
267:50 - database and we know where in which part
267:53 - we need to update our data overwrite our
267:56 - data then we come down here here and we
268:00 - use the method right file sync and this
268:03 - is going to update our database in our
268:06 - case our database is this data Json that
268:09 - we have within our repo okay now I think
268:12 - we have all our app ready this has been
268:16 - a long tutorial but I think we are ready
268:18 - to deploy our app so to deploy this app
268:21 - I'm going to use Virtual because virtual
268:24 - Learners are made by Design Creator so
268:26 - it's an easy way of doing it there are
268:29 - different Services we can use to deploy
268:31 - next we could use Heroku like this and
268:35 - this one or we could use AWS
268:40 - I'm sure you know about this one over
268:43 - net me five nearly five okay or any
268:48 - other service the only thing that you
268:49 - need to keep in mind is that you need a
268:51 - host that can run node.js next uses node
268:54 - yes as we set a multiple times today
268:57 - right so all the files we deploy are
269:00 - JavaScript files so this only works on
269:03 - node.js
269:04 - so we need a service that allows us to
269:07 - deploy on a server I'm going to use
269:10 - Virtual
269:17 - so let's just go here
269:22 - and for this
269:26 - um
269:26 - is is free to use so you can go ahead
269:29 - and sign up
269:31 - so I'm going to sign up to this you can
269:34 - sign up using GitHub gitlabs or
269:36 - bitbucket the reason for this is because
269:39 - you can push your code to a remote
269:40 - repository I've synchronize both things
269:43 - so synchronize your GitHub with Verso so
269:46 - you will be updating your website and
269:49 - the plan and deploying it automatically
269:51 - to Virtual
269:55 - um so let's go ahead with signing up
269:58 - with GitHub
269:59 - so to sign up with GitHub first we need
270:02 - to have a GitHub account so so I'm gonna
270:04 - clicking create GitHub account I'm gonna
270:08 - say time
270:09 - to code
270:25 - okay so let's just leave it like this
270:28 - and
270:29 - for this one I'm going to use my email
270:36 - okay so your email here and then you
270:39 - need to adhere to your password
270:45 - all right verify your account let's just
270:47 - click in verify pick this this spiral
270:50 - color I can verify okay
270:53 - I'm done
270:55 - cool and now we can click and create an
270:58 - account
271:00 - thank you
271:01 - I'm going to save it
271:06 - and okay let's just go you need to go to
271:10 - your email email that you specify and
271:13 - you probably will receive
271:15 - um
271:16 - an email with a code
271:19 - uh looking like this okay
271:31 - okay so now versus who like permission
271:33 - so we just need to authorize Verso
271:38 - thank you so here now you need to
271:41 - introduce your telephone
271:43 - you'll receive a message where you need
271:46 - to add a code
271:48 - cool so now we are in so we have a
271:51 - virtual account and also a GitHub
271:53 - account
271:55 - so a import gig repository so I'm going
271:58 - to say continue with GitHub
272:02 - a repositories permissions that is fine
272:05 - so we are going to click install and at
272:07 - the moment because we just created this
272:09 - GitHub GitHub account our repository is
272:13 - empty so I'm going to
272:16 - um go to GitHub okay
272:19 - GitHub
272:23 - I'm logged in already so I'm going to go
272:25 - to my profile
272:28 - and no preference
272:30 - my repositories
272:38 - okay and what we need to do is create a
272:40 - new repository so new I'm just gonna
272:43 - scroll this nest
272:45 - yes tutorial
272:49 - just like this you can add here some
272:51 - description you can set it as public or
272:54 - private I'm going to leave it as public
272:57 - and you can either read me file if you
273:01 - want something place but I'm just gonna
273:03 - create it just like this okay
273:08 - clicking creating and there you go we
273:11 - have created our repository at the
273:13 - moment this will be empty so it's
273:15 - telling us different ways of how we can
273:17 - push our code okay so what I'm going to
273:20 - do is create a new repository on the
273:23 - command line following these steps
273:26 - so to do that we need to have git
273:27 - installed in our machine and give this a
273:30 - version control system if you don't have
273:32 - it installed you need to go to Google
273:34 - and follow the steps
273:38 - um
273:39 - okay getting you started with Git so
273:42 - this just follow the steps it should be
273:45 - quite straightforward and once that you
273:47 - haven't always told come back to this
273:49 - video and because we are going to follow
273:52 - these systems okay so in our terminal we
273:55 - need to come here to our terminal and we
273:57 - need to say
274:04 - I'm gonna kill this I'm gonna say get in
274:08 - it okay we need to do getting it because
274:10 - we are initiating for first time get in
274:13 - this a project in this repo
274:17 - okay we have initiated kit in it
274:21 - so now
274:22 - um
274:24 - let's say this is working it is status
274:26 - yes okay this is showing us the status
274:29 - of our project cool and so now we can go
274:34 - back to GitHub we can copy this URL you
274:38 - can come here you can say get remote at
274:42 - origin and
274:44 - oops paste the URL
274:48 - okay
274:50 - it seems like he's working what this is
274:52 - doing is linking up our local repo with
274:56 - our remote
274:58 - um repo the one that we just created
275:01 - and so now we need to push all our
275:03 - source code into that remote repo and so
275:07 - first we need to say get at Dot and what
275:12 - is this and what this is doing is
275:14 - staging all our changes so we have here
275:17 - to the source control tab
275:20 - let me just make this smaller so it's
275:22 - more clear
275:26 - okay now
275:33 - okay now I'm gonna close a few things
275:36 - because this one is really hard to read
275:39 - let me guess
276:03 - foreign
276:08 - so yes
276:10 - so when we do git add dot um we just
276:14 - stage our changes
276:17 - and now we need to do git commit M and
276:21 - then stand for message and here what we
276:23 - meant to do is to add a
276:26 - um a description of what we just done
276:28 - and so every time that you comment you
276:30 - need to kind of explain like briefly
276:32 - will you dance so for example if you
276:34 - change
276:36 - um the color of a button you will select
276:40 - um subscribe
276:42 - subscribe button UI change oh something
276:47 - like that right in our case we are just
276:50 - pushing all our Ripple ready for
276:52 - deployments so
276:55 - um
276:57 - so I'm just gonna say miss you lap to
277:00 - deploy
277:03 - okay so now we have committed all our
277:06 - changes and now
277:08 - um I would call this side with it so we
277:10 - just need to purchase so we do git push
277:13 - of reading and like you Upstream already
277:17 - like this
277:19 - May
277:23 - okay so we are getting some errors here
277:26 - let's just go back to here to these
277:29 - steps and we also need to create this at
277:32 - this Branch like this gets branch and
277:36 - Main okay so now we just need to do this
277:40 - hit push
277:41 - Upstream origin Main
277:45 - okay it's gonna it's asking us to sign
277:48 - in using GitHub we're clicking allow
277:51 - we author authorize this
277:54 - open Visual Studio code again
277:56 - yes open
278:00 - and it seems like it's all going through
278:04 - Goods let's go back to GitHub
278:09 - trying to reload this there you go
278:11 - amazing we have our repo in GitHub now
278:15 - this is really cool okay
278:19 - so
278:21 - okay so what we just did is use get the
278:24 - Version Control System to set up a
278:27 - connection between our local and git
278:30 - repository with our remote repository
278:33 - which is GitHub
278:35 - okay so now that we have our project
278:37 - here and let's go back to Virtual and
278:41 - add our projects and yeah we didn't even
278:44 - need to reload the pages it's already
278:46 - showing us our new repo so we clicking
278:49 - import
278:52 - foreign
279:00 - there are some settings here but I don't
279:03 - think we need to worry about that
279:05 - for our project and so we can click
279:09 - click on deploy click and deploy
279:13 - maybe we just need to wait a few minutes
279:19 - we are almost done
279:24 - let's wait for the complete message
279:36 - it's still building
279:48 - okay we can see here how is generating
279:51 - our static pages
279:53 - [Music]
279:54 - and there you go
279:56 - so our site is life
280:00 - now let's go to
280:03 - and continue to dashboard okay
280:06 - this is how it looks like we can click
280:09 - here in this link visit
280:12 - our fingers crossed our page is life are
280:15 - working
280:16 - this is really cool and it was super
280:18 - simple super easy
280:20 - now we go to events yes this is loading
280:24 - Goods events in London
280:27 - okay house party and it's always working
280:31 - let me just put here this email let's
280:34 - see if
280:35 - [Music]
280:38 - oh
280:40 - okay so this is no submitting so it's
280:44 - something here that is not working so
280:48 - let's go to Virtual building
280:55 - functions and there you go it seems like
280:59 - there is an issue here I will read only
281:02 - file system open
281:05 - okay with only so the data our database
281:10 - is working because we can see all the
281:12 - data but this is what we cannot write on
281:15 - our database this satellite is read only
281:18 - file system
281:21 - so I think this is a great exercise for
281:24 - you to now go and dig in and see what is
281:27 - happening and if we are probably missing
281:31 - some configuration here when we added
281:34 - our repo
281:36 - um
281:37 - is probably something going uh wrong but
281:42 - I think in this video we have learned so
281:46 - many things we have learned how to
281:47 - deploy and now we are having this error
281:49 - and so I think this is something that
281:52 - definitely we could have a look in a
281:54 - follow-up video but but I think you
281:56 - should go ahead and try to figure out
281:58 - what is happening here why we are
282:01 - getting this 500 errors and how to solve
282:05 - this
282:06 - okay so what others suggest you can you
282:09 - do
282:10 - um you could for example add more Styles
282:14 - make a look a little bit better for
282:16 - example here in the logo it would be
282:18 - good if this is a link and when you
282:21 - click here it takes you it will ocean it
282:23 - takes you to the home page like most
282:25 - websites do and that's just like some
282:28 - basic
282:30 - functionality
282:32 - and also the the responsive design could
282:35 - definitely be improved
282:39 - okay something else that we could do
282:41 - here is update this title and and print
282:45 - here the title of the page so in this
282:47 - case events reading about us we could
282:51 - print this about us page title loaders
282:54 - other specific title something like um
282:57 - highlight the title about this page and
283:00 - maybe add here an image and and figure
283:03 - out how to pass let me just close this
283:05 - main layout how to pass here a prop
283:10 - in header
283:13 - how to pass a prop to print
283:16 - um
283:17 - the specific title and maybe a
283:20 - background image and so then in each
283:22 - page you could you will still reuse the
283:26 - main layout but in each page you could
283:28 - specify
283:30 - um a specific image for about us and a
283:33 - specific title where else could you do
283:36 - in events
283:39 - um definitely add a lot more details to
283:42 - our event single page you could add
283:45 - the price of the event and some other
283:48 - features maybe a like feature so you
283:52 - have the get register but you could also
283:54 - have a like or maybe add comments that's
283:57 - something else that you could do
283:59 - um and to the home page you could add
284:00 - more sections or in the events you could
284:03 - add a lot more different categories so
284:06 - we have here the category per city that
284:08 - you could have other categories
284:10 - categories per season like Christmas
284:14 - Easter and Halloween or
284:17 - um
284:18 - motels and maybe it is a music event you
284:22 - could have like the categories per the
284:25 - type of music
284:26 - something else that we haven't covered
284:29 - either was the head metadata so when we
284:32 - inspect
284:34 - um
284:35 - the pace you see this uh healthy section
284:38 - here and it would be better if we had a
284:42 - specific a metadata per page so at the
284:46 - moment we can see like the title is
284:48 - events and up but if we go to the about
284:52 - us page
284:54 - and our title actually comes empty and
284:57 - in device consensus this is because
284:59 - we're having a specified any data in
285:01 - each component page this is something
285:03 - else that we can add to our Pages a
285:06 - suggestion for you is to add a specific
285:08 - metadata for each Patel so you could add
285:12 - it here the head and and you could have
285:14 - this head section initi page because
285:18 - is automatically merge multiple head
285:21 - elements
285:23 - even if we have a health set up enough
285:25 - because we also have it in this page
285:26 - component the content of those different
285:30 - head sections will get merged and there
285:32 - is a conflict if for example we have a
285:34 - specified title twice and next we'll
285:37 - take the latest element so in this case
285:40 - we'll take the about us page rather than
285:42 - the app file this is because the page
285:44 - component is rendered after the app
285:46 - components so the later has second win
285:49 - and that will be the head section of the
285:51 - page component instead of up that is
285:53 - something else that you could do
285:55 - so definitely go ahead and add more
285:58 - Styles make it look pretty and add more
286:01 - functionality
286:03 - wow this was a really long tutorial but
286:06 - I think it was actually quite fun we
286:09 - learned how to do lots of things with
286:11 - Nest yet at least the main things I hope
286:14 - I was able to teach you how to start
286:17 - creating and how to start putting
286:19 - together an application in SDS and from
286:22 - now I hope you have all the skills to
286:25 - carry on to taking this application into
286:28 - the next level
286:30 - keep adding more things and keep sharing
286:32 - them with me and yes I guess
286:35 - the next thing to say is like I I see
286:38 - you in my next video we will carry on
286:41 - improving this application there are so
286:43 - many more things that we need to learn
286:44 - about next yes so many more optimization
286:47 - that we could be that we could do and so
286:50 - many features that we could add to our
286:52 - awesome events application and don't
286:54 - forget that this this project you can
286:57 - take on your own so you can put it into
286:59 - your own repo to your own GitHub and
287:02 - then just change it and then if you need
287:04 - to present this for maybe a kind of
287:07 - review process feel free to do so this
287:09 - is your project you have build it so
287:11 - it's yours
287:13 - if you like this video if I was able to
287:15 - teach you something at least one thing
287:17 - please give it a thumbs up and leave me
287:20 - a comment down below share your feedback
287:22 - with me I really appreciate that and
287:25 - subscribe to my channel for more videos
287:26 - thank you for watching