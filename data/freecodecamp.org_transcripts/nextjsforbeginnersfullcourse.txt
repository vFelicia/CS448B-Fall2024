00:00 - next js is a popular open source react
00:02 - front end and this is a great beginner's
00:05 - course kapeh does developer relations at
00:08 - sanity.io
00:09 - and she is an excellent teacher aloha
00:12 - everyone my name is kapeh and welcome to
00:14 - my intro to nxjs course
00:16 - so i've been super curious about next js
00:18 - and if you have as well then we're all
00:20 - in the right spot now together we are
00:23 - going to be learning enough next to be
00:24 - able to continue on and build out our
00:26 - own applications
00:28 - so if you've worked with react in the
00:30 - past then you know that server side
00:32 - rendering is a huge pain also have you
00:34 - ever tried to configure your webpack who
00:37 - has time for that i don't but
00:39 - let me tell you about next it'll take
00:41 - care of all that for us this next js
00:44 - course will cover a number of things so
00:46 - our front end will be all the cool
00:47 - features of next and what it has to
00:49 - offer we'll be looking at linking index
00:51 - and even api routes with serverless
00:53 - functions we are going to be using an
00:56 - external api to manage all of our
00:57 - content and we will have real-time
01:00 - previews
01:01 - we will accomplish all of this with my
01:03 - favorite app idea a recipe app so i
01:06 - picked a recipe app not only because i
01:09 - need a place for all of my recipes i
01:11 - really like to cook but also because
01:13 - next.js has a ton of great features that
01:15 - i feel we can cover with in a recipe app
01:18 - now people say that next is very
01:20 - intuitive it's a very intuitive way to
01:22 - build applications for the web it's a
01:25 - react framework that takes away a lot of
01:26 - the complexity like i was saying earlier
01:28 - that you would have to solve yourself if
01:30 - you built something from scratch i think
01:32 - you're going to really like it
01:34 - and to pair nicely with next we'll
01:36 - handle all of our content with sanity.io
01:40 - next doesn't come with a way to manage
01:41 - content so we'll bring that in ourselves
01:44 - but what sanity does for us is it gives
01:46 - us a content link so we can not only
01:48 - query for our content but we can
01:49 - interact with it
01:51 - sanity is free for projects like this
01:54 - we'll explore that by adding a heart
01:55 - button it'll be a little like button on
01:57 - our recipe page that uses an api route
01:59 - to patch the recipe document
02:02 - now once we have all of our next front
02:03 - end pulling and content from the sanity
02:05 - content link we will use versailles
02:07 - where with zero configuration we can
02:10 - deploy our next app you can of course
02:13 - deploy next js apps to pretty much any
02:15 - hosting platform that serves websites
02:17 - and finally we'll add real-time previews
02:20 - to our next front end which is super
02:22 - useful for editors who want to see their
02:24 - changes before they go live it's very
02:26 - nice to have now before we start there
02:28 - are a couple of things that you should
02:29 - have some knowledge on first a little
02:31 - bit of javascript knowledge is super
02:33 - helpful
02:34 - second having worked with react
02:36 - previously would benefit a ton if you
02:38 - want to brush up on your react knowledge
02:40 - you can follow a react course from free
02:42 - code camp now you can find me on twitter
02:45 - at copay hey underscore okay and with
02:47 - all that being said let's get started
02:49 - all right so next.js next.js is a react
02:53 - framework for sites and apps for the web
02:55 - so it comes with a lot of functionality
02:57 - and we will talk about that um in just a
02:59 - moment and also throughout the building
03:01 - of our recipe app but i just wanted to
03:04 - show you so next.js if we scroll down a
03:07 - little bit there are 12 tiles that
03:10 - are titled y next.js but there are a
03:13 - couple that i wanted to really point out
03:15 - one for example is the file system
03:18 - routing and we will show you exactly how
03:21 - that is done and how next does that
03:23 - there is a really cool thing that when
03:25 - you add a file it adds a route you don't
03:27 - have to do anything else
03:30 - um then there's like zero configuration
03:32 - to set it up there's image optimization
03:34 - with an image tag but all these great
03:36 - things come with next js and with next
03:39 - all of our pages will be pre-rendered
03:41 - which is generally better for
03:42 - performance your user isn't having to
03:44 - wait around while you're while your
03:46 - application loads and it generally is
03:49 - better for seo as well so you get in
03:51 - front of more users
03:53 - and we will talk
03:54 - much more about these
03:57 - in particular and i'll show you exactly
03:59 - how they're done and how it looks and
04:01 - more on that in a little bit
04:04 - all right so before diving in there are
04:06 - a couple tools that we will be working
04:08 - with
04:08 - throughout this course that i want to
04:10 - make sure you have
04:12 - up and ready or are prepared for them so
04:14 - the first one is going to be vs code
04:16 - that is going to be the text editor that
04:18 - i will be using throughout this course
04:21 - um if there's a different text editor
04:22 - that you prefer to use by all means
04:24 - definitely use that but i will be using
04:26 - this and if you'd like to download it
04:28 - depending on your machine you can
04:31 - download it at
04:33 - code.visualstudio.com
04:35 - you will also need a command line i will
04:37 - be using item
04:39 - um it will look something like this um
04:42 - you could use the terminal you could use
04:44 - um any anything where you have a command
04:47 - line but we will be using a command line
04:50 - throughout this
04:51 - once we open up vs code i will be using
04:53 - the terminal in there and i will show
04:55 - you how to open that
04:56 - you will also need
04:58 - nodejs installed on your machine so if
05:01 - you know js.org you can find the
05:04 - download
05:05 - options for
05:06 - whatever machine you are on if you don't
05:08 - have this definitely get this installed
05:11 - and if you already do awesome
05:13 - so as i mentioned before you can pretty
05:15 - much use anything you want with nexjs
05:18 - local markdown files any external api
05:21 - and if you've built with react before
05:22 - you may have used use effect
05:24 - to pull in your external data and set it
05:26 - to state
05:27 - which also is something that happens
05:29 - client-side that is in your browser so
05:31 - that's all happening in the browser
05:33 - next does it slightly different
05:36 - and i think for uh good reasons but it's
05:38 - usually better to have all that content
05:40 - ready for your next visitor right they
05:42 - don't have to wait
05:44 - what next less you do is return a
05:46 - special function
05:47 - and from the page template file this
05:50 - handles the data fetching this means we
05:52 - can do a lot of the heavy data lifting
05:54 - when we deploy our site to a hosting
05:56 - provider
05:57 - so we save our visitors the time to wait
06:00 - for the code to fetch some external data
06:02 - before they can get the content
06:04 - that's a lot of waiting and we don't
06:06 - want that
06:07 - so by default next.js pre-renders every
06:10 - page meaning next.js generates html and
06:13 - the data files for each page in advance
06:16 - instead of having it done client-side
06:18 - javascript
06:19 - so there's two forms of pre-rendering
06:22 - that i want to talk about
06:23 - static generation and server-side
06:25 - rendering so static generation is
06:27 - pre-run is the pre-rendering method that
06:30 - generates the html at build time
06:32 - server-side rendering is the
06:34 - pre-rendering method that generates the
06:35 - html on each request
06:38 - so
06:39 - before it's served to the visitor's
06:40 - browser it's handled on the request and
06:42 - then
06:43 - serves it
06:44 - this is similar to what happens in
06:46 - systems like wordpress just think with
06:48 - javascript instead of php
06:51 - so
06:52 - we have our client set up and it's ready
06:54 - to go
06:55 - let's
06:56 - we're in the html file let's start
06:58 - pulling in some data we don't have any
07:00 - data to pull in from sanity but i just
07:02 - want to show you all what it looks like
07:04 - so next allows you to pull in data in
07:06 - different ways it does this by running
07:08 - the special functions that we export
07:10 - from the page template file these
07:12 - functions will be run when we build the
07:14 - site but sometimes also if we have
07:16 - instructed next js to fetch fresh data
07:19 - depending on the circumstance but
07:22 - yeah so the first function we want to
07:23 - build out is get static props and we're
07:26 - going to come all the way to the very
07:27 - bottom of this page
07:29 - and we're going to export function get
07:32 - static props
07:34 - open that up and then in here we're
07:36 - going to do a return
07:39 - all right so as implied by the name this
07:42 - runs when you build and deploy your next
07:44 - site so it's getting the static props
07:48 - what this function does is that it can
07:49 - receive different parameters and return
07:51 - what becomes our page's properties props
07:56 - see what they did there the data you're
07:58 - returning will actually be saved to a
08:00 - static json file which means you have to
08:02 - return something that can be turned into
08:04 - json
08:06 - so next wants this object to have a key
08:08 - called props so we're going to do props
08:12 - and then you assign the data to
08:15 - and we're going to do recipes because
08:17 - we're going to be building out a recipes
08:19 - app
08:20 - and we'll do title
08:24 - pineapple smoothie
08:27 - so we're going to save that
08:29 - all right so
08:30 - now we have built out the get static
08:32 - props ours when we start building out
08:34 - the the application will look a little
08:36 - different but
08:38 - same idea
08:39 - we have the props passing through the
08:41 - data and the data is recipes and we've
08:44 - given it title pineapple smoothie
08:47 - so we're going to come up here to the
08:48 - top of this file
08:51 - and here we need to pass in our data so
08:53 - now it can be used
08:56 - we're going to do const recipes is equal
08:59 - to data dot recipes
09:03 - and then that's all we need here but
09:05 - let's use it within our template let's
09:07 - actually change out
09:09 - this
09:10 - to b
09:12 - recipes and we want to get the first
09:15 - instance of it
09:17 - dot
09:18 - title
09:20 - awesome so
09:22 - let's see what that looks like so we
09:23 - should now have a clickable
09:25 - link that takes us to the about page
09:27 - that's titled pineapple smoothie
09:30 - and we do
09:32 - awesome so pineapple smoothie is
09:35 - being pulled through
09:37 - the get static props
09:39 - and
09:40 - we click on it and it's doing what what
09:42 - we told it to do with the link but
09:44 - yeah that is what getstatic props will
09:47 - look like and we will be using that
09:48 - throughout this course so
09:50 - yeah so let's get started on setting up
09:53 - our sanity getting all our data set up
09:56 - so we can actually pull in
09:58 - our content
09:59 - all right so let's set up sanity
10:03 - sanity
10:05 - let's go to that website let's check it
10:07 - out
10:09 - and all right so sanity
10:12 - it will replace our need for
10:14 - markdown files or even a cms because
10:17 - it's a unified content platform meaning
10:19 - that it comes with a lot of apis tools
10:22 - capabilities that lets you work and
10:23 - build more freely with your content it
10:25 - also specializes on what we call
10:27 - structured content which means that your
10:30 - content is more readily available to be
10:32 - presented wherever you need it so today
10:34 - we're going to be building a web app but
10:35 - maybe you want to build a native app for
10:37 - your recipes too
10:39 - it can be used across both of those so
10:41 - what's neat with structured content is
10:42 - that you aren't locked to a platform or
10:44 - technology you can use the exact same
10:46 - content in all these places so we're
10:48 - going to build out
10:50 - one instance of our content and we can
10:52 - use it across
10:53 - many different platforms and
10:55 - technologies
10:56 - so in the long run this will save us
10:57 - time if we need to change it because we
10:59 - change it in one spot not in many
11:02 - so more specifically sanity.io gives you
11:05 - a real-time data store where you put
11:07 - your content as json documents
11:10 - more specifically sanity.io gives you a
11:13 - real-time data store where you put your
11:15 - content as json documents and you can
11:17 - query it with a general purpose query
11:19 - language like grok
11:21 - which we will look at in a bit because
11:22 - we will be using grock today or you can
11:25 - use graphql so because sanity lets you
11:28 - treat content as data
11:30 - they call it
11:31 - the content link
11:32 - the content link is where you can pour
11:35 - pour
11:36 - all of your content and interact with it
11:38 - in any way you need to so sanity also
11:41 - lets you update and patch these
11:42 - documents and access them through an
11:44 - open source editing environment called
11:46 - the sanity studio which we will also be
11:49 - using it really lets you treat your
11:50 - content as data which unlocks a lot of
11:53 - possibilities and cool uses so if you
11:55 - know react like you have to when
11:57 - building next.js you can also customize
11:59 - the studio in all sorts of ways because
12:01 - it's build and react
12:03 - um you can make the content any editing
12:05 - experience make sense for you you make
12:08 - it
12:08 - what you need you customize it however
12:11 - you can also upload images and files to
12:13 - sanity and have them hosted on the
12:14 - global cdn for the images you can
12:17 - request custom sizes or formats from the
12:20 - one
12:21 - yes the one you it upload one and use it
12:24 - across many different sizes
12:26 - so you can query on the metadata on the
12:29 - dimensions or even the color palette of
12:31 - the image so you can use the color
12:33 - palette to see what would be like a good
12:35 - foreground color for accessibility which
12:37 - is really awesome
12:39 - so sanity's apis are hosted so you don't
12:41 - have to worry about uptime and
12:43 - availability and it's free to use for
12:45 - projects that don't have a lot of
12:47 - traffic or a lot of advanced needs
12:49 - so it'll be perfect for our application
12:51 - today
12:52 - you can create as many free projects as
12:54 - you want on sanity.io and pay as you go
12:57 - if you have overages or your business is
13:00 - growing that's great
13:01 - and you need more than the quota
13:03 - includes so
13:05 - let's set up our first sanity project
13:08 - together
13:09 - all right so there's many places we can
13:11 - go
13:12 - seated
13:14 - you can click on getting started or
13:17 - another spot
13:18 - sanity.ios starters
13:22 - so here you can find
13:25 - community and official starters that
13:27 - have been created
13:29 - awesome stuff angular
13:32 - next i see next 11t gatsby
13:36 - so there's plenty of starters that you
13:38 - can pick from here but because we are
13:40 - starting from scratch we don't need any
13:42 - of these starters
13:45 - we are going to click on get started
13:47 - this little button and here we have the
13:49 - official starters
13:51 - again those were in that list that we
13:52 - just looked at but i want to pay
13:54 - attention to this line right here let me
13:57 - zoom in
13:58 - so npm install
13:59 - globally the sanity cli because we need
14:02 - that and sanity init so sanity init
14:05 - is going to initialize a project for us
14:07 - so i'm going to copy that
14:10 - and i'm going to go back to my project
14:12 - let's add
14:16 - pull this up
14:17 - let's add a terminal because we
14:21 - need that
14:22 - and here i'm going to just paste in that
14:26 - command that we just copied and hit
14:28 - enter so it's going to install the
14:29 - sanity cli and it's going to ask us to
14:32 - log in
14:33 - so whatever you choose here google
14:35 - github email password combination
14:37 - remember it because it's going to ask us
14:39 - to ask us again and we need to choose
14:41 - the same one so i'm going to do github
14:44 - it's going to
14:46 - authorize me
14:47 - login is successful let's go back and
14:50 - right away
14:51 - we have create new project so the sanity
14:53 - init part of that command was just
14:55 - initialized so i'm going to hit enter
14:57 - because yes we want to create a new
14:58 - project let's name it studio
15:03 - and
15:05 - default data set yes we want that so y
15:07 - and then hit enter
15:09 - and then that is the correct path just
15:11 - double check
15:12 - and then here we can choose a
15:15 - schema that has sample data or
15:18 - just a schema but we want clean project
15:21 - with no predefined schemas because we
15:23 - are going to build out our schemas so
15:25 - it's going to be building that out for
15:27 - us
15:28 - all right so it's done
15:30 - so sanity init it initialized our new
15:33 - project for us it brought in a project
15:35 - id and the data set for all of our
15:37 - documents and it created a brand new
15:41 - folder for us called studio that was the
15:43 - name that we gave it so if we gave it a
15:45 - different name like
15:46 - my studio it would say my studio right
15:48 - here
15:49 - um so yeah it's gonna set up the studio
15:51 - and
15:52 - we are now able to customize and
15:54 - configure it locally so the first thing
15:56 - i want to do is i want to get our studio
15:58 - up and running
15:59 - so i'm going to cd into studio
16:02 - and then i'm going to run the command
16:04 - sanity
16:05 - start
16:06 - sanity start is going to run our
16:09 - studio locally at localhost 3333 let's
16:13 - run that
16:18 - and it might still be building it
16:26 - awesome
16:27 - so like i said
16:29 - whatever you picked before make sure you
16:31 - pick here so i did github so i'm going
16:33 - to click github
16:35 - otherwise it would have like an
16:36 - authentication error that an authorized
16:38 - yada yada all right so
16:41 - here's the name
16:42 - this is to create new document
16:44 - here is our desk and our vision
16:47 - i'm zoomed in a bunch but if i zoomed
16:49 - out those would pop up but because i'm
16:51 - zoomed in
16:53 - it creates
16:54 - that
16:55 - um my avatar would be over here as well
16:58 - there it is
17:00 - and yeah
17:01 - there's no schema so let's go create
17:03 - them so again we're not mapping this
17:06 - content to pages per se but structuring
17:09 - it after what it is and means so sanity
17:12 - lets us combine the content in any way
17:14 - that we want which means we can let next
17:17 - js take care of the web page building
17:19 - which is perfect because next.js is
17:21 - really good at doing that so we will get
17:24 - the content ready and let next.js do
17:27 - its magic
17:28 - so the way we want to structure our
17:29 - content in the studio is by making
17:31 - relatively simple javascript
17:33 - objects that describe the document types
17:36 - and the fields that we want to have
17:37 - available
17:38 - so
17:39 - there are plenty of fields that we can
17:41 - choose from but let me pull this down
17:43 - let me go back to the code so in studio
17:46 - this is our new
17:48 - folder
17:49 - in here we have
17:51 - config node modules plugin schemas all
17:54 - this great stuff
17:56 - now
17:57 - i wanted to point out sanity sanity.json
18:00 - and here we have our project id this
18:03 - project id is very important for us
18:05 - connecting our next app to our sanity
18:09 - app so
18:10 - we'll find that here and
18:13 - in a little bit we're going to be
18:14 - needing this so it's important to know
18:16 - where that is and we also need to know
18:18 - where this is but we chose that when we
18:20 - did the sanity init
18:22 - now in here we have schemas
18:25 - schema.js is where all of our schemas
18:27 - that we create will be
18:29 - imported into and used so we will visit
18:32 - this
18:33 - this file a good amount as well
18:36 - and then plugins we won't be using node
18:39 - modules make sure that this is get
18:41 - ignored
18:42 - and it is
18:43 - not
18:44 - so let's go to git ignore and all you
18:47 - need to do is remove that forward slash
18:51 - hit save
18:52 - come back here
18:54 - refresh that and now it's 19 because we
18:56 - don't want 5000.
18:58 - so that's what we need to do there
19:01 - okay so the schemas that we want to
19:02 - build out for this app there's three of
19:04 - them we want to do
19:06 - chef
19:07 - ingredient and recipe
19:09 - so chef and ingredient
19:11 - recipe will be referencing those
19:13 - individually so
19:15 - referencing is going to be happening a
19:17 - bunch in our schemas and referencing is
19:20 - fun because you don't have to rewrite
19:22 - content you don't have to rewrite
19:23 - anything you just reference it once and
19:25 - then the schema that you built out it
19:27 - takes all that data and it can use all
19:29 - of it
19:30 - so let's build out our first schema
19:32 - let's do a new file
19:34 - and we'll do chef.js
19:37 - okay so with
19:38 - schemas we're going to export default
19:41 - open that up and we'll do name
19:44 - chef
19:46 - title
19:47 - chef
19:49 - and
19:50 - type
19:51 - document so it's always going to have a
19:53 - name title type
19:55 - name is like the name of it title is the
19:59 - studio facing name of it and then type
20:02 - as document sanity has many different
20:05 - schema types this one is document
20:08 - let's go to
20:10 - schema
20:12 - types
20:14 - so here
20:16 - it's a little too big
20:18 - schema types here's a list of all the
20:20 - schema types
20:21 - so document was the one that we just
20:23 - used
20:24 - document is everything in the studio
20:26 - starts with a document so the document
20:28 - is created and then all the other types
20:30 - live inside the document type so
20:34 - the three schemas that i mentioned
20:36 - earlier are all going to be document
20:38 - types
20:39 - and then if you scroll down each one
20:41 - will have examples like type document
20:44 - and then the output of it
20:48 - some others that we're going to be using
20:49 - array
20:50 - block
20:52 - image
20:53 - string
20:54 - text so
20:56 - if you want to continue and you want to
20:58 - use other ones that we're not using
20:59 - today click into it and you'll find
21:03 - a little image of it what it's going to
21:04 - look like in the studio but then also
21:07 - the properties options and then code
21:10 - examples of it so definitely check that
21:12 - out if you want to add more to your
21:14 - studio one that i really want to point
21:15 - out is reference so reference because we
21:18 - are referencing
21:19 - our
21:20 - types our document types from recipe
21:23 - we're going to be referencing chef from
21:25 - recipe we're going to be referencing
21:26 - ingredient
21:28 - so relations between documents are
21:30 - modeled using the reference type so the
21:33 - model is a one-to-many relationship
21:34 - because it's
21:35 - one thing getting all the
21:38 - all the content in the one document type
21:41 - and
21:42 - there's different properties we can have
21:44 - on it weak hidden read-only
21:47 - but i want to show you down here what
21:49 - it's going to look like
21:50 - so we're going to have a type of
21:52 - reference and it's going to reference
21:53 - directly to
21:55 - so if we had recipe recipe would
21:57 - reference to
21:59 - ingredient so that's what it would look
22:01 - like then the output would be
22:03 - this
22:05 - there's many different ways to do it you
22:06 - can do multiple
22:08 - and then i wanted to show the grok
22:11 - way to grab it
22:13 - right here so when we write our grot
22:15 - query and we are using a reference
22:17 - this would de-reference it and pull out
22:21 - everything from that person so
22:23 - there are different ways we can do it we
22:25 - will be doing all of that in this so
22:28 - stay tuned
22:30 - all right so i'm going to get out of
22:31 - this
22:33 - let's go back here
22:35 - let's come out of
22:37 - that and so now we're going to have to
22:38 - do a fields
22:40 - array
22:41 - with all of our different
22:44 - types and i need to comment after this
22:47 - all right so i'm going to do name name
22:50 - title type name is going to be
22:52 - name
22:54 - title
22:55 - is
22:56 - chef's
22:57 - name
22:58 - and type is going to be string
23:02 - save that
23:03 - and
23:04 - come out of that
23:05 - we'll do
23:08 - name
23:09 - is image
23:12 - title
23:13 - image
23:15 - type is image
23:18 - and then we're going to do an options on
23:20 - this that is
23:22 - hot spot is true i will show you what
23:25 - hot spot is in one moment
23:27 - but
23:28 - it's very nice to have hot spot true on
23:30 - there so be sure to put that in
23:32 - now i'm going to come out of that and
23:34 - we're going to do another one
23:36 - we'll do name is bio
23:39 - title is
23:42 - bio
23:44 - and type is
23:46 - array
23:47 - so already we have three different four
23:49 - different
23:50 - schema types in this uh
23:53 - in this chef.js
23:55 - so open up that type and we're gonna do
23:57 - dove
23:59 - open that up and we'll do title
24:02 - is block
24:05 - we'll do type is block
24:09 - styles will have
24:14 - title is normal
24:19 - and the value is
24:21 - normal
24:24 - and then lists
24:26 - is an empty array so list will be a drop
24:28 - down of predefined values so we're gonna
24:31 - put that there
24:33 - all right so now that is all written out
24:36 - let's explain what's happening there's a
24:38 - lot going on right now
24:40 - so i'm gonna save this
24:42 - so document type
24:44 - everything starts with a document type
24:46 - insanity within that we have our fields
24:48 - array
24:49 - this is going to be
24:52 - an input where you can put in a string
24:54 - chef's name
24:56 - this is going to be an
24:58 - image now this
25:01 - this array with type block
25:04 - is type block
25:06 - is our portable text so this is creating
25:09 - for us a portable text editor so for the
25:12 - bio field we do want to have rich text
25:14 - that is text you can add things like
25:17 - emphasis lists headings and so on but we
25:20 - don't want people to go full overboard
25:22 - with text markup in the bio field it
25:23 - should be simple and neat
25:25 - so as i mentioned earlier sanity is all
25:27 - about treating content as data that goes
25:30 - for rich text as well
25:32 - so we will not store our rich text as
25:35 - markdown or html but it's a format
25:37 - called portable text this will actually
25:39 - make it simpler for us to use inside of
25:41 - our react templates too because we were
25:43 - able to render it directly to react
25:45 - components and we don't need to inject
25:47 - or parse html so without going too far
25:50 - into it portable text will store your
25:52 - rich text as json and if it's stored in
25:55 - json that means you can query it with
25:57 - grok and that's really cool so for
25:59 - example you can query all of your
26:01 - documents that has more than three
26:03 - emphasized spans if that's something
26:05 - you're interested in you can query for
26:06 - that or if you have added a custom
26:08 - recipe block as part of your blog
26:10 - content you can query for specific blog
26:13 - posts containing such and such reference
26:15 - to a certain recipe too so it makes
26:18 - everything even more queriable
26:21 - so to add a portable text editor in the
26:23 - studio you add an array like we did here
26:26 - and put a block field inside of it
26:29 - so with this what the studio sees is a
26:32 - block type inside of an array
26:35 - it will turn the array
26:36 - field or a field
26:39 - into a rich text editor so now this is
26:41 - our rich text editor and furthermore you
26:44 - can also customize the editor so if we
26:46 - want to simplify the out of the box
26:47 - editor we can add a bit of configuration
26:49 - to remove some of the options like what
26:51 - we've done here
26:52 - now
26:54 - let's see what this all looks like in
26:55 - the studio and then i want to show you
26:57 - what this really looks like in the
26:59 - studio
27:00 - so that's all saved something i need to
27:02 - do is i need to go to schema.js
27:05 - and i need to import
27:08 - chef from
27:10 - chef
27:11 - and then use it
27:13 - down here save that
27:15 - and if we go here it should have chef
27:18 - so we click on chef no document of this
27:21 - type found
27:22 - because we haven't added anything and
27:24 - here we have
27:26 - our and i'm going to collapse these by
27:28 - clicking on them
27:29 - here we have our entire schema for chef
27:33 - now we have chef's name
27:34 - it's just a string so i'm just going to
27:35 - write my name in let's bring in an image
27:40 - it is an image of me and
27:43 - my bunny bonnie
27:45 - and then
27:46 - bio here we're going to do
27:52 - is from
27:53 - is is a chef
27:55 - from las vegas nevada
28:00 - all right so then we're going to publish
28:01 - that
28:02 - and i want to show you what
28:05 - edit details does so this is the hot
28:07 - spot is true thing that we did so if we
28:10 - click on this this hotspot and crop
28:11 - comes up i'm going to just go a little
28:13 - bit
28:14 - so here is the crop
28:16 - and here is the
28:19 - here is the hotspot
28:20 - so
28:22 - because i'm the chef i want to make sure
28:24 - people know i'm the chef and not bonnie
28:27 - so i'm gonna put emphasis on me to make
28:30 - sure that
28:32 - everyone knows it's me
28:35 - just like that
28:38 - and that can be really zoomed in on me
28:40 - that's okay though
28:41 - let's make another chef
28:45 - and we'll do bonnie
28:47 - and this time we really want to
28:49 - emphasize
28:52 - bonnie
28:53 - so we're going to really cut me out
28:57 - and we're going to really emphasize
29:00 - bonnie the bunny
29:02 - so
29:03 - using one photo i'm able to
29:06 - across different aspect ratios use that
29:09 - same photo but always make sure that
29:11 - whatever my hot spot is on is always
29:13 - going to be in view so if i
29:17 - i mean if i changed
29:19 - this and i put on my face see how it
29:22 - changes
29:24 - so
29:25 - yeah
29:26 - it makes it really great for
29:29 - not having to upload many images for
29:31 - many different aspect ratios um but yeah
29:34 - that is hotspot and crop
29:37 - there's bonnie
29:38 - and then we'll say bonnie
29:40 - is a chef
29:42 - who loves to use
29:44 - carrots
29:47 - and then we're gonna do carrot
29:49 - emoji and i'm pulling this emoji thing
29:51 - up by hitting command control spacebar
29:53 - on mac
29:55 - hit publish and now we have two chefs
29:58 - bonnie and kapeh so
30:00 - uh yeah now i want to show you what it
30:02 - would look like if i got rid of
30:05 - this
30:06 - rich text editor so i wanted to talk
30:08 - just a little bit more on this array
30:09 - type so because i put block in here
30:13 - it is an array of blocks like with the
30:17 - rich text editor if i got rid of it this
30:18 - is what would happen so i'll do a type
30:20 - of
30:22 - um title is
30:27 - bio
30:28 - um name
30:30 - bio i should have capitalized that title
30:32 - and then type will do
30:33 - string
30:35 - so if i save that and i go back to the
30:37 - studio we had that block one okay
30:40 - so because it was blocked that we put in
30:42 - before it's kind of erroring out because
30:45 - it used to be block but if i wanted to
30:46 - add an item now it's just an array of a
30:49 - string so hi
30:51 - um
30:52 - add another item
30:54 - this is a
30:55 - string in my array so that's what it
30:58 - would look like but because we did block
31:01 - remove that
31:03 - changes back to block get rid of this
31:06 - string
31:11 - and now we should have our rich text
31:13 - editor pop back up and it's happy
31:15 - because it's now back to block
31:17 - but that is what's happening so it's an
31:19 - array and you can do an array of
31:22 - lots of different schema types but when
31:23 - you do block and then it creates this
31:25 - rich text editor where we can type in
31:27 - all of our content so here you can have
31:29 - your bio super long and you can just
31:31 - keep writing about all the chef awards
31:32 - that you've gotten over the past years
31:34 - so
31:36 - but yeah with that being said you add a
31:38 - block to the array and we have our rich
31:40 - text editor
31:42 - publish that
31:43 - i think this one
31:45 - yeah publish that
31:48 - all right so now that we have chef all
31:50 - set up and me and bonnie are chefs
31:53 - let's go and let's
31:55 - create our next schema so the next one
31:57 - we're going to create is ingredient so
31:59 - i'm gonna go to schemas
32:01 - new file
32:03 - ingredient.js
32:05 - and same thing export default open that
32:08 - up
32:09 - name
32:11 - ingredient
32:12 - name title
32:16 - ingredient
32:18 - and type is
32:20 - you guessed right document type we're
32:22 - going to do a fields
32:23 - array
32:25 - and open that up and our first one is
32:27 - going to be title or
32:30 - name
32:31 - is name
32:34 - title is
32:37 - ingredient name
32:42 - and type is
32:44 - string
32:46 - come out of that
32:47 - let's do another one
32:49 - we'll do name is
32:51 - image
32:53 - title
32:55 - is image
32:57 - and type is
32:59 - image and we're going to do again the
33:01 - option
33:03 - for
33:05 - hotspot is true
33:08 - great and then come out of that
33:11 - and one more
33:13 - we'll do
33:14 - name is notes
33:16 - title
33:18 - is
33:19 - notes and type is text
33:22 - save that and we need to come to our
33:25 - schema
33:27 - and bring in
33:28 - import ingredient from
33:32 - ingredient
33:34 - and then we have to use it
33:36 - down here
33:37 - save that
33:38 - let's come back an ingredient should pop
33:40 - up all right let's make some ingredients
33:44 - so let's add a new one for our first one
33:47 - let's do pineapple
33:50 - we will upload a picture
33:55 - of
33:57 - pineapple and i don't want a hot spot or
33:59 - crop this i'm just going to keep it how
34:00 - it is but if i had a big picture and i
34:02 - wanted to crop it down to this that's
34:04 - what i would do notes
34:07 - now i wanted to put notes in here
34:08 - because
34:09 - this
34:10 - doesn't need all this content does not
34:12 - need to go on the front end and this is
34:14 - not going to go on the front end this is
34:15 - just notes for us as owners of the
34:18 - studio to always remember and when you
34:21 - cook sometimes it's great to have notes
34:23 - on ingredients where you get them what
34:25 - you like what you don't like if you like
34:27 - a certain brand that kind of stuff so
34:29 - this is just internal notes for us so
34:31 - i'm going to write
34:32 - um
34:34 - i like to get my
34:37 - pineapples
34:39 - at the local
34:41 - i can type local farmers market
34:45 - it happens
34:46 - every
34:48 - second
34:50 - saturday of the month
34:52 - so notes for me um so when i come into
34:55 - my studio
34:56 - it's kind of like a little diary of my
34:58 - of my recipes
35:00 - so we're going to publish that and let's
35:02 - let's make another ingredient
35:05 - when we will do mango
35:07 - we will drop in
35:11 - a pitcher of yummy
35:15 - mangoes and then we'll do notes
35:18 - um
35:20 - a notes about mangoes uh
35:22 - the seeds are really
35:25 - hard to get out
35:26 - and if you've ever tried to get out the
35:28 - seed of a mango
35:30 - i mean it's really hard so
35:33 - that is the truth
35:35 - all right so we have mango and we have
35:36 - pineapple so our last schema that we
35:38 - need to do is
35:40 - recipe
35:41 - and let's
35:43 - create new file recipe.js and this one
35:46 - remember is going to be referencing the
35:48 - other two that we just made so export
35:50 - default
35:51 - open that up
35:53 - and we'll do name
35:54 - recipe
35:56 - oops name recipe title
36:01 - recipe
36:02 - and
36:03 - type is
36:05 - document
36:08 - open up our fields array
36:13 - open that up
36:15 - and forgot a comma
36:16 - and there we go
36:18 - all right so the first
36:19 - fields object that we want is
36:23 - name so we're going to name
36:26 - title
36:28 - is recipe name
36:30 - and
36:32 - type is
36:34 - string
36:36 - then we're going to do a slug we're
36:39 - going to need slugs later on especially
36:42 - for our front end name is
36:44 - slug
36:46 - title
36:47 - slug
36:49 - type there's a type slug
36:52 - and then under that we're going to do
36:54 - options
36:57 - so the source is going to be
37:00 - the name
37:03 - whoops
37:04 - and then the max
37:05 - length
37:07 - is 96
37:09 - so if you're
37:11 - if your slug is longer than 96
37:14 - and then we're referencing this name
37:16 - cool
37:17 - let's come out of that
37:19 - and let's make another one
37:21 - and we'll do
37:24 - name
37:25 - chef
37:27 - we've seen this before somewhere do we
37:29 - want to reference it i think so
37:31 - title
37:33 - chef
37:35 - type ooh type is
37:38 - reference like we saw in the docs
37:40 - and we're going to reference to
37:43 - so we don't have to type out a whole
37:45 - nother schema we're just going to reuse
37:47 - type is
37:49 - chef so it's going to
37:52 - go right to chef
37:54 - and then next we're going to do name is
37:58 - main
37:59 - image
38:01 - and we'll do title
38:03 - is recipe
38:05 - main image
38:07 - type
38:08 - image
38:09 - and then we'll do options
38:11 - of course for hot spot
38:14 - is true
38:16 - and then we'll come out of that
38:18 - and
38:20 - all right so we're gonna do another
38:22 - array but this array is not going to be
38:26 - block so we're gonna open that up we're
38:28 - gonna do name is ingredient
38:32 - we'll do title
38:34 - ingredient
38:36 - i always want to do a colon after the
38:39 - that
38:40 - okay and then type is
38:42 - array and then type
38:44 - is array
38:47 - awesome okay and then we're going to do
38:49 - of
38:51 - open that up
38:53 - type is going to be object
38:56 - and
38:57 - fields
38:58 - open that up again
39:00 - here
39:02 - okay so what this is going to be is a
39:04 - modal we're going to click on like
39:06 - add to like add something and
39:09 - it's going to open up and it's going to
39:10 - be referencing something the ingredient
39:13 - it's going to be giving us option for a
39:14 - number an option for
39:17 - a string which we're going to create a
39:19 - list
39:20 - of an array of strings so there's going
39:23 - to be a lot going on in this little
39:25 - modal but
39:26 - i will walk through all of it with you
39:28 - so name
39:30 - ingredient
39:33 - title
39:36 - ingredient
39:37 - and type is
39:39 - a reference because we don't want to
39:41 - write it all again
39:42 - we're just going to reference straight
39:43 - to
39:46 - and you guessed it type
39:48 - ingredient
39:51 - awesome
39:53 - so let's come out of that the next part
39:55 - of the model so we're going to have an
39:56 - ingredient
39:57 - first item in the
40:00 - modal
40:01 - next is going to be
40:03 - whole number
40:08 - title
40:10 - whole number
40:13 - and type is going to be
40:16 - a number
40:18 - so if you can kind of guess what we're
40:20 - doing is an ingredient is put into a
40:22 - recipe and you can choose how much of
40:24 - something so whole number we're going to
40:26 - do next fraction and then unit
40:29 - so come out of this
40:31 - so the next one is
40:34 - name
40:36 - fraction title
40:39 - fraction
40:41 - type we will do a string
40:44 - string for this
40:46 - string
40:48 - and then we're going to do options
40:49 - because we want to create a list
40:52 - for these strings
40:54 - or a list
40:55 - drop down
40:57 - options list is going to be an array of
41:01 - strings
41:02 - half cup or
41:04 - half fraction
41:06 - one-third
41:08 - one-fourth
41:12 - three-fourths and you can put as many
41:14 - as you want
41:16 - i'm just gonna stop right here
41:18 - so that is my drop down so i've
41:20 - i've assigned what my strings are
41:23 - so
41:24 - it's like hard-coded um these are the
41:26 - only fractions that you can choose on
41:27 - the front end or the studio front end
41:30 - and yeah
41:31 - let's come out of that and let's create
41:33 - one more
41:35 - kind of just like that so name
41:38 - is unit
41:40 - title
41:42 - is unit
41:44 - type
41:45 - is string
41:48 - options
41:49 - same thing
41:50 - and we're going to do list
41:53 - an array of
41:56 - grams
41:57 - cup
41:59 - capital t for tablespoon and lowercase
42:03 - t for teaspoon
42:07 - i'm gonna save that let's go look at it
42:12 - i missed something oh
42:14 - ow we did not add it to schema so schema
42:17 - come in here
42:19 - you need to import
42:21 - recipe from
42:22 - recipe
42:24 - and use it down here
42:28 - awesome
42:29 - all right let's go look at it so
42:32 - recipe so if we click on this
42:34 - no documents here have been created
42:37 - we'll click on that and now we have i'm
42:39 - gonna collapse these just so we can see
42:40 - all this
42:41 - our schema that we've created so recipe
42:44 - name
42:46 - uh
42:47 - pineapple smoothie
42:50 - generate the slug from that name
42:53 - chef we can type to search or
42:56 - we can choose one of them here
42:58 - um we'll give bonnie credit for this
43:01 - and then i have an image
43:04 - over here
43:07 - of a
43:09 - pineapple smoothie yeah and we can edit
43:13 - the details if we want to really make
43:14 - sure this pineapple is uh the hot spot
43:17 - we'll do that now ingredient add items
43:19 - we're going to click on this
43:21 - and it's going to bring up a modal for
43:22 - us this is the reference this is the
43:25 - number
43:26 - these are the two lists that we made so
43:28 - ingredient we can do drop down or we can
43:30 - just start typing we need pineapple
43:33 - we need two
43:35 - and a half
43:38 - cups of pineapple
43:40 - okay
43:41 - so we're going to exit out of that
43:43 - and
43:44 - look at this
43:45 - so notice how it says half
43:47 - we want this preview to look a little
43:50 - better we don't want to say half we want
43:52 - to have maybe a picture of the
43:55 - ingredient
43:56 - uh a title and and like a subtitle with
43:58 - like how many of the ingredient we want
44:01 - so we want to change this now sanity has
44:04 - a way to do that and i will show you how
44:06 - so come back to the code
44:08 - back to ingredient no recipe
44:12 - and down here below
44:16 - the array
44:17 - we're going to write preview
44:19 - open that up and we are going to select
44:22 - certain items
44:23 - that we want to use so title
44:28 - ingredient dot name
44:30 - name
44:32 - ingredient dot name
44:37 - um media will be
44:40 - ingredient dot image so we'll be using
44:42 - the image
44:44 - and then we'll do whole number
44:47 - is
44:48 - whole
44:50 - number
44:54 - and then fraction
44:56 - is fraction
44:57 - and unit is unit
45:00 - so we're pulling those out to be able to
45:02 - select them and use them so here we are
45:05 - dotting into
45:07 - the targeted thing so we wanted
45:09 - ingredient but we want the name for the
45:11 - title
45:12 - same thing so we're just grabbing the
45:14 - content that we want to be able to use
45:18 - now underneath select
45:21 - we want to run a prepare
45:23 - let me show you exactly what is going to
45:25 - be happening here so prepare we're going
45:27 - to pull out the title
45:30 - subtitle media
45:34 - whole number
45:36 - we're going to equal that to
45:38 - something because what if we don't have
45:40 - a whole number what if we're only using
45:41 - like half of something
45:43 - so if there's no whole number we'll say
45:45 - no
45:46 - whole number set
45:50 - then we'll do fraction same thing we
45:52 - might not have a fraction set so we want
45:54 - to write
45:56 - no fraction set
45:59 - and then last one is unit
46:02 - and we'll do
46:05 - no unit set
46:07 - okay and then there's one last section
46:09 - and after this we'll go we'll talk about
46:11 - this way more so we're going to open
46:13 - this up
46:15 - to a return
46:17 - and this return is going to be using
46:19 - what we just set in that prepare
46:21 - so title
46:23 - subtitle which we want the subtitle to
46:26 - be
46:30 - whole
46:31 - number
46:33 - and then
46:35 - fraction
46:38 - and then
46:41 - unit
46:42 - and then underneath this we want
46:45 - media so
46:47 - when it comes to
46:49 - preview prepare and return we're
46:52 - generally going to be using title
46:54 - subtitle media and i'll show you because
46:56 - it looks very nice so i'm going to save
46:58 - that
47:01 - and here
47:03 - now it looks nice now there's an image
47:05 - the pineapple is the
47:08 - title and two and a half cup is the
47:11 - subtitle if we wanted to add
47:14 - um more pineapple but we didn't want to
47:16 - do a whole number we just needed half
47:19 - a
47:20 - cup
47:23 - no whole number set half cup
47:25 - so that's
47:27 - what it would look like
47:28 - um
47:29 - and then just so you know you can move
47:31 - these around if needed
47:34 - now let's look at
47:36 - sanity preview
47:40 - so here sanity will often need to render
47:43 - a representation of a document or an
47:45 - object so what we're doing is we're
47:48 - previewing we're showing
47:50 - a representation of something we've
47:52 - already created it's called a preview so
47:55 - we decide what fields should be used
47:57 - again like i said generally title
48:00 - subtitle and media
48:01 - take the cake so
48:05 - here we have
48:07 - a schema laid out and the preview they
48:10 - selected title and subtitle as title
48:14 - here
48:15 - and release date here
48:18 - so here let's look at the prepare so
48:20 - above title and release date are
48:22 - selected but the result of the selection
48:24 - is past the prepare
48:26 - where you can transform
48:28 - the selection however you like
48:30 - so in this case
48:34 - split they're modifying it to be only
48:36 - the year so the whole year comes out but
48:39 - we just want just the first part of that
48:42 - so that's where you can tweak it however
48:44 - you need what we did
48:46 - is we set it like this
48:49 - and then it knows if there's nothing
48:51 - there to grab it will return
48:54 - no
48:55 - unit set or whatever
48:57 - and yeah there's a lot that you can do
48:59 - with this preview and prepare um what
49:02 - we're doing
49:03 - is a good start
49:05 - and it makes the
49:08 - studio side of this look very good i
49:10 - think
49:11 - um so yeah let's add something let's get
49:14 - rid of this pineapple and let's add
49:16 - mango
49:18 - because it's a pineapple smoothie we
49:19 - don't need tons of mango so we'll do
49:22 - [Music]
49:24 - a fourth cup of mango
49:27 - okay now when you have a recipe yeah you
49:29 - can have ingredients and a picture and a
49:32 - title and a
49:33 - chef but you need instructions so we
49:36 - need to add one more thing
49:37 - so we're going to come back here
49:39 - and
49:41 - under
49:43 - this after the array after the object
49:45 - right here we're going to do one more
49:48 - and it's going to be
49:50 - name
49:51 - instructions
49:53 - title
49:56 - instructions and type
49:59 - will be
50:00 - array
50:03 - of
50:04 - and i'm making a rich text editor by
50:07 - doing type
50:09 - block
50:11 - i'm gonna save that
50:14 - and let's go look we should have a rich
50:15 - text editor and sure enough we do
50:18 - so
50:19 - this is us being able to like
50:22 - fold it italicize it underline
50:25 - but here i'm going to write
50:29 - put all
50:30 - ingredients into a blender
50:34 - blend on high for
50:37 - one minute
50:39 - serve
50:40 - chilled
50:42 - nice
50:43 - okay so now all of our content is in
50:45 - here and now we can take this content
50:47 - and put it on our front end but i want
50:49 - to show you something real quick so here
50:51 - we have
50:53 - a string we have a slug we have
50:55 - a reference we have an image
50:57 - we have
50:58 - an array of
51:00 - these objects and we have an array of
51:02 - blocks
51:03 - let me show you what it looks like so if
51:05 - you click on these three little dots and
51:08 - you click on inspect
51:10 - this is what our data looks like parsed
51:13 - raw json either way you want to look at
51:15 - it
51:16 - but
51:17 - our data is returned as
51:20 - json so this can be used all over
51:22 - so ingredient
51:24 - unit whole number
51:28 - all of our information is here
51:30 - our slug what our current slug is
51:35 - instructions is going to be block
51:37 - and because we have
51:38 - multiple blocks because
51:40 - i
51:41 - created multiple blocks we have
51:45 - the children that has the text in them
51:46 - so put all ingredients to a blender next
51:48 - blocks next block blend on high for one
51:50 - minute next block surf chilled now see
51:53 - how all these
51:55 - don't have any mark defs and they're all
51:57 - style is normal let me show you what it
51:59 - looks like if i change one
52:00 - sort of chilled we really want to make
52:02 - sure you serve this chilled some
52:04 - italicize that
52:06 - don't forget don't serve it hot
52:09 - we're going to come back to inspect
52:11 - come to the bottom
52:13 - and
52:15 - serve chilled now has
52:18 - the em marks so
52:20 - emphasis
52:22 - and that's what it would look like if i
52:23 - did bold
52:25 - let's do this bold because we want to
52:27 - make sure people really know blend out
52:30 - high for one minute
52:31 - same thing
52:33 - and now it has strong
52:37 - so the marks for this
52:38 - strong
52:39 - marks for this is
52:41 - the italics that emphasized
52:43 - so yeah that's what our content looks
52:45 - like
52:46 - and we have all of our information here
52:49 - here's the parsed version of it
52:52 - main image
52:54 - all the content
52:56 - lives here
52:58 - and
52:59 - yeah now
53:01 - now that we have all that set up let's
53:03 - start pulling it to the front end let's
53:04 - start setting up our next app and let's
53:07 - get rolling with building our
53:08 - application
53:10 - all right so we do need to connect our
53:12 - sanity app to our next app so first
53:15 - we'll make a sanity.js file and we'll
53:18 - put it into a folder that's called lib
53:20 - we don't have to call it lib but just
53:21 - because of convention we're going to
53:22 - call that so we're going to create
53:26 - new folder
53:27 - we'll do lib and within lib we'll do a
53:30 - new file
53:31 - and we'll do sanity.js
53:33 - all right so the first thing we need to
53:35 - do is we need to install the next sanity
53:37 - toolkit so this will come with hooks and
53:39 - functions that are useful
53:41 - when we build with sanity so let's
53:43 - actually look at the next
53:45 - sanity um
53:47 - github repo so we'll do next
53:49 - sanity
53:51 - right here
53:52 - okay here we will see
53:54 - what it comes with some of the features
53:56 - so client-side live real-time preview
53:58 - for authenticated users
54:00 - um url helper for sanity's image
54:03 - pipeline we'll use that
54:04 - um rich text component for portable text
54:08 - again using that um but here we'll see
54:10 - how to install it
54:12 - we'll get the real-time preview
54:14 - which we will be doing that as well um
54:17 - but yeah here we'll just get more
54:19 - information on what comes with the next
54:22 - sanity toolkit
54:24 - we will also be bringing in our
54:27 - project id and our data set into this
54:30 - file and i'll show you how to do all
54:32 - that
54:32 - we'll import the things that we need and
54:35 - export the things that we need to use
54:37 - throughout the app so
54:39 - you can find out all the information
54:41 - here but let's go back to our
54:44 - code okay so the very first thing we do
54:46 - need to do is install the toolkit let's
54:48 - actually go back to this let's look at
54:50 - the command we need to do
54:53 - up up up right here so npm installed
54:56 - next sanity this is what we're going to
54:58 - use you can also use the yarn version
55:01 - but yeah you have both options okay
55:03 - let's go to one terminal that's not
55:05 - running anything and we will paste in
55:08 - that npm install next sanity so we will
55:11 - let that install
55:16 - and all right so now the package has
55:18 - been installed and we can just keep that
55:22 - down we'll just go back to yeah all
55:24 - right so now let's import it and let's
55:26 - import all the things that we need from
55:28 - this next sanity so like we showed in
55:29 - the github repo if you want to learn
55:31 - more about like the performance of the
55:32 - ones that we're going to be using
55:34 - definitely check out this github repo
55:36 - that will have all that that information
55:38 - um
55:39 - but let's just talk briefly about the
55:41 - things that we are going to be using and
55:42 - then
55:43 - once we do use them then we'll talk more
55:45 - about them and see how they actually
55:46 - work so we're going to do import
55:49 - open that up
55:51 - and we're going to do create
55:52 - client
55:54 - we're going to import
55:55 - create preview
55:58 - subscription
56:00 - hook create
56:03 - whoops create
56:05 - whoops image url builder and then create
56:09 - portable text
56:11 - component
56:13 - all right and then this is all going to
56:15 - be from
56:17 - next sanity
56:19 - all right so let's export these so we'll
56:22 - come down and the first one we're going
56:23 - to export will be export const
56:26 - sanity client and then equal that to
56:29 - create
56:30 - client
56:31 - and then in here we need to use
56:35 - our project id so rather than writing
56:38 - out the project id and the data set
56:41 - every time we want to export one of
56:42 - these let's actually do const config is
56:46 - equal to
56:49 - project id and we'll equal that to
56:53 - something in a little bit we'll do data
56:55 - set
56:56 - leave that blank for now api version
56:59 - for blank blank for now and then use cdn
57:03 - and we'll set that to true so let's talk
57:05 - about all these let's get that
57:06 - information so that um we don't have to
57:09 - write it over and over down in the
57:10 - exports so project id and data set
57:14 - if we go into studio and we go into
57:17 - sanity.json
57:19 - we will find
57:20 - our project id and our data set so i'm
57:23 - just going to copy this project id and
57:26 - then remember production for data set
57:29 - so let's go back
57:32 - paste that in
57:33 - and data set
57:35 - production so with a project id you can
57:38 - consider this public so it goes into the
57:41 - url of the apis that you're hitting you
57:43 - can find it again like in the senate
57:45 - sanity.json that we saw and you can also
57:48 - find it in your manage dashboard which i
57:50 - will show you in just a minute and then
57:52 - with our data data set name we picked
57:55 - production when we did the sanity init
57:58 - and again find that in the sanity.json
58:01 - so let's move on to the api version so
58:04 - api version is going to be
58:06 - 2021
58:08 - 03-25
58:11 - so sanity's api is versioned so that
58:13 - sanity can push out new features and
58:15 - fixes without breaking anyone's stuff so
58:17 - we're going to put in this api version
58:20 - and let me show you where you can find
58:21 - out more information on that
58:23 - i'm gonna go here
58:26 - under api versioning in the docs so yeah
58:28 - and here we'll you'll learn everything
58:30 - about how to handle versioning with the
58:31 - sanity api uh if you want to learn more
58:33 - about that definitely check out this doc
58:36 - but we are going to put into our api
58:39 - version
58:40 - 2021 325
58:42 - and lastly with our ucdn we're actually
58:44 - going to change this to false i put true
58:47 - just for the time being but we're going
58:48 - to have that be false so you can choose
58:50 - if you want to pull from the cdn that is
58:52 - the global cache network um or directly
58:56 - from the real-time content link we
58:58 - recommend using the cdn in a production
59:00 - environment but on local it can make
59:02 - sense for this to be set to false so you
59:04 - don't need to wait for those minutes for
59:06 - the latest changes so for now we're
59:07 - going to set it to false if you want to
59:09 - change it to true definitely go ahead
59:11 - and do that and now we can finally pull
59:13 - in our config here and it will be using
59:16 - all of that for us now let's work on the
59:18 - remaining of our
59:20 - exports so next we're going to export
59:22 - const we'll do use
59:25 - preview subscription
59:27 - equal that too we'll do the create
59:31 - preview subscription
59:33 - hook
59:35 - and
59:36 - we'll use the config
59:38 - the next one will be export const url 4
59:43 - now in the url 4 we are going to be
59:46 - setting a source so the source let me
59:48 - put it in
59:53 - the source we'll be using create image
59:57 - let me just type this all out builder
60:01 - using the config and then chaining on
60:03 - image
60:05 - source
60:07 - all right
60:07 - so source in the url for is the asset
60:11 - data that we're clearing from the
60:12 - content link so this is the image
60:15 - asset data the asset data that we are
60:17 - querying for we need to make sure we
60:19 - pull that in so that is why we use
60:21 - source right there and then our last one
60:23 - is
60:24 - export whoops
60:26 - export const
60:29 - portable text and set that equal to
60:32 - create
60:33 - portable text
60:35 - no
60:35 - yeah portable text component
60:39 - and then open that up
60:40 - and we're going to do dot dot config to
60:43 - copy that and then serializers
60:47 - and then an empty
60:48 - object now we will be using all of these
60:52 - throughout this course so we just wanted
60:54 - to get it set up so that as we start
60:56 - using them across files it's already
60:58 - been exported and yeah so the last thing
61:01 - we need to do before we can start
61:03 - building out our next app is
61:05 - setting up course so
61:07 - coors controls from which domains a
61:09 - browser can do requests to your content
61:12 - like so enabling authentication will
61:14 - allow requests that uses your token
61:16 - information from your logged-in cookie
61:19 - so you really want to make sure you can
61:20 - only deploy code to the domain that you
61:23 - enabled this for
61:25 - so course isn't needed to do server-side
61:27 - requests it's only for browser so
61:29 - client-side because we typically don't
61:31 - use cookies on server side we use tokens
61:34 - which we will look at later we will be
61:36 - using a token now there are different
61:38 - ways we can set up cores um
61:41 - one of them to come down here we can go
61:44 - to a new terminal
61:46 - and we could do
61:48 - sanity cores add and we can do http and
61:51 - then type out whatever the url is but
61:55 - let me show you another way
61:58 - so we'll keep that down and if we go to
62:01 - our manage dashboard we will see
62:05 - how we can add cores and i'll also show
62:07 - you all the other things in the manage
62:08 - dashboard
62:11 - so if we come up here we go to manage
62:14 - sanity.io
62:19 - all right so here
62:21 - are all of our projects here's our
62:23 - dashboard now
62:25 - the last three studios i've named are
62:27 - all the same name i highly recommend not
62:29 - doing that and
62:31 - doing a unique name for each one because
62:33 - now which one do i pick no i do know
62:35 - which one it is it's my most recent one
62:37 - right here i click on it project id
62:40 - right here remember we found it
62:41 - insanity.json
62:42 - so here's our project id let's make sure
62:44 - it matches up h a j
62:47 - up here aj
62:49 - awesome
62:51 - now throughout here we see like the
62:53 - usage so
62:55 - we're on the free free version so
62:57 - everything's zero but uh if
63:00 - you added to this this is where you
63:02 - would see it you can invite project
63:03 - members members would also be under here
63:05 - but you can add people to this so they
63:07 - have like access to it data sets usage
63:11 - so what your usage looks like and then
63:13 - settings this is where we're trying to
63:14 - go
63:15 - so if we click on settings
63:17 - and here we'll just see general settings
63:19 - the name of it i could rename this um
63:22 - different things but here we're trying
63:24 - to find course origins so we're going to
63:27 - click on add course origins
63:29 - and we have
63:31 - our
63:32 - allowed one which is localhost 3333
63:36 - and here we would add in the url um i've
63:40 - already typed it in before so that's why
63:41 - you see that drop down but pretend like
63:44 - we haven't so localhost 3000. so we want
63:47 - localhost 3000 to be able to have
63:48 - credentials so course origin settings
63:51 - is saying
63:52 - what control from which
63:55 - domains browsers can do requests to
63:58 - the content link so we're letting sanity
64:01 - know that localhost 3000 can make
64:04 - requests to our content link
64:06 - and we will be using that
64:09 - in a moment but we want to set it up now
64:12 - so we didn't have to worry about it
64:13 - something we have to remember is when we
64:15 - deploy this we have to bring that url
64:18 - that
64:19 - is our deployed url and bring it in here
64:22 - and add it to the course origins now the
64:25 - last thing we need to do is click allow
64:27 - credentials and hit save and we have now
64:30 - localhost 3000 and localhouse
64:32 - localhost 3333.
64:35 - both of these are under course origins
64:37 - and both can make requests
64:39 - and
64:40 - yeah now with all that being said
64:44 - this is all set up and the next thing
64:47 - we're going to work on is the app.js
64:49 - file
64:50 - so let's get rolling on that okay so now
64:53 - that we have next talking to sanity
64:56 - let's actually start building out our
64:58 - next files so we're going to come under
65:00 - pages
65:02 - and we're going to go to app.js so this
65:04 - file encompasses our entire app
65:07 - so we're going to keep it as is and just
65:09 - add to it so i know we are going to want
65:12 - link
65:14 - import link from next link
65:17 - and then we're going to come down here
65:20 - open this return up
65:24 - and bring it down here
65:27 - and then we're going to wrap this whole
65:29 - thing
65:30 - in a
65:31 - react fragment
65:33 - save that
65:35 - and i do know that we want to wrap this
65:38 - component in a main tag because this is
65:41 - going to be our main
65:43 - section of our app still
65:45 - because this is our page props and it's
65:47 - bringing all the information in and
65:49 - displaying it i do want to add an entire
65:52 - i do want to add a nav bar to our entire
65:56 - app that's why i'm going to build it
65:57 - here because i want it to show up on
65:58 - every page
66:00 - it's going to be just one thing that
66:02 - takes us home it's not going to be a
66:03 - very fancy navbar but i did want to make
66:06 - sure we added that in
66:08 - okay so underneath this we're going to
66:11 - add
66:12 - nav
66:14 - and then a div within that that has
66:16 - we're going to be using link
66:19 - that has an a tag inside
66:23 - now the a tag i'm going to do cap's
66:25 - kitchen and let's add
66:28 - a
66:30 - pineapple
66:32 - yeah
66:33 - and then
66:35 - in the link
66:36 - we need to add an href
66:38 - that is taking us back home
66:42 - and that is it so we should now have
66:45 - a
66:46 - yeah
66:48 - cap's kitchen takes us back to
66:51 - the home page
66:53 - if i'm i mean i guess i can click
66:54 - somewhere else and it's always going to
66:56 - be there takes it back awesome
66:59 - okay now all we want to do is add
67:01 - styling so i do know in this nav i do
67:04 - want to add a class name of
67:08 - header
67:08 - i'm going to save that and all of our
67:11 - css is going to live in this global css
67:14 - down here
67:16 - let's empty this out
67:19 - now when you have styling
67:22 - it is always good to normalize your css
67:25 - because when you send your app to um
67:28 - a browser sometimes there's applied
67:31 - styles from the browser so if we kind of
67:34 - cancel all those out we can make sure
67:36 - that that's not happening to us
67:38 - so i'm going to
67:40 - search for normalized css cloudflare
67:46 - and i want to copy
67:48 - this link
67:51 - yeah
67:52 - let's go back here
67:54 - and let's do at import url
67:58 - and we'll put the link right in there oh
68:01 - right like that so now all of our css
68:04 - styling will be
68:05 - correct and
68:07 - whatever browser someone's using won't
68:09 - be changing any of that
68:11 - so we just created the header
68:15 - in here we want to do max
68:18 - width
68:19 - width
68:20 - of 80
68:23 - we'll do a margin of 0 and auto
68:27 - we'll do padding of 12 pixels and 10
68:29 - pixels so on all sides and a font size
68:34 - of 25
68:36 - pixels i also know that i want to style
68:38 - the a tag within header so we'll do
68:40 - header a
68:42 - open that up color
68:45 - okay i want to pick like a green color
68:48 - let's do
68:50 - green i like it
68:53 - i get darkish green yeah let's try that
68:57 - okay so that's my color um display we'll
69:00 - do inline
69:02 - block
69:03 - padding
69:05 - top we will do 10 pixels and
69:08 - text decoration
69:10 - we want none because we don't want that
69:12 - underline that comes with that
69:15 - and we have that main tag that was
69:18 - wrapped around
69:19 - our
69:21 - in app.js
69:22 - so let's do main
69:25 - so max
69:26 - width
69:28 - width
69:28 - is 80 so it matches that nav bar
69:32 - and margin
69:34 - 0
69:35 - auto
69:37 - padding
69:39 - top
69:40 - of
69:41 - 30 pixels
69:42 - and padding
69:44 - bottom
69:46 - of 80 pixels
69:49 - save that
69:50 - okay so we do want to add
69:53 - a body
69:54 - so that a lot of this can be
69:57 - just encompassing all of our application
70:01 - so we'll do font family
70:03 - and we'll just do ariel yeah
70:06 - and you can choose any font you want i'm
70:08 - just going to go with that one for now
70:09 - and then we'll do a background
70:12 - color
70:14 - of
70:16 - yeah it's like a light gray
70:18 - i'm gonna save that and we should have
70:20 - some nice styling but
70:23 - index.js is not like done so it's just
70:25 - kind of like background end
70:27 - of
70:28 - navbar let's get rid of this normalize
70:32 - there we go
70:33 - yeah so there's cap's kitchen
70:35 - and if i went and i navigated away it's
70:37 - always going to be there and it always
70:39 - takes me back
70:40 - so yeah that's what we have so far all
70:42 - right so now that we have our navbar
70:46 - our app.js file set up
70:48 - let's work on our slash page so our
70:51 - index.js file
70:53 - so i'm in it right now and we've done
70:56 - some stuff in it already
70:58 - let's clean out
71:01 - all of the content that was given to us
71:04 - when we
71:05 - did the next
71:07 - uh create next app command
71:10 - okay
71:10 - and then
71:13 - we'll get rid of this because we're
71:14 - going to update that
71:17 - so really we're just starting
71:19 - fresh from beginning we will need this
71:23 - um
71:24 - but we will change it a bunch so i'll
71:26 - just leave it there for now and we don't
71:29 - need
71:30 - this
71:31 - we will use link we don't need this
71:35 - cool
71:36 - okay so starting from the top we do need
71:38 - to import our sanity client
71:42 - stuff
71:43 - so we're going to do sanity
71:46 - client
71:47 - and we're going to pull in url for
71:50 - from
71:51 - and it's
71:52 - to
71:54 - yeah
71:55 - lib and then sanity perfect
71:57 - save that
71:59 - all right so now we are going to be
72:01 - getting into grok so we are going to be
72:03 - pulling in our content
72:06 - using the
72:07 - query language grok
72:09 - let's go learn more about it together
72:12 - so grok
72:13 - sanity
72:17 - all right so
72:19 - it is a query language that was made by
72:21 - sanity and there's tons of different
72:24 - like
72:25 - examples
72:26 - there is a how-to section um this is a
72:29 - really awesome doc
72:30 - it starts off introduction
72:33 - basic sorting
72:35 - but yeah i definitely highly recommend
72:38 - looking through this
72:40 - and
72:41 - one that we will
72:42 - use a lot
72:45 - is
72:46 - this dereferencing because we are
72:48 - referencing and i kind of showed you
72:49 - that in that um referencing doc but yeah
72:52 - you will see that here
72:55 - and we have
72:58 - let me show you the
72:59 - cheat sheet
73:01 - i like the cheat sheet
73:03 - a lot of just like examples
73:05 - and what would come out of it
73:07 - so
73:08 - the asterisk gets you everything so it's
73:11 - everything in our content like of
73:14 - content
73:15 - so it pulls everything and then this we
73:17 - will start filtering through
73:20 - what we want to pull out
73:22 - and then
73:23 - you can modify
73:24 - greater than
73:26 - uh
73:26 - not equal to this or whatever but
73:29 - yeah there's definitely lots of ways you
73:31 - can use grock and we will be using a
73:34 - number of ways to get our content but
73:37 - yeah
73:38 - let's go back to
73:40 - our code
73:42 - so here we're going to set const recipes
73:46 - query
73:47 - two okay so here we're going to write
73:49 - our first graph query together um
73:53 - like we saw in the doc the asterisk
73:55 - pulls in all of our content so it is our
73:58 - content lake of data and we
74:02 - always start with asterisks then we're
74:04 - going to open up with square brackets
74:06 - and do underscore type
74:08 - is equal to
74:10 - recipe
74:12 - now
74:13 - this
74:14 - type is equal to recipe is going to pull
74:16 - all of
74:20 - the content here so this is our type
74:22 - that is recipe
74:24 - and
74:25 - if we wanted to
74:27 - where is it
74:29 - if we wanted to see what this returns we
74:31 - could
74:32 - you know continue coding or there is a
74:35 - spot where we can
74:37 - have a grok playground with our own
74:39 - content so let me show you that so i
74:41 - copied that
74:42 - if we come to our studio we have this is
74:44 - our desk view
74:46 - let me zoom out just a little bit so we
74:49 - can see so this is our desk view if we
74:51 - go to vision
74:54 - here is our
74:57 - grok playground for our content i'm
74:59 - going to zoom in just a little bit so
75:01 - this is where it will where you can play
75:03 - and put in grout queries for your
75:05 - content there is a place where you can
75:07 - go
75:08 - grok.dev where there's going to be
75:10 - content already for you you can play
75:12 - around with the queries and hit play and
75:14 - this is what's returned so this is
75:17 - just a generic
75:19 - bunch of content
75:20 - but
75:21 - for our local version this is what we
75:24 - use and here i'm going to actually
75:26 - change the api version to be what we put
75:28 - in our sanity.js file so we're going to
75:30 - do the this version right here
75:33 - and it ran for us all right so
75:36 - here is what we get when we run the
75:38 - query type
75:39 - equal to recipe we have one item and it
75:42 - is our pineapple smoothie here's the
75:45 - name let's say we wanted to pull the
75:46 - name out we would open that up and type
75:49 - in name
75:50 - run that query and we get just pineapple
75:53 - smoothie
75:54 - um if we
75:55 - take that away
75:58 - let's actually add another recipe so we
76:00 - can have two to kind of query out
76:03 - i'm going to go back to desk
76:06 - and let's add
76:09 - let's add a mango smoothie
76:12 - mango smoothie
76:14 - generate that slug
76:16 - and
76:17 - who was the chef for last one it was
76:19 - bonnie okay so i'm gonna take credit for
76:21 - this one
76:23 - and then let me pull in an image
76:29 - this is going to be pineapples or mango
76:32 - smoothie
76:33 - and then we come down here and we're
76:34 - going to add
76:36 - a mango
76:37 - of one
76:40 - cup
76:42 - awesome
76:43 - and then we'll say
76:45 - blend
76:46 - mango with ice
76:48 - serve chilled
76:50 - awesome so let's publish that and let's
76:52 - go back to our vision
76:54 - and remember if i just unzoomed a little
76:56 - bit
76:57 - those would be up here but because i'm
76:59 - zoomed in it creates that menu
77:01 - so click there
77:02 - i'm gonna zoom back in
77:04 - and now when we run this we should have
77:07 - two items exactly there we go so there's
77:10 - the mango smoothie and here is the
77:12 - pineapple smoothie and here's all the
77:14 - content that we are getting back with
77:16 - just
77:17 - the recipe
77:19 - so we are getting
77:21 - the id
77:22 - the type recipe
77:24 - uh the chef and this reference is the id
77:28 - of the
77:29 - chef reference so if we did
77:34 - so let's try and remember this reference
77:37 - but yeah four f e is it different than
77:40 - the other one
77:41 - yeah okay
77:42 - so 4fe
77:44 - should be
77:46 - the pineapple smoothie chef
77:48 - so if i did this
77:52 - chef
77:54 - and we get 2 4fe
77:56 - this reference is now the id of the chef
78:00 - which is bonnie so bonnie was the chef
78:03 - of that one
78:04 - so
78:05 - it's referencing this id and then
78:07 - pulling out all this chef information
78:10 - for us so let's go back to recipe and
78:12 - let's write out our entire query that we
78:14 - want for index.js
78:17 - so we want to pull out the
78:19 - id
78:21 - we want to pull out the name
78:23 - so here we see we want this id
78:26 - we want this name
78:29 - we also want
78:31 - the slug and the slug can be found right
78:34 - here
78:36 - pineapple.smoothie and then we want the
78:39 - main image
78:41 - and that is right here
78:44 - and again this is referencing the id of
78:47 - that image
78:48 - and it's a type reference so let's run
78:50 - this query
78:52 - and here we go here's all the content
78:54 - that we want for our index.js so i'm
78:56 - going to copy this
78:58 - and now that i know it's exactly what we
79:00 - need i'm going to take it back
79:03 - here
79:04 - and i will paste it in
79:07 - right there save that and now we have
79:10 - our query all ready for index.js okay so
79:13 - we're going to come down to the very
79:15 - bottom and remember when we when we did
79:17 - this get static props let's actually
79:19 - clean this out and put in the stuff that
79:22 - we do need
79:24 - so remember get static props is going to
79:26 - take in
79:28 - the fetch so instead of like using a use
79:30 - effect like with react we're going to
79:32 - use this we're going to fetch our data
79:34 - because we've written this recipes query
79:37 - up here we're going to use that
79:39 - so here i'm going to do const
79:42 - recipes equal to
79:44 - a weight
79:46 - and we're going to add async up here
79:49 - and then we'll do sanity client.fetch
79:52 - and we're going to fetch for
79:55 - that recipes query
79:58 - and then we're going to return
80:00 - props because we need props for all of
80:03 - this and it's going to be set to
80:07 - recipes
80:09 - so
80:09 - we have okay so let's go over this so
80:12 - the reason why we do the async await on
80:14 - this get static props is that next.js
80:16 - will pre-render this page at build time
80:18 - using the props returned by this
80:21 - getstatic props so that's why we add it
80:23 - here
80:24 - and then this line we're just assigning
80:27 - recipes to
80:29 - that fetch so all of our content that we
80:32 - are getting in that recipes query and
80:34 - then returning props as
80:36 - that content so now that we've assigned
80:39 - props
80:40 - or recipes to props we can use that up
80:44 - in our
80:46 - function so we're going to remove
80:49 - this
80:50 - and now it's not data now it's going to
80:51 - be recipes
80:53 - we'll get rid of that
80:56 - and let's write out our template and use
80:59 - our content
81:00 - so the reason why we have this in curly
81:02 - braces is it's called a destructuring
81:05 - assignment so what it does is it lets us
81:08 - pick out values inside of the object
81:11 - that is passed through the home function
81:13 - so instead of
81:16 - i mean we could do we could do this so
81:18 - we get rid of this
81:20 - pass through props and then we could do
81:22 - like const
81:25 - recipes
81:27 - is equal to props so we could do
81:29 - something like that but instead
81:32 - we can
81:33 - do the destructuring assignment and pass
81:36 - in recipes here
81:38 - and then
81:39 - we can continue on okay so the first
81:41 - thing i want to do is i want to update
81:42 - the tab so remember the head
81:44 - this title
81:46 - is
81:47 - this
81:48 - tab intro to next so let's update that
81:50 - to say
81:53 - caps kitchen
81:55 - and we will add a pineapple yay
81:59 - and then underneath the head
82:00 - we will start with an h1 h1
82:05 - and we'll do welcome
82:07 - welcome to
82:09 - and we'll just do cap's kitchen here
82:14 - and that's it for h1 and then let's open
82:16 - this up
82:17 - and we are going to do an unordered list
82:19 - of all of our
82:21 - recipes so what it's going to what it's
82:23 - going to look like is we're going to
82:25 - have our home page we're going to have
82:27 - like caps kitchen and then like welcome
82:28 - to cap's kitchen
82:30 - and under that is going to be tiles that
82:32 - are clickable that has the main image
82:34 - and the title of
82:36 - the recipe and then you click into one
82:38 - it navigates you to another page that we
82:40 - have not built yet and that's going to
82:43 - have
82:45 - all of our recipe content like
82:47 - ingredients and instructions but this we
82:49 - just want to display the main image and
82:51 - the
82:52 - title so let's do that so we're going to
82:54 - do an unordered list
82:57 - within that we're going to do
82:59 - list items
83:01 - and within that we are going to link
83:05 - with an a tag
83:08 - that is set
83:11 - inside that has set inside of it image
83:16 - whoops i'll fix that and spam
83:21 - awesome
83:23 - so in the unordered list we are going to
83:25 - map over our content
83:28 - so i'm going to open this up and if we
83:30 - have recipes so that question mark is if
83:33 - there are recipes then continue on with
83:35 - this
83:37 - then we want the length the amount of
83:39 - the recipes to be greater than zero
83:42 - and
83:44 - once that is done then let's
83:47 - map over all of that
83:50 - so we'll pass in recipes
83:53 - a recipe
83:54 - and then come out of this
83:57 - and we need to take these three
84:02 - and put them underneath
84:04 - the li
84:05 - so now we have
84:07 - a map so we're doing an unordered list
84:09 - and mapping over the list items which is
84:11 - going to be
84:13 - images and
84:14 - names of the recipes
84:16 - so link right now we're going to do an
84:19 - href that is equal to home because what
84:22 - we do want it clicking to is not built
84:24 - yet so let's just leave it at that
84:27 - we'll come down to span
84:29 - and let's do recipe.name
84:32 - we'll save that
84:34 - and let's see
84:37 - okay
84:38 - so we have welcome to cap's kitchen but
84:41 - the content that we're pulling through
84:42 - because this was hard coded and so was
84:44 - this
84:45 - is pineapple smoothie if we click on it
84:49 - nothing will happen because
84:51 - remember it's being
84:53 - linked back to home
84:56 - now let's add in the image
84:58 - so because we were using the url4 we
85:01 - added that in our sanity.js file because
85:04 - we're using that we don't need to
85:05 - destructure the main image and we can
85:09 - use this to help us grab that url of
85:12 - that main image whoops
85:14 - so let's come down here
85:16 - and we're going to do images
85:18 - source
85:20 - is equal to
85:23 - url4 and it'll be recipe.main
85:27 - image
85:28 - we'll come out of that and we'll do dot
85:30 - url
85:31 - now with this url4 we could continue
85:34 - chaining on
85:35 - so we could do it with we could set a
85:37 - height but the most useful part of it is
85:39 - this url we
85:42 - is this url for so we don't have to
85:43 - destructure up in our query
85:45 - we can just pull out the main image and
85:47 - this will take all of that
85:49 - url destructuring work and handle it for
85:52 - us so that's what is happening there
85:54 - let's save and we should have our main
85:57 - image displayed for each one of them
85:59 - and we do
86:01 - okay so we have pineapple smoothie and
86:03 - we have mango smoothie
86:05 - very big images but let's style that so
86:08 - it looks nicer
86:10 - so if we come here i think we have all
86:13 - of that in
86:15 - list items let's actually give a key to
86:17 - each of these
86:18 - so key will be
86:21 - whoops
86:24 - the recipe dot
86:26 - id
86:28 - and then let's just work from the top
86:29 - and let's style these out
86:31 - so an ordered list we'll have a class
86:34 - name that we're going to name
86:38 - um
86:39 - recipes dash list
86:42 - and then we have on the list item
86:46 - we have a class name that is equal to
86:50 - recipe card
86:53 - and
86:56 - that is it
86:57 - yeah
86:58 - okay
86:59 - so
87:00 - let's go style so all this will happen
87:02 - in globals.css
87:05 - come down here
87:08 - and
87:09 - let's write out our css
87:11 - okay so we have recipes dash list open
87:14 - that up and we'll do display is grid
87:18 - grid
87:20 - grid template
87:23 - template
87:25 - columns we're going to do 1 fr
87:28 - 1fr 1fr so that's giving
87:32 - three sections all equal space so
87:35 - one one one
87:37 - and then we'll do a gap between all
87:40 - those at 40 pixels we'll do list style
87:44 - is none and then padding is
87:47 - zero
87:49 - then let's go for recipe card and let's
87:53 - do recipe card and the a tag of that
87:58 - so we'll do display is block
88:01 - height is 100
88:03 - percent
88:05 - text decoration
88:07 - is none now text decoration now will
88:09 - take off the underline
88:12 - for accessibility it's not always the
88:13 - best
88:14 - but make sure you
88:16 - make it obvious enough that it's
88:17 - clickable
88:18 - but if we kept this it would keep that
88:20 - underline and that underline helps
88:23 - people know that it is clickable
88:26 - so it's up to you if you want to keep
88:27 - that or not
88:28 - so color we'll do hash 444 and then font
88:32 - size
88:34 - will do 22 pixels
88:37 - and then recipe card
88:40 - the image part of it
88:42 - recipe card
88:44 - image
88:45 - we'll do height is 300 pixels
88:48 - object
88:49 - fit is cover we want to fill the entire
88:52 - space that is given
88:54 - margin bottom we want 12 pixels and then
88:59 - border
89:00 - 0.5 pixels solid and then hash 444.
89:05 - save that and let's go see what it looks
89:06 - like
89:08 - so the only thing i don't like about
89:09 - this is that this is wrapping so what we
89:12 - need to do is on image
89:15 - let's add display
89:17 - block
89:18 - and there we go okay
89:20 - so now we have
89:22 - two clickable areas takes us nowhere
89:25 - takes us home
89:26 - but all of this
89:28 - is our tile and if we added another one
89:31 - there'd be another one right here and
89:33 - then if we added a fourth one it would
89:35 - come down here
89:36 - so it's ready to be filled with content
89:38 - filled with recipes
89:40 - all right
89:42 - so with that being said all of that
89:45 - is what we need for index.js and
89:47 - index.js is done
89:49 - um and yeah now we can move on to
89:53 - the slug js file
89:56 - and this is where we are going to have
89:59 - when someone clicks on one of these
90:02 - where does it take them it takes them to
90:04 - the
90:05 - slug of where it takes them to the page
90:08 - of the recipe that we've clicked on so
90:11 - let's get to that
90:13 - okay so now that we have
90:15 - app.js and index
90:17 - built out let's build our dynamic route
90:21 - so the way next does dynamic routes
90:24 - is
90:25 - and remember all of our pages
90:28 - will live under pages
90:30 - and we're going to create a new folder
90:32 - called recipes to organize
90:35 - and within recipes we're going to do a
90:37 - new file
90:38 - and to do a dynamic route we do square
90:40 - brackets
90:41 - slug because that's what we want to
90:43 - replace
90:45 - that name is the slug of the recipe
90:48 - and this is our dynamic
90:51 - route so it means that whenever we go to
90:55 - slash recipes
90:57 - whatever so like slash pineapple dash
91:00 - smoothie
91:01 - then we can access the last segment of
91:03 - the url in our template file and use
91:05 - that data for something for example
91:07 - doing a query to fetch a specific recipe
91:10 - in our case
91:11 - so
91:12 - that's why we want a dynamic row here so
91:14 - we don't have to do a route for each
91:16 - recipe it will just know replace the
91:19 - slug and whenever we access this file
91:23 - we are diving into it with the slug that
91:25 - we want and we will write out all that
91:27 - code so it all makes sense so for
91:30 - dynamic page templates like this but
91:32 - we're going to be writing out we can
91:34 - access the data from the url inside of
91:36 - the get static props so
91:39 - we will do get static props with prams
91:42 - and we'll do that and then we will
91:44 - destructure the params
91:46 - uh within our get static props
91:49 - so then you can find the slug inside of
91:51 - params that will set
91:53 - and without
91:55 - talking about this let's just code it up
91:57 - and let's look at what it's all going to
91:58 - look like
91:59 - so i do know we are going to need to
92:01 - import a lot from
92:03 - that
92:06 - lib
92:07 - sanity
92:09 - file
92:10 - so we will need the sanity client of
92:13 - course
92:14 - we will need the url for
92:17 - we will be pulling in that use preview
92:19 - subscription
92:21 - and
92:22 - portable text so all those things that
92:24 - we made in the sandy uh
92:28 - file are now being used
92:30 - so we'll come out of here
92:32 - and
92:35 - right away we are going to have const
92:38 - recipe query here and this is where
92:40 - grock query is going to live
92:42 - and then we'll do export default
92:45 - function we'll call this
92:47 - one recipe
92:50 - and then in here
92:52 - we'll open that up this is going to be
92:55 - our template
92:56 - and
92:57 - all that good stuff and then very bottom
93:01 - we will have
93:03 - get
93:05 - we'll do
93:06 - export async function get static
93:10 - paths we have not seen that yet and we
93:13 - will talk about that and then below this
93:15 - we will do a
93:16 - export async
93:18 - function get static
93:20 - static props
93:23 - and
93:25 - there we go so here is how our slug.js
93:29 - or dynamic route is going to be set up
93:31 - and yeah let's get working on it so
93:33 - there are a couple things in this that
93:36 - are going to be happening
93:38 - so the use preview subscription we won't
93:40 - be worrying about the sanity preview
93:42 - till the end
93:44 - um
93:45 - and that
93:46 - so that's just kind of going to hang out
93:48 - for a bit the portable text is going to
93:50 - be within our template
93:52 - same with the url for and then the
93:53 - sanity client is going to be whenever we
93:55 - are
93:56 - fetching our content all right so where
93:59 - to begin uh let's start with
94:03 - writing out our grok query
94:05 - yeah let's do that so this query is
94:08 - going to be a little different because
94:09 - we are specifically looking for a
94:12 - slug because that is everything in this
94:15 - because we want to click on something
94:17 - and go to only that slug display the
94:19 - information there
94:21 - so we're going to do the same thing
94:22 - we're going to grab all of our content
94:24 - asterisks grabs our content like
94:27 - open up square brackets and we're going
94:29 - to do type is
94:31 - equal to
94:33 - still recipe
94:35 - and
94:37 - slug dot current
94:39 - is equal to
94:42 - the slug
94:43 - and we're going to grab the first
94:47 - item in that array so we are getting an
94:49 - array of recipes
94:51 - the first item the one that is clicked
94:52 - on the current slug is what we want
94:55 - displayed
94:56 - open that up and we want id we want name
95:00 - we want slug
95:01 - main image so this looks very similar to
95:03 - what we wrote in the last file
95:06 - and we're going to dereference that and
95:08 - get the id and the url
95:12 - now in addition to this so that's pretty
95:14 - much the same stuff as last time
95:16 - in addition to this we're going to also
95:17 - grab
95:19 - the ingredient
95:23 - in that
95:24 - and we want
95:26 - everything from it whole unit whole
95:28 - number
95:30 - fraction
95:31 - ingredient let me pull this up
95:34 - ingredient and dereference that because
95:36 - remember that is a reference to our
95:38 - ingredient
95:39 - and pull out from that the name
95:42 - otherwise we can't get the name if we
95:44 - don't dereference it
95:46 - because remember we didn't rewrite it in
95:48 - the recipe we rewrote we just referenced
95:51 - the ingredient
95:53 - and then come out of that and we will
95:55 - get
95:56 - instructions
95:59 - all right so that is our entire
96:02 - query getting the recipe the slug that
96:04 - is clicked on and all this
96:08 - content from it
96:11 - cool so let's leave the one recipe for a
96:14 - little bit and let's work on get static
96:16 - paths and get static props so because we
96:19 - have a dynamic route that uses getstatic
96:23 - props it needs to define a list of paths
96:26 - that has to be rendered by next so we
96:29 - want to tell next hey here are all the
96:31 - paths that could be clicked on
96:33 - when it's clicked on
96:35 - then props will get all of that content
96:37 - for us so get static paths will
96:41 - allow next to know all of the dynamic
96:44 - paths so next we'll take all the paths
96:46 - that we are giving it and pre-render all
96:49 - of them so
96:51 - getting it ready for the user so next.js
96:53 - is going to want params from this and
96:56 - we're going to tell it slug dot currents
96:58 - whatever slugs are made available those
97:01 - are parameters we're going to pass those
97:03 - parameters to our get static props and
97:06 - it will pull out the content
97:08 - so in here
97:09 - we want to
97:11 - open up get static paths and we'll do
97:13 - const
97:14 - paths is equal to await
97:16 - sanity
97:18 - client.fetch because we want to fetch
97:21 - all of and in here
97:24 - all of the slugs that could be potential
97:27 - paths so we're going to open up a grok
97:29 - query
97:30 - and we're going to do underscore type is
97:33 - equal to
97:35 - recipe
97:36 - and
97:38 - defined
97:41 - slug dot current so this is going to
97:43 - look for the slug dot current that is
97:45 - going to be clipped on open this up and
97:48 - we want to set params
97:52 - to
97:54 - slug
97:56 - that is slug.current
97:59 - so let's look at this for a second
98:03 - so it's very different than the grok
98:05 - query up here this is
98:07 - getting a type of recipe select the
98:08 - current but it's pulling out all the
98:10 - content that we want
98:12 - this
98:13 - is
98:14 - look is pulling out the path
98:16 - for that content now we're going to take
98:19 - this params and we're going to
98:21 - bring it down here but let me not move
98:23 - on from get static paths let's come out
98:26 - of this query
98:27 - and we now need to return
98:31 - the paths
98:32 - so
98:34 - we're fetching all this
98:36 - setting it to paths now we're returning
98:38 - it and that return
98:41 - is going to be able to be used now we
98:43 - need to also do
98:44 - fallback
98:45 - and set it to true
98:47 - so if we set fallback to false then any
98:50 - path not returned in the get static
98:52 - paths will just result in a 404. if
98:55 - fallback true
98:56 - then it won't result in a 404 if the
98:59 - page doesn't exist it will fall back to
99:02 - a version of the page on the first
99:03 - request of the path so
99:06 - fallback false we'll just be like i
99:08 - don't have it it's not in my list of
99:11 - static paths
99:12 - 404 fall back true it will say wait let
99:15 - me go look let me go see if it's there
99:17 - and then
99:18 - re-render it for us and then while it's
99:20 - getting that path it will add it to the
99:22 - get static paths because maybe you
99:24 - didn't
99:26 - build again or whatever it is but it
99:28 - will add it to your paths and
99:30 - put it up here so that is get static
99:33 - paths for us it is getting a collected
99:36 - list of all of the paths that this
99:39 - dynamic route can be so we will save
99:41 - that and let's work on get static props
99:44 - now the reason why we use grok right
99:46 - here is that you can shape the data
99:48 - structure that next wants for this right
99:51 - and grock so we don't have to do all
99:53 - these like
99:55 - well if it's not a slug if it is here
99:56 - just get that slug and set it two params
99:59 - all right so now with the get static
100:01 - props because we have set params
100:04 - to the the slug the current slug we are
100:06 - going to pass that into our get static
100:09 - props because we need those params
100:11 - and the slug that was clicked on in
100:13 - order to pull out the
100:15 - the correct content for whatever they've
100:17 - clicked on your user so we're going to
100:19 - destructure our params
100:21 - in here oops
100:25 - and then open this up
100:28 - and do const
100:31 - slug
100:32 - is equal to
100:34 - params
100:35 - okay so the params that we're sending in
100:37 - is now our slug so now we need to look
100:40 - at the recipe data from sanity
100:42 - and so we'll do const recipe
100:45 - away sanity client
100:48 - dot fetch because we've already written
100:50 - our query we're just going to pull in
100:52 - what we named it recipe
100:54 - query and then we want that
100:57 - slug
100:58 - so we want the slug but
101:00 - the content from that particular slug
101:03 - and then we will return
101:07 - props like we did in the last file
101:10 - and it will be set to
101:13 - data which is the
101:15 - recipe and that is it so we're going to
101:18 - save that
101:20 - now let's talk about this so now we can
101:22 - find the slug
101:24 - inside of pram so the const slug params
101:26 - if we had called our file
101:28 - instead of the destructuring slug if we
101:31 - did a destructuring recipe then the
101:33 - param would be const recipe is equal to
101:36 - params
101:37 - so
101:38 - that const slug
101:40 - is matching up with this
101:42 - right here the naming of the file
101:44 - so you can name that anything we just
101:46 - chose slug so we took this
101:50 - this grot query and pass it to our
101:52 - client
101:53 - like
101:55 - this
101:57 - okay the sanity client fetch
101:59 - and then in the studio
102:02 - the slug is stored as slug dot current
102:04 - because it wants to be able to store
102:06 - previous slugs in the future
102:08 - so the current one whatever it is
102:10 - is slug dot current and that's what is
102:12 - being saved as in the studio so our
102:16 - function get static pass works in a
102:18 - similar way to get static
102:20 - props
102:21 - only you want to export an array of the
102:23 - params that is slugs that you want next
102:26 - to build so we do the grot query
102:29 - for this as well and that that is next
102:33 - next is
102:34 - really great with like being able to
102:36 - build out really big applications
102:40 - but with two very very powerful
102:42 - functions um get static paths and get
102:45 - static props
102:46 - um
102:48 - we're getting our paths
102:49 - and we're getting those
102:51 - props out of those paths and then we're
102:54 - going to pull this up into one recipe
102:57 - and use it up here and send it to our
102:59 - template so from here you could take
103:01 - your next js application and grab any
103:04 - kind of data grab a large amount of
103:07 - paths
103:08 - and put in the temple however you need
103:11 - but this is a great starting point
103:13 - because it kind of covers
103:15 - a little bit of a lot i'm very excited
103:17 - to see what can be built on from this
103:21 - point especially from
103:22 - these two great powerful functions that
103:26 - next has given us okay so the way
103:28 - someone once described both of these to
103:30 - me
103:31 - get a static path and get static props
103:34 - is get static paths is like knowing the
103:36 - address of every house in a neighborhood
103:40 - the aesthetic props is knowing
103:42 - the people who live in those houses and
103:44 - what they ate for breakfast so
103:47 - the path to the house
103:50 - and all the houses and
103:53 - the data and content within those paths
103:56 - so i hope that makes sense
103:58 - um these are both really powerful and
104:00 - good to know
104:02 - now let's move on and let's get our
104:05 - content
104:06 - put into our
104:08 - one recipe
104:09 - okay now something that i
104:11 - realized that i did that we don't need
104:13 - to do
104:14 - is at the top in our query we actually
104:17 - don't need
104:18 - because remember from index.js we had
104:21 - the url4 that took care of pulling out
104:24 - that url from the main image so we can
104:27 - just do just main image but we will
104:29 - destructure the ingredient
104:31 - down here to get the name out and all
104:34 - this is good to go and one last thing i
104:36 - do want to mention is we are passing the
104:38 - grok params
104:40 - as an object
104:42 - as the second argument of the fetch
104:44 - function
104:46 - so
104:47 - we have our params
104:51 - coming in here setting the slug and
104:53 - using that here
104:55 - as the second argument that matches up
104:58 - with what's happening right here
105:00 - this slug so
105:03 - we have a lot of params going around but
105:07 - grock pram's
105:08 - second argument and it matches up to
105:10 - that slug that is trying it's trying to
105:12 - find
105:13 - and yeah so what we need to do next is
105:16 - we need to grab all of the
105:19 - props that we are getting out of this
105:21 - and put it up into our
105:25 - one recipe function so
105:27 - let's work on this part of the file so
105:30 - because it is set to data we are going
105:32 - to pull up here
105:35 - data
105:36 - and then
105:38 - open this up and we're going to do const
105:42 - recipe is equal to data
105:45 - and then down here we are going to be
105:47 - doing the return
105:50 - and let's build out our template
105:52 - so let's start with an article and
105:55 - within that we will have an h1 let's
105:57 - come out of that
105:59 - and we'll have our main section
106:01 - that will have
106:03 - an image
106:05 - and
106:07 - a div next we'll have an unordered list
106:10 - and then the list items we will put
106:12 - there and this unordered list will be
106:14 - the list of ingredients and like
106:17 - how many of each ingredient like a cup
106:19 - or a fourth cup a gram but that will all
106:23 - go in here and then outside of this
106:25 - unordered list
106:27 - we are going to have and i'll just say
106:29 - instructions here
106:31 - uh because we're not going to build that
106:33 - yet but that's where our instructions
106:34 - will go
106:35 - so yeah let's start on the h1 the h1
106:39 - we're going to have
106:40 - be
106:42 - recipe.name
106:44 - so let's bring in recipe.name let's save
106:46 - that and let's see if that is being
106:48 - pulled out
106:51 - so if we click on that
106:53 - nothing happens because we haven't
106:56 - changed
106:57 - in index.js we have not changed this
107:00 - link so it still thinks it's supposed to
107:02 - be going home so let's fix that so let's
107:05 - delete all that and then we'll do curly
107:08 - braces with back ticks and we're going
107:10 - to do slash
107:11 - recipes because we are following this
107:13 - path so it's diving into this folder
107:16 - recipes and then we're going to do
107:20 - recipe dot slug dot current
107:23 - save that and let's see what happens
107:26 - so if we click on something
107:28 - 404 oh because if you look up here
107:32 - i miss a slash and so now it's just like
107:34 - that whole thing it's going correct but
107:38 - it's not fully correct because we need
107:40 - that slash now let's go try so let's go
107:43 - back home let's click on pineapple
107:45 - smoothie
107:46 - and now we get
107:49 - instructions here
107:50 - and pineapple smoothie so this is
107:53 - the part that is being pulled out
107:56 - and it's working our data is working and
107:59 - we have our list item but
108:02 - instructions here that is hard coded
108:04 - that's not our data yet but this is
108:06 - being pulled out if we go back and go to
108:08 - mango smoothie mango smoothie should pop
108:10 - up and it does all right so let's keep
108:12 - building out this template and let's get
108:15 - going on that so not index but here in
108:18 - slug so in the unordered list we do want
108:21 - to map over our ingredients and
108:24 - the amount of each ingredient so let's
108:27 - do
108:28 - recipe
108:30 - dot ingredient if it's there then map
108:33 - over it and we'll do
108:37 - ingredient
108:38 - we'll come out of that
108:41 - open that up and let's take these three
108:46 - and move it
108:47 - underneath
108:49 - this
108:50 - li
108:51 - perfect let's save that and then within
108:54 - our li
108:55 - we're going to give it a key that is
108:57 - equal to
108:58 - ingredient dot
109:01 - key so
109:02 - that will go there
109:04 - let's open this up and this is where
109:06 - we're going to pull in
109:08 - the
109:10 - amount of the ingredient so we have
109:13 - whole number unit fraction so we want to
109:16 - pull all that out it will be
109:19 - ingredient and if there's an ingredient
109:20 - pull out a whole number
109:23 - let me just copy all this
109:28 - and then we're going to do a break here
109:32 - paste that so we'll do whole number
109:35 - we'll do fraction
109:38 - we'll do
109:41 - unit
109:43 - and then we will do
109:45 - ingredient
109:47 - dot name so notice how this one is just
109:50 - well these three are
109:52 - ingredient whole number but this is
109:54 - ingredient ingredient name it's because
109:56 - we come up here
109:58 - it goes ingredient whole number unit
110:00 - fraction all that but we also have
110:03 - ingredient
110:04 - that is de referencing
110:07 - the ingredient and grabbing out the name
110:10 - and
110:11 - i just want to also point out i did
110:13 - update this to say key now so we're
110:15 - using the key
110:17 - now if we come back down here
110:19 - we're going to add
110:21 - just a space right there so everything's
110:24 - not so crammed and we have the name
110:28 - and
110:30 - let's pull in the main image
110:32 - so same as index we'll do source equal
110:35 - to
110:37 - and we're going to do url4
110:40 - and it will be recipe if there's a
110:42 - recipe then get the main image
110:45 - and
110:48 - the url of that image
110:51 - now if we save that
110:52 - we should have
110:54 - a lot of content on the page
110:57 - we do okay so we have the
110:59 - image
111:01 - and we have one cup mango
111:04 - if we went to pineapple smoothie
111:06 - same thing
111:07 - and we have all of that so that is great
111:10 - it's looking good okay so
111:14 - then we can come back here and
111:17 - we have the name we have the image let's
111:19 - do the instructions part so like we
111:21 - pulled in from above portable text let's
111:24 - now use it so i'm going to come down
111:26 - here and i'm going to replace this h3
111:28 - with
111:30 - portable
111:31 - text
111:33 - so portable text what it does is it maps
111:35 - over those blocks that we saw and
111:37 - transforms them into react components
111:40 - and that if we want to we can override
111:42 - and use our own customized components to
111:44 - replace any of the default behavior with
111:46 - that being said let's pull in our blocks
111:49 - let me again show you what our block
111:52 - content looks like so if i go back into
111:54 - the studio
111:55 - so pineapple smoothie if i come down
111:57 - here we have our instructions if i click
111:59 - on these three dots and do inspect
112:03 - we see in instructions
112:05 - type block and we have
112:09 - you just kind of collapse
112:11 - some of these
112:13 - so we have three items in the
112:16 - instructions that are block type okay
112:18 - this first one
112:20 - so see how it says type block if you go
112:22 - into children
112:24 - the marks the text is put all
112:26 - ingredients into a blender so that's our
112:28 - first block our second block is
112:32 - in children
112:33 - blend on high for one minute and our
112:35 - third block
112:36 - is
112:37 - serve chilled
112:38 - so it's grabbing all of those blocks and
112:42 - this is what we see here but the rich
112:44 - text editor this is where we edit all of
112:46 - that and we can do like bold italic and
112:48 - it will show up that way on our front
112:50 - end so it will take that styling with it
112:53 - now if we go back
112:55 - portable text takes in blocks and then
113:00 - it will take in recipe
113:02 - dot instructions
113:04 - save that and we should get all of the
113:06 - instructions
113:08 - blocks
113:10 - and that should be displayed so let's go
113:12 - back
113:14 - to cap's kitchen
113:15 - so at cap's kitchen we'll go click on
113:17 - pineapple smoothie and we should see
113:21 - our blocks and they're displayed just as
113:24 - we had in that rich text editor
113:26 - strong
113:27 - emphasis
113:28 - and yeah if i wanted to
113:32 - bold the chilled part
113:36 - bold
113:37 - publish that
113:40 - and then
113:41 - there it is
113:42 - sort of chilled with bold strong until
113:46 - and that is our template
113:49 - now what is left
113:51 - is styling because very large image and
113:55 - then that so what we're going to do is
113:57 - we're going to put them next to each
113:58 - other
113:59 - so let's
114:01 - do on
114:02 - main
114:04 - let's do an article we'll do
114:07 - class name is equal to
114:10 - recipe
114:11 - on main we'll do
114:16 - class name is equal to
114:18 - content
114:21 - and then this div
114:26 - we will do
114:28 - breakdown
114:29 - this unordered list will get a class
114:32 - name of
114:34 - ingredients
114:36 - and then this list item will get a class
114:38 - name of
114:40 - ingredient
114:42 - so singular
114:43 - and
114:47 - portable text
114:49 - we'll get
114:51 - a class name that is
114:54 - instructions save that
114:57 - and
114:58 - something that i forgot on our images is
115:00 - we want to have alt on our images so
115:03 - we'll do alt is equal to recipe dot name
115:08 - yeah and then we should do that on
115:10 - index.js
115:12 - right where's my image
115:14 - right here
115:16 - we'll do alt
115:17 - equal to whoops
115:20 - it's equal to recipe dot
115:23 - name
115:25 - save that
115:27 - and
115:29 - yeah
115:30 - let's go style and then we'll go look at
115:32 - it
115:33 - so we'll go to global css okay so we're
115:36 - going to come down here
115:38 - and we're going to start with recipe the
115:40 - h1
115:42 - and we'll do font size is 48 pixels
115:48 - font weight
115:50 - bolder
115:52 - color
115:53 - we'll do
115:56 - hash 00 and margin bottom 15 pixels
116:01 - all right and then underneath this
116:04 - we will do
116:06 - content
116:09 - open that up
116:10 - and display
116:12 - grid
116:13 - grid
116:14 - let me pull this up
116:16 - we'll do that
116:18 - whoops
116:20 - okay
116:21 - one fr and one fr so they're going to
116:23 - share the space
116:25 - and then we'll do a gap around them at
116:28 - 30 pixels
116:29 - coming out of that
116:32 - the recipe image will get border
116:36 - 0.5 pixels
116:39 - solid and then hash 444.
116:42 - then breakdown
116:45 - breakdown is going to have
116:48 - display grid
116:50 - grid
116:52 - template columns at 1 fr and three fr so
116:56 - like
116:58 - one and then
116:59 - three so like more space
117:03 - underneath here we'll give it a gap of
117:05 - 10 pixels and a border of 0.5 pixels
117:09 - solid
117:11 - hash 444
117:13 - underneath breakdown
117:16 - we'll do the ingredients so
117:19 - not plural or ingredient so plural
117:23 - and then we'll do list style
117:26 - none so it takes away that that uh
117:29 - that bullet point that comes up
117:32 - we'll do padding at 25 pixels and 10
117:36 - 25 pixels and 10
117:39 - pixels so all sides and then
117:42 - border
117:44 - right
117:45 - 0.5 pixels solid hash 444
117:50 - and then we have ingredient
117:52 - so now we're at the singular one
117:55 - ingredient
117:57 - and we'll do margin
117:59 - bottom of 15 pixels
118:02 - and then the last one
118:04 - is instructions
118:07 - and we'll do padding at 15 pixels
118:11 - save that
118:12 - and it should look pretty nice let's go
118:16 - look
118:18 - and it does i like how that looks
118:20 - so
118:21 - we got our image
118:22 - we've got
118:24 - our ingredients and like how much
118:27 - and then the
118:29 - instructions
118:31 - let's go back to cap's kitchen let's
118:33 - click on mango smoothie
118:35 - and it should have the same stuff and it
118:37 - does and looks great
118:39 - um
118:40 - yeah so
118:42 - you can style however you'd like
118:44 - but this is just kind of like a good
118:47 - start to styling a recipe
118:49 - page there's one thing i do want to add
118:52 - that
118:53 - we haven't done yet you don't have to do
118:54 - this but i added it to mine so i
118:57 - definitely want to show you all if you
118:58 - go to hero patterns
119:02 - here you can pick
119:04 - fun
119:05 - backgrounds
119:06 - and let's say you pick this piano one
119:09 - you can change the color of the
119:11 - foreground change the color of the
119:12 - background
119:13 - and
119:14 - the opacity of it
119:16 - then you grab the url
119:20 - i already have one so i'm just gonna put
119:22 - it in but this is where you can grab it
119:24 - um you would just get background image
119:26 - this whole thing and use that
119:30 - so
119:31 - i'm just going to grab that
119:33 - that css styling i'm just going to put
119:35 - it in if you want to add it you
119:37 - definitely can
119:38 - it is my background
119:40 - image
119:41 - and it is
119:44 - little foods
119:46 - very fitting for a recipe app but that
119:49 - is just something that if you'd like to
119:50 - add you can i think it's really nice
119:52 - it's just like a very slight opacity
119:55 - and yeah so you can add that if you want
119:59 - all right so
120:01 - slug.js is built out
120:05 - we have pulled in all the things that we
120:07 - need we have our query and remember i
120:09 - updated this
120:10 - and
120:11 - the main image so be sure to do that
120:14 - and in here we're passing in our data
120:17 - using it throughout
120:18 - our template
120:20 - mapping over our ingredients and the
120:23 - whole number and the fraction all that
120:25 - we have our portable text
120:27 - and then we have get static paths and
120:29 - get static props
120:30 - so with all that being done we are
120:33 - really using the power of next js and
120:36 - this file can really be built on you can
120:38 - have a lot of content going in through
120:41 - these two functions
120:42 - and then passing it into your
120:45 - your template a lot can happen with the
120:47 - get sag paths and the get static props
120:49 - with that being said i do want to move
120:50 - on to api routes within next.js so how
120:54 - we're going to do that is we're going to
120:56 - add a like button so a user on the front
120:58 - end can click a like button and it will
121:01 - update
121:02 - a number on the front end and then it
121:05 - will save to the content link and we'll
121:08 - be able to see that in the studio an
121:10 - updated like number so
121:13 - somebody clicks on the button
121:14 - it says
121:16 - plus one or
121:17 - one more than what it was before and
121:19 - then it patches that to the content lake
121:22 - and then updates the sanity studio so
121:25 - the front end facing of it so let's get
121:28 - working on that and let's get our api
121:31 - route set up in next
121:34 - okay so let's build that like button we
121:37 - do want to have some interaction with
121:40 - our users and the like button i think
121:42 - would be a perfect addition to this
121:44 - application
121:45 - so that button will live right
121:47 - underneath the
121:48 - pineapple smoothie right underneath the
121:50 - name of the recipe in the slug.js
121:53 - version of that
121:55 - recipe
121:56 - all right
121:57 - so
121:58 - we need to add some things because every
122:01 - time someone hits the like button it
122:03 - will be like a little button with a
122:04 - heart on it and every time they hit it
122:07 - it will increase
122:08 - for them they'll see the number increase
122:11 - but then
122:12 - that will save to the content link and
122:14 - then that will update in our sanity
122:17 - studio so we need to add that to our
122:19 - studio so that it can update somewhere
122:21 - and show us the
122:24 - current live number of our likes
122:26 - so we're going to go into
122:29 - within studio schemas go into recipe
122:32 - and at the very bottom
122:36 - right under instructions we're going to
122:38 - add
122:39 - name
122:40 - is
122:42 - likes
122:44 - title likes
122:47 - and then
122:48 - type will be
122:49 - number
122:52 - awesome and then we're going to set an
122:54 - initial value so outside the fields
122:56 - array we'll do
122:57 - initial value
122:59 - and set that equal to likes is zero
123:04 - awesome okay so let's go look in our
123:06 - studio to see if there is a
123:09 - likes spot now so we'll come
123:12 - here and it should be in our recipe
123:16 - because that's where we put it and sure
123:18 - enough there's likes so every time it's
123:21 - clicked and it's saved to the content
123:22 - link
123:23 - it will reflect here and we'll be able
123:25 - to see that
123:27 - then the last thing we need to do
123:29 - is add it to slug.js
123:33 - into our
123:34 - query
123:36 - so save that
123:37 - so
123:39 - now we're going to be working with api
123:40 - routes within next.js so api routes
123:44 - will live still where all the other page
123:47 - routes are under pages so these are our
123:50 - other routes
123:51 - api
123:52 - is
123:53 - where all of our api routes will live so
123:56 - when we did create next app it
123:58 - gave us the hello.js1 we're going to
124:00 - create our own one so under api do new
124:03 - file and we'll do handle
124:05 - dash like
124:06 - js
124:08 - now api routes will
124:10 - because they are serverless functions
124:12 - they are node functions they will run on
124:14 - the server side so
124:17 - every time this is hit it's going to be
124:19 - running
124:20 - pages api it's running the api route of
124:23 - our application
124:25 - so
124:26 - we need to pull in a couple things we
124:28 - need to do a couple things in here but
124:30 - let's take it one step at a time and
124:32 - we'll do it together so we do need to
124:34 - import the
124:36 - sanity
124:37 - client
124:39 - from
124:43 - libsanity awesome and then right below
124:46 - this we need to do sanityclient.config
124:51 - open that up and token
124:54 - right here
124:56 - token here
124:58 - so right here we're going to have a
125:00 - write token so every time it's clicked
125:02 - saved to the content link it will write
125:05 - to our client and update the studio so
125:08 - we will get that token in just one
125:11 - moment but let's continue on with this
125:13 - serverless function
125:15 - so then we'll do export default async
125:20 - function
125:21 - like
125:23 - button handler
125:25 - and we'll do rec
125:26 - so request and res response
125:29 - open that up and we'll do const id we'll
125:32 - set the id
125:34 - to
125:35 - json.parse
125:38 - rack.body
125:41 - oh i forgot the equal
125:43 - equals
125:45 - great and then we'll do const data
125:49 - equal to await
125:51 - sanity client and then we're going to
125:53 - chain on a number of things that allow
125:56 - for us to do what we need this like
125:59 - button to do so the sanity client can do
126:00 - a number of things and as we chain on
126:03 - some of the different functionality of
126:05 - it we will be able to update our like
126:09 - count
126:10 - i'm going to pull up the sanity
126:13 - client information on the this package
126:15 - but we are using the next sanity one i
126:18 - just wanted to
126:19 - show that it also can be used in the
126:21 - sanity
126:22 - slash client
126:24 - now if we come down here i want to take
126:26 - us to
126:29 - the patch update document okay so some
126:32 - of these we will be using so let's talk
126:34 - about them we will be using patch so
126:36 - document id to patch we will be pulling
126:38 - out the id
126:39 - we will be using
126:42 - increment increment field by count so
126:44 - every time someone clicks on it it's
126:46 - incremented by one
126:48 - and then we will do commit because we
126:49 - want to commit that
126:51 - we'll do
126:52 - a catch so any errors we're also going
126:54 - to be using
126:57 - right here set if missing so set if
126:59 - missing we will set likes to zero if
127:03 - there is if it's missing if the
127:05 - information is missing
127:06 - and then yeah that's all i wanted to
127:08 - cover here now let's go write it out in
127:10 - our serverless function
127:12 - so right here we'll do dot patch
127:15 - and we'll do the id
127:18 - we'll do dot set if missing
127:21 - and this we will set likes to zero
127:25 - then we will do increment
127:28 - we want this to be likes is one so it
127:31 - will increment by one every time it's
127:33 - clicked
127:34 - and then we'll do commit
127:36 - because we want to commit everything
127:38 - and then we'll do catch error
127:42 - oops
127:44 - catch error
127:46 - and then console. log
127:49 - error
127:51 - awesome so that is our chain
127:54 - for
127:55 - making this work then we're going to do
127:57 - res.status
127:59 - will be 200
128:01 - dot json
128:04 - and then likes will be data dot likes
128:08 - all right so i just wanted to also point
128:10 - out that we won't be doing any checks so
128:12 - we won't be doing a lot of security here
128:13 - um we will be keeping our token saved
128:16 - safe in an environment variable
128:19 - now
128:20 - to make this finally work we do need
128:23 - this token so remember when we were in
128:26 - manage and
128:27 - we
128:28 - went we saw our
128:30 - our project id we updated the course
128:33 - origins here is where that is where
128:37 - we're also going to get our token
128:40 - so let's go here and go to manage
128:43 - sanity.io
128:44 - switch to new version
128:48 - and then go back to
128:51 - our project
128:52 - so we're going to click on settings
128:54 - and then under api settings we're going
128:56 - to click on tokens
128:59 - and here we're going to add an api token
129:02 - so we can name it we'll do next recipe
129:05 - up like i have right here
129:07 - next recipe app and it will be read and
129:09 - write
129:12 - save that
129:13 - and here is the token by the time this
129:15 - goes live this token will be deleted but
129:17 - this is what it looks like i wanted to
129:19 - make sure you all saw this i'm going to
129:21 - copy this token
129:23 - and
129:24 - this is what we're going to use in our
129:28 - env file
129:30 - so we're going to come back here so
129:32 - let's collapse all of these
129:34 - and we're going to do
129:36 - new file we'll do dot env dot local
129:40 - and in here we're going to call it
129:43 - and here we're going to call it sanity
129:46 - write
129:47 - token equal that
129:49 - and paste that in
129:52 - save that and we're come to we're going
129:54 - to come to our get ignore and then here
129:56 - we're going to add
129:58 - env.local
130:00 - so when we push it to github this will
130:03 - not be pushed because we do want to keep
130:05 - this token safe
130:07 - but that's how it will look
130:09 - and
130:10 - again be sure to put it under your git
130:13 - ignore now with that being said
130:17 - let's go add that token
130:20 - so this will now be
130:23 - process
130:25 - dot env dot
130:26 - sanity
130:28 - write
130:29 - token
130:31 - save that okay so now our token is
130:34 - being used here and
130:36 - last thing we need to do is
130:39 - create that like button and
130:41 - get it to use all this functionality
130:43 - that we wrote that we wrote out
130:45 - so we'll go into slug so now that we are
130:48 - in the slug we need to add state because
130:51 - we are going to be using
130:52 - so import
130:55 - use
130:56 - state
130:58 - from react
131:01 - and then down here we are going to
131:04 - [Music]
131:05 - set our state for our likes
131:08 - so that our state can be updated as the
131:10 - user interacts with the like button so
131:13 - we'll do const
131:16 - likes and set likes
131:19 - and we'll set that equal to use state
131:22 - and if there's data and if there's a
131:24 - recipe
131:26 - get the likes
131:29 - likes
131:30 - okay
131:31 - and then underneath that we're going to
131:33 - write out a function that uses
131:36 - our
131:37 - serverless function that we just made so
131:39 - we're going to do const
131:41 - add
131:42 - like
131:44 - equal async
131:48 - open that up
131:49 - const
131:50 - res
131:51 - await
131:52 - and then we're gonna fetch that slash
131:55 - api slash handle
131:57 - like
131:58 - come out of that
132:00 - and then within that we'll do a method
132:03 - post because we're posting we're
132:05 - updating
132:06 - and then body will be
132:09 - json.stringify
132:14 - and we'll do underscore
132:17 - id is recipe
132:19 - dot
132:20 - id
132:23 - okay and then right outside of this
132:26 - we'll do a dot catch
132:29 - error
132:31 - and we'll do
132:32 - console.log error
132:36 - and then underneath that we will do
132:38 - const data is equal to await res.json
132:42 - and then we'll do set likes
132:44 - and set that
132:46 - to be data.lakes
132:49 - okay
132:50 - so now let's use this function
132:52 - and let's
132:54 - make a button out of it
132:56 - so underneath the h1
132:59 - is where our button will live
133:02 - so we'll do
133:05 - button
133:06 - and then within here
133:08 - we will
133:10 - use the likes
133:13 - and we'll come out of here and we will
133:15 - add
133:16 - a heart
133:19 - save that
133:21 - and within our button
133:24 - let's give it a class name because we do
133:25 - want to style it class
133:27 - name is equal
133:28 - to like
133:31 - button
133:32 - and then we'll do an on click so
133:34 - whenever it's clicked
133:35 - use that
133:38 - function that we just wrote out the add
133:40 - like one
133:41 - up here
133:43 - all right so let's go style it and then
133:45 - let's go look at it
133:47 - so in styles as you guessed global.css
133:51 - let's add our like
133:52 - button styling
133:54 - so we'll do dot like
133:56 - button
133:58 - and then we'll do font size
134:01 - at 18 pixels
134:03 - display is flex
134:06 - align
134:08 - items center
134:10 - outline
134:11 - none
134:12 - we'll do background of none
134:15 - so we can see our fun background behind
134:17 - it
134:18 - and then we will do
134:20 - border radius so just giving it
134:22 - a little rounded edges edge
134:26 - five pixels
134:27 - border one pixel solid
134:30 - hash four four four
134:33 - padding we'll do six pixels
134:36 - and 12 pixels so all sides and then
134:39 - margin
134:40 - bottom 40 pixels and cursor
134:44 - pointer so people know that it's
134:46 - clickable
134:47 - okay
134:49 - oh and then i didn't save this let's
134:50 - save that
134:52 - and we should have a button let's
134:54 - restart our servers because we
134:57 - we did a lot
134:59 - so let's restart sanity to end it
135:01 - control c
135:03 - and then i'm gonna do sanity start
135:05 - and then for my
135:07 - next app same thing
135:10 - not sanity start uh npm run dev
135:14 - okay so that is now running now let's go
135:17 - back and we see a button
135:20 - um
135:21 - let's click on it and let's see what
135:23 - happens and we get a one okay
135:27 - now the big trick is was are was it
135:31 - saved to the content like and was our
135:32 - sanity studio updated and it was
135:35 - okay so everything's working and
135:37 - pineapple smoothie now has one like and
135:40 - if i click here again we should get
135:44 - two and we should have two
135:46 - okay so our serverless function our api
135:48 - route is all working
135:50 - and if we go to mango smoothie it should
135:52 - have nothing
135:54 - and then we should have
135:56 - let's go to mango smoothie
136:00 - click
136:02 - one
136:03 - and one
136:04 - okay so all of that is functioning
136:06 - correctly now our users are able to
136:09 - interact with our application
136:11 - and
136:12 - um
136:13 - yeah we have api api routes set up with
136:15 - our next application it's saving
136:18 - the
136:19 - the like every single time it's clicked
136:22 - to the content link sending that to our
136:24 - sanity studio and updating our likes
136:27 - field so
136:29 - it looks good now the last thing we want
136:31 - to do is we want to set up preview so
136:35 - for content editing
136:37 - it's a very quick live preview of edits
136:40 - happening in the studio onto the front
136:42 - end but let's get that all set up all
136:44 - right so the last thing we need to do
136:46 - before we
136:48 - push to github and deploy this
136:50 - is we are going to add preview so you
136:52 - might remember
136:54 - in
136:55 - top of this file the use preview
136:57 - subscription that came from the
136:58 - sanity.js file
137:01 - so now we are going to use it
137:03 - so we are going to be adding a couple of
137:05 - lines of code but those lines of code
137:07 - will do a bunch of stuff for us
137:09 - so the way we're going to use this hook
137:11 - this preview subscription is that if the
137:13 - preview is enabled we want to start
137:15 - listening to changes that's done in the
137:18 - content link and then replace whatever
137:20 - content you have on the page with that
137:22 - content
137:23 - and we can do that since next uses react
137:27 - so let's start with adding these lines
137:29 - to our slug.js file okay so we're going
137:32 - to come down here
137:34 - and we are going to pass in
137:36 - preview
137:37 - preview will come from down
137:40 - at the bottom of our page so in the get
137:43 - static props
137:44 - we are going to add in
137:46 - preview
137:48 - is true
137:50 - all right and then come back up here
137:53 - to
137:55 - at the top of the one recipe function
137:58 - and we're going to add
138:01 - const
138:04 - data
138:05 - and then set that to recipe is equal to
138:07 - and we're going to use
138:08 - preview subscription
138:12 - and then we're going to use the recipe
138:13 - query so that query that we wrote above
138:16 - open this up
138:19 - and
138:20 - we're going to set params
138:22 - to
138:24 - slug which is going to be data
138:26 - dot recipe if there's a recipe the slug
138:29 - dot current
138:31 - and we're going to do initial
138:33 - data set that to data
138:36 - and then enabled preview
138:39 - all right so let's talk about these so
138:41 - params here works the same as the client
138:43 - this is where we can dynamically add
138:45 - information to the query to find the
138:47 - correct recipe by its slug
138:50 - and then initial data is the data it
138:52 - should return before the real time
138:54 - updates start up
138:56 - so typically this is the data that comes
138:58 - through the props via get static props
139:00 - and then enabled here
139:02 - this controls if the preview should be
139:04 - activated or not so if you plan to put
139:06 - this to production you need to have a
139:07 - way for editors that are logged in
139:10 - to be able to activate the preview so
139:13 - that can happen through setting up an
139:14 - api route that redirects you to this
139:16 - page with preview enabled or some other
139:19 - way but next js does have a guide on how
139:21 - to set this up and you can of course
139:23 - join sanity slack community and ask
139:26 - there too we're just going to enable it
139:28 - from get static props for now and then
139:30 - we set up the index.js file to also be
139:33 - set up this way but we are only going to
139:35 - be focusing on the slug.js side of
139:37 - things so the clue here is to make sure
139:40 - that the shape of the object you pass to
139:42 - initial data is the same that you get
139:44 - out of use preview subscription
139:46 - and that's pretty much it so with all
139:49 - this set up behind the scenes this use
139:52 - preview subscription
139:54 - this hook
139:56 - knows if you're logged into your sanity
139:57 - project and if you are and preview is
140:00 - set to true
140:01 - then it goes and it fetches your whole
140:03 - content link in one request and then
140:05 - puts it into your browser's memory then
140:08 - it uses one additional request to set up
140:10 - a listener that creates a real-time
140:12 - connection to your hosted content link
140:14 - and updates the browser whenever there's
140:16 - been a change and we will see that live
140:19 - here in this course
140:21 - so then it re-renders the page component
140:23 - with the new content so that means it
140:26 - doesn't have to do a ton of api requests
140:29 - so since it uses this real-time
140:31 - connection you don't have to think about
140:33 - extra authentication for the preview as
140:35 - long as your editors are logged into
140:37 - their sanity studio so this is also why
140:39 - we needed to enable authenticated
140:41 - requests when we set up our course
140:43 - setting so you should only enable this
140:45 - for domains that you control the code on
140:47 - that's why we did here localhost 3000
140:50 - and when we
140:51 - when we deploy it we'll add that
140:53 - deployed url it's also possible to add
140:56 - the preview experience to the sanity
140:58 - studio so that your editors can access
141:00 - it in a more seamless way okay and then
141:02 - the last thing we need to do is we need
141:03 - to remove
141:06 - right here this const recipe data
141:08 - because now that is being taken care of
141:12 - right
141:13 - here for us so we got rid of that line
141:16 - and now that's all here so be sure to
141:18 - delete that line that was down here
141:21 - okay now that that is all saved let's go
141:23 - check it out
141:26 - okay so i'm going to pull my studio tab
141:28 - out
141:30 - and then let's just bring this over and
141:32 - we'll just do half screen for each
141:36 - for the
141:37 - next side and the studio side
141:41 - okay
141:42 - so
141:43 - let's see
141:44 - this do live preview updates so we'll
141:47 - click into mango smoothie
141:50 - and here we have mango smoothie the like
141:52 - button is still working we have two
141:55 - if we click again it will be three and
141:57 - that is updating down here so that's all
142:01 - happening but watch this so if i click
142:04 - into recipe name
142:07 - and right away we see the update
142:09 - happening so
142:11 - like i explained all before what's
142:12 - happening behind the scenes now we can
142:14 - actually see what's happening so if i
142:17 - wanted to say
142:19 - yogurt
142:21 - and mango
142:22 - smoothie
142:24 - there we go we do that and then we can
142:26 - do like let's add an item
142:29 - oh
142:29 - we'll just do pineapple um we'll do so
142:32 - see how pineapples showed up we'll do
142:34 - half
142:36 - of
142:37 - a cup of pineapple and as i'm working in
142:41 - the studio
142:42 - we're seeing that live update so then if
142:44 - we go to pineapple smoothie same thing
142:47 - we do recipe
142:49 - click on pineapple smoothie
142:51 - and
142:53 - we'll do maybe we don't want any mango
142:56 - so we'll delete that
142:57 - remove it and right away it is removed
142:59 - from our list
143:00 - so that is the preview that we have
143:04 - hooked up it was using
143:07 - or it is using the use preview
143:09 - subscription that we added to our
143:11 - sanity.js file and to recap what is
143:14 - happening here is
143:16 - it is saving the changes to our content
143:19 - link and replacing whatever content you
143:22 - have on the page with that content and
143:25 - because next is react we can do that
143:28 - so yeah using the use preview
143:30 - subscription creates this live preview
143:32 - update for us alright so now we have our
143:35 - entire application let's make this big
143:38 - again
143:39 - we have our entire application set up we
143:41 - have
143:42 - cap's kitchen taking us home we have two
143:44 - recipes and if we add it it would just
143:46 - keep tacking them on to this page
143:49 - we have pineapple smoothie and we have a
143:51 - like button that every time we hit it
143:53 - patches to our content link and that
143:56 - will then update our content in our
143:58 - sanity studio we have our pictures we
144:01 - have our ingredients we have our
144:02 - instructions now from here we go back we
144:05 - can go into mango smoothie and we have
144:07 - our
144:08 - information here as well and it's laid
144:10 - out all very nicely and if you
144:12 - joined me in adding this background
144:14 - image uh
144:16 - maybe you picked something else but i
144:18 - picked the popsicles and
144:20 - donuts and food so i thought it was very
144:23 - fitting for a recipe app and yeah it is
144:26 - all set up it's all good to go and this
144:29 - is a great starting point for
144:31 - any of your next applications we did
144:34 - uh dynamic routes we did regular routing
144:37 - index we did api routes we did styling
144:41 - we did a
144:43 - content back-end with sanity we saved
144:45 - everything to our content link and
144:47 - pushed it all to the sanity studio
144:49 - now what we need to do
144:51 - it needs to be pushed to github and it
144:53 - needs to be deployed so let's work on
144:56 - that and let's get that url so we can
144:58 - send our new next.js app to all of our
145:01 - family members so they can see all of
145:03 - our cool recipes and they can add likes
145:05 - to the ones that are their favorites so
145:07 - let's get working on that so before we
145:09 - move on from preview i did want to
145:10 - mention we haven't really dealt with
145:12 - draft documents in the code and how
145:15 - sanity currently works with draft
145:17 - documents so when you hit the like
145:19 - button when you're editing a document
145:21 - you won't see the number reflected in
145:23 - the studio
145:24 - it's of course possible for us to add a
145:26 - bit of code and logic to deal with this
145:28 - but the point here is to learn about
145:30 - next api routes
145:32 - so
145:32 - once we added preview because
145:36 - sanity created a draft document
145:38 - things might get a little
145:40 - off with the likes
145:42 - um you can remove the preview part of
145:44 - this if
145:45 - um you are not interested in learning
145:47 - further about this but if you are
145:49 - definitely keep it in and definitely go
145:51 - ask questions in the sanity slack
145:52 - community if you'd like to get get that
145:54 - all set up but
145:56 - um we wanted to cover next api routes
145:58 - and by keeping it simple we didn't dive
146:01 - too much into how draft documents are
146:03 - handled but just wanted to cover that
146:05 - and let you know that if you need
146:07 - further help definitely hit the sanity
146:09 - slot community and
146:11 - remove it if you just don't want it
146:13 - now the last thing we need to do is in
146:15 - slug.js and i wanted to point this out
146:17 - so we have fallback
146:20 - set to true so because fallback is set
146:22 - to true i wanted to point something out
146:24 - that next
146:25 - wants from us
146:27 - i want to paste this in
146:29 - we need to create so this is the
146:31 - document or the docs fallback pages
146:34 - because
146:35 - it's set to true because
146:37 - we have that in our code we do need to
146:40 - have a loading page so as it's getting
146:42 - the data if the first time it runs there
146:44 - is none let's have a loading page and
146:46 - then it can continue running and then
146:48 - put in our data so we're going to add
146:52 - a line kind of like this
146:54 - if the page is not yet generated it will
146:56 - display this loading page so we're going
146:58 - to go back to our slug.js
147:00 - so right here we're going to do const
147:02 - router
147:03 - is equal to use router
147:06 - and underneath we'll do if
147:10 - router dot is fall back
147:13 - open that up and return div that says
147:17 - loading
147:18 - dot dot and then we need to bring in the
147:20 - use router above
147:22 - come down here
147:24 - and we'll do import
147:26 - use router
147:29 - from
147:30 - next
147:31 - router
147:33 - and that is it that's all we need
147:36 - all right so to get this now pushed to
147:37 - github we are going to come into our
147:39 - terminal
147:41 - we're going to do get init all right and
147:43 - then we are going to go to our github so
147:47 - go to your github and click on new for
147:49 - new repository and here we are going to
147:51 - name our repository so that's where i'm
147:53 - at we're going to do next
147:55 - recipe
147:56 - app come down here i'll make it public
147:59 - so all of you can see this code
148:02 - and then come to the very bottom and
148:04 - click create repository
148:06 - so it's going to create it and we've
148:08 - already done the get in it we are just
148:10 - going to follow down these instructions
148:12 - so git commit dash m
148:15 - get commit
148:16 - dash m we'll do first commit
148:20 - and there's all of our file files and
148:22 - folders that need to be
148:24 - committed get branch dash m main
148:28 - git branch dash m main
148:31 - awesome and then back here we are going
148:34 - to copy this whole thing
148:37 - so that we can direct it to the correct
148:39 - repository
148:40 - hit enter
148:42 - so we're going to add all these so we're
148:44 - going to do git add space period to add
148:46 - all of them get status and we see all
148:49 - them that are added in so then let's do
148:51 - git commit dash m
148:54 - recipe
148:56 - app
148:57 - hit enter
148:58 - and we'll do git push
149:00 - origin main
149:02 - and that is going to push and now
149:04 - if we go back
149:08 - to this
149:10 - we should see
149:11 - recipe app so now we have all of our
149:14 - code saved into our next recipe app
149:17 - repository so let's go deploy it so
149:20 - let's do our back end first so to deploy
149:23 - our sanity back in we are going to i'll
149:26 - just add another one here i actually
149:28 - don't need to pull that down
149:30 - we will cd into studio
149:33 - and we are going to run the command
149:35 - sanity
149:37 - deploy
149:38 - it's going to ask us a series of
149:39 - questions so studio hostname this needs
149:42 - to be unique um we'll do
149:46 - uh
149:48 - caps
149:49 - kitchen for mine uh so make sure you
149:52 - choose one that's not cap's kitchen
149:54 - because that one is taken
149:56 - and it's available so
149:58 - lucky for me
149:59 - so it's building that out now if you
150:02 - wanted to
150:03 - undeploy this you could do sanity
150:05 - undeploy and that would refer all this
150:08 - but while that deploys
150:10 - we are going to have our studio now live
150:12 - at cap's kitchen dot
150:15 - sanity.studio and we will have a
150:17 - deployed version of our
150:20 - back end of our studio
150:22 - uh our content link is going to be
150:25 - living here and
150:27 - it is ready success
150:29 - so we could click on this
150:31 - but i want to go type it in caps
150:33 - kitchen.sanitylstudio
150:35 - capskitchen.sanity.studio
150:40 - enter
150:41 - and
150:44 - here is our
150:46 - deployed studio so we have all of our
150:48 - stuff chef ingredient
150:51 - recipe everything that we put in there
150:53 - is
150:54 - now deployed now whenever you need to
150:57 - like
150:58 - update something or you're working on a
151:00 - team if they have access to this studio
151:03 - if they have access to the content link
151:05 - that is cap's kitchen then
151:07 - they will have access here and then they
151:09 - can go in they can edit stuff you can
151:11 - see your team working there's the
151:12 - presence api up here um their avatars
151:15 - would show up if they're hanging out um
151:17 - but yeah that is our deployed back end
151:20 - now let's go deploy our front end so
151:22 - we're going to come to for sale i've
151:23 - already logged in and i already have
151:26 - searched for the repository so all you
151:29 - got to do is pick the organization and
151:32 - search for um
151:34 - your repository so i did the next recipe
151:36 - app because that's what we named it and
151:38 - i have found it now we are deploying to
151:40 - versailles it's a deployment platform
151:43 - for front-end developers so we are
151:44 - deploying our front end to versailles
151:47 - and let's see how this goes
151:49 - so we're going to click import
151:54 - now project name we can name this
151:56 - anything we want i'm going to keep it
151:58 - next recipe app
151:59 - you can change this here it is root
152:02 - directory
152:03 - now
152:05 - we don't want to change any of these
152:06 - these will just stay as is but
152:08 - environment variables we do need to
152:11 - bring in that right token so i'm gonna
152:12 - do sanity
152:14 - write
152:15 - token and let's go get that
152:18 - so it is underneath our env local
152:22 - let's copy this whole thing
152:25 - and then come back here and paste that
152:27 - in
152:27 - we're going to add it
152:29 - now it's encrypted and it's in there so
152:31 - now
152:32 - even though the dot unv was
152:35 - not pushed to github
152:37 - next is vercell is going to see it
152:40 - because we've added it here and
152:43 - yeah we're good to go so i'm going to
152:44 - hit deploy and fingers crossed
152:47 - everything goes well
152:49 - and we'll have a deployed app
152:51 - that we can
152:53 - send the url to all of our family
152:55 - members and they can see all of our
152:57 - recipes and they can like all of the
152:59 - recipes because they're going to like
153:01 - them no matter what they're going to be
153:02 - delicious
153:03 - and
153:05 - it's deploying fetching the source code
153:08 - building
153:10 - so we could be watching the build
153:12 - and it looks like it's going well
153:16 - okay so it's continuing to build and it
153:18 - should be
153:20 - not too much longer and we will have our
153:23 - deployed front end and back-end we
153:24 - already have the back-end
153:26 - and congratulations
153:28 - okay so our app is now deployed
153:32 - we can hit visit and it should open up a
153:35 - new tab and it has our
153:37 - whole application
153:39 - and we can click into things and we can
153:41 - see
153:43 - what do we need to do we need to tell
153:45 - manage.sanity.io
153:47 - that this is a trusted
153:50 - url so i'm going to copy this i'm going
153:53 - to go to manage
153:58 - and in here studio
154:01 - settings
154:03 - course origins and we need to add this
154:05 - one so notice how our sanity.studio was
154:08 - added
154:09 - um we don't need to worry about that but
154:11 - we need to add the versailles side so
154:14 - paste that in there allow credentials
154:17 - save
154:21 - and oh yeah there it is awesome we'll
154:24 - come back to cap's kitchen
154:26 - and if
154:27 - it all worked then we should be able to
154:29 - click in and there we go
154:31 - all right so now everything is working
154:33 - everything is deployed if i hit the like
154:35 - button
154:38 - and then i go to my deployed
154:41 - cap's kitchen what did i hit like on
154:42 - pineapple smoothie
154:44 - and i go to pineapple smoothie i should
154:47 - see four four likes awesome so
154:50 - everything is working and we have it to
154:52 - github we have it deployed to versailles
154:55 - for the front end sanity for the for the
154:57 - back end and you can
154:59 - use that url you can do
155:02 - with this app as you'd please but you do
155:04 - now have a good knowledge base on next
155:07 - js so you can take this however far you
155:09 - want or build another next.js
155:12 - application and take it however far you
155:13 - want and yeah i think it turned out
155:15 - pretty great first of all thank you
155:18 - thank you for sticking around thank you
155:20 - for going through all this with me and
155:21 - great work everyone on this
155:24 - amazing next js application that we've
155:26 - built we've looked at how to set up next
155:29 - and the overall structure we've looked
155:31 - at how next uses file based routing
155:34 - we've explored how we can do performant
155:36 - linking between views in next we have
155:38 - touched on styling and how to change the
155:40 - meta tags and how to deal with static
155:42 - assets
155:43 - now our recipe app wouldn't be much if
155:45 - we didn't use any recipes so we used
155:47 - next powerful data fetching functions
155:50 - get static props and get static paths to
155:53 - handle getting that recipe content for
155:55 - us and pre-render whatever recipes we
155:57 - had to give all of our visitors a faster
156:00 - and neater experience now we have also
156:02 - learned about how we can get up and
156:04 - running with structured content using
156:06 - sanity.io so we have configured sanity
156:08 - studio to make a custom way of entering
156:11 - the recipe info into a structured manner
156:14 - so that we can pull it from our content
156:16 - link
156:16 - and put it onto our nexjs app we have
156:19 - also learned about nexjs api routes and
156:21 - that lets us quickly set up serverless
156:23 - functions to handle business logic for
156:25 - us without any configuration we use some
156:28 - business logic to make a like button
156:30 - remember
156:31 - and that patches an integer in the
156:33 - recipe document to our content link and
156:35 - we added that interactive feature to our
156:37 - app in about 10 minutes so really great
156:40 - and lastly we set up real-time preview
156:42 - in less than 10 lines of code which lets
156:44 - authenticated editors see how the
156:46 - content is presented before pushing it
156:48 - to production this was possible because
156:51 - sanity.io's content link is built to be
156:53 - real-time from the ground up and because
156:56 - next.js uses react that lets us trigger
156:59 - re-renders in the browser when something
157:01 - changes
157:02 - now next steps next next steps to
157:06 - advance so you should know enough to do
157:08 - useful stuff with nexjs there's still a
157:10 - lot that we haven't really touched too
157:12 - much on and although the people behind
157:14 - next.js spend a lot of time to make it
157:16 - performant there's still things that we
157:18 - can do to optimize it we haven't done
157:20 - too much with the seo of this app but
157:22 - there are many ways to leverage next.js
157:24 - and the structured content we get out of
157:26 - sanity to make that happen
157:28 - and we have barely touched on the
157:29 - surface of what we can do with the
157:31 - combination of serverless functions api
157:33 - routes and the content link both in
157:36 - terms of adding interactive
157:37 - functionality but also comes to making
157:39 - it secure and resilient in a production
157:41 - app so if you want me to make a more
157:43 - advanced course on next.js let me know
157:45 - in the comments below again thank you so
157:48 - much for hanging out thank you so much
157:49 - for building this app with me i think it
157:52 - turned out really good i like it but i'm
157:54 - excited to see where your applications
157:56 - go how you design it because
157:59 - my css doesn't have to be your css and
158:02 - where you take this recipe app to
158:05 - so if you'd like you can send it my way
158:07 - i am on the slack uh for sanity and you
158:11 - can also find me on twitter at copej
158:14 - underscore okay my dms are open and i
158:16 - would love to see your deployed recipe
158:19 - applications
158:20 - again thank you so much for hanging out
158:22 - and i will see you around