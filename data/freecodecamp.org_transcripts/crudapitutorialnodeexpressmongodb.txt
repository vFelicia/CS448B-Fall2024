00:00 - this is a great beginner's course to
00:01 - learn the basics of backend development
00:04 - by building a crud API with node Express
00:08 - and
00:09 - mongodb basically the M Stack without
00:12 - the r Harris ifar created this course he
00:15 - is a popular instructor and experienced
00:18 - developer today we're going to be
00:19 - building a complete restful crud API
00:22 - from scratch using no JS Express and
00:25 - mongod DB so over here we're in Visual
00:27 - Studio code make sure you have it
00:29 - downloaded I already have have it and
00:30 - you also make sure you have nodejs
00:32 - installed so just go to nodejs.org and
00:35 - install this latest support version and
00:37 - then just click on all the installation
00:39 - steps and once you have it you could
00:41 - test it out using CMD and just type in
00:44 - the following you could just say node
00:46 - hyphen hyen version and this should tell
00:48 - you whether you have node installed or
00:50 - not and now once we have everything
00:52 - ready we can now go into our project so
00:55 - essentially what I'm going to do is I'm
00:56 - going to create a simple crud app folder
00:58 - over here and in here we're we're going
01:00 - to do is we're going to open up CMD so
01:01 - just go here and type in CMD and go in
01:04 - this and you could just type in code and
01:06 - Dot this would open up into that same
01:08 - directory so now we have everything
01:09 - ready okay so now what we're going to do
01:11 - first of all here is I'm going to zoom
01:13 - in a little and I'm going to actually uh
01:15 - do the following first of all uh what
01:17 - we're going to do is we're going to open
01:18 - up the terminal using control and back
01:21 - tick is the shortcut key and over here
01:23 - you could have the command specified so
01:25 - the first one you want to do is you want
01:27 - to type in init hyphen y so npm in it
01:30 - hyen y to initialize uh some
01:32 - package.json now you could see that this
01:35 - has been written and if you open up you
01:36 - could see that this is the package.json
01:38 - file over here and it has the name which
01:41 - is simple crud app it got from my folder
01:43 - name so you can see over here after that
01:45 - you could see if I put it on the right
01:47 - side over here and just open this up um
01:50 - or maybe my folder on the left side so
01:51 - let me just open that up and put that uh
01:55 - over here so let's let's do like this
01:57 - now you can see in the version is 1.0.0
01:59 - zero and then the description is nothing
02:01 - and then the main is index.js and then
02:04 - we have the scripts we have right now
02:06 - just test and right now there's nothing
02:08 - here and then only Echo error no uh T
02:12 - Test specified and then exit one
02:14 - keywords are an empty list an author is
02:17 - you know nothing and then license is ISC
02:19 - so what we're going to do is now we have
02:21 - all of this done we can now um basically
02:24 - create our um
02:26 - server.js file which is going to be
02:28 - inside of this place
02:30 - so what I'm going to do is I'm going to
02:32 - open up this into some little maximum
02:34 - screen and over here I'm going to create
02:36 - a new file which is going to be called
02:38 - index.js right main index.js this is
02:40 - going to be actually the brain of our uh
02:42 - backend so over here this is the
02:44 - index.js file and make sure like uh you
02:47 - just created it now if you want to you
02:50 - know write anything like suppose console
02:52 - console.log and you just say let's
02:54 - suppose hello there now if I if I write
02:57 - this right I want to actually run it to
02:59 - run it you could actually use that same
03:01 - terminal and if you just type in node
03:04 - and then you say
03:05 - index.js now one second I didn't save it
03:08 - over here so you see now it's saved the
03:10 - circle is gone and when I do this you
03:12 - can see that it's running but what I
03:14 - want to do is I want to actually use
03:16 - package.json to use this file so to do
03:21 - that all I have to go is within this um
03:24 - you know within this file which is in
03:26 - the scripts um and then it has this
03:29 - object which has test what you could do
03:31 - is you could just add in comma and just
03:33 - add in one more which is going to be
03:35 - called serve and the value to this would
03:38 - be node and then we' have index.js all
03:42 - right so this is going to be for now
03:45 - specifically this command now if I just
03:47 - have go back to my terminal and say npm
03:50 - run serve it would still run this exact
03:53 - file because I actually told
03:55 - package.json that whenever I use the
03:57 - serve npm run serve it should run that
04:00 - command so you can see there hello there
04:02 - has been run okay and then you can see
04:05 - over here that simple crud app and then
04:07 - node index.js basically it it did the
04:10 - same command that we did before node
04:12 - index.js and it ran this command and you
04:14 - can see the results over there really
04:16 - nice so far so now what we want to do is
04:19 - now that we have our package.json and
04:21 - index.js we want now to install our
04:25 - framework which is going to be Express
04:27 - for the backend so let's just go to the
04:28 - website and it's actually going to be
04:30 - called um we have to go to the
04:35 - npmjs.com website and you could see over
04:38 - here there's every single thing that you
04:40 - need to know about uh npm uh
04:42 - dependencies and uh you know libraries
04:45 - so what you could do is over here you
04:47 - could have the Express framework just
04:49 - typed in if you type in Express and
04:51 - press search what's going to happen is
04:53 - that it's going to give you this exact
04:55 - match so when I'm going to click on this
04:57 - you could see this is the official
04:58 - Express framework which is actually
05:00 - going to be used to build our node API
05:03 - server and that's why we're now we just
05:05 - created uh this but we have to create
05:07 - this node API server so over here you
05:09 - can see that you could use this command
05:10 - to install this so just copy this from
05:12 - the clipboard and now you could go back
05:14 - to this Visual Studio code and make sure
05:16 - you just right click here and you know
05:19 - um it should press enter and then you
05:22 - know it would install Express now once
05:24 - you see you could see node modules
05:26 - folder populated and also a package lock
05:29 - uh Json so you can see p package hyen
05:32 - lock. Json over here existing and what
05:35 - one more important thing that you saw
05:37 - over here is this node modules so this
05:39 - node modules will contain all of the
05:41 - dependencies and libraries that we'll be
05:43 - installing within our application uh but
05:45 - right at the moment if you go to the P
05:48 - package.json file now you'll see that in
05:51 - the dependencies we have Express and
05:53 - that means we have installed Express
05:54 - successfully so that's amazing now we
05:56 - have Express in our application we could
05:58 - actually use it border plate code to
06:00 - test it out whether it's working or not
06:02 - so just go in there and just go in here
06:04 - and you can see this is const Express
06:06 - require Express and then this initialize
06:08 - the app and then what you could do is
06:10 - you could just uh call this hello and
06:12 - then you could essentially do this so
06:14 - I'm going to copy these two lines up
06:16 - here and I'm going to go and replace
06:18 - this with this so I'm going to have on
06:20 - Express isal to require Express and over
06:22 - here we have app and we have
06:25 - Express so right after this is what
06:28 - we're going to do is we're going to just
06:29 - try to um we're just going to try to uh
06:32 - run this so running it is pretty simple
06:35 - and simple easy all we got to do is you
06:37 - know we're going to try to listen it so
06:38 - we're going to say
06:40 - listen for which Port so we'll say by
06:43 - default we'll say 3,000 port and we'll
06:46 - say you know for that particular Port
06:48 - what you have to do is you have to
06:51 - console.log one minute so
06:53 - console.log now you might be seeing that
06:56 - there's a lot of things going on here I
06:58 - have co-pilot and that's why uh you know
07:00 - it's giving me suggestions so now you
07:01 - could see over here server is running on
07:03 - Port 3000 when I press tab it just
07:05 - autocompletes it so now you could see
07:07 - that ab. listen 3000 and then you could
07:09 - see whenever I go to this 3,000 it
07:12 - should have this message on the console
07:14 - screen so if we want to do this and you
07:17 - want to see it so let's just go and you
07:20 - know visit so but before that if uh what
07:24 - we have to do is we have to uh run this
07:27 - application so right now it's uh app.
07:31 - listen and uh you know it's going to now
07:33 - say server is running on Port 3000 so
07:36 - we're going to do npm run serve again so
07:38 - npm run uh
07:42 - serve and if you could see it you could
07:45 - see Server is running on Port
07:46 - 3000 which is awesome now our this uh
07:50 - node Express uh back end is running on
07:53 - Port 3000 which is
07:55 - fantastic so right here right after this
07:58 - and we're going to say
08:01 - app.get and we'll have this forward
08:04 - slash right and in here we have request
08:06 - and response now these are two things
08:09 - whatever the client sends to the uh
08:12 - server is the request and whatever
08:14 - response comes back from the server is
08:17 - basically the response rest so uh the
08:20 - client is basically on the browser and
08:22 - I'll show and explain everything if
08:23 - you're not following along right now so
08:25 - if you could see over here um I actually
08:28 - had app.get and then over here we had
08:31 - the Slash and over here we had requ
08:33 - request and response now over here we
08:36 - have this bracket right but we forgot to
08:38 - close this round bracket which is right
08:40 - here and now this is all complete but we
08:43 - want to do is that whenever we visit
08:44 - this default page we want to throw out a
08:47 - response from the server right from our
08:49 - server saying response. send and we'll
08:52 - say uh hello and then we'll say hello
08:57 - from node a API if I do this this means
09:01 - that the response is coming from the
09:02 - node API and this is going to appear if
09:06 - we run this uh you know on on our
09:09 - machine so essentially if we go to the
09:10 - Local Host Port 3000 it would work so
09:13 - let me go here and you could just type
09:15 - in Local Host and then we say Port 3000
09:19 - um and you'll see that right now it's
09:22 - not uh it cannot get the thing so we had
09:25 - to basically turn off our server
09:27 - whenever we make changes and then we
09:29 - have to run npm run serve again because
09:32 - I actually added what I had what just
09:35 - server is running on Port 3000 so once
09:37 - everything was there um and you know
09:41 - this hello from node API with the slash
09:43 - this is what the response is sending but
09:45 - this is just on the console screen so
09:47 - now if I run this you'll see this is on
09:49 - the console screen which is this one but
09:52 - this is coming from the node API and
09:54 - this should come uh through our browser
09:57 - or something so if I go and visit this
09:59 - port 3000 on Local Host there
10:02 - essentially you could go here and you
10:04 - basically if you refresh to the page
10:05 - with Local Host Port 3000 you'll see
10:07 - hello from node API the response that's
10:10 - coming back from node API this is
10:11 - amazing and if you want to see it
10:13 - through Thunder client or something just
10:14 - type in HTTP and then call in two sles
10:19 - localhost Port 3000 and then if you do
10:22 - this you'll have to make sure you have
10:24 - get and when you press send you'll see
10:26 - that the status is 200 means it's okay
10:28 - and then you'll see the size 19 bytes uh
10:31 - time which is 2 milliseconds and the
10:33 - message hello from node API which is a
10:35 - success now these are some tools that we
10:37 - could use to test our apis which is
10:39 - thunder CLI a really popular extension
10:42 - in node.js which is highly recommended
10:44 - you could also go and test out using
10:46 - insomnia so we're going to go to
10:48 - insomnia uh it's a software so insomnia.
10:51 - rest if you go there this is uh the
10:55 - website that uh essentially design debug
10:58 - and test apis locally or in the cloud so
11:01 - get started for free make sure you
11:04 - select this one which is $0 per month
11:07 - and you could actually uh continue with
11:08 - your Google account uh we could
11:11 - subscribe to the free plan and just say
11:14 - subscribe you are one step away from
11:16 - improving your API and then we could
11:18 - actually get started with insomnia to
11:20 - get started debugging and testing API
11:22 - download the latest insomnia desktop
11:24 - application so we just click on desktop
11:26 - for uh application for Windows or
11:28 - download for Windows and over here we're
11:29 - going to click on this it's essentially
11:32 - going to download this insomnia software
11:36 - and also there's one more software which
11:38 - is called
11:39 - Postman so if you go to post man.com
11:42 - you'll have this other software that you
11:45 - could use to test apis and essentially
11:48 - you could sign in or create an account
11:49 - for here as well so over here
11:52 - essentially you could use for Windows so
11:55 - you could just download the 64-bit here
11:58 - and this this is downloading as well so
12:01 - that's
12:02 - great essentially you could also uh you
12:04 - know sign
12:06 - up with your account it really doesn't
12:10 - matter um perfect so you can just allow
12:14 - access and this is your Postman
12:16 - interface all right so it's pretty
12:18 - similar and I'm going to explain this
12:20 - throughout this video so don't worry
12:22 - this is just how Postman looks like and
12:24 - also uh we're waiting for the last one
12:27 - which is insomnia
12:29 - so when I click on
12:32 - insomnia you'll see this uh pop up so
12:35 - we'll just wait until this is
12:38 - done and once it's done you could say uh
12:41 - welcome to insomnia the new version is
12:44 - the biggest one ever notable features
12:46 - and these are some of the new features
12:48 - now we continue keep uh storing locally
12:51 - in local Vault and enable Cloud sync and
12:53 - secur Cloud so one one collaboration
12:56 - with Cloud sync now available but we're
12:57 - going to keep storing locally in local
12:59 - Vault we could also now uh sign in so we
13:03 - could actually just uh continue with our
13:06 - Google account once you do you could go
13:09 - back hi coding cleverly and then you're
13:10 - back so authorizing insomnia and now
13:13 - you're back to insomnia so this is your
13:15 - personal workspace and this is how
13:17 - insomnia looks like awesome so now that
13:20 - we have all of this out of the way we
13:22 - can actually test our uh you know API so
13:26 - if I test it it's pretty simple
13:29 - we could go and you know to that Thunder
13:31 - client and you see remember this test
13:33 - that we've done exact same URL you just
13:36 - copy and you go into insomnia you could
13:38 - actually go over here and this is your
13:41 - you know personal project and you say
13:43 - new collection new document and what we
13:46 - say is
13:49 - new okay so we say my collection or
13:51 - we'll say node
13:54 - API and over here we're going to create
13:57 - that on once we're created we created
14:00 - that node API we could add some uh you
14:05 - know apis here so we have an uh you know
14:08 - add a add new folder and we could call
14:11 - it you know get and then we just create
14:15 - this folder and in here we could just
14:17 - have HTTP request and just paste in this
14:20 - and paste it from here and then you
14:22 - basically have the get option selected
14:24 - and you click on send once you do that
14:26 - you can see hello from node API this
14:28 - this is perfect now you could see that
14:30 - this is working and this is our get so
14:31 - we have this new request we could rename
14:33 - this as well so we have this new R uh uh
14:36 - we could just rename this and we could
14:38 - say this as uh get API all right and
14:41 - then we could just rename it and there
14:42 - you go this is our now uh first one so
14:45 - that's amazing uh this is how it works
14:47 - on insomnia and we're going to keep
14:49 - moving on forward with this
14:52 - perfect so right after you know testing
14:54 - it out through insomnia we're going to
14:56 - actually now have to go and and download
14:59 - a few important things one thing is we
15:02 - make sure you have git bash because
15:04 - we're going to be actually using uh
15:06 - things that we don't want to actually
15:08 - include so the first thing is we don't
15:11 - want node modules right so we use dot
15:14 - get
15:16 - ignore and for this purpose what you're
15:19 - going to do is you're going to go to
15:21 - downloads and you going to go to get
15:22 - bash if you go to get bash you'll see
15:26 - this one and you'll have to download for
15:29 - Windows over here and then also the
15:31 - installation step and everything and
15:32 - once you do you'll have to include it
15:34 - into the path just click on next and
15:36 - everything and then if you go and uh
15:38 - want to check if you have G you could
15:40 - just say G hyphen hyphen version and
15:43 - this should tell you whether you have
15:45 - get installed or not so that's perfect
15:48 - after that you could go back here and
15:50 - you could just into the um node modules
15:53 - you could just add in you know into the
15:56 - G ignore you could add in nodecore
15:58 - modules this means that this is not
15:59 - going to be included when it's going to
16:01 - be deployed on um you know it's
16:04 - basically going to be pushed to the repo
16:06 - so it doesn't include a node modules
16:08 - folder which is pretty bulky with so
16:10 - many things and now um we're we're done
16:13 - with that and now uh we have to do one
16:16 - more important thing and this is
16:18 - basically uh something very important to
16:21 - do so what I'm going to do is I'm going
16:23 - to actually uh you know show the
16:25 - screen we don't uh you know we don't
16:27 - have a mechanism of when changing
16:29 - anything so suppose if I say hello uh
16:32 - hello from node API uh for uh you know
16:36 - hello from node API server if I do this
16:39 - I go try to uh I mean if I try to go
16:41 - back and see the uh and I see the
16:44 - changes so I'm going to have to remove
16:46 - all of this and if I tried to see this
16:48 - uh you know reflection I try to refresh
16:50 - it but I don't see any change from here
16:53 - the problem is that I have to turn off
16:55 - the server and constantly restart it
16:58 - when whenever I make a change and then I
17:00 - could refresh the page and you'll see
17:02 - that change but this is not great we
17:04 - want to have this kind of mechanism that
17:05 - allows us to do this automatically and
17:07 - that's why U nodon comes in so we turn
17:10 - off our server and we install nodemon so
17:12 - what we type in is npmi we have nodemon
17:15 - and then hyphen D and if I do this you
17:18 - could go and see that this is would
17:20 - install nodemon and you could see where
17:22 - I uh brought this up from if I go to
17:25 - npmjs.com and if I type in node modon
17:29 - and if I search you'll see this one
17:31 - exact Mass simple monitor script for use
17:33 - during development of a nodejs app if I
17:36 - click on this you'll see this is how you
17:38 - install the npmi nodemon and that's what
17:40 - exactly what we did but we did hyphen D
17:43 - um so once we did that now what you
17:46 - could see is you could actually install
17:47 - it globally or you could also install it
17:50 - you know in a de development part so now
17:53 - you could actually verify whether you
17:54 - have it installed using in the
17:55 - package.json you'll see nodon is in the
17:58 - de dependencies which is perfect we
18:00 - still have Express in the dependencies
18:02 - and what we're going to do is um we're
18:05 - going to just put it into the script so
18:07 - index do uh so essentially in the
18:09 - package.json where the serve was right
18:13 - so you're going to add another one so
18:16 - over here we're going to have
18:17 - development and in here we're going to
18:19 - say node modon so I'm going after nod
18:22 - man and we say
18:24 - index.js this means now automatically it
18:27 - will reflect the changes and we don't
18:29 - have to now type in npm run server but
18:32 - we can now have npm run Dev and when we
18:34 - do this it's right now server is running
18:37 - on Port 3000 and you could see right now
18:40 - this is how my you know my response
18:43 - looks like but now even if I do any kind
18:47 - of change it's going to be reflected and
18:49 - it's going to show that you know the
18:50 - server is going to restart so let's see
18:52 - if I had the uh hello from node API
18:55 - server
18:57 - uh and we say updated and if you could
19:00 - see now what's happening is I didn't
19:02 - save anything right now the file isn't
19:04 - saved but when I press contrl s you can
19:06 - see the server restarting due to changes
19:09 - and then starting node index.js and then
19:11 - you can see it restarted and then you
19:13 - can see over here that I didn't refresh
19:15 - this browser page but when I do you
19:17 - could see that the refreshed uh result
19:20 - came here which is perfect now right
19:22 - after this success now we're going to
19:24 - actually try to connect a mongod DB
19:26 - database to our node JS backend so what
19:29 - we're going to do is we're going to go
19:30 - to no mongod db.com so we're going to go
19:33 - to mongod db.com so mongod dev.com Atlas
19:38 - if you go here you'll have to sign in
19:40 - with an account so I'm going to go here
19:42 - and make sure you it loads up we'll sign
19:44 - in and then you can see MB Atlas and
19:47 - over here we could sign in you could use
19:49 - your email address I'm going to use
19:50 - Google ooth uh and I've implemented
19:53 - Google oath in one of my videos on my
19:55 - channel so if you want to see how this
19:57 - is implemented using using nextjs or
19:59 - even JavaScript or even MN I could have
20:02 - a video available and you'll you'll see
20:04 - that process so now you can see over
20:07 - here I already had my mongod DB created
20:09 - but for you guys you'll have no projects
20:11 - so you can see that I have a couple of
20:13 - projects going on here so what we're
20:15 - going to see is we could just go and
20:17 - click on this button over here and say
20:19 - new project and once we have a new
20:20 - project you know we'll be introduced
20:22 - with some basic things and we'll just
20:25 - have to set
20:26 - up so now you can see over here we have
20:29 - the name of the project so you could
20:30 - just call it anything you want I'll call
20:32 - it node API all right so now when we
20:35 - have this is uh created we go next and
20:37 - we say add members and set permissions
20:39 - so we'll just give ourselves the uh you
20:41 - know permission and we'll say create
20:42 - project so once we do this it's going to
20:45 - create a project for us and now you'll
20:48 - see loading homepage now it says create
20:50 - a deployment so what we do is create
20:55 - and we'll have to go and deploy your
20:57 - database so we're going to have m0 which
20:59 - is the free one AWS is good uh Mumbai is
21:02 - okay and over here we'll have the name
21:05 - of the cluster you can name it anything
21:06 - you want I'll call it mine as backend uh
21:09 - DP it really doesn't matter you could
21:12 - just call anything you want and now over
21:13 - here we have uh you know crate so after
21:17 - that you know it's asking me what are
21:19 - the bicycles here I don't see any
21:21 - bicycle to be honest um so I'm just
21:23 - going to skip it and over here you can
21:25 - see motorcycle so this is motorcycle all
21:27 - over here
21:29 - okay great so now we have that you could
21:31 - see over here how would you like to
21:32 - authenticate your authentic uh
21:34 - connection so security quick start it's
21:35 - basically username and password we could
21:37 - add in our own username and password so
21:39 - I'm just going to have
21:41 - admin or you could just have
21:44 - simply uh this one and you could have
21:47 - your password set so you know you could
21:49 - actually update it yourselves but you
21:51 - know I'm just going to have this
21:52 - password saved somewhere so it's
21:54 - important to save your password
21:55 - somewhere so I'm just going to paste it
21:57 - right here and you'll we'll see that
21:58 - later on we'll actually use it so we'll
22:00 - just create user and then after that we
22:02 - have this uh username so we could just
22:04 - save this username as well essentially
22:06 - it's going to be in the connection
22:07 - string but I'm just adding it anyways so
22:10 - let's just put it over here so WR right
22:13 - here okay so now that we have all of
22:15 - that we could go back down here um and
22:18 - we have my local environment and over
22:20 - here we have IP address so connection
22:23 - this is my IP address but we want to
22:24 - allow it to access from anywhere on any
22:27 - device so we say 0.0.0.0 and then we
22:30 - could say allow
22:33 - from anywhere now this is uh you know um
22:37 - not compulsory description you could
22:39 - write anything you want and this IP
22:41 - address just had to add that and now
22:43 - when you do this you press add entry and
22:45 - this allows you to uh you know add this
22:47 - IP access uh list you know IP access
22:51 - list is updated with this particular
22:52 - thing and then you could just finish and
22:54 - close congratulations on setting up
22:56 - access rules we go to overview and now
22:58 - we will be able to see our database
23:01 - that's uh backend DB which is good now
23:04 - you could do is you could go to the
23:05 - database part here and over here we'll
23:08 - have to go to connect and over here
23:09 - we'll have to go to drivers or you know
23:13 - connect to your application so basically
23:15 - just go to drivers access your Atlas
23:17 - data using mongodb's native drivers so
23:20 - over here we could do is nodejs and 5.5
23:22 - or later just get the latest one npm
23:24 - install mongodb which is very important
23:26 - so let's go and first turn off our
23:28 - server so we'll just have this turned
23:30 - off and then what we do is we just
23:33 - essentially have this in and PM install
23:37 - mongod DB this will install mongod DB
23:39 - for
23:42 - us and once it's done you know we could
23:45 - have this uh connection string so this
23:48 - connection string is the thing that we
23:50 - need so let's go back here into our
23:52 - application and what we're going to do
23:53 - is we're going to uh try to uh access
23:56 - this so to do this it's pretty easy and
24:00 - pretty simple what we do is we go to um
24:04 - index.js and over here we have to import
24:06 - mangoose so if I go here you'll uh um
24:10 - into that you know there's a dependency
24:12 - Library which is called Mongoose and if
24:14 - you go to this uh npmjs so basically
24:18 - npmjs.com if you type in
24:22 - Mongoose this is the dependency DB odm
24:26 - so it allows you to access mongod DB
24:28 - pretty easily so just install this npmi
24:31 - Mongoose and we'll just go back here and
24:33 - we'll just paste this in here so now we
24:36 - could have Mongoose there as well now
24:37 - you could see over here um after
24:40 - installing Mongoose you could have you
24:43 - know this thing which is cost M Mongoose
24:45 - is equal to required Mongoose and then
24:47 - after that we have es6 um you know
24:50 - essentially you could use it like this
24:51 - as well import mango from so uh you know
24:56 - you could use any way you want
25:00 - um so I'm actually going to use this one
25:02 - so I'm going to put it right
25:08 - there and once we have Mongoose we could
25:11 - have now the part to just add it so this
25:14 - is the way we could connect the DB so we
25:17 - have over here uh this is the exact way
25:20 - to connect it so we basically say
25:22 - Mongoose doc connect and we have the
25:24 - connection string and then you know we
25:27 - allow things like that so let's go back
25:29 - here uh I don't know why this is there
25:31 - so we'll just leave it like that and
25:32 - we'll go back here and now in here what
25:35 - we're going to do is we're going to
25:38 - have we're going to
25:40 - have um Mongoose so
25:45 - mango. connect and then we'll put in the
25:48 - connection string here so connection
25:50 - string you already have uh you know that
25:52 - I already have it so it's in my
25:54 - clipboard Okay
25:56 - so
26:00 - so it's in my clipboard which is this
26:02 - thing
26:03 - and no
26:06 - no it's essentially this is the
26:09 - connection string now let's look at this
26:11 - a little more deeply this is the
26:13 - connection string that was copied from
26:15 - mongodb you can see this is my username
26:18 - and over here they gave me a section to
26:20 - add my password so remember that
26:22 - password that we saved you could
26:23 - actually just copy this
26:25 - one and just overwrite it with this one
26:28 - so you know paste it right here done now
26:31 - after that we have ADD backend DB so
26:34 - this was our you know um cluster name
26:37 - that we created and then over here we
26:40 - have um slash and right here mongodb
26:43 - Donnet slash we could add anything over
26:45 - here so we could just call it as our uh
26:48 - collection name so I'm just going to
26:49 - call it
26:50 - node um hyphen API so I'm just going to
26:54 - call it like this this is our collection
26:57 - name and right after that we have
26:58 - question and then right after that we
27:00 - have question and then we have retry wrs
27:04 - is equal to true and then we have n uh W
27:07 - is equal to majority so that's
27:09 - essentially it um and we could have this
27:13 - in a new line and say dot connect so dot
27:16 - connect and then when it's connected you
27:19 - could have a
27:21 - response that says if it's connected you
27:24 - could say connected to the database all
27:26 - right and then if it's not connected you
27:29 - could say do catch and then you could
27:32 - have this you know the same stuff so
27:34 - essentially you could
27:37 - have uh console.log connection failed so
27:42 - this is how we're going to connect to
27:43 - the database let's see the file is saved
27:46 - let's run the npm Run Dev and let's see
27:50 - if we are connected to the database or
27:52 - not and running and connected to the so
27:54 - server is running on Port 3000 and we
27:56 - are connected to the database now this
27:58 - is really good but the best way to
28:01 - actually uh you know go around this is
28:04 - you can see that first of all we want
28:06 - our uh database connected and then we
28:08 - want the server to be running the
28:10 - database connected and then we have
28:12 - servers running on Port
28:14 - 3000 so that's basically uh the way to
28:17 - go now let's just
28:19 - refresh
28:20 - and turn off the server and restart it
28:23 - again so npm runev so you can see right
28:26 - now we have connect to database and then
28:28 - server is running on Port 3000 it's just
28:30 - another way to do it it's totally fine
28:32 - if you want to do the other way but I
28:35 - actually first try to connect to the
28:36 - database and then you know uh we try to
28:41 - run our server that we have our database
28:43 - fully connected we want actually a model
28:46 - and a model is essentially something
28:48 - that we could use to store data into our
28:50 - database and we want to store some
28:52 - products all right so everything that
28:55 - you want to store that it has to be a
28:56 - model of some some kind that our nodejs
28:58 - application could use and then you could
29:00 - use it to send it to the database so
29:02 - that it could store it there so what we
29:04 - have to do is right here we have to
29:05 - create a model so let's go here and we
29:06 - could use uh close all and right here
29:09 - you could just CL click on this to
29:10 - collapse everything and then after that
29:12 - over here you could just create a um you
29:14 - know essentially a folder here so we
29:16 - could just create a folder inside of
29:18 - this directory and we could call this as
29:20 - models so models and then in here we
29:23 - could create our model and we have a
29:24 - particular naming convention and I could
29:26 - and I could
29:27 - product so do model. JS if I use this
29:32 - naming convention it's still all right
29:35 - and this is just good to remember like
29:37 - this is the model so we're going to use
29:38 - Mongoose to create our uh model so
29:42 - Mongoose uh is equal to require Mongoose
29:45 - cons Mongoose is equal to require
29:47 - Mongoose and then over here we're going
29:48 - to use our uh you know product schema
29:51 - we're going to create so we're going to
29:53 - say product
29:54 - schema is equal to mango. schema
29:58 - and in here we have uh essentially this
30:01 - stuff okay and this is the thing that we
30:03 - have to put in so over here
30:06 - um okay so over here we have this and I
30:11 - just want to make sure that this is the
30:13 - object and in here it's going to contain
30:15 - everything so like this so over here
30:17 - we're going to have either name all
30:19 - right so we're going to have name and
30:21 - then we could have uh you know something
30:23 - like type and we could say you know it's
30:26 - a string type name of the product and
30:29 - then we could have a required field and
30:31 - we could say that it's true
30:34 - right it's it's required you can't have
30:37 - a product without a name and then you
30:39 - could
30:40 - have um you know a me message you know
30:45 - like that allows you to enter a product
30:47 - L please enter product name so that's it
30:50 - and then after that we essentially we
30:53 - would have a comma here so you could you
30:55 - don't there's no necessarily need but
30:57 - you could just add it in case uh right
30:59 - here we have is the name and after that
31:01 - we have the quantity so essentially over
31:04 - here we'll have the
31:06 - quantity
31:08 - quantity and over here you could see
31:10 - that we have Colin and then over here
31:12 - we'll have type and here we'll have a
31:15 - number for the product so let suppos
31:18 - number and over here required will
31:21 - be um required will be
31:25 - true and you know we could also have
31:28 - default value for the quantity as
31:31 - zero and then we could just put a comma
31:33 - here so essentially there's no need of
31:35 - commas at the end so you could just uh
31:37 - for these types but you could only but
31:40 - you should include a comma if you want
31:42 - to add another object here so another
31:44 - property over here like name and then
31:46 - quantity now suppose the price of the
31:48 - object or the product and the price
31:51 - would be a type of number and would be
31:53 - required and by default it could be zero
31:56 - okay the same thing goes for the image
31:58 - of the product so you could say image
31:59 - and then you could have Callin and then
32:02 - uh the type would be string and then it
32:04 - would be required which is true and well
32:07 - essentially you could either have the
32:09 - image or you can't have the image so a
32:11 - product could exist without an image as
32:12 - well so that's basically there and then
32:15 - you could just close that that was an
32:17 - extra right right after this object this
32:19 - entire one we put in the comma here and
32:22 - we put in time stamps calling true this
32:25 - what it does allows us to have two more
32:27 - extra fields and that's one is created
32:29 - at and updated at so um it's going to
32:32 - tell us whether when we created this the
32:33 - time um and then when we latest you know
32:37 - create the latest update and it will
32:39 - give be it will be tracked so we if you
32:41 - could format document I don't have any
32:44 - uh you know configure I'm going to just
32:45 - use prettier this is an extension again
32:47 - just used for formatting and now you
32:49 - know you could see that this is all my
32:52 - uh you know schema and now we have to
32:55 - just allow mongod be to use this so we
32:58 - could say
32:59 - product and we're going to be calling
33:02 - this as the model so it's product and
33:04 - we're going to say mango. model we're
33:06 - going to use the model and we'll say now
33:08 - over here this is going to be within the
33:09 - mango database now check this out we
33:11 - have to make it singular because it's
33:13 - going to add an S all by itself in the
33:15 - database and you'll see it and you can
33:17 - see right now it's in capital but in the
33:18 - database it will be all lowercase so
33:20 - it's going to be called
33:22 - products and it's coming from the schema
33:24 - that we created up here so this one the
33:26 - product schema so we can simply say
33:29 - product schema right here and there you
33:30 - go so now we have this product model and
33:33 - we can just import I mean export this so
33:35 - we can say module. exports and then we
33:36 - have product like this so there you go
33:38 - this is the entire model for the product
33:42 - and now we are going to be using this to
33:45 - create products in our database now that
33:47 - we have created this model we're going
33:48 - to use this model to save data into our
33:50 - database so we're going to go to
33:52 - index.js and over here we're going to
33:54 - use that model so it's very easy to use
33:56 - I'm we're going to do is over here you
33:58 - can see that there's this connection
34:00 - part right so we're going to just leave
34:01 - that connection on the bottom and over
34:03 - here we're just going to use um you know
34:05 - the slash this is just normal but over
34:08 - here right after the slash we could
34:10 - actually have you know the following so
34:12 - we could go
34:14 - here and we have app. poost which is
34:17 - going to be used to save something and
34:19 - in here we could sa you know / API SL
34:22 - products right so we could just have uh
34:25 - right now I'll just have SL API SL
34:27 - products and then we have request and
34:29 - response and in here we have this now
34:33 - now check this out um what we do is you
34:36 - can see that there's this
34:38 - um completed but there's still something
34:41 - missing and that's this bracket over
34:43 - here now over here we could we could uh
34:45 - use uh you know response and we could
34:47 - say data received or something we could
34:49 - send a message right now let's just test
34:51 - this uh API out does this work so SL API
34:54 - SL products if I go there so I normally
34:57 - would assume that it's running so if I
34:59 - go to/ API SL products let's go
35:04 - here and we'll say slash API and then we
35:08 - have
35:10 - slash products if I do this you could
35:13 - see over cannot get/ API products the
35:16 - reason why I cannot get because I
35:18 - actually used post here and when I use
35:21 - post it will say data received we could
35:24 - actually test it out and you know we
35:26 - could just have something really easily
35:28 - uh written now remember whatever we give
35:30 - to the the client it's in the request so
35:33 - whatever the client sends is basically a
35:35 - request so we could have console.log and
35:37 - we'll have the requestbody whatever the
35:40 - client gives we want to show it in the
35:41 - console screen right here and we also
35:44 - want to show it in our uh browser so we
35:47 - could do in the client end so we could
35:48 - say response. send and we could have the
35:51 - request uh body right here as well so
35:54 - let's see how this looks like but we
35:55 - can't actually really test it out um
35:58 - through that browser so the best way to
36:00 - do this is either through insomnia or
36:02 - the other uh Thunder client so over here
36:03 - we're in insomnia and what we're going
36:05 - to do is you can see over here get and
36:07 - then we have get API so we're going to
36:09 - have a new folder here I'm just going to
36:11 - create a new folder and I'm going to say
36:13 - post uh right so I'm just going to say
36:15 - post and I'm going to create it so you
36:16 - can see over here we have get and then
36:18 - we have post so I'm just going to have
36:20 - this closed yeah so this is open and
36:23 - this is closed uh HTTP request yeah so
36:25 - in here we're going to have an HTTP
36:27 - request and over here we're going to
36:28 - select post and over here we're just
36:29 - going to paste in that HTTP call in for
36:33 - uh um two for sles Local Host Port 3000
36:37 - and it's called SL API SL products once
36:42 - I do this you could see that you know
36:44 - this is coming there
36:46 - and essentially if I send you'll see
36:49 - nobody return for response the reason
36:52 - why it's no response but the request has
36:54 - been sent is that I don't have any body
36:56 - so what I have to do is I have to give
36:58 - some Json uh values over here I could
37:01 - actually just have you know anything I
37:03 - want so so so over here what I'm going
37:05 - to do is I'm going to say in quotation I
37:09 - could say name and I say coding cleverly
37:13 - okay now what is this this is actually
37:16 - Json and I'm passing it so it says name
37:18 - and then it's also in strings now if I
37:20 - send this you can see this has been sent
37:23 - but the body still hasn't been responded
37:25 - back and
37:27 - and you can
37:32 - see that the result over here is
37:35 - undefined the reason why we're getting
37:37 - undefined here is that we're not allowed
37:39 - to pass Json through our nodejs by
37:42 - default we have to use a middleware we
37:44 - have to configure it and uh the
37:47 - configuration setting for this
37:48 - middleware is super
37:51 - easy um what we could do is we could add
37:54 - that middleware
37:55 - part
37:57 - so it's basically app.use and then right
38:02 - after the uh you know initialization of
38:04 - the app you so essentially this could be
38:06 - over here we could have app.use and we
38:08 - have express. Json and once I do this
38:12 - this means now it would be able to view
38:14 - it so now if if I passed in coding
38:16 - cleverly you'll see that then return was
38:19 - coding cleverly and when I didn't give
38:22 - anything you can see I could see an
38:24 - empty list and but when I give it you
38:26 - can see I could get this cod in collabor
38:28 - same goes for this now now now this is
38:31 - not going to be anything but you know
38:34 - you you get my point now you know we
38:36 - basically fix that up and now that's
38:39 - basically it now instead of having you
38:41 - know that client but client could just
38:43 - add in anything he wants like suppose
38:45 - not just the name but you could have
38:47 - let's suppose
38:49 - value and you could say uh you know um 1
38:54 - 2 3 and you don't need uh any string for
38:56 - that and when you're you're finishing it
38:57 - don't add any comma here so now we have
38:59 - send you can see now there's two things
39:01 - from the response right so this is
39:04 - pretty good but what we want to do now
39:06 - is we want to add multiple things in
39:08 - here so let's go back here and what I
39:10 - want to do is I want to add it through
39:13 - you know basically I want to save the
39:14 - data uh using the mongod DB um model
39:18 - that we created so we use try and catch
39:21 - okay so we remove that and we use try
39:23 - and catch and we use
39:25 - console
39:28 - log so for the error it's pretty pretty
39:31 - simple you could just use console.log or
39:36 - error this is just going to show in the
39:37 - console screen but other than that I
39:39 - mean right now you could see if uh the
39:42 - you know remember that console log that
39:45 - I was bringing now you could see it over
39:46 - here but now it's changed because I am
39:49 - actually changing it I'm using response
39:51 - when uh you know I'm going to show it on
39:53 - the browser and I'm going to say if uh
39:56 - you know if it's not done so we'll say a
39:59 - response status of 500 meaning a server
40:01 - error and we'll have uh response and
40:04 - we'll throw in out of Json so we'll say
40:06 - Json and in here we'll have an object
40:08 - and we'll say message and the message
40:10 - will be the error message like like like
40:13 - this all right and then for the try now
40:15 - we could actually try to save that data
40:18 - so we're going to have to import our
40:20 - model so remember this model that we
40:22 - created product. model. JS what we could
40:24 - do is we could just import this model
40:26 - here here so it's pretty simple and all
40:28 - we have to do is
40:30 - const and we say model so we just say
40:33 - product and then we say require and then
40:35 - we have/ models SL product. model and
40:38 - you can just add in JS so that it
40:40 - doesn't have any kind of issues but uh
40:42 - you know just a good prevention here and
40:44 - then once it's done here and we could
40:46 - add in this over here so we could just
40:48 - say um in the tri
40:50 - part we could have const um you know
40:57 - essentially what we want to do is we
40:59 - want to save this
41:01 - product
41:02 - so you want to save it and the best way
41:06 - to do it is await
41:09 - product. create all right you're using
41:12 - this command and it's essentially going
41:14 - to require a wait because it takes time
41:16 - and whenever you do a weit you have to
41:17 - put a synchronous over
41:20 - here okay so as s YN as s YN okay as s
41:26 - y NC okay async and then you have this
41:29 - await so await product. create um and
41:33 - whatever the request body was you pass
41:35 - it in and you basically create an a
41:38 - property here uh an object um you know
41:41 - for that an instance for that model so
41:43 - now over here we have this as a product
41:45 - we could just name it as product like
41:47 - this like like this so we have cons
41:49 - product and then we could just return
41:51 - that product whenever it's created and
41:53 - we could say you know as a as a response
41:55 - Json so we could say response. status
41:57 - and we can say 200 meaning it's a
41:59 - success and the Json we could just throw
42:01 - out the uh product like that okay so now
42:05 - this is going to be really awesome
42:06 - because uh for now you can see that we
42:09 - have some fields which are name and
42:11 - quantity and price and image so there's
42:15 - it's more than you know there's extra
42:17 - fields which are time set that just
42:19 - automatically being created but these
42:21 - are the three important ones they are
42:22 - like mandatory and this is optional
42:24 - image field because it says required f
42:26 - so let's test this out using our
42:28 - insomnia so over here what we're going
42:30 - to do is we're going to create a new
42:31 - folder and we're going to be calling
42:33 - essentially we're going to create a new
42:34 - folder and we're going to be calling
42:35 - this as add a product okay and when I do
42:39 - this I create this folder you can see
42:41 - this folder is here now in here you can
42:43 - see this is open and now you could
42:44 - essentially have this click and you say
42:47 - HTTP request and you could just rename
42:49 - this you could just rename this over
42:51 - here and just call this as uh add API
42:56 - okay so just rename now you can see this
42:58 - add API and now you could just have the
43:00 - you know the same thing colon two sles
43:03 - uh Local
43:04 - Host Port
43:07 - 3000 and then we have SL API slash so
43:11 - what is it/ API products right so
43:14 - whenever I do this this is that API that
43:17 - what is existing but it's actually a
43:19 - post not a get because we want to add
43:21 - something and in the parameters so in
43:23 - the parameters which is in the body so
43:25 - we want J
43:26 - right we have to click on Json and over
43:28 - here we could just put in something like
43:30 - here so first of all you have to give
43:32 - them uh the fields now look at the
43:34 - fields we have first of all name
43:36 - quantity and price and we have name as
43:39 - only string so we'll have
43:42 - name and we'll say let's suppose we want
43:45 - pizza and then we'll have quantity so
43:47 - we'll have quantity in
43:49 - know the keys always going to be in
43:51 - string so
43:52 - quanti and then we have colon and then
43:55 - quantity is a number so we'll say 10 and
43:57 - then price so price like this again and
44:00 - then we'll have price as let's suppose
44:03 - uh
44:04 - 5.99 okay so now we have this which is
44:08 - there we could just simply press send
44:12 - and this should add it to it so we could
44:14 - press on send so now you can see over
44:15 - here we have these three you can see
44:17 - this ID has been created and then
44:19 - there's is created at and updated at and
44:23 - then this underscore uncore V this
44:26 - indicates that it's it's successfully
44:27 - saved in the database because mongodb
44:30 - gives an ID unique ID to every single
44:33 - object that's being created and now we
44:34 - can actually reflect and check it in our
44:36 - database so if we go here and we go to
44:39 - browse
44:41 - collections you'll see that remember uh
44:44 - like I told you before that there's
44:45 - going to be um this product and then
44:48 - there's going to be an s in here and
44:49 - then this is going to be lowercase and
44:51 - it's going to say products right and
44:52 - remember that cluster name that we
44:53 - created which was um node API
44:56 - right and inside here we have this
44:59 - products right so this was collection uh
45:03 - this is a collection my bad and then in
45:05 - here we have our table which is products
45:07 - and you can see over here that our pizza
45:09 - is there so that's been saved
45:12 - successfully which is
45:16 - amazing so this is great we could add
45:18 - some more uh products as well let's
45:20 - suppose we have pancake so
45:24 - pancake okay and we'll have quantity as
45:27 - let's suppose 20 and the price for a
45:29 - pancake is $3.99 send it now we have
45:32 - pancakes added let's have um you know
45:35 - donut
45:37 - donut um and uh this would be 40 donuts
45:42 - and the price for a donut is $1.99 press
45:45 - send and a donut is added okay great so
45:48 - we have some products added now if you
45:50 - want to view these products how can you
45:51 - see them well you could see them over
45:53 - here if I just you know click on refresh
45:56 - here so if I click on
45:58 - refresh you'll see the these uh products
46:01 - are being updated here but I want to
46:03 - actually have an API that allows me to
46:06 - you know view these products there so
46:08 - that's pretty simple as well just go
46:09 - over here so the post was created now
46:13 - you just want one that allows you to
46:15 - view these um you know listings so what
46:18 - you could do or these you know products
46:20 - so we could
46:23 - app.get and we could just simply say /
46:26 - API products and then this is
46:28 - asynchronous and then we have request
46:30 - and response and then in in here we have
46:33 - this body and then uh essentially this
46:35 - close and that's it so in here what
46:38 - we're going to do is we're going to have
46:40 - the you know the the the area where
46:43 - we're going to have to retrieve it so
46:45 - and we could view it so try and catch
46:47 - again the same thing response. status um
46:50 - 500 and it's going to give a Json you
46:53 - know object and says message error
46:55 - message and over here in the tri Place
46:59 - essentially you use await and you use
47:02 - product. find you want to find
47:05 - everything in the database so you could
47:06 - use this um bracket and whenever you use
47:09 - a weight there's an async automatically
47:12 - that has to be over there and now what
47:13 - you could do is Con and we say products
47:16 - like that because there more than one
47:18 - product uh now what we going to do is we
47:20 - got have response. status 200 and we
47:22 - could just Json the products and that's
47:24 - essentially our API that's all it that's
47:27 - prettyy much it now we could use it and
47:29 - test it out over here and go this we
47:32 - could go and just create a new folder so
47:34 - we could say new folder and we can say
47:36 - uh get so we say get all
47:42 - products and then we could just create
47:44 - this I mean this is not required this is
47:46 - just insomnia so uh so over here we
47:49 - could have you know HTTP
47:51 - request and you essentially um having
47:54 - without having it over there you could
47:56 - just you know you could just close these
47:58 - out so you could
47:59 - see you could close this folder you
48:01 - could close this folder you could close
48:03 - this folder and then this is get all the
48:05 - products one right so you could click on
48:06 - this one and you say I want I want an
48:09 - HTTP so HTTP request um so you could
48:12 - click on this so it just created three
48:14 - different https right so we want to
48:16 - delete U the multiple ones that I
48:19 - created this is just an organized way to
48:21 - do it you could use Thunder client it's
48:22 - super efficient and easy but I'm just
48:25 - showing you that there's so many
48:26 - possibilities here um and over here what
48:28 - we're going to do is uh you know you
48:30 - could just rename this
48:34 - using this and you could just say
48:36 - instead of new request you could say
48:38 - this as um get API and press enter and
48:43 - then in here what you want to do is you
48:44 - want to call this API which is HTTP
48:46 - Callin Local Host uh 2 for sles Local
48:50 - Host Port 3000 and then we have slabi SL
48:56 - products okay and then if I press get
49:00 - and this press send you can see that
49:03 - mongod DB gave me a list of objects so
49:05 - you can see see this is a list and then
49:07 - inside here this is object one object
49:09 - two and then we have object three coming
49:12 - from the database this is amazing and
49:14 - this is how the get one's going to work
49:16 - but suppose if I want one individual
49:18 - product instead of all of them then I
49:21 - could use their ID to get them right so
49:23 - if I want the pizza one I could just use
49:24 - this ID to get and then this one to
49:26 - there and then this one for donut and
49:28 - this one for pancake how do I do this
49:30 - also pretty simple what you could do is
49:32 - you could just put in an
49:34 - ID there but we have to create that API
49:37 - for it so over here we have this get
49:39 - plain one and in here we could just have
49:41 - one more which is right here on the
49:43 - bottom and this is just a specialized
49:44 - one that allows you to get a specific
49:48 - product depending on its ID so we could
49:50 - have you
49:51 - know now essentially these these double
49:54 - quotes or single codes don't matter you
49:56 - could add whatever you want but it's
49:57 - just a good practice to have the same
49:59 - thing whenever you're using it so don't
50:01 - mix it up so so over here we have I'm
50:03 - using single codes here for Now so/ API
50:05 - SL products and then we have slash colon
50:08 - ID and this is how we're going to use it
50:10 - so we're going to have asynchronous
50:11 - function request and response and then
50:13 - we have this um and then we have this
50:15 - and then we have the semicolon and over
50:17 - here what we're going to do is we're
50:18 - going to use the same try and catch
50:20 - method and in the C uh catch we still
50:22 - have response. status uh. status
50:26 - okay status and then we have 500 and
50:29 - then we have Json and then we'll give
50:31 - that you know message saying that you
50:34 - know it's an
50:38 - error okay and then in the try place
50:41 - what you could do is you could actually
50:43 - get this ID how are you going to get
50:45 - this ID from the URL so you might be
50:47 - asking like how can I get an ID from the
50:50 - URL so right now if I do this you could
50:52 - see this is a list of the you know get
50:54 - command that we did and this is giving
50:56 - us the API uh I mean API for all these
50:59 - uh products and the are three but right
51:01 - now it's really hard to uh read them you
51:03 - could use some kind of extension uh Json
51:06 - reader uh Chrome right
51:10 - so if you just type in anything like
51:12 - this uh it's going to give you some cool
51:14 - extensions on
51:16 - Chrome so this one's good which is
51:18 - featured you just add to Chrome and when
51:20 - you add this extension uh you know this
51:24 - uh Chrome extension should be added so
51:26 - Json viewer and once it's
51:30 - there
51:32 - okay
51:35 - so we have this extension right and when
51:39 - I refresh this page you can see now it's
51:42 - essentially now in a really nice
51:44 - formatted portion and you can see over
51:46 - here they also gave us like what is the
51:49 - API that we called and this is the
51:51 - retrieval Pro process so it's pretty
51:53 - nice I mean everything here is you know
51:56 - pretty wellmade so great so this is the
51:58 - API and like I was saying is uh like I
52:02 - want I want the URL where I could say
52:04 - slash ID like I want this ID so suppose
52:07 - if I say I want this pizza and I get
52:10 - this ID so I copy this entire ID right
52:14 - here and I have put in the URL which is
52:16 - right here now how can I get this url's
52:19 - ID how do I get the Slash and then I get
52:21 - this part for that you have one specific
52:24 - thing and I'll tell you how to do it
52:26 - it's really easy and really cool it's
52:28 - called um prams so essentially we could
52:32 - use it use a d structure and we say we
52:34 - could get the ID from request. prams if
52:37 - we do this we basically got the ID from
52:39 - the URL that's all we had to do and now
52:41 - we could just uh search this in and
52:45 - retrieve it so we'll say await and we'll
52:47 - say product right so product is our
52:50 - model and that find by ID is a command
52:54 - so we could have that and we pass in the
52:56 - ID okay so we pass in the ID but we also
53:00 - have to now just say nothing else and
53:02 - also we just have to find this and we'll
53:04 - put in a cost product like this and then
53:06 - after that we could just R retrieve that
53:08 - status uh 200 and we'll say you know
53:11 - that Json product like like like this so
53:16 - that's great so now we have this product
53:18 - uh available as well when we go back to
53:21 - our browser you know you could either go
53:23 - through the browser and you could see
53:24 - that automatically did it I just put
53:26 - this and then it gave me the pizza now
53:28 - let's just test it out using test uh you
53:30 - know this insomnia as well so right now
53:33 - this is get all products so again I
53:36 - could just create another one so let me
53:38 - just close this folder and create a new
53:40 - folder which is over here and we'll say
53:42 - um get one
53:45 - product okay and then create this folder
53:47 - and over
53:48 - here we can open up this folder and make
53:51 - sure we have an HTTP and in here we
53:53 - could just name this as um
53:56 - single API I just named it whatever I
53:59 - want and then over here we could have
54:00 - HTP colon 2 sles Local Host uh so Local
54:05 - Host Port 3000 and then we have SL API
54:09 - SL products because it's there's an S
54:13 - and then uh Slash and then the ID so
54:16 - remember the pizza ID I have right here
54:18 - in the clipboard and what I have to do
54:20 - is in here it's just get so nothing else
54:23 - and over here I'll just send and there
54:24 - you go we have the pizza so before we
54:27 - move on to the edit or update API what
54:29 - we want to do is I just said let's you
54:31 - know that single API where we get one
54:33 - product let's just have that named as
54:35 - product instead of products because this
54:37 - is multiple products and this will be
54:39 - single product and all you got to do
54:40 - right now is nothing else but just have
54:42 - this call to single product instead of
54:44 - products because if I call it with
54:46 - multiple it will get an issue and it
54:48 - says cannot get this but if I go and say
54:50 - this because it gave me a 44 it says it
54:52 - doesn't find it but when I remove that s
54:54 - and I press enter you know it still
54:56 - works so that was just pretty much what
54:58 - I wanted to do and you know that's
55:00 - pretty good uh you could refresh and you
55:02 - could get the same kind of issue here uh
55:04 - but when you move on to this part which
55:06 - is this you can see now this is there
55:09 - and you know everything looks really
55:11 - fine which is great which is super
55:13 - awesome now let's go and now create the
55:15 - edit update API so over here what we're
55:17 - going to do is we could go to this
55:19 - products and right after this uh / API
55:22 - products which is just uh allowed to
55:24 - post a product
55:25 - we could now create update API so I'm
55:27 - just going to put a comment and say this
55:28 - is as
55:30 - update uh a
55:32 - product
55:34 - okay okay so what we could do is here we
55:37 - could have app. put put is the command
55:40 - to update you could also use patch to
55:43 - update and this is HTTP method so put is
55:45 - also used to update and Patch but we're
55:47 - using put and over here we're going to
55:49 - have single quotes and we'll have/ API
55:51 - SL product so we'll have Pro uh product
55:55 - product and we want to update a
55:56 - particular product based on its ID right
55:58 - so we could use the ID again and now
56:00 - once we have this we have the async
56:02 - request and then we could have this and
56:03 - then this all right so now when we have
56:05 - all of this we could use try and catch
56:07 - again and over here again over here we
56:09 - could to have response. status um and
56:12 - then we'll have 500 and then we'll have
56:13 - json. Json and then we'll have um you
56:18 - know object and then we'll say message
56:19 - and then we say error message okay
56:21 - that's great but in the tribe what we
56:22 - could do is we could essentially get the
56:25 - ID again from the const ID destructure
56:27 - it and we can say equal to request.
56:29 - prams so this is the ID that we got and
56:31 - we can use this ID to update the thing
56:33 - but first of all we have to first uh you
56:36 - know uh use that command so it's await
56:38 - and then we say product and there's a
56:40 - specific method which is called find by
56:43 - ID and update so find by ID and update
56:48 - so like
56:50 - this yeah so basically this is the
56:53 - command it's called find by ID and
56:55 - update and we pass in the ID and we pass
56:58 - in the things that we want to update so
56:59 - whatever the user said in request do uh
57:02 - request. body that's what you want to
57:04 - update it with so essentially this is
57:06 - going to be like whatever the user gave
57:08 - you want to update it with that and you
57:10 - want to put that as the con uh you know
57:14 - product so this is the product like that
57:17 - so this is going to be the product right
57:19 - after that so suppose if the product
57:21 - hasn't been updated if I say you know if
57:24 - the product doesn't exist or something
57:27 - that means it just doesn't exist you
57:28 - could say response do you could just say
57:31 - return and then this would stop the
57:33 - thing and we say response. status 404
57:35 - and say message product not found um
57:38 - which is great we found a reference to
57:40 - public code in a recent
57:41 - suggestion uh but now after that what we
57:44 - have is if this is not
57:47 - existing I mean if that uh now if it
57:50 - exists what we could do we could
57:52 - actually update it and we could just say
57:54 - product like this but before this uh
57:56 - there's a check here because uh normally
57:59 - the product is going to be updated so
58:01 - it's best to have it rechecked from the
58:02 - database so you could use it either
58:05 - using uh a weight again and say uh
58:08 - product and then you
58:10 - say do find by ID now essentially
58:14 - because it's already updated right it's
58:16 - going to be reflected in the database so
58:18 - it's better to just check it again for
58:19 - so find by ID and and then you put in
58:21 - the ID over here so let's put in the ID
58:24 - okay so you essentially put in the ID
58:26 - and now what you're going to do is const
58:28 - and we say updated product right here
58:32 - and then equal it and then we can just
58:34 - return so basically response. status 200
58:36 - meaning Json and then updated product so
58:39 - this is the API for updating a
58:42 - particular product based on its ID and
58:45 - now we're going to be testing it so
58:47 - let's over here um we created another
58:50 - folder so I'm just going to close this
58:51 - one and you know you could see all these
58:53 - folders here and now we could have one
58:54 - more folder which is going to be called
58:59 - update a product okay and then we press
59:02 - enter to just create that folder and in
59:04 - here we just have this button and we
59:06 - have HTTP request but in here let's just
59:09 - have
59:11 - update API okay Enter and now over here
59:14 - we could just have HTTP call in to/
59:17 - Local Host Port 3000 and then we have/
59:22 - API SL product because it's not going to
59:24 - be s and then it's going to have its ID
59:26 - so if I look into this you could see
59:28 - over here it's product and then it has
59:30 - its ID so we could have the pizza one we
59:32 - had the pizza's ID I believe it's this
59:34 - one and now if we want to update it we
59:36 - have to go and put in put and in here we
59:38 - have to go in the body and we have to go
59:40 - in Json and we have to change the name
59:42 - or whatever we want so let's suppose we
59:44 - want to change the name and we'll say
59:47 - and we'll say it up uh
59:49 - updated okay I'll say updated
59:53 - Pizza okay if I do this and I press send
59:57 - now you could see that this it will
59:58 - return the entire thing the reason why
60:00 - it's returning it is because I'm
60:02 - actually saying give me the entire
60:03 - updated product by finding it again from
60:05 - the database and now you can see that it
60:07 - gave the name updated pizza but other
60:09 - things were just the same if I just uh
60:12 - you know say okay now I want the price
60:14 - changed as well and I say from $5.99 we
60:17 - want the price uh increase to
60:21 - $7.99 okay now if I do this and I press
60:24 - send now you could see it's going to
60:25 - take some time and there you go it's
60:27 - updated so this is the API to update a
60:30 - particular product within the database
60:31 - and it's updated now successfully and
60:33 - now if you want to view all the products
60:35 - so you could see get all products so you
60:37 - could see over here if I click on this
60:39 - API so this is a particular thing if I
60:41 - just you know press enter you can see
60:43 - this updated Pizza is there $7.99 but
60:45 - the pancakes and the donuts are still
60:46 - existing so this is beautiful I mean we
60:48 - could go back and we can update over
60:50 - here so this is the convenient part of
60:53 - uh this um you know tool which is
60:55 - insomnia or Postman because it's really
60:57 - organized instead of having Thunder Cent
60:59 - Thunder CL is very simple and you could
61:00 - just pass it in but you know every tool
61:02 - has its own advantages and disadvantages
61:05 - but you know um just look at for the you
61:07 - know the good things of everything so
61:09 - look at the good parts of insomia and
61:11 - use it all right so next part we're
61:13 - going to do is we're going to have the
61:14 - delete API so now that we have this
61:17 - update product let's have the delete
61:20 - product so right here U we're going to
61:22 - have/ delete okay okay so we're going to
61:25 - have delete a product like like this and
61:29 - then over here we have pretty simple
61:31 - method for delete it's just called app.
61:33 - delete this is the option and then in
61:35 - here we're going to have slash API SL
61:38 - product and then what I dig you want to
61:40 - put pass in so you pass in the ID like
61:42 - colon ID and then you want to uh put an
61:45 - asynchronous function so as YN C and
61:48 - then you have request and response and
61:50 - then put in this and then this okay and
61:52 - then put in this now if you want to
61:55 - delete something it's pretty again
61:56 - simple you have try and catch and then
61:58 - here you could just have uh response.
62:01 - status uh 500 and then you could say um
62:05 - you know do uh Json response and then
62:07 - put in the message and then just say you
62:09 - know there was an error like like like
62:12 - this or else if you want to try to
62:14 - delete it again use the con ID
62:16 - destructure it from the request. prams
62:19 - and then um what you're going to do is
62:21 - right after destructuring it from the
62:23 - request. prams you could use it using a
62:25 - weit and then um you know a weit and
62:28 - then you say product um so basically oh
62:32 - man what did I open so what if I do
62:34 - product. find uh you know it's basically
62:38 - find by ID and delete so find by ID and
62:43 - delete and then you pass in the ID and
62:46 - essentially you want to uh you know you
62:48 - delete it like this so that's pretty
62:50 - much it and then uh once it's deleted
62:52 - you could just have the product saved
62:54 - again just return the response of it so
62:56 - just say that you know this product has
62:57 - been deleted or just given information
62:59 - that this this was the product that was
63:01 - deleted to the response and then you
63:03 - could just say Okay response okay so for
63:06 - instance we have to put a check first if
63:07 - the you know the product doesn't exist
63:09 - so if the product doesn't exist
63:12 - so so what we're going to do is we're
63:14 - going to throw out the return and then
63:15 - we say response. status and then we have
63:18 - 400 uh you know 404 and then we'll have
63:22 - Json and then we'll have the message of
63:24 - you know process not product not found
63:26 - and then you know if everything is fine
63:29 - we have response. status 200 and then we
63:31 - have product deleted successfully uh
63:34 - which is great um and you could also
63:37 - just have the product uh you know
63:39 - displayed or something but uh you really
63:41 - don't want the product so you could just
63:43 - have you could just have it like like
63:46 - this okay so now we could just format
63:49 - document like this and you could see
63:52 - this is our delete API which is right
63:54 - here so this is our delete IPI now it's
63:55 - just time to test it so right here you
63:57 - can see that there's um no product here
64:00 - so that's the only uh reason I was
64:03 - putting it so I think it's best to have
64:04 - it uh so cons product wait a
64:09 - minute Pro
64:12 - product okay okay it's okay so now this
64:15 - is okay that it tells us whether it's
64:16 - not and then after that it's just going
64:18 - to delete it great so now let's uh test
64:21 - it so we go to postman uh we don't have
64:24 - to go to post man by insomnia and over
64:26 - here we could just create another folder
64:27 - just close all these things out so you
64:29 - could just have this closed and this
64:31 - closed and just create a new folder here
64:33 - so we say create a folder and we say uh
64:36 - Delete delete a
64:39 - product okay so we have delete a product
64:43 - like this and then in here we have HTP
64:47 - and we
64:49 - have um so delete API right and then
64:55 - over here we'll have HTTP uh colon to SL
65:00 - localhost uh Local Host Port 3000 SL API
65:05 - SL product and then we could put any
65:08 - product we want let's put our uh you
65:09 - know famous pizza and we'll have uh you
65:12 - know the post option which is O I mean
65:15 - sorry not the post but the delete option
65:16 - here and then all that's we have to pass
65:19 - in and then press send and you can see
65:20 - over here message says product deleted
65:22 - successfully if go to get all products
65:26 - you know over here the folder and get
65:27 - API this is the get API saved over here
65:29 - so we just send it once more and now you
65:32 - can see now we don't have pizza anymore
65:34 - but we have pancakes and donuts so let
65:37 - me know how you thought about this if
65:39 - you have any questions uh like if you
65:41 - want to add more products into this just
65:43 - add them quickly with that you know add
65:46 - a product API which is right here and
65:47 - just add them quickly and easily within
65:50 - here this and then it would just be
65:51 - updated here like's suppose we want to
65:53 - add one more like let's suppose um
65:57 - cheesecake and if I say
66:00 - um so let's say 100 and then um $4.99
66:06 - now if I send it now Cheesecake is added
66:09 - there as well okay so now you could see
66:12 - if I you know view all the products uh
66:14 - which is over here which is in the get
66:18 - all products now I send it now you can
66:20 - see pancake donut and then cheesecake is
66:22 - right here which is amazing now this is
66:25 - uh the apis the simple crud apis create
66:28 - read update delete I wanted to say that
66:30 - you know you could actually have Postman
66:32 - insomnia and all these other products so
66:34 - it's pretty simple over here as well so
66:35 - this is Postman and what you do is you
66:38 - basically create a colle you know
66:40 - workspace here so um essentially you
66:44 - could add in you know things like my
66:45 - environment
66:47 - environments
66:50 - and you want to add new a
66:55 - HTTP right and then once you do that you
66:57 - could just paste in your you know HTTP
67:00 - so suppose if you want to use this you
67:02 - know this one this is allowed to view
67:04 - everything just paste it right here
67:06 - press send and you could see now a
67:09 - response came here so you could see you
67:12 - got a response
67:13 - here so you can see one two and three
67:16 - over here and one other thing that I
67:18 - wanted to say is that suppose you want
67:21 - to add products right so you have added
67:24 - API but instead of adding it through
67:26 - Json you want to add it through suppose
67:29 - some other format like a form URL like
67:31 - this right so in a form URL you
67:34 - basically put in uh just a key and value
67:36 - so suppose name and then I want so this
67:39 - is like yeah this is the name and then I
67:41 - want something like uh something let's
67:44 - suppose I want uh chocolate
67:49 - chocolate add yeah so add so I have name
67:52 - chocolate and then I have I have price
67:55 - and I would say um you know
67:57 - $3.99 and then I have the last parameter
68:01 - which I guess was um quantity so
68:04 - quantity it doesn't matter which order
68:05 - it's coming from but as long as they
68:07 - match so let's suppose uh
68:11 - 35 okay so this is chocolate I want to
68:13 - send this I can't do this product
68:16 - validation failed name please enter
68:18 - product name now the reason why this is
68:20 - happening in like 500 internal server is
68:22 - that our middleware isn't configured for
68:24 - adding these other things uh you know
68:27 - this form field so you know adding this
68:30 - form way you know you form URL encoded
68:33 - uh method of adding things and you could
68:35 - just configure it within the uh
68:37 - middleware so right here where it says
68:39 - uh express. Json you could say app.use
68:43 - and then you could have uh express. URL
68:47 - encoded and then you know you could have
68:50 - the you could have the round brackets
68:52 - and then the brace and say
68:55 - extended Colin fults if I do this now
68:59 - you could add this thing as well so
69:02 - let's just send it again and now you can
69:04 - add it so chocolate has been added and
69:06 - now to view all these products you could
69:08 - see over here where we view all the
69:10 - products uh add get API so in the get
69:15 - API if I press send now so get pancake
69:17 - donut and then we have cheesecake and
69:20 - then we have chocolate all right so that
69:22 - is amazing which is really
69:25 - awesome now I wanted to do a little bit
69:28 - Advanced and I wanted actually to
69:30 - structure this out a little better
69:32 - because right now to be honest we have
69:33 - everything cluttered within index.js and
69:36 - if we had more and more apis created we
69:38 - would have to make our index. is very
69:40 - very populated which is not which is
69:43 - really not a good practice at all so the
69:46 - best way to do this is essentially have
69:48 - everything separated out in really good
69:51 - uh folders and this is what I uh High
69:54 - highlighted out in one of my videos so
69:56 - what I would do is right now I'm in the
69:58 - models which is great we have to
69:59 - separate one but over here we have to
70:01 - have these API so you could see/ API SLG
70:04 - get and they're all the related to
70:05 - products right so you can see this one's
70:07 - related to product this one's related to
70:08 - product this one's related to a product
70:10 - this one's related to a product and this
70:12 - one's so we have all these apis that are
70:14 - related to a product so mostly we have
70:16 - to create a separate route for this so
70:20 - so what I'm going to do is right
70:22 - now uh you could see
70:25 - that um we're going to create one route
70:28 - over here so over here we'll have a
70:29 - folder and we'll say routes so not in
70:33 - here not in the model but let's uh
70:35 - collapse everything and basically we're
70:37 - in the root directory and we'll create a
70:40 - folder called routes okay so in this
70:43 - we'll create a file uh when it's going
70:45 - to be called um it's going to be called
70:48 - Product route um product. route. Js all
70:53 - right this is going to be the product
70:55 - route
70:57 - okay so essentially this is for the
71:01 - products so basically you could call it
71:08 - um yeah
71:12 - so you can just call it product. route.
71:14 - JS and all the routes uh that are reling
71:17 - to that product will be there
71:22 - existing
71:24 - so what I'm going to do now
71:26 - is I'm actually going to have you know
71:29 - these apis so if you could see over here
71:32 - we
71:33 - have this all there right delete so this
71:37 - delete is there this update is there
71:40 - this uh post is there and then this get
71:44 - is there so there's two post I believe
71:45 - so this one and then there's this one
71:48 - okay there's get and then there's this
71:50 - get okay
71:52 - so yeah exactly so there's just one post
71:54 - because we have to add one product and
71:56 - then there's two gets okay so what we
71:58 - want to do is we want to add the URL
72:01 - routing here so what it what it is like
72:03 - it's basically right after you know this
72:05 - slash this is normal it's really doesn't
72:08 - matter so right after that you could add
72:16 - in so essentially right after this so
72:20 - you don't even need uh you
72:22 - know
72:24 - so app.get right
72:26 - here you could just add in so even after
72:30 - this I mean just right after the
72:31 - middleware configuration what you could
72:34 - do
72:35 - is
72:39 - um you could say
72:44 - app do
72:47 - use okay so I'm just going to call this
72:50 - as routes and what what is this is going
72:53 - to be be called middleware so you just
72:54 - have to separate the things out over
72:56 - here so routes and over here app. and
72:59 - we're going to have the route which is
73:01 - basically SL API SL products so you can
73:06 - see over here there's a similarity here
73:08 - so uh that's why we're going to use
73:11 - whatever SL API products go we're going
73:13 - to take it to the product route so
73:16 - product. route dot you know whatever
73:20 - that product route is so I'm just going
73:21 - to call this as product route now right
73:25 - right here now this is not imported so
73:27 - essentially I have to create the route
73:29 - okay to make this file more distributed
73:31 - and more organized I would recommend
73:34 - having product. route. JS here and in
73:37 - here remember all these routes that we
73:39 - created for product just name them as s
73:41 - so that they have this common trait so
73:43 - I'll just put all s over here so you'd
73:45 - see products delete and then / API
73:48 - products so over here was um you know
73:50 - delete and update and then you'll see
73:52 - then in the get for a single product
73:54 - we'll just have this S as well and this
73:56 - is for uh you know adding a product and
73:59 - then we have um basically that's it so
74:02 - this is just for getting the product and
74:03 - then this is there and this is for
74:05 - adding up single product so what we're
74:08 - going to do is over here we're going to
74:09 - use this app.use and then SL API
74:12 - products and we have the product route
74:13 - now this is the product route which is
74:15 - right here right so what we're going to
74:18 - do is over here we have in the product
74:21 - route we're going to have to create this
74:22 - router so you see this router and then
74:24 - this router will point to other things
74:26 - like suppose router. getet and then we
74:29 - have uh you know just for slash because
74:32 - right now at the moment what you could
74:33 - see is um SL API SL product so by
74:37 - General um means this one has to be
74:39 - called right this one has to be called
74:41 - which is uh just getting the products
74:44 - and displaying it so I'm saying why
74:46 - General the general one which
74:49 - is the slash one right so this one
74:52 - should have
74:54 - uh should have should have uh you know
74:57 - request response and then you know you
74:59 - could just say something like that it
75:00 - really doesn't matter I mean at the
75:02 - moment uh um you basically could have
75:07 - this thing there so this entire thing
75:10 - could essentially go
75:14 - here and this means like now it's asking
75:17 - for the product right where's this
75:20 - product from so that's all you have to
75:22 - import cons
75:24 - product so we say so
75:27 - product and this is from the model
75:31 - and and this a weight is going to be for
75:33 - this asynchronous over
75:35 - here okay and that's basically it this
75:38 - is how this model is going to be called
75:40 - it's still going to work but a better
75:42 - way to do this is actually add this
75:44 - logic this thing this entire thing is
75:47 - called a controller function and you
75:49 - could add this separately into another f
75:51 - file which is going to be called a
75:52 - controller so if I go here into this
75:54 - folder okay so over here and if I go
75:57 - here and I go in
75:59 - controller controllers and in here we
76:03 - could add in a uh separate file which is
76:05 - going to be called
76:07 - product.
76:10 - controller.js all right so over here you
76:13 - could add in this entire thing this
76:16 - entire
76:17 - snippet this one okay so essentially you
76:20 - don't need this entire snippet at all so
76:23 - all of this could just be cut okay and
76:27 - then over here would just be a function
76:28 - but at the moment I'm just going to tell
76:30 - you what to do just leave it like this
76:32 - as for now but let's go here and in the
76:34 - controller in the product controller
76:36 - what we would do is we have const get
76:40 - products is going to be the function and
76:43 - then we have is uh async request
76:46 - response and remember that the thing
76:48 - that I copied so let me just add this
76:51 - remove that remember that's async
76:53 - request and response we B we basically
76:56 - need only this so rest everything you
76:58 - could just delete so this could just be
77:00 - deleted and right here you just paste
77:03 - this try and catch now it's going to be
77:05 - asking like where's this uh product
77:07 - coming from you could just say Okay cost
77:09 - product uh this is coming from there uh
77:12 - and essentially this is your function if
77:16 - you want to export this function so that
77:18 - you could use it you just have um the
77:22 - following line added at the end so you
77:24 - could just say
77:26 - um yeah so essentially you you could
77:29 - just say module
77:31 - module. exports and then you you could
77:35 - pass in a list of what you want to
77:37 - export so you know right now at the
77:40 - moment we just have this get products
77:43 - being exported so now you could use this
77:45 - get products here so you could just have
77:47 - this uh route and in here we could have
77:50 - um
77:51 - const that that product
77:54 - controller and then that's coming from
77:56 - product.
77:58 - controller.js okay and then over here we
78:00 - could
78:01 - use uh that
78:05 - function so essentially you're getting
78:07 - product out controller and you're
78:09 - essentially you could get
78:13 - the the structure and over here you
78:16 - could see that there's this get products
78:18 - so we could just say get products we're
78:20 - getting the function get products from
78:23 - from that and we could use it over here
78:24 - so get products right here okay so now
78:29 - that this is there you know you can see
78:31 - that this has been added which is
78:33 - Success now you wouldn't you would want
78:35 - to do the same thing process for all the
78:38 - other
78:39 - routes so like like suppose if I um you
78:43 - know go to this other one which is this
78:45 - was just getting all the products would
78:47 - have
78:48 - router. get and this is so simple like
78:50 - suppose forward slash and then would
78:53 - have uh you know over here Colin ID so
78:56 - Colin ID so this means we have now
79:00 - router for a specific ID right we're
79:02 - getting only that and then now you could
79:06 - understand this through this you could
79:07 - see/ API SL products and then whatever
79:11 - now this is going to be an ID in the URL
79:13 - so right right after that SL API
79:15 - products and then you could have uh you
79:17 - know get single product function instead
79:19 - of get multiple product and what you're
79:21 - going to have to create this function so
79:23 - we have to create this function in here
79:24 - so all we got to do is you know con uh
79:27 - you know get single product so product
79:29 - and then again this is an asynchronous
79:32 - function so
79:33 - asynchronous and then we have request
79:35 - response and then we have you know this
79:38 - semicolon and you could just add in you
79:40 - know the things that you need so
79:42 - essentially the index.js has the single
79:46 - function as well so over here now you
79:48 - basically don't even need this now this
79:50 - API is deleted because you already added
79:52 - it from there and now I'm going to just
79:55 - you know one by one finish all of them
79:56 - and then just going to be using this
79:58 - route to do all of this handling so
80:00 - right now product. route is also not
80:02 - being exported so product. route is
80:05 - going to be exported through this
80:07 - function I mean this this line which is
80:10 - module uh module do exports and then we
80:14 - have router all right so once we do this
80:16 - we could actually simply import product
80:18 - route uh on the top
80:21 - so so if I go
80:24 - into this I could just have the you know
80:26 - router imported on the top right
80:29 - here so over here I could say
80:34 - um const product route and then we have
80:39 - routes and product. route. JS and then
80:41 - this is basically the product route
80:43 - which is right here so this is perfect
80:45 - all everything is synced properly and
80:47 - now we just have to create this product
80:49 - get product so we just get this you know
80:51 - get this I this code code and we just
80:54 - copy this and we put it in this grit
80:57 - product which is right here once
80:59 - everything is done we could just have
81:02 - this um get product like
81:05 - this okay so once we have that we could
81:09 - now we could now um go back to this
81:13 - route and you could you know you could
81:15 - actually call it from here so get
81:18 - product
81:20 - simple and now there that's pop lat so
81:23 - now we have these two apis so by that
81:26 - you know we had five I mean we had total
81:28 - five so now three are left so let me
81:29 - just quickly add the last three um and
81:33 - one was simple which was the create one
81:35 - which is router. poost and that's used
81:38 - to create so this is also a forward
81:40 - slash just a simple one and what we're
81:42 - going to do is we're going to have a
81:44 - post product so it's going to be
81:46 - basically create product function um so
81:48 - we could have create product over here
81:51 - create product function and we have to
81:54 - uh you know make this product function
81:56 - over here so over here we could just
81:57 - have cost create
82:01 - product okay and then we have is equal
82:04 - to async and then you could see all this
82:06 - populated and you could see that it's
82:07 - basically creating that product here so
82:10 - this uh SL API SL products this is this
82:14 - is already the old one we could just
82:15 - remove this and this is the creating one
82:17 - so you could see almost it's the same
82:19 - thing but I'm just going to double check
82:23 - if there's anything different I believe
82:24 - it's almost the same thing so I'm just
82:26 - going to copy this it's yeah almost look
82:28 - the same so you could just remove this
82:30 - now safely and you going to essentially
82:35 - go here and this you know create product
82:38 - is created so you just use it right here
82:40 - so
82:41 - comma um create product and then what
82:44 - you want to do here is you want to you
82:47 - know you could just have this there's
82:49 - also this part over here you could just
82:50 - go here and control and space and and
82:52 - then press enter that's basically adds
82:54 - the create product here and the same
82:56 - thing goes for the next one which is the
82:58 - update you know update a product so you
83:00 - just add update a product right here
83:02 - remember that uh update a product so
83:05 - essentially it's also router dot now how
83:07 - to update remember put and then um when
83:11 - we want to update something we have to
83:13 - actually have its ID so call in ID and
83:17 - then we'll have you know the function
83:19 - which is called update a product so
83:21 - update product product okay will be the
83:24 - function and we don't have it right now
83:25 - so we'll just have to add it right here
83:27 - so it's pretty simple again all we got
83:29 - to do is Con update product update
83:32 - product and then what we can do is async
83:35 - again is equal to
83:38 - async request and response and then we
83:41 - just put in this semicolon right here
83:44 - and then over here we just want to put
83:45 - in the update a product so this this
83:48 - thing will just go in which is this
83:50 - entire thing okay just copy this entire
83:53 - thing and bring it in here so like that
83:57 - and now uh once this is there you could
84:00 - just remove this entirely so this updata
84:02 - product is removed successfully from
84:04 - this
84:05 - index.js uh
84:08 - and this should be essentially like that
84:12 - okay so now we have that and you know
84:14 - it's complaining so just go here and
84:16 - press control and space okay it's not
84:18 - giving me any suggestion because it's
84:19 - not exported through that list right so
84:21 - we have to go back here and we have to
84:23 - add this through the list so we'll have
84:25 - comma and then we'll have update product
84:26 - and now it's going to give me the
84:27 - suggestion so it's going to go here and
84:30 - there control space and then there you
84:31 - go the last one is delete one so it's
84:34 - basically called delete delete a product
84:37 - and then over here it's router. delete
84:40 - and then we have its ID so slash Callin
84:42 - ID and then we have the delete product
84:46 - function okay and then normally we have
84:49 - to do the same thing over here so we
84:50 - have to go here um right right after
84:52 - this function we have con delete product
84:55 - okay and then we have async uh async
85:00 - request response and then we have this
85:03 - we could put in again the same thing
85:05 - from index.js this this thing will be
85:08 - from here all the way to this catch so
85:13 - copy this entire thing and just paste it
85:16 - right here also you could just remove
85:17 - this entirely now you don't need this
85:19 - delete as well and you could just you
85:21 - know click C at all so essentially now
85:25 - we just have the single route so look
85:27 - how clean this index.js has gotten now
85:30 - what we have to do is just finalize
85:31 - everything um so over here we have this
85:34 - delete and over here we're just going to
85:36 - have comma and then we'll have delete
85:38 - product and over here we'll just put in
85:40 - the delete product so we make sure we
85:42 - have um control and space and then
85:45 - delete okay great so now that everything
85:47 - is there I mean it's imported over here
85:49 - and it should be working SL API products
85:53 - um so everything seems to be fine and
85:56 - you know we have format document just to
85:59 - make it a little formatted and let me
86:01 - just show you a little zoomed out view
86:03 - so this is the uh you know the delete
86:05 - controller this is the update uh product
86:08 - controller and then the create up
86:10 - product controller get product
86:11 - controller get products controller so
86:14 - you can see that this is all requiring
86:15 - model and this is all working so bu is a
86:18 - common uh JS module it can be convered
86:20 - to an es model so it's it's okay I mean
86:23 - you could use the um es6 way of doing it
86:27 - but you know we're fine with this but
86:29 - you know everything looks good and we
86:31 - have these routes that are configured in
86:33 - the product. route and these are all
86:35 - going to call these functions so you can
86:36 - see if I just normally do get and then
86:39 - I'll call the get products if I normally
86:40 - have get with this ID I'll get the get
86:42 - product function uh different from the
86:45 - get products function and if I have
86:47 - normal uh URL of/ API SL products uh
86:51 - then it would
86:52 - have with a post method it will create a
86:54 - product for me and if I have an/ API
86:57 - products with an ID and it's a put
86:59 - method it's going to go to the update
87:00 - product method which is right here and
87:02 - if I go and do/ API products uh with a
87:07 - with an ID and and it's a delete method
87:09 - I go to the delete product and basically
87:10 - it will delete the product for me so
87:12 - this is pretty really I mean really
87:15 - convenient and organized looks very nice
87:17 - and this is how it's professionally done
87:19 - so you can see over here that we have
87:20 - all of this done middleware outs and
87:22 - then this is just normal you know
87:24 - testing hello from node ABIA and this is
87:26 - our connection so let's go and see if
87:29 - this is uh still warning and you can see
87:30 - that the database and server is still
87:32 - running let's go and now what we're
87:34 - going to do is we're just going to add
87:35 - in a product again again nothing has
87:38 - been majorly updated or changed so we
87:41 - could just go to um back to our you know
87:45 - that API let's suppose I go to add one
87:48 - product so add a product so you can see
87:50 - I could go add a product so over here we
87:52 - have SL products right you can add
87:54 - through form or we could also through
87:56 - Json so I'm just going to have through
87:58 - form again um and let's have let's say
88:02 - um we have juice okay and juice is
88:08 - for 5.99 the quantity for what I do okay
88:12 - the quantity for juice is uh 100 or
88:16 - let's say 210 I don't know so let's send
88:18 - it and now you can see juice is added I
88:20 - mean nothing happened I mean it's
88:21 - everything is working okay so if juice
88:24 - is added can we view all these so then
88:26 - just copy this and you could actually
88:29 - view it in their browser as well so if
88:31 - you do this you could see that all these
88:34 - lists are working I mean it didn't
88:36 - basically impact the API performance of
88:39 - pancake doughnut cheesecake chocolate
88:41 - and juice have all been there nothing is
88:44 - being broken and nothing seems to break
88:46 - everything seems to work so you could
88:48 - see if I want to um add uh this is the
88:52 - the ad so get API so if I just send you
88:54 - can see now all of these things are
88:56 - being populated here if you want to you
88:58 - know delete anything suppose I don't
89:00 - really want you know cheesecake I could
89:02 - just get this
89:04 - ID first of all let's copy this and we
89:07 - can actually update the ID as well right
89:09 - now try to update Pizza it's not going
89:11 - to allow you because uh it can't find it
89:13 - 404 right we could put a really good
89:15 - message over there and that's something
89:17 - that I want you to put a message using
89:19 - you know response but right now you can
89:20 - see that this is the now I changed it to
89:22 - the updated uh so cheesecake so cheese
89:26 - I'll just write it and then the price
89:28 - and then I press okay so now over here
89:30 - we have
89:31 - slash API SL products now this is
89:34 - important now whenever when I you know I
89:36 - did the organized way to do the route
89:38 - and controller I changed all of them
89:40 - from now so everything has Now a/ API
89:43 - products now if I do this you can see
89:45 - that the cheesecake has been updated and
89:49 - you could view this uh cheesecake by
89:51 - using get API and this would uh
89:54 - basically send it and you could see over
89:55 - here pancake dut updated cheese okay and
89:58 - then we have chocolate if you want to
89:59 - delete the cheesecake uh you could just
90:02 - have this you know from here with the ID
90:05 - passed in but again the product will be
90:07 - changed to products and this is the
90:09 - delete method and now if I press send
90:11 - you can see product deleted successfully
90:13 - and if I want to review all the products
90:15 - so I'll do here and I press send again
90:17 - and you can see pancake dut chocolate
90:19 - and juice so one final thing I wanted to
90:21 - do was to add this into GitHub so this
90:24 - code that I added I wanted all of this
90:26 - to be populated on GitHub so what we
90:29 - could do is we could go to github.com
90:31 - so what we could do is essentially I'll
90:35 - go to my GitHub account
90:37 - so and then over here we have this plus
90:40 - button and create a repository and we'll
90:44 - you know we'll call it
90:46 - simple uh so we'll say
90:49 - simple crud
90:52 - app and we'll say
90:55 - backend
90:57 - okay and then over here we'll have it
90:59 - public and we'll create
91:01 - repository and then over here we could
91:03 - just initialize using this command so
91:06 - make sure you have that so what you
91:08 - could do is this is the uh directory
91:10 - here you could just go and do
91:13 - CMD this opens up the command prompt you
91:16 - could have the following uh commands
91:18 - typed so first first command is I would
91:22 - uh you know I'll just turn off this
91:24 - because we don't need this for now and
91:25 - now what we're going to do is we could
91:27 - just go here and uh first man so we
91:31 - could go here okay and what we could do
91:34 - first is we could have get in it which
91:37 - is initializing the G um and then after
91:40 - that we have get add all the files so we
91:43 - just say get add everything okay now I
91:45 - didn't have to do slash but dot okay so
91:48 - this means I added everything then after
91:50 - I do get commit I an m and I say first
91:55 - commit all right so you could just do
91:57 - any message you want I just do okay now
92:00 - after that we want git
92:02 - Branch hyphen M and then hyphen M and
92:07 - then we have main branch okay so now
92:10 - this is on the main branch then I want
92:11 - to get
92:13 - remote uh add origin and I have to put
92:17 - in the URL of that repo so basically
92:20 - just copy this uh and you have to put it
92:23 - in the URL path here so right there so
92:26 - get remote at origin and then once you
92:29 - have everything finalize you just do get
92:31 - push hien new origin and then main if
92:34 - you do this and press enter this would
92:37 - update this on GitHub so now you could
92:39 - see that everything is on GitHub which
92:43 - is great and you could see one other
92:44 - thing that node modules isn't existing
92:46 - here and the reason why I did that was
92:48 - because I put it in this uh you know dog
92:52 - and you could see that get ignore didn't
92:53 - include the node modules which is pretty
92:55 - heavy and bulky and you don't want that
92:57 - and you could also put in your you know
92:58 - EnV variables your credentials and all
93:00 - these stuff could go in the uhv file and
93:04 - then you could put in the EnV in the
93:06 - ignore so yeah these are the things um
93:08 - and precautions I'll put this link into
93:10 - the uh description so thank you so much
93:12 - for watching