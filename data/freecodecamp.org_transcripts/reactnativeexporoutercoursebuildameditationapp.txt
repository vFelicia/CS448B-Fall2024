00:00 - improve your react native skills by
00:02 - building a meditation app using Expo
00:05 - Steven Garcia teaches this course which
00:07 - utilizes typescript react native wind
00:10 - react native and Expo to develop a
00:13 - simple mobile
00:16 - app in this course we'll be building a
00:19 - simple meditation app in Expo react
00:21 - native so here if I refresh the screen
00:24 - and press reload we get this icon on the
00:27 - splash screen and then we see this
00:29 - initial page
00:30 - we can click get started and this takes
00:33 - us to a screen where we have different
00:34 - meditation previews so here we can
00:36 - scroll vertically we can click on one of
00:39 - the
00:39 - items and here we see a duration of 10
00:42 - seconds we can click the adjust duration
00:46 - which brings up this modal and we can
00:48 - select to change the duration such as 5
00:51 - minutes now when we click the start
00:53 - button this will start the countdown
00:54 - timer and play a song in the
00:58 - background you can press stop and the
01:01 - back button now here in the bottom tab
01:03 - we also have a screen for positive
01:05 - affirmations so here when we click on
01:07 - that we see different categories and we
01:10 - can scroll horizontally let's see if we
01:12 - click on
01:13 - one then here we see a positive
01:16 - affirmation in a scroll view I can
01:19 - scroll down and select other ones as
01:23 - well also notice that in this background
01:25 - we are using a linear gradient and so in
01:28 - this project this will tie in your
01:29 - skills of HTML 5 and CSS 3 as well as
01:33 - JavaScript react and tailwind and Expo
01:35 - react native so this will showcase what
01:38 - you can build once you learn all these
01:41 - skills so before we get started be sure
01:44 - to check out the GitHub repository
01:46 - associated with this course and I'll be
01:47 - providing that link in the description
01:49 - so if I scroll down to the read me
01:52 - section this will provide the
01:54 - instructions of how to clone this
01:55 - repository as well as how to install the
01:57 - project dependencies
01:59 - there is a section for Snippets so when
02:01 - we get to this part of the course I will
02:03 - reference and let you know which part
02:04 - you want to copy to save you from having
02:07 - to type all this
02:09 - out also to download all the assets you
02:12 - can click on this link
02:14 - here which will open up a folder in my
02:17 - Google Drive and here you can download
02:19 - the images fonts and audio files as well
02:23 - as the logo for the splash
02:25 - screen another quick tip one way to view
02:27 - the project files is to press the period
02:30 - key and this will open up visual studio
02:32 - code in your
02:34 - browser this provides a convenient way
02:36 - to view the project without having to
02:38 - clone the
02:42 - project so before we get started one
02:44 - thing that I wanted to make note of is
02:46 - that this course is not beginner
02:48 - friendly it does make a lot of
02:49 - assumptions that you have a solid
02:51 - understanding of web development
02:53 - fundamentals so if I click on courses on
02:56 - my website at stepcraft tocom I'm
02:58 - currently working on creating more
03:00 - beginner friendly courses which teaches
03:02 - you all the fundamentals that you would
03:03 - need so upcoming courses that I'm
03:05 - working on include HTML 5 and CSS 3 the
03:09 - command
03:10 - line JavaScript Pro typescript
03:14 - Mastery Tailwind CSS react Mastery and
03:18 - Expo react native before we get started
03:21 - if you're interested in supporting my
03:22 - courses and projects you can follow me
03:23 - on my new YouTube channel and Instagram
03:25 - at@ Steven codra and if you're looking
03:27 - to enhance your health and fitness
03:28 - routine check out my workout planning
03:30 - app at fitfuel planner.com the app
03:32 - offers over 100 recipes workout plans
03:34 - meal plans and a grocery list feature
03:37 - it's designed to make tracking your
03:38 - calories and macronutrients
03:39 - straightforward and stressfree I
03:41 - appreciate your support and I'll see you
03:42 - in the next
03:45 - [Music]
03:47 - section so when building an app in Expo
03:49 - react native during local development
03:51 - you will run the application on a
03:52 - simulator so if you're working on a
03:54 - MacBook you would use xcode in order to
03:56 - run an iOS simulator you could also run
03:58 - Android Studio and run an Android
04:00 - emulator so if you're on Mac OS go to
04:03 - the App Store and search xcode so this
04:05 - is an integrated development environment
04:07 - for developing iOS applications and then
04:10 - install this application so since this
04:11 - is a large application it'll take about
04:13 - 30 minutes to download So after you
04:15 - download it click open so sode open do
04:20 - the drop down and then
04:22 - settings so select locations and ensure
04:25 - that you have the command line tools
04:27 - installed so once you have ensured that
04:30 - with s
04:31 - code go to open developer tool and then
04:39 - simulator so our simulator opens up you
04:42 - can also go to file and new
04:46 - simulator you can select the device type
04:49 - open up and create a new
04:52 - simulator now for running an Android
04:54 - emulator you need to install Android
04:56 - Studio so navigate to
04:57 - developer.android.com
04:59 - for SL
05:02 - studio so open up Android
05:06 - Studio so then click on the drop down of
05:09 - more
05:10 - actions and then SDK
05:14 - manager so here when you have Android
05:16 - SDK selected you want to install the
05:19 - latest version so for me that's Android
05:22 - 14 on SDK tools you want to install the
05:27 - Android emulator the Android SDK
05:29 - platform tools and here the Intel
05:32 - emulator accelerator so once you select
05:34 - these check boxes then click
05:37 - apply now for specific information on
05:40 - how to run your Expo application on a
05:42 - simulator navigate to the GitHub
05:44 - repository for this project so scroll
05:47 - down so right before the Snippets I have
05:51 - a section for the iOS simulator and the
05:53 - Android emulator so when I click on this
05:55 - link this opens up the Expo
05:57 - documentation
05:59 - and this provides information on how you
06:01 - can get it installed and the different
06:03 - commands to
06:05 - run also for the Android Studio emulator
06:08 - the instructions are different whether
06:10 - you are working on a Mac OS or on
06:12 - windows so be sure to select the one for
06:15 - your operating system and follow the
06:17 - commands on this
06:19 - documentation so before we get started
06:21 - with Visual Studio code open go to the
06:24 - extensions icon and search
06:27 - for the prettier extension
06:30 - so this code formatter you want to
06:32 - install this after installing it you
06:34 - want to open up your settings which you
06:36 - can do by clicking on this icon or the
06:38 - keyboard shortcut is command and comma
06:41 - or control and
06:43 - comma and then search format on
06:46 - Save and you want to ensure that this
06:48 - checkbox is checked so when this enabled
06:52 - whenever you save a file Visual Studio
06:53 - code will use the prettier extension to
06:56 - format your code this helps you stay
06:58 - organized
07:00 - [Music]
07:02 - so with a visual Studio C open right
07:03 - click on your desktop and create a new
07:05 - folder you can name the server you like
07:08 - I'll name this
07:09 - meditations we'll just name it
07:12 - meditation now you can drag and drop it
07:14 - into Visual Studio code to open up this
07:17 - folder then click on the extensions icon
07:21 - now these extensions are not absolutely
07:22 - necessary but it does improve your
07:24 - productivity so let's expand it to be
07:26 - the full screen also I'll list in in the
07:29 - description of this video all the
07:31 - extensions that I
07:32 - recommend going through the ones that I
07:34 - have installed
07:35 - already so you want to install es7 plus
07:39 - react Redux react native Snippets and
07:42 - this will allow you to use keyboard
07:44 - shortcuts we also want to install Expo
07:48 - tools the prettier code formatter
07:51 - extension rack native
07:55 - tools Tailwind CSS intellisense for our
07:59 - styles
08:00 - and optional one is vs code icons if you
08:02 - do install this one then bring up your
08:04 - command pallet which will be control
08:06 - shift p or command shift p and then type
08:09 - in icons activate vs code icons so now
08:13 - you did that let's refer to the Expo
08:16 - documentation which is at the URL of
08:19 - docs. Expo Dev SL router SL installation
08:23 - so because the Expo framework is
08:25 - constantly being updated be sure to
08:27 - refer to the latest documentation to
08:29 - know which commands to run to start your
08:31 - project so here we see the First Command
08:33 - we want to run which will create the
08:34 - boilerplate folders and files that we
08:37 - need to run an expo react native project
08:39 - is MPX create Expo app and we want to
08:42 - install the latest version of the
08:43 - framework so we can just copy this I can
08:47 - show the command prompt with command
08:50 - J or control and backtick then simply
08:54 - paste that in here so node package
08:56 - execute this will create our new project
08:59 - so we want to name this simple
09:01 - meditation so here we see created a new
09:04 - folder now it's installing the necessary
09:07 - dependencies so our new project has been
09:09 - successfully created so here we can
09:11 - clear this out and let's expand that
09:13 - generated For Us close this out now I'm
09:16 - going to make this larger so I'll go to
09:18 - my settings with command and comma so
09:20 - you don't have to do this this is just
09:22 - so it's easier for you to see the code
09:23 - in the video I'll change the zoom level
09:26 - to two making it larger so here we see
09:29 - we have the app directory and in this
09:32 - folder will contain all the source code
09:34 - for our
09:35 - application we also have the assets
09:38 - folder which contains static assets
09:40 - components which contains reusable react
09:43 - native
09:44 - components constants we have react hooks
09:48 - scripts and other configuration files so
09:52 - scrolling back if we want to start our
09:53 - project we would do that with MPX Expo
09:57 - start
09:59 - so now let's open up our command
10:01 - prompt list everything out and we'll
10:03 - change into simple
10:06 - meditation and then we'll run MPX so no
10:09 - package execute expose start and then
10:12 - pass in the flag dash dash clear to
10:16 - clear the
10:18 - cache so here we see it's showing a QR
10:21 - code so we can scan it with our device
10:24 - and we can see our application on our
10:25 - phone now in order for us to do this we
10:28 - need to download EXP Expo go so I go
10:31 - back here Expo go which is
10:34 - free it's available on the App Store and
10:37 - the Google Play
10:38 - Store so once you download this
10:41 - application based on your device you'll
10:43 - be able to view it on a physical device
10:47 - now you can also run it in local
10:49 - development you can either run it in the
10:51 - web browser by pressing W you can run it
10:54 - on iOS simulator by pressing I now in
10:57 - order for this to work you need to have
10:59 - X code installed and you also need to be
11:02 - developing on a map you can also press a
11:05 - to open on an Android virtual device and
11:07 - this assumes that you have Android
11:09 - Studio installed so I'll run it on my
11:11 - iOS simulator so I'll press
11:14 - I this brings up the
11:17 - simulator so also you're bound to see
11:19 - errors during development so if you do
11:22 - encounter any error in this process be
11:24 - sure to copy this and paste it into
11:26 - either Google stack Overflow or chat GPT
11:28 - to help resolve that
11:30 - this just says that the simulator is
11:31 - taking a long time to start up the
11:33 - operation has timed out so we're just
11:35 - waiting for
11:36 - it so here we see this is the initial
11:39 - start page so here I'll do control and
11:41 - back tick to close the terminal so here
11:43 - if I expand the app directory I see that
11:46 - it's created so many new boiler plate
11:48 - files for me see if I click into one of
11:50 - them such as the index one so this is
11:53 - the component that is being used to
11:55 - display the current screen now since it
11:57 - is displaying a lot of content we want
12:00 - to clear everything out and start from
12:02 - scratch we'll go through and we'll
12:05 - delete
12:06 - everything we also delete all these
12:11 - Styles view component and then text I'll
12:15 - just say hello
12:17 - world now you want to import this so do
12:21 - control and Dot update and also we want
12:25 - to install text so I'll just manually do
12:28 - that here
12:31 - and I will remove this because we aren't
12:32 - using those
12:34 - components now if I save
12:37 - it this will perform hot reloading and
12:40 - so here I see Hello World is displayed
12:42 - in the top left but it's being cut off
12:44 - so I want to install some more Styles
12:46 - let's say if I do
12:48 - container and I
12:50 - do Flex
12:53 - one and I do justify content and we'll
12:56 - do Center
13:00 - how to apply this I do style and then
13:03 - styles do
13:05 - container this applies that style and
13:08 - here I see it's displayed uh vertically
13:10 - centered I also want it horizontally
13:12 - centered so I'll do a line
13:15 - items
13:17 - Center and this completely centers it in
13:20 - the center of the screen now I like
13:22 - sorting this alphabetically so I'll
13:24 - bring up the command pallet command
13:26 - shift p and I'll do sort
13:29 - and this sorts these key value pairs for
13:32 - me help me stay
13:35 - organized so here we see we have a tab
13:39 - layout and we have updated our initial
13:43 - screen now one thing I want to do I want
13:45 - to clear out all the B plate files that
13:47 - generated for us so this also includes
13:50 - these test
13:52 - files go here and we'll just delete all
13:55 - of
13:56 - it cuz we want to create it from scratch
13:58 - so we have better understanding of our
13:59 - source
14:02 - code
14:06 - likewise what we just did in this index
14:08 - file we copy everything here and we want
14:11 - to clear everything out we'll just
14:13 - delete this tab
14:15 - directory and everything in here as well
14:18 - so deleting everything so in the app
14:20 - directory in Expo react native we're
14:22 - using Expo router which provides file
14:24 - based routing so this is similar to how
14:26 - it would be in a framework such as
14:28 - nextjs and it makes it more similar to
14:31 - web development when it comes to
14:33 - achieving navigation so the home would
14:36 - be
14:37 - index.
14:39 - jsx we'll paste that in here we'll save
14:43 - it let's expand
14:48 - here now that we refreshed it we see
14:51 - Hello World and without the tab
14:53 - [Music]
14:55 - bar so now let's add all the asset files
14:58 - that we're going to need for this
14:59 - project so once again in the GitHub repo
15:02 - click on this link to open up to Google
15:05 - Drive then this drop down and we can
15:07 - download
15:10 - that so after it's downloaded let's copy
15:13 - all of this and we'll drag and drop it
15:15 - into
15:17 - assets we'll replace it to the fonts
15:20 - directory so we'll close the assets
15:22 - directory and now we want to add our
15:25 - constant files let's go back and we'll
15:28 - go back to the repo and this is where we
15:31 - use our Snippets so here if we do this
15:34 - this is the TP scrip file which Imports
15:36 - our affirmation images we'll copy
15:40 - this and in constants We'll add a new
15:42 - file and we'll name this affirmation
15:45 - hyphen images. typescript then we will
15:48 - paste that in here so looking at this
15:51 - file we see that we import all the
15:54 - assets for the affirmation images and we
15:57 - export it as a JavaScript object
16:00 - we can close this going back we'll close
16:03 - this
16:04 - out now we copy for our meditation
16:08 - images we'll name this meditation
16:12 - images. typescript paste that in
16:17 - here now for our meditation data we'll
16:21 - copy
16:22 - this and we'll name this meditation
16:27 - data pasting that and so here we see
16:31 - we've defined an interface and
16:32 - typescript for our meditation type and
16:36 - this specifies the ID title image name
16:39 - and audio name we also create an array
16:42 - of this type and these Define the
16:45 - previews that we're going to be showing
16:46 - on the meditation
16:48 - screen now we also Define an object for
16:50 - our audio files and so this is a key
16:53 - mapping pair which Maps the name of the
16:55 - audio file with the import statement and
16:57 - the actual audio file now let's update
16:59 - our colorscript file so here we'll just
17:01 - clear this out and we'll simplify it to
17:04 - be export default and we'll say primary
17:08 - that would be 0 a 4 D4
17:12 - a we'll do
17:14 - gray which is 5 e 5D
17:20 - 5e and
17:22 - dark which
17:24 - is 1 a 1 a 1 a
17:29 - saving
17:31 - that so let's curl these
17:35 - files and so one thing I named this with
17:37 - the jsx extension I can change that to
17:40 - be TSX since we're using
17:42 - typescript so one more file that we want
17:44 - to add is a t script file for the
17:47 - affirmations
17:49 - Gallery so we can copy
17:52 - this in our constant file we will add
17:57 - affirmations High in
17:59 - gallery. typescript we'll paste this in
18:03 - here so let's look over this file here
18:05 - we see we import the affirmation images
18:08 - object that we had to find in
18:10 - affirmation images so if I go there just
18:13 - to remind you that this is where we
18:15 - imported and exported all these image
18:17 - files so back in affirmations Gallery
18:21 - then I Define an array consisting of
18:23 - JavaScript objects which Define the
18:26 - affirmation title so this is the title
18:28 - of the CATE ategory and an array which
18:30 - we access with the data key or data
18:32 - property this defines the IDS the text
18:35 - and the image to
18:38 - use so next we want to install native
18:41 - wind so this uses Tailwind CSS and
18:43 - allows us to use the Tailwind class
18:45 - names in our react native projects so we
18:48 - want to click on the Expo quick starts
18:50 - which will let us know what commands we
18:51 - will have to run in the terminal so
18:53 - we've already ran these commands to
18:54 - create our Expo app and we're using mpm
18:57 - as our package manager so we can do mpm
19:00 - install native win we'll close this and
19:03 - run it that was successful now we
19:07 - install Tailwind as a developer
19:10 - dependency going back so now we run MPX
19:14 - Tailwind CSS andit in order to
19:16 - initialize our configuration
19:19 - file we'll run
19:21 - that closing this terminal and
19:23 - navigating to our Tailwind config
19:26 - file once again you want to navigate to
19:28 - the GitHub repository which will be here
19:30 - and here in the snippet section you want
19:33 - to copy this file and we will replace it
19:37 - here so here we specify what component
19:40 - files we want to use native wi and we
19:42 - also specify the font family for the
19:44 - custom fonts that we added going back
19:47 - let's refer back to these
19:49 - docs now we also need to add this in the
19:52 - plugin section is native wi/ Babble and
19:56 - our Babel config file so here in the
19:59 - sidebar appable config and then we will
20:02 - add
20:04 - plugins p in that here so let's run our
20:07 - project again we do MPX Expo
20:12 - start closing this
20:15 - out press I to open up in the iOS
20:18 - simulator let's refresh this so command
20:22 - D and then reload so now let's close
20:26 - this and we'll navigate to our homepage
20:28 - again again and we'll apply a native
20:30 - wind
20:31 - style So currently we're using style
20:33 - sheets built into react
20:35 - native so let's remove this and we'll
20:39 - specify class
20:40 - name we'll say Flex one we'll say
20:45 - justify Center and item
20:48 - Center and here we see the same styles
20:51 - are being applied so order to get rid of
20:53 - this squiggly line in vs code We'll add
20:55 - a declaration file in simple meditation
20:59 - so at.
21:07 - D.S we see vs code is no longer showing
21:10 - that squiggly line when we specify the
21:12 - class
21:16 - name so let's Implement our home screen
21:18 - so I'll clear everything out here and
21:19 - we'll start from scratch and we use a
21:21 - snippet and keyboard shortcut which is
21:24 - react native function export then tab
21:28 - and will name this app let's save that I
21:32 - open up
21:34 - this and press I open up the simulator
21:39 - again so here we see our text app is
21:42 - displayed in the top left so now we'll
21:44 - apply a class name
21:47 - here say it's Flex
21:49 - one to take up the entire
21:52 - height and we want to use a background
21:55 - image so we go into assets and then
21:57 - meditation images is we want to use this
22:00 - image of the
22:03 - beach so we'll use that here we'll use
22:06 - the image background component bu into
22:09 - react
22:10 - native and we'll apply the
22:14 - props so let's
22:17 - import name a beach image from at which
22:23 - means from the root then assets
22:26 - meditation images and then beach.
22:30 - webp save that now we'll apply
22:35 - source to that image the resize
22:39 - mode will be
22:41 - cover and we'll apply a class
22:44 - name of Flex one save
22:48 - that so now the image is being displayed
22:52 - but we see it's still showing y above
22:55 - and white below and the text is on the
22:57 - bottom so first we'll move the text
23:00 - within those opening closing tags of the
23:02 - image background
23:03 - component so now app is being displayed
23:06 - within it so now let's add a shared
23:08 - layout route so add a new file and we'll
23:12 - name it uncore layout. TSS and the
23:15 - nameing convention is important so in
23:16 - Expo router we can add a layout file at
23:20 - every single directory and this will
23:22 - Define shared user interface components
23:24 - for every file within that
23:27 - directory so I'll name this as export
23:31 - default function and I'll name this root
23:35 - layout and then we will simply return
23:38 - the component slot from Expo router so
23:42 - import that import slot from Expo
23:47 - router so this component acts the same
23:50 - as the children prop in web applications
23:52 - and basically this will render the child
23:54 - route in its place so in this case it
23:57 - will render this index index page this
23:59 - app component so we'll save
24:02 - this and here we see the image now spans
24:05 - the entire height so we want to apply a
24:07 - linear gradient on the screen and we
24:09 - need to import a library so click this
24:13 - plus
24:15 - icon and we'll change to our
24:19 - directory so now we go here for Expo
24:23 - linear gradient which is the package
24:24 - we'll be using we can copy this to
24:27 - install that
24:29 - paste it in
24:32 - here okay so close this close that out
24:37 - closing the terminal so now we can
24:39 - utilize that component here so it'll be
24:42 - linear
24:45 - gradient move this up be within
24:49 - it let's import that so we're not
24:53 - getting the Auto Import right now so
24:54 - we'll just do it manually so it'll be
24:56 - import
24:58 - linear
25:00 - gradient from xfo linear
25:04 - gradient I we use the class
25:07 - name of Flex
25:11 - one
25:12 - and we'll apply the color
25:15 - prop we'll specify the
25:19 - array RGB a of 0 0 0 and 0.4
25:28 - and then
25:30 - rgba of 0 0 and
25:35 - 0.8 and this with a parentheses we can
25:38 - save
25:41 - that and here we see our linear gradient
25:44 - is being applied so we know that our
25:46 - text is still being displayed on the top
25:48 - left so let's use a safe area
25:52 - view safe area
25:56 - view see we get this
26:00 - import and move the text within
26:02 - it and so now we see our text is being
26:05 - displayed here so we'll use class
26:09 - name text
26:11 - Center
26:13 - Center text
26:17 - y we'll make it
26:19 - bold and for
26:24 - XL so now it's more visible and let's
26:27 - highlight this and let's wrap it in a
26:29 - view so we'll bring up the command pet
26:32 - and then emit wrap with abbreviation
26:36 - View and here we will name this simple
26:42 - meditation let's apply some styles to
26:45 - our safe area view so we'll
26:49 - say FX
26:51 - one horizontal padding of one and
26:55 - justify between and let's add our
26:57 - subtext text so that would be
27:00 - text and it's
27:03 - simplifying
27:05 - simplifying meditation for
27:11 - everyone apply a class
27:13 - name this will also be text Center text
27:17 - white the size is 2 XL and we'll apply
27:22 - margin top with
27:24 - three so now we have this being
27:26 - displayed as the header now think if you
27:28 - notice the time as well as the battery
27:31 - is currently dark so let's apply the
27:33 - status bar so we can do that just before
27:37 - the closing element or closing component
27:39 - of the safe area view so it'll be status
27:42 - bar from react native the style prop of
27:47 - light and it soft closing
27:52 - see status
27:55 - bar save that so actually from Expo
27:59 - status bar so we're not using that from
28:02 - react native instead it's supposed to be
28:06 - import status bar
28:09 - from Expo status
28:12 - bar and that makes it white for us good
28:15 - so now after this text we add another
28:19 - view and we can create a button so
28:22 - because we'll be creating buttons
28:23 - throughout this course we can make it a
28:25 - reusable component so we going into to
28:29 - components new
28:31 - file we'll call this custom button. TSX
28:36 - so once again we would do react native
28:38 - function export and tab now we do a
28:41 - touchable
28:44 - opacity touchable
28:47 - opacity now we want to specify an
28:50 - interface for our props so it be
28:53 - interface custom button
28:56 - props so we can specify the onpress
29:00 - function which will return void the
29:03 - title which would be a
29:05 - string optional text
29:09 - Styles which should be
29:11 - string and optional container
29:17 - Styles how we can destructure
29:20 - that from the props so specify on press
29:25 - title text styles
29:29 - which by default be an empty string
29:32 - container
29:34 - Styles which by default is an empty
29:37 - string we specify custom button props
29:41 - save that so now we specify the title
29:45 - here we specify the active opacity to be
29:51 - 0.7 and we'll specify classes put this
29:54 - on a new line
29:56 - here class name
30:00 - and we'll use a back tick so we can use
30:02 - interpolation here so the background
30:04 - will be white will'll be rounded
30:08 - XL we specify a minimum height of 62
30:15 - pixels or Justify Center and item
30:20 - Center and here we will apply the
30:23 - container
30:24 - Styles we is pass in as a prop
30:29 - and we'll also set the onpress event
30:31 - handler so onpress so for
30:35 - text app class
30:37 - name once again we'll use the cly
30:41 - brackets back to Ser specify font semi
30:46 - bold text large and applying text
30:52 - Styles save
30:55 - that so now let's utilize this custom
30:58 - component in our
30:59 - homepage so now we can utilize this
31:01 - custom button in our homepage so we'll
31:04 - specify this here custom button to
31:07 - import that we'll specify on press for
31:11 - now to just be a console log so
31:13 - console.log say
31:16 - tap and the title will be get
31:22 - started see here and it's s
31:25 - closing save that
31:28 - and here we see our get started button
31:30 - is displayed on the bottom and so here
31:32 - we see our button is spanning the entire
31:35 - width of the screen so instead of using
31:38 - horizontal padding for the safe area
31:40 - view let's make it a margin MX and we'll
31:44 - speci that to be
31:46 - five so now it's no longer spanding the
31:48 - entire width so now we'll set a margin
31:53 - horizontal and let's make that eight
31:58 - how we try
31:59 - 12 okay so that's more
32:04 - visible so another we want to do go to
32:06 - the sidebar go into app. Json we want to
32:10 - specify what we want our Splash image to
32:13 - be so go into our assets we want it to
32:18 - be the simple meditation
32:22 - logo we'll specify that
32:25 - here simple
32:29 - meditation
32:31 - logo now we can save
32:33 - that and it's not in the images it's
32:36 - actually at the root of the assets so we
32:38 - can save that so let's close the sidebar
32:42 - and let's do command D and then reload
32:45 - and now we see our splash screen logo
32:47 - being
32:49 - [Music]
32:50 - displayed so let's make sure that when
32:53 - we actually press this button that it's
32:55 - properly calling the console statement
32:58 - so we'll show that let's just clear
33:00 - everything out so we can easily see that
33:02 - now when we perform a click on it we see
33:04 - that we are getting our expected output
33:07 - so rather than simply logging into the
33:09 - console we want to route to another file
33:12 - so for now let's just add another file
33:16 - and we'll just call it test.
33:19 - TSX R native function
33:22 - export and it's just
33:25 - test so now it has that
33:28 - and now we will utilize the used router
33:31 - hook so const
33:33 - router Ed router from Expo
33:37 - router and now we can use this to
33:40 - navigate to that
33:42 - file so we can call router.
33:47 - Push n OB
33:50 - test so this route name that we use is
33:54 - based on the name of the file that we
33:56 - just created which is test. TSX so now
33:59 - when we click get started this takes us
34:02 - to the test page now the text is being
34:04 - displayed in the top left so once again
34:07 - we'll just apply that class name of Flex
34:11 - one justify Center and item
34:16 - Center and here we see test is being
34:19 - displayed in the center of the
34:23 - screen so now we'll do command
34:26 - d reload this go back to the home screen
34:31 - so now we want to add a tab navigation
34:33 - so open up the
34:35 - sidebar and we'll add a new
34:38 - directory and we'll put it in
34:39 - parentheses so an explore router this
34:41 - defines a group so we'll call it
34:45 - tabs and so essentially a group is a
34:47 - directory where we can organize
34:48 - different files and this name of the
34:51 - directory tabs will not show in the
34:54 - URL so in other words when we navigate
34:57 - to it we don't have to include tabs in
34:59 - the path so now we can add a new file
35:01 - here and I'll name this nature nature
35:06 - meditate
35:08 - TSX react native function export and tab
35:12 - I'll just name this nature
35:15 - meditate saving that so now instead of
35:18 - navigating to this test
35:21 - file we can navigate to Nature
35:25 - meditate and because we wrapped it in a
35:27 - group we don't have to include tabs in
35:29 - this path so now when we click get
35:32 - started it takes us to the nature
35:34 - meditate page rather than this test page
35:37 - so let's remove this we no longer need
35:41 - it so one thing to know we will also be
35:44 - using a linear gradient in this nature
35:46 - meditate component so rather than having
35:49 - to duplicate that as well as the safe
35:52 - area view within it let's create a
35:54 - reusable component which we can use for
35:56 - both of these components
35:59 - so in the components
36:00 - directory we can
36:02 - add we'll name it app
36:04 - gradient.
36:07 - TSX react native function export app
36:10 - gradient so in here this will take in
36:14 - props of children which is the content
36:16 - that will be placed within it and
36:18 - colors and we just
36:22 - specify children to be any
36:29 - and
36:30 - colors could be an array of strings and
36:33 - save it and it's formatted for
36:36 - us now for the view we can use a linear
36:39 - gradient
36:40 - here linear gradient from Expo linear
36:44 - gradient adding that
36:48 - here and we'll pass in the colors
36:52 - prop and we'll specify a class
36:55 - name of Flex one
36:58 - now within
37:00 - it you can render the
37:05 - children and for the content so let's
37:07 - add another component here and I'll name
37:09 - this content.
37:12 - TSX react native function export and
37:15 - this will be we can clear this out a
37:20 - safe area
37:24 - View and once again this will take in
37:28 - children
37:32 - any pass that in
37:35 - here and we'll specify class name we'll
37:40 - say Flex
37:43 - one see horizontal padding of
37:46 - five and vertical padding setting that
37:49 - to
37:51 - three so now to utilize that within our
37:53 - app
37:55 - gradient and we'll import
37:59 - that clear these Imports
38:03 - up so now we Define our app gradian
38:06 - let's utilize that in our homepage so
38:08 - I'll be index
38:10 - TSX so rather than doing all this for
38:13 - now I'm just going to do uh
38:17 - gradient actually a better thing to do
38:18 - let's highlight all
38:20 - this be linear
38:22 - gradient bring up the command pallet
38:24 - command shift p wrap with the deviation
38:28 - and we would do app
38:32 - gradient let's import
38:36 - this and we need to pass in this colors
38:40 - property pass that
38:44 - in and so now we can remove the linear
38:48 - gradient is no longer
38:51 - needed save
38:54 - that now we can also can remove this
38:57 - margin that we
38:59 - specified let's just make it
39:03 - px1 okay
39:07 - good so now that we Define a reusable
39:10 - component with app gradient we can
39:12 - utilize that in our new file which is
39:15 - nature meditate so here we can specify a
39:18 - class
39:20 - name a flex
39:23 - one and let's actually navigate to it so
39:25 - we can actually see the changes
39:28 - so now we'll wrap everything in app
39:34 - gradient and we'll put this text in here
39:36 - so option and the up Arrow to move it
39:39 - and we need to pass in the
39:41 - colors which takes in an array of
39:43 - strings so we'll pass this in and we'll
39:47 - use the hexad decimal value of
39:50 - 161 B2
39:54 - e then we can do our hashtag
39:58 - 0 A4 D4
40:02 - a and then hash
40:06 - 766
40:08 - e67 let's save that and here we see this
40:11 - gradient being
40:12 - applied so
40:14 - now let's wrap this so bring up the
40:17 - command pallet with command shift and P
40:20 - we'll wrap it in a
40:22 - view and we'll specify a class name and
40:26 - I'll say margin bottom of six in this
40:30 - text we would do class
40:34 - name of text
40:37 - R I can do control and space bar to see
40:40 - the different
40:41 - options and I'll say 200 now margin
40:45 - bottom of
40:47 - three make the font
40:50 - bold change the size to be text for
40:53 - Excel and I'll say text let
40:57 - so the text Aline is to the left so we
41:01 - can also update this text to be
41:03 - welcome welcome and I'll just add my
41:05 - name
41:06 - here then one another
41:10 - text and I'll say
41:12 - start your meditation practice
41:18 - today now let's specify our
41:21 - Styles so this could be
41:24 - Tex
41:26 - Indigo and and I'll say
41:29 - 100 I'll do text XL for the size and the
41:33 - font
41:34 - medium okay so after add gradient I want
41:37 - to add say status
41:40 - bar status bar from Expo status bar
41:44 - style light soft closing so that makes
41:48 - it display white we want to add another
41:52 - view
41:55 - here and so we want to use the the flat
41:57 - list component and so this is the
41:59 - component that we will use for rendering
42:01 - either a vertical list or a horizontal
42:03 - list so we can do flat
42:07 - list and is self closing so let's import
42:10 - that command and Dot update import now
42:15 - we want to import the meditation data so
42:17 - we have that stored in constants so
42:20 - constants meditation data and so this is
42:24 - the array that we'll be using and we
42:25 - will be rendering this
42:27 - so just copy this and I can say
42:32 - import meditation data from so from the
42:37 - root so the at symbol and then
42:40 - constants and then meditation
42:43 - data so we got that and so we'll
42:46 - specify data to be the meditation
42:52 - data and save that so we can also say so
42:56 - if we do class name margin
42:59 - bottom and let's see the different
43:00 - options here let's just say 20 for
43:06 - now and we need to specify a key
43:08 - extractor so actually let me add these
43:10 - props on their own line so it's more
43:15 - readable so now we can do key
43:18 - extractor because every item in the list
43:20 - needs to be uniquely
43:22 - identifiable so pass in an item and
43:25 - we'll use item. ID
43:27 - and it has to be a string data type so
43:29 - two
43:32 - string now we don't want to show the
43:34 - vertical line as we're scrolling so I
43:36 - can say show vertical scroll indicator
43:40 - to
43:41 - false and then we'll do render item so
43:44 - in this prop we will specify what we
43:47 - want to display for each item in the
43:48 - list so we can destructure the item so
43:53 - parentheses and then destructure with
43:55 - curly braces the item
43:58 - let's press in the arrow
44:02 - function so this would
44:05 - be a
44:06 - pressable from react native and for now
44:09 - we to specify the onpress to console
44:13 - log console.log I'll just say press for
44:17 - now then we can
44:20 - specify let's add this on a new line so
44:22 - it's more
44:24 - readable add that here the class
44:29 - name the height
44:31 - 48 horizontal margin of three it'll be
44:37 - rounded and the Overflow is
44:41 - hidden
44:43 - okay
44:45 - so now within it we'll use the image
44:48 - background component so image
44:52 - background from react
44:55 - native add on its own
44:58 - line so the source of it will
45:03 - be let's import the meditation images as
45:07 - well so this is from constants
45:10 - meditation images so this array is what
45:14 - we'll be
45:17 - using so let's just make a copy of this
45:21 - so I'll just name
45:23 - it
45:25 - meditation images
45:28 - meditation
45:31 - images so here we can specify from this
45:34 - array
45:36 - item. ID minus
45:39 - one as it's index from zero specify the
45:43 - resize
45:44 - mode we
45:46 - cover we can specify a class
45:49 - name a flex one so we can specify the
45:53 - Border radius with rounded
45:57 - and let's
45:58 - see do large and then justify
46:03 - Center so now we can specify text to
46:06 - display within it so we'll do
46:09 - text and then the item.
46:13 - title save that so now we see our images
46:16 - being
46:18 - displayed you can scroll
46:22 - vertically so now let's also apply some
46:26 - Styles so let's say class
46:28 - name is text Gray
46:33 - 100 then we'll do text
46:37 - 3XL we'll make it bold and we'll Center
46:41 - it so here we see our text being
46:43 - displayed in the center of each
46:47 - image and then we want to wrap our text
46:49 - with the linear gradient so let's just
46:50 - specify that here so I'll say linear
46:53 - gradient from Expo linear
46:55 - gradient let's highlight all this and
46:58 - then option and then up
47:00 - arrow and let's
47:02 - specify colors so this takes an array of
47:05 - strings so we'll say
47:09 - transparent and then
47:12 - rgba of 0 0 0 and then
47:18 - 0.8 so the parentheses goes within it
47:21 - save
47:22 - that and then let's do a class name
47:28 - of say if I do Flex
47:32 - one then we can do justify
47:36 - Center and then item
47:40 - Center and so now text is being centered
47:43 - and we are applying our linear gradient
47:45 - for all the
47:49 - items so now let's add our tab bar we do
47:52 - this within the tabs group or tabs
47:54 - directory and let's add a layout file so
47:58 - naming convention is important it's
48:00 - layout.
48:02 - TSX so I can do react native function
48:06 - export and tab and I'll just call this
48:09 - tabs
48:10 - layout saving that and so here let me
48:15 - clear this
48:16 - out and I would do tabs from explor
48:20 - router and I specify the props so I can
48:23 - say screen
48:24 - options pass Javas object so header
48:28 - shown to be
48:30 - false and I'll say tab bar active tint
48:36 - color to be colors.
48:42 - primary so color just import that with
48:44 - command and
48:45 - Dot and that's from our constants file
48:48 - that we specified earlier we click into
48:51 - it just to remind you it's just this
48:53 - very simple JavaScript object so I close
48:56 - that now we can specify our tabs within
48:59 - it so I can do tabs. screen and this is
49:04 - a soft closing component so let's say we
49:06 - do name so the name will be the name of
49:10 - the file and so the one file that we
49:13 - have here is nature meditate so we can
49:15 - specify that
49:17 - here nature meditate this specifies what
49:21 - component we want to use when we
49:22 - navigate to this
49:24 - tab save that and let's specify the
49:29 - options passing in that JavaScript
49:31 - object so the tab bar label that we want
49:34 - to display is
49:37 - meditate let's save that so also let's
49:41 - go to get started let's reload it so
49:43 - command
49:45 - in
49:48 - reload go back to our index page see
49:51 - what we get here in order to get this a
49:55 - display let's up dat the layout in our
49:58 - route and we need to specify stack
50:01 - screens and so this enables another
50:03 - screen to be displayed on top of the
50:05 - current one so rather than using
50:09 - slot we were rendering our child routes
50:11 - previously let's specify stack from XO
50:15 - router then stack.
50:18 - screen and I'll say
50:21 - name being the tabs
50:24 - directory the options
50:27 - being header
50:29 - shown false and that's stoft closing so
50:33 - we can save that also let's just copy
50:37 - this with command shift and down arrow
50:39 - so we want to specify our index page so
50:43 - index so that's all for now so now that
50:46 - we specified that let's click the get
50:48 - started button
50:50 - now and this performs the navigation
50:53 - that we wanted so now we see the same
50:57 - meditation preview page and now we see
51:00 - this very simple tab bar being
51:02 - displayed so this tab bar is Now display
51:04 - because of the tabs layout component
51:06 - that I have in the underscore layout
51:09 - file in the tabs directory so now let's
51:12 - specify what icon we want to
51:15 - use so if I go to package
51:18 - Json we have Expo Vector icons installed
51:22 - as a dependency search
51:24 - that Expo Vector icons
51:27 - so this shows different icons that we
51:29 - can use within our application so let's
51:32 - search for
51:36 - flower to lip and this is one we'll use
51:38 - for our meditation tab so let's copy
51:42 - this we can paste that in
51:45 - here Expo Vector
51:48 - icons and then so another option let's
51:52 - add this on a new line so it's more
51:53 - readable so I'll do here
51:58 - I need do a comma actually
52:00 - first then we can do tab bar
52:05 - icon we'll destructure
52:08 - color pass again our Arrow
52:11 - function now want to do this component
52:15 - here so we just copy that and paste that
52:18 - in here now instead of the color being
52:21 - black we want to specify that to be the
52:24 - color that is passed in that that we
52:27 - destructured let's save
52:30 - that and now we see that icon being
52:32 - displayed for the meditate tab now we
52:35 - also want to create another tab for
52:38 - affirmations So within the tabs
52:41 - directory we can just specify another
52:43 - file for now and I'll call
52:46 - this
52:48 - affirmations
52:52 - TSX react native function export
52:56 - to say affirmations for
52:59 - now and then we can
53:01 - specify down
53:03 - here to make it simple let's just copy
53:05 - all this shift option and down
53:09 - arrow so the name we want to specify the
53:12 - name of the file we just created which
53:13 - is our affirmations and the label it's
53:17 - just that but capitalize the
53:20 - a now for the icon we want to use let's
53:24 - search for
53:27 - open and we're going to use this open
53:30 - book
53:31 - icon so we can copy
53:34 - that and paste that we can actually
53:36 - simplify this import so we can instead
53:39 - do import some material Community
53:43 - icons anden
53:46 - typo see
53:48 - from at XO SL Vector
53:53 - icons so that simplifies
53:56 - our
53:58 - Imports so now we just use e n typo and
54:04 - then we're
54:06 - using open
54:09 - book and so now we see in our tab bar we
54:12 - have meditate and we have affirmations
54:14 - and we can click between
54:18 - them so now let's work on the new
54:20 - affirmations component I click get
54:23 - started and then navigate to the
54:25 - affirmation screen so first we'll apply
54:27 - a class name here we'll set it to flex
54:31 - one let's close the sidebar just so we
54:33 - can see it better so now let's specify
54:36 - an app
54:38 - gradient now within it we'll specify the
54:42 - colors
54:43 - prop passing in an array of strings so
54:46 - we'll do #
54:49 - 2e1
54:51 - f58 then we do # 544
54:59 - 26b and then we'll do #
55:02 - a7908 F let's move this text
55:06 - up so I it's read this quickly line and
55:08 - here we see our gradient being applied
55:10 - so let's wrap this in a scroll view so
55:13 - command shift and P to bring up the
55:15 - command pallet and we'll wrap it with
55:18 - scroll
55:20 - view let's import that period from react
55:24 - native so let's specify the prop of
55:27 - shows vertical scroll indicator and
55:30 - we'll set that to false so now let's
55:33 - change this text to be change your
55:36 - beliefs with affirmations save that and
55:40 - we'll specify a style for it so the
55:42 - class name we'll apply text
55:46 - zinc 50 for the color text 3XL for the
55:51 - size and we'll make it
55:53 - bold so now it's displ there
55:56 - so let's create a view and within this
55:59 - view we're going to show our horizontal
56:01 - list showing the affirmation previews so
56:04 - all the images so rather than
56:06 - implementing all that here I'm going to
56:07 - create that in the components file so
56:10 - let's bring up our
56:12 - sidebar so here in
56:15 - components new file and let's call this
56:19 - guided affirmations
56:22 - gallery.
56:24 - TSX so react
56:26 - function export and
56:29 - tab so we can close the sidebar here so
56:31 - we can see it better so let's define the
56:33 - interface for the props that we're going
56:35 - to want to structure so we'll call it
56:38 - interface and let me just copy this and
56:41 - then
56:42 - props so we'll take in a title which
56:45 - will be a string data type and we'll say
56:49 - we can call it
56:51 - previews so in
56:53 - constants let's just create a
56:55 - directory we'll call it models and
56:58 - within it we'll create a new file and
57:00 - we'll call it
57:02 - affirmation category.
57:05 - typescript and within it we will export
57:07 - an interface we can call this
57:10 - affirmation
57:12 - category this will be a title and a
57:15 - string and data and we'll say it's a
57:19 - gallery preview data and it takes in
57:22 - specify it to be an
57:23 - array now let's define that so export
57:27 - interface Gallery preview
57:30 - data so that will be an ID which is a
57:34 - number text which is a string and image
57:39 - and we'll say that it is any so now that
57:42 - we Define this we want to import these
57:45 - interfaces so here we'll specify this to
57:48 - be Gallery preview
57:50 - data and it's an array of data so now
57:54 - let's destructure this here so title
57:57 - and
57:58 - previews specify this here and save it
58:02 - so now let's specify a class name here
58:05 - class name of margin vertical
58:10 - five let's wrap this text in a view
58:14 - bring up the command
58:15 - pallet emit WP and then
58:18 - view so we'll specify class name margin
58:22 - bottom of two with this text is where we
58:26 - would render the title of this
58:30 - category uh class name to apply Styles
58:33 - so we'll make the text white we'll make
58:36 - it Bold and the size is eile
58:40 - so let's create another view and this is
58:43 - where we will render our list so let's
58:46 - apply a class name here class name of
58:50 - space vertical of two and here we will
58:53 - use our flatlist component but rather
58:56 - than rendering it vertical as we did on
58:58 - the meditate screen we'll be rendering
59:00 - it horizontal so we'll specify flat list
59:05 - from react native and it's self closing
59:09 - so the data that it takes is
59:12 - previews based on this prop now show
59:17 - horizontal scroll indicator we'll set
59:19 - that to
59:21 - false now for the key extractor which is
59:24 - used to uniquely identify each item in
59:26 - the list specify that take the item and
59:30 - then item. ID and it has to be a
59:35 - string now we'll render
59:38 - item so we need to
59:41 - destructure the
59:43 - item here we'll pass in and specify
59:47 - we'll use the link element which is from
59:50 - Expo
59:52 - router and here we do hre so hyper text
59:55 - reference
59:57 - and we'll specify that in back ticks so
59:58 - it will
59:59 - be slash
60:02 - affirmations
60:04 - slash and then interpolation of item.
60:08 - ID and then we'll pass in the prop of as
60:13 - child so the link element typically has
60:18 - we would specify text as this for
60:21 - example and it would treat it as text
60:24 - but since we are specifying a more
60:26 - complex child component within it that's
60:28 - why we need to pass in and specify the
60:30 - as child prop so here we use
60:33 - pressible from react native and then
60:37 - view so we'll use class
60:40 - name the height of 36 a width of 32 we
60:46 - make the borders border radius rounded
60:49 - and I'll say margin right of
60:52 - four and within this view we want to
60:54 - specify our image so image from react
60:58 - native so the source will be the item.
61:03 - image the resize mode will be cover and
61:08 - we'll specify our styles to be the width
61:11 - full and the height of full and it's
61:14 - stop
61:15 - closing and the last prop that we need
61:17 - to specify for our flat list is we're
61:19 - going to make it a horizontal
61:22 - list so we Define
61:24 - this now we can use utilize
61:26 - that in the affirmations component so
61:30 - here we want to import the affirmations
61:32 - gallery and that's specified in our
61:34 - constants
61:36 - directory in this file so we'll be
61:39 - utilizing this array let's go to
61:42 - affirmations now let's just use it here
61:45 - affirmations and we'll import that and
61:48 - we will map that so
61:51 - map G our Arrow function and we will
61:55 - utilize guided affirmations gallery and
61:58 - we need to pass in the key prop to
61:59 - uniquely identify it so let's just say
62:01 - it's g. tile to uniquely identify that
62:06 - affirmation category we'll pass in the
62:09 - title which is g. tile again and call it
62:14 - the
62:16 - previews which is g.
62:19 - dat save
62:21 - that and here we see all of the
62:23 - affirmation previews have been displayed
62:27 - horizontally so everything that we
62:30 - specified in affirmations Gallery in our
62:33 - constant directory is now being
62:36 - displayed on the affirmation
62:38 - [Music]
62:40 - screen so here in the guided
62:42 - affirmations component in our flat list
62:44 - where we specify how we want to render
62:45 - the item we're using the link element or
62:48 - link component rather so if I click on
62:50 - one of these preview items this will
62:52 - navigate to affirmations slash and then
62:55 - the item ID ID and here this is
62:56 - currently an un mouch route so we need
62:58 - to create a file for this so I'm going
63:00 - to change the structure how I have the
63:03 - files in the tabs component So currently
63:06 - I have nature meditate for this screen
63:09 - and affirmations for this one but
63:12 - because I need to have nested routes for
63:15 - this affirmation screen I'm instead
63:17 - going to make this a folder so right
63:19 - click that and I'll name this
63:22 - affirmations and I will drag and drop
63:24 - this file to this
63:26 - directory and I'll rename it to be the
63:30 - index file so we'll be able to access it
63:33 - the same way through going to for SL
63:35 - affirmations so here it's refreshing
63:37 - let's reload the app
63:40 - reload get started so to get this to
63:42 - display let's create a new layout file
63:44 - in this directory so it'll be layout.
63:47 - TSX so react native function export I'll
63:51 - just call this affirmations layout so
63:54 - let's clear this out
63:56 - and we'll use the stack component again
63:58 - from XO router and within it we'll say
64:00 - stack. screen the name of that file is
64:04 - index and the options will be the header
64:07 - shown
64:09 - false and it stop closing so now let's
64:12 - reload this
64:15 - again so we click get started and now we
64:18 - see the icon displaying properly again
64:20 - so we need to create a new layout file
64:21 - within the affirmations directory so we
64:23 - also want to specify a dynamic route in
64:26 - this affirmations directory so we can
64:28 - name that with square brackets and then
64:30 - item id. TSX so I can do react native
64:35 - function export and then tab I'll name
64:38 - this
64:39 - affirmation
64:41 - practice and so with this route it'll be
64:44 - accessible through for slash
64:46 - affirmations for Slash and then passing
64:48 - in an ID
64:50 - value so this is the file that we will
64:52 - navigate to here if I go into guided
64:55 - Gallery so when a user clicks on this
64:58 - element it will navigate to that new
65:00 - component that we just created so let me
65:03 - resize this again and we will navigate
65:05 - back to that new file that we want to
65:07 - work on close in the sidebar so we can
65:09 - see it in order to access that ID that
65:12 - is passed in through the route we will
65:15 - use the use local search prams hook so
65:18 - use local search prams from Expo router
65:21 - so we call that here and we can D
65:23 - structure that so it's item ID so now we
65:27 - can use that now let's do class name
65:30 - which is flex one now let's use a use
65:32 - State hook to determine which
65:34 - affirmation we want to use so if I go to
65:37 - affirmations Gallery so this is where
65:40 - all of our affirmations are specified so
65:42 - we need to go through all the data
65:44 - Properties or data keys to find the ID
65:48 - that matches based on the ID that was
65:50 - included in the route so this will make
65:52 - more sense once I implement it let's
65:54 - create a use effect
65:56 - from
65:58 - react and the dependency list just an
66:01 - empty array so this is just called when
66:03 - we first navigate to this component and
66:05 - we'll specify our state so we can say
66:09 - use
66:10 - State let's import that and react and
66:14 - this will be Gallery preview data so
66:18 - we'll specify this to be affirmation to
66:21 - use and set affirmation got that now to
66:24 - determine which information we want to
66:26 - display when a user clicks on one of the
66:28 - previews let's just create a for Loop so
66:30 - I'll say let index sign a zero all the
66:33 - index is less than the affirmations
66:36 - gallery. length update that index value
66:39 - so we'll get the current array of the
66:42 - affirmation data equals affirmation
66:45 - Gallery at that ID specified here data
66:49 - so now that we got this array let's find
66:52 - if that ID is found in this list so
66:54 - const off information to
66:57 - start we getting the object that matches
67:00 - our information data got find and it we
67:04 - can specify this to be a if the a. ID is
67:08 - equal to and need to cast this to a
67:11 - number CU this is a string so we specify
67:14 - item id here save that and so now if
67:18 - this is
67:20 - truthy then we can update our state
67:24 - affirmation to start and return to break
67:28 - out of this for Loop currently when we
67:30 - click on an item we still get this
67:32 - unmatched route so let update our layout
67:34 - in the
67:35 - affirmations directory close this let's
67:38 - just copy this with shift option and
67:40 - down arrow and we'll update this to be
67:43 - square brackets and then item id save
67:47 - that so now we click on it let's refresh
67:49 - this command D
67:54 - reload so if I click get
67:57 - started if I navigate to affirmations
68:00 - and then click on one of these previews
68:01 - I now get the affirmation practice page
68:04 - so this component that we're currently
68:05 - working on close that
68:08 - terminal so now let's update what we are
68:10 - rendering here so let's use the image
68:14 - background component background from
68:16 - react native The Source will be the
68:20 - affirmation that we
68:21 - found
68:23 - here and so
68:25 - make it optional the image the resize
68:30 - mode is cover and the class name is flex
68:35 - one so let's save this so now our image
68:38 - is being displayed so now and currently
68:41 - I'm this is a self closing tag but I
68:43 - actually don't want that so we'll do app
68:47 - gradient here and then once again we'll
68:49 - pass in our colors which is an array of
68:51 - strings so we'll do
68:53 - rgba 0 0 0 and
68:57 - 0.3 and then rgba 0 0 0 and
69:03 - 0.9 now let's close this tag just for
69:06 - now just have some text I'll just say
69:08 - test for now just to get rid of that
69:10 - squidly line let's save that so now we
69:12 - see our linear gradient is being applied
69:14 - so now let's specify our back button so
69:17 - that we can navigate back to the
69:18 - affirmations index page so we'll do a
69:21 - pressable from react native and let's
69:24 - use our user router hook so going back
69:26 - to the top so here we can just import
69:28 - let's include the router in the
69:32 - import and we'll specify the onpress
69:35 - method pass in this Arrow function and
69:38 - I'll do router.
69:41 - back now within it so let's go to Expo
69:44 - Vector icons click on here and let's say
69:47 - if I do left Circle then click on this
69:51 - one so I can copy
69:53 - this and we'll use that icon let's copy
69:57 - the
70:00 - component and we'll pass it in
70:02 - here and let's update the color to be
70:06 - white and I'll make the size 50 so let's
70:10 - update the class name so I'll say class
70:13 - name absolute top of
70:17 - 16 left six let me try refreshing this
70:21 - or reloading rather
70:28 - so now we see the icon being displayed
70:30 - if we click on it then it navigates back
70:32 - to this affirmations index page so let's
70:35 - continue displaying the information that
70:37 - we need on the affirmations detail
70:39 - screen or the item id screen rather so
70:42 - we can specify a scroll view which we
70:44 - use to display our text and that's from
70:46 - react
70:48 - native and let's actually specify a
70:50 - class name here of margin top margin top
70:54 - of 20
70:56 - and shows vertical scroll
70:58 - indicator vertical to be
71:02 - false and within it I'll just specify
71:05 - this here specify
71:08 - view save that so does the formatting
71:11 - for us so I'll specify a class name and
71:14 - I'll say the height to be full and then
71:18 - justify
71:20 - center now within this you can specify
71:23 - another view for this class name
71:26 - the height would be 4 fths and then
71:28 - justify
71:31 - Center so now we can just render
71:35 - affirmations do text so we'll display
71:39 - this for
71:41 - now Ser says text strings must be
71:44 - rendered within a text
71:47 - component and the text and we will move
71:51 - this
71:52 - up dismiss
71:56 - let's reload
71:57 - it get
72:00 - started affirmation screen click on one
72:03 - of these previews and now we see this
72:05 - text being displayed but it's all in
72:07 - black so let's update class name so make
72:11 - it
72:13 - white we'll make the text larger so you
72:16 - can say margin bottom of 12 we'll make
72:19 - it bold and we will Center the text save
72:22 - that
72:25 - and now we see this text being properly
72:26 - displayed in white but currently it's
72:28 - all bundel together so to update
72:32 - this here in the use effect hook I want
72:35 - to split each sentence based on period
72:40 - so here once I find the affirmation that
72:42 - I want to display let's say const
72:45 - affirmation array is equal to
72:48 - affirmation to
72:49 - start. text.
72:52 - spit on the period character
72:55 - I'll say remove the last element if it's
73:00 - an empty
73:01 - string so
73:03 - if affirmations
73:05 - array so the last element affirmations
73:09 - array do length minus
73:11 - one that's equal to an empty
73:15 - string then I I'll just remove that one
73:18 - affirmations array pop because that last
73:21 - element in this case is just an empty
73:23 - string which we don't want to include
73:25 - then I'll say I'll create a new state
73:28 - hook here so I can say use state which
73:32 - would be an array of strings for the
73:34 - sentences to display and I can say cons
73:39 - sentences set
73:43 - sentences here and then I will set
73:48 - that so it'll be affirmations array that
73:50 - I'm
73:53 - setting so let's save this and we're
73:57 - good so rather than just rendering the
73:58 - text all at once let's instead map over
74:00 - the sentences array so I can say
74:03 - sentences do map so it will specify a
74:07 - sentence and the index value passing in
74:11 - our Arrow function and this text let's
74:13 - move it up so highlight it and then
74:15 - option up Arrow we need to specify our
74:17 - key to uniquely identify each text
74:19 - element or component so that would be
74:22 - the
74:23 - index let's did I spell this right
74:27 - sentences sent is possibly
74:29 - undefined so when I specify the hook
74:34 - I'll pass in an empty it right
74:36 - here so that gets rid of that Sly line
74:40 - so for rendering this I'm going to
74:43 - specify the current
74:45 - sentence and because we split it based
74:48 - on period I'm going to include the
74:51 - period here so let's save that so
74:54 - currently hot reloading isn't working
74:56 - for my simulator so I'll have to
74:57 - manually reload
75:00 - it navigating
75:03 - here let's go to one of these and here I
75:06 - see each sentence is being displayed on
75:08 - its own line and I can scroll to read
75:10 - all them so let's see if I do another
75:12 - one such as this
75:15 - preview so we've implemented our
75:17 - affirmation screen and the affirmations
75:19 - detail screen
75:23 - [Music]
75:25 - so now we implemented our affirmations
75:27 - page so let's continue with the
75:29 - meditation screen so when we click on
75:31 - one of these items we want to navigate
75:32 - to The Meditation screen so let's add
75:35 - that so here in the tabs
75:38 - directory we could just add meditate.
75:42 - TSX and let's do react native function
75:45 - export in tab we just name this meditate
75:49 - and save that so now we need to update
75:53 - our layout file in the root of the app
75:55 - directory so it be this one next to the
75:57 - index file let's close the
76:01 - sidebar so option shift and down arrow
76:04 - not to say meditate
76:06 - so let's navigate to the nature meditate
76:11 - file so currently when the user performs
76:15 - a press on this it just logs out
76:18 - press now I want to update that so let's
76:21 - use router from Expo router so let's say
76:24 - router let import
76:26 - that. push and here we can use back
76:29 - ticks I'll say for slash
76:33 - meditate so now after I click on one of
76:36 - these items it takes me to that new
76:38 - component that we just
76:39 - created so now let's work and improve
76:41 - the styles for this component so we'll
76:44 - apply a class
76:45 - name of Flex one so it spans the entire
76:49 - height of the screen let's do image
76:53 - background from react
76:57 - native and we'll pass in the props so
77:00 - we'll say the source now for now we're
77:03 - going to import meditation images
77:06 - meditation
77:07 - images so let's import that
77:10 - first you can say
77:13 - import meditation
77:15 - images from that constant file that we
77:17 - created now I'm going to name this
77:19 - differently say meditation uncore images
77:23 - so I know it's a constant so I'm just
77:25 - going to click into here just to remind
77:27 - you that we imported all these images
77:30 - from our assets directory and exported
77:33 - it as an
77:35 - array so now that we have this
77:37 - array for now let's just use the first
77:40 - one in that array as the background
77:44 - Source now other props that we need to
77:47 - set are the resize mode so we'll do
77:49 - resize mode of
77:52 - cover do class name of Flex
77:56 - one and within image background for now
77:59 - let's just do text and we'll just say
78:02 - test or example so now we're expanding
78:05 - the entire height with the background
78:06 - image that we selected let's remove this
78:10 - text we don't need that great so let's
78:13 - use an app gradient so this will make
78:15 - sure that our text does not span above
78:18 - where the time in the battery is so it's
78:20 - actually readable for the user so we'll
78:23 - say app gradient
78:26 - and we need to let's move this up with
78:28 - option up arrow and we need to specify
78:30 - the prop of colors so colors is an array
78:34 - of strings so first we'll do transparent
78:37 - and then we would do
78:39 - rgba 0 0 0 and
78:44 - 0.8 save that so now we get our linear
78:47 - gradient applied and our text is now
78:50 - visible so one thing I want to add a
78:52 - back button
78:55 - so I can say pressable from react
79:01 - native and so when I do
79:04 - onpress I want to use router from Expo
79:08 - router
79:10 - doback and I'll say the class
79:12 - name is
79:15 - absolute top
79:18 - 16 left six and I'll just apply a zindex
79:22 - as well so I and save that so for the
79:25 - element that I'm going to use within the
79:26 - pressable component I'm going to use the
79:29 - Expo Vector icons Library again so we'll
79:34 - use the left
79:36 - Circle select this one now we'll copy
79:40 - the import statement I can just add that
79:43 - here and then I will copy how we're
79:46 - going to render this component so I
79:47 - paste that in for the size I'll update
79:50 - this to be 50 and for the color I'll use
79:53 - white let's say that and here we see our
79:56 - back button is shown here now before
79:59 - continuing when we look at the tabs we
80:01 - see that the meditation tab the
80:04 - affirmations Tab and we have another tab
80:06 - here for this meditation screen but we
80:09 - just want to show two tabs and instead
80:11 - have this meditation screen be nested
80:14 - for this meditate tab so let's change
80:17 - the structure here we currently have
80:19 - this file within the tabs directory so
80:21 - let's now create a folder
80:24 - and I'll name this
80:26 - meditate and so this meditate file let's
80:30 - drag and drop it into
80:34 - here and rather than it being meditate.
80:37 - typescript or TSX let's rename it to be
80:41 - a dynamic route and I'll just say
80:44 - ID and this ID will help determine which
80:47 - meditation image we want to use as well
80:50 - as what audio file we want to use so
80:52 - with this we need update our layout file
80:56 - so rather than just being meditate it's
80:58 - meditate
81:01 - slid and save
81:06 - that so now after reloading the app when
81:10 - I click get
81:12 - started looking at the tabs I just see
81:14 - meditate and affirmations now if I Go
81:17 - Back To Nature meditate currently we are
81:19 - just navigating to/ meditate but in
81:22 - order to get to this file I need to pass
81:24 - s an ID as it's slm meditate SL the ID
81:29 - to specify or the ID of the meditation
81:31 - that we want to show to the user so
81:34 - let's do for Slash and then
81:36 - interpolation item.
81:38 - ID so
81:40 - now so now after reloading the app click
81:43 - to get started so now I going to click
81:45 - on one of these meditation previews so
81:48 - if I click on this one so now it
81:50 - navigates to this meditate screen so
81:53 - this component that we Define here and
81:55 - when I click on the back button it takes
81:57 - us back to the meditation index screen
82:01 - so here back in this file in order to
82:03 - utilize that ID that was passed to us we
82:06 - have to use the use local search progams
82:08 - again so do const we destructure that ID
82:13 - and then use local search
82:16 - prams and now we can use that ID to
82:19 - specify what image we want to display
82:21 - rather than just doing the one at the
82:22 - zero index all the time so we need to
82:25 - cast it to a number and we do minus one
82:28 - because arrays our index from zero let's
82:31 - save this so now we going to click on
82:34 - Rivers let's reload
82:36 - this so now I'm going to click on Rivers
82:39 - this shows the corresponding image for
82:43 - the one that we just clicked
82:46 - on let's continue working on this
82:49 - component so after pressible let's add a
82:52 - view
82:55 - now let's just give it a class name of
82:58 - Flex one and justify
83:02 - Center let's navigate there just so we
83:04 - can see it with hot
83:07 - reloading we'll specify another
83:11 - view and within it a text so for now
83:14 - we'll just say 0
83:18 - 0 now let the class name
83:22 - of the horizontal margin of Auto the
83:26 - background
83:28 - neutral 200 the Border radius is
83:32 - rounded so the width of 44 and the
83:35 - height of 44 and we'll say justify
83:39 - Center and item Center save this so now
83:43 - we see this white circle being displayed
83:46 - and let's apply some styles for our text
83:49 - so the class name of text for
83:52 - XL will make the text blue blue 800 so
83:56 - we can save that so now it's more
83:58 - visible and so this represents the
84:01 - meditation time or the duration to
84:03 - display to the user so after this view
84:06 - let's add another view container which
84:09 - will contain our buttons to start the
84:11 - meditation session so we'll use let's
84:15 - apply a class name first actually so
84:17 - class name so margin bottom of five and
84:21 - then we will use our custom button that
84:23 - we created
84:25 - earlier we just stop closing let's see
84:28 - the props that we need is title so we'll
84:31 - just say start
84:34 - meditation and it needs an
84:37 - onpress event handler so for now we'll
84:40 - just console log and say meditate we can
84:43 - save that and now we see our meditation
84:45 - button is displaying
84:47 - here so to implement a simple version of
84:50 - this let's scroll up and let's use a use
84:53 - State hook so I'll say const I'll say
84:57 - seconds
84:58 - remaining and then set seconds
85:02 - remaining equal to use State and let's
85:05 - just say 10 seconds for example now we
85:08 - need import this so command dot it's
85:11 - here so let's just utilize this here for
85:16 - example just to show the countdown timer
85:20 - so now it's showing 10 seconds so when
85:23 - we click on the the start meditation
85:26 - button we want to start this countdown
85:28 - timer so the way we can do this is we
85:31 - can use the use effect hook pass in our
85:34 - call back as the first argument and for
85:37 - now just an empty array so let's say let
85:41 - timer ID which is of the type node
85:46 - js.
85:50 - timeout now we'll say exit so in the
85:53 - case when seconds remaining is equal to
85:57 - zero then we can just
86:01 - return
86:03 - otherwise we can do timer ID is equal to
86:08 - set
86:08 - timeout passing in a call back and this
86:11 - will call set seconds remaining whatever
86:15 - the seconds remaining are minus
86:18 - one and this will be called every second
86:22 - so because the second argument of the
86:25 - set timeout method is in milliseconds we
86:27 - pass in a th000 so that's 1 second and
86:31 - another thing we want to do in the use
86:32 - effect Hook is we will return this error
86:36 - function and this will be called
86:38 - whenever the component unmounts so for
86:41 - example if the user were to click the
86:43 - back button before the timeout were to
86:45 - complete so here we would do clear
86:48 - timeout passing in the timer
86:51 - ID so in order for this use effect
86:54 - functionality to be called we don't just
86:56 - want it called when the component first
86:57 - mounts we want to call whenever the
86:59 - seconds remaining State
87:02 - changes now to actually start it let's
87:05 - add a another use state so I can
87:08 - say
87:10 - const is
87:12 - meditating and then set meditating
87:16 - meditating equal to use
87:18 - state
87:20 - of
87:22 - false and let use use this here as well
87:26 - in the dependency list of the use effect
87:28 - hook and when the seconds remaining is
87:30 - zero we will also say set meditating to
87:36 - false now when a user clicks on the
87:38 - start meditating
87:40 - button instead of just console logging
87:42 - it we will say set meditating to True
87:46 - let's save this and so now when we click
87:49 - on this button we should see this
87:51 - countdown being performed
87:55 - until it reaches
87:56 - zero so we're going to improve this this
87:58 - is just a simple implementation now
88:01 - another thing we don't want to call the
88:02 - timeout when the component first mounts
88:05 - we just want to call it in the case when
88:09 - the user has started the meditation
88:10 - session so let's highlight this and move
88:13 - it up with option up
88:15 - arrow and save
88:17 - that so if we restart
88:21 - it right it starts at 10 seconds based
88:24 - on the initial value pass into this used
88:26 - State hook we call start
88:29 - meditation and it starts the
88:31 - timeout so one thing to notice since
88:34 - this is just in single digits right
88:37 - now this text has changed its size and
88:40 - we want it to display the same size
88:42 - whether it's single digits or double
88:44 - digits so let's work on updating that so
88:47 - let's navigate to the layout file in the
88:50 - app directories
88:53 - rout so here we'll use the use Font hook
88:56 - so we'll specify this here say cons
89:00 - fonts
89:01 - loaded and then air equal to use
89:07 - fonts so this is actually specified in
89:09 - the gith repo on the readme file so
89:12 - let's navigate
89:14 - there click on the drop down in the
89:17 - Snippets so you can just copy
89:20 - this and we will paste it here save it
89:24 - now let's import the use Font hook
89:26 - command
89:28 - dot let's do it manually let's do
89:32 - import use fonts from Expo
89:38 - font save that so that gets rid of the
89:41 - eror for us now if we navigate to our
89:43 - Tailwind configuration file here we
89:45 - specifi in our theme to utilize this
89:49 - font with our mono so we can utilize
89:52 - that in this
89:55 - component so still need to add a bit
89:57 - more setup in our root layout so here
90:01 - we'll use a use effect hook pass then
90:04 - our call back and for the dependency
90:06 - list we'll specify fonts loaded and
90:10 - airor now we can say if there's an error
90:13 - then we'll throw that
90:16 - error in the case when the font is not
90:19 - accessible now we can do if fonts loaded
90:24 - then we can do the splash
90:28 - screen.
90:31 - hiide now we also want to prevent the
90:33 - splash screen from being hidden until
90:35 - all the assets are loaded so in this
90:37 - case when all the fonts are loaded so I
90:40 - can say splash screen so we Define this
90:43 - outside of this
90:45 - component do prevent autohide
90:49 - Asing let's add a comment just to
90:51 - provide more context so this will
90:53 - prevent
90:55 - the splash screen from Auto hiding until
91:00 - loading all the font
91:04 - assets after here if the fonts have not
91:09 - loaded return null now I can also do if
91:15 - font's loaded
91:18 - and no error return null
91:24 - get started now we want to utilize this
91:27 - font in this component so we can use
91:30 - that using
91:32 - Tailwind let's scroll to this text
91:34 - component and we will
91:37 - use Font our
91:41 - Mona so click on this we now see this
91:43 - font being used and we do start
91:47 - meditation this one update we need to do
91:50 - let's format
91:51 - it so we can do format the time left to
91:57 - ensure two digits are
92:00 - displayed so I can do const formatted
92:04 - time
92:05 - minutes equal
92:07 - to cast it to a string and we'll call
92:11 - math.
92:12 - Floor seconds remaining /
92:17 - 6 and then we'll do pad
92:21 - start of two digits with
92:25 - zero so we can save that and now so this
92:29 - is for the minutes to display on the
92:31 - left side of the colon now on the right
92:32 - side of the colon we'll display the
92:34 - seconds so fronts
92:36 - formatted time in seconds is equal to
92:40 - cast it to a string seconds remaining
92:43 - and we use the modular operator 60 pad
92:49 - start and passing in those same
92:51 - arguments
92:54 - so now we will use these in our
92:56 - component so on the left side this
92:59 - format of time and minutes and on the
93:01 - right side is format of time and seconds
93:04 - let's save that so now we click on here
93:09 - again so even though it is single digits
93:12 - we are padding it with a
93:18 - zero so now we want to play the
93:20 - associated audio file with the
93:21 - meditation that the user selects so
93:24 - let's create a function here here we'll
93:27 - name it const toggle
93:31 - meditation session status and it will be
93:34 - a
93:35 - synchronous so we're using the arrow
93:37 - function
93:38 - syntax so in the case when the user has
93:41 - already started the meditation and then
93:44 - when it goes to zero we'll reset it so
93:47 - it's at least 10 seconds so in the case
93:50 - when the seconds remaining is zero then
93:52 - I'll set the duration
93:54 - let's say set seconds remaining to be 10
93:58 - seconds and then this will toggle the
94:02 - meditation state so set meditating and
94:05 - then we
94:06 - toggle is meditating so did that so now
94:10 - for the actual
94:11 - audio let's add another state
94:15 - variable so I can say const audio
94:19 - sound I'll say set sound is
94:24 - currently undefined we'll Define the
94:27 - type to be audio.
94:30 - sound let's update this it's supposed to
94:33 - be
94:33 - audio and we'll import
94:38 - this let's
94:41 - see
94:43 - import audio from Expo
94:48 - AV so let's install this
94:51 - Library so here in Expo
94:54 - we can copy
94:58 - this open up a new
95:01 - terminal change into simple
95:04 - meditation and then we'll run this
95:09 - command so now it's installed we can
95:11 - close out of this terminal and close it
95:15 - with control and
95:16 - backtick and so now this import is
95:19 - available for us so for the toggle
95:22 - meditation session status this will also
95:25 - call a method which will start playing
95:28 - the sound so let's just say const
95:32 - initialize sound it's also
95:35 - asynchronous so I can say const so for
95:39 - this let's first import the meditation
95:42 - data so I can do import meditation data
95:47 - so let me go to this constant file I've
95:49 - defined and so here we defined our
95:51 - interface previously and an object
95:53 - object of the different meditation
95:56 - types and the audio files so now we're
95:59 - utilizing this I also want to import the
96:03 - audio files object so those key value
96:06 - pairs so now in the initialize method
96:10 - that we're working on I can say const
96:12 - sound is equal to the audio
96:16 - sound if it's truthy then we will return
96:19 - it otherwise so now in initialize sound
96:23 - I can do con audio file name is equal to
96:29 - the meditation data and let's cast it to
96:32 - a number ID minus one do AIO so the name
96:38 - of that audio file so then we can do
96:40 - const we D structure sound from a way of
96:45 - audio. sound. create
96:49 - async and we'll use audio
96:52 - files with the key
96:54 - key of the audio file
96:58 - name and then we can say set
97:02 - sound and let's return that as
97:06 - well so for actually calling this
97:09 - function I want to create another
97:10 - function add this here cons and I'll
97:13 - name this Poggle play and pause
97:19 - acing better name would be toggle sound
97:24 - so now I can do cons sound is equal to
97:28 - if the audio sound is truthy then we
97:31 - will utilize
97:33 - it if it's falsy then we will call
97:36 - initialize
97:39 - sound so we can get the status of it
97:43 - asynchronously with
97:44 - sound. getet status
97:47 - async so now we can call the play Method
97:49 - based on the status so if the status is
97:53 - loow
97:55 - then I can do a
97:58 - soundplay
97:59 - asynchronous play
98:03 - sync
98:04 - else a wait sound.
98:09 - pause now another thing we can do we add
98:12 - another state variable to determine
98:15 - whether the audio is playing so we can
98:17 - do
98:18 - const is playing audio and then set
98:23 - playing audio equal to use state so the
98:28 - initial state is
98:30 - false so here in the toggle
98:32 - sound we can call set playing audio to
98:38 - true
98:40 - and otherwise it'll be
98:44 - false we can also include it in this
98:47 - conditional statement so if the status
98:48 - is loaded and we are not playing the
98:52 - audio then in that case we want to start
98:55 - playing the sound so now we want to
98:57 - utilize toggle sound here in the toggle
99:00 - meditation session status function so
99:04 - wait toggle
99:06 - sound so now let's utilize this method
99:09 - when the user clicks the start
99:11 - meditation button so we just add a
99:14 - reference to
99:17 - this so now let's say if I Navigate
99:22 - to this item and I start the
99:26 - meditation this starts playing the sound
99:28 - associated with this meditation up and
99:31 - go
99:33 - back so now when we click the back
99:35 - button the audio is still playing so one
99:37 - thing I need to implement as well I can
99:40 - add another use effect hook so use
99:46 - effect and for the dependency I will
99:49 - specify the audio
99:50 - sound object
99:53 - so when we click the back
99:55 - button and when the component unmounts
99:57 - it will call this function this eror
99:59 - function that we were returning and so I
100:01 - will say audio sound optional. unload
100:06 - async do that so now we click into
100:10 - it and we'll go into another meditation
100:13 - session let's go on this one now when we
100:16 - press the start meditation
100:18 - button it starts playing the associated
100:21 - sound and when we click the back button
100:23 - button it stops playing the audio
100:29 - sound so now when we click on one of
100:31 - these meditation previews we go to the
100:33 - meditate screen and we see that it
100:35 - always is 10 seconds so we want to
100:37 - adjust that so let's add another
100:40 - button you scroll down here I'll just
100:44 - copy this and shift option and down
100:46 - arrow to copy it so now I'll name
100:50 - this adjust duration
100:54 - let's save that let me add another prop
100:57 - here for container Styles and I'll say
100:59 - margin top of
101:00 - four just to add more spacing so now we
101:05 - need to add another component and I want
101:08 - this to be a modal so here in the app
101:11 - directory I'm going to right click and
101:12 - add a new folder and this will be a
101:14 - group so in
101:16 - parenthesis do modal and I will name
101:19 - this
101:21 - adjust meditation
101:24 - duration.
101:26 - TSX so then react native function export
101:29 - and then tab let's close this so
101:32 - adjust meditation
101:35 - duration so now in the root layout of
101:37 - the app
101:39 - directory let's add copy this shift
101:43 - option down arrow and so the name is
101:48 - Modell and
101:50 - then adjust duration
101:54 - actually
101:55 - it's adjust
101:58 - meditation
102:01 - duration let's add to this options
102:04 - object so I'll add
102:07 - presentation and it's a Modell save
102:12 - that so now if we navigate back
102:16 - to the meditate component so when a user
102:19 - clicks on this button to adjust the
102:22 - duration I want to call a method so I'll
102:25 - Define that
102:26 - here and I'll name it handle adjust
102:32 - duration
102:34 - so if the users started the meditation
102:37 - session then we will toggle the status
102:41 - to stop it and it'll be
102:44 - router.
102:46 - push
102:48 - so slash Modell and then adjust
102:53 - ation duration
102:58 - duration and we will add that here for
103:01 - the on press so we add a reference to
103:04 - this function so now if to click on this
103:08 - ad just duration it brings up the
103:10 - modal so now we can work on this
103:13 - component so let's add a class name here
103:16 - class name Flex one and we'll just say
103:21 - relative now let's define it app
103:23 - gradient app
103:25 - gradient and we'll apply the
103:29 - colors so we will do the string array so
103:34 - # 161
103:37 - v2e then we'll do # 0 A4
103:43 - d4a and then # 766
103:47 - e67 and within it that's just
103:50 - Define just for now just so we can see
103:52 - it text and I'll just say test save this
103:57 - so now we click on it we now see that
103:59 - gradient is being
104:01 - applied so we can get rid of this text
104:04 - component outside of
104:06 - it so let's add a back button which we
104:10 - can
104:11 - use to more easily close that mod out so
104:15 - within it here if I go into this
104:19 - component and I just copy
104:24 - here I can paste that
104:25 - in let's import that
104:29 - save now we would do on
104:34 - press so that will call router from Expo
104:38 - router.
104:40 - back and we'll do a class name of
104:44 - absolute top 8 left six I'll just apply
104:49 - Z
104:51 - index there
104:54 - so when we do adjust duration we see
104:56 - that back button here and we can also
104:58 - click on it to close that modal or we
105:01 - can drag this down to close it so it's
105:04 - more user friendly so now let's add a
105:07 - view let's bring it up so we can see
105:10 - those changes that we're making so then
105:13 - let's define a class name of just Define
105:16 - Center and the height is four
105:21 - fths so within it we can do a text where
105:27 - we say adjust your
105:29 - meditation
105:31 - duration so we see that here in Black so
105:34 - let's apply styles to it class
105:37 - name and I'll say text
105:40 - Center we'll make it
105:42 - bold we'll change the font size to text
105:46 - 3XL we'll make the Tex white and we'll
105:49 - do a margin bottom of
105:51 - a so we get
105:53 - that now let's add a view so we're going
105:57 - to add different buttons
105:59 - here so we'll use our custom button
106:02 - component that we made earlier custom
106:04 - button so let's define our props so the
106:08 - title I'll just say it's 10
106:11 - seconds and on press for now we just
106:15 - console log it
106:17 - console.log 10
106:20 - seconds and container styles is
106:24 - margin bottom of five let's save that so
106:28 - now we get our button displaying so
106:31 - let's create more copies of this button
106:33 - so highlight it option or shift option
106:36 - and down arrow so we'll create four
106:38 - buttons and let's just update this so 5
106:42 - minutes all overc case either
106:46 - minutes 10 minutes
106:49 - and 15 minutes
106:53 - so now we have it displaying as we
106:56 - wanted it to and we can click on these
106:58 - buttons but now we can update and we'll
107:01 - add a function here so con handle
107:05 - press Tak in the duration which will be
107:08 - a
107:09 - number and this will do router.
107:13 - back and
107:14 - so rather than console logging it we can
107:18 - update this
107:20 - so we'll do handle press
107:24 - that's 10
107:26 - seconds handle
107:28 - press
107:30 - of this is 5 minutes so we can Define it
107:33 - like that so it's more easily readable
107:36 - here this is 10
107:40 - minutes and this is 15
107:43 - minutes 15
107:46 - times so we have this connected but we
107:49 - need a way so that the user can select
107:51 - the duration that they want
107:53 - and it closes out the modal but we also
107:55 - need to update the time remaining on
107:57 - this meditation
107:58 - screen to display the time that they
108:00 - selected So currently the state is being
108:04 - stored in this component but we need a
108:06 - way to set that state in the modal so
108:09 - we're going to use that using react
108:12 - context so let's close all this let's
108:16 - create a directory in simple
108:19 - meditation and I'll name this context
108:24 - and within it I'll create a file and
108:26 - I'll name it timer context.
108:29 - TSX so here context acts as a wrapper
108:33 - around my project files so so by
108:35 - utilizing react context this enables me
108:37 - to have different components and have
108:39 - them share State without having to
108:40 - utilize prop drilling so here let's
108:43 - define our
108:45 - interface for the shape of our context
108:47 - so we do timer context
108:50 - type and I'll do duration
108:53 - which is a
108:54 - number and set duration to update it and
108:58 - this will be of type dispatch from react
109:02 - and set State
109:05 - action and it's a number which is the
109:07 - value that we're
109:09 - setting so now we can do export cons ker
109:14 - context is equal to react. create
109:18 - context so we can just import that from
109:20 - react the shape of it is timer context
109:24 - type and we'll pass in our initial
109:27 - object so the duration will be initially
109:29 - 10 seconds and set
109:32 - duration is just this Arrow function so
109:36 - now we can Define the interface so timer
109:39 - provider
109:41 - props the children is react
109:47 - node so let's define this qu timer
109:50 - provider
109:53 - so we'll destructure
109:54 - children see this
109:59 - children so we do colon Define the
110:03 - type now we'll Define our state here so
110:06 - we'll say cons
110:09 - duration set
110:11 - duration equal to use
110:15 - State see and we import this command and
110:20 - Dot then we will return
110:24 - timer context. provider so this is the
110:28 - wrapper component then the
110:31 - value say
110:33 - duration and set
110:38 - duration and then the children we render
110:40 - within it so we defined our
110:44 - context and now let's export the timer
110:47 - provider export default timer provider
110:52 - and we want to utilize it in our root
110:55 - layout which
110:59 - wraps our application so let's just
111:02 - highlight all this and then bring up
111:04 - command shift p so the command pallet
111:07 - and we'll wrap it with timer
111:12 - provider import
111:14 - that so since we wrapped
111:17 - everything I go back to our my context
111:22 - go up here
111:25 - so the duration and the set duration is
111:29 - now accessible for all of the children
111:32 - components so I can access it with the
111:35 - use of a hook so if I go
111:37 - into the
111:39 - Modell we want to set the duration so we
111:42 - could do that
111:43 - here say cons set
111:48 - duration we use the use context Hook
111:51 - from react
111:52 - and we pass in the
111:55 - context and so now we can call this here
111:57 - set
111:59 - duration
112:00 - to this duration
112:03 - argument so we're now able to set it in
112:07 - this model and we want to utilize it on
112:10 - this meditate component so we go here
112:15 - meditate So
112:18 - currently we have the duration set with
112:21 - seconds remaining using the use State
112:24 - hook but now we want to use the react
112:27 - context that we created so for now we
112:30 - can just comment this
112:32 - out then we can do const so we the
112:36 - structure
112:37 - duration and set
112:40 - duration use
112:42 - context and then the timer context and
112:45 - so rather than naming iteration let's
112:47 - rename it to be seconds remaining
112:52 - so
112:54 - now we go and set seconds remaining
112:56 - let's update this to be set
113:01 - duration and this is also set
113:04 - duration so
113:06 - now let's see if I go to adjust duration
113:10 - and I click on 5 minutes now it's
113:12 - updated and I see this duration set
113:15 - because that is being shared between
113:17 - these two components so when I do start
113:21 - meditation
113:23 - does the drop
113:25 - down so let's go back I'm going to
113:29 - refresh it so command and D let's reload
113:35 - it now another thing I want to do I
113:38 - scroll
113:39 - down currently it always says start
113:43 - meditating but I want to conditionally
113:45 - render what I display here so use our
113:48 - curly braces so if the user is
113:51 - meditating then I'll say stop otherwise
113:55 - I'll say start meditation okay
113:59 - good so now let's play
114:05 - it and we can stop
114:07 - it and continue it let's adjust the
114:11 - duration here 5 minutes and let's play
114:15 - it so now it's working as
114:19 - expected we go back and it stops playing
114:22 - the
114:24 - sound so one thing I click back and then
114:27 - when I click back into the meditate
114:29 - screen it's still at 4 minutes and 54
114:32 - seconds so let's
114:35 - update this use effect
114:38 - hook so we can do it a set duration so
114:43 - the default is 10 seconds so if we click
114:46 - the back button and then go back into it
114:49 - by default it will start as a 10-second
114:51 - meditation
114:53 - before we get started if you're
114:54 - interested in supporting my courses and
114:55 - projects you can follow me on my new
114:56 - YouTube channel and Instagram at Steven
114:58 - codecraft you can also explore my
115:00 - courses at stepen codecraft tocom and if
115:02 - you're looking to enhance your health
115:03 - and fitness routine check out my workout
115:05 - and meal planning app at fitfuel
115:06 - planner.com the app offers off 100
115:09 - recipes workout plans meal plans and a
115:11 - grocery list feature it's designed to
115:13 - make tracking your calories and
115:14 - macronutrients straightforward and
115:16 - stressfree I appreciate your support and
115:18 - I'll see you in the next section