00:00 - this tutorial is a quick and simple
00:02 - guide to nodejs the express framework
00:06 - and mongodb
00:07 - focusing on the fundamental rest routes
00:10 - and basic database interaction
00:12 - you'll build a simple api boilerplate
00:15 - that can then be used as the foundation
00:17 - for any app
00:19 - so this you should have a basic
00:21 - understanding of rest apis and crud
00:24 - operations
00:25 - which is just create read update and
00:28 - delete and you should also have some
00:31 - understanding of some basic javascript
00:33 - knowledge i use es6 mainly fat arrow
00:36 - functions but nothing too complex
00:40 - for this tutorial we'll create the
00:42 - skeleton of a back end for a note-taking
00:46 - app
00:47 - think something like google keep
00:49 - you'll want to be able to do all four
00:51 - crud actions on your notes like i was
00:53 - saying create read update and delete
00:57 - special thanks to scott domes who wrote
01:00 - an article that this video is based off
01:02 - of if you want to see the original
01:04 - article you can check the description
01:07 - okay let's get started
01:09 - okay i created a directory for this
01:11 - project just called notable i'm in that
01:13 - directory in the terminal now
01:15 - if you don't have node installed
01:18 - check the link in the description for
01:20 - instructions on how to install node
01:22 - so once you're in the new directory
01:24 - we're just going to run npm and net
01:27 - and then we're going to follow along
01:28 - with the prompts
01:30 - so for the we'll just give it the name
01:32 - notable that's already set there version
01:34 - 1.1
01:36 - you know we don't have to do really any
01:37 - of this stuff so i'm just going to use
01:38 - the default for all this
01:41 - yes
01:42 - okay once that's done you should have a
01:44 - package.json ready to go in your
01:46 - directory so this means you can just
01:48 - start installing the dependencies you
01:50 - need for your project
01:52 - you're going to use express as your
01:53 - framework mongodb as a database and a
01:56 - package called body parser to help deal
01:59 - with json requests
02:01 - so i'll just do mpm install
02:04 - save express
02:05 - mongodb
02:08 - body parser
02:14 - and i also highly recommend installing
02:17 - nodemon as a dev dependency it's a
02:20 - simple little package that automatically
02:22 - restarts your server when files change
02:30 - okay i got everything installed and now
02:33 - i just open up the folder in sublime
02:35 - text so i'm going to go into the
02:37 - package.json file right here
02:40 - and then under scripts i'm just going to
02:42 - add
02:48 - nodemon server
02:51 - and we actually don't we're not even
02:53 - going to use this test once i'll take
02:54 - that out
02:55 - and that should be good on package.json
02:58 - so i'm going to save that and now i'm
03:00 - going to create my server.js file and
03:03 - start building the api
03:04 - so go to new file
03:07 - server.js
03:10 - so first we're going to start by
03:11 - requiring all our dependencies in
03:14 - server.js
03:15 - so const express
03:23 - const client
03:37 - const body
03:40 - parser
03:52 - and let's just line up everything here
03:57 - okay and then finally const app
04:01 - express
04:06 - you're going to use the client to
04:08 - interact with your database
04:09 - note that you also initialize your app
04:12 - as an instance of express your framework
04:15 - the last thing you need to do to get
04:16 - your server up and running is to tell
04:18 - your app to start listening for the http
04:21 - requests
04:23 - you can specify the port and start the
04:25 - listening like so
04:32 - console.log we'll just do a log here
04:35 - and
04:36 - we are live on
04:40 - port
04:41 - now i'm going to save this i'll go back
04:43 - to my console
04:45 - let me clear that
04:46 - if i run
04:48 - npm
04:49 - run dev
04:52 - we should see
04:54 - an error okay express is not defined
04:57 - let's see what we have to do here
04:59 - i spelled this wrong so let's uh save
05:01 - that
05:02 - and go back over
05:04 - okay it automatically saw the changes it
05:06 - restarted and it says we are live on 8
05:09 - 000
05:11 - so our server is live but it doesn't do
05:13 - a whole lot
05:14 - or anything really so let's fix that
05:18 - we're going to make some crud routes
05:20 - so for this example we're going to build
05:23 - four routes a route to create a note to
05:26 - read your notes to update a note and to
05:28 - delete a note so this will give a good
05:31 - idea of how to structure almost any
05:33 - basic route with node
05:35 - to test the api we're going to need to
05:38 - mimic a client side making requests so
05:41 - to do so we're going to use a great app
05:43 - called postman it allows you to make
05:45 - simple http requests with custom bodies
05:48 - and parameters
05:49 - so to install postman you can go to
05:51 - getpostman.com
05:52 - and you can download it for various
05:54 - browsers there's also a chrome extension
05:57 - so i'm just going to go to postman
05:59 - chrome extension
06:03 - and add to chrome
06:07 - so this is one of the easiest ways to
06:09 - get it you don't have to install any
06:10 - special program on your computer
06:19 - and you don't even have to sign up i'll
06:20 - just do take me straight to the app
06:23 - okay once you get postman installed it
06:25 - should look like this we're going to
06:27 - come back to this later so let's start
06:29 - setting up our routes
06:32 - most node.js tutorials and many real
06:35 - apps put all their routes in one big
06:36 - routes.js file
06:38 - but we're going to do something
06:39 - different we're going to split up the
06:41 - files into separate folders and that's
06:44 - going to lead to good readability and
06:46 - makes big apps more manageable
06:48 - now we don't have a big app but let's do
06:51 - this right so we're going to make some
06:52 - directories and some folders i'm just
06:54 - going to do it right from the console
06:55 - you can do it from your file browser or
06:57 - from sublime
06:59 - okay first we'll stop the server so i'm
07:02 - just going to make a directory called
07:03 - app
07:04 - and i'm going to go into that directory
07:08 - and then i'm going to make a directory
07:09 - called routes
07:12 - and then i'm just going to go into that
07:13 - directory
07:14 - and then i'm going to make a file called
07:17 - index.js and then i'm going to make a
07:20 - file called
07:21 - note
07:22 - routes
07:24 - dot js
07:26 - okay we're going to go back into sublime
07:28 - text
07:29 - and we'll see if they're they're showing
07:31 - up here
07:33 - and you can see they're right on the
07:34 - side so are the index.js is empty and
07:37 - then routes.js is empty so these
07:39 - directories may seem like overkill for
07:41 - this simple small app but it's just
07:44 - always good to start with best practices
07:46 - and let's start with the c in crud which
07:49 - is create so how would you create a note
07:53 - well before you do that you have to
07:56 - build a bit more infrastructure
07:58 - in express routes are wrapped in a
08:01 - function which takes the express
08:03 - instance and the database as arguments
08:05 - here's what i mean in your note
08:08 - routes.js we're going to put module
08:12 - dot exports
08:15 - equals function
08:18 - app db
08:21 - just like that
08:23 - and then you can export this function
08:25 - through your index.js
08:28 - so let's start filling in that file
08:31 - first we're going to have a const note
08:34 - routes
08:36 - equals require
08:38 - and we're going to require require the
08:40 - notes routes file
08:42 - what we just exported
08:44 - and then module.exports
08:51 - and it looks like i made a spelling
08:53 - error here so x
08:56 - ports there we go
09:00 - no routes
09:02 - app
09:04 - db so we're just going to export that
09:07 - that route
09:08 - so basically the index.js is our master
09:12 - route file and then we have individual
09:14 - files for all of our individual routes
09:17 - and we just bring them all together in
09:19 - the index.js
09:21 - so now that we've exported the route
09:23 - here we can import it in our server so
09:26 - back in server.js
09:28 - we go right here
09:31 - and i'm going to put require
09:38 - require apps slash routes that's going
09:40 - to our directory
09:46 - so this is how we're going to
09:48 - basically import the route into our
09:50 - server
09:52 - note that since you don't have a
09:53 - database yet set up you're just passing
09:56 - in an empty object that's why we just
09:58 - have an empty object right here okay now
10:01 - we can make the create route so the
10:03 - syntax is simple we're gonna go back
10:06 - into our note routes.js
10:08 - and we're gonna actually start creating
10:09 - the route here so we're gonna do
10:11 - app.post
10:19 - here is where we'll actually create our
10:21 - note so
10:22 - we'll
10:24 - create
10:25 - the note here
10:28 - but right now we're just going to do
10:29 - res.send
10:32 - hello
10:34 - so when the app receives a post request
10:38 - to the the notes path here
10:41 - it will execute the code inside the
10:43 - callback
10:45 - so that's the the callback right here
10:49 - so that's the callback right here
10:52 - and in that callback it's going to pass
10:54 - in the request object which contains the
10:57 - parameters or json of the request and a
11:00 - response object which is used to reply
11:03 - so we're going to actually test this by
11:06 - going into postman first let's make sure
11:08 - all i'm going to make sure all my files
11:09 - are saved i'm going to run my server
11:11 - again with npm
11:12 - run dev
11:17 - oh i have an error it says requires not
11:19 - defined i actually have a spelling error
11:22 - you may have seen that earlier so i just
11:24 - have to put require here
11:28 - okay now that i've fixed that air let's
11:30 - try running our server again
11:33 - and another error
11:35 - looks like
11:36 - oh
11:37 - i see what happened we spell i spelled
11:39 - the word function wrong
11:41 - a lot of spelling errors here okay so
11:43 - now let's try let's see what happens
11:45 - we're just restarting the server here
11:48 - and now we're gonna finally get to test
11:50 - this on nodemon
11:52 - so
11:53 - back in nodemon
11:54 - i'm going to do a post request instead
11:58 - of get i'm going to go to post here and
12:00 - now i'm going to put
12:02 - localhost
12:05 - 8000
12:07 - slash notes
12:09 - and then i'm just going to click send
12:13 - and you can see
12:14 - it says hello here it's pretty small
12:17 - it's pretty small but if we go back into
12:19 - our file it says res.send hello so it
12:22 - just sent hello when we did a post
12:24 - request to the notes route
12:26 - so we just created our first real route
12:29 - the next step is to add some parameters
12:31 - to the request and process them in the
12:34 - api and finally add in the database so
12:37 - i'm going back into post mode i'm going
12:39 - to try to zoom in a little actually so
12:41 - we can so everything's a little bigger
12:43 - and in the body tab
12:45 - we're going to add some key value pairs
12:47 - after selecting
12:49 - the xwa form dash url encoded
12:54 - so this will add encoded form data to
12:56 - the request which we'll be able to
12:58 - process with the api
13:00 - so we're just going to make a title
13:04 - my note
13:05 - title
13:08 - so this is just some sample data body
13:12 - what a great
13:14 - note
13:16 - now i before i send the sample data i'm
13:19 - going to go back into our note routes
13:22 - and we're going to do a console.log
13:28 - and i'm going to put rec
13:31 - dot body
13:32 - so we're just going to log out the body
13:35 - of the request
13:36 - so i'll save that
13:38 - and we're going to go back over here
13:40 - i'll send this
13:43 - and then you're going to and then we'll
13:44 - see
13:46 - undefined you can see undefined here
13:47 - that's because
13:49 - on express can't process url and coded
13:52 - forms on its own
13:54 - but we did install the body parser
13:57 - package
13:58 - so let's go back into our code we're
14:01 - going to go back into the server
14:04 - and right below the port i'm going to do
14:07 - app.use
14:09 - body parser
14:12 - dot url encoded
14:15 - and extend extended
14:19 - true
14:20 - now it's going to be able to process
14:22 - that correctly so if i save this
14:25 - and i'm going to go back into postmod
14:28 - i'm going to send it send that again
14:31 - let's go back into our server and now we
14:33 - can see it title my node title body what
14:36 - a great note
14:38 - the last step in the preliminary route
14:40 - is to set up the database and then add
14:43 - the data in
14:44 - the easiest way to set up a
14:47 - database is through mlab it's free for
14:50 - the small size and quite fast to set up
14:52 - so let's do that we're going to go over
14:54 - to our browser
14:56 - and we're going to go to mlab.com
14:58 - now you're gonna create an account if
15:00 - you don't already have one or for me i'm
15:02 - just gonna log in
15:04 - okay after you get logged in to mlab or
15:06 - you create an account we're going to
15:09 - create a new mongodb deployment so i'm
15:11 - just going to click create new
15:15 - and just click the free one here
15:18 - continue
15:22 - continue
15:23 - and i'm going to call it
15:25 - notable
15:28 - continue
15:30 - and submit order
15:32 - and now i have to just create a user so
15:35 - first i'm going to go into the
15:36 - deployment
15:39 - and go to user
15:41 - add database user
15:43 - so i'm going to call it bow fcc
15:46 - and i put in a password
15:49 - and create
15:54 - and now i just have to copy this url
15:56 - right here
15:57 - so i'm going to go to copy
16:00 - okay now i'm in my console and i'm in
16:03 - the root directory the notable directory
16:05 - i'm going to create a configuration file
16:07 - first i'm going to create a config
16:09 - directory
16:11 - now i'm going to go into that directory
16:16 - and now i'm going to create a
16:18 - db.js file where we're going to create
16:21 - put our configuration for our database
16:24 - so i'm going to go back into sublime
16:27 - there we go
16:29 - and here is my config
16:31 - directory that i just created and here's
16:33 - my database file
16:35 - so in this file
16:37 - we're going to add the url so
16:39 - module.exports
16:42 - equals this is the url we just copied on
16:45 - mongodb
16:46 - url
16:48 - and we're going to make sure it's in
16:50 - parentheses
16:51 - so i just copy this now i also have to
16:54 - insert my username and password
16:56 - so the username is bo fcc
17:00 - the password this is a very secure
17:03 - password it's just
17:05 - password
17:06 - and uh we'll uh change that in a little
17:08 - bit here now if you are going to commit
17:11 - this project to github you want to be
17:13 - sure to include the get ignore file
17:16 - so that you can so you don't share your
17:17 - password for with everyone like i'm
17:20 - doing through this video
17:21 - um
17:22 - so now in the server.js file
17:26 - we can use the client to connect
17:29 - to the database
17:31 - and then use this to wrap the app set up
17:34 - so let's see how to do that
17:36 - first we're going to require it so const
17:41 - db we're requiring the database that
17:43 - database configuration file require
17:52 - okay now i'm going to line this up up
17:53 - here and then down here we're going to
17:56 - use the client so
17:59 - dot connect so we can connect to the
18:01 - database
18:02 - db.url that's from the the url that we
18:06 - just created in the configuration file
18:09 - and we're going to pass in
18:11 - um we're going to create a callback
18:13 - function we're going to
18:15 - pass in the error and the database
18:23 - and we're going to check if there is an
18:25 - error
18:26 - and if so we're going to
18:29 - return
18:31 - we're just going to log the error
18:35 - okay this next part
18:37 - this text up here we're going to put
18:39 - into our mongod client.connect so i'm
18:42 - going to cut this
18:43 - and i'm going to put right
18:46 - here
18:47 - so i just paste it in there we're just
18:48 - going to change a few things so instead
18:51 - of passing in an empty object here i'm
18:53 - just going to pass in database
18:57 - and actually that's all we're gonna
18:58 - change
18:59 - so that's the last of the infrastructure
19:02 - setup
19:03 - it's all route building from here
19:06 - mongodb stores data in collections which
19:08 - are exactly how they sound
19:10 - in this case we want to store notes in a
19:13 - collection called notes so since we pass
19:16 - in the database as the db argument in
19:19 - the routes see right here we're passing
19:21 - in the database right here in the routes
19:23 - so we can then access it like so well
19:27 - first let's delete this this was just
19:28 - temporary
19:30 - and
19:31 - if we write db.collection
19:35 - and notes so that's just how we would
19:37 - access our database
19:40 - so creating a note is a is as simple as
19:42 - calling insert on the collections so we
19:45 - can put
19:47 - dot insert
19:50 - and we pass in the note that we we still
19:54 - have to create the note but we're also
19:56 - going to
19:57 - um pass in the callback function
20:01 - with an error and a results
20:07 - okay so so we pass in the note here i'm
20:09 - going to create the note right above
20:11 - this line so const note
20:14 - equals
20:15 - now it's just going to be a json object
20:18 - and it's going to be a text is going to
20:20 - equal rec dot body dot body
20:24 - so
20:26 - wreck that body dot body just gets the
20:29 - the body variable from the request so
20:31 - rec.body.body just gets gets the body
20:34 - variable from the request here so if we
20:36 - go into the uh to postman we can see
20:39 - that we're passing in the title and a
20:41 - body
20:42 - so that's where we're getting that body
20:44 - there so i'm also going to create the
20:46 - note with a title
20:48 - rec.body.title
20:51 - okay once the insert is complete
20:54 - or has failed for whatever reason
20:57 - we want to either send back an error or
21:00 - send back the newly created note object
21:03 - so here's how we finish this code up
21:05 - here
21:06 - if error
21:09 - res.send
21:12 - we're going to send an error
21:15 - this is just json here
21:17 - and error
21:19 - has occurred
21:22 - else
21:24 - res.send
21:27 - result dot ops
21:30 - zero
21:32 - so the result is going result to opt is
21:35 - going to be an array here
21:37 - and we're just going to send the the
21:39 - zeroth element or the first element in
21:42 - the array back which is the note that we
21:44 - just created so let's try out i'm going
21:46 - to save this
21:48 - i'm going to make sure my server is
21:50 - running it is
21:51 - now going to postman and we're going to
21:53 - send a x dash www.that's
21:57 - url encoded
21:58 - post request with postman with a title
22:01 - and a body just like we have here
22:03 - so i'm just going to click send and
22:05 - there was an error connecting to
22:09 - the server so let's see what we did
22:11 - wrong
22:12 - hmm
22:14 - result is not defined
22:17 - okay here's the problem i have results
22:19 - here and i have a result there so this
22:22 - was supposed to be the same so result
22:24 - now it's a singular and singular
22:27 - so let me save that
22:29 - and we're going to go back into postman
22:31 - we're going to send this again
22:33 - and here we go we got this the text is
22:36 - what a great note and the title is my
22:38 - note title so we got this response from
22:41 - the server
22:42 - and also assigned an id to it so let's
22:45 - go into mlab now
22:47 - so if we go into mlab we go to
22:49 - collections
22:51 - and then i refresh here we can see
22:53 - there's now a collection called notes
22:58 - and in there
23:00 - what a great note
23:02 - and my note title
23:04 - and it looks like it created a note
23:06 - twice one for the error and one for for
23:09 - the one that did not cause an error it
23:11 - still created the note both times but
23:14 - the response caused the error so it
23:16 - didn't show up in the response and i
23:18 - actually can delete it right through
23:20 - mlab so i'm gonna hit the delete button
23:22 - here
23:23 - okay so now we just have one note in our
23:25 - database
23:26 - now the read route
23:28 - we can pick up the pace a bit so say you
23:31 - want to get back the note that we just
23:33 - created by navigating to
23:35 - let's say we want to go to localhost
23:38 - 3000
23:39 - slash notes
23:41 - slash and then we put some id so in this
23:45 - case the id would be this bit number
23:47 - right here
23:49 - and i want to put the id and then i
23:52 - does that do anything no it doesn't but
23:54 - we can easily create that
23:56 - so here here's what that would look like
23:59 - in the notes.notesroute.js
24:02 - so we're going to create another route
24:04 - here app.get
24:06 - so instead of a post it's a get
24:09 - so this is how we get data from the
24:11 - server
24:12 - notes
24:13 - slash
24:14 - and then id we're going to go to that
24:17 - route note slash id
24:19 - rec
24:21 - res
24:26 - so it's pretty similar to this one up
24:29 - here the app.post you have the route and
24:31 - we create a callback function with rec
24:33 - and res just like before we're going to
24:35 - call a method on the database collection
24:38 - of notes
24:39 - so
24:40 - here it's going to be the aptly named
24:42 - find one we're going to find one element
24:45 - from the database so first i'm going to
24:48 - create
24:49 - a variable called details which is going
24:52 - to be the element we're trying to get
24:54 - from the database so it's going to equal
24:58 - trying to get something with the id and
24:59 - the id is going to equal
25:01 - well
25:02 - i'm just going to put a temporary thing
25:04 - id goes here
25:06 - i have to show you later how we're going
25:08 - to actually put the id in there
25:11 - but first i'm going to show you the rest
25:12 - of this code so if we do db.collection
25:17 - and notes
25:22 - dot find
25:23 - one
25:25 - details
25:27 - we're going to pass in the error and the
25:28 - item to this callback function
25:34 - and now the error in the result is going
25:35 - to look very similar to this code down
25:37 - here so i'm just going to copy this
25:40 - and paste that in
25:42 - but instead of um
25:45 - the result.ops 0 i'm just going to put
25:47 - item we're going to return the item
25:49 - which gets gets it right from here so
25:51 - let's go back to this id up here
25:54 - now we could grab the id from the url
25:56 - parameters via
25:59 - rec.params.id
26:00 - however if you just try to plop in the
26:02 - string
26:03 - into this above it won't work
26:06 - mongodb requires not just an id as a
26:09 - string but an id as an object or as i
26:12 - call it an object id
26:15 - so that's actually an easy fix to do
26:17 - we're going to have to require something
26:19 - at the top so i'm going to do var
26:22 - dot var
26:24 - object
26:27 - id
26:29 - equals require
26:37 - db
26:40 - dot
26:41 - object id
26:44 - and then down here after the the get
26:47 - command
26:48 - app.get when we put const id equals rep
26:53 - dot params
26:55 - dot id
26:57 - so now this id is just the string of the
26:59 - id from the query the parameters in the
27:01 - url now we can
27:04 - fill in the rest of this so the id we're
27:07 - going to take this offer says id goes
27:09 - here and i'm going to put new
27:11 - object id
27:14 - id
27:15 - so it's going to create that id as an
27:17 - object to pass into
27:21 - so let's try it out
27:23 - i'm going to save this i'm going to
27:26 - check my server to see if there's no
27:27 - errors and there is an error so let's go
27:30 - back
27:33 - okay here's the problem i need a
27:34 - parentheses here and i have to take off
27:37 - this parentheses and while i'm at it
27:39 - i'll add some semicolons
27:44 - okay let's go back to the database and
27:45 - see if there's an error
27:47 - okay no error so
27:50 - i'm actually this time i'm gonna go to
27:51 - my browser and just refresh this
27:56 - oh and this is actually supposed to be
27:58 - eight thousand sub three thousand so
28:00 - let's do that and
28:02 - it returns with the id the text what a
28:05 - great note and my note title you can
28:07 - also do in postman
28:09 - first of all let me copy this
28:12 - let's see if that's let's see if that's
28:13 - the same one yep that's the same id so
28:16 - i'm going to do a
28:17 - get
28:19 - and i'm going to do slash and then put
28:21 - the id there send that
28:24 - and yep it comes back with my what a
28:27 - great note my note title
28:29 - and that was directly from the database
28:31 - okay now the delete route
28:33 - deleting an object is actually pretty
28:35 - much the same as finding an object so
28:39 - i'm just going to copy
28:41 - the the get code the fine code because
28:44 - we're just going to make a few changes
28:46 - to make it the delete the delete code
28:49 - so we're just going to use the instead
28:53 - of find one we're going to use remove
28:56 - also instead of get
28:58 - we have to show that it's a delete
29:00 - request
29:02 - and then here
29:04 - instead of sending back the item there
29:06 - is no item so we're going to send note
29:12 - id
29:13 - deleted
29:15 - and let me put another space in here
29:19 - and that's the delete route
29:21 - and now the update route this is the
29:23 - last one the put is basically a hybrid
29:25 - between read and create you find the
29:28 - object then update it accordingly so the
29:31 - put is basically a hybrid
29:33 - between the read route that's this one
29:36 - and the create route which is this one
29:39 - here
29:40 - so you find the object and then update
29:42 - it accordingly so i'm going to copy this
29:45 - one this one right up here
29:47 - and let's put it right here
29:51 - so instead of get it's going to be put
29:55 - and this is going to be the same this is
29:57 - going to be the same
29:59 - but now i'm going to get this
30:01 - line from here the const note equals and
30:04 - the the json object with the text in the
30:06 - title i'm going to put it right
30:09 - here
30:11 - under the details
30:13 - and now we're going to change this next
30:15 - line a little bit db.collection
30:18 - notes dot
30:20 - update
30:22 - and we're going to pass in the details
30:25 - and the note
30:27 - and then
30:28 - after we pass in the note everything
30:30 - else
30:31 - is going to stay the same so let's go
30:33 - into postman and we're going to try
30:35 - these out so first of all let's try this
30:37 - delete request so if i pass in delete
30:41 - and send that over
30:43 - this note was deleted and if we go back
30:46 - into mongodb
30:50 - if i refresh
30:53 - there is no longer a note in our
30:56 - database
30:58 - so let's create another note
31:01 - by doing a
31:03 - post
31:06 - and this time i'm gonna have to pass in
31:08 - a body
31:09 - and i'll say
31:11 - my note title and put some exclamation
31:14 - points in here so it'll be different
31:16 - we'll send that and if we get this id
31:20 - here
31:21 - i can
31:22 - now do a
31:24 - um a
31:25 - get request
31:27 - send that
31:29 - and we get that note back that we just
31:31 - created and again it's going to be in
31:33 - mongodb if i refresh mongodb
31:36 - yeah our note is there what a great note
31:38 - my note title
31:40 - and if i go now we're going to try the
31:43 - the put
31:45 - so
31:47 - here
31:48 - i'm going to pass in this body so i'm
31:50 - going to go to this route here but i'm
31:53 - going to instead of saying what a great
31:55 - note i'm going to say what a bad note
31:58 - and send that over
31:59 - okay let's see if that worked we'll go
32:01 - over into our mongodb and refresh it
32:06 - and it's hard to see here but it still
32:07 - said it says what a bad note so it has
32:10 - changed and if we go back we can even
32:14 - do another get to see what it is so if i
32:16 - send a get
32:18 - what a bad node
32:20 - so now we have every route in crud we
32:23 - have create
32:25 - read update and delete
32:28 - note the imperfection in this code if
32:30 - you fail to supply a body or title the
32:33 - put request will nullify those fields on
32:36 - in on the note in the database you could
32:38 - easily add some conditional logic to
32:40 - update the fields only if they're
32:42 - present in the request
32:43 - i left that out just to keep it simple
32:46 - well that's it you have a working node
32:48 - api with each of the four major crud
32:51 - operations
32:52 - the goal of this tutorial was to give
32:54 - you a degree of familiarity with express
32:57 - node and mongodb
32:59 - you can use your simple app as a
33:00 - launching pad for more complex projects
33:03 - my name is beau carnes
33:05 - don't forget to subscribe and remember
33:07 - use your code for good