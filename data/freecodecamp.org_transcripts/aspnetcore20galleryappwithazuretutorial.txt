00:00 - hey guys wes here and we're going to
00:01 - build a simple image gallery where we
00:04 - can actually upload images to azure blob
00:06 - storage
00:09 - okay so here is a very brief look at the
00:12 - application that we'll be building over
00:14 - this series so we have a very simple
00:17 - image gallery application it's built
00:19 - completely in asp.net core
00:22 - 2.0
00:24 - using asp.net core mvc
00:26 - and so you'll see that we have a gallery
00:28 - page here with just a few images in it
00:30 - at the moment and we can click on any
00:33 - one of these images and go to a simple
00:35 - detail view
00:36 - so
00:37 - for now that's what we have we have some
00:40 - metadata on each of these images
00:41 - including a title when the image was
00:44 - created as well as some tags
00:46 - that will actually build out a search
00:48 - feature to allow users to search for
00:50 - images
00:51 - so our application will grow beyond this
00:53 - point we'll also have the ability to
00:55 - upload new images and have those images
00:58 - stored
00:59 - in the cloud using azure blob storage so
01:02 - we'll be building out a complete mvc
01:04 - application
01:06 - with a service layer and a web layer and
01:09 - we'll use a sql server as our back end
01:12 - so you'll want to make sure that you
01:14 - have asp.net core 2.0 installed on your
01:17 - machine
01:19 - and
01:20 - sql server management studio with sql
01:22 - server express installed i'll be using
01:24 - visual studio 2017 to do all the coding
01:27 - for this series as well so if you'd like
01:29 - to follow along directly i would
01:31 - recommend just downloading the free
01:33 - version of visual studio 2017 as well
01:35 - start out by using some images that are
01:39 - hosted remotely just to kind of show how
01:42 - the web layer works and then we'll move
01:44 - on to hosting images locally on our own
01:47 - machine and then finally hosting images
01:50 - as i mentioned in the cloud
01:52 - on azure so we'll work our way there
01:54 - over the course the next several videos
01:56 - and yeah i hope you enjoy the series
01:59 - okay so let's go ahead and fire up
02:01 - visual studio
02:03 - and we're going to create a new project
02:05 - and
02:06 - we will select asp.net core web
02:09 - application
02:11 - and i'm just going to call this
02:15 - simple image gallery
02:17 - and just be sure to pick a location
02:19 - maybe with other development projects
02:21 - that you're working on
02:23 - and then we will create a directory for
02:25 - the solution and also create a git
02:27 - repository here
02:29 - so we'll select ok
02:31 - and then we'll have the option to choose
02:33 - from a number of different templates now
02:35 - that we're using asp.net core 2.0 so
02:38 - first of all make sure that we are using
02:40 - net core and that we're using
02:42 - specifically asp.net core 2.0 and then
02:45 - we're just going to select the web
02:47 - application which will be implementing
02:49 - the model view controller pattern and
02:51 - we're not going to worry about
02:53 - authentication for this particular
02:55 - version of the app
02:58 - so this will just take a moment and it
03:00 - is going to scaffold out a very simple
03:03 - mvc app for us
03:05 - which we'll see here in just a moment so
03:07 - we have a few different folders we have
03:09 - directories for our controllers models
03:11 - and views and if we just take a peek in
03:14 - here we can see that we have a simple
03:16 - home controller
03:18 - and this has got a few actions on it we
03:20 - have an index about and contact action
03:24 - and some corresponding views here it
03:25 - looks like and then one simple view
03:28 - model here
03:29 - looks like for an error view
03:32 - so that's all good we won't be really
03:34 - using any of the scaffolded out nvc
03:37 - stuff
03:38 - we'll just be writing our own here
03:40 - but we will use these directories
03:42 - you can see we have an appsettings.json
03:44 - file a power.json file and a bundle
03:47 - config and then we have our program.cs
03:50 - and startup.cs so you'll be familiar
03:53 - with these files if you're coming from
03:56 - asp.net core 1.0
03:58 - there are some differences here if we
04:00 - take a look in program.cs
04:02 - you can see that we have a
04:04 - iwebhost build webhost method here
04:09 - and we're just calling
04:10 - createdefaultbuilder on it so there's a
04:12 - lot that's actually kind of packaged
04:13 - into this method
04:16 - which is something that's quite a bit
04:18 - different from asp.net core 1.0 so we
04:22 - won't go into all the details here in
04:25 - this particular series but just be aware
04:27 - that this is still the main entry point
04:30 - for our web app
04:31 - then if we take a look in our startup.cs
04:34 - class
04:37 - and we scroll down a bit you can see
04:39 - that we have the constructor here and we
04:41 - have this configure services method
04:43 - still
04:44 - this will be where we register services
04:46 - for dependency injection into our
04:48 - controllers and we'll have just probably
04:51 - one or two simple services for the
04:53 - series and then we have this configure
04:56 - method
04:57 - and this is where we configure our http
05:01 - request pipeline so our middleware here
05:04 - so you can see that we're saying things
05:06 - like use static files we'll take a look
05:07 - at those in a moment here use mvc and
05:10 - then we
05:12 - show how we actually are going to
05:14 - configure our routes and our routing for
05:16 - this application so in this case we will
05:18 - have like our app slash controller slash
05:22 - action
05:23 - and then some optional id you can also
05:25 - see that we have the ability to
05:29 - change change some things rather easily
05:30 - here depending on whether we're in a
05:32 - development environment or a production
05:34 - or a staging or environment however we'd
05:36 - like to configure that
05:38 - we have the ability here to do things
05:41 - like for example use developer exception
05:44 - page where we might do things like
05:46 - actually show the stack trace for a
05:47 - particular error that gets thrown in the
05:49 - browser otherwise we have some custom
05:52 - error page so we can do sorts of
05:54 - different types of configuration like
05:56 - that here and that's all handled
05:58 - in our configure method that's in the
06:00 - startup class okay so we'll be
06:02 - revisiting this soon for now let's go
06:04 - ahead and create our first controller so
06:06 - if we expand controllers here we won't
06:08 - worry about our home controller for now
06:11 - i'm going to do is go ahead and add a
06:12 - new controller and we'll select minimal
06:14 - dependencies so we'll go ahead and right
06:15 - click on controllers and we'll add a new
06:17 - controller and we'll just make it an
06:19 - empty mvc controller
06:21 - and we're going to call it image gallery
06:23 - controller or let's just call it
06:24 - actually a gallery controller and so
06:26 - this is going to scaffold out a very
06:28 - basic controller class for us
06:34 - so you can see that it's extending this
06:36 - controller base class this is coming
06:38 - from asb
06:39 - net core mvc and then we have a simple
06:42 - index action that's just returning an
06:44 - empty view so let's just kind of get
06:46 - right into it here we we're going to
06:48 - have a gallery and so we have to think
06:51 - about
06:52 - what we actually want to pass
06:54 - in terms of a model to the view that
06:57 - represents our gallery
06:59 - so we know for sure that we're going to
07:01 - store that in a view model so we'll save
07:03 - our model is equal to
07:05 - and we'll make a new
07:08 - gallery index model which of course
07:10 - we'll have to create
07:13 - and then we'll pass this to our view
07:17 - so let's go ahead and create this class
07:20 - we're going to create that in our models
07:21 - folder so this model's folder will
07:23 - contain all of our view models we'll go
07:25 - ahead and add a new class
07:27 - call it gallery index model
07:30 - and so now let's just think about the
07:32 - type of data that we'd like the user to
07:35 - see or interact with
07:36 - on our gallery index page
07:39 - so first of all we'll have a series of
07:42 - images of course for the user to perhaps
07:45 - click on so we'll have an enumerable
07:47 - collection
07:49 - of gallery images
07:51 - and this will be another type that we
07:52 - need to create
07:55 - we'll call this property images and then
07:57 - we'll write our auto property here
08:00 - okay and then the next thing that i'd
08:01 - like to provide on our gallery index
08:04 - view is
08:06 - a search box that a user could perhaps
08:08 - write a query and get images that have
08:12 - you know some metadata
08:14 - associated with whatever the user's
08:16 - queried returned back to this
08:18 - view so
08:20 - we can do is go ahead and create a
08:22 - string
08:23 - search query
08:26 - and we'll use this particular property
08:29 - to store that user's input okay so now
08:31 - clearly we need to create a gallery
08:34 - image model
08:35 - but in this case i'd like this to
08:37 - actually be
08:38 - a domain model or an entity model
08:41 - rather than a view model so this will
08:43 - map directly to
08:45 - a record in in our database perhaps in
08:48 - like a gallery images table
08:51 - so for that i'm actually going to create
08:52 - a new project in our solution so we'll
08:55 - go ahead and right click here and we'll
08:57 - add a new project and in this case it's
08:59 - just going to be a.net core class
09:00 - library
09:02 - and we're going to call it simple image
09:03 - gallery
09:05 - dot data
09:09 - and you can see that it's going to
09:10 - create
09:12 - a simple
09:12 - class here just called class 1 and we'll
09:15 - use this class as our db context
09:19 - so let's call it
09:22 - simple image gallery tv context
09:25 - and we'll extend db context
09:29 - so we'll actually need to add a few
09:31 - packages here now to set this up
09:35 - so if we right click on simple image
09:37 - gallery.data so our data project
09:40 - and we're going to select manage new get
09:42 - packages
09:45 - and then we'll select browse
09:47 - and first of all we need to bring in
09:49 - microsoft
09:51 - dot entity framework core
09:53 - so we'll go ahead and install that
09:55 - and we'll accept the terms next we're
09:57 - going to install entity framework
09:59 - core.tools this should allow us to
10:01 - actually run database migrations from
10:04 - our package manager console which we'll
10:06 - look at in just a little while and then
10:08 - we'll also install entity framework core
10:10 - dot sql server we'll use sql server as
10:13 - our back end for this project okay with
10:16 - those dependencies installed i'm just
10:17 - going to go ahead and close this tab and
10:19 - now we should import microsoft entity
10:21 - framework core.db context here the other
10:23 - thing i'm going to do is actually rename
10:25 - this file from class 1
10:28 - to simple image gallery db context
10:34 - okay so we can kind of think of our db
10:36 - context as our database and
10:40 - the particular database that will be the
10:41 - backend for this application and so what
10:44 - we need to do here is actually create
10:46 - a constructor
10:49 - so we'll just say public simple image
10:51 - gallery db context
10:54 - and we'll instantiate that with some db
10:56 - context options
11:00 - and then we'll call base options to
11:02 - ensure that this gets passed to
11:05 - adb context-based class
11:08 - and so here's our simple constructor
11:11 - and then in our db context class so in
11:15 - this class we're actually going to
11:17 - define some db sets
11:19 - and these will represent
11:22 - in a sense the tables that will be in
11:24 - our simple image gallery database
11:28 - and so we're going to have a public db
11:30 - set
11:33 - of gallery images
11:36 - and we'll call this
11:38 - table gallery images
11:40 - and then write our outer property here
11:43 - and so this gallery image
11:45 - is the same entity model that we would
11:48 - then also like to use at some point in
11:50 - one of our views in our gallery index
11:52 - view here
11:54 - so if we come back what i'm going to do
11:57 - is now actually create a new folder in
11:59 - our data project
12:01 - called models
12:05 - and then here we'll add
12:07 - our class for our gallery image
12:11 - okay so make this class public
12:15 - and now we have to think a little bit
12:17 - about
12:18 - what particular properties we would like
12:20 - to have on
12:22 - an instance of a gallery image
12:25 - so first of all let's just go ahead and
12:27 - give each of our images a simple title
12:39 - and then perhaps we'll have a date time
12:41 - for when that
12:42 - image was created
12:50 - and since we'll be storing the images in
12:51 - the cloud what i'm going to do is create
12:54 - a url string that we can use
12:57 - to actually point to you know the
12:59 - location of that image on the web that
13:02 - we can then you know use that to create
13:04 - things like image tags and links
13:07 - when we actually start building out our
13:08 - views so each gallery image will have a
13:11 - specific url where it's hosted
13:17 - and then maybe finally we'll have this
13:19 - collection
13:20 - of strings and this will represent
13:24 - the tags that are on that particular
13:26 - image
13:27 - so we'll provide the ability for users
13:30 - to actually tag images with some
13:31 - metadata that we can then use to search
13:34 - on in our gallery okay cool so we're
13:36 - actually almost ready to run our first
13:39 - database migration at which point our
13:41 - gallery image table will be created with
13:43 - columns for the title created url
13:46 - and tags and that reminds me we should
13:48 - also provide
13:49 - an int id
13:51 - we could also make it a long
13:53 - but yeah we'll have an id and that will
13:56 - of course be the primary key on each of
13:58 - our gallery image objects
14:00 - okay so what i'd like to do
14:02 - next is to actually go back up into our
14:05 - web project here
14:07 - and let's take a look at our
14:09 - appsettings.json file
14:11 - so you can see we have a simple json
14:13 - object here
14:15 - that specifies this logging
14:18 - object which has sort of key value pairs
14:20 - for
14:21 - some some things that we'd like to
14:23 - configure perhaps regarding logging we
14:25 - have this
14:27 - appsettings.development.json file that
14:29 - looks like it logs some additional
14:31 - information here
14:33 - with the
14:34 - the default way that our application
14:36 - gets built and we only currently have
14:38 - this development environment but what
14:40 - it's going to do is it's actually going
14:42 - to load you know whatever is in our app
14:44 - settings.json and then whatever is in
14:47 - our app settings
14:48 - for that particular environment.json
14:50 - file for this series we're not going to
14:52 - be worrying about configuring different
14:55 - types of environments we're just going
14:56 - to be building a simple version of this
14:58 - application with a single environment
15:01 - and so in our appsettings.json
15:04 - base you know configuration file what
15:06 - i'm going to do is create
15:08 - a new object for our connection strings
15:21 - and then we're just going to give this
15:23 - connection string a name and i'm just
15:25 - going to call it default connection
15:34 - and then we're going to provide a
15:35 - connection string to a sql database so
15:38 - you want to make sure that you have
15:39 - microsoft sql server installed on your
15:42 - machine and you should also make sure
15:44 - that you have an instance of local db
15:47 - running so let's go ahead and check that
15:48 - out very quickly so i'm going to fire up
15:50 - commander here and if i just type in sql
15:53 - local db info
15:55 - we can see that i have microsoft sql
15:57 - localdb running
15:59 - mine's called ms sql localdb so if we go
16:02 - back into our default connection here
16:05 - what i'm going to do is set the server
16:07 - equal to
16:09 - localdb
16:10 - and then escape the backslash and we'll
16:13 - have microsoft or ms sql localdb
16:17 - and then we can name our database
16:21 - which i'm just going to call
16:22 - simple image gallery
16:25 - and we'll set this
16:28 - trusted connection
16:31 - equal to true
16:36 - and then we'll set multiple active
16:38 - results that's equal to true as well
16:44 - so this is a pretty standard connection
16:46 - string to a sql database which you you
16:48 - know you may have used something like
16:50 - this before if you've developed any
16:51 - other
16:52 - asp.net applications in the past
16:55 - and so now that we have a connection
16:57 - string set up what i'm going to do is go
17:00 - back into
17:02 - our gallery controller and we need to
17:04 - import our gallery index model
17:06 - and now i'm going to right click on
17:08 - simple image gallery and we're going to
17:09 - add a reference
17:11 - to our data project so we'll go ahead
17:13 - and do that
17:14 - okay so let's go ahead and just build
17:16 - the project and it looks like we have a
17:18 - few errors to clean up here so let's go
17:20 - to
17:21 - the first one which is in our data
17:23 - project in the db context and we need to
17:25 - make sure that we import
17:28 - the gallery image model that we just
17:29 - created
17:30 - and so let's go ahead and rebuild
17:32 - our solution again
17:36 - and we have one more error to fix here
17:38 - this is in our gallery index model class
17:41 - and we should go ahead and bring in
17:44 - the using here as well
17:46 - so then if i control period at the top
17:48 - of this file i can remove the unused
17:51 - directives and we'll go ahead and
17:52 - rebuild the solution
17:54 - okay so everything's looking pretty good
17:58 - so now let's head back up into our web
18:00 - project
18:02 - and into the startup class here
18:05 - and what i'm going to do is down in our
18:07 - configure services method
18:11 - i'm going to go ahead and say services
18:13 - dot
18:14 - add db context
18:19 - and here we need to specify our
18:22 - simple image gallery db context
18:29 - and then we can pass it some options
18:31 - here on this lambda
18:38 - and we'll say use sql server
18:42 - and then we need to actually pass it a
18:44 - particular connection string that we'd
18:45 - like it to connect to
18:49 - so say configuration dot get connection
18:51 - string this is all provided for us it's
18:53 - kind of nice and then we just pass it
18:55 - the name you know the key in our json
18:58 - file that we were just working with a
19:00 - few moments ago
19:01 - which is default connection
19:10 - oops and i have an extra parents here as
19:12 - well so i'm just going to move this down
19:13 - to another line so you can kind of see
19:15 - it a little bit better
19:17 - and so this connection string default
19:19 - connection again corresponds in our
19:22 - appsettings.json here to this default
19:24 - connection
19:27 - in our connection strings
19:31 - so it's kind of nice how simple that is
19:32 - to point our application
19:35 - to the particular database that we'll be
19:37 - interacting with
19:39 - okay
19:40 - and actually we need to go back and take
19:42 - a quick look at our gallery image
19:45 - object and what i'm going to do here on
19:48 - our tags
19:50 - is rather than make this a collection of
19:52 - strings what i'm going to do is make
19:54 - this a virtual
19:56 - enumerable of tag
19:58 - and we'll actually create
20:00 - another domain model for tags that
20:03 - images might have
20:05 - otherwise when any framework tries to
20:08 - create this gallery image table it's not
20:11 - really going to understand how to map
20:14 - just a collection of strings
20:17 - to
20:18 - you know this object and so we could
20:20 - specify it as unmapped
20:22 - but on the other hand i would like to
20:24 - actually use the tags to query for
20:27 - objects in our database so i'm going to
20:29 - represent that as
20:31 - this tag type
20:33 - so in our models we'll go ahead and
20:34 - create another class
20:39 - called tag and actually let's call it
20:41 - image tag
20:44 - make it public
20:45 - and we'll very simply just give it an
20:48 - int id
20:52 - and then a string description
20:54 - okay so then back in our gallery image
20:56 - class we're going to rename this image
20:58 - tag
21:00 - and so now we'll have a collection of
21:03 - image tag objects
21:05 - that may correspond to a particular
21:08 - gallery image so we have a sort of
21:10 - one-to-many relationship here where a
21:12 - single image may have many different
21:15 - image tags
21:16 - and i'll just go ahead and clean up the
21:18 - single unused using here and now finally
21:21 - we'll head back into simple image
21:23 - gallery db context and we'll add a db
21:25 - set here
21:26 - for our
21:28 - image tags as well
21:32 - okay so we're going to go ahead and try
21:34 - to run our first database migration for
21:36 - our application here
21:38 - so to do that we need to head to the
21:39 - package manager console and we can get
21:41 - there from view
21:43 - other windows package manager console
21:46 - and we'll just be sure that the default
21:48 - project is set to simple image
21:50 - gallery.data
21:51 - and then we'll add migration and then in
21:54 - quotes initial migration
21:56 - so we'll try to run this
21:58 - and you can see that it has now run
22:02 - it's created a migrations folder in our
22:05 - data project
22:06 - and then we have a simple
22:09 - initial migration c-sharp file here and
22:12 - you can see what it's it's essentially
22:13 - doing so entity framework has taken a
22:16 - look
22:17 - at
22:17 - our db context class
22:20 - and the gallery image and image tag db
22:23 - sets that we've created here and what
22:26 - it's going to do is look into these
22:28 - classes
22:30 - and
22:31 - check and see if it has a table on a
22:34 - particular database you know if the
22:36 - database even exists at first it's then
22:38 - going to check to see if it has tables
22:40 - mapped to either of these classes if not
22:43 - it's going to go ahead and create them
22:45 - and it's going to create columns
22:47 - corresponding to each of the properties
22:49 - that are on these classes
22:51 - and you can kind of see that happening
22:54 - here if you just take a peek at this the
22:56 - code that was generated here in our
22:57 - migration class you can see we have this
23:00 - migration builder object and then we
23:02 - have methods like create table on it and
23:03 - we're specifying a name for the table
23:05 - and some columns
23:07 - you could of course manually edit these
23:09 - migration files too if you want to make
23:10 - some kind of
23:12 - change i wouldn't necessarily recommend
23:14 - it and you can also see that it is
23:16 - setting the primary keys that are
23:17 - getting mapped to the id
23:19 - property on each of our objects and also
23:22 - this foreign key relationship is getting
23:24 - created that is linking our gallery
23:27 - images over to the image tags
23:31 - so that looks pretty good now all we
23:33 - need to do is actually
23:35 - run the command update database
23:40 - and so what this is going to do is
23:41 - essentially make a connection to sql
23:44 - server that's running locally here
23:46 - and it's going to go ahead and create
23:48 - this new database for us
23:51 - and
23:52 - do our first our first migration here so
23:54 - we'll have a schema with these two
23:56 - tables in it okay it looks like i'm
23:58 - getting an error here that says there's
24:00 - an error occurred while establishing a
24:03 - connection to sql server the server was
24:05 - not found or was not accessible
24:08 - verify that the instance name is correct
24:10 - and that sql server is configured to
24:12 - allow remote connections the specified
24:14 - local db instance does not exist so what
24:17 - i'm going to do to troubleshoot here is
24:19 - to just go ahead and open up sql server
24:20 - management studio
24:22 - and we're just going to connect to local
24:24 - db slash ms sql local db and go ahead
24:27 - and see if we can connect
24:30 - okay so that's looking good
24:32 - we have a number of different databases
24:34 - that i've created in the past here so i
24:37 - know that we have a connection
24:39 - so let's go ahead and just check our
24:41 - connection string just kind of double
24:42 - check and make sure that we have set
24:44 - that up correctly so we'll head back to
24:47 - appsettings.json so i'm going to move
24:49 - this off to one side here and then we'll
24:51 - take a look at sql server management
24:53 - studio
24:54 - uh and i see our typo here so this
24:56 - should be
24:57 - ms sql localdb so i'm going to go ahead
24:59 - and maximize this again and be sure you
25:01 - get your connection string right i typed
25:03 - mine in incorrectly here but we should
25:05 - be trying to connect to
25:07 - localdb in parens and then an escaped
25:10 - backslash ms sql localdb
25:13 - with two s's here
25:18 - and i had previously just provided one s
25:20 - so let's go ahead and try to rerun
25:23 - update database
25:25 - and so it's making a connection to our
25:27 - local db instance
25:29 - and it's going to go ahead and create
25:30 - the simple image gallery database
25:33 - and you can see that it says done so if
25:36 - we head back into microsoft sql server
25:38 - management studio
25:40 - and then i'm just going to click refresh
25:42 - here on our local db instance
25:45 - and then expand databases and now we can
25:47 - see this simple image gallery database
25:50 - among the list of databases that you may
25:52 - already have on your machine if we
25:54 - expand this and then expand tables
25:58 - we can also see now that we have
26:01 - a gallery image table
26:03 - with an id created title and url
26:07 - and an image tags table here that just
26:09 - has an id and a description and then a
26:12 - foreign key back to a particular gallery
26:15 - image id
26:17 - okay so that's looking pretty good
26:19 - let me just go ahead and minimize sql
26:21 - server management studio for right now
26:23 - and i'll close
26:24 - my app settings and we can also close
26:27 - the package manager console for the time
26:29 - being i'm just going to go ahead and
26:30 - also close all the tabs and if you're
26:32 - tracking this project using git then
26:34 - this may be a good time
26:36 - perhaps a bit late but this may be a
26:38 - good time to make a commitment
26:52 - okay so
26:54 - back in our project here we had started
26:56 - building this gallery controller before
26:59 - we created the data layer for
27:01 - application and ran our first database
27:03 - migration
27:04 - so
27:05 - we had decided that we were going to
27:07 - have a gallery index
27:09 - where we would actually use the gallery
27:11 - index view model to display some images
27:14 - and the ability to post a search query
27:16 - on this page
27:17 - so let's go ahead and before we actually
27:20 - use our our back end here and some
27:22 - services
27:23 - to either push or pull our own data
27:27 - onto the page here let's just go ahead
27:28 - and create a sort of mock some mock data
27:31 - that we can use just just to demonstrate
27:33 - how the controller and the view model
27:36 - and the view are all working together so
27:38 - you can see that anytime we have this
27:40 - gallery index model we need to supply
27:42 - some images as a list of our gallery
27:44 - image object
27:46 - and
27:47 - potentially a search query here that the
27:49 - user could use in like a search form
27:53 - and so what i'll do is probably just
27:55 - have three sort of mock images
27:59 - that we can then
28:00 - pass to our image list
28:03 - so we'll say images is equal to some
28:06 - image list that we'll actually go ahead
28:08 - and create
28:10 - so we'll do that just above here
28:12 - our image list is equal to a new
28:15 - list of gallery images
28:22 - oops and we don't need the
28:24 - semicolon here
28:27 - and here we can just go ahead and build
28:28 - that out
28:34 - so we'll specify a title and let's just
28:36 - go ahead and build out three images for
28:38 - our sort of mock implementation
28:41 - so our first image will have a title of
28:43 - say like hiking trip or something
28:47 - the url we will provide in just a little
28:50 - while here
28:51 - created we can have datetime.now and
28:54 - then tags
28:56 - we'll just mock out a quick like
29:00 - hiking image tags collection
29:04 - that we will specify above here
29:14 - so this would be a new list of image
29:16 - tags
29:17 - and let's go ahead and create another
29:19 - set of tags here
29:21 - and we'll call this city image tags
29:30 - and so what we'll do is we'll create two
29:31 - more gallery images in our sort of
29:34 - demonstration here
29:37 - so we have one for hiking trip
29:41 - one title will say
29:42 - you know on the trail
29:45 - we'll provide a url here in a moment and
29:47 - again we'll we'll hook it up with the
29:50 - hiking image tags
29:51 - and then for our third gallery image
29:55 - we'll just title it downtown
29:58 - and for the tags here we can provide the
30:00 - city image tags
30:02 - okay so if we head back up here
30:05 - into our tags we'll do is we'll just
30:08 - have some sort of mock objects here
30:10 - we'll say tag one
30:11 - there's a new image tag
30:16 - and the description will be like
30:18 - adventure and we'll make the id
30:20 - 0. and i'll create
30:25 - just three different tags here so we'll
30:26 - have adventure
30:29 - and then maybe we'll have one called
30:31 - urban
30:32 - and we'll create a third tag here
30:35 - and we'll make the description like new
30:36 - york
30:37 - with an id of two
30:39 - so these are just sort of mock objects
30:41 - again that will eventually be provided
30:43 - back
30:44 - by
30:45 - our own data
30:46 - and then we'll have a service that
30:48 - actually you know handles passing these
30:51 - these particular instances around
30:53 - so
30:54 - for now we'll just go ahead and create
30:57 - three mock tags with descriptions and
31:00 - ids so i'm just gonna go ahead and fold
31:02 - these
31:06 - and then we have a new image list here
31:08 - that has three gallery images in it
31:11 - each with a title and empty url for the
31:14 - moment created on of datetime.now and
31:18 - one of our image tag collections so one
31:21 - thing that we forgot to do here is we'll
31:23 - say hunting image tags.add tag one
31:27 - and then
31:29 - cityimagetags.adrange and we'll just go
31:31 - ahead and add range
31:34 - tag two and tag three
31:37 - and here we need to say new list of
31:40 - image tag
31:44 - okay so now we have a collection of
31:46 - hiking image tags that contains the
31:48 - single tag here adventure
31:50 - and then our city image tags contain the
31:52 - urban
31:53 - tag and the new york tag as well
31:56 - and then in
31:57 - each of our gallery images i assign one
32:00 - of these collection of tags to map to
32:02 - this
32:03 - tags property that is on our each of our
32:07 - gallery image objects
32:09 - okay so that's looking pretty good
32:11 - i'm gonna go ahead and collapse each of
32:13 - these so we'll have an image list of
32:16 - three gallery images each of which
32:18 - should have all their properties except
32:20 - for the urls and then we have our
32:23 - viewmodel here
32:24 - in which this image's property gets set
32:26 - to the image list that we just
32:28 - constructed
32:31 - and our search query will just make an
32:33 - empty string for the time being
32:36 - now let's go ahead and again just for
32:38 - demo purposes fill out the urls here so
32:42 - we'll provide some urls now that you
32:45 - know won't be hosted ourselves but will
32:47 - be hosted remotely so what i'm going to
32:49 - do is i'm going to head over to pixels
32:52 - and we'll just find a few images to use
32:54 - very briefly
32:56 - so i'll just search for hiking
32:58 - and we'll scroll around until we find a
33:00 - nice image that we might want to use so
33:02 - this one looks pretty good if we select
33:04 - download
33:05 - we can see the url for this particular
33:08 - file you definitely don't want to
33:12 - have a reference to someone else's
33:14 - hosted image if you're using it on your
33:16 - own website again this is just strictly
33:18 - for demo purposes so we'll go ahead and
33:20 - paste that in our url
33:22 - here and shortly after we demonstrate
33:25 - this we will be replacing it with our
33:27 - own images that the user can then upload
33:29 - to our application
33:31 - so then we have another hiking image so
33:33 - we'll go back and just select something
33:35 - else
33:35 - likewise we'll get the url for this
33:38 - image
33:44 - and then we have one more image to grab
33:46 - here and we'll go ahead and grab this
33:48 - url
33:50 - all right very good let's go ahead and
33:51 - save this
33:52 - and so we have a sort of mocked out
33:55 - index action here well the view model
33:57 - that will actually pass down is mocked
33:59 - out so let's go ahead and create our
34:01 - view now so i'll open up the solution
34:03 - explorer and just go ahead and pin it
34:05 - and then in views i'm going to open this
34:07 - up and we'll collapse home i'm just
34:09 - going to right click here and add a new
34:11 - folder and we'll call this gallery
34:14 - and then in gallery we'll add a new item
34:18 - and we'll make it an mvc view page
34:20 - called
34:21 - index.cshtml i like to just create a
34:23 - vanilla view without having visual
34:26 - studio scaffold it out because sometimes
34:28 - it provides more than we actually need
34:33 - and so at the top of our view here we'll
34:34 - be using razer syntax to specify the
34:36 - model that we'll be using
34:38 - on this view
34:40 - so we'll do that with a spiral model
34:43 - with lowercase m
34:45 - and then here we need to provide the
34:48 - actual model so we'll go into
34:51 - our model's namespace
34:53 - and then gallery index model will be
34:54 - what we're using here so what i'm going
34:56 - to do is just go ahead and create a
34:57 - simple div of class container
35:00 - body content
35:02 - and then we'll make a div
35:04 - of gallery content
35:07 - and then what i'm going to say is just
35:09 - at
35:10 - for each
35:11 - of our image in capital m model dot
35:15 - images
35:17 - we are going to create a new div of
35:21 - class
35:22 - gallery dash image
35:24 - and we'll just have this be an empty div
35:27 - for the time being
35:28 - now we need to go define some of these
35:30 - classes in our css
35:33 - so we can do that if you expand this www
35:35 - root directory here this is where all
35:37 - the static files for our application are
35:39 - getting served up from
35:41 - and then we have this css folder that
35:44 - contains our site.css so you can see
35:46 - that we have just a minimal amount of
35:47 - css defined for us here
35:50 - we could create a new to specify some
35:52 - custom css
35:54 - but in our case i'm just going to go
35:55 - ahead and create it in this file
35:58 - so i just need to define a few new
36:00 - classes here we have this gallery
36:01 - content and gallery image the remaining
36:04 - classes here are coming from
36:06 - what's been defined in our application
36:08 - already note also that because we use
36:11 - the template we also have bootstrap
36:12 - available to us
36:14 - so let's go ahead and create a gallery
36:16 - content and gallery image class
36:22 - and what i'm going to say here for
36:24 - gallery image is we'll specify some
36:26 - padding of say 8
36:29 - pixels
36:30 - and then for our
36:33 - and then we'll specify a default
36:34 - background color of white
36:36 - a tiny border radius
36:38 - of two pixels
36:40 - will display inline block
36:44 - and we'll specify
36:45 - an explicit width and height
36:48 - of 300 pixels
36:53 - i'm going to give just a little bit of
36:54 - margin as well
36:58 - maybe we'll make this 12 pixels
37:01 - and position relative
37:04 - i'm just going to supply a little bit of
37:06 - box shadow on this element
37:08 - fairly
37:10 - transparent here
37:20 - okay so let's kind of specify sort of
37:22 - the little container that each of our
37:23 - images will be contained in
37:26 - and then our gallery content container
37:30 - will specify a bit of padding as well
37:34 - and we can make additional modifications
37:36 - to that if we need
37:38 - so let's go back into our view so
37:41 - we now have definitions for both of our
37:45 - css classes that we're implementing here
37:47 - and then we have a for each loop where
37:49 - we're actually looping through each of
37:51 - the images
37:52 - that will pass you know whatever model
37:54 - gets passed this this view
37:58 - and though we may not want to put it out
38:00 - on the screen you know in the final
38:02 - application just to kind of demonstrate
38:03 - how this is working we can also just
38:07 - throw out the title we'll wrap in a span
38:14 - onto the page two just to show
38:16 - some of that data
38:18 - and then maybe in another for each
38:22 - we can say var tag in
38:25 - image.tags
38:29 - we can create
38:30 - an unordered list
38:32 - oops and the ul's obviously need to go
38:34 - outside of this for each
38:40 - of our
38:42 - tag.description
38:44 - and so now we have a sort of nested for
38:47 - each loop here so we'll have the set of
38:49 - gallery images and then on each of those
38:52 - images for each of that images tag we'll
38:54 - put the tag description out to
38:57 - the page as well
38:58 - again just kind of a simple version to
39:00 - demonstrate how we can get this working
39:02 - let's go ahead and build our solution
39:05 - and i'm going to go ahead and make a
39:06 - commit as well
39:14 - all right so let's go ahead and just
39:16 - fire up is express
39:19 - and we don't have a link in our app yet
39:21 - to the gallery controller
39:23 - so we can just at the url provide slash
39:26 - gallery and so you can see already that
39:30 - we are getting three of our images
39:32 - out to the page here so we don't
39:34 - actually have the images themselves
39:36 - we're getting the tags out and then it
39:38 - looks like we have a slight issue here
39:39 - with a title so let's go ahead and fix
39:41 - that
39:42 - here we need to provide
39:44 - a spiral for image dot title if we go
39:47 - back and refresh
39:48 - now we can see the titles
39:51 - so let's go ahead and get these images
39:53 - out to
39:55 - each of their sort of containers here
39:57 - and the way that i'm going to do that is
39:59 - provide some inline css here on our
40:03 - gallery image div
40:07 - so provide a background image and set
40:09 - the url equal to
40:11 - at image.url
40:13 - okay so we'll save that and go ahead and
40:15 - refresh our page
40:18 - so now we're getting an unresized
40:20 - version
40:22 - of each of the images
40:24 - what we'll do in the future for our own
40:26 - images is actually implement
40:29 - some image magic here to actually crop
40:32 - the images that a user would upload
40:34 - to their application but for now we
40:36 - could also just you know resize this
40:38 - using a little bit of css it's not ideal
40:40 - because the user still is actually
40:43 - accessing that large version of the
40:46 - image and then just getting it styled
40:48 - down to size but let's go ahead and do
40:50 - that for now anyway
40:52 - back in our css and our site.css what i
40:56 - can do is say background size
40:59 - 100
41:03 - background repeat
41:05 - no repeat
41:09 - and background position
41:15 - center
41:22 - and so if we refresh the page now you
41:25 - can see that our images aren't square
41:28 - so we're not actually cropping them but
41:30 - they are now fitting within each of our
41:32 - containers we could say
41:35 - if we wanted it to look a little bit
41:37 - perhaps nicer without doing any actual
41:39 - cropping here
41:41 - we could say 100
41:42 - to 100
41:46 - and then if i refresh
41:48 - now the image is sort of sized to the
41:51 - entire cell but you can see that there's
41:53 - some distortion going on as the image is
41:55 - stretched there's perhaps even a better
41:57 - way rather than do background size 100
42:00 - at all we could just say cover
42:03 - and if we refresh now
42:05 - we can see that the images just
42:07 - essentially fill the maximum amount of
42:09 - area they have in their div
42:11 - of course some of the image gets cut off
42:13 - but we don't have any distortion and
42:16 - what i'd like to do now is maybe to put
42:18 - a little bit of just a tiny border
42:20 - around each of the image containers it's
42:23 - the way that i'm going to do that is i'm
42:24 - actually going to nest
42:27 - the gallery image in a gallery image
42:30 - container
42:32 - and the gallery image container will be
42:34 - what
42:35 - contains many of the properties that are
42:37 - currently on our gallery image so for
42:40 - instance the padding background border
42:42 - radius display
42:44 - height with margin position and box
42:48 - shadow
42:50 - and so now this padding if we nest a
42:53 - gallery image div inside of our
42:55 - container should provide us with
42:57 - that little bit of white space around
43:00 - each of the images so let's go back into
43:02 - our index
43:04 - view and just go ahead and wrap this div
43:07 - in a div of class gallery image
43:10 - container
43:16 - and then
43:17 - i'll move the span
43:19 - with the title and the list of tags
43:22 - outside of the container
43:26 - and i'll just clean up some of this a
43:27 - little bit
43:30 - and just double check our css go ahead
43:32 - and save this
43:33 - and now go ahead and refresh the page
43:36 - and we're not actually seeing our images
43:38 - here so let's see what the issue is uh
43:41 - we need to specify actually a height and
43:43 - a width on our gallery image as well
43:46 - so we'll make these 280 by 280
43:51 - pixels
43:55 - and so yeah we get the images out to
43:58 - their containers now so the styling
44:00 - isn't perfect
44:01 - but it just gives us kind of a very
44:03 - quick and dirty starting point
44:07 - next thing that i'll do is go back into
44:08 - index here
44:10 - and to our gallery content i will also
44:12 - make this a row so just kind of like a
44:14 - bootstrap row here and then now that we
44:17 - understand that we are indeed passing
44:19 - the title and
44:20 - the collection of tags out with our
44:23 - model i'll go ahead and remove those as
44:25 - well
44:25 - and then refresh the page and this
44:27 - should give us kind of more of a gallery
44:29 - look here
44:31 - okay so we have our images out to
44:35 - our gallery view so now what i'd like to
44:37 - do is to go ahead and first of all make
44:40 - a commit because we didn't make a commit
44:42 - in the last video
44:50 - and now what i'm going to do is create a
44:52 - new project here for our services so we
44:55 - need to stop the server and then i'll go
44:57 - ahead and create it here so we'll add a
44:58 - project and i'm going to call it simple
45:00 - image gallery
45:04 - dot services
45:05 - and again we can rename the default
45:08 - class here so the first service that
45:10 - we'll create will be
45:12 - our image service so let's just go ahead
45:14 - and rename class 1 to image service
45:18 - and we wanted to implement an interface
45:22 - i image
45:25 - so first of all let's rename the actual
45:27 - file to image service
45:30 - and then in our data project will be
45:32 - where we actually specify
45:34 - this
45:35 - interface so we'll go ahead and create
45:38 - a
45:40 - new class
45:41 - and we'll make it an interface and we'll
45:43 - call it i image
45:46 - okay we'll make this interface public
45:55 - and then over in our image service
45:58 - you can see that we now need to actually
46:01 - provide a reference to our data projects
46:03 - let's go ahead and do that we'll add a
46:05 - new reference we'll select our data
46:07 - project and select ok
46:10 - and now we can go ahead and import that
46:11 - namespace
46:14 - so let's go ahead and decide what
46:16 - methods we would like to
46:18 - define on this image
46:21 - interface
46:23 - so we have a relatively simple idea for
46:25 - this application so i don't want to over
46:27 - complicate things we'll just have a few
46:29 - different methods
46:30 - in this service that we could actually
46:32 - implement later on in our controller so
46:35 - maybe we'll provide the ability for
46:37 - whatever implements this interface
46:39 - to return a collection of our images
46:46 - and for this we need to import the
46:47 - correct name space for this as well
46:50 - and we can just have a method that gets
46:52 - all of the images
46:56 - we'll have a method that returns a
46:58 - particular image by its id
47:05 - and then maybe we'll also have the
47:07 - ability to return a collection of images
47:13 - by a particular query that corresponds
47:16 - to some tags that might be on that image
47:37 - and so we'll have a method that we can
47:40 - pass a string
47:42 - that will then return a collection of
47:44 - gallery images that contain a tag
47:47 - whose description corresponds with the
47:48 - tag that we pass
47:50 - this get with tag method
47:54 - and this will be enough to start with we
47:55 - could definitely
47:57 - either refactor or create new methods or
48:00 - change
48:01 - the overload for this method as we
48:04 - develop the application but this should
48:05 - be enough to get us started
48:07 - so if we go down to our image service we
48:09 - can then
48:10 - control period to implement that
48:11 - interface that we just created
48:14 - and if you're using resharper you'll see
48:15 - some options here otherwise it should
48:17 - just
48:19 - go ahead and populate
48:21 - the methods that are required to
48:22 - implement this interface
48:24 - and so what we're going to do now is
48:27 - create a constructor for our service
48:33 - and we'll provide it with
48:35 - our db contacts
48:42 - and then we'll create a field here
48:43 - private read-only field
48:50 - and then in the constructor we'll just
48:51 - go ahead and set it
48:56 - and so we can do now is in our get all
48:59 - method we have a reference to this db
49:01 - context and so we can simply return ctx
49:05 - dot gallery images and we can call
49:08 - include here
49:10 - bringing in entity framework core
49:14 - and just go ahead and conclude and
49:16 - include the
49:18 - image tags along with our query
49:21 - so now anytime we invoke this method to
49:24 - get all the gallery images from our
49:26 - database we will also have their tags
49:29 - with them so that's good
49:32 - let's go ahead and fill out this get by
49:34 - id method next in fact i'd like to go
49:36 - ahead and just move this perhaps
49:39 - just below get all and here we can
49:41 - return
49:42 - ctx.gallery images
49:48 - and we want to pass it in id so we need
49:50 - to pass an id to our get by id
49:52 - method so we need to head back into our
49:55 - interface and actually pass that in to
49:58 - the method here
50:01 - okay so we can go back now to
50:04 - our service
50:07 - and so this will return
50:09 - the instance of the gallery image that
50:11 - corresponds to the id that we pass our
50:13 - get by id method and then finally in our
50:16 - get with tag method
50:18 - we can simply call get all
50:22 - dot where
50:24 - the image pitch.tags
50:28 - dot any
50:29 - tag
50:30 - tag.description
50:35 - is equal to
50:36 - the tag description that will pass this
50:38 - method
50:42 - and in fact we should not name this
50:44 - tag since we're actually using that
50:46 - here as well as the parameter that we
50:48 - pass this method
50:50 - and of course we need to go ahead and
50:51 - return this
50:54 - also
50:55 - and just clean it up a bit here
50:58 - okay so here we should get all of the
51:00 - images
51:01 - where the tags on that image
51:04 - contain
51:06 - a description that matches this string
51:08 - that we pass our get with tag method so
51:11 - we'll be using this
51:13 - shortly in the future when we actually
51:15 - build out
51:16 - our our search box that we can use to
51:18 - query
51:19 - our own images with
51:21 - for now let's go ahead and implement
51:23 - this get all
51:24 - in order to actually
51:27 - get all of the images that might be in
51:29 - our database and display them in our
51:31 - gallery view so head back up into our
51:33 - web project and then in our gallery
51:35 - controller what i'm going to do is we
51:37 - can go ahead and remove some of this
51:40 - sample data that we created
51:43 - so i'll minimize image list
51:45 - collapse it and
51:47 - go ahead and just delete it likewise
51:50 - with our tags
51:59 - so we'll create a new image list
52:02 - and what we're going to want to do is
52:03 - invoke an instance of this
52:06 - image service that we just created
52:11 - the get all method on that instance
52:14 - and so what we need to do is actually
52:16 - we're going to be using dependency
52:18 - injection to inject the service into
52:21 - our controller so what we'll do
52:23 - just the top of our controller class is
52:26 - have a private read-only
52:30 - i image i'll call it image service
52:37 - and then we'll create a constructor for
52:39 - this class
52:42 - which will actually
52:46 - have an eye image on it so we'll call it
52:48 - our image service
52:50 - and then we can set the field
52:56 - so the controller doesn't really care
52:58 - about our service class per se
53:01 - the controller only cares that it
53:03 - receives some class that implements
53:06 - the interface that we defined with these
53:08 - methods of course our service implements
53:11 - this interface and so now we just need
53:14 - to tell the application
53:16 - what to actually pass its controllers
53:19 - when it asks for a specific
53:22 - you know purpose in this case our image
53:24 - interface so we can actually do that in
53:27 - our web project in the startup.cs file
53:30 - so if you recall down in our configure
53:32 - services method
53:34 - we can now add a scoped service to
53:37 - this method so we can say is
53:39 - services.add scoped
53:41 - to our image service class
53:45 - and for this of course now we're going
53:47 - to need to
53:48 - provide a reference in our web project
53:51 - to our
53:52 - service layer so let's go ahead and
53:53 - right click on the project
53:55 - and we'll add a reference
53:58 - to our services layer
54:01 - and now i should be able to control
54:03 - period here and go ahead and import the
54:05 - missing reference
54:07 - okay awesome so now this is kind of nice
54:10 - again leveraging dependency injection
54:12 - here our gallery controller once again
54:15 - is completely decoupled from our
54:17 - database
54:19 - it just says hey i need some methods
54:22 - that do the following i expect to be
54:24 - able to get all the images
54:26 - get with a particular tag and get with
54:28 - you know get by id
54:29 - i don't care what class is implementing
54:32 - it
54:33 - and our startup here when we configure
54:36 - services we say well we're using our
54:38 - image service
54:40 - to actually implement
54:42 - this interface and so anytime a
54:44 - controller or any other class here is
54:46 - asking
54:47 - for an implementation
54:50 - of our image service it's going to get
54:52 - mapped to the concrete image service
54:54 - class that we just created okay so
54:58 - now down in our index action here i need
55:01 - to correct some spelling here so now
55:03 - we're actually invoking that image
55:05 - service and we're going to call get all
55:07 - and use that to actually set the value
55:10 - of this images property that's on our
55:12 - view model
55:13 - so our view model here has this images
55:15 - property and it just takes this
55:17 - collection of gallery image which is an
55:19 - entity model that can get returned from
55:21 - our database
55:22 - and it's going to use that
55:25 - again to set this image's property so
55:27 - that we can use the same view that we
55:29 - just constructed
55:31 - this time instead of having those mock
55:33 - objects
55:34 - we'll actually be using whatever records
55:37 - are in our database which is of course
55:39 - currently nothing we just have an empty
55:41 - database with our schema
55:43 - so i'll go ahead and make a commit here
55:45 - you can see what we did with git status
55:48 - and we'll go ahead and get add
55:51 - everything and git commit
55:55 - create service layer implement
55:58 - image service in
56:00 - controller
56:02 - so back in our gallery controller
56:05 - this should work but we should
56:07 - essentially return a page with some
56:09 - empty results so let's go ahead and just
56:11 - fire up the server and confirm that's
56:13 - the case
56:17 - and we'll just visit
56:18 - gallery
56:20 - and so yeah you can see we just have an
56:22 - empty page because we don't actually
56:24 - have any records
56:25 - in our database
56:27 - so let's fix that we'll work locally
56:30 - first before we eventually wire things
56:32 - up with azure blob storage
56:34 - what i'm going to do is i'm going to
56:35 - revisit pixels
56:40 - and we'll search for some people
56:42 - skateboarding
56:44 - and so let's just go ahead and download
56:46 - a small version of this image
56:51 - and we'll go back
56:53 - and we'll download a small version of
56:55 - this image
56:57 - and perhaps one more here we'll download
56:59 - a small version of this image and then
57:01 - what i'll do is i'll search for images
57:03 - of boats oops i search for bore which is
57:06 - not a boat
57:07 - you could use poor images as well if you
57:09 - like
57:10 - we'll go ahead and download this picture
57:13 - and we'll do one more for our demo we'll
57:15 - go ahead and grab this one
57:17 - it looks like a pretty cool boat
57:20 - all right so we've got five images
57:22 - downloaded
57:23 - and now what we're going to do is we're
57:24 - going to move those downloads into
57:27 - our static files here
57:29 - in the www root directory so under the
57:32 - images folder which should be created
57:34 - for you
57:35 - since we use the template i'm just going
57:37 - to delete these banners i can go ahead
57:39 - and just
57:40 - up stop the server first
57:42 - and then just go ahead and as i said
57:44 - delete these banners
57:45 - and then what i'm going to do is just
57:46 - navigate to my downloads where we just
57:49 - downloaded these images
57:51 - and we'll go ahead and grab the five
57:53 - that we just downloaded
57:57 - and i'm just going to drag those
57:59 - directly into this images directory
58:02 - and i'm going to go ahead and rename
58:04 - them as well so we have a couple
58:06 - boots and then the rest of them are of
58:10 - people skating so we'll have
58:12 - boat one and two and then skate one two
58:14 - and three okay so what i'm going to do
58:17 - just to create some mock data for us is
58:20 - to actually run a sql insert
58:24 - on our
58:26 - gallery image table so
58:29 - let's go ahead and do that we can just
58:31 - right click on the database and run a
58:33 - new query here
58:36 - and if we select star from
58:38 - gallery images now
58:40 - you can see that we have an empty table
58:42 - first of all also make sure that you are
58:45 - running it against the database simple
58:47 - image gallery or whatever you name the
58:48 - database for
58:50 - this particular series so what we're
58:52 - going to do is we're going to insert
58:54 - into gallery images created title and
58:57 - url
58:59 - and
59:00 - you can see that url is a keyword so i'm
59:01 - just going to wrap that
59:03 - for safety in square brackets here
59:06 - values and now we need to write an
59:08 - insert here for each of the five images
59:11 - that we just dropped in our static files
59:14 - directory
59:16 - so for created we can just say get date
59:19 - and then for title we'll have like my
59:21 - new boat
59:22 - and so you can see that it's going to be
59:25 - here under images
59:26 - slash boat1.jpg
59:29 - and so if we just provide the url as
59:32 - slash images
59:34 - but 1.j jpeg
59:36 - that should work
59:41 - and then we'll do the same for the other
59:44 - images here so we had five you can say
59:48 - out sailing this will be about two
59:51 - and then we'll say skate park
59:55 - skateboarding
59:57 - and whatever else skating so not being
59:59 - very creative here with the titles
60:02 - but just to show you how you could first
60:04 - run a manual insert
60:06 - to create some data to start working
60:08 - with just to verify the functionality of
60:11 - your
60:12 - service layer so we'll go ahead and run
60:14 - this insert
60:17 - and i'll say five rows affected so if we
60:19 - select from gallery images now we can
60:21 - see
60:22 - those five rows
60:24 - and so that's looking pretty good go
60:26 - ahead and minimize
60:27 - sql server
60:29 - and so now when get all gets called from
60:33 - our image service
60:34 - it's going to use the db contacts to
60:37 - actually query our database
60:39 - for all of our images we don't have any
60:42 - tags yet but that shouldn't matter at
60:44 - this point
60:45 - let's go ahead and just fire up the
60:47 - server
60:48 - and so we'll just go ahead and visit
60:50 - slash gallery
60:53 - and so you can see that indeed we are
60:54 - getting those images back from our
60:57 - database so these are getting served up
61:00 - directly from our static files directory
61:03 - so that's pretty cool um looks pretty
61:05 - good
61:06 - so i'm going to go ahead and fix up the
61:09 - the nav bar now so that we can just
61:11 - visit gallery by clicking on
61:14 - let's say like the sort of like the home
61:15 - link here
61:17 - so i'm going to go ahead and minimize
61:18 - this
61:19 - and stop the server
61:21 - you'll notice in the web project here in
61:24 - views we have a shared directory and
61:26 - then we have this layout
61:28 - folder or layout file here
61:31 - and it's got a bunch of stuff scaffolded
61:33 - out for us this actually represents the
61:36 - you know the entire wrapper for all the
61:38 - views in this simple application
61:40 - they get injected right here where we
61:42 - have this spiral render body method
61:44 - getting called so this is razor syntax
61:46 - once again
61:47 - to in a sense render any of the views in
61:50 - our application right here in this div
61:53 - you can also see some other things in
61:54 - this file we won't get into all the
61:56 - details for this simple series
61:59 - in our case all i'm going to do is just
62:01 - go ahead and
62:03 - for our purposes i'm just going to
62:05 - delete the div that contains the links
62:07 - at the top of the page and
62:09 - we'll call the gallery controller
62:12 - index action here you can see we're
62:14 - using asp tag helpers here which is
62:17 - really nice so we're constructing an
62:19 - anchor tag here a link
62:21 - with
62:22 - the asp controller set to gallery asp
62:24 - action set to index
62:27 - and i'm just using it you know sort of
62:29 - as a standard anchor tag with this kind
62:32 - of nice syntax so it's just a basic
62:35 - anchor tag here
62:37 - but razer will actually interpret it and
62:40 - essentially provide you with the route
62:42 - that corresponds to this controller and
62:44 - action combination so that's kind of
62:46 - nice
62:47 - and that's fine our app can still be
62:49 - called simple image gallery that's cool
62:53 - i'm going to go ahead and remove this
62:54 - button
62:56 - and the other thing that i'll do is
62:59 - in our startup class
63:02 - if we scroll down
63:04 - we can say that the we can see that
63:05 - we're setting the default controller to
63:07 - home let's set the default controller to
63:09 - the gallery index
63:11 - so this way when our application starts
63:14 - we will just immediately hit the gallery
63:16 - index let's go ahead and try this out
63:18 - now
63:20 - okay cool so you can see that
63:23 - you know even though we're in the root
63:25 - of our application it is serving up the
63:27 - gallery index
63:29 - action and if we click on simple image
63:31 - gallery this is where we get taken
63:33 - so we don't have any other views in the
63:34 - system right now
63:36 - we need to create two of them we need to
63:39 - create a detail view so that when we
63:40 - click on an image we actually visit a
63:42 - detail view of that image
63:44 - and we'll need to also create
63:47 - a form page so that we can actually
63:49 - upload new images from our computer to
63:52 - get displayed here so what i'd like to
63:54 - do is to go ahead and wrap these in
63:57 - links so that when we click on them we
63:59 - can then be taken over to a detail view
64:02 - where we can see a larger version of the
64:04 - image as well as its description and
64:06 - perhaps its tags as well so let's go
64:08 - ahead and do that
64:11 - so yeah so here's our layout
64:14 - and actually while we're here in this
64:16 - layout page that i have open so this is
64:18 - our
64:19 - our layout.cshtml file and if you need
64:22 - to find that again that is once again in
64:24 - our
64:25 - shared directory inside of our views in
64:27 - our web project here
64:29 - and while i have this open what i'm
64:30 - going to do is just go ahead and
64:31 - actually create a link here in the nav
64:34 - bar
64:34 - to an upload page which of course we
64:37 - haven't created yet but it will serve as
64:39 - kind of a placeholder for that
64:42 - and we might as well add it while we're
64:43 - here in the
64:45 - layout
64:46 - so directly after this div of class
64:49 - navbar header where we have the title of
64:51 - our application and go ahead and create
64:53 - another div
64:57 - and we're going to just give it a navvar
64:59 - collapse
65:01 - collapse
65:03 - and then we're going to create an
65:04 - unordered list here
65:06 - with just a single item for now but
65:09 - we'll go ahead and give ul a class of
65:12 - nav and then the snapbar
65:16 - nav class as well
65:19 - and then here we'll just have
65:22 - upload and then we're going to go ahead
65:23 - and wrap this in some tag helpers
65:27 - here so this will be the asp
65:30 - controller
65:34 - and if you recall the controllers that
65:36 - we currently have are just the gallery
65:37 - controller and the home controller
65:39 - so what i'm going to go ahead and do is
65:41 - create an image controller
65:43 - that will then have an upload action so
65:45 - we'll say asp
65:47 - action is equal to upload
65:52 - and yeah we just need upload to be
65:53 - inside of this anchor tag
65:58 - and the list element should wrap the
66:00 - anchor tag
66:02 - since there's only one of them here i'm
66:04 - just going to go ahead and
66:05 - put this out a separate line
66:08 - if we take a look at the page
66:11 - and refresh it
66:12 - we should now see this upload link
66:15 - which currently leads nowhere because we
66:18 - don't have an image controller or an
66:19 - upload action
66:20 - okay so now let's get back to the task
66:22 - of creating links
66:24 - around each of the images that appear in
66:26 - our gallery and then having those take
66:28 - us over to a detailed view so for that
66:30 - we need to go into our views and then
66:33 - the gallery our index view here
66:36 - and you can see that we have this for
66:37 - each we're iterating over the collection
66:40 - of images that's on our view model and
66:42 - we're currently just putting out this
66:44 - div of class gallery image container and
66:46 - then we have a container for the image
66:48 - itself where we're setting the
66:49 - background image url equal to the url
66:51 - property that's on any particular image
66:54 - and so
66:55 - quite simply here i can just create
66:57 - another tag helper
67:01 - and we're going to use the gallery
67:03 - controller in this case we could use the
67:04 - image controller as well and have like
67:07 - an image slash detail action i don't
67:10 - mind putting this in the gallery
67:11 - controller we have a pretty minimal
67:12 - application as it is
67:14 - so then we'll say asp action
67:17 - is equal to detail
67:19 - and then we are going to need to
67:22 - tell the controller action which image
67:25 - in our collection to
67:27 - display
67:28 - on the detail page so what we can do is
67:30 - just go ahead and say asp route id is
67:33 - equal to at image dot
67:36 - id
67:37 - okay so if we just save that and then if
67:39 - i go refresh the page here you can see
67:42 - now that these are clickable elements
67:45 - and if you take a look down and at the
67:48 - bottom of your browser where these are
67:50 - leading you can now see that they will
67:52 - be
67:54 - corresponding to the id that's on each
67:55 - of these images
67:57 - so if i click it you know we're
67:58 - currently getting taken nowhere because
68:00 - we need to go ahead and create this
68:02 - action now so i'm going to go back and
68:04 - i'll minimize the browser and now i'm
68:07 - just going to go ahead and stop the
68:08 - server
68:09 - and i'm going to make a quick commit
68:12 - bring this over and now i'll mention
68:13 - this also in the comments below
68:15 - but between the third video in this
68:17 - video
68:18 - i had done a recording and then i lost
68:21 - some of the video files and so i had to
68:24 - kind of work backwards and so i'm on a
68:26 - separate branch here
68:27 - because i had been a little bit further
68:29 - along in the code so that's why this is
68:32 - on a different branch here and why you
68:33 - don't see master
68:35 - any case just a minor note in case
68:36 - you're wondering
68:38 - so we can go ahead and say that we added
68:40 - these and we can commit
68:43 - add upload link to navbar
68:48 - links around
68:50 - gallery images
68:52 - and we'll just go ahead and push those
68:55 - okay
68:56 - so now let's go into our gallery
68:59 - controller and as you recall we have
69:02 - this image service that we have injected
69:04 - into our controller this allows us to
69:06 - grab the images
69:08 - we can also use it to
69:10 - grab an instance of an image in a
69:12 - particular image by its id
69:14 - which is exactly what we'll do for our
69:16 - detail view so currently we have this
69:18 - index action let's go ahead and create
69:21 - an action action result
69:24 - detail
69:26 - and we'll have an int id
69:30 - which will be the id that corresponds to
69:32 - the the image that we want to visit and
69:35 - so we'll go ahead and store
69:38 - a reference to that image in a variable
69:41 - here so we'll just call it the image
69:44 - and we can invoke
69:45 - our image service
69:47 - to get by id
69:49 - the id that we pass
69:52 - this detail method
69:56 - and so you can see that this is going to
69:58 - pull back
70:00 - an instance of one of our gallery image
70:02 - objects
70:04 - and we're just going to push that into
70:06 - viewmodel
70:08 - we could pass the
70:09 - entity object itself
70:12 - sort of you know as a domain model to
70:14 - this page but i like to make
70:16 - view models for each of my pages so
70:19 - we'll say that the model is equal to a
70:22 - new
70:23 - gallery detail model
70:28 - and let's go ahead and actually create
70:29 - this model
70:31 - so
70:32 - this again is a view model and it's
70:34 - going to be here in our web project in
70:35 - the models namespace and our models
70:38 - folder here so i'm going to right click
70:40 - and just simply add a new class
70:45 - gallery detail model
70:49 - and
70:50 - what we'll do is this is essentially for
70:53 - now
70:55 - just for this simple app here it's
70:57 - really going to map one to one to our
70:59 - domain model
71:05 - so we'll have an id property that we
71:07 - need
71:14 - and something that someone has mentioned
71:15 - in the comments recently which is um
71:19 - you know kind of nice if
71:21 - if you prefer to use it it's a little
71:22 - shortcut here where you can type prop
71:25 - and it's a code snippet i'm in visual
71:28 - studio if you're coding in visual studio
71:30 - then if i hit tab twice here then this
71:33 - kind of scaffolds out
71:35 - a simple property for us here
71:38 - i'm using vim and so
71:40 - it's
71:41 - just about as fast or at least as
71:43 - comfortable for me to just type it or to
71:46 - copy and paste a bunch of properties at
71:48 - once too so
71:49 - you know whatever suits your personal
71:51 - preference but just to know i'm just a
71:54 - little code snippet that you may want to
71:55 - be aware of particularly if you are
71:57 - building
71:58 - larger pogo classes out
72:00 - so we'll go ahead and create the
72:04 - title property for our image
72:09 - and we can also create like a list of
72:11 - strings
72:13 - for the image tags
72:15 - and for that we need to go ahead and
72:17 - bring in collections
72:18 - all right so
72:20 - if we just recall the actual
72:23 - image model in our data project here
72:26 - where we actually specify the entity
72:27 - model gallery image we also have a
72:30 - created on we have this uh you know
72:32 - enumerable collection of image tags in
72:36 - our case
72:37 - if we have f12 here we can see that a
72:39 - tag is just an id and a description for
72:41 - our view model the tags for
72:43 - you know as far as the viewer is
72:45 - concerned
72:46 - are just strings and so we're just going
72:49 - to simplify that in our view model
72:52 - when when the user clicks on the clicks
72:54 - on the image detail view they can just
72:56 - see a list of strings
72:58 - regarding the image tags
73:00 - okay and the url here is the url
73:03 - which represents the path on disk
73:05 - whether locally or remotely to the image
73:08 - itself so let's go back to our view
73:11 - model that we were just working on and i
73:13 - think i will also here include
73:19 - the date time for the created
73:25 - and of course the url
73:27 - so this maps as i said almost one to one
73:29 - to our entity model i just prefer to
73:32 - keep it separate just because we're
73:34 - using view models in other places in the
73:36 - application and i just tend to like to
73:39 - keep my entity model separate and use
73:41 - them strictly for the purpose of
73:44 - designing the overall architecture for
73:46 - the application and then things like our
73:49 - view models basically consume some of
73:51 - their properties and then can maybe be
73:54 - any number of different combination of
73:55 - of properties on any number of those
73:57 - models but if you're building something
73:59 - extremely simple which in fact we are
74:02 - then you may even just consider using
74:04 - the entity models here in the views okay
74:05 - so let's head back into our gallery
74:07 - controller and so now let's populate our
74:10 - model so
74:12 - the id will clearly be the image id
74:16 - the title will be the image
74:19 - title
74:21 - created on likewise
74:24 - actually i caught it created in the
74:25 - entity model that's fine url is equal to
74:28 - image.url
74:31 - and then for our tags so what we have
74:34 - here
74:35 - on our viewmodel again is a collection
74:37 - of strings or more specifically a list
74:39 - of strings but the tags that are on our
74:41 - image
74:43 - object
74:44 - are actually
74:46 - a collection of our
74:48 - tag model so this image tag entitymodel
74:52 - and so what we can do is just simply
74:55 - call like select here
75:00 - and we'll say like t dot
75:03 - description
75:05 - not to list
75:08 - and so we could put this in a separate
75:11 - method if we want to kind of clean up
75:14 - the construction of this view model
75:17 - but it's pretty simple
75:19 - so we're just basically getting all the
75:20 - descriptions for each of the images that
75:23 - are in this tags collection and then
75:25 - dumping them into a list and then
75:27 - setting
75:28 - the tags property on our detail model to
75:32 - that list
75:33 - so
75:34 - it's pretty straightforward so we can
75:36 - just go ahead and return the model
75:40 - to our view
75:41 - and just fix my typo here
75:45 - so this is an extremely simple action
75:47 - result basically just getting an image
75:49 - by id
75:50 - from our database by means of our image
75:53 - service that we've injected into this
75:54 - controller
75:56 - and then mapping all the properties that
75:58 - we get back from that image from our
76:00 - database
76:01 - onto properties that we define in this
76:03 - specific view model
76:07 - so now what we need to do is to go ahead
76:08 - and create a corresponding view for this
76:10 - so in our views folder here
76:14 - under gallery we're going to go ahead
76:16 - and create a new view
76:18 - and i like to do this
76:19 - manually so we'll just do mvc view page
76:21 - here
76:22 - and this we have to call it detail
76:28 - and i'm just going to go ahead and clean
76:29 - this up
76:33 - and we'll define our model
76:39 - as our gallery detail model that we just
76:41 - created
76:43 - and remember that our views get rendered
76:45 - inside of our layout so if we revisit
76:47 - our layout here and we see
76:49 - this render body method this razor
76:52 - method that's getting called here inside
76:54 - of this container body content
76:56 - so anything um just as a reminder here
76:58 - anything that we're creating in our
76:59 - detail view here is already getting
77:01 - rendered
77:02 - in our view directly here okay so back
77:05 - in our detail view
77:08 - what i'm going to do is go ahead and
77:10 - create a div
77:12 - of class container
77:14 - body content again this could could and
77:16 - may very well already be on the outside
77:18 - of of our view but
77:20 - um just because i recall using it here
77:22 - on the index page will just be
77:24 - consistent
77:27 - i'm gonna go ahead and create a row
77:32 - and now we just need to display our
77:35 - image
77:36 - you know a large version of this image
77:38 - on the page
77:40 - so i'm going to create a css class here
77:43 - called image detail container
77:46 - which we have yet to define but we will
77:49 - and then we have a div of class image
77:52 - detail
77:55 - and here's where we'll actually put an
77:57 - image tag
77:59 - so the image tag will be
78:01 - the url on the model
78:04 - and then we can also specify
78:06 - alternate text here with alt model.title
78:10 - and so that way when the user hovers
78:13 - the mouse over the image they get this
78:15 - alternate text which will correspond to
78:17 - the title
78:19 - okay and then i'll create another row
78:21 - here div class row
78:24 - and we'll have a span where we can say
78:26 - title
78:31 - model.title again
78:33 - and then below it here we'll have a
78:35 - second span where we can say uploaded
78:38 - and here we'll have our model not
78:40 - created on
78:41 - okay and i'm just going to have a final
78:43 - row here
78:47 - and here i'm just going to provide a
78:48 - link back to the gallery
78:52 - so we'll style it as a button and we can
78:54 - use bootstrap's button primary
78:58 - asp controller is equal to gallery
79:02 - asp action is equal to index
79:08 - and we can just say back to gallery
79:13 - okay and i'll create custom css class
79:15 - here
79:16 - call
79:17 - let's see just controls maybe
79:20 - and then here we'll have one called
79:23 - um image metadata or something maybe
79:25 - image detail
79:27 - meta
79:31 - okay so with that let's just go ahead
79:33 - and fire up the server and check it out
79:37 - all right
79:38 - so if we click on an image
79:41 - looks like we are hitting something in
79:43 - our code here
79:45 - and we're getting a null reference
79:46 - exception here let's see where we're
79:48 - getting that
79:49 - so image.tags is null
79:52 - our url is populated created title and
79:56 - id are all populated but our image tags
79:59 - are null so let's go ahead and fix that
80:01 - so what we need to do first of all we
80:03 - need to stop the server but then we need
80:04 - to head into our image service
80:07 - and before we do that i'm also going to
80:08 - clean up these usings
80:10 - okay so now we need to head into our
80:12 - image service
80:13 - which is
80:15 - which implements this interface but if
80:17 - you just f12 here you'll just be taken
80:19 - to
80:20 - the interface that our service
80:22 - implements so we need to head into our
80:24 - service project and then click
80:26 - image service here
80:29 - okay so what i need to do is to actually
80:31 - call include here when we find this
80:34 - image so what's happening is
80:36 - that this image is getting found but its
80:39 - navigation property
80:40 - tags is not actually getting populated
80:44 - and so we need to explicitly include
80:46 - those tags here in our query
80:49 - so rather than find by id
80:52 - what i'm simply going to do here is
80:54 - actually return get all
80:56 - and then i'll say
80:58 - where the image
81:00 - imaged it dot id is equal to this id
81:04 - and then we can call first
81:07 - and so what this is doing is it's just
81:09 - reusing this get all method here that we
81:11 - have already where we already have this
81:13 - include called otherwise we'll just be
81:14 - repeating some code here
81:16 - where the image id is equal to the id
81:19 - that we passed the get id method and
81:21 - then just grabbing the first
81:23 - from that collection so even though
81:26 - there's only one id in our database
81:29 - which corresponds to the id that we
81:31 - would pass here because it's a primary
81:33 - key
81:34 - where is always going to return a
81:36 - collection of objects and so since we
81:39 - need this method to return
81:41 - an instance of a gallery image and not a
81:43 - collection of it we just call first and
81:45 - grab the only element in that collection
81:48 - okay so
81:50 - let's go ahead and start the server
81:51 - again
81:53 - all right so we'll click on an image
81:56 - and so yeah this is looking a little bit
81:58 - better already so i'll leave it to you
82:00 - if you'd like to do some additional
82:01 - styling on this page
82:03 - but for now we can confirm that
82:05 - functionally it does appear to be
82:07 - working
82:08 - okay and i had to reload some styles
82:10 - here so sorry about that okay and i'm
82:13 - sorry about that i just had to reload
82:15 - some of my css styles here
82:17 - so if you've been following along since
82:19 - the beginning of this series then your
82:21 - image calories should be styled like
82:22 - this as well with each of these images
82:25 - inside a
82:27 - container if you will with this drop
82:29 - shadow
82:30 - so likewise the style on your gallery
82:33 - detail page may look something more like
82:35 - this as i said you may want to add some
82:38 - additional styles here just to clean
82:39 - things up so what i'd like to do now is
82:41 - to go ahead and create an upload form so
82:44 - that we can actually upload images and
82:46 - then store them remotely on azure
82:48 - so the first thing that we need to do is
82:50 - to just go ahead and well first of all
82:52 - stop the server here if it's running and
82:54 - we're going to create a new controller
82:57 - but first i'm going to go ahead and make
82:59 - a commit here
83:05 - and normally i don't like to store
83:07 - images in source control
83:09 - but just for the purposes of this video
83:11 - i'll leave them here
83:14 - so we added the gallery detail model
83:18 - and the detail view
83:21 - and we also included tags and
83:24 - get by id
83:26 - that's in our image service
83:31 - okay so with that taken care of we can
83:34 - just go ahead and head back into the
83:37 - code here i'm just going to close a
83:38 - bunch of these
83:40 - open windows here so we're just going to
83:41 - close all documents
83:43 - and minimize some of this as well
83:46 - in fact if you just click this collapse
83:47 - all button that makes it a lot easier
83:49 - and now we'll head into our controllers
83:52 - and what i'm going to do is create a new
83:55 - image controller here so we're going to
83:57 - add a
83:58 - controller
83:59 - and we'll make it an empty mvc
84:01 - controller
84:03 - called image controller
84:05 - so control parade to remove some of
84:07 - these usings
84:08 - and then if you recall actually in our
84:10 - layout so here in the shared directory
84:13 - in our views
84:14 - i created a link to our upload view here
84:18 - and i specified that it would be in the
84:20 - uh image controller and then the upload
84:23 - action so let's just go ahead and create
84:24 - an upload action here
84:30 - and we'll create a new view model
84:40 - and then we know we're going to return
84:42 - this
84:43 - model ultimately to the view
84:45 - so let's go ahead and create our view
84:47 - model
84:49 - and we'll add it to our model's
84:50 - namespace and we're just going to call
84:52 - it
84:53 - as we did here
84:55 - upload image model
84:59 - and it's going to be a pretty small
85:01 - model we'll have a string
85:06 - for the images title
85:08 - and just call it title
85:10 - and then we'll have some tags
85:12 - which we'll represent as a string here
85:14 - and what we'll do is we'll have a user
85:16 - who'd like to upload an image specify
85:19 - some tags like comma separated
85:22 - in a form text field and then we'll have
85:25 - some logic in our controller or in a
85:28 - service layer somewhere where we'll
85:29 - actually parse out each of the tags that
85:32 - are separated by commas and then we can
85:34 - apply those the new image object that we
85:37 - create
85:38 - and then the next thing that we'll have
85:39 - here is an iform file
85:42 - image upload
85:44 - and this is going to be a really useful
85:46 - type it's going to come from microsoft
85:48 - asp
85:50 - net core http
85:53 - and so we can bring that in
85:56 - and then back in our image controller we
85:58 - don't actually need
86:00 - um to
86:01 - set anything on this upload image model
86:04 - so we're going to be presenting the user
86:06 - with an empty form
86:08 - and then it will be actually up to the
86:10 - user to fill that form out
86:13 - and then actually post it back to
86:16 - another action result that we can we
86:18 - could place our controller here which is
86:20 - going to handle all of the assigning of
86:23 - the properties that the user provides to
86:25 - the new object that will get created
86:30 - and so for that we'll need to create a
86:31 - post method http post so we can use this
86:35 - attribute here
86:39 - and we'll call this upload new image
86:45 - and for now we can just return okay
86:48 - we are going to actually put all the
86:50 - logic of handling what happens after the
86:52 - user posts
86:54 - an image here in this http post method
86:57 - what i'd like to do very quickly is to
86:58 - now just go ahead and create the view
87:00 - that we can hit that will contain our
87:02 - form where we can upload an image
87:06 - so here in views i'm going to create a
87:08 - new folder actually
87:11 - called image
87:13 - and then inside image here we'll go
87:15 - ahead and create our view
87:17 - and this
87:18 - we'll call upload so that it matches our
87:21 - upload
87:22 - action result
87:24 - okay
87:25 - so here we'll specify the model
87:33 - again this will be our upload image
87:34 - model
87:45 - and again we'll keep it quite simple
87:47 - like our other views in this app so
87:48 - we'll have a row
87:50 - and we'll call this an upload container
87:53 - that'll be a custom css class we can use
87:56 - and then we'll have a div
87:58 - of class form actually i'm just going to
88:01 - call this upload form
88:05 - and we'll apply our drop shadow
88:15 - and now we'll actually place our form
88:17 - element here
88:18 - so what we can do is we can actually
88:19 - specify tag helpers here as well so we
88:22 - can have an asp action
88:24 - is equal to upload new
88:27 - and then we need to specify a method of
88:30 - post so that it can submit this form as
88:33 - a post request
88:36 - and just double check on the image
88:37 - controller yeah we call this action
88:40 - upload new image and we supply the http
88:43 - post attribute here
88:46 - the next thing that i need to do is
88:47 - specify this encoding type here or ink
88:50 - type
88:51 - and here we need to
88:53 - declare it as multi-part form data so
88:56 - the end type attribute here just
88:58 - specifies the
88:59 - content type that's used to submit the
89:01 - form
89:02 - and
89:03 - so like the value of our method is post
89:06 - and so now we can provide a specific
89:08 - type
89:09 - and so multi-part form data is what you
89:11 - would use whenever you want to submit
89:14 - something like a file up through a form
89:17 - from the client side so that's why we'll
89:18 - be using multiport multi-part slash form
89:20 - data with our post request
89:22 - if you didn't have this here then the
89:24 - image wouldn't actually
89:26 - get sent with the request
89:28 - okay and finally i'm going to give this
89:30 - form an id as well
89:32 - and we'll just call it upload form
89:36 - okay i'm gonna go ahead and clean this
89:38 - up just a bit as well
89:41 - and here we'll have a div class form
89:43 - group
89:44 - oops farm group from bootstrap
89:51 - and let's create a label for
89:53 - so this would be label asp for
89:57 - title
89:58 - and so you pass asp4 here just one of
90:00 - the property
90:02 - one of the properties on your model
90:07 - and then we can provide our input and do
90:09 - the save
90:14 - and i'm going to give this a class form
90:16 - control here as well
90:20 - okay i'm going to create a second form
90:22 - group here so just copy and paste this
90:26 - and then what i can do instead of title
90:27 - here is just to leave both these
90:30 - and then we will create a label and
90:32 - input for our tags
90:40 - and then finally we need to be able to
90:42 - actually allow the user to upload an
90:44 - image so i'm going to create a third div
90:45 - here and we're going to specify a label
90:48 - with class
90:49 - button
90:51 - button default and button file which
90:54 - will be a custom css class
90:58 - and here we'll say
91:00 - like browse for
91:03 - image
91:06 - and then here we'll specify our input
91:08 - so we can say type is equal to file
91:13 - name is equal to file
91:16 - and then here's a little trick we can
91:18 - actually set this an inline style here
91:21 - of display none
91:28 - just because the default input for
91:31 - uploading files to a form doesn't really
91:33 - look that good and so instead we'll just
91:35 - kind of hide it and provide um this
91:38 - button to allow users to click and
91:40 - browse for the image okay and then
91:42 - finally here we'll have a div
91:44 - of class submit
91:49 - and we'll have a button of type submit
91:54 - id will be our upload button or button
91:57 - upload
91:59 - and the class will be a bootstrap button
92:01 - button info
92:06 - okay so let's take a look at what this
92:08 - looks like now so we'll fire up the
92:10 - server
92:14 - and if we click upload
92:16 - we can see our simple form here again we
92:19 - don't have any custom styling on it and
92:21 - i think in this case i might like to add
92:23 - just a little bit so let's go ahead and
92:24 - do that now so we need to head over into
92:28 - our css and one thing i'm going to do is
92:30 - i i created this um box shadow let's
92:33 - move uh this over here so we can kind of
92:36 - take a look at the code or the markup
92:38 - and the css at the same time so i
92:40 - specified this drop shadow
92:44 - css
92:46 - class here um and so what i'm going to
92:47 - do is take the
92:49 - box shadow out of our gallery image
92:52 - container
92:53 - create a new class called drop shadow
92:58 - and then and then just paste in the box
93:00 - shadow that i'd already specified here
93:02 - inside of this dedicated drop shadow
93:04 - property
93:06 - and then what i can do is i'll just view
93:07 - the solution explorer again and
93:10 - if we head back into our gallery index
93:14 - so if we go here to views and then our
93:16 - gallery index
93:18 - this div class gallery image container
93:20 - i'm also just now going to add
93:22 - our drop shadow class too
93:25 - because the drop shadow is something
93:26 - that i would probably like to use on
93:28 - more than one element throughout the
93:29 - application
93:31 - so we'll just have a dedicated css class
93:34 - for it here
93:35 - okay so we'll unpin our solution
93:38 - explorer again
93:39 - and the other thing that i'll do while
93:40 - we're in here editing css is first of
93:42 - all correct this typo
93:45 - but i'll also go ahead and add styles
93:47 - for the css classes that i declared on
93:50 - our image detail view as well
93:53 - so we'll have this image detail
93:55 - container
93:59 - just with some really simple stuff here
94:01 - so we'll just do text align left
94:05 - and then we had an image detail class
94:08 - where i'm just going to provide a little
94:10 - bit of padding
94:13 - and border radius
94:18 - and then we had this
94:20 - metadata row on our detail page which
94:23 - included
94:24 - the image
94:25 - title or description if you will and
94:27 - then the
94:28 - credit on date or uploaded
94:30 - date so we'll provide a bit of padding
94:33 - there as well
94:35 - okay so now on our upload page here
94:38 - let's kind of work i guess from bottom
94:39 - to top here so we have this
94:41 - submit button
94:43 - so
94:44 - we had a class submit
94:46 - and here i'm just going to provide a
94:48 - tiny bit of padding
94:51 - this button file
94:53 - i think i'll just provide a little bit
94:54 - of margin around it so we'll say margin
94:57 - of like
94:58 - 6 pixels then our upload form here or we
95:02 - can see that this is a form element and
95:04 - we had an id of upload form
95:07 - so we can say upload form
95:12 - provide some padding
95:15 - will provide auto margins
95:18 - and a width of 50
95:21 - so that's going to kind of keep things
95:22 - centered
95:24 - and then finally i had this all inside
95:26 - of this row of class upload container
95:32 - where i'll just provide
95:33 - another little bit of padding here
95:36 - so i realize that there's some duplicate
95:38 - css here
95:39 - i'm just going to leave this here that
95:41 - you can then
95:42 - go through and
95:44 - further customize to your liking
95:46 - so come here and just reload
95:50 - yeah and that's not
95:52 - it's not really necessarily beautiful or
95:53 - anything but it does start to slightly
95:56 - clean things up
95:57 - so you can see that we can provide a
95:59 - title like sample image
96:01 - let's say that we were going to upload
96:03 - images of like mountains
96:05 - so we might say like mountain
96:08 - camping hiking
96:09 - and then we could browse for the image
96:11 - um we could select one and then we could
96:14 - submit our form
96:16 - so we obviously don't have anything
96:17 - happening yet inside of our
96:19 - post method so let's go ahead and start
96:21 - to wire that up
96:23 - so i'll go ahead and close the css for
96:25 - now
96:26 - and we'll pin the solution explorer back
96:28 - so we'll head into our image controller
96:30 - and let's go ahead and just set a
96:31 - breakpoint here
96:33 - on our post method of upload new image
96:35 - all it's going to do is just return
96:38 - like a you know http 200 response back
96:42 - just just to say that everything is
96:44 - working
96:45 - but of course we don't have anything
96:47 - happening in this method nonetheless
96:49 - let's just set up a breakpoint here and
96:52 - what i'll do is just go ahead and submit
96:53 - the form
96:54 - and so you can see we hit a breakpoint
96:56 - here
96:58 - so the http post is indeed working if we
97:01 - just hit f5 to go through
97:04 - we obviously have an empty response here
97:08 - next we will actually complete this http
97:10 - post upload new image method
97:12 - and wire it up so that we can actually
97:15 - post the file contents from that form
97:18 - up to azure in order to store it in blob
97:21 - storage so i've got the server running
97:23 - here
97:24 - and we're just going to take a look at
97:25 - the page
97:27 - this was the upload page that we had
97:29 - worked on so we're going to be able to
97:31 - supply a title as well as perhaps some
97:34 - comma separated tags
97:35 - and then we can browse for an image on
97:37 - our computer and then submit it and what
97:40 - we'd like to do is to actually have this
97:42 - submit
97:43 - to file storage on azure so let's go
97:46 - ahead and take a look at how we can get
97:48 - all that set up
97:51 - so what i'm going to do now is head over
97:53 - to the azure portal as it looks today
97:57 - and
97:57 - i believe you can sign up for a
98:00 - free account and the free account will
98:02 - give you access to some services
98:05 - for a limited period of time or within a
98:08 - certain budget that microsoft will
98:10 - provide you if you're signing up for the
98:12 - first time
98:13 - so i've got an actual paid azure account
98:16 - here but like i said this should be free
98:18 - to get started if you don't yet have an
98:20 - account
98:21 - so go ahead and create an account if you
98:23 - don't have one yet
98:24 - and once you do head over to
98:26 - portal.azure.com
98:28 - get logged in and at the time of this
98:30 - recording the dashboard should look
98:32 - something like you see here
98:34 - and what we're going to do is go over to
98:36 - storage accounts
98:38 - and we're going to go ahead and create a
98:40 - new storage account so i'm just going to
98:41 - click add here
98:43 - and this is going to take you through
98:45 - a little wizard here where we can just
98:47 - supply some information about the
98:49 - storage account we'd like to create
98:51 - so i'm just going to go ahead and create
98:52 - mine here we're just going to call it
98:56 - dev image gallery we'll keep the
98:58 - deployment model as resource manager
99:01 - and the account kind as general purpose
99:04 - we're going to make the performance
99:05 - standard and for replication we're also
99:07 - just going to use the default read
99:09 - access geo-redundant storage
99:12 - we won't require secure transfer for
99:15 - this demo
99:16 - and
99:18 - i'm going to use the pay as you go
99:19 - subscription but like i said if you have
99:20 - a free account on then be sure to take
99:22 - advantage of that here you should see
99:25 - some option to use your free
99:26 - subscription go ahead and create a new
99:28 - resource group
99:30 - and i'll leave my location as central us
99:33 - so at the very bottom i'm also going to
99:35 - select pin to dashboard and then we'll
99:36 - go ahead and create it
99:38 - so this should just take a few seconds
99:41 - so once the form submits you should get
99:44 - this little animation here letting you
99:45 - know that the storage account is
99:47 - currently being deployed and this will
99:49 - take a few seconds to a minute or so to
99:52 - complete okay so once it's complete you
99:55 - should see an icon here on your
99:57 - dashboard if you didn't click pin to
99:59 - dashboard then you can also access it
100:01 - from the storage accounts link here and
100:03 - you should see it in the table so i'm
100:05 - just going to go ahead and click
100:06 - here and now you can see some
100:09 - information about your account the
100:11 - resource group the status and the
100:13 - location that sort of thing
100:16 - and so now we want to check out our
100:17 - access keys so go ahead and select
100:19 - access keys from settings and what we're
100:21 - after here is our connection string
100:25 - so we're just going to go ahead and grab
100:26 - the first connection string that we have
100:27 - here and we're going to copy it to the
100:29 - clipboard
100:31 - so you're going to want to make sure you
100:33 - keep these keys secure what i'm going to
100:36 - do is actually store these in user
100:39 - secrets
100:40 - so we're going to use this connection
100:42 - string to have our application connect
100:45 - to our new storage account but what we
100:47 - can do is actually use something called
100:49 - user secrets with asp.net in order to
100:53 - keep our connection string
100:54 - out of our code base so let's go ahead
100:57 - and take a look at how we'll do that so
100:58 - i'm going to leave this window open
101:00 - i'm just going to minimize it
101:03 - and what we're going to do first is
101:05 - actually just install the secret manager
101:07 - tool in our application
101:10 - so we're just going to right click on
101:11 - the web project here in this case simple
101:13 - image gallery and we're going to go
101:15 - ahead and edit the cs praj
101:18 - now among the item groups where we have
101:21 - cli tool references
101:23 - i'm just going to add another tool
101:24 - reference here
101:26 - so the string for our include will be
101:29 - microsoft.extensions
101:32 - secret manager
101:35 - dot tools
101:37 - and at the time of this video i'll be
101:39 - using version 2.0.0
101:41 - i'm just going to go ahead and save and
101:43 - then i'm going to go ahead and rebuild
101:44 - the solution
101:46 - i mean for that we should stop debugging
101:48 - of course and so the first thing that
101:50 - happens here is the nuget packages are
101:52 - getting restored including
101:55 - the new package that we've added here to
101:57 - our cs proj for managing user secrets
102:00 - so now we should be able to do is if we
102:02 - right click on the web project again we
102:05 - should have the option to manage user
102:07 - secrets so let me go ahead and select
102:09 - this and what we see here now is a
102:12 - secrets.json file that's currently empty
102:15 - well we have the opening and closing
102:16 - curly brackets but otherwise we don't
102:18 - have any key value pairs for our user
102:21 - secrets here
102:23 - so what i'm going to do is go ahead and
102:25 - add my connection string for
102:28 - my storage account here has a key value
102:31 - pair
102:32 - in this json file so i'm going to go
102:34 - ahead and just call this azure storage
102:38 - connection string
102:40 - and then here i'm going to go ahead and
102:42 - paste that connection string
102:46 - so be sure to generate your own and as i
102:48 - mentioned don't share it with anyone i'm
102:50 - going to go ahead and remove this
102:52 - connection string as soon as i'm done
102:54 - with this part of the video
102:56 - if we head back into the cs proj you'll
102:59 - also notice that what we've done has
103:01 - generated this user secrets id node
103:04 - and sort of auto generated
103:06 - something like a grid here
103:08 - but this could really be anything
103:11 - so the way this is working is that
103:13 - the
103:14 - secret manager tool is basically storing
103:16 - this json file not with our solution
103:19 - anywhere but actually on our system
103:23 - so on windows this is going to be
103:25 - somewhere in our app data folder
103:27 - and then in like the microsoft folder
103:29 - and then there's a folder called user
103:31 - secrets so it's not related to our
103:34 - solution the user secrets tool will
103:37 - handle all the implementation details
103:39 - regarding using the connection string
103:42 - that we specified here
103:44 - so as long as we have the key value pair
103:46 - stored here what i can do is basically
103:49 - reference the azure storage connection
103:51 - string
103:53 - key here whenever i'm looking for the
103:56 - connection string
103:57 - we're going to go ahead and close our
103:59 - secrets.json
104:01 - again the user secrets id here
104:03 - is actually just going to be the name of
104:05 - the folder in our app data directory
104:08 - where that user secret is stored on our
104:10 - system
104:11 - you could rename it here and have it be
104:13 - something completely different
104:16 - but i'm just going to leave it as it is
104:19 - and we'll go ahead and close rcs proj
104:22 - now if we head back into our image
104:24 - controller we're going to use our
104:26 - applications configuration to simply
104:29 - access our new user secret
104:32 - so what i'm going to do is create a
104:33 - private
104:34 - field at the top of our image controller
104:36 - class
104:39 - and it'll be of type i configuration
104:42 - and so for this we need to bring in
104:44 - microsoft extensions
104:46 - that configuration
104:48 - and i'm just going to call this field
104:50 - underscore config
104:52 - and i'm also going to create a field
104:56 - which is just a string called our
104:59 - azure connection string
105:01 - and this we just need to have
105:04 - an accessor for so we're just going to
105:06 - actually get this and now we'll go ahead
105:08 - and create our
105:10 - constructor so that we can use
105:12 - our leverage dependency injection to get
105:14 - the configuration for our application
105:29 - okay azure connection string is equal to
105:33 - underscore config and then we just need
105:35 - to pass it the string that we
105:37 - named the key
105:38 - in our
105:39 - secrets.json file which was just
105:42 - azure storage
105:44 - connection
105:46 - string
105:50 - okay so now we can just make use of that
105:53 - here in our
105:55 - image controller class
105:57 - so we're going to need to actually
105:58 - perform a series of steps here to
106:00 - actually
106:02 - get access to our dev image gallery
106:05 - if we head down where we see blob
106:08 - service here and we have this option to
106:10 - see various containers that we might
106:12 - create for our storage account we don't
106:14 - have any containers yet and you can see
106:17 - that it's going to say click
106:18 - plus container to get started here so
106:20 - let's go ahead and add one
106:22 - and we're going to call this images
106:25 - and for the public access level i'm just
106:27 - going to go ahead and set this to blob
106:29 - and we'll say okay
106:32 - so now we have this new
106:34 - images container on our storage account
106:37 - so let's go ahead and minimize here
106:39 - and let's start to write the various
106:42 - methods that we need to actually connect
106:44 - to that blob storage from our controller
106:47 - action
106:50 - so i'm going to store
106:52 - our container in a var here
106:54 - and i'm actually going to delegate this
106:56 - responsibility to our image service
107:00 - and we're going to have a method on it
107:02 - called get blob container
107:06 - which is going to take our connection
107:08 - string
107:10 - and the name of the
107:13 - storage container that we just created
107:15 - which was images
107:18 - so let's go ahead and use dependency
107:20 - injection to
107:23 - inject an instance of our image service
107:29 - so we'll go ahead and bring in the using
107:31 - for that from our services namespace
107:36 - create the private field here
107:46 - and we'll set it in our constructor
107:52 - okay so now we have access to
107:55 - a valid image service and so we just
107:58 - need to write this method get blob
107:59 - container so i'm going to go ahead and
108:00 - control period here to go ahead and just
108:03 - generate that method and we can f12 to
108:06 - go over to it
108:09 - so the way this is going to work is
108:11 - we're just going to go ahead and store a
108:13 - var for our storage account
108:21 - so we'll have this cloud storage account
108:23 - and we can go ahead and bring this in
108:26 - by adding a reference to microsoft dot
108:29 - windows azure dot storage
108:33 - and here we should be able to simply
108:35 - call.parse and pass it our connection
108:38 - string
108:41 - next we're going to store our blob
108:43 - client
108:45 - in a var
108:48 - so we'll use our storage account
108:51 - and we're just going to go ahead and
108:52 - create a cloud blob client
108:56 - now we need to return a reference to
108:59 - that container that we just created
109:03 - so we'll return blob client dot get
109:06 - container reference and we're going to
109:07 - pass the string v here which was just
109:10 - named automatically if we go back into
109:12 - our image controller here
109:15 - that string v actually corresponds to
109:17 - the name of the container that we'd like
109:20 - a reference to
109:21 - so what i'm going to do is head back
109:23 - here and we're going to call this
109:25 - container name
109:28 - and we're going to go ahead and use it
109:30 - to get our container reference
109:35 - and more specifically than just an
109:37 - object this will return a cloud blob
109:40 - container object
109:44 - so we for this we need to bring in
109:46 - windows azure.storage.blob
109:49 - and so all this method is doing is
109:51 - returning a reference the particular
109:53 - blob container that we're after or in
109:56 - order to get that container reference we
109:58 - need to have a valid storage account
110:01 - which
110:02 - we can access using our connection
110:04 - string
110:05 - and then we use this cloud blob client
110:08 - object in order to get a direct
110:10 - reference to the container
110:13 - of the name that we specified
110:15 - so let's go back into our image
110:17 - controller now
110:19 - now we're going to be uploading an image
110:21 - so the next thing that we want to do is
110:23 - to actually parse what's called the
110:24 - content disposition response header
110:28 - so let's store the content disposition
110:30 - in a var we'll just call this content
110:35 - and for this
110:37 - we can use content disposition header
110:39 - value
110:44 - and we'll need to go ahead and bring in
110:46 - http headers
110:49 - and here we can parse
110:52 - the file that we're uploading
110:55 - oops and of course upload new image
110:57 - needs to actually take that
110:59 - so as an argument so we're going to go
111:01 - ahead and use iform file for this
111:05 - and we need to bring in asp.net core
111:07 - http
111:09 - and now
111:10 - contentdispositionheadervalue.parse
111:13 - will take our files content disposition
111:18 - now from this we should be able to grab
111:20 - the file name that's being uploaded
111:30 - note that we have other properties that
111:32 - we can access here as well including
111:34 - just simply the name we have file name
111:36 - star we have the size and the read date
111:40 - a few other things here creation date
111:41 - that might be useful
111:43 - depending on the structure of your
111:44 - application in our case we're just going
111:46 - to go ahead and grab the file name
111:48 - and you'll notice that when it comes
111:50 - back it's going to come back with some
111:52 - quotes around it so we need to do is to
111:54 - actually trim
111:57 - those quotes
112:03 - so we've got our container
112:05 - we're grabbing the file name from the
112:07 - upload that's coming from our form
112:10 - now we need to do a few other things
112:12 - here first of all we need to get a
112:14 - reference
112:16 - to a black blob
112:25 - and we can grab that off of our
112:27 - container object
112:29 - so we'll just use the method get block
112:31 - blob reference
112:33 - go ahead and pass it our file name
112:37 - and then we can simply upload it
112:40 - so to do that we can call on our black
112:43 - blob upload from stream async
112:49 - and we're going to allow all this to
112:50 - happen asynchronously so we'll go ahead
112:53 - and await this
112:54 - we're going to make this instead of an i
112:56 - action result we're going to make it an
112:57 - async task
113:01 - action result type
113:05 - and we won't return ok
113:09 - and of course to use task we need to
113:11 - also bring in system.threading
113:20 - and upload from stream async is a method
113:23 - that we need to go ahead and pass
113:26 - our file and we can call open read
113:28 - stream on our file
113:30 - to pass it
113:32 - the stream that it requires
113:34 - to be uploaded
113:37 - and the other thing that i'm going to do
113:38 - here is also go ahead and use our image
113:41 - service
113:45 - to set our image
113:50 - and we're going to go ahead and pass it
113:53 - the title
113:54 - from our form
113:56 - the tags
113:57 - as well as the location
114:00 - that has been reserved for our image in
114:03 - blob storage and for that we can grab
114:07 - block blob dot uri
114:15 - and then finally we're going to return
114:16 - redirect to action
114:23 - index and then we'll just return back to
114:26 - our gallery
114:28 - so now we need to go ahead and write
114:30 - this set image method
114:32 - on our image service so let's head into
114:35 - our image service
114:39 - so let's go ahead and control period
114:41 - here to generate that method then we'll
114:44 - head into our image service and check it
114:46 - out
114:47 - so this is actually going to receive a
114:49 - string title
114:51 - and then a string tags that we'll need
114:54 - to basically parse based on like a comma
114:57 - delimiter and then the uri values if we
115:00 - go back
115:01 - in addition to the file in upload new
115:05 - image
115:06 - we're also passing in those tags and
115:09 - we're passing in the title
115:11 - of the gallery image
115:14 - okay so f12 to get back to set image and
115:18 - what we need this to do is to basically
115:19 - create a reference to that new image in
115:22 - our sql database
115:24 - so whereas previously if we select star
115:27 - from images
115:32 - oops sorry select star from gallery
115:34 - images
115:36 - you can see that the urls were all these
115:38 - relative paths some
115:40 - local image that we had in our www root
115:43 - folder
115:44 - we now need this url to point to
115:47 - the url where we now need this url to
115:51 - point to the location where the images
115:53 - are hosted in our azure blob storage
115:56 - database so let's go ahead and minimize
115:58 - this
116:00 - so what we're going to say is var image
116:03 - is equal to a new gallery image object
116:08 - where the title is simply the title
116:11 - string
116:13 - the tags we're going to create a new
116:14 - method for parse tags
116:18 - and we'll pass it the string tags the
116:20 - url will be
116:22 - the uri
116:24 - created will be just daytime.now
116:29 - just to keep things relatively simple
116:32 - and uri we actually need to go ahead and
116:34 - grab the
116:36 - absolute uri value
116:41 - okay so once we've built up this new
116:44 - gallery image object
116:46 - we can simply call
116:48 - our on our context and go ahead and add
116:51 - this object
116:58 - and then save changes
117:03 - and we'll save changes async here and go
117:06 - ahead and await it
117:11 - so we'll make our task async
117:17 - and now all we have left to do is to
117:19 - parse these tags that we pass as a
117:22 - string
117:23 - and we're going to pass this from the
117:24 - form as simply a comma separated
117:27 - list of image tags
117:31 - so we're going to create a public list
117:33 - of image tags
117:40 - and it's going to take as an argument
117:42 - obviously our string tags this should be
117:45 - pretty simple all that we need to do is
117:46 - to create a tag list and we'll basically
117:50 - say tags that split
117:52 - on
117:54 - the comma
117:55 - and we'll call that to list here
117:58 - and then what we can do is iterate over
118:00 - that list we can say for each
118:03 - of our tag in tag list
118:08 - we're going to add that to a list of
118:10 - image tag objects so let's new up an
118:13 - empty list of image tags
118:20 - and so what we can do is say image
118:23 - tags.add
118:26 - and we're going to add a new image tag
118:29 - where the description is simply the tag
118:34 - and now we can return
118:36 - our image tags list
118:39 - we can also refactor this into something
118:42 - a little bit simpler
118:44 - using link
118:46 - on our to list here we could select
118:49 - a new image tag
118:55 - for each of them
118:56 - where we just set the description equal
118:59 - to tag
119:02 - this should also work
119:04 - and that makes things a little bit
119:05 - simpler and now we can actually just
119:07 - return this
119:17 - and rather than two lists called here
119:20 - what i'll do is call two lists at the
119:22 - end here
119:23 - that should make it happy
119:27 - okay so pretty simple method to parse
119:29 - tags given a string of comma separated
119:32 - tags provided by our user
119:35 - and so that should take care of setting
119:37 - the image in our database
119:39 - we head back into our image controller
119:42 - we can kind of see how this is going to
119:43 - work our user will submit a form that
119:47 - passes up a file in the form of this
119:49 - iform file object the form is also going
119:51 - to contain fields for some tags and an
119:55 - image title and we're going to use our
119:57 - image service to get a reference to our
120:01 - images container
120:03 - using our azure connection string we
120:05 - need to go ahead and parse the content
120:08 - disposition of the file that we're
120:10 - passing up so that we can grab the file
120:12 - name we trim off some unnecessary
120:14 - quotations then we get a reference to a
120:17 - what's called a block blob here
120:19 - we get that reference by passing it the
120:22 - file name that we grabbed off of the
120:24 - file that's getting uploaded and then we
120:27 - call upload from stream async there to
120:30 - actually pass that file up to our azure
120:33 - storage we also take care of things in
120:36 - our own database here
120:38 - which simply creates a reference to that
120:40 - image using the uri that's coming back
120:43 - from azure as well as the title and the
120:46 - tags that the user has set using the
120:49 - form and we handle all that in our image
120:51 - service with the set image method that
120:53 - we were just looking at so finally we
120:55 - redirect to the index action on our
120:58 - gallery controller
120:59 - so the next thing i want to do is just
121:01 - go ahead and set a breakpoint here and
121:02 - we're going to start the application
121:06 - so i'm gonna head over to our upload
121:08 - form and we're gonna get an exception
121:10 - here that says invalid operation
121:12 - exception unable to resolve service for
121:15 - type
121:16 - simple image gallery services image
121:18 - service when attempting to activate our
121:22 - image controller
121:23 - so what's happening here is we need to
121:25 - make sure that we actually register our
121:27 - service
121:28 - in our startup class so let's go ahead
121:30 - and do that we'll head over to
121:32 - startup.cs
121:33 - if we scroll down to where we have
121:35 - configure services it looks like we are
121:38 - adding a scoped service of type image
121:40 - service and so yeah i actually wrote the
121:44 - constructor wrong in our image
121:46 - controller so we'll scroll up
121:49 - we need this to get past
121:52 - an eye image service so we're going to
121:53 - go ahead and stop this and so this takes
121:58 - the interface i image
122:01 - and so we'll go ahead and control period
122:02 - to bring in a reference to that
122:06 - interface
122:09 - and we'll do the same here for our
122:11 - fields that we can set the value
122:15 - and we'll do the same here for our field
122:17 - private field so that it can be set
122:19 - properly
122:23 - and so as you can see in our startup
122:25 - class when we're using dependency
122:27 - injection anytime our controllers are
122:29 - asking for
122:30 - something that implements the methods
122:32 - that are defined on this image interface
122:35 - it's going to inject a scoped image
122:37 - service
122:39 - and since we've configured our services
122:40 - this way we need to make sure that we
122:42 - are using the interface here in our
122:45 - constructor just like we used in our
122:49 - gallery controller as well if we head
122:51 - back there
122:53 - you can see that in the constructor for
122:55 - our gallery controller
122:57 - we are indeed also using the image
122:59 - interface here okay so let's go ahead
123:01 - and try to start the server up again and
123:04 - so now i can also remove the reference
123:06 - to simple image gallery.services
123:09 - and now that we're passing in an
123:12 - interface we need to go ahead and make
123:13 - sure that the
123:14 - methods that we created on the service
123:16 - are also defined on the interface we
123:18 - kind of did that backwards where i did
123:20 - it backwards
123:21 - so our image service has three new
123:23 - methods on it
123:28 - got this cloud blob container type
123:32 - kit blob container
123:35 - which takes a string
123:40 - connection string
123:43 - and for this we just need to make sure
123:45 - that we bring in once again microsoft
123:48 - windows azure storage.dll so we actually
123:50 - need to add a reference to that
123:53 - we've
123:54 - got we've got a task set image
123:59 - which takes a string title
124:01 - string tags and uri
124:05 - we need to go ahead and bring in our
124:07 - system namespace and we'll also bring in
124:09 - system.threading
124:11 - and then finally we also have a method
124:12 - that returns a list of image tags
124:17 - called parse tags which just takes in
124:19 - the string of tags
124:24 - okay with that
124:26 - we have now defined
124:28 - the new methods that we provided on our
124:31 - image service which implements this
124:32 - interface
124:34 - and so
124:34 - that should now be satisfied and i'm
124:37 - just going to go ahead and
124:39 - bring this back into a single pane
124:42 - and it's looking like it's saying that
124:44 - we're not implementing the interface
124:46 - member get blob container string oh i
124:49 - see we also need to modify i image to
124:53 - pass in our
124:56 - container name as well as a string
124:59 - okay so if we go back into our
125:02 - image service
125:04 - that's looking pretty good so we'll head
125:06 - into our image controller and we've got
125:08 - our break point set here on the post
125:10 - method so i'm just going to go ahead and
125:12 - start the server back up again
125:14 - okay so let's head over to our upload
125:16 - form
125:17 - and we're just going to call this test
125:18 - image and for tags we'll say hiking and
125:22 - adventure
125:25 - we'll go ahead and browse for an image
125:28 - select this one and we'll just go ahead
125:30 - and click submit
125:33 - so now you can see that we have a
125:34 - reference to our file as an iform file
125:38 - see that we have the file name and the
125:39 - content type
125:41 - as well as this content disposition
125:44 - we've got our tags being sent up here as
125:46 - this string and we have the title as
125:49 - well
125:50 - so let's hit f10 and we try to implement
125:53 - our image service to get a reference to
125:55 - the blob container
125:57 - so now we have this container object
126:00 - you can see the storage uri
126:03 - which contains the uri to our storage
126:06 - account that we'd set up
126:08 - i'm going to hit f10 here to get the
126:10 - content and then f10 again to get the
126:12 - file name
126:13 - so you can see the file name is hike.jpg
126:16 - now we're going to get a reference to a
126:18 - block blob
126:21 - and so we can see that object here and
126:23 - then we'll call upload from stream async
126:26 - here now we're going to use our image
126:28 - service to actually set that image in
126:30 - our database
126:33 - and then finally we'll redirect to the
126:35 - gallery so i'm just going to hit f5
126:39 - and now we're back in our gallery and
126:41 - indeed you can see the new image that we
126:43 - have here in our gallery is the one that
126:44 - we just uploaded
126:46 - so we can click on it we can see it full
126:48 - size
126:49 - we can go back to the gallery
126:52 - and note that if we inspect this
126:55 - we can see that the image source is now
126:58 - coming from
127:01 - devicegallery.blob.cor.windows.net which
127:03 - is indeed hosted
127:05 - on azure whereas these other images here
127:07 - are hosted locally
127:09 - so if we go into our database and we
127:11 - select star from gallery images again
127:14 - we can see that
127:16 - indeed the url
127:20 - for our test image here is pointing
127:23 - to our blob storage on azure so that's
127:26 - pretty cool we can also now select star
127:28 - from image tags
127:31 - and we can see that we have some new
127:33 - records for the tags that we parsed i
127:37 - can see that we have a slight bug in
127:39 - that we're including a space here so we
127:41 - also need to go ahead and trim out
127:42 - spaces when we parse tags
127:44 - so yeah that's looking pretty good note
127:46 - also something pretty important here is
127:49 - that we don't have
127:50 - the connection string that we used to
127:52 - connect to azure anywhere in source code
127:55 - so that's currently just stored
127:57 - locally on the development machine that
127:59 - we're working on
128:01 - and so we don't need to actually worry
128:02 - about having that checked into source
128:05 - control
128:06 - if you were deploying this to
128:08 - a server somewhere say
128:10 - a separate dev environment or like
128:12 - staging or production
128:14 - and you were running your app on one of
128:16 - those machines then you might have
128:19 - secrets stored specifically on those
128:21 - servers either as environment variables
128:24 - or through some other means but for
128:26 - development purposes this is really nice
128:28 - that we can actually use cloud storage
128:31 - and not share our connection string
128:33 - publicly so that's it for this video
128:35 - thanks for watching and i'll see you
128:36 - next time