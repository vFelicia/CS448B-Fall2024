00:00 - Master CSS by Building 24 projects
00:02 - throughout the 24 challenges treasure
00:04 - por will teach you how to recreate
00:06 - components and layouts from popular
00:08 - applications like GitHub codin and
00:11 - Instagram you'll also build loading
00:14 - animations progress bars flashcards and
00:17 - more using pure
00:23 - CSS hey there I'm treasure and in this
00:25 - course you'll find 25 fun and practical
00:28 - CSS challenges meant to help you develop
00:30 - and test your CSS prowess working
00:32 - through these challenges you'll be
00:33 - tasked to create a really fun variety of
00:35 - projects this includes many projects
00:37 - inspired by real world elements like
00:39 - this button inspired by code pen and
00:41 - this contributions graph inspired by
00:43 - GitHub you'll also create common web
00:45 - components like progress bars and
00:47 - loading animations as well as fun
00:49 - challenges meant to stretch your
00:51 - knowledge of flexbox in Grid like
00:53 - recreating playing cards and country
00:55 - flags using pure CSS remember all of
00:58 - these challenges are open so you're free
01:00 - to Google and research whatever you need
01:02 - to accomplish the challenge be sure that
01:04 - you're frequently referring back to the
01:06 - challenge examples so you know what
01:08 - you're trying to achieve and try to
01:09 - match the examples as closely as
01:11 - possible but remember that pixel
01:13 - Perfection is a stretch goal so if you
01:15 - want to really challenge yourself try to
01:16 - make it look exactly like the example
01:18 - but your overall goal is to get as close
01:21 - as possible finally if you run across a
01:23 - challenge that seems Advanced or you're
01:25 - unsure of how to begin try to break it
01:27 - down into smaller shapes or think about
01:29 - it in terms of rows and columns let me
01:32 - show you an example let's look at this
01:33 - empty progress bar if I were to try to
01:36 - figure out how to start making this I
01:38 - might say to myself well this could be a
01:40 - div of a certain height and width with
01:43 - the background color of gray and the div
01:46 - has rounded Corners so I'm breaking it
01:48 - into its smaller pieces based on what I
01:50 - can observe about what it's supposed to
01:52 - look like similarly one of your
01:54 - challenges will be to recreate this
01:56 - archery target so what can You observe
01:59 - about this you might think well it's
02:01 - three rings with a circle in the center
02:03 - but in terms of CSS it's actually a
02:05 - larger circle with a smaller circle on
02:08 - top with yet a smaller circle on top of
02:10 - that with the smallest Circle in the
02:12 - middle and you might also observe that
02:13 - each circle is perfectly vertically and
02:15 - horizontally aligned within its Outer
02:18 - Circle and one more example if I were to
02:20 - look at this playing card the first
02:22 - thing I might do is break it down into
02:25 - columns and rows so for example when I
02:28 - look at this card I see three three
02:30 - columns this is the First Column with
02:32 - the four and the heart this is the
02:34 - second column with these four hearts and
02:36 - this is the third column with the upside
02:38 - down heart and upside down four I might
02:41 - also look at this middle column and say
02:43 - well this is two rows this is the top
02:45 - row and this is the bottom row so make
02:47 - sure to ask yourself how you can split
02:49 - things into smaller shapes and into
02:51 - columns and rows and that should help
02:53 - you out a couple more things to remember
02:55 - my solution is always there to help if
02:57 - you get stuck I do provide most of the
02:59 - HTML for these challenges but feel free
03:02 - to modify the structure and add your own
03:04 - class names if that's what you'd like to
03:06 - do and I also provide the colors and
03:08 - fonts using CSS variables which if
03:11 - you're unfamiliar you can click on this
03:13 - link to read a little bit more about it
03:15 - finally keep in mind that your approach
03:17 - the way that you solve these challenges
03:19 - will likely be different than my
03:21 - solution and that's totally okay and to
03:23 - be expected the act of recreating these
03:25 - challenges as closely as possible is one
03:27 - of the best ways to improve your CSS
03:29 - knowledge it's going to help you improve
03:30 - your observational skills creativity and
03:32 - might lead you to discover CSS tools and
03:35 - tricks that you didn't know existed so
03:36 - go ahead and get started be creative and
03:38 - above all have
03:43 - fun hello and welcome to the colorful
03:46 - button challenge here's the button
03:48 - you're going to be building as you can
03:49 - see we have this lovely kind of sunset
03:51 - themed radiant border and on Hover it
03:54 - gets slightly bigger the gradient flips
03:57 - horizontally or from one side to other
04:00 - so as you can see we begin with the
04:02 - yellow border on the left and we flip it
04:05 - so that it's on the right on Hover for
04:08 - this challenge I have included Your
04:10 - basic HTML so we have a button border
04:15 - there is perhaps a hint on how you might
04:17 - want to get started and then in your CSS
04:19 - file I have all of the colors set up
04:22 - that you can use and I put them on the
04:23 - root pseudo element so you can use CSS
04:25 - variables if you want to or you can just
04:27 - copy and paste it's up to you going back
04:29 - back to the slides you'll find an
04:31 - outline of the requirements so as
04:33 - discussed the button should have a
04:34 - gradient border you can use the provided
04:37 - colors or choose your own and the
04:39 - gradient should be
04:41 - 115° which has to do with the angle of
04:43 - the colors of the gradient this will
04:45 - make more sense when you look up the
04:47 - linear gradient function which we'll get
04:49 - to in a second the button's hover State
04:51 - should have the gradient colors flip
04:53 - horizontally meaning from one side to
04:55 - the other the button should grow
04:57 - slightly in size so if we take another
05:00 - look at it you can see on Hover it gets
05:02 - just ever so slightly bigger and finally
05:04 - the text changes from a subtle gray to
05:07 - White the last requirement is that the
05:10 - button be completely centered on the
05:12 - page both horizontally and vertically on
05:15 - the final slide I have some hints for
05:17 - you so to achieve a gradient border you
05:20 - can do that using a wrapping div which
05:22 - is what I'm going to do in my solution
05:24 - or you can use the Border image property
05:27 - if you choose to do that route you'll
05:28 - want to research border image and Border
05:30 - image slice and to create a gradient
05:33 - you'll want to look at the linear
05:35 - gradient CSS function be sure to refer
05:38 - back to the animation as much as you
05:40 - need to and try to match the styles of
05:42 - the button as closely as you can have
05:47 - fun welcome to the solution for the
05:50 - colorful button challenge hopefully it
05:52 - went well and you were able to
05:54 - accomplish the task let me show you my
05:56 - solution let's first take a look at the
05:58 - index. HT ml so we have a button and the
06:01 - button is inside of a wrapping div
06:03 - called button border which is inside of
06:06 - a container so the first thing I'm going
06:07 - to do is use this container to Center
06:09 - the button both horizontally and
06:11 - vertically on the page here is my
06:14 - favorite way to do that going to Target
06:17 - the container class and then I will say
06:20 - display flex and that will allow me to
06:24 - justify content Center and align items
06:28 - Center now align item Center isn't going
06:31 - to do anything until I set a height for
06:34 - the browser window so I'm going to set
06:36 - the height of this container to be 100%
06:39 - viewport height meaning 100% of whatever
06:43 - the height of the current window is now
06:45 - as my browser window gets larger and
06:47 - smaller my button is always centered the
06:50 - next thing I'm going to do is create my
06:52 - gradient border as I said I'm going to
06:54 - use this wrapping div and I'm going to
06:57 - set the background to a linear gradient
07:01 - the first argument is the angle that you
07:03 - want your gradient to follow so I'm
07:05 - going to say I want it to be at 115°
07:08 - angle and this is a lot of colors so I'm
07:11 - just going to copy and paste them in and
07:14 - so far we can see nothing but if I add
07:17 - some padding you'll be able to see the
07:20 - gradient border peeking out around the
07:22 - box so there is our gradient border now
07:25 - let's work on the button Styles before
07:27 - we start styling the button what I would
07:29 - like to do is add the background color
07:31 - so I'm going to come here and grab this
07:33 - body background variable I'll add it as
07:37 - a background color to my body now let's
07:40 - work on the button Styles so I'm going
07:42 - to Target button class and the first
07:45 - thing I'm noticing now that we have this
07:47 - gradient border is the default border
07:49 - that's around the button so I want to
07:51 - get rid of that and I can do that by
07:53 - just setting that to border none and
07:56 - then I want to set my background color
07:59 - and and my font color I'll grab those
08:02 - from up here so here's my background
08:05 - variable and my button color variable
08:08 - next I'm going to give it a little
08:10 - padding so we'll say 1 M on the top and
08:12 - bottom and
08:14 - 1.5m on the left and right and that is
08:18 - roughly what it should look like but you
08:20 - may have noticed that we need to do a
08:21 - little work on the typography in the
08:24 - list of variables I included a Google
08:27 - font and I'm going to go ahead and add
08:29 - that to my body but there's one more
08:32 - thing that we need to do because button
08:33 - elements are a little bit strange they
08:35 - will keep the browser default font
08:37 - unless you specify otherwise I'll come
08:40 - back down to my button and I'm going to
08:42 - say font family inherit and this is how
08:46 - I specify that the button should inherit
08:49 - from its parent most element which is
08:51 - body and then finally if you have a good
08:53 - eye you may have noticed that the letter
08:55 - spacing is a little bit wider than
08:57 - default and I have set that to
09:00 - 2.1m so we're getting pretty close the
09:02 - final thing to do would be to write the
09:04 - hover state but before I do that let me
09:07 - show you the other way that you can
09:09 - achieve a gradient border so what I can
09:12 - do is I can ignore my button border
09:14 - completely so I'm going to comment it
09:16 - out for now what I can do on my button
09:19 - is I can say border image and that's
09:22 - where I want to put my linear gradient
09:26 - and we'll have to come up here and
09:27 - comment out border none as you can see
09:29 - once we've set border image we can see
09:32 - our gradient border sort of peeking out
09:34 - from the corners that's because we need
09:36 - to set border image slice border image
09:39 - slice basically has to do with defining
09:42 - how you want the image that you're using
09:44 - as a border to be sliced up in different
09:47 - quadrants of your element it definitely
09:50 - has its place but it's a little hard to
09:51 - grock if you ask me it's a pretty
09:53 - strange property that I don't find to be
09:55 - particularly userfriendly and its other
09:58 - limitation is that it is compatible with
10:00 - border radius so if we wanted to round
10:02 - these Corners we would not be able to do
10:04 - that using border image so it's up to
10:06 - you which one you would prefer to use
10:08 - I'm going to comment that out for now
10:12 - and go back to my gradient border with
10:14 - the wrapping div now let's write a hover
10:17 - state if we look at the example three
10:19 - things are happening on Hover the
10:22 - gradient is flipping the button is
10:24 - growing ever so slightly bigger and the
10:26 - font color is changing so we're actually
10:28 - going to need to write write two hover
10:30 - States we need a hover State on button
10:34 - border to flip that gradient but we'll
10:37 - also want to specify what we want to
10:40 - happen to the button class when button
10:43 - border is hovered over so that would be
10:45 - button border hover button in other
10:49 - words when button Border's hover state
10:51 - is active Target the button class and do
10:54 - something so we want the buttons font
10:56 - color to change and I'll come up here
10:59 - and grab the button color on Hover
11:02 - variable now the font color is changing
11:05 - on Hover and I'm going to increase the
11:07 - button size by making the padding ever
11:10 - so slightly larger we'll say we want it
11:13 - to grow to 1.1 M on the top and bottom
11:17 - and 1.6m on the left and right so now
11:21 - all that's left is to flip that gradient
11:23 - border on button border hover I want to
11:27 - change the background let's grab this
11:29 - linear gradient and what I could do here
11:32 - is I could manually switch the colors
11:35 - the last color first this color second
11:37 - this color third and so on or I could
11:39 - flip it by saying that I want the angle
11:42 - to be
11:44 - 230° let me make the background of the
11:47 - button transparent for a second so that
11:49 - you can see this a little better so as
11:51 - you can see we're flipping from one side
11:53 - to the other I'll delete that and that
11:56 - is everything that we needed to do we
11:58 - have a button with a nice gradient
12:00 - border and hover State great work see
12:03 - you in the next
12:06 - one hello and welcome to the expanding
12:09 - search bar challenge you've probably
12:11 - seen an expanding search bar somewhere
12:13 - on the internet if you'd like to see one
12:15 - in the wild you can go to github.com
12:17 - they have an expanding search bar so
12:18 - what you'll do for this challenge is
12:20 - build a search bar that when you click
12:22 - into it it expands to the full width of
12:25 - its container and when you click out of
12:27 - it it goes back to its original size as
12:29 - a bonus challenge I'm going to ask you
12:31 - to make this placeholder text go away
12:33 - when you click inside the search bar
12:35 - I've outlined these requirements in the
12:37 - slides for you to refer back to so your
12:40 - default search input should take up
12:42 - about a third of the width of its
12:44 - container we look at the HTML you'll see
12:46 - that we have the search input inside of
12:49 - a container and when the user clicks
12:51 - into the search bar you want the input
12:53 - to grow to the entire width of its
12:56 - parent container in the example the
12:58 - container is set to be most of the width
13:01 - of the browser window and the search is
13:03 - expanding to fill that space as I said
13:06 - it should shrink back to its original
13:08 - size when the user clicks out of or away
13:11 - from the search input the Border should
13:13 - turn blue and as a bonus the placeholder
13:16 - text should not be visible when the user
13:18 - clicks inside of the search bar there's
13:21 - also an accessibility requirement all
13:23 - form inputs should have a label for
13:25 - screen reader accessibility so you'll
13:27 - need to create a label for your search
13:29 - input that has a valid four attribute
13:31 - and then I'd like you to look up a CSS
13:34 - rule or a group of CSS styles that hide
13:37 - the search inputs label visually so you
13:39 - cannot see it on the page but it still
13:41 - keeps it accessible to screen readers
13:44 - there's no need to try to write this
13:45 - yourself there's plenty of resources out
13:47 - there that specialize in accessibility
13:49 - that have written a little code snippet
13:51 - that you can use so this is a research
13:54 - challenge if you will finally here are
13:56 - some hints you'll want to use a
13:58 - transition to make sure that the search
13:59 - bar expands smoothly if we take a final
14:02 - look at this example you'll see that
14:04 - when it is clicked inside it smoothly
14:07 - expands to fill up the container it's
14:09 - not happening instantly so you want to
14:11 - look at the transition property and
14:14 - finally some things to research you'll
14:16 - want to familiarize yourself with the
14:18 - focus pseudo selector and you'll also
14:21 - want to find a pseudo selector that lets
14:23 - you change input placeholder Styles I
14:26 - hope you enjoy this Challenge and good
14:27 - luck
14:31 - welcome back here is how I solved the
14:34 - expanding search bar challenge I'm going
14:36 - to start by creating a label for my
14:38 - search bar my input has an ID of search
14:41 - field so I will add a four attribute
14:44 - called search field my label will be
14:46 - search and to my label I'll add a class
14:50 - called hide in my CSS I'll create my
14:54 - hide class and into hide I will copy and
14:57 - paste these Styles which which I got
14:59 - from w3.org or the web accessibility
15:03 - initiative now my label is hidden but
15:06 - will still be accessible via screen
15:08 - reader the next thing I will do add some
15:12 - styles to my container so that my search
15:14 - bar isn't stuck up in the corner I'm
15:17 - going to give it a little bit of padding
15:20 - and I also want my container to have a
15:22 - width of
15:23 - 80% and I'll set my margin to Auto and
15:27 - if I give this a background
15:30 - you can see that I've made my containers
15:31 - slightly less than the width of the
15:33 - browser window I'll add some styles to
15:36 - my search bar I want my search bar when
15:40 - it's unfocused to take up 30% of the
15:43 - width of my container I'm going to give
15:45 - it a little space by adding a line
15:48 - height of two I also want to give it a
15:51 - little bit of Border radius and a
15:55 - slightly thinner border that is one
15:58 - pixel Sol
15:59 - and then I'll come up here and grab my
16:01 - border color variable you may have
16:04 - noticed that when my window was smaller
16:06 - my placeholder text starts to disappear
16:09 - so I want to make sure that my search
16:11 - bar doesn't get too small I'm actually
16:14 - going to do that by giving my container
16:16 - a minimum width and I'll just give that
16:18 - a hard pixel value of 320 pixels which
16:23 - if we were doing responsive styling is
16:25 - roughly the size of the smallest screen
16:27 - width that we would want to account for
16:30 - that is going to prevent my search box
16:32 - from getting too small now I want to
16:34 - Define what happens when I click into
16:36 - the search we can use a pseudo element
16:39 - called Focus I want to style search bar
16:43 - poon focus when we focus in on the
16:45 - search bar I want its width to become
16:48 - 100% of its container I also want to
16:50 - change its border color and I'll come up
16:53 - here and grab the Border color variable
16:56 - as you can see the size changes when we
16:58 - click in a out of it I want this
17:00 - transition to happen smoothly though so
17:02 - to my search bar I'm going to add a
17:05 - transition property and I'm going to say
17:07 - I want all of these changes to happen
17:09 - and I want them to take 3 seconds and
17:12 - that gives us a smoother animation
17:14 - effect aside from the bonus challenge
17:16 - that's really all we needed to do with
17:18 - our search bar if you have a good eye
17:20 - you may have noticed that in the example
17:23 - the font weight of the placeholder text
17:25 - is slightly thinner than the default to
17:28 - be able to style the placeholder text
17:30 - I'm going to Target my search bar class
17:33 - along with two colons and then
17:35 - placeholder and that's going to allow me
17:37 - to style the placeholder text inside my
17:40 - search bar input so I'm going to make
17:41 - the font weight 200 and now this matches
17:45 - the example and the final thing left is
17:47 - to see if we can get the placeholder
17:49 - text to disappear when we click into the
17:52 - search bar and the way I can do that is
17:55 - first to Target the search bar class
17:58 - with a focus State and then I want to
18:01 - Target placeholder and now that I'm
18:03 - targeting the placeholder text when
18:05 - we're in Focus I can say I want the
18:07 - color to be transparent which will
18:10 - effectively make the placeholder text
18:12 - disappear as we click in and out of it
18:14 - the placeholder text disappears
18:17 - congratulations you've built a NIC
18:18 - looking expandable search bar that is
18:21 - also screen reader
18:26 - accessible this challenge is a
18:28 - simplified version of a card or tile
18:31 - that you might find on codepen if you
18:33 - were to go to codepen and look at their
18:35 - pen galleries you'd see something that
18:37 - looks something like this the idea being
18:39 - that you have a thumbnail of what the
18:41 - pen looks like the title of the pen the
18:45 - username of the person who created the
18:46 - pen and their Avatar and on Hover it
18:50 - shows you some more information about
18:52 - that Pen's stats in this case how many
18:55 - times it's been liked or commented on
18:57 - your challenge will be to recreate this
18:59 - design as closely as possible I've also
19:02 - included some stills of the Pen's two
19:04 - states so we have the default and on
19:07 - Hover as well as an outline of the
19:09 - requirements you're going to match the
19:11 - examples as closely as possible present
19:13 - the like and comment stat so they appear
19:15 - on Hover and we're not going to worry
19:17 - too much about responsiveness because
19:19 - this is one tile that in a real world
19:21 - situation would be part of a gallery of
19:23 - tiles but do make sure that the main
19:26 - code pen thumbnail image is responsive
19:29 - and you'll want to prevent the tile from
19:30 - growing too wide as the browser gets
19:32 - wider so you're going to want to
19:34 - restrain how much the tile will stretch
19:37 - relative to the size of the browser
19:39 - window I'm starting off with all the
19:41 - HTML you need as well as the images and
19:45 - if we look at the index. CSS file I've
19:48 - included the colors and fonts you need
19:50 - in the root property so that you can use
19:53 - CSS variables or copy and paste it's up
19:55 - to you good luck and I'll see you in the
19:57 - solution
20:01 - welcome to the solution to the code pen
20:03 - tile challenge I'm going to start by
20:05 - resetting the padding and margin of a
20:08 - few elements we have this H3 here and we
20:12 - have a paragraph and both of them have
20:14 - default padding and margin that we don't
20:16 - need I'm going to Target the py and the
20:19 - heading and I'll say margin zero and
20:23 - padding zero I'm also using an unordered
20:26 - list to display the pen stats so I'm
20:29 - going to need to get rid of the padding
20:31 - that is default on the left as well as
20:33 - the bulleted list style type on the list
20:36 - items so that gets rid of some styling
20:39 - things that will get in my way later
20:41 - let's get started on the cart I'm going
20:43 - to start by making sure everything is
20:46 - sized correctly because these large
20:48 - images are a little overwhelming so on
20:51 - the card I'm going to set a Max width of
20:54 - 300 pixels and then I'm also going to
20:58 - Target the thumbnail image and set that
21:01 - so it has a max width of 100% let's go
21:04 - ahead and put a background color on the
21:07 - card so that we can see where it is I'll
21:09 - grab card background color variable now
21:12 - you can see the background but our image
21:14 - sizes are a little out of control still
21:17 - I'm also going to set the size of the
21:20 - Avatar image and because it's very small
21:23 - I'm going to give it a hard pixel value
21:26 - tight and width of 50 pixels there we go
21:30 - so now our card is roughly the right
21:32 - size I'll go ahead and Center it and add
21:36 - some padding you'll notice that adding a
21:39 - Max width to this image has made it
21:42 - responsive so it's going to shrink and
21:43 - grow with the size of its container but
21:46 - what I also want to do is add an object
21:48 - fit property of cover and this is going
21:51 - to help us out if we were to put an
21:52 - image here that was a different size
21:56 - object fit cover allows the image to
21:58 - take up the entire space of its
22:00 - container without stretching it's always
22:03 - going to maintain its aspect ratio and
22:05 - so if it's container were to get too
22:08 - wide or too long it would clip the image
22:11 - to still fit in that space without
22:13 - stretching it now we can move on to the
22:15 - bottom half of the card but before we do
22:17 - that I want to give card and all of our
22:19 - images a border radius and we'll do 10
22:23 - pixels let's start by making the text
22:25 - the right color so that it's easier to
22:27 - see I'm going to come up to my HTML and
22:30 - body tags and I will just make all the
22:32 - text white for now and while I'm up here
22:34 - I'm going to add the main background
22:37 - color and there we go we're getting
22:39 - closer my little Avatar here and my
22:41 - details about this pen are in a
22:43 - container called card details and I want
22:46 - to set that to flex so that these two
22:48 - elements are Set Side by Side so I'll
22:51 - put that here because I like to keep my
22:53 - Styles in order from top to bottom then
22:55 - I'll set card body to display Flex now
22:59 - the Avatar and the details are side by
23:02 - side and we just have to take care of
23:03 - some spacing and typography issues let's
23:07 - add some margin to the right of the
23:09 - Avatar and also some padding between the
23:12 - thumbnail image and the card details now
23:15 - down here at the bottom of the file I'm
23:17 - going to adjust the font size of the H3
23:20 - and the paragraph tag I'll Target our
23:23 - details H3 and we'll give that a font
23:26 - weight of 900
23:29 - and a font size one R just to make it a
23:32 - little bit smaller into the paragraph I
23:35 - make the font size slightly smaller and
23:38 - change the color so I'm going to scroll
23:39 - up and grab my username
23:43 - color fix my typo and there we go
23:47 - because we've removed all of the padding
23:49 - and margin everything's a little
23:52 - squished so I'm going to come up here
23:54 - and set the line height of card details
23:58 - one .5 just to give things a little more
24:01 - breathing room I think that's it for
24:03 - that section of the card now we can work
24:06 - on our hover State notice that the stats
24:10 - are in these little boxes that are a
24:12 - little bit darker in background and have
24:14 - a border radius so I'll Target the card
24:18 - stats list items and we'll grab that
24:20 - background color we'll also want to make
24:23 - sure that this unordered list is a flex
24:26 - container and now to our list item we
24:28 - can add some padding and some margin to
24:33 - make things look a little better and the
24:35 - final thing we'll do is add some border
24:37 - radius and that is looking pretty good
24:41 - our last task is to take care of the
24:42 - hover state so we need this to only be
24:45 - visible on Hover so I'm actually going
24:48 - to set card stats to display none and
24:51 - then I will come down here and what I
24:53 - want to do is if the user hovers
24:56 - anywhere on a card I want to Target card
24:59 - stats and I want to display Flex so now
25:04 - our default is that this bottom part
25:06 - isn't visible but when I hover over it
25:08 - the display is set so that it's visible
25:10 - you may have noticed that there is a
25:12 - little bit too much space along the
25:14 - bottom here and that has to do with the
25:16 - padding that we set on the card itself
25:19 - so to get rid of that I'm going to say
25:22 - on card hover set the padding bottom of
25:25 - card to zero and we'll add some padding
25:28 - to card stats and that way we end up
25:31 - with half as much padding the very last
25:33 - thing we need to do is make sure that we
25:35 - are using the correct font so I'm going
25:37 - to scroll up to the top of my file and
25:40 - grab my font variable which we will add
25:43 - as a font family to the body and with
25:46 - that we have our finished code pen tile
25:48 - this is a project that seems pretty
25:50 - simple at first but can actually be
25:52 - pretty fiddly so great work and I'll see
25:55 - you later
25:59 - in this challenge you're going to be
26:00 - building a fun little loading animation
26:04 - this is an example of something that you
26:05 - might see as you're waiting for a large
26:08 - website to load for example let's go
26:11 - through the requirements you're going to
26:13 - match the example as closely as you can
26:15 - the animation should be on an infinite
26:17 - Loop meaning there's nothing that is
26:19 - going to start or stop the animation
26:21 - it's just going to keep going and keep
26:23 - going and finally the animation should
26:25 - be perfectly centered on the page
26:28 - regardless of how large or small the
26:31 - browser becomes here are a couple of
26:34 - hints to help you on your way you're
26:35 - going to want to look into or be
26:37 - familiar with the CSS animation property
26:41 - and using key frames as long as you're
26:43 - fairly comfortable with CSS it shouldn't
26:45 - be too big of a lift to research CSS
26:48 - animation if you're not already familiar
26:51 - sometimes I find it helpful to describe
26:53 - what the animation is doing to figure
26:55 - out how to recreate it so in this
26:57 - animation three dark circles are growing
26:59 - larger and lighter in color at a fairly
27:02 - slow pace we're starting with dark
27:05 - circles they're expanding a little bit
27:07 - and as they expand they're turning light
27:09 - gray and then they shrink back up again
27:12 - have fun and best of
27:16 - luck welcome back this is the solution
27:19 - to loading animation number one let's
27:22 - start by defining some circles so we
27:23 - have something to work with here in my
27:26 - HTML you see we have a container with
27:28 - three divs with the class of circle so
27:32 - in my CSS I'm going to Target Circle and
27:36 - we'll set a height width and background
27:39 - color I'll start with the background
27:41 - color of black for now and if we add
27:44 - some margin you'll see this gives us
27:46 - three squares stacked on top of each
27:48 - other to make them round I will give
27:50 - them some border radius and now I want
27:53 - them to be in a row so can work on some
27:57 - styles for my container container I'm
27:59 - going to start by setting my display to
28:01 - flex and then I'll give my container a
28:04 - height of 100 view Port height and that
28:07 - will allow me to Center my content
28:12 - horizontally and vertically with align
28:15 - items and there we go we have three
28:17 - circles centered on the page so we're
28:19 - ready to write an animation on each
28:22 - circle I'm going to create an animation
28:25 - called pulse I want the animation to
28:28 - last for 1 second now that I've named my
28:31 - animation I'm going to need to create it
28:33 - so down here I'll Define my pulse
28:36 - animation I want to create some key
28:38 - frames called pulse and inside of key
28:41 - frames I can Define my animation in a
28:43 - variety of ways I'm going to use from
28:47 - and to so if we take a look at the
28:49 - animation we're starting with some
28:52 - smaller darker circles and we're
28:55 - expanding out into some lighter gray
28:58 - circles so I want the background of my
29:01 - circles to go from dark gray and let me
29:04 - actually use the variables that I
29:06 - defined up here so I want my background
29:09 - to go from my dark color to my light
29:12 - color now you can see when I run that my
29:15 - animation happens once so I need to
29:18 - Define that I want my animation to be
29:22 - infinite now we have pulsing circles but
29:24 - we need them to enlarge we want it to go
29:27 - from default size so I don't need to put
29:30 - anything in the from category but we
29:32 - want it to go from the default size to
29:35 - just ever so slightly expanding in
29:38 - height and width so this is almost what
29:41 - we're after but as you can see the
29:42 - circles are expanding and then
29:44 - immediately snapping back to their
29:46 - default State before expanding again we
29:49 - can get the pulsing effect by telling
29:52 - the animation that we want it to play
29:54 - backward and forward and we can do that
29:56 - with the keyword
29:58 - alternate and there is the effect that
30:00 - we're looking for this is a really fun
30:03 - exercise to play around with try to
30:05 - change the color and timing and the
30:07 - rates of the animation and see what kind
30:09 - of loading effects you can come up with
30:11 - see you
30:14 - later welcome this is loading animation
30:18 - number two I love loading animations I
30:21 - think that it's a really great practical
30:23 - real world project that is also a ton of
30:26 - fun where you can endlessly EXP
30:27 - experiment with all of the powerful
30:30 - things that CSS has to offer a loading
30:32 - animation is a simple mesmerizing
30:35 - animation that plays when you are
30:37 - waiting for a website or a web app to
30:39 - load for this challenge I'd really like
30:41 - you to experiment and see what you come
30:43 - up with so your requirements are three
30:45 - shapes rotating slowly in unison and the
30:49 - animation should Loop continuously so
30:52 - nothing starts it or stops it it's just
30:54 - going forever you can match the example
30:56 - or you can use your own shapes just make
30:59 - sure that the rotation and the timing is
31:02 - as close as you can get it a few nudges
31:04 - to get you started you're going to want
31:06 - to look into the CSS animation property
31:09 - and using key frames and if you're
31:11 - comfortable with CSS I have faith that
31:13 - you can research CSS animation and get
31:16 - going you'll also want to look at the
31:18 - CSS transform property which allows you
31:21 - to move stretch and rotate HTML elements
31:25 - finally as I mentioned before feel free
31:26 - to use your own colors and shapes be
31:28 - creative have fun I'll be back to show
31:30 - you my
31:34 - solution hey there this is my solution
31:37 - to the Loading animation Challenge
31:39 - number two if I have a look at my HTML I
31:42 - have a container div and three divs each
31:46 - with a class of square and with a unique
31:49 - class of square one two or three I'm
31:52 - going to build my squares by targeting
31:54 - this Square class I'll give each square
31:57 - a height of width and a background once
31:59 - I add a background you can see that my
32:01 - three squares need a little bit of
32:03 - margin to create some space between them
32:06 - now that I can see my individual squares
32:08 - let's give them their proper colors
32:10 - square one is red square two has a
32:15 - background of orange and square three
32:19 - has a background of blue now I can get
32:23 - rid of my black background what I'll do
32:25 - next is arrange my three squares in a
32:28 - row I'll do that by targeting the
32:30 - container class I'll give the container
32:33 - a height of 100 viewport height set the
32:37 - display to flex then I can
32:40 - justify content Center and align items
32:45 - Center let's animate these squares I
32:48 - want to animate all three so in my
32:50 - Square class I'll add an animation
32:53 - property let's say I'm going to name my
32:55 - animation rotate and I want it to take 1
32:58 - second I'll come down here and Define my
33:03 - rotate animation I'll use the from and
33:06 - to properties the effect I'm looking for
33:10 - if we have a look at the example is for
33:12 - the boxes to rotate from corner to
33:15 - corner this means rotating the box at a
33:18 - 45 degree angle let me show you what
33:21 - that looks like if I come up to square
33:24 - and I use the transform property the
33:26 - value I want is I'm going to use the
33:28 - rotate function which takes a value of
33:30 - how many degrees that you want to rotate
33:33 - that rotates the squares onto its corner
33:35 - or changes them into diamonds I want
33:38 - these squares to rotate from one corner
33:41 - to the other so what I want is for them
33:44 - to transform and rotate from -
33:49 - 45° to
33:51 - 45° you'll see that that animation is
33:54 - happening once so I'll come up here and
33:56 - I'll say I want it to be infinite there
33:59 - we go the squares are rotating corner to
34:01 - corner this looks a little fast so I'll
34:03 - say I want it to take 1.5 seconds that
34:07 - is the effect that we are looking for I
34:10 - hope you had fun and that you created
34:12 - some amazing loading
34:17 - animations hello again this is the
34:20 - archery target challenge you are going
34:22 - to build a CSS only archery target we
34:26 - have three rings with a yellow Bullseye
34:29 - in the middle the requirements for the
34:30 - archery target you should try to match
34:33 - the example as closely as you can make
34:35 - sure that the target is centered on the
34:37 - page you don't need to worry about
34:39 - making it responsive and I don't know if
34:41 - this really qualifies as a hint or not
34:43 - but I find it really helpful to describe
34:46 - what is actually happening here with
34:49 - this archery target so these are four
34:52 - circles on top of each other and each
34:54 - circle is centered within the larger
34:57 - Circle when I first tried this challenge
35:00 - I made it a little complicated by
35:02 - looking at these as rings and in fact if
35:05 - we take a look at the HTML I have given
35:07 - them the class of rings and technically
35:10 - that's what they are but it may help you
35:12 - to think about these as full circles
35:15 - they're just piled on top of each other
35:17 - in the CSS I have included some colors
35:21 - for you to use feel free to use them as
35:23 - CSS variables or copy and paste it's up
35:25 - to you and have fun I think this
35:28 - exercise is a really good way to
35:29 - practice centering objects see you in
35:32 - the
35:35 - solution welcome back let's create an
35:38 - archery target using only CSS we'll
35:40 - start by taking a quick look at the HTML
35:43 - so we have this sort of parent class
35:46 - called rings and nested inside is three
35:50 - rings and the Bulls ey let's start by
35:53 - creating each individual ring we know
35:56 - that each ring is going to have a
35:58 - different height and width and it's
36:00 - going to have a different background
36:02 - color but one thing that every ring will
36:04 - have will be border radius because these
36:06 - are going to be boxes with a 50% border
36:09 - radius which will make them a circle so
36:12 - I'll Target the ring class to put border
36:15 - radius on every single ring our outer
36:18 - ring is ring one which I will give a
36:22 - height of 200 pixels a width of 200
36:26 - pixels and we want that to have the
36:29 - black background so I will copy and
36:31 - paste the variable nothing is showing up
36:35 - because I have a typo here we need a
36:37 - dash and there we go a 200x 200 pixel
36:41 - black circle next let's define ring two
36:45 - and what I'm going to do is decrease
36:47 - each ring by 50 pixels so this one will
36:50 - have a height and width of 150 pixels
36:54 - and it's background from looking at the
36:55 - example should be blue
36:58 - and I have ring three which will have a
37:01 - height of 100
37:03 - pixels width of the same and a
37:07 - background of red finally we have the
37:11 - bullseye which will have a height and
37:13 - width of 50 pixels and a yellow
37:17 - background this actually looks kind of
37:19 - cool like that but what we need to do
37:21 - now is Center all of these and we also
37:24 - need to Center the Rings container as a
37:27 - whole I'm going to come up near the top
37:29 - here and Target rings and we'll Center
37:33 - by setting 100% viewport height setting
37:37 - the display to flex and then we can
37:40 - justify Center and align items Center so
37:45 - now our parent div is centered we just
37:48 - need all of these circles to be centered
37:50 - in their parents and their parent is the
37:53 - next largest Circle so the yellow
37:55 - circle's parent is the red Circle the
37:58 - red circle's parent is the blue circle
38:01 - and the blue circle's parent is the
38:03 - black circle we essentially want to do
38:06 - all of this to every individual ring so
38:10 - I'll also give the ring class these
38:12 - Styles and there we go a perfectly
38:14 - centered archery target have fun and see
38:16 - you in the next
38:20 - one hey there in this challenge we're
38:22 - going to build a word Carousel this is a
38:25 - CSS only animation no JavaScript where
38:28 - we are swapping out different words on a
38:31 - regular looping Cadence for this
38:33 - challenge you'll want to match the
38:35 - Styles as closely as you can I would
38:37 - love for you to personalize the carousel
38:40 - I've added four things that I love I'd
38:42 - like you to change out the words for
38:44 - four things that you love and it's okay
38:46 - if they overlap who doesn't love scriba
38:49 - or cats or coding the words should
38:52 - rotate in an infinite Loop and as I said
38:55 - before you won't use any Java jaas
38:57 - script for this challenge in the next
38:59 - slide I have some hints so if you don't
39:02 - want hints go ahead and get started here
39:04 - they are you can Define the steps of an
39:06 - animation in a key frame using
39:09 - percentages with 0% being the beginning
39:11 - of the animation and 100% being the end
39:14 - of the animation with this information
39:17 - think about how you can use a pseudo
39:19 - elements content property to swap out
39:22 - words in combination with animation key
39:24 - frames have fun making this your own I
39:27 - will see you in the
39:31 - solution hello and welcome to the word
39:34 - Carousel solution I hope you had fun
39:36 - personalizing this project let's get
39:38 - started as usual the first thing I want
39:40 - to do is Center my project in the middle
39:43 - of the browser taking a look at the HTML
39:47 - you see I have a container element so
39:50 - I'll Target that give the browser a
39:53 - height of 100 viewport height change the
39:57 - dis play to flex and justify content
40:01 - Center as well as align items Center and
40:05 - we're centered so here is the plan I am
40:09 - going to Target this H1s after pseudo
40:13 - element which I will give a Content
40:16 - property H1 after content and we will
40:20 - set that to very for now just so you can
40:23 - see now I can swap in whatever words I
40:28 - want here so the basis of how this is
40:31 - going to work is I'm going to use
40:33 - animation key frames to keep swapping
40:36 - out the value of content so for now
40:39 - let's make content
40:40 - blank then I'll add an
40:43 - animation which I will call Swap and
40:47 - let's say we want it to take about 6
40:49 - seconds now down at the bottom of the
40:51 - file I will Define Swap and what I'm
40:54 - going to want to do is Define
40:58 - what the content properties value should
41:00 - be from 0% which is the beginning of the
41:03 - animation to 100% which is the end of
41:07 - the animation and all the steps in
41:10 - between and I'll go in steps of
41:14 - 25% so that'll be
41:17 - 25%
41:19 - 50% and
41:22 - 75% here's a part where it gets a little
41:25 - bit strange I'm going to go ahead and
41:27 - start adding things that I love so
41:30 - singing cats hoding and scrimba now you
41:35 - may think that I would want to add a
41:37 - fifth item here another thing I love is
41:40 - karaoke which I guess is also singing
41:43 - but what can I say I'm obsessed and if I
41:45 - run that and let's remember we want this
41:48 - animation to be infinite so if we watch
41:51 - this you'll see that we'll get to the
41:53 - end and it will kind of skip and that's
41:56 - because the the animation is immediately
41:59 - starting over once it's finished which
42:02 - causes this weird little skip to occur
42:05 - ideally what we would do is we would say
42:08 - display all of these words for 2 seconds
42:11 - for example then pause for 2 seconds and
42:14 - start over again and that would give us
42:16 - a nice smooth rotation but unfortunately
42:20 - when we're infinitely animating like
42:22 - this there isn't a way to delay the
42:24 - animation in between iterations so we
42:27 - kind of have to fake it and that's why
42:29 - both my first and last item is going to
42:33 - be singing and if you watch this rotate
42:36 - you'll see that the effect is that it's
42:38 - a nice smooth rotation let me make sure
42:41 - my syntax is correct here that's the
42:44 - animation let's move on to styling I
42:48 - want my rotating word to have a
42:50 - background I want the color to be white
42:52 - and we also need some padding so first
42:56 - I'll set a back ground I'll grab my
42:59 - variable and I'll add 10 pixels of
43:01 - padding I'll make the color white I'll
43:04 - add some border radius and finally a bit
43:09 - of margin on the left here to create
43:12 - some space between our rotating word and
43:14 - the rest of the sentence and there we go
43:17 - fun little word Carousel I'll see you in
43:19 - the next
43:23 - challenge hello this is the French flag
43:26 - challenge
43:27 - using pure CSS you're going to recreate
43:30 - the French flag which is three equal
43:33 - width Stripes of blue white and red an
43:36 - important part of recreating a country
43:38 - flag is making sure that the flag has
43:40 - the correct proportions and the way that
43:42 - we can do that is with aspect ratio the
43:45 - French flag has an aspect ratio of 2 to
43:48 - three the first number represents width
43:50 - and the second number represents height
43:52 - and the way that I like to think about
43:54 - it is if we were to divide the height by
43:57 - the width so 3 / 2 that would give us
44:01 - 1.5 which is another way of saying that
44:03 - a rectangle with an aspect ratio of 2: 3
44:07 - has a height that is 1.5 * the size of
44:10 - its width for every flag challenge we
44:13 - are going to start with the height of
44:15 - the flag and use aspect ratio to
44:18 - calculate what the flag's width should
44:20 - be here is what that formula looks like
44:23 - we'll take the height and we will
44:25 - multiply that by the ratio height
44:28 - divided by the ratio width here is an
44:31 - example if I have a flag with a ratio of
44:33 - 5 to 4 and I start with a flag height of
44:36 - 200 pixels then this would be my
44:38 - calculation for the width using the CSS
44:42 - calc function would take my height and
44:45 - multiply it by 4 / 5 or 4 fths this
44:49 - would give me a60 so if I have a flag
44:52 - height of 200 pixels my width would be
44:56 - 160 pixels another way that might be
44:59 - helpful to think about it is 4 divid 5
45:01 - or 4 fths is 80% so this calculation is
45:05 - giving me a width that is 80% of my
45:08 - height as you're creating your French
45:09 - flag you'll want to plug these numbers
45:11 - in accordingly let's take a quick look
45:13 - at the starter files I've started you
45:16 - out with all the HTML that you're going
45:17 - to need for your flag if you feel
45:19 - compelled to change any class names or
45:21 - the HTML itself feel free to do so but
45:24 - keep in mind that this is the HTML I'll
45:25 - be using for my solution in the CSS file
45:28 - I have included as CSS variables all of
45:31 - the colors that you're going to need as
45:33 - well as a starter flag height of 150
45:36 - pixels because I found that that is what
45:39 - fits nicely in the mini browser but feel
45:41 - free to make your flag as big or as
45:43 - small as you'd like as long as it has
45:45 - the correct proportions have fun with
45:48 - this Challenge and I'll see you in the
45:52 - solution hello and welcome back this is
45:55 - the solution to the French flag CSS
45:58 - challenge we're going to need three
46:01 - equal width columns inside of a flag
46:04 - container I'll show you two ways to
46:07 - approach this one using Flex box and one
46:09 - with grid I'll start by selecting my
46:12 - flag container and adding a height and
46:14 - width for the height I'll use my flag
46:17 - height variable and for the width let's
46:19 - take a look at this formula I want to
46:22 - take my flag height multiplied by the
46:25 - ratio height divide by the ratio width
46:29 - my aspect ratio is 2: 3 so opening up a
46:33 - cal function my formula would be 150
46:37 - pixels * 3 / 2 this Cal function would
46:42 - evaluate to
46:43 - 225 pixels or 1.5 times the height of
46:48 - the div I'll go ahead and put my height
46:52 - variable here for a little more
46:54 - flexibility let's give this a quick
46:57 - background just so we can see the
46:59 - rectangle there it is the beginnings of
47:01 - our flag with the proper proportions let
47:05 - me give this a little bit of space by
47:07 - adding some margin then I will make sure
47:10 - that my flag container is a flex
47:12 - container if we look at the HTML you'll
47:15 - see that each one of my three stripes
47:18 - has a class called stripe which I can
47:20 - use to style all three stripes so I will
47:23 - select that class and to it I will add a
47:27 - Flex grow of one and that is essentially
47:30 - going to tell each one of my stripe
47:32 - Dives to take up one portion of the
47:36 - available space of the container so if I
47:38 - were to give each stripe a temporary
47:41 - background and some margin then you can
47:44 - see that I do in fact have three
47:47 - separate Columns of equal width taking
47:49 - up the full space of the container so
47:51 - the final thing I'll need to do is make
47:53 - sure that all of my columns have the
47:56 - correct colors so I'll delete my
47:58 - temporary backgrounds and temporary
48:00 - margin and I will select each stripe
48:03 - color and set its background to the
48:07 - correct color variable so I have red
48:11 - blue and white that is my French flag
48:15 - complete let me show you how I would do
48:17 - this in Grid I'll comment out my Flex
48:20 - grow as well as my Flex container and I
48:24 - will instead set the display of my
48:27 - container div to grid this immediately
48:30 - gives me three horizontal stripes that's
48:33 - because grid without any other options
48:35 - will automatically make me a one column
48:38 - grid so we have one column here that
48:40 - stretches the entire width of the
48:42 - container and each one of my divs within
48:45 - that grid are stacked one on top of the
48:47 - other what I'll need to do is Define
48:50 - some columns so I'm going to tell grid I
48:53 - want three equalized columns and I can
48:56 - do that with grid template columns I can
49:00 - say that I want each of the divs nested
49:04 - with in my grid container I want each of
49:07 - these to be a column that takes up an
49:10 - equal amount of space the way that I
49:12 - would Express that is to say I want
49:15 - three columns that all take up one
49:18 - fraction or one portion of the available
49:21 - space the other way I could do this is
49:24 - by using the repeat function
49:27 - and I would say I want three three times
49:30 - one fraction that would give us the same
49:33 - result I hope you had fun with this
49:34 - Challenge and I'll see you in the next
49:39 - one hello and welcome to the flag of
49:42 - Germany challenge where you will create
49:44 - a pure CSS German flag it's three equal
49:48 - Stripes of black red and yellow with an
49:52 - aspect ratio of 3 to 5 the aspect ratio
49:56 - represents the flag's height in relation
49:58 - to its width so to calculate what a
50:01 - flag's width should be in CSS you're
50:03 - going to take the flag's height
50:05 - multiplied by the ratio height divided
50:08 - by the ratio width here's an example if
50:11 - I have a flag with a ratio of 5 to 4 and
50:14 - I start with a flag height of 200 pixels
50:18 - then I would calculate the width like
50:20 - this 200 pixels * 4 / 5 or 4 fths and
50:25 - that will give me a German flag with the
50:28 - proper proportions I've already set up
50:30 - the HTML that you'll need and if we look
50:33 - in the CSS I have included as variables
50:37 - the correct colors of the German flag go
50:40 - ahead and get started and I'll see you
50:44 - soon hello again this is a solution to
50:47 - the flag of Germany CSS challenge I hope
50:50 - it went well let's get started I'm going
50:52 - to show you two solutions one in flexbox
50:56 - and one one in Grid because I thought
50:58 - the grid solution was pretty magical
51:01 - I'll start by targeting my flag
51:03 - container div I'll set a height using my
51:06 - flag height variable and my width using
51:10 - the provided formula so I'll use my flag
51:13 - height me not forget the dashes I use my
51:17 - flag height variable and then I want to
51:19 - multiply that by 5 / 3 now let me set a
51:24 - quick background so we can see our flag
51:27 - there it is I'm also going to give it
51:29 - some breathing room with some margin
51:31 - here we go we have the proportions of
51:33 - the German flag now we need to get some
51:35 - colors going so I'll do a black stripe a
51:39 - red stripe and a yellow stripe we can
51:42 - see nothing yet because our black red
51:45 - and yellow rows have no height but and
51:48 - here's the magical part I'll come up to
51:50 - my container div and I will set the
51:52 - display to grid and like magic a German
51:55 - flag when I set grid I automatically get
51:58 - a one column grid and so it will take
52:01 - each one of my divs and stack them one
52:04 - on top of the other very fun oneline
52:06 - solution if I were to solve this using
52:09 - flexbox which is also a great solution
52:12 - I'll set the display to flex and then I
52:15 - will Target every stripe and set Flex
52:18 - grow to one and this will tell each of
52:21 - my divs to take up an equal amount of
52:23 - the space provided but it does that in
52:25 - three column colums so I'll need to tell
52:28 - flexbox that I want to switch the
52:30 - direction of my Flex elements so I can
52:33 - come up here and say Flex Direction
52:36 - column giving me three horizontal
52:39 - stripes and a pure CSS German flag
52:43 - fabulous work I'll see you in the next
52:47 - one hello scrimba students and welcome
52:50 - to the flag of Madagascar challenge your
52:53 - task will be to build a pure CSS version
52:56 - of the bright and beautiful flag of
52:58 - Madagascar the flag has an aspect ratio
53:01 - of 2 to three and all of its three
53:04 - stripes are of equal area meaning they
53:06 - are rectangles of the exact same height
53:10 - and width it may look like the white
53:12 - stripe is a little bit thinner but that
53:14 - is an optical illusion it is as thick as
53:18 - the horizontal stripes are high to make
53:21 - sure that your Madagascar flag has the
53:23 - proper proportions be sure to look at
53:26 - the following two slides for how you can
53:28 - calculate with using the aspect ratio I
53:31 - have the formula here and an example
53:34 - here so take a look if you need to Let's
53:36 - also take a look at the index.css I've
53:39 - provided all the colors that you need as
53:41 - CSS variables as well as a variable for
53:44 - the flag height be sure to familiarize
53:47 - yourself with the HTML before you get
53:48 - started have fun and I'll see you in the
53:54 - solution welcome to the flag of mad
53:56 - Madagascar solution let's build a
53:59 - Madagascar flag let's start by taking a
54:01 - look at the flag and kind of making a
54:03 - plan I know that all of my rectangles
54:06 - have equal area but I still need to
54:08 - figure out what their heights and widths
54:10 - should be I know that my flag height is
54:13 - going to be 150 pixels and I also know
54:16 - that these two rectangles take up equal
54:19 - space I know the height of my flag then
54:21 - I know the height of both of these
54:24 - rectangles because they each take up 50%
54:27 - of the height of the flag so I've
54:29 - decided to start my flag with a height
54:31 - of 150 pixels so I know that each of
54:35 - these rectangles has a height of 75
54:37 - pixels and because I know that all of
54:40 - these rectangles are the same size that
54:42 - means that this white rectangle will
54:45 - have a width of 75 pixels and it also
54:48 - takes up the entire height of the flag
54:51 - so I know that the height of the white
54:53 - stripe is 150 pixels and the width of
54:57 - both the green stripe and the red stripe
54:59 - is 150 pixels all three stripes will be
55:02 - 75 by 150 pixels so let me start by
55:07 - creating my flag I'll select my flag div
55:11 - and assign it a height using my variable
55:15 - then I'll calculate the flag's width by
55:18 - using the height times essentially the
55:21 - aspect ratio backwards so we have an
55:23 - aspect ratio of 2 to 3 which means I
55:26 - want to multiply the height by 3 / 2
55:30 - another way to read this is the height
55:32 - times 3 seconds which simplifies to 1
55:36 - and A2 or 1.5 so in other words the
55:39 - width is going to be 1.5 * the size of
55:43 - the height so this will calculate to 150
55:47 - pixels * 1.5 which is 225 pixels let's
55:52 - add a quick background so we can see
55:54 - this and we'll give this a little space
55:58 - and add a bit of margin just so it's not
56:00 - stuck in the corner now I'll quickly add
56:03 - my stripe background colors now that our
56:05 - background colors are set we can set
56:07 - some height and width on these Stripes
56:09 - so that we can see them before I do that
56:11 - I'm going to come up here and I'm going
56:12 - to set the display of the container div
56:16 - to flex as we discussed earlier I'm
56:19 - starting with a flag height of 150
56:22 - pixels and I know that each rectangle
56:25 - takes up exact ly 50% of those 150
56:29 - pixels so each one is 75 pixels High
56:33 - which means that the white stripe is 75
56:36 - pixels wide because remember all of
56:39 - these rectangles are the exact same size
56:41 - the white rectangle is the height of the
56:44 - entire flag which we know is 150 pixels
56:47 - so each rectangle is 75 by 150 but no
56:51 - matter how big or small this flag gets
56:55 - we know that we want the the red and
56:56 - green stripe to take up 50% of the total
57:00 - height of the flag so I'm going to go
57:02 - ahead and set the height of each to
57:05 - 50% I know the width of the red and
57:08 - green rectangles is the same as the
57:10 - height of the white rectangle which is
57:12 - the height of the flag 150 pixels so to
57:16 - each stripe I will set a width of flag
57:20 - height now this might look like we what
57:23 - we need backwards but this is actually
57:25 - the red and green divs taking up the
57:27 - space that we've told them to take with
57:29 - some white space over here so if I were
57:31 - to change this background to Blue you'll
57:33 - see that this is not in fact the white
57:35 - stripe it is the background of our
57:37 - container div so let me get rid of this
57:39 - background completely and to complete
57:41 - this flag we'll need to set a width for
57:44 - the white stripe we know from the red
57:46 - and green stripes that the width of the
57:48 - white stripe should be half of the
57:50 - flag's height the white stripe is as
57:53 - wide as these rectangles are tall so we
57:56 - can calculate the width as the flag
58:00 - height divided by two and actually this
58:03 - is probably a better measurement for the
58:06 - height of the red and green stripes so
58:09 - let's do that you can calculate the
58:11 - height of the red stripe as flag height
58:14 - divided by two and we'll do the same for
58:18 - the green stripe and the nice thing
58:20 - about this is is say we wanted a flag
58:23 - that was 300 pixels tall it'll
58:25 - automatically adjust all of the
58:27 - proportions and Heights and widths
58:29 - making it really easy to scale this flag
58:32 - that is the flag of Madagascar challenge
58:34 - done I will see you in the next
58:40 - challenge hello there this is the Swiss
58:43 - flag CSS challenge the Swiss flag is one
58:46 - of the only flags in the world that is
58:48 - square meaning it has an aspect ratio of
58:51 - 1: one but the fun part can be figuring
58:54 - out how large the cross should be
58:57 - warning spoilers ahead so if you want to
59:00 - look this up yourself go ahead and get
59:01 - started on the challenge now here are
59:04 - the proportions of the cross on the
59:06 - Swiss flag if you think about the cross
59:09 - as two rectangles sitting on top of one
59:11 - another the height of this rectangle
59:13 - would be 316 of the total height of the
59:16 - flag and 5/8 of the total width of the
59:19 - flag how do I arrive at these numbers
59:22 - well if we look at this diagram the
59:24 - Swiss flag is split up into 32 parts and
59:28 - each of the 32 Parts follows the 67
59:31 - pattern where in this Square takes up
59:33 - six parts this one takes up seven Parts
59:36 - this one takes up six parts and so on so
59:38 - we can see if we're looking at the
59:40 - height of this rectangle that it takes
59:42 - up 630 seconds of the total height of
59:45 - the flag 632s can be simplified as
59:50 - 316 so to find the height of this
59:52 - rectangle you would need to find 316 of
59:55 - the total height of the flag flag
59:56 - similarly with the width we can see that
59:59 - this Square this square and this Square
60:01 - are taking up seven six and seven
60:04 - portions of the total width of the flag
60:06 - so they take up together 20 portions or
60:09 - 20 302s which can be simplified to
60:13 - 5/8 if you find this confusing if your
60:16 - eyes are crossing no worries feel free
60:18 - to eyeball how big the cross should be
60:20 - the really important part is that you're
60:22 - practicing CSS positioning and things
60:24 - like that best of luck and I will see
60:26 - you in the solution
60:31 - scrim hello again this is the solution
60:34 - to the Swiss flag CSS challenge here's
60:36 - the plan I'm going to create a red
60:38 - square and inside the Red Square I'm
60:41 - going to create two horizontal
60:42 - rectangles of equal height and width I
60:45 - am then going to rotate one of the
60:47 - rectangles and absolutely position it so
60:50 - that it is directly on top of the other
60:52 - rectangle I'll get started by creating a
60:55 - variable for the height and width since
60:58 - they are square and will be the same
61:01 - I'll create a variable called flag
61:02 - height width and I'm going to make my
61:05 - Swiss flag 200 pixels I'll select my
61:08 - flag container and give it a height and
61:11 - width my height will be my flag height
61:14 - width variable as well the width I'll
61:18 - then give it a red background using my
61:20 - red color variable and finally I'll give
61:23 - it a little margin just so it's not not
61:26 - stuck up in the corner while I'm up here
61:28 - before I create my crosses I'm going to
61:30 - make sure to make my flag container a
61:33 - flex container now I will select my
61:36 - first cross which will be the cross that
61:39 - I plan to keep horizontal so for the
61:42 - height let's look at our chart here we
61:45 - said that this horizontal rectangle has
61:48 - a height of 630 seconds or 316 of the
61:52 - total height of the flag so this is what
61:55 - my calculation will be I'll create a CSS
61:58 - calc function and then I want my flag
62:01 - height which is 200 pixels times 316 and
62:05 - that will give me a height value that is
62:07 - 316 of 200 I'm going to replace this
62:12 - hardcoded value with my variable so that
62:15 - it can be easily changed later I'll then
62:18 - go for a width in which I will use the
62:21 - same
62:22 - calculation but I want the width to be
62:27 - 767 or 20 302s of the total width of the
62:32 - flag so that would be my flag width
62:36 - times 5/8 now what I should not forget
62:40 - to do is around every variable I need
62:44 - this variable function now I'll add a
62:47 - white background and we should be able
62:49 - to see the first part of a cross here it
62:51 - is up in the corner and I want to center
62:54 - it so in my flag container where I have
62:56 - set a display of flex I want to justify
63:00 - my content Center and I also want to
63:04 - align items Center there's the first
63:07 - half of our cross now let's do cross
63:10 - number two for the height of cross
63:12 - number two I'm going to use the width
63:15 - calculation the width I will use the
63:17 - height calculation and this will
63:20 - effectively rotate it 90° so that it is
63:23 - vertical instead of horizontal I give
63:26 - this a different background color and
63:28 - better see what's going on here so I
63:30 - have the horizontal part of my cross the
63:33 - vertical part of my cross next to each
63:35 - other because I need to remove my
63:38 - vertical cross from the flow of the
63:40 - document let me make this white too and
63:43 - then I will give that an absolute
63:46 - position I'll make sure to make its
63:49 - parent div relatively positioned there I
63:53 - have a completed Swiss flag the other
63:55 - thing that I could do here is I could
63:58 - Target both Crosses by using their
64:01 - common class name and I could give them
64:05 - the same height and width so for now
64:07 - let's comment this out and I'll copy and
64:10 - paste all of this stuff into the common
64:14 - class name and now I again have two
64:16 - parts of a cross right next to each
64:18 - other but I can Target the second cross
64:21 - and use the transform function to rotate
64:26 - the second cross 90° and if I give this
64:29 - a position of absolute and there is
64:32 - another way that I could solve the
64:34 - problem no matter how you solve the
64:36 - problem I hope you had fun I think this
64:37 - is a really good positioning exercise
64:39 - creating country flags certainly taught
64:41 - me a lot about CSS so I hope that you
64:44 - continue and I'll see you again
64:50 - soon for this challenge you will build a
64:53 - CSS version of the beautiful minimalist
64:57 - Japanese flag the Japanese flag has an
65:00 - aspect ratio of 2:3 and the circle is 3
65:04 - FS the size of the flag to calculate
65:07 - what the height and width of your flag
65:09 - should be based on its aspect ratio
65:12 - you'll want to use this formula height
65:14 - times ratio height divided by ratio
65:17 - width as an example if we had a flag
65:20 - with the ratio of 54 and we started with
65:23 - a flag height of 200 pixels then we
65:25 - would calculate the width of the flag
65:28 - thusly 200 pixels * 4 / 5 or 45ths in
65:34 - the index.css I have provided the colors
65:37 - of the Japanese flag for you as well as
65:40 - a starting height and feel free to
65:43 - adjust this variable to whatever you
65:45 - want to depending on how big you want to
65:47 - make your flag as long as the
65:49 - proportions of the flag are correct it
65:51 - does not matter best of luck and I will
65:53 - see you in the solution
65:58 - welcome this is the solution to the
66:00 - Japanese flag CSS challenge I hope it
66:04 - went well let me show you my solution
66:06 - I'm going to start by giving my flag a
66:08 - height and width I'll select my flag
66:11 - container div and I'll set the height
66:13 - using my flag height variable and for
66:16 - the width I will follow the aspect ratio
66:19 - Formula so I want to take my height of
66:22 - 200 pixels and if the Japanese flag has
66:25 - an aspect ratio of 2: 3 that means I
66:28 - would want 200 pixels * 3 / 2 I'll use
66:33 - my flag height variable again and I want
66:38 - to make sure to wrap this in a calc
66:41 - function so my height times 3 / 2
66:46 - another way to think about this is 3
66:48 - seconds is 1.5 so I want my width to be
66:51 - 1.5 times bigger than my height 200 time
66:57 - 1.5 is 300 so this is the same as saying
67:00 - I want my height to be 200 pixels and my
67:03 - width to be 300 pixels go ahead and
67:06 - change that back let's set the white
67:08 - background so we can see it there's the
67:11 - beginning of my Japanese flag I'll
67:14 - select the outermost div and give it a
67:16 - little bit of margin now let's work on
67:20 - the circle as I said on the slide the
67:23 - circle is 3 fifths the size of the flag
67:26 - so to make a circle I'm going to make a
67:29 - square with the same height and width
67:32 - and then give it a border radius of
67:35 - 50% to calculate the height I'm going to
67:38 - use my flag
67:40 - height and multiply that by 3 fifths
67:43 - another way to think about this is as a
67:46 - decimal 3 fifths is 6 or another words
67:51 - saying I want my height to be 60% of the
67:54 - overall flat height and I want the same
67:58 - for my width because we're making a
68:00 - square add a background we have red
68:03 - square now let's make it a circle by
68:05 - adding some border radius and the final
68:08 - thing we'll need to do is Center it so
68:10 - I'll go up to my containing div set a
68:13 - display of flex so that I can then
68:16 - justify Center and Al line Center and
68:21 - that gives us a beautiful Japanese flag
68:24 - that we can make
68:25 - as big or as small as we
68:31 - want welcome to the flag of Sweden CSS
68:34 - challenge the Swedish flag is blue and
68:37 - yellow and has an aspect ratio of 5 to8
68:41 - on these slides you'll find a reminder
68:43 - of how to calculate Dimensions from the
68:45 - aspect ratio so if the aspect ratio is
68:49 - 58s the first number represents the
68:51 - width and the second number represents
68:53 - the height so to calculate the DI
68:55 - Dimensions you will switch that and
68:57 - divide the aspect ratio height by the
68:59 - width before multiplying that by the
69:02 - total height of the flag here's an
69:04 - example if you have a flag with a ratio
69:06 - of 5 to 4 and you start with a flag
69:09 - height of 200 pixels then you would
69:11 - calculate your width thusly by dividing
69:14 - the height portion of the aspect ratio
69:17 - by the width portion this is another way
69:19 - of saying that the width should be 4
69:22 - fths or 80% of the flag height using
69:26 - this as an example you'd end up with a
69:28 - rectangle that was 200 by 160 pixels so
69:33 - you can use this to figure out the
69:35 - proper proportions of your Swedish flag
69:37 - and the other problem that you'll have
69:39 - to deal with is how to properly place
69:41 - the stripes here's a chart that will
69:44 - hopefully help you out if we think of
69:46 - the flag as being 16 Parts Long and 10
69:50 - parts high and each stripe as two
69:53 - rectangles one on top of the other then
69:55 - let's say we were trying to figure out
69:57 - what the height of this stripe should be
70:00 - we can see that it takes up two portions
70:03 - of the 10 parts in other words it takes
70:06 - up 2/10 of the height of the flag and
70:09 - when we're thinking about the placement
70:11 - of this vertical stripe we can see that
70:13 - of the 16 parts that comprise the width
70:16 - of this flag the stripe is five parts
70:19 - away from the edge of the flag figuring
70:22 - out the math can be a fun little
70:23 - challenge but if you're not into to it
70:25 - feel free to eyeball as best you can
70:28 - where the stripes should go and you can
70:30 - look at my solution to see how I've done
70:32 - it happy cating and I'll see you in the
70:38 - solution welcome this is the solution to
70:41 - the Swedish flag CSS challenge here's
70:43 - the general plan I'm going to create a
70:45 - blue field inside of which are two
70:48 - yellow stripes of similar Dimensions I
70:51 - will then rotate one of the stripes 90°
70:54 - and absolutely position position it
70:55 - taking it out of the flow of the
70:57 - document and allowing it to sit on top
70:59 - of the other rectangle I will then use
71:02 - absolute positioning and a bit of math
71:05 - to figure out where the vertical stripe
71:07 - should be placed in relation to the
71:09 - width of the flag so let's start by
71:12 - creating the blue background with its
71:14 - proper proportions I'll select the flag
71:17 - container and I'll start with a height
71:20 - of 150 pixels or I'll use my flag height
71:24 - variable I'll then calculate the width
71:27 - using my formula so if I have an aspect
71:29 - ratio of 5/8 then I will want to take my
71:33 - height multiplied by 8 / 5 this is
71:39 - another way of saying that I want a flag
71:42 - that has a width that is 1.6 times the
71:46 - height of the flag 1.6 times because
71:49 - that is the result you get if you divide
71:51 - 8 by five so I'll use my calc function
71:55 - and inside I will get the height of my
71:58 - Flag by using my height variable and I
72:01 - will
72:02 - multiply by 8 fths or 8 divided 5 now
72:07 - we'll add a background color so we can
72:09 - see what we've created we use my blue
72:11 - variable and here's the beginnings of
72:13 - our Swedish flag I know that I'm going
72:15 - to need two yellow stripes and that
72:18 - because I'm going to rotate one both of
72:21 - the stripes can have the same height so
72:23 - let's say I start by making my
72:25 - horizontal stripe I want to figure out
72:27 - what its height is and then I'll rotate
72:29 - it so looking at our diagram this stripe
72:33 - has a height of 210 of the total height
72:37 - of the flag 2/10 can be simplified to
72:40 - 1/5 so I will select both of my stripes
72:45 - and just as a reminder I have this
72:47 - stripe class on both of my stripes and
72:50 - that's what I'm selecting and to the
72:52 - stripes I will assign a background
72:56 - using my yellow variable and to
72:58 - calculate my height I'll use the Cal
73:01 - function then we want to calculate 1 of
73:05 - the height so my flag height times 1
73:09 - this might look like a pretty thick
73:10 - rectangle but that's because it
73:12 - represents both Stripes let me add some
73:15 - margin bottom so I can show you that
73:18 - they are in fact two stripes I'll get
73:20 - rid of that and now I want to position
73:23 - my first stripe which as I can tell
73:25 - because it has four parts on top and
73:27 - four parts on the bottom is in the exact
73:30 - middle of the flag so I'm going to
73:33 - select my horizontal stripe which is
73:36 - called stripe yellow and I am going to
73:39 - align self Center in order for this to
73:43 - work I need to make my flag container a
73:46 - flex container so I'll come up here and
73:48 - say display flex and I'll also need to
73:51 - give my stripe a width of 100% and there
73:54 - it is my other stripe has disappeared
73:57 - because I have put display Flex on my
73:59 - container and I have yet to assign the
74:02 - other stripe a height and a width so
74:04 - before I continue let me get this flag
74:06 - out of the corner by going to my
74:09 - container and adding a bit of margin
74:11 - there we go now I'll make my final
74:14 - stripe which is called stripe yellow 2
74:17 - first I want to set the width of my
74:20 - stripe so if we think about this stripe
74:22 - rotated 90° then the width would be how
74:26 - long we want the stripe to be if it's
74:28 - going up and down and we want it to take
74:30 - the entire length of the height of the
74:32 - flag if I'm going to add a width and I'm
74:35 - want to say that I want my stripe to be
74:38 - the same width as the flag is high I'll
74:41 - use my flag height variable and now
74:43 - they're smushed together and wrapping
74:45 - because I need to take my yellow stripe
74:47 - out of the flow of the document so I
74:49 - will set a position of absolute and I
74:52 - will come up to my parent container and
74:55 - set a position of relative now I have a
74:58 - stripe of the correct height and width I
75:02 - just need it to be in the right location
75:05 - so the first thing I will do is I will
75:07 - use the transform property to rotate my
75:10 - rectangle
75:11 - 90° now it's pointing in the right
75:14 - direction we just need to use absolute
75:17 - positioning to put it in the right place
75:19 - so if we look at our chart again we want
75:22 - the stripe to be four parts from the top
75:25 - of the flag and
75:27 - 516 from the left of the flag so what
75:31 - I'll do is I will set top position and I
75:35 - will calculate flag height times
75:39 - 4/10 to make sure that the stripe is
75:41 - properly positioned on the left side I'm
75:44 - going to create a variable for the flag
75:46 - width so I'll grab this calculation here
75:50 - then I'll grab my variable let's go
75:52 - ahead and put it here too just to be
75:54 - cons consistant and then to calculate my
75:57 - left position I'm going to use the flag
76:01 - width times
76:04 - 516 this is actually the opposite of
76:07 - what we want which probably has to do
76:09 - with the fact that this stripe is
76:11 - rotated so I'm going to say that we want
76:14 - calculation to be from the right and
76:17 - there we go a Swedish flag with the
76:19 - proper proportions and the stripes most
76:21 - definitely in the right place this is
76:24 - one of the trickier ones so if you
76:25 - completed it super excellent work I will
76:28 - see you
76:31 - later this country flag CSS challenge is
76:35 - to create the flag of Niger niger's flag
76:38 - has an aspect ratio of six to 7 which is
76:42 - pretty unusual and means that the flag
76:45 - is almost Square it's about 1 one six
76:49 - times as high as it is long all of the
76:52 - stripes have equal area meaning they are
76:55 - all the same size and the circle in the
76:58 - center is about
77:00 - 85% the size of the height of the white
77:04 - stripe you can calculate the flag's
77:07 - proportions by using the following
77:09 - formula it'll start with the height and
77:11 - you'll multiply that by the ratio height
77:14 - divided by the ratio width here's an
77:17 - example if we had a flag with the ratio
77:19 - of 5 to 4 and we started with a height
77:22 - of 200 pixels we would calculate the
77:25 - width by multiplying 200 pixels * 4 / 5
77:31 - you can also think about 4 FS as a
77:34 - fraction so we're calculating a width
77:37 - that is 4 fths of 200 pixels or you can
77:41 - think about it as a decimal or
77:43 - percentage 4 fths expressed in a decimal
77:46 - is 80%
77:48 - or8 which would give us a width of 160
77:51 - pixels so our flag would be 200 by by
77:55 - 160 pixels I've started you off with all
77:58 - of the HTML you should need to construct
78:00 - the flag and I've also provided the
78:02 - colors of the flag as CSS variables go
78:06 - ahead and give this a shot and I'll see
78:07 - you
78:11 - soon hello again let's build a Nigerian
78:14 - flag using only CSS My overall strategy
78:18 - will be to get these three stripes going
78:21 - then if we have a look at the HTML the
78:23 - circle is already inside of the white
78:26 - stripe so I'll use the Cal function to
78:28 - make sure that the circle has the proper
78:31 - height and width and it will be a square
78:34 - with a border radius of 50% and then I
78:37 - will Center it within the white stripe
78:40 - so let's get started in my index.css you
78:44 - can see that I started us out with a
78:46 - flag height of 200 pixels so I'm going
78:50 - to go ahead and I'll select my flag
78:54 - container div and let's go ahead and
78:57 - start with a background so we can see
78:59 - what we're doing just a temporary color
79:02 - and then I will give my flag a height
79:04 - and width for the height I'll use my
79:06 - flag height variable and for the width
79:09 - I'll use the formula in the slides so if
79:13 - our aspect ratio is 6 to 7 then we want
79:17 - the height of our div multiply by 7 / 6
79:23 - and that will give us a WI width that is
79:25 - about
79:26 - 1.16 times the size of the height using
79:30 - my CSS calc function grab the flag
79:33 - height times 7 / 6 this is the same as
79:38 - say we want a width that is 1.1
79:43 - 16666 times the height of the flag let
79:47 - me also give the flag a little
79:50 - space next we'll want to select our
79:53 - three stripes and give give them their
79:55 - proper colors so we have these three
79:58 - stripe divs orange white and green I'll
80:02 - assign the orange background to the
80:03 - orange class and now I want three equal
80:06 - siiz Stripes so I'll go to my container
80:09 - div and I will set a display of grid
80:13 - what that does is create a one column
80:15 - grid of three equal sized elements
80:18 - stacked on top of each other the last
80:21 - step is to add the circle so at the
80:23 - bottom of my file I will select my
80:25 - circle div and give it its orange
80:28 - background now what about setting the
80:30 - height and width as I specified in the
80:33 - slides the circle is about 85% of the
80:36 - height of the stripe but what is the
80:39 - height of the stripe well the stripe is
80:42 - 13 the size of the total flag height
80:45 - right because all of these stripes are
80:47 - the same size in other words that would
80:50 - be the flag height and I'll use my flag
80:53 - height variable divide div by three now
80:56 - that I have the height of one stripe I
80:58 - know that my circle should be
81:01 - 85% of that height so I'm going to
81:04 - multiply by
81:06 - 85 because I'm trying to create a square
81:10 - the width will be the exact same
81:12 - calculation now I'll make my shape round
81:15 - by assigning a border radius of 50% and
81:19 - that gives me the properly sized Circle
81:22 - but it is taking up space so I need to
81:24 - take it out of the flow of the document
81:27 - so that it can sit inside of the white
81:29 - stripe without stretching it out so I
81:33 - want to give it a position of absolute I
81:37 - want to make sure to set its parent
81:39 - container the white stripe to have a
81:42 - position of relative the last thing to
81:45 - do is Center the circle inside the white
81:47 - stripe which I will do by making it a
81:51 - flex container just to find the content
81:54 - to Center and also aligning items to
81:57 - Center here is our lovely Nigerian flag
82:01 - this can be a tricky one but it's a
82:04 - great use of both grid and flex box as
82:07 - well as learning about aspect ratio and
82:10 - proportions so I hope you had a good
82:12 - time I will see you in the next one
82:15 - great work on this
82:19 - challenge this is a fun real world
82:21 - challenge that is based on a simplified
82:23 - version of your profile which you would
82:25 - find on your GitHub page so if you were
82:27 - to go to GitHub right now and look at
82:29 - your profile on the left side you would
82:31 - see something like this there's a
82:33 - profile image your name your GitHub
82:35 - username a little description if you've
82:38 - added one and a button to edit your
82:40 - profile information on the right side
82:43 - here is an example of what the button
82:44 - hover State should look like for this
82:46 - GitHub profile challenge you should try
82:48 - to match the example as closely as you
82:50 - can be sure to include the button hover
82:52 - State and for responsiveness we're going
82:53 - to want to make sure that the profile
82:55 - image is fully responsive meaning that
82:57 - it grows and shrinks as the browser size
83:00 - changes and finally the entire profile
83:02 - should grow no longer than 400 pixels
83:05 - and Shrink no smaller than 250 pixels if
83:07 - we take another look at the example by
83:09 - profile I'm referring to this entire
83:11 - area which has a slightly lighter
83:13 - background than the browser background
83:15 - which is black this is a challenge that
83:17 - might seem pretty straightforward when
83:19 - you first look at it but there are some
83:21 - details that I would like to make sure
83:23 - that you notice notice that there is a
83:26 - subtle border around the profile image
83:28 - if we look at the username here you
83:30 - might notice that the font weight is a
83:32 - little different and that it's a
83:33 - slightly different color you may also
83:36 - notice that there is a subtle border
83:38 - around the button and as you're building
83:40 - this out make sure you're paying
83:41 - attention to the padding and the spacing
83:43 - between the different elements and
83:45 - things like that let's have a look at
83:47 - the starter files I'm starting you out
83:49 - with all of the colors that you should
83:51 - need as well as a Google font which is
83:53 - not exactly the font that they use on
83:55 - GitHub but it is one of their fallback
83:57 - fonts if you were to go and inspect your
84:00 - profile on GitHub which I encourage you
84:02 - to do you'll see that the main font that
84:04 - they use is an Apple font so we're going
84:05 - to go ahead and use the Google font for
84:08 - a little bit of consistency taking a
84:10 - look at the HTML the entire profile is
84:13 - within a container all of the profile
84:15 - content the image and all of the details
84:17 - are in another parent container and then
84:19 - I've kind of split the profile into two
84:21 - halves the image and the rest of the
84:24 - details including the name the username
84:26 - the information and the button
84:28 - definitely feel free to change around
84:29 - this HTML if you want to do it a
84:31 - different way you can add and remove or
84:33 - change classes also feel free to change
84:36 - the information and personalize it to
84:38 - make it your own the most important part
84:40 - of this challenge is to match the layout
84:42 - as closely as you can other than that
84:44 - feel free to go wild but do keep in mind
84:46 - that the HTML that I've included here is
84:48 - what I'm going to use to show you a
84:50 - solution go ahead and get started I'm
84:52 - sure you'll do great have fun and I'll
84:54 - see you when you're
84:58 - finished hello and welcome back to the
85:00 - GitHub profile layout challenge I hope
85:03 - that it went really well for you as I
85:05 - suggested in the last scrim there are a
85:07 - lot of details here that might seem
85:09 - pretty straightforward at first but can
85:11 - be a little fiddly so if you were able
85:13 - to successfully complete this challenge
85:15 - really well done let me show you how I
85:17 - approached it I want to start by styling
85:20 - my outer containers and constraining
85:22 - this image a bit so it's not so big and
85:24 - over overwhelming I'll start by
85:25 - selecting my parent most div which is
85:27 - the profile container going to set my
85:30 - container's width to be 80% One of the
85:33 - responsiveness requirements is that the
85:35 - profile grows no larger than 400 pixels
85:38 - and shrinks no smaller than 250 pixels
85:41 - so I'll set a minwidth of 250 pixels and
85:45 - a Max width of 400 pixels this doesn't
85:49 - seem to have much of an effect yet
85:51 - because my image is so huge I'll select
85:54 - my image by first selecting its parent
85:57 - div is profile content then I'll select
86:00 - the image and I'm going to set a Max
86:03 - width of 100% this will prevent my image
86:06 - from growing larger than its container
86:08 - and will also allow it to shrink and
86:10 - grow with the browser I want to Center
86:13 - my profile so I am going to add some
86:16 - margin on the top and bottom and then
86:19 - also Center using margin Auto on the
86:21 - left and right the next thing I'll do is
86:23 - add my Pro profile background color to
86:25 - make it a little bit easier to see I'll
86:28 - use a CSS variable to do that now that
86:31 - I've added that background color you can
86:32 - see really clearly that all of my
86:34 - content is butting up against the parent
86:36 - container and we need to give it a
86:38 - little space we look at the example we
86:40 - have a nice even amount of space around
86:43 - all of the content I want to do this
86:45 - without affecting the size of my overall
86:47 - parent container so instead I'll add
86:50 - padding to the div that holds all of the
86:53 - content come coming back to my CSS file
86:55 - I'll select profile content and we'll
86:58 - add 1 M of padding on the top and bottom
87:01 - and 2 m on the left and right this is
87:03 - starting to shape up pretty nicely let's
87:05 - make the image round and add that border
87:08 - to my image selector I'm going to add a
87:11 - border radius of 50% to make that round
87:15 - and then I will add a two pixel solid
87:19 - border I'll come up here and grab my
87:21 - border variable there's my image with my
87:24 - border that's looking pretty good what
87:26 - we have left is some work surrounding
87:28 - the typography and styling the button
87:31 - let's style the button and then we'll
87:32 - tweak the typography I'll select the
87:35 - button by first selecting its parent
87:38 - container in the example the button
87:40 - stretches across the entire width of the
87:43 - content so I will set a width of 100%
87:46 - I'll also add the background color and
87:48 - the font color I'll need to overwrite
87:50 - this default border and add some border
87:52 - radius I'll add a one pixel solid border
87:56 - with my border color
87:58 - variable a small border
88:00 - radius and a bit of padding just do a
88:03 - small amount of padding on the top and
88:05 - bottom that's looking good now I'll add
88:07 - a hover State we want to change the
88:09 - Border color and the background color go
88:12 - on Hover I will change the color of my
88:14 - background to my background hover color
88:18 - then we'll change the Border color as
88:20 - well test this out that is the hover
88:23 - State we're looking looking for we have
88:24 - a nice looking button now let's work on
88:27 - the profile details what I notice
88:29 - immediately is the name and the username
88:31 - are fairly close together and the
88:33 - username is a little bit thinner and a
88:35 - different color than the name above it
88:37 - currently they're pretty far apart and
88:39 - that is because they are heading tags
88:42 - which come with a lot of default margin
88:44 - I'll start by selecting those headings
88:46 - and zeroing out that margin I'm going to
88:49 - add that here because I like to keep my
88:51 - CSS in order from top to bottom so using
88:54 - my profile details selector again I want
88:57 - to select the heading two and the
89:00 - heading three and I'll just reset the
89:02 - margin to zero this moves the two
89:04 - headings closer together but as you can
89:06 - see we've introduced a new problem the
89:09 - image and the heading two are smushed
89:11 - together I'll address that issue by
89:12 - adding a little padding to the profile
89:14 - details div which again is the div that
89:17 - encompasses everything in the bottom
89:19 - half of the profile selecting the whole
89:22 - profile details div I'll add an M of
89:25 - padding to the top and bottom I'll
89:27 - select that heading three again I'll
89:30 - want to reduce the font size as well as
89:33 - the color and font weight we have quite
89:36 - a big thing left we need to make sure
89:37 - that we're using the right font family
89:39 - I'm going to go ahead and add the font
89:41 - family to the body so I'll come up here
89:44 - we'll use the font main variable now
89:47 - that we've done that we need to make
89:48 - sure that the button inherits this font
89:51 - family you may remember that buttons are
89:53 - a little unique in that they will
89:55 - inherit whatever the default browser
89:57 - font is unless you specify that it
89:59 - should inherit from a parent so I'll
90:02 - come down to my button selector and
90:04 - we'll say font family inherit that we
90:08 - ensure that the button font matches the
90:10 - rest of the text and with that the
90:12 - GitHub profile layout challenge is
90:14 - complete really super great job there
90:16 - was a lot that went into this so pat
90:19 - yourself on the back for doing it and I
90:21 - will see you in the next one
90:26 - hello and welcome this is the toggle
90:28 - switch CSS challenge you will be
90:30 - building a classic toggle switch you've
90:33 - probably seen these around the internet
90:35 - or on your mobile phone they tend to
90:37 - show up on settings pages and things
90:39 - like that where there are a lot of
90:41 - options that you have the ability to
90:44 - switch on and off the requirements for
90:46 - the toggle switch are on click the
90:48 - toggle switch should move from one side
90:51 - to another the cursor should become a
90:54 - pointer so you'll notice that I have a
90:57 - pointer cursor right now if we take a
90:59 - look at the example you'll see that when
91:01 - we're hovering anywhere on this toggle
91:03 - button component you can see that
91:05 - there's a pointer finger cursor you
91:07 - should try to match the toggle Styles as
91:09 - closely as you can and as I said this is
91:12 - a pure CSS challenge so no JavaScript
91:15 - whatsoever on the next slide I have some
91:18 - hints for you so if you don't want hints
91:19 - go ahead and get started but I think
91:22 - this is a pretty tricky challenge so it
91:24 - might be good to stay around for some
91:26 - hints let's take a look at the HTML in
91:29 - the HTML we have this wrapping div and
91:32 - then we have a label and nested within
91:34 - the label is a checkbox input and a div
91:37 - called toggle switch so we're beginning
91:40 - with just this little checkbox and your
91:43 - hint is that if you hide the checkbox
91:46 - you'll still be able to style and toggle
91:48 - back and forth between the checked and
91:50 - unchecked pseudo elements and the way
91:53 - that you can still do that is by
91:54 - clicking on the checkbox label let me
91:57 - show you a quick example let's say that
92:00 - I had a label my label is check the box
92:05 - now you'll notice that I can check on
92:08 - the label text to check and uncheck the
92:10 - check box I don't necessarily have to
92:13 - check on the box and this is true for
92:16 - anything that is nested within the label
92:18 - so I could put a heading one tag here
92:22 - and clicking on that checks and unchecks
92:25 - the box so keeping this in mind as I
92:28 - said even if you hide the checkbox
92:30 - you'll still have access to the checked
92:32 - and unchecked pseudo selectors and you
92:34 - can style those my second hint is to use
92:37 - a sibling selector to style the toggle
92:40 - switch class that is the other div that
92:43 - is nested within the label you can use
92:46 - that class when the input is checked or
92:49 - unchecked so essentially we're going to
92:51 - use a checkbox to let us know what state
92:54 - our toggle switch should be in and we'll
92:57 - style accordingly and probably use some
93:00 - kind of transition to go back and forth
93:03 - between the two so let that sink in for
93:05 - a bit give it a try and I will see you
93:07 - in the
93:11 - solution welcome back to the solution of
93:14 - the toggle switch CSS challenge I hope
93:17 - it went well this one can be kind of
93:19 - tricky I'll show you my solution but
93:21 - first let's talk overall strategy
93:24 - so my plan will be to style the label to
93:27 - be this outside portion of the toggle
93:30 - switch I'm then going to use that div
93:32 - that is nested inside of it as this
93:35 - button I'm going to style it as a circle
93:38 - and use the transform property to move
93:40 - it over however many pixels to the right
93:44 - every time that it's clicked and I'll
93:45 - put a transition on it so it happens
93:47 - smoothly that is the plan let's do it
93:50 - going to my CSS file I'm going to start
93:54 - off by centering my toggle on the screen
93:56 - and styling the label so first I'll
93:59 - select toggle wrap I'm going to make
94:01 - that a flex container I'm going to give
94:04 - it a height of 100 viewport height which
94:07 - will then allow me to justify the
94:09 - content so it's centered and align items
94:14 - center now we have our itty bitty
94:17 - centered
94:18 - checkbox now I want an oval label with a
94:23 - black black border and a white
94:25 - background so I'll select my label and
94:28 - I'll start by giving it a width of 100
94:31 - pixels and a height of about 40 pixels
94:35 - and then going to give it a solid border
94:39 - using my border color variable and once
94:43 - I give this a border radius it'll look
94:45 - pretty close to what we're going for
94:47 - there we go so now let's hide the
94:50 - checkbox the checkbox has a class of
94:54 - toggle input so I'll select toggle input
94:58 - and we will display none and it
95:01 - disappears now let's create the actual
95:03 - toggle switch I'll select my toggle
95:06 - switch class I'm going to make it the
95:09 - same height as its outer container and
95:13 - because it's a square I also want to
95:14 - make it the same width I will give it a
95:17 - background color and for that I will
95:19 - come up and grab my Hoggle switch
95:22 - background variable add some border
95:24 - radius to make it a circle border radius
95:27 - 50% to my label I'm going to add a bit
95:30 - of padding to create some space between
95:33 - the switch and the container that looks
95:35 - good as I said when I was giving you a
95:37 - hint in the previous scrim even though
95:39 - we've hidden the check box because we've
95:42 - surrounded it with a label we can click
95:44 - anywhere on or inside the label to
95:46 - toggle the checked or unchecked pseudo
95:49 - class so let's select that pseudo class
95:53 - I'm going to to select toggle input
95:57 - checked and now we can use a sibling
96:00 - selector anything that is nested inside
96:03 - the label with the input is going to be
96:06 - a sibling so I can select the toggle
96:08 - switch as a sibling which I can check or
96:12 - uncheck by clicking anywhere on the
96:14 - label then select toggle switch and I
96:18 - can style it as I want so toggle switch
96:21 - is this circle right here remember and
96:23 - what I want to do is move it a certain
96:25 - number of pixels to the right just to
96:27 - show you that I'm toggling on and off
96:30 - let's first say we want to change the
96:32 - background to Blue what this will do is
96:34 - every time I click it will toggle from
96:36 - black to blue because when toggle input
96:39 - is checked I'm saying make the
96:40 - background blue and the default is
96:43 - unchecked so instead of changing the
96:46 - background I want to use the transform
96:48 - property and then I will use the
96:50 - translate X function to move the Circle
96:54 - and translate X basically means that I
96:56 - want to move something on an X AIS or
96:58 - left to right so how far do I want to
97:01 - move it to the right well I know that my
97:04 - container is 100 pixels long and my
97:07 - switch is 40 pixels wide so I'll do a
97:11 - calculation and I want that calculation
97:13 - to be 100 pixels minus 40 pixels now as
97:17 - I check and uncheck the Box the circle
97:20 - moves from right to left it's moving
97:22 - over 60 pixels going back to its default
97:25 - position moving over 60 pixels hopefully
97:29 - that makes sense however I want this
97:31 - transition to be smooth I don't want it
97:33 - to happen instantly like it is now so
97:35 - I'll go to my toggle switch I'll use a
97:38 - transition and I want the transition to
97:41 - apply to all changes and I want it to
97:43 - take half a second that gives us a nice
97:46 - smooth transition now I'll come up to my
97:49 - body and I will add a quick background
97:51 - color match the style
97:54 - we want to make sure that our toggle
97:56 - switch container has a background using
97:59 - the toggle background color and that is
98:02 - this challenge solved but I do have a
98:05 - few things that I would like to make
98:06 - this a little bit more flexible I'm
98:09 - going to create a couple of CSS
98:11 - variables I'm going to create one called
98:13 - Circle size and I will set that to 40
98:16 - pixels for now and one for toggle width
98:19 - which is 100 pixels now I'll plug in
98:22 - these variables instead of my hardcoded
98:26 - values I want the label to be the same
98:28 - height as the circle I will also replace
98:31 - my hardcoded circle size with a variable
98:35 - and I use a variable for the width of my
98:38 - label container not forgetting to use
98:40 - the VAR function that looks the same of
98:43 - course but if I come down to my
98:45 - transform property and replace the
98:48 - variables here now I'm saying I want the
98:51 - circle switch to move from however long
98:54 - the toggle width is minus the size of
98:57 - the circle and this will give me a lot
98:59 - more flexibility as far as how big or
99:01 - small I want to make my toggle so if I
99:04 - wanted to make the circle bigger and the
99:07 - toggle much longer and it's still going
99:09 - to work the same way I could also make
99:12 - it very small and that is it for the
99:15 - toggle switch challenge good work and
99:17 - I'll see you
99:21 - later hello and welcome this is the
99:24 - playing card CSS challenge in this
99:27 - challenge you're going to take this
99:29 - jumbled mess and turn it into a pure CSS
99:33 - Ace of Spades playing card your
99:36 - requirements are to match the layout as
99:38 - closely as you can make sure that the
99:40 - card's width is about 2/3 of its height
99:43 - so we want to make sure that the card
99:44 - has the proper proportions and finally
99:47 - keep in mind that the card can be of
99:49 - fixed size it does not need to grow and
99:51 - Shrink with the browser we're not not
99:53 - worried about responsiveness this is
99:55 - primarily a layout challenge this can be
99:58 - a really good challenge as far as
100:00 - working with flexbox or css grid I've
100:04 - started you out with a card height and
100:07 - all of the HTML that you should need so
100:10 - go ahead and get to it and I hope you
100:13 - have a lot of
100:16 - fun hello let's get started building an
100:20 - Ace of Spades playing card so here's my
100:23 - General plan I'm going to make the card
100:25 - itself a grid container and that's going
100:27 - to give me a one column container with
100:29 - three equal rows and then within each
100:32 - row I'll be able to place the items
100:34 - where I want them to be I'm going to
100:36 - make this upside down by using the
100:38 - transform property to rotate it so let's
100:40 - do it I first want to select my card
100:43 - class and make a card shape that is the
100:46 - right size I'll start with a border so I
100:48 - can see what I'm doing let's make that
100:49 - one pixel solid black
100:54 - I'll then give it a height using my card
100:57 - height variable for width I'll do a
101:01 - calculation what I want to do is the
101:03 - height which is 200 pixels times 2/3 and
101:07 - that will give me a width 23 the size of
101:10 - the height but I want to use my variable
101:12 - here for some flexibility let's also do
101:16 - a border radius and make the card class
101:19 - a grid container and that spaces out my
101:22 - content a little bit
101:24 - now I'll select my container class which
101:27 - I'll make a flex container and Center
101:30 - just so it's not stuck to the top of the
101:32 - browser window let's do a little bit of
101:34 - margin as well starting with my top row
101:38 - my item is already almost in the correct
101:41 - place just need to give it a little bit
101:44 - of space and breathing room so I'm
101:46 - actually going to add some padding
101:48 - around the entire card we still have a
101:51 - little bit of misalignment here but
101:53 - we'll take care of that in a second
101:55 - let's move on to the center row and for
101:57 - the center row I'm going to want to make
101:59 - this much bigger and also make sure that
102:02 - it is centered within its row so I'll
102:04 - select the center Dev make that a flex
102:08 - container and then I will Center all of
102:12 - the content and then we'll up the font
102:14 - size by quite a bit that looks good for
102:18 - my bottom row I am going to use the
102:20 - transform property to rotate it
102:23 - 180° which we flip it over and put it in
102:27 - this corner of the card so selecting my
102:30 - bottom class rotate
102:33 - 180° and there it goes we have one more
102:36 - slight tweak that we need to do and that
102:38 - is to make sure that the Spade is
102:40 - perfectly aligned with the a the Spade
102:43 - has a couple of pixels of space on the
102:46 - left side of it so I'm going to go ahead
102:48 - and add that space to the left side of
102:51 - the a as well and the way that I'm going
102:54 - to select the two A's is if we take a
102:56 - look at the HTML both of the A's are
102:59 - within these parent classes one called
103:02 - top and one called bottom and they're
103:04 - both the first child of their respective
103:07 - classes so to select them let's do the
103:10 - top one first I'm going to say I want
103:13 - all divs that are direct descendants of
103:16 - top were also first children I'll do the
103:20 - same for the bottom class and to both of
103:23 - them we'll add two pixels of padding
103:26 - left and that lines them up nicely this
103:30 - has been the Ace of Spades challenge
103:32 - it's a really good exercise and
103:33 - Alignment I think hope you enjoyed and
103:35 - I'll see you
103:38 - later hello and welcome for this
103:41 - challenge you'll create a four of hearts
103:43 - playing card it will look something like
103:45 - this and your requirements are to match
103:47 - the layout as closely as you can so
103:49 - notice that the bottom half of the card
103:51 - is upside down
103:53 - the card width should be 2/3 the size of
103:56 - its height and the card can be a fixed
103:59 - size meaning it doesn't need to grow and
104:01 - Shrink with the browser don't need to
104:02 - worry about any kind of responsiveness
104:05 - this is more of a layout challenge let's
104:07 - look at the starter files in the CSS I
104:10 - have a card height variable the rest is
104:12 - up to you and if we look at the HTML
104:15 - there's a container that contains a card
104:16 - class with three sections left middle
104:19 - and right if you want to approach The
104:20 - Challenge in a different way and need to
104:22 - change the HTML please feel free to do
104:24 - so you can also change the classes if
104:27 - you'd like just keep in mind that this
104:28 - is the HTML that I'm going to be using
104:30 - for my solution enjoy the challenge and
104:33 - I'll see you in the
104:37 - solution hello and welcome back to the
104:40 - four of hearts playing card challenge
104:42 - where we're going to build this four of
104:43 - Hearts using only CSS here's how I chose
104:46 - to look at this challenge when I'm
104:48 - looking at something that I want to
104:49 - build in CSS I try to look at everything
104:52 - in rows and and columns so when I look
104:54 - at this card I see three columns this is
104:56 - the First Column the four hearts are the
104:59 - second column and this four and heart
105:01 - are a third column and that is why in my
105:04 - HTML I have three sections a left a
105:06 - middle and a right my strategy will be
105:09 - to make the card a grid container and
105:11 - then I'm going to set a width for each
105:14 - of the grid columns I'll use the
105:15 - transform property to flip all of these
105:18 - hearts and I'm also going to use grid to
105:21 - position the four hearts in the middle
105:23 - column that's the plan let's get started
105:25 - first thing I want to do is get a
105:27 - general card shape going I'm going to
105:29 - select the card and we'll start with a
105:32 - solid black border I'll set the height
105:35 - using my card height variable I want the
105:37 - width to be 2/3 the size of my height so
105:40 - I will do a calculation I'll use my card
105:44 - height variable again and I want to
105:45 - multiply that by 2/3 there's our card
105:48 - shape so we can add a little bit of
105:50 - Border radius and now that I can see the
105:53 - card I will also style its parent
105:55 - container so that it's a little more
105:57 - centered and not stuck to the top left
106:00 - of the browser window we'll justify
106:02 - content Center and add some margin back
106:06 - in my card class I'm going to make the
106:09 - card a grid container by default that is
106:12 - going to give me one column and each of
106:14 - my items will be in its own row I wanted
106:17 - to find some columns and I'll do that
106:19 - using grid template columns I want want
106:23 - three columns and I want the First
106:24 - Column to take up 10% of the container
106:27 - div the middle column to take up 80% of
106:30 - the container div and the third column
106:32 - to take up 10% since I'm using
106:34 - percentages this needs to add up to 100
106:37 - finally let's change the font color red
106:40 - let's now style column per columns the
106:42 - elements in the left column are more or
106:44 - less where I need them to be already I
106:46 - just need to give it a little bit of
106:48 - space and I'll do that by adding some
106:50 - padding all around the card we'll do
106:53 - half an M of padding that looks good
106:55 - moving on to the middle column I'll make
106:58 - this a grid container as well which
107:00 - gives me four evenly spaced rows of
107:03 - Hearts what I'll want to do is Define
107:06 - two columns I want four hearts that are
107:08 - in two columns again I'll use grid
107:11 - template columns I'll say I want each
107:14 - column to take up half of its parent
107:16 - space next let's make sure that
107:18 - everything is centered so I'm going to
107:21 - align items Center and text align Center
107:26 - let's make these Hearts much larger
107:28 - we're getting close let's move on to the
107:31 - third
107:32 - column flip it I'm going to use the
107:34 - transform property and I will rotate
107:38 - 180° everything is placed more or less
107:40 - correctly but if we look at the example
107:42 - the heart and the font size are looking
107:44 - a little bit small so I'll set my card
107:47 - font size to be a little bit bigger and
107:49 - that looks pretty good to me but I am
107:51 - going to skip scale down the padding a
107:53 - little bit and I think that's pretty
107:55 - close to where we want to be the last
107:57 - two things we need to do is take care of
107:59 - the tiny alignment issues that we have
108:01 - going on with the four and the heart not
108:03 - exactly matching up and then we need to
108:05 - flip these bottom Hearts so that they're
108:07 - upside down each one of these heart
108:09 - symbols has a bit of padding on the left
108:12 - that's kind of pushing it over a little
108:14 - bit so we want to add that same padding
108:16 - to the four so that they're aligned a
108:17 - little better if I look at my HTML each
108:20 - four is in a class called left or right
108:23 - and it is the first child of its parent
108:26 - class coming down to the bottom of my
108:29 - file I'm going to select all direct
108:32 - descendants of left at our first child
108:35 - divs and I'll do the same for right we
108:38 - just want to add a bit of padding that
108:41 - looks good to me so finally let's flip
108:43 - these bottom two hearts I'm going to
108:45 - select them using nth child so taking a
108:48 - look at our HTML they're in this middle
108:50 - div with the class of container in my
108:53 - CSS I'll select the div with the class
108:55 - of middle and it's nth child three and
108:59 - nth child
109:01 - 4 we could again use transform and
109:05 - rotate
109:06 - 180° that would give us some upside down
109:08 - Hearts the other thing that I can do is
109:10 - use the scale y function and the value
109:14 - to flip something upside down when
109:16 - you're using scale Y is ne1 and that has
109:18 - the same effect that's my solution to
109:21 - the four of hearts playing card CS s
109:23 - challenge hope you had fun and I will
109:25 - see you in the next
109:30 - one hello and welcome scrimba students
109:33 - this is the adjustable progress bar
109:35 - challenge progress bars appear
109:37 - everywhere on the internet and in
109:38 - applications on budgeting apps
109:41 - dashboards loading screens you name it a
109:43 - progress bar can be a very inspiring
109:46 - component to learn how to build because
109:47 - it has so many applications so I hope
109:49 - you have fun with this challenge fairly
109:51 - common when we're building different
109:53 - sorts of web components to be able to
109:55 - assign that component different classes
109:57 - that changes the look of it depending on
109:59 - the state of the component so we have
110:01 - our progress bar and as you can see in
110:03 - this example we're adding different
110:04 - classes to change the look so that we
110:06 - can represent the progress bar at
110:09 - different stages of being filled to
110:10 - complete this challenge you'll want to
110:12 - first start by creating a default empty
110:14 - progress bar and then you'll create a
110:16 - class for each of the four stages of
110:19 - that progress bar so we'll need a stage
110:21 - for 25% finished 50% finished 75%
110:25 - finished and 100% finished let's take a
110:27 - look at the starter files in the HTML we
110:30 - have a container that contains a
110:32 - progress bar element and inside of that
110:34 - is another element with a class of
110:36 - Prague status and this is where you will
110:38 - add the classes that show your progress
110:40 - bar at different stages definitely think
110:42 - about how to leverage this HTML
110:44 - structure to your advantage but you're
110:46 - also welcome to change it if you would
110:48 - like in the CSS I have as CSS variables
110:51 - all of the colors that you'll need to
110:53 - complete the progress bar or you can
110:54 - feel free to use your own colors
110:57 - definitely be creative and have fun with
110:58 - this now on the next slide are some
111:00 - hints so if you'd like to get started
111:02 - without any hints go ahead and pause it
111:04 - now and I will see you in the solution
111:06 - good luck if you do want hints here we
111:08 - go when you're thinking about how to
111:09 - implement this progress bar it may be
111:11 - helpful to think of it as two different
111:13 - elements one on top of another so you
111:16 - have an outer progress bar and an inner
111:19 - progress bar and you'll want to think
111:20 - about how you can use the width property
111:23 - of that inner progress bar to create the
111:25 - effect of the outer progress bar filling
111:28 - hopefully this helps but if you struggle
111:29 - I'll be right in the next scrim showing
111:31 - you the solution as I said before I
111:33 - think a progress bar is a really cool
111:35 - thing to learn how to build and you'll
111:36 - use this knowledge again and again good
111:38 - luck and I'll see you in the
111:43 - solution hello again this is the
111:46 - solution to the adjustable progress bar
111:48 - challenge I hope everything went great
111:50 - I'm sure you did an amazing job let me
111:52 - show you how I approached this problem
111:54 - here's what my overall strategy is going
111:56 - to be I have a progress bar div with
111:59 - another div inside of it I'm going to
112:01 - style the progress bar to look like an
112:03 - empty gray bar and I'll use the div
112:05 - inside it to create an element that is
112:07 - the exact same height with the same
112:08 - border radius and everything but it will
112:10 - be a different color depending on the
112:13 - class and I'm also going to use
112:14 - percentages to adjust the width of each
112:17 - one of these shapes so let's do it I'll
112:20 - start by going to my CSS and let's start
112:22 - with our default progress bar I'm going
112:25 - to give it a height of 40 pixels and for
112:28 - the background I will use my progress
112:31 - bar background variable that gives us a
112:33 - gray bar at the top of the mini browser
112:36 - let's add some border radius to create
112:38 - more of a progress bar shape I'll do a
112:40 - border radius of 20 pixels I now want to
112:42 - constrict the width of my outer progress
112:44 - bar but the way I'm going to do that is
112:46 - by adjusting the container I'll select
112:49 - my container class and I'm going to say
112:51 - I want my container to take up no more
112:53 - than 80% of the width of the browser
112:56 - then I'll add some top and bottom margin
112:58 - and auto the left and right so that my
113:00 - progress bar is centered that gives me a
113:02 - default gray progress bar now let's have
113:05 - another look at the HTML really quick I
113:07 - want to Target this progress status
113:09 - class that I can start working on the
113:11 - inner progress bar make the inner
113:13 - progress bar the exact same height as
113:15 - the outer so 40 pixels High Let me give
113:18 - it a background color we'll just do
113:20 - purple for now and that way you can see
113:21 - that I have element sitting on top of my
113:25 - default progress bar I want to give it
113:27 - the same border radius now look what
113:30 - happens when I adjust the width let's
113:32 - say 50% almost like magic I have a
113:35 - progress bar that I can adjust however
113:37 - I'd like by adjusting the percentage
113:40 - that is pretty cool but as we saw in the
113:43 - example we want to be able to add
113:44 - separate classes to adjust the width and
113:47 - what that looks like so I'll take the
113:49 - width off of this class I'll also remove
113:51 - the background I now want to create
113:53 - classes for each of my four stages
113:56 - create stage one I've created selectors
113:59 - for each of my four stages and that will
114:01 - let me add a background and a width to
114:03 - each so looking at our guidelines stage
114:07 - one should be 25% finish so I'm going to
114:10 - give that a width of
114:12 - 25% I'll also use my CSS variables to
114:16 - assign a background color let's go to
114:18 - the HTML and add this stage to test it
114:21 - out great so adding the stage one class
114:24 - makes my progress bar 25% full and red
114:28 - now I'll repeat for the rest of the
114:29 - stages adding the corresponding width
114:31 - and background
114:36 - colors that should do it let's test out
114:39 - the rest of our stages we have stage one
114:41 - stage two stage three and stage four
114:44 - that's looking good this is the
114:46 - adjustable progress bar challenge solved
114:48 - I encourage you to play around with the
114:50 - Styles and the colors and make it your
114:52 - own and also there is another progress
114:55 - bar challenge where you create an
114:56 - animated progress bar so definitely
114:58 - check that out great job and I'll see
115:00 - you again
115:04 - soon hello and welcome this is the CSS
115:08 - card flip challenge this card flip
115:10 - effect has a lot of fun real world
115:13 - applications you can use it to build a
115:15 - flashcard app you can use it to build a
115:17 - memory game a fancy hover effect for
115:19 - some kind of card Gallery layout there
115:21 - are so many possibilities for this
115:24 - particular challenge I've chosen a
115:26 - Jeopardy theme and if you're not
115:27 - familiar with Jeopardy the very popular
115:29 - game show here in the US it's been on
115:32 - the air for almost 60 years and it's
115:34 - essentially a trivia game in which you
115:36 - would have an entire wall of these blue
115:39 - screens and on each screen is a hint
115:41 - that is framed in the form of an answer
115:43 - so if we take a look at our unstyled
115:46 - HTML this is the front and this is the
115:48 - back so the front says this now
115:50 - deprecated HTML tag popular in the early
115:52 - days of the internet magically made text
115:54 - scroll across the screen and in Jeopardy
115:57 - the answer is always in the form of a
115:59 - question so you flip the card over and
116:01 - the answer is what is the Marquee tag if
116:04 - you weren't around for the early days of
116:05 - the internet and aren't familiar with
116:06 - the Marquee tag let me show you what it
116:08 - looks like as mentioned it is deprecated
116:11 - so definitely don't use it but as you
116:14 - can see it's kind of fun it sends your
116:16 - text scrolling across the screen I'll
116:18 - change that back and I'll change this
116:20 - back and let's take a look at the
116:21 - requirement your card should have two
116:23 - sides and flip from front to back on
116:26 - Hover try to match the Styles as closely
116:28 - as you can you'll use only CSS to
116:31 - complete this Challenge and you don't
116:32 - need to worry about responsiveness let's
116:35 - take a look at the starter files in the
116:38 - htl we have a card class and inside of
116:40 - that is a card front and a card back
116:43 - that has the content for each side of
116:45 - the card and in the CSS I have set up
116:47 - some variables for the colors that
116:49 - you'll need to complete the challenge on
116:51 - my final slide I do have some hints for
116:54 - you so if you don't want hints go ahead
116:56 - and pause and get started on this
116:57 - challenge I'm sure you'll do great
116:59 - however this challenge can be
117:01 - deceptively complex so I would recommend
117:03 - that you stay around for these hints and
117:05 - here we go conceptually I would think of
117:07 - this card flip effect as an element
117:09 - rotating 180° in 3D space so if you
117:13 - think about actually having some kind of
117:14 - playing card or something that you're
117:16 - rotating that is pretty much what is
117:18 - going to happen on the screen I'd
117:20 - recommend that you use the outer card
117:22 - class to create the flip effect and then
117:23 - you can show and hide the content of the
117:26 - front and back of the cards as it flips
117:28 - you want to use the transition property
117:30 - for a smooth flip effect and you may run
117:32 - into a couple of little quirks while
117:34 - you're working on this flip effect and
117:36 - if that happens look up the transform
117:39 - style property and its preserved 3D
117:41 - value and the CSS property backface
117:44 - visibility they will both help you get
117:45 - this challenge done good luck you got
117:47 - this and I'll see you in the solution
117:52 - hello again this is a solution to the
117:54 - CSS card flip challenge in the style of
117:58 - the popular Us game show Jeopardy we
118:01 - have created a card that flips back and
118:03 - forth on Hover as I said in the last
118:06 - scrim this challenge can be deceptively
118:08 - complex so if you got even part of the
118:10 - way there or if you have a card that
118:12 - mostly flips but has some weird little
118:14 - quirks and bugs you have done a
118:16 - fantastic job so definitely feel proud
118:18 - of yourself now let me show you my
118:20 - solution on a high level I'm going to
118:22 - create a transition effect on this card
118:24 - that uses the transform property to
118:26 - rotate the card 180° on Hover also on
118:30 - Hover I'm going to hide the front
118:32 - content and show the back content let's
118:35 - begin by making a card in my CSS I'm
118:38 - going to select the card class I want my
118:41 - card to be 200 pixels in height and 350
118:46 - pixels in width I'll then create my
118:48 - Jeopardy blue background using my CSS
118:50 - variable we'll go ahead and change the
118:53 - color to white using the main font color
118:56 - variable give the card some padding and
118:59 - a bit of margin just to give it a little
119:01 - space I'll then add some border radius
119:05 - let's say about 10 pixels and let's take
119:08 - a look at the example so I want to make
119:10 - sure that absolutely everything is
119:12 - centered and capitalized I'll Center
119:15 - everything by setting a display of flex
119:18 - that reminds me I should probably point
119:19 - out up here that I already have display
119:21 - flex and just ify content on the body
119:24 - which is why the card is centered no
119:26 - matter how large the browser stretches
119:29 - I've set a display of flex so I can
119:31 - justify content Center align items
119:35 - Center and text align this looks a
119:38 - little strange because I have my front
119:40 - and back content all on one side of the
119:43 - card to address that I'll select my card
119:46 - back class and I'll set that to display
119:49 - none for now now up here in my card
119:51 - class I will text transform to uppercase
119:55 - everything and that is looking pretty
119:57 - close to what we're going for so I'm
119:59 - ready to do my transition effect below
120:02 - my card I am going to select card hover
120:06 - when we hover over the card I want to
120:08 - use the transform property I want to
120:10 - rotate on the Y AIS want to rotate y
120:16 - 180° now if we come up here and hover it
120:19 - appears as if I'm just making my text
120:21 - backwards but actually the entire card
120:23 - is flipping around it's just happening
120:25 - instantly so I want to write a
120:26 - transition effect so that this happens
120:29 - slowly and more smoothly up here in my
120:31 - card selector I'll use the transition
120:34 - property and I want to Target the
120:35 - transform property and let's say I want
120:38 - it to take 6
120:40 - seconds the result is when we hover the
120:42 - card flips all the way around this gives
120:44 - us a flip effect we just need to make
120:46 - sure that the right content is showing
120:49 - at the right time when I'm not hovering
120:51 - I want the front of the card to show
120:53 - when I am hovering I want the back of
120:55 - the card to show so I'll create a couple
120:57 - more hover States on card hover I want
121:00 - to select card front and I will set the
121:03 - front of the card to display none I also
121:06 - want to on card hover select card back I
121:10 - have that currently set to display none
121:12 - so on Hover I'll set it back to display
121:15 - block over and see what that gives us
121:17 - we're getting closer but as you can see
121:19 - there are a couple of issues here when I
121:21 - hover you can see for a moment the front
121:24 - of the card flipped backwards also the
121:27 - text on the back of the card is
121:28 - backwards and that means that on Hover I
121:31 - want to flip the back of the card
121:33 - 180° so that it's facing the right way
121:36 - so in my card back hover state I'm going
121:39 - to use the transform property again once
121:42 - again I will rotate y
121:45 - 180° by the way I'm using rotate y that
121:48 - basically means that you want to rotate
121:50 - horizontally if I were to change this to
121:52 - rotate X my card would rotate from top
121:56 - to bottom to prevent these little
121:58 - glimpses we're getting of the backside
122:00 - of the content as it rotates I want to
122:02 - use a property that I mentioned in my
122:04 - hints down at the bottom of my file I'm
122:08 - going to select both card front and card
122:11 - back and I'm going to set backface
122:14 - visibility to Hidden adding backspace
122:17 - visibility almost solves the problem but
122:19 - there is one more step back up here in
122:21 - my my card class I'm going to add a
122:24 - property called transform style which I
122:27 - mentioned in my hints and we'll give
122:28 - that a value of Reserve 3D this property
122:32 - ensures that the children of the card
122:34 - class also exist in 3D space which
122:37 - ensures that here on Hover when we
122:40 - rotate the back of the card that that is
122:42 - honored in 3D space now if we hover the
122:45 - back of the card also rotates in 3D
122:48 - space and with that this challenge is
122:50 - complete I I want to say once again that
122:53 - this is a finicky little challenge so if
122:55 - you got some kind of flip effect and you
122:57 - were able to get more familiar with
122:59 - Transitions and using the transform
123:01 - property and the rotate function and all
123:04 - of that you have succeeded at this
123:06 - challenge so very well done and I hope
123:08 - to see you in the next
123:12 - one hello there in this challenge you're
123:15 - going to build this lovely loading
123:17 - animation if you find yourself feeling a
123:19 - mysterious sense of frustration as you
123:22 - watch this loading animation it's
123:23 - probably because this is the kind of
123:25 - Animation you might see if a video that
123:27 - you're streaming starts to buffer or if
123:30 - a website is taking forever to load but
123:32 - don't worry it's way more fun to build
123:34 - than it is to watch so let's look at
123:36 - some of the requirements I find when
123:39 - building a CSS animation that it's
123:41 - helpful to point out what the animation
123:43 - is actually doing to help you start to
123:45 - conceptualize how you might begin to
123:47 - build it so what's happening is that a
123:49 - portion of a colored circle is spinning
123:52 - around clockwise within another gray
123:55 - Circle for this challenge you want to
123:57 - match the Styles but you can feel free
123:59 - to choose your own colors and no
124:01 - JavaScript this is a CSS only challenge
124:04 - on the next slide I have some hints so
124:06 - if you do not want any hints go ahead
124:08 - and get started and I will see you later
124:10 - in the solution scrim good luck if
124:12 - you're still with me here are some hints
124:14 - to achieve this effect you'll want to
124:16 - use the animation property and key
124:18 - frames and it will help you to remember
124:20 - that the Border property is a shorthand
124:23 - CSS property you use it to style all
124:25 - four sides of a border at once and that
124:28 - makes it easy to forget that you can
124:29 - individually style each side of an
124:31 - element's border using properties like
124:34 - border top and border right Etc so do
124:36 - keep that in mind I did describe this as
124:38 - a circle earlier but if you think about
124:40 - it it's actually the border of a circle
124:43 - hopefully that helps but remember if you
124:45 - get stuck I'll be right in the next Grim
124:47 - with the solution before you go off
124:49 - let's take a quick look at the starter
124:50 - files in the CSS file I've added some
124:53 - CSS variables for the colors you need
124:55 - and in the index HTML we've kept it
124:58 - simple we have a container and a div
125:00 - class called loader this loading
125:02 - animation is a super fun effect it's one
125:04 - of my favorites I really like it I hope
125:06 - that you like it too and I'm sure you'll
125:07 - do great I'll see you in the solution
125:13 - scrim hey welcome back let's build this
125:15 - loading animation at a high level here's
125:18 - what I'm going to do I'm going to create
125:20 - a square shape I'm going to give it a
125:22 - border radius so that it is round and
125:24 - then I'm going to style the border so
125:26 - that it's thick and gray I will then
125:28 - Style just the top border portion to be
125:30 - a different color I'm going to set it to
125:32 - be purple and once I have that purple
125:34 - border I can write an animation to spin
125:37 - that purple border around and around
125:39 - let's see what that looks like in CSS
125:41 - I'm going to go to my index.css the
125:43 - first thing I'll do is create my circle
125:46 - I'll select my loader class and I'll
125:48 - start with a square shape so I want a
125:50 - width of 100 pixels and a height of 100
125:53 - pixels then I will set a border so that
125:56 - we can see what we're doing here it'll
125:58 - be a solid border and I'll use my
126:01 - spinner color variable gives us a nice
126:04 - gray Square let's make it a circle by
126:06 - adding 50% border radius we're on our
126:10 - way I want to quickly Center this so I
126:12 - will select the container class and
126:15 - we'll do a height of 100 viewport height
126:19 - and display flex and that will allow us
126:22 - to horizontally Center using justify
126:25 - content and vertically Center using
126:28 - align items we go perfectly centered
126:30 - circle now in my loader class I will
126:34 - select just the Border top I want it to
126:37 - be the same size as my gray border and
126:40 - also solid but I will replace the gray
126:43 - spinner color with my active color the
126:47 - circle is divided into four pieces top
126:51 - right bottom and left and all I've done
126:54 - so far is I've colored the top border so
126:56 - that it's purple my next step is to
126:58 - create an animation to spin it around
127:00 - and around in my loader class I will
127:03 - create an animation I'm going to call it
127:05 - spin I want it to take 1.5 seconds and I
127:10 - want it to be NeverEnding or infinite
127:13 - down here at the bottom of my file I
127:15 - will create some key frames for my
127:17 - animation so I want to create key frames
127:19 - for the animation called spin
127:22 - in my animation I really just need one
127:24 - key frame when my animation is 100% done
127:28 - I want it to have rotated
127:32 - 360° in other words I want it to take
127:34 - 1.5 seconds to move back exactly to the
127:37 - location where it began you may have
127:39 - noticed though that we're pausing at the
127:41 - top before the animation starts to spin
127:44 - again whereas in the example we have a
127:47 - nice smooth even animation and that's
127:50 - because by default the animation timing
127:53 - is ease meaning that the animation
127:55 - starts out slowly speeds up a little bit
127:58 - and then slows down again as it wraps up
128:01 - we want the animation to move at the
128:02 - same speed from start to end I'll come
128:05 - up to my animation property We'll add
128:08 - the value linear that Smooths out the
128:11 - animation and also completes the
128:13 - challenge really great job on this
128:15 - animation it's a fun one but may your
128:17 - future be buffering free I'll see you in
128:20 - the next challenge
128:26 - hello this is another fun real world CSS
128:29 - challenge where we're going to build
128:30 - this Instagram menu if you're not super
128:32 - familiar with Instagram this is the
128:34 - stories menu each item represents a user
128:37 - that you follow and the idea is that
128:39 - you're able to click on this and view
128:41 - their story or a slideshow that
128:43 - typically contains pictures memes and
128:46 - videos the stories menu uses color to
128:49 - communicate the state of each user story
128:52 - if you see this rainbow gradient border
128:55 - that means that Julian has an unread
128:58 - story that you have not yet viewed if
129:00 - it's gray that means that you've already
129:02 - viewed their story if they have a live
129:04 - badge that means that they're currently
129:06 - live streaming what you'll do for this
129:08 - challenge is recreate this menu and also
129:10 - create a set of classes that will change
129:13 - the look of the menu items depending on
129:16 - their state you'll want to create three
129:17 - classes that can be added to the story
129:20 - element and we'll look at the h in just
129:21 - a sec to visually indicate the state of
129:24 - each story you want to be able to add a
129:26 - new class and that will add a gradient
129:28 - border to the menu item to show that a
129:30 - story has not yet been viewed you'll
129:32 - want to be able to add a viewed class
129:34 - which will add a gray border to show
129:36 - that the story has been viewed and the
129:38 - last class that you want to create is a
129:39 - live class and that will add the red
129:42 - notification badge to indicate that the
129:44 - user is currently live streaming the
129:46 - stories menu is an unordered list and
129:48 - each story is a list item with an image
129:51 - and a username and this Li is where
129:54 - you'll want to be able to add these
129:55 - classes to visually indicate that
129:57 - story's status I've set this up in the
129:59 - HTML already so we have one that is new
130:02 - that is viewed with a live stream and
130:04 - then another new one but the idea is
130:06 - that these classes are interchangeable
130:08 - you should be able to add and subtract
130:10 - them from any of these list elements to
130:12 - change how that element looks in the CSS
130:15 - I've provided all of the colors that you
130:17 - need as well as the Google font that I
130:19 - use in the example on the final slide I
130:21 - have some hints the gradient border
130:24 - effect that you see here can be
130:26 - accomplished using a wrapping div if
130:29 - you've already completed one of the
130:30 - other CSS challenges you might be
130:32 - familiar with the Border image property
130:33 - and how you can create a gradient that
130:35 - way but because the elements in this
130:37 - menu are round you're not going to be
130:38 - able to use the Border image property
130:41 - because it does not work with border
130:42 - radius my other hint is you may be
130:44 - wondering how you would add the live
130:46 - badge if that text doesn't already exist
130:49 - in the Dom so if we look in the HTML we
130:52 - actually don't have any text that says
130:55 - live we want that to appear only when we
130:58 - add the live class but this is a CSS
131:01 - challenge so we also can't use
131:03 - JavaScript so my recommendation for how
131:05 - to accomplish this is to use a pseudo
131:08 - element pseudo element has a Content
131:11 - property which will allow you to display
131:13 - text go ahead and get started on the
131:15 - challenge I think that one of the best
131:16 - ways to improve your CSS to find things
131:18 - that you like out in the real world and
131:20 - try to rebuild them this is a really
131:22 - great challenge for that so I hope that
131:24 - you have fun I'm sure that you'll do a
131:26 - fantastic job and I hope to see you in
131:28 - the solution good
131:32 - luck this is the solution to the
131:34 - Instagram stories menu CSS challenge I
131:37 - hope that this went well for you there's
131:39 - a lot going on in this little menu more
131:41 - than you might expect so if you
131:43 - completed the challenge super amazing
131:45 - work let me show you how I did it the
131:47 - very first thing I want to do is make
131:49 - sure that I have all of my fonts and
131:52 - colors more or less set up so to the
131:55 - body I'm going to make sure that I have
131:57 - the correct background color by using my
132:00 - background main variable I know that I
132:03 - want my font color to be white good and
132:05 - then want to set my font family that's
132:08 - good and I want to reset my unordered
132:10 - list by getting rid of the default
132:11 - padding and the list style type so that
132:13 - we don't have these bullet points here
132:16 - I'll select the class stories menu that
132:18 - is on my unordered list I'll zero out
132:20 - the left padding and add list style type
132:24 - none to get rid of the bullets great now
132:26 - let's constrain the size of these images
132:30 - going to select the class that is around
132:33 - the div wrapping my images apply called
132:35 - image wrapper and I want to constrain it
132:38 - as a square so I'll give it a height and
132:40 - a width of 60
132:42 - pixels I'll then select my image and set
132:46 - the height to 100% and that will ensure
132:49 - that my image will never get any larger
132:51 - than its parent container which is image
132:53 - wrapper I'll also make my image round by
132:56 - adding a border radius notice if we look
132:59 - at the example that there is a black
133:01 - Border in between the status border and
133:04 - the image I'm going to go ahead and add
133:06 - that border to my image We'll add a two
133:09 - pixel solid black border to my image
133:12 - I'll add a two pixel solid black border
133:15 - to my image wrapper I'll create this
133:17 - outer border effect by adding a little
133:19 - bit of padding basic basically right now
133:21 - the image wrapper and the image are
133:23 - sitting right on top of each other and
133:25 - I'm going to make the wrapper slightly
133:27 - bigger so that you can see it peeking
133:29 - around the edges of the image I'll add
133:32 - four pixels of padding let's make the
133:35 - background color white for now so that
133:37 - you can see it that helps us see that
133:38 - we're creating a white square and that
133:40 - our image isn't exactly centered within
133:43 - that square I'm also going to add border
133:45 - radius to my image wrapper 50% to make
133:48 - the Border round and now I'll Center my
133:50 - image within it by making it a flex
133:52 - container which will allow me to justify
133:55 - content Center and align item Center to
133:58 - Center vertically that sets me up with a
134:00 - nice even border so that I will be able
134:03 - to use my other classes we look here my
134:07 - new and viewed classes to change the
134:10 - color of the Border let's do that now
134:12 - I'm down to the bottom of my file the
134:15 - way I want to do this with selectors is
134:17 - I want to say if there's a new class
134:19 - look for its immediate child which is a
134:21 - div with a class of image wrapper and
134:24 - then change the color of that image
134:26 - wrapper so I'll say new and I want to
134:28 - select a direct child of new called
134:31 - image wrapper and if it is a new story
134:34 - if it has a new class that's when I want
134:36 - this rainbow border because that
134:38 - indicates that the story has not yet
134:40 - been read I'll add the gradient border
134:43 - with my background property and then
134:45 - I'll use linear gradient and I want the
134:48 - linear gradient to go to top right so so
134:51 - the colors I list are going to start
134:53 - here and they're going to travel up in a
134:55 - gradient to the top right so this quite
134:57 - a long list of colors so I'm going to
135:00 - copy and paste them in rather than use
135:02 - my CSS variables and that gives me a
135:05 - nice rainbow border if I were to give my
135:08 - other list items the class of new so for
135:11 - my second list item I'll delete viewed
135:13 - and I will replace it with new then if
135:16 - we run all three of my menu items have
135:18 - this new class which gives them a
135:21 - rainbow border let's change this back
135:23 - and create a border for the viewed class
135:27 - when an item in the menu is viewed it
135:29 - has a gray Border in my CSS I'll do
135:34 - something very similar to what I've done
135:36 - above if there is a viewed class and it
135:38 - has a direct Child Called image wrapper
135:41 - and I want the
135:43 - background to be gray you come up here
135:46 - and grab my viewed variable for that and
135:49 - if we run that gives us the gray border
135:51 - that we were looking for excellent
135:53 - before we work on this live badge let's
135:55 - do the rest of the sort of structure of
135:58 - the menu we want to make sure that this
136:00 - menu is vertical and that everything is
136:02 - centered and evenly spaced coming back
136:05 - up to my stories menu unordered list I
136:08 - want to make this a flex container to
136:11 - display all of my items vertically and
136:14 - I'll go ahead and use justify content
136:16 - space around and I'll also go ahead and
136:19 - constrain the width of the stories menu
136:22 - so that everything doesn't stretch out
136:24 - too far if the browser is really wide
136:27 - we'll just give that a Max with about
136:29 - 320 pixels which is generally the
136:32 - smallest screen size that we need to
136:34 - worry about so let's just say for the
136:35 - sake of this challenge that we we want
136:37 - this to appear on a fairly small Mobile
136:39 - screen If This Were a real world
136:41 - scenario this is where you might write
136:43 - media queries to control the size I'll
136:46 - also add some margin let's add some
136:48 - margin to the top and bottom Auto on the
136:51 - left and right so it's nice and centered
136:53 - how do we make sure that the text under
136:55 - each user story is perfectly centered
136:58 - right now it's a little bit off the way
137:01 - I'm going to address that is to select
137:03 - each story I'll make each story a flex
137:06 - container and then I will change the
137:08 - flex direction to column so that the two
137:11 - items are stacked on top of one another
137:14 - to add a quick background to this so
137:16 - that you can see one of the issues that
137:18 - we're going to run into is that
137:20 - depending on the length of the username
137:22 - the image may not be centered in the
137:25 - containing story box so we want to make
137:27 - sure that it's always centered with
137:30 - within the story container itself I'll
137:33 - deal with that by coming to my image
137:35 - wrapper and I'm going to say align self
137:38 - Center that will ensure that my image is
137:40 - always centered and that will help me
137:42 - make sure that the username is also
137:44 - perfectly centered with the image
137:47 - returning to my story selector I can now
137:50 - Center Aline my text that's how we can
137:53 - make sure that everything is perfectly
137:54 - centered now I'll get rid of this purple
137:56 - background and we can add the live batch
137:59 - as I said in my hint the way that I'm
138:01 - going to do this you come down to the
138:03 - bottom here is I'm going to select the
138:05 - live class and use the after pseudo
138:09 - element and what that will do is if
138:11 - there's a list item with the class of
138:13 - live it's going to add a pseudo element
138:15 - which will allow me to use the content
138:16 - property to add that live
138:19 - text I'll add the content which will be
138:22 - live in all capital letters you'll see
138:25 - that appears after my item that has the
138:27 - live class on it let's style it now
138:30 - according to the example I'm going to
138:33 - make the font size slightly smaller I'll
138:36 - make it a little bold I'll add my
138:38 - background
138:39 - color you'll also notice that we have a
138:43 - black border let's add a two pixel solid
138:46 - black border a little bit of Border
138:49 - radius
138:51 - let's constrain the width to about 20
138:54 - pixels and add a bit of padding on
138:58 - either side that is looking pretty good
139:00 - but how do I make sure that it is in the
139:02 - right place I'm going to place this
139:04 - using absolute positioning so the first
139:06 - thing I'll do is go to the live elements
139:09 - parent div and I'll add a position of
139:13 - relative every time we absolute position
139:15 - an element we need to make sure that its
139:17 - parent element has a position of
139:19 - relative I can then come down here and
139:22 - give my live badge a position of
139:25 - absolute and that is going to put it in
139:27 - the top right corner if I were to add a
139:31 - background again to this story class
139:34 - this helps us see the boundary of our
139:36 - absolutely positioned element if I want
139:39 - my badge to be right here I can see that
139:41 - it's roughly 50% from the top of my
139:44 - containing div I can say I want my
139:46 - element positioned about 50% from the
139:49 - top which puts it just where I want it
139:51 - to be I also want to center it and here
139:54 - is the trick to centering an absolutely
139:57 - positioned element do a margin Auto
140:00 - that's not going to do anything until I
140:03 - say I need a left position of zero and a
140:06 - right position of zero and that is how
140:08 - you Center an absolutely positioned item
140:11 - left zero right zero margin Auto great
140:14 - little trick let's get rid of the purple
140:16 - background so that we can admire how
140:19 - beautifully centered are light live
140:20 - badge is with that our Instagram stories
140:23 - menu is complete as I said at the
140:26 - beginning of this scrim there is a lot
140:28 - going on with this menu a lot more than
140:30 - you might expect really fantastic
140:36 - work in this challenge you'll build an
140:39 - animated progress bar as you can see
140:41 - this progress bar fills up and changes
140:43 - colors as it does so to complete this
140:45 - challenge you want to build a CSS
140:47 - animation of the progress bar filling to
140:50 - 100% the animation should keep looping
140:53 - with a small pause when the bar is
140:55 - filled to 100% so as you can see when
140:58 - the bar fills up the animation doesn't
141:00 - automatically start over there's a
141:02 - little pause there it may look like the
141:05 - progress bar is using a bunch of colors
141:07 - but it is actually only using three it
141:09 - begins at Red turns blue when it is 50%
141:12 - full and green when it's complete the
141:15 - other colors that you're seeing here are
141:17 - the blending as the animation flips from
141:19 - one color to another so just keep that
141:21 - in mind you'll only need to build this
141:23 - animation with three colors and finally
141:26 - no JavaScript for this challenge only
141:28 - CSS on the next slide I have some hints
141:30 - for you so if you don't want any hints
141:32 - go ahead and pause and get started right
141:34 - now here are the hints when you're
141:36 - building a progress bar it may be
141:38 - helpful to think of it as two different
141:41 - elements one on top of the other so you
141:43 - have an outer progress bar which is the
141:45 - gray bar and an inner progress bar and
141:48 - you're controlling the width of it to
141:50 - create the effect of the progress bar
141:52 - filling up so you want to think about
141:54 - how you can control the width of the
141:56 - inner progress bar to create that effect
141:58 - my second hint for you is that my second
142:00 - hint is to do this CSS only you're going
142:02 - to need the animation property and key
142:04 - frames but as you're building this
142:06 - animation you may notice that there is
142:07 - no way to pause an infinitely looping
142:10 - animation between iterations so to
142:13 - create the effect of a pause once the
142:15 - progress bar has filled to 100% you may
142:18 - need to include an extra key frame those
142:21 - are your hints now let's take a look at
142:22 - the starter files in your CSS I have all
142:25 - of the colors that I have used feel free
142:27 - to substitute your own colors to create
142:29 - a fun effect and also feel free to
142:32 - change up the HTML however you'd like
142:34 - just keep in mind that my solution will
142:36 - be using this starter HTML and CSS
142:39 - progress bars show up everywhere on the
142:42 - web so it is a really cool real life
142:45 - challenge to build a progress bar
142:47 - animation good luck and I'm sure you'll
142:49 - do great see you in the solution
142:54 - welcome back to the animated progress
142:57 - bar CSS challenge solution here is my
143:01 - plan if we take a look at the HTML I
143:03 - have a div with the class of progress
143:05 - bar and nested inside that is a div that
143:08 - also has a class of progress bar as well
143:10 - as an additional class called progress
143:12 - status I'm thinking about this as two
143:15 - different progress bars one inside of
143:18 - another the gray progress bar will
143:20 - always be one width whereas I will use
143:22 - animations to adjust the width of the
143:24 - inner progress bar which will create the
143:26 - effect of the progress bar filling I'll
143:29 - use this common progress bar class to
143:31 - make sure that both of my progress bars
143:34 - have the same height and Border radius
143:36 - then I'll use the progress status class
143:38 - to control the width and the background
143:40 - color of the inner progress bar let's do
143:43 - this I'll start by selecting that
143:46 - progress bar class I want my progress
143:49 - bar to have a height of 1.5 M and we'll
143:52 - also give it some border radius and I'll
143:55 - use my variable to give it that light
143:57 - gray background color here is our gray
144:00 - progress bar now let's use this
144:03 - container class to constrain the width
144:06 - of it and move it around a little bit
144:08 - I'll come up here and I'll select my
144:10 - container class I want to set my
144:12 - container so it takes up no more than
144:14 - 80% the width of the browser window I'll
144:17 - also add margin to make it a little more
144:19 - centered
144:21 - now I'll select that progress status
144:23 - class so that I can show you if I set a
144:27 - width for now let's set a width of
144:30 - 25% and we'll add a purple background
144:33 - and then you can see that I have the
144:35 - beginnings of a progress bar here and
144:38 - there are actually two elements sitting
144:40 - on top of each other I want to begin my
144:42 - animation at 10% and I want my animation
144:46 - to start with the color red so I'll use
144:49 - my start variable
144:51 - this will be the starting point for my
144:52 - animation I'm now ready to begin my
144:54 - animation so I'm going to use the
144:55 - animation property I want to create an
144:57 - animation that will take about 6 seconds
145:00 - I want it to be linear meaning that the
145:02 - speed will remain constant throughout
145:04 - the duration of the animation I'm going
145:07 - to call my Animation Show progress and I
145:10 - want it to run in an infinite Loop now
145:12 - I'll Define my show progress
145:15 - animation I'm going to use percentages
145:17 - to Define my key frames and here's how
145:19 - I'm going to create the effect of my
145:21 - progress bar pausing for just a little
145:23 - while at 100% I know from my
145:26 - requirements that the progress bar turns
145:28 - blue at 50% full so I'll start there and
145:32 - I'll say 50% of the way through the
145:34 - animation I want the width of my div
145:36 - with the class of progress status to be
145:39 - 50% and I want the background to use my
145:43 - middle color and I also know that I want
145:47 - at 100% for my width to be 100% % and my
145:52 - background to use the Finish color you
145:55 - can see that my animation gets all the
145:57 - way done and it immediately starts over
146:01 - so what I'll do I'll copy and paste this
146:04 - and I'll say I want this to happen at
146:07 - 75% as well and that's essentially a way
146:10 - to say finish the animation at 75% or at
146:14 - least the animation effect that I want
146:16 - and then keep it there until the
146:18 - animation is 100% finished this will
146:20 - you'll notice cause the animation to
146:23 - kind of be slow in the beginning and
146:24 - then speed up but I think that's okay
146:27 - progress bars often have variable speeds
146:29 - makes them a little more interesting to
146:31 - look at that's how I solved the animated
146:34 - progress bar CSS challenge I hope this
146:36 - inspires you to experiment with animated
146:39 - progress bars on all sorts of other
146:41 - kinds of CSS animations they're super
146:44 - fun and they really add a lot to a web
146:46 - experience thanks for building this with
146:48 - me and I will see you later
146:54 - this CSS challenge is inspired by
146:56 - github's contribution graph if you're at
146:58 - all familiar with GitHub you've probably
147:00 - seen this graph it's on your profile
147:02 - page and it shows you how many
147:04 - contributions you've made to GitHub
147:05 - repos on a daily basis each Square
147:07 - represents a day of the year each column
147:11 - represents one of the 52 weeks of the
147:13 - year and each row represents a day of
147:16 - the week starting with Sunday and ending
147:18 - on Saturday the graph uses color to
147:20 - communicate how many contributions were
147:22 - made on any given day the dark squares
147:25 - mean no contributions the dark blue
147:27 - squares mean some contributions the
147:30 - medium blue means some medium level of
147:33 - contributions and the light blue squares
147:36 - mean you've made a lot of contributions
147:38 - so the darker the color the fewer
147:39 - contributions you've made on a given day
147:41 - I've used a different color scheme I've
147:43 - used blue instead of a green color
147:45 - scheme but the idea is the same let's
147:47 - look at some more details about this
147:49 - challenge the HTML for the graph is
147:51 - generated by the code in
147:53 - index.js let's take a look at that you
147:56 - don't need to know how this code works
147:58 - but you're certainly welcome to have a
148:00 - look at it and read it and understand
148:01 - what it's doing it's generating all the
148:03 - HTML for the graph and also randomly
148:06 - assigning the contribution level to each
148:08 - and every Square the scale that I've
148:10 - chosen to use is three five or 10 three
148:13 - being the dark blue color five being the
148:16 - medium blue color and 10 being the
148:18 - lightest blue color what you'll want to
148:20 - do is style the graph first with default
148:23 - squares and then create selectors that
148:25 - will style each square based on the
148:27 - number of contributions per day if we
148:30 - take a look at
148:31 - index.html here's an example of the HTML
148:35 - that the JavaScript is generating it
148:37 - generates an unordered list for each of
148:39 - the 52 weeks of the year and each week
148:42 - list has a list item representing the
148:44 - day of the week each day of the week
148:46 - will have a random data value that will
148:49 - be either 0 3 5 or 10 you'll need to
148:53 - create selectors that will style each
148:55 - square based on the number of those
148:57 - contributions my final slide has some
148:59 - hints on it so if you don't want hints
149:01 - go ahead and pause the scrim and get
149:03 - started now good luck I'm sure you'll do
149:05 - great here are your hints this challenge
149:07 - is a really great candidate for CSS Grid
149:11 - in conjunction with the repeat function
149:13 - and your second hint is that for styling
149:15 - the squares look into using attribute
149:18 - selectors so go to MDM and look up
149:21 - attribute selectors go ahead and get to
149:24 - work you can do this and I'll see you in
149:25 - the
149:29 - solution hello this is the solution to
149:32 - the GitHub contributions graph CSS
149:34 - challenge where your goal was to build
149:36 - this contributions graph with generated
149:39 - HTML that is autogenerating different
149:42 - levels of contributions for each Square
149:45 - let me show you how I approach this
149:47 - problem firstly this is a bit hard to
149:49 - see so I'm going to select the UL and
149:52 - I'll temporarily make the font color
149:55 - white and you can see that I am starting
149:58 - off with a bunch of seemingly blank
150:00 - unordered lists with seven list items
150:04 - each a good place to start I think is to
150:07 - get rid of the default styles for the UL
150:09 - so I'm going to zero out the left
150:11 - padding and set the list style Type To
150:14 - None let's take a look at the generated
150:18 - HTML each Square has a class of square
150:22 - and I'll start by styling the squares so
150:24 - I can see them going back to index.css
150:27 - I'll select the square class and I'm
150:30 - going to make every square a height and
150:32 - width of 10 pixels and we'll give it the
150:35 - default Square background
150:37 - color a little bit difficult to see let
150:40 - me actually make the background color
150:42 - pink temporarily here all of my squares
150:45 - they're all stuck together let's get
150:47 - these into the right shape and the way
150:48 - I'll do that is by by targeting this
150:51 - parent graph class I'm going to make
150:53 - that a grid container up here I will
150:56 - select the grid class and we'll make it
150:59 - a grid container with display grid and
151:02 - then what I'll do is use grid template
151:04 - columns and I'll use the repeat function
151:08 - to say I want 52 elements all taking up
151:12 - one fraction of
151:14 - space this should actually be graph that
151:17 - gives me 52 Columns of 7 squares each
151:21 - the problem is that all the squares are
151:22 - still stuck together so in my Square
151:25 - selector I'll give each square a bit of
151:27 - margin but I'll zero out one side of the
151:31 - margin so that it's not doubled up on
151:33 - the right finally if we look at the
151:35 - example each square has a little border
151:38 - radius I'll add a border radius of about
151:41 - two pixels that is looking good let me
151:44 - get rid of this pink background and we
151:46 - are getting closer I want to make sure
151:48 - to add my graph background so I'll grab
151:51 - that variable and use it here and
151:54 - finally I want the graph to have a
151:56 - little padding this is very close to
151:58 - what we're aiming for now we just need
152:00 - to get some colored squares remember
152:02 - that if we look at the generated HTML
152:05 - each square has a data value that is
152:07 - randomly assigned a number and that
152:09 - number will be 0 3 5 or 10 this is where
152:13 - my attribute selectors come in I'll use
152:16 - an attribute selector to select that
152:18 - data value property and I'll say if the
152:21 - data property equals three I want the
152:23 - background color of the square to be my
152:26 - level three color gives us some dark
152:29 - blue squares and then I will just repeat
152:31 - this with the other data values so it if
152:34 - it has a value of five I want my level
152:37 - five color and if it has a value of 10 I
152:40 - Want My Level 10 color and that is our
152:43 - graph completed you'll see that every
152:44 - time I refresh I get new random colors
152:46 - for my graph I love real world world
152:48 - challenges like these because it can be
152:50 - really fascinating and really
152:51 - educational to try to figure out how the
152:54 - developers at GitHub may have
152:56 - accomplished this I've probably done it
152:58 - in a different way than they did but you
153:00 - can still learn so much by recreating
153:03 - these cool features that you see in web
153:05 - applications every day really excellent
153:07 - work on this challenge you've done a
153:09 - great job see you
153:15 - later congratulations you have reached
153:18 - the end of the CSS challenges you've
153:20 - done great work so pat yourself on the
153:22 - back and do a little dance if you
153:24 - attempted to complete all of these
153:25 - challenges you are truly a CSS wizard
153:28 - you've matched designs inspired by real
153:30 - life web components did the math to
153:32 - recreate perfect country flags and
153:34 - exercised your CSS animation prowess to
153:37 - create some really fun practical and
153:39 - useful visualizations here's what I
153:41 - suggest if you'd like to go further and
153:43 - continue honing your CSS skills find
153:46 - components or layouts that you love in
153:48 - your favorite apps and on on the
153:49 - internet and recreate them as closely as
153:51 - you can always a great exercise I also
153:54 - encourage you to customize and
153:55 - personalize what you built in this
153:57 - course by experimenting with different
153:58 - themes colors and fonts there's nothing
154:00 - that you can't do with CSS so go out and
154:03 - create something smooth creative and
154:05 - beautiful thank you for flexing your
154:06 - Flex box skills with me and happy coding