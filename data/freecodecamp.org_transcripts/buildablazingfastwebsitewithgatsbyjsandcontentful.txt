00:01 - hi my name is khalid and in this video
00:03 - we'll take a basic gatsby example and
00:06 - turn it into a contentful powered
00:08 - website let's get started
00:11 - here we have the gatsby documentation
00:13 - website
00:15 - and it's telling us to install first the
00:18 - gatsby cli so let's do that
00:30 - once that's done
00:32 - it's telling us to create a new site
00:34 - which is using gatsby
00:37 - and then new
00:38 - gatsby site
00:41 - so
00:42 - we hit enter
00:45 - it's installing all the packages now
00:58 - the installation is done let's cd to the
01:00 - directory
01:06 - and start gatsby develop or
01:09 - it's all there's
01:10 - always this npm script so we can do npm
01:14 - run develop
01:17 - now it's building all this stuff
01:23 - and once it's done it will give us the
01:25 - link to our website if you go here
01:29 - this is a very basic gatsby website
01:33 - and with navigation
01:36 - now let's install
01:38 - the gatsby source contentful plugin to
01:41 - be able to pull the data from contentful
01:44 - so
01:46 - we close our server
01:48 - and then we do npm install and then we
01:50 - need to save
01:52 - the gatsby source contentful plugin
01:55 - hit enter
02:08 - once that's done we need to add our
02:11 - contaminant credential
02:13 - into the gatsby config
02:18 - so we go to our getspeedconfig.js
02:23 - and as you can see here it only has one
02:25 - plugin
02:27 - so
02:28 - we need to expand this
02:34 - and then in here
02:37 - our uh plugin will be defined as an
02:40 - object because it accepts uh some
02:42 - configuration option so first will be
02:45 - resolve and then here we need to type
02:49 - the name of the plugin which is gatsby
02:51 - source
02:53 - contentful
02:56 - and in here
03:00 - we need to pass in options
03:04 - and basically the options
03:06 - are two things
03:08 - one is the space id
03:11 - [Music]
03:14 - which we'll get in a minute
03:16 - and then we have the access token which
03:20 - is the delivery access token that you
03:22 - need to do
03:23 - in there so let's get let's guess these
03:27 - credentials
03:29 - so i got the app that to
03:31 - app.contanfo.com and then in here i
03:34 - select my space
03:37 - i already have few
03:39 - predefined
03:41 - articles that you create
03:43 - but i need to go to the apis tab and
03:46 - then in here
03:49 - i just
03:51 - add
03:53 - a new key
03:55 - and then call it
03:57 - gatsby website but here i'm not gonna do
04:01 - this because
04:02 - i already defined my key
04:07 - so i go here
04:09 - first i get my space id
04:14 - and now i need to get my talk
04:19 - [Music]
04:21 - and we should reset
04:26 - okay so now
04:28 - we need to write some gatsby specific
04:32 - code to be able to create a page for
04:35 - each blog post
04:37 - to tell gatsby that we need to create
04:39 - some pages dynamically we need to export
04:42 - a function called create pages
04:46 - so we do exports
04:49 - create pages
04:53 - and here we get
04:55 - an object as a configuration
04:59 - we are interested in the graphql
05:01 - function
05:03 - and then
05:04 - the bound action
05:07 - creators
05:13 - so this will be a function
05:23 - in here
05:24 - first thing we need to get the create
05:27 - page function
05:30 - from the bound action creators
05:39 - this will use to map
05:41 - a path to an actual react component
05:46 - also
05:47 - we will need
05:49 - to return a promise since this is a
05:51 - promise based api you can also
05:55 - use the callback but that's
05:59 - you can check that in the documentation
06:02 - so here
06:04 - our new promise will have the
06:07 - resolve and reject as usual
06:16 - now we need to get the path to our blog
06:19 - post template that we will define later
06:22 - so for now we'll assume that
06:24 - it will be inside the src and templates
06:27 - folder so we call it
06:29 - blue post
06:31 - template
06:33 - and then here we'll use the path.resolve
06:38 - and then src
06:40 - templates
06:43 - block
06:44 - post js
06:50 - and here of course we need to
06:54 - define the path
06:58 - [Music]
07:02 - it's basically mainly important
07:10 - okay so here we need to call the result
07:13 - function
07:16 - and inside the result function we'll
07:19 - have
07:20 - the graphql function
07:22 - that will accept our query
07:25 - and our query basically will be
07:30 - all
07:31 - contentful
07:34 - block
07:37 - and then here the limit
07:40 - would be 100
07:43 - you can make it up to 1000
07:47 - and inside of these all block contentful
07:51 - we'll have edges
07:52 - and inside of edges
07:54 - we have node
07:56 - and in there we'll have
07:59 - access to all our fields that defined in
08:02 - content for like slag id and so on we're
08:05 - only interested in the id and slack
08:08 - in here
08:11 - the rest of the data we can pull it on
08:13 - later so you might be wondering why this
08:16 - is called all contentful blog where this
08:19 - name is coming from so if you go to your
08:21 - website to you to
08:23 - the contentful app excuse me and then go
08:26 - to your content module you can see here
08:29 - is there's a blog content type
08:33 - and there's also author content type
08:37 - what the gatsby source content plugin is
08:39 - doing
08:41 - is actually getting all your entries
08:44 - and they group them it group them based
08:47 - on the content type so
08:49 - here
08:50 - basically we are asking the
08:53 - gatsby to give us
08:54 - all the entries that are
08:57 - based on this content type which is blog
09:00 - so think of it as
09:02 - all contentful and then here
09:05 - is your content type
09:07 - you're gonna type id basically
09:10 - okay
09:11 - so here we change the spec to block
09:14 - so in here
09:16 - this graph function
09:18 - returns a promise so we need to resolve
09:20 - that
09:21 - and then it will give us a result
09:23 - [Music]
09:25 - and the result
09:28 - will contain an error if something wrong
09:30 - is with
09:32 - the query so we should check for the
09:34 - errors
09:37 - with result dot errors
09:39 - here we just simply reject
09:44 - and we're passing the earth so we can
09:46 - see them in the
09:48 - console
09:49 - otherwise
09:51 - we can just create the pages based on
09:54 - the data so
09:56 - inside of results there will be a data
09:58 - object and inside of the data object you
10:01 - will need to follow this
10:03 - through so here would be all contentful
10:08 - block or all contentful whatever the
10:11 - content type you looking for
10:14 - and then in there it will be there will
10:16 - be edges and edges basically are like
10:20 - all the objects that contains our data
10:23 - so we need to look through them
10:25 - so we need to do for each
10:29 - and then here
10:30 - we get for each edge
10:37 - we need to create a page
10:40 - so
10:41 - here we call our create page that we got
10:44 - from the bond actually create
10:46 - and the create page will accept a
10:49 - function
10:49 - an object sorry so first we need to
10:53 - specify the path for that
10:57 - and the path for that will be edge
11:02 - dot node
11:04 - and then slide so the slug is the unique
11:08 - string that
11:10 - defines the path for our
11:13 - blog posts
11:16 - and also we need to map that to a
11:19 - component
11:19 - [Music]
11:24 - and here we just need to provide the
11:26 - path of the component to gatsby which is
11:29 - here
11:30 - the blog post
11:32 - template
11:37 - yeah made a spelling mistake in there
11:40 - yeah no that's right
11:42 - and also
11:44 - you you can passing some
11:46 - [Music]
11:47 - data to the component to the context and
11:50 - this is actually will be useful
11:52 - later when you
11:55 - want to use queries
11:58 - graphql queries inside of that template
12:01 - component
12:02 - so here we are interested in the slag so
12:05 - we pass in just the slack
12:08 - because we'll use it inside of that
12:09 - object to get the data
12:12 - related to this
12:13 - blog post
12:14 - so it will be hedge.node.slack
12:18 - just need to return here
12:24 - we hit save
12:26 - we need to create our blog post template
12:30 - so we go to src
12:32 - and then we add a new folder called
12:34 - templates and inside of it
12:37 - we create the file called the
12:39 - blogpost.js
12:42 - and then if we go here this is our
12:45 - template component
12:46 - and then here
12:52 - i need to define my component
12:54 - and here we will call it blog
12:58 - post
13:00 - component we don't need these styles
13:07 - and we don't need the constructor
13:12 - you don't need all of that
13:17 - and let's clear this templating
13:21 - stuff okay so
13:23 - this is a clean component
13:28 - first we need to add the prop type
13:31 - to our component
13:34 - so here
13:38 - types
13:40 - to
13:42 - we'll get a data
13:44 - we'll see where this is coming from
13:46 - later and this will be a pro type
13:53 - dot
13:54 - object
13:58 - what is required
14:05 - and also here we need to have a query
14:08 - specific to this template
14:11 - and to tell gatsby about it we need to
14:14 - export
14:17 - a variable called page
14:21 - query
14:23 - this will be template string with the
14:26 - tag graphql
14:30 - and then here
14:32 - we
14:33 - do query
14:35 - blog post
14:36 - query
14:38 - so this is basically
14:40 - just us defining this
14:43 - function name it could be anything
14:45 - so
14:46 - this will accept the slag
14:49 - of type string
14:55 - and
14:56 - once we get the slag
14:59 - which we've been passing it through the
15:01 - context in the gatsby node.js
15:04 - we call contentful
15:08 - block so contentful blog this is the
15:10 - sing thing
15:13 - so all contentful blog is the collection
15:15 - and this is just uh
15:19 - just getting one
15:20 - [Music]
15:22 - entry based on this one based on some
15:25 - filtering we'll be doing
15:28 - and
15:30 - we'll pass the slag
15:32 - and it should equal
15:37 - to
15:38 - the
15:38 - slack our slag
15:43 - and in here
15:45 - what we'll be getting is
15:47 - title
15:49 - and
15:50 - slack for now
15:53 - so after we get this data
15:58 - we need to
16:00 - fill in the render
16:02 - function here so
16:05 - we can for now just
16:07 - have some dip
16:10 - and inside of the div
16:15 - we display simply
16:17 - for now the title
16:20 - so maybe we can wrap this in an h1
16:28 - and then we hit save
16:34 - and for the title we will be getting it
16:37 - from
16:38 - [Music]
16:40 - the props so title
16:43 - is actually coming from this dot
16:47 - props
16:48 - dot data dot
16:51 - contentful
16:54 - blog
16:57 - and then hit save
17:02 - so if everything is fine
17:05 - now we should be able to
17:08 - run this
17:12 - and test our
17:15 - website
17:17 - so it's building
17:18 - and it failed
17:20 - you probably were screaming at me
17:22 - because i forgot this new promise
17:25 - in the beginning when we were creating
17:26 - the gatsby node.js so i added that
17:29 - and our website should build fine right
17:32 - now so we do npm run develop
17:43 - and everything is fine yeah now the
17:45 - website it looks the same but
17:47 - we actually created pages and to test
17:50 - this we
17:51 - can trigger the 404
17:54 - page of gatsby basically by just go to
17:56 - the 404
17:59 - or
18:00 - adding any random id
18:03 - and the good thing in develop mode when
18:05 - you trigger the 404
18:08 - by error
18:09 - gatsby will show you this page and will
18:11 - tell you all the pages that was created
18:13 - and as you can see here
18:16 - we actually created our pages so if you
18:18 - go here
18:19 - this is one of the blog posts title and
18:22 - here again
18:25 - and then if you go back to content form
18:27 - and we check our content these are the
18:29 - titles
18:31 - so for example like do you know hacks
18:35 - and it's here
18:37 - and then we can check also
18:39 - the slag
18:40 - which is matches this lag
18:44 - so so that's great
18:47 - but we need to
18:50 - list
18:51 - have a list of all the articles on the
18:52 - index page which is very easy
18:55 - we just need to change the index
18:58 - js
18:59 - so if we go to our source pages
19:04 - this index.js
19:07 - [Music]
19:10 - remove
19:11 - all of this
19:12 - that we don't need and then if i save
19:16 - you can see that reflecting here because
19:18 - now we don't have anything
19:21 - and then
19:22 - we need to define
19:24 - another component in here as a function
19:27 - we call it a blog post
19:30 - we'll see why for a moment in a moment
19:37 - and then the blog post will get
19:41 - props instead of props there will be a
19:43 - node object
19:45 - and then here we simply
19:47 - return
19:49 - the jsx that we need and
19:52 - to be just an item inside of a list
19:56 - so and then i
19:59 - and then here
20:00 - we just do
20:03 - link
20:04 - this is a special special link object
20:08 - coming from gaspi so
20:10 - it knows
20:11 - which uh
20:12 - when you
20:14 - knows how to map links to a component
20:16 - through its route so we tell it to go to
20:21 - node.slack
20:25 - and then
20:27 - here
20:28 - for the text it will be
20:31 - node
20:32 - a title
20:36 - and then we close the link here
20:41 - and then
20:42 - for our index page
20:44 - it will get data
20:47 - inside of the props
20:50 - and then inside of the div
20:53 - instead of the div sorry
20:57 - we'll have a url
21:04 - and then
21:06 - in here what we're gonna do is we do
21:08 - data
21:10 - dot all contentful
21:13 - blog
21:15 - dot edges so it's similar what we did in
21:18 - the gatsby node.js
21:20 - and then we map all that data
21:25 - to
21:27 - a component
21:29 - which is basically
21:31 - the block
21:32 - post
21:34 - component and then we're passing the
21:36 - node
21:40 - so we edge dot node and then we need
21:42 - just to close this
21:47 - yeah
21:48 - all set
21:50 - one more thing
21:52 - we need to
21:53 - have a query for this page to fill in uh
21:57 - the data so again we export the page
22:01 - query
22:04 - it should be a template string
22:08 - with the tag graphic and then here again
22:12 - same thing
22:13 - query
22:15 - page query
22:19 - and the page query will be all
22:23 - contentful blog because here we actually
22:26 - want the collection and not a single
22:29 - entity
22:31 - and then here we do a filter
22:34 - filter will be an object
22:41 - and inside the filter
22:44 - we need to
22:45 - have the node
22:49 - local
22:51 - i'll explain a bit why we need that
22:55 - and then here the location will be
22:57 - english us
22:59 - so why this node locale uh the thing is
23:03 - that the contentful
23:05 - the source plugin for contentful and
23:07 - gatsby it uses the sync endpoint and all
23:10 - the data is coming in the form of local
23:14 - and then
23:15 - you get the field
23:16 - and
23:18 - here by default my website has only one
23:20 - locale which is english us but you can
23:23 - make this super dynamic and maybe
23:26 - get the german one and and so on
23:29 - but for default there's always the
23:31 - english os or
23:33 - the default
23:35 - local space if you go to space settings
23:37 - and locates
23:39 - you can see this is the default location
23:41 - it might be different for you but
23:43 - mainly
23:44 - but for me i use english yes so that's
23:47 - why i put in here english us
23:51 - okay what do we want to get from there
23:54 - we have edges
23:55 - as always inside of the edges there's
23:58 - the node
24:00 - and we need to get the title of the blog
24:03 - post and the slug
24:06 - so we hit save
24:10 - and go back to our website
24:13 - and you can see here we have the list of
24:16 - all the blog posts
24:20 - and here
24:22 - we go back
24:23 - we have everything
24:26 - let's improve our website a little bit
24:29 - more so as you can see here
24:31 - we only show the title so what about the
24:34 - content
24:36 - so a nice trick is to debug
24:39 - any sort of data in
24:42 - gatsby
24:43 - is to
24:44 - use the local graphql server that is
24:47 - spawned with any development build as
24:50 - you can see here it's showing us a link
24:54 - so if you go there
24:58 - you can see that we can query our data
25:01 - and also there's autocomplete so
25:03 - if we go back to the structure of our
25:07 - blog posts
25:09 - you can see that there's a field
25:12 - called content and yeah by the way i
25:14 - added a featured image because uh we're
25:17 - gonna be using it uh later to show off
25:20 - some of
25:22 - the baked in uh feature of
25:25 - contentful images so it will be using
25:28 - the image api
25:32 - so going back to the content field
25:35 - this is like the content of our blog
25:38 - and we basically want to show it
25:41 - so
25:42 - let's check how we can query that so we
25:45 - can first debug that and once we have
25:47 - the correct query
25:49 - we can move it to our blog and then show
25:52 - the content based on that
25:55 - so the field is called content so here
25:58 - we can add in just content
26:00 - and
26:02 - content if we hover over it it's
26:04 - actually
26:06 - a text node and the text node
26:10 - is
26:11 - handled as an object in gatsby when when
26:14 - the schema is created so we actually
26:16 - need to get
26:18 - the content of that content and then
26:20 - when you hit play here
26:22 - you can see that all the content is
26:26 - displayed in here
26:28 - but there's one problem uh this is
26:31 - actually the raw markdown
26:35 - data which is not that useful for us so
26:37 - we want basically html to work with
26:41 - to do that there's a neat package
26:44 - called gatsby transform transformer
26:46 - remark so this will detect any
26:50 - text node that has markdown and then
26:53 - password for you and will add a lot of
26:55 - neat features
26:57 - so
26:58 - let's
26:59 - test this
27:01 - first we need to install it
27:04 - i want to cancel the build
27:07 - and do npm install
27:10 - and then i need to save it and then the
27:12 - name of the plugin
27:26 - so that's installed
27:28 - we need to go to our usb config
27:34 - in here and then if we follow along
27:37 - it's a matter of just adding uh this
27:40 - plugin so
27:43 - just i'm just gonna copy this
27:46 - and then after contentful
27:51 - we can
27:55 - add our plugin in here
27:58 - and then don't forget
28:00 - comma and then we hit save
28:04 - so let's see what's changed in our
28:06 - content after we have this block so
28:09 - maybe we can also clear the cache and
28:11 - the public folders
28:13 - and then do npm run develop as before
28:19 - this will go through we'll build all the
28:21 - data query the data from content and so
28:24 - on
28:25 - and here if we
28:28 - refresh let's check what we have inside
28:32 - of the content now
28:33 - so if you go here
28:35 - based on
28:38 - the plugin we will have an html
28:42 - in here so
28:46 - we can actually uh to this child
28:50 - markdown remark and inside of that we
28:53 - can get the html and there's also the
28:55 - excerpt
28:56 - so accept is
28:58 - just a short
29:02 - few sentences from the whole content we
29:04 - can show it basically in the list of
29:06 - blogs
29:08 - but what we're interested in is actually
29:10 - the parsed html of the markdown content
29:14 - and if you see here there's the past
29:19 - content so let's add this to our
29:24 - detailed component so the
29:26 - the one that will show
29:28 - our blog
29:30 - so if we go to the template
29:34 - and then go all the way down here
29:37 - so we follow along as we have in the
29:40 - graphical
29:42 - i hope i pronounce it right
29:46 - so it's gonna be content
29:50 - inside of content we need to get
29:54 - child
29:56 - mark tom
29:58 - remark
30:00 - and inside of that we will have the hdmi
30:04 - so
30:07 - we save
30:08 - everything is compiling but we are not
30:11 - going to see that until we
30:13 - actually
30:14 - [Music]
30:15 - have the data in so
30:19 - we can create
30:20 - it even here
30:25 - and then
30:27 - from here
30:28 - we actually can get content
30:32 - and then in here we display that which
30:35 - is content
30:37 - and here you need to follow down the
30:39 - whole structure so content and set of
30:41 - content is child
30:44 - markdown
30:46 - remark
30:48 - and
30:49 - html
30:51 - so if we save hopefully everything will
30:53 - work no
30:56 - uh
30:57 - let's see
31:02 - yeah of course
31:07 - hit save
31:09 - and hopefully here
31:12 - everything is building and then if you
31:14 - go to the detail boom
31:17 - we have um
31:19 - our um
31:21 - h7 in here
31:22 - but
31:23 - it's actually not parsed because
31:26 - uh
31:27 - react will consider this as a string and
31:29 - not an html
31:31 - so what we need to do is to tell react
31:34 - to create
31:35 - the content as actual html
31:38 - so we're gonna delete all of this
31:43 - and then there's function called
31:47 - dangerously
31:52 - dangerously if we can spell it right
31:56 - set
31:57 - in our html
32:01 - and this will accept an object and
32:03 - inside of that we will have html
32:08 - and this html will be our content
32:12 - dot child
32:14 - i follow okay yeah
32:17 - so it's child
32:18 - market on
32:21 - remark
32:23 - dot html
32:27 - so if everything is fine this should
32:31 - work
32:32 - hopefully
32:35 - yeah it's compiling and as you can see
32:38 - here we have
32:40 - a need structure
32:42 - and everything is parsed
32:44 - and
32:45 - you can see
32:47 - and let's check another
32:49 - blog post here's the other one
32:52 - and another one
32:56 - all right
32:57 - that's pretty cool so
32:59 - let's also add a little bit of text in
33:01 - here
33:02 - to show like a teasing or an excerpt
33:05 - about
33:06 - what we are expecting inside of the
33:10 - detail of the article so we might get
33:13 - like the first
33:14 - 100 200 characters
33:18 - so
33:20 - to do that let's go back again to our
33:22 - graphql server and play around with the
33:25 - data
33:26 - so instead of html we can do excerpt
33:30 - so we can do excerpt here and you can
33:33 - see
33:34 - [Music]
33:36 - it's
33:37 - some text from the content
33:39 - we can actually
33:42 - say i want
33:43 - the first 300 characters from there and
33:46 - you can see it this is changed but for
33:49 - now we can just use the
33:53 - the default
33:54 - behavior
33:56 - which is here
33:57 - so that's that
34:00 - so we need to go to our
34:02 - index page
34:04 - which is the page that lists all the
34:06 - blog posts in here
34:10 - and we need to
34:13 - add content
34:16 - and inside of the content we need to
34:19 - call the child markdown
34:23 - remark
34:26 - and we get the excerpt
34:33 - so if we save everything is fine
34:36 - here
34:38 - we can just
34:40 - add another dip
34:43 - and inside of here
34:47 - we can
34:49 - do node
34:50 - dot content
34:53 - child
34:54 - markdown
34:58 - remark
35:00 - to
35:04 - and then we close the div tag
35:08 - and hopefully when we save
35:13 - everything show up but
35:17 - did it
35:23 - so
35:29 - content
35:31 - child markdown
35:34 - yes
35:35 - of course
35:36 - i made a typo
35:42 - and we save and as you can see here we
35:46 - we are able actually to
35:49 - display an excerpt
35:51 - and i'm sure with some css you can style
35:53 - this in the way you like and then when
35:56 - we go here we so we see the full
36:00 - blog post
36:03 - so uh
36:04 - one more thing
36:06 - in here is we maybe want to show
36:10 - for example the featured image so i've
36:12 - gone ahead already and added the same
36:15 - image pretty much to all the blog posts
36:19 - which is here
36:21 - and
36:24 - to test this again we can go
36:27 - to the same
36:29 - graphql server and then see so if we go
36:32 - to the field it's called featured image
36:36 - so
36:37 - after
36:37 - [Music]
36:39 - content here
36:42 - we do features image as you can see it's
36:44 - available in the
36:46 - autocomplete and then
36:50 - in here
36:51 - what the content contentful
36:54 - plugin
36:56 - gets people again will add is some new
36:58 - features which is some extensions
37:01 - to actually give you a responsive
37:05 - image size so we can actually do
37:08 - responsive
37:10 - resolution
37:12 - and then inside of the responsive
37:14 - resolution
37:15 - we can
37:17 - give an argument
37:20 - so i want it to be
37:25 - like 300 maybe
37:28 - and then we can actually do height
37:31 - and then i want it like 300
37:34 - and this will automatically create the
37:37 - corresponding urls to be using the
37:40 - contentful image api
37:43 - so from here we can get the src
37:46 - the src set
37:50 - also
37:51 - you can get the aspect ratio and the
37:53 - base64
37:55 - and so on
37:57 - so here we are for now we are just
38:00 - interested in the
38:01 - src
38:03 - and then if we
38:04 - do this
38:06 - you can see here
38:07 - that it's calling getting the image or
38:10 - potential
38:11 - and it's at passing the parameters in
38:13 - here you can check these in the
38:15 - documentation i will link below
38:17 - so you can actually do some
38:18 - transformation
38:19 - and
38:21 - the first hit to the contentful endpoint
38:24 - will be processed and then the
38:26 - other
38:28 - any same hit with the same url it will
38:30 - give you like a cached image so if you
38:35 - request a 3 300 by 300 image and it
38:39 - doesn't exist
38:40 - conductor will create it for you and
38:42 - cache it so the next time you just get
38:44 - the cache cached version so no extra
38:48 - processing in there
38:51 - so let's add the image to our list so i
38:54 - want maybe an image in here and then the
38:56 - text
38:59 - again we can update
39:02 - our query
39:04 - so we go here and then we want
39:08 - the feature image
39:12 - and i want
39:15 - responsive
39:17 - resolution
39:23 - and i want with
39:26 - 300
39:28 - and hate 300
39:36 - and i'm interested in the src
39:40 - so here we can just
39:43 - add our image tag
39:47 - and then we have the src
39:51 - we are getting the soc from node
39:54 - dot
39:58 - feature
40:03 - feature image
40:08 - and then
40:11 - you can see the structure here so
40:13 - responsive resolution
40:21 - inside the responsive resolution we have
40:23 - the src
40:24 - so hopefully
40:26 - this will work
40:28 - and we can see here the image obviously
40:32 - it's not
40:34 - well styled
40:37 - but you can see here it's
40:39 - there's the image there's the
40:42 - link to the blog post
40:44 - and so on
40:46 - so if you click here you can see
40:49 - blog post
40:51 - you will try to connect everything
40:52 - together and make our blog build
40:55 - automatically through
40:57 - circle ci
40:58 - whenever you publish
41:00 - an entry from potential or
41:03 - you do a normal commit but before doing
41:06 - that
41:07 - i would like to add some css to my blog
41:09 - to
41:10 - to look nicer
41:12 - so i've gone ahead already and added
41:14 - some css if you go to the layout and
41:17 - then see index
41:18 - css then go all the way to the bottom
41:21 - and this is what i added it's just basic
41:27 - css
41:28 - so to see the result
41:32 - we need to um
41:34 - go here to our ul shoot the list of blog
41:37 - posts and then do
41:39 - class name
41:41 - and then call this blog post
41:45 - and then once we save
41:49 - and by the way um
41:51 - it's
41:52 - the server still running that's why i
41:54 - had the autorefresh okay
41:58 - so now we have this kind of
42:00 - grid thingy but
42:03 - this is a blog post i added but
42:06 - the publish date supposedly if you go to
42:08 - content well it should be october 18th
42:11 - 2013 so it should actually
42:15 - be in the bottom of the list
42:18 - and we can solve that using uh sorting
42:22 - so
42:23 - so we need to go to our
42:26 - index page at least
42:28 - the blog post and then we add the sort
42:31 - sorting in there
42:32 - we can do easily this via graphql
42:36 - so
42:38 - this is the filters we have here
42:40 - and then
42:44 - we can just add
42:47 - another parameter which is called sort
42:50 - and the sort accepts
42:52 - the fields
42:54 - so we can actually sort based on
42:55 - multiple fields but for now we just sort
42:58 - but basic on the publish date
43:01 - and then
43:02 - we have the order
43:05 - which should be
43:06 - descending
43:08 - just like that and then we save
43:12 - and then go back to our server
43:17 - and we need to build again because the
43:19 - query
43:20 - needs to build again
43:24 - and then if we refresh
43:29 - everything should be fine and then there
43:31 - like as you can see here
43:33 - the old blog post is actually
43:36 - on the bottom of the list
43:39 - all right
43:40 - so
43:41 - this is looking good
43:44 - we can now start configuring our surface
43:48 - ui
43:49 - so first first first thing to do
43:52 - is to create
43:54 - a folder called
43:56 - circle so we can just do
44:00 - a folder called
44:02 - a circle
44:05 - ci
44:07 - and inside of that we will have a config
44:10 - embl file
44:12 - and then we go here
44:16 - and then here
44:20 - first thing is we tell circle ci that we
44:23 - want to use the new shiny version too
44:27 - and in here
44:29 - we tell it about our jobs
44:32 - so the jobs
44:33 - one will be build
44:36 - so this the build we want to build to
44:39 - only
44:41 - run
44:42 - when we are in master so
44:44 - any experiment
44:47 - you want to do in a separate branch and
44:49 - don't want the
44:52 - like the search side to deploy
44:55 - to your website or maybe you wanted to
44:57 - upload something somewhere else
44:59 - so
45:01 - and then
45:02 - uh
45:04 - all the new builds and search ci are
45:06 - based on docker images so we configure
45:09 - our image so
45:12 - say image and then
45:15 - circle
45:16 - ci and then node
45:21 - 7.1 or 7.10
45:26 - and once we configure the docker we tell
45:29 - the build
45:31 - process
45:32 - how to do
45:33 - the steps so first step would be
45:37 - check out
45:38 - this is a pretty fine circus ui
45:42 - and
45:44 - we want to do some caching so we don't
45:46 - need to um
45:49 - actually
45:50 - rebuild everything rebuild everything
45:53 - from scratch every time
45:55 - so we do restore cache
45:58 - and here we need to pass in two keys
46:00 - first one is
46:03 - the key based on the package.json
46:07 - so
46:08 - we just wanna
46:10 - check some
46:13 - of our package chaser
46:18 - and we need to pass in a fallback key
46:22 - in case
46:24 - there isn't any
46:26 - already cached
46:29 - items which is actually
46:34 - very useful because the first time we
46:36 - commit this
46:37 - nothing will be found there so we give
46:40 - it
46:41 - this
46:46 - dependencies
46:48 - and
46:50 - once we're done
46:53 - here we run our first command so we do
46:55 - run
46:56 - and the neat thing is we can actually
47:00 - name every step we do in here so here we
47:03 - can do for example install
47:06 - dependencies
47:08 - and the command in there
47:12 - obviously it's
47:13 - npm installed
47:16 - or yarn
47:18 - whatever you you're using
47:27 - we need to save our cache
47:35 - this is to tell
47:37 - circle ci to save the cache so
47:40 - path is
47:42 - here
47:44 - we can do node
47:46 - modules
47:47 - so with tester because i have to save
47:49 - the node modules
47:52 - and then
47:55 - give it the key
48:01 - actually here this needs to be
48:04 - two spaces back so the key will be v1
48:09 - dependencies
48:12 - and then
48:15 - the checksum of package json
48:26 - and now we need to
48:29 - run tests
48:31 - so since we don't have
48:33 - any tests in here
48:37 - we can just
48:38 - do
48:41 - a simple echo
48:44 - like no test so echo has the exit
48:48 - exit process
48:50 - with a number zero so it will be
48:52 - considered as successful
48:56 - and now we need to build
48:58 - our gatsby website
49:00 - so we need to define another run step
49:06 - and this will be named
49:11 - build
49:14 - and then the command that we need to run
49:16 - is npm run
49:19 - build
49:20 - which is specified in our package json
49:26 - after building um
49:31 - i would like to install
49:36 - the aws cli since
49:40 - i will be deploying to s3 so i'll be
49:42 - using the aws cll
49:44 - so the step will be named
49:47 - install
49:49 - aws
49:50 - cli
49:53 - and the command is
49:56 - since this is multi-lines we can just do
49:59 - pipe
50:00 - and then do
50:02 - sudo
50:04 - apt-get
50:06 - install
50:09 - python pip
50:12 - and the reason we are installing
50:15 - python
50:16 - is because the aws cli is uh
50:20 - depending on python and the latest
50:22 - version is always in the python pip
50:28 - and then
50:30 - here we need to install our ios wci
50:36 - and after we have that
50:39 - here i obviously forget about the
50:42 - column
50:46 - and then
50:47 - here
50:54 - i need to
50:55 - deploy to production
51:00 - so the name is
51:02 - deploy
51:05 - to
51:06 - s3 and our command will be
51:11 - aws
51:14 - s3 and then we need the sync in there
51:18 - and then we take the folder public
51:22 - then it's s3 and then the path of our
51:24 - back
51:26 - bucket
51:27 - so i have a subdomain called preview
51:31 - my website
51:33 - okay so i'll be
51:35 - deploying um
51:37 - there
51:38 - and then i want to delete
51:41 - anything that i actually
51:43 - deleted before
51:47 - and
51:48 - of course i need some cache control
51:52 - this is really
51:54 - nice for uh our static site so
51:57 - images and so on and don't we don't want
52:01 - the browser to load them every time you
52:03 - load the website
52:06 - so
52:07 - we will
52:08 - cache them
52:13 - and after that
52:17 - this is an optional step but since i
52:20 - have cloud fraud on top of my s3 bucket
52:24 - i need to
52:25 - invalidate all the caches in the
52:27 - in the cdn in there
52:31 - so before doing that i need to
52:35 - enable the cloud front feature in the
52:39 - aws cli
52:41 - so we can do this through
52:45 - this command is called aws configure
52:49 - and then set
52:51 - preview dot create
52:55 - validation
52:58 - true
53:00 - so that's the command that we need to
53:02 - use and it's called create validation
53:05 - and this will trigger what's called
53:07 - invalidation in cloudfront to
53:10 - delete all its
53:12 - copy through all the servers
53:15 - and then get the fresh one
53:17 - and then now it's time to
53:19 - start the invalidation
53:23 - so here we can do
53:26 - create
53:28 - or start
53:30 - cloud prompt
53:33 - validation
53:35 - and then the command will be
53:39 - aws
53:41 - cloud front
53:43 - and then you get the idea create and
53:45 - validation
53:49 - and then we need actually to
53:52 - pass our configuration as
53:54 - json is
53:56 - the easiest way i found out
53:58 - and then i will be copy pasting
54:01 - this station because i actually can't
54:04 - remember all of it
54:07 - here and then
54:14 - boom this is all the
54:16 - json
54:18 - i can actually explain it a little bit
54:20 - so um
54:22 - for creating the validate creating them
54:24 - validating
54:26 - and validation sorry we need the
54:28 - cloudfront um instance so every
54:32 - cloudfront instance
54:34 - has like this kind of an id so you get
54:37 - it from aws
54:39 - and then
54:41 - here you tell it to clear the path
54:44 - like the main path and star so this
54:46 - means like
54:47 - delete any reference or any cache for
54:50 - every file in there
54:54 - and
54:55 - from there
54:57 - we actually
54:58 - are done
55:00 - in the yaml file so we can just
55:04 - save this
55:06 - and then i have
55:09 - somewhere
55:11 - this syntax error
55:15 - duplicate mapping key
55:16 - yeah that's fine
55:19 - i need that
55:22 - yeah but maybe it's this is my
55:27 - jslander
55:29 - somehow is picking this stuff up
55:32 - um
55:33 - yeah now we're done uh what we need to
55:36 - do
55:37 - is define this
55:39 - cloudfront instance as a command line
55:41 - bar in
55:43 - circleci
55:45 - and one thing actually here
55:49 - after
55:50 - like if your
55:52 - project is public after this emulation
55:55 - is created
55:56 - actually the cli will spit out a json
55:59 - that contains the
56:01 - instance
56:03 - of your cloud front
56:05 - and this is okay because you still need
56:08 - also other credentials to create a
56:09 - validation
56:11 - but
56:12 - if you want to hide all of these logs
56:15 - you can just simply
56:17 - redirect
56:19 - the errors and the stdr and sddl to the
56:23 - dev node so this way
56:25 - it will run the command but
56:27 - any output will be just ignored so no
56:31 - output after this
56:33 - which is a nice trick to do
56:39 - circuits i provide actually a nice tool
56:42 - to verify your
56:44 - config yaml before even push it to the
56:48 - ripple
56:50 - so we can actually
56:55 - do circuit ci config validate and then
56:57 - we give it the file and it should tell
57:00 - us that okay
57:01 - our config file is valid so
57:05 - that's nice
57:08 - for now
57:11 - we need to go to circle ci and then we
57:14 - add our project
57:18 - and our project is actually
57:22 - in here
57:26 - and it's called
57:30 - contentful
57:32 - the gatsby content from our site
57:35 - which is
57:38 - this guy in here
57:44 - so
57:46 - we do add first
57:49 - and then
57:52 - we
57:53 - go to our site and click setup
58:00 - and then here
58:02 - this is
58:04 - the project so
58:08 - we need to push everything in here
58:14 - and then we call this um
58:17 - ci
58:23 - first i need to add everything and
58:25 - commit
58:28 - and then we hit push
58:36 - okay
58:37 - all is good
58:39 - if we go here and do start building
58:45 - it should pick our configuration so
58:47 - let's give it a
58:49 - few seconds
58:53 - you can see here it's going through
58:56 - the steps that we defined so first
58:58 - installing the installing the
59:00 - dependencies
59:12 - this will take some time
59:14 - as it's the first time doing this
59:20 - so i'll speed up
59:22 - the recording a little bit and here's
59:24 - the next step
59:33 - okay now it failed because it's actually
59:36 - um
59:37 - expecting some uh command line bars that
59:40 - i need to
59:42 - add in there
59:43 - and if we go to our psp config
59:47 - you can see it's expecting
59:51 - these two
59:53 - environment wires so let's
59:57 - do that
60:00 - so we need to go to settings
60:04 - and then
60:05 - environment variables and then we do we
60:07 - do add
60:09 - this is the space
60:12 - so we go here this is our space
60:16 - and then we paste in
60:18 - in here and then
60:19 - we add another
60:21 - variable
60:24 - which called
60:29 - token and
60:32 - and then we go to our space apis
60:36 - and then
60:38 - get the token from here
60:43 - and let me add the bar
60:46 - and
60:49 - if we go back
60:52 - and then hit rebuild
61:22 - and that's done now it will use the aws
61:25 - cli to deploy to s3 bucket
61:29 - and of course it fails because i need to
61:32 - add the s3
61:35 - credentials in here
61:38 - so first let me go to
61:40 - console
61:44 - dot fws.
61:50 - so i go to the i am
61:56 - and here i go to my users
61:59 - and then
62:01 - i go to this user
62:04 - and go to security credentials
62:12 - and i get my access key
62:20 - and then i go in here and there's
62:22 - actually the
62:27 - aws permissions i put in my access key
62:32 - and then this i save that
62:35 - and we go back to our build and then
62:38 - rebuild again
62:45 - so i just realized that we don't need
62:47 - any cloud front and validation in here
62:50 - because um
62:52 - how it did set up the s3 bucket is
62:55 - it has no
62:56 - uh cloud front installs on top so it's
62:59 - just
63:00 - pointing to an s3 bucket uh after this
63:03 - if i go to my preview
63:07 - website you can see that i have my
63:10 - website here already
63:12 - and it's deployed
63:15 - next part is actually to go to um
63:21 - first we need to disable this cloud
63:23 - front and validation
63:25 - so let's go to the code into our config
63:30 - and then
63:32 - we just
63:34 - delete all this part
63:43 - and then
63:45 - we add everything and then we do commit
63:59 - and we can push that
64:07 - okay
64:08 - let's take a look on how we can automate
64:12 - deployment whenever we publish an
64:15 - article on contentful
64:17 - so
64:19 - we can do that through the webhooks
64:22 - we can go to space settings
64:24 - webhooks and then we add the new webhook
64:28 - here we can
64:29 - call it gatsby
64:32 - website
64:34 - and then the url
64:36 - is
64:39 - this one
64:40 - which is
64:43 - the url to the surface ai api
64:46 - so
64:47 - here we need to
64:49 - specify the username
64:53 - and then
64:55 - in here this is the project name
64:59 - which is basically this one
65:06 - and we need to tell it which branch to
65:08 - build
65:10 - so usually this is master and then here
65:12 - there's circle uh token so we need to
65:16 - get an api token from circle ci
65:20 - so we go here user settings
65:23 - and then personal api keys
65:27 - and i create a new one and i call it
65:31 - let's be content for
65:34 - website and then add it and then copy it
65:41 - and now i just add this token
65:44 - in here
65:46 - and
65:47 - i only want this web hook to be
65:48 - triggered whenever i publish an entry
65:52 - unpublish an entry or delete it and same
65:55 - for assets
65:57 - and of course if you have a preview
65:59 - environment you can for example do it on
66:01 - the autosave
66:04 - so i hit save
66:08 - then i go back so if i go to my content
66:12 - go to this title and
66:15 - i want to remove this extra
66:18 - word in here and then hit publish
66:22 - so this should trigger
66:27 - a circle ci
66:30 - build
66:31 - so it's in here
66:34 - and as you can see
66:35 - it started
66:39 - and it's running
66:40 - and it should deploy
66:44 - the new website
66:48 - here's building
67:06 - and deployment is successful so if we go
67:09 - in here
67:13 - we still have
67:15 - our website deployed
67:18 - and
67:19 - now we have
67:21 - the full uh circuit so whenever an
67:23 - editor goes in here
67:25 - and then add the blog post so let's just
67:28 - add a test
67:31 - blog post so
67:34 - we call it this is
67:38 - a test
67:40 - and then we have test
67:43 - content we can link
67:46 - an image
67:49 - and the date should be um
67:52 - today
67:53 - and the author
67:59 - is here and then i hit just publish
68:04 - so this should trigger another build
68:07 - as you can see it's running
68:16 - so now hopefully when i go here i can
68:19 - see
68:20 - the new blob in in here so this is a
68:22 - test which is the same
68:25 - so
68:26 - we can also go here and delete it
68:29 - and this is of course we'll start again
68:31 - another build
68:33 - and
68:34 - we will end up with
68:37 - a website without this book blog post