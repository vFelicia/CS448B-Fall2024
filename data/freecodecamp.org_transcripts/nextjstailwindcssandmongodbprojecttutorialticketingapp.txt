00:00 - in this comprehensive tutorial you will
00:02 - learn how to use nextjs the new app
00:04 - router and the power of Tailwind CSS to
00:07 - create a ticketing application from
00:09 - scratch you'll learn how to set up a
00:12 - mongodb atlas database and seamlessly
00:14 - connect it to your nextjs app using the
00:17 - mongus library in this step-by-step
00:19 - course Jake lower will help you master
00:22 - the art of building web applications
00:25 - with the latest
00:26 - Technologies what is up free code Camp
00:29 - thanks for the to the channel in today's
00:31 - video we're going to cover creating a
00:33 - ticketing app with nextjs new app router
00:37 - so this is 13.4 plus as of recording
00:40 - this video it's like 13.5 right now but
00:42 - anything should work we're going to
00:44 - cover all the crud applications and show
00:46 - you how to hook it up to a mongod DB
00:49 - Atlas instance for free as well as
00:52 - Tailwind CSS for our styling if you like
00:55 - these kind of videos don't be shy about
00:56 - checking out my channel as well Clarity
00:58 - coders we have a next off video coming
01:02 - out very shortly you can maybe find the
01:05 - link in the description or the comments
01:06 - below let's not waste any more time and
01:09 - jump right in so what we're going to do
01:11 - specifically today is work with nextjs
01:13 - and we're going to use the new 13.4 app
01:16 - router that's now stable to set up an
01:19 - application and you can see how quickly
01:21 - we can flesh out a front end and back
01:23 - end all in one application all at one
01:27 - time we're going to create this basic
01:29 - ticket app and we're going to do all of
01:32 - your crud functions so we're going to be
01:34 - able to create tickets update tickets
01:36 - delete tickets and read tickets into our
01:39 - application we're going to do this with
01:41 - as few libraries as possible and I'm not
01:43 - going to do a lot of fluff in this
01:45 - project because I want you to see how we
01:47 - can quickly spin us spin up this
01:49 - application then you can grow it over
01:51 - time let's not waste any more time and
01:53 - Jump Right In I'm not going to set up a
01:55 - lot of stuff in this video I'm going to
01:57 - assume you have no JS install
02:00 - but if you don't you're going to want to
02:02 - do that first so you're going to search
02:04 - for nodejs and you can download whatever
02:08 - the LTS version is right now so go ahead
02:12 - and download that and install it that's
02:14 - going to give you mpm an MPX that you
02:17 - can install your project with I'm also
02:19 - going to use Visual Studio code you
02:21 - don't have to you can use any text
02:24 - editor or IDE you want but this has a
02:26 - lot of unique libraries and features
02:29 - that I'm going to show showcase as well
02:30 - that make things really quick so now
02:32 - what I'm going to do is I'm going to use
02:33 - the integrated terminal as well so I'm
02:35 - going to open up a new terminal window
02:37 - and I'm going to actually create our
02:39 - project you can see here that I'm using
02:41 - get bash you can The Bash shell you can
02:43 - use whatever you want again you don't
02:45 - have to follow my but if you want to
02:46 - follow along and everything looked exact
02:49 - that's the terminal that I'm using as
02:50 - well down here so what we're going to do
02:52 - is we're going to navigate to wherever
02:53 - you want to create your folder so I'm
02:56 - just going to do it on my desktop
02:58 - here create
03:01 - next app we're going to use
03:07 - 13.43 cuz that's the version we're on
03:09 - right now so if you want to follow along
03:11 - exactly don't want any surprises that's
03:12 - what I do if you're relatively close in
03:15 - time to when this video is released to
03:17 - running this project you can also do at
03:19 - latest and that would probably be fine
03:21 - as well I'm going to do this just so
03:23 - it's for sure going to look exactly and
03:25 - work exactly like we're showing you here
03:27 - in this video now you can title your app
03:29 - you can't use capitals and this is going
03:31 - to actually create a project folder
03:33 - wherever you are so whatever we call
03:35 - this it's going to create that folder on
03:36 - our desktop so we can call it ticket app
03:38 - or whatever you want let's not use
03:40 - typescript so make sure the blue is on
03:43 - no we'll use eslint we'll use Tailwind
03:46 - CSS we don't want the source directory
03:49 - we want to use the app router and we do
03:52 - not need to customize so we're going to
03:53 - select no here any import
03:57 - aliases all right awesome so now it's
03:59 - created our app so now we should have
04:01 - that folder on our desktop so we can CD
04:03 - into that or whatever terminal you're
04:05 - using it might be different so we'll CD
04:08 - into ticket app cool now our terminal is
04:11 - there and we can actually open that
04:13 - folder in Visual Studio code as well so
04:16 - you can go file and then open folder and
04:18 - then navigate to that folder once you do
04:21 - that you should have something like this
04:23 - so this is going to be the basic of our
04:24 - project everything now is contained
04:27 - within this app folder here most of
04:29 - everything that we'll need so we got our
04:31 - page our layout and our Global CSS we'll
04:34 - look at that in a minute we are going to
04:35 - use Tailwind for this project so you'll
04:37 - see we have a tailwood configure that
04:39 - we're going to use and of course your
04:41 - package.json that you can see all the
04:43 - libraries that we're using as well I
04:45 - want to run through really quickly the
04:47 - extensions I use with my project because
04:49 - I do use them and it does help a lot so
04:53 - the extensions that we're going to use
04:54 - in this
04:56 - project or that you can use to help is
04:59 - this es7 plus react redex react native
05:03 - Snippets and it's by DS
05:07 - znj d r it has 9.2 million downloads
05:11 - what this is going to allow us to do is
05:13 - create boilerplate code really quickly
05:15 - I'll show you in a minute so if you want
05:17 - search for this extension in the
05:19 - marketplace and install it another one
05:22 - that we're going to use is eslint so if
05:24 - you search for that it's by Microsoft
05:26 - this is going to show us airs and
05:28 - linting in our project you'll see how
05:30 - that works as well go ahead and install
05:32 - it it's very helpful shows you problems
05:34 - before you know there's problems that
05:36 - kind of thing we're going to use
05:38 - prettier now this is something that I'm
05:41 - uh I don't know maybe it's maybe it's
05:43 - not the thing that I'm brow of but it
05:46 - formats your code automatically on Save
05:49 - it's so freaking handy so go ahead and
05:52 - if you want to install prettier as well
05:54 - so you can get a little sloppy when
05:56 - you're writing your code and then as you
05:57 - as soon as you hit contrl s it's going
05:59 - to save and format that code and make it
06:02 - look nice for you so I use that as well
06:04 - and the last one that I'm going to show
06:06 - that I use is
06:07 - Tailwind CSS intellisense so this is
06:10 - Tailwind labs and it again it gives you
06:13 - Snippets of code um but if you want to
06:15 - follow along exactly go ahead and
06:17 - install that as well with that being
06:19 - said we should have all of our
06:21 - extensions installed you can pause and
06:23 - do that if you would like we can open up
06:25 - our Global
06:27 - CSS shrink this down a little we're
06:30 - going to go ahead and delete everything
06:31 - out of here but one thing first if
06:33 - you're using prettier I want you to go
06:35 - ahead and hit fold control and shift and
06:38 - then hit P or whatever depending on your
06:41 - operating systems and then we're going
06:42 - to search for preferences and the open
06:45 - settings UI and from here we can search
06:48 - for
06:50 - formatter so you want to make sure a
06:53 - couple things are switched you want to
06:54 - make sure your default formatter is
06:56 - prettier and you also want to make sure
06:59 - it's check check to format on Save
07:00 - that's going to give you the
07:01 - functionality that you'll see on mine in
07:04 - a minute where when I hit contrl s to
07:06 - save it's going to automatically format
07:08 - my code so let's go ahead and we can do
07:10 - a little bit of cleanup here actually if
07:13 - you want to we can open our terminal and
07:14 - actually run our project and see what it
07:16 - looks like so in our terminal we can
07:18 - open it up make sure you're in the
07:19 - folder we can do mpm
07:22 - runev should give you a URL
07:27 - here we can visit that you can also just
07:29 - type this into your browser we're going
07:31 - to Local Host 3000 if you're on the
07:33 - default port and nothing else is running
07:34 - on it that's what should show up and
07:36 - here you can see our application has
07:38 - been created and it's running we're
07:40 - going to chop this down and start a
07:42 - little fresher so let's go ahead and cut
07:46 - out all of this in the global CSS we can
07:49 - hit contrl s to
07:51 - save let's go to our main page here so
07:55 - this is kind of the first uniqueness of
07:58 - nextjs so you'll see that we have a
08:01 - page.js this is almost like an
08:04 - index.html and like old school HTML
08:06 - projects where it's the default page
08:08 - that gets displayed so this is a PL page
08:11 - that's going to get displayed when we
08:13 - open up our app let's go ahead and cut
08:16 - this down a little bit so everything
08:18 - inside the
08:19 - [Music]
08:21 - return I'm going to
08:25 - delete now we just have this set up
08:28 - actually we can delete everything if you
08:30 - want and I'll show you how we use the
08:33 - other snippet Library so the cool es7
08:36 - snippet library for react you can do RAF
08:39 - C and that's going to give you a default
08:42 - page if you hit control shift L we can
08:46 - edit all these at once and we can call
08:48 - this our
08:49 - dashboard delete out that top react line
08:53 - we can save this and now we have our
08:55 - default dashboard set up now to make
08:58 - routings super quick and easy inside of
09:01 - nextjs this app router we can navigate
09:04 - by creating new folders so let's create
09:07 - a new fault folder and we'll call it
09:09 - ticket
09:11 - page and inside of here we can create a
09:15 - new file and let's call this page.
09:22 - jsx we can rename this and make it jsx
09:26 - as
09:28 - well so here let's do the same thing
09:30 - let's do r a
09:33 - c control shift L we can call this our
09:37 - ticket
09:40 - page lead out this top and we'll save so
09:44 - now what nextjs 13.4 is going to do for
09:47 - us it's going to create routing to this
09:49 - page automatically based on our folder
09:52 - structure so you'll see that we called
09:54 - it ticket page here so if we go to our
09:58 - application you can see it's
10:00 - automatically updated we got this plane
10:02 - Jane dashboard page now we can actually
10:06 - navigate out of the box without any
10:08 - other code to that ticket page and now
10:11 - you'll see we're on our ticket page we
10:17 - created we can do something else as well
10:19 - let's create another folder now this is
10:21 - inside the ticket page folder we're
10:23 - going to use square brackets and we're
10:26 - going to call this ID so it's open
10:29 - square bracket ID close square
10:31 - bracket let's put this page inside that
10:35 - folder so let's move that so now it's
10:38 - inside that ID folder so make sure it's
10:40 - set up like
10:42 - that and now we can do something pretty
10:44 - cool here so we can
10:47 - destructure
10:49 - Rams and then we can use that variable
10:52 - that ID variable that's going to be in
10:54 - our URL and I'll show you how we're
10:56 - going to do that so we will inside of
10:58 - here here we can do dollar
11:04 - sign like
11:08 - that now this ticket page doesn't exist
11:11 - anymore because we move that page so
11:13 - let's do slash and then we can type in a
11:16 - fake ticket ID like this and you'll see
11:20 - that it spits out that variable to us we
11:23 - actually don't have to use the dollar
11:24 - sign I don't know why I was confusing
11:27 - myself so we can do it just like that
11:30 - and it'll spit out our variable so this
11:32 - is pretty useful we can grab off that
11:34 - with our pages and this is going to
11:36 - allow us to create this app with
11:37 - basically one page here so that's going
11:40 - to be our basic setup so you might be
11:42 - asking yourself what if I need a folder
11:44 - but I don't want routing to be set up to
11:47 - it well we're going to use that in this
11:49 - project as well so if you right click on
11:51 - app and create a new folder you're going
11:53 - to do open
11:55 - parentheses and then create your folder
11:57 - name so we'll call our components we're
12:00 - going to actually use this in the
12:01 - project and hit enter now because it's
12:03 - inside parentheses it won't set up a
12:05 - router for this so users I mean they can
12:09 - type in slash components but it won't
12:12 - navigate to anyway so we can write click
12:15 - on this and then for example inside of
12:17 - here we can set up our navigation
12:19 - because that's going to go on every page
12:22 - so we can create
12:26 - nav.no
12:27 - rafc
12:30 - and then we've created our nav
12:33 - page and it's as simple as that now this
12:36 - isn't going to be no one's going to
12:37 - navigate to this or anything like this
12:39 - this is just a component we're going to
12:40 - use in our
12:42 - project that's the basic of the routing
12:44 - we're also going to have an API folder
12:46 - that allows us to access our back end
12:49 - but this will at least get us started
12:50 - here so let's go ahead and jump into our
12:53 - layout page now this layout page is
12:56 - pretty straightforward the only thing
12:58 - that's kind of unique unque about nextjs
13:00 - is you're going to be able as you can
13:01 - see here to use Google fonts directly so
13:03 - you'll see the default project already
13:05 - uses a g Google font sets it up here and
13:09 - then passes it in so that's all set up
13:11 - nicely for us you can see there's some
13:14 - metadata that you can set up so we can
13:16 - call this our ticket app and change it
13:19 - to generated
13:21 - by Clarity coders something like that
13:25 - and we got us all set up here now if we
13:27 - want to pull something into this page so
13:30 - if we want to pull a component in it
13:32 - works exactly like you would think so if
13:36 - for example we wanted to add our
13:38 - navigation to every page right now it's
13:41 - displaying the children so the children
13:44 - are going to be the pages that we're
13:46 - passing in so if we wanted for example
13:48 - our navigation to show up on every page
13:51 - we could do nav and now using
13:53 - intellisense you can tab here and it's
13:55 - going to do the import for you so I'm
13:57 - going to tab you'll see nav gets
14:00 - imported above then we can do slash and
14:03 - then close that now make sure you have
14:05 - the nav if it didn't do it automatically
14:06 - you got to type that
14:08 - in take a look now you can see our
14:11 - navigation is going to show up on every
14:13 - page of our project which is what we
14:15 - would want now you can see our
14:18 - navigation there as well so with that
14:20 - being said let's start setting up the
14:22 - basics of the front end of our project
14:26 - so we're going to get it kind of looking
14:27 - like what we want to look like here now
14:30 - I said we're not going to use a lot of
14:32 - libraries but I am going to kill that
14:35 - terminal and we'll do just a couple
14:38 - Library installs here so we don't have
14:41 - to use images or anything like that in
14:42 - this project we're going to use a free
14:45 - icon Library so let's do mpm install and
14:49 - let's do at bort
14:53 - ft awesome slf free- solid dsv g-
15:00 - icons space and we're going to do one
15:03 - more we're going to do at Port awesome
15:07 - SL react D font awesome tell me in the
15:13 - comments I don't know why it's Fort
15:14 - awesome at the start of this instead of
15:16 - font that doesn't make a lot of sense to
15:17 - me but that's how it is so type it in
15:19 - exactly as I have here hit
15:22 - enter and it will install those
15:24 - libraries we'll wait for that to finish
15:27 - there we go nice and quick and then we
15:29 - can finish up our layout page here and
15:33 - our navigation
15:34 - page so one thing that's kind of neat
15:39 - about Tailwind CSS is we can set up our
15:42 - default colors in this Tailwind
15:45 - config.js so let's go ahead and knock
15:47 - that out out of the box here and what
15:50 - this is going to allow us to do it's
15:51 - going to use standard eyes color names
15:53 - that we can create and then if we want
15:55 - to change things later in our project we
15:58 - can change it in one spot and it'll push
16:00 - it throughout the project wherever we
16:02 - use that previous color so right after
16:05 - background image we can create a colors
16:08 - block
16:09 - here and inside that we can define
16:12 - define colors however we want so for our
16:15 - navigation let's just call it nav we're
16:17 - going to pass in a color now I just
16:19 - checked out these colors and kind of
16:21 - made something that I thought looks sort
16:24 - of acceptable I am not a designer by any
16:26 - means so pick out any color you want but
16:28 - this is the color that we're going to
16:29 - use for our
16:30 - navigation then let's do
16:33 - page and we'll enter that as well to
16:37 - B3
16:40 - 441 this is going to be the background
16:42 - for our page the background for our
16:45 - cards will
16:47 - be
16:48 - 475
16:52 - 66a we're going to create a card hover
16:56 - color so this is just when when you
16:59 - hover over that card itself it's going
17:01 - to change to a little Lighter Shade
17:03 - that's going to be 4 F5
17:09 - E74 we're going to have our default text
17:12 - color for our entire project is going to
17:15 - be just an off white so it's going to be
17:19 - F1 F3
17:22 - F5 just a couple more here pretty simple
17:26 - project so we don't have a whole lot
17:27 - we're going to do a blue accent color
17:29 - this is going to be the button on our
17:31 - form when we create a
17:38 - ticket 0084
17:43 - D4 and then let's also do a blue accent
17:47 - hover
17:51 - color this is going to be 009 F
17:54 - FF save it so now we got all of our
17:57 - colors set up for our whole project it's
17:58 - going to be nice in this Tailwind config
18:01 - file I think that's everything we're
18:03 - going to use with this file as well so
18:05 - let's go ahead and shut that down and
18:08 - then inside our layout JS we have a
18:11 - couple unique things that we have to do
18:13 - with this project for our icons that
18:16 - we're going to use this is really quick
18:19 - but essentially when you're loading in
18:20 - these icons sometimes they show up
18:22 - really huge so we got to change and then
18:24 - they um Define back down so it's kind of
18:26 - weird it makes it look jumpy so we're
18:28 - going to do a quick fix for that so
18:30 - we're going to import config and this is
18:34 - going to be from at for
18:38 - awesome slash and now we want to use the
18:43 - port awesome SVG core so if you got it
18:47 - in intellisense you can put it in there
18:48 - and that'll get you your config file and
18:51 - then we also want to import at Port
18:56 - awesome SL font F awesom SVG
19:01 - core
19:03 - styles.css
19:06 - now after this we need to add one line I
19:09 - think just one line config do
19:13 - auto add CSS equals false so now it's
19:18 - not going to sub in CSS automatically
19:21 - for us and that's going to help with
19:22 - that jumping of the icon so we shouldn't
19:24 - have to deal with that in our
19:27 - project we're going to change our page
19:30 - setup just a little bit here so it
19:33 - defaults a little nicer when it when
19:35 - everything shows up so we're going to
19:37 - keep the body tag there but we're going
19:39 - to add another div now we want
19:43 - this navigation to span the entire top
19:48 - it's like a top bar on a website so we
19:51 - want it to span the entire top of this
19:54 - project so using Tailwind we can use
19:57 - class name and set it equal to and then
19:59 - we can type our Tailwind commands
20:03 - directly in here so we're going to use
20:04 - flex for the layout we're going to use
20:07 - flex column so that's going to show
20:09 - everything on top of each other so our
20:11 - navigation is going to be on top and
20:12 - then our ticket page so on and so forth
20:14 - if you want a sidebar you wouldn't use
20:17 - flex column you you'd leave that out
20:20 - we're going to do H screen which gives
20:22 - us the full width of the screen and if
20:24 - you hover over this or the full height
20:27 - of the viewport so if you hover over
20:28 - this you can see the exact CSS it's
20:31 - adding and then we'll also make it a Max
20:34 - screen so we're going to give a Max
20:36 - screen size of that full uh viewport as
20:40 - well that should be it there these are
20:43 - pretty simplistic again I'm not a
20:45 - designer by any means and I want to keep
20:48 - this as simple as possible so let's
20:50 - surround the children with another
20:53 - div so you can see here how I kind of
20:56 - have that set up let's add a another
20:59 - class name here we're going to use flex
21:03 - grow this is going to expand the main
21:05 - page to fill up the whole page we're
21:08 - going to do overflow y
21:11 - Auto and now we're going to set up the
21:14 - color of our page as well now if you
21:17 - remember we set up a variable called
21:20 - page but with Tailwind CSS we have to
21:23 - tell it what we want to use that color
21:25 - on first we want to use it on the
21:27 - background
21:28 - we're going to do BG Dash now you can
21:31 - see all the default colors that show up
21:33 - but we're going to use our custom one of
21:35 - BG page and you can see our intellisense
21:38 - shows a nice preview of the color and
21:40 - everything like that so that is going to
21:43 - be our background for our page and we're
21:45 - going to use our text so this is the
21:47 - color text and now we can use anything
21:50 - we want here but we want to use our
21:51 - default and you can see intellisense
21:53 - popping up default text so this is going
21:55 - to be our default text color now we can
21:58 - save this contrl s and we should be good
22:01 - now if we look at our project well we
22:03 - got to spin it up again so mpm run Dev
22:06 - in your terminal see that's working
22:08 - let's refresh this and cool you can see
22:11 - our Tailwind CSS has worked you can see
22:14 - our navigation is along the top now we
22:16 - haven't done anything with that we'll do
22:17 - that next but you can see it's at least
22:19 - in the right spot you can see our
22:21 - dashboard below has the right page color
22:23 - on it making progress so let's jump into
22:26 - our navigation and get that structured
22:28 - out as
22:29 - well let's go ahead and delete
22:31 - everything inside this return we're
22:34 - going to use a
22:37 - nav tags like this and then we're going
22:41 - to use a div inside of that and there
22:44 - are going to be two icons in here and
22:47 - then we're going to do a second set of
22:50 - divs below and this can just be our
22:53 - placeholder for a login system later now
22:56 - we're not going to do that in this
22:58 - project but I have an advanced video
23:02 - that you can check out that will go over
23:04 - that as
23:08 - well that I'll be releasing
23:13 - soon this is not my email so don't email
23:16 - it I don't know who that
23:17 - is so this will put a fake email just a
23:21 - placeholder in our navigation and over
23:24 - here is where we're going to want to use
23:26 - our links
23:28 - and our icons for our project so here we
23:32 - can use the link that's built into
23:36 - nextjs so you'll see here it says next
23:39 - SL link let's go ahead and
23:43 - tab it'll add it up here make sure yours
23:46 - is using
23:50 - nextlink that'll give us links there we
23:53 - have to add an href to this so we'll add
23:56 - an hre this is where we're going to link
23:58 - so this one can just go to our homepage
24:00 - so we'll just do
24:02 - slash and then inside of here let's use
24:05 - one of our font awesome icon so as we
24:07 - start typing in Tel ense is going to
24:09 - help me out font awesome icon and you
24:11 - can see it does the import up here make
24:13 - sure yours does that as well and then
24:16 - we're going to add in a specific icon
24:19 - now you can search font awesome and you
24:21 - can find all the icons available to you
24:23 - I've already found them just to be just
24:25 - to move the project along we're going to
24:27 - use f a ticket so I'm going to tab here
24:30 - again and telesense will do the import
24:31 - For Me Above fa
24:36 - ticket and we're going to give this a
24:38 - class name and here we're wanting to
24:40 - Define how our icons will show up but
24:43 - we're going to use this over and over
24:44 - and over again right in our project and
24:47 - I don't want to type this out every time
24:49 - so we can create our own class name so
24:52 - we'll call our class icon and then we
24:55 - can reuse that in other spots
24:58 - so we'll Define that in our Global CSS
25:00 - here in just a moment let's copy that
25:03 - entire section there and we'll make a
25:05 - new one here we'll call this our ticket
25:08 - page Slash new
25:13 - lowercase and I'll show you how that
25:15 - works in a minute so here we don't want
25:17 - the fa ticket icon let's do yeah we do
25:21 - let's use fa ticket here actually for
25:25 - this
25:25 - one let's use f fa
25:29 - home so now you can see you should have
25:32 - two Imports you should have an fa home
25:33 - and an fa ticket from font awesome and
25:36 - you'll see that it's got everything set
25:38 - up that's good but we haven't defined
25:41 - this icon class yet so let's go to
25:44 - Global CSS and in here we can set up a
25:47 - lot of our basic rules now I'm not going
25:49 - to get into all these but Tailwind is
25:51 - set up with base components and
25:53 - utilities and things can overwrite other
25:56 - properties depending on which you're
25:58 - using so for us we're going to add to
26:01 - the layer
26:04 - components and here we're going to
26:06 - Define two classes to start out with
26:08 - let's define our icon first and then
26:11 - we'll do add apply and then we can add
26:13 - whatever we want to the icon class so we
26:15 - want it to be a color of text
26:19 - default and we want the text to be extra
26:24 - large now we're going to do another one
26:27 - here that we'll use later to Define our
26:29 - button so let's dot button and here we
26:33 - can
26:35 - do a
26:39 - hover of no
26:42 - underline actually want to do at
26:47 - apply so one thing that's cool about
26:50 - Tailwind is we can Define things certain
26:54 - properties like this for certain tasks
26:56 - so again we we only want it to remove no
26:59 - underline when people are hovering over
27:01 - it so it makes sense sense to put that
27:04 - there we want our B our background so
27:07 - we're going to do BG Dash
27:11 - blue dash
27:14 - accent and we want the hover color so
27:17 - let's do hover again to be BG Das blue-
27:22 - accent Das
27:24 - hover so now we have no underline our
27:27 - background color our hover set up that
27:30 - all looks
27:33 - good we want to do tracking wider and
27:37 - you can see what that does so if you
27:38 - hover over it it's about letter spacing
27:41 - this is the longest line I think just in
27:43 - terms of what we add to our CSS so we're
27:46 - going to do w- full we want the text to
27:49 - be
27:51 - centered we want the text color to be
27:54 - the same as our nav bar so we'll do text
27:58 - dnav we'll do font Das
28:03 - bold we need a cursor that's a
28:06 - pointer I'm going to use the
28:11 - intellisense let's make everything
28:15 - uppercase we're going to do a padding on
28:17 - our x axis of four so this going to do
28:20 - padding left and right and four is not
28:22 - four pixels if you hover over it it's
28:24 - actually 16 pixels a py of
28:28 - we'll do
28:30 - rounded so this is our border radius is
28:32 - going to be
28:36 - rounded we'll
28:39 - transition our
28:41 - colors and one more here we'll make sure
28:45 - it displays
28:47 - block so that's it I know I'm throwing
28:49 - just a lot of stuff at you right there
28:51 - but basically we're just defining what
28:52 - our button will look like you can use
28:54 - any CSS for any button that you would
28:56 - like but we'll get that out of the way
28:57 - now since we're in this file so we got
28:59 - our icon set up we got our button set up
29:01 - make sure you save this and then we can
29:04 - go back to nav we're not going to use
29:06 - the button in the navigation but it's
29:08 - ready for us now so we got our icons
29:12 - everything looks good there we go back
29:16 - you'll see yeah that looks you can start
29:18 - to see it there it's the wrong colors
29:20 - and the and the setup isn't great but at
29:22 - least we're showing
29:24 - up so let's add a tiny bit of structure
29:29 - here so we'll say class name again we're
29:31 - going to use flex now this time we don't
29:33 - want to use flex column right because
29:35 - we're not we want the icons and the and
29:38 - the email address horizontally spread on
29:40 - the page here so we'll do justify
29:43 - between that's going to space everything
29:45 - equally between we want our background
29:48 - to be our navigation color so we'll do
29:50 - BD BG
29:52 - dnav and we want our padding to be four
29:56 - again I played around with these these
29:57 - you can uh I'm certainly not a designer
30:00 - you can you can use whatever you want
30:02 - there class name for our next div is
30:05 - going to be Flex We want our item
30:08 - centered these are going to be our icons
30:12 - and we want a space
30:15 - X4 now what you'll see here is it's
30:17 - doing
30:18 - some mathematics to get our margins so
30:20 - they can be spaced equally between so it
30:23 - just makes those icons look a little
30:26 - nicer and I think that's the basics of
30:29 - what we need so if we look back
30:31 - everything looks pretty good right we
30:33 - got two buttons or two icons here we got
30:35 - our email this is kind of a placeholder
30:38 - right now and then we can navigate
30:40 - around so if we click on the new ticket
30:42 - you'll see it pulls us to the new page
30:45 - and you'll see that it's still pulling
30:46 - that ID down remember this is the ID
30:49 - variable that we're passing to that page
30:52 - now if we go home we're back on our
30:53 - dashboard and that's pretty much the
30:55 - entire setup of our application it's
30:57 - pretty simplistic so we're ready to rock
31:00 - and roll there awesome we should be good
31:03 - so we want a to add a bunch of
31:06 - components here so let's create a new
31:09 - file inside of components and the first
31:12 - one we're going to create is our delete
31:16 - block. jsx we can do our normal
31:20 - rafc that'll give us our boiler
31:23 - plate cut that
31:26 - out
31:27 - and now for our delete block as you can
31:30 - see we're just going to use like a red X
31:32 - so we can go ahead and add that into our
31:35 - project just to get it set up and
31:37 - working it's not going to do anything at
31:39 - the moment
31:41 - so we will just create the icon so let's
31:45 - do
31:47 - font awesome icon like we did before
31:51 - hate how it did the import I don't know
31:53 - why it did it like that let's do import
32:00 - font awesome icon there like that better
32:04 - this will have to have a slash at the
32:07 - end see I just fall apart when my
32:09 - intellisense doesn't work let's do icon
32:12 - equals now I already picked out an icon
32:14 - so we're going to do fa capital x so
32:16 - this is literally just the x that you
32:19 - see the icon that you see and then we
32:21 - can set up some class names here as well
32:24 - so let's do text of r r- 400 is going to
32:30 - be the color of the text itself when we
32:35 - hover I want the cursor to change to a
32:39 - pointer so it looks like it can be
32:40 - clicked on and I want to set the hover
32:44 - color to be text-
32:47 - r-200 so this is just going to be a
32:49 - lighter version of that and that's the
32:51 - basic of our delete
32:54 - block let's create a new component
32:57 - and this is just so you can see how we
32:59 - can kind of put this all together let's
33:00 - call this ticket card.
33:03 - jsx
33:06 - RFC see here we got our ticket
33:10 - card here we can start pulling in our
33:13 - different items so for example we can
33:17 - pull in our delete block here you'll see
33:20 - it's importing our delete block slash
33:23 - like that you'll see now our ticket card
33:26 - shows up with the delete block now if we
33:29 - go to our project nothing's going to
33:30 - show up yet right because we're not
33:31 - using that ticket card anywhere and
33:34 - we're not using that delete block
33:36 - anywhere yet so then back in our
33:39 - dashboard page
33:41 - here here's where we can add in our
33:44 - ticket
33:46 - card that's again a component that we're
33:48 - going to import you can see now we got
33:50 - our ticket card so now if we go into our
33:53 - project you'll see our ticket card is
33:54 - just a red X right now but but you'll
33:57 - see it does at least show up so you can
33:59 - see how we're kind of using components
34:01 - to pull everything together here now
34:04 - these are components because we want to
34:05 - be able to reuse them right eventually
34:07 - in our project we're going to have
34:08 - multiple ticket cards now this obviously
34:11 - isn't going to look right at the moment
34:13 - um but you'll see we're able to use
34:15 - reuse that code
34:16 - without retyping it or anything like
34:20 - that all right so the other parts of our
34:23 - ticket so we have our delete block we
34:27 - need our priority
34:29 - display so let's create a new file we'll
34:33 - call it PRI
34:38 - ority spelling is tough for me sometimes
34:40 - RAF CE get our boiler plate there now
34:45 - for this it's kind of cool we have the
34:47 - the five like fire icons and depending
34:50 - on how hot this project is no pun
34:54 - intended is how many are filled up with
34:58 - the with the project so we're not going
35:00 - to set any of that up quite yet but we
35:02 - do want to add in our icons so let's add
35:06 - in five of those icons let's say font
35:11 - awesome icon imported better this time
35:14 - so I like that and for this we're going
35:17 - to do a icon that
35:20 - [Music]
35:21 - equals fa
35:24 - fire you'll see we did the Auto Import
35:27 - there as well let's get five of these so
35:32 - there's one 2 3 4 five now prettier
35:36 - watch this magic contrl s
35:39 - boom we're getting
35:42 - somewhere for our class name oh I should
35:45 - have done this first huh we can do text-
35:48 - R d400 just for now so these are all
35:51 - going to be hot at the
35:54 - moment we can copy that
35:57 - I should have done this first paste it
35:59 - below Okay cool so we got our five icons
36:02 - here now just a little bit of styling we
36:04 - want these to show up horizontally so
36:08 - we'll do
36:10 - Flex we'll put them all at the start so
36:13 - we'll do justify start and we want to
36:15 - align them to the Baseline of whatever
36:17 - the container is and then they'll all
36:20 - show up that looks good these are going
36:23 - to go in our ticket card as well now
36:25 - these are not set up correctly
36:32 - but we can at least throw it in here so
36:35 - we'll do our priority
36:36 - display take a look at that look at that
36:39 - stuff is showing up in our ticket cards
36:41 - automatically okay so let's go ahead and
36:44 - rifle through the rest of these we got
36:45 - our priority
36:47 - display we wanted a progress bar as
36:55 - well
36:58 - RFC delete this one out this progress
37:02 - bar is pretty cool we use two divs
37:04 - essentially to set up an outside div
37:07 - that's like the unfilled part of the bar
37:09 - and then the inside div which based on a
37:11 - percentage is going to fill up the
37:14 - progress uh bar that we see so we'll use
37:17 - a class name for this top div we'll say
37:21 - we want it to be width
37:22 - full
37:25 - BG Gray 200 that's going to be the
37:28 - background
37:29 - color rounded full so this is the Border
37:33 - radius so it's going to give it that
37:35 - rounded look we don't want round we want
37:40 - rounded this is just the height so we're
37:42 - going to give it a height of
37:44 - 2.5 and then our internal bar so this is
37:47 - going to be the internal bar that fills
37:49 - up we can use BG blue 600 as our color
37:53 - again you can play around with these the
37:55 - same height of
37:57 - 2.5 and we want it to be
38:00 - rounded
38:02 - D4 now we're also going to use the
38:06 - style variable here so we'll use
38:09 - style and this is going to be to get our
38:12 - percentage to show up correctly so we're
38:14 - going to do style
38:15 - equals in double curly brackets we're
38:18 - going to do a
38:20 - width of 75% right now so we're just
38:26 - hard coding in these values we're going
38:27 - to pass Dynamic values in a minute but
38:29 - this is you can kind of do it however
38:32 - you like or however you like to set up
38:33 - projects but I like to kind of get a
38:35 - look or feel without using the database
38:37 - data to make sure everything works and
38:39 - then add the rest of that in as we
38:41 - progress but this should be good
38:45 - here back in our ticket
38:48 - card we can do
38:50 - progress
38:54 - display cool this one one probably won't
38:57 - show up right because yeah it's just
39:00 - going to fill up everything at the
39:02 - moment we'll get that adjusted in a
39:05 - second it would help if I spelled width
39:08 - right as
39:10 - well width of
39:12 - 75 now you'll see it it shows up okay
39:15 - it's not formatted correctly but you get
39:17 - the idea our next component we need a
39:20 - status so we want to do started done or
39:23 - not started you can do whatever statuses
39:25 - you want as as well but inside here
39:28 - we're going to do a status display do
39:35 - jsx you know how to do this RAF
39:42 - CE let's use a span for this so we're
39:45 - going to use span
39:47 - tags and inside here we're going to do
39:51 - some formatting to get kind of that
39:52 - rounded look so we're going to
39:55 - use
39:58 - inline block
40:01 - rounded P you guys are probably going to
40:03 - be like you round too many of your
40:05 - Corners I I'm not a good designer like I
40:07 - said so if anyone wants to help me out
40:09 - join the join the Discord let me know
40:11 - you'll help me style my next project so
40:14 - we'll do to text extra small font semi
40:19 - bold text- gray
40:24 - d700 and then we're going to hard code a
40:26 - in here so depending on the status it's
40:28 - going to be color different but for
40:30 - right now we can do the done color which
40:34 - is going to be BG D green
40:39 - D200 and then of course we're actually
40:41 - going to have the status in here so
40:43 - something like that for now is fine um
40:46 - because we're using the green color but
40:47 - eventually this will be
40:49 - dynamic then in our ticket
40:52 - card we can add in this status display
40:58 - as
41:00 - well
41:02 - awesome yeah I think that looks pretty
41:05 - good let's go ahead and maybe format up
41:07 - our ticket card a little bit so it looks
41:09 - a little more like our end
41:12 - project so we are going to have an
41:14 - outside div around everything so let's
41:16 - leave that and let's set up our class
41:18 - for this so it's going to be Flex we're
41:21 - going to build it vertically so I'm
41:22 - going to use flex
41:25 - column
41:28 - the background color we're going to use
41:30 - so BG card we're going to do a hover on
41:34 - this because you can click on them
41:37 - of BG card- hover remember we set that
41:41 - up
41:43 - before we're going to do rounded a
41:45 - medium because you guys know I love
41:47 - rounding those Corners shadow of large
41:51 - just to give it a little drop shadow
41:53 - padding of three and a margin of two
41:57 - now on top we have our priority display
42:00 - and our delete block I just have these
42:02 - in the wrong order so let's put our
42:05 - priority display on
42:12 - top now these are going to have a
42:16 - div that wraps around them so let's put
42:19 - a div around the priority display and
42:21 - the delete block here let's add some
42:24 - classes to it so there going to be
42:26 - spread out along the top as you can see
42:29 - here we'll set up our class name we'll
42:33 - set it equal to flex margin bottom of
42:36 - three just to give it some spacing below
42:38 - this going to wrap around
42:43 - everything now we're going to use one
42:45 - more div around the delete block this is
42:47 - going to slide it clear to the right so
42:49 - let's wrap another div around the delete
42:52 - block we can do a class name of ml l-
42:56 - Auto so this is going to automatically
42:58 - give us the correct amount of margin on
43:00 - the left to slide it over so we can
43:03 - slide it clear over to the right we save
43:07 - this you can see our Bottom's still
43:10 - messed up but our top is looking
43:18 - better now the next thing I want to do
43:20 - is I want to set the H4 tag and this is
43:22 - going to be the
43:25 - ticket
43:30 - title and below that we can do a
43:33 - horizontal row let's do a class name of
43:40 - hpx let's do a border of zero let's make
43:43 - the background our
43:46 - page and a margin bottom of two do slash
43:50 - and then close that so these are the
43:52 - self- closing
43:55 - tags let's do a p here for our
43:58 - description of our ticket let's do a
43:59 - class name of wh
44:03 - space Dash free-
44:08 - wrap so what this is going to do is it's
44:11 - going to save the returns that we make
44:14 - in our ticket so if we do like a
44:16 - paragraph and then a couple returns and
44:18 - then type some more in our ticket
44:19 - description that's going to show
44:25 - up
44:28 - okay so that's good enough for our
44:29 - ticket right now if we look we'll see
44:32 - yep we're getting closer now you might
44:34 - wonder why does your H4 look exactly
44:37 - like the P tag well remember we deleted
44:39 - out all of our Styles so those aren't
44:41 - styled at the moment so if we want to
44:44 - fix that we could go back into Global
44:46 - CSS and we could set up some of those
44:49 - default Styles so the one thing we want
44:52 - to do here is we can and create an at
44:57 - layer
45:02 - base for our H1 comma we'll do H2 H3 and
45:07 - H4 um these are the ones that we're
45:09 - going to use in this project we can do
45:12 - at
45:14 - apply font Das bold so this is going to
45:17 - give every one of these bold
45:20 - font and then for the individual sizes
45:24 - we can do H1
45:28 - we can do at
45:30 - apply
45:32 - x-4x LL for
45:35 - example let's copy that we'll do H2 H3
45:39 - and H4 we're can do an H2 H3 H4 for this
45:45 - one we can do 3 XL 2 XL and
45:51 - XL right now for our P tag
45:57 - let's do at
45:58 - apply text-
46:01 - smm and let's do
46:03 - text- default text make sure it's
46:07 - colored correctly as well so now we
46:09 - should have everything done there if we
46:12 - go back you can see our ticket title is
46:14 - better and our P tag is formatted as
46:17 - well so that all looks
46:20 - fine now we can go back to our ticket
46:24 - card out of some of these I've gotten a
46:27 - little
46:29 - messy go back to our ticket card let's
46:32 - continue formatting
46:33 - this so below our
46:37 - paragraph This one you're going to have
46:39 - to trust me for the moment we're going
46:40 - to do a flex Das grow empty div so what
46:44 - this is going to do is it's going to
46:46 - make sure that all the ticket cards are
46:48 - the same size regardless of how much
46:50 - font they have inside of them just a
46:52 - preference thing if you don't like this
46:54 - you can remove it but I like I think it
46:56 - looks good with them all being the same
46:58 - size we'll do another div here now this
47:01 - is going to wrap around our
47:04 - progress and our status display so start
47:07 - the div there end it
47:12 - here let's do class name for this one we
47:16 - want to do Flex let's do a margin top of
47:20 - two that will look good and then the
47:23 - progress display we're going to put a
47:26 - div around
47:32 - that because we're also going to add the
47:34 - date time that the ticket was created so
47:36 - let's say class name
47:39 - here let's do flex and flex
47:43 - column then inside here again all
47:46 - placeholder at the moment but we're
47:47 - going to do a P tag of our date
47:50 - time
47:54 - 0831 SL 23 at
47:58 - 10:43
48:00 - p.m. that looks good let's get that
48:03 - formatted to while we're at it this
48:05 - one's going to be on the left side so
48:07 - let's do this of a
48:10 - text XS so a text of extra small and a
48:14 - margin y of
48:16 - one that should be
48:19 - good and then for our status display
48:24 - this is the one we want to scoot over
48:27 - so for our status display let's give
48:30 - this a class name of margin left Das
48:34 - Auto Flex items
48:38 - dend div div okay so now we should have
48:42 - a basic structure
48:44 - here cool so you see we got our ticket
48:47 - our progress bar our status our time
48:51 - everything is kind of looking good the
48:52 - hover works all that is fine you'll
48:55 - notice though that the tickets are
48:56 - taking up the whole page we want to get
48:58 - that fixed but it looks okay for the
49:01 - moment let's jump back to our code our
49:03 - ticket card is looking good let's go
49:06 - back to our page now remember this is
49:09 - going to be our main dashboard page of
49:11 - this project so this is where all of our
49:13 - tickets are going to display let's do
49:16 - some basic Styles in here inside of this
49:20 - div let's do a class name of
49:24 - p-5 and this probably has the coolest
49:28 - part for me of Tailwind uh that you'll
49:31 - see here in a moment and then we're
49:33 - going to use another div around the
49:35 - ticket so we'll do div class
49:38 - name now we can do some styling here
49:41 - based on screen size so that's what I
49:43 - was talking about that's really cool so
49:45 - on our smallest screen we're going to
49:48 - have the tickets take up 100% of the
49:50 - space like they are now if you're on a
49:52 - phone or something like that however on
49:55 - this huge monitor that I have I don't
49:57 - want it to show up like that so I'm
49:59 - going to say if the screen is large so
50:03 - at least a large screen and you can see
50:06 - how this is defined and you can actually
50:08 - change the definition as well but we're
50:10 - going to use the default ones so if we
50:12 - have a large screen we're going to set
50:13 - it up with a grid and we're going to do
50:17 - grid calls 2 so there's going to be two
50:20 - columns however if it's an extra large
50:24 - screen we want to do grid
50:30 - C-4 so if it's kind of a if it's a large
50:32 - screen we're going to use two columns if
50:34 - it's a big screen we're going to use
50:35 - four
50:38 - columns and again this is I mean you can
50:40 - change that to be whatever you would
50:42 - like as well so we're going to wrap this
50:45 - div around all of our
50:47 - cards let's actually create four cards
50:50 - since that's the largest that our screen
50:52 - will
50:53 - be and you can see now it looks kind of
50:56 - nice right so now we have our four
50:58 - tickets spread out because we're on an
51:00 - extra large screen now if I minimize
51:03 - this window or Shrink it up you can see
51:05 - right there that it auto adjusts this is
51:07 - what like a phone would look like and if
51:09 - I slowly drag over you can see this is
51:13 - where it decides it's a large enough
51:15 - screen to have two tickets and this is
51:17 - where it's large enough to have four
51:19 - tickets now why did I have it jump from
51:21 - two to four just preference again you
51:23 - can make it three or whatever you wanted
51:25 - to do do but that's how that's what I
51:26 - thought looked the
51:28 - best so that's going to be our basic
51:30 - setup there so now we have kind of the
51:33 - the basic structure of our app we have
51:36 - the routing setup we have the ticket set
51:38 - up we have our main
51:41 - display the thing we want to do next is
51:44 - to start looking at setting up our
51:46 - database so we're going to use mongodb
51:49 - ATL lless this is a free free to set up
51:52 - so you shouldn't have any issues there
51:55 - and I'm going to kind of walk you
51:56 - through that process as well if it's new
51:58 - to
51:59 - you I'm also going to use so what
52:02 -  lets us do is in mongod DB we
52:06 - don't Define types like you do in a
52:09 - traditional relational database so you
52:11 - don't say that the title has to be a
52:13 - string and that the priority is one
52:17 - through five like a number you can't
52:19 - Define things like that but Mongoose
52:21 - allows us to have that data Integrity so
52:23 - I really like that as well and it also
52:26 - actually kind of makes setting up and
52:27 - connecting to the database a little bit
52:29 - easier so let's go ahead and kill our
52:32 - server this is just so we don't forget
52:34 - here or so I don't forget let's go ahead
52:36 - and add in those two
52:38 - packages and this might be it for us too
52:41 - in terms of packages so let's
52:43 - mpm let's do mongod DB and then let's
52:48 - also do space
52:51 -  ah you need to do mpm in
52:56 - install space and then those two
52:59 - libraries so this is going to give us
53:00 - the packages that we need here that
53:03 - should be all set up now we can actually
53:05 - create our mongod DB so you can search
53:09 - for mongod DB Atlas
53:13 - maybe mongod DB Atlas we'll click on
53:16 - that first link go ahead and sign in now
53:19 - I'm going to skip through this part but
53:20 - you can sign in you can use your um
53:23 - Gmail or you can create a new account
53:24 - whatever ever you want to do you can do
53:26 - it for free so go ahead and sign in and
53:28 - sign
53:29 - up now once you've signed in you'll
53:32 - accept the privacy policy or whatever
53:34 - you need to do
53:36 - there it might ask you some
53:43 - questions I'll buzz through that when it
53:46 - gets to this screen we can go ahead and
53:48 - fill this out because we are going to
53:49 - use it so if you already have one set up
53:52 - you can uh we can even hit I'll deploy
53:54 - my database later so you you should look
53:57 - at this screen no matter what you might
53:59 - have came to that preview one or if you
54:01 - already have signed up before you might
54:02 - come to something that looks like this
54:04 - but at any rate we need to create a
54:07 - database
54:09 - cluster so what we're going to use is
54:11 - the m0 which is the free version you see
54:14 - it's running on AWS it has a name
54:17 - everything like that we can leave all
54:18 - that defaulted let's go ahead and hit
54:20 - create we're going to need a username
54:23 - and password eventually so you're going
54:25 - to want to set that up I'm going to go
54:27 - ahead and change mine to
54:29 - admin you can leave that password as it
54:32 - is as well um but we do want to save it
54:35 - so let's go back in our code and just as
54:37 - a placeholder for right here inside the
54:39 - ticket app itself not inside the app
54:41 - folder let's create actually click
54:44 - anywhere in this blank space a new file
54:47 - and let's call it env.
54:50 - local this is a special file that nextjs
54:53 - is going to pull in for our environment
54:54 - variable
54:55 - now paste your password in
54:58 - there and maybe paste your username as
55:02 - well above it as a placeholder for right
55:05 - now so we'll go ahead and create that
55:08 - user where would you like to connect
55:11 - from so you can add your current IP
55:13 - address
55:15 - here it's already been added um we might
55:18 - actually do a change this as well just
55:19 - to eliminate any problems but we can go
55:21 - ahead and finish and close for now and
55:24 - go to overview
55:26 - that looks pretty good if you want to
55:28 - open this wide open for right now just
55:31 - so you don't have any problems you can
55:32 - go to network access down here now I
55:34 - don't recommend you do this for every
55:37 - project but we can add another IP
55:39 - address and we can allow access from
55:42 - anywhere confirm so now we're going to
55:45 - have no problem connecting to it now
55:47 - click on database and we're going to go
55:49 - back here it's probably still deploying
55:52 - our database at the moment
55:56 - once it's done uh we don't want to add a
55:58 - tag I'm just going to hit okay there um
56:00 - once it's done you'll see cluster zero
56:02 - it has a little green thing next to it
56:04 - you can think of a cluster as a
56:06 - collection of
56:07 - databases we're not going to have
56:09 - multiple databases we're just going to
56:10 - have this one then we can go to browse
56:13 - collections now here we can go to add my
56:16 - own data we can enter a database name
56:21 - and then we can also add a collection
56:24 - name wow so in ours for example we could
56:27 - call it
56:29 - ticket
56:31 - DB and our collection let's call it
56:34 - tickets plural hit create so that should
56:38 - be good now we could add fake data here
56:40 - we could go back and create it and kind
56:42 - of import it what I'm going to do is
56:46 - we're going to leave this set up as is
56:48 - we're going to go back and connect to
56:49 - our database and then create the model
56:53 - of our data so what our data is going to
56:54 - look like and then we'll just start
56:56 - adding data into this database and see
56:57 - if we can get that working so let's go
57:00 - back to overview here go to connect
57:03 - we're going to hit this top one nodejs
57:05 - go
57:07 - drivers and then here you'll see our
57:09 - connect string here that we can steal so
57:12 - let's copy that go back to our code and
57:15 - in our code let's actually create our
57:18 - connection variable so let's go mongod
57:22 - dbor urri equals
57:25 - and then we can paste in this little
57:27 - snippet here now if you have a different
57:28 - username you need to change this
57:30 - username mine was admin so I'm not going
57:32 - to change
57:33 - mine and then your password obviously
57:37 - you're going to use your password I'm
57:39 - not going to leave mine running so I'm
57:40 - going to delete that out and then you
57:42 - can delete this stuff
57:44 - below let's also cut off this end here
57:48 - so I'm just going to do to the Slash and
57:51 - I'm going to do ticket DB or whatever
57:54 - you called yours database so again you
57:56 - got to use your information
57:59 - here um but if we go back to
58:03 - collections you can see what you called
58:05 - your database as well so I called mine
58:07 - ticket DB awesome now for ours it's
58:11 - relatively simple we only have one model
58:13 - we're just going to use a ticket for
58:15 - right now so let's do a new folder let's
58:17 - put this in parenthesis because we don't
58:19 - want to route to it or anything like
58:21 - that and let's call it models and inside
58:23 - here we can create a new
58:25 - file we can call it ticket.
58:30 - JS capital T ticket. JS in this file we
58:34 - need to import a couple libraries so
58:36 - let's import
58:38 - mongus from
58:40 - mongus do comma and then Capital this is
58:44 - important capital s c h m for
58:47 - schema this is going to give us mongus
58:50 - and the schema that we need we're going
58:52 - to do mongus doc connect
58:55 - to connect to our database we're going
58:58 - to use our variable that we just set up
59:00 - so process.
59:01 - env.
59:04 -  DB
59:09 - DB uncore
59:11 - URI brain locked up couldn't remember
59:14 - what I called the variable so make sure
59:16 - this is the variable that we set up in
59:17 - the mv. local we're going to get a
59:23 - promise we're going to use our global.
59:26 - promise
59:28 - here and now we can Define what a ticket
59:31 - is so here we can create our ticket
59:35 - schema and this is going to be what sets
59:37 - up
59:38 - our data Integrity as well we can count
59:41 - on a ticket being created a certain way
59:45 - so it's going to have a title which is a
59:48 - string going to have a
59:50 - description which is a
59:53 - string going to have a category which is
59:56 - a
59:57 - string it's going to have a
60:00 - priority which is going to be a
60:05 - number going to have progress which is a
60:13 - number Status which is a
60:16 - string we might even want like an active
60:19 - flag something like
60:22 - that that's a booing so like a true or
60:27 - false that's later if we wanted to have
60:30 - like an archive functionality or
60:31 - whatever it might be now we're going to
60:33 - do comma and we're also going to
60:37 - add
60:39 - timestamps true so the time stamps true
60:42 - that's going to give us a created at and
60:44 - an updated at date so it's just going to
60:46 - be helpful to our project to have that
60:48 - in it as well so now that we have that
60:52 - we can create a con ticket and and set
60:54 - it equal to
60:57 - mongus do models make sure that's
61:02 - plural. ticket
61:05 - or so that's going to be if it exists
61:08 - already so if it exists already we're
61:10 - going to grab grab it
61:13 - or we're going to create it if it
61:16 - doesn't exist we'll do ticket ticket
61:20 - schema like
61:23 - that
61:25 - export default ticket that's it pretty
61:29 - easy and that's all we need to do to get
61:33 - our database hooked up connected and all
61:34 - that
61:37 - jazz now we can go ahead and start
61:39 - creating our
61:41 - API so as you might guess we're going to
61:45 - use the app folder again we're going to
61:47 - create a new folder and we're going to
61:49 - call it API so this is going to be how
61:52 - our application is going to act access
61:54 - our database we're going to create a new
61:57 - file inside of this and this is called
62:08 - route.jpg
62:17 - post delete whatever we might
62:20 - need we are going to use our model so
62:22 - let's do import ticket now look it's
62:25 - models it's going to import it from our
62:27 - folder All That Jazz that looks
62:30 - good and then this one's important
62:32 - because it's a little weird let's use
62:34 - next
62:36 - response and make sure this comes from
62:38 - next server and now we can create our
62:41 - first function so the first thing we
62:42 - want to do with our database in
62:44 - particular we don't have any tickets in
62:45 - it um typically you might fill it with
62:47 - dummy data or whatever you want to do
62:49 - I'm just going to create something to
62:50 - help us add tickets and then we can test
62:52 - it that way so let's do export
62:57 - async function
63:00 - post and let's pass in requests so we're
63:03 - going to do it just like that and in
63:06 - here we can Define our post request so
63:08 - posts are going to be how we create
63:10 - tickets we can do all these inside of a
63:12 - try catch just to make sure we don't
63:14 - have an error if we do have an error
63:17 - let's go ahead and Define that first we
63:19 - can return that response so let's return
63:22 - next response
63:26 - Json inside of here we'll say we want to
63:29 - pass a message
63:30 - back and that is error and then we also
63:34 - want to pass back our error as well we
63:37 - can do a comma after this curly bracket
63:40 - and pass a status code as well if we
63:43 - would like of 500 because it failed okay
63:46 - so that's going to be our error and this
63:48 - is actually you'll see how super easy
63:50 - this is so to create a ticket we're
63:53 - going to to get a request and that
63:57 - request is going to have ticket data on
64:00 - it so we're going to create a form that
64:03 - allows people to add data and they're
64:06 - going to attach it to the request and
64:07 - then we're going to pass it to the
64:09 - ticket and we'll create that next so
64:10 - you'll be able to see it so we're going
64:12 - to create a const for our body and we're
64:14 - going to set it equal to and we're going
64:17 - to await whatever was on requ request.
64:21 - Json so we're going to grab off the body
64:23 - data and using
64:26 - that ticket
64:30 - data this is the variable that we're
64:32 - going to call it we'll call it form data
64:34 - we haven't created it yet we will we'll
64:37 - call it form data we'll assign it to
64:38 - ticket data and then we're just going to
64:40 - create the ticket so we're going to wait
64:42 - ticket. create this is a mongoose
64:45 - function we're going to pass in our
64:48 - ticket data and that's it then it'll
64:51 - then it will create the ticket for us
64:53 - now we also probably want to create a
64:57 - response as well so we'll do return next
65:01 - response the message that we want is no
65:04 - longer an error so we want this to be
65:07 - ticket created we can delete out this
65:11 - error and we can pass a status back of
65:16 - 2011 which I think is object created or
65:20 - successfully created or whatever so this
65:23 - this is all of our post function now
65:25 - again we don't have any way in our UI in
65:28 - the like user interface now to get that
65:31 - data and create the ticket but this is
65:33 - the backend setup for it so with that
65:36 - being said let's go ahead and create our
65:39 - form that's going to allow us to create
65:44 - tickets so let's open up components
65:47 - let's create a new file and inside of
65:49 - here we can do edit ticket form
65:55 - jsx actually we can simplify that let's
65:58 - just call it ticket form. jsx RF
66:02 - CE we're going to do a couple Imports in
66:05 - here and I want to make sure we get them
66:07 - right so let's go ahead and do those
66:09 - let's do import use
66:13 - router now this is the weird one so if
66:15 - you do the default one it's next router
66:18 - and that's not what we want so we want
66:21 - next slash
66:25 - navigation and then below that we want
66:27 - to use import
66:31 - react use
66:34 - state from
66:37 - react now one other thing that we want
66:39 - to do here so we're going to in these
66:42 - next projects they're using serers side
66:44 - JavaScript by default but sometimes we
66:47 - want to use the client side JavaScript
66:50 - so in this case we want to use client
66:52 - side JavaScript because we're going to
66:54 - use forms and have actions based on it
66:56 - and different things like this so at the
66:58 - top we have to explicitly state that we
67:01 - want to use the client JavaScript so
67:05 - we're going to do that so we're going to
67:07 - use client now for our ticket
67:10 - form this is pretty simple we're going
67:12 - to set up our ticket and we need some
67:16 - default data out of the
67:18 - box so our starting data for our ticket
67:22 - is going to be starting
67:24 - ticket data like this we can set it
67:28 - equal to let's give it a title of blank
67:33 - a
67:35 - description of
67:37 - blank a
67:40 - priority of
67:44 - blank oh don't forget your call in there
67:47 - a priority not a blank a priority of one
67:51 - a progress of zero
67:54 - a status
67:57 - of not
68:02 - started and a
68:07 - category Hardware problem these are my
68:10 - categories so you can do whatever you
68:12 - would like so this is going to be our
68:14 - starting ticket
68:15 - data and then we're going to use that to
68:18 - set our state so this is going to be a
68:21 - state managed form so every time they
68:23 - change something we're going to update
68:25 - the state and keep track of that so we
68:27 - can pass that data eventually onto our
68:30 - API to create the ticket so let's use
68:35 - const form data remember that's a
68:38 - variable we used in the API eventually
68:41 - and we'll call set form
68:45 - data we'll set that equal to use State
68:49 - and then we're going to pass in the
68:51 - default state so the starting State here
68:53 - and the starting State we divined above
68:55 - in the starting ticket data so this is
68:58 - going to give us the setup for our state
69:00 - out of the
69:02 - box now we want to return our form so
69:05 - we're going to have a form here
69:09 - something like that we're going to have
69:11 - a div let's do some basic styling here
69:14 - let's do a class name of
69:17 - flex justify
69:21 - Center I'll just Center our form
69:24 - and then inside of our form we can start
69:27 - getting things set
69:29 - up let's have an
69:33 - H3 and this will just say create your
69:38 - ticket this is also going to be our
69:40 - update ticket ticket page eventually so
69:43 - that's going to be dynamic here in a
69:44 - moment but for right now we'll leave it
69:46 - like that as our
69:47 - H3 we'll do our first label of
69:52 - title and then let's do our first input
69:55 - box as well and then we'll do some quick
69:57 - styling here so let's do input let's do
70:00 - ID equals
70:03 - title name equals
70:07 - title type equals
70:12 - text on change
70:15 - equals we don't have this yet curly
70:18 - brackets let's do
70:20 - handle
70:22 - change
70:26 - let's make this required so required
70:28 - equals
70:32 - true and the value
70:37 - equals form
70:39 - data.
70:43 - title then we'll do slash self- closing
70:46 - here now you see that auto formatted
70:48 - everything for me nice and pretty now we
70:51 - don't have a handle change that's an
70:53 - issue let's go ahead and set that up
70:55 - real
70:56 - quick let's define it up here we'll do
71:00 - const handle
71:02 - change it's going to get an
71:04 - event we'll pass that
71:09 - in we're going to get the value that we
71:11 - want to change from e. Target do value
71:18 - like that and then we're going to get
71:20 - the name of what we want to update from
71:23 - e
71:25 - target.
71:28 - name now we need to set our form data
71:31 - remember we're going to use this state
71:33 - function that we defined do set form
71:37 - data we're going to pass in our
71:40 - previous
71:46 - state so we're going to first use
71:49 - everything from our previous state now
71:53 - make sure you spell this the same I
71:54 - spelled it
71:56 - differently we're going use everything
71:58 - from the previous state and then we're
71:59 - just going to overwrite the one thing
72:01 - that we wanted to change so we're going
72:03 - to do
72:05 - name and set that equal to value and I'm
72:09 - getting
72:10 - these from above here I need another
72:13 - parentheses here so it gets
72:15 - [Music]
72:17 - returned and that means another
72:19 - parentheses here there we go so this is
72:22 - going to update our state with our
72:25 - handle change let's go ahead and spin
72:27 - this application up
72:29 - again we got some issues here but we'll
72:31 - talk about it real quick should be easy
72:33 - to
72:35 - fix go back to our application we can
72:38 - refresh it now remember if we click on
72:41 - the new ticket we're not loading in the
72:44 - form yet so nothing nothing happens when
72:46 - we navigate to here we need to do that
72:49 - first so on that ticket page inside the
72:52 - ticket page folder inside the square
72:54 - bracket ID we have the ticket page right
72:56 - now we're returning this
73:00 - instead let's Import in our
73:05 - ticket
73:07 - form like
73:09 - that and now when we go to that page you
73:12 - can see we have our nice ticket form
73:15 - here now it's not styled very well but
73:18 - we can take care of that really quick
73:20 - too so I got some very very quick basic
73:22 - styling
73:25 - here we're going to style our form we're
73:29 - going to do at apply now why am I doing
73:31 - it in global CSS
73:34 - well if this is a real project if this
73:37 - is something that you're going to grow
73:38 - and we might even continue to grow on
73:40 - this channel you want to be able to
73:43 - reuse this right so I want to set up the
73:45 - styling for our forms so for the most
73:48 - part if we want to do another form it's
73:50 - ready to use out of the box so so labels
73:53 - will do margin top of
73:59 - four and then for our input comma select
74:05 - comma text
74:09 - area we will do at
74:12 - apply margin of one rounded because you
74:16 - know I love those rounded corners and a
74:19 - BG of
74:21 - card padding of
74:24 - one that should be it I don't want to
74:26 - get too crazy with the styling you're
74:28 - probably going to make it your own
74:29 - anyway so you see we got a little nicer
74:32 - format there I like
74:40 - that let's go back to our form so now
74:42 - we're back on our ticket form page I
74:45 - apologize for all the tabs
74:47 - open this is actually how I code too
74:50 - with all these tabs
74:52 - open
74:54 - so go back to our ticket form let's get
74:56 - the rest of this fleshed out and then we
74:58 - can start adding tickets to our database
75:01 - so on our form let's go ahead and add a
75:06 - few styles to this as well now why
75:09 - aren't these in the in the global CSS
75:13 - they they could be you know they're
75:14 - they're kind of specific so you might
75:16 - not use these on every form you use so
75:18 - that's kind of where I draw that line
75:20 - but it's totally up to you these could
75:22 - go in the in the overall form as well so
75:27 - we'll add a method as well so we want to
75:30 - post our
75:33 - data and then on
75:37 - submit we want to create another
75:39 - function called handle
75:42 - submit and we'll use that now if we save
75:45 - this it's going to freak out because we
75:46 - don't have that yet so up here we can do
75:50 - const handle submit
75:54 - submit
75:57 - equals something like
76:03 - that this might be the farthest I've
76:05 - ever gotten coding without using a
76:07 - console.log but we'll just have
76:08 - submitted for right now as we create our
76:10 - form out here so we should be good
76:13 - everything should be created now let's
76:16 - copy all of this so we're going to copy
76:18 - the label and the input paste it below
76:22 - let's call call this
76:27 - description
76:31 - description paste paste that all looks
76:35 - good the type is going to be different
76:39 - well actually the the input is not an
76:42 - input it's a text area that we're doing
76:45 - this time so we don't need the type we
76:48 - got the ID the name the
76:50 - onchange we're still saying it's
76:52 - required the value is correct we can
76:55 - make the rows however many we want we
76:58 - can set rows equal to five that should
77:01 - be
77:01 - fine now let's take a quick peek at this
77:04 - just because now we have our form um the
77:06 - class flex and all that jazz so now you
77:08 - can see it starting to look a little
77:11 - nicer so that's our description let's do
77:14 - our categories now you can dynamically
77:16 - populate these eventually you can hard
77:18 - code them for right now we're going to
77:19 - hard code our
77:21 - categories we'll do another label inside
77:24 - of here we can call this
77:30 - category we're going to use a
77:33 - select and inside that select we're
77:36 - going to give it a
77:40 - name which is
77:43 - category a
77:46 - value which is form
77:49 - data.
77:52 - category
77:53 - an on
77:55 - change of handle change so we we coded
77:58 - that up dynamically so we can use the
78:00 - same for everyone here that's going to
78:02 - be our select now we just need our
78:09 - options so for our option we're going to
78:13 - have a
78:14 - value which is equal to now for example
78:18 - what do we say our default was Hardware
78:21 - problem
78:25 - we can have a value of Hardware problem
78:28 - and we can show Hardware problem
78:31 - here let's copy this let's just give
78:34 - another maybe three
78:39 - categories do software
78:43 - problem and let's do
78:47 - project make sure the values changed as
78:51 - well
78:56 - sometimes these are different so you
78:58 - might want something displayed
78:59 - differently to your user um than the
79:02 - actual value so that's why you have two
79:04 - options
79:05 - there look at this you'll see our drop
79:07 - down is nice that
79:10 - works after this let's do our label for
79:16 - our
79:18 - priority we're going to do a div around
79:20 - all these so they show up in a
79:23 - horizontal
79:24 - line we'll do
79:27 - input we'll do an ID that
79:32 - equals
79:34 - Priority
79:36 - One a name which
79:39 - equals
79:43 - priority a
79:45 - type which is
79:51 - Radio on change which is handle
79:58 - change a
80:01 - value which in this case equals
80:07 - one just save so that would format and
80:10 - then below the value let's do checked
80:13 - equals let's look at our form data so
80:16 - this is going to decide whether which
80:19 - one should be checked at the
80:21 - moment
80:23 - so if our priority equals one so I'm
80:26 - using two equal signs here I'm using two
80:28 - equal signs for a specific reason I want
80:31 - it to not care about the type so I want
80:34 - it to check it if it if one equals the
80:38 - number one and I also want it to check
80:39 - if one equals a string one so that's why
80:41 - I'm using two equal signs as opposed to
80:44 - three
80:46 - there so that all looks good and then we
80:51 - just need a label
80:53 - below that and I'll show you why here in
80:55 - a minute of
80:57 - one that all looks good let's copy
81:01 - that paste it below now starting with
81:05 - this we're going to go
81:06 - two two for the value two for the
81:10 - comparison and two for the
81:12 - label this will be our three four
81:19 - five let's slide up here's the last two
81:22 - so here we're going to do our one is
81:24 - going to be changed to a three three
81:28 - three three
81:31 - four four
81:34 - four
81:36 - four
81:38 - five five five five cool so now we
81:43 - should have all of our priorities
81:45 - done let's go ahead before we look at it
81:48 - let's just do another one here let's do
81:51 - label for our
81:58 - progress now I did this progress bar
82:00 - because I wanted another type in here I
82:02 - don't know if you'd use this in a ticket
82:04 - situation I guess it could be kind of
82:06 - useful but um it allows us to show
82:09 - another thing here so type equals range
82:13 - ID equals
82:15 - progress name equals
82:20 - progress value
82:23 - equals form
82:25 - data.
82:29 - progress let's do our Min
82:32 - equals zero do our Max equals 100 so
82:38 - it's going to be a progress bar from one
82:40 - to
82:41 - 100 I save this just so it would format
82:44 - below Max we're going to do on change
82:48 - equals you guessed it handle
82:51 - change
82:55 - that should be
82:57 - good this might be our last one nope we
83:00 - don't want a stat not status tags let's
83:03 - do
83:04 - label of
83:08 - status and this kind of like our other
83:11 - one we're going to use a select
83:18 - box inside the select box we have a name
83:22 - of
83:25 - status we have a value equal to form
83:29 - data.
83:31 - status have an on
83:34 - change handle
83:37 - change and then we have some
83:44 - options
83:45 - so first option has a
83:51 - value we'll do not started now this is
83:55 - we can do this as kind of an example of
83:57 - how this could be different although not
83:59 - much different so here we could do not
84:01 - started with capitals and here lowercase
84:03 - or whatever you might want to
84:06 - do do a second option third option this
84:10 - one we'll do
84:12 - started
84:16 - started this one let's do
84:20 - done done
84:24 - that's our select box and then finally
84:27 - we are here let's do our
84:30 - input type equals
84:35 - submit class name now luckily we already
84:37 - typed all that right
84:41 - BTN and the value equals this will be
84:45 - dynamic in a little bit so it can be
84:47 - update ticket but for right now create
84:51 - ticket okay let's take a look at what we
84:54 - got
84:56 - cool so depending on um if you want this
84:59 - button wide or not that could be
85:01 - different but other than that it looks
85:02 - pretty good make sure everything works
85:05 - looks like we can select stuff change
85:08 - stuff
85:13 - type that looks
85:17 - great if you wanted to change this
85:20 - button to look more like uh like a
85:22 - smaller button you could do like a Max
85:25 - width of extra smaller
85:28 - something if you go here now it's more
85:31 - like a button doesn't particularly
85:33 - matter to us um but if you want to
85:36 - change it so what we're going to do next
85:38 - is we're going to actually hook this up
85:40 - and then we will create our our first
85:44 - ticket in the
85:45 - database so let's see if we can get a
85:48 - ticket actually submitted so let's
85:50 - scroll
85:51 - up
85:55 - and we're going to edit our handle
85:57 - submit here let's go ahead and delete
86:00 - that out the
86:02 - console.log we're going to get an event
86:04 - so we'll pass in
86:06 - E we're going to prevent default so the
86:09 - first thing we want to do is we want to
86:11 - prevent the form from doing its normal
86:15 - default Behavior so we don't want the
86:16 - page to refresh or anything like that
86:19 - and then let's create a constant for our
86:24 - response we'll set it to await
86:29 - fetch we're going to go to our API to
86:32 - the tickets
86:34 - folder oh we didn't create a ticket
86:36 - folder so our API we should actually
86:39 - create a folder for that cuz eventually
86:42 - we're probably going to have more than
86:44 - just tickets in our applications you're
86:46 - going to have users or whatever it might
86:47 - be so let's create a tickets folder
86:50 - let's move this route ins inside of that
86:52 - folder so go ahead and move it now we
86:54 - got a route inside of tickets so we'll
86:58 - do a weight fetch tickets this will be
87:01 - our URL that we're accessing for this
87:04 - post
87:09 - method so we'll say say our method is
87:15 - post our body we need to pass the data
87:18 - to this post method so we'll do string
87:26 - stringify and then we'll pass in our
87:29 - form
87:38 - data we'll do content type of
87:43 - application
87:46 - sljs that looks good all looks good
87:49 - there we'll get to that era in just a
87:51 - second ignore that for the time
87:56 - being we'll say if our response. okay is
88:00 - not true so if there's some sort of an
88:03 - error let's throw a new errror let's
88:07 - just say failed to create
88:11 - ticket now after this we after we create
88:14 - a ticket we probably want to Route it
88:16 - back to the dashboard to our ticket set
88:20 - so here is where we need to use this use
88:24 - router that we defined
88:26 - above so let's create a router so let's
88:29 - say
88:30 - const router
88:32 - equals use
88:38 - router and then here down below so this
88:41 - is going to throw this air if not if it
88:44 - doesn't throw that air then we want to
88:47 - use the router
88:51 - to refresh the page and then we'll use
88:56 - router. push to push us back to the
88:59 - default
89:01 - page so that all looks good this handle
89:05 - submit now because we're using an async
89:08 - function because we're waiting we need
89:11 - to use the async
89:14 - above save
89:16 - that that looks pretty
89:19 - good I think
89:23 - so let's go ahead and let's create try
89:25 - and create our first ticket let's
89:26 - refresh this page just to make sure and
89:30 - we'll say I dropped my
89:34 - PC please fix my
89:38 - PC I dropped it
89:41 - today I will
89:45 - be
89:48 - waiting your
89:50 - response
89:52 - we'll say this is a hardware problem
89:54 - give it a priority of two not started
89:57 - yet create that
90:01 - ticket and it through an air let's see
90:04 - if we have
90:11 - anything okay one thing we can do we can
90:13 - do control shift I this will bring up
90:16 - our console
90:18 - here status of 404 not found API
90:24 - tickets that's probably because of how
90:26 - we had it structured and I kind of moved
90:28 - things around there so inside of our API
90:31 - folder there's tickets and we have our
90:34 - route the post route inside of
90:41 - it let's do
90:45 - a console.log here and see if that hits
90:48 - we're inside the tickets folder go back
90:51 - to TI get
90:54 - form weot a slash here let's add that
90:57 - slash back
91:01 - in leave everything the
91:05 - same ah this import is now different
91:08 - because we move that so we need two SL
91:10 - two dot dot slashes to go back up two
91:13 - directories all this is because I didn't
91:18 - structure go back in our route so for
91:21 - our route we're going to add
91:23 - another do
91:32 - slash cool so that looks like it worked
91:36 - it kicked us back to the main page but
91:38 - you'll also notice
91:39 - that um it didn't give us the updated
91:42 - ticket which makes sense because we're
91:43 - displaying these default tickets we're
91:45 - not actually displaying our live
91:48 - data so if we go back here we can see
91:51 - that we've actually successfully created
91:54 - a ticket so that's cool I dropped my PC
91:56 - blah blah blah let's go back here and
91:59 - actually in our route I'm curious if I
92:01 - can replace this whole
92:04 - mess with
92:07 - at and then app slm models like that
92:13 - that should take us to the base of the
92:15 - app let's try and create another ticket
92:16 - and just see if it
92:20 - works I dropped the
92:24 - server this is way worse please fix it
92:31 - now this is also a huge problem let's
92:34 - make this a
92:35 - five and create the ticket you'll see
92:38 - that worked as well so that at symbol
92:40 - did work for us that'll probably clean
92:41 - it up so if we move things around it
92:43 - won't be an issue next time and you'll
92:45 - see now we have two tickets awesome so
92:48 - now we're creating tickets in our
92:50 - database so we got to create function
92:52 - down of our database but we're not
92:55 - showing those tickets we're still
92:56 - showing the default tickets here so
92:59 - let's go ahead let's create one
93:06 - more create a map of our whole
93:16 - network we'll create something like this
93:19 - we'll say it's going to take some time
93:21 - we'll make this a project we'll give it
93:22 - a priority of two we might already have
93:25 - something done so we'll add a little
93:27 - progress and we'll say it started create
93:30 - the ticket so now we should have three
93:33 - tickets two different
93:38 - categories yep and that's in our
93:40 - database as well so that's all good to
93:44 - go now what I would like to do next is
93:48 - let's create a route to get all of our
93:50 - tickets cuz cuz right now we're showing
93:52 - default tickets but we don't really want
93:54 - to show default tickets we want to show
93:57 - our actual tickets that are stored in
94:00 - our database so let's create a new async
94:04 - function for
94:06 - get now this is inside the tickets
94:09 - folder in our route folder we can do a
94:12 - try catch for this as well our catch can
94:15 - be the same so I'm going to copy that
94:17 - paste it so we got our catch and then
94:21 - here to get the tickets we're going to
94:23 - do const tickets equals a
94:27 - weit
94:29 - ticket
94:30 - find we're just finding all of them you
94:33 - could do some filtering here you know
94:35 - only find Open tickets only whatever but
94:38 - we're not we're not there yet so we're
94:39 - going to keep this the same and when we
94:42 - do that we want to return a next
94:46 - response instead of this we want to
94:49 - return our
94:50 - tickets
94:52 - and we'll give a status of 200 that's it
94:55 - pretty
94:56 - simple so now we should have a way to
94:59 - get our tickets into our project and
95:04 - let's go to our main page so inside the
95:06 - app now this can get a little confusing
95:08 - because we have multiple Pages um but
95:11 - inside the base level app where we're
95:13 - displaying our ticket cards let's open
95:16 - that
95:17 - up and the first thing I want to do is
95:19 - create a con
95:22 - to get create a variable to get our
95:24 - tickets this is going to be an async
95:27 - function because we got to wait for
95:30 - it we don't need to pass anything to
95:33 - this one right because we're just doing
95:35 - we're just trying to connect and grab
95:37 - out the tickets this will be a good look
95:39 - so let's create a const for our response
95:42 - equals a weit let's fetch our
95:47 - tickets this time we're using the server
95:50 - we're not using client s side so we have
95:51 - no used server up there so we need the
95:53 - full
95:55 - URL I
95:58 - believe to
96:01 - API make sure this is capitalized
96:04 - tickets so this should get our
96:07 - response do a
96:10 - comma inside here we just want to ma
96:13 - mention that we don't want to store this
96:17 - data so every time this runs we want to
96:19 - check and see if there's no if there's
96:21 - new data inside of
96:24 - this if there
96:27 - is we want to Res turn that
96:31 - response like
96:34 - that and if
96:37 - not we can console.log out our
96:42 - err you can make this a little more
96:47 - descriptive failed to get tickets that
96:50 - looks great right so now here inside of
96:53 - the dashboard we need to actually use
96:56 - that new function so let's destructure
96:59 - tickets from await get
97:07 - tickets this dashboard needs to be an
97:10 - async
97:13 - function Willow wait get tickets so now
97:16 - we should have our tickets now I want to
97:18 - map over and get all the unique
97:21 - categories we have so I want to kind of
97:24 - separate out these tickets by category
97:26 - so buy software buy hardware and buy
97:28 - projects in our case um we don't have
97:30 - any software yet I don't think but we
97:33 - might in the future so let's get all of
97:35 - our
97:38 - unique categories let's set that equal
97:41 - to an array what we're going to do is
97:44 - we're going to D structure a new set so
97:48 - what set's going to do is it's going to
97:49 - take all of our results and it's it's
97:51 - going to remove the duplicates
97:52 - essentially so we're going to do
97:55 - tickets.
97:59 - map we're going to destructure our
98:02 - category
98:06 - singular and then we're going to return
98:09 - each time that category so all we're
98:12 - going to do is we're going to map over
98:14 - all the tickets and every time we have
98:16 - an individual ticket in our list of
98:18 - tickets we're going to grab out the cat
98:21 - ategory and we're going to return it
98:23 - then we're going to pass that to a set
98:25 - so what that's going to do it's going to
98:27 - remove the duplicates so now inside of
98:30 - here in our case we should have Hardware
98:33 - problem and project as our two unique
98:36 - categories we shouldn't have software
98:38 - because we don't have any tickets yet
98:39 - that have
98:42 - software so now inside of this we can
98:45 - delete out all of our placeholder ticket
98:49 - cards so in side
98:54 - here let's do another
98:59 - div and below this
99:02 - div we're going to say if we have
99:05 - tickets so if
99:07 - tickets is available we want to take our
99:11 - unique categories and we want to map
99:14 - over
99:16 - those for each unique
99:20 - category
99:23 - now make sure this is singular so unique
99:27 - category we're going to get the unique
99:30 - category and we're going to get a
99:32 - category
99:35 - index every time we have that we're
99:37 - going to create a
99:39 - function and every time we have
99:46 - one we're going to create a new
99:50 - div
99:52 - opening and
99:57 - closing and this div we're just going to
99:59 - give it some space here so mod margin
100:02 - bottom
100:04 - four and we also need to give it a key
100:07 - so we're going to set the key equal to
100:09 - our
100:11 - category index here just like
100:16 - that so this is going to give us
100:19 - whenever we're mapping over we need to
100:20 - give it a unique key a unique identifier
100:22 - so that's why we're passing in that
100:24 - category index and then inside of this
100:27 - let's give an
100:32 - H2 and this is going to be simply our
100:35 - unique category so it's going to give us
100:37 - a header of whatever category we're
100:40 - currently
100:42 - under then let's pull this out of
100:45 - here let's put it below that
100:49 - H2 so now we we have our new ticket grid
100:54 - here I'll save it just to format a
100:57 - little bit for you guys and now let's
101:00 - spit out our tickets so with our tickets
101:03 - we want to do
101:05 - filter we're going to grab that One
101:07 - Singular ticket and we're going to say
101:11 - if the ticket.
101:13 - category
101:15 - equals the unique category we're
101:17 - currently on not the unique categories
101:21 - singular so unique category so if the
101:24 - current ticket matches the category
101:27 - header that we're displaying here then
101:29 - we want it to show up
101:32 - right so if that's the case we want to
101:35 - do
101:40 - map and this is going to be our filtered
101:44 - ticket and our underscore index
101:49 - here
101:53 - now what we can do now once we get to
101:56 - this point we know we have a ticket and
101:58 - we know it matches our current
102:01 - category so now we can pass our ticket
102:06 - card like
102:08 - that but we also need to pass some more
102:10 - information remember our ticket cards
102:12 - are static right now we're not passing
102:14 - in any actual data so we want to give it
102:17 - an
102:19 - ID and the ID is going to be underscore
102:26 - index and the key is going to be
102:30 - underscore
102:34 - index and we're also going to pass it
102:36 - the ticket information which we'll call
102:38 - ticket pretty
102:40 - easy so now we're passing all of our
102:43 - information into here now remember this
102:45 - ticket's still going to be static
102:46 - because in our ticket card we're not
102:48 - using this yet but that's okay we will
102:51 - be here
102:53 - shortly so we can save
102:56 - that and we don't want to pass ticket
102:58 - here we want to use this filter ticket I
103:00 - could tell because it was gray out we
103:02 - want to get just our filter ticket that
103:05 - would have been a weird bug
103:07 - later and you can see now although the
103:09 - ticket information isn't correct you can
103:12 - see it's updated to fall under Hardware
103:14 - problem or project and we have three
103:16 - tickets which does match the amount we
103:18 - entered so we're getting closer
103:21 - so now we're actually passing this data
103:23 - to our ticket card we need to update
103:26 - that ticket card to utilize that
103:28 - information
103:29 - instead so if we go to our ticket card
103:32 - now we're being p a ticket to this so we
103:36 - can destructure you're going to use your
103:37 - curly braces here and we're going to
103:40 - destructure that
103:42 - information and then the first thing we
103:44 - want to do is priority display so for
103:47 - priority display we want to now pass in
103:50 - our priority that we want to use and we
103:53 - want to use ticket. priority so now
103:57 - inside of this priority display we're
103:58 - going to utilize this new one instead of
104:01 - hardcoding it so what does that look
104:02 - like if we open that up and you can
104:04 - control click on this to open it up or
104:06 - you can open it up over here I'll
104:08 - control click if you open this up now
104:11 - inside of our priority
104:13 - display we can destructure the priority
104:17 - that we were just passed
104:19 - in now with that
104:21 - priority we can dynamically edit these
104:24 - so they're not always all red we want to
104:26 - use that priority value so if we want to
104:29 - do that we can switch these to back
104:32 - ticks let's switch these to back
104:36 - ticks and then I'm going to wrap it in
104:38 - curly
104:40 - braces so now we can add variables
104:42 - inside of
104:44 - here so the first thing I want to do is
104:47 - let's add some padding to the right of
104:50 - one
104:51 - and then we want it only to be read if
104:54 - it's a priority one ticket so let's
104:59 - use these curly brackets and we're going
105:02 - to
105:04 - say if our priority is greater than
105:09 - zero if our priority is greater than
105:13 - zero we want this ticket to be red
105:18 - otherwise we want it to be some other
105:20 - color
105:21 - let's get this just so it's a little
105:23 - easier for you to understand
105:25 - here okay so we got a conditional
105:29 - statement here so if this is true this
105:32 - first quotation mark is going to happen
105:34 - so we want it to be red if it's not true
105:39 - then we want the text color to be
105:42 - slate 400 so this is just going to be
105:45 - like a
105:47 - gray so hang with me here this is is a
105:50 - little bit different but let's copy all
105:52 - this and let's replace all of
106:01 - these so now if our priority is greater
106:04 - than one we want this one to be colored
106:07 - if it's greater than two we want this
106:08 - one to be colored three and
106:10 - four we want this one to be colored so
106:14 - now we're using that priority
106:15 - information that we're passed in and if
106:17 - you look at these they all have zero
106:19 - priority which isn't great right that's
106:22 - not
106:23 - correct because we didn't save our
106:25 - ticket card let's save
106:30 - that and now you can see it's Dynamic so
106:33 - this part should be updating so we have
106:35 - a hardware problem one has five stars
106:38 - and one has two
106:40 - stars and if we go here we have a
106:42 - hardware problem one has five
106:45 - stars and the other has two stars so
106:48 - that that makes sense or two fires stars
106:50 - and my
106:52 - fires so the priority display should be
106:55 - hooked
106:58 - up let's go back to our card right here
107:02 - we can go ahead and update our ticket
107:04 - header as well so let's use curly
107:06 - brackets and do ticket.
107:10 - tile here we can do curly
107:14 - brackets do
107:16 - ticket.
107:19 - description
107:21 - those should update
107:23 - now see now we're getting Dynamic data
107:26 - here as well our statuses aren't correct
107:29 - or progress bar isn't correct that's
107:31 - okay we got to go back and create a
107:34 - delete block you can't delete tickets
107:35 - right now so we got our title we got our
107:37 - description for the time this one's
107:40 - going to be a little unique it's going
107:41 - to be a time stamp right now but let's
107:43 - use curly brackets and let's do ticket
107:46 - dot look at our database it's called
107:48 - created at
107:50 - you could use the update as well I guess
107:53 - created
107:56 - at so that should show up
108:00 - now you'll see we got this pretty time
108:03 - stamp we'll deal with that in a moment
108:05 - and our progress display we want to pass
108:08 - in our progress so that progress will be
108:11 - equal to ticket.
108:15 - progress and our status is the same way
108:18 - we want it to status equal
108:22 - ticket.
108:23 - status so now these won't show up yet
108:26 - obviously we have to enter the actual
108:28 - data on the ticket so let's open up
108:31 - progress display following the same
108:34 - format we want to destructure our
108:37 - progress and now instead of hardcoding
108:40 - in 75 here so instead of hardcoding this
108:45 - in we want to use
108:49 - fatic
108:52 - and then we can do dollar sign and pass
108:55 - it whatever our progress variable is we
108:58 - still need the percent here so that
109:01 - should be done go back to our ticket
109:04 - card control click our status so
109:07 - here we want to use our status instead
109:12 - so we're destructuring our status and
109:15 - then here instead of done we want to be
109:18 - whatever our status is
109:22 - now if we look at this I remember only
109:23 - one had progress on it so that looks
109:25 - like it's correct and you'll see not
109:27 - started and started are both correct so
109:30 - the statuses are correct however they're
109:31 - not the right color so we got a little
109:33 - more work to do
109:35 - here you do this a bunch of different
109:38 - ways let's create a function let's say
109:41 - this is get
109:43 - color we're going to pass in the
109:47 - status that this equal to
109:52 - status like that again we'll create a
109:57 - color so we'll say let color
110:00 - equals we can do BG
110:04 - slate 700 as our default and then let's
110:09 - do a switch
110:11 - case so we'll take our status and Dot to
110:16 - lowercase this just to be careful in
110:18 - case we get past an uppercase status or
110:20 - something like
110:21 - that now here we can have a case if it's
110:25 - done we want the color to equal BG D
110:31 - green-20 which is the color it's using
110:33 - right now let's go ahead and return that
110:37 - color then our case if it is
110:42 - started so we'll say that case is the
110:45 - color will
110:47 - equal dg- yellow
110:52 - -200 then we'll return the
110:56 - color that a p in there contr s we'll
111:01 - get all formatted you're noticing I'm
111:03 - getting sloppy because of this
111:06 - prettier we say not started as our last
111:09 - status the color will equal BG red 200
111:14 - because we need to start that as soon as
111:17 - possible we'll return the color
111:20 - and if none of these
111:23 - execute we can just return the original
111:26 - color that we set above oops don't put
111:29 - that
111:31 - there after your switch case so one of
111:34 - these returns should hit in our case if
111:37 - not we just do the gray um background
111:39 - default or whatever it is there now if
111:43 - we slide over now we don't want to
111:45 - hardcode in this 200 right so we want to
111:49 - utilize our function so what we can do
111:52 - is change these to back
111:56 - ticks like so make sure you delete out
111:59 - the extra one we can highlight all of
112:01 - this put it inside curly
112:04 - brackets like that we want to delete out
112:07 - the background color of green we don't
112:09 - want that anymore we'll do dollar sign
112:11 - curly brackets so now we can inject a
112:14 - variable here we can do get color we can
112:18 - pack pass in our
112:21 - status that should be it so it should
112:23 - look something like this get color and
112:25 - status with it wrapped around like that
112:27 - let's see if it worked and now we got
112:29 - our correct colors we are making crazy
112:33 - progress here so we got our priority we
112:35 - got everything on the ticket formatted
112:37 - except the date
112:39 - time I'll show you kind of a neat way to
112:41 - take care of that so back in our ticket
112:43 - card let's create a cute little function
112:46 - to format our timestamp so let's let's
112:49 - say
112:50 - const format time
112:54 - stamp
112:56 - equals we'll pass it a
113:01 - timestamp do something like
113:03 - that so for this we need to set some
113:06 - options of how we want it to look so
113:10 - totally up to you but let's do year of
113:15 - numeric let's do month of two digits
113:20 - so we'll do a two-digit
113:24 - month let's copy
113:27 - this we'll do day hour and
113:31 - minute so after month let's do
113:35 - day
113:37 - hour and
113:39 - minute and then let's also after this
113:43 - let's say hour 12 equals
113:47 - true so this is going to give us the
113:49 - options of how we want our date to look
113:51 - again obviously you can do whatever you
113:53 - want let's set a con date equals new
113:56 - date and let's pass in our timestamp so
113:59 - now we have a date object that matches
114:01 - our timestamp that we set and now let's
114:05 - format
114:07 - it formatted
114:09 - date equals date
114:13 - do2 local string like
114:18 - this en. us or whatever you want to
114:22 - format it to let's do comma then pass in
114:26 - our
114:28 - options now the most important thing in
114:30 - any
114:31 - function if you need data back is
114:34 - returning the
114:37 - data I don't know should this not have
114:39 - two T's that spelled right formatted I
114:42 - don't think formatted has two
114:46 - T's so we're returning that format a
114:48 - date so now in instead of using this
114:50 - pure timestamp here so we use this
114:55 - ticket created at instead of that we can
114:57 - call our formatted Tim stamp and pass in
115:00 - that Tim
115:03 - stamp now if we take a look at this this
115:05 - looks much better so now we have our
115:09 - tickets working we have all the data
115:11 - showing up we can create tickets now we
115:13 - need to be able to update and delete
115:15 - tickets as well so that's what we're
115:17 - going to cover next
115:20 - all right so we still have two functions
115:22 - of our crud application that are not
115:24 - functioning yet we need to create our
115:26 - delete function and our update function
115:29 - as well let's go ahead and Tackle delete
115:31 - first I think it's a bit easier let's go
115:34 - back to our code into our API now this
115:38 - one's going to be unique inside of the
115:40 - API folder let's right click on tickets
115:43 - and create a new
115:45 - folder and for this one we're going to
115:48 - use the square brackets and ID again so
115:51 - what we're doing here is we're going to
115:53 - create an API that can access and delete
115:57 - a single ticket or delete or update a
116:00 - single ticket so we're going to use
116:02 - these Square params again and if we
116:04 - right click on that we're going to
116:06 - create a new file and we're going to
116:07 - call it route doj again the name is
116:10 - important there so we have one route. JS
116:14 - inside our ID folder and we have one
116:16 - inside our tickets folder now the
116:19 - Imports are pretty similar so let's do
116:22 - import ticket
116:25 - from we can use our at symbol this time
116:28 - app slash
116:30 - models
116:32 - ticket that looks pretty good and then
116:36 - we'll also
116:38 - import
116:40 - next response from next server that
116:44 - looks
116:46 - good this one's pretty simple so it
116:49 - shouldn't take too much
116:51 - here we're going to export async
116:56 - function
116:59 - delete we're going to use request and
117:02 - we're going to grab off the pams so we
117:05 - want to grab the parameters that we're
117:08 - passing in so we know which ticket to
117:13 - delete we can do this inside of a try
117:16 - catch like we did with our others if
117:19 - there's an
117:22 - error we can just return that response
117:25 - like we did with the
117:27 - others we can give a message of error
117:32 - and we can also pass the
117:37 - error we can also return a status of 500
117:41 - or something like that that can be our
117:43 - err block for this we want to grab off
117:46 - the ID from our
117:48 - prams
117:49 - then we want to
117:53 - await ticket. find
117:56 - by by
117:59 - ID and
118:02 - delete and we want to pass the
118:05 - ID then if that's all executes we can do
118:10 - next response
118:15 - again we can copy this for our message
118:18 - we want
118:23 - tiet
118:24 - deleted don't need the
118:29 - erir we can give a status of 200 so this
118:32 - should be our delete
118:34 - function now we need to actually hook
118:36 - this up and make it function so let's go
118:38 - back to our delete block
118:41 - here and we're going to create
118:46 - a delete ticket
118:49 - function it's going to be an async
118:53 - function just like we did with our other
118:57 - ones inside here we can do constant for
119:01 - our response it'll equal a weight let's
119:06 - Fetch and then we'll pass our delete API
119:13 - URL so it's local 3000
119:17 - API tickets plural in our case slash and
119:21 - then we want the ID now this is where
119:23 - you have to make sure your folder
119:24 - structure over here is okay and correct
119:27 - we want this route inside of the square
119:29 - bracket ID so then from
119:32 - here we can pass in our ID value for
119:36 - whatever ticket we're working on now
119:39 - it's also important for our delete Block
119:42 - in general we're going to now have to
119:45 - pass it an ID off of that as well so
119:47 - we'll have to update that on our ticket
119:49 - get card here in just a moment so we got
119:51 - our
119:52 - response oops I wasn't quite done there
119:56 - put a comma after
119:59 - this do our method
120:02 - is
120:06 - delete and we'll say if our response is
120:12 - okay want to do
120:15 - router.
120:18 - refresh
120:20 - this is going to be
120:21 - lowercase and we got to create that
120:24 - variable just like we did with our other
120:26 - where we created a router so we'll say
120:27 - con router equals use router now this is
120:31 - the one again you want to be careful we
120:33 - want to import next navigation use
120:35 - router so you can see my import is next
120:38 - navigation make sure that's the way on
120:40 - yours too or else it won't function
120:42 - correctly now we need to call this
120:44 - function so we'll say on
120:48 - click equals delete ticket bam now this
120:53 - is
120:54 - functioning but we're not at the moment
120:57 - passing in an ID so we're going to have
120:59 - to fix that so let's go back to our
121:03 - ticket
121:04 - card and inside the delete block now we
121:08 - need to pass an ID so we can say the ID
121:10 - equals our
121:12 - ticket doore ID so this is saved inore
121:16 - ID in mongodb
121:19 - save that let's go back to our delete
121:23 - block we have an error here um this is
121:26 - because we're trying to use an
121:28 - interactive component so we need to use
121:31 - client side JavaScript so we need to
121:34 - explicitly say we want to use the client
121:37 - up
121:41 - here to take care of our issue that
121:44 - looks pretty
121:45 - [Music]
121:48 - good so now if we go back to our
121:50 - application and I've actually had this
121:52 - sitting for just a bit so I'll hard
121:54 - refresh it just to make sure so that
121:56 - looks good we have our project and our
122:01 - two tickets let's delete the I drop the
122:05 - server
122:07 - ticket can't resolve the
122:11 - tickets go back
122:14 - here that was in the delete block I
122:18 - believe
122:22 - oh wait no it was in the route
122:26 - here oh silly me I needed parentheses
122:31 - around
122:32 - this my
122:35 - bad okay so if we go back here refresh
122:39 - this make sure we're all up to date we
122:41 - should be
122:43 - anyways H that we get another error
122:47 - router. refresh is not a
122:51 - function silly me this use router should
122:55 - be a function that should resolve our
122:57 - issue there so now this might have
123:00 - executed because it hit that so yeah we
123:03 - did delete it and then it aired out
123:04 - afterwards so we we did delete that
123:07 - ticket let's delete the project
123:10 - one and you'll see that works correctly
123:13 - we refresh we only have one
123:15 - ticket now if we go to mongod DB you'll
123:18 - see reflects that in our database as
123:20 - well we've successfully deleted those
123:22 - tickets awesome so we should be good to
123:25 - go there that is functioning
123:27 - correctly now we have just one more to
123:31 - functional component to add to our crud
123:34 - here and that's the update functionality
123:37 - so we're going to do this kind of
123:38 - uniquely I only want one ticket page so
123:41 - we're going
123:43 - to decide whether it's whether we need
123:46 - to update a ticket or create a new
123:49 - ticket based on the parameter we're
123:51 - passing in if we go to our ticket card
123:54 - first we want to add a link to this so
123:57 - when we click on a ticket we want it to
124:00 - take us to the update ticket page right
124:03 - so on our ticket card we need to add a
124:07 - link here so what we can do is we can
124:10 - wrap this whole section in a link
124:15 - tag so let's start the link right above
124:19 - the
124:21 - H4 and then we'll do it right below the
124:24 - status display here so there should be
124:26 - one div after the link tab if we save
124:29 - this it's going to puke because it needs
124:32 - the hre
124:33 - here so we'll go ahead and set that up
124:35 - so we'll say hre equals curly brackets
124:39 - back ticks because we're going to use
124:42 - some variables here we want it to go to
124:44 - the ticket page now remember we have to
124:47 - pass a parameter to go to the ticket
124:49 - page because it's in that ID so in this
124:52 - case we want it to give the ID of the
124:55 - ticket and we want the style variable
124:59 - here as
125:02 - well so what we're going to do is we're
125:05 - going to pass in to make sure it
125:10 - displays contents so essentially this is
125:13 - going to allow our CSS to pretty much
125:15 - ignore this link tag so it's not going
125:17 - to change the structure here we're just
125:19 - adding in the link is all we're
125:23 - doing and of course we need to import
125:28 - this I'll use intellisense there you can
125:31 - see it added my link from next link that
125:34 - should be
125:38 - good that should be working so now if we
125:41 - go back to our application we only have
125:42 - one card we're running out here you'll
125:44 - see I now have like the pointy Arrow
125:47 - over the whole thing if I click on it I
125:50 - do go to the ticket app so that is a
125:53 - positive we go to the ticket app we have
125:55 - the correct ticket ID but obviously it
125:59 - doesn't look like we're updating it it
126:01 - still has create your ticket create your
126:02 - ticket and we don't have any update
126:04 - functionality
126:05 - either so when we click on this remember
126:08 - we're going to the ticket page so inside
126:12 - of our close the components inside of
126:16 - our ticket page folder we have an ID
126:19 - folder and then the page here and right
126:23 - now we're just rendering that ticket
126:25 - form we're still going to pull off the
126:27 - pams we definitely need those now and
126:30 - then inside of this we're going to
126:32 - create a constant called edit mode so
126:36 - this is going to tell us if we're
126:38 - editing a ticket or if it's a new ticket
126:41 - that we're cry trying to create so
126:43 - remember if it's a new ticket the ID
126:46 - will
126:47 - equal new
126:49 - otherwise it's going to be something
126:51 - else so we can set up some conditionals
126:54 - here so all this is doing it's going to
126:56 - check our parameters to see if it equals
126:59 - new if it does update mode is false and
127:02 - we know or edit mode I'm sorry so we
127:05 - know that it's a new ticket otherwise
127:07 - edit mode is true and if we look at this
127:10 - we can tell that see if we had ran this
127:13 - edit mode would be true because this
127:15 - does not equal new but if we use the new
127:18 - ticket button you'll see on the same
127:20 - page we have a pram of new so that's
127:23 - going to be what
127:24 - drives whether this is updating a ticket
127:27 - or creating a new
127:30 - ticket so let's go ahead and say if we
127:34 - have edit
127:36 - mode so if we're editing a ticket we
127:40 - need to get our update ticket
127:45 - data we'll set a variable for that as
127:47 - well so we'll say
127:55 - let data equal blank object like this so
127:59 - then if it's edit mode Let's go ahead
128:02 - and create a function to get our ticket
128:07 - by ID now technically we could probably
128:11 - pass all the tech ticket data down from
128:13 - the function above but I wanted to do
128:15 - this so we can show how to get a single
128:18 - ticket we have a function where we're
128:20 - getting all the tickets let's create one
128:21 - to get a single ticket so we're going to
128:23 - await that ticket data remember this
128:25 - function doesn't exist
128:29 - yet and then down here we can just
128:32 - console.log out that updated ticket data
128:35 - for right now we obviously don't have
128:38 - this
128:40 - function and this needs to be async
128:47 - now then up here we can do
128:52 - const get ticket by ID this equals an
128:57 - async
128:58 - function we'll pass in an
129:03 - ID we can do our try catch if there's an
129:07 - error let's just console.log out that
129:10 - error for right
129:14 - now we'll await our fetch let's use back
129:17 - ticks again cuz we're going to pass in
129:19 - that variable
129:23 - HTTP localhost colon 3000
129:28 - slash API slash tickets slash dollar
129:34 - sign ID this doesn't exist yet but a
129:37 - comma curly brackets and we want
129:41 - to not store this data so we want to
129:43 - grab the data every
129:45 - time to no store
129:51 - that looks
129:53 - good let's do it this way actually
129:56 - instead of the try catch block let's say
129:57 - if the response isn't
130:00 - okay and we want to throw a
130:03 - new
130:08 - air failed to get
130:11 - ticket so we can actually kill this try
130:17 - catch that and we'll just throw a new
130:19 - err if we don't get
130:21 - it otherwise we want to return our
130:24 - response.
130:25 - Json like that okay so now we have this
130:29 - all but this API does not exist yet so
130:32 - we need to create that don't worry it's
130:33 - very easy so we're inside the route. JS
130:38 - inside the square bracket ID folder
130:40 - remember that's very important we're
130:42 - needing to use the ID again with this
130:44 - one
130:45 - so on top here let's create export
130:49 - Port
130:51 - async function
130:54 - get we're going to get some
130:57 - requests we're going to get pams this
130:59 - time as
131:03 - well off of those pams we can grab our
131:05 - ID very similar to what we did for the
131:09 - delete we'll grab our
131:12 - pams we can get our found ticket data
131:16 - and set it equal to await
131:19 - ticket.
131:21 - find
131:24 - one where the underscore
131:27 - ID is equal to the ID per Ram we grabbed
131:30 - above so it's going to find our specific
131:33 - ticket and then we want to return
131:37 - next response.
131:39 - Json let's return the found
131:44 - ticket and let's also return a status of
131:47 - 200
131:52 - I guess to stay consistent we should put
131:54 - this in a try catch as well let's copy
131:58 - all this
132:00 - Jazz put it inside of our try and then
132:04 - our air is going to be the same so let's
132:07 - copy that paste
132:09 - that that looks pretty
132:11 - good okay so now we should be able to
132:14 - get our ticket data and it should
132:16 - console.log it out now this is going to
132:21 - be on the server side so it should go in
132:25 - our terminal inside Visual Studio code I
132:29 - think click on that goes to this page
132:32 - that all looks
132:34 - good and you'll see it does have our
132:36 - found ticket data now you'll also notice
132:38 - it's inside a found ticket variable
132:47 - here so if we go back to our ticket page
132:51 - so let's go
132:53 - back sorry guys I need to
132:56 - start closing out of these more
133:02 - often so on here let's close out of our
133:05 - components close out of our API for the
133:07 - moment our ticket page we're going to
133:09 - the one in theore ID so we're opening
133:11 - that up you can see we're getting our
133:13 - ticket by ID that worked we console
133:15 - logged out this data here now was in a
133:18 - found
133:22 - ticket variable there so we can actually
133:24 - do if we want to just do something like
133:27 - this State ticket data
133:33 - equals dob ticket that should work
133:36 - little
133:38 - dirty so now this should have our ticket
133:40 - data that we can pass down to the ticket
133:43 - form
133:45 - otherwise if it's not
133:48 - edit mode so if we're not editing a
133:51 - ticket we just want our update ticket
133:54 - data to
133:55 - have an underscore ID of
134:00 - new and then either way we're going to
134:04 - pass down the ticket
134:07 - data to our
134:09 - form so now no matter what we're passing
134:12 - it into our form so now on our form so
134:15 - open back up the components open up your
134:18 - ticket
134:20 - form we can do some cool conditional
134:23 - rendering and we can either update or
134:26 - create a new ticket based on the ticket
134:29 - information that we're passed
134:33 - here so here we have our starting ticket
134:38 - data and below this we can update it if
134:42 - we're in edit mode so we need to create
134:46 - that variable as well
134:49 - well so we can do something very similar
134:52 - to our
134:54 - other program we can do edit mode equals
135:00 - ticket doore
135:02 - ID
135:04 - equals
135:07 - new this is
135:12 - false otherwise it's
135:14 - true we got to destructure our here as
135:18 - well so when it's passed in so our edit
135:20 - mode now if the ticket ID equals new and
135:24 - we know we're not editing a
135:26 - ticket otherwise it's going to be true
135:29 - because we are editing our
135:32 - ticket so now we have our starting
135:35 - ticket data this is for a new ticket so
135:37 - what we need to do is we need to check
135:39 - if we're in editing mode if we are in
135:42 - edit mode then we need to update all
135:45 - these values so if we're in editing mode
135:47 - mode our starting ticket
135:50 - data. tile is going to equal ticket.
136:01 - tile we're going to have a few of these
136:03 - so we'll have description priority
136:05 - progress status and
136:09 - category so we'll do
136:14 - description
136:16 - priority
136:26 - progress
136:32 - status
136:36 - category so now those should all work
136:39 - and now we're making this change before
136:41 - we create the state so the state should
136:44 - be updated if we're in edit mode here
136:51 - so we got I dropped my PC and then if we
136:53 - go here you'll see that we are looking
136:56 - like we're editing this ticket now we
136:58 - don't have any functionality to actually
137:00 - create to actually edit the ticket yet
137:02 - we don't have an update function so
137:04 - we're going to do that next but let's do
137:06 - some conditional rendering here to fix
137:07 - this so it looks like we're updating a
137:11 - ticket so if we scroll
137:16 - down we have this H3 that says create
137:20 - your ticket let's make this a bit more
137:22 - Dynamic depending on if we're editing or
137:24 - creating a
137:27 - ticket so
137:29 - let's put this inside curly
137:32 - brackets this is eventually going to be
137:34 - a string to create your ticket we'll put
137:37 - that inside of quotes now we need to do
137:39 - some conditional rendering so the first
137:42 - thing we need to check is what is edit
137:44 - mode set at so if edit mode is true so
137:48 - if edit mode is true remember we want to
137:51 - update your ticket and then we'll do
137:56 - a colon there and if it's false we want
138:00 - create your ticket to show
138:03 - up now let's copy this and we're going
138:06 - to do the same thing for our submit
138:08 - button more or less so submit the value
138:12 - currently is create your ticket we want
138:14 - to make that Dynamic and we'll say
138:16 - that's update ticket if it's true or
138:19 - create ticket if it's false so now if we
138:23 - go back to our project you can see it's
138:25 - update your ticket update ticket so this
138:27 - looks a little better and now we're
138:29 - showcasing that we're not just creating
138:32 - a ticket here we're updating a ticket if
138:34 - we go to a new ticket so remember
138:36 - clicking on this goes to the new
138:38 - ticket you can see we don't have an iore
138:41 - ID on your
138:45 - ticket go back here to our
138:49 - [Music]
138:51 - page let's do this let's
138:55 - console.log out our edit
138:58 - mode and let's also do our update ticket
139:03 - data see where we're messing this up
139:06 - update mode is false our underscore ID
139:10 - equals
139:14 - new that did work now maybe it just
139:17 - didn't hadn't updated
139:20 - yet if I click on here we got our update
139:24 - ticket go back here yeah that's working
139:28 - now must have just not updated correctly
139:30 - so we can delete this out it is
139:35 - functioning that looks good so now let's
139:38 - go back to our ticket form we need to
139:40 - change some things right so
139:44 - obviously in our handle submit here it
139:47 - gets a little more complicated now right
139:49 - we don't want to just post our new
139:52 - ticket every time because right now even
139:54 - though we say update it's not going to
139:56 - update the ticket it's going to create a
139:57 - new ticket still we need to fix
140:00 - that so essentially this first line is
140:03 - going to stay the same regardless and we
140:06 - want to
140:07 - refresh and push our back to the
140:09 - dashboard regardless so everything else
140:13 - will go inside an if
140:16 - statement
140:18 - so if we're in edit
140:21 - mode we want to do something else right
140:24 - we want to update our ticket
140:29 - else we want to do all of this
140:34 - Jazz that's how it should look let's
140:36 - tuck everything inside this lse
140:37 - statement for our creating of a new
140:40 - ticket and then we just need to
140:43 - edit our new ticket actually we can
140:47 - probably copy some of this it's probably
140:51 - similar let's copy that so now now we'll
140:53 - just edit this first one to be our
140:55 - update so for this we're going to the
140:58 - tickets folder but we're going one more
141:00 - directory because we have to pass in our
141:03 - ID so we do dollar sign like this ticket
141:07 - doore ID needs to be passed in now these
141:09 - need to be changed to back
141:11 - ticks so we can use that variable
141:14 - inside and then highlight all this and
141:17 - put inside curly no we don't need to do
141:19 - that sorry n this should be good so that
141:22 - looks good and then instead of the post
141:26 - we need to put so we're going to update
141:28 - our
141:29 - data content typees the same our body
141:33 - can be the same with the form data being
141:36 - passed in so that all looks pretty good
141:38 - I think actually
141:40 - simple fail
141:42 - to update ticket how about
141:45 - that okay now back to our API inside the
141:48 - ID folder remember we can't be on this
141:51 - base one we need the one that's inside
141:53 - of the square bracket ID let's create
141:56 - our update
141:59 - function I'm going to copy our
142:01 - delete paste it
142:04 - below I'm going change this to put we
142:07 - need our request we need our prams we
142:10 - need our ID still so that is good but
142:14 - now we need to get our body data so
142:17 - let's
142:18 - do const body
142:21 - equals await request.
142:26 - Json and con ticket data so we're going
142:30 - to pull it off of the body equals body
142:32 - do format data like
142:37 - that that all looks good now let's go
142:40 - ahead and get our updated ticket or
142:42 - update our ticket so let's do
142:44 - update ticket data
142:48 - equals await
142:50 - ticket do find by ID and
142:55 - update we're going to pass in the ID
142:58 - which we grabbed off our pams
143:02 - remember we're going to destructure our
143:05 - ticket data pass that
143:08 - in that looks pretty
143:12 - good for our success we just want ticket
143:16 - updated
143:18 - then we'll send out our air so that all
143:21 - looks
143:23 - great okay little scared to test it out
143:26 - but we're good so I'm going to go back
143:29 - to the
143:30 - dashboard do that did a hard refresh
143:35 - let's click our new button up here so
143:37 - let's say creating a new
143:43 - ticket let's create a report database
143:47 - this is a
143:49 - longterm
143:53 - project using a lot of
143:59 - resources good luck say this is a
144:02 - project I just want to make sure the new
144:04 - ticket is still functioning let's make
144:06 - it a priority of
144:08 - three and maybe over 50% we'll say it's
144:12 - started let's create our
144:15 - ticket you'll see that all looks good
144:18 - that's all still functioning but now I
144:20 - see this ticket is incorrect it needs to
144:22 - be more important let's click on it now
144:26 - I can make it a priority
144:28 - five and let's add some more exclamation
144:32 - points they were wrong it's actually not
144:35 - started and this progress should be zero
144:39 - update our
144:41 - Ticket No it actually didn't update so
144:45 - let's check that out
144:47 - so our new ticket functionality still
144:49 - works but our update did not
144:52 - work check out inside of
144:57 - our go back to our
145:01 - route let's try this too let's
145:05 - say before this return if all this is
145:08 - successful let's
145:09 - console.log
145:12 - out say
145:14 - ran we say our put ran
145:30 - five so our put function is
145:34 - running so this price sign simple
145:38 - but let's also check out our ticket data
145:41 - and make sure that's updating as well
145:44 - maybe we're not passing at the right
145:46 - data
145:47 - so on this one click here this one
145:51 - should have no period on the title and
145:54 - more exclamation points go back to our
145:58 - log and you'll see our ticket data is
146:01 - undefined so that's our issue when we're
146:03 - pulling it off
146:05 - the uh oh and you'll see I did format
146:08 - data instead of form
146:12 - data so now if we run this this should
146:14 - show up as something instead of UN def
146:17 - find and that will help us Trace back
146:18 - our air this might work this time let's
146:22 - do three exclamation points priority
146:24 - five progress zero not
146:28 - started that looks better so now we're
146:30 - updating our ticket three exclamation
146:32 - points five fires super hot project and
146:39 - you'll see that we're good to go there
146:41 - we can
146:42 - create another ticket just to make sure
146:45 - our stuff still works so
146:49 - say we
146:52 - spilled pop on my
146:57 - laptop won't work now no idea
147:07 - why you ever work tech support this is
147:10 - kind of how these tickets go so that's a
147:11 - hardware problem we'll say it's
147:13 - five not started
147:18 - boom create ticket goes in the correct
147:20 - category looks
147:23 - good that's a pretty good setup right
147:25 - here we got our create read update and
147:29 - delete all functioning this is a great
147:31 - place to get to on this project now you
147:34 - know the understand and understand how
147:36 - to use the app router and nextjs 13.4
147:39 - this is not a production ready
147:40 - application right now we're sharing
147:42 - tickets with anybody who goes to it and
147:44 - it's unprotected we need to add
147:46 - authentic ation and a bunch of other
147:47 - stuff as well if you'd like to see me
147:50 - continue and update this project let me
147:51 - know in the comments if you want instant
147:54 - access and questions and being able to
147:56 - suggest new projects and see updates to
147:59 - this code that you guys might fix in the
148:01 - future visit the website and join it's
148:03 - free you get early access to videos and
148:07 - this is the only way to request certain
148:10 - projects for me to do and showcase to
148:12 - you if you don't mind and you've enjoyed
148:15 - this video so far please hit that
148:17 - subscribe button my daughters really
148:19 - want that silly little plaque for
148:22 - subscribers so if we could get to
148:23 - 100,000 subscribers that would be
148:25 - awesome I'm going to continue making
148:27 - videos for you guys regardless and until
148:30 - next time keep coding