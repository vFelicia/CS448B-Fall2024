00:00 - tkinter can help you create GUI apps
00:02 - with python quickly and easily and with
00:05 - the ttk bootstrap Library it's simple to
00:08 - make your tkinter apps look amazing in
00:11 - this course John Elder will teach you
00:13 - how to use ttk bootstrap he will show
00:15 - you how to use all the main widgets to
00:17 - make your decanter apps look modern and
00:19 - awesome what's going on guys John Alder
00:22 - here from tcincture.com and in this
00:23 - video I'm going to talk about modern tea
00:25 - kinter design with ttk bootstrap
00:28 - all right guys like I said in this video
00:30 - we're going to look at modern GUI design
00:32 - with something called ttk bootstrap now
00:35 - I've talked about different sort of
00:36 - modern libraries out there in the past
00:38 - custom ttk for instance this is a little
00:41 - bit different this is very complete and
00:44 - very robust whereas custom ttk is still
00:47 - kind of new in getting some of the Kinks
00:49 - worked out of it works great but still
00:51 - doesn't support all the widgets and
00:52 - things like this this supports all the
00:55 - widgets and then some adds some new ones
00:58 - it's really cool but before we get
00:59 - started be sure to grab your totally
01:00 - free PDF copy of my Kinder widget quick
01:02 - reference guidebook thing is awesome
01:04 - over 150 pages with all the Kinder
01:06 - widget attributes grab your free copy
01:08 - today just head over to tkenter.com
01:09 - forward slash widget-book enter your
01:11 - email address and I'll send that right
01:13 - out to you so this is ttk bootstrap and
01:16 - if you're familiar with bootstrap it's a
01:17 - CSS framework for websites it's probably
01:19 - one of the most popular CSS Frameworks
01:21 - in fact if you go to getbootstrap.com
01:23 - you can see you know here's a page on
01:26 - bootstrap buttons for instance you have
01:28 - this sort of very distinct look to
01:30 - things if you look at nav bars you know
01:33 - you can have nav bars for websites very
01:35 - distinct looking thing one of the most
01:37 - popular CSS Frameworks on the internet
01:39 - so basically what this package does is
01:42 - it takes that and sort of applies it to
01:44 - kinter which is very cool so you can see
01:47 - I've got just a couple of examples
01:48 - pulled up here this is a dark theme
01:50 - there's dark themes and light themes so
01:52 - you can see very cool the buttons here
01:54 - in fact let's try and there we go zoom
01:56 - in a little bit so you can see there's
01:58 - like dashes around the buttons you can
02:00 - have outlines or solid these things look
02:03 - more modern these things look more
02:05 - modern your check boxes and your toggle
02:07 - switches look better even the entry
02:09 - widgets and the spin boxes look better
02:11 - the date picker looks cool very cool so
02:14 - you can see there's all kinds of
02:15 - different themes to choose from
02:17 - this one's called Vapor it's very
02:19 - purpley uh you can check out the light
02:22 - themes
02:23 - there's a bunch of them
02:25 - very cool
02:28 - flatly
02:29 - Journal
02:31 - litera
02:33 - and what's great about this is you could
02:35 - pick a theme or you can build your own
02:36 - and there's resources here to actually
02:38 - build your own theme so we'll get into
02:40 - all that in the future minty right pulse
02:43 - Samsung so in this video I want to just
02:45 - sort of walk you through what this is
02:49 - how you can get started and all the good
02:51 - things so just head over to
02:53 - ttkbootstrap.readthedocs.io and if you
02:56 - click on getting started this is how you
02:58 - pip install it just your regular pip
03:00 - install ttk bootstrap from your terminal
03:02 - we'll get it done in fact if we head
03:03 - over to our terminal I could just pip
03:05 - install gtk bootstrap and that's really
03:09 - all we need to do
03:10 - boom boom and it's ready to go so if we
03:13 - click on the tutorial here and kind of
03:15 - look into this using it is very simple
03:16 - it's very much like using your regular
03:18 - kinter widgets so what you're going to
03:20 - do is you're going to come here and when
03:22 - you import this thing it the docs are
03:24 - telling you to import ttk bootstrip as
03:26 - ttk I don't recommend that you do that
03:28 - because you know we use ttk stuff for
03:31 - other things the dtk library that comes
03:33 - with kenter
03:34 - I don't think you want to name it that
03:36 - so I would name it something like
03:39 - uh TB or something to tkinter bootstrap
03:42 - or
03:44 - ttk be something like that just to
03:46 - distinguish it as bootstrap and not ttk
03:48 - but you could do it as ttk if you want
03:50 - like the docs say you also want to
03:52 - import these I'll talk about those in a
03:53 - second here and if we come down here to
03:56 - use these things a regular button we
03:58 - would just call a button well instead of
04:00 - that you call attk or ttkb whatever you
04:03 - named it up here
04:04 - button right and then instead of giving
04:07 - it a style like you would with your
04:09 - widget you give it a boot style so
04:12 - instead of using style for all your
04:14 - widgets you use boot style that's really
04:16 - kind of the only thing and you can see
04:17 - they're using these constants here we've
04:19 - imported these constants you can also
04:22 - use different things you can use
04:24 - quotation marks like we've done in
04:26 - regular videos all the time in fact you
04:28 - can see you know you can see you could
04:30 - use quotation marks with dashes without
04:32 - dashes with
04:34 - with spaces without spaces with commas
04:37 - without commas or just the constant
04:39 - capital letters whatever you feel
04:41 - comfortable with so that's kind of nice
04:42 - and really that's sort of all there is
04:44 - to it everything else is just like using
04:46 - bootstrap as normal for the most part so
04:49 - when you start it you could create a
04:51 - regular root TK instance or you could
04:54 - use a window instance which is slightly
04:56 - different and they kind of recommend so
04:58 - we would probably use that like I said
05:00 - we're going to get into this in the next
05:01 - few videos we're going to start building
05:03 - stuff out with this in this video I just
05:04 - want to kind of give you a very brief
05:06 - overview and to pick a theme it's just
05:09 - as easy as whenever you either if you
05:12 - use a window instance you just pass in
05:13 - the theme equals and then the name of
05:15 - the theme or if you use the regular old
05:17 - way of doing it you just create a style
05:19 - equals ttk.style and then pass in the
05:22 - name like I said we're going to probably
05:24 - be using this window thing going forward
05:26 - when we use this but we'll get into all
05:28 - that later and that's kind of all there
05:30 - is to it now if you come up here to the
05:32 - top and look at the style guide you can
05:34 - see see all of the different things you
05:37 - could do with this so right off the bat
05:39 - the colors that this offers are the
05:41 - basic bootstrap colors this sort of blue
05:43 - green light blue orange red light and
05:46 - dark right I'm sure you can override
05:49 - those but those are the basic ones that
05:51 - come with bootstrap right so if you've
05:52 - used bootstrap on websites you're
05:54 - familiar with this color scheme already
05:56 - very cool and I'm just going to go
05:58 - through here and show you what these all
06:00 - look like so the check buttons these are
06:01 - the basic check buttons very cool the
06:04 - combo box much more modern looking date
06:07 - entry
06:08 - a little calendar picker tool very cool
06:11 - there's a date picker pop-up with a
06:13 - calendar very awesome right just your
06:16 - regular entry box you could colorize and
06:19 - do things with that's cool there's this
06:21 - flood gauge which is not in regular
06:23 - kinter right sort of a progress bar
06:25 - buttony looking thing very cool right
06:28 - just one of the few things that are
06:30 - extra in this over regular kinter it's
06:33 - got your basic frame it's got your basic
06:35 - label your basic label frame
06:38 - right but you can colorize these label
06:40 - frames which is very cool
06:41 - yeah you know menu buttons look better
06:44 - there's this cool meter right which is
06:47 - not regular in kinter so that's cool
06:49 - that's a little extra thing you could
06:51 - have you can see it has dashes or solid
06:54 - or whatever very cool notebooks sort of
06:57 - the tab thing in Pinter
06:59 - but a little more modern looking a paint
07:03 - window
07:04 - move those around progress bars look
07:06 - better right
07:08 - very cool you can also have striped ones
07:11 - definitely more modern looking right
07:13 - radio buttons different colors uh you
07:16 - can have a scale
07:19 - zoop zoop very nice
07:22 - irregular scroll bar
07:26 - a separator the most popular kinter
07:28 - Widget the separator is just a line uh
07:31 - size grip where you can like move things
07:33 - around
07:34 - ah very cool uh your spin boxes we've
07:38 - looked at these
07:39 - preview right boom very more modern much
07:43 - more modern looking tree views very cool
07:46 - and then there's some stuff on Legacy
07:47 - widgets we don't really care all that
07:49 - much about that so you can click here
07:52 - and read on the API there's even more
07:53 - stuff in here so if you want to do a
07:55 - color Chooser is information on that
07:58 - there is color drop
08:00 - dialogue very cool
08:03 - all kinds of cool stuff in here there's
08:05 - a regular dialog box font dialog
08:09 - pop this thing up very useful
08:13 - message boxes look better right
08:16 - message dialogue there's a query box
08:20 - this little thing
08:22 - very cool just all kinds of stuff you
08:26 - could look in Styles Colors theme
08:27 - definitions and there's also a style
08:30 - Builder right this is a different app
08:33 - that you need to pip install we'll get
08:34 - into all that too very cool helps you
08:36 - build your own Styles and themes and
08:38 - things like that
08:39 - I hear some stuff on boot style anyway
08:42 - all kinds of cool stuff you can look
08:43 - through here if you're interested we're
08:45 - going to be going through all of this
08:46 - because I think this is very cool and
08:47 - I'm going to be building a bunch of
08:49 - videos on this in the coming you know
08:50 - days and weeks probably create a course
08:52 - on it too but uh very very cool lots of
08:56 - fun very easy to use and uh definitely
08:58 - check it out so that's ttk bootstrap
09:00 - very cool like I said we're going to be
09:02 - getting into this in the coming videos
09:03 - and should be a lot of fun and uh I'm
09:06 - excited
09:11 - so now we're going to actually dive in
09:12 - and start learning how to use it so in
09:14 - this video we're going to do just a very
09:16 - basic app to get it up and running show
09:17 - you how to get an app up and running I'm
09:19 - going to show you how to do labels and
09:20 - buttons in this video as well as a
09:22 - little function based on the button so
09:24 - we can click this and it says goodbye
09:25 - World hello world Goodbye World hello
09:27 - world
09:28 - Etc so very basic but it allow us to see
09:31 - the different types of buttons we can
09:32 - use and the different ways you can
09:34 - configure labels and buttons and all
09:36 - that good stuff so head over to our code
09:37 - I'm using the Slime text editor and the
09:38 - get batch terminal as always I've got a
09:40 - file I'm just calling it TB underscore
09:41 - intro PB short for ttk bootstrap I guess
09:45 - TV whatever and this is our basic kinter
09:49 - starter code that we would always have
09:50 - root TK instance you know your icon you
09:53 - set the size and you've got your main
09:55 - Loop so your ttk bootstrap app is going
09:57 - to be a little bit different than that
09:59 - so first things first we need to make
10:00 - sure we actually have ttk bootstrap
10:02 - installed on our system so head over to
10:03 - your terminal and just pip install ttk
10:06 - bootstrap I've already got it so it's
10:08 - gonna be like hey you've already got it
10:09 - but if you don't it'll go ahead and
10:11 - install and you should be good to go so
10:14 - first we need to come up here and import
10:15 - some things that come with ttk bootstrap
10:18 - so first it's from ttk
10:20 - bootstrap dot constants we want to
10:24 - import everything and I'll show you what
10:26 - those are in just a second you don't
10:27 - necessarily have to do this but you may
10:30 - want to you may not I'll explain what
10:31 - that means in just a minute so we also
10:33 - need to import ttk bootstrap itself so
10:35 - we want to import ttk bootstrap as and
10:39 - I'm going to call this TB now they
10:41 - suggest you import it as ttk but if
10:44 - you're going to use ttk or if you're you
10:46 - know going to get confused by that I
10:49 - suggest you just import it as something
10:50 - else TB short for ttk bootstrap or you
10:54 - might want to import it as ttkb you know
10:57 - whatever floats your boat I'm just gonna
10:58 - go TB it really doesn't matter but you
11:01 - need to import it as something so that
11:02 - you can use it so okay in a normal
11:04 - kinter app you have your TK instance now
11:06 - you can do that with ttk bootstrap but
11:09 - they don't suggest that they suggest
11:10 - something else instead they say you
11:12 - should go TB dot window and then inside
11:15 - of here you can pass whatever theme you
11:18 - want so you can go theme name equals and
11:21 - I want super hero I'm gonna use the
11:24 - superhero theme so there are a bunch of
11:26 - themes you can use head over to the ttk
11:27 - bootstrap docs that's a
11:30 - ttkbootstrap.readthedocs.io and you can
11:32 - come over to themes click either light
11:34 - or dark I want dark and then here these
11:36 - are just the themes so if you want solar
11:38 - you type in solar if you want superhero
11:40 - you type in superhero Darkly Darkly you
11:43 - know you get the idea so go ahead and
11:45 - pick one I've picked superhero I think
11:46 - that looks kind of cool that's neat now
11:48 - we can click on style guide we're going
11:49 - to look at that in just a minute too but
11:51 - first we can come back over here and if
11:53 - we just go ahead and save this and run
11:54 - this again python TB underscore intro.pi
11:57 - we get an error because I forgot an
11:59 - equal to sign it looks like yeah right
12:01 - there so this should be root equals so
12:03 - now I'll come back over here
12:05 - give this another try
12:07 - we have another error man I'm on fire
12:10 - today this should be ttk boot
12:12 - strap there we go all right one more
12:15 - time
12:16 - we see right off the bat we have a
12:19 - different color background now when you
12:21 - pick a specific theme every widget you
12:23 - use is going to be colored and shaped
12:25 - and whatever based on that theme so sort
12:28 - of keep that in mind so let's start out
12:30 - with a label so I'm going to call this
12:32 - my underscore label and this is going to
12:35 - be a TV DOT label and now it's TB here
12:38 - because we imported this as TB there so
12:40 - if you import it as something else this
12:43 - would be whatever you imported it as
12:44 - same thing up here with the window thing
12:46 - and these all act pretty much the same
12:48 - as your basic into your widgets so you
12:50 - can set the text any way you want I'm
12:52 - just going to say hello world
12:55 - you can also set the font in the normal
12:57 - way that you would so I'm going to say
12:59 - helvetica and give this a size like 28.
13:02 - now here's where it gets a little bit
13:04 - different
13:05 - you have this boot style attribute here
13:08 - and this is where you get to pick
13:10 - whatever however you want to style this
13:13 - thing so gtk bootstrap comes with the
13:15 - same basic color scheme that the
13:17 - bootstrap CSS framework comes with so
13:21 - let me just copy and paste these in real
13:23 - quick put these on another line
13:26 - you have the default primary secondary
13:29 - success info warning danger light and
13:32 - dark so light and dark they are how they
13:35 - sound one's light one's dark the default
13:37 - is just the default it's usually like
13:39 - white or something primary is blue
13:41 - secondary is gray success is green info
13:44 - is a light blue warning is yellow I
13:48 - think and danger is red and you could
13:50 - see these if you want head over to the
13:52 - style guide and they're listed here so
13:54 - primer is this dark blue secondary is
13:56 - gray green sort of light blue yeah
13:59 - warning is looks like orange I guess and
14:02 - dangerous red and then light and dark so
14:04 - those are sort of the colors you can
14:06 - choose from so let's say let me put this
14:09 - on another line so we can see this we
14:11 - could just start out with the default
14:14 - and see what that looks like now I've
14:15 - got this in quotation marks and that's
14:18 - perfectly fine but up here we imported
14:20 - these constants so if you want you can
14:24 - use just the constants which are
14:26 - all capital whatever right I tend to not
14:30 - do that because I'm used to putting them
14:33 - in quotes like regular kinter and
14:34 - regular ttk stuff so I will usually just
14:38 - go like this and you know do it like
14:40 - that either way works whatever you're
14:43 - comfortable with but if you want to use
14:45 - the constants you have to import them up
14:46 - there if you don't you don't have to
14:48 - import it at all so all right let's go
14:49 - ahead and my underscore label dot pack
14:52 - this guy and this gives us a pad y of
14:54 - like 50. you really push it down the
14:57 - screen so let's save this and run it see
14:58 - what we have here
15:00 - and boom we get this hello world in this
15:02 - sort of default light color now this is
15:05 - white in default in this theme that
15:08 - color might be a different color in a
15:10 - different theme so just sort of keep
15:11 - that in mind so if you're using a light
15:13 - themed theme I'm guessing that's
15:16 - probably going to be black as the
15:17 - default instead of white so you just
15:19 - have to play around with your specific
15:20 - theme to see what's what so we can come
15:23 - back over here real quick and play
15:24 - around with this if we want if we wanted
15:25 - to change this to jit danger for
15:27 - instance then if we save this and run it
15:30 - we're gonna get red text right so that's
15:32 - cool now there is another attribute you
15:34 - could play around with when it comes to
15:36 - labels in your boot style and you use
15:38 - multiple attributes you just put a comma
15:40 - in there and then do the over the other
15:43 - one you want so we can also do something
15:45 - called inverse
15:47 - and this will just sort of reverse
15:49 - whatever your color is and give you sort
15:52 - of a blocky looking background so if we
15:55 - save this and run it's kind of
15:56 - interesting
15:57 - we see now the whole thing is like this
15:59 - square of the inverse color so the text
16:01 - was red now the block is red and the the
16:04 - actual text color is white itself so
16:06 - that's kind of cool keep that in mind if
16:08 - you want to do something like that and
16:10 - when it comes to labels that's pretty
16:11 - much all there is to it so you could
16:13 - inverse or not and then you pick your
16:15 - color so okay that's cool now let's
16:17 - create a button let's call this one
16:18 - minor scroll button
16:20 - and this is going to be a TB dot button
16:22 - and just like the label pretty much
16:25 - everything about this thing will act the
16:26 - same way a regular kincher button acts
16:29 - except you have this boot style
16:30 - attribute all the TB widgets have a boot
16:33 - style attribute that's sort of the main
16:34 - difference so here we could set the text
16:36 - we can set this equal to click me right
16:40 - whatever and then we want to add a boot
16:43 - style and set that equal equal to First
16:46 - what color do we want this to be well
16:48 - let's go primary this time and see how
16:50 - that looks so let's get my underscore
16:52 - button yeah pack
16:54 - give this a pad y of 20 push down screen
16:56 - a little bit let's save this in run see
16:58 - how this looks and so you get this
17:00 - primary color blue click me you'll
17:02 - notice when you click on it there's
17:04 - little dashes around it that's kind of
17:06 - neat all right there we go so
17:09 - there are several different attributes
17:11 - you can play around with in the boot
17:12 - style for your button so here we have
17:15 - primary
17:16 - let me just put this on another line
17:18 - here so we can see we can change this
17:21 - from a regular button to an outline so
17:23 - this is kind of cool and let's change
17:25 - this from primary to info
17:28 - success let's see what success looks
17:31 - like
17:31 - I always wanted to know what success
17:33 - looks like and you see now it's outlined
17:36 - right that's what that outline attribute
17:37 - does and of course the color is green if
17:39 - we hover over it it turns back into a
17:40 - blocky thing when you click it you get
17:42 - the little white dashes so that's kind
17:44 - of cool you can also sort of make it not
17:46 - really even a button at all you can make
17:49 - it just like a look like a link right so
17:52 - instead of outline we could put just
17:54 - link here save this and run it
17:57 - now you're just going to get flat out
17:58 - text but if you hover over it it kind of
18:01 - changes color like an HTML link and
18:03 - again you can click it like normal so
18:05 - that's kind of cool I'm going to go
18:07 - ahead and change that back to outline
18:09 - very cool now buttons do things and to
18:12 - do things with a button in kinter you
18:14 - give it a command and the same thing
18:16 - works with ttk bootstrap you give it a
18:18 - command so let's create a command called
18:21 - changer
18:22 - we don't have that just yet so let's
18:25 - come up here and create it
18:28 - let's define changer
18:30 - and here outside of here let's create a
18:34 - counter and set it equal to zero just
18:36 - for fun
18:37 - and then let's set our counter plus
18:40 - equal to one every time we click the
18:42 - button and let's run some logic let's
18:44 - say if counter modulus 2 equals zero
18:49 - that means it's divisible by two that
18:52 - means it's even let's change our label
18:54 - underscore label dot config and set the
18:57 - text equal to hello world just go ahead
19:01 - and copy this else
19:04 - let's set the text equal to Goodbye
19:08 - World so if it's even it'll say hello
19:10 - world if it's odd it'll say goodbye
19:12 - world right so the main thing I want to
19:15 - show you here is this dot config use dot
19:17 - config in kinter to change things on the
19:19 - Fly later on in your app and that same
19:21 - thing holds true in ttk bootstrap so if
19:23 - you're worried about that same exact
19:25 - thing there so nothing to worry about
19:26 - there we can go ahead and save this and
19:28 - run it one last time we can click me uh
19:31 - oh we need to make our label Global so
19:35 - let's come up here and say Global
19:37 - counter
19:38 - there we go
19:40 - now we come back here and run this guy
19:42 - quick this Goodbye World hello we're all
19:45 - goodbye World hello world so there you
19:46 - have a very basic app with ttk bootstrap
19:49 - like I said it's very similar to using
19:50 - regular Canter or ttk widgets just a
19:53 - couple little things really the boot
19:54 - style thing is the main difference
19:55 - you're going to deal with on a
19:56 - day-to-day basis when you're using this
19:58 - and uh pretty cool
20:03 - in this video we want to look at check
20:05 - boxes and there are lots of different
20:07 - options for check boxes with ttk
20:09 - bootstrap you have your regular check
20:10 - box that you normally have you got a
20:12 - little check box there you also have
20:14 - these tool buttons where if you click on
20:15 - it it sort of unhighlights or if you
20:18 - click on it again it highlights and you
20:20 - have the same thing with outlined there
20:23 - you go and we also have these round
20:25 - toggle buttons and square toggle buttons
20:28 - so we're gonna look at all of these in
20:29 - this video very cool and uh really easy
20:31 - to use so I've got our basic kinter
20:33 - starter code I'm calling it check
20:34 - buttons.pi and I've got our theme set to
20:36 - superhero and I've imported gtk
20:39 - bootstrap as TB and first thing let's
20:41 - just create a simple label so let's go
20:43 - Miner score label and I'm just going to
20:45 - use a regular kinter label for this and
20:48 - let's just say uh click the check box or
20:51 - check button whatever below and you know
20:55 - just for fun let's give this a font of
20:58 - helvetica and like a size of 18 and then
21:03 - that's my underscore label dot pack this
21:05 - guy and I'm gonna give it a pad y of
21:08 - let's bring it down 40 from the top and
21:11 - then 10 from the thing below it okay
21:14 - so first things first let's create a
21:16 - check button and remember from regular
21:19 - cancer whenever we create a check button
21:21 - check box it's called a check button in
21:23 - kinter we create a variable and I'm
21:25 - going to call this var1 and I'm going to
21:27 - set that equal to an INT VAR and an end
21:29 - VAR is akinter variable right it's an
21:31 - integer variable and the reason why we
21:33 - want integers because when you click a
21:35 - check box we want it to be either a one
21:37 - or a zero so if it's checked it'll be a
21:38 - one if it's not checked it's a zero that
21:40 - allows us to run logic very easily to
21:43 - say hey if it's one do this if it's not
21:45 - one do something else right so we'll set
21:47 - up an invar for that and then I'm going
21:50 - to create a check box I'm just going to
21:51 - call it my check whatever and this is
21:55 - going to be a TB dot check button
21:58 - all right and so let's give this a boot
22:01 - style of I'll say primary remember those
22:05 - are our colors right primary secondary
22:07 - info success danger all that stuff right
22:10 - so that's really all we have to do there
22:12 - and let's set the text equal to uh check
22:15 - me out check button check
22:22 - and then let's set the variable to that
22:25 - var1 we just created and then we want to
22:28 - give this
22:29 - actually let's put start to put these on
22:31 - separate lines because it's getting a
22:33 - little hard to read
22:36 - so our variable is going to be var1 we
22:39 - want to set the on value so what is it
22:42 - when it gets checked we'll set that to
22:44 - one
22:45 - we want to set the off value to zero so
22:49 - if it's not checked give it a zero and
22:51 - then let's give this a command of and
22:54 - I'm going to call this Checker and what
22:56 - this does is it'll run a function called
22:58 - Checker every time we click the button
23:00 - right so okay we'll create that in just
23:02 - a second for now let's go my underscore
23:04 - check dot pack and give this a pad y of
23:07 - like I don't know 10 or so to push down
23:10 - screen a bit so all right let's come up
23:12 - here and Define our Checker function and
23:15 - for now let's just pass so let's save
23:17 - this and run just to make sure that's
23:18 - working okay so let's head over to our
23:19 - terminal I'm in my ctkinter.com
23:21 - directory and let's run python check
23:24 - buttons dot pi and when we do we get
23:26 - this little thing here
23:27 - says check me out there's a little box
23:30 - we can click it it's blue or not all
23:32 - right and if we want to change the color
23:34 - remember we know how to do that we just
23:37 - come up here to our boot style and let's
23:39 - say we want to turn it green that would
23:40 - be info if you're not familiar with the
23:42 - colors take a look at the documentation
23:44 - or check the previous video in this
23:45 - playlist where I talked about all the
23:47 - colors so we can come back over here
23:48 - real quick just run this guy again and
23:50 - now when we click on this it's that
23:52 - light blue that's what info is we could
23:56 - say danger for instance save this and
23:58 - run it right now it's red so okay that
24:02 - looks good so let's change this back to
24:04 - primary I like primary
24:07 - and if we want to play with this
24:09 - function we don't necessarily have to
24:10 - but if you're not familiar with how to
24:12 - do check buttons in kinter just very
24:15 - quickly we can say hey if var1 dot get
24:18 - that will get whether it's a one or a
24:20 - zero if it equals one then we can say I
24:23 - don't know my underscore label dot
24:25 - config
24:26 - and set the text equal to checked
24:29 - right else
24:33 - we can set this equal to
24:37 - unchecked right so save this and run it
24:40 - now when we click this we check hey it's
24:42 - checked when we uncheck it it's
24:43 - unchecked right so a very simple example
24:46 - but in this function here
24:49 - you could do anything you want so we're
24:52 - just changing the label obviously you
24:53 - would do something else whatever you
24:55 - want to do you do it in this function so
24:57 - okay that's the check button very very
24:59 - easy to use but there's also something
25:02 - called a tool button which is a square
25:04 - box it looks like a button but you can
25:07 - toggle it on and off and it changes
25:09 - color from the color to a muted version
25:12 - of that color or gray if you uncheck it
25:15 - so two buttons are really easy again I'm
25:17 - going to go VAR 2 equals int VAR
25:21 - because we always want to use it an INT
25:23 - VAR with these guys and let's just call
25:25 - this my underscore check two and this is
25:27 - going to be a TB dot check button
25:30 - again right but the boot style will now
25:34 - change a little bit so first what color
25:36 - do we want this well let's say we want
25:37 - danger which is red so to change it from
25:40 - a check button to a tool button all we
25:42 - have to do is type in tool button
25:44 - right these all can stay the same if we
25:47 - want so I'll just kind of copy these to
25:49 - make this quicker
25:52 - instead of R1 it's obviously going to be
25:53 - var2 but everything else will stay the
25:55 - same now we can my underscore check to
25:58 - dot pack and give this a pad y of like I
26:00 - don't know 10 or something push it down
26:02 - screen a little bit uh that looks good
26:04 - except oh we forgot text so here let's
26:06 - say text equals
26:09 - tool button all right
26:12 - give this a comma okay let's go ahead
26:15 - and save this run it
26:17 - see how this looks all right now we got
26:20 - this tool button you'll notice if we
26:21 - hover over it it changes color that's
26:22 - kind of cool right if we click it boom
26:25 - now this is checked and uh it stays red
26:29 - now we can click it again and move our
26:31 - Mouse away and now it becomes unchecked
26:33 - again and it still changes color when we
26:35 - hover very cool so that's the tool
26:37 - button you can also do a tool button
26:39 - with an outline instead of this solid
26:41 - color right super easy to do that in
26:44 - fact I'm just going to copy this whole
26:47 - thing and
26:50 - come here and say outlined tool button
26:53 - and just paste all this in here and
26:55 - let's change this to
26:57 - var3 my check three
27:01 - set that to three
27:03 - and instead of saying tool button let's
27:05 - say outlined tool button
27:08 - and here same thing we have this we have
27:12 - tool button but we also then pass in a
27:15 - third thing called outline
27:18 - and that's all there is to it now we can
27:20 - oh we gotta change this to my check
27:21 - three okay save this head back over here
27:24 - run this guy now we get this cool
27:26 - outline button same thing if we hover
27:28 - over it it changes color if we click it
27:30 - it becomes solid if we unclick it it
27:33 - goes back to outline and uh very cool
27:35 - okay next we want to look at round
27:37 - toggle buttons a little bit fancier but
27:39 - uh pretty cool I'm just going to go
27:41 - ahead and copy all of this stuff and
27:44 - paste it in here and let's change this
27:45 - to var4 my check for
27:49 - it's this Devar for and come down here
27:51 - and change that to var4
27:54 - but now let's change this boot style
27:56 - from danger color let's mix it up let's
27:59 - change it to success I think that's
28:01 - green and instead of a tool button
28:05 - and outline
28:07 - we want a round Dash toggle and here
28:11 - let's call this for the text round
28:14 - toggle all right and yeah that's all
28:18 - there is to that let's go ahead and save
28:19 - this
28:20 - head back over here run this guy again
28:23 - and now we have this cool round toggle
28:25 - button if we click it it changes to
28:26 - Green because success is green very cool
28:30 - and you'll notice it's not changing here
28:32 - because we didn't dial in the function
28:35 - for this but uh
28:37 - very cool again this is green because
28:40 - over here we called success if you
28:43 - wanted to color it different color you
28:45 - just change the color of that so very
28:47 - cool finally we have the square toggle
28:50 - button and it is very much like the
28:51 - round toggle button let's just change
28:53 - this to five call this my check five bar
28:56 - five
28:57 - and my check five and here let's call
29:01 - this Square toggle button and you will
29:04 - never guess how to do this we change
29:06 - this from round to square
29:09 - very difficult and let's get crazy here
29:11 - let's change this to warning I think
29:14 - that's yellow or orange or something
29:16 - like that so yeah that's all we have to
29:18 - do that's the only difference there
29:20 - save this run it
29:22 - now we have this cool Square toggle boom
29:24 - we click this
29:26 - changes to
29:28 - what is that orange I guess
29:30 - very cool
29:32 - so those are check boxes tool buttons
29:35 - outline tool buttons round toggles and
29:37 - square toggles with ttk bootstrap very
29:40 - easy to do all of these things and much
29:42 - much nicer looking than the regular
29:45 - kinter check button that you're probably
29:47 - used to but works pretty much the same
29:49 - as the kinter check button
29:54 - all right like I said in this video I
29:56 - want to talk about resizing buttons not
29:57 - just the size of the button but also the
29:59 - font on the button you can see here's a
30:00 - regular button here's a bigger button
30:01 - now this is a little tricky and that's
30:03 - why we need to talk about it so we've
30:05 - got our basic starter code I'm calling
30:06 - this button underscore size.5 because
30:09 - why not and we're importing ttk
30:11 - bootstrap as TB this has to be installed
30:13 - so you have to pip install it if you
30:15 - haven't and I've set the window to
30:17 - superhero and it's 500 by 350. so let's
30:20 - start out by creating a button and I'm
30:22 - just going to call this my underscore
30:23 - button and this is going to be a TV DOT
30:25 - button because we've imported dtk
30:28 - bootstrap as TB and I want to set the
30:30 - text as I don't know hello world now
30:34 - normally to change the size of a button
30:36 - we would give this a font we would go
30:38 - font equal and I'd say like helvetica
30:40 - and then I maybe make it size 18 and
30:43 - that would make the whole button bigger
30:45 - to compensate for the size of that font
30:47 - but if we try this my underscore button
30:50 - dot pack let's give this a pad why like
30:53 - 40 push it down screen save this head
30:55 - over to our terminal I'm in my
30:57 - ctcinter.com directory and let's run
30:59 - python
31:00 - button underscore size.5 and we get an
31:03 - error right unknown option font and it
31:05 - doesn't even know what that is so we
31:07 - obviously can't do that now we can get
31:10 - rid of that and with regular kinter we
31:12 - can change the size so we can set the
31:14 - width to like uh 30. if we save this and
31:17 - run it
31:19 - you see we get this longer button now
31:21 - this is I believe in font right so it's
31:24 - font characters 30 font characters this
31:27 - is not pixel so if you have a bigger
31:29 - font
31:30 - it'll be bigger characters and the
31:31 - button will be a different size which is
31:33 - kind of weird now uh this might be what
31:35 - you're looking for if you just want to
31:37 - change the size and not the font you can
31:39 - use with you cannot use height there is
31:42 - no height attribute so we can try and
31:44 - change this to 20. if we do we're going
31:47 - to get an error again and it doesn't
31:49 - know what height is right so
31:52 - what can we do well first off let's just
31:54 - get rid of this hyphen width I want to
31:56 - change the font almost always when I
31:58 - want to make a button bigger is because
31:59 - I want the font bigger on the on the
32:01 - button so how do we do that well we have
32:02 - to use a style right and this is also a
32:06 - little bit tricky now I have a video on
32:09 - Style with Kinder I'll link to it up
32:11 - there you can check that out if you're
32:13 - not familiar with style this is a
32:15 - slightly different use of style and I'll
32:17 - show you why in just a second so first
32:18 - of all let's change our boot style
32:21 - and let's make this uh success which I
32:24 - think is green let's save this around
32:26 - just to make sure yeah so we've got a
32:28 - green button and we want to make it
32:30 - bigger so how do we do that well like I
32:32 - said we have to use a style so I'm going
32:33 - to call you can call it anything you
32:34 - want I'm going to call it minor score
32:36 - style and this is a TB dot style widget
32:40 - okay so there's our style now we need to
32:42 - configure it so let's go my underscore
32:43 - style dot configure and inside here
32:46 - first we have to name it so I usually
32:48 - call these my DOT t button
32:51 - now whatever widget you're doing it's
32:53 - going to be T the widget so t button T
32:56 - label T check button Etc like I said I
32:59 - got a video on this you can check it out
33:00 - if you're not familiar with all this
33:01 - style stuff so there we go my t button
33:04 - and then we can do whatever we want so
33:06 - let's give this guy a font and I want to
33:08 - say hell
33:10 - vedica
33:12 - and then size 18. then down here in our
33:14 - button we have to say hey use that style
33:16 - so we'll set style equal to
33:19 - and let's put these on another line
33:21 - because it's starting to get a little
33:22 - bit hard to read and we just set that
33:24 - equal to my
33:27 - dot t button which is what we called it
33:29 - right here so you would think this would
33:31 - work and it sort of does but sort of not
33:34 - so let's take a look at this
33:37 - sure enough our button is bigger our
33:39 - font is bigger but wait a second this is
33:41 - a primary color
33:43 - what's going on here remember we set
33:45 - this as success not primary what's going
33:47 - on well it's overriding the uh I don't
33:51 - know subclass maybe
33:53 - that sound right I don't know it's doing
33:54 - something right that we don't want and
33:57 - it's because we called this my that's
33:58 - sort of what I would normally do but
34:00 - instead of that you need to name it what
34:02 - color system thing you're using right so
34:04 - we're using success so we need to call
34:06 - this success.t button and then down here
34:09 - when we reference it it's success dot t
34:13 - button now if we save this guy head back
34:15 - over here run it again we get our
34:18 - success right well that's cool and that
34:21 - works but what if you want to use
34:23 - something besides the primary secondary
34:26 - success info color scheme if you head
34:30 - back over to our documentation you
34:31 - remember there's all kinds of things you
34:32 - can use you could use outline you can
34:34 - use Link well I guess that's the only
34:37 - two things you could use outline and
34:38 - Link how do we use those well super easy
34:41 - we just add them here with another dot
34:45 - so if we want this to be success and
34:47 - outline we just type in outline now
34:49 - notice this is capitalized if you do
34:52 - lowercase won't work right it has to be
34:54 - capitalized that's the convention here
34:55 - so the name of your color that you want
34:58 - to use success and then whatever you
35:00 - want to do with it right and then we can
35:02 - come down here and again call success
35:05 - dot outline
35:07 - okay now if we save this guy head back
35:10 - over here run it again
35:12 - we get our success outline button it's
35:15 - now bigger and that works great now we
35:17 - can also give this more width right so
35:19 - we can come back over here and like we
35:22 - did earlier we could you know set the
35:24 - width
35:25 - equal to 20 or something come back run
35:28 - this guy again
35:30 - and now we have a wider Button as well
35:33 - that's it and that's all there is to it
35:35 - so a little complicated a little bit
35:36 - tricky but once you understand the
35:38 - tricks here and those are mainly just
35:41 - in the naming convention
35:44 - right there it's a piece of cake
35:50 - okay so in this video we want to look at
35:52 - using combo boxes with ttk bootstrap and
35:55 - you can see we can click on this and
35:57 - I've got it set up two ways one where if
35:59 - we select the thing we can click the
36:01 - button and it will update the label the
36:03 - other way we can just use a binding and
36:05 - say click on Wednesday boom it says you
36:06 - picked Wednesday so we're gonna look at
36:08 - all of this stuff in this video so I've
36:10 - got a file I'm just calling it combo dot
36:12 - Pi it's a regular starter code that we
36:13 - always have we've imported ttk bootstrap
36:16 - stb I set the theme name to superhero
36:18 - and we're ready to go so let's create a
36:20 - label I'm going to call it my label and
36:22 - it's going to be a tb.label and remember
36:25 - we're importing it as TB that's why this
36:27 - is TB dot whatever and we want to put
36:30 - this in root and I want the text to say
36:31 - just for now hello world and let's give
36:34 - this a font of helvetica with a size 18.
36:39 - so okay that's good let's underscore
36:41 - label dot pack this guy and let's give
36:43 - this a pad y of say 30 to really push it
36:46 - down the screen
36:47 - okay so now let's
36:50 - create drop down options
36:54 - and I'm just going to create a variable
36:56 - called days and this is going to be a
36:58 - python list and so we can go Monday
37:00 - Tuesday
37:02 - Wednesday Thursday
37:06 - this is very exciting Friday
37:09 - Saturday
37:11 - we should probably capitalize Saturday
37:13 - it's the most important day and Sunday
37:15 - so we've got this python list and we're
37:17 - going to use that to insert into our
37:19 - combo box to have the options that drop
37:21 - down whenever we click on the combo box
37:23 - right basic combo box stuff so now let's
37:26 - create combo box and up here let's say
37:29 - create label
37:31 - we don't want the label to be jealous
37:32 - that it didn't get its own comment right
37:35 - so let's go my combo call this anything
37:38 - you want and this is going to be a TV
37:39 - DOT combo box and we want to put it in a
37:42 - root and let's give this a boot style of
37:45 - say success to make it green and if
37:48 - you're not familiar with this color
37:48 - system check back the previous videos in
37:50 - this series I go over all that in great
37:52 - detail so we want to also set the values
37:56 - to days and that's just this list we
37:58 - created right there and really that's
38:00 - all we need so let's now my underscore
38:03 - combo dot pack this guy and let's give
38:05 - this a pad y of 20. now let's go ahead
38:07 - and save this and run it just to make
38:08 - sure this is looking okay so I'm in my
38:10 - cetekinter.com directory and let's just
38:12 - go Python combo.pi and when we do we see
38:16 - this drop down list it says it has all
38:18 - these listed when we click on them
38:19 - nothing happens and you'll notice by
38:21 - default it's blank so we can set that to
38:24 - anyone we want by default so let's go
38:26 - ahead and do that let's say set combo
38:29 - default and we do that the same way we
38:31 - do it as in regular kinter we just call
38:34 - my combo Dot current
38:36 - and we pass in the number of the thing
38:39 - we want to show up so python lists
38:41 - always start at zero so if we want
38:42 - Monday it's zero if we want Tuesday it
38:45 - would be one right so we could set that
38:48 - to zero let's go ahead and save this and
38:49 - run it just to make sure that's looking
38:50 - okay and sure enough now it says Monday
38:52 - there instead of it being blank and you
38:54 - notice that it's green that's the
38:56 - success color we can change that by
38:58 - changing it to primary or danger or info
39:01 - or any of the other the default whatever
39:03 - you want for your color so okay that's
39:05 - good so now let's create a button to
39:07 - where when we select one of these and
39:08 - click the button something happens this
39:11 - text up here changes super easy to do
39:13 - that let's
39:15 - create a button and I'm just going to
39:18 - call it my underscore button and this is
39:20 - going to be a TV DOT button
39:22 - you want to put it in root we want the
39:24 - text to say click me whatever let's give
39:27 - this a command of clicker and let's give
39:30 - this a boot style
39:32 - of
39:34 - I don't know danger we'll make it red
39:36 - right so then let's my underscore button
39:39 - dot pack this guy and give him a pad y
39:42 - of 20. okay so now we've got this
39:45 - clicker command
39:46 - and we need to create it so that when we
39:49 - click that button something happens so
39:51 - let's come up here to the top
39:53 - and let's define Clicker and what do we
39:56 - want to do we just want to change our
39:57 - label so let's go my underscore label
39:59 - dot config and let's just change the
40:02 - text and I'm going to create an F string
40:04 - and say you clicked on
40:08 - and then we can pass in
40:10 - my underscore combo
40:14 - dot get and that will get whatever we
40:17 - have selected so let's put our
40:19 - exclamation mark on there and okay we
40:21 - should be good to go let's go ahead and
40:22 - save this and run it see if that worked
40:25 - so we can click on Friday you clicked on
40:28 - Friday and that's all there is to it
40:30 - super simple now we can also bind this
40:32 - thing so when we so that we don't need a
40:34 - button at all we could just click on
40:36 - here say we click Wednesday the text
40:38 - will change to you clicked on Wednesday
40:40 - right so how do we do that well same way
40:43 - we do it with regular
40:45 - enter let's come down here and let's
40:48 - bind the combo box so once we do this
40:52 - the button will be pretty much
40:54 - irrelevant we won't need to click it
40:55 - anymore but I'll just leave the button
40:57 - there for now so let's go my underscore
41:00 - combo dot bind and then inside of here
41:03 - this is always the format you have an
41:06 - action and then a command of some sort
41:08 - and let's say click underscore bind or
41:13 - something like that
41:14 - and this is the function that will get
41:16 - called whenever we click the combo box
41:19 - and inside of here we just use two sets
41:22 - of these angular brackets and we pass in
41:25 - combo
41:27 - box selected
41:30 - right and the C is capitalized and the S
41:33 - is capitalized the b in box is NOT
41:35 - capitalized and I see people make that
41:37 - mistake all the time so make sure that's
41:39 - lowercase so combo box selected
41:42 - and this function will get called now we
41:45 - don't have this function yet so we need
41:46 - to come up here and create it
41:48 - and let's create binding function and so
41:53 - let's define our click bind now this is
41:55 - a binding and with all bindings we need
41:57 - to pass an event because a click is an
41:59 - event and that needs to get passed to
42:02 - the function now we're not actually
42:03 - going to use that for anything but it
42:04 - still needs to get passed because the
42:06 - binding will send that extra info and if
42:09 - the function doesn't see it you're gonna
42:10 - have problems so now we can just copy
42:12 - this whole thing and paste that in there
42:15 - and let's give this guy a comment too
42:17 - create
42:20 - I don't know button click function
42:23 - good enough okay so that should do the
42:26 - trick let's save this and head back over
42:27 - here run this one more time
42:30 - so now when we click on here and let's
42:32 - pick Saturday hey you clicked on
42:34 - Saturday if we click Wednesday you
42:36 - clicked on Wednesday and if we click
42:37 - this again nothing happens because it
42:39 - still says Wednesday and that function
42:41 - will get called and it'll just say you
42:42 - clicked on Wednesday which is what it
42:43 - already said so it doesn't look like
42:45 - it's changing But whichever way you want
42:47 - to do binding or using a button super
42:49 - easy with ttk bootstrap and it's all
42:51 - there is to it
42:56 - in this video we're going to look at the
42:57 - entry box for ttk bootstrap now this is
43:00 - super useful because you're always going
43:01 - to use entry boxes and there are a few
43:03 - different little things you need to know
43:04 - about it so we're going to dive into it
43:06 - in this video so I've got our basic
43:07 - starter code that we've always got I'm
43:08 - calling it entry underscore widget.pi
43:10 - and we've imported ttk bootstrap you've
43:12 - got a pimp install that if you haven't
43:14 - yet and then we've set the superhero
43:16 - theme and that's pretty much it so let's
43:18 - come down here and create an entry
43:19 - widget so I'm going to go my underscore
43:20 - entry and that's going to be a TB dot
43:22 - entry widget
43:24 - and the reason why it's TB is because
43:25 - I'm importing ttk bootstrap as TB up
43:28 - here and we want to put this thing in
43:30 - root and that'll be fine for now so
43:32 - let's go my underscore entry dot pack
43:34 - and let's give this a pad why of like 50
43:36 - to really push it down the screen so now
43:37 - I want to create a button to where
43:39 - whenever I type something in the entry
43:41 - box and click the button it does
43:42 - something it does something with that
43:44 - text so let's just call this my
43:45 - underscore button and this is going to
43:48 - be a TV DOT button you want to put it in
43:50 - root and let's give this a boot style of
43:52 - like I don't know danger or something
43:55 - make it a red button I don't know and
43:57 - maybe outline as well just for fun we
43:59 - want the text to say click me I don't
44:03 - know
44:04 - and we want the command to equal I don't
44:07 - know let's just say speak something like
44:10 - that now we'll create this function in
44:12 - just a second so let's go minerscore
44:14 - button dot pack and give this a pad y of
44:17 - 20 to push down screen finally let's
44:19 - create a quick label let's go minerscore
44:20 - label and this is going to be a tv.label
44:23 - I want to put it in root I want the text
44:26 - to say I don't know hello world for now
44:28 - or even just nothing at all
44:31 - yeah let's leave it nothing at all so
44:34 - let's go my underscore label dot pack
44:37 - and give this a bad y of 20 push down
44:39 - screen a little bit okay so now when we
44:41 - click that button we want this speak
44:43 - function to run and let's just take that
44:45 - my underscore label and then dot config
44:48 - it and set the text equal to an F string
44:51 - and let's say you typed
44:54 - and then we put in Brackets and then we
44:57 - can call my entry whatever we typed into
45:00 - my entry so let's go my entry dot get
45:02 - and just put that up on the screen so
45:04 - let's go ahead and save this and run it
45:06 - see what this looks like head over to
45:07 - our terminal I'm in my C T kinter.com
45:09 - directory and let's run python entry
45:11 - widget dot pi and when we do we get this
45:14 - basic entry box we could say John elder
45:16 - or something like that here we see click
45:18 - me we click it it says you typed John
45:20 - Elder very simple so here's your basic
45:23 - entry box now we didn't do any styling
45:25 - to this we didn't change anything about
45:26 - it this is just the sort of default view
45:28 - right so that's fine maybe that's what
45:31 - you want but we can play around with
45:32 - this so let's do that let's head back
45:34 - over here and the first thing we could
45:35 - do obviously is let's get this a boot
45:37 - style as you do with all dtk bootstrap
45:40 - things and then we can add a color
45:43 - scheme here so your basic color schemes
45:46 - are primary secondary success info
45:48 - warning danger light and dark so that's
45:50 - for basically all widgets in ttk
45:52 - bootstrap we understand that we've
45:53 - looked at this before so let's say I
45:55 - want green that's success we could do
45:57 - that save this run it again and we
46:00 - misspelled boot style
46:01 - [Laughter]
46:04 - so let's go boot dial there we go
46:07 - now if we save this and run it again we
46:09 - get the box outlined in green green is
46:12 - success
46:13 - pretty cool what if we want to change
46:14 - the size of this thing well we do that
46:16 - the same way we would with a regular
46:17 - Kinder entry widget we just set the font
46:20 - equal to and let's say I want to change
46:22 - the text to helvetica and let's say we
46:25 - want the size 18 that will make 18 size
46:27 - text which will definitionally make the
46:29 - Box correspondingly big to 18 size text
46:33 - so that's one way we can do it save that
46:35 - and run it
46:37 - now we've got a bigger box right
46:42 - you typed hello now this text is uh sort
46:45 - of light colored light like gray
46:47 - something like that whatever the color
46:48 - that is we can change that as well let's
46:50 - start to add these on separate lines so
46:52 - we can read this easier and to do that
46:55 - normally with a kinter entry widget you
46:56 - would set the foreground to whatever
46:58 - color but with this we need to set the
47:01 - four
47:03 - round you need to spell it out so we can
47:06 - use any sort of HTML color code so zero
47:09 - zero three six six zero something like
47:11 - that
47:12 - or we could just you know say red or
47:16 - green we want it to be the same color so
47:20 - hey there whatever now it's green right
47:24 - hey you typed hey there very cool that's
47:27 - one way to do it we can also set the
47:28 - width attribute so if we come back here
47:30 - and instead set the width to let's say
47:35 - five now this is characters it's not
47:37 - pixels so our text is size 18 so that's
47:40 - 18 sized characters so keep that in mind
47:44 - so it's not a great way to do it but you
47:47 - know
47:48 - that's conturso you can see now it's
47:50 - much smaller I could go on two three
47:52 - four five that's five characters six so
47:56 - it's exactly five characters in width so
47:59 - you go like that if you want I don't
48:01 - know kind of weird I just like changing
48:03 - the font text finally we can make this
48:05 - into like a password protected deal uh
48:08 - let me change this to 15 and we do that
48:10 - using show so we could say hey show
48:13 - these characters whenever somebody types
48:15 - and we could put a little asterisk or
48:17 - whatever so we can run this guy again
48:20 - now when we type we get nothing but
48:23 - Stars when we click it the actual text
48:26 - still comes through it doesn't come
48:27 - through as stars it comes through as
48:28 - whatever you text so I I typed in John
48:30 - Elder here and click this it says you
48:33 - type John Elder this is just for like
48:35 - appearance sake right so that's cool we
48:37 - did stars but you know you could do
48:39 - anything you want I could put you know
48:41 - ampersands or whatever whatever you want
48:43 - this will show
48:46 - now we get a bunch of ampersands I'm
48:47 - gonna go ahead and change that back
48:49 - because that's just plain weird so
48:50 - that's the entry widget for ttk
48:51 - bootstrap super simple acts almost
48:53 - exactly as you would expect it to just
48:55 - like a regular entry box and uh yeah
48:57 - pretty cool
49:02 - in this video we're going to look at
49:03 - this flood gauge very cool we can start
49:06 - it we can stop it we can increment it by
49:08 - a few when we do we can get the correct
49:11 - position it's at 67. and this is
49:13 - something new and different that just
49:14 - comes with ttk bootstrap obviously
49:16 - there's no flood gauge in regular kinter
49:19 - so this is kind of exciting and really
49:20 - fun so we're going to dive into that in
49:22 - this video so I've got a file here I'm
49:23 - just calling it flood.pi it's our basic
49:25 - ttk bootstrap starter code that we
49:27 - always have we imported ttk bootstrap
49:29 - stb you got to pimp install that if you
49:31 - haven't already we've set the window
49:33 - theme to superhero and pretty much
49:36 - everything else is normal Kinder so
49:38 - let's come down here and create a flood
49:39 - gauge and I'm just going to call this my
49:40 - gauge call it anything you want and
49:42 - that's going to be a TB dot lud gauge
49:46 - and it's TB dot because we've imported
49:48 - ttk bootstrap as TB up here so TB goes
49:51 - there and we want to put this in root
49:53 - and we want to give it a boot style and
49:56 - you're going to use any of your
49:57 - bootstrap color styles I'm going to pick
49:59 - success that's green I believe you could
50:02 - pick primer very secondary danger info a
50:05 - light dark all the regular colors that
50:07 - you have to choose from now we can also
50:09 - set the font for this so I'm going to
50:10 - make the font a little bigger just so
50:12 - it's easier for us to see I'm going to
50:14 - set that as helvetica and give it like a
50:16 - size 18. now here's where it gets a
50:18 - little bit different so right off the
50:20 - bat I want to give this a mask of POS
50:23 - short for position right now we can keep
50:26 - track of the exact position of our flood
50:28 - Gauge by passing in just like if it was
50:31 - an F string you know you kind of do an F
50:33 - string like that it's not an F string
50:35 - but we put then a percentage sign after
50:37 - it this will automatically update with
50:39 - the current position as it moves up and
50:42 - down right so you don't have to do that
50:43 - but if you want it to sort of keep track
50:45 - of what it's doing on the flood gauge
50:47 - itself that's very very useful so we
50:51 - could do all kinds of different things
50:52 - we can set the maximum for instance so
50:56 - you know you might want this to be a
50:57 - hundred or you might want it to be 50 or
51:00 - you know whatever you want I'm just
51:01 - going to put it 80 for now just for fun
51:03 - we'll play around with this and then you
51:04 - could also set the Orient and by default
51:07 - this is going to be horizontal there you
51:09 - go so if you're going to do horizontal
51:10 - which is left to right you don't have to
51:12 - put your Orient in there you could just
51:14 - leave that out but if you want to do it
51:16 - up and down then it would be vertical
51:18 - and we'll play around with this and
51:19 - change it up in a bit so finally we can
51:21 - set the value that we want to start on
51:23 - so you might want to start it at zero
51:25 - obviously you could just leave this one
51:26 - off if that's the case but if you want
51:28 - to start at a certain level you could
51:30 - put it right there so now let's
51:31 - underscore gauge dot pack this guy and
51:34 - let's give this a pad why like 50. there
51:36 - you go so let's go ahead and save this
51:37 - head back over to our code and run this
51:39 - guy I'm in my cetkinter.com directory
51:41 - and let's run Python flood.pi and when
51:43 - we do we see pos position of 10 percent
51:46 - it's sort of 10 up and there we go so
51:49 - okay that's cool now this is kind of
51:50 - small we can make it a lot bigger if we
51:53 - want and we do that by playing the pack
51:56 - value so we could go
51:59 - fill equals x that's X left and right
52:03 - and I suppose we should capitalize it
52:06 - but not sure that matters so okay let's
52:08 - save this and run it and now you're
52:09 - going to see this is massively all the
52:12 - way it fills all the way left to right
52:13 - so okay that's you know kind of not
52:16 - great so we can also give this a pad X
52:19 - of like I don't know 20 to give it
52:22 - padding on each side make it a little
52:24 - bit nicer to look at I suppose okay so
52:27 - there we go so I kind of like that we'll
52:28 - just leave it like that so all right now
52:30 - let's create a button that we could
52:32 - start it and stop it and add some
52:33 - incrementation and also I'm going to
52:35 - change this from 10 back down to zero
52:37 - because I don't know I don't really need
52:39 - to start it at ten percent so there you
52:42 - go so let's create a start underscore
52:44 - button and that's going to be a TB dot
52:47 - button we want to put it in root we want
52:49 - the text to say start and let's give
52:51 - this a boot style of like danger and
52:56 - outline so it'll be like red outlined
52:58 - and let's give this a command of starter
53:02 - and we haven't created that yet but we
53:04 - will in a second so let's start unscrew
53:06 - button dot pack and give this pad wide
53:08 - like 20 push down screen a little bit
53:10 - now I'm just going to copy this a couple
53:12 - of times
53:13 - and this one we'll call a stop button
53:19 - and we'll have the text say stop
53:22 - and we'll give it a command of stopper I
53:25 - don't know and then this one will be uh
53:28 - we'll call this Inc for increment
53:31 - Inc and this will be increment
53:36 - and here let's call this anchor I don't
53:39 - know or incrementer there we go so now
53:44 - we want to create these three functions
53:47 - starter stopper and incrementer so let's
53:49 - come up here
53:51 - and let's define starter
53:55 - and we want to pass and let's define
53:57 - stopper
54:00 - and we want to pass and let's define
54:03 - incrementer
54:05 - and we want to pass so okay to start
54:09 - it's very easy so let's start the gauge
54:14 - we just call my underscore gauge dot
54:17 - start
54:18 - that's it now to stop it same thing we
54:20 - call my underscore gauge dot stop very
54:24 - complicated and to increment it we just
54:26 - call my underscore gauge dot step and
54:30 - then we say what steps do we want so I
54:33 - want it to go every 10 right so when we
54:35 - click the button it pops up 10 and then
54:37 - it stops so we can go ahead and save
54:38 - this and let's run this and it should
54:41 - work out okay let's see what we got
54:44 - so here we have start stop and increment
54:47 - so let's start and you can see it just
54:48 - one at a time
54:52 - goes like that we could stop it by
54:55 - stopping and now we can increment so 52
54:57 - 62 72 and then once it gets to the top
55:00 - it just starts on over again right so
55:02 - that's kind of cool
55:04 - and there we go now one thing I'll
55:07 - mention is how it comes to the end and
55:10 - then it starts over at zero that's
55:12 - because of the mode so you can change
55:15 - that if you want when you define the
55:17 - flood gauge so here we can set the mode
55:20 - to and the default is determinate
55:25 - right that means keep on going basically
55:28 - but we can change it to indeterminate if
55:30 - we want if we save this and run it
55:32 - you'll see this sort of uh ping pongs
55:34 - back and forth from
55:36 - start to finish so we go start and you
55:39 - can see one it looks different the gauge
55:41 - itself is not full but when it hits the
55:43 - end boom it pops back down and it keeps
55:45 - going and it keeps counting so we're at
55:48 - now 180 100 200
55:52 - 240 and it's going up to 80 which is
55:55 - what we set our value our max value at
55:57 - so this is kind of weird you may want
55:59 - that for some reason same thing works
56:01 - with increment it will Bop back and
56:03 - forth as you increment it so just sort
56:06 - of keep that in mind I'm going to change
56:07 - it back to determinant because
56:09 - indeterminate it's just you know
56:10 - freaking me out so let's come down here
56:12 - and let's create a label now so
56:14 - my label this is going to be a TV DOT
56:17 - label we want to put it in root and we
56:19 - want the text to say
56:21 - I don't know position something like
56:23 - that
56:25 - and now it's my underscore label dot
56:27 - pack give this a pad live 20 push it
56:30 - down screen a little bit so with this
56:32 - label we want to update it every time we
56:34 - hit the increment button to show us
56:36 - exactly what position we have and you
56:38 - can use this to get the position of
56:39 - anything even when it's in starting and
56:41 - stopping but we're just going to do
56:43 - increment one because that's easiest so
56:45 - we can come up here and go minor score
56:46 - label dot config
56:49 - and set the text equal to and I'm going
56:51 - to create an F string and go position
56:56 - and then pass in
56:58 - this is going to be my underscore gauge
57:00 - dot variable
57:03 - dot get
57:04 - so that will get the current position
57:06 - that's that variable and this gets
57:08 - created automatically with the with the
57:10 - widget and it keeps track of that
57:12 - automatically so you can at any time see
57:15 - where your position is in your flood
57:16 - Gauge by calling the name of your gauge
57:18 - dot variable and then dot gets or like
57:20 - an entry box dot get it right so let's
57:23 - go back over here try this guy again
57:24 - we're at position zero let's increment
57:27 - at one and it says boom 10 20 30 40 50
57:30 - 60 70 and when it hits 80 boom it starts
57:33 - over at zero and again we can start and
57:35 - stop here and now it's 34 if we click it
57:38 - again boom 44 so any position it
57:41 - currently is at it will keep track of
57:44 - that so very cool and very interesting
57:47 - now just to make sure here we can come
57:49 - back over here and make sure that this
57:51 - is a number it's supposed to be a
57:54 - floating Point number but let's see if
57:56 - we can add 10 to it just to make sure so
57:59 - if we increment it boom now it goes to
58:01 - 20 because it's 10 plus 10 right so 30.
58:06 - 40 and we're good to go so it's
58:09 - definitely a number you could do numbery
58:11 - things with it you don't have to convert
58:12 - it from a string like sometimes you have
58:14 - to do with things and that's very cool
58:16 - so I'm gonna get rid of that
58:18 - so that's the plug gauge pretty cool fun
58:20 - little widget and I'm really happy to
58:21 - see these little extra things popping up
58:23 - in in ttk bootstrap and makes it a lot
58:26 - of fun to use and all kinds of cool
58:27 - things you can do with this and that's
58:28 - all there is to it
58:33 - in this video we're going to look at
58:34 - this calendar widget for dtk
58:36 - bootstrapping technically it's called
58:37 - the date entry widget and I'm going to
58:39 - show you how to use it how to get
58:40 - information from it some interesting
58:42 - things you can do with it and should be
58:43 - a lot of fun all right so I've got a
58:44 - file I'm just calling it dater.pi and
58:47 - it's our basic ttk bootstrap starter
58:49 - code that we always have so we're
58:50 - importing ttk bootstrap as TB not as ttk
58:53 - but stb because that's the way I like to
58:55 - do it and pretty much everything is the
58:57 - same as regular Canter let's come down
58:58 - here and create a date entry widget so
59:01 - I'm going to call this my date and this
59:02 - is going to be ATB dot date entry widget
59:06 - we want to put it in root and just like
59:08 - everything else in ptk bootstrap you can
59:11 - give this a boot style and pick any
59:14 - color you want so you know primary
59:15 - secondary danger info light dark all the
59:19 - basic colors that come with ttk
59:20 - bootstrap if you're not familiar with
59:21 - those colors check the previous videos
59:23 - in the series and learn all about that
59:24 - so I'm just going to do Danger let's do
59:27 - red all right and for now let's just
59:30 - leave it at that so let's go my
59:31 - underscore date dot pack and give this a
59:34 - pad y of like 50 to really push it down
59:36 - the screen so if we save this and run it
59:38 - head over to our CTC kinter.com
59:39 - directory and around python data dot Pi
59:43 - we get this widget and it's red because
59:46 - we set the boot style to danger and we
59:47 - click on it it's got red here and we can
59:50 - click on a certain thing and when we do
59:52 - it updates in this box here so if we
59:55 - click on the 13th it updates to the 13th
59:57 - and that's cool so one thing to keep in
59:59 - mind is this is basically an entry box
60:02 - so when we want to get whatever's in
60:04 - here we have to get the entry box for
60:05 - this widget I'll show you how to do that
60:07 - in just a second but this is basically
60:09 - it so this is cool
60:12 - and we can play around with different
60:13 - settings in this you know what the
60:15 - default start date is and things like
60:18 - that so let's go ahead and look at that
60:19 - but first let's say somebody clicks on
60:21 - February 14th now it says 214 23 here
60:24 - how do we programmatically get that and
60:27 - do something with it in our program
60:28 - right well super easy let's come back
60:31 - over to our code and I'm going to create
60:33 - a button I'm going to call this my
60:34 - underscore button and it's going to be a
60:36 - TB dot button
60:38 - you want to put it in a root we want the
60:39 - text to say get date something like that
60:43 - we can give this a boot style of
60:46 - let's say danger and outline so it's red
60:50 - but outlined
60:51 - and let's give this a command of I don't
60:54 - know 80. something like that whatever so
60:57 - we don't have this function we'll go
60:59 - ahead and create it but first let's my
61:00 - underscore button dot pack this guy give
61:03 - this pad y of 20 push down screen a
61:05 - little bit
61:06 - finally let's create a label so my
61:08 - underscore label and this is going to be
61:10 - a TB dot label
61:12 - you want to put it in a root we want the
61:13 - text to be nothing for now and let's
61:16 - minor Square label
61:18 - dot pack this guy and give it a pad of Y
61:20 - of 20 push down screen now maybe we do
61:22 - want to put something here so let's say
61:24 - you picked something right so okay we've
61:28 - got these things now let's come up here
61:30 - and create that function so we want to
61:32 - Define dati all right so let's say we
61:35 - want to grab whatever the person
61:36 - selected as the date and update this
61:40 - label with that information how do we do
61:42 - that well we can grab the date and to do
61:45 - that let's go minerscore label dot
61:47 - config
61:49 - and let's set the text equal to now I'm
61:51 - going to create an F string and I'm
61:53 - going to say you picked
61:55 - and then we want to pass in something
61:58 - into this label
61:59 - and what do we want to pass in well
62:01 - remember we called our calendar my date
62:03 - so that would be my date dot entry dot
62:07 - get and this is just the dot get that
62:09 - you would use for any entry box in
62:11 - kinter right we're just getting
62:13 - whatever's in there so let's go ahead
62:14 - and save this and run it make sure that
62:15 - worked and back over here run this guy
62:18 - so let's say we select again 14th
62:22 - Valentine's Day it's my birthday coming
62:24 - up all right we click get date and it
62:27 - says you picked 214 2023 now what
62:30 - exactly is this returning is this
62:32 - returning a date a date time object what
62:34 - well actually this is just returning a
62:36 - string so you can't do date time stuff
62:39 - to it unless you convert it into a date
62:42 - time object which we can do that if you
62:44 - want but just keep in mind this is not
62:46 - an integer it's not a float it's it's
62:48 - just a string of text right so okay
62:50 - that's cool now let's configure this
62:52 - thing a little bit so by default it just
62:54 - opens up to whatever date the day is so
62:56 - today is the 31st of January so if we
62:59 - you know run this guy again we could see
63:01 - it just says 131.23 that's just today's
63:03 - date so if you want to set a specific
63:05 - date either when it opens or
63:07 - programmatically or whatever you could
63:09 - do that and to do that let's head back
63:11 - over to our code and when you define
63:13 - your widget right here we can set the
63:17 - start date we can set that equal to
63:20 - something now this is actually a date
63:23 - time object this is not a string so in
63:25 - order to use date time stuff we need to
63:28 - import date from python so let's come up
63:31 - here and go from date time we want to
63:34 - import date so now we can create date
63:37 - objects and we can use them so here we
63:39 - just want to call the date function
63:40 - create a little date object thing and
63:43 - here we can set the date to whatever we
63:44 - want now the format is going to be year
63:46 - so 2023 let's say we want the month of
63:49 - two which is February and we want the
63:51 - day of 14. so if we save this and run it
63:54 - we see by default now it shows up as
63:56 - 214.23 if we click this at 214 23 is
64:00 - selected now of course we can still
64:01 - change it to say the ninth if we click
64:03 - the date it says hey you picked the
64:04 - ninth so that's cool so one other thing
64:06 - I want to point out look at this it
64:08 - starts on Sunday right Sunday is the
64:10 - first one listed in this very first
64:11 - column and it goes Monday Tuesday
64:13 - Wednesday Thursday Friday Saturday we
64:15 - can change that we can change with the
64:17 - default start date so maybe your
64:18 - calendar you want it to start on Monday
64:20 - right that's not unusual so how do we
64:22 - get Monday to be the First Column well
64:24 - Sunday is technically the sixth day of
64:27 - the week in Python so it starts at
64:29 - Monday zero one two three four Saturday
64:34 - is five Sunday is six so we could change
64:37 - What's called the first week day to
64:39 - change that First Column so just up here
64:41 - in our quote our code here where we
64:43 - Define our widget I'm just going to set
64:44 - the first week day to zero so remember
64:49 - Monday is zero it's sort of like a
64:51 - python list right they start at zero and
64:54 - so in the world of python Monday is zero
64:56 - or at least for this widget right so if
64:59 - we want Monday that's Zero by default
65:01 - this is going to be six which is Sunday
65:02 - but we want Monday so just change it to
65:04 - zero so we save this head back over here
65:07 - and run it and we click this now we see
65:09 - Monday as the First Column listed and
65:11 - Sunday's way over here so okay that's
65:13 - cool nice that you can change that very
65:15 - quickly and automatically
65:17 - all right so that's basically pretty
65:19 - much all you can do with this which is
65:21 - very cool already but let's say you want
65:24 - to instead of having a thing pop up like
65:28 - this when you click on it maybe you want
65:30 - a button that you can say hey pick the
65:32 - date and you don't want this whole thing
65:34 - on the screen but you still want the
65:37 - functionality of this thing how do you
65:40 - do that well we can do that too let's
65:41 - head back over to our code so up here at
65:43 - the top we can from ttk bootstrap
65:47 - dot dialogues so this is basically a
65:51 - dialog box we want to import query box
65:54 - right so if we save this now let's come
65:57 - down here and let's create a second
65:58 - button let's call this minor score
66:00 - button now actually let's just copy all
66:03 - of this because that's going to be
66:05 - easier so let's change this to my button
66:07 - two and
66:10 - here let's say get calendar Maybe
66:15 - and instead of Danger let's call this I
66:18 - don't know success just change the color
66:20 - a little bit and let's just change the
66:22 - command to thing because I'm being lazy
66:25 - so now we can come up here and let's
66:27 - define thing and let's just set some
66:31 - variable I'm going to call it thing or
66:33 - Cal let's call it cow short for calendar
66:35 - and we could set that equal to just a
66:38 - query box
66:39 - right which is what we imported right
66:41 - here so now let's update our label let's
66:44 - go actually let's just grab this
66:47 - and pop this out instead of my
66:50 - date.entry DOT get this is going to be
66:53 - Cal dot get underscore date because
66:57 - up here we're getting that entry box
66:59 - because this whole date entry widget has
67:03 - sort of been
67:04 - created for ttk bootstrap but
67:07 - underlyingly it uses the date entry ttk
67:11 - widget right and that thing to use it
67:14 - and grab a date use this get date
67:16 - function right so we're going to be
67:18 - using that for this query box so we
67:20 - would call get date right so okay that
67:23 - works let's go ahead and save this and
67:25 - run it see what this does so here we've
67:27 - got this get calendar when we click it
67:29 - boom up Pops our own brand new
67:32 - independent of this thing over here
67:35 - date entry calendar thing and you'll
67:37 - notice the color is primary I'm sure you
67:39 - could mess around with this change color
67:41 - I didn't even try but you would probably
67:43 - want to do that or just understand that
67:45 - it's going to be primary one of the two
67:46 - so now I'm going to click on January
67:49 - 12th when I click on that boom it
67:51 - updates to 1 12 23 and so we get the
67:55 - date there we can change it again to the
67:56 - 20th boom it updates to the 20th now we
67:58 - can still use this guy up here and
68:00 - February 10th
68:02 - click get the date boom February 10th so
68:05 - you know whichever of these two methods
68:07 - you want to use if your program is more
68:09 - suited to have this thing right here pop
68:11 - up on the screen and you know just
68:13 - always be present then use this right
68:15 - totally fine if you don't want this
68:17 - whole thing up on the screen all the
68:19 - time and you just want to call a
68:20 - calendar whenever you want to call a
68:21 - calendar then use the second method hit
68:24 - calendar boom up it pops do your thing
68:27 - and you're good to go so that's the date
68:29 - entry widget for ttk bootstrap very cool
68:31 - super useful very very nice looking I
68:33 - mean this thing looks great super useful
68:35 - super functional and pretty easy to use
68:41 - in this video we're going to look at
68:43 - frames and labels with ttk bootstrap now
68:46 - this may sound a little boring but
68:47 - there's a couple cool things here that
68:48 - you're going to want to know about so it
68:49 - should be pretty cool so I've got a file
68:51 - I'm just calling it framer.pi it's our
68:52 - basic ttk bootstrap starter code that
68:54 - we've always got got the theme name set
68:56 - to superhero and let's come down here
68:58 - and create a frame so I'm going to call
69:00 - this Miner score frame and this is going
69:02 - to be a TB dot frame because we're
69:04 - importing ttk bootstrap as TB and we
69:07 - just want to put this in root now we can
69:08 - give this a boot style equal to all of
69:11 - the other boot style options we've
69:12 - looked at so you could change the color
69:13 - to Danger primary secondary info success
69:16 - light dark all those things so I'm just
69:18 - going to start out with light
69:20 - see how that goes so let's go minerscore
69:22 - frame dot pack give this a pad y of like
69:25 - 40 or so really push it down the screen
69:27 - so okay we've got this thing but there's
69:29 - nothing in it so let's just put some
69:31 - stuff in it so let's build a quick entry
69:33 - form so I'm going to call this my entry
69:34 - and this is going to be ATB dot entry
69:37 - and we want to put this in my frame so
69:39 - to put things in frames you just
69:41 - reference them like that and let's give
69:43 - this a font of helvetica
69:46 - and size 18 just to make it bigger so
69:48 - that it expands our frame a little bit
69:50 - and let's go my underscore entry
69:53 - that pack give this a pad y of like 20
69:56 - and a pad X of 20 to push down screen
69:59 - inside the frame
70:01 - okay so let's also create a quick button
70:03 - so let's go my underscore button and
70:04 - this is going to be a TB dot button
70:07 - we want to put it in my frame as well
70:11 - I want the text to say click me all
70:14 - right and we can give this a boot style
70:16 - of anything we like so I'm just going to
70:18 - give this a dark color
70:20 - and let's give this a command of I don't
70:23 - know thing or something like that we'll
70:24 - create this function in just a second so
70:26 - let's get my underscore button yeah pack
70:28 - give this pad wife 20 and also a pad X
70:32 - of 20. okay so I'm going to come up here
70:34 - real quick and create that function
70:39 - and for now we'll just pass okay last
70:41 - but not least let's create a label so
70:44 - this video is about frames and labels
70:46 - and we've got labels in ttk bootstrap
70:47 - we've already used them in past videos
70:48 - but I'm going to talk about them a
70:49 - little bit because there's something
70:50 - cool about them that you're going to
70:52 - want to know about so let's call this
70:53 - minor Square label and this is going to
70:55 - be a TB dot label and let's just put
70:58 - this in root let's put it outside of the
71:01 - frame and let's give this a text of
71:05 - hello there something like that and it's
71:07 - also give it a font of
71:10 - helvetica
71:12 - and a size 18 to make it nice and big
71:14 - and then that's my underscore label
71:17 - that pack this guy and give him a pad y
71:20 - of 20. so let's just save this and see
71:22 - what we've got so far so head over to
71:23 - your terminal I'm in my ctkinter.com
71:25 - directory and let's just run python
71:28 - framer.pi and when we do we've got this
71:31 - Frame this it's a light color frame
71:33 - we've got a button that doesn't do
71:34 - anything we've got an entry box that
71:35 - doesn't do anything and we've got a
71:36 - label that just has the default text
71:38 - which is in this theme light colored so
71:41 - okay that's pretty much what we would
71:43 - expect now we can change the color of
71:45 - the label we already know how to do that
71:48 - we just come down here and let's give it
71:50 - a boot style of anything we want we
71:53 - could say success if we want make it
71:55 - make it horribly green and ugly save
71:56 - that run it and we've got now green
71:58 - that's the success color right so okay
72:01 - that's cool but we can also do something
72:03 - else with these labels we can invert
72:05 - them so that's really kind of cool so
72:07 - let's come back over here so we could
72:09 - just give this a boot style of inverse
72:11 - so inverse so all right let's go ahead
72:14 - and save that see how this looks and now
72:17 - it's inverted it's got like a little
72:18 - background around it right so that's
72:19 - kind of cool right so it looks ugly like
72:22 - that but in this instance to make it
72:24 - look cooler I would probably give this a
72:26 - light theme
72:28 - like that save that and run it and now
72:30 - it kind of matches that that's kind of
72:32 - cool so this gives you a lot of
72:34 - flexibility to make your app look a
72:36 - certain way if you needed to and uh very
72:38 - cool now we can also change the color of
72:40 - the frame if we want
72:41 - which you know you probably would want
72:44 - to do that so instead of light let's
72:46 - make it dark
72:47 - whatever go ahead and save it run it and
72:49 - you can see now it's dark that's kind of
72:51 - cool right the button kind of disappears
72:54 - so you would probably want to change the
72:55 - color of your button change the boots
72:57 - down there now you can use all of the
72:59 - boot style colors for both of these
73:01 - labels and Frames like I said so you
73:03 - know info success danger primary
73:05 - secondary uh what are the other ones
73:08 - like dark there's a couple more you
73:10 - check the prior videos in this series to
73:12 - uh check those out if you're not
73:13 - familiar with them yet but very cool now
73:15 - one thing I want to mention a lot of
73:17 - themes have background colors so you may
73:21 - not be able to match the theme color to
73:24 - the frame and there are times when you
73:26 - just want a frame to be invisible and
73:30 - you want to be able to do stuff in that
73:31 - frame for instance like if we're packing
73:33 - everything on the screen but we need to
73:35 - grid certain things I would put them in
73:37 - a frame because then you can Grid in a
73:39 - frame right we've done this lots of
73:41 - different times so if that was the case
73:43 - you just wanted to make it invisible
73:44 - what you could do is head over to your
73:46 - code and instead of making making this a
73:48 - TV frame just make it a regular
73:50 - bootstrap frame right so then you just
73:52 - have to get rid of the boot style
73:54 - because regular T Contour frames don't
73:56 - have a boot style so I'll just comment
73:57 - that out if we save this head back over
73:59 - to our terminal and run this now we've
74:02 - got the frame but it's invisible
74:04 - and we could do things like grid inside
74:06 - of it or whatever you want so keep in
74:09 - mind even if you may be using the dtk
74:10 - bootstrap Library you can still use the
74:13 - stuff from old kinter if you want or ttk
74:15 - if you want to you just have to import
74:17 - it like normal so very cool those are
74:19 - frames and those are labels that's
74:21 - pretty much all there is to frames and
74:22 - labels it's not that exciting I get it
74:24 - but very useful you know something
74:26 - you're going to use in every app that
74:28 - you ever make so I thought I'd talk
74:30 - about it
74:34 - in this video we're going to look at the
74:36 - menu button and these are the menu
74:37 - buttons so uh we've got you know I've
74:40 - got this danger colored one and we can
74:42 - change the color I click primary it
74:44 - changes the primary secondary danger
74:47 - info we can do outlines that looks
74:50 - pretty cool outline secondary ooh
74:52 - outline danger and you can see the
74:54 - little text updates every time I click
74:56 - something so that's what we're going to
74:57 - look at in this video so I've got some
74:59 - starter codes we've always got them
75:00 - calling it menu underscore button dot pi
75:02 - and we're using the superhero theme for
75:04 - ttk bootstrap we've imported the library
75:06 - right there and here we go so how do we
75:08 - build these things well they're a little
75:09 - complicated but not too bad so I'm just
75:11 - going to create a variable I'm going to
75:12 - call it my underscore menu and this is
75:14 - going to be a TV DOT menu button and
75:17 - it's TB because I've imported dtk
75:20 - bootstrip as TB
75:21 - and we want to put this guy in root
75:23 - let's give it a boot style of like
75:26 - warning I think that's orange maybe I
75:29 - don't know whatever and then let's give
75:31 - it some text and let's just have it say
75:33 - things I don't know this is the text
75:35 - that's going to appear before you click
75:36 - on anything so before it's opened or
75:38 - clicked on that's the text it'll show up
75:40 - so things all right whatever so then
75:43 - that's my underscore menu
75:45 - dot pack and let's give this a pad y of
75:48 - like 20 really push it down screen so
75:49 - let's save this and run it just to see
75:51 - if that worked should have so let's head
75:53 - over to our terminal I'm in
75:54 - myctkinter.com directory and let's run
75:56 - python menu underscore button and when
75:59 - we do we get things when we click on it
76:01 - nothing happens because we haven't told
76:03 - it to do anything yet so okay that looks
76:05 - good head back over here and I'm gonna
76:07 - push this down a little bit give it a 50
76:09 - instead of 20. Okay so we've got this
76:11 - guy but now there's nothing inside of it
76:13 - now to put things inside of our menu
76:15 - button we need to create basically a
76:17 - little menu inside of our menu button so
76:20 - let's create
76:22 - basic menu and call this anything you
76:25 - want but I'm going to call it inside
76:26 - underscore menu because you know if we
76:29 - called it menu is it the menu button is
76:31 - it the menu It's Complicated so I'm just
76:33 - going to call it inside menu because
76:34 - it's inside of our menu button but you
76:37 - know call it anything you want so this
76:39 - is going to be a TB dot menu and then we
76:43 - need to pass in my underscore menu which
76:45 - is just what we named our menu button up
76:47 - here right this whole thing so okay that
76:49 - looks good now we can add items to our
76:53 - inside menu right so first
76:57 - these are supposed to have variables
76:59 - assigned to them I don't use the
77:01 - variable because I just find you don't
77:04 - need to we have to add a label we can
77:06 - use the label as the variable but if you
77:08 - need to use a variable you call the same
77:10 - thing you want I'm going to call it item
77:11 - underscore variable
77:13 - because you know it's an item we're
77:15 - adding to the menu and then we just give
77:17 - this a string VAR right this is just
77:19 - akinter string VAR variable thing right
77:22 - you're probably familiar with those so
77:23 - now we need to create a list of items
77:25 - that we want to put in our menu and then
77:27 - sort of loop through that list and add
77:28 - them to our menu so let's do that with
77:31 - for Loops let's go for X call it
77:33 - anything you want in and now let's just
77:35 - create our python list of things we want
77:37 - so I want to put different colors in
77:39 - there different boot Styles so when we
77:41 - click on it we can change it so we'll
77:43 - start out with adding primary we could
77:45 - do secondary like that
77:48 - we can do danger that's the red color we
77:52 - could do info you can also change these
77:54 - to be outline instead of solid so let's
77:57 - go outline primary and outline secondary
78:02 - and just do a few of these because it's
78:04 - pretty boring the outline uh what say
78:07 - danger Maybe
78:09 - and what outline info
78:12 - I think that's good enough so we need a
78:14 - colon at the end of this because We're
78:16 - looping right this is a for Loop
78:19 - there we go now what are we doing as we
78:22 - Loop well we're adding
78:24 - things to our inside
78:26 - underscore menu and what are we doing
78:28 - we're adding actually a radio button all
78:32 - right you can add a check button but
78:33 - that gets a little goofy we want a radio
78:35 - button because we only want to select
78:36 - one thing at a time so all right add a
78:39 - radio button and then we're giving them
78:42 - a label of X which is what each of these
78:45 - will are right and now if you want to
78:47 - give the variable you can add the
78:49 - variable of our item underscore VAR I
78:54 - never really use that but if you wanted
78:55 - to you could and that would be how you
78:57 - do it so okay that looks good so the
79:00 - last step we need to sort of associate
79:03 - the menu with the menu button so let's
79:05 - associate the inside menu with the menu
79:10 - button
79:13 - so to do that we just call my underscore
79:15 - menu
79:16 - which is the name of our you know menu
79:19 - button and then inside of here we're
79:21 - going to assign the menu to it and what
79:24 - menu are we going to assign we're going
79:25 - to inside our inside underscore menu
79:27 - okay so let's go ahead and save this and
79:29 - run it see if that worked we ran through
79:30 - that pretty quickly so python menu
79:32 - button.pi and now when we click on this
79:34 - boom we see each of these things very
79:36 - cool but when we click on them nothing
79:37 - happens so how do we get it well it does
79:40 - put a little check box next to it so
79:41 - that's fun so how do we get it to where
79:43 - you know when we click on a thing it
79:45 - does something well that's a little
79:47 - tricky but it's not too bad now normally
79:48 - we would come over here and we would
79:50 - assign a command equals something so
79:53 - let's come up here and create a command
79:55 - called stuff right and what do we want
79:59 - to do well we want to
80:02 - take whatever X that we clicked on
80:05 - and pass it into here as an X and we
80:08 - want to do something with it right well
80:10 - normally you would call stuff
80:13 - but we also want to pass in that X right
80:15 - well whenever you want to pass things in
80:17 - to a function from a button which is
80:20 - essentially what this is in kinter you
80:22 - can't just do that you need to create a
80:24 - Lambda so if we create a Lambda
80:27 - Lambda and now I know this looks like a
80:29 - capital l but it's actually a lowercase
80:31 - you would think that this would work but
80:34 - it doesn't and I'll show you why so
80:35 - let's come up here and let's just print
80:38 - X or better yet let's come down here and
80:41 - create a label real quick so I'm just
80:43 - going to call this Miner score label
80:44 - this is going to be a TV DOT label we
80:47 - want to put it in root we want the text
80:48 - to equal nothing right now and then
80:51 - that's my underscore label dot pack this
80:53 - guy and give it a pad y of like 40 to
80:56 - really push it down the screen
80:58 - but now let's come up here and let's
81:01 - configure our label so minor Square
81:03 - label dot config
81:06 - and we want to set the text equal to X
81:08 - for now right so let's run this and see
81:11 - what happens this is not going to
81:12 - actually work so here when we click on
81:14 - primary boom it's outline info which is
81:18 - the last thing if we click on secondary
81:20 - boom it's outline info which is the last
81:22 - thing why well think about it as this
81:26 - thing is looping it adds
81:29 - X into our
81:32 - function up here
81:34 - well it does it for primary primary gets
81:36 - passed in and it does it for secondary
81:38 - secondary gets passed in danger info
81:40 - outline Ally and outline until it comes
81:43 - to the very last thing outline info it
81:45 - passes it into the function and then
81:47 - boom X becomes outline info now we don't
81:49 - want that it's overriding all the older
81:51 - ones that went in so how do we change
81:53 - that well super easy we just come up
81:55 - here and let's inside of here say x
81:58 - equals x that's all we have to do that
82:01 - should fix this so here I'm going to
82:04 - make a little F string and I'm going to
82:06 - say U selected X okay so let's save this
82:10 - and run it and see if that works
82:13 - it should
82:15 - so now when we click this thing when I
82:17 - click primary boom it says you selected
82:19 - primary when I click info it says boom
82:21 - you selected info when I select outlying
82:24 - danger boom you selected outline danger
82:26 - now this doesn't update yet we have to
82:27 - change that but at least we're passing
82:29 - the right thing and this is why I don't
82:31 - use a variable with this why do we need
82:33 - a akinter variable we've got the label
82:35 - we can do things based on that label if
82:38 - we want we could do any logic we want so
82:40 - that's just my rant finally we want to
82:43 - change our my underscore menu we want to
82:46 - dot config it we want to set the boot
82:49 - style to X so that will change the
82:53 - actual color because when we defined our
82:54 - menu button we set the boot style to
82:56 - warning so here we can update that boot
82:58 - style with whatever we clicked on in the
83:00 - button in the drop down and so that
83:02 - should be fun so let's run this guy one
83:04 - more time see if all this worked
83:06 - so now we click primary boom it changes
83:09 - to Blue primary secondary Danger
83:12 - info we got the outlines I like the
83:15 - outlines the best I think those look
83:16 - pretty good so outline primary outline
83:19 - secondary outline danger like that one
83:22 - outline info so that's it that's menu
83:24 - button now you can play around with the
83:26 - size of the text and the colors of the
83:29 - background and the foreground and all
83:30 - that using a regular style widget and
83:33 - I've got videos on style widgets earlier
83:35 - in the playlist I think the button video
83:37 - we did we also talked about style so you
83:39 - can watch that if you want to change the
83:41 - the backgrounds of this of these things
83:44 - but uh yeah pretty cool and pretty easy
83:46 - so that's menu button with ttk bootstrap
83:48 - and that's all there is to it
83:54 - in this video we're going to look at the
83:56 - meter widget in ttk bootstrap this thing
83:59 - is awesome and very customizable we
84:01 - could do all kinds of stuff with this
84:03 - you can see I've got it going up to 120
84:05 - you could change that to whatever you
84:07 - want you can see there's these sort of
84:09 - dotted outline you could also make that
84:10 - solid you could change the color you
84:12 - could change the text you can increment
84:15 - it by any amount here I've got five
84:16 - percent you can step up by any amount
84:19 - here I've got ten percent step down you
84:22 - can do by buttons you could do it by
84:23 - dragging and dropping and that's we're
84:25 - gonna look at in this video all right so
84:26 - I've got a phone I'm just calling it
84:27 - meter dot pi and it's their basic ttk
84:29 - bootstrap sort of code that we always
84:31 - have and you can see we're using the
84:32 - superhero theme we've imported ttk
84:34 - bootstrap as TB and the rest is just
84:37 - basic stuff so all right let's go ahead
84:38 - and create a meter so I'm going to call
84:39 - this minor square meter and this is a TV
84:42 - DOT meter widget and again we're calling
84:45 - TB dot because we've imported ttk
84:47 - bootstrap as TB now inside of here there
84:50 - are tons of attributes that you can play
84:52 - around with so just to get started we
84:53 - want to put this in root and let's give
84:55 - this a boot style of like danger to make
84:58 - it red and again all your ttk bootstrap
85:01 - colors are available here so primary
85:03 - secondary danger info success light dark
85:06 - all the other ones are available so okay
85:09 - let's just my underscore meter dot pack
85:12 - this guy let's give this a pad y of 50
85:14 - to really push it down screen now one
85:16 - thing you're probably definitely going
85:18 - to want is the subtext so let's go
85:21 - subtext equals and I'm just going to say
85:24 - um hekinter learned this is a meter on
85:27 - how much tkinter we have learned so
85:28 - let's go ahead and save this and just
85:30 - see what we have right out of the box
85:31 - here so let's head over to our terminal
85:33 - in my ctkinter.com directory and let's
85:35 - run python meter dot pi and when we do
85:37 - we get this empty zero this empty circle
85:41 - with a zero in it says decanter alarm so
85:43 - okay if I click on this nothing actually
85:45 - happens so we don't have much going on
85:47 - here if I click on this nothing happens
85:48 - so first let's play around with being
85:50 - able to click on this and drag and drop
85:52 - you have to specifically set that up so
85:55 - let's come here and I'm just going to
85:56 - put all these things on separate lines
85:57 - so they're easier to read and to do that
85:59 - we type in interactive so do we want to
86:02 - make it interactive yes we do right so
86:05 - let me just do this because we're going
86:06 - to do a lot of these so let's save this
86:08 - and run this and see what we have here
86:10 - so now when I click on this I can drag
86:12 - it and drop it and you can see by
86:14 - default it goes up to a hundred
86:16 - and that's very cool so if I leave it
86:18 - off it just you know stays where it is
86:21 - so all right that's interesting what if
86:23 - we want something next to the number so
86:26 - 75 maybe we want to make this 75 percent
86:28 - or maybe on the left side we want to put
86:31 - a dollar sign what do we do to change
86:34 - the basically the label inside the main
86:37 - label oh we could do that we can just
86:39 - change the text right
86:42 - to anything we want so if I wanted a
86:45 - percentage we could do that we could
86:48 - also do text left you know if we wanted
86:51 - a dollar sign we could do that so if we
86:53 - save this and run it
86:54 - you can see in tiny little text we get
86:57 - this dollar sign and percentage sign and
86:59 - you could play around around with the
87:00 - font size and we'll look at that maybe a
87:03 - minute but I'm going to take off that
87:04 - dollar sign because that's silly but
87:06 - just keep in mind that's how you would
87:08 - put that that would be text left
87:09 - obviously so I'm just going to comment
87:11 - this one out so we can create a meter
87:14 - type
87:16 - by default this is set to full we can
87:19 - also have it semi so let's go ahead and
87:22 - save this take a look at what this looks
87:24 - like
87:25 - and here you see it's not all complete
87:28 - right it's just semi so that's a little
87:31 - weird I'm gonna go ahead and put it back
87:33 - to full
87:35 - but
87:37 - I'm also going to comment
87:39 - can be
87:41 - semi
87:42 - all right we can play around with the
87:45 - stripe
87:47 - thickness
87:48 - and I'm just going to set this to let's
87:50 - say 10 if we run this now we get the
87:53 - sort of dashes right so that's cool I
87:56 - really like the look of that and again
87:58 - you can change this to any number you
87:59 - want
88:01 - you know we could do I don't know 50 to
88:03 - make it really well let's just see
88:05 - really big so one two three four five
88:08 - right
88:10 - whatever
88:12 - maybe you want uh just five make it real
88:15 - skinny right so you get these like
88:16 - almost tick marks that's cool personally
88:20 - I like ten but uh
88:23 - anything you want you can do that we can
88:25 - change the meter size so let's send this
88:28 - to 200. if we save this well let's
88:31 - change it to 400 make it really big
88:34 - you can see whoa we've got a really big
88:36 - meter size now
88:38 - right
88:40 - that's cool likewise you can make it
88:42 - smaller by just you know make it get
88:44 - smaller so I'm gonna put this at uh 200
88:46 - or so save this run It Go
88:49 - very nice
88:51 - and just that easy we can give this
88:52 - thing some padding right so let's go
88:55 - padding equals and let's just blow it
88:57 - out let's say 50.
89:02 - can't really tell the difference maybe
89:03 - it's padding on the outside
89:05 - probably so leave that at 50. we can set
89:09 - the amount used so let's say we'll set
89:12 - it to 20. this is sort of like the
89:15 - default what it is when it starts right
89:16 - up
89:17 - all right so by default boom it's just
89:19 - already at 20. all right so that's
89:21 - interesting
89:22 - we can also change the amount total
89:26 - and let's say I put it at 150. so before
89:29 - we had it at 100 100 now it's 150 as as
89:33 - high as it'll go so so if we run this
89:37 - you can see it's still at 20 by default
89:39 - if I drag it all the way up 130 140 all
89:42 - the way up to the top is 150. Right
89:44 - personally I would always keep it at 100
89:46 - because you know you're usually doing
89:48 - like a hundred percent a lot of times
89:50 - when you're using a meter of some sort
89:52 - it's a percentage but if you need it for
89:54 - any other thing that's how you do that
89:56 - and uh very cool now there are lots of
89:58 - other things you can play around with
89:59 - this very quickly let's head over here
90:01 - to the documentation we could go to
90:05 - ttkbootestrap.readthedocs.io if you
90:07 - click on the style guide It's not that
90:09 - useful come down here to meter it just
90:12 - shows you basically the basic
90:14 - functionality so I should mention you
90:16 - could also change the subtext color and
90:19 - that's just with subtext Style
90:21 - so let's just come down here give it a
90:24 - sub subtext style of let's say I don't
90:27 - know success something like that save
90:29 - this run it and now the subtext is
90:33 - that green success color that is hideous
90:35 - right so uh let's just give this um I
90:40 - don't know let's call it dark
90:41 - let's say light I think that's maybe by
90:45 - default with this theme
90:48 - yeah so by default that's light colored
90:51 - very cool so
90:53 - like I said there's not much stuff right
90:55 - here but if you want the information on
90:57 - this you can go to the API section up
91:00 - here and then come down here in the
91:03 - widgets module click on meter and then
91:05 - here we get the API documentation which
91:08 - is much more complete so these are all
91:10 - the things you could play with so Arc
91:11 - range
91:12 - you could do amount total we did that
91:15 - amount used widget size meter size boot
91:18 - style we did that meter type Fuller semi
91:21 - we did that meter thickness we did that
91:23 - show text interactive we looked at that
91:26 - stripe thickness we looked at that text
91:27 - left text right text font if you want to
91:30 - change the font size for the text in the
91:32 - center you could use that subtext we use
91:35 - that subtext style we just did that
91:36 - subtext font again you could change the
91:39 - size of that if you want so Dash size 10
91:41 - and then we have step size we'll take a
91:43 - look at that in just a second so pretty
91:44 - straightforward that's how to make it
91:46 - look certain ways now how do we actually
91:48 - use this so let's say I drag this around
91:50 - and I end on 78 I need to know that it's
91:53 - at 78 programmatically how do I do that
91:55 - how do I know what it's at further how
91:57 - can I change it by like maybe clicking
91:59 - on a button to increment it a certain
92:01 - amount how can we do that well let's
92:02 - take a look at that now real quick super
92:04 - easy and let's come down here and let's
92:06 - create some buttons so I'm going to call
92:07 - my underscore button and this is going
92:10 - to be a TV DOT button we want to put it
92:12 - in root we'll have the text to say click
92:15 - me
92:16 - and let's say
92:18 - five right
92:20 - so we want to click it and move the
92:21 - thing five so let's give this a command
92:23 - of clicker I don't know and that's my
92:26 - underscore button dot pack this guy give
92:28 - it a pad y of 20 push down screen a
92:30 - little bit and now let's create this
92:32 - clicker function now first
92:35 - let's just there's several there's a
92:37 - couple different ways you could step it
92:38 - up or down or you could set the amount
92:43 - used attribute of the wages so if we
92:46 - want to just create a counter real quick
92:49 - Let's Go Global
92:51 - counter and let's also just really
92:53 - quickly set this up here Global counter
92:55 - and let's set the counter equal to five
92:58 - or something to start out with and then
93:00 - inside of here
93:02 - let's say my underscore meter
93:04 - dot configure and then we want to set
93:07 - the amount used to our counter and then
93:10 - every time we click it we want to
93:11 - increment our counter so let's go plus
93:13 - equals five right now if we want to keep
93:16 - track of that let's keep track on the
93:17 - button so that's my underscore button
93:19 - dot configure and let's set the text
93:22 - equal to Let's create an F string and
93:24 - let's say click me
93:27 - and then inside of here let's pass my
93:29 - underscore meter so to see what the
93:33 - meter is actually set on at any given
93:35 - time you can call the amount used VAR so
93:39 - this is a variable
93:41 - and this needs to be a period so this is
93:43 - a variable sort of like a kinter
93:45 - variable that will keep track of this so
93:47 - to get it we need to dot get the amount
93:49 - used for so okay that looks pretty good
93:52 - except oh this should be amount used not
93:55 - amount user anyway all right so let's go
93:57 - ahead and save this and run it see how
93:59 - this looks okay so we started at 20 we
94:01 - want to click me five boom it goes to
94:03 - five percent now it does not go to 25
94:06 - because we just didn't program it to do
94:08 - that we could easily have set the
94:09 - counter at 20 to start with and then
94:11 - incremented at 5 but we didn't do that
94:13 - anyway you get the idea 5 10 15 20 25 30
94:16 - 35 40 45 50. all the way up now if we
94:19 - hit 100 and keep going this will just
94:21 - keep going so it keeps spinning right so
94:23 - we can programmatically fix that if we
94:25 - want and also let's set our counter at
94:28 - 20. just because and then to fix that we
94:32 - would just come into our thing here and
94:34 - let's just say what let's go if counter
94:38 - is less than or equal to 100 then do all
94:41 - this stuff and I'm just going to tab it
94:42 - all over all right that looks good oh
94:45 - let's save this and run it we start at
94:47 - 20 boom it goes to 25
94:49 - 30. all the way up to 9500 we keep
94:53 - clicking at 100 it doesn't go past 100.
94:55 - so that's one way you can do that so
94:57 - that's how to sort of increment it
94:59 - manually if you just want to set the
95:02 - amount used and you could do that
95:03 - there's nothing wrong with that there's
95:04 - sometimes you probably would want to do
95:06 - that but there are even better ways to
95:08 - do that we can step so let's grab this
95:10 - and let's copy and paste a couple more
95:12 - buttons in here and I'm gonna call this
95:14 - my button two and my button three so
95:18 - then here as our text instead of Click
95:19 - me five let's say Step Up
95:22 - and
95:24 - here instead of Click me five let's say
95:26 - step down and let's give this command of
95:30 - up and let's give this one a command of
95:33 - down so all right let's go up and create
95:35 - these two functions
95:38 - so let's define up
95:41 - and let's define down
95:45 - so here we can step up in any amount so
95:47 - let's just go my underscore meter dot
95:50 - step and then inside here we pass
95:52 - however many places we want to step so
95:54 - if we want to step 10 we could just do
95:56 - it like that same thing with down it's
95:58 - the exact same process instead of 10
96:01 - though it's let's say we want it to go
96:02 - negative 10. right just that easy and uh
96:06 - kind of all there is to it now let's
96:07 - make this a little bit bigger so these
96:10 - all fit 570 has come back over here and
96:13 - let's see let's run this guy now one
96:15 - weird thing about the steps that still
96:17 - didn't quite fit uh we started at 20 if
96:20 - we step up from here it'll go backwards
96:22 - so it goes ten five it's zero now to go
96:25 - four again in 10 in steps so just sort
96:28 - of keep that in mind so if we run this
96:30 - again and we want to step down again it
96:34 - goes the opposite direction so if we
96:36 - start actually let's just start at zero
96:37 - here just to make this easier to follow
96:40 - so amount used let's put this at zero
96:43 - okay so now if we run this guy again and
96:46 - again not quite big enough so if we step
96:48 - up boom 10 20 34 56 78 90 and then it
96:52 - just goes back down again
96:55 - right so we're stepping up now we can
96:58 - step down boom and this one once it hits
97:00 - zero it keeps going negative right so
97:02 - again you could programmatically change
97:04 - this with an if statement like we just
97:06 - did with the first function I'll leave
97:07 - that to you guys so very cool right and
97:10 - even when we're stepping up and down we
97:13 - can still grab this guy and move it
97:15 - around
97:17 - all right and as always you can still
97:19 - always no matter which one of these you
97:21 - you use you can always find whatever the
97:23 - current thing is like for instance right
97:25 - now it's 82. we can always grab that
97:28 - just by referencing this amount used VAR
97:31 - and then getting it like that so very
97:33 - cool and uh a lot of fun I don't know
97:35 - about you guys but this is one of the
97:36 - things that makes me really like ttk
97:39 - bootstrap it's these little things that
97:40 - have been added that aren't a part of
97:42 - regular kinter this meter thing is
97:44 - really cool I mean you can do all kinds
97:45 - of cool stuff with this and it's really
97:46 - easy to use and very configurable as we
97:49 - could see we could change all kinds of
97:50 - stuff with this and it's pretty easy to
97:52 - use
97:57 - in this video we're going to be looking
97:58 - at notebook tabs with ttk bootstrap and
98:01 - this is what we're doing here we've got
98:02 - these little tabs here and on each one
98:04 - we can have different stuff and we can
98:05 - style them different ways and all that
98:07 - good stuff and that's what we're going
98:08 - to look at in this video so we've got
98:09 - our basic starter code that we've always
98:11 - got I'm calling it MB dot pi and we're
98:13 - importing ttk bootstrap we've pip
98:15 - installed that obviously and we're using
98:16 - the superhero theme so let's come down
98:18 - here and create our notebook now these
98:20 - things are tabs but it's called a
98:22 - notebook so it's kind of weird we're
98:24 - just going to name this my underscore
98:25 - notebook
98:26 - and this is going to be a TB dot
98:28 - notebook
98:30 - and it's TB here because we're importing
98:32 - ttk bootstrap as TB and we just want to
98:35 - put this in our root window and let's
98:36 - get this a boot style of and I'm going
98:39 - to give this blue style of dark now you
98:41 - can use all your boot style colors for
98:43 - this primary secondary info success
98:46 - danger dark light and all that so keep
98:49 - that in mind and that's really all we
98:50 - need to do now that's my underscore
98:52 - notebook dot pack this guy and I'll give
98:54 - this a pad y of like 20 to kind of push
98:56 - it down screen a little bit so the trick
98:58 - to this thing is you add frames as the
99:01 - tabs right so you create a frame you put
99:03 - whatever you want in that frame and then
99:05 - you add that frame to The Notebook so
99:07 - let's create a frame I'm going to call
99:09 - it tab one right and this is going to be
99:11 - a TB dot frame you can also use a
99:14 - regular Kinder frame but it's going to
99:15 - be kinder colored so we want to use
99:18 - tp.frame and we want to put this in my
99:20 - underscore notebook so I'm going to copy
99:22 - this and let's create a second one and
99:24 - I'm going to call it tab 2. so we've got
99:27 - these two frames now we just need to put
99:28 - stuff in them so let's just play around
99:30 - with this I'm going to create a label
99:32 - this is going to be a label we want to
99:34 - put it in tab one right so the text is
99:36 - going to say my awesome
99:39 - label
99:40 - all right it's a very awesome label and
99:43 - you know just for fun let's give this a
99:45 - font of and let's say helvetica
99:49 - and like a size of 18 to make it nice
99:51 - and big and then we could just my
99:53 - underscore label dot pack this guy and
99:56 - let's give this a pad y of like 20 push
99:58 - it down screen inside the frame a little
100:00 - bit and then we could play around with
100:02 - this let's create a text box I don't
100:04 - know this is going to be my text and
100:06 - it's going to equal a regular text box
100:07 - now notice this is not a ttk bootstrap
100:09 - text box just a regular text box that's
100:11 - fine uh we can put it in tab one
100:15 - as well
100:17 - and let's give it a width of like 70 and
100:20 - a height of like 10 just to sort of
100:23 - expand it a little and again we can my
100:25 - underscore text Dot pack this guy
100:28 - and I'm going to give it a pad y of like
100:30 - 10 maybe a pad X of ten two just for fun
100:34 - mix it up and finally let's create a
100:36 - button just one little button and this
100:39 - is going to be a TB dot button
100:42 - we want to put it in tab one again
100:46 - and want the text to say click me
100:48 - or something like that
100:50 - and let's give this a boot style
100:54 - of like danger and outline so it'll be
100:58 - red outlined okay and then finally
101:00 - that's my underscore button dot pack
101:03 - this guy and give it a pad y of like 20
101:05 - push it down screen a little bit so
101:07 - we've got our first tab our first frame
101:09 - filled out now let's create our second
101:11 - one and I'm not gonna be as elaborate
101:13 - with the second one let's just create a
101:15 - label in fact I'm just going to come up
101:16 - here and copy this guy
101:20 - and instead of calling it my label let's
101:22 - call it my label one or probably my
101:24 - label two would make more sense and then
101:26 - this is going to say
101:29 - this is tab two all right capitalize
101:34 - that
101:35 - and instead of putting it in tab one
101:37 - right here let's put it in tab two so
101:40 - okay that looks good now let's add our
101:43 - frames
101:44 - to The Notebook
101:46 - now we haven't added them yet so we've
101:48 - got this tab one and tab two and to add
101:50 - them we call my underscore notebook
101:53 - dot add and then we just say hey tab one
101:56 - and we want to give this some text so
101:58 - I'm just going to say tab one
101:59 - let me copy this guy paste it again call
102:03 - tab two and on this one we're gonna call
102:05 - Tab 2. right and that's it so this text
102:09 - is the little text that's going to be on
102:10 - the little tab at the top of our
102:12 - notebook a little panel thing uh so
102:15 - there we go all right that looks pretty
102:17 - good let's head over to our terminal I'm
102:19 - in my ctkenter.com directory and let's
102:21 - try on python
102:22 - NB dot pi and boom here we go so we've
102:26 - got tab one and tab two inside of tab
102:29 - one we've got our label we've got our
102:31 - text field we've got our button that
102:32 - doesn't actually do anything but it
102:33 - looks good and tab two we have just some
102:36 - text that says this is tab two now I've
102:38 - got this set to the Dark theme for this
102:40 - notebook and this looks pretty good
102:42 - right so when you click a tab it
102:44 - highlights otherwise it's sort of muted
102:46 - and dark I like that but you can use all
102:48 - of your boot Styles so if we come up
102:50 - here to where we Define this thing
102:51 - instead of dark if we want to say info
102:54 - for instance I don't really like the
102:56 - boot style colors with this and you'll
102:59 - see why here
103:01 - see here it is now it looks like Tab 2
103:03 - is highlighted like we've selected Tab 2
103:06 - but we haven't it's the one that hasn't
103:08 - been selected yet but it's the one with
103:10 - color so it doesn't really make sense
103:12 - when we click on it we're now on tab two
103:14 - it says this is tab two but tab one is
103:16 - the one that sort of looks like it's
103:17 - highlighted so it's it's very confusing
103:19 - and it's not just this boot style it's
103:21 - any of them that you pick so if we
103:23 - change this to danger for instance we're
103:26 - gonna get the same sort of weird thing
103:28 - going on the non
103:31 - tabbed tab is the one that's highlighted
103:33 - which you know is kind of weird so I
103:35 - just sort of keep that in mind I get
103:36 - around that myself by just using you
103:40 - know dark or light uh it's still going
103:42 - to get the same thing with light if we
103:43 - see here let's look at this but it's not
103:46 - quite as bad right let me click on this
103:48 - it's still in my mind isn't great now
103:50 - you might be thinking what if we call
103:52 - like danger outline what happens there
103:56 - well
103:59 - we're getting there so you can't do that
104:00 - it would be kind of fun if you did if
104:03 - you could but uh no so I'll keep this at
104:06 - dark go ahead and save this we'll take
104:07 - one more look at this I think that looks
104:10 - pretty good
104:11 - and very neat
104:16 - in this video we're going to look at
104:18 - progress bars and they're very similar
104:20 - to The Floodgate we looked at a few
104:21 - videos ago and you can see we've got
104:23 - this progress bar I've got it set to
104:24 - striped you could also set it to solid
104:26 - and we've got it sort of the green color
104:28 - and we can increment a few things at a
104:30 - time we can stop we can do auto every
104:34 - second boom boom I've got it moving 20
104:37 - and that's kind of cool we can just go
104:40 - automatically Zoop like that and keeps
104:43 - going and going all kinds of cool things
104:45 - you could do with this and that's what
104:45 - we're going to look at in this video so
104:47 - I've got some basic starter code of
104:49 - calling it PB dot Pi short for Progress
104:51 - bar I guess and uh we're importing ttk
104:54 - bootstrap as TB I've pip install that
104:56 - and we're using the superhero theme so
104:58 - it's that sort of Dark theme so okay
105:00 - let's just come down here and create a
105:02 - progress bar I'm going to call it my
105:03 - progress this is going to be a TB dot
105:05 - progress bar and it's TV DOT because up
105:09 - here we imported ttk bootstrap as TB so
105:13 - there we go and now there's all kinds of
105:14 - different attributes you can use for
105:15 - this thing we'll just sort to start
105:17 - walking through all of them here we want
105:19 - to put this in root we want to give this
105:20 - a boot style of you know anything you
105:23 - want so let's say danger that's the red
105:25 - color you can use all your ttk bootstrap
105:27 - colors for this so primary secondary
105:29 - info success danger light dark all the
105:33 - rest of them so we'll just do danger
105:35 - that's that red one and that's solid you
105:37 - can do striped if you want just by
105:39 - passing a striped but for now let's just
105:42 - do solid see how that looks now like I
105:43 - said we can change all kinds of things
105:45 - here so we can start out by setting the
105:49 - maximum length so let's go maximum and
105:51 - let me just put these all on separate
105:53 - lines so we can read them easier and I
105:55 - just want to make this a hundred if you
105:56 - wanted to make it 200 that's the maximum
105:59 - sort of number it can go to so from zero
106:03 - to 200 from 0 to 100 whatever I'm just
106:06 - going to put 0 to 100 we can also change
106:08 - the mode so just like the flood gauge
106:10 - thing we looked at a few videos ago we
106:13 - can set the mode Now the default is
106:15 - determinate
106:16 - and the other option is indeterminate
106:18 - we'll look at both of those we'll set it
106:19 - to determine it for now you don't have
106:21 - to put the mode on there if you don't
106:22 - put the mode it'll just be determinant
106:24 - by default but we're going to play with
106:26 - it so I'm going to put it on there and
106:28 - let's see what else we got we can change
106:29 - the length of it like how physically big
106:31 - it is so I want to say length equals
106:35 - let's say make it 200 nice and sort of
106:37 - long now that's not to be confused with
106:39 - the maximum so it might be a length of
106:41 - 200 like you know that big versus a
106:43 - length of 100 versus a link of 50 so
106:46 - it's 200 but it still only goes to 100
106:48 - it's just the you know the bar will be
106:51 - physically bigger right and we can set
106:54 - the value to start with so if we want to
106:57 - set this to like 20 right out the box we
107:00 - could do that so let's go ahead and my
107:02 - underscore progress
107:04 - dot pack this guy give it a pad y of
107:06 - like 40. really push it down the screen
107:09 - let's just save this and run it see what
107:10 - we got here so we head over to my
107:11 - terminal I'm in my ctkinther.com
107:13 - directory and let's run pythonpb dot pi
107:18 - and when we do we get this solid red bar
107:21 - you can see it's 20 because we set the
107:23 - value to 20. so it's already got 20 on
107:25 - there and you can see it's you know yay
107:27 - length so that's kind of cool we can
107:29 - make it bigger we can make it smaller so
107:30 - that's cool so let's go back here very
107:32 - quickly and let's just change this just
107:35 - so you see to 300 and let's set the
107:37 - value to Zero by default on the sky
107:40 - again see now it's much longer the
107:43 - length of it is an additional 100 so
107:45 - that just makes it bigger so okay now
107:47 - what can we do with this thing so let's
107:49 - create some buttons so first I'm going
107:51 - to create a frame real quick to put
107:52 - these buttons in so let's call this
107:53 - minor score frame
107:56 - this is going to be a TV DOT frame
107:58 - and we want to just put it in root and
108:00 - then that's my underscore frame dot pack
108:02 - this guy give them a pad y of like 20
108:05 - push down screen a little bit so let's
108:07 - say for aim and let's say progress
108:10 - bar
108:12 - and then let's come down here and create
108:14 - some buttons
108:15 - so I'm gonna call this minor score
108:17 - button
108:18 - this is going to be a TB dot button we
108:20 - want to put it in my underscore frame
108:23 - I also have the text say
108:26 - increment 20.
108:29 - and let's give this a boot Style
108:33 - of
108:34 - I don't know info make it blue or
108:36 - something I don't know hey let's also
108:38 - give this a command of uh increment
108:42 - so let me copy this we'll need to create
108:44 - this function in a second and for now
108:46 - it's my underscore button
108:48 - dot grid this guy so we'll grit this in
108:51 - the frame and we'll give it a column
108:54 - of 0 and a row of zero and for good
108:59 - measure let's give this a pad X of 10 to
109:02 - space it apart from the other buttons
109:03 - we're about to create so let's come up
109:05 - here and let's create this function
109:06 - let's say increment
109:09 - 20 and so I'm going to Define increment
109:12 - now let's say we want to increment this
109:14 - by 20. now there's a couple of different
109:15 - ways to do it I'm going to suggest an
109:17 - alternate way than the sort of standard
109:19 - way you might think so the standard way
109:21 - is just to call you my progress dot step
109:24 - and then say how much you want to
109:27 - increment it so we could just do that
109:28 - this doesn't work great though as we'll
109:30 - see here so let's come back over here
109:32 - let's run this guy our button is blue if
109:34 - we click this boom it goes up 20 40 60
109:38 - 80 100 oh it goes back to zero it
109:42 - doesn't stay at 100 when you use step
109:44 - and to me that's kind of annoying when
109:45 - it gets to the end I want it to stay
109:47 - filled out at the end so I can see it's
109:50 - done right it's just sort of in my mind
109:52 - that should be the way it works it
109:54 - shouldn't just go back to zero it's very
109:56 - unsatisfying right you get to 80 and
109:58 - then instead of Boom all the way closing
110:00 - it just disappears so I don't love this
110:02 - so I tend to not use the step method
110:04 - here so let's go ahead and get rid of
110:07 - that what you can do is call the value
110:09 - so let's go minerscore progress and then
110:11 - pass in the value attribute and then we
110:14 - could just plus equal 20. so it takes
110:16 - whatever the value is currently starts
110:19 - out at zero and it adds 20 to that so if
110:21 - we save that come back over here run
110:24 - this guy now every time we click this
110:26 - it's just going to add 20 20 40 60 80
110:29 - 100 it gets to the end it's all filled
110:31 - out it looks great I like it to be
110:33 - filled out at the end like that it just
110:34 - makes sense to me does it make sense to
110:36 - you it should be filled out at the end
110:37 - so I tend to use this method now uh it's
110:40 - pretty cool and that's pretty easy now
110:42 - let's create a quick label down here so
110:45 - that we can get the current value
110:48 - so let's come down here and let's just
110:51 - uh create
110:52 - a label and I'm going to call this
110:55 - underscore label
110:57 - this is going to be a TV DOT label I'm
110:59 - going to put it in root want the text to
111:01 - equal nothing to begin with and uh we'll
111:04 - just leave the boot style off for now
111:06 - because we don't really care what it
111:07 - looks like and let's dot pack this guy
111:10 - give him a pad why of 20 to push down
111:13 - screen a little bit so now if we want to
111:15 - Output what the current value of our
111:18 - progress bar is how could we do that
111:19 - well we come up here and let's just get
111:23 - current value
111:25 - so that's going to be minor Square label
111:27 - dot config
111:30 - and we want to set the text equal
111:33 - to whatever our current my progress bar
111:36 - is and we just pass in that same value
111:38 - attribute right so every time we click
111:40 - the button it will increase it by 20 and
111:42 - then output that onto the screen so if
111:44 - we save this and run it so we get boom
111:46 - it says 20 down there 40 60 80 100 very
111:52 - cool now I can barely read that so we're
111:54 - going to make this a little bigger just
111:55 - for fun let's come down here and let's
111:57 - give this guy a font equal to like
112:00 - helvetica
112:02 - and size 18. so okay that's cool so
112:06 - that's just increasing it you know
112:08 - buy a certain amount right so we've set
112:11 - it to 20. we could set this to any
112:12 - number we want ten five one zero well
112:15 - not zero but you get the idea so very
112:18 - cool very quickly let's change this to
112:20 - 120. so the maximum is 120 just to sort
112:24 - of differentiate this and the length
112:27 - right so if we run this real quick we're
112:29 - just going to see of course the the
112:30 - length of it's the same but now it goes
112:32 - 20 40 60 80 100 120 right so the maximum
112:37 - has changed so I just wanted to point
112:39 - that out in case there's any confusion
112:40 - there I'm going to change this back to
112:42 - 100 so all right what else can we do
112:43 - well we can have this thing
112:44 - automatically start and just go before
112:47 - we do that though let's look at this
112:48 - determinant thing right so if you want
112:51 - to do indeterminate what this will do is
112:53 - well one it'll change the the shape of
112:55 - it and let's change this from danger to
112:57 - Danger striped just for fun it'll change
113:01 - the shape of the progress bar how it's
113:02 - filled it'll just make a little line but
113:04 - it'll also continue so once you get to
113:07 - 100 it'll then go back down again so
113:09 - indeterminate means it goes up and down
113:11 - which you may want for certain things so
113:14 - if we run this we could see that
113:16 - right after that you can see it's
113:18 - different because it starts out with
113:19 - something and then 20 40 60 80 100 click
113:23 - it again boom goes down to 120 140 161.8
113:27 - it just keeps adding right
113:30 - because we're adding in our function if
113:33 - you wanted to have it hit 100 and then
113:35 - go back down to zero you could do some
113:37 - logic to do that
113:39 - um I don't think we're gonna do that
113:40 - that's basic logic you would do that in
113:42 - here once you just run a if statement if
113:45 - value equals 100 then you know instead
113:49 - of this plus equal 20 it would be
113:52 - minus equal 20 right so you could do
113:54 - that but you get the idea so okay that's
113:56 - determined kind of weird I don't use it
113:58 - all that much but there are certain
113:59 - circumstances you may need to use it so
114:01 - what else can we do well let's have a
114:02 - button where we can click it and it just
114:04 - goes right it just kind of like
114:07 - starts at zero one to the other nine ten
114:09 - eleven all the way up to 100 very
114:10 - quickly so let's come down here I'm
114:12 - going to create this I'm gonna grab this
114:14 - button and let's go
114:18 - let's grab a couple of these so I'm
114:19 - gonna go my button one one two two three
114:25 - three we'll set this one to say Auto
114:31 - and let me take this command off for now
114:33 - this one will be stop
114:37 - and this one will be
114:39 - start
114:41 - and again let me take this command off
114:44 - and for start let's create a command
114:46 - called start and we'll create this
114:48 - function in just a second we also need
114:50 - to change these columns so this would be
114:52 - column one column two and column three
114:55 - so okay let's come up here and let's
114:57 - create
114:58 - just start
115:00 - so let's define our start function and
115:02 - here we could call our progress bar so
115:04 - my progress and then we could just say
115:06 - dot start and then we can pass in the
115:08 - increments that we want it to move so
115:10 - let's say 10 right so if I save this and
115:13 - run it and I click Start it goes all the
115:16 - way up and then we're still in
115:18 - indeterminate so it just will keep going
115:20 - back and forth right so if we close this
115:23 - let's change this back to determinant
115:27 - save this and run it now when we click
115:30 - Start it just goes Zoop and it just it
115:33 - keeps going now you could set some logic
115:35 - in here that says hey if it ever hits
115:36 - 100 stop but uh I'll leave that to you
115:40 - how do we get it to stop if we want to
115:42 - we've got this stop button it doesn't do
115:43 - anything well let's look at that right
115:46 - now so let's come down here to our start
115:48 - button or to our stop button and let's
115:50 - give this a command of stop
115:53 - we come up here
115:55 - let's create a stop function
115:58 - so we Define stop
116:02 - and to stop this guy we just call my
116:03 - underscore progress dot stop pretty
116:05 - simple so if we save this and run it
116:08 - we can start it and boom stop it just
116:11 - goes back to zero start stop same thing
116:13 - here we can increment 24 to 60 80 we
116:15 - click stop boom it goes back to zero now
116:17 - this doesn't update after that
116:20 - because our stop function doesn't have
116:22 - that on there but you could put that in
116:24 - there if you wanted I suppose you could
116:26 - just grab this
116:29 - and I'll put it right there so
116:32 - very cool and uh pretty easy now what if
116:35 - you wanted to Auto increment at a
116:37 - certain interval based on a certain time
116:40 - well we could do that let's come up here
116:42 - to this Auto button and let's create a
116:45 - command called Auto
116:49 - and to do this we're going to use the
116:52 - python time Library so let's import time
116:55 - it just comes with python we don't have
116:56 - to install it or anything we can just
116:58 - import it and let's come down here
117:00 - and let's Auto
117:03 - so Define Auto
117:05 - and I'm going to create a for Loop so
117:08 - let's go 4X in a range of say five so we
117:12 - want to do 20 increment blocks so 20 40
117:14 - 60 80 100 there's five of those in a
117:17 - hundred right so we're going to Loop
117:18 - through five times right so we can just
117:21 - uh grab this guy right here
117:25 - and and paste him in so that will do
117:29 - that and we also probably want to Output
117:32 - our current value so we'll do that and
117:35 - then we can time
117:37 - dot sleep and we want this to happen
117:39 - every second now if we run this this
117:40 - isn't actually going to work uh let's
117:42 - see if we run this so if we click Auto
117:44 - it just sort of the whole program
117:46 - freezes until it finishes so in five
117:49 - seconds boom there it goes now that's
117:52 - not what you want at all we want it we
117:54 - want to see the progress as it goes
117:56 - right so to do that we have to call
117:59 - something I don't know if I've talked
118:00 - about this
118:02 - definitely not on this channel we can
118:04 - call Root dot update underscore idle
118:08 - tasks
118:10 - and this is just a function that will do
118:13 - what it says it will update the idle
118:14 - task so instead of waiting until the
118:16 - thing is completely done it'll do them
118:18 - one at a time so we could say uh update
118:21 - one at a time
118:23 - not all at once or something like that
118:26 - and here we could say uh increment
118:30 - one second
118:32 - time whatever so now if we save this and
118:35 - come back over here
118:39 - it'll go one two three four five you
118:44 - know every second boom it will do that
118:46 - so that's kind of cool I like that when
118:47 - we stop it still does that here we can
118:50 - uh still doesn't like that
118:53 - and this starts over as well just keeps
118:56 - going as you click it you're going to
118:57 - want to put some logic in there that
118:58 - stops IT at 100. I'll leave that to you
119:00 - it's trivial so very cool very easy to
119:03 - use not a whole lot of options here you
119:04 - set the maximum you set the link you set
119:06 - the current value you can get this value
119:08 - anytime you want just by calling value
119:11 - like this and you can assign things to
119:14 - that value just by using a assignment
119:16 - operator like any old Python and you can
119:19 - set this mode to determine it versus
119:20 - indeterminate whatever floats your boat
119:23 - and uh very cool
119:28 - in this video we're going to look at
119:30 - radio buttons for ttk bootstrap now
119:32 - we're going to look at the actual
119:33 - buttons these round things we're also
119:35 - going to look at radio buttons like the
119:37 - actual buttons here so you can click and
119:39 - it'll go from one to the other they act
119:42 - in the same way as radio buttons but
119:43 - they look like actual buttons so that's
119:45 - what we're going to be looking at in
119:46 - this video so I've got some basic
119:48 - starter code that we've always got I'm
119:49 - calling it rad dot Pi sure for radio I
119:51 - guess radio button whatever we're
119:53 - importing ttk bootstrap as TBF pip
119:56 - installed that already and we're using
119:58 - the superhero theme so let's come down
120:00 - here there's a few different ways to
120:01 - make radio buttons and I'll show you a
120:03 - couple different ways in this videos but
120:04 - I like to create a python list that'll
120:06 - have all the things that I want to make
120:07 - buttons for and we just Loop through
120:09 - that and create buttons for each one but
120:10 - I'll show you a more manual way to do it
120:12 - also later on in this video so let's uh
120:16 - create radio button list so I'm going to
120:19 - create a list called toppings and this
120:21 - is going to be pizza toppings or
120:23 - something so let's go pepperoni and
120:25 - we'll just do a few of these we also
120:27 - want cheese pizza and and we also want
120:30 - what veggie pizza or something like that
120:32 - so it's just a basic python list nothing
120:34 - really interesting to see here but now
120:36 - we also need to create akinter
120:40 - variable keep track of everything so we
120:45 - want to know when you click on a button
120:46 - which button you've clicked on so we
120:48 - need to enter variable for that and
120:49 - Kendra has these special variables you
120:51 - can have string vars or int bars we're
120:53 - going to use a string bar for this so
120:54 - I'm going to call this my underscore
120:56 - topping
120:57 - and we're going to set this equal to a
120:59 - string VAR
121:00 - just like that and that's all there is
121:02 - to it so now let's Loop through the list
121:06 - and create radio buttons so let's go for
121:11 - topping in toppings
121:14 - right so remember Toppings is our python
121:17 - list we're going to Loop through it for
121:18 - each topping in there what do we want to
121:21 - do well let's create a TB dot radio
121:23 - button
121:24 - and notice the B and button is lowercase
121:27 - I have a tendency to want to make it
121:28 - uppercase but it's lowercase and we want
121:30 - to put this in root and now we have to
121:32 - pick a boot style
121:33 - and just like everything in ttk
121:35 - bootstrap you can use all your basic
121:37 - boot style styles so primary secondary
121:40 - info danger uh dark light all the things
121:43 - so let's create uh let's do danger so
121:46 - danger is red so we'll create red ones
121:48 - and then now we need to set a variable
121:51 - well we know what our variable is we've
121:53 - defined it right here as my topping so
121:55 - let's pop that in there now we also want
121:58 - to designate the text what is going to
122:00 - say on the actual radio button itself
122:02 - what text should it be well I think it
122:03 - should be topping
122:06 - right so for pepperoni it'll say
122:08 - pepperoni for cheese it'll say cheese
122:10 - for for veggie it'll say veggie now like
122:12 - I said there's lots of different ways
122:13 - you could do this you can use a list of
122:15 - tuples and then you know have a
122:17 - different name and a different thing you
122:20 - know so instead of pepperoni it might be
122:22 - pepperoni and one cheese and two veggie
122:25 - and three you know so you might put the
122:27 - name here and the the variable there
122:29 - like I said there's lots of different
122:31 - ways to do radio buttons they all work
122:32 - with bootstrap so we're going to do it
122:34 - this way and we also need to set the
122:37 - value the value will also be topping
122:40 - so whenever somebody clicks on it what
122:42 - do we put in this variable well we put
122:43 - whatever that topping is right so my
122:46 - topping the variable will become
122:48 - pepperoni my topping the variable will
122:50 - become cheese
122:52 - Etc so okay that looks good now we can
122:55 - also dot pack this right here if we want
122:57 - give this a pad while like 20 push down
123:00 - the screen a little bit
123:01 - and that looks good now notice we didn't
123:04 - name this we didn't go like my
123:06 - underscore button equals like we
123:09 - normally would since We're looping
123:10 - through here we don't need to do that
123:11 - and since each of these have a variable
123:13 - we don't need to distinguish between
123:15 - each one they're all going to be the
123:16 - same right so if we click on one that
123:19 - means definitionally the other ones
123:20 - can't be clicked on that's what a radio
123:22 - button is you can only click on one at a
123:24 - time so we can do it this way so okay
123:26 - that looks good now there's a couple of
123:28 - different ways to figure out which one
123:31 - you've clicked on you can either create
123:32 - a button and then whenever you click
123:34 - that button it'll sort of like submit it
123:35 - and then you can do something or you can
123:37 - add a command right to the radio button
123:39 - we're going to do both here just so I
123:41 - could show you kind of uh how to do that
123:43 - so let's create button and let's just
123:46 - call it my underscore button
123:48 - this is going to be a TB dot button we
123:50 - want to put it in root I want the text
123:52 - to say something like
123:54 - click me all right and let's give this a
123:58 - command of
123:59 - uh clicker right so we're gonna click
124:02 - the button and run this clicker function
124:04 - so before we do that let's my underscore
124:05 - button dot pack this guy put it on the
124:07 - screen give it a pad y20 kind of push it
124:09 - down screen a little bit
124:11 - so while we're at it let's also create a
124:14 - label so we can output when we click on
124:16 - something we can output it on the screen
124:18 - hey you clicked on whatever pepperoni
124:20 - right so I'm gonna call this Miner score
124:22 - label it's going to be a TB dot label we
124:26 - want it to be in root and we want the
124:28 - text to start out saying you selected
124:31 - colon nothing right so then let's go
124:33 - minerscore label dot pack give this guy
124:36 - a pad y20 push down screen a little bit
124:38 - okay so now we've got this clicker
124:40 - function we need to create so let's come
124:42 - up here and create it so let's go
124:44 - clicker function
124:46 - and let's define Clicker
124:49 - and here we just want to change the
124:51 - label so let's go minerscore label dot
124:53 - config and we want the text to say let's
124:55 - create an F string and let's say U
124:57 - selected
125:00 - and then let's put in a variable so what
125:03 - variable well it's this variable right
125:05 - here right our string bar variable so we
125:07 - want to
125:08 - uh my underscore toppings dot get this
125:11 - right and that's a function so put your
125:13 - brackets there so that's all there is to
125:15 - it let's go ahead and save this and run
125:16 - it make sure that worked so head over to
125:18 - our terminal I'm in my cetkinter.com
125:20 - directory and let's run Python rad.5 and
125:23 - when we do we get pepperoni cheese
125:25 - veggie that looks good you selected
125:27 - nothing when I click on veggie you can
125:29 - see it's red because we selected danger
125:31 - the boot style of danger is red right
125:33 - now if we click this button it says use
125:35 - selected veggie and we're good to go
125:37 - that's all there is to it so cheese
125:39 - cheese pepperoni so that's awesome very
125:43 - easy but what if you don't want to use a
125:46 - button right what if you just want to
125:47 - click cheese and have it automatically
125:49 - update well very very simple so let's
125:52 - come down here and right here in our
125:55 - button we've given it a command of
125:56 - clicker we can just take that thing and
125:58 - apply it to the radio button itself so
126:00 - come up here inside of our radio button
126:03 - pop that in there command equals clicker
126:05 - save it head back over here run this guy
126:07 - one more time and now when we click
126:09 - cheese boom it says you selected geez
126:11 - very cool you selected pepperoni so just
126:14 - depending on the flow of your program
126:15 - what you need it to do you might want to
126:18 - have a button so if somebody's like
126:19 - filling out a form or something and
126:21 - there are other things in the form you
126:22 - want them to fill out name email address
126:24 - whatever you probably don't want them to
126:27 - click this button and then boom it
126:28 - submit the form right you would want to
126:30 - click this button select pepperoni
126:32 - finish filling out the rest of the form
126:34 - and then click a order button or
126:37 - whatever boom then it says pepperoni so
126:40 - you could use either way just depends on
126:42 - what you're doing so okay that's cool so
126:44 - now we've got these things working but
126:46 - when it comes to radio buttons there are
126:48 - actually buttons too These are nice
126:50 - little round things you could sort of
126:52 - toggle but you could do the same thing
126:53 - with buttons themselves so how do we do
126:55 - that well I'll show you how to do that
126:56 - right now and there's actually two
126:57 - different styles you can use in
126:59 - bootstrap to do that so let's come back
127:02 - over to our code
127:04 - and let's uh create actual radio buttons
127:08 - radio button buttons there we go actual
127:12 - radio button buttons all right so this
127:15 - is a good way for me to also show you a
127:17 - second method to do radio buttons you
127:19 - know up here we created a list of all of
127:22 - the buttons we wanted and then we looped
127:24 - through it here wow that might be overly
127:26 - complicated if you've only got one or
127:28 - two things you want as your radio button
127:30 - thing so you might want to just create
127:32 - the manually so how do you do that well
127:34 - we can we could do that I'm going to
127:35 - call it radio button one and radio
127:37 - button two and we'll just set that equal
127:39 - to a TB Dot
127:42 - radio button just like before and we
127:45 - want to put it in root now we make them
127:48 - into actual buttons with a boot style so
127:50 - let's set the boot style equal to and
127:54 - let's change up the color I'm going to
127:56 - call this info color but to make it an
127:58 - actual button we call the tool button
128:01 - boot style and that will create an
128:03 - actual button and we have to do the same
128:05 - thing as the other radio buttons we have
128:06 - to set a variable so let's set that
128:09 - equal to minor Square topping again
128:12 - because remember up here we did the same
128:14 - thing right we also need to set a text
128:17 - what is the button going to say well I'm
128:19 - just going to say radio
128:20 - button one right there we go
128:25 - we also need a value right so I'm just
128:28 - going to say uh radio button one
128:34 - and we also need to give this a command
128:37 - of clicker so when we click on it we
128:39 - want to run that clicker function right
128:41 - so I'm going to copy this whole thing
128:44 - and we actually also need to rb1 dot
128:47 - pack this guy give it a pad y of 20. now
128:50 - I did this on its own line you could
128:52 - also do it at the end of it but nah I
128:54 - like to do it on their own lines when
128:55 - you're doing them manually so all right
128:58 - let me get rid of that and paste this
128:59 - thing in again and let's call this rb2
129:01 - and this is also going to be a tool
129:03 - button
129:04 - we can also do the second style of ttk
129:07 - bootstrap tool button and that is an
129:10 - outline so I'll show you both of them
129:11 - this one is just tool button this is
129:13 - tool button and outline right so again
129:16 - same variable but instead of radio
129:19 - button one we want it to say radio
129:21 - button two and for the value it also
129:24 - wants to be radio button two okay so
129:26 - let's rb2. hack this guy make sure we
129:29 - put him on the screen give them a pad
129:30 - white of 20 to push down screen a little
129:32 - bit save this head back over here run
129:34 - this guy one more time and now we have
129:36 - two buttons down here and they're actual
129:39 - buttons and it's the info color this
129:41 - sort of light blue this one is the
129:43 - regular one it's solid right when you
129:45 - hover over it it changes to dark blue
129:47 - this one is outlined when you hover over
129:49 - it it changes like that but it's
129:50 - outlined otherwise so that's kind of
129:53 - cool and the same thing occurs if we
129:55 - click this one it says you selected Rio
129:57 - button one and this one is unselected if
130:00 - we click this one boom it says here at
130:02 - radio button two and this one gets
130:04 - unselected because with the radio
130:06 - buttons you can only have one at a time
130:07 - likewise if we come up here and click
130:09 - cheese boom these two buttons both
130:11 - become unselected because these are all
130:14 - the same radio button series I guess you
130:16 - would call it and again it says you
130:18 - selected G so veggie cheese pepperoni
130:21 - radio button one veggie radio button two
130:24 - cheese whatever you like all the
130:27 - different things and that's all there is
130:28 - to it so those are radio buttons with
130:30 - ttk bootstrap very simple very
130:32 - straightforward just remember you use
130:34 - the same sort of functionality as a
130:36 - regular kinter radio button the only
130:39 - real difference is you had a boot style
130:40 - and it changes the color otherwise you
130:42 - just treat them like any other radio
130:44 - button in kinter and there you go
130:50 - we're gonna look at sliders with ttk
130:53 - bootstrap and these are technically
130:54 - called scales but that's silly it's a
130:56 - slider I know it's a slider you know
130:58 - it's a slider this is a slider but of
131:00 - course it's called scale and this we're
131:02 - gonna look at in this video so you can
131:04 - see we can move this back and forth and
131:05 - when we do the number changes down here
131:07 - uh we can make these horizontal we can
131:09 - make them vertical we change the colors
131:10 - we can do all kinds of fun things and
131:12 - that's what we're going to look at in
131:13 - this video so I've got a file I'm just
131:14 - calling it slider.pi because this is a
131:16 - slider not a scale
131:18 - it's a scale but anyway we've got our
131:21 - basic starter code that we've always got
131:22 - we've imported ttk bootstrap as TB at
131:25 - pip install ttk bootstrap way back at
131:27 - the beginning of this course and you can
131:29 - see we're using the superhero theme so
131:31 - to use a scale let's just create a scale
131:34 - slash slider I'm going to call them
131:36 - sliders but they're technically scales
131:38 - and let's just call this minor score
131:40 - scale and it's going to be a TB dot
131:42 - scale
131:44 - and we want to put it in a root and we
131:46 - want the boot style to be any of the
131:49 - colors that you want to use so we've got
131:50 - primary secondary warning info danger
131:54 - dark light all the regular boot style
131:56 - styles and I'm just gonna go uh warning
132:00 - now we can set all kinds of different
132:01 - options and attributes for this we'll
132:03 - get into that in a second for now I just
132:04 - want to put this on the screen and take
132:06 - a look at it so minor score scale dot
132:08 - pack let's give this a pad y of like 50
132:10 - to really push it down screen so let's
132:12 - head over to our terminal real quick I'm
132:14 - in my ctkencher.com directory and let's
132:16 - run Python's slider.pi and when we do we
132:19 - get this little slider it moves back and
132:21 - forth and you know it doesn't really do
132:22 - anything right now but it's on the
132:24 - screen and it is glorious we have a
132:27 - slider so okay let's look at some of the
132:29 - attributes we could play around with
132:30 - here and we can come down here I'm just
132:32 - going to put a comma and put these each
132:33 - On Their Own Line first we can give this
132:36 - a length now I know this kind of looks
132:38 - like a capital l this is a lowercase L
132:41 - Sublime just does that and we can set
132:43 - this to anything we want now this is the
132:45 - physical link so you know it was like
132:47 - this big before
132:49 - 200 would be twice as big right so we
132:51 - could save this run it take a look and
132:53 - see what that looks like and now
132:55 - suddenly the slider is twice as big now
132:58 - that does not mean it goes from zero to
133:00 - 200 this is just the physical length
133:02 - it's just like 200 think of it as pixels
133:04 - 200 pixels right I mean we could get
133:06 - crazy with this
133:08 - and why not let's make this let's go
133:10 - 400. oh yeah that's right so now we see
133:14 - it goes all the way the length of this
133:17 - thing almost very cool so all right
133:20 - that's length very useful we can also
133:22 - set the orientation so that's just
133:23 - Orient
133:24 - and by default it is horizontal that's
133:29 - you know side to side we can also change
133:31 - this to vertical
133:33 - go ahead and save this
133:35 - might even be too big for our app nope
133:38 - and now it goes up and down down and up
133:41 - all right so okay that's cool I'm gonna
133:43 - go ahead and change this back because
133:46 - because I find that annoying the
133:48 - horizontal so side to side now if you
133:51 - wanted to go side to side you don't have
133:52 - to put Orient equals horizontal
133:54 - obviously because we did that earlier it
133:56 - defaults to horizontal just by default
133:58 - so okay now we can set the from and the
134:01 - two so you know what do we want to start
134:03 - at zero maybe or 10 or 50 or 100 or
134:06 - whatever you wanted to start at and we
134:07 - use the from underscore attribute and
134:10 - it's from underscore because from is a
134:12 - like a python keyword so we can't use
134:14 - from so it's from underscore I'm going
134:16 - to set this to zero and then we could
134:19 - set the two equal to whatever we want so
134:21 - 100 200 whatever I'm gonna put it at 100
134:24 - for now now we can't actually see this
134:26 - yet because we don't have anything to
134:29 - see what the scale is so let's fix that
134:31 - real quick let's create a label and I'm
134:35 - going to call this Miner score label and
134:37 - it's going to be a TV DOT label we just
134:39 - want to put this in root we want the
134:40 - text to equal nothing to start out with
134:43 - and let's underscore label dot pack this
134:46 - guy put him onto the screen and now what
134:50 - we could do is give this scale a command
134:52 - sort of like a button when you press it
134:54 - so I'm going to call this command scalar
134:56 - I don't know whatever so now we can
134:58 - create that function to do something
135:00 - every time we move the slider around so
135:02 - let's define scalar and now a normal
135:05 - function you don't have to do anything
135:06 - but with this you have to pass in an
135:08 - event because every time you move the
135:10 - slider around that will push an event
135:13 - into this function and the event that
135:16 - it's pushing is the position so whatever
135:18 - it happens to be that's what it'll be so
135:20 - what do we want to do well let's change
135:22 - the minderscore label dot config let's
135:24 - change the text on that to something
135:27 - else well what do we want to change it
135:29 - to let's change it to minor Square scale
135:34 - dot get and that will allow us to get
135:37 - the current position and then output it
135:39 - to the latest let's go ahead and save
135:40 - this and run it now remember we've set
135:42 - it from zero to a hundred so that's sort
135:43 - of interesting
135:45 - if we run this guy and we grab this
135:48 - you'll see well first that's very little
135:50 - but it's
135:51 - 10.36294
135:54 - 300518134 right that's a very long
135:57 - decimal number and we don't love that so
136:00 - but you will notice
136:01 - it goes from zero zero point zero all
136:04 - the way up to 100.0 so that looks good
136:07 - so first let's come down here to our
136:09 - label and let's give this a font of
136:13 - say helvetica
136:14 - and like size 18 make it nice and bigger
136:17 - now also let's take off this from in
136:19 - this too
136:20 - so if we run this again
136:23 - you're going to notice that we didn't
136:25 - set a from in two so now it's just from
136:27 - 0 to 1. and it's all these very very
136:31 - long decimal numbers so what can we do
136:34 - here well first let's give this back up
136:36 - from zero to one but now we can come up
136:39 - here and wrap our myscale.get in the int
136:43 - function this is just the python integer
136:45 - function this will convert anything into
136:47 - an integer so if we do that and run it
136:50 - that should get rid of all the decimal
136:52 - point numbers and just give us one two
136:54 - three four five seven nine ten up to
136:57 - 100. very cool so
136:59 - moving right along
137:01 - let's change this to 500. right now
137:06 - again this won't change the physical
137:07 - length of the slider this is the from to
137:10 - two so now it goes up to 500 right
137:14 - oh
137:16 - so you might be thinking well okay
137:18 - that's great to put these numbers on the
137:20 - screen but what if we want to actually
137:21 - do something based on where the slider
137:23 - is well of course then you would just do
137:25 - it in this function right so instead of
137:28 - putting this label thing here you might
137:29 - say you know if uh my underscore scale
137:33 - dot get is less than 50 you know do
137:38 - something else do something else right
137:41 - you would do logic in there so that's
137:44 - how you would do that so okay moving
137:46 - right along we can change this I'm going
137:48 - to put this back to 100 because scales
137:49 - should go from 0 to 100 in my mind right
137:51 - zero to a hundred percent that sort of
137:53 - makes sense and we could change this
137:55 - around if we wanted to get fancy put a
137:57 - little percentage sign there if we run
137:59 - this I'm just messing around now for fun
138:01 - oh it's outside of the quotation mark
138:04 - put it in the quotation mark
138:07 - see getting sloppy
138:09 - all right so save this and run it now it
138:11 - very fancily says 74 percent all right I
138:15 - don't know totally useless but fun
138:18 - nonetheless so what else can we do with
138:20 - this well the only other really
138:21 - interesting thing there are some other
138:22 - things you could do with this but the
138:24 - only really interesting thing is you
138:25 - could set the state to disabled
138:30 - right so if we save this and run it
138:33 - now it doesn't work at all and if you
138:36 - wanted to enable this you would create a
138:39 - button or something that when you
138:40 - clicked it it would set this to normal
138:43 - right so normal or disabled those are
138:45 - the two options there and again if we
138:48 - run this guy one more time
138:50 - now it's enabled again and we can play
138:51 - with our glorious slider once again
138:54 - and that's all there is to it so that's
138:56 - the slider pretty easy
138:57 - scale that's the scale pretty easy I
139:00 - don't know why they call it a scale it's
139:02 - obviously a slider but uh yeah pretty
139:04 - fun
139:09 - in this video we're going to look at the
139:11 - scroll bar with ttk bootstrap and
139:13 - there's several different things we can
139:14 - do with this we can make it sort of
139:16 - square we can make it kind of rounded we
139:18 - can change the color and do all the
139:20 - things that's we're going to look at in
139:21 - this video so I've got a file I'm just
139:23 - calling it scroller.pi and it's our
139:25 - basic Kinder starter code that we always
139:27 - have we've imported ttk bootstrap as TB
139:29 - I pip installed that many videos ago in
139:31 - the series we're using the superhero
139:33 - theme and that's pretty much it so let's
139:35 - start out by creating a basic frame so
139:38 - I'm going to call this my underscore
139:39 - frame and this is going to be a TB dot
139:42 - frame though I suppose you could use a
139:44 - regular Kinder frame because we're not
139:45 - actually going to look at this we want
139:47 - to put it in root and it's just going to
139:49 - be used as a container to hold the
139:51 - things to put a scroll bar in so we're
139:53 - not really going to see it or anything
139:54 - so it could be a ttk bootstrap frame or
139:57 - a regular Kinder frame really doesn't
139:59 - matter and so it's my underscore frame
140:01 - dot pack this guy let's give it a pad y
140:03 - of like 20 push down screen a little bit
140:05 - so okay now let's create a scroll bar
140:09 - and I'm going to call this my underscore
140:11 - scroll
140:12 - and this is going to be a TB dot scroll
140:15 - bar
140:17 - and we want to put it in my underscore
140:19 - frame right so here we can give this an
140:23 - Orient of
140:25 - let's say vertical we want it to go up
140:27 - and down right otherwise it would be
140:29 - horizontal and here's where we can do
140:31 - some different things let's give this a
140:32 - boot style of and you can use all your
140:35 - regular boost styles with this primary
140:36 - secondary light dark info success danger
140:39 - whatever color you want all the Regular
140:41 - Boot styles that we've looked at in all
140:43 - these other videos in the series so you
140:45 - know whatever you like there let's go
140:46 - danger to make it red and annoying
140:48 - looking I don't know you could put it I
140:51 - would probably use dark with this
140:52 - superhero theme but I'll just do danger
140:54 - for now just to make it obnoxious and uh
140:56 - funny looking now the only other option
140:58 - you have as far as boot Styles is you
141:00 - can leave it like this and it'll just be
141:01 - a square scroll bar like a normal
141:03 - default scroll bar or you could make it
141:06 - round and it'll be slightly rounded so
141:09 - we'll we'll do round for now maybe we'll
141:10 - play with this in a minute so okay now
141:12 - we need to pack this guys let's go
141:14 - monitor scroll down pack and we want to
141:17 - put this on the side of let's say the
141:19 - right side and let's give it a fill of Y
141:23 - so Y is up and down vertical
141:25 - okay so now let's just uh create
141:29 - a text widget so we have something that
141:31 - we can you know scroll right let's go
141:34 - text widget and I'm just going to call
141:36 - this Miner score text and this is going
141:37 - to be a regular text widget because I'm
141:39 - not sure there is one with ttk bootstrap
141:41 - but it doesn't matter we're just gonna
141:42 - use a regular text widget and we want to
141:44 - put this in my underscore frame
141:47 - and let's give this a width of like I
141:49 - don't know 30 and like a height of 25
141:53 - and now here the important thing is and
141:56 - let me put this on another line we want
141:58 - a y scroll command of underscore scroll
142:03 - dot set
142:05 - and let's also give this a wrap of none
142:09 - so there's no word wrapping inside the
142:11 - text box and while we're at it let's
142:13 - give it a font of helvetica and like a
142:16 - size of 18 so the font's nice and big so
142:19 - this y scroll command will set our my
142:22 - scroll scroll bar this guy right here as
142:25 - the scroll bar for this widget right
142:27 - this is just basic hinter scroll bar
142:29 - stuff has nothing to do with ttk
142:31 - bootstrap you would do this for any sort
142:33 - of scroll bar using regular kinter or
142:35 - ttk or this or anything else so all
142:38 - right that looks good so now let's minor
142:40 - Square text
142:42 - that pack this guy
142:44 - and I don't think I want to give it any
142:47 - sort of padding because we don't want
142:49 - the frame to show here we just want the
142:50 - text widget to show so we won't give it
142:52 - any padding okay so finally we need to
142:55 - config the scroll bar once we've created
142:58 - it we always need to then config it so
143:00 - let's go my underscore scroll dot config
143:04 - and let's give this a command of my
143:07 - underscore text Dot y View
143:10 - and that'll sort of associate our scroll
143:13 - bar with our text widget right so here
143:16 - we set it and here we give it a command
143:19 - so that whenever we move it it knows to
143:21 - move this guy right here so okay let's
143:24 - go ahead and save this and run it head
143:26 - over to our terminal I'm in my
143:27 - ctcincter.com directory and let's run
143:29 - Python scroller.pi and when we do we get
143:33 - this annoying red scroll bar and if we
143:36 - type some stuff here we could see the
143:37 - scroll bar moves and we can scroll and
143:40 - notice it has a slight roundedness to it
143:44 - right
143:45 - so that's cool if we want to take that
143:47 - off we can come up here to our boot
143:49 - style and our scroll when we defined it
143:52 - and just take off that round if we save
143:53 - this and run it you see now we have just
143:56 - the regular sort of default Square
143:58 - scroll bar
144:01 - whatever you like
144:03 - that's pretty cool so let's play around
144:05 - with this very quickly one more time
144:07 - instead of Danger let's change this to
144:09 - dark and I want to bring that round back
144:11 - and this is probably what I would do if
144:13 - I was actually making an app using this
144:16 - color scheme because I don't know I
144:18 - think that looks kind of modern and cool
144:19 - having it dark like that and there we go
144:22 - so that's a scroll bar now if you wanted
144:24 - to change this into you know sort of
144:26 - down here
144:27 - horizontal you would just change your
144:29 - Orient to vertical and this instead of Y
144:32 - it would be X and instead of
144:36 - this y view it would be x view right so
144:39 - Y is up and down X is left and right
144:41 - that's really all there is to it also
144:43 - this instead of Y scroll command it
144:45 - would be obviously X scroll Command
144:46 - right so basically just change all the
144:48 - Y's to x's and you've got yourself a
144:51 - horizontal scroll bar instead of a
144:53 - vertical one so those are scroll bars
144:55 - with ttk bootstrap very easy very cool
144:57 - and uh pretty fun
145:02 - in this video we're going to look at the
145:04 - separator this line thing here and the
145:06 - size grip this little dotted thing in
145:08 - the corner here that allows us to do
145:10 - this and that's what we're going to be
145:12 - looking at in this video so I've got a
145:13 - file I'm just calling it sep.pi short
145:15 - for separator.pi I guess and we're
145:18 - importing ttk bootstrap as TB at pip
145:20 - installed that long ago in this series
145:22 - uh we're using the superhero theme and
145:25 - that's pretty much it so let's come down
145:27 - here and let's create a label real quick
145:28 - I'm just going to call it label one and
145:30 - it's going to be a TV DOT label and it's
145:32 - TB because we imported ttk bootstrap as
145:35 - TB and we just want to put this in root
145:37 - let's just have the text say label one
145:39 - no big deal let's give this a boot style
145:42 - of I don't know let's say light and
145:45 - let's label one dot pack this guy
145:48 - give it a pad y of like 40 really push
145:50 - it down the screen so I'm going to grab
145:51 - this and I'm going to copy and make
145:52 - another one and we'll call this one
145:54 - label two and this will just say label
145:57 - two so in between these we want a
145:59 - separator those separate tour so I'm
146:02 - gonna call this my underscore sep
146:05 - and it's going to be a TBE dot separator
146:08 - and we want to put it in root and here
146:11 - the main thing that you can do with this
146:12 - is give it a boot style and this allows
146:14 - you to change the color of the separator
146:16 - that line right and that's really all a
146:18 - separator is it's just a line and so you
146:20 - can use all your regular boot Styles
146:22 - dark light primary secondary info
146:25 - success danger any other ones I forgot
146:27 - so I'm just going to make this danger so
146:29 - it's red and nice and easy to see let's
146:31 - go my underscore sup dot pack and we're
146:34 - going to play around with this a little
146:35 - bit more because there's a couple of
146:36 - things you can do with this but for now
146:38 - let's just save this and run it make
146:39 - sure this looks okay let's head over to
146:41 - our terminal I'm at myctkinter.com
146:42 - directory and let's run
146:44 - pythoncept.pi and when we do we get
146:47 - label one label two and this tiny little
146:49 - separator now you'll notice it's very
146:51 - small by default and it's actually a
146:53 - little hard to change the size of this
146:55 - I'll show you how to do it but it's not
146:57 - as easy as you might think or hope or
146:59 - expect it to be so let's first before we
147:02 - do that there is one main thing we can
147:04 - change about this we can change the
147:05 - Orient so by default it is horizontal
147:09 - right and you don't have to do Orient
147:11 - equals horizontal obviously we just saw
147:13 - that by default it's already horizontal
147:15 - but if you want it to go up and down you
147:17 - just change it to Vertical so if we save
147:19 - this and run it now we have it going up
147:21 - and down right so okay that's cool I'm
147:24 - gonna go ahead and change this back to
147:25 - horizontal now the question becomes how
147:29 - do we change the size of this thing and
147:31 - when you're using pack we can change it
147:33 - to fill equals
147:35 - x and x is left to right if you were
147:38 - doing this vertical up and down you
147:40 - would change this to Y right but we're
147:42 - doing it horizontal we'll put fill
147:44 - equals x now if you do this you'll
147:46 - notice we run this it stretches the
147:49 - entire size of the app which may be what
147:52 - you want maybe not so how do we change
147:54 - the size from not very little or very
147:56 - big but some other measure how do we do
147:59 - that now normally with kinter you would
148:01 - use a width attribute so you would come
148:02 - up here and you would just say you know
148:04 - with equals 200 or something and that'd
148:06 - be good to go not so with the separator
148:08 - with that we need to use pad X so pad X
148:12 - gives padding on either side on the
148:13 - x-axis right so if we gave it a pad X of
148:16 - let's say 10 that would take just a
148:19 - little bit off of each side right so if
148:21 - we run this you can see just a little
148:24 - bit off the edge it doesn't go all the
148:25 - way to the end right so we would have to
148:28 - play around with this based on whatever
148:29 - you want so if you gave it say 100 and
148:32 - think of these as pixels 100 pixels
148:35 - see now it's you know got 100 on each
148:37 - side so just play around with that and
148:39 - uh you know get it to the size you want
148:41 - it's not a great method but it's sort of
148:43 - what we have right so that's the
148:45 - separator very simple the only other
148:47 - option is just change the boot style
148:48 - right and uh so instead of danger maybe
148:51 - we would say info right so save this and
148:53 - run it ooh ah now it's sort of light
148:56 - blue all right so okay that's the
148:58 - separator now let's look at the size
149:00 - grip and I don't find this to be all
149:02 - that popular
149:04 - but you may find some use for it so
149:06 - we'll look at it real quick let's create
149:08 - this guy I'm going to call this my
149:10 - underscore size grip
149:12 - very original this is going to be a TB
149:14 - dot size grip
149:17 - we want to put it in root and same thing
149:19 - you can give this a boot style of
149:21 - whatever you want so I'm just going to
149:22 - stick with the same color scheme here so
149:25 - info will make it info color that light
149:27 - blue and that's pretty much it so now if
149:29 - we my underscore size grip.pack this guy
149:32 - and just put it on the screen we can see
149:34 - if this worked and we see it's right
149:36 - here in the middle of our app because
149:38 - that's where we packed it right but if
149:40 - you grab this and sort of hold your
149:42 - mouse button down you can resize it from
149:45 - there now of course you could also do it
149:47 - from the corner
149:50 - but Back in the Day apps used to have
149:52 - these little grippy things on the corner
149:54 - and so if you're old enough you'll
149:56 - remember that maybe you put the size
149:58 - grip thing in the corner or for some
150:00 - weird reason you need to resize your app
150:02 - from inside of the app like this and you
150:04 - just want to put your size grip right in
150:06 - the middle of the screen that's how you
150:08 - do that but how can we put this in the
150:10 - corner well we're packing this guy so we
150:12 - would have to use anchor and the pack
150:15 - statement here so I would put this in
150:16 - the Southeast Corner SE so South is all
150:19 - the way down east is all the way over
150:22 - right and then that will sort of get us
150:26 - there if we save this and run it it
150:28 - won't quite work you'll see it it puts
150:30 - it over here but that's not you know
150:32 - exactly what we want we want it down in
150:34 - this corner so
150:36 - what we could do is give this a fill
150:40 - equals both and then make sure it's
150:43 - expanded so we could go expand equals
150:45 - true
150:46 - so that should jam it down into the
150:48 - bottom right corner if we run this sure
150:49 - enough there it is now we can do that
150:52 - and it looks like it should
150:55 - and we're good to go so I put two
150:57 - widgets in this video we usually just do
150:58 - one widget per video but you know these
151:01 - are kind of lame widgets the size grip
151:03 - you're never going to use that you might
151:04 - but I've never used it I've been using
151:06 - kinter for years and years and years
151:08 - I've never actually used a size grip
151:09 - same thing with a separator you might
151:11 - use a separator there might be some
151:13 - visual reason for you to put a line in
151:15 - your app very easy to use though and
151:18 - that's all there is to it
151:23 - in this video we're going to look at
151:24 - spin boxes and this is a spin box you
151:27 - can see you can just click it and sort
151:28 - of spin through each one uh we can have
151:31 - it where when we click the button this
151:33 - label changes or we can have it whenever
151:35 - we just spin it the label changes as
151:37 - well and that's what we're going to look
151:38 - at in this video so I've got a file here
151:39 - I'm just calling it spinner.pi it's our
151:41 - basic enter starter code and I've
151:43 - imported ttk bootstrap as TB I pip
151:45 - installed that many videos ago we're
151:47 - using the superhero theme and that's
151:49 - pretty much all there is to it so let's
151:51 - start out by creating a spin box so I'm
151:53 - gonna go spin box
151:55 - and I'm going to call this Miner score
151:58 - Spin and this is going to be a TB dot
152:01 - spin box
152:02 - and it's TB dot because we imported ttk
152:04 - bootstrap as TB and we want to put this
152:07 - in root and we want to give this a boot
152:09 - style and here you can use all the
152:10 - different boot style colors that we've
152:12 - looked at in all the other videos in
152:13 - this series so primary secondary info
152:16 - success danger warning light dark all
152:19 - those things uh let's just go success
152:21 - here make it nice and green and weird
152:22 - and then that's my underscore spin dot
152:26 - pack this guy
152:27 - and give it a pad y of like 20. now
152:30 - there are several different things you
152:31 - can do with this first let's make this a
152:33 - little bit bigger let's give this a font
152:34 - of helvetica
152:37 - and a size of 18 so it's nice and big
152:39 - and we can see this now also I'm going
152:42 - to put this on a separate line so it's
152:43 - easier to read you can do spin boxes a
152:45 - couple of different ways you can have
152:46 - words and other things in there or you
152:48 - can have numbers so we'll start out just
152:49 - with numbers so if you want to designate
152:51 - a range you could just go from
152:53 - underscore equals and let's start at
152:55 - zero and let's go to let's say 10 right
152:59 - so that's really all we have to do let's
153:01 - go ahead and save this and run it head
153:02 - over to our terminal I'm in my
153:03 - ctkinter.com directory and let's go
153:06 - python spinner dot pi and when we do we
153:09 - see right away we get this sort of empty
153:10 - looking spin box it's not empty if we
153:12 - actually click it it starts at zero and
153:14 - then it goes to one two three four five
153:16 - six seven eight nine and ten all right
153:19 - so we can go back down again and back up
153:22 - again so that's to and from and now
153:25 - you'll notice when we started this there
153:26 - was nothing listed here I'll talk about
153:28 - that in just a minute too but before we
153:30 - do that let's look at the other way to
153:31 - do this using words so
153:35 - here let's go spin box list and here we
153:39 - can just create a python list I'm just
153:41 - going to call it stuff because you know
153:42 - I have no imagination and let's go John
153:46 - and April and Bob and Mary so in order
153:51 - to use these we just use a values tag
153:53 - and set that equal to our stuff right
153:56 - one thing to note when you add a value
153:58 - it will override your from and two so we
154:00 - can leave that on there it'll just
154:01 - override it so here let's go ahead and
154:03 - save this and run it and when we do we
154:05 - click this now it says John April Bob
154:08 - and Mary so one thing you'll notice like
154:10 - I said it's blank when it starts and
154:12 - also the text seems to be highlighted
154:14 - what's up with that well with spin boxes
154:16 - you can delete the thing that's in there
154:17 - and add your own thing right you just
154:20 - type it in so now it's John April Bob
154:22 - Mary and Tim all right so that's one
154:25 - sort of weird thing about spin boxes
154:27 - personally I've never found a use for
154:28 - that but I don't know maybe you would
154:31 - find some sort of use for that but we
154:34 - can disable that if we want by setting
154:36 - the state of the spin box so let's come
154:38 - down here and set a state of and let's
154:41 - set this to read only so now when we run
154:44 - this we won't be able to change it
154:45 - anymore by typing but also you'll notice
154:48 - it's not highlighted right so if I click
154:50 - on this and hit delete and try to type
154:52 - something in nothing happens right so
154:54 - that may be what you want as a default
154:57 - sort of thing I usually would use that
154:59 - for my spin boxes because I don't want
155:00 - people changing them at runtime so
155:02 - that's kind of interesting now what
155:04 - about this thing where when we run this
155:06 - it starts off being blank well maybe
155:08 - that's what you want maybe not you can
155:10 - set the value of this if you want head
155:12 - back over to our code and let's set the
155:15 - value
155:17 - let's say set spin box default
155:22 - and we're actually going to need to do
155:23 - this underneath the spin box because we
155:25 - can't set a default before we've created
155:27 - a spin box so here we just call my
155:29 - underscore Spin and we can not set this
155:31 - guy and you can set this to anything you
155:33 - want so I'm going to set this to John by
155:35 - default so that's the first item in our
155:36 - list so that's what I want to set it as
155:38 - by default so now when we come back over
155:41 - here and run this guy
155:42 - boom right off the bat John is listed
155:45 - and we can cycle back up all the way
155:46 - through it spin up spin down all the
155:49 - good things very cool so okay that's
155:51 - cool but how do we decide if something
155:53 - has been selected
155:54 - and by selected I mean it's the thing
155:57 - showing in the spin box right now so for
155:59 - instance April how do we get April out
156:01 - of here somebody has spun up to April
156:03 - well we can dot get our thing so there's
156:06 - a couple of different ways to do this
156:07 - let's create a button and it's just
156:10 - going to be my underscore button
156:12 - and it's going to be TB dot button
156:15 - we want to put it in root we want the
156:17 - text
156:18 - to equal click me and we want the boot
156:21 - style to be that same success green and
156:25 - then let's minor square button dot pack
156:28 - this guy
156:29 - give it pad y 20 push down screen a
156:31 - little bit now here we want to give this
156:32 - also a command and I'm going to call
156:35 - this spinny
156:36 - right
156:37 - and so now we can come up here to the
156:40 - top and create this function so let's
156:42 - define spinny
156:45 - and here we can do something but first
156:47 - let's come down here and let's create a
156:49 - label
156:51 - so this is going to be my underscore
156:52 - label
156:53 - it's going to be a TV DOT label
156:56 - we want to put it in root we want the
156:58 - text to equal nothing right off the bat
157:00 - and let's give this a font of
157:03 - alvetica and like a size 18 so it's
157:06 - bigger so that we can read it and then
157:07 - let's my underscore label dot pack this
157:10 - guy give him a pad y of 20 push down the
157:12 - screen so now what we want to happen is
157:14 - when we click this button we want to
157:16 - change the text of this label to
157:17 - whatever is in the spin box well to do
157:19 - that we just come up here to our
157:20 - function and we might underscore label
157:23 - dot config this guy
157:26 - and we can set the text equal to my
157:28 - underscore spin
157:30 - dot get
157:32 - and many things in Canter you can dot
157:34 - get them and same thing with spinbox so
157:36 - that's cool you can also set a string
157:39 - VAR to your spin box and get that but I
157:42 - find that sort of useless it's just an
157:44 - extra step so what I'll do is I'll just
157:46 - myspin.get whatever the spin box is so
157:49 - let's go back here run this guy one more
157:50 - time and here if we click me for John
157:52 - boom it says John there if we spin it up
157:55 - to Bob and click it boom it says Bob if
157:58 - we hit Mary boom Mary
158:00 - and not to leave out April boom April so
158:03 - that's how you can use a button and our
158:05 - button is blue it's interesting I
158:08 - thought we put that as
158:10 - success oh I misspelled success boom
158:13 - there we go so that works for the button
158:15 - but what if you don't want to use a
158:16 - button what if you just want to use the
158:18 - spin box itself well you can give your
158:20 - spin box a command so let's put this on
158:22 - another line and we can just call our
158:24 - spinny function same exact function or
158:26 - you can use a different function really
158:27 - doesn't matter so now when we run this
158:30 - guy hopefully our button is green yes it
158:32 - is instead of clicking the button if I
158:35 - just spin this up to April boom it says
158:37 - April when I click this thing again boom
158:39 - Bob so it's the actual little spin box
158:42 - toggle things that determine
158:45 - when the function gets called when that
158:47 - command runs right
158:49 - and there we go so that's spinbox pretty
158:51 - easy pretty straightforward not a whole
158:52 - lot of bells and whistles here
158:54 - personally I don't really use the spin
158:55 - box all that much but it certainly has a
158:57 - place in some apps and if you need it
158:59 - that's how you use it piece cake
159:05 - okay in this video like I said we're
159:06 - gonna look at the tree view for ttk
159:09 - bootstrap and I'm not going to get into
159:10 - the tree view in great detail I've got
159:12 - other videos on that I'm going to take
159:14 - some of my older videos that I did on
159:16 - the tree View and uh put them into one
159:18 - big video and I'll post that in a few
159:19 - days so if you want to get into a deep
159:21 - dive on the tree view you could look at
159:22 - that but for now I'm just going to show
159:24 - you how to make a basic Tree View how to
159:26 - do the ttk bootstrap styling and stuff
159:28 - that you would expect for this thing and
159:31 - that's what we're going to look at in
159:32 - this video so here we've got a tree View
159:33 - and you can see it's just this box thing
159:35 - with rows and columns and we got first
159:37 - name last name email address I just kept
159:39 - it very simple we got some dummy data
159:40 - first name one last name one email one
159:43 - Etc so that's what we're gonna look at
159:45 - in this video so we've got a file I'm
159:46 - calling it tree underscore review.pi
159:48 - it's our basic interest order code we've
159:50 - imported ttk bootstrap as TB as always
159:53 - we pip installed that long ago we're
159:55 - using the superhero theme and that's
159:57 - pretty much all there is to it so let's
159:59 - go ahead and just Define The Columns
160:01 - that we want in our tree View and I'm
160:03 - just going to call this columns and this
160:05 - is just going to be a little Tuple here
160:07 - and we want first underscore name
160:10 - then we want last underscore name and
160:13 - then let's just go email
160:15 - so very simple all there is to it so now
160:18 - let's create a simple tree view so I'm
160:19 - going to call this minor Square tree
160:21 - and it's going to be TB dot Tree View
160:23 - and it's TB dot because up here we
160:26 - imported ttk bootstrap as TB and here we
160:29 - just want to put this in root and we
160:31 - want to select a boot style and these
160:33 - are the same boost style colors that
160:34 - we've used for all the ttk bootstrap
160:36 - widgets right so you have primary
160:38 - secondary success info warning danger
160:41 - light dark all the things so I'm just
160:43 - gonna go success so that's that green
160:45 - color
160:46 - and then we want to set the columns to
160:49 - whatever our columns are going to be
160:50 - well right here we defined our columns
160:52 - as columns so we're going to set columns
160:54 - equal to columns and here let me put
160:56 - this on another line we want to show and
160:59 - we want to show the headings
161:01 - now this will show you know the headings
161:04 - at the top of each column which we
161:05 - haven't actually defined yet but that'll
161:07 - do that so okay that looks good so now
161:09 - we're we want to show these headings we
161:11 - have to define the headings right so
161:13 - let's go my underscore tree dot heading
161:16 - and then here we just designate each
161:19 - column so the first one is first
161:21 - underscore name that's this thing right
161:24 - here but then we put a comma and then
161:26 - the text for that heading is going to be
161:29 - what let's go first name so you notice
161:32 - this is more like a variable name and
161:35 - this is more like the text that's going
161:36 - to show on the tree view so you know
161:38 - it's capitalized got a space in there
161:40 - looks nicer right so let me just copy
161:42 - this and we'll do this a couple more
161:44 - times so we have first name we also have
161:46 - last name
161:48 - and here I'll change this to last name
161:50 - and then this one will be email
161:53 - and I'll switch the text for this to
161:56 - email address make it look nice and
161:58 - pretty okay so that looks good so now
162:00 - let's create some sample data right now
162:03 - normally you would have real data but
162:04 - you know we don't have any real data
162:06 - this is just a tutorial so I'm going to
162:07 - go ahead and create some so let's create
162:09 - a python list that's empty and now let's
162:12 - fill it with some fake data so let's go
162:14 - four in in range of 1 through 20. so
162:18 - we're gonna have 20 rows right and then
162:20 - for each row we want contacts dot append
162:24 - and it's
162:25 - contacts.append because well let's
162:29 - change this to contacts all right so
162:31 - we're going to append into this empty
162:34 - python list what do we want to append
162:36 - well let's create a list here so let's
162:39 - choose F strings and
162:41 - for each one I'm going to say the first
162:43 - name and then just
162:45 - pass in a number
162:48 - so that'll be n that's this guy right
162:49 - here so for each one of these so the
162:52 - first time we Loop through this the N
162:53 - will be one the second time we Loop
162:55 - through this the N will be two three
162:56 - four five every time we live through
162:58 - here this n will change so this will
163:00 - allow the data that shows up on the tree
163:02 - view to be first one first two first
163:04 - three for each row right so all right
163:07 - that looks good for that now we also
163:09 - need to do the same thing for last
163:13 - so let's go last in and we also need to
163:16 - do the same thing for email so let's go
163:18 - email
163:21 - and at
163:23 - address.com right
163:25 - all right so just some basic dummy data
163:27 - we'll cycle through and do 20 rows of
163:29 - that so now all of this fake data has
163:32 - been appended to this python list now we
163:34 - just need to put that list on our tree
163:36 - view right so we can do that right here
163:38 - and let's do another loop let's go for
163:40 - contact in contacts
163:42 - right and it's contacts because that's
163:45 - the name of our list here
163:46 - contact singular because we just make
163:49 - that one up that's how loops work and
163:51 - then let's go my underscore tree dot
163:53 - insert
163:55 - and we want to put this at the zeroth
163:57 - spot so from zero to end and then what
164:00 - value do we want
164:01 - well whatever that contact is
164:04 - okay
164:05 - so all right that's really kind of all
164:07 - there is to it let's go ahead and save
164:08 - this and run it let's head over to our
164:10 - terminal and then my cetkinter.com
164:11 - directory and let's run python tree
164:14 - underscore view dot pi and you know what
164:16 - we forgot to pack our tree view onto the
164:18 - screen why didn't you remind me so let's
164:21 - see where we created our tree view right
164:22 - here we obviously need two minor Square
164:24 - tree that pack this guy let's give this
164:27 - a pad y 20 push down screen a little bit
164:29 - so all right that should work now head
164:31 - back over to our terminal run this guy
164:32 - again and there we go and that's all
164:35 - there is to it right so we've got first
164:37 - one first two first three we can use our
164:39 - Mouse little scroll button to scroll
164:41 - down this guy and there we go so here we
164:44 - have our columns first name last name
164:46 - email and everything looks great now
164:48 - this whole thing is green because that's
164:50 - the Boost style we selected right so we
164:52 - could go danger right save this run it
164:55 - and now we've got the nice red horribly
164:58 - ugly right tribute so that's really all
165:01 - there is to it now like I said we're not
165:02 - going to dive deep into how to use tree
165:04 - views because with ttk bootstrap you
165:06 - just use your tree view like you would
165:08 - in a regular kinter widget right just
165:10 - use all the same attributes that the
165:12 - regular Kinder widget treeview has and
165:15 - uh you're good to go so there's nothing
165:16 - specific to ttk bootstrap that you need
165:19 - to change except adding a boot style to
165:21 - change the color basically right and
165:23 - like I said I'll put I'll try and put
165:25 - together a deep dive of the tree view
165:26 - because it's really interesting I could
165:28 - do 40 or 50 videos on it alone there's
165:30 - all kinds of cool stuff you could do
165:31 - with it in fact I have in past videos on
165:33 - my other codemy.com channel so I'll put
165:35 - together a bunch of those videos and one
165:37 - big video uploaded to this channel
165:38 - sometime in the next few days or so if
165:40 - you're interested in doing a deep dive
165:42 - on the tree view then of course if you
165:44 - wanted to make it into a ttk bootstrap
165:46 - preview you just do what we did in this
165:49 - video to use a ttk bootstrap preview
165:56 - in this video we're going to look at
165:57 - message boxes for ttk bootstrap so we
166:01 - click this button boom a little box pops
166:03 - up it's got a little message a little
166:05 - title a little icon we can click yes or
166:07 - no if we click no hey you click no if we
166:09 - try it again and click yes hey you click
166:11 - yes now there are a bunch of these
166:12 - different dialog boxes that you can use
166:14 - you can ask questions you can show
166:16 - warnings you can give info all that
166:18 - stuff we're gonna look at all of that in
166:19 - this video so I've got our basic starter
166:21 - code that we've always got we're using
166:23 - the superhero theme we've imported ttk
166:25 - bootstrap as TB we pimp installed that
166:27 - many videos ago and the first thing we
166:29 - need to do here is import something so
166:31 - let's go from ttk bootstrap dot
166:34 - dialogues so this is basically a dialog
166:37 - box right so we want to import message
166:39 - box now there are other things you can
166:42 - import like message dialogue
166:45 - we don't need that for this video but
166:46 - it's a similar sort of pop-up box and
166:48 - maybe we'll talk about that in another
166:49 - video so okay now the next thing you're
166:52 - going to notice is this root icon bitmap
166:54 - now this is the little icon that shows
166:56 - up when we run this file so if we say
166:58 - this I'm calling this Mbox dot Pi head
167:01 - over to our terminal I'm in my
167:02 - ctcinter.com directory and let's run
167:04 - python Mbox dot Pi that icon is this
167:07 - little icon right up here we've
167:09 - designated that's the icon right so when
167:12 - we have a message box pop up it will
167:14 - have its own icon but it'll just show
167:16 - the default ttk bootstrap icon unless
167:19 - you make a little bit of a change right
167:20 - here so we need to copy this line and
167:23 - let me say uh message box icon here and
167:27 - it's the same exact code we just studied
167:29 - a default equal to this right now you
167:33 - might think hey do we need this line
167:35 - anymore yeah we do we can comment this
167:37 - out and if we run this again we're going
167:39 - to get no icon basically here just the
167:41 - default thing right so we have to keep
167:43 - both of these lines it's really kind of
167:44 - weird I I have no idea why that's the
167:46 - case uh but let's say right here main
167:50 - app icon and then here we've got the
167:52 - message box icon so okay that's good so
167:55 - now let's build out this app so let's
167:57 - create a button I'm just going to call
167:58 - it my button it's going to be a TB dot
168:00 - button
168:01 - we're going to put it in root we want
168:02 - the text to say click me
168:05 - and let's give this a boot style
168:08 - of I don't know danger to make it red
168:11 - and a command of
168:13 - I don't know clicker all right so so
168:15 - every time this button gets pressed we
168:18 - want to run the function clicker so we
168:19 - don't have that yet we'll create that in
168:21 - just a second but for now it's my
168:22 - underscore button dot pack put this guy
168:25 - on the screen let's give this a pad y of
168:26 - 40 to really push it down the screen so
168:28 - there's our button and here we need to
168:30 - Define our clicker function here and
168:33 - we'll do that in just a second now I
168:35 - also want to create a quick little label
168:37 - so I'm going to call this Miner score
168:38 - label this is going to be a TB dot label
168:40 - we want to put it in root we want the
168:42 - text to equal nothing for now and let's
168:45 - give this a font of I don't know like
168:48 - helvetica size 18 just to make it bigger
168:51 - so that we can read it easier and then
168:53 - let's minor Square label
168:56 - dot pack and I don't know give this a
168:58 - pad YF 20 push it down the screen a
168:59 - little bit probably don't need to do
169:01 - that but okay so now we've got this
169:02 - function called clicker and every time
169:06 - you press this button we call this
169:07 - function so what do we want to do well
169:09 - let's
169:10 - create
169:11 - a dialogue
169:13 - so I'm going to call this MD short for
169:15 - message dialog or MB short for message
169:17 - box whatever it doesn't really matter at
169:19 - all and this is going to be a message
169:21 - box now here we have to designate what
169:25 - type of message box we want so uh let's
169:27 - go yes no there's like I don't know
169:29 - eight or nine of these will go over all
169:31 - of them in a second but for now we'll
169:33 - just do yes no and let's create a list
169:35 - of these so let's go yes no and I'll add
169:39 - these as we go through them all so here
169:41 - we could say uh display
169:44 - some message here this is going to be
169:47 - the message that pops up in the middle
169:48 - of the box so whatever you want to
169:50 - display in your message box type it in
169:52 - there and then here
169:55 - is the title so this will go on the
169:57 - title bar up at the top right so okay
170:00 - that looks good now for now let's just
170:02 - run this and see what we have so let's
170:03 - save this head back over to our code run
170:06 - this guy again so here we've got this
170:08 - thing we click it boom it says display
170:10 - some message here here's the title
170:12 - you'll notice there's our little icon up
170:15 - there and we have a yes or no well if we
170:17 - click no what happens well we don't know
170:19 - yet so what does happen well let's come
170:22 - down here and uh display button click
170:27 - right so let's go my underscore label
170:29 - dot config
170:32 - and we want to set the text equal to
170:35 - and I'm just going to create an F string
170:37 - and then I'm going to say you clicked
170:41 - and then inside of here we're just going
170:42 - to go MB so whatever you clicked here
170:44 - will get assigned to this variable and
170:46 - it will output right there so let's go
170:48 - ahead and save this head back over here
170:49 - run this guy again so we click me so now
170:53 - when we click yes it says you click yes
170:55 - when you click no it says you click no
170:57 - right so basically if you click yeah no
171:01 - it's returning the word n o capital n o
171:05 - now this is just a string now you can do
171:06 - stuff based on that right so you could
171:09 - do an if statement right so let's go if
171:11 - MB equals no
171:15 - then you know we could print no or
171:19 - whatever you wanted to do else you would
171:22 - you know print
171:23 - yes like whatever you wanted to do you
171:26 - could do
171:28 - right there right so let me just comment
171:31 - all this out because it's kind of silly
171:33 - but this is just an example of how you
171:35 - can do stuff logically based on what the
171:38 - person selects right now each of these
171:40 - things we're going to talk about yes no
171:42 - is the first one there's lots of
171:43 - different message boxes each one returns
171:45 - a different thing so you have to know
171:47 - what it returns in order to do your if
171:49 - else logic correctly and we'll see that
171:52 - in just a second so all right but for
171:54 - now I'm just going to
171:56 - let's copy this
171:58 - and just
172:01 - we'll just print out you clicked
172:03 - whatever just to see what each of these
172:05 - things do so okay the first one was yes
172:06 - no we looked at that one the next one is
172:09 - okay right so we'll just type in message
172:12 - box dot okay if we save this guy and run
172:14 - it and click here now it says the button
172:17 - is just okay if we click this it says
172:20 - you click none now this actually Returns
172:22 - the word none right so it's a string
172:25 - it's just none you would dig your logic
172:27 - if you know MB equals none do this else
172:31 - do something else right so okay that's
172:34 - kind of interesting I guess the next one
172:37 - is okay cancel
172:40 - so let's come down here and okay cancel
172:42 - you'll never guess what this one does
172:44 - right maybe you will guess it does okay
172:48 - or cancel right so if you click OK it
172:51 - says you clicked OK if you click cancel
172:53 - it says you click cancel right so it's
172:56 - returning okay or cancel all right so
172:58 - that's okay cancel
173:00 - now obviously whatever you want to do in
173:03 - your app that's going to determine which
173:05 - of these you use right if you want to
173:07 - give the user the ability to cancel or
173:09 - click OK you would use OK cancel if you
173:12 - want them to answer a question yes or no
173:14 - you would use yes or no right if you
173:16 - just want to give them a message and
173:18 - have them close it you might just use
173:19 - okay right it just determines it just
173:21 - depends on what you're trying to do in
173:23 - your app right so okay the next one is
173:25 - show info
173:28 - so actually this is show underscore info
173:32 - in regular kinter it's show info without
173:34 - an underscore and in ttk bootstrap for
173:37 - some reason it's show underscore info
173:39 - I'm not sure what's going on there but
173:40 - that's what it is
173:42 - so again we can come up here and here it
173:45 - says displace the message here but it
173:46 - has this little icon this little info
173:48 - right you're showing info this is the
173:50 - little info icon right and if you click
173:52 - OK it returns none so okay maybe you
173:54 - want the little icon info icon to pop up
173:57 - if so you would use show info right we
174:00 - also have show error
174:02 - all right so this one's actually kind of
174:04 - interesting right uh because if you know
174:07 - if you're doing error handling in your
174:09 - app and you want to show an error that's
174:10 - popped up you would probably want to use
174:12 - this and this is nice because
174:15 - I don't know if you could hear that or
174:16 - not it made a little ding it went dating
174:18 - a little warning Ding and it also has
174:20 - this big red X like warning right so
174:23 - that's interesting if we click OK it
174:26 - returns again none so all right that's
174:28 - cool
174:29 - so okay that's cool let's show error and
174:32 - we also have show underscore question
174:35 - so we can change this one
174:38 - to show underscore question
174:40 - save this guy go to the screen it's
174:42 - getting unruly run this guy again and
174:45 - here we get this little question mark
174:47 - and we get yes or no now if we click yes
174:49 - here it says yes if we click no it says
174:52 - no again you'll hear you'll hear maybe
174:54 - you'll pick it up on the microphone
174:57 - a little Ding and ding right so that's
175:00 - what that does so all right that's cool
175:03 - oh that was interesting let's run that
175:05 - again
175:06 - I probably should have mentioned that if
175:08 - you click yes it returns yes if you
175:10 - return click no it returns no if you
175:12 - come up here and click the little X it
175:14 - does none so keep that in mind that's
175:16 - the case for all of them as well so okay
175:19 - that's cool I'll start another line here
175:21 - and the next one is show underscore
175:24 - warning
175:25 - show underscore warning is very similar
175:27 - to show underscore error so let's run
175:29 - show underscore warning
175:32 - save this guy
175:34 - run them again
175:37 - but instead of a big red X you get this
175:39 - sort of uh warning like uh for like uh
175:43 - almost like a traffic sign but with an
175:45 - exclamation mark and when we click OK
175:47 - it's none I'm gonna click the X here it
175:50 - also returns none so all right so we've
175:53 - got one two three four five six seven I
175:56 - feel like there's one or two more so
175:58 - what about what else do we have so we
176:00 - did yes no we also have yes no cancel
176:04 - so this is very much like yes no yes no
176:08 - cancel
176:09 - but instead of two buttons you have
176:11 - three buttons which is kind of
176:12 - interesting
176:14 - so if we run this guy we get yes no and
176:17 - cancel if we click yes you click yes we
176:20 - click no you click no if we click cancel
176:23 - we get cancel and again if we click the
176:25 - X we get none so all right that's
176:27 - interesting finally one more we have
176:29 - retry and cancel
176:33 - all right so this is kind of interesting
176:35 - we have retry cancel
176:38 - and I'm guessing you could probably
176:40 - guess what this one's gonna do all right
176:42 - it's not rocket science here we have
176:44 - retry and cancel and if we click retry
176:47 - it Returns the word retry and if we
176:49 - click cancel it Returns the word cancel
176:50 - so that's pretty much it
176:53 - and none if you click the little X in
176:55 - the top so those are message boxes very
176:57 - very useful very cool very easy to do
176:59 - and uh it's kind of all there is to it
177:01 - if you want to learn more about these
177:02 - you can go to let's see
177:05 - ttkbootstrap.readthedocs.io and click on
177:07 - API and then come down here to message
177:10 - box and it has each of them listed here
177:13 - so here's the okay one here's the okay
177:16 - cancel one and it has all the different
177:17 - little attributes you can play around
177:19 - with right whether the ring whether to
177:21 - ring the bell or not the title The
177:23 - Message we've already did those two so
177:25 - you can come through here and read all
177:26 - these if you're interested but we pretty
177:28 - much hit the main points and that's all
177:30 - there is to it
177:34 - in this video we're going to look at the
177:36 - color Chooser for ttk bootstrap and
177:38 - that's this guy right here you can see
177:40 - oh it's very neat looking and if you can
177:42 - click on this boom it'll pick a color
177:45 - give you all the data we can click OK
177:47 - and now we're going to change our color
177:48 - to that color let's change it to Blue
177:51 - whatever it doesn't matter what you do
177:53 - with the color that you choose that's
177:54 - kind of irrelevant but I'll show you how
177:56 - to get the actual information you can
177:57 - see the RGB value and the hex code and
178:00 - all that good stuff so that's we're
178:02 - going to look at in this video so I've
178:03 - got a file I'm just calling it CC dot Pi
178:05 - short for color Chooser I guess dot Pi
178:08 - answer basic interest art code that
178:10 - we've been using we've imported ttk
178:11 - bootstrap as TB we've installed that
178:13 - many videos ago and we're using the
178:15 - superhero theme so let's come down here
178:17 - and I'm just going to create a quick
178:18 - button real quick I'm going to call it
178:19 - my underscore button and it's going to
178:21 - be a TV DOT button we want to put it in
178:23 - root we want the text to say click me
178:25 - all right uh let's give it a boot style
178:29 - of danger to make it red just for fun
178:32 - and let's give it a command of of CC
178:36 - short for colored Chooser I guess right
178:38 - and we don't have this function yet
178:39 - we'll create it in just a second so
178:41 - that's my underscore button and Dot pack
178:43 - this guy put it on the screen and let's
178:45 - give this a pad y of like 40 to really
178:48 - push it down the screen now underneath
178:49 - this I want a label so I'm going to call
178:51 - this my underscore label just so that I
178:53 - can show you the output of the color
178:55 - Chooser what it returns so for now let's
178:57 - just create this as a TB dot label put
179:00 - it in root and give it a text of nothing
179:03 - for now and actually let's make this
179:06 - font bigger so it's easier to read so
179:08 - I'm going to make this helvetica and
179:11 - like a size 18. so okay let's go my
179:13 - underscore label yeah pack this guy and
179:16 - give it a pad why like 10 push down
179:17 - screen a little bit so okay now we've
179:19 - got all this set up let's define our CC
179:21 - function color Chooser and call it
179:24 - anything you want I'm just calling it CC
179:26 - so in order to use the color Chooser
179:28 - first we have to actually import it up
179:29 - here at the top of the screen so let's
179:31 - go from ttk bootstrap dot dial logs
179:35 - because technically this is a dialog box
179:37 - it's a little box that pops up right and
179:40 - then dot color chooser
179:43 - we want to import color Chooser dialog
179:48 - and you'll notice the capitalization the
179:50 - C is capitalized this C is capitalized
179:53 - and this D is capitalized so color
179:54 - Chooser dialog and now that will allow
179:56 - us to use it now it's kind of weird
179:57 - since we're kind of importing everything
179:59 - from ttk bootstrap why do we have to
180:02 - import these dialogues separately I
180:04 - don't know you just have to right that's
180:06 - how that works and so let's create a
180:09 - color Chooser so I'm going to call it my
180:10 - underscore color call it anything you
180:12 - want and this is going to be a color
180:14 - Chooser dialog all right now in order to
180:18 - show this onto the screen have it pop up
180:20 - we call my underscore color dot show all
180:23 - right and that will show it so strictly
180:25 - speaking this will work but it won't
180:26 - really do anything after you know we run
180:29 - it so let's save it and run just to make
180:31 - sure this is working headed back over to
180:32 - our terminal I'm in my cetkinter.com
180:34 - directory and let's run python cc.5 when
180:38 - we do we get this thing oh it says
180:40 - message box we have to change the title
180:42 - we could click this hey it pops up
180:44 - that's great but if we click on one of
180:46 - these colors and click OK nothing
180:48 - happens it's not actually returning
180:49 - anything so how do we get it to actually
180:51 - return something well first let's come
180:53 - up here and change this to color or
180:55 - Chooser for the title right and let's
180:58 - come down here and to capture what it
181:00 - returns we can create a variable or we
181:03 - could just call a function so let me
181:05 - comment this create color chooser
181:09 - and then Show color chooser
181:13 - and then here let's say return color
181:15 - Chooser info
181:18 - all right so how do we do that well
181:19 - let's just create a variable call it
181:22 - colors and we're going to set this equal
181:24 - to my underscore color which is our
181:26 - color Chooser what we defined right here
181:28 - and then dot result
181:30 - now this will return three things and
181:33 - I'll show you what those three things
181:34 - are in just a second but for now let's
181:37 - output
181:38 - to the label so remember we have this
181:41 - label called my underscore label so
181:43 - let's dot config this guy and set the
181:45 - text equal to Colors whatever is
181:47 - returned here right so let's go ahead
181:49 - and save this and run see what we got
181:51 - here so we click this and let's pick a
181:54 - nice screen now you'll notice it returns
181:56 - Hue saturation and Luminosity hsl it
181:59 - also returns red green blue RGB right
182:02 - you've probably heard of RGB and color
182:04 - things in the past that stands for red
182:06 - green blue it also Returns the hex code
182:08 - now this hex code is useful this is
182:10 - really what you want the hex code
182:12 - because anytime you're using colors you
182:14 - want the hex code right if you want to
182:15 - change a color use the hex code I mean
182:18 - you could use these things too but
182:19 - they're not commonly used for that but
182:21 - just for now let's just click OK and see
182:23 - what it returns and you'll notice it
182:25 - returns a string of numbers now that's
182:27 - not that useful let's come up here and
182:29 - pick the most top rightest color and
182:31 - that's Hue of 0 150 red of 255 green of
182:36 - 0 0 and uh this hex color code so now
182:40 - when we click this you can see it
182:41 - returns these three things and if we run
182:43 - this again
182:45 - and click on this again and you can see
182:47 - the RGB is the first one so 255 0 and 0.
182:51 - that's this column right here 255 0 and
182:53 - 0. then we have hsl 0 150 0 150 and
182:58 - finally we have the hex color code
183:00 - ff000 ff0 so that's cool but how do we
183:05 - get each of these individual things it's
183:07 - returning three of them how do we get
183:09 - each individual one well super easy
183:11 - there's a little function you can call
183:13 - but instead of calling colors you can
183:15 - call the thing you want so say for
183:17 - instance dot hex so here let's go dot
183:21 - hex
183:22 - Dot hsl and Dot RGB so here if we just
183:26 - want the dot hex we can do that save
183:28 - this run it here let's click click the
183:31 - red again and boom it's just returning
183:34 - that hex right so if we wanted the RGB
183:36 - instead of dot hex we would call Dot RGB
183:39 - all right so if we save this and run it
183:42 - I know very exciting if we click this
183:45 - pick this color again it's just
183:47 - returning to 255 0 and 0. same for hsl
183:50 - we could just go you know hsl
183:54 - and that will return the hsl so I like
183:57 - the hex you're almost always going to
183:58 - use the hex so that's what we want to
184:01 - return now let's change the background
184:04 - color of our app to chosen color right
184:08 - so let's just be goofy and play around
184:10 - with this we could just root dot
184:12 - configure and set the background to
184:16 - you know whatever we want so colors dot
184:19 - hex whatever we're returning here so
184:21 - let's go and save this and run it this
184:23 - is kind of a goofy example of why you
184:25 - might want to use this but I don't know
184:27 - you could do it like this and let's
184:29 - change this to this pink whoa there we
184:33 - go our background is now pink we could
184:35 - do orange
184:37 - that's orange we could do blue and you
184:39 - could do this for anything right any
184:40 - widget you could change the color so if
184:42 - you wanted to change the color of your
184:43 - button you'd do the same thing right
184:45 - just configure your button set the
184:47 - background color to you know that hex
184:49 - color code right there
184:51 - and that's all there is to it so kind of
184:53 - a goofy example but you know I don't
184:55 - know there's lots of different things
184:57 - you would use this for and I can't go
184:59 - over all of those examples there's
185:00 - thousands of them so there's just one
185:02 - little simple example on how to use it
185:04 - the main thing you really want is just
185:06 - to understand to get the color code out
185:08 - of here you're going to call your
185:10 - colors.x now we went colors.x you could
185:13 - just as easily instead of creating this
185:16 - variable right here you could just go
185:18 - you know uh let's see it's come in here
185:21 - and go
185:23 - mycolors.result dot hex
185:25 - right if you wanted to just string along
185:27 - an object oriented sort of thing with
185:30 - this which is our color Chooser right we
185:32 - called it my color and it returns a
185:34 - result and that result can be a hex or
185:37 - an hsl or an RGB right so really either
185:42 - way that works but I find it cleaner and
185:45 - easier just to create a variable right
185:47 - here add this in here and then just call
185:49 - colors.x to get the hex code
185:56 - all right this is gonna be a very short
185:57 - video but a very cool video and that's
186:00 - because we're gonna look at the scrolled
186:02 - text widget and that is just what it
186:04 - sounds like a text widget that is built
186:06 - in with a scroll bar look at that
186:08 - right so in the past we had to create an
186:12 - actual scroll bar widget and add it to a
186:14 - text box or add it to a frame or add it
186:16 - to whatever in ttk bootstrap there's
186:18 - actually a widget built into it that has
186:21 - a scroll bar right there and you could
186:24 - do a couple cool things with it you
186:25 - could hide it you could show it you
186:27 - could have it you hover your mouse over
186:28 - it appears or doesn't appear very cool
186:31 - and very easy to use that's what we're
186:34 - going to look at in this video now I
186:36 - don't know 10 videos ago or so I did a
186:38 - video on scroll bars with ttk bootstrap
186:41 - and you could use scroll bars in the
186:42 - normal way that you would with Kinder or
186:45 - you can if you're using a text widget
186:47 - you can just use this little trick I'm
186:49 - about to show you right now so I've got
186:50 - a file I'm calling it scroll underscore
186:52 - text Dot pi and we've got our basic ttk
186:54 - bootstrap starter code that we always
186:55 - have I've imported gtk bootstrap as TB
186:58 - we're using the superhero theme and
187:00 - everything else is pretty much
187:01 - rudimentary so to use this we actually
187:04 - have to import it first so let's go from
187:06 - ttk bootstrap dot scrolled we want to
187:11 - import scrolled text now you'll notice
187:14 - the S and the T and scrolled text are
187:18 - both capitalize everything here is a
187:19 - lowercase so that's all we have to do we
187:21 - just have to import it now I know we
187:22 - imported pretty much everything here in
187:25 - ttk bootstrap as TB but we still have to
187:27 - for some reason import this guy as well
187:29 - so let's come down here and let's create
187:31 - a text box so text widget
187:34 - and I'm going to call this my underscore
187:35 - text and now normally this would be a TB
187:38 - dot you know text widget but not this
187:41 - time this time we're calling just
187:43 - straight up scrolled text and that's
187:46 - because we imported that right there
187:47 - right so we want to put this in root and
187:50 - now we can give this a height of let's
187:52 - say 20 and a width of like I don't know
187:54 - 110 and let's also give this a wrap of
187:58 - word this is basic text widget stuff we
188:01 - want our words to wrap completely we
188:03 - don't want to get to the end of the line
188:05 - in the text box and have a word get cut
188:07 - off mid word and have half the word on
188:10 - one line and the other half of the word
188:11 - on the other line below it we want to
188:13 - wrap the entire word down to the line
188:15 - below so there we go so really that's
188:18 - all we need so let's go underscore text
188:20 - Dot pack let's give this a pad why like
188:23 - I don't know 15 or so push down screen a
188:25 - little bit so let's head back over to
188:27 - our terminal and run this guy I mean my
188:29 - cetkinter.com directory and let's run
188:31 - python scroll underscore text fi and we
188:35 - have a typo because we of course need an
188:38 - equal to sign there okay so button equal
188:41 - to sign come back clear the screen run
188:43 - this guy again all right
188:45 - and there we go boom you'll notice it
188:48 - doesn't appear now but if we start to
188:49 - type and you know we gotta get to the
188:51 - end and keep going you can see over
188:53 - there on the right it's adding the
188:55 - little scroll bar thing and we can
188:57 - scroll up and down and it is fantastic
189:00 - and that's all there is to it so there's
189:03 - one thing I want to show you about this
189:04 - in addition we can also give this an
189:06 - auto hide of true now by default Auto
189:10 - Hide is set to false as we just saw when
189:13 - we ran it the scroll bar was there even
189:15 - though we didn't even need it until we
189:17 - started typing text and then it kind of
189:18 - you know popped up or whatever if we set
189:21 - Auto Hide to True head back over here
189:23 - run this guy
189:25 - you'll notice there is no scroll bar at
189:27 - all until I hover over and then it kind
189:29 - of appears same deal if we start to type
189:31 - a bunch of stuff
189:34 - you'll notice the scroll bar isn't
189:36 - automatically showing up it's been
189:37 - hidden it's Auto Hide It Auto hide it
189:40 - it's Auto auto hided and but if we move
189:44 - our Mouse over boom then it pops up and
189:46 - we can use it now some people might like
189:48 - that some people might not personally I
189:50 - I don't know I don't really care for
189:52 - that it seems a little confusing uh I
189:55 - want the scroll bar to just always be
189:57 - there so what I would do is leave that
189:58 - off or you could set this to Auto Hide
190:02 - equals false save this head back over
190:04 - here run this guy again and we're going
190:07 - to get just the default thing where the
190:09 - scroll bar is just already there always
190:11 - and as you kind of move down
190:15 - a little scrolly thing appears
190:18 - and uh very cool so what else can we do
190:21 - to this well we can use all of our boot
190:23 - Styles if we want
190:24 - boot
190:26 - Style
190:27 - and you've got all of the boot styles
190:29 - that we've been talking about throughout
190:30 - this series primary secondary info
190:32 - success danger light dark any other ones
190:36 - that I might have missed and I probably
190:38 - want to spell boot style right and this
190:42 - won't change the text box itself but it
190:44 - will change the scroll bar color so if
190:47 - we head back over here and run this guy
190:48 - again now our scroll bar is red because
190:51 - that's the danger color right
190:55 - very cool
190:59 - and very neat now if we head over to the
191:01 - ttk bootstrap documentation at
191:04 - ttkbootstrap.readocs.io and then click
191:07 - on API and let's see here if we scroll
191:10 - down here
191:12 - you can see there's a scrawled frame and
191:13 - a scrolled text if you click on scroll
191:15 - text you can see some code and some
191:18 - things here if you want to read more
191:20 - about this you can see you can add boot
191:21 - style you can also add padding you'll
191:23 - notice you can designate vertical or
191:25 - horizontal bars so you can have a v bar
191:27 - or an H bar the V bar is default we've
191:30 - just been looking at that but if you
191:31 - wanted to add an H Bar for a horizontal
191:34 - one you could do that let's head back
191:35 - over here and let's go H bar
191:38 - equals true and this just takes true or
191:40 - false it's Boolean so if we come back
191:42 - over here run this guy again
191:45 - see now we've got
191:47 - horizontal and vertical and if we scroll
191:49 - all the way over
191:52 - let's see now this one sort of appears
191:54 - and works very cool so that's the scroll
191:57 - text widget it's so much easier than
191:59 - creating a scroll bar and physically
192:01 - adding it to your text widget or to a
192:04 - frame or whatever very awesome very easy
192:07 - to use and that's all there is to it
192:12 - in this video we want to look at
192:14 - scrolled frames for ttk bootstrap and
192:17 - it's very similar to scrolled text boxes
192:18 - if you saw that video you're probably
192:21 - good to go on this you're going to pick
192:22 - this up almost immediately if not it's
192:24 - going to take like 30 seconds to explain
192:25 - this should be pretty easy so this is
192:27 - what we're going to build just a very
192:28 - simple app with a frame on it that has a
192:30 - scroll bar and I just threw some buttons
192:31 - in here just to have something inside of
192:33 - it and you can see
192:35 - it Scrolls all right so ttk bootstrap
192:38 - makes this incredibly easy in the past
192:40 - with regular Canter you had to create an
192:42 - actual scroll bar and kind of add it to
192:44 - a frame it was very sloppy very kind of
192:46 - hard to do with ttk bootstrap there's a
192:48 - widget that just comes with it and we
192:50 - could just use it and it's really easy
192:52 - so that's we're going to look at in this
192:53 - video so I've got a file here I'm
192:55 - calling it scrolled underscore frame dot
192:57 - pi and it's our basic ttk bootstrap
192:59 - starter code that we always have I've
193:01 - imported ttk bootstrap as TB we're using
193:04 - the superhero theme and everything else
193:05 - is pretty much normal as usual so really
193:08 - the only kind of weird thing is we have
193:09 - to import this scrolled frame in order
193:11 - to use it so let's go from TGK bootstrap
193:15 - dot scrolled we want to import scrolled
193:19 - frame and you'll notice the S and the F
193:22 - in frame are both capitalized but the
193:25 - scrolled in this is lowercase so that's
193:27 - really all we have to do so let's
193:29 - create a scrolled frame and I'm just
193:33 - going to call this my underscore frame
193:36 - and this is going to be a scrolled frame
193:39 - now normally we would go like TB dot
193:42 - scrolled frame something like that
193:45 - right with regular ttk bootstrap but
193:47 - since we're importing this as scrolled
193:50 - frame we just use scrolled frame right
193:51 - there so we want to put this in our root
193:53 - and just like the scrolled text box you
193:55 - can set the Auto Hide so I'm just going
193:58 - to put this to false it's false by
193:59 - default if you want to actually hide the
194:01 - little scroll bar until you hover over
194:03 - it we'll look at that in a minute you
194:04 - would put true there but otherwise we're
194:07 - good to go so uh you could also put a
194:09 - boot stop but I'm just going to leave it
194:10 - as the default for now we'll play with
194:11 - that in just a minute so let's go my
194:13 - underscore frame dot pack and let's give
194:16 - this a pad y of 15. and let's also give
194:19 - this a pad X of 15 and just for fun I
194:22 - want to expand this to basically the
194:24 - whole size of our app so let's just go
194:26 - fill equals both and expand
194:31 - equals yes
194:33 - so that will pretty much blow it up to
194:36 - the entire size of our app so in order
194:38 - to see this in action we need to put
194:39 - something in it so I'm going to create
194:41 - some buttons let's create some buttons
194:45 - and I'm just gonna do a quick for Loop
194:47 - here so let's go 4X and range and I'm
194:50 - going to put 20 of these buttons so
194:52 - we'll put 21 here
194:54 - and this is just going to be a TV DOT
194:55 - button we want to put it in my
194:57 - underscore frame and let's give this a
195:00 - boot style of what info something like
195:03 - that change the color to light blue for
195:05 - the buttons and let's have the text say
195:08 - and let's make this into an F string and
195:11 - let's just say I don't know click me
195:12 - something like that and let's just also
195:14 - put the count so we'll put X in there
195:16 - and then let's just pack this guy give
195:19 - it a pad y of like 10 to space these out
195:22 - a little bit so okay now normally I
195:24 - would never ever ever pack on the same
195:26 - line that we're creating the button but
195:29 - in this case since we're doing a for
195:31 - Loop it just sort of makes sense so
195:33 - let's go ahead and save this and run it
195:34 - see how this looks so let's head over to
195:36 - our terminal I'm in my ctcantor.com
195:38 - directory and let's run python
195:40 - scrolled underscore frame dot pi and
195:43 - when we do we see we've got a bunch of
195:45 - buttons from 0 to 20 and we've got this
195:48 - Frame and that looks good now this is
195:50 - sort of transparent it doesn't seem like
195:52 - there's anything there that's because we
195:54 - use the default boot style right so we
195:56 - could change the color of that if you
195:58 - want so let's do that real quick up here
195:59 - in our frame let's just give this a boot
196:02 - style
196:03 - of I don't know let's go dark so if we
196:06 - save this head back over here run it
196:08 - again
196:09 - now we get a slightly different colored
196:11 - frame
196:13 - that's all there is to it so you'll
196:14 - notice the scroll bar right here that
196:16 - I'm dragging and dropping that is there
196:18 - by default because
196:20 - we set the autohide to false if we set
196:22 - that to true we could come back over
196:25 - here run this guy again and now the
196:28 - scroll bar is gone unless we hover over
196:30 - it and boom there it is and if we scroll
196:31 - down and then scroll our Mouse away
196:33 - again it disappears again so maybe you
196:36 - like that maybe you don't I'm not a huge
196:37 - fan of that but uh you know whatever and
196:41 - like I said we could change the boot
196:42 - style to anything we want if we wanted
196:44 - to change this to Danger this is going
196:45 - to look god-awful but we could change
196:47 - the whole frame to red
196:49 - and then the scroll bar is also red it
196:52 - has little red arrows and things and I
196:54 - don't like that one bit let's just go
196:56 - ahead and change that back to dark and
196:58 - I'm also going to change this back to
197:00 - false for the Auto Hide so that is
197:02 - really all there is to it let's go ahead
197:04 - and save this or you know what let's
197:06 - change this to light
197:08 - I don't know just playing around right
197:10 - now run this again Ah that's not great
197:12 - looking but whatever
197:15 - so that's really all there is to it much
197:16 - easier than the old kinter way of having
197:18 - to actually create a scroll bar adding
197:21 - it in setting the configuration stuff it
197:24 - was just a hassle ttk bootstrap makes
197:26 - this so much easier so you have your
197:28 - scrolled frame or your scrolled text box
197:30 - like we did in the last video it's
197:31 - basically the same thing but instead of
197:33 - a frame it's a text box so you can type
197:35 - words and stuff in it and very very
197:37 - useful and very cool
197:42 - in this video we're going to look at
197:44 - toast messages what are toast messages
197:46 - well if you look down there
197:48 - but um there it is right there sort of
197:51 - the bottom of the screen Fades away we
197:52 - can click it again a it pops back up
197:54 - little message little icon next to it
197:56 - little Windows thing and that's what
197:58 - we're going to look at so I've got some
198:00 - basic hinter starter code that we always
198:01 - have I'm calling it toasty.pi because
198:03 - we're doing toast messages and we're
198:05 - importing ttk bootstrap as TB we're
198:08 - using the superhero theme as we always
198:09 - do in these videos and everything else
198:11 - is pretty much the same so in order to
198:13 - use these we actually have to import
198:15 - these this is a little extra thing in
198:16 - ttk bootstrap so we can do that pretty
198:18 - easily let's just go from ttk bootstrap
198:21 - dot toast
198:23 - we want to import toast notification
198:26 - and notice the T and the N are
198:29 - capitalized that's kind of important so
198:31 - let's come down here and let's create
198:32 - one of these things I'm just going to
198:33 - call it toast and this is going to be a
198:35 - toast notification again capital T
198:39 - capital n and then inside of here we can
198:41 - give this a title so I'm going to say my
198:44 - toast title whatever and there's a bunch
198:48 - of different attributes we can play with
198:49 - after title obviously we want a message
198:51 - and we could say this is a toast message
198:58 - all right
199:00 - there we go and then we can also set a
199:03 - duration if we want so this is in
199:05 - milliseconds so if I want three seconds
199:07 - that would be three thousand
199:08 - milliseconds right there we go and we
199:11 - could also give this an alert this can
199:13 - be either true or false I'm going to do
199:14 - true and this will just give a little
199:16 - ding a little like system Bell whenever
199:19 - the alert pops up you may want that you
199:21 - may not I'll put it on there I don't
199:22 - even know if you can hear it with the
199:23 - microphone set up here but you know what
199:25 - a normal Windows system ding is you know
199:28 - goes ding you know just it'll do that so
199:31 - we'll put that as true and then finally
199:32 - you could put a position and this is
199:34 - going to be a tuple and it takes three
199:36 - things horizontal vertical and anchor so
199:39 - if you don't put a position at all if
199:41 - you leave this completely off it'll just
199:43 - show up in the bottom right hand corner
199:45 - of your screen now that's a little bit
199:46 - of a problem for me because I've got two
199:48 - monitors set up here and I'm recording
199:50 - on the left Monitor and the default
199:52 - monitor is my right monitor so it'll
199:54 - show up on the right Monitor and you
199:55 - guys won't be able to see it so I'm
199:57 - going to move it over 1900
200:00 - and 15 pixels by 30 pixels and instead
200:04 - of it being in the bottom right I want
200:07 - to put it in the bottom left and so
200:09 - that's the Southwest now for the anchor
200:12 - position this last thing now this is a
200:14 - string and it could be all of the normal
200:16 - sort of directional things in kinter
200:18 - north south east west Northwest
200:20 - NorthEast Southwest Southeast
200:23 - Etc right so all of those normal things
200:25 - you can use so we'll just put that like
200:27 - that and that looks good now we need
200:31 - something to trigger this thing so I'm
200:32 - just going to create a little button I'm
200:34 - going to call this my underscore button
200:35 - and it's going to be a TB dot button we
200:38 - want to put it in root we want the text
200:41 - to equal what click me all right and
200:45 - let's give this a command of I don't
200:48 - know clicker something like that and
200:50 - we'll create this function in just a
200:51 - second for now let's minor square button
200:54 - dot pack this guy onto the screen and
200:56 - let's give this a pad y of 40 to really
200:58 - push it down the screen a little bit
201:00 - okay so now we can come up here and
201:02 - let's create that function real quick
201:04 - that clicker function and in order to
201:06 - show your toast notification your toast
201:08 - message you just call the name of it in
201:11 - this case it's toast
201:14 - dot show underscore toast and that's a
201:17 - function and that's all there is to it
201:19 - so let's head over to our terminal m m i
201:21 - c tinter.com directory and let's run
201:24 - Python toast.pi and when we do we've got
201:27 - this button here if we click it boom it
201:30 - pops up after three seconds it fades
201:32 - away now I'm going to do it again
201:33 - without talking see if you can hear the
201:34 - little alert ding
201:37 - probably not but one two three boom it
201:40 - fades away so that's kind of all there
201:42 - is to it now we can take out the
201:45 - duration if we want
201:48 - to save this and run it see what happens
201:49 - then we click this 1001 1002 1003 1004
201:55 - 1005 1006 1007 1008 1009 just seems to
202:01 - be going on and on if we click it it
202:02 - disappears or if we click somewhere else
202:05 - in the app nope we have to actually
202:07 - click the thing itself so if you don't
202:09 - have a duration it'll just be there kind
202:11 - of forever right and also we could play
202:14 - around with the position remember this
202:18 - is horizontal and vertical so if we want
202:20 - it to go up more I don't know we can
202:22 - make this 300 or so
202:24 - we run this
202:27 - now it's going to be way up here so you
202:29 - can position this anywhere you want on a
202:31 - screen remember your screen isn't like
202:33 - everybody else's screen so you may want
202:35 - to keep that in mind when using a
202:38 - position but you know pretty cool and
202:40 - you see a mitos title has a title here
202:42 - and bold we've got this little Windows
202:43 - icon and pretty simple so remember just
202:46 - import it up here in this first line
202:47 - toast notification from TDK
202:49 - bootstrap.toast I know up here we kind
202:51 - of imported everything why do we have to
202:53 - keep importing separate things I don't
202:54 - know it's just the way it is but uh
202:56 - pretty simple again just to use it we
202:58 - call it toast notification got your
203:00 - title your message your duration let me
203:02 - uncomment that out alert and position
203:05 - and of course you don't have to do a
203:06 - position otherwise it'll just default
203:08 - into the bottom right hand corner of the
203:10 - screen I believe yeah uh yeah and that's
203:13 - all there is to it
203:18 - all right so that is ttk bootstrap in a
203:21 - nutshell so I hope you enjoyed this
203:22 - video if you want to learn more about
203:23 - ttk bootstrap and kinter in general be
203:26 - sure to check out myteacinter.com
203:27 - YouTube channel and of course check out
203:29 - tkhinter.com think about signing up for
203:31 - membership there you get all my courses
203:32 - for one low price and while you're there
203:34 - be sure to grab a totally free PDF copy
203:36 - of my kick your widget quick reference
203:37 - guide book this thing is awesome has all
203:39 - the kinter widget attributes spelled out
203:40 - in great detail grab your free copy
203:42 - today just head over to tkenter.com
203:44 - forward slash widget-book enter your
203:46 - email address and I'll send that right
203:47 - out to you oh yeah I think that's it my
203:50 - name is John Elder from teakinter.com
203:51 - and I'll see you in the next video