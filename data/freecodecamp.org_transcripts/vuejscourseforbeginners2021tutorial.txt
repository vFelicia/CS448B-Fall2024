00:00 - Gwendolyn Farraday previously created one of 
the most popular Vue courses on the internet.  
00:05 - Now she's back with an all new full Vue course to 
teach the latest version to absolute beginners.  
00:12 - Hi, everyone. My name is Gwendolyn 
Faraday and I will be your instructor  
00:17 - for this course. I have been a professional 
software developer for over five years now.  
00:22 - And I've had the opportunity to work in several 
different languages and frameworks over the years,  
00:28 - including Angular react, and Vue js. I 
currently work as a software consultant  
00:35 - in various technologies, and use Vue js as my 
preferred front end framework for any type of  
00:44 - web or mobile application. If you would 
like to reach out to me, you can find me  
00:49 - anywhere online at Faraday Academy. If you 
have any specific feedback for this course,  
00:56 - please email me at gwenf@protonmail.com. 
I hope you enjoy this course.  
01:07 - Vue js is a JavaScript framework for building 
applications and websites. How does it help you?  
01:15 - It provides tools out of the box to help you make 
your websites and apps faster and more dynamic.  
01:22 - And it also gives you a set of standards for code 
organization and expectations for individuals and  
01:29 - teams that work in the same code base. If 
you have heard of the virtual Dom before,  
01:36 - Vue js is a virtual Dom framework. If you don't 
know what that is, it's okay. It's not important  
01:42 - for understanding this course. The virtual Dom 
basically makes JavaScript web applications  
01:50 - a little bit faster and more efficient 
Vue by itself is extremely lightweight,  
01:56 - you can get it down to about eight or 10 kilobytes 
g zipped. Although in a practical sense, your Vue  
02:03 - and bundled JavaScript will probably never be that 
small in an application anyway. Although it is  
02:10 - good to know that Vue doesn't have a lot of extra 
code taking up more space in your application.  
02:16 - Why does Vue JS call itself a progressive 
framework, they use the term progressive  
02:22 - to mean that you can use it anywhere from 
small features on websites where you want to  
02:28 - add some interactivity and using it as 
kind of a drop in replacement for jQuery  
02:35 - and legacy applications. All the way up to using 
it as a more full featured batteries included  
02:42 - framework for large scale applications like 
Gmail or Twitter or something like that.  
02:48 - You get to decide what features you want to add 
in from the Vue ecosystem beyond the core library,  
02:57 - and it's extremely flexible to allow you to 
choose the tools and other libraries you want  
03:04 - on your own. Or you can use the ones that 
Vue provides in its ecosystem by default,  
03:10 - many people and companies are using it for its 
incrementally adoptable nature. That means that  
03:17 - if they have a legacy application, it's quite 
simple to update their application page by page  
03:24 - to turn it into a Vue application into a more 
modern application, instead of having to rewrite  
03:30 - the whole app at once. That is one very convenient 
thing about Vue j s. Let's look at a really quick  
03:38 - overVue of the history of Vue. The Vue project was 
started in 2013 by its founder, Evan you. In 2014.  
03:47 - version one launched and started to become popular 
in China where revenue is from a few years later,  
03:55 - Vue two was launched with many new updates 
and improvements over Vue version one. And  
04:00 - with the release of version two is really where 
we start to see the massive growth of Vue j s and  
04:06 - popularity in the rest of the world. So many 
developers had not heard of uJs before 2017.  
04:14 - But from 2017, and especially in 2018 and 
2019 Vue really solidified itself as one of  
04:21 - the top three JavaScript frameworks. Many Vue 
conferences started popping up lots of content  
04:28 - creation around the Vue ecosystem started to 
take place. And many companies started to use Vue  
04:34 - for their applications as well. In fact, 
many companies that do you recognize,  
04:39 - which are household names in the West, use Vue, j 
s now. And now we can see that Vue version three  
04:47 - has been released in fall of 2020. And along 
the way, over these last six years, we see  
04:53 - many different libraries that are also created and 
maintained by Ave and the core team of Vue. Like  
05:00 - the vcli Vue router in Vue x, also being regularly 
updated to match with the current version of Vue.  
05:08 - Even now, with Vue three just released, we 
see that a new version of Vue, router and VX  
05:13 - have also been released to be compatible with 
Vue version three. In this course, we will be  
05:20 - using the Vue j s core library as well as the 
vcli. For more information on Vue, x Vue router,  
05:28 - Vue test utils and some of the other tools in the 
Vue ecosystem that I don't cover in depth in this  
05:34 - course, I will be making future courses about 
those on my Faraday Academy YouTube channel.  
05:44 - So let's get started with learning v j, 
s. And keep in mind, I'm using v3 here.  
05:50 - So make sure you are at the correct 
website, which is v3 dot Vue, J s.org.  
05:58 - And then click on getting started here. This will 
take you to the documentation. And by default, the  
06:04 - introduction to Vue j s, I'm going to go straight 
to the installation link on the sidebar here.  
06:10 - And if I scroll down, I can see the place where 
it says CDN. And you'll notice here it says Vue  
06:18 - add next make sure you are importing the 
right library from the right URL here at  
06:24 - next is necessary, because Vue three is not 
in the main Vue j s repository yet it's in  
06:33 - this other repository that you can reference 
with that next, which points to Vue three,  
06:40 - until the whole ecosystem and everything finishes 
getting updated. There is going to be a difference  
06:46 - between importing Vue to an importing Vue 
at next, which points to Vue version three.  
06:53 - And I'm going to go ahead and grab this script 
tag here. So I'm in VS code, and I just have  
07:00 - a basic HTML file. And I'll be adding Vue 
j s into this application to demonstrate  
07:08 - the basics of Vue syntax before I get into 
building a larger application with the Vue COI.  
07:15 - So first of all, I'm going to be using VS code 
plug in called live server. And you can see at  
07:22 - the bottom here it says go live. So if you go to 
plugins, which is this four box icon on the side,  
07:31 - you can type in live server and click on this plug 
in. And you can install it if you do not already  
07:37 - have it installed. But I already have it installed 
and enabled. So I'm going to go back to my code  
07:43 - over here. And at the bottom, I'll just click go 
live. And you can see it shows my HTML page, I'll  
07:50 - just zoom in a little bit here with the static 
content. Now if you don't want to use live server,  
07:56 - you can just come here and right click and click 
on copy path. And then you can go to your browser  
08:04 - and paste that absolute path to the project 
or to your index dot HTML file. And it will  
08:11 - display the same way in the browser. live server 
just makes things a bit easier because it will  
08:17 - automatically refresh when you make code changes. 
And it also opens up the browser page for you.  
08:24 - But it's up to you if you want to use it or not. 
So now I want to add Vue to this application.  
08:30 - So I'm going to go inside of the 
body tag and just below this div,  
08:36 - just paste in the script tag that I just copied. 
So now this is all that I have to do to import  
08:42 - Vue and start using it in my application. I 
don't actually need Babel or anything else  
08:47 - to get started. So to write my own custom code, 
I'm going to add my own script tag right below  
08:53 - that. So there's basically two things that I 
need to do here. And the first is to use this  
09:01 - Vue variable that I have access to from importing 
Vue. And that script tag and Vue gives me this  
09:08 - method called create app. And that basically 
creates my Vue application. And I can pass it  
09:15 - an options object, which I'll get to in a second. 
Now I need to somehow connect this JavaScript for  
09:23 - my Vue application with the HTML that I'm going to 
be displaying in the browser. And that is through  
09:31 - another method that I can actually chain on to 
this Vue instance I'm creating. So I'm actually  
09:37 - going to save this as a variable. I'm going 
to say let app equals Vue create app. And then  
09:45 - I'm going to use this other method called 
Mount because I want to tell it to mount my  
09:50 - Vue application somewhere in my HTML here. 
So I'll do ID equals, I'll just call it app.  
10:00 - And I'm actually going to tell it to mount 
to my Vue j s application inside of that div.  
10:07 - And that means that the Vue j s instance that I'm 
creating here will be able to connect and display  
10:15 - data and interact with any kind of DOM element 
inside of this div here. So that will be more  
10:23 - clear in a second. So now let me change this, 
let me create a variable on my Vue instance.  
10:31 - And to do this, I need to create a function called 
data here. Now this whole object here is called  
10:37 - the options object. So any variables or functions 
that I'm going to use in my application will live  
10:45 - on this object here. So specifically with data 
that is a function, and it needs to return an  
10:52 - object. And on this object that is returned by 
the data function, I can put whatever variables I  
11:00 - want. So I'm going to create a greeting variable. 
And I'm basically going to say hello, v3,  
11:10 - then exclamation point. And now I 
can actually go into my div here,  
11:17 - delete that static code there. And I'm going to 
use my variable now. So to use a variable in Vue,  
11:25 - you use this double curly brace syntax, it's 
called double mustache syntax, which is kind of  
11:32 - hard to pronounce. So you can just call it double 
curly braces. It's a common syntax in templating  
11:38 - languages. And it basically means that anything 
found in between these sets of double curly braces  
11:46 - will be parsed as JavaScript by Vue. So Vue is 
first going to look inside of this data object  
11:53 - that we're returning, and see if there is 
a variable named greeting, and then it is  
11:58 - going to display that variable or the value 
of that variable inside of these curly braces.  
12:05 - And you can see that now it displays the 
greeting variable from our Vue instance.  
12:17 - Let's talk about Vue j. s directives. They are 
basically a way to connect elements in our HTML  
12:25 - or template here with the Vue j. s JavaScript. And 
let's see what that looks like through an example.  
12:32 - I'm going to create an input here. 
In the browser, it looks like this.  
12:39 - Now, what if I want to get the value out of this 
input Vue has a built in way to do that through a  
12:45 - directive called v model. Now, these directives in 
Vue are used just like an HTML attribute, but they  
12:54 - are prepended with v dash to differentiate them 
from regular HTML attributes. And Vue when it is  
13:03 - parsing this Vue application will see this keyword 
v model, and will bind it to whatever variable we  
13:10 - pass in as an argument to the model here. So 
here inside quotes, I need to put a variable  
13:18 - name. And I'm actually going to put the variable 
greeting here. And let's see what that does.  
13:24 - So you can see now in my input, it actually starts 
off with the text Hello Vue. And as I change it,  
13:33 - it also changes the greeting variable that is 
displayed on the page. This is called two way  
13:40 - data binding and is handled in Vue with that V 
model directive. Let's look at another directive.  
13:47 - I'm going to create an HR here. And I'll make 
a div with a class of box. And I'm going to  
13:53 - use another directive here called v if, which also 
takes an argument, which will be another variable.  
14:03 - So I'm going to set an is visible variable 
which I have to create. So let me do is visible  
14:11 - and set this to true to start, I am going to 
paste in some styling that I made. This is just  
14:20 - to style the box so you can see it on the page. 
Awful that you can see that I do see that box,  
14:28 - because this V if directive is basically just 
like an if statement in JavaScript. So if this  
14:36 - value is truthy, then this element will be 
displayed on the page. But if it's false,  
14:43 - this div will not be rendered to the DOM at 
all. So let me change this variable to false.  
14:50 - And you can see the box disappears. And if I 
check, I can inspect element. And there is no div  
14:57 - found in the DOM. Now v If is very similar 
to V show, which is another vj s directive,  
15:06 - it takes the same kind of argument a Boolean 
expression. And let me set this to true again,  
15:14 - you can see if it's true, it 
shows on the page, just like v if.  
15:21 - However, when it's false, you can see there's 
still a div, render to the DOM. The only  
15:27 - difference is the style is set to display none. 
So you won't actually see it, but it is there in  
15:34 - the DOM. So when would you use v show? Well, in 
most cases, you would just use v if, because you  
15:42 - either want something to render or not. Like if 
you have a loading spinner, you would use V, if  
15:48 - it's loading show the spinner. And then 
when the page or whatever has loaded,  
15:54 - you would set the variable to false and then 
v if would remove it from the DOM. Now v  
16:01 - show is useful for specific cases, when you might 
need to toggle something more frequently. And it  
16:09 - would be more performant than adding and removing 
it to the DOM constantly. So it's already there,  
16:15 - all you're doing is changing the CSS. So you're 
changing it from display none to display block.  
16:23 - So changing this back to Vf. There are other 
directives that you can chain on to Vf. There's v,  
16:31 - elsif, and V else. And you can already guess what 
these do. So I'm just going to show you the syntax  
16:39 - here. So v else if and V else is the one that 
doesn't take any argument. And I'm just going to  
16:47 - demonstrate these really quickly. I'll add another 
variable here. So it's visible is visible to.  
16:58 - So I've added a little bit more CSS here to 
differentiate between the three boxes that  
17:04 - I've created here. And this works as a regular if 
else statement. So if is visible is true, this div  
17:14 - will be rendered. If it's not true, it's going 
to keep going down the chain. So it will look at  
17:19 - any v else ifs you have here, you can have as many 
as you want. So then it will look at is visible to  
17:26 - to see if that is true. If that's not true, then 
it will automatically display this third box.  
17:32 - Now the third box is blue, the second 
box is red, and the first box is purple.  
17:39 - So you can see the blue box displayed 
because the other two values were false.  
17:44 - Likewise, I could change one of these 
variables to true. And then that box  
17:51 - would be rendered in the DOM here. Now I want to 
point something out here, if I refresh the page,  
17:57 - you can see for a split second, you 
actually saw all of the boxes render,  
18:02 - as well as the curly braces show up on the screen 
here before it was parsed as a Vue variable. I'm  
18:11 - going to refresh the page again and slow it down 
a little bit, just in case you couldn't see that.  
18:17 - So how do I prevent that from happening? Vue has 
something called v cloak, which is a convenient  
18:24 - utility that will hide anything from rendering 
until the whole Vue application is ready.  
18:32 - So I'm going to add a V cloak here. And then I 
basically need to add a style for it. So you can  
18:42 - see, I'm setting v cloak or this V cloak attribute 
to display none. This is the recommended pattern  
18:49 - in Vue js. And then I just add a V cloak to my 
div with my app in it. Now if I go back here  
18:56 - and refresh, you no longer see the curly braces 
or the other boxes render. How does that happen?  
19:03 - I'm going to go to inspect element. And you 
can see on the div with ID app here, there  
19:10 - is no v cloak attribute. But if I refresh the 
page, you can't really see it because it's too  
19:16 - fast. But basically, that V cloak attribute 
remains on this div until the app is loaded,  
19:23 - and then it's removed. Once everything is rendered 
to the DOM. I don't often run into cases where I  
19:29 - have to manually use this, but it is a nice 
feature to know about if you run into that  
19:34 - issue. These were just a few basic directives. We 
will definitely be covering more directives as we  
19:40 - go along in this course. In the next video, 
we will go over events and methods in Vue js.  
19:51 - Now that you've seen how to use variables and 
directives in Vue, j s, let's make this code a  
19:57 - little bit more interactive with a So you probably 
already know that there are many events that  
20:04 - can be captured in the browser and used in our 
applications. For example, when the user clicks  
20:11 - on an element on the screen, like a button, or if 
the user presses a certain key on the keyboard,  
20:18 - like Enter to submit a form, let's try out both of 
these cases in our little mini application here.  
20:26 - First, going to get rid of the two extra 
boxes. And I'm going to add a button here.  
20:40 - Which for right now, I will label as showbox. 
So right now, this V if is set to false or the  
20:49 - variable is visible set to false. So this div will 
never be rendered on page unless we somehow update  
20:56 - that variable. Before we were hard coding the 
variable value here as true or false. But we can  
21:03 - actually use this button to change the variable 
value as well. And this is done with another  
21:10 - directive called v dash on. Now, the v dash on 
directive is specific for events. You can use it  
21:18 - for custom events that you create yourself. Or you 
can use it for any of the standard browser events,  
21:24 - like, as I mentioned before, when a user 
clicks or presses a key on their keyboard.  
21:31 - So here's specifically, I'm going to do v on 
colon, and then the type of event which will  
21:36 - be a click event. So I'm listening for 
a click event on this button right now.  
21:42 - But now when someone clicks on the button, I have 
to tell you what to do with that click event. So I  
21:49 - need to pass in an argument of whatever JavaScript 
I want to run when this button is clicked.  
21:55 - And for right now, I will keep it simple. And 
I'm going to set the is visible variable to true  
22:03 - when that button is clicked. Now you 
can see I have this button show box.  
22:08 - When it's clicked, the box shows what if I want 
to hide the box. Right now, this only shows the  
22:14 - box. And the only way to get rid of it is by 
refreshing. I can set up a toggle for the box,  
22:21 - by simply saying is visible equals the 
opposite of whatever it currently is. So  
22:28 - is visible equals not as visible. So if it's 
true, it will be set to false. If it's false,  
22:33 - it will be set to true. And this should 
toggle our box, we label this to toggle box.  
22:41 - And now, if I keep clicking toggles on and off, 
that is basically how events work. There's also  
22:50 - a shorthand for creating events. So you don't have 
to type out the dash on colon, you can just type  
22:59 - the app symbol, and then the event name. And this 
is exactly the same thing as it was when I typed v  
23:06 - dash on colon. the at symbol just replaces all 
of that. So what if you wanted to do something  
23:11 - more complex in here not just setting a variable 
to True or false? Well, you can actually use this  
23:18 - to pass in any kind of method on your VJs object. 
So I'm going to get rid of is visible here.  
23:26 - And I'm going to create a method called toggle 
box. And now I have to create this toggle box  
23:34 - method. You can see I already have data on my vj s 
object, this data function. But now I need to make  
23:43 - another key, which is called methods and 
methods is an object of functions. I can  
23:51 - put as many functions as I want on this methods 
object to be able to use these in my Vue, j s  
23:57 - application. So let me create that toggle 
box function. I could do the same thing here  
24:06 - as I did above, but I'm just going to use the 
function shorthand and I want the same logic  
24:12 - again but inside this function, so in order 
to refer to this is visible variable here,  
24:19 - I have to get it off of the this context. And 
Vue j s handles putting all of my methods and  
24:26 - variables on the this context so that they're 
available to me anywhere in my Vue application.  
24:32 - So I can do this.is visible and then set it equal 
to not this.is visible This is not function there.  
24:44 - And this should work the same way as it did 
before. So I can test it out and toggle the box  
24:50 - once again. So that is the basics of how methods 
work. And you can see because I have called my  
24:58 - method toggle box That it is also available 
to me anywhere inside my Vue JS template here.  
25:06 - So let's look at one more type of event. 
And that will be an event listening for  
25:11 - keyboard input. So here I want to listen for key 
presses. This is also an event. So I'm going to  
25:18 - start with the Add symbol. And listen for a key up 
event. I could also use key down if I wanted to.  
25:24 - So for keyboard events, I need to add a modifier 
to say which keyboard input I am listening for. So  
25:33 - for input here, I want to run a function or some 
JavaScript, whenever I press the enter key. So for  
25:40 - enter, I actually have a shorthand because this is 
a common keyboard input. So I can say, Listen for  
25:46 - the key up event specifically with the enter key. 
Or I can always use the key code associated with  
25:53 - any key on the keyboard. So for enter, that 
would be 13. It doesn't matter which one I use,  
26:00 - I'm just going to go ahead and use key up dot 
enter, because it's a bit more obvious what it is.  
26:05 - And then it's the same syntax here. And I'm going 
to create a greet method for this key up event.  
26:13 - So let me go down to my methods, create a method 
called greet. Use the method shorthand. And I'm  
26:22 - actually just going to console dot log, this dot 
greeting. And let's see how that works. So I can  
26:33 - just focus this input anywhere and just hit enter, 
it doesn't matter what's already in the input.  
26:39 - And you can see it logs out the 
greeting. If I change the input,  
26:43 - it logs out whatever the greeting variable 
is currently set to. Now what if I want to  
26:48 - pass something into a function as I'm calling it 
into one of these methods, then I could do that,  
26:56 - just by adding the parentheses to call the 
function. So for example, greet here, I can  
27:02 - just pass something in. So just for demonstration 
purposes, I'm going to pass in the greeting  
27:08 - through the template here. I'm going to accept 
that here. And I'll still call it greeting. And  
27:14 - then get rid of this because I'm no longer looking 
for the greeting variable. On the vj s instance  
27:21 - here, I am actually just going to be using the 
greeting variable that I am passing in here.  
27:28 - And just to show you that it's different, I can 
use the greeting variable and then pass it in with  
27:36 - some exclamation points appended to it. And 
now when I go here, and I click Enter again,  
27:44 - you can see that it is the greeting variable 
that I passed in through the template. If I  
27:52 - erase a few characters here, hit ENTER again, 
you can see it's still the same variable set  
27:58 - to the new value. Those are the basics of 
how to use events and methods in Vue js.  
28:04 - I do want to point out here, you see this dot 
enter, that is an event modifier in Vue js. So  
28:11 - you're not only listening to the key up event 
you're listening to specifically the enter key.  
28:17 - Now there are many modifiers that you can use. For 
example, at this click event here, for example,  
28:24 - I get I have a modifier here that says I'm 
only listening for right clicks. So a normal  
28:30 - left click on a mouse will not trigger this 
toggle box. But only if you make a right click,  
28:36 - I can also use some handy modifiers like 
prevent. So if I don't want a form to submit  
28:43 - instead of using the regular event dot prevent 
default in my method, I can just add this modifier  
28:51 - here dot prevent. And I can do that for stop 
propagation as well. So I could add that stop.  
28:56 - You can chain as many of these modifiers as 
you want in Vue j s, there are definitely a  
29:02 - handy thing to know about when you're building 
Vue applications. That's all for this video,  
29:08 - we will be diving deeper into events and methods 
later on in this course and in future courses.  
29:14 - In the next video, we're going to talk 
about custom components in Vue js.  
29:23 - Let's talk about Vue components. Now when 
we created our Vue application here, we are  
29:29 - basically just using one standard component, you 
could call it just a default options object for  
29:37 - use in our template. So now we're going to work on 
breaking up parts of our application into separate  
29:44 - components in order to prepare for learning how to 
build larger applications and work on applications  
29:51 - with the Vue COI outside of a single HTML 
file. Let's take a break from the code for a  
29:58 - second and take a look At what we are going to be 
building with Vue components, we're going to use  
30:06 - a simple example of a form to work on breaking 
up an application into separate components.  
30:14 - Now, where you see the red outline, those 
are each going to be a separate component.  
30:20 - So the outer red outline around the whole login 
form will be its own login form component.  
30:27 - And then each input with its label will be a 
custom input component that we are going to create  
30:34 - and be able to reuse for as many inputs as we 
have. So we're going to start off with this outer  
30:42 - component, and then break out the inner components 
into their own components after that. And then  
30:48 - we are going to look at how you can pass data 
around between components in your application.  
30:55 - So what would a Vue component look like? 
Let's say we wanted to have a form in here.  
31:01 - And I'm gonna get rid of this greeting really 
quick. And put a form here. So I could do this  
31:09 - directly in the HTML and create a form tag. Or 
I can create a custom tag as a Vue component  
31:18 - called custom form. Now, this is the same 
syntax as if it were an HTML tag. Except,  
31:26 - of course, it is not a standard HTML tag. So I 
have to define it as a Vue component down here.  
31:33 - And I need to define it after I define my 
app variable, which is my Vue instance.  
31:41 - And before I actually mount it to the 
DOM, so I can chain this here as app dot  
31:49 - component. This is a function and it takes 
two arguments here that I'm going to pass in.  
31:56 - So the first one is the name of the component 
that I'm going to use. And that is the name that  
32:01 - I'm going to be using in my HTML up there. 
So I'll give it the same name custom form.  
32:07 - And the second is an options object. And since 
this is his own self contained component, I can  
32:14 - actually use any of the same options that I've 
been using here, such as data and methods, etc.  
32:23 - The only extra thing that I need right now is 
I have to define a template for this component.  
32:30 - And the easiest way to define a template is 
by using graves. So I can make this multi line  
32:37 - and pass in the HTML here. So real quick, I'm 
going to create a div. And I'm just going to put,  
32:46 - let's say, two inputs in here for right now, but a 
type of email, and then an input type of password.  
33:02 - And let's call this a login form. Since we're 
doing email and password, I'll change that up  
33:07 - here to login form. And since template is the only 
required option that I need to pass in on this  
33:15 - object, it should run like it is right now. So 
let me see if this works. I'm gonna go to go live.  
33:24 - And you can see these two form inputs up at the 
top here, completely unstyled, just basic browser  
33:32 - inputs. So I'm going to style these inputs 
really quickly, so they're easier to see.  
33:38 - After all of these boxes, I'm going to add 
a reference to input here. I'm going to say  
33:45 - margin of 10 pixels just on all sides, and 
display of block so they don't go in line. And  
33:56 - now they are a bit easier to see here. 
Alright, let me code for the styles again.  
34:03 - And now let me add a data method to this 
component. So you can see what that looks like.  
34:10 - So after this template key I have here, I'm going 
to do the same thing I did above. With data,  
34:17 - I'll just use the function shorthand here, return 
an object. And here I'm going to give it a title.  
34:25 - And the title will be login form. And now 
I need to do something with this title.  
34:32 - So up here when I defined variables, I use them 
inside of my app template here. But since my  
34:42 - login form is a self contained component, any 
variables I define on data here, I am going  
34:49 - to have to use them inside its own template. So 
I'll just add another line here and give it an h1  
34:59 - and by the way, This doesn't 
have syntax highlighting,  
35:02 - and isn't kind of a weird template form. Because 
I'm just doing this all in one HTML file.  
35:09 - This is just a stepping stone to get to more 
standard ways of creating Vue components  
35:16 - where you will have syntax highlighting, and auto 
completion and all of those other great features.  
35:21 - So here, I need to use that variable title. 
So I'll use that the same way I did before  
35:27 - by referencing it. And now I should see the title 
on top of those two input boxes. And indeed,  
35:35 - I do here I am, zoomed in quite a bit. So that is 
a basics of how you can create a component here,  
35:43 - I'm going to go ahead and keep building out 
this form, and then also show you how to  
35:48 - compose components now. So I'm just going to 
change this really quickly to form. And then  
35:55 - I'm going to add some submit functionality here. 
So I'm going to add an event for submit, submit,  
36:04 - and then pass in an argument with the method 
I want to run or the function I want to run  
36:09 - when I submit a form. So I'm just going to 
call my function, I suppose handle Submit.  
36:15 - And then I need to make a methods object down here 
with that function. I'll call it a handle, submit.  
36:27 - And I will just console dot log 
submitted. So now when the form submits,  
36:35 - it will run this function, there's a few 
more things that I need to do, I need to  
36:40 - add a button here, that will actually submit 
the form. So by default buttons are type submit,  
36:48 - so I don't need to add that here. But I 
am going to add some text to the button.  
36:55 - Now when the form submits it refreshes the whole 
page. Of course, this is the default behavior in  
37:01 - browsers. So you can just automatically click 
and send data from the form to your back end.  
37:08 - But since we are going to be handling the form 
submission from our handle submit function,  
37:14 - we don't want this default behavior with 
the page refresh. So like we saw earlier,  
37:20 - we have event modifiers. So we can do prevent, 
to prevent default, this would be the same thing  
37:30 - as passing in an event object to our handle submit 
function, and then doing e dot prevent default.  
37:38 - Again, this is just a shorthand. So 
now if we look at our console, here,  
37:43 - we see that it logs submitted when we submit the 
form. So now, we probably want to be capturing  
37:51 - these inputs. So we can do that. Again, by using 
the directive v model to bind to the value of the  
37:59 - form input to a variable, we'll call this one 
email. And we'll v model this one as password.  
38:12 - And then add these into data. And now let's 
log those out. So let's log out email. And  
38:28 - password. Of course, if you remember, I have 
to get it off of the this context, since I'm  
38:34 - referencing it inside of JavaScript here. And 
now I should be able to type in something here,  
38:43 - this has to be an email. So 
I'll say gwen@example.com.  
38:50 - Just any password, and I'll click 
Login. And you can see it did log out my  
38:58 - credentials here. Okay, so that's one 
component. In the next video, let's look  
39:04 - at how to break up this component and take out 
the inputs to put them in separate components,  
39:12 - as you saw in the markups earlier in this video. 
And we'll also look at how to pass data between  
39:19 - components. So from a parent component to a child, 
and then also from a child backup to the parent.  
39:30 - So what if we want to compose multiple components 
together? Let's demonstrate this by removing the  
39:36 - inputs and creating a custom component just for 
our form inputs. Let's say we want some logic just  
39:43 - contained within a special input component. So let 
me fold this real quick. And I'm going to create  
39:50 - another component here. I'll do app dot component 
again. And I'm going to call this custom input  
39:58 - passing in options. object. Again, 
I need to have a template here.  
40:04 - And in this one, I'm just 
going to have Label Label  
40:16 - when a display a label variable here, and 
then I'll have that wrap around the input.  
40:23 - And I'll use a type, just the default text 
for right now we'll change that in a second.  
40:30 - And that is a default input.  
40:34 - So now where am I going to use this component, 
so I'm actually going to replace my input fields  
40:40 - in this component with this new one that I 
created. So what I can do here is Call this Custom  
40:49 - input, and custom input. And I can use my 
components inside of this other component.  
40:56 - Now there's one more step that I have to take 
here. And that is registering the component.  
41:04 - So I have to let my login form component 
know about the other custom component.  
41:10 - And I can do that here by creating components 
array, and then just give it the string of  
41:19 - the component that I want to be using, which is 
custom input. Now let's see how this works. Okay,  
41:29 - so I have these two inputs. Now it is giving me 
this warning, that property label was accessed  
41:36 - during render, but it's not defined on the 
instance. This is happening, because here,  
41:42 - I'm referencing this variable label, but it is not 
defined anywhere. So it's giving me that warning.  
41:48 - Now I could define data function here and 
create the variable on this component.  
41:56 - But I want to demonstrate passing data from one 
component to another. So instead of defining it  
42:03 - on this component, I'm actually going to define 
label on the parent component and pass it to the  
42:09 - custom input component. To do that, I'm going 
to come here and add just a label, let me add  
42:19 - in, we call it email label for right 
now. And I'm going to call it email.  
42:27 - And I'll also have a password, label and call this  
42:33 - password. Now I have to get these two variables 
passed into these custom components here.  
42:42 - And so what I'm going to do here, I can go ahead 
and get rid of the V model for just a second. And  
42:47 - I'm going to add a label here that I'm going 
to pass in. And I'm going to pass in the email  
42:56 - label. Now this looks just like an HTML attribute. 
But I'm actually going to add a modifier on here.  
43:06 - That is a Vue directive called v bind. What v bind 
does is basically turn this regular HTML attribute  
43:18 - into something that can be parsed as JavaScript 
so that I can pass down a variable to the child  
43:23 - component. So I'm v binding this label, which is 
email label, which refers to this string here,  
43:31 - which is email, this will get passed down as a 
property to the child component called label.  
43:39 - And now in this custom input child component, I 
need to receive that property to accept it here  
43:46 - with a props object. And the simplest way to 
write props is to make an array of strings,  
43:55 - just like I did for custom components. And these 
props are basically just a list of all of the  
44:03 - names of the information that I'm passing down 
from the parent to this child. So now, because  
44:09 - I'm defining label in props, I will have access 
to use the label variable here inside my template.  
44:18 - Now if you look at the login form, 
you can see that the email field,  
44:22 - it has a label here, and you can tell it to 
label because when I click on the word email,  
44:27 - it focuses on the field it's related to. 
So let me give a label the password now to  
44:35 - I'm going to pass in password here. By the way 
v bind, there is also a shortcut for V bind.  
44:42 - This is one of the most common directives 
in all Vue applications. So the shortcut is  
44:48 - instead of using v bind colon, you just use 
colon and then label. So let me pass a label in  
44:55 - here as well. So I'll pass a label in As password 
label, since we're using this reusable component,  
45:09 - the label will always display as the label 
that we pass in. And now you can see that  
45:15 - both form fields are properly labeled here. Now 
I want to point one thing out really quickly.  
45:22 - And that is for email and these password 
labels, you could not make variables for  
45:30 - these and just pass them in as strings here. 
So for example, if I get rid of the bind  
45:36 - of the colon, shortcut there, then I could 
just pass in, let's say, password. And  
45:49 - let me put enter email here. So it's different. 
And now I can just pass in this text as a string.  
45:56 - Because there's no more v bind here, Vue is 
no longer looking for a variable. So now in  
46:02 - the application, you can see that it's just 
passing the string down as a label to the  
46:07 - child component and displaying that string, I'm 
going to do those changes. When you're working in  
46:14 - actual Vue applications, you will see that 95% 
of the time, you want to pass a variable in when  
46:22 - you're passing a prop down to a child component, 
either a data variable or some kind of a function.  
46:28 - So you'll almost always be using this V 
bind syntax here. Now there's one issue  
46:34 - because in the child component, we have the 
input down here, we're not actually listening  
46:40 - for changes to the text in the input, we're not 
v modeling that to any variable, so we don't  
46:47 - have access to whatever is inside the input. 
So we actually need to create a V model here  
46:53 - in the child, I'm going to save the model. 
And just temporarily here, I want to map this  
47:02 - to a variable in the child. And I'm going to could 
just call this input value. And I need to create  
47:12 - data function here, return an object with input 
value as an empty string. So now in this case,  
47:26 - you're already familiar with the model. And you 
know that anytime we type a character into this  
47:30 - input, it's going to update this variable and 
this variable, and the input will stay in sync.  
47:38 - But now how can I get the value of this 
variable up to the parent component here,  
47:46 - because I actually want it to stay in sync with 
these two variables on the parent component.  
47:52 - So that way, when I submit my form, I can have 
access to it in this handle submit function.  
47:58 - So there are actually a couple different 
ways of doing this. I'm going to show you  
48:03 - the most straightforward approach for getting 
started with this. And then in future courses,  
48:10 - I'm going to explain a little bit more in depth 
about how you can use custom events and other  
48:16 - methods of capturing the value of a variable from 
the child to the parent. So to get started, here,  
48:23 - I'm going to use my same input variable. 
But I'm going to use a new object here.  
48:29 - And this object is called computed. I'm 
going to comment out data for a second.  
48:37 - So computed is an object where you can put 
variable names in here as keys. So for example,  
48:47 - this input value variable that I want to 
create, I can put it in here as a key.  
48:53 - And whenever this value changes, I can actually 
get it to run getter and setter functions. So  
49:00 - I can create a getter function, and then 
a setter. So when I get the variable  
49:09 - value here, it will run this function. And 
then when I go to set the variable value,  
49:15 - it will run the set function. So now what value 
do I want to put in my getter here, I want to  
49:21 - get that value from the parent component. So 
I'm actually going to use these two variables  
49:29 - that I already have here. And I'm just going to 
get rid of these types. I'm not using them yet. So  
49:36 - get rid of those. And I'm actually going to 
do something different. I'm going to create  
49:40 - v model directly on my custom component here. And 
I'll show you why in a second. And I want to model  
49:48 - this to the variable that I'm going to be using. 
So for this one, that is the password variable.  
49:56 - And for this one, that's email And these got out 
of order. So I'll switch them around. Okay, so now  
50:04 - I'm be modeling the email and password. And now I 
want to get these variables in my child component  
50:12 - here. Now, how do I do that. So in props, I can 
actually accept a prop called model value. And  
50:22 - this comes from the parent. Now it doesn't really 
look like we are passing in another Prop, because  
50:28 - we're not v binding any variable and passing it to 
the child. But actually, what v modeling does on  
50:36 - a child component is actually under the hood, 
it's giving us another prop called model value,  
50:44 - which is mapped to email. So v model does a few 
steps all at once, it's kind of a shorthand here.  
50:52 - So I have access to this model value prop because 
I'm using the model. So I can accept that prop  
50:59 - in the child here v model. And then in my getter 
function, I can do this dot model value. And I can  
51:10 - return that. So now whenever I get the value for 
this input, it should be the same as the value in  
51:17 - the parent component. And I can check that by just 
typing in some values here. And you can see that  
51:26 - the inputs are pre populated with the value from 
the parent component. Because I am v modeling this  
51:34 - input to a getter function that I'm setting here 
and saying that the value will be this dot model  
51:43 - value, which comes from the V model variable in 
the parent component, which are these variables.  
51:55 - So now, how do we handle setting the value if 
we type text into this input here, so we need to  
52:03 - capture the value first and Vue passes this in 
via a parameter. So we can give this parameter  
52:10 - any name that we want, I'm just going to call it 
value. And I'm just going to first log out this  
52:16 - value. And so here, I can try typing in. And you 
can see it's logging out the value of the input  
52:24 - from that log in the setter function. But 
now it's not setting a variable anywhere.  
52:30 - So let me go ahead and set the variable. Now to 
do that, I'm going to use a new method that you  
52:36 - haven't seen yet. And that is this dot dollar 
sign emit. What emit does is allow me to emit  
52:46 - events that other components can listen to. And I 
can pass data around by Vue application like that.  
52:53 - I can emit events that are built in like I could 
emit some kind of on click event or something like  
53:00 - that. Or I can emit a custom event that I create. 
For right now I'm going to use an event that  
53:07 - Vue gives me and this is called an update event. 
This syntax is actually new, slightly updated  
53:15 - in Vue three. So if you see older tutorials, 
and might not be using this exact same syntax,  
53:21 - it will probably be using an input event here 
instead. But I'm going to pass in a value here.  
53:28 - Oops, I need a comma. So this 
first argument is the type of event  
53:34 - that I'm emitting. And the second argument is 
the value that I'm passing through that event,  
53:39 - which is this value that I'm getting 
from the input via the set function.  
53:46 - Now, how can I listen for an 
event in another component?  
53:51 - I could set this manually. But like I said 
before, V model is a shorthand. So v model  
53:58 - is actually listening for this update event from 
my child. And whenever this update event emits,  
54:10 - this V model from the parent component is 
updating the value of the variable for us.  
54:17 - Let's test this out. I'm going to start typing 
here, typing here. And I'm going to press login.  
54:25 - And you can see that it logs out the 
values of the email and password. So this  
54:33 - isn't that clear. So let me put a real email here, 
or real fake email anyway. And you can see there's  
54:40 - the email and there's a password, which are 
coming from this log statement in handle Submit.  
54:46 - Now, you might be wondering, why do we have to 
go through all that trouble to model a variable  
54:50 - from a child to a parent. And the reason why 
is because the props that we pass to children,  
54:57 - they are immutable. We cannot them 
in the child, these variables on  
55:03 - data here can only be changed in the same 
component. So my custom input can't change  
55:11 - anything we pass in via props here. So for 
example, if I tried to model this to label here,  
55:21 - getting all of these warnings attempting 
to mutate prop label, props are read only.  
55:28 - So I'm gonna undo that. So that's why I had 
to create this extra variable in the child  
55:35 - and create a getter. So I'm getting this 
read only model value prop from the parent.  
55:42 - And then what I'm doing to update the value of 
that prop is I made it emitting an event to the  
55:47 - parent, this update model value event. So the 
parent, because I have this V model shorthand  
55:55 - is listening for that event. And this 
component, this login form component  
56:00 - is actually updating these variables itself. So 
I'm not actually mutating props from the child.  
56:06 - Now, there are definitely other ways of handling 
changing props in the child component, I could  
56:13 - listen for changes on this input. And I could call 
a method on a methods object, which could do the  
56:20 - same thing either amid an event, I could also pass 
a function from the parent to the child, and the  
56:28 - child can call functions in the parent. And then 
I could update variables in that way too. There  
56:36 - are also other state management solutions. And we 
will explore all of these different options later,  
56:42 - I just wanted to give you an initial taste of how 
this can be done in Vue js, and specifically in  
56:49 - Vue version three, now that the syntax has changed 
a little bit. So in this video, we've gone over  
56:56 - custom components, composing components 
together, importing them into each other,  
57:01 - like we are with this custom input into the login 
form component. We also talked about using props,  
57:09 - passing data from the parent to the child, and 
then being able to set data by emitting an event  
57:16 - that the parent can listen to and passing it a 
value. In the next video, we are going to talk  
57:22 - about loops in Vue to simplify our syntax here 
with having multiple of the same component.  
57:33 - Now let's talk about loops. Here, we have two of 
the same component, these custom input components.  
57:40 - And I would like to just be able to loop through 
as many of these components as I want. To do this,  
57:47 - I need to add an array and data here. And 
this array will have all of the information  
57:55 - for each input here, including the variable 
that I want to model to the label name.  
58:00 - And I'm also going to add a type. So I'm going 
to create an array here called inputs. And just  
58:07 - to demonstrate really quickly, I'm going to add 
just some strings here, like email, password.  
58:18 - And let's say name. So what if I wanted to 
display all three of these strings inside the  
58:25 - template here, I'm going to come back to looping 
over the form in a second. But for right now,  
58:31 - I'm just going to create a p tag here. And I 
want to show each one of these strings inside  
58:37 - its own paragraph tag. So I'm going to create a 
loop for these, I'm going to say V four equals,  
58:45 - and then I need to pass in the array here, 
which is called inputs. And this will loop  
58:51 - over the inputs array. Now this is a four in 
loop. So I'm going to have to create a variable  
58:59 - that I can use in the iterations. So I'm 
going to say for str, short for string  
59:06 - in inputs, and now I have access to this 
string variable each time through the loop.  
59:17 - And I can basically just display it in a variable 
now. Right, so it is complaining that I made a  
59:24 - mistake in my syntax. And of course that is 
because I didn't put a comma after my array.  
59:31 - And now you can see that these top three here are 
strings that are displayed in a paragraph tag.  
59:37 - Of course, they are so big because I am zoomed in 
so far, but they are displaying properly. And that  
59:44 - is basically how you use a loop in Vue js. I am 
missing a prop here that I need to add. Whenever  
59:52 - you do a loop you have to add a key prop here and 
this key has to be unique on E iteration of the  
60:01 - loop. Now the reasons for using this key prop are 
a little bit more advanced. So I'm not going to go  
60:08 - in depth on it in this video. But I just want you 
to understand that it is good practice for you to  
60:15 - use a key that will uniquely identify any elements 
that you loop through in your Vue JS templates.  
60:25 - This can help with performance and preventing 
bugs in your applications. And when you move into  
60:31 - programming a more structured Vue application with 
Vue components in their own files, you will see  
60:38 - that your linter and code editor will pick up on 
it if you don't have a key value here. And it will  
60:45 - give you a warning and ask you to add one. So we 
have to have a key to give a unique reference to  
60:51 - each one of these paragraph tags, we're adding 
into the template. Now what I can do since the  
60:57 - names are unique here, each string is different. 
So I can v bind to key, the string variable str.  
61:09 - This is a really simple Vue application. 
So you basically don't notice a difference  
61:13 - in the browser. But you can see that there 
are keys attached to these elements. Now,  
61:19 - I want to point out though, that one more 
way that you can create this unique key  
61:22 - every time through the loop is you can actually 
get an index through each iteration of the loop.  
61:29 - You can get it here and then use it as your key. 
And if I print out I, you can see that I is the  
61:37 - index of each iteration in the loop, put that 
back a string. So this was just a demonstration,  
61:44 - of course. So I'm actually going to get rid of 
this whole p tag here. And what I really want  
61:50 - to be putting in inputs here are objects for the 
information that has to do with each input that  
61:57 - I want. So the first one, let me put a label 
here. And I'm going to say the label is email,  
62:05 - I'm going to create a value here. And this was 
what I'm going to V model to. And then I'll  
62:12 - go ahead and add a type. So let's say type is 
email. And I'll do the same thing for password.  
62:30 - I can get rid of those now. Alright, so now my 
application is broken, because I got rid of all  
62:36 - the data that I had been passing into these custom 
inputs. And actually, I'm going to get rid of one  
62:42 - of these custom inputs, because now I'm going to 
be looping over just one, and it will create one  
62:49 - for each iteration of the loop. Let me clean this 
up a little bit. But these on separate lines.  
62:58 - And so the first thing I want to do is create a 
V four here. And this V four will look through  
63:06 - inputs, just as I did before, I'm going to say 
four inputs in inputs. And I'm actually going to  
63:13 - get the index here really quick as well. And 
then use a key of V bind the index. So now I  
63:23 - can't v model email, I need to V model based off 
of this input object, which is each object in this  
63:31 - inputs array. So I'm going to have to V model 
input dot value here to model it to the value.  
63:41 - So I'll do input that value, the label, also, 
I'm gonna have to do input dot label. And  
63:52 - now I do have a type. So let me rebind a type 
as well. And I'm going to do input dot type.  
63:59 - So that's one thing that I need to 
update in this child component. Now,  
64:04 - I'm still accepting that model value prop and the 
label prop. But I also want to accept a type prop  
64:11 - now. And instead of doing type is text, now 
I have a prop from the parent based off of  
64:17 - which component it is in the loop. So now I'm 
going to V bind this so it can take a variable,  
64:24 - and I'm going to say type, which will 
refer to whatever prop I've passed in.  
64:29 - So I'm going to come to my form here. And I'm 
going to type in and I actually forgot to change  
64:38 - the logging here for handle Submit. So I don't 
want to overcomplicate things for this example.  
64:46 - So what I'm going to do is just delete this and 
log out this dot inputs of zero and that value  
64:58 - and then this dot inputs, have one and then 
that value. And this should fix my problem here.  
65:09 - Let me just type something in. And it's 
complaining that I don't have an email address,  
65:14 - I'm just going to type in a fake email, login. 
And you can see that it has my correct login  
65:22 - information. So this is the basics of how 
to handle loops in Vue j s, is you can use  
65:30 - V for either on regular HTML elements like an h1 
or any custom components that you make as well.  
65:38 - This is very commonly done with card components. 
If you see a website like Pinterest, how it shows  
65:44 - all those different little boxes with pretty 
photos in them. If that was both in Vue js,  
65:50 - it would be doing this V for loop over 
all of those data objects that make up  
65:56 - all of those Pinterest cards on your Pinterest 
wall. The last thing we need to look at before  
66:02 - we get into the demo application is lifecycle 
hooks. So we will cover those in the next video.  
66:12 - Another important concept in Vue j. s is lifecycle 
hooks, also called component lifecycle hooks.  
66:19 - So what is the hook and what are component life 
cycles. To understand this, I made a quick demo.  
66:26 - Similar to the demo that we 
started off with in this course,  
66:31 - I can click the toggle box button and a box 
appears. Now I'm using a V if to take this box,  
66:42 - add it you can see it was added 
to the DOM. Now if I click again,  
66:45 - it was completely removed from the DOM here, 
that whole process of coming into the DOM.  
66:53 - And then finally leaving the DOM. That is the 
life cycle of this box component that I have.  
67:02 - Now, sometimes things might leave the 
DOM because you navigate to another page,  
67:06 - or because something is coming into Vue via 
scrolling, or because you're hiding and showing  
67:12 - something like this example. In any case, you can 
use something called lifecycle hooks. A hook is  
67:20 - just a function that will be triggered to run at 
a specific point in the lifecycle of a component.  
67:27 - For example, it's a function that will be called 
right when this purple box appears on the screen,  
67:34 - or right before it leaves the screen. If 
you look at the Vue, j s documentation.  
67:41 - Now this is the version two documentation here, 
because they don't have what I'm going to show  
67:47 - you yet in the version three docks. But it is 
the same thing. So I'm under learn guide. And  
67:55 - then if I scroll down on the sidebar, I'm at 
the Vue instance and creating a Vue instance.  
68:03 - And I can actually click on 
the lifecycle diagram here.  
68:07 - So this is a diagram like it says of the 
instance lifecycle of your Vue instance.  
68:13 - And like it says, You don't need to fully 
understand everything that goes on right now.  
68:17 - But it is a useful reference. And this 
chart isn't just useful for your Vue  
68:23 - instance. But every single Vue component 
will have access to these lifecycle hooks.  
68:29 - So you can see these two up top in the red. All 
of the boxes in the red are the lifecycle hooks,  
68:35 - you can see before create and created, these 
hooks will be run right before and right after  
68:43 - Vue. js has initialized your component. 
Now the next two before mount and mounted,  
68:51 - the format is run right before your component 
is mounted to the DOM. And mounted is run  
68:58 - as soon as your component is mounted to the DOM. 
components can also go through updates. So before  
69:05 - update and updated, like it says here, this 
will happen. Or these updates will be triggered  
69:11 - when data changes on your component. So any 
of those data variables that you create,  
69:17 - if you're incrementing a number or changing some 
kind of value, then updated and before update will  
69:24 - run. And then when your component is going to 
leave the DOM. Now here it says before destroy and  
69:31 - destroyed. Now this terminology has been updated 
for Vue three for these two lifecycle hooks.  
69:38 - So if we go to the Vue three documentation 
now and we're on lifecycle hooks here.  
69:47 - I'm going to scroll down so you can see 
before create created before mount mounted  
69:53 - before update and updated. I'm going to 
skip over some of these and Now you can see  
70:01 - it's before unmount and unmounted, which is 
in place of before destroy and destroyed.  
70:09 - The lifecycle hooks function exactly 
the same way, they've just been renamed.  
70:14 - I hope this will become a little 
bit more clear as we look at a demo.  
70:18 - So in the code, you can see I have 
the same box that we used before  
70:22 - appear. And here is the toggle box button inside 
of my Vue template. But this time, I do have a  
70:31 - special test box custom component that I made, 
which is toggled based off of a V, if so this  
70:40 - is my main application. And the options object 
with my is visible variable for whether or not  
70:46 - the box is visible. And then I just have a toggle 
box method, which I call when I click this button.  
70:54 - So again, this is pretty much the same thing that 
we did before. Except for this new component here.  
71:01 - I put the box in its own component. Now Now that 
we've learned about composing components, and I'm  
71:07 - just going to add some lifecycle hooks here really 
quickly to illustrate when these are called on the  
71:14 - component lifecycle. So I'm just going to add 
a couple of them here. We're gonna add created,  
71:22 - and then mounted, and then unmounted. And in 
each of these, I'll put a console dot log.  
71:44 - And let's see when these console dot logs print 
out. Back in my browser, I'm going to hit toggle  
71:50 - box here. And you can see in the terminal at the 
bottom, created, printed and then mounted printed  
71:59 - in the same order that we saw in the VJs 
documentation. So this one happened before. And  
72:05 - then this one happened after it was mounted to the 
screen to the DOM here. Now if I hit toggle box,  
72:11 - again, we can see unmounted prints because 
that is run after the box leaves the DOM.  
72:19 - Now let's look at another one. After methods here, 
I'm going to put lifecycle hook on this component,  
72:28 - or on the main Vue instance that we 
have here. And I'm going to try updated.  
72:40 - And I'll hit toggle box. And you can see 
that we have created and mounted those both  
72:46 - print from the box component itself, but from the 
main instance also updated prints. And that is  
72:54 - because we are updating this data variable from 
is visible false to is visible true. And so the  
73:02 - update function is triggered on this component 
because our data updated for that component.  
73:08 - And if we toggle it again, we can see updated is 
run again, because that variable was changed to  
73:15 - false again. So updated will run every single time 
the data changes. Now, why might you want to use a  
73:23 - lifecycle hook, some of the most common use cases 
are checking whether someone is authorized to Vue  
73:31 - a certain page or component. A lot of people use 
the created and mounted hooks as well to pull data  
73:37 - into their application from a back end or from in 
browser storage. Sometimes they are also used to  
73:45 - initialize events. And then when the component is 
about to unmount, you can clean up that event. Or  
73:51 - you can save some data or run some kind of check 
on before unmount or in the unmounted function.  
73:58 - So those are the basics of lifecycle hooks, I 
encourage you to test out lifecycle hooks on your  
74:04 - different components and see what happens when you 
use different lifecycle hooks. In a future course  
74:10 - we can get into some more advanced examples and a 
few of the more advanced lifecycle hooks as well  
74:17 - that you won't see as often. So those are 
the basics of Vue js. In the next video,  
74:23 - we are going to build a Vue three application 
from scratch, starting with the Vue COI this time.  
74:34 - This is a demo of the application that we will 
be building. It's a simple shop application with  
74:40 - a few items. Now it looks like the web page is 
already done. But actually it's just static HTML  
74:47 - and CSS so far. As you can see, if I click the Add 
to Cart button, nothing happens. And if I scroll  
74:53 - up, the only things that are actually functional 
on this site right now are these top nav links.  
75:00 - Which are just regular browser anchor 
tag links to bring you to another page.  
75:05 - So this one goes to the Products page. And you can 
see I have this cart, which is not functional. So  
75:12 - if I click the X, nothing happens, it's just 
fully slid out here to demo how it will look.  
75:19 - And if I click the X, nothing happens, it doesn't 
delete the item, I can't add items to the cart.  
75:25 - And on this page, I have a past Orders table, 
which is also just static content right now.  
75:35 - This project is going to be a little bit 
different than tutorials that you are used to,  
75:40 - we are not going to be starting from scratch 
with some mock ups here. Instead, we will be  
75:46 - starting with a static application with HTML and 
CSS already coded, then we will figure out step  
75:53 - by step how to add Vue JS into the application. 
This will help to give you a deeper understanding  
76:00 - of how Vue works and how to build real world Vue 
applications. First, I will give you an overVue  
76:08 - of the code base. And then we're going to see how 
it looks in the browser. And then finally, we will  
76:14 - start with the Vue JS portion and implementing 
our own Vue code into each feature one at a time,  
76:22 - the goal is to eventually reach a point where 
it gets to be difficult to continue to code  
76:29 - inside of HTML. And then we are going to move 
the project over to a Vue COI setup project  
76:36 - where we will have Webpack and the full 
ecosystem of Vue j s tooling and libraries  
76:43 - like Vue x and Vue router. So let's get started 
looking at the code. So I'm going to start here  
76:50 - with the package dot JSON. Now this is the file 
that's generated by NPM. You should have seen one  
76:57 - of these before if you've worked with JavaScript, 
and it has some metadata about our project here,  
77:04 - and then the scripts section. So you don't need 
to know what all of these scripts are doing.  
77:10 - This code will be available for you. So if you 
want to dive deeper into each one of these you  
77:15 - can. But since we're focusing on Vue here, the 
important part is that we have this start server  
77:22 - that compiles our styles and serves 
our application for us. Now later on,  
77:28 - I'll show you how to start an application 
with the vcli. But I had to use some kind  
77:33 - of a temporary server here in the meantime. 
So that's what live server is doing for us,  
77:39 - it will serve it on a port, similar to what we 
did with the live server plugin that we used in  
77:46 - VS code for the last demo application. So to 
start this application, I'm going to go up to  
77:52 - my terminal option here. And I'm going to 
choose new terminal. And my terminal opens  
77:57 - at the bottom here inside my current folder. And 
I'm going to run the start command. So NPM start,  
78:05 - you can see that automatically opens the 
application on the correct port here. And  
78:10 - if I scroll down, I can see the same page 
that you already saw. Now back in the code,  
78:17 - let's look in the source directory. So the source 
directory is where all of our JavaScript and other  
78:25 - code is going to live. And this is where we'll 
also be adding Vue js. This is our main HTML file  
78:32 - for the application, which is the home page. And 
you can see the links here go to Vues pages inside  
78:40 - of this Vues directory over here. So the links 
will take you to the past orders page and also  
78:46 - the Products page. Now to start working with Vue 
j s, I'm going to start with these cards here.  
78:54 - Right now I want to be able to update and save the 
quantities and be able to add them to the cart. So  
79:00 - in this app dot html file, I'm going to go ahead 
and add my link to Vue j s, just like I had in  
79:07 - the last demo application. So I'm going to go 
to the bottom here and paste the script tag.  
79:14 - So I'm importing vj s. And now I need to write 
some custom vj s code to get my application.  
79:21 - So I will create another script tag. And here 
I'm going to do let app equal Vue dot create  
79:31 - app up a pass it in empty object for right now. 
And then here I'm going to do app dot mount  
79:39 - and then mounted in the same DOM 
element as before with the ID of app.  
79:46 - And let me just check here. Yes, the wrapper 
div here. If I fold it, you can see all of  
79:54 - the content is created inside of app. So to get 
started here I definitely want to create a data  
80:02 - method. And I need to return an object. And 
on this object, I want to track my inventory.  
80:12 - So when someone clicks the Add to Cart button, 
I want to increment or change the amount of  
80:17 - inventory that I have. So inventory itself will 
be an object. And you can see the different  
80:24 - types of produce that I have here. So carrots, 
pineapples, and cherries. And so I'm going to add  
80:31 - these three items to my inventory, carrots, and 
I'm going to initialize all of these with zero.  
80:45 - That looks good. Now I need to find these elements 
inside my application and put the variables there.  
80:53 - So if I look down at these cards, you can 
see here's the recommended product section.  
81:00 - So I have carrots here. And I have the price 
here is the quantity with the input field.  
81:08 - And what I want to do here, 
instead of setting the value,  
81:12 - I want to do v model. And this 
should be inventory, dot carrots.  
81:24 - And then I'm going to copy the same thing for the 
other fields. So come down here to pineapples,  
81:31 - and paste this. And then cherries as well. Okay, 
now let me take a look at that. And you can see  
81:47 - it still shows zero here. Just like before 
I can update a number, we do three carats.  
81:54 - And now the number starts at three. So now we want 
to do something when someone clicks add to cart,  
82:01 - if they have a certain quantity in 
here, we want to add it to a cart total,  
82:07 - we change this back to zero. So to do that, I need 
to create a method, we create my methods object,  
82:15 - I'll create an Add To Cart method. And in this 
method, I need to take in the number of items  
82:27 - that someone wants to add to their cart, and also 
the type of item. So to do this, I'm going to need  
82:37 - another place to store what 
items are actually in the cart.  
82:42 - So I'm going to create a cart here. And for right 
now, I'm just going to copy the same items over.  
82:48 - And then when I call the add to cart method, 
I need to pass in the type of item and  
82:56 - quantity, then I can access my cart variables 
by doing this, that cart and pass in a variable  
83:05 - that I want to access on my cart object, I 
need to use the square brackets, and then I  
83:11 - can pass in type. So it would be the same as 
this cart carrots or this card, pineapples,  
83:17 - or whichever item we want to access. And 
then I'm going to increment by the quantity.  
83:24 - So plus equals quantity. Now I don't have to 
return anything from this function. Because  
83:33 - this is really the action that I want to take 
by calling this function is to update whatever  
83:39 - I have in my cart right now. And to show this, 
I'm just going to log this out in the console  
83:46 - in the browser, so you can see it when I log out 
this cart. And I'm gonna open my console here.  
83:56 - So for carrots, I'm going to add three, you 
can see nothing happened. That is because I  
84:03 - forgot to connect this method to that button. 
So let me go up here and add that button.  
84:12 - So I'm just going to add it 
to carrots right now, here.  
84:20 - So when someone clicks on the Add to Cart 
button, I'm going to call the add to cart  
84:28 - method. Now I need to call it passing in 
a few arguments here. So the first one  
84:35 - is going to be the type of item that I want to 
add to the cart. So this one will be carrots,  
84:42 - and I also need to pass in the quantity. 
To pass in the quantity I need to use the  
84:49 - inventory carats variable. So 
I can just pass that in here.  
84:55 - I could also just call it from inside of my 
function which is Actually what I'm going to do.  
85:03 - So let me scroll down to see my function again. 
And instead of quantity here, instead of passing  
85:09 - in this extra variable, I'm going to just update 
this to this dot, this dot inventory, and then  
85:23 - get the type from there. So let's see 
if this is working. Let me add to cart.  
85:30 - And you can see there is definitely a 
problem because the input value is a string,  
85:37 - and it's trying to add it to the numbers zero, 
so then it turns the expression into a string.  
85:44 - Now Vue has a very easy way of fixing this. And 
this is through a modifier just like we learned  
85:50 - about a little bit in the last demo that we 
did. So let me go up here to the V model.  
85:59 - And we don't want this V model to be considered 
as a string, we want to go ahead and cast it as  
86:04 - a number. So Vue gives us this modifier 
as a shortcut. So v model DOT number.  
86:13 - So now if we look in our application, 
may add to cart. And I can see down here  
86:21 - that my carrots have one item in it, which 
is a number so I can add to cart again.  
86:26 - And now it's two, and I can add multiples. 
And now there's eight carrots in the cart.  
86:33 - Let's stop here for this video. And don't forget 
to download the related code and try out these  
86:38 - features for yourself. In the next video, we 
will work on displaying the items in the cart.  
86:48 - So now we want to hook up this cart 
menu or cart slide out. And right now  
86:54 - it's just static content. So we can 
only see it from the Products page.  
87:00 - And if you look at the code, we go to the 
products dot html, I'm going to fold this header,  
87:07 - and also the main container, which is 
this main part of the page right here.  
87:14 - And now I can just see this aside, 
which is that cart section on the side.  
87:22 - So I basically want to get all of this HTML and 
make it available on my other pages like my app  
87:29 - page, which is the homepage, so that I can use 
Vue j s to trigger opening or closing the menu.  
87:37 - And I also want to make these cart items dynamic. 
So when I add more items to the cart, it can  
87:43 - update the quantity and the price. And I can also 
set a variable. So if there are no items in the  
87:50 - cart, this will display. Now HTML itself doesn't 
have something like an import to import a block  
87:57 - of HTML into another HTML file. A lot of people 
use PHP or some other back end tool for that.  
88:06 - But we can also easily do this in JavaScript. So 
we're going to do this in Vue, j. s, actually.  
88:13 - So I'm going to remove this sidebar from the page 
that it is on right now. And move it into our Vue  
88:21 - application. Of course, our Vue application is 
nested inside of the app dot html page. But we  
88:28 - can move it outside later. So that this menu 
will be accessible on all pages in the future.  
88:35 - So I'm going to fold this Vue create app. And 
now I will paste this HTML aside that I have.  
88:46 - Now it's giving me an error or a couple errors 
right now because it's inside of a script tag.  
88:51 - But I'm going to fix that. So if you recall,  
88:55 - in the earlier lessons, we defined the different 
components inside of our Vue application. So  
89:02 - this is a perfect use case for a component 
right now, because it's this reusable block of  
89:09 - HTML or template that we want to use on 
multiple different pages and also interact with.  
89:16 - So I'm going to register this as a component. 
And I'm just going to call it sidebar.  
89:26 - And now I pass in the object just as before, and 
on this options object, I can set the template  
89:34 - and then use graves. And now I want to grab 
this aside again. And paste it inside of here.  
89:51 - And so now I have this whole aside all of the 
code inside of my template for this component.  
89:59 - And now I can add this To the page with the name 
sidebar. So I'm going to go ahead and add it here.  
90:06 - And remember that our div wraps the whole Vue 
application. So I can put this anywhere inside  
90:12 - of that div with ID of app. I'm going to put it 
here, actually between the main and the footer,  
90:19 - I'm going to put the custom component, sidebar, 
and Vue will handle putting the template I have  
90:28 - down here where this sidebar element is in the 
template. So let me go back to the HTML here,  
90:37 - you can see the sidebar is no longer on the 
Products page. But if I go to the home page,  
90:42 - now I have a sidebar here. So now that the sidebar 
is in Vue js, I can start making it interactive.  
90:49 - And the first thing I want to do is be able 
to hide and show the sidebar. So basically,  
90:55 - when this is clicked, I want to hide it. And then 
when another button is clicked, I want to show it.  
91:01 - So I need to create a variable for this. And 
let me go down to my JavaScript down here.  
91:09 - So inside of my regular create app here, 
in my main options object, I'm going to add  
91:16 - an element to data here. And I'm 
going to call it show sidebar, false.  
91:27 - And now I can come to my sidebar, and simply use 
a vi F, and point it to the variable show sidebar.  
91:38 - So if show sidebar is true, then my custom 
component will show up on the page. If it's false,  
91:45 - then I shouldn't see the sidebar at all. And 
you can see it's false, I don't see any sidebar.  
91:53 - And when I change this to true, I see the sidebar. 
Now I just need to add a toggle for this sidebar  
92:03 - and change it back to false by default. And now 
I can create a method called toggle sidebar.  
92:13 - And I'm going to say this dot show sidebar equals 
the opposite of whatever it is because it will  
92:22 - toggle true or false every time this function is 
run. So I'm going to say it equals not this dot  
92:31 - show sidebar. So if it's currently false, that 
means it will be set equal to true and if it's  
92:38 - true, it will be then set equal to false. Now I 
just have to call this method. So the first place  
92:45 - that I'm going to put it is on this button here, 
this cart button should open that cart sidebar.  
92:53 - I'm going to find that on the page.  
92:57 - Here is that Cart button. And I'm just going 
to add an ad click here. Add click equals  
93:10 - toggle sidebar, I don't need to pass anything 
in so I can just leave it as this. And Vue will  
93:16 - automatically look through my methods and find 
that method. So let me see if that works. Go back  
93:22 - to the page should be able to click on this now. 
And yes, it does toggle. Now the next thing I need  
93:28 - to be able to do is close it and I need to close 
it using this x here. So I'll have to go down to  
93:38 - my template here. And here is the button. 
That's that x that's in the corner of the header  
93:45 - for the sidebar. So I need to add an app click 
on this. And I'll have to do app click. And now  
93:53 - I want to use the function toggle sidebar. But 
because this is wrapped in its own component,  
94:02 - I actually don't have access to the 
toggle sidebar function from here,  
94:06 - I actually have to pass it into this component 
to be able to access it. And I can do that here.  
94:13 - So I'll pass it in as toggle equals toggle 
sidebar, I'm using my method on the vj s  
94:23 - object called toggle sidebar passing it into the 
sidebar component with the name toggle. So inside  
94:31 - my component here, it's going to be called toggle. 
So I'm going to have to accept it as a prop and as  
94:40 - accepted as toggle. And that will be my function 
name. So now I have to rename this function and  
94:46 - call it toggle. Let me see if this works. Go to 
cart click x and it is not working. So I do have  
94:55 - an error here maximum call stack size exceeded. 
So let me see what I do. Wrong in the code.  
95:03 - So I'm importing the prop toggle, the function 
should be called from here of toggle sidebar  
95:11 - that is pointing to toggle sidebar here. And, oh, 
I forgot to make this point to a Vue variable.  
95:19 - Instead, it was just trying to use it as a 
string before which was causing an error.  
95:24 - So now it should be calling the actual toggle 
sidebar function. And let me see that in the code.  
95:34 - Okay, it works just as intended now. So 
now on the sidebar, I want to be displaying  
95:40 - actually dynamic items here. For right now, 
I only have one item hooked up carrots.  
95:46 - And so I'm only going to be 
working with this one item  
95:50 - until the next video. So let's hook this 
item up. When I add items to the cart here,  
95:57 - I should it should update in the cart over here. 
Now to do that, I need to take this cart object  
96:06 - and pass it in to my sidebar, so my sidebar has 
access to it. First, let me do some cleanup here.  
96:17 - With this on multiple lines to 
make it a little bit cleaner.  
96:21 - And I'm going to pass in cart as just 
cart. And now I have to receive this prop  
96:29 - in my component here. So I'm going to do it here 
and call it cart. And now cart that I'm getting  
96:39 - in my component is actually that cart object. So 
since I'm only working with carrots for right now,  
96:46 - I'm going to just assume that and 
only add the number here for carrots.  
96:53 - So I'll use my double mustache syntax. And I 
have that cart variable. So I'll do cart dot  
97:01 - carrots, and that will be the number of 
carrots that I have. So let me go back to here  
97:09 - and automatically updated. Let me add 
three. And my cart now is quantity three.  
97:18 - So if I add, let's add five more now this quantity 
eight in my cart. So now my cart is dynamic. Of  
97:26 - course the total should also be updated based off 
of the quantity should be price times quantity  
97:32 - equals the total for that item. So let me do that 
really quickly. This is the total number. So I'm  
97:40 - just going to have to do this. And let's say cart 
dot carats times the price which it says it's $1.  
97:54 - But here it says 482. So I'm going to use this 
price because $1 isn't that interesting. So I'll  
98:01 - do times 482. And then before that, I need to 
put in dollars. And let's see if that works.  
98:12 - To add to cart. Now there is an error, let's see 
what the error is unexpected token with a dot.  
98:25 - The reason why it's complaining is because $1 sign 
followed by curly braces. in JavaScript, whenever  
98:33 - you put that syntax inside of the backticks that 
we have around this template here. It's called a  
98:40 - template string. And it will parse whatever is 
inside those outer curly braces as JavaScript.  
98:48 - So thinks we're trying to pass in a JavaScript 
object. And it's complaining because cart carrots  
98:54 - is not a valid key. So the only thing we have 
to do here is actually escape the dollar sign.  
99:00 - So JavaScript doesn't think where you're trying 
to use a template string and pass in a variable.  
99:05 - And then Vue can just parse the double curly 
brace syntax on its own. This should work.  
99:15 - So let me go to cart now my cart opens as normal. 
You can see there's zero carrots. And now if I add  
99:24 - two carrots to the cart, and now gives me the 
correct total of 964. Now I also want to have  
99:32 - a total of all the items in the cart. I only 
have one item now but I will have more items  
99:38 - soon. So I'm going to go ahead and add a function 
for that. And then we will hook up the rest of the  
99:44 - items in the next video. So back in the code 
here, this is the total that I want to update.  
99:55 - So I'm going to add this and escape that dollar 
sign that comes with For the double curly braces,  
100:02 - now I could create a formula just in line here and 
say carrot cart carrots, times the carrot price,  
100:10 - plus the second item times that price,  
100:14 - and so on and so on. But that's not going 
to make a lot of sense. And that doesn't  
100:18 - scale for multiple items. So what I'm going 
to do here is actually add a computed object.  
100:32 - And if you remember computed 
watches the changes in variables,  
100:36 - and we'll update the result. So I'll 
call this computed function cart total.  
100:45 - And on my cart appear. Right now I have just 
the number of each item. So for right now,  
100:54 - I'm just going to hard code the price down here. 
So I'm going to return cart dot carats times  
101:04 - the price, which is 482. And now I can 
take this computed variable that I created,  
101:11 - and put it in here. And now the cart total, 
that amount should be updated every single time.  
101:21 - Let's see if this works. Add to cart, open my 
cart. And there is a bug because it's not opening  
101:29 - and stepping through trying to figure 
out why the cart total isn't working.  
101:35 - And it is because I have accessed 
it incorrectly. So cart dot carrots  
101:44 - has to be accessed This is inside of JavaScript, 
so I need to access it on the this context in my  
101:50 - component. So I have to access it on this card 
carrots, and that should come up with my number  
101:57 - times that number. So let me go back to my 
page. And now it opens. And if I add items,  
102:08 - I can see it's $24.10. Of course this isn't 
that pretty. Sometimes it rounds it to one,  
102:18 - or sometimes there's only one decimal, and 
sometimes there's like 10 here. So let's  
102:23 - just run this really quick using something built 
in in JavaScript. So we just get two decimals.  
102:28 - I'm going to wrap this here, that two fixed. 
And then the number two. And let's go back to  
102:38 - the browser, I'm going to open up the cart, add a 
few items. And now it's at two decimals Exactly.  
102:49 - Always two. Okay, I'm going to leave it 
there in this video. Again, please try out  
102:56 - implementing these features on 
your own from the example code,  
102:59 - you should be able to check out the starter 
branch called homepage, one from the repository  
103:06 - and start exactly where I did at the 
beginning of this video. In the next video,  
103:11 - we will cover adding all of the rest of the items 
to the cart by importing them into our JavaScript.  
103:17 - So we can use loops to make our code more 
efficient and not have to hard code everything.  
103:26 - In this video, we are going to pull in dynamic 
content to populate our page. And that will be  
103:33 - from this food dot JSON file. So this actually 
has a list of objects of all different kinds of  
103:41 - groceries that we are going to display in our 
app. It has some information, like the names  
103:48 - as well as the price. And then even if we 
want to add a filter to sort by the type.  
103:54 - So how can we pull this into our application. 
Actually, we are going to use lifecycle hooks  
104:00 - in Vue j s for this. If we come to our 
main Vue application here, below methods,  
104:08 - I am going to add mounted hook just like we had 
before. And inside of here, I am going to fetch  
104:17 - this JSON data. And that's going to be an 
asynchronous call. So I first need to fetch this  
104:25 - from the file name, which is food dot JSON. And 
I'm going to call this the response. And then  
104:34 - I need to call the JSON method on that response. 
Which I put on this line, and that will be data.  
104:42 - And actually I need to add a weight to these 
calls. So res dot JSON, I can call that method.  
104:52 - I'm going to await this as well. And then 
because I'm using a weight, I need to add async  
105:01 - To this mounted method. So now I've 
created the mounted lifecycle hook,  
105:07 - I get my data, which is the array of all of 
the food objects. And now that I have my data,  
105:14 - I am going to set it on state here. So instead of 
inventory here, I'm going to replace inventory,  
105:23 - just get rid of all this dummy data that I have 
right now. Set it as an empty array. This will  
105:34 - definitely break my application right now. But 
it's okay because it's a step toward fixing it.  
105:40 - So now I'm going to set this stat inventory 
equal to data. Let's see if that even works.  
105:52 - And I'm going to come to my Vue here, I can 
see my root. And I can see that the inventory  
106:03 - in my root element here that I have all 15 
items. Good. So I know my data is working. Now,  
106:11 - the next two things I need to do are display 
that data on this page here. And so these are  
106:19 - just three recommended items, actually, all 
of the products will display on this page. So  
106:28 - for the homepage, I'm just going to display the 
first three and slice that list as I loop over it.  
106:36 - So now that I have inventory, I'm actually 
going to come up here to my main container.  
106:44 - And I'm going to come to the recommended 
section and fold all of these cards  
106:52 - and get rid of the last two, 
because I'm only going to need one  
106:57 - for my loop. And now with this initial 
card, I'm going to turn it into a V for loop  
107:06 - and loop over each item in that 
inventory array. So equals product  
107:15 - in inventory. Let me just see what this looks like 
really quick. And yes, it tries to loop through  
107:25 - every single item in the whole inventory. So I'm 
going to slice it at three items now. And I can do  
107:31 - this because inside of my Vue directive, I can put 
valid JavaScript. So we're going to do dot slice  
107:41 - from 023. And now we'll go back to my page. 
And you can see I only have three items. Now,  
107:49 - of course, it is only displaying carrot, 
because that's all still hard coded.  
107:54 - So let me put some dynamic content in here. 
And first with the name, I'm going to put  
108:01 - product dot name. And then I believe it's product 
dot type. Yes. So here, I'll put product dot type.  
108:20 - And for the price, now I do have prices in two 
different currencies, I'm just going to use US  
108:27 - dollars for right now. So I need to 
access price dot USD. And so here,  
108:34 - I'm going to go ahead and escape this. And then 
do product dot price, dot u, s, d. And actually,  
108:48 - this is just an HTML template. This isn't inside 
of a JavaScript template string, so I don't need  
108:55 - to escape that at all. And that should be all of 
the dynamic content that we need for right now.  
109:01 - Let's actually go ahead and update the icon 
as well. So that would be product dot icon.  
109:11 - Make sure that's the right. One. Yes, 
that icon. Okay, so let me go to the page.  
109:21 - Okay, so the icons not working, but all the 
other data is displaying quite nicely. So now  
109:28 - we want to add functionality so that the quantity 
properly updates and we can add it to the cart.  
109:35 - Of course right now, all of these elements have 
the same v model. So that's why they are marrying  
109:41 - each other. So let's change that. Now I'm going to 
go to the V model here which is inventory carrots,  
109:51 - but I need the inventory of the correct item 
instead of just hard coding carrots here. So  
109:58 - because these numbers are In order or because this 
is an ordered list, I'm going to come to my loop  
110:07 - and get the index. Of course, I could use the ID 
as well. But I'll just use the index in the loop  
110:14 - here. And actually, I almost forgot, I also need 
to add a key here since I am looping. So let me  
110:22 - add that key. And I'm going to come down here, 
and inventory, I'm going to pass in that index.  
110:32 - And then I'm going to add a new attribute called 
quantity. And so this should model to an attribute  
110:39 - called quantity, which is not currently on the 
objects, but that's okay, I'll just leave it off.  
110:46 - And this should just add the quantity key to the 
object as needed. So let's see if this works.  
110:54 - Let me go back over here. I'm going to add 
one here, you can see they're not all mirrored  
110:59 - for each other anymore, I'm going to add it to 
cart. And let me see how this represents in my  
111:06 - Vue data here, I can come to inventory. And I can 
see quantity of one. Whatever number I've put this  
111:17 - number mirrors it. But now I need a way to add 
this to the cart. So let me set up the cart then.  
111:27 - And here at this add to cart function, I do 
need to change it because I need to pass in  
111:32 - instead of a string, the dynamic name of 
the item. So I can do product dot name.  
111:41 - And actually here, I didn't think of this, but 
instead of inventory and getting the inventory at  
111:48 - index, I, I already really have that in this 
loop. That's what the product variable is.  
111:55 - So I'm just going to replace that. 
And that should work just fine.  
111:59 - Now, of course, I don't really need this 
index anymore, because for the key, I can use  
112:08 - the ID of the product. So let me just use 
that product ID and that should work okay.  
112:23 - And then this should also mirror 
object to let me see if that does.  
112:27 - Yes, and the quantity is married.  
112:32 - Okay, now for the cart, passing in the product 
name as Add To Cart. Let's take a look at the  
112:39 - add to cart function. We are passing in the type 
here. And then saying this duck card duck type. So  
112:45 - it will be like this cart dot radishes plus 
equals whatever the amount is that this  
112:51 - that inventory. So we do need to do one 
more thing here, we could either search and  
112:58 - find the item by name in the inventory, or 
the easier thing to do would be to pass in  
113:06 - the index of that item. So that's what we're going 
to do. And while I'm changing this, instead of  
113:14 - type now, I think it makes more sense to call 
it name because it is the name of the item.  
113:21 - And we're using type for the type of item 
like vegetable or fruit not the name anymore.  
113:26 - So now to access it in inventory, I want to do 
index and then dot quantity. And that should work.  
113:35 - But we have to actually passing the index here. 
And up here, we're actually going to be passing in  
113:45 - the index actually. So we're going to 
take the index here. And now add to cart.  
113:59 - Okay, so we are getting not a number for 
these values. So I actually want to see what  
114:08 - we are passing in or what gets 
passed in to the function.  
114:15 - And so to debug the function quickly, I'm just 
going to console dot log and name and index.  
114:24 - Now back in the code. So the arguments are 
getting passed into the function just fine.  
114:37 - So stepping back through this, I can see that 
my problem here is that I am doing a plus  
114:45 - equals on cart or this cart name when there 
is no value for that name in the cart yet.  
114:55 - And by the way, I'm going to go ahead and 
get rid of my dummy data. In the cart,  
115:02 - and here, I'm just going to put a simple 
check. So if not this dot cart name,  
115:12 - then I'm going to set this 
cart name and equal to zero.  
115:20 - And now this statement should work. Okay, let 
me try again. So here, I'm going to do two.  
115:29 - And this should update. Let's see. Okay, yes. 
So it's taking a minute, for some reason,  
115:37 - buy, it shows the correct number of each in the 
cart, no more, not a number. Now that shows it  
115:43 - on the cart over here, I want to show it 
in the sidebar. Right now in the sidebar  
115:49 - is hooked up to only look for carrots. 
So let's make the sidebar dynamic now.  
115:57 - So if you remember, the sidebar here is 
in this template. So it's part of the  
116:04 - custom sidebar component that we made. And we are 
already passing the cart in here. Now we actually  
116:11 - need more information because the cart is only 
showing us the number of items in the cart. But  
116:16 - we also want more information from those items, 
such as the price. So I'm going to come up here  
116:26 - to my sidebar, and after cart, I'm going 
to be passing in the inventory as well  
116:35 - as inventory. And now I can receive 
that as a prop in my component.  
116:45 - So basically, we have to loop through 
all of the items in the cart and display  
116:50 - their information now. And we have a table here. 
So we have all of the headers for the table.  
116:58 - And then we can loop through these rows 
and basically make as many rows as we want.  
117:04 - So I'm going to go ahead and add a 
v4 here to loop through each item  
117:10 - in the cart. And here, I do need to use the 
index, I will be using that as a key here.  
117:22 - Okay, and now these are being looped through in 
sidebar. So if I come to the sidebar, I should see  
117:31 - no items right now, of course the totally 
needs to be fixed. And now I can see  
117:39 - I have this item. And now I have another item. So 
now I need to get rid of these hard coded names.  
117:47 - Now to do that, I'm going to go ahead and grab 
the key for these items in the cart. And actually,  
117:55 - because cart is an object, this index is 
actually going to be a key. And then the  
118:02 - third one is index, or just I. So now I have 
access to the item name, which is the key,  
118:11 - the item quantity, which will change this to 
the name, quantity. And here, I can change this  
118:23 - to that key and we should see the names of all 
of the items in our cart. Let's test this out.  
118:31 - Let me add different items to the cart, 
should see radishes and artichokes.  
118:38 - And in the cart, we do indeed see radishes and 
artichokes. Now let's display the quantity.  
118:46 - So here, we can get rid of this and say 
just quantity, which we're pulling off of  
118:57 - the object in the cart. Of course, we already 
know that should work when we add an item here.  
119:04 - And quantity works. Now price is a little bit 
trickier. Because we don't have the price stored  
119:12 - on the cart, we actually have to search through 
inventory for the price. So we're going to make a  
119:19 - helper method for that. First, let me escape this. 
And then we're going to call get price Asin the  
119:28 - name of the item which is the key and we will find 
the price and return it based off of the name.  
119:37 - So after computed here, I'm going to add 
methods for this regular methods object  
119:46 - and add that get price. And basically 
we can access this dot inventory  
119:54 - and to do a dot find. So we want to 
find one of the inventory items. So  
120:01 - I'll call each item product in the function that 
I pass in, and find will loop through all products  
120:08 - in the inventory and try to find whatever item I 
want. So I want the item where the product name  
120:17 - is equal to the name that I'm 
passing into the function.  
120:22 - And when I find that product, I'm going to set 
it equal to a variable here. kind of confusing,  
120:31 - if I call it product again, so maybe 
I'll just call this one p instead.  
120:39 - There we go. And now for the return function, now 
that I have the product saved in this variable,  
120:46 - I can do product. And it should be dot 
price dot USD again. So dot price that USD.  
120:58 - And that should return the price of the item. And 
let's see if that works. So let me get one here  
121:07 - and Vue the cart. And I can indeed see the 
price. Let me try that for artichokes too.  
121:15 - And I can see the price and quantities of the 
item correctly. Now, let me update the function  
121:20 - for total. And so total here needs to be dynamic, 
based off of the whole cart really. So to do this,  
121:29 - I'm actually going to use a helper method. So 
what I'm going to do is take this out of computed,  
121:38 - and instead use it as a method. So since it's 
not computed as a method, I'm going to call it  
121:45 - a verb. So calculate total. And I'm going to 
go ahead and rename the method call down here,  
121:53 - of course, I'll actually be calling that as 
a function now. And I won't be needing this  
122:00 - line of code anymore. So now we basically 
need to calculate the total based off of  
122:10 - the quantity in the cart. And then we have to 
look up the price in the inventory. Fortunately,  
122:16 - we already have a method to be able to look 
up the price. So we're going to just use that.  
122:22 - And the easiest way to do this is 
actually to do object dot values.  
122:30 - And so object dot values can give me an easy 
array of values out of an object. And because cart  
122:41 - is an object, I'm not going to loop through it 
directly, I'm just going to grab all of the values  
122:46 - out. So I will pass in cart. And now I have an 
array of all of the values here, which are the  
122:54 - quantities that I want. So out of that array, I'm 
going to reduce it. Now the reduced function is  
123:02 - just a built in JavaScript function, where I save 
an accumulator. Some people like to call it a Some  
123:10 - call it an accumulator, because that's what it 
uses on MDN. And basically, I'm calculating a  
123:16 - sum on each iteration through the loop. I also 
have my current item that's being looped through.  
123:26 - And then I can also get the index of that item 
in the function. And basically, what I want to do  
123:34 - is return the accumulator, sum total, whatever 
you want to call it, plus the current item or the  
123:43 - current value, because I'm looping through all of 
the values on the cart here. And I need the value  
123:50 - times the price. So I'm going to have to call 
this dot get price. And then I need to pass in the  
123:59 - name of the item that I want to get the price for. 
So the easiest way to do that is to also make an  
124:06 - array of names. So I'm going to do that by using 
this time object keys. And I will do this cart,  
124:16 - get all of the keys this time off of cart. 
And actually, I forgot to put this here.  
124:23 - And so I will do the current 
value times this dot get price.  
124:28 - And now that I have the names here, 
I'm just going to look up by the index.  
124:35 - So I can pass a names index to that this dot 
get price function, and that should work.  
124:43 - For the function. I forgot to put an arrow 
here. And now for the total variable.  
124:51 - I just stored it in a variable to explicitly 
name it. All I need to do now is return the total  
124:59 - now, this time function works, there 
might be a more optimized way to do this.  
125:04 - This is just to demonstrate how to calculate a 
total using a VJs method for this application. And  
125:11 - it's basically just using regular JavaScript. So 
let me add items to the cart here. And of course,  
125:18 - of course, this total, we haven't done yet. But 
we do have two radishes, and the total says $2. So  
125:26 - let's add some artichokes. And now we have a total 
of $30.32. As you can see, those are the correct  
125:36 - values, what I believe is happening is because 
objects are unordered, and arrays are ordered,  
125:44 - that the names and the object values, they aren't 
being listed in the array in the same order.  
125:54 - So I'm going to have to instead of making two 
separate arrays here, I'm going to get rid of  
125:59 - this one. And here, I will just have to change 
this to entries. And now my current value here  
126:07 - will basically be in array, that will be the 
key and the value, each time looping through  
126:17 - this larger array. So for the value, now, I 
will have to access it at the first index. And  
126:29 - instead of names here, I can access the name 
at the current item at the zeroeth index,  
126:38 - that all looks good. The last thing I'm 
going to do is add an initial value here.  
126:44 - And this means that the accumulator will 
start at zero. And also, if there are no items  
126:51 - in this array, which there aren't any to start, 
that means the number will just be zero total.  
126:58 - And for here for the total, actually, 
I'm going to use that method again,  
127:03 - that we use before, which was too 
fixed. So I could do it to two decimals,  
127:08 - which is what I want in my cart. Let me see if 
this works. And this is exactly what I want here.  
127:17 - So let me add items. Yes. And the 
price is exactly right. One artichoke,  
127:25 - and the price still works there. Now what about 
the total here, that should be easy enough to do  
127:32 - with our get price method. So let's go down to the 
total. Right now it's hard coded as carrots, which  
127:38 - doesn't exist. So now I can do just the quantity, 
which is the quantity of the item in the cart.  
127:49 - And then I'll call the get price method. 
And I'm going to pass in the key,  
127:56 - which is the name of the item. And so that should 
multiply by the total. Let's see if that works.  
128:04 - add an item and check out the cart. 
And we do indeed see the total here.  
128:10 - Now it still says no items in cart, let's go ahead 
and fix that. So this should only show if in fact,  
128:17 - there are no items. And so I'm going to add a V if 
here. And just to speed this up, we're going to do  
128:26 - object that keys and then check the cart object. 
So if there are no keys on the cart object  
128:36 - that will be zero, which is a falsie value. 
And let's see if that works. Let's go down here  
128:44 - to radishes, add one in the cart, we 
are still seeing this no items in cart.  
128:52 - So I believe I have to do length 
here. Let's see if that works.  
128:58 - Okay, that does work, but I have it 
backwards. So I basically need to do if  
129:07 - not, because if the length is zero, I 
want to show this. And if it's not zero,  
129:14 - then I don't want to show this no items in cart 
because there will be items in the cart. So let's  
129:21 - see if that works. Let's first go here, it does 
show no items in cart. And now let me go here.  
129:28 - And now it changes to the item in the cart. 
And all of the totals are shown correctly  
129:35 - and the quantities updated and all of that 
stuff. The only other thing I want to do is  
129:40 - provide full CRUD operations, and this delete does 
not work. So I'm going to hook up the Delete now.  
129:48 - So you can see the Delete is here on this 
button for remove. And so I'm going to add  
129:54 - a function here and actually this function 
will have to be not inside of this component.  
130:00 - But inside of the parent component, which 
is my main Vue application in this case,  
130:06 - so I'm going to do a click. So when this 
button is clicked, I'm going to say remove  
130:13 - item to remove the item from the cart, and 
then I need to pass in the name of the item,  
130:19 - which is the key. Now this remove item is going 
to have to be a function passed in as a prop here.  
130:26 - Because I can't mutate props, I couldn't change 
the inventory, or the cart actually directly  
130:33 - from this component, I have to change it from 
the parent component where it originates. So  
130:41 - I'll take a remove item function, let me go ahead 
and pass that in. Remove item equals remove item.  
130:52 - And now I have to create that function here as one 
of these methods. So let me add that remove item,  
131:01 - this will take in the item name. And I am 
going to remove it from the cart basically.  
131:08 - So I can just remove JavaScript, delete 
this cart name. Let's see if that works.  
131:20 - Let me add some vegetables to my 
cart. And now I will remove them.  
131:27 - And it does not remove let's see if I'm getting 
an error. Remove item is not a function. So let's  
131:34 - see why it's not considered a function. I 
do have it in methods here, remove item.  
131:42 - Let's go here. This is remove item 
that I'm passing into my sidebar.  
131:49 - I'm also accepting it as a prop in 
the sidebar here. Let me get rid  
131:56 - of computed. So it's not recognizing this as a 
function. So what I'm going to do is rename it  
132:04 - in the child component. Now, this is a 
workaround only for the CDN, you won't have this  
132:11 - problem if you were using Vue JS from NPM. But I'm 
just renaming the function in app component here.  
132:22 - There we go. And of course, I need to pass 
it in as the name remove. So I basically  
132:30 - gave it a different name for the child 
component and for the parent component.  
132:36 - And let's see if it recognizes this 
as a function. Now, I will come here.  
132:44 - And I can remove it from the cart. Awesome. 
Of course, when I add things to the cart,  
132:50 - I do want the number to clear here. So let me take 
care of that really quickly. In Add To Cart here,  
132:59 - just really quickly, I'm going to set 
this to zero. Let's see if that works.  
133:08 - And back to zero, and it is in the 
cart now. Awesome. The only other thing  
133:17 - is that the cart does show zero items, even 
when there are items in it. That's because  
133:22 - the number is not dynamic. So let me change that 
really quickly. Here, inside of the parentheses,  
133:32 - I'm going to change this to be dynamic. And 
I'm just going to call the variable total  
133:39 - quantity. Okay, and now I 
need to make this variable.  
133:46 - So what I'm going to do is 
create a computed object here.  
133:55 - And I'm going to say total quantity is basically 
the sum of all of the quantities in the cart.  
134:08 - And to do this, I'm going to use another reduce 
method, I'm going to say object, that values  
134:19 - pass in this cart. And then I will reduce 
those to sum up all of the numbers.  
134:27 - So I have my accumulator and my current 
value. And then all I need to do is add  
134:39 - the accumulator and current value together. Of 
course, I'll set a default of zero here as a  
134:45 - starting point or initial value. And I'm just 
going to return this directly this time. Let  
134:52 - me see if that worked. Right now it says zero, but 
let me add items Notes three, let me add one more.  
135:04 - And now it's four. So the quantity is working. 
If I remove one, now it's just one. So that is  
135:10 - a dynamic value now. And that is basically 
it for the homepage here. In the next video,  
135:18 - we are going to move the Vue JS code outside 
of the app dot html file. So we can see  
135:25 - how it can work in multiple different pages. And 
also some of the struggles that we might run into  
135:32 - trying to build a multi page site via the 
Vue CDN and trying to do things like share  
135:41 - data across pages and stuff like that. If you 
want to see the starter code for this video,  
135:46 - make sure you check out the branch and the repo 
called homepage, number two, or homepage, two.  
135:57 - Hi, everyone, welcome back. First, I want 
to reVue what we did in the last video,  
136:02 - we connected the cart slide out draw menu on 
the right here and made that fully functional.  
136:10 - And then we added an actual loop, as well as 
functionality to be able to add items to our  
136:16 - cart here. Now this is only one page, of course. 
So we also have the Products page here. So if  
136:23 - I go to Products page, you can see the URL 
changes to go to the products dot html page.  
136:30 - Now if I look at this in my code, so let me open 
up the source. And this app dot html file. Again,  
136:38 - you can see here is the header with all of the 
links on it. I'm going to fold that real quick.  
136:44 - And then you can see the different sections of 
the page, including that sidebar that slides out  
136:49 - that we actually want on every page. But now it's 
kind of just hard coded into this homepage. I can  
136:57 - also go to Vues here. So you can see in the header 
actually. So when I click on products, it goes to  
137:04 - Vues slash products, that HTML. So it's actually 
navigating me to this products dot html page.  
137:12 - And if you look at the header 
here, here's the whole page,  
137:16 - including a completely separate div with ID of app 
where we would have to inject our Vue JS code. You  
137:25 - can see we already did that on this page, because 
our Vue j s is in the script down here. And we are  
137:35 - rendering it or mounting it inside of that 
div. But if I go to products, we have no  
137:42 - JavaScript, no interaction, 
everything is hard coded.  
137:46 - We also have a duplicate header. So this 
is exactly the same thing as the header on  
137:54 - this page is just copy pasted into the HTML on 
this page. Of course, we don't want to do that  
138:02 - everywhere. We don't want to have a copy 
pasted header for all of our different pages.  
138:09 - Not only that, we would have to copy 
paste the whole cart sidebar as well.  
138:17 - So to make this code reusable here, we need 
to extract these things into other files.  
138:25 - Now, this is not easy to do for plain HTML. But 
we can use a Vue component like we did before  
138:35 - with the sidebar. So I'm actually going to extract 
all of this out into a separate JavaScript file.  
139:07 - And now import this file into my HTML.  
139:19 - And you can see my page is still working.  
139:24 - My cart is still fully functional. And what 
this allows me to do is now take this file  
139:31 - this JavaScript file that I have separated and 
import it also into my products dot html file.  
139:39 - And I'm actually going to grab both of 
the script tags so I can also have my Vue  
139:47 - and I'm going to put them at the bottom here, 
except I'm going to have to go up a directory here  
139:55 - because my app.js file lives outside of my Vues, 
right? Here's products. And I need to get upload  
140:04 - folder to app. So I have to do dot dot. And 
that should reference the correct app.js file.  
140:11 - Let me see if that's working for go 
to products. And you can see the cart  
140:16 - page doesn't open. But that's because I 
have not hooked up the cart button yet.  
140:22 - So I will have to copy this over from the app dot 
html file for right now. So if I go here, I can  
140:34 - just take the same code. And now it should 
reference that same toggle sidebar function,  
140:42 - and also display the total quantity correctly as 
well, because I am importing the same Vue j s code  
140:49 - in the script tag here. Now, you can see that the 
cart variable displays just fine on the Products  
140:56 - page. But if I click here, of course, the cart 
doesn't open. Because the cart is only available  
141:02 - on this page, I only have the sidebar 
component here. And the sidebar component,  
141:11 - you know is actually a custom 
component that we made in vj s.  
141:16 - So we can put that on any page where we import 
the vj s. So I'm just going to put it here below  
141:25 - this main tag. And with all the same variables, 
there should be fine, because we're sharing the  
141:31 - same Vue JS script. Let me save that. Now 
you can see I can toggle the cart here.  
141:39 - And all of this is pretty much the same thing that 
we did on the homepage, down here where we looped  
141:45 - through the different types of foods, we would 
do the same thing over here on the Products page,  
141:53 - loop through them hook up in each individual 
number, then hook up the Add to Cart button  
141:58 - so that it would actually display in the cart over 
here. Now if I add items here, may add a couple to  
142:07 - cart can see I have three in my cart here. If I go 
to products, you can see the page refreshed. And  
142:14 - now there are no items in my cart. So though there 
is some functionality to this application. So far,  
142:22 - there are a few problems that we have run into 
with just using a CDN to import Vue j s. And  
142:31 - that is how do we share data across pages and 
across pager refreshes. So here at the homepage,  
142:40 - when I add something to the cart here, it 
leaves the car as soon as the page refreshes.  
142:45 - So as soon as I navigate to another page, 
it's gone. Now how would I fix that problem.  
142:52 - So generally, in front end applications, 
we would want to do something like persist  
142:59 - our data or save our data somewhere. One easy way 
to do that in the browser. And one very common way  
143:06 - is to go here in application. And you can 
see there's different types of storage.  
143:11 - This is in browser storage. And local storage 
will persist even if the page is refreshed. So we  
143:21 - can actually save the data like our current data 
into local storage here. And then if we refresh  
143:29 - or anything, we will just automatically try to 
pull anything that's saved from local storage  
143:35 - for the way our application is set up right now. 
That would be every time we navigate to a new  
143:39 - page, we would have to check local storage, see 
if there's anything in there and then pull it into  
143:46 - our application. It's kind of a workaround for 
our setup. So one way to fix this would actually  
143:54 - be to create a single page application with Vue 
where the front end would actually do the routing.  
144:01 - Instead of our server. In this case, we're just 
using a live server in VS code. But our servers  
144:08 - serving at pages every time we go to a new URL 
here. And that's why it has to refresh because  
144:14 - it's coming from the server. Whereas if we make 
a single page application, there will be no  
144:19 - page refreshes, we will go seamlessly from page to 
page because our front end in other words, Vue j S  
144:26 - will be routing us to different pages. The 
second problem, as you can see is sharing code.  
144:33 - We do have some duplicate code across pages. 
Of course, we are reusing the same sidebar  
144:41 - template here, this sidebar template. We just 
registered it as a Vue template, a Vue component  
144:48 - called sidebar and we can use that on any page. 
Now. We could do the same thing with header as  
144:53 - well. And we would probably do that if we were 
going to build an application using the CDN.  
145:00 - We get to extract this into a template as well. 
And then we would have to do the same thing for  
145:06 - the past orders page. Of course, none of this is 
dynamic or set up yet. But the easiest thing to do  
145:13 - is actually to set up our project with something 
called the Vue see ally. As our code base grows,  
145:19 - it will be very difficult to manage many different 
components, if we are managing them just importing  
145:25 - different files into all of our different 
HTML files. But there is a much easier way.  
145:33 - And that is with the Vue COI This is why it was 
created. The vcli basically gives us one command,  
145:42 - Vue create, and our project name, and 
then it creates a whole project for us.  
145:48 - It walks us through a setup wizard asks us 
what features we want. And then we'll create  
145:55 - all of the files, folders and build tools 
necessary for a robust front end single page  
146:03 - application. So in the next video, we are going 
to take all of our code currently in HTML files  
146:11 - and our JavaScript file and convert it to a Vue 
COI application. I'll see you in the next video.  
146:23 - Let's get started with the Vue COI, 
I am at sea ally dot Vue j s.org.  
146:30 - And I'm just going to click getting started. And 
if I go over to the side, click on installation,  
146:36 - I can see that it is prompting me to globally 
install this Vue COI package at Vue slash c li  
146:47 - so that from my command line or terminal, I will 
be able to use a Vue command to create projects.  
146:54 - Now you might see some places on the internet 
that install a different package without the  
147:00 - at sign in slash dist Vue dash c li or something 
like that. That is an older version of the package  
147:08 - Vue basically has its own namespace and then each 
one of its packages are after the forward slash.  
147:16 - So to install vcli you can copy this command 
here. I'm going to go to my terminal.  
147:33 - Now I have the Vue COI installed, I can 
check and make sure that it's installed  
147:39 - by checking the version. Right 
now I have version 4.5 point 11.  
147:46 - And now I want to use it to create an actual 
Vue project. And I can do this through the Vue,  
147:54 - create command, and then give it the name of the 
project that I'm going to create. If you want to  
148:01 - see the documentation for this command, you can 
come over here under basics to creating a project  
148:09 - and read about how Vue create works here. 
I'm going to go ahead and say Vue create  
148:19 - product and cart as the name 
of my project and click Enter.  
148:27 - Now, if you've used some tools like create 
react app, you will notice that here,  
148:33 - it's a little bit different. It doesn't just 
bootstrap the whole project for you right away,  
148:39 - you actually get to pick your own options, and 
the packages that you want to install and use.  
148:47 - These top four options here are actually custom 
options that I have created myself. Vue gives us  
148:54 - these two defaults right now one is for version 
two of you, and one is for version three.  
149:02 - And then it also gives us the option 
at the bottom to manually select  
149:05 - features. So I'm going to go ahead and do that 
just to show you how it works. So I basically  
149:13 - use the arrow keys to go down and then I can 
click enter when I want to select something.  
149:20 - Now you'll notice that this list here is multi 
select. And if I press spacebar, I can select or  
149:27 - deselect an item. Of course I want to choose my 
Vue version because I want to use version three.  
149:34 - I definitely need to have Babel setup for me for 
transpiling my Vue code, I'm going to need routing  
149:41 - in this application. I'm also going to use state 
management with Vue x. But I'm going to add that  
149:47 - later to show you how to add a Vue COI package 
after you've already set up your application,  
149:55 - CSS preprocessors or things like sass, if you 
think you will want To use sass in the future,  
150:01 - it's a good idea to go ahead and set it up. Now, 
I believe this also works with less and stylus  
150:06 - as well. And then I definitely want linting and 
formatting in this project. And I can optionally  
150:13 - select testing if I want, which, but I'm not 
going to do that this time. So once I'm ready,  
150:19 - I'm going to hit enter, it takes me to the next 
step, I can choose the version of uJs, arrow down.  
150:26 - And I'm going to choose version three, use history 
mode for the router. This is a pretty small coding  
150:33 - change. But it's usually what you want to in 
a project. This basically only affects the URL  
150:41 - of your project from a user point of Vue. So 
if you want your routes to be after a hashtag,  
150:48 - it will use hash router. If you want your ads to 
be after just a normal forward slash, like any  
150:55 - website, you would navigate to in your browser, 
then you can just go ahead and use history router.  
151:00 - And I'm going to use history router. Now it's 
asking me to pick a linter, and formatter,  
151:06 - so I'm going to go ahead and pick es lint 
plus the standard config that it has for VJs.  
151:13 - Click enter lint files when they're saved, I'm 
going to choose to put my configuration in the  
151:21 - package dot JSON this time, just so I don't have a 
bunch of extra config files. Usually when you have  
151:27 - larger projects, you want dedicated config files. 
So it's not cluttering up your package dot JSON.  
151:34 - Do I want to save this as a preset? No, I do not 
this time. But if you remember at the beginning of  
151:40 - this walkthrough, the four top options, those were 
presets that I had saved in the past, but here I'm  
151:48 - just going to say no. Here, it's basically setting 
up my whole project with the file structure and  
151:55 - everything. And it's also running an npm install, 
you can see it successfully created my project.  
152:03 - If I list the folders inside now, I have 
this new folder that was created for me  
152:10 - by Vue JS called product and cart. I'm going 
to go into that folder. And you can see when  
152:18 - you spawn up the project for me, it 
also initialize a git repository for me,  
152:25 - and saved all of the changes that it did initially 
as a commit. So let me open this up in VS code.  
152:33 - And I have my complete project created for me by 
Vue. In the next video, we will look through all  
152:40 - of these folders and files and give you a little 
bit of a tour of how your Vue project is laid out.  
152:51 - Let's look at all of these files 
and folders Have you spun up for us.  
152:55 - Now looking at this, this looks pretty much like 
the last project that we worked on with static  
153:01 - HTML, CSS and JavaScript files. And that was by 
design, to give you the same style of coding and  
153:09 - file structure that you would be using in a real 
Vue application. This however, is much much nicer.  
153:17 - Starting with the Vue, see ally gives us 
a lot more features out of the box that  
153:23 - we can see in the package dot JSON, we have three 
scripts here by default, there would be more if  
153:29 - you choose to install the testing packages as 
well, because we installed a linter, the vcli  
153:36 - gives us this link command. And then it also gives 
us our main two commands for the Vue application  
153:42 - for development locally, it gives us this serve 
command, which basically calls this package vcli  
153:51 - service. That's from Vue, j s gives it the serve 
command and it will run a development server for  
153:57 - us. So there's no more of the old complicated 
server setup that we had in the last version of  
154:06 - this in the last application. The build command is 
really for when we want to host our project live.  
154:14 - This will generate production ready files for 
you like your HTML, CSS, and JavaScript. So you  
154:21 - can deploy them and have a live website somewhere. 
We're just going to be talking about this command  
154:28 - in this video. And to give you an idea of 
what it does, let's go ahead and run it.  
154:35 - I can use NPM to run the 
command. So NPM run serve.  
154:45 - And now my app is running at Port 8080. 
If I highlight something on the terminal,  
154:50 - it automatically copies when it 
come to my browser, open a new tab  
154:56 - and I can see it gives me an app or already 
set up out of the box. And because we chose to  
155:04 - install a router as well, it installed the default 
Vue router, which is also called Vue router.  
155:12 - And you can see I can go to different page routes. 
Now this isn't the same as our last application,  
155:19 - because there's no page refresh in between page 
routes. These are not HTML links. This is just a  
155:25 - JavaScript router, rendering hiding or showing 
different pages of this application. You also  
155:32 - notice from the homepage, it's just Port 8080. 
When you go to the about page at ad slash about,  
155:40 - if we look in the public folder here, you can see 
here's our HTML page. And we have a div of ID app.  
155:48 - And this is where our app will be injected. 
But also when our application is built. Under  
155:56 - the hood, this Vue COI service command is running 
Webpack, and bundling all of our files together,  
156:05 - and also handling running Babel to transpile our 
files, and so all of the JavaScript and everything  
156:13 - will be injected as script tags as well here. 
But we generally don't have to worry about this  
156:19 - index dot HTML file in a Vue project. Because 
again, most of what we will be doing is in the  
156:27 - source folder right here. So we have a main 
dot j. s file that is always created for us.  
156:35 - So this is basically the same thing that we did in 
the previous application. If you do c Vue to code,  
156:43 - this file will look a little bit different. But 
you'll still be able to see the different parts,  
156:49 - just the organization and syntax is a little 
bit different. Just like before, we have to pass  
156:55 - in a root component, we chain on any packages 
that we want to use, in this case, the router,  
157:03 - and then we mount that to the DOM. 
So inside of the div with ID of app.  
157:10 - And you could also rewrite this as const app.  
157:17 - And then app dot use router, and then app dot 
mount. That's a bit easier to parse through as  
157:24 - you add more packages. Now, when we are looking 
at this initial page, where does all of this  
157:32 - come from? Let's take a look. So we have our 
main component app. But you'll notice in app,  
157:40 - there's no real content here. All it is, is 
a div. This is basically the top navigation.  
157:48 - Now, where did this router link come 
from? This is a custom component actually.  
157:54 - And if you look at our main j s, when we use 
App dot use router, we are actually given  
158:02 - some components like router link, as 
well as router Vue. Now router link  
158:08 - is actually a substitution for using 
the anchor tag to link to another page.  
158:15 - Except router link is made by Vue router, 
specifically for single page application routing,  
158:24 - where our JavaScript handles the routing. 
Instead of linking to a separate HTML page.  
158:31 - Of course, we only have one HTML page. And all 
of our static content is injected into that one  
158:39 - page. And the router handles intercepting the 
route and making it appear as though you've  
158:44 - navigated to another page. While really it's just 
showing and hiding different elements on the DOM.  
158:51 - So we have these two router links. And then 
what does router Vue do? So router Vue,  
158:57 - is actually our page content. And our router 
will handle replacing this router Vue tag  
159:08 - with whatever component we tell it to in our 
routes file that we are about to look at.  
159:15 - So router Vue is just a temporary placeholder 
for whatever we put on the page. And you'll see  
159:23 - as we navigate to different pages, those home 
and about links at the top of this file. Those  
159:29 - will stay no matter what page we navigate to. But 
all of the content below it will change because  
159:36 - those are the components getting injected into 
this router Vue area here. If we look into our  
159:44 - router index.js file here, we can see that we 
are using the Vue router API to create a router  
159:55 - and when we create a router here, we are 
passing in two things. So the routes,  
160:02 - which is an array of all our routes that we 
have in the application, and then history mode,  
160:08 - it set this up for us because we chose to 
use history mode. And Vue is handling all  
160:14 - of that under the hood. But let's talk about the 
routes here. So we have the default home route,  
160:21 - which is this page. And then we also have the 
about page, which is found at this route. Now,  
160:29 - you don't have to worry about code splitting, 
and lazy loading and all of that other stuff.  
160:34 - Those are more advanced routing concepts. 
So I'm going to get rid of that line.  
160:42 - And then just import the about component.  
160:50 - Just like the home component. Now you basically 
define routes here. And instead of importing  
160:57 - the components that you want to show on a page 
into your app dot Vue, you just use a router Vue  
161:05 - tag here. And then you import any of your Vue 
components, like home and about into this file,  
161:15 - you define the path where that component 
can be found it the name of that component,  
161:21 - now the name is mostly used for routing, and then 
you tell it which component will be found at that  
161:30 - path. So at the home path, we're going to find the 
home component. Now, where's the home component,  
161:37 - you can see that it is in Vues slash home. So 
let's go in here. And we can see that this is the  
161:47 - component, it has an image, which is the Vue logo 
on top. And then it also imports another component  
161:55 - into itself. Now this component is not in the 
Vues folder, it's in the components directory.  
162:02 - Now why is it in the components directory, instead 
of just one folder for all Vue files, basically,  
162:11 - in front end applications, files are usually 
split up between Vues, or pages. So basically,  
162:20 - anything in this Vues folder will be connected to 
the router. So they will have their own routes,  
162:26 - there'll be their own pages. Anything in the 
components folder are things that are imported  
162:32 - into other components. They're meant to be parts 
of pages or reusable components that you use  
162:39 - throughout your application. Basically, anything 
in the Vues folder is connected to the router.  
162:45 - And if it's not connected to the router, 
and just imported into another component,  
162:50 - then put it in the components folder. 
And you'll see at the home route,  
162:54 - there's a Vue image at the top. And 
then there are all of these links here.  
163:04 - And that's exactly what we see in the home route.  
163:09 - Now if we go to the about page, it's not importing 
any other components or doing anything fancy.  
163:16 - There's only this h1. So I header with that text, 
which is what we see when we go to the about page.  
163:27 - assets, of course, are a place for usually 
CSS images, anything like that to live.  
163:35 - Sometimes you will see other folders created here 
in Vue projects. But these are the basic ones.  
163:41 - The only one that we are going 
to add later is the store folder.  
163:44 - And we'll talk about that in a few videos. 
In the next video, we are going to start  
163:50 - transferring our content over from our old 
static application into our Vue application.  
164:01 - Let's start moving things over one 
by one starting with the homepage.  
164:07 - I'm going to go over to my original code here 
into source and then go into my app dot html here.  
164:20 - The first thing that I need 
to grab is this header.  
164:23 - Now I do have some JavaScript functionality in 
here and I'll handle hooking that up in a minute.  
164:30 - But let me just copy paste for right now. 
And move this over to a new file. Now I'm  
164:38 - going to need it on this homepage here. But since 
this header is actually my app wide navigation,  
164:46 - I am actually going to want to replace the 
navigation here. So that I can use this and see  
164:54 - this on any page. For right now I'm going to get 
rid of these. Now there's a bit of cleanup that  
165:08 - I need to do here. Because these anchor tags need 
to be changed to the Vue router router link tags.  
165:34 - And now I need an actual route. So 
instead of pointing to an HTML file,  
165:41 - I am going to give it a route that will be 
in my router here linked to a component.  
165:49 - So I have this products dot html here, what I'm 
going to do is changed that to slash products.  
165:58 - Of course, this can't be an H ref, this will be 
two, since that's expected by the router link,  
166:06 - also need to change this from h ref to two. And 
I can just call this route past orders get rid of  
166:13 - the dot html. And here as well change this to 
two. And this should just be a forward slash.  
166:24 - I'm not going to worry about this yet. 
This last router link at the bottom,  
166:30 - I'm going to just comment that for right now. And 
basically I need to create these three components  
166:37 - that are linked to the routes. Now I already 
have the home route here that is linked to the  
166:44 - home component, I'm actually going to get rid of 
about and I'm going to change this to products.  
167:00 - I'm going to have to create a new component.  
167:12 - Now let me delete about from here.  
167:18 - And let me create a new file. 
I'll call this products dot Vue.  
167:27 - Now this is a little bit different. Instead of 
calling this just a regular JavaScript file,  
167:34 - with the extension j s Vue has a custom file 
extension, which is dot Vue. All of these dot Vue  
167:41 - files are parsed by the Vue and web pack setup, 
that the Vue COI sets up for us. So using these  
167:50 - dot Vue files, we can put our HTML template, our 
JavaScript, and even our CSS all in the same file  
168:00 - that gets parsed and all put together and 
bundled by the tools that vcli sets up for us.  
168:07 - Now I have a new file, I'm just 
going to create a template in here.  
168:14 - And I have four spaces, I'm going 
to switch to using two spaces  
168:19 - for tab spacing. And I'm just gonna 
put h1 products for right now.  
168:28 - Alright, before we get too 
far, let's see how this looks.  
168:32 - And we do have a Products page and home page 
now. But of course, this is completely unstyled.  
168:40 - Let's pause here and start to bring over 
some of the styles in the next video.  
168:49 - Let's start to move our styles over.  
168:52 - Now our styles are going to live inside of this 
assets folder. And I can go ahead and create a  
168:59 - folder inside of there called styles. 
Now how do I use styles in my project.  
169:08 - If you come to this app component here, you will 
notice that there is a style tag at the bottom  
169:16 - of the component. And these are what is providing 
custom styles for the application. If I look in my  
169:25 - browser, this is what is styling and centering 
the elements. If I get rid of these styles,  
169:36 - this is what it looks like without 
any of those custom styles.  
169:42 - In any Vue component, you can add styles 
directly inside of that component.  
169:49 - So if I wanted to do something I could 
change all h1 tags to the color of  
170:02 - Blue. And you'll notice this is just plain CSS 
here that you can write inside of these Vue files.  
170:11 - Now, if I go here, you can see that this is 
an h1 tag, and it has changed to being blue.  
170:20 - Also on the products tag that is blue 
as well, because that is another h1.  
170:25 - Now, if I look at this, though, those h1 elements 
are nowhere to be found in this component. Those  
170:33 - are actually in other components. But by default, 
the style tag globally affects anything in the  
170:41 - application. So if I put a style tag here, even 
though it's in the app dot Vue file, anywhere in  
170:47 - my application that has an h1 tag can be affected 
by this. Now, this is generally not good practice.  
170:55 - Because if you want to globally change a style, 
you should put that in a separate style sheet.  
171:02 - So in some other dot CSS file, here, if I'm 
putting styles inside of my app dot Vue file,  
171:10 - generally, what I intend to do is only let it 
affect the app dot Vue file. So it won't change  
171:20 - styles in any other component. Right, it will only 
affect whatever is in my template in this file.  
171:26 - And that's why I use the scope keyword here. 
Now, now that I've added the scope keyword, so  
171:33 - you can see that the text changed back to black. 
Because now that I've scoped this, it is only  
171:41 - affecting styles within this Vue component, not 
in other components throughout the application.  
171:49 - Now, if I wanted to add an external stylesheet, 
let me just go ahead and create a temporary one  
171:57 - here. I'll call this main dot CSS. And let me 
paste in my last style. And I'll change the color.  
172:07 - This will not affect my application yet, because 
I have to import the CSS file. Now instead of  
172:13 - importing this into one of my HTML files, what 
Vue does is allow me to import it directly into  
172:22 - my JavaScript. So generally, that would be this 
main.js file, what I can do is import from assets,  
172:33 - styles. And then that main dot CSS, and the Vue, 
see ally set up Webpack for me in such a way that  
172:44 - I can import styles directly into my JavaScript. 
And it is all handled by the tooling.  
172:51 - So now if I go back to my browser, it's 
a little bit darker. But you can tell  
172:56 - that this is purple now. Because I am 
importing it globally, into my project  
173:04 - from this main dot CSS file. Those are the basics 
of how you import styles into an application. Now,  
173:13 - if I come back to my original static application 
with our HTML files that we were using,  
173:21 - if I come to styles here, you can see that these 
aren't just CSS files. They are sass files,  
173:28 - for the most part. So how do I get these into 
my project if they aren't standard CSS files.  
173:35 - So Vue also has built in ways 
of handling this, let me copy  
173:43 - these styles. And I'm going to delete this 
styles folder here. And I'm going to paste.  
173:54 - So I pasted in this styles folder from my other 
project. And now if I look in this folder,  
174:03 - there is one file called style dot SCSS, which is 
a sass file. And this imports all of the rest of  
174:14 - the files here, all of my other sass files. Now 
it is this file that I really want to import into  
174:21 - my project to get all of my styles. I'm going to 
comment this out. And now I'll import that sass  
174:30 - file directly from assets slash styles, slash 
style dot s CSS. I'll save that. And now you  
174:42 - can see that it is giving me an error saying can't 
resolve sass loader so it's trying to load those  
174:49 - sass files. But since they aren't regular CSS, we 
have to add another module to be able to import  
174:57 - those files. And that is like it says SAS loader. 
If we look in the Vue COI documentation, and go  
175:06 - to working with CSS under development, we can see 
that it has this section on pre processors. Now,  
175:15 - as it mentioned, we can select our preprocessor 
when we're creating the project, meaning when we  
175:21 - ran that first Vue, create a project name, that 
command would take us through setting up SAS  
175:27 - automatically. Now, since we did not choose 
SAS back, then when we were setting it up,  
175:34 - there are ways of adding these packages, which 
you can do through this command, npm install,  
175:42 - and then installing the sass loader. And also the 
sass package. Now, if I scroll down a little bit,  
175:49 - it is giving me this note about Webpack 
four, which is what I'm using in vcli. Four,  
175:56 - I have to make sure I have a compatible version 
of these loaders. So I am going to go ahead and  
176:02 - grab this npm install command where I can install 
sass loader at a specific version and also sass  
176:14 - and installed those packages for me. Now I 
should be able to run my server once again.  
176:21 - NPM run serve. Now it is complaining that I don't 
have one specific CSS module, because I haven't  
176:32 - installed it in my node modules. But that is 
actually a good sign because that means that  
176:37 - it is reading through the rest of my file here, 
it's reading through this, getting to this line  
176:44 - and saying, Hey, I can't find that file. So I'm 
just going to comment that out for right now.  
176:52 - And now we have one more error here. And 
that is it's looking for images that it  
176:59 - can't find right now. Let's go ahead and 
resolve those. And they're coming from  
177:07 - this file. So if I go to splash dot sass, 
now you'll notice the syntax is a little  
177:16 - bit different here. You can basically think of it 
as just an indented syntax without curly braces.  
177:23 - Either way, you can see that the attributes are 
the same here. So I have a background image,  
177:29 - it's looking for this image. And again, there's a 
background image, which is looking for this green  
177:34 - image. So I'm going to create an images folder 
here, an IMG folder, and put those two images  
177:43 - inside of the IMG folder, and then update 
this path. So back in my old application,  
177:51 - they were in my public directory, I have 
green, and splash. I'm gonna copy those  
178:00 - and paste them here. And I should be 
able to reference the relative path here.  
178:12 - close this file. And you can see I have the 
styles for my main application in here. Now,  
178:20 - let me do one more thing and get 
rid of this boilerplate here.  
178:24 - So I can be ready to put my own content 
there. So let me get out of here.  
178:35 - And go to source slash Vues and home, I'll 
get rid of this image, also get rid of  
178:43 - that component. I'm just going to put home here 
for now and get rid of the component everywhere.  
178:52 - Now if I go back to this page, you can see 
that it is ready to add my own custom content.  
178:59 - And I can see the Products page in navigates 
as well. One more thing I'll go ahead and do  
179:04 - is add a past orders page to the router at this 
route. And all I have to do is basically copy  
179:20 - the products route. This will be past 
orders. I can call it past orders.  
179:40 - Past orders. Now I need to create this 
component. It's connected to my router. So  
179:47 - I'm going to create it in the Vues folder. 
Call it past orders that Vue and I have  
179:57 - a shortcut snippet here. I'll show you To 
use us and second, but if I click enter,  
180:02 - it just created the template tag for me. And I'm 
going to put an h1 in here that says, past orders.  
180:13 - And now I have this page working. So all 
three pages are there. In the next video,  
180:18 - I'll be putting content on these pages, and then 
hooking them up to JavaScript to be functional.  
180:28 - Now, let's work on putting 
actual content on this homepage.  
180:33 - I'm in the original application. Now, let me go 
to source inside of Vues here, I have my pages,  
180:41 - actually, the main page is still in app dot 
html. So I'm going to go ahead and grab these  
180:48 - two container elements here, the div and the main 
container, copy those, go over to my new code,  
180:58 - my vcli project. And here, I can come to 
my homepage, and just paste that in here.  
181:08 - Alright, now take this, just the indentation, get 
rid of that old word. And now I have my splash  
181:18 - container. And also my main container. 
And nothing is showing up on the page.  
181:27 - So if I look in the dev tools, it says 
cannot read property slice of undefined.  
181:35 - And I can search for where that is being used. And 
inventory dot slice. So of course, it is broken  
181:45 - right now because I don't have any inventory. 
So let me grab that from my original code base.  
181:53 - If I go here, I can see in food dot JSON, this 
file is really where I have my inventory items.  
182:01 - So I'm going to copy this 
file, copy, go over here.  
182:08 - And inside of source, I'm just going to paste 
that file. And now I need to import this into  
182:17 - my Vue j s. So if I want this right now in my home 
component, I need to import it at the bottom here.  
182:27 - So let me import my data. So import food from 
go up a directory food, that JSON. Let's set  
182:41 - it equal to a data variable. So data and then I 
can return. And then I can set inventory equal to  
182:53 - food. Okay, let's try this out. And now we 
see the banner displays just fine. And we  
183:02 - can see our recommended Products section at the 
bottom, which is already displaying real data.  
183:10 - Because we already set this up. And this is 
basically the same logic as with the other app.  
183:18 - But we've only rewritten this 
in a component structure.  
183:23 - Now let's pull in the other pages really quick. 
So we have past orders, and also products.  
183:32 - Let's go to products. And if I go to the Products 
page, I can just grab this main section here,  
183:43 - go back over to my code, and then paste that 
in. Now this page should work as it is because  
183:56 - if I look at all of the code here, we never 
made that dynamic. So that's something that  
184:03 - we will have to change later. But this is 
all hard coded. Let me grab the past orders  
184:09 - page real quick. And then we can take a look at 
it in the browser. So if I go to past orders,  
184:18 - let me fold this main section. I'm gonna copy 
this and go over here to my code. Paste that.  
184:38 - And now let's take a look at these pages. Okay, 
so our past orders page has an error. And it's  
184:45 - complaining that this eye tag, which was used 
for icons generally that it doesn't have a  
184:53 - closing tag, meaning it's not explicitly self 
closing and I not explicitly closing it either,  
185:02 - like this TD dag here has a closing TD tag there. 
So I'll have to fix that. That's just how Vue  
185:11 - templates work. So let me search for I, and seems 
like it's only in two places, which is good.  
185:20 - All I have to do to fix that is 
either I could do a closing tag,  
185:28 - things like IMG and I and certain tags don't 
really have closing tags. So all I have to do  
185:35 - is make them self closing, since you're never 
going to nest anything inside of this tag in  
185:40 - general. So I'm just adding the forward slash at 
the end. And I will do that with this AI as well.  
185:49 - And that fixed my error. And 
now here's the Products page.  
185:54 - And the past orders page as 
well. This is kind of a table Vue  
185:58 - of previous orders. Now what about the sidebar? 
Let's add that logic back in in the next video.  
186:10 - In our original application, we had this 
sidebar on the right to display our cart.  
186:18 - In this video, we're going to move that 
over to our new Vue see ally application.  
186:24 - So I'm in the original code base here. If 
I go to any of my files, I can see there's  
186:31 - a sidebar component, which is a custom Vue 
component that I define in my app dot j s file,  
186:40 - this sidebar component that I register, and 
I can basically use it globally throughout  
186:45 - my application. Now, of course, this is just 
regular Vue code. So I could absolutely do  
186:52 - the same thing in my new application. But 
there are other ways that I can now create  
186:58 - reusable components. So I'm actually going 
to put it in my components folder. instead.  
187:06 - I'm going to copy all of that. Let me go to 
components, I have this old HelloWorld component,  
187:15 - I'm going to delete it because 
I don't need it anymore.  
187:19 - And then I'm going to create 
a new file here and call this  
187:23 - sidebar dot Vue. In here, of course, I need the 
template. And I'm going to paste all of that code.  
187:35 - And this is basically all of the cart logic. 
Now there are a few things I will need to add,  
187:42 - pass in a dynamic toggle here when the button 
is clicked. So let me go ahead and set that up.  
187:50 - Now the first thing I need to do is import 
this sidebar component into my application.  
187:57 - And it's going to be globally available 
across all my pages. So I'm going to  
188:02 - import it into my app dot Vue file. And I'll 
do it below. Actually I do at the bottom here.  
188:13 - I'm going to put sidebar, it has to be 
of course self closing here. And also the  
188:21 - convention is to capitalize custom components. 
So you can easily see them and see they're even  
188:29 - highlighted differently than anything that is 
lowercase that I've pulled in from a library  
188:34 - or that is just standard HTML. I'm going to get 
rid of my style tag here and add a script tag.  
188:44 - And now I can import that component. So I'm going 
to import sidebar from that slash components slash  
188:55 - sidebar dot Vue. Now another way of writing 
this and what you'll see, a lot of times see  
189:01 - in Vue applications. Instead here you'll see 
an add sign. Now this is a shortcut kind of  
189:09 - a reference to the source folder. So that way 
anywhere in my application, no matter how many  
189:16 - files deep my components are, I don't have to 
do anything like dot dot slash dot, dot slash  
189:24 - dot, dot, etc. I can always reference the source 
folder with an at symbol. So it will be source  
189:30 - slash components slash sidebar dot Vue. Now any 
component that I import into another component,  
189:39 - I need to register it and tell my 
Vue application I'm going to be using  
189:43 - this component. And I can do that by setting a 
Component Object on this default options object  
189:52 - in Vue. And I can set the sidebar component here, 
registering it here or including it in the list of  
189:59 - component notes here just means that I can use 
it up here in my template. So how this works  
190:06 - basically this whole object here, it's called 
the options object. And any kind of JavaScript  
190:13 - functions or data will get set on this object, 
I just want to point out that this is the exact  
190:20 - same as the options object you used in custom 
components like this one, except the template  
190:28 - in our dot Vue file is just included at 
the top up here inside of this template.  
190:36 - And if we look at this main app component here, 
everything inside this object, all of this data,  
190:45 - computed methods, all of this stuff is the options 
object. But here we have it to be used globally.  
190:55 - And when we create a vcli application, 
we basically get one template,  
191:01 - and one options object per component that we use 
to define everything on. Now the thing about this  
191:09 - is that each component only knows about the 
JavaScript inside the options object of that  
191:15 - component. So if I create a function here, I can 
only use it up here and in no other component,  
191:23 - unless I explicitly pass it into that component to 
be used. Just the same way that we pass the data  
191:31 - and functions around to different components when 
we were building the static application. And here,  
191:38 - we're going to need to do that, again, because 
sidebar requires certain things to be passed in.  
191:45 - Now, if we look, here, we can see 
that first there is a V, if Boolean,  
191:52 - there's a function to toggle the sidebar, 
when it's clicked, or when the button is  
191:56 - clicked to open or close it. There is also a cart 
object for what is currently inside the cart.  
192:03 - There are all of our inventory items, 
and then there is a remove item function.  
192:10 - So I'm going to copy all of these things and 
paste them over here. And now I need to define  
192:21 - these properties. The first thing is Vf, I need 
to create a show sidebar data property here.  
192:38 - And I'm gonna set this just default as true for 
right now. So I can see the sidebar. Now I need  
192:45 - a toggle sidebar function. Now, where does 
this come from? It has to come from my app  
192:53 - component up here, because I'm passing it in, 
basically from app to the sidebar component.  
193:00 - So here's my toggle sidebar function. And I'm just 
going to grab all of these functions right now.  
193:11 - And I'll create that methods object. 
And I pasted in all of my methods here.  
193:20 - Now, here's another tricky part because I want 
to reference inventory here. But unfortunately,  
193:30 - I only have it in my home component, which I 
just kind of quickly put there to fix my issue  
193:38 - of basically inventory being undefined. So I'm 
going to have to restructure my application. So  
193:46 - I'm not importing inventory separately into each 
component. So let me actually take this import.  
193:53 - And I'm going to just import inventory into my 
app dot Vue component. So I'm importing it here.  
194:02 - And then my logic here, so inventory food. 
And I'm going to add that to that as well.  
194:12 - So inventory is food. Now I need to get it  
194:16 - to my home component. But it's not really a 
registered component on this page, like sidebar,  
194:25 - I can easily pass elements into sidebar as props, 
because it's a registered component right here.  
194:32 - But home is a little bit different because the 
router is dynamically putting the home component  
194:38 - there. So how do I pass props through the router 
then, to whatever component the router loads,  
194:47 - what we're going to do is pass in inventory 
into basically any router Vue component.  
194:55 - So I'm going to pass in the inventory 
variable And of course, I need to V bind this  
195:03 - to make it actually look for a variable, and 
not consider it to just be a string here.  
195:10 - So now I'm passing in inventory. And I need 
to accept that in the child component. So  
195:18 - instead of data here, I'm actually going 
to have to use props just as I did before,  
195:26 - and have a props object, or I'll just do it as an 
array actually. And I have to call it inventory.  
195:34 - There are few more broken elements that I will 
have to fix here that the sidebar is expecting,  
195:43 - I have my inventory and remove item. And 
I really just need my cart at this point.  
195:49 - Now, if I look in the original version, I 
can see the cart is just an empty object.  
195:57 - And then things can be dynamically added 
to the cart. But we're going to worry about  
196:02 - dynamically adding things in a minute. But 
first, I'll just set it to an empty object.  
196:08 - So let me go to data here and set cart to an empty 
object. Really quick, let's go ahead and grab this  
196:19 - computed property as well, because we will need 
it. So I'll come down here and put computed.  
196:31 - And let's check this out in the browser. So it's 
complaining right now that it can't find this  
196:37 - JSON file. And that's because we are 
importing it from the wrong place.  
196:45 - And yeah, the app is running products, 
past orders, everything seems to be working  
196:53 - okay. However, we don't have the sidebar yet. So 
let me go ahead and uncomment, this code here.  
197:03 - So we have toggle sidebar, and also showing 
the quantity and the button here. So here,  
197:11 - I should be able to see the button that we had 
before in our previous application. Alright,  
197:17 - when I come here, and refresh, nothing shows 
up. So we have some kind of an issue. It says  
197:24 - uncaught type error kept by path of undefined. 
So the path, this is referring to the router.  
197:34 - So I think it's giving us an error in the router 
link, because we are not properly using the router  
197:40 - link. So let me just change this to a div, we 
basically aren't telling it to route anywhere,  
197:46 - we are just using it as a clickable element. 
So we might as well be using something else.  
197:57 - And now it is working. Except I can't click 
on the cart button that's not working yet.  
198:05 - But everything else is working. Let me 
scroll up to see my original error here. So  
198:12 - it says cannot convert undefined or null to 
an object. And this loop is basically inside  
198:22 - of my sidebar component. So it's 
complaining about this line here,  
198:27 - line 25. I'm trying to loop through a cart object, 
get the quantity and key as well as the index. And  
198:36 - basically it's saying that cart must be undefined 
value. So let me take a look in my app here.  
198:52 - It's not opening. So let me actually 
take a look at the original code.  
198:58 - And inside of my app dot j s, I 
have all of this code moved over  
199:06 - except this mounted here, but I don't need 
that anymore, because I can now directly  
199:12 - import the JSON file. I don't need to fetch it. 
So here's my sidebar component. And actually,  
199:22 - I didn't copy over any of the methods here 
and I'm also forgetting to add in the props.  
199:30 - So let me go ahead and do that. Just 
copy this. Go back here to sidebar  
199:39 - and I do need a script tag at the bottom here. So 
I'm going to add a script tag, paste in the props.  
199:48 - And then I also want the methods from 
here so I'm going to grab those as well.  
199:56 - Now calculate total and get price are defined 
Then I also have all of the props here. So  
200:02 - let's see if this works. Yay. And the toggle is 
perfectly working. Of course, it's starting off  
200:14 - as open. If I refresh it, it just automatically 
opens. So let me change that in app dot Vue.  
200:24 - I'll come here and say show sidebar is false. 
All right, let me see if we can use this.  
200:38 - So it's not dynamically adding items to the 
cart yet. So we will fix that in the next video.  
200:49 - In this video, we are going to hook up 
the add to cart functionality so that  
200:54 - when we add to cart here, it will show up in the 
sidebar. If I look in the terminal, right now,  
201:02 - you can see that this add to cart, 
it's saying it's not a function.  
201:07 - So I'm getting an error when I click this Add to 
Cart button. Now I can see why I'm getting that,  
201:15 - because that is in my homepage component. 
And if I go down here, I can see this add to  
201:22 - cart function that I'm calling when I click that 
button is not defined anywhere in this component.  
201:30 - Where is that function defined? It is 
in the app dot Vue file. So if I go to  
201:39 - my methods, I can see I have an Add To Cart method 
right here, I basically need to pass this function  
201:47 - into my homepage for my homepage to be able 
to use. So I'm going to also pass that through  
201:54 - the router, as I did before. And then in my 
homepage, I can also receive that as a prop.  
202:02 - add that on to the props list, add to cart. So I 
should have access to the function that I passed  
202:10 - into this home component now through the router 
Vue. And let me refresh and see if this works.  
202:21 - Add To Cart. And you can see that the function is 
working because the quantity changed down to zero.  
202:29 - The cart says two items. And if I open it, 
it does indeed list two items here. Now,  
202:35 - why are there forward slashes here, 
we can actually see in the homepage,  
202:42 - that in regular JavaScript, this is actually in 
the sidebar component, that in order to put $1  
202:50 - sign before the variable we needed to escape 
it. But we don't have to do that in a Vue j s  
202:58 - application. Because it's no longer in a regular 
JavaScript file. It's in our Vue, j s template.  
203:07 - So I can get rid of all of these escaping 
characters. And now that looks much better.  
203:17 - Now if I want to delete this, it deletes 
I no longer have any items in the cart,  
203:24 - I can add a couple items and I get items 
in the cart. If I go to another page,  
203:31 - the cart should still work. Because that 
is a shared component that I can see  
203:36 - across any page. In simple applications. This 
type of data sharing works pretty well, we can  
203:45 - keep all of our variables in a parent component. 
So in this case, in our app dot Vue component,  
203:53 - we pass functions and variables down to children. 
And then children can call functions, like add to  
204:01 - cart that will then update the state of the parent 
component. Now in more complicated applications,  
204:10 - we would need something a little bit more robust 
for state management, and being able to share  
204:18 - all of this data throughout our application. 
And we will talk about that in a future series  
204:26 - where we cover Vue x, which is Vue j s is default 
state management library. But for right now,  
204:37 - we are going to leave the application as it is 
and work on it in future series and lessons.  
204:48 - So we have the homepage, the cart sidebar. Now we 
really need to hook up some of the information on  
204:57 - this page. So the Products page And it's really 
exactly the same as the product section. Here,  
205:06 - on the homepage, we have all of the same kind 
of cards and information. So since we have the  
205:12 - same thing pretty much in multiple places of 
the application, it makes sense to pull out  
205:18 - all of this UI that makes up these cards into its 
own component. And then we can share it across  
205:26 - the application and on any page that we want. 
So let's go ahead and create a card component.  
205:34 - Now in components here, I'm going to create a 
new file. And I'm going to call this product  
205:40 - card dot Vue. I'll start with a template. 
And now I'm going to go to my home page.  
205:50 - And I can see there's a for loop here that is 
looping through and displaying all of the cards.  
205:57 - So I'm going to grab this whole card here 
and paste it in my product card file.  
206:17 - Now this is just an individual card. So I don't 
need a for loop in here. Let me get rid of this  
206:24 - logic. And this will just be one card. Now 
I will need the product information for this  
206:32 - card to display correctly. So I'm going to have to 
accept that as a prop in my component. So let me  
206:40 - create a script tag. I'll create props here, just 
an array of props. And I'm going to say, product.  
206:50 - So I accept the product props into my component. 
And now I can use it in my template. Now, I can  
206:59 - remove all of this logic from here. And the only 
thing I need is actually to import that component.  
207:09 - So I need to import product card from, I'm going 
to use my source folder shortcut slash components,  
207:19 - and slash product card dot Vue. And now I need 
to register this as a component so I can use it.  
207:34 - And now in my code up here, 
I'm going to use product card.  
207:44 - I'll clean up the lines a little bit here.  
207:52 - And I need to make this self closing. Because 
all tags in Vue templates need to either  
207:59 - be self closing or having a closing tag. 
Now I am no longer using this index here,  
208:07 - I'm going to see in my product, 
if I'm using the index anywhere.  
208:14 - And I am indeed passing in the 
index. So I will need to accept  
208:19 - the index as a prop as well. Let me change 
this to index that's a little bit more clear.  
208:29 - And I will get index here. And 
I'm going to pass that in here.  
208:40 - Of course index is a variable, not a string, so 
have to V bind that. And that should work here.  
208:47 - Let's see if this works. And we are getting 
an error here. Now that is because product  
208:58 - is now a prop. And of course we cannot 
mutate props from the parent component.  
209:05 - So we can actually fix this by not 
mapping to the product prop at all,  
209:12 - we're actually going to create a local 
variable inside of this product component. So  
209:19 - each component each time we use the product card 
component, it will have its own local variable.  
209:27 - And we can do that by adding a data 
prop here. And in the method, we need  
209:39 - it return returns an object. And now we can 
simply map quantity because each card only has  
209:47 - one input box. So we'll just map it internally 
in the card. And we can check that this works.  
209:57 - Not sure why it only has two cards right now. 
But let's try this. So I pressed the number two.  
210:07 - And I can look in my Vue, j. s, Dev Tools. 
And I'm getting an error here. And it says  
210:20 - I can't read property name of undefined. So 
product name. Yes, I believe I have forgotten  
210:28 - to pass in the correct props here. So let me 
add those, I need to pass in product equals  
210:39 - product. And then while I'm here, let me 
also add the add to cart function equals  
210:51 - Add To Cart. There we go. And now let's check it 
the page loads and the page is loading. Alright,  
211:04 - so now we have all of the cards loading. And 
let me just look, in my Vue dev tools, I can see  
211:12 - all of my product card components. So let me 
just take a look. If I change this to two,  
211:20 - and I can see the quantity is two. If I change it 
to 22, it's now 22. Alright, so that is mapping  
211:29 - correctly. Now I need to get this quantity, the 
value up through the home component to the app  
211:36 - component, where I am actually performing 
the function of adding it to the cart.  
211:44 - So what I'm going to do, for right 
now, I'm just going to pass in a third  
211:51 - parameter, and I will pass in quantity. 
And now let's take a look at our function,  
211:59 - our Add To Cart function in the app component. 
So we are adding items on to the cart,  
212:08 - if they're not already there. And then we are 
basically incrementing the number here. So  
212:16 - now that we have that third parameter being passed 
in, which is the quantity, all we have to do  
212:25 - is changed this line to B plus equals quantity, 
which is now getting passed in. And then of  
212:33 - course, we don't need this line, because we 
are no longer mapping to a nested quantity.  
212:42 - Rather, we have the quantity variable right here. 
This also means that we don't need to pass up the  
212:50 - index anymore. So we can remove that from this 
function. We only need the name and the quantity  
213:01 - basically, so that we can add it to the cart. 
Let's check and see if this works. If I come here,  
213:15 - the number still maps to the 
component. Now if I click Add to cart,  
213:24 - it is not in my cart. Let's 
see if we got an error.  
213:28 - Add to cart is not a function. Let 
me look inside of my home dot Vue.  
213:35 - I have add to cart that I am getting from the 
parent component. So from the app component, I'm  
213:42 - passing that in to the product card. And I should 
have it Oh right, I didn't accept it as a prop  
213:51 - inside of the product card. So now 
let's see if this works. Let me refresh  
214:02 - and go into my Vue dev tools. And now I can see 
it's properly working here. If I want to add  
214:13 - 10 artichokes, and I have two radishes,  
214:16 - and I have 12 items in the cart. Now my 
rounding functionality isn't properly working,  
214:25 - as you can see, but it is properly adding and 
displaying the quantity and the total in the  
214:32 - cart. But I don't just want this functionality on 
the homepage. I also want it on the Products page.  
214:40 - So let me import those components 
into the Products page now.  
214:47 - So if I come to my product stock Vue file, I 
actually have access to inventory already in here.  
214:56 - Because if you remember in my app dot Vue 
Passing inventory and the add to cart function  
215:03 - into anything displayed by the router Vue, 
which is basically any of our pages here home,  
215:10 - past orders or products. They're all connected 
to our router. So let's accept those props in the  
215:18 - Products page to start with. First, let me fold 
up all of these cards, get them out of the way.  
215:25 - So let me do a script tag, props. And I'm 
going to accept inventory and add to cart.  
215:39 - One more thing I need to do is import this product 
card. So I'm going to go to the home component,  
215:47 - and just copy this import 
and paste it into product  
215:54 - or into the Products page. And now I 
need to define this as a component here.  
216:04 - Product card. And this should be components not 
component. And I also have one more error here,  
216:13 - which this should be a capital P. And now if I 
see if I highlight this, all of these highlight,  
216:19 - let me take a look at what this error is here. 
The product card component has been registered,  
216:25 - but not us. So let's fix that. So I 
basically have all of these cards here.  
216:34 - For the different items that show up on 
the page, I'm actually going to just delete  
216:39 - all of these right now. And instead, I'm going 
to add the product card. So if I go to home,  
216:50 - I can take a look at my product card that 
I'm actually using inside the template.  
216:57 - And I'm just going to copy that and paste it 
here. But instead of slicing at three here,  
217:06 - let me just do the first six elements instead. Now 
because we already have inventory being passed in,  
217:13 - as well as the add to cart function, of course 
inside the loop, we're taking care of the product  
217:19 - variable, there's really no other state that 
we have locally on the products component.  
217:26 - So this should pretty much work out of the box 
for us. Let's check here. And we can see that  
217:33 - it does indeed loop through and display all 
of the cards on the Products page. Now, let  
217:40 - me add a couple of these items to the cart here. 
And you can see the cart just updated with five.  
217:47 - If I add few artichokes, let's add some cherries, 
and some cabbage, carrots. everything right,  
218:00 - we have 17 items in the cart now. And we 
can see that it added all of these items.  
218:07 - Now if I go to the homepage, I can still see 17 
items in the cart. Because we moved to a single  
218:15 - page application. All of our routing is handled 
by the Vue JS JavaScript. And we are actually  
218:23 - sharing state between components. So all of the 
state for our cart lives in the app component,  
218:30 - which is the parent component of all the 
other pages, the home page, the product page.  
218:37 - And that's why all of the items in the cart all 
of the data that we save here, in our application,  
218:44 - it stays no matter what page we navigate to. 
And even though this is displayed, or this  
218:50 - card is on multiple pages, you can see how have 
you made it very easy for us to reuse the same  
218:57 - code and the same template to loop through and 
display wherever we wanted on the application.  
219:03 - And that's basically how reusable components 
work in Vue js. I hope you enjoyed this course.  
219:11 - And you learned a lot about Vue js, learning it 
on three different levels through this course.  
219:18 - We started off working in a basic index dot 
HTML file. And then we went on to a static  
219:25 - site of grading it a little bit with some Vue 
js. And then we moved on to using the Vue COI  
219:32 - and creating a fully dynamic single page 
application that we have here. definitely  
219:37 - reach out to me if you have any feedback, 
comments or questions about this course.  
219:43 - You can find me on Twitter and pretty much 
everywhere online as Gwen Faraday or at  
219:49 - Faraday Academy. Have a great day and 
I hope to see you in the next course.