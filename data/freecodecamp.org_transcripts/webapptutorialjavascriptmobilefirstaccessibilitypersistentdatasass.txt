00:00 - hello and welcome my name's dave today
00:03 - we're going to build a to do web app and
00:05 - we're going to use html css actually sas
00:09 - that compiles to css and then javascript
00:12 - for the functionality and we want our
00:14 - web app to be mobile first and
00:16 - responsive so of course designed for
00:19 - mobile phones but then also ready to
00:21 - scale up for tablet-sized viewports and
00:24 - then larger widescreen computer monitors
00:27 - or possibly even tvs
00:29 - and then we want our web app to be
00:31 - accessible and by accessible i mean
00:34 - accessible with a keyboard using the tab
00:37 - index and the enter key or also using a
00:40 - screen reader and then we want to use
00:42 - persistent data and that means we can
00:44 - close out of our web app come back a
00:46 - week later reopen the browser load up
00:49 - our web app and our to-do list will
00:51 - still be there with all the items we had
00:52 - on it
00:53 - let's get started
00:59 - i would like to thank free code camp for
01:01 - sharing my video and bo quincy and
01:04 - everyone involved in making free code
01:05 - camp such a great resource a quick note
01:08 - about me i'm the father of some great
01:10 - kids and some have autism
01:12 - please check out my youtube channel
01:15 - and you can connect with me on twitter
01:17 - linkedin and reddit okay we're starting
01:20 - our project with a blank slate you can
01:22 - see over here i have a folder named to
01:24 - do underscore list i've got vs code open
01:28 - and we should start with the html that
01:31 - is the foundation and the framework for
01:33 - anything else we might do we'll start
01:35 - with a file called index.html
01:39 - and in this file we'll first use an
01:41 - image shortcut just type the exclamation
01:43 - mark and you can see emmett abbreviation
01:45 - i should say right here
01:47 - we'll choose that and it puts in a basic
01:50 - page outline i'm going to
01:52 - hit control z
01:54 - i'm sorry alt z
01:56 - and that will wrap this line that we
01:58 - couldn't see here before so now you can
02:00 - see line 5 is just a little deeper and
02:03 - that's because i'm wrapping the line
02:05 - that it put in here so now we'll put in
02:07 - some of our own custom information we
02:09 - need all of these lines especially this
02:11 - viewport line that will help make our
02:13 - project responsive
02:16 - and we will later on we'll put in
02:18 - a style sheet line a script tag for our
02:21 - javascript and that sort of thing right
02:23 - now we'll just change the title from
02:25 - document to
02:27 - to-do list
02:30 - save that and we've basically got our
02:33 - basic head section right now so now we
02:36 - need to go ahead and put some things in
02:38 - the body
02:39 - and i like to use semantic elements when
02:41 - possible
02:43 - we'll start with a main element
02:46 - of course this also helps our
02:47 - accessibility it's a great habit to have
02:49 - instead of just using divs and now our
02:52 - project as you can see the finished
02:54 - project over here to the right is really
02:56 - broken down into two sections we've got
02:59 - the area where we add a new to-do list
03:02 - entry
03:03 - and then we have the area that actually
03:05 - contains the list and that's how we're
03:06 - going to break this out is into two
03:08 - sections
03:09 - and so we'll put in section elements
03:12 - there's our first section
03:14 - and this is going to be the new item
03:16 - entry so let's give it a class that says
03:18 - exactly that
03:21 - having trouble typing again
03:23 - new item entry
03:27 - and now that we've got our section what
03:29 - this section is really going to hold is
03:31 - a form you can see this is an input it's
03:34 - a text input and this is a button which
03:36 - is a submit button
03:38 - and that's basically what's inside this
03:40 - new item entry so let's start with the
03:43 - form and we'll give it an id of
03:46 - item entry form
03:50 - now inside the form we want to have a
03:52 - label for the input
03:54 - again this will help with accessibility
03:58 - we'll call this label well it's four new
04:01 - items we'll actually call the input new
04:03 - item
04:04 - and in the label we'll put enter
04:07 - a new
04:08 - to do
04:09 - item
04:10 - well we don't even need the period there
04:12 - we go
04:13 - and now it's time for the input
04:16 - and as i said it will be called new item
04:19 - so in the label the for attribute names
04:22 - the id of the input attribute
04:25 - and this will be a text input so we'll
04:27 - put type text
04:29 - let's cap the size at
04:32 - 40 characters
04:35 - and we'll set auto complete to off you
04:38 - may want it on on yours of course that's
04:40 - when it gives a list of suggestions or
04:42 - things you have previously typed
04:43 - underneath that's always kind of
04:45 - annoying to me so i'm just going to turn
04:47 - it off
04:48 - a placeholder
04:50 - and this is the text like you see
04:52 - add item that is the actual place holder
04:55 - that goes inside the text input
04:58 - of course i need to put an equals there
05:01 - add item
05:03 - and then a tab index and this makes sure
05:06 - it is keyboard accessible it is part of
05:08 - the keyboard
05:10 - index when you tab through the items so
05:12 - we definitely want this input to be part
05:14 - of that
05:15 - put a tab index of zero oh and then we
05:18 - can just slash close because that
05:19 - doesn't have a closing tag for the input
05:22 - it's just a
05:23 - slash and then close out the element
05:25 - okay what would go after that the button
05:29 - and it is just a button element
05:31 - let's give it an ad id of
05:36 - add item
05:39 - yeah that makes sense add item
05:41 - class let's just create a button class
05:44 - because we're going to have another
05:45 - button as you can see later for the
05:47 - clear as well
05:48 - the title attribute of this should be
05:51 - add new
05:53 - item
05:54 - and title is what when you mouse over
05:58 - text will pop up and show now i can't
06:00 - show you that in when the dev tools are
06:01 - open because i just get this kind of
06:03 - zero and it doesn't do it but if i were
06:04 - to close devtools and mouse over you
06:06 - would see the title there that's add new
06:09 - item i'm going to give this button an
06:11 - aria label this is part of the
06:13 - accessibility that we want to create for
06:16 - this web app
06:18 - and here i'll put add new item
06:21 - to list
06:22 - now why did i do that well there is no
06:24 - text on the button it's just a plus
06:26 - symbol and that's not really descriptive
06:29 - for anyone that is using the screen
06:31 - reader so this aria label will help out
06:33 - with that and let's also give this a tab
06:36 - index of zero
06:39 - and we'll close that and now a button as
06:41 - you can see does have a closing tag as
06:44 - well we're just going to put the plus
06:46 - symbol in here that's what you actually
06:48 - see on the button so now we've got our
06:51 - form it's got a label an input and a
06:54 - button element and that's the first
06:56 - section so i'll save that
06:58 - now let's create the next section and
07:01 - this section
07:02 - is for the container that has the list
07:07 - so we'll give this an i let's give this
07:10 - a class
07:12 - equal to
07:13 - list
07:14 - container
07:17 - now inside this section we are going to
07:19 - create some divs at this point the first
07:22 - one
07:24 - div with a class
07:26 - equal to
07:27 - list
07:29 - title
07:31 - and this will be this area here that has
07:33 - the title and it has the button it's
07:36 - just the top of the list
07:39 - so inside this we will put the title
07:42 - and give that an h1
07:44 - and you really only want one h1 per page
07:47 - and this will be the one for this page
07:48 - or for this app
07:52 - and now we'll also put a button here and
07:54 - this will be the clear button
07:57 - so this button is going to have an id
07:59 - equal to
08:01 - clear items
08:04 - the class just like the other button we
08:06 - created will be class i mean sorry will
08:08 - be button
08:11 - totally get that turned around the title
08:13 - is going to be equal to
08:15 - clear the list remember that's what pops
08:18 - up when you mouse over the button
08:20 - and let's also give this an aria label
08:22 - because just saying clear
08:24 - it gives a hint an indication of what
08:27 - the button does but it's not as
08:29 - descriptive as we could be so
08:32 - we'll say aria label and remember this
08:34 - is what a screen reader would read
08:36 - remove all
08:38 - items from the list
08:42 - that seems good oh and then a tab index
08:44 - again because this button also needs to
08:46 - be part
08:47 - of the tab order of the page
08:51 - and we'll close that
08:52 - and of course a button has a closing
08:55 - element as well or closing tag for the
08:58 - element
08:58 - and we'll put clear in as the text for
09:01 - the button like you see up here go ahead
09:03 - and save that
09:06 - now
09:07 - that should pretty much be it for that
09:09 - div
09:10 - but underneath the div we have a
09:13 - horizontal rule this line you see so we
09:16 - can create that with just the horizontal
09:19 - rule element and close it out at the
09:21 - same time it doesn't have its own
09:23 - closing tag so just like that input
09:25 - element it just has a slash at the end
09:27 - of the element
09:29 - okay now our next div and this is for
09:32 - the list itself
09:35 - so create a div and give it an id equal
09:37 - to
09:38 - list
09:40 - items
09:41 - now really that's all we're going to
09:43 - need in our page the rest is dynamically
09:46 - created when we
09:47 - add an item it adds it to the list and
09:50 - that will be created with javascript but
09:53 - when we style the page it will be
09:55 - helpful to see an item or two in there
09:57 - before we start working with the
09:59 - javascript so you kind of want to plan
10:01 - ahead and know what you want to create
10:03 - with your javascript don't just wing it
10:05 - so
10:06 - inside of here we'll put a couple of
10:08 - items that later on we can remove
10:11 - and each item will be created with a div
10:15 - we'll give each
10:17 - item a class of as you might expect item
10:22 - and then inside each div will be an
10:25 - input as you can see the check box
10:28 - and then a label for that check box and
10:31 - by using these elements that are built
10:33 - into html that once again helps us with
10:36 - our accessibility we're not creating
10:38 - some
10:39 - new text node or something like that
10:42 - or just some div that we have to make
10:45 - accessible later a label is already
10:47 - associated with the check box in html so
10:51 - screen readers will respond to this
10:54 - by just using a check box and a label so
10:56 - we'll put an oops
10:58 - an input element
11:00 - and this type of input is a check box
11:04 - and then
11:05 - each list item in our to-do list will
11:08 - have an id number so here we'll just
11:11 - id of one remember we're just specking
11:13 - this out later on we'll remove these
11:16 - and they'll be part of the tab order of
11:18 - the web app so we'll give that a tab
11:20 - index of zero also so it's included in
11:22 - the tab order
11:23 - now this input needs a label
11:26 - and it will be for
11:28 - whatever
11:30 - id number the to do item has so that in
11:34 - this instance it will be four
11:36 - id of one
11:38 - and then we just say whatever
11:40 - we want to say and here is eat we've got
11:42 - eat sleep code so there we go there's an
11:44 - example item let's just copy this
11:50 - and put in at least one more so we'll
11:52 - say
11:54 - two
11:56 - two
11:59 - and sleep other than that it's the same
12:04 - and there we have finished the html for
12:07 - the project and remember
12:09 - these items are just here for now we
12:12 - will remove them
12:14 - and they will be generated with
12:16 - javascript but we're putting these in
12:18 - because we want to style this next and
12:20 - we'll see what we get when we start
12:22 - styling the page okay let's get started
12:25 - styling our html you can see we have
12:28 - what the finished product should look
12:30 - like here
12:31 - and we have the html we created here
12:34 - and i have started the live server you
12:36 - can do that by clicking right on your
12:39 - html and use open with live server if
12:42 - you don't have live server already in vs
12:44 - code
12:45 - go to the icon over here for extensions
12:48 - type in
12:49 - live server
12:52 - and here it is
12:54 - go ahead and install live server and
12:56 - then you'll be able to do the same thing
12:58 - you want to run a local server and it
13:01 - makes it really easy to do with live
13:02 - server so you get the live server
13:05 - extension right click choose open with
13:07 - live server which i've already done and
13:10 - in this other tab
13:11 - here's our html doesn't look quite as
13:14 - good as the finished product yet but it
13:16 - is the same html so we need to go ahead
13:19 - and style that html let's look at the
13:22 - file tree here and all we have is our
13:24 - index.html file i want to add a folder
13:28 - i'm going to call this folder sas
13:32 - and now you see i have a sass folder and
13:34 - we'll include sas files in here actually
13:37 - they'll be files that end in the
13:38 - extension
13:40 - scss because that's the style of sas i'm
13:43 - going to use now sas is very much like
13:46 - css3
13:48 - but it gives us a few other advantages
13:51 - to go along with that so the first file
13:53 - we'll create in this sas folder
13:56 - is going to be
13:57 - style.scss
14:00 - and now that we have a sas file as well
14:04 - we need to add another extension and one
14:06 - that will look at our sas and we'll
14:08 - compile it to css as we create it
14:12 - so once again come to the extension icon
14:15 - over here and instead of live server
14:18 - type in live
14:19 - sas and we're looking for live sas
14:22 - compiler you can see it's my third
14:24 - result here
14:25 - i'll click on that install live sas
14:28 - compiler and that's exactly what this
14:31 - will do it will take your sas files
14:34 - it will merge them because we are going
14:36 - to create more than one file and it will
14:39 - compile them all down to one css file
14:42 - now that you have that
14:45 - we come back here
14:46 - we can click the button that says watch
14:49 - sas and this will start to compile our
14:51 - sas
14:53 - so i've created that now you can see it
14:55 - went to the output window here
14:58 - and it will start to look for that
15:00 - now i really don't need that right now
15:02 - and matter of fact i can close it and it
15:04 - will continue to watch see it says
15:06 - watching
15:07 - and what it did when i clicked that was
15:09 - automatically created my dist folder
15:12 - which stands for distribution and inside
15:14 - that folder i have a css folder
15:18 - and inside the css folder
15:20 - the live sas compiler created a
15:25 - css style.min.css
15:26 - it also created a map
15:28 - because that's the default i haven't
15:29 - changed that we don't really need the
15:31 - map but it doesn't hurt anything
15:33 - this minified css and that it will
15:36 - actually be minified code is what's
15:38 - created when live sas compiler does that
15:41 - now there are some settings
15:44 - that we could look at quickly
15:46 - if we come to preferences in vs code
15:49 - then go to settings
15:51 - and then i type in live sas we'll get to
15:55 - the live sas compiler settings
15:58 - and you can see it's got a few different
16:00 - settings
16:02 - auto prefix
16:04 - exclude list
16:06 - formats and formats is what we'll look
16:08 - at and notice it has a
16:10 - settings.json it says edit in
16:12 - settings.json so i probably have
16:15 - settings that aren't the default i don't
16:17 - really remember what the default
16:18 - settings were
16:20 - but i can show you what i've changed
16:21 - mine to
16:22 - so the format that i have in this
16:25 - settings json says compressed and that
16:27 - means it's going to compress the css
16:30 - down to a minified version
16:33 - then there's an extension name
16:35 - and i end my file with dot min dot css
16:38 - which is the standard to kind of tell
16:40 - you that file is compressed and then it
16:42 - has the save path and i like to save
16:44 - mine to a distribution folder
16:47 - and in the future if you start using a
16:50 - bundler like webpack this will make more
16:52 - sense but i saved to a distribution
16:55 - folder and then the css folder
16:58 - and so those are the settings that i
17:00 - have you may have different default
17:01 - settings and that would be okay too i
17:04 - just wanted to show you how to get to
17:05 - those settings if you want to change
17:07 - them
17:08 - and so now
17:09 - our live sas compiler is watching
17:11 - anything we do
17:12 - and it will compile that sas right away
17:15 - and the live server is watching for
17:17 - changes and as there are changes it will
17:19 - automatically update what is served from
17:22 - our local server and we will see it over
17:24 - here in chrome so that is all ready to
17:26 - go
17:27 - now our style page is really just going
17:30 - to pull in other files we create
17:32 - and on the sas
17:34 - website it shows how to do this with the
17:37 - use or at use
17:39 - however live sas compiler doesn't seem
17:41 - to be supporting that at least the
17:43 - version that i have you can look at the
17:45 - sas page and i'll link to that in the
17:47 - video description
17:49 - and of course look at a tutorial for sas
17:51 - and you can see if your version of live
17:54 - sas compiler is supporting use but right
17:56 - now i need to type
17:58 - import is the way i can pull in a file
18:01 - with the version i have and i'm going to
18:03 - pull in a base file
18:07 - and we may get an error first because it
18:09 - doesn't exist but
18:11 - i'll highlight this folder once again
18:13 - and i'll create this base file
18:15 - and you say
18:17 - base with an underscore because this is
18:19 - a sas partial
18:22 - and sas knows it's a partial because it
18:25 - starts with the underscore so
18:27 - our style
18:28 - file will look for this base partial and
18:31 - we'll start writing what looks a lot
18:33 - like css
18:35 - in this base file
18:39 - the very first thing i like to do in my
18:42 - base file is start to define colors
18:44 - and i can do that because sas supports
18:47 - variables and so
18:49 - i define the first color usually with a
18:51 - default
18:53 - font color
18:55 - and the reason this is handy is because
18:57 - then i know one place to go
19:00 - in my sas files that has all of the
19:03 - colors for the project and then i'll
19:05 - just refer to these variables in the
19:07 - project so i'm going to define a few
19:09 - starting colors here i've got a
19:11 - background color
19:15 - and this color
19:16 - is a shade of blue that i like
19:19 - 9 0 e2
19:21 - and then we'll have a container
19:24 - and i'll abbreviate background color
19:28 - and here will be an off-white
19:32 - and then a container border color
19:39 - yeah it's just a one word it's fine just
19:42 - so it makes sense to you
19:43 - and anybody else that reads it if they
19:45 - need to work on your code
19:47 - and as long as you spell out what it is
19:49 - a good description like that should work
19:51 - for your variable name so there's four
19:53 - color names to start with i'll save that
19:57 - and let's see what else we should put
19:59 - well i'll use media queries later of
20:01 - course to make this project responsive
20:04 - and sas also supports something called
20:06 - mixins and
20:08 - we start out with just saying at mixin
20:11 - and now i'll put an mp here
20:17 - and we'll put in the size variable and a
20:19 - thank you to kevin powell who has a
20:21 - great channel on web design
20:23 - and
20:24 - he is originally who i learned this from
20:27 - instead of typing out all these media
20:29 - queries
20:30 - and it's a great way to do it so we
20:31 - don't have to type all of this stuff
20:33 - except one time
20:36 - media only screen and then we'll put min
20:40 - width and
20:43 - size here that's where we pull in our
20:45 - size parameter and now we can just put
20:48 - at content
20:50 - and that will be our mixin for future
20:53 - use when we need to use a media query
20:56 - now we can start what looks more like
20:58 - just regular css and i start with a
21:00 - reset
21:01 - we've got the asterisk and that means
21:03 - select all this applies to all elements
21:07 - everything on the page i've got a margin
21:08 - of zero
21:10 - padding of zero
21:12 - and i like to put box sizing in my reset
21:16 - we'll set that at zero
21:20 - and then i start with html and body
21:23 - and i apply these to both elements
21:27 - we put in some basics for the page or
21:29 - the web app
21:31 - and the first is font size 16 pixels i
21:34 - never like to go below that and we set
21:36 - that as our base for the project
21:39 - and then font family is another one and
21:42 - we're going to pull in a font from
21:44 - google fonts
21:46 - so we'll take a moment to look at that
21:48 - in just a second but i'll go ahead and
21:50 - tell you what one i'm going to use
21:52 - i like the font montserrat
21:56 - and then we'll back that up just in case
21:58 - it wouldn't load with sans serif
22:02 - okay color and this is the text color so
22:04 - we go to our default font color that was
22:06 - available
22:08 - width we want 100 width on the html and
22:12 - body elements
22:15 - min height
22:17 - 100
22:20 - and then we're going to include a media
22:23 - query
22:24 - so we'll include now we say mp
22:28 - like we defined above
22:30 - and 768 which is the ipad size
22:34 - so once we've got to tablet size from
22:37 - phone size
22:38 - and we want to remember that we're
22:40 - starting with a mobile first design and
22:43 - you can see we have
22:45 - a mobile phone view over here actually
22:47 - an iphone 8 layout in chrome
22:50 - in the dev tools and this of course is
22:53 - the finished product
22:54 - we want to start small
22:57 - and build our way up
22:59 - and if we need to change things
23:01 - as the page gets bigger or as the
23:03 - viewport gets bigger we can do that
23:06 - so the only thing i'm really sizing up
23:09 - is the base size of the font as the page
23:12 - gets bigger we're just
23:13 - taking that font and going from a base
23:16 - of 16 pixels to 22 pixels now you can
23:19 - see in everything else we're going to
23:21 - add to the project we're not going to
23:23 - refer
23:24 - to a font size with a pixel anymore we
23:27 - will use rems which will always come
23:29 - back and refer to this base size we've
23:31 - set in the html and body
23:35 - okay let's save this and now let's add a
23:37 - couple of things to the body alone that
23:40 - we're not going to add on to the html
23:42 - and one is padding
23:45 - 20 pixels all around
23:48 - and then the background color
23:52 - and we'll use the background color we
23:54 - defined
23:59 - from there
24:00 - we can go to the section and remember
24:02 - we've got two sections
24:05 - here you can see we've got the
24:07 - background color we just set on the body
24:09 - is that blue color and now we've got our
24:12 - two sections we're working with
24:15 - so you can tell they will not be as wide
24:17 - as the viewport they will have a
24:18 - different background color
24:22 - so let's set that background color
24:26 - and it will be the container background
24:28 - color that we defined kind of that
24:30 - off-white
24:32 - and then we'll set the width
24:35 - to 90 percent
24:37 - now it doesn't look like this is really
24:39 - a 90 percent width but remember we set
24:42 - padding of 20 pixels as well
24:45 - on the body so
24:46 - 20 pixels in from all sides
24:50 - and then instead of using a hundred
24:51 - percent of the available width we're
24:53 - using 90 of the available width so we've
24:56 - already subtracted
24:57 - 40 pixels from the possible width and
25:00 - then we're only using 90 of what's left
25:04 - okay max width
25:08 - 700 pixels so when we get to a larger
25:10 - screen we don't want this to continue
25:13 - growing beyond 700 pixels
25:16 - margin we'll set those to auto and you
25:18 - can see that's why the sections are
25:20 - centered we've got a margin
25:23 - left and right that is set to auto
25:27 - and now a border
25:29 - one pixel
25:31 - solid and we'll come back to our
25:33 - container dash border color that we
25:36 - defined
25:38 - and then we'll round the corners with
25:40 - the border
25:42 - radius of 10 pixels
25:46 - now why don't we see this applying to
25:48 - our html yet well let's go ahead and
25:50 - take a look at this html
25:54 - and we'll hide the file a little the
25:57 - file tree for a second so we can see
25:59 - everything a little better
26:00 - and we don't have it linked yet we
26:03 - haven't linked
26:04 - our sas or the finished product which is
26:07 - the css is what we really need to link
26:10 - we haven't linked that
26:12 - to our html yet so of course we're not
26:14 - going to see that
26:16 - let's link it right up here above the
26:18 - title
26:20 - i'll put link
26:22 - and then
26:23 - rel attribute equals
26:26 - stylesheet
26:28 - and then href and this will link to what
26:31 - we have and you can see the dist folder
26:34 - and then there's the css folder
26:37 - and then there's
26:38 - style.min.css so visual studio code was
26:41 - helping us out with everything
26:43 - and as we save that now you can see what
26:45 - we get
26:46 - doesn't look great yet let's go ahead
26:48 - and get the google font montserrat that
26:50 - we talked about as well and what you
26:52 - want to do is go to fonts.google.com
26:56 - and there type in
26:58 - montserrat
27:01 - if i'm pronouncing that correctly even
27:03 - and then we click on the
27:04 - result and it will give us a list of
27:07 - available styles
27:09 - and if i remember right i chose medium
27:12 - 500 so if you click select this style
27:16 - it actually gives us the link we can
27:18 - copy
27:20 - and then of course it says what to put
27:21 - in our css rules which is what i did
27:24 - earlier we had the font family and it's
27:26 - montserrat and back that up with sans
27:28 - serif so we'll just copy this
27:32 - link and we will put this link
27:35 - in our html
27:37 - oh there's something i must have forgot
27:39 - i put
27:40 - a semicolon there instead of just
27:44 - closing out the link tag there we go
27:47 - now let's go ahead and put this above
27:50 - the style sheet we're creating so this
27:52 - style sheet can actually use the
27:55 - montserrat font family as well so we'll
27:57 - save that
27:59 - and now we can get rid of that and we
28:02 - have it doesn't look much better but we
28:04 - are using the correct font that we want
28:05 - to at this time
28:07 - okay we're ready to add another partial
28:10 - and that is for our shared classes
28:12 - between the buttons so let's show the
28:14 - file tree once again
28:16 - and we want to add a partial file named
28:21 - underscore
28:22 - sharedclasses.scss
28:26 - now i want to define a few more colors
28:29 - before we get started on the buttons so
28:32 - we'll start with
28:34 - text box
28:36 - dash
28:37 - border color because that is going to be
28:40 - right up there where we're working with
28:41 - the text box and the first button
28:44 - and then we'll have
28:47 - button
28:49 - text color
28:52 - and that will be white
28:54 - and then we'll have
28:56 - button hover color
28:59 - and that's when the mouse hovers over
29:01 - the button
29:04 - set that to dark or black
29:07 - and then we can have an add
29:09 - button color
29:11 - and that is where we're adding an item
29:13 - so that's going to be a green and that
29:15 - is 4 c a f 5 0
29:18 - and then we'll have our clear
29:21 - button
29:22 - color
29:23 - and that will be 9 9f6060
29:27 - there we go so we've got all the colors
29:29 - we need
29:30 - let's come over to the shared classes
29:34 - partial and we'll start adding some code
29:36 - for these button
29:38 - classes
29:39 - so the first class is just button and
29:41 - that's what we added in the html
29:44 - we'll set the width to 15 percent well i
29:46 - need the percent
29:49 - now we'll set the min width
29:51 - to 48 pixels
29:53 - and the min
29:55 - height to 48 pixels
29:57 - and that is the minimum size you want a
30:00 - button especially when it is mobile
30:02 - friendly because that is where you'll
30:04 - have your thumb or your fingerprint your
30:06 - fingertip
30:07 - and if i remember right i read this from
30:10 - google dev advocates but you don't want
30:13 - a button smaller than that 48 pixels by
30:16 - 48 pixels is pretty much the minimum
30:19 - mobile friendly size for a button for
30:21 - your finger to fit on it properly so 48
30:24 - by 48 are the min width and height
30:27 - settings there and now for the color
30:30 - we'll go with
30:32 - button dash text color
30:37 - that we set earlier and now border
30:41 - two pixels
30:43 - solid and we'll go with
30:46 - the text box border color we set now we
30:49 - didn't set it specifically for the
30:51 - button
30:52 - but it's right beside that text box so
30:54 - i'm just going to use the same one
30:56 - and border radius
30:59 - 10 pixels that'll give it that rounded
31:02 - uh feel instead of just being squared
31:05 - off in sharp corners
31:07 - and then i'm going to set the outline to
31:09 - none and this is usually not good
31:12 - and let me tell you why this is not good
31:14 - it needs to be visually
31:16 - you need to somehow see i guess
31:19 - that
31:20 - the focus is on the button so something
31:23 - visual needs to happen
31:25 - and usually that is an outline
31:28 - many screen readers will outline by
31:30 - default anyway but
31:32 - you don't want to remove the outline if
31:34 - you don't have another plan for the
31:36 - hover and the focus but we do so let's
31:40 - set those next
31:42 - we'll take that button class
31:44 - and we'll choose the hover
31:48 - and the first thing we want to do is
31:49 - just change the cursor
31:51 - to a pointer
31:54 - and that's where the cursor changes from
31:56 - the arrow to the little hand with the
31:58 - finger pointing
31:59 - and now the next thing we want
32:02 - is not only button hover i'll put a
32:04 - comma
32:06 - and then we also want to choose button
32:09 - focus
32:13 - and now here we're going to do a couple
32:14 - of things one is set this filter
32:17 - property
32:18 - and we'll change the brightness and you
32:20 - can see it accepts a parameter and we'll
32:22 - set that to a hundred and twenty percent
32:25 - that means it's going to get brighter
32:27 - when we mouse over
32:29 - or focus on the button
32:32 - it will lighten up the color so that
32:34 - should be a visible change we're also
32:36 - going to set a box shadow which is kind
32:39 - of an outline in itself
32:41 - so we'll set that to 4 pixels 2 pixels 5
32:44 - pixels and black
32:47 - and like a shadow
32:48 - now that we've added our button classes
32:51 - let's go ahead and import
32:54 - that partial
33:02 - we'll save that
33:04 - and let's see what we've got going
33:06 - in the live version of our code that
33:09 - we're creating so far again this is the
33:11 - example version that we'd already
33:13 - created to start out the project
33:17 - and here's what we've got and i need to
33:18 - close devtools so you can actually see
33:20 - some of that hover or mouse over in
33:22 - action you can see
33:24 - it brightens up the button although we
33:26 - haven't styled the button the way we
33:28 - want to yet
33:29 - and
33:31 - we also brighten up this button but we
33:33 - haven't applied the specific colors or
33:35 - anything like that to the buttons yet
33:38 - but we will
33:40 - okay we'll come back into devtools
33:44 - there we go
33:45 - let's look at this example again of
33:47 - course we want these colors on the
33:48 - buttons and there's some other things
33:51 - we're going to add as well so we've got
33:53 - the shared classes partial and the base
33:55 - partial
33:56 - now we want to go ahead and tackle each
33:58 - section on its own
34:00 - and the next section or partial we will
34:03 - add we can go ahead and do that here
34:05 - first import
34:07 - and we will call this
34:10 - new item
34:12 - entry
34:15 - so we need to add a file a partial file
34:17 - that has the same title
34:20 - new item entry dot s-c-s-s
34:23 - although note
34:25 - we don't have to put the file extension
34:27 - here sas knows to look for these types
34:29 - of files
34:31 - so now in the new item entry scss
34:35 - we'll start out with that class and that
34:37 - is what we applied in our html as well
34:41 - new item entry
34:43 - and now everything inside this because
34:47 - sas supports nested
34:49 - styles
34:50 - everything inside this class
34:53 - will only be
34:55 - well it will only target what's inside
34:58 - this class so this is a parent is a way
35:01 - to put that so if i just say input at
35:04 - this point it's only going to look for
35:05 - an
35:06 - input inside this class because it's
35:08 - nested
35:10 - i want to start out with the position
35:12 - sticky though and that is because if our
35:14 - list gets long enough i don't want our
35:16 - add item area to scroll off the screen
35:20 - so we'll make it so when it gets to zero
35:22 - it'll just stick and stay at the top and
35:25 - the rest of the list can scroll
35:26 - underneath and we do that with position
35:28 - sticky and top zero just those two
35:32 - settings you'll only see that if you get
35:34 - a really long list and then scroll
35:36 - through the list and it'll just stop
35:37 - right there which we can try that out
35:39 - later
35:40 - margin on the bottom of this
35:44 - we'll set to 1 rem
35:47 - and then padding
35:50 - will set to
35:51 - 0.75
35:53 - rem and those are our main styles just
35:57 - for the container the new item entry
36:00 - container now once again inside the
36:03 - class
36:04 - we're going to use nested styles
36:08 - and the first thing we're going to
36:09 - target is the form
36:11 - because remember the rest of this is a
36:13 - form and it has the text input
36:16 - and the submit button
36:18 - so this display
36:20 - is going to be flex
36:22 - and we're going to justify the content
36:25 - to space
36:27 - between
36:29 - and that will have
36:31 - these two items the input and the button
36:33 - going as far left and as far right as
36:36 - they possibly can
36:38 - so i'll go ahead and save that and let's
36:40 - see what changes are being implemented
36:42 - here
36:43 - yeah it looks a little different than it
36:44 - did before it's definitely not what we
36:46 - want yet but we're working on it
36:49 - now inside the form
36:51 - we have a label
36:54 - but you don't see the label let's look
36:56 - back at the main one
36:58 - you don't see the label here you see the
36:59 - placeholder text but the label is
37:01 - nowhere to be seen but we still have a
37:03 - label and that is for accessibility
37:05 - however i'm going to style the label
37:08 - way off the screen i'll put the position
37:12 - as
37:13 - absolute
37:16 - and then i'm going to send it left and
37:19 - i'll put minus ten thousand
37:22 - pixels
37:24 - and that will take that label way off
37:26 - the screen but a screen reader will
37:28 - still read that label because it relates
37:31 - to the input
37:32 - and now we can target the input
37:36 - and we probably could just say input but
37:39 - since we have a button
37:41 - which is a submit type and you could
37:43 - have an input with a type submit and
37:44 - then it would show up as a button it
37:46 - gets confusing so i'm going to just get
37:48 - a little bit more specific here i'll say
37:50 - input type equals
37:53 - text and so that's a way you can see how
37:55 - to make a more specific selector there
37:58 - based on the input type
38:00 - and i'll set the width
38:03 - to 80 percent
38:06 - font size is going to be a little bit
38:08 - bigger than the standard so 1.25 rem
38:13 - and then border
38:15 - 2 pixel
38:17 - solid
38:19 - text box
38:21 - border color
38:24 - and then border radius
38:28 - 10 pixels once again to round those
38:31 - edges padding
38:34 - 0.75
38:36 - rem that will give a little bit of space
38:38 - inside the text
38:39 - and then once again i'll set this
38:41 - outline
38:43 - to none
38:44 - but then
38:45 - i have to make sure i'm doing something
38:47 - with that input when we get there
38:51 - so we will have a focus and hover
38:53 - setting for this input let's look at the
38:56 - changes now
38:57 - that looks a little better
39:00 - we're getting there
39:04 - okay so what will we do for the input
39:10 - and once again i need to specify type
39:12 - equals
39:13 - text
39:17 - oh focus
39:19 - comma yeah and then input
39:22 - again type
39:23 - equals text
39:26 - and hover
39:30 - now let's add a box shadow
39:34 - to that input
39:39 - and let's come back and look at that
39:40 - again
39:42 - we'll close the dev tools here and we've
39:44 - got a box shadow
39:46 - over the text when we hover or when it
39:49 - has focus the box shadow stays so that
39:51 - is what we wanted there
39:53 - let's come back to dev tools
39:58 - and we can add a few more things here so
40:01 - we've got the input taken care of
40:04 - and this is our specific button now even
40:07 - though we have our button class in our
40:09 - shared classes partial
40:10 - we have a button specific
40:13 - to our item entry area and so within
40:16 - that class we're going to target this
40:18 - button
40:21 - this button element
40:22 - put font size it's 1.25 rem
40:27 - background color
40:32 - it's going to be our add
40:33 - button color
40:37 - padding 0.75 rem
40:41 - at include
40:43 - let's include our
40:45 - media query
40:50 - font size of 1.5 rem
40:54 - when the page gets up to tablet size
40:57 - and that's where we just increased the
40:59 - font size a little bit to scale up
41:02 - with the size of the page
41:04 - and let's save all of that
41:07 - okay we have one more partial to add and
41:09 - that is for our list container styles
41:12 - and so we will add the extra partial to
41:15 - our sas folder
41:17 - and we're going to call it underscore
41:19 - list
41:20 - container.scss
41:23 - and we'll need to remember to go to our
41:25 - style
41:27 - and include that with the import
41:29 - statement
41:31 - and we'll say underscore
41:33 - list container
41:36 - just import that partial as well okay in
41:39 - the list container itself the first
41:41 - thing we want to do is name the class
41:44 - the same class we used in our html and
41:46 - once again everything will be nested
41:48 - within this class we'll set just a
41:50 - couple of properties for the class
41:53 - itself
41:56 - we'll put a minimum height
41:58 - of 60
42:00 - viewport height that's what i call it
42:02 - viewport height units um
42:04 - it's kind of like 60 whatever
42:07 - the viewport height is the minimum
42:09 - height of this will be 60 percent
42:13 - of the viewport height
42:15 - and so that gives it some room if you
42:16 - don't have much in your
42:18 - list at that point it'll still expand at
42:21 - least to that 60
42:23 - and i think it looks just a little bit
42:24 - better okay padding we'll go ahead and
42:27 - add 0.75
42:29 - rems here as well
42:31 - and now let's get into the list title if
42:34 - you remember we had that list title
42:36 - class nested within and that has the
42:38 - to-do list title it has the clear button
42:42 - in this section right here
42:44 - we're going to display in a flex
42:47 - flex display flex box is what we're
42:49 - using
42:50 - justify the content again we'll do the
42:53 - space between like we did
42:57 - at the top for our form so that'll take
42:59 - things far left and far right and here
43:02 - we're going to align
43:04 - items
43:05 - and we'll put flex
43:07 - end instead of at the beginning
43:11 - from there
43:13 - we'll look at the button that is inside
43:15 - the title
43:17 - say font size
43:20 - one rem
43:22 - background color
43:24 - here we'll do the clear
43:27 - button color we defined
43:31 - now for padding
43:34 - i'm going to set the top to zero
43:39 - and then we'll set
43:40 - well the top and the bottom to zero
43:42 - actually and then we'll set the sides to
43:44 - just
43:45 - just a little bit of padding one or 0.1
43:48 - rem just to give it just a hair of
43:51 - padding okay margin at the bottom
43:56 - 0.5 rem
43:58 - that's just to give it a little bit of
44:00 - space
44:01 - between
44:02 - the horizontal rule we have at the very
44:04 - bottom and the button
44:07 - okay and let's add a media query
44:10 - with include
44:12 - and remember we defined our mix and
44:14 - media query and this is once again when
44:16 - it reaches the size of an ipad tablet
44:18 - i'm going to change that font size
44:22 - now let's not change the font size it
44:23 - can just stay where it's at
44:25 - let's add padding just a little more
44:28 - padding
44:31 - so the top still and the bottom still
44:33 - has zero but the sides will now have 0.5
44:36 - instead of 0.1 rem
44:40 - okay there's a little bit now besides
44:42 - the button we also have
44:45 - a horizontal rule that we can do
44:48 - something with
44:49 - and we'll just set that width to 100
44:52 - so it goes
44:53 - all the way across except there's a
44:56 - little bit of space here where we have
44:58 - that padding that we defined up here at
45:00 - the beginning of the container so that
45:02 - padding is in the container but it takes
45:04 - up a hundred percent of the width
45:06 - available to it
45:09 - okay so we're in the list container and
45:11 - we defined everything in the list title
45:14 - area
45:16 - now our buttons look right of course
45:18 - here our title looks correct also and we
45:20 - do have the horizontal rule so that's
45:21 - all good
45:22 - so now we need to go to the item area
45:24 - and if you remember in the html
45:28 - the item area
45:30 - is where we start adding those list
45:32 - items
45:35 - here we have our list item and inside
45:37 - that were the items
45:40 - themselves and we're going to
45:42 - dynamically create these items
45:44 - in our app so we need to go ahead and
45:46 - style those
45:48 - let's get back to our list container
45:51 - and we've got the list title class and
45:53 - we're finished with that so now let's
45:55 - just go to the item class
45:59 - and we'll also set that display
46:02 - to flex
46:04 - and we'll justify the content
46:08 - and we'll set that content to flex start
46:12 - so this starts at the very top
46:14 - and then we'll also align items here
46:18 - and we'll center those items
46:21 - and we'll set
46:23 - uh the padding
46:24 - on the top
46:27 - to one rem we need a little bit of space
46:29 - there
46:31 - okay the inputs the inputs if you
46:33 - remember are check boxes so here we'll
46:35 - specify the type
46:37 - equals check box
46:41 - and
46:42 - we'll get a little
46:44 - room for the definition
46:46 - we'll go text align
46:50 - center
46:53 - and we'll have the width
46:55 - and that would be 2.5
46:57 - rem to get a little bit bigger check box
46:59 - there
47:00 - the minimum width
47:04 - kind of look at this like a button
47:06 - because once again could be touching
47:08 - that so we want 48 for min width
47:11 - min height will also want 48 pixels just
47:15 - like we treated the buttons
47:17 - and then height itself which maybe we
47:19 - should have put here before the min
47:22 - height
47:23 - height
47:24 - will set to 2.5 rem also
47:29 - underneath the min height we can switch
47:31 - the cursor to a pointer
47:35 - just like we would for buttons
47:37 - and then margin on the right because we
47:39 - want to give some space between the
47:41 - check box
47:42 - and the label
47:44 - set to 1.5 rem
47:47 - now let's go ahead
47:49 - and add
47:50 - something for the focus that will help
47:52 - our accessibility
47:54 - once again identify the check box input
47:59 - and we'll say focus but now there's one
48:03 - more thing to add here plus label
48:06 - because this is the label out to the
48:08 - side where you see eaton sleep or in the
48:10 - finished version you see eat sleep code
48:13 - this is because when we tab through say
48:15 - using a keyboard or when we select the
48:18 - item but when we tab through and this
48:20 - item has focus we want to underline
48:22 - those to-do items
48:24 - we need to give it that extra visual
48:27 - for the each item like the the word eat
48:30 - or sleep needs to be underlined and here
48:32 - we can do that with a text decoration
48:36 - and underline
48:38 - that to do item and then for label
48:41 - itself and this is the label
48:43 - which is also the to do item here
48:46 - font size will set to 1.1 rem just a
48:49 - little bit bigger than normal
48:52 - and let's go ahead and save that
48:55 - oh this looks much more like it okay a
48:58 - quick correction i was trying to figure
49:00 - out why i was scrolling left and right
49:02 - and yet the original that i had designed
49:05 - was not of course and it shouldn't be i
49:08 - went back and i was in a hurry and on
49:10 - box sizing after setting margin and
49:12 - padding to zero i made the mistake of
49:14 - putting a zero for box size and we don't
49:16 - want that we want
49:18 - border box is the value that we need
49:22 - and now
49:24 - you will see
49:26 - well it's still moving just a little bit
49:27 - here but i think if we close dev tools
49:29 - as this sometimes happens and then if i
49:31 - put it back
49:33 - into
49:35 - there we go
49:36 - put it back in
49:38 - now it's not scrolling left and right at
49:40 - all sometimes you have to open and close
49:42 - dev tools to get
49:44 - your mobile
49:46 - simulator to
49:48 - adapt just right so now it won't scroll
49:49 - left and right at all and that's exactly
49:51 - what we want so everything is as it
49:53 - should be
49:54 - with the border box setting i had
49:56 - mistakenly set that to xero before with
49:59 - that our sas is completed our app is
50:02 - styled and we are ready to move on to
50:04 - the javascript we're now ready to move
50:07 - on to the javascript of our project and
50:09 - so we want to create a javascript folder
50:12 - let's go ahead and just name that js
50:16 - and inside the javascript folder we're
50:18 - going to have more than one file let's
50:20 - start out with a to-do list.js
50:23 - file and i want to create a class for
50:26 - our to-do list this isn't going to be an
50:29 - app where we can have multiple to-do
50:31 - lists we're just going to have one major
50:33 - to-do list
50:34 - and so it's not too complicated
50:37 - we'll start with an export and this will
50:39 - be the default export as a matter of
50:41 - fact the only class in this file and it
50:44 - will be a to-do list
50:47 - so we have to have a constructor
50:53 - in this constructor we'll have this dot
50:55 - underscore list and it will equal an
50:58 - empty array to start out with
51:00 - and now
51:02 - we'll have a few methods or kind of a
51:05 - getter and setter if you will will
51:07 - definitely have a get list
51:11 - and with that we will return
51:14 - this dot underscore list
51:19 - we'll also have a clear list
51:23 - so we can empty out the contents of the
51:25 - list
51:26 - and for that we'll just set it equal to
51:28 - an empty array once again
51:34 - and
51:35 - what else can we add add
51:37 - item
51:39 - to list
51:40 - now here we'll need an item object
51:42 - because each to do is going to be its
51:44 - own object
51:46 - and with this one we'll have this dot
51:49 - underscore list dot push
51:52 - item object and we'll push the item into
51:55 - the array
51:57 - and then of course we need to be able to
51:58 - remove
52:00 - one item from the list so we'll have
52:01 - remove item
52:03 - from list
52:04 - and we'll supply the id of the to do
52:07 - item when we remove it this will be just
52:10 - a little bit longer than the other
52:13 - methods we've added here so we'll define
52:15 - a list
52:17 - and it will be equal
52:20 - to the list
52:22 - and then we'll say 4
52:24 - let i equal 0
52:27 - and while i is less than the list
52:31 - length
52:33 - we will loop through
52:37 - and now we'll say
52:39 - if
52:41 - the list item which would be represented
52:43 - by the list with the iterator in bracket
52:45 - notation and then dot underscore id so
52:49 - this is specifically the id number if it
52:51 - equals
52:53 - id and we're not using a strict equals
52:55 - here
52:56 - that's because we're going to grab the
52:58 - id
52:59 - from the dom and we'll just grab it
53:02 - right out of the attribute so it won't
53:03 - necessarily be a number it will probably
53:05 - be a string value at that point
53:07 - and so we'll just use the two equal
53:10 - signs instead of the three for strict
53:12 - equals and at this point we can splice
53:16 - to remove the item
53:17 - and we'll start with the iterator
53:20 - and then we'll use the number one
53:23 - because we're only removing that one
53:25 - element from the array and then we're
53:27 - finished with the loop so we can break
53:29 - at that point
53:30 - we'll save that and there is our to-do
53:33 - list class
53:34 - now we need to create a to-do item class
53:37 - which will also be fairly simple
53:40 - so let's go ahead and add another file
53:43 - and call this to do
53:45 - item js
53:47 - and in to do item js it'll start out
53:49 - much the same way export
53:52 - default class to do
53:56 - item
53:57 - now unlike the list we're going to
53:59 - create mini to do items
54:02 - we'll start with the constructor it'll
54:04 - be this dot underscore id equals null to
54:08 - start out with
54:09 - this dot underscore
54:12 - item
54:13 - will equal null also
54:17 - no predetermined values there so then
54:19 - we'll have a getter a get id
54:22 - it's going to return
54:23 - [Music]
54:25 - this dot underscore id
54:28 - then we'll have a setter with a set id
54:33 - and i prefer to use methods named like
54:35 - this rather than the get and set
54:37 - keywords it just reads
54:40 - better to me throughout the code it's
54:42 - easy to see what's going on oh and with
54:44 - the setter
54:45 - we we need to pass in the id as a
54:48 - parameter
54:50 - we'll have this dot underscore id equals
54:53 - id
54:55 - now we'll also get the item
55:00 - and we'll return
55:03 - this dot underscore item
55:06 - and then
55:09 - we'll have a set item and here we need
55:12 - to pass in the item
55:14 - along with this dot underscore item
55:17 - equals
55:18 - item and that is our to do item class so
55:23 - you can see we just really have the two
55:25 - properties in the constructor and we
55:26 - have getters and setters for each of
55:29 - those properties
55:31 - okay we'll put the rest of the
55:32 - javascript for this project in a file
55:34 - that i typically name main js
55:39 - main.js
55:41 - and in this main.js file the first thing
55:43 - we want to do
55:44 - is import
55:46 - our to-do list
55:49 - from
55:52 - the to-do list
55:53 - dot whoops dot js
55:57 - and then we'll import
55:59 - to do
56:01 - item
56:02 - from
56:05 - to do item
56:06 - there we go
56:08 - dot js
56:11 - and then we'll create
56:14 - a to-do list
56:18 - object from
56:19 - the to-do list class so it's a new to-do
56:22 - list
56:24 - and now at this point we haven't added
56:26 - the script tag to our html yet so we'll
56:29 - need to go back and do that
56:34 - and we'll come up to the top i'm going
56:36 - to go ahead and hide the file tree again
56:39 - just so we can see a little better and
56:41 - we need to add that script tag when we
56:44 - add the script tag and i'll do that
56:46 - below
56:47 - the css link
56:51 - we
56:52 - identify the source
56:54 - starts in our js folder
56:57 - and
56:58 - then it will be our main js
57:02 - but we also need to add
57:04 - type
57:05 - equals
57:06 - module because we're using imports
57:10 - and it has a closing script and that
57:12 - should be good
57:14 - i'll show the file tree once again and
57:16 - we'll go back to the main js file
57:19 - now i can probably hide that and give us
57:21 - a little more room
57:22 - and we'll go ahead and get started by
57:24 - adding the very first function
57:27 - and that function should be what listens
57:30 - for the load event that we're listening
57:33 - for
57:34 - but it's not specifically the load event
57:36 - but we're going to add a document
57:38 - and then add event listener
57:41 - directly to the document and we're
57:42 - listening for the ready state change
57:46 - and with that event
57:51 - we will fire
57:52 - uh well we'll listen here if
57:55 - event dot target dot ready state
58:00 - we'll listen for that and now a strict
58:02 - equals equals complete and that means
58:04 - the dom is fully loaded and ready to
58:07 - interact with
58:08 - if we get to this point we're ready to
58:11 - launch our init app function
58:18 - and so now we're ready to get started
58:20 - and what would go in our init app
58:22 - well we won't add everything right away
58:26 - but our init app and i'll make an arrow
58:28 - function here for it
58:30 - we'll have our event listeners
58:32 - so we're going to add listeners here
58:37 - and then it's also
58:39 - going to have a couple of procedural
58:42 - items that we're going to call other
58:44 - functions we're going to make
58:45 - and so i'll put here procedural
58:48 - things that we want to do right when the
58:50 - app loads
58:51 - one is going to be to load
58:56 - our list or our list object
58:59 - and especially if we store that in any
59:01 - persistent data if we use our web
59:04 - storage api to do that we're going to
59:06 - want to load those list items out of
59:07 - there when we come back to visit so
59:09 - they're still there the other thing we
59:11 - want to do is
59:13 - refresh the page
59:15 - and that can have a few items within it
59:17 - so let's go ahead and create that
59:19 - function right now so our refresh
59:23 - the page function is what would be
59:25 - called into action
59:27 - so we need to create that function below
59:29 - it
59:30 - and it is going to contain a few helper
59:33 - functions
59:35 - kind of a procedural function of its own
59:37 - so we'll define refresh
59:39 - the page
59:42 - doesn't need any parameters
59:45 - and one thing we're going to do
59:47 - is clear
59:49 - the list
59:51 - display
59:52 - so that's a function on its own
59:55 - another thing we're going to do
59:57 - is render the list
60:00 - a third thing we will do
60:03 - is clear
60:04 - the item
60:06 - entry field that would be that text
60:08 - input where we're entering things we
60:09 - don't want leftovers hanging out there
60:11 - and the final thing we want to do is set
60:14 - the focus
60:15 - on the item entry field
60:18 - we don't want to be somewhere else and
60:20 - always have to click in the box or tab
60:22 - back to it we always want the focus
60:24 - set back to that item entry and ready to
60:27 - go right when the page loads or whenever
60:29 - we decide to refresh the page so there
60:31 - we
60:32 - essentially have a procedural function
60:34 - here that's calling for helper functions
60:36 - and we'll start with the clear the list
60:38 - display
60:39 - so how will we do that we'll define our
60:42 - clear
60:44 - list display function
60:47 - which will also be an arrow function
60:50 - and from there
60:51 - we need to define a parent element
60:54 - so that's exactly what i'm going to call
60:56 - that
60:57 - variable
60:58 - and we'll select the parent element from
61:01 - the document with the document get
61:02 - element by id
61:05 - and we're going to look for the list
61:06 - items container
61:08 - that will be the parent element for all
61:11 - of the list items
61:13 - and now we're going to create another
61:15 - helper function that deletes the
61:17 - contents
61:19 - of whatever
61:21 - element we feed this function so we need
61:24 - to feed it a parent element
61:27 - and that's what we defined so one more
61:29 - helper function here and we're breaking
61:31 - these into smaller functions because
61:33 - they're easier to manage
61:35 - and you really only want your functions
61:37 - to do one thing if they're not
61:39 - procedural functions and
61:41 - a
61:42 - procedural function like refresh the
61:44 - page should be calling these other
61:46 - functions that are only doing one thing
61:48 - each and sometimes when we get something
61:51 - like clear the list display if we
61:53 - determine that it needs its own helper
61:55 - function we can break that out as well
61:58 - so now let's define this delete contents
62:02 - this delete contents function
62:04 - isn't necessarily just for this web app
62:07 - this could be used in a variety of web
62:09 - apps and honestly it's a function that i
62:12 - use in almost every web app that i
62:15 - create with vanilla javascript because
62:16 - it's just a function that will delete
62:19 - all of the child
62:21 - elements of a parent element so let's go
62:24 - ahead and define that let's say let
62:26 - child
62:27 - and we'll set it equal to oh we need to
62:30 - pass in the parent element we're calling
62:31 - that before so
62:33 - i'll just call it the same thing here
62:34 - parent element
62:36 - let child equal
62:38 - parent element
62:39 - and then last
62:42 - element
62:43 - child
62:45 - and then we'll say while
62:49 - child
62:52 - so while there is a child element
62:55 - we'll say parent
62:58 - element dot
63:00 - remove child
63:03 - that's a method will pass in the child
63:04 - so it removes the child while there is a
63:06 - child
63:08 - and then the child is going to equal
63:12 - the parent element
63:14 - last
63:15 - element child once again and that is if
63:18 - there is another one then you reset it
63:20 - to that last element child and you
63:22 - continue that process until they're all
63:24 - gone
63:26 - so we can save that and now our clear
63:29 - list display function is complete
63:32 - so we call that
63:33 - and it selects the parent and then we
63:36 - pass the parent in to delete contents
63:38 - and those contents are deleted
63:40 - okay now let's look at the render list
63:42 - function
63:44 - that's the next one called in line so
63:46 - we'll say const
63:49 - render list
63:55 - and this would
63:56 - set into action the processes that
63:58 - render our to-do list
64:00 - so we'll define a list inside of here
64:03 - and we'll say
64:04 - to-do list remember this is the new
64:08 - to-do list object we created at the
64:10 - beginning and now we want to call in
64:13 - that method get list
64:17 - right now of course it would be an empty
64:18 - list but we're still getting the list
64:21 - and then we'll say list and it's an
64:23 - array so we can use four each
64:26 - and this is for each item
64:28 - on the list
64:31 - we will call a helper function which is
64:34 - build list item and we'll pass in the
64:37 - item
64:38 - from the array that single item
64:41 - we'll save that
64:42 - so now we know we need a build
64:45 - list item function to help out our
64:48 - render list
64:51 - so let's define that build
64:53 - list
64:55 - item and it's going to accept item as a
64:57 - parameter
65:02 - and now this function gets just a little
65:04 - longer because we're creating dom
65:06 - elements
65:08 - like divs and we're setting attributes
65:10 - so we'll start out with a div
65:13 - and really we could go back
65:16 - to our html and just take a quick peek
65:19 - because what we're creating
65:21 - is what i commented out here that i
65:22 - could bring back in
65:26 - and now
65:28 - i'll hide the
65:29 - file tree and give us a little more room
65:33 - right
65:34 - here this is what we're creating now why
65:37 - don't they show up huh
65:39 - well it could be
65:41 - that our clear
65:44 - list
65:45 - function is working
65:47 - if we come back into our main js file
65:51 - and come to the top and we comment out
65:54 - our clear list display function
65:58 - now they load in
65:59 - just like they were so we know our clear
66:01 - list display function is working so
66:03 - that's great
66:05 - and this is how they should look and
66:07 - it's what we're going to be creating
66:08 - with this build
66:10 - list item so once again
66:12 - quick look at the html
66:16 - and we're going to be creating a div
66:18 - with the class of item
66:20 - and inside that div we're going to have
66:22 - a check box input and a label
66:25 - and there's several attributes that
66:27 - they'll have as well
66:29 - so now
66:31 - back at whoa
66:32 - back at the js
66:34 - in our main js file
66:36 - let's do this build list item function
66:38 - so we start with the div
66:42 - it's document dot create
66:46 - element
66:48 - and we pass in a div
66:50 - so we know that's the type of element
66:52 - we're creating we've set it equal to the
66:54 - variable div so then we can just say div
66:56 - dot class name
66:58 - to set the class equals
67:01 - item
67:03 - now
67:05 - let's build our check box so once again
67:07 - document.create
67:10 - element
67:12 - we have an input element that is a check
67:14 - box
67:16 - and we'll say check dot type
67:19 - equals
67:21 - check box that's the attribute there and
67:23 - then check dot id
67:26 - equals the item we've passed in
67:30 - which is a to do item so it has the
67:32 - method get id that was our getter for
67:34 - the id attribute
67:37 - and then check dot
67:39 - tab index
67:40 - because it needs to have that tab index
67:42 - attribute so it's part of the tab order
67:44 - so we can tab between the items
67:47 - so we'll set that tab index to zero
67:51 - that is good so far and you can see how
67:53 - we're creating those elements and there
67:54 - could be some of you that would say hey
67:57 - you should have a separate function for
67:59 - each one of these elements you're
68:01 - creating and that is a possibility
68:02 - because that would really
68:04 - break it down to doing one thing each
68:06 - and i just haven't broken it out that
68:08 - far we're going to end up with a
68:10 - function that has about 15 lines here
68:12 - right here i'm going to add a comment
68:15 - but we want to add
68:17 - a click
68:19 - listener
68:20 - to check box
68:23 - and we pass in check
68:25 - which would be
68:26 - the check variable so this is going to
68:29 - be a helper function we will come back
68:31 - to that
68:34 - now we'll define a label variable we'll
68:37 - say document
68:39 - dot create
68:41 - element
68:43 - pass in label
68:47 - now our label is going to have a four
68:50 - attribute but
68:51 - in javascript that is html4
68:54 - looks just a little different
68:56 - that is
68:58 - item.getid because you want the four
69:00 - attribute of the label to be identical
69:03 - to the id
69:05 - of the check box
69:08 - okay label
69:09 - dot
69:11 - text content now we're setting the
69:13 - actual text of the label it will be item
69:16 - dot
69:17 - get item
69:20 - and now we want to append what we've
69:23 - created so
69:26 - div dot
69:28 - append child so we have our div and
69:31 - we're going to append
69:33 - the check box
69:34 - and then right after that we'll have div
69:36 - dot append
69:38 - child and we're going to append the
69:40 - label
69:43 - and now we need to go ahead and create a
69:45 - container
69:46 - or
69:47 - at least select the container we're not
69:49 - going to create the container what am i
69:51 - thinking
69:52 - so this is document dot get
69:54 - element by id
69:57 - and it's our list items container
70:02 - and from there we can just say container
70:04 - dot
70:05 - append child and pass in the div
70:11 - well that's all right so all we haven't
70:13 - done is create that helper that adds the
70:15 - listener to the check box but everything
70:18 - else looks good so let's come back up
70:21 - because this was the helper to the
70:23 - render list
70:26 - and here's the render list function well
70:27 - the list is empty so it doesn't have
70:29 - anything to render at this point we're
70:31 - going to have to go back and
70:33 - tell it how to create an item very soon
70:36 - so we can start doing that but right now
70:39 - we can render the list which calls the
70:41 - build list item function and from there
70:44 - we need to go ahead and create
70:47 - a helper function that is called add
70:49 - click listener to check box so that way
70:52 - when the user clicks on that check box
70:55 - something happens
70:56 - now check boxes do have their natural
70:59 - behavior of adding a check to the box we
71:02 - don't really have to do anything to make
71:04 - that happen but
71:06 - let's create this helper function here
71:08 - that says
71:09 - add click listener to check box
71:12 - and we're going to pass in the check box
71:14 - that we're adding the listener to
71:18 - and now inside this function we can say
71:23 - check box dot add event listener
71:28 - listing for the click event
71:31 - and we could pass in the event here
71:34 - although we're not really doing anything
71:36 - with it
71:38 - we've just listened for it and now when
71:39 - it's clicked
71:41 - we can call
71:42 - the to-do list
71:44 - remember that's our object that we
71:46 - defined up in the global space above
71:48 - that is our overall to-do list
71:50 - and we can call remove
71:52 - item from list
71:54 - because that's when we're checking it
71:55 - off we want to remove an item we can
71:57 - pass in the check box
72:00 - id
72:03 - and the check box id that we had grabbed
72:05 - or it has that
72:07 - attribute that was set and we're
72:09 - grabbing that from
72:11 - the
72:11 - element itself so there's the checkbox
72:14 - id we're passing in
72:15 - and now at this point besides removing
72:17 - the item from the list there
72:19 - we and that is removing it from
72:22 - the object we're removing the to do item
72:24 - we would also
72:27 - want to remove it
72:30 - from
72:31 - uh the persistent data so i'm just
72:33 - putting a to do reminder here remove
72:37 - from
72:38 - persistent
72:39 - data and we'll come back to that as well
72:42 - and notice i also have a little
72:43 - extension i'm using for to-do's that
72:46 - does this
72:47 - and we could look that up but pretty
72:49 - much go to your extensions and search
72:51 - for to do and you'll find an extension
72:53 - that highlights to do's for you
72:55 - the one extra thing i want to add is
72:58 - this will happen so fast when we would
73:00 - check a box to remove it
73:03 - that i would prefer to slow that down or
73:05 - at least
73:06 - not refresh the page
73:08 - so quickly that it's just a blur because
73:11 - you get a little bit of satisfaction out
73:12 - of seeing the check mark in the box yes
73:15 - i've checked this item off so i want to
73:18 - use
73:18 - the
73:20 - set timeout
73:23 - that is built into the window object
73:27 - this is one of those things that you
73:28 - could say window.set timeout but you
73:30 - don't have to use the word window
73:33 - and so i'm using the set timeout and
73:35 - inside this set timeout
73:37 - i'm going to call
73:40 - the refresh
73:42 - the page function
73:45 - and that will refresh the page delete
73:47 - the previous items
73:49 - load the new list
73:50 - because we have added an item to the
73:52 - list it doesn't just automatically add
73:55 - to the dom we have to once again pull
73:57 - that data
73:58 - from the dom and i'm going to set the
74:01 - timeout to one second this is a thousand
74:03 - milliseconds which is one second so we
74:05 - get the satisfaction
74:07 - of seeing that check box or our item
74:10 - that we have worked hard on and checked
74:12 - off our to-do list for at least one
74:14 - second before it disappears
74:18 - so we'll save that and other than having
74:20 - it to do for the persistent data
74:22 - we have finished that so
74:25 - now when we build a list item it's going
74:27 - to add a click
74:31 - and apparently i'd mistyped listener
74:34 - it's going to add a click listener if we
74:36 - spell that right
74:38 - to every item when we build it and we
74:42 - build these items in a loop so for each
74:44 - item in the list we build the item
74:46 - so every item also gets a click listener
74:49 - attached to it now that we've completed
74:51 - the add click listener to check box
74:53 - function except for the to do that we
74:56 - have remaining
74:57 - and the build list item that all comes
74:59 - back to our render list we called we
75:02 - just have a couple of small items left
75:04 - in our refresh the page function
75:06 - one is clear the item entry field which
75:09 - is our text entry and the other is set
75:13 - focus on item entry which would just set
75:16 - the focus
75:17 - back here so we could start typing right
75:19 - away without having to click in the box
75:22 - or click a button or tab through
75:24 - so let's go ahead and create those
75:26 - functions
75:27 - and those are quick and easy as far as
75:30 - that goes so
75:31 - we'll come down here under our add click
75:34 - listener to check box function
75:37 - and we'll start with
75:39 - the clear item entry field function
75:46 - does not need a parameter
75:49 - so all we need to do
75:51 - is select the item entry field get
75:53 - element by id
75:56 - and that is new item
76:00 - and then we'll
76:02 - at that value
76:05 - equal to
76:06 - a blank value
76:08 - we'll save that and that is that
76:10 - function that just clears out the text
76:13 - input box
76:14 - and the other function we needed
76:16 - was
76:18 - set focus on item entry
76:23 - once again no parameters needed
76:28 - we'll set the focus
76:30 - element by id
76:32 - and we'll get that new item
76:34 - input again
76:36 - and here we'll just say focus
76:40 - and that will set the focus back
76:43 - to that input
76:45 - and i've noticed we're still using the
76:47 - iphone 5 the smallest view which is what
76:50 - i like to do because it's always easier
76:52 - to expand and make it bigger but we can
76:54 - go ahead
76:55 - and possibly expand our
76:58 - phone just a little let's get a
76:59 - different phone choice
77:02 - maybe an iphone 8
77:06 - and we can see fit to window it'll let
77:08 - us go a little bigger there with a 91
77:10 - that's great
77:13 - that gives us a nice clear view it adds
77:16 - just a little space i felt like the
77:18 - iphone 5 look was a little cramped
77:21 - so there we have everything needed in
77:23 - our refresh
77:26 - the page
77:28 - function and it is a procedural function
77:30 - that calls these other four functions
77:33 - and these functions at least the first
77:35 - two also had some helpers so we've
77:37 - completed all of that now we're probably
77:39 - anxious to start adding
77:41 - uh items to our list and to see some of
77:44 - this in action for sure
77:46 - so let's get started with that
77:49 - what we need to do or is add
77:52 - event listeners
77:53 - then in our initial initialize app or
77:56 - init app function
77:58 - so we'll come back up to the top where
78:00 - we add the listeners
78:03 - and let's go ahead and start with some
78:05 - of that the first thing we want to do
78:08 - is
78:09 - select the entry form
78:16 - and there we go document
78:18 - dot get
78:19 - element by id once again and it is the
78:22 - item
78:23 - entry
78:24 - form
78:26 - so we've selected that entry form
78:29 - and now we can say
78:31 - item
78:33 - entry form
78:35 - dot
78:36 - add event listener
78:38 - and we're listening for the submit
78:40 - because this is a form so when the form
78:42 - is submitted
78:44 - listen for that submission event
78:47 - or submit event
78:50 - and what we want to do let me go ahead
78:52 - and save this real quick and show you
78:54 - why we want to do this
78:56 - right now forms have the default
78:58 - behavior that they submit via a get
79:01 - method even if you don't define that in
79:03 - your html so watch
79:06 - the elements over here to the right when
79:08 - i click the submit button
79:10 - everything flashes it actually reloads
79:13 - because it submits the form
79:16 - we don't want that to happen we want to
79:18 - handle the
79:20 - data ourselves we don't need to submit
79:22 - that form so what we want is an event
79:24 - as we specified in our
79:26 - parameter the event
79:28 - prevent default and that will prevent
79:31 - that from happening
79:33 - so now when i click the button watch
79:35 - over here
79:37 - nothing flashes
79:39 - we can click submit as much as we want
79:41 - to but we've prevented the default
79:42 - behavior of the form
79:44 - and it doesn't
79:45 - reload everything like the dom it
79:47 - happens so fast you don't really see it
79:49 - here but you can see it here in the code
79:51 - so we've done that and now we need to
79:54 - essentially process
79:56 - the submission
79:58 - and that's what i'm going to call this
79:59 - function
80:00 - and that is once again a procedural
80:03 - function a little bit larger that does a
80:06 - few things when we process the
80:08 - submissions so we'll get started with
80:09 - that we need to scroll all the way down
80:14 - underneath our set focus on item entry
80:17 - function
80:18 - and we'll start defining the process
80:21 - submission function
80:24 - no parameter necessary to start out with
80:27 - the very first thing we need to do is
80:29 - grab the text the item what has been
80:31 - entered so we'll say const
80:34 - new entry text
80:36 - and we'll set that to a function named
80:38 - get
80:39 - new
80:41 - entry
80:42 - and as you might guess this function is
80:44 - just going to do the one thing and
80:46 - that's what we want functions to do
80:48 - if at all possible
80:50 - get new entry
80:55 - and we're going to return
80:59 - the document.getelementbyid
81:04 - new item once again
81:07 - value but also trim that value we don't
81:10 - want the white spaces to the left or the
81:12 - right that might exist
81:14 - so we've got the new entry item now by
81:17 - calling that simple function
81:20 - and now we'll say if
81:23 - the new
81:24 - entry text
81:27 - dot length is false which would be zero
81:31 - so that's how we could say if
81:33 - it is equal to zero
81:35 - uh
81:36 - return just exit the function and we're
81:38 - done nothing else needs to happen there
81:42 - but if there is some length to the text
81:44 - there's at least
81:45 - at least one character there something
81:47 - that we want to put on our to-do list we
81:49 - need to go ahead and process this
81:50 - submission
81:52 - so
81:52 - first thing we need to do is get the
81:55 - next
81:56 - item id
81:58 - because we might already have items on
81:59 - our list and if we don't it's clearly
82:01 - going to be the first item but we need
82:04 - to have a function to do that so we're
82:06 - going to say calc
82:08 - next
82:09 - item id
82:11 - and now we need to create a helper
82:13 - function called that so
82:16 - we'll start here
82:17 - and we'll say calc
82:20 - next item id
82:24 - start the arrow function and we'll add
82:27 - let next
82:29 - item id
82:31 - equal one because that's what it will be
82:33 - if no items exist so we might as well
82:35 - start out with that value and then we'll
82:38 - grab the list
82:41 - from our to-do list object by calling
82:43 - the get list method
82:46 - just set that equal to list and now i'll
82:48 - say if
82:50 - list.length greater than zero
82:57 - the next
82:59 - item id
83:00 - is going to equal now we're going to
83:02 - refer to the last item on the list and
83:05 - we do that by saying list
83:07 - dot length
83:09 - minus one and that refer using bracket
83:12 - notation there with our list array that
83:15 - would be the last item on the list
83:18 - and now we could say
83:20 - get
83:21 - id we'll call the id for that last item
83:25 - then we need to add one to it and that
83:27 - would be the next item
83:30 - and of course
83:32 - if it was not greater than zero
83:34 - then we just return
83:37 - the next item id which would be one
83:41 - and there is our calc next item function
83:45 - okay so after we calc the next item id
83:49 - we need to go ahead and create
83:51 - an item so now we say
83:54 - const
83:55 - to do item
83:57 - equals
83:59 - create new item
84:01 - now we've got a couple of pieces of data
84:03 - already and since they exist we need to
84:06 - go ahead and create this item we say
84:08 - next item id is passed in as a parameter
84:11 - and also
84:12 - the new entry text
84:15 - is a parameter for
84:16 - creating that
84:18 - new item
84:20 - okay creating the new item we just
84:22 - scroll down below and create that
84:24 - function and we'll say create
84:27 - new
84:28 - item and we're going to set this equal
84:31 - to an arrow function actually also so
84:33 - we'll say
84:34 - item id
84:36 - because we're passing in the next item
84:38 - id
84:39 - and then we'll say item text
84:42 - because we've passed in
84:43 - the text as well oh yeah arrow function
84:46 - almost forgot again
84:48 - and now we need to create a new to-do
84:50 - item so we'll say to do
84:52 - equals
84:54 - new to do
84:56 - item this is a new object created from
84:58 - our to do item class
85:02 - and we'll start using those methods
85:04 - so we'll set the id
85:07 - equal to item id
85:09 - and i'll say to do
85:12 - set item
85:14 - equal to
85:17 - item text
85:19 - and then we'll just return
85:23 - the to do
85:26 - that was easy enough so if we come back
85:28 - now our to-do
85:30 - is held in this to-do item variable
85:33 - now that we have our to-do item we can
85:36 - just call our to-do list into action
85:40 - this is our to-do list object that we've
85:42 - created and it has the add item to list
85:44 - method
85:45 - so we just call that method and pass in
85:48 - the to-do item
85:52 - now a note here again
85:54 - another
85:55 - reference to it to do this is to do in
85:58 - our code
85:59 - this is where we would want to
86:01 - update our persistent data once again
86:04 - because we've added a new item so that
86:06 - would need to go into that storage as
86:07 - well so what we're seeing is anytime
86:10 - we update our to-do list
86:12 - whether it's adding an item or removing
86:14 - an item we also need to update our
86:16 - persistent data
86:18 - and then when this is all completed
86:21 - we need to
86:22 - refresh the page again and that is
86:24 - because we have added a new item and so
86:27 - that page needs refreshed and it will
86:29 - now show the new item as well
86:31 - and it's not like refreshing a web page
86:34 - in
86:34 - completely this will happen so fast that
86:36 - you won't even
86:38 - realize that all the items have been
86:40 - deleted and shown again it will look
86:42 - like just one new item appears if you
86:44 - can believe it we are almost finished
86:46 - with the app we still need to add
86:48 - something for our clear button and we
86:50 - need to handle our persistent data one
86:53 - quick correction this new to do item
86:56 - needs to start
86:57 - with a capital t as when we import these
87:00 - classes you can see the lowercase
87:03 - t on my to-do here but when we scroll to
87:05 - the top we can see we're importing these
87:08 - with capital ts capital letters because
87:11 - they're classes that we have imported so
87:13 - that needs to be a to-do item
87:16 - with a capital t
87:18 - now that said let's go ahead and check
87:20 - out
87:22 - our process submission function where we
87:24 - could say eat
87:26 - and we could say sleep you notice the
87:28 - focus goes right back to the input and
87:30 - we can say code and that all works like
87:33 - we want but we could also say sleep
87:35 - more and tab over
87:38 - to the
87:39 - submit button and hit enter there and
87:41 - when we hit enter it goes back and sets
87:43 - the focus back into the text input like
87:46 - we need so that's also very convenient
87:49 - and that
87:51 - submit function is doing all of that is
87:54 - not submit the submit event is what is
87:58 - happening there and that is triggering
88:01 - the rest of that we didn't need to have
88:03 - any other click event listener or
88:06 - anything else it's just the forms submit
88:09 - event that is making that happen when
88:11 - that fires
88:13 - whether it's from the submit button or
88:15 - from us hitting enter because this is a
88:18 - one input form so we can just press the
88:21 - enter key and it works just as well of
88:23 - course we can tab through all of these
88:25 - and you see the items get underlined
88:30 - and the hover
88:33 - and focus were focused on the clear
88:35 - button they were focused on the submit
88:37 - button
88:38 - or focused back on the text input all
88:40 - work like they should so let's go ahead
88:42 - and finish up this app by adding a
88:45 - listener for the clear event button or
88:48 - the clear button and listen for its
88:49 - click event
88:51 - and then we could also
88:53 - finish up by adding the persistent data
88:56 - so let's scroll to the top and add the
88:59 - other listener that is missing for that
89:02 - clear event or the the click event on
89:04 - the clear button
89:09 - starting out we'll define our clear
89:11 - items variable
89:14 - and we'll grab the element we need which
89:16 - is the button
89:18 - document get
89:20 - element by id once again and we'll grab
89:22 - the clear items id which is the button
89:27 - and now we'll say clear
89:30 - items dot add
89:32 - event listener
89:34 - listen for the click on that button
89:40 - and pass in the event even though we
89:41 - won't really need the event in there and
89:44 - we want to say
89:46 - get the list
89:49 - which is the to-do list object we've
89:51 - created and we'll say get list again
89:54 - once we have that we'll say if
89:57 - list dot length
89:59 - that means if it has a length that is
90:02 - not zero if there's length to the
90:04 - list we want to
90:07 - use a confirm a little confirm window
90:12 - so we'll say confirm and the message is
90:16 - are you sure you want
90:19 - to clear
90:21 - the entire list
90:23 - question mark
90:25 - and of course we need a semicolon there
90:28 - i want to go ahead and wrap this so it's
90:30 - not scrolling off the screen there we go
90:32 - are you sure you want to clear the
90:33 - entire list
90:35 - and after we ask that
90:38 - if
90:39 - confirmed because confirmed will the
90:41 - confirm window
90:43 - will return or the confirm pop-up will
90:45 - return a boolean so it's either true or
90:47 - false whether they click
90:49 - ok or cancel
90:51 - and so if confirmed if we click ok and
90:54 - it comes back true
90:55 - we'll say to-do list which is our object
90:58 - called the clearlist method that we've
91:00 - already defined
91:04 - to do here
91:05 - update
91:08 - persistent data once again
91:11 - because we've cleared out the full list
91:14 - so at that point
91:15 - the persistent data should also get
91:17 - emptied out and then we'll say refresh
91:20 - the page
91:22 - because anything that was displayed
91:24 - should be deleted from the list
91:27 - and so that is the event listener for
91:30 - the clear button
91:32 - so let's add a few things let's say eat
91:36 - sleep
91:38 - code
91:39 - and now let's click the clear button
91:41 - and we get our confirm we'll say okay
91:45 - and it cleared the full list
91:47 - likewise if we said eat
91:50 - sleep
91:51 - code we had two different ones it
91:53 - doesn't really matter and we clicked and
91:55 - then we got the confirm and we click
91:56 - cancel
91:57 - then it doesn't and that's the behavior
91:59 - we wanted so that is great and that
92:02 - finishes the clear button action
92:05 - so now we need to handle this persistent
92:08 - data and that is in several places in
92:10 - our
92:11 - codes here so let's look from the top
92:13 - let's look for all the to-do lists we
92:15 - might see
92:16 - and the very first thing we see is
92:18 - update persistent data and i think we're
92:20 - going to see that several times
92:22 - throughout there
92:23 - see we're on line 30 we have an update
92:26 - persistent data
92:29 - whereas our next to do
92:31 - on line 88 remove from persistent data
92:37 - and that could just be update the
92:39 - persistent data again because we could
92:41 - just grab the list after it's been
92:43 - removed from the list
92:45 - and then online 109 we have an update
92:47 - persistent data so we need to do that in
92:49 - several places let's just add our update
92:52 - persistent data
92:54 - right under our add click listener to
92:56 - check box function
92:59 - and it's not a big function at all
93:03 - update persistent data
93:06 - we're going to pass in the list array
93:13 - and there we'll use the local storage
93:16 - and we'll set the item
93:18 - and now we need to name what we we're
93:20 - going to call our storage i'm going to
93:22 - call it my to-do list
93:26 - now we need to use json stringify
93:29 - local storage works great with json
93:32 - so we're going to
93:34 - stringify our list array because
93:37 - local storage only
93:39 - stores strings anyway it will convert it
93:42 - even if we don't use
93:44 - the json so we might as well
93:46 - use json and take advantage of that
93:50 - and that is the full
93:52 - function that we need to update
93:54 - the persistent data so now let's just
93:56 - look for the places
93:58 - that call for that persistent data to be
94:00 - updated
94:03 - and call this function
94:05 - update persistent data and
94:08 - inside we'll always pass the to-do list
94:12 - get list
94:14 - so as long as the list has been updated
94:16 - whether it's had something removed or
94:17 - something added
94:19 - this will update the persistent data so
94:22 - i'll copy that and we'll just look for
94:24 - these other places in our code that
94:25 - needed it
94:31 - any other to do is highlighted
94:33 - i think there might be one at the top
94:35 - yes there is
94:40 - now we have updated our persistent data
94:42 - in all of the places we need it so when
94:44 - we come back if we leave the site and
94:47 - come back maybe even a week later
94:49 - our to-do list will still remain and
94:52 - the only thing we haven't done now
94:55 - is one of the things we talked about at
94:56 - the very beginning
94:58 - and that is to load the list object we
95:02 - need to load it out of
95:04 - our web storage
95:06 - and read that into our app
95:09 - right when the app starts up so let's
95:11 - call that a function
95:14 - and we'll just call it load
95:17 - list object
95:20 - and then we get to define that function
95:23 - so we'll put it let's say let's put it
95:25 - right above the refresh the page
95:28 - function because that's where it's
95:29 - called in our code as well so load list
95:32 - object
95:34 - make it an arrow function
95:36 - and besides the event listeners and of
95:38 - course the init app that it's
95:40 - within is the very first function that
95:43 - actually
95:44 - does something other than
95:46 - listening for
95:48 - the app to start
95:50 - so
95:51 - what we'll start out with is defining
95:53 - our stored list
95:56 - we'll say local storage
95:59 - dot get
96:01 - item
96:02 - and we're getting my to-do list out of
96:04 - local storage
96:07 - so now that we've grabbed the list if it
96:09 - exists we need to see if it exists and
96:11 - i'm going to say if
96:13 - the type of
96:16 - so i'm checking the type of data that's
96:18 - coming out here the type of the stored
96:20 - list
96:21 - if it's not equal to string
96:24 - then it's really not what we're
96:25 - expecting so
96:27 - just abort mission at that point so
96:30 - if the stored list is not equal to a
96:32 - string and it should be string data
96:34 - that's definitely what we're storing
96:36 - we're stringifying json and putting it
96:38 - in there
96:39 - but if it's not
96:40 - get out of there
96:42 - so
96:43 - if the list exists and it's what we
96:45 - expect it will be stringified json data
96:48 - so now we can say
96:50 - const
96:52 - parse list
96:56 - and call jsonparse
96:58 - and put the stored list in here and
97:01 - parse that out and now
97:03 - we should have our parsed list
97:05 - that would be the object we brought back
97:08 - in so now we can say parsed
97:11 - list
97:13 - for each because
97:15 - this json is going to have our item
97:17 - objects in it so we have item objects so
97:20 - we'll say for each item object
97:27 - create a new
97:30 - to do item
97:32 - and this is because our to-do items have
97:35 - methods so we're not just pulling the
97:38 - data out we want those methods but when
97:40 - we stringify or even if we didn't
97:43 - stringify if we just stuck them into
97:45 - the local storage or with the web
97:48 - storage
97:49 - they lose those methods
97:51 - those methods don't stick with them when
97:53 - we pull them back out so we want to just
97:56 - create new items again remember this is
97:58 - when the app loads so we know we have a
98:01 - list of items now we're actually making
98:03 - each item a to-do object again and
98:06 - storing it in the list so this is why we
98:08 - take this approach
98:10 - so we create a new item new to do item
98:13 - and we have to call our create new item
98:16 - function that we previously defined
98:19 - and we can pass in the item object now
98:22 - here we don't get to use the getter or
98:24 - the setter because they don't exist so
98:27 - we have to refer to those properties and
98:29 - we refer to the item object underscore
98:31 - id
98:32 - and item object
98:34 - dot underscore
98:37 - item
98:40 - and then we call that to-do list object
98:43 - that we created at the top so it already
98:45 - exists
98:46 - and then we call the method from it add
98:49 - item to list
98:50 - and we add the new to do item
98:54 - we just created of course we do this for
98:57 - each
98:58 - item on the list okay let's clear out
99:01 - our list
99:03 - let's add some more items let's say we
99:06 - need to get
99:08 - eggs
99:10 - milk bread and chips can't live without
99:14 - chips maybe tacos too
99:16 - okay we've got eggs milk bread chips and
99:19 - tacos let's check our
99:22 - storage we go to the application tab and
99:26 - now we might have to pull this over a
99:28 - little further
99:29 - but we do have some local storage here
99:33 - on my to-do list
99:37 - and down here we can see each item
99:40 - actually
99:41 - and here is the id one two three four
99:44 - five and we've got eggs milk bread chips
99:48 - and tacos
99:50 - let's check some more of our app let's
99:52 - delete bread
99:53 - there's the nice check box for one
99:55 - second before it's gone
99:57 - and now you can see we've got items one
99:59 - two four and five so our persistent data
100:01 - updated right away and that's exactly
100:03 - what we wanted
100:05 - and maybe i'll go ahead and delete one
100:07 - more
100:08 - let's get rid of the chips
100:11 - okay great now let's add something here
100:14 - let's say we want to add
100:16 - noodles
100:18 - you can see
100:20 - we created the next item id based on the
100:22 - last one even though three and four were
100:24 - missing we didn't create an item with an
100:26 - id of three we grabbed the last item and
100:29 - added one
100:30 - and it creates the next item id as it
100:32 - should
100:33 - i believe we are finished creating our
100:36 - app
100:36 - so let's review everything
100:39 - i'll scroll this back over give us a
100:41 - little more room and let's even close
100:44 - this out and see how it looks on a
100:45 - bigger screen so we could really
100:48 - add a longer item go to the store
100:51 - and buy
100:53 - milk
100:54 - uh if i could spell milk eggs
100:57 - and cheese and it's there but we can add
101:00 - more
101:01 - and more
101:03 - and more
101:05 - and more
101:06 - and more
101:08 - and even one more and now let's scroll
101:11 - and our sticky
101:13 - item entry works also it stops at the
101:15 - top
101:16 - that's great so now we can click
101:19 - click
101:21 - click
101:22 - can we click to it once
101:24 - yes
101:25 - just have to be quick or it disappears
101:27 - and comes back so if we went click and
101:29 - then hesitated
101:31 - it would maybe not work as well but we
101:33 - can try to debug it and even refine this
101:35 - there's a lot of room for improvement in
101:37 - this app this is a very basic to-do list
101:40 - application
101:42 - and i'm sure you can add more features
101:44 - that would even make it better and of
101:46 - course in the long run you might want to
101:48 - create an app that will handle more than
101:49 - one list and you could select which list
101:52 - you're working with
101:54 - all right let's test out our to do web
101:57 - app and the first thing we want to do is
102:00 - uh activate the chromevox screen reader
102:04 - and see how it responds we've already
102:07 - used the functionality we know we can
102:08 - add items and remove items with a mouse
102:11 - so we're really going to test out the
102:13 - accessibility features
102:15 - so go to the three dots in chrome and
102:17 - then choose more tools
102:20 - and choose extensions
102:22 - from extensions you'll want to activate
102:25 - the chromevox classic edition if you
102:27 - don't have that extension
102:30 - go to chrome.google.com
102:34 - and let's see what the rest of that
102:35 - address is
102:38 - it looks like
102:39 - i think you could just search for the
102:41 - chrome web store but it's
102:43 - chrome.google.com
102:45 - webstore
102:47 - slash
102:49 - category
102:50 - extensions and that would probably get
102:53 - you there but go there
102:54 - and search for
102:56 - chrome vox vox
102:59 - and i can expand the browser a little i
103:02 - believe so we can see that
103:04 - and choose the chromevox classic
103:06 - extension that's what you
103:08 - want see if i can bring this back
103:12 - where we had it there we go right about
103:15 - there
103:15 - so we'll choose this and it's going to
103:17 - start talking to us
103:21 - i'll choose the to-do list
103:23 - to-do list
103:24 - tab
103:27 - and it's ready to go
103:29 - edit text
103:31 - so that's our text box
103:34 - we can tab through add new item to list
103:38 - enter a new to do item with hint add
103:40 - item
103:41 - edit text
103:43 - add new item to list
103:45 - section
103:47 - remove all items from the list i don't
103:49 - think i like that so well i think we
103:51 - need to change our section and maybe add
103:55 - a tab indexed to our h1 so to do list
103:59 - remove all items from the list
104:01 - section
104:03 - there we go every time i click it's
104:04 - reading something off
104:06 - let's go ahead and try adding a text
104:10 - so i'll say eat tea
104:13 - and i'm typing a little fast if i type
104:15 - slower
104:16 - e
104:17 - a t
104:19 - i'll press enter
104:21 - eat deleted
104:23 - oh i don't like that either i don't like
104:24 - how it says eat deleted we want it to
104:26 - say eat
104:27 - and then added or item added something
104:30 - like that
104:31 - let's try another one
104:33 - sleep
104:36 - and
104:37 - address and search bar okay we tabbed
104:42 - 127.0.0.1 colon 55 edit text
104:47 - add new item to list
104:49 - enter a new to do item with hint add
104:51 - item
104:52 - edit text that's interesting after i
104:54 - pressed the enter button
104:56 - or pressed enter when i had the focus on
104:59 - the button
105:00 - it just went back and read the
105:02 - uh item entry field again because uh we
105:05 - switched the focus back to that so i'll
105:08 - go ahead and enter code c
105:11 - code deleted
105:13 - definitely don't like that let's tab
105:15 - down and see what happens when we remove
105:17 - something
105:18 - add new item to list
105:20 - section
105:21 - remove
105:23 - check box not checked
105:26 - sleep
105:28 - check box not checked
105:34 - checked
105:35 - enter a new to do item with hint add
105:37 - item
105:38 - edit text section so it really didn't
105:41 - say it removed the item and i pressed
105:43 - the space bar not enter to actually
105:45 - check the check box which is the actual
105:47 - behavior that i was expecting
105:50 - so there's a couple of things here we
105:51 - want to change let's get to work on just
105:54 - a few things we can fix in this web app
105:56 - okay i want to start with just a little
105:58 - bit of code clean up and that's always
106:00 - good to do as you're wrapping up a
106:02 - project the very first thing is we get
106:05 - to the colors and i'm remembering that i
106:07 - really didn't use
106:09 - the button dash hover color and we can
106:12 - verify that
106:14 - by
106:15 - selecting the sas folder
106:18 - and then right clicking and choosing
106:21 - let's see find in folder
106:24 - and i'm just going to paste the name in
106:25 - there so this will search all of the
106:27 - files
106:29 - inside the sas folder and yes we've only
106:31 - got this one occurrence which is right
106:33 - here so we can just get rid of this
106:35 - definition
106:37 - it's part of our cleanup
106:40 - save that file
106:42 - and
106:43 - what else are we looking for oh yeah i
106:45 - used mp
106:48 - really wasn't thinking about it and i
106:50 - meant to use mq and i used it throughout
106:54 - so
106:55 - we can also search for this within
106:58 - the sas folder and see how many
107:00 - occurrences of mp or actually mp and the
107:05 - beginning parenthesis might be a little
107:06 - easier to find exactly what we're
107:08 - looking for
107:11 - so if we do that and choose find in
107:13 - folder
107:16 - we have four results in three files and
107:18 - we can go to each one of those results
107:20 - so here's the very first one and what i
107:22 - want to do is change that to
107:25 - a queue
107:26 - for media query if i had even been
107:28 - thinking about it that only makes sense
107:31 - okay now we have three results and three
107:33 - files because it automatically updates
107:35 - so now i'll go here and we need to
107:37 - change the rest of these to match our
107:39 - definition
107:42 - and that's the two results inside of the
107:46 - base
107:48 - now we've got one in the list container
107:56 - and we've got one in the new item entry
108:02 - with that fix in place
108:04 - i want to go back to the html
108:07 - and add that tab index
108:10 - to the header
108:16 - and that way when we tab using the
108:18 - screen reader into
108:21 - this section it's going to read the
108:23 - to-do list and not the remove all items
108:26 - because that's not what this section is
108:27 - about it's really about the to-do list
108:30 - okay the last thing we need to do is
108:33 - going to take just a little bit more
108:34 - work in our javascript and we'll go
108:37 - ahead and get rid of the file tree so we
108:39 - have some more room and this was when we
108:41 - added the item
108:43 - the screen reader was saying deleted
108:46 - because immediately following
108:49 - pressing enter and the item being added
108:51 - to our list
108:52 - we were clearing out this text field and
108:54 - so it said deleted
108:56 - likewise when we checked a box
108:59 - instead of saying removed and say code
109:02 - removed or eat removed it simply said
109:05 - check box checked and then went back
109:07 - here and we could make
109:09 - this much more informational
109:12 - so we're mostly going to do this in
109:14 - javascript
109:15 - there is one thing we want to change
109:17 - actually in
109:18 - the html so i will go to the html first
109:23 - hide that file tree
109:25 - so we're in our list container section
109:29 - and then we're in the list items section
109:33 - right underneath the list items section
109:35 - but still inside the list container
109:37 - section i'm going to just put a
109:39 - paragraph element and i'm going to give
109:41 - this an id
109:43 - of confirmation because we just want an
109:46 - audible confirmation
109:48 - i need to put a little more than that
109:49 - i'm also going to put a class equal to
109:51 - confirmation
109:54 - and i'm going to set an aria dash live
109:58 - attribute
109:59 - and this will be set to assertive
110:02 - because
110:03 - that means
110:04 - it's going to read whatever
110:07 - happens in this element immediately even
110:10 - if it interrupts what it's saying
110:13 - it's going to be assertive about it you
110:15 - can also set this to polite and it will
110:16 - wait but we want it to say right away
110:18 - what it is doing and this will be
110:21 - say
110:22 - eggs added or added to the list
110:26 - or we could say eggs removed or eggs
110:28 - removed from the list something like
110:30 - that so whatever content we put in here
110:32 - and that's all we need to do in the html
110:35 - is add this paragraph block element
110:39 - and put the id class
110:42 - and the aria live attribute and set it
110:45 - to assertive
110:47 - we'll save that
110:49 - and let's make sure i need to drag this
110:51 - over just a little bit more
110:54 - we're not watching the sas let's go
110:56 - ahead and do that so it updates the css
110:58 - and compiles it as we go
111:01 - continue watching even though i closed
111:03 - that window
111:05 - and now inside the
111:08 - not the new item entry inside the list
111:10 - container
111:12 - is where we have added this
111:15 - and inside that list container we're
111:18 - going to go to the very bottom
111:19 - underneath the label
111:22 - and underneath the item
111:25 - area here there we are you can see that
111:29 - because this is not an item it's
111:31 - actually in the list container section
111:33 - which we're still within
111:34 - and we can just say dot confirmation
111:37 - which is the class we applied to our
111:39 - paragraph element
111:41 - and i'm going to do the same thing you
111:42 - saw me do
111:44 - with the
111:45 - label for our text entry we're going to
111:49 - have an absolute position
111:51 - and then we're going to set it minus 10
111:53 - 000
111:55 - pixels to the left so this is going to
111:57 - be off screen it's nothing we need to
111:59 - see on screen we can use the app as
112:02 - intended already that way when we look
112:04 - at it but if someone needs a screen
112:06 - reader they need this audible update so
112:09 - we're going to actually put the update
112:10 - information
112:12 - in this paragraph in the confirmation
112:14 - and since it has that aria live
112:16 - attribute
112:17 - it will read that confirmation with the
112:20 - screen reader so now all we need to do
112:22 - is get to the javascript
112:25 - and go ahead and create the functions
112:28 - that will enable this to happen okay i'm
112:30 - going to scroll down in the javascript
112:33 - we're going to scroll way down here
112:35 - towards the end
112:38 - and we've got our process submission
112:40 - and then we add the item
112:42 - to the list
112:44 - and we update the persistent data this
112:47 - would be a good time
112:49 - to give that screen reader confirmation
112:52 - that we want to do so let's create a
112:53 - function called update
112:58 - screen reader
113:01 - confirmation and let's give this
113:03 - function
113:04 - two parameters one we want to put the
113:06 - new entry text in because that is the
113:09 - item that we're adding to the list so
113:11 - that's the new entry text
113:13 - as a parameter the other one let's call
113:15 - it action verb
113:18 - and this is whatever we want to kind of
113:20 - say after we add it so we could just say
113:23 - added or added to list something like
113:26 - that i'll just call it action verb as a
113:28 - parameter so let's take this function
113:31 - name
113:33 - and go to the bottom of the file here
113:36 - underneath the create new item
113:38 - and we'll create a function called
113:39 - update screen reader confirmation
113:42 - and it's going to accept the
113:44 - new
113:46 - entry text and it's going to accept an
113:49 - action verb
113:55 - and since we're calling that up here now
113:57 - we've talked about that
113:59 - really we don't want to say action verb
114:00 - here we want to say what we're doing so
114:02 - let's say
114:04 - added that is our action verb for now
114:09 - now in the function
114:12 - we're going to get that element document
114:14 - get
114:15 - element by id and we gave it an id
114:19 - of confirmation
114:23 - and from there we can access the text
114:25 - content
114:27 - and we can set that text content equal
114:29 - to a template literal so we can put
114:32 - these parameters right inside and we can
114:34 - say
114:35 - new entry text
114:37 - imagine we added tacos to our list so
114:40 - we'll say new entry text
114:42 - and then space
114:44 - and action verb which is added so we
114:46 - could say tacos added when we're
114:48 - finished i'll go ahead and put a period
114:50 - there just to make it a sentence
114:52 - even if it's a brief one
114:54 - and we'll save that
114:56 - let me go ahead and wrap that code so we
114:58 - can see it all at once
115:00 - something the reason this is white i am
115:03 - not sure why this is white right now
115:06 - something seems off i know what it is
115:10 - been staring at code for too long i
115:12 - forgot to make it an arrow function
115:14 - there we go so there's our full function
115:16 - update screen reader confirmation
115:19 - and this will accept
115:22 - say tacos and added
115:24 - and then it will
115:26 - set that text content to that
115:28 - confirmation paragraph that we have for
115:30 - the screen reader and since it has the
115:31 - aria live attribute the screen reader
115:34 - will read it
115:35 - immediately as it's updated and so that
115:37 - is why we have it
115:39 - in our process submission we
115:41 - update the persistent data the very
115:44 - first thing we do is add the new to do
115:45 - item to the list then we update the
115:47 - persistent data and then we give that
115:49 - confirmation
115:50 - and it will read it
115:52 - right as it refreshes the page and shows
115:54 - the new item so that is what we need
115:56 - there now there's one other area and
115:58 - that is when we remove an item
116:00 - and that is just a little more complex
116:03 - so let's scroll up to that click
116:05 - listener we have for the check boxes
116:06 - where we actually remove the item
116:08 - and you can see we access the to-do list
116:11 - and we remove an item from the list and
116:13 - once again we update the persistent data
116:16 - and right after that or even before the
116:19 - persistent data either way
116:21 - it would be a great place to put that
116:22 - update screen reader confirmation
116:25 - so i'll just put it after because that's
116:27 - what we did before
116:28 - can say update
116:31 - screen reader confirmation and this is
116:34 - going to accept some remove text and we
116:37 - haven't defined that yet
116:40 - and then we'll say
116:43 - deleted or we could say
116:47 - removed from list let's do that
116:55 - i don't think we need the period there
116:57 - though
116:58 - because we already put that
117:00 - in our template literal okay so we need
117:02 - to define this remove text now what
117:05 - could we do to do that we have to think
117:07 - about this where is the text it's not in
117:09 - the check box it's in the label so we
117:13 - need to write a function a helper
117:15 - function that is going to grab that
117:17 - label text
117:18 - based on the check box id so
117:22 - let's do it right after our removed item
117:25 - from list where we worked with the check
117:26 - box id
117:28 - and we could say
117:29 - const
117:31 - remove text because that's what we're
117:33 - passing in is the remove text
117:35 - let's call this function git
117:38 - label text
117:40 - and we're going to pass in the check box
117:42 - dot id so we'll pass in the id of the
117:46 - check box
117:47 - now let's define that function just
117:49 - right underneath
117:52 - it's called get label text
117:55 - it's going to accept
117:57 - a check box
117:59 - id parameter
118:03 - and now we're going to return
118:07 - what we find here and so we'll get
118:09 - element by id
118:11 - and let's just go ahead and
118:13 - select
118:16 - the check box with the id
118:18 - and then we can say
118:20 - next
118:22 - element sibling
118:24 - so that is
118:25 - the element right beside it that's what
118:28 - we're doing the very next element and
118:29 - that is the label that we need and then
118:32 - we can grab that text content
118:34 - from the label
118:37 - we'll save that
118:39 - and now that should work to grab the
118:41 - label text and save it in remove text
118:44 - and you know what i want to put the
118:46 - update persistent data above that just
118:49 - so we have these two
118:51 - lines together that we created
118:57 - and now when we remove an item by
119:00 - checking the box it should once again
119:03 - update that paragraph
119:05 - in that paragraph
119:07 - with the screen reader we'll say removed
119:10 - from list so we could say tacos removed
119:13 - from list or tacos added and those are
119:16 - the action verbs that we have got to
119:17 - pass quick fix here i discovered one
119:20 - error i put a colon instead of a
119:22 - semicolon after this line
119:24 - we've got to fix that
119:26 - and now we're ready to try out our
119:29 - additions to our web app okay let's try
119:32 - out the new additions to the web app
119:34 - especially for the screen reader
119:38 - to-do list
119:40 - tab
119:42 - and let's add taco t
119:44 - c
119:45 - o
119:46 - s
119:48 - tacos added
119:49 - yes that's what we wanted
119:51 - now let's add salsa
119:53 - a
119:55 - salsa added
119:56 - excellent add new item to list
119:59 - section
120:01 - to-do list
120:03 - we wanted to we wanted to announce the
120:05 - to-do list instead of going straight to
120:07 - the clear button remove all items from
120:10 - the list
120:11 - button
120:14 - check box not checked
120:16 - code
120:17 - check box not checked
120:19 - tacos
120:20 - check box not checked
120:22 - salsa
120:24 - check box not checked salsa room edit
120:27 - text section
120:29 - well it almost got removed out that's
120:31 - added new item section
120:35 - check box not checked
120:38 - checked
120:39 - eat remove from list
120:41 - enter a new to do item with hint add
120:43 - item and there you have it our to-do
120:46 - list web app project with html5
120:49 - css3 that is compiled from sas
120:53 - and javascript and we made it mobile
120:55 - first and responsive for all sizes of
120:58 - viewports we made it accessible and
121:01 - therefore we can use the app just with a
121:03 - keyboard or we can even use it with the
121:06 - screen reader if necessary and then we
121:08 - used persistent data so we could close
121:11 - out of the app and come back to it
121:12 - whenever we want to and still have our
121:14 - to-do list items of course this app
121:17 - still has a lot of room for improvement
121:19 - and i'm sure you can make your own
121:21 - please leave comments and let me know
121:23 - what you're going to do to improve the
121:25 - app thanks for watching