00:00 - hey what's up guys it's pedro here from
00:02 - newcoder.com
00:05 - and in this video we're going to give an
00:06 - overview of the crud application that
00:09 - we're going to be building as well as
00:10 - going over what things you should be
00:12 - familiar with in order to follow along
00:14 - with this tutorial series
00:16 - so the technologies that you should be
00:18 - somewhat familiar with
00:20 - are node.js and express.js which we're
00:23 - going to be using for our server side
00:25 - we're going to be using a database
00:27 - called mongodb and for our client side
00:30 - we're going to be using jquery the fetch
00:33 - api
00:34 - and bootstrap and you should know a
00:36 - little bit about html
00:39 - and last but not least for our server
00:41 - side and client side we're going to be
00:42 - using a programming language called
00:44 - javascript so now let's actually take a
00:47 - look at the application that we're going
00:49 - to be building within this tutorial
00:51 - series
00:52 - so this is going to be our to-do
00:54 - application that we're going to be
00:55 - building it's a very simple interface so
00:58 - we just have a user input box where
01:00 - we're going to type our to-do so let's
01:03 - say i want to type
01:04 - clean garage
01:06 - i can do so hit create
01:10 - and you can see that this gets stored
01:12 - now if i hit refresh you can see that
01:15 - the data persists so that means that we
01:17 - are saving it within our database if i
01:20 - want to edit this for something let's
01:22 - say clean room instead
01:25 - i can click edit
01:27 - and you can see that we get updated with
01:29 - clean room hit refresh
01:32 - data persists
01:33 - and if i hit delete it deletes the to do
01:37 - and if i want to create multiple to-do's
01:41 - i could say clean room
01:45 - clean
01:47 - house
01:50 - and etc and all this data will persist
01:53 - within our mongodb database
01:56 - welcome to part one of building our crud
01:59 - application from scratch
02:01 - so essentially what we're going to do in
02:03 - this tutorial is install our packages
02:06 - set up our express application and
02:08 - connect to our mongodb
02:10 - database
02:11 - so to get started i'm just going to go
02:13 - to file i'm going to go to open folder
02:16 - i'm going to right click go to new we're
02:19 - going to create a new folder so i'm just
02:21 - going to call it
02:22 - mongodb underscore crud
02:25 - let's select it
02:27 - and afterwards what i want to do now is
02:29 - let's open up the terminal
02:31 - and from here i'm just going to type cls
02:33 - to clear the terminal and that's because
02:35 - there's a visual bug with visual studio
02:38 - code at the moment
02:39 - and what i want to do now is install our
02:42 - packages that our application is going
02:44 - to be dependent on so i'm going to type
02:46 - mpm init and we're going to pass in the
02:49 - flag
02:50 - wife to get the default values
02:53 - and now i want to install the body
02:55 - parser module
02:57 - and the body parser module is going to
02:59 - be used to parse json between the client
03:01 - side and the server side next we're
03:04 - going to install express
03:06 - and we're just going to use express for
03:09 - routing next we're going to install
03:11 - mongodb
03:13 - and this is just going to be the mongodb
03:15 - drivers
03:16 - and this is going to help us connect to
03:18 - our database
03:19 - and last but not least we're going to
03:21 - install the path module and we're going
03:23 - to be using the path module just to
03:25 - serve a static html file to the user
03:29 - so now that we have our packages
03:31 - installed i'm just going to go up here
03:33 - i'm going to hit ctrl b to bring up the
03:35 - explorer
03:37 - i'm going to go to package.json i'm just
03:39 - going to change the main to app.js
03:43 - and this is just a personal preference i
03:45 - prefer app.js as opposed to index.js
03:49 - so now i'm just going to save that let's
03:51 - close out of this we're going to create
03:53 - two files i'm going to create my app.js
03:56 - file
03:58 - and our second file that we're going to
04:00 - create is going to be called db.js and
04:03 - this is where we're going to actually
04:04 - connect to mongodb
04:07 - now from here i want to code our app.js
04:10 - file first so i'm just going to click
04:12 - here ctrl b get rid of that explorer and
04:15 - we could get rid of the terminal for now
04:18 - and what i want to do is start importing
04:20 - our modules that we just installed so
04:22 - i'm just going to say cons express
04:24 - it's equal to require express
04:29 - and let's give a space here
04:31 - and next what we're going to do is bring
04:34 - in our body parser module
04:40 - afterwards let's create an instance of
04:43 - our express application so i'm just
04:45 - going to say const app
04:47 - is equal to express and let's call it
04:51 - now we're going to tell our express
04:53 - application to use the body parts and
04:55 - module
04:57 - and we're going to be parsing json data
04:59 - sent from the client side to the server
05:01 - side using the body parts module next
05:04 - let's require our path module
05:10 - after that let's bring in our database
05:12 - stuff so i'm just going to say const db
05:14 - is equal to require
05:17 - db
05:19 - and last but not least we're going to
05:20 - have one more variable here and we're
05:22 - going to call it collection
05:24 - and we're going to call it a collection
05:26 - to do
05:27 - so we're going to have a database and
05:29 - that database is going to have a
05:30 - collection within it called to do and
05:32 - that's going to hold our to-do's
05:35 - so now let's head over to our db.js file
05:39 - and now we're just going to import our
05:41 - mongodb driver so i'm just going to say
05:43 - cons
05:44 -  client is going to be equal to
05:46 - require
05:48 - mongodb
05:49 - and we're going to require the
05:52 - client from it
05:54 - we're also going to require the object
05:56 - id from the mongodb module so i'm just
05:59 - going to say const
06:00 - object id
06:03 - it's going to be equal to require
06:06 - mongodb
06:07 - dot
06:08 - object id next let's give our database a
06:11 - name so i'm just going to say cons db
06:15 - name is going to be equal to
06:17 - and i'm just going to call it crud
06:20 - mongodb
06:22 - after that we're going to code our url
06:24 - and this is basically the default
06:27 - location of where your mongodb would be
06:30 - located on your local machine so i'm
06:32 - just going to type
06:33 - mongodb
06:35 - loco host
06:39 - 27017
06:43 - and the last configuration that we're
06:44 - going to give our database is
06:47 - the options that we could pass in so i'm
06:49 - just going to say
06:51 - options
06:52 - and we're going to be using the new url
06:55 - parser
06:59 - let's set that to
07:00 - true so now let's actually give this a
07:04 - state so we're going to be using this
07:06 - db.js file to actually create the
07:08 - connection between node.js and our
07:11 - mongodb server
07:13 - so now i'm just going to say const state
07:17 - and the default state of this is going
07:19 - to be equal to null
07:22 - so this is going to signify that hey we
07:24 - don't have a database yet
07:27 - next let's actually write our connect
07:29 - method so i'm just gonna say cons
07:31 - connect
07:33 - it's gonna be equal and we're gonna pass
07:35 - in a callback
07:37 - and we're just gonna say
07:39 - the following
07:42 - if state
07:44 - dot db
07:45 - so if there is a database connection
07:49 - we're just going to call it a callback
07:53 - if there isn't a database connection
07:56 - we're going to use the client to
07:58 - connect to the database
08:10 - and here we're going to check if there's
08:12 - any errors if there's an error we're
08:14 - going to pass it back to our callback
08:18 - if there's nowhere we're going to set
08:20 - the state
08:27 - and then we're going to call our
08:28 - callback
08:30 - all right so this is our connect method
08:32 - let's not forget to add the semicolon
08:34 - here and we got two more functions to
08:36 - code so let's get to it
08:39 - so the next function that we're going to
08:41 - code is to get the primary key so i'm
08:43 - just going to say cons get
08:46 - primary key
08:48 - and they're going to pass in the id of
08:51 - the document
08:53 - and all we're going to do is return
08:56 - object id
08:58 - and we're going to pass in the id that
08:59 - they passed in to us
09:02 - and this is going to return an object id
09:05 - object which will be used to actually
09:07 - query the database by the primary key
09:10 - next let's actually create a method
09:13 - to actually get the database so we're
09:15 - just going to say get db
09:18 - and i'm just going to say return state
09:22 - dot db
09:24 - so now let's actually expose all these
09:26 - functions that we created so i'm just
09:27 - going to say module that exports
09:30 - and i'm just going to say get db
09:34 - connect and get primary key method
09:39 - all right so now i'm just going to save
09:41 - this
09:42 - and now let's head back to our app.js
09:45 - file
09:46 - so now that we have all this set up
09:48 - let's actually connect to our database
09:51 - so now i'm just going to say db.connect
09:54 - and this is the function that we just
09:56 - created in our db file we're going to
09:58 - pass in a callback
10:02 - and we're going to say if error
10:05 - we're going to console.log
10:08 - unable to connect
10:10 - to database
10:13 - and we're going to terminate the
10:14 - application
10:20 - and we should probably wrap this within
10:22 - curly braces
10:26 - and if we were able to connect to the
10:29 - database successfully we're going to say
10:31 - else
10:32 - app.listen
10:36 - and you could use whatever port that you
10:37 - want i'm just going to use port 3000
10:40 - and we're going to pass in a callback
10:43 - and we're just going to say
10:46 - connected to database
10:51 - app
10:53 - listening on port
10:55 - 3000
10:58 - so now if i was to save this
11:01 - let's
11:02 - put a semicolon here and then save it
11:05 - let's go open up a terminal
11:08 - type cls again i'm going to type node
11:11 - app
11:14 - and you can see that we got no error so
11:16 - that means we bypass this error
11:18 - statement
11:19 - and we executed our else statement so
11:21 - we're connected to database and our app
11:24 - is listening on port 3000. welcome to
11:26 - part two of building our crud
11:28 - application from scratch
11:31 - so in this tutorial we're going to be
11:32 - covering our server side read portion
11:35 - of our crud application so we're going
11:38 - to code two get routes the first get
11:41 - route is actually going to send a static
11:43 - html file to the user
11:45 - and the second get route is actually
11:47 - going to query the database for auto to
11:49 - do's within our to do collection and
11:52 - it's going to return that to the user so
11:56 - let's actually get started encoding this
11:58 - so i'm just going to go down here i'm
12:00 - going to say app.get
12:02 - and we're going to give it a path for
12:04 - forward slash
12:05 - give it this function
12:09 - and then when we get down here all we're
12:10 - going to do is send a static html file
12:14 - so i'm just going to say res.send
12:17 - file
12:18 - and here's where our path module comes
12:21 - in handy
12:22 - dot join
12:27 - now this file doesn't exactly exist yet
12:30 - but we're going to be creating this
12:31 - within a future tutorial
12:34 - so now let's actually head on over to
12:36 - our second app.get
12:38 - and i'm just going to call this app.get
12:41 - and i'm going to call this get to do's
12:45 - then here we're going to pass in our
12:47 - function
12:48 - our request object our response object
12:52 - and within here i'm going to say db
12:55 - dot get db
12:57 - now remember get db is going to return
13:00 - to us our database connection
13:02 - so now i'm just going to say dot
13:04 - collection and we're going to pass in
13:06 - the name of our collection
13:08 - and i'm going to call the method find
13:12 - and we want all the documents within our
13:14 - to do collection
13:16 - but this is going to return to us a
13:18 - cursor and we don't want the cursor we
13:21 - want the actual document so i'm going to
13:24 - call a method called
13:25 - dot 2
13:27 - array
13:29 - and then within here this is going to
13:31 - take a callback function i'm just going
13:33 - to say error
13:35 - document
13:38 - and let's actually move this over a
13:40 - little bit
13:41 - and then within here we're just going to
13:43 - say
13:44 - if there's an error
13:46 - we're just going to console this out to
13:48 - the user
13:49 - but traditionally we want to send an
13:52 - error message back to the user
13:54 - but if there is no error
13:56 - what we're going to do is first we're
13:59 - going to print this out onto the console
14:01 - just to make sure that we're getting our
14:02 - documents back from the server
14:05 - and we're going to say res.json
14:08 - the document
14:11 - all right so now let's actually test
14:13 - this out
14:15 - so i'm just going to hit
14:17 - ctrl s to save let's bring up the
14:19 - terminal
14:21 - go to new terminal
14:23 - i'm going to type cos
14:25 - node app
14:27 - let's bring up google chrome
14:31 - i'm going to type local host port 3000
14:36 - and we called it get to do's
14:40 - and you can see that we get back an
14:42 - empty array and that's because we don't
14:44 - have anything within our database so
14:46 - let's head back to visual studio code
14:49 - i'm gonna hit ctrl c cancel out of that
14:51 - let's start up the shell
14:54 - and now i'm just gonna
14:56 - go back up here ctrl b
14:58 - let's find out what we named our
15:00 - database so we named it
15:02 - crud mongodb
15:04 - so i'm just going to say use crud
15:07 - mongodb
15:09 - i'm going to say db
15:10 - dot and let's go back to app.js and see
15:14 - what we named our collection to do
15:17 - so i'm just gonna say to do dot insert
15:21 - and we're gonna insert a couple of
15:23 - to-do's so i'm just gonna say to do and
15:26 - i'm going to say clean room so let's
15:29 - insert that
15:30 - and let's insert clean
15:34 - i don't know garage
15:36 - so let's insert that all right so let's
15:38 - cancel out of that
15:40 - node app
15:42 - let's wait for our express application
15:44 - to boot up head over to chrome hit
15:46 - refresh
15:48 - and you can see that our to-do's are
15:50 - being sent to the client side and that
15:53 - it is in json
15:55 - welcome to part three of building our
15:57 - crud application from scratch so in this
16:00 - tutorial we're going to be covering our
16:02 - server side update portion of our crud
16:05 - application so to get started let's
16:08 - actually code our route so i'm just
16:09 - going to say app.put
16:11 - and i'm going to pass in forward slash
16:14 - colon id
16:16 - now this is going to be our route param
16:18 - and id
16:19 - is going to be the primary key of the
16:21 - document that we wish to update
16:24 - next we're going to pass in our function
16:26 - so i'm just going to say request and
16:28 - response
16:30 - now from here let's actually get the id
16:33 - so i'm just going to say const to do id
16:36 - is equal to request dot
16:39 - params
16:41 - dot id
16:42 - next what i want to do is actually get
16:44 - the user's input and that's going to be
16:46 - found in the request.body
16:48 - the user is going to be sending us json
16:51 - so i'm just going to say const
16:53 - user
16:54 - input
16:56 - is equal to request.body
16:58 - now from here let's actually connect to
17:00 - our database so i'm just going to say
17:02 - db.get
17:05 - then we're going to call our collection
17:07 - which is our to do collection
17:10 - now from here i'm going to call a
17:12 - function called find one
17:15 - and update
17:17 - and the first argument is going to be
17:19 - the query object so what do we want to
17:21 - find by so we're going to find by the id
17:23 - so i'm just going to pass in id
17:26 - and i'm just going to pass in to do
17:29 - next what we want to do is pass in the
17:31 - document that we want to update with
17:34 - so i'm just going to say set
17:37 - and i'm going to say to do
17:39 - colon
17:40 - user input dot to do
17:45 - next what i want to do is pass in an
17:47 - option and the option that i want is i
17:50 - want the return original to be set to
17:53 - false so i'm just going to say return
17:55 - original and we're going to set that to
17:57 - false
18:00 - let me just move this here
18:07 - now from here we're going to pass in our
18:09 - callback function so i'm just going to
18:11 - say error and we're going to get the
18:13 - result
18:15 - so now let's scroll down here
18:17 - and from here we could test if there was
18:19 - any errors and i'm just going to print
18:21 - it out onto the console
18:23 - but traditionally we want to send
18:25 - something back to the user to let the
18:28 - user know that hey when we tried to
18:30 - update the document that you wanted we
18:32 - couldn't fulfill that request
18:34 - so now i'm just going to say else so if
18:37 - everything went well we're going to be
18:39 - sending that data back to the user in
18:41 - json format so i'm just going to say
18:44 - result
18:46 - so now let's add a semicolon here and
18:48 - let's just double check this
18:52 - and all this looks good so let's
18:54 - actually test this out so i'm going to
18:56 - open up the terminal
18:58 - and clear the terminal node app
19:02 - let's start up our application
19:04 - we're going to go to postman
19:07 - and you can see here that i already have
19:09 - this set up so the url is local host
19:12 - port 3000
19:13 - this is the id of one of the documents
19:16 - that i have currently we're making a put
19:19 - request
19:20 - we're sending back json data here so you
19:24 - can see here and this is the data that
19:26 - we're sending back and we can make this
19:28 - whatever we want so let's just change
19:30 - this to
19:31 - a clean
19:33 - something
19:35 - for tutorial
19:36 - right so this is going to be our to do
19:41 - and i'm going to go here and make a
19:43 - request so i'm just going to hit send
19:46 - and you can see that we get an error and
19:48 - i right away i already know what's going
19:50 - on
19:50 - so when we passed in our to-do this is a
19:55 - string we want an object id object
19:59 - so i'm going to call db dot
20:03 - get primary key
20:04 - we're going to pass in the id of this to
20:07 - do i'm going to save this
20:09 - let's actually cancel this node app
20:13 - rerun our application we're going to go
20:15 - to postman again
20:17 - and this time
20:19 - let's actually go over the response we
20:21 - got so it said the number that we found
20:23 - was equal to zero and that's because we
20:25 - didn't pass the right id for the primary
20:27 - key so now if i send this this number
20:30 - should be one and updated existing
20:32 - should be equal to true
20:34 - so let's send it
20:37 - and you can see right here the number
20:39 - that we've updated is one
20:41 - this document did indeed exist within
20:44 - our database so it's true and you can
20:47 - see the values that we have the id is
20:50 - still the same but we've updated it to
20:53 - clean something for tutorial
20:55 - and if we hit another thing let's
20:57 - actually make sure that this update is
20:59 - working
21:00 - and we're going to say change to
21:02 - something else
21:04 - i'm gonna hit send one more time
21:07 - and you can see the id is the exact same
21:10 - thing
21:11 - but we've changed the to do to change to
21:14 - something else welcome to part four of
21:17 - building our crud application from
21:19 - scratch so in this tutorial we're going
21:22 - to be covering our server side create
21:24 - portion of our crud
21:26 - application so to get started we're just
21:28 - going to code our route so i'm just
21:30 - going to say app.post
21:32 - so we're going to be posting the to-do
21:33 - that we want to insert within our
21:35 - database
21:36 - so we're going to give it the path of
21:38 - forward slash and then we're just going
21:40 - to pass in our function
21:41 - the request object and the response
21:44 - object
21:45 - now from here what i want to end up
21:47 - doing is getting the user's input the to
21:50 - do that the user wants to insert inside
21:52 - the database
21:53 - so i'm just going to say cons user input
21:57 - and we're just going to say request.body
22:00 - so the client side the user is going to
22:02 - post json to us and that's going to be
22:04 - within the request.body next let's
22:07 - actually get the database connection so
22:09 - i'm just going to say
22:10 - db.get bb
22:13 - then from here i'm just going to say
22:15 - collection
22:16 - pass in our to do collection
22:18 - then i'm going to call the function
22:20 - insert one
22:22 - the first argument is going to be the
22:24 - document that we want to insert so i'm
22:27 - just going to say user input and the
22:30 - second argument is going to be the
22:31 - callback function so i'm just going to
22:33 - say error and i'm going to say result
22:39 - now from here we're going to test if
22:40 - there's any errors so i'm just going to
22:42 - log it on to the console
22:44 - now in a production environment you
22:47 - would want to say something more than
22:49 - just logging it onto the console you'll
22:51 - probably want to display an error
22:53 - message to the user
22:56 - next i'm just going to say else
22:59 - we're just going to send it back to the
23:00 - user i'm just going to pass it as json
23:04 - i'm going to say result
23:06 - result
23:08 - and i'm gonna say document
23:11 - result dot ops
23:14 - index zero
23:16 - now we're actually going to test this
23:17 - out so you actually see what's inside
23:20 - result
23:21 - and what's inside result.ops
23:24 - so now i'm just going to save this
23:27 - let's open up the terminal
23:29 - new terminal
23:31 - just going to clear it
23:33 - i'm going to say node app let's start up
23:36 - the server
23:38 - let's head over to postman
23:40 - and you can see that we have our
23:42 - localhost port 3000 here with the
23:45 - forward slash url
23:47 - we're making a post request
23:50 - and this is a json object that we're
23:52 - sending back to the server
23:55 - so let's say that we want to post uh
23:59 - clean something so this is a to do that
24:01 - we want to insert within our to-do
24:03 - collection
24:05 - so now i'm just going to hit send
24:09 - and now you can see the response that
24:11 - we're getting back from the server so
24:12 - this is the result that we sent back and
24:14 - this is the document so result has a
24:17 - property of n so that's the number
24:19 - inserted
24:21 - and it says that it was okay so it was
24:23 - set to one so that means everything was
24:25 - inserted properly and number two
24:27 - is the document that we just inserted so
24:30 - you can see the to do here matches up
24:33 - here
24:34 - and it's given an primary key which is
24:37 - listed here
24:38 - so now let's actually see if this was
24:41 - saved so i'm going to go back here
24:44 - let's make a get request
24:47 - remember what was our route we said get
24:50 - to do's
24:51 - i'm going to go to send
24:55 - and you can see right here
24:57 - that our to do
24:59 - clean something was inserted inside the
25:01 - database properly welcome to part five
25:03 - of building our crud application from
25:06 - scratch
25:07 - so in this tutorial we're going to be
25:09 - covering our server side delete portion
25:11 - of our crud application so to get
25:14 - started let's actually code our route so
25:16 - i'm just going to say app dot delete
25:19 - and the path that we're going to use is
25:21 - an express param so i'm just going to
25:23 - say forward slash
25:25 - colon id and this id is going to be the
25:28 - id the primary key of the to do document
25:32 - that we want to delete from our database
25:35 - next we're going to pass in our function
25:37 - our request object our response object
25:41 - within here the first thing we need to
25:43 - do is get the id so i'm just going to
25:45 - say cons to do id
25:48 - is equal to request dot params
25:52 - dot id
25:53 - next let's actually connect to our
25:55 - database so i'm just going to come down
25:57 - here i'm going to say db.getdb
26:00 - then i'm going to call the collection
26:02 - method
26:03 - i'm going to pass in our collection our
26:05 - to-do collection then i'm going to call
26:08 - the function
26:09 - find one and delete
26:12 - so the first argument is the query
26:14 - object so we want to find this document
26:17 - by the id so i'm just going to say id
26:20 - now i'm going to say db.get primary key
26:24 - and we're going to pass in our to-do id
26:27 - the second argument is going to be the
26:29 - callback function
26:30 - so we're going to get an error or we're
26:32 - going to get the result
26:34 - so let me just fix this by adding the
26:36 - curly braces here
26:39 - error or result
26:43 - let's see what's happening here and this
26:46 - looks good
26:48 - so we have our error and result
26:51 - next we need to test to see whether or
26:53 - not there was an error so if there was
26:55 - an error that means we couldn't delete
26:58 - any
27:00 - so if there was an error
27:02 - what we want to do is actually print
27:04 - this out into the console you can also
27:06 - send some kind of warning back to the
27:09 - user that an error has occurred
27:11 - otherwise what we're going to do
27:13 - is send json data back to the user
27:18 - so now i'm just going to save this
27:20 - i'm going to go to terminal
27:22 - new terminal
27:23 - let's clear this out
27:25 - node app
27:27 - and our application is running if i go
27:30 - to postmen
27:31 - you can see that i already have this
27:33 - running so
27:35 - we have our get to do's route here so
27:37 - i'm just going to send this again
27:39 - so you guys see that these are all the
27:41 - to-do's within our mongodb database
27:44 - so what i need is let's say i want to
27:46 - delete this to do inserting into the
27:48 - database so i'm just going to copy this
27:50 - primary key
27:52 - we're going to go back up here
27:55 - let's paste it so we have localhost port
27:58 - 3000 and the id of the document that we
28:01 - want to delete
28:02 - i'm going to go here we're going to make
28:04 - a delete request
28:06 - and now if i hit send let's see what we
28:09 - get back
28:11 - and this is the response that we're
28:12 - getting back from the server so number
28:14 - deleted is one
28:16 - and you can see the value of the
28:18 - document that we deleted
28:20 - and we get okay with the value of one so
28:22 - everything went fine so let's actually
28:25 - prove this out
28:27 - if i go back here get our to-do's one
28:30 - more time hit send
28:33 - you can see that the document that was
28:35 - there is no longer there so this is
28:37 - pretty much the server-side delete
28:39 - portion of our crud application
28:43 - welcome to part 6 of building our crud
28:45 - application from scratch so in this
28:47 - tutorial we're going to be building our
28:49 - static html file that we're going to be
28:52 - serving to our user so in the previous
28:55 - tutorials we've created two get routes
28:58 - one of them is to serve the static html
29:00 - file to the user and the second get
29:02 - route is to actually get all to to do's
29:05 - within our database so we're going to be
29:07 - focusing on this route
29:10 - so to get started i'm just going to hit
29:12 - ctrl b to bring up the explorer i'm
29:15 - going to right click new file and we're
29:17 - going to create a new file called
29:19 - index.html
29:21 - so now i'm just going to hit ctrl b
29:22 - again get rid of that
29:24 - and now i just want to head over to
29:26 - getbootstrap.com so we're going to be
29:28 - using bootstrap 4 in order to build our
29:30 - html file
29:32 - so from here you can see that bootstrap
29:34 - actually gives us a starter template and
29:36 - this is going to include all the css
29:38 - that we need and the javascript that we
29:41 - need so i'm just going to copy this
29:43 - let's head back over to visual studio
29:45 - code and now i'm just going to paste
29:47 - this in here let's actually change the
29:49 - title so i'm just going to change it to
29:50 - to do
29:52 - crud
29:53 - application and we're going to get rid
29:55 - of our h1 tag here
29:57 - so from here let's give it a container
30:04 - the first row is going to be where we
30:06 - input our to-do user input the second
30:08 - row is going to be an unordered list
30:10 - which is going to be displaying our
30:13 - to-do's to the user
30:30 - now from here let's head over back to
30:32 - bootstrap and we're gonna get our form
30:34 - oh we're just gonna head over to the
30:35 - search bar i'm going to type form group
30:39 - and i'm just going to click that
30:41 - and this is going to take us here
30:43 - and this looks pretty good so we have
30:45 - our label and we have an input where the
30:47 - user can type his to-do's to submit
30:50 - so i'm just going to copy this
30:52 - let's head back over to visual studio
30:54 - code and we're just going to paste this
30:56 - within here
31:00 - well let's actually tidy this up a bit
31:05 - now we only need one of these so i'm
31:07 - just going to delete the second one and
31:08 - now let's just scroll over to the right
31:10 - a bit and we're going to change some of
31:12 - this stuff so we're going to change the
31:13 - example label to to do
31:16 - and we're going to give an id attribute
31:19 - to our input field so we're just going
31:21 - to change this from form group example
31:23 - input to
31:26 - to do
31:27 - user
31:28 - input and we're going to change the
31:30 - placeholder to say to do
31:33 - next we actually have to create a button
31:35 - so
31:36 - that the user can actually submit
31:42 - and we're going to give it a class of
31:44 - primary
31:49 - and that's actually called a button
31:50 - create
31:52 - now you could call this button post
31:54 - because that's the end point that we're
31:55 - going to be hitting when we click this
31:57 - button but i'm just going to call it
31:58 - create and that's going to create our to
32:00 - do
32:01 - and before i forget let's actually
32:03 - change what the label is for so it's not
32:05 - form group example input is going to be
32:07 - for our to do
32:09 - all right now from here this actually
32:11 - looks good so let's head over back to
32:13 - bootstrap and get our unordered list
32:15 - that we're going to be using to display
32:17 - our to-do's to the user so from here
32:19 - let's go back to our search i'm going to
32:21 - type unordered
32:23 - and let's click the example they give us
32:25 - so this is an unordered list and you can
32:27 - see that has a bunch of list items here
32:30 - i'm just going to copy this let's head
32:31 - back over to visual studio code so from
32:34 - here let's just move over here
32:36 - and we're going to paste it in the
32:38 - second row
32:40 - so i'm just going to tidy this up a bit
32:44 - now let's give an id attribute to our
32:47 - list group
32:48 - i'm just going to say id and i'm just
32:50 - going to call it display because this is
32:52 - just going to be
32:53 - displaying our to-do's to the user and
32:56 - for right now i'm going to leave these
32:57 - list items here
32:59 - but we are going to be dynamically
33:01 - adding these list items to our unordered
33:04 - list
33:05 - all right so that's it for our html part
33:07 - let's actually start coding some
33:09 - javascript so i'm just going to come
33:11 - down here
33:13 - and we're going to add a script tag here
33:17 - next let's do a document.ready
33:28 - so now let's actually get our html
33:30 - elements that we attached id attributes
33:32 - to so i'm just going to say const
33:33 - display
33:35 - and this is going to be the display for
33:37 - our to-do's
33:42 - i'm going to say const form and this is
33:45 - going to be the id of our form
33:51 - and i'm going to say const to do
33:53 - user input
33:55 - and this is going to be the to-do that
33:57 - the user types in
34:06 - so first off i think i forgot to add the
34:08 - id to the form so let me do that now
34:12 - right here we have our form we're going
34:14 - to give it an id attribute
34:17 - and we're going to call it form
34:19 - and we're giving this id attribute to
34:21 - the form because we want to prevent
34:23 - default so when the user actually
34:25 - submits we're going to prevent the
34:27 - default action that takes place because
34:29 - we want to make a restful call to our
34:32 - server api so now let's go back down
34:34 - here
34:37 - so next we're going to code several
34:39 - helper functions so i'm just going to
34:40 - say const reset
34:43 - to do's input and this is going to reset
34:46 - the to do user input field
34:51 - next we're going to create a function
34:53 - called build ids and this is going to
34:55 - build unique ids to give to our html
34:59 - elements
35:03 - and it's going to take in a to-do
35:05 - document
35:08 - and we're just going to return an object
35:11 - with our id so i'm just going to say
35:12 - edit
35:13 - id
35:14 - and edit id is going to be attached to
35:16 - our edit button
35:18 - so we can attach a click event to that
35:21 - edit button
35:26 - and you can see that we're taking
35:27 - advantage of the primary key that we get
35:30 - from our to do document to make it
35:32 - unique
35:34 - next we're going to code delete id
35:37 - and delete id is going to be attached to
35:39 - our delete button so we can attach a
35:41 - click event to our delete button
35:49 - next we're going to create a list item
35:52 - id
35:53 - and this is going to be the id of the li
35:56 - element within our unordered list
36:06 - and the last id that we're going to
36:07 - create is going to be called to do id
36:10 - and this is going to be the id of our to
36:12 - do
36:18 - so now let's code another helper
36:20 - function and this function is actually
36:22 - going to build the template the list
36:24 - item that we want to append to our
36:26 - unordered list
36:27 - so i'm just going to say const build
36:30 - template
36:32 - and it's going to take in two
36:34 - parameters i'm going to pass in our to
36:37 - do
36:38 - and the ids
36:42 - and we're just going to return a string
36:45 - that will be appended
36:47 - so from here let's actually scroll up
36:50 - and let's get our li element so i'm just
36:53 - going to copy one of these
36:56 - and realistically we could just delete
36:58 - this
36:59 - now let's go back down
37:02 - let's paste this one within here let's
37:04 - delete this
37:06 - now let's give this li element an id so
37:10 - we're just going to say id
37:13 - and it's going to be equal to ids dot
37:16 - list item id
37:25 - next let's give it a row
37:39 - and we're going to make each column of
37:41 - size four
37:57 - so the first column is where we're
37:59 - actually going to be storing our to do
38:02 - so i'm just going to give it an
38:03 - attribute of id
38:06 - and we're just going to say ids dot
38:08 - to do id
38:10 - and we don't want to actually display
38:12 - our to-do to the user i'm just going to
38:14 - say to do dot to do
38:16 - next let's go back to the last column so
38:19 - i'm just going to give this an
38:20 - additional
38:22 - class and i'm just going to call say
38:24 - text to the right so we want our buttons
38:26 - to be to the right of this
38:32 - and we're going to have two buttons
38:33 - within here so i'm just going to say
38:35 - button
38:36 - type
38:37 - equal to the button
38:40 - we're going to give it a class of
38:42 - secondary
38:48 - and we're going to give it an attribute
38:50 - of the id that we created
39:00 - and the button is just going to say edit
39:02 - so now that we have our edit button
39:04 - let's copy this
39:06 - and now it's time to make our delete
39:08 - button so we're going to change this
39:10 - from secondary to the danger class
39:13 - and we're going to change ids to
39:16 - delete id
39:18 - and the name of our button is going to
39:20 - be called delete
39:22 - let me just take a look at this to make
39:24 - sure i typed out everything all right
39:30 - and this looks good and the last helper
39:32 - function that we're going to be coding
39:34 - is called display to do's and that's
39:36 - actually going to display our to-do's to
39:38 - the user i'm just going to say cons
39:40 - display reduce
39:43 - and we're going to pass in data and this
39:46 - data is going to be an array of to-do's
39:49 - so i'm just going to say data.for
39:52 - each
39:54 - and we're going to get a to-do out of
39:56 - each of these
39:58 - next let's get the ids of each to do so
40:01 - i'm just going to say let ids equal
40:04 - build ids and we're going to pass in our
40:06 - to-do
40:08 - next let's actually append each of these
40:10 - list items to our unordered list so i'm
40:13 - just going to say display dot append
40:16 - and we're going to call the build
40:17 - template method that we just created
40:20 - and we're going to pass in our to do and
40:22 - our ids
40:24 - afterwards we're going to call our edit
40:26 - to do function now we haven't created
40:29 - this function yet
40:30 - and we'll do so in the next tutorials
40:33 - but basically the edit to do function
40:35 - and our delete to do function is going
40:37 - to add a click event to our edit button
40:41 - and our delete button i'm just going to
40:43 - say to do
40:44 - and we're going to pass in ids dot
40:47 - do id
40:49 - and ids dot
40:51 - edit id
40:53 - and likewise we're just going to say
40:54 - delete to do
40:56 - and we're going to pass in our to do
40:59 - our ids dot
41:01 - list item id
41:03 - and ids dot delete id
41:08 - so let's add a semicolon here
41:10 - and this is pretty much where i want to
41:13 - leave you guys at so we created our html
41:16 - file
41:17 - and we've added all
41:19 - our helper functions that's going to
41:21 - help display our data to the user
41:24 - welcome to part 7 of building our crud
41:26 - application from scratch so in this
41:29 - tutorial what we're going to do is
41:30 - display our to-do's to the user by
41:33 - making a http get request using the
41:36 - fetch api
41:38 - so if you remember from our previous
41:40 - tutorials we coded this get route this
41:43 - get to dues and the job of our get to
41:46 - dues route is to actually get all our
41:48 - to-do's from the database and return it
41:51 - and it's going to be returned within an
41:54 - array so now if i head over to our
41:56 - index.html
41:58 - what we're going to do is have the fetch
42:00 - api call this get to do's route
42:04 - i'm just going to go here
42:05 - and i'm going to create a function
42:07 - called get to do so i'm just going to
42:08 - say const
42:10 - yep to do's
42:12 - and within here we could use the fetch
42:14 - api so i'm just going to say fetch
42:17 - and it's going to be the url or the
42:19 - endpoint that we want to hit so i'm just
42:21 - going to say get
42:22 - to do's the next argument is going to be
42:25 - the type of method that we want to use
42:27 - so we coded a get method
42:31 - next we could call the then method
42:34 - and we're going to get a response back
42:36 - from the server
42:37 - and i'm just going to say return
42:40 - response.json
42:42 - and this is going to parse the json for
42:44 - us but this is going to return a promise
42:47 - and when you return a promise we could
42:49 - chain that promise
42:51 - i'm just going to call it then method
42:53 - once again
42:54 - pass in our data
42:56 - and now here i'm just going to
42:57 - console.log the data and we're going to
43:00 - pass this data this array of to-do's
43:04 - to our helper method so i'm just going
43:06 - to call display
43:08 - to do's and we're going to pass in our
43:10 - data so now let's just add this
43:12 - semicolon here
43:14 - and let's actually invoke our get to
43:16 - do's method
43:19 - and now if i was to save this
43:21 - and let's open up a terminal and i'm
43:23 - just going to clear it i'm going to say
43:25 - node app let's start up the server so
43:27 - now let's open up our browser
43:30 - so now from here let's just type
43:31 - localhost port 3000
43:34 - and you can see that our to-do's are
43:36 - being loaded so let's bring up the
43:39 - developer tools so i'm just going to hit
43:40 - f12
43:42 - and we go to our console you can see the
43:45 - array that the server is sending us
43:48 - so if we open that up you can see our
43:50 - to-do's
43:51 - we have our primary key and the to do
43:53 - now let's head over back to visual
43:55 - studio code to see how this is working
43:57 - so now if we come back here we can see
43:59 - that our array of to-do's is being
44:02 - passed into our display to-do's
44:04 - let's take a look at what display
44:06 - to-do's is doing so display to-do's is
44:10 - actually taking an array of to-do's it's
44:13 - building its unique ids for our html
44:16 - elements
44:18 - and it's calling build template now
44:20 - build template is going to be used to
44:22 - build our list element that we're going
44:24 - to add to the unordered list so you can
44:27 - see that happening here once we build
44:30 - this html template we're returning it
44:33 - and is going to be appended to our
44:35 - unordered list so that's pretty much how
44:38 - we are displaying our to-do's to the
44:40 - user
44:42 - welcome to part 8 of building our crud
44:44 - application from scratch
44:46 - on this tutorial we're going to be
44:48 - making http post requests using the
44:50 - fetch api
44:52 - so if you remember from our previous
44:54 - tutorial we coded this post route and we
44:57 - just gave it forward slash it's gonna
45:00 - take data from the users and we're gonna
45:02 - have to post data back via the body and
45:04 - you can see that it returns two things
45:07 - the result whether or not we
45:09 - successfully deleted the item or not and
45:11 - it returns back the inserted document
45:15 - that we just inserted so let's head over
45:17 - to index.html and let's actually code
45:20 - this so from here we're going to use our
45:22 - form that we have up here
45:25 - so this is our form and what we want to
45:27 - do is prevent the default form
45:29 - submission so we're going to come down
45:31 - here
45:32 - and i'm just gonna say form dot submit
45:36 - and this is gonna take in a function and
45:38 - it's gonna have an event and what we're
45:40 - gonna do is say e dot prevent default
45:44 - from occurring
45:45 - next we're going to call it a fetch api
45:47 - so i'm just going to say fetch
45:49 - we're going to use our endpoint of
45:51 - forward slash
45:52 - the next argument is going to be our
45:54 - options so the first option is we're
45:57 - posting data back to the server i'm just
46:00 - going to say post our second property is
46:02 - going to be the body
46:04 - what we're sending back to the database
46:06 - so i'm just going to say json.stringify
46:11 - and we're going to send back our to-do
46:14 - so we're just going to use to do
46:16 - use our input and we're going to get the
46:18 - value
46:19 - that our input field has at the moment
46:24 - so now let me just move this over here
46:29 - and the last option is we're gonna have
46:31 - to pass in headers
46:33 - and what a header is is it tells the
46:36 - server what kind of content you're
46:38 - sending back to it so i'm just gonna say
46:40 - content
46:41 - type
46:43 - and we're sending back json
46:49 - now from here let's call the then method
46:51 - so i'm just going to say then
46:54 - we're going to get our response back
46:55 - from the server
46:57 - we're going to return that response.json
47:00 - which is going to be a promise that
47:02 - parses the data for us
47:04 - we're just going to call it then
47:06 - on the promise that's being returned
47:09 - and we're going to get our data back
47:11 - next we're going to have to test to see
47:13 - whether or not we successfully inserted
47:15 - the document i'm just going to say if
47:17 - the data result dot ok is equal to 1
47:21 - and
47:23 - data dot
47:24 - result n
47:26 - is equal to one
47:28 - that means our to do was successfully
47:30 - inserted into our database
47:33 - i'm just gonna say let ids equal to
47:35 - build ids
47:37 - and we're going to pass in our document
47:41 - next we're going to call the display
47:43 - method so this is going to append a new
47:46 - list through our unordered list
47:56 - and last but not least we're going to
47:57 - have to attach
47:59 - our click events to our edit button so
48:01 - i'm just going to call edit to do
48:04 - which is a function we haven't created
48:06 - yet
48:06 - and we're going to pass in our to do
48:10 - our to do id
48:12 - and the id of our button
48:17 - then we're going to have to attach event
48:18 - to our delete button as well
48:24 - we're going to pass in our to do
48:27 - the list item id
48:30 - and the reason we're passing in the list
48:31 - item id is because we need the id of the
48:34 - list that we want to delete
48:36 - and we're going to pass in the id of the
48:38 - delete button
48:40 - so for now i'm just going to comment
48:42 - these two out because they don't exist
48:44 - at the moment
48:46 - right now we have display.pen
48:48 - and this looks good to me
48:50 - and last but not least once this
48:53 - successfully happens what we want to do
48:55 - is actually reset our to do's input
49:00 - so let's actually test this out so i'm
49:02 - just going to hit ctrl shift backtick
49:05 - let's clear the terminal node app
49:09 - let's open up a browser so now let's
49:12 - actually test this out so i'm just going
49:14 - to come up here and
49:16 - testing
49:17 - post
49:18 - i'm going to click the create button
49:22 - and you can see that our to do was
49:24 - successfully posted to the database so
49:27 - i'm just going to hit refresh to see if
49:29 - it actually worked and you can see that
49:32 - our data is persisting so that's the
49:34 - basics of using the fetch api to post to
49:37 - the server and welcome to part nine of
49:40 - building our crud application from
49:42 - scratch so in this tutorial we're going
49:45 - to be making a http delete request using
49:48 - the fetch api
49:50 - on the previous tutorials you can see
49:52 - that we coded our app.delete route and
49:55 - it's using a route parameter we get that
49:58 - id of the to do that we want to delete
50:01 - here
50:02 - and then here we call the find one and
50:04 - delete function we pass in our primary
50:06 - key or the id
50:08 - and what we end up getting is the result
50:10 - whether or not we successfully deleted
50:13 - the to do document within our collection
50:16 - now let's actually head over to
50:17 - index.html
50:19 - and let's actually code our delete to do
50:22 - function so now from here i'm just going
50:24 - to say const delete to do
50:28 - and it's going to take in three
50:29 - parameters it's going to take a to do is
50:32 - going to take the list item id and it's
50:35 - going to take the delete id
50:37 - now to do is the document that we want
50:40 - to delete list item id is the id of the
50:43 - list element within our unordered list
50:45 - that we want to delete and the delete id
50:48 - is the id that we've given to our delete
50:51 - button so now let's actually code this
50:53 - out first we need to get our delete
50:55 - button so i'm just going to say let
50:57 - delete button
50:59 - is equal to this
51:07 - next let's actually add a click event to
51:09 - our delete button so i'm just going to
51:11 - come down here
51:12 - delete button dot click
51:14 - and we're going to pass in our click
51:16 - handler
51:18 - and within here let's actually call our
51:20 - delete route using the fetch api so i'm
51:23 - just going to say fetch
51:24 - and we're going to pass in our route
51:32 - next let's actually pass in our options
51:34 - so we're actually making a delete
51:37 - request so i'm just going to say method
51:39 - and we're going to pass in delete
51:41 - now from here let's call it a done
51:43 - method to actually execute this fetch
51:45 - function
51:46 - i'm going to say then
51:48 - where we're going to end up getting back
51:50 - is the response from the server
51:52 - next we're going to return that response
51:54 - and we're going to call the json method
51:56 - on it and this is going to return to us
51:58 - a promise so now we could promise chain
52:01 - i'm just going to call then again and we
52:04 - should get back our data that is fully
52:06 - parsed
52:08 - now from here let's actually test to see
52:11 - whether or not we successfully deleted
52:13 - the to do
52:14 - i'm just going to say if
52:17 - is equal to one
52:19 - that means we successfully deleted our
52:21 - to do so now we need to remove the li
52:25 - element from our unordered list so how
52:27 - do we do that well we have our list id
52:36 - and we're just going to call the method
52:37 - remove so this is going to remove our li
52:40 - element from our unordered list let's
52:42 - actually add a semicolon here
52:44 - all right now from here let's go down to
52:46 - our display to do's
52:49 - and
52:50 - all right so we already have the our
52:52 - delete to do uncommon it so this should
52:54 - work so now i'm just going to save this
52:57 - let's go back to app.js
53:01 - let's actually open up our terminal
53:04 - and from here let's actually run our
53:06 - application node app and you can see
53:08 - that application is up and running and
53:11 - now let's head over to our web browser
53:12 - and let's actually test this out
53:15 - so from here you can see our to-do
53:16 - application is up and running so i'm
53:19 - just going to refresh this just to
53:21 - triple check
53:22 - and what we want to do is actually hit
53:24 - our delete button to see if it works so
53:26 - i'm just going to hit delete and you can
53:28 - see that testing post is gone if i hit
53:30 - delete again you can see clean room is
53:33 - gone and if i hit refresh
53:35 - you can see that this does persist onto
53:38 - the database and that those to-do's are
53:40 - actually deleted from our database
53:44 - and welcome to part 10 of building our
53:45 - crud application from scratch so in this
53:48 - tutorial we're going to be making a http
53:51 - put request using the fetch api so in
53:55 - the previous tutorial we coded our
53:57 - app.put route so this is the endpoint
53:59 - that we're going to hit
54:01 - we're using route params and this is
54:03 - going to be the id of the document that
54:05 - we want to edit
54:06 - we're also sending data back via the
54:09 - body as you can see here and this is
54:11 - going to be the data that we want to
54:13 - update with so right here you can see
54:15 - that we are finding by the id so this
54:17 - gets the document that we want to update
54:21 - this is updating the document here
54:24 - and if you scroll here you can see that
54:26 - we're sending back the result whether or
54:28 - not we were successfully able to update
54:31 - the document or not so now let's
54:33 - actually head over to our index.html
54:36 - file and actually code this
54:38 - i'm just going to come down here and i'm
54:40 - going to call the function edit to do
54:45 - and it's going to take in three
54:46 - parameters first is going to be the to
54:48 - do second is going to be the to do id
54:52 - and third is going to be the edit id
54:55 - the first parameter to do is obviously
54:57 - the document that we want to edit to do
55:00 - id is the id of the to do
55:03 - and edit id is the id of the button now
55:06 - let's just come down here
55:08 - and now from here what i want to do is
55:10 - actually get our button
55:20 - and once we get our button what we want
55:22 - to do is attach a click event to it so
55:24 - i'm just going to say edit
55:26 - button dot click
55:29 - pass in our callback and from here we
55:31 - can use the fetch api to hit our
55:33 - endpoint in our server i'm just going to
55:36 - say fetch
55:38 - and the endpoint is forward slash
55:41 - and the id of the to do that we want to
55:43 - edit
55:48 - the second argument is going to be our
55:51 - options so we're just going to say
55:53 - method
55:54 - and we're going to set that to a put
55:56 - request
55:58 - next we're going to set our headers
56:01 - and our headers are going to be set and
56:03 - they're going to tell
56:04 - our server that we're sending back json
56:23 - all right now from here let's set up one
56:25 - more property
56:27 - and it's going to be our body so what
56:29 - we're going to do is actually send what
56:31 - we want to update our document with
56:34 - i'm just going to say json.stringify
56:38 - and this is going to convert our
56:39 - javascript object into json for us
56:42 - and i'm just going to say to do
56:45 - and we're going to get the user's input
56:50 - now that we have our options set up
56:52 - let's call the done method to execute
56:54 - this fetch request
56:57 - here we're going to get our response
56:59 - from the server now we're going to
57:00 - return that response and we're going to
57:02 - call a function called json
57:06 - now this response.json is going to
57:09 - return a promise so i'm just going to go
57:11 - down here and i'm going to call it then
57:14 - and it's going to give us our parsed
57:16 - data back so now i'm just going to test
57:18 - to see whether or not we successfully
57:20 - updated our to-do i'm just going to say
57:22 - if data
57:24 - dot okay is equal to one
57:28 - that means that everything went okay and
57:30 - now what i need to do is actually get
57:32 - our to-do element so i'm just gonna say
57:34 - let
57:35 - to do index
57:37 - equal
57:43 - equal our to-do id
57:46 - next what i want to do is actually set
57:48 - our data so i'm just going to say to do
57:51 - index
57:52 - html is going to be set to the data that
57:55 - we just got back from the server
57:59 - now what i want to do is reset the
58:01 - user's input so i'm just going to call
58:03 - the reset to do input function
58:08 - so now i'm just going to scroll down
58:10 - just to check to see if we have
58:13 - our edit to do is being called
58:17 - and it's being called here all right so
58:19 - let's actually test this out in our web
58:22 - browser to see if it actually works
58:24 - i'm just going to save this
58:26 - i'm going to open up the terminal
58:29 - i'm going to clear it
58:30 - node app
58:33 - and now let's head over to our browser
58:35 - so from here you can see that we have
58:37 - our application running just gonna hit
58:39 - refresh
58:40 - just to make sure
58:42 - and right here i'm just gonna type
58:44 - whatever
58:45 - and now i'm gonna hit edit
58:48 - and you can see that our to-do document
58:50 - was updated so i'm just going to hit
58:52 - refresh again
58:54 - let's see if it persists to the database
58:56 - and you can see that it is persisting
58:59 - and let's try one more just to make sure
59:03 - and you can see that it is indeed
59:05 - working welcome to part 11 of building
59:07 - our crud application from scratch so in
59:10 - this tutorial we're going to be doing
59:12 - some user input validation using joy so
59:15 - to get started let's actually install
59:17 - joy
59:18 - i'm just going to come down here mpm
59:20 - install joy
59:23 - and now that we have our joy package
59:25 - installed let's actually include it
59:27 - within our application so i'm just going
59:29 - to come up here i'm going to say const
59:32 - joy is equal to require
59:34 - joy
59:36 - now from here let's actually develop a
59:38 - schema for a to do document now if you
59:42 - don't know what a schema is it's
59:43 - basically a blueprint that an object has
59:47 - to follow so let's come down here
59:49 - and let's define our schema i'm just
59:52 - going to say cons schema
59:55 - is equal to joy
59:57 - dot object
59:59 - and now we want to define our keys
60:03 - now from here we're going to give our
60:05 - properties and the type that they should
60:07 - be
60:08 - so for example we only have really one
60:11 - object within this tutorial and that's
60:13 - what to do
60:14 - so here i have a to do
60:17 - and the type that this should be is of
60:19 - type string so i'm just going to say joy
60:22 - dot string
60:23 - and we're going to make it required
60:26 - so when the user inputs his to-do this
60:29 - schema is going to make sure that it's a
60:31 - string and that it's not empty so
60:34 - required means that if the user tries to
60:37 - submit a to-do that's empty we're going
60:39 - to get an error if the user tries to
60:41 - submit a number instead of a string
60:44 - we're going to get an error but that's
60:46 - how we're going to validate user input
60:48 - so i'm just going to end a semicolon
60:50 - here
60:51 - now let's take a look at our route
60:54 - so what we want to do is validate
60:57 - anything we get back from the user so
60:59 - for example
61:01 - this route parameter here
61:03 - we would want to validate now this is
61:05 - not a to do object but this is the
61:07 - primary key but anything the user sends
61:10 - back to us you would want to validate so
61:14 - this request body we would also want to
61:16 - validate for
61:18 - and if we take a look here request body
61:20 - here
61:22 - request params here
61:24 - and that's pretty much it so for this
61:27 - tutorial i'm going to do one example
61:29 - with you guys and you guys could pretty
61:31 - much figure out how to do the rest of
61:32 - yourselves so i'm going to choose to do
61:35 - our post route so we're going to
61:37 - validate the user input sent by the body
61:42 - so from here i'm going to call joy dot
61:45 - validate
61:47 - and validate is a method which is going
61:49 - to take three arguments the first
61:51 - argument is the object that you want to
61:53 - validate so we're passing in user input
61:56 - the second argument is the schema or the
61:59 - blueprint that you want to check against
62:01 - user input
62:03 - so we're just going to pass in our
62:04 - schema we just created and the third
62:06 - argument is our callback function
62:10 - and we get the error and we get the
62:12 - result
62:13 - now from here i'm going to say if
62:15 - there's an error what i want to do is
62:18 - we're going to create an error so i'm
62:20 - just going to say const
62:22 - error
62:23 - is equal to new
62:25 - error
62:26 - and we're going to pass in the message
62:28 - that we want to display to the user i'm
62:30 - just going to say invalid input next i'm
62:33 - going to give this error a http status
62:36 - code so i'm just going to say error dot
62:38 - status
62:39 - and i'm just going to set that to 400.
62:42 - next what i want to do is call the next
62:45 - method and that's because we're going to
62:47 - have a middleware handle our errors
62:50 - i'm just going to say next and we're
62:52 - going to pass in the error we just
62:53 - created
62:55 - so from here
62:56 - since we're using a middleware we have
62:58 - to pass in next as a param up here so
63:02 - now from here
63:04 - let's code our else statement so if
63:06 - there's no errors with the user's input
63:09 - what do we want to do so i'm just going
63:10 - to say else and what we want to do is
63:12 - actually get our database i'm just going
63:15 - to cut this out i'm going to paste this
63:17 - in within here
63:18 - and now here what we can do is some more
63:21 - error handling so right here i could
63:23 - come here instead of just printing this
63:25 - out to the console what i could do is
63:28 - exactly what i did above i could copy
63:30 - this
63:31 - let's paste this in here
63:34 - and instead of saying invalid input
63:37 - i could say
63:40 - something like this
63:42 - i could say failed
63:44 - to insert
63:46 - to do document
63:49 - and we're going to leave the status quo
63:50 - the same and we're going to call our
63:53 - middleware error handle here
63:55 - so from here we could go down to this
63:58 - else statement
63:59 - and we're going to have to pass in a
64:01 - couple more things and this is just to
64:03 - make it easier for the front end so for
64:06 - example we are going to pass in a
64:08 - message
64:10 - and this message is going to be
64:12 - displayed if we successfully insert it
64:15 - into the database so i'm just going to
64:17 - say successfully
64:20 - insert it to do
64:22 - the next thing that we're going to pass
64:24 - in is an error property
64:27 - and we're going to set that to null so
64:29 - that means that there was no errors and
64:31 - we're going to be using this to test and
64:33 - our front end
64:35 - so this looks good to me
64:37 - so now let's code our custom error
64:40 - handler our custom middleware i'm just
64:43 - going to go down here
64:45 - and
64:46 - [Music]
64:47 - let's put it here and now i'm just going
64:50 - to say app.use
64:52 - and we're going to pass in our error
64:54 - object
64:55 - next is going to be the request object
64:57 - the response object and the next object
65:01 - now here what i could do is actually
65:03 - send a response back from the server
65:06 - well now i'm just going to say
65:08 - res.status
65:10 - and we're going to set the status to the
65:13 - error status that we set in our post
65:15 - route i'm just going to say error dot
65:18 - status
65:20 - next i'm going to call the json method
65:22 - so we're going to be sending this back
65:23 - to the user
65:25 - and from here i'm going to pass in an
65:27 - error property and this is going to be
65:28 - an object
65:30 - and it's going to have a property of
65:31 - message and we're going to pass in our
65:34 - error message so i'm just going to say
65:36 - error
65:37 - message
65:39 - all right now from here what i want to
65:41 - do is
65:43 - let's head over to bootstrap and let's
65:46 - get our alert that we're going to be
65:48 - using to display to the user so let's go
65:50 - to bootstrap and get our alert that
65:52 - we're going to be using to display to
65:54 - the user whether or not our post request
65:57 - was successful or not so from here i'm
66:00 - just going to go to search i'm going to
66:01 - type alert
66:04 - and you can see that we have a bunch of
66:05 - alerts here what i want to do is get our
66:09 - success alert and
66:11 - we're going to be using this to display
66:13 - when we successfully posted something
66:16 - and i want to use the danger alert when
66:18 - we get an error
66:20 - i'm just going to come down here and we
66:22 - only need one of these i'm just going to
66:24 - pick up the danger one i'm going to copy
66:26 - this and i'm just going to head back to
66:28 - visual studio code now from here i'm
66:31 - just going to save our app.js file i'm
66:33 - going to go to index.html
66:36 - and what i want to do is actually put
66:39 - this underneath our display so right
66:42 - here
66:43 - i'm just going to paste this here and
66:46 - let's actually steal some code from our
66:48 - display i'm just going to add a break
66:50 - here
66:51 - just to give us some space
66:53 - i'm going to copy this
66:55 - i'm going to paste this here
66:58 - and
67:01 - what i want to do is get rid of this
67:02 - unordered list and we're going to be
67:04 - putting our
67:06 - alerts here so i'm just going to copy
67:08 - this
67:10 - paste this in here
67:12 - let's tidy this up a bit
67:15 - and what i want to do is actually get
67:16 - rid of this and let's add an id
67:18 - attribute of message
67:23 - all right from here let's actually
67:24 - scroll down to our script tag
67:27 - and what we want to do is actually get
67:29 - our message that we just gave an id for
67:32 - i'm just going to say const message
67:35 - and we're going to be getting our id
67:41 - now from here i'm just going to say
67:43 - message.hide because i don't want to
67:45 - show it yet
67:47 - next thing i want to do is create a
67:50 - helper function so i'm just going to
67:51 - come down here i'm just going to say
67:53 - const display message and the first
67:57 - parameter is going to be a flag whether
68:00 - or not we should display the success
68:02 - alert or the danger alert the second
68:05 - argument is going to be the message that
68:06 - we want to display
68:08 - now from here i'm just going to say if
68:10 - flag so if this is true
68:13 - and let's actually make a comment so if
68:16 - we had a successful post
68:18 - what we want to do is i'm going to say
68:21 - message dot remove class
68:24 - and we're going to remove the alert
68:26 - dash danger class
68:29 - and i'm just going to copy this
68:31 - paste this and we're going to change
68:33 - this to add class
68:35 - and we're going to add the success alert
68:38 - next i'm going to say message.html
68:42 - and we're going to pass in the message
68:43 - that we want to display and i'm going to
68:45 - say message.show to actually display our
68:49 - alert so now from here since we have a
68:52 - success we need a else statement to
68:55 - display the failure so i'm just going to
68:56 - say else and now i'm just going to copy
68:59 - all this and pretty much we're going to
69:01 - do the opposite so instead of saying
69:03 - remove danger class
69:05 - we're going to remove the success class
69:08 - and here we're going to be adding the
69:10 - danger class and these two lines of code
69:12 - are going to be the same
69:14 - so actually by coding this i actually
69:17 - forgot to remove this part from our html
69:20 - so
69:21 - yeah so let's get rid of this
69:24 - and we have our alert and we have our
69:26 - message okay so that looks good
69:29 - so now let's actually go down to our
69:31 - post
69:35 - but here's our post
69:38 - and from here what we're going to do is
69:40 - actually wrap this if statement so i'm
69:42 - just going to come up here
69:43 - i'm going to say if and we're going to
69:45 - use the not symbol so data.error
69:49 - so there are no errors what we want to
69:51 - do is execute this block of code
69:58 - but what we want to do is actually
70:00 - get our alert to display i'm just going
70:02 - to say display message and we're going
70:05 - to set this to true because that means
70:07 - that everything went okay and then we're
70:09 - going to pass in the message that we
70:10 - want to display
70:11 - i'm just going to say data.message
70:14 - and from here i'm going to make an else
70:17 - statement
70:18 - i'm just going to copy this
70:21 - paste this here instead of true we're
70:23 - going to say false and let's display our
70:26 - error message so i'm just going to say
70:27 - data dot
70:29 - error dot message
70:31 - now from here let's actually go back
70:33 - down we do have to reset our to do input
70:36 - so i'm just going to call that
70:38 - so now let me just save this and let's
70:41 - actually test this out
70:43 - so i'm just going to come down here node
70:45 - app
70:47 - and let's see what we got wrong
70:50 - so joy dot string dot require
70:53 - says require is not a function
70:56 - let's go back to our app.js
71:01 - and it's probably not required it's
71:03 - probably required so now let's save this
71:05 - let's clear the terminal node app
71:09 - all right so now our application is up
71:11 - and running and now let's actually test
71:13 - this in the browser now we have our
71:15 - to-do application up and running so now
71:18 - if i was type a string and hit create
71:22 - you see that we get successfully
71:23 - inserted to do
71:25 - and if i was to have an empty string and
71:27 - hit create
71:29 - you can see that nothing's updating so
71:32 - that means that we made an error so now
71:33 - let's head back to visual studio code so
71:36 - from here let's just go back to our
71:38 - index.html file let's actually take a
71:41 - look at this so
71:43 - we have our if statement here
71:46 - and that's pretty much the reason
71:48 - because this if block is only supposed
71:50 - to be wrapped around this if condition
71:53 - but we also have our else block here so
71:56 - this code isn't being executed
71:58 - so let's actually
72:00 - copy this
72:02 - let's get that out of there
72:05 - and from here
72:07 - you just paste that here
72:11 - and we don't need two resets here
72:14 - so now let's say this and now let's head
72:16 - back to the browser i'm just going to
72:18 - hit refresh to reload the page
72:21 - and we could test this one more time
72:24 - so we inserted our to do okay now we
72:27 - have a blank user input
72:29 - hit create
72:31 - and you can see that we get a warning
72:32 - invalid input that's pretty much how you
72:35 - can validate user input using joy for
72:38 - our to-do application