00:00 - in this course you will learn how to
00:01 - create a full stack instagram clone
00:03 - using flutter and firebase
00:06 - ravon is a great instructor and will
00:08 - teach you step by step how to create
00:10 - this full stack app
00:12 - let me show you the demo of the app
00:13 - first so as you can see we have our
00:15 - instagram feed over here we can either
00:18 - light the image let me show you the like
00:20 - process
00:22 - and this is the animation we are going
00:23 - to build with flutter
00:25 - and we can dislike it and you can see on
00:28 - all the three screens that if we like
00:30 - the uh
00:31 - image it shows up on all the three
00:33 - screens real time this is powered by
00:35 - stream builder and flutter and firebase
00:38 - firestore
00:39 - now
00:40 - i can even comment on any post so let me
00:43 - show you the comment i'll go in the
00:44 - comments as well to show you that it's
00:46 - real time so i'll comment
00:49 - nice
00:50 - pick
00:51 - and i'll post it and you can see over
00:53 - here that nice pick shows up
00:56 - now you can even
00:59 - go back over here in the search and you
01:01 - can see our images showing up we can
01:03 - even search for a user i'll show you the
01:06 - user
01:08 - the name of a user is naman ranavat so
01:10 - i'll just type numan and it shows up
01:12 - this is powered by firebase's
01:15 - search query
01:17 - now if i go where i can either follow
01:19 - this user
01:20 - or i can unfollow you see the like and
01:22 - this
01:23 - you can see the counter going up and
01:25 - down
01:26 - i'll keep it followed
01:28 - now if i go back over there you can see
01:31 - that this
01:32 - is maintained and the user is showed as
01:34 - uh followed
01:36 - i can even go to the another user and if
01:39 - i go to my own profile you can see that
01:41 - i get the option of sign out
01:44 - then i can even upload an image
01:48 - so i'll take a photo i'll choose it from
01:51 - gallery if i do it on my real android
01:53 - device which i'll do in a while you can
01:55 - see that we can take a photo from our
01:57 - own gallery
01:58 - i'll take this picture i'll write a
02:01 - caption of
02:03 - the scenery
02:06 - is awesome
02:09 - and i'll post it
02:10 - you can see this indicator showing up
02:13 - as long as it is getting posted to our
02:16 - firebase database
02:18 - and you can see that our image shows up
02:21 - at the right time
02:22 - in the real time
02:24 - and if we go over here we can see this
02:27 - now keep a track on this if i click over
02:30 - here you can see a little of animation
02:33 - happening over here we're going to build
02:35 - that as well
02:37 - and the next thing i want to show you is
02:39 - the profile screen
02:40 - and this is the number of posts the
02:43 - following and everything so what i'm
02:45 - going to do is sign out from here and
02:48 - you can see that we get signed out
02:50 - immediately and only from one device and
02:53 - not all the devices
02:54 - and
02:55 - we can again
02:57 - you make use of the authentication now
03:00 - i'm going to login
03:02 - and
03:03 - put in the password
03:07 - and you can see there is no user with
03:09 - this email we have proper validations
03:12 - with firebase as well
03:15 - so this is what we are going to build in
03:17 - this app the prerequisites for this
03:19 - tutorial is to have a basic knowledge of
03:22 - flutter and dart no knowledge of
03:25 - firebase is required not even
03:27 - knowing what firebase is actually we're
03:30 - going to go step by step and learn
03:33 - everything about firebase
03:35 - and we'll also uh you make use of a
03:38 - provider if you have a bit of knowledge
03:40 - with provider it will be a good thing if
03:42 - you don't that's no problem you're going
03:44 - to have a look at that and i'll explain
03:47 - it to you as well
03:49 - and we're going to have a cross platform
03:51 - app so you can see over here this is a
03:53 - completely responsive build now let me
03:56 - increase the width of this app
03:58 - this website over here
04:00 - and you can see it has a different
04:02 - layout altogether because instagram on
04:05 - web looks completely different it has
04:07 - the different background color it has a
04:09 - same app color
04:11 - and it is easily accessible as well
04:15 - it's similar to our app
04:18 - right so we're going to build completely
04:20 - responsive ui as well
04:22 - let's get started with the code alright
04:25 - so the first thing we need to do is open
04:27 - our terminal and over here migrate to
04:29 - our desktop
04:30 - and after that
04:32 - we run the flutter create and after that
04:35 - we need to
04:37 - mention the name of the
04:38 - folder we need to give so we can name it
04:41 - instagram
04:43 - flutter and make sure to use underscore
04:45 - over here and not uh you know
04:48 - a hyphen or something because it will
04:51 - give you an error
04:52 - and after that is done just click enter
04:58 - after this process is completed you can
05:00 - just migrate to your instagram flutter
05:03 - folder
05:04 - and you can open it in vs code by doing
05:07 - code and after that putting a full stop
05:09 - and clicking enter
05:11 - this will open in vs code
05:14 - and uh
05:15 - what i want to do now is run this
05:18 - boilerplate code on our ios simulator so
05:21 - that we know it's working pretty well
05:23 - like the boilerplate plate code is
05:25 - working so i'm just going to run open
05:28 - dash a
05:29 - and pass until simulator so this will
05:32 - open uh like create a simulator for us
05:37 - and this is working now you can run the
05:39 - command flutter run to see if it's
05:40 - working but what i like to do is in this
05:43 - main.dart file go over your
05:46 - run and run without debugging
05:49 - because this gives us the option to hot
05:51 - reload and whenever we save a file it
05:54 - will start hot reloading which is a
05:56 - pretty cool feature in my opinion now in
05:58 - the meantime what i'm going to do is
06:01 - i'm going to remove all the boilerplate
06:03 - code but i'm not going to save the file
06:05 - so that we see the changes that are
06:07 - happening
06:08 - and i'm going to remove
06:10 - this
06:11 - theme data from here as well
06:14 - and i'm going to name the title as what
06:16 - the title of our app is going to be i'm
06:19 - going to name it instagram
06:22 - clone
06:23 - and over here i'm going to pass in debug
06:26 - show checked mode banner to false
06:29 - the banner that shows up in the top
06:31 - right corner
06:32 - will not show up if we do this
06:35 - and
06:36 - let our app finished by that time
06:39 - see you when this app loads up all right
06:41 - now our app is loaded and if you see if
06:44 - we click over here our counter
06:46 - app is working pretty well so now i'm
06:49 - going to remove this text over here i'm
06:52 - going to replace this class that we have
06:54 - removed and going to replace it with the
06:56 - text let's say
06:58 - let's
07:01 - build
07:02 - instagram
07:05 - so this is going to look very ugly but
07:08 - let's see
07:09 - and it's giving us the right output
07:11 - so uh the next thing we want to do is
07:14 - add theme to our app what we can do is
07:17 - pass the theme over here
07:19 - and what i want our app to how i want
07:22 - our app to look is you know have a dark
07:24 - theme but i just
07:26 - want to copy everything that flutter
07:28 - provides us so
07:30 - there is one theme data
07:33 - and if we put in dot dark it will give
07:35 - us all the features you know the flutter
07:38 - has built in in this dark so it will use
07:40 - all the colors of dark
07:43 - and we can just save it and if we
07:46 - wrap this home with the scaffold so that
07:49 - we see a
07:51 - good output and not a container type
07:54 - output
07:56 - we should see something cool happening
07:58 - and we can see that our app has turned a
08:01 - fully dark mode but i don't want my app
08:04 - to you know look like this
08:06 - i want its colors to look a bit
08:09 - different like the background color over
08:10 - here so what you can do is
08:13 - go to this url over here github.com on
08:16 - our instagram flutter clone
08:19 - and i'll mention this link in the
08:21 - description below you can just copy all
08:23 - of this these are just colors for our
08:26 - app i don't want to waste time writing
08:28 - all of these colors
08:29 - and we're going to create a lip folder a
08:31 - utils folder over here
08:34 - so that it contains all our you know
08:36 - utilities and i'm going to name it
08:39 - colors dot dot file
08:41 - and i'm going to paste all of these
08:43 - colors
08:44 - now
08:45 - you can see we have mobile background
08:47 - web background mobile search blue color
08:49 - primary color secondary color
08:52 - so
08:52 - what i want to do is
08:54 - keep all the methods like whatever dark
08:57 - has whatever color dark has
08:59 - i want to keep them and i want to so i
09:02 - can do copy with and i just want to
09:05 - change the background color over here so
09:07 - what i can do is scaffold background
09:09 - color and i'll turn background color to
09:12 - mobile background color
09:17 - now if we go over here we can see that
09:19 - we're getting a good output
09:21 - a changed background color
09:23 - that's what we wanted now the next thing
09:25 - we want to do is create a responsive
09:27 - layout whenever our screen
09:30 - size of the browser extends a certain
09:32 - width it should display you know a web
09:34 - screen layout so to say and uh if not
09:38 - then it should display a mobile screen
09:40 - layout
09:41 - so what i'm going to do is create
09:44 - another folder over here called
09:46 - responsive
09:48 - and in that i'm going to create
09:50 - responsive
09:52 - layout
09:53 - screen
09:55 - dot dart
09:57 - and
09:58 - over here i'm going to import material
10:01 - package
10:03 - for now it's going to be a stateless
10:04 - widget later on it will become a
10:07 - stateful widget because of the init
10:09 - state we are going to use in
10:11 - future
10:12 - so uh over here i want to return
10:15 - a widget named as layout builder
10:18 - this helps in creating responsive layout
10:20 - basically it will give us a builder
10:23 - function which will return to us a
10:26 - context
10:27 - and constraints this constraints is a
10:29 - very useful thing for us it will give us
10:32 - various methods like
10:34 - if i do give constraints dot it will
10:36 - give us max with max height
10:39 - minimum height minimum width
10:41 - so it will give us the constraints of
10:43 - our app basically and for now uh since
10:46 - we are going to use it over here which
10:48 - is basically a parent
10:50 - uh we'll have the maximum width of our
10:53 - app so we can do mac constraints dot
10:55 - maximum width and if it's greater than a
10:58 - certain height
10:59 - so what i'm going to do is create a
11:01 - variable i create a file over here
11:03 - dimensions dot dot
11:04 - and over here first of all let me import
11:07 - material package because of the
11:10 - several stuff that's going to come in
11:11 - later and over here i'm going to give a
11:14 - web screen size of 600 beyond this size
11:18 - our
11:19 - app will start looking like a web screen
11:23 - layout so if the constraints.max width
11:26 - starts to extend this a 600 uh variable
11:30 - that we have given over here
11:32 - it it should display a web screen layout
11:34 - right so we'll just pass in web screen
11:38 - and if not we need to pass in a mobile
11:42 - screen layout now this value
11:45 - over here can be changed easily so
11:47 - that's why i've created it in an
11:49 - external file
11:50 - you can just pass it over here but uh we
11:53 - are going to use this web screen size a
11:55 - lot in the future to make further
11:57 - responsive layouts so just keep it over
12:00 - here or else you'll have to
12:03 - keep taking 600 and move it everywhere
12:06 - which is not really a good coding
12:08 - practice
12:09 - so i want to return a web screen so
12:12 - what i'm going to do is
12:14 - call a widget i'm going to accept a
12:16 - widget from our constructor over here
12:18 - and i'm going to call it web screen
12:21 - layout
12:22 - and another widget which is going to be
12:24 - the same thing
12:26 - and i'm going to name it mobile screen
12:30 - layout
12:32 - and i'm going to require this via the
12:34 - constructor
12:38 - web screen layout and required
12:42 - sorry
12:43 - required
12:44 - this dot mobile screen yeah so i've
12:47 - accepted this from our constructor now i
12:50 - just want to return this so i can do
12:53 - return web screen layout
12:55 - else what we can do is return a mobile
12:58 - screen layout
13:00 - cool
13:01 - now we can just take this widget from
13:03 - here
13:04 - and replace our home with this
13:09 - and we need to import responsive layout
13:11 - screen dot dart
13:14 - and we'll have to pass in a mobile
13:16 - screen layout and a web screen layout so
13:19 - that is what we are going to make over
13:20 - here
13:22 - a mobile screen layout
13:29 - and a web screen layout
13:36 - cool
13:37 - now
13:38 - we for now it we are going to uh you
13:41 - know create a stateless widget in both
13:43 - of them
13:44 - so i can just pass in mobile screen
13:47 - layout
13:50 - and i'm going to copy this from here and
13:52 - paste it over here
13:54 - call this
13:56 - web screen layout
14:01 - and we can paste it over here as well
14:05 - i'm going to return a scaffold
14:07 - which will have a body of text
14:11 - this is
14:13 - web and let me just center it as well so
14:16 - that we can see
14:22 - and i'm going to format this document
14:25 - over here i'm going to do the same thing
14:27 - i should have copied it earlier i forgot
14:29 - to do so
14:35 - and i'm going to pass in this is mobile
14:38 - i'm going to take this widget and pass
14:40 - it over here
14:42 - mobile screen layout
14:46 - and over here
14:47 - a web screen layout
14:50 - now all of this is going to be a
14:52 - constant widget since we are not going
14:54 - to have dynamic values passed into the
14:57 - constructor
14:58 - so
14:59 - yeah we can just refresh our app and see
15:02 - we are getting this is mobile over here
15:04 - which is the correct output now to run
15:06 - our app on
15:08 - chrome we can just do flutter run dash d
15:12 - chrome
15:13 - flatter run to run and dash d for debug
15:17 - and then we want to debug chrome version
15:19 - so we can just do this
15:21 - right now let's wait for our chrome to
15:23 - load up as you can see over here we are
15:26 - getting this is mobile over here which
15:28 - is the correct output actually now if i
15:31 - increase the width we should start
15:33 - seeing this as web
15:34 - and this is exactly what we are getting
15:37 - so that means our responsive layout
15:38 - widget is working pretty well cool now
15:41 - that we have a responsive layout the
15:42 - next thing we want to do is make a
15:44 - connection to our firebase
15:46 - but before doing that we need to install
15:47 - some packages and these are the packages
15:49 - we'll need firebase core
15:52 - cloud firestore firebase auth and
15:54 - firebase storage let me install all of
15:57 - them and i'll tell you the users of all
15:59 - of these packages in our app so uh what
16:02 - i like to use and uh not to put all of
16:05 - this manually in pubspec.yaml file i
16:08 - instead what uh what i prefer instead is
16:12 - you know using an extension whose name
16:15 - is
16:16 - pubspec assist
16:18 - so you can see over here if we just do
16:21 - command shift p
16:23 - you can see pub spec assist popping up
16:25 - and you can click over there and put in
16:27 - the name of the package you want to add
16:29 - i want to add firebase code i'll click
16:31 - enter
16:32 - and this will automatically add a file
16:35 - in my pubspec.yaml file with the latest
16:38 - version
16:40 - of the same dependency you can see over
16:41 - here
16:42 - now uh
16:44 - like this we are going to add multiple
16:46 - packages like cloud firestore make sure
16:49 - to add cloud firestore and not firebase
16:51 - firestore which is a deprecated
16:53 - dependency we need to add firebase auth
16:55 - next then we need to add
16:58 - firebase
17:00 - storage
17:02 - and these are the four packages that we
17:03 - need to install
17:05 - and uh while this is happening the next
17:07 - thing we want to do is go to
17:09 - console.firebase.google.com
17:12 - i'll mention the link in the description
17:14 - this is where uh you need to create a
17:17 - project i hope you have your gmail
17:19 - account already
17:20 - then we'll click on add project and our
17:22 - project name will be instagram
17:26 - tutorial for me you can just write
17:28 - instagram clone since i already have a
17:30 - project named instagram clone now we're
17:33 - going to disable the
17:34 - analytics for this project since we
17:36 - don't need them
17:37 - and i'm going to create the project this
17:39 - will create a project for us now since
17:41 - we added some dependencies in our
17:43 - pubspec.yaml file we need to stop all of
17:46 - this uh our app running basically and
17:50 - we'll not run it again because we need
17:52 - to make some configurations before you
17:54 - know having them
17:57 - we'll have to make some more
17:58 - configurations in the ios folder and
18:01 - everything for our ios
18:03 - so we won't run our app now
18:06 - the next thing i want to do is go to the
18:08 - authentication tab
18:11 - i want to click on the get started
18:12 - button
18:13 - and over here i want to go to this email
18:16 - or password provider
18:18 - and
18:19 - i'm going to enable the email and
18:21 - password
18:24 - now if you know how to add any other you
18:26 - know
18:27 - sign in method like google sign-in or
18:31 - phone authentication you can just click
18:33 - over here again add new provider and do
18:35 - google facebook phone anonymous sign up
18:39 - as well github there's a lot to do with
18:41 - this
18:43 - the next thing we want to do is go to
18:44 - the firestore database
18:47 - over here we need to create a database
18:49 - and i'll start it in test mode and click
18:51 - next
18:53 - i'm going to select a location that is
18:54 - near to me you can select us europe
18:58 - anything i'm going to select south east
19:00 - asia over here and click enable our
19:04 - firestore has loaded up
19:05 - now we'll go to the rules over here and
19:08 - we're going to make some changes over
19:10 - here i'm going to remove all of this
19:12 - rules that we have created
19:14 - and i'm going to publish these rules so
19:17 - that anyone uh can read and write in
19:20 - this database
19:22 - we're not going to look at the rules in
19:23 - this tutorial if
19:25 - you want i'll mention the resource from
19:28 - where you can look it up and make a
19:29 - rules on your own
19:31 - then we're going to go in the storage
19:33 - part we're not going to use real-time
19:35 - database in this tutorial we're going to
19:37 - use firestore database
19:39 - and over here in the rules you can see
19:41 - that of storage has been set up now i'll
19:43 - go in the project overview again and i'm
19:45 - going to click on ios app first that's
19:48 - what i'm going to set up
19:50 - now i need the app bundle id for this
19:52 - project so
19:54 - you can go over here you can right click
19:56 - on the ios folder and click on open in
19:59 - xcode
20:00 - this will open your ios
20:02 - part of the you know ios build of your
20:04 - app and open it in xcode
20:09 - now you can just click over here in the
20:11 - runner and you'll find bundle identifier
20:13 - over here i'm just going to copy this
20:16 - go over here and paste it
20:19 - i'm going to call this ios
20:21 - app
20:23 - and we're going to register this app now
20:25 - we need to download this google service
20:27 - in 4. list file and
20:29 - move it to our application
20:32 - so
20:33 - let this install for me
20:35 - i'll go in the downloads
20:37 - over here and you can see
20:40 - what i'm going to do is drag this
20:43 - to our runner runner folder and make
20:46 - sure to tick this add to targets runner
20:49 - and finish
20:52 - and this should be in the runner and run
20:54 - a folder of your
20:56 - ios folder now you can just
21:00 - go back
21:01 - next we don't need to follow this step
21:04 - we can click on next again this step is
21:06 - not needed we can click on next and we
21:09 - can continue to the console
21:11 - now after having that we need to close
21:13 - this i'll close this as well
21:16 - now i'm going to migrate to my ios
21:18 - folder over here and i'm going to run
21:20 - pod install
21:22 - and i'm going to wait for this to happen
21:24 - and as you can see that our request of
21:27 - pod install has
21:28 - not worked over here this is because we
21:30 - need to go to the pod file over here we
21:32 - need to on uncomment this line
21:35 - and we have to change this 9.0 to 10.0
21:38 - and save it
21:39 - and then we need to run pod install and
21:42 - this should work for you and in case if
21:44 - it doesn't work for you i'll mention a
21:46 - stack overflow link in the description
21:48 - below generally this command for if
21:51 - you're on a macbook air m1 should work
21:54 - arc dash x86 underscore 64 pod installed
21:58 - repo update and this should work for you
22:01 - cool now that we have that we need to
22:04 - run this over here and see if it's
22:06 - working we're going to run that dart and
22:08 - flutter
22:09 - as you can see our app is loaded up and
22:11 - ready now we need to add in a firebase
22:14 - and initialize firebase in our app so
22:16 - what i'm going to do is add async tag
22:18 - over here and
22:20 - i need to avail
22:23 - firebase
22:26 - and you can see that we can import this
22:28 - by firebase core
22:31 - and we can put in firebase dot
22:35 - initialize app
22:37 - and with this our app widget will get
22:39 - initialized i'm going to
22:42 - close this and run it up again
22:46 - after this is done we need to make
22:48 - configurations for our android app now
22:50 - in the meantime i'll tell you about you
22:52 - know why we chose to use firebase in
22:55 - this tutorial this is because firebase
22:57 - has a lot of products used as you can
22:59 - see authentication firestore real-time
23:02 - database storage hosting functions
23:04 - machine learning kit
23:06 - and we can even make predictions of a
23:08 - user alpha beta testing cloud messaging
23:11 - in-app messaging there's a lot to do
23:13 - with a firebase and this is why we've
23:15 - chosen this and also one of the reasons
23:18 - is that firebase and flutter both work
23:21 - really well and in sync with each other
23:25 - also the reason is because you know
23:26 - flutter has been provided by google
23:29 - along with firebase which is by google
23:31 - itself
23:32 - so uh they work pretty well
23:35 - now you can see that we are getting uh
23:37 - an handle exception null check operator
23:39 - used on a null value this is because uh
23:42 - our firebase have has been initialized
23:45 - even before we made sure that the
23:47 - flutter widgets have come in so what we
23:49 - need to do is call in widgets flutter
23:52 - binding
23:53 - dot ensure initialized this will in make
23:57 - sure that the flutter widgets have been
23:59 - initialized now we can
24:02 - stop this process and start it again now
24:05 - let me explain you the uh
24:08 - now let me explain you
24:10 - now let me explain you the
24:13 - now let me explain you why we have
24:15 - chosen to use these uh dependencies
24:17 - firebase core firebase or firebase
24:20 - storage cloud firestore what their users
24:22 - are basically cloud firestore allows us
24:25 - to save our data data in our database in
24:28 - the
24:29 - firestore database over here where we
24:31 - are going to store user information
24:33 - posts you know all sorts of stuff
24:35 - then we have a firebase auth which is
24:38 - basically for authentication as we can
24:40 - see sign in method and allows for
24:43 - various sign-in methods
24:44 - then we have firebase core this is for
24:47 - the connection with our flutter app
24:49 - and uh lastly we have firebase storage
24:52 - this is to store images in our app
24:55 - as you can see
24:57 - now we can see that our app is loaded
24:58 - and we're not getting any error the next
25:01 - thing we want to do is you know i'll
25:02 - stop the process for ios now we're going
25:05 - to run the process for android now we
25:08 - can go back to the project overview over
25:10 - here add app
25:12 - we're going to add an android app now to
25:14 - get the android package name what you
25:16 - can do is
25:18 - close this ios first
25:20 - go to the android folder in the app
25:22 - folder and you can go to the
25:24 - build.gradle file
25:27 - and you can see
25:29 - in the default config application id and
25:32 - you can copy this
25:34 - and paste it over here i'm going to name
25:36 - this android app
25:38 - now
25:39 - we don't need to pass in a debug signing
25:41 - certificate because this is usually
25:43 - needed when we need to do phone
25:44 - authentication or google sign-in
25:47 - authentication
25:49 - so i'm not going to pass in that and
25:51 - then we're going to register our
25:54 - app then we need to download the google
25:57 - services.json file pretty similar to the
26:00 - google services dot in google services
26:03 - info.list file that we had in our you
26:05 - know
26:06 - uh ios we can take this go to our app
26:10 - over here now make sure to put this in
26:13 - the app folder and not the src folder
26:16 - take this
26:17 - and
26:19 - drag it to your app folder over here
26:23 - cool now we have the google services
26:26 - info this basically contains all the
26:28 - information in our app like the url of
26:30 - our repository all the config stuff
26:31 - basically
26:33 - then we can click on next now as you can
26:35 - see we need to add this in our project
26:37 - build.gradle file so we can go over here
26:41 - and instead of you know manually just
26:43 - finding a file what you can do is click
26:45 - command p and type the name of the file
26:48 - you can see android app build.gradle but
26:50 - we need the project file for now we can
26:53 - just click over here
26:54 - and we need to add this in the
26:56 - dependencies so i'm just going to add
26:58 - this over here
26:59 - cool now we have this setup for the
27:01 - build.gradle file
27:03 - now we need to go to the app level
27:05 - build.gradle file
27:07 - so we can go
27:08 - in our app build gradle file
27:11 - and you can find this in the app folder
27:12 - if you want to do it
27:14 - folder wise
27:16 - now
27:18 - we can
27:19 - copy this line from here apply
27:22 - plug-in com google this line over here
27:25 - and we need to paste it down over here
27:29 - cool now i'm going to
27:31 - take all of this from here cancel it and
27:34 - i'm going to the main.dart file
27:36 - and you're going to click on next and
27:38 - continue to the console
27:40 - i'll take this opportunity now to tell
27:42 - you that uh
27:43 - i'll go to the android manifest.xml file
27:46 - over here now make sure that this
27:48 - package over here is not
27:51 - com.example.instagram flutter if you
27:52 - need to upload it to your play store
27:55 - because com.example files are not
27:58 - allowed
27:59 - you need to replace example with
28:01 - anything since i'm not uploading to play
28:03 - store i've given it the name of example
28:06 - but you need to change it
28:08 - i'll mention a link in the description
28:10 - uh from where you can follow and change
28:12 - the name of this package in your app
28:14 - successfully cool this is a setup now
28:17 - let me run our app now you can see that
28:19 - we've
28:20 - gotten an error over here the reason is
28:23 - over here that flutter has given the
28:25 - minimum sdk version as flutter dot
28:27 - minimum sdk version we need to replace
28:30 - this with
28:32 - minimum sdk version 19
28:34 - and
28:35 - this still won't run since we need to
28:37 - make another configuration which is we
28:39 - need to enable multi-decks
28:44 - and we can do this by multitext enabled
28:46 - true
28:47 - and we can save this and we need to
28:50 - re-run our app again welcome back our
28:52 - app has loaded up and it's not giving us
28:55 - any error and if we see over here it
28:58 - shows this is mobile which is a pretty
29:00 - good thing our android setup is done as
29:02 - well the next setup we need to do now is
29:04 - for the web
29:06 - what i'm going to do is run like run
29:09 - this on our web as well
29:14 - and we can just run it using flutter run
29:17 - dash d
29:18 - chrome we have looked at it before our
29:21 - web has loaded up but the we are getting
29:23 - some errors over here now if we inspect
29:26 - the errors over here it's saying
29:27 - firebase options cannot be null when
29:29 - creating the default app
29:31 - basically we have initialized this with
29:33 - this we have initialized for our android
29:36 - and ios apps but not for our web app our
29:39 - web apps usually require
29:41 - an options tag over here
29:43 - and which
29:44 - which is of the type firebase options we
29:47 - have not done that
29:48 - so if we put in options over here and
29:51 - put in firebase options
29:53 - you'll think that this would work but
29:55 - that's not the case because then our
29:57 - mobile apps would fail running so
29:59 - instead what we need to do is we need to
30:01 - run this when it's in the mobile stage
30:05 - and other thing when it's on the web
30:08 - stage so what we can do is put an if
30:10 - condition over here if and to check
30:13 - which platform we are on we can just do
30:15 - if k is web
30:19 - and
30:20 - if it's web
30:21 - we need to do
30:22 - other part of the you know initializing
30:25 - of our app and if it's mobile we need to
30:27 - do this
30:28 - so i'm going to paste this in both the
30:30 - places and we need to pass an options
30:33 - parameter over here now our options is
30:35 - going to be of the type firebase options
30:38 - and
30:38 - you need to pass in some stuff over here
30:41 - but before doing that we need to add an
30:42 - app over here which is our web app
30:46 - we are going to name it web app
30:49 - we are not going to set up firebase
30:50 - hosting for this project we are going to
30:52 - host it on a different server a
30:54 - different hosting platform not firebase
30:56 - but you can surely check it out and
30:58 - click on learn more if you want if you
31:00 - are interested now we can register our
31:02 - app over here now we need to add this
31:04 - firebase sdk we don't need all of this
31:07 - stuff over here so i can just you know
31:10 - copy all of this stuff
31:13 - i'll copy this api key don't
31:16 - try to you know copy all of this because
31:18 - i'm going to delete this project as soon
31:20 - as this app gets over
31:23 - then we need to pass in the app id this
31:26 - is our app id
31:32 - then we need to pass in messenger
31:34 - messaging sender id
31:41 - and we need to pass in a project id
31:50 - and i want to format this document after
31:53 - doing so
31:55 - i'll again put a comma so that i can
31:56 - format this okay now we have this but we
32:00 - need to pass in an extra parameter
32:02 - firebase options has a lot of parameters
32:04 - but we need to pass in only one more
32:06 - parameter which is storage bucket since
32:09 - we're going to use firebase storage
32:11 - uh else it will give you error in the
32:13 - future
32:14 - then we need to pass in this
32:18 - storage bucket url over here
32:20 - and we can paste it over here
32:24 - and we need to pass in const for
32:26 - firebase options and we can pass in now
32:29 - we will try to run our app i'm going to
32:31 - pass it put in control c and if you're
32:34 - in windows command c and exit this
32:36 - process i'm going to clear of this so
32:38 - that we can see it well and again run
32:40 - the command you can just click the up
32:43 - arrow command
32:45 - two times and you can see our command
32:47 - showing up we can just press enter after
32:49 - this
32:50 - now it shows that our web version has
32:52 - loaded we go over here and we can see
32:55 - that our web version is loaded
32:57 - right
32:58 - now this is the setup for firebase now
33:00 - the next thing we need to do is create
33:02 - the login screen ui and the sign up
33:04 - scene ui let's do that
33:06 - so to do that first let me create a
33:08 - screens folder where our login screens
33:10 - and all the other screens are going to
33:12 - rest so i'm going to create login screen
33:15 - dot dot this is the naming convention i
33:18 - typically follow uh the name of the
33:20 - first thing then an underscore then
33:22 - screen you can follow anything you want
33:25 - like
33:27 - then we'll just import material package
33:30 - then we'll make it a stateful widget
33:33 - right now only because you know
33:35 - we know uh this is going to have text
33:37 - editing controller we're going to call
33:39 - and set state etc etc so yeah we'll just
33:43 - create a login screen state right now
33:46 - now we'll return a scaffold over here
33:48 - and we'll return a body of let's say
33:52 - text
33:53 - and we'll return for now
33:56 - from
33:57 - login
33:58 - screen
34:00 - right
34:01 - now
34:02 - i'll save it
34:04 - and we'll go in the main.dart file we'll
34:06 - comment this out temporarily
34:09 - and i'm going to uh
34:11 - return a login screen so that you know
34:13 - we can actually see what's going on
34:17 - now we should be able to see from login
34:20 - screen
34:21 - now i'll remove this text from here for
34:24 - now
34:25 - and
34:26 - i want to show you how our app is going
34:29 - to be structured and how it should look
34:31 - so first of all our app should not you
34:33 - know start from uh here
34:36 - it should start from here
34:39 - and then we need to you know uh center
34:42 - all our elements because we need them in
34:44 - the centered position over here we are
34:46 - going to have a logo
34:48 - right
34:49 - then we going to have our text input
34:52 - field over here
34:54 - which will be email
34:56 - then we'll have a password field over
34:58 - here and then a button
35:01 - right this is our layout this is what
35:03 - our layout is going to look like
35:06 - so
35:06 - what how can we make this type of layout
35:09 - so
35:10 - first of all we don't need to start from
35:12 - here so we'll call a safe area over here
35:15 - so that we can avoid this
35:16 - then we are going to have a column
35:20 - right now in the column we are going to
35:21 - have uh an image an svg image actually
35:26 - then we are going to have two you know
35:28 - text field input and after that we are
35:31 - going to have a text button seems very
35:34 - uh easy right
35:36 - let's do that so we are back in our
35:38 - login screen again now i'm going to
35:41 - take this body and i'm going to return a
35:43 - safe area as we discussed previously
35:47 - and our safe area is going to have a
35:49 - child and a child is going to have a
35:51 - container
35:53 - buy a container because we need to add
35:55 - some padding
35:57 - and we need to
35:58 - set the width of our app
36:01 - so
36:02 - what is the padding going to be
36:04 - the padding is going to be from this
36:07 - side and this side both
36:09 - right so that our text field inputs can
36:11 - be in this range and not
36:14 - take the full width of the app
36:17 - so we're going to have a padding of edge
36:18 - inserts dot
36:21 - symmetric actually because we want it
36:23 - from horizontal side
36:25 - so we can do symmetric and we're going
36:27 - to pass in a horizontal value of 32 you
36:30 - can try and test values on your own and
36:33 - see which suits your preference
36:36 - then after that we're going to have a
36:38 - width and the width is going to be the
36:40 - full width of this device so we are
36:42 - going to take in double
36:44 - dot
36:45 - infinity
36:47 - after that we need a child and the child
36:50 - is going to have column as we discussed
36:54 - now this column has the last children
36:56 - and the children
36:58 - will be a
37:00 - text field
37:02 - input for
37:03 - email
37:06 - text field input for password
37:11 - and above that we are going to first
37:13 - have an
37:15 - svg image
37:18 - and over here lastly we are going to
37:20 - have a button for login
37:23 - and the last thing
37:24 - i forgot to add was
37:27 - you know transitioning to sign up like
37:30 - you know
37:31 - having something like
37:33 - do you remember your password or
37:35 - something like that
37:36 - right now we also said that we want all
37:39 - of our contents to be centered so what
37:41 - we can do over here is we can do
37:45 - cross access alignment not mean access
37:47 - because we don't want it to be centered
37:50 - like this we want it to be centered like
37:52 - this
37:53 - in a row format
37:55 - right so we can do cross axis alignment
37:58 - cross axis alignment
38:00 - dot
38:00 - center
38:04 - after that we need to return an svg
38:07 - image
38:08 - but uh we can't directly return an svg
38:10 - image and before that we need to get the
38:12 - svg image right i'm going to create an
38:15 - assets folder over here and we're not
38:17 - going to have any images as such so i'm
38:20 - just going to keep it assets for now if
38:22 - you had like fonts sorry
38:27 - we don't have
38:29 - we don't have fonts for now so i'm just
38:31 - going to create an assets folder but if
38:33 - you had fonts we're going to create an
38:35 - images folder and a fonts folder and
38:38 - then you know segregate both of them
38:40 - which is a good way now you can go on
38:42 - this link it will be mentioned in the
38:44 - description and you can download this
38:47 - you know
38:48 - this image from your
38:50 - you can just right click and you can
38:52 - download the image
38:54 - going there you can go in your finder
38:58 - downloads
38:59 - you will get this ic underscore
39:01 - instagram.svg
39:03 - you can drag it to your assets folder
39:06 - you have that
39:07 - now we need to display an svg image for
39:10 - to display an svg image we are going to
39:12 - use a package flutter package named as
39:18 - flutter
39:19 - underscore svg
39:22 - i'll mention the readme of this package
39:25 - in the description below make sure to
39:27 - check it out and after that is done we
39:29 - can do svg picture
39:33 - dot asset
39:34 - and make sure to import
39:36 - flutter svg over here and not svg.dart
39:40 - over here
39:41 - right now our asset is going to be
39:44 - assets
39:45 - slash
39:46 - ic underscore instagram
39:48 - dot svg
39:50 - and
39:51 - our color is going to be a white color
39:53 - which we have defined in colors.dart as
39:56 - primary color
39:57 - and a height of 64.
40:01 - cool
40:02 - now we'll get an error if we just save
40:05 - this much because we haven't told
40:07 - flutter that this assets folder stays
40:09 - here so we can go in your spec dot yaml
40:12 - file scroll down and you can find assets
40:16 - tag over here you can uncomment all of
40:18 - this
40:19 - and paste this over here and save it
40:23 - you should get that
40:24 - now you can save this
40:26 - stop all your app processes
40:29 - and rebuild it
40:31 - we should get a good looking
40:34 - instagram svg file over here right
40:39 - in the meantime
40:40 - we should you know
40:42 - have a text field input
40:45 - but before that i need to do some
40:47 - spacing so that it doesn't directly
40:49 - stick with our app you know
40:51 - so what i'm going to do is
40:53 - create a sized box
40:56 - with a height of 64.
40:59 - there's no need to use media query over
41:01 - here
41:03 - then
41:04 - actually you can but i don't feel any
41:07 - use of using it
41:09 - then the next thing you want to do is
41:11 - create a text for your field input for
41:13 - password
41:15 - and an email right i'll move this
41:17 - comment down
41:19 - so since we are going to be using text
41:21 - field input here here and in our sign up
41:24 - screens
41:25 - what we can do is
41:27 - create
41:28 - a widgets folder over here
41:30 - and we are going to create a text
41:33 - underscore field underscore input
41:36 - dot dart
41:37 - with this we can reuse the for this
41:39 - widget everywhere in our app
41:42 - so we will import material package
41:45 - we are going to use a stateless widget
41:47 - over here
41:48 - and we're going to call it text
41:50 - field
41:51 - input
41:54 - and we're going to return a text field
41:57 - right now our text field
42:00 - is going to have some properties and it
42:02 - would need a controller which we look
42:05 - after in a while
42:06 - but we need a decoration as well and our
42:09 - decoration is going to be of the type
42:11 - input decoration
42:14 - and we're going to add a hint text which
42:16 - we these values we are going to accept
42:18 - from the constructor so that user can
42:20 - put in while using text field input
42:22 - class over here
42:24 - right for now it's going to be empty
42:27 - then we need to pass in a border and a
42:29 - border is going to be of the type
42:32 - outline
42:34 - input border
42:38 - and it will have a border side so we're
42:40 - going to do divider dot create border
42:43 - side
42:44 - and we'll pass in the context we need to
42:46 - pass in focus border side over here
42:49 - and it's going to be the same as this
42:51 - border over here so what i'm going to do
42:53 - is take this from here
42:55 - i'm going to
42:56 - create a final input border
43:01 - and going to paste it over here so that
43:03 - you know we can easily
43:05 - put all of them over here and we don't
43:07 - need to change each and every time we
43:09 - need to change the settings basically
43:16 - then we also need an enabled border and
43:18 - it will be of input border
43:21 - right now we are going to set filled to
43:23 - true
43:25 - and
43:26 - a content padding
43:28 - of
43:30 - edge insets dot all and 8
43:35 - now the keyboard is going to have some
43:37 - type and an obscure text which is you
43:40 - know a dot dot dot format
43:43 - when basically whatever text that shows
43:45 - up when you use passwords in your app
43:49 - right now we'll accept all of these uh
43:52 - missing values from the constructor so
43:54 - what we have is
43:57 - final
43:58 - text editing controller
44:01 - text editing controller
44:04 - a final boolean value which is s pass
44:08 - this is to check if uh the value that
44:11 - you're going to pass is password or not
44:13 - so that we can hide this obscure text on
44:18 - then we are going to have a hint text
44:23 - and then we are going to have a text
44:25 - input type
44:29 - you know text input type because well do
44:31 - we need to show the
44:33 - user
44:35 - text input type because we need to show
44:38 - uh the keyboard type as you know is it
44:41 - going to be
44:43 - username
44:44 - or you know is it showing going to show
44:47 - email addresses
44:48 - or something like that
44:50 - right now we're going to pass in the
44:52 - controllers
44:53 - but before that let me accept all of
44:56 - these values real quick
45:22 - right i have imported all of these over
45:24 - here
45:28 - right i've imported
45:29 - all of
45:32 - right i have expected
45:35 - right i have accepted all of these
45:36 - values in the constructor now i'm going
45:38 - to pass in the controller text editing
45:40 - controller
45:42 - a hint text
45:44 - a keyboard type of text input type
45:48 - and obscure text of is password
45:52 - and
45:54 - usually our
45:56 - obscure text is going to be uh for false
46:00 - and only one time it's going to be true
46:02 - when our text editing controller is
46:04 - going to be a password so what i'm going
46:07 - to do is
46:08 - over here let me first format this
46:10 - document
46:12 - and over here i'm going to set a preset
46:14 - value of false
46:16 - so that if we don't uh and we're going
46:19 - to remove this
46:20 - now
46:21 - even if the user doesn't enter his
46:23 - password we will be able to you know
46:27 - take this default value of false
46:30 - now we can go over here and first of all
46:32 - let's see our app
46:34 - and you can see instagram is showing up
46:36 - real good
46:37 - now you can see it's still at the top so
46:40 - to do that uh to fix that what we can do
46:43 - is
46:46 - we're going to create a
46:48 - i'm going to take the flexible widget
46:50 - i'm going to have the child as a
46:52 - container which is basically nothing and
46:55 - you know i just want
46:57 - to
46:57 - create some spacing
46:59 - from the top so i can just mark flex as
47:02 - one and format this document and see it
47:05 - has gone down
47:07 - i can do flex too right now
47:10 - this will change you know as and when
47:13 - our stuff keeps on coming like the text
47:15 - field input password you know all of
47:17 - that stuff
47:19 - so let's add that and in the final if
47:21 - you are not satisfied we can always
47:23 - change the value
47:24 - okay
47:25 - now we can just have text field
47:28 - input make sure to type in input or else
47:31 - it will accept text field which flutter
47:33 - provides us
47:34 - then
47:36 - we are going to add a hint text of enter
47:39 - your email
47:42 - we are going to add a text input type of
47:45 - text input type dot email address
47:49 - and a text editing controller
47:52 - now we can create one so we can go on
47:55 - the top final
47:56 - text editing
47:58 - controller
48:01 - and we'll name it email
48:04 - controller
48:05 - is equal to text
48:07 - editing
48:07 - [Music]
48:09 - controller
48:11 - and i'm going to copy this and paste it
48:16 - and name it as password controller
48:20 - and we have to create an image uh sorry
48:23 - not an instance
48:26 - so we have to create a dispose over here
48:28 - and we need to clear off these
48:30 - controllers as soon as the widgets gets
48:33 - disposed right so we can do email
48:35 - controller dot dispose
48:38 - and
48:39 - password controller dot dispos don't
48:41 - forget to do that it's very important
48:44 - cool now we can just pass an email
48:46 - controller and we can restart our app
48:49 - and see our email is showing up
48:52 - right
48:53 - now after this we need to create
48:55 - something similar for password
48:58 - enter your password over here i forgot
49:01 - to put a comma that's why the error we
49:03 - can format the document
49:05 - and over here our text input type is
49:08 - going to be of the text
49:10 - and
49:12 - we need to add in one more
49:14 - property which is password but i want to
49:16 - show you how
49:18 - this looks without its password
49:20 - right now if i type something you can
49:22 - see something popping up and we have the
49:25 - same values because our email uh our
49:28 - text editing controllers are both email
49:30 - we'll change that
49:32 - and you can see the value over here is
49:34 - shown up but we want it in a dot format
49:36 - right this is what obscure text does
49:40 - so what we can do is
49:42 - take is pass and
49:44 - change it to true over here we can pass
49:47 - in password controller
49:52 - now we have that and if we do that we
49:54 - can see our format coming in
49:56 - now these both are stuck together i
49:58 - don't want that as well
49:59 - so what i'm going to do is create a
50:03 - sized box
50:05 - of height let's say 24. you can always
50:08 - play around with values as i mentioned
50:09 - before
50:11 - and you can see we're getting good space
50:14 - i will take this value
50:17 - and paste it over here as well
50:22 - cool
50:23 - now we need to create a
50:26 - button basically
50:28 - but we are not going to create a button
50:30 - we are going to create a container you
50:32 - can always use a material button or
50:35 - elevated button text button anything but
50:38 - i prefer this way for now because it
50:40 - will be easier for me to create like
50:43 - this
50:45 - now our child is going to be of constant
50:48 - text
50:50 - and it will have the time
50:53 - login
50:55 - and after that we need to pass in
50:57 - something to our
50:59 - container
51:00 - so
51:02 - the width of our container is going to
51:04 - be the maximum possible value then it's
51:08 - going to be aligned in the center so
51:10 - we'll do alignment dot center
51:17 - then
51:18 - we need to add some padding and where do
51:21 - we need to add the padding you know our
51:23 - button should be uh should have a little
51:26 - spacing from the text
51:28 - right
51:28 - so we can do padding of const
51:32 - edge
51:34 - inserts i'm going to do symmetric
51:38 - and we can do vertical
51:40 - 12
51:43 - after that we're going to add some
51:45 - decoration and we want our button to not
51:47 - look like this we want it to look
51:50 - slightly rounded from the edges
51:52 - so we're going to add in a const shape
51:55 - decoration
51:57 - and the shape is going to be a rounded
52:00 - rectangle
52:03 - border
52:04 - and
52:05 - a border is going to be of the type
52:06 - border radius border radius
52:09 - dot all
52:12 - radius dot circular
52:14 - 4.
52:19 - and i'm going to format this document
52:21 - over here
52:22 - now let's see how our app looks
52:25 - doesn't look that good
52:26 - but
52:27 - now let me just add a color and you'll
52:30 - see the difference
52:32 - not over here
52:34 - we need to pass in a color over here
52:37 - and the color is going to be a blue
52:39 - color which is in our colors dot dot
52:41 - file
52:42 - now if we save this we can see the blue
52:44 - color showing up critical
52:47 - right
52:48 - now i'll again have a sized box over
52:51 - here
52:54 - of
52:56 - half the size of normal so we can do 5
52:58 - 12.
53:04 - after that we'll again have our flexible
53:06 - over here because i need to leave some
53:08 - space
53:10 - so i can take this
53:13 - and paste it down
53:17 - cool
53:18 - after that we need a row
53:20 - buy a row because we need to display
53:23 - side by side right let me grab my marker
53:26 - so suppose this is the bottom of our
53:29 - widget so we need to display a text do
53:31 - you have an account
53:33 - and then we need to
53:34 - pass in another text which is
53:37 - login
53:38 - so we need both of them in the same
53:39 - alignment but we want them to have
53:43 - different textiles that's why we're
53:44 - creating a row and two different texts
53:47 - so
53:48 - let's go back
53:49 - and
53:51 - over here we're going to have
53:54 - a row
53:56 - and ro is going to have a children and
53:59 - again it's going to be in the center so
54:01 - we're going to have main access
54:02 - alignment dot center
54:05 - and our children uh is going to be
54:10 - a container
54:15 - of child
54:17 - text
54:20 - don't
54:21 - you
54:23 - don't have an account after that we're
54:26 - going to add some padding and what is
54:28 - our padding going to be
54:29 - well
54:31 - it's going to be
54:32 - from vertical
54:34 - 8
54:35 - format the document
54:39 - right
54:40 - now our text is going to be a constant
54:42 - as well
54:43 - now we can again grab this text from
54:45 - here
54:46 - and we can paste it
54:48 - and we're going to say
54:52 - sign
54:53 - up now our text styles are going to be
54:55 - different as i said mentioned as i
54:56 - mentioned before
54:58 - so we are going to have a text style
55:01 - and we're going to have a font weight
55:03 - and the font weight is going to be bold
55:08 - now let's try to run our app
55:10 - and see
55:12 - it
55:13 - fills up pretty well
55:14 - these pieces are because of the
55:17 - container flexible we are going we are
55:20 - using
55:21 - this thing over here looks pretty cool
55:23 - now the problem is that uh first of all
55:26 - this is not clickable over here
55:30 - this is not clickable and this is not
55:32 - clickable so what we can do is
55:36 - wrap with
55:37 - a widget called inkwell gesture detector
55:40 - what we are going to use for this
55:41 - container over here
55:46 - gesture detector and this will have on
55:50 - tap
55:50 - again cool now we have a login sign a
55:53 - login uil now let's create a signup ui
55:55 - quickly
55:56 - so we can do sign up screen
56:00 - dot dot
56:02 - right
56:04 - now we can import material package from
56:06 - here
56:08 - and i'm basically going to copy this
56:10 - whole thing from here
56:13 - and paste it over here
56:16 - we're going to import svg
56:18 - flutter package
56:20 - primary color
56:22 - a text field input
56:25 - and this is pretty much it
56:27 - now
56:28 - we even need to create
56:31 - some more controllers and some more text
56:33 - fields so we can just paste them over
56:34 - here and what is their name going to be
56:38 - well it's
56:40 - bio controller
56:41 - which will help us to add a bio
56:44 - and a username controller
56:48 - we can take this controller and dispose
56:50 - them
56:52 - and take the username controller and
56:54 - dispose them
56:57 - cool
56:58 - now
56:59 - we can go to the bottom over here
57:04 - and
57:05 - we are going to add some more
57:09 - text fields
57:11 - so
57:12 - we can take this from your
57:14 - entire sorry i'll take this enter your
57:16 - email because it doesn't have you know
57:18 - the text input you know is pass over
57:21 - here sorry
57:24 - then
57:26 - we're going to actually have this above
57:28 - this
57:29 - which will be a text
57:31 - field input for username
57:34 - and we're going to paste it it's going
57:36 - to be of the type
57:38 - text and it will take in username
57:41 - controller
57:42 - and where we will ask enter your
57:44 - username
57:46 - after that you're going to again have
57:49 - a const sized box
57:54 - and it will be of the size 24 then you
57:56 - can again copy this
57:59 - and
58:00 - go down
58:01 - below the password
58:03 - and paste it over here enter your bio
58:06 - and we are going to have a bio
58:08 - controller
58:11 - cool now let's save it and to see the
58:13 - output we'll replace login screen over
58:15 - here with
58:16 - okay wait let me first rename log sign
58:20 - up screen from here
58:23 - because we had copied it from the login
58:25 - screen so we can do sign of screen
58:29 - and
58:31 - rename all of this stuff over here
58:47 - cool now we can go over here and import
58:49 - sign up
58:50 - screen
58:52 - and paste it
58:54 - now we have all of this stuff but you
58:57 - know sign up in sign up we also need a
58:59 - circle avatar you know a widget that is
59:02 - circular and we can
59:05 - accept our file from our gallery
59:08 - so what we can do is go on the top over
59:11 - here somewhere
59:13 - and over here we are going to create a
59:15 - field input
59:17 - not a field input so we are going to
59:19 - have
59:20 - a circular
59:22 - widget
59:24 - to accept
59:26 - and show our
59:29 - selected file
59:33 - so what we can create is something known
59:35 - as stack so that we can
59:38 - place a button and a circle avatar on
59:41 - top of each other
59:43 - something like this
59:48 - sorry for my pathetic drawing
59:51 - right
59:52 - so to do that we can use stack and we'll
59:55 - understand we'll have children because
59:58 - well
60:01 - and we're going to have a circle avatar
60:04 - and a circle avatar is going to have a
60:06 - radius of 64
60:09 - and a background image
60:14 - we need to add some background image for
60:16 - now
60:17 - so we can just grab some random network
60:20 - image
60:21 - so we can just go over here and type
60:24 - unsplash.com
60:26 - take some random image
60:28 - copy the image address and paste it over
60:31 - here
60:32 - this is just for now because
60:34 - we're going to view something else while
60:36 - accepting it from the user
60:38 - and you can see it's showing
60:41 - pretty good
60:42 - now
60:44 - we need to even add a sized box over
60:47 - here
60:48 - first
60:50 - now let's see we have some spacing which
60:52 - is pretty good now we need to add an
60:55 - icon button
60:58 - where do we want to add it somewhere
61:00 - over here so that user can select it so
61:03 - to do that we are going to use make use
61:05 - of the positioned widget
61:07 - and the position widget will have a
61:09 - child of icon button
61:10 - [Music]
61:11 - and it will have on pressed
61:14 - and for now let's keep it null
61:16 - and empty bracket not null
61:20 - and
61:21 - we are going to have an icon
61:23 - of
61:24 - const icon
61:27 - icons dot add a photo
61:34 - right
61:35 - now we can just format this document
61:39 - we're getting this error because we're
61:40 - missing a parenthesis
61:49 - cool now we can keep this circle avatar
61:52 - constant for some time so that doesn't
61:54 - give warning we'll have to change it
61:55 - later on
61:56 - we can refresh our app and we'll see our
61:59 - position our widget is showing up over
62:01 - here but we don't want it there right so
62:03 - we can just make use of the bottom tag
62:05 - over here in the position we're going to
62:07 - give it minus 10
62:09 - and from left
62:11 - we're going to give it a tag of 80. all
62:13 - of these values are tried and tested you
62:15 - know trial and error
62:17 - that's why i've got it right
62:20 - so you can just you know have this over
62:23 - here
62:24 - you can even change the color of the
62:25 - icon if you want over here but i'm not
62:27 - going to do that i'm satisfied with
62:29 - white
62:30 - now we have created signup ui now let's
62:33 - enter the authentication part so the
62:35 - next thing we want to do is whenever the
62:36 - user clicks on the sign up button we
62:39 - need to make sure that the user
62:42 - is created in our firebase
62:43 - authentication tab over here and the
62:45 - user data gets stored in the firebase
62:47 - database as well
62:49 - so how can we do that
62:52 - to do that let's let's just you know
62:54 - create a folder called resources so that
62:57 - our logic is separated from our ui
63:00 - right over here we can create one file
63:02 - named as auth underscore methods dot
63:05 - dart
63:07 - we can
63:08 - close all the remaining files and over
63:10 - here
63:11 - let's just import
63:13 - material
63:15 - dot over here
63:17 - and we'll create a class over here a
63:19 - simple class
63:21 - which will have multiple functions
63:24 - and we are going to have
63:26 - final
63:28 - firebase auth this class is provided by
63:32 - firebase auth dot dart the package that
63:35 - we had over here
63:38 - firebase or
63:40 - so uh we need to create an instance of
63:43 - this firebase auth basically so to do
63:47 - that we need we can just do firebase
63:49 - auth
63:50 - dot instance
63:52 - with this we get an instance of the
63:54 - firebase auth class so we can use this
63:57 - and call multiple functions on it we
63:59 - will see it in some time
64:01 - so the first function we want to create
64:03 - is to sign up the user right so
64:08 - let's just create a function sign up
64:10 - user
64:13 - so over here we are going to receive
64:15 - multiple arguments from wherever we call
64:18 - the signup user method
64:20 - and what do we need from the user
64:22 - we will require a string email
64:27 - we'll require a password
64:34 - we'll required
64:36 - we will require a username
64:42 - uh bio
64:44 - and lastly we would require a file over
64:47 - here
64:48 - now
64:49 - the file type will be
64:51 - a uint8 list if you have known about
64:55 - this it's
64:56 - this a list
64:58 - file that we'll have this type of file
65:01 - we'll see in future why we're using this
65:03 - and not a file file over here
65:06 - right
65:07 - which might be the usual way of carrying
65:09 - out things but we'll see why we need to
65:11 - use you in place
65:13 - uh later on in the course
65:16 - right now over here the return type of
65:18 - this is going to be of the type future
65:21 - string
65:22 - bias is going to be future because all
65:25 - the calls that we make to the firebase
65:27 - are going to be asynchronous so we want
65:29 - our function to be asynchronous so that
65:31 - means that the whole function
65:33 - functions return type changes to future
65:37 - and uh it will be of type string so that
65:40 - we tell the user of uh you know whether
65:44 - our uh
65:45 - signup has been successful to our
65:47 - firebase auth or it has
65:50 - some error right
65:52 - now to do that what we're going to do is
65:56 - we're going to create a variable called
65:57 - res which is a result basically and
66:00 - we're going to save it with a option of
66:02 - say some error occurred
66:06 - now we're going to
66:07 - put a try catch block
66:12 - and whenever we get any error what we're
66:16 - going to do is we are going to put res
66:19 - equal to
66:21 - error dot to string
66:26 - we will have to take this error whatever
66:28 - error we get
66:30 - right
66:31 - and finally we will have to return this
66:33 - res
66:35 - now over here also we need to update the
66:37 - value of rest but we'll do that in a
66:39 - while
66:40 - first of all we need to do something
66:43 - over here we first need to make some
66:45 - validations right
66:47 - if we need to check that all of these
66:49 - are not null or empty you know
66:52 - if the user has entered
66:54 - a blank field and then submitted sign up
66:56 - we don't want to do anything we don't
66:58 - want to register that user right so
67:01 - we'll check that if email dot is
67:04 - not empty
67:07 - or or and i'm going to do the same for
67:09 - everything so i'll just copy this from
67:11 - here
67:13 - and paste it
67:16 - so we'll do password
67:19 - username
67:22 - bio
67:24 - and for file it's not going to be is not
67:27 - empty
67:28 - it's we have to check
67:30 - if the file is not equal to null
67:34 - now it will never be equal to null
67:36 - because well we have marked this as
67:38 - required
67:39 - but
67:40 - it's a kind of good to make this
67:42 - practice over here
67:45 - now we need to register the user
67:47 - how can we do that with firebase right
67:50 - to do that uh we can just use this auth
67:54 - instance that we have over here
67:56 - and if we put full stop over here we can
67:58 - see multiple methods that auth allows us
68:01 - you know confirm password reset create
68:04 - user with email and password is what we
68:06 - want but you can just check out multiple
68:08 - stuff that can be done sign in with
68:10 - credential sign on with custom token
68:14 - sign in with email and password is what
68:16 - we're going to use for login
68:18 - sign in with email link you know all
68:20 - sorts of stuff can be done over here
68:22 - create user with email and password
68:26 - now if you go over here you can see that
68:28 - it will return a future user credential
68:31 - so naturally we need to await this so
68:34 - that we get a user credential
68:36 - and we can just save this user
68:38 - credential over here
68:42 - right
68:43 - now we have cred over here
68:45 - now
68:46 - cred will give us a lot of details of
68:48 - our a user like
68:51 - you know
68:53 - cred dot it will give us the user
68:56 - and user will have multiple things like
68:59 - uid
69:00 - email
69:01 - you know but we are only interested in
69:04 - the uid of the person display name will
69:07 - most likely be null if you're not using
69:09 - you know
69:10 - uh
69:11 - google authentication because you're not
69:13 - setting display name to anything over
69:15 - here
69:16 - right
69:17 - with this
69:18 - we can create a user uh
69:21 - in our firebase authentication
69:24 - but now that's not enough right we need
69:27 - to even store it in a firebase database
69:30 - because we need to store all the excess
69:32 - stuff like username bio file
69:35 - email and password gets stored in the
69:37 - authentication tab
69:38 - and we can only see email by the way the
69:41 - password is not seen to us as well
69:44 - so uh
69:45 - email and password can be uh we can just
69:48 - use them to do authentication
69:51 - but what about the rest of the stuff
69:52 - that we want to save
69:54 - we do that in the firestore database and
69:56 - we're going to do that now with this
69:58 - we're going to add user to our database
70:03 - again we can here we call final firebase
70:08 - firestore
70:10 - now firebase firestore is given to us by
70:12 - cloud firestore this is the package that
70:14 - we have
70:15 - installed in our prospect.aml file
70:17 - and over here we are going to do
70:19 - firestore
70:20 - and we can just call
70:23 - firebase
70:25 - firestore dot instance
70:27 - not inspect
70:29 - instance
70:30 - now we have the firestore instance
70:33 - so we can just use firestore and it has
70:36 - multiple collections
70:38 - so let me show you the structure of
70:40 - firestore so you can have a collection
70:44 - so my collections is suppose users
70:47 - so with this users i can create a
70:49 - collection
70:50 - suppose uh it's a list of users that i
70:53 - want
70:54 - so it will be a list of users now every
70:57 - user will have an auto generated id or a
71:00 - custom id whatever we want to set in our
71:02 - case we are going to set it to the uid
71:04 - of the user that i showed it to you
71:07 - right
71:08 - if we do print
71:10 - cred
71:12 - dot user
71:14 - dot uid
71:15 - we'll get the user id
71:17 - so we are going to
71:19 - not generate a document auto id
71:22 - but we're going to set the user id to
71:24 - this document id over here and then we
71:27 - will have multiple fields like username
71:31 - to something
71:32 - you know like rivan
71:35 - then we'll have bio to
71:38 - flutter developer let's say
71:42 - then we'll have email to save and the
71:44 - email will be
71:47 - xyz at the gmail.com
71:51 - and a uid that we'll generate over here
71:54 - whatever uid we set over here
71:57 - that will be generated over here
72:00 - and we can just pass in over here as
72:01 - well now let me save it to you and show
72:03 - the structure of this
72:05 - so we have our users
72:06 - we have a document id over here note
72:09 - that the document id for different users
72:12 - will be different else it will override
72:14 - the same collection over here and it
72:16 - will cause a problem to us and then we
72:19 - have a data over here like bio uid which
72:22 - i misspelled then email then username
72:25 - you can even have a sub collection in a
72:27 - collection like you know again you can
72:29 - just type
72:30 - let's say
72:32 - pets
72:33 - and next
72:35 - and now you can type pet
72:38 - one
72:40 - name can be dog
72:43 - and you can save over here
72:45 - and you can see we have another
72:47 - collection in our users collection pet
72:50 - one and we can save it over here
72:53 - the this is the layout of our firebase
72:55 - app
72:56 - and we'll see how we can store this in
72:58 - our database
72:59 - so let me delete this collec collection
73:01 - first
73:03 - i'll delete this
73:06 - cool
73:07 - now we can just do firestore dot
73:09 - collection this path over here that we
73:11 - had
73:12 - and
73:14 - we want to save it to users
73:17 - then we'll have a doc and as i mentioned
73:20 - we can just do cred
73:22 - dot user dot uid make sure to put an
73:25 - exclamation mark over here because user
73:27 - can be returned as null you can see over
73:29 - here
73:30 - user can be returned as null so we need
73:32 - to pass an exclamation mark so that we
73:35 - can access the uid over here
73:37 - and then we can just put
73:39 - set
73:40 - so we nee so
73:42 - what we're telling to firebase firestore
73:45 - is we need to create a collection users
73:47 - if it doesn't already exist
73:49 - then we need to
73:51 - make this document
73:52 - if it's not already there and then set
73:55 - this data suppose this collection exists
73:58 - and this uid also exists so it will
74:00 - basically overwrite the existing data
74:03 - and will show it to us so what do we
74:07 - want over here
74:08 - well
74:09 - username
74:12 - and we can pass an username over here
74:16 - uid
74:19 - i'll have to
74:20 - do this
74:22 - and iuid will be this only
74:25 - then an email
74:27 - and that email is going to be email
74:30 - a bio
74:32 - bio
74:33 - a followers and the followers is going
74:36 - to be a list
74:38 - let me just put in all of this in a
74:40 - string
74:43 - and followers is going to be a list of
74:45 - uids of different people we'll see that
74:47 - logic in future
74:49 - and we'll have following which is also
74:52 - going to be a list
74:56 - cool
74:57 - now uh again this set has a written type
75:00 - of future void so we need to avoid this
75:04 - and well after this is done we can just
75:07 - turn res
75:08 - to success
75:11 - and well we are returning res over here
75:14 - cool now
75:16 - as this should work i want to show you
75:18 - another way of doing this
75:20 - so uh if you don't want suppose you
75:22 - don't want this uid anywhere in your app
75:25 - like you don't want to access it
75:26 - anywhere
75:27 - so you what you can do is
75:30 - you can just put await
75:33 - firestore dot collection
75:36 - users and you can directly call
75:39 - add method over here the set method is
75:42 - only on the document over here and there
75:44 - is add method on this collection over
75:46 - here
75:48 - so if you do add
75:49 - it and pass in all of these details
75:54 - we'll see both of them in action and
75:56 - i'll show you the difference
75:58 - right
75:59 - now let me save the app over here
76:01 - we're not saving the file yet i will
76:03 - save that in a second over here but let
76:05 - me show you the demo first
76:08 - so we can go where and in the sign up on
76:11 - the on tap
76:13 - we are not doing any uh validation like
76:16 - screen change or anything right now
76:18 - let me just show this to you
76:22 - so uh we'll have multiple stuff let me
76:26 - uncomment this file over here
76:29 - and i'll remove this for now
76:31 - so
76:32 - we have to pass in multiple stuff
76:35 - over here we'll have we'll have to
76:37 - import auth methods the class that we
76:39 - had created over here
76:41 - then
76:42 - sign up the user and pass in the email
76:46 - so our email is going to be the email
76:48 - controller text editor that we had
76:51 - dot text
76:53 - the same for password password
76:56 - controller dot text
76:59 - the same for user name
77:01 - usernamecontroller.txt
77:04 - and the bio which will be
77:06 - biocontroller.txt
77:07 - i am converting this arrow function to a
77:09 - normal function because we need to use
77:12 - async over here so we can do async
77:15 - and we can store the result and string
77:17 - it as equals await
77:20 - and well we can just put this over here
77:23 - remove one bracket and format the
77:25 - document
77:28 - now we can also print the rest variable
77:30 - over here so that we see what's coming
77:32 - up and we have printed the user id over
77:35 - here so that we see what the user id
77:37 - will be
77:38 - and if we create the user with email and
77:42 - password so let me restart this
77:45 - and well
77:46 - let's try to enter a username
77:49 - let me name it rivan
77:51 - enter in email
77:54 - rivan
77:55 - gmail.com make sure to add this at the
77:58 - gmail.com because firebase is the one
78:00 - that will be performing all the
78:02 - validations of email checking
78:04 - and make sure your password is more than
78:06 - six characters
78:08 - because your firebase checks that as
78:10 - well and you can have bio as flutter
78:14 - devs well
78:16 - now if we click on sign up
78:18 - you're not seeing anything now we can
78:20 - see
78:21 - this is because it was a future it took
78:23 - some time to do it store it in our
78:25 - database
78:26 - we don't see anything here but if we go
78:29 - in the authentication tab right now
78:32 - you can see rivagna gmail.com the
78:34 - provider was email
78:36 - created signed in and the user id
78:39 - check this user id over here
78:41 - now again we go to firebase database
78:47 - and you can see over here our users
78:49 - collection has been made
78:51 - and our uid over here and the uid over
78:54 - here are same this is because we had run
78:56 - the dot
78:58 - cred user dot id and the uid is same
79:01 - over here both of them is same but what
79:05 - if i comment this
79:08 - and uncomment this
79:12 - i have not set any document over here
79:14 - i've just set the uid which is this part
79:16 - over here
79:18 - and
79:19 - let's see what firebase does for us so
79:23 - i can
79:24 - refresh the app
79:27 - i'll enter the username rrr
79:30 - i'll have to use another email because
79:34 - firebase will check that this email is
79:37 - already there or not
79:39 - then i can again
79:41 - you know have another bio i'll sign up
79:44 - it will take some time and now you can
79:46 - see this is our uid and we've got a
79:48 - success message and you can see we have
79:51 - got another user over here
79:53 - but see the document id over here
79:56 - this is different and this is different
79:58 - because this is because uh firebase has
80:01 - generated a random uh id on its own
80:05 - and don't worry this id is going to be
80:08 - very random and all of the users if you
80:10 - use this method all of the users are
80:12 - going to have different uids
80:14 - so don't worry about that but you can
80:16 - see that the uid over here and this is
80:18 - different
80:19 - and if we go over here in the
80:21 - authentication
80:23 - you can see
80:24 - our user being created over here so this
80:27 - was the difference i wanted to show you
80:29 - between collection and
80:31 - add and set over here
80:34 - but i won't use this uh
80:37 - over here because i want my
80:39 - uids to come in over us because i'll be
80:42 - accessing my users based on this uid so
80:46 - that we get the information pretty
80:47 - quickly and don't take much time to get
80:49 - it
80:50 - you'll see it in future and realize why
80:52 - this method would be better in this
80:54 - scenario now uh let's again add some of
80:58 - our
80:59 - functionality like
81:01 - having a
81:03 - u in
81:04 - it list file
81:08 - and checking that our file is not equal
81:12 - to null what do we do want to do next we
81:16 - have to store this file somewhere right
81:18 - and we need to pass in a file here as
81:20 - well so we need to pick an image from
81:22 - the user gallery so that we can upload
81:25 - it to our firebase storage as i had
81:27 - mentioned previously that we'll use this
81:30 - to store any of our images
81:32 - so
81:33 - we need to first accept this from the
81:35 - user
81:36 - to do that
81:38 - let me just remove again this i'm so
81:40 - sorry but i'll have to remove this again
81:42 - so that i can show you it in demo
81:44 - i'll mark i'll comment this
81:47 - and
81:48 - i'll save this as well
81:50 - now we need to pick an image from the
81:52 - user so to pick the image from the user
81:55 - what we need to do is we'll have to
81:58 - install this uh dependency image
82:00 - underscore picker which will help us
82:03 - allow to you know
82:05 - take image from user gallery or from
82:07 - user camera
82:09 - so
82:10 - i'm going to use the pub spec assist
82:12 - over here and paste it over here
82:16 - this will add image picker in our
82:19 - app
82:20 - uh dependencies i can stop this app
82:23 - because it won't work properly if i
82:25 - don't stop all the processes and restart
82:28 - but before restarting let me just
82:30 - complete complete this over here so
82:33 - whenever this add photo button is
82:35 - clicked i want the to you know start
82:40 - the select image process so i'm going to
82:42 - create a function select image
82:45 - and
82:46 - i'll take this up
82:49 - and i'll call void
82:51 - select
82:53 - image
82:55 - over here
82:58 - now what will this select image do
83:01 - we need to
83:02 - pick the image so what i'm going to do
83:04 - is actually create a file over here
83:07 - named
83:08 - utils dot dot
83:10 - and in the utils.dart file i'm going to
83:12 - import material package and we are going
83:15 - to create a function called pick image
83:17 - we are not specifying any type of this
83:19 - function
83:20 - as you will see in the in a bit
83:23 - why we are doing this
83:24 - and we are going to have an image source
83:27 - this is provided by image picker itself
83:30 - and
83:31 - in the image source we need to
83:33 - initialize first image picker
83:36 - and it will be image
83:39 - quicker
83:40 - which will be
83:42 - much bigger we have instantiated and got
83:45 - the instance of the image picker
83:47 - class now what we want to do is
83:50 - we want this image picker
83:53 - to pick an image for us
83:56 - you can find all of this information on
83:58 - the image picker website i'll mention
84:01 - this disc in the description below the
84:03 - link now
84:05 - if we see pic image will give us a
84:07 - future of x file
84:10 - which can be null
84:11 - so what i'm going to do is i'm going to
84:14 - create x file and
84:17 - we are going to
84:18 - await this now to get the await we need
84:21 - to mark this function as async let me
84:23 - remove one space first we'll check if
84:26 - the file that we've received from the
84:28 - user input is not equal to null that
84:31 - means the user
84:33 - clicked on this button
84:34 - went into the gallery then without came
84:37 - back without accepting any image that
84:39 - means he press the back button or
84:41 - something
84:42 - so we want to check if the file is not
84:44 - null if it's not null then we want to
84:47 - return
84:49 - file
84:50 - dot read as bytes now you can see the
84:53 - return type of read as bytes is future
84:55 - and it will return you int 8 list
84:58 - so we can just do this and
85:01 - we can await this and if the file is
85:04 - null
85:05 - what we want to do well we can just type
85:07 - no image selected
85:09 - we don't want to do something special
85:12 - uh we just don't want to do anything
85:15 - so we'll just print it for you know just
85:17 - for our sake so that we can see that
85:19 - we've not selected anything
85:21 - and uh we are doing this file dot read
85:25 - as bytes and not we are not doing this
85:28 - file
85:30 - uh which will be from dot io
85:33 - and
85:34 - from file
85:35 - dot path we are not applying this method
85:38 - over here and over here we don't even
85:40 - need a weight we're not doing this
85:42 - method because this method is not very
85:44 - accessible on internet anything that
85:46 - includes dart i o package is not
85:48 - accessible on flutter web as of now
85:51 - so we can't follow this method and get
85:54 - it working on uh the web version that's
85:56 - why we are following the uint 8 list
85:59 - method over here
86:01 - now we need to await
86:04 - first we'll have to create this async
86:06 - now we'll have to avoid pick image
86:09 - right why do we have to avoid pick image
86:11 - because we used async over here which
86:13 - made the whole uh function over here a
86:16 - future
86:17 - and well we need to do this
86:20 - and we need to provide a source and i'm
86:22 - not going to do something special you
86:24 - can add some options and extra stuff but
86:27 - i'm directly going to mention gallery
86:30 - and this will return to us a dynamic
86:33 - value over here because we have not
86:35 - mentioned any type over here
86:38 - so uh we can just consider it to be a u
86:42 - in 8 list because that's what we are
86:44 - going to return and we know that's not
86:46 - an error we are going to receive so we
86:48 - can just do u uint8 list image which is
86:51 - equal to this
86:53 - and we can use you and 8 list your
86:56 - because our dynamic
86:58 - can be uh you and 8 list but uintah list
87:01 - cannot be a dynamic now we need to set
87:03 - the state
87:04 - and we need to state state to a global
87:07 - image variable so that we can display
87:09 - this uh image over your in the network
87:12 - image we'll have to remove this network
87:14 - image that's not accessible we'll see it
87:16 - in a while
87:17 - but we'll have to remove this from here
87:19 - and we have to show the image file over
87:21 - here so what we're going to do we're
87:23 - going on the top
87:26 - over here u and 8 list
87:29 - which can be nullable
87:31 - which will be null in the start
87:34 - and we're going to take this image from
87:36 - here
87:37 - we're going to go down
87:39 - over here set state to image
87:42 - to m
87:43 - so we're taking this global variable we
87:46 - are setting image to this i am over here
87:48 - pretty easy right
87:50 - now we need to go down in the circle
87:52 - avatar
87:53 - and
87:55 - we need to
87:56 - make a ternary operator over here so we
87:58 - need to check if the image here is not
88:02 - equal to null
88:04 - if the image is not equal to null then
88:06 - what do we want to do i'll just copy
88:08 - this circle avatar from here paste it
88:11 - over here i'll have to remove this
88:13 - network image from here because that's
88:15 - not what we're getting we're getting a
88:17 - uint8 list image so that can be
88:20 - accessible from memory image
88:23 - and we'll pass an image
88:26 - and the image has to be
88:28 - not null so that memory image can take
88:31 - it
88:32 - now if we format this document we should
88:35 - see something like this
88:37 - and over here instead of this background
88:39 - image we need to show a default profile
88:42 - screen so we can just type over here
88:44 - default
88:46 - profile
88:47 - picture
88:50 - we can grab any of this doesn't matter
88:55 - we can copy the image address
88:57 - go back and paste it over here
89:00 - and make sure to add this and add the
89:02 - code
89:03 - format the document again
89:05 - and we can save this over here now let's
89:07 - try to rerun our app and see where we've
89:10 - got it now as you can see our app is
89:12 - loaded over here and we are getting a
89:14 - network image when our image is null now
89:16 - if we click over here our app should
89:18 - crash
89:20 - and this is exactly what happens
89:22 - this is because well we haven't read the
89:24 - docs pretty well
89:26 - as you can see over here for the
89:28 - installation of ios
89:30 - uh we need to do some config for android
89:33 - it's not needed and even for web it's
89:35 - not needed but for uh ios we need to add
89:38 - some permissions in our
89:40 - inflow info.list file over here so let's
89:43 - do that
89:45 - go to our we'll have to go to our
89:47 - info.list file over here
89:50 - down here i'm going to copy this and
89:52 - paste it
89:54 - then the key is going to be
89:56 - ns photo library usage description
90:00 - and
90:01 - we are going to have a string over here
90:06 - if you don't know about this it's fine
90:08 - just copy as it is
90:11 - and over here we can just type
90:13 - photo
90:17 - library
90:18 - usage
90:21 - you can just take this key and print it
90:23 - two more times because we need two more
90:26 - permissions and this camera usage
90:28 - description
90:30 - and we can just type
90:35 - camera
90:37 - usage
90:40 - and
90:42 - a microphone usage now we will not need
90:45 - this but in case you want to integrate
90:47 - mic uh uh like videos in your apps
90:52 - after this tutorial make sure to add
90:54 - this as well
90:56 - uh we can just type my q search and
90:59 - after this is done we can close this
91:01 - file no more config is needed we can run
91:03 - without debugging now our app is loaded
91:06 - if we click over here you can see that
91:08 - it's
91:10 - asking us to access our photos we can
91:13 - just write allow access to all platforms
91:15 - and it opens our gallery
91:18 - so
91:19 - we can create this over here and you can
91:21 - see that we still when we select an
91:23 - image it shows up the image over here
91:26 - now if we go over here and as i said if
91:28 - we cancel this
91:30 - we should get over here no image
91:32 - selected so this is pretty cool
91:35 - now the next thing we want to do is in
91:37 - our
91:38 - auth methods over here we'll on uncommon
91:41 - this
91:42 - and we need to pass in this file over
91:45 - here
91:46 - correct
91:47 - now where can we go over here
91:50 - in a file we can just pass in
91:53 - the image which is not null
91:57 - cool
91:58 - now
92:00 - with that in place
92:02 - we can save this file
92:05 - we can save this file as well
92:07 - and well the next thing we want to do is
92:10 - store this image
92:13 - file that we have over here that we've
92:14 - selected over here in our firebase
92:17 - storage now if we store it store it
92:19 - directly over here that will be a
92:21 - problem because it will get overridden
92:23 - quickly
92:24 - and that will not be a good way of
92:26 - storing because suppose i want to add
92:28 - posts in the future that will also come
92:31 - up here and it will not be a good thing
92:33 - right we want to segregate it into
92:35 - various folders so as you can see we can
92:38 - create a folder over here and
92:40 - this is just you know
92:42 - we can create this by clicking on wire
92:45 - and typing in you know profile
92:49 - pics
92:51 - and we can click on add folder and this
92:54 - will create a folder where we can store
92:56 - our files
92:58 - but that's not what we want to do right
93:00 - now we can just click on delete and
93:02 - delete our folder over here we are going
93:04 - to do that programmatically so this is
93:07 - uh so to do this
93:09 - we are going to create another file
93:10 - named storage
93:12 - methods
93:13 - dot dot
93:15 - we're going to import the material
93:17 - package we are again going to create
93:19 - this class storage methods
93:23 - and over here we are going to have
93:26 - firebase storage
93:28 - this is given by firebase storage
93:31 - and we are going to have storage equal
93:33 - to 5b storage
93:35 - dot instance this is the good thing
93:37 - about firebase air flutter sdk you know
93:41 - everything is pretty similar as you can
93:43 - see to create an instance we can just do
93:46 - this they have pretty similar functions
93:48 - as you can see
93:50 - so
93:51 - we're going to create a function to add
93:53 - image to firebase storage
93:57 - so again our return type is going to be
93:59 - a string
94:01 - and
94:02 - we're going to upload image to storage
94:06 - now this function can be used in you
94:08 - know both
94:10 - uh to uh store our profile pictures and
94:13 - to store our posts
94:16 - so we are going to have a string of
94:18 - child name over here which i'll explain
94:20 - in a short while
94:22 - uh we'll have our file over here uint 8
94:26 - list
94:27 - file and boolean
94:29 - is post
94:31 - so we want to check if it's post or not
94:34 - and if it's supposed we need to make
94:35 - some extra functionality as well
94:38 - now
94:39 - we can do is
94:42 - we have storage
94:44 - now we have a ref method on it what is
94:46 - this ref method so this ref method is a
94:49 - pointer to the file in our storage
94:52 - so
94:54 - this can be a reference to a file that
94:56 - already exists or does not exist but we
95:00 - don't have any ref because we don't have
95:01 - a file so what we want to do is create a
95:04 - child over here now this child can be a
95:07 - folder right now uh it can be a folder
95:10 - that exists or a folder that does not
95:12 - exist firebase doesn't care about that
95:15 - if it exists then it will go in that
95:17 - folder or it will create a new folder
95:19 - for us
95:20 - so
95:21 - nothing for us to be concerned about
95:23 - then what is our child goal to be our
95:26 - child is going to have a child name that
95:28 - we are going to accept from the function
95:30 - that wherever we are going to call it
95:33 - and
95:35 - another child we are going to have is
95:38 - the user id because we want our
95:41 - structure to be like this suppose i have
95:44 - profile picture
95:48 - our i want my file to have you know
95:51 - another folder over here which is of
95:54 - some uid random
95:56 - uid
95:57 - and it will have another folder and in
96:00 - this folder we are going to upload some
96:02 - file
96:03 - cool
96:05 - so
96:07 - i can delete this again
96:11 - and we can go up over here
96:13 - now over here our child is going to be
96:15 - the user id to get the user id what we
96:18 - can do is
96:19 - again create firebase auth
96:21 - that we had seen earlier
96:24 - we can just do this
96:30 - auth
96:32 - dot instance
96:35 - right this is what we are done
96:37 - now we will take this instance over here
96:39 - auth and we have the current user
96:42 - we can put an exclamation mark over here
96:44 - and dot u id with this we get the uid
96:47 - and we saw that previously over here in
96:49 - the auth methods so we have this
96:51 - collection with us
96:53 - now you can check the type over here the
96:56 - type over here is reference
96:58 - so what we can do is create a reference
97:01 - over here which will be called ref
97:03 - and
97:04 - we are going to save this
97:06 - now
97:08 - uh we want to upload the task
97:11 - so
97:12 - we what we want to do is take this ref
97:16 - so wherever this folder structure that
97:18 - we have created we want to take that and
97:21 - we have to put a file in that location
97:23 - so to do that we can just do ref dot
97:26 - put and over here we get multiple stuff
97:30 - put block put data put file put string
97:33 - what do we want to do we have to put
97:35 - file
97:36 - we have to put
97:37 - a file if we were not doing web
97:40 - right we could have directly taken this
97:42 - file and it would be of a type file as
97:45 - you can see and i've shown it to you
97:47 - previously that a file would be
97:49 - something like this
97:53 - right
97:53 - but that is not what we are doing over
97:56 - here we are trying to put a uint 8 list
97:59 - to put a unit 8 list we're going to do
98:02 - put data you can see over here it
98:04 - accepts a data of you and date list
98:07 - so you can just take this
98:09 - and pass in
98:11 - a file
98:14 - cool
98:15 - now if you put this data you can get
98:18 - upload task now what is this upload task
98:21 - that we have
98:22 - well this upload task is similar to you
98:24 - know
98:25 - a future but it is not a future
98:28 - you can make it like a future like on
98:31 - error
98:32 - dot
98:33 - when complete
98:36 - you can see over here
98:37 - and well you can see over here it can
98:40 - you can make it a future but we are not
98:42 - going to do that we have this upload
98:44 - task over here so with this upload task
98:46 - we have the ability to control how our
98:49 - file is being uploaded to the you know
98:52 - the firebase storage so uh another thing
98:54 - we want to do is
98:56 - this upload task we need to avoid this
98:59 - upload task over here
99:02 - now to await it first we need to
99:04 - make this function async and we need to
99:07 - upload this await this upload task
99:10 - now you can see
99:11 - if we do await upload task it will give
99:14 - us a task snapshot and we'll take this
99:17 - snap
99:19 - and put it equal to this i want uh from
99:22 - this snapshot over here what i can get
99:25 - is snap
99:27 - dot you can see ref over here we can
99:29 - take this ref
99:31 - and over here we'll get get download url
99:35 - basically this will fetch us the
99:37 - download url
99:39 - to the file that is being uploaded over
99:42 - here so with all of this we are
99:44 - successfully able to upload our file in
99:46 - the correct location that we mentioned
99:48 - over here and with this snap dot ref.get
99:51 - download url we'll be able to get a url
99:54 - which we'll save in this firestore
99:56 - database
99:57 - over here
99:59 - so that we can you know access it with
100:02 - the network image
100:04 - and display it or to all of our users so
100:07 - with this we'll get a download url and
100:09 - definitely a download url has to be of
100:11 - the type string so we can just do string
100:15 - download url equal to
100:18 - this
100:19 - since this is a future we need to avoid
100:21 - this and now since we are returning a
100:24 - string we can just return
100:27 - a download
100:28 - url
100:29 - now we are not wrapping this in a try
100:31 - catch block because well we are going to
100:34 - take this upload image from here and put
100:37 - it over here
100:40 - so this is ultimately in a try catch
100:42 - block so it wouldn't matter
100:45 - right now uh the function of this is
100:48 - post will be seen whenever we create a
100:51 - post and you'll get to know that time
100:53 - for now it has no use for us so we can
100:56 - go over here
100:57 - and we have added this
100:59 - now
101:01 - before adding a user to our database we
101:04 - need to make sure that this method over
101:05 - here runs so what we can do is
101:08 - call the storage methods
101:12 - and we need to upload image to storage
101:15 - now what is our child name going to be
101:17 - as i mentioned before profile pics
101:21 - and the file and this post is false
101:25 - basically we're not uploading a post
101:26 - right now right we are uploading a
101:28 - profile picture
101:30 - and we know that this upload image to
101:32 - storage is going to return a
101:34 - string so we can just do string
101:37 - photo
101:38 - url equal to await this
101:42 - we can format this document over here
101:45 - and now we can pass in
101:47 - a photo url
101:51 - which is a photo url
101:54 - cool
101:55 - now
101:56 - we will refresh our app and see all of
101:58 - this in action
102:01 - so
102:02 - let's go back to our app
102:04 - and over here let's try to
102:07 - take this image we are getting this
102:09 - output correctly rr
102:13 - norman
102:14 - test123
102:18 - flutter
102:19 - there
102:20 - now you can see that i have formatted my
102:22 - email um in uh i haven't formatted my
102:25 - email correctly over here
102:27 - and if i sign up we should see an error
102:30 - over here firebase auth invalid email
102:32 - the um email address is badly formatted
102:35 - this is taken care of by firebase so i'm
102:37 - going to format this one to either
102:40 - gmail.com not noman at the gmail.com
102:42 - because i've used it previously
102:44 - and i'll sign up
102:48 - and if we go to our storage over here
102:53 - you can see a success popping game and
102:56 - we have a profile pics
102:58 - folder over here and our file over here
103:00 - with the name of our uid
103:03 - and you can see that this is there
103:06 - now i can't see this but if i want i can
103:09 - just click over here and it will
103:11 - download this for me if i go over here
103:14 - you can see the image showing up pretty
103:16 - beautifully
103:18 - right now this has gone there that means
103:21 - this part is working the storage part is
103:23 - working we can go to our firestore
103:25 - database
103:27 - we can see the new user
103:29 - and the new user has this photo url as
103:32 - well
103:33 - if we take this
103:35 - and go over here
103:36 - with this we should be able to download
103:39 - our url of our image and as you can see
103:42 - it's downloaded
103:44 - pretty cool right
103:46 - with just a few lines of code we are
103:48 - able to sign up our user and store the
103:50 - image and we are able to do lots of
103:53 - things but our task is not finished yet
103:56 - we are still left with uh
103:58 - some validation stuff in our ui part but
104:02 - before that i wanted to show you this
104:05 - so suppose you are in this try catch
104:07 - block and well we've got this the email
104:10 - is badly formatted
104:12 - or we get another thing
104:15 - right so
104:16 - what we want to do is
104:18 - you can just do if you're familiar with
104:21 - try catch you know this that you can do
104:23 - on
104:24 - and you can have firebase auth exception
104:30 - and we can catch any error related to
104:32 - firebase auth exception
104:34 - error
104:35 - and we can cache that exception
104:39 - and with that
104:41 - we need to check if
104:43 - the e dot
104:44 - code
104:46 - this is the sorry error dot code
104:49 - so if the error dot code that we get
104:52 - is equal equal to
104:54 - this what are we getting invalid email
104:57 - right
104:58 - if that is equal to this we need to pass
105:01 - in something new so what i can do is
105:03 - rest equal to
105:09 - the
105:10 - email is badly formatted
105:16 - right now
105:17 - this is exactly what firebase has given
105:20 - to us you can have multiple error codes
105:23 - like you know
105:24 - uh wrong password or user with that
105:28 - email is not found when you're logging
105:30 - in
105:30 - please have a look at that in the login
105:33 - section as well
105:34 - but for now you can see that the email
105:37 - invalid email is there
105:39 - and
105:41 - if you go over here
105:44 - and try to sign up with three letters of
105:46 - password you can see weak password over
105:49 - here so you can catch
105:51 - the weak password as well over here
105:54 - error dot code equal equal to
105:56 - weak password
106:00 - your password
106:03 - so basically all of this stuff we can
106:05 - just copy and paste but firebase gives a
106:08 - pretty good and explainable uh output so
106:12 - we don't do this but you can definitely
106:14 - do if you want to add some more you know
106:16 - detailed description
106:19 - cool now that we have that
106:22 - we can save this
106:24 - we can
106:25 - close the storage method file we can go
106:27 - over here
106:28 - and
106:30 - i'm going to
106:34 - clear all of this let me copy this first
106:38 - i'm going to clear all of this from here
106:41 - and i'm going to type in sign up
106:43 - user
106:44 - now this sign up user is going to be
106:47 - not returning anything
106:50 - so what we can do is void sign up user
106:52 - and i think i copied this um i'll have
106:56 - to write the whole code again i'll see
106:58 - you when i write the whole code again
106:59 - welcome back i've typed all of this code
107:01 - again now uh we got this res variable
107:05 - over here so what we want to check if
107:07 - the res
107:09 - is equal equal to whenever we have a
107:11 - success we are setting our rest to
107:13 - success right so we can just do res
107:16 - equals to success then
107:19 - what we want to do is well
107:27 - nothing
107:30 - so whenever a res is not equal to
107:32 - success over here what we want to do is
107:36 - well you know
107:39 - show a snack bar and we're going to use
107:42 - uh snack bars a lot in this so what i'm
107:44 - going to do is go to the utils
107:47 - i'm going to create a function named
107:49 - show snack bar
107:51 - it will accept a build context over here
107:57 - and a string
107:59 - content
108:01 - and over here what we are going to have
108:03 - is
108:04 - scaffold messenger dot of context dot
108:08 - show snack bar
108:10 - snack bar
108:11 - and the content will be of text content
108:14 - this is all the stuff required to show a
108:16 - snack bar so basically we are going to
108:18 - use show snack bar
108:20 - this all of this lines a lot in our
108:23 - application so i've created a function
108:25 - over here so that i don't have to call
108:27 - it again and again and type all of this
108:29 - code again and again correct
108:31 - now we can just do show snack bar
108:34 - and
108:35 - context we're going to pass in the
108:37 - context
108:38 - and dress
108:42 - i think we have reversed it so what we
108:44 - want to do is
108:46 - pass in address and context
108:49 - now we can format this document so if
108:51 - res is not equal to success we need to
108:54 - show the snag bar when there is an else
108:56 - condition we don't want to do anything
108:58 - so now if i restart my app we shouldn't
109:01 - see any problems
109:03 - so
109:04 - we can accept a file
109:08 - rrr
109:11 - another gmail.com
109:14 - test123
109:16 - flutter
109:17 - dev and if i sign up this will sign up
109:20 - but i don't even get to know that you
109:22 - know i've signed up that will be known
109:25 - when we transition to another screen but
109:27 - this takes a lot of time right you saw
109:30 - that this uid popped in a lot later
109:33 - so to do that we are going to create a
109:36 - loading variable and this loading
109:37 - variable will pop up
109:40 - as long as it's signing up
109:43 - correct so we're going to have bool is
109:45 - loading
109:49 - and i'm going to set it to false
109:51 - i'm also going to mark this as private
109:54 - i'm going to take this is loading
109:57 - and over here we are going to
110:03 - set the state
110:05 - is loading to
110:06 - we are going to set the loading to true
110:09 - then we are going to take this
110:14 - and we are going to set loading to false
110:17 - i want to do it before we show the snack
110:18 - bar it won't be much delay
110:20 - but yeah still i want to show it before
110:22 - it we need to show this is loading on
110:26 - our screen
110:27 - right now to do that what we're going to
110:29 - do is go to our container over here
110:33 - where we have a button and in that child
110:36 - over here we are going to
110:38 - check if it's loading
110:40 - so if the loading process is still on we
110:43 - are going to center
110:46 - with a child of circular
110:50 - progress indicator
110:52 - and it's going to be a constant no
110:54 - dynamic values used
110:57 - and
110:58 - we can refresh
110:59 - now we should see the changes happening
111:01 - in our app
111:03 - so
111:04 - if i take this file over here
111:06 - we're going to pass in the username as
111:08 - rivan
111:09 - naman rivan other gmail.com
111:14 - test123
111:16 - bio flutter
111:18 - dev
111:19 - and i'm going to sign up
111:21 - and you can see
111:22 - our button size increased by a bit but
111:26 - it's not very well so this is because we
111:28 - need to change the color of our circular
111:30 - progress indicator we'll change it to
111:32 - our primary color now we should be able
111:35 - to see
111:36 - and you can see this is happening
111:38 - now you can see this email is already in
111:40 - use we can just do the one one two
111:44 - and you can see this loading
111:48 - and this has been done
111:50 - so
111:52 - our sign up process has been done we can
111:54 - go in our authentication tab and see all
111:57 - of the stuff happening
111:59 - all our emails are here
112:01 - that means we have done it successfully
112:03 - now let's head on to login screen having
112:05 - done this let's get to the login login
112:08 - part so we can go to the login screen
112:10 - actually in the main.dart file over here
112:12 - and we'll replace the signup screen with
112:14 - the login screen so that we see our
112:16 - login screen on the main screen and what
112:19 - do we need to
112:20 - do to you know get our user logged in
112:23 - so to do that we'll again migrate to our
112:26 - auth methods class over here
112:28 - and we can create a function for logging
112:31 - in user similar to
112:33 - uh signing up the user
112:35 - so
112:36 - we will again have a return type of user
112:39 - string we're going to follow the same
112:40 - pattern we did over here create a res
112:42 - variable and pretty similar to this so
112:45 - we'll create a function login user and
112:47 - what do we require from the parameters
112:50 - over here we required
112:52 - email password username bio and a file
112:56 - but over here
112:57 - we just need
112:59 - an email and a password so we can do
113:02 - that we'll uh do required string email
113:07 - and a required string password
113:12 - having that we'll again create a res
113:14 - variable over here
113:16 - we'll pass in an initial value of
113:19 - some error occurred
113:22 - it's highly unlikely that this output
113:24 - will come up because it's either going
113:26 - to be a success or a error we are doing
113:29 - this over here but just in case you know
113:31 - uh something happens
113:33 - we can print this out
113:36 - so now we'll again wrap this in a try
113:38 - catch block
113:42 - and
113:43 - we'll have to mark this function as
113:45 - async
113:47 - because the
113:48 - like the similar to this create user
113:50 - with email and password since this is a
113:53 - future login user is also going to be a
113:55 - future
113:57 - so uh first uh we have to check if our
114:00 - email is not empty
114:02 - you can actually do that in the
114:04 - ui part of the app over here as well
114:08 - before
114:09 - calling the auth methods part but i
114:12 - prefer doing it over here because my
114:13 - logic is separated from the ui
114:16 - now we also check that password is not
114:19 - empty
114:21 - then we need to log in the user to log
114:23 - in the user will again grab the auth
114:25 - instance that we have and we have a
114:28 - function called
114:30 - sign
114:31 - in with
114:32 - credential is there even this works but
114:35 - we're going to follow sign in with email
114:37 - and password
114:38 - and we're going to first stop it
114:40 - now
114:42 - as i told this is going to be a future
114:44 - you can see it over here and it returns
114:46 - user credentials again
114:48 - so we what we can do is just await this
114:51 - we are not in need of the credentials
114:52 - over here naturally because we don't
114:54 - have to do any other process since
114:56 - you're logging in the user we don't have
114:58 - to store any of our data in the
114:59 - firestore database
115:01 - so
115:02 - only this much is fine we don't need to
115:04 - store the user credential unless you
115:07 - want user id and want to carry out some
115:09 - other task after this
115:11 - cool and now this is done we can just
115:14 - mark rest to success
115:17 - and
115:18 - over your
115:20 - wheel turn rest to
115:22 - error dot to string
115:25 - and if the email is not empty we need to
115:28 - show
115:29 - that
115:30 - the user needs to enter
115:32 - all the fields
115:34 - please enter all the feeds
115:38 - right
115:39 - now we have this we can just return res
115:45 - right now we can take this login user
115:47 - similar to what we did in sign of screen
115:50 - we can go over here in the login screen
115:53 - and
115:55 - you can replace this on tab with login
115:59 - user and now we need to create this
116:01 - function login user so we'll do that
116:04 - it's not going to return anything so
116:06 - it's going to be void
116:08 - then
116:10 - we need to
116:12 - create a variable string res and we need
116:15 - to await this from the auth methods this
116:18 - is basically what we did in the sign up
116:20 - screen as well nothing new and since
116:22 - every it is over here we'll also use
116:24 - async
116:25 - now odd methods dot login user
116:29 - and we have to pass an email so it will
116:32 - be email
116:34 - controller dot text
116:36 - and over your a password controller dot
116:39 - text
116:42 - now i'll format this document
116:44 - we'll
116:45 - get a rest value over here now we need
116:47 - to check where if res is equal to
116:50 - success
116:53 - what do we need to do
116:55 - else what do we need to do
116:57 - so if there is over here is success we
117:00 - basically want to do nothing for now
117:03 - but
117:04 - over here
117:06 - we'll have to show a snack bar right and
117:09 - for the snack bar if you remember we had
117:11 - created a
117:13 - function over here show snack bar we can
117:16 - just use this show snack bar function
117:18 - over here
117:19 - so snack bar will pass in the content
117:21 - over here what is our content going to
117:23 - be well
117:25 - it's just going to be res
117:26 - and we'll pass in the context
117:29 - and we need to import show snack bar
117:31 - which we can do
117:33 - with the utils package we use folder
117:35 - that we created over here
117:38 - right now
117:39 - let's see if
117:41 - we are getting logged in uh so to see
117:44 - the user uh so to see this output first
117:48 - we will move to the authentication tab
117:50 - and over here we have our various emails
117:52 - you can see that we have a created tab
117:54 - over here created uh section just tells
117:57 - us when the user was created and the
117:59 - signed in when the user last logged in
118:01 - so you can see all the values being 20th
118:03 - december which was yesterday for me and
118:06 - today's date is 21st december
118:08 - so
118:09 - i can uh enter this email over here
118:12 - naman ravana there is gmail.com
118:17 - and i remember my password being
118:19 - test
118:20 - one two three and we log in
118:24 - i think that was a success we'll refresh
118:27 - our authentication tab
118:29 - and you can come over here and you'll
118:31 - see
118:32 - that our value of created stills remains
118:34 - the same but are signed in changes to
118:36 - 21st december that means we have logged
118:38 - in successfully
118:40 - now let's just show some output on our
118:42 - screen
118:43 - so
118:44 - to do that first you know we'll have to
118:48 - login the we'll have to show some
118:50 - loading bars so that we even get to know
118:52 - that we've completed the process
118:54 - we can create an is loading variable
118:56 - over here
119:00 - similar to what we did in the sign of
119:02 - screen
119:04 - now after this login user we can
119:07 - set the state to
119:09 - and we can set the loading to true
119:12 - we'll copy these values
119:15 - and after this we can
119:18 - paste it
119:19 - we can set is loading to false and in
119:22 - case you want to show the loading
119:24 - indicator
119:25 - uh before the snag bar what you can do
119:28 - is
119:29 - you can take this
119:31 - put this over here and we also have to
119:33 - mark it over here as well because you
119:35 - know this is for the if condition and
119:38 - this is for the else condition
119:40 - but i'm not going to do that i'm going
119:42 - to paste it over here because it would
119:44 - be a difference of milliseconds that
119:46 - wouldn't matter at all so now let's get
119:48 - the loading indicator showing up on the
119:50 - screen we want it to be replaced with
119:51 - this login text so we can go to the
119:53 - container over here
119:56 - and we can replace this text
120:00 - with
120:01 - a ternary condition so if the loading is
120:04 - on we need to show a constant
120:07 - a centered
120:08 - circular progress indicator
120:12 - and
120:14 - we can format this document
120:16 - and we can save it
120:18 - now if we try to see it
120:20 - you can see
120:21 - the size of this being big
120:24 - and we can't see the indicator revolving
120:27 - that is because we need to change the
120:28 - color over here the color will be a
120:30 - primary color which is white
120:33 - now if we try to do this you can see
120:35 - this happening successfully
120:38 - but now the only problem is if we're
120:40 - getting logged in we are not shifting to
120:41 - another screen
120:43 - that is what we are going to work on now
120:45 - but before jumping into that i wanted to
120:46 - show you something in the auth methods
120:48 - class like we saw for sign up user that
120:52 - we called over here and uh on function
120:55 - over here where we can explicitly
120:58 - mention the exception we are looking for
121:00 - we can do the same thing over here so
121:03 - what we can do is on
121:05 - firebase auth exception
121:08 - and we can catch the specific exception
121:11 - we are waiting for
121:12 - and then over here we can just check
121:14 - with the code so if e dot code
121:18 - this is similar to what we did uh in the
121:20 - sign up screen so over here we can just
121:23 - check for multiple things like you know
121:25 - when we log in what are the multiple
121:27 - errors that a user can get and what is
121:29 - the code for the firebase exception that
121:32 - we can receive
121:34 - so first can be user not found that
121:38 - means the user has not been registered
121:40 - so well we cannot log in so we can like
121:42 - other stuff you know output uh
121:45 - our own custom message whatever we want
121:48 - the other code i want to show you is
121:51 - wrong password
121:54 - you again uh want to show a different
121:56 - error for the wrong password so you can
121:58 - just put in this or you know what we saw
122:01 - for uh the
122:03 - minimum password size you can put that
122:05 - as well all of it is
122:07 - accepted but firebase just gives a
122:10 - pretty good uh user readable output and
122:13 - i'm going to go forward with that so
122:14 - basically i'll be the one using the app
122:17 - and i don't mind getting a bit different
122:19 - you know notification like a snack bar
122:22 - over here i'm fine with it but if you
122:23 - want to customize this is how you can do
122:26 - it
122:26 - now let's jump into handling the screen
122:28 - change in our application so what i'm
122:30 - going to do is show you two approaches
122:32 - which we could have followed and you
122:34 - know shift it to another screen i'm
122:36 - going to create a sample screen over
122:38 - here to show you the demo we're calling
122:40 - it home screen dot dot you need not make
122:42 - this if you're following this tutorial
122:44 - step by step so you can create a
122:48 - an import material package
122:51 - i'm going to call it as a stateless
122:53 - widget because it's just for demo
122:57 - and over here i'm going to display a
123:00 - centered
123:01 - text of
123:05 - home screen
123:07 - and i'm also going to wrap it with a
123:09 - scaffold so
123:12 - that we see a good output
123:16 - all right we have this and for now let's
123:18 - just put cons to avoid all the warnings
123:20 - that we're getting
123:22 - the first approach we could have taken
123:23 - is if we got the success in the login
123:26 - screen
123:27 - we could have just used navigator
123:30 - dot of context dot push
123:33 - replacement
123:35 - material page route
123:39 - with the context
123:41 - and we could have passed in home screen
123:47 - right to avoid the warning vlog input
123:49 - const i always forget this now i'll
123:51 - refresh my app and see so whenever we
123:54 - have the success variable coming in we
123:57 - can change to the next screen so i'm
123:59 - going to log in with my email and
124:01 - password
124:05 - and i'm going to click on login
124:07 - and as you can see we went to the home
124:09 - screen so what's the issue why
124:11 - is this approach not appropriate with
124:14 - firebase and any other stuff
124:16 - now let me refresh our app
124:18 - if i refresh my app you see we again go
124:21 - to the login screen this is because in
124:23 - our main.dart file we have told that a
124:25 - home of our application is going to be
124:26 - login screen and we are not making any
124:28 - additional checks that you know if the
124:30 - user is logged in we need to go to the
124:33 - we need to display the home screen
124:35 - anything like that so the user state has
124:38 - not persisted
124:39 - well we can obviously display the user
124:42 - id and everything over here but we not
124:44 - be able to see another screen right and
124:47 - this is why this approach is not
124:50 - appropriate so instead what we're going
124:53 - to do is you know go to the main.dart
124:56 - file over here we're going to implement
124:58 - the concept of a persisting user state
125:01 - the user state uh
125:03 - can be persisted in firebase a very easy
125:06 - method so we are going to implement the
125:07 - concept of use uh persisting user
125:10 - authentication state
125:12 - so a fire with firebase doing this is
125:14 - pretty easy and other database and if
125:16 - you worked with node.js and everything
125:19 - so what we need to do is store the
125:22 - store the
125:23 - uid or some unique identifier in the
125:26 - app's memory then get that from the
125:28 - app's memory and well you know uh
125:32 - check if the
125:33 - user with that uid is authenticated or
125:37 - not we'll have to do a lot of juggling
125:39 - but instead firebase just provides us
125:41 - with multiple methods we can make use of
125:43 - and we'll get our work done
125:46 - so what i'm going to do over here is use
125:49 - a stream builder because firebase
125:51 - returns that
125:53 - i'm going to show you another approach
125:54 - for user authentication state as well so
125:57 - don't worry
125:58 - over here we'll have a stream obviously
126:01 - because it's a stream builder and a
126:03 - builder over here we are going to get a
126:05 - context
126:06 - and we are going to get
126:10 - a snapshot
126:12 - and over here in the stream what we are
126:14 - going to pass in
126:15 - as i said firebase provides us with
126:17 - multiple methods that we can run to
126:19 - check if the authentication state is
126:21 - there or not
126:23 - the three methods that uh
126:26 - there are three methods that firebase
126:27 - provides us
126:28 - one uh the first one is the id token
126:31 - changes
126:32 - uh so how you can do this is firebase
126:35 - auth
126:37 - dot instance
126:38 - what we did in the auth methods you can
126:40 - just create a variable over here and
126:42 - input it over here you import it over
126:45 - here sorry
126:47 - then over here we can just click id
126:50 - token changes now you can see the return
126:52 - type is stream of an available user it
126:55 - can be a null
126:56 - right
126:57 - now id token changes and this is what it
127:00 - takes to you know get the abuser uh
127:03 - signed uh to listen to any changes in
127:06 - the user but
127:08 - uh when will this uh method be called
127:11 - right
127:12 - this will be called right after the uh
127:15 - listener has been registered and when
127:17 - the user is signed in or whenever the
127:20 - user signs out
127:22 - or there is a token change in the user
127:25 - so every user has a unique identifier
127:27 - token which firebase
127:29 - gives
127:30 - and whenever this id id token changes
127:33 - this method this method can get run so
127:36 - this is not the method we are going to
127:38 - use right now as i said firebase
127:40 - provides us with three methods this is
127:42 - the first method and this is we are not
127:45 - using this because this will uh run
127:47 - whenever the id token changes so suppose
127:50 - the user uh
127:52 - restores this app on a new device well
127:55 - this will run and we'll get our
127:56 - authentication state back but we don't
127:58 - want to do that instead
128:00 - uh we are going to use some other
128:03 - function but before that let me show you
128:05 - a second function which is user changes
128:08 - so this runs whenever uh the user has
128:11 - been uh signed in signed out everything
128:13 - that uh this uh the other function id
128:16 - token changes does
128:18 - but
128:19 - what extra functionalities this provides
128:21 - us is whenever we want to update our
128:23 - password update our email whenever uh we
128:26 - want to update that firebase does
128:28 - provide some methods for that as well
128:31 - and whenever those functions get called
128:34 - this
128:34 - gets called as well
128:36 - but uh we don't want to make the this
128:39 - function call when all of those changes
128:42 - take place because those changes are
128:43 - never going to take place
128:45 - uh uh we are going to use the third
128:47 - method which is
128:49 - auth state changes
128:51 - now this runs only when the user has
128:53 - signed in or signed out that's it
128:57 - so this is what we are going to use
128:58 - because our purpose is very minimal we
129:00 - don't want extra stuff to be happening
129:02 - but if you want you can just use id
129:04 - token changes
129:05 - or
129:06 - user changes anything you want
129:09 - but i prefer this one
129:11 - then what we need to do over here so if
129:13 - this is a stream builder you might be
129:15 - familiar that we need to first check if
129:18 - our connection has been made with a
129:20 - stream
129:20 - so we can just check if
129:23 - snapshot.connectionstate
129:24 - equals to the connection state and it is
129:27 - active or not
129:29 - and if it is active we need to check
129:33 - active means that the connection has
129:34 - been made with our stream over here and
129:37 - if it is active we need to check if the
129:38 - snapshot that we have over here
129:41 - has any data or not
129:43 - right
129:44 - we don't want it to be null and if it
129:46 - has data what we want to do is well i'll
129:49 - uncomment this
129:51 - i'll take this responsive layout and
129:54 - i'll remove it from here
129:56 - and i'm going to return this
130:00 - so
130:01 - and we are going to
130:03 - put a semicolon over here so whenever
130:05 - the connection is active and our
130:07 - snapshot starts to have any data we are
130:09 - going to response uh we are going to
130:11 - return a responsive layout
130:14 - now let's move on to the else conditions
130:16 - now
130:18 - else if
130:19 - you know
130:20 - there is no data that means the snapshot
130:23 - has error
130:28 - that means the connection state has been
130:30 - made but the snapshot has does not have
130:32 - data it has an error what do we need to
130:35 - do
130:36 - we can just return
130:37 - a centered widget with a text displaying
130:41 - the error
130:42 - now since
130:43 - i don't want it to be very complicated
130:45 - i'm just going to pass in snapshot dot
130:47 - error
130:49 - and i'm going to
130:51 - use interpolation
130:54 - and i'm going to use string
130:55 - interpolation over here
130:57 - but if you want you can just type you
130:58 - know some internal error occurred
131:01 - something like that
131:03 - but i want to show this error
131:06 - cool
131:07 - now having that
131:09 - we need to
131:10 - check if the connection has not been
131:12 - made so if the snapshot connection state
131:15 - is equal to connection state
131:18 - dot waiting that means the connection is
131:20 - still happening what do we need to show
131:22 - we need to show a circular progress
131:24 - indicator
131:25 - we're going to do that
131:28 - child
131:31 - and a center
131:32 - sorry a circular progress indicator
131:37 - and we will have to
131:41 - change the color of this
131:43 - circular progress indicator
131:45 - which will be primary
131:47 - and we will set this to a constant
131:49 - widget and i'll put a semicolon as well
131:54 - now we have implemented all of this so
131:55 - that means the connection state has been
131:57 - active
131:58 - and connection
132:00 - if it's not active then it's waiting
132:02 - that means we need to show a circular
132:03 - progress indicator but the key point
132:06 - over here is snapshot dot has data
132:08 - now if snapshot has data it means that
132:11 - the user has been authenticated that's
132:12 - why we are showing the responsive layout
132:14 - over here
132:15 - but what if the snapshot doesn't have
132:17 - any data we have not checked any
132:19 - condition for it so after checking all
132:22 - of these conditions and if all of these
132:23 - conditions are not fulfilled we are
132:25 - going to return a login screen because
132:28 - the snapshot does not have any data
132:30 - ultimately and if it does not have any
132:32 - data it means that the user has not been
132:34 - authenticated
132:35 - now if i refresh my app over here we
132:37 - should see this is mobile because the
132:39 - user has been authenticated
132:41 - pretty simple right now we can just
132:43 - remove this
132:45 - and delete this
132:47 - now even uh no i'll even have to remove
132:50 - this from here
132:52 - now even if i stop my app processes
132:55 - i'll restart it i should see this is
132:57 - mobile screen on the in the center text
133:00 - let's wait for it and we'll see that all
133:03 - right our app has been loaded and you
133:04 - can see no difference this is mobile is
133:06 - showing up over here because our user
133:08 - has been authenticated now let's try the
133:10 - same thing on our web version so what
133:12 - we're going to do is flutter and dash
133:14 - the
133:15 - chrome
133:16 - and
133:18 - make sure to add dash dash web renderer
133:21 - html because the default one is canvas
133:24 - and canvas law causes a lot of issues in
133:27 - flutter web so make sure to have the web
133:29 - renderer as html don't worry if you
133:32 - release this uh if we create the build
133:34 - of the release version uh it will be in
133:36 - the html format only and we'll get a
133:39 - good output and it will be similar to
133:41 - this we won't get any external
133:43 - factors affecting our app so don't worry
133:46 - alright our web version has been loaded
133:48 - and you can see over here we're getting
133:49 - the login screen because the snapshot
133:51 - over here does not have any data even
133:54 - though we logged in over here before i
133:56 - think we did so now we will try to log
133:58 - in and i'll enter my email naman rivaan
134:02 - actually what i'm going to do is
134:04 - sign up and i just realized that we
134:06 - haven't configured anything for you know
134:08 - clicking this button over here the sign
134:09 - up button so what we can do is go to the
134:12 - login screen over here
134:14 - and go to the bottom
134:17 - and in the sign up
134:18 - we can create a function called
134:23 - navigate
134:24 - to
134:27 - sign up
134:28 - i'll copy this go on the top create a
134:31 - function again
134:32 - void login navigate to sign up and we
134:35 - basically you're going to use navigator
134:38 - navigator dot of context this context
134:40 - don't worry this is like uh the state
134:43 - over here provides us with the context
134:45 - in that app so
134:47 - yeah we can use that and we are going to
134:50 - push
134:51 - to the
134:52 - material page route
134:56 - and we are going to pass in the we are
134:57 - going to receive a context and we are
134:59 - going to pass in the sign of screen
135:04 - this is going to work we know it for
135:05 - sure so i'm not even going to test it
135:08 - i'm going to format this document i'm
135:10 - going to copy this function from here
135:12 - and go to the sign up screen
135:16 - paste this function over here and say
135:18 - navigate
135:19 - to login
135:21 - and i'm going to pass in the login
135:23 - screen
135:26 - i'm going to copy this function go down
135:29 - i'm going to replace this
135:31 - sign up with login this is the issue we
135:34 - had before
135:35 - didn't notice it
135:37 - and we'll save it so our web has been
135:40 - loaded up and now if i click on the sign
135:42 - up button over here it should work
135:44 - now i'm going to select an image and
135:47 - this should work we haven't tested this
135:49 - on the web version
135:50 - and this works because you know uh the
135:54 - image picker dependency that we added to
135:57 - pick images is configured for the web
135:59 - i'm going to add in a user name over
136:01 - here let's call it trivan i'll call the
136:03 - email naman rivan
136:06 - 1234567 at the gmail.com
136:10 - then we can add a password test one two
136:12 - three and over here i'm going to write
136:14 - content creator
136:16 - and we can click on sign up and the
136:19 - output should not be the home screen
136:22 - that we get
136:23 - this is because well we haven't told
136:26 - what to do when the res variable is
136:28 - success
136:29 - so when our variable is success what do
136:32 - we want to do we need to
136:34 - basically show this responsive layout
136:37 - that we have so i'm just going to copy
136:39 - this and paste it over here oh sorry
136:41 - first we need to navigate
136:43 - so i'm going to copy this function from
136:45 - here paste it over here then copy this
136:47 - from here
136:49 - and then
136:50 - replace this with sign of screen
136:54 - we don't need to add a return because
136:56 - this is an arrow function
136:58 - now we're going to employ import
137:02 - some of the widgets
137:05 - having that in place now we should
137:07 - format the document
137:09 - and we're going to do the same process
137:11 - for login screen as well so i'm going to
137:14 - copy this from here go to the login
137:16 - screen
137:17 - and we had created ifres equal to
137:20 - success and this is why we had created
137:22 - we need to navigate to the other screen
137:25 - we're going to import all of this
137:30 - also we don't want push over here we
137:31 - want push replacement
137:34 - push will uh well if we just click on
137:37 - the back button we can go back to the
137:39 - login screen but that's not what we want
137:40 - we want to replace the current screen
137:42 - with another screen
137:44 - so we'll do the same over here as well
137:46 - and
137:47 - i'm going to refresh over here and over
137:49 - here but we need to restart our app
137:53 - entirely because well this was mobile
137:56 - will show up because our authentication
137:57 - state has been persisted
137:59 - so if we run our flutter chrome version
138:02 - again we should see a login screen
138:05 - because that's how flutter web works it
138:07 - creates a new chrome
138:09 - instance every time unlike the ios
138:11 - simulator over here
138:14 - so let's wait for our chrome to run up
138:43 - as you can see we get our login screen
138:45 - back again i want to
138:46 - sign i want to
138:48 - sign up actually again to show you that
138:51 - it works if it works so here then it
138:52 - will work on the login screen as well
138:55 - i'm going to create another user ivan
138:57 - naman
138:58 - one two three at the right gmail.com i'm
139:01 - going to enter a password test one two
139:03 - three and a bio off again content
139:06 - creator
139:07 - and i'm going to add extra
139:09 - over here so that you can see extra
139:12 - stuff and not the same stuff on every
139:14 - user
139:15 - now i'm going to create a user
139:22 - and you can see we shifted to the mobile
139:24 - screen
139:25 - and our state has been
139:28 - persisted as well if i do restart you
139:31 - can see that this is the state of our
139:33 - app
139:37 - and this works as we had before but this
139:40 - is not the cleanest way of writing the
139:42 - code because if we go in the auth
139:44 - methods file you can see that all of
139:47 - this data we are adding over here and
139:49 - suppose our app grows bigger so and we
139:52 - need to add all of this data again then
139:54 - we'll need to probably you know uh add
139:57 - all of this we'll add all of this and
139:59 - then probably we'll forget which is not
140:01 - a good way and will cause bugs in our
140:03 - app so what we can do to avoid these
140:06 - type of issues is create a model
140:09 - and
140:10 - we are going to create multiple models
140:12 - one for user one for post in the future
140:15 - for now let's create a user model
140:18 - and since it's a dot file we don't need
140:21 - to you know create import material dart
140:24 - where we'll have a user class
140:27 - and over here in the user class we're
140:29 - going to add in a lot of you know
140:31 - properties of this user class what all
140:33 - properties do we want so our properties
140:36 - are going to be this
140:38 - so we can type them out
140:40 - okay so we have typed all the fields
140:41 - that are required which are basically
140:43 - this
140:44 - so
140:45 - i've copied them over here now we need
140:47 - to require them from our constructor
140:49 - which we'll create
140:51 - and i'm going to use named constructors
140:53 - because there are a lot of things to add
140:56 - let's add them so we have our
140:58 - constructor here as well now let's add
141:01 - some functions we can use on user so
141:03 - that you know it's very accessible for
141:05 - us while using firebase so we are going
141:08 - to create a two json method over here
141:10 - basically this method will be used to
141:12 - convert uh whatever user object we
141:15 - require from here to an object
141:20 - so we can do that by two json method and
141:23 - we're going to return an object
141:25 - and our object is going to have username
141:30 - a uid
141:35 - then an email
141:42 - a photo url
141:51 - bio
141:56 - followers
142:04 - and following
142:10 - so whenever we call this two json method
142:12 - on our user class it will convert uh
142:15 - everything that we receive from the
142:16 - arguments to a to an object file so that
142:19 - we don't have to write this same code
142:21 - wherever we use it all right now this is
142:24 - done we have to create another function
142:25 - for the user class but we'll create it
142:27 - as and when we need it we need to json
142:29 - function right now in our you know auth
142:32 - methods class which we'll look at in
142:34 - some time so let's go in the auth
142:35 - methods class where what we can do is
142:38 - create a user model
142:40 - so we can call user now make sure to
142:44 - import uh there are two types of user uh
142:46 - we have seen this before
142:48 - but
142:49 - we want to import the user that
142:52 - is this one
142:54 - but since uh the user from firebase auth
142:57 - the the user firebase auth provides us
143:00 - and the user we have will clash we can
143:02 - do this we can import this as model so
143:07 - that we know that this is a model user
143:09 - that we want and where we can do model
143:11 - dot user and we can create a user
143:16 - and to create a new user we can just do
143:19 - model user now we have to pass some
143:21 - past some arguments in the constructor
143:23 - so i've copied all the values that were
143:25 - present over here over here and now what
143:27 - we can do is
143:29 - take this set
143:31 - and we can remove all of this and now we
143:33 - want to set this user object over here
143:36 - so we can just do this
143:38 - user
143:39 - now this has to accept a map
143:43 - right and we have made the map function
143:45 - basically over here to json file so we
143:48 - what we can do is call dot to json and
143:52 - this to json basically returns a map for
143:54 - us for us as i said an object
143:58 - so yeah we can just do that and we can
144:00 - format this document
144:02 - this should work as it worked before
144:06 - now you can see the state of this app is
144:08 - still the same because even if we
144:11 - reinstall or uninstall the app nothing
144:14 - affects the persistence of state in our
144:16 - ios simulator
144:18 - so we can just run the
144:21 - chrome version
144:22 - using the command we saw earlier
144:26 - and let's wait for it now let's sign up
144:28 - and our
144:30 - file we are going to select
144:32 - this file
144:34 - i'm going to enter my username as rivan
144:36 - ranavat
144:40 - my email is going to be rewind rana 1.3
144:43 - other gmail.com
144:46 - password will be test123
144:48 - and i can type your abc
144:51 - and we're going to click on sign up
144:56 - and we have gone to the next screen that
144:58 - means our authentication has been
145:00 - successful if we go in the firestore
145:03 - database over here
145:05 - we should see our data coming off
145:10 - and
145:11 - well there are a lot of users that we
145:12 - have created and you can see our email
145:15 - driven.123.gmail.com
145:17 - and a user has been stored so this
145:19 - modeling of data helps us a lot in our
145:22 - apps as you can see you know whenever we
145:25 - want to create a user model we can just
145:28 - uh you know create this and we are
145:31 - prompted of the
145:32 - fields that we have to enter so that we
145:34 - don't miss anything and we'll also see
145:37 - this benefit when we use a state
145:39 - management with provider okay so now i'm
145:41 - in my mobile screen layout and what i
145:43 - want to do is display my username that i
145:45 - had entered in the sign up screen on my
145:47 - mobile screen layout so what i want is
145:50 - if i'm this user
145:52 - i want the uid of this i want to display
145:56 - the name of rivan ranavat right now
145:59 - so how can i do that well
146:02 - let's try to do that first we'll have to
146:04 - convert our stateless widget to stateful
146:06 - widget because we are changing the state
146:08 - in our app right now
146:09 - then we'll have to create a global
146:11 - variable suppose i create the variable
146:14 - string
146:15 - username which is equal to empty now we
146:18 - also called in its state because well it
146:21 - should run in the start of the
146:22 - application so that i get my username
146:24 - and since init state cannot be turned to
146:27 - async and we're going to make calls to
146:29 - firebase it will become
146:31 - a future so what i can do is create a
146:34 - method over here
146:36 - get username suppose
146:39 - then
146:40 - i can create a function get username
146:47 - after that i'm going to turn my function
146:49 - asynchronous i can make my function over
146:52 - here asynchronous but over here i can't
146:54 - make my function asynchronous i can make
146:57 - like this but it will give errors you
146:59 - can try it on your own
147:01 - then
147:02 - we'll
147:03 - have to make calls to firebase firestore
147:06 - dot instance
147:08 - dot collection
147:10 - users
147:11 - so
147:12 - uh so this is the method we use to get
147:15 - the data from the firestore basically we
147:18 - have made uh
147:19 - give me a reference to our collection
147:21 - over here which is users the next thing
147:23 - i want to do is
147:26 - get this part so i want to get through
147:28 - this part and when the uids are known
147:31 - what we can do is
147:33 - put dot doc
147:36 - and in the dock we can put our user id
147:39 - if we know it so what is our user id
147:42 - firebase
147:44 - auth dot instance dot current user dot
147:47 - uid we know about this
147:50 - so whatever uh so we'll go in the user's
147:52 - collection then we'll find our uid with
147:55 - matching to this uid in the documents
147:58 - these are the documents
147:59 - and
148:00 - what we want to do is get this
148:02 - information from here
148:04 - so what i can do is dot get
148:07 - now you can see where get is a type of
148:10 - future document snapshot this document
148:13 - snapshot is given by firebase firestore
148:15 - itself what is a document reference a
148:18 - document snapshot
148:19 - well you can see that we have gone to
148:22 - the till the dock
148:23 - and we are getting a one-time view of it
148:26 - so we can read uh from this only one
148:30 - time so it is called a document
148:33 - and a snapshot like just like a camera
148:35 - you take a picture which is called a
148:37 - snapshot
148:38 - the
148:39 - similar to that so we can just do
148:41 - document snapshot
148:43 - snap which is equal to this and we can
148:46 - await it
148:48 - then we can format the document
148:50 - now we have access to snap and what we
148:53 - are going to do is print snap
148:56 - dot
148:56 - data
148:58 - this is a function uh
149:00 - basically
149:01 - firebase provides us with to get the
149:04 - data of the app there are a lot of more
149:06 - functions like snap dot you know
149:10 - a get request on another snap then snap
149:13 - dot id then we can check if the snap
149:15 - exists or not in this case you're pretty
149:18 - sure that the snap will exist that's why
149:19 - the user is on the mobile screen layout
149:22 - so we are not doing uh making the
149:24 - condition of a snap exists or not for
149:26 - now and if we print snap like this we
149:29 - will get in our console something like
149:31 - instance of document snapshot
149:33 - but we won't get any value so what we
149:35 - can do is console.log snap.data
149:39 - and
149:40 - we can run our app
149:43 - and our app is run and you can see we
149:45 - are getting the data from the firebase
149:48 - firestore so we've got our uid
149:51 - following
149:53 - bio
149:54 - followers email
149:56 - username now i want this username so
149:59 - what i can do is i have my
150:01 - obvious variable over here i can
150:05 - set the state
150:07 - to user name
150:08 - equal to
150:10 - snap
150:12 - dot data
150:13 - and to access snap dot data what we have
150:17 - to do is well you know just type
150:21 - username
150:23 - and we'll have to put a semicolon as
150:25 - soon as we put an exclamation mark over
150:27 - here we get an error saying that this
150:30 - bracket type is not supported for this
150:33 - kind of uh
150:35 - for this data so what we can do to fix
150:38 - it is if we go over over here we can see
150:40 - that it is object and well we can just
150:43 - uh explicitly mentioned that this is map
150:47 - of string
150:48 - and dynamic
150:50 - and we can put this in
150:53 - over here in parenthesis and we don't
150:56 - even need to do this
150:58 - so basically we are since this is an
151:00 - object
151:01 - we and map is a subtype of object
151:06 - so we can just dynamically say that you
151:08 - know
151:09 - our
151:10 - object over here is a map and then we
151:13 - can access this uh
151:16 - username property on this
151:18 - cool now if i run my app and first of
151:21 - all i'll need to print my username over
151:23 - here which i will do dollar username
151:27 - and i'll print i'll refresh my app and
151:29 - you can see rrr printing over here so
151:32 - this is how we can do one time read and
151:35 - get our data
151:36 - but in case our username changes somehow
151:39 - so suppose i go over here and find rrr
151:43 - username
151:46 - and over here i'm going to change my
151:48 - username to
151:50 - rivan ranavat right now
151:54 - i can come over here and see no changes
151:56 - being made in my app
151:58 - the if i refresh
152:02 - it will change to rewind run but this is
152:04 - because uh get user name will only run
152:07 - in the init state function and this uh
152:10 - with the get function we can only get
152:12 - the uh
152:14 - get a one-time view of the data that is
152:17 - present in the reference we have made
152:18 - over here the username doesn't change
152:21 - but what if we want to keep the track of
152:24 - the username that is coming and you know
152:26 - changing every time it changes i want to
152:28 - display the change we look at it in some
152:30 - time but now i want to focus on another
152:34 - issue over here so suppose i have
152:36 - another screen like web screen and i
152:39 - want to do the same thing print my name
152:41 - over here
152:42 - should i just copy all of this function
152:44 - and put it there again
152:47 - like this i'll have to copy this
152:50 - function then go over here
152:53 - then convert this to stateful widget
152:55 - again then paste it over here
152:58 - does this seem you know a good way to do
153:01 - things
153:02 - it doesn't to me
153:04 - so uh i'm going to follow a shorter way
153:08 - of doing it basically we are going to
153:10 - use state management where we are going
153:11 - to get a get data from the database one
153:14 - time
153:15 - so it will reduce our calls to the
153:16 - database and then we are going to use
153:18 - the values that we have gotten every
153:20 - time we are
153:23 - uh using our app we are going together
153:26 - suppose i want the username i can get
153:27 - the username one time
153:29 - cool
153:31 - so let's do that i am going to change
153:33 - this to this is mobile again so for the
153:35 - state management what we're going to use
153:37 - is called a provider package i'll
153:40 - mention this link in the description
153:42 - below
153:42 - so what you can do is copy this you can
153:45 - read this
153:46 - it is a pretty good documentation
153:48 - and uh but if you want to know like the
153:51 - basics of it what we're going to cover
153:53 - in this tutorial i'll be explaining it
153:55 - but if you want to know in detail you
153:57 - can just go through their docs
153:59 - now i'm going to add this in the popspec
154:01 - assist
154:02 - and
154:04 - i'm going to click enter we'll have to
154:06 - stop our app processes
154:08 - and
154:10 - we're going to create another folder
154:12 - called providers
154:16 - i'm going to create a file user
154:17 - underscore provider
154:19 - dot dot
154:22 - now where i'm going to
154:25 - create a class of user provider
154:31 - and we have to extend this class with
154:33 - something known as
154:36 - change notifier
154:38 - so this change notifier provides us with
154:40 - some functionality in our app so
154:42 - basically uh we are inheriting from this
154:45 - chain notifier some of our functions so
154:48 - now if we uh create a global variable
154:51 - user
154:53 - let me import that
154:54 - from my own models user i told to you
154:58 - that you're going to make use of a user
155:01 - right now we can just do user which is
155:04 - nullable
155:05 - and we're going to call it user make
155:07 - sure to make this user a private field
155:10 - because we don't want to because it will
155:12 - cause bugs in our app if we don't use
155:14 - this and in future we'll be able to
155:17 - access user provider
155:21 - suppose we have this class user provider
155:23 - then we'll able we'll be able to access
155:25 - this user on it which we don't want to
155:28 - it will cost strange bugs in our app
155:30 - so we can just put a private field over
155:33 - here so i told you how uh we have to
155:35 - make this private field so how will we
155:37 - access the user field right suppose i
155:40 - want to get this data of the user
155:42 - provider
155:43 - what can i do i can just create a user i
155:46 - can create a get
155:48 - method basically
155:50 - and we'll name it get user and you're
155:53 - going to return this user and to return
155:56 - it we're going to call it that it's not
155:57 - going to be null
155:59 - cool now having that we are going to
156:01 - create a function which is
156:03 - future
156:04 - void
156:05 - and we are going to refresh the user
156:07 - every time
156:09 - so basically this function is there so
156:11 - that we can update the values of our
156:13 - user
156:14 - so
156:15 - what can we do
156:16 - so we want to go to the auth methods
156:18 - class over here and we are going to find
156:20 - the user uh so where we are going to
156:23 - create a function which will help us you
156:25 - know uh get the user details whatever we
156:29 - did in the mobile mobile screen layout
156:31 - first we are going to implement that in
156:33 - uh
156:33 - this uh
156:35 - class over here
156:37 - let's do that we'll have to create a
156:39 - future and we'll have to pass in the
156:41 - model dot user
156:46 - type
156:47 - so
156:48 - we're going to get the user details
156:50 - and our uh
156:52 - and how do we get that information well
156:55 - first of all we'll get our current user
156:57 - so we can just do user
157:00 - current user
157:02 - which is equal to auth
157:05 - we have initialized this over here
157:07 - dot current user
157:09 - and we're going to put an exclamation
157:11 - mark over here
157:13 - and make sure to replace this model user
157:15 - with just user that is provided by the
157:18 - firebase
157:20 - this will not give an error because
157:22 - current user just gives this user and
157:24 - this is provided by firebase auth
157:26 - then we need to create a document
157:28 - snapshot as we saw
157:30 - so we'll get a snap
157:32 - we are going to avoid this
157:34 - try this on your own and see if you
157:35 - remember this
157:37 - firestore
157:39 - dot collection
157:41 - users
157:42 - dot document and what document do i want
157:45 - current user
157:47 - dot uid
157:50 - dot
157:51 - get
157:54 - then
157:55 - we need to return this user so we're
157:58 - going to return model dot user and we're
158:01 - going to pass this snapshot basically
158:05 - but we can't do that right because well
158:08 - it doesn't accept a snapshot so we need
158:10 - to pass in something like this well you
158:14 - know
158:15 - uh
158:17 - we are going to pass in followers for
158:19 - followers we are going to do snap dot
158:22 - data
158:23 - as
158:24 - map
158:25 - string
158:26 - dynamic
158:29 - and
158:30 - we are going to
158:33 - pack this with a parent thesis
158:36 - then we can do
158:40 - and we can call this over here then use
158:42 - follow us
158:44 - is that what we're going to do for every
158:46 - a property
158:47 - i think it's a lot of time wasted so
158:50 - instead what we're going to do is create
158:53 - a function in our user model
158:56 - not this
158:57 - user
158:58 - but you know this user model
159:01 - and over here we're going to create a
159:02 - function uh which will be named of which
159:05 - will basically convert our document
159:07 - snaps which will basically take in a
159:10 - document snapshot and return a user
159:12 - model
159:13 - right that will make our lives much
159:15 - easier and it will be a one-time job for
159:17 - us
159:17 - so
159:18 - we can just do static user
159:21 - from snap it will take in a document
159:24 - snapshot
159:30 - then we are going to
159:32 - first get the snapshot so as we did over
159:35 - here we basically need to you know
159:38 - take the snapshot
159:40 - dot data
159:45 - and
159:46 - we are going to mark it as
159:50 - map
159:53 - string
159:55 - dynamic
159:58 - we'll try using this as snap and we can
160:00 - do snap dot data
160:03 - right because you have called snapshot
160:05 - over here which basically we are
160:06 - referencing while we are initializing it
160:08 - doesn't make sense
160:10 - then we are going to return the user as
160:12 - we did over here
160:14 - now we didn't do that over here and
160:17 - instead we are doing this over here
160:18 - because well it will be a much more uh
160:20 - useful thing to do
160:22 - does uh we'll be separating you know all
160:25 - this stuff that is you know related to
160:27 - user model we won't do that in the auth
160:29 - methods we'll be using that in the user
160:32 - user model
160:34 - seems like a clean way to do stuff
160:36 - then we can call the snap short over
160:39 - here
160:40 - and we can pass in username
160:43 - and we are going to do that for all the
160:46 - properties that we have yeah this is
160:48 - pretty much it now uh with this function
160:51 - we are taking in a document snapshot and
160:53 - returning a user model so that's exactly
160:55 - what we need over here so what we can do
160:57 - is return
160:59 - user which is the model user one
161:02 - dot from snap and we're going to pass in
161:05 - the snap
161:06 - and this is how easy our job uh gets
161:08 - done we did this in the uh user model
161:12 - because well we'll have to use it
161:13 - differently in different places so this
161:16 - will be a good way and we don't have to
161:18 - pass in snapshot username everywhere we
161:20 - use it
161:21 - cool
161:22 - now
161:23 - in our user provider what we can do
161:28 - is and uh we are going to get a user
161:32 - and
161:33 - we are going to await
161:35 - auth methods
161:37 - so let's create a refer
161:39 - let's initialize our odd methods class
161:46 - which is equal to auth methods
161:49 - then we can take this auth methods we
161:51 - are going to
161:53 - call that dot get user details the
161:55 - function that we created right now and
161:57 - we returned a user model from it
162:00 - cool now we can just do user which is
162:03 - our global variable aware we're going to
162:05 - set user to this user
162:08 - and
162:09 - what we're going to call now is notify
162:11 - listeners basically
162:13 - it will notify all the
162:15 - listeners to this user provider that the
162:18 - data of our global variable user has
162:20 - changed so you need to update your value
162:24 - now uh to add some listeners what we can
162:27 - do is go in the main.dart file
162:30 - and uh there are multiple ways you can
162:32 - do
162:33 - the same thing like using a consumer or
162:35 - provider
162:37 - so what i'm going to do is wrap this
162:39 - material app which is our
162:41 - most parent widget to so to say
162:44 - and we are going to wrap this material
162:46 - app with multi provider
162:48 - which is provided by flutter and over
162:50 - here it will take in a list of providers
162:55 - and i've chosen this method because as
162:58 - our app gets bigger and bigger we'll
163:00 - have to use a lot of providers so we can
163:03 - just wrap it with multi-provider and it
163:05 - will be a one-time setup for us as else
163:07 - we'll have to use consumer and provider
163:09 - everywhere
163:11 - and then
163:12 - we're going to use something known as
163:14 - change notifier provider over here we
163:17 - use change notifier
163:20 - but where we are going to use change
163:21 - notifier provider which is provided by
163:23 - the provider package and you're going to
163:26 - pass in create and this will take in a
163:29 - user provider class that we create
163:32 - cool
163:34 - i'm going to format this document now
163:38 - having that in place we are going to
163:40 - save our file
163:46 - now
163:47 - we shouldn't expect our app to you know
163:49 - directly have a state management system
163:51 - because well if we go in our user
163:54 - provider class again
163:55 - we need to call refresh user somewhere
163:58 - this function has to be called somewhere
163:59 - so that this user variable gets updated
164:02 - or else if we print the value right now
164:03 - of user provider uh well we'll get a
164:06 - null value and we don't want that so we
164:09 - have to call this refresh user somewhere
164:12 - where can we do that
164:14 - after our login is done we don't want to
164:16 - call this refresh user on login but so i
164:19 - want to call it somewhere in the
164:21 - responsive layout
164:22 - because it consists of web screen layout
164:25 - and mobile screen layout both else you
164:26 - could have done it in web screen and
164:28 - mobile screen both but since this is the
164:31 - parent element and consists of both of
164:33 - them i'm going to do it here we can
164:35 - convert this responsive layout widget to
164:38 - a stateful widget
164:41 - and we'll have to call init state aware
164:45 - now the init state will have add
164:48 - data over here
164:50 - then
164:51 - we'll have to create add data because
164:53 - it's an asynchronous function
164:57 - then we need to call in something known
164:59 - as user provider
165:01 - underscore user provider
165:05 - which is equal to
165:07 - provider
165:10 - so this is provided by the provider
165:12 - class
165:13 - dot of context this context will be from
165:16 - the state so don't worry about it
165:19 - and
165:20 - we need to just do this much but if we
165:23 - do this much it will constantly listen
165:25 - to the
165:26 - values given by the user provider we
165:27 - don't want that we just need to call
165:30 - refresh user once on it so what we're
165:32 - going to do is turn listen to false
165:34 - basically with this we can
165:37 - get a one time view or one time we can
165:39 - do stuff one time with the user provider
165:42 - class we have
165:43 - then we can await this
165:45 - user provider dot
165:48 - refresh user
165:50 - this is all it takes to store value in
165:52 - our user provider basically the user
165:56 - class that we have in the
165:58 - user provider this class we have stored
166:00 - value in it now
166:02 - and now what we can do is
166:06 - go to our mobile screen layout
166:08 - and we can just do
166:10 - provider
166:12 - again we'll call actually what i'm going
166:14 - to do is create a user class itself
166:18 - then we're going to do user user which
166:20 - is equal to provider
166:23 - dot of context
166:27 - dot now we don't get any functions to do
166:29 - over here because we haven't mentioned
166:31 - the type of the provider we can do that
166:33 - over here and what value are we
166:35 - expecting a user
166:37 - provider
166:39 - dot
166:40 - get user
166:42 - so this isn't a function
166:43 - it will get the user from here
166:46 - and
166:47 - we have the same issue like before we
166:49 - have our firebase auth and our
166:54 - user model
166:55 - so
166:56 - what we need to do is first of all
166:58 - import the
167:00 - user model
167:08 - and we have to import it as model
167:11 - now we can do model dot the user
167:15 - cool now our error is gone so we are
167:16 - going to call the get function over here
167:18 - and it will get us the user so we can
167:20 - just do this we can take this user
167:21 - variable
167:23 - print this over here user dot
167:26 - username all right our app is ready and
167:28 - you can see my username printing over
167:29 - here you'll get this error but don't
167:31 - worry about it this is just a sample
167:33 - what we're doing uh so when we do the
167:36 - final version we won't be seeing any
167:38 - error like this
167:39 - now we have a state management uh with
167:42 - us where we can call anything like i
167:44 - want to call user dot i want to get my
167:48 - email so i can just do this refresh my
167:51 - app and i'll see namandrawan at the
167:53 - gmail.com showing up
167:55 - pretty cool right now let's work on the
167:57 - ui of our app so in the mobile screen
167:59 - layout what we want to do is create a
168:01 - tab bar basically and this tab bar
168:04 - should be present somewhere over here
168:07 - and we should have uh some icons like a
168:10 - home icon
168:12 - then a search icon
168:14 - then an
168:15 - add post icon
168:17 - then uh notifications page icon and then
168:20 - the profile screen icon and based on the
168:23 - user interaction on these buttons we
168:26 - have to show the pages uh that follow so
168:29 - how are we going to do that let's dive
168:31 - into it so we are in the mobile screen
168:33 - layout let's remove our provider stuff
168:35 - from here we don't need that in this
168:37 - case it's just for demo
168:39 - i'll remove all the
168:41 - imports as well
168:42 - now in our body uh let's just keep
168:47 - this is mobile which is going to change
168:50 - in the future we'll have to wrap it with
168:51 - some parent widgets so that we can show
168:54 - the user interaction based you know
168:57 - uh screen
168:59 - now let's add a bottom navigation bar
169:01 - the stuff that is present over here
169:04 - and
169:05 - to do that we'll use a cooper t no tab
169:07 - bar because i want it uh in a style
169:10 - which is ios based
169:12 - you can even use bottom navigation bar
169:14 - widget
169:16 - now in this we need to mention the items
169:20 - and our items are going to be of the
169:22 - type bottom navigation bar item
169:24 - it is going to have an icon and our icon
169:27 - is going to be icons dot home
169:31 - cool and we need to pass in some stuff
169:34 - where like label else it will give you
169:37 - an error
169:38 - and a background color what is the
169:40 - background color going to be well it's
169:42 - just going to be primary color
169:44 - the white color basically
169:47 - cool
169:48 - we are not uh
169:50 - we are not making this a constant
169:52 - because we'll have to change it in the
169:53 - future like the
169:55 - value over here
169:56 - is going to be dynamic the colors and uh
170:00 - so we are not making it uh constant
170:02 - we can just copy this bottom navigation
170:04 - bar items and paste it
170:07 - five times i guess
170:08 - so the second is going to be a search
170:11 - one
170:12 - then the third is going to be to add a
170:15 - post so it will be add circle
170:19 - then a notifications page we can just
170:22 - use you know
170:23 - favorite
170:26 - and we need to paste one more time
170:31 - and
170:32 - this is going to be icons dot
170:35 - person to show the profile screen now if
170:37 - we save this and re-run our app we
170:40 - should see something like this
170:42 - the only problem i have with this is the
170:44 - color so we can change the color
170:47 - by going over here and changing
170:49 - background color to
170:51 - mobile background color which is this
170:53 - color as well now if we save this we
170:56 - should see it coming in sync now i don't
170:58 - want the colors over here to be you know
171:00 - blue i want the selected tab bar to be
171:04 - the color of
171:06 - white or gray
171:07 - so we can make use of conditional
171:10 - rendering
171:11 - and
171:12 - first we have a global variable
171:16 - end page which is equal to zero i'm
171:19 - marking it private
171:21 - then uh we can take this page variable
171:23 - from here and we can go down and uh
171:27 - change the color of the icon based on
171:29 - these so if color so the color over here
171:32 - is going to be
171:34 - based on the page so if the page is
171:37 - equal to 0
171:39 - then we need to show a primary color or
171:42 - a secondary color
171:44 - our primary color is the white color uh
171:46 - and the second color is gray color
171:48 - basically what we telling is the page
171:51 - when it is zero will change to primary
171:54 - and secondary we'll handle the updating
171:56 - value of this page uh in the future in
171:59 - some time
172:00 - so
172:01 - yeah let's see if we are getting white
172:04 - and we are getting white now let's add
172:06 - this logic for each and every icon
172:09 - i'm going to copy this and paste it over
172:11 - here
172:12 - over here the page is equal to one else
172:15 - this will also also show primary color
172:18 - over here we'll set it to two
172:23 - here it will be three
172:29 - you're a four
172:31 - and
172:32 - your uh five
172:34 - then we can format the document
172:37 - and all our warnings are gone because
172:38 - this is based on the conditional
172:40 - rendering it is not a constant value
172:42 - now if we see we are getting it as we
172:44 - wanted now this home icon we don't want
172:47 - so we can take this home icon and remove
172:50 - it from here
172:52 - and we'll have to change these values
172:53 - again i'll do that
172:58 - now we can refresh and see our app
173:00 - coming
173:00 - so now the next thing you want to do is
173:03 - based on the so whenever the user clicks
173:05 - on one of these icons we need to make
173:08 - sure that the page value has updated
173:11 - and based on this page value we are also
173:13 - going to show the screens now we need to
173:15 - conditionally render the icon color so
173:18 - we uh so cupertino tabber provides us
173:20 - with an ontap function so whenever any
173:23 - uh bottom navigation bar item is clicked
173:25 - over here we can change the value so we
173:28 - can create a function called navigation
173:30 - tab
173:34 - we can take this function and paste it
173:36 - over here
173:38 - void navigation tab
173:40 - and
173:41 - page
173:48 - and
173:49 - we are going to make some use of
173:50 - something known as a page controller so
173:53 - let's create a page controller we'll do
173:57 - late
173:58 - page controller and we're going to name
174:00 - it page controller itself we're going to
174:03 - create an init
174:04 - state and in the united states we are
174:07 - going to
174:08 - set page controller equal to the page
174:11 - controller
174:13 - and we are also going to create a
174:15 - dispose method and right now itself
174:18 - we'll call the page controller.dispose
174:20 - method else we'll forget that
174:24 - cool having that
174:27 - in the navigation tab uh what we want to
174:29 - do is
174:30 - we want the page controller
174:33 - to jump to that page so we can just do
174:36 - jump to page and we can pass in the end
174:38 - of page
174:40 - so basically we are telling the page
174:41 - controller that we have over here to
174:43 - jump to that page we won't see any
174:45 - difference as such because we haven't
174:47 - given passed in the page controller
174:49 - anywhere basically this will act as a
174:52 - link between uh the tab bar and the
174:55 - widget that we are going to add in the
174:57 - body and that widget is a page view
175:04 - and this page view will accept a
175:07 - parameter of children
175:09 - then
175:10 - after that it's going to accept a
175:12 - parameter of controller which is which
175:14 - we're going to pass in as page
175:15 - controller and then an on page changed
175:18 - function
175:19 - where we'll pass in on page change
175:21 - function we'll create that in a while
175:23 - but basically this children is a list of
175:25 - widgets that we need and in the list of
175:27 - widgets it will uh conditionally render
175:30 - based on the
175:31 - bottom navigation bar item
175:33 - so
175:34 - uh suppose our
175:37 - bottom our page index is zero right now
175:40 - and we click on the search icon over
175:43 - here we click we need to show a search
175:45 - screen so if we put text as
175:49 - feed over here and i'll copy this to
175:52 - show you the demo
175:54 - we'll have search over here
175:57 - and order add post screen
175:59 - then notif
176:01 - and profile
176:02 - and we save this and we have to create
176:04 - this on page change function but we'll
176:06 - do that in a while
176:09 - so whenever this gets tapped over here
176:12 - we see the search coming up
176:15 - then an add post
176:17 - then
176:18 - the
176:20 - notification
176:21 - and then profile
176:23 - that's how we wanted we also want to
176:24 - change the color of this
176:26 - which will be done uh with this on page
176:29 - changed function over here we can
176:31 - uncomment this and we can create a
176:33 - non-page changed function which will be
176:36 - of the type void so void on page change
176:39 - it will receive a page
176:42 - page
176:43 - argument then we can set the state to
176:46 - from page
176:47 - to this page
176:49 - cool now we can refresh our app and now
176:52 - you can see this color changing and our
176:54 - screen over here changing as well
176:57 - uh the next thing we want to do is
176:59 - basically if we do this we are able to
177:02 - change the screen right we don't want
177:05 - that because the real instagram doesn't
177:07 - have that feature
177:09 - we are able to uh change the screen
177:11 - based from navigation items only and not
177:14 - from here
177:16 - so
177:16 - what we can do is
177:18 - add something known as physics over here
177:21 - and the physics will take in scroll
177:23 - physics we want the physics of never
177:25 - scrollable physics
177:28 - which will allow us to not you know have
177:30 - this cool effect
177:32 - i'll put it as a constant and now if i
177:34 - try to change you can see we are not
177:36 - able to change it
177:38 - cool now we have a working tab bar so
177:41 - the next thing we want to do is create
177:43 - the add post screen ui basically
177:45 - whenever we click this button we should
177:48 - see the add post
177:49 - screen ui so
177:51 - first let's decide how our ad post
177:53 - screen is going to look like
177:55 - so i have my marker over here basically
177:57 - we want a center button over here which
178:00 - will basically tell us to upload a file
178:03 - from our image
178:04 - right or from our camera we're going to
178:06 - add that options over here and whenever
178:09 - we click that button and we select a
178:10 - file this button should erase off we
178:13 - don't want to see this button
178:15 - and we need to see other ui like we want
178:18 - to show
178:20 - a profile over here profile image of the
178:22 - user and app bar which says post to then
178:26 - an image
178:28 - that we have selected and
178:30 - an option to well display our
178:32 - description
178:34 - like whatever bio we want to put right
178:36 - so let's try to make that kind of stuff
178:39 - so
178:39 - over here in our application we're going
178:42 - to create a screen named as
178:46 - add
178:47 - post
178:48 - screen dot dot
178:52 - and we are going to import the material
178:54 - package as usual
178:57 - then we are going to create a stateful
178:59 - widget over here because we are going to
179:00 - make use of description controller and
179:02 - everything so we need the nh state and
179:04 - dispose method
179:05 - then we are going to create the add post
179:07 - screen class
179:09 - over here i am going to return a
179:11 - container because a centered button is
179:13 - what i want so actually i'll just
179:16 - replace this container with center
179:18 - widget
179:19 - then we are going to return a child of
179:22 - icon button as we mentioned previously
179:24 - then in the icon button we are going to
179:26 - add an icon of
179:29 - ikins
179:31 - dot upload
179:35 - and this is obviously going to have an
179:37 - on pressed function because it is an
179:39 - icon button
179:40 - so let's try to see this on a screen uh
179:43 - we'll have to take this ad post screen
179:46 - and we'll have to uh
179:49 - replace this with this over here but
179:51 - actually what i like to do is
179:53 - i'm going to rename this dimensions to
179:57 - a file named as global variables
180:06 - so where we can add most of the global
180:08 - variables that can change over time so
180:10 - that we are not in use of it right
180:12 - so
180:13 - we can add this
180:16 - uh
180:16 - what we are going to call it we are
180:18 - going to call it constant
180:21 - home screen
180:23 - items let's say
180:25 - and this is going to be a list of
180:27 - widgets
180:28 - so
180:29 - we can copy this from here we'll replace
180:32 - this as and when you know we get another
180:34 - widget we create another widget for now
180:36 - we have the add post screen we can add
180:38 - that
180:40 - cool now let me format the document
180:43 - now we can replace this children
180:45 - with
180:48 - home screen items
180:52 - having that in place let's rerun our app
180:54 - and see if we're getting the output and
180:56 - we are getting a centered widget of
180:59 - uploading now let's try to create the
181:02 - description or you know the ad post ui
181:05 - we had this we have discussed so what
181:07 - i'm going to do is
181:09 - for now i'm going to uh comment this
181:12 - and we're going to return a scaffold
181:15 - because
181:16 - this widget will be only visible when
181:18 - our file is not selected from the
181:20 - gallery we haven't added anything
181:23 - with related to functionalities yet so
181:25 - i'm just going to comment this and we
181:26 - are going to work on the plain ui of our
181:29 - app
181:29 - so we are in our app bar we are going to
181:32 - have an app bar
181:35 - uh we're going to have a background
181:37 - color of mobile background color else it
181:39 - will give us another background color
181:42 - then we need a an icon over here which
181:45 - basically tells us to go back so that
181:48 - you know we can clear off the image if
181:50 - we have any so we're going to create an
181:52 - icon button for that
181:54 - and we're going to have an icon
181:56 - our icon is going to be
181:59 - icons dot arrow back
182:03 - then we are going to have an on pressed
182:05 - and our onpress is going to be null for
182:07 - now i mean an empty bracket for now not
182:10 - null
182:12 - then we are going to have a title
182:14 - our title is going to say
182:18 - well it will be a text and it will say
182:22 - post
182:23 - 2
182:24 - then if we keep it like this our title
182:27 - will be center aligned let's see it in
182:30 - action
182:31 - if we go where we can see post 2 it is
182:34 - in center but i don't want that
182:37 - so what i'm going to do is put center
182:39 - title to false
182:41 - then we need
182:43 - we can save this and we can see the
182:45 - title going there so over here i want to
182:48 - create a post button from which we can
182:51 - you know click and we can get post so
182:53 - we're going to add an actions
182:56 - and actions is going to be a text button
183:01 - on pressed is going to be nothing for
183:03 - now
183:03 - and our child is going to be a constant
183:07 - text
183:08 - which says post now we will have some
183:11 - styling over here because we wanted blue
183:14 - so we can just do text style
183:16 - then our color can be
183:18 - colors dot blue accent
183:21 - you can just use the blue color that is
183:23 - mentioned in the colors dot dot file we
183:26 - can then have a font weight of
183:30 - font weight dot bold and a font size of
183:33 - 16.
183:34 - let me format the document
183:38 - i'll even put a comma ir so that we get
183:40 - the formatting correct
183:42 - now let's see our app
183:45 - and it looks pretty cool
183:47 - now uh we need to work on the
183:50 - next section which is the body section
183:53 - so we can get out of the app bar widget
183:58 - and have a body
184:00 - and a body now we need to work on the
184:03 - post form kind of thing so
184:05 - we
184:06 - want a description controller then our
184:09 - circle avatar with the profile photo and
184:12 - the image we have selected
184:14 - so
184:16 - the
184:16 - we'll add column
184:20 - and
184:21 - then in the column we're going to have
184:23 - children we have added a column because
184:25 - uh below the app bar we need to show you
184:27 - know a
184:28 - linear indicator while this is being
184:30 - posted for now we are not going to add
184:32 - the linear indicator we will add when
184:34 - the loading process has to be shown but
184:37 - we can have a column right now
184:40 - then we'll have a row
184:42 - and then the row will have main access
184:45 - alignment to main access alignment dot
184:47 - space around
184:49 - and cross access alignment to start from
184:52 - the start
184:54 - then it will have children and the
184:56 - children will have circle avatar
185:00 - we will have to provide a background
185:02 - image and it will be a network image and
185:06 - we'll have to find a
185:09 - good uh background image for our file so
185:11 - we can just go on unsplash.com
185:14 - and find a good
185:16 - profile picture for now copy
185:19 - we can just open the image in new tab
185:22 - and
185:23 - copy this from here
185:25 - that should work
185:27 - so we can pass this over here
185:30 - now
185:31 - uh
185:33 - our circle avatar should show up
185:36 - and you can see it's showing up in the
185:37 - center now but we'll add some stuff
185:40 - using which it will go in the left side
185:43 - so the next thing you want to add is a
185:46 - size
185:47 - box and within the size box we can have
185:49 - a text field so
185:52 - the width is going to be medium we want
185:55 - it responsive so we are going to make
185:56 - use of media query and
185:59 - it's going to be the total width of the
186:01 - screen size and we're going to multiply
186:04 - it with the 0 0.3 constant value
186:07 - you can play around with these values
186:09 - and find whatever is suitable for you
186:12 - then we're going to add a text field
186:15 - note that you know we are only adding a
186:18 - width so we are using size box over here
186:20 - if you wanted to add extra features you
186:22 - know like padding and everything you can
186:24 - just use a container instead
186:26 - then over here we need to passion pass
186:29 - in a decoration
186:31 - and it will be an input decoration
186:35 - then we need to pass in a hint text
186:37 - which will be right
186:41 - write a caption
186:45 - not a comma first
186:48 - then we need to pass in a border of
186:51 - input
186:54 - border dot none
186:56 - and
186:57 - we are going to
186:58 - mag we are going to have a max lines
187:01 - property using with the length of the
187:03 - controller can increase and will have a
187:05 - max length lines capacity so we are
187:09 - going to pass in as 8 the default is 1 i
187:11 - guess
187:13 - then
187:16 - having that in place we need to create a
187:19 - rectangle image on the side
187:21 - let's see if we're getting that write a
187:23 - caption we're getting that
187:24 - now we can
187:27 - create another sized box
187:31 - and we're going to have a height of
187:34 - 45
187:35 - and a width of
187:36 - 45 then we're going to have a child of
187:40 - aspect ratio basically this helps to
187:43 - keep
187:44 - your the children and the child in the
187:46 - aspect ratio consistent uh with the
187:50 - width and the height so we're going to
187:52 - add a value of 487 by 451. all of these
187:57 - values are just you know trial and error
187:59 - i just formulated this like them only
188:03 - then a child
188:05 - will pass in a container
188:08 - and we have passed in a container
188:09 - because we want to add decorations
188:12 - like an image so we'll have box
188:15 - decoration
188:19 - and we're going to have image property
188:21 - and image will take in a decoration
188:24 - image
188:26 - and decoration will image will have a
188:28 - image of whatever we pass in
188:31 - and it will be a uintate list but you
188:34 - know uh
188:35 - we can just take this uh
188:38 - image that we had
188:40 - copy image address and we can paste that
188:42 - only we'll change as and when we want
188:45 - we want it to be of type of box fit dot
188:49 - fill
188:51 - alignment in the top right top center so
188:53 - we'll do fractional
188:56 - offset dot
188:58 - top
189:00 - center we're going to save this
189:04 - we're getting these warnings because uh
189:06 - for now the network image and all are
189:08 - you know a constant but this will change
189:11 - over time so i'm not making any changes
189:14 - now if we save and go to our right we
189:17 - can see that it's looking pretty cool
189:19 - but this description controller looks a
189:21 - bit off so what i'm going to do is
189:23 - increase the width and change it to 0.4
189:28 - now we should see all of them coming in
189:29 - place looks pretty cool
189:31 - still we can give it some width you know
189:33 - 0.45 let's try with that
189:36 - and yeah looks pretty cool and after
189:38 - that we after this size box what we can
189:42 - do is
189:43 - add a divider
189:47 - so that you know separation is seen
189:50 - it will be a line you know like a
189:52 - grayish line
189:57 - now this is done now let's work on the
189:59 - functionality of selecting a file first
190:02 - so what do we need to do so whenever we
190:04 - get the centered icon of icons upload we
190:07 - need to click on that then we'll get a
190:09 - set of dialogues let me draw it out
190:13 - so we'll get a set of dialogues like
190:15 - this
190:16 - and it will have three options you know
190:19 - select from it will be select from
190:22 - gallery
190:24 - select from a
190:26 - camera
190:27 - and cancel option
190:30 - so we want that to show up and whenever
190:33 - cancel is click we need to pop up this
190:35 - if gallery then we need to pick image
190:37 - from gallery or from camera and then
190:40 - after the image is selected we need to
190:42 - show the screen over here let's work on
190:44 - that so what i'm going to do is create a
190:48 - function
190:49 - which will be
190:51 - select called select image
190:54 - and basically what this function will do
190:56 - is return a simple dialog box
190:59 - and over there we can just have a set of
191:02 - options that we discussed
191:04 - so it will be select of image
191:06 - now
191:07 - over here we are going to take in a
191:09 - build context
191:11 - i'm going to call it context then it
191:13 - will be asynchronous
191:15 - and we need to return a show dialog box
191:18 - this is how you can you know create the
191:20 - show dialog box then the builder
191:23 - and the builder will take in a context
191:29 - then
191:33 - over here we need to return a simple
191:35 - dialog box
191:37 - there are various type of dialog boxes
191:39 - like you know alert dialog simple dialog
191:42 - you can check it out
191:43 - i'm going to add simple dialog then
191:45 - we're going to have a text that says
191:48 - create a post
191:53 - then we need have children
191:55 - and the children will consist of simple
191:58 - dialogue option
192:01 - and where we're going to add some
192:03 - padding so we're going to add an edge
192:05 - and says dot all 20 if we don't then all
192:08 - of the options will get squeezed and it
192:10 - won't look good
192:11 - then we need to have a child of constant
192:15 - text
192:16 - which says
192:17 - take a photo
192:21 - then we'll have an on pressed function
192:24 - which will be asynchronous
192:26 - and uh whenever we take a photo what do
192:28 - we want well first of all what we want
192:31 - is when the dialog box shows up we need
192:33 - to uh
192:35 - dismiss that dialog box first
192:38 - and then uh go to the gallery and then
192:41 - uh to take up the camera so what we'll
192:43 - do is
192:44 - navigator
192:46 - dot of context
192:49 - dot pop you know just to remove the
192:51 - widget from our screen the simple dialog
192:54 - box
192:55 - then
192:56 - we will have a uint 8 list file that
193:00 - will be coming up
193:02 - uh when we
193:04 - use the function that we created called
193:06 - pic image
193:09 - you can see it in our utils file the
193:11 - pick image file that we had created we
193:13 - accepted a source
193:15 - then we
193:16 - used the image picker dependency then we
193:19 - picked the image from the source we
193:20 - mentioned and we returned the file if
193:23 - it's not null
193:24 - that's what we're going to do and since
193:26 - this is a take a photo option we're
193:28 - going to mention the image source as
193:31 - camera
193:33 - now
193:34 - what we're going to do is we need to
193:37 - make these changes in our you know the
193:41 - ui part as well so we need to call the
193:43 - set state so for that we even need a
193:47 - global variable so we can do uint8
193:50 - list
193:52 - and we're going to call it file this can
193:54 - be nullable because in the start it is
193:56 - going to be null
193:57 - and we are going to set the state to
194:00 - you know file equal to file
194:04 - not doing that we should be able to see
194:06 - the camera but this won't be visible you
194:09 - know in the
194:12 - ios simulator because there is no camera
194:14 - in the is simulator i'll show the same
194:16 - to you in the android version after all
194:18 - of our options have been created
194:21 - so let's work on the gallery function
194:24 - which will work in the ios simulator we
194:26 - can copy this
194:28 - and paste it down
194:31 - and over here we can type choose
194:35 - from gallery
194:41 - and we're going to mention the image
194:42 - source as image source dot gallery
194:46 - then we can just save this as well
194:49 - now let's try to work over here so if we
194:52 - go over here
194:53 - we have we are getting the screen
194:55 - because this is the screen we are trying
194:56 - to
194:57 - render we have commented this
195:00 - now uh let's uncomment this
195:04 - widget that we are returning
195:06 - and let's add some conditions over here
195:09 - so
195:09 - when is our image not selected whenever
195:12 - the uh file over here is null in the
195:15 - start it is null right so what we can do
195:18 - is
195:19 - put a condition that if the file that we
195:22 - have
195:23 - is
195:24 - equal equal to null
195:26 - then we need to return this so that the
195:28 - user can select the image or we need to
195:30 - return the scaffold
195:33 - now we can format this document and we
195:35 - should see a centered widget
195:38 - cool
195:38 - now if we if i click over here i should
195:41 - get the show dialog option box
195:44 - so i need to
195:46 - take the select image from here
195:48 - and
195:51 - put this in the icons upload place so we
195:54 - can do
195:55 - select a match and we need to pass in an
195:58 - argument over here which accepts a build
196:00 - context so we can pass in the context
196:03 - now let's try to run our app and see if
196:05 - it works
196:07 - so i click over here and i get the
196:10 - option of take a photo or choose from
196:13 - gallery i'm going to choose from the
196:15 - gallery and our gallery shows up now if
196:18 - i click over here
196:20 - i even get redirected to the other page
196:23 - because my file has not been null now it
196:26 - has some value
196:28 - so now uh let's uh display whatever you
196:31 - know the
196:32 - image that we have and the user
196:35 - uh profile
196:36 - so first let's uh display the user
196:38 - profile that should be fairly easy
196:40 - because we have
196:41 - we have a state management ready
196:44 - so we can do that
196:46 - we'll have a final
196:49 - user
196:51 - user
196:52 - and we're going to have provider
196:55 - and order of context it will have a type
196:58 - and that type will be user
197:01 - provider
197:03 - and the user provider has a function as
197:05 - a get method basically which is get user
197:09 - we have seen all of this i'm not
197:10 - repeating all of this stuff again
197:13 - now what we can do is
197:16 - instead of having this background image
197:18 - over here we can remove this stuff from
197:20 - here
197:23 - and instead put user
197:26 - dot
197:28 - photo url
197:29 - and we can format this document and
197:32 - let's see if we're getting that
197:35 - i'll go over here i'll select an image
197:38 - choose from gallery
197:41 - and over here we can see our profile
197:44 - picture that we had selected coming over
197:45 - here now let's try to display the image
197:48 - that we had selected over here so
197:51 - our image is in the form of you and 8
197:54 - list
197:55 - and it is in the global variable file
197:59 - so we can go down
198:01 - and we had seen earlier that
198:04 - to display a uint8 list we don't use a
198:06 - network image that is for the
198:09 - uh you know the web stuff the url that
198:12 - we have
198:13 - and
198:14 - to display a uintah list we use
198:16 - something known as memory image we have
198:18 - seen that
198:20 - so we are going to pass in file
198:22 - but we are going to pass in file
198:25 - with an exclamation mark
198:27 - because we don't want it to be null and
198:30 - it will never be null
198:32 - because we are adding the conditions
198:33 - over here
198:34 - in the top right
198:37 - now if we try to upload an image we can
198:41 - choose from gallery
198:43 - and
198:44 - we're going to select the waterfall we
198:45 - can see the waterfall showing up
198:47 - and we have all of this it works pretty
198:50 - well now let's try to you know have this
198:53 - description
198:54 - that we can have the value of so we need
198:57 - to have a text editing controller
199:00 - so let's go at the top
199:04 - create a text editing controller
199:07 - which is named as
199:09 - a description controller
199:15 - which is going to be a text editing
199:20 - controller
199:22 - we can take this description controller
199:24 - from here
199:25 - and pass it in the text field
199:28 - controller
199:30 - cool we have that
199:32 - now uh the next thing you want to do is
199:35 - well
199:36 - whenever we click over here
199:38 - and choose from gallery oh we also have
199:41 - to add a
199:42 - simple dialog option of cancel first
199:45 - let's do that and jump on to other stuff
199:48 - so
199:49 - we can go on the top we can copy this
199:52 - from here
199:53 - and paste it again
199:56 - and this is going to have the option of
199:59 - cancel
200:01 - and we don't want any of this stuff
200:03 - happening we just want don't want to see
200:05 - the
200:06 - simple dialog box option to show up
200:08 - again
200:09 - so we're going to remove the async as
200:11 - well from the con over here now let's
200:14 - try to run our app and see you're
200:16 - getting the cancel option if i click
200:17 - over here the simple dialog option gets
200:20 - removed
200:21 - now let's try to choose from gallery and
200:23 - if i select this image
200:26 - i'm seeing that over here now whenever
200:29 - we click on the post button first of all
200:31 - we should see a loading indicator linear
200:33 - loading indicator over here
200:35 - that shows up like this
200:37 - and then we need to post it to our
200:40 - firestore which is over here
200:42 - in the post section over here which is
200:44 - another collection that we can make
200:46 - and uh it will get stored in the storage
200:49 - we have had a look at both of them and
200:52 - how we can do both of them let's revise
200:54 - them if you want you can pause the video
200:56 - right now and try to do it on your own
200:59 - you can structure it uh
201:01 - however you want
201:03 - it's uh there's no need to follow the
201:05 - same thing that i do but you should get
201:07 - the output and the same
201:09 - you know stuff happening over here so
201:11 - what do we want to do whenever we click
201:13 - on the post button we should be able to
201:15 - you know save all of this stuff so we
201:18 - can create a
201:19 - function over here on press and we can
201:22 - call it
201:24 - post
201:26 - image
201:27 - we're going to create that function
201:29 - so let's do it at the top
201:33 - over here void
201:35 - post
201:36 - image
201:38 - and it will require a set of arguments
201:40 - that we need but even before that i just
201:42 - realized that we've used the description
201:44 - controller but we have not set a dispose
201:47 - method to it let's do that
201:49 - i can go down at the bottom and we'll
201:51 - have a dispose over here
201:54 - and our dispose is going to be
201:57 - description controller dot dispose
202:00 - now in the post image we will accept a
202:03 - set of you know arguments one is uid
202:08 - then a username
202:11 - and a profile
202:13 - image
202:15 - we are accepting all of the arguments
202:17 - from here because we have a provider
202:19 - over here and uh it's in the build con
202:22 - build for build method so we can just
202:24 - pass a pass post image uh
202:28 - over here and we can pass in the from
202:29 - the function here as well
202:32 - so now
202:34 - what we can do is
202:36 - put a try catch block
202:39 - because you're going to make some
202:40 - asynchronous calls here
202:43 - and
202:45 - it's going to be asynchronous
202:49 - then uh we're going to create an upload
202:53 - post function but we're not going to do
202:54 - that over here as we have seen multiple
202:56 - times that we have done for auth methods
202:58 - and storage methods we're going to
203:00 - create another file which will be called
203:02 - firestore methods dot dot
203:09 - and in the firestore methods we are
203:10 - going to create a class like we did
203:12 - before
203:14 - firebase
203:16 - not firebase fire
203:19 - store methods
203:23 - and we're going to create an instance of
203:24 - the firebase firestore class
203:28 - which will be this
203:30 - we are going to have firebase
203:33 - firestore dot instance
203:38 - then we need to create a function called
203:40 - upload post which will help us in
203:43 - uploading the post so what we can do is
203:45 - future of type string because we will
203:48 - create a rest variable as we have done
203:49 - before then we'll upload the post
203:54 - and to upload a post what all stuff do
203:56 - we need
203:57 - well first we will have an asynchronous
203:59 - function we will have a try catch block
204:02 - aware all of this stuff you have done
204:04 - multiple times and i think you should be
204:07 - doing it by your own
204:09 - then uh what do we need to do first
204:13 - first we can create a res variable which
204:15 - is
204:18 - some error
204:20 - occurred
204:23 - then over here we first need to uh
204:25 - upload our image to our firebase storage
204:28 - and then we need to uh get the download
204:31 - url of whatever we store in the storage
204:34 - and store it in our firestore database
204:36 - so let's try to do that so what we can
204:39 - do is well we will receive a photo url
204:45 - whenever we do
204:46 - storage methods
204:49 - dot
204:50 - upload image to storage if you don't
204:53 - remember what upload image to storage
204:54 - was
204:55 - it was this function where we are
204:57 - basically
204:59 - asking for the child name and we are
205:00 - going to create a folder at that child
205:02 - name and we are going to
205:05 - upload our image basically and get the
205:07 - download url of this image
205:09 - cool
205:10 - now
205:11 - we can go there and we can have a child
205:14 - name what is our child name going to be
205:16 - posts this was profile pics now we want
205:19 - posts
205:21 - then our file is going to be a file
205:24 - we're going to access this from the user
205:26 - so what you can do is
205:31 - string description
205:34 - then a uint 8 list
205:37 - file
205:39 - and a string of uid and our
205:43 - is post is going to be true
205:47 - and we need to await this because it
205:49 - will return a future string
205:51 - cool now having that in place let's uh
205:55 - create a post and as we did for you know
205:58 - user like in the auth methods we created
206:01 - a class of user we're going to do the
206:04 - same for the post
206:05 - so
206:06 - we can go over here and create post dot
206:09 - dart file
206:11 - then
206:12 - we can basically copy all of this and
206:15 - paste it in the post dot dot file and it
206:17 - will have a set of different
206:19 - properties like description
206:22 - you know the uid of the user
206:25 - then the
206:26 - username of the user
206:30 - then the post id
206:32 - each post will have their own unique
206:34 - identifier
206:35 - then the date
206:37 - published
206:39 - a post url
206:43 - a profile
206:44 - image
206:48 - and we also need a likes property we are
206:52 - not adding the comments property because
206:55 - that is going to be a sub collection
206:58 - cool now let's require all of this
207:01 - so i've added all of these values i've
207:03 - required all of them
207:05 - uh all of these construct from the
207:07 - constructor then i'm
207:08 - uh
207:10 - making the two json function and then
207:12 - from snap function i've replaced all of
207:15 - these values it should be fairly easy
207:16 - for you to do so
207:19 - then the next thing you want to do is
207:20 - well create a post
207:22 - so to do that we need to create a post
207:25 - so let's do post
207:26 - and we need to require the post well we
207:29 - haven't renamed this
207:31 - so i'll rename that
207:33 - we'll call it post
207:34 - we'll have to remove all of this
207:41 - now let's try to use post we have our
207:43 - model class ready
207:48 - and do post and the post is going to be
207:51 - post
207:52 - and we are going to have a set of you
207:55 - know again
207:57 - uh
207:58 - construct arguments so we can pass in
208:00 - the description
208:02 - so
208:02 - let's
208:03 - pass in the description we have from the
208:08 - argument that we have here from the
208:10 - parameter
208:11 - then a uintatelist file so we can call
208:15 - it
208:18 - after description we need to add uid
208:20 - we'll add uid
208:22 - then username we have to get that from
208:25 - the user so we'll do string username
208:30 - then username
208:32 - the next thing you want to add is
208:35 - a post id
208:37 - for the post id we won't be able to add
208:39 - any uh you know the user id because uh
208:42 - there will be uh
208:43 - a two to three post by
208:45 - uh the same user so that will get
208:48 - overridden and we will see one type of
208:50 - files for all the posts that a user
208:52 - makes so we'll have to generate
208:54 - different post ids which we'll have a
208:56 - look at in a while
208:58 - then we'll have a date published
209:00 - then the date published will be the date
209:03 - that is right now
209:05 - so we can do it by datetime.now
209:08 - then
209:10 - we'll have
209:12 - post url and the post url is going to be
209:14 - the photo url that we're getting over
209:16 - here
209:18 - then we need to have a profile image and
209:21 - a profile image we have to accept it
209:23 - from the user so we can do that string
209:26 - profile image
209:28 - and we can pass in profile
209:31 - image
209:32 - now let's see what error we are getting
209:35 - now it's written that the post
209:39 - is written that the post url has to be a
209:41 - list so we didn't edit it this well
209:44 - so let me edit it out
209:46 - so our profile url is going to be a
209:49 - string and a profile image is going to
209:52 - be a string
209:54 - and we should not be getting this error
209:56 - and the date published
209:57 - is going to be
210:01 - final date published
210:03 - cool
210:08 - now what we want to do is work on the
210:10 - post id how can we get the post id
210:12 - to get the post id we need unique
210:14 - identifier every time firebase used to
210:17 - take care of that but you know now we
210:19 - need to do something else
210:21 - so
210:22 - we're going to do
210:23 - we're going to make use of a package
210:25 - called uuid
210:26 - and this will help us generate a unique
210:29 - identifiers how it will uh give us if
210:33 - you read through the docs it will tell
210:35 - you that it provides you with two
210:37 - functions uh when we initialize it which
210:40 - is something called v1
210:43 - and a v4
210:44 - v1 uh creates a unique identifier based
210:47 - on the time so it will give us a unique
210:50 - id every time so we need not worry about
210:53 - having the same id
210:55 - so what we can do is
210:58 - create a post id we'll do string post id
211:02 - and we can do
211:03 - u
211:04 - u id
211:06 - and we'll call dot v one
211:09 - and now with this post id we can pass in
211:11 - this post id over here
211:13 - and let's see what error we are getting
211:15 - over here
211:17 - we have not passed in likes and our
211:19 - likes for now is going to be an empty
211:21 - container cool now we can take this post
211:24 - and upload it to firebase because over
211:26 - here we have uploaded to our storage now
211:29 - upload it to our
211:30 - firebase so what you can do is firestore
211:34 - dot collection
211:36 - post
211:38 - dot
211:39 - doc and our document i will have post id
211:42 - because well it will be a collection of
211:44 - posts then like we had for user a
211:46 - different
211:47 - you know a different id uid of the user
211:50 - it will have a post id for every user as
211:54 - you can see
211:55 - then uh we'll have dot set again and we
212:00 - saw earlier that we need to pass in this
212:02 - post and we can't pass in this post
212:04 - directly we need to convert it into a
212:06 - map so we can do dot to json
212:10 - and we can
212:11 - you know
212:12 - format the document
212:14 - after this is done we can turn res to
212:17 - success
212:19 - don't forget to do that
212:21 - and we're going to have res equal to
212:23 - error dot to string
212:26 - and we can return res now you
212:29 - this will work you can try it on your
212:31 - own but before doing that what i want to
212:33 - show you is
212:35 - if you go to the upload image dot to
212:37 - store upload image to storage function
212:39 - you can see we are asking for a boolean
212:42 - that is a post or not so why are we
212:45 - asking that
212:46 - so suppose uh
212:48 - we have this we are creating a reference
212:51 - and we are creating a child of let's say
212:54 - you know
212:55 - a profile pic suppose
212:58 - so this works for the user when the user
213:01 - is adding image so we can save it with
213:03 - the file name of their uid because we
213:05 - know that the user is going to have only
213:07 - one profile pic but in the post section
213:10 - we know that the user can have multiple
213:12 - uh
213:13 - files that have been stored because the
213:14 - user can post multiple times so we don't
213:17 - want this reference over here we want to
213:19 - create another reference so what we can
213:21 - do is
213:23 - we will check over here if
213:25 - is post so that means if we are
213:28 - uploading image to storage and if you
213:30 - are uploading a post to the storage what
213:33 - we can do is create a unique id
213:36 - that we did like before uuid
213:40 - we can then have dot
213:42 - v1
213:43 - and we can then have the existing
213:46 - reference
213:47 - which is this one
213:49 - to
213:49 - ref dot
213:51 - child and then an id
213:54 - so what we're basically doing is
213:56 - we will have a child of posts then we'll
214:00 - have a child of uh then a folder of you
214:03 - know uh the uid of the user and then
214:06 - over here we if it is a post we can just
214:09 - uh generate a unique id for the post and
214:12 - then the name of the post is going to be
214:15 - that unique id
214:17 - i hope that's clear to you if not we'll
214:19 - see that in action in some time like
214:21 - whenever we store it and we will see the
214:23 - folder structure that's happening and
214:25 - then you can relate
214:27 - so now over here let's try to avoid the
214:29 - error that we're getting so what we can
214:31 - do is string res
214:34 - which is equal to away
214:36 - and we need to call in the firestore
214:38 - methods
214:40 - and we can upload the post and the post
214:43 - will have a description controller
214:48 - dot text
214:50 - we have to pass in a file so it is going
214:52 - to be underscore file and it is not
214:55 - going to be null so we have to add an
214:56 - exclamation mark and rest everything is
214:59 - the same name
215:01 - and we can format this document
215:05 - then uh the next thing you want to do is
215:08 - if the rest is equal equal to success
215:17 - we want to let user know that the image
215:20 - has been posted
215:22 - so we can just show a snack bar which is
215:25 - provided over here that we are using
215:27 - again in the utils uh
215:29 - dot dot file
215:31 - and the content is going to be
215:34 - posted that's it and we can put a
215:37 - semicolon
215:39 - then
215:39 - what we can do is put an else condition
215:43 - and we can show a snack bar
215:46 - and over here we are going to pass and
215:48 - dress whatever error we are getting
215:50 - over here as well we can just do
215:54 - show snack bar
215:56 - and the content is going to be a
215:59 - error that we get dot to string
216:02 - and we're going to format this document
216:05 - whatever are we getting if we go down
216:07 - you can see the post image we have to
216:09 - pass in some constructors over here uh
216:11 - some arguments over here so we can do
216:13 - post image and we have to first pass in
216:16 - user id so we can do user dot uid
216:19 - then user dot username
216:22 - and then user dot photo url
216:26 - we can format this document
216:28 - and we can restart our app
216:31 - and let's see if our setup is working
216:34 - correctly or not
216:36 - so if we click over here on the files
216:38 - we can select from gallery i'm going to
216:40 - select this image
216:42 - this is showing up pretty good now let's
216:45 - say
216:47 - hello
216:49 - world
216:50 - and we can click on post
216:53 - we have to configure the loading bar
216:55 - first of all we will do that after we
216:57 - see that it has been posted and yeah it
217:00 - has been posted so we can go in our
217:02 - firebase storage we can reload this
217:05 - to see if we are getting the correct
217:07 - output and you can see in the post that
217:09 - we are getting this uid over here this
217:11 - is because we have made an error in our
217:13 - application
217:15 - we have done ref dot child id and we
217:18 - have not saved ref to ref so we have to
217:20 - do ref is equal to ref dot child id so
217:23 - that when we put the data we have ref as
217:26 - the child name
217:28 - then the child the the user id and then
217:31 - the
217:32 - unique post identifier we forgot to do
217:35 - that now let's try to run our app again
217:37 - but before that i'm going to delete this
217:39 - posts that we have from over here
217:43 - and let's delete it and let's try to see
217:45 - it in action again
217:48 - so we can refresh our app and let's try
217:51 - again
217:52 - we're going to choose from gallery i'm
217:55 - going to select this image
217:57 - hello second
217:59 - time
218:00 - and let's post
218:08 - it says posted now let's refresh and see
218:13 - in the posts
218:14 - we are getting the user id
218:17 - and if we go in the user id we should
218:19 - get a randomly generated
218:21 - user you know a randomly generated post
218:24 - id
218:25 - and this is how we wanted it
218:29 - and this is very different from profile
218:30 - pics because over here we are just
218:32 - having the user id as a
218:34 - file
218:35 - name but we don't want to do that over
218:37 - here we want the user id to have post
218:40 - differently so that one user can have
218:42 - different posts
218:45 - cool now if we go to the firestore
218:46 - database we should see two posts uh
218:50 - because one was the failed one and then
218:52 - the other was a success one
218:54 - and you can see hello second time
218:57 - and the same goes for hello first time
218:59 - hello fold
219:01 - cool
219:03 - now let's try to you know remove this
219:06 - one because this one was the one causing
219:08 - an error
219:11 - now
219:12 - let's try to add a linear indicator so
219:15 - what we can do is go to the add post
219:17 - screen
219:20 - and we're going to create a global
219:21 - variable called
219:25 - boolean
219:28 - is loading and we can set it to false
219:31 - initially
219:32 - let me
219:33 - put it as a camel case
219:38 - then we can take this is loading and we
219:40 - can go so whenever the user clicks on
219:43 - the post image let me select one image
219:44 - to show you the demonstration
219:47 - so whenever the user clicks over here we
219:49 - need to show the progress indicator as
219:51 - long as the process is happening so what
219:54 - we can do
219:56 - in the post image
219:59 - before the try block we can put set
220:01 - state and set is loading to true
220:06 - and then we can grab the search state
220:08 - from here
220:09 - and if it's success before showing the
220:11 - snag bar i want to show that the loading
220:13 - has
220:15 - i want the loading to stop
220:17 - and over here as well we're going to set
220:20 - it to false and i'm going to format the
220:22 - document and now let's try to display
220:25 - the linear indicator on the screen so
220:28 - the reason we had used a column over
220:31 - here
220:33 - in the body was because we wanted to
220:35 - show
220:36 - uh
220:38 - our linear indicator before
220:41 - uh just below the app bar so we can do
220:43 - that so if it is loading
220:47 - we can just show a linear
220:50 - progress indicator
220:53 - and if it's not loading we basically
220:55 - need to show nothing so we can add a
220:56 - container over here
220:58 - and we can format the document
221:01 - and
221:02 - let's try to see it in action so we can
221:05 - choose from the gallery
221:06 - now let's try
221:08 - typing some other description for the
221:10 - example
221:12 - rivan
221:15 - i'll just type this i don't know why
221:17 - then we can post and you can see the
221:19 - linear progress indicator showing
221:22 - but it's overlapping somewhere so i'm
221:25 - going to make some small changes
221:27 - and also after this is posted we don't
221:29 - want to show this screen so we need to
221:31 - go to the backspace
221:33 - so what we can do now is well
221:36 - first of all remove this container from
221:38 - here
221:42 - we'll add some padding
221:43 - which will be nothing padding but it
221:46 - will have an effect so what you can do
221:48 - is edge and sets dot only
221:50 - from the top zero
221:55 - and after that we can format this
221:57 - document add a const over here
222:01 - and after that we also need to show a
222:02 - divider so we can add divider
222:07 - we can format the document and the other
222:09 - change we needed was whenever we click
222:11 - the post
222:12 - we should not see this uh screen the
222:15 - reason we are seeing this screen is
222:17 - because we have used the condition that
222:20 - file is equal to null
222:22 - so what we can do is set the file to
222:25 - null
222:26 - so what i'm going to do is create a
222:29 - function over here which will say
222:31 - void clear
222:34 - image
222:35 - and we're going to set the state of file
222:39 - to
222:40 - null
222:42 - having that in place what i can do is
222:45 - you know after the success
222:50 - which is over here
222:51 - we can call the
222:53 - clear image
222:54 - part
222:55 - i'll do that after the snack bar has
222:57 - been seen
223:00 - cool and uh
223:02 - yeah let's try to do that
223:05 - let's refresh our app
223:08 - and
223:09 - let's select an image from gallery
223:14 - yo
223:17 - and we can post and you can see this is
223:20 - showing a pretty good
223:21 - and that's how we wanted it
223:23 - and after it has posted our image is not
223:26 - showing up because we have set the state
223:28 - to of the file variable to null
223:32 - and
223:33 - the last thing we would like to do over
223:34 - here is you know whenever we click over
223:37 - here we should be able to see the back
223:39 - screen again
223:41 - what i can do over here is
223:44 - wherever we are having this in the arrow
223:47 - back what i can do is have a clear
223:51 - image passed in
223:53 - and now if i select an image
223:58 - and if i click over here we are going
223:59 - back to the screen that's pretty cool
224:02 - so now let's try to display the post
224:04 - that we have stored in our database over
224:07 - here in the post section
224:09 - on the feed to work on the feed screen
224:11 - we need to create the feed screen layout
224:13 - uh so we'll create a feed screen screen
224:17 - in the screens folder
224:19 - let's create that
224:21 - i'll give this small
224:23 - and
224:24 - we'll import material dot first
224:27 - like we have done previously
224:29 - then we need to create a stateless
224:31 - widget
224:33 - we will call it feed screen for now
224:36 - and we need to return a scaffold
224:39 - we can take this
224:41 - feed screen from here and put it in our
224:44 - global variables home screen items list
224:47 - we can replace
224:49 - text feed with feed screen
224:54 - cool
224:54 - now we should be skiing nothing on the
224:56 - screen and that is exactly what we see
224:59 - now the first thing we want is an app
225:01 - bar so let me draw the layout of the
225:03 - feed screen that we are going to have so
225:05 - first things we are going to have
225:08 - is over here
225:11 - we are going to have a
225:12 - app bar
225:14 - over here we are going to have our you
225:16 - know
225:17 - our logo and over here we are going to
225:20 - have our chat icon
225:22 - then we are going to have our posts
225:24 - coming down and our posts layout is
225:27 - going to be something like having a
225:29 - circle avatar over here having the
225:32 - username then the three dots over here
225:35 - if
225:36 - the user is you know if we are the user
225:39 - then we should see the three dots so
225:41 - that we can delete the post
225:43 - then uh we should be able to see our
225:45 - image
225:47 - and then we should see a heart icon over
225:50 - here
225:52 - then a comment icon then a share icon
225:56 - then uh
225:58 - save icon sorry for my terrible drawing
226:01 - but this is the basic layout of our app
226:03 - and then we are going to have multiple
226:04 - posts so now first things first let's
226:07 - work on our app bar
226:09 - so over here in our scaffold we can have
226:12 - an app bar
226:14 - and our app bar will have
226:16 - a background color
226:19 - of
226:20 - mobile background color
226:23 - we don't want to center the title
226:25 - whatever title we'll have
226:27 - and the title we're going to have is
226:30 - well as i mentioned previously over here
226:33 - we are going to have the
226:34 - image and what is our image going to be
226:37 - we have all added it already i see
226:39 - underscore instagram.svg and since it's
226:42 - an svg file we are going to use the svg
226:45 - uh picture
226:47 - uh the flutter svg package that we have
226:50 - and we are going to call asset make sure
226:52 - to import flutter
226:55 - svg.dart
226:56 - and the asset is going to be assets
227:00 - slash ic underscore instagram dot svg
227:06 - then we need to give it a color of white
227:10 - and then we'll give it a height of 32.
227:12 - cool now let me format the document
227:15 - i'll put a comma here again so that it's
227:17 - coming pretty good
227:19 - now the next thing we need is over here
227:21 - we need to add a icon button where we
227:24 - can you know click over here and be
227:26 - redirected to the messages screen
227:28 - so we're going to create actions
227:31 - and in the actions we're going to add an
227:32 - icon button
227:34 - and there is not going to be any
227:36 - function that's happening
227:38 - so we'll give it an empty function and
227:41 - we're going to pass in icons dot
227:43 - messenger
227:45 - outline
227:47 - you can use icon packages to get it
227:50 - get the icon similar to the instagram
227:53 - package but i don't think we're
227:56 - doing that
227:57 - so now let me remove this and see if
227:59 - we've gotten what we wanted and it looks
228:02 - exactly like what we wanted
228:04 - so now
228:06 - let's uh
228:07 - work on the postcard uh post that we
228:10 - want over here
228:11 - so
228:12 - we're going to get out of the app bar
228:14 - widget and we're going to have a body
228:18 - and for now let's work on the ui not on
228:20 - the functionality of you know getting it
228:22 - from the firestore database and
228:24 - everything
228:25 - for now we'll just work on the ui so
228:27 - what i'm going to do is create a widget
228:30 - over here which will be called
228:32 - post underscore card dot dot
228:35 - and
228:36 - i'm going to be importing material dot
228:39 - package from here
228:41 - then then we are going to make it a
228:43 - stateless widget and call it post card
228:47 - then we are going to return a container
228:50 - with a color of
228:54 - mobile background color
228:56 - first let's
228:59 - put this as a body
229:01 - then we are going to return this
229:04 - it will be a constant
229:08 - and then
229:11 - let's see if we have
229:13 - yeah
229:15 - we should save this now
229:17 - the next thing you want to do is add a
229:19 - padding
229:21 - so we'll add a padding or from both the
229:23 - like the horizontal sides so that it
229:26 - doesn't stick over here
229:28 - so we'll do edge
229:31 - inserts dot symmetric
229:33 - and in the vertical direction from 10
229:37 - so that it leaves spacing from here and
229:39 - the next postcard that appears from here
229:42 - then the container will have a child of
229:45 - column because
229:46 - we can see in our diagram
229:49 - we want a widget
229:51 - draw a widget over here then up
229:53 - uh then our image then a row of widgets
229:56 - over here as well
229:59 - so in our column we'll have children and
230:02 - in the children first of all we'll have
230:04 - the header function
230:06 - we can create another widget for that
230:08 - but i'm going to do it in the same uh
230:10 - postcard widget
230:12 - then we want this to happen so the first
230:15 - thing we want to do is make a container
230:18 - for this let's do that container
230:23 - and in the container we'll have padding
230:25 - and
230:26 - it will be edge inserts
230:28 - dot symmetric
230:30 - in the vertical direction from 4 and
230:34 - horizontal direction
230:36 - 16
230:40 - then
230:42 - we need to copy this
230:44 - padding that we have
230:47 - because you want to add an extra padding
230:49 - from the right so we do copy with
230:52 - and we'll put write
230:54 - 0
230:57 - then we'll have child of
231:00 - row
231:01 - as you can see we want a circle avatar
231:03 - our username and then the three dots
231:06 - so what we can do is put a children
231:08 - then we can have circle avatar
231:11 - and we'll have a radius of 16
231:15 - a background image and the background
231:17 - image is going to be a network image
231:22 - and let's get the background image
231:24 - basically
231:26 - so
231:26 - i'm going to go on unsplash.com and find
231:29 - a random image
231:31 - copy image address and
231:33 - paste it over here
231:37 - then
231:39 - this is it for the circle avatar we
231:41 - should see something popping up
231:44 - all right now i'll remove this
231:48 - then the next thing we want is
231:50 - an expanded let me refresh our app
231:55 - and let's see this we are getting our
231:58 - circle avatar at the top over here
232:00 - let's see if it's comparable to our you
232:02 - know
232:03 - the layout we wanted
232:06 - beside it we want a username so we can
232:08 - create a username
232:10 - we'll again ignore the warnings that
232:12 - we're getting because it will be a
232:14 - dynamic value
232:16 - then the next thing we need is an
232:18 - expanded widget because i wanted to take
232:20 - all the space remaining space
232:23 - and
232:24 - over here we are going to cover we will
232:26 - have padding
232:30 - and the padding will be
232:32 - const
232:34 - edge and sets dot only and only from the
232:37 - left side do i want a padding of 8
232:40 - because i don't want to stick it with
232:41 - the profile image
232:43 - so i'm going to give a padding of 8
232:46 - then i'm going to have a child which
232:48 - will be column
232:51 - and i'm going to have a main access size
232:54 - of main access size dot minimum
232:58 - and a cross axis alignment which starts
233:01 - from the from the start
233:05 - then we have children and in the
233:07 - children we are going to have a text
233:10 - and the text should say
233:14 - our username so i'll just type username
233:16 - for you for now
233:18 - and
233:19 - we want some styling which is basically
233:21 - i just want my username to be bolded
233:24 - so i can type
233:26 - font
233:27 - weight
233:29 - as font weight dot
233:31 - bold
233:33 - and for another document now
233:36 - we are facing missing a parent thesis
233:39 - and format the document having that
233:40 - let's see and
233:43 - we are getting our username typed out
233:45 - over here pretty cool
233:47 - that's how we wanted it now the next
233:49 - thing we want to do is work on the icon
233:51 - button so we can get out of the expanded
233:54 - widget
233:56 - and create an icon button over here
233:59 - we are not focusing on the
234:01 - functionalities once again
234:03 - so we are just going to have this
234:07 - and
234:09 - we have an icon of
234:13 - icons dot more underscore vertical
234:18 - and we're going to put a const over here
234:21 - format the document
234:27 - and now let's see we are getting that
234:30 - actually what we're going to do now is
234:32 - when we click over here we should get a
234:35 - dialogue simple dialog box of you know
234:37 - uh
234:39 - deleting the post but will not work on
234:41 - the delete functionality now
234:43 - we'll just work on you know clicking
234:45 - over here and getting the dialog box to
234:48 - show over here
234:49 - let's do that
234:50 - so
234:51 - to do that
234:52 - in our on pressed what we're going to do
234:55 - is show dialog
234:58 - and it will be a context and the builder
235:01 - is going to have
235:02 - receive a context
235:05 - then it is going to return a dialog
235:11 - and the dialog will have a child of
235:14 - list
235:16 - view
235:17 - let me get out of here so that i can
235:20 - just use the autocomplete
235:22 - and the list to you will have a padding
235:25 - of
235:26 - edge in sets dot symmetric and we are
235:30 - going to have it from vertical 16
235:36 - then we want the shrink wrap to be true
235:40 - we want our children to have just delete
235:43 - you can add more functionalities like
235:45 - report you know all that sorts of stuff
235:47 - we're just going to have delete for now
235:49 - and then we're going to map all of these
235:52 - uh
235:53 - children like whatever list is there
235:56 - we're going to map them we're going to
235:58 - receive e and we're going to wrap them
236:00 - with an ink well
236:02 - and the ink will have a child container
236:07 - and it will have a padding of const
236:11 - edge
236:14 - inserts dot
236:16 - symmetric
236:18 - from vertical 12
236:21 - horizontal 16.
236:26 - and it will have a child of text
236:30 - e
236:31 - and since this is an ink well we need to
236:33 - add an ontap feature over here which
236:35 - will be empty for now and at the end of
236:38 - the inkwell what we want to do is first
236:40 - format the document
236:42 - and at the end of the
236:44 - inkwell over here we are going to have
236:46 - dot 2 list
236:52 - so basically what we did over here is
236:54 - gave it a children pro list of children
236:57 - then we had a delete over here we mapped
236:59 - through all the children for now it was
237:01 - just delete and then uh we returned an
237:04 - inquil widget with a container and
237:06 - padding so that we can click on it and
237:08 - whenever there is on tap we will do
237:11 - something about it
237:12 - so
237:14 - yeah this is pretty much it now let's
237:16 - see if it works
237:17 - if i go over here and click over here
237:20 - you can see the delete option coming up
237:22 - pretty cool
237:24 - now
237:25 - the next thing i want to do is you know
237:27 - show the
237:29 - uh
237:30 - the next thing i want to do is show the
237:32 - image over here so i can get out of this
237:36 - row
237:37 - i'll name this image section
237:41 - and on the top i can name it
237:46 - header section
237:47 - and where we're going to have a sized
237:49 - box
237:51 - of
237:52 - height
237:54 - let's say media query dot of context dot
237:57 - size dot height into zero point
238:02 - 0.35
238:03 - not 0.035
238:05 - then a width of maximum available width
238:10 - then
238:11 - we'll have a child and here we'll pass
238:13 - an image dot network and the image dot
238:17 - network
238:18 - will have
238:21 - some image which we'll grab from here
238:24 - let's grab one
238:26 - image
238:27 - let's grab this one
238:29 - we'll copy the image address and paste
238:32 - it over here
238:35 - then uh in the image.network itself we
238:38 - are going to have fit
238:40 - in
238:42 - there and the fit is going to be
238:46 - box fit
238:47 - dot cover
238:50 - after this is done let's see why we're
238:52 - getting this error so we need to take
238:54 - this size box from here and put it after
238:57 - the container not inside the container
239:00 - that was my mistake and we need to
239:02 - format this document now we should see
239:04 - our image showing up
239:07 - pretty cool
239:09 - now
239:11 - we need to show the you know
239:13 - the heart emoji the heart button the
239:16 - comments button and all of that stuff
239:19 - so
239:20 - we can go down over here
239:22 - and
239:24 - we
239:25 - can just say like comment
239:27 - section
239:29 - and where we are going to have a row
239:33 - as we know because we have to be
239:36 - you have to put all of this in a
239:38 - horizontal direction then we are going
239:40 - to have an icon button
239:43 - which is not going to have
239:45 - an on press
239:47 - and
239:48 - it will have const icon of icons dot
239:52 - favorite
239:55 - so
239:56 - it is either going to be icons favorite
239:58 - which will be color
240:00 - colors dot red
240:02 - you know when it's light and when it's
240:04 - not liked it is going to have a border
240:06 - of only white and this will be favorite
240:10 - border but for now let's just keep it
240:12 - this way
240:14 - then we'll have another icon button we
240:16 - can just copy this and paste it down
240:19 - and our icon is going to be comment
240:22 - underscore outlined
240:24 - and the color
240:26 - we don't want anything so that it's the
240:28 - default comment icon that we get
240:31 - and we'll have another icon button
240:35 - which we can paste
240:37 - and this is going to be icons dot
240:40 - send
240:42 - so that we get the share button
240:44 - now let's see what we're getting and
240:46 - yeah this is exactly what we wanted
240:48 - now the next thing we want is at the end
240:51 - we want to have a bookmark icon
240:54 - so that people can save it
240:56 - and with your knowledge you'll be able
240:58 - to complete that task i'm not going to
241:00 - complete that task
241:01 - so we'll have an expanded icon
241:04 - and we'll have child
241:06 - which will be aligned
241:08 - and the alignment will be at the bottom
241:10 - right corner so we can do
241:12 - alignment
241:14 - bottom alignment
241:16 - dot bottom right
241:20 - then we're going to have a child and our
241:22 - child is going to be an icon button
241:25 - it will have an icon which will be const
241:30 - i can
241:31 - icons
241:33 - dot bookmark
241:35 - underscore border
241:37 - and it will also have an on press
241:39 - function
241:40 - which will return nothing
241:44 - and we can format this document and
241:46 - let's see if you're getting that and yep
241:48 - this is exactly what we wanted
241:51 - so the ui of our this is done this part
241:54 - is done the next thing we want to add is
241:57 - a bit of description over here and then
241:59 - the number of comments that we have
242:00 - received
242:02 - let's work on that so over here after
242:04 - this
242:05 - row where we can type
242:09 - description
242:12 - and
242:13 - number of comments
242:17 - and we'll have a container we'll have
242:19 - some padding
242:21 - all the usual stuff
242:24 - don't get scared about you know the
242:27 - padding stuff it's just trial and error
242:30 - you'll have to try some values if this
242:32 - doesn't fit you'll have to change it by
242:34 - some pixels and then try it again
242:36 - it's it's not that big of stuff
242:39 - then we
242:40 - after this padding has been done we want
242:42 - a column
242:46 - and it will have a main axis size of
242:50 - main access size dot minimum
242:54 - across access alignment of cross access
242:57 - alignment dot start
243:00 - we'll have children over here and the
243:02 - first child over here is going to be
243:04 - a text
243:08 - and the text will say suppose
243:11 - 1231 likes
243:15 - and it will have a style of
243:18 - theme
243:19 - dot of context
243:21 - dot
243:22 - text theme
243:24 - dot body text two
243:28 - so this is the usual uh you know theme
243:31 - that we have in the you know the dark
243:35 - over here in the main dot dart file if
243:36 - we go
243:38 - you can see it in the theme data dot dot
243:41 - all of this
243:43 - so we're just copying that text theme
243:44 - that is provided to us by the dark
243:47 - function
243:49 - and you can see we are getting the
243:51 - number of likes
243:53 - we also need to add a bit of you know
243:56 - font weight so what i'm going to do is
243:59 - i'm going to wrap this with a
244:03 - widget called
244:04 - default
244:06 - sorry default
244:09 - text style
244:11 - and the default text style will have a
244:13 - style of
244:16 - theme
244:18 - dot of context
244:24 - dot text theme
244:26 - dot subtitle
244:28 - to
244:30 - dot copy with
244:32 - and we are going to add some font weight
244:35 - let's say we'll add a font weight of 800
244:39 - and we can format this document and go
244:41 - over here we'll see it is a bit bolded
244:44 - now the next thing we want to add is a
244:46 - bit of spacing and then we need to add
244:49 - you know the
244:51 - username of the user and then a bit of
244:53 - description
244:54 - so what we can do is
244:57 - after this default text
244:59 - time we can have a container
245:03 - and the container with b of the width
245:05 - double dot infinity
245:08 - will have a padding of
245:11 - const edge inserts dot
245:15 - only
245:16 - top
245:17 - it
245:20 - it will have a child of
245:23 - rich text rich text basically allows us
245:25 - to have multiple texts in it
245:28 - expands if i have to be more precise and
245:31 - then we can arrange them in a
245:33 - row wise order
245:35 - so that we don't have to create a row
245:37 - and then do some configurations this is
245:39 - like a one in uh
245:42 - this is like a row widget for
245:44 - text there are multiple moon features
245:47 - that rich text provides us like having a
245:49 - text style for each and every text you
245:52 - can see it over here
245:54 - basically we can set
245:56 - the text to
245:59 - text pan
246:02 - and the text pane
246:04 - will have a style of
246:07 - const text style
246:10 - color and the color is going to be white
246:14 - then we'll have children and in that
246:17 - children we're going to have more text
246:19 - bands
246:20 - so the first expand is going to show the
246:22 - username so we can write text plan
246:26 - and the text will be
246:30 - user name
246:33 - and the style will be
246:35 - text
246:36 - style
246:39 - of font weight
246:43 - dot bold
246:47 - now what we can do is put a const in the
246:50 - text style
246:53 - after this expand what we can do is copy
246:56 - this text ban and put it up again
247:01 - and the
247:03 - description is going to be let's say
247:06 - hey this is some description
247:10 - to be replaced
247:13 - then we can remove this textile
247:17 - and format the document
247:20 - let's see we are getting this which is a
247:22 - pretty cool output that and is similar
247:24 - to what we wanted
247:26 - we can even leave some space over here
247:29 - so that there is some spacing pretty
247:31 - cool
247:32 - so
247:33 - after this container over here we want
247:36 - to show the number of comments
247:38 - so
247:40 - we are going to add a container
247:43 - which says
247:44 - child
247:45 - which has a child you know which says
247:49 - text
247:50 - view
247:52 - all
247:54 - let's say 200 comments
247:58 - and we'll have a style of
248:01 - text style
248:04 - we'll have font size of 16
248:09 - and a secondary color
248:14 - then we'll have a bit of padding as well
248:18 - so we can do it at the top
248:20 - padding
248:22 - edge inserts dot symmetric
248:25 - and from vertical
248:26 - 4
248:27 - so that we leave a bit of space from the
248:29 - description
248:31 - and down
248:35 - so we can format this document and let's
248:37 - see our output view all 200 comments
248:40 - looks pretty good
248:42 - now i can
248:44 - format this
248:45 - and i'm going to replace i'm going to
248:49 - wrap this with an inkwell widget
248:53 - so that i get the ontap feature and if i
248:56 - click on it i'll be redirected to the
248:57 - comment
248:59 - i'll save this
249:02 - all right now the last thing we want to
249:04 - show is the date over here
249:06 - so what i can show is after this inkwell
249:10 - we can probably just you know copy this
249:13 - container from here
249:16 - and paste it down
249:18 - then our date is going to be let's say
249:23 - 22
249:24 - 12
249:26 - 20 21
249:28 - and
249:29 - we are going to have a padding of yeah
249:33 - this is what our padding will be let's
249:35 - try to run our app and see how it looks
249:39 - looks like
249:41 - the way we wanted it
249:43 - yep now uh we'll try to uh get the
249:46 - values from firestore
249:50 - cool now we have the ui of our post and
249:52 - the feed so the next thing we want to do
249:54 - is get the data from our firebase
249:56 - firestore and display all of these posts
249:59 - on our
250:00 - feed over here so to display uh the
250:03 - user post from the firebase firestore on
250:06 - our uh screen is what we have not looked
250:08 - at before we have looked at you know
250:12 - calling the get method on the document
250:15 - so we have a collection and we have a
250:17 - document and over there we've got the
250:20 - get function but over here we don't have
250:22 - a specific uh
250:24 - you know uh you are a document on which
250:27 - we have to call we have to call it on
250:28 - all the documents that are present in
250:30 - the posts collection
250:32 - so
250:34 - we are going to do that and also we want
250:36 - all of them in real time as we saw
250:38 - before get on the
250:41 - get on collection on the document was a
250:44 - one-time read we don't want that over
250:46 - here whenever we click over here on the
250:48 - hard button the like counter should
250:50 - increase in the database and should
250:52 - reflect over here whenever we comment it
250:54 - should reflect over here and
250:57 - this is what we want and all of this
250:59 - whenever a new post gets posted it
251:02 - should show up directly on the screen
251:04 - and we don't need to refresh so that's
251:06 - what we are going to work on everything
251:08 - is going to be real time so let's work
251:10 - on it
251:11 - so in the body we are going to replace
251:13 - this post card right now with something
251:15 - called a stream builder because
251:17 - to real uh to listen to the real time uh
251:20 - stuff we need to use streams so uh we'll
251:24 - pass in a stream over here and what is
251:26 - our stream going to be well
251:28 - we're going to call in the firebase
251:29 - firestore
251:31 - and its instance
251:33 - dot collection and which collection do
251:35 - we want users collection a post
251:37 - collection sorry
251:39 - so we'll get posts
251:41 - and over here we can't get
251:43 - we won't do get because it will return
251:46 - to other future and this is not a future
251:49 - builder this is a stream builder and we
251:51 - want to do a real time listening so what
251:54 - we can call is snapshots
251:58 - you can call snapshots on a document id
252:00 - as well if you want but uh we want to do
252:04 - it for all the post ids that are present
252:07 - over here we want to display all of them
252:08 - so we're going to use snapshot
252:11 - and
252:12 - we'll get a builder
252:14 - now the builder will get two functions a
252:16 - context and a snapshot and make sure to
252:20 - explicitly mention the type of the
252:21 - snapshot which will be
252:23 - a sync snapshot
252:26 - which will be of the type query snapshot
252:29 - and this query snapshot will be of the
252:31 - type map and this map will be string
252:34 - comma dynamic and if you don't want to
252:37 - write so much of code for the snapshot
252:39 - type what you can do is follow a cheap
252:42 - trick which i'll show you in a while
252:44 - using which you won't get any error
252:48 - so if we do if snapshot
252:50 - dot connection state is equal to
252:52 - connection state
252:55 - dot waiting
252:57 - this is similar to you know uh our
252:59 - main.dart file we use stream builder
253:02 - over here and we check the connection
253:04 - state and everything similar to that we
253:06 - are going to do so if our connection
253:08 - state is waiting what we are going to
253:10 - return is a center
253:12 - centered circular progress indicator
253:14 - so we can do child
253:16 - circular progress indicator
253:20 - and after this we can return a list view
253:23 - builder
253:25 - because we want a list of posts
253:28 - so we can do list view builder and in
253:30 - the item
253:31 - builder we can have
253:33 - a context
253:35 - and an index
253:37 - and over here we'll
253:38 - get a container
253:41 - and in the container
253:43 - we'll have a child of
253:46 - post card put a semicolon and actually
253:49 - we can even remove the container there's
253:51 - no need of the container as of now
253:56 - and we can remove this semicolon
254:00 - and this is not going to be a constant
254:02 - as of now because we're going to pass in
254:05 - some arguments to the postcard so that
254:07 - we can display stuff over here
254:09 - cool
254:10 - now
254:11 - we have to mention the item counter
254:13 - where and our item count is going to be
254:16 - the snapshot that we have where
254:18 - snapshot
254:19 - dot data whatever data
254:22 - this snapshot has because it's not going
254:24 - to be null
254:26 - and uh we're going to have dot docs
254:29 - dot length it can be null so it can be
254:32 - considered the item count as length as
254:35 - zero but over here what we're doing is
254:37 - snapshot.data
254:39 - so we're getting the data and uh we're
254:42 - calling the docs method on which which
254:44 - which will give us a list of the
254:46 - document ids that we have where
254:48 - basically the all of these
254:50 - and then we can call the link function
254:52 - on this list and it will get the length
254:54 - of the postcards so now if we run this
254:57 - we should get three postcards with the
254:59 - static data
255:00 - and that is exactly what we get
255:04 - because we have three documents over
255:05 - here now let's try to render the data
255:08 - that is present in the postcard over
255:10 - here so to do that first we need to pass
255:13 - in an argument to postcard that these
255:15 - are the data of our
255:17 - posts
255:18 - so we can do snapshot
255:20 - dot data
255:22 - dot docs as i mentioned it covers all of
255:25 - these uh three dogs that we have and
255:28 - we're going to
255:29 - grab one dock from here at a time
255:31 - because
255:32 - we are calling list view builder on it
255:34 - it will uh run three times the and the
255:37 - first time the index will be zero then
255:39 - one then two so we'll call the docs and
255:42 - we'll grab the first uh document from
255:45 - here so that will be index
255:48 - and then we'll call dot data on it
255:52 - now if we go in the postcard we can
255:55 - accept a value of snap over here
255:58 - and we always want the snap so we can do
256:00 - it
256:01 - as
256:03 - required
256:04 - this dot snap
256:07 - we can format this document now we've
256:09 - got the power of snapshot over here so
256:13 - we just need to display the snapshot
256:15 - so how can we do that
256:18 - well
256:19 - first of all we want to display a
256:21 - network image
256:23 - our so this network image is basically
256:26 - our profile picture
256:27 - not our profile picture whatever the
256:29 - whoever user posted this so his profile
256:32 - picture so what we can do is
256:35 - snap
256:38 - at and we want to grab the
256:41 - profile image so we can do prof image
256:45 - prof image and if we save it we should
256:48 - see the profile image showing up all of
256:50 - these you all of the three users are the
256:52 - same users so we are not getting any
256:55 - difference over here
256:57 - but
256:58 - it will get the profile image over here
257:00 - basically
257:03 - then we need to show the username so we
257:05 - can do snap
257:08 - and we can pass in username if that's
257:10 - what the field over here is yep
257:13 - we can see this and we should get our
257:15 - username as well
257:22 - you can see all of them rivan ranavat
257:24 - now i want to show a different image so
257:26 - what i can do over here
257:29 - go down
257:30 - i'll replace this image.network with
257:33 - snap
257:35 - and it will be post url
257:41 - we can format the document and let's see
257:43 - the different images that we have
257:46 - and this is a confirmation that
257:48 - we are getting three different different
257:50 - images but it's posted by the same user
257:52 - as well
257:55 - now
257:56 - let's
257:57 - get the likes thing
257:59 - so
258:00 - if we go down
258:02 - the like should be replaced with
258:05 - snap
258:06 - likes
258:07 - but as you notice over here the likes
258:10 - over here is an array
258:11 - so we need to do snap dot lie snap at
258:14 - likes dot link
258:16 - and
258:17 - we'll do string interpolation over here
258:23 - dollar
258:27 - and we'll pass in like somewhere so that
258:29 - we see 0 likes right now pretty cool
258:34 - after that we again need to display our
258:36 - username so we can do snap
258:38 - username
258:40 - then snap
258:46 - and we'll we'll pass in
258:49 - description
258:50 - so that will be
258:52 - description aware
258:56 - and lastly we'll have comments over here
258:59 - which we'll uh fetch
259:01 - using future builder
259:03 - because our
259:04 - comment over here is going to be
259:06 - you know uh
259:09 - in a sub collection so it won't keep
259:11 - track of
259:13 - the sub collection it only keeps track
259:14 - of the current collection and its
259:16 - documents not the sub collection for the
259:18 - sub collection you can either again use
259:20 - stream builder or you can uh
259:24 - do use future builder and we're going to
259:26 - use futures for this
259:29 - so we can just keep this stationary and
259:31 - for the date published this one is the
259:34 - key over here so if you want if you want
259:36 - to get the
259:37 - date we can't do snap date
259:41 - published because
259:43 - if we go where the date published is not
259:46 - a string it's of a type time stamp
259:49 - so uh we can't do that so instead what
259:53 - we're going to do is use a package named
259:55 - as
259:57 - will go on pub.dev you can grab the
260:00 - intel package it will be mentioned in
260:02 - the description below
260:04 - you can grab this package
260:05 - you can add it to your dependency
260:12 - you have to stop all the
260:13 - app processes that are running in the
260:15 - background so over here we are going to
260:17 - use date format
260:20 - dot
260:21 - y
260:22 - mmd
260:24 - basically your month month and date
260:28 - and then we are going to format this
260:32 - with snap date published but over here
260:36 - format takes in a date time so what
260:37 - we're going to do is pass this and
260:39 - convert it
260:40 - to
260:41 - date
260:45 - and we're going to
260:48 - format the document we're going to save
260:50 - it now let's rerun our app and wait for
260:52 - it to show up so our app is loaded up
260:54 - and let's see the
260:56 - thing that is coming and we can see that
260:58 - the date is coming up properly december
261:01 - 22 2021 you can read the intel uh
261:04 - documentation to know more about it like
261:06 - if you want to show in some other format
261:10 - there are lots of varieties from which
261:11 - you can
261:12 - check and will format your apple uh from
261:15 - at your date and you can even see that
261:17 - we are seeing the description but the
261:19 - username and the description are you
261:22 - know attached together i want to do some
261:24 - spacing so what i can do is
261:28 - over here in the snap description i'll
261:30 - do snap
261:32 - string interpolation
261:35 - i'm going to
261:37 - cover this and i'm going to leave one
261:39 - space
261:40 - so with this i'm able to leave some
261:42 - space after the username so the next
261:44 - thing we need to do is whenever we
261:47 - double tap this image or we click over
261:50 - here we should see some animation
261:52 - and then the data should get uh updated
261:55 - in our firebase firestore let's do that
261:57 - so for the like animation we need to
261:59 - create another widget and we'll call it
262:01 - like animation
262:03 - let's create that
262:08 - and over here we are going to import
262:10 - material dart
262:15 - and we are going to create a stateful
262:16 - widget and we'll call it like animation
262:21 - now to create this animation we are
262:22 - going to
262:23 - use something known as uh twin
262:25 - animations
262:27 - let's do that so to access you know the
262:30 - between animations and some controllers
262:32 - we
262:33 - will have to inherit from
262:35 - a single take
262:37 - provider state mix in
262:40 - so
262:41 - yeah
262:42 - then we need to create an animation
262:44 - controller
262:52 - animation
262:58 - controller now we have to call in in its
263:01 - state and in the init state
263:04 - we'll have to
263:06 - set controller to
263:08 - animation controller
263:11 - and the vsync will be this
263:14 - and we'll start a duration
263:17 - and the duration will be in milliseconds
263:23 - and the duration we can give is
263:26 - what we can accept from the
263:28 - constructor over here so we're going to
263:31 - have multiple uh constructor arguments
263:33 - the first one will be
263:36 - a child
263:37 - what we need to you know display
263:40 - what li what should the like animation
263:42 - like what should be the child of this
263:44 - like animation parent widget
263:46 - then we'll have
263:48 - a boolean which is is it animating or
263:51 - not
263:52 - then a duration
263:55 - which will be how long the duration of
263:57 - our
263:58 - this should be like animation should be
264:00 - then a final void callback
264:06 - which can be null
264:07 - which will be on end and then
264:12 - a boolean value which will be small like
264:15 - we know the purpose of all of this while
264:17 - we are doing this
264:18 - now
264:19 - let's require all of this seven so i've
264:22 - required all of these fields you can
264:24 - check that this your duration has a
264:26 - duration or if no duration is mentioned
264:29 - it can be of
264:30 - duration of 150 milliseconds and then if
264:33 - the small like is not mentioned it will
264:35 - be false that is it's the original value
264:39 - then
264:40 - over here we can we have created an init
264:42 - state and
264:44 - the milliseconds can be
264:46 - widget
264:48 - dot duration
264:49 - dot in milliseconds and then we're going
264:53 - to use this syntax over here which
264:56 - basically uh divides it
264:58 - divides some
264:59 - duration in milliseconds by two and then
265:02 - converts it into end
265:04 - then the next thing we want to do is
265:08 - we need to create a scale so let's
265:11 - create a scale late animation
265:15 - double
265:18 - scale
265:21 - and the scale will be scale which is
265:23 - equal to
265:26 - between
265:28 - double
265:30 - and the animation should begin from
265:33 - 1
265:34 - and end at 1.2
265:38 - and we need to animate this and to
265:40 - animate this we need to pass in the
265:42 - controller using which we need to
265:44 - animate so we can pass in the controller
265:47 - enemy
265:48 - now the next thing we want is did update
265:51 - widget over here
265:53 - so this uh which it will be called
265:55 - whenever
265:56 - our current widget is replaced by
265:58 - another widget and so if we if the
266:01 - current widget is replaced by another
266:04 - widget what we want to do is
266:06 - we want to check if the widget dot is
266:08 - animating is not equal
266:11 - to the old widget that we get from the
266:14 - parameter layer
266:16 - is
266:17 - animating what we need to do is
266:21 - start
266:23 - animation
266:24 - now this will be a function which we are
266:26 - going to create now
266:29 - so the start animation will be an
266:32 - asynchronous process
266:34 - and
266:35 - we'll check if the widget that we have
266:37 - is animating
266:39 - or
266:40 - if the widget
266:42 - is small like
266:44 - so
266:45 - if the widget is still animating what we
266:47 - need to do is
266:50 - take the controller forward
266:53 - then we need to reverse the controller
267:00 - then we need to add some delay
267:02 - so that
267:03 - the
267:04 - heart animation i can you know stays
267:07 - there for a bit of while
267:09 - then we can do
267:11 - const duration
267:13 - of milliseconds
267:17 - 200
267:21 - and then we need to check if the widget
267:23 - dot on end is not equal to null
267:28 - then we just need to end the widget so
267:31 - we'll call the call voidcallback
267:33 - function that we have received from the
267:34 - argument
267:35 - and
267:36 - we'll call the exclamation mark since it
267:39 - can be null
267:41 - and we also need to dispose our method
267:43 - from here
267:44 - like the controller from here so we can
267:46 - dispose it
267:47 - controller dot dispose now
267:51 - in our widget build function we need to
267:53 - return something known as scale
267:55 - transition and this scale transition
267:57 - requires a scale which will pass in a
267:59 - scale which we created
268:00 - and a child which will be widget dot
268:03 - child
268:05 - now a like animation widget is completed
268:08 - so uh basically this duration tells us
268:11 - that how long the like animation should
268:14 - continue the child is basically to have
268:17 - the
268:18 - to make like animation the parent widget
268:21 - then we have a
268:23 - on end which will be called to end the
268:26 - you know the like animation
268:29 - then a small like to check if this like
268:32 - button was clicked or not because there
268:34 - will be a bit of you know a bit
268:36 - different animation
268:38 - for it
268:40 - so small like is for this so that if
268:43 - this is clicked we can still animate
268:46 - and uh
268:49 - yeah this is all of the
268:51 - parameters that we have and this is the
268:54 - way we have animated them
268:57 - so we can go in the postcard
269:02 - and over here we can check our favorite
269:06 - so where in the i can button we can wrap
269:08 - our icon button with
269:10 - a widget
269:12 - which will be
269:13 - like animation our custom widget
269:17 - and we'll pass in is animating over here
269:20 - now how do we know that the like
269:22 - animation is animating or not
269:25 - so to do that we need to basically check
269:28 - if
269:30 - so we need to basically check if the
269:33 - snap
269:35 - we have
269:36 - and the likes over there basically the
269:38 - array of snap likes
269:40 - contains the user id or not so we can
269:43 - check that if it contains
269:46 - the user id to get the user id what we
269:48 - can use is provider so we can call this
269:51 - final
269:52 - user
269:54 - let's import the user
269:57 - user is equal to provider
270:01 - dot of context
270:04 - and it will be of the type user provider
270:09 - dot get user
270:11 - and then with that user we can go down
270:17 - where our like animation was
270:20 - and we'll check if it contains user dot
270:23 - uid
270:26 - then we'll make sure that the small like
270:29 - over here is
270:31 - true because this is a small like button
270:34 - and we won't see any difference over
270:36 - here because well
270:38 - uh the use snap likes uh won't update
270:41 - because we haven't set the update method
270:43 - over here but we'll do that and after
270:45 - that we'll see the animation as well
270:48 - but uh we can go on the picture so
270:50 - whenever we double click we should see a
270:52 - heart icon coming up
270:54 - we can do that so we have to move to our
270:57 - network image so we have our uh sized
271:00 - box over here so we are going to wrap
271:02 - the size box with a stack so we have
271:05 - wrapped the size walk with the stack
271:07 - this is because we need to show a
271:09 - heart icon on the top of the image
271:11 - whenever the user double clicks
271:14 - so yeah we have done this
271:16 - now uh
271:18 - we'll have a size work and after that
271:20 - we're going to use
271:22 - like animation widget that we have
271:24 - and it will receive a child of const
271:27 - icon
271:28 - icons dot favorite and we need to show
271:32 - up icon of color colors dot white
271:35 - and
271:36 - the size of this is going to be a big so
271:39 - let's just say it will be
271:42 - 100
271:44 - now we can format the document and where
271:47 - we have to pass in the is animating
271:49 - value and is animating value will be
271:52 - something known as we'll have to create
271:55 - is like animating value and we also have
271:58 - to pass in the duration the duration
272:00 - will be const duration
272:03 - and i want to show it for some time
272:05 - more so it can be 400 second
272:07 - milliseconds then we also provide the on
272:10 - end callback
272:11 - and in the on end callback we'll
272:14 - basically have to set the state of is
272:16 - like animating boolean value that we'll
272:18 - have to false so let's create is like
272:20 - animating uh
272:22 - over there
272:26 - so let's go on the top
272:28 - and create a value
272:30 - first of all we'll have to convert this
272:32 - postcard to a stateful widget
272:35 - and we'll have to use
272:41 - boolean
272:42 - is like animating
272:47 - and we'll have to set it to false
272:50 - and then we'll have to take this value
272:54 - go to the bottom of the screen basically
272:57 - wherever we add the stack
272:59 - and over here
273:01 - end we'll have to set the state
273:04 - and we'll change is like animating to
273:08 - true
273:12 - and also we'll have to cover this stack
273:14 - with the gesture detector
273:16 - because we need to detect if the user
273:18 - double clicked on this image or not so
273:21 - we'll have to cover this with a stack
273:23 - itself
273:24 - so we'll do on tab
273:26 - and on
273:28 - tab
273:29 - not on tap actually it will be on
273:32 - double tap
273:35 - and this is a difference between inkwell
273:37 - and gesture detector
273:42 - gesture detector provides us with a
273:44 - ton of various uh you know uh functions
273:48 - uh and inkwell provides us with basic
273:51 - features and on double tap what we can
273:53 - do is
273:54 - set the state of is like animating to
273:58 - true
273:59 - now let's save our app and run it now
274:02 - let's see how it looks
274:04 - now you can see this is showing up and
274:06 - it is in the send it's not in the center
274:09 - so
274:10 - i'll change the alignment of the stack
274:12 - to
274:13 - alignment
274:15 - dot
274:16 - center
274:18 - now let's run our app and you can see
274:19 - that it's showing up in the center
274:22 - i
274:23 - want to
274:24 - maybe increase the size of this you can
274:27 - increase it by
274:29 - going over here and increasing the size
274:31 - to let's say 120
274:34 - and yeah looks good
274:36 - now
274:37 - we'll have to cover this like animation
274:40 - with something known as
274:41 - opacity
274:45 - and this is because we don't want the
274:47 - like button to show up all the time we
274:49 - only needed to show
274:51 - when r is like animating boolean is true
274:55 - so we can just do this and actually
274:58 - the opacity it doesn't provide us with
275:01 - any animation i want the animations to
275:04 - show up
275:05 - when you know it's fading and when it's
275:07 - showing up so i can cover this
275:10 - with animated opacity a widget provided
275:13 - by flutter and we'll pass in a duration
275:15 - of
275:16 - const duration
275:19 - milliseconds will be 200
275:23 - and opacity will be
275:26 - based on the is like animating so if the
275:29 - it is animating we need to completely
275:31 - show it
275:32 - right and if it's not then we don't have
275:35 - to show it so we can turn it to zero the
275:37 - opacity has to be a built-in a value of
275:39 - one and zero
275:41 - now we can run our app
275:43 - and see if it's working or not
275:47 - so if we do that you can see this
275:48 - showing up but it doesn't fade away
275:50 - because in our on end function we have
275:53 - set it to true we have to set it to
275:55 - false and now let's try it try to see so
275:58 - if i do this
276:00 - it shows up and disappears it shows up
276:03 - and it disappears and this is the like
276:05 - animation we wanted to see the animation
276:08 - over here we'll have to configure uh and
276:10 - update our values in the firebase file
276:12 - store because this value is linked over
276:14 - there so to do that we'll go to our
276:16 - firestore methods class over here and
276:19 - we'll create a function named as like
276:21 - post we're going to have a return type
276:24 - of void over here because we're not
276:26 - suspecting any you know error that can
276:29 - happen and if that happens we don't want
276:32 - to show it to the user
276:34 - we won't show any output only so that's
276:37 - what i'm going to do if you want to show
276:38 - the error to the user if some error
276:41 - occurs you can uh you know display it in
276:44 - the rest of the variable that we created
276:47 - with res and that format
276:49 - but where i'm just going to do this
276:52 - so basically i'm taking in from the
276:54 - parameters post id uid of the user and
276:58 - the
276:59 - likes
277:00 - list
277:01 - and we're going to create an async
277:03 - function
277:04 - we are taking list of likes from a
277:07 - parameter only because we don't want to
277:08 - make another call to our database to
277:11 - read the number of likes when we get the
277:13 - number of likes in our
277:15 - feed screen itself using the
277:18 - stream builder
277:20 - so what we can do over here is have a
277:23 - try catch block
277:30 - and whenever any exception comes in what
277:33 - we're going to do is print the exception
277:37 - in string format
277:40 - and in the tribe block what we're going
277:42 - to do is
277:44 - whenever we like the post
277:46 - if i suppose like the post i want to
277:49 - make sure that if the list of likes
277:52 - already contains my uid that is
277:55 - uh the list over here will contain uids
277:57 - of the user so i want to check if the
278:00 - likes over here
278:02 - contains the uid then we need to dislike
278:05 - the post right suppose this post is
278:07 - already liked i'll click over here so i
278:10 - want to dislike the post so to dislike
278:13 - it i have to remove from the likes ira
278:15 - miuid and if the likes contains does not
278:18 - contain my uid then i need to make sure
278:21 - that i add my uid in the array so what
278:24 - can we do
278:25 - we can
278:26 - first check if the likes
278:29 - contains
278:30 - uid
278:32 - that means uh we have already liked the
278:34 - post in the past so what we're going to
278:37 - do is take the firestore
278:40 - collection
278:42 - posts
278:44 - and we'll go to the post id document
278:48 - so suppose this is our post so we'll
278:51 - take the posts then go to our post id
278:54 - and then we are going to uh
278:57 - call update aware not set not you know
279:00 - add or anything for any other function
279:02 - that we saw
279:04 - update because you need to change only
279:06 - one value if you do set over here then
279:08 - you need to pass in all the values and
279:11 - well uh this will be a lot harder
279:15 - and uh we just have to do update aware
279:17 - so that we can update only one uh
279:20 - data over here which is the likes array
279:25 - so in the likes array
279:26 - what do we need to update so well we
279:28 - just need to add our uid over here so if
279:31 - there is an already existing like over
279:34 - here we need to add our uid as well
279:37 - so to do that what we're going to do is
279:39 - take field value
279:41 - dot add a union
279:43 - array remove sorry and then we're going
279:46 - to add our uid
279:48 - so with this basically we've told uh
279:50 - firebase to uh go to the likes field and
279:54 - then we need to take in all the uh take
279:57 - in all the array members
280:00 - and remove only the current uid of our
280:03 - user which is this uid that we are
280:05 - receiving from the parameter so we need
280:07 - to remove our uid from here
280:09 - and else what we can do is
280:12 - take this file store again and where
280:14 - we'll call array union
280:18 - and as you might have expected
280:20 - if the likes does not contain our uid
280:23 - then we need to uh take in the all the
280:26 - already existing array members and add
280:29 - our uid in it
280:31 - cool
280:32 - after that is done
280:34 - we can
280:35 - first of all await all of this function
280:44 - and save
280:46 - then in our feed screen uh in our
280:49 - post card actually in our postcard file
280:52 - uh we'll have to go to our uh two like
280:55 - options first we'll go to the double tap
280:59 - animation heart icon one and over here
281:02 - uh
281:03 - in our own double tap what we're going
281:05 - to do is
281:08 - set firestore methods
281:12 - dot like post
281:14 - and in the like post let's see it's a
281:17 - future void so we can avoid this
281:20 - and call async over here
281:23 - and we can do like post and in the like
281:26 - post what we need to add is post id we
281:29 - can get that using
281:31 - now we have to do widget dot snap
281:33 - because it has become a stateful widget
281:35 - and we'll have to do widget dot snap
281:38 - and the name will be
281:41 - post id
281:44 - then the next thing we want is uid so we
281:47 - can do
281:49 - user dot uid
281:51 - and the last thing we need is likes to
281:54 - get the likes we can again do widget dot
281:56 - snap
281:57 - likes
282:00 - and now if i save and try to do it again
282:03 - we should see that on double tap we
282:06 - should get our likes in the post id
282:10 - so suppose i do this
282:12 - so as you can see we are getting some
282:14 - error over here we are getting some
282:16 - requested document not found and over
282:18 - here the error we have made is we have
282:20 - spelt misspelled posts
282:23 - so do that and after that we should
282:25 - again rerun our app and let's see it in
282:27 - action
282:29 - so i'm over here on the first post
282:32 - i'll
282:33 - do this and you can see the like counter
282:35 - incremented because we are done post at
282:38 - likes
282:38 - and you can see that our likes uh id now
282:41 - consists of our uid
282:44 - and now if i again do this
282:47 - it turns 0 that means it removed the uid
282:50 - from the ira and you can see this
282:52 - updated as well
282:54 - so now uh we also need to do that for
282:57 - other type so if we click over here we
282:59 - should be able to like the post so what
283:02 - we can do is just copy this from here
283:04 - and in the like animation over here what
283:06 - you can do is
283:08 - convert this to an arrow function
283:11 - actually we want this function because
283:13 - it's an async process
283:15 - so we can do async
283:17 - and then put our like post over here
283:19 - then we'll format the document and let's
283:21 - try to run our app
283:24 - so if i click over here
283:26 - you can see a little bit of animation
283:27 - that i have previously mentioned and
283:29 - we're getting one like now this is all
283:32 - always showing red we need to change
283:34 - that what we can do is over here in the
283:37 - favorite icon itself we need to make
283:40 - card we need to do conditional rendering
283:42 - so we need to check
283:45 - if the widget dot snap dot likes
283:47 - contains user id basically this line
283:49 - that we wrote if the snap contains the
283:52 - user id what we need to show is
283:55 - well
283:56 - the heart icon basically
283:59 - this means that the user has liked the
284:01 - post so we need to show a filled
284:03 - favorite icon and
284:06 - if it's not then what we need to show is
284:11 - a const
284:12 - icon
284:14 - icons dot
284:16 - favorite border
284:19 - and we'll put a comma wire let's format
284:22 - a document and see if it's showing up
284:25 - you can see this happening
284:27 - i'll reload my app and we have already
284:30 - liked the post so it's showing up a
284:32 - heart now if i remove this post it will
284:34 - be zero likes and if i again restart my
284:37 - app we shouldn't see our
284:39 - heart over here
284:41 - now i can like it again
284:43 - i can remove the light you can see the
284:45 - slight animation that's taking place
284:47 - this is because of the like animation uh
284:50 - widget that we created over here
284:53 - and now if we go over here
284:55 - we can see this showing up all of this
284:57 - is possible with streams that we used in
285:00 - our app the snapshot and everything
285:03 - now let's work on the comment screen so
285:05 - to create the comments uh first we'll
285:07 - have to display it on a new screen and
285:10 - in the bottom we'll and after we do that
285:13 - we have we will decide
285:14 - how our layout of the comment screen
285:16 - should look like so let's create our
285:18 - comment screen and where we're going to
285:20 - import the material
285:22 - package
285:24 - and
285:26 - we will have to create a state full
285:28 - widget
285:29 - comments
285:32 - screen then we'll have to return a
285:34 - scaffold
285:36 - because it's a new page that we're
285:37 - drawing
285:38 - then we need an app bar
285:40 - and the app bar will say
285:44 - basically it will have a background
285:45 - color that is mobile background color
285:48 - and then the title will be const text
285:54 - comments
285:56 - and we'll have to turn center title to
285:58 - false so that it comes in the left align
286:01 - position
286:02 - and after doing that let's
286:04 - try to see our app so in the feed screen
286:07 - whenever the in the post card screen
286:09 - sorry whenever the user clicks on the
286:11 - comment outlined uh icon what we need to
286:14 - do is transition the user to another
286:17 - page so we can use navigator can do
286:19 - navigator
286:22 - dot of context dot push
286:26 - and we'll have material
286:28 - page route
286:31 - we'll have context
286:33 - and then we're going to pass in the
286:36 - comments
286:38 - screen
286:41 - you're not making it a constant because
286:43 - after some time we'll have to pass in
286:45 - you know
286:46 - a list of uh some pop some parameter
286:50 - so
286:51 - let it be this way
286:53 - then if we click over here we can see
286:55 - the comments that are happening now
286:57 - let's decide how our app is going to
286:58 - look basically there will be a lots of
287:01 - comments so we'll have a comment over
287:03 - here a comment over here
287:07 - and in the bottom we're going to have a
287:10 - text field
287:12 - and this text field will be for
287:14 - commenting so we can write c over here
287:19 - and then uh in the comment section what
287:21 - we want to do is show the profile
287:24 - picture of the user
287:26 - then we want the usernames username of
287:28 - the user then whatever text the user
287:31 - wrote
287:32 - and over here we're also going to have a
287:34 - like button but you're not going to
287:36 - implement the features of the like
287:38 - button i'll leave it up to you and you
287:40 - have enough knowledge to create the like
287:43 - feature on the comment screen
287:46 - cool and over here we are going to have
287:48 - some more features like comment as
287:51 - and the username of the user then the
287:53 - profile picture of the user so small
287:56 - functionalities but yeah we're going to
287:58 - make use of our state management and
288:00 - output all of them
288:02 - so this is how the app is going to look
288:04 - like first let's work on the text input
288:07 - field
288:08 - in our comment screen class we will have
288:12 - a bottom bar navigation bar
288:16 - and in the bottom navigation bar it
288:18 - accepts a widget so we can safely type
288:20 - in any widget we want and i want to have
288:23 - a safe area widget which will be
288:25 - apparent
288:26 - and in that we want a child
288:30 - of container
288:33 - which has a height of
288:35 - k tool bar height
288:37 - this is basically you know the toolbar
288:39 - height of the app bar
288:41 - and then we'll have margin
288:44 - and the margin will be
288:46 - agencies dot only
288:48 - from the bottom we leave
288:53 - dot of context
288:55 - dot view inserts this is something new
288:58 - that you're seeing dot bottom
289:01 - and the padding will be
289:04 - from the left and right
289:09 - agent says dot only
289:11 - from the left
289:13 - 16 and from the right
289:16 - eight
289:18 - after that this will have a row and the
289:20 - row will have
289:21 - lots of children we have a row over here
289:24 - because we want to show the text input
289:26 - field and beside that a comment or post
289:29 - button over here
289:30 - that's why
289:32 - and also a circle avatar as you can see
289:34 - over here so in our row we first need to
289:37 - have a circle avatar
289:40 - you know first we'll have to pass in
289:41 - children and the children will have
289:44 - circle avatar
289:46 - and there is going to be a background
289:48 - image and we can use network image
289:53 - again we can go to our friend
289:55 - unsplash.com can grab the first image
289:58 - address
289:59 - and paste it over here
290:02 - then we'll have a radius then we'll have
290:04 - a property of
290:06 - radius and the radius i want to be 18.
290:10 - now we can format the document save it
290:13 - and we should be able to see some output
290:17 - over here
290:19 - and you can see we are seeing a profile
290:21 - picture
290:23 - this profile picture is going to be our
290:25 - profile picture by the way
290:27 - cool now the next thing you need to do
290:30 - is have a text input field over here
290:33 - so what we can do is create a text field
290:39 - and we'll add a controller first
290:43 - and for now let's not pass in the
290:45 - controller
290:47 - so we want to have a decoration and the
290:50 - decoration will be input decoration then
290:53 - the
290:54 - hint text can be
290:57 - comment as
290:59 - username whatever username we get like
291:02 - whatever our username is
291:04 - and we'll have a border of input border
291:09 - dot none
291:11 - let's save it and we are getting some
291:14 - errors over here this is because the
291:16 - text field and the size issues that we
291:19 - have
291:19 - so what we can do is wrap this and
291:22 - expand it so that it takes the maximum
291:24 - possible space available
291:26 - and we can save it
291:28 - now if we run our app we should be able
291:30 - to see the comment screen and we can see
291:32 - it over here but i want to leave some
291:34 - padding over here because it's kind of
291:37 - looking gross
291:39 - so
291:40 - we can wrap text field with the padding
291:44 - and the padding has to be
291:46 - only
291:47 - and from the left it will be
291:50 - 16
291:52 - and from the right it will be eight
291:55 - having that in place we'll save
291:58 - and you can see it's looking much better
292:01 - the last thing we want to add is
292:04 - an ink well widget over here
292:07 - which will be used to click on over here
292:10 - and then we can post it so we'll have
292:13 - inkwell and it will receive an ontap
292:16 - function which will be
292:18 - not empty for now
292:20 - and we'll have a child which will be a
292:22 - container
292:25 - we'll again add some padding
292:31 - from the vertical we'll have eight and
292:34 - from the horizontal we'll have eight
292:37 - then we need to have a child of constant
292:39 - text which just says
292:41 - post
292:43 - and the style can be
292:45 - text style
292:48 - of color
292:50 - colors dot blue accent
292:55 - and we can format the document
292:57 - and if we see we are getting the post
292:59 - over here
293:01 - pretty cool
293:02 - and if we change it to
293:05 - blue color that we have from the colors
293:07 - or dot file let's see how it looks
293:10 - i don't see much major difference
293:15 - yeah we can just keep this blue color
293:17 - over here
293:20 - now the ui of the username part is done
293:24 - we can go to the top and build a comment
293:27 - card basically
293:28 - so every comment will have a comment
293:30 - card just like the post so we had a post
293:33 - cards over here
293:34 - we want to do the same for the comments
293:36 - so we can go over here and create create
293:39 - comment cards so
293:41 - in our body
293:44 - what we can do
293:46 - is show a comment
293:49 - card
293:52 - so
293:54 - in our widgets we'll create comment
293:57 - underscore card dot dot
294:00 - where we'll again import the material
294:03 - package
294:06 - then we'll have
294:07 - a state
294:09 - full widget of comment
294:12 - card and obviously we'll have to get a
294:15 - snapshot from the user but will not take
294:18 - that now we are just building the ui of
294:20 - our app
294:24 - then the container will return a padding
294:26 - of const
294:28 - edge inserts
294:30 - dot symmetric and from the vertical
294:33 - we'll have
294:34 - 18 padding and horizontal
294:37 - 16
294:40 - then we'll have a child of row by row
294:44 - because we need to show the
294:46 - username the user profile
294:49 - the username the text that the user has
294:51 - entered and the like uh
294:54 - feature that we have
294:55 - so
294:56 - in nro we'll again have a circle avatar
294:59 - again we need to pass in children
295:02 - then circle avatar
295:05 - background image
295:07 - and the background image can be
295:09 - network image
295:13 - we can copy another image from here
295:16 - let's say
295:17 - this run
295:21 - and after that we'll have a radius of 18
295:25 - we can form at the document
295:31 - and after this circle avatar the next
295:33 - thing you want to show is you know
295:36 - first of all let's import this comment
295:38 - card
295:40 - so that we see some of the stuff showing
295:42 - up so yeah
295:43 - this circle avatar shows up
295:46 - and the next thing you want to do is
295:48 - show the text of username and the
295:52 - description and the text that the user
295:54 - enters as a comment so what you can do
295:56 - is create a padding
296:00 - padding will be
296:02 - from the left only
296:04 - 16.
296:10 - in our child we'll have a column
296:14 - and the column will be
296:17 - cross axis alignment cross access
296:20 - alignment dot start which means it will
296:22 - start from the start
296:24 - then the main access alignment will be
296:26 - main access alignment dot center
296:30 - then it will have a bunch of children
296:32 - and in the children we need to have
296:34 - something known as rich text that we
296:36 - have looked at earlier
296:38 - and the text will be a text span
296:44 - and the text fan can have children
296:47 - and in the children it will be text
296:49 - then the text band will have a text of
296:52 - let's say
296:53 - username over here which will be bolded
297:03 - and after that we can again copy this
297:06 - text span from here
297:08 - paste it over here and we can write
297:10 - some description
297:13 - to insert
297:15 - what we need to do is remove this
297:17 - bracket from here
297:18 - and go up here we don't want any styling
297:21 - for our description
297:23 - now let's try to see it and you can see
297:25 - it's showing up in the center
297:27 - very cool after this rich text
297:30 - we need to show padding
297:34 - after this rich text we actually need to
297:36 - show
297:37 - you know the date of the user so after
297:40 - this we need to have a padding again
297:42 - which will show and this padding will be
297:44 - for the date so we can do edge and sets
297:46 - dot only
297:48 - top
297:49 - four
297:53 - then it will have a child and the child
297:55 - will be text and it will show the
297:57 - current date so what is our date let's
297:59 - say
298:00 - 23 12 21
298:04 - and
298:05 - we'll have a style of
298:08 - text style
298:10 - and it will be pretty small so we'll
298:12 - just set 12 and a font weight will be a
298:16 - font weight dot w 400
298:20 - not very bolded and not very
298:22 - uh you know not very thin as well
298:26 - so we can
298:27 - save this
298:28 - and let's see we are getting 23 12. cool
298:31 - the last thing we need to add is outside
298:33 - this column and outside of this padding
298:37 - in our row we need to add a container
298:41 - and you might have guessed it why we
298:42 - need this container for the like button
298:45 - so you can do const
298:47 - edge and search dot all eight
298:51 - and it will have a child of icon
298:54 - icons dot favorite
298:57 - and the size will be 16
299:00 - we can set it to const over here
299:03 - for the document now let's see if you're
299:06 - getting that
299:07 - icon where
299:09 - but as you can see it's looking pretty
299:11 - shabby over here
299:12 - it's all coming together which i don't
299:14 - like so what i'm going to do is wrap
299:17 - this padding with an expanded widget so
299:20 - that it takes all the available space
299:25 - and we can save it and see
299:28 - all of this comes into place so the next
299:30 - thing you want to do now is you know
299:32 - display and you know store all the data
299:35 - that we comment in our firestore
299:37 - database it will be fairly easy to do so
299:39 - i'll just give you one hint what we need
299:41 - to do so in our posts over here we have
299:44 - a post id and over here all the data but
299:47 - we don't want a comment as one of the
299:49 - fields aware we want comment as a sub
299:52 - collection so that you know we can have
299:54 - a look at what sub collections are and
299:56 - how can we get some data from there
299:59 - so yeah you have to do that pause the
300:02 - video and try it on your own if you fail
300:04 - you can always see it and learn from it
300:06 - so the first thing we need to do is
300:09 - change all of this the user profile
300:11 - image the username so over here what we
300:14 - can do is again use our provider i'm
300:17 - going to copy paste it
300:19 - i'm going to import this user
300:21 - provider
300:22 - then the user class
300:25 - and then the provider package
300:28 - you can just press command and full stop
300:30 - to get all of this no you know
300:32 - correction suggestions
300:34 - and with this user we can
300:37 - go over here replace the network image
300:39 - with
300:40 - user dot photo url
300:44 - and over here comment as this will
300:46 - become
300:47 - user dot
300:49 - username
300:50 - and we can save it now let's see we are
300:53 - getting our username rawandanath and our
300:55 - profile picture which is pretty cool so
300:57 - now the next thing we want to work is
300:58 - whenever we click on the post icon we
301:00 - should save our data in the database
301:02 - so let's do that in our firestore
301:04 - methods we will create a function which
301:08 - will be
301:09 - future
301:10 - string
301:11 - of post comment
301:15 - and it will generally take in a post id
301:18 - so that you know we can go to the post
301:19 - id and in that collection we can create
301:21 - one collection
301:23 - and it will have a text that will
301:25 - require whatever we type in over here
301:27 - the uid of the user to store it
301:30 - the name of the user and the profile of
301:32 - the user
301:37 - the reason you're storing the user id
301:40 - over your
301:41 - along with you know profile pic and
301:43 - username is because
301:46 - uh when i'm not adding this
301:48 - functionality but for you all if you
301:50 - click on this
301:51 - username over here you can wrap the
301:53 - username text with an inquil widget and
301:56 - when you click over here it will show
301:58 - you the profile screen that we'll create
301:59 - in some while
302:01 - and yeah this is why we are storing the
302:03 - uid and name and profile pic so here
302:06 - we'll have a try catch block
302:08 - so you can do try
302:12 - catch in case of any exception we can
302:14 - just print it e dot
302:16 - to string
302:23 - we can format this
302:24 - document then uh the
302:28 - then we need to check that if the text
302:30 - is not empty whatever the user has
302:32 - entered is not empty then what we can do
302:35 - so if the text is not
302:38 - empty what we can do is
302:41 - first of all
302:43 - get the firestore dot collection and our
302:46 - collection is going to be posts
302:48 - collection
302:51 - and then we'll go to the document of
302:53 - post id
302:55 - and over here make sure to add another
302:58 - collection because we need a sub
302:59 - collection in that so we'll add
303:01 - collection
303:02 - of comments
303:04 - and we are going to pass in another
303:06 - document id so we have our comments
303:09 - collection over here
303:11 - then we'll add a post a comment id that
303:14 - will generate using uuid package
303:17 - and it will have you know the comment
303:19 - will have some other things like profile
303:21 - pic name of the user uid of the user
303:25 - the text that we have all of those stuff
303:28 - so we can just do that
303:30 - so in the comments dot collection and
303:32 - we'll create a comment id so what we can
303:34 - do over here is string
303:37 - comment id and we'll do constant uuid
303:43 - dot version one
303:46 - and we can take this
303:48 - and
303:49 - pass it in the dock comment id
303:51 - and dot set it and after this uh we need
303:55 - to pass in the profile pic and
303:57 - everything for this we are not going to
303:58 - model our data because comment isn't
304:01 - necessary right now because we won't be
304:03 - using comments anywhere like post and
304:06 - user
304:07 - but if you want you can surely make a
304:08 - model that will be a better choice i'm
304:10 - not going to do that
304:13 - and we can have profile pic as profile
304:15 - pic
304:17 - then the name of the user as the name of
304:20 - the user
304:23 - then
304:24 - uuid
304:26 - and then we'll have lastly we'll have
304:28 - date published and the date published
304:30 - will be date
304:31 - time dot
304:32 - now
304:35 - and
304:36 - yeah this is pretty much it we'll await
304:38 - this because this will be an
304:40 - asynchronous function
304:42 - and this is pretty much it
304:44 - if
304:45 - the text is not empty
304:48 - then
304:48 - we don't want to do anything
304:51 - so
304:52 - we can just type for us that you know
304:56 - text is empty
304:59 - or you can follow the rest format that
305:01 - we have and where our post comment will
305:03 - be future void
305:06 - you can always follow the rest format
305:07 - i'm not going to do that
305:10 - and we can see this
305:13 - post com we'll grab the post comment
305:15 - from here go to our comment screen
305:18 - and beside the on tap we're going to
305:20 - have this
305:21 - and this will be an async
305:23 - because we need to await it
305:25 - so we can do firestore methods
305:29 - dot
305:30 - post comment
305:32 - and the post id will be
305:35 - well we'll have the snap that we get so
305:38 - it will be final snap
305:42 - and we will require this so required
305:44 - this dot snap
305:45 - basically the snap will be the snapshot
305:48 - we will be using stream builder again
305:50 - and you're familiar with stream builder
305:52 - so we'll get the snap again similar to
305:54 - the post screen that we did and we can
305:56 - get the snap and over here we have
305:58 - widget
305:59 - dot snap and we'll have a post id
306:04 - then a widget dot snap
306:08 - text give the uid will do user
306:12 - dot uid
306:13 - then the name will be user dot
306:16 - username and lastly the profile pic will
306:18 - be user dot photo url
306:21 - we can format the document first of all
306:24 - let's
306:27 - and over here we are going to await this
306:29 - post comment the future we have
306:32 - and then we can save it
306:34 - last thing over here is
306:36 - in the comment screen we can't directly
306:38 - you know show this to give the snap
306:40 - required what we'll have to do is
306:43 - pass in the post id
306:46 - and the post id will be widget dot snap
306:50 - until we post id
306:53 - dot to string
306:56 - let's see why we are getting this error
306:59 - we have to pass in the snap argument so
307:01 - we can do snap this
307:02 - yeah
307:03 - and we can format the document let's
307:05 - save and re-run our app
307:11 - so if we click on the comment screen we
307:13 - should see this and now i'm going to
307:16 - comment over here we can see that we
307:17 - have no sub collections on any of this
307:20 - so
307:22 - i can type over our
307:23 - first
307:25 - comment
307:26 - and we can hit on post and where we can
307:29 - see that we are getting an error type
307:30 - string is not a type sub type of type of
307:34 - index where the error we had is we are
307:36 - passing
307:37 - widget dot snap post id we want to send
307:39 - the widget dot snap
307:41 - only and not the post id
307:43 - and again if we go over here we should
307:46 - post something like hello
307:49 - world
307:50 - and we can post
307:52 - we are again getting this error and over
307:54 - here we are getting this error because
307:56 - we made a very silly mistake uh first of
307:59 - all we need to add a controller over
308:01 - here so what we can do is
308:03 - final
308:04 - text editing controller
308:08 - and we'll call it
308:09 - let's say
308:10 - comment
308:12 - controller
308:13 - which will be equal to text editing
308:15 - controller
308:17 - then we need to set the state
308:20 - so we can have oh sorry we'll have to
308:22 - call the dispose method over here and in
308:25 - the dispose method we are going to
308:26 - dispose of the comment controller right
308:28 - now itself
308:31 - and after this uh we have to take this
308:34 - controller go to the error part that
308:36 - we're getting
308:38 - and we'll have to do comment controller
308:40 - dot text and we also need to add a
308:42 - controller to our text field
308:44 - comment controller
308:45 - so we were getting this error because we
308:47 - were calling widget dot snap text which
308:50 - didn't even exist because the post
308:52 - doesn't have a field called text
308:54 - it only has a post id which we are
308:56 - passing in and the comment controller
308:57 - dot text that we have now
308:59 - pretty stupid error that we had
309:02 - we forgot to do that
309:04 - so now if i go over your
309:06 - commentat hello
309:09 - world
309:12 - and we're not getting any error that
309:14 - means we should get a sub collection
309:15 - somewhere we'll have to refresh our
309:18 - database
309:22 - and if we go we get a sub collection
309:24 - comments over here and if you go in the
309:27 - comments we see another id of the
309:29 - comment and we it has a comment id that
309:31 - is similar to this date published name
309:34 - profile pic text and uid that means we
309:37 - can store our comments successfully in
309:39 - our database now let's try to output the
309:41 - comments on our screen to show the
309:43 - screens what we can do is use a make use
309:47 - of the stream builder again so that we
309:48 - can listen to it real time
309:51 - and
309:52 - what we can do is in the comment screen
309:54 - instead of
309:56 - having the body as comment card we can
309:58 - have stream builder
310:01 - and in this stream
310:02 - uh we'll have to
310:04 - pass in this sub collection of
310:06 - comments so what we can do is
310:08 - go to the firebase firestore
310:11 - dot instance dot collection of posts
310:15 - then the
310:17 - post id and we can get the post id by
310:20 - snap dot snap add no sorry
310:25 - widget dot snap
310:27 - and we'll pass in the post id
310:33 - and after that we can have again another
310:36 - collection of comments where we are
310:39 - going to listen
310:40 - then
310:41 - snapshots
310:43 - and if we format the document we should
310:45 - be able to see
310:47 - this error going away the next thing you
310:49 - want is builder
310:51 - and our builder is going to have a
310:53 - context
310:55 - and a snapshot and as i mentioned
310:57 - previously you will have to
311:00 - tie um
311:01 - you'll have to explicitly tell the type
311:03 - of the snapshot but we have a cheap
311:06 - trick that we can follow you want to
311:08 - check first like if snapshot dot
311:10 - connection state is equal to the
311:12 - connection state
311:14 - dot waiting that means we need to show a
311:16 - circular progress indicator
311:18 - so we can do return constant
311:21 - center
311:22 - with a child
311:23 - circular
311:24 - progress indicator we are going to
311:27 - return that
311:29 - then after that we need to return
311:31 - a list of comments so we'll use return
311:33 - list view dot builder
311:35 - and we'll have item builder again we'll
311:38 - have context and index over here
311:41 - then we'll be able to return
311:43 - after uh this list is done we need to
311:46 - return comment card
311:48 - and the comment card has to give in
311:51 - something
311:53 - which we'll fill in in some while
311:56 - so
311:57 - yeah and we also need to pass in the
311:59 - item count now this is where the problem
312:01 - comes in if we don't explicitly mention
312:03 - the type of the snapshot so if we do
312:05 - snapshot
312:08 - dot data
312:10 - and we mark it as non-nullable then we
312:12 - can't call doc's property over here you
312:15 - see
312:16 - we want to do this
312:18 - snapshot.data.docs but docs is not
312:20 - provided to us because this doesn't know
312:22 - that we'll have uh
312:24 - you know uh us async snapshot which will
312:27 - be a query snapshot and then a map
312:29 - inside of it you know it doesn't know
312:32 - this so we can either again type
312:35 - uh the async snapshot query snapshot map
312:38 - string dynamic that we did earlier or we
312:41 - can just
312:42 - bracket this out
312:44 - and say as dynamic
312:48 - so this means that the snapshot.data can
312:50 - be dynamic so we can call docs over here
312:53 - but the only downside of using this is
312:56 - we won't get the autocomplete so if
312:58 - you're wrong over here you won't even
313:00 - get to know
313:02 - so this is a cheap trick if you want to
313:03 - follow you can go with this or you need
313:06 - to explicitly mention the async snapshot
313:09 - thing over here
313:10 - cool i'll keep this for now and now
313:13 - let's try to you know see this
313:16 - so if i go you can see the username over
313:18 - here and everything which shows up only
313:20 - one comment because we have only one
313:22 - comment then we can type another comment
313:24 - hey second comment
313:26 - and we can post over here and you can
313:28 - see our second comment showing up but
313:31 - the text is a bit different because we
313:32 - need to pass in some text
313:34 - also over here uh we need to make some
313:37 - spacing and after this is done we need
313:40 - to remove the comment uh text from here
313:44 - so
313:45 - in our post what we can do is
313:49 - after this post comment is done we can
313:51 - set the state of text
313:54 - editing no sorry we had comment
313:57 - controller comment controller dot text
313:59 - dot
314:02 - which is equal to this we'll set it to
314:04 - empty and if we try to send in another
314:07 - one let's say
314:09 - we'll have to refresh our app because
314:10 - the state of this app changed and you
314:12 - can see they're showing up
314:14 - now if we type
314:16 - hey
314:17 - third
314:18 - and post it over here you can see this
314:20 - comment disappearing after this has been
314:22 - posted and all of this is real time
314:24 - showing up because we have used stream
314:26 - builder
314:27 - now let's go to the comment card and
314:29 - edit some of this function now let's see
314:30 - what error we're getting
314:35 - and this was the keyboard error that
314:37 - we've gotten that's not much of a big
314:39 - deal you'll not get this on a real
314:41 - device ios simulator sometimes causes
314:43 - these issues
314:45 - then uh the next thing you want to do is
314:48 - in the comment card that we pass over
314:50 - here we also need to pass in the
314:52 - snapshot
314:54 - of this uh
314:57 - stream builder so what we can do is
314:59 - snap short dot
315:03 - data
315:04 - dot docs dot length and again we'll have
315:07 - to do
315:08 - snapshot dot data as dynamic that's why
315:12 - i would recommend following the other
315:14 - method of async snapshot because every
315:16 - time you'll have to do this
315:18 - and even no autocomplete that's a
315:21 - frustrating thing and now in the comment
315:23 - card
315:25 - what we can do is have a final snap over
315:28 - here then we need to require this
315:32 - snap so we can do required this dot snap
315:36 - at no cost this can be null
315:39 - and the network image can be let's say
315:42 - remove all of this and we can have snap
315:45 - dot
315:46 - sorry widget dot snap
315:49 - and the
315:51 - we'll have to pass in widget dot snap
315:53 - dot data actually over here uh we don't
315:56 - have to pass in
315:58 - snapshot.docs.linked actually we have to
316:00 - pass in
316:03 - the
316:04 - snapshot.docs at that index so
316:07 - in our comments uh suppose we have this
316:09 - post and comment over here so what we
316:11 - need to do is snapshot.data
316:14 - so we'll get that and the docs
316:17 - these three documents and we have to
316:19 - grab them by their indexes so zero one
316:21 - two so we'll get the first zero one then
316:24 - the second then the third and over here
316:26 - we'll also call dot data
316:29 - so that you know
316:30 - uh we don't have to do that again and
316:32 - again over there
316:36 - so we can remove
316:37 - widget.snap.data from here and instead
316:39 - just write widget dot snap and then we
316:42 - can pass in
316:43 - profile
316:44 - pic i think that's what we named this
316:47 - profile pic correct
316:48 - now i'll copy this and we just have to
316:51 - change this part from here but let's see
316:52 - if we are getting the
316:54 - change description
316:57 - changed and our username has changed
316:59 - which is pretty good
317:01 - now we can go to the username have a
317:03 - username as
317:05 - username and remove the single inverted
317:07 - comma from the side
317:10 - save this
317:11 - and
317:13 - you're not seeing any username
317:16 - so what you can do is refresh and go to
317:18 - where
317:22 - and we are not seeing any username
317:24 - because we saved it as name over here
317:27 - let's fix that
317:29 - and we can see right run it
317:31 - now i want to
317:33 - do string interpolation over here again
317:35 - because we need to leave some space from
317:37 - here so what we can do is leave some
317:39 - space
317:40 - and we can do
317:41 - widget
317:42 - as copied
317:43 - widget dot snap and we'll pass in the
317:46 - text over here
317:49 - hey hello world hello hey second comment
317:51 - hey third and the final thing we need to
317:53 - do is
317:54 - this date formatting so what we can do
317:56 - is date format which is from the intel
317:59 - package
318:00 - dot
318:01 - and we have to follow ymmd
318:05 - format
318:06 - and we need to pass in the date over
318:09 - here so what we can do is widget dot
318:11 - snap
318:12 - and we have named it date published over
318:14 - here
318:17 - and
318:18 - we know that this accepts a date so we
318:21 - can do dot to date
318:25 - and pass anywhere
318:27 - after this dot ymd we also need to call
318:30 - the format
318:32 - and we also need to pass in this as a
318:34 - function
318:36 - so we are calling date format.ymmd and
318:38 - we need to format in this document
318:40 - widget dot snap
318:43 - date published
318:45 - and we're converting the date publish to
318:47 - date because it is a time stamp that
318:48 - we're receiving from the firebase file
318:50 - store
318:51 - we can also put const over here so that
318:53 - we don't get the error anymore
318:56 - and we should see december 23 showing up
318:59 - which is pretty good
319:02 - and this is all that we need to make
319:04 - change of and if you want you can have a
319:07 - heart icon over here which basically
319:09 - helps you to like
319:11 - and i think you have enough knowledge to
319:13 - go ahead and do this because basically
319:16 - this is another comment class that we
319:18 - have you can create a like list over
319:21 - here so you can have a likes
319:24 - list over here
319:26 - addy basically and then it will be empty
319:30 - for the first one and whenever the user
319:33 - likes we can use rf
319:35 - value uh field value dot array union or
319:38 - array remove similar to what we did for
319:41 - this like option over here and you can
319:43 - even add the you know the animation part
319:46 - you just have to cover it with the like
319:48 - animation widget and pass in the
319:50 - duration and everything
319:51 - i think you'll be able to do it so now
319:54 - if i type again over here let's say
319:57 - hello
319:58 - how are y'all
320:01 - and post it over here
320:03 - we should see hello how are you all
320:04 - showing up over here
320:06 - the only problem now i have over here is
320:09 - this is coming up in a random format
320:13 - so what i want to do is not have this in
320:15 - a
320:16 - random format but have this in the
320:19 - sorted manner like the according to the
320:22 - date published so what we can do is in
320:24 - the comment screen
320:27 - in the snapshot what we can do is after
320:29 - this collection we can make use of dot
320:31 - order by
320:33 - and with this we can sort the comments
320:35 - that we have by some particular field
320:38 - which in our case will be date published
320:42 - and uh by default it's descending to
320:46 - false and we need to make sure
320:48 - that the descending is
320:50 - true
320:53 - yes let's try descending to true
320:56 - and you can see hello how are you all
320:59 - hey third a second so whatever the
321:01 - newest comments are that will be on the
321:04 - top
321:05 - and if you want to do the opposite or
321:07 - you can do descending
321:10 - false
321:12 - and if we do that you can see the
321:15 - old ones coming up at the top and the
321:17 - new ones coming at the bottom but we
321:18 - don't want to do that so i'll keep this
321:20 - and
321:21 - you can see the newest comments
321:23 - coming at the top
321:25 - so this is the order by property which
321:27 - uh
321:28 - firebase provides us you can even use
321:30 - some other field like you know profile
321:33 - pack uh sorry the likes that we created
321:36 - right now and if you want to add that
321:38 - but we are not going to add that so uh
321:41 - you can add based on the likes and you
321:44 - can descending it with the number of
321:46 - likes one user has
321:49 - and according to the text according to
321:52 - the uid if you want like anything
321:54 - basically but you would anyways prefer
321:57 - date published because that's how most
321:59 - of the apps are
322:00 - so we have our working comment screen as
322:02 - well the last thing we want to do for
322:04 - the post is
322:06 - uh over your view all 200 comments we
322:09 - need to make sure that we have zero
322:11 - comments over here or three comments
322:12 - right now over here so what you can do
322:14 - to
322:15 - do this is go to the post screen post
322:18 - card actually
322:22 - and over here we are going to call the
322:24 - init state from where we are going to
322:25 - get the data of our app
322:28 - so in init state and we are going to
322:30 - have a future over here which will get
322:32 - us the comments so we can type get
322:34 - comments
322:35 - we can create this function
322:37 - void
322:38 - get comments
322:40 - it will be an asynchronous function so
322:42 - it will basically be a future and it
322:44 - will get us the comment length so we can
322:46 - type end comment length equal to zero
322:52 - and the comment length will be this so
322:55 - what we want to do is get the data so we
322:57 - can do
322:58 - the get function we can use so what we
323:00 - are going to do is await this and call
323:02 - firebase firestore dot instance dot
323:05 - collection
323:06 - in our posts
323:08 - then we can go to the dock and we can
323:10 - pass in the post id which we will get
323:12 - from the snap that we have
323:14 - gotten from the constructor
323:16 - we can do post id
323:19 - and after that we are again going to go
323:21 - in the collection of comments
323:24 - and then
323:25 - get from there
323:28 - and if you do hover over here you can
323:30 - see query snapshot we have seen document
323:32 - snapshot this query snapshot is similar
323:34 - to document snapshot only that the
323:36 - document snapshot is received when we
323:38 - call a get on this dot doc
323:41 - and query snapshot is received after we
323:43 - get the uh after we put get after the
323:46 - collection
323:47 - so you can give it a type of query
323:49 - snapshot and snap
323:52 - and await this so the difference between
323:55 - query snapshot will be that we will get
323:58 - a list of comments if we do get so what
324:02 - we can do is
324:04 - comment length which will be equal to
324:07 - snap dot docs as we saw it will get us
324:09 - the list of all the documents and then
324:12 - we can do dot length
324:14 - and we can say this
324:16 - and after that we can even
324:19 - wrap this and try catch so that you know
324:21 - if we get an error we can see it in our
324:24 - log or we can display it to the user
324:26 - so we'll have our catch
324:30 - and in this
324:31 - cache we will have show snack bar and
324:33 - the content will be whatever error we
324:36 - get e dot to string
324:39 - and we'll pass in a context
324:42 - then after that we are going to set the
324:43 - state of our app
324:45 - so that we can see the comment link and
324:47 - we're going to format this document and
324:48 - c after this
324:51 - we can take the comment link that we
324:53 - have and
324:54 - go down to the bottom where we say view
324:56 - all 200 comments and instead of that we
324:58 - can say
325:00 - view all comment length comments
325:04 - and if we say that we should be able to
325:06 - see view all four comments and we have
325:08 - four comments
325:10 - pretty cool right now this since this is
325:13 - a future if we type a comment over here
325:15 - like hi
325:17 - and post it
325:19 - will not see any update only after we go
325:21 - over here and come back
325:23 - we will see that this has changed to be
325:25 - all one comments so that's why i would
325:27 - recommend you to
325:29 - start using stream instead but i wanted
325:32 - to show you query collection over here
325:35 - basically the query snapshot and that's
325:37 - why i've used a few uh the
325:40 - future over here as i would have gone
325:42 - with the stream
325:44 - option now having that the last thing is
325:47 - we have to delete this post now let's
325:48 - see how we can delete a document from
325:51 - our app so the next thing we need to
325:53 - work on is whenever we click over this
325:55 - delete function delete uh dialog
325:58 - we need to delete this post
326:00 - so to do that we'll go to the firestore
326:03 - methods we have
326:04 - and where we can create a comment of
326:07 - deleting the post
326:09 - and it will have a type of future void
326:12 - and we can delete the post
326:14 - it will accept one string of post id and
326:18 - it will be as asynchronous process
326:22 - and again we have to wrap it with a try
326:24 - catch block
326:27 - i think you are familiar with the drill
326:29 - now so you can just follow this same
326:32 - thing
326:33 - again and again again
326:35 - you can just follow the rest format if
326:38 - you want you can refer to my github
326:39 - repository below it has the rest format
326:41 - if you're not very familiar with it
326:43 - still
326:44 - but try to do it on your own you'll
326:45 - learn it
326:46 - and after this the next thing you want
326:49 - to do is take the fire store
326:51 - you have to go to the collection
326:53 - which will be the post collection
326:55 - then we need to document it
326:58 - we go to the document of post id
327:01 - and then we call the delete function on
327:04 - it
327:05 - this is how easy it gets to delete a
327:07 - document from a collection and if you
327:09 - call delete on this collection over here
327:12 - you won't be able to delete the
327:13 - collection to in order to delete the
327:15 - collection you need to
327:16 - delete all the documents that it has
327:19 - if you delete all the documents and the
327:21 - collection is empty it will
327:22 - automatically get removed from our
327:24 - database and now if we await this
327:28 - we should see
327:29 - that
327:30 - we have our delete post happening
327:32 - so we can take this delete post from
327:34 - here go to our postcard
327:37 - and over here find delete
327:40 - and in the on tab what we can do is
327:43 - mark this as an asynchronous process
327:47 - and call
327:49 - firestore
327:51 - methods
327:53 - dot
327:54 - delete post and the post id we have to
327:57 - pass in which will be widget
327:59 - dot snap
328:01 - and it will be post id
328:05 - and after this ontap is done
328:07 - and we click over here it will delete
328:09 - the post for us but we also want to
328:11 - remove this dialog box that shows up
328:13 - after that so we can do navigator
328:16 - dot of context dot pop
328:21 - so after this is done let's try to
328:22 - delete one post of us so let's go over
328:25 - here
328:27 - delete
328:28 - and you can see one of our posts got
328:30 - deleted if i want to delete this post
328:32 - let's try to delete that and you can see
328:34 - only one post is remaining and we can
328:37 - click away or see the like animation
328:42 - which is pretty cool
328:43 - right our delete post has been working
328:46 - so the next thing we need to work on is
328:47 - the search screen over here let's do
328:49 - that so the next thing we need to work
328:51 - on is the search screen so whenever we
328:53 - go on the search screen we should see
328:54 - two things
328:56 - first is a list of uh you know uh an app
329:00 - bar where we can get a form field and
329:02 - here we can search for a user
329:05 - and uh if the user types something and
329:08 - presses enter we need to show the list
329:10 - of users that are there
329:12 - right
329:13 - we need to do that
329:15 - else if nothing is typed we need to show
329:18 - a search bar
329:19 - and a list view that looks something
329:22 - like this we have a big image over here
329:24 - then we have a small image over here a
329:27 - small image over here
329:29 - then a small image over here something
329:31 - like this so
329:33 - first
329:34 - let's not complicate ourselves and work
329:36 - on the search screen so to do that uh
329:38 - we'll go to our uh
329:41 - our app over here and create a
329:44 - screen called search underscore screen
329:47 - dot dot
329:49 - after that we are going to import the
329:51 - material package
329:54 - and we are going to create a stateful
329:55 - widget called search screen
329:59 - then we can take the search screen from
330:01 - here and go to our global variables
330:05 - where we had saved this and
330:07 - we're going to replace
330:10 - this with search screen
330:12 - now having that we are going to have a
330:15 - scaffold as well
330:17 - and we can save this to see an empty
330:18 - screen then if we go on the search
330:20 - screen we see nothing that is exactly
330:22 - what we wanted now at the top we need an
330:24 - app bar so we can do app bar
330:27 - and the app bar will have a background
330:30 - color of mobile background color
330:33 - then in the title we are going to have
330:36 - a text form field
330:40 - and the text form field will have
330:42 - decoration of
330:44 - input decoration where we will just have
330:46 - to give a hint to the user
330:49 - so
330:50 - actually instead of hint let's give a
330:52 - label
330:53 - and the label
330:55 - text will say
330:57 - search
330:58 - for a
331:00 - user we'll have to put it in a string
331:04 - after that we'll
331:06 - have to pass in a controller we'll
331:08 - create a controller now itself we'll
331:10 - call it final text editing controller
331:15 - search controller which is equal to text
331:18 - editing controller
331:22 - now having that we can dispose of this
331:24 - as well
331:25 - so
331:27 - we can take this and put search
331:29 - controller dot dispose
331:34 - then the next thing you want to do is
331:36 - whenever the field is submitted because
331:38 - you're not going to give an option of
331:40 - you know
331:41 - a post or you know search or anything
331:43 - like that
331:45 - uh we are just going to uh
331:47 - check if the field is submitted or not
331:49 - so on field submitted we'll get a string
331:52 - value which we don't care about
331:54 - and uh
331:56 - what we're going to do is basically
331:58 - let's just print this value to see what
332:00 - we're getting
332:02 - if it's a value or not but since we have
332:04 - our controller over here which we
332:06 - haven't put in let's put that
332:10 - uh both of these values are going to be
332:12 - the same thing at the end
332:13 - so yeah
332:15 - now we can just print this and if we go
332:18 - over here
332:20 - and search for a user with name rivan
332:23 - you can see i'm getting ribbon over here
332:25 - and if i print
332:27 - let's say search controller dot
332:30 - text and if i come over here
332:33 - i should see riven on both the ends
332:37 - i would
332:39 - if i search for one and press enter
332:41 - i should get driven twice
332:43 - show the users so in the body
332:48 - we are going to have
332:49 - a
332:50 - future builder because well we need to
332:52 - get the data
332:55 - so over here in the users you are going
332:57 - to get all the data of the users so we
333:00 - are going to call future builder because
333:02 - well it's future
333:04 - and then uh you can use firebase
333:07 - firestore
333:09 - dot instance dot collection
333:12 - and what do we need a collection of
333:15 - users
333:17 - dot get
333:18 - now if we do this much we'll get uh so
333:22 - whenever we type something we will get
333:24 - the collection of the users and uh we'll
333:26 - get all the data of the users
333:29 - right but that's not what we want we
333:31 - want uh information related the user
333:34 - that we're searching for so uh
333:36 - firebase provides us with an extra
333:39 - you know a method which is called where
333:42 - and with this where we can pass in a
333:44 - field that we want to check for example
333:46 - username you can even check for you know
333:48 - a bio email uid or if you had a display
333:52 - name you can add that as well so over
333:55 - here i'm going to check for the username
333:57 - so wherever username is
334:00 - you can have multiple methods over here
334:02 - is equal to which will return to us you
334:04 - know
334:05 - a username is greater than it will check
334:08 - the ascii value of the username that it
334:11 - passes through every time and we'll
334:13 - check if the
334:15 - if the any name is greater than the
334:18 - username that we'll provide over here
334:20 - and
334:22 - basically it will check ascii values for
334:24 - each and every uh function
334:27 - so what we want is called is greater
334:30 - than or equal to if we put is equal to
334:32 - it will exactly check for the username
334:34 - that we give it but we don't want that
334:36 - we want it to be either
334:39 - equal to or you know less or
334:42 - somewhere equal to that name
334:44 - so we're going to put this name and
334:47 - what does it have to be equal to our
334:49 - search controller dot text
334:54 - and we format the document so with this
334:56 - we are getting the username which is
334:58 - similar to this text over here
335:01 - cool now if we have a builder over here
335:04 - we can have context
335:07 - and a snapshot
335:09 - and
335:11 - we can again check if the snapshot has
335:13 - any data or not
335:18 - if the snapshot has no data it will
335:20 - return a constant
335:23 - center
335:25 - child
335:26 - circular progress indicator
335:32 - and if there is data what we need to
335:35 - show is a list view builder so we can
335:37 - return a list
335:38 - view builder
335:43 - and this list view builder will have
335:44 - item count and the item count is going
335:47 - to have snapshot dot data
335:51 - and as we have discussed before we need
335:53 - to pass in the value for the snapshot
335:55 - but i haven't done that so i'm just
335:57 - going to type this as dynamic
336:03 - and then we are going to call
336:05 - dot docs dot link
336:09 - and in the item builder we are going to
336:10 - have a context
336:12 - and an index
336:14 - and we are going to return
336:19 - our list style
336:22 - now this list style will basically this
336:24 - list style will uh how will it look it
336:27 - will have a circle avatar then the
336:28 - username and that's it that's all we
336:31 - want so we can create that stuff with
336:33 - the list style pretty easy right
336:36 - so
336:37 - we will have a leading element as
336:40 - a circle avatar
336:43 - and the circle avatar will have a
336:45 - background image of network image and
336:49 - the network image will be
336:51 - this
336:52 - snapshot
336:54 - we have to remove this two string from
336:56 - here it will have snapshot dot data
336:59 - dot docs
337:01 - and we'll grab that docs by index
337:04 - so what we're doing is we got a selected
337:06 - user so in the firebase console if you
337:09 - go you click over here you can filter it
337:12 - by this and you can have a preview of
337:14 - what's happening so we have uh filtered
337:16 - by a field name username then we are
337:19 - adding a condition where it's greater
337:21 - than or equal to and let's say
337:23 - we are going to type rr and now if we
337:27 - apply you can see
337:28 - there are two rrr user names over here
337:31 - and we can grab them now it will go over
337:34 - the indexes so this is the zeroth
337:37 - element then the second elem of first
337:38 - element it will grab this
337:41 - then it will uh get the data of this
337:44 - element over here and then we need to
337:46 - access
337:47 - the photo url
337:50 - property on it
337:53 - cool now
337:55 - after this we need to have
337:57 - a title element and the title will be
338:00 - having text
338:01 - which will be snapshot.data as dynamic
338:05 - dot docs
338:06 - at index
338:08 - username
338:12 - and if we format this document put a
338:14 - semicolon over here so we need to do
338:17 - some conditional rendering so we'll
338:19 - create a
338:21 - boolean value of
338:23 - do we need to show user or not so we are
338:25 - going to call it is show users
338:28 - and if the issue user the show users is
338:31 - going to be true only when the field is
338:33 - submitted so we can do set state is show
338:36 - users is equal to true
338:39 - and where we can conditionally render if
338:41 - show users is true then we need to show
338:44 - this else we can show a text that says
338:49 - posts which we'll work on in some time
338:51 - all right now that we run our app we
338:53 - should see the search screen so we're
338:55 - getting the posts written over here that
338:57 - is a good thing because our is
339:00 - our
339:01 - show users is false currently and only
339:04 - when we submit the form should we see
339:05 - the thing happening so if i type rrr
339:08 - over here i should see my user and its
339:11 - image there were two rrr users i had to
339:14 - delete one because uh one was the
339:17 - one rrr user was the one where we hadn't
339:20 - put the profile image we were just
339:22 - checking if our user is generated and
339:24 - stored in the firebase or not
339:26 - so i had to delete that one this is
339:29 - showing a pretty good so the next thing
339:30 - you want to do is when there is no user
339:34 - searching happening uh we need to show
339:36 - the posts
339:37 - and we'll do that so now to display it
339:40 - over here what we need to do is first
339:41 - think of the layout we need to create so
339:44 - what layout i have in mind is we need to
339:46 - have one post like this over here
339:49 - then another post that shows up like
339:51 - this
339:52 - another post that shows up like this and
339:54 - all of these posts will be uh from the
339:56 - database like the post collection of our
339:59 - firestore database then again we'll have
340:01 - a small picture over here then a small
340:03 - picture over here then a big picture
340:05 - over here something like this
340:07 - so let's try to create that this kind of
340:10 - layout to make this kind of layout we're
340:12 - going to use a flutter package called
340:14 - flutter staggered grid view it's a
340:16 - pretty uh great
340:18 - dependency in my opinion you should
340:21 - check it out i'll mention the link of
340:23 - this in the description below
340:25 - and now since we have added a new
340:27 - package we'll have to stop our app
340:28 - processes and when do we need to show
340:31 - this when posts is showing so basically
340:33 - we'll have to replace our text over here
340:35 - with
340:36 - this
340:37 - so first of all we'll have a future
340:39 - builder because we need to get data of
340:42 - the
340:43 - because we need to get the post
340:44 - collection from here so we'll create a
340:47 - future builder over here and in the
340:49 - future builder we'll have a context
340:53 - and a
340:54 - snapshot
340:56 - and then we'll over here check if
340:58 - snapshot dot has data all the stuff that
341:00 - we did before basically and only our
341:03 - future will change over here
341:05 - our future will become firebase
341:07 - firestore
341:08 - dot instance dot collection
341:11 - of posts
341:13 - dot
341:14 - get
341:16 - there are no
341:17 - sub collections in this we just want the
341:19 - collections uh stuff over here we just
341:21 - want to output the images over here
341:24 - that's why we are doing dot get on the
341:26 - collection
341:27 - now if snapshot dot
341:29 - has data actually if the snapshot
341:31 - doesn't have any data what do we need to
341:34 - show
341:35 - we just need to show
341:37 - a
341:39 - constant
341:40 - circular
341:41 - progress indicator
341:44 - or you can even put if snapshot dot
341:46 - connection state is equal to connection
341:48 - state dot waiting even that works then
341:50 - after this is done we also need to wrap
341:52 - it with a center widget because we need
341:54 - to show it in the center
341:56 - and we can put it over here and it will
341:58 - be a constant widget
342:01 - let's format the document
342:04 - remove that so if snapshot has data what
342:08 - do we need to show we need to show
342:10 - something known as
342:11 - staggered
342:15 - grid view dot builder
342:18 - and it's not builder it's we are going
342:20 - to use staggered view dot
342:22 - count builder it has a lot of uh
342:25 - methods like this you can check it out
342:27 - but we are going to use the staggered
342:30 - grid view dot count builder and it will
342:32 - take in a across access count first
342:35 - which will be three
342:37 - then it will have an item
342:40 - count
342:41 - which we'll pass in as
342:44 - snapshot
342:46 - dot data as dynamic
342:50 - dot dot docs dot length
342:54 - and after this is done we'll have a grid
342:57 - we'll have to remove this and we'll have
342:59 - an item builder and our item builder is
343:02 - basically going to return an image
343:04 - so we can have
343:06 - context over here index
343:08 - and it is going to return image dot
343:10 - network
343:11 - and the image dot network is going to
343:13 - have snapshot
343:14 - dot data
343:16 - as dynamic
343:22 - and it will have dot docs at index
343:27 - and we'll get the property of post url i
343:30 - hope this line is clear to you we have
343:32 - used this multiple times so i think you
343:34 - should be clear with it
343:37 - then we will have staggered tile builder
343:39 - which will give us an index and with
343:42 - this index we are going to return a
343:44 - widget called staggered
343:46 - tile
343:48 - dot count
343:49 - and over here the cross axis cell count
343:52 - is going to be
343:53 - if the index
343:55 - is completely divisible by seven
343:58 - then
343:59 - we will show
344:01 - uh two is to one count
344:04 - else what we are going to show and in
344:07 - the main access count we are going to do
344:09 - the same thing
344:12 - right and now we're going to return this
344:16 - and we can format the document
344:18 - so basically if the index that we have
344:20 - over here like the image index that
344:22 - we'll receive is completely divisible by
344:24 - 7 we want a count of 2 or else we want a
344:28 - count of 1 and same for the main access
344:31 - alignment as well so like the main
344:32 - access count
344:34 - now if we save this
344:36 - and
344:37 - run our app we should be seeing that
344:40 - so as you can see our app is loaded and
344:42 - if we go to the search we are seeing one
344:44 - post over here because we have only one
344:45 - post right now but it's showing up like
344:47 - this exactly the way we wanted we can
344:49 - add another post let's choose from
344:51 - gallery and add another post over here
344:54 - and we can write hey
344:57 - all the other posts
345:00 - were deleted
345:03 - and we can post
345:09 - and now if you go to the search bar
345:11 - we should see another post that pops up
345:13 - and it pops up over here but you know
345:16 - this doesn't like
345:17 - look as cool as it should because
345:20 - there's no spacing all of these elements
345:21 - both of these elements are stuck
345:23 - together so we'll
345:25 - create some spacing so in the main axis
345:27 - spacing we're going to add a spacing of
345:29 - 8 and we'll do the same for
345:32 - cross axis spacing and we'll put 8 as
345:35 - well now let's try to see our app and we
345:38 - see this is showing up very cool and you
345:40 - can see that there is a bit of you know
345:42 - spacing over here which looks much
345:44 - cooler now the next thing we need to do
345:46 - is whenever we search for a user suppose
345:47 - i search for a user with rrr and go
345:50 - where we need this to be clickable and
345:52 - show the user profile where we can you
345:54 - know follow the user see the users
345:56 - following see the description and
345:58 - everything so let's do that so to do
346:00 - that the first thing we need to do is
346:02 - create a new screen called
346:05 - profile screen
346:07 - and this is going to be a reusable
346:09 - profile screen so that we can show this
346:12 - over here in our profile
346:14 - tab as well and whenever we click on
346:17 - drivan
346:18 - suppose i search for a user by the way
346:20 - i've cleared my database because you
346:22 - know i wanted to make it
346:24 - some sort of clean
346:26 - so i've just added these
346:28 - and whenever we click over here so
346:30 - whenever we click over here
346:32 - we need to show the profile screen that
346:34 - shows up and it will be the same thing
346:36 - for the search users and the profile
346:39 - screen over here so let's do that
346:43 - the first thing we will need is
346:45 - importing the material dot
346:48 - and after that we'll need a stateful
346:50 - widget because this is a profile
346:52 - screen because we need to have an init
346:55 - state function and everything we'll see
346:58 - that
346:59 - and the first thing we need to do is
347:01 - create the ui of our profile screen so
347:03 - let's create a scaffold
347:06 - and what i'm going to do is take this
347:07 - profile screen go in our global
347:09 - variables
347:10 - and replace this with
347:13 - screen
347:17 - so that we can see
347:19 - our output over here
347:21 - and now if we save this we should see an
347:23 - empty screen
347:25 - cool now
347:26 - how is our uh profile screen going to
347:29 - look like so over here the first thing
347:31 - we would need is an app bar
347:34 - and in the app bar we'll have our
347:36 - username over here
347:38 - then we'll need a
347:40 - profile picture over here
347:42 - and then we will need number of follower
347:45 - a number of posts number of followers
347:47 - number of following and their subtitles
347:51 - then we will need our description or bio
347:54 - over here then we'll over here we'll
347:56 - need a button that will say follow
347:59 - unfollow or edit profile since it's
348:01 - going to be reusable we'll configure to
348:04 - work all the three ways and then we need
348:07 - to show the posts of the user whatever
348:10 - user has posted we need to show those
348:12 - posts over here
348:14 - right so now let's work on it so we have
348:16 - a scaffold in the start
348:19 - and the next thing we need is an app bar
348:22 - so we can have an app bar
348:25 - and our app bar is going to be of the
348:26 - color background color
348:28 - mobile background color
348:30 - and the title is going to be of text
348:35 - and we'll have to pass in some username
348:37 - for now let's keep it username
348:40 - and
348:41 - we won't add any other styling we'll
348:44 - set the center title to false
348:47 - then we need to we need to add a body
348:50 - but before adding a body let's see how
348:51 - our app bar is looking now
348:54 - i if i come over here so that you know
348:56 - we can see it and rerun our app
349:01 - and over here we can see our username
349:03 - showing up pretty cool
349:05 - now we need to have our body
349:08 - and the body we are going to wrap it
349:10 - with a list view because it's going to
349:13 - be multiple things that are coming up
349:16 - so
349:16 - it will accept the children
349:19 - and the first thing we need to work on
349:21 - is having a profile picture over here
349:24 - and beside that we want the stats that
349:27 - show up like the followers following and
349:29 - everything
349:30 - so let's create that
349:32 - so we'll first of all have
349:34 - a column
349:37 - because we need
349:39 - so why do we need a column over here is
349:41 - basically below this profile picture we
349:43 - are going to have
349:45 - a description and beside this profile
349:47 - picture we are going to have our you
349:49 - know followers following and stats
349:51 - basically
349:52 - so we need a column
349:54 - and
349:55 - what i'm going to do is wrap this with
349:57 - the padding because i feel we need some
349:59 - padding
350:01 - we can add padding and padding can be
350:03 - const
350:04 - edge inserts dot
350:07 - all
350:08 - 16
350:11 - then we can go to our column and we'll
350:13 - have children now in the children we'll
350:17 - have a row
350:18 - as we discussed we need the profile
350:21 - picture and the stats like this
350:23 - so we'll have a circle avatar first of
350:26 - all we'll have to pass in children and
350:28 - the first thing we need is a circle
350:30 - avatar
350:32 - and
350:33 - it will have a background color of
350:36 - colors dot gray so whenever the you know
350:39 - the picture is loading we'll see a gray
350:40 - color
350:42 - and we need a background image
350:44 - and we'll again go to our good friend
350:46 - unsplash
350:51 - grab one photo from here
350:56 - and
350:57 - paste it over here
350:58 - actually we need to pass in a
351:01 - network
351:02 - image
351:03 - and in the network image we need to pass
351:05 - in this url
351:08 - we will format this document
351:12 - cool now we have that and if we save
351:14 - this we should see our profile screen
351:16 - showing up now this image is very small
351:18 - so i can increase the radius of this
351:20 - image which will be 40.
351:23 - now if we save and go back you can see
351:25 - this image is quite big now
351:27 - cool
351:28 - now
351:29 - after this circle avatar we need to
351:32 - build a stats uh
351:34 - star kind of thing so uh we are going to
351:38 - have the number of like the number of
351:40 - posts in digits then the posts aware
351:44 - number of followers then the followers
351:47 - number of following and then the
351:49 - following text written below it
351:51 - so to do that we are going to have
351:54 - another row
351:57 - and in that row
352:00 - we are going to have
352:02 - a main axis
352:04 - size of main axis size dot
352:08 - minimum
352:09 - [Music]
352:11 - then we are going to have a main access
352:12 - alignment of main access alignment dot
352:15 - space evenly
352:17 - because we need them to space out
352:19 - properly
352:20 - and then we'll have children
352:23 - and with the children we're going to
352:25 - have the post and you know this column
352:28 - that we have over here basically this
352:31 - kind of column so since you're going to
352:33 - have three columns like this i'm going
352:35 - to build a separate widget for it so to
352:37 - do that i'm going to create a function
352:39 - and i'll call it
352:41 - over here we are going to create that
352:43 - over here
352:44 - and we're going to call it column which
352:46 - is the return type of this widget
352:49 - build stat
352:51 - column
352:54 - and it will take in a
352:58 - hint of number
353:00 - and a string of label
353:03 - and then it will return
353:05 - a column
353:09 - and the column will have main access
353:11 - size of main access size dot minimum
353:16 - main access alignment of main access
353:19 - alignment dot center
353:22 - we'll have children in it and the
353:23 - children will be text
353:25 - which will be the first thing so this
353:28 - part over here
353:29 - so it has to be a number so it will be
353:31 - text number
353:33 - dot to string
353:36 - then a style and the style is going to
353:39 - be
353:39 - a text style of font size
353:43 - 22
353:44 - font weight
353:45 - of font weight dot
353:48 - bold
353:49 - and we're going to mark it as a constant
353:53 - after that we can save this
353:55 - then uh we'll have a
353:59 - another text so we're going to copy this
354:02 - and paste it over here
354:04 - we're going to make some changes first
354:05 - of all the text is going to be label
354:09 - then the text style
354:10 - will have a font size of 15 and this is
354:13 - not going to be bold this is going to
354:15 - have a weight of 400
354:17 - and the color is going to be
354:21 - colors dot gray
354:25 - now having that let's see
354:27 - it in output
354:29 - so we can go over here and in the
354:30 - children we can have
354:36 - we can have build start column
354:38 - and we'll pass in
354:40 - first thing as posts
354:43 - no the second thing has to be post
354:45 - the first thing will be a number for now
354:47 - let's just type in 20
354:50 - and we can
354:52 - pass in multiple things
354:54 - so
354:55 - our next is going to be followers
354:59 - and a followers are let's say 150
355:03 - and
355:05 - our following is
355:07 - 10.
355:10 - and we save this
355:12 - and let's try to see the output on our
355:14 - screen
355:15 - so if we do go over here
355:17 - we can see this is showing up and this
355:20 - is not the best output we could have
355:21 - gotten so let's try to improve it
355:24 - so
355:25 - the first thing i want to do is i want
355:28 - this to take the maximum possible width
355:30 - over here
355:31 - so i can just wrap this row
355:34 - with a widget known as
355:36 - expanded we have to use this and we'll
355:39 - pro provide it with the property of flex
355:42 - one
355:42 - now let's see the improvement and you
355:44 - can see this is spaced out pretty well
355:47 - now the next thing we want is where are
355:50 - we going to leave some spacing between
355:51 - the posts that we have
355:53 - and this over here so what we can do is
355:58 - wrap this text with a container
356:02 - we're going to get a margin and the
356:04 - margin is going to be edge in sets
356:08 - dot only and from the top we're going to
356:11 - leave four
356:13 - if we save this
356:14 - we should get a different output and you
356:16 - can see we have left some space
356:18 - now we can change the font size over
356:20 - here to let's say
356:22 - 18 and we'll save it
356:25 - can again go back and you can see it's
356:27 - looking much decent and i'm going to
356:30 - continue with that this looks pretty
356:31 - good
356:32 - you can change it according to your
356:34 - preferences again having that in place
356:36 - we will scroll up again and so after
356:39 - this row what we're going to do is
356:42 - create the buttons that we need over
356:43 - here this buttons the follow edit
356:46 - profile and unfollow buttons so we'll
356:49 - create another row
356:52 - and we'll call them
356:54 - main access alignment
356:56 - and we'll call it main access alignment
356:59 - dot space evenly
357:01 - then we need children in that so we get
357:04 - we are getting this error because we
357:05 - have put in the row inside the expanded
357:08 - we need to put this outside of the
357:10 - expanded
357:11 - cool
357:13 - now in the children what we're going to
357:15 - do is create a widget called as follow
357:18 - button
357:20 - and this follow button will require you
357:22 - know text and background color and the
357:24 - text color if all sorts of stuff
357:26 - so let's create that widget over here in
357:29 - our widgets folder we'll call it
357:32 - follow
357:33 - underscore button dot dot so that you
357:36 - know we don't have to reuse our code
357:38 - again so that we can reuse our code
357:40 - again and again and we don't have to
357:41 - make changes
357:42 - uh again and again basically so now we
357:45 - can import material dot
357:49 - and we are going to have a stateless
357:51 - widget which will be a follow button
357:57 - and i can change the constructor over
357:59 - here again now we're going to require
358:01 - multiple things and we'll require them
358:03 - as and when we need them so first of all
358:05 - we need a container and we'll have some
358:07 - padding and we'll have it from the top
358:10 - so we can just do only top 28 so that
358:13 - will leave some spacing from here this
358:16 - part over here
358:17 - then
358:19 - we need to have a child and a child is
358:22 - going to be a text button
358:24 - and the text button will have an on
358:26 - pressed so we require a function of ir
358:28 - so we can call
358:30 - final
358:31 - function which can be null
358:34 - and we're going to call it function we
358:36 - require that
358:39 - then we can do on
358:41 - function
358:44 - actually just function
358:47 - then we have to make this final
358:51 - then it requires a child and a child is
358:53 - going to be a container
358:55 - and the container has properties like
358:57 - box decoration
358:59 - and in the box decoration we are going
359:01 - to add the background color and what is
359:03 - the the background color of the follow
359:05 - button is going to keep on changing so
359:07 - when the background color
359:09 - so if it's a follow button we need to
359:11 - show a blue background and if it's a
359:15 - unfollow button we have to make the
359:16 - background white
359:18 - so that kind of stuff so we are going to
359:21 - import a background color as well
359:23 - so
359:25 - let's get the color final color
359:27 - background
359:28 - color
359:31 - then we need to pass in a border
359:34 - and the border will also keep on
359:35 - changing as per our colors so we will
359:38 - need that from the constructor as well
359:40 - so we can just call this
359:42 - final
359:43 - color
359:44 - border
359:46 - color
359:51 - after this we need to put a border
359:53 - radius and a border radius is going to
359:55 - remain constant so it will be border
359:57 - radius
359:59 - dot circular
360:01 - 5
360:03 - and after that we need our button to be
360:06 - aligned in the center so we'll do
360:08 - alignment dot center
360:10 - and it will have a child finally and the
360:12 - child is going to be a text
360:14 - and we required this text so we're going
360:17 - to do final string
360:21 - text
360:23 - so you're going to have this text
360:26 - and we're going to have a style and our
360:29 - style is going to be of the type text
360:31 - style
360:34 - color
360:35 - text color it will be because you know
360:38 - if our background changes our text color
360:39 - will also change
360:41 - so
360:41 - we need to import the text color as well
360:49 - after that is done
360:50 - we need to have a font weight and the
360:54 - font weight over here is going to be
360:55 - bold
360:58 - after that we can format this document
361:01 - and we need to give it a fixed width and
361:03 - a fixed height so what we can do is you
361:06 - know after this container we'll specify
361:08 - a width of let's say 250
361:11 - and a height of 2
361:14 - 27 you can use media query over here but
361:17 - what i want to do is when my screen
361:19 - which gets bigger and bigger i want this
361:21 - follow button to remain of the same size
361:23 - you can change according to your
361:25 - preference again
361:26 - then we need to require all of this i'll
361:28 - require so we have taken in from the
361:30 - constructor make sure to uh put this dot
361:33 - function are not required because our
361:35 - function can be a nullable value
361:38 - now we can go on the top and create and
361:41 - import the follow button
361:46 - and with the follow button let's add
361:47 - some stuff
361:49 - now let's add an edit profile button
361:53 - then our background color is going to be
361:56 - mobile background color we want the
361:59 - background to be
362:00 - you know black and the
362:02 - border to have something of a gray color
362:05 - so
362:06 - since our background color is
362:08 - black we wanted this to be a primary
362:11 - color which is white
362:13 - and over here we want a border color to
362:15 - be colors.gray
362:18 - then we need to pass in a function and
362:20 - for now let's let our function be you
362:22 - know uh an empty screen an empty
362:26 - function
362:27 - and we're not going to have an edit
362:28 - profile over here we're going to have a
362:30 - sign out which will change later so
362:32 - now if we see our output we are getting
362:34 - this output the reason over here is
362:36 - because we've forgotten to add you know
362:39 - a parent widget of column after the row
362:42 - and so we are
362:44 - overlapping the text over here with our
362:47 - prof edit profile button so if we do
362:49 - that and if we wrap this with a column
362:52 - and put this row inside of the column we
362:55 - will see that our error disappears
362:57 - and our edit profile comes below all of
363:00 - this so let me save my file and you can
363:03 - see this over here that we have got this
363:05 - and the next thing you want to do is
363:08 - take make the main access size max
363:11 - and yeah we have got a good looking
363:14 - output so now if we see our app and we
363:17 - can see that this is working pretty well
363:19 - now we need to remove this gap and
363:21 - probably this is because in the follow
363:23 - button we give a lot of margin we can
363:26 - make
363:26 - 28 to 2 and let's see the output
363:30 - and we are getting a decent output
363:31 - that's what we require now the next
363:33 - thing we want to do is display a
363:35 - username over here and the description
363:37 - that we are the user provided so what we
363:39 - can do is close this follow button
363:42 - and and after this uh row we need to
363:46 - pass in you know a container
363:49 - which will be
363:53 - aligned to the left so alignment
363:56 - dot
363:56 - center left
363:59 - then a padding of
364:03 - const edge insets dot only and from the
364:07 - top we leave a gap of 15
364:11 - and we'll have a child of text which
364:14 - says username
364:16 - and we need to add some styling to this
364:18 - so we'll add a style
364:21 - and what is our style going to be well
364:23 - we want the font to be bolded because
364:25 - it's the username and we're going to
364:28 - have the
364:29 - we are going to ignore the warnings for
364:31 - now because
364:32 - all of these values are going to change
364:34 - to dynamic
364:35 - and
364:36 - having that let's see the output we get
364:38 - over here we're getting the username as
364:40 - we want now we can take this container
364:43 - and
364:44 - post it down and we're going to
364:47 - change the padding to from the top we
364:50 - just need a padding of one
364:52 - and we're going to add some bios so some
364:55 - description and we can see this
364:59 - and we can remove the style over here
365:01 - because we don't want the description to
365:03 - be bolded now if you go you can see some
365:05 - description showing up which is pretty
365:07 - cool now we need some divider over here
365:10 - and then we need to display a list of
365:12 - posts
365:13 - so what we can do is after this
365:14 - container and after this padding as well
365:18 - we are going to add a divider so after
365:20 - this is done we need to display the user
365:22 - posts and that is what we are going to
365:25 - work with so this was basically the ui
365:27 - of our app
365:29 - and now let's uh replace all of these
365:32 - values with the dynamic value so to get
365:35 - in the dynamic values what we need to do
365:37 - is first of all accept the
365:39 - uid from the
365:41 - profile screen since this is going to be
365:43 - a reusable widget we need to make sure
365:45 - that we require this uid from the
365:47 - constructor and not use the state
365:50 - management uid else it will only serve
365:52 - this screen over here but not the
365:55 - screen when we search for the user
365:58 - correct
365:59 - now let's go over here so the first
366:01 - thing we need to do is create a new
366:02 - state function where we can get a when
366:05 - where we can put a get
366:07 - basically a get request to our firebase
366:10 - firestore to get the data of the user
366:13 - that we have over here so what you can
366:15 - do is type your get data
366:18 - and
366:19 - for now let's just keep our get data in
366:21 - our
366:22 - class over here we are going to call it
366:24 - an asynchronous function
366:27 - then we are going to wrap it with a try
366:29 - catch block
366:32 - and we are going to
366:33 - show a snag bar in case of any error
366:36 - so we can just type
366:39 - e dot
366:41 - tostring
366:44 - and after that in the get data what we
366:46 - can do is we can get the user data from
366:49 - the users i've deleted all my users as
366:52 - well only kept three of them over here
366:55 - and in the firebase authentication
366:58 - now we are in uh we are going to do
367:00 - await firebase firestore
367:02 - dot instance dot
367:04 - collection and collection is going to be
367:06 - of users
367:08 - dot dot and what is the document going
367:10 - to be the widget dot uid that we have
367:14 - and we're going to get it
367:16 - now
367:17 - you it's your task to job what type of
367:20 - value that we will get after this get
367:22 - if you've guessed document snapshot
367:24 - you're entirely correct
367:26 - so you can just do document snapshot
367:28 - which is equal to snap
367:30 - and after that
367:33 - we need to create a global variable uh
367:35 - we'll call this
367:37 - you know user data
367:39 - user data and we'll
367:42 - call it an empty object
367:45 - and user so what we're going to do is
367:48 - get the snap and uh we're going to set
367:50 - our user data equal to
367:54 - user
367:56 - we're going to set a user to user data
367:59 - to snap dot data and it's not going to
368:02 - be null and we have to change this to
368:04 - wire over here and not document snapshot
368:06 - else you know we can't explicitly
368:11 - set our map over here to the snap dot
368:14 - data
368:15 - then
368:17 - we basically need to set the state so we
368:19 - can set the state and over here we can
368:21 - use the user data
368:24 - so what we can do is user data
368:26 - and we're going to
368:28 - take user data
368:30 - and we're going to use a property
368:31 - username
368:33 - and we can format a document and now
368:36 - global variable now we need to pass in a
368:38 - uid and this is going to be our home
368:41 - screen item so this over here where we
368:43 - need to show our
368:46 - current uid uh so our current profile so
368:49 - what we can do is firebase auth
368:53 - dot instance dot current user dot uid
368:58 - and after that is done let's format a
369:00 - document and see if we are getting the
369:01 - output
369:02 - let's refresh our app
369:06 - and over here we are getting riwanna
369:08 - which is our username
369:10 - cool
369:13 - now let's try to output some more values
369:16 - over here we're going to set user data
369:18 - and we're going to go down
369:21 - and we're going to replace this network
369:23 - image with user data add the date and we
369:27 - are going to use the property of photo
369:29 - url and now we have saved it now let's
369:32 - refresh our app and see if we are
369:33 - getting that
369:35 - so if we go over here
369:37 - then we can see that this is my profile
369:40 - picture and that's exactly what we've
369:41 - got so the next thing we want to work on
369:43 - is the username over here so we can take
369:45 - the user data and put in the user name
369:48 - and over your
369:50 - user data and pass in the description
369:53 - let's save our app and see if we are
369:55 - getting that output
369:57 - you can see we are getting
369:59 - a null type over here
370:01 - that is probably because we don't have a
370:04 - description we have a bio so we'll have
370:06 - to put in bio
370:08 - now let's go over here and see we are
370:10 - getting on earth and now you can see we
370:12 - are getting some errors over here for
370:14 - slighter moment this is because our uh
370:17 - our data over here is still null and we
370:20 - are calling some value and properties on
370:22 - it so we are going to create is loading
370:25 - variable and set a circular progress
370:27 - indicator as long as these values are
370:29 - not being fetched but we need to fetch
370:31 - more values for example this post number
370:33 - of posts
370:34 - the followers we have the following we
370:36 - have all of that stuff
370:38 - so let's go to the top again and get
370:40 - some more data
370:42 - where we can rename this to user snap
370:45 - and not just snap because we have more
370:47 - snapshots coming in
370:49 - the next we want to get is the post
370:51 - linked so i can call it over here only
370:54 - getting the post link
370:56 - get post
370:58 - link
371:01 - and
371:02 - the last
371:04 - post we have we will have now post snap
371:07 - which will be equal to await
371:10 - firebase firestore.instance.collection
371:14 - and
371:15 - we are going to pass in posts now what
371:17 - post do we want the post that is of the
371:20 - user with this uid so we have seen dot
371:24 - where property we will call that
371:26 - and we are going to use the uid property
371:30 - like the view id field
371:32 - and we're going to check if it's equal
371:34 - to not less than or greater than because
371:36 - we know user i you user id is going to
371:40 - be different for every user so we're
371:42 - going to use is equal to and now we're
371:44 - going to check if that is equal to
371:47 - if that is equal to firebase
371:51 - auth dot
371:53 - instance
371:57 - let's import that instance dot current
372:00 - user dot uid
372:03 - cool let's format the document
372:05 - now
372:07 - uh our we are going to create a global
372:10 - variable called its int post link and
372:13 - our post length is going to be 0 for the
372:15 - initial value
372:17 - then we are going to set post length
372:20 - equal to post snap
372:23 - dot we actually haven't called the get
372:25 - function over here let's call that
372:27 - and after that we're going to use post
372:29 - snap dot
372:30 - docs dot length
372:33 - and we're going to put a semicolon over
372:35 - here and we've called set state aware so
372:37 - we don't need to worry about the widget
372:40 - build rebuild function over here like
372:43 - the rebuilding of this build function
372:45 - and we need to take this post link go
372:47 - down and replace this post link with
372:49 - post link now since it accepts integer
372:52 - we can just pass in post link
372:54 - and refresh our app
372:56 - go over here and we should see zero
372:58 - posts right now this user doesn't have
373:00 - any post
373:02 - it's made by naman ranavat and rivan
373:04 - ranavat
373:05 - so we'll see that for them
373:07 - now
373:08 - uh we need the followers and the
373:10 - following now how are our followers
373:12 - going to come the followers are just
373:14 - going to be a list over here you can see
373:17 - followers and following so we're going
373:19 - to do that for them just like we did for
373:22 - likes and post we're going to do for
373:24 - followers
373:25 - we're going to store the uids over here
373:28 - so
373:29 - we can go at the top and we can create
373:32 - and follow us variable which will be
373:35 - follow us equal to 0 then we can take
373:38 - followers
373:40 - sorry we can take
373:41 - followers equal to
373:44 - user snap
373:46 - dot data and
373:48 - we'll access and we're going to take in
373:51 - followers
373:52 - which is this property over here the
373:54 - followers property and and since this is
373:57 - a list we are going to have dot link
374:00 - property on it
374:03 - and this following over here you can see
374:05 - that's just you know my testing over
374:08 - here so i've just added this for some
374:09 - reason
374:11 - now you can we have to take this
374:13 - followers and put it down over here
374:16 - follow us
374:18 - and we can go over here and see zero
374:20 - followers right now
374:23 - then we need to do the same for
374:25 - following so we can do
374:28 - and following
374:30 - equal to zero
374:32 - and we can take the following
374:34 - and our following will be equal to
374:37 - this whole thing over here
374:40 - and we're going to replace this uh of
374:42 - property of followers to following
374:45 - now
374:46 - let's see
374:48 - now we can take this following and put
374:50 - it down over here
374:54 - we should be getting 0 everywhere
374:57 - and that's what we get so after that
374:59 - we need to check if you know
375:02 - uh
375:03 - if we are following the user so if the
375:05 - if this is our profile this it should
375:08 - show edit profile but if it's some other
375:10 - profile we're going to have follow
375:12 - button over here unfollow button over
375:14 - here so for that we need to check if we
375:16 - are following this user
375:18 - so
375:19 - we can create a boolean value of
375:23 - is following over here and we set it to
375:26 - false we can take this as following and
375:29 - put it over here and we'll check if it
375:32 - is following
375:33 - if
375:35 - user snap user snap at
375:38 - followers will have to do user snap dot
375:42 - data at followers and we'll have to pass
375:45 - in this exclamation mark over here at
375:48 - follow us
375:49 - contains our uid over here since this is
375:52 - going to be a list return we can put
375:54 - contains over here and we are going to
375:56 - check if it contains firebase or dot
375:59 - instance dot current user
376:01 - and our uid over here
376:04 - so you can save this
376:06 - and if this is following we can make
376:08 - conditional rendering in our application
376:11 - down below with the follow button widget
376:13 - that we had created over here so what we
376:16 - can do is
376:18 - create a first check over here if our
376:22 - user
376:23 - so
376:25 - if
376:26 - firebase
376:27 - auth dot
376:30 - instance dot current
376:32 - user dot uid
376:35 - is equal equal to widget.uid
376:39 - that means uh
376:41 - that means that whatever uid we are
376:43 - enter we are entering from the parameter
376:46 - is from the constructor is equal to the
376:49 - firebase auth current user
376:52 - id
376:53 - then we know that this is our account
376:55 - and thus we need to show the edit
376:57 - profile
376:58 - and if it's not then we need to check
377:01 - if we are following that person
377:04 - so if we are following that person we
377:05 - need to give the person
377:07 - a
377:08 - an unfollow button
377:10 - so we can
377:11 - copy this follow button from here paste
377:13 - it and make this
377:15 - unfollow
377:19 - and also we want this to be
377:22 - out of the text color colors dot black
377:25 - and since this is black this the
377:27 - background color will change to colors
377:29 - dot white
377:31 - and
377:32 - we will have a border color be
377:35 - let's say colors.gray only
377:38 - and yeah this is it
377:41 - now we need to add another uh else
377:43 - condition basically which is the last
377:45 - one and we'll again have a follow button
377:48 - which will actually say a follow
377:51 - and
377:53 - the follow will have a background color
377:55 - of colors dot blue which is our primary
377:58 - color
377:59 - sorry yeah
378:01 - which is our blue color in our
378:02 - colors.file
378:05 - our color text color is going to be
378:07 - colors dot white
378:09 - and our border color is also going to be
378:11 - blue
378:13 - now let's save and see what we're
378:15 - getting we should be seeing edit profile
378:17 - the way it was
378:19 - and we have that to see a bit different
378:21 - output what we can do is
378:23 - take this profile screen
378:27 - from here
378:28 - and go to our
378:30 - search screen
378:32 - and in the search screen where we
378:34 - have a list style we can wrap this with
378:37 - an ink well widget and the inkwell will
378:39 - have ontap function and with the on tab
378:42 - we are going to navigate to the
378:45 - profile screen page so we can do
378:46 - navigator
378:48 - dot of context dot
378:50 - push
378:51 - material page route
378:54 - builder context
378:57 - and we can
379:00 - pass in the profile screen
379:03 - now this profile screen requires a uid
379:05 - of the user so what we can do is copy
379:08 - this from here
379:11 - and we're going to paste it
379:12 - and our the property we are going to
379:15 - pass in is uid and we can format this
379:18 - now let's say try to see the output if
379:20 - we refresh if we go to rivagna ranavat
379:23 - we should again see edit profile this
379:25 - because this is our account and for
379:26 - rivan ranath as well we will get a
379:28 - follow button
379:30 - this means that our work is happening
379:33 - pretty good
379:34 - so what do we need to do next
379:37 - first of all
379:38 - we'll add loading indicators
379:41 - so in our profile screen we can do
379:45 - bool
379:46 - is loading
379:48 - and we can set it to false then we can
379:50 - take this is loading value from here
379:52 - and set the state to is loading equal to
379:56 - true
379:58 - then we can take this value over here
380:00 - and after all of this stuff is done we
380:03 - can set is loading to false again
380:06 - and
380:07 - over here
380:09 - we are going to return
380:12 - if is loading
380:14 - is true then we need to show a constant
380:17 - center
380:20 - circular progress indicator
380:24 - and we're going to have a scaffold we'll
380:26 - have to format the document
380:28 - and
380:28 - let's see we are getting a loading bar
380:31 - and all of our errors disappear from
380:33 - here
380:35 - you can go where and you can see none of
380:37 - the errors we get which is pretty cool
380:40 - now let's try to show our posts and then
380:43 - we'll work on the followers and
380:44 - following functionality
380:46 - so to do the post function we can go to
380:49 - the bottom after this divider we need to
380:51 - use a future builder to display the
380:54 - posts
380:55 - we're not using stream builders because
380:57 - we don't need to keep track of every you
380:59 - know
381:00 - uh
381:00 - every part of the app like we are not
381:03 - liking anything we're not commenting
381:05 - anything so we don't need to use stream
381:07 - builder we just need to display a list
381:09 - of images and that's not a and even if
381:13 - it's not real time nobody would care
381:16 - so we can have that
381:18 - future builder
381:20 - now we'll have a future and in the
381:21 - future we'll have firebase firestore
381:24 - dot instance dot collection and we want
381:27 - the post and whose post do we want
381:30 - our own are like the user id mentioned
381:32 - over here so we can do where
381:35 - the uid
381:37 - is equal to
381:39 - the widget dot uid
381:41 - that is passed in and we can dot
381:44 - get
381:45 - then we can do dot
381:47 - get
381:49 - after that we will get a builder and the
381:52 - builder will have context and a snapshot
381:54 - now we'll check if the snapshot
381:58 - dot connection state
382:00 - is equal equal to connection state
382:03 - dot
382:04 - weighting
382:06 - and that's happening we need to return a
382:08 - constant center
382:10 - circular progress indicator
382:17 - you have to go there
382:18 - and we'll format the document
382:20 - now if that's not the case what do we
382:22 - want to show well we want to show a kind
382:25 - of a grid thing over here right we want
382:28 - three posts to show up like this
382:32 - all right
382:33 - and we want it like this now to make
382:36 - such kind of layout flutter already
382:38 - provides us with a widget which is known
382:40 - as grid view builder we can use that so
382:43 - we can do return
382:46 - grid view dot builder
382:48 - and it will take in a grid delicate and
382:51 - an item builder
382:53 - so what we can do is put them on
382:55 - separate lines
382:59 - and we'll return the grid view builder
383:01 - now uh over here first we'll set shrink
383:04 - wrap to true
383:06 - then we'll have an item count and our
383:08 - item count is going to be snapshot
383:11 - dot data
383:13 - and we'll treat it as dynamic our old
383:16 - cheap trick that we used to follow
383:19 - then this docs dot length
383:22 - cool now the grid delegate will have a
383:24 - constant of sliver
383:26 - grid
383:28 - delegate
383:29 - with fixed cross access count
383:33 - and the cross axis count is going to be
383:36 - three then we are going to have a cross
383:40 - axis spacing of 5
383:43 - then a main axis spacing of 1.5
383:48 - and a child aspect ratio of 1.
383:53 - all of these values are again tried and
383:55 - tested i just took values and kept on
383:58 - changing them except the cross axis
384:00 - count which means that i want this to be
384:02 - 3 and then the spacing part you need to
384:05 - figure it out on your own like with the
384:07 - trial and testing part then with the
384:09 - item builder we need to pass in a
384:11 - context and an index
384:14 - and over here we're going to have
384:17 - a document
384:18 - snapshot and it will be again
384:22 - snapshot.data as dynamic
384:25 - dot docs
384:27 - and we're going to have an index
384:30 - and we're going to do document snapshot
384:32 - snap
384:35 - now we are going to return a container
384:38 - and this container
384:40 - will have a child of image
384:44 - and the image will have image property
384:46 - and will pass in the network image
384:51 - now the network image is going to be
384:54 - our snap
384:55 - and we'll also
384:56 - [Music]
384:58 - put in snap
385:00 - dot data and we'll do it as
385:03 - dynamic
385:04 - and we have to cover this with parent
385:06 - thesis
385:07 - and we can use
385:09 - post url property that is mentioned in
385:12 - the posts class post over your post url
385:17 - cool now
385:19 - to have some more fit what we can do is
385:22 - have a property of fit and you can
385:24 - experiment with these values but i'm
385:26 - going to use boxfit.cover
385:28 - and the names are pretty uh are
385:30 - suggesting what this app will do
385:33 - so if we go over here and let's remove
385:35 - all of this stuff and we've made an
385:37 - error over here we have already called
385:39 - snapshot.data.docs
385:40 - index over here so we just need to call
385:43 - snap post url over here so we can
385:46 - refresh our app now let's see over here
385:51 - and we're not getting any post because
385:52 - we haven't made any post
385:55 - so let's try to
385:57 - make a post
385:58 - let's post it
386:00 - choose from gallery
386:02 - the text editing controller in your case
386:04 - would look a bit different over here
386:05 - i've decreased the size
386:07 - and you can you have 0.45
386:10 - the media query with into 0.45 i have
386:13 - taken 0.3
386:15 - and i'm going to have high aware just
386:17 - for testing and we're going to post
386:23 - and we have posted so if we come over
386:25 - here we see one post so a post counter
386:27 - is working and we can see our image
386:29 - coming over here which is pretty cool if
386:31 - you go in the search we will see our
386:33 - image coming here as well which is very
386:36 - cool
386:39 - so that means our profile screen is
386:41 - working and is ready
386:43 - so if we go over here
386:45 - search tab and call naman over here so
386:48 - basically we can see the post
386:50 - coming up which is pretty cool so in our
386:52 - search over here if i type private
386:55 - we will get driven rana which is our
386:58 - profile and
386:59 - if i do revamped on earth i can see my
387:01 - post over here which is very cool
387:04 - so that works now we need to work on the
387:06 - follow functionality which we'll do now
387:08 - so to do that we'll go in a firestore
387:10 - methods class and over here we're going
387:11 - to create a function
387:13 - future void and we're going to create it
387:17 - name it follow user it is going to be an
387:19 - asynchronous process and we need to
387:22 - get two things from here the user id
387:26 - our current user id and the person whom
387:29 - we are following that person's uid so we
387:32 - do string follow id and over here we are
387:35 - going to have a try catch block
387:39 - in case of exception we are going to
387:41 - print that exception and in that type
387:43 - block what we are going to do is
387:46 - await underscore firestore dot
387:49 - collection of users
387:51 - and over there we are going to go in our
387:53 - document uid
387:55 - and get the data
387:59 - first let me type in document snapshot
388:03 - so what we're doing over here is
388:04 - basically going to our collection of
388:06 - users and in our document id so in this
388:09 - part suppose this is my user id
388:12 - i'm going over here and getting all of
388:14 - the data from here
388:16 - and why are we doing that so that we can
388:19 - check if we are already following that
388:21 - user or not so what we can do is
388:24 - list of following so if we do list
388:28 - if we do snap
388:30 - dot data
388:33 - as dynamic
388:37 - and we need to pass in this
388:39 - and we'll have to put an exclamation
388:41 - mark over here and we'll get the
388:43 - following from here so we'll get a list
388:45 - of following and in this list of
388:47 - following we'll check
388:49 - if the list of following
388:51 - contains the user id
388:55 - i mean the follow id
388:58 - so
388:58 - i'll explain this to you
389:00 - so we got the follow following list of
389:03 - the user over here and we are checking
389:05 - if the following list contains the
389:07 - follow id that is the second person's id
389:09 - over here
389:10 - then we
389:11 - know that the person is following that
389:14 - so it means that we are following that
389:15 - person so we need to remove the follow
389:18 - so what we can do is
389:20 - await
389:21 - underscore firestore dot collection
389:25 - and our users
389:27 - dot document follow id
389:31 - and we'll update the value of followers
389:34 - in the
389:36 - follow id
389:38 - basically we'll go in the users and
389:40 - whichever person that we want to follow
389:42 - we'll go in their document and update
389:45 - the followers value over there because
389:47 - we are well removing
389:50 - because we are removing followers from
389:52 - their uh
389:53 - profile
389:54 - so we can do that and we can do field
389:57 - value
389:58 - dot array union
390:00 - id remove
390:02 - and we'll pass in the uid cool that
390:05 - means we have removed the follower from
390:06 - the users uh
390:08 - from the follower id
390:11 - now we need to remove the
390:13 - follow id that we have over here from
390:15 - our user id
390:17 - so we can pass in doc uid over here
390:20 - we can have
390:21 - following over here and we'll have a
390:24 - remove
390:25 - here as well
390:26 - now
390:27 - if the following does not contain the
390:29 - follow id we need to
390:32 - well
390:33 - have the same thing but over here we'll
390:35 - have array union and over here we will
390:37 - have array union
390:40 - and if this isn't clear to you
390:42 - don't worry i'm going to explain it
390:44 - again when we uh see this uh in the
390:47 - action like in our app then in our
390:50 - profile screen uh wherever we have you
390:53 - know this
390:55 - follow unfollow we can just
390:58 - call this so we can use asynchronous
391:01 - and over here we can have
391:03 - await
391:04 - firestore methods dot follow user and we
391:07 - have to pass in the user id so what we
391:10 - can do is firebase auth
391:13 - dot
391:14 - instance
391:16 - dot current user dot uid
391:19 - and we need to pass in the follow id as
391:21 - well which will be user data
391:25 - at
391:25 - uid
391:27 - that means whatever user profile we are
391:29 - on right now we can format this document
391:32 - and now we can
391:34 - take this
391:36 - and paste the same over here
391:40 - and we can have asynchronous over here
391:44 - cool now if we save this
391:47 - and go over here if you go in the search
391:50 - and search for a user ivan
391:53 - and we have vivandranavat over here we
391:56 - can click on rundown
391:59 - and as you can see we are getting over
392:01 - here now if i click on follow we don't
392:03 - see any changes over here but if we go
392:05 - in our fire store you can see a
392:07 - followers got added
392:09 - and the user id
392:11 - and the user name was rivan ranavat
392:14 - now if i go over here in my user id
392:17 - you can see a following coming over here
392:20 - so what we basically did was we checked
392:22 - if the list already contains the
392:24 - follower if it already contains a
392:26 - follower then we're going to remove a
392:28 - follower and if it doesn't then we are
392:31 - going to add a follower and in this case
392:34 - if the following already contains it we
392:37 - are going to remove this following
392:40 - and if it doesn't then we are going to
392:42 - add it this will make much more sense uh
392:45 - when you know we update these values
392:47 - over here now why are these values not
392:49 - getting updated over here because this
392:51 - is a future and not a stream builder
392:53 - right
392:54 - uh in stream we constantly keep track of
392:57 - our values and you know keep changing it
392:59 - as and when they change in the database
393:01 - but over here it's a one-time read as
393:04 - i've mentioned previously
393:06 - so
393:07 - now we can put a set state over here
393:10 - to update the value so to update the
393:12 - value what we need to do is
393:14 - increase the follower count by 1 and set
393:16 - is following to true and we are in the
393:19 - follow button so we can do that set
393:21 - state
393:23 - and we are going to pass in this over
393:25 - here and we don't need to do this over
393:27 - here we need to do it outside of the
393:29 - follow user we have set state and we are
393:32 - going to set is following
393:35 - to
393:35 - true
393:37 - and we are going to increase the
393:39 - followers count so we can do followers
393:40 - plus plus
393:43 - and we can take this value from here and
393:45 - paste it over here as well in our
393:47 - unfollow button and where we'll set is
393:50 - following to false and we are going to
393:52 - do followers
393:53 - minus minus
393:54 - so if i type in driven over here
393:58 - we can see riwanda not showing up now if
394:00 - i go over here we can see that we had
394:02 - followed him earlier
394:03 - so we got an unfollow button right now
394:06 - but if we click unfollow right now you
394:08 - can see the followers change it change
394:10 - to zero and we get a follow button again
394:12 - and over here we are not uh we are not
394:14 - able to remove these followers because
394:16 - in the firestore methods we created a
394:18 - bug over here we need to
394:20 - array uh when we are having followers
394:22 - over here we need to remove the array of
394:24 - uid and over here we need to remove
394:27 - follow id
394:29 - makes sense right because we are
394:30 - following that follow id
394:33 - and uh the same we are going to do over
394:35 - here we're going to remove the follow id
394:38 - from here
394:39 - now i went fast uh in this section
394:42 - because you know we are already familiar
394:44 - with all the values that we're using
394:46 - it's just a logic and it's very simple
394:47 - logic i've cleared off my database now i
394:50 - like our following list now and if i
394:53 - search the one we should get zero
394:54 - followers and if i click on follow
394:57 - we get one follower and if we go to our
394:59 - database you can see we are getting one
395:01 - follower but if we unfollow
395:04 - you can see zero followers and our
395:06 - followers from here was removed which
395:08 - means that our function is working
395:09 - properly now
395:11 - so yeah this was it for the follower
395:14 - now if i
395:15 - go over here on our screen we should see
395:18 - one following and that's what we see
395:20 - now the next thing we need to work on is
395:22 - you know instead of showing edit profile
395:24 - we need to show sign out so that we can
395:27 - sign out
395:29 - so
395:29 - in our profile screen instead of edit
395:32 - profile what we can do is sign
395:34 - out
395:35 - and in our auth methods we are going to
395:37 - create a sign out function so what we
395:39 - can do is
395:40 - future
395:44 - void and we'll call it sine
395:47 - out we don't require any arguments as
395:49 - such we just need to make this process a
395:52 - function asynchronous and what we can do
395:54 - is we can take the auth instantiation
395:57 - and we can do auth dot sign out
396:01 - and that's all it takes and since this
396:03 - is going to be a future we need to await
396:05 - it
396:07 - and that's all it takes to well sign out
396:09 - from the
396:10 - uh our app
396:12 - so what we can do over here is
396:14 - call
396:15 - async over here
396:17 - and call await
396:19 - auth methods
396:22 - dot sign out
396:25 - and we're going to call navigator
396:28 - dot of context
396:30 - dot push replacement
396:32 - material page route
396:36 - a builder context
396:38 - and we are going to pass in the builder
396:40 - as
396:41 - the
396:44 - responsive uh sorry the login screen
396:49 - and
396:50 - we need to put a semicolon lastly
396:53 - and we can do const over here
396:56 - so now if we refresh our app and see
397:01 - we'll get sign out aware and if we sign
397:03 - out we go to the screen over here now if
397:06 - i refresh my app we should still be on
397:09 - the login screen and that's where we are
397:13 - so we have completed this app over here
397:16 - of that is for the mobile app now let's
397:18 - work a bit on the responsive design so
397:21 - i've run the app on our chrome version
397:23 - as well and we are i've run with the
397:24 - command flutter run dash d chrome and
397:27 - i've put in the web renderer as html as
397:30 - i've told you that canvas causes viewed
397:31 - issues
397:33 - and if it looks good over here but if we
397:35 - resize it you can see that this extends
397:38 - till the end of over here because we
397:40 - have used media query
397:42 - and uh how can we fix this uh
397:44 - over here so what do w
397:46 - what kind of layout
397:48 - layout i want for the web is
397:50 - i want the
397:53 - text input to be this long from here
397:56 - till you're somewhere here i don't want
397:59 - it to extend beyond this region over
398:01 - here
398:03 - right so to do that uh let's go and make
398:06 - some conditional rendering so in our
398:09 - login screen
398:11 - we can go
398:13 - and in the login screen
398:15 - we have a container over here where the
398:18 - padding is given as you know uh 32 so
398:22 - what we can do is
398:24 - over here
398:25 - check if the media query dot of context
398:29 - dot size dot width is greater than the
398:32 - web screen size the
398:35 - global variable that we had created over
398:37 - here if it's this then we need to show
398:41 - the
398:42 - another padding because that's the web
398:45 - screen layout that's showing up
398:47 - else i want to show
398:49 - this layout over here so over here the
398:52 - edge inserts is going to be constant
398:55 - edge in sets dot symmetric
398:57 - and we're going to have third of this
399:00 - size over here and we have to remove
399:02 - this constant from here since we are
399:04 - using media query now if i save my app
399:07 - we should see a different output let's
399:11 - run our app over here
399:12 - and you can see that this size has
399:15 - increased and that's exactly how i
399:17 - wanted it
399:18 - and if i increase the size you can see
399:20 - it's showing up pretty cool and that's
399:22 - the way i wanted it now let's go to the
399:27 - let's enter our email over here let's
399:29 - type in another gmail.com test123
399:34 - and login so we have signed in and we
399:36 - can see that we are getting a web year
399:38 - layout of ir so we need to change that
399:42 - so uh what do we want to show well uh
399:45 - the layout of our app is going to be
399:47 - something like
399:48 - an app bar over here at the top
399:51 - and with the app bar over here we need
399:53 - to have an instagram logo over here
399:56 - then at the end some icons where
400:00 - in the app we had
400:02 - at the bottom
400:04 - so uh instead of bottom we want to have
400:07 - these icons you know at the top right
400:11 - corner that's how it is on instagram web
400:14 - then uh we need to render the screen
400:17 - basically
400:19 - right let's do that so in our web screen
400:21 - layout we're going to have an app bar
400:24 - first
400:25 - and our app bar is going to be app bar
400:28 - and what i'm going to do is basically go
400:30 - to the feed screen and i'm going to copy
400:32 - the
400:34 - app bar we have over here
400:36 - let's copy that and paste it over here
400:39 - and where we can you know make some
400:41 - changes according to our preference
400:44 - first we'll have to import the
400:46 - background color
400:47 - then the svg picture asset
400:51 - right now we want our actions button to
400:54 - be a bit different
400:56 - so our icon button is over here we want
400:58 - the messenger to show up last we want
401:01 - other icons to be shown
401:03 - so we'll have the home icon first then
401:06 - the search icon
401:07 - then the add file icon
401:10 - and the notification icon then a profile
401:12 - icon
401:14 - yeah and well we can neglect the chart
401:18 - icon for now because it's not having any
401:20 - usage in our app
401:21 - so where the first icon we had was icons
401:24 - dot
401:26 - home and
401:29 - well
401:30 - we are going to show the home icon for
401:31 - now
401:32 - then the next thing we want is search
401:35 - icon
401:37 - then we need add a photo
401:42 - icon
401:44 - then a favorite
401:46 - icon which is for the notifications
401:48 - and lastly a person icon which will tell
401:50 - us the
401:51 - well the you know
401:54 - the profile
401:55 - and if we save we should see in the top
401:57 - right corner all of these icons coming
401:59 - up and that's exactly where they come
402:02 - now the next thing we want to do is well
402:05 - whenever we click over here we should
402:06 - see the output coming on the screen
402:10 - so to do that what you're going to do is
402:15 - we're going to go in the feed screen
402:17 - again
402:18 - and from
402:20 - we're going to go in the
402:21 - mobile screen layout and we're going to
402:24 - copy all of these functions from here
402:26 - because we need to well basically have a
402:28 - page view
402:30 - and we're going to paste it over here
402:35 - right having that in place what we need
402:38 - to do is
402:40 - we need to check
402:41 - so if the page over here is equal to 0
402:47 - so over here we'll have a primary color
402:52 - so instead of the color what we're going
402:54 - to have if page is equal equal to 1
402:57 - then we need to show a primary color
403:00 - or else a secondary color
403:03 - not one our numbering will start from
403:05 - zero so we can do zero
403:07 - and why are we getting this error over
403:09 - here because we don't want it as a
403:11 - constant anymore so we'll remove the
403:13 - constraint and then we'll have the
403:16 - condition once again over here
403:18 - so we can paste it
403:20 - if page is equal to one
403:23 - we have done all of this you know in our
403:25 - uh mobile screen layout it's just that
403:28 - we are copying stuff from here and
403:30 - pasting it over here because we needed
403:32 - the app bar in the top right corner
403:34 - and that's why we need to to create
403:36 - responsive layout and plus with this uh
403:38 - kind of format you can add more stuff
403:40 - which we'll talk about at the end of the
403:42 - video
403:43 - so
403:44 - we have one two now we need to put in a
403:47 - third
403:49 - we'll remove the const
403:51 - we'll again remove the const
403:53 - and we'll paste it over here and we'll
403:56 - have fourth
403:58 - now let's remove some extra comma that
404:00 - we've got
404:03 - now let's format the document
404:06 - and
404:07 - tap r to see the changes coming place
404:10 - but uh when
404:12 - we click over here their color doesn't
404:14 - get changed because we haven't called
404:16 - the navigate so what we want to do is
404:19 - take this search state from here and
404:21 - paste it over here as well and we're
404:23 - going to take this navigation tab
404:25 - function
404:26 - and we're going to call this over here
404:28 - so we're going to go navigation tab and
404:31 - we're going to call in the we get we are
404:33 - going to given a page so this is going
404:35 - to be the 0th page
404:37 - we can copy this and paste it
404:40 - again over here this is going to be 4
404:43 - 3
404:44 - 2
404:46 - 1
404:47 - and yeah
404:48 - this is it
404:50 - now
404:51 - in our body what we're going to have is
404:53 - well a page view that we had exactly
404:55 - like we had in the mobile screen so we
404:57 - can have page view
404:59 - and we're going to have children of home
405:02 - screen items
405:03 - that is in the global variable then
405:05 - we're going to pass in the controller
405:07 - and the controller is going to be a page
405:09 - controller and on page change we need to
405:13 - call
405:14 - on page changed so we can copy this from
405:17 - here and paste it over here
405:19 - now let's tap r and see
405:23 - if we go where
405:26 - we should be seeing another page and
405:28 - yeah this looks pretty cool
405:31 - now if we go over here we can see the
405:33 - search screen also showing up
405:35 - and
405:36 - this is scrollable over here because we
405:38 - haven't set the physics we can do so by
405:40 - scaling physics and never scrollable
405:44 - physics
405:46 - and it will be a const
405:48 - now if we do r again
405:51 - let's go over here and we can see
405:54 - we are not able to
405:56 - well change the app again
405:59 - so yeah
406:01 - now let's try to make the screen
406:02 - responsive and get this app bar out of
406:04 - here because we don't want it in the web
406:06 - screen
406:07 - so to do that what we're going to do is
406:10 - go to the
406:11 - feed screen over here
406:13 - and we have our width over here
406:15 - now in the app bar what we can do is
406:18 - we can check if width is greater than
406:20 - web screen size
406:22 - then we don't need to show the app bar
406:23 - so we can pass in null
406:26 - or else we'll show the app bar
406:29 - we can perform a hot restart and see
406:32 - that we are getting no app bar
406:35 - cool
406:36 - now if we rerun our app
406:39 - you can see
406:40 - that bar is not showing also the
406:42 - background color in the instagram web is
406:44 - a bit different so what we can do is
406:48 - go to the background scaffold and over
406:50 - here we have passed in mobile background
406:51 - color here we can check if the web is
406:55 - the width is greater than the web screen
406:59 - size
407:00 - then we are going to have a web
407:03 - background color
407:05 - which is present in the colors dot dot
407:07 - file now if we save this
407:09 - we won't be seeing any difference as of
407:11 - now but we'll see that in a while now we
407:13 - want to go in our postcard because that
407:15 - is where these things are
407:18 - so we can go in our postcard
407:23 - dot dot
407:25 - and we are getting these borders over
407:28 - here because i had added a border just
407:30 - to check if it's working and all so you
407:32 - can copy this line from here so if width
407:36 - is greater than the web screen size we
407:38 - need to put in a secondary color which
407:40 - is uh
407:41 - you know this background border color
407:43 - which is gray
407:45 - and else we will have a mobile
407:47 - background color so if you do like this
407:50 - you know shrink the size you can see no
407:52 - background uh you can see no border but
407:54 - this is because well the border is of
407:56 - the background color so it merges
407:59 - where you can see that our
408:03 - background is showing up now we also
408:05 - need to reduce the size of this postcard
408:07 - over here so what we can do is in the
408:10 - feed screen
408:11 - we have our
408:13 - postcard over here we can we have it
408:15 - trapped with a container now we can add
408:18 - a margin to our container
408:20 - and in the margin we can add edge insets
408:22 - dot symmetric
408:25 - in the horizontal direction it will be
408:27 - if width is greater than the web screen
408:30 - size
408:31 - then our width will be
408:36 - then the
408:37 - horizontal margin will be the total size
408:40 - of the device into 0.3
408:42 - and if it's not web screen size we don't
408:44 - want it we don't want any margin so we
408:47 - can just put zero and
408:50 - and
408:51 - for the vertical what we can do is paste
408:54 - it
408:55 - we can pass in vertical we'll pass in
408:57 - the same conditions if width is greater
408:59 - than the web screen size then we are
409:01 - going to have a value of
409:04 - 15 in the vertical direction and nothing
409:06 - in the horizontal direction like and
409:08 - nothing when in the mobile screen layout
409:11 - so we can format this
409:13 - let's rerun our app
409:15 - and see that our value over here has
409:17 - decreased which is pretty cool
409:22 - now if i you know
409:24 - save our and we
409:26 - now we try to you know
409:28 - change the
409:29 - size of our application you can see that
409:32 - the change is happening
409:34 - and if we go over here our app returns
409:37 - to the normal app state that it was in
409:40 - so this is the process for the
409:43 - responsive ui you can do the same for
409:46 - the sign up ui that we had followed
409:48 - earlier for the login
409:50 - and in the search i'm going to show you
409:52 - how we can make changes over here
409:53 - because well we are not familiar with
409:55 - staggered grid view so we can go in the
409:58 - search screen and in the search screen
410:01 - we will have
410:02 - our staggered grid view builder over
410:05 - here we can have a check if with
410:08 - we don't have a width ready so we can do
410:10 - media query
410:14 - dot of context dot size dot width is
410:18 - greater than the web screen size
410:20 - then uh we need to show something else
410:24 - and because this is the configuration we
410:26 - made for the mobile for the web we need
410:28 - to show
410:29 - three of them side by side and nothing
410:32 - like this
410:33 - so what we can do is
410:35 - uh over here we can have one is to one
410:37 - and one or one
410:40 - so with basically this making the values
410:43 - change over here and here
410:45 - we will be able to get a three by three
410:47 - layout over here
410:49 - if we go over here you can see we are
410:51 - getting a three by three layout and
410:52 - that's what we wanted
410:54 - and uh the rest of the responsive ui is
410:58 - up to you you know you can make changes
411:00 - i love it this way so i've uh
411:03 - kept it this way only
411:05 - uh then yeah this is pretty much it so
411:09 - here we complete our course for the
411:11 - beginners tutorial for firebase i hope
411:14 - you could follow along and build this
411:16 - application
411:17 - and uh i just want to say that you know
411:20 - it is very easy to create an application
411:22 - with firebase you might have seen that
411:24 - most of the functions that we used be it
411:26 - in the auth methods or firestore methods
411:28 - all of our functions were basically
411:30 - getting reused and reused again and
411:32 - again and it had the same layout
411:34 - firebase is pretty easy to use and it's
411:38 - very beginner friendly so you can check
411:40 - it out
411:41 - and regarding the application i just
411:43 - want to say that
411:45 - there might be some bugs that i'm unable
411:47 - to notice and there might be some
411:50 - features you want to add and make it a
411:52 - full stack instagram clone i didn't make
411:55 - that because well this was a firebase
411:57 - teaching course and not a instagram
412:00 - clone build
412:01 - well we try i just tried to teach you
412:05 - how we can use firebase by building
412:07 - instagram so you can definitely add more
412:10 - features the github link will be
412:12 - mentioned in the description below you
412:14 - can check it out and let me know in the
412:16 - comment section below if you are able to
412:19 - add more features and send the github
412:21 - link in the comments as well but if you
412:24 - have any doubts you can obviously
412:25 - message me on instagram or you can
412:28 - message me or you can comment down below
412:31 - thank you so much for watching the video
412:33 - see you in the next video