00:00 - hey free code camp we're going to build
00:02 - a coronavirus tracking app and we'll do
00:05 - it in the style of a really popular
00:07 - stock trading app called robinhood
00:09 - we're going to cover how to use
00:11 - different third-party libraries in your
00:12 - android app
00:13 - we'll talk about method decomposition
00:15 - and reuse and we'll look at how do you
00:18 - make api calls using a library called
00:20 - retrofit
00:22 - covid19 has dramatically changed
00:24 - what any of us thought 2020 would look
00:26 - like and all the data
00:29 - indicates that
00:30 - coronavirus will continue to impact our
00:32 - society in a very meaningful way for a
00:35 - lot of 2021 as well
00:37 - as engineers or app developers the best
00:40 - thing we can do
00:41 - is look at the data for covid19 and
00:44 - understand it and display it to other
00:46 - people so we can all become more
00:47 - educated about this virus
00:50 - unfortunately google play decided to
00:53 - prohibit all kovid 19 related apps
00:56 - unless they're from a government or
00:57 - medical institution
01:00 - so i decided to build my own covid19
01:02 - tracking app and i'm going to show you
01:04 - how to build it as well
01:06 - our app uses the same ui components as
01:08 - the robinhood stock trading app and the
01:10 - whole app is going to be written in less
01:13 - than 200 lines of kotlin code
01:16 - let me do a demo of the app the purpose
01:18 - of what we're building is to be able to
01:19 - quickly see trends around the growth of
01:21 - current virus both at the national level
01:23 - and state level by default when we open
01:26 - up the app we're displaying the number
01:27 - of positive covid 19 cases nationwide or
01:30 - across the whole us
01:32 - and i have the ability up here to toggle
01:34 - between the number of negative cases per
01:35 - day number of positive cases or number
01:37 - of deaths per day and you'll notice that
01:40 - notice that the graph animates in
01:43 - down here we have the ability to toggle
01:45 - between the different time scales so
01:47 - maximum means display all the data we
01:49 - get back from the api which is generally
01:51 - starting from around march
01:53 - one month means the most recent one
01:54 - month of data in one week means most of
01:56 - the most recent week of data by default
01:58 - we're showing maximum the other option i
02:00 - have is to actually scrub on the chart
02:03 - on this line chart and you'll notice
02:06 - that we update the metric the individual
02:09 - metric number shown down here it
02:11 - animates in and it displays the exact
02:13 - quantity of this metric on that day so
02:15 - on april 25th 2020 though there were
02:18 - roughly 1800 deaths in the u.s
02:21 - i also have the ability to dive into a
02:23 - particular state so for example in
02:25 - california you can see that there's been
02:27 - a recent
02:29 - increasing trend in number of positive
02:31 - cases per day in california and the same
02:33 - things apply i could also dive into the
02:34 - number of negative cases in california
02:36 - or number of deaths and if i wanted to
02:38 - look at a particular day i can scrub
02:41 - over the graph
02:42 - and you can see how the text animates in
02:44 - down here
02:46 - if you keep watching you'll learn how to
02:48 - build exactly this step-by-step
02:51 - the data for our app is coming from the
02:53 - covid tracking project which is the most
02:55 - reliable data source i could find for
02:57 - getting daily updates on the number of
02:59 - chronovirus cases
03:01 - two of the core components in our
03:03 - application this chart which is called a
03:06 - spark chart along with this changing
03:09 - text view called a ticker view both of
03:11 - them are coming from open source
03:13 - projects from the robinhood app both the
03:15 - robinhood app and our app are displaying
03:17 - the change of a metric over time
03:20 - stocks versus chronovirus cases so
03:22 - there's a natural fit to using the same
03:24 - components that they're using in the
03:25 - robinhood app and robinhood is
03:27 - considered one of the best design
03:28 - android apps out there so there's a lot
03:30 - to learn from what they're doing i hope
03:32 - you're as excited as i am to start
03:33 - building this project in the next video
03:36 - we're going to fetch data using retrofit
03:38 - from the covid tracking project api
03:41 - our goal in this video is to talk to the
03:44 - covid tracking project api in order to
03:46 - retrieve the data that we need for our
03:48 - application
03:49 - the way we'll go about doing this
03:51 - is by using the api created by the kobe
03:54 - tracking project
03:56 - our phone or our application is the
03:58 - client and we're going to be making a
04:00 - request to the covet tracking project
04:02 - and getting a response which contains
04:04 - the data we're going to be making a get
04:06 - request on this particular url api v1
04:10 - slash us daily.json and what that
04:12 - represents is we want to retrieve the
04:15 - daily data of the number of chronovirus
04:17 - cases nationwide and the covid tracking
04:20 - project will respond with json data and
04:23 - that json data will contain the metrics
04:25 - for each day up until the most recent
04:28 - day
04:29 - in addition to getting the data
04:30 - nationally we'd also like to be able to
04:31 - get the per state data for coronavirus
04:34 - and in order to do that there's one more
04:36 - endpoint in the api that we'll need to
04:38 - hit and that will give us back a list of
04:41 - the data per day per state
04:44 - now we have an idea of what we're trying
04:45 - to do we can start the implementation
04:47 - we're going to use a library called
04:49 - retrofit on android which makes working
04:51 - with apis really straightforward what i
04:54 - have here is a totally empty android
04:55 - project so if i run it now you'll see
04:58 - the emulator showing the hello world
05:00 - application the first thing i'm going to
05:02 - do is go into the android manifest file
05:04 - and because we're talking to an api over
05:06 - the internet we need the internet
05:08 - permission in our application let's
05:10 - start typing users permission internet
05:13 - the next step is to include retrofit in
05:15 - our project so what i have open here is
05:18 - the official site for retrofit which is
05:20 - a library developed by square and i'm
05:22 - going to go to the download section so
05:23 - we can figure out how can we include
05:25 - this library into our project
05:27 - so here you can see it says for gradle
05:29 - which is what we're using
05:31 - you need to include this line i'm going
05:32 - to copy this and notice that it says
05:34 - insert latest version here so we're
05:35 - going to fill that in later but i'm
05:37 - going to go into
05:38 - our project and go into build.gradle and
05:41 - make sure you're going into the
05:42 - build.gradle which is located in the app
05:44 - module
05:46 - and then in the dependencies section i'm
05:48 - going to add one more dependency which
05:50 - is for retrofit in order to get the
05:52 - latest version i'm going to open up
05:54 - github
05:56 - and tap on releases and you can see that
05:59 - the most recent release is 2.9.0
06:02 - so let's replace this with 2.9.0
06:04 - [Music]
06:06 - one more thing that you'll need in order
06:08 - to use retrofit is a converter if i tap
06:11 - on the section around retrofit
06:13 - configuration the converters are used by
06:15 - retrofit to translate the api response
06:18 - into a model that we can work with in
06:20 - our application and i'll talk more about
06:21 - what that means later on
06:23 - we're going to use json for this so i'll
06:25 - copy the dependency for json go back
06:28 - into android studio and paste that in
06:30 - with the same version number as what we
06:31 - used for retrofit
06:33 - finally the last thing we'll need to do
06:35 - before we can build our project is
06:36 - instruct gradle to use java 1.8 and the
06:40 - reason for this is because more recent
06:42 - versions of retrofit use a component
06:45 - which uses a java 8 feature which are
06:47 - lambdas so in order to enable java 8 we
06:50 - go up into the android section of the
06:53 - build.gradle file
06:54 - hit enter a few times and we're going to
06:56 - add a section here called compile
06:57 - options in this section we're going to
06:58 - have two lines one for source
07:00 - compatibility and the other for target
07:02 - compatibility and for both of these the
07:04 - value was going to be java version
07:07 - version 1.8
07:08 - at this point it's worth making sure
07:10 - that we haven't screwed up yet so i'm
07:11 - going to tap sync now and we see a sync
07:14 - success the next thing is let's build
07:16 - our project and we don't expect any ui
07:18 - or functional changes but we should
07:19 - still be able to build the project and
07:21 - see hello world
07:23 - in order to use retrofit the first thing
07:25 - i like to do is define
07:27 - a new file which is an interface that
07:29 - retrofit will consume in order to talk
07:31 - to our api the way that works is we want
07:34 - to create a new interface file
07:36 - in the same directory where main
07:37 - activity is located
07:39 - let's define a new file here
07:41 - a new kotlin file and call this covid
07:44 - service
07:45 - [Music]
07:47 - the idea of this kovic service interface
07:49 - is that we're going to have one function
07:51 - defined here for each endpoint in the
07:53 - apf so like we talked about earlier
07:55 - there are two endpoints that we're
07:56 - interested in one which is for getting
07:58 - the national data per day and i'll call
07:59 - that get national data and the other is
08:01 - for getting the per state data and i'll
08:03 - call that getstate's data plural because
08:06 - we're getting the data across multiple
08:07 - states
08:09 - the way retrofit works is that we need
08:11 - to add in a corresponding annotation for
08:14 - each method defined in our interface so
08:16 - for example we're doing a get request on
08:19 - the endpoint us
08:21 - daily.json for getting all the national
08:23 - data
08:24 - next we'll add a return value for each
08:26 - method that we've defined
08:29 - retrofit and json will automatically
08:31 - take the json data returned from the api
08:33 - and turn that into
08:35 - data models that we can use in our
08:36 - application
08:38 - this is going to be enclosed in
08:39 - something called a call object that
08:40 - retrofit gives to us and then our job is
08:43 - to define the data class that we'll
08:46 - actually be using in our application and
08:47 - i'll call that covet data so we're going
08:49 - to have the return value be a call which
08:51 - is a list of covet data because there
08:54 - will be
08:55 - one element in the data we get back for
08:57 - each day the return value for the other
08:59 - function in our interface is going to be
09:01 - the same a list of covadata and i'll
09:02 - show that to you later and the
09:04 - annotation is going to be similar again
09:06 - except for the endpoint is states
09:09 - daily.json instead of us
09:11 - one thing that's worth noting about this
09:13 - api which is really nice is that there's
09:15 - no authentication or api key that you
09:17 - need in order to use it so now let's
09:19 - define this data class covet data i'm
09:22 - going to again open up
09:23 - the project tool window and let's define
09:25 - a new
09:27 - kotlin file
09:28 - which defines covet data
09:33 - cova data class is going to be a data
09:35 - class
09:37 - which represents the data that we care
09:39 - about from the json object
09:41 - in the api
09:45 - [Music]
09:46 - we're going to use a annotation called
09:48 - serialize name which defines the mapping
09:50 - of the json key to the variable that we
09:53 - want to map it to in our data class
09:55 - so for example
09:57 - there's a key in the json object called
09:59 - date checked and we're going to map that
10:01 - to a string which is also called date
10:02 - checked and i'm going to show you that
10:04 - in the actual json result that we get
10:07 - from the api
10:08 - so what i have here is the documentation
10:11 - for the covid tracking project api
10:13 - and if you scroll down
10:15 - you can actually see the different
10:17 - endpoints available in this api the data
10:19 - that we're getting back right now is
10:22 - historic us value and we can issue the
10:24 - get request in the browser in order to
10:26 - dive into the json data and you can see
10:29 - the data that we're getting back is
10:30 - enclosed in this json array that's what
10:32 - these square brackets mean
10:34 - and inside of this json array are
10:36 - different json objects
10:38 - this represents one day worth of covet
10:41 - 19 metrics for the us the covad data
10:44 - class we've defined in our project
10:46 - represents one json object here and the
10:49 - attribute that we've already parsed out
10:50 - is this one called date checked so we're
10:52 - actually parsing out this string we're
10:54 - going to ignore a lot of the attributes
10:56 - in the json object but because we're
10:58 - interested in the change per day the
11:00 - attributes we are going to parse out are
11:03 - negative increase positive increase and
11:05 - depth increase in addition when we are
11:07 - querying for state data we're also going
11:09 - to care about an attribute called state
11:12 - so i'm going to include one attribute in
11:14 - copa data for each of the
11:17 - json keys that we just talked about
11:18 - positive increase negative increase and
11:20 - depth increase
11:22 - in addition we're also going to have one
11:24 - more key for the us state that this data
11:26 - represents one optimization we can do is
11:30 - if the serialized name exactly
11:32 - matches with the name of the variable we
11:34 - can get rid of the serialized name
11:36 - annotation and that's the case for each
11:38 - attribute that we've defined i'm going
11:39 - to go ahead and delete the serializer
11:41 - name for all of them
11:43 - one thing we should fix here is that the
11:46 - positive increase negative increase in
11:47 - death increase won't be of type string
11:49 - but they'll actually be of type integer
11:50 - because they represent the number of new
11:53 - cases found in each of these categories
11:55 - so now we've defined the cova data class
11:57 - we can go back into covert service and
11:58 - we can see that
12:00 - the red underlines have gone away
12:03 - now we can put all the pieces together
12:04 - in main activity the oncreate function
12:07 - will get called by the android system
12:09 - when our application boots up when our
12:11 - activity is being created
12:13 - at that point we want to make the api
12:15 - request to fetch the national data so we
12:17 - can display a chart on the screen
12:19 - showing it we'd also like to get the
12:21 - state data because as soon as we get the
12:23 - state data back we can populate our drop
12:25 - down or spinner so the user is able to
12:28 - drill down into a particular state
12:32 - here's where we're going to use retrofit
12:34 - the first thing we'll do is create an
12:35 - instance of json using the json builder
12:38 - because we're going to need that to
12:39 - create an instance of retrofit
12:42 - we use the retrofit builder passed in a
12:45 - base url which i'm going to do shortly
12:46 - and add in a converter factory where we
12:48 - pass in
12:50 - the json converter factory and pass in
12:52 - the json object and then we can call dot
12:54 - build
12:55 - we can now use the coded service class
12:57 - that we created in order to create an
12:59 - instance of the copied service and on
13:01 - this we can call the methods that we had
13:03 - defined and i'll get to that in a little
13:05 - bit but first let's go back and define
13:07 - the base url as a constant up here
13:12 - [Music]
13:14 - so in cobit service we defined the end
13:16 - of the url which is us daily.json and if
13:20 - we go back to the browser you can see
13:22 - that that basically captured this last
13:24 - portion of the url
13:26 - the base url will be everything except
13:28 - for that which will be this portion in
13:29 - the beginning
13:31 - so i can capture that put it here and
13:34 - let's add this in
13:36 - in our retrofit builder
13:40 - let's go back and uncomment this covet
13:42 - service like a national data and i
13:45 - mentioned how in kobit service the
13:46 - return value is not the model data
13:49 - directly but something which is graphed
13:51 - inside of a retrofit call object and the
13:54 - reason for this is because of the
13:56 - asynchronous nature of doing anything
13:58 - with network calls so we get back this
14:01 - call object because that is how we get
14:03 - notified of the success or failure of
14:06 - our api request
14:09 - so on the
14:10 - call object that we get back we'll
14:12 - enqueue a callback
14:13 - and this callback will be parameterized
14:16 - by list of cova data we're going to copy
14:18 - that in we can now
14:20 - override the methods that are required
14:23 - as part of the callback so if i tap on
14:24 - the red light bulb we can have android
14:26 - studio help us implement these members
14:28 - there are two methods on failure and
14:29 - unresponsible override both them
14:32 - and
14:33 - in on failure all we want to do is log
14:35 - an error
14:36 - something went wrong with api call so
14:37 - we're going to put a log.e which means
14:39 - log at error level put the tag and then
14:43 - indicate on failure and also include the
14:45 - throwable t which is included
14:48 - so let's define the tag at the top of
14:50 - the file and my convention for that is
14:52 - always to have the tag name be the class
14:54 - name
14:56 - for the on response method the first
14:57 - thing we'll do is simply log at info
15:00 - level that we entered into the
15:02 - onresponse method and we'll also include
15:04 - the actual response that we get back
15:07 - next the body of the response will
15:09 - contain the list of copa data that we
15:13 - should have been able to parse from the
15:14 - api
15:16 - if this data which represents the
15:17 - national data is null that means we got
15:21 - an invalid response from the server and
15:22 - we should log something at warning level
15:25 - the log.w and just indicate that
15:28 - something went wrong
15:31 - once we've gotten past this if statement
15:33 - we know at this point that our data is
15:35 - valid
15:36 - what we'll do here is save the national
15:38 - data into a member variable which is
15:40 - accessible throughout the whole main
15:42 - activity class so i'm going to define
15:44 - national daily data and define that as a
15:47 - property on main activity
15:49 - and this is going to create for us a
15:52 - late init var national daily data which
15:54 - is a list of coveted data one important
15:57 - point here is that the data we get back
15:59 - from the api starts with the most recent
16:01 - data however for graphing purposes we'd
16:04 - like to start our data with the oldest
16:06 - data first and so we're going to call
16:09 - nationaldata.reverse in order to get the
16:10 - proper ordering for now the only other
16:13 - thing i'll do in this method is add a
16:15 - log statement which indicates that we're
16:18 - going to figure out in a subsequent
16:20 - video how to take this national daily
16:22 - data and display it in a line chart
16:26 - to finish off this video i want to also
16:29 - fetch the state data and then validate
16:30 - that this is actually working what we've
16:32 - done so far is used retrofit to talk to
16:35 - the api and automatically convert the
16:37 - json data we get back into a class we
16:40 - defined called covadata which includes
16:42 - attributes such as a date of when this
16:44 - data is relevant number of positive
16:46 - cases negative cases debts and when we
16:49 - talk to the state endpoint we also want
16:50 - to know the state that this data is
16:52 - relevant for
16:54 - so i'm going to represent this in this
16:56 - light orange blob which has covered data
16:59 - inside of it and it contains a
17:01 - particular date what we just did for the
17:03 - national daily data is we reversed the
17:05 - order of the list that we got back from
17:07 - the api so the oldest covet data is at
17:10 - the front of the list and the most
17:12 - recent is at the
17:14 - end of the list
17:15 - so a similar
17:16 - logic applies for the state data but
17:19 - there is a wrinkle because all the state
17:20 - data is combined in one large list we'll
17:23 - get all the data for all states for may
17:25 - 1st then may 2nd and then and so on and
17:28 - so forth however in terms of being able
17:31 - to graph the data all really care about
17:33 - for example is being able to retrieve
17:36 - all of the data relevant for alaska
17:39 - and so what our job is is to take this
17:41 - big list of data and pull out all the
17:44 - data relevant to alaska and put that
17:46 - into a separate list
17:48 - so the idea is that we're going to take
17:49 - this big list and break it down into a
17:51 - map and that map will have a key of the
17:54 - state and the value will be all the
17:56 - coveted data relevant to that state so
18:00 - with that understanding now we can
18:02 - define
18:03 - the state data so i'm going to
18:06 - do something quite similar so i'll say
18:08 - coverage service
18:09 - dot get states data
18:12 - and cue it
18:13 - and this is actually going to be quite
18:14 - similar so i'm going to initially just
18:16 - copy all this
18:18 - [Music]
18:20 - and we're going to leave the log
18:22 - messages here but instead of calling the
18:24 - return value of response.body as
18:27 - national data this should be called
18:28 - states data
18:34 - similar to what we had before we first
18:36 - want to reverse the whole list we get
18:38 - back
18:39 - but then we want to group this large
18:41 - list down on a per state basis we're
18:44 - going to call this nice group by method
18:47 - in kotlin and pass in the argument that
18:50 - we want to group by and that'll be
18:52 - the state attribute of every covat data
18:55 - object
18:56 - so this is actually going to return to
18:58 - us a map rather than a list so i'm going
19:00 - to call this per state daily data and
19:03 - i'm going to create a property inside of
19:04 - main activity so again this
19:07 - property can be accessed throughout the
19:09 - whole class which we're going to use in
19:10 - subsequent videos this is a map between
19:13 - a string which is a state and a list of
19:15 - copa data which is the chronologically
19:17 - increasing cover data over time
19:20 - once we've computed this per state daily
19:22 - data the next thing is we'll want to
19:24 - update that drop down or that spinner
19:26 - with the state data so that will happen
19:28 - in a later video
19:31 - before we try this out the last thing i
19:33 - like to do is make one small improvement
19:36 - if you go back to kova data you'll
19:37 - notice that this attribute date checked
19:39 - is a string
19:40 - however in order to do computation and
19:43 - make it easier to display this date in
19:45 - different ways we would actually like to
19:47 - have this date check to be of type date
19:50 - java util date rather than a string
19:53 - and so in order to make that happen i
19:55 - can define it as a date here but we need
19:57 - to
19:59 - pass in another method in the json
20:02 - builder so json will know how to convert
20:05 - the
20:06 - date string and turn it into a java date
20:08 - object
20:09 - that can be done by calling this method
20:11 - set date format and you pass in a
20:14 - pattern the pattern that the api we're
20:16 - working with complies with is the
20:18 - following
20:20 - so with that we should be able to
20:21 - properly parse out dates
20:23 - all right so now we can finally try this
20:25 - out
20:26 - what i want to do to validate that we
20:27 - have something working is go into the
20:30 - unresponse method and where we have a
20:32 - log statement once we've computed the
20:36 - national daily data let's put a break
20:38 - point right there
20:39 - and now instead of running the app like
20:41 - normal hit this button for debug app so
20:44 - as soon as our program installs and we
20:46 - get into this onresponse method our
20:48 - program should halt execution at this
20:51 - point and so you can see that that
20:52 - happened here we can take a look at what
20:55 - is the
20:56 - value of this variable national daily
20:59 - data that we just computed
21:01 - so you can see that the size of this
21:03 - list is 134 which is sensible because
21:06 - that means that we have 134
21:08 - days worth of data and if i expand this
21:11 - we should ideally see all this sorted
21:13 - chronologically so the oldest day is
21:15 - january 22nd
21:16 - january 23rd so it is ordered which is
21:18 - great and it goes all the way up until
21:20 - the most recent day
21:22 - so this gives us confidence that we are
21:24 - able to parse all the data properly and
21:26 - you can also see the other values like
21:28 - positive increase negative increase
21:30 - death increase those are also
21:32 - being parsed out properly here
21:34 - now that we have the data which will
21:36 - power our whole application in the next
21:38 - video we are going to build out the ui
21:41 - which will display the chart and the
21:42 - metrics our goal in this video is to
21:45 - update activitymain.xml which defines
21:47 - the ui for our application and update it
21:50 - to include the different components that
21:52 - we'll need for our coronavirus tracker
21:55 - once we've done that in the next video
21:57 - we'll be able to wire things together
21:59 - and actually have the data that we
22:00 - parsed out in the last video together
22:03 - with the ui component that we had in
22:04 - this video and be able to show something
22:07 - on the screen taking a look at the final
22:09 - ui of our application there are a couple
22:11 - different ui components on the screen at
22:13 - the top you have the label for this drop
22:16 - down and they also have a drop down
22:18 - which is called a spinner on android
22:20 - for the purpose of this video i'm going
22:21 - to ignore that spinner and just have the
22:24 - state text view shown there
22:26 - below that we have something called a
22:28 - radio button group and the radio button
22:30 - group contains three different radio
22:31 - buttons and the idea of a radio button
22:33 - is that it acts somewhat like a normal
22:34 - button except for you can only have one
22:37 - out of those three buttons in that group
22:39 - selected which makes sense because we
22:40 - only want to be able to graph one of
22:41 - these metrics in our line chart below
22:44 - below that we have a line chart and in
22:46 - particular this is called a spark chart
22:48 - and we'll talk about how to integrate
22:50 - the robin hood library to include this
22:52 - below that we have one more radio group
22:54 - which has three radio buttons and then
22:56 - finally at the very bottom you have two
22:57 - text views one which is for the date of
23:00 - what metric is being shown then to the
23:02 - right of that we have the metric
23:04 - corresponding to that date
23:06 - here's the default activity main that
23:07 - comes in with any empty project the
23:09 - first thing i'm going to do is delete
23:11 - the default hello world text view and
23:13 - instead bring over one more text view
23:16 - and for now i'm just going to go into
23:17 - the design tab we're going to toggle
23:19 - between the design tab and code tab
23:21 - quite frequently and just to give myself
23:22 - more room i'm going to open up the
23:24 - design tab and make that the only thing
23:25 - shown on the screen
23:27 - so we have this textview
23:29 - on the ui i'm going to call this tv and
23:32 - id of tv select state
23:36 - gives us a text of state
23:38 - and then have it be 16 dp to the from
23:42 - the top and left
23:46 - let's also make the text larger
23:48 - the text appearance large
23:51 - next i'd like to
23:53 - bring onto the screen a radio button
23:55 - group so i'm going to go into the button
23:56 - section
23:58 - and bring over a radio group
24:01 - and then have the width of this radio
24:04 - button group be match parent the whole
24:05 - width
24:06 - let's zoom in a little bit
24:09 - have this be constrained to the
24:10 - bottom of the state text view
24:19 - and then inside this radio group we want
24:21 - three radio buttons so i'm going to take
24:22 - the radio button and drag it inside of
24:24 - the radio group in the component tree
24:27 - the first video button will be radio
24:28 - button negative
24:30 - this will have a text of negative
24:34 - and also let's make the layout with
24:36 - wrap content rather than match parent so
24:38 - it shrinks
24:39 - let's copy over this radio button two
24:41 - more times
24:42 - so we'll have one more for
24:44 - radio button
24:46 - positive
24:48 - the text will be positive
24:52 - and then one more for
24:55 - radio button
24:56 - death
25:00 - in order to
25:01 - have these radio buttons be horizontal
25:03 - rather than vertical we need to set the
25:04 - orientation attribute of the radial
25:06 - group
25:11 - and it looks like the width here should
25:13 - also be wrapped content
25:17 - same as this
25:19 - [Music]
25:21 - and then also we want to
25:22 - center the contents of the radio group
25:25 - inside of it so i'm going to select the
25:27 - radio group one more time
25:28 - and set the gravity attribute
25:32 - and have the gravity be center and then
25:35 - apply so now you can see that it is in
25:37 - the center both horizontally and
25:39 - vertically
25:40 - below this radio group we'd like to have
25:42 - a line chart which shows the data on a
25:44 - per day basis so to do that we're going
25:47 - to use a library from robinhood an open
25:49 - source library called spark and this is
25:52 - a library to show a simple android
25:54 - sparkline chart view
25:56 - so if you scroll down to the very bottom
25:58 - then we can copy over this line that
26:01 - we're going to add into our gradle build
26:02 - file
26:04 - i'm going to open up
26:06 - the build.gradle file it's located in
26:09 - the app module
26:11 - add that in and then tap on sync now
26:14 - while that's syncing let's go back to
26:16 - github
26:17 - and we can see how to use this
26:20 - there's a section here about usage all
26:22 - we need to do to include this spark
26:24 - chart in our application is add the
26:27 - spark view to the layout then going back
26:29 - into android studio we can open up the
26:31 - activity main.xml file and to add the
26:33 - sparkvue i want to go into the code tab
26:35 - so if we can just start typing sparkvue
26:38 - here and then android studio will help
26:39 - us with autocomplete the width will be
26:41 - matched parent because we wanted to take
26:42 - up the whole width of the screen and the
26:44 - height for now it's going to hard code
26:46 - in 150 dp and we'll change that later
26:49 - [Music]
26:50 - one thing we need to do also is we're
26:52 - going to position the sparkvue
26:54 - vertically below the radio group above
26:56 - it
26:57 - so
26:57 - i added this id on the radio group
27:00 - called radio group metric selection so
27:02 - now we can say the
27:03 - top constraint is to the bottom of the
27:07 - radio group metric selection
27:09 - we'll also give the sparkvue an id
27:12 - of sparkvue
27:14 - so let's see what this looks like in the
27:16 - design tab so you can see that we have
27:18 - a space allocated for the spark view
27:22 - below the spark view we have one more
27:24 - radio group
27:26 - and this is going to
27:28 - be vertically positioned below the spark
27:30 - view
27:31 - we'll give this radio group an id of
27:33 - radio group time selection because it'll
27:34 - be used to select the time range of the
27:36 - spark chart we'll add a 16 dp top margin
27:39 - on the radio group and then we're going
27:41 - to do something very similar to what we
27:42 - had before we add in 3d radio buttons
27:45 - update the text and id and position them
27:47 - so that the radio group is horizontal
27:50 - the three time scales that we're going
27:51 - to allow the user to pick from are the
27:53 - most recent one week most recent one
27:55 - month and the maximum amount of data
27:57 - that we get returned from the covet
28:00 - tracking project api as of today the max
28:03 - will typically be a period of around
28:05 - four or five months because we start
28:06 - getting data back from the api around
28:08 - january or february the last thing we
28:10 - need to do to complete our basic layout
28:13 - is add the two text views at the bottom
28:14 - of the screen and these will be relative
28:16 - to the bottom of the parent or the
28:17 - screen and not relative to the elements
28:19 - above it so we'll drag out a text view
28:22 - have this be 16 dp from the left end of
28:24 - the screen
28:28 - and concentrate to the bottom
28:30 - and let's also give this a height a
28:32 - hard-coded height of 80 dp
28:35 - this will be
28:36 - a text view for the date the date label
28:42 - and let's change the text appearance a
28:43 - little bit to make it body one
28:45 - let's have one more text view which is
28:48 - also 80 dp tall the same exact height
28:52 - and this text view is going to
28:55 - contain the
28:56 - metric value we'll say tv metric
29:00 - label
29:05 - this is going to be relative to the
29:07 - right end of the
29:09 - tv date label
29:10 - and it'll be
29:12 - to the bottom of the parent
29:16 - the gravity for both of these text views
29:18 - is going to be center
29:24 - and this text view is going to extend
29:27 - the
29:28 - whole remaining width of the screen
29:31 - which is not taken up by the first text
29:32 - view
29:38 - let's provide some sample data for each
29:39 - text view for example this metric it
29:42 - might
29:43 - let's get rid of the text attribute and
29:45 - let's use the tools namespace
29:47 - here which is this wrench text
29:50 - and let's put in a sample data point of
29:53 - 4354
29:55 - just to see how it might look
29:57 - let's make this text bigger
29:59 - we'll say
30:00 - display one as a text appearance so it
30:02 - becomes a lot bigger and then for this
30:04 - text view over here
30:06 - let's also put in a sample date may 30th
30:09 - 2020.
30:12 - our goal now is to have the sparkvue
30:15 - take up
30:16 - all of the height remaining in the
30:18 - screen once all the other widgets are
30:20 - placed
30:21 - so the way we'll do this is actually
30:23 - allocate the widgets above the sparkvue
30:26 - and below the sparkvue and have them be
30:27 - glued to the top or bottom of the screen
30:29 - so rather than having this radio group
30:31 - be relative to the bottom of the
30:32 - sparkvue i'm instead going to delete
30:36 - that constraint the top constraint and
30:38 - have that instead be to the top of the
30:41 - bottom components that we have like that
30:43 - now i'm going to
30:46 - set the bottom of the sparkvue
30:48 - to be the top of this radio group
30:51 - and instead of hardcoding the height to
30:53 - be 150 now we can just say match
30:55 - constraint and that should now fill up
30:57 - the sparkvue to be all the remaining
30:58 - height
31:01 - so now we have completed the basic
31:03 - layout for our covet tracker
31:05 - in the next video we're going to go back
31:07 - into main activity and fill out this to
31:09 - do so we're going to get rid of this to
31:10 - do and actually reference the sparkvue
31:12 - that we put on the layout and populate
31:14 - it with the national daily data that we
31:16 - parsed out from the previous video i'll
31:19 - leave a link in the description to the
31:20 - code we wrote in this video so you can
31:23 - take a look at the raw xml if you want
31:25 - where we left off in the last video is
31:27 - we created the basic layout for our
31:29 - covid tracker application our goal in
31:31 - this video is to populate this graph to
31:35 - update the sparkvue with the data we get
31:36 - back with the national per day data of
31:39 - chronovirus cases
31:41 - in the code what that means is we want
31:42 - to get rid of this to do item and
31:44 - replace it with the actual code to
31:47 - render the spark chart i'm going to
31:49 - delegate the work of updating the spark
31:51 - chart with our national daily data into
31:53 - a separate method called update display
31:55 - with data this will take in as a
31:56 - parameter the national daily data and
31:59 - then i'll have android studio help me to
32:01 - create this method so i'll hit that red
32:02 - light bulb and then create the function
32:04 - inside of main activity
32:06 - instead of calling this parameter
32:08 - national daily data i'm going to call it
32:09 - daily data because we're also going to
32:11 - reuse this method
32:13 - for the per state data
32:16 - this is a list of covada which is a data
32:18 - class that we had defined earlier
32:20 - there are three things that we want to
32:21 - do inside of this method first in order
32:24 - to render data inside of the spark chart
32:26 - we need to create a spark adapter
32:31 - next we want to update the radio buttons
32:33 - so by default the positive cases and
32:36 - maximum time range is selected
32:42 - and third we want to display the metric
32:44 - for the most recent day of data that we
32:46 - have
32:49 - let's start backwards so the first thing
32:51 - we'll do is display at the bottom of the
32:53 - screen the metric for the most recent
32:55 - date again i'm going to delegate the
32:57 - work of this into another function
32:59 - i'll call this update info for date
33:04 - and what we're going to pass in here is
33:05 - a particular day of data
33:07 - and the data that we want to pass in
33:09 - here is the most recent date and because
33:11 - our data is ordered chronologically we
33:13 - can pass in daily data and pass in the
33:15 - last
33:16 - element
33:18 - i'll i'll have android studio help us
33:19 - again to create this method
33:22 - and we're going to call this
33:24 - covet data the parameter
33:27 - so the objective of this function is to
33:29 - update the two text views at the bottom
33:31 - of the screen with the data inside of
33:33 - this parameter
33:35 - so first is the metric we call this tv
33:37 - metric label that's referring to the
33:38 - text view at the bottom right of the
33:40 - screen
33:41 - and the text attribute of this textview
33:44 - is going to be the number of coronavirus
33:46 - cases either positive negative or number
33:48 - of deaths on that particular day for now
33:51 - because we're hard coding in positive
33:53 - let's go with that
33:54 - that'll be covered data dot positive
33:57 - increase
33:58 - and we actually want to format this
34:01 - number
34:02 - with comma so it's more human readable
34:04 - rather than just showing the raw text in
34:06 - order to do that we're going to use a
34:08 - convenient class called number format so
34:10 - we'll call number
34:11 - format.instance.format and the format
34:13 - method on number format takes in a
34:16 - number and it will automatically format
34:17 - it to include the commas and decimals so
34:20 - our covadata
34:22 - has a date checked attribute which is a
34:24 - javadate object we want to take that
34:26 - javaday object and turn it into
34:29 - a nice string which looks something like
34:31 - may 30
34:33 - 20. so the way we'll do that is with
34:35 - something called simple date format
34:40 - and the first parameter here is the
34:42 - pattern of the date
34:44 - so what we care about is the month which
34:47 - will be capital ms
34:49 - so three of those letters so for example
34:51 - if it's marked it would be mar then we
34:53 - have the
34:54 - particular day in the month followed by
34:56 - the year and that's
34:58 - denoted by the lowercase y
35:01 - the next parameter is the we had to pass
35:02 - in a locale
35:04 - we'll put in locale us and we're going
35:07 - to save this in
35:08 - a
35:09 - variable called output date format
35:16 - that we have this output date format we
35:17 - can use that to format the javadate
35:19 - object inside of our covadata
35:21 - [Music]
35:24 - and this is going to be a string which
35:25 - we will put into
35:27 - the text attribute of our text view and
35:30 - we called it tv date label
35:35 - let's continue working backwards the
35:36 - next step is to update the radio buttons
35:39 - to select the positive cases and max
35:41 - time radio buttons by default this is
35:42 - actually very straightforward because
35:44 - all we need to do is specify
35:46 - the particular radio buttons which
35:48 - should be checked that's the attribute
35:50 - name to indicate that it should be
35:51 - selected so i'll say radio button
35:54 - positive
35:56 - and that
35:57 - is checked attribute should be true
35:59 - and then similarly for radio button max
36:03 - [Music]
36:05 - let's run the app now and see how it
36:06 - looks
36:10 - so you can see as soon as the network
36:11 - requests to fetch the national daily
36:13 - data came back then we execute the logic
36:15 - inside of the update display with data
36:17 - method and that is what is updating the
36:20 - bottom text views with the particular
36:22 - date along with the metric and also
36:24 - these radio buttons finally the last
36:26 - thing we'll do is create a new spark
36:28 - adapter which will instruct the sparkvue
36:30 - in our layout how to render the data
36:33 - contained inside of this list of coveted
36:35 - data
36:36 - so i'm going to
36:38 - pretend like we already have the spark
36:39 - adapter class i'm going to call it covid
36:41 - spark adapter and we're going to
36:42 - construct a new instance of this coveted
36:44 - spark adapter
36:46 - and this will take in the constructor
36:48 - the list of daily data that we have
36:50 - we'll save this into a local variable
36:52 - called adapter and now i'll tap on this
36:54 - red light bulb and have industry to help
36:56 - us to create this class
36:58 - we'll extract it to a separate file in
37:00 - the same package which is fine
37:02 - we can leave the parameter name as daily
37:04 - data and we can see that this file did
37:06 - indeed get generated inside of the same
37:09 - directory same package where main
37:10 - activity is located so we have this
37:12 - kovid spark adapter
37:14 - this coveted spark adapter has to be a
37:17 - subclass or has to inherit from the
37:20 - spark adapter class which came in from
37:22 - the open source library so we're going
37:23 - to put a colon here and say spark
37:25 - adapter
37:27 - [Music]
37:29 - and we'll need to import this and you
37:31 - can see that it does come in from the
37:32 - robinhood library and now there's a red
37:34 - underline under the declaration the
37:35 - class kovid spark adapter if we tap on
37:37 - the red light bulb we can see how to fix
37:39 - the problem which is by implementing
37:41 - these three members
37:42 - spark adapter is an abstract class so we
37:45 - need to provide an implementation for
37:46 - these three methods and if we tap on ok
37:48 - android studio helps us by automatically
37:51 - defining these three methods with the
37:52 - proper parameter and return type
37:55 - because we passed in the daily data in
37:56 - the constructor it's straightforward to
37:58 - implement each of these three methods so
38:00 - i'm going to first change the daily data
38:03 - to be a private
38:04 - member variable so i'm going to call it
38:05 - a private val
38:07 - the easiest method is get count because
38:09 - this is simply going to be the size of
38:11 - the list so because it's a one line
38:13 - statement we can use this nice feature
38:15 - in kotlin to get rid of the method body
38:16 - and just say getcount is equal to
38:18 - dailydata.size
38:22 - the idea of getitem is that given an
38:24 - index which is a position in the list of
38:26 - data we would like to return
38:28 - any which means a generic object which
38:31 - represents the data object at that
38:33 - position so again this is actually one
38:35 - line you can just index into the list of
38:37 - daily data so i'm going to get rid of
38:39 - the body of the function
38:40 - and say get item at that particular
38:43 - index is equal to daily data at index
38:47 - [Music]
38:48 - finally is get y and the idea here is
38:51 - that given a particular position in the
38:53 - graph we want to retrieve the
38:55 - corresponding value at that position
38:57 - right now we're only going to be
38:59 - graphing the number of positive cases
39:01 - per day so given an index you can grab
39:04 - the corresponding cova data at that
39:06 - position
39:07 - [Music]
39:10 - i'm going to put that into a local
39:11 - variable called chosen day data and then
39:13 - our job is simply to return the positive
39:16 - increase that attribute on that covet
39:19 - data the return type of get y is a float
39:21 - but
39:22 - this attribute is of type int and so to
39:25 - create turn it into a float we just call
39:27 - the two float method
39:28 - so we defined the basic working version
39:30 - of the spark adapter we can go back into
39:32 - main activity the error goes away and
39:34 - now we have one more line to write which
39:37 - is we have to grab a reference to the
39:38 - sparkvue and set the adapter property to
39:41 - be the adapter that we just defined
39:43 - that's it let's try it out
39:46 - when the app boots up you can see that
39:48 - we are graphing now in this spark chart
39:50 - the number of positive coronavirus cases
39:52 - nationwide over the maximum time range
39:56 - and at the bottom of our application
39:58 - we're showing the particular data the
40:00 - particular metric for the most recent
40:02 - day
40:04 - now that we have the ability to show one
40:06 - chart on the screen we're going to
40:07 - extend this functionality so that we're
40:09 - able to respond to changes in radio
40:11 - button click
40:13 - in this video our goal is to make this
40:16 - spark line chart more interactive so
40:18 - that we update it when the user taps on
40:20 - any one of these radio buttons for
40:21 - either selecting a different metric to
40:23 - show or selecting a different time scale
40:26 - the way we'll go about doing this is to
40:29 - map the radio button selection to an
40:31 - enum which represents the metric or the
40:33 - time scale i want to create a new class
40:36 - called chart options
40:42 - and this chart options kt file will
40:45 - encapsulate all the knowledge about
40:48 - the different ways we could render this
40:50 - chart this spark chart and there's going
40:52 - to be two enums inside of this chart
40:54 - options class the first will be
40:57 - for
40:58 - the metric being shown and there are
41:00 - three possible metrics that we can show
41:02 - on the graph one is negative
41:04 - negative cases of coronavirus one is
41:07 - positive cases of coronavirus and then
41:09 - lastly is the number of deaths
41:15 - the other enum we'll define here is the
41:18 - bottom row of radio buttons which are
41:19 - the time period over which the chart
41:22 - should display data we're going to call
41:23 - this
41:24 - enum class time scale
41:26 - [Music]
41:27 - and this enum is going to have an
41:29 - associated integer which represents how
41:32 - many days does time scale represent i'm
41:34 - going to call this val
41:36 - num date and this is going to be an
41:37 - integer
41:39 - so there are three possible options in
41:41 - the bottom row of radio buttons one is
41:42 - for one week of data and the
41:44 - corresponding enum is seven days for
41:46 - that
41:47 - then we have one month and we're gonna
41:49 - assume that one month is always 30 days
41:52 - and then finally is maximum which means
41:55 - show the max amount of data possible we
41:56 - don't know ahead of time the number of
41:58 - days associated with the maximum time so
42:01 - we're going to instead put a special
42:02 - value which is going to be negative 1.
42:05 - the combination of these two enums
42:06 - metric and time scale cover all the
42:08 - possible ways that our chart our spark
42:11 - chart could be rendering data
42:13 - there's also a notion of our chart
42:15 - having a certain state
42:18 - our chart has to be displaying one of
42:20 - these metrics and it has to be
42:21 - displaying data over exactly one of
42:24 - these three time scales
42:26 - that state will live inside of the
42:29 - adapter for our chart so inside of the
42:31 - adapter class i'm going to define two
42:34 - variables here
42:36 - one for the metric
42:37 - [Music]
42:39 - and this is going to be by default
42:41 - showing the positive cases and notice
42:43 - that this is a var not a valve because
42:44 - we do expect that this metric will
42:46 - change over time as the user taps on one
42:48 - of those radio buttons in the top group
42:51 - and there's one more variable which is
42:53 - the number of days ago and this is by
42:55 - default going to be the maximum time
42:57 - scale
42:58 - [Music]
43:00 - now that we've defined these two
43:01 - variables our adapter is now aware of
43:04 - what it should be rendering in the spark
43:06 - chart
43:07 - so in the function get y which returns a
43:10 - float of the corresponding metric value
43:13 - at this position at index instead of
43:15 - always returning the
43:17 - positive cases of chronovirus we should
43:19 - instead check the value of the metric
43:22 - variable
43:24 - i'm going to use the when construct in
43:25 - kotlin and we'll return a different
43:27 - value depending on the metric we'll say
43:29 - return when and depending on the metric
43:31 - we'll do something different
43:33 - when the metric
43:35 - is negative
43:36 - then we want to return
43:38 - the negative increase dot to float
43:42 - when the metric is positive
43:44 - we want to do something quite similar
43:46 - except this should be positive increase
43:48 - and then when the metric is death
43:51 - we want to
43:52 - report the number of deaths on that
43:54 - particular day
43:57 - [Music]
44:01 - and then later on we're going to use
44:02 - days ago in another function that we
44:04 - override on the adapter there's one more
44:06 - place back in main activity where we
44:09 - hard coded in the assumption of always
44:11 - returning the positive number of
44:13 - chronovirus cases so here as well in
44:15 - this update info for date method we want
44:18 - to again check the
44:20 - metric enum in our adapter and then
44:23 - return the corresponding metric
44:25 - so in order to have access to the
44:27 - adapter inside of this method instead of
44:29 - defining it locally here i would like to
44:32 - make it a property so i'm going to
44:33 - delete the val and now inroadstudio will
44:35 - show me this red light bulb and i can
44:38 - use android studio to create the
44:40 - property for me
44:44 - so now we have this adapter
44:46 - and
44:48 - right here we want to do something quite
44:49 - similar so val
44:51 - num cases should be again
44:54 - something which is based on the adapter
44:56 - dot the metric
44:59 - and if the metric is negative
45:02 - then we want to return
45:04 - the cova data which is a parameter
45:06 - passed in here we want to
45:07 - display
45:08 - the
45:09 - negative increase attribute of this cova
45:11 - data class
45:13 - and then in the case of positive you
45:15 - want to show positive increase and then
45:17 - finally in the case of death we want to
45:20 - show the number of increases in the
45:22 - number of dots
45:23 - so instead of always placing this value
45:26 - in we can instead
45:27 - show num cases
45:30 - we haven't made any functional
45:32 - differences in the app yet because we
45:34 - haven't added any event listeners for
45:36 - when the radio buttons are changed so
45:38 - all that logic for listening to changes
45:40 - in
45:41 - any of the ui elements we're going to
45:43 - put all that in a function called set up
45:45 - event listeners i'll call that method
45:47 - right here set up event listener
45:49 - [Music]
45:54 - and we'll
45:56 - define this method inside of
45:57 - mainactivity the reason i'm calling this
45:59 - method here is because we only want to
46:01 - make the ui interactive when there is
46:04 - actually data to show so as soon as we
46:06 - get the success from our api call to get
46:09 - the national data that's when we want to
46:11 - hook up the radio buttons and the
46:12 - ability to actually scrub on the graph
46:14 - before that it doesn't make sense
46:16 - so in setup event listeners there's
46:19 - two things we want to do first is we
46:21 - want to
46:22 - add a listener for
46:24 - the user scrubbing on the chart
46:27 - [Music]
46:30 - and second we'd like to respond to radio
46:32 - button selected events
46:33 - i'll leave what to do for the second
46:35 - item because we'll get to that later in
46:36 - order to allow the user to scrub on the
46:39 - chart which basically means hold down on
46:40 - the chart and drag their finger over it
46:43 - the first thing we need to do is
46:45 - set the is scrub enabled attribute to be
46:47 - true
46:49 - and then we need to set a scrub listener
46:50 - on the sparkvue
46:54 - and as you can see here the parameter
46:57 - that we are provided in this set scrub
46:59 - listener is a value which is a value
47:02 - corresponding to one data object in the
47:06 - chart
47:07 - in particular if you go back to the
47:08 - adapter you can see that the item data
47:11 - that we get back is going to be the
47:13 - return value of this function get item
47:15 - and we're turning back
47:17 - the covet data element at that position
47:20 - so going back into
47:21 - my activity i'm going to call the
47:23 - parameter here item data
47:26 - and then the job here is in the body of
47:28 - this function which will be invoked for
47:30 - us we want to
47:32 - update the ui with this information as a
47:35 - sanity check one thing we can do is just
47:37 - check if the item data is indeed cova
47:39 - data
47:40 - [Music]
47:41 - which it should be because that's the
47:43 - only thing we're returning but this is
47:44 - kind of a safety check
47:46 - then we can call the method we already
47:47 - defined update info for date with this
47:50 - item data so we're going to be updating
47:52 - that bottom ui component to show the
47:54 - date and the metric at that date
47:57 - let's run this
47:59 - so now if i hold down on the chart and i
48:02 - move along you can see that i am able to
48:05 - have this vertical line show up and as i
48:07 - move it along you can see the
48:09 - values at the bottom get updated so on
48:11 - april 18th i'm able to see exactly the
48:14 - number of positive chronovirus cases
48:16 - nationwide and this makes our
48:18 - application a lot more useful because
48:19 - we're giving the user an ability to
48:21 - drill down into specific days the last
48:23 - thing we'll do before hooking up the
48:25 - event listener for radio button taps is
48:27 - go back into the kovid spark adapter and
48:29 - make use of this days ago property
48:32 - the idea of days ago is that we want to
48:34 - change the time scale of our graph to
48:37 - only show that amount of data the way
48:39 - we'll do this is by overriding one more
48:41 - method in the spark adapter class it's
48:44 - called get data bounce
48:48 - super.getdatabounds this invocation of
48:51 - the parent method which already defines
48:53 - this is going to return to us a rect f
48:56 - or a rectangle composed of float
48:57 - coordinates so i'm going to capture that
48:59 - supervalue into a local variable called
49:02 - bounds and the idea here is that this
49:04 - rectangle defined by bounds will dictate
49:07 - what exactly is shown in our spark chart
49:10 - if you wanted to shorten or expand the
49:12 - amount of data shown in the chart all we
49:14 - need to do is update the left end of
49:16 - this bounds rectangle so we can say
49:18 - bounds dot left is equal to instead of
49:21 - the whole data which is count
49:24 - from
49:24 - basically invoking this function
49:26 - getcount instead of showing the whole
49:28 - amount we'll say count minus seven which
49:31 - means top off everything except the last
49:33 - seven days worth of data the most recent
49:35 - seven days worth of data
49:38 - and this needs to be afloat so we would
49:39 - have to call to float here
49:42 - then we can return these modified bounds
49:45 - of course we don't always want to
49:47 - subtract seven from the count and only
49:49 - show the last seven elements of the list
49:51 - instead we'd like to change it based on
49:52 - this days ago property
49:55 - instead of having seven here we want to
49:57 - get the days ago variable get the
50:00 - corresponding num days property out of
50:03 - that enum and turn that into a float
50:05 - this will work in the case of looking at
50:07 - the last one week or one month of data
50:09 - because the corresponding value of num
50:11 - days will be 7 or 30. however when the
50:13 - max option is selected instead of
50:15 - reducing the amount of data shown by
50:16 - subtracting from count we would instead
50:18 - like to show all the data so that's a
50:20 - special case where we'll say if
50:22 - days ago is not equal to
50:25 - time scale dot max
50:27 - only then do we want to reduce
50:29 - the amount of data shown so if days ago
50:31 - is max scale bounds will actually be
50:33 - unchanged which is what we want
50:36 - now we're finished laying the groundwork
50:37 - for being able to respond to when the
50:39 - user taps on the radio buttons we simply
50:42 - need to modify the metric or days ago
50:44 - enum inside of the adapter now we can go
50:47 - back into mainactivity and write the
50:48 - logic to respond to radio button
50:51 - selected events so let me remove the to
50:53 - do because we're actually going to
50:55 - complete this item right now
50:56 - there are two radio button groups that
50:58 - we're going to respond to the first is
51:00 - the set of radio buttons on the bottom
51:03 - of the screen which is for selecting the
51:05 - time so radio group time selection we're
51:07 - going to set a unchecked change listener
51:10 - so this is going to invoke the body of
51:12 - this function whenever one of the radio
51:14 - buttons in that bottom group has been
51:15 - selected this method that's going to get
51:17 - invoked has two parameters one which is
51:19 - group which we don't care about so i'm
51:20 - going to change that name to be a
51:22 - underscore followed by a checked id and
51:25 - the checked id is the id of the radio
51:26 - button that was selected
51:29 - so the only thing that really needs to
51:31 - happen here is we need to update the
51:32 - days ago property in our spark adapter
51:37 - to be the corresponding value when one
51:39 - of the radio buttons is tapped on so for
51:41 - example if i tapped on the radio button
51:43 - for one week i should set adapter.days
51:46 - ago to be timescale dot week so rather
51:50 - than hard coding it of course we should
51:51 - do this contingent upon the value of
51:54 - checked id so we'll use the when
51:56 - construct i'll say when checked id
51:59 - and if the checked id is r dot id dot
52:02 - radio button week
52:04 - and we'll map that to timescale.week
52:09 - if it's r dot id dot radio button month
52:12 - then we'll set the time scale to be
52:14 - month
52:15 - and then otherwise
52:17 - the time scale is max
52:21 - once we've updated the days ago
52:23 - the only other thing we need to do is
52:24 - notify the adapter that the data the
52:27 - underlying data has changed so
52:29 - the adapter knows to re-render itself
52:32 - the other radio button group is
52:35 - at the top of the screen for displaying
52:37 - a metric
52:38 - so we'll do something quite similar
52:40 - radio
52:41 - groupmetricselection.set on check change
52:43 - listener you don't care about the group
52:45 - but we do care about the checked id
52:47 - so i'm going to do another blend based
52:48 - on the tucked id
52:52 - if the radio button is
52:54 - positive
52:55 - [Music]
52:56 - then we want to
52:58 - update the display metric to be positive
53:00 - so i'm going to actually delegate the
53:02 - work of updating the display metric into
53:04 - a method called update display metric
53:08 - and i'll pass in positive here
53:12 - let's also do the same thing for the
53:13 - radio button negative
53:16 - [Music]
53:17 - and then finally for death
53:19 - radio button
53:21 - death
53:25 - let's define this method now
53:30 - the only thing that needs to happen here
53:32 - is something quite similar we're going
53:34 - to update the metric variable in the
53:36 - adapter to be the selected metric
53:39 - and then we'll notify the adapter that
53:41 - the dataset has changed
53:43 - let's try it
53:46 - so by default we're seeing the
53:48 - nationwide number of positive
53:49 - coronavirus cases over the maximum time
53:51 - scale if i change the metric to be
53:53 - negative you can see that we are seeing
53:55 - a different chart
53:57 - and similarly with the number of dates
53:59 - i can also do the same thing for
54:01 - showing only a certain period of data so
54:04 - one month you can see that i'm only
54:05 - seeing that last segment and then week i
54:08 - only have seven data points being shown
54:10 - here so that looks like it's working
54:12 - in the next video we'll make a few
54:15 - improvements to the ui when the radio
54:17 - button is selected and we'll add in a
54:19 - spinner or a drop down component at the
54:21 - top of the screen which will allow the
54:23 - user to look at the data for a
54:25 - particular state there are two things
54:27 - i'd like to do in this video one is i'd
54:29 - like to make some improvements of what
54:31 - happens when i change either the metric
54:34 - shown for the spark chart or the time
54:36 - scale shown and second i'd like to
54:38 - include a drop down or a spinner
54:39 - component at the top of the screen which
54:41 - will show all the states and if the user
54:44 - selects a particular state we should
54:45 - update the data shown in the chart for
54:48 - all the covid 19 cases of that state
54:52 - so first one thing you'll notice is that
54:54 - when i change the metric being shown on
54:56 - the graph this bottom component this
54:58 - text view doesn't get updated so we're
55:01 - actually showing wrong information here
55:02 - right this 20 000 is for the number of
55:04 - positive cases of chronovirus on this
55:06 - particular day and not the number of
55:08 - deaths so this should really be updated
55:10 - when this metric gets updated
55:13 - the way we'll fix this is by adding some
55:14 - logic in this method update display
55:16 - metric this method is invoked every time
55:19 - the user changes the
55:21 - metric shown on the graph
55:24 - so what the logic we have here is doing
55:27 - is updating the metric on the adapter
55:31 - we'd also like to reset the number
55:36 - and the date shown
55:38 - in the bottom text views
55:42 - so really what we'd like to do is call
55:44 - the method that we wrote a while ago
55:47 - called update info for date so the idea
55:49 - here is that we want to pass in the last
55:52 - covet data object and have this bottom
55:55 - component show the most recent data the
55:58 - last day of data that we have along with
56:00 - the metric corresponding to
56:02 - the metric passed in here and that logic
56:04 - is already built inside of the update
56:06 - info for data class so you can see that
56:08 - we're already checking
56:09 - the met adapter metric so we're going to
56:11 - show the right value the question now is
56:14 - how do we know what to pass in here the
56:17 - issue is that we need to know what data
56:19 - is currently being displayed in the
56:21 - sparkvue
56:22 - if the data being shown as a national
56:24 - data then we can take the last element
56:27 - of that list of cova data representing
56:28 - the national chronovirus data and pass
56:31 - that into update info for date for date
56:33 - but if we're showing a particular
56:35 - state's data we need to know what state
56:37 - we're showing and grab the last day's
56:40 - worth of data for that state and pass
56:42 - that in
56:43 - so we need to have some way of knowing
56:45 - what is being shown currently to do that
56:48 - we're going to add one more
56:50 - property or member variable inside of
56:51 - main activity i'm going to define a
56:53 - property called currently
56:57 - shown data and this will hold on to the
57:00 - data that's currently being displayed
57:02 - inside of the sparkvue and the reason
57:04 - i'm assigning the value here is because
57:07 - this method update display with data
57:09 - takes in the list of data which is being
57:11 - shown in the sparkvue so we know that
57:12 - this method has to be called at the
57:14 - beginning and every time that the data
57:17 - for the sparkvue has changed currently
57:19 - shown data is going to be equal to
57:21 - exactly the parameter passed into update
57:24 - display data
57:25 - now android studio can help us to define
57:27 - this property
57:28 - create property currently shown data
57:32 - and now we can go back
57:35 - to update info for
57:37 - date and then pass in the last element
57:40 - of the currently shown data
57:42 - one more thing i'd like to do before we
57:44 - try this out is a quick design
57:46 - improvement based on the metric being
57:48 - shown we can display a different color
57:50 - for the chart
57:51 - [Music]
57:53 - so i'm going to add a comment here which
57:54 - says update
57:56 - the color of the chart
57:59 - and
58:00 - what we want is there's an attribute on
58:02 - the sparkvue called line color
58:05 - and we want to set this
58:06 - to be equal to some color integer
58:09 - the way you get a color integer is you
58:11 - can say
58:12 - context
58:14 - compat dot get color and you can pass in
58:17 - context which is this and a color
58:19 - resource so there is a predefined
58:21 - colored resources like r dot color dot
58:23 - let's say color accent
58:25 - this will give us back a color inch
58:28 - [Music]
58:30 - and i'm going to actually add an
58:31 - annotation here to make it obvious that
58:32 - this variable is of type coloring
58:36 - so we can pass and color into here
58:38 - and then also we can update the
58:41 - text view which represents the metric so
58:43 - we call that tv metric label and we're
58:46 - going to set the text color
58:47 - color inch
58:50 - so now based on the metric we want to
58:52 - show a different color here rather than
58:54 - just the color accent
58:56 - here are the colors that i picked out
58:58 - which i thought were intuitive for each
59:00 - of the metric types negative cases is
59:02 - green positive cases is this orange
59:04 - color and number of depths is this red
59:06 - color
59:07 - so back in android studio i'm going to
59:09 - paste in those hexadecimal values inside
59:12 - of the color resource file
59:16 - so instead of resources values you
59:17 - should already have a colors of xml and
59:19 - we're going to add three more colors
59:21 - here
59:22 - [Music]
59:23 - one will be color negative
59:26 - and then this will have a value of
59:29 - the green color
59:31 - [Music]
59:34 - then we'll have color positive
59:36 - this has the orange value
59:39 - and finally we'll have one more color
59:41 - representing the death metric
59:44 - this has that red value now now that
59:46 - we've defined these three colors we can
59:48 - go back here and again use the when
59:50 - construct the when statement in kotlin
59:55 - [Music]
59:57 - we're going to define a color resource
59:59 - which is the result of this when
60:01 - statement
60:02 - instead of the went statement for each
60:03 - metric we'll map it to the color
60:05 - resource that we had so for example
60:06 - metric negative will map to
60:08 - r.color.color negative
60:10 - positive will be color positive and
60:12 - death will be color depth
60:14 - now we can use the colored res value
60:17 - when we're obtaining the color int using
60:19 - contextcompat.getcolor
60:21 - and finally last thing we can do before
60:23 - we run this is inside of this method
60:25 - update display with data we're calling
60:28 - update info for date we're already
60:30 - calling this method inside of update
60:32 - display metric and we're actually doing
60:34 - other useful things such as updating the
60:36 - line color so rather than calling
60:39 - update info for date i'm instead going
60:41 - to call update display metric and pass
60:44 - in metric positive because that's that's
60:46 - always going to be the default metric
60:48 - shown
60:49 - let's try it
60:52 - so now you can see when we run the app
60:54 - initially we are again seeing the
60:55 - positive cases of coronavirus over the
60:57 - maximum time scale but we have this nice
60:59 - color applied to it this orange color if
61:02 - i change this to be
61:04 - death we can see it gets updated to red
61:06 - and importantly the texture at the
61:07 - bottom showing the exact metric for the
61:09 - most recent day has been updated to
61:11 - reflect the chosen metric
61:13 - the last major piece of functionality
61:15 - for our app is allowing the user to
61:18 - select which state they want to see data
61:20 - for
61:21 - so
61:21 - back in mainactivity this is
61:23 - corresponding to this to do item that we
61:25 - had left in one of the prior videos
61:28 - so we're finally going to do this i'm
61:30 - going to remove the to do
61:32 - and i'm going to delegate the work of
61:33 - updating the spinner with the state
61:35 - names into a method called update
61:38 - spinner
61:40 - with state data
61:42 - and
61:43 - this
61:44 - function is going to take in one
61:45 - parameter which is the list of all the
61:48 - states to show
61:49 - and that will simply be
61:52 - the
61:53 - key set of this map so if you recall the
61:56 - per state daily data is a map of each
62:00 - key being a state and the value being
62:03 - all of the coveted data
62:05 - for every day of that state
62:09 - so now we can have android studio help
62:11 - us to define this method
62:13 - i'll define it in main activity
62:15 - and i'll
62:16 - have the parameter be called state names
62:19 - and this is of type set of string
62:22 - the objective here is given these state
62:24 - names which are a set we want to turn
62:26 - that into an ordered list and we're
62:28 - going to take that ordered list and pass
62:30 - that in as the input to our dropdown
62:32 - component the first let's turn our set
62:35 - into an ordered list where we're
62:37 - alphabetizing all of the states so we'll
62:39 - call state names dot to mutable list so
62:42 - we can actually change and mutate the
62:43 - contents of this list we'll call this
62:46 - variable state abbreviation list
62:48 - and it will contain the abbreviations
62:50 - for all 50 states plus several u.s
62:52 - territories
62:54 - and we want to alphabetize this list so
62:57 - we want
62:58 - states like alaska or alabama to show up
63:00 - at the top and states like wyoming to
63:01 - show very at the very end of this drop
63:04 - down so we'll call dot sort
63:07 - and then we also want to have one
63:09 - special entry in the state abbreviation
63:11 - list which is to represent the national
63:14 - data right we're not going to get that
63:15 - in the set of strings passed in here
63:18 - because this only contains state names
63:19 - so we're going to have to add it
63:20 - manually right here and this is going to
63:22 - be the very first element in our list
63:26 - so i'll add this at position 0 and i'm
63:28 - going to have a special entry which is
63:30 - called all states
63:33 - which basically means i want to see the
63:34 - national data
63:39 - so again android 3 will help us to
63:40 - define this variable all states
63:43 - and this is going to
63:45 - have a value a hard coded value of
63:49 - all
63:51 - nationwide
63:54 - and i'm actually going to define this
63:55 - outside because i can make this a const
64:02 - so what we want to do next is take this
64:04 - ordered state abbreviation list data and
64:07 - add that as the data source to our
64:10 - spinner
64:14 - next we need to add the spinner into our
64:18 - ui so going into activitymain.xml we
64:20 - would like to be able to add a spinner
64:22 - component at the very top of this layout
64:24 - that we're building i'm not a big fan of
64:26 - the built-in android component for this
64:28 - which is this spinner component i think
64:31 - it's really hard to use and it doesn't
64:32 - look that good instead we're going to
64:34 - use a library called nice spinner
64:37 - and this is easier to work with and in
64:39 - my opinion it looks better
64:40 - so let's go down first to how to include
64:43 - this library into our project
64:46 - so inside of the build.gradle file we
64:48 - need to add a dependence like normal but
64:50 - also we should add this section about
64:52 - repositories so i'm going to go into
64:54 - android studio
64:55 - go into the build.gradle file which is
64:56 - located inside of the app module
64:59 - and you probably won't have a repository
65:02 - section here so
65:04 - right after we added compile options
65:05 - let's add repositories
65:07 - [Music]
65:09 - and we want to add this maven repository
65:11 - i'm going to copy this line
65:13 - and paste that in
65:15 - and now we should be able to add the
65:17 - dependency and copy this line
65:20 - and paste it in here tap on sync now and
65:23 - hopefully
65:24 - we're able to download this library
65:25 - properly looks like it succeeded so now
65:28 - we can go back into activity main and we
65:29 - can include it in this area that we
65:32 - allocated for it to do this i'm going to
65:33 - go back into the code view of our layout
65:38 - and right here is the label which
65:42 - describes what this spinner is for i'm
65:44 - going to create another
65:46 - component which is called spinner and it
65:48 - should be nice spinner we'll set the
65:50 - layout width to be zero dp because we
65:52 - want this knife spinner to take up as
65:54 - much room as possible the height can be
65:57 - wrap content
65:59 - and we're also going to add a margin
66:00 - start and end
66:06 - there's a few other properties we can
66:08 - add in here ellipse size we're going to
66:09 - ellipses in the end
66:12 - and the maximum number of lines
66:15 - will be one
66:17 - and then the text appearance of what
66:18 - we're showing
66:19 - should be
66:20 - large and now our job is we need to
66:23 - constrain this view appropriately
66:27 - for the horizontal constraint you want
66:28 - the left end of the spinner to be up
66:30 - against the right end of the select
66:33 - state text view
66:35 - so i'm going to say constraint
66:37 - start is
66:39 - to the end of
66:41 - the tv
66:42 - select state
66:44 - and then the end constraint
66:46 - is going to be to the end of the parent
66:50 - because we wanted to go to the end of
66:51 - the screen for the vertical constraint
66:53 - we're going to have the top and bottom
66:55 - of the spinner be equivalent to the top
66:57 - and bottom of the select state text view
67:00 - which is to the left
67:02 - so bottom
67:03 - [Music]
67:04 - bottom of and then we want to pass in cv
67:06 - select state
67:07 - and then something quite similar for the
67:09 - top
67:14 - and one last attribute that i forgot to
67:16 - add
67:16 - is something called pop-up text
67:18 - alignment and i'm going to put start
67:20 - here just so that in the drop-down all
67:22 - of the states are
67:25 - left aligned or start aligned
67:28 - so if i go into the design tab now we
67:29 - should see that there is a space
67:31 - allocated for the spinner
67:35 - one thing we can do here is just give
67:37 - this an id because we'll need to refer
67:39 - to it in our main activity.kotlin file
67:42 - we'll call it spinner select
67:45 - now we can go back into main activity
67:47 - and let's reference this spinner that we
67:49 - just added so i'll say spinner select
67:53 - dot attach data source and we'll pass in
67:55 - the state abbreviation list
67:58 - the last thing we need to do to hook it
68:00 - all up is we'd like to be notified when
68:02 - the user has selected another state from
68:05 - the drop down
68:06 - so on the spinner select widget we're
68:08 - going to add a set on spinner item
68:11 - selected listener
68:15 - and this takes in four parameters the
68:16 - only ones that we care about are the
68:18 - parent and the positions i'm gonna put
68:20 - an underscore in for the other params
68:24 - and
68:25 - this will now this method will be
68:26 - invoked every time a new item in this
68:28 - drop down is selected so in order to get
68:32 - the selected state
68:34 - we're going to say parent
68:36 - dot get item at position it'll pass in
68:38 - position
68:39 - and we know that this is going to be of
68:40 - type string our data source for the
68:42 - spinner is a list of string i'm going to
68:45 - cast this as a string
68:47 - and save this as the selected state
68:51 - now we'd like to get the corresponding
68:53 - daily list of cova data for that state
68:58 - so i'll say per state daily data and
69:00 - then we'll look inside the map
69:03 - to pull out
69:04 - all of the data relevant to that state
69:07 - this is going to be
69:09 - val selected data
69:14 - the only thing we need to be careful
69:15 - about here is that if the selected state
69:18 - from the drop down is the all option
69:20 - which is i want to see the data
69:22 - nationally then that element won't exist
69:25 - in the per state daily data and we're
69:27 - going to get a null value here so if
69:29 - that happens we can use
69:31 - this
69:32 - question mark colon operator to say if
69:34 - the value here was null then we would
69:37 - instead like to
69:39 - assign the value of national daily data
69:41 - to
69:42 - this variable now that we have selected
69:44 - data which is our list of covad data
69:46 - across all the days available
69:48 - we can now simply call
69:50 - the method we already have called update
69:52 - display with data with selected data
69:55 - that should be it let's try it out
69:59 - perfect so now we're able to see this
70:01 - drop down
70:02 - and by default the all option is
70:05 - selected which means we're seeing data
70:07 - nationally and then
70:09 - all these state abbreviations are what
70:10 - we're getting back from the api
70:12 - so for example i might look at the
70:14 - california data which is ca
70:16 - and we can see that the data does get
70:17 - updated so the
70:19 - text view down here to show the exact
70:21 - metric value is showing something
70:23 - significantly smaller which is for
70:25 - california
70:26 - and then if i choose different metrics
70:28 - i'm again seeing the california specific
70:30 - data and the same functionality applies
70:33 - across all states i can scrub on
70:36 - the spark view i can change the time
70:38 - scale
70:40 - and i can choose any metric that i want
70:42 - if you've gotten this far drop a comment
70:44 - to let me know so i can congratulate you
70:46 - on building out all the functionality
70:48 - for our application in the next video
70:50 - we're going to make a couple design
70:52 - improvements for example we're going to
70:53 - use one more robinhood library called
70:55 - ticker in order to animate changes to
70:57 - this text view and we'll do a few other
70:59 - design and color improvements in the app
71:01 - at this point we're done with all the
71:03 - functionality of our app in this video
71:05 - we're going to go through a couple of
71:07 - really easy and high impact design
71:10 - improvements first in order to really
71:12 - make our app feel like the robinhood
71:14 - stock trading app we're going to use a
71:16 - library called ticker in order to
71:18 - animate changes into this text view
71:22 - here's the github page for robinhood
71:23 - ticker and you can kind of see what this
71:25 - looks like in this gif
71:27 - we're going to have the same effect for
71:29 - our text view
71:31 - if you scroll down all we need to do to
71:32 - include this is add this into our
71:34 - build.gradle file
71:36 - so this is again going to go into
71:39 - the build.gradle on the app module tap
71:41 - on sync now and then let's go back to
71:43 - github
71:44 - and you can see it's really
71:45 - straightforward to use this instead of
71:47 - the text view we just need to replace
71:48 - that with a ticker view
71:51 - so let's go back to android studio go
71:53 - into activity main
71:54 - and that component that we wanted to
71:57 - replace instead of just being a text
71:59 - view we would like this to be a ticker
72:01 - view so go into the code view go to the
72:03 - very bottom
72:04 - and this is what we want to replace so
72:06 - i'll say ticker view here and then i
72:08 - also want to just update the id and make
72:11 - this
72:13 - particular view just so it's obvious
72:15 - that this is the robinhood ui component
72:18 - ticker view now the only thing we need
72:19 - to do in order to properly use the
72:21 - ticker view library is go into main
72:23 - activity and we we need to set a
72:26 - character list on the ticker view
72:28 - so in the method for setting up the
72:30 - event listeners
72:32 - let's add one more line here
72:34 - which is for the ticker view and we're
72:36 - going to set the character list there's
72:39 - a predefined character list called
72:41 - ticker utils
72:44 - [Music]
72:45 - dot provide number list because we're
72:47 - going to be animating over numbers so if
72:50 - we try this now
72:53 - so i'm showing positive cases now i go
72:55 - into the number of deaths
72:57 - so you can see how the ticker view did
72:59 - animate in this really nice way and same
73:02 - thing with negative cases and if i scrub
73:04 - over
73:05 - the spark view you can see as i
73:08 - scroll
73:09 - we're getting that really nice feedback
73:11 - that this number is changing
73:14 - one other quick design improvement we
73:15 - can do is to add a background shading
73:17 - color behind the sparkvue and the time
73:21 - radio group the reason this is valuable
73:23 - is it provides segmentation into our
73:25 - layout and it gives a hint to the user
73:27 - about which components are related to
73:29 - each other
73:30 - the way we'll go about doing this is by
73:32 - adding some padding and margin between
73:33 - the sparkvue and the radio group time
73:36 - selection and then adding a background
73:37 - color to those two components
73:39 - so going into activity
73:43 - on this radio group which sits below the
73:45 - spark view
73:46 - that will add a margin top
73:49 - of 16 dp
73:52 - and we'll also add a padding bottom
73:55 - of 8 dp
74:00 - and for the sparkvue we are going to add
74:02 - a padding
74:04 - on the top
74:05 - of 16 dp
74:08 - along with the padding bottom of 8 db
74:12 - and these are the two components the
74:14 - sparkvue and the radio group time
74:15 - selection on which we're going to have a
74:17 - background color i'm going to assign a
74:19 - background and for now it'll just be
74:21 - color primary but we're going to update
74:23 - this
74:23 - in just a bit once we define the color
74:26 - so i'm going to actually call this color
74:29 - background
74:29 - [Music]
74:31 - shade
74:33 - and have the same color be defined here
74:35 - and then let's have android studio help
74:37 - us create a color value resource the
74:39 - resource value i'm going to put in here
74:41 - is this
74:42 - very light gray light blue color that i
74:44 - found
74:45 - and basically what that did if i command
74:47 - click in the color background shade is
74:49 - it added one more color resource in our
74:51 - colors.xml file
74:53 - so if we try this now
74:54 - now you can see we have this background
74:56 - color behind the spark view and the time
74:58 - selection and that makes it easier to
74:59 - comprehend what we're looking at
75:02 - the last major design improvement i
75:03 - would like to make in this video is to
75:06 - improve the ui of these radio buttons
75:09 - in our application
75:11 - the default radio button ui on android i
75:13 - think is pretty ugly so we're going to
75:16 - modify it so it looks and feels like a
75:18 - button
75:19 - i have a separate video which talks
75:20 - about a few of the aspects of what we're
75:23 - about to do so i'll leave a link to that
75:24 - if you're interested but the idea is
75:26 - that we're going to remove this circle
75:30 - icon next to the radio button and add a
75:32 - background drawable which is a shape
75:34 - drawable
75:35 - behind each of these radio buttons so
75:38 - first let's fix the styling for a single
75:40 - radio button how about this negative
75:42 - radio button
75:43 - and then we'll think about how can we
75:45 - apply that style to all radio buttons in
75:47 - our application
75:49 - and i use the word styling deliberately
75:51 - because instead of adding these
75:52 - attributes directly onto the radio
75:54 - button i instead am going to define a
75:56 - style
75:57 - and apply the style onto this radio
75:59 - button
76:01 - so inside of the styles xml file which
76:04 - you should already have in the values
76:06 - directory in resources i'm going to open
76:08 - that up we're going to define a new
76:09 - style here
76:10 - [Music]
76:13 - and the name we'll call it custom radio
76:15 - button
76:17 - styles can have parents and parents are
76:19 - basically where are you inheriting all
76:21 - the different attributes and styles from
76:24 - and you can see the android studio is
76:25 - suggesting for us that we have the
76:28 - parent be widget app compat compound
76:30 - button radio button which is what we're
76:32 - going to pick
76:33 - and inside of this style tag is we're
76:35 - going to define various attributes in
76:37 - order to remove that circle that shows
76:38 - up by default on the radio button we're
76:40 - going to
76:41 - override the android button
76:45 - item
76:46 - and we're going to set this to a value
76:48 - of null
76:49 - also why don't we set the text style
76:55 - of the radio button to be bold
76:58 - so i'm going to add this style this
77:00 - custom radio button style on the
77:02 - negative radio button that we had
77:05 - and so i'm going to add the style
77:06 - attribute and then reference the custom
77:08 - radio button style so if we try this now
77:10 - we should hopefully no longer see
77:13 - the
77:14 - circle next to the negative icon yeah
77:16 - and you can see that that is indeed the
77:18 - case and we're also bolding the font
77:20 - like we expect
77:22 - now going back into styles xml let's add
77:25 - one more attribute onto the custom radio
77:26 - button
77:30 - for the background
77:32 - and let's define a drawable here
77:35 - and we're going to create a brand new
77:36 - drawable
77:37 - for now i'll just call this button
77:39 - default
77:41 - and then
77:42 - now let's have introduce help us to
77:43 - create a drawable resource file
77:46 - which is named appropriately
77:49 - the root element let's have that be
77:51 - shape
77:52 - and then tap on ok
77:54 - and so here is where we're going to
77:55 - define different attributes of the
77:57 - background for our radio button things
77:59 - like the
78:01 - corner radius the padding
78:03 - the the shape like whether you want it
78:04 - to be a square or oval
78:06 - etc
78:07 - so there's a few different attributes
78:09 - we're going to find here
78:10 - one which is padding
78:12 - and we're going to have the padding be
78:14 - on all sides 12 dp
78:17 - [Music]
78:25 - and then one more attribute we're going
78:26 - to have is
78:28 - a radius of 4 dp a corner radius of 4 dp
78:32 - [Music]
78:34 - so if we go back into styles xml the
78:36 - error has gone away and now we should be
78:38 - able to see this button default as the
78:40 - background for our radio button
78:43 - but what we really would like is to
78:46 - change the background based on the state
78:48 - of the button
78:50 - if the radio button has been selected or
78:52 - in the checked state that means it's
78:54 - having an impact on what is being
78:56 - rendered in the spark view we'd like to
78:57 - show it in a different way compared to
79:00 - in this default way just button default
79:03 - the way you can do this
79:05 - is through something called a state list
79:07 - drawable so we're going to have one more
79:09 - state list which is a selector type and
79:12 - the selector is basically going to
79:14 - tell us whether to use
79:16 - one background resource file or another
79:18 - background resource depending on the
79:20 - state of the underlying widget or radio
79:22 - button in this case
79:24 - so i'm going to define another drawable
79:26 - resource and call this button background
79:31 - and android studio will help us to
79:32 - create a drawable resource file but this
79:34 - time the new element will be a selector
79:37 - and the reason we want this to be a
79:38 - selector is because this
79:40 - button background xml is going to select
79:43 - which
79:43 - background we actually want to apply on
79:45 - the radio button depending on the state
79:49 - we only have really two states we care
79:51 - about for the radio button
79:54 - one which is um the default and so i'm
79:56 - going to put that at the bottom of the
79:58 - file and that's what we already defined
80:00 - button default
80:03 - and then
80:04 - if the button is in
80:06 - the
80:07 - checked state
80:08 - that's the terminology for radio buttons
80:10 - if the
80:11 - state checked is true we want to create
80:14 - another drawable for what the button
80:16 - should look like at that point so i'll
80:17 - say android drawable and this is going
80:19 - to be
80:20 - drawable button checked
80:23 - [Music]
80:24 - let's have android studio help us
80:27 - this is going to also be of type
80:30 - shape it'll be quite similar to our
80:34 - previous button button by default i'm
80:36 - going to copy over everything here
80:39 - the only thing that will be different is
80:40 - we're going to have a solid color
80:42 - background in the case that the radio
80:44 - button has been selected
80:47 - we're going to define this we'll call it
80:49 - color
80:50 - selected background
80:55 - [Music]
80:58 - and let's tap on the red light bulb and
81:00 - create a color value resource so i'm
81:02 - going to put in uh this gray value that
81:05 - i found and then i noticed that i
81:07 - misspelled use android studio to help
81:08 - you refactor this
81:12 - so back in button background let's add
81:14 - the closing tag here and let's try it
81:16 - out
81:19 - so by default we're not really seeing
81:20 - any difference but now when we
81:22 - tap on the radio button you can see that
81:24 - we are swapping out the background to
81:26 - this darker color in the back
81:28 - what we'd also like to do is change the
81:30 - text color
81:31 - so we're going to take a very similar
81:32 - approach for that
81:34 - back in styles xml we're going to define
81:37 - another item which is called
81:40 - text color
81:42 - and this is going to be a color state
81:43 - list resource so i'm going to call this
81:45 - color
81:47 - button text
81:49 - and we're going to create a new color
81:52 - resource file and the root element will
81:54 - be a selector so it's the same concept
81:55 - as a drawable stateless resource we're
81:57 - also going to have color state list
81:59 - resources
82:02 - here by default if the radio button is
82:04 - not selected we're going to go into
82:06 - default case and we're going to pick
82:08 - color selected background
82:11 - so we're going to do the opposite of
82:12 - what we're doing in the case of the
82:14 - button so by default we're going to have
82:15 - the selected background color
82:17 - and otherwise we're going to just use
82:20 - white
82:24 - [Music]
82:26 - the state checked is true then the color
82:29 - becomes white
82:32 - let's try it
82:39 - so i tap on the negative radio button
82:42 - and you can see that we are able to
82:43 - properly swap out the text color to make
82:45 - it white and make the background that
82:47 - gray color so the next step is we'd like
82:49 - to apply the same style to each of the
82:52 - six radio buttons in our app so one
82:54 - approach is we could go back into
82:56 - activity main and then copy over this
82:59 - style line with every single radio
83:01 - button but then in the future if we had
83:03 - other radio buttons we'll have to keep
83:04 - remembering to add this style line
83:07 - instead we're actually going to make
83:08 - this part of the theme so we don't even
83:10 - need to include it in any radio button
83:12 - i'm going to get rid of this line
83:14 - going back into styles.xml
83:16 - this style app theme defines the base
83:20 - application theme and you can customize
83:22 - it here
83:23 - so there is a property called
83:26 - radio button style so i'm going to add
83:28 - one more item which is android radio
83:30 - button style
83:32 - and we're going to reference the
83:34 - custom radio button style
83:36 - let's try it so now if we've done the
83:38 - job correctly all six order buttons
83:41 - should be updated to include this new
83:43 - style
83:44 - there you can see we are we are seeing
83:46 - that which is great
83:48 - welcome to the very last video in the
83:50 - covid tracking project series
83:53 - so i want to start out by just doing a
83:55 - really quick design improvement to
83:57 - align the project that we have here with
84:00 - what i showed you in the demo in the
84:01 - very beginning
84:02 - so
84:03 - i'm going to update the color scheme of
84:05 - the
84:07 - action bar color here and the color
84:09 - shown in this notification window
84:11 - both of these colors are defined in
84:14 - colors xml color primary dark and color
84:17 - primary
84:19 - so the color primary i'm going to
84:20 - actually make it
84:22 - be identical to color selected
84:23 - background
84:25 - and color primary dark i'm going to make
84:28 - it a slightly darker gray and because
84:30 - color selected background is same as
84:32 - color primary i'm actually going to just
84:35 - make this a reference to color primary
84:40 - and one last thing
84:42 - in order to make it pixel perfect with
84:44 - the original demo app if
84:46 - we go into activity main we can add a
84:49 - margin top
84:51 - on the sparkvue of 8dp
84:53 - let's try it
84:56 - awesome so now you can see that we've
84:57 - faded out and made the action bar less
84:59 - noticeable so that the
85:02 - main attraction of our app is the spark
85:05 - view and the metric being shown
85:08 - finally the very last code change we're
85:10 - going to make in this project is
85:11 - updating the text that's shown in the
85:14 - action bar instead of saying covet
85:15 - tracker i wanted to say code 19 cases
85:18 - per day so that the user has an idea of
85:21 - what they're looking at so main activity
85:24 - inside of oncreate right after the set
85:25 - content view we can just say
85:28 - support action bar
85:31 - dot title
85:32 - is equal to and we're going to pass in
85:36 - r dot string dot
85:38 - app description
85:41 - the app description is a string resource
85:43 - that we're going to create
85:45 - the resource value will be covered 19
85:49 - cases per day
85:51 - hit enter support action bar might be
85:53 - null so we're going to wrap that in a
85:55 - question mark
85:56 - and we need to actually get the string
85:58 - value out of the string resource and
86:01 - that's straightforward we just need to
86:02 - say get string and pass in that resource
86:06 - try it
86:08 - all right and now you can see the action
86:09 - bar did get updated properly
86:11 - there are a lot of natural extension
86:13 - ideas for this project
86:15 - for example right now we're only showing
86:17 - us data and u.s states but you
86:20 - might be interested in for example the
86:22 - chronovirus cases in india and that
86:25 - would be a really natural thing that you
86:27 - could build on this app by talking to a
86:29 - different api
86:30 - another thing you might think about is
86:32 - instead of showing the delta per day we
86:34 - might want to see the cumulative data
86:36 - from the first chronovirus case up until
86:39 - today and there's no way to do that now
86:41 - but you might imagine having some sort
86:42 - of toggle and finally
86:44 - we're making a network request every
86:46 - time we open up the app
86:48 - however the data only gets updated once
86:51 - per day and so you can imagine
86:53 - implementing a local database where we
86:55 - cache all the data so you could
86:57 - implement something like a room database
86:59 - in our application store all the data
87:01 - and
87:02 - if you don't have an internet connection
87:04 - or if the api request is unnecessary we
87:07 - can simply grab the data from our
87:09 - database
87:10 - to recap we covered a lot of ground in
87:13 - building out our robinhood style
87:15 - coronavirus tracking app first we used
87:19 - retrofit to talk to the kobit tracking
87:21 - project which is the api which provided
87:23 - all the data for our application
87:26 - next we used two libraries from
87:27 - robinhood in order to build out the core
87:29 - ui of our application first was spark
87:32 - which helped us to graph this spark line
87:35 - chart in our application and showed the
87:39 - growth of chronovirus cases negative
87:41 - positive
87:42 - or debts on a per day basis and the
87:45 - second library was called ticker and
87:47 - that allows us to animate changes in a
87:50 - text view and finally we used another
87:53 - library called nice spinner in order to
87:56 - have a better looking drop down menu a
87:59 - better spinner
88:00 - which shows all the state data and when
88:02 - the user
88:03 - selects a new state we update the ui
88:06 - accordingly
88:08 - if you've been following along and you
88:10 - have your own working version of this
88:12 - chronovirus tracking app i'd love to
88:14 - hear from you in the comments let me
88:16 - know how it went or if you completed any
88:18 - extensions beyond what we built
88:20 - given that google still isn't allowing
88:23 - kobit 19 tracking apps in the play store
88:25 - i really hope that you're able to use
88:27 - this mobile app as a way to
88:30 - track the growth or hopefully the
88:32 - decline of coronavirus over time
88:35 - i'll leave a link to the github
88:37 - repository in the description
88:39 - if you have any questions feel free to
88:41 - let me know and i'll help as much as i
88:42 - can until next time stay safe and i'll
88:45 - see you later
88:46 - bye
88:48 - [Music]