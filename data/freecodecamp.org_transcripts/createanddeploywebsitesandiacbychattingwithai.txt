00:00 - I'm Beau Carnes from freeCodeCamp.org, and in this course, I'm going to show you how
00:04 - you can use AI to make it simpler to deploy infrastructure and websites.
00:10 - When creating and deploying using infrastructure as code, it can sometimes be hard to keep
00:14 - track of all the configuration properties and what functions and commands you need to
00:19 - use.
00:20 - Well, now artificial intelligence can help you with all of those things.
00:24 - I'll be showing you how to use AI tools created by Pulumi.
00:28 - Pulumi provided a grant to make this course possible.
00:31 - First, I'll demonstrate how to create a simple web project so you can quickly grasp the power
00:36 - of these AI tools.
00:38 - Then I'll explain more about infrastructure as code and show you the basics of using Pulumi.
00:43 - After that, I'll demonstrate how it's possible to use Pulumi AI to develop infrastructure,
00:50 - even if you don't know the exact steps yourself.
00:53 - And finally, I'll demonstrate how you can use AI to help you search through all of your
00:58 - infrastructure resources to make it simpler for you to make updates.
01:02 - Okay, let's get started.
01:04 - I'm going to show you how to use the Pulumi AI to quickly spin up an S3 bucket and create
01:11 - a website.
01:12 - I'm just going to be showing a quick example right now.
01:15 - But later in this course, I'll show you some a lot more complicated examples on how to
01:20 - use Pulumi AI for infrastructure as code.
01:24 - But right now I'll just do MPX, Pulumi AI.
01:29 - Now I previously already set up Pulumi on my computer and also attached AWS to Pulumi.
01:37 - I'll have a link to the instructions for how to do that in the description.
01:41 - So now what what do I want to build?
01:43 - Well, I want to build an S3 bucket.
01:47 - And I can just use normal English.
01:49 - It's also connecting to chat GPT or the open AI API to be able to handle plain English.
01:56 - But then it also is able to connect with Pulumi.
02:00 - And I just created a bucket.
02:02 - If I go over to my AWS console, and we see the bucket, it's right in the console now.
02:08 - Okay, now that we have the bucket, let's add something to the bucket.
02:12 - So add an index that HTML file with a simple number guessing game.
02:21 - Okay, now I'm just going to ask what is the URL.
02:35 - Okay, now I can just copy this URL and access denied.
02:40 - It's actually easy enough to fix I can go into my bucket here is just because of the
02:45 - permissions they get set by default to block all public access.
02:49 - So I'll just unblock public access.
02:58 - And then I'll go to index that HTML set the permission of this.
03:04 - And then we'll also go down here and do ACL enabled.
03:16 - Then we can edit this.
03:18 - So we'll have read and list and I figured objects we can make public using
03:34 - ACL.
03:36 - Now you may not have to do all that if you already had it set up beforehand.
03:42 - So depending on how you have AWS set up, Pulumi can just make it public by default.
03:48 - But if you don't have it set up correctly, like I didn't have it set up, you may have
03:51 - to manually make everything public.
03:53 - Okay, let me just go to the website again.
03:55 - Now and this one, it just made it so I don't actually get to have to enter the number I
04:00 - just have to keep cooking try it until we get the right number.
04:04 - Actually I don't think that code is working at all.
04:06 - So let's see if we can update the code, redo the complete number guessing game from scratch.
04:16 - Now you're usually you're not going to be having it code something from this, you'll
04:23 - be having it create infrastructure.
04:26 - But I just wanted to kind of show this example of how we can actually create a code as well.
04:31 - You're just going to experiment with it.
04:33 - If you can actually create a website like this, then you could also have it say, Oh,
04:38 - add styling, and then it can add extra styling to the website.
04:42 - But now let's just move on to something else.
04:44 - In this section, I'll give a brief overview of infrastructure as code.
04:49 - After that, I'll review the basics of Pulumi.
04:51 - And finally, I'll demonstrate how to use AI to simplify and streamline your infrastructure
04:57 - as code.
04:58 - Feel free to skip ahead if you already know the basics of infrastructure as code.
05:02 - So infrastructure as code is the practice of managing and provisioning infrastructure
05:07 - through machine readable definition files, rather than using physical hardware configuration
05:12 - or interactive configuration tools.
05:14 - In the era of cloud computing, infrastructure as code plays a pivotal role in ensuring that
05:21 - infrastructure is consistent, repeatable, and scalable.
05:26 - Traditionally, infrastructure was managed manually with system administrators configuring
05:33 - each server individually.
05:35 - As the scale of operations grew, this approach became inefficient and error prone.
05:41 - The need for automation led to the birth of configuration management tools, and the concept
05:47 - of infrastructure as code.
05:50 - Here's some of the key concepts and principles behind infrastructure as code.
05:55 - The first is idempotence.
05:57 - This means the ability to run the same code multiple times without changing the result
06:03 - after the first run.
06:05 - The next concept is immutability.
06:10 - Infrastructure components are never modified after they're deployed.
06:14 - If changes are needed, new infrastructure is provisioned and old ones are discarded.
06:19 - The final key principle is declarative versus the imperative approach.
06:24 - While a declarative approach specifies the desired end state, like I want a server, an
06:31 - imperative approach specifies the steps to achieve the end state, like create a server,
06:38 - then install software x with infrastructure as code infrastructure changes are made in
06:43 - a systematic, repeatable manner, reducing manual errors.
06:48 - It also allows for version control, ensuring that all team members are working with the
06:53 - same configurations.
06:55 - Some of the popular infrastructure as code tools are terraform, which is a tool that
07:00 - allows users to define infrastructure as code using a declarative configuration language
07:06 - that is a proprietary domain specific language.
07:09 - Ansible is an open source automation tool for configuration management, application
07:14 - deployment and task automation.
07:17 - Graph and puppet are configuration management tools that allow infrastructure to be defined
07:22 - as code and automated.
07:24 - Pulumi is an open source tool that offers the flexibility to use any programming language
07:29 - for managing infrastructure.
07:31 - This makes Pulumi widely accessible to developers and DevOps engineers from any background.
07:36 - And we'll be talking more about Pulumi later.
07:39 - Some of the best practices for infrastructure as code are to modularize configurations to
07:45 - ensure they're reusable, regularly test and validate infrastructure as code scripts to
07:50 - ensure they work as expected, and document configurations for clarity and future reference.
07:57 - Let's just quickly look at a code example for infrastructure as code, we'll be going
08:02 - through code more in detail later, I just wanted you to see that this is how you would
08:06 - use Pulumi to set up EC2 instances in AWS using Python, the line for structures code
08:13 - offers numerous benefits, it's essential to manage secrets securely, ensure infrastructure
08:19 - security and handle potential infrastructure drift, where the actual state diverges from
08:26 - the desired state, infrastructure as code is revolutionizing the way we think about
08:31 - and manage infrastructure.
08:33 - As the tech landscape continues to evolve, adopting infrastructure as code and staying
08:37 - updated with its best practices will be crucial for organizations aiming for efficiency and
08:43 - scalability.
08:44 - Now let's take a deep dive into Pulumi.
08:48 - So what is Pulumi?
08:49 - Pulumi is an infrastructure as code platform designed for developers and cloud engineers
08:54 - who want to use general purpose programming languages to define and manage cloud resources.
09:00 - Unlike traditional infrastructure as code tools that use domain specific languages,
09:04 - Pulumi allows users to leverage popular programming languages, such as go JavaScript or TypeScript,
09:11 - Python, and dotnet platforms.
09:14 - Pulumi works with traditional infrastructure like VMs, networks, and databases, in addition
09:20 - to modern architectures, including containers, Kubernetes clusters, and serverless functions.
09:27 - Pulumi supports dozens of cloud service providers, will be using Python and deploying on AWS,
09:34 - though it can be done with other programming languages and cloud providers.
09:38 - Let's look at the key components of Pulumi.
09:40 - One is provider SDKs.
09:43 - These are installable packages that your program consumes.
09:47 - Pulumi supports over 75 providers with new ones being added regularly.
09:52 - The command line interface is a tool that users can use to run previews and updates
09:58 - on their infrastructure programs.
10:01 - The service back end is the default state storage service for all Pulumi projects.
10:07 - This stores a snapshot of the state of your resources, known as the checkpoint every time
10:13 - you update your cloud resources using Pulumi.
10:16 - So let's look at how Pulumi works.
10:18 - It works by processing the code written in one of the supported languages and generating
10:22 - a graph of the resources that need to be created, updated, or deleted.
10:27 - This graph is then used to calculate the set of CRUD operations required to achieve the
10:31 - desired state of the infrastructure.
10:33 - Here are some of the key features, the component resources.
10:37 - These are resources that encapsulate multiple child resources, allowing users to represent
10:43 - several related resources as a single unit stack references.
10:48 - This feature allows users to create multiple stacks and consume the outputs exported by
10:52 - other upstream stacks.
10:54 - Dynamic providers.
10:55 - This feature serves as an escape hatch for when there's no official provider for a resource.
11:01 - Automation API.
11:02 - This API allows users to programmatically invoke CLI operations, enabling advanced deployment
11:10 - scenarios.
11:12 - Pulumi insights brings intelligence to cloud infrastructure using Pulumi.
11:16 - It includes features like Pulumi AI, which is a generative AI assistant built to create
11:21 - cloud infrastructure using the natural language, and Pulumi resource search, which offers multi
11:26 - cloud search and analytics across every cloud resource and environment and organization.
11:32 - Soon I'll be showing how to use both of these tools.
11:36 - With the introduction of new CLI commands, Pulumi insights is now more accessible to
11:40 - users, allowing them to leverage AI and resource search directly from the terminal.
11:45 - Pulumi's program model starts with the Pulumi project at the outermost layer.
11:52 - However, users don't often interact directly with these projects.
11:56 - They're typically created when initializing a Pulumi program and tend to disappear when
12:02 - the last stack within the project is destroyed.
12:06 - Inside the project, there is a program, which is the main entry point for the program.
12:12 - If you're using TypeScript, this is index.ts.
12:17 - So that would be the program, the main program.
12:19 - This is where we define our infrastructure.
12:22 - The infrastructure is characterized by Pulumi resources.
12:27 - An example of a Pulumi resource is an AWS s3 bucket.
12:32 - Such resources have been have both inputs and outputs.
12:38 - For instance, specifying a bucket's name would be an input, while the buckets Amazon resource
12:43 - name or ARN would be an output.
12:47 - A reoccurring pattern you'll notice in a Pulumi program is how the output of one resource
12:53 - becomes the input for another.
12:55 - If you have an s3 bucket and wish to define a policy for it, the ARN output of the bucket
13:02 - will serve as an input to the bucket policy.
13:06 - Behind the scenes, Pulumi manages the dependencies between these resources, ensuring they are
13:12 - set up or taken down efficiently.
13:15 - It also keeps track of the sequence in which operations need to be executed.
13:20 - In addition to the program, there's also the concept of stacks.
13:25 - A stack is essentially an instance of your Pulumi program, with the added flexibility
13:30 - of supplying different configuration values for different instances.
13:36 - This is useful when you want to have separate setups for development, QA and production
13:42 - environments.
13:43 - For instance, in a development environment, you might opt for fewer or less powerful EC2
13:48 - instances compared to a production environment.
13:52 - This differentiation is achieved using stack configuration.
13:57 - Discussing Pulumi's physical architecture at the foundational level, we have our Pulumi
14:03 - programs.
14:05 - These programs can be written in various languages, such as Python, TypeScript, JavaScript, Go,
14:11 - C sharp, F sharp, and Java.
14:13 - Pulumi also offers support for GAML, mainly for larger organizations transitioning to
14:18 - Pulumi at scale.
14:19 - These options caters to those with traditional operations, with traditional operations experience
14:24 - who might find it more comfortable working with YAML than with standard programming languages.
14:30 - The Pulumi engine interprets your Pulumi program.
14:34 - The Pulumi engine works by comparing your Pulumi programs desired state with the existing
14:39 - state as recorded in your state file, it identifies the discrepancies between the two and determines
14:46 - which resources need to be created, updated or deleted.
14:50 - This process is facilitated through Pulumi providers.
14:54 - For instance, in our example, we mentioned the Pulumi AWS provider and the Kubernetes
15:00 - provider.
15:01 - These providers offer support for a multitude of public clouds, software as a service providers,
15:07 - and other platforms.
15:09 - This vast array of providers ensures that users can leverage Pulumi's declarative approach
15:15 - to manage resources across a broad spectrum of services.
15:20 - Now we'll give a brief example on how to use Pulumi.
15:22 - And then we'll see how to use the AI features.
15:24 - We'll start with a blank directory, and we'll initialize a Pulumi program using the Pulumi
15:29 - new command.
15:31 - Upon executing this command, there's a lot of templates are displayed.
15:36 - There's a bunch, there's 221.
15:38 - And I'm going to just go to the static website, AWS TypeScript.
15:45 - So this is just a TypeScript program to deploy a stack website on AWS.
15:49 - So I'm going to put TypeScript AWS for the project name, default project description
16:00 - default stack name, I'll just use this region, which is actually pretty close to me us West
16:05 - two.
16:07 - And the rest of this will just keep as default.
16:15 - So these prompts are specific to this template, because it set up sets up a static site.
16:21 - Post initialization, the system runs an NPM install, which will be familiar to anyone
16:25 - experience with node.js.
16:28 - Now after installation, our project directly directory reveals several files and folders,
16:34 - we have a node modules folder, where node.js stores dependency, www folder created by the
16:41 - project to house our website files, the git ignore file.
16:45 - But first, let's discuss the Pulumi dot yaml file.
16:51 - This file contains project configuration details.
16:53 - Remember, when we use the Pulumi new command and provide certain inputs, well, those responses
16:58 - are saved in this file.
17:00 - Additionally, we have a Pulumi dot dev dot yaml, which is the stack configuration.
17:06 - We're deploying our static site to different regions, we can create separate stacks with
17:12 - their respective configuration files.
17:15 - So let's move on to the index.ts file, let me move that down here.
17:20 - This is the core of our Pulumi program.
17:24 - It begins with importing libraries, like the the Pulumi SDK, and which allows us to access
17:32 - our values from our configuration file, and also the AWS provider, which it's going to
17:40 - create AWS resources, and a Pulumi component called sync folder to synchronize a folder
17:47 - with our object store.
17:49 - This file also demonstrates the pattern of using the output of one resource as the input
17:56 - of another resource.
17:58 - So I'm not going to go through this file in complete detail, but you can see how it's
18:03 - creating a three bucket.
18:05 - It's configuring the ownership controls, configuring the ACL block, and it's using the sync folder
18:11 - that we talked about, creating a Cloudflip CDN to distribute the the CAS on the website.
18:17 - So this is just the template, and we can basically modify this template, how we want.
18:23 - And then it's just going to export the URL and host name to the bucket and distribution.
18:29 - In this example, and s3 buckets details like its ownership controls might reference another
18:34 - resource.
18:35 - The file this file proceeds to define various resources related to the bucket and set the
18:40 - sync folder to mirror the content of our www folder with the s3 bucket and establishes a
18:46 - cloud front distribution.
18:49 - And then, like we already talked about here, this is when it ends with defining the stack
18:54 - outputs using a standard TypeScript export statement, allowing external access to certain
18:59 - values from our Pulumi program.
19:02 - So to see the see the impact of the configurations, we will use the Pulumi up command.
19:10 - So let me go back to the console here.
19:13 - And we'll do Pulumi up.
19:17 - This stands for update, the command previews the changes before our actual execution, ensuring
19:24 - that we're aware of the actions Pulumi plans to take.
19:32 - So this is where it will confirm whether we want to perform the update.
19:38 - And I'll go to Yes, that is what we want to do.
19:42 - So after we get this all done, we can check the website.
19:46 - So here's the URL.
19:47 - And I'm just going to follow the link.
19:50 - And it works.
19:51 - Hello, Pulumi or Hello World deployed by Pulumi.
19:56 - Let me show you one more thing really quick.
19:58 - Let's see what happens if I make a change.
20:01 - So like for instance, I can go here and I'm going to change the default TTL to 300.
20:08 - And then I'll just save that.
20:10 - And then I'll just do Pulumi up again.
20:14 - And you'll see that it will not recreate every resource.
20:18 - It only makes the update.
20:21 - This is what it means that Pulumi is declarative.
20:24 - I'll say do you want to perform the update?
20:27 - You just say your desired state and Pulumi will figure out what needs to be updated.
20:32 - And then finally, we can use the Pulumi
20:37 - destroy if I can spell it right, destroy command to tear down the resources.
20:46 - That way we won't incur any more charges.
20:50 - So yes, I do want to destroy this.
20:53 - And that will just bleed everything off of AWS.
20:58 - So if I just go back to the page and refresh, there's nothing there, we get the 403 forbidden.
21:05 - So now I'm going to go to a different page, Pulumi.com slash AI.
21:11 - We're going to talk about Pulumi AI.
21:14 - Pulumi AI is accessible at Pulumi.com slash AI.
21:18 - It's free for everyone to use.
21:21 - Within the Pulumi ecosystem, there are over 130 providers.
21:25 - Some of these providers like AWS offer more than 1000 resources.
21:30 - On average, each of these resources might have around 30 configuration properties.
21:36 - Given the vast number of potential configurations, it can sometimes be challenging to set everything
21:40 - up perfectly.
21:42 - This is where Pulumi AI proves useful.
21:49 - So to demonstrate, I'll just put a basic prompt here, I'm going to say show me how to run
22:00 - nginx as an ECS for gate task in the default VPC.
22:14 - So this is a natural language prompt.
22:20 - And you see, I just I chose TypeScript as the preferred language, but I could have chosen
22:23 - a different language.
22:29 - And you can see it's just generating the program.
22:33 - It took a minute to process.
22:36 - You can see often begins the response by echoing the initial prompt or question that creates
22:45 - an internal feedback loop, which enhances the quality of the solution provided.
22:50 - And we can see everything that it suggests, like using the ECS cluster, it creates an
22:55 - ECS task definition.
22:58 - And that creates a Fargate service.
23:01 - And it basically goes through and does what we asked it to do.
23:06 - And then it basically summarizes what it's going to do.
23:10 - And then it just gives you some some different things that you can change, you can place
23:13 - nginx latest with any Docker image of your choice, it's been in your own AWS account,
23:20 - and then just kind of explains it even more.
23:22 - So we can just copy this.
23:24 - And then I can put it right into here.
23:28 - And then you can see there are some some squiggly lines here.
23:33 - So this is an iterative process.
23:37 - Basically it's not uncommon to encounter some errors.
23:40 - And these tools while powerful might not always yield perfect results.
23:45 - So users should expect some degree of iteration and refinement.
23:50 - So I can look right here says property quick.
23:54 - So I can actually just copy this.
24:08 - And I will bring in here, I'll say error, and I'll just paste in the error.
24:15 - And now it's going to fix it for me, it's going to update it.
24:20 - And it realize it realizes that in more recent versions of plume, the test definition should
24:25 - be created differently.
24:29 - Okay, so now let's copy this updated code upside did not copy it right.
24:45 - Let's try it again.
24:46 - Click that copy button.
24:51 - Okay, so now we don't have the red squiggle lines there.
24:57 - And you can see we can just go through that with all of it and just telling it what's
25:02 - wrong and having it fix having it fix the error.
25:07 - So basically, we can go back and forth it like I said, it's an iterative process.
25:12 - And while it may not produce flawless results on the first try, they can provide an excellent
25:17 - starting point, often around 80% accurate, which significantly reduces the time and effort
25:24 - required.
25:25 - These tools are especially beneficial when tasked with recalling specific configurations
25:30 - or procedures that aren't routinely used.
25:34 - For example, if one needs to draft an IAM policy to access a secret, but doesn't remember
25:38 - the exact steps, tools like plume AI can provide a quick and accurate solution.
25:45 - Plume AI is a powerful tool that can significantly expedite the learning and applications of
25:52 - coding tasks.
25:54 - So now let's try a more complex example.
25:59 - And then we'll follow through to creating the actual resources here, here, we're not
26:04 - going to actually run this program, but this next one, we will.
26:07 - So let me go over here, and I'm just going to create a new conversation by just going
26:12 - to plume.com slash AI again.
26:18 - So now I want to create a serverless function chain.
26:22 - Basically, I want to deploy a series of serverless functions that trigger each other in a specific
26:29 - order.
26:30 - Basically, AWS lambda functions that trigger another lambda function and so on.
26:36 - So the kind of architecture I'm looking to create is ideal for sequential tasks, where
26:41 - one processes outcome determines the subsequent processes input.
26:46 - Now we're just going to do a very simple function change, it wouldn't be like it's not going
26:52 - to be like a real world situation.
26:55 - But I can give you an example of what you can do with plume AI function chains are what's
27:01 - sometimes called function pipelines or sequences, can streamline multi step processes by allowing
27:06 - the output of one function to serve as input to the next, some some like real applications
27:13 - that if they're used for would be an e comms order processing, where stages like order
27:18 - validation payment and inventory updates occur sequentially, and data data analytics, where
27:25 - raw data undergo stages of cleansing transformation and analysis.
27:30 - Also maybe like user registration workflows, document approval systems, financial transaction
27:37 - monitoring.
27:38 - So when you have a modular workflow, it can offer flexibility, scalability and ease of
27:43 - troubleshooting as each function can be just individually managed and optimized.
27:49 - So like I said, artists, this could be a simple function chain, the first function will check
27:54 - the character count.
27:56 - If the character comes correct, the second function will be triggered, which in the second
28:01 - function will turn all the characters to capital letters and trigger the third function, which
28:05 - will save the text submission.
28:07 - So the truth is, I don't even even though it's simple, I don't personally fully know
28:13 - how to do this.
28:15 - So we're going to use plume AI to help us.
28:18 - Okay, so let's see if let's just try this and see if we can figure this out.
28:23 - So I'll say, help me create a lamp and AWS lambda function chain that processes text.
28:41 - The first function will check character count, if the character count is more than 50 and
28:57 - less than 1000, then the second function is triggered.
29:12 - The second function will turn the characters to capital letters and trigger the third function.
29:33 - The final function will save the text on AWS.
29:42 - Okay, let's just see what it can figure out from this instruction.
29:48 - Okay, it's creating a chain of AWS lambda functions that can describe text processing
29:57 - operations, checking the length of the string, transforming the text and saving the result
30:00 - to an S3 bucket.
30:02 - So it's going to even develop the program structure create three AWS lambda functions.
30:10 - Each function is written in JW and embed directly in the plume program.
30:13 - So we don't have to store them elsewhere, create an API gateway to serve as a trigger
30:17 - to start the lambda function chaining upon request the API gateway, the first lambda
30:22 - execute to check the length of input text, things advocate, the link circuit invokes
30:26 - a capitalizer function that converts the characters to uppercase and the capitalizer function,
30:32 - invokes the saver function that saves a modified text on S3 bucket, then the final URL to trigger
30:38 - the workflow is exported.
30:40 - Okay, so that's exactly what we wanted.
30:42 - So let's see what it came up with.
30:46 - So we have the link checker lambda, and it's going to create that.
30:52 - You can see it's checking for the length of the use of the 50 and the 1000, just like
30:57 - we said, and then it's going to invoke the capitalized it's going to invoke the capitalizer
31:07 - function.
31:09 - So let's see the capitalizer the capitalizer lambda function.
31:14 - It's going to do the two uppercase, there's gonna invoke the saver function.
31:22 - The saver function is going to save to an S3 bucket, it may not work exactly right at
31:30 - the first try.
31:31 - But let's just check that and copy the code.
31:39 - I'm just going to paste it right in here.
31:42 - And then just try to figure out what the errors are.
31:46 - So I can actually just copy this error here.
31:54 - And it says the argument of type runtime is not assignable to a parameter of type function
31:59 - args.
32:00 - Okay, so let's just copy this error.
32:03 - And then we're going to go back over here.
32:05 - And I'll paste it in.
32:13 - So let's see what it figures out.
32:18 - It knows that we need the role properties specify the IM role.
32:24 - And the AWS lambda assumes when it executes your function, let's add a new IM role for
32:28 - each of your lambda functions.
32:30 - And that sets up the IM permissions.
32:34 - Okay, we may have to do some more permissions, change the permissions within AWS as well.
32:40 - But let's try this.
32:43 - Okay, so now it's not, we don't have as many red squiggly lines.
32:48 - So oh, okay.
32:51 - We Okay, I see there's something wrong here, because it's assuming it says the rest of
32:57 - your lambda configuration here.
33:02 - So I'm going to go back here.
33:09 - Then you output the full code that I need.
33:18 - And then I'll say
33:24 - do not just say
33:31 - actually put the config the config.
33:38 - Now we could probably I think I just need to combine these two codes together, which
33:41 - I could do manually.
33:43 - But I'm going to see if it can do that.
33:46 - I'm going to skip a little of the back and forth.
33:48 - So you can see the result.
33:50 - This is an iterative process to get to the correct code.
33:53 - And I came into this knowing very little about how to implement this project.
33:58 - It was so much quicker using Pulumi AI.
34:01 - Okay, so we have the URL here 123.
34:04 - My name is Bo.
34:05 - My name is Bo.
34:06 - And let's see if it works.
34:11 - Okay, we got the link here.
34:18 - But let's see if the capitalized words are now stored in our s3 bucket.
34:26 - Okay, here's our bucket and file at txt.
34:31 - Let's download it.
34:34 - And it worked.
34:35 - See I just added that 123 and all the letters are in capital letters.
34:42 - We did it.
34:44 - We made a function chain from one to the other to the other.
34:50 - And again, I had never done anything like this before.
34:53 - But I was able to use Pulumi AI to figure it out.
34:58 - This is awesome.
35:00 - And now I feel so much more empowered to be able to create basically any sort of infrastructure
35:08 - as code.
35:10 - Now that I have Pulumi AI to help out.
35:13 - Now let's see how we can search through our infrastructure resources and how AI can make
35:18 - the process easier.
35:21 - So after you've created tons of stacks and resources, it can become it can become challenging
35:26 - to manage and keep track of them all.
35:29 - So let me show you how that can become easier.
35:32 - Well, here's the Pulumi cloud dashboard.
35:36 - And you can see it's going to show me members are in the organization, you usually have
35:41 - more than one number of stacks, and then the number of resources for big organizations,
35:47 - the number of resources can be 1000s or even hundreds of 1000s of resources, which can
35:53 - lead users to question the relevance of these resources or what the origin is, or whether
35:58 - you need to clean some of them up.
36:00 - So we can use the resource, the resource search feature.
36:06 - When you're managing a large organization with many individuals working on various stacks,
36:10 - the research, the resource search feature is invaluable.
36:15 - When you're on this, this main dashboard, you can see the overview I was talking about,
36:20 - you can even see like when the last stack was updated.
36:23 - But if I click on resources, then we can search through all the resources.
36:30 - So you can see it just has a list of all the resources on every stack.
36:36 - And there's just a bunch of them.
36:38 - And I can just search for things, like I can search for API, and then it will show everything
36:47 - that has the has API in it, or I could search for
36:56 - Kubernetes just brings up one thing that's related to Kubernetes here.
37:01 - And you can search for things by name, kept tall wiser.
37:09 - And we can see all the functions that have all the resources that have the word capitalizer.
37:14 - We also have the advanced filtering.
37:18 - This provides aggregate information about resources, we can search by various criteria,
37:25 - like I can do everything that has to do with AWS, or this will make it look a little better.
37:33 - I can do everything that has flu providers AWS.
37:38 - So that's the type.
37:39 - And then I can say all that type in this project.
37:43 - And so I can further narrow down based on the type, the packages, projects, or the stacks,
37:49 - and you may have a lot more depending on how many resources you have.
37:54 - So the search function is very, is very versatile.
37:59 - I'll just look for all the lambda functions.
38:05 - So the powerful search syntax allows you users to make very complex queries.
38:11 - But there's also an integrated AI assistance.
38:15 - If I click here, I can switch using Pulumi AI.
38:20 - And this can help users craft queries, which makes the search process even more user friendly.
38:27 - So I can say something like all my s three buckets.
38:33 - And then you can just tell things using just a conversational English.
38:39 - Or I can say something like, which are part of my lamb, the function chain.
38:55 - And it seems to get quite a lot, frankly, I don't even know how it knows that these
39:01 - are part of the Lambda function chain, but it seems like it got a lot of them.
39:07 - On the user interface, there's also a robust API for those who wish to build automation
39:12 - and tools around the Stata.
39:14 - The system also understands user permissions.
39:17 - So as an organization admin, I can view all the resources.
39:21 - But for larger organizations with specific permission requirements, users will only see
39:26 - resources they have access to.
39:29 - This ensures security and privacy while still providing valuable insights.
39:34 - So all these tools help provide users a comprehensive and manual view of their Pulumi resources.
39:41 - Also if you have your own data warehouse and business intelligence tools, you can integrate
39:47 - data with Pulumi tools with your existing data solutions.
39:51 - Okay, we've reached the end of the course, you should now be able to start using AI to
39:56 - create infrastructure more easily.
39:59 - Thanks for watching.