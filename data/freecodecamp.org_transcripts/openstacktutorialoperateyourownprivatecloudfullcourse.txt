00:00 - hi i'm beau carnes with freecodcamp.org
00:03 - in this course i will be teaching you
00:04 - the basics of openstack and how to use
00:07 - it openstack is an open source software
00:10 - that provides cloud infrastructure for
00:12 - virtual machines bare metal and
00:14 - containers to follow along with this
00:16 - course it can be helpful to have a basic
00:19 - understanding of the linux command line
00:21 - networking and virtualization but none
00:24 - of that is required by the end of this
00:26 - course you will have a core
00:28 - understanding of what openstack is and
00:30 - you will know the basics of setting up
00:33 - and administering openstack using the
00:36 - openmetal platform
00:38 - you'll also understand some commonly
00:39 - used openstack services
00:41 - so let's talk more about what openstack
00:44 - actually is openstack is an open source
00:47 - cloud computing platform that is used by
00:49 - organizations to manage and control
00:52 - large-scale deployments of virtual
00:54 - machines such as in a cloud computing or
00:56 - virtual private server environment
00:59 - openstack is a popular choice for
01:01 - organizations because it's scalable
01:03 - reliable and provides a high degree of
01:05 - control over the underlying
01:07 - infrastructure besides being used to
01:09 - manage deployments of virtual machines
01:11 - openstack can also be used to manage
01:13 - storage and networking resources in a
01:15 - cloud environment in some ways openstack
01:18 - can be compared to aws but here are some
01:21 - key differences between the two
01:23 - openstack is an open source platform
01:26 - while aws is a proprietary platform
01:29 - openstack offers more flexibility and
01:31 - customization options than aws openstack
01:34 - typically requires more technical
01:36 - expertise to set up and manage than aws
01:40 - since you basically have to set up
01:42 - everything yourself in the past
01:44 - beginners had trouble getting into
01:45 - openstack due to its complexity and
01:48 - difficulty in being set up for smaller
01:50 - teams
01:51 - but new technology has come out to make
01:53 - openstack available as a service which
01:56 - opens up the door to this super powerful
01:58 - open source cloud system this video can
02:01 - be followed by beginner admins but
02:03 - infrastructure focused people like
02:05 - devops and system teams should find this
02:07 - very valuable
02:09 - let's go into more detail about what
02:11 - openstack offers beyond standard
02:13 - infrastructure as a service
02:15 - functionality additional components
02:17 - provide orchestration fault and service
02:20 - management and other services to ensure
02:22 - high availability of user applications
02:25 - openstack is broke up into services to
02:29 - allow you to plug and play components
02:31 - depending on your needs
02:34 - this openstack map shows common services
02:37 - and how they all fit together
02:39 - i'm not going to cover every service
02:40 - here but let me tell you what some of
02:43 - the more common openstack services do
02:47 - openstack object storage or swift is a
02:51 - highly scalable distributed object
02:53 - storage system openstack block storage
02:56 - called sender is a service for managing
02:59 - block storage devices
03:01 - openstack compute called nova is a cloud
03:04 - computing fabric controller which
03:06 - manages the allocation of compute
03:08 - resources
03:10 - openstack networking called neutron is a
03:13 - system for managing networks and ip
03:16 - addresses
03:17 - the openstack dashboard which is called
03:19 - horizon is a web-based interface for
03:22 - managing openstack resources openstack
03:25 - identity called keystone
03:27 - is a system for managing user accounts
03:29 - and access control openstack image
03:33 - called glance is a service for storing
03:36 - and retrieving virtual machine images
03:38 - openstack bare metal called ironic is a
03:41 - service for provisioning and managing
03:44 - air metal servers so those are some of
03:46 - the more common services and we'll be
03:49 - demonstrating some of them later in this
03:51 - course
03:52 - there are a bunch of different ways to
03:54 - deploy and configure openstack based on
03:56 - the needs of your application or
03:58 - organization
03:59 - so we're about to learn how to get
04:00 - started with openstack and use many of
04:03 - the most common features
04:05 - one of the easiest ways to get started
04:07 - with openstack is by using the openmetal
04:10 - on-demand private cloud this allows us
04:13 - to quickly deploy openstack to the cloud
04:15 - and simplifies the setup process
04:18 - openmetal provided a grant that made
04:20 - this course possible while we'll be
04:22 - using openmetal to learn about openstack
04:25 - the material covered in this course
04:27 - applies to any openstack deployment not
04:30 - just ones that use openmetal so no
04:32 - matter how you want to use openstack
04:34 - this course is for you and feel free to
04:37 - leave a comment with anything that
04:38 - you're learning or any questions you
04:40 - have about this content
04:42 - so let's look at how to set up openstack
04:44 - on openmetal
04:46 - to get openstack set up you need to
04:48 - provision and set up your cloud on
04:50 - openmetal
04:51 - we'll just follow the prompts on this
04:53 - openmetal central page to get everything
04:55 - set up
04:58 - during the setup process you're going to
05:00 - have to enter a public ssh key
05:04 - later when we went to ssh into one of
05:07 - the cloud servers
05:08 - the public private key pair will
05:11 - basically act as our password or our
05:13 - login information to ssh into the server
05:18 - so to get a public ssh key there's a few
05:21 - different ways but the most common way
05:23 - is to go over to your terminal or your
05:26 - command line
05:28 - now this is going to work pretty similar
05:30 - whether you're on windows mac or linux
05:34 - there is a program called
05:36 - ssh key gen
05:38 - so if you just type in ssh key gen
05:41 - it will generate a public private key
05:44 - pair
05:45 - now you
05:46 - may have to install the ssh key gen
05:49 - program on your computer but also it may
05:52 - already be automatically installed
05:54 - so i'm not going to go through the whole
05:57 - generation prompts because i've already
06:00 - generated it so
06:01 - once you've generated it you're going to
06:04 - have to get access to the private key
06:06 - that you generated so i'm just going to
06:09 - cd into the change directory into the my
06:12 - ssh folder and again this is the same on
06:15 - windows or mac or linux now if i list
06:18 - everything in here we can see all the
06:20 - the keys now i've already renamed my
06:23 - private key to have the
06:25 - extension.pem yours may not have that
06:27 - extension but it doesn't matter whether
06:30 - what the extension is and right now
06:32 - we're trying to get the public key
06:33 - anyways so we're going to just have to
06:36 - open up this
06:37 - file with the public key
06:39 - now depending on your system you may be
06:42 - able to use vim or some other text
06:44 - editor to open up this public key i'm
06:46 - just going to use vim on my system
06:48 - and open up the public key and then i
06:52 - can copy this public key if i go back
06:55 - over to my web browser i'll just paste
06:57 - it in to load it up and then i'll just
07:00 - finish setting everything up here
07:04 - openmetal private clouds are deployed
07:06 - with openstack to three bare metal
07:08 - servers
07:09 - these three servers comprise the private
07:11 - cloud core to open stack these three
07:14 - servers are considered the control plane
07:17 - private clouds are deployed with ceph
07:19 - providing your cloud with shared storage
07:22 - ceph is an open source software defined
07:24 - storage solution and we'll be going into
07:27 - more detail about ceph later in this
07:29 - course now let's view the hardware
07:31 - assets that were created on openmetal so
07:34 - if you just created a cloud you may
07:36 - already be on the cloud management page
07:39 - if not if you're not on this cloud
07:41 - management page you may be on this page
07:43 - and you just have to click manage
07:46 - now let's click assets on the left side
07:49 - menu
07:50 - this page contains a list of assets
07:52 - included with your private cloud
07:54 - deployment these include your hardware
07:57 - control plane nodes and ip blocks for
08:00 - inventory and also the provider ip
08:03 - address blocks
08:05 - the private cloud can have different
08:06 - hardware based on the options you
08:08 - selected in your deployment so if you're
08:10 - following along you selected the same
08:12 - things as me it should look pretty
08:14 - similar to this so these up here these
08:17 - things these three here these are three
08:20 - cloud core
08:22 - mb small v1 control plane nodes
08:25 - and then the inventory i p address
08:27 - blocks and the provider i p address
08:29 - blocks with these private clouds
08:31 - openstack is deployed with three
08:33 - hyper-converged control plane nodes
08:37 - now let's see how to access these
08:39 - control pane plane nodes so these are
08:41 - the nodes and you can access these
08:43 - control plane nodes directly through ssh
08:46 - as the root user if we go back over to
08:49 - the my cloud page it gives you some
08:52 - instructions on how to access so if we
08:55 - go to these this access things you can
08:57 - see
08:58 - it gives you instructions you can see it
08:59 - says two one seven two one just i wanna
09:02 - show you that that's the same ip address
09:05 - as the first one here two one seven two
09:07 - one so when you're accessing
09:09 - your your cloud you should generally
09:12 - access just the first one at one of
09:14 - these cloud course malls so let's go
09:17 - back over here and it's gonna show us
09:19 - what we need to do to
09:21 - access our cloud
09:23 - so we can access through the ssh key we
09:25 - provided during the private cloud
09:28 - deployment
09:29 - so we're just going to use
09:31 - this command here
09:34 - you will obviously have to change the
09:36 - key name and ip to match your
09:38 - information but let me just copy this
09:41 - and i'm going to go over to my
09:45 - terminal
09:47 - okay i'm in the terminal and you can see
09:49 - here is the ssh command it's not the
09:51 - exact same as the one we just copied
09:54 - because i've updated it to have the file
09:57 - name of my ssh key now yours may not say
10:01 - dot p e m on the end you may just be
10:03 - doing id slash rsa or underscore rsa
10:07 - that's the most common way to do it so
10:08 - this is basically the password to log in
10:12 - to our node so i'm just going to hit
10:14 - enter here
10:15 - and insert the pass key
10:19 - okay
10:20 - we are logged in here
10:22 - so we're logged in as a root
10:25 - now if we go back to this page we can
10:27 - see that the end goal isn't just to ssh
10:31 - into our node we are actually trying to
10:33 - get into the openstack dashboard
10:37 - horizon is the name of the default
10:39 - openstack dashboard which provides a
10:42 - web-based user interface to openstack
10:45 - services
10:46 - it allows the users to it allows a user
10:49 - to manage the cloud through a graphical
10:51 - interface
10:53 - so to access the new cloud's openstack
10:56 - dashboard which is called horizon
10:58 - we'll need to first obtain the horizons
11:01 - administrator password the username by
11:04 - default is admin and this is showing
11:06 - right here what we need to do to get the
11:09 - password to log in so after we log into
11:12 - this node which we have done on our
11:14 - terminal i'm going to copy this command
11:17 - here
11:18 - so basically this command is going to
11:21 - display our password on our command line
11:24 - so let's go back over to our terminal
11:26 - and just paste in that command there
11:28 - and now we have the keystone admin
11:31 - password
11:33 - so i'm just going to copy this password
11:35 - here
11:37 - and then if you go here it shows you
11:38 - that we're going to get the keystone
11:40 - admin password now that we have the
11:43 - password we can launch horizon on open
11:46 - metal you can click the horizon tab on
11:49 - the left menu so you can see down here
11:51 - i'm going to click horizon it's opening
11:53 - into a new tab
11:54 - and so i just opened to a new tab let me
11:57 - zoom in a little quick a little bit here
11:59 - and i'm going to use the username
12:02 - admin
12:03 - and then i'm just going to paste in the
12:05 - password i just copied from the terminal
12:07 - i'll click sign in
12:09 - okay we're signed in to
12:11 - open to horizon and it's the openstack
12:14 - dashboard
12:16 - now this is going to look pretty similar
12:19 - no matter where you're hosting your
12:21 - openstack so
12:23 - we're using open metal but there's
12:25 - plenty of other ways to host openstack
12:28 - and
12:29 - everything on horizon is going to be
12:30 - basically the same no matter where
12:32 - you're hosting
12:34 - so the first thing we're going to learn
12:35 - to do
12:36 - is to create a project in openstack the
12:40 - cloud is divided through the use of
12:41 - projects
12:42 - projects have associated with them users
12:45 - who have differing levels of access
12:47 - defined by roles an administrator
12:49 - defines resource limits per project by
12:52 - modifying quotas so let's learn how to
12:55 - create a project and associate a user
12:57 - with it and we'll learn how to how
13:00 - project quotas can be adjusted and like
13:02 - i said this interface will be similar no
13:05 - matter where you deploy openstack
13:07 - so there are three root level tabs let
13:10 - me close so you can see we have the
13:12 - project tab the admin tab and the
13:15 - identity tab
13:17 - only users with the with administrative
13:19 - privileges can see the admin tab so some
13:21 - people may just see project and identity
13:24 - so to create your first project let's go
13:26 - to identity and then projects
13:31 - so you'll see that several projects
13:33 - already exist including the admin
13:36 - project
13:37 - that's right here so these projects are
13:39 - deployed by default and generally should
13:42 - not be modified but we want to create a
13:44 - new project so i'm just going to create
13:47 - or click the create new project button
13:49 - right here
13:51 - and then we just have to fill in some
13:53 - information
13:55 - i'm just going to call this
13:57 - deploy development
14:00 - and you can see it's already giving me a
14:01 - suggestion because i've tried this
14:03 - before
14:04 - so a description will just put
14:06 - development
14:08 - project
14:10 - and you can basically use any name or
14:12 - description
14:13 - that you want so you can also add
14:15 - project members or project groups but
14:18 - we're not going to cover that just yet
14:20 - right now i'm just going to create the
14:22 - project
14:23 - and
14:24 - finish creating the first project so
14:26 - create new project development and then
14:28 - you can see it right here so once
14:30 - created the project appears right in
14:32 - this page
14:35 - now while in this project listing page
14:38 - you can view and adjust quotas for this
14:40 - project as the admin user
14:43 - quotas are limits on resources like the
14:45 - number of instances so to view the
14:47 - quotas for this project
14:49 - um we're in the identity projects tab
14:51 - still
14:52 - so now we are going to go to this drop
14:54 - down on the right so we have our project
14:56 - we just developed and then i'm going to
14:58 - click this drop down and go to
15:01 - modify
15:02 - quotas and these are all the default
15:05 - quota values
15:06 - so quartz also exists for the
15:09 - the volume
15:10 - and the network and if you set a value
15:14 - to negative one that means the quota is
15:17 - unlimited
15:19 - we're just going to use all the default
15:21 - values but it's good to know where to go
15:23 - if you want to change these in the
15:24 - future so i'll just click cancel we're
15:26 - not going to save this
15:28 - and now we're going to discuss how to
15:31 - create a user and associate that user
15:34 - with a project so we have the project
15:37 - and we're going to associate a user so
15:39 - there's already the default admin user
15:42 - but now let's create a new user and log
15:45 - in with that user
15:47 - so first we will go to identity
15:50 - users
15:51 - and this only works when you're logged
15:54 - in as admin or a user that has admin
15:57 - privileges so i'm going to
16:00 - um well well first of all you can see
16:02 - that there's several users that already
16:04 - listed and this is expected these are
16:07 - created during the cloud deployment and
16:09 - they generally should not be modified so
16:11 - to create a new user we'll just click
16:14 - create user
16:15 - and then we can just
16:18 - create we'll just put in a username
16:20 - password
16:21 - primary
16:22 - and then we'll just fill in all this
16:23 - information so username i'll put bo
16:28 - you can see description is uh
16:31 - optional and for user name i'll just put
16:34 - boa freecodecamp.org
16:36 - i'll put in my super secret password
16:39 - [Music]
16:41 - and then i will select a project
16:44 - so i'm just going to select
16:46 - development the project that we just
16:48 - created
16:49 - and then if we click the drop down on
16:51 - roll
16:52 - you can see there are several different
16:54 - options and which obviously depend you
16:57 - choose different roles depending on the
16:58 - level of access required the default
17:01 - open stack roles are this reader member
17:05 - and
17:06 - admin
17:07 - so the reader is the
17:10 - the least authoritative role in the
17:12 - hierarchy
17:13 - and for this example we will choose
17:16 - member which is kind of like the middle
17:18 - middle authority role
17:22 - and then i'll just click create user
17:26 - okay next we're going to log out of
17:28 - horizon i'm going to click this drop
17:29 - down and go to sign out
17:31 - and i'm just going to log in with the
17:33 - new user bo and then i'll put in the
17:36 - password
17:37 - and click sign in
17:39 - okay we're logged in with the new user
17:42 - upon logging back in
17:44 - where the we're by default in the newly
17:46 - created project you can see the project
17:49 - we're currently on as you can see it
17:50 - says development this is the project
17:52 - there's only one available because we've
17:54 - only created one project
17:57 - now let's talk about managing and
17:59 - creating images
18:01 - we'll learn how to upload an image not
18:03 - not a graphical image but an image as in
18:06 - a copy of a linux installation so we'll
18:08 - learn how to upload an image onto
18:10 - openstack as well as create images out
18:13 - of an
18:14 - out of an existing instance
18:16 - images contain a bootable operating
18:18 - system that is used to create instances
18:20 - you'll see that within openmiddle cloud
18:22 - there are several different images that
18:24 - are already available including os
18:26 - debian fedora and ubuntu in addition to
18:29 - this you have the option to upload
18:30 - images from other sources or create your
18:33 - own images we'll learn how to upload
18:34 - images to glance through horizon and how
18:37 - to create an image from an instant
18:39 - snapshot
18:40 - glance is a tool for managing instances
18:44 - that allows users to discover retrieve
18:46 - and regis register virtual machine
18:48 - images and container images glance uses
18:51 - ceph to store images instead of the
18:53 - local file system to access images
18:56 - within your horizon dashboard we'll
18:58 - navigate to
19:00 - the projects tab which we're already on
19:02 - here
19:03 - and then we'll go to compute
19:06 - and then we will go to
19:08 - images so this tab includes a list of
19:11 - all the images installed on openstack
19:14 - the images you see have been pre-loaded
19:16 - by open metal like i said there's
19:17 - already some that you can install now
19:20 - these are these images aren't deployed
19:24 - or anything yet they're just images you
19:26 - can use if you want
19:29 - so let's see how to upload your own
19:31 - image if we we can do that by clicking
19:34 - the create
19:36 - image button
19:38 - when creating an image you must choose
19:39 - the format of the image
19:42 - so before we start filling this all out
19:44 - we are going to need an image source
19:46 - we're going to need a file here
19:49 - so i'm going to if you want to follow
19:51 - along i'm going to leave a link in the
19:52 - description to a sir os image that you
19:56 - can use
19:59 - i already have it downloaded so i'll be
20:00 - able to select that file when we're
20:02 - filling this out
20:04 - so we're going to fill in the name sir
20:07 - os
20:08 - and then a description a ser os image
20:11 - and then i'm going to browse to find the
20:13 - image source
20:14 - okay i'll select that for the format i'm
20:17 - going to choose this qco2 dash i think
20:20 - it's chemo
20:22 - qemu emulator
20:24 - with our configuration the this is the
20:26 - recommended format qcal 2 is the most
20:29 - common format for linux kvm
20:31 - it expands dynamic qco2 is the most
20:36 - common format for linux for linux kvm
20:38 - and it expands dynamically and supports
20:41 - copy on write which is all useful for
20:43 - what we're doing
20:44 - so i'm going to select that
20:47 - and then i will just keep all these the
20:49 - default settings and i'll cr click
20:52 - create image
20:55 - now it could take some time to complete
20:57 - uploading the image
20:59 - but now we're done we can actually use
21:02 - this image
21:04 - so next we are going to create an
21:06 - instance in openstack horizon
21:09 - instances or virtual machines play allow
21:12 - a large role in a cloud's workload
21:14 - openstack provides a way to create and
21:16 - manage instances with its compute
21:18 - service called nova
21:21 - nova is the openstack project that
21:23 - provides a way to provision compute
21:25 - instances aka virtual machines novus
21:28 - supports creating virtual machines bare
21:30 - metal servers and has limited support
21:33 - for system containers nova runs as a set
21:36 - of daemons on top of existing linux
21:39 - servers to provide that service
21:41 - so let's see how to create an instance
21:43 - and we're also going to create a private
21:45 - network and router create a security
21:47 - group and see how to add an ssh key pair
21:52 - the first thing we'll do is learn how to
21:54 - create a private network and router and
21:57 - then later we'll create an instance on
21:59 - this private network
22:01 - so we're going to go to the project
22:04 - and network
22:06 - and
22:07 - networks
22:08 - so we're just about to create a network
22:10 - but later we're going to create a router
22:12 - the router is created so the private
22:14 - network can be connected to your cloud's
22:16 - public network allowing you to assign a
22:18 - floating ip address to it making the
22:20 - instance accessible over the internet
22:24 - but let's create a network by clicking
22:26 - the create network button
22:28 - so you can basically call anything you
22:30 - want we're going to use the name private
22:35 - and then
22:37 - we can we'll just
22:39 - leave all this set to the default
22:41 - options and before and now we're going
22:43 - to go to the subnet tab here
22:47 - and here we are going to first we're
22:49 - going to create a name for our subnet
22:51 - and we'll just use private
22:53 - subnet
22:54 - and then the network address
22:57 - we have to select the private network
22:59 - range so for this example just do
23:03 - uh 192.168.0.1
23:07 - 24
23:08 - and then we'll leave this as ipv4
23:12 - and then the gateway ip is optional if
23:16 - unset a gateway ip is selected
23:18 - automatically so we'll just keep it
23:20 - we'll just have it set automatically and
23:22 - we're not going to disable
23:24 - the gateway
23:26 - and for the subnet details uh we'll just
23:30 - we're not going to
23:31 - change anything we're just going to keep
23:32 - the default values here
23:34 - then i'll click create
23:38 - and then once it's created it will
23:40 - appear
23:42 - on this list here
23:44 - okay we next need to create a router to
23:46 - bridge the connections between the
23:48 - private network and the public network
23:51 - the public network is already here it's
23:52 - called external so to create a router
23:55 - let's go to
23:57 - the projects and network and then
24:00 - routers
24:02 - and then you may be able to guess we're
24:04 - just going to click create router
24:07 - okay we'll set a name i'm just going to
24:09 - call this router
24:11 - and
24:12 - we'll leave most of this to the default
24:15 - values for selecting the network we're
24:17 - going to choose the one we created
24:19 - external
24:20 - and then we're just going to click
24:22 - create router
24:26 - okay next we're going to connect the
24:28 - router to the private network by
24:31 - attaching an interface
24:33 - performing this step allows network
24:35 - communication between the private and
24:37 - external networks
24:39 - to attach an interface to the router
24:41 - first we'll navigate to the list of
24:43 - routers and select the one previously
24:46 - created so we're actually already on the
24:48 - list of routers
24:50 - so i'm going to click the router
24:55 - and then i'm going to go to the
24:57 - interfaces tab
24:59 - and then i'm going to click
25:00 - add interface okay for subnet we are
25:04 - going to choose the the private subnet
25:08 - that we created
25:10 - and if you don't set an ip address one
25:12 - is selected automatically
25:14 - which is what we want so i will press
25:17 - submit to attach the private network to
25:20 - this router
25:21 - the interface is then attached and now
25:24 - listed
25:26 - now i'm going to show you how we can
25:27 - visually see the network topology for
25:31 - the network for the cloud that we've
25:32 - created so i'm going to go to
25:35 - project
25:36 - network and then network topology
25:41 - so if i scroll down here you can see
25:44 - this it indicates that the external
25:47 - network is connected to the private
25:50 - network through the router called router
25:55 - and this is what we just created so it's
25:57 - like a visual
25:59 - representation of everything we've done
26:01 - so far
26:02 - now security groups security groups
26:05 - allow control of network traffic to and
26:08 - from instances for example port 22 can
26:11 - be opened for ssh for a single ip or a
26:15 - range of ips
26:17 - let's see how to create a security group
26:19 - for ssh access later we'll apply the
26:22 - security group we create to an instance
26:25 - so i'm going to go to
26:26 - project
26:28 - and network
26:30 - and then security groups so you should
26:32 - see this single security group called
26:35 - default this security group restricts
26:37 - all incoming or ingress network traffic
26:40 - and allows all outgoing or egress
26:43 - network traffic when an instance is
26:45 - created the security when an instance is
26:47 - created this security group is applied
26:49 - by default so to allow the network
26:52 - traffic your instance requires only open
26:55 - port as required to adjust the needed ip
26:59 - ranges
27:00 - to create a security group for ssh we
27:03 - will click the create security group
27:06 - button
27:07 - and i'm just going to name this ssh
27:11 - and then for the description you can add
27:13 - something or you can just leave it blank
27:16 - and then i'll click create security
27:18 - group
27:19 - and if you make a mistake like you
27:21 - accidentally put a lowercase s instead
27:23 - of an uppercase s we can go back to
27:24 - security group
27:26 - and then i can go to edit security group
27:28 - and then we can just edit the name just
27:30 - like that and then click edit security
27:33 - group now i'm just going to
27:35 - click manage rules here we'll go to that
27:37 - page we were at before
27:39 - so after creating the ssh security group
27:42 - we need to add a rule allowing ssh
27:44 - traffic
27:45 - we'll allow ssh traffic from the first
27:48 - hardware node on the cloud to this
27:50 - instance
27:52 - so i am going to click add rule
27:56 - we'll need to obtain the ip address of
27:57 - the first hardware node of the cloud
28:00 - because we only want to ssh into it from
28:02 - that hardware node so let's go back over
28:06 - to our open metal page i'm going to go
28:09 - to assets
28:11 - and then i'm just going to copy the ip
28:13 - address of this first hardware node now
28:17 - we can film this information so for rule
28:19 - we will go to ssh
28:21 - and then for description i'm going to
28:24 - put allows ssh
28:26 - from and then just that ip address that
28:29 - we just copied here
28:32 - and it looks like i copied some spaces
28:33 - so i'm just going to copy it again
28:35 - without spaces
28:36 - and for remote will leave cider
28:40 - and
28:41 - then i will just paste in
28:43 - the ip address here
28:46 - and then i'll just add this rule
28:49 - okay so now we can
28:52 - we can ssh
28:53 - into this
28:55 - network from
28:56 - from this specific ip address
28:59 - we now have almost everything in place
29:01 - to create an instance
29:04 - we'll need an ssh public key an sha and
29:07 - ssh public key is required to access an
29:09 - instance over ssh the key is injected
29:12 - into the instance when created
29:15 - we actually have already done this in
29:18 - this course because we needed an ssh
29:20 - public key
29:22 - in order to basically get this whole
29:25 - thing started that's how we were able to
29:27 - ssh
29:28 - into our node earlier
29:31 - like i said the key is injected into the
29:33 - instance when it's created so what we're
29:35 - doing is we're creating an instance that
29:36 - can be accessed over ssh from one of the
29:38 - cloud hardware nodes so we'll have to
29:41 - create an ssh key pair
29:43 - in one of the hardware nodes
29:46 - the public portion of that key pair is
29:48 - associated with the instance we'll
29:50 - create soon
29:51 - okay i'm back at the terminal i'm still
29:54 - logged into the hardware node where i
29:57 - got the password the admin password we
30:00 - used previously
30:02 - so if you're not logged into the
30:03 - hardware node you should log in again
30:05 - just like we did before
30:06 - and now we're going to create an ssh key
30:09 - pair
30:10 - and i'm just going to use the ssh keygen
30:15 - and
30:16 - this time i am going to make a pair of
30:19 - size 4096 bits so i'm going to do the
30:23 - dash b and then the number of bits 4096
30:29 - and then i'm going to just press enter
30:33 - and i'll just use these default values
30:37 - if you've already created before like i
30:39 - have you can just override it but you
30:40 - probably won't have to because it will
30:42 - probably the first time
30:44 - and i'll create a passphrase
30:47 - okay now i just have to get access to
30:49 - the public key that we just created so
30:51 - i'll do cat
30:52 - root
30:54 - so here's the directory that i got
30:56 - stored in and the file name is id
30:59 - underscore rsa.pub
31:02 - okay so this is the public key i'm just
31:04 - going to select all of this
31:07 - and copy it
31:09 - now now that we have the ssh key for the
31:12 - instance we're going to create the
31:13 - instance that can be accessed over ssh
31:16 - from the cloud's hardware node
31:18 - so to do that i am going to go to
31:21 - projects
31:22 - then
31:23 - compute
31:25 - then
31:26 - instances
31:28 - and then
31:29 - launch instance so there's a bunch of
31:31 - tabs here we're not going to go through
31:33 - all of them but we're going to go
31:34 - through a lot of them
31:36 - some of them will just keep the default
31:37 - values so i'm going to create an
31:40 - instance name for this example i'm just
31:42 - going to use jump station you can call
31:44 - it anything you like and then you can
31:47 - optionally put a description i'm just
31:50 - going to keep the rest of these to their
31:51 - default settings and then i'm going to
31:54 - go to
31:55 - source
31:56 - now i'm going to make sure it's an image
31:59 - that we're booting from an image
32:01 - and i'm just going to keep all these
32:03 - default we are going to create a new
32:05 - volume
32:06 - now we have to choose which
32:09 - which image that we're going to use so
32:12 - for this example we're not even going to
32:14 - use the image we're not going to use the
32:16 - image that we uploaded we're going to
32:18 - use synth os 8. so we'll use the centos
32:22 - stream
32:23 - and i'm just going to click this up
32:24 - arrow
32:27 - and it's going to bring it right up into
32:29 - this allocated section so this is
32:32 - showing that we are going to be using
32:34 - the scent os 8 for the image on this
32:38 - instance
32:39 - now i'm going to go to the next tab
32:42 - flavor
32:43 - and this is all about defining vcpus ram
32:47 - and disk space used by an instance
32:50 - so there's a bunch of pre-built flavors
32:54 - and
32:55 - the one we're going to use is just
32:57 - called m1 small so i'm going to scroll
32:59 - down a little bit in one small and then
33:01 - click the up arrow here
33:03 - and it's going to have a set amount of
33:04 - ram disk space root disks
33:07 - and um
33:09 - next
33:10 - yeah so
33:11 - this is what we're going to use for the
33:12 - flavor now we're going to go to networks
33:15 - now i'm going to bring up the the
33:18 - private network the one that we created
33:21 - uh these provide the communication
33:22 - channels for instance for instances in
33:25 - the cloud
33:26 - and you can choose to add the external
33:29 - network as well
33:31 - but it's not really recommended it's
33:33 - better to use floating i a floating ip
33:37 - if your instance is going to require
33:38 - internet connectivity
33:41 - you should only expose portions of your
33:43 - network as necessary this reduces the
33:45 - attack surface and improves the
33:47 - application security if a private
33:50 - network is not created in an instance is
33:52 - created in a default cloud it's
33:54 - associated with the external network
33:57 - this means that the instance consumes a
33:59 - public ip and it could be reached over
34:02 - the internet
34:03 - so next we're going to skip over network
34:05 - ports and go straight to security groups
34:09 - and we're going to bring up the security
34:10 - group that we previously created the ssh
34:13 - one
34:15 - and then we are going to move to
34:19 - key pair
34:21 - you can upload your key at the stage
34:23 - using the form using the
34:25 - import key pair here
34:28 - you can also create a key pair on this
34:30 - tab
34:31 - we already created the pair earlier from
34:34 - the first hardware node in the cloud
34:36 - so
34:36 - we are going to just use the the key
34:39 - that we already created so we're going
34:41 - to click import key pair
34:44 - and then i'm going to just name this
34:47 - jump station key
34:49 - and the key type is going to be ssh key
34:53 - and then you can either choose the file
34:55 - the key or i can just paste it in here
34:58 - remember we copied it from our terminal
35:02 - and then i'll just click import key pair
35:07 - once the public key is imported we'll
35:09 - create the instance by pressing launch
35:12 - instance
35:13 - the other tabs are just outside the
35:15 - scope of this demonstration here
35:17 - so the instance is going to go through a
35:20 - build process
35:21 - so you may have to allow a few minutes
35:24 - for this to occur
35:25 - and when complete the instance will
35:28 - appear in the instance listings page
35:30 - well i guess it's already appearing here
35:33 - it's just not it's still
35:35 - spawning as it says here and now it's
35:38 - complete it's done the instance has been
35:41 - created
35:42 - now we are going to assign and attach
35:45 - floating ips
35:47 - basically an ip that people can access
35:50 - to get to this instance
35:52 - the only way to connect to the instance
35:54 - is by exposing it via the floating ip or
35:57 - another instance in the same network i'm
36:00 - just about to show you how to allocate a
36:02 - floating ip and attach it to this
36:04 - instance
36:06 - so we're going to start by going to
36:09 - project here
36:10 - and then we're going to go to the
36:12 - network tab
36:14 - and then floating ips
36:17 - and then allocate ip to project
36:21 - we'll make sure the pool is set to
36:23 - external
36:25 - and then we can add a description if we
36:28 - want it's even it's optional you don't
36:30 - even have to and then click allocate ip
36:35 - now we want to allocate the ip to the
36:39 - jumpstation instance by clicking this
36:42 - associate button here
36:44 - so we have the ip address already filled
36:47 - in here and we'll select the port and
36:50 - the port will click the port that we
36:52 - called jumpstation
36:54 - and then click associate
36:57 - so this instance is now available over
37:00 - ssh from the first hardware node in the
37:04 - cloud
37:05 - so let's try
37:06 - logging in to the instance
37:10 - so first of all i'm going to copy this
37:12 - ip address
37:14 - and then i'm going to go back over to
37:16 - the terminal we're already logged into
37:19 - the hardware node if you're not anymore
37:21 - you can re-log into the hardware node
37:23 - over ssh and then we are going to ssh
37:27 - into the instance we just created so
37:29 - i'll do ssh dash i
37:33 - and now i'm going to put in the path to
37:35 - the private key that we created
37:38 - and this private key is basically like
37:41 - the password to log into this instance
37:44 - so it's root slash dot ssh slash
37:48 - id underscore
37:50 - rsa and then i'm going to put in the ip
37:54 - address oh but first actually before the
37:57 - ip address that we copied earlier i have
38:00 - to put in the username which is going to
38:02 - be sent os because that's just the
38:05 - default username
38:07 - of the
38:08 - operating system we installed on this
38:10 - instance okay now i'm going to press
38:12 - enter here and then it's going to see if
38:15 - i ask if i want to continue connecting
38:17 - yes
38:19 - and now i can enter the passphrase that
38:22 - we created that i created when i
38:24 - developed the
38:25 - the private key pair the public pirate
38:27 - key pairs so put in the passphrase
38:30 - and logged in
38:32 - great
38:35 - in the next section we'll do something
38:38 - while logged into the machine
38:39 - but for now let's go back over to the
38:41 - openstack web interface
38:45 - so far we've been learning how to manage
38:46 - openstack through a web browser that's
38:49 - this one right here
38:51 - but it's also possible to manage through
38:53 - the command line using openstack's cli
38:57 - called openstack client using the
39:00 - command line to manage your cloud
39:02 - introduces more flexibility in
39:04 - automation tasks and can generally make
39:07 - an administrator's life simpler
39:09 - so let's learn how to get that installed
39:12 - we'll install the openstack client cli
39:15 - on the instance we just created that we
39:18 - named jumpstation
39:20 - before installing openstack cli you must
39:23 - obtain two files from horizon which are
39:26 - required to prepare your shell
39:28 - environment so let me show you how to
39:31 - get those files and talk more about them
39:33 - i'm going to click where it says api
39:35 - access right here and if i click down
39:38 - here
39:39 - it's going to show two different files
39:41 - that we can download
39:42 - and we need to download both of them the
39:44 - openstack the clouds.yaml file
39:47 - and the rc file
39:50 - clouds.yaml is used as a source of
39:54 - configuration for how to connect to a
39:56 - cloud and then the openstack rc file is
39:59 - used as a source of authentication for
40:03 - the user and project
40:05 - and so i've now downloaded both of those
40:08 - files
40:09 - and now we need to prepare and install
40:12 - openset client
40:14 - so i'm going to go back over to the
40:15 - terminal
40:19 - and
40:20 - i'm still logged in to the instance the
40:24 - instance we created previously
40:27 - so
40:28 - let's go through the steps to prepare
40:30 - and install the openstack client
40:33 - so first we need to prepare the
40:36 - clouds.yaml so first we need to get the
40:39 - files that we downloaded pre just now
40:41 - onto our local machine we need to
40:43 - transfer them to this instance
40:46 - so let me show you how to do that first
40:48 - we're going to get the clouds.yaml file
40:50 - over to this instance i'm going to start
40:52 - by making a directory honor instance so
40:56 - make directory
40:59 - and i'm going to call this it's where
41:01 - the directory is going to be slash dot
41:03 - config slash open stack
41:06 - now that i've created the directory
41:08 - so i'm going to create and open a blank
41:12 - clouds.yaml file i'm going to use the v
41:15 - editor so if i use the v command and i
41:18 - put in a file name it will open a file
41:20 - to start editing and if the file doesn't
41:22 - already exist it will create that file
41:25 - so i'm going to navigate to the
41:27 - directory that we just created
41:32 - and then i'm going to call this
41:34 - clouds.yaml
41:37 - okay now we have to get the contents
41:39 - from the cloud.yaml file on our local
41:41 - computer into this instance so basically
41:44 - we're going to open up clouds.yaml in a
41:46 - text editor on our local computer
41:50 - okay so i got clouds.yaml open i'm just
41:52 - going to copy this this is just in
41:55 - sublime text on my local computer you
41:57 - can open up up in any text editor now
42:00 - i'm going to go back to the the v or
42:02 - vitex editor on the instance and i'm
42:05 - just going to paste in the contents of
42:07 - the file now to save it i'm going to hit
42:10 - the escape key then i'm going to hit the
42:12 - colon key and then wq w for write or
42:16 - save and q for quit
42:18 - okay so i just saved the the clouds.yaml
42:21 - file onto here
42:23 - and now we are going to do the same
42:26 - thing with the openstack rc file oh and
42:30 - by the way the clouds.yaml file can
42:32 - actually be saved in a few different
42:35 - locations but the one we saved in is a
42:38 - is a common place to save the file
42:41 - so the
42:43 - the openstack rc file it doesn't really
42:46 - matter where you save the file so i'm
42:48 - just going to
42:50 - save it um basically right where we're
42:53 - at right now so i'm going to do
42:55 - v
42:56 - and then i'm just going to call the make
42:59 - i'm going to create and start editing a
43:01 - file called development
43:03 - [Music]
43:05 - dash open
43:07 - rc.sh
43:09 - this is going to be
43:10 - a shell file that we can run it'll allow
43:13 - us to run commands
43:14 - now i'm going to open that file on the
43:17 - local machine
43:19 - okay so i'm just going to cop or select
43:21 - all the file copy
43:24 - and go back to the instance here and
43:26 - just just paste in
43:28 - the contents of the file and again i'm
43:31 - going to press escape then colon then wq
43:35 - and that's going to save and exit the
43:38 - file now we'll source the development
43:41 - openrc file which will allow us to run
43:44 - openstack commands and i'll have to put
43:47 - in my openstack password
43:49 - now we are going to create a python
43:52 - virtual environment we're going to
43:54 - create the virtual environment so we
43:56 - don't interfere with the system's python
43:58 - version
43:59 - in the default synth os 8 stream
44:01 - installation the systems the systems
44:04 - python execute executable is called
44:06 - platform python so we're going to use
44:08 - that to create the virtual environment
44:11 - so let me show you first we have to
44:13 - access we have to put in the directory
44:15 - where the the python version is on this
44:19 - instance which is that at this um
44:24 - at this
44:25 - spot on the computer lib exec slash
44:28 - platform dash python
44:32 - and then
44:34 - we have to v e and v is how we're going
44:36 - to create the virtual environment and
44:38 - we're going to create the virtual
44:40 - environment at this directory at this
44:43 - path slash v e and v
44:48 - okay uh we created that and now i just
44:51 - need to activate the python virtual
44:53 - environment so i'm gonna do source
44:56 - and then v e and v
44:59 - slash
45:00 - ben
45:01 - slash activate
45:04 - okay we know we're activated because we
45:07 - have this this is the name of the
45:09 - virtual what we call we this is the name
45:11 - of the virtual environment right here
45:13 - next we need to upgrade pip
45:16 - pip is used to install
45:19 - um different python packages on the
45:21 - instance so i'm gonna upgrade pip with
45:24 - the command pip up
45:25 - pip install
45:29 - upgrade
45:30 - pip
45:36 - okay now we need to install openstack
45:39 - client which is what we've been
45:41 - working toward this whole time
45:43 - so
45:45 - there's
45:46 - two openstack packages
45:49 - but the one that
45:50 - is kind of maintained more is called
45:54 - python-openstack client so we're going
45:56 - to do pip install
45:59 - python
46:00 - dash
46:02 - open stack
46:04 - client
46:11 - okay we now have the openstack cli
46:15 - installed on our instance
46:17 - so there's quite a few things you can do
46:19 - with this cli
46:21 - we're not really going to
46:23 - cover
46:24 - all of them or very much but i'm going
46:26 - to just show you a few things like
46:28 - one like for an initial command we can
46:31 - list the servers associated with the
46:33 - project so i can do open stack
46:36 - that's how we start the openstack cli
46:38 - and i'm going to put server
46:40 - list
46:43 - okay and actually i'm going to zoom out
46:45 - so this
46:47 - looks better
46:48 - [Music]
46:50 - let's zoom out quite a bit for this to
46:54 - okay there we go
46:56 - so we can see we just have
46:59 - one server this is the one we create
47:00 - jump station we call it jump station
47:02 - remember we chose an m1 dot small
47:06 - for the flavor
47:07 - and so this is basically the server that
47:10 - we previously created i'm just going to
47:12 - zoom in again here
47:14 - and when using the openstack client
47:16 - there is typically a common command
47:19 - pattern for what you want to accomplish
47:22 - all openstack commands begin with
47:24 - openstack
47:25 - you can execute openstack by itself to
47:28 - enter into a shell where commands no
47:30 - longer need to be prefixed by openstack
47:33 - so i can just type in openstack
47:35 - and now we can type in any command
47:38 - so we can do the server list
47:41 - and it's going to basically show this
47:43 - the same thing from before
47:46 - i'm not going to zoom out again so you
47:48 - can see what i'm typing in a little more
47:51 - but let's go out of this
47:54 - and now i'm just going to run openstack
47:56 - from the command line again and if you
47:58 - use open
48:00 - stack
48:02 - help
48:04 - then we can list all available sub
48:06 - commands
48:07 - initially see all the flags that you can
48:10 - pass but after scrolling a bit
48:14 - uh you'll see that the command list will
48:16 - start here
48:18 - so these are all the the commands that
48:20 - we can we can use
48:23 - and i'll just quit out of that before we
48:25 - see all of them because there's quite a
48:26 - few uh if you see after you see the
48:29 - available commands you can learn more
48:31 - about a command just using
48:33 - openstack help this is like a lot of
48:36 - clis we can just do openstack help and
48:39 - let's say we want to know about the
48:41 - server command open
48:43 - so if we do that
48:45 - then it's going to show the different
48:48 - commands we can use
48:50 - with openstack server so these are all
48:52 - the things that we can do with
48:54 - a server
48:56 - it's very common when using openset
48:58 - client to list items and the command
49:00 - format
49:02 - is typically the openstack sub command
49:05 - list so
49:07 - for instance we can do
49:10 - opens
49:11 - openstack server list
49:17 - and so that's gonna list the servers
49:20 - just like we had shown before
49:24 - you can also get more information about
49:26 - an item by
49:28 - using the show command so
49:32 - let me give you an example we can do
49:34 - open stack
49:35 - server
49:38 - show
49:39 - jump station
49:41 - so the the name of the server
49:45 - and here we're going to show details
49:48 - about the server
49:53 - so there's quite a bit more you can do
49:55 - with the openstack open stack cli
49:58 - administrators generally use the cli if
50:00 - they need complex options as they may
50:02 - not be available through the graphic
50:04 - user interface but that's basically all
50:06 - we're going to talk about in this course
50:09 - if you're interested in any particular
50:11 - thing you can just look up the
50:12 - documentation to figure out how to do
50:14 - what you want to do in the cli
50:16 - so now we're going to talk about how
50:17 - private clouds are deployed we're going
50:20 - to learn more about how your private
50:22 - cloud is deployed and learn more about
50:24 - the environment
50:25 - openstack can be deployed in several
50:27 - different ways and this section
50:28 - highlights the characteristics of this
50:31 - private cloud we're going to explain
50:33 - some of the advantages of this type of
50:34 - deployment and some things that are
50:36 - unique to open metal
50:39 - let's talk more about the
50:40 - containerization of openstack like i
50:43 - mentioned open metal uses cola ansible
50:46 - and it uses it to set up docker
50:48 - containers for running services so if
50:51 - you need to make any configuration
50:52 - changes to your nodes cola ansible
50:55 - should be used to push those changes if
50:57 - it's not used then there's a risk of the
50:59 - changes being reverted during the system
51:01 - updates some advantages of
51:04 - containerization through docker are that
51:06 - the containers create an isolated
51:08 - environment reducing software
51:09 - dependencies containers can be scaled
51:12 - and allow for services to balance across
51:15 - your cluster
51:16 - containers provide increased flexibility
51:18 - for test releases patches and automation
51:21 - and containers have a consistent and
51:23 - repeatable deployment and a shorter
51:26 - initialization time in openmetal disk
51:29 - storage is provided through ceph
51:31 - ceph is an object storage interface that
51:34 - can provide interfaces for multiple
51:36 - different storage types on a single
51:38 - cluster and openmetal ceph is comprised
51:41 - of two elements object storage and block
51:44 - storage
51:45 - the ceph object storage utilizes the
51:48 - stuff object storage gateway daemon with
51:51 - open metal clouds ceph's rgw replaces
51:54 - swift so there is no docker container
51:56 - for swift instead swift endpoints are
51:58 - connected directly to the rgw
52:01 - authentication for rgw is handled
52:03 - through keystone
52:05 - seth block storage connects to the
52:06 - sender service utilizing ceph's rados
52:09 - block device within the cloud these
52:11 - objects are stored in cephpools seth
52:14 - provides a layer of abstraction that
52:16 - allows objects to be recognized as
52:17 - blocks
52:19 - some advantages of using ceph are data
52:22 - is self-healing and will will
52:23 - redistribute data across your cluster in
52:25 - the event of power hardware or
52:27 - connectivity issues also data is
52:30 - replicated and highly available
52:32 - and seth has the ability to run on
52:34 - common commodity hardware and to mix
52:36 - hardware from different vendors
52:39 - ceph was selected as the storage
52:40 - solution for private cloud core
52:42 - openstack clouds due to its ability to
52:46 - store data in a replicated fashion the
52:48 - data stored in the ceph cluster is
52:51 - accessible from any of your cloud's
52:52 - control plane nodes the storage is
52:54 - considered shared across all nodes which
52:57 - can make recovering an instance and its
52:59 - data trivial so let's learn how to check
53:02 - the status of your ceph cluster and see
53:04 - available disk usage using the command
53:07 - line
53:08 - so first let's make sure we're logged
53:09 - into the clouds one of the cloud control
53:12 - plane nodes not an instance so if you're
53:15 - logged into the instance before you have
53:16 - to log out one layer to the control
53:19 - plane node but not log out so far that
53:21 - you're on your local computer so to
53:24 - check the status of the ceph cluster we
53:27 - can use ceph status so i'll just do ceph
53:30 - status
53:32 - and then we can get a lot of information
53:35 - about um
53:37 - how like like we can get the uses
53:39 - information number of objects the number
53:41 - of pools and stuff like that
53:44 - and to check the available disk space in
53:47 - your ceph cluster we can use seth
53:50 - df
53:52 - and we can see that how much we have
53:54 - available how much has been used and a
53:57 - lot of information about the various
54:00 - pools
54:01 - now let's look at how to find the
54:03 - resource usage of the private cloud
54:06 - we'll explore how to utilize the horizon
54:08 - dashboard to determine the total memory
54:11 - and compute usage for a project
54:13 - as well as how to view instances stored
54:15 - on each node then we'll look at disk
54:18 - usage by explaining how to briefly
54:20 - interact with the cloud's ceph cluster
54:23 - using the command line and finally we'll
54:26 - go over adding and removing nodes from
54:28 - the ceph cluster
54:30 - there are currently three variations to
54:31 - private cloud deployments small standard
54:34 - and large
54:35 - all private cloud deployments have a
54:37 - cluster of three hyper-converged servers
54:41 - but will have different allocations of
54:42 - memory storage and cpu processing power
54:45 - depending on the configuration and
54:47 - hardware in addition you have the option
54:50 - of adding additional hardware nodes to
54:51 - the cluster
54:53 - so
54:54 - let's view the resources used by the
54:56 - cloud
54:57 - we have to be logged in as the admin
55:00 - user so i'm going to sign out
55:03 - and then i'm going to login as admin if
55:06 - you remember to get the password we
55:08 - actually have to log in with our command
55:10 - with the command line so let's go over
55:11 - to the command line and we're already
55:13 - logged in so i am going to use this
55:16 - line right here grep keystone admin
55:18 - password and then the
55:21 - path
55:22 - and then we can get the admin password
55:25 - you can always change this if you want
55:27 - to make it uh something
55:30 - that's different than that but i'll sign
55:32 - in here
55:34 - so once we're in the admin project i'm
55:38 - going to navigate to
55:39 - admin
55:41 - compute
55:43 - hypervisors
55:45 - and this is going to
55:47 - show a few items the
55:49 - vcpu usage
55:51 - the memory usage and the local disk
55:54 - usage
55:56 - there's also an option to see the
55:58 - location of your instances within your
56:01 - cluster
56:02 - to view this information we'll go to the
56:04 - admin compute
56:06 - instances here
56:08 - and then you have the option
56:11 - to see the the project
56:13 - the host
56:15 - as well as ip addresses
56:18 - and the status
56:20 - and
56:21 - just a bunch of other or in the power
56:23 - state and just a bunch of other things
56:24 - here
56:25 - to access information require regarding
56:28 - your ceph clusters resource pools you'll
56:31 - need to use ceph's cli
56:34 - so let's go back over to the terminal
56:38 - and
56:39 - let's just do some common
56:42 - useful resource monitoring and health
56:44 - commands so to check the status of staff
56:46 - we'll just do ceph
56:48 - dash s
56:50 - and so this is just a shortened version
56:52 - of one of the commands we used earlier
56:54 - and then you can do ceph
56:56 - df
56:58 - and again this is one that we've already
57:00 - covered but some new ones would be ceph
57:03 - health
57:04 - detail
57:05 - [Music]
57:10 - health okay and another one is ceph
57:14 - osd
57:17 - pool ls
57:20 - so lis this pools and we can add the
57:22 - detail like we can put
57:24 - images for additional this will give us
57:27 - additional details regarding replication
57:30 - and health metrics
57:31 - we've reached the end of this course
57:33 - you now know the basics of openstack now
57:36 - there's a lot more you can do with
57:38 - openstack but you should know enough now
57:40 - to start learning more on your own
57:43 - well thanks for watching