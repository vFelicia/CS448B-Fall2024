00:00 - in this G course for beginners Hest
00:02 - chowy will break down the essentials of
00:04 - Version Control to help you manage your
00:07 - projects more efficiently Hesh is a very
00:10 - popular instructor and in this tutorial
00:13 - he will teach you the tools and
00:15 - techniques you need to get started with
00:17 - get hey there everyone my name is hes
00:19 - and welcome to the YouTube channel I
00:22 - hope you are doing good and let's get
00:24 - started with another series that I
00:26 - really wanted to bring for so long but
00:28 - finally I got time to actually execute
00:30 - this in this entire series we are going
00:32 - to master git and the associated
00:35 - Services which are offered in the market
00:37 - some of them are quite popular and you
00:39 - might have heard about them such as
00:41 - GitHub bit bucket and there are plenty
00:43 - of others now in this entire series and
00:45 - the upcoming videos we'll be focusing on
00:48 - mastering the gate from both perspective
00:50 - the theoretical perspective as well as
00:52 - the Practical perspective every year
00:55 - there are thousands and thousands of
00:57 - Engineers who walk into the domain of
00:59 - software Eng engineering and realize
01:01 - that building a software is not that
01:03 - easy as it looks like it requires a lot
01:06 - of patience as well as a lot of tools
01:08 - are required to actually build these
01:09 - softwares there are a lot of other
01:11 - Engineers as well whom which you want to
01:13 - collaborate and work on a single
01:15 - software and of course there are days on
01:17 - which software works and of course there
01:18 - are days on which software doesn't work
01:21 - and for these kinds of special situation
01:23 - we need checko so that we can go back in
01:25 - the time where things were working
01:27 - absolutely fine and we can just start
01:29 - from there again can it is almost like
01:31 - saving a game just like we have
01:33 - checkpoints in the game exactly like
01:34 - that we can have checkpoints in the
01:36 - software as well this whole thing is
01:39 - known as version control system or the
01:41 - versioning system in the software
01:43 - industry and I just really feel that
01:46 - every year thousands of engineer walks
01:48 - into this domain and want to really
01:49 - Master this a lot of tutorial which are
01:52 - recorded uh previously or years before
01:55 - they look a little outdated uh of course
01:57 - the technology is same but of course the
01:59 - delivery part the content creation the
02:02 - videos they all need to upgrade from
02:04 - time to time and this is exactly why I
02:06 - am recording this fresh series for all
02:09 - the engineers who are just getting
02:10 - started or want to learn git this is a
02:13 - fantastic series and you're going to
02:14 - absolutely love this one now the my goal
02:17 - is not to make sure that you memorize
02:19 - all the thousands and gazillions of
02:21 - commands which comes through the gate
02:23 - but actually you understand the flow of
02:25 - how a software is designed and work
02:27 - along with me the idea behind this
02:29 - series is not to understand thousand
02:31 - commands but actually to understand how
02:33 - the workflow of a git works when we
02:36 - actually design a software what happens
02:38 - when things goes wrong what happens when
02:40 - things goes great and what's there
02:42 - inside and what's there behind the scene
02:44 - in the git which is all we want to learn
02:46 - for this we are going to use a mix of
02:48 - theory as well as practical and yes a
02:51 - lot of uh tutorials goes really heavy on
02:53 - the practical but that is exactly the
02:55 - point where you miss the behind the
02:56 - scene detail of what happens behind the
02:58 - scene in the git what what is there in
03:00 - that git folder and how we can actually
03:02 - study it this tutorial and this entire
03:05 - series is going to be a mix of all of it
03:07 - and I'm pretty sure you're going to
03:09 - enjoy this now in order to get started
03:11 - you don't need too much now that you
03:13 - have the basics of what this all is
03:14 - going on we need just a couple of
03:16 - software that we're going to talk about
03:18 - and we we'll go through with the
03:19 - documentation but as a preparation side
03:21 - let me just share my screen so that I
03:23 - can walk you through that what all
03:25 - softwares we are going to need first of
03:26 - all about the notes uh yes these are my
03:29 - handwritten notes that I prepared and
03:30 - we'll be walking through with these that
03:32 - how things goes on it's much more easier
03:34 - to teach in the classical style of pen
03:36 - and paper and we will be doing that but
03:38 - don't worry we will also have the
03:40 - Practical aspect of it and for the
03:42 - Practical aspect of it we don't need too
03:44 - much of the softwares I'll just tell you
03:46 - what are my favorite ones and you can
03:47 - just pick whatever you like and since
03:50 - git is one of the thing which I 100%
03:53 - still believe is a terminal First Tool
03:56 - there are a lot of guiz as well the guis
03:58 - graphical user interface but I still
04:01 - believe that you actually thrive in the
04:03 - industry of the gate via the command
04:05 - line it might look add daunting first
04:07 - but it is not it is absolutely easy to
04:09 - work with this and for the terminal I'm
04:11 - going to be using warp this is my
04:13 - default terminal these days I'm actually
04:15 - absolutely loving this the command line
04:17 - it is something which is redesigned
04:19 - terminal was something which was never
04:20 - redesigned and here's a good thing about
04:23 - it the software if you look at here uh
04:25 - this one it is available for Mac it is
04:28 - available for Linux and they are all
04:29 - already working on windows so by the
04:31 - time you might be watching the window
04:32 - video uh there might be already a
04:34 - Windows version and it is absolutely a
04:36 - charm by the way if you don't like it
04:38 - you can use any terminal but I'll be
04:40 - using this one I find this much more
04:42 - easier to work on with apart from this
04:44 - we'll be also using visual studio code
04:46 - that's it that's going to be our code
04:48 - editor the best part is we will not be
04:51 - writing any code at all but still I
04:53 - highly recommend to use this one this
04:55 - entire series is going to be language
04:56 - independent since we want to master the
04:58 - git and not a programming language so we
05:00 - will not be writing any programming
05:01 - language we'll be writing just the text
05:03 - data so that we can understand what goes
05:05 - on what goes behind the scene and all
05:07 - these details so these are the two
05:08 - softwares that are going to be required
05:10 - for you and that is all that is all what
05:12 - you need to get started with this series
05:14 - now one thing I would like to mention
05:16 - here in the very next video we'll go
05:18 - ahead download the git and we'll walk
05:20 - you through a couple of documentation
05:21 - and what to avoid in that documentation
05:24 - it is absolutely a jungle if you just
05:26 - walk into that apart from this please
05:28 - make sure you understand and git and
05:30 - GitHub are two very different thing one
05:33 - is a service provider and one is a
05:35 - software in itself git is a software
05:37 - that we want to learn and one of the
05:39 - services is GitHub of course we'll do uh
05:41 - we'll go there and we'll Deep dive into
05:43 - this one but there are plethora of other
05:44 - services available there as well so make
05:46 - sure you understand the difference
05:48 - between them and that's all the basics
05:49 - to get started I hope that's a good
05:51 - introduction for you what's about to
05:53 - come and what's going to be there in the
05:55 - series itself uh that's it for this
05:57 - video let's go ahead and move on to the
05:59 - next one and uh just set up everything
06:02 - and let's get started and let's dive
06:04 - deep into the world of
06:12 - git hey there everyone a here back again
06:15 - with another video and welcome to the
06:17 - series on the git so let's go ahead and
06:20 - get started finally with the git and let
06:22 - me walk you through how we're going to
06:23 - deal with this entire thing first
06:26 - reminding you again that this series is
06:28 - not about memorizing every single sing
06:29 - command that's available with the git
06:31 - but of course to understand the workflow
06:33 - and some of the behind the scene details
06:35 - of how git properly works so it's going
06:37 - to be a mixed balance of the theory as
06:39 - well as the Practical and I highly
06:40 - recommend to follow along uh because
06:42 - you're going to learn so much when you
06:44 - type these commands uh with your own
06:46 - hands on the keyboard it's a much better
06:48 - learning experience so try them out so
06:50 - let's go ahead and get started let me
06:52 - show you the setup of how we are going
06:53 - to proceed into this one so this is
06:56 - where our browser lies and we will not
06:58 - be focusing too much on the browser
07:00 - because majority of the things that we
07:02 - require or we need to understand to
07:04 - study the documentation will be covered
07:06 - up in this video only and from the next
07:08 - video onwards uh we'll be focusing
07:11 - majorly on the terminal now git is
07:13 - available uh on the GUI platform as well
07:15 - but I think the more you understand
07:17 - about the commands and how they work the
07:20 - better you will be performing on those
07:21 - guis as well on the other screen we do
07:24 - have our handwritten notes here as well
07:26 - uh they are so much better way of
07:28 - teaching uh the subject I still believe
07:30 - that and this series is going to be a
07:32 - mix balance of how to proceed the entire
07:35 - flow of the applic flow of the series as
07:38 - well as the theoretical knowledge I know
07:40 - a lot of you are big fan of just show me
07:41 - the practical but once you understand
07:43 - the behind the scene details The
07:45 - Learning Journey is much much better and
07:47 - you'll be remembering it throughout your
07:48 - life that's the experience I want to
07:50 - give you that once you understand the
07:51 - git from here that's it you are done for
07:53 - the lifetime so coming back first what
07:56 - we're going to do is uh we're going to
07:58 - go back onto this
08:00 - so in order to get this by the way if
08:01 - you want to grab the terminal the exact
08:03 - one that I'm using it's warp uh again
08:06 - common question that comes around uh now
08:08 - let's go on to the git so if you want to
08:10 - go and download the git the website is
08:13 - g-m uh the source control manage
08:15 - management software that we are going
08:17 - through and this is the homepage that
08:19 - you're going to see if you look at the
08:20 - download it will automatically detect
08:22 - your system and will give the software
08:24 - for you you can also click on the
08:26 - download and get the Mac Linux or
08:28 - Windows version whichever you like it is
08:30 - pretty easy to install it's really
08:32 - simple all you have to do is just open
08:33 - up the file and next next I agree okay
08:35 - that's all you have to do and remember
08:38 - the one thing that this is the software
08:40 - that you're installing just because you
08:41 - have installed the software doesn't
08:43 - means that we using the software it's
08:45 - just the installation process the
08:46 - learning of the software how it works
08:48 - that we're going to go through together
08:50 - also you're going to see that on the
08:51 - homepage there's a documentation guide
08:53 - as well now this is the most confusing
08:55 - part because if you click on the
08:56 - documentation and click on the reference
08:58 - manual it looks like that hey it's a
09:00 - pretty small documentation but it is
09:03 - absolutely a jungle if you just look at
09:05 - the git or even the git config you'll
09:07 - find that it is unreadable it is so much
09:10 - of in-depth and so much of the things
09:12 - yeah look at the scroll bar on the right
09:14 - yeah you got this one so it is so much
09:17 - that it is almost impossible to go
09:19 - through with this I don't call this as a
09:21 - documentation it is more of a reference
09:23 - manual whatever you need is there but it
09:24 - is almost impossible to learn from this
09:26 - documentation this is more of a
09:28 - reference guide if you ever need to
09:30 - explore some things more so answer is
09:32 - there but it's not easy to find that now
09:34 - coming back uh let's go ahead and on to
09:36 - this one so first and foremost I have
09:38 - created a folder where we're going to
09:40 - keep all of our learning materials and
09:42 - all of that it's not really that big
09:44 - that I should give it to you while the
09:45 - GitHub account or something it's really
09:47 - the text file so first and foremost I'm
09:49 - going to type the CD and we'll be going
09:51 - to a very specific folder I'll just drag
09:53 - and drop this folder here so it
09:55 - automatically picks up that folder I'll
09:57 - go ahead and hit an enter so now I'm
09:59 - into this folder there is absolutely
10:00 - nothing into this one let's go ahead and
10:03 - create couple of directories into this
10:04 - one so you can see that mkd and we're
10:06 - going to call this one as git one and
10:09 - we're also going to call this one as git
10:11 - 2 and do we need three as well let's
10:14 - just go ahead and have this one so now I
10:17 - have three folders inside this one git 1
10:20 - 2 and three now assume these are just
10:22 - regular folder no assumption no
10:24 - techniques nothing right now uh just a
10:26 - quick question do you think that the
10:29 - software that I've installed git might
10:31 - be somehow associated with these folders
10:33 - absolutely not it is not possible for
10:36 - them that's exactly what I'm saying git
10:37 - is just a software in order to make sure
10:40 - that git tracks what's happening in my
10:42 - these folders I need to make sure I give
10:45 - it a command to track all of this and
10:48 - maybe maybe for some reason I want to
10:50 - track git one and uh git 2 and not the
10:53 - git three there's also a possibility on
10:55 - that so that's exactly what we're going
10:56 - to study in the notes part so let me go
10:59 - through with this so first of all let me
11:01 - go ahead and walk you through with these
11:02 - all notes that we have and this will
11:04 - help us to keep a track of all the
11:06 - things first of all uh let's assume and
11:09 - understand this major difference that
11:11 - git is a software it is just a software
11:15 - and the GitHub is a service or a service
11:17 - provider and they are very different
11:19 - when initially you get started into the
11:21 - software Journey it is okay to assume
11:23 - that they are the same uh but eventually
11:25 - you'll realize that there are many other
11:27 - service providers like G so whatever do
11:29 - through the git and you want to keep an
11:31 - online version of it save somewhere in
11:33 - the cloud that's what the GitHub is used
11:34 - for and there are other services as well
11:37 - like there's a bit bucket which is
11:38 - pretty popular and there are tons of
11:40 - others as well which are not that
11:42 - popular but they exist another thing
11:45 - what does the git actually does what's
11:46 - the whole role what's the point of it I
11:49 - all I always say that assume that this
11:51 - is something like a video game in the
11:54 - video game you cannot clear the level on
11:55 - just one go you need the checkpoint that
11:57 - hey I'm safe till now here so if I I
11:59 - restart the game I want to be here on
12:01 - this point this is exactly ha this
12:03 - exactly happens in the Version Control
12:05 - System it keeps the track of the file
12:07 - and the changes of that so whatever the
12:09 - changes you have made uh it marks a
12:11 - checkpoint there and if anything goes
12:13 - wrong you can just go back there not
12:15 - only that that's also the that obviously
12:17 - is the priority of the software but it
12:20 - also helps to work in collaborative
12:23 - environment maybe there are 100 people
12:24 - working on a software maybe two people
12:27 - for this example uh we can actually go
12:29 - ahead and work in collaborative
12:30 - environment we're going to see that demo
12:32 - as well here is my learning path that I
12:34 - recommend everyone to who's who want to
12:37 - learn the G is get the basics first you
12:39 - cannot just Deep dive into this I see a
12:42 - lot of people who just look at the four
12:43 - or five commands that are available on
12:45 - the GitHub while uploading the files and
12:47 - never ever does the Deep dive in the git
12:49 - my recommendation is get the basics
12:51 - first and then use it in your daily life
12:54 - whatever you're doing whatever the code
12:56 - you're writing just use it daily and
12:58 - then face the problem this course will
13:00 - give you a very solid foundation but you
13:01 - have to face your own problems and solve
13:04 - those problems via chat GPT or the stack
13:07 - Overflow however you do that that's the
13:09 - best way of learning the gate use it
13:11 - daily face the problem now I have
13:13 - covered a lot more than just the basics
13:15 - in this course uh which is required for
13:17 - you and that's why this note exist uh
13:20 - but again you don't have to worry too
13:21 - much and obviously you'll be facing some
13:22 - of the troubles which are outside of the
13:24 - course curriculum so that's that's okay
13:26 - okay moving on first of all we need to
13:28 - understand some of the terminologies to
13:30 - go and dive deep into the git ecosystem
13:33 - the first terminology is known as repo
13:36 - and it's a short form for repository or
13:39 - we can uh un formally call this one as
13:42 - just a folder so yeah that's it a folder
13:44 - which contains a lot of software files
13:46 - is known as repository and in the world
13:48 - of git we call it as repo repo is
13:50 - nothing it's a git on system uh versus
13:53 - tracking the repo uh so there's a
13:55 - difference between having just the
13:57 - folder and some folder which are being
13:59 - tracked by the git so the very first
14:01 - command that we are introducing here
14:03 - then we'll come back on the git repo and
14:04 - not tracked files and all of that the
14:06 - First Command that we're going to learn
14:08 - is the git Das Dash version and there's
14:10 - a small thing about this command as well
14:12 - that I would like to walk you through so
14:14 - if I go ahead and run this command that
14:16 - is git you can run the- v as well or you
14:18 - can run the dh- version as well version
14:22 - and if I go ahead and hit and enter here
14:24 - you can see that my version is
14:26 - 2.39 do1 and if you see the online
14:29 - version of the git which is available is
14:31 - 2.44 now what you need to understand is
14:34 - git is a very very reliable software it
14:38 - doesn't ship out every next update on
14:40 - every next Monday but whatever the
14:42 - version you have anything above let's
14:43 - just say 2.1 or something you are
14:45 - absolutely fine this software has never
14:48 - shipped the braking changes and I don't
14:50 - think so it will do in the future as
14:52 - well very liable very uh Pleasant
14:54 - software to work on with this one so the
14:56 - First Command that we have studied is
14:57 - all just about the version so this is
14:59 - what we get as the version system all
15:01 - right moving further down now here's an
15:04 - interesting diagram that we all need to
15:06 - track so this is our major root folder
15:08 - and in this folder we have created
15:10 - multiple folders consider this as git 1
15:13 - consider this as git 2 and consider this
15:15 - as git 3 so as I've just mentioned the
15:17 - software is installed in a system
15:19 - doesn't means it's tracking everything
15:21 - you need to mention it that this is my
15:23 - git repo this is my git repo once you
15:25 - mention this and initialize your git in
15:28 - that folder that folder is particularly
15:30 - getting tracked and the tracking of this
15:32 - folder can be totally independent from
15:34 - this folder and also if you haven't
15:36 - mentioned that this folder should not be
15:38 - tracked that's it it's never going to be
15:39 - tracked your software is not going to be
15:42 - uh interfering in that one so this is
15:44 - the most important part onto this one
15:46 - now uh let's go ahead and run and
15:49 - initialize couple of folders so we will
15:51 - learn that how we can make this entire
15:53 - source code or the folder as trackable
15:55 - and we'll also find the status of this
15:57 - entire folder you want to track
15:59 - everything in your in your computer so
16:01 - we're going to go ahead and learn about
16:02 - this and then we'll come back onto these
16:04 - notes and talk about this uh hidden
16:06 - folder that we do have here uh we'll
16:08 - just work on with this one so let's go
16:10 - back onto this command line and as I can
16:12 - see if I go ahead and do a quick LS I
16:14 - have G one git 2 and git 3 let's just
16:17 - say I want to track git 1 and git 2 and
16:19 - not the git 3 first and foremost is you
16:22 - can always check what's the status of
16:24 - the G now I don't recommend to just
16:26 - initialize it outside where you don't
16:28 - want to track things go ahead and
16:30 - initialize the git only where you want
16:31 - to track the things so I can run the
16:33 - command like G status here as well so G
16:36 - status and it will surely give me that
16:38 - hey fatle not a git repository that's a
16:41 - good thing it's not tracking the things
16:43 - here and that's exactly what I want if I
16:45 - go ahead and run the ls here now let's
16:47 - go ahead and learn that how we can track
16:49 - a particular folder so that our software
16:51 - is activated in that folder let's go
16:53 - into the git one so let's go ahead into
16:55 - the git one folder I'm currently into
16:57 - that there is nothing inside it and I
16:59 - can do an ls- LA to see all the hidden
17:02 - folders as well and as you can see there
17:04 - is nothing inside it now first of all
17:07 - let's check it's always a good habit
17:09 - make it your habit is to run the git
17:11 - status this is a command which you
17:12 - should run often so go ahead and make
17:15 - this in habit it's okay now the First
17:17 - Command that we're going to learn about
17:18 - is initialize the git software the
17:20 - moment you do get in it which is a short
17:22 - command for initialization just hit the
17:25 - enter and now it will give you this kind
17:27 - of a response that hey
17:29 - uh using the master name for the initial
17:31 - branch and we'll learn about the concept
17:33 - of branching and all these things in a
17:34 - matter a little bit later but right now
17:37 - we can see it gave us some of the output
17:39 - now the fun part is if I go ahead and
17:41 - check the get status again now it gives
17:43 - me different messages it says that hey
17:47 - uh get status on Master branch no commit
17:49 - yet and nothing to commit that's okay
17:51 - we'll learned about these terminologies
17:53 - little bit later but one thing is sure
17:55 - that it's not giving me those error
17:57 - message and this particular folder is
17:59 - now being tracked by the git and if I go
18:02 - a little bit back and do a quick LS I
18:05 - can now say that the git one is a folder
18:07 - which is being tracked by the git
18:10 - software and these two softwares no they
18:12 - are not getting tracked at all let's go
18:15 - ahead and move on further into this that
18:16 - how this actually happened the whole
18:19 - thing is git status is to check the
18:21 - status of the git software and the git
18:23 - in it is uh by the way this is always
18:26 - being run as one time per project that's
18:28 - why I say I love these notes because it
18:30 - helps me to keep in track and all the
18:32 - things which I want to share the inner
18:33 - details they never get missed out so the
18:36 - G init command you always run only one
18:38 - time in a project once the git folder is
18:40 - there and the initialization happens you
18:42 - don't do again you can keep on adding
18:44 - deleting removing files of your software
18:46 - whatever you're doing keep on doing that
18:48 - but you don't do get initialize again
18:50 - what get initialize does is it creates a
18:52 - dotg folder since the folder starts with
18:55 - the dot it is hidden but it's actually
18:57 - there and it a hidden folder to keep
19:00 - track of all your your files and folders
19:02 - and subfolders and Sub sub subfolders so
19:04 - you can go pretty uh deep into that now
19:08 - when we do uh simply go into the git one
19:11 - we do an LS we don't see it but if I go
19:14 - ahead and do a simple ls- la which is to
19:17 - show the hidden folders we can see that
19:19 - this folder now exist that's an
19:21 - interesting folder and this folder
19:22 - requires a lot of theoretical knowledge
19:24 - to go into the depth of it why don't we
19:26 - start just here let's go into a dogit
19:29 - and go up here to a quick LS and yep
19:32 - there's so much in here there's a head
19:34 - folder there's a hooks there's a refs
19:37 - there's a config info description object
19:40 - and what you'll notice that these
19:42 - folders and all these structures they
19:44 - grew they are going to grow up as we
19:47 - bring more files into this folder but
19:50 - you never ever yep never ever go into
19:52 - this folder and do any changes manually
19:55 - if you do that uh risk is on you the
19:58 - whole the that you are going to create
19:59 - it's totally on you so what we're going
20:01 - to do just to give you a brief idea I
20:03 - can just go ahead and uh click on this
20:06 - and I can command click on this and I
20:07 - can open this folder uh just up here so
20:10 - this is just a file I'm going to uh I'll
20:13 - just open this refs here so all right so
20:16 - this refs and this opens up the refs so
20:19 - you can see there's a head there's a
20:20 - tags yes we going to discuss about the
20:22 - heads right now there's nothing inside
20:23 - it there's nothing inside the tags but
20:26 - yes these are actual folders which
20:27 - actually keeps the track of now right
20:29 - now I don't want to make any mess into
20:31 - this one so what I'm going to do is I'm
20:32 - going to go out of this one and do a
20:34 - quick LS nothing is there that's what we
20:37 - have as of now okay uh now this is
20:41 - looking good let's go ahead and
20:42 - understand a couple of working mechanism
20:45 - of the git then we're going to create a
20:46 - couple of files into this folders onto
20:48 - this one we'll even open up our uh VSS
20:51 - code and we'll start with that but first
20:54 - let's go ahead and understand the entire
20:56 - workflow and once we are going to do the
20:58 - practical of the workflow you'll
20:59 - understand it a little bit better so you
21:02 - will also hear quite a lot about these
21:04 - commit statements the commit statements
21:07 - are almost exactly like the checkpoints
21:09 - which happens in any video game that you
21:11 - have played in your uh childhood time or
21:14 - even if you still do play just like I so
21:16 - commit is something which is known as
21:17 - checkpoint so in the world of software
21:20 - we love to call them with different and
21:22 - unique name so we call this as a comit
21:23 - but if you call this as a checkpoint
21:25 - inside yourself that's okay that's going
21:26 - to be fine the whole idea behind uh
21:29 - things is uh we write something into our
21:32 - directory uh we add that and we commit
21:35 - that so there is couple of there are
21:37 - couple of more commands before you
21:39 - actually do the comments you cannot just
21:40 - go ahead and write the comment directly
21:42 - so this is where I have added this small
21:44 - diagram on the right side which helps us
21:46 - to understand that how the workflow of a
21:48 - basic very simple git actually works and
21:51 - we'll do this one as well in the next
21:53 - video as well so the first is we have to
21:56 - make a working directory the point of
21:58 - making a working directory is simply we
22:00 - have git initialized there we do have
22:02 - that folder now after that we have to
22:05 - run a command of git ad and this is not
22:07 - a complete Command we have to mention
22:08 - the file name here or you can use a
22:10 - shortcut of dot to add everything we'll
22:12 - work through with that and that actually
22:14 - brings everything into the staging area
22:16 - this means this is not yet committed
22:18 - that means yeah this checkpoint this
22:19 - checkpoint is not yet made but this is
22:21 - known as something as staging area that
22:23 - means hey I'm ready to commit some of
22:25 - the files then you simply go ahead and
22:27 - run the commit command which is exactly
22:29 - this one we are ready to make a
22:32 - checkpoint once you do the git commit
22:35 - command then the repo is now onto a
22:38 - checking stage now a lot of people why
22:41 - they get confused with the git and
22:42 - GitHub because once the repo is created
22:45 - it is kind of a very common that you
22:47 - push the entire thing uh the whole thing
22:50 - that you have made along with the
22:51 - checkpoints and the source code you want
22:53 - to push it onto some of the cloud
22:54 - provider or Cloud git provider which is
22:57 - one of the GitHub so that's where
22:59 - exactly the git push command Works
23:01 - through we will not be doing the push
23:03 - command yet we'll want to understand the
23:04 - flow till here so we I have already
23:07 - created a working directory now we want
23:08 - to add those files and want to bring
23:11 - them onto the staging area we want to
23:13 - discuss what the staging area is and
23:15 - then we want to learn about the commit
23:17 - that how do we actually properly make a
23:19 - commit and move it here so this is our
23:21 - goal how we go with that so in the next
23:23 - video we'll go through with this staging
23:25 - area that how it works but before that
23:26 - we need to do some practical as well so
23:28 - that we're going to do in the second
23:30 - part of the video itself so I hope uh
23:33 - this entire thing was pretty useful
23:35 - pretty fun entertaining as well let's go
23:37 - ahead and catch up in the next video and
23:38 - go through with the staging Pia
23:46 - part all right hey there everyone my
23:49 - name is Ates and welcome back to the git
23:51 - series and welcome to the third part of
23:53 - it or the third video so in this video
23:56 - we're going to be again going back we'll
23:57 - do some of the practicals we'll go some
23:59 - of the behind the scene again one more
24:01 - time this one is going to be a little
24:02 - bit more of a practical tiny bit Theory
24:05 - and we're going to have some fun so let
24:07 - me share the screen first and and uh let
24:09 - me walk you through that what we're
24:10 - going to do in this video so the whole
24:13 - idea is to understand this part of the
24:16 - system first because obviously we will
24:18 - be going into the git push and GitHub
24:20 - and all these things later on but first
24:22 - of all it is important for us that we
24:24 - understand this part of the thing this
24:26 - is pretty nice actually so what we're
24:28 - going to do is we're going to create a
24:29 - working directory uh we're going to go
24:31 - ahead and work on the git ad command
24:33 - we'll go through the little bit details
24:35 - of it we'll see what this staging area
24:37 - is and then we we're going to walk
24:39 - through with the commit and we'll see
24:41 - how a repo or the repository or the
24:43 - folder looks like and then we're going
24:46 - to have a lot more discussion about the
24:47 - comits or how this is being done in
24:49 - order to walk through with this again we
24:51 - are still here and if you just go ahead
24:53 - and look into uh the PWD command present
24:56 - working directory we are in the git one
24:58 - and at this point we can just go ahead
25:00 - and check out the git status this is the
25:02 - first command that you should always and
25:04 - always run in every folder to check out
25:07 - whether this is already initialized with
25:09 - the git or we need to do some
25:11 - initialization once you do this if you
25:13 - see something like this on Branch Master
25:16 - uh one side note you will always and
25:18 - always be on some or the other branch
25:20 - that branch is called as Master main
25:23 - checkout feature whatever the name but
25:25 - you'll always be on some of the branch
25:27 - in this case case we are on the master
25:29 - Branch there's a little bit history
25:30 - involved with that as well I'll walk you
25:32 - through with that uh but we are on this
25:34 - one now I've opened this folder in the
25:37 - vs code as you can see on the top this
25:39 - is git one so this exact folder is
25:41 - opened up here so that we can work on
25:43 - and see the visualization of this now
25:46 - also I do recommend you to install one
25:48 - plugin which is known as git lens and
25:51 - what this folder is going to do is it
25:53 - will allow you to have uh this small
25:55 - icon at the top and once you click on
25:57 - this this will give you some of the
25:59 - graphs right now we don't have this one
26:01 - uh we don't have any comment or anything
26:02 - that's why it's giving us error that's
26:04 - okay that's expected uh but it's good
26:06 - it's good to have this uh simple plugin
26:08 - again I repeated it get lens pretty
26:11 - easy okay now let's see what we're going
26:13 - to do here uh first and foremost we're
26:16 - going to create a couple of files and
26:18 - folders here so let's just go ahead and
26:20 - use touch and what we're going to do is
26:22 - uh let's just call this one as test one
26:24 - let's go with the txt plain and old
26:26 - simple and we're going to also go ahead
26:29 - and say Test 2 of course txt we'll go
26:32 - through with HTML files later on these
26:34 - are also fun uh but we're going to go
26:36 - ahead and have these files the moment I
26:39 - have these files now you can see these
26:40 - two files are here if you want to see
26:42 - the visual aspect yes these two files
26:43 - are here as well uh so go ahead and
26:45 - click them I prefer the terminal part
26:48 - now let's go ahead and see what does the
26:49 - git status says now okay so the git
26:53 - status is giving us different results
26:55 - now it is giving us untagged files and
26:58 - nothing to be committed so what it's
26:59 - saying is basically that hey I'm
27:02 - initialized in this repository but there
27:04 - are some of the files which are not in
27:06 - my tracking Zone yet so if you make any
27:08 - changes or anything in these files I'm
27:10 - not unaware of it and I'm not also
27:12 - keeping track of them they are out of my
27:14 - tracking Zone as of now so where we are
27:17 - right now so uh the whole idea behind
27:20 - this entire thing is that whole thing is
27:22 - whenever you build any software you
27:24 - write some code you add that code into
27:27 - the git track in zone and then you make
27:29 - it a commit so what we have done so far
27:31 - is we have just a working directory in
27:33 - which we have created some of the files
27:35 - and that's it we are we have done
27:37 - nothing else now the next step here
27:39 - according to our flow is to use the
27:41 - command git add git add command uh does
27:44 - nothing magical it just keeps everything
27:46 - under the tracked Zone let's just say
27:49 - for some reason I want the test one to
27:51 - be tracked test two I'm still working on
27:53 - it I'm not yet ready to make it
27:56 - trackable yet so what we're going to do
27:58 - is we're going to run the command get
27:59 - add and you will constantly see that a
28:02 - lot of people just add the dot here and
28:04 - that's it uh this is if this is
28:06 - intentional that's great but a lot of
28:08 - time this is not intentional the whole
28:10 - idea behind ad is to move into the
28:12 - staging area and this is where you
28:14 - should only name the file which you are
28:16 - interested in tracking and by the way
28:18 - you can add multiple files just by
28:20 - putting up a space but in this case I
28:22 - just want to track one file I'm not
28:24 - interested in tracking all the files
28:26 - let's see what happens when I go ahead
28:27 - and hit and enter now nothing magic but
28:30 - again our magical command which is git
28:32 - status just go ahead and run this and
28:35 - now we see the message to be little bit
28:37 - different let's go ahead and work
28:38 - through with this it says you are on
28:40 - still on Branch Master okay that's good
28:43 - now changes to be committed that means
28:45 - I'm tracking one file which is new file
28:48 - which is test one and there's also still
28:50 - one untracked file which I'm not
28:52 - tracking on this so at this point just
28:55 - by adding this command that means you
28:57 - are on the staging area staging area is
29:00 - an intermediate Zone before you make any
29:02 - commit so it's almost like uh a
29:05 - pre-screen before you save your game
29:07 - sometimes it happens that do you really
29:09 - want to save the game press yes yes this
29:11 - is exactly that area you can stage the
29:14 - file you can unstage the file as well by
29:16 - the way you might have seen the commands
29:18 - here that yes uh you can do the unstage
29:20 - as well uh get rm-- cast and then the
29:23 - file name uh you can unstage them we
29:26 - will talk about them later on but
29:28 - usually nobody UNT trcks them but it's
29:30 - it's possible so right now we are in the
29:32 - position that we are in the staging area
29:35 - all right we got it we are on the screen
29:37 - where we can hit the save button or we
29:39 - can say no button what's the next hit
29:41 - the next command is to use is the get
29:44 - commit okay repeating again working
29:46 - directory added some file asked that you
29:48 - track this file now we are in the
29:50 - staging area now we need to do the
29:51 - commit now the commit command in itself
29:54 - is a little bit tricky to understand in
29:57 - order to do so I can just go ahead and
29:59 - simply say hey I'm ready to commit so I
30:01 - can just go ahead and hit the commit now
30:03 - the problem with the commit command is
30:05 - that uh I'll walk you through in that in
30:07 - the next one that this can be little bit
30:09 - tricky to work on with so always it is
30:12 - recommended that you press- m to give a
30:15 - message commit needs a message 100% of
30:18 - the time they need some message that hey
30:21 - why are you committing this file what
30:23 - this zone is or what this file does and
30:25 - even there's a debate what and how you
30:26 - should write these commit message we'll
30:28 - definitely go with that so in this case
30:30 - I'm going to go ahead and say U add file
30:34 - one that's it that's my command to the
30:37 - codebase that hey do this one okay once
30:40 - I do
30:41 - this it does some of the stuff and it
30:43 - says master root blah blah stuff one
30:47 - file changed zero insertion zero
30:49 - deletion and all these stuff so where we
30:51 - are right now in the in the diagram
30:53 - perspective we've gone through with this
30:55 - command and we learned that just running
30:57 - alone get commit is not enough we need
30:59 - to run git commit DM to give a message
31:03 - and then we have to provide a oneliner
31:04 - message we'll discuss about them but
31:06 - definitely we are in this repo stage
31:09 - right now so if you go ahead and work on
31:12 - with this so if you go ahead and check
31:14 - out uh git status again so if I run the
31:17 - git status again it says you know what
31:19 - there is only one file which I'm not
31:22 - which I'm worried about which is test
31:24 - two because test one hey that's already
31:26 - in the repo that has gone into the repo
31:29 - Zone that means everything is being
31:31 - tracked and everything is updated in
31:33 - that file nothing is changed from last I
31:35 - checked onto it uh that's nice now let's
31:38 - do this exercise one more time but with
31:41 - little bit error messages so that we can
31:43 - see what happens when things goes wrong
31:45 - by the way now if you have installed the
31:47 - git lens it will give you some of the
31:49 - options that hey you have created
31:51 - something here so this is a single line
31:54 - of you can say timeline that has gone
31:56 - and it gives me all these things author
31:58 - messages it will not give this exact
32:00 - same thing to you as of now because yes
32:03 - right now you are not going to be
32:04 - getting all these a nice author name a
32:07 - comit you will get but this author name
32:09 - is definitely going to bother you I'll
32:11 - show you why you are getting these error
32:12 - messages why I'm not getting them so yes
32:15 - you are in trouble already but these are
32:17 - the problems we really want to face to
32:19 - understand what goes wrong and what is
32:21 - all the things goes on behind the scene
32:23 - onto that all right so first of all
32:26 - let's go ahead and do the same thing
32:27 - again but with the test two file so the
32:29 - first step is simply go ahead and what
32:32 - we want to do is add so let's go ahead
32:34 - and add and this time I want to add test
32:36 - two file all right that looks good that
32:39 - has been done in the past as well and we
32:40 - can use the shortcut dot here as well
32:42 - because there's just one file to track I
32:44 - go ahead and hit that now the next step
32:47 - is to obviously now I'm in staging area
32:49 - you can just verify that by git status
32:51 - yes I'm in the staging area the next
32:53 - step is to commit it but this time
32:55 - instead of running uh the dhm I'll just
32:58 - go ahead and remove this and see what
33:00 - happens when I don't do anything like
33:02 - this so if I go ahead and run get commit
33:04 - and I hit enter oh it opens up VSS code
33:07 - for me but it doesn't open VSS code for
33:10 - you why this is happening I can write my
33:12 - message here I can just go ahead and say
33:15 - uh my second file or add second file to
33:21 - codebase I can just go ahead and save
33:24 - this and I can just simply close this
33:26 - file and I can go back and you can see
33:29 - it does work for me but in your case it
33:31 - might have opened up something in the
33:33 - terminal itself Why didn't it open it up
33:35 - for me what I what did I change in there
33:38 - that's exactly you want to learn because
33:40 - by default whenever you make any commit
33:42 - message it opens up whim and that's a
33:45 - little bit scary of a code editor by the
33:48 - way in case you are stuck with it press
33:50 - Escape once then the colon and then the
33:52 - Q you will be quit with that in case it
33:54 - doesn't quit it then simply press q and
33:57 - then the clat sign it will forcefully
33:59 - quit that out uh but yes nobody wants to
34:01 - get stuck with the viim especially when
34:02 - you are getting started you are a
34:04 - beginner uh so yes we'll discuss all
34:06 - these things about okay let's move back
34:08 - so we have done all of this so we can go
34:10 - ahead and see that okay uh we can just
34:13 - remove this and start it again we can
34:15 - see that the second file add to the code
34:16 - base so there are two commits now which
34:18 - I have done okay good start Good Start
34:20 - let's go ahead and talk about this uh
34:23 - now it's time that we discuss what
34:24 - happened behind the scene as well as why
34:27 - did it gave you an error of username as
34:29 - well as why it didn't gave it to me why
34:32 - did it open up the code editor as Vim
34:34 - for you not for me so these are the
34:35 - important questions we need to discuss
34:37 - uh first of all a little stage area that
34:39 - we have discussed so whenever we do a g
34:41 - initialization that's the start of our
34:43 - software that start keep track of it
34:45 - then simply go ahead and create files
34:47 - whatever the file syntax and everything
34:48 - are there you can just use files like
34:51 - get add file one and file two or
34:53 - optionally you can use get add dot dot
34:56 - simply means here that add everything
34:58 - that I have no matter what sensitive
35:00 - files are not sensitive files just add
35:02 - everything then when we simply go ahead
35:04 - and check the git status it gave me a
35:06 - status report that what files are being
35:08 - under the tracking Zone what files are
35:11 - untracked based on that we learned about
35:14 - the git commit message and we saw that
35:16 - the g-m is really important to provide a
35:18 - message most of the programmers and the
35:21 - coders you'll find that they give the
35:22 - message directly within the command line
35:24 - they don't wait for the code Editor to
35:26 - open whether that's a Vim or the VSS
35:28 - code so say simply so say so they simply
35:31 - get the message of dhm and provide a
35:33 - good message there's a big debate about
35:35 - the message as well which we're going to
35:37 - talk about this and then the git status
35:39 - I highly highly recommend that whoever
35:41 - is learning repeat this two three times
35:43 - create more files and do this flow it
35:45 - will be super super important for you
35:47 - the next command that we're going to go
35:48 - through is git log and we are going to
35:51 - go through quite in depth of it but
35:52 - right now let's just see what happens
35:54 - when we go ahead logs are pretty
35:55 - important for software Developers so
35:57 - we're going to go ahead and say get log
35:59 - and please ignore the dash dash online
36:01 - so no we are not going to be making this
36:03 - yet I'll show you the demo of that one
36:05 - as well so when I do a git log uh notice
36:07 - here it gives me so much of the details
36:10 - it gives me the commit ID so yes we can
36:12 - notice that each commit that I made uh
36:15 - we saw that programmatically and the
36:17 - visual part that it has a commit ID so
36:19 - if I go ahead and move this a little bit
36:21 - here and this one also here and this one
36:24 - again here we can see there's a commit
36:26 - ID but on the GUI you are going to
36:28 - notice that it gives me a shorter ID but
36:31 - on the other hand here is the big ID but
36:33 - notice here something interesting that
36:35 - this is 4 c8a something and here also it
36:38 - is 4 c8a so only a few initial letters
36:42 - usually six or eight letters are enough
36:45 - to make the git unique for your
36:47 - repository but hey nothing is stopping
36:49 - you from referencing and checking the
36:51 - whole one it also gives us some details
36:53 - that hey this is the user who actually
36:55 - made this commit and and this is the
36:58 - email ID of this user this is my public
37:00 - email ID I don't use it for the
37:02 - professional use and also it gives me
37:03 - the date and all these things and the
37:05 - commit message that I made so all these
37:07 - details are there but the bigger
37:09 - question is how did it came to know
37:11 - about that my name is this and this is
37:13 - my email ID it's simply because there is
37:16 - a config file or also known as
37:18 - configuration file which in which all
37:21 - these information needs to be saved
37:23 - first so that we can make all these
37:24 - commits and messages so we're going to
37:25 - do that in a minute but there there is
37:27 - also one more command that you just saw
37:29 - that there is also a command dash dash
37:31 - online and that's why I love this
37:32 - command line editor it gives me so much
37:34 - of the details that I can just run this
37:36 - and this times yes I get exactly the
37:38 - same but it's shorter and it's in one
37:40 - line it just gives me the message which
37:43 - is the unique sha or you can say just
37:45 - unique letters which makes my commit
37:47 - unique and it gives me the unique
37:49 - message and yes we're going to study
37:51 - about the Headmaster a little bit later
37:52 - but yes this is all what we got all
37:54 - right so let's move up here and we're
37:57 - going to talk about this uh we're going
37:59 - to talk about the config files and all
38:00 - these but first of all let's talk about
38:02 - the commit message as well on the
38:04 - internet there's a big debate about it
38:06 - and everybody has their own opinion I'm
38:08 - going to tell you the opinion which the
38:10 - official Founders and official website
38:12 - actually mentions and I also follow that
38:14 - so here it is so git actually follows a
38:17 - principle of atomic commits that simply
38:19 - means that one commit does the one job
38:22 - it's not like you do thousand different
38:24 - things and then make a commit uh you do
38:26 - often commits and you do one task at a
38:29 - time with the commits that's the whole
38:30 - idea behind atomicity or Atomic commits
38:33 - one thing at a time so here it is keep
38:35 - commits keep commits Centric to one
38:38 - feature one component or one fix if
38:40 - you're fixing bugs uh maybe there's are
38:43 - 10 bugs you're fixing so one commit one
38:45 - bug that's usually the idea behind all
38:47 - the major mnc's where you'll be working
38:49 - very soon hopefully so focus on one
38:52 - thing that's the whole idea now there's
38:54 - a big debate about when we write the
38:56 - commit message how do you want to write
38:57 - the commit message I can write U added
39:01 - one file to the codebase or I can simply
39:03 - say add one file to codebase and there's
39:05 - a big debate about this one as well that
39:07 - whether to use a present or the past
39:09 - commit message now it totally depends on
39:12 - uh how you want to go with that the
39:14 - official website or the official
39:16 - recommendation is simply uh use the
39:19 - present tense but imperative that means
39:21 - simple idea is give order to your
39:23 - codebase hey codebase do this hey
39:26 - codebase add this file hey codebase add
39:28 - this changes to my file hey codebase add
39:31 - a function to connect to database so
39:34 - that's the whole idea give order to your
39:35 - code base uh I'm not super happy with
39:37 - this style it looks too aggressive but
39:39 - hey I'm not making the rule I simply
39:41 - don't care how much your messages you're
39:43 - giving or all these things details but
39:45 - the whole idea is that yes you have to
39:48 - you are supposed to give command to your
39:49 - code base now one more thing that we're
39:51 - going to do in the next video is
39:53 - understand about this one so what this
39:55 - whole thing is that uh how does the git
39:57 - commited all these uh things works in
39:59 - the next video we're going to work with
40:01 - the git config command and we're going
40:03 - to see that how it came to know about me
40:06 - and my username which I've used as well
40:09 - as uh how it came to know about my email
40:11 - ID and what is this configuration file
40:13 - let's go ahead move on to the next video
40:14 - and talk about the configuration
40:22 - files hey there everyone a here back
40:25 - again with another video and welcome to
40:26 - the get Series so we are continuing our
40:29 - git series hope you're enjoying it in
40:31 - this video we're going to see a little
40:32 - bit more towards what happens with the
40:34 - git configuration file how does the git
40:36 - comes to know about my name my email ID
40:39 - and the default code Editor to open up
40:41 - whenever we want to write something
40:43 - apart from this we're going to study
40:44 - about uh one very important file known
40:47 - as get ignore so that we can ignore some
40:49 - of the files which are sensitive and we
40:50 - don't want to push them everywhere uh
40:53 - files like which holds uh API Keys which
40:56 - are very sensitive or maybe some
40:57 - passwords or something similar we can
40:59 - actually keep them totally separate so
41:01 - that we don't have to mention about hey
41:03 - don't track this file don't track this
41:04 - file again and again and we can work
41:06 - with that we'll study a little bit about
41:08 - the git log documentation and we're
41:10 - going to see bit about how the hashing
41:12 - are done what folders are there it's a
41:14 - little bit it looks like a little bit
41:15 - lot but it's not there these are just
41:17 - the concept you'll breee through them no
41:19 - worries at all so first let me share the
41:21 - screen with you and let's go with this
41:24 - the first idea is to figure out that how
41:26 - does uh get came to know about my uh
41:30 - name my email and all these details
41:32 - about this and this will be very helpful
41:34 - for you to know that how this actually
41:35 - goes on in order to first uh get about
41:38 - this uh first of all let me go through
41:40 - the notes and work with that so first
41:44 - let's assume uh let's understand what is
41:46 - there to study in this one uh the first
41:48 - thing that we're going to study about is
41:50 - this command and this command is not
41:52 - just Al lone one uh there are a couple
41:53 - of others as well the command is really
41:55 - simple it says get config fig and then
41:59 - there are two ways of how you can
42:00 - configure the configuration file one is
42:02 - globally that means U it's systemwide
42:05 - anytime you make any git repository or
42:07 - something this is going to be interacted
42:09 - with the global file but there is also a
42:12 - case that you can keep your
42:13 - configuration files local to that
42:15 - particular repository as well yes that's
42:17 - the case as well but usually what I've
42:19 - seen is anybody who is working with the
42:21 - git they like to keep everything as a
42:23 - global especially the name and email and
42:26 - we'll see that how we can can actually
42:27 - configure the editor and which is the
42:29 - code in my case vs code uh that's the
42:31 - command line name for it the code and
42:33 - then we're going to see about these uh
42:35 - changes as well first uh let's go ahead
42:37 - and see that how the documentation looks
42:39 - like for this config and we'll come back
42:40 - onto this one so this is the
42:43 - documentation of the config uh not
42:45 - really the best or easiest one but it's
42:47 - easy to find you can just click on the
42:49 - reference manual and this is where it is
42:51 - the config so just click on
42:54 - this and this is how it looks like
42:57 - uh get config get and set repositories
43:00 - or Global options we'll be focusing
43:01 - majorly on the global option but as you
43:04 - can see uh yep there there is no
43:07 - shortage of these things and it can go
43:10 - really really complex we have so many
43:12 - options and if you look at the scroll
43:14 - bar yes you'll be scared a little that
43:16 - oh my goodness do I have to learn all of
43:17 - this uh gratefully no uh we won't be
43:21 - needing all of this to work on with this
43:23 - uh first of all let me show you that how
43:25 - you can set up your username and email
43:26 - with will refer to this documentation
43:29 - it's much easier and this is from the
43:31 - GitHub itself and the best part is
43:33 - whether you choose Mac windows or Linux
43:35 - the options are exactly same the
43:37 - commands are exactly same so you can
43:39 - open up anytime your uh GitHub or this
43:42 - documentation and can write down this
43:44 - command get config and then we have to
43:46 - provide D- Global and majorly you'll be
43:49 - setting two things user.name and then
43:53 - user. email these are the two options
43:55 - that you have to set so that get
43:57 - whenever makes any commit or any push
43:59 - knows about your name optionally if you
44:01 - provide the email as well that is also a
44:04 - best option and my recommendation is to
44:06 - provide everything inside the double
44:07 - codes because usually we have first name
44:10 - last name maybe a middle name so git
44:12 - really doesn't know that when to end
44:14 - these things if you have just one word a
44:15 - letter that you want to use then that's
44:17 - fine uh but usually we have spaces so
44:20 - whenever there's a space in it uh it's
44:22 - recommended that you use like this let's
44:24 - go ahead and learn about these commands
44:26 - actually just show you that how you can
44:27 - write this command and where does the
44:29 - git actually write this command that's
44:30 - the most important so the commands are
44:32 - pretty simple you can just go ahead and
44:33 - say git config and the options are
44:36 - pretty simple Global and then you can
44:37 - just go ahead and say I want to use user
44:39 - the first option isame so you can just
44:42 - go ahead and write your name whatever
44:44 - your name is let's just say your name
44:45 - ises so you can just go ahead and use
44:47 - that I'm not going to run this command
44:49 - because my username is already set once
44:52 - you're done with this command then go
44:53 - ahead and use another command which is
44:55 - user. email Emil and in this you
44:58 - obviously have to provide your email so
45:00 - oops let's go here and we can just
45:03 - remove this and use your email so
45:05 - whatever your email is uh just go ahead
45:07 - and provide that for example let just
45:08 - say I have this one just go ahead and
45:10 - provide your email now this actually
45:13 - brings us to the option that yes we can
45:14 - go ahead and provide exactly same
45:16 - commands as you can see here user.name
45:18 - user. email now another command that we
45:21 - are going to work through with this is
45:23 - this one so I want to change my code
45:25 - editor so this is the command that you
45:27 - should always remember the problem with
45:29 - the default is since git is Linux
45:32 - friendly first it usually opens up the
45:34 - Wim which is not so cool editor for the
45:36 - beginners to get started it has its own
45:39 - learning curve so I recommend everybody
45:41 - to just go ahead and change it to as a
45:43 - default code Editor to the code or vs
45:45 - code now there is a catch with this one
45:48 - as well so let me walk you through with
45:49 - that first if you go ahead and open up
45:52 - your vs code uh sometimes it is possible
45:55 - that while installing the vs code your
45:57 - terminal might not be aware of this
45:59 - command so all you have to do is press
46:01 - command shift p or if you're on Windows
46:03 - control shift p and it opens up the
46:06 - panel here and just go ahead and write
46:07 - code here uh just when you write the
46:10 - code it will show you a command which
46:12 - says install code command in path what
46:14 - this is going to do is it's going to
46:16 - make sure that your computer is aware
46:18 - about a a command which is in the path
46:21 - and installs the code there without this
46:24 - the whole command that we are going to
46:25 - about to give to
46:27 - the V to the git is not going to work so
46:29 - make sure you aware of this one all
46:31 - right once we done with this now let's
46:33 - go ahead and see the command in action
46:35 - that is going to help me to set and
46:38 - configure my code edor so this is the
46:40 - command core. editor and by the way
46:43 - there are other ways of setting the code
46:44 - edor you can just look at the Google on
46:46 - it and you can set multiple other
46:48 - editors maybe you want Sublime Text
46:49 - maybe you want something else you can go
46:51 - with that uh make sure you also pass an
46:53 - option of-- weight so that it not only
46:56 - just open opens up the code editor it
46:58 - waits there for a moment so that you can
47:00 - write your things and as soon as you
47:01 - close the file then it starts processing
47:04 - the work so that's the whole idea behind
47:05 - writing the dh- weight so once you're
47:08 - done with this uh that's it that's the
47:09 - whole thing now moving back onto the
47:12 - notes now that you are aware that how
47:14 - you can set up all these things I highly
47:15 - recommend that at this point of time
47:17 - just pause the video and go back onto
47:19 - your repository create one more file uh
47:21 - add that commit that and try to uh just
47:24 - push that so that's the whole idea not
47:26 - push but at least commit that okay now
47:29 - moving on uh what we saw in in just a
47:32 - moment ago that uh we do have this git
47:34 - login online we discussed about this
47:36 - command uh just a while ago in case you
47:38 - remember uh we worked on through this
47:40 - one so let me go ahead and remove this
47:43 - uh git log online on line not online uh
47:46 - one line it gives me the logs of the git
47:49 - uh in just one line so obviously you
47:51 - might be wondering that do I have more
47:53 - options onto this one absolutely you do
47:56 - have uh let's go ahead back into this
47:58 - one and just just go ahead and look for
48:01 - the log here it's not easy to find so I
48:02 - always go for uh control F find that and
48:06 - there we go we can see the log here and
48:08 - if I just go ahead and click on this
48:10 - there are so many options that I can
48:11 - work with uh just showing you a few of
48:14 - them uh we have options like f diff log
48:18 - size start there's so much of them uh
48:22 - let me zoom out a little bit and let's
48:25 - just find out the one that we are using
48:27 - which is one line uh there we go so this
48:31 - is one line option that we have let's
48:35 - go the first one here the second one and
48:39 - there we go so this is the one that we
48:40 - have been using but as you can see there
48:42 - are so many more options so this is the
48:44 - one that we have been using D- one line
48:47 - option but as you can see we have
48:48 - options for encoding we have options for
48:51 - tab expand I've never used this notes
48:54 - there's so many options and honestly no
48:56 - nobody has ever used them there are only
48:58 - few which are being used quite Handful
49:00 - in your organization or in your workflow
49:02 - you always go with that Allah right left
49:05 - branches graphs pretty formats all
49:08 - medium short full like there's so much
49:12 - of these
49:14 - options and uh honestly nobody's aware
49:16 - of this but just wanted to show you that
49:18 - how the documentation actually looks
49:19 - like for this all right moving on so
49:23 - let's go ahead and uh go with the notes
49:26 - so the next thing thing that we are
49:27 - going to learn about is the git ignore
49:29 - so as we can see that the git ignore is
49:31 - one very special kind of a file uh which
49:34 - is read by the git itself and you have
49:36 - to create this file so let's go ahead
49:38 - and create this file I'll first go ahead
49:40 - and check where are the things so I'm
49:42 - into to this test one.txt and text 2.txt
49:46 - now I want to create one more file and
49:49 - this one is going to be having a very
49:50 - special name which is
49:53 - dogit
49:54 - ignore and yes uh should be lowercased
49:57 - and it should start with a DOT this is a
50:00 - requirement no exception at all once you
50:02 - go ahead and create a dogit ignore file
50:05 - uh you'll see that in our code editor uh
50:07 - this file actually is available here and
50:10 - right now this file has nothing at all
50:12 - so what's the point of having this file
50:15 - now first you need to understand that
50:16 - whenever you have these kinds of files
50:19 - uh whenever you're are building any big
50:20 - project there will be a file known as
50:23 - environment variables and this file
50:25 - holds all the sensitive information like
50:28 - your API keys and if these API Keys gets
50:30 - leaked out anybody can misuse your
50:32 - system if these are AWS keys somebody
50:34 - can spin off machine bigger machine can
50:36 - lead to the bill if these keys are open
50:38 - API keys or open AI keys somebody can
50:41 - make a lot of requests and generate a
50:43 - good bill for the open AI so you get the
50:45 - point there are some sensitive
50:46 - information which we want to keep
50:48 - separate and safe for example let's just
50:50 - say I have one uhv file very common file
50:53 - to have in this and let's just say this
50:55 - is my
50:57 - mongodb URI and I'm going to go ahead
51:00 - and say this is my uh test URL path
51:04 - whatever that is I don't want this file
51:06 - to keep on going but right now the
51:08 - problem is that if I go ahead and check
51:10 - the git status uh notice here if I go
51:13 - ahead and work with the git status it
51:15 - says that hey there are couple of files
51:17 - which are untracked this vs code don't
51:19 - worry don't bother about it this is the
51:21 - vs code configuration file don't worry
51:23 - at all but I don't want this file to be
51:25 - keep tracked of it or it should go about
51:27 - it also this EnV file since it contains
51:30 - the sensitive information all the time
51:32 - when I go ahead and work with my
51:33 - directory then I have to say git ad and
51:36 - very carefully that hey I want to worry
51:38 - about this git ignore and VSS code and
51:40 - maybe I've created uh five different
51:42 - files more let's just go ahead and do
51:44 - that that would be super cool let's go
51:46 - ahead and say touch and we're going to
51:48 - go ahead how many files do we have uh
51:50 - one and two let's go ahead and say that
51:53 - I want to create one more test 3.txt
51:57 - and maybe there is one more and this is
51:59 - going to be test 4.
52:02 - txt okay now let's check the git status
52:05 - again if I go ahead and run the git
52:06 - status I have so many files that I have
52:09 - to monitor and at this exact point I
52:11 - would love to use something known as git
52:13 - add dot so that it adds all the file
52:15 - that I'm creating and when we working
52:17 - with something like JavaScript
52:18 - Frameworks there are thousands of node
52:20 - files sometimes this option is better
52:22 - choice but I cannot do this because hey
52:25 - there's there's some stuff going on so
52:27 - the point is that you can just go ahead
52:29 - and come into this git ignore file and
52:31 - mention all the files which you say that
52:33 - hey I don't want you to keep a track of
52:35 - them completely ignore them out of the
52:38 - git ecosystem so we can just go ahead
52:40 - and write EnV just like that exactly the
52:43 - file name if you have more folders name
52:45 - you can go ahead and write folder name
52:46 - for example there is a folder slash just
52:48 - go ahead and write it like that most
52:50 - commonly you'll see something like
52:52 - nodecore modules like this ignore all
52:55 - the files and this entire folder so it's
52:57 - a common thing now the moment I enter
52:59 - all these things into this let's check
53:02 - what happens when I run the git status
53:03 - command again now notice here in the git
53:06 - status and if I compare it with the
53:08 - above one previously it was keeping a
53:09 - track of EnV and now it's not keeping a
53:12 - track ofv I also don't want that this vs
53:16 - code since this is just my personal
53:18 - folder nobody should be keeping a track
53:20 - of this one so I'm going to go ahead and
53:22 - say I'll say uh VSS code and this entire
53:25 - folder I don't want this folder to be
53:26 - tracked up let's see what happens when I
53:29 - go ahead and run the git status again
53:31 - now it's keeping a track of git ignore
53:33 - which obviously we want to push and it's
53:35 - also keeping a track of all these new
53:37 - files that we have so pretty good let's
53:39 - go ahead and try to run this thing again
53:41 - and you can do this again with me
53:42 - because you have already set your
53:44 - username and your email now you'll be
53:46 - able to follow me along so let's go
53:48 - ahead and say get add and I want to add
53:49 - all these files so let's go ahead and
53:51 - use a shortcut git ad there we go let's
53:54 - check the git status what happens now so
53:56 - now it's keeping a track of all these
53:58 - files they are in the staging phase
53:59 - that's our intermediatory phase we can
54:02 - unstage we don't want to let's go ahead
54:04 - and commit this now let's go ahead and
54:06 - run the git commit and once I do the git
54:09 - commit no dasm option if I just hit
54:11 - enter now now it's it is going to open
54:14 - up this vs code editor and the commit
54:17 - file notice here the file is commit unor
54:19 - edit MSG keep this note here I'm going
54:22 - to show you where this file actually
54:23 - exist this is exactly where I want to be
54:26 - and this is exactly the file which you
54:27 - might have opened up if you accidentally
54:29 - have run the command without configuring
54:32 - your code editor so that's that's a
54:33 - mistake uh be aware of this now I can
54:36 - write this message here and again don't
54:38 - worry about these hash these are all
54:40 - comments they never go inside the commit
54:42 - message so you can ignore them safely if
54:44 - you wish you can delete them
54:46 - but sorry but let's just keep that that
54:50 - was unintentional but happens when you
54:52 - do record videos anyways uh let's go
54:55 - ahead and work with this now let let's
54:56 - go ahead and write a message for
54:58 - this and this is my third commit if I'm
55:01 - not wrong and I'm going to
55:03 - say
55:05 - add third and fourth
55:10 - file and again we are following the same
55:12 - uh convention that we do give command to
55:15 - the codebase hey do hey codebase do this
55:18 - stuff once I save this and close this
55:21 - you will notice in this uh we can simply
55:24 - uh no don't show any notification but
55:26 - here we can see the commit is performed
55:29 - uh nicely and let's go ahead and do the
55:31 - git
55:33 - log and we can see add third and fourth
55:38 - whatever that is third and fourth file
55:40 - or whatever that is but we can see we
55:42 - are able to successfully do all of this
55:45 - but there is one more thing that we need
55:46 - to worry
55:48 - about and not just one actually couple
55:50 - of things which probably might be
55:52 - bothering you probably not be bothering
55:53 - you but I'll give you these bothering
55:55 - question first and foremost uh the
55:57 - question is I know that there is a g
56:00 - ignore file but how will I know in
56:03 - thousands and thousands of files in my
56:05 - project that what should I write in this
56:07 - G ignore and thankfully you can just do
56:10 - a Google uh for this keyword which says
56:13 - get ignore generator and yes folks of
56:15 - the internet are always great and they
56:18 - have given us so many of these
56:19 - generators all of them does exactly the
56:21 - same let's choose the second one first
56:23 - one whichever you like feel free to
56:24 - choose them let's just say you are
56:26 - working on node project just go ahead
56:28 - and click on the Node and just simply
56:30 - say create and it will give you a
56:32 - pre-generated template which simply
56:35 - gives you that commonly ignored files
56:37 - and you're going to see that yes there's
56:39 - a EnV here which are being ignored so
56:41 - most of them are pretty good and it's
56:44 - just not about node it's just I work
56:45 - mostly on that you can just go ahead and
56:48 - look for the Django files if you're
56:50 - working in that ecosystem so yes uh
56:53 - these generators are available even
56:54 - there are vs code plugins for these
56:56 - generator so anytime you're working with
56:57 - this it's a good idea that you come up
56:59 - here and just look for whatever you are
57:01 - working whatever you're coding and again
57:03 - by the way I can show you more as
57:05 - well there's the first one uh by topal
57:09 - and you can see that hey if I go ahead
57:11 - they all give the same
57:13 - file they're all being same so you can
57:15 - see this is how you can just copy and
57:17 - paste this one so yes don't worry about
57:20 - uh having the git ignore file it's
57:22 - totally fine and totally okay uh to copy
57:24 - paste the things here
57:26 - all right another thing which might be
57:29 - might not be bothering you is we studied
57:32 - about this one thing which is this one
57:36 - git config and if we are providing the
57:39 - things like user.name user. email there
57:42 - is 100% 100% case that this is getting
57:46 - stored in some or the other file where
57:48 - is that file I want to see that file
57:51 - maybe you don't want to but I want to
57:52 - see that file so that I can know where
57:54 - the things are actually going and of
57:55 - course so we're going to do that for
57:57 - this first of all we need to hit the
57:59 - root of the Mac or if you're in Linux
58:01 - again the same command all you have to
58:03 - do is hit the CD this is the home
58:05 - directory by the way you can check this
58:07 - out this is my home directory of the
58:10 - entire Pro of the Entire
58:12 - Computer in the windows it's usually the
58:15 - C drive or the users drive wherever you
58:17 - are you can figure that out and in here
58:20 - what we can do is we can just run the
58:22 - cat command onto a very special file
58:24 - known as Dot and it's known as git
58:26 - config this is the global configuration
58:28 - file if I go ahead and hit enter onto
58:31 - this one now you can see that it gives
58:33 - me name and it gives me email it gives
58:36 - me the signin key which obviously I'm
58:38 - going to blur out this is my signin key
58:40 - which I use to sign in into the GitHub
58:43 - account but yeah this is how it looks
58:44 - like and also you might have noticed
58:46 - that it says editor is code-- we so by
58:49 - the way it has a lot of blocks like the
58:51 - user block the commit block the gpg
58:53 - block and there can be other blocks as
58:55 - well which can work through with that
58:57 - I'm going to go ahead and hide this
58:58 - because I don't want you to show uh my
59:01 - gpg keys and all these things but yes
59:03 - the whole idea is that everything is
59:05 - stored in some file and if any time you
59:07 - think that I don't remember the command
59:08 - or something you can literally go into
59:10 - this file and change it there is nothing
59:12 - wrong with that it's totally a
59:14 - configuration file that's it all right
59:16 - so moving on a couple of things behind
59:18 - the scene theory that I want to share
59:20 - with you these are really interesting
59:21 - ones as
59:23 - well so how does the commit work now
59:25 - that we have seen that couple of commits
59:27 - actually work so if I go ahead and check
59:28 - out my uh git section here and the git
59:32 - we can see we have two three commits
59:34 - which are going on and we can uh work
59:35 - through with that by simply running the
59:37 - command uh git log online first of all
59:40 - we need to go back onto this folder let
59:42 - me just go into this
59:44 - folder and for this let's go ahead and
59:47 - drag and drop this I'll just go ahead
59:49 - and say yep that's the one I
59:52 - want and let's go ahead and do a quick
59:55 - LS get one let's go into the CD git one
59:59 - I love these suggestions let's try the
60:02 - command again which
60:04 - is yeah this
60:07 - one and we can see that these are the
60:09 - commits and we have no idea but somebody
60:12 - saying head is pointing towards master I
60:14 - have no idea what that is I really want
60:17 - to explore this let's go up here and try
60:19 - to see what what happens with these
60:21 - commit messages so in the world and the
60:24 - ecosystem of the git every commit is
60:27 - dependent on the previous commit except
60:29 - the first commit and that's exactly is
60:31 - mentioned in these notes as you can see
60:33 - whenever you make a commit and how does
60:35 - a commit is comprised of if you look at
60:37 - here there is a really long unique ID up
60:42 - here this long unique ID is uh known as
60:46 - the hash and hash is generated it's
60:48 - nothing just a long uh combination of
60:51 - letters and numbers uh so it's is
60:53 - generated uniquely by some algorithms
60:55 - known as shaan and couple of other
60:57 - algorithms as well so it is comprised of
60:59 - this a commit message and some
61:01 - information about it but what's not
61:04 - being shown here that the commit is
61:06 - always dependent on the previous commit
61:08 - as well because it's a it's a tracking
61:09 - mechanism which helps us to track what
61:12 - happened between the previous commit the
61:14 - previous checkpoint and the next
61:15 - checkpoint and this is exactly I've
61:17 - tried to present here uh in the
61:19 - demonstration so this is our first
61:21 - commit every commit will definitely get
61:23 - a hash but there is also an information
61:26 - about the parent like what is your
61:28 - previous commit who is your previous in
61:31 - the very first commit the parent pointer
61:33 - yes this is exactly a pointer points
61:35 - towards the null that hey I'm the very
61:37 - first commit I'm not dependent on anyone
61:40 - and apart from this couple of other
61:41 - information is also stored like uh what
61:44 - was the system what was the time what
61:45 - was the user what was the email and all
61:47 - these things so this is all is being
61:49 - captured inside the info itself whenever
61:52 - the second commit is made you obviously
61:55 - generate a hat hash but this hash is
61:57 - generated based on the previous hash the
61:59 - previous parent information and some of
62:02 - the chunks of the info not majorly but
62:04 - it's heavily dependent on the hash and
62:05 - the previous commit and this parent is
62:09 - going to be pointed towards
62:10 - automatically towards the previous one
62:12 - and this is exactly the mechanism which
62:15 - helps you to go back in time or in the
62:17 - previous checkpoint so that you can just
62:19 - restore the file information into the
62:21 - previous saved information and the third
62:24 - one goes exactly like this we have a
62:26 - hash we have a parent which will Point
62:27 - towards the previous one and we have the
62:29 - information so pretty simple stuff but
62:32 - what's fun is actually to found this
62:35 - ability to check all these hashes let me
62:37 - show you how we can do that now if I go
62:40 - into this folder what you're going to
62:41 - notice is I can do a LS all right that's
62:45 - good but what you'll notice is I can
62:47 - also do an ls- LA which is a command to
62:50 - give me a long listing and show me all
62:52 - the hidden files as well and what we can
62:55 - see now is is there is a folder known as
62:57 - git and Yep this is a directory yeah
63:00 - that's nice can I go into this directory
63:03 - of course there is nobody stopping you
63:04 - to go into this one it's your system
63:06 - let's go ahead and say that I want to go
63:08 - inside this git and if I go into this
63:11 - git and do in LS I can see so many of
63:13 - these thing one file which I've Just
63:15 - Seen is commit unor edit MSG the message
63:18 - file remember the file which we opened
63:20 - up while working with the commit when we
63:23 - didn't pass the message DM exactly that
63:26 - file but not only that we have some of
63:27 - the folders known as hooks uh objects
63:30 - refs index head and some of these files
63:33 - as well the better structure that we can
63:35 - understand here is doing in Long listing
63:37 - so that we can see some of them are
63:39 - files and some of them are folder so as
63:41 - we can see these all things are
63:45 - file this all thing and including the
63:47 - index one these are all the files but
63:50 - here the hooks and the
63:53 - info logs object these are direct
63:56 - Ries and what's the fun if we cannot go
64:00 - inside these folder so what I've done is
64:02 - inside the code editor I have actually
64:05 - opened up so that I can see all the dot
64:07 - files by the way you can do that pretty
64:08 - easily by opening up command shift p and
64:11 - uh if I or not just command shift B if I
64:14 - just go ahead and press command and
64:16 - comma or on the Windows control and
64:19 - comma you can see that this option is
64:20 - there which says uh files exclude file
64:23 - and here you can see the dot uh git is
64:25 - is there just go ahead and Mark an x on
64:27 - that just remove it and that's it you'll
64:29 - be able to see all of your hidden
64:31 - folders anyways the whole idea now is
64:34 - that can I go into this git folder and
64:35 - explore these things so if I go ahead
64:37 - and zoom this a tiny bit more we can see
64:40 - that all these are folders and some of
64:42 - them are commit edit messages this is
64:44 - exactly the file that we opens up when
64:46 - we write these messages we do have some
64:48 - of the things config the core
64:50 - configuration which is repository level
64:52 - not the global level we have the file
64:55 - which are descriptions we don't want to
64:56 - worry about that as of now it's an
64:58 - unnamed repository we also have this
65:01 - interesting thing which is head which is
65:03 - notice here is pointing towards the
65:06 - master as I mentioned in the Git You Are
65:08 - Always On some Branch we are right now
65:11 - by default the branch master and that's
65:13 - what this head is pointing we'll study
65:15 - about the head in the upcoming videos
65:16 - but right now this is enough index uh we
65:19 - don't want to go into that because
65:20 - that's a file we don't want to open
65:22 - right now it keeps everything in check
65:24 - but not only that
65:26 - you can also see that there are some
65:27 - other things as well most importantly
65:29 - the hooks this is one of the most
65:31 - advanced folder in the git and this is
65:34 - exactly if you have studied hooks in
65:36 - JavaScript or react or anywhere else
65:39 - this is exactly the same so if you want
65:41 - to execute some of the scripts or some
65:44 - of the some of the commands or some of
65:46 - the code which needs to execute just
65:48 - before the commit or just after the
65:50 - commit message or you want to control
65:52 - that the how the commit message actually
65:54 - goes out maybe you want to add the
65:55 - ticket IDs and you want to validate that
65:57 - whether whoever is committing the
65:59 - message is providing the ticket ID for
66:01 - solving this bug you can actually do all
66:03 - of this through here and a lot of
66:05 - companies does that and it's nothing uh
66:07 - these are just the samples here you can
66:08 - go ahead and change these samples like
66:10 - pre push so this is all the code that
66:13 - how you can write these code let me just
66:14 - zoom out a little so these are all the
66:16 - codes that how you can actually have an
66:19 - example hook script to verify before the
66:21 - push just the pre hook uh there is pre-
66:24 - rebase a lot of companies use rebase
66:26 - we'll talk about them later on it's a
66:28 - pretty nasty and scary command but we
66:30 - have Commit message if you want to
66:31 - control that how the commit message
66:33 - should look like you can write a hook
66:34 - for that this is a little bit out of the
66:37 - scope of this entire course or even any
66:39 - course at all uh but yes this is totally
66:42 - possible we do have info as well uh not
66:45 - going to be touching it much it's not
66:47 - useful for us as of now this is where we
66:49 - keep all the logs that what all happened
66:51 - in our repository if you just remove
66:53 - this everything is gone and again this
66:55 - head is not readable much as of now but
66:58 - some of the points we can read about
66:59 - like add third and fourth all the commit
67:01 - history actually goes into the head uh
67:04 - we do have some of the references as
67:05 - well like where the head is pointing the
67:07 - head is pointing towards Master as of
67:09 - now later on I'll show you how to change
67:11 - the branch and we'll come back here and
67:12 - we'll see that how this heads actually
67:14 - get changed so the software how Works
67:16 - internally is totally open to us and
67:18 - this is what I love absolutely about it
67:20 - so coming back on to the notes part so
67:22 - this is what we have studied into this
67:24 - particular video that how the commit
67:26 - message are being made and are being
67:28 - stored in our application that's a
67:30 - really fun part and I hope this actually
67:32 - gives you a more clarity of how the
67:34 - software Works internally and once you
67:36 - know this you get much more confidence
67:38 - of using the software in itself it's not
67:41 - really that hard in the next video we're
67:43 - going to be talking about the branches
67:44 - and what we I've been yelling around for
67:47 - some time about the master master master
67:49 - what is this master and what are these
67:51 - branches uh this is all what we're going
67:53 - to study in the next video hope you have
67:54 - enjoyed this video if you have enjoyed
67:56 - this uh do let me know in the comment
67:57 - section it really really motivates me to
67:59 - make more such videos that's it for this
68:01 - one let's catch up in the next
68:08 - one hey there everyone at here back
68:11 - again with another video and welcome to
68:13 - the git Series so we'll continue and in
68:16 - this video we're going to be focusing
68:17 - more on the git branches now this is
68:20 - really a fun topic and pretty awesome as
68:22 - well uh some of the portion of this
68:24 - video uh are considered as a little bit
68:27 - Advanced but not for us we're going to
68:28 - be just Bree through it we're going to
68:30 - flow through it and you'll be having so
68:32 - much fun so we'll learn about the
68:34 - branches we'll understand the concept
68:36 - behind it how it works behind the scene
68:38 - and you will get to know that how the
68:40 - collaborative environment works in the
68:41 - git it's pretty fun let's go ahead and
68:44 - get started and we'll do everything from
68:46 - scratch again we'll be initializing a
68:47 - repository we'll put some files and
68:49 - folders onto it and we'll start from
68:51 - there so what we're going to do is let
68:53 - me first share the screen because that's
68:55 - the most important part and let's go
68:57 - ahead and move into a new folder so that
69:00 - we can work on with this one so what
69:02 - I'll do is I'll open up my uh folder and
69:06 - I'll just move in here so this is where
69:08 - we have been working with the git one uh
69:10 - so far we have been working with this
69:12 - but now let me just go ahead and drag
69:14 - and drop the git 2 which was another
69:16 - folder uh just sitting ideal for us so
69:18 - I'll just drag and drop this one all
69:21 - right so this folder is open with us and
69:23 - let's start working with this first that
69:25 - how usually an application is designed
69:28 - so I'm going to go ahead and move into
69:32 - uh this folder here so just adjusting
69:34 - some stuff so let's go ahead and move on
69:36 - to One Directory back and if I do a
69:38 - quick LS I can see I'm still here I'm
69:41 - going to go one folder back and I'm
69:43 - going to see that we have git 2 this is
69:45 - the intentional folder where we want to
69:47 - go further let's go into git 2
69:51 - oops and we'll go into git two there
69:55 - here we go and if I do a quick LS
69:57 - nothing inside it so obviously the first
69:59 - step always is to initialize the gate so
70:02 - this time we can see the entire workflow
70:04 - happening around let's go ahead and work
70:06 - on with so we're going to go ahead and
70:08 - first check the status this is always a
70:10 - good idea make this a habit that always
70:12 - check the git status although we
70:14 - understand that it's not a git
70:15 - repository but it's a good idea to have
70:17 - it in your flow after that we know that
70:19 - we always run the command git in it to
70:21 - initialize the repository so there we go
70:24 - once we initialize this and check check
70:25 - the git status again we see that now we
70:28 - actually can understand some of the mode
70:30 - status like it says git status is on
70:34 - Branch master all right what is this
70:37 - master and what is this Branch concept
70:39 - and no commits yet okay we understand
70:41 - this part but what is this Branch here
70:44 - and what is this master even if I go up
70:46 - here and if you just shrink this uh
70:49 - little bit here uh just like that you
70:51 - can see on the bottom part of it it says
70:54 - Master here
70:55 - uh so this is pretty nice and
70:57 - interesting we would love to get to know
70:58 - more about it that how this actually
71:00 - works so right now we can see we have
71:02 - nothing inside it let's go ahead and
71:03 - create a couple of files and folders so
71:05 - let's go ahead and say Hey I want to
71:07 - create one file and let's just go ahead
71:09 - and call this one as
71:11 - index.html I'm pretty sure you are aware
71:13 - of what HTML is and even if not it's
71:15 - just a basic text file you can create
71:17 - that as well but I think you are quite
71:18 - familiar with the HTML workflow it's a
71:20 - pretty basic one so we're going to just
71:22 - go ahead and create this one and let's
71:24 - see what happens if I go ahead and check
71:27 - the status get status and it says hey
71:29 - there's one file which I'm not tracking
71:32 - cool uh let's go ahead and add this file
71:34 - we know how to do this we can just go
71:35 - ahead and use a DOT or we can just go
71:37 - ahead and use index.html let's add this
71:40 - now we obviously know this is in the
71:42 - staging area we have already studied and
71:43 - discussed this if I go ahead and check
71:45 - the G status uh with this one we know
71:48 - that this is in the staging area what do
71:49 - we do after the staging area we just
71:52 - Commit This one we're going to go ahead
71:53 - and use the commit we obviously don't
71:55 - want to open up the VSS code so directly
71:57 - we'll be giving up uh- M as an option to
72:00 - provide a message and I'll just say add
72:03 - index file that's it my command I go
72:06 - ahead and enter this now my file is
72:08 - there if I go back up here I can see the
72:11 - index file is there I'm on the master
72:13 - one uh that's good but I'm not able to
72:15 - see the git folder and all the things
72:17 - that are happening so let's go ahead and
72:19 - use a command comma and just scroll a
72:22 - little bit where we see all of this so
72:23 - that you can see freshly how this
72:25 - actually works and now you can see
72:27 - there's a dogit folder which is maed as
72:30 - hey you can just go ahead and hide it
72:32 - completely I'll just go ahead and cross
72:34 - it off and that's it once I cross it off
72:37 - I can see my git folder which I'm pretty
72:38 - interested in and I can just open this
72:40 - up and have a discussion on this so now
72:42 - that you saw that firsthand all right so
72:46 - far we have seen all this thing but now
72:48 - here is the new command I can just go
72:50 - ahead and run a command and that is get
72:53 - Branch I'm not going to do anything
72:55 - outside of it no dasm nothing like that
72:58 - we'll just go ahead and learn about the
73:00 - git Branch what happens with this if I
73:02 - go ahead and hit enter it says an estri
73:05 - a pointer which is pointing towards the
73:07 - master all right pretty interesting how
73:10 - do we do with that what's this branch
73:12 - and let's go ahead and study with that
73:14 - about all of this through the notes
73:16 - these are the best way to understand
73:17 - this so branches what are these branches
73:20 - in the git folder uh branches you can
73:23 - just simply understand like an El
73:25 - alternative timeline now I don't know if
73:27 - you have watched the doctor strange
73:28 - recently or not pretty good movie but
73:30 - it's like a timeline and every single
73:32 - coder who is contributing to the same
73:34 - code base can be on its own timeline
73:38 - without affecting each other's timeline
73:39 - so for example there is always and
73:42 - always one branch on which you will be
73:44 - now by default git is a pretty old
73:46 - software that's why it always by default
73:48 - creates a master as a branch so this
73:51 - green one you can consider this as a
73:53 - master branch and all these nodes are
73:55 - the checkpoints or the commits that you
73:57 - have made now fun thing about this
73:59 - master branch is these days nobody likes
74:01 - to call it as Master there's some
74:03 - controversy around it we W want to go we
74:06 - don't want to go into that so it's
74:08 - pretty obvious that you will be asked to
74:09 - rename your branch as main again call it
74:12 - main Master Superman doesn't really
74:14 - matter just a branch name so this is our
74:16 - straightforward timeline and this is
74:18 - where we are sitting right now and
74:20 - that's why our pointer said that you are
74:22 - on the master branch pretty accurate now
74:26 - how do we create the alternative
74:28 - timeline and how can we work with that
74:30 - that's an interesting question so that's
74:32 - exactly what we'll be going and then
74:33 - we'll come back and talk about the head
74:35 - we will definitely keep an eye on where
74:36 - the head is pointing right now and then
74:39 - we'll come back first let's create a
74:40 - couple of branches uh walk through with
74:42 - them do some commits do some exercise
74:44 - with that that would be pretty fun let's
74:46 - go back right now it just says that you
74:49 - are on the master Branch okay and if I
74:51 - check the G status obviously there is
74:53 - nothing much it's just nothing
74:55 - so in the index file I'm going to go
74:57 - ahead and use an exclamatory sign and
74:58 - hit the tab it gives me a default so
75:00 - I'll just just go ahead and say uh get
75:03 - learning I'm just designing a web page
75:05 - not designing basically I'm just writing
75:07 - some text into this one
75:10 - so looks good as a project all right
75:15 - looks good now this is usually how I
75:17 - write the code now if I go ahead and
75:19 - check the git status and git status and
75:22 - it says there's one file which is
75:23 - modified I'm not
75:25 - uh having a history of it or I haven't
75:28 - made a checkpoint of this so would you
75:29 - like to make a checkpoint of course I
75:31 - would like to make a checkpoint so I'll
75:32 - just go ahead and say hey I would love
75:34 - to add the
75:35 - index.html okay and then I would like to
75:38 - add a commit on them by the way you can
75:39 - just work with the commit directly as
75:42 - well commit and add can be done in one
75:43 - command as well I'll walk you through
75:45 - with that one as well uh nothing of a
75:47 - big deal but I usually prefer twostep
75:48 - commit so there we go we have- M as an
75:51 - option and add index file and I'll just
75:54 - say
75:56 - update code for index file looks pretty
76:00 - good and I'm going to just go ahead and
76:02 - make a commit there we go now we are
76:04 - done pretty good exercise and we can see
76:06 - all the things are going but what's
76:08 - interesting is even if still I check
76:10 - what is git branch and there we go it
76:14 - still says pointing towards master and
76:17 - if I go ahead open up this git folder
76:20 - first of all notice this head I hope you
76:22 - can see that that's visible nicely
76:25 - notice here there's a head here and if I
76:27 - just click on this head it says ref head
76:30 - Master time to zoom out a little there
76:32 - we go uh you can see that it says head
76:35 - ref head Master we'll see that we'll
76:37 - check this file again one more time once
76:39 - we create more branches and also inside
76:42 - the ref you'll see the heads and if I
76:44 - open this up there's something known as
76:45 - Master what's inside that doesn't really
76:47 - matter it's just a unique code the Sha
76:49 - value doesn't really matter but it says
76:51 - Master now step one how do we create
76:54 - more branches is that's that's the most
76:56 - important thing there are a couple of
76:58 - ways actually how you create multiple
77:00 - branches and all of them are correct
77:03 - there is nothing absolutely wrong with
77:04 - that let's go ahead and start with the
77:06 - basic one so I'm going to go ahead and
77:08 - say get branch and let's just say there
77:10 - is another coder in my team who is
77:13 - working on the navigation bar and uh
77:16 - we'll be working on navigation bar so
77:17 - I'm going to go ahead and say Navar is
77:20 - the name of the branch now how do you
77:22 - pick up the branch name now that's
77:24 - totally internal up to the company you
77:26 - can call this as navbar you can call
77:27 - this as bug fix you can call this as a
77:29 - feature whatever you like you can name
77:32 - it whatever you like I'm going to go
77:33 - ahead and say git Branch Navar I hit
77:36 - enter and now let's check when I run the
77:38 - git Branch command it says okay my
77:41 - pointer is pointing towards the master
77:43 - but there is another branch that I can
77:45 - move on to and it's known as nav dashar
77:49 - if I go up here uh notice here the ref
77:51 - still head says Master but now we have
77:54 - another folder into it which says nav
77:57 - bar so yes head can be on the master or
77:59 - it can be on the nav bar but here the
78:02 - head is still pointing towards the
78:04 - master that is still not being changed
78:06 - because our pointer is pointing towards
78:08 - the master okay how do I move onto a
78:11 - different branch again there are
78:13 - multiple ways of doing so we'll be using
78:15 - the the most easiest one which is the
78:17 - git uh checkout and we'll be calling
78:19 - that I want to go to Navar the moment I
78:22 - say get checkout uh Navar I go ahead and
78:25 - hit enter now it's switched to Navar now
78:28 - what changes does it actually make first
78:30 - of all I would love to see the branch
78:31 - okay the pointer of course color is not
78:34 - a good idea in the terminal to check out
78:36 - that hey it's green now uh the most
78:38 - important thing is this pointer this
78:40 - pointer is now pointing oops the pointer
78:42 - is now pointing towards the Navar that's
78:44 - good let's see what happens here in the
78:47 - head uh the Navar is here uh the master
78:50 - is here both of them are here uh both of
78:52 - them actually are pointing towards the
78:53 - same thing because we have done anything
78:55 - in that other Branch but if I go ahead
78:57 - and check the head now the head is
79:00 - actually pointing towards the Navar so
79:02 - here I'm showing you the behind the
79:04 - scene details of how the git actually
79:05 - works internally on the command line and
79:08 - how these outputs actually comes
79:10 - in okay uh this looks good but
79:13 - technically I hope you can see that what
79:15 - is happening and I think our git uh get
79:19 - this one is going to help us to
79:21 - understand the things now we can see
79:22 - although we have created the branch but
79:24 - you can can see the navbar is here the
79:26 - master is here they both are pointing to
79:28 - the same location so let me tell you
79:30 - what is happening right now through the
79:31 - notes I think that would be much more
79:33 - easier to understand so this right now
79:37 - is our commit then we made one more
79:39 - commit and then we created one more
79:41 - Branch although we have created a branch
79:44 - but the code has never changed there is
79:46 - nothing which we have done here so even
79:48 - though there is an alternative timeline
79:49 - that is going on but that is also
79:51 - pointing actually to the same code
79:53 - itself so we haven't done nothing
79:55 - whether you call this Branch as navbar
79:57 - or Master they basically are doing
79:59 - exactly the same thing the code is
80:01 - exactly same so right now all of us are
80:03 - sitting at this position uh so we need
80:05 - to move forward in the time so we need
80:07 - to do some work inside uh this uh branch
80:11 - which is Master we need to also work a
80:13 - little bit on the nav bar so that we can
80:14 - see what differences they do make and uh
80:17 - does they affect each other's code
80:19 - something like that all right so
80:21 - currently we are on the nav bar so what
80:23 - we're going to do is now we the nav bar
80:25 - so we're going to go ahead and create a
80:27 - new file and since this guy is working
80:28 - on a nav bar let's go ahead and say that
80:31 - hey you create a nav bar HTML and we're
80:34 - going to go with that now we have a navb
80:36 - bar. HTML so I'm going to go ahead and
80:38 - say hey navbar this Navar requires its
80:41 - own code so I'm going to go ahead and
80:42 - simply have a nav and I'm going to add
80:44 - some bullet points into this so
80:45 - unordered list inside that list have
80:47 - some of the list items and we'll just
80:49 - have three of them uh basically I'm just
80:52 - writing nav bar here so what do we have
80:55 - home we will have about us and we'll
80:59 - have contact us pretty
81:00 - classic uh feel free to write any text
81:03 - inside it that's also exactly the same
81:05 - now that we have some of the text we
81:07 - have worked on our navigation bar maybe
81:09 - that's all is required it could be as
81:11 - complex as code as you can imagine but
81:13 - this is what I am having and currently
81:16 - where I am I'm on the nav bar let's go
81:17 - ahead and check out the git status if I
81:19 - go ahead and check this there is one nav
81:22 - bar which is untracked remember
81:25 - reminding it again I'm on the Navar
81:27 - Branch I'm going to go ahead and say hey
81:29 - let's just go ahead and add this uh this
81:31 - time this file name is navb bar. HTML
81:34 - added this and let's go ahead and Commit
81:36 - This so I'm going to go ahead and say um
81:39 - let's go ahead and add this commit
81:41 - message add navbar to
81:46 - codebase pretty
81:48 - good okay uh this is what we have done
81:50 - so far that we have added a Navar all
81:53 - right now let's see what happens and
81:55 - let's see what the branch situation is
81:57 - in this case it will be much much
81:59 - helpful to check out the git lens the
82:01 - plugin that I have mentioned earlier in
82:02 - the class now notice here the Navar is
82:05 - here the master is here so Navar has
82:07 - moved a little bit ahead and master is
82:10 - still at the same position all right
82:12 - let's go ahead and switch the branch and
82:13 - see what happens so how do I switch the
82:15 - branch again pretty easy you can just go
82:18 - ahead and do a good uh get checkout and
82:20 - instead of the nav bar we're going to go
82:22 - ahead and say hey let's go on to the
82:24 - master Master Branch the moment I switch
82:26 - to the master Branch look what happens
82:28 - to my code base the file which I made
82:31 - navbar is completely gone yep it's
82:34 - completely gone why is it gone simple
82:37 - reason because it was added by some
82:39 - another coded we haven't merged those
82:42 - branches he's working on his own
82:43 - timeline I am completely unaware of what
82:46 - he's doing let's just say I'm also here
82:48 - and I want to work on something so I'm
82:50 - going to go ahead and say that I'm
82:52 - working on the hero section of the
82:53 - website so I'm going to go ahead and say
82:55 - uh let's just go ahead and add a hero
82:57 - section let's add this and once I have
83:00 - this hero section and I should actually
83:03 - rename this it should be moreover rather
83:05 - hero section. HTML my bad and let's just
83:08 - go ahead and add this let's just open
83:11 - this
83:12 - file remove this remove this so how does
83:16 - a hero section look like we'll just go
83:18 - ahead and add a section uh we'll add an
83:21 - H1 onto this one and let's just add lurm
83:25 - 10 words there seems good like a hero
83:27 - section and what else maybe a paragraph
83:30 - with some lurm words of 20 yeah there we
83:33 - go so we have some laum but this is our
83:36 - hero section obviously what do you want
83:37 - to do now you want to commit this code
83:40 - let's just go ahead and say get add and
83:43 - we have this hero section. HTML added
83:46 - this let's just go ahead and do a commit
83:49 - and this time we're going to say add
83:51 - hero section
83:55 - come on hero section to the code base
83:57 - all right pretty good now what happens
83:59 - to the code base all right the hero
84:01 - section is here but the most interesting
84:04 - part is how does everything looks like
84:06 - when we change this let's do a
84:10 - checkout I want to do a checkout onto
84:12 - the
84:14 - Navar the moment I do a check out on the
84:16 - nav bar and I can see the Navar is here
84:19 - but hero section is gone and if I do a
84:21 - check out onto the master if I go ahead
84:24 - and check out the
84:26 - master and my bad it's it's supposed to
84:29 - be Master although AI can actually
84:31 - suggest me the commands that's really
84:34 - nice but if I go ahead and do this now
84:36 - my uh okay where am I I am switched to
84:39 - master so obviously hero section is here
84:41 - but so you get the idea you get the idea
84:44 - that we are having a completely
84:46 - different timeline so right now this
84:49 - main branch has moved into the time and
84:51 - have added some of the code to the code
84:53 - base on on the other hand this Branch
84:55 - who is representing the Navar has done
84:58 - working with the Navar so they are
85:00 - completely on different timeline
85:02 - completely different code bases
85:03 - completely different file and that's why
85:05 - I say it is so magical to work on with
85:08 - this the most important thing here to
85:10 - actually understand one thing which is
85:12 - about the head now head always points to
85:15 - where the branch is currently at now it
85:17 - is not always necessary that your head
85:19 - is pointing towards the end of the
85:21 - branch usually it does but you can
85:23 - actually allow your head to point one
85:25 - back as well because it's a checkpoint
85:27 - just like you can restore your game into
85:29 - the previous checkpoint yes exactly we
85:31 - can do with the code bases as well but
85:33 - one thing you need to understand that it
85:35 - the head the whole idea the concept of
85:37 - the head cames from uh these cassets
85:40 - where you have a head which plays onto
85:42 - that if you flip the cassets uh these
85:44 - head is still pointing towards wherever
85:46 - you left it last time so this is a head
85:49 - if you switch to the master Branch this
85:51 - is obviously going to point towards here
85:53 - but if you switch on to another some
85:55 - Branch your head is obviously going to
85:57 - point towards that Branch it's not a
86:00 - pretty difficult concept to understand
86:02 - it's just that wherever your branch is
86:03 - latest that's where it's going to be
86:05 - pointing so let's just go ahead and try
86:07 - out that where our branch is so let's go
86:09 - ahead and learn about it get Branch
86:12 - currently I'm on master so where my
86:14 - branch is pointing towards where the
86:16 - head is pointing the head is obviously
86:18 - towards the master and not just there
86:20 - are multiple commits into the M Master
86:22 - Branch as well so it's pointing towards
86:24 - the latest ref that's there is so we can
86:28 - see that we have nothing inside the tags
86:30 - as of now but heads can be on the master
86:32 - or can on the nav bar now this master as
86:36 - you can see let me just walk you through
86:38 - with the git log this is where the git
86:39 - logs are pretty important and we're
86:41 - going to go with the one line notice
86:43 - here the head is pointing towards this
86:45 - Branch 31 AE and that's exactly the file
86:48 - that we can see here so it could have
86:50 - pointed we can forcefully ask it that
86:53 - hey Point onto this one I don't want to
86:55 - see the latest comment I want to point
86:56 - towards the one back comment I'll show
86:58 - you the commands for that but it's
87:00 - completely doable so you get the idea
87:02 - where the head is it just points towards
87:04 - where the updated code base is or where
87:06 - the intentional code base is all right
87:09 - that's nice now let's go ahead and
87:10 - switch uh this one so I'll just close
87:12 - this so that it doesn't mess up the
87:14 - things let's go ahead and uh check out
87:16 - another Branch so we're going to go
87:17 - ahead and say get checkout and instead
87:19 - of the master we're going to go into the
87:21 - nav bar there we go now if I go ahead
87:23 - and do the git one line again notice
87:26 - here it's pointing towards the nav bar
87:29 - and uh this one obviously is gone so now
87:32 - if I open this up again and I check out
87:35 - where the head is the head is pointing
87:36 - towards this one you can just go ahead
87:38 - and check this one it's pointing towards
87:40 - the nav bar and this is where right now
87:42 - the head is all right quite a lot of
87:44 - in-depth detail now uh coming back onto
87:47 - the part that both of them are
87:48 - completely unaware of this and we have
87:51 - learned about this so this is the flow
87:53 - that we have worked on with so far so we
87:55 - learned about the git Branch command it
87:57 - shows me all the possible branches are
87:59 - available and we can just create a new
88:01 - Branch by simply saying git branch and
88:04 - bugfix usually this is the common syntax
88:06 - but call it navbar footer bugfix
88:08 - whatever you like you can just go with
88:09 - that and you can also use the command
88:11 - git switch or you can check use the
88:13 - command git checkout both of them almost
88:15 - does exactly the same it just moves you
88:18 - to another Branch so feel free to use
88:20 - git switch or you can use git uh
88:22 - checkout and git log we have already
88:24 - seen and we have done multiple times of
88:26 - the switching and all these commands now
88:28 - there are a couple of shortcuts that
88:29 - you'll see quite a lot around thrown in
88:31 - the entire git ecosystem what you can do
88:34 - is you can run the command of git switch
88:36 - Das C and then the name of the branch it
88:39 - will do the two things at the same time
88:41 - it will create a branch and move you
88:43 - there so yeah that's nice you can also
88:45 - do exactly same with the git checkout as
88:47 - well git checkout when used with the
88:50 - option of
88:51 - dashb uh B for Boy Yes Dash B and you
88:55 - can go for dark mode pink mode whatever
88:57 - you like and it will just create a new
88:59 - branch and will move you there as well
89:00 - so again shortcuts you can use branch
89:03 - and then checkout or you can use the
89:05 - checkout dasb to create a new Branch as
89:07 - well as move it to this one and always
89:10 - commit before switching to another
89:11 - branch is usually a good advice uh you
89:14 - can just go ahead and give it to
89:15 - yourself and always go to the git folder
89:17 - and check out if you're in initial phase
89:19 - to understand the concept of the head
89:20 - that where the head is pointing towards
89:23 - now comes up the interesting part is
89:26 - obviously we don't want to hang around
89:27 - with the different branches if I have to
89:29 - check out the navigation bar I have to
89:31 - move to entirely different branch and if
89:34 - I want to check out the hero section I
89:35 - have to move into uh the main branch or
89:38 - the master Branch so it's not a good
89:41 - thing it's not a good feasible workflow
89:43 - so we need to learn something about
89:44 - merging of the branches now merging of
89:46 - the branches a lot of beginners are
89:48 - afraid of it you don't need to be I'll
89:50 - walk you through with that so there are
89:52 - two types of merging one is the
89:54 - fastforward merging uh in which the main
89:56 - branch doesn't do much you just work
89:58 - entirely onto a separate branch and then
90:00 - you merge that Branch into the main
90:02 - pretty easy workflow with that uh this
90:04 - is the one where the master Branch
90:06 - remains as it is we don't change
90:08 - anything I'll show you that workflow as
90:09 - well but it's much more easier to
90:11 - actually merge this one but what's uh
90:14 - critical to understand is not
90:16 - fastforward merge in this case your
90:19 - alternative branch is also working your
90:21 - main branch is also working and
90:23 - eventually at some point of time you
90:25 - want to pack into this one so so I want
90:27 - to just go ahead and uh merge these
90:30 - things so in order to merge uh first and
90:33 - foremost make sure you are on the branch
90:35 - uh which you don't want to merge like uh
90:37 - whole idea is I'm bringing something
90:39 - into me so I should be on that platform
90:42 - it's not like you're on different
90:43 - platform and you're moving that same
90:44 - platform here the ideal situation is
90:46 - let's just go ahead and merge this all
90:49 - right so this is pretty easy to work on
90:50 - with this let's go ahead and have a
90:52 - practical of this one first of all where
90:54 - you are so if I go ahead and check out G
90:56 - Branch I'm on Navar not a good idea I
90:59 - want to be on master so that I can bring
91:01 - navbar into me so I'll just go ahead and
91:04 - say get check out and I'll move into
91:09 - master all right let's check it one more
91:11 - time now I'm in the master Branch but
91:14 - the problem is that how do I merge the
91:17 - nav bar in the master so that I can see
91:20 - the Navar onto this file now we have a
91:24 - special situation right now that nothing
91:25 - is conflicting each other whatever the
91:28 - branch I have created that Branch guy
91:30 - didn't worked on the F the same file
91:32 - that I have worked on he worked on
91:34 - completely different files so that is
91:36 - okay that is a good situation right now
91:38 - in order to merge this all I have to do
91:40 - is just run the command get merge and
91:43 - the name of the branch that you want to
91:45 - merge in this case I have a branch that
91:47 - is Navar once I go ahead and hit enter
91:49 - it's saying waiting for your editor now
91:52 - this is waiting because I haven't passed
91:54 - any message for this one the default
91:57 - message that it gives me is merge Branch
91:59 - Navar so obviously what we're doing
92:02 - right now is we all are moving into the
92:05 - new Zone that means this Branch was
92:07 - trending here this Branch was tring here
92:09 - so obviously we have to move forward in
92:11 - the time we cannot go back in the time
92:13 - so we are moving forward and in this
92:15 - particular commit we are taking this
92:17 - whole code in here but this particular
92:20 - commit also needs a message a commit
92:22 - message to work on with and that's
92:24 - exactly what is happening it is giving
92:25 - me that hey choose a message and usually
92:27 - the message looks like this merge Branch
92:29 - Navar so we are pulling all the code of
92:31 - merge branch in here pretty nice I'll go
92:34 - ahead and I'm happy with this message so
92:36 - I'll just save this and close this I'll
92:38 - go back and no I don't need any
92:40 - notification and notice what happened
92:42 - here it says navb bar. HTML there is
92:45 - seven something here there's a Plus+
92:48 - Plus+ plus here that means all the code
92:50 - that was there was the insertion code no
92:52 - deletion code was there one file was
92:54 - made changed and create mode and whatnot
92:58 - now I would love to check out the git
93:00 - logs that would be very very interesting
93:03 - okay so at this point everything was
93:05 - okay then there was this nav bar add nav
93:08 - bar to the code base so what happened
93:11 - here is all the commits that were made
93:13 - in this green zone so this is our Navar
93:16 - are also a part of now this main branch
93:18 - so anything that happened here is also
93:21 - coming in here okay so this na bar here
93:23 - then we worked and added the hero
93:25 - section to the code base that was in the
93:27 - main branch but now we have merged into
93:30 - this all of this now how does it looks
93:32 - like does it really look like these
93:33 - branches and all of that yes it looks
93:36 - exactly like that let me show you that
93:38 - even there are tools like uh git lens
93:40 - are going to show you this so notice
93:42 - here now this is exactly much much nicer
93:45 - to see and understand can I zoom this a
93:47 - little yep so notice here we were
93:50 - working here the commit was included the
93:52 - head was here then we merged out we went
93:55 - and we started to create a new branch
93:57 - which was Navar for bringing in the
93:59 - navigation bar in the meantime we worked
94:02 - on this one and there was one commit
94:03 - made that we wanted to work with the
94:05 - hero section and now we both are going
94:07 - in the future and are merging everything
94:09 - how nicely and how easily it was all
94:11 - done pretty nice pretty okay let's see
94:14 - the code base as well because that's
94:15 - where the interesting part is apart from
94:17 - the git now we have index which was
94:19 - already there we have the hero section
94:21 - which was already there and we have the
94:23 - nav bar as well so all the code that my
94:25 - friend has written or my colleague has
94:27 - written is now in here that is super
94:29 - super nice now although it's not really
94:32 - kind of a fun thing to do but a lot of
94:34 - companies does this thing is writing one
94:37 - more additional command and I'm going to
94:39 - just show you here uh it's not really
94:40 - fun not my favorite one but still a lot
94:42 - of companies has asked me to do so so I
94:45 - can just run a command git branch and
94:47 - the Dash D it's a pretty dangerous
94:50 - option that's why they call it as-h d uh
94:52 - fun stuff it is actually for deleting
94:54 - the branch and I want to delete the
94:55 - branch
94:57 - Navar what happens when I do this oh it
95:00 - deletes the Navar Branch what happens
95:03 - when I just go ahead and run the command
95:04 - get Branch now we have just one branch
95:07 - which is Master H interesting let's go
95:11 - ahead and check out this and git lens
95:14 - all right so git lens let me just go
95:15 - ahead and start this again so although
95:17 - in the git lens history we still have
95:19 - this oops my bad we all all have this
95:22 - once because it was previously made so
95:25 - we are not deleting the history of
95:26 - itself but now we are deleting this
95:28 - Branch because the branch has served its
95:30 - purpose it's no longer useful for us if
95:32 - we need we can create more branches and
95:35 - it works pretty fine so this is the
95:37 - entire part of how things are done uh
95:39 - can we do something more exactly same
95:42 - this time a little bit fast forward so
95:43 - that you can see things happening a
95:44 - little bit Fast Pace yeah so of course
95:47 - why not uh we know that we have just
95:49 - this Branch so how do we go ahead and
95:50 - create a new Branch we can do this this
95:53 - time uh using the git checkout dasb
95:55 - option and we want to create footer so
95:57 - let's go ahead and create a footer for
95:58 - this one and we switched into the new
96:01 - branch and we can just go ahead and see
96:03 - git branch and there we go now we are on
96:05 - the footer if we go back onto the code
96:07 - file it's exactly same uh thing which
96:09 - are pointing let's go ahead and create a
96:11 - new file let's go ahead and say this is
96:13 - footer. HTML go ahead and say hey this
96:16 - one is going to be footer there we go
96:20 - and nice footer um I'm running out of
96:23 - the words nice footer and what do
96:27 - usually people put 2024 copyright
96:30 - something like that we have done this
96:31 - now we want to obviously uh check out
96:34 - this one not check out yet uh add this
96:36 - one by the way we can do add and commit
96:39 - at the same time as well I'm not
96:40 - interested in that I'll just do one by
96:43 - one so I'll just add this one and I'll
96:46 - go ahead oops get commit and we'll just
96:50 - go ahead and use
96:53 - add footer section would be
96:56 - nice add footer section to the code base
96:58 - there we go we have done this uh so
97:00 - there is a commit now and U obviously
97:03 - our main branch is not aware of it let's
97:05 - go ahead and get check out we don't want
97:07 - to use dasb now I'll go move on to the
97:10 - master and hopefully Master is not aware
97:13 - of the footer whatever the work we have
97:15 - done Master is not aware of it but if I
97:17 - go ahead and check out this one uh get
97:19 - lens now we have another footer branch
97:22 - and we want to merge all the things that
97:24 - we have done the footer branch has done
97:26 - into this one so pretty simple in order
97:28 - to merge any branch what we can do is
97:30 - first uh see where we are so get branch
97:33 - is a nice option to run again I'm on the
97:35 - master I want to bring all the code from
97:37 - the footer let's go ahead and do that
97:40 - get uh
97:42 - merge and we're going to go ahead and
97:44 - bring in footer there we go since there
97:46 - are no conflicts uh it just merged it
97:50 - and uh there we go pretty nice and easy
97:53 - and we you can see the footer is here
97:54 - that's it now coming up on to the more
97:57 - complex stuff than this because this was
97:59 - all easy all easy and people are not
98:02 - afraid of the easy part and merging the
98:04 - branches is a tricky task let me show
98:07 - you why why it does so there are
98:11 - possible chances where things are not
98:14 - that much great things can go a little
98:16 - bit messy let me show you what happens
98:19 - when G tries to get into the conflict
98:21 - Zone and let me show you first what are
98:23 - these conflict zone so that you can
98:24 - understand exactly so where we are right
98:27 - now we are on to the master Branch so
98:31 - let's just say we're working on the
98:32 - master branch and we go ahead and check
98:34 - out the index and we go here and say
98:38 - footer
98:39 - added okay and what happens if somebody
98:44 - go ahead and push this comment nothing
98:46 - bad we can just go ahead and say we have
98:49 - to check the status first good practices
98:51 - we know that this is here so we can just
98:53 - go go ahead and say get add index so
98:57 - assume this is a really complex code uh
99:00 - we have added this we want to have a git
99:03 - commit and we'll just go
99:07 - here add footer
99:10 - in index
99:13 - file commit that pretty nice and easy
99:16 - now now comes the conflict part somebody
99:19 - did checked out the branches and
99:21 - somebody checked out onto the footer
99:23 - Branch
99:25 - get check out if I can write that and
99:29 - I'll go into the footer Branch okay now
99:33 - I'm in the footer
99:34 - branch and uh what I did here is once I
99:38 - checked into the footer Branch I
99:40 - actually went into the index file again
99:43 - and I see there's nothing there's
99:45 - nothing inside this Branch I went up
99:47 - here and I just simply said footer was
99:51 - added successfully
99:55 - all right so I hope you can see this is
99:57 - a point of conflict now we're also going
100:00 - to go ahead and add a commit let's go
100:02 - ahead and say get add index file this is
100:06 - the file that we want to add get add now
100:10 - this time we need to commit and we are
100:13 - going to go ahead and say something
100:15 - different as a
100:18 - commit update index file would be good
100:20 - message update index file file with
100:24 - footer code all right so we have done
100:27 - this now here's the interesting part we
100:30 - can go ahead and check out we are on the
100:32 - footer Branch so we can we can just go
100:34 - ahead and check out this first so we
100:36 - have added this one here I'll just close
100:38 - this let's check out the master branch
100:41 - and fun stuff here oops my bad have to
100:44 - write it properly Master Branch if I go
100:46 - into the master branch open this up
100:47 - footer added okay I close this I come
100:51 - back here and I go ahead and say get
100:53 - check Che out footer I go back here and
100:56 - I see the index file footer was added
100:59 - successfully this is a point of conflict
101:01 - and we need to discuss this how things
101:03 - actually happen so the whole point is so
101:06 - far we have been into this whole good
101:08 - situation whether the branch the main
101:10 - branch was not doing anything whole work
101:12 - was done on the another Branch so we
101:14 - just went ahead and merged all together
101:16 - and the timeline goes again like this
101:18 - this is pretty good interesting nothing
101:20 - bad and there is not fast forward merge
101:24 - which is in which the main branch is
101:25 - also working and uh another branch is
101:28 - also working but the whole point is they
101:30 - were working on the different files so
101:32 - there was nothing too much worried about
101:33 - we just made the comment but in the real
101:36 - world scenario this is where the things
101:38 - gets tricky and git so the whole idea is
101:41 - git always tries its best to resolve
101:44 - these conflicts right now we have a
101:45 - conflict but git tries automatically but
101:48 - git is not an AI and of course even AI
101:50 - cannot tell you which code to keep which
101:53 - code to delete so G tries its best to
101:55 - resolve the conflict but whenever
101:57 - there's such conflict happens we need to
101:59 - understand that how these conflicts are
102:00 - resolved and how the diagrams actually
102:02 - work on with this so first of all we
102:04 - need to understand this diagram here the
102:06 - green line or the head is actually going
102:08 - to be pointing towards this is the
102:10 - branch which you are on like for example
102:12 - we are on the master Branch we are
102:14 - trying to bring in the code from the
102:15 - footer so everything above these uh
102:18 - equal signs there will be a lot of equal
102:19 - sign I'll show you that in the code as
102:21 - well everything above here this is the
102:24 - part of the main branch and anything
102:26 - below these equal signs these are the
102:29 - part uh which are coming in from another
102:31 - branch and we have to learn how to we
102:34 - have to actually resolve this conflict
102:36 - and there's nothing to it its whole
102:38 - thing is that which part of the code you
102:39 - want to keep whether you want to keep
102:41 - this one whether you want to keep this
102:42 - one or you want to keep both it's
102:44 - totally up to you you can remove
102:46 - anything all these codes and there is no
102:48 - shortcut for this one you have to
102:49 - manually go into the code part and have
102:51 - to consult with the another friend that
102:52 - hey what your have done I have also done
102:54 - this work which part to keep or do you
102:56 - need to update your code and then send
102:58 - me uh can we merge the branch something
103:00 - like this so this needs to be a
103:01 - discussion so whole idea is whether you
103:03 - go ahead work with this and by the way
103:05 - uh you have to remove all these head
103:07 - whatever these fancy things are going to
103:09 - come up these equal signs and these ones
103:11 - just remove all of them just keep the
103:13 - code that you want to have save it and
103:15 - that's it so that's what it says keep
103:17 - whatever you want remove the marker and
103:19 - save and that's all it's going to do so
103:21 - yep it's not really that bad uh the
103:23 - whole thing is that people assume that
103:25 - it's going to happen automatically no it
103:27 - doesn't it doesn't happen automatically
103:29 - so let's go Ahad and check out where I
103:31 - am so I'm going to go ahead and work on
103:33 - with the branch I'm on footer I would
103:34 - love to check out on the master Branch
103:37 - so let's go ahead and work on with the
103:38 - master there we go uh what's the
103:41 - situation now Branch I am on master and
103:44 - there's code in the footer I would love
103:45 - to now um merge the branch so let's go
103:48 - ahead and say get merge and I want to
103:50 - merge the footer Branch pretty easy uh
103:53 - standard stuff once I do this it says uh
103:56 - Auto merging index conflict merge
103:58 - conflict index Auto merging failed fix
104:00 - conflict and then commit the result so
104:03 - notice here if I go ahead and open this
104:05 - up now your code dator looks a little
104:08 - different and depends on what is your
104:09 - default code editor there is also
104:11 - resolve in merge editor there's a merge
104:13 - editor here as well by the way so this
104:16 - is how it looks like a lot of people get
104:17 - afraid of this nothing to be afraid this
104:19 - is all all good so notice here it says
104:22 - these are you can by the way vs code
104:24 - also gives you really nice options at
104:26 - the top that you can accept the current
104:28 - change you can accept the incoming
104:29 - change or you can accept the both by the
104:31 - way this is good of vs code but I'll
104:33 - tell you what this is now notice here
104:35 - this head this is footer edit this was
104:37 - something which is in the master Branch
104:39 - footer edit successfully was the footer
104:41 - branch code now it's totally up to you
104:43 - which one you want to keep or you want
104:45 - to keep both totally your decision your
104:47 - call but notice here how similar this is
104:49 - from the diagram that we studied exactly
104:51 - the top part is coming up the stop part
104:53 - is coming up from your uh main branch
104:56 - Master Branch this everything uh be
104:59 - below the equal sign is coming up from
105:01 - the incoming Branch or incoming merge
105:04 - that you are going through with exactly
105:06 - same nothing nothing changed here now
105:09 - here's the interesting thing you can go
105:10 - ahead and click on these buttons I will
105:12 - not do that you try that because it's
105:14 - much more easier there I'll show you how
105:16 - the hard work hard part is being done so
105:18 - I can just come up here and say that hey
105:20 - let's just go ahead and remove this and
105:23 - we definitely want to remove this part
105:25 - we want to remove this part I think this
105:27 - footer message much is much more better
105:29 - so I'll just go ahead and remove this
105:30 - footer edit I'll remove this one here as
105:32 - well so this is best I'll go ahead and
105:35 - save this and I go back here and notice
105:38 - here it automatically fixes this up and
105:39 - I can just close this again and start
105:41 - this again and this is nice by the way
105:44 - in the vs code you can click on the
105:45 - resolve in merge editor and this opens
105:47 - up a a totally new editor and all of
105:49 - these things and it's much more easier
105:51 - it helps you to actually
105:53 - what's in the footer Branch what's in
105:54 - the master Branch I'll just say complete
105:56 - the merge uh complete with conflict
105:59 - yeah close with conflicts whatever that
106:02 - is I I'm not worried much about this
106:04 - code base here but you get the point
106:06 - which one you want to keep it's totally
106:07 - up to you now the branches are
106:09 - definitely merged so I can go ahead and
106:11 - check out this and definitely we do have
106:13 - some of the commits that we have to make
106:15 - by the way I can make these commits from
106:16 - here as well but I would love to make
106:18 - these commits uh merge footer branch and
106:21 - all of these things so we can just go
106:23 - ahead and add this since we have
106:25 - manually merged this so I'll just go
106:26 - ahead and say get add whatever that is
106:29 - and let's just go ahead and get
106:31 - commit and I'll be saying that we have a
106:37 - merged footer
106:41 - branch and there we go now everything
106:43 - looks good should be all okay and
106:47 - everything looks good the footer was
106:48 - added successfully is the message that
106:49 - we are accepting instead of the one so
106:52 - you have to pick one you can pick both
106:54 - as well nobody's stopping you but this
106:55 - is how it goes now interestingly let's
106:57 - go ahead and check out how the timeline
106:59 - looks like exactly same as before we
107:02 - started with this we went into this one
107:04 - now this is also we started with this
107:06 - one we did some commits and footer Index
107:08 - this is how we solve the conflicts so
107:11 - again a lot of people a lot of people
107:13 - I've seen are too much worried about the
107:15 - conflicts there is nothing to be worried
107:17 - it's just these extra equal signs and
107:20 - Arrow Signs which bothers a lot of
107:22 - people we does a pretty good job but
107:24 - yeah you got this one uh there's a lot
107:26 - more to discuss and talk about this but
107:28 - we're going to do that in the upcoming
107:30 - uh video right now I think this is more
107:32 - than enough for us for the discussion
107:34 - let's go ahead and catch up in the next
107:35 - video hope you're enjoying if you're
107:36 - enjoying do let me know in the comment
107:38 - section I'll catch you up in the next
107:44 - one folks my name is zes hope you're
107:48 - doing good and we are continuing our
107:49 - series on the gate and in this video
107:51 - we're going to learn just about the two
107:53 - commands uh you'll be using them often
107:56 - uh one quite more than the other the
107:58 - first is going to be git diff which
108:00 - tells about the differences and I'll
108:02 - talk more about this one and another one
108:05 - we are going to talk about is the
108:06 - stashing command now the stashing is
108:08 - also pretty interesting and a fun
108:09 - concept and you'll be using them more
108:11 - than you think about it my throat is
108:14 - little itchy but anyways let's go ahead
108:16 - and talk about them and one thing I
108:18 - would like to mention here is that the
108:20 - git diff command is something that you
108:22 - should watch out uh there are tons of
108:24 - flows of that I'll not talk about each
108:25 - and every flow but I'll give you enough
108:27 - of knowledge that you can figure out
108:28 - things on your own but be very careful
108:31 - about how you interpret these symbols
108:33 - here so I'll walk you through with that
108:34 - as well first of all let me share the
108:36 - screen with you we are on our notes
108:39 - section here and as you know uh this is
108:41 - where we have been working things and
108:43 - these are our directories that are
108:44 - working so uh pretty simple stuff that
108:46 - we're going through so first of all
108:48 - let's understand about the git div then
108:49 - we'll do the Practical we'll read about
108:51 - the git stash and we'll do the Practical
108:53 - just like we have always been doing all
108:55 - right so the first is the git diff now
108:57 - the git diff command shows you the
108:59 - differences and the one common thing
109:01 - that you're going to notice about this
109:03 - git div command is of course it shows
109:05 - the differences but it's not the
109:07 - difference between file a and file B
109:10 - that is the most common mistake G div
109:12 - command actually shows you the
109:13 - difference between the same file the
109:15 - file a and the file a the only
109:17 - difference is it shows you the version
109:20 - of that file in some X time and the Y
109:22 - time uh what do I mean by that simply
109:25 - let's just say you're working on a file
109:27 - and you have staged some changes now you
109:29 - want to compare how the file looked like
109:31 - when the things were not Stag and now
109:32 - they are in the stage so that's the
109:34 - comparison you want to do maybe the
109:36 - comparison is how does this exact same
109:38 - file looked like when I committed it two
109:40 - commits before and now I committed it
109:42 - how does those two commits actually
109:43 - compare or how does the same file looks
109:46 - between this branch and the other Branch
109:48 - that's the whole idea a lot of people
109:50 - make this mistake of assuming that the G
109:52 - diff is for comparing two different
109:53 - files although there are tools which can
109:56 - do that but this is not it it's meant
109:58 - for especially in the git
110:00 - ecosystem and uh one more important
110:02 - thing about the G div is how do you read
110:04 - the file this is where the common
110:06 - mistakes comes up and I don't blame it
110:08 - to anyone it's the symbols which makes
110:10 - it confusing now you'll see these kinds
110:12 - of minus minus symbol and these plus
110:15 - plus symbol quite often and this doesn't
110:17 - means that the minus means the things
110:19 - which are removed and the plus means
110:22 - things which are added and this is a
110:23 - common mistake I've seen especially for
110:25 - beginners or people who are in college
110:27 - fresh out of college that Plus+ means
110:29 - the files which are being added no no no
110:31 - no that is not how we read the things so
110:34 - notice here the a is going to be a
110:36 - representation of file one and B is also
110:39 - going to be file uh representation of
110:42 - for now we are calling it as file two
110:44 - but it's actually the same file I've
110:45 - mentioned this same file over the time
110:47 - but for the sake of Simplicity we are
110:49 - calling it as a file two obviously it is
110:51 - a file two now because the information
110:53 - got changed that's the only reason again
110:55 - remember the notes same file over the
110:57 - time okay hope we are clear now this
111:00 - file a is being represented by this
111:03 - minus symbol that's it yes it is
111:06 - represented by these symbols now it
111:07 - could be other symbols it could have be
111:09 - chosen as at the rate this could have
111:11 - been chosen as the hash there would be
111:13 - much less confusion but what can we say
111:16 - this is The Chosen One by the by the
111:18 - creator of the gate we cannot say
111:20 - anything to him he's legendary program
111:22 - grar so somehow he decided that for the
111:24 - file one I'll choose the minus minus
111:26 - symbol and file uh two I'll say plus
111:28 - plus symbol and I'll show you when we
111:30 - run the command we can sometimes
111:31 - actually interchange the branches so
111:34 - this is Branch a this is Branch b and
111:36 - sometimes when we interchange that these
111:37 - symbols get interchanged so never assume
111:39 - them that these are for removing the
111:41 - code and these are for the adding the
111:43 - code no they doesn't work like that so
111:45 - change in line and the little preview of
111:47 - it uh we are going to see that that how
111:49 - to read these things pretty easy pretty
111:51 - fun to watch around so we're go ahead
111:53 - and now do these things in the practical
111:55 - way I think that would be much more fun
111:57 - all right so what's our situation right
111:59 - now I would love to see by running the
112:01 - git status and we have nothing to commit
112:03 - we are on Master Branch now you can
112:05 - actually see the whole message and can
112:07 - understand it and our working tree is
112:09 - clean there is nothing which is changed
112:11 - and should be moved to the stage so now
112:12 - you're are actually able to understand
112:14 - this whole thing much much better and
112:16 - all these things are pretty good I love
112:17 - these blocks here by the way you can
112:19 - copy and paste I can you know that I can
112:21 - actually copy the ENT D thing and can
112:23 - make a documentation out of it that's
112:25 - fun anyways uh so let's go ahead and
112:28 - change the index file and do and see
112:31 - what things happen so we can see there
112:32 - is a lot of uh empty spaces here so I'm
112:35 - going to go ahead and remove these empty
112:37 - spaces all right and let's add something
112:39 - here so uh what should we add Navar at
112:42 - the top that would be fun let's go
112:45 - ahead I would oops I
112:49 - would love to add
112:53 - Navar my keyboard is a little far away
112:56 - because the iPad is taking a lot of
112:57 - space here I would love to na add Navar
113:00 - here and uh that's it and probably I'll
113:04 - just go ahead and say look good as
113:08 - project look good project so this is the
113:11 - thing that I have added now and
113:12 - obviously when I go ahead and check the
113:13 - git status again it says hey there's one
113:16 - file which is being modified so what we'
113:18 - love to do is uh we would love to add
113:21 - this file to the staging areas so the
113:23 - easiest thing is let's just go ahead and
113:25 - add the index HTML there we go now if I
113:28 - go ahead and check the status again we
113:29 - have something in the staging area and
113:31 - something uh outside as well which is
113:34 - not being changed now this is exactly
113:36 - the place where you can run the command
113:38 - of the G diff first of all let's go
113:39 - ahead and run the G diff command and see
113:41 - what happens when I run it in this exact
113:43 - mode nothing happens that's exactly how
113:46 - it is uh actually intended to work on
113:49 - with this because hey uh this is really
113:51 - basic command and on its own it doesn't
113:53 - do much on its own that hey what should
113:56 - I do or something like that now what
113:58 - happens is when you provide some of the
113:59 - options to show your intention what I
114:02 - really want to do so for example if I go
114:04 - ahead and let's just see the command
114:06 - line is suggesting us uh that hey just
114:08 - run this file and see what happens when
114:10 - I go ahead and do this it does nothing
114:12 - obviously uh but there are options my
114:14 - bad there are option like I can go ahead
114:16 - and say I want to learn about the staged
114:19 - that's the option which is the first
114:20 - useful option if I go ahead and use this
114:23 - uh there is a way how we should learn to
114:26 - read this message how it goes on let's
114:28 - go ahead and work on with this first of
114:30 - all Das Das staged obviously I want to
114:32 - compare the file which is in the current
114:34 - stage as as well as in the stage stage
114:36 - so there are two versions of the same
114:38 - file if there are multiple files
114:40 - obviously it will show us the multiple
114:41 - blocks of output for that so don't just
114:43 - assume that we can only check the output
114:45 - and the differences between the one file
114:47 - you can check with hundreds of files and
114:49 - even in the production everybody does
114:51 - that now it's says that hey this is a g
114:54 - diff which is checking between a file a
114:56 - and file B file a is also index.html and
115:00 - file B is also index.html and it's
115:03 - always going to be the case now there's
115:06 - also an indexing being given between the
115:08 - two uh commits and some messages around
115:10 - here don't want to go into too much of
115:11 - depth of it yes this is also a file code
115:15 - that git actually keeps it for themsel
115:17 - uh even without staging but let's not go
115:19 - into the file code as of now now the
115:21 - next thing is this minus minus minus
115:24 - represents the file a and the plus plus
115:26 - plus represents the file B this doesn't
115:28 - means that this is code removed or this
115:30 - is code being added the negative
115:32 - negative uh assumes that this is file
115:35 - before staging and this is after staging
115:37 - so this says that before it looked like
115:40 - this there was a lot of negative spaces
115:42 - or just the spaces and it said looks
115:44 - good as a project but as you moved on to
115:47 - the staging area you have changed this
115:48 - and this is the newer code or the newer
115:51 - version of the file that we have I would
115:53 - love to add Navar and looks good project
115:55 - so this is what we have done now just to
115:57 - show you that we can do a little bit
115:58 - more is let's go ahead and change the
116:00 - footer as well to just to see that how
116:03 - things actually looks so nice footer
116:05 - 2024 I don't like it probably uh add
116:11 - some awesome footer here that would be a
116:15 - better message now let's go ahead and
116:16 - Stage this one as well so staging is
116:19 - pretty simple we go ahead and say this
116:21 - time we want to add
116:22 - uh footer to the staging area and if I
116:24 - go ahead and check the git staging uh
116:27 - git status two files are being added now
116:28 - let's go ahead and check out the git
116:30 - diff as well and only option I'm
116:32 - providing here is dash dash staged okay
116:35 - let's see now we have a little bit of a
116:38 - different syntax uh and again notice
116:40 - here the colon so it's opening this up
116:42 - whole thing in the Vim mode don't worry
116:44 - I'll show you how to get out of the Vim
116:45 - you'll not be forever stuck into this
116:47 - one but if you notice this same thing
116:50 - happens now we are comparing the footer
116:51 - file here and here we are comparing the
116:54 - index file so we are comparing always
116:56 - the same file but in the different time
116:57 - zone not time zone exactly but in the
117:00 - different time itself how it looked like
117:03 - previously and how it looked like after
117:04 - the staging and it looks good and there
117:07 - we go we can see and it never shows you
117:09 - the whole file itself it just shows you
117:11 - some of the glimpse of it and yes there
117:13 - are tools around it some GUI tools like
117:15 - get Kraken and a lot of others which
117:17 - actually shows you much more information
117:19 - than this so notice here in the footer
117:21 - this was the file before and this is the
117:23 - file now and this is how it looks like
117:26 - so there we go we can see that no new
117:28 - line at the end of the file and there we
117:30 - go we can see the index file here uh
117:32 - which has some of the looks good and all
117:34 - these things and you can actually get go
117:36 - ahead into the full mode of the Vim but
117:38 - right now I'll just press Q to exit it
117:41 - that hey I'm I'm okay I'm fine by
117:42 - looking at it by the way GitHub shows
117:44 - you entire uh long documentation of
117:46 - seeing this now apart from this now I
117:50 - would like to make a commit so let's go
117:51 - ahead and uh make a commit there we go
117:54 - and what we're going to do is let's say
117:57 - commit
117:58 - messages U
118:03 - changed change index and
118:07 - footer not really a good message but
118:10 - I'll just just go with that so we're
118:11 - going to go ahead and add this one and
118:13 - now let's just for a moment I want to
118:15 - see the G log but on line logs now we
118:18 - are head is pointing towards this one
118:21 - and we have this merge branch and
118:23 - exactly like this you can actually check
118:25 - out the different merge options if you
118:27 - want to check out between the different
118:29 - uh commit IDs you can go ahead and do
118:31 - that let's go ahead and see what
118:32 - happened between uh this commit ID and
118:35 - this commit ID let's see what happened
118:37 - there uh it's little bit difficult to
118:39 - actually use that but not in my case I'm
118:42 - using a nice uh terminal here so I can
118:45 - copy paste the things all you have to do
118:47 - is copy this uh paste it up here then a
118:50 - space and then we're going to paste this
118:52 - this one so that we can go ahead and
118:54 - check this out now you do this so you
118:56 - get the entire thing again that hey nice
118:59 - footer was previously in the previous
119:00 - commit ID now this is was in the this
119:02 - commit ID and things looks good again I
119:04 - can press q and get the exit so you get
119:06 - the idea how this is being done you will
119:08 - see another kind of a thing with the
119:10 - exact same commit IDs or maybe different
119:12 - branch name also you just remove the
119:14 - space you put two dots common scenario
119:17 - uh alternative way of how it's being
119:19 - done gives you the exact same result but
119:21 - you'll see that a lot of people use that
119:23 - so that's that's the fun part as well
119:25 - now similar to this you can use the
119:26 - branches as well I'll not show you that
119:28 - I'll leave that as a simple exercise for
119:30 - you to do but pretty simple so all we
119:32 - can do is simply have to say G and then
119:35 - uh diff and then we can go ahead and say
119:37 - uh Branch one probably that's it dot dot
119:40 - and then we can use Branch 2 and again
119:43 - dot dot is pretty safest of the feature
119:46 - because it it actually is a previous
119:48 - compatible as well the the space one is
119:50 - the newest one so maybe are working in
119:52 - some scenario where the space one
119:54 - doesn't work now you know you can use
119:55 - the dots as well so pretty easy to work
119:57 - on with that and again the output will
119:59 - be same regardless of you work with the
120:01 - commit IDs you work with the branches
120:03 - files and however you work and go
120:05 - through with that this the output is
120:07 - going to be exactly same okay uh now
120:10 - let's go back on to this one so now that
120:13 - we understand the inside and the details
120:16 - of how the git diff work and from now on
120:18 - you will never see that this minus minus
120:20 - as removed h it's a previous version or
120:23 - not the previous version in fact it's
120:25 - just the file one and that's it and this
120:28 - is a common thing when you switch your
120:30 - branch comparison even the commit ID
120:31 - when you switch them up uh the first
120:33 - file will get the minus ones and the
120:35 - second file will get the plus one we can
120:36 - even try that actually uh let me just go
120:39 - ahead and work with that and I'll just
120:41 - go ahead and say get log one line and
120:45 - there we go so previously we did uh gave
120:47 - it like this now let's go ahead and uh
120:51 - 9C E11 so what we're going to do is
120:53 - we're going to go ahead and remove this
120:56 - and in fact we'll just go here and we'll
121:00 - just change this so even just by
121:02 - changing this you'll notice uh that
121:04 - there we go now this add some footer
121:07 - note here nice footer the plus and minus
121:10 - got changed here so this is really an
121:12 - interesting notice here nice footer gets
121:15 - a plus and if I go ahead and quit this
121:18 - and if I go ahead and use this now the
121:20 - nice footer gets the minus one so told
121:22 - you it's not really the removing of the
121:25 - code or adding the code it's just a
121:26 - symbol it's just a symbol all right so
121:29 - moving on let's go ahead and talk about
121:32 - some of the git
121:34 - stashing all right so moving on about
121:36 - the git stashing uh git stashing is
121:38 - pretty interesting and fun uh of of the
121:40 - tool or the subtool in the git itself
121:43 - let's go ahead and understand that I
121:45 - don't know why it's not highlighted but
121:46 - we're going to talk about the git stash
121:48 - okay so what this git stash uh all we
121:50 - have to do we'll go through with the
121:51 - workflow first understand the thing then
121:53 - we'll do the Practical of it so first
121:55 - what we have to do is create a repo we
121:57 - have to work on it and then commit it on
121:59 - the main so the whole idea is there
122:01 - should be some work on the main branch
122:03 - and the flow is then switch on to
122:05 - another branch and work on it very
122:07 - common scenario that maybe you found a
122:09 - bug maybe you want to add some feature
122:11 - you have pulled off a branch of it and
122:13 - you have started to work on your branch
122:16 - but uh there is something important
122:18 - happened on other Branch or maybe the
122:20 - main branch and you want to work there a
122:22 - little bit now uh conflicting changes do
122:25 - not allow to switch the branch uh
122:27 - without commit so what happened is if
122:29 - you worked on something you have
122:31 - probably staged it not yet commit or you
122:33 - have worked something is there uh the
122:35 - git is not going to allow you to switch
122:38 - into the different branch that's that's
122:39 - the one thing so let's go ahead and try
122:41 - this if how this is actually even true
122:43 - or how does it work so let's go ahead
122:46 - and first of all G status if I go ahead
122:48 - and work with the G status there is
122:49 - nothing in the master branch and uh
122:52 - that's okay but we want to now create
122:54 - another Branch right now we don't have
122:55 - much of the branches if I go ahead and
122:57 - look on the branch there is just master
122:59 - and there is a footer maybe now you it's
123:01 - the time that we work on the footer
123:03 - Branch so let's go ahead and check out
123:05 - this or maybe you are creating some
123:06 - another Branch so let's just go ahead
123:08 - and say get and I'll use a
123:11 - switch and you can by the way pass an
123:13 - option of Dash C and let's just say
123:16 - you're working on some bugs so we are
123:18 - going to call this one as bug fix a very
123:19 - common scenario now this has created a
123:22 - new Branch as well as moved you onto
123:24 - this new Branch shortcut command so
123:26 - we're going to go ahead and check out
123:28 - the get Branch notice we are on the bug
123:29 - fix so you're on the bug fix and you
123:32 - realize there was a pretty nasty bug in
123:34 - the footer index Navar wherever you like
123:37 - this was the bug so I went up and I have
123:40 - fixing uh trying to fix this bug okay we
123:46 - are still in the mid of the fixing the
123:48 - bug we haven't fixed it so that's our
123:50 - situation right now if if I go ahead and
123:52 - check out the git status uh here there
123:55 - are some files which are not being
123:57 - staged or something but your colleague
123:59 - says hey you know what I need your help
124:01 - on some another Branch uh can you please
124:03 - come to the footer branch and just add
124:05 - this or check this or just add this one
124:07 - line here and you says yeah of course I
124:09 - can go ahead and do that so I'm going to
124:11 - go ahead and say hey I'm going to go
124:12 - ahead and say get switch and not see but
124:16 - I would love to switch on to Branch
124:18 - footer there we go oh it says uh your
124:22 - local changes to the following files
124:24 - would be overwritten uh please commit
124:26 - your changes or stash them so now it's
124:28 - talking about the stash before you
124:30 - switch the branch aborting so where I am
124:32 - right now let's just go ahead and check
124:34 - this with the G Branch I'm still on the
124:37 - bug fix I haven't moved on the fo footer
124:40 - and I'm not able to change this so
124:41 - that's what this note actually says that
124:44 - if there is any change which is not even
124:46 - being staged and you have worked on
124:48 - something in your branch obviously you
124:50 - have moved some file you have changed is
124:52 - and you haven't committed them you
124:53 - haven't staged them so how can you move
124:55 - on to the different branch this is where
124:57 - exactly the stash comes in and even git
125:00 - actually gave you a message suggestive
125:02 - message then you can use the git stash
125:04 - and you can switch between the branch
125:06 - and by the way there are a couple of
125:07 - other uh use cases and even complex
125:10 - commands of the git stashing which a lot
125:11 - of people uses I'll walk you through
125:13 - with them but majority of the time
125:15 - you'll be just using these two commands
125:16 - which is git stash and git stash pop
125:18 - let's see how they work and I'll show
125:20 - you I'll show you some of the complex
125:21 - commands as well that how you can just
125:23 - go ahead and work with that let's go
125:25 - ahead into this one so now I can run the
125:27 - command git
125:29 - stash there we go I run this git stash
125:33 - and it says okay there's a work in
125:35 - progress bug fix and something index
125:38 - folder now can I change my Branch now
125:40 - that's the most important question so if
125:42 - I go ahead and say get switch footer if
125:45 - I go ahead and says hey you switched to
125:47 - the footer branch and if I go ahead and
125:49 - say that hey show me the git Branch
125:53 - there we go you are on the footer right
125:55 - now and you can start working on this
125:57 - does it change this uh yes all of my
125:59 - changes are being stashed there I'm not
126:02 - worried about there they're working
126:03 - pretty nice and easy uh I can see what
126:06 - is happening can guide my colleague or
126:08 - even can add more stuff on the index or
126:10 - something like that even can work on
126:11 - this and complete my commits and
126:12 - everything but the great part about this
126:15 - is I can move on to the different branch
126:17 - now and I can say get branch and uh move
126:20 - me back onto the bug fix no suggestion
126:24 - no suggestions hate that uh bug
126:28 - fix oh get switch my my
126:31 - bad uh
126:34 - switch okay now we are switched onto
126:36 - this one I'll check this one okay I'm
126:38 - here uh but what about my changes H my
126:41 - changes are still not here because I
126:43 - have stashed those changes stash is like
126:45 - a temporary shelf where you can keep
126:47 - your code go back move around come back
126:50 - here but you have to bring things back
126:51 - back from the from the Shelf here and
126:54 - how do we do that pretty easy let me
126:55 - show you uh it just this command G stash
126:58 - pop that's it and that's the command get
127:02 - stash and all you have to say is pop now
127:05 - you have have this so pop so there we go
127:08 - we are having this stuff back up here uh
127:11 - pretty nice and easy uh but let's just
127:13 - say I have worked on it more
127:17 - uh worked and fixed the bug something
127:21 - like that so there we go we still are
127:23 - again onto the position where we haven't
127:25 - committed this now you know you cannot
127:27 - change the branch so you would love to
127:29 - go ahead and use the git stash command
127:31 - so we have stashed it now I want to move
127:33 - to the main branch let's just see how
127:35 - many branches we have get Branch we are
127:37 - on to the master uh so let's just go
127:39 - ahead and switch to this one get switch
127:42 - and I want to switch to
127:44 - master all right my
127:47 - bad Master there we go we have moved to
127:50 - the master branch and obviously these
127:51 - all things are gone but here's the
127:54 - interesting thing I know I have stashed
127:56 - some changes onto the buck fix Branch
127:59 - but can I actually pop those stash onto
128:02 - other branches H that's interesting
128:05 - let's go ahead and try this out I'm
128:06 - going to go ahead and say get stash and
128:08 - I'll just do a pop and it says oh
128:11 - there's something interesting here uh on
128:13 - Branch Master uh changes not staged for
128:16 - commit go ahead and no changes added to
128:18 - the commit dropped some stuff but okay
128:21 - okay I can see that all my stash can
128:24 - actually come onto this master branch
128:26 - and now I can do the changes stages and
128:28 - whole things so we can deduce from this
128:31 - this small investigation that yes stash
128:34 - is not just limited to your branch and
128:35 - stash can be moved from this Branch to
128:37 - different branches as well uh but don't
128:39 - you worry when you're working onto this
128:41 - one uh with multiple people be very
128:43 - careful of how you're stashing and all
128:45 - these things and that is why people
128:47 - actually always stash with the other
128:49 - commands as well so it's a pretty
128:51 - interesting command uh but again be very
128:53 - careful about this one because most of
128:55 - the people love to have this command
128:57 - first G stash list so once you do this
129:00 - so for example if I go ahead and again
129:03 - do a get St get
129:05 - stash it stashes all the changes but if
129:08 - I do a get stash list now it gives me a
129:11 - list that this is a stash which is uh
129:14 - one which is work in progress on Master
129:17 - Branch so don't just uh go ahead and
129:21 - dump the stash unless until you are
129:22 - working on the the branch because
129:24 - stashing can be a little bit tricky to
129:26 - work on with so always be careful just
129:28 - run the command get stash list and only
129:30 - stash or dump the stash which you really
129:32 - want to work with that so for example
129:34 - here in this case I can just go ahead
129:36 - and run the command get uh
129:39 - stash apply apply and then mention this
129:43 - stash whatever the stash is for example
129:45 - if your in case is the stash uh zero uh
129:48 - like this or if you have the first one
129:50 - for yourself second third whatever that
129:52 - is you get the idea that how these
129:54 - things actually
129:56 - work all right so now that you know
129:58 - about the caveats of how the stashing
130:00 - and all these things work uh I would
130:02 - love to give you a couple of more
130:05 - commands and all these things uh make
130:07 - sure you're looking up for is also a
130:08 - couple of commands like get stash list
130:11 - and get stash apply and the stash name
130:13 - entirely with the curly braces and one
130:15 - two whatever the number is and most of
130:18 - the time whatever and wherever you are
130:19 - working on stash is something which is
130:22 - meant to be very very temporarily maybe
130:24 - you want to just uh put your changes for
130:27 - a moment and then want to go some
130:29 - another branch check these things uh
130:31 - copy some code or somewhere and just
130:32 - move back onto your branch this is
130:34 - entirely made for a temporary purpose
130:36 - you should not be relied on it too heavy
130:38 - and uh even in if you're working with
130:41 - the many people in a big company these
130:43 - stashes uh should be used very very
130:45 - carefully so that's the whole idea now
130:47 - let me show you a couple of more
130:48 - commands and I'm pretty sure you can do
130:50 - some exercise on it and we'll we'll talk
130:52 - about this one so uh what you can do is
130:55 - so far we have used the command of
130:56 - checkout I'll show you the demo of this
130:58 - one and this checkout actually goes
131:00 - ahead and we have used it for the
131:02 - branching checkout from get checkout
131:04 - Branch uh Master get checkout footer and
131:07 - all these things but it can also be used
131:10 - uh for uh checking out how the things
131:12 - looks like before the commits and all
131:14 - these things you can provide the hash or
131:16 - you can use the symbol of head and this
131:18 - till Day means I want to go two commits
131:21 - back so this two here represents look at
131:23 - the two commit prior to this one I'll
131:25 - show you this one as well and by the way
131:27 - you can restore any file as well the
131:28 - restore command is also pretty
131:29 - interesting go ahead try this out and
131:31 - you can restore the file back to is the
131:33 - last commit only not the like you cannot
131:35 - go forever you can check with the
131:37 - checkout command that how files look
131:39 - like but you can only restore till the
131:40 - one last command now let's go ahead and
131:42 - see how the checkout looks like and see
131:44 - how things actually work so for this
131:47 - obviously we need to have a g log so
131:50 - let's go with that now somehow I want to
131:52 - move uh how the things look like onto
131:55 - this particular commet so all you have
131:57 - to do is just run the command get check
132:00 - out and instead of giving this as a
132:02 - master or Branch name give the commit ID
132:04 - and again you don't need to give the
132:06 - entire long commit ID this one works
132:08 - like
132:09 - 99.99% of the cases I'm not sure about
132:12 - one Edge case there but it works like
132:14 - that so I can go ahead and work with
132:16 - that get check out and just work like
132:18 - this and notice here what says the head
132:20 - is now now at this position so I told
132:22 - you this whole thing that we have in the
132:24 - gate this is something which has to
132:26 - point somewhere this head and usually
132:29 - this points towards at the very uh tip
132:32 - of wherever you are working right now
132:33 - but we have explicitly asked it to move
132:36 - be uh back somewhere so that's where the
132:38 - head is and during that time uh or where
132:41 - when we worked on this there was no nav
132:44 - bar there was no footer file and this is
132:45 - how our file looked like so I can go
132:47 - back uh jump into the time and check out
132:49 - any point of the time but the point is
132:52 - how do I go back that that's the main
132:54 - interesting part so do I have to get log
132:57 - again uh because hi there's a head hero
133:00 - section here how do I how do I retrieve
133:02 - back so let's go ahead and try this can
133:04 - I go ahead and use this uh get checkout
133:07 - head let's see what happened here oh
133:10 - this is this doesn't go back so uh what
133:13 - can I do to go back if I have checked
133:15 - out onto the previous
133:17 - branches now moving back is a little bit
133:20 - tricky uh not really complex but there
133:22 - are a couple of ways how you can go back
133:24 - and let me show you what are these ways
133:26 - actually uh the easiest one that you're
133:28 - going to find is uh where am I
133:31 - writing uh is simply go ahead and say
133:33 - get check out and instead of saying head
133:35 - or something like that uh you just go
133:37 - ahead and say I want to go back to the
133:39 - main branch uh or in this case the
133:41 - master uh that's one thing I can go
133:43 - ahead and do this uh you have switched
133:45 - to the ma uh master and all of this and
133:47 - we can see once you mention the name of
133:49 - the branch it moves you back on to
133:51 - wherever you were uh in case you forget
133:54 - this what you can do is there's also one
133:56 - command which is rarely used in the any
133:58 - flow is uh simply say uh get
134:02 - reflog uh what does this command does uh
134:05 - reflog actually moves you back onto
134:06 - where you were uh previously it just
134:08 - moves your head back to wherever you
134:10 - were so in case you forgot from where
134:12 - you came in or something you can use
134:14 - this but rarely being Ed rarely somebody
134:15 - just check out and then just like it's
134:18 - everybody's flow that instead of um
134:20 - mentioning the exact thing or something
134:22 - we just mentioned the branch name this
134:23 - is a common flow but yes again there are
134:25 - many ways of how you can go back so you
134:27 - get the idea of now you can check this
134:28 - out any point of time that I want to go
134:32 - uh head should be now on two commits
134:34 - back or one commits back let's just say
134:36 - we want to move it here so this is two
134:37 - commits back so we can go ahead and say
134:40 - get checkout and we want to point the
134:45 - head and we can use till day and move it
134:47 - to two back and there we go so we have
134:50 - now head is is now at CB 9e where is cb9
134:54 - a and we are here uh cb9 e so o uh we
134:58 - are one and two and it moves it here cb9
135:01 - e so be very careful where it's moving
135:04 - and uh be cautious about it so that's
135:06 - what I'm saying so there we go this is
135:07 - how it was looking like and again my
135:09 - usual flow is just go ahead and say get
135:11 - checkout and then move to
135:13 - master so that's it that's usually what
135:16 - I do but again it's up to you you want
135:18 - to use reflog you want to go with that
135:20 - totally on totally on you all right so a
135:22 - couple of more commands so again we have
135:25 - worked on with the git checkout and we
135:27 - can use the hash we can actually go
135:29 - ahead and use the head command we can
135:31 - use the specific commit ID to move there
135:33 - whichever suits you whichever works for
135:35 - you and even we little bit talk about
135:37 - the reflog as well so go ahead and work
135:40 - with that in case you want to with that
135:41 - it's a pretty easy command so that's it
135:43 - for this video I hope you have enjoyed
135:46 - this one so if you're enjoying these uh
135:48 - please do let me know in the comment
135:49 - section tweet TI about the series
135:51 - because your tweets your share on the
135:53 - LinkedIn this is the only thing which
135:54 - keeps me going this is my motivation and
135:57 - uh I would love to get some more
135:59 - motivation at this point of time that's
136:00 - it for this video let's catch up in the
136:02 - next
136:07 - one hey there everyone my name is AES
136:10 - and welcome to the series on the gate
136:13 - our today's topic is pretty interesting
136:15 - uh which is a little bit scary as well
136:18 - uh we're going to talk about the G
136:19 - rebase I'll walk you through what what
136:21 - are the cits of it what could be the
136:23 - accidents that can happen with this
136:24 - command but all under control you'll
136:27 - have full knowledge about when to use
136:29 - this command when to avoid this command
136:30 - and you'll not be scared of it and there
136:32 - are a couple of scenarios that I would
136:34 - like to talk uh before jumping into this
136:36 - command first of all if you haven't
136:38 - checked out my Channel or haven't yet
136:40 - subscribed go ahead hit that subscribe
136:41 - button it would be really really
136:42 - motivational for me or if you can share
136:44 - this series that would be fantastic I
136:47 - have put a lot of effort into this
136:48 - you're one share that that's the price
136:50 - of this Cod that's it all right so first
136:53 - of all let me share a simple scenario so
136:55 - what we're going to learn about this one
136:57 - this git rebase command you'll find the
137:00 - entire internet is kind of divided into
137:02 - two halves and one half is on the 90%
137:04 - which is scared of this command and only
137:06 - 10% of the folks actually love this who
137:09 - have used this extensively and they
137:11 - really know what they are doing it's not
137:13 - that scary of a command but it can it
137:15 - always does rewrite the history and when
137:18 - you are rewriting the history you should
137:20 - be cautious and that's what this command
137:21 - exactly does I'll tell you a personal
137:23 - scenario uh when I was working as a CTO
137:26 - in one of the company here in India and
137:28 - uh in that we were organizing a lot of
137:31 - hackathons in our company and a group of
137:34 - students uh came in and they
137:36 - accidentally ran the rebase command
137:38 - wrong way in the last one hour of the
137:41 - hackathon and their entire project got
137:43 - messed up and they couldn't participate
137:44 - so yes you should be careful with this
137:47 - I'm not sharing the horror stories I'm
137:49 - just sharing what happened there the
137:50 - truth happened there and uh you should
137:53 - be cautious about it that's all I'm
137:54 - going to say and now let's go back onto
137:56 - the code and walk you through with how
137:58 - actually it goes on and work with that
138:00 - so let me share the screen all right so
138:02 - where we are right now let's go ahead
138:03 - and check the git status for this and my
138:06 - keyboard is too far on the left I don't
138:08 - like it that way but but what can I do
138:10 - uh so let's go ahead and go ahead and
138:12 - say I want to run the git status
138:13 - everything is good on the master branch
138:16 - and how many branches do we have and by
138:18 - the way I love this feature that I can
138:19 - scroll this and can say I want to learn
138:22 - or I want to run the command the G
138:24 - Branch so I can just go with that I love
138:26 - this uh so we have couple of branches
138:28 - couple of things going on everything is
138:30 - well sorted well centered up here let's
138:32 - go ahead and first run about what
138:33 - happens when you run the git rebase
138:35 - command again the red Smiley here with
138:38 - saying hey be cautious about it so this
138:40 - command can be used as an alternative
138:42 - way of merging or can be used up as a
138:44 - cleanup tool cleanup tool because it
138:46 - rewrites the history and an alternative
138:48 - of merging because it literally performs
138:51 - the merging but uh in the merging you
138:54 - actually keeps your branches uh
138:56 - separately but it just merge everything
138:58 - into a single timeline this is how the
139:01 - output is is something which you'll see
139:03 - when you rebase and this is kind of an
139:05 - output you see when you actually do the
139:08 - branch merging so yes this is exactly
139:11 - like merging we already have seen quite
139:13 - in depth about how the merging Works uh
139:15 - but now we're going to see the how the
139:17 - rebasing of the stuff works all right
139:20 - I'm not going to go through again with
139:21 - the merging process you are quite
139:23 - familiar with that whenever we do the
139:24 - git merge it actually merges the code
139:27 - into the main branch or wherever you are
139:29 - merging you can just go ahead and work
139:30 - with that uh now we'll focus more on the
139:32 - rebase but I'll walk you through with
139:34 - the branching scenario as well a little
139:35 - bit we'll go through with the demo quite
139:37 - in Deb now here's a caution note uh
139:40 - whenever you are either on the main
139:43 - branch or in this case we are going
139:45 - through with the master quite a lot or
139:47 - the master Branch never run this command
139:49 - I repeat this again if you are on the
139:52 - main branch or Master Branch this
139:54 - command is not meant to be run from that
139:58 - Branch this command is usually meant to
140:00 - be run from the side branch that we are
140:03 - whether that's a bug fak footer uh
140:06 - feature whatever that branch is usually
140:08 - this is meant to be run from the branch
140:11 - itself not the main this is usually the
140:13 - guidelines which everybody puts out
140:15 - Whoever has worked in the big large
140:16 - scale Corporation this is usually the
140:18 - guideline but again we're going to go
140:19 - through so again don't worry about all
140:21 - these big long commands that we have
140:23 - here we have a really long ones you
140:25 - don't have to worry too much this is
140:26 - just walking you through that how the
140:28 - whole flow actually works but since I'm
140:30 - with you uh I can just go ahead and work
140:32 - through with that all right so let's see
140:34 - what happens so first of all we are on
140:36 - the master so let's just say what
140:37 - happens now is uh we go through and by
140:40 - the way we'll be keeping an eye on this
140:42 - one so this is whole things in going on
140:44 - and how the things are working with we
140:46 - are more interested in this diagram
140:48 - because this is the only thing we have
140:50 - all right so first of all let's go ahead
140:52 - and work a little bit so in the index
140:54 - section we come up here and we say uh
140:58 - this looks nice oops again keyboard is a
141:01 - little shifted this looks nice I save
141:04 - this I go ahead and check the get status
141:06 - you obviously know what's about to
141:07 - happen there is one untracked file we're
141:09 - going to go ahead and commit this this
141:11 - time I'm going to use- am which is
141:13 - another shortcut of adding and
141:14 - committing at the same time so we're
141:16 - going to say updated uh main website
141:20 - looks good and we have done the commit
141:23 - now where we are at this position looks
141:25 - good if I check this one and I check my
141:28 - the UI now we can see that uh there is
141:31 - some work that is being done in this one
141:33 - uh we have some stashed being onto this
141:36 - Branch as well uh what this branch is if
141:38 - you can just go ahead and click on this
141:39 - you can just see this is the footer
141:41 - branch that we are working through uh
141:42 - we're not much worried about the footer
141:44 - Branch that's okay that's fine I'm not
141:46 - worried on that Branch uh let's just say
141:49 - there is another branch let's just go
141:51 - ahead and see this one uh there's
141:52 - another branch which is the bug fix and
141:55 - let's go onto this bug fix Branch I'm
141:57 - going to go ahead and say hey let's
141:59 - check out the bug
142:02 - fix bug fix and now I'm on the bug fix
142:05 - Branch let's go ahead we work a little
142:08 - bit on the bug fix Branch I fixed the
142:11 - navigation bar bugs maybe we have to
142:14 - contact us was not working I will just
142:17 - cut this out I'll just use an anchor tag
142:20 - it's not going anywhere this this was
142:22 - the bug let's just assume I'll just say
142:24 - contact us now now the bugs is bug is
142:26 - being fixed all right uh but if I go
142:29 - ahead and check it out at this point uh
142:32 - my bug is fixed let's go ahead and get
142:35 - and we're going to go ahead and
142:37 - commit and we're going to go ahead and
142:39 - say let's just say the bug is fixed but
142:42 - I still need to work a little bit more
142:43 - onto this one so I'm going to go ahead
142:45 - and say updated navbar that's nice there
142:49 - we go if in the meantime I want to go
142:52 - ahead and do some more work on the
142:54 - master Branch so let's just go ahead and
142:56 - go ahead and do get checkout and we want
142:58 - to go on to master Branch there we go
143:01 - and in the meantime the master is also
143:03 - working if I check the git Branch we
143:05 - have this one working on this one so I
143:07 - guess that's my uh not in the Commit
143:12 - This one is but we have updated the main
143:13 - website so this is the pink one and in
143:15 - the meanwhile there's some more work on
143:18 - the index file that was done and I want
143:21 - to
143:21 - say what do we do on this main website
143:25 - uh maybe some Gallery was added some
143:29 - images were added images added so there
143:32 - we go images is being added and what do
143:34 - we want to do commit
143:37 - get commit and same and we're going to
143:41 - say images added all right now let's
143:44 - check out the another branch and again
143:46 - this is kind of a workflow that we have
143:47 - to go through I'm not making this up so
143:49 - let's go into the bug fix again and
143:53 - there we go now when I go into the bug
143:55 - fix obviously the index file is having
143:57 - nothing but it would be really nice if I
144:00 - could bring in the whole code base uh
144:03 - from the main branch into this branch
144:05 - that would be really nice and this
144:07 - happened quite often more than you think
144:09 - that we go ahead and merge the main
144:11 - branch into our bug fix Branch so
144:13 - whatever has happened on the main branch
144:15 - can come onto my branch and I can see
144:17 - what's the latest update quite common
144:19 - thing so we're going to go ahead and say
144:20 - get merge and this time I want to merge
144:23 - so wherever I am first of all I need to
144:25 - check that I'm on to bugfix and I'm
144:27 - going to go ahead and say get merge and
144:30 - this time I want to merge the main
144:32 - branch or the master in this case by the
144:35 - way the main and master you might see me
144:37 - often uh exchanging the name between
144:40 - Main and master there's a history of it
144:42 - let me share it with you so initial days
144:44 - when the git was designed everything was
144:46 - called as Master branch in fact in lot
144:48 - of other uh Dev op toools like
144:51 - kubernetes and all these things we used
144:52 - to call one master and others say slave
144:55 - and somehow some people find that
144:56 - offending so nowadays we call everything
144:58 - as Main and others as regular branches
145:01 - so that's why get is a pretty old
145:02 - software still does the main branch as
145:05 - the master but on the GitHub they don't
145:07 - want to have any conflict so they call
145:08 - it as main branch so Main and master are
145:10 - literally the same they are just the
145:12 - branch name okay so let's go ahead and
145:14 - do the merge uh Master once I go ahead
145:16 - and do the merging of the master uh it
145:19 - says hey there's now edit edor this is
145:21 - usually the default message I'll go with
145:22 - this only merge main Master Branch into
145:26 - the bugfix I go ahead and save this and
145:28 - close it and go back up here so files
145:30 - are being added now everything looks
145:33 - good if I go ahead where I am right now
145:36 - I am onto the bug fix if I go ahead and
145:37 - check out the bug fix onto the index all
145:40 - of these images and everything came into
145:42 - my picture but what some people don't
145:44 - like is this guy so now this there's
145:47 - this extra commit that hey there's whole
145:49 - thing going on now again I can start
145:51 - working on this I'm still on bugfix I'm
145:53 - still working on the navbar bugfix and
145:56 - this about us is the link whiches was
145:59 - not working so I added an anchor tag
146:01 - goes nowhere and about us so we have
146:04 - added some more stuff and we worked onto
146:07 - this one we will be adding a commit
146:09 - message and I'll say bug more bug fixed
146:12 - or I'll
146:13 - say about us fixed these are really bad
146:17 - commit messages but somehow we we work
146:19 - with that and if I check this kit branch
146:22 - that again uh Master is doing nothing
146:25 - and all of these things but in the
146:26 - meantime you went up and changed this
146:28 - one yes we need to go through with this
146:30 - whole workflow so that you get the idea
146:31 - of how things actually works in the real
146:33 - life I'll go ahead and do a check out
146:36 - and I'll check
146:38 - out onto the
146:41 - master and uh get to check out and my
146:46 - bad need to run Master now we are on the
146:48 - master Branch we are still working on
146:50 - index file uh
146:53 - images pricing
146:55 - card
146:57 - added all right so we have added the
147:00 - pricing
147:02 - card the throat set still itchy but
147:04 - anyways a pricing card being added I
147:07 - want
147:08 - to uh add this and I'll say
147:14 - pricing card added all right uh let's
147:19 - see what's the situation of this all
147:21 - right now more work is done on this one
147:24 - so there will be new commits being added
147:26 - this is how the life is uh now you want
147:29 - to get all those commits that are done
147:31 - being done on the main branch being
147:35 - migrated onto your feature Branch or the
147:37 - bug fix Branch wherever you are so this
147:39 - is something which is bothering to a lot
147:41 - of people that if I go ahead and check
147:43 - out the git log uh get log and on line
147:46 - uh you'll notice a lot of commits are
147:48 - just the merging commits so this is the
147:50 - merge of the Navar this is merge of the
147:53 - footer Branch these commits are not
147:55 - actually putting any work they are just
147:58 - merging and same thing is happening if I
148:00 - go ahead and do checkout onto the bugfix
148:05 - branch and do the git log again why my
148:08 - cursor went away and I go ahead and do
148:11 - this again notice here uh the same thing
148:13 - is happening here uh we merg this so
148:16 - these are unnecessary commits that are
148:17 - going through and a lot of people don't
148:19 - like it so what do they do uh let me
148:22 - show you now first and foremost the most
148:24 - important thing to learn about this is
148:26 - where you are so never be hesitant to
148:28 - run the git Branch I am on bugfix this
148:31 - is where I can run the command of rebase
148:34 - if you are in the master and run the
148:36 - rebase the whole mess is on you not on
148:39 - me make sure you understand this key
148:41 - point so now what we're going to do is
148:43 - now we want to bring all those changes
148:44 - here so I'm going to go ahead and say I
148:47 - want to do a rebase all right but re
148:50 - base uh needs to run on the master brand
148:53 - so this is the command that you usually
148:55 - want to run get rebase main or get
148:58 - rebase master this indicates that I'm
149:01 - rebasing my Branch with the master you
149:04 - don't want to mess up the master Branch
149:06 - or the main branch now notice here what
149:08 - happens when I run this
149:09 - command rebase successfully and now what
149:13 - you can see the timeline is being
149:16 - Rewritten the timeline is Rewritten this
149:18 - is scary because now the main timeline
149:21 - is it's literally rebasing what we are
149:23 - doing is rebasing that means uh we still
149:27 - have two branches here but this is my
149:29 - main branch and its base is now here so
149:32 - this is the point of its base so this is
149:34 - the most important part we still have
149:35 - Branch we still have two heads these are
149:37 - just the pointers which can point onto
149:39 - different uh points or different commit
149:41 - IDs but this is my Branch this is
149:43 - literally you have you have taken the
149:46 - branch and have replanted it on the
149:49 - master
149:50 - this is scary this is because you are
149:52 - rewriting the history at this point
149:54 - probably you might not be able to
149:56 - understand the severity of it but notice
149:57 - here the branch is entirely gone it's
149:59 - just the master and if any more changes
150:02 - we will obviously be diverting into the
150:04 - branches if any more work is done on the
150:06 - buck fix more branches we'll see those
150:08 - colors on line it's not like we have
150:09 - entirely removed it for the future as
150:11 - well they will exist I'll show you that
150:14 - but this is the point where things
150:15 - actually gets a little bit scary so
150:16 - again uh checking where I am I am onto
150:19 - the buck fix branch so if I go ahead and
150:20 - add some more stuff uh maybe I'm fixing
150:23 - the same nap bar uh let's just cut this
150:26 - out oops not like that I'm going to go
150:30 - ahead and cut this out add the anchor
150:32 - tab goes
150:34 - nowhere Home tab is also fixed now so
150:37 - let's just go ahead and Commit This get
150:40 - commit and we're going to go ahead and
150:42 - say that uh Home tab fixed not really a
150:46 - big fix but maybe that's a th line code
150:49 - I'm going to go go ahead and you're
150:50 - going to see this in the commit ID get
150:53 - graph now that uh yes our uh the fix
150:56 - actually is now the same on the home
150:57 - branch and Al as well as on the buck fix
151:00 - but the moment you'll do some more
151:02 - things on the master Branch you'll see
151:03 - the commits ID being changed so we're
151:05 - going to go ahead and say hey let's go
151:07 - ahead and check out the master there we
151:11 - go do some changes on the master we are
151:13 - doing more changes in the index pricing
151:15 - card what else uh we have y a section
151:20 - y a section being added go ahead save
151:23 - this do the
151:27 - commit y Us section added go ahead and
151:34 - run this one and let's see the G craft
151:37 - there we go we can see the branching is
151:39 - here so it's not like we have completely
151:41 - removed that you cannot have branches
151:42 - ever but here is the interesting part
151:45 - where we have no idea of how the
151:47 - branching came in bug fixes we have just
151:49 - merged it and even if you look at the
151:50 - commits the commits the unnecessary
151:53 - commits that were there like uh merge
151:55 - the branch merge the branch those
151:57 - commits are gone that's the whole idea
151:59 - about the rebasing and in case you are
152:01 - wondering what happens when there is a
152:03 - conflict uh exactly same what happened
152:05 - in the branch when you merge the
152:07 - branches when you merge the rebase it's
152:09 - exactly same if there is a conflicting
152:11 - file you have to remove the conflicts
152:13 - manually or use the vs code to accept
152:15 - the changes and all of that and you have
152:16 - to run another command so interested in
152:19 - doing the conflict
152:20 - why not let's go ahead and do the
152:21 - conflict uh we are on to the branch of
152:25 - Master all right so let's just say the
152:28 - master has worked on it let's go ahead
152:30 - and check out onto the bug fix as well
152:33 - and we're going to go go get check out
152:35 - and we're going to go on to Buck fix and
152:39 - this Buck fix guy comes into the index
152:41 - and says uh prizing card added and he
152:45 - also says a new prizing card new prizing
152:49 - card added so we are working on the same
152:51 - file some stuff is being added which one
152:53 - to keep which one not to keep it's up to
152:55 - you I'll just save this because we are
152:57 - here to make conflicts let's go ahead
152:59 - and do the commits and I'm going to go
153:01 - ahead and say uh card added to index
153:06 - file not
153:11 - added add card to index file uh usually
153:14 - you want to give the command to get it
153:16 - on that again uh let's go ahead and work
153:19 - with that so now what happened is hey
153:22 - there's a conflict in this and uh let's
153:25 - just go ahead and run the branch we are
153:28 - on the bug fix so it's safe to run the
153:30 - command if I'm on the branch I can merge
153:33 - or rebase from the master let's go ahead
153:35 - and see what happens when I try to
153:37 - rebase uh let's go ahead and find out
153:40 - the command that we want to run rebase
153:42 - the master I do this and it says
153:45 - rebasing couldn't do the rebase because
153:47 - there is a conflict here and here are a
153:49 - couple of hints you really don't want to
153:51 - skip this part read this entire uh whole
153:54 - message if you're not going to be
153:56 - reading it you'll not understand the
153:57 - rebase so go ahead and follow this it
153:59 - says re resolve all the conflicts
154:01 - manually mark them as resolved uh with
154:05 - hint uh then you have to run the git ad
154:07 - or remove the conflicted file so you
154:09 - have to run the command git add yep
154:12 - that's the thing and then run the git
154:14 - rebase and my terminal is a little short
154:17 - can I expand it yep and there we go
154:22 - whole thing in one line now it's better
154:24 - all right notice here this is the one
154:26 - that I want to get your attention to you
154:28 - have to add this this is the first part
154:30 - of it and then you have to run the get
154:32 - rebase D- continue that means the rebase
154:36 - right now is in the halt phase you have
154:38 - to resolve your conflicts and then I'll
154:40 - can continue the rebase if somehow you
154:42 - find it little bit scary uh you can go
154:44 - ahead and use the dash Das abort command
154:46 - as well to abort the entire thing if I
154:48 - go back onto this one here notice here
154:51 - this is the resolve all these things and
154:53 - you can just click on this accept
154:54 - changes last time I showed you how you
154:56 - can do this manually by removing all of
154:57 - this this time I'll show you how you can
154:59 - use vs code I'll say that accept the
155:01 - current change accept the incoming
155:03 - change or accept the both I'll accept
155:04 - the incoming change which is coming up
155:06 - from the master Branch I'll accept this
155:09 - this is how it looks like new pricing
155:10 - card added and I'll go ahead and save
155:13 - this but that's not enough I need to go
155:15 - ahead and literally uh come back here
155:17 - and add this and again you don't have to
155:20 - commit this you just have to add this so
155:21 - I'm going to go ahead and say get add in
155:23 - this case it's just one file but you can
155:25 - use the dot feel free to use that I'll
155:27 - just go ahead and add this but that's
155:28 - not enough now it needs to be only in
155:30 - the staging area now you can continue
155:33 - this but if you go ahead and check the
155:35 - git craft notice here uh uncommitted
155:37 - changes and all these things it's it's
155:39 - an ongoing thing so don't just worry too
155:41 - much about it and we're going to go
155:43 - ahead and say get rebase and the dash
155:46 - dash
155:48 - option Dash D continue thank you so much
155:51 - and by the way if you hold on to this
155:52 - one it says uh restart all these options
155:54 - I love this editor uh restart the
155:56 - rebasing process after having resolved
155:58 - conflict merging really nice I hit enter
156:01 - and it says uh add card to the index so
156:04 - now it's asking you to for the commit
156:05 - message I'm happy with this commit
156:07 - message I'll save this close this file
156:09 - and you get that now finally the rebase
156:12 - thing is completed so there's no such
156:15 - thing as like automatic M conflict
156:17 - resolver or something but we we get to
156:19 - see this that whole thing is again uh
156:22 - just a one timeline so literally we are
156:24 - actually changing the timeline so it
156:26 - took us little bit time to actually
156:28 - understand that how the workflow and
156:30 - everything is done but I think by now
156:32 - you actually truly understand what the
156:34 - rebase is and uh again I would like to
156:37 - bring you one more thing up here that
156:39 - again uh never rebase the commits that
156:42 - you have shared with other people and if
156:44 - we are pushing to the GitHub never
156:46 - rebase is usually the idea uh but again
156:49 - uh it's not like I'm against the rebase
156:52 - you can rebase and some companies do
156:54 - actually ask you to rebase all the time
156:57 - some people like to keep their commit
156:58 - history being very very clean and not
157:00 - unnecessary commit that's okay that's
157:02 - the workflow you will learn some people
157:04 - have the have the workflow or their
157:06 - experience with too much rebasing some
157:08 - people have rarely have done the
157:10 - rebasing so it's up to them they are
157:12 - scared of it or not I am little bit but
157:15 - I know when I'm rebasing what I'm doing
157:17 - so that's the whole idea so the whole
157:19 - point of the picture is rebase is not
157:21 - that scary it's just you need to know
157:22 - what you are doing if you know that what
157:25 - you're doing it's always good idea and
157:27 - again never do the rebase when you are
157:30 - on the master Branch always do the
157:31 - rebasing when you are on the bug fix
157:33 - branches or some other branches that's
157:34 - the workflow I done but again your
157:36 - workflow might be different or something
157:38 - else so that's your rebase I hope you
157:40 - have enjoyed it if you have enjoyed it
157:41 - do tweet out this video or the entire
157:43 - video however you like that uh let's
157:45 - catch up in the next video
157:52 - hey there everyone a here back again
157:54 - with another video and welcome to the
157:56 - git series and git series cannot be
157:58 - completed without talking about GitHub
158:00 - and yes I know GitHub is not the only
158:04 - way of saving your git workflow and dire
158:07 - code base onto an online service there
158:09 - are others as well but hey we cannot do
158:11 - anything the popular one is the popular
158:14 - one I don't decide the popularity so the
158:16 - popularity is with the GitHub so in this
158:18 - video we're going to see a little bit of
158:19 - the GitHub and how the workflow actually
158:21 - goes through with that now I am pretty
158:24 - sure some of the beginners who are
158:26 - afraid of doing the things on their own
158:29 - and absolutely hate to read the
158:31 - documentation are going to complain it
158:33 - little bit on this video and the reason
158:35 - is obvious because I'm going to mention
158:37 - you some of the documentation why the
158:38 - GitHub and I'm going to ask you to do
158:40 - some things on your own people don't
158:41 - like to do things on their own and
158:43 - that's the reason they leave programming
158:45 - my advice read the dogs try to do things
158:47 - on your own at a Max you're going to
158:49 - just fail and you're going to find
158:50 - Solution on some medium article or chat
158:53 - GPT or some other stack Overflow but
158:55 - it's it's compulsory and important to
158:57 - read the docs and do some things on your
158:59 - own and there is a reason behind it I'll
159:01 - walk you through with that as well and
159:02 - we'll share you some of the important
159:04 - information if you're going to the
159:05 - GitHub obviously we'll have a discussion
159:07 - about the open source contribution you
159:09 - need to know what are the cons of it
159:11 - first because there was recently an in
159:13 - incident the entire world was very much
159:16 - unhappy with the incident I'll share
159:18 - that incident as as well so be cautious
159:21 - about spamming anybody on that we'll
159:23 - start with there uh but let me show you
159:25 - first that why I'm saying that a lot of
159:26 - people will be unhappy with this video
159:28 - might be unhappy not always but might be
159:31 - so all right so we are on to the docs.
159:34 - GitHub and we are on the getting started
159:36 - or get started page this is the
159:38 - documentation of how the GitHub entire
159:40 - workflow goes through and if you go on
159:42 - to this right hand side you're going to
159:44 - see that onboarding using GitHub
159:46 - accessibility explore projects get
159:48 - started with the git and a whole lot of
159:50 - things are there so using the git if you
159:53 - open up this is how the git sub folders
159:55 - and all these things are being used and
159:57 - explore the integration about the
159:59 - integration and whatnot all these things
160:01 - are here so using GitHub you can see
160:03 - there is a GitHub mobile uh onboarding
160:06 - is also there how you can start your
160:08 - journey there's there's a lot of things
160:09 - how to create an account hello world
160:11 - finishing up and whatnot now if you go
160:14 - ahead and search for this in this docs
160:16 - regarding the SSH this is the one that
160:18 - you have to search because just go ahead
160:19 - and search for SSH now the reason for U
160:23 - for searching the SSH is that first of
160:26 - all let's go ahead and talk about the
160:28 - GitHub so I'm going to open up this new
160:30 - one and we'll paste the GitHub here so
160:33 - this is GitHub this is one of the many
160:36 - such online services which helps you to
160:39 - keep all of your code base along with
160:41 - the git maintenance and the git timeline
160:43 - onto a cloud environment so that
160:45 - everything is safe these days we know
160:47 - that everything is on the cloud and and
160:49 - for obvious reason there is no worry
160:51 - about your database getting corrupted
160:53 - your hard disk getting corrupted
160:54 - everything is online on the cloud and
160:56 - they manage all these things and it's
160:58 - not the only service which is available
161:00 - GitHub is the most popular one but there
161:01 - is a gitlab uh if you wish you can just
161:04 - go ahead and explore them we will
161:05 - definitely explore them together maybe
161:08 - uh in upcoming videos not sure about it
161:10 - so yes there are lots of such Services
161:13 - coming back uh this is the GitHub which
161:15 - helps you to build and there's a lot of
161:17 - options and a lot of things are
161:18 - available here here we will not go much
161:21 - about them in this video we'll
161:22 - definitely explore them in the upcoming
161:23 - video but all you have to do is just
161:25 - sign up for that once you do the sign up
161:28 - it's pretty easy all you have to do is
161:29 - enter your email verify the email set a
161:32 - password and that's it you have your
161:33 - GitHub account you are watching this on
161:35 - YouTube you obviously have a YouTube
161:36 - account that means you know how to
161:38 - create the account similarly just go
161:39 - ahead and create an account on GitHub
161:41 - once you go ahead to create an account
161:43 - on GitHub then simply working with the
161:45 - GitHub via the terminal is the most
161:47 - important thing and you can not just
161:49 - work with the terminal using your uh
161:52 - email ID and password no GitHub doesn't
161:54 - work like that GitHub works with the SSH
161:57 - keys so you have to generate some SSH
161:59 - key and have to save that same key in
162:02 - the GitHub settings page so that GitHub
162:04 - knows that you are the same guy who's
162:06 - communicating the communication in the
162:08 - GitHub happens on the basis of SSH not
162:11 - on the basis of uh email and password
162:13 - email and password works well on the web
162:15 - not on the command line and since you
162:17 - know we have been working with the
162:18 - command all throughout the long and we
162:21 - want to use GitHub directly from here by
162:23 - the way you can also install a GH
162:25 - utility which is a GitHub utility you
162:28 - can work through with that uh but first
162:30 - anyways since we want to connect the
162:32 - entire thing with the GitHub we want to
162:34 - have an SSH key on our system and we
162:36 - want to have an SSH key on the GitHub
162:38 - settings page so that both knows that
162:40 - yeah these are the same guys in
162:41 - communicating so first and foremost the
162:43 - problem is these are the two things we
162:45 - want to explore generating a new SSH key
162:48 - and adding get to the SSH agent uh and
162:51 - the second one is adding a new SSH key
162:53 - in your GitHub account these are the two
162:54 - things that we have to go through with
162:56 - let's go ahead and open this up in two
162:58 - separate tabs and by the way they are
162:59 - just one above the each other you can
163:01 - just get started with any of them so the
163:04 - best part is even if you click on Mac
163:06 - windows or Linux the steps are exactly
163:09 - same almost exactly same the only thing
163:11 - you have to worry about is on the
163:12 - Windows when you installed the git uh
163:16 - git SCM remember we in the very first
163:18 - video went through the git - SCM you
163:20 - downloaded the Git it also gives you a
163:22 - new terminal which is known as git bash
163:24 - and I highly recommend to use it instead
163:26 - of the Windows command line uh it's
163:29 - great but I'm not a big fan of Windows
163:30 - command line go ahead and use the git
163:32 - bash all the Linux command like LS PWD
163:35 - all of them work fine with the git bash
163:38 - now once you have this this is the
163:40 - something that you have to do on your
163:41 - own and it's not much it's not much
163:43 - trust me so all you have to do is
163:45 - whether you're on Windows or wherever
163:46 - you are open up the git bash and run
163:48 - this command this command and make sure
163:51 - use the email ID which you have used to
163:53 - sign up on the GitHub and then uh notice
163:56 - here if you're are using the Legacy
163:58 - system that then only you have to use
163:59 - this one otherwise we don't have to use
164:01 - this one we will go with the latest key
164:03 - this one after that simply go ahead and
164:06 - this creates a new SSH key using the
164:07 - provided email as a label and it will
164:10 - generate this then you have to do is
164:13 - enter a file in which to save so uh
164:15 - Windows user obviously you can save it
164:16 - into users you and thens search and this
164:19 - the idore algorithm this underscore
164:23 - algorithm will be exactly this algorithm
164:24 - so in this case we are using ed25519 so
164:28 - this will be your file name
164:30 - idore idore ed25519 so that that will be
164:34 - your file name uh once you're done with
164:36 - this uh then simply you have to enter
164:38 - the passphrase uh if you can keep it
164:40 - empty that's also fine but whenever
164:42 - you'll make it make a get request you
164:44 - have to enter the same passphrase if you
164:45 - are setting one I usually don't set one
164:48 - I'm just happy with without that so once
164:50 - you're done with this uh adding your SSH
164:52 - key to the agent this is also you have
164:54 - to do so all you have to do is uh just
164:57 - come up here a new admin Elevate so go
164:59 - ahead use the Powershell of the windows
165:00 - and follow these commands and that's it
165:03 - you don't have to follow this step Noe
165:04 - nothing you just have to work through
165:06 - with these two commands get service name
165:08 - this is just copy and paste and then
165:10 - simply SSH add C drive and all of this
165:12 - that's it copy paste stuff that's it if
165:15 - you are on a Mac you have to do the
165:17 - exact same stuff on the Mac as well
165:19 - exactly same in the Mac also we have SSH
165:22 - key so go ahead and use this this is
165:24 - going to generate the same algorithm but
165:26 - your algorithm will be saved on
165:28 - different place which is/ user SLU SL
165:31 - and again idore algorithm this is
165:34 - important to know from directly the
165:36 - documentation itself because these may
165:39 - change in the future so it's better
165:40 - always to come here and find how to do
165:42 - the things so this is what you have to
165:44 - do again prompting and all of these are
165:46 - same for you and for the wind uh Mac
165:48 - guide this is what you have to run to
165:50 - make sure the SS agent in the background
165:53 - and then hey just open up this file and
165:56 - just create the file doesn't exist just
165:57 - go ahead and create this and just add
166:00 - this so couple of more steps for you but
166:02 - that's it till here that's the only
166:04 - thing you have to do uh do not do the
166:06 - things here generate new SSH for
166:08 - Hardware security we don't need that so
166:10 - yes literally three four steps you have
166:12 - to do on your own and there are so many
166:14 - articles around it that will help you to
166:16 - now the whole idea is once the these
166:19 - things are saved the SSH key is being
166:21 - generated open up that SSH key in vs
166:24 - code or any other editor that you want
166:26 - you have to copy this and paste it uh at
166:28 - a very special place let me show you
166:30 - where that place is uh I'll show you
166:32 - this open source contribution in a
166:34 - minute but first let's go onto the new
166:36 - and go up here and what you have to do
166:38 - is uh you will have exactly same kind of
166:41 - account and if you go up here on the
166:42 - homepage this is how it looks like and
166:45 - we're going to just click on this and
166:46 - click on the settings you also have to
166:49 - do this and you have to click on this
166:50 - SSH and gpg keys and this is the place
166:53 - where I have to hide some stuff from uh
166:55 - my screen so notice here once you click
166:58 - on this it gives you all these my
167:00 - existing Keys which I have hidden just
167:02 - click on this new SSH key and just give
167:04 - it a title and we will choose the
167:06 - authentication key not the sign-in key
167:08 - authentication key is fine and just copy
167:11 - paste this stuff here and that's it now
167:13 - you'll be able to communicate with your
167:15 - GitHub account and by the way in case
167:17 - you are worrying about that there are so
167:18 - many articles depicting exactly same if
167:21 - you go ahead and search for it how to
167:23 - add SSH key in GitHub uh maybe on a Mac
167:27 - you'll find so many articles and what
167:29 - you'll notice in these articles let's
167:30 - just say this is the medium article that
167:32 - they are pretty old that is why I'm
167:34 - referring you to documentation look at
167:36 - this
167:37 - 2019 although not much have been changed
167:39 - but yeah some of the algorithms has
167:41 - changed we don't use RSA anymore uh
167:43 - that's the one thing but if you'll
167:44 - notice these are exactly extracted from
167:47 - the same documentation uh they use the
167:49 - just the PB copy to copy that and that's
167:51 - it go into your uh window this GitHub
167:54 - it's a pretty old one go to the settings
167:56 - go to SSH Keys uh simply new SSH key and
167:59 - copy paste it that's it that's it maybe
168:03 - you have to add your password that's
168:04 - that's the max so this is I this is why
168:07 - I say this is so much important and a
168:09 - lot of people are not going to be
168:10 - following this but I cannot do this the
168:13 - SSH keys are very sensitive even I have
168:15 - to hide some of my SSH keys on the
168:17 - screen itself after the post-production
168:20 - this is important step here so now that
168:22 - assuming that you have painfully gone
168:24 - through with this whole step of
168:25 - connecting and all these things uh I
168:28 - think that's okay and all done now what
168:30 - you have to do once you're done with
168:32 - this uh go up here and together we are
168:35 - going to be working on uh creating a new
168:37 - repository and then we will learn how we
168:40 - can talk to the GitHub and how we can
168:41 - work with that so for that we're going
168:44 - to go into a new directory so let's just
168:46 - say where we are so let's go work with
168:48 - that we are in the git 2 so let's go
168:50 - ahead One Directory
168:52 - back and do a quick LS we are we can go
168:55 - into the git 3 now so let's go into CD
168:58 - and we're going to say git three there
169:01 - we go uh no my bad git 3 there we go and
169:06 - now we are obviously into the git 3 let
169:09 - me go ahead and change my code editors
169:13 - uh directory as well just give me a
169:15 - second I'll drag and drop onto this one
169:19 - and we are learning the git and we are
169:21 - in the git three so I'm going to just
169:22 - drag and drop into this one here now we
169:25 - are into this fresh repository where we
169:27 - are having all these things now let's
169:29 - just say we are building a website and
169:31 - we know the workflow of it now only
169:33 - thing extra that we have to do is
169:35 - connect everything to the GitHub and
169:37 - push the things onto the git itself
169:39 - let's go ahead and try this I'm creating
169:41 - a really amazing website I'm going to
169:42 - call this one as
169:44 - index.html I'll use a basic HTML docs
169:47 - here I'll just say
169:49 - uh get
169:51 - website and a simple H1 that has some of
169:54 - the LM text that's it that's my website
169:57 - now how does the flow of this entire
169:59 - thing looks like we have to work through
170:01 - with the git so we know that we have to
170:03 - initialize the git first and even before
170:05 - initializing we would love to know the
170:06 - status of it there is no get repository
170:09 - here we shouldn't be initializing it
170:10 - again and again that's why I check this
170:12 - and then I go ahead and say get in it to
170:14 - initialize my git repository there we go
170:16 - git is being initialized and if if I go
170:19 - ahead and check the G status now it says
170:21 - one untracked file is there we can
170:23 - quickly go ahead and do the commit so
170:25 - I'm going to go ahead and say get uh
170:27 - commit and we'll be using- am to quickly
170:30 - go ahead and add this and we're going to
170:32 - say add index file looks good all right
170:37 - so all right get
170:40 - commit oh we forgot to add but it should
170:43 - be done add index file nothing to be
170:46 - added what happened
170:49 - should be working
170:51 - fine okay all right I'm going to add
170:54 - this get add and now we should be able
170:57 - to usually it works but don't know why
171:00 - it doesn't work add index file and there
171:03 - we go now it's being updated let's go
171:04 - ahead and check how it looks like onto
171:06 - this one let's check the this one looks
171:10 - good and we are on what branch I would
171:13 - love to know that as well because this
171:15 - will be useful in a minute we'll be
171:17 - going with the git Branch VR on the
171:18 - master Branch all right now let's just
171:21 - say this is a very complex project in
171:23 - itself and I want to save it on the
171:24 - GitHub itself how does that looks like
171:26 - and how does that process work and do I
171:29 - understand this whole thing now from the
171:31 - git itself you can just go ahead click
171:32 - on this and create a new
171:34 - repository and we're going to call this
171:36 - one is uh learn dgit and this is
171:40 - available because it's Unique for my
171:43 - account you will be able to do exactly
171:44 - same because it will be unique for your
171:46 - account then we have to provide a
171:50 - description a test to learn G there we
171:54 - go you can keep your repository public
171:56 - or you can keep it private as of now
171:58 - I'll keep it public but I'm obviously
171:59 - going to be deleting it later on you can
172:02 - go ahead and add readme file we'll talk
172:03 - about the read me files in a minute but
172:06 - uh G ignore we have already worked
172:07 - through with that we don't want to push
172:09 - the git ignore from here as well
172:10 - although GitHub provides you an option
172:12 - to do so we're not going to be touching
172:14 - licensing as of now and I'll be just
172:16 - removing this this is one plugin that I
172:18 - actually go ahead and use this but it's
172:19 - fine you will not have this option this
172:21 - is for me my personal professional use
172:24 - all right so we're going to go ahead and
172:26 - simply say create repository now the
172:28 - moment you create a repository you'll be
172:30 - provided with some of the commands and
172:32 - we need to talk about these commands
172:34 - these are very important one so if you
172:35 - notice here or create a new repository
172:37 - in the command line we know a lot of
172:40 - these commands first of all the commands
172:42 - where we see all of this things like Eco
172:45 - can I zoom this some more there we go so
172:48 - if if you go ahead and see this this Eco
172:50 - command it does nothing it just creates
172:52 - a readme file in our case uh we have
172:55 - this file already being created our
172:58 - index.html is already here I'm fine with
173:00 - that then it says get in it I don't need
173:03 - to do it again because I have
173:04 - initialized my
173:06 - repository I have seen so many students
173:08 - and beginners who mindlessly copy paste
173:11 - these commands they don't understand
173:12 - what they are doing that's a bad habit
173:14 - you know exactly now then it says get ad
173:17 - read me so in our case it will be add
173:19 - index or dot whatever you want to use
173:22 - then it says get commit we have also
173:24 - made our commit now this command says
173:26 - git Branch dasm main now don't worry
173:29 - this- m is just to rename your existing
173:31 - Branch git knows it very well just
173:34 - before I shared this incident that it
173:36 - used to be called everything as Master
173:37 - git don't want that git want you to
173:40 - change this as main although there is
173:42 - nothing wrong in pushing the master but
173:44 - it's not a ideal situation so we're
173:46 - going to use this command- m to change
173:48 - the Branch name let's go ahead and do
173:50 - that uh we just have the master so we
173:52 - can just go ahead and say get branch and
173:54 - we can use- capital M and we can change
173:57 - it to the main suggestions are there as
173:59 - well so now if I go ahead and do this
174:01 - and check the branch I am on the main
174:02 - branch literally just a command to
174:04 - rename the branch now then we have
174:07 - something known as git remote ad origin
174:10 - and then this long name which is ending
174:13 - with the git and then it says git push
174:15 - dasu origin main this is the command
174:18 - which is actually responsible for
174:19 - pushing your code not just pushing your
174:22 - code but actually to streamline your
174:24 - flow now what is the Streamline what
174:26 - what is this happening all up here this
174:28 - is where we need to study the
174:29 - theoretical part of it so let's go ahead
174:32 - and study the theoretical part of it I
174:34 - know a lot of you are not big fan of it
174:36 - but we need to study of it okay so this
174:39 - is the discussion regarding the GitHub
174:41 - so let's go ahead and talk more about it
174:44 - so git is a software and GitHub is a
174:46 - service to host your git online as we
174:48 - saw there are many other services which
174:50 - are available and GitHub is known just
174:52 - not for hosting all of your softwares
174:55 - and all of your G information online but
174:57 - it's a collaboration tool it's used for
174:59 - backup it's even used for open source
175:01 - and we're going to have a separate
175:03 - discussion on this open source stuff and
175:05 - how it is helpful to understand the code
175:07 - base and all these things there are
175:09 - others as well gitlab I showed you
175:11 - there's even one one more bit bucket you
175:13 - can use that now a couple of commands
175:15 - that are going to be coming up uh very
175:17 - handy uh the first one is git clone
175:18 - we'll talk about that git clone as well
175:20 - in the later on videos don't worry about
175:22 - that but first of all the most important
175:24 - command that we have already studied is
175:26 - uh git config d-g Global user.name and
175:30 - provide your username similarly you have
175:32 - to provide the config d-g Global user.
175:34 - email and provide your email whatever is
175:36 - your email uh there's no such thing as
175:38 - you're exposing your email or something
175:40 - it's okay no worries on that uh you have
175:42 - to do your SSH key setup uh and again
175:45 - remember this uh GitHub doesn't allow
175:47 - you to push code with the password
175:48 - password a password based code push is
175:51 - not allowed on the GitHub only thing you
175:53 - have to do is configure your SSH it's
175:56 - not really hard try this couple of times
175:58 - and you will be able to succeed this is
176:00 - how software development learning curve
176:01 - works you don't see everything into the
176:03 - tutorial or videos or or something
176:05 - sometimes you have to read the
176:06 - documentation and go through with that
176:08 - okay uh check your instruction for your
176:10 - OS on the GitHub website as I showed you
176:12 - this the best and updated resource uh
176:15 - all these resources over the time gets
176:16 - outdated whatever is the best way uh
176:19 - recommended way is available on the
176:21 - GitHub website all right now let's go
176:23 - ahead and talk a little bit about the
176:25 - remote because we have been working with
176:27 - the git so far we are comfortable with
176:29 - that on the local host on our machine
176:32 - now it's time that we move on to the
176:33 - remote repository so couple of commands
176:35 - that we're going to go through first of
176:36 - all is remote- V this command will help
176:40 - you to figure out and see that whether
176:41 - do you have any remote repository being
176:44 - set up I have my local repository on my
176:46 - system remote repository is on the G up
176:48 - so I need to know that whether there is
176:50 - any setup for that or not and I can just
176:52 - verify that by saying get remote and I
176:55 - can say uh Dash we as an option and it's
176:58 - going to give you an empty result empty
177:00 - result simply says hey there's no
177:02 - connection there's no remote
177:03 - configuration being set and then you
177:06 - have to do is add the name here so what
177:09 - you have to do is get remote add that
177:11 - means I want to connect a remote
177:13 - repository I want to have a connection
177:14 - with them you have to add a name and
177:16 - have to add a URL and if you notice
177:20 - something on the git website it just
177:22 - tells you exactly same git remote add
177:25 - and then this is the origin and this is
177:27 - the name of this whole website and it is
177:30 - usually called as origin uh but it's
177:32 - just a name it's just a name that I'm
177:34 - calling it as so on the GitHub we are
177:36 - calling this as origin that's what the
177:39 - name I'm adding in the remote repository
177:41 - and you'll notice in the next command it
177:43 - says that push uh and this I'll talk
177:46 - about this dashu it's a pretty
177:48 - interesting one but right now just
177:49 - ignore this oh you are not able to see
177:51 - this there we go uh so this is where it
177:54 - is okay so this remote ad is origin this
177:58 - is the name of you can say Branch not
178:01 - really correct but you can say it as
178:02 - Branch so name of this uh repository on
178:05 - the GitHub is named as origin and what
178:08 - I'm saying next is push into this origin
178:11 - from my main from my main branch you can
178:14 - change the branches as well you can say
178:16 - that hey uh production or you can say
178:18 - deploy Branch whatever the name is push
178:21 - a deploy Branch to the origin that's the
178:23 - most important part A lot of people just
178:25 - mindlessly copy paste these commands you
178:27 - don't have to do that okay uh let's go
178:29 - ahead and do this so the step one is to
178:31 - add then provide a name and the URL we
178:34 - are calling it as origin but feel free
178:35 - to change this the usual thing that
178:37 - you're going to see is uh git remote ad
178:39 - origin I don't really like to change it
178:42 - because everybody calls their remote
178:44 - repository as origin that's what the
178:45 - GitHub says in the documentation so I'm
178:47 - not a bit advocate of changing it so
178:49 - origin and then provide the name and
178:52 - usually like 99.9% of the case this is
178:55 - going to end up with the dogit that's
178:57 - that's the clue of it then you have to
178:59 - Simply go ahead and say get remote and
179:02 - you can just go ahead and rename uh old
179:04 - name and new name so yes you can go
179:06 - ahead and rename that there is nothing
179:08 - stopping you I'm not going to do it but
179:10 - I'm showing you that yes the option
179:11 - exists all you have to do is get remote
179:13 - rename and then rename it from origin to
179:17 - Superman nobody's stopping you to do so
179:19 - and you can go ahead and remove this as
179:21 - well get remote remove the name so if
179:25 - let's just say you don't want to push it
179:26 - on the same repo you can go ahead and
179:28 - change the remote name as well and you
179:30 - can change and push things onto that now
179:32 - the second command that we need to
179:33 - discuss this we have already got enough
179:35 - discussion on this one is this one git
179:38 - push dasu origin main this is
179:40 - interesting one uh first of all let's go
179:42 - ahead and add this now that we know this
179:44 - command we can actually go ahead and by
179:46 - the way uh notice here it says or push
179:48 - an existing repo from the command line
179:51 - they actually says hey this whole stuff
179:52 - you already know only command that you
179:55 - need is to add and configure your remote
179:57 - repository so that's actually easiest
179:58 - one and most of the time you're going to
180:00 - see a lot of people just come up here
180:01 - and copy it from here that's why they
180:04 - have given this copy option directly to
180:05 - you because they know people who really
180:08 - understand the G they just need this
180:10 - thing here and again you can go with
180:12 - HTTP version or you can go SSH version
180:14 - most of the people prefer the HTTP
180:16 - version SSH version although we have
180:18 - configured s for authentication and
180:20 - pushing the code I usually prefer the
180:22 - HTTP method and they also recommend this
180:24 - one here so what we can do is simply go
180:26 - ahead and copy this now we know the
180:28 - command we know what's the meaning of it
180:30 - we understand this command so let's go
180:32 - ahead and say that get remote add and
180:34 - just go with that so we're going to say
180:36 - get remote add and we're going to call
180:39 - this one as origin and then paste this
180:41 - one so this is what we have now let's go
180:43 - ahead and try to enter and see what
180:45 - happens all right nothing happens that's
180:48 - good news and if I go ahead and say get
180:50 - remote V now it gives me that there is
180:54 - an origin which you have set up this is
180:56 - for Fetch and this is for push push that
180:59 - means if I want to send any code this is
181:01 - the remote repository that's that will
181:03 - be used if I want to fetch anything this
181:05 - is the remote repository that will be
181:07 - used uh usually they are like again in
181:09 - 99% of the case they are the same but
181:12 - hey there's nothing stopping you to
181:13 - change this one as well all right let's
181:16 - go ahead and talk about the next next
181:17 - command command that we have so remote
181:20 - origin is being set now the next one is
181:22 - get push and all you have to provide is
181:25 - the name of the remote where I have to
181:27 - push and the branch name which you want
181:29 - to push in our case the remote name is
181:31 - origin hope you haven't changed it to
181:32 - Superman and my branch that I'm pushing
181:35 - up is the main but there is no such
181:37 - compulsion that you have to all always
181:39 - push the main branch you can push the
181:41 - production Branch you can push a bug fix
181:44 - Branch Nobody Does that but maybe maybe
181:46 - you can do that and again we're doing is
181:48 - uh get push remote and then uh it the
181:52 - whole syntax is local branch colon a
181:54 - remote Branch there's no colon involved
181:56 - in this one you just have to mention any
181:58 - that's the whole idea so go ahead and
181:59 - work with that now but in our option on
182:03 - the GitHub we saw one more option this
182:05 - is not like I'm telling you just you can
182:07 - do get push and origin and Main but what
182:09 - this dasu option comes up here uh this
182:13 - dhu option is a pretty interesting one
182:15 - uh let's first go ahead and do this uh
182:17 - directly so we're going to go ahead and
182:19 - say get push and we're not going to be
182:21 - using the dashu we'll just go ahead and
182:23 - say origin and Main now if I just go
182:26 - ahead and use push origin and Main
182:28 - notice what happens when I go ahead and
182:30 - hit enter it tries to just push the code
182:33 - on the GitHub all right without dashu
182:36 - option we were able to push it so what's
182:38 - wrong in this nothing actually I can go
182:40 - ahead and reload here and the whole code
182:43 - is being pushed and I can see my index
182:45 - file and the code that I have which is
182:47 - very small code I have this code on my
182:50 - repository so why we bother even about
182:53 - having this dasu option let me show you
182:55 - that if I open up this code file and
182:57 - let's go into the code part and index
183:00 - file let's open this up eventually after
183:02 - some time I realize I need to add
183:04 - paragraph of 30 words in my code and
183:06 - there we go we have added the paragraph
183:08 - what do we want to do next we obviously
183:10 - want to add this so we're going to go
183:12 - ahead and say get add
183:14 - index.html we have added this we want to
183:16 - have the commit we're going to go ahead
183:18 - and say get commit and we're going to
183:20 - say this time we have uh add
183:25 - paragraph to code there we go we have
183:28 - committed this so This commit is done
183:30 - and nice what do we do after that uh we
183:32 - obviously have already got the remote
183:34 - set so I can check this I don't need to
183:35 - do this again and again remote
183:37 - repository is set being once or if
183:39 - you're updating you can set it again but
183:40 - most of the time it's just one what if I
183:42 - do want to push it now can I push it
183:45 - directly if I go ahead and say get push
183:48 - and no origin no main can I do this it
183:51 - says I don't know what you're trying to
183:53 - push the current Branch main has no
183:56 - Upstream Branch interesting what this
183:58 - Upstream is to push the current branch
184:00 - and set the remote As Upstream use get
184:03 - push Das Das set Upstream origin main so
184:07 - what this Upstream is and what do I need
184:09 - to know about so whenever you are
184:11 - actually trying to get push you
184:13 - obviously are setting a stream with some
184:15 - of the remote repository and so that
184:18 - later on you can just push this you have
184:20 - to set these options and that's exactly
184:22 - what the GitHub was trying to do with
184:24 - all of us so if you see this git push
184:28 - dasu origin main dasu setups an upstream
184:31 - that allows you to run the future
184:33 - command the future command of git push
184:35 - so that you don't have to run this git
184:37 - push origin main again again what we
184:39 - doing is we are setting an upstream we
184:41 - are linking the origin with the main so
184:43 - that whenever you do a push
184:45 - automatically from this Branch whenever
184:47 - you run the command uh get push it
184:49 - automatically links the Upstream origin
184:52 - with the main and pushes the code on the
184:54 - GitHub it will not happen on the other
184:56 - branches because there the Upstream is
184:58 - not linked that's why you are completely
185:01 - safe to just do this and in fact why
185:03 - would you run the command of git push
185:05 - there but this is the linking process uh
185:08 - the git push in the future will directly
185:10 - push the code to the geta that's the
185:12 - whole idea so in case you want that
185:14 - accidentally I should not be able to
185:15 - push this uh don't use the dash shoe
185:17 - option but if you want that hey this is
185:20 - little bit overwhelming for me I'm going
185:22 - to go ahead and set up the Upstream you
185:23 - can use the set Upstream option just
185:25 - like this that's completely valid but
185:28 - since GitHub loves this to be a little
185:30 - bit of the shortcut that's why they give
185:31 - you dashu it's exactly the same no
185:33 - changes at all so if I go ahead and do
185:35 - this uh it will obviously push the code
185:38 - but from now onwards what I can do is I
185:41 - can update more stuff so let's just say
185:43 - we are going to use unordered list we'll
185:45 - be having a list item uh maybe three
185:47 - three of them and we're going to say
185:49 - home and again about
185:53 - us and we're going to go ahead and say
185:55 - contact us so we have added a navigation
185:58 - bar or list now obviously you want to
186:00 - add and commit on that let's go ahead
186:01 - and do that we're going to say get add
186:04 - index file just like this we're going to
186:07 - go ahead and say
186:08 - get
186:10 - commit and we're going to
186:13 - say add what do I do uh commit hm
186:18 - add a list and by the way do you know
186:20 - that I can actually run multiple cursors
186:23 - here I don't know I forgot the shortcuts
186:25 - yeah there we go so you can see I can I
186:27 - can write on the two places at once this
186:29 - is the most amazing so notice it yeah it
186:32 - doesn't make sense here but yeah that
186:34 - that's the option I've never seen that
186:36 - in any other terminal anyways having
186:38 - just fun with the terminal okay so we
186:40 - have added the list all
186:43 - right and now I can literally go ahead
186:45 - and do get push no option nothing is
186:48 - required uh these all are grade out they
186:49 - are not commands and I can do this it
186:52 - does the pushing automatically for me so
186:55 - this is really really nice thing to work
186:57 - on with by the way you can just go ahead
186:59 - and check this out if I go ahead and do
187:01 - a
187:02 - refresh and we're going to do index HTML
187:05 - and we can see yeah my amazing important
187:08 - list is now here all right uh let's go
187:10 - ahead and work on with
187:12 - this and understand a little bit more of
187:15 - that so uh
187:18 - when you clone a repo we need to learn a
187:20 - little bit about cloning of the repo
187:22 - we'll be doing that and we can switch
187:24 - the branches and all of these things uh
187:26 - these things definitely we are going to
187:27 - study a little bit later on that how we
187:29 - can actually fetch some of the repos uh
187:32 - how we can bring some of the existing
187:33 - code on our repository on our local
187:35 - system can understand the branching and
187:37 - all of that uh we'll understand the bit
187:39 - of the commands on that but first uh let
187:41 - me go ahead and show you some of the
187:43 - interesting stuff so if you go ahead
187:45 - this is how it looks like on the remote
187:47 - repository now just like every web
187:50 - server picks up the index.html file
187:53 - similarly onto the GitHub what you can
187:56 - do is you can add a readme file this
187:59 - readme file has a special extension
188:01 - known asmd shortcut for markdown and the
188:04 - markdown syntax probably I'll create a
188:06 - crash course or something some another
188:07 - day but right now this is just your
188:09 - heading so we're going to
188:12 - say something like this learn
188:14 - about git and GitHub
188:18 - and we're going to Simply
188:21 - say something like
188:25 - this yeah we have to do
188:27 - this and we can go ahead and add some of
188:30 - the code bases as well uh
188:34 - maybe if you don't like this you don't
188:36 - have to do this this is just fun and I'm
188:38 - going to go ahead and show you that yes
188:40 - you can write codes here as well just
188:42 - like this no no need of
188:46 - python oh all right so this looks okay
188:49 - we don't need this come on there we go
188:52 - so whatever you want to write in the
188:54 - markdown file you can just go ahead and
188:55 - do this now let's just go ahead and add
188:57 - this we're going to go ahead and add
189:00 - readme.md and we're going to commit this
189:03 - we're going to Simply go ahead and say
189:05 - this get
189:07 - add add read me file and I can just go
189:11 - ahead and simply do get push nothing
189:13 - else once you actually go ahead and push
189:15 - this file then what you're going to noce
189:17 - this is that GitHub automatically picks
189:19 - up this read me file and shows you some
189:22 - stuff here on the homepage of the
189:23 - repository that's why it's required and
189:25 - you can see the code that I wrote now
189:27 - you have the copy command that's that's
189:28 - the GitHub charm of it that they are
189:30 - trying to throw on top of it but anyways
189:33 - you now understand this whole thing now
189:35 - coming back on to the part where we
189:37 - wanted to discuss this part that how you
189:39 - can bring some of the pull request and
189:41 - all these repositories and all these
189:42 - things so there are a couple of more
189:44 - commands and we have to go through with
189:46 - this so the First Command that you're
189:48 - going to go through is the top one which
189:51 - is this one so you can just run the
189:53 - command get clone and then the URL of
189:56 - any repository that you want and you can
189:58 - bring that code onto your system so that
190:00 - you can understand it better and go
190:02 - through with that let's see if we have
190:04 - some of the code repository and we can
190:06 - work with that so I'll go onto my code
190:08 - base and I'll try to find something
190:11 - which is a little bit short and small
190:15 - I'm pretty sure there are thousands of
190:17 - these things thing so we're going to go
190:18 - ahead and use
190:21 - something okay I did made a series on
190:24 - goang maybe you want goang source code
190:26 - so what we can do is we have so much of
190:28 - the source code onto this one and I want
190:30 - that to see and bring all of this in
190:32 - here so I'm going to go ahead and say uh
190:34 - onto the code I can go ahead and
190:36 - download the zip but since we are all
190:39 - are the git users and we are pretty
190:40 - professional now I can just go ahead and
190:42 - copy this https by the way there is SS
190:45 - GitHub CLI other options as well you can
190:46 - install the GH utility I'll use the
190:49 - GitHub uh https method and I can just go
190:53 - ahead and copy this now we can clone
190:56 - this on wherever we like let's go ahead
190:59 - and move on to One Directory back if I
191:01 - do an LS I have one 123 we have already
191:04 - seen that but I can run the command of
191:06 - get clone and paste this so now whatever
191:09 - is there on this repository will
191:11 - actually be brought down U you can see
191:14 - it's getting downloaded if I do a quick
191:16 - LS uh this is one here and notice here
191:19 - goang I can just go ahead and open this
191:21 - folder up here and this is the goang so
191:24 - entire codebase is now with me and I can
191:26 - open this up in my favorite editor go
191:28 - ahead and work with this and whatever I
191:30 - want to do this is the code file that I
191:32 - have I can go ahead and work with this
191:34 - so that's the whole idea behind having
191:35 - this entire uh git clone command and all
191:38 - these things uh but what will happen is
191:42 - uh maybe multiple people are working on
191:44 - the same repositories and things like
191:46 - that so sometimes what happens is uh we
191:49 - need to understand this with the notes
191:51 - itself is let's just say you and your
191:54 - friend are working on some remote
191:56 - repository uh so there are couple of
191:59 - things which we have already noticed now
192:01 - we understand this entire flow that
192:02 - there is something known as working area
192:05 - where the work is going on you haven't
192:06 - staged it committed or anything then we
192:09 - saw that there is a staging area where
192:11 - we stage the changes staging doesn't
192:13 - means commit you haven't committed that
192:15 - but once the staging area is done we
192:18 - actually commit the code and this is
192:19 - known as your local repo so everything
192:21 - we have done so far before the GitHub
192:23 - introduction that is your local
192:24 - repository and once you're done with the
192:26 - local repository you obviously go ahead
192:28 - and push the code on the GitHub that is
192:30 - known as your rep remote repository so
192:32 - all this is this is your limit of the
192:34 - working repository this is the limit of
192:36 - your staging area this is the limit of
192:38 - your local repository and this is the
192:41 - limit of your repo now imagine this
192:43 - scenario you and your colleague are
192:46 - working on the the same code basis and
192:48 - you're making the push directly on the
192:50 - GitHub everybody does that there is
192:51 - nothing exception in that but let's just
192:54 - say you are building a index file and
192:57 - your friend is building a navigation bar
193:00 - and you realize that hey before pushing
193:02 - the index file or before pushing the
193:03 - footer I would like to grab all the
193:06 - things which is updated on the GitHub so
193:07 - that I can make a fresh uh push onto the
193:10 - GitHub repo now you will learn a couple
193:12 - of commands onto that and in fact by the
193:14 - way if you look onto this one if I open
193:17 - up my VSS code you'll see these commands
193:20 - if you just click on this Source control
193:22 - you'll see these commands here as well I
193:24 - hope you can see that there is a pull
193:26 - there's a push and there's a fetch all
193:28 - these commands are here so it's not like
193:30 - something alien there's a fetch here and
193:32 - there's a pull here both of these
193:34 - commands actually bring the code from
193:37 - the connected remote repository to your
193:39 - code base not the git clone git clone
193:41 - just brings it at one at a time but if
193:44 - you are actively contributing in the
193:45 - repository uh and then the things are
193:48 - different so what we have seen right now
193:50 - goang it is just bringing the code but
193:52 - here since we are actively contributing
193:54 - in this remote repository some of the
193:56 - other guys might have done that so if
193:59 - pull and fetch both brings the updated
194:01 - code from the remote repository what's
194:03 - the difference between them there's a
194:05 - difference okay when you run the command
194:09 - get fetch this actually gets the info
194:12 - but don't put the things in my work so
194:14 - what it's doing is it just brings
194:17 - everything into your local repository
194:19 - but hasn't brought in the work into your
194:21 - work area yet when you do the git pull
194:24 - command it actually gets all the
194:25 - information from the remote repository
194:28 - and moves it into your working area and
194:30 - yes there are use cases for both of them
194:32 - there are scenarios where you want to
194:34 - just fetch you don't want to pull it
194:35 - into your code base yet uh maybe you
194:37 - want to First verify is it breaking my
194:39 - code or uh is it not touching my code is
194:42 - it not overwriting my code once you are
194:44 - done with that then you go ahead and do
194:46 - the G pull again depends on which
194:48 - company you are working what workflow
194:49 - you are going through just remember the
194:51 - git fetch actually uh gets the info but
194:54 - doesn't put the things into your work
194:56 - while on the git pull it actually gets
194:58 - all the things uh by the way uh git uh
195:01 - pull is a a combination command what it
195:05 - does is git Fetch and git merge so yes
195:08 - you get it right all the work that
195:10 - you're seeing in the remote repository
195:12 - uh you first do the git Fetch and then
195:14 - to bring it from here into working you
195:16 - do the git merge uh but most of the time
195:19 - we just run the git pull and again git
195:21 - pull origin main uh changes will be
195:23 - merged to the main branch whatever is
195:24 - there in the origin so just keep in mind
195:27 - uh these are some of the common things
195:29 - that you'll be seeing as long as you
195:30 - remember this whole diagram uh you'll be
195:33 - all fine in bringing any of the code
195:35 - into your local repository uh couple of
195:37 - more discussion about uh the things uh
195:40 - before we go ahead uh that GitHub has
195:43 - actually a lot more feature I'll walk
195:45 - you through with some of the features it
195:46 - has features like adding the
195:48 - collaborators multiple people can work
195:50 - on the same file you should be the owner
195:51 - of the repository a readme file we have
195:54 - already gone through with that mark down
195:55 - briefly touched onto this one you can by
195:58 - the way add your own gist guest whatever
196:00 - you call that uh these are code Snippets
196:02 - it has options like code spaces it has
196:05 - options like dab container let me show
196:06 - you where it is so uh what the options
196:09 - are if I go ahead and open up the same
196:12 - uh goang what you can do is instead of
196:14 - the code you can actually run the code
196:15 - space as well so what what's this code
196:17 - space it's a kind of a VM it's kind of a
196:20 - virtual machine so and virtual machine
196:22 - is not an ordinary virtual machine here
196:24 - this is configured based on what kind of
196:26 - code you are having so this code
196:28 - requires goang setups so it will open up
196:30 - a Dev container or a virtual machine
196:32 - which will have the configuration and
196:33 - the installation of the goang if you
196:35 - open up a repository in code space which
196:37 - is something like react nexs or some
196:39 - JavaScript uh then it will open up the
196:41 - code space like that so GitHub is a
196:43 - pretty more powerful tool and you can go
196:45 - ahead and configure this repository
196:47 - however you like I'll not go much deep
196:49 - into that I've already talked about it
196:50 - on my channel so no this is not the time
196:53 - to talk more about it now a a couple of
196:56 - things if you want to play more around
196:57 - it I'll definitely walk through with
196:59 - this now let me share one more incident
197:01 - with this uh you so you can see on my uh
197:04 - repository we have this open source
197:06 - contribution so let me just warn you
197:08 - something about it before we move into
197:09 - the next video and talk more about on
197:11 - these situation so GitHub has a way uh
197:14 - in which you there are some of the code
197:15 - bases which are open source and you can
197:17 - contribute your code onto that code base
197:20 - now people I don't know what they were
197:21 - thinking uh they thought that it would
197:23 - be really cool if I go ahead and update
197:25 - these small readme files and put up the
197:28 - contribution all these contributions are
197:30 - spam contribution they are not adding
197:32 - something something to the code they are
197:33 - not putting value into the code base and
197:36 - they started doing all these update
197:37 - readme files and all of that and the
197:39 - entire expressjs repository was like
197:42 - spammed with it not a good idea so I to
197:45 - drive the traffic in in sarcasm I said
197:48 - hey here is your open source
197:49 - contribution all those who want to spam
197:51 - or something just go ahead and do this
197:53 - people didn't understood that sarcasm
197:55 - and started to spam on this repository
197:57 - as well but that was okay because it was
197:59 - created for this intentional purpose and
198:01 - you can see I still have 220 commits
198:03 - there are still pull requests and all
198:05 - these things I'll walk you through how
198:06 - these pull request and all these things
198:07 - are made uh but that's okay uh just
198:10 - remember you don't have to do this don't
198:12 - spam anything uh if you want to
198:14 - contribute add value that's the whole
198:15 - idea so any anyways I hope you uh you
198:18 - have enjoyed this small talk and small
198:20 - lecture not small really big one but now
198:22 - that you have gone through with the all
198:23 - this thing you don't have any fear about
198:26 - the git and how the things are actually
198:27 - working you're are comfortable with the
198:29 - git and the GitHub and how to push your
198:31 - code you understand each and every
198:32 - command why does it exist what role does
198:34 - it play is it a shortcut or how does it
198:36 - work and that's my goal to make you
198:38 - comfortable with the git that's my
198:39 - number one priority that's it for this
198:41 - video let's catch up in next video
198:49 - hey there everyone AES here back again
198:51 - with another video and how can we just
198:54 - conclude our git and GitHub Series
198:57 - without talking about open source so I'm
198:59 - pretty sure that a lot of you are very
199:01 - much excited about open source and a lot
199:03 - of you think that open source is
199:05 - probably a Gateway of getting the job
199:08 - and this is a kind of a misconception
199:11 - that is floating around and I would love
199:12 - to talk about it and no I'm not denying
199:14 - that open source can possibly open some
199:16 - of the doors for you as a credential and
199:19 - a credibility that you can write the
199:21 - code and understand the large code bases
199:23 - and yes sometimes these opportunities do
199:25 - come around but we need to understand
199:27 - the whole open source ecosystem first of
199:29 - all why I'm going to discuss about this
199:32 - so if you look at this I do myself
199:34 - maintain a couple of open source project
199:36 - not alone me uh we have a team
199:38 - maintainers and all these people who
199:39 - work around it and this is one of the
199:41 - biggest open source project which is
199:43 - growing quite a lot and a lot of people
199:44 - are using this to learn I'll talk more
199:47 - about this this is not the only one uh
199:49 - we have couple of more which are in the
199:51 - pipeline which are about to come very
199:52 - soon so yes I do have some experience
199:55 - with the open source of contributing it
199:57 - in it and maintaining in it and uh being
199:59 - the founder of the open source project
200:01 - so yes I do have my credibility backing
200:03 - me up and I would like to talk about it
200:06 - so first and foremost see open source is
200:09 - not just about making your source code
200:11 - available on GitHub or bid bucket or
200:14 - it's not about that anybody can walk in
200:16 - and just contribute in that code open
200:18 - source is way more than this open source
200:21 - is a philosophy that hey software can be
200:23 - or should be distributed for free so
200:26 - that other programmers can save some
200:28 - time and it's my contribution to the
200:29 - society to the community of programmer
200:32 - that's the whole sense of it and I think
200:35 - the open- source projects whether how
200:37 - small it is or how big it is should
200:39 - never be considered as just taken for
200:42 - granted it should never happen a lot of
200:44 - our software Engineers who are working
200:46 - working as a full-time job as a software
200:48 - engineer as a team lead as a CTO they
200:51 - love to contribute in the ecosystem of
200:54 - the developers through the open source
200:56 - project they make their software which
200:59 - is really amazing The Amazing software
201:01 - that they're releasing to the world and
201:02 - allowing us to just contribute in it
201:05 - make the software better and add more
201:07 - features on that software now this is a
201:11 - great practice and this is this is
201:13 - wildly appreciated throughout the
201:15 - community and it's a good thing but a
201:17 - lot of people sometimes actually take
201:19 - this for granted and abuse these
201:22 - maintainers of the project just because
201:24 - the software is not working the way they
201:26 - want it to be on some of the edge cases
201:29 - and some of the people just think that
201:31 - this is a shortcut of getting the job
201:33 - and they just mindlessly without adding
201:36 - the value contribute in these softwares
201:38 - this should not be done so in this video
201:40 - I'll walk you through the entire pathway
201:42 - of how you can do that how we can make
201:43 - the pull request how the open source
201:45 - project should be read and found out
201:47 - about it and all these things I hope
201:49 - this video is going to be the most
201:50 - valuable part of the entire series and
201:52 - uh hope you'll enjoy it so I have uh
201:55 - prepared a kind of a road map for you
201:58 - which you can follow and then we're
201:59 - going to talk about how we can do all
202:00 - these collaborations and pull request
202:02 - and whatnot so uh here's a small road
202:05 - map uh which you need to understand and
202:07 - these are the steps you have to have to
202:09 - follow there is no other way there is no
202:11 - shortcut for it the step one of
202:13 - contributing in an open source project
202:15 - is talk yes the first and foremost thing
202:18 - that you have to do before even thinking
202:21 - about contributing writing any single
202:23 - line of code is talk to the people
202:25 - you'll see that in any of the software
202:27 - you'll notice here that any software
202:29 - that you are maintaining this is the
202:30 - actual repo of the open source project
202:32 - notice here there's a tab known as issue
202:35 - and you can go ahead and create a new
202:36 - issue and can just mark it like how do
202:39 - you want to get started maybe learner
202:41 - API is here uh front end contribution
202:43 - request whatever that is open a blank
202:45 - issue you can just go ahead and do that
202:47 - but that's your first step to talk to
202:49 - people if there is a mention of the
202:51 - Discord server or slack talk to the
202:53 - people we have personally seen that some
202:56 - of the people who were working on some
202:58 - of the uh features uh they reached out
203:00 - to us that hey uh we have done the work
203:02 - entirely our code is ready can you
203:04 - accept the pull request and we said no
203:06 - we cannot we were not aware that you
203:08 - were working on it and we have already
203:10 - finished our work and we are pushing it
203:11 - on our own uh they felt really bad but
203:14 - hey we were not aware of the thing that
203:16 - you were actually working on this
203:17 - feature if you would have been working
203:19 - we would have never spent our time we
203:21 - would have allotted this entire feature
203:23 - to you so the step one is always and
203:26 - always talk to the people I have no
203:29 - dreams coming about that you are working
203:30 - on some feature I do know that I want to
203:33 - know that what you are working or what
203:34 - you want to work on without talking
203:36 - there is no open source that happens so
203:38 - Step One is talk to them Twitter Discord
203:41 - slack doesn't really matter talk to the
203:43 - founders and the maintainers of the open
203:44 - source project if the the reply is
203:46 - coming up late don't start working on it
203:48 - that's not a good idea then the step two
203:51 - is open an issue most of the open source
203:53 - project these days are living on GitHub
203:55 - but if they are living on some else some
203:57 - another platform it's okay they also
203:59 - have the uh option of opening up an
204:01 - issue until unless you open up the issue
204:03 - there is no way of uh finding and that
204:06 - issue can be anything maybe I'm not
204:08 - really a big fan that you are fixing up
204:10 - some of the things in the readme I
204:12 - absolutely don't like it uh but let's
204:14 - just say if you're doing any small modif
204:16 - if ification you're adding some
204:17 - functionality open an issue that I want
204:20 - to work on this thing or there is a
204:21 - small bug into this one I want to fix
204:23 - this bug or maybe there's some more
204:25 - thing I want to add onto this one this
204:27 - is what I want to do so open an issue
204:29 - for this one and since you're already
204:31 - talking to the developer then go ahead
204:33 - and get that issue assigned to you and
204:35 - developers will do that they will assign
204:37 - this issu to you and they'll be taking
204:39 - care that okay somebody is working on
204:41 - this issue they will give you the
204:42 - timeline as well that hey we expect that
204:44 - you might be done this with this issue
204:46 - in 2 days 10 days whatever is the
204:49 - timeline doesn't really matter now once
204:51 - you're done with this remember this part
204:53 - which is work and add value now if
204:56 - you're just fixing a dot in the readme
204:58 - file if you're just uh correcting the
205:00 - small grammar I do understand correcting
205:02 - the grammar is also an important part
205:04 - but you are calling yourself as a
205:06 - programmer so I expect that you'll be
205:08 - contributing the code first and then the
205:10 - documentation it's an important part I
205:13 - do agree a lot of people might pull my
205:14 - leg just by saying uh that hey you are
205:17 - you are saying documentation is not that
205:19 - important but in the open source
205:21 - Community we have seen so much of the
205:23 - nuisance just because of the readme that
205:25 - now we are all bitter on that so just go
205:28 - ahead and work on this and add value to
205:30 - the project and this is just one project
205:32 - like free API the API Hub uh but there
205:35 - could be others as well like python is
205:36 - also open source uh JavaScript V8 engine
205:39 - is open source if you understand that
205:41 - code and you think you can add some
205:42 - value to it the whole idea revolves
205:44 - around this this highlighted part which
205:46 - is is add value and yes documentation
205:49 - have its own value when you write the
205:51 - entire gigantic documentation rewrite it
205:53 - entirely or something like that it
205:55 - should have enough of the work that's
205:56 - all I'm saying take it in the wrong way
205:58 - if you wish to but all I'm saying is add
206:00 - value now once you're done with this uh
206:02 - make a PR also known as pull request
206:05 - I'll walk you through how the pull
206:06 - request is done and then iterate over it
206:09 - it is not expected and it should not be
206:11 - expected by you that once you make a
206:13 - pull request it will be accepted just
206:15 - like that sometimes there are conflicts
206:18 - and that's common and sometimes they
206:20 - want that hey probably this code was not
206:22 - up to the Mark we want you to it trate
206:24 - over it we want you to add this Edge
206:26 - case also maybe you need to work a
206:28 - little bit more that's how things works
206:30 - in the software industry things doesn't
206:31 - work on the one go so make the pull
206:33 - request but be ready to iterate over it
206:37 - now the feedback might come up in 1 Day
206:38 - 2 Day 10 day because these maintainers
206:40 - also have their full-time job they are
206:42 - also busy folks they're maintaining it
206:43 - for the community so have patience
206:46 - that's the key that's the key have
206:48 - patience and wait for it uh once uh you
206:51 - are done with this and your pull request
206:53 - uh is accepted then hey go ahead and go
206:56 - out celebrate because you have
206:57 - contributed in the community that's it
207:00 - that's it celebrate it post it on
207:02 - Twitter post on LinkedIn that's it
207:04 - that's the whole idea that I have
207:06 - contributed to the society I have
207:07 - donated to the society uh once you
207:09 - donate anywhere you don't just expect
207:12 - things in return that's not the point of
207:13 - donation and you're donating your code
207:16 - to to that repository so some people
207:18 - assume that making pull request is a job
207:20 - guarantee I've made a pull request I
207:22 - work in open source that means I'll get
207:23 - a job in it sometimes that happens but
207:26 - sometimes it doesn't happen that's how
207:28 - the expectation should be it should be
207:29 - just a donation if you expect that I'm
207:32 - working in open source I'm contributing
207:33 - in the code uh that means I'll have a
207:35 - job it's a job guarantee thing no it's
207:38 - not it's not it surely is a proof that
207:41 - uh you can understand the large code
207:42 - bases and every single person who will
207:44 - be hiring you will be will be noticing
207:47 - very clearly that what contribution was
207:49 - done is is it just another spam
207:51 - contribution in the readme file then
207:53 - obviously you'll be avoided in the
207:55 - entire discussion of the job and
207:57 - salaries but if that contribution is
207:59 - pretty good you have added some code
208:01 - which was which was previously the
208:03 - breaking change and now it's a good one
208:05 - again it's it's all good one here so
208:08 - again keep in mind and the step one
208:09 - never ever forget that talk talk to
208:12 - people without talking there should not
208:13 - be done all right so uh this is the step
208:16 - and you can see there are a lot of
208:18 - issues in our as well so some of the
208:20 - bugs are there some of the feature
208:21 - requests are there we have also
208:23 - requested some of the Help Wanted uh
208:25 - documentation guide if somebody wants to
208:27 - do it we have big CJs some of the bugs
208:30 - enhancement front end help wanted so
208:32 - there's a lot of things that goes on
208:33 - with this and uh we have closed them 35s
208:36 - are being closed so we constantly close
208:38 - them and you can see some of the pull
208:39 - request are being made as well obviously
208:41 - we'll go through with these pool
208:42 - requests but you can see there are two
208:43 - comments on this so we are having a back
208:45 - toback discussion on this so PR in the
208:48 - draft uh do you want me to review it or
208:50 - until wait until completion I'll let you
208:52 - know for review it so this guy has made
208:54 - a little bit early pull request uh but
208:57 - our maintainers are asking that hey uh
208:59 - this pull request seems like in draft do
209:00 - you want us to review it so that we can
209:02 - either merge it or can say that hey you
209:04 - need to do more work so again uh our
209:06 - community is pretty active but notice
209:08 - here the good part is that saruk whoever
209:10 - is contributing here he's communicating
209:13 - he's talking to us not making any uh
209:15 - spam pool reest or something uh so yeah
209:17 - that's good and notice here resolve
209:19 - conflict so we have to work hard we have
209:20 - to resolve these conflicts as well and
209:23 - understand the code base and whole
209:24 - things but the important part is how do
209:26 - we make these all pull request and all
209:29 - these things uh in order to make this
209:30 - pull request and all these things what
209:32 - we have done is uh I have actually went
209:35 - ahead and created another account from
209:37 - another of my email and this is an OP
209:40 - Source test project and again there
209:41 - could be another such project and what
209:43 - we're going to do is now we'll copy this
209:45 - and then there's nothing much in it it's
209:47 - just an index file which says Hey learn
209:49 - to make pull request there's nothing in
209:51 - it uh the whole point is not to write
209:53 - code in this series that I do in other
209:55 - videos but the whole idea is to make you
209:57 - understand the flow of the G so first of
209:59 - all I know this URL so I'll just go
210:01 - ahead and copy this and then I'll simply
210:03 - go ahead and go onto this one here and
210:08 - let's go ahead and open up this one so
210:11 - we'll just go ahead and add this one
210:14 - here so this is something I found
210:16 - interesting as an open source project
210:18 - that hey this looks pretty complex it
210:20 - just grabs the email sends the email
210:22 - handles the payment G God knows what but
210:24 - it it's a really fairly complex project
210:27 - and I want to contribute in it maybe I'm
210:29 - using it in some of my personal work and
210:31 - it's just failing in some of the edge
210:33 - cases I want to fix them up and not only
210:36 - just in my code base I want to get it
210:38 - fixed on for other people's as well so
210:41 - the step one is go ahead and let's Fork
210:43 - this one so you'll find a lot of things
210:45 - by the way you can just go ahead and
210:46 - download this one as well there's no
210:47 - problem in it but in order to make this
210:49 - pull request uh I'll just go ahead and
210:51 - Fork this so you can see the drop down
210:53 - as well that hey existing fork and all
210:55 - these thing I'll just click on this one
210:57 - so what this will do is this will bring
211:00 - the entire source code in my account as
211:03 - well uh the open repository name is open
211:05 - source which is available and again you
211:07 - can change the name doesn't really
211:08 - matter I'm just copying and pasting and
211:10 - you can copy the main branch only but
211:12 - there's an option of copying other
211:13 - Branch as well but it's totally fine and
211:16 - we are going to create a fork that means
211:19 - bring all the code in our account so
211:20 - I'll just go ahead and create this one
211:23 - now what this has done is it has forked
211:26 - the entire uh code base and everything
211:29 - in my and this is not my code and it is
211:32 - a lot of people just walking you through
211:34 - a lot of people just Fork these
211:36 - repositories and feels like hey there's
211:39 - a lot of contribution in my account
211:41 - anybody who is experienced programmer
211:43 - and who is looking forward to hire you
211:44 - they can immediately see how much of the
211:46 - work is forged and how much is your work
211:49 - now once this is all done let's go ahead
211:51 - and copy this onto our code as well so
211:54 - I'm going to go ahead and copy
211:56 - this let's go back and do a quick LS and
212:00 - we are on to this one and how do we
212:02 - bring the whole source code in this
212:04 - folder pretty easy we can just go ahead
212:06 - and say get clone and paste this and
212:08 - once I do this uh now let me just go
212:11 - ahead and open this code on my vs code
212:15 - that's how you do it let me just go
212:17 - ahead and open
212:19 - this and where is it h open source there
212:23 - we go so I'll just drag and drop this
212:24 - folder here and there's nothing much
212:26 - onto this one now I am assuming that hey
212:30 - there should be some significant
212:32 - contribution into this one so I would
212:34 - love to do a contribution in this and
212:35 - again I hope you assume that understand
212:37 - this point that we are just putting a
212:40 - demo here understand the Big Flash word
212:42 - is demo so I think that there should be
212:45 - an Navar into this one so I'll just go
212:47 - ahead you might be wondering hey this
212:49 - guy adds too much of the Navar but
212:51 - before we go ahead and add Navar and all
212:53 - these things uh I would not love to go
212:55 - ahead and do all these things in in the
212:57 - main branch that's that's not a good
212:59 - idea so if I go ahead and simply CD into
213:02 - this one which is let's go ahead and do
213:04 - Lis first this one is open source so
213:07 - let's go ahead and we do open source if
213:09 - I go ahead and say get status that's
213:11 - always a good idea to run and it says
213:13 - you are on the main branch and if I go
213:15 - ahead and check the Branch so this is
213:17 - the main branch and the good practice is
213:20 - you should not be troubling somebody's
213:22 - main branch directly since you're
213:24 - working on something else uh why don't
213:26 - you create your own Branch bug fakes
213:28 - feature ad feature request and all these
213:29 - things and do your work in that branch
213:32 - in itself uh let's go ahead and do this
213:34 - so what we're going to do is I'll just
213:36 - create a new Branch so I'll go ahead and
213:38 - say get checkout and I'll use a dashb
213:43 - option and we're going to create a nav
213:45 - bar
213:46 - and nav feature Navar is good I'll just
213:50 - go ahead and call this one as Navar now
213:52 - we are onto this Branch let's go ahead
213:54 - and verify I'm in the Navar
213:56 - branch and I'm going to go ahead and add
213:58 - a
214:00 - Navar do HTML of course oops shouldn't
214:04 - be a
214:05 - comma rename this and we are going to go
214:09 - told you my keyboard is little
214:11 - off and we're going to go ahead and call
214:13 - this one as nav and order list list item
214:18 - and we're going to say again same home
214:20 - we're going to go ahead and say about us
214:23 - and contact
214:27 - us contact us there we go all done all
214:30 - good now what's the next step let's go
214:32 - ahead and push the code we're going to
214:34 - go ahead and say get add and we added a
214:38 - navb bar.
214:40 - HTML and we go ahead and Commit This
214:46 - add navbar feature to
214:49 - code it's really fun so now this is all
214:52 - done and it's pretty good that we have
214:54 - added and updated and all these things
214:56 - are good let's go ahead and check out
214:58 - the remote this is something that we
214:59 - have already learned in the last video
215:01 - so I'm going to go ahead and say I want
215:03 - to check out get remote- V and my origin
215:06 - is already being set why because I've
215:08 - cloned the repository all these things
215:10 - are already set for me and now what I
215:13 - want to do is I want to do the push so
215:14 - I'm going to go ahead and do the get
215:16 - push now I know that there's a push for
215:19 - origin as well so I'm going to go ahead
215:21 - and say origin and On the Origin this
215:24 - time I want to add my Branch just in
215:26 - case you missed out that let me just go
215:28 - ahead and say the branch and there we go
215:31 - Navar so what I want to do is this time
215:33 - I want to say get push and On the Origin
215:37 - I don't want to push the main but my
215:39 - branch which is Navar and again as I
215:42 - told you in the last video uh it's not
215:44 - always compulsory that that you push the
215:46 - main only to the origin you can push any
215:48 - branch to the origin let's see what
215:51 - happens when I go ahead and do this now
215:53 - whatever the code that I have done is
215:55 - being pushed to uh this this Branch up
215:58 - here okay uh again we don't want to open
216:01 - or anything like that uh looks pretty
216:03 - good let's see what has happened onto
216:06 - this one let's go up here onto let's
216:09 - minimize this we don't need it much and
216:11 - notice here once I come back here and
216:13 - hit a refresh sometimes you probably
216:14 - don't need to hit the refresh you'll see
216:16 - that the Navar had recently pushed 23
216:19 - Second and it gives me a compare and
216:21 - pull request so what I've done is I have
216:23 - foged the repo and I've created a new
216:25 - branch and this is where I fixed the
216:27 - bugs added the feature and whatnot now I
216:30 - can go ahead and compare and pull
216:31 - request the whole idea is sending the
216:34 - pull request means hey I have made some
216:36 - changes I'm sending these changes to the
216:39 - main owner of the repository so here
216:42 - everything is mine because it's a fort
216:44 - one but I don't want to keep these
216:46 - changes with me probably this that's the
216:48 - case but in this case I want to compare
216:49 - and send the pull request so in this
216:51 - pull request you have to be very very
216:54 - cautious this title and this description
216:57 - should be very very thoughtfully written
217:00 - take your time there is no hurry in it
217:02 - if you take 15 minutes if you take
217:04 - entire day that's okay this will help
217:07 - the maintainers to actually understand
217:09 - what you really want to push and uh what
217:11 - help does it making this and notice here
217:13 - you'll also notice that the base reposit
217:15 - is AES pw1 that's my another account and
217:19 - uh this is where I'm asking that hey
217:21 - merge my changes into your main fire in
217:24 - in your main branch that's sensitive
217:26 - Branch so be very cautious what you're
217:28 - doing this is sensitive work but we are
217:30 - sending it from our Navar and we are
217:32 - changing merging all this thing here so
217:34 - that's the whole thing in I want to send
217:37 - from my Navar from my open source from
217:40 - hes open source to whoevers I'm making
217:43 - this and this could be anything like
217:44 - python Maybe JavaScript V8 engine so
217:47 - again these are really the software the
217:49 - backbone of the internet be very
217:50 - cautious if you're merging something on
217:52 - the main imagine how how how I I cannot
217:56 - explain it words you get the idea that
217:58 - it's very sensitive thing and again add
218:00 - naar feature to the code no it's not a
218:02 - good idea you should write it more and
218:04 - add the description more about it like
218:07 - um something like Navar added and then
218:10 - just go ahead and again by the way you
218:12 - can check out the preview as well so
218:13 - this is the markdown syntax again and
218:16 - just write a detail
218:20 - description detailed description
218:24 - of your work and again there should be
218:27 - bullet points about it like uh one and
218:30 - there should be two so all the details
218:32 - that you probably want to add this
218:34 - should be added notice here this is how
218:35 - it looks like so once you're done with
218:37 - this uh go ahead and use the headings
218:39 - balls italics whatever you want again
218:42 - write the detail description it should
218:44 - be easier to read what your code is
218:46 - doing take your time there's no hurry in
218:48 - it once you do this you can go ahead and
218:50 - make a create a pull request so we're
218:52 - going to go ahead and make a pull
218:54 - request now this pull request is being
218:57 - sent now somebody who is uh going to
218:59 - work on this project let's go ahead and
219:02 - minimize this now this is where I see
219:04 - all these pull requests so if I go ahead
219:06 - and check out this notice here there's
219:07 - one pull request so this is where the
219:09 - whole things comes up now somebody needs
219:12 - to go through with this and have to
219:13 - check okay uh this is the bar edit this
219:16 - is the detail description this is your
219:17 - entire work looks good is it breaking my
219:20 - code is it not breaking is it adding any
219:22 - value to the code base or something like
219:23 - that this is uh done nicely I will
219:26 - obviously go ahead and check your
219:27 - commits I'll check the diffs as well
219:29 - like how the diffs is being made what is
219:31 - the commit details uh everybody goes
219:34 - through in it and verify it manually
219:36 - okay this is the new code that has been
219:37 - added this is the new files that are
219:39 - being added how many files were changed
219:41 - so somebody needs to manually go through
219:42 - it there is no automation for this one
219:44 - and there cannot be one because it's
219:46 - sensitive stuff so once I go ahead and
219:49 - do all the review changes and all these
219:50 - things I go back to the conversation
219:52 - probably I want to ask more questions
219:54 - I'll go ahead and ask you questions and
219:56 - all these things once the whole
219:57 - communication and everything is done uh
219:59 - we are done with the talking and the
220:01 - maintainers are happy that H this is
220:02 - interesting one you have done a good job
220:05 - uh they can go ahead and merge this pool
220:07 - request so I'll go ahead and say add nav
220:09 - bar and confirm the merge and that's
220:11 - where your merging happens and that's it
220:14 - now our code base if anybody go ahead
220:16 - and checks checks this your very
220:18 - valuable code that you have added to the
220:20 - code base which is Navar is being added
220:23 - to this open source and if you go ahead
220:25 - and check out the commits you you'll see
220:26 - that that hey this commit was pulling up
220:28 - this one here now if I go ahead and
220:30 - check out this one here if I go ahead
220:32 - and refresh
220:34 - this you'll notice this uh pull request
220:37 - successfully merged and closed somebody
220:39 - have done this that now you can go ahead
220:41 - and delete the branch whatever you want
220:42 - to do but this is the whole entire
220:44 - process of uh making the codebase and
220:46 - all these things now in case you want to
220:48 - just practice of how this is being done
220:50 - and all these things uh I highly highly
220:52 - recommend to Simply go ahead if you just
220:54 - want to try that's why I've created this
220:57 - uh open source and there is one let me
221:00 - just go into my
221:03 - profile and if you go ahead and check
221:06 - this in the repository if you just want
221:08 - to have a fun with this uh this is the
221:10 - open source contribution a lot of people
221:12 - just work on it try how the pull
221:14 - requests are being made no year how many
221:15 - pull request I sometimes accept them but
221:17 - it's not a very valuable contribution
221:19 - it's just fun stuff you want to test out
221:21 - things and I understand that part that
221:22 - you need also your testing uh it need to
221:25 - be scratched so that's that's there uh
221:28 - notice here there's a lot of pull
221:30 - request going on and somebody people are
221:32 - trying that how it's being done they
221:34 - also want to just try things out and
221:36 - that's why this open source contribution
221:37 - I don't really mind it don't do this to
221:39 - spam on any other repository just on
221:42 - this repos this is made to do the spam
221:44 - so go ahead and do that no problem at
221:45 - all so I hope this actually gave you an
221:48 - entire idea of how the open-source
221:50 - project works up and how the
221:53 - contribution is being made in the open
221:54 - source how the pull request work and
221:56 - these are all collaborative tool being
221:58 - given by the GitHub itself and GitHub
222:01 - issues GitHub pull request manager and
222:03 - checkers and there are a couple of
222:05 - others like GitHub code spaces they are
222:07 - amazing tools even we have GitHub
222:09 - actions which is moreover a part of cicd
222:11 - pipeline a bit towards the devop side
222:13 - we'll probably cover that in some other
222:14 - course or another video but the whole
222:17 - point is that now you're are pretty much
222:18 - comfortable with the git contributing it
222:21 - my only request to you is use git in
222:24 - your daily life until unless you start
222:26 - using it as a daily driver uh it's not
222:28 - going to be much fruitful for you to
222:30 - watch these videos use it daily that's
222:32 - the whole idea that's the whole point
222:33 - you have learned something you got the
222:34 - knowledge use it every day all right so
222:37 - I hope uh this was a pretty fun Journey
222:39 - for you you have understood the details
222:42 - uh the importance of the things you are
222:44 - pretty amiliar with the git now the
222:46 - workflow of it you are pretty familiar
222:47 - with the GitHub as well uh do let me
222:49 - know if this video Series has helped you
222:51 - or uh you have enjoyed this and if you
222:53 - have enjoyed this do share it with
222:55 - others as well uh it gives me immense
222:57 - pleasure when you share these things on
222:58 - Twitter on LinkedIn it makes me really
223:00 - proud that hey the work I'm doing as a
223:02 - teacher it's reaching out really and
223:04 - it's helping out people uh that's the
223:06 - thank note that you can send me and I
223:07 - would be super happy with that so that
223:10 - is it uh that's it for uh the entire
223:12 - series of the git and GitHub uh do watch
223:14 - out in the future I'll definitely bring
223:16 - more series which are more complex and
223:19 - have another topics I already do a lot
223:21 - of videos around it so do check out my
223:23 - YouTube channel as well subscribe that
223:25 - and we'll surely catch up in the next
223:27 - video