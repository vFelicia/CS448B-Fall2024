00:00 - this course covers everything you need
00:01 - to know to create automate and publish
00:04 - API documentation that your developers
00:07 - partners and users will love Jason
00:09 - Harmon developed this course Jason
00:11 - brings over 20 years of experience in
00:13 - the technology and API world and he's
00:16 - the CTO of stoplight hello free code
00:19 - Camp community and welcome to appek
00:21 - University and this course on API
00:24 - documentation best practices my name is
00:26 - Dan barahona co-founder of appek
00:29 - University and for the next 90 minutes
00:31 - or so you'll learn all about API
00:33 - documentation including how to write
00:35 - good doc good documentation techniques
00:38 - and tools for creating documentation and
00:40 - even the business impact of good
00:42 - documentation your instructor for the
00:44 - course is my good friend Jason Harman
00:46 - CTO of stoplight and one of the most
00:48 - recognized experts in this field I'd
00:51 - also like to invite you to check out all
00:52 - our free courses on appc University
00:55 - you'll find courses on API pen testing
00:57 - the oasp API top 10 API security
01:01 - fundamentals and more all the courses on
01:03 - our site are free and include quizzes to
01:05 - assess your knowledge and if you
01:07 - complete everything and pass the final
01:08 - quiz we'll issue you a certificate and
01:11 - badge to recognize your accomplishment
01:13 - thanks again for watching and I hope you
01:14 - enjoy this
01:16 - [Music]
01:20 - course welcome to the documentation best
01:23 - practices course we're going to talk
01:26 - today about creating great docs and as
01:29 - really almost a byproduct of that why
01:31 - that's going to improve your security
01:33 - picture uh but to be clear we're going
01:35 - to take a big look picture at kind of
01:37 - documentation in general with a focus on
01:39 - apis doing that in a lot of companies
01:42 - this is the lifeblood of how software is
01:44 - working now quick agenda of what we're
01:47 - going to cover we'll talk about Who I Am
01:49 - wrot with just so you maybe believe why
01:50 - you should listen uh Define what we mean
01:54 - by API documentation and kind of what
01:56 - that
01:57 - entails from a business perspective why
01:59 - why API documentation can make a really
02:01 - big impact some techniques and tools and
02:04 - and finally best practices for what
02:07 - works well in this
02:09 - space so first up on our agenda who am I
02:13 - my name is Jason Harman I'm the chief
02:15 - technology officer at stoplight and I
02:17 - oversee all the giggy stuff engineering
02:20 - product security it I also host a
02:22 - podcast called apat intersection all of
02:25 - this is more relevant in thaten a
02:28 - practitioner of building platforms and
02:30 - and apis and that sort of thing at
02:33 - everything ranging from Big public
02:34 - companies like PayPal and Expedia group
02:37 - down to fast growing star type form you
02:39 - should and all of that has comeing into
02:42 - play in in my role as stoplight and I've
02:44 - been pretty involved in the community at
02:46 - large I think I've always been seen as
02:48 - an advocate for API
02:51 - documentation so let's define what we
02:53 - mean what is API documentation I think
02:56 - documentation is a big nebulous word so
02:58 - we're going to start start big and Whitt
03:00 - our way
03:01 - down in simple terms this is a human
03:05 - readable description of how developers
03:07 - will enable machines to communicate with
03:10 - each other so man of full but this is my
03:13 - attempt to wrap up a few different
03:14 - things one is documentations for humans
03:18 - this is for people to read and
03:20 - understand the developer aspect that's
03:23 - not the whole story we're not just
03:24 - talking about documentation for
03:26 - developers but at the end of the day the
03:29 - outcome um why people are engaging with
03:31 - these sorts of things is for developers
03:34 - to create connections between machines
03:37 - that's what apis are all
03:39 - about now I do think a lot of what we're
03:41 - going to talk about is portable to many
03:42 - other Realms of documentation especially
03:45 - technical documentation and in general
03:48 - in the world that we live in today
03:49 - interprocess communication between
03:51 - machines is quite often what we're doing
03:54 - so I think it's pretty
03:57 - relevant so there's a couple of
03:59 - different high level things that we
04:01 - would look at when we talk about
04:02 - documentation at large the first is
04:04 - documenting your product and this may or
04:07 - may not entail
04:08 - apis there's the second big bucket of of
04:11 - documenting apis and kind of the
04:13 - difference here is in product
04:15 - documentation you might be showing
04:17 - someone how to use a product and quite
04:19 - often this is going to be a
04:21 - point-and-click experience kind of thing
04:24 - where it's how do I go set this up and I
04:26 - can go figure that out from the
04:28 - documentation API documentation can be a
04:31 - bit of a unique creature in that one
04:33 - it's pretty developer Centric and again
04:35 - we'll talk about the other personas that
04:37 - we should consider but it's really about
04:40 - how to write code to use something
04:43 - pretty different in nature and this is
04:45 - really more where we're going to go I
04:48 - think there's a lot of Concepts that are
04:49 - applicable to both in here but we're
04:52 - going to focus on that kind of more
04:54 - developer Centric
04:56 - documentation to that question who is
04:58 - this documentation 4 and as I said
05:01 - developers mentioned that a number of
05:03 - times but it's really important when
05:06 - you're sitting down to write this kind
05:07 - of content that it's both developers and
05:12 - a lot of different non-developers my
05:14 - tagline to help remember this developers
05:17 - try and business buys what do I mean by
05:21 - that is that increasingly in in
05:24 - engineering and it circles leaders are
05:26 - looking to Developers for is this
05:28 - something that can use and live with and
05:31 - with apis this is especially important
05:34 - you're in essence building a
05:35 - relationship with another company when
05:37 - you use their API so you're counting on
05:40 - the fact that a developer you're going
05:42 - to have a very narrow window of
05:43 - attention they're going to go try it out
05:45 - see how it works and make a judgment
05:47 - call so that developer experience the
05:50 - big picture of it is really important
05:52 - and documentation is the first thing
05:54 - they're going to see the first thing
05:55 - they're going to interact with so
05:56 - critical to capture their imagination
05:59 - and confidence quickly however at the
06:02 - end of the day most developers are not
06:04 - the ones making buying decision and so
06:07 - there are often technology or Business
06:09 - Leaders or both who are involved in
06:12 - approving the budgets to go by these
06:14 - sorts of things so when we're talking
06:16 - about content it's important that we
06:18 - speak in two voices we'll look at
06:20 - examples of breaking this down and a way
06:23 - to do it that it is easy enough as a
06:25 - rule of thumb and speaks to these two
06:28 - audiences because we really need to
06:30 - communicate in different
06:32 - ways there's another kind of Matrix
06:35 - aspect to this which is are you building
06:37 - Internal Documentation for within your
06:39 - organization to bring Folks up to speed
06:42 - on how to use apis between different
06:44 - teams and again this could apply to
06:46 - other things as well or is it externally
06:50 - focused and this is really productized
06:52 - potentially monetized thing that you're
06:53 - going to put out there to the world and
06:56 - external doesn't always mean publicly
06:58 - open more and more more we see that
07:00 - partner programs and this sort of thing
07:02 - you might invite someone to a portal
07:05 - where they're going to read the
07:06 - documentation on how to integrate and
07:08 - create a long-term
07:09 - relationship there are definitely some
07:11 - nuanced differences between these these
07:13 - different kind of environments in
07:16 - internal
07:17 - environments really it's just fair to
07:19 - say that authorization and access
07:22 - control patterns are going to look
07:24 - pretty different for internal apis
07:26 - versus external and we'll talk talk
07:29 - plenty more trust me about the things
07:31 - that we need to pay attention to around
07:33 - off patterns and why they're so
07:35 - important but it is important to
07:37 - recognize that you're going to have a
07:39 - pretty different look on internal versus
07:41 - external
07:42 - facing um additionally for Internal
07:45 - Documentation you're often going to have
07:47 - a lot of proprietary information links
07:49 - to perhaps other knowledge stores on
07:52 - where to find out more about the
07:53 - implementation behind this or the team
07:56 - who's supporting it these sorts of
07:58 - things you might have operation metrics
08:00 - that are linked into this to point to
08:02 - how healthy is this thing should you
08:05 - trust it based on its track record of
08:07 - operational Health as we're in the
08:09 - external world you're often going to put
08:11 - a lot more effort into customizing The
08:14 - Experience putting stronger branding
08:17 - messaging and really some developer
08:19 - marketing on why should you use this
08:22 - thing now I do think these external
08:25 - concerns are starting to creep into the
08:27 - internal world and a thought of this is
08:30 - not really the documentation writer's
08:32 - job per se but again we're trying to
08:35 - look at a total developer experience
08:37 - which really entails many aspects so
08:41 - these are just things to keep in mind if
08:43 - you're going down the road uh let's go
08:45 - build a documentation Bo for apis you're
08:48 - going to have a pretty different
08:49 - consideration set depending on the
08:52 - environment that it's being published to
08:55 - but I will say that I still think that
08:57 - the developers try business by Mantra
08:59 - holds up in both okay the basic context
09:03 - of what is API documentation let's take
09:06 - a little deeper step into what are the
09:08 - different types as I said documentation
09:10 - can be a bit of a nebulous word and we
09:12 - really need to get a little more precise
09:15 - as we get into creating something
09:17 - practical and useful so there's really
09:19 - three highlevel things that you tend to
09:21 - see in this type of documentation and
09:25 - again I think a lot of this is portable
09:27 - to things outside of apis
09:29 - the first is reference material and I
09:31 - think for most say developers when we
09:34 - think about API documentation this is
09:37 - the stuff we're thinking about it's
09:39 - really the Encyclopedia of how to go use
09:42 - this API when you already know what it
09:45 - does you understand the ideas and you're
09:47 - ready to go write code references where
09:49 - you go however if you only document an
09:53 - API in its reference format and and
09:56 - we'll look at what these look like so
09:58 - don't worry if reference doesn't mean
09:59 - much to you yet all is more important is
10:03 - the concepts right what are the things
10:06 - in simple terms what does this API do
10:09 - but often it's not just one API it's
10:12 - that there's a set of ideas of why you
10:16 - would come use this Suite of apis what
10:19 - are the big things that you're trying to
10:21 - accomplish so in sort of product speak
10:24 - we might say what is the job that you're
10:25 - trying to do and then furthermore you
10:27 - might have tasks and this is where could
10:29 - be a whole other chain of things that
10:31 - need to be done you might want to
10:33 - showcase certain steps that users need
10:36 - to take in order to accomplish so these
10:39 - are pretty similar and it's a pretty
10:41 - blurry line between Concepts and tests
10:43 - but we'll look at some examples what
10:45 - these things look
10:47 - like so first up on API reference I just
10:51 - picked on one API portal here and we'll
10:54 - look at a few different ones but this is
10:56 - pager duties and one example of L their
10:58 - API
10:59 - is listing escalation policies now what
11:03 - we're really looking at here is
11:04 - reference material and you'll notice
11:06 - that right off the top we've got request
11:09 - and query parameters on the right we've
11:11 - got off information there's a request
11:14 - sample kind of falling off the bottom
11:16 - there we've got you know the get so the
11:19 - verb that's being used in HTTP and then
11:22 - the URL that's being called so there's a
11:24 - lot of kind of parameterized information
11:27 - for an engineer is filling in the blanks
11:29 - that they need on knowing how to call
11:31 - this thing but you'll notice a couple of
11:34 - things
11:35 - first the first paragraph of this
11:38 - reference material is not really
11:41 - speaking to developers if I looked and
11:43 - said what is list escalation policies
11:46 - mean first list all of the existing
11:48 - escalation policies so that tells me the
11:50 - list and I'm getting the existing thing
11:52 - that's not something that is fabricated
11:54 - from thin air so it's not a lot but I'm
11:56 - starting to learn escalation policies
11:59 - Define which user should be alerted at
12:00 - which time that's what an escalation
12:03 - policy is right so now we're starting to
12:05 - get tidbits of
12:07 - Concepts and this is I think to that
12:10 - point of if it's a non-developer who's
12:13 - browsing pager Duty site and saying is
12:15 - this something that we should be using
12:17 - now in this case I'm being contrived
12:19 - because peder duty is a pretty developer
12:21 - Centric product as a whole but let's
12:23 - imagine for a moment that I'm shopping
12:25 - as a non-technical user I get a sense of
12:29 - what this thing
12:30 - does now if this isn't enough this is
12:33 - typically a very topical description
12:36 - functional description of what this does
12:38 - we might dig into what are the concepts
12:40 - behind this and in this case Pedro Duty
12:43 - expressly calls out an API Concepts
12:45 - document right they have a specific
12:47 - thing for this but let's come back to
12:50 - the concepts in a moment the other part
12:52 - that I really want to break down for you
12:54 - is the anatomy of API reference material
12:59 - now there are certainly lots of other
13:01 - things out there we're going to talk
13:03 - about more of the rest style apis a
13:06 - request response kind of thing you'll
13:09 - notice on the far left we've got
13:11 - responses and across the top we've got
13:13 - different status codes in kind of a rest
13:16 - stle API 200 is good 400 the user did
13:19 - something wrong 500ish errors that
13:22 - something's wrong in the server we'll
13:24 - look at that in a later section a little
13:26 - more in detail but you notice the B
13:29 - section here for developers this is what
13:30 - we're looking for right what's the
13:32 - information that comes back and I need
13:34 - every field described in an adequate
13:37 - enough fashion that I know what that
13:39 - field means so if I looked at this and
13:42 - let's say offset and limit weren't
13:43 - described most developers would guess
13:45 - this is probably
13:47 - pagination same thing with total and
13:49 - more these are pretty easy but as we get
13:52 - into the escalation policies summary in
13:54 - this case is a pretty specific meaning
13:57 - it's short form ser generated string
14:00 - sync important information so it's okay
14:02 - this isn't really something that someone
14:04 - hand curated this is a server generated
14:06 - value this has some kind of insight
14:09 - built into it so I understand that
14:11 - there's going to be something
14:12 - interesting and valuable in that summary
14:14 - information and as we go if we went down
14:16 - the list of all these properties there's
14:18 - things to learn at every step and so
14:21 - just keep in mind that when you're
14:22 - looking at the fields were returned in
14:24 - the body of a response the field name
14:26 - itself would often have incredible
14:29 - ambiguity so for instance if I said look
14:32 - at the summary in escalation policies
14:35 - what does summary mean summary is a very
14:37 - ambiguous term it's used in lots and
14:39 - lots of domains and it needs a precise
14:42 - definition of what summary means in
14:44 - order for it to have adequate context to
14:46 - be useful now we're kind of looking at
14:48 - it backwards here from left to right
14:49 - we're looking at the response first but
14:51 - for what it's worth this is what people
14:53 - quite often want to see first is before
14:55 - I do all the work to make a request am I
14:57 - going to get in the response resp wantse
14:59 - does this have the data that I need but
15:02 - if we shift over to that request side
15:03 - you'll notice right off the bat Security
15:05 - in this case it's an API key and there's
15:08 - probably a whole set of steps to go get
15:09 - that it is an important and critical
15:12 - first step to making any request is
15:13 - there some kind of security being passed
15:16 - here um beyond that is all the query
15:20 - parameters and you might see headers as
15:23 - well which I have highlighted on the
15:24 - right and these are going to depend on
15:27 - what kind of endpoint or calling whether
15:30 - it's a get or put or a post or a delete
15:34 - you're going to see different kind of
15:36 - interaction patterns here so just keep
15:38 - in mind that like in this case we're
15:40 - looking at a list of things and you'll
15:42 - notice a lot of stuff with like offset
15:44 - and limit total these are paging
15:47 - controls and we'll talk about kind of
15:49 - consistency this is a great example of
15:52 - the kind of thing that I would expect if
15:54 - I look across all of PAG your duty
15:56 - apis that I would tend to see these same
16:00 - paging parameters and paging response
16:03 - parameters as a a consistent pattern so
16:06 - that if I write code as a client against
16:09 - this API I can reuse how paging works
16:13 - against the pager data API across many
16:15 - apis and not have to write a bespoke way
16:18 - of doing it every time I integrate with
16:20 - yet another operation in headers I think
16:23 - this is one that a lot of folks maybe
16:25 - don't grasp so well and it won't go too
16:27 - far down the rabbit hole with the API
16:28 - thing but in this case accept in content
16:31 - type these are about content negotiation
16:34 - and this is an important thing to cover
16:35 - as well in pager Duty's case they're
16:38 - calling out that they're using a
16:39 - specific media type that's bespoke to
16:42 - pager Duty when we look in there we see
16:44 - this plus Json which tells me it's going
16:47 - to be Json data they're just telling me
16:49 - that application D and pager duty is
16:52 - their specific domain description of
16:54 - what's going to be in that Jason and
16:56 - then version two it's another important
16:59 - one to cover is how are you handling
17:00 - versioning in pag your Duty's case
17:02 - they're passing it as part of a media
17:04 - type in the accept header and making it
17:06 - an implied part of their content
17:08 - negotiation content type is again just
17:11 - part of that content negotiation you'll
17:12 - see here application Jason it is
17:15 - increasingly likely that you're only
17:17 - going to be seeing application Json type
17:20 - content in apis but always be mindful
17:23 - that there could be other content types
17:24 - supported on older stuff you might see
17:27 - XML in specific domains you could see
17:30 - very specific media types to that domain
17:33 - something like VCF for contact
17:36 - information right so be mindful that
17:39 - developers may have multiple ways or
17:42 - multiple formats that they can retrieve
17:44 - from one API so I promised we dig into
17:47 - those status codes and this is a concept
17:50 - that we really need to embrace is that
17:54 - if the documentation is the first thing
17:55 - that a developer goes and looks to to
17:57 - learn how to use an API and they form
18:00 - their first request it's pretty likely
18:03 - that their first interaction with that
18:04 - API is going to produce an error because
18:06 - they don't know how to use it and maybe
18:08 - they've made mistakes in how they formed
18:10 - that request so it's essential that we
18:12 - describe what happens in the case that
18:15 - is not 200 and something 200 class
18:18 - errors are success 400 classes you did
18:22 - something wrong in 500 classes I did
18:24 - something wrong if you're the API
18:26 - Builder so for a client a 400 class
18:29 - error is going to tell you there's
18:31 - probably something wrong with the way
18:33 - that you provided those parameter values
18:35 - and you need to fix that in order to get
18:37 - a valid response now the shape of that
18:40 - error again this is one of those
18:42 - consistency things I'm going to dog here
18:43 - we're going to come back to talking
18:45 - about consistency but if I'm using an
18:47 - API from pager Duty and I use it one I'm
18:50 - going to write error handling code and
18:52 - I'm going to expect that all the other
18:54 - apis they offer I should be able to
18:56 - reuse that error handling code by and
18:58 - large so that's going to save me a lot
19:01 - of code as a client of it and not having
19:03 - to duplicate all those efforts from a
19:06 - documentation perspective one it's
19:09 - critical that you're focusing a lot of
19:11 - energy early on in what are the errors
19:13 - going to look like both in their shape
19:16 - and in their content so in this case
19:19 - we're really just showing the shape but
19:21 - it certainly is common that you might
19:23 - have some breakdown of what kind of
19:25 - errors are you're going to get and this
19:27 - often
19:29 - Beyond just the status code if we look
19:31 - on the right in the body you'll see that
19:33 - underneath that error object that is
19:36 - returned in the response in the case of
19:38 - this 400 that there's a message so
19:41 - you'll see in the example message and
19:43 - this should tell the human what's wrong
19:46 - there's quite often a code that's
19:48 - accompanied with it and this goes a
19:50 - level deeper than just those HTTP status
19:53 - codes and goes into an application
19:55 - specific error code and quite often
19:57 - having reference material that
19:59 - enumerates what those error codes mean
20:02 - will help users when they're not looking
20:05 - at the documentation down the road and
20:07 - they're writing code and they suddenly
20:09 - get a 400 error and some weird code in a
20:11 - message that they don't understand they
20:13 - want to be able to go back to the
20:15 - documentation and find what does this
20:16 - error mean or detail so another common
20:20 - practi is in these errors that you would
20:22 - actually provide a link back to the
20:24 - documentation I say it's common practice
20:26 - I I wish it was more common
20:28 - but it is a a commonly understood
20:30 - affordance I think more folks should
20:33 - Implement at the very least in our
20:34 - documentation we should always have some
20:37 - place to go look up those error codes
20:40 - and really just understand in general
20:42 - what our errors going to look like on
20:44 - your
20:46 - platform and for what it's worth bottom
20:48 - left here I wanted to highlight that
20:50 - beyond all of that customer facing or
20:53 - kind of API consumer facing attention
20:55 - that we should pay to probably their
20:58 - first interaction with errors the mere
21:01 - practice of documenting what the errors
21:03 - on I promise you it's going to surface
21:06 - weirdness in your error handling and if
21:09 - you don't go through that that
21:10 - discipline of documenting those things
21:13 - those are going to be surprises that no
21:14 - one is going to welcome this is the
21:16 - first taste of something we're going to
21:18 - hit quite a bit is that you're going to
21:20 - uncover quality problems here and part
21:23 - of that quality I think is going to be a
21:25 - security aspect if you have access
21:27 - control that don't work right and you're
21:30 - not getting 401 or 403 errors typically
21:33 - for off related issues where you
21:36 - expected them even as a writer who's
21:39 - addressing this you should be able to
21:41 - flag to the team that look we've got a
21:43 - hole in our access control that I can't
21:45 - explain in the documentation so this is
21:47 - where there's a lot of implicit quality
21:50 - and security enhancement that goes with
21:52 - documentation and I think errors is one
21:54 - of the big
21:57 - wins
21:58 - moving on another typical thing that
22:01 - you're going to see in API documentation
22:03 - is a try it type component where you can
22:06 - go get some sort of authorization token
22:09 - fill in the parameters and hit send API
22:12 - request and see what the response looks
22:14 - like now in some cases this might have a
22:16 - Sandbox environment or sort of a mock
22:19 - interface that gives you fake
22:20 - information but it should give you quick
22:22 - tacti feedback on what is this going to
22:25 - look like so this kind of gives you a no
22:28 - code way to try an API and for
22:31 - developers quite often as a way to
22:33 - quickly get quick test of what it is
22:37 - they're thinking and then on the right
22:39 - you'll notice the request sample so in
22:42 - this case it's a curl example you could
22:44 - certainly have language specific code
22:47 - examples here something that somebody
22:48 - can copy paste drop into their
22:50 - application and use as a starting point
22:52 - for making that call and hopefully this
22:55 - combination uh significantly reduces the
22:59 - error rate that new users are going to
23:02 - experience while this isn't explicitly a
23:05 - a feature of how you write your
23:07 - documentation I think from a how to
23:10 - present documentation this is
23:11 - increasingly a table Stakes feature that
23:14 - people expect to see in developer
23:16 - portals at large especially with
23:21 - apis coming back to I promised before we
23:25 - we highlighted where in patri duties API
23:28 - about listing escalation policies that
23:31 - they had a link to read about these
23:34 - Concepts and this is a a snippet from
23:37 - their documentation of what that looks
23:38 - like now before we got two lines that
23:40 - said the list escalation policies gives
23:43 - you a list of existing escalation
23:44 - policies and an escalation policy keeps
23:48 - track of who gets the notification
23:49 - whatever it was two simple sentences
23:52 - however in the concepts document we get
23:55 - a pretty comprehensive description of
23:57 - what this means and I won't read through
23:59 - it all here but I think it's a a great
24:02 - example of where you've got a simple
24:04 - functional description at top of the the
24:07 - reference documentation for an operation
24:09 - that might link back to a more
24:12 - comprehensive description and internally
24:15 - if this is an internal focused API you
24:17 - might also see accompanying links and
24:20 - material on how this is implemented on
24:23 - the back end or what other systems it
24:25 - relies on to make this work for new user
24:28 - when they look at those couple of
24:30 - sentences that quick paragraph you still
24:32 - don't get it you want them to be able to
24:34 - jump in and get a deeper definition of
24:36 - what something means and you'll notice
24:38 - in this case there's many references
24:41 - that link to other reference material
24:45 - right at the top user schedule notified
24:47 - incident Services all of those are other
24:51 - Concepts and likely other API operations
24:55 - they will call a group of related things
24:57 - in order to build a full interaction so
24:59 - sometimes you need these overviews to
25:01 - describe how these Concepts relate to
25:04 - each other and how they're tied together
25:07 - in fulfilling certain workflows although
25:09 - we'll come back to that more workflow
25:11 - oriented view uh it's important not only
25:14 - to describe beyond the simple paragraph
25:17 - and have the bigger Concepts but also
25:20 - what concepts does this relate to or
25:22 - depend on them the most important
25:24 - Concept in I think all documentation but
25:27 - is exceptionally true in API
25:31 - documentation is how do we get started
25:34 - this should be the first thing that any
25:36 - new user who looks for your apis and
25:40 - comes up on that first page they should
25:43 - immediately be taken down an enumerated
25:46 - set of steps here is what I need to do
25:49 - to call these apis and I say these apis
25:53 - intentionally to say that it hopefully
25:55 - isn't a lot of different ways to call a
25:57 - lot of different apis if there's one way
26:00 - to provide access that's a win for
26:02 - everyone from a consumption standpoint I
26:05 - have one way to do things from a
26:06 - security standpoint you'll notice right
26:09 - off the bat the step one and in this
26:11 - example we switch gears to the stripe
26:13 - API which I think is probably one of the
26:16 - strongest examples over the last 10
26:18 - years or so of excellent API
26:20 - documentation excellent developer
26:22 - experience and step one in the stripe
26:25 - API every call to a stripe AP API must
26:28 - include an API secret key and then it
26:31 - goes on to very briefly describe here's
26:34 - what you need to do to get these API
26:36 - keys and notice it doesn't say if you're
26:39 - calling this API do it this way if
26:41 - you're calling this other API do it that
26:43 - way one consistent method of off is key
26:47 - here both in terms of usability and
26:50 - having a single method accessing these
26:53 - things so that you can really focus your
26:56 - effort on securing one areir
26:58 - area so these steps should lead me down
27:01 - a road of at the end of a few steps and
27:04 - hopefully this isn't more than four or
27:06 - five steps I've made a successful API
27:08 - call that's really the goal that you're
27:10 - getting to and in many API programs this
27:14 - is actually an instrumented thing in
27:17 - that we want to look at what is the time
27:19 - to First hello world how long does it
27:22 - take to get through those first steps
27:23 - and make the first call and a common
27:26 - Benchmark is to say this should take no
27:28 - more than 5 minutes now from a
27:30 - documentation standpoint this is where
27:33 - we take hard and make it look easy right
27:36 - and in some ways we have to really bench
27:38 - test what we're thinking about on how
27:42 - people are going to use this and really
27:44 - simplify and really Whittle things down
27:46 - to be easy for a new user to adopt so
27:51 - most important concept this is where you
27:52 - should be putting a ton of effort I know
27:54 - I said the errors were the first place
27:55 - to start but that's in reference this is
27:57 - more a Concepts so just super key
28:01 - especially because Step One is almost
28:04 - always how to do off and as the old
28:07 - adage goes if you're running a two-day
28:09 - hackathon day one is getting off done um
28:12 - this is quite often the inconvenient
28:15 - difficult tricky part and if you're
28:17 - building an API and documenting it this
28:20 - is your riskiest part so you should have
28:22 - a crystal CER succinct understanding of
28:24 - how this works for everybody preferably
28:27 - one way to do it for all apis so that
28:30 - you comprehend how it works and then you
28:32 - can explain it succinctly if you can't
28:34 - do that you probably shouldn't be
28:35 - publishing it you're probably taking
28:37 - risks and our final topic tasks again
28:40 - we'll look at stripe and I said Concepts
28:43 - and tasks can be a bit of a fuzzy line
28:45 - but I think the way I think of this is
28:48 - It's really what is the workflow that
28:50 - you're trying to here and what is it
28:52 - that you're trying to do so I often
28:55 - refer to this as like a showcase
28:58 - so in strip's case right there top left
29:01 - they're saying all right do you want to
29:02 - start an integration and they're
29:04 - starting with a conceptual idea payment
29:07 - link checkout web elements that is going
29:10 - to take you down at the road of learning
29:12 - some Concepts and learning how to do
29:14 - those things
29:15 - together this is really important in the
29:17 - API world because if you launch
29:20 - something out there with say reference
29:21 - material only no Concepts no workflow
29:25 - driven tasks people will do
29:28 - serendipitous things right they will
29:30 - come up with very creative ways to use
29:32 - your hii that it's in some cases you
29:35 - didn't plan for and just don't work so
29:39 - in some ways this is also projecting to
29:41 - end users this is what this API was
29:44 - meant to do this is the job that it will
29:47 - do for you and keeping that frame of
29:49 - mind for new users will guide them into
29:52 - using it in the way that you intended
29:54 - and hopefully not creating friction or
29:56 - problems for them El or for you not
29:58 - listed in kind of the big three and this
30:01 - is because it's not pervasively common
30:03 - in some ways it's a cost prohibitive
30:05 - concept for many programs but it's
30:08 - definitely a key to large scale success
30:11 - is that if you want quick adoption and
30:14 - you want API consumers to connect
30:17 - quickly don't make them write too much
30:19 - code and you can do that by providing
30:22 - sdks client libraries tooling around the
30:26 - API means you don't write code to call
30:29 - it explicitly you might call a library
30:32 - you might use a command line interface
30:34 - things like this and I say these can be
30:37 - cost prohibitive especially in the
30:39 - startup world or in smaller companies
30:41 - building and maintaining client
30:43 - libraries can be a very costly effort
30:45 - but you'll notice in Pedro Duty's case
30:47 - Pedro Duty didn't go build libraries to
30:50 - interact with its API all languages in
30:53 - fact many of these came from the pager
30:55 - Duty Community see you'll notice there's
30:58 - a warning on here too Community Support
31:00 - P Duty doesn't endorse or provide
31:02 - technical support so on this in some
31:04 - ways is how a lot of folks make this an
31:06 - affordable approach uh but from a
31:09 - documentation standpoint it's also an
31:12 - opportunity for you to Showcase where
31:14 - there could be Community Options out
31:16 - there that you didn't build that
31:18 - ultimately are going to provide a better
31:19 - experience faster onboarding all that
31:21 - sort of stuff with the caveat this isn't
31:24 - stuff we built and so thereby we can't
31:26 - really directly support it you're going
31:29 - to have to work with the community on
31:30 - that but at any rate it is an optional
31:33 - fourth column that in more mature
31:35 - programs you'll tend to see this is also
31:38 - very applicable for internal API
31:40 - programs as you reach a larger scale a
31:42 - larger quantity of apis it is definitely
31:45 - a speed accelerant to have more of these
31:48 - kind of client libraries command line
31:50 - tools
31:51 - So Okay so we've touched on some points
31:55 - in here about some of the corollary
31:58 - benefits that you're going to get out of
32:01 - investing in
32:02 - documentation most of it in general and
32:04 - and specific to this class in API
32:07 - documentation but let's really distill
32:09 - some of that out and expand on what is
32:12 - the value so let's say as a learner here
32:15 - you're thinking about learning about
32:17 - this concept and you're going to take it
32:18 - back to uh your team and say this is why
32:21 - I think we should do this hopefully this
32:23 - fills your quiver with arrows on Great
32:26 - Value points for investing in great
32:28 - documentation so why do we need to do
32:31 - this and I think we we touched on these
32:33 - bits the first is it's about education
32:35 - you've got to teach customers
32:37 - prospective customers your own employees
32:41 - potentially Partners about what are the
32:44 - things that we do and how do you connect
32:46 - to these things with
32:48 - apis um it's surprising companies that
32:52 - lack this sort of platform wide
32:54 - documentation about all their apis how
32:57 - you talk to say Business Leaders they
32:59 - don't really know exactly how things
33:01 - work they have a general idea but when
33:04 - you've got one source of Truth to
33:07 - document things that your company does
33:09 - you know the capabilities of the apis
33:11 - provide you have vastly more engaged and
33:15 - educated leaders and this applies as you
33:19 - work your way through the organization
33:21 - especially with apis because it's such a
33:23 - crosscutting concern through the company
33:25 - and it's such a distilled representation
33:27 - of what you do they really important
33:30 - that everyone understands this and
33:32 - obviously where the rubber meets the
33:33 - road on is someone going to adopt this
33:35 - API or not really essential that you're
33:38 - able to teach those folks and not just
33:40 - hand them the encyclopedia and walk
33:43 - away second you're in part often
33:48 - defining boundaries between products
33:50 - within your platform and that
33:53 - understanding within the
33:55 - organization can often transcend the way
33:57 - that you're organized today so we'll
33:59 - refer to this as like an inverse Conway
34:02 - maneuver the idea that Conway's law
34:04 - tells us if one team builds a compiler
34:07 - you get a one pass compiler if two teams
34:10 - build a compiler you get a two- pass
34:12 - compiler in other words if you're not
34:14 - intentional your software will represent
34:17 - how you're organized and increasingly
34:19 - this inverse Conway maneuver says let's
34:21 - be intentional about what we want the
34:23 - future of our uh platform to look like
34:26 - what if we want our capabilities to be
34:29 - manifested in apis so defining those
34:32 - boundaries uh can be really important
34:35 - for people to understand the customer
34:37 - perspective on what you do and that
34:40 - could apply for your own employees that
34:42 - could you know we touched some the
34:43 - education bit all of that leads
34:46 - into clearer definition of the things
34:49 - that you do which is going to heavily
34:52 - inform how you test and secure those
34:55 - product boundaries so these things can
34:57 - you know heavily influence how you're
34:59 - setting up your network your application
35:01 - layers all that sort of stuff as well as
35:04 - at the end of the day again we come back
35:06 - to does someone want to adopt this thing
35:08 - they need to understand those boundaries
35:11 - kind of the groupings of things right so
35:14 - just comprehensibility the ability for
35:16 - somebody to look understand the big
35:18 - picture quickly and then be able to
35:20 - drill down and understand some of the
35:21 - details quickly this can be very
35:24 - powerful organizational amplifier over
35:26 - time
35:27 - enabling customer support offerings this
35:30 - is another factor that isn't really
35:32 - documentation but you know we're the
35:34 - front door for these things if someone's
35:37 - reviewing this API or maybe they've
35:39 - tried it and they're stuck how do they
35:41 - get help documentation can help lead
35:44 - those consumers lead those customers to
35:46 - find the right kind of support I say the
35:48 - right kind because sometimes it's
35:51 - self-help only it's Community Support or
35:54 - there may be self-service options to go
35:56 - fix some of of the problems they're
35:57 - running into if you don't have this sort
36:00 - of thing then people will wander the
36:02 - hallways looking for help right meetings
36:04 - will spawn off everywhere on I'm stuck
36:08 - how do I get help I need to get on the
36:10 - phone with somebody I need to get an
36:11 - email chain going these things are just
36:14 - friction and toil let's document one
36:16 - place make it easy to find and finally
36:19 - supporting technical or developer
36:21 - marketing efforts in the API World um
36:24 - you know it's it's a weird thing to
36:26 - Market to this crowd because you know we
36:28 - have kind of a low BS threshold but in
36:31 - short we should be teaching not selling
36:35 - in kind of technical marketing efforts
36:37 - and rather than sending some big huge
36:39 - toe in an email or attaching a PDF we
36:42 - can link back to
36:44 - documentation that maybe highlights new
36:46 - features or points to a change log with
36:49 - what's the newest change to the CI and
36:52 - all of those things from a marketing
36:53 - perspective can help boost adoption
36:56 - again if you're teaching and not
36:58 - selling so who benefits from all this
37:01 - right and we kind of said before that
37:03 - you could have an internal view of this
37:05 - you could have an external view of this
37:07 - sometimes it's both but quite often you
37:09 - might have different apis that you offer
37:11 - internally or
37:13 - externally so the internal value is I
37:16 - think more than anything avoiding
37:18 - duplicated effort if you have
37:20 - undocumented apis all over your
37:22 - organization there's a good chance that
37:25 - many of these are going to be built a
37:26 - not very reusable way and worse if no
37:31 - one knows what exists there's a tendency
37:33 - to just look around and if you can't
37:35 - find it create your own and so you end
37:38 - up with four different ways to do the
37:40 - same thing and that's really not good
37:42 - for anybody right it's not good from a
37:44 - smart investment standpoint as a company
37:47 - it's not good for frankly job security
37:49 - in some cases when these things get
37:51 - discovered so you know avoiding that
37:53 - duplicated effort is just such an
37:55 - obvious win versus not
37:58 - documenting the second I mentioned
38:00 - there's a tendency that if you have
38:02 - undocumented things people will build
38:03 - oneoff bespoke things is that we can
38:07 - really promote increasing shared
38:09 - leverage it's a fancy word to say that
38:11 - rather than duplicating efforts let's
38:13 - join forces and build something more
38:16 - powerful and more
38:17 - reusable that we can use for a lot of
38:20 - different scenarios and not maybe just
38:22 - to enable one partnership or to connect
38:24 - one system somewhere so that shared
38:27 - leverage over time will build stronger
38:30 - capabilities and more aligned
38:32 - organizations as opposed to fragmented
38:35 - collections of
38:36 - ons and finally just beating the dead
38:38 - horse here on organizational
38:41 - understanding if you don't document the
38:43 - apis you have and you have this big
38:45 - sprawl and we'll talk about that later
38:48 - nobody really knows how anything works
38:49 - and it becomes tribal knowledge hallway
38:52 - discussions and email threads and
38:53 - meetings trying to chase down does this
38:56 - exist and how does it work it's just a
38:59 - huge weight that we can lift off the
39:01 - organization and really promote a lot of
39:03 - innovation and and speed as it builds
39:06 - momentum on the external side again you
39:09 - might be publishing to a partner Network
39:12 - or to a wide open publicly facing thing
39:16 - you obviously have to document something
39:18 - we're going to dism you it here to say
39:21 - what's the difference between adequate
39:23 - documentation and really great and I
39:25 - think done well
39:27 - this will promote stronger adoption from
39:30 - consumers and if you've got and built an
39:31 - API whether it's directly monetized or
39:34 - not you're almost always looking for can
39:37 - we get lots of people to use this right
39:38 - there's some economy of scale that comes
39:40 - with this along with that I mentioned
39:43 - before when you're evaluating an API
39:45 - that you're going to go use you're
39:47 - really in some ways evaluating what is
39:49 - this relationship going to be like and
39:51 - so let's say you have a hastily clad
39:54 - document that was a project artifact
39:57 - written by developers as a second
40:00 - thought and you're shuttling that over
40:02 - in a PDF on request that's an a great
40:04 - way to start a relationship is it so
40:08 - instead if we have durable documentation
40:10 - that's there on a well-known URL that's
40:13 - easy to find and folks are going in and
40:15 - having a great experience on learning
40:18 - making that first call less than five
40:20 - minutes that sort of thing we're off on
40:22 - the right foot with building a great
40:24 - relationship with whoever the API
40:26 - consumer is whether they be developer
40:28 - off the street or a close partner
40:31 - relationship all of these things lead to
40:34 - folks sticking around and being
40:36 - satisfied having a great developer
40:38 - experience and finally to the point of
40:41 - developers when you're marketing
40:43 - products to developers and in in the API
40:46 - world we almost always are all the no
40:48 - code low code is changing that
40:51 - somewhat folks are going to take away
40:53 - from that evaluation of looking using an
40:55 - API is was this a good experience or not
40:58 - and they're going to tell their friends
41:00 - and in the developer marketing world we
41:02 - deeply understand that word of mouth is
41:06 - key traditional marketing efforts often
41:08 - drive people away producing great
41:11 - experiences with thought leaders who
41:13 - share with their communities is what
41:15 - builds really big communities around
41:19 - apis so distilling this down even
41:22 - further let's try to boil down three big
41:25 - reasons that we really should be able to
41:28 - share with folks this is why we have to
41:30 - do solid
41:35 - documentation the first is we're going
41:37 - to look at this from a security
41:38 - standpoint this is an apis set
41:40 - curriculum and while it is an explicitly
41:43 - only about security there's a longer to
41:45 - documentation it is actually one of the
41:47 - primary reasons uh is that you can
41:50 - reduce risk so API exploits and I'm
41:54 - going to really make a strong call to
41:55 - action here if you've never heard of
41:57 - oasp go take a look in general and
41:59 - specifically the API top 10 was actually
42:01 - just refreshed in early 2023 the
42:05 - inconsistent or non-existent off
42:08 - mechanisms and this is authentication
42:10 - authorization U these are the reasons at
42:14 - the very top of the list and they have
42:16 - been for a long time even in the non-api
42:19 - top 10 is broken object level
42:22 - authorization or Bola and broken authen
42:26 - ation these are reasons one and two that
42:30 - API exploits are happening and at the
42:32 - time of putting this together looking
42:35 - back on 2023 we've had an unprecedented
42:38 - wave of API exploits and the vast
42:41 - majority are because of these reasons so
42:45 - the part that we're going to focus on is
42:47 - inconsistent and non-existent if you
42:49 - document an API what's one of the first
42:52 - things we're going to do getting started
42:54 - how to get that token and how to attach
42:56 - that token to the API call if that
42:59 - doesn't exist and you're writing that
43:02 - documentation the the flashing red
43:04 - lights are blasting there is a huge
43:06 - problem we cannot use this until this is
43:09 - fixed inconsistent I said before if
43:13 - you're describing how to get started you
43:15 - should have one way to do the off
43:18 - patterns if your documenting the next
43:20 - API and it does something wildly
43:22 - different big bright flashing red lights
43:25 - they're is a problem we have a new way
43:29 - to do o was that intentional is that a
43:32 - good idea that is
43:35 - inconsistent so really just catching
43:37 - those inconsistent or completely lacking
43:40 - off mechanisms it is actually one of the
43:44 - most important ways that you can avoid
43:46 - API exploits before anything's ever even
43:49 - in production assuming that you're
43:51 - documenting these before you release
43:52 - them and related to that is is joking
43:56 - that we put here missing mistakes is
43:59 - that if you're doing this in an
44:00 - iterative way every time the API is
44:02 - changed you're updating documentation
44:05 - that you essentially have audit and
44:06 - review built into your process now is
44:09 - your documentation writer always going
44:11 - to be the expert on what the standards
44:13 - are and this sort of thing not
44:14 - necessarily but if you have a more
44:17 - comprehensive review process that
44:18 - includes documentation those things
44:21 - should be caught and we'll talk a little
44:23 - bit more about kind some ways to build
44:26 - Bridges from the documentation process
44:28 - into a broader API design review process
44:31 - we'll talk about style guides and
44:33 - standards and these sorts of things but
44:37 - as you're folks writing documentation
44:39 - become more familiar with those Concepts
44:41 - just by the very Act of documenting it
44:44 - they're going to effectively have done a
44:46 - high level audit and review so it's a
44:48 - fantastic place to start in reducing
44:51 - these
44:53 - risks second is let's not spawn the army
44:56 - of zombies and it sounds like a goofy
44:59 - joke but this is really a thing that
45:00 - folks refer to in our space is the
45:03 - prevalence of Shadow or zombie apis and
45:07 - this in the it and Engineering world
45:09 - what we're referring to is the apis that
45:12 - no one knows about and this is
45:14 - exceedingly a huge
45:17 - problem is that folks are having to go
45:20 - dig through logs and look through
45:21 - production information to try to figure
45:23 - out what are all the apis we have
45:25 - because we don't even know what they do
45:28 - we don't know how they're authenticated
45:30 - we don't know what their performance is
45:31 - like these things could be producing
45:34 - huge risk vectors they could be
45:35 - producing terrible experiences and
45:37 - you'll notice here we we provided some
45:39 - reference to noric apis that 94% of
45:43 - respondents had experienced some sort of
45:44 - incident in the last year this is
45:47 - actually the second big category of risk
45:50 - is just the undocumented stuff the
45:53 - things that no one knows exist are the
45:55 - things that become stale that are not
45:57 - monitored and just present huge risks
46:00 - and Blindside opportunities things you
46:03 - don't even know exist could present
46:05 - vectors you're not even thinking
46:07 - about so really we want to build this
46:10 - catalog of what are the apis what are
46:12 - the capabilities that we have keep it
46:14 - maintained have process around it
46:16 - because if you know what you have you're
46:18 - able to protect it if you don't even
46:20 - know it exists who knows what could
46:24 - happen so taking this concept a little
46:27 - further we often refer to this notion of
46:29 - APs
46:31 - raw and while zombie or Shadow apis are
46:35 - the things we don't know exist sometimes
46:38 - sprawl is there might be some idea that
46:41 - these things exist there may be sporadic
46:44 - lists of these things floating around or
46:47 - there's an idea of we kind of know this
46:49 - is a thing but there's little cognitive
46:52 - alignment meaning folks don't NE
46:55 - necessarily have some agreement on what
46:57 - these things are and how they fit
46:59 - together as one platform and now that
47:01 - risk of duplication we talked about
47:04 - before suddenly becomes a huge problem
47:06 - is people building really close to the
47:08 - same thing over and over again and very
47:10 - little
47:11 - reusability if we have that better
47:14 - understanding of what are all the things
47:15 - and we can see them all in one place
47:17 - they're documented together there's some
47:19 - portal that manifests these things we
47:21 - can start to build that cognitive
47:23 - alignment the idea that we all
47:25 - understand Big Ideas in the business
47:27 - that we run or in the consumer base that
47:30 - we're serving here that ultimately will
47:33 - lead to Stronger alignment to Stronger
47:35 - execution to more satisfied customers
47:37 - this sort of just reiterate the lack of
47:40 - visibility it's going to result in less
47:43 - reusability right if we can see all the
47:45 - things we'll recognize duplication we'll
47:47 - recognize where there's shared leverage
47:49 - potential and we can be more customer
47:51 - Centric in how we describe things rather
47:54 - than describing them as a happen stance
47:57 - way all right so we described our top
48:00 - reasons that you must have these things
48:02 - and they're very risky scary and
48:04 - sometimes that's not the best place to
48:06 - start in justifying or convincing folks
48:09 - of why we should do something so let's
48:11 - talk about the positives the nice to
48:12 - have what are the benefits of doing this
48:15 - the first is observability and this is
48:18 - the antithesis of that sprawl and zombie
48:21 - stuff we talked about uh it's really the
48:24 - outcome that we're going for
48:26 - we want to observability we want to be
48:28 - able to look at the catalog of things
48:30 - that we have how they relate to each
48:31 - other and ultimately have one you know
48:34 - clear view of so let's say that
48:37 - observability is the positive outcome
48:39 - that you're seeking to escape the sprawl
48:42 - in zombies and Sh leverage already said
48:45 - this over and over just in the first
48:46 - section but getting that collaborative
48:50 - culture together on how to reduce the
48:52 - wasted effort reduce the duplicated
48:55 - single use case functionality and really
48:58 - build powerful reusable capabilities
49:00 - with your apis this is
49:03 - essential okay so we have lots of
49:05 - reasons that we should be doing
49:07 - documentation and we have an idea of
49:09 - kind of the the structure of what these
49:11 - things look like now let's get down to
49:14 - like who's going to do this who's going
49:16 - to write the docs and what's an
49:17 - appropriate choice in how you plan for
49:20 - writing your API docs and I think this
49:22 - is true for a lot of technical
49:24 - documentation and General
49:27 - to so developers is what we all think of
49:31 - right it's apis it's technical stuff
49:32 - developers have to document the thing
49:34 - they built and the reality on the ground
49:37 - is that the folks who built the API are
49:40 - not always great at being able to
49:43 - describe how it's used seems
49:46 - counterintuitive but let's say that when
49:48 - you're building it you have a system
49:50 - Centric View and when you're consuming
49:53 - it you don't know anything about those
49:55 - systems and so there's a tendency that
49:57 - implementers will think more about how
49:59 - it was built rather than how it's used
50:01 - and it's very difficult for them to
50:03 - escape those thought patterns that's not
50:05 - a knock that's not a criticism it's just
50:07 - a reality at a bare minimum we should
50:10 - have some kind of peer review related
50:13 - teams or teams that are planning to use
50:15 - these things at least providing that
50:18 - contrasting view of here's what it looks
50:20 - like from the
50:22 - outside now a pro of having Developers
50:25 - invol in the documentation and frankly I
50:27 - don't think you should try to escape
50:29 - developers involved inting
50:31 - apis is that if a developers
50:33 - implementing the apis partnered well
50:35 - with other folks they can be great about
50:39 - providing developer Centric feedback
50:42 - especially in this peer review type
50:43 - stuff we're describing another developer
50:46 - looking at what when developer bill will
50:48 - produce a better outcome you're going to
50:49 - have something that is going to have a
50:51 - Viewpoint that's about writing code that
50:53 - no one else can really provide in the
50:55 - organization so next in typical truct
50:58 - development we might see product
50:59 - managers who are involved and
51:01 - increasingly we see the role of API
51:03 - product managers being a thing now over
51:06 - the last four or five years we see this
51:08 - job description increasingly popping up
51:10 - everywhere so we describe this as
51:12 - occasionally who will write the docs the
51:15 - pro of doing it this way is that you
51:17 - have a very customer centered
51:19 - perspective compared to say a developer
51:22 - who's building it so that can really
51:25 - ultim provide an effective developer
51:27 - experience and this goes back to before
51:29 - where we said developers try business
51:32 - buys is you need that clear functional
51:35 - description and sometimes developers get
51:37 - into kind of the sausage making side of
51:40 - it rather than being a little more
51:41 - empathetic to the end user product
51:43 - managers are often naturally better at
51:45 - this thing now the obvious con is if you
51:49 - have say very non-technical product
51:51 - managers that lack of technical
51:53 - expertise could lead to some problematic
51:57 - ways they would describe things and this
51:59 - is again where putting those PMs and
52:01 - developers together and partnership to
52:03 - describe these things can be
52:08 - effective now who should write the docs
52:10 - we talked about what kind of tends to
52:12 - happen you know dev's building the API
52:14 - and wres the documentation of the task
52:16 - on Project or the PM maybe kicks in and
52:18 - helps out and cleans it up and makes it
52:20 - readable for customers I think you can
52:22 - get to perfectly adequate outcomes for
52:24 - that that are L effective however I
52:27 - think in a perfect world with no budget
52:29 - constraints I reach for technical
52:30 - writers especially those if you're doing
52:32 - apis who've done it before and
52:34 - understand the
52:35 - intricacies so that the pros is like I
52:38 - don't think it's it's well described
52:40 - here but it's to say that we have real
52:42 - professionals who understand how to
52:44 - communicate technical Concepts and ideas
52:48 - and how to be precise and thorough
52:51 - describing all the things it is a smart
52:53 - investment period or around apis in my
52:56 - opinion and I think it's really
52:57 - underutilized in so many companies it
53:00 - always surprises me when I find
53:01 - companies that don't even have technical
53:03 - writers so if you're going to reach for
53:05 - that and say let's go hire Tech writers
53:07 - to help with this great call but keep in
53:10 - mind that you can't have a team go
53:13 - Implement and build a whole apil row it
53:16 - over the fence to a tech riter and
53:17 - expect magic to happen you've got to
53:20 - have those writers involved early in the
53:22 - process and you've got to have some sty
53:25 - guide defined around this so that
53:28 - they're enabled to produce consistent
53:31 - results so document the simple basic
53:36 - stuff as soon as you know it even in the
53:38 - abstract for any implementation has
53:40 - happened and then iterate to release
53:43 - that will produce all those benefits in
53:47 - Tech writers being implicit QA they're
53:49 - going to find problems as they document
53:52 - things don't do all that at the end and
53:55 - treat a lot of friction and delivery do
53:57 - that from the beginning and find those
54:00 - problems while you're
54:01 - developing all right so onto our second
54:04 - section we've established now what is an
54:07 - API who writes those things why we
54:10 - should be doing it all these benefits
54:13 - but let's really break this down in in
54:15 - strong terms on what's the impact to a
54:19 - business in investing in API
54:21 - documentation so we already referenced
54:23 - before good docs matter to security
54:26 - reviewing those off patterns consistency
54:28 - these sorts of things you're going to
54:30 - find security
54:33 - issues and consistency I keep saying
54:36 - that word let's break that down a little
54:38 - bit more a lot of folks talk about
54:41 - standardization and really consistency
54:43 - in some ways is the outcome of
54:45 - standardizing want to have things that
54:47 - look and feel the same and in the
54:50 - business of building platforms the main
54:52 - difference between just a bunch of apis
54:54 - and something that feels like a platform
54:57 - is that
54:58 - consistency so investing in docs is
55:00 - going to show where you have those
55:03 - inconsistencies especially if you've got
55:05 - professional Tech writers involved
55:07 - consistency is the name of the game and
55:09 - they're going to see those things
55:10 - clear's day quality I I keep saying that
55:14 - those who write docs for an API Through
55:17 - The Eyes of a consumer will find quality
55:20 - problems they're going to find bad error
55:23 - handling issues they're going to find
55:25 - logical problems and how the API works
55:28 - and they're going to provide that
55:30 - functional view so we talked about those
55:33 - first few sentences in each reference
55:35 - material that describe what this thing
55:37 - does and the concepts that amend that
55:40 - all of that can be incredibly use for
55:42 - someone who's working on how are we
55:44 - going to test this and make sure that
55:46 - that it's at adequate quality if we
55:48 - don't know all those things early then
55:51 - how are we expected to test it at
55:53 - adequate quality and it's more secure we
55:56 - are leaving less room for error if we
55:59 - just go build an API undocumented and
56:02 - get ready to release and say oh security
56:04 - Ops Dev Ops can you uh check this out
56:08 - it's a terrible way to start that
56:10 - engagement and if they find problems
56:13 - then it becomes a fight because I've got
56:15 - to ship this thing customers are
56:17 - expecting it business is expecting it
56:20 - security and devop hooks you're holding
56:22 - me up that's no good right if we're able
56:25 - to provide documentation about what we
56:27 - intend this thing to be even if it's
56:29 - rough documentation early in the process
56:32 - those teams are more aware they can plan
56:34 - they can prepare they can do deeper
56:37 - Dives more questions without holding up
56:40 - delivery and by actually documenting the
56:44 - things we ship the security and devops
56:46 - folks are given a fighting chance
56:49 - against the army of zombies or the
56:52 - sprawl problems if they're never even
56:54 - made aware and someone just pushes code
56:57 - and there's no documentation for it how
56:59 - can they be expected to do a great job
57:01 - in defending those
57:03 - assets so in simple terms here at the
57:05 - bottom bad poorly maintained
57:08 - non-existent documentation these this is
57:11 - a leading risk for security
57:15 - exposures so while we're saying that
57:18 - consistency standardization is good
57:21 - sometimes so scope are we just make try
57:23 - to make things too perfect I don't think
57:25 - in this case we're looking for
57:26 - Perfection we're looking for existence
57:28 - and reasonable quality right let's
57:31 - reduce those risks there's no such thing
57:33 - as no risk but at least having
57:36 - reasonable documentation is going to
57:38 - heavily mitigate the risk that we have
57:41 - unmonitored
57:45 - assets so let's dig a little more into
57:48 - security right if we're taking this
57:50 - approach that we should document things
57:54 - and Design things before we build them
57:56 - and I know that's that sounds a little
57:58 - counterintuitive a little cart before
58:00 - the horse but it's not to say that we
58:02 - have perfect documentation day one
58:04 - before we build anything or that we have
58:06 - a perfect design before we've built
58:08 - anything it's that we should have a
58:11 - basic understanding of what this thing
58:13 - will do what it will look like before we
58:16 - go and get too far into implementation
58:18 - and realize there's problems and what's
58:20 - key about this in the security realm is
58:23 - we can review off patterns before a line
58:26 - of code has been written and that in
58:29 - itself is one of the most powerful ideas
58:32 - in probably addressing 80% of API equids
58:36 - now if you didn't document anything you
58:38 - didn't design up front and you just went
58:40 - off and built something and shipped it
58:42 - to
58:43 - production you just lost that 80% B so
58:47 - Security review is a pretty commonly
58:50 - understood thing what we would suggest
58:52 - here is with this documentation first
58:55 - design first mindset as soon as you can
58:58 - describe the thing that you're going to
59:00 - build let's start engaging in some kind
59:02 - of security Ry
59:05 - process so how do we do that API style
59:08 - guides are are a big step in the right
59:10 - direction and we're going to take a
59:11 - little closer look at what those look
59:13 - like but this in essence is saying that
59:16 - we have some standardized patterns in
59:18 - how we design our apis especially
59:21 - including how we do o so if your API
59:25 - design review incorporates security and
59:29 - you have some automation around style
59:31 - guides and these sort of things you can
59:34 - put a lot of really sophisticated look
59:36 - at things very early in the process and
59:40 - really cut off a lot of the problems
59:42 - that tend to emerge when this acument is
59:44 - not
59:45 - addressed one weapon here as we describ
59:48 - it in your repository can be security
59:50 - style guide and so really this is a
59:53 - subset of a broader API I to say that
59:57 - how do we do these security Centric
59:59 - things and I keep talking about off but
60:01 - there could be lots of other security
60:03 - related things in your apis for instance
60:06 - if it's a payment related API making
60:08 - sure that you don't have some exploit
60:10 - available to say manipulate currencies
60:13 - or you know some scenario that you need
60:15 - to be very cautious about you should
60:18 - have some defined standards tend to call
60:21 - this style guide because I don't know
60:24 - standards make people bristle saying
60:26 - that there's a style in which we design
60:28 - things I think is more appropriate to a
60:30 - design discipline so all of that can
60:33 - help put some guard rails around the
60:36 - design process and incorporate security
60:39 - early with that early documentation so
60:42 - that everyone understands what we're
60:43 - going to do everyone understands the
60:46 - risks
60:47 - earlier and ultimately at the end here
60:50 - with a a well chosen set of rules around
60:53 - your security
60:55 - and enforceable sounds a little rough
60:57 - here but it's just to say that do we
60:59 - have process that plugs in those rules
61:02 - somewhere that you can keep using these
61:05 - tools in an iterative way to keep just
61:08 - building stronger defenses into the
61:10 - future and not constantly be digging a
61:13 - deeper
61:14 - hole so all of this is taking us down a
61:17 - road here and you know we're going to
61:20 - have to say the GW I know it's not
61:22 - always popular but I insist we should
61:23 - reclaim the word governs and make it
61:26 - what it needs to be into the future and
61:28 - not the painful thing some of us have
61:30 - experienced from the past so a healthy
61:33 - documentation process is a great way to
61:36 - start moving toward having stronger
61:40 - governance and this is where we'll dig
61:42 - into kind of that style guide thing that
61:45 - I keep referring to this is about
61:48 - automating consistency we keep saying
61:51 - that when we look across a bunch of apis
61:54 - that consistency is the only thing that
61:56 - makes it feel like a platform that they
61:57 - all look feel smell touch the same
62:00 - manually maintaining that it's it's
62:04 - risky it's hard um as somebody who has
62:06 - done many manual API reviews I know I've
62:10 - always missed stuff it's impossible to
62:12 - catch it all we are not great as humans
62:15 - at finding these things so we should
62:18 - really be looking at how can we put more
62:20 - automation around these things so
62:23 - consistency standardization these things
62:25 - live together but how do we do that so
62:28 - the First with style guide and linking
62:30 - approaches is key one example of this it
62:34 - happens to be an open source project of
62:36 - stop lights so it does sound like I'm
62:38 - Shilling but I can objectively say that
62:40 - this is a broadly adopted artifact in
62:43 - the open source Community to Define
62:45 - governance rule sets and I think the
62:48 - reason it's really relevant in our
62:50 - learning about API documentation is
62:53 - there's actually do documentation
62:54 - Centric rule sets that you can use that
62:57 - do things like have all the description
62:59 - Fields been filled out for all the the
63:02 - fields in your response if that's
63:03 - something that you want to set a rule
63:05 - for and so you see here on the right an
63:08 - example of what a stal guide looks like
63:11 - and how the errors might manifest so for
63:14 - instance here at the top of the rules it
63:17 - says info contact info object should
63:19 - contain a contact object that might
63:21 - actually be a great documentation rule
63:24 - for let's say an internal API is okay I
63:27 - found the API I know what it does I read
63:29 - the documentation and there's something
63:31 - I still don't get who can I contact to
63:34 - find out more right so you might want to
63:37 - standardize and say that there should
63:38 - always be contact information with every
63:41 - API listed so could you do that manually
63:44 - and say oh make sure that we've always
63:46 - got contact information sure you might
63:49 - miss it and let's be honest no one
63:51 - really wants to do that manual review so
63:53 - put it on a check we can manifest an
63:55 - error somewhere that'll show folks hey
63:57 - don't forget to have this and then by
63:59 - the time you sit down to do some sort of
64:01 - manual review for the things you can't
64:02 - automate you don't have to worry about
64:04 - that this is a huge Force multiplier for
64:08 - kind of all things apis but surprisingly
64:11 - even in the documentation world we can
64:12 - do a lot of good here another suggestion
64:16 - from Talking Tech writers is Veil so
64:19 - Veil is basically another kind of
64:22 - linting engine for enforcing writing
64:26 - style so quite often you're going to
64:28 - develop a voice a certain you might
64:31 - adhere to say Microsoft's technical
64:34 - writing guideline something along those
64:37 - lines and you want to be able to turn on
64:38 - a rule set that says here is how we
64:42 - phrase certain Concepts or here's when
64:45 - we use acronyms and we don't things like
64:47 - that so point being with a few different
64:50 - tools and there certainly are some more
64:53 - out there but I think these these are
64:54 - some really leading strong ones you can
64:57 - make the review process predominantly
64:59 - automated so you can spend all of your
65:02 - cognitive energy on a stuff that matters
65:04 - what does this thing dude should it be
65:06 - here is it reusable and not did you
65:09 - remember the contact info did use an
65:11 - acronym or not so all of this leads down
65:14 - the road of stronger scaling we can
65:18 - replicate this kind of process this kind
65:20 - of automation on all the things that we
65:23 - do and ultimately it should lead us down
65:26 - a road of more reusable things things
65:28 - that you don't have to write BB code
65:30 - every time you use a different
65:32 - API and all of this too should lead
65:35 - toward something that's just pleasing to
65:38 - a developer's eye you know developers
65:40 - can't help but be precise in our nature
65:44 - right in building big complex things
65:46 - with lots of things to remember we love
65:49 - consistency we love to be able to look
65:50 - at something and go ah that is so
65:52 - pleasing there's nothing out of place
65:54 - everything's where it should be um and
65:57 - these kinds of approaches and automating
65:58 - your consistency it's an intangible
66:01 - difficult to measure thing but it really
66:03 - can produce a much better developer
66:07 - experience another concept here we
66:09 - talked a little bit about how there's
66:11 - internal and external apis and I keep
66:13 - mentioning partner networks this sort of
66:15 - thing in the world of Partnerships
66:17 - documentation is one of the most
66:19 - important assets that you're going to
66:21 - trade in the early phases is hey you
66:24 - want to partner with us here's how you
66:26 - would integrate so for those potential
66:29 - Partners who might be looking at your
66:30 - partner portal there's a few things that
66:33 - you can really punch through here one is
66:36 - brand affinity and this is where we
66:37 - talked about you might want to have a
66:39 - little more customization on the
66:40 - external facing stuff if they don't ever
66:44 - get documentation and they're having to
66:45 - constantly ask questions that's a
66:47 - terrible uh relationship so that's a bad
66:50 - starting point let's give them something
66:52 - that's our best forward but there're
66:54 - also just going to be in a way
66:55 - evaluating your company and how you
66:58 - operate by their interaction here so
67:00 - there is an implied kind of brand
67:02 - Affinity so when folks talk about loving
67:05 - strip right uh in the developer world
67:09 - this is a common sentiment it's because
67:11 - they had a great experience with that
67:12 - documentation they didn't have to ask
67:14 - anyone questions they were able to
67:16 - accomplish their goal without help they
67:18 - have a love for that brand so that's one
67:20 - of these tough to measure tricky and
67:22 - tangible things but really is something
67:24 - you have to keep in mind the second and
67:27 - I've said this a few times that API
67:29 - adoption if you don't know anything else
67:31 - about an API that's the first thing you
67:33 - should measure is if we went to all the
67:35 - trouble to build this thing these are
67:37 - not always easy things to build or
67:39 - people using it do we have a good Trend
67:42 - going that people are getting value from
67:45 - it so docs are your best tactic to push
67:49 - that adoption you have a crappy docks
67:52 - experience I promise promise it will be
67:54 - worse adoption than if you had a great
67:57 - experience and then finally is scaling
67:59 - and we talk about some of the processes
68:01 - and things that should dovetail into
68:03 - your documentation efforts and you're
68:06 - not going to be able to reach scale if
68:09 - you don't kind of have that game
68:10 - together and if you have a bunch of
68:13 - undocumented one andof crappy
68:16 - relationships you're going to struggle
68:17 - to scale this program so documentation
68:21 - is and often you know not thought about
68:24 - strongly as it's a critical asset in
68:26 - producing that
68:27 - scale so let's dig into the simple
68:31 - question of how do we write good
68:33 - documentation I think we've touched on a
68:35 - few of these different subjects we' hit
68:37 - it from a few angles let's get a little
68:39 - more practical so again just reminder we
68:42 - want to think about who's the the
68:44 - audience here are these
68:47 - internal developer oriented documents
68:50 - are they end consumers who might be
68:52 - external to the company are there any
68:55 - sort of security gates involved these
68:58 - are all things we want to keep in mind
68:59 - before we enter into this so it's always
69:02 - important start with those relationships
69:04 - understand who's going to be using it so
69:06 - that you're using the right voice and
69:08 - the right approach and enabling them
69:11 - some high level things on as you're
69:15 - sitting down to document an API a couple
69:17 - of high Lev things to think about first
69:20 - is an explanation of what request data
69:23 - is required what's optional an example
69:27 - might be the version of your API this is
69:29 - commonly passed in a path there's
69:32 - certainly other approaches like headers
69:34 - uh but this is often required
69:36 - information you need to supply which
69:38 - version it is that you want to get um
69:41 - and if it's not required that's also
69:42 - important uh and what happens if I don't
69:45 - Supply a version do I get the latest and
69:47 - an auto upgrades me how does all that
69:49 - work important to explain along the same
69:51 - lines Authentication any other uh sort
69:54 - of headers or anything that are to be
69:56 - expected the path to call each endpoint
69:59 - think this is the most seminal
70:01 - information in calling an API is what's
70:03 - that URL going to look like what HTTP
70:06 - methods are going to be used get postl
70:08 - delete the options could be other things
70:12 - and the request data fields what's the
70:14 - request body look like are there things
70:17 - besides the body like query stream
70:19 - parameters that might be
70:21 - passed on the other side we need to look
70:23 - at what's expected in the response which
70:26 - responses will always be there what am I
70:29 - going to get when I call this thing so
70:32 - example data always really useful as a
70:35 - an easy way to go beyond the
70:36 - documentation to what does this actually
70:38 - look like what status codes are possible
70:42 - I will'll definitely look at this in
70:43 - kind of a more real example but as we've
70:46 - said before it's not always the 200 okay
70:50 - that comes back sometimes we run into
70:53 - problems so we get errors like 400s or
70:55 - 500 class errors those are all different
70:58 - status codes that could occur and it's
71:00 - important to document what all those
71:02 - possibilities are and if there's any
71:04 - sort of status code or any other
71:06 - information that comes back what does it
71:08 - mean in the context of this call is
71:10 - there's something specific to
71:12 - it and again documenting one API is one
71:16 - thing but we also want to think about
71:18 - where are we sending folks when we write
71:20 - this document and I hope that the answer
71:23 - is is not we're going to email them
71:25 - because that's just it's not really
71:27 - acceptable these days we want to be able
71:28 - to send them a URL to here's all the
71:31 - apis you can find the thing that you
71:33 - looking for so we're really talking
71:35 - about death portals and things like this
71:38 - so think about how are people going to
71:39 - find these things is it discoverable as
71:43 - you're sitting down to write your
71:45 - documentation you want to think about
71:47 - who's going to read it and test it out
71:50 - and this is where some form of developer
71:52 - advocacy
71:54 - is important and there's a lot of
71:55 - different ways to organize this and put
71:57 - this into action but at a bare minimum
72:01 - have other internal developers read
72:03 - through the documents even if you don't
72:05 - have sort of developer relations
72:07 - developer advocacy who might be your
72:10 - contacts in the field who talk to end
72:12 - users a lot a little pizza and beer can
72:14 - go a long way recruit some folks who
72:17 - were not on the team building the API to
72:19 - go look through and try to follow the
72:21 - documentation and see what they run into
72:24 - and if possible observe them doing it
72:27 - where are they running into sticky spots
72:30 - friction where are they struggling to
72:33 - understand what to do next are they
72:36 - getting caught up in terms they don't
72:38 - understand and having to go read
72:39 - definitions and hunt for that
72:41 - information as we've said before what we
72:44 - expect is probably don't get the off
72:47 - right the first time this is a common
72:49 - story and again we want to have that be
72:51 - step one in getting started but making
72:54 - sure that not only is that documented
72:56 - but someone's tested it out who isn't
72:59 - writing the docs and who isn't building
73:00 - the API to make sure that it actually
73:02 - works in reality because if that one
73:05 - thing breaks nothing else works so
73:07 - you've got to get that right above all
73:09 - other things so with that let's go make
73:12 - a fake API let's go create something you
73:16 - know at least partially from scratch and
73:18 - see what this looks like in practice so
73:21 - let's take a look at our imaginary
73:23 - API in this case we're going to create a
73:26 - widget API obviously our descriptions
73:29 - are not going to be very verbose as they
73:31 - widgets a fairly Indescribable thing but
73:34 - from the top we see that already defined
73:38 - uh aversion we've come up with a base
73:40 - URL as well as a mock server URL this
73:43 - basically just means that we can call a
73:45 - fake API before it's actually been
73:47 - created information about security any
73:51 - additional information about who to
73:52 - contact any license information that
73:54 - might be applicable terms of service and
73:57 - from the top again we want to provide a
74:00 - simple basic description of what this
74:01 - thing does what is a widget right tell
74:04 - me that in this case there's not much to
74:06 - say getting started we talked about this
74:08 - before that in an overview of an API I
74:12 - should know what to do to go use it and
74:14 - in this case the only real prerequisite
74:16 - is making sure that I've done the off
74:18 - stuff and made up how that would work if
74:20 - it actually
74:21 - existed typical usage just gives me an
74:24 - idea of why people would use this thing
74:27 - right uh and again the description isn't
74:28 - terribly relevant here but this gives us
74:30 - an idea of content placeholders and then
74:33 - Concepts I've already kind of predefined
74:34 - and we'll look at it the idea that
74:37 - anywhere that we have a list of things
74:38 - that we would have uh some simple paging
74:41 - controls like page and Page size as
74:43 - query parameters we'll see this in the
74:46 - actual
74:48 - definition so let's look at the retrieve
74:51 - all widgets endpoint this is basically
74:53 - basically my get SL
74:55 - widgets so I immediately get information
74:58 - on what I need to do to call the thing
75:00 - that's straightfor description retrieve
75:02 - a list of all widgets widgets are blah
75:04 - right uh made something up here and
75:08 - reiterating that this is pageable list
75:10 - that you get back security information
75:13 - yet again and this is going to be one of
75:14 - those things that you really got to have
75:16 - on every operation you really want to
75:18 - show folks very clearly that you're
75:20 - going to have to do this security stuff
75:22 - in order to call it
75:23 - a description of how those query
75:25 - parameters for paging work and of course
75:28 - what do we get back in the response when
75:29 - I get SL widgets the paging
75:32 - information's here on page and total
75:35 - Pages at the top but you'll note that we
75:37 - didn't just say page integer total Pages
75:40 - integer done so not only do we have the
75:42 - data type we describe what this does how
75:45 - it works like in this case it'll match
75:48 - your request query parameter if it was
75:52 - available otherwise the default is one
75:55 - and our example total Pages this is
75:58 - basically how many were available it
76:01 - tells me basically it supports up to 100
76:04 - pages and there's an example there of
76:07 - 10 the items that come back in that
76:10 - array of widgets a widget has an ID a
76:12 - name and a skew these are all strings
76:15 - but you'll notice on the right here the
76:17 - name is required the skew is required in
76:20 - this case it's a a response so it seems
76:22 - a little odd it'll make more sense when
76:24 - we go to actually create something this
76:25 - is basically saying these fields should
76:27 - be populated again we see examples
76:30 - provided on what you would typically
76:32 - expect these to look like and in the
76:36 - case of name it tells us that it has to
76:38 - be more than one character less than 50
76:40 - so we have an idea of what the range of
76:41 - available data is and in the skew
76:44 - there's actually a match pattern or
76:46 - regular expression that tells us here's
76:48 - the format that's required for this
76:51 - information now I noticed I missed the
76:53 - description on name so we can go fix
76:56 - that before we get started on the rest
76:58 - but let's go ahead and
77:03 - edit now obviously we're using the stop
77:06 - platform to do this because I'm
77:08 - comfortable this is easy you can do this
77:10 - any number of ways for the sake of a
77:12 - rapid example this is a quick way for me
77:14 - to show you the kinds of things to look
77:16 - at so let's go down and you'll notice
77:19 - here that in my response body for the
77:22 - 200
77:23 - I can see what its contents are but it
77:26 - sits great out and it's because I've
77:28 - linked to a shared definition here in
77:31 - components and we can see it over here
77:32 - on the left widgets list paged is here
77:36 - and that's really just an array of
77:38 - widget objects are referenced from here
77:41 - so I can go take a look at the widget uh
77:44 - and let's go fix that
77:47 - name
77:49 - attribute so we got a description there
77:53 - there which is
77:54 - good so we can always preview take a
77:57 - look make sure yep there's the
78:01 - name uh were we missing an example yeah
78:04 - that's it so go over here click on this
78:07 - and we can provide an
78:09 - example fidget name there we go so
78:12 - here's some examples of things uh in
78:15 - open API that you can sort of specify we
78:17 - could say if there was a specific format
78:19 - like if this was a date or whatever um
78:23 - we can set up what a default value would
78:25 - be in this case I'm going to say that
78:27 - there is no default widget name you have
78:29 - to supply it um there's no particular
78:32 - pattern that it's checking but there's a
78:34 - max length of 50 Min length of one so
78:36 - this is kind of behind the curtain of
78:38 - you know some of this things that we saw
78:39 - in the docs
78:40 - view okay so I fixed that I'm going to
78:43 - go ahead and publish the
78:44 - change uh but we can look at this in
78:47 - preview and see now that uh I have my
78:50 - example on my widget name so this is a
78:53 - good kind of story here that we've
78:55 - always got examples provided any
78:57 - constraints defined whether or not it's
79:01 - required so you know just having the
79:03 - list of fields on something is only
79:06 - marginally useful without this
79:08 - additional context that lets consuming
79:11 - developers understand you know beyond
79:14 - what you generally mean are there very
79:16 - specific constraints that I have to
79:18 - comply with Okay so let's go back to our
79:20 - API for retrieving all the widgets and
79:22 - now we want to go take a look at
79:24 - creating a new operation for this API so
79:27 - I'm going to say we can get all the
79:28 - widgets let's go create one and so post
79:31 - uh is what in HTTP we would use to
79:34 - create something so let's do add a post
79:37 - operation and we'll say here create a
79:40 - widget okay that is a post to SL widgets
79:44 - the same URL we call to get the list
79:46 - let's make sure that we have a
79:48 - description so the description let's say
79:51 - create
79:53 - a new widget Supply the name notice this
79:59 - is markdown based in this platform uh so
80:02 - by putting the tix it's going to put
80:03 - kind of a little Cod view we'll see that
80:05 - in preview when I tab away uh and
80:10 - skew andd will be
80:13 - autogenerator okay so that give us some
80:15 - idea of you know what do I have to do
80:18 - here in this case it's simple enough I'm
80:19 - going to effectively double describe
80:22 - what we're going to do in real practice
80:24 - you might want to have something a
80:25 - little more practical and useful as to
80:27 - why you would do this
80:30 - thing so security we don't have to
80:32 - Define here because this is set up
80:33 - globally you'll notice on the right it's
80:35 - already showing security information
80:37 - here but in this case I do need to
80:40 - request body so let's go ahead and
80:42 - Define a body now uh I obviously don't
80:45 - want it to be a generic object I'm going
80:47 - to go ahead and go pick widget uh that
80:49 - we already defined over here in our
80:51 - sidebar as kind of a a shared thing
80:53 - between these operations so I don't have
80:54 - to redefine all that stuff so we see now
80:57 - here that the body uh has ID named skew
81:01 - and uh name and skew are really what's
81:03 - required um and in fact in a real world
81:06 - scenario we probably wouldn't show the
81:08 - ID here but I don't want to make the
81:10 - example too complicated so let's just
81:12 - say that this is the shape of object we
81:14 - have to pass those two fields are what's
81:16 - required um in a 200 okay scenario what
81:20 - would we to respond with um it's
81:22 - somewhat likely uh it's fair to say that
81:25 - we might want to return the widget back
81:28 - right uh here's what you asked to be
81:30 - sent here's what we send
81:32 - back um we make sure that the type is
81:35 - correct sure application Jason fair
81:38 - enough um now in many cases you know you
81:42 - will just kind of in the response say
81:45 - okay you could certainly do more uh we
81:48 - could say something like the widget has
81:52 - SP
81:53 - [Music]
81:54 - successfully
81:57 - created achieve the
82:03 - autogenerated ID from the
82:05 - response
82:07 - okay uh so now in our preview we start
82:10 - to see this kind of flushing out and you
82:13 - know we might look at this and say cool
82:15 - great like uh you know what the request
82:18 - body is and the fields that you need to
82:20 - supply what's required um and you know
82:22 - what you're going to get back we're
82:24 - done but let's remember what's the first
82:27 - most likely thing that our consuming
82:29 - developer is going to run
82:31 - into well let's think about
82:35 - adding say a 400 error bad request what
82:40 - if uh you know we made a mistake when we
82:43 - posted uh that request body so let's
82:46 - make sure that that uh body that we
82:48 - respond with again I've predefined kind
82:51 - of a common error for the whole platform
82:54 - uh so just by specifying that now all
82:56 - this stuff is predefined for
82:58 - me I certainly could in some cases
83:02 - provide more context in this description
83:04 - as to what the errors are and in this
83:06 - standard error object we would uh
83:09 - probably describe what happened in that
83:11 - specific error it's also not a bad idea
83:14 - by the way and I didn't do it in this
83:16 - example to describe your errors as
83:18 - Concepts in your getting started kind of
83:21 - area of your documentation
83:23 - I would say the bare minimum we should
83:25 - have our 400 we should probably have 401
83:28 - unauthorized uh oops let's put that back
83:30 - to 400 and we'll create a new one not
83:33 - mistake so let's create a new response
83:36 - on
83:37 - 401 uh and again I'm I'm just always
83:40 - going to have every error come back with
83:42 - the same model I think this is generally
83:45 - accepted best practice if you have an
83:47 - API that suddenly has a whole different
83:49 - way of doing errors from everything else
83:51 - you've done might might want to talk to
83:52 - the developers who built it and make
83:54 - sure that we're following some kind of a
83:56 - standardized approach okay so I've got
83:58 - my 40 400 which is generally the the
84:02 - client provided something wrong in the
84:04 - request 401 which says you were
84:07 - unauthorized um you know you haven't
84:09 - sort of logged in in some fashion uh you
84:12 - don't have an API token perhaps at all
84:15 - 403 is perhaps you supplied a token but
84:18 - you didn't have access so let's describe
84:21 - some of this stuff right and this is the
84:22 - trick is you got to think why would this
84:24 - happen so API key was provided but uh
84:30 - access to this
84:33 - resource was not
84:39 - authorized can say API key missing or
84:46 - invalid okay and then finally we should
84:48 - make sure that we've covered the 500 uh
84:51 - and so all those other things were what
84:53 - did the client do wrong uh and 500 is
84:57 - essentially something happened wrong on
84:59 - the server uh file a support
85:05 - ticket for more he let's say that that's
85:09 - our support flow so now when I go look
85:12 - at my responses over here uh I've got my
85:15 - 200 and the description of the body uh
85:17 - but if I go look at my 400 my 401 my 403
85:20 - and my 500 uh those have been described
85:23 - well enough that I've at least provided
85:25 - some context to users of here's what
85:27 - you're going to see when errors occur
85:30 - and granted if done well you're going to
85:32 - get this generic error object look at
85:34 - its contents to understand what's
85:38 - happened okay and I'm going to go ahead
85:40 - and publish these changes and we'll go
85:42 - back and look at kind of the docs view
85:44 - for it and see what this looks like all
85:47 - together so now on my left side I've got
85:49 - the get all widgets uh I've got my
85:51 - description of how that works and I can
85:55 - go look at creating a new widget uh
85:58 - again we see there's security
85:59 - information request body information and
86:01 - my response is both successful and
86:05 - unsuccessful Another Thing Worth
86:06 - pointing out here now that we've kind of
86:08 - got this fully rendered out um another
86:10 - sort of let's say portal feature you
86:12 - should be looking for um is like say in
86:15 - this case can I call a fake API that
86:18 - emulates what this would look like if I
86:20 - really did it if I really called this
86:22 - with this body supplied here's what I
86:24 - would get back um and for consuming
86:28 - clients can I get uh code samples
86:32 - perhaps in different languages uh or
86:34 - just a curl call so I can try this
86:36 - command line um and examples of what the
86:39 - response looks like without having to do
86:41 - the try it thing right uh so these are
86:44 - all generally expected kinds of features
86:47 - um that go beyond what your job would be
86:51 - as documenting an API but I think how
86:53 - you would render and provide good
86:55 - context for how to consume this we're
86:58 - going to go back and look at our widgets
87:01 - apis again we had our retrieve all
87:04 - widgets our create a widget let's look
87:06 - at the one that we created I'm going to
87:07 - go in and headed
87:09 - this and look at kind of what's under
87:11 - the covers here um you know we kind of
87:14 - focused on just getting through the
87:15 - documentation filling in the blanks
87:18 - making sure that we did all the the
87:19 - basics for this example but I'm actually
87:22 - going to switch over to our code view
87:25 - here and this is actually what we're
87:27 - producing kind of under the covers let
87:29 - me turn off the preview so we have more
87:31 - Viewpoint um so this is using open API
87:34 - 3.1 and you'll notice like there's an
87:37 - info section where we can fill in title
87:40 - version summary description all those
87:42 - things we were doing we can see the
87:44 - servers where we showed that widget
87:47 - server as what folks would use to call
87:49 - this as well as our paths
87:52 - so underneath paths we have SL widgets
87:55 - and then you'll notice we go into the
87:56 - verbs the get and we should have down
88:00 - here a post within our get ver basally
88:05 - our summary or we can put our
88:07 - description the individual response
88:09 - codes we have our 200 400 500 that we
88:12 - defined as well as descriptions for each
88:15 - of those and what the content type
88:19 - coming back is again we typically see
88:22 - application Jason on newer development
88:24 - and the
88:25 - schema in this case it gets a little bit
88:28 - tricky looking because I had defined a
88:31 - shared way of defining the widget
88:34 - response object and request object that
88:37 - we could link everywhere and this is how
88:38 - open API does it is this sort of dollar
88:41 - ref language that uses Jason pointer to
88:44 - play over to that we've also got a
88:47 - description of what that looks like this
88:49 - is what it's going to look like if
88:51 - you're writing raw open API obviously
88:54 - you can go read up on the open API spec
88:57 - and better understand how to structure
88:59 - these things and I should point out to
89:02 - that that ref where we had a link here
89:05 - um you know in this case it's a a
89:07 - specific sort of stoplight way of
89:09 - resolving it for those workspace wide
89:11 - sharables but in this case we're just
89:14 - pointing this widget list paged which if
89:16 - we go down to the bottom here we'll see
89:18 - components and schemas are defined in
89:21 - here for the widget as well as widget
89:23 - paged and these are really no different
89:26 - than defining it in line with the
89:28 - operation but just to break it down a
89:30 - little bit we've got our widget it's got
89:33 - title what type of object it is so in
89:36 - this case it's just a generic object and
89:39 - then the properties these are
89:40 - essentially the fields or ID or name or
89:43 - skew um what those types are whether
89:45 - they're string or number so like down
89:48 - here in our widget list page for a page
89:50 - number it's an integer not a
89:52 - string and things like pattern where we
89:56 - talked about that we have a a regular
89:58 - expression to make sure that this is 10
90:00 - to 20 combination letters and numbers
90:04 - examples are provided in the field as
90:06 - well and of course our description in
90:09 - this case because I use stoplight we've
90:11 - got this stoplight thing that's an
90:12 - extension that goes beyond open API and
90:15 - youly wouldn't put that in if you're not
90:17 - using stop light platform and it's
90:19 - autogenerated for you but that we've
90:22 - also got here at the bottom the security
90:23 - schemes where we're specifying
90:25 - authorization and this applies to
90:28 - everything here and yeah so that gives
90:30 - you an idea of what it looks like to
90:32 - look directly at the open API you know
90:35 - ultimately when you're putting the
90:36 - content in here it's marked down so
90:39 - you'll notice like pound for headers
90:41 - double pound for second tier headers
90:44 - pretty simple stuff if you've ever
90:45 - looked at mark down for again that's an
90:47 - easy one to go Google look and see how
90:49 - it works but you you're generally going
90:51 - to see folks using markdown in here and
90:53 - then your portal rendering software
90:56 - whatever you're using is going to read
90:57 - that markdown and render it into
90:59 - something that's formatted and that's
91:01 - how we kind of end up for instance where
91:04 - uh we have these headers defined so we
91:07 - look at our widgets overview we look at
91:10 - that preview like the getting started
91:12 - typical usage how these things get
91:14 - rendered out so fairly straightforward
91:17 - you know call me lazy I like having this
91:20 - view where I don't have to do all that
91:21 - syntax uh but certainly there's nothing
91:24 - wrong with learning it and it's probably
91:26 - a good skill if you're working on
91:28 - documenting
91:30 - apis we're going to go back and look at
91:32 - our widgets apis again we had our
91:35 - retrieve all widgets our create a widget
91:37 - let's look at the one that we created
91:39 - I'm going to go in and headit
91:41 - this and look at kind of what's under
91:44 - the covers here um you know we kind of
91:46 - focused on just getting through the
91:48 - documentation filling in the blanks
91:50 - making sure that we did all the the
91:52 - basics for this example but I'm actually
91:54 - going to switch over to our code view
91:57 - here and this is actually what we're
92:00 - producing kind of under the covers let
92:01 - me turn off the preview so we have more
92:04 - Viewpoint um so this is using open API
92:07 - 3.1 and you'll notice like there's an
92:09 - info section where we can fill in title
92:12 - version summary description all those
92:14 - things we were doing we can see the
92:17 - servers where we showed that widget
92:19 - server as the what pugs would use to
92:21 - call this as well as our paths so
92:25 - underneath paths we have SL widgets and
92:27 - then you'll notice we go into the verbs
92:29 - a get and we should have down here a
92:33 - post within our get ver Bally our
92:37 - summary or we can put our description
92:40 - the individual Response Code so we have
92:42 - our 200 400 500 that we defined as well
92:46 - as descriptions for each of those and
92:50 - what the content type coming back back
92:51 - is again we typically see application
92:54 - Jason on newer development and the
92:57 - schema in this case it gets a little bit
93:00 - tricky looking because I had defined a
93:03 - shared way of defining the widget
93:06 - response object and request object that
93:09 - we could link everywhere and this is how
93:11 - open API does it is this sort of dollar
93:13 - ref language that uses Jason pointer to
93:17 - play over to that we've also got a
93:19 - description of what that looks like this
93:22 - is what it's going to look like if
93:24 - you're writing raw open API obviously
93:27 - you can go read up on the open API spec
93:29 - and better understand how to structure
93:31 - these things and I should point out too
93:34 - that that ref where we had a link here
93:37 - um you know in this case it's a a
93:40 - specific sort of stoplight way of
93:41 - resolving it for those workspace wide
93:43 - sharables but in this case we're just
93:46 - pointing this widget list paged which if
93:48 - we go down to the bottom here we'll see
93:50 - components
93:52 - and schemas are defined in here for the
93:54 - widget as well as widget paged and these
93:57 - are really no different than defining it
94:00 - in line with the operation but just to
94:02 - break it down a little bit we've got our
94:04 - widget it's got title what type of
94:07 - object that it is so in this case it's
94:09 - just a generic object and then the
94:12 - properties these are essentially the
94:13 - fields or ID or name or skew um what
94:17 - those types are whether they're string
94:18 - or a number so like down here in our
94:20 - widget list page for a page number it's
94:23 - an integer not a
94:25 - string and things like pattern where we
94:28 - talked about that we have a a regular
94:30 - expression to make sure that this is 10
94:32 - to 20 combination letters and numbers
94:36 - examples are provided in the field as
94:39 - well and of course our description in
94:42 - this case because I use stoplight we've
94:43 - got this stoplight thing that's an
94:45 - extension that goes beyond open API and
94:47 - youly wouldn't put that in if you're not
94:50 - using stoplight platform and it's
94:51 - autogenerated for you but that we've
94:54 - also got here at the bottom the security
94:56 - schemes where we're specifying an
94:57 - authorization and this applies to
95:00 - everything here and yeah so that gives
95:02 - you an idea of what it looks like to
95:04 - look directly at the open API you know
95:07 - ultimately when you're putting the
95:09 - content in here it's marked down so
95:11 - you'll notice like pound for headers
95:13 - double pound for second tier headers
95:16 - pretty simple stuff if you've ever
95:18 - looked at markdown before again that's
95:19 - an easy one to go Google look see how it
95:22 - works but you you're generally going to
95:24 - see folks using markdown in here and
95:26 - then your portal rendering software
95:28 - whatever you're using is going to read
95:29 - that mark down and render it into
95:31 - something that's formatted and that's
95:33 - how we kind of end up for instance
95:35 - where're uh we have these headers
95:38 - defined so we look at our widgets
95:41 - overview we look at that preview like
95:43 - the getting started typical usage how
95:46 - these things get rendered out right so
95:49 - fairly straightforward you know call me
95:50 - lazy I like having this view where I
95:52 - don't have to do all that syntax uh but
95:55 - certainly there's nothing wrong with
95:57 - learning it and it's probably a good
95:59 - skill if you're working on documenting
96:02 - apis now that we've gone and tried out
96:05 - creating an API and and documenting it
96:08 - let's dig in a little bit deeper and go
96:11 - through some of the details so again
96:14 - rest API documentation is what we're
96:16 - generally focused on here certainly
96:17 - there are nuances to other forms of apis
96:20 - but one thing that we just kind of did
96:22 - in that example and we'll go back and
96:24 - look at it again here in a second is um
96:27 - we didn't start with say a Google doc or
96:30 - an HTML file or you know something from
96:34 - scratch and like hand write like putting
96:38 - the API on one side and a text editor on
96:41 - the other and writing documentation from
96:43 - scratch we used a tool that helped us
96:46 - walk through sort of filling in the
96:48 - blanks and the point to this is and
96:51 - curated content can be very difficult to
96:55 - scale consistent approaches across an
96:59 - organization so using something that
97:02 - generates the documentation for you
97:04 - means you can quickly create some
97:06 - internal reference you saw there in just
97:08 - a few minutes we were able to go Define
97:10 - our API and we could easily go share a
97:13 - link out to that to anybody else to go
97:15 - look at we need to be able to easily and
97:18 - rapidly make changes when those changes
97:20 - occur in the
97:22 - API and ultimately we need to make sure
97:24 - that the API docs match the
97:26 - functionality um this is actually one of
97:29 - the more common things I've said before
97:31 - that like broken off stuff is a really
97:32 - common one but right behind it is the
97:35 - API docs don't actually match reality
97:37 - because we didn't have a process to
97:39 - capture change or we just didn't get it
97:42 - right in the first
97:44 - place so one really powerful way to do
97:47 - this with rest API is open API formerly
97:51 - know known as Swagger is a way to
97:53 - describe an API without actually
97:56 - implementing or building one and that's
97:58 - what actually we just did uh and we'll
98:01 - kind of go back and take a look under
98:02 - the covers what ises that open API look
98:04 - like I just certainly prefer to not have
98:07 - to look at that syntax by default and
98:10 - just use a tool for me but the point is
98:14 - that open API is structured in a way
98:17 - that you can tie into your code base you
98:19 - can tie into other tools make sure that
98:22 - in an automated way everything matches
98:24 - so just to take another look at what API
98:27 - reference looks like when done well
98:30 - obviously in our little example that
98:31 - wasn't the most uh flushed out API in
98:35 - the case of stripes this is what most
98:37 - folks point to as a company they sign it
98:40 - incredibly well from the start each
98:42 - operation has this humanfriendly
98:44 - description when I look here I know I
98:46 - create a charge I charge a credit card
98:49 - or other payment Source I create a
98:50 - charge option object right it's very
98:52 - prun right it gives me an easy way to
98:55 - understand what it is that I need to
98:57 - do and there's also that copy paste
99:00 - example sample call stuff here on the
99:03 - right so this these again are pretty
99:06 - typical things folks expect out of the
99:09 - API documentation experience if you want
99:12 - to go look at what good looks like go
99:13 - take a look
99:15 - strip another great example is twio um
99:18 - you know this is I think number two on
99:21 - the list of very successful API programs
99:25 - that have been largely driven by their
99:27 - developer portal kind of developer
99:29 - experience they've always been brilliant
99:31 - at providing lots of language specific
99:35 - examples so on the panel there on the
99:37 - right you see it's provided in PHP you
99:39 - can change that language and their
99:40 - coverage is quite
99:42 - tremendous and I I know on the back end
99:44 - they're actually testing those examples
99:47 - every time they deploy changes so those
99:49 - are those examp examples work right um
99:53 - so you want to keep that stuff visible
99:55 - while you're browsing the documentation
99:57 - so that as you're beginning to
99:58 - understand how it works it's easy enough
100:00 - to reach over hit copy paste or you know
100:02 - in some cases even click the try it
100:04 - button and and go do
100:06 - it so let's take a broader look I said
100:08 - before that um you know there are lots
100:11 - of other techniques and tools and things
100:13 - like that uh so let's take a quick look
100:15 - at those so from a technique standpoint
100:18 - I think we've been kind of assuming in
100:21 - the course of discussing this that we're
100:23 - designing an API that has not been built
100:26 - yet so right here in the middle put kind
100:29 - of a spec based approach you know using
100:31 - open API like I talked about that's an
100:35 - example of an API specification
100:38 - format one of the advantages is
100:40 - especially if you're sharing these docs
100:42 - in a centralized place it minimizes
100:44 - duplicated effort if you're sharing a
100:46 - spec that you're planning to go build
100:48 - everyone's able to see it and thereby
100:51 - you can join forces or go work on
100:53 - something else don't accidentally build
100:55 - the same thing you can get earlier
100:57 - feedback on something before you've
100:59 - invested in building it find out if it's
101:01 - going to work for the the community
101:03 - that's going to consume it the cons are
101:06 - it is possible that if you implement it
101:09 - different than the spec you could get
101:11 - out of sync so there's certainly some
101:13 - mitigating approaches to address that on
101:16 - the left here we have code annotations
101:18 - this is a pretty widely popular thing
101:21 - for many years I think it's in some ways
101:23 - kind of on its way out in preference in
101:25 - favor of spec based but still widely out
101:29 - there and this is the idea that you
101:31 - actually go into the code and drop
101:34 - annotations into the code that describe
101:37 - what each operation does so obviously
101:39 - the disadvantage here is for especially
101:42 - someone like a tech writer or product
101:44 - manager having to go into a code base
101:45 - and make changes can be a little
101:48 - intimidating on the upside the code
101:50 - code's going to match the docs if you're
101:52 - generating documentation from code
101:55 - annotations um so it's it's harder to
101:58 - get out of sync and there's not any
102:00 - extra sort of tooling or steps that
102:02 - you're going to have to do again the
102:04 - other big downside is you've got to
102:07 - actually go Implement code you've got to
102:09 - have probably Engineers involved in at
102:11 - least stubbing this out before you can
102:12 - even begin documenting and perhaps
102:15 - providing mocks or
102:16 - something um on the right here is more
102:19 - of that hand curated B spoke approach
102:22 - it's like you're not using any specs
102:24 - you're not using any annotations you're
102:26 - just starting with simple so say content
102:29 - management platform and plugging in your
102:32 - own format for all that stuff it's easy
102:36 - and that you don't have to have any
102:37 - fancy tools you don't have to learn any
102:39 - kind of specs or know how to get into
102:41 - code document things and just about any
102:44 - CMS will publish any form of
102:47 - documentation but it is really really
102:50 - difficult to keep anything in sync and
102:52 - there's nothing contract based so
102:54 - there's no other tooling Downstream
102:56 - that's going to be able to integrate
102:57 - with that process so this is you know
103:00 - labor of love to keep it in good shape
103:02 - and you're going to have to do all the
103:04 - kind of format and design aspects to
103:07 - make that in a format people expect
103:11 - especially when you start going down the
103:12 - road about having code samples
103:16 - or you know triy it components those are
103:19 - things that generic cms's just not going
103:21 - to give you um you would have to go
103:23 - custom build certainly say in 2023
103:26 - that's probably not a great
103:28 - idea so tools that are out there um
103:31 - obviously I have to you know plug the
103:32 - stoplight platform here a bit and
103:35 - primarily because we have a lot of open
103:36 - source and free options available but I
103:39 - would certainly point out that there's
103:40 - lots of great API doation platforms out
103:43 - there uh red doly and readme have always
103:46 - been pretty documentation focused uh so
103:48 - it's certainly one of their strong
103:49 - points Swagger hubs very similar to
103:52 - stock light and having bigger set of
103:53 - functionality it goes beyond docks and
103:57 - in the perspective that maybe you just
103:59 - go do something a little simpler Notions
104:01 - out there but you know probably not
104:03 - nearly as strong because it's a more
104:06 - Boke hand curated approach but I would
104:09 - certainly say you know going and doing
104:11 - this stuff from scratch writing specs by
104:14 - hand or building your Portal from
104:18 - scratch I mean there are so many options
104:20 - and I would say even just looking at
104:22 - GitHub um you know there's so many
104:25 - opsource portal generators that will
104:28 - take like an API spec file like open API
104:31 - and render that documentation for you I
104:33 - really couldn't advise more against
104:35 - going and doing this all from
104:37 - scratch so from there let's get into a
104:40 - little bit more of the best practice
104:41 - stuff we touched on some of the the
104:43 - checklist kind of things that you should
104:45 - always be doing first of all you've got
104:47 - to think about broad audience so it's
104:51 - important that your internal jargon is
104:54 - not leaking into this documentation in a
104:56 - way that's going to be disorienting for
104:59 - those consuming it now if you're
105:01 - building internal oriented stuff I think
105:03 - this is somewhat more permissible uh to
105:05 - use sort of jargon or acronyms but the
105:07 - reality is you should really fight
105:09 - against that Trend um because you can't
105:11 - always count on the fact that everybody
105:13 - in the company knows all these terms and
105:15 - having to go to some big dictionary to
105:17 - look up what it means it's friction
105:19 - filled would certainly advise challenge
105:21 - yourself to look past jargon and
105:24 - acronyms and be more clear help include
105:26 - folks that might not understand those
105:29 - things un approachable tone and plain
105:31 - language I think you know sometimes
105:33 - folks get caught up in lots of buzzword
105:35 - Bingo and business e sounding stuff and
105:38 - especially with developers using these
105:39 - things there's commonly a much more
105:42 - downto Earth straightforward way of
105:43 - talking and I think it can be good in
105:46 - terms of building that relationship with
105:48 - the consuming developer that he this is
105:51 - you know this is a friendly place to
105:53 - be using clear variable names function
105:56 - names and code samples um you know this
105:58 - this starts to get a little bit detailed
106:00 - But ultimately you don't want to have
106:02 - some generated sample that's you look at
106:04 - it and just don't really know what it
106:06 - means so being thoughtful about
106:08 - providing samples and that sort of thing
106:10 - can really help clarify what it is that
106:13 - I'm about to copy paste and use be alert
106:15 - to discriminatory language increasingly
106:18 - there's an awareness that there's words
106:21 - that we might use in you know especially
106:24 - in the traditional software world that
106:27 - increasingly folks might be a little
106:29 - insulted or offended by uh so put your
106:33 - best foot forward and make sure that
106:34 - you're not using that kind of language
106:36 - and making the best first
106:39 - impression practical guides multimedia
106:41 - elements so we've talked before that the
106:43 - reference material it's just not enough
106:45 - you've got to have this sort of walk
106:47 - through of here's the set of things need
106:50 - to go do in order to accomplish your use
106:53 - case so having things that are a little
106:55 - more practical in the outcome that I
106:58 - expect to get from this rather than a
107:00 - sort of mechanical you know go find all
107:02 - the pieces and glue them together
107:04 - yourself and multimedia elements here is
107:07 - really referring that you can include
107:10 - videos and maybe gifts whatever
107:12 - multimedia ways of delivering your
107:15 - content so you can certainly go above
107:17 - and beyond all of this content writing
107:20 - that we've been talking about and really
107:22 - provide something that's perhaps more
107:24 - engaging to different kinds of Learners
107:26 - not everyone is great at sitting down
107:28 - reading a bunch of text sometimes folks
107:30 - really appreciate having a brief video
107:32 - that walks them through the steps then
107:35 - that can be a lot more productive
107:37 - approach and as we pointed out
107:39 - throughout this you can provide simple
107:42 - documents and it works but having more
107:46 - interactivity is certainly more
107:48 - developer friendly we're not having to
107:50 - go t developers and piece together the
107:53 - bits from your content to then go to
107:55 - some different tool try out the AP it's
107:58 - always really convenient and timesaving
108:01 - if I can just click a button it says try
108:03 - it
108:04 - works so just to touch again on
108:07 - multimedia documentation I mention like
108:09 - videos with simple walkthroughs as being
108:11 - a really um userfriendly way to do it
108:15 - another approach is pictures flowcharts
108:18 - sometimes you've got in that cont
108:20 - Concepts idea and documentation Big
108:23 - Ideas that you have to convey and
108:25 - sometimes just a few diagrams pictures
108:28 - things like this can really help punch
108:30 - through the point especially with you
108:33 - know I think here it's called out that
108:35 - it's useful for Less technical users I
108:38 - think it's also just being tuned into
108:40 - the fact again people learn differently
108:42 - some people want to list to text some
108:44 - people are more Visual and want kind of
108:45 - a visual representation of what you're
108:48 - describing um and again some people want
108:50 - to be walked through with the videos
108:51 - don't be afraid to try different ways to
108:54 - connect with Learners as people are
108:56 - learning how to use your
108:59 - API um the other thing called out here
109:03 - is you know sometimes we kind of stop at
109:06 - this send a request get a result and
109:08 - that's it but you really again want to
109:10 - go beyond that mechanical interaction
109:14 - into that step by-step guide can I walk
109:17 - you through the process can I provide
109:19 - some multi media in that process that
109:22 - makes it easier to understand for
109:23 - different kinds of lers or perhaps low
109:26 - code developers non-technical users and
109:29 - uh really make the most out of that
109:30 - first
109:32 - interaction interactive docs again just
109:34 - to reiterate a really important to be
109:36 - able to copy paste examples hit the try
109:38 - button that sort of thing static
109:40 - reference material can really leave you
109:43 - lacking and get you pushed into using
109:45 - other tools it's taking away a barrier
109:48 - taking toil off of the end user and
109:51 - ultimately all that adds up you know
109:54 - having more media more ways to learn
109:57 - more ways to interact with it all of
109:59 - it's about creating this more positive
110:01 - developer experience folks coming away
110:04 - from it saying that was easy I want to
110:06 - do that again
110:09 - right I'm automated docs and we're going
110:12 - to take a pause here in just a moment
110:14 - and go look at this but using some sort
110:16 - of spec format perhaps code annotations
110:19 - things like this
110:21 - it's a really good way to try to keep
110:23 - things more programmatically in sync and
110:25 - connect more Downstream tooling to a
110:28 - shared definition and docs are just one
110:31 - of the things that you can output from
110:33 - that
110:34 - spe and accessibility this is another
110:37 - one that there's a lot of folks out
110:39 - there and in this case who estimates
110:41 - about 15% of the world um needs some
110:45 - sort of specifically accessible content
110:48 - so simple example of this actually is a
110:51 - color blindness uh it's very common
110:55 - thing especially among males so if
110:58 - you're using let's say a color palette
111:01 - or charts diagrams that use a certain
111:05 - ranges of colors for colorblind folks
111:08 - they can all look the same so that can
111:11 - be very off-putting it could really kind
111:13 - of suck the wife out of the multimedia
111:15 - content that you're providing so it's
111:17 - always good to think about a variety of
111:20 - sort of accessibility concerns involved
111:23 - here and it's not really that hard to go
111:24 - use a variety of tools that are out
111:26 - there that will go check your content
111:28 - for you and give you an idea of where it
111:31 - could cause problems for say visually uh
111:34 - impaired
111:35 - users um you know things like labels and
111:38 - all texts on images can be really
111:40 - helpful when you're using something like
111:41 - a screen
111:45 - reader and finally we're really going to
111:47 - come down to a question here is
111:50 - it's content up toate said it before out
111:53 - ofate content in API docs is super
111:57 - offputting and this is where having some
112:00 - kind of process some kind of automation
112:02 - some kind of connection between what you
112:04 - built and what you're documenting can
112:07 - really make a big
112:08 - difference um things like screenshots
112:11 - always seem like a great idea like this
112:13 - going to make this so easy to understand
112:15 - but you got to be really careful that
112:16 - you don't end up with year two old
112:18 - screenshots and you redesigned things
112:21 - since then you've added functionality
112:23 - that can be really disorienting if
112:26 - suddenly the dots you're walking through
112:27 - in the screenshots you're seeing don't
112:29 - match
112:30 - reality um and again this is about
112:35 - embracing the fact that there's an
112:36 - iterative life cycle to these things
112:38 - this is not a oneandone
112:40 - process the only thing you can count on
112:42 - with apis is they're going to change
112:44 - over time and you need to have a process
112:46 - to make sure that uh you know not just
112:49 - the reference material is getting
112:51 - updated but also those guidance
112:53 - tutorials task driven kinds of things
112:57 - are also reviewed to make sure that with
113:00 - the changes that we made do these things
113:02 - still work another thing that happens
113:05 - iteratively and creeps up on us is that
113:07 - content gets bloated right making sure
113:10 - that we're able to go through and really
113:11 - streamline and simplify what we have
113:15 - there take some intention as part of
113:17 - that iterative process that let's look
113:20 - at the big picture here as we've added
113:22 - things over time has this gotten to
113:24 - where it's just chore to grind through
113:26 - all this content and figure out what to
113:29 - do and another thing to watch out for
113:31 - within that uh in that bloat is do you
113:34 - have repetitive bits where you're
113:36 - touching on the same Concepts in too
113:38 - many places and it's just eating up
113:40 - space and cluttering up the
113:43 - experience and finally we didn't touch a
113:45 - lot on expectations around search but
113:49 - searching AAR large catalog of apis it
113:51 - can be really difficult to find the
113:53 - thing that you're looking for and some
113:55 - of this does come back to how you're
113:57 - documenting how you're describing things
113:59 - and making sure that you're optimizing
114:01 - for
114:03 - relevance so we touched on tone and this
114:06 - sort of thing and style is certainly a
114:09 - factor here too and there's some
114:11 - different templates folks use for style
114:13 - things like that really this is coming
114:16 - down to you know we can document one
114:19 - andone API sure we can maybe even do it
114:22 - hit Orly as a process but when we start
114:25 - building lots of apis across a company
114:28 - consistency is the name of the game
114:30 - that's the really hard thing to achieve
114:32 - is that you can do this repeatably in a
114:35 - way that produces things that will feel
114:37 - smell the same right so governance kind
114:40 - of security measures you know you've got
114:43 - to have some process you got to have
114:44 - some pop into how this is going to work
114:47 - and really focus on looking at that big
114:50 - picture and making sure that is this a
114:52 - great developer experience not just when
114:55 - I look at one API but when I look at all
114:57 - the different apis does it all feel like
115:02 - one so that's what's going to take you
115:04 - down the road of of really being able to
115:06 - do API documentation at a bigger scale
115:10 - and with that is the end of our course
115:12 - thank you that wraps up the API
115:14 - documentation best practices course hope
115:16 - you enjoyed it if you'd like to earn a
115:18 - badge and certificate for this course
115:20 - please enroll at appc university.com
115:22 - take the quizzes and we'll be happy to
115:24 - issue your CT and while you're there be
115:26 - sure to check out our other courses and
115:28 - certifications we also host monthly
115:30 - webinars with with API experts on
115:32 - various topics and thanks again for
115:35 - watching and hope to see you again soon