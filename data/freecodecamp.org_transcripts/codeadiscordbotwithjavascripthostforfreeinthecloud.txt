00:00 - Hi, I'm Beau Carnes with free code camp.org. I'm 
going to show you how to code a discord bot with  
00:06 - JavaScript that runs completely in the cloud 
for free. I already made a course about coding  
00:12 - a discord bot with Python. And you can get 
the link to that up here in the corner or  
00:16 - down in the description. We're gonna use a few 
different tools, including the discord API,  
00:20 - a few JavaScript libraries, and a cloud computing 
platform called replique. You probably already  
00:26 - know what discord is, and what a discord 
bot is, since you're watching this tutorial,  
00:31 - but just in case you don't let me give you a brief 
overview. discord is an app used for real time  
00:36 - text chat, discord servers are set up by people 
and generally are focused on a certain community.  
00:42 - Many groups and organizations have discord 
servers for people to chat with each other.  
00:46 - A Discord server often has many channels, which 
are different rooms that you can chat in. A  
00:52 - discord bot, is a user in your Discord server that 
is controlled by a program instead of a person.  
00:58 - You can code a discord bot to make it do whatever 
you want. There are many things discord bots  
01:03 - are often used for. They can be used to chat, 
respond to messages, manage servers, play music,  
01:09 - and more. You can also use a web hooks with a 
discord bot to do things like give real time  
01:15 - updates on a GitHub repository. The bow we will 
create in this course is called encouraged bot, it  
01:21 - can tell people inspirational quotes that it gets 
from an API. Also, when the user says a sad word,  
01:28 - the bot will respond with an encouraging phrase. 
Users can also add or remove encouraging phrases  
01:34 - that the bot uses directly from Discord. The first 
step for creating a discord bot is to make sure  
01:41 - you have a Discord server to add the bot to, you 
may already have one. But let me just show you  
01:46 - how to set one up really quick in case you don't 
already have one. So you're going to have to go  
01:51 - to discord comm and log into Discord. And then you 
just click the plus button here to add a server.  
01:59 - And I'll say for me and my friends. And I'll just 
call it robot family server. OK, let's create  
02:08 - that. And now we have our server. Okay, so before 
we can code our bot using Python, and using the  
02:17 - discord API, we must first create a discord bot 
account right within Discord. So you're going to  
02:26 - have to go to the discord developer portal. I'll 
put the link in the description, but it's just  
02:32 - discord comm slash developers slash applications. 
So once you're on the applications page, you're  
02:39 - going to click this new applications button. And 
then we're going to create a name for it. This bot  
02:46 - is going to send friendly encouragement to people 
from in Discord. So I'm going to call it encourage  
02:54 - bot. Okay, I'll create that. Okay, now I'm going 
to go to the bot tab here. And then I am going to  
03:03 - click Add bot and say yes, do it. Okay, we'll keep 
the default the default settings as a public bot,  
03:15 - and then we won't require the OAuth to grant the 
code grant. So now the the bot has been created.  
03:23 - The next step is to copy the bot token. Okay, 
so I'll just click Copy to copy the token,  
03:30 - we're going to need that later. Now 
this token is your bots password.  
03:34 - So make sure not to share it with anybody. It 
could allow someone to log into your bot and do  
03:39 - all sorts of bad things. And it could even allow 
someone to mess with your server. And also,  
03:45 - you can obviously regenerate the token if 
they accidentally get shared. So now we have  
03:49 - to invite the bot to our server, we have the 
bot user, and we have to get into our server.  
03:56 - To do that, we're gonna have to create an invite 
URL for it. So let's go to the off to tab here.  
04:04 - And now we're just gonna go to the scope section. 
Since this is a bot, we'll just click Buy here.  
04:10 - Now we have to scroll down a little bit more and 
go to the bot permissions section. So we'll choose  
04:16 - the permissions we want for the bot. Our bot 
is going to be mainly used for text messages.  
04:22 - So we don't need a lot of permissions. So your 
bot may do different things. But let's just  
04:30 - choose some of these here. Actually will do all 
of them on this line except send TTS messages. Now  
04:37 - you do need to be careful with this administrator 
permissions. If you give your bot administrative  
04:43 - permissions it has a it will be able to control 
your server in ways that you may not actually  
04:49 - want. And then I guess the last one we need to 
add is the view channels are bots going to have  
04:54 - to view the channels. So after selecting the 
appropriate permissions, we'll click the Copy  
05:00 - button right here. And this will copy a URL 
that can be used to add the bot to a server.  
05:07 - And I guess we'll also have to recopy the 
back key, we copy the back key earlier,  
05:11 - but now it's been re copied with this URL. So 
we'll have to come back later to get the back key.  
05:16 - But now let's just open up a new tab, and I'm 
gonna go to this URL. Okay, so now we have to  
05:22 - choose a server, we want to add the bot to I'll 
choose robot family server, the only option,  
05:27 - but you will probably have more than more options. 
So we'll click Continue. And we want to approve  
05:34 - that we want to do all these things, we want 
to authorize the bot for all these things.  
05:42 - And I'm not a robot and the bot is authorized. 
That means the bot has joined the server. So  
05:49 - if we actually go over into our server, we can see 
encouraged bot just slid into the server. But also  
05:56 - you see over here that the bot is offline, it's 
not going to be online till we write our code that  
06:03 - creates the bot and run the code. And speaking of 
code, it's time to start that. Now I said earlier  
06:11 - that you don't have to install anything, you don't 
have to use any software except your web browser,  
06:16 - we are going to be creating the entire discord bot 
right in the cloud on replicat. The website for  
06:25 - replique is our epl.it. And replica is an online 
ID e that you can just use in your web browser.  
06:33 - So it makes it a lot easier to code things if 
you don't have to install any special software  
06:38 - on your computer. And then you can log into 
it from multiple browsers, multiple computers,  
06:44 - and then you can easily access your code and your 
programs no matter what computer you're using.  
06:50 - So we're going to make our bet on this. And then 
it will also be completely hosted in the cloud,  
06:56 - we can even run the bot on this website. So we 
don't have to run it on our local computer. And  
07:02 - that will make it so we can keep the bot running. 
Even if our computer shuts down, or we're gonna  
07:08 - where we close the browser tab or anything like 
that, I'll show you how to make the bot so it'll  
07:13 - keep running in the background continuously. 
And then you don't have to worry about it.  
07:18 - If you don't already have account, you're 
going to sign up. But I'm going to log in here,  
07:22 - I'm going to show you how to use replique to 
create the bot from scratch. But just in case you  
07:27 - click the link in the description to the completed 
bot, you're going to want to click fork here.  
07:33 - And you don't really want to start editing, you 
probably want to fork it and then create your  
07:37 - own copy, and then start editing instead of trying 
to request edit my copy. Okay, this is replique.  
07:44 - So let me show you how to start a new project. 
We're just going to click on new new repple here.  
07:51 - And then I'm going to be using node j s. So 
I'll click on node j s. And then if we want,  
07:56 - we can name it or you can use the default 
name, I'm going to call it encourage bot  
08:03 - js, and then create repple. We're going to be 
using the discord.js node library to write the  
08:10 - code for the bot. This go js is an API wrapper for 
discord that makes it easier to create a discord  
08:16 - bot, and no GS or JavaScript. Okay, we're in our 
project, you can see that we have our files here  
08:23 - we have our code that we're going to write here. 
And then we have a console over on the side. And  
08:29 - then there's some different tabs, we are only 
going to be mainly using the Files tab here. But  
08:34 - we'll also be using the database tab later. 
But for now, let's get started. So first,  
08:41 - we're going to add the discord.js library. So 
I'll add const discord equals require discord.js.  
08:59 - Now repple, it will automatically install 
this dependency when you press the button the  
09:05 - Run button. So that's one cool thing about 
repple is that dependencies are installed  
09:09 - automatically. And if you ever have a problem, 
you can always go into the shell. And you can  
09:13 - install anything manually in the shell. But 
let's go back over to the console. This core.js  
09:21 - revolves around the concept of events. An event 
is something you listen to and then respond to.  
09:27 - For example, when a message happened, you will 
receive an event about it that you can respond to,  
09:33 - we're going to start by making a very simple bot. 
This is a bot that's going to respond to messages.  
09:40 - This is taken directly from the discord.js doc 
documentation. So we'll start by making a very  
09:45 - simple one. And then we'll continue to add to 
and make it more complex and make it work for our  
09:51 - purposes. So after this first line, we need to get 
a client const client And equals new discord dot  
10:06 - client. So this is our discord client that 
we'll be working with to connect to our Discord  
10:14 - server. This is the client for the discord.js 
library. Okay, I talked about different events.  
10:20 - So our client is going to respond to different 
types of events. One event is the ready event,  
10:27 - a ready event means that the bot has successfully 
connected to our Discord server and is ready to do  
10:35 - more things. So let's add code now to respond 
to the ready event. So you start with client  
10:43 - that on so on what on what event? 
Well, the event is going to be ready.  
10:49 - So on the ready event, once it's ready to start 
working, once it's connected to our server,  
10:55 - it's going to call this callback function. 
So let's make this callback function here.  
11:02 - And we're just going to console 
dot log something console dot  
11:12 - log, blog and as. And then when I get the 
client name, or the username, the name of  
11:19 - the bot client, that user dot tag. Okay, now we're 
going to respond to a different event, the event  
11:33 - is a message. So whenever the bot sees a message 
in the discord server, it will get the message  
11:39 - event and it will do something whenever there's 
a message, so client that on message. And then  
11:49 - it will call this callback function, we'll get 
access to the message through this parameter here.  
12:00 - And we're going to check to see what the message 
actually is. message content is the text of the  
12:09 - message. So we're going to check for this 
example, if the message is the word Ping.  
12:17 - And if so, then we'll do something. So we're going 
to reply message reply. Pong. So it will the our  
12:29 - bot will actually reply with another message 
in the chat, and the message will be Pong.  
12:37 - Okay, now that we have our, our event set 
up the ready event in the message event,  
12:43 - we need to have our client login to the server. So 
to log into the server, we'll do client dot login.  
12:54 - Now here, we need to put our token. But we're 
not going to actually you could put your token  
13:01 - as a string here. Remember, the token is a thing 
when we created the bot on the developer page,  
13:07 - we copied the token. And if you don't have that 
anymore, you can go back to the developer page and  
13:13 - copy the token. Again, you can put the token as a 
string right here. But we're not going to do that.  
13:18 - And the reason is, because anything on repple, 
it can be accessed by anyone on the internet.  
13:25 - So we don't want anybody to be able to have access 
to our token that's like a password for our bot.  
13:32 - And then anybody could actually use our bot to do 
anything that they wanted. We don't want that. So  
13:37 - we need to have a figured out we need a way to 
keep our token a secret. And the way we're going  
13:42 - to do that is when it within an environment 
variable repple, it has a special way of doing  
13:47 - that, we are going to create our environment 
variable in just a second. Let's access it right  
13:52 - now. And then we'll create it. So to access 
a environment variable, where we do process  
13:59 - dot E and V dot and then the name of the 
environment variable, which in this case is going  
14:04 - to be token. So now we have to find a place to put 
this. So this is how it works in redplum, we're  
14:11 - gonna create a new file, and I'm gonna call it dot 
E and V. Anything in a dot E and V file is hidden  
14:19 - from the rest of the world. And you can see we 
already have it here. So we have the word token,  
14:25 - you're gonna have to put the word token and then 
an equal sign. And then you paste in your token  
14:32 - that you got for your bot. So in this case, this 
is my token. And now that we have our token stored  
14:40 - in our environmental variable, it can get the 
token and the dot E and V file. Like I said,  
14:45 - it cannot be accessed by it, nobody can see except 
you in the other file. Everyone can see it but  
14:50 - the dot EMB only you can see it and that's how 
we can get that token that nobody else can see.  
14:55 - I guess all of you just saw because I just 
saw it on my screen, but more usually,  
14:59 - you know Not to be making a video so nobody will 
actually see the actual environment variable.  
15:03 - So it's time I'm going to run this program. 
Okay, it says we're logged in. So that worked.  
15:11 - Maybe you may have had a problem if somehow it 
didn't automatically install discord dot j s. In  
15:16 - that case, like I said, you can install it in 
this shell. But everything worked for me so and  
15:21 - I am going to go over to my Discord server 
right now and see what it looks like. Okay,  
15:26 - show is that encouraged by is logged in. So 
I'm going to do a chat, I'm gonna type in  
15:31 - ping pong. And see since it's a reply, it says 
My name because encouraged by replying to me  
15:39 - and saying Pong. So it worked. We have a bot, and 
it works. Now that we have a basic bot working,  
15:46 - we'll improve it. It's called encouraged bot for 
a reason. The bot will respond with a message  
15:52 - of encouragement whenever someone sent a message 
containing a sad or depressing word. Anyone will  
15:59 - be able to add encouraging messages for the bot 
to use, and the user submitted messages will be  
16:03 - stored in the replique database. The bot will also 
return a random inspirational quote from an API.  
16:10 - When someone types a message in spire into the 
chat. We'll start with adding the Inspire feature,  
16:16 - we're gonna get inspirational quotes 
from an API called Zen quotes.io.  
16:22 - Now this, it could actually work with any API, 
you can use any API and just any API that's  
16:28 - going to return JSON or any sort of string, you 
can use. And then you can get that information.  
16:34 - And then you can actually return the string as a 
message with your bot. But I just found this is in  
16:40 - quotes that I owe is a easy way to get a quote 
and encouraging or motivating quote, that we can  
16:46 - return with our bond. So since we are going 
to be calling this API, we're going to need  
16:52 - to import the node fetch module. So up here, 
I am going to do const. Fetch equals require  
17:08 - node fat. So we will be able to use that to call 
the API. And now let's make a function called get  
17:18 - quote, that will be able to be called to get 
a quote from the API. So function, get quote,  
17:30 - inside this function, we are going to return the 
quote. And inside this function, we are going  
17:38 - to fetch the quote, and actually, we're going to 
return it so return, and then I will do my fetch  
17:44 - command, fetch. And then here is where we put 
the URL, HTTPS, colon slash less than quotes.io  
17:54 - slash API. Let's make more room here. So 
you can see everything that I'm typing in  
18:03 - x n is going to be slash random. Okay, after 
we fetch the information, do dot then this  
18:14 - is an asynchronous call. So first, it gets the 
information, it may not get it right away, so but  
18:19 - it's going to wait till it gets information from 
this URL, then it's going to do something with  
18:25 - that data. So let's put the callback function, 
they'll call that will call after get that data.  
18:41 - We are going to return the result. 
But we're going to convert it to JSON.  
18:52 - And then we are going to do something else with 
that data that JSON that data that's returned.  
19:02 - We're going to return we're going to format it 
in the exact way we want it to be formatted.  
19:08 - So we have the data. And let me just type in this.  
19:16 - Okay, to figure out exactly what I want 
to return here and how to format this,  
19:20 - I had to use trial and error. So I 
got the information from this URL,  
19:27 - and I converted JSON. And then I figured out 
that the Q is quote, and the A is the author. So  
19:35 - this is going to put the quote here. And then it's 
going to be there'll be a dash and there'll be the  
19:40 - author, you'll see exactly what it looks like when 
we test this out. But so this is going to this is  
19:46 - going to return a random inspirational quote. And 
to get the information into the format I wanted.  
19:51 - It's going to look like that. And so it's going to 
return the quote when someone calls this function.  
19:57 - So let's update our message. Here, so it will 
return a quote at the right time, we're going  
20:04 - to add something where, first we're gonna add a 
new thing, we're gonna check to see if the message  
20:10 - is from the bot. If the bot ever says anything we 
don't want the bot to, to respond to itself. So if  
20:18 - message dot author dot bot, that means if the 
bot is author of the message, just return.  
20:24 - So we're not going to do anything in that 
case. But if message content equals, well,  
20:30 - it's not gonna be equal, and ping anymore, we're 
looking for the word inspire. So if it senses  
20:40 - that there's a message that's, that's inspire, 
then we're gonna do the get quote, function,  
20:46 - get quote, that then, so you see where, where 
respond, we're returning the risk, the what's  
20:56 - the result of this fetch. And so this is also a 
promise that we can then this is an async call. So  
21:05 - once we get the result, then we're going to do 
something, then we are going to take the quote  
21:14 - and we'll do a message dot channel, dot send. 
So this is going to send a message to the whole  
21:22 - channel, and the message is going to be the 
quote. Okay, let's try this out. First of all,  
21:29 - stop it because it was already running before 
but we just started again for the new code.  
21:34 - And I'll wait till it shows it's logged in here. 
Oh, see is installing the node fetch module now.  
21:44 - Okay, we're logged in. Okay, now 
I will type dollar sign inspire.  
21:51 - They say love is the best investment The 
more you give, the more you get in return,  
21:55 - Audrey Hepburn. Wow, I feel very inspired now.  
22:00 - And just so you know, it doesn't respond 
like that to anything. If I say hello,  
22:07 - it doesn't have response, the only response if it 
sees dollar sign and spider. Now we will implement  
22:14 - the feature where the bot respond with encouraging 
messages when a user posts a message with a sad  
22:19 - word. So first, we need to create an array that 
contains the sad words that the bot will respond  
22:25 - to. So I'm gonna go up here, and I'm going to 
create an array, it's going to be called sad  
22:33 - words. And then I'll just 
have a list of sad words.  
22:37 - Now you can use any list you want, and 
any sad words about the sad, depressed,  
22:46 - unhappy, angry. And we'll do those. But 
you can add more to this list if you  
22:55 - want. Now we'll add an array of encouraging 
messages that the bot will respond where. So  
23:03 - let's add another array called 
encouragements, const encouragements  
23:14 - Cheer up. Hang in there. You 
are a great person, or bot.  
23:35 - Unlike before, feel free to add any phrases you 
want, or just change them up. I'm just using these  
23:40 - three items for now, because later we'll add the 
ability for users to add more encouraging phrases  
23:46 - for the bots to for the bot to use. So now we need 
to update our bot to use the two lists we created.  
23:54 - So let's go down to the message function, we're 
going to add another section here. And we're  
24:00 - going to add a section that's going to check to 
see if the message contains a word from the sad  
24:06 - word list. And then if a sad word is found, the 
bot will send a random message of encouragement.  
24:12 - So let's add that. And this time, I just paste 
it in some code, and we're going to go over it.  
24:16 - So this is how we're going to check if the 
message contains a word and the sad words list.  
24:22 - So we start with sad words, that sum, this is an 
array method. Let me show you what it's gonna do.  
24:28 - We're going to go through each item in the array, 
or in this case, a word. And then we're going to  
24:33 - check if message content dot includes if the 
message includes the word, and we're going to  
24:41 - do that for every word in the list. And this sad 
words that Psalm is going to return true if one or  
24:49 - more of these things are true. And so if at least 
one of those words in the list is in the middle  
25:00 - It's going to be true. So then it's going to run 
the code here. So first we're going to create a  
25:06 - single encouragement. So the encouragement 
list, we have the encouragement list,  
25:12 - and then we want a random element. So this is how 
we get a random element. Mat that floor rounds  
25:18 - down math dot random time, it's encouragements 
that link. So this is just a way to get a random  
25:24 - index number for the encouragements array. And 
then we're going to get that random encouragement,  
25:31 - and then message reply, encouragement. So 
it's going to return that encouragement.  
25:37 - Okay, let's stop this. And then we're going 
to restart it. Okay, we can test it. I am sad.  
25:46 - says Beau Carnes. Hang in there. It's very 
encouraging. Thank you encouraged bought,  
25:54 - I am happy now. And it doesn't respond 
at all. Because now that I'm happy,  
26:01 - it doesn't need to respond. But now I'm 
feeling good. I'm feeling depressed.  
26:11 - Cheer up. Oh, that makes me feel a lot better. 
And you can see us getting random phrases,  
26:17 - hang in there, cheer up, and include my name here. 
Because it's a reply. If we go back to our code,  
26:24 - you can see that it's a message dot reply. Anytime 
it's a reply, it's going to include the name,  
26:30 - the person who said the message, and then 
the new message, which is the encouragement.  
26:36 - Okay, you basically know enough to 
make your own bot. And you can go to  
26:39 - the discord.js documentation to find out even 
more features you can do with your discord bot.  
26:46 - But now we're going to learn right now how to 
implement more advanced features with this bot,  
26:51 - and store data using the rep database. So 
let's make it possible to update the bot  
26:59 - right from Discord. A user should be able to 
add more encouraging messages for the bot to use  
27:04 - when it detects the sad word, we're going to be 
using replicates built in database to store user  
27:11 - submitted messages. The database is a key value 
store that's built into every replica. So if you  
27:17 - click right here, it says database, it's going to 
show you all these database commands you can use.  
27:24 - So you're always going to have to import 
the database at the top, you can create a  
27:28 - new database, we're actually going to put some 
of these commands right now. So if we just go  
27:32 - up to the top here, and then right under my other 
require, I'm going to click insert here. And it's  
27:40 - just going to put this code right in here, current 
database equals require, and then it's going to  
27:45 - get this database library. Okay, now we have to 
create a new database. So we'll separate these  
27:54 - require statements from these other new statements 
here. So I'm going to create a new database.  
28:03 - And when we run the code, this 
will automatically install.  
28:06 - And if it doesn't, or if you're doing it on your 
local machine, you can just go over to the shell  
28:10 - and do npm install, and then use this for the 
name here. So what we're going to do down here  
28:17 - after the encouragements, we're 
going to initialize the database  
28:22 - with these three encouragements. We're 
gonna just add those to the to the database  
28:27 - if they're not already in the database. So 
this is how we're gonna do that. dB dot get  
28:34 - encouragements. So we're going to get the 
encouragement that are already in the database.  
28:41 - Well, if this is the first time this program 
runs, there won't be any in there. But if the  
28:46 - program has run previously in our there's already 
encouraged us in the database, then we'll get the  
28:51 - list of encouragements that are in the database. 
So this is the key, enter this key key value  
28:57 - pairs. So this is the key and then we're going to 
get the value which to start off with would be no,  
29:02 - but after we get the encouragement, then 
we are going to take those encouragements.  
29:10 - And then we're going to do this. 
I'm going to put this function here.  
29:17 - If we're going to check if there are no 
encouragements, if there are no encouragements or  
29:31 - if the encouragements that link 
is less than one. So if there's  
29:39 - zero encouragements, then we're going to add the 
encouragements. So there will always be at least  
29:45 - something to encourage people with. So and by 
the way, the reason why we have both of these  
29:51 - is because the first time this runs encouragements 
will be no but later encourages could be zero.  
29:59 - So an either case, we want to do DB dot set. 
We're going to set the encouragements key. We're  
30:07 - going to set this to be the encouragements. Well, 
we want to set to be these encouragements, but  
30:13 - we're already using this variable here. And we're 
going to use encouragements later. So this is what  
30:17 - let's just change this to be called starter 
encouragements. So this is now this starter  
30:23 - encouragements, and we're going to set these 
encouragements to be the starter encouragements.  
30:30 - users will be able to add custom 
encouraging messages for the bot to use  
30:35 - directly from the discord chat. Before we add 
new commands to the bot, let's add to let's  
30:42 - create two helper functions that will add custom 
messages to the database and delete the messages.  
30:48 - So right after this, we're going to 
create a helper function function.  
30:56 - Function update encouragements and it's going 
to take one argument and encouraging message.  
31:15 - And so first, we're gonna get the list of 
current encouraging messages, db dot get  
31:23 - encouragement. And then after 
we get those encouragements,  
31:28 - then we're going to take those encouragements.  
31:32 - And in this function, we're gonna do something 
with them. So we're gonna do encouragements  
31:40 - dot push, we're gonna push the new message on to 
this list onto this array. encouraging message.  
31:54 - Now, we're going to do DB dot set, 
we're going to add this to the database  
32:00 - with the new the new encouraging message on it. So  
32:04 - encouragements that's the key, and the new value 
for that key is going to be encouragements. Okay,  
32:15 - now we have to make another function to delete 
the encouragements. So function, delete, incur  
32:25 - encouragement. And this is going to take an index, 
the index in the array that needs to be deleted.  
32:38 - So first, we're going to 
get it's actually gonna be  
32:41 - somewhat similar. So I'm going to 
get just copy this and paste this in.  
32:49 - But we are not going to be pushing any new any 
new thing here. So what we're going to do instead  
32:58 - is if encouragement, that length is greater than 
the index, we're only only good delete something  
33:11 - if the index is is actually an appropriate index. 
So if the length is greater than the index,  
33:17 - then it's part of the index will actually apply 
to this array. What we're going to do is incur  
33:27 - encouragements dot splice, this is how you remove 
an item from an array index one. So at the index,  
33:37 - we're going to remove one item, and then we're 
going to just move this up. I'm going to cut this  
33:47 - and put it here. So now we're going to set the 
encouragement again to be this new encouragements  
33:52 - array that has the encouragements 
remove that we want to remove.  
33:59 - Okay, let's update this section now. So now we 
have to make sure that we are using our list from  
34:06 - the database when we return a message when there's 
a sad word detected. So let's add something here.  
34:15 - We are going to have to get the the 
messages from the database. So DB  
34:27 - dot get encouragement. That then encouragement.  
34:36 - And now all this code, I'm just gonna 
cut that and then put it in here.  
34:50 - And this is actually should be encouraged minutes.  
34:54 - Okay, now let's make it so our bot will respond 
to two new commands. So, if message dot content  
35:06 - dot starts starts with. So if the content starts 
with dollar sign new, then we are going to do  
35:20 - something. So first we have to figure out what the 
new the new messages. So the person will be typing  
35:28 - dollar sign new space, and then they'll put their 
new message that should be should be added to the  
35:33 - list of encouragements. So the encouraging message 
is going to equal message dot content dot split,  
35:48 - new one. So this is the method. And 
that split is a JavaScript string  
35:56 - method. And we're going to split at this 
and make sure there's a space at the end,  
36:01 - because the person's going to type in dollar 
sign new space. And then we want anything after  
36:08 - that to be the new message. So index one in the 
array, because this is going to create an array  
36:13 - index one will be anything after this. So 
we'll get the encouraging message. And then  
36:21 - update encouragements with 
the encouraging message.  
36:27 - And then after we do that, we can send a message 
to the whole channel, message dot channel, dot  
36:33 - send. So our bot is about to send this 
message new, encourage Jane and her urging,  
36:46 - there we go. Message added. Oh, see right here. 
Encouraging. There we go. New encouraging message  
36:57 - added. Okay, now we have to do the same thing with 
delete. So I'm just going to copy this whole thing  
37:03 - because it will be kind of similar, and then paste 
it here. Now we're looking to see if the message  
37:09 - the user types in starts with D l for delete. And 
we're splitting it D L. And this is now going to  
37:15 - be the index, the person is going to type in 
dollar sign t l space and they're going to put  
37:21 - a number and the number is going to be the 
index of the array that should be deleted,  
37:26 - sends it to number we should do parse int to 
convert this to from a string to an int. So  
37:31 - parse int, and then I'm going to put this 
in parentheses. So parse int, and instead of  
37:39 - update encouragements, we're going to be doing 
the leet encouragement. And then I can put the  
37:44 - index here, and then message that child 
that send new encouraging message deleted.  
37:54 - Okay, we can test this out here. So I'll 
run the program. And we're logged in.  
38:08 - I am sad. Hang in there. That's really 
encouraging. Well, let's become even  
38:14 - more encouraging, because I'm going to add a new 
message. You are a great person, and also a great  
38:25 - singer. Hmm, that would make me feel encouraged. 
Okay, how about nice avatar? And how about  
38:40 - that was a wonderful message. Okay, now I'm 
going to see if it will use one of those new  
38:53 - messages we added. So I am sad. That was 
a wonderful message. I am depressed. I  
39:03 - guess that was a wonderful message. Is that 
encouraging if I'm saying that I'm sad, but  
39:08 - you are a great person and also a great singer. 
Now let's see if we can delete one of these.  
39:14 - So let's delete. I'll do Dell and I'll put index 
zero. And let me just delete a few of them.  
39:30 - Now we should have deleted all three of 
the initial messages. So if what's sad  
39:39 - let's see if we see any of the initial messages.  
39:44 - We're not seeing any we're only seeing the new 
ones because all the initial ones were deleted.  
39:52 - Okay, now we're going to add the ability to get 
a list of user submitted messages right from  
39:57 - Discord. And we'll we will add the ability To turn 
off and on whether the bot responds to sad words.  
40:05 - So that change whether it responds or not, we're 
going to add a new variable or a new new key  
40:11 - value pair to the database. So let me scroll 
up a little bit. And right before this where  
40:20 - we initialize the encouragements key value pair, 
let's do the same thing with another one DB that  
40:28 - get responding. So this is a variable 
called responding or the key value pair.  
40:36 - So as we're trying to figure out, if the 
bot should be responding or not, then  
40:44 - value will get whatever the the initial value is.  
40:54 - And let's check if it exists yet. 
If If value equals equals null,  
41:03 - that means that this is the first time the 
program has run, so it's not in the database yet.  
41:10 - Then let's set it to something set, set it to 
responding is going to equal or be set to true.  
41:23 - Now, this will only happen if the value 
goes no. So if you run the program,  
41:29 - and you've set this to false, the next time 
the program runs, it won't then be set to true,  
41:35 - it will still be saved in the database, 
even if you stop and restart the program.  
41:42 - Okay, so the whole point of that was to change 
whether it responds to the sad words or not.  
41:50 - So let's add something else 
here. dB that get responding.  
42:01 - And we're trying to see if the, if the bots 
be responding or not, then respond responding.  
42:13 - Now we're going to take this whole thing here. 
And it's going to be inside this other section,  
42:26 - and let me indent this. So now we're 
gonna check if responding is true. And  
42:37 - this is true. Alright, so be responding. There we 
go. So now we're checking with for two things to  
42:44 - be true before it sends the encouraging message. 
Okay, let's go down and we're going to add two  
42:53 - command to more commands, one of them will be to 
list all the encouraging messages. And the other  
42:58 - command will be to change the responding 
status to either true or false on or off.  
43:06 - So if message dot content dot starts 
with, if it starts with less list,  
43:21 - then we're going to list all the messages. So 
first, we have to get the messages DB dot get  
43:28 - encouragements dot then and encouragement.  
43:39 - And then actually this week 
called encouragements methods dot  
43:46 - channel dot send encouragements. So send all 
the encouragement to the channel as a message.  
43:59 - Okay, so for the next one, you 
just copy this first line here.  
44:05 - If message content that starts with and 
this time it's going to be responding.  
44:17 - So that means we're chaining the command 
is to change whether the bot is going to  
44:22 - respond or not. So let's get the value first 
value equals message dot content dot split.  
44:33 - responding with the space at the 
end, one, this is just like before,  
44:42 - and the value is either going to be 
true or false. So if value.to lowercase  
44:57 - equals equals equals True then DB that 
sec responding to true. Also message dot  
45:16 - channel dot send. Chris respond. risk. 
Oh, wait a second, Reese bonding is on  
45:30 - else. So if it's anything but true, we'll assume 
it's false. So let me just copy this here,  
45:40 - else set responding to false, and the 
message will be responding is off.  
45:50 - The code for the bot is complete.  
45:54 - We're gonna test it out one more time. And 
then I will show you how to make the bot,  
46:01 - how to set the bot to run continuously, 
or run the program and it's logged in.  
46:09 - Okay, let's just try to do a list. Let's 
see if I can add something to the list.  
46:22 - And I'll do the list again. And adds the item I 
added the item. Yes, and now it's on the list. Now  
46:31 - it's even easier to delete things. So I'm going 
to delete that was a wonderful message because  
46:35 - we don't want to respond with that if someone 
says a sad message. So I will do tell that's  
46:43 - the index two. And then I will do list  
46:50 - and oh, you know this is wrong new encouraging 
message deleted. That doesn't make sense.  
46:55 - This is just be encouraging message deleted. 
I don't know why I didn't notice that before.  
47:00 - So let's update that to encouraging. 
That's going to be new. There we go. Look  
47:07 - looks like I have a few spelling errors here. 
Okay, responding. And then down here. We have  
47:17 - responding. I don't know why I can't spell 
this. Okay, let's play that again. Hopefully  
47:26 - we don't have any errors. or run that again. Keep 
saying play because it looks like a play button.  
47:36 - And now I will list  
47:40 - and it's gone. It doesn't say that was a wonderful 
message anymore. Sad. Oh, I didn't mean it. But I  
47:48 - shouldn't put the dollar sign but it should 
still respond because it has the word sad.  
47:55 - Oh, but it's not there's no 
space before it's so let's just  
47:58 - Oh, it is responding. Nice avatar said 
you're a great person and also a great  
48:03 - singer. Now let's see if we can turn it 
off and on. So responding, false or false.  
48:15 - Responding is off. So if I type in sad, it doesn't 
respond. Now I can turn it back on responding.  
48:28 - respond, thing true. Responding 
is on. So if I type in depressed,  
48:41 - you are a great person and also a great singer.  
48:46 - It works. We've created the bot, we've tested 
it, everything works. Okay, so our bot is done.  
48:54 - But there's one more thing I want to show you, 
which is how to make the bot run continuously  
49:01 - as it is if you ever Close your eyes. So if you 
run this bot right now if I run this bot and  
49:06 - ever close my tab or close my browser, it will 
stop running. But we want to make it so it'll  
49:12 - just run in the background. So you don't even 
have to have your computer on for the discord  
49:16 - bot to be running. So there's two ways to do 
it. One way is just to click right up here.  
49:23 - And you can see it says this repple can be kept 
always on and there normally would be just a an on  
49:30 - button here to keep an eye on so just keep running 
in the background. Even if you close things  
49:35 - however you do have to upgrade. So you do have 
to upgrade to the paid plan to have this built  
49:40 - in way to keep the repple always on. So here's the 
pricing for the hacker plan that repple offers.  
49:46 - You get five rebels that are always on if you 
if you get it you also get a bunch of storage,  
49:51 - extra memory more speed, and soon you'll even 
get offline rebels and $7 a month is pretty  
49:57 - reasonable. It's just like you would pay for 
any hosting replique made this course possible  
50:01 - through a grant. And they're also offering three 
months free of this hacker plan to the first  
50:08 - 1000 people that clink that click the link in the 
description with the coupon code. But like I said,  
50:15 - there's also a way to get your rep to be always 
on for free without even signing up for this.  
50:20 - And I'm going to show you that right now. If you 
run your bot and repple it and then close the tab,  
50:25 - it's running in your bot was stopped running. 
However, there is a workaround. So the workaround  
50:30 - without having to pay anything is that replica 
will continue running a web server even after the  
50:36 - tab is closed. But even a web server will only run 
for up to an hour without any use. So to keep the  
50:44 - bot running continuously, we'll use another free 
service called uptime robot. That's the uptime  
50:51 - robot.com, it can be set up to ping the bar to 
web server on rappeler every five minutes. And  
50:56 - then with constant pings, the bot will never enter 
the sleeping stage and will just keep running. So  
51:02 - we have to do two things, we have to create the 
web server and replicate and set up uptime robot  
51:08 - to continually ping the web server. So let me 
show you how we're going to create the webserver.  
51:15 - First of all, I'm going to create a new file, 
and just click Add File and this is going to be  
51:20 - called server dot j s. Okay, and now we're going 
to be using express to create the web server.  
51:28 - Okay, so we'll do const. 
Express, equals require, Express.  
51:41 - And then we to create the server 
so const server equals Express.  
51:51 - Now that we have the server, we need 
to create a route. And the route is the  
51:56 - thing that is that's going to be pinged from 
uptime robot. So here we go, server, dot all.  
52:10 - So this creates a new route at just slash 
like just at your root domain. And it's  
52:17 - going to respond to all HTTP requests. 
That's what this all is. So like get  
52:22 - put, post, and it's just going to say it's going 
to send back bot is running. So now that we have  
52:30 - the server ready, we have to create a function 
that starts the server. So function, and we're  
52:38 - just going to be calling it keep alive because 
it's going to keep alive our replique instance.  
52:49 - Server dot, listen. We'll listen at Port 3000. 
And then we're just going to log something.  
53:05 - Whoops, to be equal sign. 
Console dot log server is ready.  
53:20 - So when this keepalive function is run, 
it's going to the server is gonna start  
53:26 - listening at Port 303,000. And it's going 
to log servers ready. And now we just have  
53:31 - to export this so we can import it and run 
it from our bot file. So module dot exports.  
53:40 - Equals keep alive. Okay, now let's make sure that 
when our bot runs, automatically runs this server.  
53:48 - So let me go into our index dot j, s. And 
then at the very top here const keep alive  
54:01 - and require. And then we're just going to 
require the server that we just created  
54:07 - server. And then down here, 
right before our client logs in,  
54:17 - keep alive. So we'll start our server 
will start that server function.  
54:23 - Okay, now let's run this and 
see if the server starts.  
54:33 - Oh, actually, we need to make keep alive, 
not keep alive ever. So let's try that again.  
54:42 - And we can tell that the server started 
because it opened up a new window here and  
54:46 - it says bot is running. So I'm going to copy 
there's a link right here which I'm going to  
54:54 - select and copy. This is our server link that 
we're going to have to put into uptime robot.  
54:59 - So let's go set this up on uptime robot to ping 
our server every five minutes. Okay, I uptime  
55:07 - robot.com. And you're either gonna have to 
register or login. And once you get logged in,  
55:14 - you'll see this dashboard and there's this 
add new monitor here. So I'm gonna click that.  
55:19 - And monitor type, this is going to be an HTTPS 
monitor. And I can just call this encouraged bot.  
55:29 - And then I'll just paste in the 
URL that I copied from our applet.  
55:34 - And then it's on every five minutes.  
55:38 - And then, if I want I can select myself to notify 
if you want to be notified when something goes  
55:45 - wrong, but you know, I'm not going to notify 
myself so I'm just going to do create monitor  
55:53 - and it's created. Now, our bot will continue 
running after a close the tab or close the window.  
56:02 - Even if my computer is turned off. The 
discord bot will still just keep running.  
56:07 - We're done we learn how to create a discord bot. 
We learn how to make it continually run. And  
56:13 - now you know enough to start customizing this 
and creating your own bot. I would recommend  
56:18 - checking out the discord.js documentation 
to learn even more commands you can add  
56:23 - Okay, you reach the end, go and create your 
own bots. But remember, use your code for good