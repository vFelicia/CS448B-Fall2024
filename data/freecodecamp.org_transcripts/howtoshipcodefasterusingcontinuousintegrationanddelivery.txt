00:02 - Hi folks my name is Alex Sharma
00:05 - I'm a developer advocate at circle CI and I am here today to talk to you about continuous integration which is a
00:12 - software development practice where everyone on the engineering team is continuously integrating these small
00:19 - code changes back into the codebase. After each change that they're making,
00:24 - there's a suite of tests that runs automatically that checks the code for any bugs or errors or anything like that
00:31 - Cool, so what does that look like in practice?
00:33 - I've drawn this beautiful flow chart up here for you.
00:36 - Step one is you make it change,
00:37 - and this is something maybe on Github you make a future branch you push it up submit a pull request,
00:43 - that's the change that I'm talking about here, okay?
00:46 - Push that up, then you run your tests automatically and that's that's pretty important
00:51 - The tests need to be run in a consistent way so that everyone on your team has full confidence that
00:56 - they're running the tests in the same way.
00:58 - You don't really have a guarantee that your machine is the same as, you know, your neighbor's machine.
01:03 - That's that's really hard to to lock down so those tests are running automatically somewhere else, if they pass,
01:11 - right, they pass: you're good to go and you can just keep making changes. Right you go right back around
01:17 - submit another pull request, go wild! If
01:20 - the tests fail you need to make sure, it's your
01:23 - responsibility to fix the code, okay? Fix the code until your tests pass, and then you can continue developing, so it's this
01:29 - wonderful cycle, the idea being that you want to catch these bugs as soon as you can,
01:35 - right? So, even if they're not lingering over a long period of time. So that's what continuous integration is and next time we'll talk about
01:43 - Why you would be doing this?
01:47 - So today, I'm going to talk about why
01:50 - continuous integration is such a good thing for you. So, you might have picked this up from last time,
01:54 - but it's just safer, right? The fact that you're running tests after each little bit of code means you're gonna catch bugs
02:01 - before they even happen. It's kind of like Minority Report for software development. Think about it that way.
02:06 - That's a movie reference. So there's fewer bugs, okay,
02:10 - and then there's this wonderful
02:11 - by product of doing proper continuous integration, and the by product is that it's it's hard to continuously integrate
02:18 - large amounts of code, right, because there's more of a chance that you'll get a merge conflict, right?
02:24 - The amount of code, if it's small, they will probably agree with each other you can integrate them,
02:29 - but if it's big then you're gonna have trouble actually doing that on a regular
02:34 - Frequency okay? So, you're moving faster, you're actually you're making smaller changes
02:40 - but you're doing them more often, and what that leads is to more features you're actually able to make an impact faster.
02:46 - You don't have to wait weeks to actually see your work out in the real world.
02:51 - As long as you're doing continuous delivery, and we'll talk about that later.
02:56 - The second thing is that you're making better decisions, right?
02:59 - Because you get your stuff out into the world faster,
03:02 - it means that you'll be able to figure out whether or not your users even like what you built.
03:07 - So, you might be able to test a theory
03:10 - more rapidly than you would if you were taking months, right, to build an entire release, and so that's kind of the whole idea is
03:17 - that this iteration speed really increases the
03:21 - quality of your code: not only is it safer, but also it better matches
03:26 - what people even want because you have a better understanding of
03:29 - what people are actually using, because of how quickly you're moving in these small increments. So, cool! I think that about does it.
03:37 - There's a from a high level. That's kind of like continuous integration is it's so exciting and nutritious to software developers.
03:47 - Look at this. I'm not even on the screen. I'm sharing my screen instead. So, today
03:52 - I'm going to show you how to set up a project from Github on circle CI, and we're gonna break a test,
03:59 - we're gonna see it pass and we're gonna move on with our lives.
04:02 - It's gonna be great. So, the first thing that you're gonna need is a project of some kind on Github.
04:08 - I've chosen, because I'm a little bit biased, Circle CI Docs.
04:12 - Super creative, I know.
04:14 - So, I forked circleci-docs,
04:17 - and we need to clone this down.
04:19 - So we'll head over here. Let's just see where we are.
04:25 - Good
04:27 - Then we'll clone in here, enter your password
04:30 - (don't tell me what it is) ...and
04:33 - wait.
04:34 - Depending on your internet speed, and
04:37 -  
04:38 - I guess the project size as well. Circle CI Docs isn't a traditional web applicationm, it's just a Jekyll blog.
04:47 - But, we do have tests, and that's really kind of what we need
04:51 - to get this going. So the one thing I am gonna show you before we head over to
04:58 - Circle CI is the config file, and
05:03 - this is where all the wonderful stuff is
05:08 - located. This is the single file where you will put the instructions to Circle C on I on how to run your build so you'll
05:15 - Put in environment variables you'd put in steps to actually check out the code
05:21 - Restore dependencies from cache if you have that you can run very specific commands
05:27 - And this is really almost infinitely customizable, and we're not actually going to focus on that today
05:33 - We've got plenty of documentation on how to set up
05:36 - Good configuration for your projects, and we've actually got some some great boilerplates, and if you're on our
05:43 - previous
05:45 - version of circle style you can actually
05:48 - Some of these configurations are actually inferred for you
05:51 - But anyway, don't worry about that all you need to know is that this is just kind of a list of instructions
05:56 - And we're gonna see the names of these steps play out
05:59 - On the actual build page when we run our tests so
06:04 - Let's let's add the project here. I'm in the circle CI app here
06:08 - I've already signed up since I work here
06:10 - But you will have to do that and you'll just have to authenticate with either github or your bitbucket account most likely
06:17 - It's github if you're following
06:19 - this video so I'm gonna add projects and
06:23 - I want to build on Linux, so let's do that and here are my my
06:28 - Repos on my account, but I want my Fork of a circle CI doc so let's hit set up project
06:34 - I want to use the new platform obviously
06:38 - super shiny
06:39 - I don't think you need to list the language, but let's just put other because it's mostly just
06:46 - Mostly just to check all things, so let's don't worry about that
06:49 - So now it wants us to it's telling us create a folder named dot circle CI and add a file config
06:54 - Yeah, well we already have that actually because I've worked it and we've written that for circle CI Docs
07:00 - That's that's already been done for us, so we don't need to do that, so let's just start building
07:05 - Right, let's just go ahead and do that and we'll save the hard work of building a configuration file for another video
07:11 - I just want to show you what this actually feels like
07:15 - to use circle CI
07:18 - So here we have the build is running
07:20 - We can see when it started so we can see how long the build is actually taking to run if you've purchased more containers
07:27 - Depending on your plan you can run things in parallel, so that's kind of nice
07:33 - And yeah, we have an estimation of the build time. This is really it's really a
07:39 - hopeful
07:40 - Stuff at the top there, so let's look at what's going on. This is all part of the test phase
07:45 - We're spinning up the environment. We're checking out the code. We're storing the cache, and you should look familiar
07:50 - because
07:51 - These are the actual steps in the configuration files, so I didn't just lie to you when I said that
07:58 - We were consuming these steps and then just performing them
08:03 - So this is going to take the longest test with HTML proofer
08:06 - And what this is doing it's going through and making sure all the links actually work
08:12 - Which is important for a doc site?
08:14 - You don't want to have broken links scattered throughout your documentation so this is our testing phase here
08:20 - And so now I'm gonna just have to talk a little bit while we wait for
08:24 - The tests to finish, but what we should see is that?
08:27 - build passes I don't expect any sort of
08:31 - Tests to be failing it actually says it's passing here, but I'm not sure whether that's inheriting the main circle CI Doc's
08:39 - build
08:41 - Or if it's if it's taking my fork, so we don't actually know so it looks like all the tests did pass though
08:47 - we've moved past the HTML poofer phase and
08:51 - Now we're uploading artifacts
08:54 - So great, and I think this is just a copy of the whole site all right cool, so
09:00 - Great, we're done. You can probably hear my fan going off, and I think that's because I'm recording my screen
09:06 - My back is angry, so this is fixed
09:08 - this is fixed because I believe it thought it was broken up until now because it's
09:14 - Inheriting all the demos I did before this so we have a green build and that's excellent
09:19 - But let's break it and see how that works
09:22 - So say you're going along you're working on some code in this case
09:27 - It's just markdown but say you say you just you removed something and you make a typo
09:34 - And what we've done here is we've broken this link so
09:37 - This link will no longer work because it doesn't have the rest of the domain name
09:43 - Included in this link so this is an incomplete link and hopefully our tests will catch that so
09:48 - We will add this change. Yep. That is what I want
09:56 - We'll commit this broke a link
10:01 - Whoops and
10:04 - Then we'll push this
10:06 - now
10:08 - I'm just pushing
10:10 - from master to master and
10:12 - Sometimes that can be dangerous in a production environment
10:16 - But a key part of continuous integration is committing and pushing everything into a mainline branch so we we have to obey that
10:24 - The rules of the game, okay, so we have just pushed this up, so now what we should see
10:29 - is
10:31 - Or wait this is gonna be anticlimactic. We don't want to see build eight
10:36 - There should be a new build starting build number nine broke a link whoops
10:42 - This is gonna be really
10:46 - Really exciting
10:49 - Because we're gonna see the tests fail
10:52 - Okay, so let's just take this time while while everything is building
10:58 - to talk about why this is is so
11:01 - so helpful so someone just made a change and
11:05 - they
11:07 - Merged it in pretty quickly right that wasn't a ton of work that we just did
11:12 - But within minutes we're gonna find out that
11:17 - master is broken and that's really important because
11:20 - Other developers who are depending on master that relying on master to actually be correct
11:26 - they won't be able to branch any new work off of a
11:31 - unstable mainline branch so this is this is kind of the crux of
11:35 - Why this is so helpful is you might have this tab open?
11:40 - Okay, see see how we broke this link so
11:45 - We we failed the tests here, and that's gonna land us with a failing build overall
11:52 - So green are steps that have finished successfully read our steps that have failed
12:00 - Cool, so it's failed
12:02 - And now we need to do what an agent one should do in this situation which is?
12:08 - fix fix the mistake fix the red-billed
12:13 - So let's actually just luckily it's in my undo buffer
12:18 - So I can cheat do that cool, so let's bring the base URL back
12:26 - Let's add this fix the link
12:33 - And
12:35 - Then let's push this back up
12:37 - So I know this this may be this seems kind of repetitive, but this is the workflow
12:41 - And in the majority of cases this is kind of the percentage of time you'll be spending with circle CI
12:47 - You can just you can see what changes actually broke
12:52 - The mainline branch and you can see what brought it back to normal, and this is really important
12:56 - this is the core part of continuous integration and the core part of
13:01 - What circle CI does?
13:03 - There's a very clear version history of one things went wrong and at what times and how long it took to build so?
13:11 - Yeah, this is the takeaway
13:14 - Within minutes, we knew that something was wrong and we were able to respond to it, and and that's that's kind of the nature of
13:22 - the
13:25 - Development animal that were wrangling here
13:28 - is
13:29 - That we want to catch these things before they become real problems
13:33 - We want to catch these small errors before they turn into big production outages, and this is how we do it
13:39 - We want to keep these times as low as possible
13:42 - So there's all these other fancy ways you can increase the speed of your build and I mentioned parallelism
13:48 - There's caching
13:49 - There's all sorts of little tricks that you can use to make sure that the builds don't take any longer than they need to
13:54 - And in fact we could probably be optimizing our own circle CI Docs
13:59 - it's unclear whether we need to upload all these right like this is this is kind of a
14:07 - Costly step right it takes it takes a big chunk of time
14:10 - So that's another thing is that you have clarity into which steps are taking longer than others
14:15 - And that can help in optimizing your build time
14:19 - so
14:20 - We're hoping right that this build past
14:24 - And it looks like it did so we we fixed it. We brought it back to normal and
14:29 - we just
14:32 - connected a project from github to circle CI and
14:36 - You should be very pleased except. I don't know if you were following along
14:40 - Hopefully you were just forking circle CI Docs as well if you had your own web application
14:44 - Then you probably got hung up this part because you don't know what to put in here necessarily
14:51 - But that's another video for another day
14:53 - And I hope this gave you kind of a good impression of what it's like to actually be using circle CI
15:01 - Along with github they work very nicely together
15:05 - And what you can actually do is get really cool buttons like those cool integrations like this I think
15:10 - If I were to make a pull request you would also be able to see whether or not the build
15:14 - Was passing the Associated build is passing and that's it? That's a really great tool?
15:19 - for future branches and pull requests, we didn't do that in this video, but
15:23 - you can kind of see how that would become a
15:26 - big part of your development workflow
15:32 - So the last thing we should talk about is the difference between
15:36 - The three types of continuous software development processes. We've spent a lot of time on continuous integration
15:43 - But these are closely related all these are very closely related
15:47 - They're often confused with each other because they aren't so closely related so just a quick recap of what?
15:52 - Continuous integration is all that is is a software development practice. Where you are
15:58 - Continuously integrating your changes into a mainline branch
16:01 - and
16:02 - The whole purpose of this is to avoid conflicts it's to avoid surprises
16:07 - By reducing the size of work that you're working on and then constantly merging those in with each other
16:13 - Continuous delivery on the other hand is making sure that your code that mainline branch that everyone is merging to is
16:20 - always in a deployable state so when
16:24 - if you remember that chart that we did at the beginning of this series that
16:28 - Was actually sort of a combination of continuous integration and continuous delivery I lied to you
16:33 - The delivery part of the continuous delivery part is the testing part so having that suite of tests running every single time you?
16:40 - Merge your code to that mainline branch
16:43 - Ensures that the branch is ready to go at any point and so that's really the only difference
16:49 - Is that you're making sure that your code is ready to deploy at any given point and often that means
16:55 - Actually deploying your code to a production like environment, so you're not actually shipping it to real users, but you are
17:02 - Mimicking the environment that will be working out of the real world
17:07 - So what's the difference between continuous delivery and deployment that continuous deployment the only difference here between continuous delivery and continuous deployment is
17:16 - instead of manually deciding what changes to sent out into the real world if
17:24 - your code passes the tests here automatically gets deployed to users, so this is a kind of a
17:30 - Risky way of doing things, but if you get to this point that means your order is truly
17:36 - embracing this DevOps culture truly embracing this continuous I
17:41 - guess lifestyle best
17:43 - So all of this is done in an effort to reduce this feedback loop between
17:47 - We want to get stuff out to users as quickly as possible so they can give us feedback on whether they like it whether they
17:53 - Don't what's working what isn't?
17:55 - So these can kind of be viewed as different steps
17:58 - the spectrum of how continuous you actually are developing, so I hope you've enjoyed this series and
18:04 - Hope you've come out a little bit more enlightened about what being continuous really is
18:09 - Thanks for watching.