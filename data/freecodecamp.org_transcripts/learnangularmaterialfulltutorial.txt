00:00 - hey guys my name is vishwas and welcome
00:03 - to a brand new tutorial series on
00:05 - angular material in this introductory
00:08 - video let's take a look at what is
00:10 - angular material the prerequisites for
00:13 - this course and also the course
00:15 - structure alright let's begin what is
00:19 - angular material angular material is a
00:22 - UI component library what that means is
00:26 - angular material provides us with
00:29 - components to build awesome user
00:31 - interfaces in QuickTime it is also an
00:35 - implementation of Google's material
00:37 - design specification just like how we
00:41 - have material UI for react beautify for
00:45 - view we have angular material for
00:48 - angular the goal here is to learn how to
00:51 - use the library components to build
00:53 - clean and elegant UI now before we get
00:57 - started let me quickly run you through
00:59 - the prerequisites as always HTML CSS and
01:04 - JavaScript go without saying in addition
01:07 - to these you also need to have a
01:09 - knowledge of angular you don't have to
01:12 - be an expert by any means but some basic
01:15 - knowledge is absolutely necessary if you
01:19 - are feeling rusty make sure to go
01:21 - through the angular tutorials on my
01:22 - channel before starting this course now
01:26 - as of this recording the current major
01:28 - version of angular and angular material
01:30 - is seven with new releases there might
01:34 - be minor tweaks but what you will learn
01:37 - in this series will still hold good so
01:39 - you can watch this entire series without
01:42 - any hesitation alright how are we going
01:46 - to proceed with this course first we
01:49 - will learn how to add angular material
01:51 - to an angular application then we will
01:55 - discuss about typography
01:56 - in angular after that we will take a
01:59 - look at the different components that
02:02 - make up the library the components fall
02:05 - under six major categories we have
02:08 - buttons and indicators navigation layout
02:12 - from controls
02:14 - pop-ups and models and finally data
02:16 - tables we will not take a detailed look
02:19 - at every single one of them but we will
02:22 - cover the important ones by the end of
02:25 - this course you will have a good
02:26 - understanding of how the individual
02:29 - angular material components work you can
02:32 - then use that knowledge to build angular
02:34 - applications that suit your requirement
02:37 - all right then let's get started in the
02:39 - next video
02:45 - in this video let's see how we can add
02:48 - angular material to an angular
02:50 - application now before I show you how to
02:53 - do that I want to tell you that for this
02:56 - course we will be closely looking at the
02:59 - documentation and that is for two
03:02 - reasons first one is to stay updated
03:05 - with the changes there will be future
03:08 - releases of angular material and it is
03:10 - safe to rely on the documentation as it
03:13 - is constantly updated the second reason
03:16 - is to know the directives that have to
03:19 - be used for the different components
03:21 - when we start writing code we need to
03:24 - import certain components and it is next
03:27 - to impossible to know the component
03:29 - names without referring to the
03:31 - documentation so make sure you have a
03:34 - tab open for the dogs while you are
03:36 - following the videos alright with that
03:39 - let's see how to add angular material to
03:42 - an angular application from the navbar I
03:46 - am going to navigate to the guides
03:48 - section of the documentation here you
03:52 - can see the getting started heading as
03:54 - well as the schematics heading both
03:57 - these sections contain information on
03:59 - how to install angular material
04:01 - depending on the version of your angular
04:04 - application the getting started section
04:07 - contains about six different steps which
04:10 - you have to go through to set up
04:12 - material in your angular application and
04:15 - this is only if your project is below
04:18 - version six for this series we will be
04:22 - working with angular version seven so I
04:25 - will demo how to add material with CLI
04:28 - schematics which is valid for angular
04:31 - version 6 and above now in the terminal
04:36 - when I run the command ng - - version
04:40 - you can see that I have angular CLI
04:43 - version seven if you are at a lower
04:46 - version please make sure to update it
04:49 - before creating a new project alright
04:52 - now what I have done is created a brand
04:55 - new project using the command
04:58 - engi new material - demo material - demo
05:03 - is the name of the project we will be
05:05 - working with and of course I have opened
05:08 - the project folder in vias code next to
05:12 - setup angular material
05:14 - make sure you navigate into the project
05:16 - folder and run the command ng had at
05:21 - angular slash material when we run the
05:26 - command it is going to ask us an option
05:28 - for the team I'm going to stick with
05:31 - indigo pink next it checks with us for
05:34 - hammer jeaious for gesture recognition I
05:37 - will simply go with yes for now next
05:41 - browser animations again yes
05:46 - and that is pretty much all you have to
05:48 - do you are ready to start using angular
05:51 - material in your application and this
05:55 - was possible because angular material is
05:57 - packaged with CLI schematics what that
06:02 - means is that the angular team provided
06:04 - us with a single command that will
06:06 - handle setting up material in your
06:09 - application let's take a look at the
06:12 - differences to see what changes were
06:14 - made by running the command first up
06:18 - angular dot JSON the only difference is
06:22 - the inclusion of a CSS file in the
06:25 - Styles array and this is the indigo pink
06:28 - theme which we opted for the next file
06:32 - is package dot JSON here you can see
06:36 - that angular cdk and angular material
06:38 - have been added to the list of
06:41 - dependencies next we also have updates
06:45 - to the package lock dot JSON file and
06:49 - then we have index dot HTML here two
06:53 - references have been added one to
06:56 - material icons and the other to Roboto
06:59 - font
07:01 - in mindo TS there is the inclusion of
07:04 - ham urges in style.css there is some CSS
07:09 - reset that has been added to the body
07:12 - tag
07:13 - finally in AB dot module OTS we are
07:17 - importing the browser animations module
07:19 - and adding it to the imports array now
07:23 - if you're doing this manually make sure
07:24 - to add it after the browser's module so
07:29 - the command basically adds project
07:31 - dependencies includes them in the module
07:33 - and sets up the style and theme for your
07:36 - angular application to test if it is
07:40 - actually working let's use materials
07:43 - button component there are three simple
07:46 - steps first step imported in app dot
07:50 - module dot TS import math button module
07:57 - from angular slash material second step
08:04 - add it to the imports array third step
08:08 - use it in the HTML so in AB dot
08:11 - component dot HTML wipe out the existing
08:14 - HTML and add a button tag with the text
08:21 - hello world but also with the directive
08:26 - mat - button now let's run the
08:30 - application in the terminal run the
08:33 - command ng serve - OH
08:41 - in the browser you can see that we have
08:43 - a button that says hello world which is
08:46 - styled with angular material let me
08:50 - change the directive to mat raised
08:53 - button
08:56 - go back to the browser and you can see
09:00 - the subtle difference the button is now
09:02 - raised so the material library is
09:06 - working perfectly fine you're probably
09:09 - thinking how would I know to use math
09:12 - button or math raised button right well
09:17 - it's pretty simple I refer to the
09:18 - documentation I can mention it is kind
09:21 - of a necessity for this particular
09:23 - course there is just no way that we can
09:27 - know what directive has to be used for
09:29 - which component this was a simple
09:33 - getting started video and that is the
09:35 - reason I used a simple button component
09:37 - without referring to the documentation
09:40 - in the upcoming videos we will be
09:43 - referring the documentation more often
09:46 - all right there you go
09:48 - angular material working in your angular
09:50 - application what we had to do was run
09:54 - the command in G and at angular slash
09:57 - material in the CLI project
10:04 - in the last video we saw how to add a
10:07 - material button component to our
10:10 - application there were three simple
10:13 - steps first step is to import it second
10:17 - step is to add it to the imports array
10:20 - and third step is to use it in the HTML
10:24 - although this is perfectly fine there is
10:28 - a better recommended approach and that
10:31 - approach is to create a separate module
10:34 - that deals with importing and exporting
10:36 - material components so in the terminal
10:40 - that is used the CLI to generate a new
10:44 - module ng G for generate m4 module for
10:49 - the by name of the module which we will
10:51 - call as material
10:55 - once the command completes you should
10:58 - have a folder called material inside the
11:01 - app folder and within the material
11:03 - folder you should have material dot
11:06 - module dot TS in this module we are only
11:10 - concerned with importing and exporting
11:13 - material components so remove common
11:16 - module
11:19 - as well as the declarations array
11:23 - instead add an exports array
11:30 - now let's move the imports from app
11:33 - module to material module so from AB dot
11:36 - module dot es remove the import
11:40 - statement and add it in material module
11:43 - make sure to remove it from the imports
11:46 - array as well next in material module
11:49 - create a constant
11:53 - material components and then include the
11:57 - map button module next add this constant
12:01 - to the imports array and the exports
12:04 - array
12:05 - finally include the material module in
12:08 - the app module in the imports are a
12:11 - material module which is going to auto
12:15 - import the material module from material
12:18 - dot module dot TS now let's restart the
12:22 - server ctrl C and then ng serve - OH
12:32 - and you can see that the raised button
12:34 - still has the same material styling so
12:39 - what we have done is extracted material
12:41 - into its own module so from the next
12:44 - video to use any component all we have
12:47 - to do is import it and add it to the
12:50 - material components array this approach
12:53 - isolates material code and also keeps
12:56 - the app module nice and clean
13:03 - in this video let's discuss about
13:06 - typography in angular material now
13:10 - typography basically deals with the
13:12 - style and appearance of text on your
13:15 - website if your website has text content
13:19 - with way too many styles or font sizes
13:22 - it kind of spoils the UI to address this
13:26 - concern angular material provides
13:29 - typography levels each level has a
13:33 - definite font size font weight and line
13:37 - height let's take a closer look at the
13:40 - different type a graffiti belts to
13:43 - create huge headers in the web page we
13:46 - can make use of the material display
13:48 - classes now there are a total of four
13:52 - display classes so let me create four
13:55 - div tags one for each display class in
13:58 - fact that we simply copy paste the code
14:01 - and then explain it so we have four dip
14:04 - tags each with a different class the
14:07 - topmost one is matte display for my
14:11 - display three two and one if we save
14:14 - this and take a look at the browser you
14:17 - can see how they appear on the web page
14:19 - display four has the largest size and
14:23 - the size decreases as we move towards
14:25 - display one when you have to really
14:28 - capture the users attention this is
14:31 - probably the way to go next we have four
14:35 - more classes that correspond to each one
14:38 - H 2 H 3 and H word tags for a section of
14:42 - your web page again let me copy pasted
14:46 - for more div tags we have the mat
14:50 - headline class which is for an h1 tag
14:53 - mat title which is equivalent to an h2
14:56 - tag subheading 2 for h3 and subheading 1
15:01 - for H 4 if you save the file and take a
15:05 - look at the browser you can see the four
15:08 - classes in action so these are also kind
15:12 - of headings but smaller compared to the
15:15 - display classes
15:16 - the display classes you probably use
15:19 - only once at the very top of your page
15:21 - and the section headings like headline
15:25 - can be used multiple times once for each
15:28 - section alright next we have body text
15:33 - and caption again let me copy paste the
15:37 - div tags so for the body content in your
15:40 - page that is for text other than
15:43 - headings you can make use of body 1 and
15:46 - if you need the text to be in bold use
15:50 - body 2 and if there is a caption use the
15:54 - caption class so Matt body 1 Matt body 2
15:59 - and Matt caption if you take a look at
16:02 - the browser you can see them in action
16:05 - body one body two which is bold text and
16:09 - then the caption and the final class we
16:14 - have is the typography class itself and
16:18 - what it does is it allows h1 to h4 tags
16:22 - to be used as you would normally
16:24 - you just have to wrap them in material
16:27 - typography class again let me quickly
16:30 - copy paste the div tags so you can see
16:33 - that we have a div tag with class matte
16:36 - typography and then within this div tag
16:39 - we can use the regular h1 to h4 tags if
16:43 - we save this and take a look at the
16:45 - browser you can see that it is exactly
16:48 - the same as headline title and
16:50 - subheading classes so this is about
16:55 - typography in angular material a set of
16:59 - classes concerned with the style and
17:02 - appearance of text in your application
17:04 - in the next video let's discuss about
17:07 - one of the most fundamental HTML
17:10 - elements which is the button element
17:12 - thank you guys for watching over to
17:14 - subscribe I'll see you guys in the next
17:16 - one
17:21 - in this video let's take a look at
17:24 - angular material buttons angular
17:27 - material buttons are basically native
17:30 - button tags or anchor tags enhanced with
17:33 - material design we had a quick look at
17:37 - material buttons in the getting started
17:39 - video now let's take a more detailed
17:42 - look to make use of material buttons we
17:47 - need to import the material button
17:49 - module so in material dot module dot TS
17:53 - import the mat button module and added
17:57 - to the material components array now
18:00 - let's go back to app component dot HTML
18:04 - to create the simplest of material
18:07 - buttons we add the mat button attribute
18:11 - so a button tag with the math button
18:16 - attribute save this and take a look at
18:19 - the browser and you can see a material
18:21 - button now let's take a look at some of
18:25 - the variants
18:29 - the first variant is a raised button the
18:33 - attribute is mat raised button
18:38 - the mix variant is a flat button the
18:41 - attribute is mat flat button
18:47 - and we also have a variant that applies
18:50 - just the outline the attribute is Matt
18:53 - strobe button
18:56 - let's save this and take a look at the
18:59 - browser the buttons are too close to
19:02 - each other so let's add some margin in
19:04 - AB dot component dot CSS
19:12 - margin-right three ram now if you go
19:16 - back to the browser you can see the
19:19 - different buttons raised flat and strode
19:27 - apart from these we also have circular
19:30 - buttons in angular material there are
19:33 - again three variants the first one is an
19:37 - icon button the attribute is mat icon
19:41 - button
19:45 - the second variant is a fab button the
19:48 - attribute is mat fab
19:53 - lastly a mini fire button with the
19:56 - attribute mat mini fab
20:01 - save the file and let's take a look at
20:04 - them in the browser so we have icon
20:07 - button which is a circular button with a
20:10 - transparent background fab button which
20:13 - is a circular button which defaults to
20:16 - accent color of your theme and the mini
20:19 - fab button which is just a smaller
20:22 - version of the fab button so these are
20:25 - the variants for circular buttons next
20:30 - let's talk about button colors when it
20:33 - comes to material there are three colors
20:36 - we talked about primary accent and
20:40 - warned colors w AR n warned to apply the
20:45 - color we make use of the color attribute
20:48 - on the button element let me copy paste
20:52 - three buttons and add the colors
20:57 - color is equal to primary
21:02 - the text is primary color is equal to
21:07 - accent
21:10 - the text is accent and finally color is
21:15 - equal to war and the text is war
21:20 - if you take a look at the browser you
21:23 - can see the button text in different
21:25 - colors primary accent and warm how the
21:31 - colors apply are based on the variant of
21:34 - the button if we were to apply the same
21:37 - colors to raised buttons for example
21:50 - you can see the difference
21:52 - primary accent and worn so based on the
21:56 - type of the button the color is added to
21:58 - the element the last thing I want to
22:01 - show is how to disable the ripple effect
22:04 - right now you can see that when I click
22:06 - on the button there is a ripple
22:09 - animation effect if you don't like it
22:12 - for some reason you can add the disable
22:15 - ripple attribute to the button element
22:17 - so on this third button which is for
22:20 - warm I am going to add
22:24 - disable Ripple if I save this and go
22:28 - back to the browser only on this button
22:31 - when I click you can see that there is
22:34 - no more ripple effect ripple effect no
22:38 - ripple effect now those were a lot of
22:41 - attributes to keep in mind so let me
22:44 - point you to the documentation go to
22:46 - material dot io and click on components
22:50 - and then scroll to the button component
22:53 - click on examples and click on the code
22:58 - icon here you pretty much have all the
23:02 - code required for you to experiment with
23:04 - material buttons and if you visit the
23:08 - API tab you can see what is the module
23:11 - that needs to be imported so angular
23:15 - material provides six variants and three
23:18 - colors that can be applied to the native
23:21 - button element buttons kind of make up a
23:24 - part of few other material elements so
23:28 - make sure you have a good knowledge of
23:29 - them with this understanding let's take
23:32 - a look at button toggle in the next
23:34 - video
23:39 - alright guess let's take a look at the
23:42 - button toggle element in this video
23:45 - button toggle is basically an element
23:48 - with the appearance of a button and can
23:51 - toggle between on and off states to get
23:55 - started we need to import Matt button
23:58 - toggle module from angular material and
24:01 - add it to the material array
24:06 - import it and add it to the material
24:10 - components array now in the HTML we can
24:14 - add Matt button toggle with the text
24:18 - toggle if you save the file and take a
24:22 - look at the browser you should see a
24:24 - toggle button click on the button a
24:27 - toggle say the on state click again and
24:29 - it toggles to the off state now you
24:33 - might want to use the state of the
24:35 - toggle button to perform some operation
24:38 - to get hold of the toggle state add a
24:41 - template reference variable and then
24:43 - access the checked properly on that
24:46 - variable
24:49 - toggle button is going to be the
24:51 - template reference variable and then
24:54 - interpolate toggle button dot checked if
24:58 - you now take a look at the browser you
25:01 - can see that the value is false click on
25:04 - the button and the value is true now the
25:08 - button checked value is false by default
25:12 - we can change that though by adding the
25:15 - checked attribute to the toggle button
25:17 - element
25:19 - if you now take a look at the browser
25:21 - you can see that the button appearance
25:24 - is that of the on state and the checked
25:27 - property value is now true we of course
25:32 - still have the ripple effect when we
25:34 - click on the button to disable it add
25:37 - the disable ripple attribute
25:44 - you can see that the ripple animation is
25:46 - now gone it is also possible to disable
25:50 - the button itself by adding the disabled
25:53 - attribute
25:57 - if I now head back to the browser and
25:59 - try clicking on the button nothing
26:02 - happens the button is disabled and
26:05 - cannot be toggled between on and off
26:08 - alright these are some of the properties
26:11 - on a button toggle element now although
26:15 - these elements can be used individually
26:16 - they are typically grouped together and
26:19 - presented as better alternatives to
26:23 - radio buttons or checkboxes for example
26:28 - let's say you have a list of front-end
26:31 - technologies let me show you how to
26:33 - display them using the button toggle
26:36 - element to create a group of button
26:39 - toggle elements we use the Matt button
26:42 - toggle group directive
26:46 - within the group we can add the
26:48 - individual button toggle elements
26:53 - angular
26:56 - react and view each of the elements need
27:01 - to have a value attribute which will
27:03 - point to the overall value of this group
27:15 - so value is equal to angular react and
27:19 - view now to access this group's value we
27:23 - need to create a template reference
27:25 - variable and assign Matt button toggle
27:28 - group
27:31 - the variable name is toggle group and to
27:34 - this we assigned Matt button toggle
27:37 - group now we can interpolate toggle
27:41 - group dot value
27:45 - to access the value of this toggle
27:48 - button group let's save this and head to
27:51 - the browser and you can see that we have
27:53 - the button group I click on the button
27:56 - and the group value is displayed angular
28:00 - react and view by default the toggle
28:05 - group behaves like radio buttons and
28:07 - only one item can be selected at a time
28:10 - if you want the behavior to be that of a
28:14 - checkbox where multiple items can be
28:16 - selected you simply need to add the
28:19 - multiple attribute to the toggle group
28:21 - element so over here I'm going to add
28:25 - multiple if you now go back to the
28:28 - browser you can see that we can select
28:31 - multiple elements and the value is now a
28:34 - comma separated list of the selections
28:38 - angular react view just angular and
28:41 - react just angular or all three
28:45 - now what we have seen is how to get hold
28:48 - of the value in the HTML you can also
28:51 - listen to change events and execute some
28:54 - code written in the component class as
28:57 - well you can also get hold of the
29:00 - template reference variable in the class
29:02 - component and perform any required
29:04 - operation I do have a small series on
29:08 - angular component interaction where I go
29:11 - in detail about using reference
29:13 - variables within the component class so
29:16 - please do take a look at that if you
29:18 - have a necessity but this is pretty much
29:22 - how you work with the button toggle
29:24 - element in angular material
29:31 - in this video let's take a look at the
29:33 - simplest way to use angular material
29:36 - icons first make sure you have a link to
29:40 - material icons in your index dot HTML
29:44 - this right here next import the mat icon
29:50 - module from angular material and add it
29:53 - to the material components array
29:56 - by including Matt icon module we can now
30:00 - use the Matt icon component so in the
30:03 - HTML
30:05 - Matt icon in between the opening and
30:09 - closing tags we need to specify text
30:12 - that corresponds to an icon but the
30:16 - question is what text do we specify the
30:20 - map icon component accepts material icon
30:23 - fonts so in the browser go to material
30:27 - dot io / tools slash icons and here you
30:31 - can see all the material fonts available
30:34 - you simply grab the text from one of the
30:37 - icons and paste it as the inner HTML to
30:41 - the matte icon tag if you now go back to
30:44 - the browser you should see the icon
30:47 - being displayed so you can select any
30:50 - icon from the list and just include the
30:53 - text in the matte icon component to add
30:56 - a color we use the color attribute with
30:59 - either primary accent or born as a value
31:03 - which is retrieved
31:05 - based on your theme so if I add color is
31:09 - equal to primary go back to the browser
31:14 - you should see the icon with the primary
31:16 - color which in our case is indigo now
31:22 - you can also use your own SVG's and
31:24 - there is a detailed explanation on how
31:26 - to use them as well so if you go to the
31:29 - material dogs components under buttons
31:33 - and indicators there is icon and over
31:37 - here there is a good amount of
31:40 - explanation on using SVG's but then
31:44 - again material font has tons of icons
31:47 - which might be more than enough
31:54 - let's take a look at material batches in
31:57 - this video if you work with bootstrap
32:00 - badges should seem familiar to you they
32:04 - are basically small status descriptors
32:06 - for UI elements for example if you have
32:10 - to display notifications for a user or
32:13 - the number of unread messages in your
32:15 - inbox badges are the way to go so let's
32:19 - see what is possible with angular
32:21 - material badges in this video
32:24 - to be able to use them we first need to
32:27 - import the badge module in material dot
32:31 - module ts import mat badge module from
32:37 - angular slash material slash badge and
32:41 - then add it to the material components
32:44 - array
32:45 - now let's create our first badge in AB
32:49 - component dot HTML I'm going to include
32:53 - a span tag with the text notifications
32:57 - to add a badge to the span tag we make
33:01 - use of the mat badge attribute
33:06 - so mad badge and this attribute is equal
33:10 - to the value you want to indicate let's
33:13 - go with five if we save this and take a
33:17 - look at the browser you should see the
33:19 - badge in action the small circular
33:22 - element on the top right of the span
33:24 - text now this is the most basic badge
33:28 - you can have let's see how to customize
33:31 - this and let's start with the position
33:35 - by default a badge is placed above and
33:39 - after the element it is associated with
33:42 - that is to the top right we can control
33:46 - the position using the Matt badge
33:49 - position attribute so back in the HTML
33:52 - I'm going to make three more copies of
33:55 - this div tag
34:01 - and I'm going to specify the Matt badge
34:03 - position attribute
34:11 - below and before
34:15 - below and after
34:20 - above and before let me also add some
34:24 - margin to the div tags to make sure that
34:26 - there is enough spacing between the
34:28 - elements so div margin 3 REMS now if you
34:36 - save the files and take a look at the
34:37 - browser you can see the different
34:40 - positions above and after below and
34:44 - before below and after above and before
34:50 - some at badge position attribute to
34:53 - control the position of the badge next
34:57 - let's talk about badge sizing we can
35:00 - specify the size using the Matt badge
35:03 - size attribute the possible values are
35:07 - small medium and large with medium being
35:11 - the default value I'm going to make
35:14 - three more copies of our notification
35:16 - badge and for the first one I'm going to
35:20 - add Mac badge size is equal to small the
35:26 - second one medium which is also the
35:28 - default and for the third one large if
35:33 - we now save the file and take a look at
35:35 - the browser you can see the badges which
35:38 - are small medium and large
35:41 - alright next we have badge coloring the
35:45 - badge background color can be set using
35:48 - the mat badge color attribute possible
35:52 - values our primary accent and born with
35:56 - primary being the default value the
36:00 - color of course is determined by the
36:01 - theme your application is using so back
36:05 - in vs code I'm going to make three more
36:07 - copies of the original notification
36:10 - badge
36:14 - for the first one I'm going to add math
36:17 - badge color is equal to primary which is
36:21 - the default for the second one it is
36:24 - going to be accent and for the third one
36:26 - it's going to be warned if we save this
36:30 - and take a look at the browser you can
36:32 - see primary accent and worn colors based
36:36 - on your theme
36:38 - now you might have noticed in all the
36:40 - notification badges the badge overlaps
36:44 - with the text the overlap lag though can
36:47 - be controlled as well we specify the
36:50 - Matt patch overlap attribute and set it
36:53 - defaults back in vs code on the last
36:56 - badge I'm going to add the attribute
37:00 - Matt batch overlap is equal to false if
37:05 - you go back to the browser you can see
37:08 - that the batch doesn't overlap with the
37:10 - text anymore
37:11 - in fact material documentation advises
37:15 - us to overlap badges for icons and not
37:19 - for text for example if you have the
37:22 - inbox icon then overlapping might be a
37:25 - good choice for text however try
37:28 - avoiding overlap as much as possible
37:32 - finally let's talk about binding values
37:35 - and also conditional rendering the value
37:38 - for a batch is usually stored in a class
37:41 - property to bind the value we simply use
37:44 - property binding so I'm going to open
37:47 - app component es and over here I'm going
37:52 - to create a new property notifications
37:56 - is equal to two and then in the HTML on
38:01 - the very first badge I'm going to have
38:04 - property binding on the mat badge
38:06 - attribute so square brackets for
38:10 - property binding and the property we
38:12 - want to bind to is notifications
38:17 - this property right here so now if we go
38:21 - back to the browser
38:22 - the very first batch now indicates - now
38:27 - sometimes you might also want to
38:28 - conditionally render based on the number
38:31 - of notifications for example when
38:33 - notifications is zero it doesn't really
38:37 - make sense to indicate that we rather
38:39 - hide the badge itself we can do that
38:43 - using mad badge hidden attribute so back
38:46 - an app component I'm going to add the
38:49 - condition property binding with mat
38:53 - badge hidden
38:56 - and this is going to be equal to the
38:59 - condition notifications is equal to zero
39:04 - now if we take a look at the browser you
39:09 - can still see the badge to go back to vs
39:13 - code change the value to zero
39:18 - and you can see that the
39:20 - is now hidden that is how you
39:23 - conditionally render a badge in angular
39:25 - material using the mad badge hidden
39:28 - attribute alright that's pretty much
39:31 - what I have about badges
39:34 - let me quickly point you to the
39:36 - documentation so go to material dot io
39:39 - components under buttons and indicators
39:43 - there is badge and if you go to the API
39:46 - tab you will know what has to be
39:49 - imported
39:55 - let's take a look at the progress
39:57 - spinner in this video first let's import
40:01 - the module Matt progress spinner module
40:05 - included in the material components
40:08 - array of this module basically provides
40:11 - us with two spinner components Matt
40:14 - progress spinner and Matt spinner the
40:18 - first one Matt progress spinner is a
40:21 - determinate spinner which has a value
40:24 - attribute that can be between zero and
40:26 - hundred so Matt progress spinner with
40:31 - the value attribute is equal to let's go
40:34 - with 40 if you take a look at the
40:37 - browser you can see a spinner that is at
40:40 - 40% value we can also specify the value
40:45 - as 0 in which case you cannot see any
40:49 - spinner at all and a value of 100 which
40:55 - shows the complete spinner you can also
40:58 - bind to the value attribute
41:00 - programmatically to indicate any
41:03 - progress that has to be conveyed to the
41:06 - user now a more common use case of the
41:09 - spinner is the indeterminate spinner or
41:12 - the spinner that never stops spinning
41:15 - for that we make use of the Matt spinner
41:18 - component
41:21 - if we now save the file and
41:23 - take a look at the browser you can see
41:25 - that we have a progress winner that
41:27 - spins indefinitely you would want to use
41:31 - this to indicate to the user that
41:33 - something is running in the background
41:35 - and the UI is busy for example if you
41:39 - are loading data it is a good idea to
41:42 - show the spinner and then hide it when
41:44 - the data has loaded
41:46 - let me mock the loading of data with a
41:50 - button click so I'm going to go back to
41:52 - AB dot component dirtiest and create a
41:55 - new property
41:57 - show spinner and initialize it to false
42:00 - I'm also going to define a method load
42:04 - data and in this method initially we are
42:08 - going to set show spinner to true this
42:13 - Dodger spinner is equal to true and then
42:16 - we use set timeout to set it back to
42:20 - false after five seconds
42:25 - so error function this dot shows spinner
42:28 - is equal defaults in the HTML let me use
42:32 - the ng if condition with show spinner
42:35 - and also create a button that calls the
42:38 - load data method
42:41 - and gif is equal to show spinner and a
42:45 - button load data
42:47 - on-click this is going to be load data
42:51 - now let's go back to the browser and
42:55 - initially you can see that the spinner
42:57 - is hidden I click on load data and the
43:01 - spinner appears this indicates to the
43:03 - user the data is being fetched and after
43:06 - five seconds the spinner disappears
43:08 - which again can indicate that the data
43:11 - has been loaded now ideally you want a
43:14 - separate component with more styling
43:17 - like an overlay and a z-index so that
43:20 - nothing else can be clicked when data is
43:23 - being loaded or even a form being
43:26 - submitted and also by default the color
43:30 - is set to primary color of the theme but
43:33 - again like other components you can set
43:35 - the color attribute to accent or warn as
43:38 - well so mad spinner color is equal to
43:42 - accent
43:46 - and now we have an accent color spinner
43:49 - so that is about the progress spinner
43:51 - now similar to the progress spinner
43:54 - there is also the progress bar indicator
43:56 - in angular material it works almost the
44:00 - same as progress spinner so I will leave
44:02 - it up to you guys to experiment and
44:05 - understand how it works well that is
44:09 - about buttons and indicators in angular
44:12 - material from the next video let's take
44:15 - a look at the different components
44:17 - related to navigation
44:23 - let's take a look at navigation
44:25 - components starting with the toolbar
44:28 - typically the toolbar displays
44:30 - information and actions relating to the
44:33 - current screen it's used for branding
44:36 - screen titles navigation and actions in
44:40 - this video though we will only focus on
44:43 - how the toolbar can be used as a navbar
44:47 - now the first step is to import the
44:50 - material toolbar module in material
44:53 - module dot TS in the import statement ad
44:57 - mat toolbar module also included in the
45:02 - material components array
45:05 - now that I think of it the re name is
45:08 - slightly misleading so I'm going to
45:10 - replace material components with the
45:13 - name just material
45:17 - all right now that we have imported the
45:19 - module we can use the component in the
45:21 - HTML so in AB component dot HTML the
45:25 - component is mat toolbar
45:31 - within the toolbar I'm going to add a
45:33 - span tag that says code evolution
45:38 - if you now save this and take a look at
45:40 - the browser you should be able to see a
45:42 - basic toolbar we can add the color to
45:46 - this toolbar using the color attribute
45:48 - the color attribute accepts either
45:51 - primary accent or worn as its value
45:54 - let's go with primary
46:00 - if you head back to the browser you
46:03 - should be able to see a primary color
46:06 - toolbar in your application now let's
46:09 - see how to convert this basic tool bar
46:12 - into a navbar anavar typically consists
46:16 - of the brand title on the left and a
46:19 - group of links on the right Mindi
46:23 - convert our span tag into a div tag
46:27 - which is going to be our brand code
46:30 - evolution I'm also going to add another
46:33 - div tag with a set of links I'm going to
46:36 - add three span tags one for home
46:41 - one for about and one for services if
46:46 - you save the file and take a look at the
46:48 - browser you can see that it doesn't
46:50 - exactly look like a navbar but all we
46:53 - need is to distribute the space in the
46:56 - toolbar in between the title and the
46:58 - links so in the CSS which is AB dot
47:02 - component dot CSS I'm going to add a
47:05 - class navbar
47:08 - and specify justify content to be space
47:12 - between let me also add some spacing
47:16 - between the span tags padding right one
47:20 - Ram finally add the nav bar class to the
47:23 - toolbar so in AB component dot HTML on
47:27 - the mat toolbar component class is equal
47:30 - to nav bar now if we take a look at the
47:34 - browser you should have a proper navbar
47:37 - brand on the left and a set of links on
47:40 - the right and the styling is completely
47:43 - up to you but a toolbar is what you need
47:47 - to use to create a nav bar in angular
47:49 - material
47:54 - in this video let's take a look at side
47:57 - nav and angular material the first step
48:01 - as always is to import the module say
48:05 - material module dot es import mat side
48:09 - nav module and add it to the material
48:11 - array now we can add the side nav to our
48:16 - application
48:18 - to set up a site now we use three
48:21 - components the first one is Matt site
48:25 - nap container which acts as a container
48:29 - to the site nav as well as the main
48:32 - content within the container we have mat
48:36 - side nav
48:38 - which represents the site content
48:43 - and then we have mapped site nap content
48:47 - which represents the main content it is
48:52 - important that the site content and the
48:55 - main content are placed within the
48:57 - container if you don't want some
49:00 - elements to be affected by this
49:02 - container for example header and footer
49:05 - you can place them outside the sitemap
49:08 - container all right if we now save the
49:11 - file and take a look at the browser the
49:14 - output is not quite what we expect
49:18 - we can see the main content for the site
49:21 - now is not seen let me tell you that
49:24 - this is the expected behavior site nav
49:28 - is always hidden by default there are a
49:32 - couple of ways to open or show the side
49:35 - nav the simplest way is to add the
49:38 - opened attribute on the mat side nav
49:41 - component
49:44 - if you now say the file and take a look
49:46 - at the browser you should be able to see
49:49 - the site now as well the UI though is
49:52 - not clear so let me add some basic
49:55 - styling back in vs code and AB dot
49:58 - component dot CSS I'm going to add mat a
50:04 - side nav container has a height of a
50:07 - hundred percent mat side nav and mat
50:11 - side nav content let's add some padding
50:15 - and finally just for the side nav I'm
50:21 - going to add a background color light
50:25 - coral and a width of 200 pixels
50:31 - if we now take a look at the browser it
50:34 - is much more clear the site now appears
50:37 - like an overlay on the main content and
50:40 - when I click outside the side nav it
50:43 - closes and we can see the main content
50:47 - now once we close it though there is no
50:50 - way to open it again
50:51 - so rather than setting the opened
50:54 - attribute like here let's bind it to a
50:59 - property which we can then control using
51:02 - a button we will be using two-way
51:05 - binding so the first step is to import
51:07 - the forms module in app module so open
51:11 - up dot module dot ES
51:16 - in Port forms module and add it to the
51:19 - imports array
51:22 - now let's go back to two-way binding an
51:25 - AB component dot es which is the
51:28 - component class I am going to create a
51:31 - new property called opened and set it to
51:35 - false next in the HTML bind the opened
51:41 - attribute to the opened property and
51:43 - create a button that will toggle the
51:46 - opened property value so for two-way
51:50 - binding we use banana in a box in tax so
51:54 - square brackets parenthesis and close it
51:57 - this is going to be equal to the
51:59 - property we just created opened next as
52:04 - part of the main content I'm going to
52:06 - add a button the text is going to be
52:10 - toggle opened and on click of this
52:13 - button so click handler we simply toggle
52:17 - the open value
52:20 - opened is equal to not off opened if you
52:24 - now say the files and take a look at the
52:26 - browser the sitemap should be initially
52:29 - hidden because we have initialized it to
52:32 - false I click on the button and the side
52:35 - nav is shown click outside the side nav
52:38 - and it automatically hides so this is
52:42 - the first method to show or hide the
52:45 - side nav before we take a look at the
52:48 - next method I want to quickly show you
52:50 - the different modes that can be applied
52:53 - to a side nav the mode for a side nav
52:57 - can be specified using the mode
52:59 - attribute on the mat side nav component
53:03 - the default mode is over mode is equal
53:08 - to over and this is the mode we have
53:11 - seen so far if you go back to the
53:14 - browser you can see that there is no
53:18 - change from what we have already seen
53:20 - the site now floats over the main
53:22 - content which is covered by a backdrop
53:26 - the second possible value for the mold
53:29 - attribute is push so I'm going to change
53:32 - over to push let's see how this works in
53:36 - the browser I click on the button the
53:41 - site map appears but this time the site
53:44 - map pushes the primary content out of
53:46 - its way covering it with a backdrop now
53:50 - the final possible mode is side so mode
53:54 - is equal to side
53:56 - in this mode the side nav appears
54:00 - side-by-side with the main content
54:02 - shrinking the main contents width to
54:05 - make space for the side nav so the three
54:09 - possible modes are over push and side
54:13 - I'm going to stick with site for the
54:16 - rest of this video now back to opening
54:19 - and closing the side nav we have seen
54:22 - the first method which is using the
54:24 - opened attribute the second way to open
54:28 - or close the side nav is by invoking the
54:31 - open or close methods on the side nav
54:34 - itself for this method I will create a
54:38 - template reference variable on the mat
54:40 - side nav component hash symbol and side
54:44 - nav now I can create two buttons that
54:48 - will call the open and close methods on
54:52 - this template reference variable button
54:56 - open on click it is going to call side
55:00 - nav dot open similarly button close on
55:08 - click side nav dot close let's save this
55:14 - file and go back to the browser I click
55:17 - on open and the side nav opens I click
55:20 - on close and the side nav closes so this
55:24 - is the second method the third method is
55:28 - to simply toggle the side nav by calling
55:32 - the toggle method this is also the
55:35 - approach you might want to take when you
55:37 - have a hamburger icon for example I will
55:41 - create another button in the main
55:43 - content and the text is going to be
55:47 - toggled
55:48 - on click of this button I simply call
55:52 - the toggle method on the side nav
55:55 - reference variable side nav dot toggle
55:59 - if I now go back to the browser click on
56:03 - the toggle button it opens I click again
56:06 - it closes so these are the three methods
56:11 - and if at all you want to perform some
56:14 - action on open or close off the side nav
56:17 - you can listen to the opened and closed
56:21 - events now back in vs code in AB
56:25 - component Diaz I am going to create a
56:28 - method called log which accepts a
56:32 - parameter called state and simply logs
56:36 - that to the console
56:39 - now in the HTML we can listen to opened
56:43 - and closed events and call our log
56:46 - method passing in the appropriate value
56:49 - so on mat side nav listen to opened
56:54 - event
56:56 - and call the log method passing in the
56:59 - string opened similarly on the closed
57:04 - event called the method passing in the
57:08 - string closed if you now head back to
57:12 - the browser open dev tools click on
57:16 - toggle you should see the message opened
57:20 - toggle again you should see the message
57:23 - closed now I am simply logging a message
57:28 - but you can perform any action that
57:30 - seems fit for your application so that
57:35 - is about the side nav in angular
57:37 - material
57:42 - all right let's take a look at menus in
57:45 - this video basically a menu displays a
57:48 - list of choices on a temporary surface
57:52 - the choices appear when users interact
57:55 - with the button action or some other
57:57 - type of control now as always the first
58:01 - step is to import the appropriate module
58:04 - so in material dot module Diaz I'm going
58:07 - to import mat menu module and add it to
58:12 - the material array
58:15 - now let's go to app component dot HTML
58:19 - and over here to create a menu we use
58:23 - the math menu component to specify the
58:29 - choices for a menu we use the button
58:31 - elements with a math menu item attribute
58:35 - button fronton is the text and we add
58:40 - the mat menu item attribute
58:46 - similarly let's also have backand as a
58:49 - menu item if you save this and take a
58:54 - look at the browser you're not going to
58:56 - see anything that is because by itself
59:00 - the Matt menu element does not render
59:03 - anything it has to be triggered from a
59:07 - UI element or programmatically so let's
59:11 - add an element to open the menu I'm
59:14 - going to add a button element and add
59:18 - the attribute mat flat button for some
59:22 - styling the text is going to be menu now
59:28 - that we have the element we need to
59:30 - associate the menu with this element and
59:34 - that is a quick two step process first
59:37 - step on the mat menu component create a
59:41 - template reference variable and assign
59:43 - to it the mat menu directive up menu is
59:48 - the variable name and assign mat menu
59:54 - second step link the button with the
59:57 - template reference variable using the
59:59 - mat menu trigger for directive so on
60:03 - this button mat menu trigger for and
60:10 - then assign the reference variable app
60:14 - menu in simple English hey there is a
60:19 - menu called
60:20 - app menu which can be triggered by this
60:22 - menu button now if we say the file and
60:26 - take a look at the browser we have the
60:29 - menu button click on the button and you
60:32 - can see the menu so this is how you
60:36 - create a basic menu next let's see how
60:40 - to create a nested menu the first step
60:43 - is to create the submenu and we are
60:46 - going to repeat the process of creating
60:48 - a menu and attaching a template
60:51 - reference variable so mat menu I'm going
60:55 - to add three menu items
60:59 - the first one is going to be angular the
61:03 - second one react and the turbulent view
61:08 - on the mat menu component I'm going to
61:12 - add the reference variable this is going
61:15 - to be called sub menu and we assigned
61:18 - the map menu directive all right we have
61:22 - created a sub menu and this is a sub
61:26 - menu for the front end choice in the
61:29 - main menu so all we have to do is add
61:33 - the trigger directive again on this item
61:39 - map menu trigger for submenu in simple
61:44 - English
61:45 - hey this front-end menu choice is going
61:48 - to trigger this submenu if we save this
61:52 - and take a look at the browser you can
61:54 - see that we have the nested menu you
61:57 - don't have to click on front-end when
62:00 - you hover on the choice the submenu is
62:02 - opened angular react and view and one of
62:06 - the useful options when it comes to a
62:08 - menu is with respect to the positioning
62:11 - of the menu we have X position and y
62:16 - position attributes so on the map menu
62:20 - component we can specify X position and
62:24 - white position X position can take
62:29 - values of before or after and Y position
62:34 - can take values of above or below let's
62:38 - go with after and above
62:43 - if you take a look at the browser click
62:47 - on menu you can see that the menu opens
62:50 - to the right so exposition is working
62:52 - fine but the menu still opens below the
62:56 - button and that is simply because there
62:59 - is no space available at the top let's
63:02 - reposition the button in the CSS file
63:06 - let me add a class
63:10 - Center margin is going to be 10 REMS
63:15 - back in the HTML let's add the class to
63:18 - the button element
63:22 - now if we go back to the browser and
63:25 - click on the element you can see that
63:29 - the menu opens to the right and to the
63:31 - top so x position and y position before
63:37 - after for exposition about and below for
63:40 - y position these attributes control the
63:43 - position of the menu now the last thing
63:47 - I want to talk about is lazy rendering
63:50 - by default the menu choices are
63:53 - initialized even before the menu is
63:56 - opened that is even before clicking on
63:59 - the menu button the choices have already
64:03 - been said for the menu we can differ
64:06 - initialization until the menu is open
64:09 - using the ng template directive and mat
64:13 - menu content attribute this allows us to
64:17 - have dynamic content as many choices
64:20 - let's see how I'm going to create a new
64:23 - menu
64:26 - Matt menu I'm going to add a reference
64:29 - variable called lazy menu and set it to
64:33 - Matt menu within the menu component we
64:37 - are going to use the ng template
64:39 - directive and within this directive we
64:43 - specify the menu items the first one is
64:48 - going to be a Settings button and the
64:50 - second one is going to be the text
64:53 - logout now what I am going to do is
64:57 - create to trigger buttons to this same
65:00 - menu button the text is going to be
65:04 - vishwas Matt menu trigger four is equal
65:08 - to lazy menu
65:10 - similarly another button that says code
65:14 - evolution and we trigger the same lazy
65:19 - menu if we now save the file and take a
65:22 - look at the browser if I click on
65:25 - Vishwas the menu is not quite opening
65:29 - and that is because we left out the Matt
65:34 - menu content attribute on the ng
65:39 - template tag so let's save the file and
65:41 - try again
65:42 - I'm going to go back to the browser
65:44 - click on Vishwas and you can see we have
65:47 - the menu click on code evolution and you
65:50 - can see that we have the same menu again
65:52 - now what we want is if I click on wish
65:56 - wasps I mean the choice to be logout
65:59 - vishwas and if I click on code evolution
66:03 - I want the menu to say logout code
66:06 - evolution basically we are looking at
66:08 - dynamic choices for that we make use of
66:12 - math menu trigger data attribute so back
66:17 - in the component HTML on the trigger
66:21 - buttons we add in an extra attribute
66:25 - this attribute is mat menu trigger data
66:32 - this is going to be equal to an object
66:36 - let's pass in a name which is vishwas
66:42 - similarly on the second trigger button
66:45 - we're going to pass in name but this
66:48 - time it is going to be code evolution
66:50 - now I've just reformatted this and we
66:53 - have the two buttons still in place one
66:56 - for vishwas and one for code evolution
67:00 - now that we have specified the data on
67:03 - the ng template tag we create a local
67:08 - variable let name is equal to name and
67:13 - in the menu choice we can now use
67:17 - interpolation with that variable double
67:21 - curly braces and name now if we go back
67:25 - to the browser
67:26 - click on vishwas it says log out vishwas
67:31 - and if I click on code evolution it says
67:34 - log out code evolution so what is
67:37 - happening is on the trigger button we
67:40 - specify the map menu trigger data
67:43 - attribute and we specify the name so we
67:46 - are saying hey I know that this button
67:48 - is a trigger for a menu but when I am
67:51 - triggering that menu let me pass some
67:54 - additional information that the menu can
67:57 - use to dynamically render some data now
68:00 - in the map menu component we use the ng
68:03 - template tag and on the ng template tag
68:06 - we specify this name variable that we
68:10 - want to access and that can be
68:12 - interpolated in the button element that
68:16 - is how we have log out vishwas let's add
68:21 - one more property so that we really
68:23 - understand how it works to the trigger
68:26 - data object I'm going to add a new
68:28 - property called hobby for vishwas the
68:32 - hobby is football and for code evolution
68:39 - the hobby is teaching now in the menu on
68:43 - the ng template tag we declare another
68:46 - variable
68:49 - let hobby is equal to hobby and now we
68:58 - can add a new menu choice and bind the
69:01 - hobby so button hobby is mind hobby and
69:09 - let me also add mad menu item if we now
69:14 - save the file and take a look at the
69:16 - browser click on the choise hobby is
69:19 - football click on code evolution hobby
69:22 - is teaching you can see that we have
69:25 - different menu choices for the two
69:27 - elements say menu with dynamic content
69:31 - all right that is about navigation and
69:35 - menus in angular material
69:37 - let me quickly point you to the
69:39 - documentation go to components go to
69:43 - navigation menu API for the module that
69:47 - you have to import and then the examples
69:49 - to take a look at some of the examples
69:52 - you can use in the next section let's
69:55 - take a look at components related to
69:57 - layouts in angular material
70:03 - angular material provides a number of
70:06 - components for laying out elements let's
70:09 - begin with the list component in this
70:11 - video first step is to import the module
70:16 - so in material module Diaz import mat
70:20 - list module and added to the material
70:23 - array now in the HTML we can create a
70:28 - basic list mat list is the component and
70:32 - this component has mat list item
70:43 - as its children if we save this and take
70:47 - a look at the browser you can see that
70:48 - we have a list of items being displayed
70:52 - now suppose you have a list where the
70:54 - list item is just a lot of text for such
70:58 - scenarios we have the dense attribute
71:01 - apply it on the mat list component and
71:05 - it will reduce the font size if you take
71:09 - a look at the browser you can see that
71:11 - the font size has been reduced the mat
71:15 - list module also provides components to
71:17 - create a navigation list the component
71:21 - is mat named list as children to this
71:26 - component you have to specify anchor
71:29 - tags with the mat list item attribute so
71:33 - anchor tag
71:35 - Matt list item attribute
71:39 - and let's just add each ref is equal to
71:42 - a hashtag I'm going to create two more
71:46 - list items
71:48 - about and services if you save the file
71:53 - and take a look at the browser you can
71:55 - see that we have a navigation list a
71:58 - good place for this would be the sitemap
72:01 - component which we learned earlier in
72:03 - the series now it is also possible to
72:06 - create multiline lists and also include
72:09 - material icons I'm going to comment this
72:13 - out and start a new list some add lists
72:17 - and within the Mathis component we are
72:21 - going to have a mat list item within the
72:26 - list item we can add a material icon
72:30 - Matt icon and let's go with home we can
72:35 - then add a heading with Matt line
72:39 - attribute after that a paragraph with a
72:44 - matte line attribute if you save this
72:47 - and take a look at the browser you can
72:49 - see that the list item has two lines one
72:53 - for heading and one for the paragraph we
72:56 - also have the icon and it looks like
72:59 - I've forgotten the attribute on Matt
73:01 - icon so let's add Matt list icon
73:06 - if we save this and take a look at the
73:08 - browser you can see that the list item
73:11 - has two lines one for heading and one
73:14 - for the paragraph we also have the icon
73:17 - to the left let me add another list item
73:21 - I'm going to copy this mat list item
73:23 - component paste it I'm going to change
73:27 - home to folder this is going to be
73:32 - heading 2 and then line to save the file
73:36 - and take a look at the browser we have
73:38 - two items in the list which contain
73:41 - multiple lines now you can see that we
73:45 - don't really have a clear distinction
73:47 - between the list items for that purpose
73:51 - angular material provides another module
73:53 - namely mat divider module so in material
73:57 - module TS let's import it then add it to
74:02 - the material array mat divider module
74:06 - now in the HTML in between the two list
74:11 - items we can add the mat divider
74:14 - component so right after the first list
74:16 - item mat divider now if we take a look
74:21 - at the browser you can see that there is
74:23 - a clear separation between the list
74:26 - items right now we have the list items
74:29 - hard-coded but typically you would use
74:31 - the mg4 directive on an array of data so
74:36 - to create lists you can use the mat list
74:40 - and mat divider modules let's take a
74:44 - look at grids in the next video
74:50 - all right let's take a look at the
74:52 - material grid list in this video the
74:56 - grid list is basically a two dimensional
74:58 - list view that arranged ourselves into
75:00 - grid-based layout now the first step is
75:04 - to import the module so in material
75:06 - Mario Diaz import mat grid list module
75:11 - and added to the material array mat grid
75:16 - list module now we can create a grid
75:19 - list the component is mat grid list and
75:24 - this component requires a calls
75:27 - attribute which specifies the number of
75:30 - columns in the grid let's go with two
75:33 - columns so calls is equal to two as
75:37 - children to this component we specify
75:40 - Matt grid tile components
75:44 - title 1 and similarly let's create three
75:48 - more also to be able to clearly see the
75:52 - grid let's add a background color to the
75:55 - tiles so in the CSS file Matt grid tile
76:01 - background color light blue now if we
76:06 - save this and take a look at the browser
76:08 - you can see the grid with two columns
76:11 - and two rows the question is how did it
76:15 - create the two rows for a grid we always
76:19 - specify the number of columns and the
76:22 - number of rows is determined by how many
76:24 - columns we want and the number of tiles
76:27 - specified since we have 4 tiles and two
76:31 - columns it can fit only two tiles in
76:34 - each row hence it creates an additional
76:37 - row to fit the next two tiles if you
76:40 - were to have five tiles there would be
76:42 - three rows so the number of rows is
76:45 - determined by some basic math of course
76:49 - you can also specify how many rows or
76:52 - columns each tile should take up that
76:56 - can be specified using the row span and
76:58 - called span attributes on tile one if I
77:02 - said row span is equal to two and take a
77:07 - look at the browser you can see that it
77:09 - takes up two rows instead of one
77:12 - similarly if I said call span is equal
77:16 - to two
77:19 - you can see that it takes up two columns
77:21 - instead of one when specifying called
77:25 - span though you need to make sure that
77:27 - it does not exceed the calls attribute
77:30 - if it does it throws an error all right
77:34 - next let's talk about the height of each
77:37 - row in the grid by default the height of
77:40 - a row is equal to the width of a column
77:44 - however you can override this using the
77:47 - row height attribute and you can specify
77:50 - one of the three values the first one is
77:54 - a straightforward value so row height is
77:57 - equal to a hundred pixels take a look at
78:02 - the browser and you can see that each
78:04 - row will be a hundred pixels tall the
78:08 - second option is to specify the row
78:10 - height as a ratio with respect to the
78:13 - column width for example row height is
78:17 - equal to 2 is to 1 this implies that the
78:22 - row height is 1/2 the column width if
78:25 - the column width is 200 pixels then the
78:28 - row height is a hundred pixels take a
78:31 - look at the browser and you can clearly
78:33 - see from each style that the height
78:36 - looks half the width the third option is
78:40 - to fit the height based on the container
78:43 - so row height is equal to fit but this
78:48 - time we also need to specify a height
78:51 - for the container so style height 200
78:55 - pixels now if we take a look at the
78:58 - browser the rows are fit into the
79:00 - container height of 200 pixels so each
79:04 - row has a height of 100 pixels if there
79:09 - were 4 rows each row would be 50 pixels
79:12 - so as to fit the total container height
79:14 - of 200 pixels all right the last
79:18 - attribute I want to discuss on a good
79:20 - list is the gutter size that is spacing
79:24 - between the tiles we can specify gutter
79:27 - size using the gutter size property
79:30 - let's go with gutter size
79:33 - is equal to 10 pixels if you save the
79:39 - file and take a look at the browser you
79:41 - should now see additional spacing
79:43 - between the different tiles
79:48 - welcome back everyone in this video
79:51 - let's take a look at expansion panels
79:53 - and accordions in angular material
79:57 - expansion panels are basically panels
80:00 - which can collapse or expand to display
80:02 - additional details in a view let's take
80:06 - a look at some examples to get started
80:09 - import matte expansion module and add it
80:13 - to the material array so in material
80:15 - module Diaz imported
80:20 - and add it to the material array now in
80:24 - the HTML let's create an expansion panel
80:28 - the component to use is matte expansion
80:31 - panel every panel must contain a panel
80:35 - header component
80:37 - it is this header which is displayed
80:41 - when the panel is collapsed a header can
80:45 - contain a title and a description we use
80:49 - math panel title
80:53 - to add the title angular fundamentals
80:56 - and mat panel description to add a short
81:02 - description for the panel total duration
81:05 - three hours if you now save the file and
81:09 - take a look at the browser we should
81:12 - have an expansion panel you can see the
81:14 - title and the description as well when I
81:18 - click on the header the panel expands
81:21 - right now the panel content is empty
81:24 - let's go back and add some text outside
81:28 - the header but within the expansion
81:30 - panel I'm going to add a paragraph this
81:35 - is the panel content add course details
81:40 - material also provides an action row
81:44 - component which I'm going to add here
81:46 - mat action row a button tag with the
81:52 - text enroll
81:55 - and Matt button attribute if you now
81:59 - take a look at the browser we have the
82:01 - panel I click on the header and we have
82:04 - the panel content a paragraph tag and
82:07 - the action row which floats the Android
82:11 - button to the right the panel details
82:14 - can be any HTML you wish to and is not
82:17 - limited to a paragraph tag but this is
82:21 - pretty much how you create a basic
82:23 - expansion panel with angular material
82:27 - next let's take a look at creating
82:29 - accordions an accordion is basically
82:32 - multiple expansion panels grouped
82:35 - together let's start off by duplicating
82:39 - the existing panel and changing the
82:41 - header and the description
82:48 - I will change the title to angular
82:51 - material
82:53 - and the total duration to two hours I
82:56 - believe the content and action row as is
83:00 - if you now take a look at the browser we
83:04 - should have two panels the two panels
83:07 - don't work independently of each other
83:10 - let's add the Matt accordion component
83:13 - to convert these panels into an
83:15 - accordion
83:17 - so back in vs code I'm going to add the
83:21 - Matt accordion component
83:24 - and the two expansion panels are
83:27 - children of this component if we now
83:32 - take a look at the browser we still have
83:35 - the two panels but this time when you
83:39 - try to expand the second panel the first
83:42 - one collapses automatically the
83:45 - accordion also adds a bit of margin
83:47 - between the panels which would otherwise
83:49 - not be present now if at all you want
83:53 - multiple panels to be shown at the same
83:55 - time you can set multi is equal to true
83:59 - on the mat accordion component
84:05 - if you take a look at the browser you
84:08 - can see that we can now expand both the
84:11 - panels at the same time and if you
84:14 - notice to the right of the panel header
84:16 - we have the toggle icon if at all for
84:20 - some reason you want to hide this simply
84:23 - add the height toggle attribute on the
84:26 - accordion hide toggle take a look at the
84:31 - browser now it is hidden now there are a
84:35 - couple of methods which could be useful
84:37 - depending on your requirement so I will
84:40 - leave them for you to explore the
84:43 - methods are pretty much like what we
84:45 - have already seen in some of the other
84:47 - components there are methods to open or
84:51 - close the panel's programmatically and
84:53 - also events to know when a panel is
84:56 - expanded or collapsed but this is pretty
85:01 - much the gist on how to create expansion
85:04 - panels and accordions with angular
85:06 - material
85:11 - the next layered component we are going
85:14 - to talk about is cards a cart is a
85:17 - container for content and actions about
85:20 - a single topic first step as always is
85:24 - to import the module so in material
85:26 - module Diaz we're going to import mat
85:30 - card module and add it to the material
85:32 - array now we can create a basic card in
85:36 - the HTML the component is Matt - card
85:41 - and I'm going to add the text basic card
85:45 - if you take a look at the browser you
85:48 - should be able to see a basic card now
85:52 - angular material provides a few
85:53 - predefined sections that can be used
85:56 - inside this mat card component let's
85:59 - take a look at them at the top we
86:02 - usually have a card title so we are
86:05 - going to add mat card title with the
86:09 - text card title after that we have the
86:14 - text content displayed using the card
86:16 - content section so mat card content and
86:21 - I'm going to add the text this is the
86:24 - card content and finally at the bottom
86:27 - we have a section for user actions for
86:31 - example
86:32 - button clicks the component is mat card
86:35 - actions component and within the tags
86:40 - I'm going to add a button that says
86:43 - login and I'm going to add mat flat
86:46 - button attribute
86:49 - now if we save this and take a look at
86:51 - the browser you can see that we have the
86:53 - title the content and the action section
86:57 - now if you want the button right aligned
87:00 - we can do so using the align attribute
87:02 - on the actions section a line is equal
87:06 - to end now take a look at the browser
87:09 - and you can see that the action section
87:12 - is right aligned and this is the basic
87:16 - idea behind cards there are a couple
87:19 - more sections with which you can truly
87:22 - build any card layout that you wish to
87:24 - so let me point you to the documentation
87:26 - in components under layout card and then
87:33 - under examples you can see a
87:35 - full-fledged application of a card it
87:39 - has a header with an avatar title
87:41 - subtitle and image content and actions
87:47 - you can also build your own cards for a
87:50 - registration form a login form pricing
87:53 - section user profiles and a lot more one
87:57 - component to fulfill a variety of
87:59 - requirements now if you want the code
88:02 - for this particular card just click on
88:05 - View source and you have the HTML
88:12 - in this video let's take a look at tabs
88:15 - in angular material tabs basically allow
88:19 - you to organize content into separate
88:21 - views where only one view can be visible
88:23 - at a given time
88:26 - now first step let's import the tabs
88:28 - module say material module TS we're
88:31 - going to import mat tabs module and add
88:34 - it to the material array
88:38 - now we can create tabs in the HTML the
88:42 - component is mat tab group
88:47 - and within the opening and closing tags
88:49 - each tab is represented using the mat
88:53 - tab component
88:58 - each tab will have a label and the
89:01 - content let's add the labels angular
89:04 - react and view
89:13 - and the content as angular content react
89:16 - content and view content
89:25 - now if you save the files and take a
89:27 - look at the browser you should see three
89:30 - tabs one each for angular react and view
89:36 - if you want to know which tab is active
89:39 - at any point of time you can use the
89:42 - selected index property so back in the
89:45 - HTML add a template reference variable
89:48 - on mat tab group
89:52 - and then we can use interpolation to
89:54 - view the property value tab Rev dot
89:59 - selected index if you take a look at the
90:02 - browser you can see that initially it
90:05 - displays 0 because index starts from 0
90:08 - click on react it changes to 1 and view
90:13 - changes to 2 now if you want to perform
90:16 - some operation when you are changing
90:18 - tabs you can listen to the selected tab
90:21 - change event so back in the HTML
90:26 - bind to selected tab change and as an
90:30 - event handler
90:31 - let's call log change and pass in the
90:36 - selected index
90:41 - in the component class I'm going to
90:44 - simply lock the index to the console
90:51 - now if you go back to the browser
90:54 - open the console and change the index
90:59 - you can see the selected index being
91:02 - logged so when the tab changes you can
91:06 - perform any operation you want to using
91:08 - the selected tab change event
91:15 - the last layout related component we are
91:18 - going to take a look at is the stepper
91:20 - component steppers basically can make
91:23 - progress through numbered steps let's
91:27 - take a look at an example
91:29 - first up import map stepper module and
91:33 - add it to the material array
91:37 - now we can create our stuffer in the
91:40 - HTML there are two types of steppers
91:44 - horizontal and vertical first let's take
91:48 - a look at the horizontal stepper and
91:50 - later on switch to the vertical stepper
91:54 - to create a horizontal stepper we use
91:57 - the mat horizontal stepper component
92:01 - within this component to specify the
92:04 - individual steps we use the mat step
92:07 - component
92:10 - for each step we specify the label using
92:13 - the label attribute and the content goes
92:17 - in between the opening and closing tags
92:20 - let's create three steps we can all
92:23 - relate to that is the checkout process
92:26 - of an e-commerce site so step one is
92:30 - going to be for shipping address
92:37 - step2 for billing address and step3 for
92:42 - placing an order if you now save the
92:46 - files and take a look at the browser you
92:48 - should be able to see the horizontal
92:50 - stepper we have three steps each step
92:53 - has a label and a numeric value
92:56 - indicating the step you can click on the
93:00 - label to navigate to the particular step
93:03 - once you navigate a widow the icon
93:06 - changes from the numeric value to the
93:08 - Edit icon
93:09 - so the stepper basically gives you an
93:12 - idea of your progress through the
93:15 - checkout process right now we are
93:18 - navigating to the different steps by
93:21 - clicking on the label however stepper
93:24 - also supports a previous and Next button
93:27 - out of the box all you have to do is
93:30 - include the map stepper previous and
93:33 - match stepper next directives so for the
93:38 - billing address step let me add both
93:40 - these buttons
93:43 - button back this is going to be Matt
93:47 - button for styling and then Matt stepper
93:50 - previous to go back one step
93:54 - similarly we have the next button
94:02 - if you now go back to the browser we
94:05 - should have these two buttons under
94:08 - billing address if I click on back we go
94:12 - back one step and if I click on next
94:16 - we go forward one step so these are the
94:22 - stepper buttons next let's talk about
94:25 - linear steps if you have noticed we can
94:28 - jump from step one to step two and then
94:32 - to step three without any restrictions
94:35 - in certain situations though you want
94:38 - the user to complete a step before they
94:41 - can proceed with the subsequent steps
94:44 - linear steppers are meant exactly for
94:47 - that to convert a regular stepper into a
94:50 - linear stepper there are two steps the
94:53 - first step is to add the linear
94:55 - attribute to the mat horizontal stepper
94:58 - component
95:00 - linear the second step is to add a
95:04 - completed attribute to the individual
95:07 - steps to each step I will add attribute
95:10 - and set it defaults
95:19 - if you now go back to the browser I
95:23 - click on billing address you can see
95:25 - that we are not navigated to step two
95:27 - step one is not completed and hence we
95:32 - cannot proceed if I change step one
95:35 - completed to true
95:39 - you can see that now we can proceed to
95:42 - step two and since step two is not
95:45 - completed we cannot proceed to step 3
95:49 - and for this example I am hard-coding
95:52 - true or false but ideally you need to
95:55 - have properly winding with this
95:57 - completed property based on your
96:01 - requirements after the user interacts
96:04 - with the step call a method that will
96:06 - update the completed property to true
96:09 - which will then allow the user to
96:11 - navigate to the next step and if at all
96:14 - you do have a step which is optional you
96:17 - can simply place the optional attribute
96:19 - on that particular step on step two I
96:22 - will add the attribute optional and now
96:27 - if you go back to the browser you can
96:30 - see that we can navigate all the way to
96:31 - step three even though we have completed
96:35 - attribute set to false for step number
96:37 - two you can also see the optional text
96:40 - being displayed for building address all
96:44 - right what we have seen is a horizontal
96:46 - stepper you can also create vertical
96:49 - steppers with angular material simply
96:52 - change mat horizontal stepper to mat
96:55 - vertical stepper
96:59 - and you can see that we have the exact
97:02 - same stepper but this time with vertical
97:05 - orientation well that is about
97:08 - components related to layout in angular
97:11 - material starting next video let's take
97:14 - a look at components related to forms
97:21 - in this video let's take a look at the
97:23 - components related to an input in
97:25 - angular material when it comes to
97:29 - controls like inputs text areas and
97:32 - select we always discuss them in
97:35 - relation to a common wrapper component
97:37 - and that is the form field component so
97:42 - when you talk about an input component
97:43 - you're effectively talking about the for
97:46 - field component and the input component
97:49 - let's take a closer look at both those
97:52 - components in this video the first step
97:55 - is to import the two concerned modules
97:58 - so in material module dot es I'm going
98:01 - to import mat form field module and mat
98:06 - input module
98:07 - make sure to add them to the material
98:09 - array as well
98:12 - now we can create our first input
98:15 - control so in AB component HTML I'm
98:20 - going to add mat form field and within
98:24 - these tags I'm going to add input with a
98:29 - matte input attribute please make note
98:32 - that every input element has to have
98:35 - this form field wrapper and to the input
98:38 - element itself we add the mat input
98:41 - attribute now if I save this and take a
98:45 - look at the browser you can see that we
98:47 - have the most basic material input
98:50 - element let's see how we can customize
98:53 - this input control first up let's see
98:56 - how to add a label to the input field so
98:59 - to add a label use the mat label
99:01 - component so within the mat form field
99:04 - opening tag mat label and let's call
99:07 - this name if you take a look at the
99:10 - browser you can see the label it behaves
99:14 - as a placeholder when there is no text
99:17 - start typing and the label floats to the
99:20 - top and this is the default behavior we
99:25 - can of course change this so on the form
99:27 - field make use of the float label
99:31 - attribute to control the behavior of the
99:33 - label
99:36 - so float label can be set to never in
99:40 - which case the label will not float and
99:44 - is hidden when you type something you
99:48 - can also set it to always
99:51 - in which case the label is floating even
99:55 - when there is no text in the input and
99:57 - you can also set it to auto which is the
100:01 - default value
100:06 - another important point is how the label
100:09 - is presented for a required form field
100:12 - so if I mark the input element as
100:15 - required
100:20 - you can see that now the label has the
100:23 - asterisk automatically appended no
100:26 - additional styling is required if you
100:29 - want to disable this behavior you can
100:32 - make use of the height required marker
100:34 - attribute on the form field so height
100:38 - required marker if I go back to the
100:42 - browser the asterisk is not present for
100:45 - a required field the next thing we can
100:48 - do with the form field is setting a hint
100:50 - label for that we make use of the matte
100:53 - hint component so within the form field
100:56 - I'm going to add matte hint and let's
101:02 - have min five characters if you take a
101:07 - look at the browser you can see that the
101:09 - hint is placed right below the input and
101:12 - by default it is left aligned we can
101:16 - right align it using the align attribute
101:18 - and setting it to a value of end so Matt
101:21 - hint a line is equal to end if you go
101:29 - back to the browser you can see that the
101:31 - hint is now right aligned next let's
101:35 - talk about appearance we can control the
101:38 - appearance of the font field using the
101:40 - appearance attribute by default the
101:43 - appearance has a value of legacy which
101:46 - is what we've seen so far so appearance
101:50 - is equal to legacy we also have an
101:55 - appearance value of standard and this is
101:58 - just an updated version with more
102:00 - consistent spacing so I'm going to copy
102:04 - pasted it and change appearance legacy
102:08 - to standard if I save this and go back
102:12 - to the browser you can see that there is
102:14 - slight difference in how the spacing is
102:17 - for the standard appearance now we have
102:22 - two more appearances fill and outline so
102:26 - this is going to be fill this is going
102:29 - to be outline the fill appearance this
102:33 - plays the form filled with a filled
102:35 - background and the outline appearance
102:37 - shows the form filled with a border all
102:40 - the way around and not just an underline
102:43 - so if I go back to the browser you can
102:45 - see that we have a filled input element
102:47 - and then we also have one which has
102:50 - border all the way around so this is
102:54 - Phil and this is appearance outline
102:57 - finally let's discuss about theming by
103:01 - default the colors reflect the primary
103:04 - color of the theme we can set the color
103:07 - attribute to accent and also warn if
103:10 - required so on the form field color is
103:15 - equal to accent and on this one color is
103:19 - equal to warn if you now take a look at
103:22 - the browser the first control is accent
103:25 - themed and the second is warning themed
103:29 - now on a side note please go through the
103:32 - documentation on how to incorporate
103:34 - other messages with form fields it
103:38 - requires a bit of knowledge on angular
103:40 - forms concepts which I will not be
103:42 - covering here but the documentation is
103:45 - pretty clear so you should be in a good
103:47 - position all right that is about the
103:51 - input control wrapped inside a form
103:54 - field component in the next video let's
103:56 - take a look at the Select control
104:03 - in this video let's take a look at the
104:06 - material select component which is a
104:08 - form control for selecting a value from
104:11 - a set of options the first step is to
104:15 - import the module so in material Model
104:18 - Ts we're going to import mat select
104:21 - module and add it to the material array
104:24 - now we can create our first material
104:27 - select component the material select
104:30 - component just like the input component
104:33 - has to be wrapped inside the form field
104:35 - component some add form field now the
104:39 - component for a select control is map
104:42 - select within the select component we
104:46 - add a label using the mat label
104:49 - component the label is going to be topic
104:54 - every option for this select control is
104:57 - specified using the mat option component
105:00 - so mat option and let's create three of
105:04 - them each option will have the inner
105:08 - text which the user can see and a value
105:12 - which is sent to the server so we are
105:15 - going to have angular react and view all
105:19 - entitled case which can be seen in the
105:22 - browser and the same all in lower case
105:26 - as the corresponding value which will be
105:28 - sent to the server so mat option value
105:32 - is equal to angular value is equal to
105:36 - react and value is equal to view so we
105:40 - have the label and the three options and
105:43 - there is the small correction the label
105:46 - has to be outside the mat select
105:48 - component so the label goes inside mat
105:52 - form field if we save this and take a
105:55 - look at the browser you can see that we
105:58 - have a basic material select control the
106:02 - label is shown by default and when you
106:05 - select a value the label floats to the
106:07 - top now we have already discussed the
106:11 - features of the form field component
106:13 - about labels
106:15 - hence appearance and theming so I'm not
106:19 - going to demo them again in this video
106:22 - instead we're going to focus only on the
106:25 - Select component the first thing you
106:27 - might want to do is track the value of
106:30 - the select control and that can easily
106:33 - be done using two-way binding so back in
106:37 - vs code in the component class create a
106:41 - new property called selected value this
106:45 - is of type string next in the HTML we
106:50 - two-way bind to that property so on mat
106:53 - select we're going to add to a binding
106:56 - so banana in a box value is what we bind
107:00 - to this is going to be equal to selected
107:04 - value to view the value in the browser
107:07 - let's interpolate it now if we take a
107:10 - look at the browser we don't have a
107:13 - value displayed select a topic and its
107:17 - corresponding value is displayed the
107:20 - value displayed reflects the value
107:22 - attribute in the HTML
107:25 - sometimes you might want an option to
107:28 - clear out the selected value in such a
107:31 - scenario use an option with no value
107:34 - attribute so we are going to add another
107:37 - option Matt option and the text is going
107:41 - to be none and there is no value
107:43 - attribute so now if you go back to the
107:45 - browser select a value and the value is
107:49 - displayed select none and the value is
107:53 - reset the next feature possible with
107:56 - material select is grouping related
107:59 - options under a particular subheading
108:01 - and for that we make use of the material
108:04 - option group component so back in vs
108:07 - code I'm going to replace the existing
108:10 - options with a set of options that are
108:14 - saved in my clipboard so what we now
108:16 - have is Matt option for none and then we
108:21 - have Matt option group component with a
108:24 - particular label and this is the label
108:26 - that groups these three Matt option
108:30 - components so angular react view will be
108:33 - displayed under a label of web and
108:36 - similarly ionic and react native will be
108:40 - displayed under the category label of
108:42 - mobile if we save this and take a look
108:46 - at the browser you can see that we now
108:49 - have the topics grouped under sub
108:51 - heading we have none we have web which
108:55 - cannot be selected and then we have the
108:57 - options under web angular react and view
109:00 - similarly we have mobile which is the
109:02 - label that can't be selected and under
109:05 - mobile we have ionic and react native so
109:09 - that is about grouping together the
109:11 - options and it is also possible to
109:14 - although multiple selections all we have
109:17 - to do is add the multiple attribute on
109:20 - the select component so on Matt select
109:22 - add multiple now if you take a look at
109:26 - the browser the options turn into
109:29 - checkboxes and you can toggle selection
109:32 - on multiple options so we now have
109:35 - angular and react and the corresponding
109:37 - value is
109:38 - displayed all right those are some of
109:42 - the properties of angular materials
109:44 - select component and the reason I call
109:48 - the options line by line and not use an
109:51 - mg for directive is simply because ng 4
109:55 - is not an angular material concept I
109:58 - want to help you understand the
110:00 - possibilities with angular material and
110:02 - how you want to use it or improve it is
110:05 - completely up to you so in the next
110:08 - video let's take a look at autocomplete
110:10 - in angular material
110:16 - in this video let's take a look at
110:18 - autocomplete in angular material step
110:22 - one as always is to import the
110:24 - appropriate module say material dot
110:27 - module dot es we import Matt
110:30 - autocomplete module and add it to the
110:34 - material array now we can create our
110:37 - first order complete let's go back to
110:40 - the HTML and start off with a form tag
110:45 - within the form tag Matt formfield an
110:49 - input element type is equal to text and
110:55 - add the Matt input attribute if you save
110:59 - this and take a look at the browser we
111:03 - should have a basic input element the
111:06 - next step is to create a list of options
111:09 - the need to be displayed as autocomplete
111:11 - options so in the component class I'm
111:15 - going to add three options
111:25 - angular react and view the next step is
111:29 - to make use of the autocomplete
111:32 - component to display this list of
111:34 - options the component for autocomplete
111:38 - is matte autocomplete so right after the
111:42 - input element matte or a complete to
111:48 - specify the options we use the matte
111:50 - option component and to iterate over the
111:56 - list of options we will be using the mg4
111:59 - directive so on map option ng for is
112:04 - equal to
112:07 - let option of options we are also going
112:11 - to have property binding to value this
112:14 - is going to be equal to option which is
112:18 - from the current iteration and we are
112:21 - going to display the option so basically
112:25 - the value and what we display is going
112:27 - to be angular react or view all right
112:32 - now we have an input element and an
112:34 - autocomplete with options the final step
112:38 - is to link the two together on the order
112:41 - complete component we add a reference
112:44 - variable and assign to it Matt
112:49 - autocomplete on the input element we add
112:54 - the Matt order complete property and
112:57 - bind it with the reference variable so
113:00 - this is going to be equal to auto this
113:05 - right here if you now save the files and
113:08 - take a look at the browser I click on
113:10 - the input element and we get the list of
113:13 - options angular react and view click on
113:17 - an option and it fills the value for us
113:21 - so we have a basic autocomplete up and
113:24 - running now it's also quite possible
113:27 - that your list of options is not simply
113:31 - an area of strings instead it could very
113:35 - well be an area of objects for example
113:38 - an array of four objects which has key
113:41 - value pairs so copy-pasted a new array
113:45 - called object options which is an array
113:48 - of four objects each of the objects have
113:52 - name angular angular material react and
113:55 - view now to display the options
113:59 - correctly in the HTML we interpolate
114:02 - option
114:03 - dot name name is a property in each of
114:07 - these objects
114:09 - and of course make sure to iterate over
114:12 - object options now if we now save the
114:17 - file and take a look at the browser the
114:20 - options are displayed correctly but when
114:23 - you select an option the autocomplete
114:26 - doesn't display that value properly to
114:31 - let the autocomplete know that it has to
114:33 - use the name property to display as
114:35 - value you can specify a display function
114:39 - so back in the component class I'm going
114:43 - to define the display function display
114:47 - function the function gets each object
114:49 - as a parameter I'm going to call the
114:52 - parameter as subject and if at all there
114:56 - is a subject we return subject dot name
115:00 - else undefined now in the HTML on the
115:07 - autocomplete component we add the
115:11 - display width directive and assign the
115:15 - function
115:17 - if you now take a look at the browser
115:20 - the order complete works as expected
115:23 - the display value is angular but the
115:26 - selected value from the autocomplete
115:27 - would be the entire object now this is
115:32 - great but what you might be looking for
115:35 - is the filter autocomplete as you start
115:38 - typing in the text the options are
115:41 - narrowed down now this is where things
115:44 - start to get a little complicated to be
115:48 - able to implement a filtered or to
115:50 - complete you need to have a decent
115:52 - knowledge of angular forms angular forms
115:56 - is out of scope for this series but you
115:59 - can find the complete series on angular
116:01 - forms on my channel if you feel lost
116:04 - please go through that series and then
116:06 - try to understand how a filtered
116:09 - autocomplete works all right the first
116:12 - step is to import reactive forms module
116:15 - and add it to the imports array so in AB
116:18 - dot module dot ES import reactive forms
116:23 - module from angular slash forms and add
116:28 - it to the imports array
116:32 - step to create a form control and link
116:35 - it to the input element so in AB
116:38 - component or TS which is the class
116:40 - component we're going to import form
116:44 - control from angular slash forms and
116:46 - create a new form control so in the
116:49 - class my control is equal to new form
116:54 - control and on the input element form
116:59 - control is going to be equal to my
117:03 - control so we created the form control
117:07 - and linked it to the input element third
117:10 - step we use the help of rxjs to create a
117:14 - filtered list of options so nap
117:17 - component or TS begin by making the
117:20 - necessary imports we need observable
117:23 - from rxjs
117:24 - and map and start with operators from
117:27 - rxjs next we need a new property this is
117:33 - going to be filtered options this is
117:37 - going to be an observable of an array of
117:40 - strings next we need to implement the ng
117:46 - on in it
117:47 - lifecycle hook so from angular slash
117:50 - core we're going to import on in it an
117:55 - app component is going to implement
117:59 - on in it and we can now define the
118:04 - lifecycle hook so ng on in it and within
118:08 - this method we are going to have this
118:11 - dot filtered options equal to this dot
118:16 - my control dot value changes dot pipe
118:23 - start with anything and then map
118:33 - accepting the value this dot filter out
118:38 - the options based on the value then we
118:44 - can define the filter function so
118:47 - private filter is going to accept a
118:50 - value of type string and return an array
118:55 - of strings over here I'm going to have
119:00 - Const filter value is equal to value dot
119:03 - to lowercase and then return this dot
119:10 - options dot filter is going to accept an
119:17 - option and check if option dot to
119:23 - lowercase dot includes the filter value
119:32 - so what is happening here is that
119:34 - whenever the input value changes this
119:39 - code right here is called and in the
119:43 - filter method we accept the filter text
119:47 - and check if the option includes that
119:50 - filter text if it does it returns true
119:54 - and gets displayed if not the option is
119:57 - hidden in the order complete the final
120:00 - step is to iterate over this filtered
120:03 - options in the HTML with the async pipe
120:06 - so ng for let option of filtered options
120:11 - with the ACE
120:12 - pipe
120:14 - and of course this needs to be just
120:17 - option if we now take a look at the
120:20 - browser we should have a working filter
120:23 - autocomplete
120:28 - again if it seemed a bit hard to
120:31 - understand please to make sure you go
120:33 - through the concepts in angular and then
120:35 - revisit this video
120:41 - angular material checkboxes and radio
120:43 - buttons behave exactly the same as
120:46 - native checkboxes and radio buttons the
120:49 - only difference is the styling and
120:52 - animations that are part of the material
120:54 - library let's begin with checkboxes the
120:59 - first step is to import the module same
121:01 - material module Diaz import Matt
121:05 - checkbox module and add it to the
121:07 - material array now we can add a material
121:12 - checkbox in the HTML the component for a
121:16 - checkbox is Matt checkbox and the
121:20 - content between the tags is treated as
121:23 - the checkbox label if we save this and
121:27 - take a look at the browser you can see
121:30 - that we have a checkbox which behaves
121:32 - exactly like a regular checkbox but this
121:35 - time we have the addition of styling and
121:38 - animation by default the label is
121:41 - positioned to the right of the checkbox
121:43 - but we can position it to the left using
121:46 - the label position attribute so back in
121:49 - the HTML I'm going to duplicate this and
121:53 - set label position
121:58 - it's equal to before also going to add a
122:03 - break tag now save this and take a look
122:07 - at the browser and you can see that the
122:09 - label is on the left hand side also if
122:13 - you can notice by default the theme or
122:16 - color of check box is the accent color
122:19 - you can change it to primary or warn
122:22 - using the color attribute so I'm going
122:25 - to create two more checkboxes
122:30 - on the first one I'm going to set color
122:32 - is equal to primary and on the second
122:36 - one color is equal to warn now back in
122:40 - the browser you can see that the first
122:42 - two checkboxes have an accent team the
122:45 - third checkbox has a primary team and
122:48 - the last checkbox has a warranty and
122:51 - that is all there is to customize the
122:54 - check box in angular material native
122:57 - check box with styling and animations
123:01 - now let's take a look at angular
123:03 - material radio buttons again
123:06 - they're basically media radio buttons
123:08 - with material styling and animations as
123:12 - always the first step is to import the
123:14 - module so in material module tortillas
123:17 - we are going to import mat radio module
123:20 - and also add it to the material array
123:24 - now we can add radio buttons in the HTML
123:28 - there are two main components that we
123:30 - deal with radio group and radio button
123:34 - radio buttons are usually placed inside
123:37 - the radio group component so start off
123:39 - with matte radio group
123:42 - and within the radio group we add the
123:45 - radio buttons Matt radio button I'm
123:49 - going to make two more copies of this
123:51 - the first one value is going to be
123:53 - angular label is angular second one is
124:00 - react and finally view now if we save
124:05 - this and take a look at the browser you
124:07 - can see the three radio buttons angular
124:09 - react and view again by default the
124:13 - color of the radio button is set to
124:15 - accent color of the theme you can change
124:18 - it using the color attribute for the
124:20 - first radio button I'm going to add
124:22 - color is equal to primary and for the
124:27 - third button color is equal to warn now
124:31 - if we take a look at the browser the
124:34 - first one has a primary color the second
124:36 - one by default has an accent color and
124:39 - the third one has the warrant color
124:42 - alright that is pretty much about radio
124:45 - buttons in angular material now if you
124:48 - want to access the value of either the
124:50 - checkbox or the radio buttons you can do
124:53 - it with two-way binding make sure to
124:55 - import the forms module and use the
124:57 - banana in a boxing tags for two-way
124:59 - binding for a detailed explanation
125:02 - please go through the angular forms
125:05 - tutorial on my channel you will find
125:07 - everything there is to know about form
125:10 - controls in that series in the next
125:13 - video let's discuss about the date
125:15 - picker in angular material
125:20 - in this video let's take a look at the
125:23 - date picker component in angular
125:25 - material to start off in material dot
125:28 - module dot es we need to import Matt
125:32 - date picker module and Matt native date
125:37 - module from angular slash material after
125:41 - importing add them to the material array
125:45 - now we can create our first date picker
125:49 - a Deepika is basically composed of a
125:53 - text input and a calendar pop-up in the
125:58 - HTML we are going to start off with a
126:00 - form field so mat form field and within
126:05 - the form field component add an input
126:07 - element with math input attribute
126:11 - for this input element we are going to
126:14 - attach an icon which will open the
126:17 - calendar pop-up the component for the
126:21 - icon is Matt date picker toggle and we
126:28 - will add the Matt suffix attribute now
126:33 - that we have the input and a date picker
126:35 - toggle we now need the actual date
126:38 - picker component the component to use is
126:41 - Matt date picker and now the final step
126:47 - is to link all the three together on the
126:51 - date picker create a reference variable
126:54 - my date picker on the input element add
126:59 - the Matt date picker property and bind
127:03 - it with the reference variable my date
127:07 - picker finally on the date picker toggle
127:12 - add the fault property and bind to the
127:17 - reference variable again my date picker
127:21 - if we now save the files and take a look
127:24 - at the browser we should have an input
127:28 - element suffixed with an icon when you
127:32 - click on the icon a calendar pops up
127:35 - with today's date selected when you
127:39 - click on the date the value is saved to
127:42 - the input element you can also go back
127:45 - and forth between different months or
127:50 - also directly jump to a particular year
127:55 - you can even enter a date in the input
127:58 - element let's go with April 6th 2019 and
128:06 - you can see that the date is selected so
128:10 - this is a basic date picker in angular
128:13 - material now let's take a look at the
128:16 - different configurations possible for
128:18 - this date picker the first one is
128:22 - regarding the starting view of the
128:24 - calendar by default it will open the
128:29 - month view we can change it using the
128:32 - start view property so on the map date
128:35 - picker component start view and you can
128:41 - set this to year in which case it
128:44 - displays the months of the year for you
128:47 - can also set it to multi-year
128:53 - in which case it displays multiple years
128:57 - another typical requirement when working
129:00 - with date pickers is setting a minimum
129:02 - and maximum date that the user can
129:05 - select we can easily do that with the
129:08 - min and Max properties going to remove
129:12 - this start view property and in the
129:16 - component class I will create two date
129:19 - objects min date is today's date and Max
129:24 - date is 2019 3:10 the parameters are
129:29 - year month and date also please make a
129:34 - note that the month starts from 0 so we
129:37 - have the max date set to April 10th 2019
129:42 - now that we have the min and Max dates
129:45 - we can bind it to the input component on
129:48 - the min and Max properties so on an
129:51 - input element min is going to be equal
129:55 - to min date and Max is going to be equal
130:02 - to max date if you now take a look at
130:05 - the calendar
130:08 - you should be allowed to select dates
130:10 - starting from today's date till April
130:13 - 10th you will not be able to select any
130:17 - other dates now another requirement
130:21 - sometimes is when you have to filter out
130:23 - certain dates for example let's say a
130:26 - user should not be able to pick
130:28 - Saturdays and Sundays you can do that
130:32 - while using the Matt day picker filter
130:35 - property of the date picker input so in
130:38 - the component class you will need to
130:40 - create a filter function date filter is
130:44 - going to accept date and then we are
130:48 - going to create Const day is equal to
130:51 - date dot get day to extract just the day
130:56 - and then we return day is not equal to
131:00 - zero and day is not equal to six we are
131:08 - basically preventing Saturdays and
131:10 - Sundays from being selected now in the
131:13 - HTML on the input element I'm going to
131:16 - remove min and Max and said Matt date
131:22 - picker filter is equal to our function
131:27 - date filter if we now go back to the
131:30 - calendar you can see that all the
131:34 - Saturdays and Sundays are disabled you
131:37 - can select only the weekdays
131:40 - all right that is pretty much the basics
131:44 - of date picker in angular material
131:51 - let's take a look at tool tips in this
131:54 - video to get started let's import the
131:57 - tool tip module so in material module
132:00 - Diaz import math tool tip module and add
132:04 - it to the material array next in the
132:07 - HTML let's create a simple button and
132:10 - then associate a tooltip with that
132:12 - button
132:15 - button the text is going to be hello we
132:18 - are going to add Matt rais'd
132:20 - button as an attribute for styling and
132:23 - then for the tooltip we add Matt tooltip
132:28 - this is going to be equal to welcome to
132:32 - code evolution if we save this and take
132:35 - a look at the browser you can see that
132:38 - when I hover on the button we get the
132:41 - tooltip welcome to code evolution and by
132:45 - default the position of the tool tip is
132:47 - to the bottom of the element that is
132:50 - below the element the position can be
132:53 - controlled using the Matt tooltip
132:55 - position attribute you can specify
132:59 - before/after above or below let's go
133:04 - with Matt tooltip position is equal to
133:09 - after if you save this and go back to
133:14 - the browser you can see that the tooltip
133:17 - is placed after the button element now
133:21 - if there is no space the tooltip is
133:24 - placed in the opposite direction for
133:27 - example if I specify above
133:31 - in the browser there is no room for the
133:34 - tooltip to be placed above so the
133:36 - tooltip is placed below and if I specify
133:40 - before there is no space to the left so
133:45 - it would be placed after which is to the
133:48 - right it is also possible to add delays
133:52 - for showing and hiding the tooltip
133:54 - sometimes the user might be just moving
133:57 - their Mouse around and you don't want
133:59 - the tooltip to pop up so adding a delay
134:03 - really helps in those situations we make
134:06 - use of show delay and hi delay
134:09 - attributes let's add a two-second delay
134:12 - Matt tooltip show delay is equal to 2
134:17 - seconds and Matt tooltip height delay is
134:25 - equal to 2 seconds now if you go back to
134:30 - the browser there should be a delay in
134:32 - the show and height of the tooltip so
134:36 - hover on the button 1 2 and it shows up
134:39 - move your mouse away 1 2 and it is
134:43 - hidden again typically a show delay of
134:47 - 600 milliseconds should be good you
134:51 - wouldn't really need a high delay but
134:53 - again it completely depends on your
134:55 - requirement so that is about tooltips in
135:00 - angular material let's take a look at
135:02 - snack bar in the next video
135:09 - in this video let's take a look at snack
135:11 - bars and angular material snack bars are
135:15 - basically like notifications that inform
135:18 - users of some operation that has been
135:20 - performed they appear for a short
135:23 - duration at the bottom of the screen and
135:26 - they don't require user input to
135:28 - disappear and at any point in time only
135:32 - one snack bar notification may be
135:34 - displayed let's begin by importing the
135:38 - module so in material dot module dot es
135:40 - import mat snack bar module and added to
135:45 - the material array now in our HTML let's
135:49 - add a button that will open the snack
135:51 - bar so button add the mat button
135:56 - attribute and handle the click event on
136:03 - click we will call a method called
136:05 - open snack bar passing in a string item
136:11 - deleted as argument the button text is
136:16 - going to be show snack bar so we now
136:21 - have a button that called the open snack
136:23 - bar method let's go to the class
136:25 - component and define that method to open
136:30 - a snack bar we need to make use of a
136:32 - service and that service is mat snack
136:36 - bar from angular slash material so go
136:39 - ahead and import it and once you import
136:42 - it inject it in the constructor
136:45 - constructor private snack bar of type
136:51 - mat snack bar now we can define the open
136:56 - snack bar method which will actually
136:58 - open the snack bar so open snack bar
137:02 - accepts a message and within the body we
137:06 - use the service instance and call the
137:09 - open method passing in the message so
137:12 - the service instance is this dot snack
137:15 - bar and we call open passing in the
137:20 - such
137:21 - if we now save all the files and take a
137:24 - look at the browser we should have a
137:26 - button and when I click on the button
137:28 - the snack bar should pop up at the
137:31 - bottom of the screen with the message
137:32 - item deleted so we have a basic snack
137:37 - bar working as expected
137:39 - apart from the message we can also
137:41 - specify an action for a snack bar the
137:45 - action is specified as the second
137:47 - argument to the open method on the
137:50 - service instance to keep the open snack
137:53 - bar method more generic I will pass the
137:56 - action parameter as well from the click
137:59 - handler so in the HTML the second
138:02 - parameter is going to be the string
138:03 - dismiss in the component class the
138:08 - method will now take a second parameter
138:10 - which is action and the same is passed
138:15 - to the open method
138:17 - if you now take a look at the browser
138:20 - click on the button a snack bar opens
138:23 - and you can see the message item deleted
138:25 - and the action dismiss when I click on
138:30 - this action by default it closes the
138:33 - snack bar a typical use case for this
138:36 - type of snack bar is usually to undo an
138:39 - operation for example let me rename the
138:44 - button to delete
138:48 - and the action to undo but when the user
138:54 - does click on this action we want to
138:57 - execute some code that will undo the
138:59 - operation the way we are alerted when
139:03 - the snack bar is dismissed or the action
139:06 - is clicked is by using observables so in
139:11 - the component class we are going to
139:13 - start off by storing a reference to the
139:16 - snack bar that has been opened select
139:21 - snack bar F is equal to this dot snack
139:25 - bar dot open now using this reference we
139:29 - can subscribe to the after dismissed or
139:33 - on action observables so the first one
139:38 - is after dismissed it's a snack bar
139:41 - sorry
139:42 - snack bar F dot after dismissed dot
139:46 - subscribe and we are going to basically
139:52 - log the statement the snack bar
139:56 - was dismissed similarly we also have
140:02 - snack bar F dot on action dot subscribe
140:09 - and over here we are going to log the
140:13 - statement the slack bar action was
140:17 - triggered if we now go back to the
140:21 - browser and open dev tools click on the
140:26 - delete button and click on the action we
140:31 - can see the log statements in the
140:33 - console action was clicked and the snack
140:37 - bar was dismissed I just have console
140:41 - log statements but you can have the code
140:43 - to undo the deletion so we have the
140:47 - message and the action which are passed
140:50 - to the open method there is also a third
140:53 - parameter which accepts some
140:56 - configuration the one which would be
140:59 - used mostly is the duration property the
141:02 - Burien property indicates the length of
141:05 - time in milliseconds to wait before
141:08 - automatically dismissing the snack bar I
141:11 - will add an object with the property
141:14 - duration and set it to 2000 which is two
141:18 - seconds
141:18 - say comma and object duration set to two
141:24 - seconds if you now go back to the
141:27 - browser click on the button the snack
141:32 - bar pops up but
141:34 - after two seconds it automatically
141:36 - dismisses and in the console you can see
141:39 - the log statement so the after dismissed
141:42 - part of the code was executed when the
141:47 - snack bar was dismissed so when you have
141:49 - an action you can use the on action
141:52 - observable and when you don't have an
141:54 - action but want to execute some code
141:56 - when the snack bar is dismissed place
141:59 - that code and the after dismissed
142:01 - observable the last point to discuss is
142:05 - about the open from component method as
142:08 - the name indicates the open from
142:11 - component method creates and opens a
142:14 - snag bar with a custom component for the
142:17 - content let's take a look at an example
142:20 - in the existing component class which is
142:23 - AB component dot tias I'm going to
142:26 - quickly copy paste another component
142:31 - now you could create the component in a
142:33 - separate folder but for simplicity I
142:36 - have it right here as you can see the
142:39 - template is a span tag with color set to
142:43 - orange now in the app module I will add
142:48 - the component in the declarations array
142:50 - and add to another property called entry
142:55 - components
143:00 - all right now that we have a component
143:02 - to display as custom content let's add a
143:06 - button and a click handler to open the
143:08 - snack bar so in the HTML
143:13 - button mat button click handler is going
143:19 - to be open custom snag bar the text is
143:23 - going to be show custom snag bar and in
143:27 - the component class we're going to
143:30 - define open custom snack bar and this is
143:37 - basically going to be this dot snag bar
143:40 - dot open from component we pass in the
143:44 - custom component as its first argument
143:47 - and then we pass in duration of two
143:53 - seconds if you now go back to the
143:56 - browser and click on show custom snack
144:00 - bar we should have our orange colored
144:03 - notification custom snack bar
144:11 - alright guys in this video we are going
144:14 - to take a look at dialogues in angular
144:16 - material a dialogue is a type of modal
144:19 - window that appears in front of the app
144:22 - content to provide information or ask
144:25 - for information the usage of a dialog is
144:30 - very similar to that of the snack bar
144:32 - component we looked at in the last video
144:35 - so this video should be pretty
144:37 - straightforward if you've understood how
144:39 - a snack bar works alright let's get
144:43 - started first step import mat dialogue
144:46 - module
144:49 - and add it to the material array next in
144:53 - the HTML create a button that can open
144:57 - the dialogue so button add the attribute
145:02 - mat rais'd button add a click handler
145:09 - which is open dialogue and then the
145:14 - button text is going to be open dialogue
145:18 - now let's define the open dialogue
145:21 - method
145:24 - to be able to actually open the dialogue
145:27 - we need the Matt dialog service so
145:30 - import Matt dialog from angular slash
145:33 - material after importing we need to
145:37 - inject it
145:38 - so constructor let's go with public
145:42 - dialog of type Matt dialog and then we
145:48 - can define the open dialogue method
145:51 - within the body we are going to have
145:54 - this dot dialogue dot open and the open
146:00 - method on dialogue accepts two
146:02 - parameters the first parameter is a
146:06 - component and the second parameter is
146:08 - optional configuration to pass in a
146:12 - component parameter let's first create
146:15 - it so in the terminal we use angular CLI
146:19 - and run the command ng G for generate C
146:25 - for component and the name of the
146:27 - component which is going to be dialogue
146:29 - - example and I'm also going to skip the
146:33 - test files the command creates a folder
146:37 - for the component and adds it to the app
146:40 - module but a component that is used for
146:43 - a dialogue also has to be included in
146:46 - the entry components array so over here
146:50 - dialog example component now we can pass
146:54 - this component as our parameter so nav
146:57 - dot component es this dot dialogue dot
147:00 - open and the first parameter is going to
147:04 - be dialog example component
147:07 - all right let's go back to the browser
147:09 - and test this out if I click on the
147:13 - button a dialog pops up with the content
147:17 - dialog example works and this is the
147:20 - HTML corresponding to our dialog example
147:24 - component right now we just have a
147:28 - paragraph tag but there are several
147:30 - directives meant specifically to
147:33 - structure the dialogue content let's use
147:36 - them instead so envious code I'm going
147:38 - to open the file dialog example dot HTML
147:42 - and first we specify a dialogue title
147:47 - using the mat dialogue title directive
147:50 - so I'm going to add an h2 tag and the
147:56 - directive is going to be mad dialogue
147:59 - title this is going to be session
148:04 - timeout next for the content we have
148:09 - Matt dialogue content so this is going
148:12 - to be Matt dialogue content and the text
148:16 - is going to be you will be logged out
148:20 - due to inactivity next for the dialogue
148:24 - action we have the Matt dialogue actions
148:28 - let's create two buttons one to stay
148:32 - signed in and want to log out so keep me
148:36 - logged in or log out now on both these
148:40 - buttons if you want the click event to
148:43 - close the dialogue we need to add the
148:45 - Matt dialogue close directive so on both
148:49 - the buttons Matt dialogue close
148:54 - alright let's test this out if you go
148:57 - back to the browser and I click on the
148:59 - button we have the model with the title
149:03 - content and the buttons when I click the
149:07 - button it closes the dialogue as well
149:11 - and we have two buttons intended for
149:14 - different purposes how would we know
149:17 - whether to log the user out or keep them
149:20 - signed in when the dialog closes on the
149:23 - button click we can do that using the
149:26 - after closed observable which
149:29 - conveniently returns a result
149:32 - so back in vs code in the component
149:34 - class first create a reference to the
149:38 - dialog so let dialogue ref is going to
149:42 - be this dot dialogue dot open now we can
149:47 - subscribe to the observable dialogue ref
149:50 - dot after closed dot subscribe we get a
149:57 - result and let's simply log that to the
150:01 - console dialog result is result finally
150:09 - we assign a value to the mat dialogue
150:11 - closed directive which is accessed as
150:14 - the result so in the HTML for the
150:17 - dialogue on keep me logged in button mat
150:22 - dialogue close is going to be equal to
150:28 - true for the first case and false for
150:33 - logout let's go back to the browser and
150:37 - test this out I'm going to open the
150:38 - console click on open dialogue and click
150:44 - on keep me logged in you can see that it
150:47 - says dialogue result true and click on
150:51 - logout it says dialogue result false
150:56 - so in the subscription method you can
150:58 - have the code that checks for the result
151:01 - if result is equal to true keep them
151:04 - signed in and if result is equal to
151:06 - false love them out the final point to
151:10 - discuss with dialogues is passing in the
151:13 - data to the dialogue component and there
151:16 - are a couple of steps so let's go over
151:19 - each of them the first step specify the
151:22 - data as the second parameter to the
151:25 - dialogue open method so this is going to
151:29 - be an object the key is going to be data
151:32 - which in turn is going to be an object
151:34 - I'm going to pass a name called vishwas
151:39 - so this is the second argument to the
151:43 - open method next open the component
151:46 - class for the dialogue example component
151:49 - so dialogue example component dot TS to
151:54 - access the data in the dialogue
151:56 - component we have to use the mat
151:59 - dialogue data injection token so first
152:03 - import inject from angular slash core
152:08 - next import mat dialogue data from
152:12 - angular slash material and then we
152:15 - inject it in the constructor so
152:18 - constructor is going to be at inject and
152:23 - we are injecting mat dialogue data and
152:28 - then we say public data of type any so
152:34 - basically we are now making the dialogue
152:36 - component capable of receiving any type
152:39 - of data now in the dialogue component
152:41 - HTML we can simply interpolate the data
152:45 - object so in math dialogue content I'm
152:48 - going to add high data dot name if you
152:54 - now go back to the browser and click on
152:57 - open dialogue you can see that content
153:00 - says Huayra choise you will be logged
153:02 - out due to inactivity so we are able to
153:06 - pass data to the dialogue component
153:10 - now if you want to specify height and
153:12 - width for the dialogue it can be passed
153:15 - into the configuration object there are
153:19 - a bunch of properties you can use based
153:21 - on your requirement so I'll leave that
153:24 - for you guys to explore browse the API
153:27 - tab in the documentation and you will
153:29 - find everything you need alright I hope
153:33 - you now have a good understanding of how
153:35 - to work with dialogues in angular
153:38 - material
153:42 - all right in this video let's take a
153:45 - look at implementing a basic data table
153:48 - in angular material the first step as
153:51 - always is to import the module so in
153:54 - material dot module dot es import math
153:58 - table module and added to the material
154:00 - array
154:03 - now what we are going to do to save us
154:06 - some time is copy the code for a basic
154:10 - data table and then understand the
154:12 - different parts that are responsible for
154:15 - the functioning of a data table so in
154:19 - the material Doc's go to components and
154:21 - then to the data table section and click
154:24 - on the table link over here in the
154:29 - examples tab we have a basic data table
154:32 - now go to the second example which is
154:35 - basic use of math table and uses display
154:38 - flex and click on the code icon now
154:43 - let's copy paste the code first the HTML
154:46 - so copy and paste it an AB component dot
154:53 - HTML next the typescript file so go to
154:58 - TS copy the interface and the data in AB
155:07 - component TS paste it right after the
155:10 - import statement then go back to the
155:15 - documentation and copy the two lines of
155:18 - code from the component class go back to
155:22 - BS code and in app component paste them
155:27 - finally copy the CSS so over here CSS
155:32 - and then copy this and paste it in AB
155:36 - component dot CSS now if we save all the
155:42 - files and take a look at the browser you
155:46 - should be able to see a data table now
155:49 - let's understand the different parts
155:51 - that make up this data table the first
155:55 - part to implementing a data table is the
155:59 - data source every data table needs a
156:02 - data source that contains the data to be
156:05 - displayed in our example we have the
156:08 - data of periodic elements we have an
156:12 - interface that defines the type of
156:16 - each element so a periodic element will
156:19 - have a name position weight and symbol
156:23 - right below the interface is where you
156:26 - see the array of periodic elements we
156:29 - have ten elements each having properties
156:31 - mentioned in the interface what you have
156:35 - to notice here is that the interface and
156:37 - the data array is declared outside the
156:39 - component to be able to use it in the
156:42 - component we need to create a property
156:44 - and initialize it for that purpose we
156:48 - have data source which is initialized to
156:50 - element data this array right here
156:55 - alright the next thing to do is to
156:58 - provide this data source to the data
157:01 - table and we do that in the HTML so an
157:05 - app dot component dot HTML we create a
157:09 - data table with mat table component and
157:12 - to provide the data source we make use
157:15 - of the data source attribute we use
157:18 - property binding to bind the property
157:21 - defined in the component class so data
157:25 - source is equal to element data which is
157:28 - provided here so that is the first step
157:32 - to implementing a data table creating
157:35 - the data source and binding it to the
157:38 - table the second step is to define the
157:42 - column templates in the browser you can
157:47 - see that we have four columns the
157:50 - position number name weight and symbol
157:54 - in the code we define the four columns
157:57 - each inside its own NG container element
158:01 - physician named weight and symbol the ng
158:08 - container element will not be rendered
158:11 - to the Dom but it will provide an
158:13 - element for applying this mat column
158:17 - death directive the mat column death
158:20 - directive is what uniquely identifies a
158:24 - given column with a key position name we
158:30 - and symbol inside the ng container
158:34 - element we will have all the
158:36 - configuration for a given column you can
158:40 - see that we have the template that
158:42 - defines how to display the header for a
158:44 - given column identified using the map
158:47 - header cell death structural directive
158:50 - we also have another template that
158:53 - defines how to display the data cells of
158:55 - a given column using the mat cell def
158:59 - structural directive the to structural
159:02 - directives do not attach any styling to
159:05 - the elements the styling is taken care
159:07 - of by mat header cell and mat cell
159:12 - components next let's talk about the
159:16 - content of the heading and the data
159:18 - cells for the heading you can see that
159:21 - we just have static text number name
159:25 - weight and symbol but for the data cell
159:30 - we get access to each row of the data
159:33 - source we obtain a reference to each row
159:37 - and then access the different properties
159:40 - of each row we then use interpolation to
159:44 - bind the data to the view so in our data
159:47 - source we have ten rows we iterate
159:50 - through the rows get a reference to each
159:53 - row and store it in the element variable
159:56 - and then we access the appropriate
159:59 - property in the column template so
160:01 - element dot position dot name dot weight
160:04 - in dot symbol these are the different
160:07 - properties for each element
160:11 - all right now what we have done so far
160:14 - is just define the column template how
160:17 - it's supposed to look the final step is
160:20 - to define the rows in the data table and
160:23 - for that we make use of two more
160:26 - components to define the table header
160:29 - row we make use of the mat header row
160:32 - component and to determine which columns
160:36 - have to be displayed in the table mat
160:39 - header row death structural directive is
160:41 - used to this we assign displayed columns
160:45 - property which is an array of columns we
160:49 - have mentioned in the component class so
160:52 - display columns is an array of strings
160:54 - with positioned name weight and symbol
161:00 - similarly to display the data rows we
161:03 - make use of the mat row component now
161:07 - with math burrow death structural
161:09 - directive we also have a variable
161:12 - exported that we have named as row
161:15 - containing the data of that given row
161:18 - and we have to specify the columns
161:21 - property which contains the order in
161:24 - which the data cells should be rendered
161:26 - again this is displayed columns property
161:30 - so when you run this code we should have
161:34 - the data table working as expected
161:36 - position name weight and symbol and then
161:40 - the different rows corresponding to each
161:42 - entry or each item and the element array
161:46 - so to summarize there are three steps in
161:49 - implementing a data table in angular
161:52 - material first up define the data source
161:55 - and the columns to be displayed
161:58 - second step define the column templates
162:01 - and finally the third step include the
162:04 - header and the row definitions so we are
162:08 - able to create a very basic data table
162:11 - we copy pasted the code and did not
162:13 - really code anything as such so in the
162:16 - next video let's also try to make some
162:19 - changes and see how that impacts the
162:22 - data table that will give you guys a
162:24 - much better idea of how the data table
162:27 - works
162:31 - in this video let's take a more detailed
162:34 - look at data tables in angular material
162:38 - let's start with the displayed columns
162:41 - property this property as the name
162:45 - suggests controls the columns to be
162:47 - displayed in the browser as you can see
162:50 - it is just an array of strings if I were
162:54 - to for example remove symbol from this
162:57 - list
162:59 - take a look at the browser the column is
163:03 - not displayed so the property controls
163:07 - which of the columns have to be shown
163:10 - but there is more to it than just
163:13 - showing and hiding of columns the order
163:16 - in which you specify the fields to be
163:19 - displayed is the order in which the
163:21 - columns are displayed in the browser you
163:24 - can see that we have the order as
163:26 - position name weight and symbol and in
163:31 - the browser the columns are in the exact
163:35 - same order physician name weight and
163:39 - symbol if you want the weight column to
163:43 - be the last column you just have to
163:45 - specify the weight column as the last
163:48 - column in displayed columns property so
163:51 - I'm going to cut this out
163:55 - and paste it after symbol if I now go
163:59 - back to the browser
164:01 - weight is displayed as the last column
164:04 - which now brings me to the HTML to
164:08 - highlight another point the order in
164:11 - which you specify these column templates
164:13 - with the ng container tag doesn't affect
164:17 - the order in any way whatsoever the
164:20 - order is controlled by the displayed
164:22 - columns property which is specified to
164:25 - the mat header row and mat row
164:28 - components but orders matter with the
164:32 - container column template is the mat
164:35 - column definition attribute the value
164:38 - has to be a value from the displayed
164:41 - columns property if I've already changed
164:44 - position to let's say position test same
164:49 - and take a look at the browser you can
164:52 - see that the code breaks and the data
164:54 - table is not displayed so make sure you
164:58 - specify the right column name to the
165:00 - template next let's talk about the mat
165:04 - row component you can see that we have
165:07 - two variables declared row and columns
165:10 - the columns property is set to displayed
165:14 - columns to indicate what data has to be
165:17 - displayed let's change this and see what
165:20 - happens so in the class component I'm
165:22 - going to create another property called
165:26 - displayed columns data and in this list
165:31 - I'm going to remove weight also back in
165:35 - the HTML I'm going to set columns to
165:38 - display columns data if you now take a
165:42 - look at the browser you can see that we
165:45 - have only three columns of data being
165:47 - displayed and four columns of header the
165:51 - data for the weight column is hidden so
165:55 - it is very much possible to set separate
165:57 - columns to be displayed for the header
166:00 - and the data but then again not sure if
166:04 - you would ever want to do that next
166:06 - let's talk about the road
166:08 - raishin what this helps us with is to
166:13 - get hold of the raw data to handle
166:15 - events on each row in the data table for
166:19 - example I can add a click event binding
166:24 - and call a method that provides us with
166:27 - the raw data let's call this log data
166:30 - and pass in that row variable now in the
166:35 - component class we can quickly define
166:39 - log data accepts a row and let's just
166:43 - console.log it if I save the files and
166:47 - take a look at the browser open console
166:51 - and click on a row you can see the
166:55 - corresponding row data being logged in
166:58 - the console so if you have any action
167:01 - that has to be performed for example
167:03 - editing deleting or navigating to a
167:07 - different route pasted on this row data
167:10 - this is the way to go
167:12 - fasten the data extract the ID probably
167:16 - of that column and perform the necessary
167:19 - action all right then I hope that now
167:23 - you have a much better understanding of
167:25 - how a data table works in angular
167:27 - material next let's take a look at
167:30 - filtering sorting and pagination in data
167:34 - tables
167:39 - features like filtering salting and
167:42 - pagination have been made really simple
167:44 - in angular material let's take a look at
167:47 - filtering in this video sorting and
167:50 - pagination in subsequent videos
167:53 - filtering can be achieved in three
167:55 - simple steps the first step is to create
167:59 - a data source as an instance of the mat
168:02 - table data source class so let's begin
168:06 - by importing mat table data source from
168:09 - angular material next we create a data
168:13 - source property as an instance of this
168:16 - imported class so data source is going
168:20 - to be new mat table data source and then
168:26 - we pass in element data as the argument
168:29 - so that is our first step creating the
168:32 - data source as an instance of the mat
168:35 - table data source class second step is
168:39 - to create an input field where the user
168:41 - can enter the filter text let's add that
168:45 - code in the HTML mat form field then an
168:49 - input element we add the mat input
168:54 - attribute and also a placeholder that
168:57 - says filter every time the user enters
169:02 - some text we need to filter the data
169:04 - table for that we listen to the key up
169:07 - event
169:10 - so key up and on key up we are going to
169:13 - call a method called apply filter and to
169:18 - this method we pass in the filter text
169:21 - which is accessed using dollar event dot
169:26 - target dot value that is the second step
169:31 - creating a filter input the final step
169:35 - is to define this apply filter method
169:37 - which actually filters the data source
169:40 - so back in the component class apply
169:44 - filter accepts the filtered text of type
169:50 - string and within the method all we have
169:53 - to do is assign the filter text value to
169:57 - the filter property of the data source
170:00 - so this dot data source dot filter is
170:05 - equal to filter value dot trim dot to
170:11 - lowercase now this kind of seems like
170:15 - magic but let me tell you how it works
170:18 - remember the math table data source
170:21 - class that we imported well that class
170:24 - has a property called filter when you
170:28 - want to filter out the data all you have
170:31 - to do is assign a string to that
170:33 - property when you assign the filter
170:36 - value the data source will reduce each
170:39 - row to a serialized form and will filter
170:43 - out the row if it does not contain that
170:45 - filtered value or to put it in simpler
170:48 - terms does the data rope contain the
170:51 - filter if yes only then display the row
170:54 - so if we take a look at the browser you
170:58 - can see that we have a filter input I
171:00 - type H and you can see it filters the
171:04 - elements type H E and it filters further
171:07 - I can also filter on numeric values type
171:12 - 6 and you can see it filters out the
171:14 - rows that don't contain the number 6 so
171:19 - three basic steps for filtering creating
171:22 - the data source as an
171:24 - instance of math table datasource
171:26 - creating the input filter and finally on
171:30 - cube of that input element assign the
171:33 - filter value to the filter property of
171:35 - the data source alright in the next
171:38 - video let's take a look at sorting in
171:40 - data tables
171:46 - in this video let's take a look at
171:49 - sorting in data tables just like
171:52 - filtering angular material makes it
171:54 - really simple to implement the sorting
171:57 - feature for your data table now there
172:00 - are three simple steps the first step is
172:02 - to import the material sorting module so
172:06 - in material dot module tortillas we are
172:08 - going to import matte salt module and
172:11 - add it to the material array
172:15 - second step we need to add directives to
172:18 - the material table in the HTML so on the
172:22 - mat table itself we need to add the mat
172:26 - salt directive and to each column header
172:31 - cell that should trigger sorting we need
172:34 - to add the mat sort header directive
172:37 - let's add it to the first three columns
172:39 - so on mat header cell mat sort header
172:46 - and I'm going to add it to the next two
172:48 - columns as well so on mat header cell
172:51 - mat sort header and the same again the
172:56 - final step is to provide the mats our
172:58 - directive to the datasource so in the
173:01 - types of file import mat sort from
173:05 - angular slash material next we use the
173:09 - view child decorator to get hold of a
173:12 - reference to the mat sort component so
173:15 - first import view child from angular
173:18 - slash core and then in the component
173:21 - class at view child mat sort sort of
173:27 - type mat salt and finally in the ng on
173:32 - init method we assigned the mat sort
173:35 - component to the sort property of the
173:38 - data table so import on in it from
173:41 - angular slash core app component
173:44 - implements on in it and then we define
173:50 - ng on in it this dot datasource dot sort
173:56 - is equal to this dot sort and that is
174:01 - pretty much it let's save the files and
174:03 - take a look at the browser now when I
174:07 - hover on the column header you can see
174:09 - an arrow mark when I click on the header
174:12 - the elements are sorted in ascending
174:15 - order click on the header again the
174:19 - elements are sorted in descending order
174:21 - click again and the sorting is removed
174:27 - similarly you can also saw
174:29 - on name and weight ascending descending
174:34 - and no salt the symbol column on the
174:39 - other hand is not sortable that is
174:42 - because we did not attach the Matt salt
174:45 - header directive to this column so there
174:48 - you go
174:49 - sorting data table in three simple steps
174:51 - include the Matt sort module add the
174:55 - directives in the HTML mats or header
174:58 - and Matt sword and finally assign the
175:02 - Matt sort component to the sword
175:04 - probability of the data source in the
175:07 - next video let's take a look at
175:09 - pagination
175:14 - in this video let's take a look at
175:16 - pagination in data tables similarity
175:20 - sorting pagination can be implemented in
175:22 - three simple steps the first step is to
175:25 - import the material Pigeon ater module
175:28 - so in material module Diaz import map
175:34 - pigeon ater module and add it to the
175:36 - material array second step we add the
175:40 - paginated component in the HTML so after
175:45 - Matt table map pigeon ater and we are
175:50 - going to specify two options to the page
175:52 - inator the first one is the page size we
175:56 - specify that using the page size options
175:59 - property
176:02 - let's go with 5 10 and 20 the second
176:07 - option is to show the first and last
176:10 - buttons of the page inator show first
176:16 - last buttons and we simply include it as
176:19 - an attribute the final step is to
176:22 - provide the map paginated directive to
176:25 - the data source so in the types of file
176:28 - import mat pigeon eighter from angular
176:32 - slash material and then use the view
176:36 - child decorator to get hold of a
176:38 - reference to the map page inator
176:40 - component add view child mat regginator
176:46 - the variable is going to be pigeon ATAR
176:49 - of type map page inator finally in the
176:55 - ng on init method we assign the mat
177:00 - paginated component to the paginated
177:02 - property of the datasource so this dot
177:05 - datasource dot originator is equal to
177:10 - this dot page inator and that is it
177:14 - let's save the files and take a look at
177:15 - the browser at first glance you can see
177:19 - that the styling is sort of broken so
177:22 - let's fix that in the HTML we are going
177:25 - to wrap the table
177:28 - as well as pigeon eater in a div tag and
177:33 - then we are going to move this elevation
177:37 - class from math table to the div tag now
177:42 - if you go back to the browser you can
177:44 - see that it looks much better by default
177:48 - five items are displayed per page you
177:50 - can change it to ten or even twenty you
177:55 - can also go back and forth between the
177:57 - pages using the icon buttons the first
178:01 - page and last page buttons might not be
178:04 - necessary for small data sets but if you
178:07 - have several hundreds of rows with a
178:09 - small page size you can definitely
178:12 - include the show first and last buttons
178:15 - attribute
178:21 - welcome back everyone in this video
178:24 - let's take a look at virtual scrolling
178:26 - with angular cdk sometimes you might
178:30 - have to display hundreds or thousands of
178:32 - elements which can be slow in any
178:34 - browser virtual scrolling will help you
178:37 - in such situations with virtual
178:40 - scrolling you can display large lists of
178:43 - elements performant ly by only rendering
178:46 - the items that fit on the screen let's
178:50 - see how that can be done in this video
178:52 - the first step we need to import the
178:55 - scrolling module from angular cdk so in
178:59 - AB dot module dot es import scrolling
179:03 - module from angular slash CD k slash
179:06 - scrolling next add it to the imports
179:09 - array so scrolling module added to the
179:12 - imports array now for the second step we
179:17 - are going to create an array of a
179:19 - thousand numbers so in the component
179:22 - class which is AB dot component or TS
179:24 - file I'm going to create a new property
179:27 - numbers which is going to be an array
179:31 - then in the constructor for that I
179:36 - equals 0 I less than thousand I plus
179:41 - plus this dot numbers dot push I all
179:49 - right
179:49 - now that we have a huge list of numbers
179:51 - let's render them in the HTML I will
179:55 - first render them with the ng4 directive
179:58 - and then show you how it works with
180:01 - virtual scrolling then the HTML add a
180:04 - div tag and then add the mg4 directive
180:09 - and v4 is equal to let number of numbers
180:14 - and then we simply render the number I'm
180:19 - also going to add a bit of styling to
180:20 - this div tag so open up and add a class
180:26 - called number with display flex justify
180:32 - content center-aligned
180:34 - items center let's go with a border to
180:40 - pixels solid maroon and then box-sizing
180:47 - border box and back in the HTML I'm
180:51 - going to add the class number alright if
180:56 - we now save the file and take a look at
180:58 - the browser you should be able to see
181:01 - all the list of numbers what I want to
181:05 - focus on though is the Dom itself if I
181:08 - open dev tools you can see that all of
181:12 - the thousand elements are present in the
181:15 - Dom tree so this is the list with ng for
181:19 - directive now let's implement the list
181:22 - with virtual scrolling back in the HTML
181:26 - the first thing we have to do is create
181:29 - a viewport for the virtual scroll the
181:33 - component is cdk virtual scroll view
181:37 - port on this viewport we have to define
181:41 - the item size attribute and this is
181:44 - basically an indication of the size of
181:47 - each element I have specified item size
181:50 - as 100 so in the number class as well
181:53 - let's add height is equal to hundred
181:58 - next we need to specify a height for the
182:02 - viewport itself and for that I'm going
182:04 - to create a CSS class this is going to
182:07 - be called container and I'm going to set
182:10 - the height property to 400 pixels and
182:13 - back in the HTML on the viewport plus is
182:19 - equal to container now each element is a
182:23 - hundred pixels tall and the viewport is
182:26 - 400 pixels tall so we should be able to
182:29 - see four elements at any given time back
182:33 - in the HTML I'm going to move this div
182:35 - tag within the viewport now for the
182:39 - actual list of numbers we do the same as
182:41 - what we did before with ng for the only
182:45 - difference now is that we are going to
182:47 - use
182:48 - cdk virtual fault instead of ng4 so CDK
182:53 - virtual for this is the directive you
182:56 - have to make use of inside a virtual
182:58 - scrolling container and that is pretty
183:02 - much it
183:03 - if you now save the files and go back to
183:04 - the browser we should only be seen four
183:08 - elements at a time and as we scroll down
183:11 - we can see the rest of the elements but
183:14 - what is important though is observing
183:16 - the Dom tree you can see that instead of
183:19 - rendering all the thousand elements we
183:23 - are now rendering only a handful of them
183:25 - as you scroll the Dom nodes update to
183:28 - reflect the numbers being displayed so
183:32 - this way we can implement a more
183:34 - performant list to display items all
183:37 - right with that we come to the end of
183:39 - this angular material series I hope you
183:43 - are now in a better position to start
183:45 - using some of the material components in
183:46 - your own projects