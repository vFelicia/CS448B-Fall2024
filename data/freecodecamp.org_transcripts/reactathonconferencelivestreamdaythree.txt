00:00 - [Music]
00:51 - so
00:53 - [Music]
01:03 - [Music]
01:52 - [Music]
01:55 - i've had my heart broken
01:58 - into it
01:59 - [Music]
02:02 - but something's different next to you
02:07 - [Music]
02:10 - it's like my soul is
02:13 - [Music]
02:15 - [Applause]
02:16 - [Music]
02:36 - [Music]
02:36 - [Applause]
02:40 - is
02:41 - [Music]
03:15 - feelings that i know
03:29 - [Music]
03:44 - i can't keep on this road alone
03:50 - [Music]
04:08 - [Music]
04:12 - that
04:15 - [Music]
04:21 - is
04:23 - [Music]
04:29 - oh
04:30 - [Music]
04:42 - then
04:56 - feelings
04:58 - [Music]
05:11 - feelings
05:13 - [Music]
05:35 - that i know i can't keep bottled up
05:39 - inside
05:41 - and all i wanna know is are you ready
05:46 - for the ride
05:49 - what have i been waiting for oh i can
05:52 - run but i can't hide
05:56 - the feelings that i know
06:01 - [Music]
06:08 - so
06:11 - [Music]
07:20 - so
07:21 - [Music]
07:37 - so
07:38 - [Music]
09:11 - so
09:15 - [Music]
10:04 - [Applause]
10:06 - [Music]
10:11 - [Applause]
10:14 - [Music]
10:37 - so
10:38 - [Music]
11:21 - [Applause]
11:23 - [Music]
11:26 - [Applause]
11:30 - [Music]
12:14 - so
12:15 - [Music]
12:31 - you know
12:34 - [Music]
13:02 - living in the light you're giving out
13:08 - [Music]
13:11 - whenever you cross my mind
13:18 - [Music]
13:24 - without your baby
13:28 - [Music]
13:34 - [Music]
13:42 - tell me
13:45 - [Music]
14:01 - let you i'm
14:28 - stay
14:37 - is
14:39 - [Music]
14:51 - is
14:53 - [Music]
15:08 - nobody
15:10 - [Music]
15:18 - all this is
15:23 - [Music]
15:28 - know
15:33 - [Music]
15:46 - is
15:50 - [Music]
15:56 - [Applause]
15:57 - [Music]
15:59 - tell me
16:00 - [Music]
16:13 - is
16:15 - [Music]
16:20 - [Applause]
16:22 - [Music]
16:44 - me
16:46 - [Music]
17:06 - [Music]
17:15 - we're flying high like a
17:18 - [Music]
17:25 - when you're with me and i realize what
17:28 - it all means
17:30 - [Music]
17:43 - you're the one on my
17:46 - [Music]
17:57 - oh
18:00 - [Applause]
18:02 - [Music]
18:08 - till the sky
18:16 - [Music]
18:26 - of this feeling
18:28 - soaking in your light right above me
18:31 - it's an open sky full of dreams
18:37 - [Music]
18:52 - is
18:54 - [Music]
19:08 - every single crowd and i know you love
19:11 - me
19:12 - till the sky
19:19 - [Music]
19:47 - i was running
19:49 - to the ocean
19:51 - [Music]
19:57 - [Music]
20:01 - underneath
20:02 - [Music]
20:07 - i was doing just
20:09 - [Music]
20:28 - [Music]
20:36 - for me
20:48 - oh
21:17 - [Music]
21:50 - is
21:51 - [Music]
21:59 - [Music]
22:07 - for me
22:11 - [Music]
22:51 - [Applause]
22:53 - [Music]
23:21 - [Music]
23:41 - [Applause]
23:42 - [Music]
24:00 - [Music]
24:27 - [Music]
24:39 - so
24:41 - [Music]
24:53 - so
24:57 - [Music]
25:07 - [Music]
25:20 - [Applause]
25:26 - [Applause]
25:41 - [Music]
25:53 - so
25:57 - [Music]
26:20 - [Applause]
26:21 - [Music]
26:32 - [Applause]
26:33 - [Music]
26:38 - [Applause]
26:39 - [Music]
27:39 - so
27:48 - [Music]
28:18 - [Applause]
28:21 - [Music]
28:37 - so
28:40 - [Music]
29:08 - yes
29:13 - [Music]
29:23 - [Music]
30:01 - so
30:03 - [Music]
30:25 - [Music]
30:33 - so
30:35 - [Music]
30:49 - [Music]
32:22 - [Music]
33:17 - so
33:23 - [Music]
33:35 - [Music]
34:15 - [Music]
34:22 - [Applause]
34:34 - hello welcome to recipe for an
34:36 - accessible component i'm sophia a front
34:39 - end engineer at course hero
34:42 - i'm here with karen a senior friend an
34:44 - engineer also from course here so i
34:45 - actually have a question for you sophia
34:47 - when people
34:48 - think about accessibility
34:51 - what do you think that most people
34:54 - have in mind
34:56 - i think that people tend to think of
34:59 - very visible disabilities
35:01 - so when we think about like
35:03 - visual symbolism it's the person in the
35:06 - wheelchair
35:07 - it's a person with a crutch
35:10 - but i think when we think about
35:12 - accessibility in a more universal sense
35:14 - it becomes
35:16 - uh kind of more motivating so this
35:18 - definition which was kind of cobbled
35:20 - together from a bunch of different
35:21 - definitions says
35:23 - that websites that are designed and
35:25 - developed so that every person can
35:27 - understand navigate and contribute to
35:29 - them no matter their device their
35:31 - circumstances
35:32 - or their ability i think that definition
35:34 - of web accessibility makes us realize
35:37 - that it's more of a universal thing
35:40 - right so maybe you don't have a
35:41 - conventional disability
35:43 - but a website that has high contrast and
35:46 - clear information structure is easier to
35:48 - understand when you're on your phone or
35:50 - maybe if you're in a really loud
35:51 - environment
35:52 - right you really want those captions
35:54 - even if you can hear in normal
35:56 - circumstances one thing that's
35:58 - interesting to know is that
36:01 - disability affects a lot more people
36:03 - than people realize so
36:06 - according to the cdc
36:08 - roughly about 15 of the people in the
36:10 - world have some form of disability but
36:13 - that number goes to roughly one to five
36:15 - when you look at adults specifically
36:18 - and there's four major kinds there's
36:20 - manual or motor mobility which means
36:22 - that maybe the user
36:24 - can't
36:25 - operate a mouse the same way that other
36:27 - people can
36:28 - um there's hearing disabilities in which
36:30 - case captions are really important and
36:33 - then there's like different levels of
36:34 - visual disability right it might not
36:36 - mean that the person
36:37 - is completely unable to see but maybe
36:39 - they need to use the zoom
36:42 - function or maybe they need higher
36:44 - contrast and then there's also cognitive
36:47 - disability which means that they really
36:50 - are relying on a really clear
36:51 - information hierarchy to understand
36:54 - where they're going and what they're
36:55 - doing on the website
36:57 - so to summarize why is it important
37:00 - one better accessibility on the web
37:02 - benefits everyone
37:05 - again with the example of high contrast
37:08 - captions like a lot of people will
37:10 - benefit from that even if they don't
37:12 - have a conventional disability
37:13 - and then it's also the law right so the
37:16 - americans with disabilities act
37:19 - has spurred a lot of these lawsuits
37:21 - related to companies missing certain
37:23 - features on their websites so hulu faced
37:26 - a lawsuit in 2017
37:28 - because they didn't have caption support
37:30 - for a lot of their videos beyonce's
37:32 - website also had its own lawsuit because
37:35 - the website is kind of like a visual
37:37 - photo diary but it was missing a lot of
37:40 - the text alternatives and the keyboard
37:42 - navigation that a lot of people rely on
37:44 - so
37:45 - it's kind of interesting to think about
37:47 - accessibility and react
37:50 - there was a study that was done earlier
37:52 - this year by webbing which is
37:55 - an organization
37:57 - that
37:58 - is considered an authority on web
38:00 - accessibility and
38:02 - in their study they looked at the top 1
38:04 - million websites and what technologies
38:06 - they use and how those
38:08 - choices affected accessibility and one
38:10 - category was frameworks and they found
38:13 - that pages that use react had about six
38:16 - percent more
38:17 - accessibility errors in the average
38:18 - website
38:20 - but this is completely preventable right
38:23 - there's nothing inherent to react that
38:25 - prevents us from building accessible
38:28 - components and websites so
38:30 - we're gonna talk about how to do that by
38:33 - doing a demo for how to build an
38:34 - accessible accordion
38:37 - all right here we are on localhost with
38:40 - a really basic accordion we've set up
38:44 - so so tell me a little bit about what
38:46 - you mean when you're saying an accordion
38:48 - here
38:49 - that's a great question so there's a lot
38:51 - of names for it um
38:53 - sometimes it's called a collapsible
38:54 - section sometimes it's called called a
38:56 - drop down but basically it's just
39:00 - a button that lets you toggle content by
39:03 - clicking on it so let's think about the
39:04 - accessibility of this one really
39:07 - great built-in tool that's on chrome is
39:11 - lighthouse
39:12 - so that's something in dev tools that
39:14 - you can use to evaluate
39:17 - your website for things like seo
39:19 - accessibility and also just general
39:21 - performance
39:22 - so
39:23 - let's open up dev tools i'm gonna go to
39:27 - the lighthouse
39:29 - option and then we're just gonna have
39:31 - accessibility checked off
39:33 - and we're gonna run it by clicking
39:35 - generate report
39:40 - see what it says okay
39:43 - it's not too bad but there's an issue
39:46 - that's flagged which is contrast so it
39:48 - says background and foreground colors
39:51 - do not have a sufficient contrast ratio
39:53 - all right so let's let's see
39:55 - what that ratio is
39:57 - and i can see the
39:59 - the problematic element is accordion
40:02 - title
40:03 - uh so let's select that
40:11 - all right it's telling me the contrast
40:13 - ratio is
40:14 - 1.97
40:15 - which is
40:17 - not great it doesn't pass even the
40:20 - minimum requirement so
40:22 - we will want to fix that okay
40:25 - you know one thing i did notice is this
40:26 - additional items to manually check can
40:28 - we take a quick look at that sure what
40:30 - it says there
40:33 - uh page has a logical tab order
40:35 - interactive keyboard controls let's see
40:38 - tabbing through the page
40:40 - keyboard controls i don't think we set
40:43 - this up on our example let's uh
40:45 - take a look here
40:47 - tabbing doesn't do anything
40:50 - when i see something like this the page
40:51 - that actually comes to mind is one of my
40:53 - favorite resources the w3c um these aria
40:56 - design patterns uh let's uh command f
41:00 - here and see if we can find uh an
41:01 - accordion ah there we are
41:06 - okay so this has a little example
41:08 - accordion it works pretty similar to
41:10 - ours um i notice uh already some
41:12 - differences in things that are
41:14 - highlighted um but let's look at the
41:16 - accessibility features that chrome was
41:18 - mentioning like keyboard support uh
41:20 - space or enter should open things
41:23 - i like these arrow options uh the tab
41:25 - should be there for sure
41:27 - um what else is there there's some aria
41:30 - information here
41:31 - uh
41:32 - i like this idea of showing whether it's
41:34 - expanded um there's some really good
41:37 - stuff in here
41:38 - uh cool so this this kind of gives us a
41:40 - little idea of uh what we can focus on
41:43 - going forward
41:45 - all right so let's edit the code for our
41:47 - accordion by hopping here in code
41:50 - sandbox which is an online editor
41:53 - so just to summarize some of the issues
41:55 - we've noted there's the color contrast
41:57 - issues there's lack of keyboard
41:58 - navigation
42:00 - it's uh the the ui for focus states and
42:03 - then some aria attributes
42:05 - so let's just walk through this quickly
42:07 - we have our root component app.js which
42:11 - remembers an accordion
42:13 - which takes in a children
42:15 - which is just an array of data objects
42:19 - the individual accordions are here in
42:21 - accordion item
42:23 - and each according item contains a
42:26 - header and a body so the header
42:28 - corresponds to the text up on the button
42:31 - and the body corresponds to the body
42:33 - of the accordion
42:36 - um so
42:38 - one quick note before we start
42:42 - often times in react we use a div as a
42:45 - wrapper when we're returning multiple
42:47 - elements
42:48 - but if there isn't a better semantic
42:52 - element to use or if we don't need a
42:54 - class name which in this case we do then
42:56 - we should use a react fragment
42:59 - which
43:00 - looks um like this
43:03 - and the reason for doing that is we
43:06 - don't
43:06 - add an unnecessary
43:08 - um node to the dom
43:11 - which can complicate where the focus
43:13 - goes in this case we do need the div
43:16 - because we have a class name so we're
43:17 - gonna leave that as is
43:19 - um and let's tackle the first issue
43:21 - which is improving the markup
43:24 - so
43:24 - um we're using a div for the
43:28 - button here which
43:30 - doesn't really say much so let's just
43:32 - change that to a button element
43:40 - all right so
43:42 - before you panic obviously it's applying
43:44 - the default styles hence why the
43:47 - button's no longer full width
43:49 - but not to worry we can override the
43:51 - width pretty easily with a little bit of
43:54 - css i'm going to hop into the style
43:56 - sheet
43:57 - and just
43:58 - pop this here
43:59 - okay we are back to where we work for
44:02 - um
44:04 - and again to reiterate by turning this
44:06 - div into a button we can now navigate
44:09 - using the tab which is very cool
44:12 - another thing we should do is make it a
44:14 - little more obvious that these buttons
44:16 - can be clipped on
44:17 - right because it's not
44:19 - inherently obvious so a lot of times on
44:21 - websites they'll add a plus or minus
44:24 - sign plus meaning that you can expand
44:26 - this section minus meaning that you can
44:28 - collapse it
44:29 - we are going to be a little fancy so we
44:32 - are going to use the after selector to
44:34 - add some triangles to our titles
44:37 - um if you look in
44:39 - accordion header
44:41 - we have this
44:42 - open class or conditionally rendering so
44:44 - we can use that to show a different
44:46 - triangle when it's
44:48 - open versus when it's closed let's just
44:50 - save this really quickly and we're going
44:52 - to add
44:53 - a little bit of css here
45:00 - there we go now we have
45:02 - upside down triangle when it is closed
45:05 - and then right side up triangle when
45:07 - it's open and this way it's just a
45:08 - little more obvious that this is an
45:10 - element that you can
45:12 - interact with
45:13 - so that's good um one other thing we
45:16 - noticed from the lighthouse report was
45:17 - that the contrast wasn't strong enough
45:20 - so we can fix that very easily
45:22 - we just basically need a stronger
45:24 - contrast between the background color
45:26 - and the text color so
45:28 - just to keep it simple why don't we make
45:30 - background
45:32 - white and that should be
45:35 - a lot better
45:39 - okay
45:40 - now it is a contrast ratio of 5.74
45:44 - which passes from the strictest
45:45 - standards with blind colors so that's
45:47 - awesome
45:47 - [Music]
45:50 - um
45:51 - one other thing is a lot of people don't
45:53 - really like this default focus styling
45:56 - this blue rectangle but we can customize
45:59 - that and make it even pop a little more
46:01 - if you
46:02 - look at the
46:03 - examples page they talk about how
46:06 - the background color of the header
46:08 - button should ideally change just to
46:10 - make it more obvious that that's the one
46:12 - that's open
46:13 - so i'm just going to add a little
46:15 - styling to the focus selector here
46:20 - so now
46:22 - it's a little obvious right we have this
46:24 - green outline and this pale yellow color
46:26 - and it's just a little bit more obvious
46:28 - that
46:29 - it's the element we're focused on
46:32 - one other thing i want to do is add
46:33 - emphasis on the header for the accordion
46:35 - that's collapsed by making the text
46:37 - black but right now if i
46:40 - click out it actually goes back to gray
46:42 - so we can
46:43 - just add a little bit of css
46:47 - [Music]
46:49 - and this way it's a little more obvious
46:50 - but it's the one that's being emphasized
46:53 - awesome so we've improved some of the
46:55 - things on the visual front we also want
46:58 - to communicate some of this information
47:00 - non-visually as well
47:02 - so for example
47:04 - for the average person maybe it's
47:06 - obvious that the accordion is open when
47:09 - you click on it but for someone who's
47:11 - visually impaired we want to communicate
47:13 - that information using some aria
47:15 - attributes
47:16 - so pretty straightforwardly we can
47:20 - [Music]
47:21 - apply
47:22 - arya expanded to communicate whether the
47:26 - toggle is open or not so we can simply
47:29 - just set that to our
47:31 - is open property
47:33 - which will be true or false
47:35 - this way
47:36 - screen reader knows when it toggles open
47:38 - so that's pretty straightforward um
47:41 - based on the notes in the w3 site we
47:44 - also want to add some attributes to
47:46 - communicate the relationship between the
47:48 - button and the text
47:51 - right for us maybe it's obvious that you
47:53 - click on the button to see the text but
47:54 - for someone using screen reader we want
47:56 - to communicate that otherwise so
47:58 - let's add
48:01 - an id
48:03 - and also this aria controls property
48:06 - which tells us which section
48:08 - it will
48:09 - compact
48:11 - and then on the flip side let's also add
48:13 - some attributes to accordion body
48:21 - so i do roll region which just tells
48:24 - screen readers hey this is not
48:27 - um this doesn't fall under like a
48:28 - specific type of label but it's an area
48:31 - that you should read out and then also
48:33 - aria labeled by
48:34 - which is the inverse of aria controls
48:36 - saying hey the
48:39 - the um the part that points to me is
48:42 - label index
48:44 - so we've improved our ui to show the
48:46 - focus state better we've added some
48:48 - important attributes now what about that
48:51 - keyboard navigation
48:56 - i'm actually really excited to talk
48:57 - about keyboard navigation and it's
48:59 - completely vital to accessibility and as
49:02 - we saw um it's actually uh there's
49:04 - actually suggestions by the w3c on how
49:07 - to do that so let's get started on this
49:09 - let's put this together so
49:12 - let's see how do we want to start here
49:14 - um
49:14 - i'm thinking let's start in the header
49:16 - component itself
49:18 - if we take a look at what we have here
49:20 - we can tab between stuff we can shift
49:22 - tab between stuff
49:24 - but the up and down arrows don't work i
49:27 - remember reading that over there that we
49:29 - needed to make these up and down arrows
49:30 - work um
49:32 - let's let's how about we start there so
49:34 - what i'm going to do is i'm going to
49:36 - write a little on key down uh listener
49:41 - let's put that maybe right here on the
49:43 - header
49:44 - so what does this do this listens for
49:46 - arrow up this listens for arrow down
49:48 - this listens for escape it's a personal
49:49 - favorite um i like the idea of hitting
49:52 - escape to quit an accordion uh and what
49:55 - do we want to do when we have this let's
49:57 - say on arrow up i wanna scroll up uh
49:59 - arrow down scroll down escape close it
50:02 - uh i think that's probably more
50:04 - appropriate for a parent component uh so
50:07 - let's let's just add some stub functions
50:09 - here maybe something that we will uh
50:11 - grab from the props so something like
50:14 - this
50:15 - okay i like that i like how that looks
50:18 - okay let's let's move to the accordion
50:20 - now so this is probably where we're
50:22 - going to control uh a lot of a lot of
50:24 - this functionality um
50:26 - you know i have an idea of how we're
50:28 - gonna do this and i like the idea of
50:32 - using a
50:34 - use effect in our child component let me
50:36 - let me put some code on the screen and
50:38 - then we can talk through how it works so
50:40 - the idea here is let's create a little
50:42 - state
50:43 - maybe something like a focused index
50:46 - and what i want to do is i want this
50:48 - parent to listen for these key up and
50:51 - key down events it kind of knows what
50:54 - index of the child is sending those
50:55 - events
50:56 - and all we really need to do is send it
50:58 - to the the
51:00 - item above or item below so we can
51:02 - update this focus index and if we hop
51:04 - here to the header again
51:07 - we can actually maybe put in a little
51:09 - ref here so i'm gonna put
51:11 - a little ref here uh how about here
51:17 - okay
51:18 - and this ref will actually point to this
51:21 - item right here
51:28 - and what this ref i put in does is it
51:30 - checks hey
51:31 - should i be focused you know did did
51:34 - something in the parent component tell
51:35 - me that i should be focused now
51:37 - and if if that changes uh and it's true
51:41 - then focus me really straightforward
51:43 - really simple
51:45 - uh you can of course do things that are
51:46 - much more complicated uh but let's let's
51:49 - start simple for now okay so let's uh um
51:52 - let's uh move in and let's start
51:54 - stubbing out some of these functions so
51:55 - the first thing i'm gonna do is put some
51:58 - little empty functions that we'll use
51:59 - here
52:01 - okay so what do we have here we're
52:03 - passing our is focus which we were using
52:06 - over here uh we're uh passing our focus
52:09 - focus previous and handle escape
52:12 - uh
52:13 - let's start with focus next so i'm gonna
52:16 - i think
52:17 - it's pretty straightforward that we want
52:19 - to
52:20 - set the index to the next one but
52:22 - there's also a situation where what if
52:24 - you're on the last accordion element
52:26 - what does that look like that looks like
52:27 - something like this
52:28 - and you hit the down arrow
52:30 - i i say we should loop up i believe i
52:32 - saw that in the w3c that's very
52:34 - comfortable uh navigation for me uh so
52:37 - let's add that here
52:38 - so what did we do here we said that uh
52:41 - if we're on the last element we're gonna
52:43 - loop to the beginning otherwise we're
52:44 - just gonna go to index plus one
52:47 - and because we uh are listening uh um
52:50 - for changes in the focus index in the
52:51 - child uh
52:53 - this uh
52:54 - this seems like it should work let's try
52:56 - this together
52:58 - hey there we go down arrow oh and it
53:00 - loops okay i really like that
53:02 - so the uh up arrow is uh pretty similar
53:05 - so i'll just put in the code for that
53:06 - real quick
53:08 - boom
53:09 - and you know let's test it together uh
53:11 - let's go here down arrow works up arrow
53:14 - works that's great uh and then escape
53:17 - what do we want to do um i this is a
53:20 - personal uh preference i like the idea
53:22 - of collapsing according with escape so
53:24 - let's try this i'm going to put in some
53:26 - code here
53:27 - i'm going to click on this
53:28 - and i'm going to
53:30 - [Music]
53:32 - hit escape
53:34 - so let's let's open this one and hit
53:36 - escape hey that works
53:39 - so one this is
53:41 - very
53:42 - inclusive right there there there are
53:45 - individuals who wouldn't have been able
53:47 - to comfortably use our uh accordion
53:50 - before that now can there are people who
53:53 - we are empowering but i genuinely
53:55 - believe that this helps everybody
53:57 - everybody has a better experience
53:58 - because of this it just feels like uh it
54:01 - feels intuitive it feels right um it
54:04 - feels fun to use it's a simple accordion
54:07 - component i know but uh it just it feels
54:10 - fun
54:12 - so that was your demo obviously there
54:15 - are
54:16 - libraries out there that you can just
54:23 - how download it is to make your
54:25 - components more accessible so what are
54:26 - the ingredients
54:28 - it's
54:29 - being thoughtful about the markup by
54:30 - using semantic html
54:32 - it's incorporating aria attributes it's
54:36 - making sure that keyboard navigation is
54:38 - supported which can actually come from
54:40 - the symantec markup and it's also being
54:43 - clear about focus management
54:45 - there's a lot of great resources out
54:47 - there but two that we particularly
54:49 - recommend are the w3c
54:52 - examples page
54:54 - and this website which has a lot of
54:56 - information about different patterns the
54:58 - first one is the one that we showed
55:00 - during our demo which has
55:02 - really detailed information about the
55:04 - kinds of attributes you should be using
55:07 - different considerations kind of at the
55:09 - element level and then the second link
55:12 - kind of takes a more philosophical
55:13 - approach when it comes to different
55:15 - components so why we can make different
55:17 - choices and what the implications are
55:20 - for those choices so we really encourage
55:22 - you to check those out
55:25 - so before we close out here uh i
55:28 - actually had a question for you sophia
55:30 - it's
55:31 - been a year
55:34 - and uh
55:35 - i wanted to know uh
55:37 - something not related to
55:40 - computer science something a little
55:41 - personal
55:42 - what gives you hope
55:45 - that's a really good question yeah this
55:47 - has been quite a year
55:49 - i think it's two things one thing is
55:52 - just how resilient people have been
55:56 - both at the team level and also what
55:58 - the level beyond that people have found
56:00 - really amazing ways to cope with
56:02 - everything that's going on in the world
56:05 - for my team at course hero we did a
56:07 - virtual cocktail class
56:09 - i think i heard that your team did a
56:11 - virtual escape room which is really
56:13 - really cool
56:14 - um and then secondly i think what gives
56:16 - me hope is how we've been able to
56:19 - recognize the humanity in each other
56:21 - um definitely of course hero but also
56:24 - across all the different social circles
56:26 - we're in
56:27 - um i think being empathetic being
56:29 - patient
56:30 - and demonstrating our respect for each
56:33 - other has kind of underlined the fact
56:35 - that beyond
56:36 - us being devs
56:38 - you know we are humans we have basic
56:40 - needs and we should take care of each
56:42 - other in different times
56:44 - what about uconn
56:47 - um you know it's uh like i said it's
56:49 - been a year um i think sometimes it just
56:52 - feels
56:53 - like the world might be falling apart
56:55 - and sometimes it feels like there's a
56:56 - lot out there to be scared of and
56:58 - sometimes it even feels like that
57:01 - feeling might never go away
57:03 - um but interestingly
57:05 - tech
57:06 - represents hope to me
57:08 - tech to me is a promise that the future
57:10 - will get better you know
57:13 - i learned the word doom scrolling this
57:14 - year if you look it up it's just this
57:16 - idea that you keep going on twitter and
57:17 - keep finding more and more scary things
57:20 - there's always going to be something
57:21 - scary something negative out there but
57:23 - no matter what it seems that phones
57:25 - always get a little thinner computers
57:27 - always get a little faster and every
57:30 - once in a while something new comes out
57:32 - that just feels magical
57:34 - in those moments
57:36 - that magic can inspire a sense of wonder
57:38 - and for me hope you know i i became an
57:41 - engineer because it allows me to shape
57:43 - what this slightly better future will
57:45 - look like and i think that we focus on
57:47 - accessibility because it allows us to
57:49 - make this slightly better future more
57:51 - inclusive as
57:52 - well this was an awesome talk sophia
57:56 - thank you so much for setting this up
57:57 - thank you for uh having me as a part of
57:59 - this
58:00 - oh thank you thank you for everything
58:01 - you've shared everything you said really
58:03 - resonated with me as well and
58:05 - to the people watching this talk i hope
58:07 - it brought you something both in terms
58:09 - of learning about accessibility but also
58:12 - thinking about who we are as people
58:15 - thanks
58:17 - [Music]
58:35 - [Applause]
58:42 - [Music]
59:12 - so
59:13 - [Music]
60:01 - [Applause]
60:01 - [Music]
60:18 - [Music]
60:34 - so
60:37 - [Music]
61:02 - so
61:03 - [Music]
61:27 - [Music]
61:43 - [Music]
62:21 - [Music]
62:30 - hello everybody welcome back
62:33 - welcome back anjana i'm happy to see you
62:36 - today
62:37 - on this wednesday we were just talking
62:40 - before it's hard to believe that it's
62:41 - only wednesday there's been so much
62:43 - that's happened in three days during
62:45 - this conference
62:46 - and i i'm excited to get into this third
62:49 - day i mean it's it's only day three it's
62:51 - amazing um we've had so many great talks
62:54 - uh
62:56 - already and topic tables and
62:58 - such great sponsors but uh i'm just
63:01 - excited to get kicked off today my name
63:03 - is jonathan catrell
63:05 - i am a director of technology at pbs i
63:08 - also host
63:10 - developer t which is a podcast for
63:12 - engineers like yourself who are looking
63:14 - to level up in uh in their careers
63:17 - and
63:18 - i'm excited to get going today anjana uh
63:21 - once you introduce yourself nick
63:23 - yeah we are really excited to be back
63:25 - with you for day three um in case you
63:27 - haven't been able to join us the last
63:28 - couple of days hi i'm anjana vakil i'm a
63:31 - software developer and developer
63:32 - advocate at observable
63:34 - and i am really excited that we have one
63:37 - more action-packed day of amazing stuff
63:40 - for y'all
63:42 - and we are super excited to tell you all
63:44 - a little bit about what's going to
63:45 - happen today and also jump right into
63:48 - our talks but first i want to make sure
63:50 - we give a huge thank you and shout out
63:52 - to our amazing sponsors who've been
63:54 - making this all possible so thank you so
63:56 - much and please everyone join us in
63:58 - thanking flexport course hero imagex
64:01 - versailles off zero hassara vonage
64:05 - netlify and mux
64:09 - awesome sponsors sponsors make the world
64:12 - go round for uh events like this so it's
64:14 - it's wonderful
64:16 - to have such great sponsors this year we
64:18 - hope that you had a chance to hang out
64:20 - uh with those sponsors this morning in
64:21 - the past two days because they have some
64:23 - of the best engineers working at those
64:26 - companies
64:27 - official expo sessions are now complete
64:29 - but many sponsors will still be hanging
64:31 - out at their booths make sure you go and
64:33 - say hi you can find that in hop in which
64:35 - we're going to continue talking about
64:37 - because it's such a an interesting
64:39 - platform with so much more going on than
64:41 - just the main stage so make sure you
64:43 - click around and explore a little bit
64:46 - definitely and also a huge thank you to
64:49 - uh free code camp who is making our live
64:52 - stream possible we have folks joining us
64:54 - on hop in live but we also have folks
64:56 - tuning in to our youtube live stream so
64:58 - huge thank you to free code cam for
64:59 - making that happen and whether you're
65:02 - looking on the stage on hop in or
65:03 - whether you're watching the live stream
65:05 - you're gonna see some amazing talks
65:07 - today so get pumped get ready because we
65:10 - have some awesome talks coming your way
65:12 - from becca bailey brian larue lee
65:15 - robinson cassidy williams and then we're
65:18 - going to
65:19 - cap off the day and the whole conference
65:22 - with a very special live episode of
65:25 - syntax fm with west boss and scott
65:27 - telinski
65:28 - exciting
65:30 - wes and uh and scott are much more
65:33 - entertaining and funny then i can be in
65:35 - a live setting so i'm excited for that
65:37 - one uh and as the previous two days have
65:41 - as it's been true in the previous two
65:42 - days the morning and the afternoon talks
65:44 - will be broken up by live topic tables
65:46 - with speakers and other experts so make
65:49 - sure you check out those topic tables
65:50 - you can find them let me see if i get it
65:52 - right this time over there the sessions
65:54 - are over there in hoppin uh you click on
65:57 - the sessions you can go and join a topic
65:59 - table those have been really fun and by
66:01 - the way when you're in a topic table you
66:02 - can actually show yours show your face
66:05 - it can be kind of like those the big you
66:07 - know brady bunch style zoom videos
66:10 - or zoom meetings rather where you can
66:12 - show your face and share your voice as
66:14 - well and ask questions in that way
66:17 - as long as that particular topic table
66:19 - is open to that
66:22 - yes definitely and please um remember
66:24 - that in all of our interactions with
66:26 - each other whether in the topics table
66:28 - sections in the uh in this the chat um
66:31 - or even in the youtube comments all of
66:34 - our conversations with each other we
66:36 - want to keep this a very safe and
66:37 - respectful place so please everyone
66:39 - please keep being considerate keep being
66:41 - respectful keep taking responsibility
66:43 - for your actions um and remember that we
66:46 - are all abiding by the code of conduct
66:48 - which you can find at reactathon.com
66:51 - conduct
66:54 - if you ever do feel unsafe or harassed
66:57 - or someone is just trolling you
66:59 - unnecessarily
67:00 - you can report them by clicking on their
67:02 - profile and clicking report user even if
67:04 - it's questionable if you're thinking
67:06 - maybe i should maybe i shouldn't please
67:08 - do that
67:09 - because we'd rather have the report than
67:11 - you feel
67:12 - like you were
67:15 - like you were hurt or harassed this will
67:17 - send a report to the organizers and they
67:19 - will pay attention to it and they will
67:21 - handle it
67:23 - absolutely all right well
67:25 - without further ado
67:27 - let's jump into these amazing talks what
67:28 - do you say jonathan who we got up first
67:30 - yes i'm excited yeah first is becca
67:32 - bailey becca is a front-end engineer at
67:34 - formidable with a deep love of react
67:37 - typescript and graphql
67:39 - after previous career as an elementary
67:41 - music and fine arts teacher she loves
67:44 - helping artists and career changers
67:46 - understand software
67:49 - i love this i love how many folks we
67:50 - have speaking at the conference and
67:52 - attending the conference and being
67:53 - present at the conference who have
67:54 - transitioned uh into this wide wonderful
67:57 - world of tech and react from other
68:00 - industries other jobs um love this so uh
68:03 - today becca is gonna tell us a little
68:06 - bit about how to love refactoring our
68:08 - code which i am really excited to hear
68:11 - about because refactoring is always a
68:13 - huge headache to me so i'm excited to
68:15 - change my mindset about it and so we're
68:17 - going to learn how we can love
68:18 - refactoring without avoiding or while
68:21 - avoiding unintentional changes to our
68:24 - existing logic and we're going to learn
68:26 - how refactoring can help us simplify
68:29 - create a foundation for future work and
68:32 - better communicate our intentions for
68:33 - our code base which i love that was one
68:35 - of our kind of subtle themes yesterday
68:37 - was how our code really communicates
68:39 - with our teammates so we're delighted to
68:41 - have formidable engineer becca bailey
68:44 - show us how to find joy in refactoring
68:47 - uh by marie condoing uh up to levels of
68:50 - organization and cleanliness that marie
68:52 - kondo would absolutely approve so please
68:54 - everyone join us in welcoming becca
68:56 - bailey
69:04 - hi i'm becca
69:06 - i'm a software engineer and engineering
69:08 - manager at formidable
69:10 - and today i'm going to be talking about
69:12 - refactoring and sharing some strategies
69:15 - for how we can hopefully make
69:16 - refactoring
69:18 - one less stressful thing that we have to
69:20 - deal with this year
69:25 - for those of you who are not closely
69:27 - following american or japanese popular
69:30 - culture
69:32 - marie kondo is the author of the
69:34 - life-changing magic of tidying up
69:37 - as well as the star of the life-changing
69:39 - manga of tidying up
69:42 - and a netflix series
69:47 - a couple years ago i decided to read her
69:49 - book and i attempted to put her
69:52 - principles into practice
69:54 - in my messy 600 square foot chicago
69:57 - apartment
69:59 - i really expected to hate this entire
70:02 - experience
70:04 - but actually i didn't
70:09 - in addition to learning some new folding
70:11 - skills
70:12 - i learned about how reducing the number
70:15 - of things that i own
70:16 - helps me to better appreciate the things
70:18 - that i have
70:20 - and when we know and appreciate the
70:23 - things that we have
70:25 - it turns out that we're less likely to
70:26 - leave them lying around on the floor
70:30 - so this got me thinking about how to
70:32 - connect these these practices to the
70:34 - code that i write
70:35 - because there are many days when none of
70:38 - my code brings me joy
70:41 - but unfortunately just throwing it away
70:43 - is not a viable option
70:46 - so this brought me back to the concept
70:48 - of refactoring
70:53 - what is refactoring
70:56 - well according to the book refactoring
70:59 - by martin fowler
71:01 - code refactoring is the process of
71:03 - restructuring existing computer code
71:06 - changing the factoring
71:08 - without changing its external behavior
71:13 - so there's a word in there that we might
71:15 - not be familiar with which is factoring
71:18 - and factoring refers to the internal
71:21 - parts of a program
71:23 - or the implementation details
71:26 - so let's note that if we're making
71:29 - breaking changes to the public-facing
71:32 - api of a library
71:34 - or even a top-level component
71:37 - while this is often necessary it's not
71:39 - actually by definition refactoring
71:42 - refactoring means changing the inside
71:45 - without changing the outside
71:52 - this brings me to my personal definition
71:55 - of refactoring
71:57 - to me refactoring is an opportunity to
72:00 - change your mind and ask yourself
72:03 - what decisions would i make differently
72:05 - if i could write this code again
72:11 - sometimes when we talk about refactoring
72:14 - we're referring to the process of
72:16 - modernizing our syntax
72:20 - in react this might involve refactoring
72:23 - from
72:24 - a class to a function component
72:27 - replacing deprecated life cycle methods
72:30 - or converting state and life cycle
72:32 - methods to hooks
72:37 - this is often a great and necessary
72:39 - thing to do but i think this is a
72:42 - separate concern
72:44 - from refactoring for code style and
72:46 - readability
72:48 - modernizing your syntax is a part of
72:51 - refactoring
72:52 - but at least for me it's not the entire
72:55 - reason that i refactor
73:00 - you might discover that using hooks
73:03 - context suspense or other modern react
73:06 - apis
73:07 - might aid you in your pursuit of human
73:09 - readable code
73:11 - but in my view modern syntax is a tool
73:15 - and not an end goal when refactoring
73:22 - refactoring isn't just about code
73:24 - quality either
73:26 - in my experience
73:28 - the pursuit of artfully crafted software
73:31 - can lead to a lot of pride about your
73:33 - work
73:34 - but unless you're deliberate about
73:37 - respecting deadlines
73:39 - embracing alternate viewpoints and
73:41 - collaborating with your team
73:43 - it sometimes just makes software
73:46 - engineering more exclusionary to people
73:48 - who don't subscribe to a specific set of
73:51 - engineering principles
73:55 - one of the things i really loved about
73:57 - marie kondo's philosophy is that it's
74:00 - not just about buying stuff from the
74:02 - container store
74:03 - and redecorating your house to make it
74:05 - look like a beautiful minimalist
74:07 - magazine cover
74:09 - likewise
74:11 - the end goal of refactoring isn't to
74:13 - have perfect or beautiful code for its
74:15 - own sake
74:21 - so when do i refactor
74:26 - when i organized my apartment a couple
74:28 - years ago my goal was to feel less
74:31 - stressed every time i came home from
74:32 - work
74:34 - after dealing with this anxiety for a
74:36 - few months i knew it was time to
74:38 - reorganize
74:40 - likewise there are some things that tell
74:43 - me it's time to refactor my react code
74:47 - my general rules are to refactor when
74:50 - your code is hard to test
74:53 - hard to
74:54 - understand or hard to change
74:58 - for example if you find yourself mocking
75:01 - out a lot of external libraries
75:04 - or walking on eggshells around your code
75:06 - base or just scratching your head a lot
75:09 - when you try to read your own code
75:12 - it might be time to refactor
75:15 - but more specifically
75:18 - here are some things that i see in react
75:20 - projects
75:21 - that clue me in that i might need to
75:24 - change some things
75:26 - these things include out of control
75:28 - props
75:30 - so usually if i have 27 props on one
75:33 - component that tells me that there's
75:35 - something wrong
75:37 - nested conditionals
75:39 - so conditionals that are really hard to
75:41 - follow
75:43 - confusing variable names
75:46 - or components that are doing too many
75:49 - things that are uncertain about what
75:51 - their responsibilities actually are
75:57 - these are some general best practices as
76:00 - i know them
76:01 - but i'll tell you this
76:04 - if you do your job for a while if you do
76:06 - regular code reviews and collaborate
76:09 - with your team
76:10 - and practice refactoring
76:12 - i promise you you will develop your own
76:14 - sense for knowing what to refactor
76:19 - a couple more things to note before we
76:21 - move on
76:23 - first of all
76:25 - it's really common to think about
76:26 - refactoring as a negative thing
76:29 - as something that only happens when we
76:31 - write bad code
76:35 - i call this get blame refactoring
76:42 - however
76:44 - refactoring doesn't mean that you or
76:47 - someone else did something wrong
76:50 - maybe you made the best choice you could
76:52 - with the knowledge you had in the moment
76:54 - but now you have more information or
76:57 - more expertise and you've changed your
76:59 - mind
77:00 - it's okay to change your mind
77:03 - there's no shame in refactoring
77:07 - or having someone else refactor your
77:10 - code
77:16 - so as we're talking about how to
77:19 - refactor
77:20 - let's talk about discarding
77:23 - a key tenet of marie kondo's philosophy
77:26 - is to start with discarding
77:29 - while i know most of us have some amount
77:31 - of legacy code to maintain and we don't
77:34 - have the ability to just throw out
77:36 - everything that doesn't bring us joy
77:39 - it's also not unusual for us to hold on
77:42 - to code that we don't need anymore
77:46 - maybe it's a class that your co-worker
77:48 - wrote
77:49 - a year ago that you don't quite know
77:51 - what to do with
77:53 - or some utility functions that are no
77:55 - longer useful
77:57 - or some old comments that don't apply
77:58 - anymore
78:00 - perhaps we're afraid to get rid of code
78:02 - because we didn't write it
78:04 - we don't understand it
78:06 - or we're uncertain about whether we're
78:08 - going to need it someday
78:12 - but you can discard it
78:15 - worst case scenario
78:16 - we can use three magic words to bring it
78:19 - all back again
78:23 - this is one of my favorite things about
78:25 - programming because no matter how messy
78:28 - it gets no matter how much we mess up
78:30 - it's really easy to reset everything and
78:33 - try again
78:39 - so i don't know about you
78:41 - but the practice of refactoring isn't
78:43 - always a joyful experience
78:46 - making changes to the structure of our
78:48 - components can result in confusing
78:50 - errors
78:52 - test failures and unintentional changes
78:54 - to the to the behavior of our components
78:58 - have you ever introduced a bug by
79:00 - refactoring
79:01 - i know i have
79:06 - so
79:07 - this is why i love
79:10 - writing tests
79:12 - testing sounds stressful
79:15 - especially if you're not used to doing
79:17 - it
79:18 - but
79:19 - believe me when i tell you that this is
79:21 - the number one thing you can do to
79:24 - transform your refactoring work
79:27 - from a chore
79:29 - to an actual relaxing experience
79:34 - however
79:36 - not all tests are made alike
79:38 - so here's an example of a way that tests
79:41 - can
79:42 - not help us refactor
79:46 - let's say i have a simple class
79:47 - components
79:49 - i'll call this a drawer since marie
79:51 - condo loves putting things in drawers
79:56 - i have some states
79:59 - and a render function with some
80:01 - conditional logic
80:03 - now if you don't understand what's going
80:05 - on here don't worry because neither do i
80:08 - and that's why i'm refactoring this
80:09 - component
80:13 - so using a tool like storybook i can
80:15 - test that this component works
80:24 - and
80:25 - let's say that this component has some
80:27 - existing tests
80:30 - this syntax is a little less common now
80:32 - but if your code has been around for a
80:34 - few years there's a good chance that i'm
80:37 - using a test renderer like enzyme to
80:39 - test my code
80:42 - enzyme allows me to access the props and
80:44 - state of my component in order to make
80:46 - test assertions against them
80:50 - i can run my tests and everything works
80:53 - great so far
80:57 - so now i'm going to start refactoring
81:00 - okay i know i said that we shouldn't
81:02 - refactor just to modernize syntax
81:05 - but
81:05 - hooks are cool so i'll start by
81:08 - switching this class component out for a
81:10 - function with a used state hook
81:16 - and look at that it got shorter already
81:19 - but
81:21 - hold on now
81:23 - when i run my tests again
81:26 - something is broken even though i know
81:29 - the component works the same way it did
81:31 - before
81:33 - so
81:33 - let's read that error message
81:36 - it says
81:38 - shallow wrapper states can only be
81:40 - called on class components
81:43 - well
81:44 - at least it's a pretty helpful message
81:46 - because it tells me that i'm not able to
81:49 - access the state
81:51 - of my component anymore because it's no
81:53 - longer a class
81:55 - well it works the same way
81:58 - but this tells me something about my
82:00 - tests
82:02 - the things i was testing
82:04 - were actually the implementation details
82:08 - if i can break my tests by changing the
82:10 - name of my state variable
82:12 - or changing the internal function name
82:15 - or removing my state altogether
82:18 - this makes refactoring difficult
82:21 - the thing that i care about when
82:23 - refactoring is actually the way that
82:25 - this component behaves
82:30 - so if i look back at this component from
82:32 - the perspective of a user
82:35 - i can see that when i click the open
82:37 - button the contents are visible
82:40 - and when i click the close button the
82:42 - contents are hidden again
82:45 - so let's write a test that says this
82:47 - instead
82:50 - while i can still use enzyme to do this
82:53 - i'm as long as i'm changing my tests i'm
82:57 - actually going to switch my tests to use
82:59 - react testing library
83:01 - which is a test renderer built for these
83:04 - kinds of behavior integration tests
83:08 - well
83:09 - this time i'm not using any internal
83:11 - component apis
83:13 - but i'm able to say what the user should
83:17 - be able to do
83:19 - so now i'm rendering my components
83:23 - i'm clicking the button with the text
83:26 - that says open
83:29 - and now i'm expecting my
83:33 - component to have some inner html
83:37 - that is the that is the props or that's
83:39 - the children
83:41 - i no longer care about
83:44 - my inner props or states
83:48 - so this test passes for both versions of
83:51 - my components
83:53 - once i add a couple more tests i should
83:55 - be start good to start making more
83:57 - changes to this component
83:59 - without so much fear of breaking things
84:05 - so here's the part that makes
84:07 - refactoring really satisfying for me
84:10 - which is having the ability to make
84:12 - small incremental changes
84:15 - while relying on my tests as the source
84:17 - of truth
84:22 - now i can gradually untangle these
84:24 - nested conditionals
84:28 - i'll start by adding one overarching
84:30 - conditional
84:31 - and then step by step i'll remove the
84:34 - ternary statements that are making
84:35 - things more confusing
84:39 - if i were actually refactoring this i
84:41 - would be using a test watcher to check
84:44 - after each step to ensure that my
84:45 - functionality hasn't changed
84:48 - and the final result might tell you a
84:51 - little bit about the code that i
84:52 - appreciate
84:54 - notice how i haven't made this function
84:56 - any shorter
84:58 - is actually got a few more lines of code
85:00 - and a little bit more repetition
85:03 - but
85:05 - because there's one conditional
85:07 - instead of three
85:09 - it's actually easier for me to tell
85:10 - what's going on
85:15 - now this isn't strictly related to
85:17 - refactoring but along the way you might
85:20 - discover another pain points which is
85:22 - file structure and code organization
85:25 - and since i am talking about
85:28 - marie kondo i should also talk a little
85:31 - bit about putting things away
85:35 - marie kondo would say that the goal of
85:36 - reorganizing
85:38 - isn't just to make it easier easy to
85:40 - find your belongings
85:42 - but also to put them away
85:45 - for example
85:47 - if this
85:48 - the shoes you wear every day probably
85:51 - shouldn't be stored in a bin under your
85:54 - bed
85:55 - because you're never gonna remember to
85:57 - put them there
86:00 - likewise the goal of file organization
86:02 - isn't just to make it easier to find
86:04 - things
86:05 - but also to make it easier to know where
86:08 - to put new code
86:11 - there are lots of philosophies on this
86:13 - but my basic rule of thumb
86:15 - is to group things together that are
86:17 - used together
86:19 - and to avoid really deep nesting
86:23 - because if we use lots of deep nesting
86:26 - and a really complex file structure
86:29 - it's going to be much harder for me or
86:31 - the next person who comes along to know
86:34 - where to put things in that complex
86:36 - structure
86:38 - if your imports are a mile long it might
86:40 - be time to rethink your component
86:42 - organization
86:43 - and that will help your refactoring to
86:45 - go a little bit more smoothly
86:52 - so for me
86:54 - i like to think of refactoring as a
86:55 - daily practice
86:58 - every time we refactor we have an
87:00 - opportunity to leave something a little
87:02 - better than we found it
87:07 - now i haven't sent out an official
87:09 - survey
87:10 - but i'm willing to bet that the number
87:13 - one reason why we don't refactor all our
87:16 - code all the time
87:18 - is because we don't have time
87:22 - when there are looming deadlines and any
87:25 - number of things going on in the world
87:27 - right now
87:29 - the struggle is real
87:35 - so rather than refactoring all at once
87:39 - the more we can make refactoring a part
87:41 - of our daily routine at work
87:44 - the easier it will be to find the time
87:46 - and to get the buy-in from our team
87:50 - i don't think it has to be a prioritized
87:52 - item on your backlog by itself
87:55 - it can just be something that you take
87:57 - an extra few minutes to do while you're
88:00 - working on a new feature
88:02 - or even just when you have a few spare
88:04 - minutes
88:05 - when you are
88:07 - when you're
88:08 - to clean up something that you've
88:09 - already done
88:12 - now i don't want to get anybody in
88:14 - trouble here
88:15 - but i'm going to say that most of the
88:18 - time
88:19 - you probably don't even need to mention
88:21 - it to your product manager that you're
88:23 - doing it
88:26 - but
88:27 - speaking of product managers
88:30 - how do i get other people on board
88:33 - especially when we have bigger
88:35 - refactoring work to do
88:37 - because sometimes this is where it gets
88:39 - really tricky
88:44 - if we don't have a team that values
88:46 - thoughtful code reviews and
88:47 - collaboration
88:49 - chances are
88:51 - there will be someone organizing their
88:53 - one little drawer for all the rest of
88:55 - your house stays messy
88:57 - or worse
88:58 - you will all be organizing your drawers
89:01 - and there will be a different system for
89:03 - each one
89:04 - and there will be no consistency
89:10 - one of the best things you can do for
89:12 - your team is to be consistent in code
89:14 - quality and style
89:16 - so the goals when refactoring are clear
89:19 - this might mean making some compromises
89:21 - with your team members about code style
89:25 - and how you're writing it
89:30 - sometimes in my experience it helps to
89:33 - document the this style and testing
89:36 - practices
89:38 - that way even if there are older or more
89:41 - inconsistent parts of the code base
89:44 - we have a shared idea of what we're all
89:46 - working towards as we're refactoring and
89:49 - making incremental improvements
89:54 - like the end goal of tidying up is to
89:56 - better appreciate the things you own
90:00 - the end goal of refactoring is to better
90:02 - understand your own code
90:04 - and build systems that other people can
90:07 - also use and understand
90:12 - now this might be a little out there for
90:15 - you
90:15 - but
90:16 - i think marie kondo would say
90:19 - that the key to refactoring well
90:22 - is gratitude
90:24 - for the work that has already been done
90:27 - both by you and by other people who have
90:30 - worked on your code base
90:35 - gratitude is the antidote to the
90:37 - scarcity mindset that tells us we need
90:39 - to stockpile 23 pairs of jeans just in
90:42 - case the apocalypse happens and we can
90:44 - never go to the gap again which
90:46 - admittedly sounded a lot crazier
90:50 - when i was writing this talk nine months
90:52 - ago
90:55 - but anyway
90:56 - we can have gratitude even for the
90:59 - things that we're getting rid of even
91:02 - for the code that doesn't work anymore
91:04 - or that doesn't fit our current
91:06 - standards
91:09 - marie kondo says you'll be surprised at
91:12 - how many of the things you possess have
91:14 - already fulfilled their role
91:17 - by acknowledging their contribution and
91:19 - letting them go with gratitude
91:21 - you will be able to truly put the things
91:24 - you own
91:25 - and your life in order
91:28 - when i re approach my refactoring
91:30 - process with gratitude
91:32 - i can acknowledge that i learned
91:34 - something from this code
91:37 - even if the thing i learned
91:40 - is that i don't want to write code like
91:42 - that anymore
91:47 - now go forth and write code that sparks
91:49 - joy
91:50 - thank you very much
91:57 - amazing
91:58 - love it when talk spark joy amazing talk
92:01 - from becca please everyone let's give a
92:03 - warm virtual round of applause for becca
92:06 - bailey and this awesome talk about khan
92:08 - mar in your code konmariing your code
92:11 - and yeah we have the extra special treat
92:14 - of having becca live in our virtual
92:16 - studio with us today um so we get to
92:19 - chat with her right now so everyone
92:21 - please join us in welcoming becca to the
92:23 - stage
92:26 - hi
92:28 - welcome we're so pleased to have you
92:30 - here
92:31 - thank you so much for the amazing talk
92:35 - um we are just i'm i'm i love this topic
92:38 - i love this idea that uh you know you
92:40 - can kind of find more joy in your code
92:42 - base by approaching the code that you no
92:45 - longer need as um not a burden but
92:48 - something a nice you know something to
92:51 - approach with gratitude as you said in
92:53 - the end um so i just i'm so curious how
92:55 - did you come to choose this topic to
92:58 - talk about today what made you choose of
93:00 - all the many things that you could talk
93:01 - about at react-a-thon uh what made you
93:03 - choose this one
93:05 - yeah so back
93:07 - i guess it was like a year and a half
93:08 - ago when i was actually writing this
93:10 - talk um because of all the things that
93:13 - have happened this year
93:14 - i was in a job where i was just
93:17 - refactoring a lot um it was a code base
93:21 - that had been written very quickly
93:23 - and in order for me to make changes to
93:26 - it it just involved a lot of reworking
93:29 - of the code that was already there and
93:32 - it was not always a very pleasant
93:34 - experience it was really hard sometimes
93:36 - because as the new person on the team
93:39 - and
93:40 - just in a messy code base it was really
93:42 - like there was a lot of pressure not to
93:44 - break things and
93:45 - not to make it worse than it was to
93:48 - begin with so i learned pretty quickly
93:51 - how to use testing retroactively in
93:55 - order to refactor well and that was
93:57 - hugely helpful for me
93:59 - and i just wanted to share that
94:02 - awesome you mentioned that sometimes
94:05 - it's scary to refactor or deprecate code
94:08 - especially if you didn't write it
94:11 - and especially if you're a newer
94:12 - engineer on the team uh i can imagine
94:14 - coming into a team and seeing code that
94:17 - a very senior engineer someone who's
94:19 - kind of moved on into even moved into a
94:22 - management because maybe they're even
94:23 - your boss right uh they wrote that code
94:26 - and now it's your turn to delete it all
94:29 - so um and that can be scary so i'm i'm
94:32 - curious do you have advice for how folks
94:34 - can build the confidence to refactor or
94:36 - even throw out
94:37 - all of that non-joyful code
94:41 - yeah um and that can be really scary um
94:45 - i think my advice is just to remember
94:47 - that
94:49 - just that if you're coming to code that
94:51 - somebody else wrote that is hard for you
94:53 - to understand or hard for you to test or
94:56 - hard
94:57 - hard to work with
94:59 - you're probably not the only one who
95:01 - feels that way there are probably a
95:03 - bunch of other people on your team or
95:05 - junior developers or new people who
95:07 - would come on after you who would feel
95:09 - the exact same way
95:11 - so
95:12 - just remember that it's not just you
95:15 - and that it's okay to
95:18 - to change things over time
95:21 - and it even if somebody even if the
95:23 - person who wrote it is like the best
95:24 - engineer at your company i'm betting
95:27 - that there are things that they would
95:28 - look back on and be like oh man i can't
95:30 - believe i wrote it that way
95:33 - yeah i love that i love remembering that
95:34 - you're you're not alone that like if
95:36 - you're struggling with something you're
95:38 - not the only one who's gonna struggle
95:39 - with that that's just amazing advice in
95:42 - general i think and i know for um you
95:44 - know a lot of us and as we heard from
95:46 - your bio um you also made the transition
95:49 - into tech from a different field from
95:50 - from being a teacher right very exciting
95:54 - yeah and we had we i i as i mentioned
95:56 - yesterday i get really excited
95:57 - especially for uh to hear about folks
95:59 - who are engineers who used to be
96:00 - teachers because that's also my
96:02 - background so um you know in the spirit
96:04 - of remembering that there are folks out
96:06 - there who are thinking about making that
96:07 - transition maybe going through that
96:09 - transition remembering that those
96:11 - struggles again that you're not alone
96:12 - that other folks have been through this
96:14 - would you mind sharing with us a little
96:15 - bit about
96:16 - how you decided to make that change and
96:18 - what that process was like for you
96:21 - yeah absolutely um so
96:24 - i
96:25 - graduated from college with a degree in
96:27 - music education i was really excited to
96:31 - be a teacher um i was living in chicago
96:34 - at the time so i was teaching in a lot
96:35 - of like chicago public schools after
96:38 - school programs
96:41 - i spent a year teaching abroad in
96:43 - guatemala which was really fun
96:47 - but then after i after that experience i
96:50 - was coming back to the united states
96:52 - um
96:53 - i
96:55 - had like a bajillion different things on
96:57 - my resume didn't couldn't really find
96:59 - like a steady job that i could stick
97:01 - with for a long time because of the
97:04 - recession and just the challenges in
97:07 - education right now
97:09 - um
97:10 - so during that time that i was living
97:12 - abroad i was blogging a lot and i was
97:17 - spending a bunch of time like fixing my
97:19 - wordpress blog and it just became a huge
97:22 - interest of mine
97:24 - so
97:25 - i discovered all these resources for
97:27 - learning to code online um
97:30 - found
97:31 - meetup groups and like a support
97:34 - community and then yeah basically i came
97:36 - back to united states and decided to
97:38 - make that transition and
97:40 - went to dev boot camp
97:43 - took a job as like that had an
97:45 - apprenticeship program where i was
97:46 - really able to work my way into like a
97:49 - full-time engineering job
97:51 - so
97:52 - yeah i mean it's basically the story of
97:55 - like i
97:56 - had i was struggling to find a steady
98:00 - find steady work and make money and
98:02 - found something else that was a little
98:04 - bit better for that
98:07 - i'm so happy
98:09 - yeah
98:10 - go ahead end up here with us
98:13 - sorry me too yeah i think your story is
98:16 - is very um
98:17 - is very much
98:19 - going to resound with a lot of people a
98:20 - lot of people probably have similar
98:22 - echoes to what you've experienced so
98:24 - thank you so much for sharing with us
98:26 - today and for for giving us this
98:27 - excellent talk uh where can folks follow
98:30 - you
98:31 - or your work where can they hear more
98:33 - from you
98:35 - yeah um well you can for all of my
98:38 - contact info you can go to my website
98:40 - which is becca dot is pretty easy to
98:42 - remember and that should have my twitter
98:45 - links my blog posts um
98:50 - my blog has been kind of quiet for a
98:51 - while thanks pandemic but hopefully
98:54 - we'll have a few more things up there
98:55 - after this conference for you to follow
98:58 - and yeah i would be very happy to talk
99:01 - to you more in the react-a-thon chat or
99:05 - on twitter
99:06 - you can find me online
99:09 - awesome awesome well thank you thank you
99:11 - so much
99:13 - been such a pleasure
99:15 - everyone please join us in thanking
99:17 - becca for an amazing talk and thanks so
99:19 - much for joining us for this chat
99:22 - you're welcome have a great day
99:23 - react-a-thon
99:27 - all righty wow
99:29 - i love that we can kick off the day with
99:31 - all this uh joy and and positivity and
99:34 - refactoring and tough subjects like that
99:37 - and
99:37 - talk about changing careers too i love
99:39 - that this is sort of becoming a a subtle
99:42 - uh sub-theme of the conference
99:45 - yeah absolutely and i think we're gonna
99:48 - keep on talking about hard things today
99:50 - we've got an excellent talk coming up
99:52 - here
99:53 - in just a moment from lee robinson
99:56 - lee is a developer a writer and a course
99:59 - creator
100:00 - he currently works at versailles a
100:02 - solutions architect helping educate and
100:04 - grow the next js community he frequently
100:07 - speaks about front-end development
100:09 - design and the future of the web
100:13 - yeah and today um we are going to be
100:16 - hearing from lee about data fetching
100:18 - with nexjs um so this is a hybrid react
100:21 - framework that empowers you to choose
100:23 - your data fetching strategy on a
100:26 - per-page basis which is pretty amazing
100:29 - and so i think we're going to hear a lot
100:31 - about client-side rendering server-side
100:33 - rendering static site generation
100:35 - incremental static regeneration when to
100:38 - use all of those and what those mean
100:40 - which i certainly need to learn
100:43 - um yeah and so you know we'll see i
100:45 - don't know maybe he'll tell us about the
100:46 - next generation huh
100:49 - but um
100:50 - no just no
100:51 - star trek fans about okay all right well
100:54 - anyway uh if you're not familiar with
100:55 - nexjs don't worry you're in good company
100:57 - me neither so we're gonna learn about it
100:59 - from leigh and we're gonna hear about
101:01 - some of the main features of the
101:02 - framework so without further ado please
101:04 - join us in welcoming lee to the stage
101:07 - hey everyone my name is lee robinson and
101:09 - i'm a solutions architect at burcell and
101:11 - today i'm going to be talking about
101:12 - nextgs i'm going to give a little
101:14 - introduction and then talk about the
101:16 - different ways that you can do data
101:17 - fetching inside the framework
101:19 - if you haven't heard of nextgs that's
101:21 - okay i'll give a quick introduction it's
101:24 - the most popular and the easiest way to
101:26 - build react applications and it includes
101:29 - a lot of functionality that you would
101:32 - need to probably use in your react
101:33 - application anyway as an opinionated set
101:37 - of defaults that are easily extensible
101:39 - and easily customizable so routing is
101:42 - included in the framework by using next
101:44 - router
101:45 - by creating a new file at pages slash
101:48 - index.js or about.js you can use file
101:52 - system based routing to easily create
101:54 - the different routes in your application
101:56 - it has image optimization built in using
101:58 - the next image component
102:00 - there's react fast refresh so it's very
102:04 - easy to work with the framework locally
102:06 - and see fast rebuilds and have a great
102:08 - developer experience
102:10 - to host files all you need to do is drop
102:12 - them inside of a public folder there's
102:14 - built-in support for css and sas and it
102:17 - easily works with popular libraries like
102:19 - tail and css
102:20 - if you need to do serverless functions
102:22 - or any sort of back-end functionality
102:24 - you can actually merge the front-end
102:27 - world and the back-end world using api
102:29 - routes by just making a new file at
102:32 - pages api
102:33 - user.js or something similar there's
102:36 - even support for internationalized
102:37 - routing
102:39 - typescript support and last but not
102:41 - least a really important one is
102:44 - code splitting and bundling so when i
102:46 - visit the index right of my application
102:49 - we're only serving up the javascript for
102:51 - that route which means that our pages
102:53 - are going to be more performant because
102:55 - we're shipping less javascript to users
102:57 - and it also
102:59 - if there was an error on the about page
103:01 - or the contact page that javascript
103:03 - would be in a separate bundle which
103:05 - helps improve the resiliency of your
103:07 - application as well and that's all
103:08 - configured out of the box so you don't
103:10 - have to do anything so lots of great
103:12 - defaults in the next js framework and
103:14 - because of that we're seeing nextgs
103:16 - growing very quickly so over the past
103:19 - couple years it's became the most
103:20 - popular framework for building react
103:22 - applications and
103:24 - excitingly we're seeing it being used
103:27 - from the medium to large size businesses
103:29 - all the way up into the enterprise so
103:31 - lots of great logos on here that we love
103:33 - to see using next.js and lots of happy
103:36 - customers
103:37 - and as i mentioned at the start of this
103:39 - i work at versailles which is the
103:41 - easiest way to deploy your react
103:43 - applications
103:44 - and our mantra is develop preview ship
103:48 - so you start by developing your next.js
103:51 - application taking these building blocks
103:53 - of react components and providing a
103:56 - great developer experience
103:58 - then you push it to a get branch and you
104:01 - get an automatic preview url where you
104:03 - can view your changes
104:05 - collaborate with stakeholders and
104:08 - share across your company to developers
104:10 - or designers or leadership then you just
104:13 - simply merge your branch into production
104:16 - and it's immediately available on
104:19 - vercell's global edge network and it
104:20 - takes care of all the hard things for
104:22 - you like setting up domains and dns and
104:25 - ssl encryption asset compression cache
104:28 - invalidation all that stuff are
104:31 - automatically handled by versailles edge
104:32 - network with a nice user experience and
104:35 - developer experience to go with it so
104:37 - that's the company i represent and
104:39 - they're also the creators of nextgs and
104:42 - what i want to talk about today is
104:45 - the different data fetching strategies
104:46 - with nextgs because it's something that
104:48 - i see people get tripped up with
104:51 - a lot so we're going to start off with
104:53 - the most basic next js application you
104:55 - could start here with just mpx create
104:58 - next app or by adding next
105:00 - react and react on to your application
105:02 - and then all it takes to build an xgs
105:04 - application is one file so pages slash
105:06 - index.js or about.js and when you export
105:10 - a react component from your file that's
105:13 - all it takes and this file will be
105:16 - pre-rendered to html on the server
105:20 - now
105:21 - there's a variety of different data
105:23 - fetching methods that you can do with
105:24 - next.js you've probably heard of some of
105:27 - these you have client-side rendering
105:29 - server-side rendering static site
105:31 - generation and you also have incremental
105:34 - static regeneration which we'll get to
105:35 - here very shortly so the the first
105:38 - concept that i want to talk about is
105:40 - pre-rendering so no pre-rendering is a
105:44 - plain react.js application on that
105:46 - initial load the app has not rendered
105:49 - and you just see a white screen you
105:51 - might have seen this before if you tried
105:52 - to load a react application with a large
105:54 - bundle with a very very slow internet
105:57 - connection
105:58 - then after that javascript loads and the
106:01 - hydration period happens the react
106:03 - components are initialized and that app
106:05 - becomes interactive so that's no
106:07 - pre-rendering
106:08 - with next.js
106:10 - you're using pre-rendering so on that
106:12 - initial load the pre-rendered html is
106:14 - displayed and it comes from the server
106:17 - then as the javascript loads and your
106:19 - application hydrates those components
106:22 - become initialized and it becomes
106:23 - interactive so for example like links
106:27 - so the first data fetching strategy i
106:28 - want to talk about is static generation
106:30 - and this is where your html is in one
106:33 - case generated at build time and then
106:36 - reused for each request so for example
106:38 - we build a production build of our
106:39 - application with next build
106:42 - then this html is generated and when a
106:46 - request is made to your page or your
106:48 - website
106:49 - every single request is going to reuse
106:51 - that statically generated html file
106:53 - which is really easily hosted at the
106:55 - edge by something like versel
106:58 - now there's two different types of
106:59 - static generation without data and with
107:01 - data
107:02 - so if we think about that about example
107:04 - that i showed previously very simple
107:06 - react component when you do a next build
107:09 - and that html is generated since we
107:12 - weren't doing any external data fetching
107:14 - that page is going to be pre-rendered
107:17 - using static generation without data
107:22 - i would say this is somewhat common if
107:24 - you have like an index page or other
107:25 - marketing pages where you just have
107:27 - static markup and you don't need to
107:29 - fetch any external data but you probably
107:32 - also want to do static generation with
107:34 - some external data sources so for pages
107:37 - that need to fetch that data when you
107:39 - run next build
107:41 - it will fetch that external external
107:43 - data so for example information about
107:45 - your products or information about
107:48 - your blog posts and then the html will
107:50 - be generated after that promise resolves
107:53 - and you fetch that information
107:55 - so for example i just got a quick code
107:57 - snippet here the main thing to focus on
107:59 - is get static props
108:01 - when this function is exported
108:04 - when this function is exported from your
108:06 - react component from your page
108:09 - you just have this function get static
108:10 - props it takes in some context you can
108:12 - make an api call to fetch something like
108:14 - products and then when you return these
108:17 - products as a prop it's forwarded to
108:20 - your react component as you see we have
108:22 - products available here now and now you
108:25 - can iterate over those products and
108:26 - display them out as a list for example
108:30 - and the really cool thing about this too
108:32 - is
108:33 - with just one extra key you can actually
108:36 - make this incrementally
108:38 - regenerate now what i mean by that is if
108:41 - you ran a full build of your application
108:43 - at build time you would build all of
108:45 - these files and you would ship them out
108:48 - to something like for sale put them on
108:50 - the server and when request comes in
108:52 - they wouldn't be
108:53 - recreated they would be static for the
108:55 - life lifetime of your application until
108:57 - you did a rebuild but with incremental
108:59 - static regeneration
109:00 - we can actually set a revalidation
109:02 - period based on the cache control uh
109:06 - header http request header so for
109:08 - example if we say 60 seconds here
109:11 - when a request comes in and it's within
109:14 - those 60 second period it will just
109:16 - reuse that same existing html that's
109:18 - been statically generated
109:20 - after that the next request that comes
109:22 - in it tells our application hey you have
109:24 - stale data now and the subsequent
109:27 - request after that it will go and it
109:29 - will update the cache with the new data
109:32 - that's been fetched from the server so i
109:34 - have a quick example here that shows
109:36 - this very well using
109:38 - github issues and leaving reactions so
109:41 - in this example if you leave a
109:43 - [Music]
109:44 - you know a heart or a smiley face on
109:47 - this issue and then you go back to the
109:48 - demo you see it on the first request
109:50 - it's stale
109:52 - but then on the following request
109:54 - that in the background that new version
109:56 - of the page had been generated and then
109:58 - you see the cache gets invalidated and
110:00 - it gets updated with the new static
110:02 - version and you didn't have to do
110:04 - anything so the magic of nextgs handles
110:07 - this completely for
110:08 - you
110:10 - now there's another thing to consider
110:12 - with static generation which is when
110:13 - your page paths depend on some external
110:16 - data so git static props is one piece of
110:19 - the puzzle
110:20 - but what if i want to render out a bunch
110:22 - of different posts and i need you know x
110:25 - number of different urls for those posts
110:28 - so when you build the app you have to go
110:30 - fetch all the different posts you have
110:32 - available and then generate a path for
110:35 - each id of the blog posts in your blog
110:38 - and we can do this using git static pass
110:41 - which is another function that we can
110:42 - export from our
110:45 - file so for example here we have an api
110:48 - that we're talking to post we're
110:49 - fetching back some post
110:51 - and then we're iterating over that to
110:53 - tell next js all of the different ids
110:56 - that are available for our application
110:58 - so we return those paths and then we say
111:00 - that we aren't we don't want a fallback
111:03 - meaning that if one of those ids isn't
111:05 - available it will 404. now if you want
111:07 - to learn more about the other fallback
111:09 - methods go check out the data fetching
111:10 - documentation i don't have enough time
111:12 - to get into all of them today but i at
111:14 - least thought i'd mention them
111:16 - the next thing i want to talk about is
111:18 - server side rendering so on every
111:20 - request we're generating new html so on
111:24 - every visit that a user makes your
111:26 - website it's talking to the server
111:28 - there's a blocking request that's
111:30 - fetching that html from your server and
111:34 - you're probably doing this with data so
111:36 - the request comes in you fetch your
111:38 - products or your posts and then that
111:40 - html is generated and sent to your users
111:44 - so let's look at an example for this
111:46 - we're using a function called get server
111:48 - side props
111:49 - now again this is just a function that
111:51 - we export from our file we it runs in
111:54 - the node.js context so we can talk to
111:56 - things on the server and it's not
111:58 - included in our client side bundle so we
112:01 - can fetch some products again return
112:03 - those as props to our react component
112:06 - and it works exactly the same it's just
112:08 - on every request
112:10 - and the last one that i want to talk
112:11 - about is static generation without data
112:15 - and then you fetch on the client side so
112:17 - bear with me now
112:19 - we talked about pre-rendering
112:22 - in the very simple example where you
112:23 - were just serving up something that was
112:25 - static
112:26 - if we take a look at this example on the
112:28 - right which is the vercell dashboard
112:30 - we're seeing this nice loading skeleton
112:33 - and in this example we're doing the
112:35 - static generation without data where
112:37 - we're pre-rendering on the server and in
112:39 - this case we're pre-rendering a loading
112:41 - state
112:42 - the difference here is that on the
112:44 - client side when that javascript loads
112:46 - so at request time then we're making a
112:48 - request to fetch some external data and
112:51 - then we populate the rest of the page
112:53 - with that data so the projects and the
112:55 - deployments and my user information
112:57 - let's take a look at an example for that
113:00 - we have a profile and this is using a
113:03 - handy library that vercell has made
113:05 - called swr that is a react hook library
113:08 - for data fetching so if we focus in here
113:12 - we see that we're rendering a loading
113:13 - state we're pre-rendering that from the
113:16 - server and then on the client side we
113:18 - can use swr to talk to an api route or
113:21 - an external api which could be a rest
113:24 - api graphql whatever you want and then
113:27 - it returns that data and shows the name
113:30 - on the profile
113:32 - the best part about this is that nexus
113:34 - is a hybrid framework and what that
113:36 - means is that you don't have to choose
113:39 - any of the different data methods that i
113:41 - just talked about you can do static
113:43 - generation on your index page you can do
113:46 - server-side rendering for something like
113:48 - a facebook news feed where the content
113:51 - is very dynamic and needs to be updated
113:53 - on every request
113:55 - and then finally you could do static
113:56 - generation for a bunch of different
113:58 - posts on your blog posts or different
114:01 - products for your ecommerce site without
114:03 - leaving the bounds of your framework so
114:06 - nextgs works great for small projects
114:09 - and it scales up to really large
114:11 - projects always staying within the
114:13 - bounds of that framework and being able
114:15 - to do different types of data fetching
114:19 - and that's all i have today thank you so
114:20 - much enjoy the rest of the conference
114:22 - and feel free to reach out to me on
114:23 - twitter at lerob with three e's if you
114:26 - have any questions thanks
114:29 - all right
114:31 - thumbs up to this talk
114:34 - yes thank you so much lee for this
114:38 - amazing talk everyone please join us in
114:40 - thumbs upping and applauding
114:42 - virtually in the chat
114:44 - um and yeah it's just uh it's just so
114:47 - great to to see all of these options
114:49 - that we have um with next js so if you
114:52 - want to keep learning about that we've
114:53 - got
114:54 - again the chat and lots of ways you can
114:56 - connect with the speakers and i know a
114:57 - lot of other folks um are also
114:59 - interested in this so connect also with
115:01 - other conference goers but for now we
115:04 - have got more exciting uh content for
115:06 - you before we round out our
115:09 - talk session and get right into the
115:11 - topic table so we have another great
115:13 - talk coming up from brian larue who is
115:17 - the co-founder and cto of begin.com
115:19 - which is the fastest and easiest way to
115:22 - set up ci cd get ops for serverless web
115:24 - apps on aws and brian is also the
115:28 - creator and maintainer of openjs
115:30 - architect which is an open source
115:32 - framework for generating and deploying
115:33 - aws standard sam cloud formation and um
115:38 - also has coined the term fast stack
115:41 - so very exciting and bonus
115:43 - um they have a very cool url of arc dot
115:47 - codes so
115:49 - pretty pretty good url game there yeah
115:52 - yeah yeah
115:53 - so today brian is going to be talking
115:56 - about dino uh and i believe that there
115:59 - is some
116:00 - uh some confusion uh in the community
116:03 - about how to pronounce it maybe it's
116:05 - dino maybe we will learn in the talk
116:07 - that's one of the things i'm looking for
116:09 - in this talk is how do you pronounce
116:11 - this but also what is it maybe you
116:12 - haven't heard about dinner
116:15 - it is a brand new javascript runtime
116:17 - from the creator of node with many
116:19 - compelling characteristics he's going to
116:21 - be teaching us about how to put deno
116:23 - into production
116:24 - let's tune into this talk with brian
116:28 - hi everybody my name is brian leroux i'm
116:31 - the co-founder of arcdoc codes which is
116:33 - a tool for deploying serverless
116:35 - applications to aws
116:38 - and begin.com which is a tool for cicd
116:41 - to aws
116:44 - and today i am here to talk to you about
116:46 - putting deno into production
116:49 - you might be asking yourself
116:51 - what the hell is deno it's a good
116:52 - question denno is a next generation
116:54 - javascript runtime
116:57 - from the creators of node.js which is
116:59 - not controversial
117:01 - at all
117:02 - i think it's great in fact that we
117:04 - finally got some competition for node on
117:07 - the back end and bringing javascript to
117:09 - more places so it's less baggage of the
117:12 - past it's always a good thing more
117:14 - competition is always a good thing
117:15 - especially for a javascript program
117:18 - so knowing with a little bit about what
117:19 - detto is you're probably asking well why
117:21 - the hell should i care and that two was
117:23 - a good question
117:25 - and denno is important to you because
117:26 - it's got a lot of qualities that
117:28 - do make it interesting compared to the
117:30 - available options for
117:33 - server side or back-end javascript
117:36 - and that's we're going to get into in
117:37 - the talk today so the first thing i'm
117:39 - going to show you is a completely
117:41 - ridiculous benchmark that's going to
117:42 - make everybody angry so this is
117:45 - showing
117:46 - console.log in node and in deno
117:50 - in both cases i'm evaluating the result
117:52 - and i'm putting it through a system
117:53 - timer
117:55 - we can see
117:58 - node's a little bit slower
118:00 - now console.log is not a realistic
118:02 - program this is a very synthetic
118:04 - benchmark and i acknowledge that what
118:06 - we're testing here is the cold start
118:09 - the startup time of a trivial program
118:12 - and so this is testing the cold start of
118:13 - the runtime the
118:15 - application one time on the application
118:18 - so
118:19 - the reason this is important to you
118:21 - things are moving serverless things are
118:23 - moving towards single purpose uh
118:25 - distributed stateless little functions
118:28 - and these stateless little functions
118:30 - uh are started up out of
118:32 - nothing they're cold and if you have a
118:34 - slow cold start you have a slow program
118:37 - won't scale quickly and might even fall
118:39 - apart
118:40 - um nodejs is probably one of the best
118:43 - serverless runtimes today
118:45 - and deno is proving to be about twice as
118:48 - fast on cold start this is trivial stuff
118:51 - and probably won't matter for most
118:52 - applications but a large application
118:54 - those milliseconds could add up and this
118:56 - will keep things compelling and it's
118:58 - going to keep these runtimes on us
119:00 - they're going to keep getting faster
119:01 - which is great for us as javascript
119:03 - programmers
119:05 - the next part
119:07 - is often invoked for fuddy reasons
119:10 - not security and i think this is
119:11 - actually genuinely a really good thing
119:14 - to be thinking about today right now a
119:16 - node can do whatever node can do on your
119:18 - program and your program can do it to
119:20 - your system so when you install a node
119:22 - program
119:23 - um it's kind of got carte watch
119:26 - with deno we have to tell it explicitly
119:30 - what features we're going to give it
119:32 - access to and it splits those features
119:34 - up by disk
119:36 - network and
119:39 - a whole bunch of other stuff
119:41 - in this example at the bottom of the
119:42 - screen you can see i've got
119:44 - a tiny little demo program
119:47 - you'll also notice there's no
119:48 - dependencies which is pretty great all
119:49 - this stuff is built in
119:51 - and we're just going to encode a text
119:52 - file it says hello world
119:55 - and kind of underneath the header here
119:56 - i've got demo run index ts
120:00 - and it falls apart permission denied
120:03 - we did not have the ability to write to
120:06 - disk and so it wouldn't run that program
120:08 - so i had to run it again with the flag
120:11 - allow write or or you can allow all by
120:13 - just doing capital a
120:16 - and wrote our program
120:17 - or wrote our text file run our program
120:19 - and order text file
120:21 - so that's cool uh that is a feature that
120:23 - i think will be increasingly important
120:25 - to folks that are security conscious
120:27 - and it's just a nice thing to have
120:30 - now the big daddy here
120:32 - denno supports typescript out of the box
120:34 - everyone's loving typescript these days
120:35 - and a good reason and the reason this is
120:37 - important to you
120:39 - right now
120:40 - it's not only the first typescript but
120:41 - it includes
120:43 - jsx and dsx files which is dope
120:45 - so we can write our programs with react
120:48 - and they're going to run without a build
120:50 - step which is quite nice
120:53 - the build stuff is that bad but it's
120:55 - great to have this just built in
120:58 - also great to have built-in are web
120:59 - standards this one makes me particularly
121:02 - excited
121:03 - deno is sometimes described as a web
121:06 - browser for your terminal which i really
121:08 - like a lot
121:10 - um
121:11 - first thing you'll notice we've got es
121:13 - modules built in
121:14 - out the gate we've got wasm built in up
121:17 - the gate got fetch built in out the gate
121:20 - and a whole bunch of other browser
121:21 - globals are built in like
121:23 - alert confirm and prompt and this means
121:25 - more of your code's going to be portable
121:28 - without transpiling steps and so that
121:29 - means your code will be both portable
121:31 - and debuggable which is really nice
121:34 - dental comes with a bunch of built-ins
121:36 - also that are normally user land
121:38 - concerns so
121:40 - in the node ecosystem
121:42 - the idea is uh
121:44 - that the core is very small and that we
121:47 - abdicate a lot of the normal
121:50 - functionality and tooling to user land
121:52 - to compete over
121:53 - and this has been great for innovation
121:55 - there's been tons of change and tons of
121:56 - competitive products it's been kind of
121:58 - terrible for putting stuff together
122:00 - there's no vertical integration and a
122:01 - lot of this stuff is commodity and you
122:03 - shouldn't be arguing with your team over
122:05 - lender rules or testing or bundling or
122:07 - formatting this is all
122:09 - stuff that should just be handled for
122:10 - you and so deno does handle all this for
122:12 - you
122:13 - it has a built-in linker a built-in
122:14 - tester built-in formatter and built-in
122:17 - bundling
122:18 - it's also got a really comprehensive
122:20 - standard library in fact i'm going to
122:21 - jump out
122:24 - and uh pop up a web browser
122:28 - just go to safari
122:31 - wild man i'm gonna go to dinner.land
122:37 - i do recommend you check out denno.com
122:40 - and uh
122:42 - we'll check out
122:44 - the manual
122:46 - one-time api standard library and
122:48 - third-party modules
122:52 - so this is pretty cool so demo comes
122:54 - with like a nice manual that walks you
122:56 - through the various features so
122:58 - check that out it's like a book
123:02 - and
123:03 - because it's it itself uses typescript
123:06 - fairly extensively it's got amazing docs
123:08 - right out of the box
123:10 - you know we know uh what everything
123:12 - requires
123:15 - great documentation about how to use
123:16 - these things and it's
123:18 - almost like a mashup of the go standard
123:20 - library or runtime library and the
123:22 - browser runtime library
123:25 - which is
123:27 - it's neat all this stuff is just built
123:29 - in normally you'd be in npm installing
123:32 - tons of programs just to do simple stuff
123:34 - and in demo this is all just there for
123:36 - you
123:38 - and if it's not in the runtime there's
123:40 - also a standard library which is hosted
123:42 - by them
123:44 - these are
123:46 - frankly quite kind of a greatest hits
123:48 - album of of the mpm registry just
123:50 - anything you can think of that you
123:51 - needed or wanted out of npm is going to
123:53 - be
123:54 - in this standard library
123:56 - version by default and handled by
123:59 - by the demo project which is pretty
124:00 - great
124:02 - so you're not arguing to team over which
124:04 - uid library or which hashing functions
124:06 - or whatever
124:08 - too much in here to go through but one
124:10 - other one worth noting they are building
124:13 - a node.js compatibility layer
124:16 - they still have a ton of work to do on
124:18 - it but if you're
124:20 - looking for an open source project to
124:22 - get some commits into this is this might
124:24 - be a really great one to try out
124:26 - and then for finally just like with npm
124:29 - there is a registry and there are
124:31 - um user land modules but still
124:34 - you know there's 1300 modules
124:37 - so this is a great time to get in at the
124:38 - ground floor
124:40 - there's i don't know how many modules in
124:42 - npm but there's a lot more than a
124:43 - thousand
124:44 - and
124:45 - because so much is built in you might
124:46 - not need all this stuff
124:49 - um but it's it's worth checking out
124:53 - yeah so really comprehensive things are
124:55 - just built in just which is really great
124:58 - um so we're gonna run a little demo
125:00 - program in production and uh
125:02 - and then we'll pop back and see how that
125:04 - way
125:06 - let's go take a look at an application
125:09 - uh that i built for sign-in with slack
125:12 - and so this is just a common oauth user
125:15 - flow
125:16 - or
125:17 - click the assignment slack button takes
125:19 - us to slack
125:21 - slack's
125:22 - eventually going to load
125:25 - this oauth page
125:28 - it's
125:29 - asking for some information about me i'm
125:31 - going to hit oh wow that's going to send
125:33 - a request back to my local server
125:36 - with a code
125:38 - which deno is going to use to exchange
125:39 - for a oauth token which it gets
125:43 - my slack info
125:46 - and now i'm signed in
125:48 - and if we
125:51 - reload the page i'm still signed in
125:54 - and i can sign back up
126:00 - pretty cool so let's take a look at the
126:03 - code that made all that happen
126:08 - just in my deno
126:10 - ssr application folder
126:14 - and we'll start at the very very sort of
126:16 - top here
126:20 - we've got a package.json and a deno
126:22 - project and the reason i'm doing that is
126:24 - we're using architect to deploy it
126:27 - architect so this is a dependency
126:31 - uh we have a npm script here for
126:33 - starting a local developer sandbox
126:36 - we're
126:37 - letting architect know that we're using
126:39 - the demo runtime
126:40 - and then we want to have three lambda
126:42 - functions
126:44 - and the first lambda function is going
126:45 - to be for logging in
126:47 - it's going to point at this folder back
126:49 - and log in
126:50 - second lambda function is going to be
126:52 - for logging out it's going to point to
126:55 - backend logout
126:57 - and then the last line of the function
126:59 - will just intercept any traffic at all
127:01 - and we'll pump that into the front end
127:04 - as it should be
127:06 - this app has a dot emv file
127:08 - for
127:09 - environment variables for the oauth
127:12 - handlers so we've got a slack client id
127:14 - slack client secret and slack redirect
127:17 - you can get these by going to
127:18 - api.slack.com signing up and
127:20 - creating an application get your keys
127:24 - we'll start the front end of this app
127:26 - and just have a
127:28 - look at that
127:30 - so
127:31 - index.ts is the entry file to our our
127:34 - frontend
127:36 - um
127:37 - lambda handler
127:39 - and it's named handler and everything
127:42 - so this is a typescript file
127:44 - and
127:46 - we're going to respond with headers
127:49 - that we're going to be generating html
127:51 - we're going to give it a http status
127:53 - code of 200.
127:55 - i'm going to do the render and this is a
127:57 - jsx file which is pretty cool so
128:02 - uh
128:03 - here we're pulling in the es builds of
128:07 - react
128:08 - and react dom server
128:10 - and
128:12 - we're using a library for encoding a jwt
128:16 - token
128:17 - and then we pull in our app itself
128:19 - from our components folder so if we look
128:23 - at the actual render function here we're
128:25 - going to get the session
128:27 - we're going to grab the client id and
128:28 - the redirect environment variables
128:30 - if the session looks good we're just
128:32 - going to use that for props
128:35 - and if the session doesn't look good
128:36 - we're gonna get the client id and the
128:37 - redirect and we'll pass that as props to
128:40 - our app
128:41 - and we're just gonna render that app to
128:42 - strain
128:44 - and uh
128:46 - clubs are uncle
128:47 - getting the sessions a little bit hairy
128:49 - we're going to parse out the cookies
128:51 - from the request
128:53 - and when we find the cookie my session
128:56 - we're going to
128:57 - encode
128:59 - the value of that cookie as a jwt
129:02 - token or rather we're going to verify
129:05 - that it's a jwt token we're going to get
129:06 - the value of it
129:08 - so
129:10 - let's go take a look at the app
129:13 - um
129:13 - you'll notice here that we're using deno
129:15 - types to pull in the react
129:17 - type defs i just copied
129:19 - those in
129:21 - make it easier
129:23 - to use
129:25 - tsx or jsx the tsx is actually
129:30 - optional you can just do jsx as you can
129:32 - see so you don't have to do the
129:33 - typescript thing if you don't want to
129:35 - um
129:37 - but i think sometimes you'll want to
129:38 - anyways uh the app gets props and if you
129:41 - know this could have been a boolean is
129:43 - logged in but
129:45 - we're just looking for an avatar if the
129:46 - avatar is there we'll show the protected
129:48 - route
129:49 - and if it's not we'll show the
129:51 - unprotected one
129:53 - and this component is
129:56 - about as silly and easy as you can see
129:58 - like just hard-coded
130:00 - href to log out
130:03 - nothing really very special about the
130:05 - slack button
130:06 - all this is is a
130:08 - an href to the slack api
130:11 - oauth endpoint
130:12 - so that's it um
130:14 - that's the front end
130:16 - uh
130:18 - 30 lines of code
130:20 - so we'll take a look at the back end
130:23 - next you'll notice there's no compile
130:25 - step here either this is just
130:28 - pure
130:30 - pure code so
130:31 - logging out's pretty easy
130:33 - in deno land uh with api gateway being
130:36 - our
130:38 - our web server
130:40 - we just have to pass it a cookie
130:42 - and
130:43 - we're going to expire that cookie this
130:45 - is how you do that in dental land with
130:46 - the standard library we we have a
130:48 - response
130:50 - pass that response
130:51 - to
130:53 - delete cookie function
130:54 - that's a my session key
130:56 - and that'll
130:58 - get us the set cookie header that we
131:00 - need to expire the cookie session
131:03 - okay login is a little more involved and
131:07 - this is where i think typescript starts
131:08 - to shine we can see we opted into typing
131:13 - our request handler here
131:15 - the reason this is important is this is
131:17 - a really nice map to future programmer
131:20 - looking at this page wondering well i
131:22 - wonder what they're doing like what are
131:23 - they using this is a pretty nice hint to
131:26 - say hey i'm
131:27 - probably relying on cookies and i'm
131:29 - probably relying on queer string
131:31 - parameters
131:32 - and here's our the interface that we
131:34 - designed for our account payload
131:36 - we're pulling payload out of the jwt
131:38 - library we used
131:40 - and uh we're extending that just to say
131:42 - that our jwt is gonna have a name email
131:44 - and avatar which i really like
131:47 - see it's doing a little bit of console
131:49 - log debugging
131:51 - but go here and we grab our code if you
131:55 - have an oauth request it always comes
131:56 - with the code which you use to verify
131:58 - and if we don't have one we're just
132:00 - going to go back home
132:02 - and say that we didn't find the code
132:04 - if we did get the code we're going to
132:06 - trade that for an access token this is
132:08 - part of the oauth flow
132:10 - and then we use that access token to
132:12 - call the slack api to get the account
132:14 - data
132:16 - and
132:17 - this is quite nice it's all typed and
132:20 - then we'll take that account data and
132:21 - we'll encode it as a cookie
132:24 - which will set cookie on headers and the
132:26 - response
132:27 - just like you do with any old web
132:29 - standard server
132:31 - and
132:33 - and that should be good we'll be logged
132:34 - in so we take a quick look at get access
132:37 - token and get account these are
132:39 - both making api
132:41 - both making api calls into the slack api
132:44 - and this is where the web standard side
132:46 - of things really starts to shine i mean
132:48 - we're using fetch api
132:50 - directly
132:51 - really clean
132:53 - just give it the slack api url with the
132:56 - right data and
132:58 - we can get back our access token
133:01 - getting the account info is even cleaner
133:04 - just call in the slack api the token
133:06 - that we got
133:08 - and then we're going to encode the
133:09 - response into this
133:11 - payload with name email and avatar to
133:13 - match our account
133:16 - data shape
133:17 - now the payload shape
133:21 - and then our set cookie
133:23 - string
133:25 - is basically the inverse what we were
133:27 - doing before we're going to create a jwt
133:28 - token
133:31 - we're going to create a cookie
133:33 - we're going to use the built-in standard
133:35 - library set cookie and we're just going
133:36 - to return that header
133:38 - to write to the api gateway response
133:42 - so
133:44 - oauth
133:46 - uh zero dependencies
133:48 - maybe 200 lines of code
133:50 - tops with deno which is pretty nice
133:55 - so that is
133:58 - building a little mini oauth app with
134:00 - deno
134:03 - and that's kind of the same old new
134:04 - thing
134:06 - we've got a javascript runtime with a
134:08 - slightly better cold start
134:10 - more interesting runtime security model
134:12 - and a lot of things just built in that
134:14 - you probably already used today we've
134:16 - got typescript out of the box we've got
134:18 - web standards out of the box and we've
134:20 - got a comprehensive cli runtime standard
134:23 - library
134:24 - all built in and out of the box which is
134:26 - great
134:27 - i
134:28 - want to thank you for joining me you can
134:30 - find all the source code on my github uh
134:33 - it's brian leroux arc example deno ssr
134:36 - slack oauth that's a mouthful
134:39 - and if you get a chance please check out
134:41 - begin.com
134:42 - and if you want to deploy this to your
134:44 - own aws check out art doc codes and
134:46 - stars on github
134:48 - thanks
134:52 - ah excellent talk uh about dinner as it
134:56 - turns out that is how brian pronounces
134:58 - it uh
135:00 - and
135:01 - you know if you haven't yet um if you
135:04 - haven't yet
135:05 - seen
135:06 - another runtime
135:08 - it's very possible that you imagine that
135:10 - node.js is going to just take you
135:12 - through your entire career right it's
135:14 - possible to imagine that these things
135:16 - only last
135:18 - or these things will continue to last
135:19 - forever but as we know our tools will
135:22 - continue to evolve and so it's great to
135:23 - see a talk like this because it reminds
135:25 - us there's more to the story
135:28 - than whatever it is that we used last
135:30 - year right
135:32 - so
135:33 - i'm excited to welcome brian to the
135:35 - stage with us uh today we're gonna have
135:38 - a a discussion with brian about this
135:40 - talk welcome to the stage brian
135:43 - thanks for having me whoa i'm big now
135:45 - this is great
135:47 - hi
135:48 - hi nice to meet you both uh that was a
135:51 - lot of fun it's kind of neat seeing
135:53 - yourself
135:54 - come together with a lot of people from
135:55 - afar and uh
135:57 - yeah i'm excited to be here let's get in
136:00 - let's get into it let's talk about this
136:01 - deno thing rodino
136:06 - i think so initially
136:08 - let me let me throw i'll i'll tell
136:10 - everyone what i know and what i know is
136:12 - the maintainers or creators called it
136:15 - denno
136:16 - and then the community started to call
136:17 - it dino because the little icon logo was
136:20 - this little dinosaur guy
136:21 - and uh now the
136:24 - main creator ryan doll the dude who
136:25 - created note also uh has started saying
136:27 - dino i think just to confuse people so
136:30 - you're you're fine to interpret this any
136:33 - way you want
136:34 - uh it's kind of like gif and jiff you
136:36 - know pick the one that annoys you least
136:39 - and uh someone will disagree with you
136:43 - but
136:44 - you know and and it brings up a a good
136:47 - point that you know uh this is brand new
136:50 - um so we're still
136:51 - we're still establishing these norms
136:53 - around uh community even understanding
136:55 - what's going on um
136:57 - you know like do we say
136:59 - node.js or do we say no js
137:02 - that was a topic in the early days so
137:05 - i'm curious you know why should i even
137:07 - care i'm coming to this as a you know
137:10 - even a junior engineer and i'm just now
137:13 - getting my feet wet with note what why
137:15 - do i have to care about another runtime
137:18 - what what's important about this
137:20 - yeah i think the thing for me with deno
137:22 - is that there's a lot of built-ins and
137:24 - so the philosophy with node.js was
137:26 - that there would be a very small core
137:28 - that would start very fast and be very
137:30 - portable for writing small networked
137:32 - applications and the ecosystem would
137:34 - fill in the gaps uh npm
137:37 - and that's
137:38 - uh have predictable results we now have
137:39 - a huge ecosystem and we're sort of
137:42 - living in the tyranny of choice there
137:44 - isn't one way to do anything there's a
137:45 - million ways and what's the best way it
137:48 - depends on your
137:50 - you know when the wind's blowing today
137:51 - what's popular right now
137:53 - and um
137:54 - denno
137:55 - uh defeats the law of triviality in that
137:58 - it will take these decisions that you
138:00 - normally have to make with your team
138:02 - and make them for you it builds in
138:04 - formatting it builds in lintina builds
138:06 - in a standard library it builds in
138:08 - a really comprehensive runtime library
138:10 - and uh
138:11 - because all this stuff is built in i
138:12 - think it's got a good chance of having a
138:14 - better developer experience which will
138:16 - result in better uh velocity for the
138:18 - teams that choose to adopt it now it is
138:20 - early days
138:22 - and you mention this when you're saying
138:24 - like i thought you know maybe i could
138:26 - you know ride this out with node for the
138:27 - rest of my career and i actually think
138:29 - that's possibly possible there's enough
138:31 - javascript out there today that um you
138:33 - know if you're a node developer you're
138:35 - gonna you're gonna be able to find a job
138:36 - for a long time to come there's a lot of
138:37 - inertia for that existing code
138:40 - but things do change in this industry
138:41 - and we want more options especially on
138:44 - the back end
138:45 - a lot of other languages have multiple
138:47 - runtime implementations and they're sort
138:49 - of spoiled for choice
138:51 - javascript doesn't really have that
138:52 - we've got browsers
138:54 - we've got desktop with things like
138:56 - electron we've got mobile with things
138:57 - like cordova and capacitor
138:59 - but on the back end you know it's node
139:02 - or
139:02 - i guess if you're feeling masochistic
139:04 - you could use the jvm but
139:07 - that's about it so it's about time we've
139:09 - had some more options and
139:11 - i like that it's taking some really hard
139:13 - line opinions and pushing those forward
139:15 - in a new direction where we have a lot
139:17 - of built-ins
139:18 - and i don't think it's an either or for
139:20 - what it's worth there's a lot of
139:23 - zero-sum thinking in our industry
139:25 - because it's largely venture-backed and
139:26 - everyone thinks that there's going to be
139:28 - one big outcome and there's going to be
139:30 - a winner take all as it were and there's
139:32 - no historical evidence that that's true
139:34 - there's always been lots of programming
139:36 - languages there's always been lots of
139:38 - ids and there's always been more than
139:39 - one way to do things and the right way
139:42 - is what's right for you and your team
139:45 - so well said yes love that and uh you
139:48 - know it is really exciting to see to see
139:50 - denno coming up and since it's so uh
139:52 - early days as you said we know things
139:53 - are moving really fast with denno and um
139:56 - so i is anything exciting been going on
139:59 - even even in the time since we recorded
140:01 - this talk
140:02 - totally uh yeah and this is you know
140:05 - maybe the the downside of something
140:06 - that's new is that it is moving fast
140:08 - there's a lot to keep up with they've
140:10 - been quite good on uh stability so there
140:12 - hasn't been a lot of breaking changes
140:13 - but they're still susceptible to that
140:16 - especially since it's typescript based
140:17 - which doesn't really have much of a
140:19 - policy around breaking changes other
140:21 - than to deny they happen while they do
140:22 - it
140:24 - but with the case of tenno anyways they
140:26 - just did a big release 1.6 and the sort
140:29 - of banner feature of dental one six is a
140:31 - compile command
140:32 - and we've wanted this for node for a
140:34 - long time the idea is that you can take
140:37 - an arbitrary program
140:38 - compile that into a binary for all
140:40 - operating systems with no dependencies
140:42 - so you can take your your deno app and
140:44 - you can turn it into an app app and uh
140:47 - why that's important to you um one for
140:50 - deployment this just makes life a lot
140:52 - easier you're not waiting to download a
140:53 - bunch of dependencies or setup steps and
140:55 - two for distribution um for things like
140:58 - libraries especially like uh tools
141:00 - anytime you've run npm install dash g
141:04 - you're installing someone's executable
141:05 - node program
141:06 - and that's you know a great distribution
141:08 - channel and has been useful to a lot of
141:10 - people but it's also a blocker if you're
141:12 - a
141:13 - java shop or python shop you might not
141:15 - want node running on
141:18 - your your developer's machines for
141:19 - whatever reason or maybe you've blocked
141:22 - installing globally so this will allow
141:24 - people to create tools and redistribute
141:26 - them as binaries and the binary it
141:28 - creates is very small it's around 20
141:30 - megabytes so
141:31 - it's startup time is is ridiculous it's
141:34 - like something like 10 to 20
141:35 - milliseconds startup
141:37 - so for cold starts for things like
141:38 - serverless apps this is going to be
141:40 - really important and i kind of feel that
141:42 - this is
141:43 - a major line in the sand
141:45 - as a capability that node just does not
141:47 - have
141:48 - i think a lot of developer tools are
141:50 - going to be evaluating to to do this in
141:52 - future
141:57 - super exciting
141:59 - yeah
142:01 - and so it's probably going to be
142:04 - a really exciting year
142:06 - yeah that is incredible to have that
142:08 - flexibility to be able to to compile
142:11 - uh down to that by you know it's
142:13 - portable right so it's it's the the
142:15 - dream that we always had uh in the back
142:17 - of our minds with with java but now we
142:19 - can write the the language that we
142:21 - actually love so that's very exciting
142:24 - what do you have planned at begin.com
142:26 - for the for the new year
142:28 - that's a great question um we've been
142:31 - pretty busy in the last year uh i'd say
142:34 - largely focusing on front-end use cases
142:36 - begin has been mostly focused on
142:39 - centering the idea of what does the
142:40 - world look like when we build lambda
142:42 - functions and we really nailed that side
142:44 - but there was still a fair bit of
142:45 - friction getting on board if you were
142:47 - coming from a front end focused
142:51 - context which a lot of people are
142:53 - and serverless sort of first started
142:55 - going i thought this was going to be a
142:56 - revolution
142:57 - from the back end but what i didn't
142:59 - expect
143:00 - is that technologies would democratize
143:02 - back-end development and uh allow
143:05 - front-end developers to play
143:06 - uh with these tools and so a large part
143:08 - of our adoption is coming from folks
143:10 - that have hit a wall with
143:12 - get requests and want to move beyond
143:14 - that and do stuff with databases and
143:16 - queues and
143:17 - infrastructure as code so we have a ton
143:19 - of features coming out this year to
143:21 - help people that are building jam stack
143:23 - static asset based websites and move
143:26 - those into a dynamic world but
143:27 - serverlessly
143:30 - awesome awesome so exciting well so um
143:34 - where can folks best follow you and your
143:37 - work um and learn more about all these
143:40 - exciting things to come in the new year
143:43 - yeah my very easy to spell name
143:46 - is brian leroux
143:48 - it's
143:50 - b-r-i-a-n-l-e-r-o-u-x and i am that uh
143:53 - on all of the social medias so if you're
143:55 - looking for me on github well you'll
143:57 - find me at brian github
143:59 - i'm always on twitter
144:01 - not trying to stir anything up but often
144:03 - in the middle of it
144:04 - and uh
144:06 - and uh yeah those are good places to get
144:08 - in touch if you're just interested in
144:11 - following along with the sort of begin
144:13 - architect stuff you should follow those
144:14 - twitter accounts um
144:16 - begin and at arc serverless
144:20 - awesome awesome well thank you so much
144:22 - for being here with us today um and
144:24 - yesterday we'll definitely have to
144:26 - follow along yes we're so pleased that
144:28 - you could join us thank you for the
144:29 - amazing talk and for this great chat
144:31 - everyone please join us in thanking
144:33 - brian
144:38 - so cool alrighty
144:40 - so jonathan what a lot of great talks
144:43 - we've had so far today
144:45 - so good so good yeah and
144:47 - all of it is very exciting i i love
144:49 - refactoring and i love portability and i
144:52 - mean it's it's just been a good day and
144:54 - i'm excited to hear more um but i think
144:57 - now is a different uh a different
145:00 - section of the day right
145:02 - yep i think it is time for us to move
145:04 - into our topic table sessions
145:06 - so uh just like the last couple of days
145:09 - this is the time where we break away
145:10 - from the stage talks to allow everybody
145:12 - to get up close and personal with all
145:14 - the speakers workshop instructors
145:17 - sponsors and other subject matter
145:20 - enthusiasts around different topics
145:23 - so how can folks get uh jumped into the
145:25 - topical sessions
145:28 - all right i've got it down now they're
145:29 - gonna go over there right go go go click
145:32 - on sessions on the left side of hop in
145:35 - and it's in the left menu you can browse
145:38 - all the topic tables uh and there's a
145:41 - lot of great topic tables that happened
145:43 - yesterday and today there's going to be
145:45 - even more uh there's so much to talk
145:47 - about and you really these are very
145:50 - flexible conversations and you are the
145:52 - most involved in these topics tables
145:55 - you can ask questions you can even show
145:57 - your face as we mentioned before
145:59 - if the topic table will allow for that
146:02 - uh in in their particular discussion so
146:04 - make sure that you go and check out a
146:07 - topic table that looks good to you
146:09 - definitely so you've got tons of options
146:11 - you could talk about design systems with
146:13 - the flexport engineering team you could
146:15 - talk about dynamic apps with some
146:17 - awesome engineers from netlify
146:20 - engineering management is going to be on
146:22 - the agenda with uh netflix engineer ryan
146:24 - burgess and um we've got also topic
146:27 - tables around nexjs which we heard um
146:30 - about earlier so you can talk with
146:33 - versailles engineer jj casper about that
146:35 - and you can even chat with brian larue
146:37 - who we just had speak about uh
146:40 - serverless and deno and you can get all
146:42 - your questions answered there so tons
146:45 - of options too many to choose from good
146:47 - luck with that
146:50 - and talks are going to start back up in
146:52 - a little over an hour so make sure you
146:54 - keep an eye on the schedule
146:57 - we will back be back here in just a
146:59 - little over an hour so make once again
147:01 - make sure you keep an eye on the clock
147:03 - so you don't miss out on the next talk
147:06 - [Music]
147:40 - [Music]
147:45 - [Applause]
147:46 - [Music]
148:50 - [Music]
149:04 - [Music]
149:15 - [Music]
149:27 - i've had my heart broken into it
149:33 - [Music]
149:34 - but something's different next to you
149:40 - [Music]
149:42 - it's like my soul is set on fire
149:49 - [Music]
150:02 - feelings
150:08 - [Applause]
150:12 - is
150:17 - [Music]
150:19 - oh
150:26 - [Music]
150:32 - the feelings
150:33 - [Music]
150:47 - feelings that i know
150:55 - [Music]
151:11 - for sure
151:16 - i can't keep on this road alone
151:22 - [Music]
151:23 - and all this time i thought i knew
151:28 - [Music]
151:40 - i
151:42 - [Music]
151:53 - is
151:56 - [Music]
152:05 - the feelings that i know
152:14 - [Music]
152:28 - feelings
152:30 - [Music]
153:01 - is
153:03 - [Music]
153:16 - is
153:17 - [Music]
153:19 - [Applause]
153:21 - what have i been waiting for oh i can
153:24 - run but i can't hide
153:28 - the feelings that i know
153:33 - [Music]
154:12 - [Music]
156:35 - you
156:38 - [Music]
156:54 - so
156:55 - [Music]
158:05 - so
158:10 - [Music]
159:13 - [Music]
159:17 - so
159:22 - [Music]
160:05 - expect
160:07 - [Music]
160:18 - [Music]
160:35 - [Music]
160:46 - is we're forgetting how to slow down
160:55 - [Music]
161:14 - so tell me
161:16 - [Music]
161:31 - never gonna let you down
161:34 - [Music]
161:56 - breaking up
161:58 - [Music]
162:16 - without your baby
162:19 - [Music]
162:38 - is
162:42 - [Music]
162:51 - this is something different
162:55 - [Music]
163:01 - [Applause]
163:04 - so tell me
163:08 - [Music]
163:28 - [Applause]
163:31 - [Music]
163:44 - you give me
163:51 - [Music]
164:00 - [Music]
164:24 - [Music]
164:38 - [Music]
164:57 - when you're with me and i realize what
165:00 - it all means
165:04 - [Music]
165:19 - oh
165:24 - [Music]
165:40 - till the
165:43 - [Music]
166:03 - is
166:04 - [Music]
166:24 - is
166:28 - [Music]
166:44 - till the sky
166:46 - [Music]
166:54 - falls down
166:58 - [Music]
167:11 - [Music]
167:17 - i
167:23 - [Music]
167:39 - i was doing just
167:41 - [Music]
168:01 - is
168:04 - [Music]
168:41 - me
168:49 - [Music]
169:06 - i think you're perfect
169:09 - [Music]
169:23 - closer than anybody else
169:26 - [Music]
169:39 - for me
169:43 - [Music]
170:18 - fame
170:22 - [Music]
170:31 - so
170:38 - [Music]
170:59 - [Music]
171:25 - so
171:30 - [Music]
172:05 - [Music]
172:54 - [Music]
173:00 - [Music]
173:17 - [Applause]
173:19 - [Music]
173:46 - [Music]
174:23 - [Applause]
174:25 - [Music]
175:53 - so
175:56 - [Music]
176:02 - so
176:05 - [Applause]
176:06 - [Music]
176:46 - so
176:48 - [Music]
177:06 - so
177:07 - [Music]
178:15 - so
178:24 - [Music]
178:36 - [Music]
178:42 - [Music]
179:13 - [Music]
179:32 - don't
179:36 - [Music]
181:09 - [Music]
182:50 - [Music]
183:35 - [Applause]
183:36 - [Music]
183:47 - so
183:49 - [Music]
184:07 - [Music]
184:21 - you
184:35 - uh
184:40 - [Music]
184:50 - uh
184:53 - [Music]
185:10 - uh
185:25 - [Music]
185:51 - [Music]
186:07 - show me
186:10 - [Music]
186:24 - is
186:30 - through the windows
186:39 - [Music]
186:50 - like superheroes
186:54 - [Music]
187:07 - is
187:10 - [Music]
187:22 - [Music]
187:32 - [Music]
187:35 - like we wear our
187:41 - [Music]
187:45 - is
187:47 - [Music]
187:53 - is
187:55 - [Music]
188:29 - forever
188:31 - [Music]
188:43 - don't
188:44 - hold
188:45 - back is
188:49 - [Music]
189:01 - come with us
189:05 - [Music]
189:44 - is
189:46 - [Music]
189:59 - is
190:05 - [Music]
190:39 - don't hold back
190:44 - [Music]
191:16 - [Music]
191:24 - [Music]
191:49 - [Music]
192:12 - [Music]
192:29 - [Music]
193:06 - i've had my heart broken into it
193:11 - [Music]
193:13 - but something's different next to you
193:17 - [Music]
193:21 - it's like my soul is set on fire
193:28 - [Music]
193:46 - [Applause]
193:51 - is
193:54 - [Applause]
193:58 - oh
194:04 - [Music]
194:10 - the feelings
194:12 - [Music]
194:26 - feelings
194:27 - [Music]
194:47 - take my hand the same for sure
194:54 - i can't keep on this road
194:58 - [Music]
195:01 - alone and all this time i thought
195:12 - [Music]
195:17 - cause i can run
195:19 - [Music]
195:32 - is
195:34 - [Music]
195:35 - [Applause]
195:37 - [Music]
195:53 - [Music]
196:07 - feelings
196:09 - [Music]
196:22 - is
196:24 - [Music]
196:39 - is
196:41 - [Music]
196:54 - [Music]
196:57 - the is
196:58 - [Applause]
196:59 - what have i been waiting for oh i can
197:03 - run but i can't hide
197:06 - the feelings that i know
197:11 - [Music]
197:50 - [Music]
198:42 - so
198:44 - [Music]
198:56 - so
198:59 - [Music]
199:13 - [Music]
200:17 - [Music]
200:32 - so
200:34 - [Music]
200:48 - so
200:52 - [Music]
201:19 - [Applause]
201:20 - [Music]
201:42 - so
201:43 - [Music]
202:29 - so
202:32 - [Music]
203:41 - you
203:42 - know next
203:46 - [Music]
203:57 - [Music]
204:14 - [Music]
204:21 - whenever you cross my mind
204:26 - we're forgetting how to slow down
204:34 - [Music]
205:06 - you give
205:09 - i'm never gonna let you
205:13 - [Music]
205:21 - i got down baby
205:24 - [Music]
205:46 - don't you know your love is
205:55 - without your baby
205:57 - [Music]
206:19 - nobody
206:20 - [Music]
206:34 - [Music]
206:40 - [Applause]
206:40 - [Music]
207:23 - is
207:29 - [Music]
207:38 - [Music]
208:00 - [Music]
208:16 - [Music]
208:36 - when you're with
208:38 - what it all means
208:42 - [Music]
208:59 - is
209:03 - [Music]
209:43 - [Music]
209:46 - to believe
209:47 - [Music]
210:03 - is
210:07 - [Music]
210:23 - till the sky
210:29 - [Music]
210:33 - falls down
210:37 - [Music]
210:50 - [Music]
210:58 - [Music]
211:10 - [Music]
211:13 - oh
211:16 - [Music]
211:47 - for me
211:55 - me
211:57 - [Music]
212:30 - so pick me up when you're done
212:35 - [Music]
212:44 - [Music]
212:45 - i think you're perfect
212:48 - [Music]
213:01 - i was
213:02 - [Music]
213:04 - else
213:08 - [Music]
213:18 - for me
213:22 - [Music]
213:52 - see
213:57 - [Music]
214:38 - [Music]
215:02 - so
215:07 - [Music]
215:25 - [Applause]
215:26 - [Music]
216:00 - so
216:02 - [Music]
216:33 - [Music]
216:39 - [Music]
216:56 - [Applause]
216:58 - [Music]
217:30 - [Music]
217:50 - [Applause]
217:52 - [Music]
217:56 - [Applause]
217:57 - [Music]
218:02 - [Applause]
218:04 - [Music]
218:07 - [Applause]
218:11 - [Music]
218:18 - so
218:19 - [Music]
219:32 - so
219:35 - [Music]
219:44 - [Applause]
219:46 - [Music]
219:56 - so
220:00 - [Music]
220:37 - so
220:42 - [Music]
221:06 - so
221:07 - [Music]
221:54 - so
221:56 - [Music]
222:16 - so
222:19 - [Music]
222:25 - [Music]
222:42 - [Music]
224:48 - [Music]
225:02 - [Music]
225:04 - [Applause]
225:06 - [Music]
226:29 - [Music]
227:45 - you
227:46 - [Music]
228:14 - uh
228:19 - [Music]
228:54 - uh
228:56 - [Music]
229:30 - i was watching you watch the sun come up
229:36 - in this t-shirt
229:38 - [Music]
229:46 - show me
229:49 - [Music]
230:03 - is
230:05 - [Music]
230:09 - through the windows
230:14 - [Music]
230:28 - like a superheroes
230:32 - [Music]
230:41 - is
230:49 - [Music]
231:01 - how
231:02 - [Music]
231:11 - [Music]
231:24 - is
231:26 - [Music]
231:32 - is
231:36 - [Music]
231:48 - is
231:50 - [Music]
232:08 - foreign
232:11 - [Music]
232:22 - don't
232:23 - hold back tonight
232:25 - [Music]
232:39 - so come with us
232:46 - [Music]
233:24 - forever
233:25 - [Music]
233:48 - oh
233:51 - [Music]
234:03 - is
234:06 - [Music]
234:18 - don't hold back
234:23 - [Music]
235:03 - [Music]
235:18 - [Music]
236:08 - [Music]
236:31 - [Music]
236:45 - i've had my heart broken into it
236:50 - [Music]
236:52 - but something stay different next to you
236:56 - [Music]
237:00 - it's like my soul is set on fire
237:07 - [Music]
237:26 - [Applause]
237:30 - is
237:33 - [Applause]
237:37 - oh
237:40 - [Music]
237:49 - the feelings
237:51 - [Music]
238:05 - feelings that i know
238:11 - [Music]
238:33 - i can't keep on this road alone
238:41 - and all this time i thought
238:44 - [Music]
238:58 - [Music]
239:11 - is
239:14 - [Applause]
239:16 - [Music]
239:25 - i know
239:32 - [Music]
239:40 - hi
239:41 - welcome back everybody hope you had an
239:44 - amazing time at our last topic table
239:48 - session of the conference we've had so
239:49 - many great topic tables over the last
239:51 - few days so many great conversations
239:53 - going on so really hope everybody
239:55 - enjoyed that
239:56 - and now
239:57 - we get to kick off our last talk
240:01 - of the day
240:02 - and of the conference
240:04 - and we could not be more excited to have
240:07 - our final keynote talk be from the one
240:10 - and only
240:11 - cassidy williams
240:13 - if you don't know cassidy better known
240:15 - as cassadoo on
240:17 - twitter and github and all the above
240:20 - she is an amazing instructor and speaker
240:23 - um she's a developer with netlify has
240:26 - also worked for react training codepen
240:28 - amazon venno and lots more really
240:31 - impressive places and she's had the
240:33 - honor of working with various
240:34 - non-profits as well including seekis and
240:38 - hacker fund as their director of
240:39 - outreach
240:40 - so cassidy is just such an inspiring
240:43 - person in the developer community you
240:46 - may have seen some of her amazing talks
240:48 - at all kinds of super prominent uh
240:50 - events and her amazing and hilarious
240:53 - tick tocks and tweets um she is just
240:56 - such an inspiration in the developer
240:58 - community and she wants to inspire
241:00 - generations of stem students to really
241:03 - be the best that they can be
241:05 - um and also very important to note she
241:07 - loves mechanical keyboards and karaoke
241:10 - woman after my own heart
241:12 - so what are we gonna hear cassidy talk
241:13 - about today jonathan
241:15 - well we have to all
241:17 - uh put our serious face on for cassidy
241:20 - we if you've if you've ever heard of
241:21 - cassidy you know that she's a incredibly
241:24 - serious person uh and we've heard a
241:26 - little bit of about next js today the
241:29 - popular react framework today she's
241:31 - going to give us a super serious
241:33 - discussion about next js so please
241:36 - welcome cassidy williams
241:46 - [Music]
241:49 - hello
241:50 - and welcome to the most serious talk of
241:52 - react-a-thon an incredibly serious
241:55 - discussion about next js
241:57 - i'm your incredibly serious speaker
242:00 - cassidy williams you can find my very
242:02 - serious handle cassadoo on twitter on
242:06 - github
242:07 - or just google it
242:09 - you'll find some very serious results
242:11 - now in this talk
242:13 - i want to talk about serious business
242:15 - because being serious is
242:17 - serious business
242:20 - if you use react chances are you've
242:22 - heard of nexjs the react framework next
242:25 - js is very very serious it has a lot of
242:28 - serious business built in
242:30 - with next.js you can use ssr and ssg
242:34 - that's server-side rendering and static
242:36 - site generation in a single application
242:39 - the routing system is file system based
242:41 - routing and so if you have a file in a
242:45 - certain directory it's an automatic
242:46 - route and this includes dynamic routes
242:48 - as well
242:49 - you can programmatically update the
242:51 - site's head and a bunch of other
242:54 - features per page and there's a lot of
242:57 - built-in components for that as well it
242:58 - has a very powerful api
243:01 - plus there's some really cool developer
243:03 - experience features like code splitting
243:06 - absolute imports and css and js already
243:10 - built in natively in next.js you don't
243:12 - have to install any extra loaders on top
243:15 - of that
243:16 - serious developers use nexjs
243:22 - but also nerds do too
243:24 - and today we're going to be talking
243:25 - about pranking people because yes you
243:28 - can do all kinds of serious scaling cool
243:31 - stuff with next js
243:33 - and that's what most talks are going to
243:35 - be about about next js so why not do
243:37 - something fun for once and that's right
243:39 - we're going to be pranking people with
243:41 - next js so first i want to show you some
243:44 - really basic things on how to set up
243:46 - next js how a certain page works and how
243:49 - a website might look but then beyond
243:52 - that we're going to use some of these
243:53 - features to build a fun little prank
243:55 - website
243:57 - okay so first of all
243:59 - this is our next nutlify starter project
244:02 - if you'd like to look it up you can find
244:04 - it on github at github.com
244:06 - cassadoo
244:08 - nextnetlifestarter it's a very very
244:10 - basic project and if you look at the
244:12 - results you'll see it's just a welcome
244:15 - to my app it's that's it so let's
244:18 - actually look at the code a little bit
244:19 - just so you can kind of get familiar
244:21 - with it so first of all this is a very
244:24 - simple thing where we have a header
244:25 - component and then this description this
244:28 - header component is inside the
244:29 - components directory and it's truly just
244:32 - a function that exports a header
244:34 - component it's really not that thrilling
244:36 - um and then inside the head this head
244:40 - right here is actually a next api and so
244:43 - when you have a next js site anything
244:46 - you put in the head
244:48 - will update in the title of the page and
244:50 - so right now the tab over here says next
244:53 - js starter but if i were to update it
244:55 - saying next js demo and then save that
244:59 - when the page refreshes you see next js
245:02 - demo hey not too
245:04 - not too crazy right all right
245:07 - so if you look in the directories here
245:10 - on the side
245:11 - pages is really the only thing that you
245:13 - need to get up and running with next.js
245:16 - in pages that's where all your routes
245:18 - are so in index.js index.js is the index
245:22 - page the home page of your website in
245:25 - app.js this is a global wrapper
245:28 - and in app.js you don't really do much
245:31 - it's really just something if you want
245:32 - to install something globally throughout
245:34 - your application which for example i
245:37 - want to import styles globally across my
245:39 - application and so i have this
245:40 - globals.css
245:42 - inside of here i just have some basic
245:44 - centering and stuff if you see on the
245:46 - application over here you can see it's
245:48 - really just
245:50 - centered
245:51 - so that's what the global styles are and
245:53 - that's what's imported in the app.js
245:55 - which is automatically wrapping any
245:57 - other page that you might have in this
245:59 - application
246:00 - and then this footer component i have a
246:03 - footer.js which is a pretty simple thing
246:06 - it's an html footer but one thing you
246:08 - might notice is i have styles from a css
246:11 - module css modules are automatically
246:13 - built into next.js so if you want to use
246:16 - them you can just use them you don't
246:18 - have to add any loaders or anything so
246:20 - this is a very very basic site if you'd
246:23 - like to do a little bit more with it you
246:25 - can by for example adding another page
246:27 - and let's just say i want to say
246:30 - fun
246:31 - page.js now in this fun page i'm going
246:34 - to copy all of this from index and put
246:37 - it in here and then i'll just say
246:41 - this is very fun
246:44 - we'll call it fun page
246:46 - like that see how fun that is wild okay
246:50 - now if we go over to our browser and
246:52 - then we go to slash fun page
246:54 - look at that this is very fun
246:57 - that is it that is how you make a page
246:59 - that's how you make a route you don't
247:00 - have to do any extra configuration to
247:02 - just have these pages work now
247:05 - page components in next.js are pretty
247:08 - special because you can do some really
247:10 - neat things with it when the site loads
247:13 - and so both for static and for
247:15 - server-side rendered pages there's some
247:17 - really nice functions that you can use
247:18 - and the one that i probably use the most
247:20 - is one called get static props so you do
247:23 - export async
247:26 - function
247:27 - get static
247:28 - props
247:30 - okay
247:30 - now
247:31 - the return value of this function is
247:34 - passed to the page and so if you were to
247:38 - call a bunch of apis and put the values
247:41 - that you get from the apis the data you
247:42 - get from the apis onto the page and you
247:45 - statically export this website
247:48 - then those api calls happen at builds
247:51 - time not at run time and so you could
247:54 - really save a lot of time when your
247:56 - pages are being loaded on the screen for
247:59 - your users because it's happening at
248:01 - build time that part is really exciting
248:03 - to me so
248:04 - in this get static props you can do a
248:06 - lot of different things i'm going to
248:07 - call a very simple api
248:10 - const
248:11 - and we're going to get a response and
248:13 - excuse me while i copy and paste from
248:16 - the pokemon api okay we've got res and
248:19 - then we're fetching so we're going to
248:21 - fetch from the pokemon api we're going
248:22 - to get charmander i'm going to do const
248:25 - pokemon is equal to a weight and then
248:29 - res.json
248:30 - just like that
248:32 - oh whoa that was some
248:36 - sorry about that
248:37 - okay cool
248:38 - so now that we have these done we have
248:40 - the data that we want what we can do is
248:42 - we can return that to the page so i'm
248:44 - going to return an object the object
248:47 - will have props that are passed into the
248:50 - page
248:51 - and then inside of there i will pass in
248:54 - pokemon just like that
248:56 - and so now
248:58 - inside of home we have props right here
249:01 - and so i can get
249:03 - pokemon from props and then anything
249:06 - inside of pokemon i can pass to my app
249:08 - right here and so for example instead of
249:11 - having next js demo right here i could
249:14 - do something like pokemon
249:17 - dot name
249:19 - so now it'll say charmander and it'll
249:21 - say how about this hi charmander
249:24 - and now i could say for example
249:28 - [Music]
249:30 - an image
249:31 - i'll say
249:33 - image src
249:35 - equals
249:39 - and then inside of here
249:41 - pokemon
249:43 - dot sprites
249:45 - dot front underscore default if you'd
249:47 - like to know this api go look at the
249:49 - docs i've used it enough where i happen
249:51 - to know how that works
249:55 - oh and i forgot a little a weight down
249:58 - here
249:59 - and so if i save that
250:03 - and then refresh the page look at that
250:05 - we got high charmander and the title and
250:07 - we got a little charmander in here and
250:09 - so again this fetch call will happen at
250:11 - builds time and won't happen at run time
250:14 - i think that is super cool now i've
250:17 - talked a little bit about routes talked
250:18 - a little bit about this whole get static
250:20 - props things we can also generate static
250:23 - paths and so we can build what different
250:25 - paths might be coming from an api route
250:27 - or something at build time and
250:31 - we can also have dynamic routes now if
250:33 - you want to have a dynamic route what
250:35 - you would do is you would create a new
250:37 - file and you would say
250:39 - anything
250:40 - fish
250:41 - dot js and you'll put it in brackets
250:43 - like this
250:44 - and that means anything that matches the
250:47 - paths that would go to this fish.js is
250:50 - what would actually be returned to the
250:52 - user
250:54 - i'm going to explain this to you with a
250:56 - prank example
250:58 - so this is a prank project that i built
251:00 - i'm very proud of this prank project
251:02 - people have fallen for the prank and
251:04 - that's truly what matters so we have
251:07 - this home component and in this home
251:09 - component it is a very very basic thing
251:11 - i actually used the same starter project
251:13 - that i showed before and i have this
251:16 - header let's prank people and then i
251:18 - have a prank article right here
251:21 - if you'd like to see it live you can
251:23 - check it out in this let's prank people
251:25 - thing right here and be like cassidy did
251:28 - the
251:31 - cassidy did
251:32 - the best talk at
251:35 - react-a-thon
251:37 - and then if you click on it
251:41 - [Music]
251:44 - we get rick rolled
251:45 - and so this is a fun little prank
251:47 - project where it shows the title here it
251:50 - shows the title up here and also i
251:53 - programmatically updated the head so it
251:55 - looks like a real article if you were to
251:57 - share it on social media and so i'm just
252:00 - going to show you that head component
252:01 - really quick inside of this head
252:03 - component
252:04 - you can see we have the title here we
252:07 - have the open graph title i made some
252:10 - graphics for it it it looks like a real
252:13 - article and so if you were to actually
252:15 - paste a link to this on twitter or
252:17 - something
252:18 - you might just prank someone so this is
252:20 - this is something that i had a lot of
252:22 - fun with and now
252:24 - with this i'm going to talk about a few
252:26 - different things first of all
252:28 - the dynamic routes we mentioned this a
252:30 - little bit earlier
252:32 - with these dynamic routes it's a very
252:34 - similar thing as before where we have a
252:38 - function and it's exporting a component
252:40 - and it's in a
252:42 - page component here because it is uh in
252:46 - the pages directory now because it's in
252:48 - the pages directory we have access to
252:51 - certain functions and so the functions
252:52 - that i used were that get static paths
252:55 - which i mentioned a little bit and get
252:57 - static props
252:58 - now in get static props instead of
253:01 - calling an api what i did was i got the
253:04 - params of the url the parameters and in
253:07 - get static pads i actually returned that
253:09 - to get static props so in get static
253:12 - pads this is something where i would say
253:14 - hey i'm calling for example the pokemon
253:16 - api again and i would have some variable
253:20 - paths and then inside of there i would
253:23 - have just all of the pokemon names
253:25 - pokemon pokemon names in here and then
253:29 - that paths variable would go right here
253:31 - and so anytime i would go to
253:34 - my app slash charmander my app slash
253:36 - bulbasaur or whatever
253:38 - it would show data from that but
253:42 - if you have nothing there then it gets a
253:45 - little interesting there's this thing
253:47 - called fallback when you have fallback
253:50 - is false that means any paths that are
253:53 - not defined
253:54 - inside of this array returns a 404
253:58 - but if you have nothing defined in here
254:00 - and then you put true
254:02 - that tells next hey you can have other
254:06 - routes that aren't defined inside of
254:08 - here and so if you define notepads then
254:10 - you can have some user-defined paths and
254:13 - so if i were to for example have a prank
254:16 - article and if you look at the url up
254:18 - here i have this cassidy did the best
254:20 - talk at react-a-thon thing that's
254:22 - generated from that form
254:24 - i can use that cassidy did the best talk
254:26 - i reacted on i should have made
254:27 - something shorter and pull it in to the
254:30 - parameters here and get static props
254:33 - then i'll do two title case and so i
254:36 - take out all of the dashes in there add
254:38 - spaces do uh do some title casing in
254:41 - there and then i pass it as props and
254:43 - those those props go to
254:45 - article right here and then this is the
254:48 - page component it's passed to the rest
254:51 - of the page and so the prank head which
254:53 - i showed you before all of the metadata
254:55 - comes from that title and then we have
254:57 - this you have been pranked this is
254:59 - pulling from the current date and then
255:01 - uh we have just the youtube video there
255:05 - um and then we also have the title and
255:06 - we add not at the end because that's the
255:09 - best way to prank people i learned that
255:11 - as a child anyway so we have that you
255:14 - can look at the page and you can see
255:15 - again you have the you have been pranked
255:17 - you have the current date we have this
255:19 - not after getting the title from there
255:21 - and
255:22 - that's about it we're just pulling
255:24 - everything from the url
255:26 - and so this is a really really
255:28 - interesting concept where in next.js
255:30 - typically this triggers something that's
255:32 - called incremental static regeneration
255:34 - now what that means overall is that when
255:38 - you have a static website you have a
255:40 - site that is built entirely it's built
255:43 - once and then
255:44 - you can go to all the pages that were
255:46 - built but if you don't necessarily know
255:49 - what routes a user might be going to you
255:52 - will
255:53 - go to some other routes that don't exist
255:56 - and that haven't been built and
255:58 - typically you can serve or side render
255:59 - those or you can do the incremental
256:01 - static regeneration thing now i'm going
256:03 - to call it isr because that's long
256:06 - with isr what it does is next js builds
256:09 - that page at runtime and then later if a
256:13 - user is to go to that page it will be
256:15 - cached and that page will exist in the
256:17 - future um or you can
256:20 - server side render it either one works
256:22 - but that's kind of how the whole
256:24 - fallback thing works that's that's how
256:25 - all of this works now i've deployed this
256:28 - already and there's one really cool
256:30 - thing that uh we haven't talked a lot
256:32 - about at netlify but i'm really excited
256:35 - about it and it is a next.js builds
256:37 - plugin now if whenever you have a
256:40 - website that you want to upload to
256:42 - netlify you have what's called a
256:44 - netlife.tamel or what you do is you run
256:46 - a builds command you can have your
256:48 - netlife functions in there your
256:50 - redirects all kinds of stuff and we have
256:53 - this brand new thing called netlify and
256:55 - then plug-in next js what this does is
256:58 - it allows you to do all of those things
257:01 - that require runtime functions all those
257:03 - things that require server-side
257:04 - rendering with this plug-in using
257:07 - netlife functions
257:09 - and so uh what i really like about this
257:12 - is i can kind of write my next apps
257:14 - deploy them wherever i'd like with with
257:17 - this plugin i don't have to worry about
257:19 - making any code changes or anything to
257:21 - make sure everything works seamlessly on
257:23 - nutlify and so i installed this package
257:25 - and
257:26 - that's actually it if you if you look at
257:28 - my package.json it's very simple we just
257:31 - installed next react and react dom
257:34 - we build it when we want to build it and
257:36 - then netlify builds it and then during
257:39 - that build it has the plug-in that runs
257:41 - the entire thing and ships it and that
257:44 - is the entire pranking application and i
257:46 - think that it's so fun that this it's
257:49 - kind of a simple application but you can
257:51 - see how it could get more complex this
257:53 - this functionality is so useful because
257:56 - if you are
257:57 - going the static site generation route
258:00 - it's something that
258:02 - often results in very large builds where
258:04 - if you have thousands upon thousands of
258:06 - pages you might have to wait a while for
258:08 - your entire site to build granted your
258:10 - users will get tons of benefits because
258:12 - it's already built and loaded you can
258:14 - just pull it from the cdn and it's done
258:17 - but
258:18 - your builds take a while with something
258:20 - like this with these dynamic routes
258:22 - being able to pull things from the
258:23 - server you can have the best of both
258:25 - worlds where some of your pages will be
258:28 - static pages that are just loaded from
258:30 - the cdn but the ones where you have just
258:33 - a ton of blog posts for example or a ton
258:35 - of product pages a ton of prank pages
258:38 - something like this
258:40 - you can just call a function you can
258:42 - server side render it you can run it at
258:45 - runtime and it'll just work and and you
258:48 - don't have to wait for a build it might
258:50 - take a little bit longer for the users
258:52 - but honestly
258:54 - i've experimented with this a lot
258:56 - there's not that long of a wait it's
258:57 - just a few milliseconds more and so this
259:00 - is something that i i think is really
259:02 - really powerful both for very serious
259:05 - business but also for
259:08 - very fun pranks
259:09 - that being said i want to thank you so
259:11 - much for your time today
259:13 - i've been cassidy i hope that you uh
259:16 - have a good time at the rest of the
259:18 - conference if you have any questions i'm
259:20 - gonna be around in the chat or you could
259:22 - find me on the internet and talk about
259:23 - very serious things but also please just
259:25 - talk to me about fun things that would
259:27 - be so much more fun and i'm happy to
259:29 - answer any uh next questions any nutlife
259:31 - questions and if you'd like to see this
259:34 - project it is on github and then you can
259:36 - also look at this url that i am putting
259:39 - on the page post edit where you can
259:41 - actually mess with the pranking
259:43 - application thanks so much for your time
259:45 - and have a good one
259:50 - excellent talk a very serious talk
259:54 - from
259:55 - cassidy
259:56 - we're so thankful that she is able to
259:58 - maintain her composure with such a
260:01 - serious topic as next js
260:04 - uh so hopefully this has been such a
260:06 - good conference uh jenna and i don't
260:08 - know if uh if you want to talk about
260:11 - some of the talks that we've had for a
260:13 - minute um but i i've really enjoyed it
260:17 - i know it's been an incredible few days
260:19 - i mean action-packed like i don't know
260:21 - if it's been a few days or a week or
260:22 - like a month of content that we've all
260:25 - just uh had
260:26 - downloaded into our brains right here we
260:29 - have heard about so many amazing things
260:31 - we've heard about uh everything from the
260:34 - uh
260:35 - site generation and static
260:38 - site site generation that we heard about
260:40 - today with next um we've heard about
260:43 - we've heard about um getting started in
260:46 - uh tech
260:48 - and in transferring careers changing uh
260:51 - from different backgrounds we've talked
260:52 - a lot about that we've had a lot of
260:54 - great talks about uh things like
260:56 - typescript and how type safety can help
260:59 - save
261:00 - some headaches uh from the developer
261:02 - life that we all know and uh don't so
261:05 - much love i mean we have just learned so
261:07 - much
261:08 - what else am i uh am i missing here
261:10 - jonathan
261:11 - well i i there's some this is such a big
261:14 - ecosystem now it goes well beyond what
261:17 - it was even just a year ago uh things
261:20 - are kind of exploding in a very good way
261:22 - um and and of course there's so much
261:24 - more to come
261:26 - not just today but in years to come uh
261:29 - we we're very excited about the future
261:32 - of react-a-thon but also
261:34 - for what we have remaining for the rest
261:36 - of the day um which we can talk about
261:39 - here in just a minute
261:41 - absolutely and yes um we have had so
261:43 - many great folks uh come in and uh work
261:46 - with us in different formats so not just
261:49 - the socks we've also had these amazing
261:52 - workshops these amazing topic table
261:54 - sessions the sponsor booths so hopefully
261:57 - everyone has had lots of amazing
261:59 - opportunities to connect and that this
262:01 - is not the end of anything this is going
262:04 - to be hopefully the beginning of lots of
262:05 - great conversations following out of
262:08 - these amazing um spaces and forums for
262:10 - us all to
262:12 - get to know each other and dig into some
262:13 - of these exciting topics and yes as
262:16 - jonathan mentioned the conference is not
262:19 - over we have wrapped up our stage talks
262:21 - but we have a very special treat to
262:24 - close out the day today we are going to
262:26 - be hearing a live
262:29 - recording of syntax live so uh syntax um
262:34 - is a very exciting podcast syntax fm um
262:39 - that we are going to get to uh be part
262:41 - of all here together and it is hosted by
262:44 - the incredible scott telinski and wes
262:46 - boss so scott telinski is a web
262:49 - developer and creator of
262:50 - leveluptutorials.com
262:52 - which features comprehensive tutorials
262:54 - on everything from react to figma and he
262:58 - is also importantly a father of two and
263:01 - ask him about this one a breakdancer
263:05 - super important super important uh yes
263:07 - uh syntax.fm uh the the other person
263:10 - that you've probably heard of uh on top
263:13 - of scott is wes west boss is the creator
263:15 - of many popular web development courses
263:18 - including javascript 30.com probably a
263:20 - lot of you that was your entry into
263:23 - javascript in the very beginning
263:25 - the
263:26 - full stack advanced react and graphql
263:30 - and his latest course master gatsby
263:32 - these are all things that wes has been
263:34 - creating you've probably learned
263:36 - something from him and if you haven't
263:37 - you probably will today and i know that
263:40 - they have a lot of tasty treats for us
263:42 - loaded up that's a syntax.fm cut there
263:48 - nice so we are super excited to have
263:51 - scott and wes um co-hosting their wildly
263:54 - popular podcast syntax fm here live
263:57 - today um and we are you know as as usual
264:01 - on syntax live wes and scott get super
264:03 - interactive with their audience so we
264:06 - are excited to allow the rest of the
264:08 - conference to also
264:11 - but unfortunately here on the stage
264:13 - where you've been watching these great
264:14 - talks all day we have about a 20-second
264:17 - delay with the broadcast so it's not the
264:19 - best for audience interaction so uh we
264:22 - are all going to migrate
264:24 - over to the sessions tab
264:27 - tab here somewhere on the left of your
264:30 - screen um to watch syntax live and for
264:34 - everybody tuning in on the youtube
264:36 - channel on free code camp's youtube
264:38 - channel you will be able to see it live
264:40 - but it'll again have a little bit of a
264:41 - delay for that live broadcast
264:44 - but first before you go we want to thank
264:46 - you all for being here and experiencing
264:49 - this very unique version of react-a-thon
264:52 - with us
264:53 - if you missed any of the talks you'll be
264:54 - able to find all the recordings in about
264:56 - a week on the react-a-thon youtube
264:58 - channel
264:59 - and from the main virtual stage here at
265:01 - react-a-thon
265:03 - anjana and myself are signing off
265:07 - yes we uh we have had an amazing time
265:10 - with you all these last few days thank
265:12 - you so much for joining us and for
265:14 - having us as your mcs um it has been an
265:17 - absolute pleasure so once again uh we
265:20 - are just thrilled that everyone could
265:22 - come together here and especially since
265:25 - it was the first edition of react-a-thon
265:28 - in the cloud react-a-thon on the webs
265:31 - coming at you through your screen so we
265:34 - hope fingers crossed by this time next
265:37 - year maybe we can all uh
265:39 - be in person uh again and if not then
265:42 - then sometime in the near future we hope
265:44 - to see you all here in san francisco so
265:46 - i've been angina vacheel a developer
265:49 - advocate at observable and thank you so
265:51 - much for having us
265:52 - and with me here
265:54 - and i'm jonathan catrell i am a director
265:56 - of technology at pbs also host of
265:59 - developer t
266:00 - and this has been so wonderful let's
266:02 - enjoy a jam-packed hour of syntax
266:06 - with wes boss and scott telinski
270:35 - i almost did the scary voice again
270:37 - welcome to syntax everybody
270:39 - spooky
270:41 - uh thanks so much for everybody for
270:42 - tuning in my name is oh no we have
270:45 - slides for this um welcome scott how you
270:48 - doing
270:51 - you guys get
270:53 - a look behind the scenes of how
270:54 - unprepared we are
270:56 - you didn't even clap you put your hands
270:58 - up you put your hands up and i put my
271:00 - hands up and i was like oh we're gonna
271:02 - clap no clap all right let's do the club
271:03 - ready three two
271:05 - one
271:08 - that was the best cop we've ever done
271:10 - not for me
271:12 - awesome well uh let's let's get into it
271:15 - thanks everybody for coming out this is
271:16 - super fun we've got a lot of interaction
271:18 - today so uh make sure that you're glued
271:21 - to the chat and we also have um some q a
271:24 - and some stuff we got links coming up in
271:25 - just a sec
271:27 - yeah
271:29 - uh so to answer your question from a
271:31 - minute ago i'm doing good wes i'm doing
271:33 - i'm doing very good uh those of you who
271:35 - are listening on the podcast this is uh
271:37 - being uh originally recorded uh at
271:40 - react-a-thon 2020
271:43 - so shout out to
271:45 - uh everybody who's listening into a post
271:48 - fact but uh this is this is going down
271:50 - live right now uh how do we want to kick
271:52 - this off wes
271:54 - i think let's let's get into intros and
271:56 - uh
271:57 - and then we'll we'll get into the show
271:59 - yeah
272:01 - well okay so uh for those of you who
272:04 - have never heard of syntax we are a
272:06 - twice a weekly podcast and on mondays we
272:09 - have
272:10 - 30 minute or shorter episodes we like to
272:13 - call hasty treats
272:16 - and on
272:19 - uh wednesdays we've got tasty treats
272:21 - that is our hour long um screenshot and
272:23 - scott you got your cursor in the middle
272:25 - of the slide
272:27 - i
272:28 - man you always drive the slides i don't
272:30 - uh it's true yeah no that's my problem
272:33 - because i could have css cursor none on
272:36 - that when you're in full screen mode
272:38 - with the css there's css for full screen
272:41 - right i could have cursored none it so
272:42 - my bad
272:43 - you should have added print styles as
272:45 - well for instance
272:47 - i actually have done print styles before
272:49 - because i wanted to
272:50 - uh export my slides to a pdf so i could
272:53 - upload them so we do printers for our
272:56 - invoices
272:58 - oh that's i actually have done that as
272:59 - well yeah it's worth it uh my name is
273:02 - scott talinski i'm a developer from
273:05 - denver colorado you can find me at
273:07 - s-t-o-l-i-n-s-k-i
273:10 - uh on just about everywhere uh instagram
273:13 - for dance moves and twitter for
273:17 - code moves
273:20 - my name is wes boss i'm a full stack dev
273:23 - from canada
273:24 - i tweet most recently fleet until they
273:27 - shut it down um and instagram at west
273:30 - boston no they're not but
273:32 - it's uh
273:33 - it's not taking off as well as i thought
273:35 - it would so we'll see
273:37 - my fleet
273:40 - all right what do we got next so today
273:42 - is a live podcast what do we got on the
273:44 - gamut
273:46 - next slide please scott
273:48 - next slide
273:50 - it's weird not being able to control the
273:52 - slides
273:53 - um yeah so
273:54 - we're gonna have all i want for
273:56 - christmas and react
273:59 - js or nay s where you have to decide if
274:03 - the library that we're referring to is a
274:06 - real javascript library or uh if it's
274:09 - not if it's fake if we made it up or if
274:11 - it's
274:12 - uh potentially something else as well as
274:15 - a javascript library
274:17 - we've got underrated versus overrated
274:19 - where scott and i talk about
274:21 - hotness you hear about often and we're
274:23 - gonna give our opinion of whether you
274:25 - should spend your time on it or not
274:29 - we're also going to be doing a fun game
274:32 - that we prepared and i'm actually really
274:34 - excited about this one because we have
274:36 - not talked a whole lot about it but
274:38 - we're doing something called syntax
274:39 - error where wes and i are going to
274:42 - uh throw up a code that has a small
274:45 - error in it somewhere and we're going to
274:47 - have to try to find it without uh code
274:50 - styling or anything like that
274:53 - we've got uh javascript hot take tweets
274:55 - that's all i say about that for now
274:58 - javascript take tweets and we also have
275:00 - q and a
275:02 - with scott and wes the q is is me and
275:05 - the a is wes in this one for the q a
275:08 - we've got a link um so uh if you have a
275:12 - question you'd like us to answer um go
275:14 - to pigeonhole.a t forward slash tasty
275:18 - um and that will there's two things on
275:20 - there we're gonna we're gonna play a
275:21 - little polling game in just a sec and
275:23 - then there's also a q a you can you can
275:25 - add your questions in there so um if
275:27 - you've got something already throw it in
275:29 - there um and you can upload the good
275:31 - ones and whatnot
275:32 - yeah
275:34 - so
275:35 - let's get into the content here uh the
275:39 - first thing we're going to be doing is
275:40 - all i want for christmas in react is and
275:43 - these are fun things and if you think
275:45 - some of these things should not be added
275:46 - to react that's cool uh i think these
275:49 - are just sort of some things that maybe
275:50 - we've seen either elsewhere or just
275:53 - things that we think could be better
275:54 - that we really like i would love to see
275:57 - it react
275:58 - so the first one um i think this is be
276:00 - on top of a lot of people's lists would
276:02 - be suspense for data fetching uh you
276:04 - know there's just an endless amount of
276:06 - jokes you could make about being in
276:07 - suspense about suspense but i'm not
276:09 - going to go there
276:13 - once you use suspense for data fetching
276:16 - or at least give it a little try uh it's
276:18 - really nice to use uh and i would love
276:21 - to to see more of this but man yeah i
276:24 - think we're just gonna be waiting for a
276:25 - little while
276:26 - yeah i don't know um i just wish that we
276:28 - knew what the status of what it was um
276:31 - or like i know they're they're trying to
276:32 - spend their time um to see like make
276:34 - sure that they make the right choices
276:36 - and and the best approach and we have
276:38 - all this like possible server streaming
276:40 - stuff that's coming so i'm pretty
276:43 - interested to see what comes of that
276:45 - next one we have here is mountain
276:46 - unmount animations um there's just this
276:49 - is a general theme for me in react is
276:50 - that um
276:52 - i look over at it's that meme where i
276:54 - look over at some of these other
276:55 - frameworks
276:56 - that looks nice like i kind of wish that
276:58 - a lot of the stuff was just built in and
277:00 - you didn't have to use third-party
277:01 - library i wish there was just like a
277:03 - first-party way to do this this type of
277:05 - stuff and i don't even do a lot of
277:07 - animations i don't scot you do lots
277:08 - right yeah i do lots and in specifically
277:13 - the um
277:14 - the mount the unmounting animation bit
277:16 - kills me so many times because like if
277:19 - you're nested deeply and you want to
277:23 - control like the delay like even a point
277:27 - three second delay on unmounting a
277:30 - component it's kind of difficult to like
277:32 - really orchestrate that uh and it's not
277:34 - like it's not doable
277:36 - we have things but if you are several
277:39 - components deep and you want to unmount
277:41 - the parent component orchestrating
277:43 - something nested like that
277:44 - not not super duper easy to do still
277:50 - this next one i'll let you take because
277:51 - i know this is your your baby yeah well
277:54 - okay so i would like to see single file
277:56 - components which like it doesn't
277:58 - necessarily say that i need single file
278:00 - components and really what that is is
278:02 - the idea that you have a file um and the
278:07 - framework can understand a little bit
278:08 - more about the application or that
278:11 - specific component just by the nature of
278:13 - the fact that it's in a file
278:17 - the obvious example of this would be
278:19 - something like a style tag in a spell
278:22 - file a style tag in a spell file
278:24 - automatically scopes the css within that
278:27 - file to that component and the amount of
278:31 - js you could save typing just by having
278:34 - writing a little style tag below your
278:35 - component and having it just work a
278:37 - little sprinkling of uh magical uh
278:41 - rock salt what do do you
278:43 - have any fancy salts we have a volcano
278:45 - which is black
278:47 - really no we have um
278:50 - what's the the flaky salt in diamonds
278:52 - yes diamond
278:54 - what is that stuff courtney just bought
278:56 - it i sick picked it on the podcast
278:58 - before mal don't yell don't um and we
279:01 - you we bought like on amazon you can buy
279:03 - like a bucket of it and last summer i
279:06 - bought a bunch of salt cellars which is
279:08 - like a little
279:09 - wooden
279:10 - thing with the lid on it and um i gave
279:12 - everybody in my family a salt cellar
279:14 - with the the salt in it it was an
279:16 - awesome gift super cheap
279:18 - and uh it's got a nice little stocking
279:20 - stuffer so yeah for you i would take a
279:23 - salt flight uh add a little bit to my uh
279:25 - component files and and have single file
279:28 - components there
279:30 - uh next one we have here is prevent
279:31 - default shortcuts um just like
279:34 - one of these little things like if there
279:35 - was a syntax
279:37 - for handling events
279:39 - that was like star equals i think i
279:41 - don't even know maybe i think another i
279:43 - saw this in another framework a lot of
279:45 - them
279:46 - yeah so what's the smell syntax for that
279:49 - you just uh you can you can just tell it
279:52 - to
279:52 - to ignore the prevent default like
279:54 - directly on the
279:56 - on the component via a directive i
279:58 - forget what the syntax is offhand
280:01 - star like on click or
280:04 - handle change star equals and it like
280:06 - immediately default prevents the default
280:07 - on that that would be kind of cool yeah
280:09 - and i'm really trying to i'm really
280:10 - trying to limit the amount of times i
280:12 - say spelled here on my promise
280:14 - jonathan says this is a smeltadon it's
280:16 - true maybe we just need to
280:18 - um move over
280:21 - what do we got next here um form input
280:23 - state um to mapping yeah i just think
280:26 - like like forms in react like that like
280:28 - everybody uses forms in their react
280:30 - application or almost everybody does and
280:32 - it wouldn't it be great if there was
280:33 - some sort of like built-in thing like i
280:35 - remember back to the angular days i
280:37 - still remember like it just like you
280:39 - just like ng bind and you give it a
280:41 - piece of state and it just sinks in like
280:43 - oh my gosh and like if it's a number it
280:45 - will parse float or parse into it um
280:48 - there's i know there's lots of libraries
280:50 - out there whenever i talk about forms
280:51 - and everyone's like oh have you heard of
280:53 - formic before i'm like yes i heard a
280:54 - format in like it's awesome but like i
280:56 - wish react would be
280:58 - uh default have all that stuff baked in
281:01 - for you when i look at like formic code
281:04 - it's like this is no less complex than
281:07 - just writing all the state updaters
281:09 - myself um
281:11 - and that's not what i'm looking for i'm
281:12 - not looking for complete i mean yes i
281:15 - want complete control but i'm not
281:16 - looking for
281:17 - endless fine tunability i'm looking for
281:19 - do it all for me um and that
281:23 - that can be nice i actually ended up
281:24 - even writing my own form library because
281:26 - i didn't like any of them and and it's
281:29 - still not great and maintaining your own
281:30 - formal library kind of sucks
281:32 - in itself so like
281:34 - yeah i there there has to be a better
281:37 - way than than making controlled state
281:40 - for each individual each individual or
281:42 - reducer or whatever there has to be a
281:44 - better way
281:46 - um
281:47 - now we're going to be kicking off
281:49 - something that we like to call js or
281:51 - nay s
281:53 - and this is going to be a fun little
281:56 - game where we shout out a library title
282:00 - or potential library title and you tell
282:02 - us if it's a javascript library an
282:04 - object of which we're going to define or
282:06 - both
282:07 - uh so we've done this a couple of times
282:09 - on our live shows and it's one of our
282:11 - favorite games so we gotta keep coming
282:12 - back to it so you gotta head to
282:15 - pigeonhole.at forward slash tasty or
282:17 - scan the qr code in the slides here and
282:20 - it will get us up and
282:23 - running let me bounce on over to
282:27 - yeah
282:28 - we got 19 people in there right now
282:34 - 25 west do you see the slides or do you
282:37 - see pigeon hole on your end right now i
282:38 - see pigeon hole yeah
282:41 - so click through to the js or nas you
282:43 - bet
282:45 - 36
282:48 - 42 how many people should we wait for we
282:50 - got two
282:51 - 122 watching on there and got another
282:54 - 164 on youtube
282:57 - so
282:57 - [Music]
282:59 - let's let's see how many we wait for
283:03 - you are currently
283:04 - [Music]
283:12 - oh and now it's going up
283:14 - going up i think it's i think that's the
283:16 - youtube delay right there skyrocketing
283:18 - let's let's wait till we go to a hundred
283:21 - so
283:21 - [Music]
283:24 - what are you sipping on with
283:26 - i'm sipping on uh young rival
283:29 - it's uh
283:32 - strong ipa in canada if a beer is over
283:35 - like 5.2 percent it must legally say
283:38 - strong beer on it which is funny because
283:40 - it's like like like laughs in german you
283:43 - know like yeah
283:44 - yeah i don't know if i ever told you
283:46 - this story but we went to montreal for
283:47 - my brother's bachelor party and we were
283:50 - like we were like oh yeah bad flip party
283:53 - right and so we went to the store to get
283:55 - a bunch of beer and we were all sipping
283:58 - on these beers and i had like maybe like
284:00 - three beers and i was like what is going
284:02 - on i do not even i do not even feel
284:05 - tipsy at all and we look and they're
284:06 - like two percent beers and we were
284:08 - basically just like hydrating ourselves
284:11 - the whole time uh yeah it was a lot like
284:13 - utah it was very funny we were just like
284:15 - oh what so we had this giant case of two
284:18 - percent beers that we had to go through
284:20 - it was it was ridiculous
284:22 - that's hilarious all right 91 let's
284:25 - start it there ready start it i'm ready
284:28 - start quiz all right so
284:31 - is
284:32 - graphene uh
284:34 - carbon atoms organized in a hexagonal
284:37 - lattice
284:39 - or
284:40 - an oh go ahead sorry i forgot how we do
284:42 - this go ahead this is the flow west come
284:43 - on or an opinionated python library for
284:46 - building graphql libraries
284:50 - oh i forgot to delete that in python all
284:52 - right i thought i thought it deleted the
284:54 - np or both or both
284:58 - of them
284:59 - wow
285:00 - wow they're flying in now yeah
285:05 - i can see the answers right now
285:10 - all right we're going to reveal the
285:11 - answer
285:17 - both
285:19 - it is both so i looked it up
285:22 - what graphene was and it's when carbon
285:25 - atoms are organized in a specific way
285:28 - kind of interesting wikipedia read
285:31 - next up we have floodlight is it a super
285:34 - simple syntax highlighter for xhtml
285:37 - documents
285:38 - a large light used to illuminate dark
285:42 - outdoor spaces
285:44 - or both
285:49 - i think we're getting people on this one
285:50 - scott it's fun to see the the answers i
285:53 - get to see the answer streaming in by
285:54 - the way shout out to pigeonhole um they
285:57 - make this awesome
285:59 - like conference software where you can
286:01 - do like live polling like we are doing
286:03 - right now and um
286:05 - it's awesome like we checked out
286:06 - probably five or six different pieces of
286:08 - software
286:09 - and uh i think i want to have the one of
286:11 - their devs on
286:13 - the podcast just because of how
286:15 - super fast and like slick it is yeah all
286:18 - right ready
286:19 - reveal answer
286:23 - oh
286:24 - man holy three point seven percent of
286:26 - you got it correct it's literally both
286:28 - white i think you might have
286:30 - to goof this one oh yeah so obviously
286:32 - it's both so i keep that up
286:35 - but it's only not only 40 percent of you
286:37 - got it right
286:39 - it's not a light to eliminate dark
286:42 - spaces it is it is
286:44 - oh man all right next
286:47 - machine
286:49 - is this an early 2000s skate brand
286:53 - or a view based gui for creating state
286:56 - machines
286:57 - or both
287:01 - [Music]
287:03 - hello
287:05 - i'm seeing i'm watching the youtube chat
287:07 - and everyone's like wait a floodlight
287:08 - literally
287:13 - the original description for that one
287:15 - was a literal floodlight
287:18 - and i was like i changed it yeah
287:22 - oh man that is good
287:31 - all right here we go answer
287:36 - boom 51 of you were correct it is an
287:40 - early 2000's escape front although that
287:41 - would be a good name for it it's like
287:43 - totally believable it's so unbelievable
287:47 - a view based gui for creating state
287:49 - machines oh believable yeah
287:52 - all right next
287:54 - next joplin
287:56 - is this a free open source note taking
287:59 - and to do application based on markdown
288:02 - so i got cut off there
288:04 - a city in the northwestern corner of
288:08 - missouri
288:09 - or both
288:18 - they are streaming right in
288:20 - streaming
288:21 - i like all the skaters in the chat are
288:23 - like toy machine
288:25 - yeah one of my favorite skater skates
288:27 - for toy machine
288:30 - all right ready reveal
288:32 - really wait hold on who's your favorite
288:34 - skater
288:35 - uh his daniel uh man
288:38 - his last name's really hard to pronounce
288:40 - daniel daniel live
288:43 - like i always want to say leviathan
288:46 - amazing
288:47 - i'll check them out are you ready i'll
288:49 - share them with you
288:51 - both 50.9 percent of you guessed it is
288:54 - both i didn't even know this i was just
288:56 - looking for um i went on github's like
288:58 - trending repos and i saw joplin and i
289:01 - was like oh i wonder what joplin is and
289:03 - i also figured out like it's a wicked
289:05 - markdown
289:07 - um app well they're like you know we
289:08 - were talking about like how i can't take
289:10 - markdown
289:11 - notes on my phone and like have them
289:13 - sync to just files on my computer yeah
289:16 - um looks like this
289:18 - does that
289:19 - oh
289:21 - something else for that
289:22 - what is that do you remember i'm very
289:25 - curious because i'm my eyes right now my
289:26 - phone is currently dead so oh yeah scott
289:30 - poor scott
289:31 - this is the new weekly segment what
289:33 - piece of technology is broken with scott
289:36 - right now dude i can't even like my
289:38 - iphone stopped working just out of the
289:40 - blue it started looping
289:41 - and i'm uh gotta send it off i have no
289:43 - idea what's going on with my tech no
289:46 - idea
289:47 - all right all right next one no is this
289:50 - a javascript library that connects to no
289:53 - code tools
289:55 - like uh what was this one um
289:59 - bubble the i o
290:01 - i didn't realize that
290:03 - or is it a smart 12 volt car battery
290:05 - changer charger or both
290:12 - doo doo doo doo doo doo doo doo
290:24 - all right ready
290:29 - oh
290:30 - this one was very split uh this is a
290:33 - carvel that and in fact i was uh my
290:35 - battery just died because i haven't
290:37 - driven my car in like nine months and i
290:40 - didn't drip feed it uh so
290:42 - i was like looking at battery stuff on
290:44 - amazon and that's where i found the noco
290:46 - uh that's how we uh come up with these
290:48 - questions here so you gotta say 37.8
290:51 - percent voted the correct answer we
290:53 - gotta say it for our audio only
290:54 - listeners audio only yep next one we
290:57 - have here is inner is it an internet of
291:00 - things smart light bulb
291:02 - or a css in js library for selecting
291:06 - parent selectors
291:08 - and unfortunately this one cannot be
291:10 - both
291:23 - this is a good one i kind of like not
291:24 - having both but both like at least you
291:27 - can throw people
291:28 - yeah both is definitely the wild card in
291:30 - my mind because it adds that little bit
291:32 - of like
291:33 - well could it be
291:35 - yeah
291:37 - all right
291:40 - oh
291:47 - it was the internet of things smart
291:49 - light bulb
291:50 - which is funny about this is because i
291:51 - actually sick pick the inner bulbs on an
291:54 - upcoming episode and i was like wait
291:56 - when is that episode airing did i uh did
291:58 - i
291:59 - ruin my uh
292:01 - my uh
292:02 - js or nas oh yeah you're sick
292:06 - next one is cap coma strand is it a
292:10 - thermoplastic carbon fiber composite rod
292:13 - used in
292:14 - modern building
292:17 - or a redux-like state management library
292:20 - for svelt
292:23 - or both
292:26 - wow i'm about to get them votes let's
292:29 - just say i'm surprised that's this one
292:32 - i think i think it's safe to say that
292:34 - you're surprised about all of them so
292:35 - far
292:37 - i thought this one would have got people
292:40 - it's not getting people people know what
292:42 - this is do you know what this is people
292:43 - got got or people did not get got they
292:46 - did not get got on this one not all
292:50 - do i know what this is i'm gonna guess
292:51 - it's a thermoplastic carbon fiber
292:53 - composite rod used in modern buildings
292:55 - but i'm not quite sure
292:58 - all right reveal
293:02 - yes almost 77 of you guessed correctly
293:05 - that's an odd thing to know
293:08 - that
293:09 - it is a thermoplastic carbon fiber
293:10 - composite rod i think most people could
293:13 - look at this and say there's no way
293:14 - that's an actual thing and that it's
293:17 - most likely a thermoplastic carbon fiber
293:18 - composite rod
293:21 - oh man all right next one
293:24 - sputnik five
293:26 - sputnik v
293:28 - uh is this a code name for an upcoming
293:30 - wordpress release
293:32 - with the build
293:34 - the built-in headlights
293:36 - in headless
293:37 - getting that cut off
293:39 - yeah they're getting cut off i think
293:40 - that's a
293:41 - i thought i had them all in there maybe
293:43 - it's a
293:44 - limitation of this thing or is it a
293:46 - non-replicating viral vector covet 19
293:49 - vaccine
293:55 - it's funny because we should be we
293:57 - should be voting on the ones that the
293:58 - other person wrote because yeah okay
294:02 - so you
294:02 - tell me what you think it is
294:04 - i think that this is the wordpress thing
294:11 - okay i think people are googling it
294:13 - because it was very much skewed in the
294:15 - early days to the wrong one and now it's
294:19 - it's going up all right ready
294:22 - it is 45 percent of you guessed
294:25 - correctly it's a non-replicating viral
294:27 - vector covid19 vaccine but 44 of you
294:31 - thought it was a a code name for
294:33 - upcoming wordpress release um
294:37 - it's not though because wordpress only
294:39 - uses jazz musicians for their uh code
294:42 - names
294:43 - well
294:44 - who doesn't know that
294:46 - okay
294:49 - oh that's good people in the chat are
294:51 - saying how many they got right one out
294:52 - of eight
294:54 - all right
294:55 - the highest score was me
294:59 - i bet that person the highest score
295:01 - person probably picked both for
295:03 - floodlight and was like
295:05 - yeah yeah you know what so there was
295:07 - there's two people that got all of them
295:09 - cracked because obviously i goofed up
295:11 - the headlight one but that was fun that
295:13 - was fun
295:15 - awesome all right thanks for tuning in
295:17 - let's jump back to the slides now yeah
295:19 - sorry it's for some reason when i go out
295:21 - of or when i go into full screen i have
295:23 - to go
295:24 - like back
295:26 - i have to go out of full screen all
295:28 - right so
295:30 - uh
295:32 - next thing we're going to be doing is
295:34 - talking overrated and underrated and
295:36 - this is sort of like a a segment where
295:38 - we're just kind of gauging each other's
295:40 - interests or ideas on some of these new
295:42 - tech things
295:43 - so let's kick it off with the very first
295:46 - one is dino overrated or underrated i'm
295:50 - gonna say right now
295:52 - it's probably underrated it's very nice
295:55 - to work in um
295:57 - i think the permissions model of it all
296:00 - is very uh very forward-thinking i think
296:02 - the entire
296:04 - import via url is not as painful as i
296:06 - expected it to be
296:08 - overall the typescript experience with
296:12 - it not having to run a bundler not have
296:15 - to do any of that was just
296:17 - very nice it's very nice to use and i
296:20 - like that all of their tooling is sort
296:22 - of
296:23 - um
296:24 - well what's the reason what's the
296:26 - reasonable way to say this not all over
296:27 - the place it's not a total mess so uh i
296:30 - like it
296:31 - yeah i i think it's i'm gonna say
296:33 - underrated as well um not to say that
296:36 - you're going to build your next app on
296:37 - it because that would that would
296:38 - probably be not a good idea
296:40 - because it's very much in the early days
296:42 - yeah um but there's there's like a lot
296:44 - of and you probably have heard this on
296:45 - the podcast we've been talking a lot
296:47 - about shifting
296:48 - um tooling right now we've been talking
296:50 - a lot about esm becoming
296:53 - the thing now that it's in node uh we've
296:55 - been talking about modules and urls
296:57 - we're talking about typescript um and
297:00 - dino seems to just nail all of those
297:03 - things um
297:04 - and that's really cool um will it
297:07 - replace node i don't i don't think so
297:10 - maybe it would you would see it coming
297:13 - for like in like five years like it's
297:14 - not like we're gonna wake up tomorrow
297:16 - and be like oh my gosh i'm i have no
297:18 - skills left and like that's the other
297:20 - thing about it is that if you know
297:21 - javascript and you're in node like you
297:23 - switch over to dino no problem um but
297:27 - it's it's kind of cool and i'm very
297:29 - curious to see how
297:31 - node will react to this but also it's
297:34 - it's harder for node to just do this
297:36 - stuff because
297:38 - they have to maintain compatibility with
297:40 - the rest of the node that's why esm in
297:42 - node was so hard to get right because
297:45 - they couldn't break
297:46 - 10 years worth of work that they've done
297:48 - whereas dino could just be like all
297:49 - right brand new thing here we go
297:54 - uh next one is on the uh sort of
297:56 - somewhat related is esm import
298:00 - from url and
298:02 - i think this one is very very
298:04 - um very good
298:06 - in fact it only took me a little bit to
298:08 - this is underrated i would say i think
298:11 - importing anything from
298:13 - url is really pretty underrated overall
298:17 - because
298:18 - it is to me one of the
298:21 - the fastest ways to try out a file i
298:23 - know that when we were trying out stuff
298:25 - with ts in um dino it was like so nice
298:29 - to be able oh let's just import this
298:31 - file from a url
298:33 - yeah just in general importing from a
298:35 - url and being able to access the file as
298:37 - an import like that very very good
298:40 - yeah i think so too as well like first
298:42 - you can do that in literally you can do
298:45 - it in javascript in the browser um which
298:48 - is super cool that you can just like you
298:51 - you can write an app have a html file
298:54 - script tag type of module
298:57 - and then just start importing stuff from
298:58 - different urls that are out there
299:00 - and i think that's pretty cool i don't
299:02 - know how i feel about
299:05 - um upgrading like what happens when you
299:08 - upgrade like a bump of version release
299:10 - i'm sure there will be tools around that
299:13 - um because like you you literally import
299:15 - it from like whatever cdn.com forward
299:18 - slash
299:19 - v2
299:21 - v2.2.0 and then what happens when two
299:23 - point zero point one comes out do you
299:25 - like find and replace
299:26 - um do you have to copy paste that in dna
299:29 - and there's orandino there's a uh
299:31 - uh
299:32 - like a like a standard of doing like a
299:35 - depths folder depth.ts where you do your
299:38 - imports and that sort of almost becomes
299:39 - a package.json if you think about it
299:41 - okay but it's just with import
299:43 - statements uh so that's definitely a
299:44 - thing there are there are detractors
299:46 - from that but uh it seems like that's
299:48 - what we taught in our dino course so
299:51 - like it seems to be pretty much of a
299:52 - like a standard in that world so who
299:55 - knows maybe that becomes a thing
299:57 - so you have like a depth.js file where
299:59 - you import everything you need for the
300:01 - project yes and then you and then is it
300:03 - global or
300:10 - it's almost like a package.json because
300:12 - you're setting the version when you're
300:13 - importing it and then you're yeah you
300:15 - want to up the version you're only
300:16 - modifying it in one spot oh
300:18 - that makes so much sense yeah because
300:20 - you can even inside but yeah you can use
300:22 - the export from syntax for that or you
300:25 - say like
300:26 - export react from http whatever and what
300:29 - that does is it imports it and exports
300:31 - it in the same go oh that makes so much
300:33 - i don't i didn't think of it that's
300:34 - awesome yeah it's nice
300:37 - uh next one is remix dot run wes do you
300:41 - want to take this one first
300:43 - yeah um this is the new uh react
300:46 - framework for building apps and websites
300:48 - from ryan florence michael jackson uh
300:51 - two
300:52 - of the devs or the devs behind react
300:54 - router awesome react uh thought leaders
300:56 - in the space uh and they are sort of
300:59 - like taking a look at the landscape and
301:01 - and rethinking it and um it's it's
301:03 - closed right now and i think it will be
301:06 - you have to pay for it um but from what
301:08 - i've seen it seems really interested so
301:10 - i'm going to go
301:11 - underrated on this one and not that
301:14 - we're going to everybody's going to be
301:15 - using it but i think that they are
301:18 - rethinking a lot of things especially
301:20 - with
301:20 - um i've what i've heard is that
301:22 - streaming from the server and this pain
301:25 - that we have which is server side and
301:27 - client-side rehydration and whatnot um
301:30 - i'm very curious to see and i bet if
301:32 - they like nail something like i bet
301:34 - other frameworks will adopt that as well
301:36 - yeah we're we're pretty much all going
301:38 - when we're agreeing on everything i
301:40 - think i think it's
301:42 - underrated uh i also think that like
301:44 - that like you said specifically about
301:46 - the streaming from server side uh yeah
301:49 - and that stuff sounds so good to me uh i
301:52 - i maintain our own server side rendered
301:55 - react application and
301:57 - it's not a lot of fun um it's just not
302:00 - it's not super easy but it also feels
302:03 - like it also feels like it's doing more
302:05 - work than it needs to and i think the
302:07 - remix folks are really figuring a lot of
302:09 - those aspects out um next one's gonna be
302:12 - x-state which believe it or not uh i'm
302:14 - gonna say it's underrated
302:19 - yeah that actually might have been a
302:20 - problem in our approach to this but uh
302:22 - x-state hey uh i don't know if you've
302:24 - used state machines at all west but when
302:26 - we were writing the video player for or
302:29 - the video uploading system so we upload
302:31 - our videos to all of those who have not
302:34 - uh heard we use a service called mux to
302:36 - do our video so we upload our videos to
302:38 - bucks and building that a video uploader
302:41 - was like the thing that made me see the
302:43 - light for state machines specifically
302:45 - because there were so many states that
302:49 - this uploader could possibly be in and
302:52 - so for me it was uh
302:55 - pretty eye-opening to control those
302:57 - states in the uh state machines world
303:01 - for the first time and just say like all
303:02 - right i really feel like this uploader
303:05 - is really solid compared to some of my
303:08 - other code which was mostly boolean
303:10 - flags said by state variables and things
303:13 - like that
303:15 - i've not used it so i'm gonna go medium
303:17 - rated but uh it's one of those things
303:19 - that you just can't hear people stop
303:21 - talking about it and we had david on the
303:23 - podcast six months ago and he talked
303:24 - about it and it
303:26 - it just made a lot of sense like i
303:27 - certainly had the problems that it
303:28 - solves
303:29 - yeah um i think we should skip a couple
303:32 - because
303:32 - we're uh we're running a little low on
303:34 - time so let's you want to move to the um
303:37 - lighthouse scores or no code
303:40 - rated
303:41 - no
303:42 - no code it's overrated i don't want to
303:44 - lose my job no code overrated yes render
303:46 - props overrated render props overrated
303:49 - underrated thunder
303:51 - lighthouse
303:52 - overrated rated they're fine
303:57 - okay
303:57 - uh now we're going to get into a really
303:59 - fun one that we're calling syntax error
304:02 - and this one is so much fun that wes and
304:04 - i have really not consulted on this
304:06 - beforehand uh so this could be a total
304:09 - mess so syntax error is we are going to
304:12 - be showing each other code with no
304:13 - syntax highlighting and the other person
304:15 - must find out what's going wrong with it
304:18 - uh and we initially had some idea of
304:19 - like point
304:20 - point giving points based on a time
304:22 - timer but let's just see how fast we can
304:25 - do it let's and uh for those of you who
304:29 - are watching along i have no pl please
304:31 - go ahead and try to solve these on your
304:33 - yourself as well but i have no clue how
304:36 - dastardly wes has chosen to be and i'm
304:39 - really
304:41 - see
304:42 - i was i was like
304:43 - do i want to do i want to work in what
304:45 - do i wanna do here okay give me the code
304:47 - scott first one yeah let's do it first
304:50 - one is for wes
304:56 - how do you find the bug in this code and
304:59 - no you do not have to know the libraries
305:02 - involved animated from frame promotion
305:04 - portal modal from utilities okay
305:06 - const there's there's a no error
305:10 - no no no no no that's not it no i see
305:13 - the arrow
305:14 - don't look at the chat because somebody
305:15 - spoiled it in the chat no i'm not
305:17 - looking at the chat
305:18 - uh is accent max width equals you got
305:21 - back ticks on that sucker that's fine
305:24 - um
305:30 - yeah that's fine okay uh return portal
305:32 - animate
305:35 - presence portal
305:40 - this is one that you will this this is a
305:42 - common bug
305:44 - close close action is being run on mount
305:46 - not on the closed event
305:48 - you are right
305:51 - yes
305:52 - all right
305:53 - ten points for me next one scott for you
305:56 - for me
305:57 - okay
305:58 - kant's okay i gotta not look at the chat
306:01 - okay we got
306:04 - an array with an object
306:05 - name string properties okay that all
306:08 - looks fine to me
306:10 - i see that you are using uh semicolons
306:13 - here so that's a no i'm just kidding um
306:18 - so your destructuring name
306:21 - oh man this one is dastardly okay this
306:23 - one is this is not hold on we should say
306:25 - this is not something you should do but
306:27 - it is valid javascript except for the
306:29 - part that's the syntax error
306:32 - i can you use a property uh parts 0
306:36 - before you yeah
306:39 - you can just declare you can destructure
306:42 - a value and then create a renaming
306:46 - no no we're creating new variables based
306:48 - on the previously destructured values i
306:51 - didn't know you could do that okay i
306:53 - know nobody knows that that's
306:56 - you know what it's handy for is if you
306:58 - have want to get the uh last item in the
307:00 - first item of an array you can say like
307:03 - uh you can destructure the length from
307:04 - an array and then i think i know what
307:06 - the error is by the way is it that
307:08 - you're giving me is that you're just
307:09 - returning first and last in the object
307:11 - and not returning the object itself
307:16 - yes that is it it's there is missing
307:18 - parentheses around
307:20 - the curly brackets
307:23 - right now there
307:25 - now that
307:28 - all right this one
307:30 - oh my gosh
307:34 - oh my gosh god this is a
307:37 - comp series form
307:39 - playlist
307:42 - oh man even typed it
307:45 - oh yeah this is sorry this is typescript
307:47 - i tried to remove any of the typescript
307:48 - stuff that's fine
307:53 - you state
307:54 - if there's a playlist author id
307:58 - i would consider this one desperately
308:00 - but um
308:07 - is it it's a syntax error right like not
308:09 - like a
308:10 - it's um it this code will not work it
308:13 - will it will run but it won't work
308:21 - i'm gonna have to go to the chat for
308:22 - this one this one
308:24 - uh the props could be defined somewhere
308:26 - else no
308:28 - sorry problem
308:30 - this is the type script though i i
308:32 - should oh
308:33 - you state is not imported
308:35 - no i'm sorry that's not it no that's
308:37 - right come on come on
308:39 - all right tell me what it is the actual
308:42 - i mean i'm sorry the actual error here
308:44 - is that a select list does not have an
308:47 - options
308:48 - oh i was gonna say that i don't want to
308:50 - look like an idiot like i didn't know it
308:52 - yeah so select list does not have an
308:54 - options property uh the everything else
308:56 - was sort of just that noise yeah
308:58 - everything else is nice okay next one
309:01 - here
309:03 - for me okay function
309:05 - function okay you spelled that correctly
309:08 - uh
309:09 - three url i always look for that i feel
309:11 - like you're going to do something like
309:12 - that okay
309:13 - const
309:14 - i would never do something like that i'm
309:16 - going to pull the graph at you and say
309:17 - use ref is not defined okay um
309:20 - okay right that your
309:23 - podcast component isn't outside of
309:26 - something you're just
309:28 - so the first is the function definition
309:30 - and then below it is using it using it
309:32 - mp3 url is equal to here's a string okay
309:38 - audio
309:39 - this is closed audio ref use ref
309:42 - uh controls hell yeah target set volume
309:45 - e set valley parts
309:47 - the volume is equal to volume
309:54 - range oh this one is difficult for me to
309:57 - find
309:58 - um
309:59 - use state good one
310:01 - set box isn't it is it funny how
310:03 - dependent we are on like people used to
310:06 - be like oh just use notepad for coding
310:07 - but how dependent we are on for silly
310:09 - little mistakes i use my uh yeah my my
310:12 - styling a whole bunch
310:14 - you want to know it
310:17 - i
310:19 - yeah now that
310:21 - the audio source says mp3 uri
310:26 - that killed it see that to me is
310:28 - dastardly i don't think that that to me
310:30 - is destroyed
310:32 - yeah i tried to use like a lot of like
310:33 - uh distractions because kind of ref done
310:35 - right and things like that
310:37 - yeah okay all right here's a uh here's a
310:40 - good one for you s so buckle up
310:43 - all right
310:44 - import wrap from react import link from
310:46 - rack router dom postcard post style link
310:52 - you have a nested component called card
311:00 - if link return
311:02 - link to
311:07 - where is the bug
311:10 - at least i didn't taunt you in this one
311:13 - what kind of bug is that
311:15 - um it's a react bug
311:18 - uh you can't
311:21 - uh maybe you can
311:23 - you're passing the prop with like a
311:25 - object and a string in it what are you
311:27 - talking about or no not objects are the
311:30 - curly brackets with the string in you
311:31 - can do that though right
311:35 - usually when i do it that way it's back
311:37 - text but i don't see why a single
311:40 - quotes like the color on the author card
311:44 - uh the color on the author card no
311:46 - that's fine
311:47 - that's just that's that's uh that's a
311:49 - misdirection is what that is that's what
311:50 - we call that i see i see what you're
311:52 - doing there okay um
311:55 - it's just to say hey uh you probably
311:57 - don't write like this very often
312:06 - the style's missing double curly
312:08 - brackets yeah you're not passing an
312:09 - object to style on the the link you're
312:12 - right so in for those of you who are
312:14 - watching and paying attention on the
312:16 - link component here we used a style
312:19 - property and then just passed in some
312:21 - a property and a value but there was no
312:24 - containing
312:25 - that's a good one yeah yep yep so
312:28 - they're all fairly oh i got one more ooh
312:30 - okay yeah sorry i wasn't in the mindset
312:32 - i got a
312:33 - oh
312:34 - this is this is just one liner
312:42 - um i mean i know what the bug is uh
312:45 - there's a bug here the the yeah the the
312:47 - date get full year is like a space
312:50 - between it is that correct
312:52 - that is wrong that is valid javascript
312:54 - did you know that it's like that yeah it
312:56 - works try it new date space docket full
313:00 - year isn't that weird i don't want to
313:01 - try that and i have no idea why that
313:03 - would work in that
313:04 - uh really because
313:06 - see that's
313:07 - yeah i don't know why actually that is
313:08 - dastardly okay
313:10 - what a year
313:13 - um so you have the opening and closing
313:15 - curlies oh you got an extra curly two
313:17 - curly yep nailed it
313:21 - that's good in that isn't that a good um
313:23 - distraction though with the space it's
313:25 - perfect distraction because nobody's
313:27 - ever seen that nobody ever sees that
313:28 - yeah
313:29 - this is pretty good
313:31 - all right we'll move into some hot cake
313:33 - tweets
313:36 - i asked on twitter
313:37 - for some hot take tweets what are your
313:39 - javascript hot take tweets um and
313:42 - everybody gave me their opinions which
313:44 - is hilarious because my like twitter's
313:46 - been
313:46 - ruined for like three days now uh with
313:49 - people sending me because not because
313:52 - like people do it but people reply with
313:54 - their hot take and then there's like a
313:56 - every single tweet has like a 40 thread
313:59 - argument behind it so the first one is
314:01 - uh from l'oreal tech spread syntax isn't
314:04 - super readable and you probably should
314:06 - use something else if you can have it
314:07 - yes i just shared an advent of code
314:09 - solution using it so sue me so i really
314:11 - like this one because
314:13 - um
314:14 - this has i do it myself but it's not
314:16 - super readable um how take tweet what do
314:19 - you what's your take on the scott
314:21 - i think it's wrong
314:23 - i don't know
314:24 - this is gonna bug me because i'm the the
314:26 - type of person who does want to go on to
314:28 - twitter and be like no that's wrong like
314:31 - it doesn't matter uh in fact but i i
314:33 - agree with laurie that like when i
314:36 - when i don't want to say i don't want to
314:38 - try to claim that she just started using
314:39 - them because i doubt she has but like um
314:42 - when i first started using them
314:43 - personally i i felt like
314:46 - this is not readable but like now that
314:48 - i'm i i've been to the edge and back and
314:51 - i've been using them for so long and i
314:53 - understand yeah
314:54 - like i i see through it for some reason
314:56 - i've i've been able to see through the
314:58 - lines of the matrix and now i just like
314:59 - it a lot but
315:01 - once you know what spread is then like
315:03 - you obviously have to know what it is
315:04 - but
315:05 - uh but once you know it's the best it's
315:07 - the yeah
315:10 - it can definitely
315:11 - be a little much uh next one is from
315:13 - chris hellman
315:15 - you missed one
315:17 - ah no
315:18 - keep going we're running out of time go
315:19 - to go to the
315:22 - okay next one is from chris gilman
315:24 - console.log is lazy and slows you down
315:27 - as a terrible debugging experience uh
315:29 - chris can be right about all of this and
315:31 - i will still use console.log until i
315:34 - enter the grave
315:35 - so uh yeah no debugger is great debugger
315:38 - is fantastic but sometimes it crashes my
315:40 - browser and sometimes it's slower than
315:42 - using deep or just a simple console log
315:45 - and seen actually
315:48 - like i we did a show on syntax about
315:50 - like advanced debugging techniques with
315:52 - like people ask me what else do you use
315:54 - break points um break on you can you can
315:58 - listen for dom changes
316:00 - um all of that stuff
316:02 - uh you can view network requests and all
316:04 - that um those are great and i use those
316:05 - when i'm when i'm in trouble but nothing
316:07 - wrong with the console log i love a good
316:09 - console log
316:11 - optional chaining makes code so much
316:13 - more readable and makes it harder to
316:15 - debug when it comes to optional props or
316:18 - fields
316:20 - i love optional chaining
316:22 - it's my baby and i will defend it i've
316:24 - not run into a really odd bug because
316:27 - that's the thing is like it could be
316:28 - undefined anywhere along your chain and
316:31 - you wouldn't necessarily know where
316:33 - it was undefined unless you took them
316:35 - out
316:36 - um but you could also just pop a break
316:38 - point in there or log the thing one step
316:41 - above see
316:42 - what is coming in what's funny is that i
316:44 - uh once i moved to typescript it made me
316:46 - realize just how unsafe some of my code
316:48 - was and like sometimes the solution is
316:51 - if you're in a conditional just dropping
316:52 - a question mark in there to do the
316:54 - optional chaining and it's like all
316:55 - right now this is uh safe i'm it's gonna
316:58 - work i don't have to worry about it ever
316:59 - again
317:02 - uh this next one is from dan dan says
317:04 - javascript really isn't that bad as long
317:06 - as you avoid double equals and four dot
317:09 - dot in uh yeah dan is dead on javascript
317:12 - is really not that bad and it's gotten
317:14 - better all the time
317:15 - a lot of the people i think who
317:17 - criticize it or even criticize the the
317:19 - changes on them
317:20 - are maybe people who came from other
317:22 - languages they're using javascript and
317:24 - it all feels like hectic and chaotic at
317:26 - this point uh and it is kind of chaotic
317:28 - but once you get in it you got it and uh
317:31 - you know i really i really enjoy working
317:32 - in javascript now typescript for the
317:34 - most part big fan um double equals i
317:38 - don't use it so one of the other hot
317:39 - ticks was double equals is fine
317:42 - yeah uh and the other uh for in yeah use
317:45 - four of instead i was added to the
317:47 - language a couple years ago and it's
317:48 - awesome yeah it's worth it
317:51 - next one is the npm ecosystem has turned
317:53 - javascript development into a game of
317:55 - legos rather than real programming and
317:58 - to that i say
317:59 - i'm a lego master i wouldn't be able to
318:02 - build some of the stuff i build without
318:04 - some of the packages from some much
318:06 - smarter people that's the beauty of
318:07 - javascript is that you can reach for
318:09 - these much harder things
318:11 - uh like oauth implementations and be
318:14 - crypt um when you don't necessarily have
318:16 - to do it i wouldn't know how to build
318:18 - that myself you know as real programmers
318:20 - they mold their own legos out of their
318:22 - plastic that they have forged
318:24 - from the oils of the earth
318:27 - yeah i i don't know about this one yeah
318:29 - i mean that's all for unless you're
318:32 - unless you're writing like a binary
318:34 - everything you're doing is the exact
318:35 - same as what you're saying npm is
318:38 - um okay
318:39 - react is the worst choice for beginners
318:42 - doubly so in its current state
318:46 - yeah i kind of agree it's it's it's it's
318:48 - not the worst choice for beginners
318:50 - because uh it's so widely used that's
318:52 - why it's a good choice for beginners
318:54 - it's so widely used you can get a job
318:56 - it's good on your resume right but if
318:58 - you are just trying to understand dumb
319:01 - events and whatever man uh keep it
319:03 - vanilla and if and if you uh want to
319:06 - move into a framework i don't know keep
319:07 - into something way easier than that
319:10 - yeah that's so for beginners listening
319:11 - let's not say you shouldn't learn react
319:13 - i literally have a course called react
319:15 - for beginners um
319:16 - but there are there's a handful of
319:19 - things you need to know about react you
319:20 - couldn't be able to just jump in but i
319:22 - think that's the same for a lot of stuff
319:23 - so i think i agree on this but
319:26 - you could still learn it it's it's still
319:28 - not not super hard and complicated
319:30 - there's just more you got to have like a
319:32 - list of like five gotchas you know it's
319:35 - also part of like saying like pancakes
319:38 - are the worst food for breakfast they're
319:39 - still pancakes man like they're pretty
319:41 - dope
319:43 - yeah next one aaron
319:45 - bushnell says if you work at an agency
319:48 - really try to avoid using um using
319:50 - things until it's absolutely necessary
319:52 - and even then only what you need when
319:54 - you manage hundreds of sites it quickly
319:56 - can become
319:57 - a tremendous source of technical debt i
320:00 - agree as somebody who still has a
320:02 - coffeescript site in uh production and
320:06 - what
320:06 - six or seven i've been working this year
320:09 - to convert all my gulp sites over
320:11 - the world are you saying
320:15 - it's i'm not writing it anymore but like
320:17 - it's it's still running and it still
320:18 - runs good
320:19 - um but uh yeah you definitely that's the
320:23 - beauty i loved doing agency work and
320:25 - freelance work because you could choose
320:26 - whatever you wanted but you can
320:29 - definitely fall into a hole um if you
320:32 - start using you just bring on a whole
320:34 - bunch of stuff it's the same thing with
320:35 - wordpress plugins too if you go bonkers
320:38 - on wordpress plugins you're going to
320:39 - have a bad time because half those
320:41 - things are going to be out of date or
320:43 - not maintained or break they're going to
320:45 - wait for you to bigquery
320:47 - yeah
320:49 - uh what do we got next do we want to get
320:50 - into q a because yeah yeah let's move
320:53 - into q and a we're running out of time
320:54 - here yeah because we've been going
320:56 - forever
320:57 - 100 more of these
320:59 - yeah some good ones some good ones go
321:02 - visit that tweet and listen to all the
321:04 - popular and popular pages so um if
321:06 - you've got a question for us um go to
321:08 - pigeonhole.at forward slash tasty
321:11 - um
321:12 - and ask a question or you can you can
321:14 - drop it in the chat as well um or
321:16 - wherever you
321:18 - you would like to to do that let me open
321:19 - up my admin board here
321:28 - all right i've got
321:30 - one here
321:34 - first question is from anonymous if
321:36 - you've recently started doing web dev
321:39 - work which career path would you choose
321:41 - startup
321:42 - fang fang is facebook amazon
321:46 - uh what's the other apple
321:48 - uh netflix and google yeah right you
321:51 - need to actually start making up like a
321:53 - fake fang with like different companies
321:55 - in here yeah it's bored
321:59 - uh
322:00 - yeah that would be hilarious uh yeah so
322:02 - would you choose startup fang or slash
322:05 - big tech companies or freelance or
322:06 - contractor if i started today
322:09 - um
322:10 - it depends um
322:12 - i
322:13 - for me i look at some startups and i
322:15 - don't envy
322:16 - the work life balance and the grind and
322:19 - and how quickly things move um but i
322:22 - also know people who get into startups
322:24 - and they're they're young and they've
322:27 - got
322:28 - nothing but time and and whatnot um
322:32 - certainly easier and i also not not to
322:33 - say that startups are only for young
322:35 - people because there's there's lots of
322:37 - people that are running
322:38 - um
322:39 - great startups they just work nine to
322:41 - five and they're done right but i think
322:43 - on the flip side there's also a very
322:45 - heavy culture in that fang
322:47 - um i really like studio work a lot
322:51 - yeah like that that's an option to
322:53 - working in a design dev studio because
322:55 - you get a lot of experience with many
322:57 - different projects and especially
322:58 - earlier on in your career um
323:02 - it can give you a lot of exposure to
323:04 - different projects in working with
323:06 - clients many times you're you're in
323:07 - client meetings yourself rather than you
323:09 - know being some project manager so you
323:11 - can get some managerial skills you can
323:13 - get some uh you know some project skills
323:16 - that shift very rapidly
323:19 - um
323:20 - i also i'm gonna say
323:22 - if you can get the fang job go for it um
323:26 - just don't allow your lifestyle to
323:28 - inflate what they're paying you um
323:30 - because it's very scary to be making two
323:32 - hundred thousand dollars
323:34 - um at facebook and before you know it
323:36 - like someone's gotta pay for that tesla
323:39 - and if you get sick of if you get sick
323:41 - of working at a fang and you want to go
323:43 - do your own thing like i get dms like
323:45 - this all the time people like oh wes i
323:47 - want to i want to make courses like you
323:49 - do i want to be able to just dick around
323:51 - on the internet like you do um and
323:54 - uh so like that would look so good on
323:56 - your resume like i work for google and
323:58 - now i'm doing my own thing x googler
324:01 - makes a new um product or whatever i
324:03 - think that would be kind of cool so if
324:05 - you can get it go for it um otherwise
324:07 - i'm a big fan of like scottish studio i
324:10 - went contract freelance my own and it
324:12 - worked out for me i really enjoyed it
324:14 - yeah yeah i agree
324:17 - uh uh eric real quick before we do the
324:19 - next one ask in the chat about uh
324:20 - breakdancing being added to the paris
324:22 - olympics i have been following the
324:24 - breaking in the olympics thing for maybe
324:27 - like 15 years now maybe longer than that
324:29 - they've been the the group that's behind
324:31 - it a lot of people have been trying to
324:32 - get it in since the literal 80s so um
324:36 - i'm very excited the the junior olympics
324:38 - for went really well you know a lot of
324:40 - the the people in the scene are
324:42 - concerned about it becoming exploited by
324:45 - the masses or whatever but to be honest
324:47 - the junior olympics went so well and
324:48 - they didn't really change it too much so
324:50 - i'm pumped uh this uh anon says
324:54 - typescript all the things and
324:57 - yeah i'm pretty much in i'm pretty much
324:59 - in uh i i really like it and i don't see
325:02 - myself writing anything else even like
325:04 - today i popped open a quick utility and
325:05 - i um would typically
325:08 - if i'm firing up a quick code utility
325:10 - i'm going to hit up just some some you
325:11 - know off the cuff js kind of like real
325:13 - quick stuff and i did it in typescript
325:16 - and it didn't i wasn't any more
325:18 - encumbered than i was in javascript like
325:20 - i felt i felt like i could flow with it
325:22 - and um and that to me was like a big
325:24 - thing because i always see typescript as
325:26 - this big barrier to entry you've got to
325:28 - set up your tooling and whatever but as
325:30 - long as you're using the right kind of
325:31 - systems that make it easy to get going
325:33 - and typescript all the things yeah
325:35 - i we were talking about this we had a
325:37 - topic table on typescript yesterday and
325:39 - i joined in and we were talking about
325:40 - like is it a barrier to entry anymore
325:43 - and i don't think so because like um
325:47 - pretty much every major or even minor
325:49 - package out there i have a one line
325:52 - uh line code called weight and somebody
325:54 - submitted types where they all have
325:56 - types already um
325:58 - you you can infer types for like like i
326:01 - just built right before this podcast i
326:03 - was like man i want to see my webcam but
326:05 - the like apple
326:07 - photo booth they crop it to like like
326:09 - this
326:10 - um so i was like i built like a it's
326:12 - called check my hair and it's just it
326:14 - just shows your webcam really quickly
326:15 - and i i'm like all right build this and
326:16 - type script and like the the number of
326:18 - line it was like maybe 40 lines of code
326:21 - and there was two or three spots where i
326:24 - had to literally type something and
326:26 - everything else was inferred and you got
326:28 - all the benefits from the the code
326:29 - completions and all that so um like i
326:32 - don't think everything no you can still
326:34 - write really good javascript but
326:36 - um i think the barrier to typescript has
326:39 - become very low in the last year or so
326:42 - that's specifically why i'm into it now
326:44 - because you can get up and running even
326:46 - for silly projects super quickly
326:50 - word
326:51 - uh
326:52 - next one you wanna grab it
326:54 - what do you do to keep up to date with
326:56 - the latest and greatest changes in tech
326:58 - front end libraries new languages etc um
327:01 - hey here's actually um
327:03 - do you have the github app on your phone
327:05 - wes
327:07 - um
327:08 - no i don't get it do i
327:11 - the github official app uh let me see
327:14 - pop it open here
327:16 - this is
327:17 - uh it's so good for finding new packages
327:21 - there's an explore tab on it and it
327:24 - gives you a bunch of potential libraries
327:26 - that you might be interested in yeah
327:29 - explore there we go and i use this like
327:32 - crazy for finding stuff i don't know how
327:34 - or why but um
327:36 - this to me like has really changed how i
327:39 - find projects because it shows you
327:41 - trending stuff and whatever but it's
327:42 - very good and i use it all the time to
327:44 - find new things i also uh look at
327:47 - awesome awesome repos you'll find things
327:50 - that like awesome script and then you
327:52 - just go down the line of list and look
327:54 - for cool stuff um just look for for neat
327:57 - little things so that's what i do
327:58 - personally
328:01 - next question we have here is what do
328:02 - you do to keep up to date with the
328:04 - latest and
328:05 - i read that i've read that sorry that i
328:08 - read and answered oh yeah obviously
328:10 - answered that um for me
328:12 - it's we can't ask this question all the
328:13 - time it's um follow you follow people on
328:16 - twitter who who follow this stuff um
328:19 - like scott and i listen to syntax um and
328:21 - like what do scott and i actually do um
328:24 - i read i read release notes of every
328:26 - single browser um i will anytime there's
328:29 - like a working group that changes a
328:31 - proposal
328:32 - um there is a good twitter account
328:34 - called intent to ship
328:36 - which is really good which means that
328:38 - like that at that point it's going to be
328:41 - in the browser in a couple weeks so
328:43 - um just like kind of watch those and
328:46 - you don't have to it's not like you're
328:47 - going to miss something if you listen to
328:49 - the podcast and follow
328:51 - a handful of good people on twitter
328:53 - you're going to hear about subgrid 14
328:56 - times and the 15th time that you hear it
328:58 - that's when you should probably pay
328:59 - attention because okay now now it's the
329:01 - thing i need to implement in my uh in my
329:03 - app
329:04 - speaking of cool new things uh
329:07 - i saw adam oh no uh not adam um oona
329:11 - tweeted this out houdini.how today
329:14 - oh yeah
329:16 - houdini.how very cool stuff for css
329:19 - houdini um so i posted in the chat so
329:21 - let me go and check that out all right
329:23 - uh
329:24 - wow big wallet questions here yeah they
329:27 - came in we got
329:28 - how much time left no time let's let's
329:31 - just keep going until they kick us off
329:34 - um
329:36 - what what other good questions we got
329:37 - here can you share some exclusive
329:40 - barbecue tips
329:44 - fish sauce did you did your mom try the
329:46 - fish sauce she did yeah she made it
329:49 - right my mom was like i'm making the
329:51 - recipe and i'm like what recipe and
329:53 - she's like the one from the podcast that
329:55 - wes was talking about so it's very fun
329:58 - uh yeah she made it no she loved it and
330:00 - um
330:01 - we do something very similar to that all
330:03 - the time we use fish sauce pretty pretty
330:05 - heavy-handedly over here
330:07 - fish sauce is a sick pick i would say
330:10 - all right um i'm just looking through it
330:13 - what do you expect of blitz js in the in
330:16 - the coming years
330:18 - uh we'll see
330:19 - um uh i don't know it's gonna have a
330:21 - tough time because i think as somebody
330:23 - who's used like full stack frameworks uh
330:25 - they it takes a lot for them to like
330:27 - really take off and blitz js is on top
330:30 - of next.js so at least has that going
330:31 - for it where it's like alright this is
330:33 - like nextgs with prism and or prisma and
330:36 - all this other stuff right
330:38 - and that's cool to me but like
330:40 - i feel like it will have a hard time
330:42 - getting
330:43 - getting people to really latch on to it
330:46 - and building a community but i think
330:47 - it's cool and i think it's worth doing
330:50 - i like this one what's the first node
330:52 - module you install in a brand new react
330:54 - project besides react itself
330:56 - rudder
330:58 - for me it's usually next js if it's
331:00 - multi-page or parcel
331:03 - if it is just a single little one-off
331:06 - app
331:07 - and because parcel will bundle it all
331:09 - for you which is
331:10 - kind of cool
331:12 - i like that that was a good question
331:18 - thoughts on using languages other than
331:20 - js or ts with react like kotlin for
331:22 - example i think it's neat um i've kind
331:25 - of looked into some of this myself
331:26 - lately but uh thoughts about using it
331:29 - i'm not good at any other language if
331:31 - we're being entirely honest so um
331:35 - yeah js and ts for me all the way right
331:36 - now but yeah you know i'm learning i'm
331:38 - learning rust but i'm not going to be
331:40 - super effective with it you know yeah i
331:42 - don't i don't
331:44 - have all the time in the world to learn
331:45 - other languages although they probably
331:47 - expand my horizons but there's literally
331:49 - nothing wrong with just
331:50 - spending all of your time in javascript
331:52 - all right let's last one right here is
331:54 - do you have any approach for optimizing
331:56 - high-res images that are stored in your
331:58 - back end like s3 for a gatsby website
332:01 - we're talking about this on twitter
332:02 - today um
332:04 - and uh there's a lot of services that
332:07 - will slurp up your image transform it on
332:11 - demand and return it cloudnary imagex
332:13 - sanity does it um whatnot
332:16 - those are like yeah i think making your
332:19 - own is is
332:20 - what i need to do because i always i
332:22 - love that approach on demand rather than
332:24 - doing the gatsby build especially if
332:26 - it's uh
332:27 - if it's a remote image next js image
332:30 - component does it with remote images
332:32 - which is a killer feature
332:34 - but not gatsby's
332:35 - and uh but like i'm always like hesitant
332:38 - to be like yeah just pay
332:40 - this monthly cost for this service and
332:42 - then the service will do it
332:44 - because i do that but then also like
332:46 - it sucks to have to tell someone just
332:48 - pay for it yeah right right yeah
332:50 - wouldn't it be cool to like
332:52 - run it on like a serverless function or
332:54 - something like that that'd be neat it'd
332:55 - be cool if there was like a spin up
332:56 - option where somebody had created like a
332:58 - pre-configured one where you could just
332:59 - like spin up your own platinary okay
333:02 - yeah
333:03 - you know
333:04 - i think there i think that does exist um
333:07 - it's just that like cloudinary has
333:09 - four million features
333:11 - and then you sometimes you use them like
333:13 - the they even have like cpi like if you
333:15 - wanted to sepia tone your photos like
333:18 - it's a digital camera from 2001 you
333:20 - could make it like into a photo booth at
333:22 - a western show at disneyland
333:25 - that's a great idea oh all right i think
333:28 - we should end it off there um thank you
333:30 - everybody so much for tuning in that was
333:32 - really fun we always like doing these
333:34 - live ones it's a bummer we couldn't do
333:36 - it in person um but hopefully next year
333:39 - we get get the big shot in the arm and
333:41 - we'll be able to to see you all in
333:42 - person what about uh sick picks do we
333:44 - want to do some sick kicks before we
333:46 - bounce off sick pics
333:47 - quick picks we pick things that are sick
333:49 - i i was just telling less i'm overflow
333:51 - with with sick pics over here so uh well
333:54 - west goes and uh hunts for his i'm gonna
333:56 - pull up mine here sick picks my sick pic
333:59 - the thing that i think is sick and this
334:01 - is going to be a very special one this
334:04 - is the coolest little extension i've
334:07 - ever done used and it's called color
334:10 - conversion color
334:13 - this is a vs code extension and so i
334:17 - i'll post it real quick here um
334:20 - find the actual links page so i've been
334:23 - um
334:24 - personally dealing with a lot of like
334:26 - moving colors to hsl hsla doing a lot of
334:29 - variable work there and i found this
334:32 - really neat extension for vs code that
334:34 - allows me to
334:36 - uh convert colors from it hex to hsla
334:41 - and it um is so dang fast because you
334:44 - just basically highlight your your color
334:46 - string your hex value you say go turns
334:48 - it to hsla again i'll post it in the
334:50 - chat here i'm like trying to google it
334:52 - while i'm uh talking about it but
334:55 - it's really nice to not have to leave
334:57 - your editor or whatever just toggle
334:58 - through different types of color
335:00 - conversions and this thing's been saving
335:02 - me some serious time
335:05 - i'm going to stick pick
335:07 - a
335:08 - lock picking kit um so i we have this
335:11 - like vintage gumball machine in our
335:14 - house and we bought it years ago and we
335:17 - every now and then we put some candy in
335:18 - it for the kids and they get a penny and
335:20 - they turn it and they get like a couple
335:21 - of um smarties that come out and uh it's
335:24 - getting full of money and we don't have
335:26 - the key we have the key to put the candy
335:28 - in but we don't have the key to get the
335:29 - money out and it's getting full so i
335:31 - i i told kaitlyn i was like oh i'll i'll
335:33 - learn to pick locks um so i bought
335:36 - this
335:37 - is uh it's an acrylic lock so it's
335:40 - see-through and you can see
335:42 - all of the pins in the lock so you can
335:44 - see what you're doing
335:46 - and then you can it comes with a whole
335:48 - bunch of different picks
335:50 - i'm trying to pick i did it
335:54 - i did it on camera um so it's a super
335:58 - cheap lock that's why it's so easy to
335:59 - pick the real real locks are a lot
336:01 - harder than that but um it's cool
336:03 - because you can see what it's doing um
336:06 - and how locks actually work um and that
336:09 - just is so helpful to understand like
336:11 - when you are picking a real lock what
336:13 - are you trying to do right now you're
336:15 - not just jamming this pick in there and
336:16 - it came lining up the chamber came with
336:18 - a whole bunch of
336:20 - a whole bunch of different types of
336:21 - picks and i i watched lock picking
336:23 - lawyer on youtube so uh
336:26 - yeah so much lock picking trying to lock
336:28 - pick one of our doors and the door was
336:31 - locked it was and it was like a super
336:32 - fancy slang lock or whatever schlog yeah
336:36 - not a slang slog
336:39 - i was a slang in my slang and i could
336:42 - not get the thing open obviously and
336:43 - then i had a lockpicker come over and
336:45 - need to use like a whole like big rig
336:47 - machine to get it open so i didn't feel
336:49 - too bad about myself after that
336:52 - awesome um shameless plugs westboss.com
336:55 - forward slash courses is the list of all
336:57 - of my courses you can use syntax for 10
337:00 - bucks off
337:02 - and also mostly plug levelup
337:04 - tutorials.com
337:05 - sign up to become a pro and you'll get
337:08 - access to 12 new tutorial series for the
337:10 - entire year as well as the entire back
337:12 - catalog of thousands of video tutorials
337:15 - so check it out leveluptutorials.com
337:19 - all right thanks so much to react on for
337:21 - having us thanks everybody in the chat
337:22 - that was super fun make sure you
337:24 - subscribe to our podcast syntax.fm um
337:28 - and in whatever podcast player you are
337:30 - using and leave us a review
337:33 - positive review and say nice things
337:34 - about us too that'd be cool
337:37 - peace
337:40 - [Music]
338:09 - [Music]
338:12 - uh
338:25 - [Music]
338:49 - oh
338:51 - [Music]
339:12 - [Music]
339:58 - [Music]
340:04 - [Music]
340:13 - you
340:18 - [Music]
340:31 - [Music]
340:43 - [Applause]
340:46 - [Music]
340:51 - [Applause]
340:57 - [Applause]
340:59 - [Music]
341:09 - [Music]
341:53 - is
341:54 - [Music]
342:06 - [Music]
342:26 - so
342:39 - [Music]
342:47 - [Music]
342:52 - me
342:54 - [Music]
343:00 - [Music]
343:14 - [Music]
343:20 - me
343:24 - [Music]
343:51 - so
343:58 - [Music]
344:06 - [Music]
344:23 - [Music]
344:29 - [Music]
344:41 - [Music]
344:49 - [Music]
344:50 - me
344:56 - so
345:00 - [Music]
345:16 - [Music]
345:44 - [Music]
345:56 - [Music]
346:46 - [Music]
347:13 - [Music]
347:28 - [Music]
348:27 - you