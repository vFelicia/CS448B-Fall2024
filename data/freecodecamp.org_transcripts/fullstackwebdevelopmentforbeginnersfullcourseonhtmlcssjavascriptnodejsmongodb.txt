00:00 - welcome to this full stack web
00:01 - development course for beginners first
00:04 - you'll learn how to use HTML CSS and
00:06 - JavaScript and then you'll learn how to
00:09 - use those skills to make a full stack
00:11 - web app I'm Beau Carnes and I'll be
00:13 - teaching part of this course and I'm
00:15 - Tomi Toko and I'll also be teaching part
00:17 - of this course I'll be teaching the
00:19 - JavaScript section and the backend web
00:21 - development section and I'll be teaching
00:23 - the HTML CSS and front-ended web
00:26 - development sections
00:29 - details let me tell you more about some
00:31 - of the concepts in this course first
00:33 - let's talk about HTML CSS and JavaScript
00:36 - every website on the internet uses HTML
00:39 - and CSS most also use JavaScript
00:43 - in a website HTML is the structure CSS
00:46 - is the style and JavaScript is the
00:49 - functionality here's a great interactive
00:52 - diagram from code analogies.com you can
00:55 - see we have the page the structure
00:57 - styling and functionality and if we move
01:00 - this slider
01:02 - so it's like the house so Pages like the
01:05 - house so the structure or the HTML is
01:07 - like how many bedrooms there are or how
01:09 - many rooms the CSS The Styling is like
01:12 - the color the color of the brick here
01:14 - and then the functionality what you're
01:16 - doing like eating is the JavaScript you
01:19 - can actually see the HTML that makes up
01:21 - any element on a web page by
01:24 - right-clicking an element and then going
01:26 - to inspect
01:29 - and this all this right here is the HTML
01:33 - now I'll explain the difference between
01:35 - front end and back-end development the
01:37 - front end of a website is the part that
01:39 - users can see and interact with it's the
01:43 - part that all happens on the user's
01:44 - computer or device the back end is the
01:48 - part of the website that runs on the
01:50 - server and Powers the front end the back
01:52 - end includes the database application
01:54 - logic and API some static websites only
01:58 - need a front end but if a website
02:01 - interacts with a database or involves a
02:03 - lot of dynamic content then there needs
02:05 - to be a back-end server away from the
02:07 - user's device to do some processing
02:09 - before sending data back to the user
02:12 - full stack development is just a
02:14 - combination of front end and back-end
02:16 - development by the end of this course
02:18 - you'll have a better understanding of
02:20 - front-end and back-end development now
02:22 - it's time for you to start learning how
02:24 - to use HTML and CSS Tomi will teach this
02:27 - section and before I pass it over to him
02:29 - I'm I want to thank replit for giving
02:31 - freecodecamp.org a grant to make this
02:33 - course possible we'll do all the
02:35 - development using replit which allows
02:37 - you to write acmail CSS and JavaScript
02:40 - all in your web browser
02:45 - welcome to this section of discourse in
02:47 - this section I'm going to be teaching
02:48 - you everything you need to know to get
02:50 - started building your own web pages
02:52 - using HTML I'm going to be showing you
02:55 - what HTML is why we use HTML and how you
02:58 - can build web pages using HTML now in
03:01 - this course we're going to be using
03:02 - Rapids for our coding and I'm going to
03:05 - show you how to set that up and how to
03:07 - do everything all from replica
03:11 - so the first thing we need to do is to
03:13 - go to replica.com so once you get to
03:15 - replica.com you're going to have to
03:17 - create an account and login so once you
03:19 - log into repllay.com it's going to bring
03:22 - you to this dashboard right here so once
03:24 - you're in this dashboard you're just
03:26 - going to come to this corner right here
03:27 - and click on this create button or you
03:29 - can go to the top right corner and click
03:31 - on the New Rapid button so what I'm just
03:34 - going to do is to click on Create and
03:35 - it's going to ask you to choose the
03:37 - language you want to use so for this
03:39 - section of this tutorial we're going to
03:40 - be choosing this HTML CSS and JavaScript
03:42 - but you don't need to worry about CSS
03:45 - and JavaScript for now we're just going
03:46 - to be using the HTML part
03:48 - so let's name this HTML
03:52 - tutorial
03:54 - I'm going to create a new replied so
03:56 - that is going to take a few seconds to
03:58 - create all of that for us and once that
04:00 - is created I'm going to show you what
04:02 - this is so as you can see it's created
04:05 - this for us with like a boilerplate of
04:08 - code
04:09 - that automatically comes with this
04:12 - particular replica that we created so
04:14 - what I'm just going to do is to quickly
04:16 - show you around replay what it does and
04:18 - how we're going to use this so on this
04:20 - corner you can see that it shows all the
04:21 - files has been created so because we
04:23 - chose HTML CSS and JavaScript it created
04:25 - free files for us one is stands for HTML
04:28 - one is for CSS and one is for JavaScript
04:30 - but as I said for now I'm only going to
04:33 - be looking into the HTML part so I'm
04:35 - going to close that tab just to make
04:37 - sure that we have enough screen
04:39 - and in here it shows the code base so
04:42 - this is basically where we're going to
04:44 - be doing the main coding it's like our
04:45 - code editor and at this right side it
04:48 - shows the output of whatever we are
04:49 - coding in here
04:51 - so now that we have that out the way I
04:53 - wanted to quickly talk to you about HTML
04:55 - so before we actually go into coding I'm
04:57 - going to introduce you to what HTML is
04:59 - and why we even use it so HTML stands
05:03 - for iPad text markup language
05:05 - so it's basically a standard markup
05:08 - language used for creating websites and
05:10 - web pages so HTML like describes how the
05:14 - structure of a website or a web page is
05:16 - going to look like so any website you
05:18 - will see on the web or any web page you
05:19 - see on the web there's some HTML coding
05:21 - that has been done to build that
05:24 - so HTML basically consists of different
05:26 - elements to make it what is so for
05:29 - example if I come into this code you can
05:32 - see that we have some Hello World text
05:34 - being printed and if you come into the
05:36 - code you can see that that hello world
05:37 - text is right here so this hello world
05:40 - text is under this element name body so
05:43 - don't worry about what all of this means
05:45 - for now I'm going to go through all of
05:46 - that but just know that HTML comprises
05:49 - of different elements and now I'm going
05:51 - to talk to you about what all these
05:52 - elements are the different type of
05:54 - elements that we have so first of all
05:56 - I'm going to remove some text
05:59 - because we're not going to talk about
06:00 - them for now I'm gonna remove all of
06:02 - this script because all of that are
06:03 - JavaScript and we don't need that for
06:05 - now
06:08 - and I'm also going to remove this so
06:10 - this is just a basic HTML code right
06:14 - so as I said there are different
06:16 - elements so for example this doctype
06:19 - HTML is a declaration that defines this
06:23 - document is an HTML document so this
06:25 - just tells us that whatever our coding
06:27 - is an HTML document and we have another
06:30 - element which is this HTML right and it
06:33 - shows the root of the HTML page so this
06:36 - means that anything that we are going to
06:37 - be coding in this HTML file is going to
06:40 - go into this HTML element so we open it
06:44 - here and we close it here I'm also going
06:46 - to talk about the structure of how we
06:48 - code an element using tags so I'm going
06:50 - to talk about that in a bit but for now
06:52 - as you can see we have this HTML that is
06:55 - the root of the whole project right and
06:58 - then we also have Ed that contains some
07:01 - information
07:02 - specifically about the HTML page for
07:05 - example under it we have the title now
07:08 - this title is whatever you see on the
07:10 - browser so on the browser right here
07:12 - where you see this index.html that is
07:15 - the title of that page so whatever we
07:17 - put here is what's going to be shown
07:18 - here so as you can see that basically is
07:21 - part of the structure of the whole web
07:23 - page
07:23 - and then everything that is going to be
07:26 - in this section of this of the browser
07:29 - or of the web page goes into the body
07:31 - element so that is what the body element
07:34 - is for it's basically all the code that
07:36 - you're going to do is going to be done
07:37 - inside the body element
07:39 - let me tell you how we actually write
07:42 - this HTML element so we write HTML
07:45 - element by defining tags and the content
07:49 - and the ending tags so let me tell you
07:51 - what I mean by this now I'm just going
07:53 - to close all of this real quick because
07:55 - we are going to have to start from
07:56 - scratch so you understand it so for
07:59 - example let's say we have
08:02 - an H1 tag
08:04 - so this H1 is an element in HTML and is
08:09 - used to create like an adding text for
08:12 - example in here if I put I welcome
08:15 - and once I run that
08:17 - you're going to see that it prints I
08:19 - welcome like an add-in so that is what
08:22 - this H1 element does but how did we
08:25 - write this H1 element the first thing we
08:27 - do is to say we're going to open an H1
08:31 - tag so we're going to have two
08:34 - less than sign and greater than sign and
08:37 - in there we're going to have the name of
08:39 - that particular tag then after that
08:41 - we're going to have the content that is
08:43 - meant to be shown in that element after
08:45 - that we're going to close that tag so
08:47 - this is how we close the tag now let me
08:50 - show you another tag there is another
08:51 - tag that is used to define a new
08:53 - paragraph and this tag is called p so we
08:57 - have this sign less than sign we put p
09:01 - we close that automatically replace ends
09:04 - the tag for us but I'm going to delete
09:06 - that and show you how to close it so in
09:08 - here we're just going to put something
09:09 - like this is a new paragraph
09:14 - and then we're gonna have to close it we
09:16 - close it by using the less than sign the
09:19 - slash sign we put p and we close it back
09:22 - so this is how to open your tag so it's
09:24 - something like this we're going to say
09:25 - tag once we close it
09:29 - so this is basically the opening tag and
09:32 - then in here the content
09:38 - and then to close the tag it's basically
09:41 - similar to this but instead we have a
09:43 - slash
09:44 - so what we can just do to do
09:46 - less than sign slash replied
09:49 - automatically close that for us so that
09:51 - is basically how to you know create a
09:54 - tag and
09:56 - elements in HTML
10:00 - now we're going to be talking more about
10:01 - the basics of HTML so basically the
10:05 - structure that you're meant to follow
10:06 - when you create a new HTML page
10:09 - so I'm gonna get rid of all of this and
10:12 - let's start this from the beginning
10:14 - so whenever you create a new HTML page
10:16 - you must first Define a doctype
10:19 - declaration now this shows the type of
10:23 - documents that this represents so it
10:25 - allows the browser to know how to
10:27 - display the web page correctly
10:29 - so what to do this we just need to use
10:32 - the less than sign because it is an
10:34 - element so we do it the same way and
10:36 - then we use the up this sign and then we
10:39 - say doctype
10:43 - and then we're gonna specify the type of
10:46 - you know file that we're actually coding
10:48 - in and this is HTML and we're just going
10:51 - to close that so this is the first thing
10:52 - you should do when you create a new HTML
10:54 - file right and then once you do this the
10:58 - next thing that you want to be doing is
10:59 - to
11:00 - create the HTML tag so this HTML tag as
11:05 - I said in the
11:07 - a while ago is is the root of all your
11:10 - of the oh HTML structure so everything
11:13 - that we're going to be coding should be
11:14 - inside this HTML tag we're going to
11:17 - write HTML
11:19 - and automatically replace closes that
11:21 - for us
11:22 - now inside this HTML there is something
11:25 - else that we need to have and this is
11:28 - the body so the body basically takes any
11:31 - visible code or any visible
11:33 - thing that we want to show on our web
11:35 - page now for example this I welcome
11:37 - should be under the body
11:39 - for example the the code used to create
11:42 - the HTML code used to create this replay
11:44 - all everything that we see right here
11:46 - should be stored under the body type so
11:49 - right here we should have
11:51 - a body
11:53 - and as I said replace closes that for us
11:55 - automatically
11:57 - so anything that we're going to code
11:58 - should go in the body right here
12:01 - so now I'm going to talk more about
12:03 - different types of tags what they are
12:05 - used for so we have the add-in tags and
12:08 - they are mostly defined from their name
12:11 - to show add-ins so we have them in a
12:15 - list from H1 to H6 so in the a while ago
12:20 - I showed you how to create this add-in
12:21 - using the H1 tag this editing that we
12:24 - see right here so
12:26 - we do H1 and then we close it you can
12:29 - say first adding
12:33 - now if we run that you're going to see
12:35 - that it's just going to print a show out
12:37 - the first adding as you can see it says
12:40 - first adding now if we use another tag
12:43 - named H2 this is also an adding tag but
12:46 - it is smaller compared to H1
12:49 - so if I say second adding
12:53 - and I run that you're gonna see that
12:55 - it's going to show second editing but
12:57 - quite similar to this and if I use
13:00 - another one H3
13:02 - I can say third adding
13:07 - and once I run that you're gonna see
13:10 - that it's going to be smaller
13:11 - so the size of the heading keeps
13:14 - descending
13:15 - right as the
13:18 - H1 H2 so as you are sent from H1 H to H3
13:21 - all the way to H6 the side skips
13:24 - descending so H1 is the biggest so you
13:26 - can use this whenever you see fit in
13:29 - your code now the next one I want to
13:31 - talk to you about is the paragraph tags
13:34 - I talked about this briefly a while ago
13:35 - but let me talk more about this now so
13:38 - it is a very basic and simple tag what
13:41 - it just does is it creates a new
13:42 - paragraph so for example in your code
13:44 - let's say you want there to be some
13:45 - spacing between different text or you
13:48 - just want to show like a new paragraph
13:50 - structure we use the P tag so once again
13:54 - we use the less than sign we put P we
13:57 - use the greater than sign
13:59 - and in between this opening and closing
14:02 - tags we have the content of that
14:04 - paragraph so we can say
14:06 - this is
14:08 - a test paragraph
14:12 - so if I run this you're going to see
14:14 - that
14:15 - first of all there's going to be spacing
14:17 - between it and this is a normal text
14:19 - it's not a heading it's not bold like
14:22 - this H1 tags so as you can see it just
14:25 - say this is a test paragraph right
14:28 - now the next one I want to talk to you
14:30 - about uh HTML links so for example let's
14:34 - say on this page if I click on invite
14:38 - and it takes me to another link or
14:41 - another page there's basically an HTML
14:43 - link tag that allows me to do this now
14:46 - let me show you what I mean so for
14:48 - example let's say I want the user to say
14:52 - something like click this link
14:54 - right and once the user click this link
14:57 - I want to take the user to you know
14:58 - freecodecamp.com or
15:02 - oh I want to take these out to
15:03 - google.com so what we can just do is to
15:05 - say
15:07 - I'm gonna remove this real quick
15:09 - we open a new tag but this time around
15:12 - we're using an a tag right and then I'm
15:15 - going to close it
15:16 - so once I close it I'm going to have the
15:19 - content in here so I can say click this
15:22 - link
15:23 - right but now there's something
15:25 - different with this this is when I'm
15:27 - introducing you to what we call HTML
15:29 - attributes now if you don't understand
15:31 - this now you don't need to worry because
15:32 - I'm going to have a whole section
15:34 - dedicated to talking about HTML
15:35 - attributes so HTML attribute just shows
15:38 - me what parameters a tag needs to take
15:41 - for example this a tag is used for
15:44 - redirecting a user to another link or
15:46 - sending a user to another page but it
15:48 - needs to know what page it wants to send
15:50 - the user to so for example once a user
15:53 - click clicks on this click the link
15:56 - and we need to specify the link that we
15:59 - want to take the user to so it needs to
16:01 - have an attribute and the name of this
16:03 - attribute is href and this is how we
16:06 - input attribute in HTML tags in the
16:09 - opening tag we leave a space and we type
16:11 - the name of the attribute and we say
16:14 - equals to and we use this quote
16:17 - now in this code we specify the value of
16:19 - that attribute so in this case the value
16:21 - of this attribute is the link I want to
16:24 - take the user to right so let's say I
16:26 - say google.com
16:28 - now if I run this you're gonna see that
16:32 - we have like a blue
16:34 - color with underline that is underlined
16:36 - and if I drag this right here
16:39 - so I'm just gonna go back to that
16:41 - and let's say I drag this right here
16:44 - okay so
16:46 - um it gives us an error it says
16:49 - replica.co.google.com now this is
16:50 - because I didn't Define that it's an
16:52 - external link so it's thinking that is a
16:54 - link under this particular web page so
16:57 - what you need to do is just to say https
17:00 - so basically specify it as a new link on
17:03 - his own so once I run that and it runs
17:07 - again if I take this if you look at the
17:10 - left bottom corner you can see that it's
17:13 - showing me that I'm going to go to https
17:14 - google.com if I take this and paste this
17:17 - year it opens google.com
17:20 - so this that is the basic way of
17:21 - creating a link right and don't worry
17:24 - about the attribute for now I'm going to
17:26 - talk more about that soon
17:30 - now we are going to talk more about HTML
17:33 - attribute so a while ago I showed you
17:36 - how we used a simple HTML attribute to
17:39 - show the link that we want the user to
17:43 - go to once they click on this click the
17:44 - link button or just click the link text
17:47 - but now I want to talk more about what
17:49 - this attribute actually is why we use it
17:51 - how do we use it and different tags
17:53 - where we can use this
17:55 - so as I said a while ago the attribute
17:59 - basically gives more information about
18:02 - the element or the tag so for example
18:05 - this a tag it needed an information and
18:08 - that information needed is the link we
18:10 - want to send the user to so once the
18:13 - user clicks on click the link we want to
18:14 - send the user to google.com now there
18:16 - are other tags that actually need us to
18:19 - you know specify different things that's
18:22 - when we use the HTML attributes for
18:24 - example we have the IMG which is also
18:27 - known as the image tag and this needs an
18:31 - HTML attribute that specifies where or
18:34 - the source of that image that we want to
18:36 - show so before we go into that let me
18:39 - quickly go through again how we you how
18:42 - we specify how we create HTML attributes
18:45 - so as I said in the tag in the opening
18:48 - tag we write the name of the attribute
18:50 - and what the attribute contains so
18:53 - basically like the value of that
18:55 - attribute right so first to do this now
18:58 - let's test it on another tag so let me
19:01 - show you how we can display an image on
19:05 - your HTML page so right here we want to
19:07 - display a simple image so what we can
19:09 - just do
19:10 - is to say IMG right
19:15 - and we're going to close this so this
19:18 - image tag is uh is a tiger is an element
19:22 - that doesn't need to close it so you
19:24 - know how we
19:26 - close the P tag by using this slash we
19:29 - don't need to do that right here for IMG
19:31 - and now the reason why is because the
19:33 - IMG tag or the image tag doesn't take a
19:36 - value right now what I mean by this is
19:38 - like it doesn't showcase the value the
19:40 - only thing it showcases is the image so
19:42 - it just needs the source of that image
19:44 - so we do all of this in here because we
19:48 - want that between those tags we want to
19:49 - show this text we want to show this text
19:51 - we want to show this text we want to
19:53 - show this text but in an image tag we
19:56 - don't want to show any text we just want
19:57 - to show the image so what we just need
19:59 - to specify is the source of that image
20:02 - so we can do this similar to how we
20:05 - specified the link to this URL that
20:09 - we're redirecting
20:10 - we are going to say SRC
20:13 - so right now we want to specify the
20:16 - source or the link from where this image
20:18 - is coming from right so as I said this
20:22 - is the name and India is going to be
20:24 - like the value of this source so we can
20:27 - just take a random image for example we
20:29 - can you know
20:32 - take let's see if we can take an image
20:34 - from this page
20:36 - um we can take an image so we can just
20:38 - go on you go and search random
20:42 - image
20:45 - and then in here we can take this dice
20:47 - image
20:50 - and also click on this dice image
20:53 - we can say copy image address so now
20:56 - that we have that image address once we
20:58 - paste this in here that is the source of
21:01 - where that image is coming from right if
21:04 - I run this
21:05 - you're gonna see now that it shows that
21:08 - image right now obviously this is a tag
21:12 - used to show an image and the reason why
21:15 - I said we don't close this tag is just
21:18 - because we don't need to write any text
21:21 - that is why we don't like have a closing
21:23 - tag and put a text within it so that is
21:27 - how we basically do that very easy very
21:29 - simple to do now we can
21:32 - a an HTML tag can have more than one
21:35 - attribute right now in here you can see
21:37 - that we have this SRC attribute but what
21:39 - if we want to do more to this image we
21:42 - need more attributes like what if we
21:43 - want to change the size or anything so
21:45 - for example we want to change the the
21:48 - width of this image I want to change the
21:50 - height of this image so let's say I want
21:52 - to change the height of this image right
21:54 - and let's say we want to make it smaller
21:56 - or bigger to do this we're going to have
21:58 - to specify another image attribute and
22:01 - this attribute is called height
22:03 - so once again we specify attributes by
22:06 - writing the name we put the equals to
22:08 - sign and in here we put the quotes now
22:11 - inside our code is where we put the
22:13 - value of that particular attribute so
22:15 - let's say we want to make this 200. if I
22:18 - run this let's see what changes that
22:20 - makes to this particular image you can
22:22 - see now that the image is shorter and I
22:25 - can also do the same thing to do with
22:27 - what if I want to reduce the width or
22:28 - increase the width I'm just going to do
22:30 - with
22:32 - equals then we put the column
22:34 - the code and then we also have the size
22:37 - let's say the size is also 200 and we
22:39 - run that
22:41 - so once we run that
22:43 - you can see that the width has also
22:45 - decreased so this is basically how we
22:48 - can do this
22:50 - so we can also have another attribute
22:53 - called alt now this alt attributes
22:55 - basically tells us like let's say more
22:57 - information about this image so let's
22:59 - say we just want to say the image
23:01 - contains a dice right
23:04 - say Alt
23:06 - equals we put quotes now we can see
23:09 - something like
23:10 - this image contains a dice
23:15 - now once we run this
23:17 - we're gonna see
23:22 - that this has a description of this
23:24 - image contains a dice so we don't see
23:27 - this right but for example if you go to
23:30 - the let's say you get the source of this
23:34 - image or whatever once it's coming with
23:36 - a description it comes with this alt
23:38 - description which is this image contains
23:40 - the site it dies now this is not what is
23:42 - shown to a user right but this is
23:45 - basically part of the attribute of this
23:47 - image
23:48 - so there are also various attributes of
23:51 - different things we can use right and
23:54 - for example right in here where we have
23:57 - this paragraph so let me just get rid of
23:59 - this image because we don't need it so
24:01 - right here where we have this paragraph
24:04 - let's say we want to show like
24:07 - I don't know maybe another information
24:08 - of this paragraph So something like
24:11 - um once a user clicks on this right but
24:14 - what's the user overs over this we want
24:16 - to show that this is a new paragraph or
24:17 - something like that we use a title
24:19 - attribute now this is not really widely
24:21 - used but just an example of what
24:23 - attributes are let me say I say titu
24:26 - equals this so and I'm just going to say
24:28 - test
24:31 - once I run this
24:33 - I'm gonna wait for that to show so if I
24:35 - come to this paragraph right here you
24:37 - can see that when I hover over this you
24:41 - can see that there's a small button that
24:44 - comes up that says test so that's just
24:46 - another
24:47 - useful attribute now as I said there are
24:50 - various attributes and it's very easy to
24:53 - make mistake while defining attributes
24:55 - so you must make sure let me go through
24:57 - it again you must make sure that you
25:00 - have the name of the attribute you put
25:01 - the equal sign you put the double quotes
25:04 - and in there you put the value of that
25:06 - attribute if you do that you can't go
25:08 - wrong
25:11 - now let's talk more about HTML
25:14 - paragraphs so in here I briefly talked
25:16 - about what paragraphs are and how we can
25:18 - use them so first of all I'm going to
25:20 - get rid of this title attribute that I
25:22 - added to the paragraph
25:23 - so as I said we talked about this
25:25 - paragraph right here but now I want to
25:27 - go deeper into what these are on you
25:30 - know how they actually show in your web
25:32 - page now for example let's say we have a
25:35 - paragraph right here and we write this
25:37 - like this is a paragraph and first of
25:40 - all let me just have this like this and
25:43 - put this here so just to make it a
25:45 - little bit more structured for me as
25:47 - decoder to see
25:48 - so guys I said this is a test paragraph
25:51 - and I say something like this is a new
25:53 - line
25:55 - now you expect that it should print it
25:57 - or you should show it here the way I
26:00 - typed it in here but no it's not going
26:02 - to do that so if I'm going to run this
26:03 - now and you're going to see that it just
26:06 - shows everything on the same line
26:08 - but most of the time or sometimes I
26:10 - might not want to do this now even if
26:13 - let's say I put let me see let's run
26:16 - this
26:18 - and then once you print it you can see
26:21 - that all the spaces are lived in from a
26:23 - to new didn't show so none of these
26:26 - shows and there are different solutions
26:29 - to this because most of the times we
26:31 - might want to create a new line we might
26:33 - want to you know do various stuffs so
26:35 - first of all let me show you the first
26:37 - solution that we can add to this
26:40 - so let's say we want to have a break
26:43 - right so for example
26:46 - in here we want a new line to be created
26:48 - so we wanted this text to come to a new
26:51 - line we can use uh another
26:54 - HTML element called break so it's short
26:58 - form for br well it's called break and
27:01 - what this means is just after that
27:02 - wherever we put it it's going to break
27:04 - to a new line so this is another HTML
27:07 - element that doesn't require uh
27:10 - closing tag and once again this is
27:13 - because we are not showing any content
27:14 - for it it's just there to perform its
27:16 - own function so once we specify this BR
27:19 - like this it's going to create a new
27:22 - line for us so I don't even need to you
27:24 - know make this in a new line once I just
27:26 - do break wherever
27:29 - I put the break from a new line is going
27:31 - to be created so now once I run this
27:33 - you're going to see that it says this is
27:36 - a test paragraph and a new line is being
27:38 - created there now that is one solution
27:41 - to the problem but another solution or
27:43 - the solution I go with when I have this
27:46 - particular problem don't get me wrong
27:47 - break is very useful you're going to use
27:49 - it a lot when you're coding HTML but for
27:51 - this type of problem I use the pre tag
27:54 - so it's basically similar to the
27:56 - paragraph tag but the difference is that
27:58 - the way we write our code our text in
28:01 - here is the way it's going to be shown
28:03 - on the web page so for example first of
28:06 - all let me change this to pre
28:08 - I'm going to change this to pre so I
28:11 - call it the pre tag you can call it the
28:12 - pre-tag or whatever you want to call it
28:14 - so let me just have this on a new line
28:17 - and let me create a new line and say
28:18 - another line
28:20 - yet another line
28:22 - and another line
28:27 - once I run this you're going to see that
28:30 - the way I wrote this year is how it
28:33 - shows here you can see that even with
28:35 - the spaces that are put in here is what
28:37 - is showing there if I get rid of these
28:39 - spaces
28:42 - let me get rid of all the spaces real
28:44 - quick
28:45 - can you see that the way we put it in
28:47 - there is how it's going to show for us
28:48 - and that is a solution to that
28:50 - particular problem now let's see it
28:53 - run again so I'm gonna run this
28:56 - real quick
28:58 - I'm gonna wait for that to run as you
29:00 - can see everything has been fixed so
29:03 - that is a way to solve that problem in a
29:05 - paragraph tag now let me show you some
29:08 - other you know elements that are going
29:10 - to be very useful when writing bad text
29:13 - like this for example let's say we want
29:15 - to have a line across this to let's say
29:17 - differentiate two different parts of a
29:19 - page just the way we add the BR tag
29:22 - we're going to have a tag named HR so
29:25 - this tag is an empty tag once I just do
29:27 - HR
29:29 - right it doesn't have a closing tag it's
29:32 - just an opening tag
29:33 - from wherever I did that HR there's
29:35 - going to be a line
29:37 - an horizontal line that is going to be
29:39 - rude right here and let's run that and
29:42 - let's see what that gives us
29:44 - as you can see we have a line it leaves
29:46 - a space it continues I can have it
29:49 - everywhere and just say
29:51 - HR
29:52 - I can do the same here
29:55 - and say HR
29:57 - and I can do the same here and say
30:00 - HR
30:02 - so once I run this you're going to see
30:04 - that lines are going to be created
30:05 - everywhere exact same way the way we
30:07 - want it as you can see it's structured
30:09 - very well the way we want it now that's
30:11 - how to use an HR tag in your HTML code
30:16 - or whatever you want to use it let's say
30:18 - paragraph or another code
30:22 - now we are going to be talking about
30:24 - formatting text or formatting elements
30:26 - in HTML so we might want to show
30:29 - different texts in different ways for
30:32 - example we might want a text to be bold
30:33 - we might want to text you know to be
30:36 - superscripted or subscripted or we might
30:38 - want a text to look like an italic text
30:40 - so for all of these we need to format
30:43 - them to look the way we want them to
30:45 - look so to format it we need to use HTML
30:49 - elements right so for example let's say
30:52 - we have a simple a simple text in here
30:55 - that says this is a text
30:58 - so once we have a text that says this is
31:01 - a text right here if I run this now make
31:03 - sure that everything is under the body
31:05 - element as I said from the beginning so
31:08 - it says this is a text
31:10 - but what if I want this to be bold now
31:12 - for me to do this I'm going to use an
31:15 - element named B and that b stands for
31:17 - both so it basically makes whatever
31:20 - content is within it bold so I'm going
31:24 - to cut this
31:26 - I'm gonna do B
31:28 - I'm gonna paste that in so now once I
31:31 - run this you're gonna see that that text
31:33 - is bold
31:34 - so this is how you make a text build you
31:37 - open a tag normally the way we do you
31:40 - put B you close that you put the text in
31:42 - there and then you close the whole tag
31:45 - so once you have that done and you run
31:47 - it this should show this is a text
31:51 - now similarly you can also use another
31:54 - tag name strong so if I come here and I
31:57 - say strong
31:59 - right and I close it and I say this
32:03 - so strong
32:05 - and once I run this you're going to see
32:07 - that it looks exactly the same thing as
32:09 - this is another way for you to do that
32:12 - so let's actually have a br tag here and
32:15 - we've talked about what BR does it
32:17 - breaks the line just so we're going to
32:19 - have each text we're having on another
32:21 - line so let me run that and you're gonna
32:24 - see that we have that on another line
32:26 - so that is how you can you know use the
32:29 - strong but what if let's say you want
32:31 - your text to show as an emphasize text
32:35 - so for example we're going to use a tag
32:38 - name em let me say em let me just say
32:43 - emphasize
32:47 - once I run this right you're gonna see
32:50 - that that text looks emphasize it looks
32:53 - different from the normal text so this
32:55 - is kind of like an italic text so if you
32:58 - want your text to look italic you can
33:01 - use this emphasize or or you can use the
33:05 - I tag and this I tag stands for italic
33:08 - it makes that text italic so once I say
33:10 - italic and I run this italic text
33:14 - you're gonna see that it looks italic
33:16 - right if you look closely you can see
33:18 - the little difference between it but
33:20 - they look very similar so instead of us
33:23 - having let's say a break
33:25 - you know a break
33:28 - elements after every single text what we
33:31 - can just do is to cut all of this and
33:34 - then we can have a pre-tag
33:36 - and this pre-tag we can then paste all
33:39 - of that text in it and then when we
33:41 - paste all of that text in it the way we
33:43 - put it here is how it's going to be
33:44 - shown here so once I run that you can
33:47 - see it says this is this text and all of
33:49 - that so it leaves the space for us let
33:51 - me remove this
33:53 - and then in here we do this just to make
33:55 - it look better
33:57 - so once we run that that should show the
33:59 - text how we want it right so once we've
34:02 - done with the italic we can also Mark a
34:05 - text so let's say we want to do
34:07 - something like
34:09 - mark this
34:11 - and then we want to have
34:14 - Mac
34:17 - and say marked
34:19 - I'm gonna show you what this does
34:22 - so as you can see it I liked that
34:24 - particular text for us right so it makes
34:27 - that test highlighted how we want it so
34:30 - we can say let's say we want to say this
34:32 - is an example or this is an important
34:34 - information and then we just want to
34:36 - mark that important information
34:39 - important
34:41 - information
34:43 - Ronda is going to show us that important
34:46 - information highlighted so that is what
34:48 - the mark element does
34:51 - now let's say we want a text to you know
34:54 - be canceled out for example you know
34:55 - where you see maybe on different web
34:57 - pages and you see something like this is
34:59 - something you shouldn't do and then you
35:01 - see strike like a line is stroking
35:04 - through it that is a delete element so
35:07 - let me show you what I mean so let's say
35:09 - we have a text that says don't do this
35:13 - I would say
35:14 - delete
35:16 - and in there we say
35:19 - do it right now once I run this you're
35:23 - gonna see that that do it as a strike
35:25 - through it that is how that is done if
35:28 - you see this anywhere on the web it's
35:29 - done using or you can do it using this
35:32 - delete element
35:34 - now we can also have an inserted text so
35:37 - let me say ins right and say inserted
35:42 - if I run this you're gonna see that it
35:45 - has this text like underlined or
35:47 - basically highlighted but not in this
35:49 - way but it's underlined
35:52 - now let's say I want a text to be very
35:54 - small compared to what all of these are
35:56 - so I can say small we're going to use a
36:00 - small element and say this
36:03 - is quite small
36:07 - I run this you're going to see that the
36:09 - size of this is smaller compared to all
36:11 - of these texts
36:12 - now the last two ones I'm going to talk
36:14 - about are subscripted and superscripted
36:16 - now you know in let's say chemical
36:19 - formulas where we have something like
36:20 - oxygen which is like O2 and we want o to
36:24 - show right here and then we want two to
36:27 - show but we want it to show like at the
36:30 - bottom or let's say we have something
36:31 - like 7 raised to power 3 right instead
36:34 - of doing using this sign right here we
36:37 - actually want it to show raised to power
36:38 - 3 on there so it's very easy for us to
36:41 - do this so for us to do the chemical
36:43 - formula type we can say o
36:46 - and then where we have these two we're
36:49 - going to say sub so this subscripted
36:52 - means that it should be on the bottom
36:54 - I'm going to show you what that is go to
36:57 - we're going to run this real quick and
36:59 - you can see that it shows two
37:00 - subscripted compared to O now let's say
37:04 - I want to have 7 raised to power three
37:08 - this time around I won't use sub I will
37:10 - use superscripted I'm going to change B
37:13 - to p
37:15 - now once I run this you're gonna see
37:17 - that it has seven raised to the power of
37:19 - three
37:22 - we're going to quickly talk about colors
37:24 - in HTML so I want to go more into like a
37:28 - little bit of styling of this text or of
37:30 - a particular element so for example what
37:33 - I mean is let's say I want this text to
37:36 - like have a background color or I don't
37:38 - want this text to be black I want it to
37:40 - be let's say white or you know blue or
37:42 - whatever now I can use the background
37:46 - color attribute now let me first show
37:49 - you what I'm gonna do let's get rid of
37:52 - all of this under the body tag
37:54 - and back in the body tag what I'm going
37:57 - to do let's say I just have a basic H1
37:59 - right and I say this
38:02 - is my adding so if I run that from now
38:06 - you should know that it's just going to
38:07 - print a basic this is my heading right
38:10 - so I'm going to have an attribute so you
38:12 - know what an attribute is it gives more
38:14 - information about that element so we can
38:16 - have an attribute name Style
38:18 - now this style attribute basically gives
38:21 - us
38:22 - a way of Designing this particular you
38:25 - know elements so let's say I want this
38:28 - particular element or this text to have
38:30 - a color of let's say red so I'm going to
38:33 - say Style
38:35 - equals to and double quotes
38:38 - right in there I can have different
38:42 - things I want you to do but we're not
38:44 - going to go in depth into that for now
38:45 - because that is more of like a CSS type
38:47 - of code which you don't need to know for
38:49 - now but what I'm going to show you is
38:51 - how we can you know make it have a
38:54 - different color so let's say I want the
38:56 - color right
38:58 - to be blue this is how I do it I just
39:00 - say color
39:01 - column blue
39:04 - now once I run this you're going to see
39:06 - that it changes that color to Blue and
39:09 - this is the simple way of doing this
39:11 - it's very easy very simple you know
39:13 - there are various different like I will
39:16 - call it like a styling command that we
39:18 - can give it so this is a styling command
39:20 - in my words so it's like we're saying
39:22 - that the color of this particular text
39:24 - should be blue
39:25 - now let's say we want to have another
39:27 - like another style to it like let's say
39:30 - we want it to have a different
39:31 - background color on its own now what
39:34 - we're going to do is to
39:36 - stop this or no we won't say stop this
39:38 - we'll end this by putting a semicolon so
39:42 - this means that after this we can have
39:43 - another styling done in there so what we
39:46 - want to do now is to just say
39:49 - background
39:53 - and then we're gonna do I think color
39:55 - and now we can change the background
39:57 - color to whatever we want let's say I
39:59 - want the background color to be red
40:01 - right so as you can see we say
40:03 - background color we use the colon and
40:05 - then we use the value right so the value
40:07 - is red and we put this semicolon too so
40:09 - that that is where it ends now once I
40:12 - run this you're gonna see that only that
40:15 - text has a background color of red now
40:18 - that is the basic way of you know taking
40:20 - care of colors like that and there are
40:23 - various stuffs where you can use like
40:25 - CSS code to style this like we can make
40:28 - this be in the middle we can you know do
40:30 - more stuffs but we're not going to talk
40:32 - about that for now so that this is just
40:36 - basically how you you know use colors in
40:38 - HTML
40:41 - now that we've talked about colors the
40:43 - next thing I want to talk to you about
40:45 - is comments in HTML now this comment is
40:49 - not just only a concept in HTML alone
40:51 - it's a concept used generally in
40:53 - programming so what comments does is
40:56 - that it basically makes a particular
40:58 - block of code not display in you know
41:02 - when your code is run or something now
41:04 - let me explain what I mean better now
41:06 - what I mean is for example let's say we
41:08 - have a text
41:10 - that is p and we say
41:12 - a text
41:15 - so we we don't want this to show because
41:17 - obviously when we run this this is going
41:19 - to show in here but we don't want this
41:21 - to show here right but we don't want to
41:23 - delete it also we don't want to remove
41:24 - it from there what you can do is to
41:27 - comment that block of code or that line
41:29 - of code now for you to comment what you
41:32 - need to do is to use
41:35 - this particular syntax now just follow
41:37 - as I do so what you're just going to do
41:39 - is to say less than
41:41 - gonna use the sign and then two
41:45 - of this and then after the code that you
41:48 - want to comment you're going to close it
41:50 - by doing the same thing except with the
41:53 - the exclamation marks so as you can see
41:56 - what that is it's basically graze this
41:58 - part out if I run this you're going to
42:01 - see that that part doesn't show now this
42:04 - is a very good use of when we want to
42:06 - use comment because we don't want this
42:08 - particular part of the code to be run
42:11 - when all our code is run right that is a
42:15 - very good use of comment that is most of
42:17 - the time why I use comments the other
42:19 - reason you might want to use comments is
42:21 - to actually drop a comment on the code
42:24 - that you are creating for example let's
42:26 - say we want to comment and say the code
42:28 - below displays uh adding that as a blue
42:32 - color right we don't just want to write
42:34 - that in and say the code
42:37 - below this place
42:40 - and edit
42:42 - right we don't just want to write that
42:44 - there because if you write this there
42:46 - it's obviously going to show right here
42:48 - in our code so let's say we just want to
42:50 - put it in a comment so that whoever is
42:52 - reading our code we understand what we
42:54 - are doing so what we're going to do is
42:55 - to put this in a comment now just the
42:57 - same way we did here we're gonna have
43:00 - the same syntax
43:02 - and close it
43:03 - so now whoever is reading our code knows
43:06 - that this code here
43:08 - just displays an adding if I run this
43:11 - it's not going to show with it no more
43:13 - that is because it's only in the source
43:15 - code right but it's not in the output so
43:17 - it basically hides that content now you
43:20 - can use it as I said to hide a code or
43:23 - to stop a code from being executed when
43:25 - you run it or you can use it to actually
43:27 - drop a comment on a code
43:31 - now we are going to look more into links
43:34 - in HTML now earlier in this course we
43:37 - talked briefly about links and now you
43:39 - can make a user click on a text on a
43:42 - button and it takes the user to a
43:44 - specific link but now I'm going to go
43:46 - deeper into what they actually do and
43:48 - more use cases of links so I'm going to
43:51 - get rid of this real quick
43:54 - remove that and then we can remove that
43:56 - and we are back to just the body
43:58 - so now obviously I showed you how to
44:01 - create a link and you want to create a
44:03 - link we say a
44:05 - and in between that we say let's say
44:09 - go to site
44:11 - let's say go to site
44:14 - and then we have an attribute named f
44:16 - href
44:18 - and let's say we want you to go to you
44:21 - know https
44:24 - google.com
44:27 - now once I run this
44:29 - and if I just over over this on the
44:33 - bottom left corner left bottom corner
44:36 - you can see that the link shows that is
44:38 - redirecting us to google.com
44:40 - so this is a basic way of just creating
44:41 - a link in HTML
44:44 - so I'm going to talk more about like
44:47 - different things you can do with it for
44:49 - example if I click on this go to site
44:51 - it's probably going to take me to the
44:54 - google.com but then it's going to go
44:56 - away from this page and take me to that
44:58 - page but what if I don't want to do this
45:00 - so you know for example on different
45:01 - blogs or different website where you
45:04 - click on the link and it automatically
45:06 - opens a new tab with that link so it
45:08 - doesn't close the tab that you are
45:10 - currently on you can do that using an
45:12 - attribute named Target so if I say
45:15 - Target
45:16 - right and I make the value underscore
45:20 - blank
45:21 - now this is going to create a new
45:25 - it's going to create a new
45:27 - tab for us so let's say I run this
45:31 - and then I say go to site you can see
45:33 - that it opens it on a new tab it doesn't
45:35 - like go to that site from here that is
45:39 - what that Target blank does it is very
45:41 - useful because sometimes you might let's
45:43 - say you're building an application that
45:44 - you want a user to let's say view
45:46 - something but you don't want them to go
45:48 - away from the site that they are in from
45:50 - your site because maybe there's some
45:52 - things that still need to be changed
45:53 - this is a good use case of this target
45:56 - attribute
45:58 - now there are two things because our
46:01 - absolute URL and relative URL now if you
46:04 - remember in the beginning when I was
46:07 - trying to create a new link and I put
46:09 - google.com right when I run it and I
46:13 - clicked on go to site so let me just
46:16 - go to site it's going to open a new tab
46:18 - you can see what he's doing he's saying
46:20 - replica
46:21 - google.com now this is because it sees
46:25 - this URL this link as a relative URL now
46:29 - a relative URL means that we are trying
46:32 - to link to somewhere else within this
46:34 - particular web page so it's basically
46:37 - saying something like let's say I just
46:39 - say slash
46:40 - um slash go so it's basically going to
46:43 - go to reply.com all of this slash go
46:47 - that is a relative URL is is just going
46:49 - to this particular URL this link within
46:52 - the local you know the local application
46:55 - or the local website well let's say we
46:59 - want to go to an external website like
47:00 - the way I went to google.com now that is
47:02 - an absolute URL that is when we have to
47:05 - do the https right
47:07 - and then we have to specify the site
47:09 - that we are going to
47:11 - so now that is an absolute URL that is
47:13 - the difference between both of them
47:16 - so we can also link to different things
47:18 - like let's say we want to link to an
47:19 - email address so let's say we want to
47:21 - say something like
47:24 - let's have an a tag
47:27 - I want to say
47:30 - send me an email
47:32 - and one that once the user clicks on
47:34 - this it's gonna like open a new tab that
47:36 - is sending an email to a particular you
47:39 - know a particular email address first to
47:41 - do this we're just going to say href
47:42 - equals now we are going to specify the
47:45 - link what we need to specify is the mail
47:47 - to
47:48 - colon and then we're going to put the
47:50 - address so we can put sample
47:54 - at sample.com
47:57 - so for example where I run this right
48:00 - this is gonna show me send me an email
48:02 - and if I open it it's gonna
48:05 - it says mail.google.com refuse to
48:07 - connect but it basically open a Gmail
48:09 - and tries to you know send an email so
48:13 - this is just not showing because we're
48:14 - under like this report but let's say you
48:17 - have your own website and you use this
48:19 - it's basically gonna open a page where
48:21 - you can compose an email to that email
48:23 - site
48:26 - now we are going to talk about titles
48:28 - and favicons in HTML so a title is very
48:33 - simple and very straightforward so what
48:35 - is it what it is is basically the text
48:38 - that is shown at the tab or the top of
48:41 - the tab on a web page for example on
48:43 - this webpage you can see that what is
48:45 - shown is this index.html HTML tutorial
48:47 - replica that is the title of this page
48:49 - so for you to specify the title of a
48:52 - page right you need to have an add
48:55 - element
48:57 - to write
48:58 - after the HTML tag we're going to have
49:01 - this Edge okay right here
49:05 - am I going to close it now this Edge tag
49:08 - basically contains different you know
49:10 - information about the page some of it is
49:13 - information about the top corner like
49:15 - the icon that shows here which is the
49:17 - favicon the title and some other
49:19 - information but in this part we're going
49:21 - to be looking more into this title and
49:24 - this icon that shows here which is also
49:26 - known as the favicon so first let's look
49:29 - at the title so as I said the title is
49:32 - the information that has been displayed
49:33 - in here so for us to set the title of
49:36 - our web page what we're going to do is
49:38 - to open up
49:39 - new tag and say title
49:42 - and this title tag must be in the add
49:46 - element so this is also another nested
49:49 - element just like the way I talked about
49:51 - previously so now this type 2 elements
49:54 - must be under this Edge element so what
49:57 - I can just do is
49:59 - my page
50:04 - so I can see my page is the title of
50:06 - this particular you know web page now if
50:10 - I run this right well I'm not actually
50:12 - going to see anything here because this
50:14 - is just like a you know a demo of this
50:16 - but let's say we have our website we
50:19 - have our HTML file and we run it on our
50:22 - browser here you're gonna see that
50:24 - detects here
50:26 - is gonna be that now I'm also going to
50:28 - show you how to you know create your
50:30 - HTML files on your local computer and
50:32 - actually run it on a browser so you can
50:34 - see like this type of examples but for
50:36 - now know that this title is what is
50:38 - being shown here
50:40 - now the next thing we're going to talk
50:41 - about as I say is the favicon now this
50:44 - favicon is known as the logo or the
50:47 - image that is shown before the title on
50:50 - your page so
50:52 - right here you can see I have this tab
50:53 - and you can see this Google logo that is
50:56 - the favicon
50:57 - so to have the five econ we're going to
50:59 - have the link tag right and then the way
51:04 - we close the link down is just to do
51:05 - like that we don't close it because it's
51:08 - similar to an image tag we are not
51:10 - actually writing a text so in here I'm
51:13 - going to save rail that is an attribute
51:15 - I'm going to give it and I'm going to
51:17 - say it's an icon right
51:19 - and I'm just gonna say href which is the
51:23 - link of where I want to get that favicon
51:25 - from initiate equals this now let's
51:28 - actually get that link right here I just
51:30 - searched free code cam favicon PMG I got
51:33 - this and I'm just gonna copy the image
51:36 - address I'm going to come in here and
51:39 - paste it now if I run it once again this
51:42 - is not going to actually show here
51:43 - because this is a demo of this but when
51:46 - I show you how to you know run your HTML
51:48 - file on your browser you're going to see
51:51 - all of these details but that is how to
51:53 - use a favicon and the title in HTML
51:58 - now let's talk about tables in HTML so a
52:02 - table where you can just basically
52:03 - represent data I'm going to show you how
52:06 - to create that right now
52:07 - so as you might have guessed we're also
52:09 - going to use another element and the
52:12 - element we're going to use this time
52:13 - around is going to be called table
52:15 - so let me get rid of this right here and
52:19 - I'm gonna get rid of this link right
52:21 - here
52:22 - so in the body what I just want to do is
52:24 - to create a new table so just a normal
52:27 - table right just a normal table where we
52:29 - have the adding and then we have the
52:31 - data that this table contains so first
52:34 - to do this we're going to say table
52:38 - and then we're just going to close it
52:40 - just like that
52:41 - and for us to now create like a new row
52:45 - in that table we're going to use another
52:47 - tag named TR so this stands for table
52:50 - row
52:51 - so in this table row I can say something
52:54 - like let's say I want to have
52:57 - let me visualize this so let's say table
53:01 - data
53:02 - let's look for images
53:07 - let's make that table
53:09 - good so now for example we have this
53:12 - right so this is going to be a row so
53:15 - what we just created right here this TR
53:17 - is a new row right here I'm let's say I
53:21 - want to create another row to store all
53:22 - of this data under here I'm going to
53:25 - create another TR right and I'm going to
53:27 - close that so this means we have two
53:29 - rows now so we can keep doing that for
53:31 - the amount of rows that we want so what
53:34 - we can now do is that under the first
53:35 - row we want to have the heading so we
53:37 - want to say name rank gender and yeah
53:39 - all of this adding so for us to do this
53:42 - we're going to use
53:43 - a tag name th which is also known as
53:46 - table heading so that table heading
53:50 - we're just going to do this real quick
53:52 - so this th is going to be the adding so
53:56 - let's say something like name
53:57 - so this is going to stand for name we
53:59 - might want to have another table heading
54:01 - named age
54:04 - and then let's say we want to say
54:07 - something
54:08 - like Plus
54:10 - right and then if I run this you're
54:13 - gonna see what we have so you see that
54:15 - we just have name age and class and
54:18 - let's say under this now I want to have
54:20 - a name like let's say Tommy and my age
54:24 - and I might put a class so what I'm just
54:26 - going to do is I'm going to create a new
54:28 - row as you can see I already did that
54:30 - here but now instead of doing th what
54:33 - I'm going to do is TD so this means
54:35 - we're adding a table data not a table
54:39 - adding right so you only use th when you
54:42 - have when you specify the edge of that
54:44 - class so of that table data but for the
54:49 - values we use TD
54:51 - so let's say something like Tommy
54:54 - and for the age is another TD
54:57 - and let's just say I don't know 18 19
55:01 - let's just put a random H there and
55:03 - another TD
55:06 - let's get rid of that let's just small
55:09 - letters and it says class and we can say
55:11 - here
55:12 - I know you're 20.
55:14 - 12 and then once we run that
55:17 - you're gonna see that we have this basic
55:19 - table that says name tell me 19 year 12.
55:22 - now we can keep adding more rows what we
55:24 - just need to do is to do TR
55:28 - and on that TR I'm going to have TD
55:30 - and I'm gonna I can use another one and
55:33 - just say John
55:35 - I'm gonna have another TD
55:38 - and let's say the age is 30
55:42 - and let's say
55:45 - um is in year 15 or something like that
55:48 - now once I run this
55:50 - you're gonna see that we basically have
55:52 - a simple table that shows that so as you
55:55 - can see it just shows the you know
55:59 - adding it shows the
56:03 - data which is told me 19 yeah 12 it
56:06 - shows John 30 and all of that so that's
56:09 - basically what we need
56:11 - to build a table very simple and very
56:13 - easy we make sure we have the table
56:15 - class we make sure we have the TR and
56:17 - then we make sure we have data in
56:21 - between
56:24 - now let's talk about lists in HTML so
56:27 - let's say we want to have a simple list
56:29 - right here that just lists let's say a
56:31 - list of names a list of years or
56:33 - whatever first of all let's get rid of
56:35 - this table that we created I'm not
56:37 - talking about that now
56:39 - so
56:40 - what we're talking about is lists so
56:43 - there are two types of lists there on
56:44 - other lists and their order lists now
56:47 - another list are the ones that just have
56:48 - like a simple bullet point mark between
56:51 - them I mean before them but on other
56:53 - list is listed from one two three
56:57 - for basically numerically now let me
56:59 - show you what I mean now for example
57:01 - let's say we want to write an unordered
57:03 - list we need to use a tag name UL
57:06 - once you use the UL tag we need to open
57:09 - and close that type I'm going to press
57:12 - enter and for us to now add list this UL
57:15 - stands for on other lists so first to
57:18 - now add elements in this list we're
57:20 - going to have to use the Li
57:22 - stands for list and we're going to say
57:24 - something like
57:26 - name one
57:28 - and we can do the same thing to have a
57:30 - second name Li
57:32 - again I say name two
57:34 - let's have a third name I say l i
57:38 - I'm going to say name three
57:40 - so as you can see we have three
57:42 - different names if I run it you're not
57:44 - going to see that we have name one name
57:46 - to name three now this is shown listed
57:48 - but it's not ordered it doesn't have one
57:51 - two three four five and so on we want it
57:54 - to be ordered like to show in ascending
57:56 - order then what we just need to do is to
57:59 - Simply change this UL to ol and this ol
58:03 - means ordered lists so if I change that
58:06 - right here and I run this you're not
58:09 - going to see that they have numeric
58:11 - numbers before them so if I keep adding
58:13 - and let me saying another list and I say
58:16 - name four
58:19 - it's automatically going to add 4 as a
58:22 - number before that
58:24 - now there are also more to list like for
58:26 - example we can show a description of
58:28 - this name
58:29 - now first to do this we need to change
58:31 - these other list to description list so
58:34 - this description is basically allows us
58:36 - to show more description on each list if
58:38 - we want to so what we're going to do now
58:41 - is we change that to description list
58:42 - and let's say on the first list we want
58:45 - this to be DT not Li that's the
58:49 - difference
58:51 - we're going to remove all of this real
58:52 - quick and under that let's say we want
58:55 - to have a description of this name one
58:56 - we're going to use DD so this just shows
58:59 - the description and let's say something
59:01 - like
59:03 - um
59:04 - let's have like an asterisk and say this
59:07 - is the first name
59:09 - now once I run this you're going to see
59:11 - what it shows us so you see that it says
59:13 - name one and under here it leaves like a
59:16 - space and it says the description of
59:18 - that name we can add another one and
59:21 - just say DT
59:22 - and just say name two
59:25 - and now to show the description of this
59:27 - we just say DD and we can have the
59:29 - asteric again and say this is the second
59:32 - name
59:34 - now if I run this you're now going to
59:37 - see that we have name one we have the
59:39 - description we have name two and we have
59:41 - the description
59:44 - now let's look into block element and
59:46 - inline elements so the difference
59:48 - between block and inline elements is
59:51 - basically this so a block element always
59:55 - starts on a new line and the browser
59:58 - automatically adds some space before and
60:01 - after the element but for an inline
60:03 - element the inline element doesn't start
60:06 - on a new line and
60:08 - it doesn't it just takes the space that
60:10 - it needs so it doesn't you know have a
60:12 - space before it and after it so there
60:15 - are examples of block elements and a div
60:18 - is one good example of block element now
60:21 - let's quickly talk more about this div
60:23 - tag
60:24 - so div tag is written like this
60:28 - the IV and it's closed see most of the
60:31 - time is a wrapper or is a tag where all
60:34 - other HTML elements are contained with
60:37 - so let's say we want to group like our
60:39 - old application or our old web page into
60:42 - different sections we can use a div tag
60:44 - to do that
60:45 - so for example we have this deep tag and
60:47 - I can just say something like H1
60:50 - where's the div and after this I can
60:54 - just say I can just have a b tag in here
60:57 - I can say this is bold
61:00 - right and I can then have another div
61:02 - tag just to separate that
61:05 - now it's just this is wrapping all of
61:07 - these elements in it and this one we can
61:09 - have an H2 and say
61:11 - another one and for B
61:15 - we can say I
61:18 - so if I run this it's basically just a
61:20 - normal text that prints this but it
61:22 - wraps it into this div tags now we can
61:26 - use different things to you know know
61:28 - these div tags like for example I mean
61:30 - to recognize the divs like we can have
61:33 - an ID as an attribute that says that
61:36 - this old div tag has an ID of you know
61:38 - first div or we can represent it using a
61:42 - you know a class but we're not going to
61:44 - go into that for now we can also do more
61:46 - things like you know in the beginning
61:48 - when we made the background color of
61:51 - this first div of this H1 like red we
61:55 - can do that to this div and now
61:57 - everything inside the div tag will be
61:59 - affected once anything here is changed
62:01 - now let me tell you what I mean so we're
62:03 - going to use a style attribute we've
62:05 - talked about this before and let's say
62:07 - we use color
62:08 - and say that we want the color to be
62:10 - green
62:11 - now once I run this
62:13 - all the elements in here are going to
62:15 - have the green color
62:16 - right I can also change the background
62:21 - the background color
62:24 - let me say blue
62:26 - now once I run this
62:29 - all the elements in here we have a
62:30 - background of blue and not the other one
62:32 - you can see now that we're able to
62:34 - actually like separate different
62:35 - sections of our code and give them
62:38 - different attributes
62:39 - so I can do something similar and say
62:42 - that style
62:43 - and I want the color
62:46 - to be red
62:50 - and I can see I want the background
62:52 - color
62:56 - and I want this to do something like
62:58 - purple
63:00 - now let me run this and see what it
63:02 - gives me
63:03 - you can see now these are two different
63:05 - sections this has a different color and
63:07 - the different background color this also
63:09 - has a color of red and a totally
63:11 - different background color now that is
63:13 - what a div class is and you can see that
63:15 - there's a space between and after that
63:17 - particular d-class space between after
63:20 - that particular div tag
63:22 - so now there is an example of an inline
63:25 - element as I said it doesn't take us as
63:29 - much space as a digital and it doesn't
63:31 - start on a new line so an inline element
63:33 - an example of that is something like an
63:36 - a tag for example or a B tag this B tag
63:40 - now is an inline element this means that
63:43 - I can basically let's say just have a
63:45 - normal P right and say this is a text
63:51 - and in there I can just have a b tag
63:54 - and say bold one
63:58 - so it can stay within a text it can stay
64:02 - wherever you put it it doesn't really
64:03 - need to be separated on its own compared
64:06 - to a div tag so that's the difference
64:08 - between a block element and an inline
64:13 - element so there are various examples of
64:16 - block elements like a few that I can see
64:19 - on top of my head are like you know HR
64:22 - like div as I said you know like pre
64:25 - [Music]
64:26 - UL you know section and there are other
64:29 - elements like that and for
64:31 - inline element we have the a tag which
64:34 - we just which we used earlier we have
64:36 - the both tag we have image tag and
64:39 - various more so this is basically the
64:42 - difference between those two
64:46 - now let's look into iframe in HTML
64:49 - so an iframe is used to show a web page
64:52 - inside a web page so what I mean by this
64:56 - is using an iframe we can have like a
64:58 - box that shows another web page in our
65:02 - own web page so let me show you how to
65:04 - do this it's very easy and very simple
65:06 - all we just need to do is to use the
65:09 - syntax so we're just gonna come here
65:12 - we're gonna get rid of all this D
65:15 - and I just want to say iframe
65:19 - we're going to close it now it's going
65:21 - to take some attributes the first
65:23 - attribute is going to take is the source
65:26 - so once it takes the source attribute
65:27 - this Source attribute is the link that
65:29 - we want to show in here so let's say I
65:32 - want to show google.com
65:39 - so this is going to show google.com in
65:41 - here for me so that is that easy to do
65:44 - and once I run this you're gonna see
65:46 - what it shows you can see that it
65:48 - creates a box it says refuse to connect
65:51 - that is probably because of this replay
65:54 - um page but normally once you use this
65:57 - iframe as you can see it's trying to
65:59 - connect to google.com
66:01 - so there are more you can do to this
66:03 - iframe more things like you can you know
66:05 - specify the height the width of what how
66:09 - big you want this to be so I'm going to
66:11 - give you more attributes and say height
66:15 - and let's say 100
66:17 - if I run that you're gonna see that it
66:20 - goes smaller and let's say I also give
66:22 - it a width
66:24 - of 100.
66:26 - now if I run that you're gonna see that
66:28 - the width also goes smaller so I can
66:30 - increase it however I like I can say
66:32 - this is 500 and I can say this is 500.
66:35 - so if I run that and I'm gonna see that
66:38 - we have a big iframe right here so
66:42 - that's how to create a very basic iframe
66:44 - for us now you can also remove the
66:46 - Border you know this line where you see
66:48 - we can do that so to do that we are
66:50 - going to use the style attribute we've
66:54 - talked about this style attribute before
66:55 - easy to you know add some styling to
66:57 - that particular element so now what
67:00 - we're just going to do here is to say
67:02 - border now this border is basically the
67:04 - line that we see right here I'm going to
67:07 - say border equals none
67:09 - if I run this
67:11 - and now gonna see that there is no lines
67:14 - there the lines that were shown before
67:15 - are gone now let me just make this quite
67:18 - smaller so you can see that very well
67:22 - if I run this
67:25 - you're gonna see that it's just a square
67:27 - there's no lines on that so that's a
67:30 - very basic way of how to create iframes
67:32 - in HTML
67:36 - now let's look into symbols in HTML so
67:39 - let's say we want to display different
67:41 - symbols like let's say the pounds sign
67:44 - or the hero sign uh we want to display
67:47 - more symbols like the copyright sign you
67:51 - know Card Sign I'm going to explain what
67:54 - I mean in a bit so if you want to
67:56 - display all this stuff there is a
67:58 - particular you know
68:01 - syntax that you have to follow in HTML
68:03 - so for example let's say in this body I
68:07 - have a P tag I'm just gonna say
68:11 - this is
68:13 - 0 sign
68:15 - so I now want to display this sign of
68:17 - the Euros currency for me to do this I'm
68:20 - going to say and so I'm going to use
68:24 - this and right here on my keyboard and
68:26 - I'm going to say Evo
68:29 - now if I run this you're going to see
68:31 - that it displays the hero sign for me
68:35 - that didn't display the Euro sign and
68:37 - that's because we didn't have this
68:39 - semicolon so we must make sure we have a
68:41 - semicolon now you're going to see that
68:43 - it displays the hero sign now there is
68:45 - more and more that we can do and I'm
68:48 - going to go through most of them so for
68:50 - example let's say we want to have you
68:53 - know
68:54 - um something like
68:55 - the copyright sign so the copyright sign
68:58 - what we need to do is to do and I'm
69:01 - gonna do hashtag
69:03 - and we're gonna do 169
69:07 - . the note that it must end with this
69:09 - semicolon if not it's not going to work
69:12 - so once I run this you're going to see
69:14 - that we have the copyright sign now
69:16 - there's a lot like we can have the
69:17 - registered sign is similar to this but
69:20 - it is 174 and once I run this you're
69:23 - gonna see that we have this R sign so we
69:27 - can also have like the you know the
69:29 - signs on the card like the Spade they
69:32 - are to the diamond and all of that so
69:34 - first to do this right here let's say I
69:37 - want to have the Spade sign I'm just
69:39 - gonna have nine a
69:41 - two four and this is gonna show the
69:44 - space sign on a card as you can see
69:47 - and if I want to have the clubs I'm
69:49 - going to do 9827
69:53 - right that's going to show the clubs and
69:56 - let's say I want to have the Arts I'm
69:57 - going to do 9829 that's going to show
70:00 - the hidden art and if I want to have the
70:02 - diamond I'm gonna do nine eight and
70:05 - three so once I run that we're gonna see
70:08 - that that shows that for us now there is
70:11 - a lot like let's do one more for example
70:13 - I could trademark we're gonna just
70:16 - change it to 8 4
70:17 - 2.
70:19 - so once you change this you're going to
70:21 - see that we have the Trademark Sign TM
70:24 - so this is just a basic way basic syntax
70:26 - of you know showing symbols in HTML
70:30 - now there's a lot of you know all of
70:32 - this and you don't have to know this off
70:33 - by how you can just search on Google
70:35 - HTML symbol for displaying the you know
70:38 - the pound sterling sign for displaying
70:41 - the pi sign anything you want to do you
70:43 - can just search on Google I don't advise
70:45 - actually knowing all of this off by her
70:50 - so that is what that is how to you know
70:53 - create symbols or show symbols in HTML
70:57 - now let's talk about forms in HTML so a
71:01 - forms is a way you can collect input
71:04 - from a user so when you collect the
71:06 - input from a user these forms are mostly
71:08 - sent to like a server for you know
71:11 - processing or whatever the data is
71:13 - needed for for example let's say you go
71:16 - to a website and you want to log into
71:17 - that website you're going to see that
71:19 - there is a simple form where you're fill
71:20 - in your username and your password then
71:23 - you click on submit and that data is
71:25 - being sent to a server that checks
71:27 - whether your username and password are
71:29 - actually in the database of users so the
71:34 - basic reason why we are form in HTML is
71:37 - to collect data from user so let me show
71:42 - you how we can Implement a form in HTML
71:46 - so the first thing you need to know is
71:48 - the form tag so I'm going to remove this
71:50 - and I'm actually going to just start by
71:52 - saying form
71:54 - and when I close it it's going to close
71:56 - by itself
71:57 - so now this form tag is HTML knows that
72:01 - we're trying to create a new form so
72:03 - it's going to have like an input like an
72:05 - input bar where a user can input you
72:08 - know something
72:10 - but now they are more to just this form
72:12 - than only the in the just the element so
72:16 - we need to
72:18 - have the input element also so the input
72:21 - element is used to display what type of
72:23 - form or what type of data we want to
72:25 - collect so for example let's say I have
72:30 - inputs this is how we type input
72:33 - and then we close it like this
72:34 - right and what we can just do is to it's
72:37 - going to collect various attributes but
72:39 - the most important one is the type
72:42 - so as I said it shows or it specifies
72:46 - what type of data we are trying to
72:47 - collect so let's say I just want to
72:49 - collect a text I'm going to input text
72:51 - in here and I can run that
72:54 - so once I run this you're going to see
72:55 - that we just have this simple bar right
72:57 - here where I can input a text right
73:00 - I can also have an input that just you
73:03 - know collects numbers so let's say input
73:08 - type
73:10 - or we can say number if I close that and
73:13 - I saved it I run this
73:16 - you can see now that we have these two
73:19 - buttons here which can help us increment
73:21 - and decrement the number so this only
73:24 - collects numbers so with this basically
73:26 - tells us like what we actually want to
73:29 - you know
73:30 - input what type of data we want to input
73:32 - in here
73:33 - so let's first of all look into this
73:36 - text field very well
73:37 - before we go into the order of fields
73:40 - I mean this text type
73:42 - so for example whenever we have an input
73:45 - right we must always have a label beside
73:47 - it so right here where we have this bar
73:49 - if we don't have something saying input
73:50 - your name or name or username the user
73:53 - is not going to know what to input
73:54 - that's where the label comes in so we
73:57 - have a label
74:00 - and we close that label and here we can
74:03 - just say name
74:04 - so here where we have name we can now
74:06 - say input type text so I can run this
74:09 - and you see it just says name and it has
74:12 - the bar bit beside it so let's say I
74:14 - want to leave a space and I want this to
74:16 - be on the bottom I can just add a br tag
74:22 - and I can run this
74:25 - so you're going to see that it's now on
74:27 - the bottom
74:28 - but now the name the input needs more
74:31 - stuff than just you know the type like
74:33 - we need to know the ID and the name of
74:36 - that particular input so whenever a data
74:39 - is being sent from this HTML on from
74:42 - this HTML form right it's been sent
74:44 - using the name of that particular input
74:46 - if there's no name there is no way a
74:49 - data can actually be collected by the
74:51 - server so we need to specify the name
74:54 - right of this input I can just say the
74:57 - name of this input is username right
75:01 - and we also need to specify like an ID
75:03 - now we use this ID just to be able to
75:06 - recognize or to be able to refer to this
75:09 - particular input within our HTML page so
75:11 - I can also say the ID is something like
75:13 - a username I can give it the same
75:16 - name
75:17 - now for this label I want this label to
75:20 - actually be linked to this particular
75:22 - input because for all I know right now
75:25 - there are just two different elements
75:26 - but what I want to do is that I want
75:28 - HTML this our you know code to know that
75:31 - this label is for this particular user
75:35 - input so for me to do that it's fairly
75:38 - easy I'm just need to gonna need to have
75:40 - an attribute here that says four
75:43 - and we're going to say for username
75:48 - you see we said that by using the
75:50 - attribute that we already you know
75:52 - defined here so if we run this that is
75:55 - not going to make much of a difference
75:56 - but now we know that this label is for
75:58 - this input now let's do the same thing
76:00 - for let's have another form
76:03 - let me just have a br
76:05 - and let me have a label
76:07 - I'm going to close that label and let me
76:09 - say you know h
76:12 - let me just say it's cool
76:16 - right
76:17 - and I'm going to have a four but for now
76:21 - I'm just going to leave it blank so
76:23 - let's quickly create
76:25 - an input for that
76:27 - let's say input and then we're going to
76:30 - have a type
76:31 - and the type of that input is also going
76:33 - to be text
76:35 - and let's give it a name
76:39 - of school
76:41 - and also an ID
76:44 - obscure
76:47 - now I'm gonna say this is for school
76:52 - now once I run this I'm going to see
76:53 - that I have another particular
76:56 - field right there so that is the basic
76:58 - way of doing that now let's look into
77:01 - another type of input like we've talked
77:05 - about text but what if we want to talk
77:07 - about like another type like let's say
77:10 - check boxes right so let me come in here
77:14 - and I'm just gonna remove
77:17 - this particular
77:19 - input so this input where it says type
77:22 - text I'm going to change our text to
77:24 - check box
77:26 - and I'm going to give it an ID of
77:29 - username same username and let me just
77:31 - say the value
77:35 - is something like
77:37 - um let's just say Tommy so I want the
77:39 - user to check if you know this is its
77:41 - value and I can just give it another one
77:44 - and say right here I can just remove all
77:47 - of this right and I can just have this
77:50 - and copy it so it's basically the same
77:52 - thing but with a different type
77:54 - so now I'm gonna say name this is
77:57 - another username we can say username two
77:59 - username two
78:01 - and let's say team
78:05 - right now if I run this you're going to
78:07 - see what it gives us
78:09 - so you can see that it gives us name and
78:12 - it also gives us name so what I want to
78:15 - do actually is right here
78:18 - oh no I've told me
78:20 - I want to have team
78:24 - so once I run this I want the user to
78:26 - pick which one is your username is your
78:28 - username told me then ticket is it team
78:30 - or is it both of it you know then take
78:32 - any of it right so that that is fixed
78:36 - right there and what you just need to
78:39 - know is that whenever the value is being
78:42 - sent for example if a user ticks told me
78:44 - or it takes both of it the value that is
78:47 - being sent is not this value that shows
78:48 - here it's actually the you know the
78:51 - value that we specified as an attribute
78:53 - in here right so whenever a user clicks
78:56 - on submit we're also going to talk about
78:57 - the submit button soon when the exact
78:59 - clicks on submit that all the data is
79:02 - going to be taken from here and sent to
79:05 - whatever server we want it to be sent to
79:06 - but the value that is actually going to
79:08 - be sent is this value that we specified
79:10 - here
79:11 - now we can do exactly the same thing for
79:14 - like radio buttons so very similar to
79:16 - what we just did but what we're just
79:18 - going to do is instead of checkbox we're
79:21 - going to say radio
79:23 - instead of checkbox we say radio
79:26 - if I run this now you're going to see
79:29 - that it prints to me but this time
79:32 - around it is like a radio button so that
79:34 - is fairly easy to understand
79:37 - right so the next thing I want to talk
79:40 - about is actually submitting this data
79:42 - so let me remove this right here and let
79:45 - me move this BR let's just make it look
79:47 - good
79:49 - it doesn't look confusing now once we
79:52 - run this this you just have it beside it
79:53 - so we can pick with the one we want
79:56 - now that we have that I want that
79:58 - whenever a user now clicks on submit one
80:00 - actually I'm going to submit a button
80:01 - this is the easiest what we just need to
80:03 - do let's first have our BR tag right
80:06 - here so
80:07 - it doesn't collide
80:09 - we can just we're just gonna have
80:10 - another input
80:12 - but this time around what we just need
80:14 - to do is to say type
80:18 - submit once we say type submit
80:21 - HTML knows that we want to have the
80:23 - submit button that means the button that
80:25 - whenever a user clicks on this it's
80:27 - sending all those data or those inputs
80:29 - somewhere
80:30 - but now we also need to have
80:32 - a value let me run this first and see
80:34 - what it shows you can see that
80:36 - automatically write submits there but
80:39 - what if I don't want this to be submit
80:40 - let's say I want it to be you know send
80:42 - then I can do value
80:45 - and I can say send
80:48 - if I run this you can now see that that
80:51 - submit button has been changed to send
80:53 - now that is how easy it is for you to do
80:57 - that
80:58 - but now where is this data actually
81:00 - being sent to like when we use send
81:02 - remember I said for this radio and
81:04 - checkbox it's not actually this told me
81:07 - that is being sent is the value that we
81:09 - specified here that has been sent but
81:10 - when we click on send where is it being
81:12 - sent to
81:13 - now this is when we need to add an
81:15 - attribute to the initial form
81:17 - now this attribute is called action this
81:20 - action will tell us where the data is
81:22 - meant to be sent to so again when you
81:25 - say action
81:27 - equals now let's say we want to send
81:29 - this data to another page imagine we add
81:31 - another page like let's say something
81:33 - like
81:34 - um
81:36 - um
81:37 - form.html right we can create that
81:40 - and we want this to be sent to that form
81:43 - dot HTML once we hit send that is going
81:47 - to be sent to form.html basically so you
81:50 - can also like send it anywhere you want
81:52 - to send it to you let's say you have a
81:53 - web application you're building and we
81:55 - can say we want to send it to like slash
81:57 - receive you know you can do anything you
82:00 - want to but this action basically
82:01 - specifies the place or the URL or watch
82:05 - over link is getting
82:07 - that particular form where you want to
82:09 - send that particular form to so that is
82:12 - fairly easy and that's how to easily do
82:15 - that
82:16 - the first thing we need to know let's go
82:18 - through what we just did so the first
82:19 - thing that we did was to create our form
82:21 - element and then we created different
82:24 - labels and inputs I showed you the types
82:27 - and I showed you how to use the submit
82:29 - button and once you have the submit
82:31 - button I also showed you how to add the
82:33 - action so that you actually know where
82:36 - it's going to
82:38 - but now that we know where he's going to
82:40 - right where we put in this action let's
82:42 - say from dot HTML
82:45 - we also want to know what method is
82:47 - being used to send this data now you
82:49 - don't need to know the details of what
82:51 - I'm about to say but there are basically
82:52 - two methods that we can use to submit a
82:55 - data and it's called get and post
82:58 - so when submitting a data you can choose
83:00 - to either submit it using get and post
83:02 - you can learn more about that you know
83:04 - on YouTube anyway if you want to know
83:06 - but for example you can just specify
83:08 - method equals post so let me just show
83:11 - you the the quick difference between get
83:13 - and post when you are sending the data
83:16 - using a get method all the details of
83:18 - the data that you're sending is going to
83:20 - be shown in the URL bar for example if I
83:22 - say something on Google and I hit enter
83:24 - everything I searched the key word I
83:27 - search is going to be shown in the URL
83:28 - bar right that's when you use a get
83:30 - meter well if you use a post method it's
83:32 - not going to be shown they also just a
83:35 - lot of differences between the two but
83:36 - that's just one difference that you know
83:38 - I can use to easily explain it so you're
83:40 - going to pick whatever method you want
83:42 - to use to send this data you can use
83:44 - post or we can use get
83:48 - if you don't use any method imagine you
83:50 - don't specify any attribute right here
83:52 - as default HTML you're going to use a
83:54 - get method to submit that data but for
83:57 - us let's just specify it and say we can
83:59 - say get so it's that easy you just need
84:01 - to you know some you need to specify the
84:05 - method the action so that everything
84:07 - works perfectly
84:09 - so I hope you understand everything we
84:11 - did about this HTML forms is fairly easy
84:14 - and you know I hope you were able to
84:17 - follow along
84:20 - so earlier in this tutorial I said that
84:23 - I was going to show you how to actually
84:24 - create an HTML file and run it in your
84:27 - browser so I'm going to show you how to
84:29 - do it locally on your computer
84:31 - so what you need to do is to open a code
84:33 - editor right here I am in future Studio
84:36 - code but you can use any one you want
84:38 - you can use Sublime Text you can even
84:40 - use a notepad anything that can make you
84:43 - write code and you are comfortable with
84:44 - you can use it so once you have your
84:46 - code editor opened I'm just going to
84:48 - create a new file right here and let me
84:51 - name this file index.html
84:53 - now whenever you're creating an HTML
84:55 - file it must have this dot HTML
84:57 - extension at the end you can name this
85:00 - whatever you want to name it let's say
85:01 - test you know let's say
85:04 - website.html you can name it whatever
85:06 - you want but it must have this dot HTML
85:09 - at the end I'm going to create that file
85:11 - and I'm just going to create it in this
85:13 - particular folder now that I have this
85:15 - file created in here I cannot code
85:17 - anything I want to code but let's say
85:19 - I'm just going to come here and copy all
85:21 - of this code that we did here and I'm
85:22 - going to paste it right
85:25 - so once I have this code in here I've
85:26 - created all my HTML everything I want to
85:28 - do now what I can do is to now run this
85:31 - on my browser for me to do this I'm
85:33 - going to come into the folder where I
85:34 - created that and I'm just going to open
85:36 - index.html
85:38 - so automatically when you open that
85:40 - index.html file it's going to open it on
85:43 - your browser and show you the result of
85:44 - what you are coding
85:46 - so earlier I talked about the uh the
85:49 - title so we tried to create a title here
85:52 - but it wasn't showing just because we
85:54 - are using like this browser right here
85:55 - and not an you know an actual page but
85:58 - now that we have the page you can see
86:00 - that this is my page title is showing
86:02 - now if I go back to this you know code
86:05 - and let's say I change this to
86:08 - test title
86:13 - and whatever I change in here once I
86:15 - refresh you can see that that title is
86:17 - now test title so that is an easy way of
86:20 - actually coding you know HTML files or
86:23 - doing it locally then showing the result
86:25 - on your browser
86:29 - in this section of this course we're
86:31 - going to be looking into CSS so CSS
86:35 - stands for cascading style sheets now
86:38 - what it does is that it allows you to
86:39 - add styling to your HTML page
86:43 - now I'm going to take you from a
86:44 - beginner's level to a level where you
86:46 - can confidently use CSS to style your
86:49 - HTML code
86:51 - now without wasting any time let's
86:52 - actually get straight into this section
86:57 - so now we know that CSS is what we use
87:00 - to basically style everything we do in
87:02 - our HTML so but how do we actually even
87:06 - you know create a CSS file how do we let
87:09 - that CSS file be linked to this
87:12 - particular HTML file and I'm going to
87:14 - show you how to do that so first of all
87:16 - to create a CSS file you need to create
87:19 - a file named style.css so first of all
87:23 - right
87:24 - we are using replay so rapidly
87:26 - automatically created this file these
87:28 - three files for us but right now we're
87:30 - going to be looking more into this
87:32 - style.css so I'm just going to drag it
87:33 - over here
87:34 - so
87:36 - style.css is basically a CSS file that
87:39 - we're going to be using
87:40 - on this HTML file right here so you can
87:43 - name it whatever you want you can name
87:44 - it you know main.css but whenever you're
87:47 - creating a CSS file it must have this
87:49 - dot CSS extension toory
87:52 - so now that we know that we have that
87:53 - how do we actually connect this CSS file
87:56 - to this particular HTML file right here
87:58 - now this is very easy we're going to use
88:01 - a HTML element called link so right here
88:04 - we need to say link
88:06 - and we're going to close it like this
88:08 - that is how we close this side and it's
88:10 - going to take two different attributes
88:12 - the first one is going to be real and
88:15 - that is going to say that this is a
88:17 - style sheet that I will link into we're
88:19 - going to say style sheet
88:21 - and what's it going to have to say the
88:23 - name of that style she thought the link
88:24 - to that style sheet so right now we are
88:27 - just gonna use the name of that
88:28 - particular CSS file because on this
88:31 - replay right all of these are Under the
88:33 - same folder so we can just simply say
88:35 - the name of the file instead of saying
88:37 - you know folder slash whatever because
88:39 - we have it in the current folder so I'm
88:41 - just going to say style dot CSS now once
88:45 - I say this anything I'm any CSS I code
88:48 - in here anything I try to do in here is
88:50 - automatically going to be added to this
88:52 - particular you know page it's going to
88:54 - be effective
88:55 - now now that you know how to do that I'm
88:57 - going to start straight into the main
89:00 - CSS so I'm going to talk about you know
89:02 - the CSS syntax like how does it even
89:04 - work how do we even start coding in CSS
89:08 - so to write code in CSS we need to know
89:11 - two things and they are called the
89:13 - selector and the Declaration
89:15 - so as you can see right here
89:17 - automatically replay as this basic CSS
89:20 - code and what this does right so this
89:22 - HTML right here as you can see
89:25 - it is the selector so first of all I'm
89:27 - just gonna let me just remove this HTML
89:29 - and just have body don't need to worry
89:31 - about it I'll come out for now so we
89:33 - have this body right here and that is a
89:35 - selector and then all of these were
89:37 - saying the height of body should be 100
89:39 - the weight of body should be 100 don't
89:42 - worry about the details of what this
89:43 - does for now but let me just introduce
89:45 - you to how we write code in CSS so this
89:47 - is the selector right and this is the
89:49 - Declaration now this means that this
89:52 - body
89:53 - we want whatever we are doing inside
89:55 - here to be affected on this body element
89:58 - so what this is going to do now it's
90:00 - going to go into whatever HTML is linked
90:03 - to it and it's going to look for your
90:04 - body element so it's going to come here
90:06 - and it's going to look for this body
90:07 - element right once it sees this body
90:10 - element
90:11 - he's gonna say whatever we do inside
90:13 - these brackets we want to have it been
90:16 - affected on this body element without
90:18 - wasting any time let me show you how to
90:20 - do you know our first change
90:23 - so let me just get rid of this and let's
90:25 - actually do something so I'm going to
90:27 - use the body again let me say body
90:30 - this is how we write a CSS code so we
90:32 - say the elements right that we want to
90:34 - change and then we use this curly braces
90:37 - and you press enter
90:39 - now anything you do in here is going to
90:41 - be affected with the HTML or whatever
90:44 - file is being linked to it so now our
90:46 - same body now there are different
90:48 - declarations the Declaration can be we
90:50 - want the color to be you know red we
90:52 - want this whatever font size in there to
90:54 - be you know 15 we can do a lot of things
90:56 - I'm going to go through all of that in
90:59 - this section of this course so first of
91:01 - all let me just show you how you can
91:03 - change the background color of the body
91:04 - to be let's say blue or red so first of
91:08 - all you know that this body is where all
91:10 - the code goes into that means everything
91:13 - we're going to be coding in our HTML is
91:15 - going to be under this body the visible
91:17 - part of the web page so now we want the
91:19 - visible part of the web page to have a
91:20 - background color of let's say Green
91:22 - Let's Make a green so what we're going
91:24 - to do now we're going to say body now
91:26 - whatever we're doing here which you
91:28 - should know now is the Declaration we're
91:30 - going to say background this is how you
91:32 - change the background color background
91:34 - hyphen color
91:36 - and we want that to be green
91:40 - and then you must add this semicolon now
91:43 - the reason why we must add this
91:45 - semicolon is so that we can have another
91:46 - declaration right here let's say I want
91:48 - to change the font size I can write
91:49 - something else if you don't add that
91:51 - semicolon it's going to think that
91:52 - whatever you add here is still part of
91:54 - this first declaration
91:56 - so you must add the semicolon to end
91:57 - that declaration so this is how you're
91:59 - doing background color which is what we
92:01 - want to change you put your colon and
92:03 - then you put the value so think of this
92:05 - as a key and this is a value
92:07 - now let's run this and see
92:10 - so we're going to run this
92:13 - as you can see now the background color
92:14 - of this is green so it is effective
92:16 - immediately
92:18 - now let's check what if let's say I
92:20 - remove this right
92:22 - I'm just going to delete this that means
92:25 - this HTML page is not linked to this
92:26 - style.css now if we try to run it you're
92:30 - going to see now that it doesn't show us
92:31 - a background color of green normal and
92:33 - that's just to show you that no matter
92:34 - what you write in your CSS page if you
92:36 - don't connect it or link it to your HTML
92:38 - page it's not going to be effective
92:41 - so now let's remove bring that back
92:44 - and when we run this again we should
92:47 - have the background color as green
92:52 - now let's talk about comments in CSS so
92:55 - when we're looking into HTML earlier in
92:58 - this course I talked about comments in
93:00 - HTML and in there I talked about why we
93:03 - use comments what it is and you know how
93:05 - we can actually code that in uh file so
93:08 - in CSS it's very similar to HTML the
93:11 - motive for using a comment is you might
93:14 - want to explain a bunch of code or you
93:17 - might want to just remove a part of a
93:20 - code that you don't want to be run when
93:22 - your file is run basically let's say I
93:24 - have this CSS file here so if I comment
93:28 - out all of this body the code is still
93:30 - going to be present in this file but
93:31 - it's not actually going to be effective
93:33 - so it's not going to be run by the
93:34 - browser so let me show you how to add a
93:37 - comment right here in CSS
93:39 - so we talked about it in HTML but it's
93:42 - quite different here so let's say I want
93:44 - to explain what this you know code does
93:47 - I can add a comment and to have a
93:49 - comment and I'm going to have to use the
93:50 - forward slash then I'm going to use the
93:52 - asterisk sign
93:53 - and here I'm going to write my comment
93:55 - let me just say comment for now
93:57 - and then for me to close that comment
93:59 - because right here you can see that CSS
94:01 - still sees this as a normal code due to
94:03 - the colors I'm Gonna Leave a space a
94:06 - steric mark and I'm gonna use the
94:09 - forward slash again now you can see that
94:12 - that part is grayed out
94:13 - you can see that the color is gray so
94:16 - this just shows that this is a comment
94:17 - right here and I can just write
94:19 - something in here like changes
94:23 - the
94:25 - background
94:27 - color
94:28 - of body
94:30 - right so that is explaining this code
94:32 - right here now that is a
94:35 - one use of you know comments you might
94:38 - also want to use a comments like let's
94:39 - say we have another thing that just you
94:42 - know let's say another iterative or
94:45 - something like that and he has a value
94:46 - right and then I just want to comment
94:49 - this up I can do exactly the same thing
94:51 - I'm just going to have the forward slash
94:54 - I'm gonna have the asterisk sign right
94:56 - here I have the asteric sign and the
94:57 - forward slash again so that part is
94:59 - still going to be in this code but the
95:01 - web browser is not going to run it when
95:03 - you actually run that file so that is
95:06 - those are the main two uses of comments
95:08 - but apart from just using it to you know
95:10 - adding it on top of like let's say a
95:12 - code you can add it somewhere else let's
95:15 - say we have different you know
95:17 - declarations right here let's say we
95:19 - have second declaration third
95:21 - declaration that's just an example and
95:23 - we want to explain each declaration by
95:25 - themselves so we can have a comment
95:26 - right beside this particular declaration
95:29 - let me get rid of this so right here I
95:32 - can just have a comment here that says
95:34 - you know
95:37 - change
95:39 - to Green
95:41 - so for me to do this I have to add the
95:44 - forward slash steric sign
95:46 - and right here you have to do the same
95:48 - thing
95:54 - I'm just gonna do
95:55 - steric sign and forward slash so you
95:57 - cannot see that that part is greater let
95:59 - me just make this something like this so
96:01 - that is now a comment right
96:04 - so that's the easy way of you know using
96:06 - comments in CSS is quite easy
96:09 - like when you're learning programming
96:11 - well you're going to notice that if you
96:12 - learn other programming language each
96:14 - programming language has a different way
96:16 - of writing comments but the motive
96:19 - behind using comments is the same in all
96:21 - your programming languages now you can
96:23 - also have multiple line comments for
96:26 - example instead of just having one
96:28 - straight line I can create a new comment
96:31 - right here
96:32 - and I can just say
96:36 - comment
96:37 - uh-huh I can go to another line continue
96:39 - writing the comment
96:41 - yeah okay just something random and then
96:45 - I can close it right here
96:47 - so you can see that all of that has been
96:50 - commented out so it doesn't just have to
96:52 - be a straight line so that means I can
96:53 - even comment out all of this code you
96:55 - know you can basically be very flexible
96:57 - with your comment you can do whatever
96:58 - you want to do
96:59 - so that is a very simple and basic way
97:02 - of using comments in CSS
97:06 - now let's talk more about selectors in
97:08 - CSS so earlier in this course I told you
97:12 - about how the syntax of CSS work that
97:16 - this is the selector right here and this
97:18 - is the Declaration but now let's look
97:20 - more into how these selectors actually
97:22 - work how we can pick different elements
97:25 - from HTML and style it so say the CSS
97:29 - selector is divided into different
97:30 - categories but first of all I'm going to
97:32 - break down in I'm going to break
97:34 - everything down right now so once again
97:37 - CSS selectors they're basically used to
97:39 - select HTML elements that you want to
97:42 - style right so it's very easy the first
97:46 - way to just
97:47 - have a selector is to come into your
97:49 - HTML and look at the let's say we have
97:52 - an H1 right here
97:54 - I we want to look at the elements right
97:58 - and then we're going to come in here and
97:59 - just write the element right there we
98:01 - can just say on H1 tag we want the
98:04 - background color to be green so we've
98:06 - basically selected that H1 tag very easy
98:09 - and very plain now we can select
98:12 - an element or we can decide to style a
98:16 - text or something else without selecting
98:18 - the actual element we can select an ID
98:21 - in that element so remember when we add
98:24 - when we did a form and then we add an ID
98:28 - as an attribute now you can have an ID
98:30 - not just only in a form input you can
98:32 - have it on any HTML element you want for
98:35 - example I can add this ID and say the ID
98:38 - is welcome message
98:42 - welcome so now that this has an idea of
98:45 - Welcome right I can come in here
98:48 - and then select this all this particular
98:51 - elements just by the ID so what I need
98:54 - to do to do this is to come in here
98:55 - instead of just writing it directly I
98:58 - need to write hashtag now once I put an
99:01 - hashtag CSS automatically knows it's
99:03 - trying to select an element by
99:06 - identifying its ID
99:08 - so what you just need to do now is to
99:09 - write the name of that ID now CSS is
99:12 - going to go into this HTML file and it's
99:15 - going to look for an element with the ID
99:17 - of welcome and then it's going to make
99:19 - the background color green now let's run
99:21 - this and let's see what it gives us boom
99:24 - you can now see that the background
99:25 - color of that old element is green
99:28 - so that's a very simple way of using an
99:30 - ID and this is also very you know
99:33 - very useful now let me explain a use
99:36 - case for example let's say we have two
99:38 - different H ones
99:41 - and this one says
99:43 - Tommy
99:44 - and if I run this
99:48 - you can now see that only I is as an ID
99:52 - of green I mean it has a background
99:54 - color of green now imagine I didn't use
99:56 - an ID and I just use H1 this is going to
99:59 - affect every single H1 type that we have
100:02 - here so it's going to have all the H on
100:03 - as green but what if I want just I to be
100:07 - green or just told me to be green that
100:09 - is a use case of using the ID to select
100:12 - it because the ID is unique to every
100:15 - single element so that is also very very
100:18 - useful
100:19 - so now that is one way of doing that
100:22 - let's run that again and see everything
100:24 - is working another way of selecting an
100:27 - element or a text or whatever you want
100:30 - to style is to select it by the class so
100:33 - there is something named classes in HTML
100:36 - and this class is also an attribute
100:38 - right it also identifies a particular
100:43 - element so once you have a class in an
100:46 - HTML element you can then use that to
100:49 - select that particular element and style
100:52 - it
100:53 - so just the way we have an ID we can
100:55 - have a class here
100:57 - just the normal way we write HTML
100:59 - attributes you write class and then you
101:01 - give it a value
101:02 - so let's say this class we want this
101:04 - class to be something like
101:06 - adding so that is the name of this class
101:09 - so now we can select just this class and
101:13 - say we want to style all of this
101:15 - for you to do that now let's actually
101:17 - just create another you know
101:21 - declaration selection and declaration so
101:23 - first you do this now we want to select
101:26 - this particular element using its class
101:28 - so we're gonna do Dot
101:32 - adding
101:33 - so this is the selector
101:35 - when you see dot something that means
101:38 - we're selecting an element based on its
101:40 - class
101:41 - so this means
101:43 - we are trying to select a class and this
101:45 - is the name of the class and now we can
101:47 - just say we want the color
101:49 - of whatever is there
101:52 - to be blue
101:54 - and we can use a semicolon to stop that
101:56 - now once I run this you should see that
101:59 - it has a color of blue just this one and
102:03 - that is because it has been seen or it
102:05 - hasn't selected just by the class now
102:08 - this is very helpful right
102:11 - so you can also do like more advanced
102:14 - stuff with this for example let's say
102:17 - there are two different let's say there
102:20 - are two different elements that has a
102:21 - class of adding so let's say we have p
102:24 - and this just say told me small or let's
102:28 - just say Tommy again and this also has a
102:31 - class
102:33 - of Eden
102:36 - if I run this
102:39 - this is going to show
102:41 - a smaller tell me but it also it is also
102:44 - affected because you selected it by the
102:47 - adding so anyone that has a class of
102:49 - adding is going to have this blue color
102:52 - on it
102:53 - but let's say we just want to say just
102:55 - the H1 tag that has a class of adding
102:58 - should be blue
102:59 - so that means we don't just want to get
103:01 - every single element that has a class of
103:04 - edging just an H1 tag that has a class
103:05 - of adding now for us to do this what
103:08 - we're going to do right here beside the
103:10 - dot we're going to say H1 so now what
103:13 - this is going to do is that it's going
103:14 - to go into the H1 element and it's going
103:17 - to look for any H1 elements that has a
103:20 - class of adding now if I run this you're
103:22 - going to see that that P is not affected
103:24 - no more this is just black but this is
103:27 - still blue
103:28 - that is a very good a good example of
103:32 - how you can do this
103:34 - now there's also one more thing and this
103:37 - is the universal selector
103:40 - so the universal selector is basically a
103:43 - selector that affects every single
103:45 - element in the HTML page so let me show
103:47 - you what I mean so let's say
103:50 - I want every element on this page to
103:52 - just have a color of red every single
103:54 - element should be read
103:56 - for me to do this I'm going to use the
103:58 - asterisk sign
103:59 - if I use the asterisk sign and have my
104:01 - curly braces normally like this this
104:04 - means that whatever I'm writing in here
104:05 - is going to be affected by every single
104:07 - element with no one left out so now I
104:10 - can just say color
104:14 - I can say purple
104:18 - so let me just get rid of this
104:21 - and now let me run this
104:24 - so you're going to see that every
104:26 - element on it has a color of purple
104:27 - that's because we use this asterisk sign
104:30 - also known as the universal selector
104:32 - now this is you know a very good use
104:34 - case because you might just be building
104:35 - a page and you want that page to you
104:37 - know let's say all the text should be in
104:40 - the center you can use this to do it
104:42 - right so that is a very good one so the
104:46 - last one I'm actually going to talk
104:48 - about is the grouping selector remember
104:51 - when we first started this CSS video
104:53 - there was like uh HTML and body
104:56 - something that was written like this and
104:58 - I got rid of one because I said we're
105:00 - going to talk about that later so now
105:02 - what this is is called the grouping
105:04 - selector let me get rid of all of this
105:07 - right and let's say I have an H1 tag on
105:10 - each one selector
105:11 - that says you know
105:14 - color
105:16 - and let's say green
105:18 - and then I have a P tag
105:21 - a p selector that says color
105:24 - green also
105:28 - right as you can see I'm just repeating
105:30 - the same thing if I run this
105:32 - it's gonna have green all of it because
105:34 - these two are H1 and this is p
105:36 - now I'm repeating the same particular
105:39 - you know declaration for two different
105:42 - elements now instead of having to write
105:45 - all of this because let's say I have a
105:47 - lot of elements and I want all of them
105:49 - to be green I and I have to start
105:51 - writing H1 color green P color green you
105:53 - know B color green
105:55 - strong color of green we don't want to
105:57 - do that you can actually just come in
105:59 - here have a comma and say p
106:02 - so this means that for the H1 and P
106:05 - element do this
106:07 - now once I run this you're gonna see
106:09 - that that has been affected on this so
106:13 - that is a more broader explanation on
106:15 - selectors what they are and how you can
106:17 - actually use them
106:21 - now we are going to look more into
106:22 - backgrounds in CSS so we I briefly
106:26 - showed you how you can have this as a
106:28 - how you can let this have a background
106:29 - of like red or purple or whatever you
106:32 - want it to have but they're actually
106:33 - more to talk about in backgrounds in CSS
106:37 - so like we can make a particular element
106:40 - of a background color we can make that
106:43 - element have even a background image so
106:45 - let's say we just want this part to have
106:47 - like a background image where an image
106:49 - will be debugger or we can just make the
106:51 - old page to have a background image so
106:54 - there are you know lots of other stuffs
106:56 - we can do and we're going to talk about
106:57 - them now so first of all let's just make
107:00 - this the body right
107:02 - and in here instead of just saying color
107:04 - green we actually want to say background
107:06 - color
107:09 - so similarly to what we've done before
107:10 - and once I just click on run the whole
107:13 - background is going to be green that is
107:15 - very easy and simple right
107:17 - but there are also more stops we can do
107:19 - than just this for example instead of
107:22 - just having green let's say we want to
107:23 - have blue and instead of just having a
107:25 - normal blue we can say we want it to be
107:28 - light blue
107:30 - if I say light blue you can see the it's
107:33 - going to be light blue compared to the
107:35 - normal blue so there's a lot of stuff
107:36 - you can do and I like replay because it
107:39 - automatically just gives you a lot of
107:40 - suggestions once you say blue you see
107:42 - all the blues that it has so you can
107:44 - also go online to search like what color
107:47 - of blue do we have you can see medium
107:48 - slate blue
107:51 - you can run that it's going to be that
107:52 - particular blue color so you can go
107:54 - online and search all CSS colors or css
107:57 - acceptable colors you can see a list of
107:59 - it and you know you pick which one you
108:01 - want to pick
108:02 - now that is one right and there's
108:04 - another thing we can do by adding an
108:07 - opacity or making it more transparent
108:09 - basically so we there is a opacity
108:13 - declaration that we can add and it's
108:16 - going to make this you know a bit
108:17 - lighter or a bit more transparent for
108:19 - you to do this is very easy you're just
108:21 - going to say opacity
108:24 - and let's say we want it to be 0.4
108:28 - so you can make it all the way from zero
108:31 - to one that is the range so the lower
108:33 - the value the more transparent it's
108:35 - going to be if I say 0.4 you're going to
108:38 - see that it's quite transparent right
108:40 - but let me say 0.1
108:43 - you're gonna see
108:45 - that is very transparent but what if I
108:47 - just say 0.9
108:50 - you're gonna see that is opaque very
108:52 - opaque so you can do that and you know
108:55 - that's how to just have a transparency
108:57 - on your background colors
109:00 - now let's just go straight into talking
109:02 - about background images so for example
109:04 - let's say I don't want this to be a
109:06 - background color and I want it to be an
109:07 - image
109:08 - so since we know that we've already
109:09 - selected the body now if we add anything
109:12 - it's going to affect the old page now
109:14 - let's just do that real quick
109:15 - now first you have a background image
109:17 - quite similar instead of writing
109:19 - background color we just change our
109:21 - color to image so I'm going to say
109:23 - background
109:24 - iPhone image
109:26 - and now we're going to have to specify
109:28 - the URL where we want this image to come
109:30 - from right the source URL so if I I have
109:34 - a link copied I'm going to paste that so
109:37 - that is the link right there and it just
109:38 - opens the an image of the free codecamp
109:41 - logo so I'm gonna just copy that again
109:44 - and I'm gonna close that
109:46 - so since we know we have the URL to the
109:48 - Africa Camp logo what we just need to do
109:50 - now to tell CSS where to get that image
109:53 - from is to say URL
109:55 - and then we're just gonna have a
109:58 - brackets and we're gonna have the codes
109:59 - and in that codes we're going to paste
110:01 - the link to that image so if I run this
110:04 - you're gonna see that the background of
110:06 - this is actually that free codecamp
110:08 - image so as you can see the text don't
110:11 - show but they're actually there they
110:12 - don't show just because
110:14 - the background is black and the text is
110:16 - black so now that we know CSS what we
110:19 - can just do is to say you know this is
110:22 - H1 and P you can say H1 we can use group
110:25 - selector h1p and then we can just say we
110:28 - want the color
110:31 - to be white
110:34 - now once I run this again
110:36 - the text should show exactly so you can
110:39 - see that that works this is just the
110:41 - background image this doesn't really
110:43 - have any effect on it what this is the
110:46 - text that is still showing the next
110:48 - thing that we want to talk about is the
110:49 - background position so for example let's
110:51 - say we just have a background image that
110:54 - you know is very small and it just stops
110:56 - here right we can have a background
110:58 - position and say we want it to be at the
111:00 - top right corner so we're going to do
111:02 - background
111:05 - I've in position
111:08 - and we can just say we want the position
111:10 - of that to be at the top right so we can
111:12 - say right
111:15 - I want you to be at the right
111:16 - and then we're going to leave a space
111:18 - and say top
111:21 - so this means that it's going to be at
111:23 - the right corner but the top of that
111:25 - right corner so that's what that does
111:28 - so now that we have all of that that's
111:30 - the very basic way of you know having
111:32 - background images in CSS
111:37 - now we are going to look into margins in
111:40 - CSS so margins are used to create
111:43 - spacings around elements so for example
111:46 - when I have this let me change the color
111:49 - of this to Black
111:51 - I'm gonna run this so
111:54 - it should show the text let's say I want
111:57 - this P tag to have a margin of let's say
112:02 - or let's say I want this tag to be
112:04 - somewhere around here instead of just
112:05 - from the beginning I want it to be here
112:07 - that's when we use margin so we can
112:09 - specify the like space we want from the
112:12 - left side from the right side from the
112:14 - top I can also bring it down and I can
112:17 - also like take it up so that's what
112:19 - margins does it basically allows you to
112:21 - create like spaces around elements now
112:24 - there are different ways we can specify
112:26 - the margins as I said we have the margin
112:29 - top we have the margin right we have the
112:31 - margin bottom and the margin left so
112:33 - each of that I just used to specify the
112:35 - spacing for whatever we want we want it
112:37 - to be if you want there to be a space at
112:40 - the top we use the margin top we want
112:42 - them to be a space at the right with the
112:44 - margin right for the bottom margin
112:45 - bottom and for left margin left
112:48 - so now let's just go straight into this
112:50 - so I'm going to remove this H1 and we're
112:52 - just going to have p so automatically it
112:55 - has a color of black we don't need to
112:56 - write that
112:58 - so what I can just do now is to say
112:59 - imagine
113:01 - is how I write it ifin let's say left
113:05 - once I say imagine left then now when I
113:08 - want to give it a value now there are
113:10 - different values we can give it we can
113:13 - specify how far we want it to be like in
113:16 - in actual numbers like I can say 20 PX
113:21 - now if I run this you're going to see
113:23 - that once I run it there's going to be a
113:25 - space on the left you can see that it
113:27 - moved a little bit so you can keep going
113:29 - like that with numbers right right I can
113:32 - say well 50 now
113:34 - if I say 50 and I run it you're gonna
113:37 - see that it's gonna move again a little
113:38 - bit so that means I've created a space
113:41 - of 50px
113:42 - from the left right I can do the same
113:45 - thing on the right the top and the
113:47 - bottom so that is one way of specifying
113:49 - the value another way I can specify a
113:52 - value is by using a percentage so I can
113:54 - just specify it by saying 50 percent
114:00 - and once I run that you're gonna see
114:02 - that it has it in the middle so what it
114:05 - what the percentage does is that it
114:07 - calculates the old width of the you know
114:09 - element and it puts it in like from 50
114:13 - so this side is 50 of this o width so
114:16 - that is why we have it there so that's
114:18 - for the percentage what I can just do
114:21 - now is to actually show you what more I
114:23 - can do like I can say instead of having
114:25 - 50 I can say 50 PX
114:29 - so I can specify this was just for the
114:31 - left if I run it it's going to have
114:33 - space in here I can also say I want
114:35 - there to be margin
114:38 - on the top if I say margin top and I
114:41 - also say 50
114:44 - the X
114:46 - now if I run this
114:49 - you're gonna see now that they it came
114:51 - down a little bit there's now more space
114:52 - here now I can also do the same thing
114:55 - and say imagine
114:58 - right
115:01 - I say 50px
115:04 - right so I'm saying the margin right
115:05 - should have 50px not going to really
115:07 - show any difference because there's
115:09 - nothing is actually
115:11 - um like moving from relative to it like
115:13 - for the left is moving 50px relative to
115:16 - this border from the top is moving 50px
115:18 - relative to this you know this H1 tag
115:21 - but there's nothing here so that's why
115:23 - it doesn't really move right well I can
115:26 - also say imagine
115:28 - bottom
115:30 - and I can see 50px now once again it
115:33 - shouldn't move that's just because
115:34 - there's nothing is moving relative to
115:36 - this right so that's how it's going to
115:38 - be and once we have that we basically
115:41 - know that we can specify what particular
115:44 - you know side we want it to move from so
115:48 - instead of writing all of this right
115:51 - here you can see that this is quite a
115:52 - lot of code just you know to make some
115:55 - spacing you can actually compress all of
115:57 - this into one so what I mean is that
116:01 - let's say I get rid of all of this
116:04 - I can just actually make this one so I
116:08 - can say imagine
116:10 - and I can say it's going to have a value
116:12 - of let's say 50 PX 50 PX 50 BX and 50px
116:21 - so what this does is that instead of
116:23 - having to write margin left margin right
116:24 - all of that it just uses this to say
116:28 - this first 50px is the top margin this
116:31 - second one is the right margin this
116:33 - third one is the bottom margin and this
116:36 - is the left margin so you can compress
116:38 - all of this into just one line of code
116:40 - or css automatically knows what they
116:42 - stand for so you should also know that
116:45 - the first one is the top second one is
116:47 - the right third one is the bottom and
116:49 - fourth one is the left so if I run this
116:51 - you're going to see that there's still
116:52 - some space in the same spacing as the
116:55 - same margins as we said before
116:57 - now that is for you know if you want to
116:59 - specify four of it but let's say you
117:01 - just want to have three margins now what
117:03 - does this mean this just basically mean
117:04 - this represents the top this represents
117:06 - the right and this represents the bottom
117:08 - so I'm going to run this
117:11 - and you see that we still have the same
117:12 - thing I can do exactly the same thing
117:14 - and just have two margins
117:16 - and you should have guessed by now this
117:18 - just basically represents
117:21 - but this is quite different right this
117:23 - represents the top and the bottom margin
117:25 - right and this represents the right and
117:28 - the left margin so that means it's
117:30 - basically the same thing as saying 50px
117:32 - four times because this 50px represents
117:35 - both default the top and four and bottom
117:37 - and this is the right and left if I run
117:40 - this it's going to be the same obviously
117:42 - and you can also just have one margin if
117:46 - I have just one margin what this does is
117:48 - that this 50px represents all of the
117:50 - four margins so top right bottom left
117:53 - this 50px represented and once I run
117:56 - this you are going to see that it
117:58 - basically has that the way it is
118:01 - so there's also one more way we can
118:04 - specify emergence we can say inherit so
118:08 - let me explain what this inherit does so
118:10 - if I come in here and let's say I have
118:12 - this p
118:13 - right under let's say a div tag
118:21 - if I have this P under a div tag right
118:23 - uh let's just say something like a b tag
118:28 - so let's say this B this p is under this
118:30 - B type and I come in here and I'm I
118:32 - actually you know
118:34 - style that b tag and let's say I say
118:37 - imagine
118:39 - top
118:41 - is something like 50px
118:44 - let's say 60px xcpx so since this P tag
118:48 - is under this B tag that means I can
118:51 - inherit right I can inherit this margin
118:55 - from that beta so if I want to specify
118:57 - margin top
118:59 - and I don't want to actually like start
119:00 - writing I can just in input in edit and
119:03 - what's our input inherit is going to
119:05 - have the same margin top as this B and
119:09 - when I say in edit what CSS is going to
119:11 - go into it's going to go into HTML and
119:14 - it's going to look for the tag that this
119:16 - is under so since it's under a b tag
119:18 - it's going to come back in here and see
119:20 - the margin top on that b tag and it's
119:22 - going to do the same thing for this now
119:24 - if I run this let's see what it gives us
119:26 - you can see that we only have a margin
119:28 - on the top so that is a simple way or
119:32 - basic way of using margins in CSS
119:36 - now we're going to talk about borders in
119:38 - CSS now what I mean by borders is
119:41 - basically like a wrapper for a
119:43 - particular element so for example if you
119:45 - want there to be like a square on this
119:48 - element that's when we use a border so
119:51 - without wasting any time let me just
119:52 - show you how we actually use borders
119:55 - so there are different styles of borders
119:57 - you can have uh or just a simple
120:00 - rectangle wrapped around this or you can
120:02 - make it dotted or just dashes I'm going
120:05 - to show you what we're gonna do to do
120:06 - that so I'm gonna get rid of this B
120:09 - and on this P tag what I'm just gonna do
120:12 - right now is I'm gonna say
120:16 - I'm gonna get rid of this I don't need
120:18 - this and I'm just gonna say
120:21 - for the
120:22 - Style
120:24 - now once I say border style CSS now
120:27 - knows that I'm trying to put a border
120:28 - around this particular P tag so now
120:31 - there are various Styles I'm going to
120:33 - talk through every single one of them so
120:35 - let me first put
120:36 - dotted
120:39 - now once I put dotted and run it you're
120:42 - gonna see that there's a border around
120:43 - this that is dotted now that's the
120:45 - simple way of doing that actually let me
120:47 - just change this to the H1 just so you
120:50 - can see it better
120:52 - so now we are talking about the H1 tags
120:54 - good so as you can see that is what it
120:57 - does very simple now there's a lot of
121:00 - different styles that we can use and I'm
121:01 - gonna talk about all of them right now
121:04 - so the first one is dotted there's
121:06 - another one named solid so if I change
121:08 - this to solid
121:10 - and I run it you're just going to see
121:12 - that it's going to have a solid body
121:14 - around it a normal square is not dotted
121:15 - it's just a normal line so if I didn't
121:18 - explain this border style is just a way
121:20 - to to actually put a border around this
121:23 - particular element and that border style
121:26 - this particular style
121:28 - says or asks for us to put the value of
121:32 - the style that we want so before we put
121:34 - dotted now we put solid so this is what
121:37 - this solid brings if I put let's say
121:40 - apple there's another one named Groove
121:43 - once I put Groove and run it you're
121:45 - gonna see that it basically shows a boy
121:48 - like more Slimmer just a normal line and
121:51 - is more fade compared to the solid now
121:55 - if I put dashed
121:57 - and I run dashed
121:59 - you're gonna see that it's not dotted is
122:01 - like a dash dash you know with spacing
122:04 - between it and I can also put W just
122:08 - going through what you can use as your
122:11 - butter
122:13 - is similar to groove but let's say more
122:16 - thicker than that now I can also put
122:19 - reach
122:21 - by pull rage and run it
122:24 - you're gonna see that is how that looks
122:26 - like there's another one named outset
122:29 - outset and inset and once I run this
122:32 - outset as you can see it basically gives
122:35 - you like this highlighter of this
122:37 - particular you know elements now once I
122:39 - say inset
122:42 - when I run inset
122:44 - you're gonna see that it's just the
122:46 - opposite of that the top a thick and the
122:48 - other parts are not thick so what if
122:52 - let's say you don't want to
122:55 - uh you don't want the butter you don't
122:57 - actually want to have a border that's
122:59 - when you just use none
123:01 - if I run none you're not going to see
123:03 - anybody just gonna be there right
123:06 - unless I want to have a border but I
123:08 - don't want you to show it's basically
123:10 - give you the same result as none but
123:12 - this is eating so it basically like has
123:14 - a border but it's not showing now once I
123:17 - run that
123:18 - you see that nothing changes okay then
123:21 - that's just simply because we use Eden
123:24 - now let's say you want to mix different
123:27 - types of borders like let's say you want
123:28 - this top to be dashed you want the
123:31 - bottom border to be solid you want this
123:33 - part to be double you know we can do
123:35 - that what you just need to do is to
123:37 - basically specify what you want so for
123:40 - example the right here where we have
123:43 - this value hidden what you're just going
123:45 - to do is to say and say dashed
123:49 - double
123:52 - dotted
123:54 - and solid
123:55 - now if I run this you're gonna see that
123:58 - each of these stands for different ones
124:00 - so I'm just gonna
124:02 - expand this right here just so you can
124:04 - see it so you can see that the first one
124:06 - which is dashed is right here that's for
124:09 - the top
124:10 - and this uh double as you can see is the
124:14 - one right here
124:16 - double is the one right on the right
124:19 - and when you say dotted that represents
124:21 - the bottom and it says solid that
124:23 - represents the left so this is
124:25 - top right bottom left so that's just how
124:29 - you can mix different ones together if
124:31 - you want and once you know how to do
124:34 - that that's basically the basics of
124:36 - actually you know inputting a border in
124:39 - uh in CSS
124:42 - but they are more to that like what if
124:44 - we actually want to be more flexible
124:45 - with this what you want to be more
124:48 - Dynamic with this that we want this to
124:50 - be like our own design so for example
124:52 - let's say we want the width of this to
124:55 - be larger so first of all let me just
124:57 - change all of this to
124:59 - solid
125:01 - and now let's say I want this to have a
125:04 - width let me first run that so you can
125:06 - see the output of that and let's say I
125:08 - want this to be quite bigger like I
125:10 - don't want it to be this small I can say
125:13 - butter
125:14 - I think with
125:17 - and I can say 10px
125:20 - and if I run that you're gonna see that
125:23 - this is quite thicker I can change that
125:26 - to let's say 6px
125:28 - just to reduce the thickness
125:31 - as you can see it is less thicker so
125:34 - that is one way of giving up value to
125:36 - the width with the other ways we can
125:38 - also give values just the way we when we
125:41 - we're dealing with margins we could give
125:43 - value with six with numbers we could
125:45 - also give value with inherit and all of
125:47 - that but in this one we can give values
125:49 - with PX
125:51 - and we can also give values with you
125:54 - know the rate like for example I can say
125:57 - medium
125:59 - now if I say medium
126:01 - this means it's gonna be thick me you
126:04 - know medium or we can just also say
126:07 - thick if I say thick
126:10 - it's just going to be very sick that's
126:12 - what it is so you can use that to
126:14 - basically specify the you know the width
126:16 - of the border that you want it's very
126:19 - easy
126:20 - but what if we want to actually just
126:22 - specify different side width like let's
126:24 - say we just want only this part to be
126:27 - 5px then we want this part to be you
126:29 - know 10 PX then we want this part to be
126:31 - 11 PX we can do that now the first thing
126:33 - you need to do just the way we could mix
126:36 - different styles we can also mix
126:38 - different width so what we're gonna do
126:40 - is we're going to specify for the top we
126:42 - can say the top should have 10 PX
126:45 - and then we're going to specify for the
126:47 - right we can say the right should have
126:48 - 5px I'm going to specify for the bottom
126:51 - part you can say the bottom part should
126:54 - have let's say 11px and then for the
126:58 - left part we can say if you have 22 PX
127:00 - now if I run this
127:03 - you're just going to see there is a
127:04 - mixture of different width in the Border
127:07 - Lines so that is how to do that
127:09 - but you can also split it evenly so for
127:12 - example you can
127:14 - imagine I have just two different you
127:18 - know PX
127:19 - two different sizes put here what this
127:21 - is going to do is that it's going to
127:23 - take this 10px and input it for the top
127:25 - and the bottom and it's going to take
127:26 - its 5px and you put it for your left and
127:28 - right it's gonna split it evenly so as
127:31 - you can see left and right has 5px top
127:33 - and bottom as 10 PX now that is a very
127:36 - simple and basic way of doing that
127:40 - now after specifying the width of what
127:42 - we want we can also add the color let's
127:44 - say we don't want this to be black we
127:46 - want this to be you know you know Green
127:47 - we want I want this to be purple what
127:50 - you just need to do as you might have
127:51 - guessed is to say border color
127:54 - and once you say border color you can
127:56 - just directly give it the color that you
127:58 - want you can just say purple
128:01 - and once we say purple we put our
128:03 - semicolon if we run that you can now see
128:05 - that it has purple
128:08 - now once again we can have a mixture of
128:11 - colors like we can want the top to be
128:13 - green we can want this part to be purple
128:15 - we can want this part to be Violet pick
128:17 - out this part to be black now we're
128:19 - going to do that right now so we're
128:20 - going to say the top part should be
128:22 - purple and let's say the right part
128:23 - should be blue right side and then we're
128:26 - going to say the bottom side is going to
128:29 - be let's say green
128:31 - and let's say
128:33 - the left part should be red
128:36 - now if I run this
128:39 - you're gonna see so each should have a
128:42 - mixture of different colors so okay
128:46 - um the reason why that gave us an error
128:48 - is because there shouldn't be comma in
128:50 - there so what you just need to do is
128:52 - when you're specifying different values
128:53 - you don't actually use a comma I'm going
128:55 - to remove get rid of this comma
128:59 - get rid of that
129:01 - get rid of that and once I run this
129:03 - you're gonna see that there's a mixture
129:05 - of colors as you can see all the borders
129:08 - has different colors within them
129:11 - so you can see that that is also you
129:14 - know very easy to do
129:16 - so instead of also just having like this
129:20 - style for everything to be solid we can
129:22 - basically I'm gonna remove all of this
129:24 - and we can just say something to
129:28 - style like only the top right so for
129:31 - example I can say I want border
129:36 - I think top iPhone style
129:40 - so for this
129:42 - you know instead of saying you know
129:44 - before we we basically compress
129:46 - everything into one where we say border
129:48 - style and we could say Dash we could say
129:50 - you know solid Ricochet dotted and
129:53 - everything is just going to be split but
129:54 - let's say you just want to have each of
129:55 - them differently you can say this should
129:58 - be dashed
130:00 - and brother
130:02 - I think you know you can say right so
130:07 - I'll say dotted
130:10 - I also say brother I think bottom
130:15 - Style
130:19 - now you can just say you know you can
130:21 - give you the same thing let's say dotted
130:23 - also
130:26 - let's say brother
130:28 - I've been left so
130:32 - we can just say dashed
130:36 - now if I run this you're gonna see that
130:38 - is basically going to have different
130:40 - you know once like this is Dash and this
130:43 - is dotted this is dashed and this is
130:45 - dotted so this is a long way of doing it
130:48 - but the way I said already went with
130:50 - this style like this and then we specify
130:53 - different one by saying let's say dashed
130:56 - and then we can just say dotted
130:59 - you know so this is you know for the top
131:02 - two the top and bottom and this is for
131:04 - the left and right so this is the
131:06 - shorter way of doing it like see how
131:07 - compressed that is now
131:09 - so I also highly suggest that you do
131:12 - that instead of actually going
131:14 - to do every single thing you know one
131:17 - after the other
131:18 - so that is
131:20 - also a good one so for example so let's
131:23 - say you want to have
131:25 - a border but you don't want the border
131:28 - to be a square you might just want it to
131:30 - have a border on the left or on the
131:31 - bottom on the top now what you can just
131:33 - do very simple and straightforward you
131:36 - can just say butter
131:42 - for that bottom
131:49 - and let's say dashed
131:50 - now once you run dashed you're just
131:53 - gonna have
131:54 - a border on the bottom and it's going to
131:56 - have dashed we can change this to border
131:58 - left
132:00 - and you're just going to have a dashed
132:01 - border on the left like this
132:04 - good now you know when we specify the
132:07 - Border button I mean when we specify the
132:09 - Border style the color you know the size
132:11 - and all of that we can just do
132:14 - everything at once like where I have
132:16 - border left instead of saying border
132:19 - left then I'm now going to say border
132:21 - colored and border with what I can just
132:23 - do is to First say
132:25 - the width so I can say the width should
132:27 - be 10 PX then I'm going to say the style
132:30 - and then I'm going to say the color
132:31 - let's say purple
132:34 - now what this does is that it allows us
132:36 - to just compress every all those code we
132:38 - are going to write into one line so
132:40 - instead of writing border with to have
132:42 - the width where you can just have it
132:44 - here and instead of writing border color
132:45 - we can just have it here if I run this
132:48 - you're going to see now that we have a
132:49 - left you know border of all of this
132:53 - so if I don't want this to just be left
132:55 - I can just remove this you know
132:58 - and now the old Border is gonna have all
133:00 - of this
133:01 - so that is very easy and straightforward
133:04 - now the last thing we're going to talk
133:06 - about is putting rounded borders so let
133:10 - me change this back to solid
133:13 - and when I change this to solid let's
133:15 - see
133:17 - now let me change this to something like
133:19 - free
133:21 - just want it to be smaller
133:24 - cool now what I want to do is to make
133:27 - this border rounded so if you look into
133:30 - this particular repeat page you can see
133:33 - that this basically has a border that is
133:35 - rounded
133:37 - but as you can see on these edges they
133:39 - are not squared like the way this border
133:41 - is squared these edges are actually
133:43 - curved so that's a rounded border I'm
133:45 - going to show you how to do that on
133:46 - these edges very straightforward what
133:49 - you just need to do is to say brother
133:51 - hyphen radius
133:53 - so now you're going to specify or you
133:55 - know write our curve you want it to be
133:58 - so let's go with 4px
134:01 - we want it to be that curve and I run it
134:03 - you're gonna see that it is curved for
134:06 - PX
134:07 - let's say 10px it's gonna be very curved
134:12 - as you can see it is very curved so the
134:14 - more you increase it the more it works
134:16 - if I run it as 20px
134:20 - now you can see that is more code so
134:22 - that's basically how to do that and I
134:25 - hope you understand everything now about
134:26 - borders in CSS
134:30 - now let's talk about CSS padding the
134:33 - padding is used to create like a space
134:35 - around an element or text inside any
134:39 - border so for example let's say we have
134:41 - this eye right here unless you want to
134:43 - create a space like we want there to be
134:45 - more spacing on top here and or below
134:47 - here and also on the left that's when we
134:50 - use padding
134:51 - the first use padding is very easy for
134:54 - example we'd already have this border
134:56 - right here now let's say we want there
134:57 - to be space on the top what you just
134:59 - need to do is to say pattern
135:03 - icon top
135:04 - that easy then now I'm going to specify
135:06 - how much we want the space to be you can
135:10 - say 40px
135:12 - and then once we run this we're now
135:14 - going to see that there's gonna be a
135:15 - space on the top of 40px we can do the
135:18 - same thing by saying padding
135:20 - left
135:23 - and let's just say 40px
135:28 - once you do that there's going to be a
135:30 - space of 40px on the left and then you
135:32 - can also say padding
135:34 - you can say bottom
135:37 - and then there's also going to be a
135:39 - space of 40px on the bottom
135:44 - so as you can see that works and you can
135:46 - also do the same thing you know for the
135:49 - right side
135:51 - you can just change this bottom right
135:54 - here
135:54 - to write
135:57 - but when you run that
136:00 - doesn't really make any difference
136:01 - because there's already a lot of space
136:03 - here
136:04 - now instead of having to write all of
136:06 - this you know top left bottom right you
136:08 - might have guessed just the way we did
136:09 - everything for border and for margins
136:12 - when we are doing margins you can just
136:13 - say padding and then we can just specify
136:16 - let's say 40 ex MPX
136:23 - 20px
136:25 - answer apx
136:27 - so once you say all of that this is
136:29 - basically the 40px is for the top the
136:34 - right is for 10px and 20px is for the
136:37 - bottom and 30px is for the left now if I
136:39 - run this you're gonna see that that is
136:41 - going to work perfectly
136:43 - now you can also do the same thing by
136:44 - you know removing one when you remove
136:46 - one this just simply means the top the
136:50 - right and the Bottom now if I remove the
136:54 - second one what this is going to is
136:55 - going to split it evenly so 40 is going
136:57 - to go to the top and the bottom and this
136:59 - is going to go to the left and the right
137:00 - if I run that you're gonna see what that
137:03 - does
137:04 - so that works successfully now let's say
137:08 - I just have 40 in here
137:12 - and I run this what this is going to do
137:14 - is that it's going to left the left have
137:15 - a pattern of 40 top 40 bottom 40 and
137:19 - right 40. so just what we've been doing
137:21 - for you know border for margins does the
137:24 - exact same thing that happens here
137:26 - so I hope you understand what is padding
137:29 - and why we even use padding
137:33 - now let's talk about height and weight
137:35 - in CSS now the item which is just used
137:39 - to set the item weight of a particular
137:42 - element so let's get rid of this all the
137:45 - borders
137:46 - and let's just run this normally
137:49 - so let's say we want this eye to have
137:52 - like a not the actual element but you
137:55 - know around the element the space around
137:57 - the element to have a height of you know
138:00 - let's say 60 PX so what you need to do
138:03 - is just to come into H1 and say height
138:06 - so you can say add and say 60px
138:12 - so once you say that and you run it
138:13 - right obviously you might not see any
138:16 - change okay you can see a change now
138:18 - this is the reason why we see a change
138:20 - is because there is
138:22 - now an height of 60px around this so
138:26 - This starts from after that that's how
138:28 - you can see the space in these two so
138:30 - first actually see it visibly more let's
138:33 - set the background color
138:35 - so when we have a background color
138:37 - of purple
138:40 - and I run it you can see where the
138:43 - distance of background color of purple
138:45 - now the height of this is 60px I can
138:48 - change this to 90 PX and when I change
138:51 - this to 90 PX you can see that it now
138:53 - has an a bigger height so this height is
138:56 - basically the height of you know
138:58 - everything around that particular
139:00 - element now we can also change the width
139:03 - and let's say I want the weight to also
139:05 - be 90 PX now if this width is 90 PX and
139:08 - we run it you're gonna see that the
139:12 - width was reduced drastically
139:14 - but let's say I just want this width to
139:16 - go all the way from the beginning right
139:18 - from here to the end of the page for me
139:20 - to actually get the end of the page
139:22 - because obviously I I might not know how
139:26 - large any body screen is so like for
139:28 - this screen I don't know if the end of
139:30 - the page is 200 PX even if it's 200 PX
139:32 - for another screen it might be 500 PX so
139:34 - for me to get rid of that problem and
139:36 - let it just be all the way to the end of
139:39 - the screen what I just need to do is to
139:41 - use percentage
139:42 - so when I use 100 percentage
139:46 - 100 is not going to be calculating it
139:48 - based on pixels or PX what is going to
139:50 - calculate it based on is the percentage
139:53 - of that screen so now once I run it
139:55 - you're going to see that the width goes
139:57 - all the way to the end of the screen so
139:59 - it calculates the 100 of that screen if
140:01 - I change this to 50 of that screen then
140:04 - you're going to see that it only stops
140:06 - at half of that screen right here
140:09 - so that is a basic you know thing about
140:13 - height and width now there's also
140:15 - something called Max width and the max
140:17 - width is just used to set the maximum
140:19 - weight of an element it's that easy so
140:22 - what you can just do now is right here I
140:25 - can just say Max I think width if I say
140:27 - Max width and I run this it basically
140:29 - just set the maximum width of that
140:31 - element it doesn't really make any
140:33 - change that is noticeable but now we
140:35 - know that the maximum with other
140:36 - elements can have is 50 of the screen
140:41 - now we are going to talk about outlines
140:43 - in CSS
140:45 - so what outline does is that it draws a
140:47 - line outside a border in an element so
140:51 - for example we have this Border in this
140:52 - element right if we add an outline to it
140:54 - it basically just draws a line outside
140:56 - that particular border and what it does
140:58 - is just it it just makes that element
141:01 - stand out that's basically the main
141:03 - reason of an outline so very very
141:06 - similar to how we Define uh borders
141:09 - that's how we also Define outlines so
141:12 - let's say we have this border right here
141:14 - actually we don't have a border this is
141:15 - just a normal background color stuff we
141:17 - can just get rid of this and I can say
141:20 - outline
141:22 - style so when I say outline Style just
141:25 - the way we say border style that's how
141:26 - we say outline style and I just want it
141:28 - to be a normal solid
141:30 - now if I run this
141:32 - you're just gonna see that it has a
141:34 - basic you know outline of solid
141:38 - so it's very basic you can change this
141:39 - to dashed
141:41 - once I run this it's going to be dashed
141:44 - you know you can change it to basically
141:46 - whatever you want to change it to so
141:49 - that is the basic you know concept of
141:51 - outline it's very easy we don't need to
141:53 - you know
141:56 - you don't need to you have to put a
141:58 - border or whatever you can use an
142:00 - outline or a border or you can even use
142:02 - both for example let's say we have
142:04 - border right here we can say border and
142:07 - let's say we just say it's 2px we can
142:10 - say it is um let's say dashed and we can
142:13 - say it is green
142:15 - so if I run this you're gonna see that
142:18 - we have our border normally but then we
142:20 - have an outline after let me change this
142:23 - to solid instead of dashed
142:26 - so you can see that we have let me just
142:30 - make this a little big
142:31 - you can see that we have this Dash right
142:34 - here this dashboarder but outside that
142:36 - we have this outline so that's what an
142:38 - outline does you just make that element
142:40 - standard or it wraps around the
142:42 - particular element so it's very easy and
142:45 - you know very straightforward
142:47 - but you can also do something
142:50 - to get a space between the outline and
142:54 - the Border and that is called the
142:56 - outline offset so what you just need to
142:58 - do is to come here and say outline
143:03 - I think offset so once you have an
143:06 - outline offset let's say 10px
143:10 - that means we want a space of 10 PX
143:12 - between the outline and the border so
143:14 - that is what it just does right here
143:16 - this is the outline and this is the
143:18 - Border there's a space of 10px
143:21 - so that's how straightforward outlines
143:23 - are is very easy okay so this is the how
143:26 - we basically Define outlines in CSS
143:32 - now we're going to be diving deeper into
143:34 - texts in CSS so I'm going to show you
143:37 - everything you need to know on styling
143:39 - text in CSS
143:42 - I'm gonna get redeveloped this real
143:43 - quick let me just run that again
143:46 - so what we're gonna do first of all is
143:49 - to talk about how to style the colors of
143:51 - a text
143:52 - so if you select an element and in that
143:55 - element you declare
143:57 - a color and give it a value of let's say
143:59 - blue
144:00 - that is going to give
144:03 - the value the color of blue to all the
144:05 - text in that element so that is the easy
144:07 - way of changing a text in an element now
144:10 - we've talked about this you know
144:11 - previously a lot and this is just
144:14 - emphasizing on that so whenever you just
144:17 - say color and you give it a value it's
144:19 - going to do for all the text in that
144:21 - particular element and change it to Blue
144:24 - now you can also you know talk about the
144:26 - background color of a property but
144:29 - that's basically the background color of
144:31 - that text but not of the text actually
144:34 - like we've also done this you can just
144:36 - say background I think color and then
144:39 - when you say background I think color
144:41 - you can just simply say you know red and
144:44 - it's going to give it a background color
144:45 - of red
144:48 - good that is easy and straightforward
144:51 - now the next thing I'm going to talk
144:53 - about is alignment so I'm going to get
144:55 - rid of all these colors don't really
144:57 - want to talk about the colors again now
144:59 - what I want to talk about is the
145:01 - alignment so what I mean by the
145:03 - alignment is to show how aligned the
145:06 - text is so for example if I want this
145:08 - text to spin in the center or instead of
145:11 - being at the left I want it to be on the
145:13 - right that's when I use text alignment
145:15 - so for me to align the text what I need
145:18 - to do is to come into the element that
145:19 - contains that text and what I'm just
145:21 - going to do is to say text hyphen align
145:26 - once I do a line I can say right
145:31 - so I can specify three different things
145:33 - left Center and right if I say right
145:35 - you're going to see that all the H1 tags
145:37 - the text in them goes to the right
145:40 - if I say Center
145:43 - you're going to see that they
145:44 - automatically align at the center right
145:47 - here
145:48 - now I can say left but that is just
145:50 - going to be default so as a default if
145:52 - you don't give it a text alignment it's
145:54 - just going to be at the left so if you
145:56 - also align it to left it's just going to
145:58 - be right there where you want it
146:00 - now if I say justify let me change this
146:03 - to justify
146:05 - and I run this
146:07 - now when you run it we justify it
146:09 - doesn't really make any change but if I
146:12 - come in here
146:13 - and let's say
146:15 - I change this to
146:17 - random text
146:21 - and I run this
146:24 - so what justify does is that justify
146:28 - basically stretches out each line so
146:30 - that everyone every line has like equal
146:33 - width and length so what this means is
146:36 - that if we have let's say we have a full
146:39 - text here and then we come in here and
146:42 - we say text align should be justified
146:44 - what this is means that it basically
146:47 - makes sure that this particular text
146:50 - wraps around the O length of that screen
146:53 - so that is what justify does very easy
146:57 - and after talking about justify the next
147:00 - thing I'm going to talk about is text
147:02 - align last now what text align last does
147:05 - so I'm going to change this to
147:07 - iPhone last
147:10 - what text a line last does is that it
147:12 - basically aligns the last line of a text
147:15 - so for example if I say Center
147:20 - right so if I say Center and then I try
147:23 - to run this
147:28 - you can see that it aligns that because
147:30 - this is the last line of the text that
147:32 - is why it aligns this at you know the
147:35 - at the center so for example let's say I
147:38 - just have let me just copy this
147:41 - and just keep going like that and I run
147:43 - it
147:46 - so you're gonna see that all of these
147:48 - start from the left but only the last
147:52 - line aligns at the center so that is
147:55 - what test align Center does I'm just
147:58 - going to remove all this and put it back
147:59 - the reason why this also that I also
148:02 - aligns are the center is because it is
148:05 - also the last line even if it's also the
148:07 - first line
148:09 - so that is what the test align last does
148:12 - you can make it right you can make it
148:13 - left you can make it whatever you want
148:15 - so I'm also going to talk about vertical
148:18 - align so when I say vertical align I'm
148:21 - going to change this to vertical
148:26 - iPhone align
148:31 - so when I say vertical align what that
148:34 - does is that it basically aligns that
148:37 - vertically so for example let's say that
148:39 - we have
148:43 - this is Tommy is a guy and let's say
148:47 - that this guy has a P tag
148:53 - oh now let's make a b tag
148:56 - just so that doesn't start on a new line
148:57 - and then let's you know give you like an
149:00 - ID
149:03 - of or not a class yeah we're gonna give
149:07 - you an ID
149:09 - and let's just say this ID is something
149:11 - like
149:13 - um
149:14 - text so once we give that that ID well
149:18 - we just want to actually don't let us
149:20 - give it an ID let's use a class
149:21 - attribute so that we can just easily get
149:24 - that from there so once you give this a
149:26 - class what we can just do now we give
149:28 - that a class of text you know copy that
149:30 - text and I'm going to come in here so
149:32 - I'm just going to say
149:33 - H1 now I'm going to say
149:36 - B dot text so right here now what I'm
149:40 - going to do is to come
149:42 - in here and I'm going to say
149:46 - the dot text
149:48 - and I can just say B dot text you have a
149:52 - vertical alignment of let me say top
149:55 - now if I run this
149:58 - you're going to see
150:01 - I'm gonna wait for that to run
150:04 - so it says to me is a guy so that
150:07 - doesn't really make any change that's
150:08 - just because it's uh the size is the
150:11 - same as the H1 but let's say this is
150:14 - actually like smaller like this P right
150:17 - here
150:18 - week is once we make the alignment go to
150:21 - the top it's basically going to just
150:23 - shift all the way to the top right here
150:25 - but because this guy is the same size as
150:28 - all of this so when it tries to shift to
150:30 - the top it basically wraps around all
150:32 - the oh you know the old margin of this
150:35 - particular text but for example let's
150:37 - say you have a smaller text or let's say
150:39 - this a is smaller then it's going to go
150:41 - up to the top a little bit so that is
150:44 - what that does
150:46 - so now that we know about the vertical
150:49 - text alignment the next thing I'm going
150:52 - to talk about is text decoration so I'm
150:56 - gonna get rid of this OB
151:01 - it's gonna run that again and I'm gonna
151:03 - come back in here so right here where we
151:05 - have text decoration so what you can
151:07 - what text decoration does is that it's
151:09 - it adds a line to a text very easy very
151:12 - simple so right here where we have H1
151:17 - what I can just do is to say text
151:19 - decoration line
151:28 - hyphen line
151:30 - I can give you a value and say
151:32 - underline
151:35 - so if I say underline this is just gonna
151:37 - have an underline
151:39 - under the it's just gonna have a line
151:41 - under the text that's what that does now
151:43 - there are different ones and I'm going
151:44 - to try all of them now so we can say
151:46 - something like line true
151:50 - once you say line three it's just going
151:51 - to strike a line across the text so you
151:54 - can see there's a line striking across
151:57 - the text if I say over line
152:01 - as you might have guessed there's going
152:02 - to be a line on top of that particular
152:04 - text
152:05 - now you can also add two different
152:07 - decorations together like I can have an
152:10 - over line and I can have an underline
152:14 - if I have both of them together it's
152:15 - basically going to have one on top and
152:17 - also one on the bottom as you can see
152:20 - right there now we can do more we can
152:23 - actually like you know say the color
152:24 - that we want for that decoration line so
152:27 - you can see text decoration
152:30 - color
152:32 - let's just say green
152:35 - once we say that and we run it you're
152:37 - gonna see that just the color of that
152:39 - line is green and not the text as you
152:42 - can see it changed the color of that
152:43 - line to Green
152:45 - another thing we can also do is to
152:47 - specify the style of this line like what
152:49 - if we want this line to be you know
152:51 - dotted or dashed or solid what you just
152:54 - need to do is to say text
152:57 - decoration
153:00 - Style
153:03 - and I can say dashed
153:06 - once I said Dash to this line is gonna
153:08 - be dashed
153:10 - so I can also you know change it to
153:12 - double
153:16 - and I can also change it to dotted
153:21 - you know I can use basically any style
153:23 - just similarly to what I use in the
153:25 - borders so that is dotted
153:27 - so what I can also do now is to specify
153:30 - the thickness of that particular line so
153:34 - I'm just gonna say text decoration
153:37 - I'm gonna say thickness
153:40 - now I'm going to use pixels we can say
153:42 - 10px and that is just gonna give it a
153:45 - thickness of 10 PX
153:48 - as you can see it's quite thicker if I
153:50 - say in 90 PX you're going to notice that
153:52 - very well
153:55 - so okay this should be SS
154:01 - so you should notice the thickness yeah
154:04 - that's a lot so if I say 10 let me just
154:06 - go back to 10.
154:09 - you can see that that is 10 BX so now
154:13 - instead of having to write all of this
154:14 - you might have guessed again we can just
154:16 - compress all of this and you know have
154:19 - it on one line so I can have what
154:22 - decoration do I want let me say over
154:24 - line
154:26 - and the color I want should be purple
154:30 - and the next one you're going to have to
154:32 - say is a style so let's say we want this
154:34 - style to be solid
154:36 - and then the thickness let's say we want
154:38 - you know 6px so this is how the syntax
154:43 - goes you first specify you know the one
154:45 - that you want the line that you want the
154:47 - type of line and then you're going to
154:49 - specify the color then the
154:52 - style and then the thickness so once I
154:55 - run this now you're gonna see that that
154:58 - works perfectly
154:59 - there's also something else that we can
155:02 - do we can just basically say text
155:03 - decoration we can say none
155:06 - now this text declaration known as come
155:08 - very handy especially when I'm building
155:10 - my pages with HTML CSS for example let's
155:13 - say we have a link and I'm going to show
155:14 - you this right now so right in here we
155:17 - are going to have an a link
155:20 - let me just say link
155:22 - and let's just say h3f
155:25 - and that goes to hashtag
155:28 - if I run this you're gonna see that it
155:32 - automatically has this underline right
155:34 - there right but what if I don't want
155:36 - that line or any decoration on this what
155:39 - you can just do is to come here and say
155:42 - an a tag every 8X should have a text
155:45 - decoration of none because as you know
155:47 - automatically it has this underlined
155:49 - decoration and once I say no decoration
155:52 - you're going to see that it doesn't have
155:53 - that underline no more but the link
155:55 - still works perfectly so that's a you
155:58 - know very useful
156:00 - tip that I've used a lot
156:02 - and now we're going to talk about text
156:04 - transformation
156:06 - so text transformation is basically
156:07 - transforming in the text you can make it
156:09 - uppercase you know lowercase capitalize
156:12 - you can do a lot of stuff with the test
156:15 - transformation so what you can do now is
156:18 - you just say
156:20 - let's say
156:22 - text
156:24 - I'm gonna come here and type text hyphen
156:27 - transform
156:28 - so what I want to transform you to let's
156:30 - say I want everything to be lowercase
156:33 - so now you're gonna see that all of
156:35 - these texts are going to be transformed
156:37 - to lowercase
156:39 - I can want you to be uppercase also
156:43 - and once I run that you're gonna see
156:45 - that this is all uppercase
156:49 - now I can also change this to car
156:53 - italyze now what capitalized does is
156:55 - that when we have a sentence every word
156:57 - in that sentence starts with uh
157:00 - got an uppercase so if I come in here
157:03 - and let's say Tommy is a guy
157:06 - now every single word on it is going to
157:08 - start with
157:10 - an uppercase
157:11 - so okay this term is a guy belongs to a
157:15 - P tag so Andy okay what we can just do
157:18 - is to come here and add that P tag
157:21 - so that it affects it also
157:25 - so as you can see every single word in
157:28 - that P tag now basically as
157:32 - starts with a capital case
157:35 - now the next one I'm going to talk to
157:36 - you about is
157:39 - text indentation
157:41 - so I'm going to remove all of this and
157:43 - let's say we have a sentence like this
157:45 - and we want it to start with a paragraph
157:46 - or something like that what you just
157:48 - need to do is to say text
157:50 - indent
157:54 - and we're just going to say something
157:56 - like let's say 30px
157:59 - once I say that
158:02 - you're now going to see that all of this
158:05 - stats you know as a space before it so
158:09 - that's a very simple way of you know
158:11 - showing how to indent your text so and I
158:15 - hope you understand that
158:16 - one more thing you know the last thing
158:18 - we're going to talk about now in this
158:20 - old text
158:22 - is the letter spacing so for example
158:25 - let's say you want there to be more
158:26 - space between each letter what you're
158:28 - just going to do is to say letter
158:32 - spacing
158:38 - so once I run this letter spacing
158:40 - and I'm going to see that there's going
158:42 - to be a spacing of 30px within every
158:44 - single letter so that is how the later
158:46 - spacing works now I hope you understood
158:49 - everything we talked about concerning
158:50 - text
158:54 - now let's look into fonts in CSS
158:57 - so front just basically allows us to
158:59 - change how the text looks like let me
159:02 - get rid of this spacing letter spacing
159:05 - and just have it back to normal
159:08 - so I'm also going to get rid of a just
159:10 - want it to affect H1 and P
159:13 - so what we can do now is to actually
159:16 - change the font of this text so for me
159:19 - to change the font of this text I need
159:21 - to use something called font family
159:25 - now there are there's a lot of like
159:27 - fonts you can use and you can easily
159:29 - search Google to get the list of CSS
159:31 - fonts that you can use but I'm just
159:33 - going to test a few ones now to show you
159:35 - the first one I'm going to test is area
159:39 - so I can say to use this I'm going to
159:41 - say aerial comma
159:44 - so it should give us like
159:46 - or vertical
159:49 - and that is under the sun's serif font
159:52 - so once I run this you're gonna see that
159:55 - the font of this has changed to area we
159:59 - can notice that it is now a different
160:00 - font so I can also change this to
160:05 - you see the console so that's a font
160:10 - and you don't need to know all of this
160:11 - on the top of your head everything is
160:13 - available for you on the internet
160:15 - so
160:18 - I can say new
160:20 - and then this is on the mono space
160:23 - if I run this
160:26 - you're gonna see that that changes the
160:28 - font to that particular font so it is
160:30 - very easy to change the font and you
160:32 - know
160:35 - it's not that complicated or you just
160:36 - need to know is in the name of the font
160:39 - so I'm just going to comment that out
160:40 - and the reason I commented that out is
160:42 - because now I want to talk about font
160:44 - styling so I can say font style
160:49 - and I can say that this style should be
160:51 - italic
160:54 - if I say this style should be italic
160:56 - it's just gonna make the text a little
160:58 - bit slant so that's just an italic tile
161:01 - so this is basically a font style named
161:03 - italic and I can also change it to
161:05 - something like oblique
161:08 - and once I change that to oblique you're
161:10 - gonna see
161:11 - that that is oblique very similar to
161:14 - italic
161:15 - and now I can just have it as normal if
161:18 - I have it as normal it's not going to
161:19 - change nothing the style is not going to
161:21 - change just going to be the same way
161:22 - that it is
161:24 - so the another thing I can do is to
161:27 - affect the front weight so I'm just
161:29 - going to say font hyphen weight
161:31 - and if I say font weight should be let's
161:33 - say bold and that
161:36 - font is going to be bold
161:39 - if I say font weight should be as you
161:42 - can see there's a P tag but it's now
161:44 - bold you can see font weight should be
161:46 - normal
161:48 - and that is just gonna be
161:51 - normal
161:55 - so that is how easy it is as you can see
161:58 - this was an H1 tag
162:00 - and an each one tag is always bold but
162:02 - because I told you to be normal now as
162:04 - you can see it's no more that bold it's
162:07 - just normal
162:08 - and
162:09 - the another thing the last thing I'm
162:11 - going to look into is talking about the
162:14 - font size so the font size is basically
162:16 - giving it like the text size if I say
162:19 - size and let's say I say something like
162:21 - 50 PX
162:23 - and I click on run I'm gonna see that
162:26 - this is gonna be 50px so this is that
162:29 - huge so that's what it just does you
162:31 - don't need to over 10K what you just
162:33 - need to know is that it changes the size
162:34 - of that particular text
162:36 - now the way we change this size using PX
162:39 - we can also change the size using em
162:42 - so what we can just do now is to say
162:46 - let's say
162:48 - 50 em is actually a lot if I run this
162:50 - you're going to see that it is massive
162:52 - so
162:54 - actually that didn't show yet you can
162:57 - see how massive it is so I think 16
162:59 - pixels equals to 1 am so basically this
163:02 - is like 50 times 16 pixels which is
163:05 - going to be you know let's see 50
163:07 - multiplied by 16. so we're basically
163:09 - saying 800 pixels so that is why it is
163:11 - that huge so but let's say something
163:13 - like you know
163:16 - a
163:19 - 4 AM
163:21 - and then if we run that you're gonna see
163:24 - that it is that huge so that is how to
163:26 - deal with fonts in CSS
163:31 - now let's talk about icons in CSS so for
163:34 - example let's say I want to show like an
163:36 - icon let's say a cloud icon or you know
163:39 - a computer icon or any icon how do I
163:42 - actually show that now we are actually
163:44 - going to use like an external
163:46 - source so let me just get rid of this to
163:48 - make the text normal back
163:51 - and I'm going to come into HTML to
163:53 - actually do this
163:54 - so what you need to do is to go into
163:57 - your adding element and paste this in
164:00 - there now you don't need to know like
164:03 - where what this is what it is just is
164:05 - that it basically linking a particular
164:08 - style sheet which is an external CSS
164:10 - file from a Google API so Google product
164:13 - provided like a CSS that allows us to
164:16 - just make icons very easily so what you
164:20 - just need to do is to paste or right
164:22 - type in this particular code in your
164:26 - adding element and once you type that in
164:28 - your add element what you can now do is
164:31 - to come into your body and when you come
164:33 - into the body wherever you want the icon
164:35 - to be now you need to type it or you
164:38 - need to write that you want the icon to
164:39 - be at this place so we're just going to
164:42 - say we're going to use an element named
164:44 - I
164:46 - and we're going to close it like that
164:48 - and that is going to take a class
164:52 - of material so we're going to say equals
164:54 - to
164:55 - material
164:57 - I think icons
165:00 - and now we are now going to write the
165:03 - particular icon that we want to show so
165:06 - if we want the cloud icon to show we're
165:07 - going to say cloud
165:09 - we can do the same thing to have another
165:11 - icon so you can say I
165:14 - exactly the same thing we're going to
165:16 - say class
165:18 - and then we're going to say equals and
165:20 - then we're just going to say materials
165:23 - I can't
165:26 - I'm always say material icons now we can
165:29 - now say let's say we want the computer
165:30 - icon to show we're going to say computer
165:32 - so now we should be having the cloud and
165:34 - computer icon show now if I run this
165:36 - you're going to see that two different
165:38 - icons are going to show this is a cloud
165:40 - icon this is a computer icon that is a
165:42 - very easy way of doing it with Google
165:44 - Icons API that you provided for us now
165:47 - we can keep going let's just copy and
165:49 - paste this what we just need to do is to
165:51 - change this actual value so let's say we
165:53 - want traffic
165:55 - icon
165:57 - if I hit run you're gonna see that it
166:00 - gives us the traffic icon now there's a
166:03 - list of icons you can see you can just
166:05 - also like you know go over to the Google
166:07 - Icons page and look at the list of icons
166:09 - that they provide so that is basically
166:12 - it's about icons in CSS
166:17 - now we are going to talk more about
166:19 - designing or styling tables in CSS
166:23 - so right now the first thing that I'm
166:25 - going to do is to just create a very
166:27 - basic table so right here I'm actually
166:29 - going to get rid of all of this we don't
166:32 - need all of this for now
166:34 - and also of this
166:37 - so right here I just want to create a
166:39 - very basic table we've done this in the
166:41 - HTML section of this course so now we're
166:44 - just going to have table and then we're
166:46 - going to have a TR
166:49 - and in this TR we're going to have the
166:51 - add-in so let's just say name
166:55 - and let's say h so those are the add-ins
166:58 - and now I'm going to have another TR
167:00 - another table row and right here I'm
167:03 - going to have TD which is table data so
167:06 - let's have one name as John
167:09 - and let's say John is you know 15.
167:14 - and then we're going to have one more
167:15 - table row so TR
167:18 - and let's have a TD
167:20 - and let's just say team and let's say
167:23 - team is 19.
167:26 - so now if I run this this is just gonna
167:28 - show me that basic table that we have
167:30 - here name age and all of that
167:33 - as you can see this just looks like at
167:35 - least comprised together we actually
167:37 - want to make it look like an actual
167:39 - table so what we're going to do now the
167:42 - first thing that we want to do is to
167:43 - just make it have like you know some
167:45 - borders so like to have like the lines
167:48 - right here like the way normal table
167:49 - will so for me to do this what you just
167:52 - need to do is to select the table
167:55 - we need to select table we need to
167:57 - select this th which is a table heading
168:01 - and we also need to select the table
168:03 - data so I'm going to come in here and
168:06 - say table
168:07 - I'm going to select the table heading
168:09 - and then the table data so once we
168:12 - select these three what we cannot do is
168:13 - to say border
168:15 - we can specify and say like two pixels
168:18 - should be that thick and we want it to
168:20 - be solid
168:22 - now if I run this you're gonna see that
168:26 - we have this border that is you know two
168:28 - pixels thick and it is solid so that is
168:31 - basically how we can do that
168:33 - now the next thing I want to do is to
168:35 - have a width for it so I'm going to have
168:38 - with and let me say the width is 100
168:41 - and when I run this and say that the
168:43 - width is 100 you're gonna see that it
168:45 - extends all the way to the end of a
168:48 - particular
168:49 - evil
168:51 - it's a particular screen
168:53 - so what I want to do now as you can see
168:55 - it looks weird and the reason why it
168:57 - looks weird is because each one has its
169:00 - own border like this has a square around
169:01 - it this has a rectangle around the
169:03 - rectangle a rectangle I just wanted this
169:06 - to collapse into one line so all of this
169:08 - should just be one line and not double
169:09 - lines on that so what for me to do this
169:12 - what I just need to do is to say brother
169:15 - I can say brother collapse
169:19 - so once I Collapse this
169:24 - and I run it then you're gonna see that
169:28 - everything basically adds one line which
169:32 - is very good and this is what we want so
169:35 - that is you know the first
169:37 - step in actually designing this table so
169:40 - we can make this let's say we want this
169:41 - to be 50 percent
169:46 - so that is basically fifty percent
169:49 - so that is good that is what we want
169:51 - and now we can talk more about the you
169:55 - know actual size of this particular
169:57 - table for example I can say I want th
170:02 - let's say like I just want only this
170:05 - table to have a width of so what I can
170:09 - do now is I can come down and say th
170:14 - you have a height
170:17 - let me say 50 pixels
170:20 - now if I run this
170:24 - you're gonna see that the height of th
170:26 - is now more like brother so I can you
170:28 - know specify all of this by just
170:32 - uniquely using that as a selection like
170:35 - th then I say I ate and I gave it a
170:37 - value of 50px so it is that easy to do
170:40 - and you know that's straightforward now
170:43 - the next thing I can do is to actually
170:45 - talk about this still alignment of you
170:48 - know this particular words like for
170:50 - example I want this to be in the center
170:52 - just the way the editing is the adding
170:54 - as default is in the center but for the
170:56 - daytime I want this to be in Center on
170:58 - the right or wherever what I just need
171:00 - to do is I need to just say TD
171:03 - because these are the data right so I'm
171:06 - gonna say TD and I'm going to say text
171:09 - align
171:12 - and I if I say right you're gonna see
171:15 - that all the text aligns to the right
171:17 - side of that particular table but for it
171:20 - to look good I'm going to say Center
171:22 - once I say Center you're gonna see that
171:24 - that aligns perfectly
171:27 - so I can also you know change this th to
171:31 - a line on the left so everything can
171:32 - line in the left so let's say I want
171:34 - this to be the left I can just you know
171:36 - copy this particular one and come into
171:38 - th and put that in the left so you're
171:40 - going to see now that every single thing
171:42 - is in the left
171:44 - now that is another way of basically
171:47 - doing that now let's say I want there to
171:49 - be spacing between like every one of
171:52 - these like as you can see this is quite
171:54 - congested what I can just do instead of
171:56 - having like increasing the width I can
171:58 - add a pad into it so I can say I can
172:01 - just get rid of this actually and I can
172:03 - say th and TD should have a padding
172:10 - of let me say 10px I'm gonna get rid
172:14 - of this height
172:16 - now if I run this
172:19 - and now I'm going to see that they all
172:20 - have like an equal amount of space with
172:22 - it
172:23 - so that's basically what that does
172:26 - right and that is straightforward
172:28 - because you know it makes the
172:30 - table actually look very good and that
172:33 - is literally one we want
172:36 - so what we can just do now is to also
172:39 - add some like you know something that we
172:42 - can hover over so for example
172:44 - if let's say I want to be able to over
172:46 - Rover this particular line right what I
172:49 - need to do is to come here and say table
172:51 - row and what I mean by over is that when
172:54 - I bring my my mouse on this particular
172:56 - part I want let's say if you show a
172:59 - particular color so it can or if you
173:02 - highlight that particular row so it
173:03 - shows that I am over that so that all of
173:06 - this belongs to table row so what I'm
173:09 - just going to do is to say TR which is
173:10 - table row I'm going to use something
173:13 - different this time I'm going to say
173:15 - column over now when I use colon over
173:17 - whatever I do here is only going to
173:19 - happen whenever my mouse is on top of
173:22 - that particular element that has been
173:23 - selected so what this means now is that
173:25 - if I say I want the background color
173:29 - of this TR TB let's say blue
173:35 - now this is only going to happen it's
173:37 - only going to be true only going to
173:38 - happen when my mouse is on it now let me
173:41 - run this and show you what that is going
173:42 - to do
173:43 - so now when you see that my mouse is on
173:45 - it you can see that the background color
173:46 - change to Blue now this is only true
173:49 - when you know my mouse is over it so
173:52 - that is you know a very good one also
173:54 - because it allows you to easily look at
173:57 - or easily highlight what you want to do
173:59 - on the table
174:00 - so this is basically
174:01 - uh the basic way or the simple way of
174:04 - Designing tables using CSS
174:09 - now we're going to be looking at the
174:11 - display property in CSS now what this
174:14 - display property does is that it allows
174:16 - us to you know display a particular
174:18 - element or maybe even hide the element
174:20 - or even remove the element from the web
174:23 - page but the code is still present for
174:26 - example I can get rid of this table and
174:30 - say display shouldn't show or I can hide
174:32 - it or I can do whatever I want to do let
174:34 - me show you what I mean now for example
174:37 - if I come into table right here and I
174:39 - say display
174:42 - should be none
174:44 - if I run this you're going to see that
174:46 - everything right here is not going to
174:47 - show no more and the reason why this
174:49 - doesn't show is just because we've said
174:52 - display should be none
174:55 - now they also many other things I can do
174:58 - like I can set visibility to be hidden
175:01 - so if I say visibility
175:07 - should be eating
175:09 - now instead of this not displaying it
175:11 - also doesn't display but it is still
175:13 - right there now what I mean by it is
175:15 - still right there is if I come in here
175:17 - unless I have an H1 tag
175:21 - and I say I now if I run this you're
175:24 - gonna see that this particular H1 tag
175:27 - starts from here and the reason why the
175:29 - H1 stack starts from here and not here
175:31 - is because we set the visibility of that
175:33 - table to be known that means it is still
175:35 - present there but it's not showing that
175:38 - is why H1 stack starts from here but if
175:41 - I said display to be none
175:43 - display
175:45 - if I set it to be known this basically
175:48 - means remove that particular
175:50 - one from remove that particular table or
175:53 - whatever element from this particular
175:55 - web page so as you can now see how it
175:57 - starts from the top so that's the major
175:59 - difference between display none and
176:02 - visibility hidden none allows us to
176:06 - remove that element entirely from the
176:08 - web page visibility still lets the
176:10 - element be present in the web page but
176:12 - not show
176:15 - now we're going to talk about
176:16 - combinators and CSS now a combinator is
176:20 - something that basically explains like
176:21 - or shows you the relationship between
176:24 - different selectors
176:25 - now there are different combinators and
176:28 - I'm going to explain everything right
176:30 - now
176:31 - so I want to get rid of all of this
176:35 - I'm just going to get rid of all of that
176:37 - and also get rid of the old table
176:40 - now let's say for example we have this
176:43 - H1 tag and in this H1 tag we now have a
176:48 - so let me just say
176:50 - I
176:54 - and within this H1 tag let's say I have
176:56 - another B tag
176:58 - that says a
177:00 - so this B is inside this H1 tag now what
177:04 - I can just do is to say I'm gonna use
177:06 - something called The Descendant selector
177:08 - so if I now say H1 and I leave a space
177:12 - and say B what this is going to do is
177:14 - that it's going to select
177:16 - all the B elements inside an H1 tag and
177:20 - whatever we do here is going to be done
177:22 - to that so if I say color should be red
177:25 - now you're gonna see that this a is
177:28 - going to be red
177:30 - now as you can see a is red now what
177:33 - this is is a descender selector which
177:34 - means that it selects all the elements
177:37 - that are inside this initial element so
177:39 - let me select all the B element that
177:41 - inside H1 now if I create another B
177:43 - element let's say I just create another
177:45 - one like that if I run this because that
177:47 - b element is still there you can see
177:50 - that it says that and imagine I have a p
177:54 - element right
177:56 - and inside that P element and I have a b
177:58 - element that says
178:01 - what's up
178:02 - and once I run it because B element is
178:06 - still under this H1 element right it's
178:10 - still a descendant of it it's still
178:12 - gonna affect it and it's gonna be red
178:14 - for now if we use a child selector it's
178:17 - going to be different so what we just
178:18 - used now was a descendant selector but
178:21 - what we want to talk about now is a
178:22 - chart selector now if I say H1 greater
178:25 - than b this means that it's going to
178:28 - select all the elements that is a
178:30 - children or there's a child or the B
178:32 - element as a child of H1 so if I run it
178:36 - you're going to see one difference and
178:37 - I'm going to explain why you can now see
178:39 - that this is normal red this is black
178:41 - now the reason why is because if I come
178:43 - in here it's looking for only the B
178:45 - element that are children of H1 even
178:48 - though this B element inside this p and
178:51 - let me just make this like this so you
178:52 - can see it better even though this B
178:54 - element
178:55 - that is within this p is still under
178:58 - this H1 but because it is not a direct
179:00 - child of this H1 it's not going to be
179:03 - seen as a child selector
179:05 - so if I have let's say I have one B
179:08 - outside this P after a that b is going
179:12 - to be that b element is going to be red
179:14 - as you can see but because this bead is
179:16 - not a child of H1 is a child of p and p
179:19 - is a child of H1 that's why this is
179:23 - still black now that's the main
179:25 - difference between a chart selector and
179:26 - a Depend and a descendant selector
179:29 - now the next one is an adjacent sibling
179:31 - selector now this just basically selects
179:34 - if I'm going to use plus to note this
179:36 - but this selects all the adjacent B
179:38 - after an H1 if I run this you're gonna
179:42 - see that none of it is red now the
179:45 - reason is because all of this are
179:47 - children of B but they are not really
179:49 - after B so if I come in here now and I
179:52 - paste this so this is adjacent to H1
179:55 - it's not a child of it but it's after H1
179:58 - once I run it you're gonna see that this
180:00 - one now is actually red
180:03 - now the next one I'm going to talk about
180:05 - is General sibling selector so this
180:09 - agency means selector only selects the
180:11 - one that is adjacent to it so if I come
180:14 - here and paste another B and run it
180:16 - you're going to see that what shows
180:17 - under here is not going to be as you can
180:20 - see it is not red this is because it it
180:22 - only takes the adjacent one to read and
180:24 - this is the only adjacent one to H1 this
180:27 - one is adjacent to B it's not adjacent
180:29 - to H1 but if I use the general simulink
180:33 - selector which is this you write here so
180:38 - we're just gonna get that particular one
180:40 - the there's a sign to select the
180:43 - adjacent simply selector and it is this
180:45 - particular sign right here so once I use
180:48 - this sign this shows that any B that is
180:52 - you know the next day like siblings of
180:55 - H1 is going to be red now once I run it
180:58 - you're going to see that this second one
181:00 - is also red now this is because this
181:02 - second one also come as a sibling to
181:05 - this it's not just only taking for the
181:07 - one adjacent to it it's looking for the
181:08 - one that is close to H1 so those are the
181:11 - major four CSS combinators
181:16 - now we are going to look into building
181:18 - drop down menu
181:19 - so you know normally where you have like
181:22 - an option where you can like over over
181:24 - it and once you come about it you see
181:26 - something that drops down like a menu
181:28 - I'm going to show you how you can build
181:29 - that right now
181:31 - so this is fairly easy what we just need
181:33 - to do right here in the HTML body I'm
181:36 - first of all gonna remove everything in
181:38 - the body and what I just want to do is
181:41 - that I want to create a div class I'm
181:44 - going to create a new div class
181:46 - we talked about what if class were I'm
181:49 - going to create this div class
181:51 - and I'm gonna just have it like that and
181:54 - I'm gonna give you a class of
181:59 - of drop
182:01 - down
182:02 - menu
182:05 - so I gave you a class of drop down menu
182:06 - so this is what I actually want to be
182:09 - dropped down right but right here I want
182:11 - there to be like a button that we are
182:13 - going to over Rover and once we go our
182:15 - mouse goes on it we want this drop down
182:18 - menu to show so yeah we want to have a
182:20 - button so there's a button element that
182:24 - just allows us to have a button
182:25 - basically and right here we can just say
182:27 - drop
182:28 - down
182:31 - menu
182:33 - a button
182:35 - so now we can have a class
182:38 - and we can make this class say drop down
182:40 - drop
182:42 - down
182:44 - button
182:47 - so I just giving this class so we can
182:48 - identify it later in our CSS
182:51 - so now that we have this this is
182:52 - basically the drop down button if I run
182:54 - this let's see what we have you can see
182:56 - that we just have a drop down button
182:58 - normally and this div class we're going
183:00 - to have a basic link so let's just say a
183:06 - let's close it and let's say uh no menu
183:12 - or we can just say list
183:15 - and then we can say
183:17 - for now let's just make it go nowhere so
183:20 - we can just say link to hashtag
183:24 - so we have let's say four different
183:25 - lists if I run this you're gonna now see
183:28 - that we have that button with four
183:31 - different lists right but what I want to
183:33 - do now is I want first of all I want
183:35 - this list to not show and I want to
183:37 - style this button a little bit okay
183:39 - let's take it a step at a time let's
183:41 - first style this button a little bit so
183:43 - what I'm going to do is to come into
183:44 - styles.c access and I'm gonna come here
183:48 - and do this
183:51 - I'm gonna get rid of this
183:54 - and this drop down button because I want
183:57 - to style it I'm going to take that drop
183:59 - down class and I'm gonna say
184:01 - Dot
184:03 - drop down button
184:05 - so I'm going to give you a background
184:07 - color
184:09 - but let me see I give you a background
184:10 - color of blue
184:12 - so now if I run this it should have a
184:14 - background color of blue which is good
184:16 - and I want to give the text color so I
184:19 - want to give the test color white I want
184:21 - the color of the text to shift the white
184:23 - so let's see good and what I'm just
184:26 - gonna do is to say padding just so
184:28 - there's going to be a little bit of
184:29 - space let me give the pattern something
184:31 - like 13 PHX so let's have a colon right
184:35 - here and I'm gonna run this
184:39 - so that is good and what I'm now going
184:41 - to do is to say let me just try to add
184:44 - some font size
184:49 - I'm going to say 16
184:51 - pictures
184:54 - so I just gave that the font size so now
184:57 - it looks a little bit bigger and what I
184:59 - can just deny is to say border
185:03 - none now the reason why I'm saying
185:05 - bother known is because as you can see
185:06 - on this particular button it has this
185:09 - border that wraps it around but I want
185:11 - to remove that so that's why I say
185:13 - border none if I run this we shouldn't
185:15 - see any border no more which is good and
185:17 - now I want to say cursor
185:20 - now on the cursor to be pointer
185:24 - so we're going to run that cursor
185:26 - pointer right
185:27 - good so that means when we come on this
185:30 - the cursor is going to change to a
185:32 - pointer as you can see that and icon is
185:34 - showing when we come on this so we've
185:36 - done we've designed this the way we want
185:38 - it to be the next thing I'm going to do
185:40 - is to actually now come on this list I
185:43 - want you to First be a list and then I
185:46 - want it to not show until my mouse comes
185:49 - over this particular button now let's go
185:51 - ahead and do that so what we just need
185:53 - to do is to let me copy this drop down
185:56 - menu first so yeah I'm gonna say
186:00 - dot drop down menu
186:03 - and first of all
186:05 - I'm going to say display
186:08 - since I don't want to display it I'm
186:10 - going to say display equals none but I'm
186:11 - going to leave that blank for now
186:12 - because I want to see the changes I'm
186:14 - making so let me say the position
186:17 - is absolute
186:22 - and once you say position absolute we
186:24 - can then let's run this first of all
186:28 - so let's make sure this is this and then
186:31 - let's say we give you a background color
186:35 - probably say something like
186:38 - blue but this time around let's give it
186:44 - light blue
186:46 - if I run this you should see that that
186:49 - has a background color of light blue and
186:51 - what I also want to give it is a minimum
186:54 - weight we talked about this
186:56 - I'm going to say mean wait
187:00 - and when we give it the mean mode we're
187:03 - going to say something I want 50 pixels
187:07 - and then what we are just gonna do is to
187:10 - let's just run this
187:14 - okay great so what we can now do now is
187:16 - to say the for the list under this we're
187:20 - gonna say dot drop down menu
187:22 - a
187:23 - you want to say for the list under this
187:25 - the a tag
187:28 - we want the color to be
187:31 - black
187:34 - we're going to give you a padding
187:37 - of something like let's say 11 pixels
187:41 - and 15 PX
187:44 - let's give a text decoration of none
187:46 - because it is a link it's going to have
187:48 - this underlying text decoration so let's
187:50 - make sure the text decoration
187:53 - is none
187:57 - once we say that we can say display
188:01 - so we can give the display value block
188:06 - now if we run this this should you know
188:08 - show the changes as you can see now it's
188:11 - been listed this way which is what we
188:13 - want and then we gave you a text
188:14 - decoration of none so now it's still a
188:17 - link sometimes I can still click it and
188:19 - it's going to take me somewhere as you
188:20 - can see but it just doesn't show that
188:22 - underline no more which is what we want
188:24 - so now we want to have an over so what
188:27 - we want to do is to say that
188:31 - the drop down content
188:37 - right we're going to say a
188:43 - but what we want to do instead of just
188:44 - saying a directly we want to say a over
188:48 - I'm gonna do this and say over and then
188:51 - I'm going to give it a background color
188:55 - so by giving this a particular
188:57 - background color when you know we over
188:59 - over every single list on it so I'm just
189:02 - going to give a background color of you
189:04 - know let's say white
189:05 - let's see how that looks like if I run
189:08 - this
189:09 - and I come over you can see that when I
189:11 - hover over each of it now it turns White
189:14 - so what I'm now going to do is that I
189:17 - want this to only show so first of all
189:19 - let me make the display of this let me
189:20 - remove that comment and make the display
189:22 - of this none so now you can see that
189:26 - let's wait for it the list is not show
189:28 - me no more but I want this list to show
189:30 - only when we over on this so what I'm
189:33 - going to do is to say
189:36 - Dot
189:37 - this drop down right here which we
189:40 - already had from the beginning so what
189:43 - I'm just gonna do is to say that
189:45 - drop down
189:50 - and we're gonna say
189:53 - colon
189:54 - so instead of saying this we're going to
189:57 - say over
190:02 - and then we're gonna say dot this drop
190:06 - button
190:15 - what we want to do now is to just
190:17 - basically okay so the first thing that
190:19 - we actually need to do is to say the
190:22 - drop down over we're going to say the
190:24 - drop down menu so this whole menu we
190:27 - want the display to be blocked
190:30 - right so we're gonna say
190:34 - display
190:36 - block
190:39 - now when we run this
190:41 - what we want is that when we hover over
190:43 - this this you have a display of block
190:45 - but this doesn't have a display of
190:48 - blocks so the reason why this doesn't
190:50 - have a display of block is simply
190:52 - because
190:54 - when we come in here we want to have
190:56 - this div class to be
191:00 - so we have to discard there's a class of
191:02 - drop down menu we actually want Let's
191:04 - see we want all of this to be wrapped in
191:07 - a div class so let's say we cut all of
191:08 - this and say div right
191:12 - and then we say this is like class
191:15 - and then we just say equals you know
191:18 - let's say drop down
191:21 - now since we know we have this drop down
191:23 - here we can just say
191:25 - from drop down DOT over that means all
191:28 - of this uh colon over we want to show
191:31 - drop down menu now let's see what this
191:33 - does so as you can see now when we over
191:35 - on this it basically shows that drop
191:37 - down menu this is literally what we want
191:40 - to happen
191:41 - now what we can do we can just add you
191:43 - know a little bit of sauce on it and say
191:46 - the drop down
191:48 - and when we overrun it
191:50 - we now want to even change the color of
191:53 - this drop down button to maybe something
191:55 - lighter so we can then say
191:58 - Dot
191:59 - the button so the class of the button is
192:03 - drop down button we're going to say dot
192:06 - the button
192:08 - I'm gonna say background
192:11 - color
192:13 - it'll be something like let's see gray
192:15 - let's try it out now when we run this
192:18 - you can now see that we have a when I
192:21 - overrun it the colors change to Gray and
192:23 - we have this basic list right here now
192:25 - that is literally what we want to happen
192:27 - and that is what has happened now we can
192:30 - also you know
192:32 - as you can see everything is basically
192:34 - done successfully but we can just come
192:36 - in here and under this drop down button
192:39 - let's say we just want to add
192:40 - some styling to this drop down class
192:45 - I'm gonna come here and just say that
192:47 - drop down
192:50 - and I'm gonna navigate let's say the
192:52 - position
192:53 - should be relative
192:59 - and let's say the display
193:03 - inline
193:04 - so we talked about this when we were
193:06 - looking into all the different display
193:08 - and all of that in CSS
193:11 - so as you can see everything basically
193:13 - Works successfully right now we can also
193:15 - have this list coming to the you know
193:17 - Center if you want that is you know
193:19 - optional but you can see this is a basic
193:21 - drop down and once we come over this we
193:24 - can basically look at all of this and we
193:27 - can click on it and it takes us to a
193:29 - particular link
193:30 - so as you can see all of that work
193:32 - successfully does how to build a simple
193:34 - drop down with CSS
193:37 - now let's look into attribute selectors
193:39 - in CSS
193:41 - so let's get rid of all of this
193:44 - and I'm also going to get rid of all of
193:46 - this
193:48 - and let's say I have
193:50 - let's see a div class
193:53 - a div element that has a class
193:56 - of let's say
193:58 - test
194:00 - and in here we then have a p
194:02 - that says I
194:04 - so if I then run this we just have a
194:06 - basic diff closer as a p that says I
194:08 - that's that so right here let's say we
194:11 - want to change something to this old div
194:12 - class we instead of selecting it we're
194:14 - using its element name we can select it
194:17 - using its class name
194:19 - so what we can do is to come in here now
194:21 - and we can just simply say
194:24 - div
194:27 - so it's going to say any div that has an
194:29 - attribute name class
194:31 - then we want to change the color
194:34 - to red
194:36 - so if I run this you're going to see
194:38 - that the color of this changes to Red
194:40 - now this is because we selected the div
194:42 - that has an attribute of class
194:44 - so that is a very basic way to actually
194:47 - select an attribute but again an element
194:50 - by an attribute but let's say that you
194:53 - want to select with the exact value for
194:56 - example let's say I want to select the
194:58 - element that has a div class now I have
195:01 - a div element and it has an attribute
195:04 - right with a value of test what I need
195:07 - to do is to say div and then I'm going
195:10 - to say class
195:13 - equals I'm going to write the value so
195:16 - this is still going to be I right
195:19 - and it's going to have the red this is
195:21 - because it's going to look for a div
195:22 - class with a div element with a class
195:25 - named test so if you come in here we're
195:28 - going to see that we have a div element
195:29 - with a class name test
195:31 - imagine I just removed T and I say test
195:33 - now this is not going to be red no more
195:35 - it's just going to be black because that
195:37 - is not true for this particular
195:39 - condition
195:40 - so that is a basic way of you know
195:42 - selecting with the value so that's how
195:45 - to use attribute selector in CSS
195:52 - now that you know the basics of HTML and
195:54 - CSS I'm going to teach you how to code
195:56 - in JavaScript you're about to learn all
195:59 - the basics of JavaScript programming by
196:02 - coding an RPG game line by line this way
196:07 - of learning JavaScript will help you
196:09 - understand better how everything works
196:11 - together so if you're following along
196:13 - you'll be able to record you'll be able
196:15 - to code each line right before I do
196:18 - based on my instructions there is some
196:21 - starter code so go to the link in the
196:23 - description and it should open up just
196:25 - like this and then you can Fork the
196:28 - rebel this will give you my stutter code
196:30 - so just click Fork Rebel
196:32 - and then you'll have to sign up or log
196:34 - in if you haven't already
196:36 - so this is the starter code for the RPG
196:39 - I've already provided the HTML and CSS
196:42 - and we're now going to create the
196:44 - JavaScript so let's look what the
196:46 - starter code looks like so when it's
196:48 - loaded in the browser it looks like this
196:50 - so you can see it's a text-based RPG and
196:53 - it will give you a description of what's
196:55 - happening right here and then you'll
196:57 - have a few different options and these
196:59 - buttons here and it's going to keep
197:00 - track of your experience points your
197:03 - health and your Co your gold now right
197:06 - now none of these buttons do anything we
197:08 - still have to create that and all this
197:11 - is just hard coded right now so you can
197:13 - see in the HTML we've already learned
197:16 - about how to set up an HTML page so a
197:19 - lot of this should look familiar to you
197:21 - so you can see we have a div full of the
197:24 - stats at this that's this top div and
197:27 - then we have a div for the controls
197:29 - those are these controls here and then
197:31 - we have
197:33 - this special one monster stats and and
197:36 - this is not showing up yet because we're
197:39 - using CSS to hide that for now and we
197:43 - are we're also we're ex basically hiding
197:45 - this whole section the whole monster
197:46 - stats section and uh because that will
197:50 - only appear if you're fighting a monster
197:52 - and then we have our main text here and
197:55 - you can see
197:56 - um we have all these elements of the
197:58 - page but nothing is happening yet
198:01 - because we haven't created our
198:02 - JavaScript but let's look at the CSS
198:04 - really quick so this is also provided
198:06 - and it's basically just styling the page
198:10 - how you can see it and one thing to look
198:12 - at is the monster stats which I already
198:14 - talked about currently it's set as
198:16 - display none it's only going to show the
198:19 - monster stats if you're fighting a
198:21 - monster but we're not yet fighting a
198:23 - monster we haven't even implemented that
198:26 - feature of the game yet so now we'll go
198:28 - over to our Javascript file so if you
198:32 - want to just kind of explore the HTML
198:33 - and CSS a little more to understand that
198:36 - you can and but we're now going to code
198:38 - this game from scratch and you are going
198:41 - to code the game step by step based on
198:44 - my instructions so I'm going to just
198:46 - close this section here I will zoom in
198:50 - just a little more so you can see the
198:51 - code a little better so the first thing
198:53 - I'm going to have you do is create a
198:55 - variable but first let me show you how
198:56 - to do that I'm going to do VAR XB equals
199:00 - zero and we'll zoom in one more time and
199:04 - I can just put a semicolon here so to
199:07 - keep track of the player's experience
199:09 - points we've declared a variable called
199:11 - XB and then we've assigned it to the
199:15 - starting value of zero so I want you to
199:19 - follow this example and create another
199:21 - variable to keep track of health and
199:24 - start it at 100.
199:28 - so hopefully you're following along
199:29 - you're trying it before I show you so
199:31 - now I'm going to show you VAR health
199:34 - equals 100.
199:37 - and so you can see we follow the same
199:40 - pattern so this is so we say it's a
199:43 - variable with VAR then we say the
199:45 - variable name and then we assign it with
199:47 - the equal sign and then this is the
199:49 - value that we're assigning and then the
199:51 - semicolon here in JavaScript semicolons
199:54 - are optional so you can use a semicolon
199:57 - to signify that it's at the end of a
200:00 - line but you don't have to do it but for
200:03 - now we're going to use semicolons so now
200:06 - now that you have the pattern down see
200:08 - if you can create another variable
200:09 - called gold and set it to 50.
200:15 - okay now we're going to create another
200:16 - variable and this is going to be called
200:18 - current weapon and we're going to set to
200:21 - zero but when a name has two words the
200:24 - convention is to use what's called Lower
200:27 - camel case which is how you do is the
200:30 - first word is all lowercase and then the
200:32 - first letter of every preceding word is
200:34 - uppercased
200:36 - so we'll do current so we'll do VAR
200:39 - current weapon
200:42 - equals zero
200:45 - so we've been declaring all our
200:47 - variables with VAR
200:50 - however in modern JavaScript it's better
200:52 - to use let instead of VAR you can
200:55 - actually there's three ways to to
200:57 - declare a variable you can use VAR let
200:59 - or const it's better to use let instead
201:03 - of VAR because it fixes a number of
201:04 - unusual behaviors with VAR that make it
201:06 - difficult to reason about so let's
201:08 - change all the vars to let and one quick
201:11 - way to do that in replit is I can
201:15 - highlight the first VAR and either do
201:17 - command or control D to highlight the
201:22 - next and every time I press command or
201:24 - control D it highlights the next
201:25 - instance of VAR and now I'm actually
201:28 - using multiple cursors and I can just
201:30 - type in all at once so I change them all
201:34 - to let now let's declare a variable
201:36 - without initializing it so in every one
201:38 - of these examples we've initialized the
201:40 - variable that's this part where we set
201:42 - it to equal something but you can create
201:43 - a if you just don't put the equal number
201:46 - or equal value you can declare it
201:49 - without initial using it so using the
201:52 - let keyword let's declare a variable
201:53 - called fighting but not set it equal to
201:56 - anything so it's just like this let
201:58 - fighting
202:00 - now we'll do the same thing with
202:02 - variables for Monster Health and
202:04 - inventory it's common to just create all
202:07 - your variables up front toward the
202:09 - beginning of your program before you
202:11 - start using them you want to have them
202:13 - declared before you use them later in
202:14 - your program so we'll do let Monster
202:17 - Health
202:19 - and let inventory
202:23 - now let's set the variable inventory to
202:26 - equal a string stick
202:29 - a strings are a group of characters
202:31 - surrounded by quotation marks so we'll
202:34 - do equal string or equal
202:38 - stick and we use double quotation marks
202:42 - but you can also use single quotation
202:44 - marks as long as the quotation marks are
202:46 - the same another thing you can also use
202:48 - back ticks but you just have to make
202:50 - sure that at the beginning and the end
202:52 - are both the same for now we'll just use
202:54 - double quotation marks now right now the
202:58 - inventory is just a single thing a stick
203:00 - but the inventory can store multiple
203:03 - items so we're going to change the value
203:05 - of inventory to be an array with the
203:09 - item stick dagger and sword an array is
203:12 - basically just a a list of different
203:15 - values you can store multiple values in
203:18 - an array and you you create array by
203:20 - putting brackets around the list of
203:23 - values
203:25 - so it's going to be like this so the
203:27 - first item we're going to put the
203:28 - bracket here stick and then we will have
203:32 - dagger
203:33 - and sword
203:37 - and then we do an in bracket there so
203:41 - now we've created an array of three
203:44 - strings
203:45 - now putting three items in this list was
203:47 - just an example so for now let's just
203:49 - start the player with just the stick so
203:52 - we're going to keep this as an array but
203:54 - we only want one item so we're going to
203:56 - delete dagger and sword those items
204:00 - and then later it will give the player
204:03 - an opportunity to add more items to the
204:06 - inventory but it has to start out as an
204:09 - array if we want to add elements to the
204:11 - array in order to update HTML elements
204:14 - on a web page on an HTML page you need
204:17 - to get references to them in your
204:19 - JavaScript code so here's an example
204:22 - this is not the one we're using I'm just
204:24 - giving you this as an example where we
204:27 - can this will get a reference to the
204:30 - HTML element with an ID of L because
204:34 - this is the CSX CSS selector for ID and
204:37 - it's going to have the ID of el and
204:40 - we're going to store that that HTML
204:43 - element in a variable called l
204:46 - what I want you to do is update this to
204:49 - get a reference to the htl the HTML
204:51 - element with the ID of button one and
204:55 - assign it to a variable with the name
204:57 - button one
204:58 - so basically we're just going to do
205:00 - button one and
205:04 - button one let's just look over our HTML
205:07 - really quick so you can see where that
205:08 - is if we go to the HTML and we can see
205:12 - here
205:13 - the button ID of button one that's this
205:15 - one where it says go to store so now
205:17 - we're getting access to this element and
205:19 - we can do things to it like we can
205:21 - change the text in the element or
205:23 - basically do whatever we want using
205:25 - JavaScript once we have a reference to
205:28 - that element so we'll go back to our
205:30 - JavaScript and now what we're going to
205:32 - do is change this let to const so I
205:36 - already told you earlier that you can
205:38 - create a variable with VAR let or const
205:41 - so VAR allows the most changing
205:46 - basically it's so you can basically do
205:49 - anything you want with a VAR later but
205:51 - you may but that could open yourself up
205:54 - to bugs and const it means that it is
205:58 - the least amount of changing once you
206:00 - declare a variable as a const you cannot
206:03 - update it so we do we are going to want
206:06 - to update the XP the health the gold but
206:09 - now once we get access to this button
206:11 - we're never going to you want to update
206:15 - this variable we're not going to assign
206:17 - button one to button two it's always
206:19 - going to be button one so that's why we
206:21 - can use const
206:23 - you may you want to use const anytime
206:26 - you are creating a variable that should
206:28 - never change if the value is never going
206:30 - to change you declare the variable with
206:32 - const because it's a constant so now we
206:36 - want to we want to get access to a bunch
206:37 - of other elements on the website we're
206:39 - going to basically get access to
206:41 - elements with all of these different IDs
206:44 - I'm just going to about to paste it in
206:46 - here but you can give it a try yourself
206:47 - if you want first
206:50 - okay so we got these all pasted in so
206:54 - basically we have access to all the
206:56 - different elements on our website that
206:59 - we want to update using JavaScript so
207:02 - now instead of typing this whole thing
207:05 - in every time document.queryselector and
207:08 - then the ID we can just refer to the
207:12 - variable okay now we're going to make a
207:14 - comment to describe what the next few
207:17 - lines of code will do comments can be
207:20 - written with either two forward slashes
207:23 - or with a multi-line sequence so if
207:26 - you're going to make comment on one line
207:28 - it can just be two forward slashes and
207:30 - you can do comment or if you want to
207:32 - make a multi-line comment you can do
207:34 - slash star at the beginning and star
207:38 - slash at the end and then you can say
207:41 - this is a
207:44 - comment and then you can see that the
207:47 - comment the code editor automatically
207:49 - makes comments gray and because this is
207:52 - a multi-line comma you can see it's all
207:54 - gray here so basically we just want a
207:57 - single comment that's going to say
207:59 - initialize buttons
208:04 - so now this indicates what the next part
208:07 - of code will do
208:08 - so let's designate what the first button
208:10 - in the HTML does by setting the on click
208:14 - property of button one
208:17 - and we're going to set that property to
208:20 - the function name go to store so here's
208:24 - an example of how you would do it for a
208:25 - different button so this is just a
208:28 - generic button and if you want to make
208:30 - the button open up call the function
208:33 - open program you could do it like this
208:35 - but we're trying to make it so button
208:37 - one will call the go store function
208:40 - which is a function we'll create later
208:42 - so basically it's going to be button one
208:44 - and just go store
208:47 - and so we can see that the button one
208:49 - already says go to store so now when we
208:52 - click the button one it's going to call
208:54 - this function which is going to make our
208:57 - game go to the store in the game now
208:59 - we're just going to follow the same
209:00 - example to set the on click property of
209:04 - button 2 and button 3 to be go cave and
209:08 - fight dragon
209:10 - so I can just actually copy this line
209:13 - paste it in here so this will be button
209:15 - two button three and it'll be go cave
209:22 - and fight dragon
209:27 - now we're going to create a function so
209:29 - we already made it so these functions
209:30 - will be called when you click the
209:33 - buttons but let's now create these
209:36 - functions that are called now functions
209:38 - are are just a group of a section of
209:41 - code that you can run over and over
209:44 - again every time you call that function
209:47 - so it's a way to repeat easily repeat
209:50 - code so every time that function is
209:52 - called it it just runs all those lines
209:54 - of code in that function so let me show
209:57 - you how you would just create a generic
209:59 - function so see you always start with
210:01 - the word the keyword function and then
210:04 - you do a space and then you put the
210:05 - function name which can be anything and
210:07 - you're always going to have two brackets
210:09 - or two parentheses and then these curly
210:12 - brackets and inside the curly brackets
210:15 - are where you put the code that's going
210:18 - to run when you call the function so
210:21 - right now instead of creating the
210:23 - function called function name we're
210:25 - going to create a function called ghost
210:27 - color so that's pretty simple you just
210:29 - do go store that's what it's called now
210:32 - okay now let's make this function do
210:34 - something we're just going to
210:37 - basically do some example code really
210:38 - quick but we're going to make the go
210:40 - store function output the message going
210:43 - to store to the web console so basically
210:47 - we do console.log and then in
210:50 - parentheses we put the string going to
210:53 - store just like this
210:55 - console.log so it's going to log it to
210:57 - the web console going to store
211:02 - and
211:03 - that's it now we have something that
211:05 - this function will do and now we've
211:07 - actually done enough to to test our
211:10 - program out so now when we click go to
211:13 - store it's going to put going to store
211:16 - in the console Now where's the console
211:19 - it's not this this isn't the console
211:21 - this is part of the website so to get to
211:24 - the console you can do it either from
211:26 - your browser's Dev tools or write in
211:29 - replit we can click this this um thing
211:33 - this uh this wrench here toggle
211:36 - developer tools and now down here we
211:38 - have our console so click the Run button
211:42 - and now we we do get the this goat cave
211:45 - is not defined because we haven't
211:46 - created it yet but we still should it
211:48 - still should work I'll click go to store
211:50 - and it says I'm going to store right in
211:53 - the console
211:54 - so let's create a go k function that
211:57 - will console oh that will log to the
211:59 - console going to Cape
212:01 - so I can just copy this and just paste
212:05 - and put go cave
212:07 - going to cave
212:09 - and then we'll just create a fight
212:11 - Dragon function that will say fighting
212:13 - dragon
212:14 - so
212:16 - we'll just print paste in another one
212:19 - here and this will be called fight
212:21 - dragon
212:23 - and it'll say
212:25 - fighting dragon and now we should be
212:29 - able to run this and we don't get an
212:31 - error down here because all the
212:33 - functions are defined so go to store
212:36 - go to cave
212:37 - and fight Dragon we can see in the
212:40 - console those are appearing
212:42 - okay well let's do some refactoring
212:44 - refactoring is when you change code to
212:47 - improve code or make it better that
212:50 - you've already created so we're going to
212:51 - change the go to store function this was
212:54 - just kind of to demo it we're not
212:56 - actually going to
212:58 - console going to store and we're not
213:01 - going to log that to the console because
213:03 - when people are playing the game they
213:04 - won't actually be seeing the console so
213:07 - when we when a player clicks the go to
213:09 - store button the buttons and text in the
213:12 - game should change so what's in these
213:14 - buttons to change and what's in this
213:16 - text up here it should tell you what's
213:18 - happening at the store right down here
213:21 - so we're going to remove the console.log
213:24 - we're going to remove this and we're
213:27 - going to add a new line of code inside
213:29 - the function that updates the text of
213:32 - button one so it says I10 health for 10
213:36 - gold
213:37 - so I'm gonna
213:38 - delete that and then let me just
213:41 - show a quick example we're not going to
213:43 - use this one but this is how you would
213:45 - update the text of a button button dot
213:48 - enter text and then set what it equals
213:50 - and we're going to make the button one
213:52 - say I can go by 10 health for 10 gold so
213:56 - let's change this to button one and then
213:58 - we just change the text in here the
214:00 - inner text is now going to be by 10
214:03 - health and then we'll just put it in
214:05 - parentheses 10 gold
214:07 - now we also want the text of button 2 to
214:10 - say by weapon 30 gold and the the text
214:14 - of button three to say go to Town Square
214:16 - so basically you're going to go back to
214:18 - where you began
214:20 - so I can just copy this
214:23 - and then we'll do button two button
214:26 - three
214:28 - and then this will say by weapon
214:33 - for 30 gold
214:34 - and
214:38 - go to Town Square
214:42 - so now that the text on these buttons
214:47 - have changed the on click properties on
214:50 - the button should change so inside the
214:53 - go store function we'll update the on
214:55 - click property of all three buttons the
214:58 - new function should be by Health by
215:00 - weapon and go town
215:02 - and you should already know enough right
215:05 - now to be able to do that all on your
215:07 - own
215:08 - but basically I can just copy the the
215:12 - initializing these buttons
215:14 - and then
215:16 - put it here now see how it's not
215:18 - indented the same amount
215:20 - um now indent indenting is actually
215:22 - optional in JavaScript it's just to make
215:24 - sure your code is more readable but it's
215:27 - still good to do any time something's in
215:29 - a block of code and these curly braces
215:31 - you want to indent it the same amount
215:33 - even though it doesn't actually impact
215:35 - how your code's working so I'm going to
215:37 - highlight everything and now I can just
215:39 - press Tab and we'll indent everything at
215:41 - once so the button one is now going to
215:45 - say by health
215:48 - uh button two or is not going to go to
215:51 - not say
215:52 - um
215:53 - by weapon
215:55 - this is the function that's going to be
215:57 - called and then go down
216:00 - now we're changing the inner text of the
216:04 - buttons but we also want to change the
216:06 - inner text of this section here that's
216:08 - the the property this is the has the ID
216:11 - of text and we want to say you enter the
216:14 - store
216:17 - so I'm just going to copy this again
216:19 - and just stay text
216:25 - you enter the store
216:28 - and now let's create three new empty
216:30 - functions called buy Health by weapon
216:32 - and go town
216:37 - so I'm going to create a function
216:39 - you have to use the keyword function
216:44 - by health
216:45 - parentheses and that's just going to be
216:47 - an empty function and then we'll do
216:51 - another one and another one so by weapon
216:57 - and go town
217:00 - and at this point we can test it out so
217:04 - if I click go store
217:06 - I'm going to just
217:09 - move this here so you can the buttons
217:11 - still stay in a row here so you enter
217:13 - the store
217:15 - and unfortunately we can't go back to
217:17 - the town yet but we were able to enter
217:21 - the store if I refresh this I can try it
217:22 - again
217:23 - go store you enter the store
217:26 - okay so every time you click a button
217:29 - it's basically going to do all these
217:32 - things it's going to update the button
217:33 - One update button two update button
217:34 - three and then change the functions for
217:36 - the buttons and it's going to put some
217:38 - new text here so we're gonna
217:42 - um move this go town function to be the
217:44 - first function and then we're just going
217:46 - to copy all this and put it in that
217:48 - function
217:50 - so I'm going to just do command X or
217:53 - Ctrl X to cut it and then we'll put it
217:56 - right here command or control V and this
217:59 - time I'll do control or command C and
218:02 - then I'm just going to paste it
218:05 - and basically when you go to the town uh
218:08 - we want all this to be what we started
218:11 - off with all the text we started off
218:13 - with is what's in the town and all the
218:17 - click the on clicks we started off with
218:20 - was what we want the town to have so I'm
218:23 - just going to just
218:25 - peace and update the updated code with
218:28 - go to store go to Cave fight dragon and
218:30 - you can see these three are the same as
218:32 - these three but instead of the text
218:35 - being you enter the store now we're
218:37 - going to say you are in the Town Square
218:38 - you see a sign that says store
218:46 - you see a sign that says store well this
218:48 - should be actually in quotation marks
218:50 - because it's what it says so let's put
218:53 - quotation marks around the word store
218:57 - so now we can see based on what
219:00 - uh the color of the this that
219:03 - something's wrong
219:04 - um so usually strings are this brownish
219:07 - color but it's switching the black and
219:10 - we have these squiggler lines because
219:11 - you can't put quotation marks inside a
219:16 - string well actually you can't I'm going
219:18 - to show you how if we put a backslash
219:20 - before each one
219:22 - you can see now it all is the right
219:25 - color so putting this backslash this is
219:28 - called escaping and it's signifying that
219:31 - the next character after that slash is
219:34 - not supposed to be it's not supposed to
219:37 - be the end of the string it's supposed
219:39 - to be literally rendered so there's
219:42 - quite a few different special characters
219:44 - that you can you that you can put in
219:46 - with escaping the character like that
219:50 - so you may have noticed that there's
219:51 - some repetition in our code so if we
219:54 - look at this all this code looks very
219:56 - similar to all this code
219:58 - and when you have repetition and code
220:00 - it's a sign that you need a new function
220:03 - so above the go town function let's add
220:07 - another function we'll create an empty
220:09 - function called update
220:12 - this time the function should take a
220:13 - parameter named location so data can be
220:17 - passed into the function when it's
220:18 - called a parameter is a variable that
220:21 - you just put in the parentheses so let
220:22 - me show you what that looks like
220:26 - so we have the function called update
220:29 - and this is the parameter we can now
220:31 - pass in when we call the function we can
220:34 - pass in the location so let's create a
220:37 - new const here called locations and
220:40 - we're going to set it equal to an empty
220:41 - array
220:47 - this will be used to store all the data
220:49 - for the locations in the game now arrays
220:52 - can store any data type including
220:54 - objects objects are similar to arrays
220:57 - except that instead of using indexes to
221:00 - access and modify their data you access
221:02 - the data in objects through what are
221:04 - called properties so inside the
221:07 - locations array We'll add an empty
221:09 - object using curly braces
221:12 - so basically we just put these two curly
221:15 - braces and here so now inside the array
221:18 - and there's one item which is this empty
221:21 - object and the object is going to
221:23 - consist of key value pairs
221:26 - so let me just give you another example
221:27 - of an object so here is an an array
221:32 - that has an object that are curly braces
221:35 - and there's one key value pair the name
221:37 - is the key the value is
221:39 - Quincy Larson so we're not going to use
221:42 - this this is just an example so here now
221:45 - we're going to create a property called
221:47 - name or the property is also another
221:50 - name for a key so the property name
221:52 - called name with the value of town
221:54 - square
221:56 - so we'll just
221:58 - put these onto new lines like in the
222:00 - other example we saw and then I will do
222:03 - name
222:06 - Town Square
222:08 - so now after the name property we're
222:10 - going to put a comma and then on the
222:13 - next line we're going to add a property
222:14 - named button text that has a value of an
222:17 - empty array but since button text is two
222:20 - words instead of a name is this one
222:22 - where we're going to need to put
222:23 - quotation marks around it so I hope
222:25 - you're following along and you've tried
222:26 - this so as just as a reminder you should
222:29 - be trying everything right before I show
222:31 - you and that will help you learn this on
222:33 - your own so we're going to do button
222:35 - text and then we're going to just set
222:37 - that to
222:39 - and empty array
222:43 - oh and like I said we do need a comma
222:45 - here so each element in the object each
222:49 - uh each key value pair and the object is
222:52 - separated by a comma so we have two two
222:54 - elements in this object
222:57 - okay so now this button text inside this
223:00 - array we're going to make it a a list of
223:03 - three strings we're gonna there's gonna
223:04 - be three elements inside the array and
223:07 - it's going to be the button text that we
223:10 - see in the go town function go to store
223:13 - go to cave and fight dragon
223:17 - so I'll just actually paste that in
223:19 - there just like that and now we're going
223:21 - to add another property in the object
223:23 - with the name button functions and the
223:25 - value should be an array containing the
223:27 - three on click functions the ghost or go
223:30 - k fight dragon and you see these aren't
223:32 - strings so they will not be strings in
223:35 - the array either
223:37 - so it should look just like that now
223:39 - I'll just add one final property called
223:41 - text and it will be the text from here
223:44 - you are in the town you see a sign that
223:45 - says store
223:47 - just like that
223:49 - the locations array currently has one
223:51 - element which is an object
223:54 - within the array and after the object's
223:57 - final curly brace will add a comma and
224:01 - on the next line within the array We'll
224:03 - add another object with all the same
224:05 - properties as the first object we'll
224:08 - keep the property names the same on the
224:09 - second object but change all the
224:12 - property values to the information from
224:15 - the go store function
224:19 - and we'll set the property name to store
224:23 - so I'll just go up here and I'll just
224:25 - paste it in to make it a little quicker
224:27 - here so now we have an element in this
224:30 - array that's an object containing all
224:32 - the information from the go store
224:33 - function now we can consolidate the code
224:36 - inside the Gotan and go store functions
224:38 - so we'll copy the code inside the Gotan
224:40 - function and paste it in the update
224:43 - function then we'll delete all the code
224:45 - inside the go town and go store
224:46 - functions
224:48 - so we're going to come down here so
224:50 - here's where we're going to copy that
224:52 - and put it right in the update function
224:55 - and then we don't need this code here
224:58 - now
225:01 - and then we don't need
225:03 - this code
225:07 - okay so instead of assigning the inner
225:11 - text and the the on click like we're
225:13 - doing now
225:15 - the update function will now use data
225:17 - from the location that's passed into it
225:20 - First Data needs to be passed into the
225:22 - update function so inside the go town
225:26 - function we'll call the update function
225:29 - so to call a function let me just put
225:31 - the name and then
225:34 - parentheses after it so we now have
225:37 - called the update function so when you
225:39 - call the go town function it will now
225:41 - call the update function and we're not
225:44 - just going to call the function when we
225:45 - call the function we need to pass in an
225:47 - argument see it accepts a location when
225:50 - we call the function we can pass a
225:52 - location so here we're going to pass in
225:54 - the locations array
225:58 - just like that and so this is
226:02 - the locations array right up here
226:05 - so the locations array actually contains
226:08 - two locations the Town Square and the
226:10 - store currently the entire Ray with both
226:13 - locations is being passed into the
226:15 - update function but we just want to pass
226:17 - in the first element of the locations
226:20 - array so we can do that by putting
226:22 - brackets at the end and putting a zero
226:26 - just like this so this is going to pass
226:29 - in the first element in the array
226:30 - because in programming counting starts
226:33 - as at zero so zero is the first element
226:36 - one is the second element two is the
226:39 - third element and so on so when you put
226:43 - the name of an array and then use these
226:45 - brackets and then put a number in those
226:47 - brackets that's how you specify a single
226:50 - element in the array so now that the go
226:53 - down function calls the update function
226:55 - with the first element of the locations
226:57 - array it's time to use that location
226:59 - information to update the inner text and
227:02 - on click properties
227:05 - inside the update function let's change
227:08 - the button one dot enter text this one
227:11 - right here
227:12 - to equal the the button text the the
227:15 - location button text
227:18 - so we can do it like this uh we'll get
227:21 - the we'll use location that's what was
227:23 - passed in and then we'll use brackets
227:26 - just like before but to specify a
227:29 - specific part of the of the object we're
227:34 - going to do just like this see how we
227:36 - have button text we want that button
227:38 - text so that's what we're going to put I
227:40 - just copy that I'm going to paste it in
227:41 - here so the location with brackets
227:44 - button text that's how we access a
227:46 - specific element in an object and you
227:50 - can see this just happens to be an array
227:52 - and we already know how to access a
227:55 - certain element in an array which is the
227:58 - same way we use brackets again and we
228:01 - put the index number in this case index
228:04 - 0. so the location gets us this whole
228:09 - thing
228:10 - and then we put the bracket button text
228:12 - that gets us this and then we put
228:14 - bracket zero that gets us this so we've
228:17 - now accessed the go to store so now
228:20 - let's update these next two items using
228:24 - this same pattern so I'll just paste
228:27 - these in
228:28 - and then we can just do
228:31 - index one element index two so the first
228:35 - second and third element now we can just
228:38 - use the same pattern for the on click of
228:41 - the buttons so I'm just going to paste
228:45 - this in but instead of button text it's
228:47 - going to be button functions so I'll
228:50 - just copy the word functions
228:53 - button functions and it's still going to
228:55 - be 0 again
228:57 - because the first item here so let's
229:00 - update go the go cave
229:02 - fight Dragon zero one
229:05 - two and then finally we'll update the
229:09 - text Dot inner text to also get from
229:11 - locations now there's there's two ways
229:15 - we can do this we've been using bracket
229:17 - location which is just like this
229:18 - location
229:21 - text so we could use this notation but
229:24 - we can also use dot notation so to use
229:27 - dot notation just two ways to do it
229:29 - we'll do dot text so we can do location
229:33 - Dot and then you just put the word here
229:36 - now this only works if it's a single
229:40 - word like this when your key is two
229:45 - words like button functions you have to
229:46 - use bracket notation but for the text we
229:49 - can just use the dot notation okay now
229:52 - we'll just update the go store function
229:54 - and so the code should look basically
229:56 - this same as the go down function except
229:59 - the number zero should be changed to one
230:02 - so let's just do that really quick
230:04 - and then it will be time to test our
230:08 - game
230:09 - so
230:10 - up to locations
230:12 - one
230:14 - and now I'll click run
230:18 - and we should be able to move between
230:20 - the store
230:21 - oh good see it has the information for
230:24 - the buttons we have you enter the store
230:26 - that can go back to the Town Square you
230:28 - are now in the Town Square you see a
230:29 - sign that says store so now we can move
230:32 - between the Town Square and the store if
230:35 - we press these other buttons nothing
230:36 - happens we haven't done that quite yet
230:39 - but this game is starting to work
230:42 - now I'm just going to shrink this a
230:44 - little bit and we're going to add a
230:47 - third object in the locations array
230:53 - and it's going to have the same
230:54 - properties as the other two objects the
230:56 - name will be cave and then the button
230:59 - text is going to be fight slime fight
231:01 - Fang beast and go to Town Square and
231:04 - then the button functions we're going to
231:06 - have some new functions fight slime
231:07 - fight beast and go town and then the
231:10 - text is just going to be you enter the
231:12 - cave you see some monsters
231:15 - so maybe you tried that on your own I'm
231:17 - just going to paste it in here see we
231:20 - have the cave with new button text here
231:22 - and then new button functions a few of
231:25 - these we still have to create and you
231:26 - went to the cave you see some monsters
231:28 - so now we'll just update the
231:31 - go cave function
231:34 - with using our calling your update
231:35 - function and let's create some more
231:37 - empty functions here it was for the
231:39 - fight slime and fight Beast
231:42 - so fight slime
231:47 - so now that the store and Cave locations
231:49 - are complete we'll code the actions at
231:52 - those locations
231:54 - so first we'll do the buy Health
231:55 - function so inside the buy Health
231:57 - function set gold to equal gold minus
232:01 - 10.
232:02 - so it's just like this gold
232:05 - equals gold minus
232:09 - 10. and you can see we're getting the
232:11 - gold from our variable that we've
232:13 - already said we start with 50 gold but
232:16 - when you buy Health we're going to
232:18 - subtract 10 from the gold and if we're
232:21 - subtracting 10 from the gold we need to
232:23 - give some health so let's add 10 to the
232:26 - health
232:30 - so that's pretty straightforward but let
232:32 - me tell you about a quicker way you can
232:35 - do something like this so there's a
232:36 - shorthand way to edit subtract from a
232:38 - variable called compound assignment the
232:42 - long way to add it is like this but
232:44 - there's a short way where you can do
232:48 - Gold Plus minor we can do gold minus
232:53 - equals 10. so let me show you if we just
232:57 - do minus equals 10 that's just the
233:00 - shorthand of subtracting 10 from
233:03 - whatever that value is and assigning the
233:05 - new value to the value so this basically
233:08 - does the same thing as before so let's
233:10 - change this to also use the compound
233:12 - assignment so it's just going to be
233:13 - Health Plus equals 10. so the line that
233:18 - I change this from does the same thing
233:20 - as the line that I change it to okay now
233:22 - that the golden health value variables
233:24 - have been updated we need to update the
233:26 - values displayed on the screen so if we
233:29 - look at what's being displayed here we
233:32 - have health 100 gold 50. well we've
233:35 - changed the variables but it didn't
233:37 - actually change anything on the screen
233:38 - so how can we do that well we can use
233:42 - the we can set the inner text to Gold so
233:46 - for the gold text that inner text let's
233:47 - set to gold and we'll use the same thing
233:49 - for health text so
233:51 - so gold text I enter text equals gold
233:53 - Health textilet text equals health so we
233:56 - can update the text on the screen
233:58 - so what if the player doesn't have
234:00 - enough gold to buy health
234:03 - well let's put the code in this by
234:06 - Health function we're going to put all
234:07 - this code
234:09 - inside an if statement
234:12 - so let me just show you how to do that
234:14 - so I'm going to add an extra line here
234:18 - and it's going to say if
234:22 - and we want to say if condition we'll
234:26 - update that later and then I'm going to
234:28 - put curly braces just like we have the
234:30 - curl it's kind of looks similar to a
234:32 - function where we have something in
234:33 - parentheses and then we have the curly
234:35 - braces I'm going to copy this or I'm
234:37 - going to cut it and then I'm going to
234:42 - put it here let me get the tabs correct
234:47 - okay so this is an if statement so if
234:50 - something is true we haven't specified
234:52 - what we want to be true at though but if
234:54 - something is true then we do all these
234:57 - things right here if this is not true
235:00 - then all this code will be skipped this
235:03 - is called a conditional so it's code
235:06 - that you only want to run in a certain
235:08 - circumstance in this case the
235:11 - circumstance is we want to
235:14 - check if the amount of gold the player
235:16 - has is greater than or equal to 10. so
235:22 - we just have to do gold is greater than
235:27 - or equal to 10.
235:31 - so if this is true if the variable is
235:33 - equal to greater than or equal to 10
235:35 - then we can buy Health if not all this
235:38 - will be skipped and we cannot pay health
235:41 - and you can also do instead of just
235:44 - greater than it can just be instead of
235:46 - greater than or equal to it could be
235:47 - greater than it could be less than and
235:49 - so there's a few different conditional
235:51 - operators that you can use but we're
235:53 - just using greater than or equal to so
235:55 - if you want code to run only if this is
235:59 - false then we can put an else statement
236:03 - so an else statement just like this else
236:06 - and then we put curly braces so any code
236:10 - in these curly braces will run if this
236:13 - is false if it's true we run this code
236:15 - if it's false we run this code
236:18 - so if the player doesn't have enough
236:20 - money to buy Health we'll inform the
236:23 - player we'll set the text I enter text
236:24 - to you do not have enough gold to buy
236:26 - health
236:28 - just like that
236:31 - okay so before we write the code for the
236:35 - buy weapon function we'll use const to
236:38 - create a weapons variable right above
236:41 - the locations array and set it to an
236:44 - empty array so I'm going to go up here
236:46 - we got the locations array and then I'm
236:49 - going to do const
236:51 - weapons
236:53 - equals empty Ray
236:57 - just like in the locations array all the
237:00 - elements in the weapons array will be
237:02 - objects so we'll add four objects to the
237:05 - weapons array each with two properties
237:08 - the properties are name and Power
237:11 - so the first would be should be the name
237:14 - stick with power set to five then dagger
237:17 - with power set to 30 claw hammer with
237:20 - power of 50 and finally soared with
237:23 - power of one hundred
237:25 - so if you do all that it will look like
237:27 - this so we can see we have all the
237:31 - different weapons and just so you know
237:32 - these don't all have to be on different
237:34 - lines this whole thing could actually
237:36 - just be one line of code but spacing
237:40 - things out this way just makes it more
237:42 - easily readable for humans
237:44 - so let's go back down to the buy weapons
237:49 - function and we'll we want to check if
237:52 - gold is greater than or equal to 30.
237:57 - so just like that and we're going to put
238:00 - some code in this if statement if that's
238:01 - true the first thing is we're going to
238:03 - set goal to equal 30 less than its
238:05 - current value so gold
238:09 - minus equal 30.
238:14 - and you can see every once in a while I
238:15 - forget the semicolons and it is there
238:19 - they are optional it's just usually
238:22 - people just use always use semicolons or
238:24 - never use semicolons so if we go back up
238:27 - to the top we can see that the value of
238:28 - current weapon
238:30 - uh is going to correspond to an index in
238:33 - the weapons array you start with the
238:36 - weapon at index zero that's stick
238:39 - so let's go back down to my weapon
238:43 - and the player starts with a stick
238:45 - but in the by weapons function we want
238:49 - to add one to current weapon since the
238:52 - user is buying the next weapon in the
238:55 - weapons array
238:58 - so we just do current
239:00 - weapon
239:03 - plus equals one
239:07 - oh and I this was supposed to be an
239:09 - equal signs that you probably heard me
239:10 - say it and you probably noticed but yeah
239:12 - minus equal 30.
239:14 - so just how there was a shortcut when we
239:17 - at first we did gold equals gold minus
239:20 - 30 and then we did a shortcut to do gold
239:22 - minus equals 30.
239:25 - since it's so common to want to
239:27 - increment by one or
239:30 - decrement by one so a I want to subtract
239:32 - one there's a shortcut just for doing
239:35 - that so whenever you want to do current
239:37 - weapon plus equals one or current weapon
239:40 - equals current weapon plus one here's
239:42 - the shortcut just current weapon plus
239:44 - plus
239:45 - so doing plus plus just adds one to the
239:48 - current weapon and now we'll update the
239:51 - intertext property of gold text and text
239:53 - text is going to equal you now have a
239:56 - new weapon
239:57 - so it should just look like this
240:01 - now let's tell the player what weapon
240:03 - they bought so in between the two lines
240:06 - that we just wrote in between these two
240:08 - we're going to add a new line we're
240:12 - going to use let to initialize a new
240:14 - variable called new weapon and set new
240:17 - weapon to equal
240:19 - weapons so new
240:22 - let
240:23 - new weapon
240:26 - equals weapons so right now we're just
240:29 - making it equal the entire array but now
240:33 - we're going to add brackets so we can
240:35 - get to an individual weapon and we're
240:37 - going to set it to the current weapon so
240:40 - instead of just putting a number here we
240:43 - can put a variable
240:46 - and this is going to be the index of a
240:49 - certain weapon in the weapon array
240:50 - weapons array
240:52 - but we don't want just the entire weapon
240:54 - we just want the name so we can use dot
240:57 - notation and do a DOT name
241:01 - and now let's see how we can insert
241:03 - variables into a string we can do that
241:06 - with the concatenation operator which is
241:09 - actually just a plus symbol so we're
241:12 - going to update this string to at the
241:14 - end of a string add a plus and then put
241:18 - the the new weapon so we want this to
241:20 - say you now have a and then put the new
241:24 - weapon so basically it's going to be
241:26 - like this you now have a and then I will
241:30 - do plus new weapon
241:33 - so this is outside of the string and we
241:36 - have to make sure we put the space here
241:37 - so it's going to put in a space a new
241:40 - weapon but we also want a period at the
241:42 - end so we're going to have to
241:43 - concatenate a period at the end you now
241:47 - have it and then it's going to show the
241:49 - new weapon
241:50 - so way back at the beginning we made
241:53 - this variable variable called inventory
241:55 - and the inventory it starts off with
241:58 - just a stick
242:00 - so what we want to do is
242:04 - add a add the new weapon onto the end of
242:07 - the inventory because you still keep the
242:09 - inventory what you already have will
242:11 - still keep the stick but if you buy a
242:12 - new weapon now you should have the next
242:14 - weapon in your inventory and you can do
242:17 - that by using dot push so we just do
242:20 - inventory dot push and then we put the
242:23 - new weapon in parentheses it's just like
242:25 - this we'll go back down here
242:28 - and then we will where is it
242:33 - inventory dot push
242:36 - new weapon so we've added that to the
242:39 - inventory
242:40 - so so far anytime that inner text was
242:44 - updated the old text was completely
242:47 - erased
242:48 - but this time let's use the plus equal
242:50 - operator instead of the equal operator
242:53 - so we can add text to the the end of
242:57 - text.inner text and we're going to add
242:59 - the text so we're gonna still we're
243:02 - gonna have this text but then the next
243:04 - line we are going to add a string in
243:08 - your inventory you have
243:11 - and then we are going to put what we
243:14 - have in our inventory
243:16 - so it's basically going to look like
243:18 - this text intertext plus equals and then
243:21 - we're going to have a space because we
243:22 - want to have space after this period and
243:25 - in your inventory you have and then I
243:27 - can just put inventory now this is an
243:30 - array and whenever you print out an
243:32 - array it's just going to put every
243:34 - element in the array separated with a
243:37 - comma okay now we just want an else
243:39 - statement and else if it's just going to
243:42 - say we're going to update the intertext
243:44 - to say you do not have enough gold to
243:46 - buy a weapon just like that once a
243:50 - player has the best weapon they can't
243:52 - buy another one so let's wrap all this
243:55 - code in the by weapon function inside
243:58 - another if statement so basically it'll
244:00 - be a net we'll have an if statement
244:02 - inside another if statement this is
244:04 - called necessif statements so this outer
244:07 - if statement the condition should check
244:09 - if current weapon is less than three
244:12 - which is the index of the last weapon so
244:15 - I'm going to add this if statement here
244:18 - now let me
244:20 - tab everything over
244:25 - and then put another curly brace here
244:28 - if I move this over
244:30 - now we can see everything okay so if oh
244:34 - wait this has to be lined up right there
244:36 - okay so if current weapon is less than
244:39 - three then we'll do all that
244:44 - so at some point in the future you may
244:46 - want to add more weapons so instead of
244:49 - checking if current weapon is
244:52 - less than three like this let's check if
244:54 - current weapon is less than the length
244:57 - of the weapons array so we just have to
244:59 - put the name of the array dot length so
245:02 - just like this weapons dot length
245:07 - well not quite this is not quite what we
245:10 - need to do because we've now introduced
245:12 - an error the current weapon variable is
245:15 - the array index array indexing starts at
245:18 - zero so the index of the last element in
245:21 - the array is one less than the length of
245:23 - the array so in this if statement let's
245:26 - change weapons.link to weapons.length
245:28 - minus one
245:30 - and if the user can't buy a weapon we'll
245:34 - update the inner text to say you already
245:36 - have the most powerful weapon so here we
245:39 - go else enter text sex and inner text
245:42 - you already have the most powerful
245:43 - weapon and once a player has the most
245:46 - powerful weapon we'll give them the
245:48 - ability to sell their older weapons back
245:51 - so in the L statement we'll set button
245:54 - 2.inter text to equal sell weapon for 15
245:57 - gold and we'll set button two to unclick
246:00 - to the function name cell weapon
246:04 - so just like that so you already have
246:06 - the most powerful weapon and then the
246:08 - button is going to change and then you
246:09 - can if you click it it will do cell
246:11 - weapon
246:12 - so after the buy weapon function let's
246:14 - create an empty function called cell
246:16 - weapon
246:19 - so first of all prey player should not
246:21 - be able to sell their only weapon so
246:23 - inside the cell weapon function well add
246:25 - an if statement with a condition that
246:27 - checks if the length of the inventory
246:29 - array is greater than one
246:32 - okay and then inside this statement
246:34 - we'll set goal to equal 15 more than its
246:38 - current value and update gold.inner text
246:41 - to the new value
246:43 - okay now let's set use the let keyword
246:46 - to create a variable named current
246:48 - weapon but we won't set it to anything
246:49 - yet
246:53 - and if you notice if you remember we
246:56 - already have a current weapon up here
246:58 - we've already have a current weapon that
246:59 - we've used in this another in another
247:02 - function we've used in the by weapon
247:04 - function but since we've created since
247:08 - the let keyword is used instead of VAR
247:10 - this new version of current weapon is
247:13 - scoped only to this if statement so at
247:17 - the close of the if statement once the
247:19 - if statement is over
247:21 - then the old version of current weapon
247:24 - will be used again so this will can't
247:27 - come out of the if statement because we
247:29 - use let if we use VAR then it would be
247:32 - able to be used outside of the if
247:33 - statement we're going to remove the
247:37 - first
247:38 - element from the inventory array
247:40 - and put it into this current weapon
247:44 - variable we're going to use the dot
247:47 - shift method so it's going to be like
247:49 - this equals
247:52 - equals inventory
247:56 - dot shift
248:00 - okay just like that so shift is now
248:04 - removing the first element from the
248:07 - array and returning it into this
248:10 - variable
248:11 - and now we'll just set the inner text to
248:13 - you sold a and then put the current
248:15 - weapon
248:17 - so it's just going to look like this you
248:19 - sold a plus current weapon plus period
248:23 - now we can use the plus equal operator
248:25 - to add to the inner text and add the
248:27 - string in your inventory you have and
248:31 - then add the inventory variable at the
248:33 - end of the string
248:35 - just like that
248:36 - so now let's add code so that if the
248:39 - length of the inventory is not more than
248:42 - one a text message appears that says
248:45 - don't sell your only weapon
248:48 - so we can just do that with an else
248:53 - so now we'll start working on fighting
248:55 - monsters let's organize The Code by
248:57 - moving the fight Dragon function to the
248:58 - bottom of the code near the other fight
248:59 - functions so I'll just go to
249:02 - fight dragon
249:06 - uh cut it and then we'll just put it
249:09 - here so now we have all the the monster
249:12 - fighting functions all together
249:15 - now below were the weapons
249:18 - variable is declared so we have the
249:20 - weapons here we're going to create
249:23 - another array called monsters and in the
249:27 - monsters we are going to set the
249:31 - monsters with three different monsters
249:34 - that each have a name a level and a
249:36 - health this time I'll just show you
249:40 - okay so see we have the monster slime at
249:43 - level two Health 15 the Fang Beast level
249:47 - 8 Health 60 and the dragon level 20 and
249:51 - health 300.
249:54 - and fighting each type of monster will
249:56 - be very similar so all three fighting
249:59 - functions we'll call a function named go
250:02 - fight so at the end of the code let's
250:03 - add an empty function named go fight
250:05 - let's go down here I can just copy this
250:08 - function
250:10 - and this will be called go fight
250:15 - so inside the fight slime function
250:18 - we'll set fighting to equal zero which
250:20 - is the index of the slime in the
250:22 - monsters array and then we'll call the
250:25 - go fight function
250:27 - so just like this thing equals zero go
250:31 - fight
250:32 - and then we'll do the same for fight B's
250:34 - and fight dragons so this is going to be
250:37 - one and then we're gonna we don't need
250:39 - the console.log and this is going to be
250:42 - two so zero one two
250:46 - and now we need a new location in the
250:51 - locations array
250:53 - and it's going to have the same
250:55 - properties as other objects in the array
250:57 - we'll set name to fight the button text
250:59 - is attack Dodge and run and the button
251:02 - functions are attack Dodge and go down
251:05 - and we'll set the text so you are
251:07 - fighting a monster
251:10 - so just like that
251:13 - and now we have an attack and a Dodge we
251:15 - need two more functions let's so let's
251:16 - create those functions at the very end
251:18 - here
251:19 - so
251:22 - we have attack
251:25 - and Dodge
251:29 - so in the gothight function let's update
251:32 - and pass in the location of the the
251:35 - fighting location so just like that
251:39 - next in the go kite fight function we'll
251:41 - set Monster Health to equal the health
251:43 - of the current monster you can try to
251:45 - figure that out first or you can just
251:47 - wait for me to show you how to do it
251:50 - so Monster Health equals monsters
251:53 - so that'll be from the list of monsters
251:55 - and then we have the index of what
251:58 - monster will were fighting like say it
252:00 - was two and then we're going to get the
252:03 - health so it's using the combination of
252:05 - bracket and Dot notation
252:09 - okay let's go look back at the HTML
252:12 - really quick if you remember from when
252:14 - we talked about this the HTML earlier we
252:18 - have this monster stats and the monster
252:22 - stat has a style
252:25 - of display none so it's hidden it's not
252:28 - showing up but when we're fighting a
252:31 - monster we want the monster stats to
252:33 - show up so we're going to display
252:36 - the monster stats HTML HTML element by
252:40 - updating its CSS display property to
252:44 - equal block
252:46 - so you just basically do the
252:47 - element.style that display equal block
252:52 - so it should just look like this
252:55 - see monster stats that style that
252:57 - display and this is if if we use an
253:00 - element that style this is how we can
253:03 - update
253:05 - CSS styles through JavaScript
253:08 - now let's set the inner text property
253:10 - the ma of the monster name text equal
253:13 - the the name of the mods we're fighting
253:16 - and the index intertext property of the
253:18 - Monster Health text to equal the Monster
253:20 - Health
253:22 - so it should look just like this so the
253:26 - name text is monsters the monster that
253:28 - we're fighting the name property and
253:29 - then the Monster Health we already got
253:31 - that from up here
253:32 - so we'll build out the attack function
253:35 - now for the first line in the attack
253:37 - function
253:39 - let's update the text message to say
253:42 - the monster attacks but use the actual
253:47 - monster name of what the monster of
253:48 - which monster is attacking so I'm just
253:51 - gonna be like this the
253:54 - monster that's how I get the name
253:55 - attacks
253:57 - okay now we'll use the plus equal
253:58 - operator to append more text to text
254:00 - that inner text We'll add the text you
254:03 - attack it with your and it'll say the
254:06 - weapon name
254:07 - so that's going to be just like this we
254:09 - have the plus equals we have the space
254:11 - here so we have a space out of this
254:12 - period you attack it with your and then
254:15 - we use string concatenation to get the
254:17 - the weapon name here
254:19 - now now let's set the health equal
254:21 - Health minus the monster's level
254:24 - and you can get the Monsters level
254:27 - um very similar to this but instead of
254:29 - name it's just going to be level
254:33 - so just like that now we'll set the
254:36 - Monster Health to Monster Health minus
254:39 - the power of the current weapon
254:43 - okay so when you attack you get damaged
254:46 - the monster gets damaged
254:48 - and then at the end of the line We'll
254:51 - add a random number between one and the
254:54 - value of XP that's the experience
254:58 - so so let me show you I'll just paste
255:00 - that in here so you can see what that
255:01 - looks like so
255:03 - we're subtracting from the Monster
255:05 - Health the power of the weapon plus just
255:09 - some random amount based on the
255:12 - experience so
255:15 - math.random is going to create a random
255:19 - number between 0 and 1. and then it will
255:23 - multiply it by the experience points and
255:26 - then math.floor will round down round
255:30 - down to the nearest whole number so get
255:32 - this all rounded down to the nearest
255:34 - whole number and then add one so
255:37 - basically that's the formula for getting
255:39 - a random number between one and the
255:42 - value of XP
255:43 - and we'll just update the inner text of
255:45 - the health and Monster Health
255:48 - and then we'll check if health is less
255:50 - than or equal to zero if it is we'll
255:53 - call the lose function
255:56 - so then remember to see if you can try
255:58 - to figure out this stuff before I show
255:59 - you but that's just like this if health
256:01 - is less than or equal to zero
256:04 - lose
256:06 - so we've talked about if and else
256:07 - statements an else statement can be
256:10 - conditional with an else if statement so
256:15 - at the end of the if statement let's add
256:18 - an else if statement to check if Monster
256:20 - Health is less than or equal to zero
256:24 - and if it is we'll call the defeat
256:26 - monster function so that just looks like
256:29 - this so normally is else and then we
256:32 - have a curly brace here but now doing
256:34 - else if and we can put another if
256:36 - statement and then defeat monster so if
256:39 - this else then we'll do another if
256:42 - statement we'll only go to this if
256:43 - statement if this one is not true so if
256:47 - we haven't lost then we'll check if the
256:49 - monster has lost if the monster's health
256:52 - is lower we'll call it defeat monster so
256:55 - we'll just have to add those two empty
256:57 - functions for defeat monster and lose
257:00 - okay there we go and inside the Dodge
257:04 - function let's set text to enter text to
257:07 - you dodge the attack from and then put
257:10 - the monster's name
257:12 - so just like that you don't detect from
257:14 - and then monsters then we get the mods
257:16 - who are fighting the name and then the
257:18 - period
257:19 - and then we can update the defeat
257:21 - monsters function
257:23 - so inside this defeat monsters function
257:25 - we're going to set gold to equal
257:29 - the Monsters level times 6.7 but then we
257:33 - want to round that all down to the
257:35 - nearest whole number
257:37 - so just like this gold plus equals and
257:41 - so we're going to add this this new
257:44 - amount of gold which is going to be the
257:46 - level times 6.7 and then round down to
257:48 - the nearest whole number
257:50 - then we'll set XP to equal XP plus the
257:53 - Monsters level
257:55 - and now we just have to update the inner
257:58 - text on the screen
257:59 - and finally we'll finish this function
258:02 - by calling the update function and pass
258:05 - in locations four
258:09 - so update
258:11 - locations
258:14 - four
258:17 - so that's up obviously a brand new
258:19 - location that we're going to have to add
258:20 - to the location section because that's
258:25 - actually the fifth location uh index
258:27 - four and so we're going to add a new
258:29 - location what we're going to have the
258:32 - same properties as all the other objects
258:34 - the name is kill monster the button text
258:36 - is go to Town Square go to Town Square
258:37 - and go to Town Square because there's
258:39 - only one thing you can do after you kill
258:40 - a monster and then the button functions
258:43 - go down go down go down in the text the
258:45 - monster screams ARG as it dies you gain
258:48 - experiments and find gold
258:51 - so we have all that updated for what
258:55 - happens after you kill a monster
258:57 - now where it says the monster screams
258:59 - are here if you're saying something
259:02 - there should be quotes around it so
259:04 - let's add quotes around it we already
259:06 - learned about escaping quotes but
259:09 - there's another way you could include
259:10 - quote marks is if the outer quotes are a
259:13 - different type than the inner quotes So
259:14 - if we want to have the inner quotes be
259:17 - double quotes we can make the outer
259:19 - quotes single quotes so let's do that so
259:23 - now
259:24 - you can see the color all looks correct
259:27 - so we're using the single quotes at the
259:29 - beginning of the end so we can use the
259:30 - double quotes in the middle and that now
259:33 - these will appear and we don't have to
259:34 - escape them they'll actually appear this
259:37 - text will appear as with the quotation
259:39 - marks
259:40 - and let's just add another location for
259:42 - when you lose name lose button text is
259:45 - just all three says replay question mark
259:47 - button functions are just restart and
259:50 - it's just going to say you die
259:55 - so it's going to look just like that so
259:58 - there's only three options that can
259:59 - happen the buttons all say the same
260:01 - thing and the button functions are all
260:02 - the same so after a monster is defeated
260:06 - the monster stamp box should no longer
260:09 - display
260:10 - so on the first line of the update
260:12 - function
260:13 - let's add that the monster stat style
260:17 - display is none so every time it updates
260:21 - it's just going to make sure that the
260:23 - display box goes away the monster stats
260:25 - box goes away
260:27 - so it's just here and I'll just put in
260:30 - there
260:31 - so whenever you go to a new location the
260:33 - monster stats will no longer show up
260:36 - okay now let's go use the loot we have
260:39 - the loose function at the bottom so
260:41 - let's make it go to the correct location
260:46 - update
260:48 - locations
260:51 - five
260:52 - and now at the end we're going to make a
260:54 - restart function so after you lose you
260:57 - may want to restart and we just want to
260:58 - set all the initial variables back to
261:02 - their initial settings and then we want
261:05 - to go to the town so let's go all the
261:08 - way back to the bottom and create that
261:11 - function so then we got restart and see
261:13 - we're setting all the variables back to
261:15 - how they were at the very beginning
261:16 - we're making sure the inner text of all
261:20 - these things on the screen are the
261:21 - correct values and then we go to town
261:25 - okay now let's make an update to the
261:27 - attack function inside the attack
261:30 - function we're going to update the
261:32 - contents of the else if statement
261:34 - this is which is this statement right
261:37 - here so we're going to update the
261:39 - contents here instead of calling the
261:41 - defeat instead of calling the defeat
261:44 - monster function right away we'll create
261:46 - an if statement with an else statement
261:48 - if the player is fighting the dragon
261:51 - which is if fighting equals two then
261:56 - we'll call the win game function else
261:59 - we'll call the defeat monster function
262:04 - so let me show you what that looks like
262:06 - and we're going to talk about something
262:07 - new which is this Opera so if fighting
262:10 - equals 2 when game else defeat monster
262:13 - so here you never just want to use a
262:17 - single equal sign because a single equal
262:19 - sign is an equality operator you would
262:23 - either want to use the double equal sign
262:25 - or the triple equal sign if if you want
262:28 - to compare two things if you want to see
262:30 - if one thing equals another thing as far
262:33 - as comparing you're going to use double
262:36 - or E triple equal sign
262:39 - it so the double equal sign that double
262:41 - equal operator will compare for equality
262:43 - after doing any necessary type
262:45 - conversions and the triple equal
262:47 - operator will not do the conversions so
262:49 - two values have to be the exact same
262:51 - type so it's often safer to use the
262:54 - triple equal sign because it's not going
262:56 - to do any conversions to test the
262:58 - equality
262:59 - and this is the perfect time to talk
263:01 - about
263:02 - the ternary operator or sometimes called
263:06 - the conditional operator it's basically
263:09 - can be used to do a one line if else
263:12 - expression I'm just going to show you is
263:14 - pasting some example code which we're
263:15 - going to delete so the exam here's the
263:19 - example code so if age is greater than
263:21 - or equal to 18 adult function else kit
263:23 - function we can simplify this using the
263:27 - ternary operator so basically you put
263:31 - the what's in the if statement right
263:33 - here and then we have a question mark
263:36 - and this would be the if true and you
263:40 - will put a colon and this is
263:42 - else so this is going to be if true this
263:45 - is the else so the key things to see
263:48 - here are the question mark and the colon
263:51 - so basically it's a one line if else
263:54 - statement when you only need it they're
263:56 - very helpful if you only need to do one
263:58 - thing in the if in one thing and else
264:01 - which is exactly what we have up here so
264:03 - I'm going to delete this and we're going
264:06 - to update this code to use a ternary
264:09 - statement
264:10 - so it's just going to look like
264:12 - this so basically it simplifies things
264:16 - quite a bit if fighting equals equals
264:20 - equals two
264:22 - then if it's true when game if it's
264:24 - false defeat monster
264:28 - okay after the lose function
264:32 - we're going to create a new function
264:35 - called win game and inside that function
264:38 - we'll call the update function and pass
264:40 - in location six
264:43 - so you can see it's going to look very
264:44 - similar to the Lewis function we're just
264:46 - calling location six
264:48 - and that's a new location so let's
264:52 - create a new location
264:53 - everything should basically be the same
264:56 - as the lose location except the name is
264:59 - going to be when and instead of saying
265:00 - you die it will say you feed defeat the
265:02 - dragon you win the game
265:05 - just like that the replay and restart
265:07 - are going to be the same
265:09 - now the game
265:11 - could be complete now we're going to add
265:13 - a few extra features but let's test it
265:16 - out so I'm going to click run up here
265:20 - and we'll be able to see if we made any
265:23 - mistakes already so uh monster stats
265:27 - unexpected identifier so let's go to
265:30 - um line 109 it looks like it's because
265:35 - we forgot this curly brace or I forgot
265:37 - it hopefully you got it right because
265:39 - I'm probably put a little note at the
265:42 - time saying that I made a mistake there
265:44 - so this is why it's sometimes helpful to
265:48 - test out your code more frequently so
265:51 - you don't have a air a while back so
265:55 - let's try it again so click run
265:58 - and then we have another error here so
266:00 - let's check that 144
266:05 - and again it's just a missing curly
266:07 - brace
266:10 - and hopefully we don't get any more of
266:12 - those missing curly braces
266:14 - okay
266:17 - and then we have a missing
266:21 - semicolon so it um
266:24 - 217
266:26 - one thing this helps you realize is that
266:28 - finding errors can actually be easy just
266:32 - by looking at the console and the errors
266:35 - you get right in there so it looks like
266:37 - we just need to have a
266:41 - semicolon here
266:43 - okay
266:46 - and no more errors
266:48 - I fix all my mistakes that hopefully you
266:51 - already had fixed in your code okay so
266:54 - let's test out the rest of this
266:56 - application here so welcome to Dragon
267:00 - repeller so we have all this information
267:02 - here go to store
267:04 - let's see if we can buy a weapon yep my
267:06 - gold went down and now I have an extra
267:09 - thing in my inventory
267:11 - I can buy some health
267:13 - and my gold went down my health went up
267:16 - let's go down to Town Square or go to
267:18 - the cave
267:19 - I'll fight the Slime name slime Health
267:23 - 15. you are fighting a monster I am
267:26 - going to attack and my health went down
267:29 - my experience went up and it tells right
267:33 - here what happened so go to Town Square
267:35 - I'm gonna go to the cave again fight the
267:37 - Slime attack and now I have more gold so
267:41 - I can go to the store and buy a better
267:43 - weapon now I have a claw hammer so I'm
267:47 - going to go to the cave and now I can
267:49 - fight the Fang Beast
267:51 - and attack that a few times
267:55 - I defeated it now let's just I'm not
267:58 - gonna check every single thing here but
268:00 - let's check what happens if I fight the
268:02 - dragon and die
268:04 - attack
268:06 - okay my health is going down quickly I
268:09 - don't have the most powerful weapon yet
268:13 - you die see my health went down so if I
268:16 - replay yup it starts back over you were
268:19 - on the Town Square you see a sign that
268:21 - says store
268:23 - great everything seems to be working so
268:25 - far
268:28 - okay let's do a few things to make the
268:31 - game even more interesting
268:34 - um first of all I'm gonna
268:36 - close the console here we don't need
268:37 - that anymore I'm gonna bring this over
268:41 - and now let's go to the attack function
268:44 - so in the attack function we're going to
268:48 - change
268:49 - this line right here
268:51 - to something that's going to be a little
268:55 - more
268:56 - complicated basically so instead of just
268:59 - subtracting the level of the monster we
269:03 - are going to
269:04 - get an attack value based on the level
269:07 - of the monster so I'm going to
269:10 - um put in a I'm going to call a function
269:13 - here actually so get monster attack
269:17 - value
269:18 - and then I'm going to pass into the
269:21 - function the level of the monster so
269:23 - we're passing in the level of the
269:24 - monster to this function and this whole
269:29 - function is going to return a number
269:32 - that's going to be subtracted from the
269:36 - health
269:38 - so let's create that function so we're
269:40 - going to call that function it's going
269:41 - to be right here it's going to take a
269:43 - level so get monster attack value it
269:46 - takes in a level here
269:47 - and now the attack of the monster will
269:50 - be based on the monster's level and the
269:54 - player's XP so in this function we'll
269:57 - use let to create a variable called Hit
269:59 - and we'll set it to equal to an equation
270:03 - let me just show you instead of
270:05 - explaining it to you first
270:09 - so you can experiment with different
270:12 - equations to figure out what the attack
270:14 - value is going to be but in our case
270:16 - we're doing we're first we're
270:18 - multiplying the level of the monster
270:20 - times five and then we're subtracting
270:23 - well we're getting a random number times
270:26 - XP and then we are uh rounding it down
270:34 - so let's do a console.log we're going to
270:38 - log the value of this of hit to the
270:42 - console to use in debugging this is
270:45 - something we talked about at the
270:46 - beginning console.log so to console
270:50 - .log and then pass in Hit
270:54 - and now we're going to do something we
270:56 - haven't done before and a function is to
270:57 - return a value we already talked about
270:59 - how we're going to get the return value
271:01 - to pass into Health but we haven't
271:03 - created a function with the returned
271:04 - value yet so we're going to return we're
271:08 - just going to use the return keyword
271:11 - and then put hit so just like this
271:16 - return
271:17 - hit
271:18 - okay so now when we call this function
271:20 - it's going to return a value that we can
271:23 - then use in this health equation up here
271:27 - okay now we want to make it so a player
271:29 - can potentially miss when they go to
271:31 - attack they can miss so first of all
271:34 - there's an extra semicolon here so extra
271:37 - semicolons basically don't do anything
271:39 - they're not they're not going to make
271:40 - your your code fail or anything so we
271:44 - want to put this whole line
271:46 - in an if statement so
271:50 - if and then the condition of the if
271:53 - statement is going to we're actually
271:55 - going to call a function to get the
271:57 - result to see if this is true or false
272:01 - so we're going to say
272:05 - if is Monster hit is Monster hit
272:10 - and we're going to check if the monsters
272:11 - hit and if so then we are going to
272:16 - subtract from the health
272:19 - and if the monster is not hit well of an
272:23 - else and we'll use the plus equal
272:24 - operator to add the text you miss onto
272:27 - the end of text.enter text
272:31 - so it's just going to look like that
272:35 - so maybe I can even put some
272:37 - lines around here so we can see what
272:39 - happens so if the monsters hit
272:42 - we'll subtract this attack value if not
272:45 - you miss
272:47 - obviously we now have to create the is
272:50 - Monster hit function we're going to use
272:52 - the math.random function to make it so
272:56 - twenty percent of the time it's a myth
272:58 - and eighty percent of the time it's a
273:00 - hit
273:01 - so after the get monster attack value
273:03 - I'll make another function the other
273:05 - function and this is how we're going to
273:07 - do that is Monster hit we're going to
273:09 - return and then we're going to do a
273:11 - conditional anytime you have a
273:12 - conditional like more than less than
273:14 - more than equal to or like the double
273:16 - equal sign the triple equal sign it's
273:18 - always going to return a true or false
273:21 - so math.random if you remember I said it
273:23 - gives a number between 0 and 1. so so
273:27 - point two that's basically twenty
273:29 - percent of time it's going to be 0.2 or
273:32 - less and then eighty percent of time is
273:34 - going to be above that so it's going to
273:37 - return When
273:38 - math if math that random is greater than
273:41 - 0.2 that's eight percent of time it's
273:42 - going to turn true otherwise false so
273:45 - 21st 80 of the time there's going to be
273:48 - a hit
273:50 - now we want to actually the players that
273:54 - hit if either math that random is
273:57 - greater than 0.2 or if the player's
274:00 - health is less than 20. so basically
274:04 - it's always a hit if the player's health
274:06 - is less than 20. so let's look at how
274:09 - you can use an or in an if statement so
274:12 - you can check for two conditions in an
274:14 - if statement
274:15 - so we actually want to return true under
274:19 - two conditions
274:21 - if math.random is greater than 0.2
274:25 - or if the player's health is less than
274:28 - 20. so if the player has low Health
274:31 - there's always going to be a hit
274:33 - so at the end of the return statement
274:36 - we're going to add the logical or
274:39 - operator which is just two straight
274:41 - lines and we can check if health is less
274:44 - than 20.
274:47 - so let me show you what I mean so this
274:50 - is the two straight lines this is the or
274:52 - operator so we're checking for this
274:56 - or this so if either one of these is
274:59 - true
275:00 - then it's going to return true
275:05 - we could also use the and operator if
275:07 - you two to do two ampersines that would
275:10 - be saying both of these have to be true
275:13 - to return true and if either one is
275:15 - false then it returns false but we're
275:17 - going to go back to the the orb
275:19 - the or operator
275:22 - okay now let's add another thing so for
275:25 - the attack we're going to make it so on
275:27 - every attack there's a small chance that
275:30 - the player's weapon breaks
275:33 - so at the end of the attack function
275:34 - we're going to add an if expression with
275:37 - the condition math.random is greater
275:40 - than or equal to 0.1
275:43 - so let's go here
275:50 - okay now we'll use the plus equal
275:52 - operator to add
275:54 - your and then it's going to say the
275:56 - first item inventory array your weapon
275:59 - breaks
276:00 - and it's going to add that to the end of
276:01 - enter.txt
276:03 - and we can use inventory dot top to both
276:07 - remove the last element from the array
276:09 - and return the element let me show you
276:11 - what I mean
276:13 - so right in here
276:16 - text enter text plus equals your and
276:19 - we're using a string concatenation with
276:22 - the plus your
276:25 - and now we do inventory.pop this is both
276:28 - going to remove an item remove the final
276:31 - item in the array and return it so it
276:35 - appears in the string here breaks so
276:37 - it's not going to be in the inventory
276:39 - anymore and we get to see what the item
276:40 - is
276:42 - and now we can next decrement the value
276:45 - of current weapon
276:49 - so we'll just do that with current
276:52 - weapon
276:55 - minus minus
276:58 - but we never want the player's only
277:02 - weapon to break so
277:05 - so well let's use the logical and
277:07 - operator which I was talking about
277:09 - earlier to add a second condition to the
277:11 - if Express and we just wrote If a
277:13 - player's weapon a player's weapon should
277:15 - only be able to break if
277:17 - inventory.length does not equal one
277:21 - so you can do does not equal within with
277:23 - an exclamation point before the double
277:26 - equal sign
277:28 - so so let's see that so we're using the
277:31 - the and the Ampersand ampersine for and
277:34 - and then this is the does not equal so
277:37 - there's two conditions both conditions
277:39 - have to be true math.random has to be
277:42 - less than or equal to 0.1 and also the
277:46 - inventory dot length should not equal
277:50 - one so for not equal you can either this
277:55 - is the not equal that's equivalent to
277:57 - three equal signs and this is the not
278:00 - equal that's equivalent to two equal
278:02 - signs it's for the most part you should
278:05 - use the the one that's equivalent to the
278:07 - three equal signs so we're checking for
278:10 - both though it it can't just be one or
278:12 - the other both have to be true for the
278:15 - inventory item to break let's do a quick
278:17 - test and see if we can get our our
278:20 - inventory our item to break so if I just
278:22 - go to k I'm just going to keep um
278:24 - finding the slime
278:26 - until we hopefully well actually we have
278:29 - to buy first we have to buy it go to the
278:31 - store I forgot where to buy the weapon
278:33 - and then we can see if we can get it at
278:34 - the break so go to the cave
278:36 - um it we may have to do it quite a few
278:38 - times to get the break
278:43 - your dagger breaks it happened well you
278:45 - know so what we kind of got lucky when
278:47 - it gets unlucky to get it to break so so
278:49 - our dagger breaks and now we only have a
278:53 - knife or a stick or whatever the first
278:55 - one was so so that's actually working
278:58 - correctly so everything's working
279:02 - basically how we want there's just one
279:05 - more thing to do which is to add a mini
279:07 - game Easter egg basically a hidden
279:10 - feature of the game and really this is
279:13 - just a reason to be able to teach you
279:16 - one last part of JavaScript so at the
279:20 - end We'll add another function called
279:21 - Easter egg and it's going to call the
279:23 - update function and passes in locations
279:27 - seven
279:29 - so we'll add that at the very end
279:33 - Easter Egg location seven
279:36 - and then we're going to have to add the
279:38 - new location for the Eastern egg it's
279:40 - going to have a name of Easter egg and
279:44 - the button text is going to be 2 8 or go
279:46 - to Town Square and the functions are
279:48 - going to be pick two pick eight or go to
279:51 - town
279:52 - and then the text is going to be you
279:54 - find a secret game pick a number above
279:57 - 10 numbers will be randomly chosen
279:59 - between 0 and 10 if the number you
280:02 - choose matches one of the random numbers
280:03 - you win
280:07 - so we'll just add that and you can see
280:10 - that text here basically you can only
280:12 - choose two or eight for for the numbers
280:16 - so now we just have to add the code
280:18 - that's going to randomly choose these
280:20 - numbers between 0 and 10.
280:22 - but first let's create the the pick 2
280:25 - and pick 8 functions and each function
280:27 - is going to call the pick function which
280:30 - we still have to create and pass either
280:32 - a 2 or an 8 into the pick function
280:34 - depending on the function name
280:37 - so I'll just go down and
280:41 - add those functions pick two what's
280:44 - going to pick two or pick a is going to
280:46 - pick eight
280:47 - and then the final thing is to create
280:49 - the pick function
280:54 - so let's create that function so
280:56 - function
280:58 - pick and obviously it's going to need a
281:00 - guess
281:03 - and then what's going to happen in this
281:04 - function well first let's create a a new
281:07 - variable called numbers and it's going
281:09 - to be an empty array so let numbers and
281:13 - it's going to equal this empty array
281:15 - and we're going to push numbers onto
281:17 - this array using a while loop so we're
281:21 - going to talk about two different types
281:23 - of Loops in this section the first is a
281:25 - while loop and a while loop will keep
281:27 - doing something while a condition is
281:30 - true so a while a little bit it start it
281:34 - starts off looking kind of like a an if
281:36 - statement so we're going to do while and
281:39 - there's going to be a condition we'll
281:40 - fill that in a second and there's going
281:42 - to be some code in between these curly
281:43 - braces so the condition we want to put
281:46 - in is while numbers dot length is less
281:49 - than 10. so numbers dot length is less
281:54 - than 10. so it's gonna it's the right
281:58 - now the length is zero so while it's
282:00 - less than 10 it's going to do something
282:01 - so we want to push an item onto this
282:05 - array so we'll do numbers dot push so
282:09 - numbers dot push and then we're going to
282:12 - put what item we want to put on and here
282:14 - we're going to create a random number
282:17 - between 1 and 11 or 1 and 10. so to
282:21 - create number a land number there's a
282:23 - basically a formula we've already kind
282:25 - of discussed we've already discussed the
282:26 - formula but we're going to do
282:29 - math.random to get a random number
282:32 - between 0 and 1 and we multiply it by
282:35 - 11. so now if we just round this down
282:39 - because it's going to
282:42 - it's it's going to have a decimal so
282:45 - we'll do math.floor
282:47 - this will give us a random number
282:49 - between 1 and 10 to put onto the numbers
282:52 - list
282:53 - so there's definitely different ways we
282:54 - could have created this list but I
282:56 - wanted to demonstrate how to use a while
282:58 - loop so while this condition is true
283:01 - while there's less than 10 numbers we
283:04 - will run this code and then after this
283:07 - code pushes the tenth number onto the
283:10 - list the 10th random number it will go
283:12 - back to the condition again and it won't
283:14 - be true anymore so we'll pop out of the
283:16 - while open go to the next line of code
283:19 - and the next line of code is we are
283:22 - going to display using the text I enter
283:24 - text we're going to set it to equal you
283:26 - picked and then put what they picked
283:28 - here are the random numbers
283:32 - one thing I just added to the end of
283:34 - this is an escape character so with this
283:38 - back slash in
283:40 - that's the that's the how you say new
283:43 - line so if you want to add a new line
283:45 - right in the string you can use the the
283:49 - Escape character the backslash n and it
283:52 - will will add a new line to the into the
283:55 - string
283:58 - and let me just add a few semicolons
284:00 - here
284:02 - okay now we're going to talk about a new
284:06 - type of loop called a for Loop again
284:10 - it's going to be set up just like the
284:12 - while loop at first so we're going to
284:14 - have the four that's the keyword there's
284:16 - going to be parentheses and then we're
284:18 - going to have the brackets or the curly
284:21 - braces so we're going to run this code
284:23 - in here based on what's in these
284:25 - parentheses so there's going to be three
284:27 - items in these parentheses each separate
284:29 - with a semicolon so first we're going to
284:31 - initialize a variable so first
284:35 - we're going to initialize a variable
284:38 - then we're going to put the condition
284:40 - that we're looking for for the variable
284:42 - to have before we before we're done with
284:44 - the for Loop and then we are going to be
284:47 - able to change the variable so let me
284:50 - show you what I mean we'll do let I
284:52 - equal zero
284:55 - semicolon
284:57 - I less than 10
285:00 - semicolon
285:01 - I plus plus
285:04 - so let's go over this so first when this
285:06 - when we go into this for loop we're
285:08 - creating a new variable just for the for
285:10 - Loop since we use let it's only going to
285:12 - apply in this block of code and we are
285:16 - going to Loop
285:19 - until I is less than 10. so once I is I
285:25 - is less than 10 we'll be out of the loop
285:26 - and this is something that's going to
285:28 - run at the end of each iteration of the
285:31 - loop I plus plus that just means I
285:33 - equals I plus 1. so I start at zero and
285:37 - then every at the end of each iteration
285:39 - of the loop it's going to go up one and
285:42 - once I is
285:43 - and it's actually basically it's it's
285:45 - while while I y i is less than 10 it's
285:50 - going to keep looping so while I is less
285:53 - than 10 it's going to keep looping and
285:55 - once I is no longer less than 10 the
285:58 - loop will be over
285:59 - we are just going to use this Loop to
286:03 - add a to add all the numbers from our
286:07 - list
286:08 - and it will put a new line character
286:11 - after each number on the list
286:15 - so just like that so we'll do plus equal
286:17 - numbers and so
286:20 - when we do it numbers I so first it's
286:24 - going to be
286:25 - so I is going to be updated each time we
286:30 - go through this Loop so the first time
286:32 - we go through the loop I is going to
286:35 - equal zero so this is going to be the
286:38 - number this is the number here at index
286:41 - 0 which is the first number and then I
286:44 - will be updated and it'll be index one
286:46 - index two index three until the loop is
286:49 - over with and after each number we will
286:52 - put a new line
286:53 - okay so now we have our final section
286:57 - we're going to put an if else statement
286:59 - we want to figure out if the number that
287:03 - was picked is in this list
287:08 - well there there's a kind of a fancy way
287:11 - we can do that
287:12 - so first let's create the if statement
287:14 - so if
287:17 - so we're going to put the condition here
287:19 - we are going to find the index of the
287:24 - guest number so we can do numbers dot
287:29 - index
287:30 - of and we can pass in the guess so in
287:34 - this case it's going to either be two or
287:36 - eight but we can use this function for
287:39 - any for a guess of any type of number so
287:42 - we're trying to find the index of it of
287:44 - it we're looking for that number
287:46 - in the numbers array and we're trying to
287:49 - find the index so either you know the
287:52 - index starts with zero one two three
287:53 - four so which s part of the array which
287:57 - order in the array
287:59 - is that number
288:01 - but if the number so this is always
288:04 - going to return a number but if the
288:06 - number if is not in the array if it
288:09 - cannot find the index of that guess it's
288:13 - going to return negative one so we can
288:16 - use that so if the index of guess
288:19 - does not equal negative one
288:22 - that means it's in the list that means
288:25 - you guessed a correct number so we're
288:27 - going to do the does not equal and then
288:31 - put negative 1. so in that case we are
288:34 - going to set inner text to right you win
288:37 - 20 gold we're going to add 20 gold and
288:40 - we're going to update the inner text of
288:42 - the gold
288:45 - just like that the plus equal right you
288:47 - 120 gold we're gonna add to the gold and
288:50 - then update the inner text of the gold
288:51 - else it's going to say wrong you lose 10
288:54 - Health we're going to subtract 10 health
288:56 - and we are going to set the inner text
289:00 - of the health
289:03 - so it's going to look
289:05 - just like that let's put the other curly
289:08 - brace here and anytime you subtract
289:10 - Health we have to check if the player
289:13 - has lost
289:15 - so that's what we'll do now
289:17 - see if you can figure out what code you
289:20 - should add to if the player has died
289:25 - that's going to be just like this if
289:27 - health is less than or equal to zero
289:29 - lose
289:31 - okay
289:32 - we are done
289:35 - the only other thing we need to do is
289:39 - make it so you can get into this Easter
289:42 - egg
289:43 - so how we're going to make it so you can
289:46 - get into the Easter because we're going
289:47 - to go back up to
289:49 - the
289:51 - locations and during the the kill
289:55 - monster once you've killed the monster
289:57 - it's gonna say go to Town Square go to
289:59 - square go to Town Square but we're not
290:02 - going to use the same functions for each
290:04 - of these the final function we're going
290:06 - to do Easter egg so even though it says
290:09 - go to Town Square
290:11 - if you know the Easter egg you're gonna
290:13 - go to the Easter egg function Okay so
290:17 - now there's nothing else to add so let's
290:20 - just try out the Easter egg I'm going to
290:22 - run
290:23 - and we know that if we go to the cave
290:30 - we know
290:33 - okay now let's just check out oh yeah we
290:35 - got
290:36 - obviously there's some sort of air we
290:38 - have to fix here so let's go to a line
290:40 - 100
290:41 - and
290:45 - oh when we edit when I had Easter egg I
290:48 - somehow deleted that it's curly brace
290:52 - okay so now
290:54 - I'm going to first I'll just go to the
290:57 - store by weapon now I'm gonna go to the
290:59 - cave fight the Slime attack okay now I'm
291:03 - going to click the third go to Town
291:05 - Square oh yeah and while we're doing it
291:07 - you can see in the console it's putting
291:08 - uh the 10 here because if you remember
291:11 - we did do a console.log uh when there
291:13 - was an attack uh where was that
291:18 - here where we console.log the hit so but
291:21 - I'm going to click the third go to Town
291:23 - Square you find the secret game pick a
291:25 - number above 10 numbers will be randomly
291:28 - chosen between 0 and 10 and then if you
291:29 - choose them if the number you choose
291:31 - matches one of the random numbers you
291:32 - win so I can click eight
291:34 - he picked eight here in the random
291:36 - numbers uh let me just turn off this
291:38 - console right you win 20 gold because 8
291:40 - was in there and then if I choose the
291:43 - wrong because I can play again so you
291:45 - pick two right I got right that time
291:47 - right again oh man I'm on a roll here
291:50 - wrong you lose 10 health so I tried too
291:53 - many times uh so now I can go to Town
291:56 - Square
291:58 - the game is complete
292:04 - now that you know the basics of
292:06 - JavaScript Tomy will take over again for
292:08 - this next section he's going to teach
292:10 - you how to create a front-end web app
292:13 - with HTML CSS and JavaScript afterwards
292:17 - I'll teach you how to create a back-end
292:19 - web API using node.js Express and
292:22 - mongodb then I'll teach you how to
292:25 - connect tomi's front-end web app to the
292:27 - backend web API in this section of this
292:30 - course we're going to be building this
292:31 - web application that you see right here
292:33 - so it's going to be a very basic app and
292:36 - what it's going to do is that you're
292:37 - gonna be able to just allow a user to
292:41 - search for any movies and it's going to
292:42 - show results of those movies for example
292:45 - if I search for smile
292:46 - you're gonna see that I have results of
292:48 - the movie smile so I'm going to show you
292:51 - how to build this from scratch so we're
292:53 - going to design the HTML the CSS then
292:55 - once we're done with that we're going to
292:57 - use JavaScript to fetch this data from
293:00 - an API so let's get straight into it so
293:04 - I'm just going to close this tab and
293:06 - we're going to come back to replit
293:08 - so now we are just going to get rid of
293:10 - this whole style.css and let's just
293:13 - start with our index
293:15 - so I'm going to close this and what I'm
293:17 - actually going to do is that I'm going
293:19 - to open this on another tab
293:21 - so that we can just see how the
293:23 - application looks live rather than
293:24 - having it like in a small frame
293:26 - so that is also what you can do with
293:28 - replit so now I'm going to close that
293:30 - and we have all our
293:33 - you know code enough with enough screen
293:35 - for us to use so what we're going to do
293:37 - first of all
293:39 - I'm gonna actually just have all the the
293:42 - HTML you know diff element everything
293:44 - I'm going to use then I'm going to start
293:46 - styling everything that we code in here
293:48 - and after styling it then I'm going to
293:50 - use JavaScript to you to fetch some data
293:53 - from an API so I'm going to show you how
293:55 - to do all of this if you don't know what
293:56 - these are don't worry I'm going to walk
293:57 - you through it
293:59 - so the first thing I want to do is to
294:01 - actually just
294:03 - get rid of all of this
294:05 - and right here I'm just going to leave
294:08 - this title blank so to this point you
294:11 - know that this is just a basic HTML you
294:13 - know template this is how the base the
294:15 - normal HTML structure should look so we
294:18 - have this docketype HTML which tells us
294:20 - that we are using HTML5 and then we have
294:22 - the root element which is HTML and this
294:25 - is where every other thing goes in and
294:27 - in there we have the ADD and as I said
294:29 - previously in this course in the end we
294:32 - have the title and then the CSS that
294:35 - we're going to be using which is this
294:36 - style.css we have it linked right here
294:38 - and then this body is where most of the
294:41 - visible stuff or basically all of the
294:43 - visible stuff of the web page is going
294:45 - to be so let's get straight into this so
294:48 - what I want to do now is I want to
294:49 - change this title to movie
294:52 - site
294:54 - so once I change that to movie site
294:55 - let's just come straight and the first
294:58 - thing I want to create is like a very
294:59 - basic nav bar right here so as you saw
295:02 - in the demo I showed you there was a nav
295:04 - bar that just shows movies and at this
295:07 - right corner there was like a search bar
295:09 - where a user could search for something
295:11 - so let's start with that so the first
295:13 - thing I want to do I'm going to create a
295:15 - new div
295:16 - element
295:18 - and that development I want to give it
295:20 - let's say a class
295:22 - of
295:24 - top nav
295:26 - so I'm just going to give all of them
295:27 - different attributes so I can use the
295:29 - attributes to actually style them later
295:31 - in the CSS
295:32 - so now that I have that the next thing I
295:34 - want to do is to just let's say I have
295:37 - an a tag and this is just a movies site
295:43 - so this movie site now is you know what
295:46 - is going to be shown right here
295:48 - and let me say
295:50 - I'm gonna give this a class also so we
295:52 - can style it so let me just say this is
295:54 - active
295:55 - and I'm gonna say
295:59 - it should link to we don't actually want
296:01 - it to link to anywhere so we're just
296:03 - going to give it this value
296:06 - #so it doesn't really go anywhere so
296:08 - that is what we need to do for the
296:10 - movies adding
296:12 - now the next thing I want to do is to
296:14 - actually create another div tag in here
296:16 - and I'm gonna
296:19 - give this gift tag a class also
296:22 - so
296:24 - it should also close
296:25 - I'm going to close that div tag
296:31 - so now that I've closed the gift tag we
296:33 - just need to make sure everything is
296:34 - right and structured so this is the div
296:37 - that is ending here that's the 8i
296:40 - and this is a div type so in here what I
296:43 - want to have is basically a form
296:46 - so I'm going to have a simple form right
296:48 - here
296:50 - I'm just gonna say form
296:53 - I'm gonna create that form for us let me
296:55 - just bring this here
296:56 - now before we have this form let me give
296:58 - this Diva its own class so we can style
297:01 - every single thing if we want to and let
297:03 - me say this because this form is going
297:05 - to contain the search bar so let me and
297:07 - this search bar is going to be part of
297:09 - this div class so let me say it's like a
297:11 - search container
297:15 - right and then this form I want to give
297:18 - it let's say a role
297:21 - search
297:23 - and I'm gonna give it his own ID and I'm
297:26 - I'm going to use this ID later in the
297:28 - JavaScript also so I need to name it
297:30 - form
297:31 - now you're just going to have one input
297:33 - and the input it's gonna
297:37 - close that input and the type
297:41 - is going to be
297:43 - search it's actually a type that I
297:45 - search
297:46 - and when I say ID let me just give it
297:49 - let's see let's say query
297:52 - and we can give it a name of just Q
297:58 - and let's give it a placeholder
298:01 - and let's just say
298:03 - search
298:05 - now this is what we've done to this
298:07 - point let's actually come here and see
298:09 - what that gives us
298:11 - so if we refresh this you can see that
298:12 - we just have this basic movie site and
298:15 - this search bar now let's come back in
298:17 - here and what I can just do is
298:20 - let me change this to search
298:23 - what I'm gonna do now is after this div
298:25 - tie
298:26 - or this div class I just want to have
298:29 - another you know div element that is
298:32 - gonna take care
298:34 - of the whole film so you know when we
298:37 - search movies in that site when we
298:38 - search movies and we saw some like cards
298:41 - here that shows the image of the movie
298:43 - and the title that's what I want to do
298:44 - right now so I'm going to have one diff
298:47 - and I'm gonna have this
298:50 - of a class
298:52 - of row
298:54 - it's gonna be a row
298:56 - and I'm actually gonna have another div
298:59 - in there so now this is going to take
299:00 - care of the column class
299:06 - so we're going to say class
299:09 - equals column
299:12 - so just the way we have rows because you
299:14 - know that we are going to have a row and
299:15 - we're going to have different columns so
299:17 - we need to have that specified in the
299:19 - div type and then let's create one more
299:21 - div tag
299:27 - and this one is going to have a class
299:31 - of card because this is going to be the
299:33 - one that contains the actual you know
299:35 - details of that particular movie
299:37 - so I want to have an image in here
299:39 - and that image is let's say gonna have
299:44 - a source
299:46 - so for now let's leave the source as
299:47 - hashtag
299:50 - let's say that is hashtag but I want to
299:52 - have a class and I want to name this
299:54 - class thumbnail
299:57 - so that's what I'm going to do to that
300:00 - and what I want to do is I want to put
300:02 - this in an element named Center
300:05 - so once I say Center I'm going to put
300:07 - that in there I'm going to show you why
300:09 - I did this later when we are styling it
300:11 - now we're also going to have
300:14 - um let's see let's use an H3 tag to take
300:16 - care of the title of the image of the
300:17 - movie so let's say movie try to
300:21 - right and that is basically what we need
300:24 - for this part so let's have if I save
300:27 - this and you just come here and eat
300:29 - refresh let's see
300:31 - so this is the image this is movie title
300:34 - everything is all over the place for now
300:36 - but don't worry about that let's
300:37 - actually give you like an image so if I
300:40 - open this up I put this image.jpg there
300:44 - and if I click on it it just shows this
300:46 - wakanda forever image so what I'm gonna
300:48 - do is in here
300:51 - let me just say images a jpeg
300:56 - if I come here now and hit refresh so
300:58 - that should show basically right there
301:00 - so we're going to style this later but
301:02 - let's keep going
301:03 - so what we cannot do now since we have
301:05 - all of this let's actually have a
301:06 - padding because as you can see just
301:09 - after that nav bar there is like the the
301:13 - movie card is right after it so we won't
301:15 - have some space in beside it so we can
301:18 - just have like let's see
301:20 - we can start this in the CSS but let's
301:22 - take care of it right now and we can say
301:23 - div right
301:25 - and then what we can just do is to say
301:28 - Style
301:33 - let's say pattern
301:40 - let's see let's see left
301:42 - and we give it 16px just so it has
301:46 - button from the left and automatically
301:48 - I'm going to explain something right now
301:50 - so this basically has a padding on the
301:53 - left
301:54 - so what we're gonna do now
301:56 - to make sure everything is correlated so
301:59 - we have that having a padding on the
302:01 - left but we also want it to have like um
302:04 - spacing on the top of it so what we can
302:07 - just do let's actually get rid of this
302:09 - and this is just going to give you some
302:11 - padding on the left for you to have some
302:12 - spacing on top of it that is automatic
302:15 - because we already have one div
302:17 - like one diff tag here so once I save
302:20 - that that should be fine right now and
302:24 - let's see
302:25 - let's see what we've done to this point
302:29 - Okay cool so this that doesn't take care
302:32 - of the space in here but we're going to
302:33 - take care of that in the CSS but let's
302:36 - let's just move forward with no this
302:38 - timing so let's go through what we just
302:39 - did right here so we created a
302:43 - a div class for the top knife that's for
302:46 - the navbar we add all the details of the
302:48 - nav bar in there and then we just added
302:52 - this div tag for some spacing and right
302:54 - here we have the row we have the colon
302:55 - we have the card and in the card we have
302:58 - the image and the H3 tie so we have all
303:01 - of this done now the next thing we want
303:03 - to do is to actually go into the CSS and
303:06 - start styling all of this
303:10 - so right now we're gonna come into the
303:12 - style.css file and let's just get
303:14 - straight into it so first I'm going to
303:17 - use this as steric selector and I'm
303:19 - going to say
303:20 - the whole element in this should have a
303:22 - box sizing
303:24 - of Border box
303:26 - yeah let's give it that
303:28 - so as you know the aesthetic selector
303:30 - basically affects audio elements in the
303:32 - HTML file before we even get here we
303:35 - must make sure that this
303:37 - style.css is connected to this HTML if
303:40 - not it's not going to affect it so since
303:42 - we know that we've linked it right here
303:44 - using this link element we can go ahead
303:46 - and start you know coding right here
303:48 - so let's see let's say we want to have
303:50 - the body
303:51 - to have a background color
303:56 - I'm gonna give it this background color
303:58 - so I'm going to show you the color code
304:00 - it's hashtag one three one seven twenty
304:03 - yeah it should look like that
304:06 - now we're gonna do that and let's give
304:08 - you a font family
304:12 - and let's say Sans serif
304:16 - let's save this and let's just see
304:18 - we come here I need to refresh good so
304:20 - you can see now that it's looking like
304:22 - what I showed you in the beginning so we
304:24 - have the background color and this is
304:26 - we're going to take care of this later
304:27 - but let's just keep going
304:29 - so when you're using replicate you
304:31 - actually don't need to save the file
304:32 - before you come here and eat refresh
304:34 - automatically it's like saves it for you
304:37 - that's also why I like replay so since
304:39 - we've taken care of the body let's just
304:41 - see
304:42 - so we can see that right here this is a
304:45 - black but we want it to be white so it
304:47 - actually shows because of the background
304:48 - color and that is in uh let's see it's
304:52 - an H3 tag
304:53 - so we're going to come in here into our
304:56 - style.css I'm going to say for H3 tag
305:00 - you select that I want to give you a
305:02 - color of white
305:05 - so now if I hit refresh we should see
305:08 - that that is white good and what we're
305:10 - going to do now is to just add some
305:13 - proper styling to this nav bar that we
305:15 - have right here we want this to be here
305:16 - we want this movie site to actually look
305:18 - good let's do that so we're gonna say
305:21 - let's see the class we used for that
305:24 - top knife so let's just copy that
305:27 - so now we're gonna say dot top nav
305:31 - let's give it an overflow and let's say
305:33 - that should be hidden
305:36 - and we're going to give that a
305:37 - background color
305:40 - let's give it the same background color
305:42 - as the normal background color of the
305:44 - body
305:45 - so again let's say
305:47 - one three one
305:49 - seven twenty
305:51 - and we want to have a padding
305:54 - of 10 PX so it's going to have a padding
305:57 - on the top on the bottom on the left and
306:00 - the right of 10px remember earlier in
306:02 - this course I thought about you know
306:04 - this button when you have just one in
306:06 - CSS when you say padding and you have
306:08 - just one value it uses that value for
306:11 - the Left Right top and bottom
306:15 - so now let's come here and
306:18 - let's see what that has done so you can
306:21 - see that there's some padding up here
306:23 - and you can see that the space that we
306:24 - talked about earlier is you know it's
306:26 - not as close as it was before if we have
306:28 - a pattern of like 30 this this is going
306:30 - to come down a lot but let's just keep
306:32 - going
306:34 - so now what I'm gonna do let's see we
306:37 - have
306:38 - in here we have Okay cool so let's style
306:41 - this movie site so this movie site is in
306:44 - an a tag that's what we're gonna do
306:46 - right now so we're gonna say for the top
306:49 - nav
306:51 - I want to select the a tag in there the
306:54 - a element
306:55 - and we're going to say let's see let's
306:57 - floaty to left
307:00 - we're going to say left
307:03 - and then let's have a display of block
307:07 - and let's give that a color also of
307:09 - white
307:15 - and we want to give it
307:17 - let's align
307:19 - the text to the center so we can say
307:21 - test align
307:25 - enter and let's give you a padding
307:29 - of 14
307:31 - e x and 16 PX so this is going to split
307:35 - it evenly between both top right and
307:37 - both left both top and bottom and left
307:39 - and right so let's also have a text
307:41 - decoration of none because it is a link
307:44 - right it's an 8i it's going to have this
307:46 - underline on it so when we say text
307:48 - decoration
307:50 - none
307:53 - then that should take care of that we're
307:56 - not going to have it's not going to look
307:57 - like a link basically
307:58 - and let's give you a font size
308:01 - so instead of using let's instead of
308:04 - using PX let's just use REM so I can say
308:07 - 1. let's see two REM
308:10 - and let's make it uppercase this is the
308:13 - title The text transform
308:16 - and we can say uppercase
308:19 - I think there's enough styling for this
308:20 - and let's see what that does
308:23 - so as you can see now it changes all of
308:25 - that it doesn't look like a link
308:27 - everything is uppercase test decoration
308:29 - is done good
308:30 - so now the next thing that we want to do
308:33 - is to take care of this particular
308:36 - search it's not looking good so let's
308:39 - see what that is so it's under the top
308:42 - nav also and it's called search
308:44 - container right using this div class of
308:47 - sales container
308:48 - so what we're going to do is to say dot
308:51 - top nav
308:52 - since we're using the class and not the
308:55 - actual elements we're going to say dot
308:56 - search container
308:58 - unless float
309:00 - let's floaty to the right
309:04 - the
309:06 - let's save that
309:07 - it refresh you can now see that that is
309:10 - on the right that is good
309:12 - now the next thing we want to do is to
309:15 - take care of let's see let's come in
309:17 - here
309:19 - okay
309:21 - so we're already taking care of that
309:23 - particular search bar and let's just
309:25 - take care of this old form in general
309:27 - so what we can do since we took care of
309:30 - this particular you know input but we
309:33 - want to add model design to this form
309:34 - because it's not looking good right now
309:36 - so we're going to do that so what we're
309:38 - just going to do since this is already a
309:40 - form tag we can just come in here and
309:42 - say
309:43 - form
309:45 - I want the phone to have a background
309:46 - color
309:49 - I want it to be different from the
309:50 - normal background color so it's
309:52 - noticeable
309:53 - let's say
309:54 - one five one
309:57 - f30 yeah that's how it looks like
310:00 - and then
310:02 - we should have let's see a width
310:06 - of 300 PX
310:09 - and let's also have an eight
310:13 - a 43 PX
310:16 - and let's give you a border radio so
310:18 - it's actually
310:19 - you know circular at the edges something
310:22 - like this
310:24 - border radius let's see let's say 11 PX
310:30 - and display let's make this display Flex
310:34 - now just so that looks better and let's
310:36 - align
310:38 - the items
310:42 - to the center
310:44 - let's come here and see what that makes
310:47 - good so this is what we want to see okay
310:50 - so this is how that looks what I want to
310:52 - do now is to you know give it more
310:54 - stunning because I want this you can see
310:56 - that it still has like an edge but this
310:58 - has a border radius I want it to look
311:00 - you know better so I'm gonna actually
311:03 - style the input because this is the old
311:05 - form but this input now is what I want
311:08 - to style so it has an input tag let me
311:11 - just copy that
311:12 - and in here I'm gonna say input
311:17 - let's say all should be on set
311:21 - I'm going to give you a font of
311:24 - let's say 15 PX and let's give it system
311:28 - UI
311:31 - now let's give you a different color
311:33 - let's just say
311:35 - normal FFF
311:37 - and height
311:39 - now let's wrap it around everything that
311:41 - the old you know eyes that it can take
311:43 - so 100 of that and the width
311:47 - should also be 100 of that
311:50 - let's make sure that we have a semicolon
311:52 - and let's give you a padding so the
311:55 - spacing around it let's give it six
311:57 - pieces
311:58 - and then we can say 9px let's see that
312:01 - should look good
312:04 - good so as you can see this looks a lot
312:06 - better
312:07 - now let's keep going and let's see what
312:09 - we can do so now that we have that done
312:12 - I think the next thing we should just
312:13 - talk about is this image it's not
312:15 - looking good right now so let's see what
312:18 - we use to identify that image but come
312:21 - in here so we gave you a class of
312:24 - thumbnail you know copy that thumbnail
312:26 - I'm gonna come into style.css
312:30 - and I'm just gonna see since the class
312:32 - I'm gonna use Dot
312:34 - let me give you a height
312:36 - I'm gonna say I should be 350.
312:39 - and I'm gonna give it a width
312:43 - I'm gonna say that with
312:44 - be let's see 300
312:48 - and let's give you a border radius so
312:49 - it's not just like showing like this as
312:52 - you can see
312:56 - the Border radius of let's say 19.
312:58 - let's see how that looks like
313:01 - so as you can see that is smaller okay
313:04 - that's good that's what we want to see
313:07 - now the next thing that I want to talk
313:10 - about is let me come in here and see so
313:13 - what we can do now is to style this div
313:15 - tag that has this colon class so what
313:17 - I'm just going to do is to copy that
313:18 - colon class I'm going to come in here
313:20 - and I'm going to say dot colon
313:23 - and let's look at what is wrong with
313:26 - this now
313:27 - as you can see it's in the right but we
313:29 - want it to float to the left so what we
313:31 - can do is to say float
313:33 - left
313:35 - and let's say with let's give it a width
313:38 - of 25 percent
313:41 - 25
313:44 - and let's give you a padding so it's
313:46 - going to have some spacing around it
313:48 - let's say 10 PX and
313:51 - let's just say 10px also
313:55 - so that should you know give it a little
313:57 - bit of styling as it refresh and let's
313:58 - see do it so that this is how it looks
314:01 - like
314:01 - but now what do we want to do we want
314:03 - this to be in a card if we come in here
314:06 - you're going to see that we have this
314:07 - card class that is that belongs to a div
314:11 - element so I'm going to style this card
314:13 - and I'm gonna say Dot card
314:16 - what I want to do now is to say
314:19 - let me give the card its own a border
314:21 - radius so it's going to have like a
314:23 - border on its own
314:25 - but I'm going to give you a Buddha
314:27 - radius of like 19px
314:29 - and I'm going to give you a padding also
314:31 - so you're gonna see the spacing around
314:33 - the card so you're gonna see what is on
314:36 - top of the card basically let's say 15
314:40 - X
314:41 - and let's align it to the center so
314:44 - anything that is with it should be
314:47 - any text within it should be in the
314:49 - center
314:50 - and let's give it his own background
314:52 - color
314:54 - and let's say
314:57 - #151 f30 just the one we used before
315:01 - so now
315:03 - I think this should be good with this
315:04 - styling let's see the result and see if
315:06 - we need to add anything so let me hit
315:08 - refresh good so you can see now that
315:10 - this is the card right it has its own
315:12 - border radius this is the image it has
315:14 - its own border radius and the text
315:16 - within that card is centered to the
315:19 - middle so this is actually what we want
315:22 - to do
315:25 - now that we've done all the styling that
315:27 - we need what I want us to do all we're
315:30 - going to do now is to just add our you
315:33 - know JavaScript to it so we're gonna
315:36 - be getting some results from an API so
315:39 - let me just open
315:41 - oh
315:42 - page again so
315:45 - just drag this
315:47 - be able to open that
315:50 - so right now what I want us to do is
315:52 - that once we search this let's say we
315:53 - search something like smile which is a
315:55 - movie it should bring out the results of
315:57 - that movie for us with you know the
315:59 - image and then the title so for now this
316:02 - is just a static you know
316:04 - data because right now it's just the
316:07 - data that we put right here in our HTML
316:09 - but we want let's just close this real
316:11 - quick but we want this data to be like
316:13 - Dynamic like whenever we search
316:15 - something
316:16 - that is what you showed there so what
316:18 - we're going to do to what we're going to
316:20 - use to do this is an API so we're going
316:22 - to use this movie DB API so what you
316:27 - just need to do you don't need to read
316:28 - all of this you just need to make sure
316:30 - that you have an API key from this movie
316:32 - DB API to move forward now for you to
316:35 - have this API key you need to click you
316:37 - need to come to this page right here
316:39 - right and then you need to click on this
316:41 - API link so once you click on this API
316:44 - link is going to take you to where
316:45 - you're going to create an account and
316:46 - login once you do that make sure that
316:49 - you click on this API link and then it's
316:51 - going to take you to where you can
316:52 - create an API key so I have created my
316:54 - API key and this is the API key I have
316:56 - right here you need this API key to move
316:59 - forward in this tutorial so once you
317:01 - know that you have this done we can move
317:03 - forward
317:04 - so the first thing that I actually want
317:06 - to do before I go into my JavaScript is
317:08 - that right here I want to make all of
317:10 - this all these OD being inside like a
317:12 - section so I'm going to have a section
317:14 - element
317:17 - and I'm going to put all of that in
317:18 - there now this is just so that I can
317:20 - group all of this into one section and
317:22 - when I'm using the JavaScript you're
317:24 - going to understand later when we are
317:26 - coding it in JavaScript so I want to
317:28 - give it an ID of let's say the ID should
317:30 - be section
317:31 - and I actually want to get rid of all of
317:35 - this so for now I'm going to comment it
317:36 - out now this might look weird for now
317:38 - but I'm going to explain why I'm doing
317:40 - this if you come back in here and hit
317:42 - refresh we're not going to see any data
317:44 - for now
317:45 - but what I'm going to do is that I'm
317:46 - going to use JavaScript to dynamically
317:48 - automatically create all of these tags
317:51 - right here I'm going to show you in a
317:53 - bit
317:54 - so if I open this up you're going to see
317:58 - that we have the script.js so I'm just
318:00 - going to drag that script.js right here
318:02 - because we need that now
318:04 - well before we can even use the
318:06 - script.js we need to link it
318:08 - from our HTML so to connect your HTML
318:13 - file to this script.js file you're going
318:15 - to have to use the script element
318:17 - and it's going to have an A source so
318:19 - we're going to give it a search and the
318:21 - source will just be script
318:23 - dot Js
318:25 - so that is that and now when any
318:28 - JavaScript you put here will be will
318:31 - have an effect on this right here
318:33 - so I'm going to walk you through
318:34 - everything that we're going to do right
318:35 - now the first thing we're going to do is
318:37 - to create like six different constants
318:40 - or variables so I'm gonna have const I'm
318:44 - going to say API link
318:46 - and for now I'm going to leave this
318:48 - blank I'm going to come back to this
318:50 - and I'm gonna have another constant and
318:52 - I'm going to say
318:53 - IMG path
318:55 - so this is the image part that is going
318:57 - to show that is gonna you know specify
318:59 - the path or the link to the image of
319:02 - every movie and I'm going to have
319:04 - another constant
319:06 - unless it's search API now these are the
319:10 - API you know remember I said we're using
319:12 - that API right so this is specifying the
319:14 - link of where we can access that API
319:17 - from and this is specifying you know how
319:19 - are we actually going to search for
319:22 - something and get some response from
319:23 - that API
319:24 - so now that I have all of that what I'm
319:27 - going to do is to give you some values
319:28 - so right here on API link I'm going to
319:31 - paste in this code this link actually
319:34 - and what you just need to do is to type
319:36 - out what I pasted and I'm going to
319:37 - explain it for you
319:40 - so right here I'm going to paste this
319:43 - in here so as you can see this is like
319:46 - the link to that the movie DB that I
319:49 - talked about but we are accessing it
319:50 - through its API so just write everything
319:53 - out the way it is right here with the
319:55 - page and every single thing the only
319:57 - thing you need to change is your API key
319:59 - remember when I showed you how to create
320:01 - an API key from there make sure that
320:03 - this key right here is your API key so
320:07 - this is my API key but make sure you
320:08 - change it to yours
320:10 - and for the image part I'm also going to
320:12 - paste in an image link and I'm going to
320:15 - show you what this is so this image part
320:18 - is actually the root part to every
320:19 - single image of the movies so that is
320:22 - what this is and then for the search API
320:25 - I'm also gonna paste in the query so
320:29 - what this does is that if I paste this
320:33 - it uses that the movie DB right to
320:36 - search for a movie and you must change
320:40 - this to your API key also that's the
320:42 - only thing you need to change and this
320:43 - query we are going to add our own query
320:46 - to it so what I mean by that is that the
320:49 - query that we use is what we're going to
320:51 - add like let's say for example if a user
320:53 - searches for like you know Black Adam or
320:55 - something else that is what is going to
320:57 - be put in this query right here so that
321:00 - is where you need to know so let's get
321:02 - rid of this let's make this double
321:03 - quotes
321:04 - right so now that we know that we have
321:06 - all of that since this is Javascript you
321:09 - must add you should add the semicolon at
321:12 - the end of this
321:15 - and now the next thing I'm going to do
321:17 - is to actually get some elements in this
321:20 - HTML file so I want to get this whole
321:22 - section so what let me just walk you
321:25 - through what I'm going to do to actually
321:26 - make this work so what I'm going to do
321:28 - is that I'm gonna when a user searches
321:30 - for something and click enter
321:32 - we're going to have a function that gets
321:34 - the result of what the user search then
321:36 - sends that query to this API and the API
321:40 - is going to send up some response so
321:41 - let's say the user searches for like
321:43 - Barbie right it's going to send us let's
321:45 - say 10 or 20 different responses with
321:48 - the image and the name so when I get
321:50 - those image and the name I'm then going
321:52 - to create
321:53 - a div these all of this div tag right
321:59 - containing the data of that particular
322:00 - image and name right here you can see
322:02 - that we just have one div tag but what I
322:04 - want is that depending on how many
322:07 - results right that we get that is the
322:09 - amount of div tag I want to have so
322:10 - that's why we're going to have to create
322:12 - this div tag from JavaScript so there's
322:14 - a way JavaScript can create an element
322:16 - for us and it's basically going to
322:18 - create all of this I'm actually going to
322:20 - delete all of this later but for now I'm
322:21 - going to use it to reference when we are
322:23 - creating all this tag in JavaScript so
322:26 - let's move forward and let me explain so
322:28 - what we need to do now is to get
322:31 - this we're gonna get this section right
322:34 - and then we're gonna we have to get the
322:36 - form which is this form right here so we
322:38 - can actually get the from the phone we
322:41 - can get the you know the query that the
322:43 - users search for so what I'm going to do
322:44 - now we need this section so I'm going to
322:47 - say let me name it main I'm going to say
322:49 - equals to document
322:51 - dot get element
322:56 - by
322:58 - ID
323:00 - I'm getting an image section
323:02 - so by getting the elements by the ID and
323:06 - the ID is section right we're going to
323:09 - do the same thing
323:11 - for the form and search so we're going
323:13 - to say form search so we want to get
323:15 - this old form
323:17 - right and by getting it by the ID we
323:19 - need to
323:20 - use the ID of form
323:23 - and then for this search since we want
323:26 - to get the actual query
323:28 - we're going to use the ID of this input
323:30 - and we're going to say query
323:33 - so once we have that done the next thing
323:35 - I want to do now we're going to have to
323:37 - create a function named return movies so
323:41 - let's just say
323:44 - let's see let's say function
323:49 - I'm not going to say return
323:52 - movies
323:55 - and we're going to give it a URL
324:00 - go outside here I want to add this and
324:03 - what we're just going to say is we're
324:05 - going to use the fetch so we're going to
324:08 - fetch from the URL
324:10 - so then
324:12 - in a serious
324:15 - equals greater than res dot Json because
324:18 - I'm going to get Json response
324:22 - then we're also going to say that then
324:27 - function
324:30 - and now we're going to say data
324:32 - right and right here we're going to open
324:35 - under curly braces and let's just say
324:37 - console
324:39 - let's print out the data in the console
324:41 - so you can just say data the result you
324:44 - can use this to debug later let's just
324:46 - have that right there and now what we
324:49 - can just basically do is to say data
324:51 - results so I'm going to come down in
324:53 - here and I'm going to say
324:58 - right here we actually need to have this
325:00 - semicolon to show that that ends there
325:02 - we're going to say the data that we get
325:04 - the results
325:06 - dot for each so we're basically looping
325:09 - through all the elements in the result
325:11 - so for each element
325:14 - I'm going to say let me have it here
325:16 - element
325:20 - and then what we want to do is to say
325:26 - I'm going to create some constants now
325:28 - so I'm going to show you all of this why
325:30 - I create all this constant but for now
325:32 - let me just say div
325:34 - equals to
325:35 - document
325:38 - dot create
325:40 - element
325:44 - so I'm creating a new div tag right in
325:48 - this one HTML so as you can see when we
325:50 - say create element it's creating a new
325:52 - div element and we're storing that in
325:54 - this constant name div so for now let's
325:57 - just you know go through all of this and
326:00 - what I want to do
326:02 - I'm going to show you why we use all of
326:04 - this later but for now let's
326:07 - make this here
326:09 - I'm gonna do this and what I need to do
326:12 - is to add this here just to have
326:18 - profit and right here we need to have
326:21 - the closing
326:25 - bracket let me put that there so this is
326:28 - everything in this particular function
326:30 - for now which is working so what I want
326:33 - to do is up here I actually want to call
326:35 - these return movies
326:37 - the op I'm going to paste that function
326:40 - so I want to you know go that function
326:42 - up here and the URL that I'm going to
326:44 - give it is this API link right here so
326:47 - that's the link that you know we want
326:49 - you to fetch from
326:53 - so now I'm going to explain everything
326:55 - I'm going to do now briefly
326:57 - so what I want to do is I want to create
327:01 - you know a div tag for all of this so
327:05 - I'm going to create a div tag for the
327:07 - row I'm going to create a div a div
327:09 - element for the colon for the class yeah
327:12 - I'm also even going to create like an
327:14 - image element I'm going to create a
327:16 - center element this H3 I'm going to
327:18 - create everything and once I create
327:20 - everything I'm going to show you how I'm
327:21 - going to put this image in the center
327:23 - I'm going to put this Center in this div
327:26 - that has a class of card so I'm going to
327:28 - show you how we can do that so what I'm
327:30 - going to do right here I have div right
327:32 - what I'm going to do is to say div card
327:34 - because that's the first one I want to
327:36 - create right here the first div card and
327:39 - I'm going to say document or create
327:41 - element div so you're just creating a
327:43 - div that element and the next thing I
327:47 - want to do
327:49 - let me just actually copy this
327:51 - I want to create the div row
327:55 - which is also create element div and I'm
327:58 - going to create the div column
328:02 - and the next thing I want to create
328:04 - is for the image so I'm going to create
328:07 - an image element so I'm going to create
328:09 - IMG
328:10 - and I'm going to create the title so the
328:13 - title right here which is an H3 so we
328:16 - have to say title
328:17 - and we're gonna create an H3 element and
328:21 - I'm going to create the last one I'm
328:24 - going to create is let's see I think I
328:26 - need to create yeah this Center run
328:28 - right here now we're creating every
328:30 - single element just so it doesn't you
328:32 - know affect the styling
328:33 - so I'm gonna say
328:36 - right here I'm just going to say Center
328:38 - a create element Center
328:41 - right now that should work now that I've
328:45 - created all this element
328:47 - what I'm going to do is that I am now
328:50 - going to start inputting them into each
328:51 - other so first of all
328:54 - before I even input anything what I'm
328:57 - going to do is to say
328:58 - this title since I know that this title
329:00 - right here is basically showing the
329:02 - movie title right and I know that this
329:05 - image I created right here is meant to
329:07 - show the image of that movie then what I
329:10 - can now do is to say title
329:13 - dot inner HTML so using inner HTML
329:17 - I'm gonna say
329:19 - so we're going to have to use
329:22 - this particular code the code is the one
329:27 - that we use when we are you know giving
329:28 - it a value in here in HTML so this code
329:32 - so in there I'm going to use the dollar
329:33 - sign
329:35 - and I'm going to say element
329:40 - DOT type 2. so this element that we you
329:44 - know right here we know We're looping
329:46 - through every single result and we're
329:48 - giving it this element so we're saying
329:50 - element dot title and whenever we get a
329:52 - response from this particular API it
329:55 - saves it Returns the movie name as title
329:57 - right so that's why we're using element
329:59 - dot title and the next thing that we are
330:02 - going to do
330:03 - is to say image dot so this image now we
330:08 - don't when we say inner HTML it
330:10 - basically says
330:12 - this value so by saying this value
330:14 - should be you know the title of the of
330:17 - the movie but for this image we're not
330:19 - giving it a value what we want to set is
330:21 - the attribute which is SRC we want to
330:24 - give that attribute of value
330:26 - so we're going to say image dot SRC
330:29 - right I'm going to say equals to now
330:33 - remember this image part that we created
330:34 - this shows the path to that image
330:37 - so I'm going to say image but
330:41 - plus now I'm going to say element
330:47 - Dot poster
330:51 - path
330:53 - now what this does is that you remember
330:56 - when we did element.2 I said that
330:58 - because it Returns the movie name as
331:00 - title and for poster part it Returns the
331:03 - link to that image as poster part but we
331:06 - need to add that particular link or that
331:08 - particular one that it returns to this
331:10 - so imagine it returns let's say it
331:12 - returns something like you know
331:15 - um six this is a slash whatever imagine
331:17 - that's the poster part to that URL we
331:20 - are adding it to this root URL that is
331:23 - why we do so I'm just going to get rid
331:25 - of that that is why we do
331:27 - imagepath.element.posterpart
331:30 - so now that we know that we have that we
331:32 - basically already have what we need
331:35 - which is the movie name and the image of
331:38 - the movie
331:39 - so what I want to do now is I'm going to
331:42 - say this Center that we created I want
331:44 - to add this image tag under the center
331:48 - since it is under the center right here
331:49 - to do this I'm going to say Center that
331:52 - we created
331:54 - dot append child now when we say append
331:58 - child it allows us to add an element
332:01 - under another element so now if I say
332:04 - append image as a child of center that
332:07 - is true here because image is actually a
332:08 - child of Center
332:10 - so once I do that the next thing I want
332:12 - to append by coming here
332:16 - is I want to append this center now to
332:20 - this card and I'm going to append this
332:22 - H3 also to this card so I'm going to
332:24 - append the center element and the title
332:26 - element so now I'm going to say
332:28 - div card right here
332:33 - dot append
332:39 - child
332:40 - and the child I want to append is the
332:43 - center that should be under that
332:46 - I'm going to do the same thing but this
332:47 - time around I also want to append it
332:50 - it tied to
332:53 - now the next thing I want to append is
332:55 - now this oh
332:56 - card div I want to append it to this
332:59 - colon div and after that I want to
333:01 - append this column div to this row div
333:03 - so I'm just going to do that so I'm
333:05 - going to say
333:06 - div colon
333:08 - I want to append gift card as a child
333:15 - and now I'm gonna do it for the last one
333:17 - and I'm gonna say
333:18 - devro
333:21 - I want to append
333:23 - deep colon as a child
333:26 - so now as you can see it says we first
333:29 - have div row which is what we have here
333:31 - and under it we have colon only to have
333:33 - card you can see under the row we have
333:35 - column under column we have card under
333:37 - card we have title and Center
333:40 - look under card we have titu right and
333:43 - center and under Center we have the
333:45 - image as you can see right here on the
333:47 - center we have the image but now all of
333:49 - these I want to add it to this section
333:51 - this section right here because if I
333:54 - just say add right is it's just going to
333:57 - add it like anyway it wants or right now
334:00 - basically what I've done is I created
334:02 - this div and I said we should append all
334:04 - of this but I've not told you where all
334:07 - of this should actually go so if I say
334:09 - this div row right should go into this
334:12 - section that is already in here
334:14 - then what it's going to do is that it's
334:16 - going to take all of this and put it in
334:18 - this section so I'm just going to do is
334:20 - to say
334:22 - I think we already got the section using
334:24 - main so this main right here I'm just
334:27 - gonna say main dot append
334:30 - shout and once I append devro as a child
334:33 - that means all of this goes under this
334:37 - so divro is not a child and that is
334:39 - basically what we want
334:41 - so all of this should be good
334:44 - and
334:45 - yeah I think all of this should be
334:47 - working the next thing that we want to
334:49 - do is to actually create an event
334:51 - listener so this event list now is going
334:54 - to be like for the form so that when the
334:57 - form is submitted
334:58 - you know we know when you submitting and
335:00 - we get the value of that form and then
335:03 - you know we call these return movies
335:05 - right here
335:07 - so what I can just do is to say
335:11 - form dot add event
335:15 - event listener
335:18 - so I want to listen on submit so submit
335:21 - is the one for the form so whenever the
335:23 - form is submitted right
335:26 - say e
335:29 - and then
335:31 - what we can just do is to say
335:34 - let's remove all of this
335:36 - and just add this and say
335:39 - e dot prevent
335:44 - default
335:48 - so right here we're going to stop that
335:49 - and then we're going to say main dot
335:51 - inner
335:52 - HTML
335:55 - equals blank now the reason why we're
335:58 - saying main dot inner HTML equals blank
335:59 - is because when someone searches for
336:02 - like a new query a new movie we want to
336:05 - remove all the other movies that were
336:06 - there and replace it with the new movie
336:09 - that they search for so this allows us
336:11 - to remove all the movies that we
336:12 - initially there and now we want to
336:14 - replace it so let's first say let's get
336:17 - the search
336:19 - item
336:22 - go to search the value right so this is
336:25 - actually the actual value that these are
336:27 - input
336:28 - and this search remember is what we got
336:30 - from here which is the query of this
336:33 - particular if you come here of this
336:35 - input
336:37 - so now that we're getting the value of
336:38 - that search then we cannot use static
336:41 - condition and say if there's actually a
336:43 - search item
336:44 - okay we actually get a search item then
336:47 - we want to say
336:49 - I want to call these return movies
336:55 - and we're going to call return movies
336:57 - giving it the search API
337:00 - plus the search item
337:04 - plus this search item that we are
337:07 - passing in here
337:09 - and after that we just want to clear up
337:11 - that particular
337:13 - input so search the value
337:16 - equals clear so what this is doing is
337:18 - that whenever someone searches and hit
337:20 - enter we just want to show the result
337:22 - and clear up what was in there you can
337:24 - add that you don't need to add that it's
337:25 - not that important
337:27 - so we put the semicolon to end that so
337:30 - as you can see all of this should be
337:32 - working
337:33 - now let's test it and see what we've
337:35 - done to this point
337:36 - if I hit refresh
337:39 - now you can see that nothing shows let
337:41 - me search let's say smile
337:44 - and hit enter so nothing shows still now
337:47 - what we need to do is right here
337:51 - we need to add let's say the particular
337:56 - attributes so what I'm going to do is
337:58 - because in here you can see that this
338:00 - div card
338:01 - where's the diff card
338:03 - if we come here
338:06 - you can see that
338:07 - for example
338:09 - because this div has a card as a class
338:13 - of card so we actually need to set all
338:15 - these attributes for it so this div
338:17 - Cloud we already know that it has a
338:19 - class of card so we can now say diff
338:21 - card we need to set its attribute when
338:23 - we are creating it out here say that set
338:26 - attribute
338:31 - am I going to say class
338:34 - I'm gonna say card
338:38 - so this is what we need am I going to
338:40 - keep doing that
338:41 - but basically all of them because all of
338:43 - them has one or two attributes so we're
338:46 - gonna say
338:48 - colon and I think
338:50 - the image has two attributes and the
338:53 - type two yes it has an attribute also
338:56 - this Center doesn't have an attribute so
338:58 - now let's check what attributes for row
339:00 - and column
339:01 - so row
339:03 - basically has a class of row and column
339:05 - as a class of column so we just let's
339:07 - copy colon
339:10 - to set a class of colon and for row set
339:13 - a class of row so diff guard has a class
339:16 - of card divro has a class of row and D
339:18 - followed as a class of colon and for the
339:21 - image we have two different attributes
339:24 - and the attributes we have are this
339:27 - class so we need this class and we
339:30 - actually need an ID for this image also
339:32 - so let's see for image
339:37 - copy the class so let's say thumbnail
339:41 - we need an ID for this image and let's
339:44 - give it an ID of let's see let's say
339:46 - image
339:51 - let me give it an ID of image for the
339:53 - title the title just has a ID
339:57 - come in here so we didn't create an idea
340:00 - but let's give it an ID
340:02 - of title now the reason why we're giving
340:03 - all of this this ID is because we
340:07 - where we need to get the values of all
340:10 - of this right so let's see
340:13 - so we already have Thai 2 we have
340:15 - Elementor title we have image so we're
340:17 - already giving it these values and the
340:19 - reason why we're giving it all this ID
340:20 - and you know classes and all these
340:22 - attributes is basically because in our
340:24 - CSS when we're styling it we you know
340:27 - use the attribute to style them so now
340:30 - that we have all of this done let's see
340:32 - if there's any changes
340:34 - so if we let's say
340:37 - so as you can see no result is showing
340:39 - there's probably some errors in here so
340:42 - let's see what that is
340:44 - um you scroll down to this function
340:48 - let's see okay right here we have two
340:51 - different two brackets that should just
340:53 - be one let's see if that make any
340:55 - difference
340:56 - does it refresh oh good so as you can
340:58 - see we have some you know results
341:01 - showing right
341:03 - so let me see if I search it says smile
341:06 - that doesn't change the result so
341:08 - there's still some errors and this is
341:10 - not the styling that we want so let's go
341:12 - down and try to fix it so first of all
341:15 - for this styling
341:16 - okay so you see we have a certain
341:18 - attribute but here we are setting the
341:20 - attribute for diff card right here we
341:22 - should be setting the attribute for div
341:24 - row right here which is setting the
341:25 - attribute for diff colon but we are
341:27 - setting all the attribute for diff card
341:29 - so that's where the error is coming from
341:30 - so if we just try to fix that
341:34 - image the set attribute
341:39 - and then tie to
341:41 - and that so now if we come back in here
341:44 - and let's just try to refresh this page
341:46 - great so as you can see the results are
341:49 - showing so if I search for smile let's
341:52 - see
341:53 - the result doesn't change that means
341:55 - there's an error somewhere
341:58 - the error can't be here because this
341:59 - this is not where you know
342:02 - that happens
342:04 - let's see form dot add event okay so
342:07 - there is a
342:08 - error in the spelling of listener so
342:11 - there should be E before n
342:13 - and right here we should have a
342:15 - semicolon so after all this our app
342:18 - should be working perfectly
342:20 - if I come in here now let me hit refresh
342:22 - let me search for smile
342:24 - great so as you can see now we have
342:26 - results on smile we can scroll down to
342:28 - see different results as you can see
342:30 - everything is basically working
342:32 - perfectly gives us a bunch of results on
342:35 - the movie smile let's say I search Bobby
342:38 - right it gives us lots of results on the
342:41 - movie Barbie so that is working very
342:43 - well and this is you know the basic app
342:46 - that we've built so let me go through
342:48 - everything that we did the first thing
342:50 - we did was to style the you know create
342:52 - all the elements we need in the HTML
342:54 - then we came into the CSS and styled it
342:57 - and then we came into JavaScript and
342:59 - showed you how to you know get results
343:00 - from the API and use that and show those
343:03 - results on this page so as you can see
343:05 - that is working perfectly and right now
343:08 - we can even get rid of this particular
343:10 - you know row if we want so if I come in
343:13 - here unless here hit refresh
343:16 - everything is still showing and let me
343:19 - explain why we even without searching we
343:21 - just have some results so right here
343:23 - where I run so I'm just gonna go back in
343:26 - here right here where I run these return
343:29 - movies URL and I just use the API link
343:32 - so what this is doing is it's just
343:33 - getting all the images I mean sorry all
343:36 - the movies on the normal page of this
343:39 - the movie DB website so without
343:42 - searching for anything without filtering
343:43 - filtering any such it's just giving you
343:46 - like the latest movies on this site so
343:48 - that's why we see we have some results
343:49 - showing here but then when you search
343:51 - like I said smile it then shows some
343:53 - results about what we search so that is
343:56 - working perfectly and everything is
343:59 - running so I hope you understood
344:00 - everything that we've done in this
344:01 - tutorial up to this point
344:07 - I'm about to show you how to create a
344:09 - back-end API that can be used to create
344:11 - movie reviews an API is a way for two or
344:14 - more computer programs to communicate
344:16 - with each other
344:18 - in our case we'll use URL endpoints that
344:21 - can be used to interact with the
344:22 - database
344:24 - this is more advanced than the beginning
344:25 - JavaScript project but don't worry if
344:28 - you don't understand everything at first
344:30 - I recommend following Along on your own
344:33 - and you'll eventually see how everything
344:35 - comes together so let's create the back
344:38 - end API that we'll use to create read
344:41 - update and delete movie reviews
344:45 - I'm on replet.com and I'm going to
344:48 - create a new replant and we're going to
344:51 - create a node.js replet to write
344:54 - JavaScript for the back end so I'll just
344:57 - do create Rebel
345:03 - and now I'll just I could have created
345:05 - the name when I was creating it but I
345:07 - can also update the name here so we have
345:10 - the default name but I can just type in
345:12 - review
345:14 - back end
345:16 - okay
345:17 - that's a good name
345:20 - so one good thing about replit is that
345:22 - you don't really have to do npm install
345:24 - anything because when you run your code
345:28 - anything that you've imported it will
345:30 - automatically install for you but one
345:33 - thing we're going to do we're actually
345:34 - going to be using import statements from
345:36 - es6 and with node.js that's not that's
345:40 - not done by default so we have to go
345:42 - into our package.json now if you
345:46 - um if you're doing this locally you
345:48 - could do the same thing once you
345:50 - initialize your your project with npm
345:54 - init it will create a package.json but
345:57 - we're doing it automatically is created
345:59 - on replit so what I'm going to do is
346:02 - right after main I'm going to add type
346:07 - input module
346:10 - this will allow us to use import
346:12 - statements which I will be talking about
346:14 - more later
346:16 - and I like how there's two see how
346:18 - there's two spaces here everything's
346:20 - indented twice well let's make that the
346:22 - default it's currently not the default
346:24 - so I'm going to go to indent size and go
346:26 - to two Okay now I am going to open my
346:30 - index.js
346:33 - and we're going to create the backend
346:35 - server we're going to separate our main
346:38 - server code from the code that is
346:40 - accessing the database and all the
346:42 - routes will be in separate files now we
346:45 - could do this all in one file especially
346:47 - since we're doing a pretty basic app but
346:50 - when you create a much larger
346:53 - application you really want to have the
346:55 - separation of concerns between your
346:57 - different files so we're going to use
347:00 - some best practices for how to separate
347:02 - different parts of your code and that
347:04 - will allow you to see how you can
347:07 - access code from one file in another
347:10 - file
347:11 - and eventually we will be using index.js
347:14 - but actually we're going to first create
347:16 - another file called server.js so click
347:19 - new file server.js and I am going to
347:22 - make this a little smaller because we're
347:24 - going to be focusing on the code for now
347:26 - and in This Server file we're going to
347:28 - create an Express server attach the
347:30 - cores and express.json middleware since
347:32 - we'll be sending and receiving Json and
347:34 - make the server listen on Port 5000. so
347:37 - let me explain a few of those things
347:40 - before I start typing some code here but
347:43 - we're going to be using Express which is
347:46 - a lot a fast and lightweight web
347:49 - framework for node.js and it makes it
347:52 - easier to make HTTP endpoints that we
347:56 - can use for our web server and then
347:58 - we're also going to be using cores
348:00 - that's the cross-origin resource sharing
348:02 - which allows agx request to skip the
348:05 - same origin policy and access resources
348:07 - from remote hosts basically it will
348:12 - prevent some errors when we're trying to
348:14 - access our database from a different
348:16 - host as our server
348:19 - and the course package provides an
348:22 - Express middleware that can be used to
348:24 - enable cores with different options now
348:26 - if a lot of this that doesn't make sense
348:29 - don't worry about it just follow along
348:30 - and a lot of things will start to make
348:32 - sense as we go so I said we're going to
348:34 - be using Express so I'll do import
348:36 - Express
348:38 - from Express so normally if you're doing
348:42 - this locally you would have to do npm
348:44 - you would have to go well let me just
348:46 - show you how you do that locally we in
348:48 - replet we have a shell and I can clear
348:51 - that and I could do npm install Express
348:55 - and that's how you would ins do it
348:58 - locally and I could do it on replit also
349:01 - but it's going to automatically install
349:03 - Express when we press this play button
349:06 - to run our program so we don't need to
349:09 - install it manually so so it's going to
349:13 - be looking for the express that's been
349:15 - installed and it's going to install into
349:17 - our node modules directory that's one
349:19 - great thing about JavaScript is that
349:21 - there's tons of
349:23 - extra Frameworks and there's tons of
349:25 - Frameworks and code that has already
349:27 - been written and you can just import
349:29 - that code and then you don't have to
349:30 - write things from scratch and it makes
349:32 - it it makes it much easier to write
349:34 - programs in JavaScript to use code that
349:37 - someone else has already written so
349:38 - Express is just one of those popular
349:40 - JavaScript packages or a set of
349:43 - JavaScript code that we can use to make
349:45 - creating our JavaScript program a lot
349:47 - easier and then we're also going to
349:49 - import chords like I said
349:51 - and we'll do from cores and this is
349:54 - something else that will be installed
349:55 - automatically into a node modules
349:57 - directly when we run our program like I
349:59 - said that helps with the the cross
350:01 - origin resource sharing if you've done
350:04 - other web development you'll probably be
350:06 - familiar with that and if you haven't
350:08 - you're going to get familiar with it
350:09 - soon and we're also going to now import
350:12 - a file that we are going to create so
350:14 - these first two things we're not
350:16 - creating it'll just be imported but now
350:18 - we're going to import a file that we're
350:21 - going to create so we're going to import
350:22 - the file reviews
350:25 - from well that's not the name of the
350:27 - file that's the name of what we're going
350:29 - to export from this file and the file
350:31 - URL is just API slash reviews dot route
350:37 - dot JS so we are going to have our URL
350:41 - routes separate from our main server
350:44 - file and now we have to get access to
350:47 - express
350:48 - app cons app that's a variable that
350:52 - we're just going to load Express into
350:54 - and this is what we'll be using to
350:56 - create our web server now we can do
350:59 - app.use now this is how we can use
351:03 - middleware middleware are just different
351:06 - basically programs that Express is going
351:08 - to use to change how things work so
351:11 - we're going to first
351:13 - do cores though we've already imported
351:16 - and then we're going to app.use
351:21 - express.json
351:24 - so what this one is this will allow our
351:27 - server to accept Json in the body of a
351:30 - request so if somebody sends a get
351:33 - request or post request to our server
351:35 - it'll be able to to read Json so
351:38 - requests are when you go to a website
351:41 - that there's a get request to get the
351:42 - information from the website or it can
351:44 - do a post request to send information to
351:46 - the reg to to the URL and now we'll be
351:49 - able to send and receive Json because
351:51 - we're using this middleware it just adds
351:54 - some extra features to our our web
351:57 - server that we're creating okay now
352:00 - let's specify some of the initial routes
352:03 - so the initial routes are basically the
352:06 - URL that you access to get to send and
352:09 - receive information so we'll do app dot
352:13 - use
352:14 - and then we'll pass in the basically the
352:18 - URL and so it's going to be that we have
352:20 - a root URL and then it's going to be
352:22 - slash API slash V1 slash reviews now
352:27 - this is just that we can use any URL
352:29 - here but this is best practice uh when
352:33 - we are creating an API it's often you
352:37 - often want to specify that it's an API
352:38 - and then often it's good to have
352:40 - versions of the API just in case in the
352:42 - future you create a new version now this
352:45 - is just like a demo app so we know
352:47 - there's never going to be a version two
352:48 - but it's good to start learning the best
352:50 - practices now and we for this URL we are
352:54 - going to use the route from this file so
352:57 - I'm just going to put a comma here and
352:59 - then I'll put reviews okay so now we're
353:03 - gonna use the routes that we we saw to
353:05 - create later but this is showing that
353:07 - for this URL we're using that route okay
353:10 - now we're going to create just the
353:13 - backup route if someone one goes to a
353:15 - URL that's not included in what we
353:18 - create in that route file we'll do
353:21 - app.use and then if I put asterisk that
353:24 - just means anything else and now instead
353:28 - of loading it from a different file
353:29 - we'll just put it right here and we're
353:31 - putting a little a little function right
353:33 - in the line here so
353:36 - I'll put r a q r e s so that's the
353:39 - request and result and this is something
353:42 - that's just part of Express the the
353:45 - information that it's requesting here
353:49 - and for the res that's the response not
353:52 - result the response is going to be res
353:54 - dot status
353:57 - and it will send the 404 ER the 404 code
354:01 - and then it's going to send some Json
354:04 - and it'll say
354:06 - error
354:08 - not
354:10 - bound now we'll eventually see this this
354:13 - appear in a web browser when we go to a
354:15 - specific URL that's not included here
354:18 - and finally we talked about how we are
354:21 - going to be connecting different files
354:24 - together well next we are going to
354:27 - export our app as a module just like
354:30 - this export default
354:33 - app
354:34 - so the app is this app that we created
354:37 - here that we added all these things to
354:38 - and this will allow us to import app in
354:43 - the file that accesses the database
354:44 - which will be the file will run to get
354:47 - the server running
354:49 - so when you want to use code between
354:51 - files you're usually going to have an
354:53 - export statement at the end to export
354:55 - the something from that file to use to
354:57 - import into a different file
355:00 - so we want to separate our main server
355:03 - code from the database code so here's
355:06 - our our main server code so let's go
355:09 - back to the
355:10 - index.js this is where we're going to
355:13 - start making the database code but for
355:17 - the to start working with the database
355:19 - we need a database now there is a way to
355:23 - use a databases included in repl it has
355:26 - a um where is it here the database here
355:29 - but this is this is a pretty a
355:33 - simplified database which probably would
355:36 - be okay for our purposes but it's not
355:38 - going to really work in a production
355:40 - environment so I'm going to show you how
355:41 - to set up mongodb as our database we're
355:44 - actually going to use a different web
355:47 - the mongodb atlas website to set up our
355:50 - database now you can run mongodb locally
355:53 - and we could even set up to run mongodb
355:55 - right in our our shell here but we're
355:58 - going to be using the online version of
356:01 - mongodb where it just stores everything
356:03 - in the cloud it actually simplifies
356:05 - things and they have a free plan that we
356:07 - can use okay so now I'm over on the
356:09 - mongodb atlas website and you can either
356:13 - create an account or sign in I'm just
356:15 - going to click sign in here
356:19 - now you may have to figure out some
356:20 - things that when you're creating your
356:21 - account for the first time it's not
356:23 - going to go to this right away but at
356:25 - some point either during their account
356:26 - creation process or after the account
356:29 - creation project process you'll be in
356:31 - your projects page and you'll go to new
356:33 - project it may go directly into the
356:36 - create a project page when you're
356:38 - creating a new account so we'll just
356:39 - name the project I'm going to call this
356:42 - movie reviews
356:47 - okay next
356:49 - and then we can just go through we'll
356:51 - just use the default project owner which
356:54 - is me
356:58 - okay now I'm going to build a database
357:01 - now we have a few different options I'm
357:04 - going to go with the free option which
357:05 - will definitely be good enough for our
357:07 - purposes if you want to specify any of
357:09 - these things here I'm just going to
357:10 - leave this all default and click create
357:12 - cluster so this will create a free
357:15 - database here and now I can create a
357:20 - username and password so I will create a
357:25 - username and password here and then just
357:28 - click
357:29 - um create user
357:31 - okay so the username and password just
357:34 - so you know this is just for this
357:36 - database the username you put here is
357:40 - completely separate from your mongodb
357:42 - username it's separate from your replit
357:45 - username you can basically use anything
357:47 - here it's only for the specific database
357:50 - we're creating right now and then we
357:53 - have to decide how we're going to
357:54 - connect to it well I'm going to do Cloud
357:56 - environment because we're connecting
357:57 - from replit which is a cloud environment
358:00 - and then we have to configure
358:02 - um enable access from specific IP
358:04 - addresses now since replit uses
358:08 - um it doesn't always have the same IP
358:09 - address it could be a variable we have
358:11 - to make it accessible from any IP
358:14 - address to do that we'll just do
358:16 - 0.0.0.0 zero and now we'll be able to
358:20 - access from any IP address and I'll just
358:22 - click add entry there and then we'll
358:24 - keep going down and then finish and
358:27 - close and now we can say go to database
358:30 - I am going to uh yeah I'll click keep
358:34 - that clicked so now it's creating our
358:37 - database which is going to take a few
358:41 - minutes to create here while this is
358:43 - creating oh I guess it just already
358:46 - created it did not take a few minutes if
358:48 - I I'll zoom out here so you can kind of
358:50 - see what this uh all this is what the
358:53 - page is more likely to look like to you
358:55 - so if I go to connect this is what we're
358:58 - going to we're going to get some
358:59 - information here to connect to our
359:01 - database from replit so I'm going to go
359:03 - to connect your application here and
359:05 - then I'm going to make sure I'm on the
359:07 - node.js it's the default here and we
359:09 - have this connection string now we're
359:11 - going to need this later I'm just going
359:13 - to click the copy button to connect I'm
359:15 - copying this connection string which is
359:17 - we're going to put into a certain spot
359:19 - on replit so they can connect to our
359:22 - database so now let me just go back over
359:24 - to wrap it
359:25 - so before we start typing into anything
359:28 - into our index.js let's create some
359:30 - environment variables because if you
359:32 - remember we just created a password and
359:35 - you never want to store a password right
359:37 - in your Javascript file you want to
359:40 - store it in an environment variables
359:42 - environment variables are things that
359:44 - are not often like are not saved or
359:47 - they're harder to access
359:49 - any special information like passwords
359:52 - or anything that could change regularly
359:54 - you may want to put in an environment
359:56 - variable instead of write in your code
359:59 - and also with environment variables if
360:01 - you're going to ever up put things on a
360:03 - GitHub you never want to upload
360:06 - passwords or anything onto GitHub so you
360:07 - want to store that into an environment
360:09 - variable that's only stored in the
360:10 - environment and then you can still
360:12 - access that the what that variable is
360:15 - from your program but you don't actually
360:17 - have to have the the hard-coded password
360:20 - right in your program so in replet
360:22 - there's a special way to deal with
360:24 - environment variables it would be a
360:27 - little slightly different if you're
360:28 - working on a local machine but if you're
360:30 - just doing it locally you can just kind
360:31 - of look up how you would deal with
360:33 - environment variables locally but on
360:34 - replit we're going to go to secrets and
360:37 - let me bring this out here so we're
360:40 - going to create a key so the key is like
360:43 - the variable name and then the value
360:45 - would be the the value the value of the
360:47 - variable so we're going to create one
360:49 - called uh
360:51 - username and then I will put bow so this
360:55 - was just the username I created for our
360:57 - database add new secret now let's do
361:02 - password
361:04 - okay you have to promise not to tell
361:06 - anybody what this password is this is
361:07 - just between me and you it's a complete
361:10 - secret you cannot share this password
361:12 - with anybody but I use free code Camp
361:15 - okay so I'll add new secret and now we
361:18 - we can now access these in our code
361:21 - let's just close that for now and let's
361:24 - start creating this file so first so in
361:27 - this file we're going to connect to the
361:28 - database and start the server so first
361:31 - we'll do import app from
361:36 - let's see uh
361:40 - server.js that was just the other file
361:44 - we created server.js and we exported the
361:46 - app down here and now we're importing it
361:49 - so now we can use that code in this file
361:51 - and we kind of have separation of
361:53 - concerns between what we're trying to do
361:55 - here so now we'll do import Mong
361:59 - DB from
362:02 - mongodb now this is just a JavaScript
362:05 - library that when we run our code it'll
362:06 - automatically be imported and then we
362:09 - can use these special functions that
362:11 - will create that the people who create
362:13 -  B also create this JavaScript
362:15 - library to make it easier to interact
362:17 - with our mongodb database from
362:19 - JavaScript
362:21 - and now we're going to import another
362:23 - thing and some from a file that we we
362:25 - still have to create so this is going to
362:27 - be called reviews Dao
362:31 - now and it's been could be called it's
362:33 - going to be from
362:35 - uh dot slash Dao slash reviews
362:39 - d-a-o dot Js
362:42 - now Dao here that stands for data access
362:46 - object this is basically a common
362:50 - pattern for writing programs that work
362:54 - with databases so the data access object
362:57 - pattern separates a data resources
363:00 - client interface from its data access
363:03 - mechanisms it adapts a specific data
363:06 - resources access API to a generic client
363:09 - interface and so we're following that
363:12 - pattern in how we set up this this
363:14 - program and that's why it's called Dao
363:17 - here
363:18 - okay we've imported everything we need
363:20 - to import now we'll create some
363:22 - variables we're first going to create a
363:24 -  client this is something that
363:27 - comes right from mongodb the mongodb
363:29 - JavaScript library
363:31 - um that was created by mongodb to make
363:34 - it easier to work with our database so
363:36 - mongodb client so I've created a
363:40 - variable called client that we get
363:42 - from this and now you'll see how we'll
363:45 - be able to use that to connect to our
363:47 - database now let's get access to our
363:50 - username and password that we stored in
363:52 - environment variables so we'll do a
363:55 - const
363:57 - username
363:59 - equals
364:01 - and then we will do this is how we get
364:03 - an environment variable process dot EnV
364:06 - now this is actually
364:08 - um
364:09 - basically what you would do to access an
364:10 - environment variable in a local machine
364:12 - too process.env and then we will do
364:19 - underscore username
364:22 - so remember that was the name of our our
364:24 - one now I'm just going to copy this line
364:26 - and then we'll do password
364:32 - and then
364:35 - password
364:37 - so now we have access to both of our
364:39 - environment variables in the in these
364:42 - JavaScript variables okay now this is
364:44 - the the last one this is important const
364:47 - and this is uh the URI now that's what
364:52 - we got here on the mongodb website where
364:54 - we copy this right here this is the the
364:58 - the URI is the connection string so I'm
365:01 - going to go back over here and I'm going
365:04 - to put it in a string I'm going to use
365:06 - uh I could put this string I could use
365:09 - double quotes or single quotes I'm going
365:11 - to use the back tick and using a
365:14 - backtick allows us to do something
365:16 - special it allows us to access
365:19 - JavaScript variables from inside the
365:22 - string so we have the username hard
365:25 - coded right in the string here but I'm
365:27 - not going to use that variable here so
365:29 - actually I'll just I'm going to copy
365:31 - that variable and now I'm going to
365:35 - um do dollar sign and then curly braces
365:39 - and now I can just put that variable
365:41 - here now you can see since this is a
365:42 - different color it's black that's how we
365:44 - know that this isn't part of the string
365:46 - we're actually just inserting that
365:48 - variable into the string and we can do
365:50 - the same thing with the password so
365:52 - where it has the angle brackets with the
365:55 - word password I'll do
365:59 - um curly brake brackets like that I'm
366:02 - going to copy this and then just paste
366:05 - it right in there so now we we're
366:07 - putting our username and password right
366:10 - in the string and that will allow us to
366:13 - connect to our database okay well
366:16 - actually we're making one more variable
366:17 - which is the port we we're basically
366:21 - running our server on a specific port
366:24 - and the port that we're going to be
366:27 - running on is going to be 8 000. so you
366:31 - can the port number isn't super
366:34 - important they're just different ones
366:36 - that are common to use for different
366:37 - things okay now we are going to connect
366:41 - to our database so we'll do client
366:45 - I meant to do client
366:48 - dot connect
366:50 - and this is just something that comes
366:52 - with the the mongodb JavaScript library
366:55 - and I will do a parentheses
366:58 - and we'll start by passing in the URI
367:02 - and now we're going to pass in some
367:04 - options now these options are going to
367:06 - be a JavaScript object that's why the
367:09 - curly braces here which is going to be a
367:11 - set of key value Pairs and these are
367:13 - just options that the client is
367:16 - built in to be able to accept we'll do a
367:18 - Max pool size which is the amount of
367:22 - people that can be connected to at one
367:24 - time will set it at 50 and then we'll do
367:26 - a w
367:28 - timeout.ms and we'll set that to 2500
367:32 - that's that's 2500 milliseconds or 25
367:35 - seconds that's how long a connection can
367:38 - be trying to connect before it time
367:40 - times out and the final thing we'll do
367:43 - is use new
367:46 - URL parser
367:48 - and set that to true
367:51 - now that's added because the mongodb
367:53 - node.js driver rewrote the tool that it
367:56 - uses to parse mongodb connection strings
367:58 - and it put the new parser behind the
368:00 - flag so you basically always have to set
368:03 - that to true
368:05 - and so that will end
368:07 - the connection so so we've connected by
368:11 - passing in the URI and then the options
368:14 - but after we connect we want to do a
368:19 - uh dot catch so this will catch any
368:23 - errors that happened when you're
368:25 - connecting so whenever you're going to
368:27 - access an external resource like this
368:30 - database you want to deal with errors so
368:34 - I'm going to do a DOT catch to catch any
368:36 - errors that could happen but they may
368:37 - not happen and I'm going to put in an
368:41 - error Arrow function this is a special
368:44 - type of JavaScript function that that
368:46 - makes it easier that just simplifies
368:48 - what a function looks like and you can
368:50 - put it all in one line and you don't
368:51 - have to name the function so this is the
368:55 - ER is what we're passing into the
368:58 - function and then I put an arrow just
369:00 - like that with the equal sign and angle
369:03 - bracket and this is the body of the
369:07 - function and these curly braces so what
369:10 - we'll do if there's an error we will
369:12 - console dot error now console.air is
369:16 - similar to console.log but it just
369:19 - communicates that it's an error it will
369:20 - appear right it'll be a message that
369:22 - will appear in a console and it just
369:24 - it's just like a special type of
369:26 - console.log and we'll log
369:30 - air.stack so the error that comes from
369:32 - connection if that there is an error
369:34 - will just log the error stack and then
369:38 - we will also do process dot exit one
369:43 - that just means we're gonna end this is
369:45 - just like a fancy way of ending the
369:48 - program we're exiting the process of the
369:50 - process would be the the program that
369:52 - we're running so after we as long when
369:55 - there's no error then we can go to the
369:57 - next part which is a then statement so
370:01 - first we're going to connect then we're
370:04 - going to
370:05 - do something well we're going to pass in
370:08 - a function into here so it's going to be
370:10 - an error function and it's going to be a
370:12 - special type of function in async
370:15 - function
370:16 - an async function is just a function
370:18 - that can run asynchronously or it can
370:22 - run at the same time as other things so
370:25 - you don't have to wait for one thing to
370:28 - end before something else happens or you
370:31 - can use an async to make sure you wait
370:34 - for something in before something else
370:35 - happens which is what we're using it for
370:37 - so we are going to get the client so the
370:41 - client is what comes from We're
370:42 - connecting to the database and it's
370:45 - going to return a client so then it's
370:49 - the the this client variable is coming
370:52 - from the connection to the database and
370:55 - we're making this into an arrow function
370:58 - okay we're not going to actually use the
371:01 - client just yet first we're just going
371:04 - to start the web server so we can just
371:07 - just kind of test everything out so I'm
371:10 - going to do app.listen
371:12 - so uh we got remember the app came from
371:15 - our server up here and app.listen is how
371:18 - you start the server so we are going to
371:20 - listen on a specific port number and so
371:24 - we pass there's two basically this is a
371:27 - function here and we're passing in two
371:29 - pieces of information the port and then
371:32 - an uh a we're passing in a function and
371:35 - we're going to use an arrow function so
371:37 - if you use parentheses here that means
371:39 - we're not passing any any data into the
371:41 - arrow function so we're passing in
371:44 - nothing to this Arrow function and
371:47 - inside the body of the arrow function we
371:50 - are going to just just log some
371:52 - information
371:53 - console.log and we will just log
371:56 - um listening
371:59 - um port and then just the the port
372:02 - number Port
372:04 - okay it's actually almost time to test
372:06 - out our server but we also need to get a
372:10 - route
372:11 - so
372:12 - um if you remember back over on our
372:15 - other file our server.js we have this
372:18 - reviews route so we need to create a
372:21 - route before we can test out the server
372:23 - now let's make it we're going to make it
372:25 - as simple as possible to test out and
372:28 - then we'll make it a little more
372:29 - complicated so I'm going to create a new
372:31 - directory now you don't have to but it
372:33 - helps to keep your code uh organized and
372:36 - this correctly is called API so all the
372:39 - INF all the code for API will be in this
372:41 - directory first we will create the
372:43 - reviews
372:44 - dot route.js so I can so reviews that
372:49 - route.js let me
372:52 - make this over a little bit here and so
372:55 - to just to create our route uh we'll
372:59 - first import
373:00 - Express
373:02 - from Express
373:04 - then we will create our router Kant
373:08 - router so this will when people go to
373:11 - our URL this will route the request to
373:15 - different different parts of your
373:16 - application so express.router
373:20 - it's just part of the express that helps
373:23 - us make our our web server and now we
373:27 - will do router.rout
373:31 - and then we can pass in so slash just
373:34 - means that the base the base route and
373:37 - we'll do that get and then you always
373:40 - anyway creating a route you always have
373:42 - a the request and the result
373:46 - and this is going to be a little arrow
373:49 - function here and the result that send
373:51 - we're going to send
373:53 - this result to whoever is requesting
373:56 - that route and it's just going to say
373:57 - hello world
374:00 - and let me close that so it can be all
374:02 - in one line there and then I will just
374:04 - do export default router so it can be we
374:08 - import the route in our other file
374:11 - okay I think it's time to test out let's
374:14 - try this so when we press run it's going
374:16 - to run index index.js where it's going
374:20 - to get access to our database but it
374:22 - we're not actually going to do anything
374:23 - to our database quite yet but when we do
374:26 - app.listen here after connecting to our
374:29 - database it's going to run this it's
374:33 - going to run our app when we have uh
374:36 - we're using this route and so this is
374:42 - our kind of our base URL which I'm going
374:43 - to copy right there and then it's going
374:46 - to put this at the end of our base base
374:50 - route and then if you go to that URL
374:52 - it's going to do hello world so let's
374:53 - test that out I'm gonna I just press run
374:57 - and so the first time you run it's going
374:59 - to have to install everything so it's
375:01 - doing npm install cores Express
375:04 - see we imported all of these libraries
375:07 - cores Express and mongodb and because
375:11 - see so we're basically just waiting for
375:14 - it to finish but you can see we import
375:16 - Express here we import cores and let's
375:20 - see we already have an error it cannot
375:23 - find a module
375:27 - and because what this is one we haven't
375:29 - actually finished creating the the
375:31 - reviews
375:32 - Dao we've used ow so if we go back over
375:36 - to our index.js
375:40 - um let's let's just we're not using it
375:43 - yet so let me just comment that out
375:46 - um with you know the two slashes will
375:48 - comment or what I just did you can do
375:51 - command control and then press slash
375:53 - it'll automatically make into a comment
375:55 - you can actually do that for multiple so
375:57 - if I highlight everything I do command
375:58 - or control slash and then I can kind of
376:00 - turn off it and on a comment so uh we're
376:04 - not creating that yet so let's try
376:06 - running this again
376:09 - and then here
376:12 - oh I somehow
376:15 - didn't end up with that still being a
376:17 - comment so comment that out now run it
376:23 - okay so it's opening up our web view air
376:27 - not found well that's coming directly
376:30 - from our
376:32 - server here if you go to a URL that
376:35 - hasn't been specified it's going to say
376:37 - air not found now let's see what happens
376:39 - if we go to a URL that is specified
376:42 - another thing I want to show you is that
376:44 - you don't have to use this little
376:45 - webview right here so this webview
376:47 - actually only lets you go to the the
376:49 - root URL but since I I'm going to copy
376:52 - this now I'm just going to go open this
376:54 - up in a new tab and you can see it's
376:56 - saying uh air not found just like before
376:58 - but now I'm going to get this to add to
377:02 - the end here and I'm going to add that
377:03 - to the end of the URL
377:08 - and it says hello world so when we go to
377:11 - the URL it says hello world and it's
377:13 - coming right from our route the route
377:17 - that we create here it's sending hello
377:20 - world when we go to the we go to the
377:23 - root URL and this add slash at the end
377:25 - and it works so whenever you go to a URL
377:30 - on a in a web browser it's almost always
377:33 - doing a get request
377:35 - but as you may know there's other types
377:38 - of requests like post put and delete
377:41 - requests which we will be using as we
377:44 - continue here
377:46 - okay so let's
377:48 - update this so this is just a sample to
377:49 - see how you can go to a specific route
377:52 - and here we just put it right in that
377:55 - file but we are going to put what's
377:58 - returned and or what happens when you go
378:01 - to that route in a different file so
378:03 - right now
378:04 - what happens when you go to that get
378:06 - request route it shows right here but
378:09 - we're going to try to separate that out
378:10 - so we have our route file and then we're
378:13 - going to have a control that our
378:15 - controller file and we're going to
378:17 - access our controller file to tell what
378:19 - we're going to do when we go to the
378:21 - different routes so I'm going to import
378:23 - another file here so import uh reviews
378:28 - controller
378:31 - from
378:33 - and we'll do reviews controller
378:38 - .js
378:40 - okay so we select so we have to create
378:43 - that file but before we create the file
378:45 - let's let's use it in this file so this
378:47 - time I'm just going to paste in some
378:49 - code here and we'll talk about it so now
378:53 - we have a different type of Route so
378:55 - before we just had the slash as the
378:57 - route but now we have slash movie slash
379:00 - ID but it has a colon here so if you
379:04 - have a colon in your route here that
379:06 - means this could be anything here and
379:10 - this becomes a variable called ID so now
379:14 - we can do movie and then put the movie
379:16 - idea like like five six seven eight or
379:19 - something like that and then in our in
379:22 - our review controller we can get access
379:24 - to whatever ID was put into the URL to
379:28 - do something with that ID so this is our
379:32 - this is a get request where we're trying
379:34 - to get information and see we can see
379:36 - where all all these we're using the
379:38 - review we're calling functions in the
379:40 - review use controller we're going to
379:42 - create all these functions to say what
379:44 - happens when we go to that route so this
379:46 - is the API get reviews
379:48 - function where it's going to return all
379:52 - the reviews that are attached to a
379:53 - specific movie and then here uh route
379:56 - Slash new is when we want to create a
379:59 - new review so
380:02 - reviewcontroller.api.api post review
380:04 - we're going to be using a see it's a
380:06 - post request here and post requests are
380:09 - usually used when you're creating
380:10 - something new and then that we use a
380:13 - different format here where now all
380:17 - these routes are or these are all
380:20 - different HTTP request keywords for the
380:24 - same route so it's slash ID so here is
380:28 - the movie ID but here it's the the
380:31 - review ID it's a different type of ID
380:34 - and we can get access to the ID and if
380:37 - it's a get request we'll call this
380:39 - function if it's a put request we'll
380:42 - call this function if it's a delete
380:44 - request we'll call this function
380:48 - so let's create our reviews dot
380:51 - controller so let me go over here and
380:54 - we'll do
380:55 - uh
380:56 - reviews Dot controller.js and you can
381:01 - kind of see what that looks like here
381:03 - now close that we're in our reviews
381:05 - controller
381:08 - okay this time I'm just going to paste
381:11 - in some code to make it a lot faster
381:13 - then we'll review it now it's going to
381:16 - look pretty complicated uh we uh this
381:19 - it's more complicated than our last
381:20 - JavaScript project but just stay with me
381:23 - and I'll explain how it all works so
381:26 - let's go back to the top so first we are
381:28 - going to import our reviews down now
381:32 - this is is is what we're going to use to
381:35 - actually access the database to actually
381:39 - make changes to the database and we'll
381:41 - be creating that next so basically this
381:45 - file is all about getting information
381:48 - from the from from the the ascent to the
381:53 - to the route
381:54 - and sending it to the reviews down so it
381:59 - we're all the controller is just getting
382:01 - information from the route and then
382:03 - doing something with that information
382:04 - and what it's doing with that
382:06 - information is sending it to the reviews
382:07 - down which will actually access the
382:09 - database and then it's going to get
382:11 - information back from from the database
382:13 - so let's let's look what we're doing
382:16 - here so we are going to first we're
382:19 - going to be exporting default class
382:21 - reviews controller so this just means
382:24 - we've had had exports on all of our
382:27 - files so far so since we're exporting
382:30 - the reviews controller that means we can
382:32 - import it in other places and this time
382:36 - we are creating a class so a class is
382:40 - something
382:42 - um
382:42 - is a class is used in JavaScript to have
382:46 - multiple functions so we're going to
382:50 - create a a few different functions in
382:53 - our review controller that we can then
382:55 - call uh in our in our routes file so
382:59 - here's the first
383:02 - function here it's a static function
383:04 - because uh you can call directly from
383:07 - the reviews controller if it wasn't
383:10 - static we would have to create an
383:12 - instance of a reviews controller which
383:15 - we're not going to talk about right now
383:17 - in this section but since it's static we
383:20 - don't have to create an instance now
383:21 - since it's async we can then use a way
383:25 - await to wait for things to happen and
383:28 - so the name of it is API post review so
383:31 - if you if we go back over to our uh our
383:33 - routes file we can see
383:36 - it's this one right here
383:38 - reviewscontroller dot API post review so
383:41 - we're creating that right here that
383:43 - that's what we're creating so this
383:45 - information is actually just coming
383:46 - right from Express
383:48 - um the main things we need to look at
383:50 - are the the request information and the
383:53 - response so here we're going in the
383:56 - request the request is going to have a
383:59 - body so a body of the request that's
384:02 - going to be some Json that's that's
384:05 - submitted with the the URL request HTTP
384:09 - request and it's going to have some
384:11 - information it's going to have the movie
384:13 - ID
384:14 - that we're connecting the review to it's
384:18 - going to have the review the actual text
384:22 - of the review and the user so the user
384:25 - that's creating the review so uh and
384:29 - right now we can see that we're doing a
384:31 - try catch so we're going to try to do
384:34 - all these things and it's going to try
384:36 - to do all these things and if there's an
384:38 - error it will catch the error and it
384:41 - will respond so right now we're just
384:44 - trying all these things and if it's
384:46 - there's no error then it never does the
384:49 - it never catches the error so first we
384:52 - get access to these variables the movie
384:53 - ID the review and the user and now this
384:56 - is where we
384:58 - add the review so we're creating a
385:01 - variable review response and we're
385:03 - awaiting the result of this which we we
385:06 - have to create this so the reviews now
385:08 - dot add review we're throwing in all the
385:11 - different information and then we are
385:14 - responding the res dot Json remember
385:17 - before we respond with hello world now
385:19 - we're spawning with a Json that says
385:20 - static success and if we go down a lot
385:23 - of these things are pretty similar so
385:26 - there are some things different so now
385:27 - uh here was all that wrecked up body now
385:31 - we're doing rect.params if you do
385:34 - rect.params then let's go back to the
385:36 - route file that's where we get this
385:38 - right here this is a param so a body is
385:41 - actually some Json that you include but
385:43 - the params you can get it right from the
385:45 - the URL they're just different ways of
385:47 - getting information so we got uh it's
385:50 - either we're going to either get the ID
385:51 - or it's just going to be an empty object
385:53 - and then we are going to get the review
385:56 - of passing in the ID that we want 3
385:58 - review and if there is no review then we
386:01 - respond with not found and then we just
386:04 - return from the function but if we
386:07 - haven't returned from the function then
386:08 - we'll respond with the review we'll give
386:11 - back Json of the review that we're
386:14 - trying to get based on the ID and then
386:16 - you can see that it can also log an
386:19 - error and then here to update the review
386:21 - well first we have to get access to the
386:23 - review ID this is from rec.params but
386:26 - the actual review and the user are from
386:28 - the body now when we test this out
386:31 - you'll see exactly how this works how
386:32 - you can give data with the parameter and
386:35 - how you can give data in body oh in the
386:38 - body when we when we're testing this out
386:40 - later
386:41 - so then we're going to update the review
386:44 - revamp used now.update review this is a
386:46 - function we still have to create we pass
386:49 - in the information the review ID of the
386:50 - user and the review
386:52 - and then
386:54 - um if there could be an error
386:56 - or their could be
387:00 - um oh basically there's just two ways
387:03 - there could be an error so this is one
387:05 - way there could be an error this is
387:06 - another way it can be an error basically
387:09 - if nothing was modified so there's going
387:12 - to be response here
387:14 - that's coming directly from mongodb
387:17 - there's going to be a response from
387:19 - mongodb and if the modified count equals
387:23 - zero that means nothing was changed and
387:26 - then we'll just we'll create an error
387:28 - throw new air this will create a new
387:31 - error unable to update review so if if
387:34 - there's not an error then we come down
387:36 - here
387:38 - um where we do the we respond with the
387:41 - Json success and if there was if we did
387:44 - throw an error if this error happened
387:46 - then that air is going to get to this
387:48 - catch block here which is going to just
387:51 - respond saying what the error is okay
387:54 - then the next few are pretty similar
387:56 - delete review here we only need an ID
387:59 - we're getting the ID parameter and then
388:01 - we are awaiting
388:04 - uh calling reviews now that delete
388:06 - review or passing the ID and it's either
388:08 - going to be successful or there's going
388:10 - to be an error and then the final one
388:13 - get reviews so this is slightly
388:15 - different because we're getting a list
388:17 - of all reviews for a specific movie and
388:20 - so the ID here is not the review ID but
388:24 - it's the movie ID and this we're going
388:27 - to be calling the reviews.getmoviesid
388:30 - and if there's no reviews then we'll say
388:34 - not found or else we're going to respond
388:38 - with the reviews so or there could be
388:42 - another error that will then log here
388:46 - okay so now let's create our final file
388:50 - now we already referenced the file here
388:56 - and since since we referenced it let's
388:58 - let's use the file before so we put in
389:00 - here but we have actually used it in our
389:02 - index.js so basically the reviews now is
389:07 - where we're actually interacting with
389:09 - the database but we connect to the
389:12 - database an index.js so we have to
389:15 - somehow send the database connection to
389:19 - the reviews now which we'll do
389:21 - down here so right before we um start
389:25 - listening we're going to basically
389:28 - connect this together so await reviews
389:33 - down
389:35 - uh dot inject DB now this is a function
389:38 - we have to create that we'll see just a
389:40 - second so we're going to inject
389:42 - the client
389:44 - basically this is just a way to send our
389:47 - database connection to the reviews now
389:51 - that which then we can use to access the
389:53 - database so let's actually create that
389:55 - now we can see that it's slash now slash
389:58 - reviews data.js so I'm going to create
390:01 - that now I will create a new folder
390:04 - called Dao and then I will create a new
390:07 - file called
390:10 - um you can see I just pasted that in
390:12 - there oh
390:13 - there there it goes reviews Dow dot Js
390:19 - okay we're now gonna see how to actually
390:21 - connect to the database we actually
390:23 - haven't yet connected to mongodb yet and
390:27 - this is where it all happens so again
390:29 - I'm going to paste in some code and then
390:31 - we're going to talk about it well first
390:34 - we're going to import mongodb that's
390:36 - important because we are using the
390:38 - mongodb JavaScript library to access
390:41 - mongodb now from mongodb we're going to
390:45 - get access to object ID
390:48 - basically uh we're going to be sending
390:51 - and receiving uh text and integers from
390:56 - our back end to our database but our our
391:01 - database it can't for when we're
391:04 - actually searching for a record in our
391:06 - database by its ID we can't just search
391:09 - by a a integer or a string we have to
391:13 - actually search by a specific data type
391:16 - called object ID which is diff different
391:19 - than a string or integer so we're going
391:22 - to convert our our string or integer
391:26 - into an object ID when we send the ID to
391:29 - the database so the database will be
391:31 - able to correctly look up a record now
391:33 - you'll see how that works in just a
391:35 - minute here so first we're going to
391:37 - create reviews now it says let reviews
391:39 - that means we're creating a variable
391:41 - called reviews that we haven't uh put
391:44 - into where we've created the variable
391:46 - but we have not assigned the variable to
391:48 - anything but this is where we're going
391:49 - to assign our basically our connection
391:52 - to the database so remember we call the
391:55 - index inject DB function well first of
391:57 - all we can see that we're exporting this
391:59 - class reviews now so we can do reviews
392:01 - Dow dot injectdb because it's a static
392:04 - that means we don't have to instantiate
392:06 - the class before we call the function so
392:11 - we are getting a connection that's the
392:13 - connection that that we got in the other
392:16 - file and if there's already it says if
392:19 - reviews return that means if there's
392:21 - already a database connection uh don't
392:24 - inject don't don't do anything but if
392:27 - there's not the database connection
392:28 - we're going to try this so it's a try
392:30 - catch block so first we're going to try
392:32 - this if there's an error we do what's
392:33 - next so this is specifically right from
392:36 - the the mongodb
392:39 - a JavaScript uh Library so we're going
392:42 - to away for the database connection so
392:44 - the here's the connection that we got
392:46 - from the other file and then we're gonna
392:48 - first get the a DB the database called
392:51 - reviews and then we're going to get the
392:54 - collection called reviews now uh mongodb
392:57 - database
392:59 - um has like the on the top level you
393:02 - have your database and you can have
393:03 - multiple collections in the database now
393:07 - it's not it you can we could name these
393:10 - anything we we want but since all this
393:13 - is just reviews I just named the
393:15 - database reviews and the collection
393:17 - reviews but you can just change this to
393:19 - be anything you want so often you may
393:21 - have
393:22 - um like this could be movies and then
393:24 - you could have multiple collections
393:25 - there could be a reviews collection you
393:27 - could have the movie information
393:29 - collection you could have the uh
393:32 - I don't know movie posters collection so
393:35 - you have a bunch of Collections and the
393:37 - collection is basically what you would
393:38 - think of as a database so it's like a
393:40 - bunch of smaller databases within the
393:42 - overarching database uh you'll see what
393:45 - I mean later once we actually see what
393:46 - this looks like on mongodb Atlas so
393:50 - basically we're getting access to our
393:52 - database okay so now the rest of the
393:56 - functions here
393:58 - are all
394:00 - doing something with the database so we
394:03 - can add review and so all these
394:06 - um fun all these functions are functions
394:09 - that we already called in our other file
394:11 - so if we just go back over there really
394:13 - quick
394:14 - um
394:16 - but
394:17 - so for instance we have our
394:22 - ad review where it just passed in the
394:25 - movie ID a user and the review so we go
394:28 - back here we are now going to receive
394:31 - the movie ID user and review so first
394:35 - we're going to create our document this
394:38 - is basically our database entry and it's
394:41 - going to be a JavaScript object with the
394:43 - movie ID
394:44 - so these are the key value key value key
394:48 - value now we are now going to return
394:51 - from this function what happens when we
394:55 - await this to happen so reviews that's
394:58 - our database insert one
395:00 - insert 1 is a mongodb command and it's
395:05 - how you insert a document into the
395:07 - database and we're inserting review doc
395:11 - uh so that's pretty simple and then we
395:14 - can catch if there's an error we'll say
395:17 - unable to post review I'll list the
395:19 - error and it's going to return the error
395:23 - okay now to get a review instead of
395:26 - inserting one we are going to find one
395:29 - and if you're going to find a document
395:32 - in a mongodb database you have to find
395:34 - it you have to say what you're going to
395:36 - be searching for the document by it's
395:38 - very common to search by the ID by
395:41 - default there's a single every ID is
395:44 - different so and these IDs are created
395:47 - automatically so when we when we created
395:50 - our document
395:52 - the movie ID is not the ID the ID was
395:55 - created automatically when we created
395:57 - the document so if we know the ID we can
396:00 - now search by the ID now review ID this
396:02 - is coming in as a as a basically a it's
396:07 - probably coming in as a string but we're
396:09 - using object ID that's from here to
396:11 - convert it to convert the string to an
396:13 - object ID that we can then use with
396:16 - Define we can find the ID that has the
396:18 - object ID of the ID that we passed in if
396:21 - there's an error we catch the error and
396:23 - then same with update review we pass in
396:25 - the review ID the user and the review
396:27 - and we don't need this console.log this
396:30 - is a test out thing I was doing earlier
396:32 - so now we can update one so so we we
396:35 - basically have insert one find One
396:37 - update one and when you're updating one
396:39 - it's like a combination of a find and
396:42 - basically creating some then putting the
396:44 - information so so we're passing in two
396:47 - things so first is the object which get
396:50 - says what we're searching for so we're
396:52 - we're finding we're trying to find the
396:54 - document with that review ID that's when
396:57 - we're going to update and this is how
396:59 - we're going to update it we are going to
397:02 - set so you're going to have to this is
397:04 - just something specific to mongodb
397:06 - you're going to set
397:08 - a user to be the user and set the review
397:12 - to be the review
397:15 - and then we can return the the response
397:18 - that we get and then we have the error
397:20 - and then finally delete review
397:23 - so this is just getting an ID uh delete
397:27 - one and this is we're searching by the
397:30 - object ID
397:32 - to the review ID to find what we're
397:35 - going to delete and then finally get
397:39 - movies by ID so this time where we have
397:41 - a movie ID this isn't an object ID this
397:44 - is basically just an integer that we're
397:47 - passing in and where uh again we don't
397:51 - need this console.log so we're going to
397:55 - get a cursor so this is well basically
397:58 - when you find multiple items it's going
398:00 - to return a cursor and we're finding
398:03 - every item that has the ID and you can
398:07 - see we are having this
398:09 - we're passing an ID to this parse int
398:12 - function so it's going to be a string
398:14 - but parse and this is from JavaScript
398:16 - Parts int is a function from JavaScript
398:18 - to convert a string to an integer which
398:22 - we're then going to pass in to our find
398:25 - command of mongodb
398:27 - and we're going to get a cursor which is
398:29 - basically just a list of all the
398:31 - documents but it's not in then it's not
398:33 - in the format that we want so we have to
398:35 - convert it to an array we're going to
398:37 - return cursor.to array
398:39 - and then it's going to catch an error
398:43 - okay let's try this out so
398:49 - I am going to
398:52 - bring here let's just press play here
398:56 - see if we have any errors
398:58 - no errors so far so what I'm going to go
399:00 - do is go in to so with this here
399:04 - basically with a web browser you can
399:06 - only do get requests but if you remember
399:09 - on a route we have a bunch of other
399:11 - types of requests
399:14 - we have the
399:18 - um the post request put request delete
399:20 - request you need something special to be
399:23 - able to do those types of requests so
399:25 - we're going to use a common command
399:28 - called curl now a lot of computers come
399:32 - with curl built in and replit does also
399:37 - so we can go to the Shell and we can now
399:40 - run some kernel commands
399:43 - so the first thing we're going to try to
399:44 - do is to create a review before though
399:47 - let's go back to mongodb Atlas before we
399:51 - create a review I'm going to go to
399:53 - browse collection so we're going to
399:56 - browse all the documents in our database
399:59 - so we can see that for databases we have
400:02 - zero databases zero collections so we
400:05 - don't have any information we don't have
400:07 - any records in our database but we're
400:10 - about to change that so I'm going to go
400:11 - back over here and in my console I'm
400:14 - going to paste in a curl command now
400:17 - there's a few different ways we could
400:18 - test this API
400:21 - we you cannot really do with a web
400:23 - browser very easily because web browsers
400:26 - are mainly dealing with get requests but
400:29 - if you there's some programs such as
400:31 - Postman or I think it's called insomnia
400:35 - you can use to do it more of an in a
400:37 - graphical way but most computers have
400:40 - curl and uh or at least or many
400:44 - computers have curl and repl has it
400:46 - built in so I'm going to paste in this
400:48 - curdle command and we can see it it's it
400:51 - spans a few different lines here so we
400:53 - have curl
400:54 - Dash X so this is how we're going to
400:57 - specify what HTTP type of request we're
401:00 - doing we're doing a post request and
401:02 - then we have the the URL here so this
401:05 - URL is just coming from up here
401:08 - and then we have the
401:10 - um the slash API slash V1 slash reviews
401:13 - that's our our key our um base URL and
401:17 - then Slash new that's right here our
401:20 - Slash new right here and we're doing a
401:22 - post request and now we are going to set
401:25 - the headers of their Quest so we're
401:27 - going to set the headers the content
401:29 - type is going to be applicationless Json
401:31 - and now we're going to set the body of
401:34 - the request so for the body we need to
401:37 - set the the movie ID we need to set the
401:40 - user and we need to set the review so
401:42 - the user is me bow and the review is
401:44 - just good and the movie idea is just an
401:46 - integer here so you can go back we can
401:48 - actually go into the file where we use
401:50 - that information
401:53 - um in the post review we're getting the
401:56 - movie ID the review and the user and
401:59 - then we're going to create a movie so
402:02 - I'm just going to press return
402:05 - it says success
402:08 - okay there's a few different ways we can
402:09 - test that it actually works but one way
402:12 - is to go right back over here and now
402:14 - I'm going to click refresh
402:17 - you can see we it's now showing the
402:20 - information in our database and we have
402:23 - the movie ID 12 user bow and review good
402:25 - and we have it created an object ID so
402:30 - it automatically creates an object ID
402:31 - like I said every ID is different well
402:34 - I'm going to actually
402:38 - um we're going to actually use the
402:40 - object ID but first let's go back over
402:42 - here so let me just clear this again and
402:46 - uh we'll make it so you can see more of
402:48 - the console so let's see if we can get
402:51 - that document that we just created let's
402:55 - create a few more documents and then
402:56 - we'll try to get them so I'm going to do
402:59 - a curl we'll do a same movie ID we'll do
403:03 - movie ID 12 we'll do for the user we'll
403:06 - do Quincy for the review uh Quincy did
403:10 - not like that movie Bad movie that was
403:14 - his review
403:16 - okay let's add one more and this time
403:20 - we'll do a different movie idea we'll do
403:22 - movie ID 13.
403:25 - I don't know how this changed review
403:29 - wait
403:31 - name
403:33 - no user so movie ID 13 user this time
403:38 - we'll go back to bow
403:42 - um
403:43 - sometimes the replica console does some
403:45 - weird things
403:48 - when you kind of move it back and forth
403:50 - to update
403:53 - um
403:55 - let's see movie ID 12 user Quincy oh
403:59 - yeah see
404:01 - this number kind of got in there
404:07 - okay
404:09 - user bow
404:11 - and
404:14 - review
404:26 - will be awesome
404:29 - okay let me just see if I missed
404:31 - everything anything up with how
404:33 - everything was changing here I think
404:35 - that's what we want
404:37 - oh except I wanted a different movie ID
404:40 - okay
404:44 - now let's just check back and hear what
404:46 - they look like so I'm refreshing in here
404:50 - and we got the first one movie
404:53 - the movie 12 movie 12 Bo and Quincy and
404:57 - then we have another one movie 13.
404:59 - awesome okay now what I'm going to do is
405:03 - go back over here and now I'm going to
405:05 - make a get request so let me clear that
405:07 - and we'll do curl
405:10 - X get and I'll show you how we can
405:14 - actually just make this instead of just
405:15 - pasting all and I'm going to copy that
405:16 - and then I'm going to put slash
405:19 - what was it slash API slash V1 slash
405:23 - reviews and this is just going to be a
405:26 - get request but I'm going to put the
405:29 - object ID of the review at the end of
405:32 - this so I'm going to go back over here
405:34 - I'm going to copy this ID I'm going to
405:36 - see if I can get access to this specific
405:38 - URL so I'm just going to copy that
405:41 - string
405:43 - and put that in there and return
405:47 - okay we got it look movie ID 12 user bow
405:50 - and the review is good
405:53 - okay now let's see if we can get the
405:55 - reviews for all the reviews for movie
405:58 - 12. so I'm going to
406:02 - clear that and I'm just gonna this is
406:05 - gonna be a get request but if remember
406:07 - how you do that we're going to review
406:08 - slash
406:09 - movie slash 12.
406:13 - and now we've returned two reviews so we
406:17 - have uh user Bow review good
406:20 - user Quincy review bad movie so we just
406:24 - returned all the reviews for movie 12
406:27 - which was two different reviews okay now
406:30 - let's see how we can change a review
406:33 - so to change the review I'm going to do
406:36 - a curl
406:38 - X
406:39 - put
406:41 - and then I'm going to put the URL I'm
406:43 - actually going to
406:45 - um
406:46 - I'm going to copy most of this
406:51 - but we have to put the ID so I can get
406:54 - the ID from right here
406:57 - and now I'm going to create this header
407:01 - and I'm going to set the the user to Bow
407:04 - which already was but I could change the
407:06 - username but I'm going to leave it the
407:08 - same and then now the review is going to
407:10 - be horrible so it used to be good now
407:14 - it's going to be horrible okay now I'm
407:16 - going to go back to where we get all the
407:18 - reviews really quick
407:21 - and this is something with ripple this
407:24 - is not the command somehow it knew the
407:26 - correct command but it didn't display
407:28 - the correct Command right the it was
407:30 - supposed to look like this and it I just
407:35 - pressed up a few times to get back to
407:36 - the command but it still was able to I
407:41 - pressed up the correct amount of times
407:43 - to get to that command and it did run
407:44 - that command but for some reason it
407:46 - didn't look like that command in the
407:48 - Shell that's okay it still gave us the
407:50 - correct information look Bow review is
407:52 - horrible and
407:55 - Quincy review is bad movie so it changed
407:58 - to horrible and we can verify by just
408:01 - going back going here I'm going to
408:02 - refresh says good I'll click this uh
408:05 - where's I thought there was oh yeah
408:06 - here's the refresh button here
408:09 - and now it's horrible so we've been able
408:11 - to create it we've been able to create a
408:14 - review edit a review look get a single
408:18 - review get all the reviews for a movie
408:20 - now let's just check the test the delete
408:23 - one so for delete I can
408:31 - well let me just clear that out so we'll
408:34 - do curl
408:37 - X delete
408:40 - and then I'll put the the URL
408:42 - which is just that
408:45 - slash API slash V1
408:49 - slash reviews slash and then I have to
408:52 - get again I'm just going to go back and
408:54 - just copy this of the one I want to
408:56 - delete this object ID
408:59 - and then I put the object ID at the end
409:02 - and now
409:05 - it should delete let's go back over
409:07 - there and see if the first one says
409:10 - horrible if I refresh that it shouldn't
409:13 - be one that says bow horrible see it
409:15 - starts at Quincy bad movie and there's
409:17 - only two objects now they're used there
409:19 - used to be three so it worked our entire
409:22 - our API
409:24 - all worked
409:26 - so the next step is connecting this API
409:30 - with the front end
409:33 - okay the first step in connecting the
409:36 - front end to the back end is to clone
409:40 - the front end so this is the front end
409:42 - that Tomi made and I'm just going to go
409:44 - to Fork repo and I'm going to
409:48 - call it HTML
409:50 - front and that's gonna be my version
409:53 - and now
409:55 - let's let it load
409:58 - okay I'm just gonna hit the play button
410:00 - right here to start so we can see what
410:01 - it looks like you can see um
410:04 - if we spread it out we can see a little
410:06 - more I can also open this in a new tab
410:08 - so let me copy that okay this is what it
410:12 - looks like I can do a searching search
410:15 - for things and just how Tommy had it so
410:19 - let's go back to the oh that's my back
410:22 - end which we are going to oh while I'm
410:25 - here while I'm on the back end I did
410:27 - make one change to the back end which
410:30 - was in the what is it the routes or the
410:34 - controllers
410:36 - um the movie ID well we have to parse it
410:39 - as an INT because it comes it could come
410:42 - in as a string or an integer and we have
410:44 - to make sure it's an integer before it
410:46 - gets saved to the database okay let's go
410:49 - back to the front end so right now there
410:54 - is no way to um to see any reviews it's
410:57 - not made up for any review so what we
411:00 - want to do is make it so under each
411:01 - movie on here there'll be a link that
411:04 - goes to the page of reviews so
411:09 - um so let's make two more pages here or
411:11 - two more files first I'll make a file
411:13 - called movie.html which will be the page
411:16 - that that's just about the movie that
411:18 - has all the the the uh reviews and then
411:22 - I'll make another file called movie.js
411:25 - which will be the Javascript file and
411:28 - let me just
411:29 - um move that over here and to start off
411:33 - with we're going to just go into the
411:36 - index.html I'm going to copy all this
411:38 - and then I'm just going to bring it
411:41 - right into the movies.html and I'm going
411:44 - to make some changes I'm not going to
411:46 - have this sample code here but but we
411:49 - are going to end up the review we're
411:52 - going to load the reviews kind of like
411:53 - the movie so it'll be a card for each
411:55 - review but I'll take that off we don't
411:58 - need this and what else are we not going
412:01 - to have okay we're not going to need the
412:04 - search because this is just the review
412:07 - and we want to make sure that when we
412:10 - click the word movie site it will go
412:12 - back to the index index
412:15 - .html that's the page that Tomi made and
412:19 - then we want to make sure that
412:21 - and so that's script.js we're going to
412:24 - make it
412:26 - movie.js
412:29 - so we'll be linking to the other
412:32 - JavaScript file
412:34 - okay that looks pretty good now I'm
412:36 - going to go to the script.js I'm
412:38 - actually going to copy all that too
412:41 - and bring over to movies.js we're going
412:44 - to have some things are going to be kind
412:47 - of similar uh some of the tabbing got
412:49 - messed up a little here so let me
412:51 - make sure we get the
412:53 - tabbing how we want it so if I select
412:55 - everything and if I press shift tab it
412:58 - goes back one or if I do shift or if I
413:01 - just do tab it goes forward one so what
413:04 - we're going to do is change we don't
413:07 - need these two links but we still need
413:09 - an API link but now instead of using the
413:12 - movie DB API link we're using the API
413:16 - that we created on the back end so I'm
413:19 - going to go back to my backend code and
413:22 - we just need to get so this is the URL
413:25 - if you're following along it could be
413:26 - different depending on what your url is
413:28 - if we go back here and I'll just paste
413:31 - in this URL and then remember we have
413:34 - the the other part of the URL which is
413:36 - just uh what is it API
413:40 - V1 slash
413:44 - reviews
413:45 - slash okay and we took off the search
413:49 - and the form so we don't need that
413:51 - and then we're going to delete this
413:54 - because we don't have that anymore and
413:57 - now we're going to make some some
413:59 - additional changes here
414:01 - but before we make the additional
414:02 - changes let's make it so a user can
414:05 - actually get to the the movie page so
414:09 - I'm going to go to the script.js
414:11 - remember this is for our our main root
414:14 - site the the one that Tomi made and I'm
414:16 - going to make some changes so we can add
414:18 - a link here so what we're going to do
414:20 - when it on this section right here where
414:24 - we update the inner HTML of the title we
414:28 - can since it's inner HTML we can just
414:31 - add additional HTML it just doesn't just
414:34 - have to be a title we can use we can
414:36 - actually put any HTML in these backdicks
414:39 - so what I'm going to do is add a link to
414:43 - the review page in this HTML so first of
414:46 - all I'm going to put a br which means
414:48 - means a break a line break so I'll go to
414:50 - the next line
414:51 - and then we'll do a href uh you know
414:54 - that's that's an anchor tag or a link
414:56 - and we just have to put the URL so this
414:59 - case is this going to be movie.html
415:02 - but we're not just going to only put
415:05 - movie.html we're going to put some query
415:08 - parameters the we we want to pass some
415:10 - information from the index.html to
415:14 - movie.html and we there's a few
415:16 - different ways to pass information
415:18 - between pages but one of the easier ones
415:20 - is just to use Query parameters in the
415:23 - URL so you've probably seen this before
415:26 - query you do the the movie.html and we
415:29 - put a question mark to say that we're
415:31 - just about to put some query parameters
415:33 - which are just basically key value pairs
415:35 - so first we're going to pass in the ID
415:37 - the movie ID of the movie that the
415:40 - person is clicking on so we want to make
415:43 - sure it loads the the reviews for the
415:46 - right movie based on the movie ID so
415:48 - I'll do ID equals and then I have to get
415:51 - the movie ID basically we can use this
415:53 - exact same way that we got the title to
415:56 - get the ID so I'm just going to copy
415:57 - that and element.title but instead of
416:00 - element.title it's going to be element
416:02 - ID and then we can just put an ampersand
416:06 - or an and symbol to do another query
416:09 - parameter and it's going to follow the
416:10 - same format of the ID but instead of
416:13 - this time instead of ID it's going to be
416:16 - title we're going to just pass in the
416:19 - movie title and then we'll put title
416:22 - and then we have to so this is a we're
416:24 - still in this anchor tag or the link the
416:28 - link element so I'm going to put what
416:31 - the link is going to say it's going to
416:32 - just say reviews
416:34 - and then I'll put the closing tag just
416:36 - like that
416:38 - okay so now I am going to just run that
416:42 - and let's just test that so far okay so
416:45 - I'm going to go back to the page I'll
416:46 - refresh here now we can see it says
416:48 - reviews now it is kind of hard to read
416:50 - with the blue like that and you could go
416:53 - into and change the CSS I'm not going to
416:56 - focus so much on changing the CSS and
417:00 - styling but that's something that you
417:02 - can do on your own if you want to make
417:03 - it look a little better so if I just go
417:05 - right into to this one
417:08 - um it doesn't do anything because we
417:10 - haven't loaded anything on the page yet
417:11 - but we can see it definitely did load
417:13 - the page
417:14 - and we go back and see the URL bar we
417:17 - can see that it's saying move.html we
417:20 - have ID then we have the title and then
417:22 - it um it because there's spaces to put a
417:25 - space in a URL you can't just put a
417:27 - space in url so it put the percent 20 to
417:30 - represent the space okay let's go back
417:33 - over to
417:35 - our file and now we we're basically done
417:38 - with our updates to the the root the
417:42 - script.js and the index.html let's go
417:45 - back to movie.js so I'm not going to
417:48 - type in everything here sometimes I'm
417:50 - going to paste some things in here and
417:52 - so this is going to get information from
417:56 - our URL so right here we when we do a
418:00 - const URL we're making a video called
418:02 - URL and we're using new URL this is a
418:06 - way to basically make a URL object from
418:10 - the the actual URL so this is just
418:13 - something built into the browser built
418:15 - into JavaScript if you do location href
418:18 - it'll be a string based on the URL that
418:20 - the person is at and we can create a URL
418:23 - object like that and once we have a url
418:25 - url object we can access different parts
418:28 - of the URL specifically we're trying to
418:31 - get the search params so the the the
418:33 - query parameters we're getting the one
418:36 - that has the key of ID and putting the
418:39 - value into movie ID and then the key of
418:41 - title and putting the value into movie
418:43 - title so we got that we were able to
418:46 - pass that information into this next
418:48 - page since we have the title we're
418:51 - actually going to uh put in the movie
418:53 - title onto the page so we already have
418:56 - access to the main element I'm just
418:58 - going to copy that and paste that in and
419:00 - now we're going to get access to the
419:03 - title element uh if you remember we
419:06 - actually don't even have a title element
419:07 - so we have to create that so let's go
419:09 - over to movie.html and then I am going
419:12 - to just uh put in some code here reviews
419:15 - for movie title now H1 if you remember
419:19 - this is a dark background and right now
419:21 - H1s are colored black so let me go ahead
419:23 - and style that CSS and I'm just going to
419:26 - in the body I'm just going to put color
419:31 - White
419:32 - so now all the text color is is refers
419:36 - to text color so we already have the h3s
419:39 - are white now we have all the text being
419:41 - white which makes sense because we have
419:42 - a dark background and now we don't even
419:44 - need that one anymore because
419:45 - everything's going to be white so let's
419:47 - just see what that looks like so far uh
419:50 - first of all let me just make sure
419:51 - everything is correct oh before we see
419:54 - what it looks like let's load the title
419:56 - into that title element that we just
419:58 - created so that's just gonna be like
420:00 - this it's what you've already learned
420:01 - about title dot intertext is going to be
420:04 - title oh before you may have actually
420:06 - learned about inner HTML I think that's
420:09 - the inner HTML you can put basically any
420:12 - any HTML inner text is just going to
420:16 - focus only on changing the text it's
420:19 - generally safer to use intertext because
420:21 - uh you won't accidentally put some some
420:24 - uh HTML that's going to just mess up
420:27 - everything so if you can use intertext
420:29 - but then use inner HTML if you need to
420:31 - so let let's just play that or run that
420:35 - basically just reload it
420:39 - and then I'm going to just refresh over
420:41 - here and now look we're getting reviews
420:43 - for Jeepers Creepers reborn that click
420:46 - movie site I can go to any of these so
420:48 - how about uh black Adam reviews for
420:50 - Black Adam it's kind of over onto the
420:52 - side here so we could go up and change
420:55 - the CSS so this kind of kind of centered
420:57 - I'm going to leave that as something for
420:59 - you to do on your own but you can see
421:01 - whatever we click on it's going to put
421:03 - the the movie title right in there let's
421:06 - go to Pinocchio reviews for Pinocchio so
421:09 - now let's make it so the reviews
421:10 - actually show up it doesn't actually
421:12 - show up as any reviews there so we're
421:15 - going to change change this so it says
421:17 - return movies we actually want this to
421:20 - be return uh review so I just did
421:23 - command or control D to select multiple
421:25 - text pieces at the same time and then I
421:28 - can just say return reviews and I can
421:31 - change them both at the same time so
421:34 - then you only have to type it once and
421:35 - it types it we have multiple cursors to
421:38 - type those on so we're gonna go to the
421:41 - URL so but we we are going to have to
421:43 - change something because if we go up
421:45 - here we see the URL is this
421:48 - uh which is uh Slash reviews and if you
421:51 - remember from our back end here's our
421:53 - backend here the route we actually want
421:56 - to go to is it has slash movies slash ID
421:59 - at the end so we're gonna use keep the
422:03 - base URL but now I'm going to say Plus
422:07 - movie slash and then Plus
422:12 - now plus and then I'm going to put movie
422:15 - ID which is what we got directly from
422:19 - the query parameter okay now we're going
422:21 - to go to this newer URL we're going to
422:24 - get the data and this time uh we don't
422:27 - need data.results uh different
422:31 - um different apis work differently so in
422:34 - the API for the movie page we did have
422:37 - to do dot results but with the API we
422:40 - created it just deliver it just gives
422:42 - the data directly so I'm going to do
422:45 - command or control D to select every
422:46 - time it says data.results and just get
422:49 - rid of dot results it's just going to be
422:51 - data and we can keep this console.log
422:54 - here to see if anything is important now
422:57 - here
422:58 - um there's with in programming there's
423:00 - just a bunch of ways to do everything so
423:03 - you already learned this method
423:06 - um but I'm going to show you now another
423:08 - method so we already talked about how
423:11 - with DOT Interac HTML you can basically
423:13 - put a lot of HTML so that's what I'm
423:17 - going to do instead of creating a div
423:20 - the basically the the card div the row
423:23 - div the column div all like this I'm
423:26 - just going to create it as HTML now
423:29 - there's definitely there's there's
423:31 - definitely reasons to do it either way
423:33 - and it just depends on your use case so
423:36 - it's really good to know both ways of
423:38 - doing it so I just want to teach you a
423:40 - new way that you can do it so I'm going
423:42 - to this is going to be called div card
423:44 - I'm going to keep this the same but I'm
423:46 - actually going to delete all these
423:48 - things and you'll see soon what we're
423:51 - how we're going to change this
423:56 - and yeah all this actually see all this
423:59 - I'm going to show you a different way to
424:01 - do almost all that we're not going to do
424:03 - all of this because we're not going to
424:04 - have the image there's not going to be
424:07 - an image
424:08 - um we're not going to have the
424:11 - basically that's the main thing we're
424:12 - not going to have we're not going to
424:13 - have this the center element so I'm just
424:16 - going to delete all that and we can see
424:19 - that right now
424:21 - okay we're only going to append that
424:25 - card but first we have to update the
424:28 - card so right now we've created that
424:29 - element and then it gets appended here
424:33 - oh and actually no we don't even need to
424:36 - do that because we're just going to
424:38 - append this on to main div card
424:42 - so I'm just going to do div
424:45 - card dot inner
424:48 - HTML
424:49 - and now I'm just going to put in the
424:52 - actual direct HTML instead of making
424:55 - everything individually like that I'm
424:56 - just going to paste it in here and then
424:58 - we'll go over it so you can see it's the
425:01 - HTML format is very similar to before we
425:05 - create the diva class row we create the
425:07 - div with class column we create the div
425:10 - with class card and now it's going to be
425:12 - a little different because remember
425:13 - we're doing reviews now not movies so
425:15 - let me show you what we're going to do
425:16 - here if I close that here we can see
425:19 - that I'm going to add an ID that gets
425:23 - the review ID the review ID is coming
425:25 - directly from our API because oh
425:29 - actually this needs to be changed to
425:31 - review it's not element because we're
425:33 - getting the data from our API and the
425:36 - data is basically a an array of a lot of
425:39 - different review elements but since
425:41 - we're doing four each we're doing
425:43 - something for each review in The
425:46 - Returned data and each review is going
425:49 - to have an ID it's going to have a
425:51 - review property and a user property and
425:55 - we saw all that when we were talking
425:57 - about the back end so we're going to
425:59 - create an ID for this card element based
426:03 - on the review ID the main reason is
426:05 - because we want to be a a basically a
426:10 - unique ID that we can then refer to
426:12 - later so we can get access to this
426:14 - specific element later and we know that
426:17 - the review ID is going to be unique so
426:19 - that's why we're setting that as the ID
426:20 - so now we are going to create a few
426:23 - paragraphs so we have three paragraph
426:25 - tags the first paragraph is going to
426:28 - contain the review so strong the strong
426:31 - element just makes it bold so this is
426:33 - going to be bold and you can see right
426:35 - here uh the the review we just put in
426:38 - the review that we got from the backend
426:40 - database and then we get the user that
426:43 - we get from the backend database and
426:45 - then now this is where it gets uh
426:47 - trickier here
426:50 - this part right here so there's a few
426:53 - different components basically on the
426:55 - screen it's just going to look like two
426:56 - emojis is this going to look like a
426:58 - pencil emoji and a trash can Emoji but
427:01 - this is what we're doing we're creating
427:03 - it as a a link but it's not going to go
427:06 - anywhere that's what this um this pound
427:08 - sign or hash mark means we're not going
427:10 - to a specific URL because we're going to
427:12 - put an on click property so when this
427:15 - element is clicked which in this case is
427:17 - just this pencil element it's going to
427:20 - call the edit review function which we
427:23 - still have to create and it's going to
427:25 - pass in three Elm three pieces of
427:27 - information to the edit review function
427:29 - first it's going to pass in the review
427:31 - ID then it's going to pass in the review
427:34 - and then it's going to pass on the user
427:36 - and you can see we have these single
427:38 - quotes around each one because it's
427:39 - going to pass in each of those pieces of
427:42 - information as a string okay so then
427:45 - that so then when it says when you click
427:47 - on this little pencil it's going to call
427:49 - the review view function passing on the
427:51 - information or you can click on the
427:54 - trash can where it's going to call the
427:57 - delete review function only passing in
428:00 - the ID
428:01 - and so then it's going to append for so
428:05 - that for each review it's going to put
428:07 - this and it's going to then append it to
428:11 - the main element okay so let's just test
428:14 - it out so far
428:16 - I can press that button to load it and
428:20 - let's I'm just refresh and now I think I
428:24 - already I already put some reviews on
428:26 - this one so let's click here and see if
428:27 - they show up
428:28 - okay you can see we have the reviews
428:30 - reviews for Jeepers Creepers reborn so I
428:34 - did this off off camera basically I
428:36 - added some some reviews so they would
428:38 - show up right in there this is these are
428:40 - loading right from the database
428:43 - so if we go over to mongodb Atlas we can
428:46 - actually see uh there's 15 uh reviews so
428:51 - we can see some of the ones that I
428:53 - previously added and you can see some of
428:55 - them
428:56 - um some of them don't actually look
428:57 - correct oh you see it says null here
429:00 - when you watch a tutorial it looks like
429:02 - the person just has it all figured out
429:04 - and just does it really quick actually I
429:06 - went through and tried to figure
429:07 - everything out before I started
429:08 - recording and there were some things
429:11 - that uh it took me a while to figure out
429:12 - it was uh saving for a while I had
429:15 - something wrong so it wouldn't save the
429:16 - movie ID uh correctly it wouldn't send
429:19 - it correctly and then I had it so it
429:21 - would save it as a string that's why it
429:24 - has the quotation marks on either side
429:25 - and that's why I showed you earlier
429:27 - about how I went back in to the backing
429:31 - code to make it do the purse in to
429:33 - switch it to an integer so if we go down
429:35 - here we can see now we're at uh an
429:37 - integer and you can see a lot of these
429:39 - uh reviews here are the reviews we just
429:41 - saw on the page so so let's go back over
429:45 - to that
429:47 - okay so right now we can see these
429:49 - reviews and if I go here if I go to a
429:52 - one that doesn't have any reviews like
429:54 - here it's not going to show any reviews
429:55 - there's no reviews on that one most of
429:58 - the movies don't have reviews yet so if
430:00 - it doesn't have a review it's just going
430:02 - to basically just show like that
430:05 - and right now nothing happens when I
430:07 - click these buttons so it's basically
430:09 - just going to have an error or if I open
430:11 - up the developer tools see um whenever I
430:14 - click here it's going to say edit review
430:16 - is not defined or if I click here delete
430:19 - review is not defined because we haven't
430:21 - actually created that yet
430:24 - okay speaking of creating the other
430:25 - functions I'm going to create the edit
430:27 - review function I'm just going to paste
430:28 - this in and we'll talk about it so if
430:31 - you remember when you call edit review
430:33 - it brings in these three pieces of
430:35 - information the review ID the review and
430:37 - the user so we have to accept in our
430:39 - function we have to accept the ID the
430:41 - review and the user and uh you don't
430:44 - need these but the console.logs for just
430:46 - to make sure everything's uh working
430:48 - correctly we'll just get rid of them
430:50 - just so we can see only the important
430:51 - information here so the first thing
430:53 - we're doing is getting access to the
430:56 - element so what element that is so it's
430:59 - get element by ID and that's the ID
431:01 - we've passed in and if you remember
431:03 - that's this element this whole div here
431:07 - we created with the ID which is the
431:11 - review ID so we're getting access to
431:13 - that whole div because we're going to
431:15 - replace what's in that div and so we're
431:18 - getting the review we're creating an ID
431:21 - that we can reuse in a few different
431:23 - place cases so we're we're creating a
431:26 - new ID that we're going to put into our
431:28 - elements in um when we update the HTML
431:32 - so we are going to create a review ID
431:34 - and a user ID the reason why we're
431:37 - creating an ID by using a a word that's
431:41 - always the same plus this ID that's
431:43 - always different is because we want to
431:45 - make unique IDs for every single element
431:49 - that for basically for every single
431:51 - review element that's on the page and
431:53 - then we're just going to update the
431:55 - inner HTML that means we're going to
431:57 - switch all the inner HTML that's already
431:58 - there so this is HTML that's already
432:00 - there which we're now going to switch
432:02 - with
432:04 - all this so basically it's going to be
432:07 - very similar but there's so basically
432:10 - there are three paragraphs just like
432:11 - before except each paragraph is taking a
432:13 - few different lines but the paragraphs
432:15 - are a little different now we're using
432:17 - an input box so you already learned
432:20 - about input boxes even on the index.html
432:23 - there's an input box but this input box
432:26 - we are going to have the ID of the input
432:29 - box to be review input ID and now look
432:32 - what we're doing we're setting the value
432:34 - to be the review
432:36 - so when you click the edit button the
432:40 - review will just switch into an input
432:42 - box that you can then edit and it's
432:44 - going to start with the value that it
432:47 - already was so the review is going to be
432:48 - just how it was but now you can edit it
432:50 - we're doing the same thing for the user
432:52 - where we're uh the ID of user input ID
432:56 - and then setting the value of the user
432:58 - now you'll see why soon why we have to
433:01 - create these IDs just like this because
433:04 - we're going to have to reference those
433:06 - specific elements with those specific
433:07 - IDs to get the value from the input box
433:10 - in order to send it over to our back end
433:13 - so we have this line here
433:17 - um where we're now gonna before we add
433:20 - two buttons now it's just one button
433:22 - it's one emoji a disk icon which is the
433:26 - which just means save so once you click
433:29 - this little disk icon it's going to call
433:31 - the save review function it's going to
433:34 - pass in three things the review input ID
433:37 - the user input ID so basically these are
433:40 - just the IDS of these elements and then
433:43 - this ID is the review ID that's the the
433:45 - review ID that gets passed in here
433:48 - because we're going to if we're going to
433:50 - edit the review we need to have the
433:52 - review ID we need to know the ID of the
433:54 - review that we're going to edit
433:56 - so let's see how that looks I'm going to
433:58 - run that or basically reload
434:03 - and now I'm going to refresh here and
434:05 - now if I click here let's see if it
434:06 - works
434:07 - so it actually just changed into edit
434:10 - boxes now it it we can't really see that
434:13 - their edit boxes mainly because of
434:15 - something in the CSS so let's go back
434:17 - over and make a just change to the CSS
434:20 - here I'm going to go into the style.css
434:24 - and I'm going to basically I'm going to
434:27 - take off this all on set this unset
434:30 - property basically call
434:32 - causes this all the elements to inherit
434:35 - any inheritable values passed down from
434:37 - the parent element so that's why the the
434:41 - color is not exactly what we would like
434:43 - so but we don't want to inherit anything
434:46 - we're just going to use the the the
434:48 - normal input box color which is a white
434:51 - background and if we're having a white
434:52 - background we want to make sure the
434:54 - foreground is black and not white so
434:58 - there we go uh so I mean it's not going
435:01 - to look quite as cool as how Tomy had it
435:03 - but I think it'll be work for our
435:05 - purposes if you want to customize the
435:07 - colors even more you can so let me go
435:09 - back over here and I will refresh and
435:11 - there we go so we can see these text
435:13 - boxes I think this is my favorite movie
435:16 - ever user told me and they can click
435:19 - save which that's just gonna do nothing
435:21 - though is in the console it's showing
435:23 - error because we have not created the
435:25 - save function yet
435:28 - so I think you know what we're going to
435:29 - do we're going to create the save
435:30 - function
435:31 - okay here's the save review function
435:34 - that is called right here with the input
435:36 - ID the the review input value the user
435:38 - input ID and the ID so first we're going
435:41 - to get access to the values of those
435:44 - input boxes so we do document.key
435:46 - element by the review input ID dot value
435:49 - so that's going to get whatever value is
435:52 - here the value that the person typed in
435:54 - for the review it may just be the value
435:57 - that was already there so we're also
436:00 - going to get the user so we just have to
436:02 - get the element dot value okay now we're
436:05 - going to use Fetch and so I think you've
436:08 - already learned about fetch fetch is
436:10 - basically a JavaScript command that
436:12 - allows us to
436:15 - the send HTTP request to a URL and get
436:20 - information back so I guess yeah you of
436:23 - course we've done that we've done fast
436:25 - we've already have it up here but here
436:26 - it's using it doesn't say the the method
436:29 - the HTTP method because it just defaults
436:33 - to a get request everything basically
436:35 - defaults to get request if you don't
436:37 - specify but now we're going to pass in
436:39 - something else so first we're passing in
436:42 - the URL
436:44 - uh so just to clarify the URL is the the
436:47 - root URL and you can even see it like
436:49 - popping up on screen what the value of
436:51 - that URL is and see how it ends with
436:53 - slap reviews slash then we just put the
436:56 - ID at the end this is what we created
436:59 - the URL to be in our back end uh when we
437:02 - are going to be
437:04 - um editing a review so now we can then
437:07 - the second we're we're passing in two
437:10 - things first we're passing in this
437:11 - then we're passing in
437:14 - this so if I see if I put my mouse on
437:17 - here it highlights that it also
437:19 - highlights the ending uh curly brace so
437:22 - this is the second
437:25 - parameter that we're passing in to the
437:27 - fetch function and you can see this is
437:29 - an object that has a few different key
437:31 - value pairs including the method we're
437:34 - using put because that's how we created
437:37 - our API for editing a review we are
437:41 - using put and then we pass in the
437:44 - headers these probably look pretty
437:47 - familiar to when we were using curl to
437:49 - do this earlier and then we're passing
437:52 - in the body we just have to do
437:54 - json.stringify this is a JavaScript
437:57 - command to make a string from an object
438:00 - and we're passing in this object and so
438:03 - we have the user and the review so this
438:06 - is the key this is the value which comes
438:08 - from our variable this is the key that's
438:10 - the value that comes from our variable
438:11 - this should look kind of familiar to
438:13 - what how we did it in curl then so when
438:17 - we are doing a fetch we can do dot then
438:20 - dot then means after we get the data
438:23 - after we get the data then we're going
438:26 - to take the result and we're going to do
438:28 - result.json we're basically converting
438:30 - it to Json then we're going to get the
438:31 - result of that and we're going to log
438:34 - the result and then finally we're going
438:38 - to this location Dot reload this is just
438:42 - the JavaScript command to reload the URL
438:46 - we want to reload the website because
438:49 - now there's the edited data and we
438:51 - wanted we want to reload everything with
438:54 - the new data that's been edited
438:57 - okay let's see if it works so I'm going
439:01 - to run that
439:04 - and I'm going to manually reload with
439:06 - command or control R now I will do this
439:10 - one
439:10 - good and horrible and test well this is
439:13 - good and horrible and also amazing and
439:18 - then I'll see if I can change this to a
439:20 - capital B if I click save
439:23 - it worked good and horrible and also
439:26 - amazing
439:31 - and if we go over here and refresh I'm
439:34 - going to be Atlas let's see if we can
439:36 - find that one good and horrible and also
439:39 - amazing so we successfully
439:42 - edited or updated are review
439:46 - okay there's two more things we need to
439:48 - be able to delete a review and create a
439:51 - new review let's do the create new
439:53 - review first and then finally We'll add
439:56 - the ability to delete a review
439:59 - now there's a bunch of different ways
440:01 - that we could basically visualize the
440:04 - edit the delete the the create new
440:07 - review we could create a whole new
440:09 - website where you create a new review
440:11 - but I'm just trying to keep things
440:13 - simple so see how we'd have these
440:15 - different cards I'm going to make it so
440:17 - the first card has the little form to
440:20 - create a new review it may it's not the
440:23 - prettiest way to do it but it will get
440:25 - the point across and will show you how
440:27 - to how to do it and then you can also
440:29 - always refactor and change things later
440:32 - so we already have the code for what
440:35 - it's going to look like when you're
440:36 - editing well creating a new review it's
440:39 - going to look basically the same to
440:41 - editing a review except this time it
440:44 - won't start with any value in the value
440:46 - here because it'll be a blank value so
440:49 - what we're going to do see how we're
440:50 - basically we create all the cards for
440:52 - each review
440:54 - before we start
440:56 - adding all these review cards up here
440:59 - after we create the movie title let's
441:02 - create a card that will allow us to
441:05 - create a new review now this is
441:07 - something we could do right in the the
441:12 - HTML file because it's not going to have
441:15 - that much stuff specific to that we need
441:18 - JavaScript for but just to keep things
441:21 - simple let's do just all right in the
441:23 - JavaScript
441:25 - so you can see what I did here so what
441:28 - we created a new element just like
441:30 - before just like uh this year now we're
441:34 - going to add in our HTML just like we
441:36 - did down here and then we're going to
441:38 - create all this HTML so like I said we
441:41 - could just add this to our HTML file but
441:44 - we'll just do it like this so it's it's
441:47 - all together here in this in the
441:48 - Javascript file but you can see we're
441:51 - not using any variables in here so this
441:53 - is what it looks like if we're using a
441:54 - variable
441:55 - since we're not using the variables
441:57 - that's the way we know that we could do
442:00 - it in the HTML so we have the row card
442:03 - column it's going to say new review
442:04 - that's something new and basically this
442:07 - is all exactly the same even this is
442:09 - exactly the same to the edit the only
442:13 - there's only thing different is that
442:14 - we're hard coding the IDS we before we
442:18 - need to make sure we have different IDs
442:20 - because there could be
442:22 - basically an unlimited amount of reviews
442:24 - and every review needs a different ID
442:26 - but there's only going to be one box for
442:29 - the new review so we only need to we can
442:31 - hard code the new the idea of new review
442:33 - new user and then when we save the
442:36 - review this is where it gets different
442:37 - so we're passing in the new review
442:39 - that's the idea of here the new user
442:42 - that's the idea of here but if you
442:44 - remember down here we pass in one more
442:47 - item we pass in the this ID this other
442:52 - ID and then
442:53 - the review ID that's the third parameter
442:58 - we passed into the save review function
442:59 - but now there is no review idea because
443:02 - we haven't created a review yet so we're
443:05 - not only going to pass in two parameters
443:09 - so since we're only passing in two
443:12 - parameters we're going to have to make
443:14 - an update to our save review function so
443:18 - there's a way because normally all these
443:22 - uh all these parameters all this
443:24 - information are required there will be
443:26 - an error if we don't pass in three
443:28 - things there will be an error but not
443:31 - for long because I'm going to show you
443:32 - how to make and and something optional
443:35 - if we put equals and then I'm just going
443:39 - to put what it equals we can put a
443:41 - default value and right now it's just
443:44 - going to default to an empty string so
443:47 - if you specify a default value like this
443:49 - then you can pass in an IDE and it will
443:54 - take in that information that you passed
443:56 - in but you don't have to because now if
443:58 - you don't pass in an ID it will just set
444:01 - it to whatever the default value is
444:02 - which in this case is an empty string
444:06 - well since uh what what you have to make
444:08 - things think things should happen
444:10 - differently whether there's an ID or not
444:12 - because how you create a review is
444:15 - different than how you edit a review so
444:18 - the way we're going to make it different
444:19 - uh for accruing a new review or editing
444:22 - review is with an if statement so if and
444:26 - then we're just going to do if ID and
444:28 - then I'll put the curly braces here so
444:31 - if ID basically just means if it exists
444:34 - this will evaluate to false an empty
444:37 - string evaluates to false but if there
444:40 - if something was passed in then it will
444:42 - evaluate to true if it evaluates a true
444:44 - we want to do all this so let's cut that
444:46 - and I'll just paste it right into our if
444:48 - statement and let me do some tabbing so
444:51 - we can see that it's in this block of
444:53 - code so here's our if statement but now
444:56 - we will add an else so else
445:00 - if there is no ID that was passed into
445:03 - this function that means we're creating
445:05 - a new review so let me just paste in the
445:08 - code here
445:11 - and it's going to look very similar to
445:14 - our edit so for edit we have the root
445:18 - URL then we have the ID at the end but
445:20 - for creating a new a new review we're
445:24 - going to have our root URL and it's
445:25 - going to be just Slash new at the end
445:27 - which you may remember from creating the
445:30 - API and instead of a put method put HTML
445:34 - method we're using a post method and
445:37 - then the only other thing that's
445:38 - different is now here we pass in the
445:42 - user and the review now we're passing in
445:44 - the user the review and the movie ID
445:47 - because we need to know what movie ID
445:50 - are we creating the review for if it's a
445:54 - brand new review and then this is all
445:57 - about the same as before so then we
445:58 - convert it to Json then we log out the
446:02 - results and then we do location Dot
446:05 - reload
446:06 - okay let's try this I'll load this
446:11 - and now I'm going to refresh and now we
446:13 - can see a new review here so I can say
446:17 - um
446:18 - this movie put me to sleep and then we
446:23 - can put as the user Quincy
446:28 - and if I hit save let's see if it works
446:31 - and it shows up at the end of our list
446:34 - of reviews so that works and let's see
446:37 - if we can edit that new review
446:39 - this movie
446:42 - kept me awake
446:45 - and then we'll save that
446:48 - and it saves correctly
446:51 - so we can even go and add a review we
446:54 - can go to a whole new movie
446:58 - I'll put
447:00 - better than the original
447:04 - by
447:06 - 0.5
447:09 - percent
447:10 - okay
447:11 - uh
447:13 - there we go and now we have a review for
447:15 - the the new movie so some are not going
447:17 - to have a review
447:20 - some are going to have review but we
447:24 - still can't delete a review so let's go
447:27 - and make it so we can delete a review
447:30 - this is actually going to be one of the
447:32 - easiest Parts because the function to
447:34 - delete review is not that long
447:37 - I'm just going to paste that and it just
447:39 - looks like that so we already have it so
447:41 - you can call the delete review function
447:43 - and it passes in the ID so we just go to
447:46 - the URL slash ID and then we use the
447:50 - delete method we don't have to put in
447:52 - any other information we just have to
447:54 - call the delete method and then
447:56 - everything else is basically the same so
447:58 - let me go here
448:02 - foreign
448:06 - here so let me try to delete one how
448:09 - about this uh I'll hit the delete
448:12 - because we don't want that anyways this
448:13 - is supposed to be movie not move okay so
448:16 - that's a bad review let's just delete
448:17 - that it's gone
448:20 - the the review is gone so we can even
448:23 - even search for review let's go to um
448:26 - hackers and we have one review here uh
448:31 - before we try to leave let's try let's
448:33 - create a new review
448:34 - don't hack
448:37 - and then it appears don't hack which
448:40 - obviously is not in the spirit of this
448:42 - movie it's called hacker so we're
448:43 - definitely deleting this review
448:45 - okay it deletes the review we did it we
448:49 - created the that we connected the front
448:52 - end of our website to our back end and
448:56 - it can save update read delete all the
449:00 - crud operations and it does it with our
449:03 - mongodb database we've reached the end
449:05 - of the course thank you all for watching
449:07 - and good luck creating your own full
449:09 - stack websites