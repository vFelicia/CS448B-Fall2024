00:15 - you
01:00 - well hey everybody uh glad to be back
01:04 - hope everybody is well we have a second
01:07 - moderator with us today so i want to
01:10 - appreciate them so they are going to
01:13 - keep us on task
01:15 - i believe we've thrown out the discord
01:19 - server
01:21 - but yeah whole community is getting
01:24 - larger
01:25 - but if you are new here thanks for
01:27 - joining us i am sam from python basics
01:31 - and i do
01:32 - a bi-weekly stream here with on free
01:35 - code camp uh they have been gracious
01:38 - enough to allow me to take over their
01:40 - channel
01:40 - for an hour or so every other tuesday
01:44 - i really enjoy doing this um
01:47 - i should have looked i never remember
01:49 - cardinal help me uh is this 12 or is
01:51 - this uh
01:53 - 11. i can't remember but
01:56 - we have been doing streams for a while
01:58 - bo uh he does a fantastic job uh
02:02 - allowing me to do these streams and i
02:05 - we have our own playlist so you can jump
02:08 - over there if you are
02:10 - really new saw some comments before we
02:12 - got started today
02:14 - but all right what we're going to be
02:16 - doing today are some actually
02:20 - real problems that i ran into in my
02:22 - learning process 13th today is the 13th
02:26 - video that excuse me stream that we have
02:29 - done and right after the streams are
02:31 - concluded they go uh they go back
02:35 - and are uh
02:37 - stored and then they get kicked over to
02:39 - the playlist and want to appreciate
02:40 - quincy for allowing me
02:42 - uh this wonderful opportunity to be with
02:44 - you guys uh every so often so okay
02:47 - second conversion so
02:49 - uh
02:50 - epic time epoch time however you say it
02:54 - uh time in the computing world
02:58 - is uh
03:00 - tracked by seconds
03:01 - the base baseline time
03:04 - is uh
03:07 - january 1st 1970 actually something
03:10 - that's older than me
03:11 - so but what but then what you need to be
03:14 - aware of is well what does that mean i
03:16 - have 10 000 seconds well
03:19 - let's actually build something that is
03:22 - going to allow us
03:24 - to
03:26 - figure out how much time is actually
03:28 - passed
03:29 - i haven't actually checked do i have my
03:31 - mic off or on i didn't even check that
03:34 - because i muted it earlier but we are
03:35 - all good
03:37 - uh okay
03:38 - so
03:39 - we need to think about how in the world
03:42 - are we going to do this
03:44 - so first we need to get our header
03:48 - uh line going so we're just going to
03:50 - take in an x
03:52 - and do this so
03:54 - for those of you who haven't thought
03:55 - about this
03:57 - and you're very fortunate i have because
04:00 - i
04:01 - i would say i'm a uh
04:04 - a
04:04 - a nerds nerd
04:06 - all right so anybody have any clue how
04:08 - many seconds are
04:10 - in a day anybody ever thought about it
04:15 - all right
04:16 - um and that is absolutely fine
04:19 - if you are a beginner everything that i
04:21 - do
04:22 - is
04:23 - thought of and the purpose of what i do
04:25 - is if you have no clue
04:27 - ever have you ever done a line of python
04:31 - that's absolutely fine my whole channel
04:33 - is dedicated to that so down in the
04:34 - description below is the link to my
04:38 - my
04:39 - personal youtube channel python basics
04:42 - and uh starts from the beginning and
04:44 - goes on over 800 videos so all right so
04:47 - we know there's 60 seconds in a minute
04:50 - uh
04:51 - 60 minutes in an hour
04:54 - 24 hours in a day
04:57 - so there are 86
04:59 - 400 seconds in a day
05:01 - so if we think about how in the world
05:04 - we're gonna do this
05:07 - correct
05:08 - we need to have buckets to divide this
05:12 - out
05:13 - and
05:14 - if how would we go about maybe starting
05:18 - to fill up these buckets
05:20 - because we've we're gonna have to
05:24 - uh
05:27 - okay sorry i was looking at some
05:29 - comments don't know what the lag is but
05:31 - uh see we got a really substantial
05:34 - number of people here today so i'm
05:35 - actually kind of excited all right um
05:40 - so we need to fill up
05:42 - the largest bucket we want to track so
05:45 - our first bucket is going to be
05:47 - days
05:48 - and then we're going to fill up any
05:51 - leftover from there so what
05:55 - what tools do we have at our disposal
05:58 - to find out
06:00 - what is
06:01 - leftover
06:02 - so we have
06:05 - we have one way
06:08 - that we find
06:10 - a remainder
06:11 - but then there's another way to know
06:13 - when we fill up a full
06:16 - bucket
06:17 - so we're actually going to utilize
06:19 - the floor division
06:22 - all right
06:24 - so let's think about this
06:26 - so if i have 72
06:29 - seconds
06:30 - and i divide it by 60 so i want to know
06:34 - how many minutes that is well that's 1.2
06:39 - but the dilemma here is
06:42 - all right so now i'm going to take 1.2
06:46 - and
06:47 - then i have a mathematical problem so
06:50 - okay so then i'd want to multiply this
06:52 - by
06:53 - 60 to then know that i have one minute
06:57 - and 12
06:59 - seconds
07:00 - no we don't want to do that
07:03 - but if i go through here and i use my
07:06 - floor division
07:08 - oh
07:09 - okay
07:10 - so then
07:12 - then i can go through and set this up
07:16 - where are my notes
07:17 - sorry then i can set this up and maybe
07:21 - then
07:22 - know what i have
07:24 - what i have left because then
07:27 - i do this
07:29 - so then i do my modulo
07:32 - aha
07:33 - so now here are two
07:36 - of our
07:37 - basic
07:38 - operators
07:40 - that we've known and seen
07:43 - actually we are going to use command
07:45 - line today we're going to toy around
07:47 - with that and find specific files that's
07:50 - going to be something that we're going
07:51 - to have a good time doing
07:55 - all right
07:58 - um
08:02 - okay
08:06 - uh all right so we need to get this
08:07 - going so first we need to figure out
08:10 - we need to fill up with our largest
08:11 - bucket first right
08:12 - so we're going to take day
08:15 - equals
08:17 - and we we know that
08:20 - we assign a variable with the equal sign
08:23 - and we link that information together so
08:25 - the first the very first thing we're
08:26 - going to do
08:27 - is we're going to take our 86
08:30 - 400
08:31 - so if this fills up one of these
08:35 - i have a full day
08:38 - so let's print
08:42 - we'll just go from here
08:45 - oops
08:49 - and
08:50 - i think i've talked spoken to this oops
08:54 - we'll just do 86 400. we'll just make
08:57 - this
08:58 - all right
08:59 - so i have one day
09:02 - and before we get started we want to
09:05 - i want to lay out this format so it's
09:08 - going to be day
09:11 - and close this out and as we go through
09:14 - we'll add to it okay so how many days we
09:16 - have one
09:18 - so what i'm doing here is i'm not going
09:19 - to write all of this at one time i'm
09:21 - going to go through
09:23 - and incrementally change this
09:26 - so all right
09:28 - okay so we did over here where i get
09:32 - so that was minutes
09:34 - so all right let's take our
09:36 - uh
09:38 - seconds
09:40 - and we have 86 400 right
09:43 - so then i'm going to take my seconds
09:45 - divided by
09:47 - 86 400.
09:50 - and i get one
09:51 - hmm
09:53 - okay so then if i
09:56 - if i go
09:56 - [Music]
09:58 - if i change this to
10:00 - let's see
10:01 - let's say
10:02 - 9
10:03 - thousand
10:06 - so i go seconds
10:08 - floor division eight six four
10:10 - zero zero still get one
10:13 - but i don't know how many
10:17 - how many hours that is because so i
10:20 - could go
10:21 - ninety thousand
10:23 - minus eight six four hundred
10:26 - okay i have thirty six hundred
10:29 - seconds
10:30 - left over
10:31 - so then how many are
10:33 - are in
10:36 - an hour 60 seconds in a minute
10:39 - so
10:40 - okay
10:42 - hmm
10:44 - but i want to make this
10:47 - a little bit
10:48 - neater
10:50 - because i want this to be uniform i
10:52 - didn't want this to be
10:57 - how is this used well if you're tracking
11:00 - time
11:01 - so uh if you're just joining us what
11:03 - we're doing right now is a second
11:04 - conversion so computers uh typically uh
11:12 - a windows and uh unix
11:15 - track in seconds
11:18 - so seconds going by so if you're having
11:20 - larger lengths of time go by in events
11:24 - you need to know how to convert this
11:26 - over you can use the time module to uh
11:30 - to see the actual date and time that
11:33 - that epic time would be but if you need
11:35 - to know the length of time we kind of
11:37 - need to think through this problem
11:42 - all right so now
11:44 - i could do this
11:46 - or
11:47 - i then make a new variable
11:50 - where i come up here
11:52 - and i go hours
11:54 - then
11:57 - make sure i'm going to do this right
11:59 - so then i go
12:02 - x
12:03 - modulo
12:04 - 8 6
12:06 - 4 0 0
12:09 - then i do floor division
12:11 - on 3600 which is our seconds
12:15 - times our minutes and that's how many
12:17 - seconds are in an hour so 86
12:20 - 86 400 seconds in a day
12:24 - 3600 seconds in an hour so that's what
12:28 - i'm doing right here i'm filling up my
12:30 - day bucket if if i do so if i change
12:33 - this
12:34 - to right here
12:36 - if i drop this down to 80 just 80 000
12:40 - i will have zero days right
12:43 - so let's keep this 86
12:46 - 4.
12:49 - sorry i have
12:51 - i have one day
12:53 - but now let's change let's add hours so
12:56 - now now i do fill up the day bucket
12:58 - first because if you go in reverse
12:59 - you're automatically going to be
13:01 - overflowing the second bucket we're
13:03 - going to do days
13:04 - we're just starting with days we could
13:06 - go weeks months however you want to
13:08 - actually i guess days
13:10 - and weeks
13:11 - months they vary all right so fill up
13:14 - the day bucket now we're going to fill
13:15 - up the
13:18 - the uh
13:22 - there we go oops and we need to get this
13:24 - formatting right so now that we have
13:26 - multiple so we're going to go f
13:28 - and then
13:32 - day and then
13:35 - colon
13:35 - [Music]
13:38 - h
13:40 - and if you do not know what i'm doing
13:42 - right here is i'm doing string
13:43 - formatting so here are my placeholders
13:46 - and here are my variables
13:48 - all right let me see if i close this all
13:50 - out
13:53 - so now i have
13:59 - let's see
14:02 - 86 000
14:04 - now we need to make this a little bit
14:06 - larger
14:07 - actually let's get another one
14:09 - seconds let's do our 90 000
14:12 - because this should be
14:14 - so now i have
14:16 - because there are we found out that we
14:19 - have a remainder at 90 000 seconds we
14:22 - have one day
14:24 - one hour
14:25 - so look what we got
14:27 - filled up this bucket
14:30 - here's our mathematics
14:33 - for our
14:35 - leftover after we fill this bucket
14:38 - then we come down here we stair step
14:42 - it's kind of like nesting dolls if you
14:44 - think about that if you've ever if you
14:45 - guys have ever seen the
14:46 - very cool awesome
14:48 - russian nesting dolls
14:50 - smaller one inside a smaller one inside
14:52 - a smaller one
14:53 - excuse me
14:55 - smaller one inside a bigger one
14:57 - inside and it just stair steps down you
14:59 - can take them all out and repackage them
15:01 - very beautiful
15:02 - do we have anybody
15:04 - did i call them right are they nesting
15:05 - dolls there's probably a better way do
15:07 - we have anybody in here from from russia
15:09 - that could maybe educate or correct that
15:11 - hopefully i did not offend anybody all
15:14 - right
15:14 - so we fill up our day bucket fill up our
15:16 - hour bucket
15:18 - now let's really see how well i did
15:21 - let's uh
15:24 - let's change this to 91.
15:29 - okay uh-oh so
15:32 - do i have some remainder possibly
15:35 - probably so so now now i have this new
15:39 - bucket right here
15:40 - that is going to have
15:42 - that is one
15:43 - [Music]
15:45 - ish maybe
15:46 - so if i do
15:48 - that let's see
15:50 - okay
15:51 - so i have
15:53 - this
15:54 - so i do have a remainder so let's go
15:56 - back to floor division
16:01 - and i think i just made a mistake
16:04 - all right
16:07 - no that's right
16:08 - all right so now we need to do minutes
16:10 - and of course
16:11 - this is simple
16:14 - uh then we go x
16:17 - pull out
16:19 - how many
16:21 - seconds are in an hour
16:23 - so i'm here
16:25 - to here
16:33 - now
16:37 - we need to do our floor division on this
16:39 - is re really really simple
16:42 - so
16:43 - but we are not
16:45 - boom
16:47 - placeholder
16:49 - brackets i don't see chat i should
16:51 - probably have discord open so
16:57 - cardinal and
16:59 - jan
17:00 - janet and cardinal you guys are doing a
17:01 - great job thank you very much anything
17:05 - anything super
17:07 - that i might be missing
17:10 - let's see
17:14 - all right
17:19 - gotcha awesome yeah cardinal i'll leave
17:22 - i'll leave you open on uh
17:25 - discord so
17:26 - if there's anything
17:28 - i'll just glance at that all right cool
17:31 - okay so
17:35 - now
17:36 - now we're getting real real close and i
17:38 - did not put minute inside our
17:39 - placeholder
17:42 - all right
17:43 - and we need to do blue
17:46 - okay
17:47 - days hours minutes
17:51 - okay
17:52 - aha this is actually
17:54 - turning out to be pretty okay so
17:57 - we got
17:58 - so apparently
17:59 - 91 000 seconds is
18:03 - at least
18:04 - one day
18:05 - one hour
18:07 - 16 minutes
18:08 - so now let's try to get some really
18:16 - uh
18:17 - let's see if we get some
18:18 - obscure so 90
18:20 - 1
18:21 - 1
18:22 - 2
18:23 - 1.
18:24 - see what that is
18:26 - so now we have seconds left and of
18:28 - course this is a
18:29 - super easy one
18:31 - so x modulo
18:38 - all right
18:41 - and placeholder let's clean this up a
18:44 - little bit because
18:46 - seconds
18:50 - there we go
18:52 - oh so that has some remember okay
18:55 - so if i go
18:57 - and add
19:00 - seconds i think this is 114 thousand
19:04 - 108.
19:06 - changes the format
19:08 - actually yeah this is starting to do it
19:10 - so what we do know
19:12 - is from before of how to get this
19:16 - nice
19:17 - and pretty
19:18 - in standardized
19:21 - format
19:22 - oops not five of them
19:26 - so if
19:27 - there we go
19:31 - so what i'm doing right here is i'm
19:33 - saying i want this variable in this
19:35 - placeholder and i want two digits
19:39 - i guess for the day i could
19:43 - i might need
19:46 - well we'll keep it standard zero two
19:50 - then for hours of course there's two
19:52 - digits for minutes there could be two
19:54 - digits and for seconds there could be
19:55 - two digits so the reason what the
19:59 - zero is
20:00 - is if you'd like it to have a zero in
20:03 - place
20:04 - or two character places
20:08 - use a placeholder with zeros
20:11 - or
20:12 - have it be empty so that's that's what
20:14 - we're doing right here
20:15 - i kind of like
20:17 - the zeros
20:18 - but that's my preference so all right
20:22 - um that
20:24 - that is
20:26 - that is that
20:27 - uh the f the f in print um
20:31 - is the f the f leading so string
20:34 - formatting
20:36 - string formatting has evolved over time
20:39 - throughout the python
20:40 - world and this is the most recent
20:44 - because you could do this
20:46 - let's
20:50 - copy
20:51 - i'll show you one of the older ones that
20:53 - you may have possibly seen before
20:55 - so we get rid of the f string
20:58 - and you go to
21:00 - format dot
21:03 - format
21:05 - and then you place in d
21:08 - hour
21:09 - minute
21:10 - seconds
21:11 - and i get rid of the variable here
21:15 - you may have seen it like this before
21:17 - so we'll we'll cover both
21:20 - did i get all the
21:22 - bam
21:24 - there we go so i get the same result
21:26 - just looks a little bit different
21:29 - yes absolutely so this this is
21:33 - um and then there's even a precursor to
21:36 - the string formatting which was
21:40 - uh
21:41 - very
21:42 - cumbersome and not elegant so the
21:45 - process of this and this is just another
21:48 - one of the
21:49 - hundreds of examples of why i love
21:50 - python so much is it's constantly
21:53 - innovating constantly becoming smoother
21:56 - so what the argument was is
21:59 - should we need to type all of this at
22:01 - the end or is there possibly a way to
22:04 - clean this up
22:05 - and
22:06 - this
22:06 - to me
22:08 - oops
22:10 - looks pretty darn clean because now all
22:13 - i have to do is just add an f in front
22:15 - of this instead of coming all the way
22:17 - out here and saying hey
22:19 - i know this is a string even though i'm
22:20 - putting this in a string
22:22 - and going from there but it's just f
22:24 - string
22:27 - so all right
22:32 - let's see
22:40 - oops
22:41 - all right
22:42 - so let's continue on now we are going to
22:45 - oops that's not where i wanted to go
22:49 - uh next next next next next well i hope
22:52 - everybody is uh having a good time and
22:55 - getting something out of this i sure do
22:57 - truly enjoy python so if you're just
22:59 - joining us in the past few minutes we're
23:01 - here for about 23.
23:03 - have about i had about an hour time
23:05 - today so uh i'm gonna try to squeeze all
23:08 - this in
23:09 - but thank you for joining us today i'm
23:10 - sam from python basics and uh make sure
23:14 - that you guys are supporting uh free
23:16 - code camp it's a wonderful organization
23:19 - uh they allow me to come and stream
23:22 - every other week i was doing weekly
23:25 - streams but my schedule has gotten
23:27 - a little hectic which is nice
23:31 - so
23:32 - still want to do these things because i
23:34 - truly believe everything that beau and
23:37 - uh
23:38 - and quincy are
23:40 - are believing in so okay
23:43 - now automating
23:45 - the next one that we want to talk about
23:46 - is automating file names so
23:49 - what i ran into in a situation was i was
23:53 - pulling down
23:54 - a
23:56 - tremendous amount of data happened to be
23:59 - stock data
24:00 - and i don't know if we'll do that
24:02 - screener here i don't know if there's a
24:04 - big enough interest
24:05 - on this channel so i'll probably send
24:09 - out some feelers and see what you guys
24:10 - think
24:11 - so
24:13 - i was getting a tremendous amount of
24:14 - data with
24:16 - the
24:17 - with the grab that i did with the api
24:20 - and i was only going to be able to
24:23 - grab so much
24:25 - and then
24:27 - i was going to grab all of those files
24:30 - that i had these objects these happen to
24:32 - be json objects that came back
24:35 - and so i was going to save them pickle
24:38 - them
24:38 - because there's a process in python
24:41 - to save variables to files because
24:46 - or as files as a file object
24:49 - so it dawned on me that i could go and
24:53 - save these but then i said do i want to
24:55 - sit there
24:56 - and figure out how in the world i'm
24:58 - gonna manually do this well then it
25:01 - dawned on me that when you click on a
25:03 - link to download a file
25:05 - you get
25:07 - you get either the file name or maybe
25:09 - even something after it like the date
25:12 - so that's what i did so the how i
25:15 - handled this challenge
25:17 - was
25:18 - i took
25:21 - import
25:22 - time
25:23 - so time is a module
25:26 - that is built in too i didn't even check
25:28 - and see do i have this sized oops
25:31 - that's too much we'll do that in a
25:33 - little bit so that is built in to python
25:37 - the core developers
25:39 - have put this in for us and
25:43 - let's just look at this wonderful handy
25:46 - little tool
25:48 - right
25:49 - where is it
25:50 - not good at my alphabet sometimes
25:55 - boom
25:57 - so time
25:59 - dot asc time
26:02 - actually we're not going to skip a step
26:04 - we're going to use our help
26:05 - so if you don't know what the help
26:06 - function is it is your best friend same
26:09 - thing with der
26:11 - so der
26:13 - comes from the command line we're
26:15 - actually going to touch on that a little
26:16 - bit so when i run dur don't pass an
26:18 - object into it i get everything that is
26:21 - downloaded in any objects and variables
26:24 - that are live at this time
26:27 - and so then if i pass it
26:30 - an object
26:32 - it is going to give me all of the tools
26:36 - that go along with it methods
26:40 - variables attributes
26:42 - and
26:44 - any functions
26:45 - now
26:46 - then if you want to delve deeper
26:49 - you use the help function and
26:51 - the information that is associated with
26:53 - that
26:55 - whatever object you pass
26:58 - you then will get everything ac time
27:01 - so i wrap this up okay let's slide this
27:03 - over a little bit
27:05 - aha
27:06 - convert a time tuple to a string
27:10 - boom
27:11 - so this is what dawned on me so as i'm
27:13 - going through and grabbing these files
27:17 - i can literally sit here and catalog and
27:20 - then it really just expanded upon itself
27:22 - so then i now have a file digital record
27:25 - of all of these requests that i make and
27:28 - i have this handy little tool right here
27:30 - now we're going to run across a couple
27:32 - of problems that we're going to have
27:34 - but we know how to fix them so if you
27:37 - haven't heard me say it on this channel
27:39 - the purpose of everything that i like to
27:41 - do is i like to give you guys
27:44 - tools for your toolbox and make sure
27:46 - that you guys fill them up
27:48 - so that when you run into a problem
27:51 - you're just not walking around with a
27:52 - hammer going i know how to do this and
27:54 - i'm going to beat it over the head no
27:56 - we're going to expand your
27:58 - all the skills that you have so that
28:00 - when you run across something
28:02 - you will be able to revert back to it uh
28:05 - and one more thing so i've gotten pretty
28:09 - good at saving this shell
28:12 - and and then uploading it over to github
28:15 - so if you've not clicked over and uh
28:18 - subscribed to my channel and you can
28:20 - just watch one of the
28:22 - recent videos i tried to go back and put
28:24 - it in as many of the old videos but it
28:26 - is standard and you go to my github
28:30 - there's a rolling script that that is
28:32 - the free codecamp dot py file and then
28:36 - everything that we've done over here in
28:37 - the shell is its own folder excuse me
28:40 - it's its own file with the date of today
28:43 - or the day of the lesson okay
28:47 - that being said let's get going on how
28:50 - in the world to do this
28:52 - so
28:53 - here we go
28:55 - slide that down some so we need to
28:57 - import time
29:02 - all right
29:10 - then so let's get let's start with just
29:13 - f file
29:14 - fname
29:16 - equals time
29:17 - dot
29:19 - ac time
29:22 - so then f name
29:28 - so here we go
29:29 - aha
29:31 - so i have this
29:34 - this information right here but i will
29:36 - tell you in the windows world
29:40 - that we need to fix these spaces
29:44 - and
29:45 - these
29:47 - colons right here so let's do that so
29:50 - and we'll we'll stay we'll stay uniform
29:52 - to what my real problem was
29:55 - so then we're going to then
29:59 - i can sit right here
30:00 - now if you do not know let's let's touch
30:03 - on this
30:04 - who knows how to change something
30:07 - in a string
30:12 - so now that i have so i have my dir
30:17 - so strings are immutable
30:20 - but
30:21 - i have
30:24 - i have a handy tool
30:29 - that and let's try let's see if i can do
30:31 - my alphabet again
30:34 - replace so has anybody seen
30:36 - the replace method
30:38 - so we need to do this
30:41 - okay
30:47 - all right
30:49 - you could do regex but we're not we're
30:51 - not getting we're not going to go
30:53 - int or
30:56 - string okay uh int
30:58 - would convert
31:02 - a string that isn't that is an integer
31:05 - to an integer and if i had an int
31:08 - here
31:10 - i would wrap this
31:11 - to convert that to a string now what
31:14 - we're going to do is
31:15 - we're going to look at help.str
31:19 - dot replace
31:23 - okay
31:24 - self return a copy
31:25 - ah so this is an important word return a
31:28 - copy all occurrences of substring old
31:32 - replacement by new so old
31:35 - new
31:36 - okay so if i go name
31:38 - let's try it over here oops name
31:40 - underscore or f name underscore double
31:44 - place
31:45 - and i know i have a problem with
31:48 - a blank and i'm going to replace it with
31:51 - an underscore to solve all my problems
31:54 - and all my worries cool so now here i am
31:57 - now i want to see who was paying
31:59 - attention
32:02 - all right
32:03 - so why didn't that work
32:07 - return a copy
32:09 - so this is not in place or return none
32:13 - so this is this is create so i need to
32:17 - come up here
32:18 - and i can literally so actually we're
32:20 - just going to do this
32:22 - like this
32:26 - equals f.name
32:30 - dot replace
32:36 - okay see
32:41 - okay
32:44 - all right
32:45 - c has changed the original it hasn't
32:48 - changed the original exactly
32:51 - all right what's the quick question so
32:53 - what this does is this is creating
32:55 - something new so if i were to
32:58 - change this to underscore two
33:01 - and run this
33:02 - so i have here
33:04 - print
33:07 - print
33:08 - file name
33:10 - and print
33:12 - file underscore name
33:14 - underscore two
33:17 - i have i have my original and then this
33:20 - makes a copy this returns this does not
33:23 - change in place it does not affect
33:27 - the original at all
33:30 - okay
33:31 - yes the live streams are available later
33:35 - and you are able to rewatch them and go
33:37 - to the playlist and watch all 12
33:41 - videos at one time and if there's
33:43 - anything
33:44 - there's anything in here that
33:47 - you just need more of over on my channel
33:49 - is a breakdown i have ex
33:52 - i have micro videos and i like that term
33:55 - so much because one of my subscribers
33:57 - came up with it i'm not creative enough
33:58 - to do that
34:00 - so
34:01 - what we're actually going to do is i'm
34:02 - going to do this we're actually going to
34:03 - come up here and merge
34:06 - and merge and do these
34:08 - on the same line so i'm going to show
34:10 - you this right here
34:13 - so i don't need this
34:15 - and we're going to do
34:17 - replace
34:20 - with
34:22 - underscore so now we just don't even
34:25 - really have to worry about this
34:27 - so this happens all at one time so i'm
34:29 - creating a string object i'm going out
34:32 - i'm saying i'm telling my computer to
34:34 - hey grab me
34:35 - grab me this
34:38 - um grab me this time this time stream
34:41 - object with the date
34:43 - and then
34:44 - i need i have an issue i want you to
34:48 - throw this
34:49 - into uh
34:52 - i want you to change
34:54 - this right here now
34:56 - there's a little little trick right here
34:58 - that we do have a problem
35:00 - so
35:01 - i commented that we are going to be
35:02 - making a pickle object
35:05 - we're going to be pickling these files
35:06 - and we can talk about that at a later
35:08 - time i don't think we'll get into this
35:10 - so i need to add an extension right now
35:12 - because this is a file name right so i'm
35:14 - going to need to know where to put it
35:17 - so i got
35:19 - my oops
35:21 - plus
35:23 - because i can concatenate
35:25 - p k l close that out
35:28 - run this again oops
35:30 - and
35:31 - [Music]
35:33 - where am i
35:36 - ah
35:38 - saw it type thought i changed it typed
35:40 - it exactly back the way i had it so now
35:43 - i have
35:45 - this
35:46 - wonderful file name right here now i do
35:48 - have one little problem
35:52 - windows does not like that
35:56 - file
35:56 - name equals file
35:59 - name
36:01 - dot replace
36:04 - and i'm going to replace my colon
36:08 - with a
36:10 - i can't remember what i replaced it with
36:13 - ah another underscore
36:15 - i always like underscores
36:18 - i don't like dashes don't know why i
36:20 - wish i had a good reason why i didn't
36:21 - like why i don't like dashes so now so
36:24 - now i have a this huge section
36:29 - i will have all these files
36:33 - yep i just got the colons great question
36:34 - thank you
36:42 - okay
36:43 - um
36:49 - all right
36:50 - so now i have
36:52 - all of the files that i'm going to have
36:54 - later now you could set this up
36:58 - right now and be storing these files and
37:01 - knowing which ones to go and grab if you
37:03 - have
37:04 - a moment
37:05 - and you're just going to be grabbing
37:07 - these files these json objects turning
37:09 - them into files pickling them and coming
37:11 - right back
37:12 - now
37:14 - now let's say
37:15 - time has gone by you did not same save
37:18 - all of these file names but you know
37:21 - that you have
37:23 - all of these pickle files that are out
37:26 - there these pkl files and you want to go
37:30 - to
37:31 - your
37:33 - computer your directory your
37:37 - your folders and find all of them
37:40 - so now now we're going to look at the
37:42 - command line a little bit
37:44 - and because this is where
37:47 - this is where python actually has this
37:49 - so we're gonna we're gonna delve into
37:53 - dur a little bit in the command line so
37:55 - all i did was type dir
37:58 - dir directory
37:59 - so now i want to show you this
38:02 - so you can actually go in
38:05 - so if i type star.star what i'm telling
38:09 - windows is i want all of the files
38:13 - no matter
38:14 - what it is
38:16 - the dot in any any type of text after
38:20 - i get it so now watch this
38:23 - so der
38:25 - star dot i remember when i was first
38:27 - learning computers a long time ago
38:29 - you might need
38:31 - you might need all of the
38:34 - exact files the
38:39 - so now what i did is i typed
38:41 - star dot exe all of the
38:45 - exe files so now in this folder
38:48 - this folder right here windows will now
38:50 - spit out
38:52 - all
38:53 - only only but all of the files that end
38:58 - so if i were to go d i r
39:01 - uh a or
39:03 - a star dot star
39:06 - i get all of the files that start with
39:08 - an a
39:09 - capital and and lowercase
39:12 - so now the reason i show you that to
39:14 - show you this
39:16 - because now we are going to
39:20 - um
39:21 - now what we're going to do
39:23 - is we're going to learn about a very
39:25 - cool
39:26 - a very cool um
39:32 - module
39:33 - called glob
39:35 - i wish i knew the story behind why it's
39:38 - called glob but we're just gonna do
39:41 - what we do oops
39:44 - helps if i do
39:46 - glob cra glob
39:48 - globa okay
39:51 - because
39:54 - let's do let's run help on glob
40:01 - okay we got path
40:04 - file names glob
40:05 - path return list
40:08 - ooh
40:09 - this looks promising help
40:14 - glob
40:16 - glob
40:18 - huh turn a list of paths
40:21 - paths or file names
40:23 - okay path is how to get to the
40:26 - information that took me forever to
40:28 - realize so if you see path
40:30 - that's not just path to the directory
40:33 - it's the path to the information the
40:35 - file the path all right
40:43 - so now
40:44 - literally
40:47 - it's going to be just like
40:50 - so where am i
40:55 - so now we're going to
40:58 - let's combat this out
41:04 - and import glob
41:07 - then i'm going to go files
41:10 - equals
41:11 - glob
41:12 - dot glob
41:14 - and i want all my so i've i've done this
41:17 - i've been pulling all this data for a
41:20 - month and i'm going to throw it in a
41:21 - data frame which
41:23 - we'll be building to that and we'll deal
41:25 - with pandas i love pandas i uh
41:29 - numpy pandas
41:31 - beautiful soup these are all the things
41:33 - that we'll get to but i don't ever want
41:36 - you guys to be afraid we will do these
41:39 - in little baby steps
41:42 - um
41:43 - how do you eat and i i love all these
41:44 - how do you eat an elephant one bite at a
41:46 - time how do you move a mountain one
41:48 - spoonful at a time
41:50 - all of these things are
41:52 - centuries older than i but just put one
41:55 - foot in front of the other and then
41:56 - there's the famous disney movie that i
41:58 - love to quote
41:59 - just keep swimming just keep swimming
42:01 - just keep swimming just one
42:03 - day
42:05 - more alright so now now that i have
42:11 - this right here so now i'm going to
42:14 - print
42:15 - files
42:16 - so i literally have said glob.glub
42:20 - pull this in
42:21 - and here are all of my pickle files that
42:24 - i have so far to date
42:27 - and in this in this folder i guess i
42:30 - thought there were more in this folder
42:37 - and
42:42 - okay sorry i was looking at
42:45 - all right
42:45 - so now that so then i can go through
42:48 - here
42:50 - and grab all these files pull these in
42:52 - and we'll do
42:53 - that when we get going on our
43:02 - an api well actually that's what i think
43:04 - we're getting close to
43:06 - sorry i thought i saw somebody pull up
43:10 - getting close to
43:11 - if there's enough interest because i
43:13 - don't know how
43:14 - this would be too specific but i'm
43:16 - actually kicking around the idea
43:18 - of teaching you guys
43:20 - uh or making doing a doing a uh stream
43:23 - on uh
43:25 - the ameritrade api for stock screeners
43:28 - because that's actually
43:30 - basically what i other than teaching
43:32 - that's that's what i do
43:34 - um
43:35 - is that i
43:37 - pull down stock data and look at it and
43:40 - manipulate it and
43:41 - go from there
43:42 - so
43:44 - powershell without downloading python
43:49 - yeah apis are fantastic especially i
43:51 - mean it's a souped-up it's a souped-up
43:53 - uh module that somebody else wrote so
43:56 - all right let's see let's see let's see
43:58 - all right so we need to
44:01 - let's see where else are we we got 16
44:04 - minutes
44:05 - all right
44:07 - we need to look at something
44:09 - so here's a great here's a great thing
44:12 - to think about all of these things that
44:13 - i have you guys do especially especially
44:16 - this
44:17 - and especially what was it two weeks ago
44:19 - with our random password generator
44:22 - there's a way to clean that up and have
44:23 - that be much faster but it's to get you
44:26 - everybody to think because
44:28 - i was such a one directional thinker and
44:32 - one directional problem solver
44:35 - but when i started programming
44:37 - it just opened my eyes
44:39 - of how
44:40 - and i really loved challenges where i
44:43 - would write a program and when i was
44:45 - first writing them they were horrible
44:47 - they were so lengthy well i think i
44:49 - showed you guys my first attempt at
44:51 - solving a um
44:54 - the uh oh my goodness prime numbers
44:58 - how if if a number was a prime number or
45:01 - not it was it was horrid
45:03 - it was absolutely horrid and then i just
45:05 - made it smaller and smaller and smaller
45:07 - and that that's the point get it to work
45:10 - it's going to be ugly it's fine if it
45:12 - works fine then go from there so
45:16 - now the next one we're going to do is
45:18 - we're going to think about if we have a
45:20 - list
45:22 - uh let's see
45:24 - x
45:26 - x equals
45:27 - 1
45:28 - 43
45:30 - 5.
45:32 - 27
45:33 - um 19
45:36 - and we have four in there okay
45:40 - now
45:41 - if i say find the
45:43 - largest and smallest well my goodness
45:47 - we can go to help
45:50 - and here's the awesome thing you type in
45:56 - hilton's
46:00 - options
46:01 - wow cannot spell today sorry guys
46:05 - is it built-ins
46:09 - ah yeah built-ins
46:13 - oh my goodness
46:15 - there we go
46:17 - so i have all of these
46:20 - functions
46:22 - that are already here for me
46:25 - so i have
46:31 - max
46:32 - okay
46:34 - built-in function max
46:36 - you get a list of arguments
46:38 - single uh iterable okay then men
46:42 - okay so i'm sitting here
46:44 - so if i say find the largest or the
46:46 - smallest
46:48 - this is this is just
46:50 - i mean this is a joke right so i take x
46:55 - and then min
47:00 - so i go from there it's 43 and one ooh
47:03 - all right
47:05 - all right
47:06 - so now
47:07 - what happens if i say
47:11 - uh all right find me the second
47:15 - largest and the second
47:17 - smallest
47:18 - oh
47:19 - oh
47:21 - okay so that's that's a different
47:23 - problem so now i gotta
47:25 - i gotta put my little thinking cap on
47:28 - and how in the world would i do that
47:31 - okay well wait a second
47:33 - i have another
47:37 - so i want the largest and the smallest
47:40 - and only if i could have them on the
47:41 - ends
47:43 - sorted
47:44 - so now
47:47 - return a list
47:49 - okay
47:50 - return a list so we learned just last
47:53 - time that return means it creates
47:58 - yeah cardinal if they're if they're
47:59 - they're distracting and jan if they're
48:01 - distracting other people just uh
48:04 - look
48:05 - this
48:06 - free code camp is a wonderful
48:08 - opportunity
48:10 - we're going to keep this
48:12 - python centric and programming there are
48:15 - people here who are
48:17 - dying to learn something new want to
48:19 - better themselves if you're not here to
48:21 - do that this just may not be the place
48:24 - for you so i'm spending my time doing
48:26 - this we have two awesome moderators
48:28 - spending time
48:30 - keeping this in line
48:32 - so we're going to be mature and we're
48:34 - going to be respectful of everybody's
48:35 - time so guys if they're doing anything
48:37 - uh that's not productive just kick them
48:41 - thank you very much all right
48:42 - so now if there was a way for us to
48:46 - have this in a structure
48:49 - so sorted returns something
48:54 - so
48:57 - bam
48:58 - but
48:59 - since it returned
49:01 - it did not change
49:03 - so now
49:14 - and we know from indexing so if i want
49:17 - this one
49:18 - and this one
49:21 - i know from indexing it will always be
49:24 - if it's the second
49:25 - largest or second smallest however we
49:28 - want to do this
49:29 - and then also we have
49:33 - we learned about key
49:34 - a while ago with our sorting
49:39 - sorting our horse races finding our
49:41 - finding our fastest sorting our list of
49:43 - lists
49:44 - we found our 20 25 bingo second max
49:50 - awesome i love that
49:53 - i think that's philippe
49:55 - philippe is exactly correct for the
49:57 - second largest we can index forward and
50:00 - we can index backwards
50:05 - remember when i found out i loved about
50:08 - indexing and i just thought it was so
50:09 - cool so python is a zero indexing
50:12 - uh language so zero one oops sorry one
50:17 - two three four five
50:21 - and to be consistent so you don't have
50:23 - any repeatability
50:25 - negative one negative two negative three
50:28 - because we're already utilizing zero we
50:30 - already have that set up so it can't be
50:32 - this can't be zero because this is zero
50:35 - so to differentiate
50:37 - to then basically if you want to think
50:39 - about it it loops around and i never
50:41 - thought about it until about three years
50:43 - ago when i was explaining it to a young
50:44 - person and they were grilling me on how
50:47 - it came to be so you can literally loop
50:50 - around
50:51 - and just go from here all the way around
50:53 - so
50:54 - five four
50:56 - three two one zero
50:58 - negative one negative two negative three
51:01 - negative four negative five negative six
51:04 - there
51:05 - so if i want
51:07 - to then
51:08 - print
51:11 - second
51:13 - and do that in strong
51:15 - second
51:18 - our gist
51:24 - to second largest negative one
51:28 - and print
51:30 - second
51:32 - smallest
51:36 - x
51:37 - one
51:43 - bam
51:44 - now
51:53 - and
51:55 - all right so something
52:00 - oh
52:01 - negative 2.
52:05 - got ahead of myself there we go
52:07 - now let's look at if i were to change
52:11 - uh
52:14 - sorted dot
52:15 - reverse i want you to look right here
52:17 - this is important about sorted reverse
52:20 - defaults to false
52:22 - so it's just going to go in ascending
52:24 - order
52:25 - does it say
52:26 - there it is an ascending order
52:29 - let's just say
52:30 - you think about things largest to
52:32 - smallest so we change reverse
52:36 - to true
52:39 - so now this is
52:41 - this is flipped around
52:43 - smallest
52:49 - largest
52:51 - just like so boom
52:52 - okay
52:54 - uh
52:57 - yeah here's just a nice little mental
53:00 - challenge because we're at 53 minutes
53:02 - let's let's just
53:04 - yeah let's just go ahead and do this one
53:06 - it's very cool so ran across this little
53:09 - puzzle
53:11 - a while ago
53:12 - so it's called random walk
53:15 - so you're
53:17 - you're to a meeting early
53:19 - and
53:20 - [Music]
53:21 - you have you're gonna be given a certain
53:24 - number
53:25 - well we can do we can do this two ways
53:28 - we'll have a more advanced and then a
53:29 - basic
53:31 - so you're going to be given
53:34 - um
53:36 - a number
53:38 - of
53:39 - units and that's how long it takes to go
53:42 - around the blocks
53:44 - so you go down a block up a block so if
53:46 - you're given
53:48 - uh
53:49 - it takes an equal amount of time so
53:50 - you're given east west south and north
53:54 - and
53:56 - we'll talk about the units in a minute
53:58 - and if you end up you only
54:01 - if if you end up back at the same place
54:04 - it's true if not it's false
54:07 - so how in the world can you tell so all
54:10 - right let me say that again because i
54:11 - fumbled around so i apologize
54:13 - so if i give you north south east and
54:15 - west on a city block you will end up
54:18 - back in the same spot
54:20 - because you will
54:23 - let's open up paint
54:25 - make sure this is centered
54:27 - so
54:33 - wow that is
54:36 - horrible all right
54:39 - so then
54:41 - if you start here
54:48 - you start here
54:50 - let's get a larger
54:53 - yeah
54:55 - and then you go
54:56 - north
54:59 - east
55:00 - south
55:01 - west
55:03 - you end up back where you
55:04 - started so
55:06 - how would you
55:08 - be able to
55:09 - do this
55:10 - so there are of course
55:13 - a perfect example of a way to solve this
55:16 - problem but here's just another way for
55:18 - you to think about a problem and how
55:21 - would you solve it
55:23 - so let's get this up and running
55:28 - so the first
55:30 - the first way that i did this the first
55:32 - time i tried this challenge actually
55:34 - let's kind of talk about this for a
55:35 - minute
55:36 - so i had a question posted i had a
55:39 - comment posted on one of my
55:42 - videos
55:44 - and i identified with this because this
55:46 - is exactly what i did i would read
55:52 - and i would read a
55:55 - question or i'd follow along it would
55:57 - make sense makes sense makes sense makes
55:59 - sense and then i would be given a
56:00 - question very similar to it
56:03 - but i could not get it i would it would
56:05 - just
56:07 - i'd go i don't know how to start
56:09 - and that was how i was in school i was
56:11 - not a very good student everything that
56:12 - i know in python it's all
56:15 - self self taught aha
56:18 - i love that
56:20 - if east equals west and north equals
56:22 - south then true
56:24 - that is a wonderful solution
56:26 - that is exactly that's actually where i
56:28 - stumbled across
56:31 - later
56:32 - so what i actually did my first attempt
56:34 - that that was one of my later attempts
56:37 - what my first
56:38 - what my first one was
56:41 - and i will just show you this and then
56:43 - we'll and then we'll talk
56:45 - here
56:48 - i'll bring this over
56:50 - because i need to go in a few minutes
56:52 - but i will just paste this and you guys
56:54 - and we can look at it
56:56 - free code camp
56:59 - so i started to just go back and redo
57:02 - code
57:04 - so i would
57:07 - start with the absolute basics
57:09 - then
57:10 - rewrite oops
57:12 - then rewrite the code again
57:14 - so i'd already solved it
57:16 - then i would just rewrite it again and
57:18 - again and again until it be until i
57:21 - could repeat it on my own and i
57:22 - understood it so you have comprehension
57:25 - you have understand comprehension and
57:27 - then repeat
57:28 - that's what i found out so if you're
57:30 - read if you're watching this and it
57:31 - makes perfect sense and then we turn
57:33 - this off after we're done
57:35 - and you just and then you see a problem
57:38 - and you just don't get it
57:41 - you're not alone
57:42 - okay you're not that's that's why i
57:44 - started this channel that's why um
57:46 - streaming on free code camp
57:48 - that's why i started the discord server
57:51 - you i i was alone i did this all
57:55 - i was i was sitting here
57:56 - all alone
57:58 - tried books tried numerous channels
58:00 - pieced all this stuff together started
58:02 - teaching at my kids schools
58:05 - and then this cemented and then i found
58:07 - out what i could do with python and
58:09 - merge the two things that i love and now
58:12 - that's what i do
58:14 - so if you are watching these videos
58:16 - watching today and you have seen these
58:20 - before
58:21 - and you go i get it but then once i stop
58:23 - once the video stops i stop getting it
58:26 - that's normal write something you
58:29 - understand repeat it repeat it repeat it
58:33 - and then venture out you're not suppose
58:36 - this this is weird this is literally
58:39 - another language now there are some of
58:40 - you on here can speak multiple languages
58:42 - i only know english and i can read
58:45 - python that's it this is literally
58:47 - another language this is actually a
58:48 - formal language it's very strict
58:51 - speech is informal that's a little nerdy
58:53 - thing that i've read
58:54 - all of the studying so all right
58:57 - all right so this is this is my first
59:00 - instinct so here's the one with actually
59:03 - the timed walk that i did so i actually
59:05 - thought about it about coordinates and
59:07 - this is how
59:09 - cumbersome this was so
59:11 - if the
59:12 - if the length of time and the walk
59:14 - didn't match
59:16 - of course they weren't back in time all
59:18 - right so then i started assigning values
59:21 - to north so north north was one and i
59:25 - think i gave east positive so north and
59:28 - east were positive and west and south
59:31 - were negative so if you went
59:33 - if you went to the east one and you came
59:35 - back west one so you'd be zero and then
59:38 - same thing so it didn't matter how many
59:40 - so if you walked east four times and as
59:42 - long as you walked west four times
59:44 - you're going to end back back at the
59:45 - point same thing with north north and
59:47 - south
59:48 - so this is where i did is i did
59:51 - my my coordinates up and down and up and
59:54 - down and then i go well that is
59:57 - that's really not pretty that is really
59:59 - not pretty and then
60:02 - this is what was posed to me so you're
60:04 - given a list of the directions north
60:06 - south east and west
60:08 - and i was like and i learned about
60:10 - counting with
60:13 - so now let's see
60:15 - to do
60:17 - put this in
60:20 - so walk
60:21 - walk is a list
60:23 - right
60:24 - so then
60:25 - i
60:26 - run dir on walk which is
60:29 - a list object and python will tell me
60:31 - hey
60:33 - if you if you don't know type this is
60:35 - another awesome tool another built-in
60:37 - so walk
60:39 - the list the type of object that it is
60:41 - is a list
60:43 - i can count
60:44 - so i can count
60:46 - what is inside of it
60:48 - so
60:48 - how does it how does it really work so i
60:50 - go help
60:51 - dot walk
60:53 - or i can type list count
60:56 - return number of occurrences of value
61:00 - okay so i want to know how many
61:02 - norths are in my list how many souths
61:04 - are in my list
61:06 - and i created variables north south east
61:08 - and west
61:10 - so that i did how long is the walk
61:13 - so
61:14 - if
61:15 - basically if north and south
61:19 - are equal to each other equivalent
61:21 - in python two equal signs is actually
61:23 - the equivalency test
61:27 - and and is a
61:29 - very good keyword so we need to go here
61:31 - we need to talk about this
61:33 - and then i'll start wrapping this up
61:35 - word oop let's go to the help prompt
61:39 - because i do not like this is i had i
61:42 - have very few complaints about python i
61:44 - do not like that you cannot run help on
61:47 - uh a keyword but you can get to the
61:49 - keyword through the health help prompt
61:52 - so i type in and oh here we go so i have
61:56 - a
61:56 - boolean operation
61:58 - and you're going to test
62:00 - if two things are true so let's see what
62:03 - this does
62:04 - so true of course is true
62:06 - does true
62:08 - equal
62:09 - true
62:11 - it's true
62:12 - so
62:14 - true and
62:16 - true
62:17 - true
62:18 - true and
62:21 - false so they both
62:23 - they both have to be true for and
62:26 - now there's an or just one of them has
62:28 - to be
62:29 - so i did
62:31 - north is north equivalent to south and
62:34 - east and west equivalent to each other
62:37 - and in this instance i did the one about
62:39 - time
62:41 - are is the length of time the length of
62:43 - the list the length of the walk
62:45 - so all of these if all of these are true
62:48 - then bam i ended up back at my original
62:51 - location in my allotted amount of time
62:55 - okay there we go and i gotta run guys
62:57 - but absolutely
62:59 - uh
63:00 - amazing stream today
63:02 - thank you to jan and cardinal
63:05 - our two awesome moderators uh jan has
63:08 - been i want to give
63:10 - uh
63:10 - both jan and cardinal props jan has been
63:13 - spreading the word for the discord
63:16 - server cardinal is actually uh
63:19 - the creator of our discord server so one
63:22 - appreciate
63:23 - um cardinal
63:25 - and just i absolutely love this
63:27 - community i never want you guys to feel
63:29 - alone that was the original i didn't
63:32 - want you to struggle with learning was
63:34 - the original idea i wanted you to have a
63:36 - place where you could find every single
63:38 - concept in a video that you can watch
63:41 - come back re-watch however many times
63:43 - you wouldn't have to dig through
63:45 - a very elaborate video going where did i
63:47 - see that where did i see that another
63:49 - one other thing don't ever delete any
63:51 - code don't throw away anything don't
63:54 - delete a file
63:55 - save it put it in the cloud don't throw
63:58 - away anything so there we go guys
64:00 - thank you so much for watching make sure
64:02 - you're buying some uh free code camp
64:04 - merch think you saw my shirt earlier uh
64:07 - wonderful organization they're doing
64:08 - some fantastic work truly appreciate
64:11 - getting to be here with you guys
64:13 - uh don't forget to click over to my
64:15 - channel
64:16 - uh subscribe there got videos five times
64:19 - a week coming out have our discord
64:21 - server so you're never alone somebody is
64:23 - always on somewhere
64:25 - so there we go guys
64:26 - as always thanks for watching and we
64:28 - will see you guys in two weeks
64:30 - bye guys