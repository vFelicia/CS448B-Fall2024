00:00 - hello i am vim girl and i love talking
00:03 - about tech in this video i'll be showing
00:05 - you how to use redux
00:07 - redux is a javascript library that helps
00:10 - us manage our applications data and i'm
00:13 - going to build this to do app using
00:15 - redux to show you how it works
00:17 - let's get started with the html code
00:20 - i'll need an input box
00:23 - a submit button and a div tag to display
00:26 - the to do's
00:27 - since we're using the redux library we
00:30 - also need to add a script tag for redux
00:33 - alright let's check it out
00:35 - cool
00:36 - now we're ready to write some redux
00:38 - first thing we need to do is create a
00:40 - reducer
00:42 - to create a reducer we use redux dot
00:45 - combine reducers which takes in an
00:48 - object of functions
00:50 - these functions run whenever dispatch is
00:52 - called and the return value becomes our
00:55 - app's new state you'll see what i mean
00:57 - in a minute to start i'm just going to
00:59 - return an array of deuce
01:01 - groceries
01:02 - make dinner
01:05 - we use this reducer to create a store to
01:08 - create a store we are going to use redux
01:10 - dot create store and pass in my reducer
01:13 - we'll be using this store for everything
01:15 - like accessing the state and dispatching
01:18 - events before we move on let's see how
01:20 - we can access the state with the store
01:23 - window.stores you go to store and we're
01:26 - going to go to the chrome's console so
01:29 - we can access the state by using stores
01:32 - getstate function
01:33 - cool
01:34 - now we can see that my state currently
01:37 - has what i put in earlier
01:39 - okay
01:40 - now that i've set up redux i need a
01:43 - function called vendor that creates html
01:45 - based on our state
01:47 - let's get our container div and make
01:49 - sure that it's empty
01:52 - then we'll need to access the state of
01:54 - our app and we can do that using
01:55 - getstate
01:57 - now i'm going to loop through each
01:58 - element in my state and create a div
02:01 - element for each item
02:03 - i'll also need to display the errand
02:06 - and append the new element to our
02:08 - container div
02:10 - now when we call the render function we
02:12 - should be able to see our hard-coded
02:14 - to-do list
02:16 - awesome
02:17 - okay next let's add functionality to the
02:20 - page
02:21 - we need to update the state when the
02:22 - submit button is clicked so let's get
02:25 - that button
02:27 - to update our state we call the dispatch
02:29 - function and pass in an object
02:32 - we are required to pass in a type key i
02:35 - usually name the value based on the
02:37 - user's action so i'll call it add
02:40 - i'm going to pass in another key called
02:42 - item and its value will be whatever is
02:44 - in the input box
02:46 - after the dispatch function is called
02:49 - our reducer will execute and we'll get
02:52 - our new stake but first we'll need to go
02:53 - back to our reducer real quick and make
02:56 - sure that our state is updated
02:58 - accordingly
02:59 - alright we want to build on top of our
03:01 - current state so we'll need to include
03:04 - the state and action as parameters
03:07 - when you start the app the initial state
03:09 - will be an empty array
03:11 - and action is the object we passed into
03:15 - our dispatch function
03:17 - it's best practice not to change the
03:19 - default state so i'm going to use
03:22 - object.assign to make a new copy of the
03:24 - state
03:26 - if action.type is add i'm going to add
03:29 - the item into our new states array
03:32 - then we're going to return the new state
03:35 - okay let's go back to our onclick
03:37 - function
03:38 - after dispatching we should call the
03:40 - render function to update our html based
03:43 - on the new state
03:45 - great now let's see what we have so far
03:49 - cool now we can add to do's
03:51 - let's add another functionality how
03:53 - about when i click on an item
03:55 - the item should be removed
03:58 - so let's add another dispatch event for
04:00 - each to-do element and give it a type
04:03 - called remove we also need to pass in
04:05 - the index and then render to refresh the
04:09 - ui
04:10 - let's make sure that for each is
04:12 - providing that index
04:14 - when the reducer function executes if
04:16 - the type is removed i want to get rid of
04:18 - that item
04:20 - okay let's see if it works
04:22 - awesome we're done
04:24 - now let's recap what we need to have a
04:26 - redux app running first we create a
04:29 - reducer
04:30 - then we use this reducer to create a
04:33 - store
04:34 - using this door we can call getstate to
04:36 - get the state of our data
04:38 - when user clicks on the submit button or
04:41 - when they click on an item we use the
04:43 - store to dispatch an event to change our
04:45 - state
04:47 - alright that's it for today if you have
04:49 - any questions feel free to comment below