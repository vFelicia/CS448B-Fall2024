00:00 - [Music]
00:01 - hey folks today
00:03 - we are gonna build this plug-in from
00:05 - scratch using modern c-plus plus
00:07 - and the juice framework in this free
00:09 - course check the description for links
00:11 - to the repository and to download the
00:13 - final build
00:14 - okay what is this thing this is the
00:17 - little brother of this
00:18 - other plugin which is my new course for
00:20 - pfm c
00:21 - plus four musicians which is where you
00:23 - can build this other plugin
00:25 - which is also where you can learn modern
00:27 - c plus and the juice framework from
00:29 - scratch taught from the context of
00:31 - writing audio software
00:32 - in a mentored environment you're not
00:34 - following videos you're not watching
00:35 - someone else code and you're not copying
00:37 - them
00:38 - you're coding it yourself and i'm
00:40 - reviewing your work
00:41 - all right enough about those let's learn
00:43 - about what we are going to build
00:44 - today this is a 3-band equalizer with a
00:48 - spectrum analyzer at the top
00:50 - it has a low-cut band it has a high cut
00:52 - band and has a parametric band in the
00:54 - middle
00:55 - the low-cut band lets you cut out all of
00:57 - the low end of the signal
00:59 - you can also control the steepness of
01:00 - the cut
01:03 - the high cut band lets you remove all
01:05 - the high frequencies
01:06 - and you can also control how steep that
01:08 - cut is
01:09 - the parametric band lets you add notches
01:12 - or boosts
01:13 - and we can also control how wide or how
01:16 - narrow those boosts are and we can
01:17 - control the frequency
01:19 - everybody's familiar with this type of
01:20 - swept frequency sound
01:23 - above that there are bypass buttons
01:25 - which allow you to disable individual
01:26 - bands which is always helpful when
01:28 - you're working on audio
01:29 - and above that is the response curve
01:31 - which gives us a visual representation
01:34 - of what the filters are doing then
01:36 - behind that
01:37 - is the spectrum analyzer and this shows
01:39 - us what we are hearing
01:40 - and these always use a bunch of cpu so
01:42 - there's a bypass button for that as well
01:44 - we're going to learn all the dsp that's
01:46 - going on in the background
01:47 - that makes this thing work we're going
01:49 - to learn how to draw everything how to
01:50 - draw the sliders the bypass buttons how
01:52 - to draw the response curve and make it
01:53 - respond
01:55 - whenever we adjust the sliders and how
01:56 - to draw the spectrum analyzer
01:59 - okay that's the feature set for this
02:00 - plugin and for this free course
02:02 - my name is chuck i go by the name matcat
02:05 - music on youtube and instagram
02:06 - once again check the description for
02:08 - links to the repository
02:10 - and to download the final build of this
02:12 - plugin so let's get started
02:13 - and write some audio software using
02:15 - modern c plus plus and the juice
02:17 - framework
02:18 - from scratch
02:23 - [Music]
02:31 - all right the first thing we need to do
02:33 - is get set up with the juice framework
02:36 - now if you've never done any audio
02:37 - programming before fear not
02:39 - the only things you need are two tools
02:41 - the juice framework and then an ide to
02:43 - write code in
02:44 - that could be xcode or it could be
02:46 - visual studio it depends on what
02:48 - operating system you're running i'm on
02:50 - mac so i'm going to be using xcode for
02:52 - this video
02:53 - if you've never set yourself up with an
02:55 - ide before
02:56 - i have two videos linked in the
02:58 - description they take you through the
02:59 - process
03:00 - of setting up your computer with an ide
03:03 - getting the juice
03:04 - framework setting up producer setting up
03:06 - a git repository
03:07 - making your first project and then um
03:10 - pushing changes to that
03:11 - and um yeah it basically gets you
03:14 - familiar with the flow
03:17 - with the workflow that goes in with
03:18 - being a software developer
03:20 - in the context of writing audio software
03:22 - okay so the first thing we're going to
03:24 - do is go get the juice framework so
03:26 - let's do that
03:27 - right now i'm going to open up safari
03:29 - because that's
03:30 - just um this is like just a blank os
03:33 - install
03:34 - and i'm gonna install um i'm gonna grab
03:36 - juice so juice
03:38 - framework just gonna search for it it is
03:40 - hosted on github
03:42 - so i'm gonna go grab it here now what
03:44 - i'm going to do is i'm going to clone
03:46 - the repository and the reason is because
03:49 - um this is an active repository they
03:51 - make a lot of changes to it okay
03:53 - so especially on the develop branch we
03:55 - want to make sure that we have all of
03:56 - these changes because stuff's getting
03:58 - fixed all the time
03:59 - features are being added that sort of
04:01 - thing so if i have
04:02 - the repository cloned i'm able to pull
04:05 - in those changes
04:07 - this is different from if i had just
04:08 - downloaded a zip file
04:10 - so that's why i'm going to do that okay
04:12 - i'm going to go to terminal
04:14 - if you don't have terminal open just you
04:15 - know terminal open it like that or open
04:18 - some kind of command
04:18 - prompt shell okay then i'm going to uh
04:21 - let's see i've got my
04:23 - um my users folder right here and i'm
04:25 - just going to clone the repository right
04:27 - into that so
04:28 - git clone and then the url
04:32 - just like that that's going to make the
04:33 - juice folder and it's going to download
04:35 - this repository
04:37 - into this folder and it's in it's going
04:39 - to include all of the commit changes as
04:41 - well so let's just wait for this to
04:43 - finish
04:44 - all right there it goes there's the
04:45 - juice framework now
04:47 - what we want to do is switch to the
04:48 - develop branch because as i had shown it
04:51 - is
04:51 - um more it contains more recent changes
04:56 - than the other branch you can see that
04:58 - the develop branch is
04:59 - 19 commits ahead of the master branch so
05:02 - to do that we need to
05:03 - type in terminal uh first we need to go
05:05 - into the juice folder
05:08 - so let's do that right now cd juice
05:11 - dot slash juice and now we need to do
05:14 - git
05:15 - check out develop like that
05:18 - all right switch to a new branch develop
05:21 - okay cool now i prefer to use a git gui
05:25 - so i'm going to be using fork from now
05:27 - on in the course of this
05:29 - simple eq that we will be building so
05:31 - i'm going to open that now so we can see
05:33 - what this repository looks like in that
05:34 - sense
05:35 - so i'm going to open up fork fork is
05:37 - available from fork.dev
05:39 - okay so here is the repository i had
05:42 - already added it previously
05:44 - um and you can see here's all the
05:47 - commits that have been added
05:49 - and all the basically all the work that
05:50 - they've been doing on it and you can see
05:52 - how frequently they update
05:53 - the develop branch okay our next job is
05:57 - to
05:59 - open up producer and use
06:02 - producer to make a project pro juicer is
06:05 - found in the extras folder
06:07 - inside producer now inside here you're
06:09 - going to find a builds folder
06:10 - and in there is a project file for each
06:13 - operating system you got
06:14 - linux you got mac and you got windows so
06:17 - if you're on windows open the solution
06:19 - file
06:19 - depending on which version of visual
06:21 - studio you're running if you're on mac
06:23 - you're going to open up the xcode file
06:25 - if you're on linux there's a make file
06:26 - and you linux users know what to do with
06:29 - make files
06:29 - so i'm not going to talk about that okay
06:31 - i'm going to open up producer
06:34 - the solution file that's going to open
06:36 - up xcode and now all i need to do is
06:38 - just build and run
06:40 - okay so we just need to wait for this to
06:42 - happen
06:44 - apologies if i start speaking fast
06:47 - i like doing this stuff a lot and when i
06:48 - get excited i start to speak really fast
06:50 - so if i happen to
06:51 - speak too fast i'm probably gonna take a
06:53 - step back and repeat what i say
06:55 - slower so just apologies in advance if i
06:58 - start speaking really really fast
07:00 - all right so let's wait for this to
07:02 - finish building build succeeded
07:04 - now it's going to run it and then we
07:06 - will be able to configure
07:08 - uh this stuff all right so let's get
07:10 - this set up
07:12 - okay we are presented with the new
07:14 - project wizard
07:16 - before we do that we want to go to
07:18 - producer and we want to configure our
07:19 - global paths
07:20 - and these need to point to the juice
07:23 - folder
07:23 - and the modules folder now the juice
07:25 - folder by default if you clone the
07:28 - repository to your users folder
07:30 - this stuff is going to be set
07:31 - automatically it's going to go right to
07:33 - your users folder and the juice thing
07:34 - however if you decide to put it
07:37 - somewhere else you need to customize
07:39 - these modules so click on this button
07:40 - right here
07:41 - and then navigate to wherever your juice
07:44 - folder is stored
07:45 - for setting the path to juice then do
07:48 - the same thing for the modules
07:50 - click click that button navigate to your
07:52 - juice folder and then navigate to the
07:54 - modules button to the modules folder
07:56 - inside of that
07:57 - okay and then if you rescan it'll tell
07:59 - you if there's any issues or not
08:01 - once that is done now you can go to the
08:04 - plug-in right here
08:05 - basic and we're going to create a
08:08 - project called
08:09 - simple eq and then we can do create
08:12 - project and it's going to ask me where
08:13 - do i want to save this
08:15 - create project i want to save it to this
08:17 - programming folder
08:20 - and there it goes it's going to save it
08:21 - it's going to make it and now if i
08:23 - reveal in finder
08:25 - here is my project so i'm going to make
08:29 - a git repository next before i actually
08:31 - take a look
08:32 - around at the code because it's always
08:34 - important to set yourself up with the
08:36 - git repository
08:38 - in case you have to backtrack and undo
08:39 - some stuff or whatnot
08:41 - so i'm going to do that next all right
08:44 - so in the interest
08:45 - of keeping everything neutral i will not
08:47 - be creating the repository in fork
08:49 - but i will be doing it in terminal
08:51 - because everybody's computer has a shell
08:53 - it may not have fork in it
08:54 - so what i need to do is first navigate
08:57 - to the folder that my repository is in
09:00 - so i'm going to do that cd i'm just
09:01 - going to drag this folder in here
09:04 - now i'm inside that folder and now i'm
09:05 - going to do git init
09:08 - like that okay now uh i'm not seeing it
09:11 - so i'm gonna turn on
09:12 - um hidden files and now here is my git
09:16 - repository okay
09:17 - so what i need to do next is create
09:21 - a i need to do an initial commit and
09:24 - commit the state of this
09:25 - now i do not want to include everything
09:26 - that's in this builds folder
09:28 - and i do not want to include uh
09:30 - everything that's in this juice library
09:32 - folder
09:32 - because a juice library code folder
09:34 - because every time we resave
09:36 - this producer file it recreates these
09:38 - folders the only thing we want to keep
09:40 - is
09:40 - the juicer file and the source file so
09:43 - i'm going to add a git init file
09:45 - first or a git ignore file sorry so i
09:48 - will do
09:49 - touch dot get dot get egg
09:53 - nor like that that creates a document
09:56 - which i can open with a text editor
09:58 - and specify that i want to exclude this
10:01 - builds folder
10:01 - and this juice library code so let me go
10:04 - do that i'm going to open this with uh
10:06 - i'm going to open it with text edit
10:08 - that's fine
10:09 - and i want to write star star slash
10:12 - builds
10:13 - caps star star slash juice oops
10:17 - library code okay that's the name of
10:19 - these two folders
10:20 - and then uh because this is os x i'm
10:23 - going to do
10:23 - star star slash dot d s underscore store
10:26 - like that
10:28 - we're not seeing any of those files
10:30 - right now but
10:31 - sometimes we will that's um basically
10:34 - it's
10:34 - the if i can figure how this folder
10:36 - looks um it's gonna get stored as a ds
10:38 - store file
10:39 - and those are super annoying to include
10:42 - um in your repository so it's very good
10:44 - to keep them excluded
10:46 - okay next i'm going to do
10:49 - git um let's see git commit dash
10:52 - m this is my initial commit let's do a
10:55 - git status first
10:56 - let's see what we got get status we can
10:59 - see that there are no tracked files so
11:00 - let's add
11:01 - our files git add and you'll notice that
11:04 - it's
11:05 - the untracked files does not include
11:07 - anything in the builds folder and the
11:09 - juice
11:09 - library code folder and that's because
11:11 - of the git ignore file it's doing its
11:13 - job
11:14 - let me just move this out of here so you
11:16 - can see what i'm talking about
11:17 - so if i do that again um let's see let's
11:21 - do um
11:21 - get status we can see we've got these
11:24 - new files here
11:26 - but it's also not tracking these guys so
11:29 - there is a ds store somewhere
11:30 - there's a builds folder and there's a
11:32 - juice library code okay
11:33 - as i said before we don't want those
11:35 - included so i'm going to put that back
11:37 - and then we'll do git status one more
11:39 - time okay so we've got our git ignore
11:42 - the juicer file and then the four source
11:43 - code files all right now that we have
11:45 - those
11:46 - ready to be committed let's make a
11:47 - commit git commit dash
11:49 - m initial commit
11:54 - whoops i forgot the closing quote all
11:56 - right
11:58 - that's fine good enough okay now i can
12:01 - open this
12:01 - in fork i can do file open repository
12:05 - so now i can actually see what's going
12:08 - on
12:10 - and here's right here's my initial
12:11 - commit all right good times
12:14 - okay so if we want we can go make a
12:16 - repository on github and push the code
12:19 - there
12:20 - um or you know just keep it local but
12:23 - either way now we can keep track of
12:24 - everything
12:25 - okay so i'm going to give you a quick
12:29 - overview of where everything happens in
12:32 - the source code now
12:33 - before we actually start work on this
12:36 - okay
12:37 - so this is going to be a brief overview
12:39 - of how these plugins work and um
12:42 - what where we will primarily be spending
12:45 - most of our time
12:46 - doing edits in the code so we have four
12:48 - source files right here we've got
12:49 - plug-in processor.cpp pluginprocessor.h
12:53 - plugineditor.cpp and plugineditor.h
12:56 - in uh let me pull up the assistant
12:59 - editor
13:00 - so that we can see what's going on on
13:02 - both sides okay
13:04 - plugin processor.h um in a juice plugin
13:08 - you've got two main functions that are
13:10 - the most important
13:11 - there's your prepare to play function
13:13 - and then there is your process block
13:15 - function
13:15 - prepare to play gets called by the host
13:17 - when it's about to start playback
13:21 - and then process block is actually what
13:23 - happens whenever
13:24 - you hit the play button in the transport
13:26 - control when you hit that play button
13:30 - the host just starts sending buffers at
13:32 - a regular rate into your plug-in and
13:34 - it's your plug-ins job to
13:36 - give it back any finished audio that is
13:38 - done processing
13:40 - you cannot interrupt that chain of
13:43 - events
13:44 - if you add latency or whatever it can
13:46 - cause clicks and pops in your speakers
13:47 - and
13:48 - that has the potential to damage
13:50 - speakers as well as explode eardrums
13:53 - just imagine this scenario that you're
13:55 - at a club and the sound system is super
13:57 - loud
13:58 - and your plug-in causes a pop or a
14:00 - glitch
14:01 - the sound you know the sound engineer or
14:04 - the dj or whatever has their thing
14:06 - totally cranked and
14:08 - there's this huge pop and everybody's
14:11 - ears just go
14:12 - like that so that's why um that's the
14:15 - big thing about audio processing is you
14:16 - can't
14:17 - um interrupt this process block and
14:19 - anything that goes on inside it you have
14:21 - to just kind of
14:22 - um you got to figure out how to get all
14:24 - the all the work that you need done by
14:26 - your code
14:27 - done within a fixed amount of time okay
14:30 - so those are the two big functions we're
14:33 - going to be spending most of our time
14:34 - with prepare to play
14:35 - and then process block now um let's take
14:38 - a look at what happens over there so in
14:40 - prepare to play
14:41 - use this as the place to do any
14:43 - pre-playback initialization that you
14:45 - need
14:46 - and then in process block this is where
14:47 - you get your actual block of audio data
14:50 - um and if you're using a midi controller
14:51 - these are where the midi messages are
14:53 - but basically um this is where we do all
14:57 - of the work we're gonna be
14:58 - typing all a bunch of code here and we
15:00 - have to make sure that it um
15:02 - doesn't happen in like more time than we
15:05 - have been allotted
15:06 - okay let's go take a look at plugin
15:08 - editor now plugin editor
15:09 - is where we set up all of our visual
15:11 - elements and um there's some basic stuff
15:14 - you got your basic constructor
15:15 - you got your paint function your resized
15:17 - function
15:19 - uh painting you know it's what we're
15:20 - gonna see right now we're
15:22 - showing a hello world if i run this real
15:24 - quick
15:26 - so before i get into showing how to run
15:28 - it um
15:29 - yeah right now we're just going to see a
15:30 - hello world displayed at the center of
15:32 - the screen
15:34 - um and then if we have any child
15:36 - components like buttons or
15:37 - sub components or anything like that
15:40 - we'll lay them out here in the resized
15:42 - function
15:43 - okay so that's a basic overview we're
15:45 - going to be basically making child
15:47 - components to represent the knobs and
15:49 - the sliders
15:50 - and the spectrum analyzer and the
15:53 - response curve
15:54 - and then we're going to be you know
15:56 - drawing them in there based on
15:57 - some you know audio parameters that
15:59 - we've got
16:01 - okay so let's run this for the first
16:04 - time what we need to do is go to
16:06 - our particular scheme we have a few
16:08 - targets we've got a vst3 format
16:11 - we have an audio unit format if we are
16:13 - on os x and then we have the standalone
16:15 - version
16:16 - okay so i'm going to put this on
16:18 - standalone
16:19 - in visual studio you'll do something
16:21 - similar you will set the
16:22 - target to run to be the standalone
16:25 - version and then
16:26 - all we need to do is just run it build
16:29 - and run it's going to compile these four
16:30 - files it's going to compile any module
16:32 - files that are being used
16:35 - all right here's our standard plug-in
16:37 - it's not doing anything it's just
16:39 - displaying hello world but it is
16:40 - processing audio
16:42 - so yeah that's it there's our basic
16:45 - plugin we're going to turn this into
16:47 - the thing i showed at the very beginning
16:53 - i wanted to add a quick note right
16:54 - before we get started writing actual
16:56 - code
16:57 - what you need to do is go to producer
16:59 - click on this gear right now for the
17:01 - project
17:01 - click on this gear scroll down and you
17:03 - need to change the
17:05 - language type to be c plus plus
17:08 - 17 okay a lot of the stuff we're going
17:10 - to be using this involves c
17:12 - plus plus 17. okay once you've done that
17:14 - just click save and open in ide
17:16 - all right let's start coding navigate to
17:19 - the audio
17:20 - to the plugin processor.h file because
17:23 - we need to declare some variables
17:25 - audio plugins depend on parameters to
17:28 - control the various parts of the dsp
17:30 - juice uses an object called the audio
17:33 - processor value tree state
17:34 - to coordinate syncing these parameters
17:37 - with the knobs on the gui and the
17:39 - variables in the dsp
17:41 - so we need one of these in our audio
17:43 - processor and it needs to be public so
17:45 - the gui
17:46 - can attach all of its knobs and sliders
17:48 - and buttons and combo boxes and stuff to
17:50 - it
17:51 - all right so let's declare one of those
17:54 - all right we need to give it a name i'm
17:56 - just going to call it ap vts
17:58 - and then we need to make sure that we
18:00 - use curly braces here
18:01 - not parameter not parentheses when we
18:03 - declare it
18:05 - all right uh the audio processor to
18:06 - connect to is going to be this
18:08 - audio processor we are not going to use
18:11 - an a
18:12 - an undo manager uh we're going to just
18:14 - call it
18:16 - parameters and then we need to provide
18:20 - a function here to give us a parameter
18:22 - layout so the ap vts expects us to
18:24 - provide the list of all parameters
18:27 - when it is created so we need a function
18:29 - that will provide that for us
18:30 - in the form of an ap vts parameter
18:33 - layout
18:34 - so let's create that now
18:38 - all right and we can just call it and
18:40 - actually let's make it static
18:43 - since it doesn't use any member
18:44 - variables and i have an extra colon
18:46 - okay let's declare this guy right here
18:51 - now for this project we will keep the
18:53 - dsp and the gui simple
18:55 - we are only going to have three
18:57 - equalizer bands
18:58 - low cut high cut and peak for the low
19:02 - cut and high cut bands we will be able
19:03 - to control the frequency cutoff as well
19:06 - as the
19:06 - slope of the cut off for the peak or
19:09 - parametric band we will be able to
19:11 - control the center frequency
19:13 - the gain and the quality meaning how
19:15 - narrow or how wide
19:17 - the peak is all right so we will start
19:19 - with the low cut and high cut frequency
19:22 - parameters
19:23 - and juice has an audio processor
19:24 - parameter class
19:27 - and let me pull up the documentation for
19:28 - this real quick actually
19:30 - all right so juice has an audio
19:32 - processor parameter class
19:34 - this class is a generic interface
19:36 - towards all the different audio
19:38 - parameter formats that different plug-in
19:40 - hosts use
19:41 - for example audio unit on os x
19:44 - is used by apps like logic or final cut
19:46 - or garage band
19:48 - vst 3 on windows and osx is used
19:52 - in apps like cubase or ableton live
19:55 - reaper
19:56 - or bit wig and then there's aax
19:59 - for pro tools okay now the audio
20:02 - processor parameter class has several
20:03 - derived types
20:05 - that represent things like sliders and
20:07 - switches and combo boxes
20:09 - and for our needs the audio parameter
20:12 - flow type is used to represent
20:14 - parameters that should be represented on
20:16 - the gui with a slider
20:17 - of some kind so we want our frequency
20:19 - range to be adjustable
20:20 - over a wide range so we are going to use
20:22 - an audio parameter float
20:24 - for this so let's declare
20:27 - our let's declare one of these
20:31 - and i hope the font is big enough for
20:33 - you to be able to see what's going on
20:34 - we're going to return our layout
20:36 - and now we can now we can add
20:39 - um an audio parameter float to this so
20:43 - like out dot let's see
20:46 - add and these things want unique
20:47 - pointers so we'll use uh make unique for
20:49 - this
20:50 - make unique and we want a juice
20:54 - audio parameter float we want that guy
20:59 - all right the name of this is going to
21:01 - be low cut
21:03 - freak the parameter name will also be
21:05 - low
21:06 - cut freak um the normalizable range is
21:10 - the next part
21:11 - now the human ear has a range of roughly
21:14 - you can pick up sounds from 20 hertz to
21:16 - 20 000 hertz
21:17 - so that will define the range for our
21:19 - parameter let's uh create one of these
21:21 - oops normalizable range here's the
21:25 - where's the one that has
21:26 - that takes parameters this is the one
21:27 - that we want okay
21:29 - uh we're going to make it use type float
21:31 - okay now the
21:32 - range start is going to be 20 and the
21:35 - range end is going to be 20
21:37 - 000. now the interval value we're going
21:40 - to use a
21:41 - interval value of 1 and what that means
21:43 - is that our slider will change the
21:45 - parameter's value in steps of
21:47 - one we could use bigger steps if we
21:50 - wanted to for example we could drag the
21:51 - slider
21:52 - um if this was set to 10 then our slider
21:55 - would
21:55 - go from like 20 to 30 to 40 to 50 every
21:58 - time we drag it
21:59 - but as we get in the upper uh range
22:03 - of frequencies that could be helpful
22:05 - more than this lower range
22:06 - the audible effects of like 20 hertz
22:08 - versus 25 hertz like they sound like
22:10 - different notes on the piano
22:12 - whereas 2000 to 2050 does not really
22:15 - sound like different notes on the piano
22:17 - so we're going to keep this at a step
22:20 - size of 1.
22:21 - okay the skew factor now the skew
22:24 - parameter lets us change how the slider
22:26 - responds what that means is that we can
22:28 - skew the slider such that the majority
22:31 - of our mouse movements
22:32 - are covering the lower part of this
22:34 - parameters range
22:35 - for example i'm reading my notes over
22:38 - here
22:39 - for example i could set this skew value
22:41 - such that 75
22:43 - of the sliders range covers the values
22:45 - 20 hertz through
22:46 - 1000 hertz leaving the last 25 percent
22:50 - of the sliders range
22:51 - to cover the remaining frequencies one
22:53 - thousand and one hertz to
22:55 - twenty thousand hertz or i could skew it
22:58 - differently so that the slider's bottom
23:00 - ten percent covers from
23:02 - twenty hertz to one thousand hertz and
23:03 - the remaining ninety percent of the
23:05 - sliders range covers
23:07 - one thousand and one hertz to twenty
23:09 - thousand hertz
23:10 - and since i don't wanna be doing any
23:12 - skewing right now i'm gonna leave this
23:13 - set to one all right and then
23:17 - the last thing is that um the default
23:20 - value for this parameter now this
23:22 - is the low cut parameter so we will give
23:24 - it a default value of
23:25 - 20 hertz because that's the bottom of
23:29 - the hearing range and we don't want to
23:30 - hear this parameter do anything
23:32 - unless we actually move it all right so
23:35 - that takes care of the low-cut parameter
23:37 - let me hide this
23:39 - plug-in processor and just show the
23:42 - plug-in plug-in thing so you can see the
23:45 - full name of this guy right here
23:47 - all right we've got our name we've got
23:48 - our parameter name and we've got our
23:50 - normalizable range right here
23:52 - and this is our default value we are
23:55 - going to do the same thing with the high
23:56 - cut frequency
23:57 - the only difference will be that we will
23:59 - set the default value to 20
24:01 - 000 hertz because it's at the top of the
24:04 - human hearing range and we don't want to
24:05 - hear this parameter do anything
24:07 - unless we decide to change the value so
24:09 - i'm just going to copy this
24:11 - i'm going to change the name to high cut
24:15 - high cut and then this needs to be 20
24:18 - 000. now let's do the same thing for the
24:21 - peak
24:22 - frequency we will use the same range of
24:24 - 20 hertz to 20 000 hertz
24:27 - um the same step size of one and the
24:29 - same skew value of one the only
24:31 - difference is we will set the center
24:33 - frequency to a default of 750 hertz
24:36 - and let's change the name to peak
24:40 - for the peak gain we will be expressing
24:42 - this parameter in decibels
24:44 - and a good range of values to use here
24:46 - is negative 24 to
24:47 - positive 24. a step size of 0.5 means
24:51 - that when we drag the slider
24:52 - back and forth it will represent a
24:54 - change of half of a decibel
24:56 - and we want this slider to behave in a
24:58 - linear fashion so we will use a skew of
25:00 - one
25:01 - and we don't want this to by default add
25:04 - any sort of gain
25:05 - or cut so we're going to use a default
25:07 - value of zero so i'm going to copy this
25:10 - we're going to change the name to peak
25:12 - gain the
25:14 - range is going to be negative 24.f
25:17 - with a max of 24.f uh our step size
25:20 - 0.5 f our skew
25:24 - of 1 and our default value of
25:27 - f 0.0f that's our gain
25:30 - next the peak band's quality control
25:33 - the quality controls how tight or how
25:36 - wide the peak band is
25:37 - this is kind of an abstract number and
25:39 - it doesn't have any units
25:40 - you can have a pretty narrow q which is
25:43 - reflected by having a high q value
25:45 - or you can have a very wide q which is
25:47 - reflected by having a very low
25:49 - q value so let's give ourselves a low
25:52 - value of
25:53 - 0.1 and a high value of 10.
25:56 - though i'm going to copy this let's copy
25:59 - this parameter
26:00 - change this to quality change that's
26:03 - quality
26:04 - so we will um yeah so we're going to
26:07 - give it a low value of 0.1 and a high
26:10 - value of
26:12 - 10. i'm going to use a step size of 0.05
26:15 - which means when we drag the slider
26:17 - it's going to go 0.1 0.15 0.2
26:22 - these can be pretty granular sizes which
26:24 - means we can have a lot of control which
26:26 - is good
26:26 - and always we want a linear response so
26:29 - we will set the skew on this
26:30 - to one and on top of it we want to use a
26:33 - generic default value
26:34 - of one for the queue one dot
26:38 - f all right for the low cut and high cut
26:40 - filters
26:41 - i want to have the ability to change the
26:43 - steepness of the filter cut
26:45 - so i will give myself some four
26:48 - different options
26:49 - okay our cut filters are normally
26:51 - expressed in
26:52 - uh decibels per octaves or their
26:54 - responses are
26:56 - normally expressed in decibels per
26:58 - octave sorry
26:59 - the way the math behind the filter
27:01 - equations works ends up expressing these
27:03 - choices in multiples of 6 or 12.
27:06 - so that means we can have choices like
27:07 - 12 decibels per octave
27:09 - 24 36 so for this project we're going to
27:13 - stick with four choices
27:14 - 12 24 36 48.
27:18 - so because we are using specific choices
27:20 - and not a range of values like with
27:22 - these sliders
27:23 - this means we get to use the audio
27:25 - parameter choice
27:26 - object so i'll show you what that's like
27:28 - uh
27:30 - audio parameter choice so that's this
27:33 - thing right here
27:34 - this thing uh it needs a string array
27:37 - that represents the choices
27:38 - and because both the low cut and high
27:42 - cut will use the same set of choices
27:43 - i only need to create this string array
27:45 - once so we're going to do that
27:47 - first let me get rid of this line let me
27:50 - scroll
27:50 - up okay so let's make our string array
27:54 - and now we're gonna do four choices and
27:57 - now we're going to construct uh
27:59 - something that says 12 db
28:01 - per oct or 24 and we can do that like
28:04 - this
28:07 - all right that should make a lot of
28:09 - sense default value is zero
28:11 - so we've got i'm sorry i's first value
28:13 - is zero so we've got 12 plus zero then
28:15 - 12 plus 12
28:16 - 12 plus 24 12 plus 36 that gives us 12
28:20 - 24
28:20 - 36 48 and then we're just sticking uh db
28:24 - per octave on the end of that string all
28:27 - right now we just need to create the
28:28 - audio parameter choice
28:30 - and give it the string array of choices
28:32 - and use the default value of 0
28:34 - meaning the filter will have a default
28:36 - slope of
28:37 - 12 db per octave let's create that now
28:40 - this is going to be called
28:41 - low cut slope
28:45 - choice is going to be our string array
28:47 - and our default index will be zero
28:51 - all right and we just need to duplicate
28:52 - this line for the high cut as well
28:56 - all right now we have got our parameters
28:58 - set up in our parameter layout so we
29:01 - can just return it and pass it to the
29:02 - audio processor tree value state
29:04 - constructor which we have already done
29:08 - we already did that right here all right
29:11 - now if we run the app as it is right now
29:14 - we are not going to see anything other
29:17 - than that hello world
29:18 - and that's because we haven't added
29:20 - anything to our gui but
29:23 - if i go up to the create editor function
29:26 - we can use the generic
29:29 - audio processor editor to see what our
29:32 - parameters look like
29:33 - so let's do that we're going to comment
29:34 - that line out we're going to write
29:36 - return
29:37 - new generic
29:41 - audio processor editor and it's going to
29:43 - be
29:44 - uh this okay so if we run it and take a
29:47 - look
29:48 - first of all make sure you are in
29:50 - standalone mode
29:51 - if we run it we are going to see
29:54 - some good stuff okay if we look at our
29:58 - combo boxes we can see that our slope
30:00 - controls
30:00 - show up this way there's our 12 24 36
30:03 - and 48
30:04 - peak control default value of one we can
30:06 - see it goes you know zero point one
30:09 - one five two five all the way up to ten
30:13 - and then for our gain we've got twenty
30:16 - four
30:17 - we can see that it's stepping by um half
30:20 - of a decibel every time
30:22 - okay so next we will work on the signal
30:25 - processing side of things
30:27 - that's the next step to make all these
30:28 - parameters actually do something
30:34 - all right we've got some parameters set
30:35 - up now this would be a good time to make
30:37 - a commit and um
30:38 - you know commit what we've done so that
30:41 - way if
30:41 - what we do in the next step gets messed
30:43 - up we can always revert back to here and
30:45 - try again so added parameters
30:49 - we can see what we did we created the
30:52 - audio processor value state
30:54 - created the parameter layout then we
30:57 - added our parameters and created the
31:01 - made it give us the generic audio
31:03 - processor editor
31:04 - whenever we go to look at stuff and then
31:06 - we also changed
31:07 - the language to c plus 17
31:11 - and did an export for in my case os x in
31:14 - your case it's probably for
31:17 - perhaps it's osx or windows um anyway
31:20 - we'll add those things stage those and
31:21 - make commit
31:23 - all right so the next thing we're gonna
31:24 - do is add uh some dsp
31:28 - now before we do that before we actually
31:30 - start writing dsp code we need to add
31:33 - the dsp
31:34 - module so go to producer click on the
31:37 - modules thing right here
31:38 - then click the plus button and you're
31:40 - going to add a module
31:42 - global juice global juice paths
31:46 - and go to juice dsp all right once that
31:49 - is in there
31:50 - then we can click on this guy
31:53 - and now we have access to all of the uh
31:56 - the juice
31:57 - dsp modules okay
32:00 - i'm going to switch back to the single
32:02 - view for right now so let me hide this
32:04 - and then go back to pluginprocessor.h
32:07 - back to my script if you have never
32:10 - written any audio
32:11 - software before or used any type of
32:13 - audio software then you might not be
32:15 - familiar with the concept of audio
32:17 - channels
32:18 - and stereo versus mono audio
32:21 - so stereo means there's two channels
32:22 - mono means there's only one
32:25 - now each of the signal processing
32:27 - classes in the dsp namespace
32:30 - is set up to process mono audio
32:33 - unless it's declared as stereo in the
32:35 - documentation
32:36 - so what that means is that it's only
32:38 - going to process a single channel of
32:40 - audio
32:40 - and since this plugin is going to be
32:42 - processing stereo audio
32:44 - we need to duplicate all of the stuff we
32:47 - are going to use
32:48 - and the dsp namespace uses a lot
32:52 - of template meta programming and nested
32:54 - namespaces so let's help ourselves out
32:57 - let's create some type aliases to
32:59 - eliminate a lot of those namespace and
33:01 - template definitions
33:03 - first thing we're going to create is a
33:05 - filter alias we're going to be
33:07 - processing floats and not doubles in
33:09 - this project
33:12 - that's our first alias now i said before
33:15 - how we can
33:16 - set the slope of our cut filters to be
33:19 - multiples of 12.
33:20 - each of the filter types on in the iir
33:24 - filter class has a response of 12 db per
33:27 - octave when it is configured as a low
33:28 - pass or high pass filter
33:30 - so if we want to have a chain with a
33:33 - response of 48 decibels per octave
33:37 - we are going to need four of those
33:38 - filters now a
33:40 - central concept of the dsp namespace in
33:43 - the juice framework is to define a chain
33:46 - and then pass in a processing context
33:48 - that's an important term
33:50 - pass in a processing context which will
33:52 - run through each element of the chain
33:54 - automatically
33:56 - so we can put four of these filters
33:59 - in a processor chain which will allow us
34:01 - to pass it a single context
34:03 - and have it process all of the audio
34:05 - automatically so let's do that
34:07 - using cut filter equals so third chain
34:13 - and then this is where we do one filter
34:15 - two filter
34:16 - three filter four filter as
34:20 - i mentioned earlier if you configure the
34:22 - filter as low pass or high pass
34:24 - it will have a 12 db per octave slope
34:27 - we can also configure that filter to
34:30 - work as a peak filter or
34:31 - shelf or notch or band pass or all pass
34:35 - there's a couple other types
34:36 - this means we can use one of these
34:38 - filters to represent the
34:40 - parametric filter so now that we have
34:42 - the peak filter and the cut filters
34:44 - represented as aliases
34:45 - we can define a chain to represent the
34:48 - whole
34:49 - mono signal path so we'll do that using
34:52 - mono chain equals juice dsp
34:56 - processor chain and we will do a
35:00 - cut filter then a normal filter and then
35:03 - a cut filter
35:06 - now we need two instances of this mono
35:08 - chain if we want to do
35:10 - stereo processing and
35:13 - to have access to the filter instances
35:15 - in order to adjust their cutoff
35:17 - gain quality or slope so let's declare
35:20 - that now
35:21 - mono chain we got the left channel
35:25 - and the right channel cool
35:29 - now before we can use our um our filter
35:32 - chains we need to prepare them
35:33 - so let's go over to our prepare to play
35:36 - and do that we must prepare our filters
35:39 - before we use them
35:41 - and we do this by passing a process spec
35:43 - object
35:44 - to the chains which will then pass it to
35:46 - each link
35:47 - in the chain so let's declare one of
35:49 - those
35:50 - and it needs to know the maximum number
35:53 - of samples that it will
35:54 - process at one time it needs to know the
35:58 - number of channels
35:59 - mono chains can only handle one channel
36:02 - of audio
36:03 - and it needs to know the sample rate now
36:06 - we can pass it to each chain and they
36:08 - will be
36:09 - prepared and ready for processing
36:12 - and let's just make sure everything's
36:13 - cool and build it
36:16 - build succeeded okay step number three
36:19 - this requires us to jump down to our
36:21 - process block
36:23 - now the processor chain requires a
36:25 - processing context to be passed
36:28 - to it in order to run the audio through
36:31 - the links in the chain
36:32 - in order to make a processing context we
36:35 - need to supply it with an
36:36 - audio block instance now the process
36:39 - block function
36:40 - is called by the host and it is given a
36:43 - buffer which can have
36:44 - any number of channels so we need to
36:47 - extract the left channel and the right
36:49 - channel
36:50 - from this buffer and the left and right
36:52 - channels are typically
36:54 - channels 0 and 1 respectively so the
36:57 - first thing we have to do is create an
36:59 - audio block
37:00 - which wraps this buffer so let's do that
37:02 - first we're going to get rid of this
37:03 - stuff
37:04 - right here and this is a block and it is
37:08 - initialized with our buffer
37:10 - now we can use the helper function in
37:12 - the audio block class to extract
37:14 - individual channels from the buffer
37:17 - which will then be wrapped inside more
37:19 - audio blocks so we can do
37:20 - auto left block equals block dot
37:24 - get single channel block we want channel
37:27 - zero
37:28 - do the same thing for the right channel
37:31 - now that we have audio blocks
37:33 - representing each individual channel we
37:36 - can create processing contexts that wrap
37:39 - each individual
37:40 - audio block for the channels
37:43 - process context replacing it's a float
37:46 - we're going to call it the
37:47 - left context
37:50 - it's going to be initialized with the
37:51 - left block
37:53 - make another one all right
37:56 - so we have our block representing an
37:58 - individual channel we have a context
38:01 - that kind of provides a wrapper around
38:04 - that block that the
38:06 - chain can use now we can pass these
38:08 - contexts
38:09 - to our mono filter chains left chain dot
38:12 - process
38:14 - and we want the left context and then
38:18 - right chain dot process
38:22 - right context now if we run it
38:27 - it will work but we will not hear our
38:28 - filters do anything because we have not
38:30 - set up their coefficients
38:32 - so this is going to be a good time to
38:34 - set up the audio plugin host so we can
38:36 - feed some
38:37 - actual audio through our plugin and show
38:39 - that the filters
38:40 - are not doing anything but until then we
38:43 - can actually just run this and you'll
38:44 - see that it's not going to do anything
38:48 - cool so we can drag all this stuff
38:49 - there's no audio running through it so
38:51 - we're not going to hear it do anything
38:57 - okay let's get set up with audio plugin
39:00 - host
39:00 - this is uh this comes with juice
39:03 - navigate to your juice
39:04 - folder and then go to extras and now go
39:07 - to audio plug and host
39:09 - and now open the you can open the juicer
39:12 - file if you want
39:13 - i'll do that now i've got this here it's
39:15 - just like the other thing where we have
39:17 - all our source and our modules and
39:18 - whatnot
39:19 - so all we're going to do is just save
39:21 - and open in ide
39:23 - wait for this to open and now we just
39:27 - need
39:27 - to build it all right build succeeded
39:31 - so we are done with um this project now
39:34 - that was very easy okay what we have to
39:37 - do now
39:38 - is run it outside of our project
39:42 - so go to the builds folder go to your
39:44 - particular operating system i'm going to
39:46 - go to mac os
39:47 - go to build debug and now run it
39:52 - all right it's going to want access to
39:54 - whatever device you have
39:56 - what we have to do now is scan our
39:58 - system for the plugin
40:00 - i haven't built it yet i've only built
40:01 - the standalone version so i'm going to
40:02 - change this
40:03 - to all and i'm going to build it now
40:07 - and what it's going to do is it's going
40:08 - to create a vst3 it's going to create an
40:11 - audio unit
40:12 - and it's going to copy them to the
40:14 - relevant locations on the computer
40:16 - now i can go back to audio plug and host
40:19 - and now i can go to the options menu and
40:21 - edit the list of available plugins
40:24 - and now under these options button here
40:26 - this is where you're going to scan for
40:28 - both
40:28 - if you're on mac audio unit and vst3 so
40:32 - we'll do vst3 first
40:34 - it's going to find our simple eq because
40:36 - we built it that way and then
40:39 - for audio unit do the same thing my case
40:41 - i have a bunch of uad stuff
40:43 - so it's going to find all of that okay
40:46 - so now that we have all of our audio
40:47 - units that are built into the computer
40:49 - and our vst3 close this available
40:52 - plugins
40:52 - list window now we can right click
40:55 - right here go to the uh your company
40:57 - unless you put something else in
40:59 - and pick um vst3 for right now
41:02 - here's our plugin so those good times
41:05 - now we want to run some audio through it
41:07 - so what we want to do is right click
41:09 - here um on os
41:11 - x you're going to go to the apple menu
41:12 - you're going to go to the au
41:14 - audio file player now this little plugin
41:17 - lets us load files and play them
41:22 - yeah we can load sound files and then
41:23 - play them so we're gonna wire this
41:25 - up connected to our audio output
41:28 - and then be able to
41:32 - hear audio running through our plugin so
41:34 - just drag
41:35 - like this and drag that to our audio
41:39 - output
41:40 - and um the other thing to do is you need
41:42 - to make sure that under your um
41:44 - options go to your audio device settings
41:46 - and this is where you're going to
41:48 - configure your audio on what you have
41:51 - now i'm going to set this up with an
41:53 - audio file that i have
41:55 - feel free to set it up with your own i'm
41:58 - just pulling something that i got from
42:00 - youtube's free audio library so that way
42:02 - this video doesn't cause any sort of
42:04 - copyright issues or anything set it up
42:06 - with whatever you have
42:08 - and then um i'm also gonna configure it
42:10 - so that it plays
42:12 - through um so that the audio that i play
42:14 - shows up in the video
42:16 - instead of just going out of the audio
42:18 - output all right so standby for that
42:20 - okay i've got my au audio file player
42:24 - set up
42:24 - with a file that is not going to trigger
42:27 - a copyright flag with
42:29 - youtube i've got it wired up to this
42:31 - simple eq that we've been working on
42:33 - and it's connected to the audio output
42:35 - so if i push play
42:37 - i'm going to hear it through the
42:37 - speakers and you guys are going to hear
42:39 - through this video so check it out
42:45 - [Applause]
42:49 - all right cool so uh obviously this
42:52 - stuff is not gonna do anything if i
42:54 - adjust that
42:59 - all right so that's the next thing we
43:00 - are going to work on we need to
43:03 - set this as what opens by default when
43:05 - we run our application so we will
43:07 - do that next a good thing to do once you
43:10 - get this set up is
43:11 - save the setting save the filter graph
43:13 - setting i'm going to save it with
43:15 - my project that's a good place to put it
43:20 - programming put it right here and just
43:22 - call it simple eq photograph
43:25 - okay so now i can save that now i can
43:27 - quit this and now i can configure
43:29 - the audio um configure my project to run
43:32 - audio plug and host when ever i run the
43:35 - project so i'm going to do that with a
43:36 - vst3
43:37 - go here for os x you're going to go here
43:41 - you're going to go to edits the scheme
43:43 - and you're going to configure the
43:44 - executable
43:47 - so do other
43:50 - and then just search for audio plugin
43:52 - host
43:55 - and there it is choose close
43:58 - and now if we run it it's going to run
44:00 - audio plug and host
44:02 - and it should load our saved file
44:06 - there it is okay so now we can um
44:09 - now what we can do is actually debug our
44:11 - stuff so if we add a break point right
44:12 - here
44:14 - um it's gonna pause execution right on
44:16 - that which is cool
44:18 - so now we can actually debug our code
44:20 - and whatnot while it's running in there
44:23 - okay so we are done with audio plug and
44:25 - host for right now
44:30 - okay we are going to connect some
44:33 - parameters to our
44:34 - filters but before we do that let's make
44:36 - a commit and just you know jot down what
44:38 - we did
44:40 - so we went through this and we
44:42 - initialized our chains
44:43 - and we got our chains up and running
44:45 - basically you could say we
44:47 - added our dsp added dsp
44:50 - right so here's where we created our
44:52 - chains
44:53 - here is where we initialized our chains
44:56 - here is where we
44:58 - started running audio through our chains
45:00 - and then
45:01 - this is where we did this is where we
45:04 - set up our
45:05 - filter graph and then here is where we
45:08 - added the dsp module
45:12 - okay with that out of the way now we can
45:16 - start configuring our filter chain so go
45:18 - to the plugin processor dot
45:20 - h and we're going to go up to the top
45:24 - now let's start by extracting our
45:27 - parameters from the audio processor
45:30 - value tree state
45:31 - and a data structure representing all of
45:33 - the parameter values
45:35 - will keep our code nice and readable so
45:36 - let's do that first
45:39 - and now next let's write a helper
45:41 - function that will give us all of these
45:43 - parameter values in our little data
45:45 - struct all right let's go to our cpp
45:49 - file
45:51 - now i'm going to implement this near
45:52 - where i created the parameter layout so
45:53 - it's easy to see the names
45:55 - so i'm going to put that right above
45:58 - this we'll just add this here
46:00 - chain settings
46:04 - okay now there are two ways to get
46:07 - parameter values
46:08 - from the ap vts the first way is to call
46:12 - get parameter and then get value like
46:14 - this
46:15 - vts get parameter
46:19 - some parameter name like low cut freak
46:23 - and then get value but the problem with
46:26 - that approach
46:27 - is that we are given a normalized value
46:30 - all of the functions that produce
46:32 - coefficients for our filter expect
46:34 - real-world values not normalized values
46:38 - so we're not going to use this one what
46:40 - we can use is a different function
46:42 - we can use apvts.getraw parameter value
46:47 - now this function returns the parameter
46:50 - in units that we
46:51 - care about units based on the ranges
46:55 - that we set up when we defined the
46:57 - parameters
46:58 - so for instance for the low cut
46:59 - frequency it's going to return a unit
47:02 - that's within this range instead of a
47:04 - normalized value between these two
47:05 - values
47:07 - so let's initialize all of our data
47:08 - structures
47:10 - all of the properties in our data
47:11 - structure using this function
47:14 - these raw parameter values are atomic
47:17 - which is handy when we are interacting
47:19 - with the gui later
47:21 - i'm not going to talk about any of the
47:22 - thread safety issues that come along
47:24 - with audio development
47:25 - in this particular course but you can
47:28 - learn all about that stuff
47:29 - in my course which teaches how to build
47:30 - the full channel equalizer
47:33 - and in several talks on youtube from the
47:35 - audio developer conference
47:37 - so let's go through these and start
47:40 - setting up our settings
47:49 - okay there's all the parameters getting
47:52 - them all low cut free high cut freak
47:54 - peak freak peak gain
47:57 - making sure we're using all the names
47:59 - that we used here
48:02 - let's go up to our prepare to play
48:04 - function
48:06 - all right we're going to do this after
48:07 - we've prepared our chain now that we
48:09 - have our settings we can
48:11 - start producing coefficients using the
48:13 - statter static helper functions
48:15 - that are part of the iir coefficients
48:18 - class
48:19 - so we can do this auto chain
48:23 - now we can do auto peak efficience
48:26 - equals make peak filter
48:31 - now we need the sample rate
48:35 - and our center frequency which is going
48:37 - to be chain
48:38 - settings oops chain settings
48:43 - dot peak freak chain settings
48:47 - dot q quality and then
48:51 - for the gain parameter this particular
48:54 - parameter expects a value in gain units
48:56 - not decibels so we must convert our
48:59 - decibel value to gain thankfully there
49:02 - is a handy helper function to do just
49:04 - that
49:05 - so that's juice decibels class and then
49:08 - this function and we feed it
49:12 - change settings dot peak gain in
49:14 - decibels
49:16 - all right let's put all that stuff on
49:17 - its own line so it's easy to look at
49:19 - now that we have our coefficients for
49:21 - the peak filter we can set our filters
49:23 - coefficients accordingly
49:25 - now you can access links in the
49:27 - processor chain via
49:29 - a get function like this left chain dot
49:31 - get
49:32 - and it's templated this function wants
49:35 - an
49:35 - index to a particular element in the
49:37 - chain
49:38 - via its template argument so let's help
49:40 - ourselves out
49:42 - and define an enum that represents each
49:45 - link's position in the chain and use it
49:47 - here all right so we're just going to
49:49 - leave that
49:49 - the way it is let's go back to our
49:51 - header file
49:53 - we'll go down here to where our chain is
49:55 - and let's define
49:57 - and enum here enum chain positions
50:01 - and we're going to have low cut peak
50:04 - and high cut and this goes along with
50:07 - what we have here we have a low cut
50:08 - the peak band and then the cut area
50:10 - right here we could change this to
50:11 - parametric if we wanted
50:13 - okay now that we have that let's go back
50:14 - to our cpp file go back to prepare to
50:17 - play
50:18 - all right let's use it to access our
50:21 - peak filter link and assign some
50:22 - coefficients
50:24 - so we're going to go chain positions
50:28 - peak like that all right that's how we
50:30 - get that particular filter link
50:32 - all right now the coefficients object
50:35 - this thing right here
50:36 - is basically a reference counted wrapper
50:39 - around an array that is allocated on the
50:42 - heap
50:42 - now we want to copy its values over so
50:44 - we need to de-reference it
50:47 - and don't ask me why the juice people
50:49 - decided to design their coefficients
50:51 - object this way
50:52 - allocating on the heap in an audio
50:54 - callback is bad
50:56 - but we're going to ignore that design
50:57 - flaw for right now and just keep moving
50:58 - forward
50:59 - alright so we are going to access the
51:01 - coefficients
51:03 - and we're going to assign it across peak
51:05 - coefficients like that
51:06 - and now we just need to de-reference
51:08 - them and then we'll do the same thing
51:10 - with the right chain
51:12 - okay at this point our peak filter has
51:14 - been set up and will make
51:15 - audible changes to the audio running
51:17 - through it if the gain parameter is not
51:19 - zero however any changes we make to
51:22 - these sliders
51:23 - will not cause audible changes because
51:26 - we are not updating the filter with new
51:29 - with new coefficients
51:31 - whenever the slider changes so let's do
51:33 - that next
51:34 - in our process block so let's go on to
51:37 - our processing process block
51:40 - and we need to do this before we run
51:42 - audio through it
51:43 - always update your parameters before you
51:45 - process audio through them
51:47 - okay so let's just copy the code we
51:49 - created and prepare to play
51:51 - right where we created our coefficients
51:53 - we can refactor this later let's just
51:54 - copy that for now
51:56 - go to process block put this right after
51:59 - this buffer
52:00 - clear stuff happens after that put it
52:02 - right here
52:04 - okay again we can refactor this later
52:06 - even though it's identical
52:08 - the only thing you need to change is
52:09 - this guy let's fix this so we can just
52:12 - call
52:12 - get sample rate and now if we run it and
52:16 - adjust the gain q and frequency
52:18 - sliders we will hear some audible
52:19 - changes
52:21 - okay i have run it and let's see what it
52:24 - gets see what it gets us okay we're just
52:25 - going to mess around with the peak
52:27 - frequency stuff
52:32 - [Music]
52:47 - okay all right it did something
52:51 - cool so you might notice that the filter
52:54 - slider is kind of
52:55 - wonky that's because our ears hear
52:58 - frequencies
52:59 - sorry that's because of how our ears
53:01 - hear versus how
53:02 - frequencies work if the sound goes up
53:05 - one octave
53:06 - the frequency doubles so this is an
53:08 - instance of where we want to change the
53:10 - skew parameter of our frequency slider
53:12 - let's play around with some different
53:13 - values until we find something we like
53:16 - so we go down to where our parameters
53:18 - are created
53:20 - um let's see which parameter was the
53:22 - skew parameter
53:23 - i think it was that's step size yeah
53:26 - that's step size so it's the last
53:27 - parameter so i'm gonna just try 0.5
53:30 - for the um let's see i'm messing with
53:32 - the peak frequency so we'll do that one
53:34 - first
53:35 - go like that let's rerun this stop
53:38 - i'm going to change it to 0.5 basically
53:40 - what it's going to do is adjust how the
53:42 - filter responds
53:44 - when i drag the slider okay
54:02 - all right now this is going to be more
54:04 - noticeable when you are
54:06 - messing with um actual like an actual
54:10 - graphical slider
54:11 - that you're designing versus these um
54:13 - sliders here
54:14 - so either way i'm gonna keep messing
54:16 - with this and we'll see what value i end
54:18 - up arriving on
54:19 - so something you might notice here is
54:21 - like um the range is 20 to 20 000.
54:24 - um if the slider's in the middle you
54:26 - would think that a value of 0.5 would
54:29 - result in
54:30 - 10 000 hertz but we don't actually see
54:32 - that until we're way over here
54:35 - this is what i was saying before about
54:36 - the skew thing so i can i can
54:39 - based on this skew that i have right
54:40 - here of 0.25
54:43 - the um from 20 hertz to 10 000 hertz is
54:48 - spread out across this range and then 10
54:50 - 000 to 20 000
54:52 - fits here in this little range right
54:54 - here so that's
54:55 - what the skew parameter lets us deal
54:57 - with
54:58 - okay so something that i'm noticing when
55:00 - setting that skew
55:02 - really far down like 0.15 or whatever
55:05 - is i hit the bottom of the range here
55:08 - and it doesn't go up to the next
55:09 - frequency
55:11 - until right there so that's a big chunk
55:15 - of the slider that's not
55:16 - usable based on this skew valid
55:20 - sku value of 0.15 so i'm going to put
55:22 - this back to 0.25 and i'm going to use
55:24 - that for
55:24 - every other frequency parameter okay
55:28 - so with that said we you know added a
55:30 - little bit of code so
55:31 - let's go ahead and make a commit this is
55:34 - going to be
55:34 - um let's see we implemented
55:37 - all right sorry we connected the peak
55:41 - filter params to the filter
55:45 - all right let's go ahead and commit that
55:46 - stuff all right on to the next step
55:53 - okay we are going to get the low cut
55:55 - filters connected to the
55:57 - low cut parameters now if you remember
56:00 - if we jump back over here the cut
56:02 - filters were built with
56:04 - their own processor chain instance
56:07 - and that instance has four
56:10 - filters within it as i said before each
56:13 - of these
56:13 - filters has a 12 db per octave response
56:16 - if it is configured as a
56:18 - low pass or high pass filter we are
56:20 - going to use a helper function from the
56:22 - juice framework that allows us to define
56:24 - iir
56:25 - filters with custom orders and we've
56:28 - been describing the slope
56:30 - in terms of decibels per octave but the
56:32 - slope of
56:33 - cut filters is also known as its order
56:36 - okay also a low cut filter is also
56:39 - called a high pass filter and
56:41 - likewise a high cut filter is also
56:43 - called a low pass
56:45 - filter so let's go take a look at the
56:48 - helper function we're going to use let's
56:50 - jump over to
56:51 - plugin processor go to the end of
56:53 - prepare to play and we're going to
56:55 - we're just going to call it so we can
56:57 - jump to the definition of it
57:00 - all right just give us some default
57:01 - parameters it is the design
57:03 - iir high pass high order butterworth
57:06 - method
57:06 - okay so just jump to the definition of
57:09 - that
57:09 - that's going to take us to the
57:10 - declaration but we want the actual
57:12 - implementation of this
57:14 - okay if we take a quick look at the
57:16 - implementation
57:17 - for example this little loop right here
57:20 - we'll do this loop because we're going
57:21 - to do even numbered orders
57:23 - okay right here
57:26 - if we look at the implementation you
57:28 - will see that it creates one
57:30 - iir filter coefficient object for every
57:34 - two orders so if the order is two
57:38 - we are only going to get one of these
57:40 - that's what i mean how like
57:42 - uh this gives us a 12 db per octave cut
57:44 - if it's
57:45 - four if our order is four we are going
57:47 - to get two sets of coefficients if our
57:49 - order is six we will get three et cetera
57:51 - et cetera
57:52 - so what we need to do is produce the
57:54 - required number of coefficient
57:56 - objects that are needed based on what
57:58 - our slope
57:59 - parameter is set to now remember the
58:03 - this parameter had four choices it was
58:05 - 12
58:06 - 24 36 48 let me jump over to plugin
58:09 - processor and go down to where
58:10 - we created our parameters i was down
58:13 - here
58:14 - we had four choices total
58:17 - all right so the first choice is at
58:19 - index zero
58:20 - if our choice is 12 db per octave
58:24 - which is index zero we want to get back
58:26 - one coefficient object
58:28 - and to do that that means we need to
58:31 - supply
58:32 - an order of two okay if our choice is 24
58:37 - like if we're doing i equals one
58:40 - we need to supply an order of four in
58:42 - order to get
58:43 - two coefficients back okay ergo
58:47 - our possible orders are then
58:50 - as in i'm talking about this parameter
58:51 - right here this parameter
58:53 - our possible orders are 2 4
58:57 - 6 and 8 okay so we need to add 1 to our
59:01 - slope choice
59:02 - and then multiply that by two
59:06 - to get the order to use when calling
59:08 - this helper function
59:10 - okay once we have done that we can get
59:11 - our array of coefficients from this
59:13 - helper function
59:14 - okay i'm going to say that one more time
59:16 - our possible orders are 2 4 6
59:18 - 8. so remember our slope choices are 0 1
59:22 - 2
59:22 - 3 so what we have to do is add 1
59:26 - to our slope choice and multiply that
59:29 - sum by
59:29 - 2 in order to get the correct order to
59:32 - pass
59:33 - to this function okay let's do that now
59:35 - go to plugin processor
59:37 - go back up to the prepare to play
59:38 - function
59:40 - and we're going to just get rid of this
59:42 - line we're going to do
59:43 - auto cut coefficients equals and now
59:46 - we're going to call that
59:49 - all right our frequency is going to be
59:50 - the chain settings
59:52 - low cut frequency sample rate sample
59:55 - rate
59:56 - and our order is going to be remember
59:59 - we're going to do our
60:00 - chain settings our slope for the low cut
60:03 - we're going to add 1 to it we're going
60:06 - to multiply that value
60:07 - by 2. 2 times that
60:11 - all right let's put these all in their
60:13 - their own line so it's easy to look at
60:16 - okay chain settings remember this is a
60:18 - value between
60:19 - zero one two and three so we're gonna
60:21 - add one to that that's gonna give us one
60:23 - two three four and then we're gonna
60:24 - double it which is gonna give us two
60:25 - four six eight
60:27 - okay now we need to start
60:30 - let's start by initializing the left
60:32 - chain first
60:33 - all right so let's get the low cut
60:36 - filter chain
60:36 - so we'll just do auto left low cut
60:40 - we're gonna get it chain position whoops
60:44 - all right now first we are going to
60:47 - bypass
60:48 - all of the links in the chain
60:51 - all right remember there are four
60:52 - positions so we need to bypass all four
60:55 - right now it would be ideal to be able
60:59 - to switch
60:59 - based on the slope setting so to make
61:02 - the code more readable let's define
61:04 - another enum that represents our slope
61:06 - setting
61:07 - since enums decay to integers which is
61:09 - what our choice parameter is expressed
61:11 - in
61:12 - let's go to the top of our plugin
61:14 - processor.h
61:16 - we're going to define an enum up here so
61:19 - i want to have the
61:20 - slope amount in the enums member names
61:23 - and since we can't
61:24 - use numbers to begin identifiers in c
61:27 - plus i'm going to put slope before that
61:29 - so we will do
61:30 - enum slope
61:33 - and i will do slope
61:37 - 12.
61:40 - all right now let's um let's adjust what
61:43 - the filter chain slopes are specified as
61:46 - let's change this guy right here so
61:48 - instead of it being low cut slope
61:50 - expressed with an integer let's express
61:51 - it with a slope
61:54 - all right we'll do the same thing for
61:56 - the high cut okay now if we try to
61:58 - compile
61:59 - we will get an error
62:02 - let's fix this error next all right what
62:05 - we have to do is
62:06 - change the data type right here to uh
62:08 - we're just going to cast this to that
62:10 - slope type right here
62:13 - do the same thing for this line and try
62:16 - building it again
62:18 - cool problem solved all right
62:21 - now we have our enum which gives us you
62:23 - know specific types that we can switch
62:25 - on
62:25 - let's go back to our prepare to play
62:27 - function
62:28 - oops all right that's down here now we
62:32 - can do a switch statement so
62:34 - switch and we want to do uh chain
62:37 - settings low cut slope
62:43 - i'm too lazy to type the switch types so
62:45 - i'm going to let the autocomplete do it
62:47 - all right add missing switch cases yes
62:52 - okay now we just need to fill them in if
62:54 - our order is 2
62:56 - meaning a 12 db per octave slope
62:59 - the helper function will return an array
63:02 - with one
63:03 - coefficient object only so we will
63:05 - assign those coefficients to the
63:08 - first filter in the cut filter chain and
63:10 - also stop
63:11 - bypassing that filter chain so we will
63:14 - do
63:15 - um let's see left low cut dot get
63:18 - first filter in that chain we want the
63:21 - coefficients and we're going to assign
63:22 - it to
63:23 - our cut coefficients the first element
63:26 - now remember we have to dereference and
63:29 - then
63:30 - we are going to stop bypassing
63:33 - this particular chain all right
63:36 - now for the next choice we will do the
63:38 - same thing that we did when the slope
63:40 - was 12
63:40 - however the helper function will return
63:42 - an array with two
63:44 - coefficient objects so we will find we
63:46 - will assign
63:47 - to the first two links in the filter
63:49 - chain and stop bypassing them
63:52 - all right i'm just going to copy this
63:54 - and then copy it again
63:56 - and change these to one all right we're
63:59 - going to repeat for the third
64:00 - and fourth option when the slope is 36
64:02 - and when the slope is 48.
64:06 - all right now that's obviously not you
64:07 - know optimized there's a lot of
64:09 - repetition in the code going on we'll
64:10 - deal with that later
64:12 - okay all we have to do now is repeat
64:14 - this for the right chain
64:16 - and our slider and combo box for the low
64:18 - cut filter
64:19 - will configure the filter properly
64:23 - so we are going to get the right chain
64:27 - and let's just copy all of this
64:30 - and replace all of the left low cut with
64:32 - right low cut
64:37 - okay all right as i said there is a lot
64:40 - of repetition here
64:41 - and it could do with some refactoring
64:42 - but let's not do that just yet okay
64:44 - first let's copy this chunk of code to
64:47 - our process block just like we did with
64:48 - the peak filter
64:50 - and we should be able to run it and test
64:51 - the sliders in the combo box and hear
64:53 - it adjusting the low cut filter all
64:56 - right so just grab all of this
64:58 - grab cut coefficients like that
65:02 - jump to process block we're going to put
65:05 - this after our peak coefficient stuff
65:07 - right like that okay the only difference
65:10 - is uh
65:10 - sample rate we need to call get sample
65:12 - rate again
65:14 - all right let's run it
65:17 - okay we should be able to adjust the low
65:19 - cut frequency as well as the low cut
65:20 - slope and here it make a difference
65:28 - all right let's adjust the slope
65:31 - [Music]
65:34 - i'm going to put it around 2500 put it
65:37 - around 4 000.
65:39 - we can definitely hear there's more
65:40 - bottom end when we use us
65:42 - a more gentle slope versus a steeper
65:46 - slope
65:47 - all right i'm happy with that
65:50 - okay let's uh make a commit since we did
65:53 - some good work right there
65:55 - we added the uh let's see we connected
65:58 - the
65:58 - low cut parameters to the filter
66:02 - we made our enum we adjusted our chain
66:05 - settings how they are defined
66:07 - and we added our coefficients and we got
66:10 - them working with our
66:12 - um working with the filter and then we
66:14 - also updated how we pulled them from the
66:16 - uh
66:17 - from the process block or from the apvts
66:21 - all right cool on to the next thing we
66:23 - will refactor
66:25 - what we are doing
66:29 - okay let's start the refactor with
66:31 - cleaning up the stuff that configures
66:32 - the peak filter
66:33 - let's just do a uh a function here at
66:36 - the bottom
66:38 - all right we're going to update the peak
66:39 - filter with the change settings
66:41 - i'm going to implement this beneath
66:43 - where i am
66:44 - getting the chain settings
66:49 - now i'm going to just copy the
66:50 - implementation from the process block
66:52 - paste it here replace it in the process
66:56 - block and then do the same thing in
66:57 - prepare to play
66:59 - i'm just gonna copy this stuff paste it
67:02 - here
67:03 - and now i'm gonna call this i'm gonna do
67:06 - the same thing in prepare to play
67:09 - very easy now let's add a helper
67:11 - function since we will be updating lots
67:13 - of coefficients like we are updating
67:15 - them
67:16 - here we're updating them here here
67:19 - here here okay so let's go back to our
67:22 - header file
67:23 - and let's do that here now i'm not sure
67:26 - of the exact type that the dsp iir
67:29 - filter class uses for its coefficients
67:32 - if we take a look over here it uses this
67:34 - thing which is an alias to whatever this
67:36 - is
67:37 - but we can make an alias to that alias
67:39 - very easily
67:41 - and now it's very easy to declare this
67:44 - helper function that will update those
67:45 - coefficients
67:46 - now it doesn't use any member variables
67:48 - so it could be a free function or it
67:50 - could be a static member variable
67:52 - a static member function so i'm going to
67:54 - go with static for this
67:56 - particular instance because i'm already
67:57 - right here i don't want to have to
67:58 - scroll up to make a free function
68:01 - all right and let's go implement that
68:02 - below where we implemented our
68:06 - update peak code okay remember they're
68:10 - um reference counted objects allocated
68:12 - on the heap so we need to de-reference
68:13 - them to get the underlying object
68:16 - now we can use it here
68:19 - the old ones are going to be this thing
68:24 - the replacements are going to be this
68:25 - thing
68:27 - we'll do the same thing for the right
68:30 - chain
68:32 - okay let's run this and then move the
68:34 - sliders make sure it works and if it's
68:36 - cool then we'll delete this old code
68:38 - and then do the low cut filter next
68:42 - okay so we're just going to mess with
68:43 - the peak filter
68:51 - all right it's making changes make it
68:54 - tight
68:56 - give it a little sleepy heat
69:03 - cool all right let's clean this up and
69:05 - then commit our changes
69:07 - let's build just to make sure that what
69:10 - we deleted is cool
69:11 - all right let's make a commit all right
69:15 - here we go commit that stage all this
69:17 - stuff
69:19 - boom okay we can refactor how the low
69:21 - cut filter gets configured next and then
69:24 - we can use that same code to configure
69:26 - the high cut filter
69:27 - let's refactor how the low cut filter is
69:29 - updated
69:30 - so we'll be able to use this later for
69:32 - the high cut filter
69:33 - now i'm not sure what type names to use
69:35 - for the parameters here
69:36 - so i'm going to use a templated function
69:38 - so let's go to our header file
69:40 - and put this down here template type
69:43 - name chain type and then
69:46 - void update cut filter now a trick one
69:50 - refactoring something like this is to
69:51 - use the same names you were using in the
69:53 - unrefactored code
69:55 - so i'm going to use uh if we go take a
69:56 - look at our plugin processor
69:59 - i'm going to use the same names here
70:00 - where i've got cut coefficients
70:02 - and then left low cut and then
70:06 - low cut slope i'm going to use those
70:07 - same names for right now
70:09 - okay so we're going to do a chain type
70:12 - of
70:13 - left low cut i'm going to use a
70:16 - coefficients type of
70:18 - cut coefficients and then i've got my
70:21 - chain settings const chain settings
70:25 - chain settings all right so let's copy
70:27 - over the stuff
70:28 - from process block first and call it in
70:31 - process block
70:32 - and then comment and comment out the old
70:34 - stuff and we will fix any errors along
70:36 - the way so let's go to our
70:37 - plug-in processor we're going to grab
70:39 - this cut coefficient stuff
70:42 - and then all of this code right here
70:45 - and now let's comment it out and
70:48 - call our function all right we want to
70:51 - call it with our
70:53 - uh left low cut let me call this
70:57 - after this point so i still need this
70:59 - thing
71:00 - all right so let's see and i still need
71:02 - my cut coefficients too
71:05 - okay cut filter we're going to call it
71:06 - with left low cut we're going to call it
71:08 - with cut coefficients
71:09 - and our chain settings let's uh give
71:12 - that a quick build just to make sure
71:14 - that that works as expected all right we
71:17 - have some
71:18 - errors going on here oh yes okay so
71:22 - we're not passing this and we're not
71:23 - passing that
71:23 - so comment that out and that should be
71:26 - good to go all right
71:27 - so we need to add some template keywords
71:28 - right here template
71:31 - and that also needs to go here
71:35 - in front of these since these are
71:36 - template functions we have to express
71:38 - we have to explicitly declare that they
71:41 - are
71:41 - templated like this it's one of the more
71:44 - obscure
71:45 - uh c plus plus rules all right
71:48 - okay cool build succeeded all right the
71:50 - left cut filter is configured so we can
71:52 - tackle the right cut filter
71:54 - with our helper function now so we just
71:57 - do this same thing
71:58 - comment out all of this code call our
72:01 - helper function
72:02 - and use the right low cut we'll do a
72:05 - quick build just to make sure
72:06 - build succeeded all right cool now we
72:09 - aren't using the entire
72:11 - chain settings object we're only using
72:13 - the slope
72:14 - so let's go back and change our switch
72:16 - statement okay we're going to get rid of
72:18 - this
72:19 - and we're going to change our parameter
72:20 - so we're going to get rid of this we're
72:21 - going to change this to be
72:23 - const uh slope low cut
72:27 - slope and now we can change this line to
72:29 - be switch
72:31 - low cut slope let's build it we should
72:34 - get some errors
72:35 - because we need to change what we're
72:36 - calling it with this is where we need to
72:38 - do
72:39 - low cut slope and then on the next one
72:42 - as well all right and if we build it we
72:44 - should get no errors
72:47 - okay cool no errors so let's revise
72:50 - prepare to play now
72:51 - let's go up here to prepare to play and
72:53 - we need our coefficients our left
72:55 - low cut as well as our right low cut so
72:57 - let's get rid of
72:59 - uh this code and this code
73:03 - and now let's call uh we'll get rid of
73:05 - that code too
73:06 - and now we can call our code we can call
73:09 - our
73:09 - function we'll start with the left low
73:12 - cut filter chain
73:14 - update cut filter with the left low cut
73:18 - chain
73:19 - and our cut coefficients and our left
73:22 - low cut uh this is where we need our
73:24 - chain settings
73:25 - dot um low cut slope and then do the
73:28 - same thing for the high cut or for the
73:30 - right
73:31 - low cut our slider and combo box
73:34 - for the low cut filter should configure
73:37 - the
73:37 - uh dsp filter properly all right let's
73:39 - test out our refactor
73:41 - and if it's cool we will delete all this
73:43 - code and um
73:44 - do commit okay let's run it and see what
73:46 - we get
73:47 - okay so we are going to mess with the
73:49 - low cut now and the slope
73:51 - [Music]
73:56 - that's working
74:06 - all right i am very happy with that
74:08 - let's clean this up and make a commit
74:13 - all right let's clean up our header file
74:17 - okay let's build it just to make sure
74:22 - all right looking good updated
74:25 - or refactored low cut
74:28 - configuration load code filter
74:32 - configuration all right this is where we
74:35 - added our helper function
74:37 - this is where we deleted our helper our
74:39 - old code
74:40 - and now call the updated stuff
74:47 - now this is obviously very verbose so
74:50 - let's clean this up
74:51 - we're going to use a special trick just
74:54 - comment all of this out
74:57 - if we reverse the switch order we can
74:59 - leverage
75:00 - case path uh we can leverage case
75:03 - pass-through to eliminate a ton of code
75:06 - duplication here
75:07 - so i'm going to do that first all right
75:09 - we're just going to put the cases in the
75:11 - opposite order case slope
75:16 - okay the way this works is like if it's
75:20 - the 48th
75:21 - if it's if our slope is 48 we wanted to
75:24 - do this one
75:25 - and then we also wanted to do all of
75:26 - these so we can just make it
75:28 - instead of making it break out of the
75:30 - switch we can just do okay if it's 48
75:32 - do this do that one here and then and
75:35 - then do also do the one that is required
75:36 - for 36.
75:39 - we can also write a templated helper
75:40 - function to eliminate even more
75:42 - duplicated code
75:43 - because we're doing this thing and yeah
75:46 - all right so let's write that next right
75:48 - above this guy
75:50 - all right so we're going to do template
75:52 - we'll add these parameters next uh
75:54 - void update so we're gonna need our
75:56 - chain
75:57 - we're gonna need the coefficients
76:01 - and then um so we're gonna need our
76:02 - chain type and our coefficients
76:06 - and then if you notice all of these make
76:08 - use of this
76:09 - get or set bypass and use as a parameter
76:12 - here
76:15 - so we are going to make this be the
76:18 - first parameter because
76:19 - if you didn't notice when we called this
76:21 - function we didn't have to provide any
76:23 - of these template arguments
76:24 - so the compiler deduced what to put here
76:27 - automatically so if we
76:29 - leave these as the later template
76:31 - arguments the compiler can deduce them
76:34 - for us and we only need to provide uh
76:36 - the um
76:37 - that index so we're gonna do that int
76:40 - index okay now we can just do that
76:44 - update coefficients function
76:46 - update coefficients and our old one is
76:49 - going to be chain
76:50 - dot this thing right here template get
76:54 - dot coefficients
76:56 - all right and our coefficient
76:57 - replacement type is going to be the
76:59 - coefficients uh cut coefficients is that
77:03 - the name i'm using there i'm going to
77:04 - change that name
77:05 - to just coefficients
77:08 - and the index that we use if you notice
77:11 - it's always when it's get zero
77:13 - we always use the zero with cut
77:14 - coefficient index when it's one we use
77:17 - the index one okay so whatever we put
77:20 - here
77:21 - our index is the same thing we're going
77:24 - to use here
77:25 - index all right how convenient is that
77:28 - and then
77:29 - we need to set the bypass state to false
77:31 - so we can call that
77:33 - chain dot template set bypassed
77:38 - index false
77:42 - cool all right now we just need to call
77:45 - it
77:47 - all right so remember if we're doing the
77:50 - 48
77:50 - degree slope we want to call this
77:56 - all right and this is being replaced by
77:59 - that
77:59 - update function
78:02 - this is where we want index three and
78:05 - our chain type
78:06 - is left low cut and our coefficient type
78:10 - is the cut
78:10 - coefficient all right let me spell that
78:13 - right
78:15 - all right that gets rid of these lines
78:18 - all right we do the same thing three two
78:19 - one zero
78:23 - three two one
78:26 - zero zero okay
78:31 - let's test that out make sure that works
78:33 - if it does then we can clean this
78:34 - up all right so we're gonna run it we're
78:38 - gonna adjust this and adjust this
78:41 - [Music]
78:45 - all right that's filtering put this on
78:47 - 48
78:49 - this to 5 000
78:53 - and we'll change the slope and we hear
78:56 - more bottom end material
78:57 - not much more but
79:03 - all right cool awesome
79:07 - let's make a commit of that after we
79:08 - clean it up
79:15 - all right cool is there anything in here
79:17 - that needs cleaning up
79:18 - i don't think there is prepare to play
79:21 - nope all right
79:22 - let's make a commit of that so
79:24 - refactored
79:26 - chain update refactored
79:30 - update cut filter code very cool
79:33 - got some more advanced c plus plus stuff
79:35 - going on with that
79:38 - all right now we can uh connect the high
79:40 - cut parameters
79:42 - to the um to the filters all right so
79:45 - let's go over to our plug-in
79:47 - processor.cpp and go up to the um
79:50 - go to the prepare to play function first
79:53 - of all
79:55 - now we need to um let's see
79:58 - go back to my notes here uh we need to
80:01 - rename our
80:02 - coefficients before we dig into high cut
80:05 - filter configuration so let's change
80:07 - this to be low cut con
80:09 - low cut coefficients
80:14 - all right now that we've done that now
80:16 - we can configure the high cut chain
80:17 - we're going to follow the same pattern
80:20 - uh we're going to call the helper
80:21 - function to get coefficients and then
80:22 - we're going to call the helper function
80:25 - to update the filters with those
80:29 - coefficients okay
80:30 - so we're going to do auto high cut
80:33 - coefficient
80:34 - equals juice
80:38 - okay we want the design low pass high
80:41 - order butterworth method
80:42 - all right same thing it's going to be
80:44 - the chain settings
80:46 - dot the high cut frequency same sample
80:49 - rate
80:50 - and then our order is going to be this
80:52 - same
80:53 - expression
80:57 - but it's going to be the high cut slope
81:01 - okay now we can get our left chain in
81:03 - right chain
81:05 - left high cut high cut
81:10 - do left chain and right chain
81:14 - okay and now we can just call this uh
81:17 - call this guy call it with left high cut
81:21 - and the uh high cut slope
81:25 - and then do it again for the right side
81:29 - and then we need to use our high cut
81:31 - coefficients
81:34 - and then we will do the same thing uh we
81:37 - can obviously refactor this later
81:40 - we can do the same thing in our process
81:42 - block now
81:45 - process block let's just put this at the
81:46 - end of our update
81:48 - filter code here and then oh we need our
81:51 - get sample rate
81:53 - and now uh now this is in place we can
81:56 - uh
81:57 - run it and test it
82:00 - all right so we're going to be testing
82:01 - the high cut frequency and the high cut
82:04 - [Music]
82:08 - slope
82:10 - all right so i'm going to set this
82:11 - around 2500 hertz
82:14 - now if i change the slope i should hear
82:15 - less and less high frequency
82:27 - perfect all right cool
82:31 - let's do a um don't repeat yourself
82:33 - refactor
82:34 - and um that'll wrap it up for the dsp
82:37 - side of things
82:39 - that was easier than probably you
82:41 - thought
82:42 - so the first thing we are going to do is
82:44 - go to our plugin processor dot h
82:48 - down here let's make a function that's
82:50 - going to update all the filters
82:53 - now we need a pair of functions one for
82:54 - the low cut and one for the high cut and
82:56 - this will be
82:57 - these will be called by the uh by this
83:01 - update filters function
83:02 - okay so
83:06 - all right takes care of those let's go
83:09 - over to our plugin processor dot cpp
83:12 - i'm going to jump to after the updates
83:14 - coefficient
83:15 - function update coefficients function
83:18 - i'm going to copy the relevant code
83:20 - from processblock to the implementation
83:22 - for the uh
83:23 - update low cut filter
83:26 - let me grab that from processblock
83:31 - all right let's just copy that
83:35 - paste that here make sure we're getting
83:37 - the coefficients and then updating both
83:38 - chains
83:42 - we're going to do the same thing for the
83:44 - high cut void
83:46 - simple
83:48 - let's go grab that code from the process
83:52 - block
83:53 - i cut coefficients update cut filter
83:57 - all right now we need to implement our
84:00 - update filter function
84:02 - so i'm going to do that below this
84:05 - now i just need to get the chain
84:07 - settings auto
84:09 - change settings equals get chain
84:11 - settings
84:14 - now i can call update low cut filters
84:19 - update peak filter
84:24 - update high cut filter
84:29 - now we just need to replace all of that
84:31 - stuff in process block
84:33 - with a call to that update filters
84:35 - function
84:37 - all right we don't need our chain
84:38 - settings anymore we don't need any of
84:39 - this
84:42 - update filters okay let's do the
84:45 - same thing in uh prepare to play
84:49 - all right we lose all of this code which
84:51 - is great
84:54 - all right let's run it just to make sure
84:59 - all right we're going to adjust all the
85:00 - sliders and we should work
85:02 - as expected
85:05 - [Music]
85:09 - there's our low cut
85:12 - [Music]
85:17 - all right low cuts working
85:20 - is the high cut working get rid of some
85:23 - more high end
85:34 - okay high cuts working let's mess with
85:36 - the peak
85:52 - so
85:54 - cool all right that works let's clean
85:56 - this up
85:58 - delete that code go to our process block
86:01 - delete all this code all right let's see
86:04 - if there's anything else that's
86:05 - commented out
86:07 - not just those guys just those guys okay
86:11 - uh dry
86:14 - refactored dsp config
86:18 - dsp filter configuration
86:22 - all right commit okay cool
86:26 - so that wraps it up for the dsp side of
86:28 - things
86:29 - okay so that's awesome all right
86:32 - the next stuff we get to work on is the
86:34 - gui side of things we get to design a
86:35 - custom
86:36 - interface and knobs and get the response
86:39 - curve showing up and the
86:40 - fft analysis showing up in the
86:42 - background as well
86:43 - okay see you in the next one
86:49 - okay before we start on the gui let's
86:52 - implement
86:52 - saving and loading of our plugins
86:55 - parameter state
86:56 - it's very easy to do because the plug-in
86:58 - state is stored in the
87:01 - apvts's member called state
87:04 - let me show you what that looks like all
87:06 - right so right down here there's a
87:07 - public member variable
87:09 - okay this is where all of the um
87:11 - basically the generic values are stored
87:13 - in this
87:14 - okay so let's go back to our plugin
87:15 - processor dot cpp
87:18 - and we're going to go to the what's the
87:20 - name of this function
87:21 - get state information the state member
87:24 - as i said was a
87:26 - it's an instance of a juice value tree
87:28 - and those serialize
87:29 - to memory very easily so we can use a
87:31 - memory output stream
87:33 - to handle the busy work needed to write
87:35 - the ap vts
87:36 - state to the memory block that this
87:39 - function has been given by the host
87:41 - talking about this memory block right
87:42 - here alright so we can just make a
87:44 - memory output stream
87:46 - take one that uh writes to a memory
87:47 - block dest data
87:49 - yes we want to append to the existing
87:51 - content
87:53 - let's call it mls for memory output
87:55 - stream
87:56 - now we just write it a p v t s dot
87:59 - dot write to stream mos
88:02 - that's it how simple is that likewise we
88:06 - can do the reverse
88:07 - we can restore our plug-in state from
88:09 - memory using a value tree helper
88:11 - function
88:12 - the only thing we need to check for is
88:13 - if the tree uh that was pulled from
88:16 - memory
88:16 - is valid before we copy it to our
88:18 - plugins state
88:20 - so let's use that function all right we
88:23 - want this one read from data
88:24 - we're gonna pass it data we're gonna
88:26 - pass it size in bytes
88:28 - okay once we know the tree is valid
88:31 - then we can replace our plug-in state
88:33 - and also update our filters with these
88:36 - saved
88:36 - parameter values so apbts.replacestate
88:40 - with the new one and then update filters
88:44 - how simple is that so now if we run this
88:47 - in audio plug and host
88:49 - we should be able to tweak the
88:50 - parameters and then um
88:52 - it will be restored oh this i changed
88:55 - the folder name so i need to reload
88:56 - where this is
88:57 - okay so for example i'm going to change
88:59 - this from 20
89:01 - to whatever that number is okay save it
89:04 - quit
89:05 - we're going to reopen and it's no longer
89:08 - 20 it is on
89:10 - 4573 cool all right we can double click
89:13 - to reset it back to the default value
89:15 - our parameters are saved between loads
89:18 - cool okay let's get back to using
89:22 - our editor instead of the generic one so
89:24 - we're gonna
89:25 - uncomment this line or we're gonna
89:27 - comment this line out and uncomment this
89:28 - one
89:29 - all right so now we are gonna be shown
89:31 - an editor that has no gui
89:33 - um it just says hello world okay so
89:36 - we're back to this all right so we're
89:37 - going to start adding
89:38 - knobs and sliders and all that kind of
89:39 - stuff okay so the first thing that i
89:42 - want to do
89:42 - we're going to switch over to
89:45 - plugineditor.cpp
89:47 - first thing i want to do is give
89:48 - ourselves some more room so we're going
89:50 - to make this
89:51 - 600 by 400. all right we're also going
89:54 - to switch to the standalone
89:56 - plugin instead of the host for right now
89:58 - okay if we run this we're going to see
90:00 - a bigger window cool all right
90:03 - definitely better
90:04 - now let's go to plugineditor.h now i
90:07 - don't want to have to type this base
90:09 - class initialization for every slider
90:11 - that i'm going to make because they're
90:12 - all going to be rotary sliders and
90:14 - they're not going to have a text box so
90:16 - i'm going to create a class that does
90:17 - this
90:18 - automatically in the constructor and
90:19 - just use that for every slider in the
90:21 - gui
90:22 - i'm going to put that right here
90:28 - we're inheriting from slider and then
90:30 - we're going to set it so that it's using
90:31 - the rotary horizontal vertical drag
90:34 - style and then a no text box position
90:38 - now we need to add some sliders so let's
90:41 - add them
90:42 - right here okay we're going to deal with
90:43 - the slope controls later
90:45 - for right now we're just going to show
90:47 - the frequency and gain and quality
90:49 - sliders okay
90:50 - so custom rotary slider
90:53 - and we want our peak freak slider
90:57 - we want our peak gain slider
91:00 - we want our peak quality slider
91:04 - we want our low cut freak slider
91:08 - we want our high cut freak slider
91:13 - now when i have a bunch of components
91:14 - that are going to be have that are going
91:16 - to have the same thing done to them all
91:17 - the time i like to add a
91:20 - i like to add a function that's going to
91:22 - give me all of them in a vector
91:24 - so that way i can just iterate through
91:26 - them easily so i'm going to do that next
91:30 - all right now it's very easy to
91:32 - implement let's go to plug-in editor
91:34 - we'll put this after resized
91:38 - and all we have to do is just return a
91:39 - vector with um all of our components in
91:44 - that's super easy to use we just need to
91:46 - do it uh before
91:47 - we call set size so we're gonna do that
91:49 - right here for
91:50 - auto comp get comps
91:55 - and then we can do add and make visible
92:00 - all right the next thing we need to do
92:02 - is to position them all
92:04 - now juice live constant is a very useful
92:07 - tool for this
92:08 - we're going to put these right here yeah
92:10 - when it's time to dial in specific
92:11 - positions i will use
92:12 - juice live constant because it basically
92:15 - lets me adjust positions of things
92:17 - while the editor is visible which is
92:19 - very handy but for right now what i'm
92:21 - going to do is reserve the top third of
92:23 - display
92:23 - third of the display for showing the
92:25 - frequency response
92:27 - of the filter chain and then the bottom
92:28 - two thirds is going to go
92:31 - it's going to be dedicated to the
92:32 - placement of all the sliders so i'm
92:33 - going to do that
92:34 - next
92:38 - all right so the way this works is i've
92:40 - got my bounding box for the component
92:42 - i'm dedicating an area for the top
92:45 - basically like i'm chopping off a
92:46 - rectangle i'm
92:47 - chopping off uh 33 of the height
92:51 - that's going to get stored in this
92:52 - response area now i'm going to put the
92:54 - low cut stuff
92:55 - on the left so i'm chopping out 33
92:59 - of the bounding box in its current form
93:02 - that's going to go to the left and then
93:04 - the high cut area
93:05 - so if you remember i've got basically
93:07 - 100 this is taking up 33 percent
93:10 - and so this is rep this bounds right now
93:12 - represents 66 percent
93:14 - so i want to take half of that which
93:17 - gives me another 33
93:18 - that's going to be the right third of
93:20 - the display now i just set my um
93:23 - my low cut frequency slider and my high
93:25 - cut frequency slider
93:26 - to be in the left side and right side
93:29 - and then
93:30 - for my peak slider i'm going to set that
93:32 - at the top of that center column it's
93:34 - going to get the top third
93:36 - same thing's going to happen here this
93:38 - now
93:39 - after this call has a height
93:43 - of two-thirds of what it used to be so
93:45 - we want
93:46 - half of that to give us one-third for
93:48 - the peak gain and then one third for the
93:50 - quality
93:51 - okay so if we run this we're going to
93:53 - see knobs
93:55 - or sliders or whatever we want to call
93:56 - them okay cool
93:58 - so here's our big old low cut slider
94:01 - here's our high cut slider and then
94:03 - here is our um peak frequency here's our
94:07 - peak gain and then here's our peak
94:08 - quality and you can see these guys are
94:10 - uh they each share uh 33
94:14 - of the um of their allotted space
94:19 - all right next we're going to add these
94:21 - slope sliders
94:23 - all right let's go back to our header
94:25 - file we're going to add these
94:27 - over here they're just going to be
94:29 - they're going to use the same custom
94:30 - rotary thing these are going to be low
94:33 - cut low cut slope
94:36 - slider and then um high
94:39 - cut slope slider and we got to add them
94:43 - to our list of components
94:47 - and then we need to position them so
94:50 - let's put them after our low cut
94:52 - frequency slider
94:54 - we are going to make this uh let's see
94:56 - this is going to be low cut area we're
94:58 - going to
94:58 - we're gonna cut we're gonna divide the
95:00 - low cut uh side of things in half
95:05 - and then we'll do the same thing uh
95:06 - let's see this is where we're gonna do
95:08 - low
95:08 - cut slope slider not set bounds
95:13 - low cut area and then for the high cut
95:17 - we're gonna do the same thing we're
95:18 - gonna do remove from top
95:21 - make sure it's that guy and now we can
95:23 - do
95:24 - high cut slope slider dot set bounds
95:28 - high cut area
95:31 - all right so we are removing we're
95:34 - basically removing from the top of this
95:35 - low cut area
95:37 - um a a rectangle that is half
95:40 - of its original size and giving that to
95:42 - the low cut
95:43 - and then using what that leftover piece
95:45 - goes this
95:46 - to the low cut slope slider right
95:49 - check it out we're going to run it
95:50 - you'll see those two sliders have the
95:51 - same size on either side all right
95:56 - yeah these guys have the same size these
95:58 - guys all have the same size
96:00 - all right cool so though those are the
96:04 - uh sliders they have now been positioned
96:06 - on the screen
96:08 - okay the next thing we need to do is um
96:10 - connect them
96:11 - to our um to our parameters so let's
96:14 - make a commit
96:16 - added sliders to
96:20 - gui all right commit
96:25 - all right let us connect the parameters
96:28 - to these sliders now
96:29 - let's go down to um our plugin editor.h
96:33 - okay uh below where all of our sliders
96:38 - are declared the apvts has an
96:41 - attachment class which makes it very
96:43 - easy to connect sliders to the audio
96:45 - parameters
96:46 - however the name is very long so let's
96:48 - use a type name alias to help out with
96:50 - the reason with the
96:51 - readability here so using
96:55 - and using ap vts equals that super long
96:58 - class name
96:59 - and now we can create an attachment
97:01 - alias as well
97:04 - right now we just need to declare one
97:06 - attachment for every one of these
97:08 - sliders
97:12 - all right the next step is to initialize
97:14 - them
97:15 - properly so we go up to our constructor
97:17 - and we have to initialize all of them
97:18 - here so what we need to do is
97:21 - write um they take three parameters so
97:23 - let's see
97:24 - um peak freak slider attachment
97:29 - all right it needs the audio processor
97:30 - value tree state to use we're gonna use
97:32 - the audio
97:33 - processor abvts the parameter id
97:37 - peak freak and if we're not quite sure
97:40 - about that we can go back over here
97:42 - and double check so we got low cut free
97:44 - ki-cut freak
97:45 - peak freak peak gain peak quality low
97:48 - cut slope high cut slope
97:49 - so the good thing about this project is
97:50 - there are not a lot of parameters
97:52 - um which means we can kind of get away
97:55 - with
97:56 - typing them like this um if our project
97:58 - had way more
98:00 - parameters in it we would want to
98:02 - standardize how
98:03 - they are named um and use some kind of
98:06 - lookup table
98:07 - with std map or something so that way
98:10 - um it's impossible to spell them wrong
98:13 - here
98:14 - that sort of thing we can yeah just use
98:16 - the lookup table and some kind of enum
98:18 - system to
98:19 - index into the uh parameters okay
98:22 - so let's connect this to the proper
98:24 - slider peak freak
98:25 - slider all right that's one so we need
98:28 - to do this
98:29 - for all of these guys here okay that was
98:31 - this one we need to do it for all of
98:33 - these
98:35 - okay once we get to this point
98:38 - uh all we have to do is just test it and
98:39 - see that our sliders work as expected
98:41 - and their value is preserved when
98:43 - closing the gui
98:44 - or closing and reopening the app so
98:46 - let's do that
98:47 - right now i'm just gonna do the
98:49 - standalone version
98:51 - okay uh we're just gonna adjust this guy
98:54 - i'm gonna close it and reopen it
98:58 - cool that's at the same spot let's do it
99:00 - in um uh audio plug and host
99:03 - all right let's run some audio through
99:10 - it closing the gui
99:13 - reopening the gui where it needs to be
99:29 - save and click that and reopen it just
99:31 - to double check
99:33 - reopen our gui sure enough
99:36 - all right that was at 12 o'clock and now
99:38 - it's not it was at 0
99:40 - db all right so that is working as
99:42 - expected
99:44 - cool so we have successfully connected
99:46 - our
99:47 - uh default sliders to their parameters
99:50 - and they
99:51 - save and load whenever we open and close
99:53 - the gui cool
99:55 - let's make a commit of that connected
99:59 - sliders to parameters
100:02 - all right that's where we added the
100:03 - attachments here's where we resave
100:05 - something in the filter graph
100:07 - here is where we initialized all those
100:09 - attachments
100:14 - our next goal is to display the response
100:17 - curve of the filter
100:19 - so to do that we need to give the editor
100:21 - its own instance of the mono chain
100:24 - and to do that we need to make all of
100:26 - the stuff that makes the mono chain
100:28 - public so we will move all of those type
100:30 - aliases
100:31 - out of the audio processor and also make
100:34 - the chain positions enum public
100:36 - so head on over to public to a plugin
100:39 - processor dot h
100:40 - we're gonna grab all this stuff we're
100:42 - gonna move it to the top
100:44 - put it uh below your chain settings and
100:47 - then grab that
100:48 - edom chain positions copy this guy
100:52 - and put that here oh now we're gonna
100:54 - have some duplicate definitions so let's
100:56 - get rid of this
100:58 - and get rid of this and
101:01 - clean it up head on over to
101:04 - plugineditor.h
101:06 - and we need to give ourselves an
101:07 - instance of this we can put that right
101:09 - here
101:10 - mono chain mono chain
101:13 - all right let's just give her a little
101:15 - compile test
101:16 - make sure it's cool all right cool build
101:18 - succeeded
101:19 - let's make a little commit of that gave
101:22 - editor
101:23 - its own mono chain stage stage
101:28 - now we're going to start drawing the uh
101:30 - response curve
101:32 - all right head on over to
101:34 - plugineditor.cpp
101:35 - we're gonna go to the paint function and
101:37 - that's this guy right here now the first
101:39 - thing we're gonna do
101:40 - is fill it with black so get rid of this
101:44 - actually i'm gonna we're gonna use the
101:46 - juice name space right here
101:48 - using namespace juice
101:51 - so now we don't have to type juice colon
101:52 - colon everywhere
101:54 - let's get rid of this colors
101:57 - black all right we're gonna fill it with
101:59 - a black
102:00 - um black background all right let's get
102:02 - rid of this stuff as well
102:04 - first we need the area that we will draw
102:06 - the response curve in
102:07 - auto bounds equals get local bounds
102:11 - and our response area was this thing so
102:13 - let's copy that
102:16 - and then our width is something that we
102:17 - will also need auto w
102:19 - equals response area dot get width
102:23 - next we will need the individual chain
102:25 - elements
102:26 - and then we will call the function get
102:29 - magnitude for frequency
102:30 - for each filter in the chain so let's
102:32 - get our
102:34 - get our chain elements
102:39 - so to use that function we are going to
102:41 - need the sample rate we can get that
102:43 - from the
102:43 - audio processor to use that get
102:46 - magnitude for frequency function
102:48 - so this is where we can do audio
102:49 - processor to get sample rate
102:52 - and we are going to need a place to
102:54 - store all of these magnitudes
102:55 - which are returned from that function as
102:58 - doubles
102:59 - now we are computing one magnitude per
103:02 - pixel so let's pre-allocate the space
103:04 - that we need
103:05 - now we just need to iterate through each
103:07 - pixel and compute the magnitude at that
103:09 - frequency
103:11 - now magnitude is expressed as gain
103:14 - units and gain units are multiplicative
103:17 - unlike decibels which are additive so we
103:19 - need a starting gain
103:20 - of 1. now we just need to call the
103:23 - magnitude function for a particular
103:25 - pixel
103:26 - mapped from pixel space to frequency
103:29 - space
103:29 - and we will use a special helper
103:31 - function for that
103:33 - called map to log base 10. we're mapping
103:36 - the normalized pixel number to its
103:38 - frequency within the human hearing range
103:40 - that looks like this our value our
103:43 - normalized value
103:45 - oops let me be consistent with how i'm
103:46 - doing my casting
103:48 - and our minimum range is 20 and our max
103:51 - range is 20
103:52 - 000. all right now we just need to call
103:56 - the magnitude function with this
103:58 - frequency
104:00 - uh what's it called get magnitude for
104:01 - frequency function
104:03 - and multiply the results with our
104:05 - magnitude right here
104:06 - okay so we just need to check if a band
104:09 - is bypassed
104:09 - because if the band is bypassed we're
104:11 - not going to do that multiplication
104:13 - so if mono chain dot is bypassed
104:17 - all right if it's bypassed ignore it all
104:19 - right if it's not bypassed then we're
104:21 - going to do mag
104:22 - times equals and here's where we do the
104:25 - peak band
104:26 - coefficients and this is where we're
104:28 - going to call that get magnitude for
104:29 - frequency
104:30 - all right our frequency is this thing
104:33 - right here
104:34 - and our sample rate is this thing we
104:37 - just need to do the same thing for every
104:39 - other filter in the low and high cut
104:41 - chains
104:42 - all right so i'm going to do that now
104:45 - and the thing to remember is that the
104:46 - low cut if you remember how it's defined
104:50 - it is defined as a its own processor
104:53 - chain so we need to get each individual
104:55 - element of it versus getting it from the
104:57 - mono chain
104:59 - all right so i've got that for the low
105:01 - cut so i'm just going to do that for all
105:03 - four of the filters in the low cut
105:05 - and then do the same thing for the high
105:06 - cut
105:10 - all right now we just need to convert
105:11 - this magnitude into decibels and store
105:13 - it
105:15 - now that we've got our magnitudes we can
105:17 - convert this
105:18 - uh vector of magnitudes into a path
105:21 - and we can build this path from the
105:23 - vector of decibels and then draw it okay
105:26 - so let's do the first thing let's build
105:27 - our path
105:28 - now we need to map our decibel value to
105:31 - the response area
105:33 - and a helper lambda will do the job we
105:35 - could also use a free function but
105:37 - i'm right here so i'm just going to do
105:38 - it right here let me define some
105:41 - maximum and minimum positions in the
105:43 - window
105:46 - i'm going to use jmap to map from my
105:48 - source input which is a range of
105:50 - negative 24 to plus 24.
105:53 - and my output is where it's going to map
105:55 - to the window position
105:56 - now i came up with this negative 24 and
105:58 - plus 24 because
106:00 - the peak control can go from plus 24 to
106:05 - negative 24. so i want my response curve
106:07 - the window for it to have a range of
106:10 - plus 24 to negative 24.
106:12 - so that's where these figures come from
106:14 - all right
106:15 - so let's see output min output max
106:19 - all right now we can start a new subpass
106:22 - a new sub path
106:23 - with the first magnitude start new sub
106:27 - path we're going to start it at
106:28 - our response area dot get x this is the
106:32 - left
106:32 - edge of the component and the first
106:35 - value is going to be
106:36 - map mags.front
106:40 - so we're going to run the first value in
106:41 - our magnitudes vector
106:43 - through this map function and we're
106:45 - mapping our decibels
106:46 - to screen coordinates now we just need
106:49 - to create
106:50 - line twos for every other every other
106:52 - magnitude
106:54 - all right response curve line two and we
106:58 - want to go to
106:59 - response curve uh response area
107:04 - get x plus i and then we want to do
107:08 - map mags i
107:11 - now let's give ourselves a nice
107:13 - background border and then draw the path
107:16 - g.draw rounded rectangle we're going to
107:19 - draw that response area
107:21 - it wants a float rectangle corner size
107:24 - let's use a corner size of four
107:25 - and a line thickness of one now we can
107:28 - uh
107:29 - let's use a white color all right g dot
107:31 - set color
107:33 - and now we can draw our path i'm gonna
107:36 - do a path
107:37 - stroke type of two this is gonna draw a
107:40 - rounded rectangle with a line thickness
107:42 - of one
107:43 - one pixel wide this is gonna draw with a
107:45 - line thickness of two pixels wide
107:47 - all right let's run this and let's see
107:49 - what we get
107:51 - let's open our gui all right cool we
107:53 - have a nice flat line inside a rounded
107:56 - rectangle right at the middle
107:58 - okay now why aren't we seeing anything
108:00 - if we drag these sliders
108:04 - this is because these sliders only
108:06 - update the filter chain in the audio
108:08 - processor
108:09 - we also need to make them update the
108:10 - filter chain in the editor because it's
108:12 - a different chain
108:13 - so let's do that next okay we need to do
108:16 - that whenever the parameters change
108:18 - all right oops i'm going to leave that
108:19 - open so that when this
108:22 - this opens automatically we get to see
108:24 - our gui every time we run it
108:27 - all right so we are going to set up the
108:29 - filter chain in the editor
108:31 - to follow the parameters next okay make
108:34 - your way to the
108:35 - plugin editor dot h now the easiest way
108:39 - to respond to parameter changes is to
108:41 - register as a listener to
108:43 - all of them so let's do that
108:46 - we're going to inherit from audio
108:49 - processor parameter listener
108:53 - now let's take a look at the
108:54 - documentation for this guy
108:59 - now it says here important note this
109:01 - will be called synchronously whenever a
109:02 - parameter changes and many audio
109:04 - processors will change their parameters
109:06 - during their audio callback
109:07 - this means that this this means that not
109:10 - only does your
109:11 - handler code need to be completely
109:13 - thread safe it's got to be very
109:14 - fast and avoid blocking okay
109:18 - okay what this means is that callbacks
109:21 - are going to happen
109:21 - on the audio thread most likely and this
109:24 - means we cannot do any gui stuff
109:26 - in any of these callbacks like update
109:28 - the editor's filter chain here
109:29 - and trigger a repaint but what we can do
109:33 - is set an atomic flag that the timer can
109:36 - check
109:36 - and update based on that flag so that's
109:38 - what we are going to do
109:39 - so first things first let's copy these
109:41 - callbacks all right let's go back to our
109:43 - editor
109:44 - all right we'll put them right here
109:46 - they're no longer virtual because we are
109:48 - deriving from them
109:49 - let's mark this as override all right
109:51 - let's go
109:52 - add um let's add our timer we're going
109:54 - to inherit from that so that way we can
109:56 - do the atomic flag thing i'm talking
109:57 - about
109:58 - juice timer now we need to include the
110:01 - necessary
110:02 - callback we go to timer we can see the
110:05 - callback is right here
110:06 - virtual void and it's pure virtual so we
110:08 - have to implement it
110:10 - let's see all right so in this timer
110:12 - callback we are going to query an atomic
110:14 - flag
110:15 - to decide if the chain needs updating
110:17 - and our component
110:18 - needs to be repainted so let's add that
110:21 - atomic flag
110:22 - right here below our processor
110:24 - parameters
110:25 - changed it's a good name for it give it
110:28 - a initial value of false
110:30 - all right now we don't care about um if
110:32 - parameter gestures happen
110:34 - so we can just give that an empty
110:36 - implementation the callback parameter
110:38 - that matters
110:39 - is this one right here all right now
110:41 - we're going to set up the
110:43 - callbacks all right below our um
110:46 - we're going to do this below our resized
110:48 - function in the
110:50 - editor.cpp so first things first let's
110:53 - um
110:54 - let's set up that parameter value
110:56 - changed callback
110:58 - parameter value changed and the only
111:01 - thing we want to do
111:02 - is set our atomic flag to true
111:06 - next we are going to just check if it's
111:09 - been changed in the callback
111:11 - in the timer callback if parameters
111:15 - changed dot and then here is where we
111:17 - want to see if it's
111:18 - true and if it is we want to set it back
111:20 - to false so that way we don't
111:22 - um we don't want to you know just like
111:24 - always be doing this because if we don't
111:25 - make any changes to the parameter we
111:26 - don't need to refresh the curve
111:28 - okay we're going to call that guy we
111:30 - want the new value
111:31 - if it is if our parameters changed is
111:35 - true then we want it to be set to
111:38 - false okay now if the parameters changed
111:41 - we need to update the mono chain
111:45 - from the ap vts we need to signal a
111:48 - repaint
111:49 - and yeah we need to signal a repaint so
111:51 - a new response curve is drawn
111:53 - unfortunately all the stuff that updates
111:55 - the mono chain from the ap vts
111:57 - is private in the audio processor so we
112:00 - need to do some refactoring
112:01 - first before we can do this and then
112:04 - do this all right so let's do that next
112:08 - all right head on over to
112:10 - pluginprocessor.h
112:11 - now all of these uh where are those
112:14 - functions
112:15 - okay yes all right all of these update
112:17 - functions
112:18 - need to be made into free functions so
112:21 - if they use member variables
112:22 - those member variables need to become
112:24 - function arguments
112:25 - so we're going to start with the
112:26 - function that updates the peak filter
112:29 - all right so what we will actually do is
112:32 - um we're going to start by turning the
112:33 - update coefficients function
112:35 - into a free function and then that way
112:38 - this update
112:39 - peak guy can uh be turned into producing
112:43 - a peak
112:44 - we can change it to produce a peak
112:46 - filter okay
112:48 - so let's grab these guys we're going to
112:50 - copy these we're going to move these
112:51 - up to the top here and put it below your
112:55 - chain position stuff
112:56 - and we can get rid of that static
112:58 - keyword and now we can make a
113:01 - uh function that returns coefficients
113:04 - and it makes a peak filter from chain
113:07 - settings and the sample rate
113:10 - all right let's go over to our plugin
113:11 - processor dot cpp
113:13 - we're going to go to our update peak
113:16 - filter function
113:18 - all right and this is where we're going
113:19 - to implement that free function because
113:21 - it's
113:21 - just convenient to put it right there
113:23 - all right so let's do
113:24 - coefficients make peak filter
113:27 - and this is where we want our chain
113:29 - settings and our sample rate
113:32 - okay so all we need to do is just return
113:35 - this call
113:36 - and instead of doing get sample rate we
113:39 - just need to do
113:39 - sample rate like that okay now we need
113:42 - to
113:43 - use that helper function here oh and
113:45 - this needs to be um
113:46 - we need to change this as well we can
113:48 - just comment that out
113:51 - all right so we just need to call this
113:53 - function
113:54 - here all right let's comment this out
113:57 - and call it auto peak coefficient
114:02 - equals make peak filter chain settings
114:06 - get sample rate and let's do a quick
114:08 - test to make sure that everything
114:10 - um works as expected still
114:14 - all right we're going to make sure the
114:14 - peak filter works
114:20 - let me open up the high pass
114:25 - i hear some sleeping let's do a boost
114:31 - sounds like it's working
114:35 - all right cool all right next we will
114:38 - get the editor to use
114:39 - uh this function let's clean this up uh
114:42 - let's do a little commit
114:43 - since this is kind of getting into you
114:45 - know micro code surgery
114:47 - that sort of thing let's get rid of that
114:49 - save this let's go over here
114:50 - we will say refactored how peak uh
114:53 - refactored
114:54 - peak coefficient generation all right
114:57 - that's where we did that
114:58 - okay we migrated this stuff up to there
115:00 - and made this uh make peak filter helper
115:02 - function
115:05 - yes uh then we implemented that stuff
115:08 - and started using it
115:10 - then here we implemented from uh
115:12 - parameter listener and timer and added
115:14 - the
115:15 - necessary callbacks and the atomic flag
115:20 - and then here is where we uh displayed
115:22 - our
115:24 - response curve oh that i forgot to
115:26 - commit that stuff so let's do that first
115:29 - all right because we want that step
115:30 - separated let's see here is where we
115:32 - drew our response curve
115:35 - let's add it let's do that first
115:38 - rendered
115:38 - response curve that's going to be this
115:41 - function
115:43 - that's all that is that's all that is we
115:46 - definitely want to separate that stuff
115:47 - because that was a big chunk of code
115:48 - that we wrote
115:49 - okay so i was saying this is where we um
115:53 - we factored the um let's see
115:56 - yeah what did we do we refactored how
115:58 - peak functions
115:59 - uh how peak coefficients how peak
116:01 - coefficients are generated refactored
116:04 - how peak coefficients are generated
116:07 - all right and this is where we also did
116:09 - that part as well and then here is where
116:11 - we
116:12 - set up for uh responding to parameter
116:15 - changes in the editor okay this is where
116:18 - we inherited from those things this is
116:20 - where we implemented the callback and
116:21 - the atomic flag that we will be checking
116:23 - and here is where we um updated that
116:26 - flag and then
116:27 - queried that flag cool
116:30 - all right make your way over to the
116:33 - editor
116:34 - dot cpp um specifically the constructor
116:38 - yes how can i can i help you okay
116:41 - now that we can update any peak filter
116:43 - link with the chain settings we need to
116:45 - listen for when
116:46 - the parameters actually change so let's
116:49 - grab all the parameters from the audio
116:51 - processor and add our cells as a
116:52 - listener to them
116:55 - all right and now let's just loop
116:56 - through them uh this function returns
116:59 - an array of pointers now if we register
117:03 - as a listener we need to deregister as a
117:06 - listener
117:07 - we'll do this same chunk of code here
117:11 - the new param remove listener
117:14 - this okay so let's go to our timer
117:16 - callback
117:17 - now that we are listening to our
117:18 - parameters okay
117:20 - if the parameter changed we need to
117:23 - update the mono chain so let's do that
117:25 - let's grab the chain settings let's make
117:26 - new coefficients and then let's update
117:28 - our mono chain and then
117:30 - repaint okay very simple auto
117:33 - chain settings let's make our
117:36 - coefficients
117:37 - for the peak band all right our chain
117:40 - settings
117:42 - and our sample rate and now we can
117:44 - update our
117:45 - chain's coefficients our old ones are
117:48 - the monochain
117:49 - dot get and we want the peak
117:53 - and then our replacements are going to
117:54 - be these peak coefficients
117:56 - all right and now we just repaint
118:00 - oh i forgot to call uh coefficients
118:03 - that's what we needed there we go
118:05 - all right let's give that a test see if
118:07 - we are there yet
118:10 - all right so if i adjust this are we
118:13 - seeing anything
118:14 - not seeing anything
118:20 - all right soon enough okay we'll get
118:22 - there
118:23 - we can add a debug statement ram's
118:26 - changed
118:27 - and we should see something down here if
118:30 - we move the sliders
118:32 - and we are not okay that is because
118:37 - that is because we did not start our
118:39 - timer
118:40 - okay so we need to go up to our
118:42 - constructor and start our timer
118:44 - all right let's do a 60 hertz refresh
118:46 - rate i knew there was something i was
118:49 - forgetting
118:49 - okay let's try this now this should work
118:53 - perfectly all right so i'm just going to
118:56 - adjust the gain
118:58 - all right look at that
119:02 - all right so now we need to get the cut
119:04 - filters uh the cut filter functions
119:07 - usable by the editor so head on over to
119:10 - your plugin processor dot h
119:13 - and we need to jump down to all of these
119:15 - update functions
119:17 - okay we need to make all of these public
119:19 - so just
119:20 - grab the grab these template functions
119:24 - all right and we're just going to cut
119:25 - them and move them up here
119:28 - we can put them after our uh make peak
119:31 - filter functions
119:32 - uh let's do a little build just to make
119:34 - sure that um we don't have to change
119:36 - anything
119:37 - all right those so those could have been
119:38 - public from they could have been free
119:39 - functions from the get-go
119:41 - so now we just need to add two helper
119:44 - functions
119:44 - for producing the coefficients all right
119:47 - so
119:48 - we're going to basically do the same
119:49 - thing we did this with this make peak
119:51 - filter
119:52 - and we're going to be able to call them
119:54 - from here
119:55 - so we can put them right here if we want
119:57 - to implement these functions in header
119:59 - files that are included
120:01 - in two places such as the uh plugin
120:04 - processor is included in
120:05 - plugin processor.cpp and
120:08 - plugineditor.cpp
120:09 - and plugineditor.h if we want to do that
120:12 - we need to use the inline keyword
120:13 - otherwise the compiler will produce a
120:15 - definition for this function
120:17 - everywhere that this header file is
120:18 - included and the linker will not know
120:21 - which
120:21 - compiled cpp file to use for the
120:24 - definition
120:25 - so that's why we're going to write
120:26 - inline auto i'm not sure what type to
120:29 - specify for
120:30 - what's being returned make low cut
120:32 - filter
120:33 - we need our chain settings again we need
120:36 - our sample rate
120:38 - and then we're going to use our filter
120:40 - design function again
120:42 - i can just go copy this from the plug-in
120:45 - processor
120:46 - that's uh this thing right here let's
120:48 - see i'm doing
120:49 - low cut so i need this thing and here's
120:53 - our sample rate
120:55 - all right let's just do a quick build on
120:56 - that make sure that we're not getting an
120:58 - error
120:59 - cool all right let's do the same thing
121:00 - with the high cut
121:02 - go back to plug-in processor i'm going
121:04 - to copy the uh
121:06 - update high cut filter is going to copy
121:07 - this code over
121:09 - oops this is what we want that goes here
121:12 - this is get
121:13 - this is just our parameter sample rate
121:16 - all right and we need a return like that
121:20 - format that properly and do a little
121:23 - build make sure we don't have an error
121:25 - okay cool now we just need to update our
121:28 - call sites
121:28 - head on over to the update low cut
121:31 - filter function
121:32 - and let's change this to make low
121:36 - cut low cut filter
121:40 - chain settings get sample rate
121:44 - same thing for the high cut we're just
121:47 - going to do make high cut get sample
121:50 - rate
121:51 - all right let's do a quick test before
121:52 - we get the editor involved
121:55 - all right this should still work
121:59 - okay rolling off all the bottom as
122:02 - inspected
122:03 - for this one rolling off all the top end
122:08 - perfect let's make a commit of that
122:11 - refactor
122:12 - because it's good to good to have it
122:14 - okay this is where we connected our
122:15 - parameters and
122:16 - got the display updating all right
122:18 - here's how we updated
122:20 - uh let's see this is refactored how
122:25 - cut filters are created that's what
122:28 - happened here
122:29 - get rid of that code same thing happened
122:31 - here
122:33 - and now this is where we um updated
122:37 - let's see this is where the um gui
122:39 - listens
122:40 - to param changes now
122:43 - cool all right we've tested our editor
122:46 - now let's update the response curve all
122:49 - right so go to your plugin editor dot
122:51 - cpp
122:52 - go to the timer callback
122:55 - and we're going to do uh the same
122:57 - coefficient update that we did here
122:59 - so auto low cut coefficient
123:02 - equals make low cut filter chain
123:05 - settings
123:06 - sample rate um let's cache that sample
123:09 - right now i'm just
123:10 - i'm feeling a little lazy i'm just going
123:11 - to copy that this can all be refactored
123:13 - later
123:13 - so we don't dry so we don't repeat
123:16 - ourselves we always want to not repeat
123:18 - ourselves
123:18 - dry don't repeat yourself okay here we
123:20 - go auto
123:22 - high cut coefficient
123:26 - make high cut filter chain settings
123:29 - copy that thing right there all right
123:31 - now we can update our cut filter
123:33 - our chain is going to be the mono chain
123:36 - um we want the
123:37 - low cut coefficients are going to be the
123:40 - low cut coefficients
123:42 - and our slope is going to be the chain
123:45 - settings slope low cut
123:48 - and then our update our cut filter we
123:51 - can do the
123:52 - high cut mono chain.get we want the high
123:56 - cut position we want the high cut
123:58 - coefficient
124:00 - and with the high cut slope okay let's
124:02 - test it out
124:04 - all right so i'm going to adjust this
124:07 - okay we are drawing outside of our
124:09 - response area
124:12 - we are drawing though that's cool so the
124:15 - response area should be its own
124:17 - component because
124:18 - components cannot draw outside of their
124:20 - balance unless you set a flag that
124:22 - allows that
124:23 - we will do that next but this is a good
124:25 - sign that our display is responding to
124:27 - controls and that what we are hearing
124:29 - sounds like what we are seeing or the
124:32 - other said the other way what we are
124:33 - seeing
124:34 - sounds like what we are hearing okay
124:40 - [Music]
124:48 - cool all right let's commit that
124:52 - response curve now
124:55 - shows cut filter response
125:00 - cool
125:04 - migrating this code from the editor to a
125:06 - separate component
125:07 - is relatively easy we need to inherit
125:10 - from the things the editor is inheriting
125:13 - and yeah we're really not writing any
125:16 - new code
125:16 - really we're just refactoring what we
125:18 - already have let's go to our
125:20 - header file first of all let's go up
125:22 - here now we need to
125:24 - basically inherit from all this stuff so
125:26 - let's do that first let's do struct
125:29 - uh response curve let me spell it right
125:33 - it's a
125:34 - component and then we need to inherit
125:37 - from these things
125:38 - okay we're gonna need the same uh
125:40 - basically the same constructor
125:41 - destructor pattern
125:43 - and we're gonna need to migrate over all
125:45 - of those callbacks let's just copy these
125:50 - all right we're not going to need this
125:51 - comment let's go to our cpp file
125:54 - now our callback migration we're going
125:56 - to need our parameter changed in our
125:57 - timer callback
125:58 - so i'm just going to copy these two guys
126:01 - directly move them up to the top
126:05 - put them up here and just change this to
126:08 - response
126:09 - curve component same for that we get a
126:12 - bunch of error messages
126:14 - it's fine we'll fix those in just a
126:15 - second and we need to migrate over the
126:17 - code
126:18 - that registered as a listener so let's
126:20 - do that
126:22 - here let's give ourselves uh let's see
126:25 - we need to
126:26 - initialize we need to provide ourselves
126:28 - with that same um
126:30 - same the same thing okay now we can
126:33 - initialize that guy
126:36 - audio processor all right now
126:39 - we need to migrate over the code that
126:41 - registered as a listener
126:43 - okay so let's do that next where was
126:46 - that found
126:46 - that was all of this stuff right here
126:50 - it's name for the timer we need that too
126:52 - those guys go there
126:54 - we need the destructor we need that code
126:57 - all right so let's copy this okay we're
127:00 - going to need a paint function
127:02 - so let's declare one of those void paint
127:06 - we can just migrate over the entire
127:08 - paint function from the plugin editor
127:11 - so we can literally just rename this
127:14 - i'm not going to do that though i'm
127:15 - going to copy it and do the proper thing
127:18 - but literally we can just literally copy
127:19 - this whole thing and put it down here
127:22 - we'll fix all those variables in just a
127:23 - second
127:25 - all those error messages number eight we
127:27 - need to migrate over the parameter
127:29 - changed atomic
127:30 - value so let's grab this from here
127:34 - that should go here we also need to
127:36 - migrate over our chain
127:38 - now once we've done these things we need
127:40 - to we need to
127:42 - give ourselves an instance so let's do
127:44 - that um
127:45 - i'm just going to put that here response
127:48 - curve
127:49 - component and then we can also get rid
127:51 - of our chain
127:52 - we can also get rid of our atomic in our
127:55 - plugin editor.cpp we need to go down to
127:58 - our function here and add it
128:00 - as one of our components all right now
128:03 - we need to initialize it
128:05 - so let's go do that in our um
128:08 - editor constructor pretty sure it's
128:10 - going to tell me that it needs to be
128:12 - initialized before
128:13 - the other response curve component audio
128:16 - processor
128:17 - yes this needs to be initialized before
128:21 - uh the attachment
128:25 - for all the attachments finally we need
128:27 - to give it some bounds so let's go to
128:29 - our plug-in editor resized function
128:31 - and now we can actually use our response
128:33 - area
128:35 - cool all right so let's go to our plugin
128:37 - editor
128:38 - all right this is not going to inherit
128:40 - from uh parameter listener or timer
128:42 - anymore
128:43 - so we don't need any of these callbacks
128:46 - um we don't need this atomic we don't
128:49 - need
128:50 - uh the chain so that means we can get
128:52 - rid of these
128:54 - uh get rid of those functions as well
128:56 - all right so let's go to our plugin
128:58 - editor.cpp
129:00 - uh we are no longer listening for those
129:02 - and we're not a timer anymore
129:04 - so those go away same for the destructor
129:06 - stuff
129:07 - and then we're not doing any of this so
129:09 - we can just continue
129:11 - filling it entirely with black so we can
129:14 - get rid of
129:14 - all of this stuff and then we don't need
129:18 - our
129:18 - this callback that disappears
129:23 - all right and i believe that's most of
129:25 - the errors let's build it and see what
129:26 - it tells us
129:28 - that may have been it all right yep okay
129:31 - all right
129:32 - so let's run and test it all right so
129:34 - this is tiny for some reason that's way
129:36 - smaller than we wanted
129:38 - let's go to our resized function uh
129:40 - bounce remove from top
129:42 - bounds dot get height oh you know why
129:45 - it's because um our response area here
129:49 - in this um our response area should not
129:52 - be
129:53 - 33 of the actual component it should
129:55 - just be the get local bounce so i'm just
129:57 - going to get
129:57 - do that and then get rid of this line
130:01 - all right now if we run it we should be
130:03 - good to go
130:07 - okay cool so let's check if we are
130:09 - drawing outside of our bounds anymore
130:11 - and no we are not so that's fantastic
130:15 - i told you that would be easy okay let's
130:17 - commit that change
130:19 - oh created response curve component
130:24 - that's a fairly uh fairly aggressive
130:27 - amount of code surgery here's our
130:29 - response curve component with all the
130:31 - good stuff in it
130:32 - here's where we gutted the editor
130:37 - same for right here all right we've come
130:40 - a long way we've done a lot of stuff
130:46 - okay we are going to customize the
130:48 - slider visuals now
130:50 - for this slider class i want it to show
130:52 - the following okay i want to see the min
130:54 - and max range at either end of the
130:56 - slider and i want to see the parameters
130:58 - value in the center of the slider
131:01 - i want the slider to have some
131:02 - customized visuals outside of those
131:04 - pieces of text
131:05 - so i'm going to change this slider class
131:08 - let me go to my editor first i'm going
131:10 - to change this
131:10 - slider class right here to have a custom
131:13 - look and feel that will do those things
131:15 - so a bit of planning before we actually
131:17 - start
131:18 - and the juice look and feel system works
131:22 - as follows
131:23 - let me jump to that okay
131:26 - here we go all right look and feel
131:28 - methods for these slider clasps
131:30 - now the look and feel system works as
131:32 - follows
131:33 - okay inside the component paint function
131:35 - let me go to slider or paint
131:37 - all right here's what happens in the
131:38 - look and feel system
131:41 - when you're painting your components now
131:42 - things are a little bit different with
131:43 - the slider paint but
131:44 - the general practice works like this in
131:47 - your components paint function
131:48 - you're going to call get look and feel
131:51 - and then
131:52 - inside of that you're going to call
131:55 - one of the look and feel member
131:56 - functions sorry in the look and feel
131:59 - class
132:00 - there are several member functions for
132:02 - drawing different things and it's the
132:04 - way it's organized is kind of strange
132:06 - basically like we're in the slider class
132:08 - the slider has look and feel methods
132:10 - there's a look and feel bass class which
132:12 - inherits from all of these
132:15 - narratives from all these things i can
132:17 - pull it up in the docs and you'll see
132:18 - what i'm talking about if we go over
132:20 - here
132:21 - okay so you can see the look and feel
132:22 - class inherits from all of these
132:24 - different base classes you know button
132:25 - has look and feel methods
132:27 - text editor has their own tree view
132:30 - slider
132:31 - label tool tip window okay
132:34 - so what happens is the components they
132:36 - get their look and feel
132:37 - instance and then they call one of these
132:39 - look and feel methods
132:40 - so let me go to the slider.cpp and show
132:43 - you what i'm talking about
132:44 - in the sliders case it uses a pimple to
132:47 - deal with the implementation so i'm
132:49 - going to go to
132:50 - that so we can see what's going on okay
132:52 - so
132:53 - as shown here it's using a look and feel
132:56 - instance and it is calling
132:58 - one of those look and feel member
133:00 - functions okay
133:02 - i'll go back to this so we can see what
133:03 - i'm talking about uh slider look and
133:06 - feel methods
133:07 - okay here we go draw a linear slider the
133:09 - thumb
133:10 - if it's like a slider that's got
133:12 - multiple thumbs and stuff on it if it's
133:13 - a rotary slider a button
133:15 - where to draw the text box what kind of
133:18 - text box to
133:19 - display that sort of thing okay so it's
133:22 - going to call one of these
133:23 - member functions and then inside this
133:25 - member function is where all that stuff
133:27 - gets painted
133:29 - okay so for example the vertical slider
133:32 - is going to call get look and feel in
133:33 - the paint function if i go back here
133:36 - all right here's the get look and feel
133:37 - it's going to pass it to the pimples
133:39 - paint function
133:41 - all right and then that's going to call
133:43 - draw linear slider
133:45 - okay on that returned object okay now
133:48 - the idea is that anything you want to
133:49 - draw on the actual
133:50 - slider part of the component is drawn
133:53 - with that look and feel member function
133:56 - everything that is drawn outside of it
133:58 - is drawn in the component's paint
134:00 - function
134:01 - okay regardless of that i don't want to
134:02 - get lost in those
134:04 - details as i said everything that is
134:06 - drawn outside of
134:08 - the slider area is going to be drawn
134:11 - in um it's going to be drawn in the
134:14 - paint function everything that's part of
134:16 - the slider is going to be drawn in the
134:18 - get look and feel draw rotary slider
134:20 - function okay
134:21 - now i want the parameter value to be
134:23 - displayed in the center of the slider
134:24 - so for this reason i am going to display
134:28 - that in the look and feel member
134:29 - function since i consider it to be part
134:31 - of the slider itself
134:33 - okay i'm going to draw the min and max
134:35 - parameters in the paint function
134:38 - and call that look and feel member
134:39 - function from the paint function
134:41 - okay i know i need a bit of room for the
134:43 - text labels showing the range to be
134:45 - within this component
134:46 - so that means the actual area that the
134:48 - slider will be drawn in needs to be
134:50 - smaller
134:51 - than the component itself i'm also going
134:54 - to want to use a uniform text height for
134:56 - all of the text
134:57 - displayed here so i'm going to need a
134:59 - function that's going to give me that as
135:00 - well
135:01 - okay now the reason for this is because
135:03 - my paint function and the look and feel
135:05 - member function
135:06 - will need to call this get text type
135:08 - function since i'm going to be drawing
135:10 - text
135:11 - in both places and i want it to just
135:14 - look consistent
135:15 - okay i also want to customize the suffix
135:17 - that is displayed for each parameter
135:19 - so this way i will see things like 2.85
135:23 - kilohertz or 12 db per octave
135:26 - all right we will figure out what to do
135:28 - for the quality parameter when we get to
135:29 - that stage
135:30 - since that doesn't have any units at all
135:32 - okay and then finally i'm going to need
135:34 - i'm going to need a parameter so that
135:37 - way i can get its value so let's go back
135:39 - to our plugin editor
135:40 - all right so we're going to just this
135:42 - class is going to have a lot of surgery
135:43 - done in it okay
135:45 - first let's rename this class and we're
135:48 - going to call this
135:50 - rotary slider with labels okay
135:53 - so the next thing we need is we need to
135:55 - give ourselves a parameter and a suffix
135:57 - like i had said
135:59 - so juice ranged audio parameter
136:03 - we're gonna do pointer to it the only
136:05 - the reason i'm using this thing
136:07 - is because this this is the base class
136:11 - for all of these um all of these guys
136:15 - even though and it derives from audio
136:17 - processor parameter and it contains a
136:19 - whole bunch of member functions that
136:21 - let me pull information out of this if i
136:23 - go take a look at it
136:24 - there's like let's see they're like i'm
136:27 - going to need these convert to
136:28 - zero to one and convert from zero to one
136:32 - that sort of thing and then there's a
136:33 - whole bunch of like you know get value
136:34 - and all this kind of stuff
136:36 - that it comes from the base class okay
136:38 - getting a little sidetracked some
136:40 - let's not get too lost in the minutia
136:42 - about that and just focus on following
136:44 - the code that is going to be written
136:46 - all right so there's my parameter i'm
136:47 - going to give myself a suffix
136:49 - all right now i'm going to update this
136:51 - constructor
136:53 - to initialize these two member variables
136:55 - all right and now
136:56 - let's let's populate that
137:00 - guy okay now we actually need a
137:04 - look and feel class okay we need an
137:06 - actual look and feel class that we can
137:09 - provide our um draw rotary slider
137:12 - function all right if we jump back over
137:15 - to
137:16 - um jump back over to this thing this is
137:19 - where i can
137:21 - go to that slider class here's the look
137:24 - and feel methods
137:25 - so we want to implement a rotary slider
137:28 - function okay so that's what we need to
137:30 - provide here let's make a look and feel
137:33 - all right these inherit from uh there's
137:35 - a few different versions we're going to
137:36 - inherit from the most recent one
137:38 - look and feel the version four and
137:42 - then this is where we are going to
137:44 - implement draw rotary slider
137:47 - so let's go to the slider class and
137:50 - look for that look and feel methods
137:54 - and we're gonna draw that uh rotary
137:56 - slider so just copy this guy
137:58 - declare it here override it and give
138:02 - ourselves a default implementation for
138:03 - right now
138:04 - and then make this um we gotta have that
138:07 - juice name space
138:09 - cool all right we have our look and feel
138:11 - object
138:12 - or our look and feel class we need to
138:14 - give ourselves an instance
138:17 - and then we can set that as our look and
138:20 - feel object
138:21 - set look and feel lnf
138:26 - all right now if we are setting a look
138:28 - and feel we have to remember to
138:30 - unset it in our destructor
138:35 - now as i said we're going to need a
138:36 - paint function because we're going to
138:38 - have some custom visuals
138:39 - so let's do that void paint
138:42 - i had said we're going to need the
138:44 - slider bounds which is going to be
138:46 - smaller than
138:47 - what we're actually going to it's going
138:49 - to be slightly smaller than the
138:50 - component bounds itself so we need
138:52 - some function that can provide that
138:55 - juice
138:56 - rectangle we're going to need that text
139:00 - height
139:00 - so um that's just going to be an integer
139:04 - and then we're going gonna need to get
139:05 - that display string
139:07 - okay that's what that's what's gonna
139:09 - show us that kilohertz
139:11 - or db per octave or
139:14 - um you know decibels if we're doing the
139:17 - gain slider okay so let's do
139:19 - juice string get display
139:22 - string like that okay now
139:25 - did all of these change if we go down to
139:27 - our plugin editor.h go way down here
139:30 - all of these rotary slider with labels
139:32 - yes they are okay
139:34 - all right now we need to initialize all
139:35 - of these guys so go to plugineditor.cpp
139:38 - go to the constructor
139:41 - and all these are declared before the
139:43 - response curve so they need to be
139:44 - initialized before the response curve
139:47 - okay now if you remember this thing
139:49 - needs um
139:51 - this thing needs uh what's it called it
139:54 - needs its parameter
139:55 - and then it also needs the suffix that's
139:58 - going to get displayed at the end
139:59 - so let's do the first one so that's
140:01 - going to be peak freak slider
140:03 - so the wants a parameter so let's
140:07 - use our ap vts to get a parameter
140:12 - and we already know the name this is the
140:13 - peak frequency slider so it's going to
140:15 - be called peak freak
140:16 - and the suffix is going to be hertz
140:19 - capital h
140:20 - okay that's one slider we got to do the
140:23 - rest of them
140:24 - oh this one's a reference not a pointer
140:26 - so we different
140:27 - dereference that okay let's do the rest
140:29 - of these guys
140:34 - and then we need our our units all right
140:37 - this is decibels quality has no units
140:42 - frequency also frequency
140:45 - and then the decibels per
140:49 - oct same thing for this one
140:52 - okay if we build it we should not have
140:54 - any errors
140:57 - oh we have an error what's the problem
140:59 - what happened undefined symbol
141:01 - why did that give us an undefined symbol
141:04 - oh we're missing a pain function
141:06 - that's why okay let's go to our plugin
141:09 - editor dot
141:10 - um dot h and
141:13 - our paint function needs an
141:16 - implementation
141:17 - so just we'll just leave it empty for
141:18 - right now
141:20 - all right awesome build succeeded okay
141:23 - so if we run this
141:24 - we're not going to our sliders are going
141:26 - to be blank because their look and feel
141:28 - is
141:29 - uh null is um drawing this
141:32 - our pain function is empty okay so
141:35 - that's why we don't see any sliders
141:36 - right now
141:37 - but that's okay because we implemented
141:38 - the skeleton so we can start drawing
141:40 - this stuff
141:40 - all right let's make a commit of that
141:43 - implemented
141:44 - skeleton for custom slider
141:48 - visuals all right here's our where we
141:51 - set up the parameters
141:52 - here's where we did all this code
141:53 - surgery it doesn't look like we wrote
141:55 - very much but
141:56 - it's a lot you know it's a fairly big
141:59 - design change
142:01 - first thing we are going to do is make
142:04 - this just a declaration and we will also
142:08 - do that with our
142:09 - draw rotary slider all right now let's
142:11 - go to our paint function
142:13 - which we need to implement now so let's
142:15 - put this at the top
142:17 - let's use one of these to add a space
142:20 - visual delineation so let's implement
142:22 - that paint function first
142:24 - floyd rotary slider with
142:27 - labels paint
142:30 - we're going to use that namespace trick
142:32 - okay we will begin by setting up the
142:34 - rotary slider to
142:35 - visually have a range of seven o'clock
142:39 - to five o'clock okay seven o'clock so
142:42 - here's 12
142:43 - we're gonna go seven all the way to five
142:46 - this is probably backwards for you with
142:48 - camera but for me
142:49 - i'm looking at it if i had a clock in
142:51 - front of me this would be
142:53 - seven o'clock and then this would be
142:55 - twelve uh five o'clock
142:56 - okay seven o'clock will be where the
142:59 - slider draws the value of zero
143:02 - five o'clock will be where it draws the
143:03 - value of one so let's
143:05 - start by setting up some angles that
143:07 - represent seven o'clock and five o'clock
143:09 - and remember that twelve o'clock is zero
143:12 - degrees and we have to use radians here
143:14 - which is annoying auto start ang
143:20 - equals degrees to radians thank
143:23 - thankfully that function exists okay we
143:25 - want 180.f
143:27 - plus 45 degrees
143:30 - all right so this is 12 this is gonna be
143:34 - 180
143:34 - and then we're gonna go halfway uh so
143:38 - it's more like 7 30 not seven
143:40 - but either way you know like this this
143:42 - would be nine o'clock
143:43 - this is six o'clock so 7 30 is
143:46 - 45 degrees away okay that's the start
143:49 - angle
143:49 - our end angle is going to be going this
143:51 - way and because we need it to be bigger
143:53 - than this side we have to go
143:54 - one circle around which is two pi and
143:57 - then
143:58 - go 180 minus 45. okay
144:02 - so auto and equals
144:06 - uh this same value but going
144:10 - the other way and then added a um added
144:13 - with a full
144:14 - rotation now the
144:17 - draw rotary slider function wants a
144:19 - normalized value
144:21 - passed to it so we will use the sliders
144:23 - range for that
144:24 - and then even though we haven't
144:25 - implemented this let's prepare for this
144:27 - and just assume we'll be drawing the
144:29 - rotary part of the slider inside the
144:31 - slider bounce so auto slider bounds
144:34 - equals get slider bounce okay let's
144:37 - implement that
144:38 - now all right let's put that right here
144:42 - i remember this is const oh let's just
144:44 - make it return local bounds for right
144:46 - now we will
144:46 - adjust this later so we have some basic
144:49 - information we can call the look and
144:51 - feel function
144:52 - now so get our look and feel
144:55 - and now draw rotary slider and now we
144:58 - just start filling this in okay first
145:00 - thing is g
145:01 - for the graphic context x is going to be
145:04 - our slider bounds
145:06 - x position same for the y
145:09 - same for the width same for the height
145:12 - our slider position proportional
145:16 - if you don't forget that we said we
145:18 - needed a normalized value here so we're
145:20 - going to
145:21 - map the slider's value we're going to
145:24 - map the
145:24 - slider's value from the start of the
145:28 - range
145:29 - to the end of the range and we need to
145:31 - map it from 0
145:32 - to 1 all right and then our start angle
145:36 - we already have that and our end angle
145:39 - and then our slider is
145:41 - this okay that's a lot
145:44 - that's an annoying function to look at
145:46 - and fill in all the blanks if you don't
145:47 - know what you're looking at
145:49 - all right the important thing is this
145:50 - one this line right here this is where
145:52 - we map
145:53 - our sliders this is where we turn our
145:56 - sliders value into a normalized value
145:59 - so now that we've done this we can
146:01 - implement the draw rotary slider
146:03 - function let's do that up here void
146:06 - look and feel draw rotary come on
146:09 - autocomplete
146:11 - all right let's put that all on its own
146:13 - lines
146:15 - all right we'll do the same using j uh
146:17 - namespace juice trick here's what we're
146:20 - going to do
146:21 - in this draw rotary slider class we're
146:23 - going to fill a circle
146:25 - and it's going to act as the slider
146:26 - background we're going to draw a border
146:27 - around that circle
146:29 - and we're going to convert the sliders
146:32 - normalized value to an
146:33 - angle in radians and that's going to be
146:36 - between the rotary start angle and the
146:38 - rotary end angle
146:39 - we're going to create a small vertical
146:41 - rectangle and then we're going to rotate
146:43 - it to the angle
146:44 - in radians and then draw it okay so
146:48 - let's do the first thing
146:49 - before we do anything else we need a
146:51 - bounding box
146:52 - here we've got our x y width
146:56 - height okay so let's first create some
146:59 - circles that represent the rotariness
147:01 - of the slider now for these colors i
147:04 - just used the
147:05 - app digital color meter
147:08 - and it lets me you know just pick some
147:10 - random colors that i like
147:12 - you know maybe i like this yellow color
147:13 - maybe i like this greenish color
147:16 - or this color right here that's what i
147:18 - use to pick my colors so i'm just going
147:19 - to type in what i picked prior
147:21 - and use them here so g dot set color
147:26 - i don't know what that looks like right
147:28 - now i just know that when i
147:30 - first sketched this project out i liked
147:32 - that
147:33 - after i found it somewhere okay so g dot
147:36 - fill ellipse
147:38 - and this is where we want fill the
147:39 - bounding box
147:41 - let's do the same thing again with a
147:42 - different color and we're going to draw
147:43 - the ellipse which is going to give us
147:45 - the border
147:45 - we said we were going to create let's
147:48 - take a look at that we'll just see some
147:50 - circles
147:51 - cool circles let's make a narrow
147:55 - rectangle that goes from the center of
147:56 - the bounding box
147:58 - up to the 12 o'clock position now if we
148:01 - want to rotate
148:02 - something that's going to be drawn we
148:04 - have to define it
148:06 - inside of a path so let's create a path
148:08 - now
148:09 - and i like using the rectangle member
148:11 - functions to define
148:13 - rectangles as opposed to using the
148:16 - rectangle class constructor
148:18 - that takes an x y width and height
148:20 - because it just seems
148:21 - easier to visualize mentally where
148:24 - things are going to be
148:25 - okay so i'm gonna do that rectangle
148:29 - float r the
148:32 - left and the right are gonna be a couple
148:35 - of pixels off
148:36 - of the center so we can do r dot set
148:38 - left
148:39 - so we can do center dot get x
148:43 - and then two pixels off of that we can
148:46 - do r dot set the right side
148:48 - center dot get x two pixels to the right
148:51 - of center
148:52 - and then we'll just make the top be the
148:55 - bounds
148:55 - top will be the top and the bottom will
148:57 - be the center okay so r dot set top
149:00 - this is going to be bounds dot get y
149:03 - and then r dot set bottom is going to be
149:08 - center dot get y now let's add it to our
149:12 - path p dot add rectangle
149:15 - now we get ready to rotate so the first
149:17 - thing we want to make sure
149:18 - is that this thing is less than this
149:21 - thing otherwise we'll get some weird
149:23 - explosions so let's just add a quick j
149:25 - assert for that
149:26 - rotary start angle it's less than rotary
149:29 - end
149:30 - angle this is what i was saying of how
149:32 - we needed to add
149:35 - a full cycle to it because otherwise we
149:38 - would have 180 minus 45 as our start
149:41 - or 180 plus 45 which is like 225 or
149:44 - something
149:45 - and then this one would give us like um
149:47 - 135 which is
149:49 - less than this it becomes a problem when
149:51 - we do our jmap
149:53 - so now we need to map our slider's
149:55 - normalized value to a radian
149:56 - angle right so we've got autoslider
150:01 - angle in radians is jmap
150:04 - are we are mapping from our slider
150:07 - position proportional
150:08 - from a value of 0.0 to 0.1
150:11 - and we're going to map it from i'm sorry
150:14 - that should be 0.f
150:17 - that's one dot f our target major in is
150:19 - going
150:20 - our target range min is going to be the
150:22 - uh
150:23 - rotary start angle and our end range is
150:27 - going to be the rotary
150:28 - end angle okay so we are mapping
150:31 - our normalized slider value to be
150:34 - between
150:35 - these two rotary positions which we
150:37 - defined here
150:39 - we can rotate the narrow rectangle to
150:41 - this
150:42 - radian angle using an afine transform
150:45 - and we have to do it around the center
150:48 - of our component
150:49 - all right so p dot apply transform
150:52 - here's we want an
150:53 - a fine transform we're going to rotate
150:56 - it
150:57 - we want the one that allows us to rotate
150:59 - it around a particular location
151:01 - we've got our angle in radians and our
151:04 - pivot point is going to be
151:06 - center dot get x center dot get y
151:10 - now we just need to draw it let's build
151:13 - and test
151:15 - just remember you know they're not we're
151:17 - not we're just drawing them within their
151:19 - bounding box
151:22 - okay but it is doing it and the when the
151:25 - value is zero
151:27 - the notch is straight up and down so
151:30 - that's
151:30 - cool all right so as i said let's see
151:33 - this is where it's at the five o'clock
151:35 - position
151:36 - here's where it's at the seven o'clock
151:37 - position so
151:39 - awesome okay so they look a little wonky
151:42 - let's fix
151:43 - that next but they are working
151:46 - okay we've implemented a customized look
151:48 - and feel
151:49 - the next thing i would like to do is add
151:51 - the center label
151:52 - showing the parameters value next
151:55 - okay we'll figure out that bounding
151:57 - issue in a minute as well
151:59 - let's make a commit of that added basic
152:03 - slider visuals here's where we
152:06 - made these deck made these
152:08 - implementations into declarations
152:10 - then here's where we implemented our
152:12 - first basic
152:13 - paint function which calls the rotary
152:15 - slider
152:16 - and then here in the rotary sliders
152:18 - where we actually draw
152:20 - the things okay okay let's start by
152:24 - drawing the slider bounds and start
152:26 - tweaking the get
152:27 - slider bounds function until it gives us
152:29 - a
152:30 - usable size okay so let's go to where
152:33 - we're getting our slider bounds
152:35 - and let's draw yes let's
152:38 - draw the slider bounds as well as our
152:40 - local bounds so
152:41 - g dot set color red and we'll draw our
152:45 - local bounds and then we'll use a
152:48 - different color for the slider bounds
152:51 - now uh before we start tweaking this
152:53 - let's just shrink this a little bit
152:55 - okay we're gonna want a square so our
152:58 - ellipses are actually
152:59 - circles so let's do auto size equals
153:02 - um and we'll find the minimum dimension
153:04 - of whatever bounding box is returned to
153:07 - us
153:08 - all right so we've got our bounds dot
153:10 - get width balance don't get height
153:13 - oh we need to get rid of this line
153:14 - that's right okay so auto bounds
153:17 - equals get local bounce so now
153:20 - we know we're going to display some text
153:22 - on either edge of it
153:23 - so let's shrink our bounding box by that
153:27 - size
153:28 - let's shrink our size our square size by
153:31 - that much so we'll do size
153:33 - minus equals get text height do it
153:36 - times two all right now we just need to
153:40 - move it
153:40 - towards the top of our component we need
153:43 - to move our
153:43 - slider bounds towards the top so let's
153:45 - create a rectangle that has
153:47 - our size but the top of it is it's so
153:50 - that it's positioned at the top of our
153:52 - component
153:53 - so juice rectangle
153:56 - r dot set size give it a size of
153:59 - give it a width and height of size so
154:01 - it's a square
154:03 - and then we need to set um i don't know
154:06 - what
154:06 - x and y to give it for the actual
154:08 - position because that's based on the
154:10 - upper left corner but i can specify
154:13 - where the center is and that's not going
154:14 - to change the size
154:16 - so i'm going to do that r dot set center
154:19 - i know i want that to be bounds dot get
154:21 - center x
154:22 - so that's going to put it in the center
154:23 - it's going to put the center of this
154:24 - rectangle in the center of my component
154:28 - and then i can set the y position
154:31 - accordingly r dot
154:32 - set y zero or just below the top i'm not
154:36 - going to do zero i'm going to do two so
154:37 - it's two pixels below the top of the
154:39 - component
154:40 - and the sent the center of our rectangle
154:43 - is going to be in the center of our
154:44 - component
154:45 - now let's just return it let's build and
154:48 - test it
154:49 - boom circles at the top slightly below
154:52 - the edge
154:52 - and they're in a square bounding box
154:55 - awesome
154:56 - all right let's make a commit of that
154:58 - because that's helpful
155:00 - all right uh sliders are now
155:04 - circles oh let's get rid of this
155:07 - um this line right there let's amend
155:10 - that commit
155:12 - oh wait no i don't want to amend it
155:14 - sliders are now circles
155:15 - there we go okay let's display the
155:19 - parameter in the center
155:20 - next we will keep the circles for right
155:23 - now let's go to our
155:24 - look and feel we're gonna keep these
155:25 - circles that are being drawn
155:27 - uh but for now we need uh the text
155:30 - height from our slider as well as the
155:31 - text itself
155:32 - so we already had some stubs for these
155:35 - functions in place
155:37 - when we decided we were to do
155:40 - get text height and then get display
155:42 - string right because we wanted to be
155:43 - able to figure out you know what do we
155:45 - display in the center
155:47 - so in order for us to call that we need
155:49 - to
155:50 - get a rotary slider with labels out of
155:52 - this parameter
155:54 - so to do that we are going to have to
155:56 - cast
155:57 - okay so after we get our um after we
156:00 - draw our circles
156:01 - we'll do a cast all right if we can cast
156:05 - it then we know we can call those
156:06 - functions all right so this is where we
156:08 - can
156:09 - do this put that there we're going to
156:12 - need our same path and our same
156:14 - rectangle stuff
156:15 - all right and then actually since our
156:17 - text is going to be in the center we
156:19 - need to adjust the bottom of our narrow
156:20 - rectangle so that it does
156:22 - not cover it up so it's going to be
156:24 - centered i get y
156:26 - minus um let's see
156:29 - yeah the bottom it's no longer going to
156:31 - be the center it's going to be the
156:33 - center
156:34 - uh sorry it's not gonna going to be the
156:36 - bottom of our
156:37 - bounding box oh yes sorry it's going to
156:39 - be um it's going to be where our center
156:41 - is and then we're going to subtract the
156:43 - text height
156:44 - which will put us back towards the top
156:46 - because top is 0
156:48 - get height is the bottom okay so we're
156:50 - going to the center
156:51 - and we're going to go uh up by
156:54 - subtracting
156:55 - some text height amount okay so we'll
156:57 - just do uh
156:58 - rs rswl
157:01 - get text height and then
157:05 - uh maybe that much maybe two
157:08 - we'll have to see how it looks okay all
157:11 - right so this is where i'm gonna change
157:12 - this from being a regular rectangle
157:15 - i'm gonna add a rounded rectangle p dot
157:16 - add rounded rectangle because
157:18 - you know let's dial it up a little bit
157:20 - our let's do a corner size of two
157:23 - all right now this is where we do all of
157:25 - our rotation stuff
157:27 - so now let's make a now let's make a
157:30 - little rectangle that's a little bit
157:32 - wider than our text
157:34 - and a little bit taller than our text is
157:36 - so that way we can
157:38 - have a nice we know how roughly how much
157:41 - text
157:41 - we're going to need to display so let's
157:43 - make a bounding box that fits around it
157:45 - and then we're going to put that right
157:47 - in the center of our
157:49 - slider okay so let's first get let's
157:51 - first
157:52 - set our font accordingly and we're going
157:55 - to just use that text height as the font
157:56 - it's going to keep displaying whatever
157:58 - default font is currently being used
158:00 - rswl
158:01 - get text height all right this is going
158:04 - to give us
158:05 - this is going to use the default font at
158:07 - this height
158:08 - all right now let's get our text and
158:11 - then let's get our string width
158:13 - string width
158:16 - equals g dot get current font
158:19 - get string width text
158:22 - okay that tells us how wide we are all
158:24 - right we can use this
158:26 - same rectangle so r dot set size
158:30 - we're going to go str width a little bit
158:32 - wider than that
158:33 - and then the font height our swl
158:38 - get text height oops get text height
158:42 - a little bit taller than that okay so
158:44 - now we've got our
158:46 - rectangle r is now has this bound it's
158:49 - it's gonna basically be a little bit
158:51 - bigger than uh
158:52 - the bounding box for our text okay we
158:55 - need to just set the center of it to be
158:57 - the center of our bounds right here
159:00 - our dot set center center
159:04 - that's this guy right here or if we
159:06 - don't trust that we can always write
159:08 - bounds not get center
159:10 - all right and then let's just make a
159:11 - black background for right now
159:14 - g dot set color colors black
159:18 - and then uh we're gonna fill it in uh g
159:21 - dot phil rect
159:23 - r okay now
159:26 - let's use white text and just paint our
159:28 - text inside of that
159:29 - so g dot set color colors white
159:33 - and then g.draw fitted text
159:36 - our text inside of r and r is a float
159:40 - rectangle so we need to
159:42 - get it to um an int to let's see what do
159:45 - we got two nearest in
159:46 - good enough and then we want it centered
159:48 - choose justification
159:51 - centered and one line of text
159:54 - now it's not going to build because we
159:57 - haven't implemented yet display string
159:59 - yet
160:00 - okay so we need to implement that next
160:04 - all right let's put this near where um
160:07 - we build our uh
160:09 - build our slider bounds all right so
160:11 - juice string
160:12 - rotary slider get display string
160:16 - this was const if you remember and we
160:19 - will
160:20 - just do return juice
160:23 - string and we're just going to return
160:25 - our sliders value
160:26 - let's build and test we should see a
160:29 - rectangle in all black with white text
160:31 - in the center of every slider
160:32 - showing some numeric value okay cool
160:36 - so we got twenty thousand
160:40 - it's working as expected all right this
160:43 - is giving us one two
160:44 - three these are the indexes in that
160:46 - string array
160:48 - of choices we created at the very
160:49 - beginning here's our q
160:52 - alright and here's our here's our gain
160:56 - for our slider okay cool so we are not
160:59 - seeing suffixes but we are seeing our
161:02 - values okay the only thing we're not
161:04 - seeing is the proper slope okay we
161:05 - should be seeing 12 24 36 48.
161:08 - we will deal with that next let's make a
161:12 - commit of that
161:13 - displaying basic param values
161:17 - cool okay we are trying to represent
161:21 - two parameter types a float param and a
161:23 - choice param
161:24 - and the choice param has a list that we
161:26 - can use
161:27 - directly if our parameter is a choice
161:31 - then let's just use that choice param so
161:34 - let's get rid of this line
161:36 - and we can do if auto choice param
161:39 - equals dynamic cast um let's see
161:44 - juice audio parameter choice
161:48 - if we can convert our ranged audio
161:50 - parameter to an audio parameter choice
161:53 - then just return that choice param get
161:56 - uh what's it called get current choice
161:59 - name
162:01 - now for the gain and the hertz
162:02 - parameters we need to amend our suffix
162:04 - to the parameter value
162:06 - also i want to truncate the hertz value
162:08 - if the frequency is over 1000 so that it
162:11 - says kilohertz
162:12 - instead so first we need a string object
162:14 - for that
162:16 - and if we and then we need to specify if
162:17 - we're going to add uh the k or not
162:20 - so let's assume we are not going to okay
162:23 - now i don't like to make guesses about
162:25 - what type of derived class my parameter
162:27 - actually is
162:28 - so i'm going to use a cast here to check
162:30 - if it's actually an audio parameter
162:32 - float
162:33 - now i know i haven't added any other
162:35 - parameter
162:36 - types in this project but just in case
162:38 - i'm going to add a little j assert
162:40 - in case one happens to sneak in later in
162:42 - the project all right so
162:44 - if it's this i know i'm cool
162:47 - otherwise j assert false
162:50 - if you recall the values that our
162:52 - parameter ranges had
162:54 - you know that the hertz parameter is the
162:56 - only one that can possibly get over
162:58 - 1000 so that means we can just check if
163:01 - our value is
163:02 - over that and then divide by a thousand
163:03 - to get a kilohertz value
163:06 - once we have that then we can say yes
163:08 - please add a
163:09 - k to the suffix and we can convey that
163:12 - with that boolean flag we used earlier
163:14 - so if value uh first we need to get our
163:17 - value
163:18 - float value equals getvalue if
163:22 - our value is greater than um if our
163:25 - value is
163:26 - over is 1000 or higher
163:30 - then um this is when we want to display
163:32 - it as kilohertz so we will say
163:35 - vowel divided by equals
163:38 - divided by a thousand so if it's
163:42 - um if the value is one thousand hertz
163:43 - we're going to see
163:45 - one k h z like this add
163:49 - true okay now the string class
163:52 - in juice has a constructor which lets
163:54 - you convert
163:56 - a floating point number into a string
163:57 - and one of the parameters is how many
163:59 - decimal places to use
164:01 - now if i'm displaying a value as
164:02 - kilohertz i only want to see
164:04 - two decimal places we already know that
164:06 - dividing um
164:07 - one thousand and one divided by a
164:09 - thousand is going to give us
164:11 - let's see one thousand one thousand one
164:14 - divided by one thousand
164:15 - will give us one point zero zero i don't
164:18 - want to see that okay i just want to see
164:19 - two decimal places
164:21 - so according to this constructor let me
164:24 - pull that up real quick
164:26 - this one right here float value okay
164:29 - it says number of decimal places if this
164:31 - number is greater than zero
164:33 - the number will be formatted using that
164:35 - many decimal places
164:37 - adding trailing zeros if required if the
164:39 - number is zero or less
164:41 - the number will be formatted using the c
164:43 - plus plus
164:44 - standard library default format which
164:46 - uses scientific notation for large and
164:48 - small
164:49 - numbers according to the documentation
164:52 - if you go back over here according to
164:55 - the documentation for this constructor
164:56 - if a 0 is provided for the number of
164:58 - decimal places
165:00 - the number will be formatted uh using
165:02 - the stl with however many decimal places
165:05 - are needed so this will work out when we
165:06 - are displaying
165:07 - decibels or quality versus the hertz
165:10 - okay so we're going to do str equals
165:13 - juice string
165:15 - um where is that one it's down here
165:18 - somewhere
165:20 - this one float okay our float val
165:23 - for our number of decimal places if we
165:25 - are adding the k
165:27 - we want to see two decimal places
165:29 - otherwise the
165:31 - stl formatting is will be just fine
165:34 - so add add k for adding the k give me
165:38 - two decimal places otherwise
165:40 - give me however many are actually needed
165:42 - to display the parameters value
165:45 - all right now the final thing is that we
165:48 - had said that the quality property
165:50 - does not have any units which means we
165:53 - did not supply a suffix if you go back
165:55 - down
165:56 - here you'll see what i'm talking about
165:58 - okay
165:59 - hertz and decibels have a suffix but
166:00 - quality does not have a suffix
166:04 - so if the suffix is not empty
166:07 - let's add a space after the number and
166:09 - then add the suffix
166:10 - if suffix is not empty
166:14 - we can do str um add the space
166:18 - and then um if we are doing a hertz
166:21 - value which is over one kilohertz let's
166:23 - add the k
166:24 - if add k str
166:27 - add that little k like that now we just
166:30 - add the suffix and then we're done
166:35 - return the string okay
166:38 - let's run that and check it out
166:42 - boom 121hz and let's raise that to be
166:46 - over a thousand
166:48 - there we go 1.01
166:53 - awesome okay and then these guys
166:58 - cool all right i'm not too mad about
167:02 - when it's showing a negative and
167:04 - it's not showing the um uh
167:07 - it's not showing it the rectangle is
167:09 - changing size it's you know
167:11 - that's just like a minor detail that we
167:13 - don't need to fix and now this is
167:14 - displaying
167:15 - the correct slope values so that's cool
167:19 - all right let's ditch those bounding
167:21 - boxes that we're showing the rectangles
167:23 - it's these guys right here i'm gonna
167:24 - leave them in as comments though
167:27 - um because you know if we ever need to
167:28 - debug this some more it's
167:30 - good to just you know it makes it easy
167:32 - to uncomment them and display them later
167:34 - let's take a look one more time and see
167:36 - what we've got all right that's nice and
167:38 - clean
167:40 - cool let's make a commit of that
167:43 - alright so implemented implemented
167:46 - displaying the parameter value
167:48 - with suffix
167:52 - cool let's add the labels next that will
167:55 - show the minimum and maximum values that
167:57 - our parameters can have
167:59 - i would like the minimum value to be
168:01 - drawn right outside of that
168:02 - seven o'clock position on the slider and
168:05 - the maximum value
168:06 - to be drawn outside of the five o'clock
168:08 - position here is how i have decided to
168:11 - go about implementing this
168:12 - okay we're going to have a simple data
168:14 - structure which will hold a normalized
168:16 - value
168:17 - and the string that should be positioned
168:19 - at that normalized position
168:20 - okay so we'll put that let's see let me
168:23 - go to a plugin editor.h
168:26 - all right we're going to put that right
168:28 - here okay so we'll do struct
168:30 - label position give it that normalized
168:33 - value
168:34 - and then the string that's going to get
168:36 - displayed
168:38 - all right now that we have this
168:38 - structure we can just give ourselves an
168:40 - array of them
168:42 - and then all we have to do is add some
168:43 - values to that array and then draw them
168:46 - in our paint function all right let's
168:48 - make our way over to the
168:50 - paint function okay we're going to draw
168:52 - this after we draw our slider
168:54 - so let's see what we need to do is
168:56 - create a bounding box that can
168:58 - encompass our text and then put the
169:01 - center of that bounding box at whatever
169:03 - normalized position we decided
169:05 - we have decided on around our sliders
169:08 - circumference
169:09 - once we have that bounding box we can
169:11 - just use the graphics function
169:13 - draw fitted text like we did right here
169:17 - we can do the same thing to we can do
169:20 - that to draw our label inside the
169:22 - bounding box
169:23 - so first things first let's get the
169:25 - center and radius of
169:27 - our slider bounce auto center
169:30 - equals slider bounds dot to float
169:34 - dot get center okay we want this in
169:35 - floating point numbers and then let's
169:37 - get the radius from that
169:38 - auto radius equals slider bounds
169:42 - dot get width and then give me half of
169:46 - that
169:47 - okay now let's set up the text color and
169:50 - size of the text
169:51 - i'm going to use the same text color uh
169:55 - no i'm gonna use a different text color
169:56 - i'm gonna use like a greenish looking
169:57 - thing
169:58 - again i figured this out using that
170:00 - digital
170:02 - color meter app this thing right here i
170:04 - found a nice green that i liked
170:06 - and just jotted down the rgb values
170:09 - let's do that next
170:10 - g dot set color i've got a value of zero
170:13 - unsigned in value of 127
170:16 - 172 right here for that and then
170:19 - one for the blue and then we need to set
170:22 - our font
170:23 - okay we're going to use the default font
170:25 - with this text height
170:27 - we need to iterate through our labels so
170:30 - auto num
170:31 - choices equals labels.size
170:35 - and here we go four int i
170:39 - equals zero i is less than num choices
170:42 - plus i all right now let's convert that
170:44 - normalized position into a radian
170:47 - angle auto position equals
170:50 - labels okay and we want to make sure
170:53 - that it's between zero and one just in
170:55 - case
170:57 - all right now let's j-map it like we j
170:59 - mapped um
171:01 - this thing right here actually we can
171:03 - just grab this
171:04 - auto angle equals this thing and this is
171:08 - going to be our
171:08 - position and our start ang is going to
171:12 - be
171:13 - um what we set up here same for the
171:16 - rotary
171:16 - end okay now we can use one of the
171:20 - point class member functions uh
171:23 - particularly this one
171:24 - point um
171:27 - i'll show you the member function get
171:29 - point on circumference we can use this
171:30 - member function
171:32 - to find the center point we will use for
171:35 - this bounding box with
171:36 - this particular radian angle we have our
171:39 - center that we will use
171:40 - so center dot get point on circumference
171:44 - our radius is going to be um
171:47 - radius plus get text height
171:50 - yeah we want it to be a little bit
171:52 - further out from our um
171:54 - rectangle so we'll do like half
171:57 - the um text height maybe a little bit of
171:59 - a another question
172:01 - and then our angle is gonna be like that
172:03 - so if you're wondering where this
172:05 - number came from let me turn this back
172:07 - on and
172:08 - draw this okay so i'm talking about
172:12 - here's our center of um that bounding
172:14 - box we're gonna go
172:15 - if if i go if i go radius away from this
172:19 - at this
172:19 - angle i'm gonna end up like right at
172:21 - this point right here so that's why i'm
172:23 - adding text height to it
172:24 - because text height is this amount so i
172:26 - want to go that much more
172:28 - away that's going to kind of put me near
172:29 - this corner right
172:31 - it's going to be different you know it's
172:32 - not going to be it's going to be like
172:34 - this
172:35 - vertical distance away from this angle
172:38 - that's why that's going to do that
172:39 - that's what this line of code does it's
172:41 - going to get me that point
172:42 - auto c equals that okay we have our
172:44 - center point
172:45 - now we can get the width of our string
172:47 - from the currently used font like we did
172:49 - up here i'm going to do that same same
172:52 - thing right here
172:53 - and then we're going to make a rectangle
172:55 - that's going to use that
172:57 - width as well as our text height to
172:59 - define its bounce so let's do
173:00 - rectangle float r um we need our label
173:05 - uh do we need that yet yes we need our
173:07 - label because we need to do r
173:08 - dot set size so auto str equals
173:12 - labels label okay and then we can do r
173:15 - dot set size
173:17 - now we will use the size using that get
173:19 - string width helper function like we
173:20 - showed before
173:21 - uh this is going to be g dot get current
173:24 - font get
173:25 - string width str and then our height is
173:28 - going to be get
173:28 - text height now we can just set our
173:30 - center r dot set center
173:32 - and then um maybe shift it down a little
173:35 - bit
173:36 - just in case so it doesn't collide r dot
173:39 - set y
173:40 - okay we'll get the current y as it is r
173:43 - dot get y
173:44 - and we'll just add a little bit um you
173:46 - know just shift it down just a little
173:48 - bit more
173:49 - okay and then now we can just draw our
173:51 - fitted text and hopefully this will be
173:52 - in the right position
173:53 - okay so g.draw fitted text
173:57 - our text is going to be our string area
174:00 - is going to be r
174:01 - r is a float rectangle type so we want
174:04 - to
174:05 - get the nearest end we need to convert
174:07 - it to integers
174:08 - we'll do the same centered and
174:11 - one line try to fit all the text on one
174:13 - line okay so just to recap
174:16 - we are drawing where we've got the
174:19 - center of our rectangle
174:20 - right here we're going to go at some
174:22 - angle away from it
174:24 - like this and then this would put us
174:27 - right on the edge of the circle and we
174:28 - don't want our rectangle to be centered
174:30 - on the edge of that circle we want it to
174:31 - be
174:32 - a little bit further out and then down a
174:34 - little bit so that way it doesn't
174:35 - collide with the circle
174:37 - okay so this uh this gets it right on
174:39 - the circle
174:40 - this gets it a little bit past the
174:43 - circle and then this
174:44 - shifts it down from the circle all right
174:47 - let's check that out
174:48 - okay why is this not displaying anything
174:51 - oh because we didn't initialize it
174:53 - duh we need to actually provide some
174:55 - labels first so let's do that next
174:58 - 36 step number 36 so we need to go to
175:01 - step number 37.
175:03 - let's go to our constructor in our um
175:06 - where is this this is in our plug-in
175:09 - editor
175:10 - plug-in editor okay so we will do this
175:12 - before we make our components visible
175:15 - let's add um our min and max ranges so
175:18 - we'll start with the peak freq
175:20 - peak freak slider okay and this is where
175:23 - we'll go to our labels and
175:24 - we'll just add one of these label
175:27 - positions so
175:28 - at position zero i want to display 20
175:31 - hertz and then at position 1.0 we will
175:35 - display
175:36 - uh 20 kilohertz
175:39 - and then we'll do khc like that let's
175:42 - see if that looks like anything
175:45 - okay cool 20 hertz 20 kilohertz nice
175:48 - all right let's make a commit of that
175:51 - ram
175:51 - min max values stage stage
175:55 - all right let's do the rest of them we
175:57 - got 20
175:58 - um let's see negative 24 db and plus 24.
176:02 - okay cool so my gain slider uh whoops i
176:04 - always spell that wrong
176:06 - okay so my gain slider is going to show
176:07 - negative 24 and plus 24.
176:10 - my quality will show 0.1 and 10.0
176:13 - and then low cut and high cut are going
176:15 - to show 20 hertz and 20 kilohertz
176:18 - and then the um slope sliders are going
176:20 - to show
176:21 - 12 and 48 and i don't think there i
176:24 - don't see a need to make it display the
176:26 - decibels per octave thing um anyway
176:29 - let's run it and check it out
176:31 - okay oh let's get rid of these bounding
176:32 - boxes where was that that's up here
176:35 - somewhere
176:36 - that's right here they're handy to have
176:39 - um handy to be able to just pop them in
176:41 - there to help debug your visuals
176:44 - okay cool that's looking pretty clean
176:46 - i'm happy with that
176:48 - all right let's adjust these positions a
176:49 - little bit uh let's
176:51 - adjust these positions a little bit i'm
176:53 - going to make the display a little bit
176:55 - taller
176:56 - and then and i'm going to do that
176:58 - because let me put that back
177:01 - okay it's a little it's a little bit
177:02 - cramped for me here
177:04 - so i'm going to make this just a little
177:06 - bit taller
177:07 - and then we're going to use juice live
177:09 - constant here i want to
177:11 - change the height of the response
177:14 - area okay so get a little look at how
177:16 - that's done
177:17 - so we'll do float h ratio height ratio
177:20 - i'm going to use juice live constant
177:22 - here um
177:24 - we're currently using 33 okay
177:27 - so now we can do this here and we're
177:30 - gonna dial in
177:31 - our height ratio to figure out what size
177:32 - the response area should be
177:35 - okay cool so now we are looking at
177:39 - what am i adjusting
177:47 - all right okay i'm doing that because
177:53 - when this goes like that it covers up
177:55 - that
177:56 - so if i shrink this a little bit does
177:58 - that go away
178:00 - all right that seems okay i need the
178:02 - slider
178:03 - text to not overlap but it's doing it
178:05 - anyway so
178:07 - perhaps i need to shrink this length so
178:09 - it's a little bit smaller
178:10 - or maybe it's not a thing either way 25
178:13 - percent looks good the knobs are a
178:14 - little bit bigger
178:15 - i mean if we wanted to we could just
178:16 - make this like really big but that just
178:18 - looks kind of weird and we don't even
178:19 - see our slider thumbnail
178:20 - so that's the big problem is i want to
178:22 - see more of the slider's thumb
178:24 - than i'm currently seeing right now
178:26 - which is why i'm making
178:27 - if that's like that i want to make this
178:30 - a little bit
178:31 - i want to see more of the thumb okay so
178:33 - i think 25 looks okay
178:35 - makes it's pretty easy to see where the
178:37 - thumb is okay
178:39 - so we'll stick with that we'll do 25 for
178:42 - that value
178:43 - okay so we'll change this to 25.f
178:46 - divided by 100.f and we'll just comment
178:49 - out because it's always you know it's
178:51 - always useful to be able to uncomment
178:52 - that and use it to dial in those other
178:54 - positions
178:55 - okay now i think if we take a look at
178:58 - that
178:58 - there's one other graphic change i want
179:00 - to make
179:02 - now i don't like this gap right here so
179:04 - i want to put a little bit of room
179:05 - between where the sliders are
179:06 - and where this component where this
179:08 - response curve component ends
179:10 - so we can do that by just removing a
179:13 - little bit from
179:14 - this bounce before we do all of this
179:17 - stuff
179:18 - that's pretty easy bounce dot remove
179:20 - from top
179:21 - i'm gonna just remove five pixels
179:24 - let's see what that looks like okay
179:27 - that's
179:27 - yeah that's clean i'm happy with that
179:30 - okay
179:30 - so let's open this up now i'm gonna
179:33 - let's see what this does
179:36 - i'm just gonna customize this a little
179:38 - bit save it
179:40 - close this okay so these parameters are
179:44 - not
179:44 - drawn on here right away okay so that's
179:48 - a bug that we need to fix
179:50 - so let's uh let's open this back up
179:52 - let's quit this
179:53 - let's see if we can solve that okay so
179:56 - this is caused
179:58 - let's go look at our um timer callback
180:01 - code response curve command okay the
180:04 - chain is only updated
180:06 - whenever the timer callback
180:10 - determines that this parameter is true
180:12 - and this parameter is only set to true
180:14 - whenever the parameter values change so
180:16 - if our gui is displayed
180:19 - have the parameters changed from the
180:22 - since they're
180:22 - since they were initially loaded no they
180:25 - have not
180:26 - okay so there's a couple ways we can do
180:29 - this um
180:30 - first of all the hacky way
180:33 - to do this would be to say you know what
180:35 - this parameter
180:37 - has changed the first time the gui loads
180:40 - but that's
180:41 - kind of hacky okay what we need to do is
180:44 - just refactor how
180:45 - that stuff gets set in the first place
180:48 - so let's
180:49 - make an update chain function
180:52 - and now we can just call this in our
180:55 - timer callback
180:56 - and from our constructor all right so
180:58 - this is going to update the chain during
180:59 - construction which means the chain will
181:01 - give us the proper magnitude values
181:03 - when we paint it for the very first time
181:06 - so let's do that let's add a uh
181:08 - let's put that right here okay we're
181:10 - just going to move that code out of
181:11 - timer call back
181:12 - void response curve component update
181:16 - chain we can just grab all this stuff
181:19 - we're not going to repaint though okay
181:21 - now we're just going to call it
181:22 - update chain and then we can call it in
181:25 - our constructor as well
181:27 - let's call it before we do our timer
181:31 - all right let's run it and we should see
181:34 - uh the chain get updated automatically
181:36 - whenever we close and reopen the gui
181:39 - okay so that's showing up is correct i'm
181:41 - going to change this param to that
181:43 - okay that's on 90b so notice there's a
181:45 - bump right there i'm going to close this
181:46 - gui
181:47 - reopen it and that bump is there cool
181:51 - bug solved all right let's make a commit
181:54 - to that
181:55 - what do we have going on here uh fixed
181:58 - response curve bug
182:02 - when first when um first
182:05 - opening the gui okay cool so
182:09 - we have our um this is where we started
182:11 - displaying the
182:12 - star values and then this is where we
182:14 - actually added
182:16 - those labels here's where we dialed in
182:19 - the um the final position for all the
182:22 - components and then here's where we
182:24 - fixed the response curve issue by
182:26 - refactoring what happens in timer
182:27 - callback into its own function
182:29 - that we can call from our constructor
182:32 - okay cool that wraps up the
182:35 - response curve and customizing the knob
182:38 - visuals okay the next thing to do is to
182:41 - put a grid
182:42 - behind the response curve and then after
182:45 - we do that we can add the
182:47 - spectrum analyzer and then after we do
182:49 - that we can add the bypass buttons
182:51 - okay so we got three big things to do
182:53 - before we are done with this component
182:55 - but we are
182:55 - almost done with this project so
182:59 - awesome it's progressing very quickly
183:02 - at a pretty good clip
183:07 - okay let's give this response curve a
183:10 - proper background component
183:12 - that's going to show the frequency plot
183:13 - and since we don't need to recreate this
183:16 - every time the curve is updated we are
183:18 - going to
183:18 - pre-render it into an image so let's
183:21 - head over to our plugin editor.h
183:24 - and we will do that right here
183:28 - now we need a place to make this
183:30 - background image
183:32 - and the resized function is a good place
183:34 - to do this because
183:36 - it is called whenever the component
183:37 - bounds change and it is called before
183:39 - the first time that paint is called
183:42 - so let's declare that guy here all right
183:45 - let's go to our cpp file
183:48 - let's put this after our paint function
183:50 - the first thing we will do in this
183:52 - resized function
183:53 - is make a new background image based on
183:55 - the width and height of our
183:57 - component okay so first let's declare
184:00 - this void
184:01 - uh response curve component resized
184:05 - so okay we're going to create a new
184:07 - background image then we will create a
184:08 - graphics context
184:10 - which we'll draw into this background
184:11 - image and then from there we can just do
184:13 - the usual paint stuff
184:14 - except we are drawing into this
184:16 - background image
184:18 - directly using the graphics context that
184:20 - we created so let's start
184:23 - we'll start with that okay we're going
184:25 - to use an rgb context
184:27 - an rgb pixel format the width and the
184:30 - height for the dimensions and then we
184:32 - want to clear the background
184:33 - all right now we just need the graphics
184:35 - context
184:37 - now i want to draw frequency lines
184:41 - so i'm going to create an array that i
184:42 - can loop through and convert these
184:44 - frequencies to window space and then
184:46 - draw them as
184:46 - vertical lines and these values that i'm
184:49 - using for the frequencies are the
184:51 - standard values people use when
184:52 - producing these types of plots
184:54 - yeah i mean you can come up with
184:55 - whatever you want but these are the
184:57 - pretty standard
184:58 - um values that people use and they're in
185:00 - multiples of 10.
185:02 - uh are they um they um they scale up
185:05 - by a factor of 10 each time so let's do
185:09 - uh
185:10 - so i'm going to do 20 30 40 50
185:13 - 100. i'm gonna multiply that uh by
185:19 - uh 10 and then the last one
185:23 - since that's the top of the human
185:24 - hearing range
185:26 - all right now i'm going to uh set my
185:29 - color to white i'm going to loop through
185:30 - the frequencies i'm going to
185:32 - map them from i'm going to map them from
185:35 - this frequency linear
185:37 - space to a normalized position and then
185:39 - i'm going to draw a vertical line
185:47 - all right let's take a look at that uh
185:50 - i'm sorry actually
185:52 - uh before we even do that um
185:56 - we need to display it in pain but before
185:58 - i do that i want to
185:59 - show some gain lines as well so i'm
186:01 - going to do the same thing
186:02 - i'm going to create an array i'm going
186:04 - to loop through it and i'm going to draw
186:06 - i'm going to convert each value in the
186:07 - array to
186:08 - a window position and then draw it as a
186:10 - horizontal line
186:11 - so let's create that next
186:15 - i'm going to do i'm going to do lines
186:17 - every 12 decibels
186:25 - okay so remember i'm using 24
186:28 - and negative 24 as my range because
186:30 - that's what our
186:31 - slider can um our gain slider can
186:34 - those are the ranges of that gain slider
186:36 - and then it's important to remember that
186:38 - the bottom
186:39 - of the window at the bottom we want this
186:41 - negative 24 to be mapped to the bottom
186:43 - of our component
186:45 - and then we want the positive 24 to be
186:47 - mapped to the top of our component
186:49 - and then we're just drawing a horizontal
186:51 - line from the left side
186:52 - to the right side all right now we just
186:56 - need to go to our paint function
187:00 - and draw it in the background
187:04 - g dot draw image image to draw as
187:07 - background
187:08 - it wants a float rectangle so get local
187:10 - bounce
187:12 - to float all right let's take a look
187:16 - all right cool it looks like something
187:19 - good times
187:20 - um so for this graphic stuff we're going
187:22 - to switch to the standalone plugin
187:25 - so that way um we don't need to deal
187:27 - with audio plug and host at the moment
187:29 - we're just
187:30 - looking at graphics changes let's look
187:32 - at that one more time
187:34 - okay so the first problem is that
187:36 - there's a lot of collision happening
187:38 - like our plus 24 line and our negative
187:40 - 24 line
187:41 - uh we don't even see them so we need to
187:43 - shrink the bounding box that we are
187:45 - using
187:46 - to compute these values within which
187:48 - means we also need to adjust how our
187:49 - path
187:50 - is going to get produced so let's go to
187:53 - our
187:54 - editor editor.h
187:57 - and then below this let's add a function
187:59 - that will give us the area we will draw
188:01 - our background grid in and also our
188:03 - response curve in
188:06 - i'm going to call mine get render area
188:08 - it's going to return a
188:10 - juice rectangle
188:13 - now go to our plugin editor.cpp and
188:16 - let's go to the bot um go to the bottom
188:18 - of that
188:19 - after the resized function
188:24 - all right so let's use some juice live
188:26 - constant to figure out the
188:28 - bounding box of this all we know is that
188:31 - we are going to reduce our local
188:33 - bounding box but
188:34 - not by how much so this will be a good
188:36 - chance to figure that out
188:37 - so
188:41 - we're going to use the reduce function
188:43 - i'm going to reduce it by
188:45 - some amount we'll do
188:48 - start with five i'm going to reduce both
188:52 - the x
188:52 - and the y and it's important to make
188:55 - sure you put juice live constant on its
188:57 - own line
188:58 - one instance per line
189:02 - okay for right now we're going to stop
189:04 - drawing the vertical lines
189:08 - as well as the horizontal lines
189:11 - and we're just going to draw the render
189:14 - area
189:16 - okay so let's run this and let's dial in
189:18 - the values here
189:21 - let's move this out of the way okay so
189:24 - if we increase this
189:25 - we shrink it we shrink the width
189:29 - and then if we do this one we shrink the
189:31 - height okay so let's figure out what
189:33 - looks good
189:35 - i know i'm going to want to have some
189:36 - text on this side
189:38 - and on this side showing like the actual
189:41 - values for the lines
189:43 - like you know 0 db plus 24 and minus 24
189:46 - and then whatever i'm going to come up
189:47 - with here and then we need our
189:49 - frequencies
189:50 - uh to get displayed either above or
189:53 - below
189:54 - somewhere so let's dial this in
190:02 - all right and i like shrinking it by 10
190:05 - i think this is a good width and then
190:07 - height wise i don't think i need that
190:09 - much
190:11 - i'm going to go with 8. so 10
190:14 - for the width reduction and then 8 for
190:17 - the
190:17 - height reduction 10 and 8.
190:22 - so let me just make that change here 10
190:26 - 8
190:31 - put this on its own line for right now
190:35 - okay i'm happy with that so let's make
190:36 - the response curve sit within
190:38 - this rectangle now all right let's go to
190:42 - our paint function
190:44 - now all we have to do is change this
190:47 - line right here
190:48 - response area is going to be get
190:51 - render area auto response area equals
190:55 - get
190:55 - render area talk about easy i am glad we
191:00 - planned ahead on that by using this
191:01 - response area to represent what we are
191:03 - drawing let's take a look
191:06 - okay cool so this is being drawn inside
191:08 - here it's also
191:09 - we're getting a little bit of the path
191:11 - being drawn outside of it because
191:13 - our response area is um
191:16 - is smaller than our component and this
191:18 - path is being drawn inside
191:19 - you know the entire component so we'll
191:21 - figure that out in a little bit but
191:22 - this is cool all right we're making
191:26 - progress
191:27 - now i'm going to change this from being
191:29 - reduced on all sides to
191:31 - being reduced mainly on the top and the
191:33 - sides we want to leave room for the
191:35 - frequency label on the top
191:37 - and the db levels on the sides but for
191:41 - the bottom i don't really care about
191:43 - that so
191:44 - uh we're going to get rid of that we're
191:46 - going to do bounce dot remove from top
191:48 - we're going to give us a gap of 12 at
191:51 - the top
191:52 - from the bottom we're just going to do a
191:53 - little gap maybe something like that and
191:56 - then on the sides
191:58 - um my i think we need more than 10
192:01 - so we'll do 20 pounds.remove from left
192:06 - 20 and then bounce.remove from right
192:10 - 20. all right let's take a look at that
192:16 - okay cool so we've got two pixels of
192:18 - space here
192:19 - we got our 20 here this is plenty of
192:21 - room to have small text
192:22 - and then same for on the top we can put
192:24 - some uh low height
192:26 - um yeah like use a font that's not very
192:29 - tall for right there
192:32 - okay so let's go um let's separate the
192:35 - render area from the actual analysis
192:37 - area
192:37 - so let's add another function here
192:41 - and it's going to be called get analysis
192:42 - area and that's actually going to be
192:44 - what we draw the response curve within
192:48 - so if i pull this back up
192:51 - when we see our you'll have to just
192:53 - imagine the grid lines for right now
192:55 - but just imagine that like we're not
192:58 - going to have the plus 24 be underneath
193:00 - this like right at this orange line it's
193:02 - going to be slightly less than it
193:04 - and same for the bottom our negative 24
193:06 - is not going to be on this orange line
193:08 - it's going to be slightly above it
193:10 - so that's what i mean when i say our
193:11 - analysis area is going to be a little
193:13 - bit
193:13 - smaller than our render area
193:18 - all right so let's implement this back
193:20 - to our cpp file put this right here
193:23 - all right we're going to start with our
193:24 - render area
193:27 - and then we're going to trim some off
193:28 - the top and trim off the bottom
193:30 - so that way we can see the um the top
193:32 - and bottom line of our
193:34 - um grid as i had explained as i had
193:37 - explained a moment ago balance dot
193:39 - remove from top a gap of four should be
193:42 - nice
193:43 - bounce down remove from bottom same size
193:46 - gap
193:47 - all right now let's use this instead of
193:50 - the response area
193:51 - in our paint function so
193:55 - response area uh not get local bounds
193:58 - or not get render area let's use get
194:00 - analysis area
194:03 - all right so let's take a look at that
194:06 - okay all right so we're still we're
194:08 - seeing our orange rectangle in the wrong
194:11 - uh wrong spot so let's take care of that
194:13 - that goes down here
194:15 - um that's at the bottom that's this guy
194:19 - right here so instead of using the
194:20 - response area we want to use the render
194:22 - area
194:26 - okay cool all right so
194:29 - now let's go back to our
194:33 - um our resized function
194:38 - and let's draw our analysis area
194:42 - right yes let's display our analysis
194:45 - area
194:46 - so we have an idea of where this
194:47 - actually is
194:50 - all right cool so yes um it's slightly
194:53 - in
194:54 - slightly set inside our um orange
194:57 - uh render area
195:00 - okay so let's see let's go up to our
195:04 - frequencies
195:06 - we want to be drawing inside of this
195:08 - analysis area instead of the local bound
195:10 - so let's cache
195:11 - some information about this analysis
195:14 - area let's do this right here we'll go
195:15 - to auto render
195:17 - area equals get analysis area and now
195:19 - let's cache the left
195:21 - right top bottom and width
195:24 - okay because we need the left and the
195:25 - right for our horizontal lines we need
195:28 - the
195:29 - the top and the bottom for our vertical
195:31 - lines
195:33 - um and then we also need the width for
195:35 - um
195:36 - uh is it this thing um well either way
195:40 - all right let's just start caching them
195:41 - auto left equals
195:48 - since the frequency labels as well as
195:50 - the vertical lines we'll need this
195:52 - x position let's just um cache this
195:55 - value into an array
196:01 - all right so we're going to use the same
196:02 - mapping code where we convert our
196:05 - frequency value to a a normalized
196:08 - position
196:08 - and then just compute that to a
196:11 - a window x position um based off of this
196:15 - left edge of our render area
196:18 - all right now we can actually draw our
196:20 - vertical lines let's get rid of this
196:23 - i'm going to use uh i'm not going to use
196:25 - white i'm going to use dim gray for this
196:28 - so instead of looping through our
196:29 - frequencies
196:32 - let's loop through our x positions
196:35 - and we don't need this line anymore
196:38 - instead we need uh this right here
196:42 - we're going to draw x and from the top
196:45 - to the bottom
196:48 - all right now let's go to our gain and
196:53 - let's see we can make it
196:56 - instead of using our get height and zero
196:58 - we can use our bottom
197:00 - and top okay and then
197:03 - uh i want to make the zero db line
197:06 - um have the same color as our min and
197:09 - max slider labels and everything else is
197:11 - going to be grace that will be
197:12 - it'll you know we'll be able to visually
197:13 - see where is zero
197:15 - so we will do g dot set color
197:19 - if it's zero then we're gonna use that
197:22 - one color otherwise we're gonna use um a
197:23 - darker color
197:26 - it could you know dark gray is cool all
197:28 - right let's go find that green color
197:31 - that's in our slider
197:35 - where is that order slider paint uh this
197:38 - color right here
197:39 - and this should probably be standardized
197:41 - into a
197:42 - static color at some point you know
197:44 - define it at the top of the header file
197:46 - but for right now this is good enough
197:49 - all right so we're going to use that
197:50 - right there
197:53 - all right and we don't need this border
197:54 - anymore so let's run it and take a look
197:59 - oh i forgot to uh draw the line so g dot
198:02 - draw horizontal line uh at y
198:06 - and then left right
198:10 - so we should see a green line in the
198:12 - center and there we go
198:15 - awesome it's looking good
198:20 - okay so the next thing to do is to draw
198:22 - the frequency labels
198:24 - let's make a little commit of what we've
198:26 - done so far
198:28 - right we basically roughed out the grid
198:30 - lines added
198:32 - grid lines
198:35 - added grid lines um into
198:40 - so uh let's see we actually um we added
198:44 - grid lines we also um pre-rendered
198:48 - grid into background image
198:52 - cool okay so frequency labels let's draw
198:56 - these down here
198:58 - get rid of that line we'll do a clean up
199:00 - at the end okay so i want to draw these
199:02 - with that light gray color
199:04 - so that way they pop out a little bit so
199:06 - let's set our color there
199:09 - we want to use a font height of 10. if
199:12 - you remember our
199:14 - um our render area we gave ourselves a
199:17 - room of
199:18 - 12 between the top of our component and
199:20 - where our render area
199:22 - is so i'm going to draw inside that
199:24 - little 12
199:25 - gap so that's why i'm going to use a
199:27 - font height of 10.
199:29 - if i need to tweak that i can tweak it
199:30 - later all right so now
199:32 - what we will do is loop through our
199:34 - frequencies and x's and draw the text
199:36 - above the grid at those particular
199:38 - positions
199:44 - now i'm gonna use the same trick um that
199:47 - i used when drawing the
199:49 - uh labels uh for the min and the max
199:52 - range where i
199:53 - um added kilohertz
199:56 - use that same trick right here
200:02 - all right then we can just assemble our
200:03 - string
200:07 - lowercase
200:10 - all right and we're gonna do the same
200:12 - trick that we used with the string width
200:14 - and building a rectangle around it
200:20 - very simple stuff we've got a rectangle
200:22 - we're going to give it a particular size
200:24 - i know where i want the center x but not
200:26 - the y
200:28 - and that's okay because i can set the y
200:31 - after i have already set
200:32 - the x position all right all we need to
200:35 - do now is just draw
200:37 - our text
200:41 - all right let's run it and take a look
200:44 - all right cool uh we got some collision
200:46 - of text going on here
200:48 - that's okay though figure that out next
200:53 - all right so it looks like the 40
200:56 - and the 30 and the 40 are getting pretty
200:59 - close 300 and 400
201:01 - collide a lot 3k and 4k collide a lot so
201:03 - let's get rid of those
201:06 - and let's try that again ah much
201:09 - cleaners
201:10 - these are much easier to see now that
201:12 - they're not colliding on each other
201:14 - cool all right so let's add a commit for
201:16 - that added frequency labels
201:19 - and we also thinned out
201:23 - number of frequencies
201:26 - all right let's do the gain labels next
201:30 - all right let's go to where we are
201:32 - looping through our gain labels
201:37 - that right here so we're actually going
201:40 - to do this down here
201:42 - all right we're going to loop through
201:43 - our gain labels the exact same way we're
201:45 - going to need that y value
201:49 - all right now we need to make a string
201:51 - with the gain value if it's greater than
201:53 - 0 i want to see a plus sign
201:54 - if it's and if it's not it's going to be
201:57 - a negative number so let's do the same
201:58 - thing string str
202:00 - if gdb
202:04 - is greater than zero uh add the plus
202:08 - sign
202:10 - and then just feed in that gain value
202:14 - all right let's get the width like we
202:16 - did before and then we're going to build
202:18 - a bounding box around that
202:20 - just like we did before same thing here
202:26 - okay now we're going to draw these on
202:28 - the right side of the screen so our x
202:30 - position
202:32 - is going to be the width get width
202:36 - minus our text width and then our height
202:39 - is going to be um
202:42 - uh let's see we're going to i'm not sure
202:44 - where i want the y position to be but i
202:45 - do know that i want the center of this
202:47 - rectangle
202:48 - to be lined up with this so i'm going to
202:50 - use the
202:51 - r dot set center use this
202:54 - thing i know i wanted to use the current
202:56 - center x
202:58 - and i know i want um this to be y
203:02 - okay so like i said i know where i want
203:05 - the
203:06 - left edge of this to be i don't know
203:08 - where i want the um
203:09 - y position to be but i do know that i
203:11 - want the um
203:13 - the center of this text to be at this y
203:16 - position which is the same position we
203:17 - are drawing our gain
203:19 - lines so i can do that same trick where
203:21 - i've got um
203:23 - i know the x um the rectangle has the
203:25 - current x position so i can
203:27 - get the center x of the rectangle and
203:30 - then i can set the y
203:32 - i can set the center with this y value
203:36 - okay now let's just set our color i want
203:39 - to do the same
203:41 - trick i used here where i set it to
203:42 - green if the line
203:45 - should be green the only difference is
203:47 - i'm going to um
203:50 - i'm going to draw the text as light gray
203:53 - to match
203:53 - the other color i used for this
203:56 - text all right so this is going to give
203:59 - me
203:59 - a greenish text color for the 0db
204:03 - mark and then now
204:07 - we just need to draw our text
204:10 - it's this thing right here all right
204:14 - let's take a look at that
204:16 - all right cool we got plus 24 plus 12 0
204:19 - in green
204:21 - uh minus 24 minus 12. awesome
204:24 - all right let's make a little note about
204:26 - that added
204:28 - uh gain labels
204:32 - to grid
204:37 - okay let's add another scale let me pull
204:39 - this up on this side
204:41 - since we are going to be doing an
204:42 - analyzer let's add another scale on this
204:45 - side
204:45 - for that okay now our gain range for the
204:48 - peak band was
204:49 - uh 48 you know we could do from plus 24
204:51 - to -24 so let's do the same for the
204:54 - analyzer
204:55 - we'll do 0 to negative 48. so this is
204:58 - easy all we have to do is subtract
205:00 - 24 from the decibel value
205:04 - just do that right here we can go
205:06 - str.clear
205:08 - clear out our string um let's fill it in
205:11 - again this way
205:12 - since we we're not going to have any
205:13 - values over zero we don't need to worry
205:15 - about that
205:16 - so we can just do g db minus
205:20 - 24. right now
205:22 - uh let's just adjust the text bounding
205:25 - box like we did before
205:27 - so we know our x position is going to be
205:29 - on the far left
205:30 - not on the actual left but like one
205:32 - pixel off from it so r dot set x
205:35 - one uh we need to recompute our string
205:38 - width
205:39 - then we need to set our size accordingly
205:42 - then
205:42 - um we can set our color to just always
205:44 - be light gray
205:45 - that was written up here
205:49 - then let's just draw our fitted text
205:52 - inside this rectangle all right so
205:56 - that's good times all we are changing is
205:57 - the x position
205:59 - and then the actual size of it all right
206:01 - let's take a look
206:04 - all right cool we got our 0 minus 12
206:06 - minus 24
206:08 - minus 36 minus 48. cool
206:11 - all right so that takes care of that
206:13 - background grid
206:15 - let's do a little cleanup
206:19 - and then um yeah do that clean up
206:23 - let's take a quick look through all this
206:24 - stuff
206:27 - here we go get rid of that line get rid
206:30 - of this
206:32 - okay that takes care of those guys so
206:35 - what we're gonna do next
206:36 - is the fft analyzer and then the bypass
206:39 - buttons
206:40 - okay let's um commit that
206:43 - what we added here this is a code
206:45 - cleanup
206:46 - and then we also added analyzer decibel
206:50 - marks
206:51 - added analyzer decibel
206:54 - marks cleaned up code awesome
207:06 - all right let's head on over to
207:08 - pluginprocessor.h
207:10 - okay go up to the top now our analyzer
207:13 - will
207:14 - display two fft curves one for each
207:17 - audio channel
207:18 - that's because the fft algorithm
207:20 - operates on a
207:21 - single channel of audio okay
207:24 - uh we are going to express that
207:27 - programmatically
207:29 - all right this is uh effectively
207:32 - zero effectively one
207:36 - okay now the fft operates the fft
207:39 - algorithm operates on a
207:41 - fixed number of samples the host is
207:44 - passing in buffers which can have a
207:47 - variety of different sizes so we need a
207:49 - way to collect them into blocks
207:51 - of fixed sizes that's what this class
207:55 - does
207:58 - that's what this class right here does
207:59 - i'll zoom out a little bit i'm not going
208:01 - to explain how it works
208:07 - right if you want to know how this class
208:09 - works or how to make it
208:11 - you can check it out in my uh pfm
208:13 - project 11 course where i
208:15 - explain how to make every little part of
208:17 - this and how to get it all to work
208:18 - together
208:21 - okay let me zoom back in
208:24 - next while our single sample fifo is
208:27 - collecting individual samples
208:29 - from the buffers into blocks we need a
208:31 - fifo that the gui thread can use to
208:33 - retrieve these blocks
208:35 - that this single channel sample fifo has
208:38 - produced
208:39 - that's what this class does that's what
208:42 - this class right here does
208:46 - all right if you want to know how to
208:47 - make this or how to write it you can
208:49 - learn
208:49 - how this gets put together in my course
208:51 - pfm c-plus plus for musicians
208:54 - all right you can check those guys out
208:55 - links in the description and all that
208:57 - good stuff okay
208:59 - let's go to the next part all right we
209:02 - need some instances of these things so
209:04 - let's go to our class down here
209:07 - now we're going to need one instance of
209:08 - this single channel fifo per
209:10 - audio channel remember we are working on
209:13 - stereo buffers
209:15 - because it is a templated class i'm
209:17 - going to create a type alias to the type
209:19 - that we will be passing
209:20 - into it so we don't have to type so much
209:23 - okay these also need to be public
209:25 - because the gui is going to need to
209:26 - access them okay we are going to need
209:28 - pointers to this class in the gui side
209:30 - of things
209:30 - and this alias will make it easier to
209:33 - declare
209:34 - instances to declare pointer instances
209:38 - of that single channel sample fifo so
209:41 - let's do that now
209:45 - and then let's declare our instances
209:53 - all right the single channel fifos need
209:55 - to be prepared so let's go do that in
209:57 - our plug-in processor
209:59 - prepare to play a lot of pete words
210:01 - right there
210:03 - prepare to play go to the bottom of it
210:05 - after our filters this is where we're
210:06 - going to prepare our fifos
210:09 - left channel fifo dot prepare
210:12 - samples per block same thing for the
210:15 - right side
210:17 - okay now we just need to push buffers
210:20 - into it so go to the process block
210:22 - and at the very end after our processing
210:24 - is done
210:28 - we're going to update it with our buffer
210:31 - same for the right side okay let's go to
210:35 - our plugin editor dot h
210:39 - and we're going to go to our uh response
210:42 - curve component
210:43 - the bottom of it we are going to convert
210:45 - some audio samples into fft data
210:48 - this is not going to be simple okay we
210:50 - are basically going to build
210:52 - um this system let's see i have this
210:54 - kind of drawn out
210:56 - on this grid i'll let me make it bigger
210:59 - because it's important to know what's
211:00 - going on
211:01 - okay we are basically going to build
211:03 - this system right here
211:05 - so here's what happens the audio buffers
211:08 - from the host go into the
211:09 - single channel sample fifo right here
211:13 - okay the single channel uh single
211:15 - channel sample fifo spits out
211:17 - fixed size blocks okay
211:20 - then these fixed size blocks go into an
211:22 - fft data generator
211:25 - right and this thing spits out fft data
211:28 - blocks
211:29 - the fft data blocks go into a path
211:32 - producer right here and then the path
211:35 - producer spits out juice
211:37 - path instances and finally the gui
211:40 - consumes those
211:41 - and renders the paths okay so
211:44 - buffers of random size are fed into the
211:47 - single channel sample fifo right here
211:49 - this thing spits out fixed
211:50 - size blocks then those go into an fft
211:53 - data generator
211:54 - the fft data generator spits out fft
211:57 - data blocks
211:58 - then those get run through a path
211:59 - producer which produces juice
212:01 - paths and those get rendered and
212:04 - consumed by the gui
212:05 - okay that's what we're gonna build okay
212:08 - so let's give ourselves a pointer to one
212:11 - of the audio processors single channel
212:13 - sample fifos single
212:17 - channel sample fifo uh it's that block
212:20 - type
212:21 - simple eq audio processor
212:24 - block type this is gonna and we're doing
212:28 - a pointer to it
212:29 - left channel fifo we're just gonna do
212:31 - the left side for right now
212:34 - let's go to our cpp file let's go to our
212:38 - uh response curve constructor
212:42 - and we need to initialize this guy let's
212:45 - put this on its own line
212:48 - um this is where we're going to do left
212:50 - channel fifo and we want to pass it the
212:54 - audio processor dot what's the name of
212:57 - that thing the left channel fifo
213:00 - okay let's go to our timer callback
213:07 - now this is where we are going to
213:09 - coordinate all of those pieces of the
213:10 - system
213:11 - let me pull this back up we are going to
213:15 - coordinate
213:16 - um coordinate this thing
213:20 - with this with this and with this okay
213:22 - we're gonna coordinate all those little
213:24 - parts together
213:26 - first thing we're gonna do is the single
213:28 - channel
213:29 - uh sample fifo so here's the logic we
213:31 - are going to use
213:32 - while there are buffers to pull if we
213:35 - can pull a buffer we're going to send it
213:37 - to the fft
213:39 - data generator so the first thing we
213:40 - need is a temp buffer to pull into
213:43 - okay we're going to do this um before
213:46 - all of this uh parameters change stuff
213:49 - okay let's make our temporary buffer
213:53 - all right uh just before we do that
213:55 - actually let me go through and just
213:56 - clarify the interface
213:58 - um for our fifo guy single channel
214:01 - sample fifo all we need care about is
214:03 - like
214:04 - uh how do we feed it buffers how do we
214:07 - prepare it and how do we get
214:10 - buffers from it okay this is how we know
214:13 - how many we have and this is how we
214:14 - actually get a buffer from it
214:16 - okay very simple to use same thing for
214:19 - this fifo right here
214:20 - we just push stuff into it and pull
214:24 - stuff out of it
214:24 - and make sure that we've prepared it
214:26 - with however much
214:28 - pre-allocated space we need okay
214:31 - all right so we need to um go through
214:34 - this logic again
214:36 - you know while there are buffers to pull
214:38 - from the single channel sample fifo
214:40 - if we can pull it then we're going to
214:41 - send it to the fft data generator
214:44 - all right so let's add our while loop
214:45 - while left channel fifo
214:49 - get num buffers available if that's
214:51 - greater than zero
214:52 - there are more than zero buffers
214:55 - available to be pulled
214:56 - let's try to pull one get
214:59 - give me that audio buffer temp incoming
215:02 - buffer
215:03 - if we can pull one of these then we are
215:05 - going to send it to the fft data
215:08 - generator
215:10 - all right now it is very important that
215:11 - we maintain the order of the blocks
215:13 - coming in from the audio thread
215:16 - so before we send audio samples to the
215:18 - fft data generator which we have not
215:20 - written yet
215:21 - we have to make sure that they stay in
215:22 - the same order okay we also need to make
215:24 - sure that the blocks being sent to the
215:26 - ffd
215:27 - uh data generator is the right size so
215:30 - let's create a mono buffer first for
215:32 - that
215:37 - all right let's go over to our header
215:38 - file put this right here
215:42 - so this is what we are this is what the
215:44 - buffer we are going to create now is
215:46 - what we will be ferrying
215:48 - blocks of audio from right to left
215:50 - through
215:51 - so um let me see let me just draw a
215:54 - quick graph of what i'm talking about
215:56 - here
215:59 - okay so what i was saying about how the
216:01 - buffers need to be ferried from the
216:02 - right side to the left
216:04 - so this is an example of like of
216:06 - waveform you know t
216:07 - equals zero and then all the way to the
216:09 - end of it okay so what happens is
216:12 - the buffers are passed to us from the
216:14 - host and they you know
216:15 - that's what these a b and c blocks are
216:17 - so what happens is we're given a and
216:20 - then
216:20 - we need to basically when we consume
216:24 - things with our fft and our um
216:27 - single channel sample fifo we're
216:28 - basically taking one of these blocks and
216:30 - then running it through that
216:31 - chain that i showed before and then the
216:33 - whole thing needs to shift over
216:35 - uh this direction okay so the a block
216:39 - gets discarded
216:40 - right it was just consumed by the gui
216:42 - and then what was in
216:43 - block b and c they get shifted over like
216:46 - this so you can see the continuity
216:48 - of this point right here to this point
216:49 - right there same for that point right
216:51 - there in that point there
216:52 - here's the new data from the host it's
216:54 - getting um
216:55 - added to the waveform right here so it's
216:57 - all continuous
216:58 - and that gets now we consume this part
217:00 - right here okay then the same thing
217:02 - happens this little chunk of audio gets
217:04 - run through the fft
217:05 - stuff and produce is turned into a path
217:07 - and then that gets
217:09 - consumed and then the whole thing gets
217:10 - shifted over again so that's why
217:12 - you can see that this piece gets shifted
217:15 - to block number two then it gets shifted
217:18 - to block number one and then it gets
217:19 - consumed okay so that's what i meant
217:21 - about how we have to append
217:23 - uh the blocks um to the end of it and
217:26 - shift everything
217:27 - uh towards the front of the vector
217:30 - okay so we're going to implement that
217:32 - now okay
217:33 - so uh we are going to need a uh
217:37 - we're going to need a monobuffer because
217:39 - remember these are mono channels of
217:40 - audio
217:41 - um newest blocks are going to get stuck
217:43 - at the end and the oldest blocks are
217:44 - going to go at the front so that way
217:45 - everything gets kind of you know
217:47 - shifted over this way okay step
217:51 - 14. all right let's go back to our cpp
217:53 - file now that we have declared a mono
217:55 - buffer
217:56 - all right first we are going to shift
217:57 - everything in the mono buffer
217:59 - forward by however many samples there
218:02 - are in that temporary incoming buffer
218:04 - okay so let's get our size first
218:10 - all right now let's do the copy
218:17 - okay so we are copying
218:22 - everything from this point which is
218:25 - size samples across let me pull this
218:27 - picture back up
218:29 - okay so let's pretend that this is our
218:32 - monobuffer right here it contains this
218:34 - waveform in terms of samples
218:36 - okay our new chunk of data um is going
218:39 - to get appended here so what we need to
218:40 - do is
218:41 - basically copy all these samples
218:43 - starting at position b
218:45 - shift them over by however much this is
218:49 - this direction so that's what we do here
218:50 - first we get uh
218:52 - we're going to copy everything to the
218:53 - zero with uh index right there
218:56 - and then we're gonna start reading from
218:58 - this point which is b
219:00 - okay that's what this thing does that's
219:02 - our index size
219:04 - that's our index um right there and then
219:07 - we're gonna read
219:08 - uh this many samples so if our buffer is
219:11 - holding this long and we are going to
219:13 - read uh
219:15 - this many samples from it that's how
219:16 - much we have to shift over so
219:18 - we need to keep this much okay i didn't
219:20 - explain that very well but
219:22 - you can see from the code here what's
219:23 - happening so once we have done that now
219:25 - we can copy
219:26 - our temp buffer uh copy all the samples
219:28 - from that to the end of our mono buffer
219:31 - so our size we're going to copy that
219:34 - many samples
219:35 - put this on its own line our source is
219:37 - going to be the temp incoming buffer
219:39 - um it's going to be the zeroth channel
219:42 - zero with index and we're going to copy
219:45 - it
219:46 - to our monobuffer get right pointer
219:49 - copying it to the zeros channel and our
219:51 - sample index
219:52 - is going to be this position okay if
219:55 - this doesn't make much sense to you
219:57 - i suggest that you get out a a line
220:00 - graph
220:01 - uh draw a number line and then
220:04 - you know just like manually draw a block
220:07 - of data moving from one part
220:09 - to earlier in the chain to earlier in
220:11 - the chain and data being added after it
220:13 - and use varying sizes so you can see how
220:16 - what we how far we have it have to move
220:18 - it backwards
220:20 - uh sorry how far we have to move it
220:22 - towards the front
220:23 - is dependent upon what size of our block
220:26 - that is coming in
220:28 - is okay so that takes care of those
220:31 - things all right
220:32 - we're shifting over the data and then
220:34 - we're copying this to the end
220:36 - and the good thing um about this is that
220:40 - um the monobuffer never actually changes
220:43 - size
220:43 - so the next thing to do is to write the
220:45 - fft data generator
220:47 - however if you remember what i said
220:49 - earlier the fft
220:50 - requires a specific number of samples in
220:52 - order to do its processing so we must
220:54 - make the monobuffer
220:56 - have that same size and this is good
220:58 - because we don't know how big to make
220:59 - the monobuffer
221:01 - for us to be able to copy into it and to
221:03 - move samples around it
221:04 - like at this point based on our current
221:06 - code this is not going to work it's
221:08 - going to explode because the monobuffer
221:09 - doesn't have any channels and it doesn't
221:10 - have any samples
221:11 - so we're going to try to do like a
221:13 - negative we're going to copy like
221:15 - negative samples and it's just going to
221:17 - explode okay
221:19 - so once the fft data generator is built
221:21 - we will know
221:22 - what size to use for the monobuffer so
221:25 - we're going to do that next
221:26 - once we are done with those two things
221:28 - then we can start sending buffers
221:30 - from uh the we can start sending mono
221:32 - buffers into the fft data
221:35 - generator okay so let's make this next
221:38 - all right this is going to go up here
221:39 - all right this is the fft data
221:42 - generator all right let's take a quick
221:45 - glance at it
221:46 - it's got a lot of good stuff in it it's
221:48 - pretty it's a pretty
221:50 - complicated piece of uh software
221:52 - machinery
221:53 - now if you want to know how to build it
221:55 - yourself i go through the entire process
221:57 - from scratch
221:58 - in the pfm project 11 course all we need
222:01 - to know
222:02 - for our purposes is how do we feed it
222:05 - audio
222:05 - how do we get fft data out of it and
222:08 - then how do we configure it
222:10 - okay so let's do the configuration first
222:12 - uh configuration depends on this stuff
222:14 - right here
222:15 - here's how we feed audio into it
222:19 - and then here's how we get our fft data
222:22 - and here's how we
222:23 - see how much ffdata fft data we have
222:26 - available to us okay
222:27 - that's the basic interface all right
222:29 - let's give ourselves an instance of this
222:31 - after our monobuffer all right now the
222:34 - fft data generator
222:36 - operates on vectors of floats not audio
222:39 - buffers
222:40 - okay let's go to our constructor
222:43 - so we can initialize this thing okay go
222:45 - to our response curve constructor
222:47 - okay we're going to do this before we
222:49 - start updating our chain all right let's
222:51 - use an order of
222:52 - 2048 that'll give us some really nice
222:55 - resolution
222:55 - in the uh uh that'll give us average
222:58 - resolution
222:59 - um in the uh lower end of the spectrum
223:03 - okay we're basically going to be
223:04 - splitting the audio spectrum up into
223:07 - uh 2048 or 4096.
223:11 - basically whatever value we pick from
223:12 - here okay we can do 2848
223:15 - 4096 8192 basically what we are doing is
223:18 - splitting up the audio
223:19 - spectrum from 20 hertz to 20 000 hertz
223:22 - into
223:23 - 2048 equally sized frequency bins now
223:27 - these bins
223:28 - store the magnitude level for a
223:30 - particular range of frequencies
223:32 - i'm not going to get into the math
223:34 - behind this but here's the simple
223:35 - summation
223:37 - okay if we have 2048 bins and a sample
223:40 - rate is
223:42 - 48 000 then each bin represents roughly
223:45 - 23 hertz in our spectrum okay so that's
223:48 - very simple math if our sample rate is
223:51 - 48 000
223:52 - and then we have 2048 bins each bin
223:56 - roughly accounts for 23 hertz so that
223:59 - means
224:00 - we're going to let this means we're
224:02 - gonna get a lot of resolution at the
224:03 - upper end
224:04 - and not a lot of resolution at the
224:06 - bottom end so let's
224:07 - just take a look um at our plot so you
224:10 - can see what i'm talking about okay you
224:12 - can see that like
224:13 - whoops yeah this is what i meant about
224:15 - how it doesn't um
224:17 - let me comment out that code this stuff
224:19 - right here let's comment this out so
224:20 - this is what i meant how like if each
224:22 - bin
224:22 - represents 23 hertz between 20 and 50
224:26 - between this part of the display and
224:27 - this part of the display
224:28 - you know 20 plus 23 is 43 so
224:33 - that's how big one bin is way down here
224:35 - okay
224:36 - but way up here we've got 2 000 to 5
224:39 - 000. how many bins are there
224:41 - let's find out so 5 thousand minus two
224:44 - thousand
224:45 - okay divided by oops divided by 23.
224:49 - there's a hundred and thirty bins that
224:50 - are in between here
224:52 - so we're going to get a lot of
224:53 - resolution
224:55 - uh way up here but not a lot of
224:57 - resolution down here
224:59 - okay this is the big problem with fft
225:01 - but it's you know
225:02 - it's just that's just how it works okay
225:06 - so the lowest five percent of this fee
225:08 - of the
225:09 - frequency spectrum is going to represent
225:11 - 50 percent of the display and the
225:12 - remaining 95 percent
225:14 - is going to represent the other
225:18 - um yeah and it's going to represent the
225:20 - other
225:21 - uh 50 what is that referring to i am
225:24 - referring to
225:25 - where we've got one kilohertz is 50 of
225:28 - the display from zero to one kilohertz
225:31 - and our
225:31 - range is 20 kilohertz so that means this
225:34 - is 120th
225:36 - from right here to right here we cover
225:38 - five percent of our frequency range
225:40 - and then this part the other half of the
225:42 - display is covering the remaining 95
225:44 - percent
225:44 - okay so all this is saying that you know
225:47 - um
225:48 - our we're going to get a ton of
225:49 - resolution here um
225:51 - not a lot of resolution here the only
225:54 - ways to
225:55 - improve that is to increase the fft
225:57 - order
225:59 - when you do that the fft ends up
226:02 - needing more and more cpu so there's a
226:05 - nice balance between
226:07 - 2048 versus 4096
226:11 - versus 8192 in terms of these
226:15 - the order that the fft is configured in
226:18 - okay um that was kind of confusing but
226:21 - basically
226:22 - when you make the order higher you get
226:24 - more resolution in the lower end at the
226:26 - expense of
226:27 - more cpu okay so we're gonna put it at
226:30 - 2048
226:32 - uh frequency bins for right now just so
226:34 - that way
226:36 - we don't have major performance impacts
226:39 - when we actually use this thing let's
226:41 - turn this back on
226:43 - let's go back to our constructor and now
226:45 - we're going to configure this
226:47 - left channel fifo left channel fft data
226:49 - generator dot
226:51 - change order and we're going to use fft
226:53 - order oops fft
226:54 - order and 2048. all right now that our
226:58 - fft data generator has been configured
227:01 - we can initialize the monobuffer with
227:03 - the proper
227:04 - size so we can do monobuffer dot set
227:07 - size
227:08 - we are processing one channel and our
227:11 - number of samples
227:12 - is whatever size this thing needs
227:15 - left get fft size we can uncomment these
227:18 - guys these guys are uncommented
227:20 - all right now that we have this and the
227:22 - monobuffer is set up and the fft data
227:25 - generator is ready to receive buffers we
227:27 - can start sending
227:28 - mono buffers to the generator so we can
227:30 - do
227:31 - left channel fft data generator dot
227:34 - produce
227:36 - some fft data we're going to pass it the
227:38 - mono buffer
227:39 - and we want to use negative infinity
227:44 - we want to use our negative 48 as where
227:46 - negative infinity is or we can change
227:48 - this value later
227:49 - okay so let's check this out i'll just
227:52 - put negative 48 because i want the
227:53 - bottom of my display
227:55 - bottom of my spectrum analyzer that grid
227:57 - point
227:58 - um i had set the scale to negative 48 so
228:01 - i'm going to use that right now for
228:02 - the concept of negative infinity okay so
228:05 - let's build it and see what happens
228:07 - all right build failed why are we
228:09 - failing too few arguments
228:11 - expect to call aha this is because our
228:14 - fifo class needs a second prepare
228:15 - function to
228:16 - handle when the type is vector not audio
228:19 - buffer
228:20 - that's over here in our plug-in
228:21 - processor all right it wants this
228:24 - we are currently using this let's see
228:26 - what's going on prepares declared here
228:28 - we are instantiating it um where is this
228:31 - being called from
228:33 - it's being called right here where we've
228:34 - got an uh fifo
228:37 - uh with our block type of um
228:40 - where was this declared this was being
228:42 - declared with uh std vector
228:45 - okay so that means this fifo has a block
228:48 - type
228:49 - of std vector okay and so obviously
228:52 - std vector does not have a set size
228:55 - function so we need to
228:57 - create a new prepare function all right
228:59 - let's go do that
229:00 - all right let's use some static asserts
229:02 - to remind us if we are using
229:05 - to remind us which prepare function to
229:06 - use so we'll do static
229:08 - assert our expression is going to be std
229:11 - is same there it is all right
229:15 - if um our template type is t
229:19 - um we want to only use this prepare
229:22 - function
229:23 - if our t is audio buffer
229:26 - so prepare num samples
229:30 - okay it's helpful helping ourselves
229:34 - so check it out if we build it now
229:36 - static assert failed
229:38 - so that's fantastic failed to meet
229:40 - requirement
229:41 - and then we can see the message it
229:43 - should only use one fifo
229:45 - okay that's good times and it says right
229:47 - here uh
229:48 - instantiation of member std uh fifo std
229:52 - vector
229:53 - okay so we can you know help ourselves
229:55 - out that way
229:56 - let's write the other uh prepare
229:58 - function void prepare
230:00 - and this is gonna be size t num elements
230:02 - because
230:03 - vector uses size t internally we'll do
230:06 - the same
230:07 - static assert we'll change the message a
230:10 - bit
230:11 - instead of this we will use std
230:14 - vector and this should be num elements
230:18 - num elements should only be used when
230:20 - the fifo is holding
230:22 - std vector float all right let's uh loop
230:25 - through this
230:26 - here we're gonna go for auto buffer
230:29 - buffers buffer uh let's see
230:33 - dot clear clear at first then buffer dot
230:35 - resize
230:37 - num elements and fill it with zeros
230:40 - all right now let's build it all right
230:42 - build succeeded
230:44 - let's head on over to plugineditor.cpp
230:47 - now the fft data generator let's go down
230:50 - to our timer callback
230:51 - okay the fft data generator is producing
230:54 - fft data blocks for us
230:56 - so now we need to turn those blocks into
230:58 - a path
230:59 - instance okay so let's write a path
231:02 - generator class
231:04 - all right let's go up to our header file
231:06 - we'll go after the
231:07 - fft data generator before the look and
231:11 - feel guy
231:12 - now this class is going to take in this
231:13 - fft data
231:15 - a bounding box info about the fft size
231:18 - and the bin width and it's going to spit
231:20 - out a path okay
231:21 - now this is the this is a simplified
231:23 - version of the path producer in
231:26 - project 11 so if you want to learn how
231:28 - to make the advanced version
231:30 - check out the course you're going to
231:32 - learn to make all this stuff from
231:33 - scratch
231:34 - by yourself i'm going to give you the
231:35 - instructions and then review your code
231:37 - which is pretty cool all right let's do
231:39 - this
231:40 - all right i'm just going to paste it
231:42 - right here okay we can check this out in
231:44 - just a little bit
231:47 - okay all we need to know is how to feed
231:50 - it
231:51 - our data via the generatepath function
231:53 - and then how to get
231:54 - paths out of it that's what this does
231:57 - right here
231:58 - okay so we've got our number available
232:00 - we've got our
232:01 - uh our function that gives us any paths
232:03 - that we request
232:05 - and then here's how it actually converts
232:07 - that into data so again if you want to
232:09 - learn how to actually write this from
232:10 - scratch
232:11 - and learn how it actually works this is
232:12 - a simplified version of the big one
232:15 - in the full course okay all right
232:18 - obviously we are going to need an
232:19 - instance so let's give ourselves one of
232:21 - those
232:22 - that goes down here analyzer
232:25 - path generator we want to feed it
232:29 - juice paths or we want it to produce
232:32 - juice
232:32 - paths for us path producer
232:36 - now we can go back to our timer callback
232:39 - and use our
232:40 - familiar logic while there are fft
232:43 - data buffers to pull if we can pull a
232:46 - buffer
232:47 - let's generate a path okay so i'll just
232:51 - make a little comment myself
232:53 - if there are fft data buffers
232:57 - to pull if we can pull a buffer
233:01 - generate a path all right very simple
233:05 - okay now the path producer will produce
233:07 - a path inside of whatever bounding box
233:09 - we give it
233:10 - okay let's just take a look at this
233:11 - interface real quick all right so we've
233:13 - got
233:14 - it wants some rendered data it's going
233:16 - to want a bounding box and it wants to
233:18 - know the fft size
233:19 - the bin width and where negative
233:21 - infinity is
233:23 - or what value is being considered
233:24 - negative infinity
233:26 - okay so let's provide those things
233:30 - so our bounding box is going to be our
233:33 - fft bounds get analysis area
233:37 - and it wants it to be to float all right
233:40 - and it needs to know the fft
233:42 - size and the bin width and frequencies
233:44 - so
233:45 - the fft size as we showed in the
233:47 - constructor
233:48 - we can just get it right from the
233:50 - constructor like that or right from that
233:52 - uh
233:52 - fft generator class auto fft
233:56 - size oh these should be const because
233:58 - they're not going to change
234:00 - okay and then we need to know our bin
234:03 - width
234:04 - and that's going to be as we showed up
234:06 - here our sample rate divided by our
234:09 - fft size let me just copy this down here
234:14 - bin width all right
234:18 - so const auto bin width equals
234:22 - audio processor i'll get the sample rate
234:25 - divide that by our fft size convert it
234:28 - to double because
234:29 - sample rate is a double okay
234:32 - now we can implement our logic here
234:35 - while
234:36 - left channel f50 data generator
234:40 - um while it has fft blocks whoops
234:44 - right if it has more than zero blocks
234:47 - available
234:47 - let's try to get one okay we need a
234:51 - temporary vector
234:52 - std vector float uh fft data
234:57 - put past that here all right if we're
235:00 - able to pull one
235:01 - then we can pass our vector of
235:05 - fft data to our fft data
235:08 - to our path producer sorry okay one more
235:11 - time
235:12 - so we're going to check if we have more
235:14 - than zero
235:15 - fft blocks available good
235:18 - um if we if there are more than zero fft
235:21 - blocks available let's try to pull one
235:23 - and if we are able to pull one this
235:25 - vector now contains our fft data which
235:27 - we can then
235:28 - feed to our paths producer okay
235:31 - so let's pass that along fft data we
235:34 - know our bounds that's that fft bounds
235:36 - we know our fft size we know our bin
235:39 - width
235:40 - and we'll use that negative 48 again for
235:43 - the
235:44 - concept of negative infinity all right
235:47 - that should build without errors
235:50 - all right good times i'll let you see
235:53 - this uh
235:53 - fft this path generator one more time so
235:56 - you can
235:57 - try to copy the code real quickly scroll
235:59 - down a little bit you can just pause the
236:00 - video if you need to to see it
236:02 - good times same for this one right here
236:05 - all right
236:06 - there's the path there's the data
236:07 - generator
236:09 - okay all right so this builds currently
236:12 - um we are almost there we just need to
236:14 - retrieve these paths
236:16 - and then draw them all right go to your
236:19 - plugin editor dot h
236:21 - okay go down to after where we added our
236:24 - path producer
236:26 - all right we have at this point we are
236:29 - producing paths in our path generator
236:31 - now we just need a path to draw and to
236:34 - pull into okay
236:35 - because remember we're pulling it from
236:36 - the timer callback we need to get it
236:37 - into our paint function
236:38 - so it needs to be a member variable
236:41 - choose path
236:42 - left channel fft path okay
236:46 - that's makes sense why we have that
236:49 - all right let's go to our plugin editor
236:51 - back to our timer callback
236:52 - so at this point a path producer has
236:55 - potentially created a path for us
236:58 - so we need to try to pull them
237:02 - now what happens if we are producing
237:04 - paths
237:05 - faster than we can consume them we just
237:08 - want the most recent one so our logic is
237:10 - going to be
237:12 - while there are paths that can be pulled
237:16 - pull as many as we can because we only
237:21 - we're only going to display the most
237:23 - recent path
237:26 - all right so while uh
237:29 - path producer get num paths available
237:33 - now we can do path producer
237:35 - get path and we can use our left channel
237:39 - fft data path okay
237:43 - that has successfully pulled that path
237:46 - now
237:47 - previously we were only repainting
237:49 - whenever the um
237:50 - parameters were changed but because
237:52 - we're pulling paths all the time
237:54 - we need to repaint all the time so this
237:57 - gets commented out
237:59 - this goes here repaint like that
238:02 - all right now we just need to paint the
238:04 - actual path
238:06 - let's go here all right let's go to our
238:09 - timer
238:10 - let's go to our paint function and let's
238:12 - draw this
238:15 - where are we going to draw this let's
238:16 - draw this before we draw our
238:19 - uh where is this let's draw this before
238:21 - we draw our rendered area so it's behind
238:23 - everything
238:24 - okay let's do let's i'm going to use a
238:25 - blue color
238:27 - all right and we can just do g stroke
238:29 - path
238:30 - left channel fft data fft path and then
238:34 - i'm just going to use a path stroke type
238:35 - of
238:37 - with a thickness of one and let's run it
238:40 - we should see something oh my fault what
238:42 - is going on here i spelled that wrong i
238:44 - did spell that wrong okay let's run this
238:48 - um not as the standalone but as the
238:50 - plugin
238:51 - has the plugin in the audio plugin host
238:54 - okay we should see something
238:56 - once we actually press play okay
238:59 - all right we have a blue line what
239:00 - happens if we actually run audio through
239:02 - this
239:03 - all right it's doing something
239:07 - [Applause]
239:09 - okay cool that is an fft that is a
239:11 - spectrum analysis
239:13 - okay now it's in the wrong place but it
239:15 - is working
239:16 - which is awesome so we can fix that
239:18 - positioning next
239:20 - let's make a commit of that because that
239:22 - was a lot all right uh
239:24 - implemented basic fft
239:28 - um design
239:31 - okay of course in the description i will
239:34 - have
239:35 - um you can the links in
239:39 - the links in the description the links
239:41 - in the description
239:42 - will um there will be a link to this
239:44 - repository so you can check out the code
239:46 - for yourself
239:47 - um uh once this video is out
239:51 - and then you can get the code for the
239:52 - single channel sample fifo the fft data
239:55 - generator and the analyzer path
239:56 - generator
239:58 - okay all right now there's a small bug
240:01 - right here
240:02 - with the way this stuff is getting
240:03 - mapped we are currently mapping from
240:07 - um we're mapping our bin frequency from
240:10 - 1 to 20 hertz but our frequency range is
240:12 - not 1 to 20 hertz it's
240:13 - 20 to 20 hertz so that's the first bug
240:16 - fix we need to do
240:18 - okay if we run this and check it out it
240:21 - should look a little bit different
240:23 - or the x positions should look a little
240:25 - bit different
240:31 - okay now it's hard to tell but basically
240:33 - we weren't seeing a lot of left
240:35 - stuff on the left side okay so that's a
240:38 - good time
240:39 - all right let's close that let's save
240:42 - this so our parameters are saved
240:44 - and we if we want we can use a different
240:46 - color to make the paths more
240:49 - visible it's you know that blue color is
240:51 - kind of hard to see
240:52 - okay let's start making this show up in
240:55 - the right spot
240:56 - okay let's go to our paint function okay
240:59 - now when the path generator creates a
241:01 - path
241:02 - it does not take into account the origin
241:04 - of the rectangle that defines
241:06 - the bounding box so we need to translate
241:09 - our path
241:10 - to the analysis bounding boxes origin
241:13 - okay right now this path is drawn at
241:16 - zero
241:16 - comma 0 and we need it to be drawn at um
241:20 - our response areas x and y that needs to
241:23 - be the left side of the path okay
241:24 - so we need to do a translate first so
241:26 - let's do that right here
241:28 - left channel fft path dot
241:31 - apply transform so we're going to do a
241:34 - normal a fine transform and we're going
241:36 - to add a translation to it
241:39 - so we want to do response area dot get x
241:42 - and response area dot get y
241:46 - okay what does that do if we run it
241:49 - that should be all we need to do okay
241:52 - cool this is like
241:53 - right the right on the negative 48 so
241:55 - let's push play
241:57 - cool so it's now drawing in the right
241:59 - spot i'm gonna use a different
242:01 - use like sky blue or something for this
242:02 - instead of that dark blue
242:04 - so we can see it a little bit better oh
242:07 - what happened here oh there's a bug for
242:08 - that
242:09 - that's right it's gonna do that for a
242:10 - while for some reason
242:12 - um we'll figure it out the fft data is
242:15 - just full of
242:17 - nands i'll just comment that out for
242:20 - right now
242:22 - okay let's press play all right that's
242:24 - easier to see
242:26 - that's all i'm trying to show
242:28 - [Applause]
242:30 - okay cool all right we'll figure that
242:33 - out in a little bit
242:35 - all right let's make a commit showing um
242:37 - that we fixed the positioning
242:38 - because sometimes those types of bugs
242:40 - will take a long time
242:43 - to diagnose and then solve okay so
242:46 - fixed fft path position
242:50 - stage that stage that stage that
242:53 - okay next we need to verify the accuracy
242:57 - of the analyzer
242:59 - now to do this we are going to go to our
243:02 - pluginprocessor.h
243:04 - we are going to well we're going to
243:07 - switch to the standalone version
243:09 - and then we are going to we're going to
243:12 - use an oscillator to do this
243:13 - and we need to initialize it prepare it
243:15 - and then use it in the process block
243:17 - so we're going to feed it a test signal
243:19 - go way down here
243:20 - right down to the bottom after our
243:21 - update filters so juice
243:24 - dsp oscillator float
243:28 - like that okay that is now declared
243:31 - we're going to
243:32 - make this produce a sine wave at a
243:33 - particular frequency and we want it to
243:35 - line up with our
243:37 - we want it to line up on our grid where
243:39 - it should
243:40 - okay so let's go to our um where do we
243:43 - go next
243:44 - we go we need to prepare it so let's go
243:46 - to our prepare to play function
243:49 - let's do this at the end uh the
243:51 - oscillator wants a function
243:53 - that returns a value when you feed it a
243:56 - radian angle
243:57 - okay so std sine wrapped in a lambda
243:59 - will do that for us so
244:00 - oscillator dot initialize here it wants
244:03 - um
244:04 - uh lambda that takes in a number and
244:07 - returns a number
244:08 - so let's do that here's our number that
244:11 - it's going to take
244:12 - and then here's what it's going to
244:13 - return
244:15 - okay now we need to prepare it and we
244:18 - can use the same spec for our chain as
244:20 - long as we just change
244:21 - the number of channels okay previously
244:24 - we were given
244:25 - um we were saying our spec only had one
244:28 - channel we just need to change that
244:29 - spec.num channels equals get total
244:33 - num output channels sure
244:36 - and then we can prepare it ask.prepair
244:39 - the spec then let's give it a frequency
244:42 - of 200
244:43 - because that's one of our points in the
244:45 - grid ask.set frequency we'll be changing
244:48 - that frequency
244:49 - for a while just to verify the accuracy
244:52 - so i'm going to go with uh
244:54 - uh that value 200 initially
244:57 - and let's see what comes next
245:00 - all right let's go to our prepare our
245:03 - process block because we want to
245:04 - use our oscillator to fill the buffer
245:07 - okay so we're going to do this before
245:09 - we um we're going to do this after our
245:11 - filters
245:12 - are configured but before we actually
245:14 - run the sound through
245:17 - the filters we don't want to hear any of
245:19 - the audio that's currently coming in
245:21 - so we'll do buffer.clear
245:24 - and then we need to make a stereo
245:26 - context and then give it to our
245:27 - oscillator to process
245:29 - that's all we have to do so let's see
245:32 - this block is already stereo
245:35 - so let's see i'm going to
245:38 - move this after this thing
245:42 - okay buffer's clear we need let's make
245:43 - our stereo context for this block
245:47 - stereo context from the block and then
245:50 - now we can just do
245:52 - ask.process stereo
245:55 - context all right that's it okay and we
245:58 - can now check the accuracy
246:00 - so apologies in advance for the annoying
246:02 - sine waves we're going to hear
246:08 - okay so our frequency was 200 so let's
246:11 - try 500 and 1050 and
246:14 - 5k and see what it looks like so i'm
246:17 - going to change this to
246:18 - a thousand we should see a little blip
246:22 - right at that point
246:25 - all right that's good for me thousand
246:28 - let's do the annoying one
246:29 - five thousand
246:33 - yep right at 5k yikes that's painful
246:36 - let's make this 50. this will be the
246:39 - last one that we test
246:41 - all right i'm not seeing anything at 50
246:43 - so let's try 100.
246:47 - all right there's our 100 okay so 50 was
246:50 - pretty low for some reason it's pretty
246:51 - accurate
246:52 - it you know it's showing a peak at 100
246:54 - it showed a peak at 200
246:56 - 1k 5k okay so
246:59 - that's good times um if we want to do
247:01 - more resolution in the lower end we
247:03 - could just change the order
247:05 - of the fft generator but this is good
247:06 - enough for this project you know like
247:08 - we're just trying to get our feet wet
247:09 - and understand how some of these
247:11 - uh things get put together in audio
247:13 - plugins
247:14 - so the next thing to do is to add a
247:17 - second set of generators that can
247:18 - produce a path
247:19 - for the right audio channel all right
247:22 - let's get rid of our
247:24 - let's get rid of that process block
247:26 - stuff
247:27 - this stuff right here let's just comment
247:28 - that out in case you know we're gonna
247:30 - leave the code in in case we ever need
247:32 - to
247:33 - test that again but
247:36 - that's you know we're going to turn that
247:39 - off because
247:40 - who wants to listen to those sine waves
247:41 - again
247:43 - okay let's grab everything we used in
247:46 - the single channel version of the fft
247:48 - and put it into its own class this is
247:52 - going to be the
247:52 - single channel fifo buffer the
247:55 - monobuffer fft generator
247:57 - analyzer path generator and the path
247:59 - itself
248:00 - so let's make a new class we're just
248:02 - going to migrate these things over there
248:04 - first okay so i'm just going to
248:07 - cut these we're going to go up here
248:09 - we're going to put it right here
248:13 - put them right there all right so we
248:15 - have moved those over
248:16 - okay this is going to produce a ton of
248:18 - errors if we try to build it right now
248:20 - but we will get to that
248:26 - now we just need to give our response
248:30 - curve a path producer for both channels
248:34 - okay next we need to add a process
248:38 - function that's going to basically do
248:40 - what the
248:41 - timer callback did
248:44 - let's jump to that so we can kind of get
248:46 - a feel of what i'm talking about
248:48 - um this process function is going to do
248:50 - this it's going to do
248:52 - this stuff and it's going to do this
248:54 - thing okay
248:55 - so let's declare that first
248:59 - um actually let's take a look at this so
249:01 - let's see right now
249:02 - um the only things we actually need from
249:05 - it are
249:06 - uh this temp buffer uh fft bounds and
249:10 - fft size
249:11 - and bin width um yeah okay so we just
249:15 - need
249:16 - and even then like this this fft size
249:18 - comes from this member variable
249:20 - um fft bounds that's just a rectangle we
249:23 - can provide that
249:24 - and then um we need the sample rate
249:28 - okay so let's do that let's go back here
249:31 - let's declare this
249:32 - let's make these guys private private
249:36 - void process let's give it our rectangle
249:40 - and the sample rate okay
249:44 - now we need a way to retrieve the path
249:48 - so let's add that okay
249:52 - all right now we need to do what the
249:53 - response curve constructor did to
249:56 - initialize the fft
249:58 - data generator and um
250:01 - the monobuffer so let's add a
250:04 - constructor
250:06 - all right let's go out of constructor
250:08 - let's do it in class for right now
250:11 - it's gonna take this same um
250:14 - this same argument
250:17 - s c s f and let's initialize that
250:22 - left channel fifo scff
250:26 - scsf okay now let's just migrate over
250:29 - that code from the constructor
250:31 - over here where was that that's this
250:34 - thing okay we're gonna just
250:36 - grab these two lines cut them
250:39 - paste them here all right now we just
250:42 - need to initialize
250:43 - our um path producers from our
250:47 - response curve so let's get rid of this
250:49 - line and now we can do path
250:51 - left path producer and this is where we
250:53 - need the audio processor
250:56 - left channel fifo address of that
250:59 - or not the address it wants a reference
251:02 - and then
251:02 - right channel path producer this one's
251:04 - the audio processor
251:06 - right channel fifo all right let's
251:09 - implement this
251:09 - um path producer process function
251:13 - let's put that right above our um
251:16 - right above this actually let's just put
251:19 - it right above this timer callback
251:20 - because
251:21 - it'll make copying the code easier so
251:24 - void we can move it later
251:26 - path producer process
251:29 - okay so we need our temp buffer these
251:33 - guys just go like that copy and paste it
251:36 - do the same thing with the fft bounds
251:38 - and
251:39 - through the path producer loops
251:43 - and now instead of doing auto fft equals
251:46 - get analysis area this is a function
251:47 - argument
251:48 - so let's get rid of that and then our
251:51 - bin with is
251:53 - using the sample rate very convenient
251:58 - all right so we took all of that code
252:01 - away
252:01 - and now we are going to call our process
252:04 - function
252:05 - instead auto fft bounds
252:08 - equals get analysis area dot to float
252:12 - and then auto sample rate equals
252:15 - audio processor dot get sample rate
252:18 - and then we can do left path producer
252:22 - fft dot process fft bounds
252:25 - sample rate and then right path
252:29 - producer process fft bounce
252:32 - sample rate now we just need to grab the
252:36 - paths returned from this
252:37 - in our paint function and draw them so
252:39 - let's go up to our paint function
252:42 - go to where those paths are drawn it's
252:44 - right here
252:46 - uh we will do auto left path fft
252:49 - sorry left channel fft path fft path
252:53 - equals leftpathproducer.getpath
252:57 - okay that takes care of that and then we
252:59 - can also
253:01 - uh let's see we're doing sky blue for
253:02 - that that's cool and now we can do the
253:04 - same thing with the right path
253:06 - auto right channel fft
253:09 - path equals right channel uh
253:12 - get path and do the same transform
253:17 - and then draw it the same way
253:20 - i'm going to do yellow for this guy
253:23 - i'll do a light yellow all right let's
253:26 - test it out
253:27 - we should be able to see two analyzer
253:30 - paths
253:31 - ah actually this is the standalone
253:32 - version so
253:34 - let me quit this and then run
253:37 - the vst version and now we can run some
253:40 - audio through it
253:41 - and it should be good to go okay let's
253:45 - press play we should hear some audio
253:52 - all right cool all right cool so i'm i'm
253:54 - so i'm i'm not
253:55 - seeing that so the solution well i'm
253:59 - seeing a yellow i'm seeing a yellow path
254:01 - um i guess our file is our file is this
254:04 - file that uses file that i'm using is
254:05 - uh fairly
254:07 - [Music]
254:28 - [Music]
254:33 - why is that only doing that
254:35 - [Music]
254:37 - interesting interesting we're not seeing
254:40 - we're not writing our right channel for
254:41 - some reason
254:47 - all right let's see if we can figure
254:48 - let's see if we can figure that out
254:54 - i found the error so the problem was i
254:56 - was drawing the left path
254:58 - twice that's all it was pretty dumb
255:00 - pretty stupid error
255:01 - that's what i get for copying and
255:02 - pasting and not being thorough the way i
255:04 - went about actually trying to debug it
255:06 - was going over to my plug-in processor
255:08 - and then in my process block function
255:10 - i'm
255:11 - going back to using my test oscillator
255:14 - and i'm clearing the buffer and i'm
255:16 - writing the oscillators samples to only
255:19 - one channel particularly the left
255:21 - channel
255:22 - and then from there i was just checking
255:25 - to see like hey is this actually getting
255:27 - proper audio so it turns out it was
255:30 - and then after looking at all the other
255:31 - code that was copied over it literally
255:33 - was just
255:34 - me um drawing the left path
255:37 - twice okay so let me go turn off the
255:40 - turn off this code right here and then
255:43 - let's run this in the vst and we should
255:47 - let's run this in audio plug and host
255:48 - and we should see
255:50 - both the left and right channel
255:54 - all right let's try this again let's try
255:56 - this again
255:58 - all right right definitely have a blue
256:00 - and yellow line that is fantastic that
256:01 - is fantastic
256:03 - and if we roll out of the roll off
256:05 - behind all the behind all the high-end
256:06 - stuff disappear
256:08 - same for real for falling off we get to
256:11 - see our
256:11 - frequency our frequency responder
256:16 - [Music]
256:19 - that get dipped out as well all right
256:21 - cool all right cool
256:22 - [Music]
256:25 - okay so okay so that's the analyzer you
256:27 - can check that out we can check that off
256:29 - make a commit of that commit of that
256:31 - right imprint fft
256:34 - from spectrum analyzer analyzer
256:38 - okay let's just stage all this stuff and
256:41 - commit
256:42 - okay so the next thing that i want to
256:43 - add is some bypass buttons for each band
256:46 - and then a bypass button for the
256:48 - analyzer because those
256:49 - analyzers always use a ton of cpu
256:52 - okay cool
256:57 - all right time for the bypass buttons
257:00 - now we have
257:01 - three bands and thus we need three
257:04 - boolean parameters to enable bypassing
257:07 - each individual band and i also want to
257:10 - be able to turn the analyzer on and off
257:12 - so we're going to need a boolean
257:13 - parameter for that
257:14 - so head on over to your plug-in
257:16 - processor and go down to where your
257:18 - parameters are created and we're going
257:20 - to add
257:21 - some booleans for this okay layout.add
257:24 - std make unique
257:28 - and we want juice audio parameter bool
257:34 - i'm going to call this guy
257:37 - low cut bypassed
257:40 - and a default value of false meaning
257:41 - that they are not bypassed
257:45 - all right we're going to do two more of
257:46 - these for the um
257:48 - for the parametric band peak band
257:50 - whatever you want to call it and the
257:51 - high
257:52 - cut okay and then one more for the
257:55 - analyzer to be enabled
258:00 - and this one's going to be true meaning
258:02 - the analyzer is enabled by default
258:05 - okay let's go over to our plugin
258:07 - processor dot h because
258:09 - way up near where our chain settings are
258:12 - defined
258:13 - we need to supply the bypass states at
258:15 - the same time so let's add
258:17 - three boolean flags to represent that
258:19 - boolean
258:20 - uh low cut by past false
258:25 - peak bypassed false and then high
258:29 - cut bypassed false
258:34 - let's go back to our plug-in
258:36 - processor.cpp let's go to where our
258:38 - um where we get our parameters get chain
258:41 - settings
258:42 - this is where we need to grab these guys
258:43 - now these are boolean parameters
258:45 - but the parameters are stored as floats
258:48 - so
258:48 - if the great if the value is greater
258:50 - than 0.5
258:52 - that means it's true so we can do
258:54 - settings dot low cut
258:57 - bypass equals then get the parameter
259:01 - low cut bypassed it's atomic
259:06 - if it's greater than 0.5
259:09 - then it is bypassed and do the same
259:12 - thing for the other two parameters
259:15 - okay all right let's go to our update
259:18 - low cut filter function now all we have
259:21 - to do here before we update the cut
259:23 - filter
259:24 - is set that bypass state so left chain
259:28 - dot set bypassed and then chain position
259:32 - low cut and then chain settings
259:36 - low cut bypassed all right do that for
259:38 - both chains
259:40 - whoops copy paste
259:44 - right chain do the exact same thing for
259:48 - the high cut
259:50 - all right we want the high cut position
259:53 - and high cut bypass
259:56 - and then finally do it for the peak
259:59 - filters
260:00 - well let's just copy this copy this line
260:04 - left chain to set bypass peak
260:08 - all right that takes care of the dsp our
260:10 - chains get updated with the bypass
260:11 - settings
260:12 - now we just need to add some buttons to
260:14 - the gui so let's go do that next
260:17 - head on over to the plugin editor dot h
260:21 - and we're going to go down to our editor
260:23 - and we're going to add
260:25 - um we're gonna add some toggle buttons
260:27 - okay i'm gonna use toggle button for
260:28 - right now because we can customize those
260:30 - visuals later
260:31 - we can customize those visuals later and
260:34 - this is just gonna do the job for right
260:35 - now
260:38 - all right i did all four low cut peak
260:40 - high cut and then the analyzer enabled
260:41 - button
260:43 - now let's go to our plugin editor dot
260:45 - cpp we're going to go down to our get
260:48 - comps function
260:49 - we're going to add those four buttons
260:53 - all right now we need to position them
260:55 - so for this let's go to our resized
260:57 - function
260:59 - now i want to give them a height of 25 i
261:02 - want them to sit above each of these
261:05 - stack of knobs that we got the stack of
261:07 - sliders
261:08 - so we've got our low cut area our high
261:10 - cut area so at the top of those is where
261:12 - i'm going to put this okay so let's
261:14 - do the left side first the low cut low
261:17 - cut bypass button
261:18 - set bounds and we're going to do
261:22 - a low cut area remove from top
261:26 - 25 all right we'll do the same thing for
261:29 - the high cut
261:31 - i cut bypass button set bounds
261:34 - high cut area remove from top
261:37 - 25 and then our peak bypass button
261:41 - peak bypass button let's set bounds
261:45 - equals uh bounds dot remove from top
261:48 - 25. cool we are going to do the um
261:53 - uh we're going to do the analyzer button
261:56 - in a little bit
261:57 - but we have these three let's take a
261:58 - look put it on the
262:00 - standalone version for right now should
262:03 - see three buttons right in the middle
262:05 - um right in centered among the three
262:07 - rows three columns of but
262:08 - of sliders and there we go here's our
262:12 - toggle button
262:13 - all right cool let's connect them to
262:15 - parameters next
262:18 - all right go back to plugineditor.h and
262:21 - we need to declare some
262:22 - button attachments so using
262:26 - button attachment equals ap vts
262:30 - button attachment and now we can declare
262:33 - four of them
262:35 - i'm just gonna copy these guys
262:38 - and then put attachment at the end if i
262:41 - put them all in the same line it'll make
262:42 - it real easy
262:44 - before i line them all up and i can do
262:46 - this
262:48 - cool all right so those are the
262:52 - attachments we're going to use them the
262:53 - same way we d
262:53 - we did with these sliders we just just
262:55 - need to connect them to the actual
262:57 - parameters
262:58 - we go do that in our constructor plug-in
263:02 - editor
263:03 - constructor at the end of this list
263:06 - this is where we need to add the
263:07 - attachments uh
263:09 - low-cut bypass button
263:12 - um it's this thing
263:17 - it's this thing low cut bypass button
263:19 - and then the parameter id
263:21 - is low cut by passed
263:24 - all right and we need to do this for the
263:25 - other four buttons even though we're not
263:27 - showing the analyzer
263:29 - peak bypass button okay
263:33 - let's give that a quick build make sure
263:36 - we don't get any errors
263:38 - and let's run it to make sure that we
263:39 - typed our param names correctly
263:42 - but those should be connected now all
263:44 - right so
263:45 - let's run it all right let's run it with
263:49 - audio plug and host so we can run audio
263:51 - through it and see if we hear it do
263:52 - anything
263:54 - okay so i'm gonna set this up kind of
263:56 - high run some audio and then bypass
264:01 - all right so the bypass control
264:03 - definitely works but the response curve
264:05 - is not updating
264:10 - okay let's take care of that next all
264:13 - right let's head on up to our update
264:15 - chain function
264:16 - for the uh response curve component
264:20 - now we've got our chain settings right
264:22 - here so we're going to do the same thing
264:24 - we did with the
264:25 - process block we're going to update the
264:28 - bypass states of the chain
264:30 - accordingly mono chain
264:34 - set bypassed and then each of the
264:36 - indexes chain position
264:38 - low cut chain settings
264:42 - low cut bypassed all right do that for
264:45 - the other
264:46 - two chain positions okay
264:50 - all right once we've got these bypass
264:52 - states
264:54 - um let's go to our paint function
264:57 - because once we have these bypass states
265:00 - you know if the chain is not bypassed um
265:03 - we need to add the magnitude however for
265:06 - the low cut and
265:07 - high cut bands even though we bypass the
265:10 - entire chain
265:11 - this right here does not check if that
265:13 - actual link in the in the
265:15 - greater chain is bypassed so we need to
265:17 - do that for these guys
265:19 - we need to do if mono chain dot is
265:22 - bypassed
265:24 - all right if the low cut
265:28 - processor chain is not bypassed then we
265:31 - can check if the
265:32 - individual bands are bypassed we can do
265:35 - the same thing for the high cut
265:37 - all right let's test it out oh got this
265:40 - jscert that's happening we'll take care
265:42 - of that in just a little bit
265:45 - for some reason the render data is full
265:47 - of uh
265:48 - invalid values let's show me my plug-in
265:50 - gui
265:51 - all right
265:56 - all right look at that it does it for
265:59 - this one
266:00 - that's bypass
266:04 - cool let's do it for this guy
266:06 - [Music]
266:15 - all right awesome that is working as
266:17 - expected
266:19 - all right let's uh make a commit that we
266:21 - have added bypass buttons
266:23 - added ability to bypass
266:26 - dsp bands response
266:30 - curve follows bypass state
266:34 - good times all right we can dial in the
266:37 - graphics next
266:40 - okay for this we want to use the
266:43 - toggle button um look and feel function
266:46 - draw toggle button let me pull up the
266:48 - documentation for that
266:50 - so look and feel methods version 4.
266:52 - let's see these are
266:54 - slider we want to look for toggle button
266:57 - where is that where are those look and
267:00 - feel
267:01 - member functions you know it's part of
267:04 - um
267:05 - the look and feel class okay so we've
267:07 - got uh draw button text draw a toggle
267:09 - button draw a tick box
267:11 - drawable button all that kind of stuff
267:13 - okay so we want to implement draw toggle
267:15 - button
267:16 - so let's go up to our plugin editor.h
267:18 - let's go to where our look and feel
267:20 - is declared and we're going to add
267:24 - this draw toggle button function i'm
267:27 - just going to grab it from
267:28 - the documentation
267:33 - give me some names for these guys
267:36 - let's put them on there online and then
267:38 - all these need that
267:40 - juice namespace before them
267:44 - okay all right and after these
267:47 - look nice it would be wise to make the
267:49 - toggle buttons actually disable the
267:51 - sliders for whatever band they are
267:52 - attached
267:53 - to so that's going to be one of the
267:55 - things we're going to work on as well
267:58 - all right we just need to give our
267:59 - editor a look and feel instance
268:03 - all right and we need to assign it to
268:05 - the three bands
268:07 - we'll do that in our constructor
268:10 - go down here let's do it after we add
268:12 - our make our guys come
268:13 - uh make our guys visible peak bypass
268:16 - button dot set look and feel
268:20 - no low cut
268:23 - and then we need to set these to null
268:25 - pointer in the destructor
268:28 - cool all right let's go to
268:31 - our look and feel implementations
268:35 - plug plugin editor.cpp go to where that
268:38 - look and feel implementation is it's way
268:40 - up at the top
268:42 - all right let's clean up this space now
268:45 - right here what i would like to
268:47 - do what i would like to create for these
268:50 - toggle buttons is a
268:51 - power button type of graphic and this
268:53 - can be accomplished by using the path
268:55 - function add centered arc now this
268:59 - function will let us create an arc which
269:00 - has a notch at the top
269:02 - and then we just need to add a vertical
269:03 - bar that goes from the top to the center
269:06 - and that's it okay it's super easy just
269:07 - use a
269:08 - wide stroke type when it's time to fill
269:10 - the path and it will look like a power
269:12 - button
269:13 - so let's do that all right using
269:16 - namespace juice
269:19 - because i didn't turn it on in processor
269:21 - in a producer
269:22 - that setting is um here by the way if
269:24 - you go under your gear
269:26 - then you can do add using namespace
269:28 - juice to the juiceheader.h it's disabled
269:32 - by default because
269:36 - the thought is that it's you're less
269:38 - likely to get collisions with other
269:39 - namespace classes
269:41 - such as the point class which is a
269:43 - default class on
269:46 - it's a it's one of the classes that
269:47 - comes with some of the os x
269:49 - frameworks so by
269:52 - turning this off it makes it less likely
269:54 - that you're going to get those types of
269:55 - namespace collisions
269:56 - with your class names okay all right
269:59 - enough of that uh
270:00 - let's see path power button okay
270:03 - first thing first is we're going to
270:05 - create a rectangle
270:06 - this rectangle is going to have equal
270:08 - length sides and in the center of that
270:10 - will be our
270:11 - um yeah this rectangle is going to be
270:15 - um center in our component's bounding
270:17 - box so let's do that first
270:20 - uh where's our toggle button we're going
270:23 - to do that same uh
270:24 - j min thing that we were talking about
270:27 - um we did that
270:28 - up for the um we did that somewhere
270:32 - somewhere we did a j min so that way our
270:35 - um one of these rectangles was a square
270:37 - inside of a non-square bounding box that
270:41 - right here this is where we did it in
270:42 - the
270:42 - get slider bounce okay we're doing that
270:44 - same thing right here
270:46 - all right so instead of it being exactly
270:49 - the
270:50 - exactly a square in the center of it
270:51 - we're gonna shrink it a little bit maybe
270:54 - like
270:54 - six or so we'll use juice live constant
270:57 - to figure it out later
270:58 - maybe maybe we'll do four uh no i'm
271:01 - gonna go back to six
271:02 - um if i want to adjust it i can come
271:05 - back with juice live constant and tweak
271:07 - it that way
271:08 - all right then auto r equals um bounds
271:11 - dot width
271:13 - size keeping the center so i'm creating
271:15 - a rectangle with
271:16 - this size whose center
271:20 - is the center of our toggle buttons uh
271:23 - bounding box
271:24 - all right now let's specify some angles
271:27 - to make the gap at the top of the arc
271:29 - okay i am um yeah we're gonna
271:33 - yeah we're gonna specify some angles to
271:34 - make the gap at the top of the arc
271:36 - and then we're going to shrink this
271:38 - square to be drawing
271:39 - um we're going to shrink the square just
271:42 - a little bit
271:43 - more we'll play around with it and we'll
271:45 - juice with juice
271:46 - live constant and you know get it to
271:48 - look the way we want it to look
271:50 - so float ang equals 30 dot
271:53 - f because it's radians because i don't
271:55 - know how i mean it's degrees because i
271:57 - don't know how to think in radians
271:59 - um we'll shrink this size a little bit
272:02 - maybe just a little bit more we can use
272:03 - juice live constant later
272:05 - now let's make our arc power button dot
272:08 - add centered arc okay so we're going to
272:12 - center it at
272:14 - r our radius is going to be half
272:18 - of the size of our box that we have
272:22 - size times 0.5 that's radius for both
272:25 - axes all right we're not rotating this
272:29 - ellipse at all so that means that 12
272:33 - o'clock is still gonna be right here
272:35 - as opposed to if we had rotated it then
272:36 - it would be like negative 30 goes to
272:38 - here and plus 30 goes that way
272:41 - okay so we are going to do zero
272:44 - for that and then our from radians uh
272:47 - let's see if this is 12 o'clock
272:49 - right here at the top i want to go
272:51 - negative 30.
272:52 - oh no i want to go 30 this way and then
272:54 - i want to go
272:56 - uh 360 minus 30 for the second one
273:01 - so here we go let's see radians
273:05 - uh sorry degrees to radians and we've
273:07 - got 30
273:08 - all right our angle and then the same
273:10 - thing degrees 2 radians
273:13 - uh 360 degrees minus our angle
273:17 - so if we want we can open this up
273:20 - and there's no you know we're using
273:23 - these variables so that way we can
273:24 - adjust the way these visuals look
273:27 - and then yeah this says there's
273:31 - there's an extra let's see power button
273:34 - dot add centered arc
273:37 - there's an extra parameter that's not
273:38 - shown up here
273:40 - uh start as new sub path so this this is
273:42 - the parameter i want to add
273:44 - this should be true all right now let's
273:47 - make the vertical line
273:50 - okay power button start new sub path
273:55 - and this sub path is going to be
273:58 - it's going to be at the center of our
273:59 - rectangle but then at the top
274:03 - and then we can do a simple power button
274:06 - dot
274:06 - line to r dot get center
274:11 - we're going center of our box at the top
274:15 - y equals zero and then we just go
274:17 - straight down to the center
274:18 - all right let's just create a path
274:20 - stroke type of two
274:22 - um norm you know normally when you
274:25 - draw a path you can do uh juice you can
274:28 - do
274:29 - g dot draw path or
274:33 - stroke path like that and then provide a
274:34 - stroke type that way but i want to
274:36 - specify some
274:37 - custom stuff so it will help me if i use
274:40 - the
274:41 - um path stroke type constructor
274:45 - this one right here so i can um use that
274:48 - joint style
274:49 - okay so i'm going to use a stroke
274:50 - thickness of we'll try to
274:54 - and then for the joint style if i use a
274:56 - curved joint style it'll give me rounded
274:58 - edges
274:58 - at the gap and then around that
274:59 - rectangle so i'm going to use that
275:02 - so i'll do curved
275:05 - all right now this just needs a name pst
275:09 - and now i can use that here pst and then
275:12 - the path is going to be the power button
275:16 - and then what is wrong with this why is
275:17 - this complaining
275:19 - oh is that because that needs to be to
275:21 - float yes
275:22 - this should be a float rectangle um now
275:26 - we just need a color
275:28 - so if the button is
275:31 - if the button is on we're going to use
275:33 - one color and otherwise we're going to
275:35 - use another color
275:36 - so what that means when the button is on
275:38 - is that the band is
275:40 - bypassed okay so that's so if it's
275:43 - bypassed let's use a gray color
275:45 - and then if it's not let's use that
275:46 - green color that we've been using in
275:48 - other places because it looks cool
275:50 - all right so let's see auto color equals
275:53 - button dot get
275:54 - toggle state oh sorry toggle button i
275:56 - get toggle state
275:58 - get the toggle state if it is on meaning
276:01 - the band is bypassed we're going to use
276:03 - colors dim gray
276:06 - otherwise let's go find that green color
276:10 - i think that's this i should really
276:13 - standardize that but
276:15 - you know it's a tutorial i'm not trying
276:17 - to show the best practices
276:20 - but i'm trying to show good practices
276:21 - okay here we go g.set color
276:24 - color all right so we're going to draw
276:27 - our path
276:29 - and then we can draw a uh
276:32 - draw a circle around the whole thing
276:34 - once we draw our path
276:36 - g dot draw ellipse and
276:39 - we can do r with a line sigma thickness
276:44 - of two
276:46 - all right that should look good all
276:48 - right let's
276:49 - try that out hey look at that
276:53 - okay cool so these are currently not
276:54 - bypassed so i'm going to adjust this and
276:56 - then do that
276:57 - so that's cool that works as expected if
277:00 - it's green it means it's active
277:01 - if it's gray it means it's not i'm happy
277:04 - with that
277:05 - that makes sense well that's kind of
277:07 - interesting if
277:08 - as long as we're clicking inside the
277:09 - bounding box
277:11 - uh it's gonna toggle it so something
277:13 - that we could do that i'm not going to
277:15 - do here
277:16 - is to set up the hit test region so that
277:18 - way if you only click
277:19 - inside this area it says yes you clicked
277:22 - on me
277:23 - um if otherwise if you click out of that
277:26 - no we did not click on you
277:28 - so for reference um i'm gonna just add a
277:31 - uh
277:33 - g dot set color colors red
277:37 - and then g dot draw erect
277:40 - just so we can see the bounding box i'm
277:42 - actually talking about um
277:44 - bounce so this way you can see what i
277:47 - mean about if you click outside of it
277:49 - okay so if we click anywhere in here we
277:52 - are technically clicking
277:53 - inside that toggle button okay but we
277:56 - only want to you know if we
277:58 - it's not something i'm going to do in
277:59 - this video but we could
278:01 - go through and say you know what it's
278:02 - only when you click inside
278:04 - this there's a special hit test function
278:06 - that we can override
278:08 - and say if we click inside here that
278:09 - means we actually clicked on the
278:10 - component if we clicked here we did not
278:13 - and that's how we can make it only
278:14 - respond that way but i'm not going to do
278:16 - that
278:16 - it's a little bit beyond the scope of
278:18 - this tutorial
278:20 - so i'm just going to get rid of that
278:22 - okay let's um add
278:24 - a commit for that so customized
278:28 - um customized the uh graphics
278:32 - all right before i do that actually i
278:33 - wanted to show the juice live constant
278:35 - thing so if we do this here
278:36 - juice juice live constant this was six
278:40 - same for this one this was also six and
278:43 - we can mess with this angle too
278:45 - um all right so this will be interesting
278:49 - we can see what that looks like let's
278:50 - change these numbers move these sliders
278:53 - we'll get to see what it looks like
278:56 - all right let's move this out of the way
278:58 - so we're changing the first one this is
278:59 - going to make these guys get smaller or
279:01 - bigger
279:02 - and obviously once we get past a certain
279:03 - point they start being drawn outside
279:06 - their bounding box
279:07 - now here's where we can adjust the angle
279:10 - so that's kind of neat all right so i
279:12 - like where we had it maybe
279:14 - 40 or 40 looks kind of cool maybe a
279:17 - little bit closer like 25 is good and
279:19 - then this one
279:23 - this shrinks that guy a little bit more
279:26 - so it's like this one changes the whole
279:27 - thing
279:28 - and then this one changes that inner arc
279:31 - all right
279:32 - so i'm going to leave those where i had
279:33 - them because i liked that positioning
279:35 - but you can do that same thing to
279:37 - adjust the placement of those guys all
279:39 - right i'll put this back to um
279:40 - put this back to 30 put this back to six
279:45 - and put this guy back to six as well
279:48 - alright cool
279:48 - let's make that commit all right now
279:53 - what i want to do is reuse that toggle
279:55 - button
279:56 - functionality for the analyzer button as
279:58 - well let me say that again
279:59 - what i want to do is reuse this toggle
280:02 - button
280:03 - i want to reuse this draw toggle button
280:05 - functionality for the analyzer button as
280:07 - well
280:08 - but what i want to do is switch based
280:10 - off of the
280:11 - button type in that draw toggle button
280:13 - function so i'm going to create two
280:15 - classes i'm going to go here
280:17 - in my editor i'm going to do this right
280:19 - above the editor
280:21 - i'm going to create two classes that
280:23 - inherit from toggle button
280:24 - and that's going to allow me to cast
280:27 - between the
280:28 - um it's going to allow me to cast that
280:30 - uh
280:33 - let me see let me go up here it's going
280:35 - to allow me to cast this
280:37 - argument to determine if it's one of
280:39 - these two types of buttons
280:40 - and then i can switch accordingly um
280:43 - in the actual implementation of that
280:45 - function uh just follow the code you'll
280:48 - see what i'm talking about i'm not
280:48 - explaining it very well here we go
280:50 - struct power button
280:54 - juice okay very simple struct
280:59 - uh analyzer button okay
281:02 - so that's step one all right step number
281:06 - two
281:07 - is to make the bypass buttons uh
281:10 - we'll make the bypass buttons become
281:14 - that class power button
281:18 - and then the analyzer button needs to be
281:20 - an analyzer button
281:22 - like that okay very simple
281:26 - all right now let's go up to our draw
281:28 - toggle button look and feel
281:30 - implementation this guy right here all i
281:32 - need to do is just
281:33 - cast and everything should work as it
281:36 - did before okay so i'm just going to
281:37 - have this
281:38 - power button path i'm going to cast um
281:41 - i'm going to make a check and if like i
281:43 - can cast this
281:44 - object to a power button type then i'm
281:48 - going to do all of this
281:50 - all right if auto
281:54 - okay so if we run it i'm going to put
281:56 - this back on the editor
281:58 - on the standalone version because it
281:59 - opens a little bit quicker
282:01 - um we should be able to run it and now
282:03 - we can add code that draws the analyzer
282:05 - button
282:06 - after this is verified all right
282:09 - sure enough we still have our analyzer
282:10 - buttons our our bypass buttons
282:13 - working as expected cool
282:17 - so let's add our analyzer code um where
282:20 - is this being added
282:22 - okay we're going to add our analyzer
282:24 - code here
282:26 - now i think it would be cool to see a
282:27 - randomized path
282:29 - drawn inside of this button to kind of
282:30 - you know reflect the fact that it is an
282:32 - analyzer
282:33 - so i'm going to use the same color
282:34 - settings that i used for the power
282:35 - button
282:36 - green if something is active and gray if
282:38 - something is not
282:39 - in this instance the toggle button will
282:41 - reflect the opposite state
282:43 - that it did with the power button which
282:45 - means i cannot use
282:46 - this thing i have to flip it around so
282:49 - let me add an
282:50 - uh if else or an else if right here to
282:53 - make sure i have an analyzer button
282:56 - go faster if you're walking copy this
282:59 - color line over
283:03 - and we need to flip that that's all
283:06 - because
283:06 - as i said if the toggle button is on
283:10 - then that means we want to use this
283:12 - green color otherwise if it's off let's
283:14 - use the dim gray
283:16 - all right g dot set color color
283:21 - okay next i'm going to start by drawing
283:23 - a normal rectangle
283:25 - auto bounds now i'm going to shrink it a
283:28 - little bit
283:30 - and then i'm going to randomly generate
283:32 - a path inside of that smaller rectangle
283:35 - i don't want it to look too crazy so i i
283:37 - will produce a line segment
283:39 - every other pixel so let's start with
283:41 - our path
283:43 - random path we'll use a random object
283:47 - and then now we can um start
283:51 - our random path
283:54 - we will start it at our inset and our y
283:58 - position will be in set
283:59 - rect.get y um
284:02 - plus inset
284:05 - height times some random float value
284:10 - right so our y value is going to be the
284:12 - top our height is the bottom
284:14 - so we're going to go remember this is 0
284:16 - and this is height
284:17 - so we're going to go 0 down to height
284:20 - multiply height by some value between 0
284:22 - and 1 to give us a random height
284:24 - between the top and the bottom all right
284:27 - now we just needed
284:28 - to perform a line to like this for
284:32 - auto x equals um in set rect
284:35 - dot get x plus one
284:40 - x is less than inset rect.get
284:44 - right plus uh x plus equals two
284:50 - then we just basically do this
284:53 - our x position is going to be let's see
284:56 - this is going to be line two
284:58 - oh boy line two
285:01 - get out of here trixie let me just type
285:04 - this line
285:06 - random path line two our x is gonna be
285:10 - x and then our y position is gonna be
285:13 - this obviously we should pre-cache some
285:16 - of these positions
285:18 - because calling get y and get height
285:19 - every line
285:21 - you know it's not ideal but whatever we
285:24 - can
285:25 - always refactor that type of stuff later
285:27 - okay now let's just draw the path
285:30 - let's use a thickness of one all right
285:32 - that should do it
285:34 - let's get our analyzer button on the
285:36 - screen and using this look and feel so
285:38 - we can tweak this
285:39 - if needed head on down to
285:42 - our uh editor constructor
285:46 - let's provide that look and feel
285:48 - analyzer enabled button
285:50 - set look and feel all right and don't
285:53 - forget to
285:54 - disable it all right now i'm going to
285:57 - stick this
285:58 - right at the top of
286:01 - the gui on the left so let's see
286:06 - i'm gonna go like this i'm gonna go um
286:10 - auto analyzer enabled area equals bounds
286:14 - dot remove from top
286:15 - give me the top 25 pixels just a whole
286:18 - row
286:19 - 25 pixels wide 25 pixels tall from the
286:21 - very top
286:22 - okay now i'm going to do uh analyzer
286:25 - enabled
286:26 - area dot give me a width of 10
286:30 - of um 100
286:33 - give me an x of five so it's not uh
286:35 - right along that edge
286:38 - and then um give me just remove a little
286:40 - bit from the top of this analyzer
286:41 - enabled area so there's a gap between
286:43 - the top of the gui and the top of this
286:45 - rectangle
286:47 - all right now i'm just going to set
286:50 - that to be my analyzer enabled buttons
286:52 - bounds
286:54 - and let me give myself a little bit of a
286:56 - gap between the analyzer button and the
286:58 - analyzer itself and let's see what it
287:00 - looks like
287:01 - bounce.remove from top five
287:04 - okay so we should expect to see a
287:06 - squiggly line
287:07 - just like that all right okay this is
287:10 - neat so whenever we mouse over it
287:12 - it repaints and it produces a new
287:16 - path so let's make the path be a member
287:19 - variable of the class that is computed
287:21 - only once
287:22 - whenever the instance is resized so we
287:24 - know that our
287:25 - random path creation process works which
287:28 - is cool so we're just going to use that
287:30 - to make this path all right let's do
287:32 - that next
287:34 - all right let's add a commit for this
287:37 - analyzer button is visible
287:41 - path is created every time
287:44 - it repaints all right let's head on over
287:48 - to our
287:49 - declaration for that class there was
287:52 - here analyzer button
287:54 - all right so let's set this up with a
287:56 - resized function
287:58 - this is where we will compute the random
288:00 - path that the toggle button
288:02 - will draw so let's see void resized
288:06 - override all right we're going to need
288:08 - those bounding box
288:09 - we're going to need that bounding box
288:10 - auto bounds equals get local bounce
288:14 - we're still going to need to shrink it
288:16 - and then instead of creating a new
288:18 - random path
288:20 - we're just going to clear the existing
288:22 - one let's add that as a member variable
288:24 - juice path random
288:27 - all right so random path dot clear
288:31 - it's gonna clear it and then let's go
288:33 - grab our um
288:34 - other code that drew that thing that's
288:36 - way up here
288:38 - that look and feel stuff where is that
288:40 - this stuff
288:42 - all right let's just copy this comment
288:44 - it out
288:46 - plug an editor paste that right here
288:48 - okay
288:49 - here's our juice random except it needs
288:51 - to be a juice random
288:53 - all right there's our random path start
288:55 - new sub path
288:57 - same line two code that we had before
289:00 - all right let's go back to our plugin
289:03 - editor
289:04 - okay so the stuff we need to discard is
289:07 - the inset
289:08 - rect the random path we can
289:11 - get rid of that and now for this we need
289:14 - to
289:14 - write analyzer button
289:17 - oh boy random path like that
289:21 - okay so we're just going to draw that
289:22 - path member variable directly
289:24 - all right let's run it and see what we
289:27 - get
289:28 - all right cool so it's only changing
289:31 - right now let's open
289:33 - it only changed once when we use the
289:34 - standalone let's open
289:36 - this guy i'm going to run it in audio
289:38 - plug and host
289:39 - and see what happens when we open and
289:40 - close the gui okay
289:42 - so there's like an m right on this right
289:45 - edge
289:46 - let's see what happens when we close
289:47 - this gui all right that's kind of neat
289:50 - so every time we open and close the gui
289:53 - uh we get a new path which is you know
289:55 - it's kind of neat
289:56 - okay so the next thing to do is to make
289:58 - these buttons
290:00 - um actually disable elements in the gui
290:04 - all right when we click on this we want
290:05 - these sliders to stop working when we
290:07 - click on this
290:08 - we don't want to see the fft happen in
290:10 - the background okay we will do those
290:12 - next let's leave this open
290:15 - all right let's get rid of this code and
290:18 - make a commit
290:19 - uh analyzer path
290:23 - button analyzer button path is
290:27 - created only once all right now if we
290:30 - were real sticklers about
290:32 - making it only appear once every time
290:34 - the gui is opened
290:36 - what we could do is store
290:39 - this path um it could become not an
290:42 - audio parameter but it could be stored
290:44 - in the audio parameter
290:46 - value tree state state value tree it
290:49 - could be stored as like just binary data
290:51 - and then that way whenever the plugin is
290:53 - first created you get a customized path
290:56 - and whenever you load that in it just it
290:59 - gets stored with the plugin
291:01 - so that's you know that's a way to make
291:02 - it not have um not be
291:05 - it's random the very first time you open
291:07 - the gui but that's the only time once
291:08 - you
291:09 - um you have to create a new instance of
291:11 - the class or a new instance of the
291:13 - plugin
291:13 - in order to get a new path there but you
291:16 - know this is this is cool
291:18 - all right um let's see what are we going
291:20 - to do we are going to make our buttons
291:22 - actually enable or disable gui
291:24 - parameters next okay
291:27 - head on over to the audio processor
291:30 - editor constructor
291:32 - and we're going to go down to after our
291:34 - look and feel has been set
291:36 - now we are going to use the on click
291:38 - lambdas to change the enablement of the
291:40 - sliders
291:41 - so the reason i'm doing this here is
291:43 - because
291:46 - this is where all of these components
291:48 - can see each other
291:49 - right i'm going to make this button
291:52 - control
291:54 - this button is gonna control this slider
291:56 - and this slider
291:58 - this button is gonna control these three
292:01 - sliders
292:01 - this button is going to control uh
292:05 - the high cut buttons this guy and this
292:06 - guy and then this thing is gonna
292:09 - send a message to this thing to stop
292:11 - drawing um the analyzer
292:13 - okay so that's why we're doing this here
292:15 - instead of like
292:16 - inside um maybe we make some macro
292:18 - component that calls
292:19 - that owns the um the sliders and stuff
292:22 - i'm doing it here because this is where
292:24 - the the most common place this
292:27 - this is the place where all the
292:28 - components can see all the other
292:30 - components
292:31 - so it makes just the communication
292:33 - between them easier
292:34 - now as with all asynchronous callbacks
292:37 - we need to use a safe pointer to make
292:39 - sure that our class
292:40 - in this case the editor is still in
292:42 - existence when we try to use this
292:44 - particular on click lambda
292:46 - all right so let's get started with that
292:48 - auto safe
292:50 - pointer equals juice component
292:54 - safe pointer simple eq audio processor
292:57 - editor
292:59 - this all right now we can start
293:01 - declaring these guys so we'll do we'll
293:03 - start with the peak
293:04 - peak bypass button and this is where it
293:07 - wants a lambda
293:09 - lambda with no arguments and here's
293:12 - where we're going to do the good stuff
293:13 - okay
293:14 - first we have to check if our safe
293:15 - pointer exists
293:17 - so if auto
293:20 - all right if it does once we know it
293:22 - exists we can get the bypass state
293:24 - and set our slider's enablement
293:25 - accordingly so auto bypassed
293:28 - equals comp peak bypass button to get
293:31 - toggle state
293:34 - easy all right now remember if the band
293:37 - is bypassed that means the sliders
293:40 - should not be enabled or said in reverse
293:43 - if the band is not bypassed the sliders
293:47 - should be enabled so comp
293:50 - um peak frequency slider set enabled
293:54 - it should be enabled if we are not
293:56 - bypassed
293:58 - okay let's do it again for the other
294:00 - sliders
294:02 - this is the peak gain and the peak
294:06 - quality all right let's test it before
294:08 - we make the other bypass
294:10 - buttons work all right we did the peak
294:13 - one
294:14 - i'm not seeing it do anything hmm
294:18 - let's go up to our look and feel all
294:21 - right so here's our draw rotary slider
294:24 - what are we not doing uh we are not
294:26 - setting our colors differently
294:28 - if we are enabled or disabled so let's
294:30 - go up and do that next
294:33 - all right we can do that right here auto
294:36 - enabled equals uh slider dot is enabled
294:41 - now we can set these colors accordingly
294:43 - so if we are enabled
294:45 - use this cool color otherwise use um
294:48 - let's go the dark gray
294:51 - that's for the background circle same
294:54 - thing here
294:54 - enabled if it's enabled use
294:58 - that um i guess there's an orangey color
295:00 - it's the border
295:01 - um so we will do colors a different type
295:04 - of gray
295:05 - all right do we have any other colors
295:07 - that are displayed in here
295:09 - looking for set color that's for the
295:12 - text
295:13 - all right let's try that out one more
295:15 - time
295:17 - there it goes awesome
295:21 - okay so i would like the parameter text
295:24 - to
295:25 - also fade out but we can do that after
295:26 - we get these other lambdas set
295:28 - up so we're going to follow the same
295:30 - pattern
295:31 - let's go back down to our constructor
295:34 - we're going to follow the same pattern
295:36 - we're going to capture a safe pointer
295:38 - we're going to check if the component is
295:39 - valid and then if it is we will get the
295:41 - bypass state and then change the
295:43 - enablement
295:44 - of the sliders accordingly so let's do
295:47 - the low cut
295:48 - next look at bypass button.on click
295:53 - all right first make sure the component
295:54 - is valid if it is get the
295:56 - bypass state all right this is the low
295:59 - cut bypass button
296:02 - and then set the um set the low cut
296:05 - frequency slider
296:08 - remember it should be enabled if our
296:11 - button is
296:12 - not bypassed okay
296:15 - and then same thing for the high cut
296:18 - all right let's give that a test and see
296:20 - what's going on see if it's working as
296:22 - expected
296:24 - this is high cut high cut high cut low
296:26 - cut low cut low cut
296:28 - okay all right
296:32 - awesome cool let's add a commit for
296:36 - that oh i forgot to make i forgot to
296:38 - commit these guys
296:41 - all right those let me say um let's see
296:45 - bypass buttons toggle
296:48 - slider enablements that's what happened
296:51 - there and then also
296:52 - um yeah that's all part of that same
296:55 - thing
296:56 - all right our next step is to make the
296:58 - analyzer button
296:59 - toggle the um fft analysis the spectrum
297:03 - analyzer
297:04 - see if that make that do something
297:08 - all right so let's go right here we're
297:11 - going to do
297:11 - analyzer enabled button on click
297:16 - i'm going to capture the same safe
297:17 - pointer
297:19 - if auto comp equals
297:21 - safepointer.getcomponent
297:23 - all right now we need our enabled state
297:27 - all right and now let's call a function
297:29 - that doesn't exist yet
297:30 - um we'll add it in just a second comp
297:33 - response curve component dot
297:35 - toggle analysis enablement
297:39 - uh enable okay let's that's a good name
297:43 - for what this function needs to do
297:45 - all right let's head on over to our
297:49 - um header file uh editor.h
297:53 - and provide that function so we stop
297:56 - having that warning
297:57 - okay that's um where is that here's our
298:00 - response curve component
298:01 - so void bool
298:04 - enabled okay
298:07 - and now um let's see what do we need to
298:10 - do we need to have a flag
298:12 - that it can check so let's put that down
298:15 - here at the bottom
298:17 - should show fft analysis
298:22 - we'll set that to true by default and
298:25 - then uh we'll just do an implementation
298:27 - in class
298:28 - should show fft analysis equals
298:32 - enabled nice and simple
298:35 - all right let's head on over to our
298:38 - plugin editor.cpp
298:40 - head over to the um
298:43 - paint function and uh that's the wrong
298:47 - paint function response curve paint
298:48 - function
298:50 - and if our analyzer is enabled
298:53 - grab those paths and draw them if
298:56 - should show fft analysis
298:59 - do this here's where the paths are drawn
299:03 - put that right in there all right let's
299:05 - test it out
299:07 - oh before we test it out um we should
299:10 - not
299:11 - uh if we are where's our timer callback
299:13 - for this guy
299:15 - all right if our analysis is turned off
299:18 - don't do this stuff
299:21 - all right if we should show the analysis
299:23 - process
299:24 - um yeah the fft guys should the
299:28 - path producers should um produce the
299:30 - path
299:32 - all right now we can go test it
299:35 - all right let's run some audio through
299:36 - our plug-in and check out that button
299:40 - [Music]
299:45 - [Applause]
299:46 - all right cool that is working
299:53 - awesome so analyzer enablement button
299:58 - talk is implemented implemented
300:01 - analyzer enablement button
300:05 - i redid that there and did it here
300:10 - cool all right the last tweak that i
300:14 - want to do
300:15 - um let's head on up to the top we're
300:17 - going to head up to our drop rotary
300:18 - slider i had said i wanted that text
300:21 - uh to be um adjusted
300:25 - all right so let's do that right now um
300:29 - yeah okay so right here if we're enabled
300:32 - um
300:32 - use the black background otherwise use a
300:35 - dark gray background
300:38 - and then if we are enabled use white
300:40 - text
300:42 - otherwise use light gray text
300:45 - all right let's see what that looks like
300:49 - hey awesome all right i'm very happy
300:52 - with that
300:54 - okay cool all right let's make a commit
300:57 - of that
300:58 - tweaked uh button text when
301:02 - enabled or disabled
301:06 - all right that is the end of the
301:08 - tutorial i am going to dial in the
301:10 - graphics a little bit more
301:12 - but there you have it that is how to
301:13 - build the simple eq
301:16 - thanks for sticking with me to the end
301:18 - um well we learned how to make this
301:19 - simple three-panned
301:20 - 3-band equalizer with fft analyzer
301:24 - if you liked what you experienced here
301:26 - you can check out my course project 11
301:28 - where you will learn to build the
301:30 - project 11
301:33 - plugin from scratch i also have a course
301:35 - that teaches c
301:36 - plus from scratch in the context of
301:38 - writing audio software the focus there
301:40 - is on mentorship
301:41 - and not on video tutorials programming
301:43 - is learned by doing not by watching
301:45 - so for that you're going to work your
301:47 - way through 10
301:48 - 10 projects i'm going to review your
301:51 - code every step of the way via pull
301:53 - requests on github and bitbucket
301:55 - because that's what we use in the real
301:57 - world um nine of them are pure c-plus
301:59 - plus
302:00 - projects that will teach you the
302:01 - language fundamentals uh the tenth
302:03 - project is a multi-meter audio plug-in
302:06 - written in juice
302:07 - just like we used here it features level
302:10 - meters
302:10 - histograms go neometers correlation
302:13 - meters
302:13 - buttons and combo boxes threshold
302:15 - sliders
302:16 - saving and loading the plug-and-stay and
302:18 - a little bit of the dsp
302:20 - basically what you experienced here but
302:22 - with way more visual stuff being built
302:24 - and you aren't watching me build it
302:25 - either okay you are
302:27 - building it on your own i take on the
302:29 - role of your project manager
302:30 - i set up a jira board with all of the
302:32 - instructions because that's how
302:34 - companies
302:34 - manage projects in the real world i
302:36 - assign you issues from that board you
302:39 - tackle them i review your work
302:41 - and either help you when you get stuck
302:42 - or i approve it and assign you something
302:44 - new
302:45 - uh in the end you'll have built the
302:46 - whole plug-in from scratch without me
302:49 - writing a single line of code for you
302:52 - you're going to do it all yourself i'm
302:54 - just there when you need help
302:55 - so it's a pretty cool experience i've
302:57 - had a lot of people uh go through it
302:59 - i've had a few people actually manage to
303:01 - land jobs at some
303:03 - pretty big audio company so check out
303:05 - the link in the description or by
303:07 - visiting
303:10 - www.programmingformusicians.com
303:11 - thank you again for tuning in i am chuck
303:14 - i also go by the name matcat music on
303:15 - instagram and youtube
303:17 - good luck on your coding journeys and i
303:19 - will see you in the next project
303:25 - [Applause]
303:39 - [Music]
303:46 - you