00:00 - hello this is nanodano at devdungeon.com
00:03 - and we're going to walk through the
00:04 - process of creating a discord bot in
00:06 - javascript with node.js there's a
00:08 - written tutorial on devdungeon if you
00:10 - prefer the blog post format check the
00:12 - description for a link
00:14 - we're going to start at the very
00:15 - beginning with how to register with
00:17 - discord and create your own server all
00:19 - the way through creating custom commands
00:22 - adding emoji reactions to messages and
00:24 - more also check out some of the other
00:26 - tutorials for discord that are available
00:28 - including how to write discord bots in
00:30 - python
00:31 - if you aren't already familiar with
00:33 - discord it is a great text and voice
00:35 - chat platform that's free to use they
00:38 - have a web mobile and a desktop app
00:40 - it has a lot of nice features for gamers
00:42 - in particular dev dungeon has a discord
00:45 - server you can join to chat about
00:47 - programming and security related topics
00:49 - here is a link and you can also find it
00:51 - in the video description and from the
00:53 - dev dungeon homepage
00:55 - the first thing you'll need to do is
00:57 - register and then login to discord go to
01:00 - https colon slash discord app dot com
01:04 - slash channels slash at me
01:07 - once you're logged in the next step is
01:10 - to create a server for you to test with
01:12 - look on the left side for the server
01:14 - list and click the plus sign
01:16 - then click create a server you will need
01:19 - to fill out a name at a minimum you can
01:21 - also provide an image and change the
01:23 - region if desired i recommend picking
01:25 - the region closest to you for faster
01:27 - server responses
01:30 - after your server is created it should
01:32 - show up in the left side in your server
01:34 - list
01:35 - click on the server
01:36 - you should see a general channel and on
01:39 - the member list to the right you should
01:41 - see your user
01:43 - now that you have your very own server
01:44 - to mess around with you will need to
01:47 - register an app with discord
01:49 - go to the discord developer portal at
01:52 - discordapp.com developers and then click
01:56 - on create an application
01:58 - fill out the name of your application by
02:00 - default it's named my application but
02:03 - you should give it a custom name
02:08 - then click on the bot section in the
02:10 - left
02:11 - and choose add bot
02:14 - change the bot's name if you want to
02:17 - then under the tokens section of the bot
02:19 - page click on click to reveal and save
02:23 - this token
02:24 - this is essentially your bot's username
02:26 - and password combined into one string so
02:29 - it's important to keep this a secret and
02:31 - don't share it with anybody you don't
02:33 - want to control your bot
02:34 - i'm showing mine for this tutorial only
02:37 - but i will be deleting it afterwards so
02:39 - nobody can use it
02:40 - later you will use this token in the
02:42 - source code so save it
02:45 - now that you have a server an app and a
02:47 - bot user there's one more step we have
02:50 - to do with discord your bot can be
02:52 - invited to many servers but right now it
02:55 - doesn't belong to any server so we'll
02:57 - need to invite the bot to your server
03:00 - click on the oauth 2 section on the left
03:03 - side of the page
03:04 - and then scroll down slightly to the
03:06 - scopes section
03:08 - check the bot scope and it will generate
03:11 - a url
03:12 - copy that url and paste it into your web
03:15 - browser
03:16 - once on the page you'll be asked which
03:18 - server you want to invite the bot to
03:20 - choose the server that you created and
03:22 - click authorize
03:29 - once you see the authorized success
03:32 - screen your bot has successfully joined
03:34 - your server you should now see the bot
03:36 - in the member list as an offline user
03:39 - the same url that you used to authorize
03:42 - the bot can be shared with others if you
03:44 - want them to invite your bot to their
03:46 - server they will be able to interact
03:48 - with your bot but not control your bot
03:50 - now we're done with all the prep work
03:52 - needed on the discord side fortunately
03:55 - you only have to do all of this one time
03:57 - once the bot is created and invited to
03:59 - the server it will stay there you won't
04:02 - have to do this again
04:03 - now we can move on to writing the
04:05 - javascript code before we can do that
04:07 - though you need to make sure you have
04:09 - nodejs installed on your system
04:12 - open your system terminal and run node
04:15 - dash dash version
04:17 - if you get a response and it says 8.0 or
04:20 - higher you're already good to go
04:22 - but if you get a message like
04:24 - unrecognized program or some kind of
04:27 - error you most likely need to go
04:29 - download and install node.js get it from
04:32 - nodejs.org
04:34 - after you have installed node.js you
04:36 - should be able to run node
04:38 - version in your terminal and it should
04:40 - look something like this
04:43 - next i'm going to open visual studio
04:45 - code a free editor that works well with
04:47 - javascript you can use any editor you
04:49 - want though but this is the one i'm
04:51 - going to use for the tutorial and i
04:53 - recommend you use it to follow along as
04:55 - well unless you already have a preferred
04:57 - editor
04:58 - go to file open folder i recommend
05:01 - creating a new directory to store your
05:03 - project i'm going to create a new
05:05 - directory on my desktop called mybot
05:08 - then i'm going to choose to open that
05:10 - folder
05:15 - once the folder is open you can hover
05:17 - your mouse over the folder name in the
05:19 - left sidebar and click on the new file
05:22 - icon
05:23 - give the file name like mybot.js
05:29 - the next thing we need to do is install
05:31 - the discord.js module using npm
05:35 - go to view
05:36 - terminal and a terminal will open up in
05:39 - the bottom portion of your editor window
05:41 - it should automatically put you in the
05:43 - directory that you opened and you're
05:44 - working in
05:45 - in the terminal run npm install
05:49 - discord.js
05:51 - you might see some warnings and that's
05:53 - okay there shouldn't be any errors
05:54 - though
05:55 - at the time of this video version 11 is
05:58 - the latest discord.js version future
06:01 - versions may change and break some of
06:03 - these examples so if that happens check
06:05 - out the video description and the
06:07 - comments to see if there's any updates
06:10 - okay now we finally have all the setup
06:12 - work out of the way we can actually
06:13 - start coding congratulations if you made
06:16 - it this far you've got most of the
06:17 - legwork out of the way
06:19 - let's go back to our file that we
06:21 - created let's write a very simple bot
06:23 - program just to make sure everything is
06:25 - installed properly and the bot user is
06:28 - working correctly
06:29 - we will load the discord module and then
06:32 - connect that's all it's going to do
06:34 - when the bot successfully connects we
06:36 - will have it print out a message to the
06:38 - console indicating that it did connect
06:41 - in the file write const discord equals
06:45 - require
06:46 - discord.js and on the next line write
06:50 - const client equals new discord dot
06:53 - client
06:57 - then let's add some code that will get
06:59 - triggered after the bot has successfully
07:01 - connected
07:02 - write the following code
07:04 - client dot on
07:06 - ready
07:08 - parentheses
07:09 - arrow
07:11 - console.log
07:12 - connected as
07:14 - plus client.user.tag
07:19 - then finally one more line where we call
07:22 - client.login
07:24 - pass your bot's secret token as the
07:26 - parameter to login
07:28 - if you need to get your bots token again
07:31 - go to
07:32 - discordapp.com
07:34 - developers click on your application and
07:37 - then go to the bot section and click to
07:40 - reveal the token
07:43 - pass the token as a string to the
07:46 - client.login function
07:48 - let's test this now by executing the
07:50 - program in the terminal using node
07:53 - mybot.js
07:56 - we should see a message printed out to
07:58 - our console to indicate success and if
08:01 - we look at our server the bot user
08:03 - should appear online
08:05 - if you see the message in your console
08:06 - and the bot appears online then congrats
08:09 - everything is installed correctly and
08:11 - your bot is configured properly the
08:13 - hardest parts are all out of the way now
08:15 - now we're going to focus on making your
08:16 - bot do fun things
08:18 - if you happen to get an error message
08:20 - read the message carefully and see if
08:22 - you can figure out why it failed if you
08:24 - get stuck join the devdungeon discord
08:26 - server or leave a comment here
08:29 - also check the comments to see if your
08:31 - question is already answered
08:33 - to terminate the program press ctrl c
08:36 - this will end the program and return you
08:38 - to the command prompt
08:41 - after you terminate the program your bot
08:43 - will appear online for a few minutes
08:44 - before it goes back offline that's
08:46 - normal
08:48 - let's modify the code so after the bot
08:50 - connects
08:51 - we have it update its status to say that
08:54 - it's playing a game
08:56 - near the bottom of the on ready event
08:59 - write client.user.setactivity
09:03 - and pass it a string that says with
09:05 - javascript
09:06 - this will change the bot's status to say
09:09 - playing with javascript let's run it and
09:11 - verify it works
09:16 - it looks like the bots status did update
09:19 - good
09:21 - you can change the verb from playing to
09:24 - streaming listening or watching
09:27 - let's change it to say watching youtube
09:30 - instead of playing with javascript
09:33 - let's remove the line we currently have
09:34 - and replace it with
09:36 - client.user.setactivity
09:39 - youtube
09:40 - and as a second parameter we're going to
09:42 - pass it type
09:44 - watching
09:46 - let's run it again and make sure it
09:48 - works as expected
09:51 - perfect
09:53 - now let's extend the bot a little
09:55 - further to print out the list of all the
09:57 - servers that it's connected to right now
10:00 - it's probably only connected to your one
10:01 - server but it's possible that the bot
10:03 - belongs to many servers at once
10:06 - inside the ready event let's add a few
10:08 - lines of code write client.guilds.4
10:12 - each
10:14 - guild
10:15 - arrow
10:16 - console.log guild dot name
10:22 - let's run it and verify it works we
10:24 - should see our test server listed at a
10:27 - minimum
10:29 - let's take it a little further and for
10:32 - each server let's have it print out all
10:34 - of the available channels
10:37 - inside that for each loop that we
10:40 - already created write
10:43 - guild.channels.for each channel
10:47 - arrow
10:48 - console.log
10:50 - channel name
10:52 - channel type
10:54 - channel id
11:02 - let's run it again and view the output
11:05 - we should see a list of channels for
11:07 - each server listed
11:08 - notice that there are multiple types of
11:10 - channels including text voice and
11:13 - category
11:14 - let's look for a text channel there's
11:17 - one called general
11:18 - take note of the id
11:20 - we're going to need this for later in
11:21 - the next steps
11:23 - you can add it as a comment to the
11:24 - existing code so you don't lose it
11:27 - each channel and channel id is unique
11:30 - per server so you cannot use this exact
11:33 - id that i'm using in my example you'll
11:35 - have to use the id that you got from
11:37 - your own program on your server
11:39 - why don't we have the bot send a message
11:42 - to the general channel that we just
11:44 - identified in the previous step whenever
11:46 - it connects
11:47 - we'll make it say hello world
11:50 - at the bottom of the on ready event
11:52 - block
11:53 - write
11:54 - let general channel equals
11:58 - client.channels.get and pass it the id
12:01 - of your channel as a string
12:03 - on the next line write
12:05 - generalchannel.send
12:07 - hello world
12:11 - let's run the program again and make
12:13 - sure it works
12:14 - verify it sends a hello world message
12:16 - after it connects
12:19 - next let's demonstrate how to attach a
12:22 - file or an image to a message you send
12:25 - it's very similar to sending a message
12:27 - except instead of passing a string we're
12:29 - going to pass an attachment object we
12:32 - can create an attachment by writing
12:35 - const attachment equals new
12:38 - discord dot attachment
12:40 - we need to pass either a file name or a
12:43 - web url to a file
12:45 - this works the same for files and images
12:48 - you can pass it a local file path to
12:50 - something on your hard disk or an
12:52 - internet address
12:54 - i'm going to provide a url to the dev
12:56 - dungeon logo you can use the same url
12:59 - since it is publicly accessible now on
13:01 - the line where we call
13:04 - generalchannel.send let's replace the
13:06 - string of hello world with the
13:08 - attachment object we just created
13:12 - let's run the code and see what happens
13:18 - as expected it posted the image to the
13:20 - channel
13:22 - okay so now we have seen how to get a
13:24 - list of servers get a list of channels
13:27 - send a message send an image update the
13:30 - bot status but what if we want to
13:32 - respond to an incoming message from
13:34 - someone else
13:36 - so far we've been triggering all of our
13:38 - code based off of the ready event which
13:40 - is triggered after the bot connects and
13:43 - is ready to perform actions we're going
13:45 - to start using a different event now
13:47 - one that is triggered every time a
13:49 - message is sent
13:50 - that is the message event
13:53 - below the entire client ready event
13:57 - let's write client dot on
14:00 - message received message
14:03 - arrow
14:04 - open and close bracket
14:06 - right now we'll leave it empty so let's
14:08 - fill out the logic that we want to
14:09 - happen whenever a message is received
14:12 - the message event is triggered on every
14:14 - single message that means even messages
14:17 - that the bot sends out will trigger this
14:20 - event
14:21 - this could potentially send the bot into
14:23 - an infinite loop where it continues
14:25 - responding to its own messages forever
14:29 - to avoid this
14:30 - let's add a check to see if the message
14:32 - author is the bot itself if it is we
14:35 - will just ignore it and return and exit
14:37 - the function so it doesn't do anything
14:39 - do this by writing if received message
14:43 - dot
14:44 - equals equals client.user
14:48 - then return
14:51 - if the message was sent by someone else
14:53 - other than the bot the code will
14:55 - continue past these lines so after this
14:58 - if statement let's have the bot reply
15:01 - write received message dot channel dot
15:04 - send
15:05 - message received plus received message
15:08 - dot content
15:10 - this will have the bot respond in the
15:12 - same channel and echo back the message
15:14 - that it got as acknowledgement
15:17 - this could be a public channel or a
15:19 - private message it'll work
15:21 - correctly for both
15:23 - why don't we make the response a little
15:24 - more personalized let's have the bot tag
15:27 - the user who sent the message to do this
15:30 - we just need to reference the
15:32 - receivedmessage.author
15:34 - and convert it to a string
15:36 - update the sent message to include
15:38 - receivedmessage
15:42 - like this
15:48 - let's run it again and make sure that it
15:50 - works
15:55 - good it looks like it tags the user who
15:57 - sent the message
16:00 - while we're at it why don't we have the
16:02 - bot add an emoji reaction to the user's
16:05 - message
16:06 - inside the on message event let's have
16:09 - the bot add a reaction
16:11 - some servers have custom emojis that you
16:13 - can use while others only have the
16:15 - default set believe it or not there is
16:18 - actually an international standard for
16:20 - emojis you can check out all of the
16:22 - unicode emojis at this link it's also in
16:25 - the video description
16:27 - to add a reaction we will write
16:29 - receivedmessage.react
16:32 - and pass it the emoji string
16:34 - you can actually copy and paste the
16:36 - emoji itself into the source code a
16:39 - unicode emoji is recognized as a
16:41 - character just like a p or q
16:44 - however discord does not support every
16:47 - single unicode emoji so you'll have to
16:49 - try it out and make sure the one that
16:51 - you want works for this example we'll
16:54 - use the thumbs up which is known to work
16:57 - you can also use custom emojis on your
16:59 - server to add custom emojis to a server
17:02 - go to server settings emoji upload emoji
17:06 - i will upload a sample one now to
17:07 - demonstrate
17:12 - to use a custom emoji as a reaction you
17:15 - will need to know the unique id of the
17:17 - custom emoji
17:18 - we don't know what that id is yet as i
17:21 - just uploaded it so why don't we just
17:23 - get every custom emoji from the server
17:25 - print out its id and react with it so
17:28 - add the code receivedmessage.guild
17:34 - each
17:35 - custom emoji
17:37 - arrow
17:38 - console.log
17:40 - custom emoji name
17:42 - custom emoji id
17:45 - and then on the next line
17:47 - received message dot react
17:49 - custom emoji
17:56 - this will go through each custom emoji
17:58 - available on the server and react with
18:00 - it as well as print out the id let's run
18:02 - it once to see how it works
18:12 - notice how it reacted with our custom
18:14 - emoji in the server and in the console
18:16 - it printed out the id now that we know
18:19 - the id we can just react with that one
18:21 - specific emoji instead of loading all of
18:23 - them
18:24 - let's get rid of the four each and
18:26 - replace it with let custom emoji equals
18:30 - received message dot guild dot emojis
18:34 - dot get
18:35 - and then the id
18:38 - on the next line add received
18:40 - receivedmessage.react
18:42 - custom emoji
18:47 - let's run it and send a message again
18:49 - just to make sure it works
18:58 - at this point you should feel a little
18:59 - more comfortable with your bot and have
19:01 - enough building blocks to build a more
19:02 - complicated bot
19:04 - i want to cover one last topic though
19:06 - which is how to create a command a
19:08 - command in this sense is just a regular
19:10 - message that starts with a special
19:12 - character like an exclamation point that
19:14 - triggers an action by the bot
19:17 - there are many ways you can implement
19:19 - this
19:19 - you could check the entire message to
19:21 - see if it contains the full command or
19:24 - you could make the command take a
19:26 - variable number of parameters
19:28 - i'm going to walk through one way to
19:29 - create it that demonstrates making two
19:32 - commands a help command and a multiply
19:35 - command
19:36 - with these examples you should have a
19:37 - good template for extending and creating
19:40 - more of your own custom commands
19:42 - first let's start inside the on message
19:46 - event block
19:47 - since the command will be a message
19:50 - let's inspect the first character of the
19:52 - message and see if it equals the
19:54 - exclamation mark
19:56 - if it does
19:57 - let's pass the logic off to a function
19:59 - called process command and let's pass it
20:02 - the received message as the argument
20:06 - next we'll need to create the process
20:08 - command function
20:10 - it takes the received message as a
20:11 - parameter
20:13 - we already know it starts with an
20:14 - exclamation point so let's remove that
20:17 - character from the beginning of the
20:18 - string with let full command equals
20:22 - receivedmessage.content.substir
20:26 - 1. this will remove the first character
20:30 - next let's take the remaining string and
20:32 - split it into pieces based off of each
20:35 - space character
20:37 - let split command equals full command
20:41 - dot split and pass it a space
20:44 - this will return an array containing
20:46 - each word we want to treat the first
20:49 - word provided as the name of the command
20:52 - we'll call that the primary command
20:55 - so write let primary command equals
20:59 - split command bracket 0.
21:02 - if there are any remaining words in the
21:04 - array we want to store them as the
21:06 - arguments
21:08 - let arguments equal split command dot
21:11 - slice
21:12 - 1. this will exclude the first element
21:15 - and keep all of the rest of them if
21:17 - there are any
21:18 - so now we have one variable containing
21:20 - the primary command
21:22 - and another variable containing the
21:24 - array of all the arguments if there are
21:26 - any
21:27 - now we can inspect the primary command
21:29 - variable to see what command was
21:31 - triggered
21:32 - since we want to make a help command
21:34 - let's check and see if the primary
21:36 - command equals the string help
21:39 - we'll use an if statement
21:41 - if it does equal help let's hand off
21:43 - logic to a function named help command
21:46 - and pass it the arguments along with the
21:48 - original message that was received
21:52 - next we will have to create the help
21:54 - command function let's do that now
21:57 - function help command and pass it
22:00 - arguments received message
22:05 - inside the help command we can inspect
22:08 - the argument list to see if any
22:09 - arguments were provided let's first
22:12 - check to see if the length is zero
22:14 - meaning no parameters were provided
22:16 - if arguments dot length equals equal to
22:19 - zero
22:20 - then received message dot channel dot
22:23 - send
22:24 - i'm not sure what you need help with
22:26 - try
22:27 - exclamation help
22:29 - topic
22:34 - if the user didn't provide any arguments
22:35 - we'll let them know
22:37 - by responding with that message
22:39 - let's also add an else statement to
22:41 - handle the case when arguments are
22:42 - passed in this case we'll just respond
22:45 - saying it looks like you need help with
22:48 - plus arguments
22:56 - let's run this and try it out now try
22:59 - typing exclamation help and then
23:02 - exclamation help javascript and review
23:04 - the responses from the bot
23:11 - let's add a second command so you get
23:14 - the idea of how to add more commands
23:18 - back in the process command function
23:21 - let's add an else if statement to check
23:24 - for another command named multiply
23:27 - if it is let's hand off logic to a
23:29 - function named multiply command
23:32 - let's also add an else statement to
23:34 - catch any unknown commands and suggest
23:37 - some possible commands to the user
23:45 - next we need to create the multiply
23:47 - command function function multiply
23:50 - command
23:51 - arguments received message
23:56 - the first thing we should do is check
23:58 - the arguments
23:59 - we will need at minimum two values to
24:02 - multiply together
24:03 - let's write an if statement to check if
24:05 - the arguments is less than 2. if it is
24:08 - less than 2 let's send a message back to
24:10 - the user and then exit the function
24:16 - if there are at least two arguments then
24:18 - the code will continue past this if
24:20 - statement
24:21 - let's calculate the product then
24:23 - let product equals one to start
24:26 - then
24:27 - arguments dot four each
24:30 - value
24:31 - arrow
24:33 - product equals product times parse float
24:37 - value
24:39 - now that we have the multiplication
24:41 - product we can return the answer to the
24:43 - user with received message
24:46 - dot channel dot send
24:48 - the product of arguments
24:51 - is
24:52 - product dot tostring
24:58 - now let's test out the multiply command
25:01 - restart the bot and send exclamation
25:04 - multiply by itself
25:06 - and then try exclamation
25:09 - multiply 2.5
25:12 - 10 and 10 and it should return a result
25:18 - try adding your own custom command to
25:20 - the bot if you don't have any ideas try
25:23 - a simple one where if you write
25:26 - exclamation ping the bot will respond
25:29 - with pong
25:34 - if you need some other ideas for custom
25:35 - commands how about an exclamation
25:39 - fortune command that will return a
25:41 - random fortune cookie quote
25:43 - or how about exclamation bitcoin
25:46 - that will look up the bitcoin price
25:48 - using an api and return the price to the
25:50 - user
25:51 - or how about
25:53 - exclamation weather that takes the zip
25:55 - code as an argument and returns the
25:57 - local weather
25:59 - that's all the code we're going to cover
26:00 - in this tutorial
26:02 - you're on your own now you should be
26:03 - able to take these building blocks and
26:06 - build better more complex bots
26:09 - one common question is how do i run the
26:11 - bot 24 7 all the time to keep a bot
26:15 - running all the time you'll need to
26:16 - leave the program running all the time
26:18 - you can do this by simply leaving your
26:20 - computer on all the time and never
26:22 - turning it off this is not practical for
26:24 - most people though an alternative is to
26:26 - rent a cheap five dollar a month server
26:29 - from a provider like linode or
26:31 - digitalocean
26:33 - they provide cheap linux servers that
26:35 - run all the time in their data center
26:37 - the cloud as you call it you can run
26:39 - your code there
26:41 - another alternative is to use something
26:43 - like a raspberry pi from your house and
26:45 - leave that running all the time
26:47 - if you have any questions feel free to
26:49 - join the dev dungeon discord server and
26:51 - ask questions you can also check the
26:53 - comments here and leave comments here
26:56 - also make sure you bookmark the
26:57 - discord.js official documentation at
27:01 - discord.js.org
27:03 - that's going to be the best most
27:05 - definitive source for this library
27:08 - check out other dev dungeon tutorials on
27:10 - the youtube channel and on
27:12 - devdungeon.com
27:13 - there are several other discord
27:14 - tutorials including how to write a
27:16 - discord bot in python
27:18 - thanks for watching and please subscribe
27:20 - to the channel