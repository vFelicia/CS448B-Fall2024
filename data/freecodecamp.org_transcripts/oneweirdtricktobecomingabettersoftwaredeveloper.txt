00:01 - well welcome everyone
00:03 - so next up we have esther nam speaking
00:05 - on one weird trick to becoming a better
00:07 - software developer let's help welcome
00:08 - here
00:17 - okay
00:19 - all right thank you all for coming
00:21 - i'm here because i would like to be a
00:23 - great developer someday
00:26 - i've been a software developer now for
00:27 - about seven years and in my relatively
00:29 - short career i've worked out a number of
00:31 - companies
00:32 - and between work the socal python meetup
00:35 - i helped to run and coming to
00:36 - conferences like pycon i've had the good
00:38 - fortune of knowing at least a few
00:40 - developers whom i consider great
00:43 - i've been trying to figure out what they
00:44 - have in common because i don't believe
00:46 - that developer greatness is a fixed
00:48 - trait i take the growth mindset and
00:51 - believe that by working hard and
00:53 - practicing the right habits i too can
00:55 - achieve greatness
00:57 - but what exactly do i mean by a great
00:59 - developer
01:00 - i'll explain by way of a few
01:01 - illustrations
01:04 - meet goofus
01:05 - goofus is a developer who's been working
01:07 - at acme widget co for six months
01:10 - she nailed her whiteboard interview with
01:11 - the most elegantly written algorithms
01:13 - the team had ever seen
01:15 - her first project involved building a
01:17 - slingshot prediction machine and she was
01:19 - excited because she'd built something
01:21 - similar at her previous job
01:23 - so she knew exactly how the machine
01:24 - should be designed
01:26 - goofus worked really hard for two weeks
01:29 - but when she was finished the product
01:31 - manager found that goofus had made some
01:32 - assumptions about the specs that weren't
01:34 - quite correct
01:36 - goofus worked hard without complaint to
01:37 - make every change but but the project
01:40 - ended up taking several weeks longer
01:42 - than expected
01:46 - goofus has a co-worker named gallant
01:49 - gallant has been working at acme for
01:50 - only a little longer than goofus has
01:52 - the gallant already has a process in
01:54 - place for new projects
01:56 - she sets up a very short daily meeting
01:58 - with the designer and qa lead so that
02:00 - they can give and receive feedback on
02:02 - features and change requests right away
02:04 - one day gallant went to lunch with the
02:06 - company's marketing analyst
02:08 - who mentioned that a part that gallant
02:10 - was building could be useful for another
02:11 - company project by adding some tracking
02:14 - gallup found she could easily add
02:16 - tracking within the current project
02:17 - scope and this offhand feature request
02:20 - ended up doubling acme widget company's
02:22 - revenue for the year
02:26 - a final story
02:28 - goofus was tasked with developing an
02:30 - internal tool leading two junior
02:32 - developers on the project
02:34 - goofus was excited at the chance to
02:36 - teach the newbies how to code as well as
02:38 - she did and designed a framework that
02:40 - was really elegant and efficient
02:42 - however the junior developers had
02:44 - trouble even setting up their
02:46 - development environments in a way that
02:47 - let them start working on the project
02:50 - soon the junior developers stopped going
02:52 - to goofus with more of their dumb
02:53 - questions
02:54 - instead they started going to gallant
02:56 - for help
02:58 - because goofus had been too busy with
03:00 - optimizations and test cases to write
03:02 - any docs
03:03 - gallant had to message goofus constantly
03:05 - for more clarification on the
03:06 - architecture
03:07 - both senior developers ended up spending
03:09 - way too much time helping the junior
03:11 - developers on the project and the
03:12 - delivery date went further past the
03:14 - original deadline
03:16 - and even worse gallant had trouble
03:17 - meeting her own deadline on her own
03:19 - project because she'd been so busy
03:21 - helping out the others
03:25 - these stories are greatly exaggerated
03:27 - but i bet most of you have seen or
03:29 - experienced similar situations in your
03:30 - own jobs what are the qualities of
03:33 - developers like gallant that set them
03:35 - apart from developers like goofus
03:39 - well
03:40 - most of us tend to think first of
03:41 - technical ability when it comes to
03:43 - developer greatness
03:45 - this is from stack overflow's annual
03:46 - survey with responses from around 64 000
03:49 - developers in 2017.
03:51 - it can't be denied great developers must
03:54 - have a solid foundation of technical
03:56 - skills
03:58 - also great developers ship the right
04:00 - project at the right time
04:02 - often the emphasis is on the on time
04:04 - part but the right product is just as
04:06 - important
04:07 - there's no point in writing software
04:09 - with perfect code and 100 test coverage
04:11 - if nobody ends up using the darn thing
04:14 - now you may or may not find the top
04:17 - trait surprising
04:19 - and one metric that's not on here that i
04:20 - always come back to is if i worked with
04:23 - someone like gallant and they told me
04:24 - they were leaving the company would i
04:26 - consider following them how many of the
04:28 - other developers would feel the same way
04:32 - why do we want to work with great
04:33 - developers
04:35 - well they make good software
04:37 - they help us become better developers
04:39 - because we learn so much from them they
04:41 - make our jobs easier maybe even more fun
04:45 - we software developers usually work as
04:46 - part of a team
04:48 - so
04:49 - thinking about the qa person testing our
04:50 - software or the devops person helping us
04:52 - package up our code to deploy to prod or
04:55 - the product manager who wants to show
04:57 - off cool new features to the company
04:59 - clients
05:00 - if we code with their needs in mind
05:02 - we'll be the developer everyone wants to
05:04 - work with
05:05 - and it turns out empathy skills are what
05:07 - help great developers be so great
05:10 - so let's talk about this one weird thing
05:12 - called empathy
05:13 - first let's make sure we all understand
05:15 - what empathy is
05:18 - here's a simple definition that i like
05:20 - empathy is the experience of
05:21 - understanding another person's condition
05:23 - from their perspective
05:24 - you place yourself in their shoes and
05:26 - feel what they are feeling
05:28 - empathy is marked by a distinction
05:30 - between oneself and
05:36 - another there are two types of empathy
05:40 - one is emotional empathy
05:43 - which is not just about feeling
05:45 - compassion or being nice
05:47 - for example if your co-worker is upset
05:49 - because they're hungry and this meeting
05:51 - you're all in is running late you may
05:53 - feel sorry for them that's sympathy
05:56 - but if you feel their hunger or you
05:58 - remember yourself being hungry in long
06:00 - meetings
06:01 - and it moves you to take action to help
06:02 - your coworker maybe you'll sneak them a
06:04 - snack or suggest out loud that we cut
06:07 - the meaning a little short you're
06:08 - feeling empathy
06:11 - there's also cognitive empathy which is
06:13 - the ability to understand something from
06:15 - the perspective of another
06:17 - cognitive empathy is tied to the concept
06:20 - of theory of mind which is the
06:21 - understanding that others have mental
06:23 - states that differ from one's own
06:26 - and it's not just enough to imagine
06:27 - yourself in other shoes because what if
06:30 - your assumptions about the other's
06:31 - perspective are all wrong
06:33 - to use a trivial example
06:35 - you are a slack power user so whenever
06:38 - you need to ask a co-worker something or
06:40 - to give them a heads up about some kind
06:42 - of change you fire up slack and you
06:44 - shoot them a message and you go your
06:46 - merry way
06:47 - but if you really wanted to make sure
06:48 - your co-worker got your message you
06:51 - might take a second to check first does
06:53 - this co-worker use slack the way i do
06:56 - or do they prefer email or even a
06:57 - face-to-face interaction
07:00 - assuming they would want what you
07:01 - yourself prefer would not be the most
07:03 - empathic choice
07:05 - you should instead make an effort to
07:06 - learn what their preference actually is
07:09 - if you don't truly take another's
07:11 - perspective
07:12 - what you're really doing is called
07:13 - projection rather than empathy
07:18 - you've heard the golden rule due to
07:20 - others what you'd have them do you
07:22 - but the golden rule isn't about what you
07:24 - do
07:24 - putting yourself in someone else's shoes
07:26 - means fully imagining yourself as that
07:28 - person
07:29 - you treat them as they would want to be
07:31 - treated rather than the way you yourself
07:33 - would like to be treated
07:35 - while the two types of empathy are
07:37 - related to each other
07:38 - cognitive empathy activates different
07:40 - areas of the brain from emotional
07:42 - empathy
07:43 - a deficit in one doesn't necessarily
07:44 - mean a deficit in the other
07:47 - regardless empathy isn't easy for most
07:49 - of us it requires effort a lot of
07:52 - patience
07:53 - and a certain imaginative ability for us
07:55 - to place ourselves in somebody else's
07:57 - shoes especially if the other person is
08:00 - dissimilar or unfamiliar to us
08:04 - yet empathy is often seen as merely a
08:06 - soft skill we tend to undervalue soft
08:08 - skills in tech
08:10 - and so you may believe for this reason
08:11 - or another that empathy is not worth the
08:14 - effort to practice
08:15 - but i don't think that's true
08:17 - if our brains can learn how to write
08:19 - complex algorithms or cook up layer upon
08:21 - layer of abstraction over a set of
08:23 - arbitrary business rules
08:25 - why couldn't we also learn to get better
08:27 - at seeing what others see or feeling
08:29 - what they feel to do our jobs better
08:32 - also research has shown that soft skills
08:34 - are surprisingly important for building
08:36 - productive successful teams
08:39 - microsoft recently released a paper
08:41 - entitled what makes a great software
08:42 - engineer they claim to have identified
08:45 - 53 attributes of great developers but
08:47 - thoughtfully provide a much shorter
08:49 - summary which i'm going to quote here
08:51 - there's a lot of good stuff but what i
08:53 - want to emphasize is the last bit the
08:55 - part in red which i mentioned resonates
08:57 - with me
09:00 - so
09:01 - how do we practice empathy to get better
09:03 - at understanding how others think and
09:04 - feel
09:05 - i've got five ideas relating mostly to
09:07 - cognitive empathy
09:09 - they may not all work out for every one
09:11 - of you but i hope everyone finds that at
09:13 - least one of the suggestions works for
09:14 - them
09:16 - i'm going to start by suggesting one
09:18 - baby step where the other in the self
09:21 - other distinction i described earlier
09:23 - is actually still you
09:25 - so how many of you have looked at some
09:27 - code that you found absolutely
09:29 - unreadable you ran get blame and
09:31 - discovered that the terrible coder was
09:32 - in fact yourself
09:34 - this is code you'd written a year ago
09:37 - but it's almost as though somebody else
09:38 - entirely had written it someone stupider
09:42 - the problem is not that past you is
09:43 - actually stupid it's because past you
09:46 - had a completely different set of
09:47 - knowledge assumptions and context from
09:49 - which they were working
09:51 - so going the other way
09:53 - when current you writes code or
09:54 - documentation
09:55 - take a few minutes to consider this
09:58 - we'll future you who has a completely
10:00 - different immediate context and working
10:01 - knowledge be able to understand or
10:03 - follow your code when you see it again
10:06 - one of the best ways to practice this is
10:07 - when you're adding logging to your code
10:11 - let's say we have a function and it
10:14 - handles a request
10:15 - and you've already thought through the
10:16 - ways in which your code could break so
10:18 - you have this exception handler but
10:20 - imagine how future you so that's you a
10:22 - year from now with no memory of writing
10:24 - this function or what it does or why how
10:27 - would you understand a log message that
10:29 - looked like
10:30 - this not that helpful
10:33 - wouldn't future you appreciate some
10:35 - hints as to why this function might have
10:36 - failed or what the parameters even mean
10:40 - think about what information future you
10:41 - would need to be able to trace and debug
10:43 - the issue as quickly as possible
10:46 - let's add some more verbose logging some
10:48 - better error handling and messaging
10:52 - now when you see this log the stack
10:53 - trace you've got action level data
10:57 - the same goes for
10:58 - documentation thinking of future you may
11:01 - help you write better docs
11:03 - when i deploy a project or handle an
11:05 - incident or even run a so-called
11:07 - one-time script
11:09 - i open up a text file and write down one
11:11 - line for every step that i just took so
11:13 - that the next time i have to do this i
11:15 - don't have to remember or re-learn
11:17 - everything that needs to be done or its
11:19 - context
11:20 - i almost always find myself the next
11:22 - time i do this deployment thanking past
11:24 - me
11:26 - so thinking of future you as someone
11:28 - else you can empathize with is one baby
11:31 - step way to practice getting better at
11:33 - empathy
11:34 - and in so doing you will become a better
11:36 - software developer
11:38 - but guess what you can't practice
11:40 - empathy all by yourself empathy is by
11:42 - necessity a social reaction so you
11:45 - depend on others to practice it
11:49 - one step further than trying to put
11:51 - yourself in your own shoes
11:53 - would be to try to put yourself in
11:55 - another's shoes
11:56 - and since it's easier to feel empathy
11:58 - for someone who is more similar to you
12:00 - if you really want to level up on your
12:02 - empathy skills you should try the
12:03 - following
12:05 - during your next project or even for
12:07 - just a day
12:08 - make time to learn the job of a
12:10 - co-worker who is not a fellow developer
12:12 - maybe join the qa team or the devops
12:14 - team to see the kinds of issues they
12:16 - face on their side of this project
12:18 - you're all working on
12:21 - this will benefit you in several ways
12:23 - first off the more you work with someone
12:26 - the more familiar they'll become to you
12:28 - and the easier it'll be for you to start
12:29 - seeing what they see
12:31 - feeling more empathy for them
12:33 - you'll notice how the code you write
12:34 - affects those who are required to test
12:36 - your code or to make sure the serverless
12:38 - functions in the cloud running your code
12:40 - don't error out with mysterious bugs
12:42 - that wake people up at three in the
12:43 - morning
12:44 - so then maybe you'll be more
12:46 - conscientious about updating the
12:47 - dependency list and the package you're
12:49 - about to deploy to prod
12:51 - or maybe you'll find and handle more
12:52 - edge cases because you'll have thought
12:53 - to ask the qa team what those might be
12:56 - before they get to work testing them
12:58 - in the best case scenario you'll ship
13:00 - your project more quickly because you'll
13:02 - have shortened the feedback and
13:03 - iteration cycle that you need to finish
13:05 - the product
13:06 - as a bonus you'll become more familiar
13:09 - to your co-workers and it's more likely
13:10 - they'll come to feel more empathy for
13:12 - you
13:16 - to generalize even further
13:18 - you can improve your empathy skills by
13:19 - exercising something all the great
13:21 - developers i know have in spades which
13:22 - is curiosity
13:24 - not just about other people but about
13:26 - new projects ideas and experiences
13:29 - the great developers i know constantly
13:31 - seek new things to try or novel ways to
13:33 - tackle a problem
13:35 - we all naturally gather tons of
13:37 - experience as we progress through our
13:38 - careers but seeking out different kinds
13:40 - of experiences and exploring new ideas
13:43 - will accelerate your progress
13:44 - exponentially because you can integrate
13:47 - your experience with a bunch of new
13:48 - perspectives
13:51 - you'll also gain a wider view of the
13:53 - systems you build and work in as a whole
13:56 - and in some cases by better
13:58 - understanding the problem and seeing a
14:00 - more complete picture
14:02 - you might find that the best solution is
14:04 - actually to solve a completely different
14:06 - problem altogether
14:09 - some companies like google already know
14:11 - the benefits of having engineers try on
14:13 - other hats they have programs that let
14:15 - people do just that
14:17 - but even if you don't work at google
14:19 - that doesn't mean you can't sit down
14:20 - next to a co-worker to shadow them for a
14:22 - day or even just have lunch with someone
14:24 - just to get to know them a little better
14:30 - speaking of new experiences
14:31 - another way to improve your empathy for
14:33 - other developers and your users is to
14:35 - read code written by others
14:38 - you want to do this anyway to deepen
14:40 - your understanding of the libraries or
14:41 - languages you work with
14:43 - but another benefit is that you observe
14:44 - the great variety of ways a given
14:46 - problem might be solved
14:48 - you might have an inkling of this from
14:49 - whenever you search the python packaging
14:50 - index or library
14:52 - to use one very simplified comparison
14:55 - if you work in python and you want to
14:57 - store and retrieve data from a
14:58 - relational database you'll come across
15:00 - the django orm
15:02 - and sql alchemy
15:04 - both libraries allow you to access data
15:06 - from a database
15:08 - but one creates almost a direct
15:09 - one-to-one mapping between an object and
15:11 - a row from a database table using the
15:13 - active record pattern
15:14 - while the other separates logic having
15:16 - to do with objects from the logic
15:18 - underpinning database operations using
15:20 - the unit of work pattern
15:21 - as you look into these and the many
15:23 - other solutions that exist
15:25 - they'll show you how the author of each
15:26 - library chose to make sense of this
15:28 - problem of data persistence
15:30 - maybe it'll present for you a new
15:31 - perspective that will help you find the
15:33 - right solution for your own problem
15:36 - or maybe you'll notice shared patterns
15:38 - in the way solutions are written by
15:40 - multiple developers and you'll
15:42 - understand why these patterns exist
15:44 - in both django orm and cqlogamy
15:46 - retrieving the number of all the rows in
15:47 - the table is a method called named count
15:50 - which is a lot like what you'd write in
15:51 - raw sql so that would require less
15:54 - mental overhead for developers who are
15:55 - trying to learn either library
15:58 - and that's what the famous principle of
16:00 - least astonishment is about
16:02 - when designing a component it should
16:04 - behave the way users expect it to behave
16:06 - well to know how users might expect a
16:08 - component to behave you need first to
16:10 - figure out who the users are
16:12 - and then you need to see your component
16:14 - through their eyes
16:16 - building an interface in general is a
16:18 - really good exercise of cognitive
16:19 - empathy
16:21 - when you write an api you need to
16:23 - consider
16:24 - who is the typical user of this api
16:26 - what are the most common arguments that
16:28 - users will send over when they call your
16:30 - method
16:31 - in what order are they likely to send
16:32 - them in other words what are your
16:34 - functions dependencies are there common
16:36 - default values for some of these
16:37 - arguments
16:39 - when the user calls your endpoint what
16:41 - do you think they'll expect to get back
16:42 - from it what return type or response
16:45 - i find tests really useful for figuring
16:47 - out how to build these layers of
16:49 - abstraction because your test cases are
16:51 - really just instances of a client using
16:53 - your function or your library
16:56 - let's say you have a brilliant new
16:57 - startup idea it's okcupid for dogs
17:01 - so neat for your clients you need to
17:03 - write a function to find a dog
17:05 - so we have our test case and let's think
17:08 - about how we want this function called
17:10 - find dogs to work by writing a test for
17:12 - it
17:14 - so we most likely want to find a pet by
17:16 - relationship status and we expect a json
17:18 - object with a list of dogs that match
17:20 - that status
17:22 - so that means we want our function to
17:24 - get us a list of dogs
17:26 - and to do this it needs to make an api
17:28 - call
17:29 - and now you have this function
17:31 - but
17:32 - probably to call this api you need some
17:34 - kind of authentication right so we're
17:37 - going to add some username and password
17:38 - parameters and of course now we have to
17:41 - change our test to add the same things
17:46 - okay
17:48 - so now you have this function and it
17:50 - gets you a list of dogs
17:52 - but looking at this fine dog's function
17:54 - again doesn't that look kind of weird
17:56 - why does a function that's supposed to
17:58 - just find us some dogs need to know
17:59 - anything about a username or password
18:02 - that's a hint that we should separate
18:03 - these bits out
18:05 - but even if we find that find dogs
18:06 - should not accept a username and
18:08 - password specifically as parameters the
18:10 - find docs function does need access to
18:12 - them somehow in other words this
18:14 - username password authentication bit is
18:16 - a dependency of find dogs
18:19 - maybe we can encapsulate this username
18:21 - and password implementation into some
18:23 - sort of class like the off dog api
18:26 - object let's call it and find aux can
18:28 - now call this api
18:29 - object
18:31 - going back to our test
18:32 - we now can fix our params
18:35 - but you know to be honest that looks a
18:37 - little strange still again if i'm
18:39 - looking at a function called find dogs i
18:41 - don't expect to need to pass in any kind
18:42 - of off dog thing right
18:45 - but what if i made a very small change
18:48 - so instead of this
18:50 - i could do something like this
18:52 - and then maybe
18:53 - have a clearer name for it now this to
18:56 - me as a user of this api client it looks
18:59 - familiar and it makes sense to me
19:02 - i hope i still feel this way or future
19:03 - me still feels the same way a year from
19:05 - now
19:06 - but with find dogs encapsulated this
19:08 - different way i can see this component
19:10 - for what it is which is an api client to
19:13 - get dogs
19:17 - and that's what the client looks like
19:20 - malta oh a developer who wrote a
19:22 - javascript framework that powers google
19:24 - photos google plus google drive and some
19:27 - other very obscure tiny websites
19:30 - said this at a recent talk he gave at
19:31 - jsconf australia
19:33 - the way i would talk about myself as a
19:35 - senior engineer is that i'd say i know
19:37 - how i would solve this problem
19:39 - the next level is that i can say
19:41 - i know how others would solve this
19:42 - problem
19:44 - what this means and this is malta's
19:45 - conclusion as well is that it takes both
19:47 - experience and empathy to create the
19:49 - right kinds of abstractions for your
19:51 - application
19:53 - now you saw how cognitive empathy helps
19:55 - with naming things which is one of the
19:56 - famous hardest problems in computer
19:58 - science
20:00 - clear specific and descriptive names
20:02 - make code more readable to other
20:03 - developers
20:05 - at certain scales it's more important to
20:07 - write understandable code than it is to
20:09 - write performant code
20:11 - consider that a bug in your code may
20:13 - cost the company hundreds of dollars a
20:14 - month but if it takes two developers one
20:17 - extra week to debug the problem because
20:19 - they had so much trouble understanding
20:20 - the code or what it did that's thousands
20:23 - of dollars more
20:25 - similarly an optimization you write for
20:27 - your program might save you thousands of
20:28 - dollars a year in cpu cycles saved
20:31 - but if the code makes it risky to
20:33 - introduce changes
20:34 - then those cost savings might just be
20:36 - wiped out by the development time
20:37 - required and the missed opportunities
20:40 - so
20:41 - software must be written not just for
20:43 - the computer executing your instructions
20:45 - but also for the humans who need to
20:47 - maintain or change your code
20:49 - programming is really another form of
20:50 - communication which is why cognitive
20:52 - empathy will help you become better at
20:54 - it
20:58 - another reason why empathy is crucial to
21:00 - effective communication is that it lets
21:02 - you establish grounding
21:04 - not to get too technical but grounding
21:06 - is sort of the tcp handshake of human
21:08 - communication
21:10 - it's a set of mutual assumptions
21:11 - knowledge and beliefs that get
21:13 - coordinated between you and the person
21:15 - you're talking to to ensure both of you
21:16 - are on the same page
21:18 - establishing grounding can be as simple
21:20 - as nodding while you're listening to
21:22 - someone to signal that you follow what
21:23 - they're saying or making a quick request
21:26 - for clarification like huh
21:28 - most of us already practice grounding in
21:30 - everyday conversation
21:32 - but one way to get better at grounding
21:34 - is to teach something to someone else
21:37 - imagine how you would explain to a
21:39 - three-year-old why dinosaurs don't exist
21:41 - anymore
21:43 - now imagine how you'd explain the same
21:44 - thing to a 23 year old
21:47 - we intuitively know that for a young
21:49 - child we might need to describe things
21:51 - more simply and at a higher level than
21:53 - for an adult
21:54 - but it requires more effort for us to do
21:56 - this well when we're among adults
21:58 - we all know someone who claims to love
22:00 - teaching but assumes we have base
22:01 - knowledge about the topic that we don't
22:04 - this person will explain things in a way
22:06 - that goes right over our heads or that's
22:07 - effectively meaningless to us
22:09 - or
22:11 - on the other hand they'll assume we know
22:12 - too little and waste a lot of time
22:14 - teaching us things that we already know
22:17 - all they had to do was spend just a few
22:18 - minutes to check first that they
22:20 - understand what we actually knew in
22:22 - order to do a much better job of
22:23 - teaching us something relevant and
22:25 - understandable
22:28 - but even if teaching is not your thing
22:30 - you can still practice grounding beyond
22:32 - everyday conversation
22:35 - let's say you're in a product meeting to
22:36 - go over some requirements
22:38 - when it ends take a few extra minutes to
22:41 - ask the other people in the meeting to
22:42 - describe the main takeaways from their
22:44 - points of view
22:46 - if their main takeaways are different
22:47 - from yours then you clearly require more
22:50 - grounding
22:51 - the more you communicate or even over
22:53 - communicate the more knowledge and
22:54 - context you'll share and the more
22:56 - cognitive empathy you'll share
22:58 - in fact it's been theorized that empathy
23:00 - evolved for exactly this purpose to
23:03 - improve coordination between members of
23:04 - a group so that they can respond more
23:06 - effectively to potential opportunities
23:08 - or threats
23:10 - context is also important because
23:12 - decisions are made under constraints and
23:14 - sometimes we rush to judgment on
23:15 - decisions without seeing the bigger
23:17 - picture
23:18 - so it's important to ask questions to
23:19 - fill in that context
23:22 - great developers don't hesitate to ask
23:24 - questions
23:25 - even if it means admitting they don't
23:26 - know something
23:28 - and one question that's very effective
23:30 - at gathering context is why
23:33 - why did you pick this library over other
23:34 - libraries that might do the same thing
23:36 - why do we need to collect user data in
23:38 - this manner if there's an alternate way
23:40 - to get the same data
23:41 - why do you want this button to go here
23:43 - instead of over there
23:45 - now why is an easy enough question to
23:48 - ask
23:49 - but the hard part is actually listening
23:51 - to the answer
23:54 - if you have a preconceived idea of what
23:55 - the other person is about to say
23:57 - you might not actually listen to the
23:59 - answer because you're busy thinking up a
24:01 - response of your own you'll talk right
24:03 - past each other
24:05 - active listening is making a conscious
24:07 - effort to give your full attention to
24:08 - the person speaking so that you hear and
24:11 - understand the complete message being
24:12 - conveyed
24:15 - listening is especially difficult if
24:17 - you're feeling angry or defensive so
24:19 - it's especially important to practice
24:20 - active listening when you're feeling
24:22 - negative emotions for example if you
24:24 - hear criticism in a code review
24:26 - one thing you could practice
24:28 - is active listening
24:30 - don't respond to the comment right away
24:33 - first stay silent
24:34 - suspend your judgment temporarily
24:37 - gather more information before
24:38 - responding by paraphrasing or asking for
24:40 - follow-up questions to demonstrate you
24:42 - fully understand the other person's
24:44 - argument
24:47 - there's a rule in communication theory
24:49 - called miller's law and it's this
24:51 - to understand what another person is
24:53 - saying you must assume that it is true
24:55 - and try to imagine what it could be true
24:57 - of
24:58 - let's say a developer comes up to tell
25:00 - you that a library that you wrote is
25:01 - broken
25:03 - now this might make you upset and maybe
25:05 - you could ask them why do you think my
25:06 - library sucks
25:08 - but that puts them on the defensive
25:10 - you're questioning their premise and
25:11 - implying the problem is with them
25:14 - alternatively you might stop and think
25:16 - okay
25:16 - assume my library is broken
25:19 - this person can't do their job
25:21 - what are our options
25:22 - you might ask some clarification
25:24 - questions
25:25 - what are you using this api for
25:27 - what is it lacking that you need
25:29 - could there be another way to get you
25:30 - what you need
25:32 - by withholding judgment you're showing
25:33 - that you're on their side and by asking
25:35 - clarification questions you're more
25:37 - likely to gain context for what they're
25:39 - actually trying to do
25:41 - this is a goal of active listening and
25:43 - it'll lead to you're having more empathy
25:44 - for the person you're talking to
25:48 - a friend of mine once asked me
25:50 - do you know what you call someone who's
25:51 - always complaining about existing code
25:53 - being terrible all the time and the
25:56 - answer was junior
25:58 - i think of this often i remember earlier
26:00 - in my career when i would see something
26:02 - that we might derisively call legacy
26:04 - code and i would judge whoever wrote it
26:07 - as maybe not being not that good at
26:09 - writing code i'd spend a lot of time
26:11 - trying to refactor it but what i didn't
26:13 - do so well was to invest time in
26:15 - understanding the code to see why it
26:16 - might have been written the way it was
26:20 - we could apply a version of miller's law
26:21 - to legacy code
26:23 - when i find code that works but is
26:25 - unreadable to me
26:26 - i first imagine that the developer who
26:28 - wrote it must have started out with good
26:30 - intentions and clear designs
26:32 - i try to see what sorts of constraints
26:33 - existed that maybe haven't been
26:35 - documented so i can't see them or what
26:37 - edge cases i haven't encountered that
26:39 - this code might be addressing
26:41 - in other words just because i couldn't
26:43 - easily understand the code doesn't mean
26:45 - that the code is bad or that the
26:46 - developer who wrote it was dumb
26:49 - now to be clear if the code is broken or
26:50 - buggy judge away
26:53 - but if the code's already in prod and it
26:55 - works giving it the benefit of the doubt
26:57 - will help you resist the urge to
26:59 - refactor which is good because refactors
27:02 - can become very difficult and costly i
27:04 - can tell you
27:06 - to sum it up the purpose of developing
27:08 - software
27:09 - is to create things that other people
27:11 - want to use
27:13 - the best software developers excel at
27:15 - this for several reasons
27:17 - they understand what their users want
27:19 - they write code efficiently and ship it
27:21 - on time
27:22 - and they make it easier for those with
27:23 - whom they work to do their own jobs well
27:25 - so that the whole team can deliver a
27:27 - quality product
27:29 - i hope i've convinced you that empathy
27:31 - is important for all of these and a
27:32 - worthwhile thing to practice
27:34 - and here in convenient list form are the
27:37 - five exercises to help us become better
27:39 - at empathy
27:40 - i hope this will help you to write
27:42 - better software work better in teams and
27:44 - give your career trajectory a boost
27:49 - i would love to hear what you have to
27:51 - say
27:52 - not in the q a but outside in the
27:53 - hallway or on twitter you're free to
27:55 - contact me by email as well
27:57 - my slides are posted on that link
27:59 - and i want to thank a bunch of people
28:01 - who helped me to write this talk in one
28:02 - way or another so here they are and of
28:04 - course i want to thank the whole python
28:05 - community and i want to thank you all
28:07 - for coming to my talk
28:09 - [Applause]
28:19 - [Music]
28:21 - okay