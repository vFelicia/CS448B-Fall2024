00:00 - in this comprehensive react course you
00:02 - will learn everything you need to know
00:03 - about react by building an e-commerce
00:05 - website harsha is an experienced
00:08 - developer and a popular instructor hello
00:11 - guys my name is harshavadhan
00:13 - i am famous udemy instructor mentor team
00:17 - leader
00:18 - and also worked as senior developer on
00:21 - various front-end and back-end
00:23 - technologies
00:25 - welcome to the course of react for
00:27 - beginners
00:28 - let us see what kind of project we are
00:30 - going to build in this course
00:33 - this application is a smaller demo
00:35 - application for practicing various
00:38 - concepts of react
00:40 - in this course we are going to build the
00:43 - react application using class components
00:47 - in react you can create components that
00:49 - means pages in two ways
00:52 - either with class components or
00:54 - functional components
00:56 - in this course we are going to use the
00:58 - class components
01:01 - but in my full udemy course we are going
01:04 - to build the application
01:05 - with functional components
01:08 - for react beginners it is really
01:11 - recommended to learn the react class
01:13 - components first before trying to
01:15 - understand the functional components
01:19 - because in class components you will
01:21 - really understand how does the rendering
01:23 - process works
01:25 - how can you share the data from one
01:27 - component to another component
01:29 - and how do you intermingle the design
01:31 - logic and programming logic
01:34 - once you are clear with the class
01:36 - components then you will try to
01:38 - understand the functional components
01:41 - so exactly in this course we are going
01:44 - to build this basic application on react
01:46 - using class components
01:49 - let us see what kind of pages we are
01:51 - going to build
01:53 - at first as you can see there is a login
01:55 - form
01:58 - once after you enter the email and
02:00 - password values
02:02 - if it is successful login
02:04 - you can see the simple dashboard design
02:08 - and this is the customers page
02:11 - where you will learn about various
02:13 - rendering techniques
02:14 - such as rendering the buttons
02:16 - rendering the images conditional
02:19 - formatting etc
02:21 - and also this is the shopping cart page
02:24 - where you can increase or decrease the
02:26 - quantity of the product
02:29 - and also buy now in order to proceed for
02:31 - the payment
02:34 - that's all these are the pages we are
02:36 - going to build
02:38 - so what are the prerequisites to learn
02:40 - this course
02:42 - you require to know the basics of html
02:45 - css
02:46 - and
02:47 - general concepts on bootstrap such as
02:50 - buttons navigation bar etc
02:53 - but in this basic application
02:56 - we are going to learn various concepts
02:58 - of react
03:00 - you will learn how do you render the
03:01 - lists
03:02 - how do you render the methods
03:04 - images and css styles how can you
03:07 - communicate between the parent to
03:09 - channel components
03:11 - and lifecycle methods such as component
03:14 - date mount etc
03:16 - and also how do you create the forms
03:19 - along with the text boxes etc
03:22 - and also two-way binding
03:24 - and then how do you interact with the
03:26 - rest api servers by making http requests
03:30 - and also basic routing
03:32 - in order to create the page navigation
03:36 - so by end of this course you will be
03:38 - able to know what are the various
03:40 - concepts in react and how do you build
03:43 - the basic applications in react
03:49 - so what is react
03:51 - react is the javascript library to build
03:54 - dynamic and interactive user interfaces
03:57 - that executes faster
04:00 - so like i said react is a javascript
04:03 - library
04:04 - it is not a framework
04:07 - so what makes a difference between the
04:08 - framework and library
04:11 - a framework provides the complete
04:13 - solution
04:14 - for creating the front-end applications
04:17 - but when you talk about react
04:20 - being it as a library
04:22 - it is the lightweight
04:24 - it provides the support for building
04:26 - only view that means only the user
04:29 - interfaces for your application
04:33 - but it is not necessarily a drawback
04:36 - it provides proper mechanism to build
04:39 - user interfaces
04:40 - and to make them interactive with the
04:43 - user
04:44 - that means you can accept inputs from
04:46 - the user
04:48 - and also provide dynamic information to
04:50 - the user
04:51 - that's how the real world applications
04:53 - work
04:55 - for example you take facebook
04:58 - it provides all the posts in the field
05:00 - page
05:01 - and also lets the user to create their
05:03 - own posts
05:05 - so this kind of user interactions can be
05:08 - created by using react
05:11 - react was developed by facebook in 2011
05:15 - and it is mainly used for development of
05:17 - single page applications
05:20 - so what is a single page application
05:24 - a single page application is an
05:26 - application
05:27 - that renders small pieces of user
05:29 - interface
05:30 - and make the complete application
05:34 - in react you can actually build reusable
05:37 - ui components
05:40 - each component is a representation of a
05:42 - meaningful page in your user interface
05:46 - for example in a modern application
05:49 - you have a navigation bar and the
05:51 - sidebar as well as the page content
05:54 - here each of these can be represented as
05:57 - a piece of ui
05:59 - and those are represented as components
06:01 - in the code
06:04 - and these components are by default
06:06 - reusable
06:08 - that means you can display the
06:09 - navigation bar wherever required in the
06:12 - application
06:14 - that means for example
06:16 - if you create a navbar as a ua component
06:20 - you can reuse the same navbar in
06:22 - multiple pages
06:23 - wherever required in your big
06:25 - application
06:27 - so by default ui components are reusable
06:30 - pieces
06:31 - which consists of the desired logic as
06:34 - well as the programming logic
06:37 - here the design logic is written in the
06:39 - form of html
06:40 - and the programming logic is written in
06:43 - the form of javascript
06:46 - and by default these components are
06:48 - arranged in hierarchy that is called
06:50 - virtual dom
06:52 - so a virtual dom is the hierarchy of the
06:55 - components
06:56 - which imitate the real dom of the
06:58 - browser
07:01 - when you update any changes in the
07:02 - virtual dom
07:04 - react internally compares the virtual
07:06 - dom and real dom
07:08 - and only the changes made in the virtual
07:10 - dom will be updated into the real down
07:13 - and the same appears on the browser
07:17 - we will understand more about components
07:19 - and virtual dom in the next lecture
07:24 - but how to create the components
07:27 - react supports a new syntax called jsx
07:30 - which stands for javascript
07:33 - with xml
07:35 - that means the developer can actually
07:37 - use
07:38 - all the concepts of javascript
07:41 - along with xml within the same program
07:46 - here the html tags are written in the
07:48 - form of xml
07:50 - that means here html is being case
07:52 - instead
07:54 - and every tag should have opening and
07:56 - closing
07:57 - or they must be self closed
08:01 - these are the features of react
08:04 - what makes it exciting about react is
08:06 - that
08:07 - react is the most popular frontend
08:09 - library or framework which is very
08:12 - competitive to the other frameworks such
08:15 - as angular or vue.js
08:19 - but often react is compared with angular
08:22 - so you might have a question such that
08:25 - what is the difference between angular
08:27 - and react
08:29 - well angular is the framework
08:31 - but react is the ui library
08:35 - so react being as a ui library
08:38 - it provides sophisticated solution to
08:41 - make the ui interactive and dynamic
08:46 - but angular provides much more beyond
08:48 - these
08:50 - in addition to ui
08:51 - angular provides necessary features to
08:54 - create routing and make rest api calls
08:57 - in angular applications
09:00 - so angular provides much more beyond
09:02 - react.js
09:04 - because react sticks to only view
09:08 - it is not necessarily a drawback
09:11 - but you can actually extend that means
09:13 - use third-party tools in react in order
09:16 - to use the features such as routing or
09:19 - making rest api calls
09:23 - angular forces us to build only single
09:25 - page applications
09:27 - suppose if you want multi-page
09:29 - applications in your project
09:32 - it is very difficult or sometimes
09:34 - becomes impossible in case of angular
09:38 - but react can be used for either single
09:40 - page or multi-page applications
09:44 - so before development of your
09:46 - application you need not worry whether
09:48 - it is a single page application or
09:50 - multi-page application
09:52 - eventually in the middle of the
09:54 - development also you can convert the
09:56 - single page application into multiplex
09:58 - application
10:00 - by creating multiple html files in react
10:04 - but the same can be most problematic in
10:07 - case of angular
10:10 - angular directly operates based on real
10:12 - browser dom
10:15 - that means when you update a value of a
10:17 - property in angular
10:20 - the same will be directly reflected in
10:22 - the real dom
10:23 - rather than first operating in the
10:25 - virtual dom
10:28 - but in case of react
10:30 - it directly works based on virtual dom
10:34 - and every time when you make any updates
10:36 - in the virtual dom
10:37 - for example if you modify any property
10:40 - value in virtual dom
10:42 - it actually compares the virtual dom and
10:45 - real browser dom
10:47 - and updates the real dom
10:48 - only for the specific change
10:51 - instead of overwriting the complete dom
10:55 - so this makes react applications work
10:57 - faster
11:00 - i will talk about components and virtual
11:02 - dom in the next lecture
11:05 - and another difference between angular
11:07 - and react is
11:09 - angular by default supports two-way
11:11 - binding
11:12 - that means it can actually read inputs
11:15 - from the user
11:16 - and also provides state data to the user
11:20 - but when it comes to react it by default
11:23 - supports only one way binding
11:27 - it officially doesn't support two-way
11:29 - binding
11:31 - it actually can render state to the user
11:35 - but cannot read the inputs from the user
11:39 - but however developer can manually read
11:42 - the values of the text boxes and update
11:44 - the same in the state
11:46 - in that way it can become two-way
11:48 - binding
11:51 - anyways we will demonstrate the binding
11:53 - in the further sections
11:55 - so these are all the differences between
11:57 - angular and react
12:01 - this is a good time to learn react
12:04 - and necessarily you need not know
12:06 - angular because we will actually
12:08 - demonstrate all the concepts of react
12:12 - so you don't require any prior knowledge
12:14 - of angular to understand react
12:17 - in case if you are not much familiar
12:19 - about ecmascript 6
12:22 - don't worry
12:23 - as part of the progress we will
12:25 - understand various concepts of
12:27 - ecmascript
12:28 - whenever we actually use them in the
12:30 - code
12:32 - so let's get started with react
12:35 - and in the next lecture we will
12:36 - understand what is a component actually
12:40 - and how the component hierarchy is
12:41 - formed internally
12:44 - and after that we will really start
12:46 - creating the react application
12:49 - to make our hands dirty
12:56 - let us learn what is a component and how
12:59 - they work based on virtual dom
13:03 - in react a component is a piece of ui
13:07 - that contains the design logic and
13:10 - programming logic
13:13 - the goal of the component is
13:15 - to read data from a javascript object
13:18 - and render the same to the user
13:22 - so it contains the design logic in the
13:24 - form of html
13:27 - it may include with any html tags
13:30 - such as div or h1 or table etc
13:36 - and it may include with javascript code
13:38 - to make the ui be interactive with the
13:40 - user
13:44 - by default every application should
13:46 - contain a root level component that is
13:48 - called app component
13:51 - eventually this app component may have
13:53 - children
13:56 - for example in the real world
13:57 - application
13:59 - we have various sections such as navbar
14:02 - side menu and page content
14:05 - and those are represented as chain
14:06 - components
14:09 - and by default these components are
14:11 - reusable
14:13 - that means you can really use the same
14:15 - navbar
14:16 - in a different page or in a different
14:18 - application wherever required
14:22 - because it is individual sophisticated
14:26 - and isolated component
14:29 - it is self-sufficient enough
14:31 - to have the data in the form of state
14:34 - and project or render the information to
14:36 - the user
14:39 - and each component can have children
14:42 - for example the side menu has menu item
14:45 - and page content may have grid
14:48 - or signup page
14:51 - and of course these components also be
14:53 - reusable
14:56 - so as you keep on nesting the components
14:58 - the component hierarchy will be formed
15:01 - where the app is the ultimate root or
15:04 - parent level component
15:08 - you can invoke the child component in
15:10 - the parent component by invoking its
15:13 - name
15:16 - and this hierarchy structure of
15:17 - components is called as component
15:20 - hierarchy
15:22 - and in this component hierarchy
15:25 - the data can be shared among the
15:27 - components
15:28 - but only from parent to child
15:32 - but not from child to parent
15:36 - how will you create a component
15:39 - by definition component is a class
15:42 - and it contains substrate
15:45 - that is the data that you want to render
15:47 - to the user
15:49 - so what data that you want to render to
15:51 - the user
15:52 - all that data will be stored in the form
15:55 - of a javascript object
15:57 - and that object is called as a state
16:02 - for example in a food ordering
16:04 - application
16:05 - you wish to display the food item name
16:07 - and price
16:09 - so you will have that item name and
16:11 - price in the form of an object
16:13 - and that is called as a state
16:17 - next it contains a method called render
16:19 - method
16:21 - this method tells react
16:23 - how the state should be rendered to the
16:25 - user
16:28 - the render method actually returns a
16:30 - react element
16:32 - it contains the actual html tags
16:36 - defining how the data should be rendered
16:38 - to the user
16:41 - a react element is a simple javascript
16:43 - object
16:44 - that represents a piece of ui
16:48 - much like a dom element in javascript
16:52 - but the difference is
16:54 - react element is called as virtual dom
16:58 - and actual dom element is the real dom
17:02 - a virtual dom or react element is the
17:05 - dummy representation of real browser dom
17:09 - but making the changes to virtual dom is
17:12 - super easy and lightweight
17:15 - when you compare to real dom virtual dom
17:18 - occupies very less amount of memory
17:21 - and updates are faster in virtual dom
17:26 - when you make any real changes in the
17:28 - state of the component
17:30 - react automatically compares the virtual
17:33 - dom and real dom
17:35 - and updates only the specific changes in
17:37 - the real dom
17:39 - instead of re-rendering the complete
17:40 - real dom
17:43 - for example in a component we have four
17:46 - text boxes
17:48 - and we have updated the state of the
17:51 - first text box only
17:54 - if so
17:55 - react updates only the specific text box
17:58 - value in the real dom instead of
18:00 - re-rendering all the four text box
18:02 - values
18:04 - this makes react work faster than
18:06 - expected
18:09 - so what you can understand from this
18:11 - lecture is
18:13 - a virtual dom is a simple javascript
18:15 - object
18:16 - that reflects the real dom
18:19 - and every time when you update the
18:21 - virtual dom
18:22 - the changes will be automatically
18:24 - affected in the real dom by react
18:26 - internally but it never overrates the
18:29 - complete dom
18:31 - at any point of time
18:35 - so making updates in the state is super
18:37 - easy and simple as well as lightweight
18:40 - in case of react
18:43 - this is how the react actually works
18:47 - but this is all theoretical
18:49 - but how will you really get started with
18:51 - react
18:52 - by creating a new
18:54 - application that's what we will do in
18:57 - the next lecture
18:58 - we are going to build a simple web
19:00 - application in react
19:02 - in the next lecture
19:10 - let's get your hands dirty by creating
19:12 - first application in react
19:16 - at first we need to set up the
19:18 - environment which are necessary for
19:20 - creating react application
19:24 - first you need to install node.js
19:27 - so you may wonder
19:29 - why we require node.js
19:31 - this is not the actual node.js course
19:34 - this is the react course
19:37 - the reason why we installed node.js is
19:39 - that
19:41 - for working with the package manager
19:43 - called npm
19:44 - that is node.js package manager
19:48 - it has plenty of packages
19:50 - and you require a package called create
19:53 - react app
19:54 - which is shipped through npm
19:58 - not only that we need additional
20:00 - packages such as babel
20:02 - and webpack
20:04 - that are shipped through npm
20:07 - and this npm is a part of node.js
20:11 - so that is the reason
20:13 - why we require node.js for working with
20:15 - react
20:18 - in addition to this for execution of
20:20 - react application also
20:23 - you require a lightweight development
20:25 - server
20:26 - and internally that server is built
20:28 - based on node.js
20:31 - so that is the reason you need node.js
20:34 - for working with react
20:37 - so you can actually download and install
20:39 - either current or lts version
20:42 - but i prefer using lts
20:46 - because the current liabilities of react
20:49 - were already be updated with the lts
20:51 - version
20:52 - rather than the current or latest
20:54 - version of node.js
20:57 - so prefer using lts
21:00 - and you will get a file like this
21:03 - and run the file
21:06 - and it's a simple wizard to install
21:08 - node.js
21:13 - and you can complete this simple wizard
21:15 - by clicking on next next and finish
21:20 - and after completion of installation of
21:22 - node.js
21:24 - you require to install the code editor
21:26 - that is visual studio code
21:29 - it is open source lightweight and free
21:31 - to use
21:33 - so go to code.visualstudio.com
21:37 - and click on download for windows
21:41 - and run this setup file it installs
21:44 - visual study code for you
21:49 - so after installing visual studio code
21:54 - open the command prompt window
21:56 - by typing cmd
21:59 - alternatively you can also use node.js
22:02 - command prompt
22:03 - from the start menu
22:07 - after installing visual studio code
22:10 - this is the time for installing a
22:12 - package called create react app
22:15 - which helps us to create the react
22:16 - applications easily
22:19 - in order to do so
22:22 - open the command prompt or terminal on
22:24 - your mission
22:27 - and use the command npm install
22:30 - create react app hyphen g
22:35 - that means hey npm that is not just
22:38 - package manager install a package called
22:41 - create react app
22:44 - and install it globally
22:46 - that means this package must be
22:48 - available globally on any folder in the
22:51 - same machine
22:53 - so that you will be able to create and
22:55 - run the react applications
22:57 - from any folder on your mission
23:01 - so run the command npm install create
23:04 - react app hyphen g
23:08 - it downloads the package and installs
23:10 - the same on your local mission
23:14 - and after installing this package
23:16 - this is the time for creating a new
23:18 - react application
23:20 - but before than that let us create a new
23:23 - folder to place our react applications
23:27 - i am trying to create a new folder by
23:29 - using md command
23:32 - that means make directory
23:35 - and specify the path of the new folder
23:38 - that is for example sequel and react
23:42 - with this name a new folder will be
23:44 - created
23:47 - and you need to locate the same folder
23:48 - by using cd
23:51 - followed by the folder name that is
23:53 - sequel and react
23:55 - so make sure you're in the correct
23:57 - folder that is c colon react in this
23:59 - case
24:01 - and now
24:02 - you need to use the command called
24:04 - create react app
24:06 - in order to make a react application
24:10 - so create react app
24:13 - space application name
24:15 - the application name can be anything
24:18 - but should not contain capital letters
24:22 - for example i am giving the name my
24:24 - first app
24:27 - you can use hyphens for separation of
24:29 - words
24:31 - but uppercase letters are not
24:33 - recommended
24:35 - so run the command create react app
24:39 - space and provide your application name
24:44 - so this command creates the react
24:46 - application
24:47 - and automatically set up the necessary
24:49 - development server
24:51 - pebble and webpack
24:55 - the development server helps us to
24:57 - execute
24:59 - react applications after compilation
25:03 - and a webpack package helps us to bundle
25:05 - the files
25:08 - and the bubble package helps us to
25:10 - compile the javascript files
25:12 - from jsx files into regular plain
25:15 - javascript files
25:17 - so those compiled javascript files can
25:20 - be really executed on the browser
25:24 - and after creating the react application
25:27 - you can use either of these commands
25:30 - like npm start npm run npm test etc
25:35 - but for timing you require one command
25:38 - called npm start in order to compile and
25:41 - execute the react application
25:44 - so first switch to the application
25:46 - folder
25:47 - that is cd
25:49 - sql react
25:52 - my first application
25:55 - so make sure you're in the correct
25:56 - folder that is my first application
26:00 - and run the command npm start
26:04 - this will automatically compile and
26:06 - execute the react application
26:09 - in the default browser
26:13 - in case if you want to change the
26:15 - default browser
26:16 - you can use the windows settings
26:19 - and go to apps
26:23 - this is the cool default output from
26:25 - react application
26:27 - but how does it work
26:30 - let's edit the source code by using
26:32 - visual study code now
26:35 - in order to get started with go to start
26:38 - and locate visual studio code
26:42 - and go to file menu open folder
26:46 - and select the appropriate folder that
26:48 - is current
26:50 - react my first application folder
26:56 - and click on select folder
27:00 - and in this folder you can see something
27:02 - called public and
27:04 - src the public folder you can see
27:07 - index.html
27:09 - this will be the starting point of your
27:12 - react application
27:14 - so it contains the typical html syntax
27:20 - and it imports the icon and contains the
27:23 - basic metro tag
27:29 - and of course these meta tags are
27:31 - optional
27:34 - and if you scroll down
27:38 - you can see something called no script
27:40 - this message will be appear when
27:42 - javascript is not enabled on the browser
27:47 - because to execute react application
27:49 - it is necessary that user must enable
27:52 - javascript
27:53 - but of course javascript is enabled by
27:56 - default in all the user missions
27:59 - in all the modern browsers
28:02 - and we have a tag called div tag
28:05 - with id called root
28:09 - this due tag is the placeholder
28:11 - where the actual react output will be
28:13 - rendered at runtime
28:17 - and after that there is nothing much
28:19 - just closing of body and html
28:24 - and now coming to the src folder you
28:27 - have something called
28:28 - index.js
28:30 - which has a statement called react dom
28:32 - dot render
28:35 - and which eventually invokes app
28:39 - that means it renders the app component
28:42 - in the root element which is already
28:44 - present in the index.html file
28:49 - so where is the definition of the app
28:51 - component
28:54 - go to app.js file in the cersei folder
28:59 - there you can see something called app
29:02 - and it has a new tag that renders all
29:05 - the relevant output
29:07 - that we have seen in the browser
29:11 - for example this rotating icon is the
29:14 - img tag which is written here
29:18 - and after that you can see some
29:20 - hyperlink for example land react
29:23 - which appears here
29:26 - and you can make any changes in app.js
29:30 - but in the next lecture we will try to
29:32 - learn
29:33 - how to build react application from the
29:35 - scratch
29:37 - then you will understand how these files
29:39 - are working internally
29:46 - now let's try to make some changes in
29:48 - the app.js file to bring some output in
29:51 - the browser
29:54 - in order to do so let me arrange the
29:56 - browser and vs code side by side
30:00 - so this is the code of the app.js file
30:03 - that comes up automatically
30:06 - at the time of creating the application
30:09 - so it has a function called app
30:12 - in which we are trying to written
30:14 - a div tag which contains some content
30:18 - so let me remove this particular div tag
30:22 - and
30:23 - save the changes
30:25 - and return something here for example
30:29 - a deal with hello
30:32 - the moment once you make the changes and
30:35 - save the file automatically the page
30:38 - refresh in the browser
30:40 - so as you can see it shows hello
30:42 - as the default output
30:46 - you can use the control plus button in
30:48 - order to increase the zoom
30:50 - as of now the zoom is 140
30:53 - we can use control plus
30:55 - to increase the zoom
30:56 - and we can use ctrl minus to decrease
30:59 - the zoom
31:02 - so whatever the html tag that you
31:04 - written in this particular function
31:07 - will be printed as it is in the browser
31:12 - this is the default code setup
31:15 - i recommend some preferences go to file
31:18 - menu preferences
31:21 - settings
31:24 - and go to text editor
31:27 - and then formatting
31:29 - and check the checkbox format on save
31:32 - so because of this checkbox
31:35 - as soon as you save the file
31:36 - automatically the code will be formatted
31:40 - that means the code will be properly
31:42 - maintained with proper indentation
31:46 - and optionally i recommend an extension
31:49 - called prettier
31:51 - so go to extensions that means the fifth
31:53 - icon on the top left corner
31:56 - then search for prettier
32:01 - and install this code formatter called
32:03 - prettier
32:06 - and then after that
32:09 - come back to the app.js file
32:14 - press alt shift tf in order to format
32:16 - the file
32:18 - or press ctrl s to save the file
32:23 - in this case as soon as you save the
32:25 - file automatically the file will be
32:27 - formatted
32:28 - for example if you give unnecessary
32:30 - spaces here
32:32 - and
32:33 - not maintain proper indentation like
32:35 - this
32:37 - and upon saving the changes
32:40 - the code will be automatically formatted
32:43 - and also you make sure you add default
32:46 - formatter in the preferences
32:49 - to do so go to file menu preferences
32:53 - and then again settings
32:58 - go to open settings json
33:03 - and then at last
33:06 - make sure you set up the printer as the
33:08 - default formatter for both javascript
33:12 - and also for jsx files
33:16 - okay let's close these preferences
33:20 - now let's try to build the same
33:22 - application from the scratch
33:24 - without using the predefined files
33:28 - so let me select all the files of the
33:30 - src folder
33:32 - and delete them
33:38 - now the src folder is empty
33:41 - but all the files of the public folder
33:43 - exist as it is
33:45 - and mainly
33:47 - we have the index.html file
33:50 - and the react compiler expects a file
33:52 - called index.js in the src folder
33:56 - so let's create the index.js file in the
33:59 - src folder
34:01 - so right click on src folder new file
34:05 - file name is index.js
34:10 - so this is the index.js file in the src
34:13 - folder
34:15 - in this
34:16 - we are trying to create an element and i
34:19 - wish to render the same into the react
34:21 - dom
34:23 - in order to create an element we are
34:25 - writing where
34:27 - element is equal to
34:29 - some html tag for example
34:33 - new
34:34 - hello world
34:37 - so
34:38 - as we have set the default formatter in
34:40 - vs code
34:41 - as soon as you make the changes
34:45 - automatically the file will be formatted
34:48 - so you need not format the code manually
34:50 - every time
34:54 - now you can see an error called react
34:56 - must be in scope when using jsx
35:00 - which means that
35:02 - this particular tag will be converted
35:04 - into react.createelement
35:08 - by using a javascript compiler called
35:10 - babel
35:12 - so babel is a javascript compiler
35:15 - that converts the jsx syntax into
35:18 - regular javascript
35:22 - to demonstrate babel
35:24 - go to beveljs.io
35:27 - and click on try it out
35:30 - so once you click on try it out
35:33 - we are just writing some html tag for
35:35 - example
35:36 - p hi
35:38 - the same will be automatically converted
35:40 - as a reactor.create
35:42 - element and the name of the tag here is
35:46 - p
35:47 - and the argument for the attributes is
35:49 - null that means it has no arguments
35:53 - and the content of the element is high
35:57 - like this
35:58 - whenever you write html code as xml
36:01 - syntax
36:03 - automatically bevel will convert the
36:05 - same into react.createelement
36:09 - this is also called as react element
36:12 - this particular react element will be a
36:14 - part of the virtual dom of the react
36:19 - in the previous lecture we have
36:20 - understood the virtual dom
36:22 - it is the hierarchical structure of the
36:24 - elements that you render on the page
36:30 - you can notice that in the actual code
36:32 - that you write on the left hand side
36:35 - we don't have anything related to react
36:37 - but once the bevel compiles the same
36:40 - into javascript
36:42 - it has something called as react dot
36:44 - create element
36:48 - it means that
36:49 - this object called react must be
36:51 - declared or must be imported
36:55 - in this case we should import this
36:57 - object
36:58 - from a predefined module called react
37:03 - and that is the reason even though we
37:04 - are not using react directly
37:07 - we must import react from react module
37:11 - so just above the actual statement
37:14 - you try writing import react
37:17 - from react module
37:20 - so we are importing an object called
37:22 - react
37:24 - from a predefined module called react
37:28 - that means it is importing the object
37:30 - from the module that is present inside
37:33 - the node underscore modules folder
37:37 - ok we need not worry about the node
37:39 - underscore modules
37:41 - these are already installed by npm
37:45 - now save the file
37:49 - now that errors were clear in the
37:51 - browser console
37:53 - now this is the time for rendering the
37:55 - same into the react dom
37:59 - in order to render the react element
38:01 - into the react dom
38:02 - we required something called as import
38:05 - react dom
38:09 - from the module called the react hyphen
38:10 - dom
38:13 - always the right hand side one is the
38:15 - module name
38:17 - and the left hand side one is the
38:18 - default import of the particular module
38:22 - so we are importing an object called
38:24 - react dom
38:26 - from the module called react hyphen dom
38:30 - and make sure you write the correct
38:32 - casing that is r must be upper case
38:36 - and d o m dom should be the upper case
38:38 - again
38:41 - so
38:42 - based on the same react dom object
38:45 - we are trying to render the element
38:48 - by using a predefined method called
38:50 - render
38:52 - so for this render method you need to
38:54 - pass the element that you want to render
38:56 - that is the variable name element here
39:00 - that means it represents the value well
39:05 - and after that you need to specify the
39:07 - position or placeholder where this
39:10 - particular element must be rendered
39:14 - so come back to the explorer window
39:16 - go to the index.html file
39:20 - in this index.html file
39:23 - we have a new tag in the body tag
39:26 - with id equal to root
39:29 - this is the placeholder where you can
39:31 - render the element
39:34 - remember it has an id called root
39:37 - and based on this id we need to select
39:40 - the element in the actual js file
39:43 - in order to select the element
39:45 - based on the id
39:47 - we have a predefined method called get
39:50 - element by id
39:51 - in the plain javascript itself
39:55 - alternatively you can also try using
39:57 - document.queryselector
40:00 - but in that case we have to write hash
40:03 - before writing the id
40:07 - so
40:08 - document.getelement
40:10 - of roach
40:11 - will select the element that is present
40:14 - inside the index.html file
40:17 - and inside this particular div
40:20 - we are rendering a due tag called
40:22 - developer
40:25 - and let me save it
40:27 - automatically the page refreshes
40:30 - you can see the output as hello world
40:33 - that means
40:34 - this particular element called hello
40:37 - world will be rendered inside the root
40:39 - element that is present inside the
40:42 - index.html file
40:47 - if you can notice
40:49 - if you want to exactly investigate where
40:51 - it is rendered exactly
40:54 - you can use the browser developer tools
40:57 - to do so right click on hello world
41:00 - inspect element or inspect in chrome
41:06 - it opens the developer tools
41:11 - there you can see the new id equal to
41:13 - root which was already present in the
41:15 - index.html file
41:18 - but dynamically the react element was
41:21 - rendered inside the root element
41:27 - so as a result of this particular div
41:29 - tag only you are seeing the output
41:31 - called hello world here
41:36 - and now
41:37 - let's render the element in the
41:38 - console.log
41:42 - in javascript the output statement is
41:44 - console.log
41:46 - so it shows the value of this particular
41:48 - variable
41:49 - inside the browser console here
41:53 - so have a look at the console
41:57 - so that particular div tag is
41:58 - represented as a react element
42:02 - and if you can expand the same
42:05 - so this is your actual react element
42:09 - and
42:10 - it has a property called a type
42:13 - and its value is due
42:15 - that means this particular div tag is
42:17 - represented as a react element
42:23 - that is why the type equal to do
42:28 - and also it has other properties such as
42:30 - props
42:33 - and children equal to hello world as the
42:35 - text
42:38 - so this particular text is being
42:40 - displayed
42:41 - inside the actual element
42:46 - and this react element is the part of
42:48 - virtual dom which i have explained in
42:50 - the previous lecture
42:53 - so overall a big application is the
42:55 - composition of various components and
42:58 - each component is represented as a react
43:01 - element
43:02 - which will be rendered on the dom
43:06 - whenever the state of the react dom has
43:08 - been changed
43:09 - automatically a new react element will
43:11 - be created in memory
43:15 - and then react automatically compares
43:17 - the new object and old object of react
43:20 - elements
43:22 - it identifies the changes between the
43:24 - new react element and older react
43:26 - element
43:28 - and then go to the actual browser dom
43:31 - and update the actual browser dom
43:34 - with only the specific changes that you
43:36 - really make
43:38 - for example if you update the inner html
43:41 - of the particular h1 tag
43:43 - only that specific h1 tag will be
43:45 - updated
43:47 - rather than re-entering the complete
43:48 - page
43:50 - this makes react execute faster
43:55 - but this example is pretty simple
43:59 - but in the real world applications we
44:01 - will not write actual content just like
44:03 - this element
44:06 - we will need to create the components as
44:08 - the classes inside the jsx files
44:14 - we will learn to create the components
44:15 - in jsx files in the next lecture
44:24 - before creating our own components
44:26 - let us add bootstrap in this application
44:30 - so that you can make the ui look better
44:34 - bootstrap is one of the css libraries
44:37 - that provides plenty of predefined css
44:40 - classes
44:41 - to make the ui look professional with
44:43 - minimal less amount of code
44:47 - in case if you are not aware of
44:48 - bootstrap please check out my other
44:50 - quotes of bootstrap
44:52 - which covers all essential concepts of
44:54 - bootstrap from the scratch
44:57 - in this course we are straight away
44:59 - using boards tab from the beginning
45:02 - so that you can see the designs of real
45:04 - web pages from the beginning itself
45:08 - so as of now let me remove this
45:10 - console.log
45:12 - and i am writing the code in the
45:14 - index.js
45:16 - file so here
45:19 - we have to install essential packages
45:21 - that are required for bootstrap
45:24 - actually bootstrap works based on jquery
45:27 - and popper.js
45:30 - so you need to install three packages
45:32 - from npm
45:34 - that is jquery popper.js and bootstrap
45:39 - to do so go to your command line window
45:43 - and make sure you are locating the
45:44 - correct application folder that is c
45:47 - current react my first app
45:51 - and run the command called npm install
45:55 - jquery
45:57 - because jquery is the prerequisite for
45:59 - bootstrap
46:01 - in other words
46:02 - bootstrap works based on jquery
46:04 - internally
46:07 - and also add iphone iphone save
46:11 - that means that
46:13 - we are trying to save this package name
46:14 - called jquery in the package.json file
46:17 - of our application
46:20 - which tells that our application depends
46:22 - on jquery package
46:26 - so the command will be npm space install
46:28 - space
46:29 - jquery space
46:31 - hyphen iphone sale
46:35 - let me run this
46:38 - after installing the package
46:41 - you proceed to the next package that is
46:43 - npm install
46:46 - popper.js space iphone iphone sale
46:51 - actually this popper.js package is
46:54 - optional but sometimes you will be using
46:57 - accordions or drop down menus
47:00 - there exactly you require proper.js file
47:03 - internally
47:05 - because the code of the bootstrap
47:06 - internally works based on proper.js
47:09 - package
47:11 - so that is why
47:12 - it is recommended to import popper.js
47:15 - from the beginning itself
47:18 - now we are installing the actual package
47:20 - called bootstrap
47:23 - so the command will be npm install
47:26 - bootstrap
47:28 - hyphen iphone save
47:31 - once you run this command
47:34 - the bootstrap package gets installed on
47:36 - your application
47:38 - all these packages jquery popper.js and
47:42 - bootstrap packages will be installed
47:44 - inside the node underscore modules
47:46 - folder
47:48 - so as you can see if we scroll down the
47:50 - node underscore modules folder
47:55 - you can see the package called bootstrap
47:58 - and also other packages such as jquery
48:01 - and popper.js
48:04 - now you need to install essential css
48:07 - files and js files into the index.js
48:10 - file of your application
48:14 - so at the top of index.js file
48:17 - add this code that is
48:19 - import
48:21 - jquery
48:23 - so we are importing jquery.js file from
48:26 - the jquery package which we have
48:28 - installed before a moment
48:32 - and after that
48:34 - you need to import something called
48:37 - bootstrap file from bootstrap package
48:41 - so in the bootstrap folder
48:44 - there is something called list
48:46 - means distributable
48:49 - and inside which we have js folder
48:53 - in which we have the file called
48:55 - bootstrap.js file
48:57 - so we are importing that particular
49:00 - bootstrap.js file into our application
49:03 - now
49:06 - so as of this case we have imported the
49:09 - jquery and the bootstrap.js file
49:14 - and just before importing bootstrap
49:17 - let us import popper.js file also
49:21 - so import
49:23 - popper.js slash dist slash
49:27 - umd slash
49:29 - popper
49:32 - and in the command prompt window make
49:34 - sure you are giving npm start command in
49:37 - order to execute your application
49:41 - so now our application executes
49:44 - including the liabilities of jquery
49:46 - popper and bootstrap js files
49:50 - but visually there will be no much
49:52 - difference
49:53 - because we have to import one more file
49:55 - called
49:56 - bootstrap.css file
49:58 - from the bootstrap package
50:02 - so import
50:04 - bootstrap slash this slash
50:07 - css
50:08 - bootstrap.css
50:12 - this case we are importing bootstrap.css
50:14 - file into our application
50:17 - so that
50:18 - we are able to experience
50:20 - some visual changes that means the font
50:22 - has been changed
50:25 - and also the margin and body of the body
50:28 - tag has been removed by bootstrap css
50:30 - file
50:32 - so these are the four lines that you
50:34 - have to keep inside your index.js file
50:37 - in order to import bootstrap and to make
50:40 - it fully work
50:43 - in order to actually test whether the
50:45 - bootstrap is working properly
50:48 - instead of writing a simple div tag
50:51 - let me write something called as button
50:53 - tag
50:56 - with a class called
50:58 - btn
51:00 - and space
51:02 - beaten hyphen danger
51:06 - here the btn and btn danger or the
51:09 - predefined css classes
51:11 - comes from the bootstrap.css file
51:15 - so as you can see bootstrap works
51:17 - correctly that means
51:19 - gives a red color when you mention the
51:21 - class name btn danger
51:24 - so from now onwards you are eligible to
51:27 - use any bootstrap component in your page
51:31 - for more information about bootstrap
51:33 - components you can visit
51:35 - getboardstep.com site
51:37 - and then go to documentation
51:40 - and there go to components and layout
51:44 - you can see plenty of components of
51:46 - bootstrap
51:48 - such as forms buttons
51:50 - cards etc
51:54 - in case if you wish to build a real
51:56 - application based on bootstrap
51:58 - you can check out my other codes called
52:00 - bootstrap in two hours
52:04 - let's come back to the react app
52:07 - and in the next lecture we are going to
52:09 - create actual component by using jsx
52:12 - file
52:19 - now let us actually learn to create
52:21 - components by using jsx files
52:25 - the benefit of jsx file is that
52:28 - we can use the javascript along with xml
52:33 - here html tags are written as xml tags
52:38 - that means they work based on xml rules
52:40 - such as
52:42 - all the tags are case in store
52:44 - and each tag must be closed
52:46 - or they must be self closed
52:50 - this is an example of jsx expression
52:54 - so here in case if you write a different
52:57 - case for example t capital
53:00 - this is not allowed because of jsx
53:05 - and also in case if you forget to close
53:07 - a particular tag
53:09 - it will be an error as per jsx
53:14 - these rules are imposed by xml language
53:17 - so that is why we call them as jsx
53:21 - so let me create another file in the src
53:24 - folder
53:26 - so right click on src folder
53:28 - and set new file
53:30 - specify the file name as app.jsx
53:36 - and press enter key
53:39 - now i am writing the code inside the
53:41 - app.jsx file
53:44 - here it is recommended to create every
53:46 - component as a class
53:50 - for example i am trying to create a
53:52 - class called navbar
53:55 - here the navbar is a class in javascript
54:00 - and i need to export the same
54:03 - so that this particular class can be
54:05 - accessible from other classes
54:09 - so how will you access this particular
54:11 - class from other files
54:14 - now come back to index.js file
54:18 - here
54:19 - i am trying to add import
54:22 - a class called navbar
54:25 - from the file called
54:27 - app.jsx
54:30 - so this is how you can export the
54:32 - component class from the jsx file
54:35 - and access the same in other file that
54:38 - is index.js file
54:41 - make sure you're adding dot slash
54:44 - to represent current working folder that
54:46 - is src folder
54:49 - that is the folder where our index.js
54:51 - file is present
54:54 - so dot slash refers to current working
54:56 - folder by default
54:59 - but still the output is not changed
55:02 - because
55:03 - we are actually rendering the button
55:04 - element still
55:07 - so how do you render this particular
55:09 - content
55:10 - from the jsx file
55:13 - in order to convert this particular
55:15 - class as a component
55:17 - let me extend a predefined class called
55:22 - component
55:24 - here the extends keyword refers to
55:26 - inheritance in javascript
55:29 - which tells that this particular child
55:31 - class
55:32 - extends the super class called component
55:35 - which is also called as parent class
55:40 - you can really import this particular
55:42 - component class from
55:46 - the react module
55:50 - and sometimes you will be writing the
55:52 - braces
55:53 - while importing
55:54 - sometimes you should not
55:57 - so what makes the difference between
55:59 - with braces and without braces
56:02 - for example
56:04 - if you wish to import react
56:06 - we have to try writing react
56:09 - without curly braces
56:13 - in case if that particular object was
56:15 - exported with default keyword
56:18 - as export default
56:21 - in that case you should not use braces
56:23 - while importing the same in other file
56:27 - so since in the react module they have
56:29 - already exported this particular react
56:32 - object with export default
56:34 - you should not write braces while
56:36 - importing the same
56:39 - because from one module only one object
56:42 - can be exported with default
56:45 - and other objects can be exported with
56:48 - name
56:51 - so since this component class was
56:53 - exported without export default it is
56:56 - exported by its name
56:58 - you should write braces while importing
57:00 - the same here
57:03 - so what i am trying to say is that
57:06 - the react was exported with export
57:09 - default
57:10 - and the component was exported
57:12 - with just export keyword
57:14 - instead of export default
57:18 - from one module only one export default
57:22 - is allowed
57:23 - for remaining objects or classes we
57:26 - cannot use export default
57:28 - so that is why we have to import the
57:30 - same with braces
57:32 - which are not export default
57:35 - and this extends keyword says that the
57:38 - component class is the parent class
57:41 - and now bar is the child class for the
57:43 - same
57:46 - here since the navbar class is the user
57:48 - defined class you can give any name
57:51 - instead
57:52 - for example you might be creating
57:54 - sidebar or page content or grid or
57:58 - whatever you wish you can give
58:01 - and inside this particular class
58:04 - we are writing a method called render
58:06 - method
58:08 - and whenever this component is rendered
58:11 - automatically react calls this render
58:13 - method
58:15 - that is why it's a fixed name
58:19 - and in this render you can return
58:21 - anything
58:23 - but we are trying to return
58:25 - h1
58:27 - with hello
58:29 - but still we cannot see that heading in
58:32 - the output
58:34 - it's because we have created the
58:36 - component but we have not rendered the
58:38 - same
58:40 - so how will you render this particular
58:42 - component
58:44 - now come back to index.js file
58:48 - instead of rendering the button you need
58:50 - to render the nav bar component which
58:53 - was created before a movement
58:56 - so let me delete this particular element
59:00 - and instead i am trying to invoke the
59:02 - component called navbar component
59:07 - and as per the syntax of jsx every tag
59:10 - must be self-closing or
59:12 - should be closed explicitly
59:15 - so you have two choices either you can
59:18 - write the closing tag separately
59:21 - or you can make it self-closing here
59:25 - generally self-closing tags are used for
59:27 - components
59:30 - now instead of seeing the button you can
59:33 - see the output from the nav bar
59:35 - that means by using the method called
59:38 - render method in the react dom
59:40 - we are rendering the output of the nav
59:42 - bar component
59:44 - and how does that react executes navbar
59:48 - component
59:50 - and it automatically calls the render
59:52 - method for the same
59:54 - and whichever html tag that you have
59:57 - written here
59:58 - that will be rendered within this
60:00 - specified element
60:03 - that means
60:04 - it will find the element called new id
60:06 - called root which is already present in
60:09 - the index.html file
60:12 - so in between the opening and closing of
60:15 - this particular div tag the actual h1
60:17 - will be rendered
60:21 - and in this case
60:23 - the object of the navbar class which is
60:25 - automatically created is called as react
60:28 - element
60:29 - which is the part of virtual dom
60:32 - as of now the virtual dom contains only
60:35 - one object
60:36 - at the root level
60:39 - as long as you nest multiple components
60:42 - the hierarchy will be extended with
60:44 - parent and corresponding children
60:47 - for example if you can render another
60:49 - component inside this particular navbar
60:52 - component
60:53 - that will be the child of this
60:55 - particular navbar component
60:59 - and you can render multiple child
61:00 - components right
61:02 - so in that case the nav bar will be the
61:05 - topmost root level
61:07 - inside which we have multiple chain
61:09 - components
61:10 - it forms a hierarchy
61:12 - so that hierarchy is called as virtual
61:14 - dom
61:17 - you can investigate the actual output of
61:19 - the browser
61:21 - so right click on hello world
61:23 - inspect element
61:26 - and i'm using firefox browser you can
61:29 - try using firefox or chrome or ms edge
61:33 - at your practice time
61:36 - so right click on hello and say inspect
61:38 - element or just inspect
61:41 - otherwise go to menu web developer
61:46 - and click on the option called toggle
61:48 - tools
61:50 - and in this case you can see the output
61:53 - called hello inside the root element
61:57 - this particular root tag was already
61:59 - created in the index.html file but we
62:03 - have rendered hello from the navbar
62:05 - component
62:09 - but here the noticeable point is that
62:12 - you can actually return only one element
62:15 - from this return statement
62:18 - if you try to return multiple html tags
62:20 - for example i am trying to written a
62:22 - paragraph
62:24 - it is not allowed by default by jsx
62:29 - it's because internally this particular
62:31 - jsx syntax will be converted into
62:34 - regular javascript
62:35 - by using bevel
62:38 - which is the javascript compiler
62:41 - and that particular bevel don't know how
62:43 - to compile multiple tags at the same
62:46 - time
62:48 - for example if you add h1 tag along with
62:50 - this particular paragraph
62:55 - it is not valid as for jsx
62:58 - so babel cannot convert these tags at a
63:00 - time you can convert either of these
63:03 - tags only at a time
63:06 - but
63:07 - there is a solution for this problem
63:10 - you can actually nest both of these tags
63:13 - inside another container
63:15 - for example a new tag
63:18 - so as per the syntax of jsx
63:21 - we have written only one tag called due
63:24 - and which contains two chain tags and
63:28 - that is allowed
63:30 - in this case first it generates a
63:32 - statement called react dot create
63:35 - element of due
63:36 - which is the actual element that you are
63:38 - trying to
63:39 - render
63:41 - and inside which we have two children
63:43 - that is h1
63:45 - as well as the p tag
63:49 - here the content of the h1 is heading
63:53 - and the content of the p tag is high
63:57 - you can use the same exact technique
63:59 - while your component render method
64:03 - so come back to your code
64:06 - i am trying to nest a tag called duo
64:10 - inside which we have something called h1
64:12 - and p
64:14 - to make the code readable and
64:16 - understandable better let me write
64:18 - multiple lines
64:21 - so that we can read the code easily
64:25 - now you can see the heading as well as
64:27 - paragraph output in the page
64:30 - so the syntax which we are using is jsx
64:34 - bevel converts this particular jsx into
64:37 - js
64:38 - file and automatically it has added
64:41 - parenthesis in the return statement
64:44 - so that either you can write this
64:46 - particular div tag in the same line
64:48 - or you can shift it to next line as well
64:52 - so as you can see inside the root tag
64:56 - we have something called new
64:59 - this is the div which we have created
65:02 - here
65:04 - and after that
65:06 - inside that particular div
65:08 - we have the h1 and p tags that we have
65:11 - created
65:14 - so overall this particular content is
65:16 - rendered by the navbar component that we
65:19 - have created here
65:22 - and that is represented as a react
65:24 - element
65:26 - but here you can notice a small problem
65:30 - that is you must always have an extra
65:33 - div tag along with your content
65:37 - if you don't require or don't want that
65:40 - you can use something called
65:41 - react.fragmenttag
65:44 - that is react.fragment
65:47 - the meaning of the react.fragment is
65:49 - that
65:51 - without rendering any html tag in the
65:53 - dom
65:54 - it acts as a container for both of these
65:57 - tags
65:59 - so it satisfies the rule of jsx
66:02 - that must contain only single tag
66:05 - at the same time this fragment tag
66:08 - doesn't render any html code in the
66:10 - output
66:12 - it actually renders only the content
66:14 - inside it
66:16 - now
66:18 - inside the root team tag
66:20 - we can see the actual inner tags
66:22 - without an extra div tag
66:26 - so it is up to you finally
66:29 - if you don't want an extra due tag it is
66:31 - better to use react.fragment
66:35 - this acts as a parent or container for
66:38 - multiple html tags without rendering an
66:41 - extra due tag
66:44 - and moreover in this class also you can
66:46 - use something called export default
66:50 - so remove this particular export keyword
66:52 - here
66:54 - and you can write export default
66:57 - and specify the class name that is
66:59 - navbar
67:01 - alternatively you can write the same
67:04 - within the class itself
67:06 - that is as export default directly here
67:09 - near the class keyword
67:12 - but don't try to use both at a time
67:15 - you can use either of the syntaxes
67:18 - either below or
67:20 - along with the class name itself
67:23 - in this example i am writing export
67:25 - default below the class
67:28 - so in this case
67:30 - since the navbar is default export
67:34 - while importing the same in the index.js
67:37 - file
67:38 - you should not use braces
67:40 - but directly mention the class name as
67:43 - nav bar
67:45 - but you can see the same output
67:49 - in the next lecture let us add a little
67:51 - bit of css styles for the same
67:59 - let us try to add css files for this
68:02 - application
68:04 - in order to do so
68:07 - open your explorer window
68:10 - and then right click on the src folder
68:13 - create a new file
68:16 - file name is
68:17 - index.css
68:19 - of course you can give any name for
68:21 - example app.css or anything
68:26 - and we are using this particular css
68:28 - file as a global css file
68:31 - that contains the global css styles
68:34 - that are applicable for all the
68:36 - components
68:38 - so by default any css code that you
68:40 - write here should be affected the entire
68:43 - page
68:44 - not for a specific component
68:47 - for example i am trying to add
68:50 - a class called
68:52 - highlight
68:55 - and adding some background color
68:59 - so this particular class can be used
69:02 - in all over the page in any component
69:06 - so how will you import this particular
69:09 - file into the application
69:12 - so come back to the index.js file
69:16 - here just like you import bootstrap.css
69:19 - file earlier
69:21 - you try to import
69:24 - index.css file
69:27 - see since the index.css file is the
69:30 - local file within the same src folder
69:34 - you have to prefix it with dot slash
69:37 - here dot slash represents current
69:39 - working folder that is src folder
69:42 - in which we are writing the code
69:44 - currently
69:47 - now the css file has been imported in
69:50 - the application
69:53 - and it can be used anywhere in any
69:55 - component
69:57 - now come back to the same component that
69:59 - is navbar which is inside the app.jsx
70:04 - and then for either of the heading or
70:06 - paragraph you can try to add something
70:09 - called as
70:11 - class equal to
70:13 - and then specify the class name that we
70:15 - have created here
70:16 - that is highlight
70:20 - now you can see that the class gets
70:22 - updated
70:25 - like this apart from using predefined
70:27 - bootstrap css styles
70:29 - you can also use your own css code in
70:32 - this index.css file
70:36 - this is how to add global css file for
70:39 - your application
70:42 - in the similar way you can try to create
70:44 - specific css file for the specific
70:47 - component
70:48 - and import that particular css file in
70:51 - the respective jsx file
70:54 - that means we can import that particular
70:56 - css file in the desired jsx file in
71:00 - which component you required that
71:01 - particular style
71:05 - this is how to add the css styles for
71:07 - your application
71:14 - in this lecture let us actually use the
71:16 - bootstrap navbar in this application
71:20 - it's pretty easy
71:23 - first open getbootstrap.com site
71:27 - which is the official website of
71:28 - bootstrap
71:30 - then open documentation
71:33 - from the menu
71:35 - select components
71:38 - and then switch to navbar
71:42 - and it shows the example of navbar in
71:44 - boards tab
71:47 - so this is the bootstrap navbar
71:50 - which can contain one or more menu items
71:55 - and below is the code of the anal bar
71:59 - let's expand this
72:02 - and here you can see the copy button
72:05 - so that all this particular code
72:07 - whichever is being shown here will be
72:09 - copied into clipboard
72:13 - so that you can return back to your
72:14 - application
72:16 - and paste to the same
72:19 - so i am trying to remove this h1 tag and
72:21 - p tag inside the app.jsx file
72:25 - and paste all that particular html code
72:29 - that we have copied from the bootstrap
72:31 - website
72:33 - press alt shift df in order to format
72:36 - the code
72:39 - and now let us remove the things which
72:41 - are not required in our application
72:45 - first of all we have a navigation bar by
72:48 - using the nav tag in html
72:52 - and inside which we have navbar brand
72:55 - which displays the website name or title
72:58 - for the application
73:01 - i am trying to change it as my app
73:04 - so this will be appear
73:06 - in the output
73:07 - but currently we are seeing some
73:09 - compilation errors in jsx
73:13 - and
73:15 - this particular button tag displays the
73:17 - toggle navigation
73:19 - that means the menu button for opening
73:21 - and closing of the menu in case of
73:24 - smaller devices
73:26 - so keep it as it is
73:29 - and then scroll down
73:32 - let's try to add one or two hyperlinks
73:36 - each hyperlink is represented as li tag
73:39 - which means list item
73:43 - and let me delete the first one
73:47 - let's follow the second one that is now
73:49 - item
73:51 - here you can write your link text for
73:54 - example
73:55 - home
73:57 - and hrf is the url
74:00 - which should be opened when the user
74:02 - clicks on home
74:05 - you can repeat the same for all the
74:07 - remaining items in future
74:11 - in this case we don't really want this
74:13 - particular drop door item
74:16 - let's delete the same
74:19 - and even this disabled menu item also
74:22 - not required for us
74:24 - so let's delete it
74:26 - and then this form tag is not required
74:29 - really for us
74:32 - and that's all so this is the navigation
74:34 - bar which we have created here
74:37 - which contains the nav tag
74:40 - and then navbar blind item
74:44 - a tabular button
74:47 - along with one or more menu items inside
74:49 - the navbar now
74:52 - and then after that you will close do
74:54 - close and then nav tag close
74:58 - make sure all the opening tags are
75:00 - closed properly
75:01 - otherwise you will get jsx compilation
75:04 - errors
75:07 - so once you save this code
75:10 - you can see the application nav bar
75:13 - along with the tabular menu icon
75:16 - and if the user clicks on the same
75:19 - it expands the menu items as you create
75:24 - and it's a table button so that it can
75:26 - be closed as well
75:29 - if needed you can try to change the
75:31 - color of the navigation bar
75:35 - for example instead of navbar light
75:38 - we are trying to apply
75:40 - navbar dark
75:43 - and bg dark
75:46 - now this navigation bar is the darker
75:48 - one
75:51 - in case if you want to apply a custom
75:53 - background color for this navigation bar
75:56 - you can do the same by using your own
75:58 - css style
76:01 - so
76:03 - open the index.css file which is present
76:05 - in the src folder which we have created
76:08 - in the previous lecture
76:11 - and in this index.css file
76:16 - let's add a class called navbar style
76:21 - which contains the background color
76:22 - property
76:25 - of your own color whatever you desire
76:28 - for example
76:30 - i am selecting some kind of grain
76:34 - and let's apply this particular css
76:37 - class
76:38 - inside the app.jsx file
76:42 - so come back to the app.jsx file
76:47 - after writing all the css classes
76:50 - i'm trying to add something called as
76:54 - navbar style
76:56 - which is the class name that we have
76:57 - created before a moment
77:01 - still you cannot see the actual color
77:05 - so come back to index.css file again
77:09 - and add
77:11 - important
77:14 - that means this particular property
77:16 - overrides the default setting of
77:18 - bootstrap which was already in the black
77:21 - color
77:23 - now you can see that everything is in
77:25 - green color
77:27 - that is the color what you selected here
77:32 - and of course make sure you have already
77:34 - imported index.css file
77:37 - in the index.js file like this
77:42 - this is how will you add the navigation
77:44 - bar for our application
77:48 - and of course by default bootstrap
77:50 - navbar is responsive
77:53 - so if you try to maximize the screen
77:56 - it converts into regular nav bar
77:58 - where all the nav links are shown side
78:00 - by side
78:01 - without having any menu button on the
78:03 - top right corner
78:06 - so this is the look and feel of the
78:08 - navigation bar on the larger devices
78:11 - and this is the look and feel of the
78:13 - navigation bar on the smaller devices
78:17 - this is how to create bootstrap navbar
78:19 - in the react application
78:26 - this is the navigation bar that we have
78:29 - created in the previous lecture
78:32 - but if you can notice the browser
78:33 - console
78:36 - you are having some errors in the
78:37 - browser console
78:40 - we are talking about this particular
78:42 - error that is invalid dom property
78:45 - called class
78:47 - the reason behind this error is that
78:51 - in javascript already you have a class
78:53 - keyword
78:54 - which is used to create a class
78:58 - so that is the reason in the same file
79:00 - you cannot reuse the same keyword for
79:03 - applying the css class
79:06 - so alternatively you have to use class
79:09 - name property
79:10 - for applying the css class
79:14 - then it will not be confused with the
79:16 - class keyword in javascript
79:19 - so that is the reason wherever you are
79:21 - writing the css class
79:24 - you always replace with class name
79:26 - property instead of class
79:30 - in order to do so you can take the
79:32 - support of find and replace in visual
79:35 - studio code
79:37 - so press ctrl h
79:40 - and then specify the find as
79:43 - class
79:45 - and replace with class name like this
79:49 - in camel case
79:52 - so wherever you have a class keyword
79:55 - you're replacing the same with class
79:57 - name property
79:59 - and click on replace all in order to
80:02 - replace all instances in the current
80:04 - file
80:07 - but
80:08 - unfortunately
80:09 - the class keyword which is present to
80:12 - define the class also got renamed
80:15 - so let's make this adjusted as the class
80:18 - keyword
80:21 - that's all now
80:23 - that error has been fixed
80:26 - and let me clear out this class name
80:29 - duplication
80:30 - right
80:32 - so as you can notice that error has been
80:35 - cleared out here
80:37 - and that class name must be in camel
80:39 - case
80:42 - and let's target another error that is
80:45 - href attribute requires a valid value to
80:48 - be accessible
80:51 - it's because simply hash is not allowed
80:54 - for href in case of react
80:58 - to fix this error
81:00 - always use slash hash
81:03 - instead of simple hash in react
81:08 - generally we use hash in href attribute
81:12 - for representation of dummy link
81:15 - and make it look like url
81:18 - that begins with slash
81:20 - so that react will accept that
81:25 - even in any other place wherever href
81:28 - equal to hash replace the same with
81:31 - slash hash
81:34 - so if you can scroll down
81:36 - here also once again we have to repeat
81:38 - the same
81:39 - so instead of hash
81:41 - slash hash
81:44 - now that error has been cleared out here
81:48 - this is how do you fix the class name
81:50 - and hre of related errors in react
81:58 - we have done good enough by creating
82:00 - navigation bar
82:02 - but what's next
82:04 - i would like to place some content below
82:07 - the navigation bar
82:09 - but it is not good to place that content
82:12 - inside the navigation bar component
82:14 - itself
82:15 - and i would like to create a new
82:17 - component called main content
82:20 - in which i can place some content that
82:23 - could be appear below the navigation bar
82:27 - so let us open the explorer window in
82:30 - visual studio code
82:32 - and to right click on src
82:34 - new file
82:37 - file name is maincontent.jsx
82:41 - that means we are going to create a
82:43 - component called main content
82:46 - and for all the components file
82:48 - extension will be dot jsx
82:52 - and there must be another component
82:54 - called app component
82:56 - which wraps both main content as well as
82:59 - navigation bar
83:02 - actually in this file called app.jsx
83:06 - we have really created navbar component
83:08 - but not app component
83:11 - so let us rename this app.jsx as
83:16 - navbar.jsx
83:19 - so right click on app.jsx
83:22 - rename
83:24 - and specify the file name as navbar.jsx
83:31 - now let us create another file called
83:34 - app.jsx
83:35 - inside the src folder
83:38 - so right click on src add new file
83:43 - then specify app.jsx
83:48 - so i wish to really render app.jsx
83:51 - that means app component
83:53 - in the index file
83:57 - so let us create a new component called
83:59 - app component
84:01 - inside the app.jsx
84:04 - so in app.jsx
84:07 - i am trying to define a class called app
84:10 - component
84:12 - so the class name is app
84:16 - that extends a predefined class called
84:19 - component
84:22 - that is imported from react module
84:27 - and also import react
84:30 - from the same module called react
84:33 - because this class will be converted
84:36 - into react dot
84:38 - component
84:39 - so after compilation of the class
84:42 - it requires a predefined object called
84:44 - react from this particular react module
84:50 - and every component must have a method
84:53 - called render method
84:55 - that renders something
84:57 - for example renders a htable tag
85:02 - so this particular html tag will be
85:05 - rendered in the webpage as you can see
85:12 - open the index.js file
85:16 - and instead of rendering navbar
85:18 - let us render app component
85:21 - so i am trying to import app component
85:25 - from the app file that is app.jsx file
85:30 - and i'm trying to render app component
85:32 - but not navbar component
85:36 - and then
85:38 - switch back to app.jsx file
85:41 - here i would like to render two
85:43 - components that is navbar component and
85:46 - the main content component
85:49 - first let me render navbar component
85:52 - so how can i render one component in
85:54 - another component
85:56 - this is called as nested component
86:00 - so right from the app component
86:02 - we have to import the navbar component
86:06 - from the navbar.js
86:08 - file
86:10 - notice this navbar is already having
86:13 - default export
86:15 - as you can see like this
86:18 - so that is the reason you can import
86:20 - this navbar from app.jsx file
86:26 - so import navbar
86:28 - from
86:30 - navbar.jsx file
86:33 - here dot jsx file extension will be
86:36 - taken automatically
86:38 - and to represent current working folder
86:41 - that is src folder
86:43 - we have to give
86:45 - dot slash
86:47 - and since the navbar component class is
86:50 - the default export here
86:52 - known as using braces while importing
86:55 - the same here
86:58 - so this is the code for importing the
87:00 - nav bar from the navbar.jsx file
87:04 - you can use the same syntax for
87:06 - importing any component in any other
87:09 - file
87:11 - so instead of rendering hello
87:13 - i would like to render navbar
87:18 - by writing the opening and closing tag
87:20 - for navbar
87:22 - this is the actual class name which we
87:25 - have defined in the navbar.jsx
87:28 - file
87:30 - so always we use the class name of the
87:32 - component as the name of the tag here
87:37 - but
87:37 - you can also write the same tag as
87:40 - unpaired tag
87:41 - that means self-closing tag instead of
87:44 - paired tag
87:46 - so optionally you can convert this as
87:49 - self closing
87:50 - by keeping a space and then slash
87:55 - so in this case
87:56 - no need of writing the separate closing
87:58 - tag for navigation bar
88:02 - so it works in the same way as expected
88:07 - and after that i would like to create
88:09 - main content component in the main
88:11 - content.jsx file
88:14 - then i would like to render the same in
88:17 - the app.jsx file
88:21 - so let's go to the main content.jsx file
88:26 - let's add a default export class called
88:29 - main content
88:34 - and also import react
88:37 - and component
88:39 - from react module
88:43 - every component must extend a predefined
88:46 - class called component
88:50 - and also must contain a method called
88:52 - render
88:54 - that must return something for example
88:57 - at least a tag
89:00 - here i am trying to return hello from
89:03 - main content
89:07 - so for time being just it contains hello
89:10 - misses
89:13 - but as you can see still main content
89:15 - was not rendered in this particular page
89:20 - it's because we have created the main
89:22 - content component but we have not
89:25 - invoked it in the app component
89:29 - but can you return multiple components
89:31 - at a time like this
89:35 - now
89:36 - in order to do so
89:37 - we have to use react.fragment
89:41 - that act as a parent for both of these
89:44 - tags
89:46 - before than that
89:47 - let me import main content
89:51 - from the file called main content dot
89:54 - jsx
89:58 - here dot slash is must in the file path
90:01 - to represent current working folder
90:06 - so the react dot fragment tag represents
90:09 - as a parent
90:12 - for both of these tags
90:19 - so as you can see
90:21 - react.fragment is the parent
90:23 - inside which we have two components that
90:26 - is
90:27 - nav bar as well as main content
90:31 - now above you can see the nav bar
90:34 - and below the navigation bar you can see
90:37 - the content from main content component
90:41 - so now we can say that the app component
90:44 - is a root level component or
90:47 - top most component in the hierarchy
90:50 - inside which we have two chain
90:52 - components that is called
90:54 - navbar and the main content components
90:59 - so this is called component hierarchy
91:02 - where app component is a root level
91:04 - component
91:06 - and it can have one or more child
91:08 - components inside it
91:12 - so the component hierarchy decides the
91:14 - parents and children
91:16 - depending on where a component is being
91:19 - invoked
91:20 - for example
91:22 - instead of invoking the main component
91:24 - inside the app component
91:26 - if you write the same code
91:29 - inside the navbar component
91:32 - suppose i just write the main content
91:34 - component here
91:38 - now we can say that app component is the
91:41 - root level component
91:43 - and it has only one chain component that
91:46 - is nav bar
91:48 - and the navbar component has a channel
91:51 - called main content
91:53 - so the component hierarchy changes
91:55 - depending on which component is invoked
91:58 - in which other component
92:02 - all right let me undo the changes
92:06 - i wish to really invoke main content
92:09 - only in the app component like this
92:13 - so this is how you nest the components
92:16 - and build up the component hierarchy in
92:19 - react
92:21 - in the next section
92:23 - we will render a lot of things
92:25 - dynamically into these components
92:29 - we are going to understand about
92:30 - straight props in the further lectures
92:34 - so keep continued
92:37 - but to be frank this is not enough for
92:40 - building real world react applications
92:43 - you will really require to know the
92:45 - functional components
92:47 - and also advanced concepts such as redax
92:52 - and that is where you will check out my
92:54 - full course on udemy
92:56 - that is complete react ultimate guide
93:00 - in this course we are going to build the
93:01 - full pledged e-commerce application
93:04 - along with red x
93:06 - redex toolkit router and bootstrap
93:11 - in this udemy course we are going to
93:13 - learn the complete react with class
93:15 - components as well as functional
93:17 - components
93:19 - for example if you can check this
93:21 - section of course project with hooks
93:24 - here we are going to learn various hooks
93:26 - such as use state use effect
93:29 - validations
93:30 - use callback
93:32 - and many more advanced features of react
93:35 - hooks
93:36 - and importantly context api
93:40 - and additionally in this course we are
93:42 - going to learn red x react redux redux
93:46 - thunk red x promise redux saga
93:48 - and many more latest features
93:52 - and moreover in order to properly
93:54 - understand all these concepts of react
93:56 - and red x
93:58 - one should have the proper knowledge on
94:00 - javascript concepts
94:02 - especially functions and objects
94:06 - so in this udemy course we have provided
94:08 - the prerequisites of javascript that is
94:12 - javascript functions and objects
94:14 - and also ecmascript 2015 classes
94:19 - so even though you have less or basic
94:21 - knowledge on javascript
94:23 - you need not worry
94:25 - in this udemy course we have covered all
94:27 - the basic concepts of javascript that
94:29 - are necessary to understand this react
94:32 - android x
94:35 - and this is the advanced version of
94:36 - e-commerce application that we are going
94:39 - to build in the udemy course
94:41 - see after entering the essential email
94:44 - and password
94:48 - we have the dashboard page
94:50 - where the user can see his previous
94:52 - orders
94:53 - and the products in the cart
94:56 - from there he can buy the product or
94:58 - delete the item in the cart
95:02 - and if you click on the store page
95:05 - you can see all the available products
95:08 - you can filter out them
95:10 - the products and brands which you don't
95:12 - want
95:15 - you can select a particular product and
95:18 - add to cart
95:19 - and the same is visible in the cart
95:22 - itself
95:23 - and from there you can either buy or
95:26 - delete
95:29 - so this is the application that we are
95:31 - going to build with react hooks in the
95:33 - udemy codes
95:39 - all right we are good enough to nest the
95:42 - components that is navbar component and
95:45 - main content component
95:48 - but in real world applications all the
95:51 - content will not be static content right
95:54 - in many places you require to render the
95:57 - content dynamically
95:59 - so this section talks about
96:01 - how do you render the content
96:03 - dynamically
96:04 - and how do you update or modify the
96:06 - state of the page
96:09 - in order to store the dynamic content of
96:12 - your component
96:13 - you require to create a property called
96:16 - state inside your component class
96:20 - so the state is the property that
96:22 - contains dynamic content of your
96:25 - component
96:26 - which you want to render on the page
96:29 - or it may contain the information that
96:32 - you want to read from the user as well
96:36 - so inside your component class that is
96:39 - main content component
96:42 - let me add a property called straight
96:46 - so this property contains the dynamic
96:49 - information that you want to render on
96:51 - your component
96:54 - so this is the object literal in
96:56 - javascript
96:58 - which can contain properties
97:00 - and the property values can be of any
97:03 - type
97:05 - it can be number string
97:08 - date
97:08 - or even aries also
97:13 - you can use nested objects inside the
97:15 - state
97:17 - for example i would like to display the
97:19 - title of the page
97:21 - inside the main content component
97:25 - so actually i can render something
97:27 - called h1
97:30 - or h4
97:33 - as title of the page that is customers
97:38 - but this is static information isn't it
97:42 - how do you make the same as dynamic
97:46 - you should store this information inside
97:48 - the state
97:50 - for example there is a property called
97:52 - add title
97:54 - that is equal to customers
97:58 - and then you can render this particular
98:00 - property value in this place
98:04 - so how do you render the value of the
98:06 - property from the state
98:09 - open the braces and close the braces
98:13 - in between opening and closing the
98:15 - braces you write something called this
98:18 - dot stage
98:20 - that means you are accessing the state
98:22 - property of the current working class
98:26 - here
98:27 - this keyword represents the current
98:29 - working object of the
98:31 - current class
98:34 - and inside the state property we have
98:37 - another nested property called app title
98:41 - and you can render the same
98:44 - so now you are getting the same
98:46 - information that is title
98:48 - dynamically
98:50 - this is how you render the content
98:52 - dynamically by using expressions
98:55 - so this braces are called expressions in
98:58 - react
99:00 - which is used to render the content
99:02 - dynamically
99:06 - and the beauty of the state property is
99:08 - that
99:09 - as soon as you update the state property
99:11 - by using set state method
99:14 - automatically in this place the state
99:16 - will be refreshed
99:19 - so when you make any changes in the
99:21 - virtual dom
99:23 - automatically react compares the virtual
99:25 - dom with actual browser dom
99:28 - and
99:29 - updates the properties which are exactly
99:31 - modified
99:33 - instead of re-rendering the complete
99:35 - page
99:37 - for example if you modify this
99:39 - particular app title property
99:42 - only that particular property value gets
99:44 - updated in the dom
99:46 - rather than re-rendering the complete
99:48 - page
99:50 - that's what make react faster
99:54 - anyways we will see how to update the
99:57 - state dynamically in the further
99:59 - lectures
100:01 - so for time being when you make any
100:03 - changes in the property value for
100:05 - example employees
100:09 - since the page refreshes because of
100:11 - development server you can see the same
100:13 - information dynamically render in the
100:16 - expression
100:18 - and just for styling purpose you can add
100:21 - something called class name
100:25 - notice i am using class name but not
100:27 - just class
100:30 - because in javascript you have a keyword
100:33 - called class in order to create a class
100:37 - but for css classes we are required to
100:40 - use the class name instead
100:44 - for example i am giving border bottom
100:48 - and margin one
100:51 - and also padding one
100:55 - these are just css classes provided by
100:57 - boardstrap
100:59 - in case if you are not aware of
101:00 - bootstrap
101:02 - or feeling confusing about bootstrap css
101:04 - classes you can check out my other codes
101:07 - called bootstrap or refer to bootstrap
101:10 - documentation in the getbootstrap.com
101:13 - site
101:15 - in my course i am not much deeply
101:18 - explaining the bootstrap related to css
101:20 - classes because that's all a different
101:23 - subject
101:25 - so in the next lecture we will see
101:28 - how to handle events in react
101:35 - well in the further lectures i would
101:38 - like to show the customers grid
101:41 - so the app title is customers
101:45 - and it is not the app title and it is
101:47 - the page title so let me change it as
101:50 - page title
101:53 - and render the same as base title
101:57 - and then i would like to show the
102:00 - customers count
102:03 - so let's have a property called
102:06 - customerscount
102:09 - and for example it is 5
102:13 - and in order to render the same i am
102:15 - just writing
102:17 - a span tag
102:19 - so inside the span tag i would like to
102:21 - render the value of customers count
102:24 - dynamically
102:25 - by using react expression
102:29 - so react expression is the braces
102:32 - and you can access the state
102:35 - that is this dot state dot
102:38 - the property name that is customers
102:40 - count
102:42 - that is 5
102:45 - in order to stride it up
102:47 - i am trying to add the css class name
102:51 - that is badge
102:54 - and badge as
102:56 - secondary
102:59 - and let's apply some margin for the same
103:02 - by writing m2
103:05 - so every time when you modify the value
103:08 - of this property
103:09 - automatically the same gets reflected in
103:11 - this place
103:13 - where we render the particular component
103:15 - property
103:18 - now we are going to learn how to handle
103:20 - events in react
103:23 - in javascript we have events such as
103:25 - click double click focus blur key press
103:29 - key up etc
103:32 - you can handle almost all types of
103:34 - events by using react
103:37 - in order to do so we have to write on
103:39 - click on focus on blur etc attributes
103:43 - within the specific html tag in react
103:47 - and there you can call a method that is
103:50 - written inside the same component
103:54 - you cannot call the methods of another
103:56 - component inside this present component
104:01 - for example let me add a button inside
104:04 - the h4
104:06 - by using button tag
104:12 - so there is a button called
104:14 - refresh
104:17 - when the user clicks on this particular
104:19 - refresh button
104:20 - i would like to call a method
104:23 - to do so i'm just writing on click
104:27 - in camel case
104:28 - that means on in lowercase
104:31 - click
104:33 - c is capital in click
104:36 - here i can call any method that is
104:39 - present within the same component
104:42 - first let me create a method
104:45 - inside the same component class
104:48 - so as of now here this is the closing
104:51 - brace of the render method
104:54 - after that let me add a method
104:58 - preferably the method name could be a
105:00 - meaningful name for example on refresh
105:03 - click
105:06 - you can actually give any method name
105:08 - but better to follow the naming
105:10 - convention so that your code will be
105:12 - self explanative
105:15 - and any developer can understand that
105:18 - this method executes on clicking the
105:20 - refresh button
105:23 - and also let me add comment
105:25 - to make it easy to understand later
105:30 - so inside this particular method i can
105:32 - write any code
105:35 - that is for example
105:36 - i am writing console.log of
105:40 - refresh click claim
105:42 - you can actually write any code whatever
105:45 - you require
105:48 - now i would like to call this particular
105:50 - method
105:51 - inside the on click event
105:54 - so let's come back to
105:56 - render method
105:57 - and inside the on click
106:00 - i am just writing on click
106:03 - the method name must not be in codes
106:06 - but must be inside an expression that is
106:09 - braces
106:12 - so this indicates that
106:14 - when the user clicks on this particular
106:16 - button
106:17 - we have to call the onrefreshclick
106:20 - method
106:22 - notice we should not use the parentheses
106:24 - for calling
106:26 - but it must be as it is just name of the
106:29 - method
106:32 - and also we have to represent the method
106:35 - along with this keyword
106:37 - so we should write this dot method name
106:40 - in order to access the method of the
106:41 - current working class object
106:45 - that is just like how you call this dot
106:48 - state in the same way you should write
106:50 - this dot method name
106:54 - so as you can see when you click on the
106:56 - button
106:57 - you can see refresh clicked in the
106:59 - browser console
107:03 - but how do you really update the
107:04 - component state
107:07 - that's what we will do in the next
107:08 - lecture
107:15 - all right in order to update the state
107:18 - of the page
107:19 - we have to use setstate method but it
107:23 - should not overwrite the values of the
107:25 - state property directly
107:28 - it's because every time when you update
107:30 - the state
107:31 - internally based on the virtual dom the
107:34 - real browser dom should be updated by
107:36 - react
107:38 - so if you overwrite the values of the
107:41 - state properties
107:43 - react cannot identify that and cannot
107:46 - re-render the same ui
107:49 - so that is the reason you have to use
107:51 - the set state method in order to let
107:54 - react update the browser dom
107:56 - based on the changes made in the virtual
107:58 - dom
108:00 - so inside the method called on refresh
108:02 - click we are just writing this dot set
108:06 - state
108:08 - in this case it is a predefined method
108:12 - and you can supply only the property
108:14 - values which you want to really update
108:18 - so we have two properties i don't want
108:20 - to update page title
108:23 - but i wish to update only the customer
108:25 - count
108:27 - for example i wish to make it as 7
108:31 - so to do so
108:33 - just add customer's count property only
108:36 - and give the updated value that is 7
108:40 - it will overwrite the previous value
108:42 - that is 5
108:44 - and then this particular change will be
108:47 - taken into virtual dom first
108:49 - and then react compares the virtual dom
108:52 - changes
108:53 - with actual browser dom
108:55 - and updates the browser dom only for
108:58 - that specific property will not render
109:00 - the full ui
109:03 - so let's click on refresh button
109:06 - and as you can see it is showing an
109:08 - error saying that cannot read property
109:11 - called set state of undefined
109:15 - the reason behind it in javascript
109:18 - by default that this keyword context
109:20 - will be changed
109:22 - when it is indirectly called
109:25 - so in this example we are not calling
109:27 - this method directly
109:29 - but we are calling the same with on
109:31 - click event of the button right
109:34 - so that is the reason
109:36 - that this keyword by default refers to
109:38 - button
109:39 - rather than representing current object
109:41 - of the component class
109:44 - in order to overcome this particular
109:46 - problem
109:48 - we can convert this method as a error
109:50 - function
109:51 - so that that this keyword of the error
109:54 - function always refers to component
109:56 - class
109:57 - rather than a button
110:00 - so how do you convert this method as a
110:03 - error function
110:05 - just
110:06 - say equal to
110:08 - and then after the parenthesis
110:11 - you just add something called arrow
110:13 - operator
110:15 - that is equal to and greater than
110:18 - and that's it you have successfully
110:20 - converted your method as a error
110:22 - function so that the benefit of error
110:26 - function is that
110:27 - always it's this keyword stick to the
110:29 - component class
110:32 - that this keyword context will not
110:34 - change to any button or something else
110:38 - so even though you are calling that add
110:40 - a function through a button that this
110:42 - keyword refers to a component
110:46 - try clicking on the button once again
110:48 - see
110:49 - as soon as you update the value of the
110:51 - state
110:53 - the particular ui gets changed
110:56 - it's because we are using set state
110:59 - method in order to update the state of
111:01 - the component
111:04 - and
111:05 - go to elements
111:08 - right click on the title
111:10 - inspect element
111:13 - and try clicking the button again
111:18 - so as soon as you click on the button as
111:20 - you can see
111:21 - only the value of span tag is being
111:23 - updated
111:24 - rather than re-entering the complete h4
111:28 - that is what the actual benefit of using
111:30 - virtual dom in
111:32 - react so overall we have understood how
111:36 - to update the state of the component by
111:38 - using setstate method
111:41 - you can apply the same logic for
111:43 - updating any type of value
111:45 - not only number
111:47 - but also for string array or any other
111:50 - type
111:52 - in the next lecture i would like to
111:54 - demonstrate a customer's grid
112:02 - in this main content component i would
112:04 - like to show you
112:06 - how do you render the table that is grid
112:09 - by using map method of javascript array
112:14 - first you require to store the data in
112:16 - the form of array inside the state of
112:19 - the main component
112:22 - in order to do so let's write the
112:24 - properties line bearing
112:27 - and add another property called
112:30 - customers
112:32 - it is an array
112:34 - so in this array i would like to add all
112:37 - the list of customers that i would like
112:38 - to render
112:40 - inside the customer's grid
112:44 - whereas each customer is represented as
112:46 - an object literal
112:49 - suppose for each customer we have id
112:52 - name and phone number
112:58 - similarly let us add some sort of
113:01 - customers
113:12 - so this is the date of the customers
113:14 - that i would like to render
113:17 - so how do you show this particular array
113:19 - data in this react component
113:23 - to do so let's look after the h4
113:27 - so after closing the h4 i am trying to
113:29 - add a table tag
113:33 - and in order to apply the bootstrap
113:34 - style of table let's add a set of css
113:38 - classes
113:41 - that is table
113:44 - and inside the table i would like to add
113:47 - header row
113:54 - and i have just added the column headers
113:56 - that is id
113:58 - name and phone number
114:01 - which displays like this in the large
114:03 - screen
114:06 - and here i would like to show the actual
114:08 - list of customers
114:11 - so let's take up t body
114:14 - means table body
114:18 - so inside the t body i would like to
114:20 - have a tier tag
114:23 - with some sort of td tags
114:26 - so this particular tier tag should be
114:28 - repeated once for one item in the
114:31 - customer's array
114:33 - how do you repeat this particular tier
114:35 - tag for each customer
114:39 - to do so in javascript arrays we have a
114:42 - predefined method called
114:44 - map
114:46 - the map method of javascript array
114:49 - receives an error function
114:51 - and executes that error function for
114:54 - each element inside the array
114:58 - so in order to call it
115:00 - let's take up an expression
115:03 - and write
115:05 - this dot
115:08 - customers.i mean this dot state dot
115:10 - customers.map
115:14 - and then we require to pass
115:17 - an error function
115:19 - so this particular error function will
115:21 - be executed
115:23 - once for one item in the customers array
115:27 - and each time you will receive the
115:29 - customer object as an argument
115:34 - and then you require to return the tr
115:36 - tag
115:37 - inside the arrow function
115:41 - so whatever you return inside this
115:43 - particular
115:44 - arrow function
115:45 - this will be rendered inside the output
115:50 - so as you can see since there are five
115:52 - customers in that array five tier tags
115:55 - have been generated automatically
115:58 - as you can see here
116:02 - see in the t body we have five tier tags
116:04 - automatically got generated
116:07 - with empty 3d tags
116:11 - but how can you render the actual
116:13 - content
116:15 - in each td tag you can use your
116:18 - expression
116:20 - and you can use the parameter called
116:21 - cast in order to access the current
116:24 - working customer
116:27 - the same error function executes once
116:29 - for each customer right
116:32 - so for the first time the first customer
116:34 - object will be passed into the cust
116:37 - parameter
116:38 - that means for the first time cussed
116:41 - parameter equal to this particular
116:44 - object
116:46 - and the second time this is the second
116:48 - object assigns to cost parameter
116:52 - like this you can access the customer
116:54 - details by using cust parameter every
116:56 - time
116:58 - so you are writing custom dot
117:01 - id
117:03 - so as you can see
117:04 - it is printing customer ids in all the
117:07 - rows
117:10 - you can try accessing the name and other
117:12 - properties
117:15 - that is
117:16 - id name and phone properties
117:21 - so cust.name
117:23 - customer dot
117:25 - phone number
117:28 - so this is how the table appears in
117:30 - output
117:33 - but if you look at the browser console
117:36 - it shows an error saying that
117:38 - each child in a list should have an
117:41 - unique key property
117:44 - it is a mandate of the react
117:47 - in order to identify the each row of the
117:49 - table
117:50 - it requires an unique key
117:53 - which is also considered as a primary
117:55 - key
117:57 - so you should specify the key property
117:59 - in the tier tag which is being returned
118:02 - from your error function
118:05 - based on this specified key
118:07 - react identifies each row inside the
118:09 - table
118:11 - in our customers area which property is
118:14 - unique
118:16 - it is id isn't it
118:18 - so we have to specify that id property
118:21 - of the customer is the unique key
118:24 - inside the
118:25 - map function here
118:29 - so go to the tier tag
118:31 - add key
118:33 - equal to customer dot customer id
118:38 - that's it
118:39 - that error gets cleared
118:42 - and of course you should not use double
118:44 - quotes for the same
118:47 - so this error has been cleared out
118:50 - and you can see the data comfortably
118:52 - here
118:54 - sometimes in the array elements you will
118:56 - have nested properties
119:00 - for example we have something called
119:02 - address
119:04 - and it contains several properties such
119:06 - as city
119:07 - straight etc
119:10 - for example let's add city
119:13 - as new delhi
119:16 - and some other values for each other
119:18 - customers
119:28 - like this every customer has their own
119:30 - address
119:31 - and each address contains other
119:33 - properties such as cd
119:36 - how can you render this type of output
119:39 - inside the grid
119:41 - you can access the reference variable
119:43 - that is cursed dot
119:45 - address dot cd
119:48 - that means while rendering you can write
119:50 - like
119:53 - cust dot address dot siri
119:57 - this is how you access the nested
119:59 - properties in case of arrays
120:03 - let me add a header row for the same
120:08 - as you can see cities are rendered in
120:10 - the table
120:18 - all right by using map method in
120:20 - javascript arrays
120:22 - we are good enough to display the grid
120:24 - in the page but now i would like to
120:27 - render some content based on the
120:29 - condition
120:32 - means if the condition is true i wish to
120:34 - render one content
120:36 - if it is false i wish to render another
120:39 - content
120:41 - so that is called conditional rendering
120:45 - so how can you do that
120:47 - for example
120:49 - if the phone number is not available for
120:51 - the customer i would like to show the
120:54 - text like no phone
120:57 - to do so
121:00 - let me remove some phone number for one
121:02 - or two customers
121:04 - let's say james and john
121:06 - don't have a phone number
121:09 - it is empty value or can be null
121:15 - so since the value is null
121:19 - it is rendered as just empty in the
121:21 - output
121:24 - rather than empty i would like to show
121:26 - the text like no phone
121:29 - that is called conditional rendering
121:33 - to do
121:34 - so come back to the table tag in the
121:37 - main.content.jsx
121:42 - go to the place where exactly you are
121:43 - entering the phone
121:46 - and here check the content before
121:48 - rendering
121:51 - if the custard dot phone is equal to
121:53 - null
121:55 - in this case you would like to render
121:57 - something like
121:58 - no phone
122:01 - otherwise you have to render the content
122:04 - called custom.phone itself
122:07 - this is the simplest way to render the
122:10 - output conditionally
122:13 - sorry it is no phone
122:15 - let us check the output
122:21 - as you can see if the phone number is
122:23 - not available for james and john
122:25 - it is displaying as no phone
122:28 - instead of empty text
122:31 - alternatively instead of plain text you
122:34 - can also render the tags
122:36 - so remove the codes
122:39 - and use any tags such as new tag
122:44 - and place the text inside the new tag
122:49 - this is what the exact advantage of the
122:51 - jsx
122:53 - anywhere you can return a tag just like
122:55 - a normal value in javascript
123:00 - this case if the condition is true
123:02 - this particular tag will be written
123:05 - so that this will be displayed in the
123:07 - output
123:10 - and in this new tag you can add custom
123:12 - css classes
123:14 - by using class name
123:17 - and specify
123:19 - background color
123:22 - and also padding for example 2
123:27 - and the condition can be better as
123:29 - custod phone
123:32 - in javascript the values such as null
123:36 - undefined empty codes and 0 are called
123:39 - as false
123:40 - values
123:42 - so in case of 4 number property contains
123:45 - any of these values
123:47 - in that case it is considered as no 4
123:49 - number
123:52 - so in all those cases the condition will
123:54 - be false
123:56 - so in the else case we should keep this
123:58 - new tag
124:00 - that is here
124:05 - so we are checking this condition
124:08 - in case if the four number property is
124:10 - other than the specified values that is
124:12 - false values
124:14 - the custod.4 number property will be
124:16 - rendered
124:18 - otherwise it returns this particular div
124:20 - tag
124:22 - what are the false values
124:25 - as per javascript null undefined 0
124:29 - empty codes are called as false values
124:34 - in all those cases the condition become
124:36 - false
124:37 - so you will render this particular due
124:39 - tag
124:42 - and also let's add another class called
124:44 - text center here
124:49 - so as you can see it shows no phone as
124:52 - new tag along with the padding
124:58 - so the syntax of conditional rendering
125:00 - is simple
125:02 - first check your condition
125:04 - if the condition is true
125:07 - that means if the condition is not null
125:09 - undefined or 0 or empty codes
125:12 - in that case this particular true value
125:15 - will be returned
125:17 - otherwise this particular false value
125:19 - gets written
125:22 - this is how to render the content based
125:24 - on the condition
125:27 - for another example
125:29 - in e-commerce application
125:31 - suppose if the product is not available
125:34 - you wish to show the output in one
125:36 - format
125:38 - if the product is available you want to
125:40 - show in another format
125:42 - suppose if the product is not available
125:44 - you want to show it in grey color
125:48 - for that cases we use this conditional
125:50 - rendering technique
125:57 - so in case of conditional rendering
126:00 - sometimes your code will be much more
126:02 - complex than this
126:04 - you may need to write much more number
126:06 - of statements
126:07 - to render the content conditionally
126:10 - such as checking more than one condition
126:14 - in that cases instead of making this
126:16 - code complex and lengthy
126:18 - it is recommended to write the same code
126:20 - in a method
126:22 - and call that method in this particular
126:24 - dd tag
126:27 - let's try the
126:28 - same let's cut this particular
126:31 - expression
126:32 - and scroll down in the main content
126:35 - component
126:36 - that is after the method of
126:38 - onrefreshclick method
126:42 - let us add a new method
126:45 - for example get phone to render
126:50 - so in this method let's paste the same
126:52 - code as we have written in the 3d tag
126:54 - previously
126:57 - and i would like to return this
126:59 - particular value of the expression
127:02 - and give a semicolon at the end
127:07 - now i would like to call this particular
127:09 - method
127:10 - in the td tag
127:13 - so let's call up this particular method
127:17 - inside the td tag here
127:20 - so in this expression we are calling the
127:22 - get phone to render method
127:25 - whatever that method returns that will
127:27 - be rendered here
127:29 - and what are you going to return in this
127:31 - method
127:33 - either phone number or new tag as you
127:35 - can see
127:38 - if the phone property has any value
127:41 - that means any of the truthy value
127:43 - it returns the phone number itself
127:46 - in case if it is a false value
127:49 - it returns the due tag
127:53 - here instead of using conditional
127:55 - expression like this
127:56 - you can also use the regular if
127:58 - statement
128:00 - if you have a complex code
128:03 - for example
128:04 - i am just writing regular if statement
128:07 - that is if cust.phone
128:11 - then we are going to written custod
128:14 - phone value
128:17 - else
128:18 - we are going to return the due tag
128:25 - so for complex code and complex
128:28 - operations you can use this technique of
128:31 - writing your expression in a separate
128:33 - method
128:34 - and invoking the same in the expression
128:37 - wherever you is to render the same
128:40 - that is in the particular tv tag where
128:43 - you want to show the output
128:46 - but in the output you can see some error
128:48 - saying that
128:50 - cust is not defined
128:54 - it's because the variable called cust is
128:56 - a parameter which is available only
128:59 - inside the boundary of the map method
129:02 - but not available outside
129:06 - so that is the reason we have to pass
129:08 - the cursed parameter as argument to the
129:12 - get phone to render method
129:15 - alternatively you can supply only the
129:18 - phone number property
129:19 - instead of passing the whole customer
129:21 - object
129:24 - so that is the reason in this method
129:27 - you can receive only the four number
129:29 - directly
129:30 - rather than receiving whole the customer
129:32 - object
129:35 - actually it is up to the requirement
129:38 - either you can pass the complete
129:40 - customer object
129:41 - where the output depends on various
129:43 - properties of the customer
129:46 - or
129:46 - in case if you want to check only the
129:48 - phone number of the customer to render
129:52 - in this case i am just passing only the
129:54 - customer phone number as argument
129:58 - and i am receiving the same inside the
130:00 - method
130:01 - and checking the same in the actual if
130:03 - statement
130:06 - so
130:07 - i can just use if phone instead of if
130:10 - custod phone
130:14 - and now if you can check the output
130:16 - again
130:17 - we have another error called get phone
130:19 - to render is not defined
130:24 - it's because we have to use the arrow
130:26 - function syntax in order to call this
130:28 - method
130:31 - even though it seems sometimes optional
130:34 - it is always advisable to use error
130:36 - function all over the react
130:39 - so get phone to render is equal to error
130:42 - operator
130:46 - and also we have to use the this keyword
130:48 - while calling the same
130:52 - so here we are calling the get phone to
130:54 - render method
130:55 - and supply the argument
130:58 - based on that argument
131:00 - we will return some value here either 4
131:02 - number or new tag
131:04 - and this particular returned value will
131:07 - be rendered in the same place where you
131:09 - originally call it
131:12 - this is how it works
131:15 - let's check the output
131:17 - now it's working fine
131:21 - every time you make changes you have to
131:23 - save the code
131:24 - then automatically the page gets
131:26 - refreshed by
131:27 - react development server
131:31 - and now let's remove this unnecessary
131:33 - border
131:36 - so go to the h4 tag
131:39 - and i am removing this water bottom
131:43 - so that that unnecessary water gets
131:45 - removed
131:46 - as you can see here
131:50 - in the similar way optionally you can
131:52 - render this particular t-body content in
131:55 - a separate method
131:57 - rather than writing the same in the
131:59 - render method
132:01 - because as long as the application is
132:03 - improved
132:04 - the code of the render method is getting
132:06 - increased right
132:08 - in order to simplify the code of the
132:10 - render method
132:12 - let's move this particular code into a
132:14 - separate method
132:16 - so let's cut this expression
132:20 - and scroll down in the main
132:22 - content.jsx file
132:26 - let's add a method called
132:29 - get customer role
132:33 - and preferably make it as an arrow
132:35 - function
132:37 - and here written the same expression
132:42 - use the parenthesis rather than
132:44 - expression here
132:47 - all right
132:49 - now we have to call this particular
132:51 - method inside the table tag
132:55 - so let's go up
132:58 - in the t body
133:00 - in the expression
133:02 - let us call the get
133:04 - customer row method
133:07 - so now the code of the render method is
133:10 - simplified
133:12 - the actual logic of tier tag
133:14 - is being written
133:16 - in this particular get customer draw
133:18 - method
133:20 - in this way you can simplify the code of
133:22 - the render method so that
133:24 - the render method becomes readable and
133:26 - understandable easily
133:29 - where each piece of the ui is being
133:31 - written by different different methods
133:35 - of course this modification doesn't
133:37 - affect the actual output it remains same
133:42 - and no errors in the browser console as
133:44 - well
133:50 - so how do you render images in react
133:55 - for example
133:56 - before the customer name i would like to
133:58 - show a random image
134:00 - for each customer
134:03 - to do so i'm using something called
134:05 - pixelm.com
134:07 - which provides random images
134:11 - so for every customer in the customer's
134:14 - area
134:14 - i am adding a property called photo
134:19 - and specify the url as https
134:25 - dot photos
134:28 - slash id
134:30 - and you can use any id starting from
134:32 - 1000
134:35 - and specify the size of the image that
134:37 - you want for example 60 pixels
134:40 - the same number will be taken for width
134:42 - and height
134:44 - alternatively you can specify the width
134:47 - slash height also
134:50 - for more information you can visit
134:52 - pixelm.com site
134:55 - let's repeat the same syntax for all the
134:57 - remaining customers
135:07 - so we have added photo column for each
135:09 - customer as you can see here
135:12 - now how will you display these
135:14 - particular photos inside the grid
135:18 - so scroll down in the main content.jsx
135:21 - file
135:23 - go to the get customer role method which
135:25 - renders the actual tr tag of the grid
135:30 - and we are calling this method inside
135:32 - the table tag as you can see here
135:35 - now
135:36 - in the method
135:39 - just add a td tag off to the id
135:43 - and in which you will render the photo
135:46 - that is cust.photo
135:49 - sorry let's write photo
135:53 - so in this case it is displaying the
135:55 - path of the photo that you mentioned
135:56 - there
135:57 - to render the actual image we can use
136:00 - img tag and bind this particular value
136:04 - into the src attribute of the img tag
136:08 - so let's do that img src equal to
136:13 - the custod photo
136:15 - by using the expression
136:17 - that is curly braces
136:20 - so don't use codes
136:22 - but use the braces to mention the
136:24 - dynamic value into the attribute
136:28 - and as per the recommendation for every
136:30 - image prefer using alt attribute
136:34 - and specify any content whatever you
136:37 - wish for example
136:38 - customer
136:41 - in case if the specified path of the
136:43 - image is not found
136:44 - or not loaded into the browser
136:47 - it shows customer instead
136:51 - let us see the image now
136:53 - as you can see same image appears for
136:56 - all the customers
136:58 - but i want different images
137:02 - now come back to the customers array
137:04 - again
137:06 - that is at the top of the file
137:09 - we will give different ids for each
137:11 - image
137:13 - let's say thousand eleven thousand
137:15 - twelve and so on
137:22 - in case if you want to know what are the
137:24 - available images
137:26 - you can visit this site that is
137:29 - pixelm dot photos slash images
137:34 - there you can find id of the image
137:38 - for example for this image id is
137:40 - thousand
137:42 - these are the random images
137:45 - you can mention any of these ids
137:47 - in your url
137:52 - here the credit goes to pixelm.com site
137:56 - anyways we have mentioned different ids
137:58 - of the images
138:00 - and let's refresh the same page
138:04 - as you can see
138:05 - we have different images for each
138:07 - customer
138:09 - this is how do you render the images by
138:11 - using
138:13 - src attribute of the emg tag
138:16 - you should bind your dynamic value by
138:19 - using braces in the src attribute
138:23 - not only a sorcery attribute you can use
138:26 - the same syntax for any attribute of any
138:29 - html tag
138:36 - sometimes you want to render or apply
138:38 - the css styles dynamically in react
138:43 - in that case you can assign an object
138:45 - into the style attribute of the html tag
138:50 - for example we have a requirement such
138:52 - that
138:54 - if the customer name begins with yes
138:56 - it should be having blue color
138:58 - background
139:00 - and if it begins with j it should be
139:03 - having red color background
139:06 - to do so
139:09 - we can use something called style
139:11 - attribute
139:13 - and assign an expression into the same
139:17 - here we can take the property for
139:19 - example background color
139:22 - and in case of value
139:25 - you can take an expression
139:28 - and check the condition for example
139:31 - if cust dot
139:32 - name starts with yes
139:38 - in that case you want to return the
139:39 - value called
139:41 - green
139:43 - otherwise you want to return the value
139:45 - called red
139:48 - and you will close another parenthesis
139:50 - here
139:53 - and since this is a property
139:57 - we are going to use another curly braces
140:02 - so in this case you are checking the
140:04 - condition
140:05 - if the condition is true
140:08 - you will return green otherwise red for
140:11 - this background color property
140:15 - and in the corresponding table
140:17 - let me add another th tag for photo
140:20 - column
140:22 - so we will have four th tags like this
140:26 - one is for id photo customer name phone
140:29 - and cd
140:31 - so this is how do you apply conditional
140:33 - styles in react
140:35 - we are checking the condition here
140:37 - if the condition is true
140:39 - we will return green otherwise red
140:42 - for this background color property
140:45 - so overall in this place either of the
140:47 - values will be taken at runtime
140:51 - for example if the condition is true
140:53 - that means if the name begins with yes
140:56 - green will be taken here
141:00 - and this become as a object lateral
141:03 - and that will be assigned to the element
141:05 - by using the expression
141:08 - that is the outer curly braces
141:11 - this is how it works
141:14 - so let's check the output
141:18 - as you can see we have green color for
141:20 - squat
141:21 - and otherwise we have red color for
141:24 - remaining customer names
141:27 - sometimes you wish to write much more
141:29 - complex logic like this
141:32 - let's say you want to set more than one
141:34 - property of the style
141:37 - and also if you want to write more than
141:39 - one condition
141:41 - for example if the name begins with yes
141:44 - green color
141:45 - if the name begins with j another color
141:49 - if the name begins with k another color
141:53 - in that case it's better to write this
141:55 - as a separate property
141:58 - so let's go to the top of the class
142:01 - that is inside the main content class
142:06 - i am trying to add another property
142:07 - after the state property that is just
142:10 - above the render method in the main
142:13 - content.jsx file
142:16 - customer name style
142:20 - and in order to define the values for
142:22 - the style dynamically let me convert the
142:25 - same as a method rather than a simple
142:28 - property
142:30 - and inside the error function
142:33 - we are receiving a parameter of customer
142:35 - name
142:38 - then we will check
142:40 - if custname begins with s
142:48 - we will return the style property as
142:50 - background color
142:53 - that is green
142:58 - otherwise in case if the customer name
143:00 - begins with j
143:02 - we will return red
143:05 - otherwise we will return an empty object
143:09 - which doesn't specify the background
143:10 - color particularly
143:13 - so either of these values gets written
143:16 - when you call this particular method
143:20 - now let's call this method in the place
143:23 - where exactly you are rendering the
143:25 - content
143:27 - let's scroll down in the same file
143:31 - instead of writing this clumsy code
143:33 - simply write
143:36 - this dot the method name that you write
143:38 - here
143:39 - that is customer name style
143:43 - now the code looks cleaner and
143:45 - simplified to understand
143:49 - so whatever you written in this
143:51 - particular method
143:53 - that gets applied for the style of the
143:55 - td tag
143:59 - and of course since you don't supply the
144:02 - value for the cust name it is showing an
144:04 - error saying that
144:05 - cannot read the property of starts with
144:08 - of undefined
144:10 - because you must supply the value for
144:12 - the cust name from the place where you
144:15 - are calling
144:17 - that is cust.name here
144:22 - so let us check the output
144:24 - as you can see
144:25 - in case if it begins with j it is red
144:28 - color
144:30 - if it begins with s it is green color
144:33 - otherwise it is normal
144:35 - white color
144:38 - but setting up the css styles
144:40 - dynamically by using style property
144:43 - is okay for one or two properties
144:46 - but not good if you want to reuse the
144:48 - same css styles for multiple elements
144:52 - or you want to set multiple css
144:54 - properties at the same time
144:58 - for example you want to set background
145:00 - color font size
145:02 - border radius etc at a time
145:06 - in those cases
145:08 - better to use the css class
145:10 - rather than setting style attribute
145:15 - we will really do that in the next
145:16 - lecture
145:23 - now let us convert this method into css
145:26 - class
145:27 - rather than setting independent
145:29 - properties of the css style
145:33 - to do so let's open index.css file
145:38 - that is present inside the src folder
145:42 - consider this as a global css file
145:46 - that is available for all the components
145:48 - of your application
145:51 - it's because
145:52 - we are importing this index.css file in
145:55 - the index.js file
145:57 - here
145:59 - so it becomes global for all the
146:01 - components
146:03 - alternatively if you want to import a
146:06 - separate css file for each component
146:09 - you can create a separate css file for
146:11 - each component
146:13 - and import the same in the respective
146:15 - component file
146:18 - anyways now let's switch to index.css
146:21 - file
146:24 - and add two classes that is green
146:26 - highlight
146:29 - and red highlight
146:32 - specify some properties as per the
146:34 - requirement
146:43 - so these are the two css classes that
146:45 - are created in the
146:47 - index.css file
146:50 - i would like to apply either of these
146:51 - classes dynamically based on the
146:53 - condition in the grid
146:56 - so the same requirement
146:59 - if the name begins with yes it should be
147:01 - green highlight
147:03 - if the name begins with j it should be
147:05 - red highlight
147:07 - so how can you do so
147:10 - let's come back to the main content.jsx
147:13 - file
147:15 - so in case if the customer name begins
147:17 - with yes
147:19 - we will return the class name as
147:23 - green highlight
147:26 - otherwise we will return the class name
147:28 - that is
147:29 - red highlight
147:32 - you can add more than one css class at a
147:35 - time
147:36 - with space operation
147:38 - for example you can use the built-in
147:40 - bootstrap css classes
147:44 - let's say i'm using border left
147:48 - and border right in case of red
147:52 - like this you can conditionally add
147:55 - different set of css classes whatever
147:57 - you wish
147:59 - and in the else case you will return
148:02 - nothing that means no specific css class
148:07 - and now you can call the same method
148:10 - in respect to place where you are
148:12 - rendering the customer's grid
148:15 - so in the same file that is main
148:17 - content.jsx file at last
148:21 - instead of binding the value into style
148:23 - attribute
148:25 - bind the same to the class name
148:28 - that means css class
148:31 - and of course you are calling the same
148:33 - method already
148:35 - that's all let's check the output
148:38 - in case if the name begins with yes
148:41 - the green highlight class is not applied
148:43 - correctly let me check again
148:47 - oops spelling mistake in the index.css
148:49 - file
148:50 - it's green highlight
148:54 - right let's check again
148:57 - so as you can see
148:59 - if the customer name begins with yes it
149:01 - applies the css class called green
149:03 - highlight
149:05 - the same can be seen in the browser dom
149:07 - as well
149:09 - and in case if it begins with j
149:14 - it's having red highlight css class as
149:16 - you can see here
149:18 - this is how do you apply conditional css
149:21 - styles by using css classes in react
149:27 - in real world applications better to use
149:29 - css classes rather than applying the
149:32 - style properties directly
149:40 - while handling events in react such as
149:42 - click event or focus event or blur event
149:45 - etc
149:47 - how can you pass arguments to the caller
149:49 - function
149:51 - for example in this application
149:53 - i would like to create a button near the
149:55 - photo that is change photo
149:58 - and once the user clicks there
150:01 - i would like to access the currently
150:02 - clicked customer details
150:05 - inside the function
150:07 - so how can you pass the current working
150:09 - customer details as argument to that
150:12 - click event handler
150:15 - before than that
150:17 - really we don't require the styles of
150:19 - green and red in further examples
150:22 - let me remove the same
150:26 - so let's remove this class name equal to
150:29 - customer name
150:30 - style so this td tag remains simple
150:36 - and let me go to the top of the main
150:38 - content file
150:41 - and let us remove this customer name
150:43 - style method which we don't require
150:52 - and locate the img tag of the customer
150:55 - photo
150:56 - inside the same 3d tag let's add a div
150:59 - tag
151:01 - with a small button
151:06 - that is
151:07 - chain picture
151:10 - so when the user clicks on this
151:12 - particular chain picture button
151:14 - i would like to pass the current working
151:16 - customer details as argument to the
151:19 - click event handler
151:23 - so let's come back to the code
151:26 - let's make this as a class name
151:29 - and on click
151:32 - we are regularly calling a method
151:36 - observe carefully
151:38 - here we are not calling the method
151:39 - directly
151:40 - but we are passing the reference to the
151:42 - method in the onclick property
151:46 - so in that case it will be difficult to
151:48 - supply arguments to this particular
151:50 - method
151:52 - to overcome this particular problem
151:56 - you can actually use an error function
151:59 - so that it will be easy for you to call
152:02 - the particular method instead of passing
152:04 - its reference
152:06 - so there you can pass any arguments
152:08 - whatever you really wish
152:12 - and then close the brace
152:15 - for example i am trying to pass the
152:17 - current working customer details
152:19 - as a custom parameter which was coming
152:22 - from the map method
152:26 - so the current working customer object
152:28 - is being passed as argument to this
152:31 - particular method
152:34 - of course you can call any method
152:37 - for example the method should be on
152:39 - chain picture click
152:42 - this method is as of now not defined
152:45 - let's define the same below
152:48 - so after completion of the get customer
152:51 - row method
152:52 - below let us add that on chain picture
152:55 - click method
152:58 - as error function
153:00 - and here i can receive the current
153:03 - working customer details as custom
153:05 - parameter
153:06 - which was passed above
153:10 - so first of all we are reading all
153:12 - customers from the customer's array by
153:14 - using map method
153:17 - the map method itself gives you the
153:19 - current working customer as cust
153:21 - parameter
153:22 - the same is being passed as argument to
153:26 - this on change picture click method
153:29 - and from here we are receiving the value
153:32 - into the
153:33 - on-chain picture click method definition
153:35 - here
153:38 - let's print the same by using
153:39 - console.log
153:42 - that is considered log of
153:45 - cost
153:48 - let's check here
153:50 - now if you click on either of these
153:52 - chain picture button
153:54 - for any customer
153:56 - for example i click this particular
153:58 - button for the fourth customer
154:00 - the fourth customer object is received
154:03 - as parameter
154:05 - and the same is being displayed in the
154:06 - console
154:10 - this is how you supply the value
154:12 - dynamically through the click event
154:15 - handler
154:17 - so while handling any event
154:20 - if you want to supply the argument value
154:22 - to the target method
154:24 - you can use this error function
154:25 - technique
154:29 - and it's not only for click event but
154:32 - also for any javascript events
154:34 - such as on key press
154:37 - on key up
154:39 - on change
154:41 - or any other javascript events that we
154:43 - have
154:46 - for almost all javascript events you
154:48 - have the properties that begins with on
154:51 - in react
154:54 - okay let's make it on click again
154:57 - but sometimes
154:59 - you used to really pass the index of the
155:01 - current working customer
155:03 - so for this requirement
155:05 - the javascript array map method itself
155:08 - provides you the second argument that is
155:11 - index
155:13 - so the arrow function of the map method
155:15 - receives two arguments
155:18 - the first argument represents the object
155:20 - from the array
155:22 - and the second argument represents the
155:24 - index of the corresponding element
155:28 - for example for the first customer index
155:31 - will be 0
155:32 - second customer index will be 1 and so
155:35 - on
155:38 - so after declaring the index parameter
155:40 - here
155:41 - you can carry forward the same index
155:43 - parameter to the on chain picture click
155:46 - method
155:47 - like this
155:50 - so first of all your index is being
155:52 - given by the map method
155:55 - and the same you carry forward to the
155:57 - particular method which you mentioned
155:59 - here
156:01 - and also let us receive the same here
156:05 - you can actually do anything based on
156:07 - the index
156:08 - such as updating the specific customer
156:10 - in the customers area
156:14 - in real world applications
156:16 - when you want to really perform edit
156:18 - delete such operations
156:20 - this technique will be really useful for
156:22 - you
156:25 - so let's check again
156:28 - this time try clicking on any one of
156:30 - these buttons for example i click on the
156:33 - change picture button for the second one
156:36 - so i am receiving two arguments in this
156:38 - case one is the customer object
156:40 - which i have clicked
156:43 - which includes all the properties
156:44 - including photo
156:47 - and second argument is the index that
156:49 - contains index of the currently clicked
156:51 - customer
156:53 - which i clicked here
156:56 - so since i click the second customer its
156:59 - index is 1.
157:03 - suppose i would like to update the
157:04 - status of the photo
157:07 - to something else
157:10 - for this case we can actually use the
157:13 - set state method
157:14 - because the customer's array is a part
157:17 - of the state
157:18 - of the current working component
157:21 - and the key logic here is that anytime
157:24 - when you make any changes in the
157:25 - customer's array through the set state
157:28 - method
157:29 - automatically react read enters the
157:31 - particular element
157:33 - based on the change that you make
157:36 - for example
157:38 - if you make any changes in the photo
157:39 - property of the specific customer object
157:43 - that specific img tag src attribute
157:46 - value gets updated by react dom
157:50 - let's try this
157:53 - so this dot set straight
157:57 - and i wish to update the
157:59 - area property
158:02 - and suppose i am passing an empty array
158:06 - since you supply empty array
158:09 - and click on the button
158:12 - see the complete array got removed
158:15 - it's because you have really updated the
158:17 - state of the component
158:20 - it immediately renders by the react
158:24 - so
158:25 - instead of overwriting the complete
158:26 - array
158:28 - first let me update the photo of the
158:30 - specific customer
158:34 - so where customer array equal to
158:39 - get customers from the state of the
158:40 - current working component
158:45 - and in this array
158:48 - go to the specific index based on the
158:50 - value that you have received through the
158:52 - parameter
158:55 - and update the photo property of the
158:57 - same
159:01 - for example i am trying to change the id
159:03 - as 1 0 4
159:07 - and then i am trying to give the same as
159:10 - the customer's array value here
159:14 - so as soon as you try to supply the
159:16 - array
159:18 - because of the set state method
159:21 - automatically react updates the
159:22 - particular image in the specific
159:24 - customer
159:27 - let's try here
159:29 - suppose i click on the change picture
159:31 - button for the third customer this time
159:37 - automatically as you can see the picture
159:39 - has been changed for the same
159:43 - and let's try once again
159:45 - i click on the chain picture button for
159:47 - the fifth
159:50 - customer as you can see the same image
159:53 - gets updated here
159:56 - this is how do you update the state of
159:59 - the array
160:00 - by using set state method
160:04 - so always keep in mind such that
160:07 - the array is the background information
160:10 - which renders as a table in the output
160:14 - any element or information that you want
160:16 - to change here
160:18 - you can update the same in the
160:19 - corresponding array in the state
160:23 - so that react automatically updates the
160:25 - same in the corresponding table
160:30 - this is how to make dynamic changes in
160:31 - the array in react
160:50 - i have just added some comments in the
160:52 - same method for your clarity
161:02 - in this lecture our goal is to create
161:04 - the shopping cart application
161:07 - which displays the list of products as
161:09 - shown here
161:11 - in this case the shopping cat is the
161:13 - component
161:15 - and each product is another component
161:19 - that means we are nesting the components
161:21 - here
161:23 - where shopping cat is the parent
161:25 - component in which the child component
161:27 - called product component has been
161:30 - rendered
161:33 - that means the shopping cat component is
161:35 - the parent component
161:38 - and the product component is the chill
161:40 - component
161:41 - which is rendered through the loop
161:45 - so here each product is an instance of
161:48 - product component
161:51 - so let's come back to our application
161:54 - currently in the main content component
161:57 - we are displaying customers list
162:00 - so let us convert the same into
162:02 - customers component
162:04 - where we can create another component
162:06 - called shoppingcat component
162:09 - that displays list of products
162:13 - let us rename this main content
162:15 - component as
162:19 - customerslist.jsx
162:24 - and in this customerslist.jsx
162:27 - the component class name is
162:30 - customerslist
162:33 - and we don't want to render it right now
162:37 - instead i would like to render
162:39 - shoppingcat component
162:42 - so let us create a new file in the src
162:44 - folder
162:45 - that is shoppingcat.jsx
162:51 - import essential react and component
162:58 - and creating the component called
163:00 - shoppingcat
163:04 - and i would like to render this
163:05 - particular shoppingcat component in the
163:08 - app.jsx file
163:12 - so switch to app.jsx file
163:16 - instead of rendering main content
163:20 - let us render shopping cat
163:24 - and import shoppingcat class
163:28 - from
163:29 - shoppingcat.jsx file
163:33 - now switch back to shoppingcat.js
163:36 - file
163:39 - have a method called render and in this
163:42 - render method i would like to written a
163:44 - new tag
163:47 - with some default content as shopping
163:49 - cat
163:52 - now it displays shopping cat in the
163:54 - output
163:58 - and i go to public
164:02 - index.html file
164:05 - change the title tag as ecommerce
164:11 - and then go to navbar.jsx file
164:16 - change the application name as
164:18 - e-commerce
164:23 - so as you can see the browser title as
164:25 - well as the application title has been
164:27 - changed as e-commerce
164:31 - now inside the
164:32 - shoppingcat.jsx file
164:35 - let's make this as a heading
164:39 - that is shopping cat
164:43 - and in this particular new tag i would
164:45 - like to render a set of products
164:49 - so first we have to store the list of
164:51 - products as an array in the state of the
164:54 - shopping cat component
164:56 - [Music]
164:57 - so in the state of the shopping cat
165:01 - we have a list of products
165:04 - and each product contains id
165:08 - product name
165:11 - price
165:13 - and quantity
165:17 - and let me add few more products
165:29 - so i have added some data in the
165:31 - products area of the state
165:33 - in the shopping cat component
165:37 - i would like to render this list of
165:39 - products in this new tag but each
165:42 - product must be represented as another
165:44 - component called product component
165:49 - so i would like to render this
165:51 - particular ui of the product as a
165:53 - separate component and that component
165:57 - should be repeated once for each item in
165:59 - the array
166:03 - so let us create another component
166:05 - called product component
166:08 - right click on src new file
166:12 - product dot jsx file
166:16 - in which i would like to create a new
166:18 - component called product component
166:22 - so inside the product.jsx file
166:26 - import react and other default elements
166:36 - and written something like product
166:40 - i would like to invoke this particular
166:42 - product component for each element
166:45 - inside the shopping cart
166:48 - so
166:49 - read the set of elements from the
166:51 - product's array
166:52 - and render
166:54 - product component in this place
166:58 - so how will you read the elements from
166:59 - the array
167:01 - that is through map method right
167:04 - so this dot state dot
167:06 - products dot map
167:10 - and we have an arrow function
167:12 - this error function will be executed
167:14 - once for each element in the array
167:18 - and this is the closing for the arrow
167:21 - function
167:22 - this is closing for the map function
167:26 - and this is the closing for the
167:27 - expression of react
167:30 - and this error function receives each
167:33 - element as an argument
167:35 - which can be received here as for
167:38 - example prod
167:40 - you can give it any name
167:44 - and in this error function you can
167:46 - return any instance of product
167:50 - that means for each element of the array
167:53 - it produces a new instance of product
167:55 - component
167:57 - here your invoking product component
168:00 - inside the shopping cat component right
168:04 - since you are invoking one component in
168:06 - another component
168:08 - the component which you are invoking is
168:10 - called as chill component
168:13 - and where you are invoking that
168:15 - component is called as parent component
168:19 - so shopping cat component is the parent
168:22 - component here
168:24 - and product component is the child
168:28 - in the similar way suppose if you switch
168:30 - back to app.jsx file
168:33 - in the app component you are invoking
168:36 - navbar and the shopping cat
168:40 - so navbar and shoppingcat are the chill
168:42 - components of app component
168:47 - again switch back to shoppingcat
168:49 - component
168:51 - you are generating one instance of
168:53 - product component once for each element
168:56 - in the array
168:58 - now in the browser you're getting an
169:00 - error saying that
169:02 - product is not defined
169:05 - it's because we have to import product
169:07 - component from the mentioned file
169:11 - so import
169:13 - product
169:15 - from which file
169:16 - that is
169:17 - product.jsx file
169:21 - so as you can see since we have six
169:23 - products in the array six times the
169:26 - product component has been repeated
169:28 - that means six instances of product
169:31 - component has been created
169:37 - but here the big question is that how
169:40 - will you supply the data from
169:42 - parent component to child component
169:46 - here i would like to supply the data
169:48 - from parent component to jail component
169:52 - how is that possible
169:54 - that's what the topic for the next
169:55 - lecture
170:02 - in the browser console we are getting an
170:04 - error saying that
170:05 - each child in a list should have a
170:08 - unique key that is
170:10 - key property
170:12 - so remember this wherever you're
170:14 - rendering an element
170:16 - by using map method in the react
170:19 - you must be specifying the key
170:22 - because internally react identifies each
170:25 - instance of the element by using the key
170:28 - property
170:30 - so that is the reason
170:32 - while rendering product component we
170:35 - have to specify the key
170:38 - the key must be the unique value in your
170:40 - data source
170:42 - in our example we have id property which
170:45 - is the unique
170:47 - it's not necessarily globally unique and
170:50 - not necessarily a number
170:53 - it can be even string or guid
170:56 - or whatever the data type it may be it
170:59 - must be unique
171:01 - generally we use the id as a key here
171:04 - so i am specifying
171:06 - prodi dot
171:08 - that means product dot id
171:11 - now that error has been cleared out in
171:14 - the console
171:15 - but the question is that how will you
171:18 - supply the data to the product component
171:21 - so that it can show up the same
171:22 - information
171:24 - inside the product component
171:26 - the data is originally available in the
171:29 - shopping cat component state the same
171:32 - must be supplied to the product
171:34 - component
171:36 - wherever the product component is being
171:39 - invoked
171:40 - there exactly we have to supply that
171:42 - value
171:44 - for example shopping cat component wants
171:46 - to supply id of the product to the
171:49 - product component
171:51 - so
171:52 - it can supply the same
171:54 - as a property here
171:57 - for example id is equal to prod dot id
172:03 - you might be wondering why we have to
172:05 - supply the same id once again because
172:07 - already we are supplying the same in key
172:11 - it's because
172:13 - key is internally used by react and the
172:16 - developer no longer has access to the
172:19 - same to print out
172:21 - that is the reason whichever the data we
172:24 - have to print or access in feature in
172:26 - the product component
172:29 - that must be supplied while invoking the
172:31 - child component
172:33 - so here i am supplying id equal to
172:37 - product dot id
172:39 - this prod is the variable which we are
172:42 - receiving through map error function
172:45 - for the first time the variable prod
172:48 - represents the first product
172:51 - and next time prbod represents the
172:54 - second product
172:56 - and you can give any name instead of pr
172:58 - voting
173:00 - now let us access the same in the
173:02 - product component
173:05 - here i am just adding hash
173:08 - and then followed by actual id
173:11 - how will you access this particular id
173:13 - property which is supplied here
173:16 - all the properties that are supplied
173:18 - from the parent to channel are by
173:20 - default stored in the object literal
173:23 - called props
173:26 - so every child component
173:28 - in fact every component contains a
173:30 - predefined property called props
173:34 - which refers to an object that contains
173:36 - all the property values that are
173:38 - supplied from the parent
173:40 - with this kind of syntax
173:43 - in this case it contains only one
173:45 - property called id
173:48 - let's display the same that is props dot
173:50 - id
173:52 - so as you can see
173:54 - the id has been displayed here as hash
173:58 - of course hash is a constant character
174:01 - or literal character ignore it
174:04 - but this is the actual id value that is
174:07 - supplied from the parent to child
174:11 - so
174:12 - the parent supplies the information to
174:14 - the child by using the properties like
174:16 - this
174:18 - and all those property values are
174:20 - accessible in the channel by using props
174:24 - optionally just for observation you can
174:27 - print it out
174:29 - so in the render method i am just
174:30 - writing console.log of
174:33 - this.props
174:36 - as you can see in the console you can
174:38 - see id
174:39 - equal to 1
174:41 - for the first instance
174:43 - and id equal to 2 for the second
174:45 - instance
174:47 - totally we have six instances of the
174:49 - product component
174:51 - that's why it is showing up six times
174:55 - for one component only one props object
174:58 - exists
175:00 - and notice carefully in the props object
175:04 - you will not see key
175:06 - here key is undefined
175:09 - you can only access id but not key
175:13 - whereas key is internally accessible by
175:15 - react to uniquely identify each instance
175:19 - of the element
175:21 - react identifies which element is being
175:24 - added removed and changed by using key
175:27 - internally
175:30 - but
175:31 - how will you supply multiple values
175:33 - other than id
175:35 - for example i would like to supply the
175:37 - product name
175:40 - that is prod dot product name
175:44 - and also price
175:47 - now
175:48 - we are supplying three values into the
175:50 - props
175:52 - that is ide product name and price
175:56 - all these values are accessible in the
175:58 - product component
176:02 - now switch to product component
176:05 - let's display all that information in
176:07 - the product.jsx file
176:12 - for representation of each product i am
176:14 - using bootstrap card
176:17 - if you are not sure about bootstrap card
176:20 - card is the box or rectangular
176:22 - representation of information
176:24 - where you can render something
176:27 - about a particular person or particular
176:29 - product or something else
176:32 - here each product is represented as a
176:38 - card order to create bootstrap card the
176:42 - class name must be called
176:45 - and inside which we must be having
176:47 - another view tag called
176:49 - called body
176:52 - inside the code body you can write your
176:54 - actual content to show
176:59 - in this case you are taking another div
177:01 - tag
177:03 - with the text muted
177:06 - that means with gray color
177:09 - and then print the static character
177:11 - called hash
177:12 - that means id
177:15 - then how will you access the actual
177:17 - value of the product
177:20 - that is this dot props dot id
177:24 - this property name which you are using
177:26 - here must be same what do you pass from
177:29 - the shopping cat component
177:32 - here you are writing id in lower case
177:36 - you must use the same property name here
177:39 - while rendering in the product component
177:45 - so as you can see
177:47 - each product is represented as a card
177:51 - and in gray color the id has been
177:54 - displayed here
178:00 - and if you can notice
178:03 - each props object contains three values
178:05 - now that is id product name and price
178:10 - so you can access either of these
178:11 - properties through this dot props
178:17 - now continue writing the code in the
178:19 - product component
178:22 - add heading that is h5
178:25 - that is along with padding
178:27 - that means spacing around the content
178:31 - along with border top
178:33 - so top lane border
178:36 - inside which you will display product
178:38 - name
178:41 - and how will you access the product name
178:43 - that is this dot props dot product name
178:49 - and in about case it must be class name
178:51 - but not class
178:55 - so as you can see it displays heading
178:58 - five
179:02 - and i would like to have padding only
179:04 - for top side that is padding top
179:09 - and on the next line i would like to add
179:12 - price
179:14 - dollar as a static character
179:17 - and then dynamically render
179:19 - props.price
179:23 - so the first due tag displays the id
179:26 - and the name and then price of the same
179:31 - so this is the card
179:32 - which displays id
179:34 - name as well as price
179:37 - but there is no any distance or gap
179:39 - between each card
179:42 - let's apply some margin for the card
179:46 - so while rendering the card
179:48 - add m1 or m2 that means margin
179:54 - so there is some distance between each
179:56 - card
179:59 - and by default the cards are displayed
180:02 - line by line
180:03 - how will you render the same side by
180:05 - side
180:08 - in order to do so
180:10 - come back to the shopping cart component
180:14 - while rendering the products
180:16 - we have a due tag right
180:18 - so for this new tag apply the class name
180:21 - called row
180:23 - that means we are taking up a bootstrap
180:25 - row
180:28 - and as per the bootstrap recommendations
180:31 - apply the class name called container
180:33 - fluid for the shopping cat
180:37 - the container fluid manages the default
180:40 - margins of the page
180:42 - this is the code of the shopping cart
180:44 - component
180:47 - now the size of the card is not
180:49 - correctly aligned
180:52 - as you can see it displays all the cards
180:54 - side by side
180:57 - now let us switch to product component
181:00 - that is product.jsx file
181:04 - so already we have created a row in the
181:06 - shopping cart component
181:09 - let us add call lg6
181:11 - that means on the small or larger
181:14 - devices it has to occur six columns out
181:17 - of 12.
181:20 - and let us paste the content of the card
181:22 - inside the call lg6
181:26 - sorry it must be class name
181:30 - and class name must be camel case for
181:32 - the card body
181:36 - so let's check it out
181:39 - as you can see all the products are
181:41 - displayed side by side
181:43 - that means it displays two products in a
181:45 - row
181:48 - but when you switch to smaller devices
181:52 - you can see all the cards displayed line
181:54 - by line instead of
181:56 - side by side
181:59 - it's because we have given call lg 6
182:02 - instead of call 6
182:05 - that means it has to take up 6 columns
182:08 - on the larger or higher devices
182:11 - but by default it occupies 12 columns on
182:14 - the smaller devices
182:17 - so overall the shopping cat component is
182:20 - the parent component that invokes
182:23 - product component as a child
182:26 - and in the chain component called
182:28 - product component we grab the
182:30 - information from the parent by using
182:32 - this.props
182:35 - this dot props is the built-in property
182:38 - in the product component
182:40 - that contains the list of properties
182:42 - that are supplied from the parent
182:44 - while invoking the child
182:52 - so every component contains two things
182:54 - that is props and straight
182:57 - so what's the difference
182:59 - props is the set of values that is
183:02 - supplied from the parent component while
183:05 - invoking the child component
183:08 - see in this case
183:10 - in the shopping cat component
183:12 - we are invoking the jail component
183:14 - called product
183:16 - so
183:17 - whatever the properties that are
183:19 - supplied here
183:20 - is called as props for the jail
183:22 - component called product
183:25 - but state is the own and private to the
183:29 - same component itself
183:31 - the state of one component cannot be
183:34 - accessible from other component
183:38 - so even the shopping cat component is
183:40 - the parent and the product component is
183:42 - the chilled
183:44 - each component has its own state
183:48 - and one component cannot access the
183:50 - state of other
183:52 - component for example in the child
183:55 - component called product component
183:59 - if there is some state value for example
184:01 - x equal to 100
184:04 - this value is private and
184:06 - own information of the same component
184:09 - cannot be influenced from other
184:11 - component
184:14 - that is the difference between straight
184:16 - and props
184:19 - and another difference is
184:21 - props is always be read only but state
184:24 - can be read and write
184:27 - so as a developer you cannot change the
184:29 - value of the props
184:32 - but you can anytime update the state by
184:34 - using set state method
184:37 - for example if you write a statement
184:39 - such as this dot props dot id equal to
184:43 - 100
184:44 - and execute the same application
184:48 - you are getting an error saying that
184:49 - cannot ascend to read only property
184:51 - called idea of object
184:55 - that's because
184:56 - props always be read only
185:00 - so that is what i'm trying to say
185:02 - you cannot modify the value of props
185:05 - that always comes from the parent
185:07 - component to channel component
185:10 - but state can be anytime changed by
185:13 - using set state method
185:17 - of course you should not assign the
185:19 - value of the state property directly
185:22 - you must use a set state method only
185:24 - because
185:26 - every time when you use the set state
185:28 - method
185:29 - internally react calls the render method
185:32 - to reflect the same information into the
185:35 - browser dom
185:38 - and in our application
185:40 - instead of printing the props value
185:42 - directly in the expressions
185:44 - you can take up this information into
185:46 - the state
185:48 - so that if needed you can modify the
185:50 - same later
185:53 - to do so
185:54 - let's declare the properties in state
185:57 - that is for example id
186:00 - get the value of the props
186:03 - and assign the saving to state dot id
186:08 - in the same way you can repeat name
186:10 - equal to that is product name equal to
186:13 - this dot props dot
186:15 - product name
186:17 - and in the same way price
186:21 - so as you can see the product component
186:23 - state has three properties that is id
186:25 - product name and price
186:28 - let's render the same here instead of
186:30 - this third props
186:32 - we are writing this dot state dot id
186:36 - same with
186:37 - this.state.productname
186:39 - and this.price
186:43 - now this state can be updated within the
186:46 - same child element
186:49 - the benefit here is that
186:51 - if required the jail component can
186:54 - update the state but it doesn't affect
186:57 - the parent one
187:00 - and output remains same
187:03 - that is id
187:04 - name as well as price
187:09 - and let me reduce the padding top as
187:11 - padding 2
187:13 - that is pt2
187:17 - and there is another alternative for the
187:19 - same
187:20 - instead of passing loose values from the
187:22 - parent component to jail component
187:25 - you can pass the whole product object at
187:27 - a time
187:28 - which includes id product name and price
187:33 - let's try this
187:36 - let me supply product
187:38 - instead of individual properties
187:42 - that is
187:43 - just directly past the parametric or
187:46 - product that is prod
187:50 - in this case the props contains only one
187:52 - property called product
187:55 - so props is an object that contains only
187:58 - one property called product
188:01 - and that refers to the complete product
188:03 - object include id product name price
188:07 - quantity
188:10 - so as per the props point of view only
188:12 - one property is there that is product
188:16 - and it is an object
188:20 - now let's update the code of the product
188:22 - component accordingly
188:25 - switch back to the product component
188:29 - instead of accessing this dot props dot
188:31 - id
188:32 - you should access this dot props dot
188:35 - product dot id
188:38 - here the property name product
188:40 - is supplied
188:42 - in the parent component
188:46 - and let's continue the same for
188:48 - remaining properties
188:50 - that is this.props.product.productname
188:54 - and so on
188:57 - and it's working as expected in the
188:59 - output
189:03 - so the props contain a property called
189:05 - product
189:07 - which refers to an object which contains
189:09 - id product name price and quantity
189:14 - and there is alternative way for the
189:16 - same
189:18 - instead of copying each individual value
189:20 - into the state
189:22 - you can also have single property called
189:25 - product in the state
189:28 - so in the product component
189:31 - we have only one property in the state
189:34 - that is product
189:36 - that refers to directly this dot prompts
189:38 - that product
189:40 - so you need not have individual
189:42 - properties for id name and price
189:46 - so in this case while rendering
189:49 - you should write like this dot state dot
189:51 - product dot id
189:54 - because
189:55 - in the state you have only one property
189:57 - called product
189:59 - that is equal into product property that
190:02 - you supply from the parent
190:05 - and this dot props dot product is
190:07 - equivalent to product object from the
190:10 - product array
190:11 - which contains id product name price and
190:14 - quantity
190:17 - you can access the complete object
190:20 - through this dot state dot product
190:23 - that is why you are writing this dot
190:26 - state dot product dot id
190:29 - and update the same for product name and
190:32 - price
190:33 - so there are multiple ways to supply and
190:36 - receive the information from parent to
190:38 - child
190:40 - so overall which is best policy
190:44 - either supplying individual values or
190:46 - supplying the whole product object at a
190:48 - time
190:51 - see
190:52 - if you want to supply the complete
190:54 - object including all the properties
190:56 - without adding anything to the chain
191:00 - then this approach will be better
191:03 - but
191:04 - if you wish to supply only set of
191:07 - properties but wants to hide some sort
191:09 - of properties
191:11 - in that case
191:12 - the previous approach would be better
191:16 - for example the parent wants to supply
191:19 - only id and product name but don't want
191:21 - to supply the price and quantity
191:25 - in that case supplying individual
191:27 - properties is the better choice
191:30 - but in our application right now
191:32 - i don't want to hide any information to
191:35 - the child
191:37 - in that case supplying the whole object
191:40 - at a time like this is the better choice
191:44 - so overall in the shopping cat component
191:47 - we are supplying the complete product
191:49 - object
191:50 - while invoking the chill
191:53 - and this property called product is
191:55 - accessible as this dot property product
192:00 - and its reference is stored in the state
192:02 - dot product in the chain component
192:06 - so this is how it is working as of now
192:15 - while invoking the chain component the
192:18 - parent component can supply a set of
192:20 - html tags
192:22 - as content to the jail component
192:26 - see currently we are in the shopping cat
192:29 - component
192:30 - and here exactly we are invoking the
192:32 - child component called product
192:35 - so
192:36 - in between the opening and closing tag
192:38 - of the product
192:40 - you can actually supply some html tag
192:43 - and that is called
192:44 - content for example here i am writing
192:48 - some html tag such as h1 hello
192:53 - this is called as content that is
192:55 - supplied to child
192:57 - apart from the
192:59 - so
193:01 - the parent can supply two types of
193:03 - information to the child
193:05 - that is props as well as content
193:10 - in the previous lectures we are able to
193:12 - receive the props and print the same in
193:14 - the respective chain
193:17 - but
193:18 - how will you render this particular
193:19 - content in the child
193:23 - it is as simple as this dot props dot
193:25 - children
193:28 - for example
193:29 - in the product component
193:31 - that is inside the
193:33 - shoppingcat.jsx file
193:35 - i am trying to render a button
193:38 - with class name of btn and btn primary
193:42 - that means blue color
193:45 - and for example i am trying to add by
193:47 - now
193:49 - so i am supplying the button from the
193:51 - parent to channel
193:54 - so how will the child render the same
193:58 - by default it's not rendered in the
194:00 - channel anywhere
194:03 - so you cannot see any buy now button by
194:05 - default in the channel component
194:08 - but how will you render the same
194:12 - now switch to the channel component that
194:14 - is product.jsx
194:18 - you decide the place where exactly you
194:20 - wish to render the same
194:23 - for example
194:24 - below the price as the
194:27 - card footer i would like to render the
194:29 - same
194:31 - so
194:32 - after closing the card body
194:38 - you try to start something called card
194:40 - footer
194:43 - inside the card footer i would like to
194:45 - render that particular button
194:49 - and that button must be right side so i
194:51 - am trying to add text right
194:55 - so inside the card footer
194:59 - i am trying to enter something called
195:01 - this dot props dot
195:03 - children
195:05 - here children is a predefined property
195:08 - in props
195:09 - which represents the content that is
195:11 - supplied from the parent
195:14 - before a moment we are supplying the
195:16 - button from the parent isn't it
195:19 - so this particular button tag is
195:21 - represented as
195:23 - this dot props dot children
195:25 - in the channel component
195:28 - let's check it out
195:30 - as you can see in the folder you can see
195:33 - something called
195:34 - buy now
195:36 - and the same reflects in the this.props
195:39 - in the console.log as well
195:43 - so the props has a property called
195:45 - children
195:46 - which represents the react element of
195:48 - the button
195:51 - so this is the react element
195:53 - and type equal to button
195:57 - and of course we also have product
195:59 - object along with children
196:03 - this is how a parent component supplies
196:06 - content to child component
196:08 - and chill component renders the same
196:11 - anywhere in the desired place
196:19 - here the question is
196:21 - how to handle the events of chill
196:23 - elements in the parent component
196:27 - for example in the chain component that
196:29 - is product component
196:31 - there is some button
196:33 - and i would like to handle the click
196:35 - event of that button in the parent
196:37 - component called shoppingcat component
196:41 - so how to do that
196:45 - first let's create the button
196:48 - in the card folder
196:54 - i am taking two boxes that is left side
196:56 - and right side
196:58 - with the float left and float right
197:03 - and in the right side box i am trying to
197:05 - place the this dot props to children
197:09 - and that represents the actual buy now
197:11 - button
197:14 - and inside the float left
197:20 - here i would like to add plus and minus
197:23 - buttons for the quantity
197:26 - first let me take a span tag
197:29 - with
197:31 - badge
197:33 - and let's render the quantity
197:36 - that is this.state.product.quantity
197:41 - and the default value of quantity is by
197:43 - default 0 as per the array
197:47 - and this must be class name but not the
197:49 - class
197:52 - and after the badge i would like to add
197:55 - two buttons
197:56 - as a button group
198:04 - the first button is for plus
198:07 - and second button is for minus
198:12 - and let me remove this text right css
198:15 - class
198:18 - all right
198:20 - so we have two buttons that is a plus
198:23 - and minus
198:25 - by clicking on the plus button i would
198:27 - like to increase this value
198:30 - and minus for decrementing the quantity
198:34 - but instead of handling the kick event
198:37 - of these buttons inside the same
198:39 - component class that is the jail class
198:41 - component
198:43 - i want to handle the click event of
198:44 - these buttons in the parent component
198:47 - that is
198:48 - shoppingcat component
198:51 - so how to do that
198:54 - let's switch back to the shopping cart
198:56 - component
198:59 - and after completion of the render
199:00 - method
199:04 - let's add another method here
199:07 - that is for example handle increment
199:11 - equal to an error function
199:16 - so this particular error function should
199:17 - be executed when we click on the plus
199:20 - button over there
199:23 - and let me add another method called
199:25 - handle decrement
199:28 - and this must be executed when we click
199:30 - on the minus button over there
199:34 - and i would like to pass these two
199:36 - methods as props
199:39 - so
199:40 - while invoking the chill component that
199:42 - is product component
199:45 - let's supply
199:47 - on increment equal to
199:50 - this dot handle increment
199:54 - that means
199:55 - hl component i am giving you a method
199:58 - called on increment
200:01 - so that you can use this method in order
200:04 - to handle the event in the child
200:06 - component
200:09 - in the similar way let me supply handle
200:12 - decrement
200:18 - so these methods are available as on
200:21 - increment and on decrement properties
200:24 - inside the district props of jail
200:26 - component
200:29 - so
200:29 - let's go to product component that is
200:31 - the chill component
200:35 - now you have access to this dot props
200:37 - dot on increment and on decrement
200:42 - see in the browser console also
200:45 - you can check the props
200:47 - it contains on increment as well as on
200:50 - decrement
200:51 - and those are the
200:54 - functions let's handle the click event
200:57 - of the buttons
200:58 - and bind these methods that is on
201:00 - increment and on decrement respectively
201:03 - for these two buttons
201:07 - so
201:08 - in the product component
201:10 - for the first button
201:13 - on click
201:15 - that is equal to
201:17 - this dot props dot
201:20 - on increment
201:23 - in the same way for the second button
201:27 - on click equal to
201:30 - this dot props dot on decrement
201:35 - notice the name it is not handle
201:38 - increment and handle decrement but it is
201:41 - on increment on decrement
201:44 - the actual method names that is handle
201:47 - increment and handle decrement is not
201:49 - the matter here
201:51 - because
201:52 - the names that you mentioned here is
201:54 - considered to be a part of the props
201:58 - so only these property names must be
202:00 - used here in the props but not the
202:03 - actual method names
202:06 - so
202:07 - let's add some console.log bases in the
202:10 - handle increment and handle decrement
202:13 - inside the shoppingcat component
202:17 - so this is handle increment
202:23 - and this is handle decrement
202:26 - let's check it out
202:28 - i clear the console
202:30 - and click on any one of these buttons
202:33 - as you can see
202:34 - it calls handle increment method
202:37 - that is created in the parent component
202:42 - actually click event was raised in the
202:44 - channel component
202:46 - but the corresponding method of the
202:48 - parent component executes
202:52 - in the same way if you click on the
202:54 - minus button you can see the handle
202:56 - decrement method executes
203:00 - this is how you handle the click event
203:03 - of the jail component
203:04 - in the parent component
203:09 - that means the events are originally
203:11 - raised in the child component
203:15 - and those are handled in the parent
203:17 - component
203:20 - but here the question is that
203:22 - how will you supply the information that
203:25 - means arguments to the even handler
203:27 - methods
203:30 - so in the click event of the jail
203:32 - component
203:34 - i would like to supply the arguments to
203:35 - the parent component method
203:38 - anytime when you are trying to pass
203:41 - event arguments you must be using error
203:43 - function right
203:45 - so make this as error function
203:48 - and then you can call the method instead
203:51 - of mentioning the method name
203:55 - and then you can supply essential
203:57 - argument values that you want
204:00 - for example i would like to supply the
204:03 - complete product object reference
204:05 - that is present under this dot state
204:08 - so i am supplying the argument of this
204:11 - dot state dot product
204:13 - to the on increment method
204:17 - so when the user clicks on this
204:19 - particular plus button
204:21 - first of this error function execution
204:23 - starts
204:24 - as a part of that
204:26 - we are calling the on increment method
204:28 - of the parent
204:31 - and supplying the current product
204:32 - information
204:34 - as argument to that particular method
204:39 - and let's remove the same in the
204:41 - respective shopping cat component
204:44 - now i am inside the shopping cat
204:47 - component that is a parent component
204:51 - let me remove the product
204:54 - and display the same for our information
204:56 - in the console.log
205:01 - let's repeat the same for remaining
205:02 - other method that is handle decrement
205:06 - so switch to product component
205:11 - make this click event as error function
205:16 - and
205:17 - call the handle decrement method
205:20 - and then supply this dot state dot
205:22 - product as argument
205:25 - means you are supplying the current
205:27 - product object as argument to the
205:30 - respective method
205:33 - and then switch to shopping cat
205:36 - component
205:37 - let's receive the same product
205:41 - and display the same in the console.log
205:47 - so overall the kick event raises in the
205:49 - chain component that is product
205:51 - component
205:53 - you are calling the method of the parent
205:56 - and supplying the current product as
205:58 - argument to the same
206:02 - so let's execute this
206:05 - i am clearing the console
206:07 - and click on plus button for any
206:09 - component
206:11 - so i click on plus button here
206:14 - as you can see it invokes handle
206:16 - increment
206:18 - and has reference to the product
206:21 - that is the product which you click here
206:26 - in the same way if you click on minus
206:28 - button for the same
206:31 - it calls handle decrement
206:33 - and has referenced of the same product
206:38 - so you can access the same values that
206:40 - is id product name price and quantity
206:44 - and even if you want you can update the
206:46 - same
206:49 - let's write
206:50 - i wish to really update the quantity
206:52 - value
206:53 - so by default it is zero
206:56 - let's either increment or decrement it
206:58 - based on the button
207:02 - now switch to the shoppingcat
207:04 - component.jsx file
207:08 - how will you update the quantity
207:11 - if you write like dot quantity equal to
207:15 - quantity plus 1 it doesn't work really
207:20 - because
207:21 - react will not re-enter the information
207:24 - when you directly assign the value into
207:26 - a specific property or specific array
207:31 - check the output
207:33 - i click on the plus button here
207:36 - nothing increments
207:39 - but
207:40 - internally the property value is being
207:42 - updated every time
207:46 - but it doesn't reflect in the real
207:47 - output
207:49 - it's because every time when you are
207:52 - expecting some change in the output
207:55 - that means expecting some change in the
207:57 - state
207:58 - you must use set state method
208:03 - you should not update the value of any
208:05 - property directly in the state
208:09 - how can you do that
208:12 - first we have to identify the reference
208:14 - of this product object
208:16 - in the products array which you got here
208:21 - in order to do so let's use index of
208:24 - method of the javascript arrays
208:28 - before then that let's clone
208:31 - the products array into a local variable
208:36 - for example all products equal to
208:40 - just clone everything of this dot state
208:43 - dot products
208:46 - in ecmascript 2015
208:50 - the spread operator that is three dots
208:52 - gets all elements from the particular
208:54 - array
208:56 - so
208:57 - all the elements of this particular
208:59 - array will be copied into a new array
209:02 - into this particular reference
209:04 - variable that means we have a clone of
209:07 - this array into this new variable
209:11 - so
209:12 - from this clone
209:15 - you have to search for
209:17 - a specific product by using index of
209:20 - method
209:23 - index of the product parameter that you
209:26 - receive from the child component
209:30 - so this method gives you the actual
209:33 - index of this specific product
209:37 - and let's print the same
209:41 - let's check the output as of now
209:44 - i clear the browser console
209:47 - and click on any one plus button here
209:52 - as you can see it displays the index
209:54 - that is true
209:56 - that means we have clicked on the
209:58 - product at index number two
210:02 - so we have the index with us
210:06 - based on the index you can access the
210:08 - specific element directly from the array
210:10 - right
210:13 - that means from this array
210:15 - we can access the index number 2 that is
210:18 - samsung
210:19 - qled tv
210:24 - so the same array has been cloned into
210:26 - all products right
210:29 - so you can access
210:31 - all products of
210:33 - index
210:37 - so overall you are fetching the product
210:40 - object based on the index
210:46 - let's check the output as of now
210:51 - i clear the browser console
210:54 - and click on the plus button for xbox
210:58 - as you can see you can access the
211:00 - product object based on the index
211:06 - now in this object you have to apply the
211:08 - quantity value
211:12 - so
211:13 - you should write like
211:17 - all products of index dot quantity
211:21 - plus plus
211:23 - because you want to increment the value
211:29 - and this particular quantity has been
211:31 - updated in the clone
211:34 - of the array
211:35 - but not in the original array
211:39 - the state still contains the old
211:41 - information before updating
211:46 - so how will you update these changes
211:48 - into the actual state
211:50 - that should be done only by using set
211:53 - state method of the component
211:56 - so this dot set state
211:59 - and which property wish to update
212:02 - products
212:04 - and what is the new information that is
212:06 - all products
212:09 - and notice now this all products array
212:12 - contains the updated quantity which is
212:14 - incremented here
212:18 - so the complete array will be
212:20 - overwritten
212:22 - in this place of products property
212:26 - so that react compares the actual value
212:29 - which is really updated
212:31 - and
212:32 - updates the same exactly in the browser
212:34 - dom
212:35 - instead of re-render the same
212:39 - so if you think the complete product
212:43 - details will be updated in the browser
212:44 - dom it is wrong
212:47 - it really compares which value really
212:50 - updated
212:51 - only that specific information will be
212:54 - reflected in the respect to browser dom
212:59 - so as you can see
213:02 - switch to elements in the developer
213:04 - tools
213:06 - and right click on your plus button and
213:09 - say inspect
213:11 - now you are pointing to plus button of
213:13 - the particular element
213:16 - and try to click on the plus button
213:18 - there
213:20 - as you can see it really updates only
213:23 - the number two instead of one
213:27 - i keep clicking the plus button every
213:30 - time it updates only span so it
213:32 - highlights only the span tag but not any
213:35 - other html tag
213:38 - so that's what react will do it updates
213:40 - only the specific html tag instead of
213:43 - re-entering the complete browser dom
213:48 - anyways here you can see the change in
213:50 - the quantity
213:53 - so overall what are you trying to do is
213:55 - that
213:57 - first user clicks on the button of the
213:59 - channel
214:00 - that is plus button for example
214:04 - then you are invoking the on increment
214:06 - method of the parent
214:08 - and supplying the current product as
214:10 - argument for the same
214:13 - now in the shopping cat component that
214:16 - is parent component
214:18 - the handle increment method executes
214:22 - and you receive the product object as
214:25 - argument which is supplied by the child
214:30 - then you clone the complete products
214:32 - array into all products variable
214:36 - then get the index of the supplied
214:38 - product argument
214:42 - example you got the index number two
214:45 - and
214:46 - update the value directly in that
214:48 - quantity property
214:52 - and overwrite the changes in the state
214:54 - by using only set state method
214:58 - this is how you update the state
215:02 - let's clean up the code that is remove
215:05 - the console.log statements
215:16 - now let us repeat the same logic for the
215:19 - handle decrement method also
215:23 - here the logic remains same
215:26 - only the difference is
215:28 - instead of you write plus plus you are
215:30 - writing minus minus
215:33 - so i just copy and pasted the same code
215:36 - instead of plus plus
215:38 - i am writing minus minus
215:42 - so let's re-execute the same
215:46 - now you can use plus button to increase
215:48 - the value of the quantity
215:51 - and you can use minus button for
215:53 - decreasing the quantity
215:58 - but there is a small issue here
216:01 - if you keep clicking minus button
216:05 - it becomes unlimited
216:08 - it goes negative value as well
216:12 - and another issue is that
216:15 - if you keep clicking plus button there
216:18 - is no upper limit so it increments up to
216:21 - unlimited number
216:23 - suppose you want to keep upper limit for
216:25 - the quantity increment
216:28 - suppose
216:29 - you wish it should be maximum 10
216:33 - so how will you keep validation that is
216:35 - minimum 0 and maximum 10
216:40 - so before increasing or decreasing we
216:43 - have to check the condition
216:45 - if the condition is matching that means
216:48 - if it is between 0 to 10
216:50 - then only it must be incremented or
216:52 - decremented respectively
216:56 - but what if you want to change it in
216:58 - future
217:01 - let's say the child wants to supply the
217:03 - minimum and maximum value
217:06 - and accordingly the parent should work
217:09 - so instead of hardcoding the minimum and
217:12 - maximum values in the parent component
217:15 - lets chill dynamically supply the same
217:20 - so
217:21 - while calling on increment method from
217:23 - the child component
217:25 - let's pass the argument value
217:29 - currently i am writing the code in the
217:31 - chain component that is product
217:33 - component
217:35 - in the click event of the plus button
217:39 - while calling the on increment method
217:42 - let's supply some argument value
217:45 - that is the maximum value for
217:47 - incrementation
217:50 - suppose maximum value for example 10
217:54 - so that in future whatever the maximum
217:57 - value that child requires it can supply
218:02 - you can change it later for example 20
218:05 - or 30.
218:07 - and in the similar way let's supply
218:10 - minimum value for decrementation
218:13 - let it be 0 for example
218:18 - so
218:18 - on increment has two arguments that is
218:21 - the reference of the current product and
218:24 - max value
218:26 - and on decrement method has two
218:28 - arguments one is reference of the
218:31 - current product
218:32 - and minimum value for the quantity
218:38 - let's receive the same in the parent
218:40 - component that is shopping cat component
218:44 - so switch to shoppingcat component
218:50 - here in the arguments you can receive
218:52 - something called max value
218:57 - and in the handle decrement you can
218:59 - receive the min value
219:02 - in the handle increment method
219:04 - before incrementation let me check
219:11 - if the quantity value is
219:14 - less than the max value
219:17 - then only we have to increment it and
219:20 - update the state
219:22 - otherwise you need not increment and you
219:25 - need not
219:26 - set the state
219:29 - so there is no need of else case
219:32 - whenever the quantity is less than the
219:35 - max value
219:36 - then only the quantity must be
219:38 - incremented and update the state
219:43 - similarly let me check the condition in
219:45 - the handle decrement method also
219:50 - if the current quantity of the current
219:52 - product is
219:54 - greater than the min value
219:58 - then only we have to decrease the value
220:00 - and update the state
220:03 - otherwise nothing need to be done so
220:05 - there is no else case for the same
220:10 - now let's check the output
220:15 - so i click on the plus button it keeps
220:18 - incrementing up to 10
220:21 - but after that even though i click on
220:24 - plus button there is no any change in
220:26 - this output
220:28 - because we checked the condition before
220:30 - real incrementation
220:35 - and in the same way let's use the minus
220:37 - button
220:39 - so 10 becomes 9
220:40 - and so on
220:42 - up to 0.
220:45 - and after 0 it should stop right
220:49 - but in this case it is working even for
220:52 - -1
220:54 - but after that i cannot decrement
220:58 - anyways let's fix this issue of minus 1
221:04 - here
221:05 - unwantedly i have just added equal to
221:10 - so it should be if quantity is greater
221:12 - than min value then only it must be
221:15 - decremented
221:16 - but not for equal to
221:20 - let's try again
221:23 - so i click on minus button
221:26 - see there is no change in the value
221:28 - because
221:30 - the minimum value is 0 here
221:33 - you can increment
221:35 - by using plus up to 10
221:38 - and decrement the value
221:41 - and in the same way you can try updating
221:43 - all remaining quantity of all the
221:45 - products
221:48 - it works as expected
221:52 - this is how you handle the events of the
221:54 - channel by using parent component
222:03 - now i would like to create delete button
222:06 - for each product
222:08 - so if i click on the delete button for
222:11 - the product that product must be deleted
222:13 - from the list
222:16 - in order to do so let's display the into
222:19 - mark that means delete mark by using
222:21 - font awesome package
222:25 - as of now we have not yet imported font
222:27 - awesome package
222:30 - so let's install the same first
222:33 - open the command prompt window and
222:35 - locate
222:37 - secure and react my first app
222:41 - and install the package called font
222:43 - awesome
222:45 - that is by using npm install font
222:48 - awesome hyphen f and seo
222:51 - font awesome is one of the third party
222:53 - packages which provides plenty of icons
222:56 - which can be used in the applications
222:59 - such as error marks plus symbol
223:02 - and many more icons
223:05 - this is the official site of 1000 that
223:07 - is fontousam.com
223:09 - here you can search for icons whatever
223:11 - you wish
223:13 - for example i am just writing
223:15 - arrow
223:17 - you can see plenty of icons of arrow
223:20 - here
223:23 - some of the icons are free and some
223:25 - other or pro version
223:27 - that means requires payment
223:31 - anyways let's use the free icons for
223:34 - timing
223:36 - and when you install this particular
223:38 - package
223:39 - it provides
223:41 - 1000.css file on your node underscore
223:43 - modules folder
223:46 - let's import the same
223:49 - so
223:50 - i am writing the code in the index.js
223:52 - file
223:53 - after importing your bootstrap
223:57 - import
223:58 - 4000 package
224:02 - and under css folder
224:04 - import font thousand dot css file
224:08 - so now you have successfully integrated
224:10 - font awesome in your application you are
224:13 - ready to use any icon from the same
224:17 - now go to the channel component that is
224:20 - product component
224:23 - at the top of the card
224:25 - that means here i would like to display
224:28 - the delete button
224:29 - towards the right
224:33 - that means i would like to show a delete
224:36 - button at the top right corner of the
224:38 - card
224:41 - so after printing id of the product
224:45 - let's add a span tag
224:48 - and that must be present
224:51 - at the right side so pull right
224:55 - and use the font also
224:59 - so by using font awesome you're
225:01 - displaying the into mark that is fe
225:04 - hyphen times
225:07 - so this displays the interval that that
225:10 - means delete button
225:11 - at the top right corner of the each
225:13 - product
225:16 - let's apply hand symbol that means hand
225:18 - icon when you hover on the same
225:23 - so
225:24 - switch to the css file that is index.css
225:28 - let's add a custom class that is hand
225:31 - hyphen icon
225:33 - with cursor pointer
225:36 - it is the user defined css class
225:40 - and already we have imported index.css
225:43 - file in the index.js file
225:47 - so straight away we can use that class
225:50 - in the product.jsx file
225:54 - so in the span tag here
225:57 - let's add the class name that is hand
225:58 - hyphen icon
226:00 - so that you can see hand icon when you
226:04 - hover on the same
226:08 - now when the user clicks this i would
226:10 - like to execute some method in the
226:12 - parent component
226:14 - just like what we have done in case of
226:16 - press and minus buttons
226:20 - so go to the parent component that is
226:23 - shopping cat component
226:26 - after completion of the handle increment
226:28 - method
226:29 - let's add one more method
226:32 - that is handle delete
226:40 - and let us receive the product object as
226:43 - argument
226:45 - and let's get the index of the product
226:47 - just like above
226:50 - based on the index we have to delete the
226:53 - corresponding product isn't it
226:59 - so
227:00 - all products dot supplies
227:04 - of index comma 1
227:06 - that means starting from the specified
227:09 - index
227:10 - one element will be removed in the all
227:12 - products array
227:15 - now we have to reflect the same changes
227:18 - in the
227:19 - state dot products
227:21 - that is done by using set state method
227:23 - right
227:25 - so this is the statement for the same
227:29 - if you think like you want to remove the
227:31 - element directly in the state dot
227:33 - products it never happens
227:36 - you need to clone the array into all
227:38 - products variable
227:41 - and you need to remove the element in
227:43 - the all products
227:45 - and overwrite the same changes into the
227:47 - state dot products
227:49 - that is by using set state method
227:53 - this is how it works
227:56 - now let us call this particular method
227:59 - in the click event
228:00 - of the child
228:03 - before than that
228:05 - the parent has to supply this particular
228:07 - method reference
228:08 - while invoking the child here
228:13 - so while invoking the product component
228:17 - you need to supply the reference of the
228:19 - handle delete
228:21 - as for example on delete
228:26 - here handle delete is the actual method
228:28 - name
228:30 - and on delete is just reference name for
228:32 - the same which is represented in the
228:35 - props
228:37 - you can use the same name in both cases
228:40 - or you can use different name for
228:42 - avoiding the confusion
228:45 - so in the chilled component props
228:48 - you can see the properties such as on
228:50 - increment on decrement and on delete
228:54 - but actual method names are handle
228:56 - increment handle decrement and handle
228:59 - delete respectively
229:03 - and now you can use this property
229:06 - in the child
229:08 - component now switch to the channel
229:11 - component that is product component
229:15 - near the span tag let's apply the on
229:18 - click event
229:21 - so when the user clicks on this delete
229:23 - button
229:25 - have an error function
229:28 - and there you can invoke the
229:31 - props dot on delete
229:34 - and supply essential argument of product
229:38 - that is this dot state dot product
229:42 - so when the user clicks on this
229:44 - particular span tag
229:46 - you are calling on delete method that is
229:49 - on handle delete method
229:51 - in the parent component
229:53 - and supply in the current product as
229:55 - argument
229:57 - which will be eventually deleted
229:59 - in the parent component itself
230:03 - so let's run this so if you click on the
230:07 - plus button over here
230:09 - you can see the same has been deleted
230:13 - you can click any delete button of all
230:16 - the products
230:18 - so whichever the delete button you click
230:21 - the same is being removed from the
230:23 - parent component
230:26 - how does it work
230:29 - so
230:30 - first user clicks on the delete button
230:32 - in the channel component
230:35 - and you are calling the on delete method
230:37 - of the parent
230:38 - and supplying the current product
230:41 - so in the parent component in the handle
230:44 - delete method
230:46 - you are receiving the currently clicked
230:47 - selected product
230:50 - and
230:51 - removing the same element based on the
230:54 - index in the all products
230:57 - and overwriting the updated all products
231:00 - in the state dot products
231:02 - then react compares the previous state
231:05 - and this state
231:08 - and identifies the changes
231:10 - it identifies that the specific object
231:13 - has been deleted from the array
231:16 - and accordingly
231:18 - it will re-execute the map method
231:20 - so that the corresponding element will
231:23 - be removed from the array
231:26 - this is how when you click on delete
231:28 - button the corresponding element is
231:30 - being removed from the dom
231:34 - but suppose you would like to show a
231:36 - confirmation dialog box before deleting
231:39 - how can you do that
231:42 - so in the handle data method in the
231:44 - parent component that is shoppingcat
231:47 - component
231:50 - let's add something called conform
231:54 - with message or reshore to delete
231:59 - that is exactly window.confirm
232:03 - so if the user clicks on the ok button
232:06 - then this confirm method returns true
232:10 - then you are removing the element and
232:12 - updating the state in the current
232:14 - component
232:16 - otherwise you are not deleting anything
232:19 - so there is no need of any else case
232:23 - let's re-verify the same
232:26 - so i click on delete button for the
232:29 - first one
232:30 - and it is asking me our show to delete
232:35 - if i click on ok
232:36 - then only it removes
232:40 - but next time i click on cancel
232:43 - it's not removing anything
232:45 - it remains same as it is
232:49 - this is how you delete the elements of
232:51 - the jail components from the parent
232:54 - component
233:02 - react is responsible to render the
233:04 - components and manage the component at
233:07 - run time
233:08 - that means react is responsible to
233:10 - completely manage the life cycle of the
233:13 - components
233:16 - during the execution of the components
233:18 - react executes some predefined methods
233:21 - internally at different phases
233:24 - and those are called as life cycle
233:26 - phases
233:29 - totally every react component contains
233:32 - four phases
233:33 - that is mounting phase
233:35 - updating phase
233:37 - unmounting phase
233:39 - and error handling phase
233:41 - at each phase of the component different
233:44 - methods will be executed
233:48 - the developer can use those methods
233:50 - in order to manage the component
233:53 - and load the information from the server
233:56 - and also make the component re-render or
234:00 - avoid re-entering the component
234:02 - wherever it is not necessary
234:06 - so it is necessary for the developer to
234:08 - know what methods will be executed at
234:10 - which phase
234:12 - and what kind of code can be written at
234:14 - each method
234:18 - mounting phase is the phase
234:20 - where the instance of the component is
234:22 - being created and rendered for the first
234:25 - time into the dom
234:28 - for example you have a component called
234:30 - shoppingcat component
234:32 - when you execute that particular
234:34 - shopping cat component
234:36 - the shopping cat component will be
234:38 - mounted
234:39 - that means rendered on the browser
234:43 - during that process the mounting phase
234:45 - will be executed
234:48 - as a part of that
234:50 - three methods will be executed of your
234:52 - component class
234:54 - that is constructor
234:55 - render
234:56 - component did mount
234:59 - execute in the same order as they
235:01 - mentioned
235:04 - every time when the property value or
235:06 - state is changed
235:08 - the updating phase will trigger out
235:12 - in this case render component did update
235:15 - will be executed
235:18 - and at the time of leaving or closing
235:21 - the application
235:22 - the unmounting phase will be executed
235:26 - generally this happens only when the
235:28 - routing is enabled
235:30 - and the user navigates to another route
235:33 - from the current route
235:36 - or it also executes whenever the parent
235:39 - component removes the instance of child
235:41 - component
235:44 - and finally the error handling phase
235:46 - will be executed
235:48 - whenever react identifies an error
235:51 - during the rendering or life cycle
235:53 - method
235:54 - or constructor of the child component
235:58 - for example we have a shopping cat
236:00 - component which contains children of
236:03 - product components
236:05 - while executing any one of the product
236:07 - component it has an error
236:10 - so that leads to error handling phase of
236:13 - the shopping cat component
236:16 - or during the render method of the
236:18 - shopping cart component itself there is
236:20 - an error
236:22 - at that moment also error handling phase
236:25 - of the shopping cat component occurs
236:28 - in this phase only one method that is
236:31 - component date cache method executes
236:36 - if you can check react docs
236:38 - there are some additional methods that
236:40 - you can identify
236:42 - for example get derived state from props
236:45 - etcetera
236:47 - but those methods are noted as extremely
236:50 - rarely user methods by react docs itself
236:55 - here we are focusing on only the methods
236:58 - that are really useful and frequently
237:01 - used in the real world applications
237:04 - so 90 percent of the times we use these
237:07 - methods in the real world applications
237:10 - so how and when we use these respective
237:13 - methods at different phases
237:17 - we will understand about each phase by
237:19 - lecture will lecture in this section
237:26 - first let me demonstrate mounting phase
237:29 - to you
237:31 - as a part of the mounting phase the
237:33 - constructor render and component did
237:35 - mount methods will be executed in the
237:37 - same sequence
237:40 - the constructor is suitable for
237:42 - initialization of the state
237:44 - and binding the event handler methods
237:48 - but
237:48 - what you should not do in the
237:50 - constructor is that
237:51 - you should not make http requests or
237:55 - fetch the data from database or
237:57 - something
237:59 - in the render method you should not
238:01 - update any changes to the props or state
238:05 - that means you should not use set state
238:07 - or anything like that in the render
238:09 - method
238:11 - but the render method should return the
238:13 - ui
238:14 - as html element
238:17 - and the component did mount method
238:19 - executes
238:20 - after execution of the constructor
238:23 - render
238:24 - and the complete lifecycle of all the
238:27 - children
238:29 - let me demonstrate all these three
238:31 - practically
238:33 - so we are taking the example of shopping
238:35 - cat component and the product component
238:39 - here shopping cat component is the
238:41 - parent
238:42 - in which one or more product component
238:45 - instances are displayed like this
238:49 - so this is your shopping cart component
238:52 - and each box
238:54 - that is each product is an instance of
238:56 - product component
238:59 - we have six products in the array so six
239:01 - instance of product component has been
239:04 - rendered
239:06 - so in this context
239:08 - inside the shopping cat component
239:10 - and trying to add something called
239:13 - constructor
239:16 - by definition the constructor executes
239:19 - as soon as an object is created for this
239:22 - particular class
239:24 - that is the definition of object
239:26 - oriented programming
239:28 - in other languages
239:30 - but
239:31 - being in react
239:33 - the constructor will be converted as a
239:36 - function
239:37 - so there is no object for this class
239:39 - actually to be frank
239:45 - the constructor executes when the
239:47 - component is mounted that means
239:50 - execution started
239:53 - the major thing that you will do with
239:54 - the constructor is
239:56 - initialization of the state
239:59 - in all the previous lectures we are
240:01 - directly initializing the state property
240:04 - by assigning an object literal into the
240:06 - state property
240:09 - that is one way
240:10 - the alternative way for the same is that
240:13 - you can initialize the same state
240:16 - in the constructor by using this dot
240:19 - state equal to something
240:22 - so you can do either of these
240:25 - either outside the constructor state
240:27 - equal to object
240:29 - or in the constructor this dot state
240:32 - equal to object
240:35 - and moreover
240:36 - the constructor is the only one place
240:39 - where you can directly initialize the
240:41 - state by writing this third state equal
240:44 - to
240:46 - in nowhere else that means in nowhere
240:48 - other methods you should assign the
240:51 - values
240:52 - into the state directly by ascending
240:56 - that means if you try to assign this dot
240:59 - state equal something in other methods
241:01 - such as render it is not valid
241:05 - in all the methods except constructor
241:08 - you must use this dot set state in order
241:10 - to make updates in the state
241:14 - so if you run this application now
241:17 - in the browser console we are getting
241:19 - errors
241:21 - that is
241:22 - must call superconstructor in the
241:24 - databoard class before accessing this or
241:28 - writtening from their order
241:30 - constructor which means that you must
241:33 - call the superclass constructor
241:36 - inside your derived class constructor
241:38 - that is shoppingcat componentconstructor
241:42 - so
241:43 - you should write like so for
241:46 - so by this statement you are calling the
241:49 - superclass constructor
241:53 - what is the superclass here the
241:55 - component class
241:57 - so from this statement you are calling
241:59 - the super class constructor that is the
242:02 - constructor of the component class
242:05 - that is the parent class
242:09 - now that error is cleared out
242:13 - and moreover
242:15 - in this case the problem is that
242:18 - in case if someone has supplied some
242:20 - props for this component
242:22 - that you will miss out
242:25 - because the super class constructor
242:27 - expects a parameter called props
242:30 - that must be supplied from the statement
242:33 - so how will you receive the props which
242:35 - are supplied by some other components
242:38 - while invoking the shoppingcat
242:40 - component for example
242:43 - we are invoking the shoppingcat
242:44 - component from app.jsxfile
242:49 - so in the app.jsx file suppose you
242:52 - supply some value such as x equal to 10
242:56 - so this x value will be received
242:59 - into the constructor
243:01 - so in the shopping cat component the
243:04 - constructor by default receives those
243:06 - props
243:08 - and you can initialize the same in your
243:11 - current working
243:12 - component
243:13 - by passing the same to the parent class
243:16 - constructor
243:19 - so first you are receiving all the props
243:21 - that are supplied from your parent
243:23 - component
243:24 - that is app component
243:27 - and you are passing the same to the
243:29 - parent class constructor
243:31 - so these properties will be initialized
243:33 - in the props property of the current
243:35 - working class
243:38 - so this is the common code that you will
243:40 - write in every component
243:43 - so it's a three-step process
243:46 - first
243:47 - the parent component supplies one or
243:49 - more props
243:51 - that will be received into the
243:52 - constructor first
243:55 - and then you are re-passing the same to
243:58 - the parent class constructor
244:00 - those will be initialized in the current
244:02 - working component then
244:05 - in that way the props is really
244:07 - available in your component
244:11 - so anytime when you're creating the
244:13 - constructor in your component class
244:15 - don't forget to call the parent class
244:17 - constructor by using super
244:20 - and also supply the props for the same
244:24 - so what code should not be written in
244:27 - the constructor is that
244:29 - you should never make http requests
244:31 - inside the constructor
244:34 - the same can be made in the component
244:36 - did mount method
244:38 - because that executes after completion
244:41 - of all the component lifecycle
244:44 - of all the child components
244:46 - that are rendered inside the render
244:48 - method
244:52 - so as a sequence of execution
244:55 - first the constructor of your component
244:58 - executes
245:00 - and then your render method of your
245:02 - component executes
245:04 - as a part of that
245:06 - in case if you invoke any other chain
245:09 - components
245:10 - for example we are invoking some x
245:12 - widget component
245:14 - the complete lifecycle of x widget
245:17 - component executes starting from
245:19 - constructor render and the component
245:21 - read mount
245:24 - and after completion of the lifecycle of
245:26 - x widget component
245:28 - and other child components
245:31 - the component did mount method of your
245:34 - shopping cart component executes
245:37 - so let me add it
245:40 - after the render method i am trying to
245:42 - add a method called component read mount
245:51 - so this method executes after the
245:53 - constructor
245:55 - and render method of the current working
245:57 - component
245:59 - including the lifecycle of all the child
246:01 - components if any used in the render
246:03 - method
246:05 - so this method is a perfect time to make
246:08 - any http requests to fetch data from
246:11 - database or any other data source
246:15 - but as of this lecture we are not making
246:18 - any http requests to fetch data from
246:21 - data source
246:22 - we will do that later in the further
246:24 - sections
246:26 - but for a timing let me add console.log
246:29 - messages for each place
246:32 - that means in the constructor first
246:36 - so console.log of
246:40 - constructor of shopping cache
246:43 - and i am adding a console.log message in
246:46 - the render method
246:49 - and also after that
246:51 - i am trying to add a console.log message
246:54 - in the componentdidmount method of the
246:56 - same component
247:00 - so let us see the output to identify the
247:03 - sequence of execution
247:06 - as you can see
247:07 - first it has begin with
247:09 - constructor of the shopping cart
247:11 - component
247:13 - then render method of the shopping cat
247:16 - all the jail components have been
247:18 - executed
247:20 - that means the complete lifecycle of
247:22 - jail components execute here
247:25 - and after that the component did mount
247:28 - method of shopping cat component
247:30 - executes
247:33 - this is how do you understand the
247:35 - mounting phase of your lifecycle of
247:37 - react component
247:40 - in the next lecture we will demonstrate
247:42 - updating phase
247:50 - let's focus on updating phase
247:52 - whenever the props or state is changed
247:55 - by the developer the updating phase
247:57 - executes
248:00 - the props out supplied from the parent
248:02 - component and the state is the one of
248:05 - the same component itself
248:08 - so whenever either of these props or
248:10 - state has been changed at runtime the
248:12 - updating phase will be triggered out
248:16 - as a part of that
248:17 - the render and component did update
248:20 - methods we will execute in the same
248:22 - sequence
248:24 - first the render method executes
248:27 - which returns a html element and that is
248:30 - treated as a react element
248:34 - and that is treated as a virtual dom
248:38 - then react compares the new virtual dom
248:40 - with old virtual dom which was already
248:43 - rendered
248:44 - and identifies the differences or
248:47 - changes
248:49 - if any changes are found
248:51 - the corresponding changes will be
248:52 - updated in the browser dom
248:56 - in this case this render method is the
248:58 - same which was already written in your
249:01 - component
249:04 - but let me add the component did update
249:06 - method
249:09 - so inside your shoppingcat component
249:13 - already we have the constructor
249:15 - let me minimize it for clarity
249:18 - and then we have render method
249:21 - and then we have componentdidmount
249:23 - method
249:26 - and after that let me add
249:29 - component did update method
249:35 - and let's have a console.log message
249:40 - and update ue uppercase
249:44 - let's test it
249:47 - as you can see first constructor then
249:50 - render method
249:51 - and lifecycle of all the children
249:55 - and after that component date mode
249:56 - method executes
249:59 - notice there is no component date update
250:01 - method executes here
250:04 - so whenever there is some change in the
250:06 - props or state
250:08 - then only the update phase will be
250:10 - executed right
250:13 - so for initial render component update
250:16 - method will not be executed
250:19 - for example let me click on this plus
250:22 - button to increase the quantity
250:25 - so in this case
250:27 - only it has executed the render method
250:30 - the lifecycle of all the children
250:33 - and then the component date update
250:35 - method executes
250:38 - let me clear the browser console and try
250:40 - again
250:42 - so i click on the plus button
250:45 - the render method of the shoppingcat
250:47 - component
250:49 - lifecycle of all the children
250:53 - and then component date upgrade method
250:55 - executes
250:57 - so
250:58 - the component date update method
251:00 - indicates that
251:01 - all the children have been loaded
251:03 - successfully in the current working
251:05 - component
251:08 - and in this component rewrite method
251:10 - you have two automatic arguments that is
251:13 - pre props
251:16 - and prime state
251:18 - that indicates previous properties and
251:21 - previous state
251:24 - and already we have the current
251:26 - properties and current state
251:29 - if needed you can check it out
251:32 - that is this turnpops
251:34 - and this third state
251:37 - so totally i am printing four values
251:39 - through this console.log
251:41 - one is the message that is component
251:43 - read update
251:45 - previous props previous state that are
251:47 - received as automatic parameters
251:50 - that are supplied by react automatically
251:54 - and also the current working props and
251:57 - state of the current working component
251:59 - that is shopping cat component itself
252:04 - so let's run this
252:06 - of course for initial render component
252:09 - did update method will not execute right
252:12 - so let me clear the browser console
252:15 - and click on the plus button for any one
252:17 - component
252:19 - for example it supplies
252:22 - so as a result
252:24 - the shoppingcat component went to update
252:27 - phase because
252:29 - there is some change in the props
252:32 - that means the products array have been
252:34 - updated by the parent component
252:37 - so in this case the render method
252:39 - executes
252:41 - and the lifecycle of all the shell
252:43 - components execute
252:46 - we have six components that's why it
252:48 - shows this
252:50 - six times
252:53 - and then
252:54 - only one time component did update
252:56 - executes for the shopping cart component
253:00 - and this is the previous props
253:03 - and this is the previous trade
253:07 - and this is your
253:09 - this dot props
253:10 - that means the current props
253:14 - and this is the current state
253:18 - and what has been really changed is that
253:21 - if you can verify there is no difference
253:24 - between the previous props and the
253:25 - current props
253:27 - both are x equal to 10
253:31 - but
253:31 - there is some change in the state
253:34 - so in this in the first case
253:37 - you can notice the products with
253:41 - all quantity as 0 0 for all the products
253:46 - and in the current state
253:48 - expand
253:50 - you can see the quantity has been
253:53 - changed as one for samsung queue led tv
253:58 - so
253:58 - this is how you identify the changes or
254:01 - differences between the previous props
254:04 - and current props or
254:06 - previous state to current state
254:10 - sometimes you will have a logic
254:13 - that is
254:14 - whenever there is some change in the
254:16 - particular property or particular
254:18 - element
254:19 - in the state or props
254:21 - you want to make http request to fetch
254:24 - additional data from the server
254:27 - or
254:28 - make any other changes in the database
254:32 - so
254:32 - in that case you are free to perform any
254:35 - kind of database operations by making
254:38 - http requests
254:39 - in the component did update method
254:43 - but always make sure you make http calls
254:47 - conditionally but not unconditionally in
254:50 - this method
254:53 - that means we have to check
254:55 - for example if previous props dot
254:59 - x equal to
255:03 - current props x value
255:06 - then
255:07 - i don't want to make any http call
255:10 - if it is not equal to the x value then i
255:13 - would like to make http call
255:17 - so i should make http call only when
255:20 - this condition is true but not
255:22 - unconditionally
255:24 - in case if i make http call
255:27 - unconditionally without checking any
255:29 - condition
255:30 - it leads to performance issue because
255:33 - this method will be executed for each
255:35 - change in the state or crops
255:39 - in a real-world application
255:40 - the state will be updated many times
255:43 - from various buttons or various clicks
255:46 - of the user
255:48 - for example your real world application
255:50 - may consist of various buttons such as
255:53 - filtering sorting
255:56 - delete new etc
255:59 - for each button click the state may be
256:01 - updated
256:03 - and each time the state is updated
256:05 - the component goes to updating phase
256:08 - and for each time this component did
256:11 - update method executes right
256:14 - so if you make http call unconditionally
256:17 - for each updating phase a http request
256:20 - will be sent to the server
256:23 - so
256:24 - it will be a performance issue
256:27 - so that is the reason
256:29 - it is not advisable to
256:31 - make http calls unconditionally in this
256:34 - method
256:36 - but
256:36 - if you have a proper reason or logic
256:39 - you can check your condition if the
256:42 - specific condition is true for example
256:45 - if the user has entered this particular
256:47 - input value
256:48 - then only you will make http call in
256:51 - this component read update method
256:54 - otherwise it is better to avoid such
256:58 - http call if you don't require so
257:02 - so anyways currently as per our
257:04 - application we don't require an http
257:07 - call in this
257:08 - case so this is how do you understand
257:12 - the updating phase of the lifecycle of
257:14 - the component
257:21 - now let's focus on unmounting phase
257:25 - in this phase mainly one method will be
257:27 - executed that is
257:29 - component will unmount
257:32 - this phase will be occurred
257:34 - before leaving or deleting the current
257:36 - instance of the component
257:39 - generally this occurs when the user
257:42 - navigates to another route in case if
257:44 - routing is enabled
257:47 - or when the parent component deletes the
257:49 - current instance of the current working
257:51 - child component
257:54 - so in either of these cases the
257:56 - component will amount will be executed
258:01 - and you will use this component will
258:03 - amount method in order to unsubscribe
258:07 - that means cancel the http requests if
258:09 - any
258:12 - so overall you will place your cleanup
258:15 - code to cancel the http requests in this
258:18 - method
258:20 - let me demonstrate this
258:24 - so presently this condition is not
258:26 - required for us let me comment this out
258:30 - and let me add the message called
258:33 - componented update for shopping catch
258:37 - that is in the component update method
258:43 - so this particular component will
258:44 - unmount method will execute
258:47 - before deleting the current instance of
258:49 - the component that is shoppingcat
258:51 - component
258:54 - in this method let me add console.log
258:56 - message
258:59 - component will amount
259:01 - for shopping cat
259:08 - so let's run this
259:12 - when the page is refreshed
259:14 - that is called mounting phase
259:17 - in that case the constructor
259:19 - render
259:21 - the channel component lifecycle
259:24 - and component did mod method execute
259:28 - after that
259:30 - whenever some state of props has been
259:32 - changed for example i click on plus
259:34 - button
259:37 - the render method
259:39 - the lifecycle of all the child
259:40 - components
259:42 - and then component data update methods
259:45 - execute
259:48 - after that
259:50 - when the user navigates to another route
259:53 - for example if the routing is enabled
259:56 - the user clicks on another hyperlink in
259:58 - the navigation bar
260:00 - in that case component will unmount
260:03 - method will be executed for the shopping
260:05 - cart
260:07 - but as of this stage we have not enabled
260:10 - routing in this application right
260:14 - so that is the reason it doesn't trigger
260:17 - component will unmount method
260:21 - but let me demonstrate the same for
260:24 - product component
260:26 - so let's copy the same method into
260:29 - product component
260:32 - so in the product component
260:34 - after the render method i am pasting the
260:36 - same
260:38 - and let me make this as
260:40 - component will amount for product
260:45 - and let's run this
260:48 - and let's clear the browser console
260:52 - now let's delete any one child component
260:55 - instance
260:56 - for example i click on close button or
260:59 - delete button for the sony camera
261:03 - and i say yes
261:06 - as you can see the component will
261:08 - unmount method has been executed for the
261:11 - product component
261:13 - because that specific instance of the
261:16 - product component has been
261:18 - cleared out
261:21 - and after that update phase has been
261:23 - executed for the shopping cat component
261:28 - so it doesn't trigger component will
261:30 - unmount method of the shoppingcat
261:32 - component
261:34 - it executes only when the routing has
261:37 - been changed
261:38 - or
261:39 - the component has been removed by the
261:42 - parent that is app.jsx file
261:47 - this is how do you understand unmounting
261:49 - phase
261:51 - what kind of code will you write in this
261:53 - component will unmount method
261:56 - you can write some cleanup code
261:58 - to cancel http requests if any
262:02 - this is how you understand
262:05 - unmount phase in the component life
262:07 - cycle
262:14 - in case of nested components
262:16 - how does react manages the lifecycle of
262:19 - parent and child components
262:22 - that means will it perform the complete
262:25 - lifecycle of parent component first and
262:27 - then child component next
262:29 - or
262:30 - first child component and then parent
262:33 - component
262:35 - actually you are rendering the child
262:37 - components through render method of the
262:39 - parent component right
262:42 - so every time the render method is
262:44 - invoked the chill components lifecycle
262:47 - will be performed
262:50 - and after that it returns back to the
262:52 - parent component life cycle
262:55 - to understand this process clearly let
262:58 - me demonstrate the life cycle of
263:01 - the parent component that is shopping
263:03 - cat component
263:05 - and the chill component that is product
263:08 - component
263:10 - so let's back to the code
263:12 - in the shopping cart component
263:16 - let me comment out all these products
263:19 - let's make it single product to avoid
263:21 - the confusion
263:23 - so we have only one product that is
263:26 - iphone and
263:28 - we have considered log messages in all
263:31 - over all the methods that is in the
263:33 - constructor of the shopping cat
263:36 - and the render method of the shopping
263:38 - cart component
263:41 - and also in the component date mount
263:43 - method of the shopping cart component
263:47 - and the component did update method of
263:49 - the shopping cart component
263:52 - and component will unmount method of the
263:55 - shopping cart component
263:58 - and these are even handler methods
264:01 - we are not focusing on them
264:05 - and now switching to product component
264:08 - let me add those lifecycle methods in
264:10 - the product component too
264:13 - so
264:14 - in the product component let's add the
264:16 - constructor
264:19 - and the constructor receives the props
264:21 - as argument
264:22 - which are supplied by the parent
264:24 - component
264:27 - and you must re-pass the same to the
264:29 - parent class that is
264:31 - the component-based class
264:34 - by using super keyword
264:37 - so this will reset or overwrite the
264:39 - props
264:40 - of the current working component
264:43 - and after that you can set the state
264:47 - by writing this dot state
264:50 - so this.state is equal to the state
264:53 - object that you have written already
264:57 - and let me add the console.log message
265:03 - and then another console.log message
265:06 - inside the render method
265:09 - and after that
265:11 - adding component did mount method
265:20 - and also component will unmount method
265:24 - all right so these are all the methods
265:26 - that are added
265:28 - in the product component
265:30 - so we have complete lifecycle methods of
265:34 - parent component that is shoppingcat
265:36 - component
265:38 - as well as in the channel component that
265:40 - is product component
265:43 - let's test it
265:47 - so
265:48 - when you run this application for the
265:50 - first time
265:52 - by default it is in the mounting phase
265:54 - as a part of the mounting phase
265:57 - it begins with the lifecycle of the
265:59 - parent component that is a shopping cat
266:03 - first the constructor of the shopping
266:04 - cart component
266:06 - then render method of the shopping cart
266:10 - and the constructor of the product
266:13 - render method of the product
266:16 - component date mod method of the product
266:20 - so these three lines indicate
266:22 - the mounting phase of the chain
266:24 - component
266:25 - which executes after render method of
266:28 - the parent component
266:31 - and after completion of the mounting
266:33 - phase of the chain component
266:36 - component did mount method executes for
266:39 - the parent component
266:43 - so this is the total mounting phase
266:46 - includes parent and shield
266:50 - now when you click on
266:52 - any state update for example plus or
266:55 - minus
266:58 - oops let me clear the browser console
267:01 - let's click on plus button
267:03 - now it went to update phase for both
267:06 - components
267:09 - first it begins with the update phase of
267:11 - the parent component
267:13 - because the data of the parent component
267:16 - has been changed first
267:20 - it begins with the render method of the
267:22 - shopping cart component
267:24 - as a part of that it calls the update
267:27 - phase of the
267:29 - chill component that is product
267:31 - component
267:34 - so what methods must be executed for the
267:37 - jail component update phase that is
267:40 - render method and component data update
267:43 - method
267:45 - so it executes a complete update phase
267:48 - of the jail component
267:51 - that includes render and componented
267:53 - update method of the child component
267:57 - and after that
267:58 - it executes the component deduplic
268:01 - method of the parent component
268:05 - and now let me clear the browser console
268:08 - let me close or delete the child
268:10 - component
268:12 - by clicking on that close button
268:16 - now parent component went to update
268:19 - phase
268:20 - and jail component went to
268:22 - unmounting phase
268:25 - so as a part of the update phase of the
268:28 - parent component the render method
268:31 - and at last component did upgrade method
268:33 - executes for the parent component
268:37 - and in between that is exactly
268:41 - after the render method of the parent
268:43 - component
268:44 - the chill component went to unmounting
268:47 - phase
268:49 - so as a part of that
268:51 - the component will unmount method has
268:53 - been executed
268:54 - as a part of unmounting phase of the
268:57 - child component
269:01 - but still we have not seen unmounting
269:04 - phase of the parent component that is
269:06 - shopping cat component
269:09 - because it has to be unwanted from the
269:12 - parent
269:13 - who invokes the shopping cart component
269:16 - that is from app.jsx
269:21 - but to demonstrate this we really
269:23 - require
269:24 - routing
269:26 - we have not yet added routing in our
269:28 - application as of now
269:31 - so let's ignore it
269:34 - this is how do you understand
269:36 - parent-child component life cycle
269:39 - in react
269:42 - so overall the conclusion is that
269:45 - each time the child component phase will
269:48 - be executed after the render method of
269:51 - the parent component
269:54 - this is how do you understand the
269:56 - complete life cycle of parent and jail
269:59 - components in react
270:06 - whenever while executing a component
270:09 - or rendering a component
270:12 - or
270:13 - execution of any lifecycle method
270:16 - or while execution of any constructor of
270:19 - nhl component
270:21 - in all these cases
270:23 - if any exception or runtime error is
270:26 - raised in that case the component did
270:30 - catch method automatically gets executed
270:33 - and that comes under
270:35 - error handling phase
270:39 - so suppose you have a component and
270:42 - while executing that component that is
270:44 - in the render phase or lifecycle method
270:47 - or
270:48 - constructor of hl component
270:51 - then this component did catch method
270:53 - automatically executes
270:55 - which receives two parameters
270:57 - automatically that is error and info
271:02 - the first parameter that is error
271:05 - represents the actual error message
271:07 - which causes the error
271:10 - and the second one info
271:12 - contains the additional information
271:15 - about the particular error
271:17 - such as component stack
271:19 - that means the list of methods that
271:22 - causes that particular error
271:26 - see in case if there is no error
271:29 - this particular method will not execute
271:34 - so i am adding that method in the
271:36 - shoppingcat component
271:39 - that is after component will unmount
271:42 - method i am adding a method called
271:46 - componentdid catch
271:49 - and it contains two arguments that is
271:51 - error
271:54 - and info
271:56 - these will be passed by react
271:57 - automatically
272:00 - and let me print that console.log
272:02 - message
272:05 - error comma info
272:09 - so when you run this application
272:12 - as of now there is no any error
272:15 - so that method did not execute
272:19 - as you can see there is no componented
272:21 - catch method executes for the shopping
272:23 - cart
272:25 - but alternatively
272:28 - let's make some changes
272:30 - to make it error
272:34 - suppose in the constructor of the
272:35 - channel component that is a product
272:38 - component
272:40 - let's make some changes for example
272:43 - instead of this props dot product
272:46 - i'm just writing
272:49 - pro-uct where d is missing
272:53 - so this causes error while executing the
272:56 - child component that is
272:58 - product component
273:00 - which is being invoked as a part of the
273:02 - shopping cat component
273:06 - you can add a statement to store that
273:08 - information in the local storage
273:12 - so local storage dot last error
273:17 - equal to
273:19 - that error
273:22 - and on the next line we want something
273:24 - called info
273:27 - here backslash n represents the next
273:30 - line character
273:32 - so we are storing error and info details
273:35 - in the local storage dot last error
273:37 - property which will be available in the
273:40 - same browser
273:43 - so like this you can write any code in
273:46 - order to log that information
273:48 - somewhere in the memory
273:51 - and we can convert the same into json
273:54 - format
273:55 - so that
273:56 - it will show up the details correctly
273:59 - so let me add something called
274:01 - json.stringify
274:06 - of info
274:08 - sorry the message must be component did
274:11 - catch but not component unmount
274:15 - let's execute this
274:18 - as you can see whenever react identifies
274:21 - some error while executing the
274:22 - constructor of the product
274:25 - it raises an exception
274:28 - and
274:29 - the component did catch method executes
274:31 - for the parent component
274:34 - that is shopping cat component
274:38 - and this is the information of
274:42 - the first parameter that is error
274:46 - that means the complete details about
274:47 - the error
274:50 - and after that the second argument that
274:52 - is info is the component stack
274:56 - that is a list of components that arises
274:59 - or causes or catches the exception
275:04 - actually that error was originally
275:06 - raised in the product component
275:09 - but has been accelerated to shopping cat
275:12 - component
275:14 - and the same has been accelerated to
275:16 - app.jsx file
275:21 - and you are going to store the
275:22 - information of error and info
275:26 - inside the local storage for future
275:28 - reference purpose
275:30 - so
275:32 - if you can check application
275:35 - and switch to local storage
275:38 - you can see the details of last error
275:41 - along with the corresponding component
275:43 - stack
275:45 - like this you can use your component did
275:48 - cache method
275:49 - for logging the errors
275:51 - somewhere in the memory such as local
275:54 - storage
275:56 - this is all how to use component cache
275:59 - method
276:00 - in your application
276:03 - and before the next lecture i will be
276:05 - removing or commenting these console.log
276:08 - messages in order to keep the browser
276:11 - console clean
276:12 - to make it clear to understand further
276:14 - lectures
276:20 - here my goal is that to create a login
276:23 - form
276:24 - that means overall i would like to
276:26 - demonstrate how to work with the forms
276:28 - in react
276:30 - a form is meant for collecting
276:32 - information from the user
276:35 - which includes form elements such as
276:37 - text box checkbox ready button drop down
276:41 - list etc
276:43 - and in react we can use all html tags
276:46 - to create the form
276:48 - but here the important point to
276:51 - understand is
276:52 - how will you bind the textbox values to
276:55 - the properties of the component
276:58 - state let's try
277:01 - let me create a new component called
277:04 - login component so right click on src
277:08 - folder
277:10 - login.jsx
277:14 - and we have a component called login
277:19 - import react and component from react
277:23 - module
277:27 - and your render method renders something
277:30 - such as
277:32 - a new tag with login
277:36 - and now
277:37 - i would like to render this particular
277:39 - login
277:40 - from the app.jsx file
277:43 - instead of rendering shoppingcat
277:45 - component
277:48 - don't worry we will invoke the customers
277:50 - list and shoppingcat component later
277:53 - when we go to the routing section
277:56 - so for time being
277:57 - after the navbar i would like to render
278:00 - login
278:01 - which can be imported from
278:03 - login.jsx file
278:07 - so import
278:09 - login from
278:11 - login.jsx
278:14 - and by the way we have commented out all
278:16 - the console.log messages
278:18 - in all the lifecycle methods that are
278:21 - demonstrated in the previous section
278:25 - okay now switch to login.jsx file
278:29 - here i would like to use
278:31 - html and bootstrap
278:34 - to create the login form
278:39 - i want a bootstrap box with
278:42 - nine columns
278:44 - and a heading called login
278:48 - with margin top
278:52 - as well as padding
278:54 - and border bottom
278:58 - which is rendered like this
279:01 - and below the heading i would like to
279:03 - place the email and password text boxes
279:09 - so
279:10 - update react.component as just component
279:14 - as we have imported component earlier
279:18 - and also in app.jsx file
279:21 - comment out this shoppingcat component
279:24 - import statement as we don't require it
279:26 - for time being
279:30 - and now in the login.jsx file
279:34 - create a new tag with form group class
279:37 - as suggested by bootstrap
279:41 - a bootstrap form group represents a set
279:43 - of label and a text box
279:45 - that represents a specific field
279:50 - and you would like to place a label
279:53 - that horizontally occupies four columns
279:56 - in a row
279:58 - that is email
280:01 - and you wish to create actual text box
280:04 - by using input typing called text
280:08 - and apply the css class name as form
280:11 - control
280:13 - and input is unveiled tag
280:18 - for clarity let me add comment
280:20 - where email starts
280:24 - and comments look like this in react
280:28 - where it is the javascript comment
280:30 - along with expression
280:35 - and here email ends
280:38 - so
280:39 - this is your email
280:42 - and similarly let's apply the same for
280:44 - password
280:47 - and input type equal to password
280:50 - and the label is password
280:54 - so when you run this
280:57 - you can see
280:58 - email and password text boxes in the
281:00 - form
281:02 - but here the question is how will you
281:05 - bind these text box values
281:07 - to the respective state properties
281:12 - first let us create necessary state
281:14 - properties
281:15 - to store the email and password values
281:20 - there are two ways to initialize the
281:21 - state right
281:23 - one is that
281:24 - you can directly write like state equal
281:27 - to object
281:28 - as we did earlier
281:31 - the another recommended way is that
281:34 - initialize the state in the constructor
281:38 - but in case of constructor
281:40 - you must call the parent class
281:42 - constructor
281:43 - as a first statement
281:45 - by using super keyword
281:49 - this will receive the props which are
281:51 - supplied by the react
281:53 - and pass the same to the parent class
281:55 - that is component class
281:58 - so that overall the properties get
282:01 - initialized in the current working class
282:03 - object that is login
282:07 - so
282:08 - here you should write like this dot
282:10 - state is equal to
282:12 - your state object
282:14 - and here you require two properties
282:17 - called email and password
282:19 - to store or represent the actual value
282:22 - of the text boxes
282:25 - and i'm initializing them
282:27 - with empty codes that is empty string
282:33 - now i would like to bind these
282:35 - particular values
282:37 - into the corresponding text box
282:40 - so let us write value
282:43 - actually in the value whatever the value
282:46 - that you give that gets appear in the
282:48 - text box
282:50 - for example
282:51 - if you try giving abc the same value as
282:55 - disappears in the corresponding text box
282:59 - but alternatively you want to fetch the
283:02 - value from the state property isn't it
283:06 - so that is the reason you have to bind
283:08 - it
283:09 - through a react expression
283:12 - and ascend the value of this dot state
283:14 - dot value
283:16 - that is this.state.email
283:20 - so it reads up the value of the email
283:24 - from the state
283:25 - and assign the same into the
283:27 - corresponding value property of the text
283:29 - box
283:31 - similarly let's assign the same into
283:35 - value of the password text box
283:38 - so value equal to
283:40 - this dot state dot password
283:44 - and for understanding let's initialize
283:47 - the email and password properties with
283:49 - some default values
283:51 - such as abc8test.com
283:55 - and password for example abc123
283:58 - so if we can see these values in the
284:01 - browser
284:02 - that means it is working correctly
284:06 - as you can see
284:08 - the state values have been displayed in
284:09 - the text box because
284:11 - we have assigned the values of the state
284:14 - into the value property of the text box
284:19 - so this is how will you bind the text
284:22 - box values from the state while working
284:25 - with the react form
284:28 - but
284:29 - in the browser console it shows a
284:31 - warning but it is not an error
284:34 - that is
284:35 - failed prop type that is you provided a
284:38 - value prop
284:40 - to your form field
284:42 - without on change handler
284:45 - that means it is trying to explain that
284:48 - in order to enable two-way binding we
284:50 - have to add on change event in the input
284:53 - field
284:56 - will solve it in the next lecture by
284:58 - enabling two way binding
285:05 - the problem with react is
285:08 - it supports only one way binding but
285:10 - doesn't support two-way binding directly
285:14 - that means you can actually bind the
285:16 - state into the text box but not in
285:18 - reverse by default
285:21 - so there is no out-of-box supports that
285:24 - automatically retrieves the value of the
285:26 - text box into the state
285:29 - so only it is one way binding
285:32 - wherever or whenever you update the
285:34 - value of the stage it gets automatically
285:36 - updated into the text box
285:40 - for example if you try using set state
285:43 - and update the value of email
285:45 - automatically the updated value gets
285:48 - reflected in the text box
285:50 - but not reverse
285:53 - so
285:54 - rewards must be done manually by
285:56 - identifying the changes in the text box
285:58 - by using on change event
286:01 - and update the state manually by calling
286:04 - set state method
286:06 - in that way the reactor developer can
286:09 - achieve the two-way binding
286:11 - even though two-way binding is not
286:13 - supported out of the box
286:16 - let's see how to do it
286:21 - so in the input tag that is the email
286:23 - text box
286:25 - you need to add a property called
286:27 - onchange
286:30 - this event executes whenever change
286:32 - event occurs in the text box
286:35 - that means
286:36 - as soon as the value has been changed in
286:38 - the text box
286:40 - so
286:42 - in this case either you can write an
286:44 - error function directly inside the
286:47 - onchange
286:48 - or you can call a method of the
286:50 - component
286:53 - in this case i prefer using an error
286:55 - function
286:56 - because we have only one statement
286:59 - execute
287:00 - so we don't require a separate method
287:02 - for that
287:04 - so
287:05 - i'm creating an error function
287:09 - and
287:10 - in order to get the latest value of the
287:12 - text box
287:13 - we use
287:15 - the synthetic event that is
287:17 - event parameter that is supplied by the
287:19 - browser automatically for all the event
287:21 - handlers
287:24 - and access the even dot target dot value
287:29 - so here event is the synthetic parameter
287:32 - that is supplied by browser
287:34 - automatically
287:36 - that contains additional details about
287:38 - the current working event
287:41 - for more information you can refer to
287:43 - any javascript tutorial
287:46 - that even synthetic parameter is
287:48 - supplied for all the even handlers by
287:50 - default
287:53 - so
287:53 - based on that synthetic event
287:56 - your accessing target.value
287:59 - that automatically represents the latest
288:01 - updated value of the textbox
288:05 - so
288:06 - you need to update the same to the state
288:09 - property
288:10 - that is email property here
288:14 - but can we ascend the value directly by
288:17 - using state dot email equal to something
288:20 - no
288:21 - it is not recommended right
288:24 - except in the constructor in nowhere
288:27 - else you should assign the value
288:28 - directly into the state property
288:31 - but alternatively always we have to use
288:34 - set state method
288:36 - in order to update the value
288:39 - into the state
288:42 - so here you are updating the email
288:44 - property
288:45 - as even dot targeted value
288:49 - so that the updated value of the text
288:52 - box gets updated
288:53 - in the state dot email property
288:58 - and let me close the parenthesis here
289:02 - and let me close under brace
289:05 - yes so this must work let's check it
289:10 - as of now
289:12 - whenever you update the value of the
289:14 - text box
289:16 - automatically this particular latest
289:18 - value whatever you type here
289:20 - will be automatically updated into the
289:22 - email property of the state
289:25 - in order to ensure the same
289:27 - in the same error function i am writing
289:30 - another statement
289:32 - that is console.log of
289:36 - this dot state dot email
289:40 - so as you can check here
289:43 - as soon as you type something here for
289:45 - example i am trying to type x widget
289:49 - and click the cursor outside
289:53 - so you can see the latest value has been
289:55 - updated into the email property
289:59 - and notice that setstate method is
290:02 - asynchronous
290:04 - so we are not sure that the next
290:06 - statement that is console.log statement
290:09 - will execute only after updating the
290:11 - state
290:12 - since the set state method is
290:14 - asynchronous
290:17 - so
290:19 - let's clear the browser console
290:23 - and let's try to type something for
290:25 - example abcd
290:28 - you are not seeing the lastly printed
290:30 - message
290:31 - that is avcd here because set state
290:34 - method is by default asynchronous
290:38 - you don't need to really worry about
290:39 - this it's a default behavior in react
290:43 - but still if you have a doubt in that
290:47 - you can explicitly add a button
290:50 - and explicitly identify the value of
290:52 - state dot email
290:54 - so let's remove the console.log
290:56 - statement from this error
290:58 - function and
291:01 - below the
291:02 - text box let me add a button
291:09 - with class name btn and b10 primary as
291:13 - for bootstrap
291:15 - and we have something called login
291:17 - button
291:20 - and when the user clicks on this login
291:21 - button we are calling a method called
291:25 - on loginclick
291:27 - so
291:29 - when the user clicks on the login button
291:32 - we are executing a method called on
291:34 - login click
291:35 - that must be present in the same
291:37 - component
291:40 - this is end of for render method
291:44 - so
291:45 - let me add that on loginclick method
291:49 - that is an error function
291:51 - this executes when the user clicks on
291:53 - login
291:56 - and here we are printing the latest
291:58 - value of the state
292:01 - that is this dot state
292:04 - and now have a look in the output
292:09 - so suppose i update something in the
292:11 - email
292:12 - let's say xyz
292:14 - at
292:16 - something.com
292:18 - as soon as we have updated the value of
292:20 - the textbox
292:22 - this particular value gets updated or
292:24 - refreshed
292:26 - in the corresponding state dot email
292:28 - property
292:29 - because of on change event
292:33 - it's because we are using set state
292:35 - method in the on change event of the
292:38 - email text box
292:41 - but we have not added on change event
292:44 - for the second text box that is password
292:47 - so password will not be updated
292:50 - when the text box is changed
292:53 - let's clear the browser console
292:55 - and click on the login button
292:58 - as you can see
292:59 - email has been changed
293:01 - but
293:02 - password has not updated
293:06 - this value abc123 has been initialized
293:09 - in the beginning that is in the
293:11 - constructor itself
293:14 - so now we are showed that because of
293:16 - onchange event in the textbox we are
293:19 - able to get the latest value of the text
293:21 - box into the state
293:25 - so let's repeat the same thing that is
293:28 - on change event for the password text
293:30 - box also
293:33 - let's copy paste on change
293:36 - into password text box
293:39 - and simply update the property name of
293:41 - the state that is password
293:45 - so let's verify this output
293:49 - now that error has been cleared out of
293:51 - course
293:54 - so try to update something for example
293:57 - squat at testo.com
294:00 - and password is squad123
294:04 - so we have updated both values
294:07 - and we are sure that
294:09 - as soon as you modify something in the
294:11 - textbox
294:13 - that particular value gets updated into
294:15 - the corresponding state property
294:18 - whereas the first textbox value into
294:21 - state dot email
294:22 - and second textbox value into
294:24 - state.password
294:28 - this update will not wait for login
294:29 - button click
294:31 - that means
294:33 - even though we don't click on the button
294:35 - the values gets updated into the state
294:37 - property all the time
294:40 - because we have updated the state dot
294:42 - property value in the on change event
294:45 - but not in the click event
294:48 - so we are using the click event only for
294:51 - getting us know
294:53 - that the value has been updated
294:56 - so let's click on login button now you
294:59 - can see the latest value of the text
295:02 - boxes
295:03 - are visible in the state
295:06 - that is scott test.com and password is
295:09 - called one two three
295:12 - this is how you manually create the
295:14 - two-way binding in react
295:17 - whereas if you compare the same thing in
295:19 - angular kind of frameworks
295:22 - angular by default supports two-way
295:25 - binding whereas
295:27 - react by default supports one-way
295:29 - binding that is state to form element
295:32 - but not reverse
295:35 - where react developer manually should
295:37 - update the state through on change event
295:40 - of the form element
295:43 - so we have to repeat this on change
295:46 - event for each and every form element
295:49 - not only for text boxes
295:51 - but also for check box radio button or
295:54 - any other form element
295:57 - but in case if you have additional logic
296:00 - to perform in the on-chain event
296:03 - alternatively you can make this as a
296:06 - separate method in the component
296:08 - and in that method you can write the
296:10 - same statement that is this third state
296:13 - along with your additional logic to
296:15 - execute
296:17 - for example every time when the text box
296:19 - value has been changed you want to make
296:22 - a http request to server
296:24 - so you can do that by calling another
296:27 - method
296:28 - for the on-chain event
296:31 - this is how you create two-way binding
296:33 - in react
296:40 - suppose the requirement is that
296:42 - when the user clicks this login button
296:45 - you want to check whether the email and
296:47 - password is correct
296:49 - and show the feedback to the user saying
296:52 - that either successful login or
296:54 - invalid login
296:57 - so when the user clicks on the submit
296:59 - button
297:00 - you can access the updated values of the
297:02 - text box that are entered by user
297:05 - by using this dot state dot email and
297:08 - this dot stated password
297:11 - while writing the code in the button you
297:13 - need not worry how to get the values
297:16 - from the actual text boxes
297:18 - because in the on change event of the
297:20 - text box we are already updating the
297:22 - state
297:24 - so that you can access the latest value
297:27 - of the text box in the button click
297:29 - method itself
297:32 - so
297:33 - in the login.jsx file
297:36 - for the due tag let me add text write to
297:39 - display the button right side
297:42 - and already we have on click event for
297:45 - the button
297:46 - that calls on loginclick method that is
297:49 - written here
297:52 - and also in the state
297:54 - let me make the email and password as
297:56 - empty string
297:58 - because we don't want to see the
298:00 - default values in the text boxes of
298:02 - login form
298:05 - and now
298:07 - in the login click method
298:10 - let's write your logic for example if
298:12 - this dot state dot email is equal to
298:16 - some dummy email for example
298:19 - admin gmail.com
298:21 - or admin test.com
298:24 - and password is admin 123 for example
298:28 - of course this is a dummy example we are
298:30 - not connecting to any database in this
298:32 - application as of now
298:35 - we will learn to make http requests in
298:38 - the further sections
298:40 - but for time being we are checking some
298:42 - dumb email and dummy password
298:45 - so if both email and password are
298:48 - matching
298:49 - then we have to show a success message
298:52 - to the user
298:54 - otherwise some error messages to user
298:59 - in order to show a message to user what
299:01 - we have to do
299:02 - since we cannot show directly on the web
299:04 - page
299:06 - we have to create a property called
299:08 - messages for example
299:10 - and update your message into that
299:12 - message property
299:14 - and then render the message property
299:17 - somewhere near the button
299:20 - let's try
299:21 - let me go to the constructor
299:23 - and in the state of the component let me
299:26 - add a property called message
299:30 - by default it is empty string that is
299:32 - empty codes
299:35 - and after that
299:36 - let me update that message property
299:39 - after clicking on the button
299:42 - so in case of success
299:44 - message ascends to
299:47 - some value for example successfully
299:49 - logged in
299:52 - and i wish the same should be in a green
299:54 - color so instead of a plain string let
299:57 - me add a span
300:00 - with the class name that is
300:03 - text to success
300:04 - that means green color as per bootstrap
300:10 - and in case of error
300:13 - let me update the message as
300:15 - invalid login
300:18 - and that should be appear in red color
300:22 - that means as per bootstrap
300:24 - recommendation it is text to danger
300:26 - class
300:28 - so at the time of application launching
300:31 - by default message is empty string
300:35 - user type something in the text box
300:39 - and because of onchange
300:41 - the value gets updated in the
300:43 - corresponding property of the state
300:46 - that is either into email or password
300:49 - depending on the text box
300:51 - so user updates the email and that gets
300:55 - updated in the state dot email
300:59 - user type something in the password
301:01 - that gets updated in the password
301:03 - property of the state
301:06 - and finally he clicks on the button
301:09 - it calls on loginclick method
301:12 - by the time already state.email and
301:15 - stated password contains the updated
301:18 - values of the text box
301:19 - that are entered by user
301:23 - so
301:23 - directly you can access the updated
301:26 - values of the text box by using this dot
301:28 - state dot email and this third stated
301:31 - password
301:33 - then you are checking them
301:35 - with some dummy email and password
301:38 - and if the condition is true
301:41 - you are assigning successful login span
301:43 - tag into message property of the state
301:46 - otherwise invalid login
301:50 - sorry i must be using set state method
301:52 - right
301:54 - so set state
301:56 - message property
302:00 - like this
302:01 - and similarly in the below statement
302:03 - also
302:04 - this dot set state
302:07 - of the message property
302:10 - that is sends to the span tag
302:13 - so this is the correct code
302:16 - let's check this out
302:19 - oops there is an error invalid dom
302:21 - property class
302:23 - so for the due tag we are using class
302:26 - instead of class name it must be class
302:28 - name right
302:31 - and also it is recommended to use triple
302:34 - equal to
302:35 - instead of double equal to for
302:37 - comparison
302:39 - of course it is not must to use but
302:41 - react by default shows a warning
302:45 - that recommends you to use triple equal
302:47 - to
302:48 - i think you know that triple equal to
302:50 - checks the value as well as type
302:53 - whereas double equal to checks only the
302:55 - value but not the type
302:59 - here email and password are by default
303:02 - string type
303:04 - and the value that you mentioned in
303:06 - codes is also string type
303:09 - so triple equal to checks both type and
303:11 - value at both operands
303:15 - anyways
303:16 - let's check the output finally
303:18 - suppose i am typing some wrong email and
303:20 - wrong password
303:22 - click on login
303:24 - as you can see
303:26 - the latest values are visible in the
303:28 - console
303:29 - that is updated from the text boxes
303:34 - but we have to render the message then
303:36 - only it's visible to the user right
303:38 - so near the button
303:41 - i am rendering the message by using this
303:44 - dot state dot
303:46 - message
303:48 - and i would like to show this message
303:50 - before the button isn't it
303:52 - so let me place it
303:54 - before the button
303:56 - so we are rendering the message before
303:58 - the button
304:00 - and for the button there must be a
304:02 - margin for example
304:04 - m1
304:06 - let's recheck it
304:08 - again i am trying to type some wrong
304:10 - email address and wrong password click
304:12 - on login
304:14 - so it shows correct message that is
304:16 - invalid login
304:19 - and after that
304:21 - trying to type some correct email
304:22 - address that is admin at test.com
304:26 - and password is admin 123
304:30 - click on login
304:32 - as you can see it shows successful
304:34 - messages
304:37 - here the message property holds a
304:39 - reference to the react element
304:41 - that represents the span tag
304:44 - so as you can see the type is a span
304:48 - this is how you create simple form in
304:50 - react
304:56 - ajax is a technique to send http request
304:59 - in background
305:00 - and get the response from the server in
305:02 - background without refreshing the web
305:05 - page
305:07 - first user performs some activity such
305:09 - as clicking the button
305:12 - then browser sends a background http
305:14 - request to server
305:17 - the server receive the request
305:19 - process the request such as connecting
305:22 - to database
305:24 - and send the response back to the
305:26 - browser
305:27 - so the browser executes some code or
305:30 - function
305:31 - in the client side
305:33 - this is how a web page interacts with
305:35 - the server in these days
305:39 - to create the server side program you
305:41 - can use any server technology such as
305:44 - asp.net mvc or asp.net web api
305:49 - or node.js or python or java or any
305:52 - other equivalent
305:55 - but in this course instead of connecting
305:57 - to real database
305:59 - we are using a third party package
306:01 - called json server which makes a json
306:04 - file as a database
306:07 - here json server is extremely helpful
306:11 - that act as a fake rest api server
306:14 - which receive the request process the
306:16 - request
306:17 - and send the response back to the
306:19 - browser
306:22 - in fact json server helps ui developers
306:25 - to quickly interact with the server
306:28 - without needing to create separate
306:31 - server side program either by using
306:33 - node.js or java or python
306:38 - let me demonstrate json server
306:41 - open the command prompt window
306:44 - and install a package called
306:47 - json server
306:49 - and install it globally by using hyphen
306:52 - g
306:56 - after that you need to create a folder
306:58 - to place your database file
307:01 - here the json file acts as a database
307:06 - we have a folder called sequel and data
307:10 - and in this folder let me create a json
307:12 - file
307:13 - that acts as a database
307:16 - so switch back to visual studio code
307:20 - go to file menu new file
307:23 - and save the file
307:26 - and in the save as dialog box
307:28 - select the folder sql and data
307:33 - and specify the file name as
307:36 - react iphone db.json
307:39 - so this file acts as a database for you
307:44 - as per the rules of json server package
307:47 - you must have a json object
307:50 - that contains your array that acts as a
307:53 - database table
307:55 - for example i would like to serve a set
307:57 - of products
308:00 - so the array name is products
308:03 - and it is an array
308:06 - which contains a set of products
308:09 - which includes id
308:11 - product name
308:14 - price and quantity
308:21 - similarly you can add any number of
308:23 - products
308:25 - but already in the shopping cat
308:27 - component
308:28 - we have a set of products right
308:31 - so i am copying and pasting the same
308:33 - array
308:35 - into this particular json file
308:39 - and we have to add double quotes for
308:41 - each property name also
308:43 - like this
308:46 - so this particular file that is react
308:48 - db.json file acts as a database by json
308:53 - server package
308:56 - so switch back to the command prompt
308:58 - window
309:00 - and enter the command
309:02 - json hyphen server
309:05 - and what is your name of the database
309:07 - file
309:08 - that is
309:09 - react hyphen
309:11 - db.json file
309:14 - and in order to keep the file watch
309:16 - for file changes
309:18 - add the option hyphen iphone watch
309:22 - and also specify the port number as wish
309:25 - for example
309:27 - hyphen fn port equal to
309:29 - 5000
309:34 - so at port number 5000
309:36 - json server has been started
309:39 - and you must be able to see this url
309:41 - called localhost 5000 products
309:45 - if you copy paste this particular url in
309:48 - the browser
309:49 - you must be able to see the list of
309:51 - products that are present in the json
309:53 - file
309:55 - so we have to make the same kind of
309:57 - request asynchronously through code
310:01 - in order to make http request from the
310:03 - react
310:05 - you can use
310:06 - either javascript fetch api
310:09 - and another third-party package called
310:11 - xcos
310:13 - but in this course
310:14 - fetch api is being used
310:19 - fetch api is one of the standardized api
310:21 - in javascript to make http requests
310:26 - it can be used as alternative to xml
310:28 - http request which was used earlier
310:33 - for more information about fetch api you
310:36 - can use the website called javascript
310:38 - dot info
310:41 - so instead of having the list of
310:43 - products directly initialized on the
310:45 - shopping cart component
310:47 - let's make a request to the json server
310:50 - and get the list of products from that
310:56 - so let me make this products array as
310:58 - empty
311:01 - and as of now it will not display any
311:03 - list of products
311:06 - so let me switch to
311:08 - shoppingcat component in app.jsx file
311:12 - so in the app.jsx file
311:16 - instead of rendering login component
311:19 - let's render shoppingcat component
311:22 - which is imported from the shoppingcat
311:24 - file
311:26 - so
311:28 - now it renders shoppingcat component
311:32 - as you can see here
311:36 - and now because the array is empty it
311:39 - shows nothing in the list of products
311:42 - so
311:43 - i would like to fetch the same data from
311:44 - the json server
311:48 - it is not recommended to make http
311:50 - requests in the constructor of the
311:52 - component
311:53 - but it is always advisable to make http
311:56 - requests in the component did mount
311:58 - method
312:00 - so go to the component did mount method
312:03 - of the shoppingcat component
312:06 - you can make a http request by using
312:09 - fetch
312:11 - and
312:12 - you can specify the url to which you
312:14 - want to make request
312:17 - that is
312:18 - as shown in the command prompt
312:21 - it is http localhost 5000 and products
312:27 - so
312:29 - localhost 5000 slash products
312:33 - for this url you are making a get
312:35 - request
312:38 - yes by default it makes a get request
312:42 - optionally you can specify
312:44 - the request type as get request
312:48 - by writing method equal to get
312:52 - and by default this switch method
312:54 - returns a javascript promise
312:58 - and you can receive the same into a
312:59 - variable
313:02 - based on which you can subscribe to
313:04 - promise
313:07 - and
313:08 - you can pass an error function
313:11 - as soon as the response is restored from
313:13 - this particular url
313:15 - this particular error function will be
313:16 - executed
313:19 - where the actual response from the
313:21 - server will be received as a parameter
313:23 - in this particular error function
313:27 - so let me show the same response in the
313:29 - console
313:31 - here the method called then is used to
313:34 - subscribe to the promise
313:36 - that means as soon as the promise is
313:38 - resolved
313:40 - it is ready to call this particular
313:42 - error function which is supplied here
313:45 - and the actual response value will be
313:48 - received into this parameter
313:50 - that parameter name can be anything
313:54 - and then you are displaying the same
313:56 - response in the console.log
313:59 - now let me show the same
314:03 - every time when you run this application
314:05 - the browser makes a http request to the
314:07 - particular products
314:10 - so i just refresh the page
314:13 - apart from all other requests
314:15 - as you can see it makes a request to
314:18 - products
314:20 - so the full url is http localhost 5000
314:24 - slash products
314:26 - and we made get request
314:29 - and the response status code is 200
314:32 - which indicates that successful response
314:36 - and if you click on response tab
314:39 - you can see the actual response received
314:41 - from the server
314:44 - so i would like to convert the same
314:46 - response into object array format from
314:49 - json
314:51 - and assign the same into products array
314:56 - see by default it is in json format
315:00 - we have to convert the same into
315:02 - products array
315:04 - to convert the same into json format
315:07 - we can call a method called json
315:12 - and it returns another promise
315:16 - and let us subscribe to the same promise
315:18 - by using then
315:20 - so this particular error function will
315:22 - be executed
315:24 - as soon as the response has been
315:26 - converted from
315:27 - json format into javascript array
315:32 - so this error function will be executed
315:34 - after converting the json into object
315:37 - array
315:39 - and this error function receives the
315:40 - list of products
315:42 - as an area of objects in javascript
315:46 - so let me print the same in the
315:48 - console.log
315:50 - so console.log of products
315:54 - as you can see
315:55 - after receiving the response from the
315:57 - server like this
315:59 - the same has been converted into
316:02 - object array format
316:04 - from json
316:06 - and the same is visible in the
316:08 - console.log
316:10 - so the one what you're going to see here
316:12 - is that
316:14 - javascript array
316:17 - now i would like to finally assign this
316:20 - into
316:21 - this dot state dot products
316:24 - and how will you update the state
316:27 - so this code set state
316:29 - i would like to update the
316:31 - value of products
316:34 - equal to
316:36 - the products parameter which is received
316:38 - from the error function
316:41 - for avoiding the confusion
316:43 - i am writing short name prods
316:47 - that means products
316:49 - here products is the name of the
316:51 - property of the state
316:54 - and
316:55 - pr yes is the name of the parameter that
316:58 - is received after converting from json
317:00 - into object array
317:04 - so
317:05 - as you can see here
317:07 - the list of products loaded from the
317:09 - http request
317:11 - have been assigned to products
317:14 - and as soon as you ascend something into
317:16 - the state
317:18 - the render method will be re-executed
317:20 - right
317:22 - so at the initial run of the render
317:24 - method
317:25 - the product's array is empty
317:28 - so the map method doesn't execute even
317:30 - once
317:32 - but
317:33 - after receiving the response from the
317:35 - server since you are calling setstate
317:37 - method
317:38 - the component leads to update phase
317:43 - so during that update phase the same
317:45 - render method re-executes right
317:49 - so at that moment the products array has
317:52 - been assigned to an array
317:55 - so that the map method executes once for
317:58 - each product
318:00 - in that way you can see the updated
318:02 - output here
318:06 - this is how to fetch the data from json
318:08 - server
318:13 - but isn't it complicated to use two
318:16 - promises and two subscriptions
318:19 - and two error functions
318:22 - which is nested
318:24 - in order to solve this problem
318:26 - practically
318:27 - javascript offers async and await
318:29 - concept
318:32 - so with async and debate the same
318:34 - process can be done more easily with
318:37 - simplified syntax
318:40 - async and await uses promises internally
318:44 - but really makes it easy
318:46 - to write the code
318:48 - for example instead of using them here
318:52 - you can use something called
318:54 - await
318:57 - then promise
319:00 - that means after resolving the promise
319:03 - this particular event will be satisfied
319:06 - and the actual response will be returned
319:09 - into the specified variable
319:11 - at the left hand
319:12 - side
319:14 - so you need to write all this then
319:16 - function here
319:20 - and moreover
319:22 - instead of receiving the promise into a
319:24 - separate variable and then writing the
319:27 - await on the next line
319:29 - you can write the same event keyword on
319:31 - the left hand side
319:33 - for the fetch
319:34 - so that
319:35 - directly you can receive the response
319:38 - and print the same on the next line
319:43 - so this particular subsequent statement
319:45 - after the average will be executed after
319:48 - receiving the response from the server
319:53 - so step one we are making a request by
319:55 - using fetch
319:57 - and what kind of request we are making
320:00 - get request
320:02 - after receiving the response from the
320:04 - server
320:05 - this particular event keyword receives
320:07 - the response
320:08 - and assigns the same into the variable
320:11 - that is present at the left hand side
320:15 - and after resolving that means after
320:18 - receiving the response only the
320:20 - subsequent statements in the same
320:21 - function will be executed
320:24 - meanwhile all the remaining statements
320:27 - will be
320:28 - waiting that means will be holded
320:32 - so let's check on the browser console
320:36 - it is showing an error saying that
320:38 - cannot use
320:39 - keyword called avet
320:41 - outside the async function
320:44 - it says that the event keyword can be
320:46 - used only inside the async function
320:50 - the async function says that
320:53 - the function must be executed
320:55 - asynchronously
320:57 - unlike regular functions
321:00 - so while creating the component read
321:02 - bound method
321:04 - convert the same into
321:06 - async function
321:08 - by keeping the async keyword
321:13 - so let's try again
321:15 - now you can see the response from the
321:17 - server
321:19 - so here response is by default an object
321:22 - that contains properties such as body
321:26 - ok
321:27 - status status text etc
321:31 - but we are not interested to see all
321:33 - these details but we want to see the
321:36 - actual response
321:37 - that is available in the response.body
321:41 - but
321:42 - the response.body is by default of
321:45 - readable stream type
321:47 - so
321:48 - we have to convert this readable stream
321:50 - into actual response that is actual
321:53 - object
321:55 - so in order to read the data from the
321:57 - readable stream
321:59 - and convert the same into object array
322:01 - format
322:03 - we have to use another promise called
322:05 - response.json
322:10 - so the response.json method reads the
322:13 - data from the readable stream
322:15 - first it gets the data in the form of
322:17 - json
322:19 - and after that the same json will be
322:21 - converted into a javascript array
322:25 - and finally it gives you the data in the
322:28 - form of object array in javascript
322:32 - that can be ascend into your regular
322:35 - variable for example products
322:38 - so to do all this process it has a
322:41 - promise
322:42 - and we have to subscribe to the same by
322:44 - using await
322:47 - so wherever you want to subscribe to a
322:49 - promise we can use await
322:52 - so the subsequent statements execute
322:55 - after successfully converting the
322:57 - response body into object array
323:01 - let me display the same products value
323:03 - in the console.log
323:06 - so as you can see now
323:08 - the data is available in the form of
323:10 - object array
323:12 - which is ready to assign into the state
323:17 - still the output doesn't show anything
323:19 - because the state dot products is still
323:22 - an empty array
323:24 - so we have to assign this array into the
323:27 - state
323:29 - by using set state method
323:33 - so this dot set state
323:37 - products is equal to the variable called
323:40 - prods
323:42 - that is products in short
323:45 - so
323:46 - once the function has been converted
323:48 - into async
323:50 - you can use the average any number of
323:52 - times
323:54 - that means you can use a weight only
323:56 - inside the async function
323:59 - the difference between async and await
324:01 - function is that
324:03 - the async function says that the
324:05 - function executes asynchronously
324:09 - that means
324:10 - some of these statements may wait until
324:12 - the promise has been completed
324:16 - and after completion of the promise only
324:18 - the subsequent methods should be
324:20 - executed
324:23 - for example
324:24 - by calling the fetch method we are
324:26 - creating a promise
324:28 - and after completion of the promise that
324:31 - means after receiving the response from
324:33 - the server
324:34 - then only the value gets ascend into the
324:36 - response variable
324:38 - and it proceed to the subsequent
324:40 - statements
324:42 - and similarly we have another form is
324:45 - executed by
324:46 - response.json function
324:49 - and after completion of the response
324:51 - body into object array format
324:54 - then that particular value will be
324:56 - assigned into the products variable
324:59 - which is later is being assigned into
325:01 - the state
325:04 - definitely async and await is a better
325:07 - way of writing the code for working with
325:09 - the promise
325:10 - by using fetch api
325:14 - in this lecture successfully we are
325:16 - asserting the data into products array
325:19 - so that you can see all the list of
325:20 - products
325:21 - loaded from the database server
325:24 - that is json server in this case
325:32 - let's convert this static email and
325:35 - password into dynamic
325:37 - by using json server
325:40 - that means i would like to make a http
325:42 - request in case of login click and based
325:46 - on the response i would like to
325:48 - determine whether it is successful login
325:50 - or invalid login
325:54 - so
325:55 - switch to app.jsx file
325:58 - instead of shopping cat component
326:00 - let's render login component
326:05 - and import login from
326:07 - login.jsx file
326:11 - and go to react db.json file
326:16 - to store the list of users let me add
326:18 - another array in the david.json file
326:23 - that is users
326:25 - along with email and password values
326:31 - for example we have two users called
326:33 - scott and ellen
326:36 - scott gmail.com
326:37 - [Music]
326:39 - and scott123
326:44 - or squattest.com
326:48 - and every object must be having a
326:51 - property called id as per the
326:53 - recommendations of json server
326:56 - it must be a unique number
327:02 - so we have two users called scott and
327:05 - ellen
327:06 - in the user's array
327:07 - inside your db.json file
327:12 - make sure the json server is running
327:15 - and it shows two urls now that is
327:18 - localhost 5000 products and users
327:23 - so you need to make request to this
327:25 - particular url for the login form
327:29 - and pass the email and password as
327:31 - corresponding parameters
327:35 - then it checks for the matching values
327:38 - and only returns the matching objects
327:41 - instead of passing all as response
327:46 - so
327:47 - now switch back to the login.jsx file
327:52 - and i'm trying to use async and await
327:55 - here
327:57 - so that is
327:58 - first convert this function into async
328:00 - function so that you are eligible to use
328:03 - avet keyword here
328:07 - where response equal to
328:10 - await
328:11 - fetch of
328:13 - the url that is
328:16 - localhost 5000
328:19 - slash users
328:21 - and you have to concatenate your
328:24 - email and password values from the state
328:28 - for easier concatenation let me use
328:31 - backtick operator in ecmascript
328:36 - so that you can concatenate the email
328:39 - and password easily
328:41 - that is email equal to
328:45 - you can interpolate the email value by
328:48 - using dollar and then braces
328:51 - and supply the actual value
328:55 - so in this place the actual value from
328:58 - the state dot email will be substituted
329:02 - so overall it means that the json server
329:05 - should return the data from the user's
329:07 - array only when the email is matching
329:10 - with the supplied value
329:13 - but we have to check the password also
329:15 - right
329:18 - to supply another parameter we use
329:20 - ampersand in the query string
329:23 - and supply the other parameter name
329:26 - that is password
329:29 - and fill the actual value that is state
329:32 - dot password
329:35 - so
329:37 - we are trying to make a get request for
329:39 - this particular url
329:46 - and it returns the corresponding user
329:48 - object
329:49 - that is matching with the specified
329:51 - email and password
329:54 - if the email and password doesn't match
329:56 - it returns an empty array
330:01 - so after receiving the response from the
330:03 - server
330:04 - the response will be ascend into the
330:06 - response variable
330:09 - and after that the subsequent statement
330:11 - will be continued
330:14 - but you need to read the response body
330:17 - convert the json object into a
330:19 - javascript object by using response.json
330:22 - method
330:25 - after successfully converting the json
330:27 - object into a javascript object or
330:29 - javascript array
330:32 - this particular promise will be resolved
330:36 - so that is the reason
330:38 - we are using await keyword here
330:41 - now the body variable represents the
330:43 - actual response body that is received
330:46 - from the server
330:49 - now we have to check the condition that
330:51 - is
330:52 - if
330:53 - some body is received
330:55 - that means at least one object is
330:57 - received
330:58 - then we have to say that it is
331:00 - successful login
331:03 - in case if the array is empty array
331:06 - it means it is invalid login
331:10 - for information let me print the
331:12 - console.log of body
331:15 - so that you can see the response body in
331:18 - the console
331:21 - let's run this application
331:24 - make sure the json server is running in
331:26 - background
331:28 - i am entering some wrong email and wrong
331:30 - password
331:33 - and click on
331:34 - login
331:36 - and this is the response body that is
331:39 - empty array since the email and password
331:42 - is invalid
331:45 - but it shows successfully logged in
331:48 - because we have to check the length of
331:50 - the array
331:54 - so if the response body length is
331:56 - greater than 0
331:58 - that means at least one object is found
332:00 - in the array
332:01 - then only it has to say successful
332:04 - otherwise invalid
332:08 - now i am entering the wrong email
332:10 - address and wrong password again
332:13 - click on login
332:16 - you got the same response since the
332:18 - email and password doesn't match on the
332:21 - database.json file
332:25 - so this time it shows invalid login
332:27 - messages
332:29 - but next time i am trying to enter
332:32 - squat test.com
332:35 - and squat123
332:37 - then click on login
332:40 - it says successfully logged in
332:43 - because this time the response body is
332:45 - an array with one object
332:48 - that is the data loaded from the
332:50 - database.json file
332:54 - so since there is at least one object
332:57 - the if condition is true
333:00 - so
333:01 - since the if condition is true here
333:03 - we are updating the successful login
333:05 - message in the message property
333:09 - so it shows the correct output here
333:14 - this is how to make your login form
333:16 - dynamic by making http request
333:21 - and in case if you want to retrieve the
333:23 - data conditionally or unconditionally we
333:26 - have to use get request
333:29 - for inserting the data into server we
333:31 - use post request
333:34 - for updation of data on the server we
333:36 - use put request
333:38 - and for deletion of the data from the
333:40 - server we use delete request
333:44 - and when we use all these types of
333:46 - requests that is get post put and delete
333:50 - that is called
333:51 - restful service or restful
333:53 - implementation
333:55 - that is why we call it as restful
333:58 - services
334:04 - routing is a mechanism that maps between
334:07 - a component and url
334:10 - for example it maps like
334:13 - whenever the url is slash dashboard
334:16 - i would like to open the dashboard
334:18 - component in this place
334:21 - so let us learn how to do it
334:24 - first switch to app.jsx file
334:28 - in this case i would like to make one
334:30 - more component that is dashboard
334:32 - component
334:35 - and the dashboard component should be
334:37 - opened after successful login
334:41 - so let me create a new file called
334:44 - dashboard.jsx
334:47 - and let's create a dashboard component
334:57 - and i would like to invoke this
334:58 - particular dashboard component
335:01 - in the app.jsx file
335:05 - so as of now
335:06 - instead of login i am trying to invoke
335:08 - the dashboard component
335:12 - and import dashboard
335:15 - from dashboard.jsx file
335:19 - and it's working here
335:22 - but the same should run through routing
335:26 - in order to work with the react routing
335:29 - we need a package called react router
335:31 - dom
335:34 - so switch to command prompt
335:38 - and locate your application folder that
335:40 - is sql and react my first app
335:45 - and install a package called react
335:48 - router dom
335:51 - and add hyphen f1 save
335:54 - so that this particular package name
335:56 - gets added into the package.json file
336:02 - after installing the package
336:05 - import all the components that are
336:08 - necessary for routing
336:10 - that includes login form
336:15 - and shopping cat
336:19 - and also the customers list
336:24 - and then import route from router
336:26 - package
336:30 - now import browser router
336:36 - from react router dom
336:39 - now instead of rendering react.fragment
336:43 - render something called browser router
336:47 - which helps us to render any one of the
336:49 - routes available
336:51 - or in other words
336:53 - browser router enables routing in our
336:56 - entire application
337:00 - and first you are rendering the navbar
337:02 - that means the navigation bar
337:05 - after that
337:06 - any one of dashboard shopping catch and
337:09 - customers should run right
337:13 - so
337:14 - play something called route
337:17 - and specify the path
337:20 - so you need to map for which path which
337:23 - component should be executed
337:26 - for example in case if the path is equal
337:28 - to slash
337:30 - and exactly it is equal to slash
337:33 - in that case you want to execute the
337:35 - component called
337:37 - login component
337:40 - initially the url will be slash so that
337:43 - automatically picks up login
337:47 - let's run this
337:50 - as you can see
337:51 - the empty url that is localhost to 3000
337:54 - is understood as
337:56 - slash
337:58 - so this url is equivalent to slash in
338:01 - that case the login component executed
338:04 - on the screen
338:06 - similarly we can add necessary routes
338:09 - for other pages such as dashboard
338:12 - shopping cache and customers
338:16 - so in case if the url is dashboard
338:20 - component is dashboard component
338:24 - and for customers
338:27 - customers component
338:30 - that is customers list component
338:34 - and if the url is cat
338:37 - then the component should be shopping
338:39 - catch component
338:43 - the property called exact is optional
338:47 - but it enables us to render the
338:49 - component only if the url is exact match
338:54 - if you don't add exact for example if i
338:57 - remove exact for the cat
339:00 - for all the urls that begins with cat
339:03 - it renders the shopping cat component
339:07 - for example
339:08 - even if the url is cat slash
339:11 - something
339:13 - in that case also the shopping cat
339:15 - component will be executed
339:18 - to avoid such situation
339:21 - we use something called exact as a
339:23 - property for every route
339:27 - so let's run this
339:30 - so in case of slash login component
339:34 - in case of dashboard
339:37 - dashboard component
339:40 - and in case of cat
339:42 - shopping cat component
339:45 - and in case of customers customers
339:48 - component is working
339:51 - so based on the url changes the
339:53 - corresponding page or component gets
339:55 - opened
339:58 - here each component acts as a page
340:01 - or you can say it's a part of the page
340:05 - because in the whole app component
340:08 - we are loading a component
340:10 - that is any one of these components
340:12 - depending on the url
340:20 - so this is the routing that we have
340:22 - created which maps for each url a
340:25 - specific component
340:28 - but
340:28 - what if the user has entered a different
340:31 - url which does not exist at all
340:34 - for example he is typing something like
340:36 - this
340:37 - which does not exist at all in our
340:39 - routing configuration
340:42 - in that case apart from the navbar it
340:45 - renders nothing
340:46 - because
340:47 - this particular url doesn't match with
340:50 - any one of the routes that is defined in
340:52 - the app.jsx file
340:55 - so for that case you can define another
340:58 - component
341:00 - and that is called 404 page or 404
341:03 - component
341:04 - you can really give it any name
341:08 - so let's create a new file that is
341:11 - no matchspace.jsx
341:18 - and let's create a component
341:20 - that is no match page
341:25 - and some text like page not found
341:29 - so i would like to execute this
341:31 - particular page
341:32 - whenever the user has entered a wrong
341:35 - url
341:37 - in that case
341:38 - go to app.jsx
341:41 - and specify the path as star
341:44 - means asterisk
341:46 - which matches with any other url other
341:49 - than the above mentioned
341:52 - in short asterisk indicates all
341:56 - so it matches with anything
341:59 - and for this we cannot add exact
342:05 - because it should match with any url
342:08 - not only just asterick
342:12 - and specify the component name as
342:15 - no match page
342:17 - which can be imported from
342:20 - no match page.jsx
342:24 - and now
342:26 - whenever the user has entered some wrong
342:28 - url something like this
342:30 - it automatically opens the no match page
342:34 - after the nav bar
342:37 - always nav bar is constant because we
342:40 - have rendered it
342:41 - outside the routing
342:45 - so always it renders nav navbar
342:47 - unconditionally
342:49 - and
342:50 - any one of the routes execute based on
342:53 - the url
342:55 - but there is a practical problem here
342:58 - suppose if the url is customers
343:02 - of course it renders the customers page
343:05 - but after that at the end
343:08 - it is even rendering the no match page
343:11 - which you don't expect
343:15 - it's because
343:16 - the url customers even matching with
343:18 - this asterisk
343:21 - so
343:22 - since asterisk matches with all urls
343:25 - it always renders the no match page
343:28 - even for above urls that is dashboard
343:31 - customers and cat
343:34 - so overall your goal is that
343:36 - you want to execute either of these only
343:40 - you don't want to execute multiple
343:43 - for that case we use something called
343:46 - switch
343:47 - i will be demonstrating switch in the
343:49 - next lecture
343:55 - so we need to keep all these routes
343:57 - inside the switch tag
344:02 - so that any one of the routes only will
344:05 - execute at any cost
344:09 - no routes will execute at a time
344:15 - now we got narrowed saying that switch
344:17 - is not defined
344:19 - so let's import switch from react router
344:24 - now as you can see
344:27 - if the url is customized it loads the
344:30 - customers page but
344:32 - no match page doesn't execute unlike
344:35 - earlier
344:37 - in the same way if the url is cat
344:41 - only it executes the shoppingcat
344:43 - component
344:44 - no match page doesn't execute
344:48 - and in the same way dashboard
344:52 - and login pages are working
344:55 - only when the url is unknown
344:58 - that means other than the specified
345:00 - routes
345:01 - in that case only no matching page
345:03 - executes
345:06 - that is the use of the switch
345:09 - so switch ensures that any one of the
345:12 - routes only will execute
345:15 - in no case multiple components will
345:17 - execute
345:24 - now i would like to create the
345:25 - navigation links in the navigation bar
345:28 - for dashboard customers and the shopping
345:31 - cat
345:34 - so switch to the
345:35 - navbar.jsx file
345:39 - already we are placing something called
345:41 - home
345:42 - inside the nav bar
345:44 - so let me make it as login
345:48 - and instead of using the a tag
345:51 - we have to use something called the link
345:53 - tag in order to create the hyperlink
345:56 - for react router
345:58 - so why not the html anchor tag
346:01 - why should we use the link tag
346:04 - because the browser makes a request to
346:06 - server
346:07 - as soon as the user clicks on the
346:09 - hyperlink
346:12 - but
346:13 - we should not make a request right
346:15 - alternatively we have to load the
346:17 - component in the same page then only
346:20 - this application can be single piece
346:22 - application
346:24 - so in order to avoid sending a request
346:27 - to server
346:29 - but alternately react has to handle that
346:32 - routing
346:33 - and load the corresponding component
346:35 - into the switch
346:37 - for this case we use link
346:42 - but what are the classes that can be
346:44 - used on the regular hyperlink tag
346:47 - all of those css classes can be
346:49 - applicable even for link
346:52 - so that you can assume your link tag as
346:55 - anchor tag of html
346:59 - but instead of writing the address in
347:01 - the href attribute
347:03 - we have to write the same in the two
347:07 - so
347:08 - instead of a hrf you are writing link
347:11 - two
347:13 - and here you will specify the actual url
347:17 - that means the route path
347:20 - that route path should match with these
347:23 - route paths that are defined in the
347:25 - switch
347:26 - for example you want to create hyperlink
347:29 - to login
347:30 - so it must be slash
347:34 - so in the nav bar i'm writing link to
347:37 - slash
347:39 - and specify the css class name now
347:42 - hyphen link
347:43 - just for styling purpose
347:47 - similarly let's repeat the same syntax
347:50 - for all the remaining hyperlinks
347:54 - that is customers
347:57 - shopping cat
348:02 - and also dashboard
348:05 - let me place the dashboard at the first
348:09 - and fill the urls as a slash dashboard
348:14 - slash customers
348:17 - slash cat
348:19 - so this path must match with the path
348:21 - that you mentioned in the app.jsx file
348:27 - and also we have to import link from
348:30 - router
348:32 - so import link
348:34 - from react iphone router
348:37 - sorry it is react router dom
348:43 - so these are the hyperlinks that are
348:45 - created here
348:47 - let's run this
348:50 - as you can see you click on login
348:53 - dashboard
348:54 - customers shopping cat
348:57 - all are working fine
349:01 - and there is a starting issue here
349:03 - all hyperlinks are by default rendered
349:06 - line balance
349:07 - in order to make them horizontal
349:10 - we have to place this inside the la tag
349:13 - right
349:14 - so let me place this link tag inside the
349:17 - la tag with the class name now hyphen
349:19 - item
349:21 - and after that open another la tag
349:25 - let me repeat the same for all
349:32 - now it's correctly placed
349:36 - now as you can see login dashboard
349:38 - customized shopping cache is working
349:44 - when the user clicks on any of these
349:45 - router links browser doesn't make any
349:48 - request
349:49 - but alternatively react handles that
349:52 - route path
349:54 - and based on the path that is mentioned
349:56 - in the app.jsx file
349:58 - the corresponding component gets loaded
350:01 - inside the switch place
350:04 - so in that way first nav bar be constant
350:08 - and after that any one of these selected
350:11 - components will be executed
350:15 - and let's go to login.jsx file
350:18 - let me remove this class name call lg9
350:24 - and also
350:25 - customerslist.jsx file
350:29 - this is fine
350:31 - and then shopping cat component
350:35 - remove this class name called container
350:37 - fluid
350:40 - and then
350:42 - product.jsx file
350:45 - here
350:46 - add div class equal to row
350:51 - and wrap the entire content inside this
350:53 - particular div tag
350:57 - so close the new at the end of the
350:59 - render method
351:04 - so now all the pages are working fine
351:07 - that is login
351:08 - dashboard customers shopping cat
351:13 - now switch back to app.jsx file
351:17 - place a due tag with class name
351:20 - container fluid
351:28 - and place this new tag before the switch
351:32 - that means place the switch tag inside
351:35 - the container fluid
351:37 - so as per the recommendations of
351:39 - bootstrap
351:41 - container fluid is required
351:43 - in order to make the content look center
351:45 - of the page
351:47 - and avoid the alignment issues
351:51 - and then go to product component
351:54 - here avoid placing row
351:59 - and delete the corresponding closing tag
352:02 - all right
352:04 - now the login page dashboard customers
352:07 - shopping cat all the components are
352:09 - working fine
352:12 - but to be frank this is not enough for
352:15 - building real world react applications
352:18 - you will really require to know the
352:20 - functional components
352:22 - and also advanced concepts such as redax
352:27 - and that is where you will check out my
352:29 - full course on udemy
352:31 - that is complete react ultimate guide
352:35 - in this course we are going to build the
352:36 - full pledged e-commerce application
352:39 - along with red x
352:41 - redex toolkit
352:42 - router and bootstrap
352:46 - in this udemy course we are going to
352:48 - learn the complete react with class
352:50 - components as well as functional
352:52 - components
352:54 - for example if you can check this
352:56 - section of course project with hooks
352:59 - here we are going to learn various hooks
353:01 - such as use state use effect validations
353:05 - use callback
353:07 - and many more advanced features of react
353:10 - hooks
353:11 - and importantly context api
353:15 - and additionally in this course we are
353:17 - going to learn red x react redux redex
353:21 - thunk red x promise radix saga
353:23 - and many more latest features
353:27 - and moreover in order to properly
353:29 - understand all these concepts of react
353:31 - and red x
353:32 - one should have the proper knowledge on
353:35 - javascript concepts
353:37 - especially functions and objects
353:41 - so in this udemy course we have provided
353:43 - the prerequisites of javascript
353:46 - that is javascript functions and objects
353:49 - and also ecmascript 2015 classes
353:54 - so even though you have less or basic
353:56 - knowledge on javascript
353:58 - you need not worry in this udemy course
354:01 - we have covered all the basic concepts
354:03 - of javascript that are necessary to
354:06 - understand this react android x
354:10 - and this is the advanced version of
354:11 - e-commerce application that we are going
354:14 - to build in the udemy course
354:16 - see after entering the essential email
354:19 - and password
354:23 - we have the dashboard page
354:25 - where the user can see his previous
354:27 - orders
354:28 - and the products in the cart
354:31 - from there he can buy the product or
354:34 - delete the item in the cart
354:37 - and if you click on the store page
354:40 - you can see all the available products
354:43 - you can filter out them
354:45 - the products and brands which you don't
354:47 - want
354:50 - you can select a particular product and
354:53 - add to cart
354:54 - and the same is visible in the cart
354:57 - itself
354:58 - and from there you can either buy or
355:01 - delete
355:04 - so this is the application that we are
355:06 - going to build with react hooks in the
355:08 - udemy codes