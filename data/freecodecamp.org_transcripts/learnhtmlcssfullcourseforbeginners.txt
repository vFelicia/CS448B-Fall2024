00:00 - this beginner's course will teach you
00:01 - html and css through building and
00:04 - deploying five awesome projects and you
00:07 - will learn by solving over 75 coding
00:09 - challenges
00:10 - pair is your instructor pair borgen has
00:13 - created many extremely popular courses
00:15 - and is also the co-founder of scrimba
00:17 - this course makes it easy to learn html
00:20 - and css
00:21 - hi there free cold campers and welcome
00:23 - to this interactive scrimba course where
00:25 - you are going to learn how to build
00:27 - beautiful looking websites using html
00:30 - and css we're going to go from scratch
00:32 - so there are no prerequisites required
00:35 - however the special thing about this
00:37 - course is that it's fully challenge
00:39 - based which means that you will need to
00:41 - get your hands on the keyboard again and
00:44 - again as you progress through this
00:46 - course and if you now are a little bit
00:47 - afraid or like setting up your local dev
00:50 - environment don't worry for that reason
00:52 - we have created an interactive version
00:55 - of this course over on scrimba.com there
00:58 - you'll be able to solve all of the
01:00 - challenges directly in your browser so
01:02 - just click on the link below and you'll
01:04 - get to that interactive version now if
01:06 - you prefer to instead solve the
01:08 - challenges locally i've created a github
01:11 - repository that you can clone and there
01:13 - you'll get access to all of the starter
01:15 - files for the challenges one final thing
01:17 - if you like this course please give it a
01:19 - thumbs up here at youtube that is highly
01:22 - appreciated and if you have any feedback
01:24 - for me just reach out to me at twitter
01:26 - at pierre borgen
01:28 - with that let's get started
01:33 - hello there my dear internet friend i am
01:36 - so happy that i get the opportunity to
01:38 - teach you two of the most important
01:40 - technologies on the world wide web html
01:43 - and css and who am i my name is pierre
01:46 - i'm the ceo of scrimba and i'm also a
01:48 - front-end developer and coding teacher
01:50 - and over a million students have gone
01:52 - through my tutorials when i'm not coding
01:55 - i enjoy posing in front of fast cars
01:58 - but enough about me let's talk about
01:59 - what you are going to build with your
02:01 - own two hands throughout this course
02:04 - the first project you'll build is the
02:06 - world's most popular website
02:08 - thegoogle.com homepage you're also going
02:10 - to build a space exploration landing
02:12 - page a digital business card and even a
02:15 - birthday site which we are going to
02:16 - deploy to the web so that you can send
02:18 - it off to your best friend on their
02:20 - birthday to make them feel special
02:23 - because check it out it has these
02:25 - virtual birthday presents that reveal
02:28 - themselves when you hover over them so
02:30 - this gift says here's how happy i am for
02:32 - you today and when your friend hovers
02:34 - over it boom they will feel your love
02:38 - flowing to them through the magical
02:40 - tubes of the internet
02:42 - and we are going to build all of this in
02:44 - html and css
02:46 - so now you're probably wondering well
02:48 - what is html it is short for hypertext
02:51 - markup language
02:54 - oh my god i'm getting tired of all this
02:57 - theory let's instead say that you're
02:59 - gonna build a car well then you'd start
03:01 - with probably gathering the contents of
03:03 - the cars like tires doors steering wheel
03:07 - mirrors and stuff like that and that is
03:09 - kind of the html of your car when you
03:11 - stitch it together you at least have the
03:12 - shell of a car the next step is probably
03:15 - to paint the car so that it looks good
03:17 - and that's the css and finally if you
03:19 - want your car to drive you've got to
03:20 - give it an engine and that is kind of
03:22 - the javascript of your car or very often
03:25 - referred to as js
03:28 - now in a world wide web context the html
03:30 - is then the content of the website that
03:33 - is buttons images text and so forth the
03:36 - css sd styling and the javascript is
03:39 - what allows your website to solve
03:41 - problems so that users for example can
03:43 - check off tasks communicate with
03:45 - databases you can also handle payments
03:47 - and so forth now we're only going to
03:49 - focus on html and css in this course and
03:52 - then you can learn javascript and
03:53 - another course i've created here on
03:55 - scrimba as well
03:56 - but knowing html is already hugely
03:59 - valuable in today's job market and is
04:02 - also the most natural first step as you
04:04 - embark on a journey into the world of
04:06 - web development so i hope you are ready
04:08 - for this let's get started
04:13 - the french philosopher rene descartes
04:16 - once said three clever words pogito ergo
04:20 - zum which translates in english to i
04:23 - code therefore i am
04:25 - so let us prove to ourselves that we
04:27 - actually do exist by coding this out in
04:30 - html and the way we do that is actually
04:33 - not too different from how you would
04:35 - write this out in a regular text editor
04:37 - as there you would simply write out the
04:39 - sentence and then if you wanted it a bit
04:41 - more prominent you'd probably highlight
04:43 - it and then click on normal text here
04:46 - and choose another content type for your
04:48 - text
04:49 - you can see heading one heading two
04:50 - heading three let's hover over heading
04:53 - one and then click on it and there you
04:55 - can see that the text became a lot more
04:57 - prominent it became a heading 1. now if
05:00 - we want to do this in html we'd simply
05:02 - create an html file which you can see
05:04 - here it's called
05:06 - index.html as that is a common name to
05:08 - give your html files
05:10 - and here i would write
05:12 - icode
05:13 - therefore
05:14 - i am
05:16 - now if we open up a browser and point
05:18 - this browser to our html file and then
05:21 - run it then we can see that the text
05:23 - indeed appears in the browser
05:25 - however it's pretty small so if we
05:28 - wanted to turn it into a heading 1
05:29 - instead what we do is wrap the text in
05:32 - html tags
05:34 - so before the text we'll do this
05:37 - two angle brackets with the text h1
05:40 - inside of them that's short for heading
05:42 - one
05:43 - and then at the very end of the text i
05:45 - would do the same h1 but since this is a
05:47 - closing tag and not an opening tag i
05:50 - would also have to give it a slash
05:52 - before the text
05:54 - and now if i rerun the code
05:56 - there you go we have made our text a lot
05:58 - more prominent
06:00 - now i think our website should give
06:01 - proper credit here so let's write rene
06:04 - the cart underneath the h1
06:07 - like that if we now rerun the code you
06:09 - can see that
06:10 - the text is just normal it's not an h1
06:13 - that's because it is only the text which
06:16 - is within the opening h1 and closing h1
06:19 - that gets formatted
06:21 - as a proper heading in the browser in my
06:24 - view this line right here should be a
06:25 - bit bigger i want it to instead look
06:28 - something like this where the name is
06:30 - pretty thick and big but not as big as
06:33 - the heading one and that brings me to
06:35 - your first challenge i'm going to paste
06:37 - it in here so what you are going to do
06:39 - is try to make our web page look like
06:42 - the design in the provided slide and if
06:44 - you are struggling to think of what kind
06:46 - of html tag you'll have to wrap this
06:49 - name in well i've got a little hint for
06:51 - you what comes after one
06:53 - so pause this scrim jump into the code
06:56 - and try to solve this challenge right
06:58 - now and then when you return back to me
07:00 - i will of course show you the solution
07:01 - as well
07:02 - good luck
07:08 - okay hopefully that went well way to
07:10 - solve this is by instead of using the h1
07:14 - using its smaller sibling the age two
07:17 - like that it has the exact same
07:19 - so-called syntax as the age run so
07:22 - instead of a one you use a two
07:25 - if we now run this
07:26 - there you go we have achieved the design
07:28 - we wanted so great job let's move on
07:35 - before we move on to the next challenge
07:37 - there's one thing i want to make sure
07:39 - that you are aware of and that is that
07:41 - if you have an html file locally on your
07:44 - computer and you have a browser what you
07:46 - can do is simply drag and drop that file
07:49 - into the browser and then it'll be
07:51 - rendered
07:53 - so that is actually more or less the
07:54 - same thing that's happening here on
07:56 - scrimba though here we have a mini
07:58 - browser and the text editor inside of
08:01 - well your browser because scrim by
08:03 - itself is browser based so a little bit
08:05 - meta but it's essentially the same thing
08:08 - okay now it's time for you to get some
08:10 - more muscle memory on how to write html
08:12 - tags and also get to know two new tags
08:15 - because i want you to create a news
08:17 - article and more specifically this news
08:19 - article right here which has a title
08:21 - that says humans have reached mars it
08:23 - has a subheading right here and also
08:26 - some regular text
08:27 - and the html tags are h1 for the title
08:30 - h3 for this one you haven't used an h3
08:33 - for but i think you know how to do it
08:35 - and then there's finally a p tag for the
08:37 - text at the bottom p is short for
08:39 - paragraph
08:40 - and i have provided a little syntax
08:42 - example for you here however if you've
08:45 - understood the logic of how to write
08:46 - these tags by now it shouldn't come as a
08:48 - surprise how you do that
08:50 - okay here is also the text so that you
08:52 - don't have to write all of that out you
08:54 - can just copy paste it instead so now
08:57 - starting here on line 13 write the html
08:59 - we need in order to create this news
09:02 - article
09:07 - okay hopefully that went well let's
09:09 - start with the h1 i'm going to create
09:11 - the open and closing tag and then paste
09:14 - in the text like that running the code
09:16 - yes
09:17 - it works moving on to the h3
09:22 - copying the text
09:25 - then rerunning the browser and there we
09:27 - go
09:28 - finally there is the paragraph
09:32 - like this
09:35 - re-running the code and there we go we
09:37 - have achieved this exact layout great
09:40 - job let's move on
09:45 - now you're going to learn about images
09:47 - because i really think our mars article
09:50 - needs an image the way to do that is by
09:52 - using the img tag
09:54 - so we start with our angle brackets and
09:57 - then write simply img inside of those
10:00 - and what's unique about this tag is that
10:02 - you don't need a closing tag so there is
10:04 - no closing img as there is a closing age
10:08 - run or closing paragraph this is simply
10:11 - not needed so it's often called a
10:13 - self-closing tag and some people use the
10:16 - slash at the end of the opening tag like
10:19 - this just to signify that it is closing
10:21 - itself however it's not really needed so
10:24 - we can skip it and i think in general
10:26 - that less code is better code so i am
10:28 - just going to skip it however if you
10:30 - prefer to have it like this that's
10:32 - totally fine as well okay enough syntax
10:35 - how do we get this image to work because
10:37 - right now if we re-render this page
10:40 - nothing has happened and that is because
10:42 - we haven't told the image tag which
10:44 - image we want to render and the way to
10:46 - do that is by writing src which is short
10:49 - for source and then we write equals then
10:52 - two quotes because inside of these two
10:54 - quotes we're going to specify the image
10:56 - we want to render and here on the left
10:58 - hand side you can see i have
11:00 - mars.jpg it is in the same directory as
11:03 - our index.html file meaning i can simply
11:06 - do mars
11:08 - dot jpg then run the code and there we
11:11 - go we have our image that is super cool
11:15 - however you can see that this image
11:17 - behaves a little bit differently from
11:19 - our paragraph for example because
11:21 - where's the paragraph take up the entire
11:23 - width the image just take up whatever
11:26 - width it needs leaving us with white
11:28 - space on the right hand side if the
11:29 - browser is too wide or cutting off the
11:32 - image if the browser is too narrow and i
11:35 - actually want this image to behave like
11:37 - our other paragraphs so i'm going to
11:39 - show you a little hack to do that
11:41 - because normally you'd use css for doing
11:43 - this but there is a little trick we can
11:46 - use by simply utilizing the with
11:48 - attribute that is an attribute just like
11:51 - source is an attribute and it uses the
11:53 - same syntax we'll do with equals and
11:56 - then two quotes and then inside of the
11:58 - quotes we can write for example 100
12:01 - percent we now rerun this you can see
12:04 - yes our image is now scaling with the
12:08 - size of our browser looking super neat
12:11 - now as i said this is a hack so if you
12:13 - show this around to people you might get
12:15 - this annoying guy saying well
12:18 - actually that's not valid html according
12:20 - to the specification but you know what
12:23 - let's not care about that at this point
12:25 - you should not give a darn about
12:27 - specifications validity in aka correct
12:30 - html you should instead look at yourself
12:33 - like a hacker who grabs whatever tool
12:35 - you need in order to get the job done so
12:37 - now we're going to use this even though
12:39 - we know it's a hack because later down
12:41 - the line you're going to learn the
12:42 - proper way of doing this using css the
12:46 - language we use for styling websites so
12:48 - with that out of the way i want to show
12:50 - you one more thing before i give you a
12:52 - challenge because one thing that's super
12:54 - cool is that you can actually borrow
12:56 - images from wherever you want online so
12:59 - if you find an image you like you can
13:00 - borrow it and use it in your project let
13:03 - me show you how so if we google mars for
13:05 - example
13:06 - and click on the images tab and then
13:08 - click on whatever image we think is cool
13:10 - for example this one right here and then
13:12 - in this image view on the right hand
13:13 - side here you can right click and choose
13:16 - copy image address once you've copied
13:18 - that you can simply paste it into the
13:21 - source attribute so i'm going to remove
13:24 - mars.jpg and paste in the image address
13:27 - which i just copied if we now run the
13:30 - code you can see there we go we have
13:32 - borrowed this super cool image from
13:35 - another website online
13:37 - so it's time for a challenge what i want
13:40 - you to do now is add a second image to
13:42 - our article i want you to find one via
13:45 - google and then place it under the h1
13:48 - element but above the h3 element so that
13:50 - is right here and finally remember to
13:53 - use the width attribute to make the
13:55 - image as wide as the other elements
13:57 - i'm going to leave you here with the
13:59 - mars image again and wish you good luck
14:01 - go ahead and solve this challenge right
14:03 - now
14:06 - okay hopefully that went well what you
14:08 - need to do is write the angle brackets
14:10 - img and set the source to whatever image
14:13 - you found online i'm going to reuse the
14:15 - one i found earlier like that if we're
14:17 - rendering this
14:19 - this is a really wide image by default
14:21 - that's not what we want we want to scale
14:23 - with our browser so we need the with
14:25 - attribute with equals a 100 percent like
14:30 - that and now we have two super cool
14:33 - images in our article
14:35 - both scaling up and down
14:37 - with the size of the browser great job
14:40 - let's move on
14:44 - okay now you're going to learn about
14:46 - something called nesting which is the
14:48 - act of nesting html elements inside of
14:52 - other html elements so let me show it to
14:55 - you in practice let's say that we want
14:57 - to group all of these elements here
14:59 - together what we then do is above all of
15:02 - the html tags write another html tag and
15:06 - in this case we'd use the so-called div
15:08 - which is short for divider however i
15:11 - don't think that is a very good name i
15:12 - would rather call this for example a
15:14 - container though div is what it's called
15:16 - so we're just going to have to stick
15:18 - with that now in order to nest elements
15:20 - inside of this div we'd write the
15:23 - closing tag below all of the html tags
15:26 - in our article and then for readability
15:28 - purposes we'd indent all of the tags in
15:30 - our article so now our h1 image h3p and
15:34 - image here are all children of this div
15:37 - tag right here this doesn't change our
15:39 - layout at all so this div tag here is
15:43 - invisible however it has now given us
15:45 - the ability to target the entire article
15:49 - just by targeting this div right here
15:51 - and that is useful if we for example
15:53 - want to add some styling to our entire
15:55 - article using css or somehow manipulate
15:58 - it using javascript which is the
16:00 - programming language that you use in
16:02 - browsers and very often you'll actually
16:04 - see a ton of divs on a page so for
16:06 - example you'd see another div around
16:09 - this image element here which then would
16:11 - have been indented yet another time in
16:13 - order to signal that this is indeed a
16:15 - child of this div which again is a child
16:18 - element of this div now if we were to
16:21 - visualize an html document it would look
16:23 - something like this you'd have for
16:25 - example a div up here and it would have
16:28 - two children which could be their own
16:30 - divs like this
16:31 - and then this left hand div here for
16:33 - example have an image tag as its first
16:35 - child and also an h3 as his second child
16:38 - the other div on the right hand side
16:40 - could have an h1 tag as its child p tag
16:43 - as its child maybe even another div as
16:45 - its child and then if we go yet another
16:48 - level deep this paragraph tag might have
16:50 - its own child which could be for example
16:52 - an a tag which you haven't learned about
16:54 - yet but which you'll learn about soon as
16:56 - that is the so-called anchor tag that
16:58 - allows you to create links on websites
17:01 - and looking at this visualization you
17:03 - might think well this kind of looks like
17:04 - a family tree and yes it does and that
17:07 - is exactly why we call this structure
17:10 - the html document tree because we are
17:13 - inside of an html document and how they
17:15 - are nested inside of each other becomes
17:18 - kind of like a tree where you have a
17:20 - trunk and then branches going out from
17:22 - that and then yet again new branches
17:24 - going out from those branches and so on
17:27 - and so on
17:28 - so now that you know that let's move on
17:30 - to the next grim
17:35 - okay now we're gonna use your newly
17:37 - acquired internet super powers in order
17:39 - to perform a little practical joke
17:42 - because you might have a friend who is
17:44 - far too obsessed with a sports team for
17:46 - example i myself am a manchester united
17:49 - fan and one of the worst things i can
17:51 - imagine is if some rich billionaire buys
17:54 - the club and changes its name that would
17:57 - make me truly outrageous so what we're
18:00 - gonna do now is change the news on bbc
18:03 - sports so that you then can show this
18:05 - page to a man united fan and thus make
18:08 - them really upset while you get a good
18:11 - laugh
18:12 - so let's go ahead and do this here on
18:14 - the bbc sports page on this top article
18:17 - here i'm going to right click on the
18:19 - text and then you can see it gives me
18:21 - the option to choose inspect
18:23 - now note that this is on a chrome
18:25 - browser as that is what i'm using if
18:27 - you're in a different browser there
18:28 - might be slightly different steps here
18:30 - or a different wording but overall in
18:33 - general the steps are the same so i'm
18:35 - going to click on expect and then you
18:37 - can see that it opens up this
18:39 - panel on the bottom of the browser this
18:41 - is called the developer tools and here
18:44 - you can see we are in the elements tab
18:46 - and that shows us the html elements that
18:49 - are on the page
18:51 - and here the one we have chosen now
18:53 - which happens to light up this area on
18:55 - the bbc site contains the title of our
18:58 - article and it is an a tag which i've
19:00 - just briefly mentioned and that you're
19:01 - going to learn more about later now we
19:04 - can't see any text here so i'm going to
19:06 - click on this age tag and there you can
19:08 - see it contains an h3 tag nested inside
19:11 - of it if we click on that one as well
19:13 - you can see that there we see the text
19:16 - that is rendered in the browser so here
19:18 - we can double click on that text and
19:21 - change it for example to something as
19:22 - awful as jeff bezos to buy man united
19:26 - and rename the club after himself oh my
19:29 - god that is about the worst piece of
19:31 - news any united fan can read so if we
19:34 - now hit enter there you can see boom we
19:37 - have changed the text on bbc now let's
19:40 - click on this paragraph here as well
19:42 - open it up because there we can also
19:44 - change the text that is written
19:46 - underneath the title let's paste in the
19:47 - u.s billionaire says he doesn't follow
19:50 - the premier league but wants to own the
19:52 - club to grow his personal brand
19:54 - this just gets worse and worse so now if
19:57 - we hit enter that is also rendered in
19:59 - the browser now i'm going to scroll a
20:01 - little bit up in the dev tools here and
20:03 - hover over this div tag here because as
20:05 - you can see that highlights our image so
20:08 - it seems to be that our image is nested
20:10 - inside of a div tag let's open it up by
20:12 - clicking on this triangle and there we
20:14 - can see another div tag well okay still
20:17 - highlighting the image let's open up
20:19 - that one as well oh wow
20:21 - there we have yet another div tag a div
20:24 - inside of a div inside of a div this is
20:26 - web development in a nutshell let's open
20:28 - it up again and there yes we can see our
20:30 - image tag i'll scroll a bit down and you
20:34 - can see there are tons of different
20:36 - attributes here we're going to ignore
20:38 - almost all of these and then instead
20:40 - direct our attention towards the src
20:43 - attribute that one we know because that
20:45 - is the one we need to change in order to
20:47 - change this image so now let's open up a
20:50 - new window search for jeff bezos click
20:53 - on an image we like for example this one
20:55 - right here right click on it and choose
20:57 - copy image address then can do now is
21:00 - double click on this source and then
21:02 - remove the existing source inside of the
21:04 - quotes like that and then paste in our
21:07 - image of jeff bezos however if we now
21:09 - hit enter you can see nothing changed
21:12 - and that is because bbc is a little bit
21:14 - fancy here they use another attribute
21:17 - called src set which helps the browser
21:20 - render different sized images on
21:22 - different types of screens depending on
21:24 - what kind of image is appropriate for
21:26 - the given screen the website is rendered
21:29 - on so what we're going to do here is
21:31 - just double click on the src set so that
21:33 - everything's highlighted and just delete
21:35 - all of it and then hit enter and boom
21:38 - there you go we have jeff bezos looking
21:41 - pretty ready to acquire this football
21:43 - club and rename it bezos united finally
21:46 - i'm going to close this panel by
21:48 - clicking on the x in the right corner
21:50 - here and there you go we have our
21:52 - article so now the final step is just to
21:54 - take this site show it to someone who is
21:56 - a manchester united fan and get a good
21:59 - laugh
22:00 - now a final notice if you refresh this
22:03 - page you will lose your changes because
22:05 - you only made your changes locally and
22:07 - when you refresh it the entire page gets
22:10 - the fresh data from the database of bbc
22:12 - and not from whatever local changes you
22:15 - did and since it is local that also of
22:16 - course implies that your changes only
22:18 - happen on your computer you don't change
22:21 - bbc in production of course so go ahead
22:23 - and play around with some sites online
22:26 - see if you can come up with a fun little
22:28 - practical joke for a friend
22:30 - have fun and i'll see you in the next
22:32 - scrim
22:36 - now you're going to learn about your
22:37 - very first interactive html element and
22:40 - that is the button tag because the
22:42 - buttons are all over the web so to
22:44 - create a button simply start with your
22:46 - angle bracket and a button opening tag
22:49 - and then a button closing tag like that
22:51 - and in between the two tags you write
22:53 - whatever text you want inside of your
22:55 - button
22:56 - now as you can see it's styled with a
22:58 - background color that also has a border
23:00 - around it and you can even click it now
23:03 - this button doesn't do anything in order
23:05 - to hook this up with some kind of
23:07 - feature for example trigger a purchase
23:09 - then you'd have to learn javascript and
23:11 - that is outside the scope of this course
23:13 - but something you'll learn later in the
23:15 - front-end developer career path so for
23:17 - now our button will just be there and
23:19 - pretend to do something while actually
23:21 - being pretty useless now that you've
23:23 - seen this once i want to put you on the
23:25 - spot and give you a challenge i want you
23:27 - to create a layout according to the
23:29 - design in this slide so imagine that you
23:33 - are building a website where people are
23:35 - to sign up then it would be very natural
23:37 - to have something like this where you
23:38 - have an h1 at the top welcoming them a
23:40 - paragraph with a little message and then
23:42 - a sign up button so i want you to create
23:45 - this layout you don't have to write the
23:47 - text because i've provided it here just
23:49 - make sure that you set up the html tags
23:51 - correctly so that it renders properly on
23:54 - the page
23:55 - good luck
24:00 - okay hopefully that went well let's now
24:02 - do it together i'll start with the
24:04 - welcome h1 tag like that paste that in
24:08 - and boom there we go
24:10 - next up there's the paragraph
24:12 - opening tag closing tag then pasting the
24:15 - text in between running this code it
24:17 - still looks correct
24:19 - finally the button like that with sign
24:22 - up written inside of it and boom there
24:25 - we go we have our completely useless
24:27 - signup form that doesn't do anything but
24:30 - in the next scrim we're going to add on
24:32 - to this so stay tuned and then i'll see
24:34 - you there
24:38 - the sign up section we have here is
24:40 - actually pretty useless because there's
24:42 - no way for our users to add for example
24:45 - their username or password so in this
24:47 - script we're gonna fix that which leads
24:49 - us to the input tag the input tag is
24:52 - just like images a self-closing tag so
24:54 - we only write the opening tag and not
24:56 - the closing tag like we do with buttons
24:58 - for example however we have to specify
25:01 - what kind of a type our input should be
25:03 - so it has this type attribute
25:06 - just as the image has a source attribute
25:08 - and the value of the type can be a range
25:10 - of different options but we're going to
25:12 - start off with the most common one and
25:13 - that is text
25:15 - if we run this you can see we get this
25:17 - nice little text box in the browser
25:19 - another handy attribute is the
25:21 - placeholder that's where we can give the
25:23 - user a hint about what kind of data
25:25 - we're asking for so for example enter
25:28 - username like that if we run this you
25:30 - can see it says enter username okay
25:33 - let's do a mini challenge we of course
25:35 - want them to enter their password as
25:36 - well so i want you to create a new input
25:38 - field on line 4 which is identical to
25:41 - the one on line three though it should
25:42 - say enter password in the placeholder as
25:45 - opposed to enter username and don't just
25:47 - copy this line and change this word i
25:50 - want you to get some muscle memory here
25:52 - so go ahead and do that right now
25:59 - okay hopefully you did like this input
26:02 - type equals text
26:04 - placeholder enter password like that
26:08 - and there we go now you can enter a
26:10 - username and a password however in the
26:13 - real world passwords are never exposed
26:15 - like that the characters are always
26:17 - masked and the way we achieve that is
26:19 - simply by changing the type from text to
26:22 - password like that if we run the code
26:24 - now you can see the username is shown
26:26 - but the password is a mask really nice
26:29 - and speaking of this type attribute here
26:32 - it can take a range of different values
26:34 - which turn into really interesting
26:36 - interactive elements on the page
26:38 - for example you can do type equals date
26:41 - let's say you want the user to add their
26:43 - birth date during sign up and then you
26:45 - get this nice little date picker or you
26:47 - can do type equals time for example if
26:50 - you want the user to be able to
26:51 - configure when they should get some kind
26:53 - of notification that gives the user a
26:55 - nice time picker
26:57 - or let's say you want to give the user
26:59 - way to configure the theme of their
27:01 - profile with colors then you can do type
27:03 - equals color and then you get this
27:05 - powerful color picker where the user can
27:07 - add basically any color there is through
27:09 - moving around on these dots so the input
27:12 - tag is a really versatile tool in your
27:14 - toolbox
27:16 - okay let's move on to the main challenge
27:18 - because i want our users
27:20 - to have profile pictures which means
27:22 - that you need to add an html input field
27:25 - that lets them upload image files and
27:28 - i'm not going to tell you what kind of
27:30 - type that input field has
27:32 - i'm just going to show you how it looks
27:34 - or just like this you've probably seen
27:35 - it online before it's basically a button
27:38 - and when you click it it lets you choose
27:39 - an image from your local file system and
27:42 - the reason i want you to figure out what
27:44 - the type attributes should be here is
27:46 - because being good at googling is
27:48 - actually a huge part of being a good
27:50 - programmer and the two are actually not
27:52 - that easy to separate from each other so
27:55 - this gives you a way to practice those
27:57 - googling skills and i'm going to give
27:59 - you a hint that the keywords you should
28:01 - use are found in this last sentence
28:04 - right here
28:05 - so go ahead and solve this challenge
28:07 - right now and then i will of course show
28:09 - you the solution when you return back to
28:11 - me
28:23 - okay hopefully that went well let's do
28:25 - this the keywords i think are important
28:28 - here are html input because we know
28:30 - we're looking for an html input tag and
28:33 - then what is our intent well it is to
28:35 - upload image files and i think google
28:37 - can handle this just by combining html
28:39 - input upload image files if we just
28:42 - paste that into google let's see what we
28:44 - get and as you can see when we search
28:46 - for that we get a first hit from
28:48 - developer.mozilla.org
28:50 - let's click into that and here you can
28:52 - see the title is input type equals file
28:55 - and we get this little code snippet here
28:57 - it also says input elements with type
28:59 - file let the user choose one or more
29:01 - files from their device storage sounds
29:04 - pretty good so far let's zoom in on the
29:06 - code here and there you can see that
29:08 - they are actually using the profile
29:09 - picture example themselves choose a
29:11 - profile picture with this button which
29:13 - looks suspiciously similar to what i
29:15 - just showed you a couple of minutes ago
29:17 - so i think we've found it what we're
29:19 - looking for is type equals file
29:22 - let's add this up above the sign up
29:24 - button but
29:27 - type equals file like that we run this
29:30 - code yes there we go we get this button
29:33 - which looks like exactly what we're
29:35 - looking for
29:39 - okay now we're gonna move on from using
29:41 - google to building google i mean how
29:44 - cool is that you've learned html for
29:47 - just about 30 minutes and now you're
29:49 - gonna build the most visited website in
29:52 - the world that is just amazing as you
29:54 - can see here on the similar web overview
29:56 - google is at the very top amongst the
29:58 - most visited websites in the world
30:00 - beating sites like youtube facebook
30:03 - instagram wikipedia and all the way at
30:06 - 10th a pornography site of course
30:09 - and by the way it's a little bit sad to
30:11 - see that this adult site has almost
30:13 - three times the average visa duration of
30:16 - wikipedia so a pretty deep insight about
30:19 - humankind right there
30:21 - anyway we are going to build google.com
30:24 - and it'll look like this
30:26 - however now you're probably wondering
30:28 - how can we make a page look like this
30:30 - this doesn't look like regular html and
30:32 - that is because i've cheated a little
30:34 - bit and added this line up here which is
30:37 - a link tag to
30:39 - styles.css and if you look at the file
30:41 - menu in the left hand side you can see
30:43 - that actually we have a file called
30:45 - styles.css which contains exactly that
30:48 - cascading style sheets which is the
30:50 - language for styling websites and which
30:52 - you're going to learn all about a little
30:54 - bit later in this course however for now
30:56 - i want you to completely ignore this
30:59 - what you should do instead is just
31:01 - create the four html tags we need in
31:04 - order to create a google.com clone and
31:07 - then this css will be pulled in and take
31:10 - care of styling the elements as they
31:12 - should be so that it will look like this
31:14 - and to give you a hint this is an image
31:17 - file pointing to google.png the file
31:21 - i've added here and png is just a file
31:23 - format just like jpeg you can use it in
31:26 - the exact same way as we used jpegs
31:28 - earlier on so you should know how to do
31:29 - that and this is an input field you have
31:32 - to figure out what kind of type it is i
31:34 - think you might have a clue
31:35 - this is a button on the left hand side
31:37 - and this is also a button so basically
31:39 - it is these four tags you need to create
31:41 - in order to build a clone of the world's
31:44 - biggest website so go ahead and do that
31:46 - start down here and ignore the line up
31:49 - here and then when you return back to me
31:51 - i will of course show you the solution
31:53 - as well
31:54 - good luck
32:01 - okay hopefully that went well
32:03 - if not no worries let's do it together
32:06 - so starting with the image tag for the
32:09 - google logo
32:11 - i'm going to do
32:12 - imd like that and it's a self-closing
32:15 - one so i don't need a closing tag but i
32:17 - need a source attribute and it should
32:20 - point to the google.png file so i'll
32:22 - just do google.png
32:24 - like that and let's run this and oh
32:27 - there we go we got the logo
32:30 - okay moving on
32:31 - let's do the input field also a self
32:33 - closing tag
32:38 - running the code and there we go we have
32:40 - a input field looking pretty good
32:43 - okay next up there's the two buttons one
32:46 - saying google search and one saying i'm
32:47 - feeling lucky so i'm gonna add both of
32:50 - these
32:51 - button google search
32:53 - and then since i'm lazy i'm gonna copy
32:55 - it
32:56 - and do i'm feeling lucky like that
32:59 - let's run this
33:00 - and there we go we have a google clone
33:04 - with just four html elements
33:07 - so if you did this give yourself a pat
33:09 - on the back it is fantastically well
33:11 - done you should really be proud of
33:13 - yourself and if you didn't manage to do
33:15 - it just try it again and i think you'll
33:17 - make it
33:18 - at this point it might be a good idea to
33:20 - take a little break and digest
33:21 - everything you've learned and then when
33:23 - you are ready to continue i will see you
33:25 - in the next scrim
33:29 - okay now that you've built google.com
33:32 - you probably want to showcase your
33:34 - project on some kind of a portfolio page
33:36 - so let's pretend we're creating exactly
33:38 - that
33:39 - here we have the index.html page the
33:42 - main page of our portfolio and as you
33:44 - can see it says pierre harold borgen
33:46 - developer teacher procrastinator so a
33:49 - really good description of myself though
33:51 - what it lacks is some kind of page or
33:53 - section which describes my projects
33:56 - though i have actually created the
33:58 - underlying page for exactly that over
34:00 - here on
34:01 - work.html as you can see this is a few
34:04 - tags that describes my google.com
34:06 - project however there's no way for the
34:08 - users to know this the only way they can
34:11 - get to this page now is by actually
34:13 - typing
34:14 - work.html up in the browser here and
34:16 - then it is rendered we don't want that
34:18 - instead we want some kind of link from
34:20 - the index page that is this one that
34:23 - points towards the work.html
34:26 - and in order for us to achieve that you
34:28 - have to learn about anchor tags aka
34:31 - links an anchor tag is simply an html
34:34 - tag with an a so let's open and close an
34:37 - anchor tag and write for example
34:39 - check out my projects
34:42 - here
34:43 - like that if we run this
34:46 - it seemingly looks just like our
34:48 - paragraph and we can't click it either
34:50 - and that is because for anchor tags you
34:52 - also have to provide it with an href
34:55 - attribute that's short for hypertext
34:57 - reference really fancy scary looking
35:00 - word right there don't worry about it
35:02 - all this attribute does is decide where
35:04 - the link should point to so if we do
35:06 - equal and then two quotes we can inside
35:09 - the quotes simply write work dot html if
35:12 - we now run this you can see that it
35:14 - renders as a link and when we click it
35:17 - boom we're taken to the work.html page
35:21 - really nice
35:22 - now another thing i want to show you
35:24 - with anchor tags is that you can nest
35:26 - them inside of other tags and actually
35:28 - inline in a text block so let's say that
35:31 - we want to link to google.com from this
35:34 - site then we'll create a paragraph which
35:36 - can say something like check out the
35:39 - live
35:40 - demo here
35:42 - and we only want the here word to be a
35:44 - clickable link well then we'll simply
35:46 - wrap the anchor tag around here as well
35:50 - and we'll close it before we close the
35:52 - paragraph and then we'll do the href
35:55 - paste in the url to google.com
35:58 - now this is a link that points to an
36:00 - external website not to any of our pages
36:03 - so if we run this you can see that the
36:05 - link is now only over the here word
36:07 - however if i click this link now the
36:10 - scrimba mini browser will try to head
36:12 - over to google.com and we only allow the
36:14 - mini browser to render scrimba projects
36:16 - at the moment so that won't work instead
36:18 - what i'm going to do is make this link
36:20 - open in a new tab the way we do that is
36:23 - through a new attribute so first i'm
36:25 - just going to break this into a new line
36:27 - just to improve the readability a little
36:29 - bit
36:30 - and then here i'm going to write target
36:33 - equals
36:34 - underscore blank
36:36 - now that is a cryptic way of saying that
36:40 - you want the link to open up in a new
36:42 - tab i know but if we now run this if you
36:44 - click on this link what you'll see is
36:46 - that in your main browser a new tab will
36:49 - be opened at the google.com homepage so
36:53 - i'm not going to go deeper into why it's
36:55 - called target equals underscore blank
36:58 - but this is the way to do it i of course
37:00 - wish that html had a better solution for
37:03 - this for example new tab equals yes that
37:06 - would have made a lot more sense to me
37:09 - but this is how it is you just have to
37:11 - accept it okay that was a lot of talking
37:14 - from me now it's time for challenge
37:16 - i want you to create an anchor tag that
37:18 - links back to the index.html page
37:21 - because if user ends up on this page
37:24 - they also need a way to get back to the
37:26 - main page so create that link here
37:28 - however you want and then i will show
37:30 - you the solution when you return back to
37:32 - me
37:38 - okay hopefully that went well let's
37:40 - create this anchor tag i'll wrap it
37:42 - inside of a paragraph and right turn to
37:46 - home page and then i'll simply wrap the
37:48 - homepage word in an anchor tag like that
37:51 - and point that anchor tag
37:53 - to
37:54 - index.html if we run this you can see
37:56 - return to homepage and if we click that
37:58 - we are back at the homepage
38:01 - great job let's move on
38:06 - okay we're back at our google example
38:08 - here and now i want you to add a anchor
38:10 - tag to the page because sometimes you'll
38:12 - see that google ads a little text
38:14 - underneath the buttons for example
38:16 - something about privacy like we protect
38:18 - your privacy and then with a learn how
38:20 - link then you can click on to read more
38:22 - about that so that is exactly what i
38:24 - want you to do
38:25 - i want you to add an anchor tag that
38:27 - points to blog.html
38:30 - as you can see i've added a blog.html
38:32 - file up here and i want you to wrap the
38:34 - link inside of a paragraph tag so just
38:37 - as it is here you can see it's an entire
38:39 - paragraph here
38:40 - but the anchor tag is only wrapping the
38:43 - second sentence so go ahead and do that
38:46 - right now
38:52 - okay hopefully that went well let's do
38:55 - it we'll start with the paragraph
38:57 - opening and closing tag and then we
38:59 - protect your privacy like that here
39:03 - we're going to add the anchor tag inline
39:06 - so i'll do a
39:08 - open and close
39:09 - and do an href as well point it to
39:12 - blog.html
39:14 - and the text should be
39:16 - learn how let's run this and boom there
39:18 - we go we have added a nice little link
39:21 - here if we want to learn more about
39:23 - google privacy then we can click this
39:25 - link but
39:27 - not much to see here turns out that
39:29 - privacy probably isn't as important for
39:31 - a company who makes money by showing ads
39:33 - to users
39:35 - anyway we can click on this link return
39:37 - back to google and there we are great
39:39 - job solving this challenge let's move on
39:45 - okay now we're going to talk about how
39:46 - to structure html documents because the
39:49 - structure we have here isn't actually
39:51 - correct it's a very simplified structure
39:54 - compared to how it should be though it
39:56 - does work so i didn't want to give you
39:58 - all of these theoretical boring
40:00 - structure things up front i wanted you
40:02 - to build stuff from the get-go without
40:04 - the added complexity of the proper html
40:07 - structure as my philosophy is first make
40:10 - it work and then make it better however
40:12 - now we're at the point where we should
40:14 - make it better
40:15 - so let's have a look at how to structure
40:17 - html documents properly and html is
40:20 - actually quite like us humans it has a
40:22 - head and a body and what do you place
40:24 - inside of these elements well in the
40:26 - body that's where you place the tags you
40:29 - see on the page and that is these ties
40:32 - here so our image our input button
40:35 - paragraph and our anchor tag because
40:37 - these are visible on the page now of
40:39 - course the css styling up here also
40:41 - results in a different layout but the
40:44 - link tag in itself is not something that
40:46 - is rendered on the page so it should not
40:48 - be in the body tag
40:50 - so let's just add the body right here
40:53 - ravi starting tag and then the closing
40:55 - tag down here on line nine and then
40:57 - we'll indent everything inside of the
40:59 - body like that
41:01 - so moving on to the head that's where we
41:03 - add metadata and what do i mean about
41:05 - that well it can be many things for
41:07 - example styles so this link right here
41:09 - should be inside of the head
41:12 - we'll do head
41:13 - and then close it off here like that
41:15 - other things we'll have in the head is
41:17 - the title tag so let's have a look at
41:19 - what that is
41:20 - if we navigate over to the bbc football
41:22 - page and zoom in on the top you can see
41:25 - up in the tab it has a icon it says
41:27 - football dash bbc sport
41:30 - and all of this data both the fav icon
41:33 - at the beginning here and this sentence
41:35 - is controlled by elements we place
41:37 - inside of the head tag so if we want to
41:39 - add a title text in a tab
41:41 - simply write title and then for example
41:44 - google.com would be natural to write
41:45 - here though we haven't implemented tabs
41:48 - in the mini browser here on scrimba so
41:50 - you won't see that but had we done that
41:52 - it would have looked like this though it
41:54 - of course would have said google.com
41:55 - instead so we don't need that so let's
41:57 - just remove it another thing that is
41:59 - controlled by tags inside of the heads
42:01 - tag is how articles are shown on social
42:05 - media so if we zoom out a little bit
42:07 - here and click in on this article at the
42:09 - top here and if we now were to take this
42:11 - url and share it for example on twitter
42:14 - what we then would get is a different
42:16 - heading on the twitter card than what
42:19 - the article natively has and also a
42:21 - different image than the main image on
42:23 - the article so this is metadata that has
42:26 - told twitter that if this article is
42:28 - shared on twitter we want you to use
42:31 - this heading instead of the heading that
42:33 - is inside of the article and also this
42:35 - image instead of this image right here
42:37 - so that was a lot about the head tag
42:40 - we're not going to use the head that
42:41 - much but i wanted to give you an
42:42 - understanding about why it is important
42:45 - now there's one more html tag we need
42:47 - and that is the html tag in itself which
42:51 - should wrap all other html tags so we
42:54 - need to up here at the very top right
42:57 - html and at the very bottom close it off
43:00 - and also then indent everything inside
43:03 - of it
43:03 - like that
43:05 - and then there's one more thing which is
43:07 - to me a little bit annoying that we need
43:09 - that is the doctype declaration because
43:12 - you have to tell the browser that we're
43:14 - actually using html5 and not html4
43:17 - that's just a version of the html
43:19 - specification and that is done by this
43:21 - line up here you can see it's blue and
43:23 - it starts with an exclamation mark so
43:25 - it's actually not an html tag it's just
43:28 - metadata for the browser because if you
43:30 - don't do this browser will assume that
43:32 - you're not using html5 but an earlier
43:34 - version of html and that might result in
43:37 - some quirks on the page though in 99 of
43:39 - cases there will be no difference
43:41 - between adding this and not having it so
43:43 - at times you'll probably see tutorials
43:45 - on scrimba where i've forgotten to add
43:47 - this because for the purposes of our
43:49 - example it won't make any difference but
43:52 - if you have something that you want to
43:53 - deploy to the world and have in
43:55 - production then you just have to accept
43:57 - that you need this sign up at the top
43:59 - and sometimes you'll see people write it
44:01 - in capital letters as well doesn't
44:03 - really matter i prefer having lowercase
44:05 - letters okay that was a lot of theory
44:08 - it's time to get your hands on the
44:09 - keyboard
44:10 - and luckily though we have a blog.html
44:13 - file which doesn't have the proper html
44:15 - structure so your challenge is simply to
44:18 - add the proper html document structure
44:20 - to this page and i don't want you to
44:22 - copy paste my tags but write them out on
44:25 - your own instead so that you build up
44:26 - that ever so important muscle memory go
44:29 - ahead and give this one a shot right now
44:30 - and then i will of course do it myself
44:32 - when you return back to me
44:39 - okay let's do this
44:41 - i'll start with the body
44:44 - as that should wrap our visible elements
44:46 - on the page
44:47 - like that
44:49 - then i'll do the head though we haven't
44:51 - linked to the styles on this page so the
44:53 - head will actually just be empty like
44:55 - this so i'll keep it on one line moving
44:56 - on it is the html document and that
44:58 - should wrap everything
45:00 - so i'll do like that and at the very end
45:03 - i'll add the doctype html to tell the
45:05 - browser that we are working with html5
45:08 - and not html4
45:10 - so if we now navigate over to the
45:12 - blog.html site you can see that nothing
45:15 - has seemingly changed and as goes for
45:17 - the main page itself this structure
45:19 - we've added doesn't result in any
45:21 - visible change we just have a more
45:23 - correct underlying code file to work
45:25 - with great job let's move on
45:30 - now you are going to learn about lists
45:32 - because let's say that you for example
45:34 - want to create some kind of a tribute
45:36 - site it could be for whatever for
45:38 - example
45:39 - uh i don't know the beijing winter
45:42 - olympics
45:43 - if that's one of your interests you
45:44 - might want to create a tribute site
45:46 - where you list out the top nations who
45:49 - competed or something like that and if
45:51 - so you would have to use an html list
45:54 - so let's first just figure out which
45:56 - nation actually won the most medals in
45:58 - the beijing olympics so i'm gonna click
45:59 - on the medals tab here on the olympic
46:02 - site and here we got it and zoom in a
46:05 - little bit and oh wow
46:08 - it turns out that actually norway
46:12 - my country completely
46:14 - obliterated
46:16 - the other countries with 16 gold medals
46:19 - over other nations like
46:21 - germany china and the us
46:26 - that is
46:27 - really astonishing especially
46:28 - considering the fact that the size of
46:30 - the norwegian population is this
46:33 - compared to the other nations here i
46:35 - mean way to go norway we gotta create
46:39 - this list in html okay so how do we do
46:42 - that well we have to use two different
46:45 - tags one tag for wrapping the entire
46:48 - list and another tag for each list item
46:50 - the wrapper tag
46:52 - is one called ol that's short for
46:54 - ordered list
46:56 - and then inside of the ordered list we
46:58 - place the list items the li tags
47:02 - so when we do this and write no right
47:04 - here
47:05 - render this you can see that the browser
47:08 - gives us a number as it is the first
47:10 - item in the list and also indents it a
47:12 - little bit from the left hand side
47:15 - so adding another one
47:17 - here
47:18 - it then gets the number two and is
47:19 - stacked below the first one
47:22 - so let's add the final ones
47:26 - like that
47:27 - looking pretty good we have a list just
47:30 - like on the olympic site
47:32 - now if we wanted to be a little bit more
47:34 - diplomatic here and not brag too much
47:36 - about this insane victory by norway we
47:39 - could change this ol to a ul
47:42 - that is an unordered list
47:44 - and as you can see then the numbers are
47:47 - replaced with dots
47:48 - now you might ask yourself well why do
47:50 - we need these unordered lists they look
47:52 - like kind of boring elements you just
47:54 - use in word documents or something like
47:56 - that well once you learn about css
47:59 - you'll be able to style your list
48:01 - however you want and thus make it much
48:04 - more usable if we for example head over
48:06 - to bbc sports here and right click on
48:10 - the navbar here and click inspect then
48:12 - we'll see that actually this entire
48:14 - navbar is an unordered list item
48:17 - with each of the categories being its
48:20 - own list items so lists are all over the
48:23 - web and important to learn
48:25 - okay now i'm going to remove all of this
48:28 - and give you a quick little challenge
48:30 - because i want you to create an ordered
48:32 - list inside of the body tag
48:34 - and then fill it with your top three
48:36 - favorite foods
48:38 - so go ahead and give this a shot right
48:40 - now
48:47 - okay hopefully that went well let's do
48:49 - it so we start out with an old tag
48:52 - that we're opening up and closing
48:55 - and as for the list items even though
48:57 - norway is a great winter olympics
49:00 - country it is a truly mediocre country
49:02 - when it comes to food so my favorite
49:04 - food is definitely from other places
49:06 - than where i'm from i love italian pasta
49:10 - i love japanese ramen soup
49:13 - and lately i've been really into podtai
49:17 - so there we have it rendered out on the
49:19 - page really good job learning about html
49:22 - lists let's keep up the pace and move on
49:24 - with the course
49:28 - okay now you have arrived to the main
49:31 - project of this section you are going to
49:33 - build a website about yourself and we're
49:35 - going to personalize it as well plus
49:38 - deploy to the world so that anyone
49:39 - around the world can visit this website
49:42 - it is going to be so much fun
49:44 - and here is the website itself as you
49:46 - can see it's pretty simple with hardly
49:48 - any styling by default just a little bit
49:51 - on the button and the input field here
49:53 - as with the border around this image and
49:55 - building this lightly styled design
49:58 - is the first part part one of the
50:00 - challenge and then in part two of the
50:02 - challenge we are going to go crazy on
50:04 - the styling with just a few parameters
50:07 - that you are to tweak and it's going to
50:08 - look so cool but let's not get ahead of
50:11 - ourselves here let's first just run
50:12 - through what kind of tags you need in
50:14 - order to build this website
50:16 - so first off there is an image tag and
50:19 - the image you should use should be added
50:21 - to the file system on the left hand side
50:23 - here as you can see there is a pair.jpg
50:25 - image here and the way to add an image
50:27 - to this file system is simply by drag
50:30 - and dropping it over this section
50:32 - next up there's an h1 here as well with
50:34 - the title
50:35 - of course you should write your own name
50:37 - not my name and then there's an h2
50:39 - heading as we need some fun facts about
50:42 - you the fun facts itself are built using
50:44 - an unordered list plus list items inside
50:47 - of the ul element then there is a
50:49 - paragraph with a link nested inside of
50:52 - it that should go to your linkedin
50:53 - profile
50:54 - so the point here obviously is to
50:56 - replace all of this information with fun
50:58 - facts about you with your name with your
51:00 - image your linkedin profile so that when
51:03 - you share this with the scrimba
51:05 - community other people will be able to
51:07 - get to know you better
51:08 - and then finally we have an input field
51:10 - here and a button that won't really do
51:13 - anything because we're not hooking this
51:15 - up with a real newsletter we are just
51:17 - pretending that you have a newsletter
51:19 - that people can sign up to so once
51:21 - you've done this you've completed part
51:23 - one of the challenge and you've also
51:25 - filled up this body element here with
51:28 - html tags
51:29 - next you'll move on to part two of the
51:32 - challenge what you'll do there is take
51:34 - your existing design and modify it
51:37 - so if we head over to the
51:38 - index.javascript file you can see that
51:41 - there are a bunch of so-called
51:42 - javascript functions which probably look
51:44 - really scary at this point but don't
51:46 - worry the only thing you're going to do
51:48 - here is take the word that you see
51:51 - inside of the quotes right here and
51:53 - replace them with one of the words that
51:56 - are commented out in the line above
51:58 - because this will give you the
51:59 - opportunity to change the styling on the
52:02 - page
52:03 - according to what word you change this
52:05 - argument to so what you are to do here
52:08 - is look at the name of this function it
52:09 - says favorite movie genre and what is
52:12 - that do you like space movies scary
52:14 - movies military movies romantic movies
52:16 - cowboy movies and so on and then just
52:18 - take your preference and change it like
52:21 - this so if you choose cowboy for example
52:23 - what then will happen is that the font
52:25 - on the website suddenly became like a
52:27 - western movie that's pretty cool
52:30 - and moving on
52:31 - here you are to answer what is your
52:33 - favorite fruit is it watermelon tomato
52:35 - banana if it for example is banana then
52:38 - you should replace regular with banana
52:40 - and what will then happen if you run the
52:42 - cold then suddenly your page is banana
52:45 - colored
52:46 - really nice
52:47 - so now you are a cowboy banana that's
52:50 - pretty cool
52:51 - finally there's two more parameters you
52:53 - can tweak first tell me is your favorite
52:56 - mode on your computer light mode or dark
52:58 - mode if you choose dark
53:00 - and run the code again then you can see
53:03 - the colors have flipped and now it is
53:05 - primarily dark with the brown background
53:07 - and the light yellow color
53:09 - as opposed to how it was previously with
53:11 - the yellow background and brown text
53:13 - color
53:14 - and then at the very end you are to
53:16 - choose what kind of style you like your
53:18 - edges to be
53:20 - sharp soft or round let's say you like
53:22 - round well then you'll simply replace
53:24 - sharp with round and there we go we have
53:27 - a nice round layout where the image and
53:30 - the input and button
53:31 - now have a much more round feeling to it
53:35 - so what happens here is that these are
53:37 - javascript functions that execute code
53:40 - which you can see further down in the
53:41 - index.js file and change the layout
53:44 - accordingly
53:45 - though you should ignore everything
53:47 - below this line don't even try to
53:50 - understand it it's far outside the scope
53:52 - of this course and you're gonna learn
53:53 - javascript later in the front-end
53:55 - developer path anyway so it's nothing
53:57 - for you to worry about right now
53:59 - now i'm going to reset all of these
54:02 - set these two to regular and these two
54:04 - to light and
54:06 - sharp as that is the default styling
54:08 - that we should have and then i'll leave
54:11 - you with this image right here as it now
54:13 - is your turn to build this layout
54:16 - personalize it with the javascript
54:17 - functions so that you have your very own
54:19 - completely unique website
54:22 - so go ahead and do this right now and
54:24 - then i will see you when you return back
54:26 - to me
54:31 - okay hopefully that went well let's now
54:33 - do this together first we need the image
54:36 - tag so i'm gonna do img
54:38 - the source is the
54:40 - pier.jpg which i'd already added
54:43 - yes there we can see it is rendering
54:45 - properly
54:46 - next up there is an h1
54:49 - hi my name is pear like that
54:53 - very good
54:54 - moving on we have the h2
54:56 - fun facts
54:58 - about me
54:59 - like that and then there's the
55:02 - unordered list and the list items
55:04 - so i'll do ul
55:06 - close that ul because the list items
55:08 - need to be inside of the ul and the
55:11 - first one is 36 years old
55:14 - i'm gonna copy this one
55:17 - like that and
55:19 - i live in
55:20 - norway
55:22 - and i sing
55:23 - in a choir
55:25 - and there we go looking pretty good
55:28 - next up there is the paragraph with the
55:30 - inline anchor tag
55:31 - here's the paragraph
55:34 - connect with me on
55:37 - linkedin like that
55:38 - oops it should say let me on linkedin
55:41 - here and then
55:43 - we are to wrap linkedin here
55:46 - into an ahref
55:48 - like that
55:50 - and then i'm going to paste in the url
55:52 - to my linkedin right here and if you
55:54 - actually want to connect with me on
55:55 - linkedin
55:56 - feel free to click on this link as soon
55:58 - as i've added the target equals
56:01 - underscore blank so that it opens up a
56:04 - new tab
56:05 - okay finally we we need to add the input
56:08 - and the button
56:09 - input type
56:11 - text like that and button
56:14 - with join
56:16 - newsletter as the text
56:20 - yes that worked and we finally just need
56:22 - the placeholder in the input
56:26 - and here we're going to write enter
56:28 - email
56:29 - enter email
56:30 - like that and
56:33 - that actually
56:35 - looks pretty good to me that is what we
56:38 - were looking for yes
56:40 - okay next step we are going to
56:41 - personalize it this will be easy for me
56:44 - i really love movies about space so i'm
56:47 - going to choose space here as my
56:48 - favorite movie genre it gives me this
56:50 - really neat sci-fi-ish font and i am a
56:53 - huge avocado fan so gotta do that
56:57 - looking pretty good
56:59 - i tend to prefer both light mode and
57:01 - dark mode but let's try dark yeah
57:04 - not bad
57:05 - and as for favorite edge style i'm not
57:08 - gonna do completely round not completely
57:10 - sharp but something in between
57:12 - as i think the answer often is something
57:14 - in between
57:15 - and yes there we go pretty cool website
57:19 - now the final thing i want you to do is
57:22 - head back to your note where you created
57:23 - your website and then click on the
57:26 - bottom right icon the cog wheel and
57:29 - choose download as zip because that'll
57:32 - download your project through your local
57:34 - machine and we need that in order to
57:36 - deploy this project over the next few
57:38 - scripts
57:39 - so what i'd recommend you to do is on
57:41 - your computer create a dev folder
57:44 - and move that zip file you just
57:45 - downloaded to this dev folder double
57:48 - click on it to open it that'll give it
57:50 - this long obscure id so if i were you i
57:53 - would change that to something
57:54 - understandable for example personal site
57:56 - and just save it so that you have your
57:58 - project neatly placed with a good name
58:01 - on your local computer so that we are
58:03 - ready to share it with the world over
58:05 - the next few scrims it is going to be
58:07 - epic so i look forward to see you in the
58:10 - next room after you've done all of this
58:12 - i'll see you there
58:17 - in order to get your personal site live
58:19 - on the world wide web we are going to
58:21 - use a service called netlify as it is
58:24 - both free easy to use and powerful as
58:26 - it's used by tons of professional
58:28 - developers so if you're following this
58:30 - course on scrimba.com just click on this
58:33 - slide right here and you'll be taken to
58:35 - netlify or if you're following this
58:37 - course on youtube just head over to
58:39 - netlify.com and you'll get to the exact
58:42 - same page once you're there i want you
58:44 - to click at the sign up button as
58:46 - that'll take you to an authentication
58:48 - screen where you can choose a bunch of
58:49 - different options i am going to go with
58:52 - the email option so i'll click on that
58:54 - and fill in my email and also choose a
58:56 - password then i'll click sign up which
58:59 - again will trigger netify to send a
59:01 - verification email to my inbox so i'll
59:04 - head over to my inbox and click on
59:06 - verify email that'll take me to the
59:08 - netlify onboarding page where i have to
59:10 - tell them a little bit about myself so
59:12 - here i'm going to say that i'm using
59:14 - netlify for personal reasons and opening
59:16 - up this select box here i'm going to
59:18 - classify myself as a hobby developer and
59:20 - my first project will be a personal
59:22 - slash portfolio site then i'll scroll up
59:25 - it down and give my team a name i'm just
59:27 - going to call my team peer as it's
59:29 - common to use your first name but you
59:31 - can choose whatever name you want on
59:33 - your team once you're done with all of
59:35 - that click on the setup and continue
59:37 - then you are taken to the page where you
59:39 - are to deploy your first project you can
59:41 - either import an existing project start
59:44 - from a template or deploy manually and
59:47 - that's exactly what we are going to do
59:49 - so what i want you to do here is return
59:51 - back to the folder you created in the
59:53 - previous scrim called personal site and
59:56 - then mark all of the files and drag and
59:59 - drop them into this rectangle once
60:02 - you've done that your browser might ask
60:03 - you if you actually want to upload the
60:05 - files to the site just confirm that by
60:08 - clicking on upload and then netlify
60:10 - starts its magic at this point they are
60:13 - working under the hood deploying your
60:15 - site to the web so here you might have
60:17 - to wait for a couple of minutes until
60:18 - you see this icon right here turn into a
60:21 - screenshot of your personal site now if
60:23 - that doesn't happen within a couple of
60:25 - minutes just try to refresh the site
60:27 - itself as that'll probably do the trick
60:29 - then you can simply click on this url
60:31 - right here and boom you have deployed
60:34 - your site so that anyone in the world
60:36 - can access it that is a phenomenally
60:39 - great job and you should truly be proud
60:41 - of yourself
60:42 - the final step i think you should do now
60:45 - is to share your creation with the world
60:47 - i would recommend you to use either
60:49 - linkedin or twitter as both of those
60:51 - have huge communities of developers so
60:54 - what you should do is basically what
60:56 - jolene and jess are doing here share a
60:58 - link to your personal site write a
61:00 - couple of sentences about it and also
61:02 - feel free to mention anyone else who've
61:04 - been involved in this project and add a
61:06 - relevant hashtag like jess is doing here
61:09 - for example 100 days of code that is a
61:11 - great hashtag to follow and to use as it
61:14 - puts you in touch with a bunch of other
61:16 - people online who are going through the
61:18 - same learning journey as you are so i am
61:21 - looking forward to see your personal
61:23 - site either on linkedin or twitter and
61:25 - i'm also looking forward to see you in
61:27 - the next scrim
61:31 - guess who is my favorite person in the
61:34 - world right now you are because you have
61:36 - just completed the html section of this
61:39 - course and that is really well done now
61:42 - let's have a quick look at what you've
61:44 - learned starting off you learned about
61:45 - the core html tags that is for example
61:48 - the heading tags like the h1 and h2 and
61:51 - also the paragraph tag next you learned
61:53 - about nesting which is how we place
61:55 - certain tags inside of other tags which
61:57 - again are inside of other tags creating
62:00 - this tree-like html structure
62:03 - and you learned about buttons and input
62:05 - fields which are two tags that help us
62:07 - make our website interactive so that
62:09 - users can perform actions on our website
62:12 - we also learned about the important
62:14 - anchor tag as that is what allows you to
62:16 - create links in between different
62:18 - websites or internally on a website in
62:20 - between pages
62:22 - another thing which we had to look at
62:23 - was the document structure because a
62:25 - proper html document requires a doctype
62:28 - an html tag a head tag and a body tag
62:31 - and then of course you learned about
62:33 - lists both the unordered list you can
62:35 - see here and also ordered lists and then
62:37 - at the end we did something super cool
62:39 - which was to deploy our website using
62:42 - netlify so that it lives out on the
62:44 - world wide web so at this point you
62:46 - might be a little bit overwhelmed that's
62:48 - totally okay feel free to take a little
62:50 - break now and when you return back you
62:52 - are going to learn about css aka
62:55 - cascading style sheets which is the tool
62:57 - we use in order to make our websites
62:59 - look good so that is going to be a lot
63:01 - of fun i'm looking forward to see you in
63:03 - the next section
63:07 - welcome to the second section of this
63:09 - course where you are going to graduate
63:11 - from html into the world of css or
63:15 - cascading style sheets as it stands for
63:18 - this is super exciting because now
63:20 - you'll be able to make your sites look
63:21 - beautiful as well
63:23 - so the main project of this section is
63:25 - actually the google.com homepage because
63:28 - this time around you are going to
63:30 - write the css as well
63:32 - and this probably looks a little bit
63:34 - frightening right now but don't worry
63:36 - i'm going to take you through it step by
63:38 - step and actually before we get going
63:40 - with google we're going to get you
63:42 - familiar with the syntax here and have
63:44 - some fun destroying wikipedia.org so
63:47 - it's going to be a lot of fun and we
63:48 - have no time to lose let's just get
63:50 - started
63:54 - okay so let's get you writing your first
63:57 - lines of css
63:58 - straight out of the gate
64:00 - as you can see here we have an html file
64:02 - which has a body that simply has please
64:05 - accept our cookies as text directly in
64:08 - the body tag and that is rendered here
64:10 - in the mini browser however as you'll
64:12 - notice the style doesn't exactly look
64:15 - like default browser styling and that is
64:17 - because we've added this line here which
64:20 - says link meaning it's linking to
64:22 - something and what kind of relation does
64:25 - this link cast to our html well it's rel
64:28 - stylesheet it is a sheet that contains
64:31 - styles
64:32 - and where does this sheet live well that
64:35 - is dictated by the href attribute which
64:38 - you probably recognize from anchor tags
64:40 - and it's pointing to styles.css
64:43 - and lo and behold in our file system we
64:45 - have a styles.css
64:47 - file and there we can see a few lines of
64:50 - scary looking codes you've never seen
64:52 - before perhaps however don't worry we're
64:54 - going to go through this
64:56 - so what happens here is that this css
64:58 - code is being pulled into the html file
65:01 - by this line 3 here and then it is
65:03 - applied to the website when it is
65:05 - rendered so if we were to comment out
65:08 - this line three here and re-run the
65:11 - example it'll look very boring like this
65:13 - so let's undo that it doesn't exactly
65:15 - look great now either but
65:18 - it's at least some styling although this
65:20 - cookie widget is a little bit weirdly
65:22 - designed in my opinion which leads me to
65:25 - your challenge you are going to redesign
65:28 - this cookie widget by
65:30 - changing the values inside of this body
65:34 - selector and now you might ask well what
65:37 - is a selector
65:38 - okay let's go through that because that
65:40 - is the basic css syntax you need to know
65:43 - in order to solve this challenge
65:45 - so css works by selecting certain
65:48 - elements on the page that is html
65:51 - elements and then styling them however
65:53 - you want
65:54 - and the element you select is what you
65:56 - start with when writing a css rule here
66:00 - we are selecting the body that is the
66:02 - exact same thing we're doing here and
66:04 - what's our body well that is this tag
66:06 - right here
66:08 - then in order to apply some specific
66:10 - styling to the body tag we write an
66:12 - opening curly bracket and a closed curly
66:14 - bracket and then inside of those
66:17 - brackets we have something called a
66:19 - property which in this case is color and
66:21 - a value which in this case is red
66:23 - so here we're saying that the color
66:25 - which is actually text color that's what
66:28 - color means here the text color in the
66:30 - body should be red so if i now change
66:34 - the color property from blue to red you
66:38 - can see in the mini browser we have
66:40 - changed the text inside of our body to
66:43 - red because if we head over to the html
66:46 - this text is indeed inside of our body
66:50 - now
66:50 - as you might have noticed as well the
66:52 - property is followed by colon and the
66:55 - value is followed by semicolon and you
66:58 - have to have that notation
67:00 - otherwise you'll break the example
67:03 - so what i want you to do now is redesign
67:06 - this cookie widget
67:08 - make sure you change all of the listed
67:10 - css properties that's background color
67:13 - font size font way text align and margin
67:15 - top and what you'll change it to is up
67:18 - to you but i've given you the hint of
67:20 - what kind of values the properties
67:22 - expect here in the comments on the right
67:25 - hand side you can see comments in css is
67:28 - done with this star and slash character
67:31 - so the grayed out text as in with the
67:33 - html is not interpreted by the browser
67:36 - it's just help text for you in order to
67:38 - solve this challenge
67:40 - and i'm intentionally not giving you any
67:42 - more information about what each of
67:45 - these properties mean because i think
67:48 - they're pretty self-explanatory so i
67:50 - want you to experiment with changing
67:52 - them and draw your own conclusions as to
67:55 - what for example the font size does to
67:58 - the styling on our page and then once
68:00 - you've done this once you've redesigned
68:02 - the cookie widget move on to the next
68:04 - scrim and then i will show you how i
68:06 - would do it as well
68:08 - good luck
68:12 - so really good job writing your first
68:15 - lines of css that is no small
68:17 - accomplishment now i'm going to show you
68:20 - how i would design my cookie widget so i
68:22 - want my widget to have cookie colors so
68:25 - for my background property which is what
68:27 - sets the background color of the body
68:29 - which fills up the entire browser at
68:31 - this point i'm going to choose a color
68:33 - called
68:34 - saddle brown like that and you might
68:37 - wonder well how do i know that saddle
68:39 - brown is a color that css supports well
68:43 - you might have noticed as you wrote css
68:45 - values that vs code or editor starts
68:48 - suggesting values for you as you start
68:50 - typing so that is how i found saddle
68:52 - brown
68:53 - this suggestion box here isn't recorded
68:56 - by scrimba itself so you won't see it in
68:58 - recording but you will see it as you
69:00 - interact with the code yourself so we
69:02 - have the background now let's move on to
69:04 - the color here i don't have red i want
69:06 - to have something a bit more cookie-ish
69:08 - and it just happens to be a color called
69:10 - chocolate like that starting to look
69:13 - pretty cookish
69:15 - the font size i want to be larger so i'm
69:18 - going to set that to 25 yes that's
69:20 - pretty good okay font weight that
69:23 - dictates the thickness of the font can
69:26 - be lighter normal or bold i want it to
69:28 - be
69:29 - bold like that because we want to state
69:31 - clearly to our users please accept our
69:34 - cookies and text align can be left
69:37 - center or right
69:38 - let's first see what it does if i do
69:40 - left you can see now it start on the
69:43 - left hand side will be a bit more
69:44 - visible if i enlarge in the browser and
69:48 - i can do center yep there it is centered
69:51 - and right there it is pushed all the way
69:53 - to the right hand side let's center it
69:55 - for this time
69:56 - which means that we only have the margin
69:58 - top left and that is also a pixel value
70:00 - as the font size was but it's set to
70:03 - five pixels let's remove that let's
70:05 - bring it down to zero and see what
70:06 - happens oh you can see the text jumped
70:09 - up a little bit and now there's no
70:10 - spacing in between the top of the
70:12 - browser and the text itself
70:14 - so it adds margin that is spacing to the
70:18 - top so this means that we can use this
70:21 - in order to push the text down to the
70:23 - middle of the browser kind of centering
70:25 - it vertically let's try for example 20
70:28 - not fully centered let's do 40 yes that
70:31 - looks really good
70:34 - now before we move on there's one thing
70:36 - i want to mention which is that normally
70:38 - when you deal with colors in css you
70:41 - likely won't see these plain english
70:43 - descriptions of colors instead you'll
70:45 - rather see is something like this so
70:48 - this weird
70:49 - six character long expression with a
70:52 - hashtag in front of it and this is
70:54 - called a hex color code and that is a
70:56 - description of the color it's a recipe
70:58 - for how much red green and blue this
71:01 - specific saddle brown color consists of
71:03 - because as you can see nothing changed
71:05 - in our browser when i did this but if i
71:07 - change the recipe for example changing
71:09 - this 8 to 1 boom you can see that the
71:11 - color is suddenly completely different
71:13 - now we're not going to go into how these
71:16 - hex color codes work on the inside as
71:18 - that's outside of the scope of this
71:20 - lecture and it's certainly not expected
71:22 - that you remember what kind of colors
71:24 - the different hex codes refer to so now
71:27 - you might be a little bit confused and
71:29 - overwhelmed about all of these
71:30 - properties don't worry about it you're
71:32 - not expected to remember everything
71:34 - right now i just wanted to dip your toes
71:36 - into the water so that you were exposed
71:38 - to them and then you'll certainly get
71:39 - plenty of practice with all of these
71:41 - properties later down the line so let's
71:44 - just move on
71:48 - now that you know enough css to be
71:50 - dangerous
71:51 - let's use your newly acquired superpower
71:54 - in order to destroy wikipedia
71:56 - and for that we need a wikipedia page
71:59 - and about the coolest one there is is
72:01 - this list of helicopter prison escapes i
72:04 - mean oh my god how insane is that so
72:08 - click this image and you'll be taken to
72:10 - this article and then i'll show you step
72:12 - by step how we can destroy it with css
72:15 - so the first thing you need to do is to
72:17 - right click that'll open this menu where
72:19 - you can choose inspect and once you
72:21 - click that the dev tools will open then
72:24 - choose the icon in the far left as that
72:26 - allows you to use your cursor to select
72:29 - elements on the page so that when you
72:30 - hover over an element like this one
72:32 - you'll see that the dev tools select
72:34 - sets for you so if you move your cursor
72:36 - over to the logo you'll see that one
72:38 - selected and if you move your cursor
72:40 - over to the main part of the screen here
72:41 - you can see it selects the entire
72:43 - article
72:44 - once you're on that selection i want you
72:46 - to click because that'll select the
72:48 - specific html element here in the
72:50 - elements tab
72:51 - and don't worry about all of this you do
72:54 - not need to recognize the tags and
72:56 - attributes and everything you see here
72:57 - what i instead want you to do is head
72:59 - over to the right hand side where you
73:00 - see element dot style click there and
73:03 - you'll be able to actually apply css
73:05 - directly to this page so you can for
73:07 - example write background red and boom
73:10 - there we have really ruined this article
73:14 - then if you select another element on
73:16 - the page from this body content element
73:18 - here you can do the exact same thing
73:20 - click on the element style and now for
73:22 - example write font size and 30 pixels
73:25 - and there you go now you can click on
73:27 - the x icon in the far right corner here
73:30 - and then you can read about these
73:31 - helicopter prison escapes with a really
73:33 - bad background and huge text if that's
73:36 - what you prefer so feel free to spend an
73:38 - hour in this article and i will see you
73:40 - in the next scrim
73:45 - okay so now it's time for you to yet
73:47 - again build the google.com homepage but
73:50 - this time around you're also going to
73:52 - write the css so that you'll understand
73:55 - everything that goes into building this
73:57 - elegantly designed search engine as you
74:00 - can see i've set up the basic skeleton
74:02 - here in the html file for you
74:05 - in the body tag we have an image
74:07 - which is pointing to the google.png
74:10 - image which lies in the same directory
74:12 - as our index.html folder up here
74:15 - and we have an input type text which is
74:17 - our search field and we're only going to
74:19 - start with these two elements and then
74:21 - later move on to the buttons now as you
74:23 - can see in the mini browser here this
74:25 - looks horrible it has no styling so the
74:28 - logo is far too large the input field
74:30 - doesn't look very good so in short
74:32 - there's a lot of work to do here but
74:34 - before we can start writing css you need
74:36 - to link to the css file you can see i
74:39 - have a style css here which just sets
74:41 - the background of the body to red as a
74:43 - way of testing whether it is actually a
74:45 - link to the html currently it's not you
74:48 - are going to have to link to the css
74:50 - file on your own and if you remember a
74:52 - couple of scrims back i showed you how
74:54 - to do that though please don't look back
74:56 - at that scrim in order to solve this
74:58 - challenge instead google it because i do
75:00 - that almost every single time i have to
75:02 - link from an html file to a css file so
75:05 - you should not be ashamed for googling
75:06 - such a quote-unquote simple thing
75:09 - instead just do that right now because
75:11 - it's important practice and then when
75:13 - you come back i will show you how i
75:14 - would do it as well
75:22 - okay hopefully that went well
75:24 - now let's have a look at how we can
75:26 - solve this
75:27 - so i would simply type how to link to
75:29 - css into google and click at the top
75:32 - result this happens to be a w3schools
75:35 - article here you can see that there's a
75:37 - few different ways you can import css
75:39 - into the html file but we're only going
75:42 - to worry about the first one here called
75:44 - external css
75:45 - as you can see if we scroll a bit down
75:47 - what we do is we type link rel equal
75:49 - style sheet and href with a pointer with
75:52 - the css file itself so
75:54 - we'll do
75:56 - link l equals
75:58 - i'll sheet
76:00 - href equals
76:02 - styles.css
76:04 - and then closing it and if we now
76:06 - refresh the browser boom there we go it
76:09 - is red looking horrible
76:11 - so we can remove that so that it looks
76:13 - white again but now we know that we have
76:15 - linked the css and the html together so
76:18 - we are ready to move on and start
76:20 - styling our page
76:24 - the first thing we want to fix in our
76:26 - example here are the widths of the
76:28 - elements because if we compare it to the
76:30 - finished sign you can see that the input
76:33 - field is meant to be wider than the logo
76:36 - however in our example that's not the
76:38 - case quite the opposite actually the
76:40 - logo is much wider than the input field
76:43 - so we need to shrink the logo and then
76:45 - make the input field wider so i'm going
76:47 - to start and do one of these and then
76:49 - you will do the other
76:51 - i happen to know that the width we want
76:53 - to have on this input field is 400
76:56 - pixels
76:57 - what i'm then going to do is
76:59 - target the input field
77:01 - using the element name
77:03 - and create a css selector just writing
77:05 - input then open and close curly bracket
77:08 - and then simply write
77:09 - with and 400 px and boom there you can
77:13 - see suddenly the input field widened
77:16 - quite a lot and as you might have
77:18 - noticed we're using this pixels value
77:20 - here again which we've used a couple of
77:21 - times already actually and if you're a
77:23 - little bit confused as to what a pixel
77:25 - is you can think of it as the smallest
77:28 - unit of space that our screens can
77:30 - render so a pixel is just a tiny square
77:34 - so tiny that we actually need 400 of
77:36 - them stacked up besides each other in
77:39 - order to get a width
77:40 - of this size
77:42 - so with that i want you to fix the width
77:45 - of the google logo
77:47 - select the image tag and set the width
77:50 - of the logo to 300 pixels
77:52 - go ahead and do that right now and then
77:54 - i will show you how to do it as well
77:56 - when you return back to this scrim
78:05 - okay let's do this i'm going to break
78:07 - this down into a few lines so i get some
78:09 - space above the input field and then
78:11 - target the img element the image element
78:14 - open up the curly brackets and do with
78:17 - 300 pixels like that
78:20 - we're not quite yet at the finish design
78:23 - but the ratio between the logo and the
78:26 - input field is now a lot better great
78:28 - job let's move on
78:33 - okay i've discovered a problem with our
78:35 - google site which is that if we make the
78:37 - browser really wide you can see that
78:39 - suddenly the items stack up besides each
78:42 - other on the same line and that's
78:44 - obviously not the kind of behavior we
78:46 - want we want them to always be stacked
78:49 - on top of each other and in order to fix
78:51 - this you have to learn about inline
78:53 - elements versus block elements and
78:55 - that's best understood through the lens
78:57 - of an example so let's say that you for
78:59 - example have a collection of things you
79:01 - want to showcase you could be like
79:03 - george franson for example and collect
79:05 - dinosaur poo he actually has the world's
79:07 - largest collection of fossilized feces
79:10 - and naturally he wants to exhibit them
79:12 - in a posium and if he were to use
79:15 - display inline on his images they would
79:18 - stack up besides each other like this so
79:21 - kind of like in a line horizontally
79:23 - however had he used display block on his
79:26 - images then they would stack up on top
79:29 - of each other so rule of thumb is
79:31 - display block stacks on top another way
79:34 - to look at this is that the block level
79:36 - element blocks out the rest of the
79:38 - available horizontal space so that
79:41 - nothing else can be placed there and
79:42 - that is regardless of how wide this
79:44 - image is the content itself this play
79:46 - block requires control over all the
79:48 - horizontal space in its given container
79:51 - so when this block image is placed here
79:53 - and you add a new image it would have to
79:56 - be placed underneath the previous one
79:58 - and if it does display block as well
79:59 - it'll block out the rest of the
80:01 - available horizontal space and the next
80:03 - image have to be placed below that one
80:05 - again and so on
80:06 - so the solution is obviously to turn
80:09 - these elements into blocks and i'm just
80:11 - going to give you the syntax here this
80:13 - is how you write it display colon block
80:16 - go ahead and do that for both of these
80:18 - and observe what happens to the example
80:20 - when you make the browser wide good luck
80:25 - okay let's do this
80:27 - so i'll do display
80:29 - block up here and the same
80:33 - here if we look at the browser seemingly
80:35 - nothing has happened
80:37 - however if we now make it wide you can
80:39 - see yes no matter how wide the browser
80:42 - is these will always stack up on top of
80:44 - each other
80:45 - so great job let's move on
80:50 - the next thing we need to fix is the
80:52 - lack of white space above our google
80:54 - logo because if we take a look at the
80:56 - design here we want quite a lot of space
80:58 - in between the top of the browser and
81:00 - the logo and i'm not going to tell you
81:02 - how to add that but if you can think
81:04 - back to the very first scrim in this
81:06 - section we added some space above the
81:09 - text in our cookie widget
81:11 - and that specific space is called margin
81:13 - or margin top to be specific so your job
81:16 - is to add some margin on top of our
81:18 - image
81:19 - right here you can start on line seven
81:21 - so there are example here get some
81:23 - breathing room some white space above
81:25 - the logo and the input field go ahead
81:28 - and give this one a shot and then i will
81:29 - of course show you the solution when you
81:31 - return back to me
81:36 - okay hopefully that went well if not no
81:39 - worries i really pushed you out on thin
81:41 - ice here so it's completely okay if you
81:43 - didn't remember that the
81:45 - property is called margin top and what
81:47 - you add there is a pixel value so for
81:49 - example 100 px and there we go we've now
81:53 - added a margin on the top of our image
81:57 - and while we're still quite far off from
81:59 - our provided design here we are getting
82:01 - closer great job let's move on
82:06 - now while it totally works to add the
82:08 - margin top directly on the image here
82:11 - you'd most likely not see professional
82:13 - developers do this
82:15 - because what they do instead is wrap
82:17 - these two elements in some kind of
82:19 - container and then control the
82:20 - positioning of these elements indirectly
82:23 - via that container and in order to do
82:26 - this you have to learn about the div i'm
82:28 - going to create an opening div and then
82:30 - indent these two and then a closing div
82:33 - below here
82:34 - now if we run this code seemingly
82:36 - nothing has happened because the div
82:38 - actually does very little in itself
82:41 - though it is indispensable for web
82:43 - developers just to show you how
82:45 - important it is let's take a look at
82:47 - facebook and my timeline here i've
82:49 - opened up devtools and inspected one of
82:52 - the timeline items and you can see it is
82:54 - actually a div inside of a div inside of
82:56 - another div inside of yet another inside
82:59 - of the inside of a div
83:02 - divs really do rule the world so it's
83:05 - important that you learn about them and
83:07 - the way we'll use this div now is by
83:10 - removing the margin top styling from the
83:13 - image and then add it to the div itself
83:16 - and the reason this is important is
83:18 - let's say that for example google
83:19 - decides to create a video here instead
83:22 - or a interactive doodle or some kind of
83:24 - game they often play around with the
83:25 - google logo well if so it's a really bad
83:28 - idea that it is the image itself that
83:31 - controls the margin from the top of the
83:33 - browser and down to the content
83:36 - because that image might be removed so
83:37 - it is a solution that will get you into
83:39 - trouble in the future so what we'll do
83:41 - here is we'll simply instead target the
83:45 - div
83:46 - and then remove the margin top from the
83:48 - image and boom it has popped up now we
83:51 - lost all of our white space but if we
83:53 - add it back to our div we are back at
83:55 - the design we started out with seemingly
83:57 - nothing has changed but as you know
84:00 - we have a better html structure so we
84:03 - have definitely made good progress here
84:05 - so with that let's move on to the next
84:08 - scrim
84:11 - the reason you need to learn about
84:13 - classes now is because our current setup
84:16 - where we simply have the elements like
84:18 - this and then selecting the element
84:20 - using the element selector in css will
84:23 - give us bugs down the line because when
84:26 - we add the two buttons beneath the input
84:28 - field
84:29 - we'll actually wrap these two in a div
84:31 - as well and let's see what happens at
84:34 - this point
84:35 - what i'll do now is simply add the html
84:38 - for these buttons down here beneath the
84:40 - input field
84:41 - so it is a div with two buttons inside
84:45 - of it
84:46 - and then you can see we are closing that
84:47 - div
84:48 - the inner div
84:50 - and then we are closing the outer div
84:52 - let's run this code and oh wow
84:55 - what you can see is that the spacing
84:56 - between the input field and the buttons
84:58 - is totally off and that is because our
85:01 - css element selector here selects any
85:04 - div it can find in the html document and
85:07 - applies the margin top to it
85:09 - so it doesn't just select the first one
85:11 - but it can select thousands of divs so
85:14 - this is a very generic solution and
85:16 - likely not something we want to use as
85:18 - we want to have multiple divs with
85:20 - different types of styling in our html
85:22 - element
85:23 - so let's now instead fix this by doing
85:26 - the following i'll write class
85:29 - equals
85:30 - then for example main
85:32 - this here is an attribute called class
85:35 - so it's built into html and this here is
85:37 - the name i'm giving my class i want to
85:40 - call this div my main element
85:43 - and now the way i select that in the css
85:46 - is by instead of just writing the
85:48 - element name simply doing dot
85:51 - main like that
85:52 - now if i rerun this code you can see now
85:55 - the margin top is only applied to the
85:57 - outer div our main class and not to the
86:00 - div which wraps the two buttons
86:03 - so that is exactly what we needed
86:05 - now i'm going to remove these two
86:08 - buttons here because we don't want to
86:09 - deal with them just yet and then i'm
86:11 - going to give you a challenge
86:14 - first you're going to add a class to
86:16 - each of these two elements that is the
86:18 - image and the input you have to decide
86:21 - what you will call the two classes but
86:23 - make sure to give them different names
86:25 - and then you're going to in the css
86:29 - replace the element selectors with class
86:32 - selectors so that is the img selector
86:34 - here and the input selector here and
86:36 - obviously
86:37 - the css class selectors you're going to
86:39 - replace them with is the ones you have
86:41 - added to the elements right here so go
86:44 - ahead and do this right now
86:52 - okay hopefully that went well let's now
86:55 - do it together
86:56 - so for the image tag i'm simply going to
86:59 - do class equals then i'll call this
87:02 - logo dash
87:04 - img
87:06 - so here i'm using a convention where i'm
87:08 - first giving my class a descriptive name
87:10 - and then using a dash and then
87:12 - specifying the element as well this is
87:14 - an img element but it could have been
87:16 - for example an svg or something else
87:20 - now i don't expect you to have followed
87:21 - the same convention there are plenty of
87:23 - css conventions and it doesn't matter at
87:26 - all what you used in your example you
87:27 - can call your classes whatever you want
87:30 - okay for the input we'll do class equals
87:33 - search dash
87:35 - input like that okay let's move through
87:38 - the css then i'll replace this with bot
87:41 - now you can see it broke the layout
87:42 - because this styling now is not applied
87:44 - to any element
87:46 - so we need to do logo dash img
87:49 - like that and here do dot search
87:53 - dash
87:54 - input
87:55 - and there we have the exact same example
87:57 - didn't change at all but we now have a
87:59 - more flexible solution that scales
88:02 - better so great job solving this
88:04 - challenge let's move on
88:08 - now it's time to take a closer look at
88:11 - margins and you've already dipped your
88:14 - toes into this as you have used margin
88:16 - top so you might have some intuition
88:18 - about what margins do however now you're
88:21 - going to learn it properly through
88:23 - creating flags with css because flags
88:27 - are just awesome i mean take a look at
88:29 - this flag here for example from the
88:31 - republic of venice estate which existed
88:33 - for over a thousand years in europe and
88:36 - it contains of course a flying lion
88:39 - holding a book i mean what's more
88:41 - natural than that
88:43 - or this one right here for the isle of
88:45 - man i mean have you ever seen a more
88:47 - creepy creature than this three-legged
88:50 - thing right here imagine having that
88:52 - thing running after you
88:55 - that would not be fun and this flag
88:58 - would be really hard to create in css
89:00 - actually so we're not going to create
89:01 - this one we're going to start off at a
89:02 - much easier level with just some very
89:05 - simple shapes so let's have a look at
89:07 - those actually
89:08 - here is what we're going to work with as
89:10 - you can see there's simply three divs
89:13 - inside of the body tag and each div has
89:15 - a class red blue or green if we check
89:19 - out the styles.css you can see that
89:21 - these three classes apply a background
89:23 - color to each of the elements and sets
89:25 - the height to 100 pixels and here we
89:27 - have the result three rectangular boxes
89:30 - that are stacked on top of each other
89:32 - and that tells us that these are display
89:35 - block because display block stacks on
89:37 - top there's one thing that bothers me
89:39 - here and that is that we have a little
89:41 - bit of white space around the three
89:44 - items why is that well actually it's
89:47 - because our browser is trying to help us
89:49 - here it's assuming that we want a little
89:52 - bit of space around the body tag
89:55 - so that these three don't touch the
89:57 - edges of the browser so what's actually
90:00 - going on here in code is that the
90:02 - browser
90:04 - targets the body and sets a margin of
90:08 - eight pixels if you notice when i added
90:11 - this nothing changed so if i remove this
90:13 - it's still the same meaning that this
90:16 - style here is applied automatically so
90:18 - that means that margin is actually the
90:21 - space around an element because now if
90:24 - we change this to zero boom there you
90:27 - can see suddenly our divs touch the
90:29 - edges of the browser
90:31 - now here at the bottom they stop after
90:34 - 300 pixels since we've told them to so
90:36 - this margin zero here seemingly didn't
90:39 - change anything at the bottom because
90:41 - the bottom contains white space anyway
90:43 - if we make our browser tall enough but
90:45 - anyway that's a digression let's get it
90:47 - back so that the browser is completely
90:49 - filled up with these three items and now
90:51 - let's play a little bit around with
90:53 - margins so what do you think will happen
90:55 - if i add a margin top of 10 pixels on
90:58 - the red here
90:59 - take a guess
91:02 - okay
91:04 - margin top
91:05 - 10 pixels boom it added 10 pixels on the
91:08 - top what do you think will happen if i
91:10 - add margin left 10 pixels as well
91:13 - let's try
91:14 - it
91:16 - okay so it added
91:18 - 10 pixels on the left hand side
91:21 - it's only on the red rectangle not the
91:24 - blue or green rectangle likewise if i do
91:26 - margin
91:27 - 8
91:28 - and pixels it adds 10 pixels to the
91:31 - right hand side as well
91:33 - if i do a 100 it eats up almost a third
91:36 - of our red rectangle okay so now it's
91:39 - your turn
91:41 - i want you to add 100 pixels of margin
91:44 - on the bottom of the red box so go ahead
91:47 - and give that a shot right now
91:53 - okay
91:54 - if you did margin
91:56 - bottom
91:57 - 100px like that
91:59 - i want to congratulate you because you
92:01 - just created the flag of monaco really
92:03 - good job creating your first css flag
92:06 - now let's do that yet again
92:10 - here is your challenge you are going to
92:12 - create the flag of the gambia and here
92:14 - we have that flag however there's a
92:16 - catch you can only do this by applying
92:19 - styles to the blue box so by adding
92:21 - margin to this css rule right here so go
92:24 - ahead and give that a shot right now
92:31 - okay hopefully that went well the way to
92:34 - do it is by doing margin top let's try
92:37 - 10 pixels and see
92:39 - actually i think we want our white space
92:41 - to be a little bit more than 10 pixels
92:43 - so let's do 20 like that then
92:46 - margin
92:47 - bottom as well
92:48 - 20 pixels and
92:51 - there i think we have a pretty good flag
92:54 - for the gambia
92:56 - now before we move on to our google
92:57 - project there's one little weird thing i
93:00 - want to tell you about margin top and
93:02 - bottom
93:02 - because what do you think happens if i
93:04 - add for example margin bottom of 15 to
93:07 - this red element here well according to
93:09 - my logic the margin right here would be
93:12 - 35 pixels because we added 20 pixels on
93:15 - top of the blue and if we add 15 at the
93:17 - bottom of the red one
93:19 - that should be
93:21 - total
93:23 - however
93:24 - now that i added this nothing happened
93:26 - and that is because margin top and
93:28 - margin bottom will in many situations
93:31 - collapse into each other so that as long
93:33 - as this margin is smaller than this this
93:36 - will take precedence and it's only when
93:38 - this one becomes larger for example 25
93:41 - that it will kick in so let's take it
93:43 - back to 15 and to make things even worse
93:45 - there's actually scenarios where this
93:47 - doesn't happen however digging into that
93:49 - is outside of the scope of this lecture
93:52 - i just want you to be aware of it
93:53 - because if you're suddenly in a
93:54 - situation where your margins don't seem
93:56 - to add up it's probably because of
93:59 - so-called collapsing margins okay with
94:01 - that let's move on
94:06 - okay we're back at our google project i
94:08 - want to give you a quick challenge i
94:10 - want you to add some space between the
94:12 - logo and the search field because as you
94:15 - can see here there's some spacing in
94:16 - between the elements in our design
94:18 - however in our project now they are
94:20 - crammed together
94:22 - there are two ways you can do this using
94:24 - margins and i want you to think about
94:26 - which two ways that is and choose one of
94:28 - them go ahead and do this right now
94:35 - okay hopefully that went well let's do
94:37 - it
94:38 - so you can either add a margin bottom to
94:41 - the logo or you can add a margin top to
94:44 - the search field i'm going to go with
94:47 - adding margin bottom to the logo as i
94:49 - think either way is as good as the other
94:51 - at this stage margin bottom and how much
94:54 - do we want to add well let's try 20px
94:57 - and yeah as you can see we've got some
94:59 - spacing the bottom of the g is not
95:01 - touching the top of the input field and
95:03 - if we compare that to the example i
95:05 - think it looks more or less the same
95:08 - so great job let's move
95:12 - on okay now you are going to learn about
95:15 - centering elements in css and that is a
95:19 - scary topic for a lot of developers so
95:22 - scary that this stack overflow question
95:24 - about how to horizontally center an
95:26 - element has been viewed 4.5 million
95:29 - times
95:30 - so if you think this is a little bit
95:32 - confusing you are in very good company
95:35 - so don't worry about it
95:37 - so with that in mind let's move over to
95:40 - our example
95:41 - you are going to center this dinosaur
95:43 - poo
95:44 - as you can see in the css it has just
95:47 - one property set at this point which is
95:49 - a width of 200 pixels that is because
95:52 - the image is so wide originally that if
95:54 - i don't set that width it'll just take
95:56 - up more space than we have available
95:59 - and setting the width of it is actually
96:00 - an important thing in order to center it
96:02 - because there are three things that need
96:05 - to be in place when we are to center
96:07 - elements with the technique you are
96:09 - about to learn aka centering with
96:12 - margins and these three components are
96:14 - first the element needs to be display
96:16 - blocked because how is an element
96:18 - supposed to center itself if it doesn't
96:20 - command full control over all the
96:22 - horizontal space
96:24 - if it's display inline and allows other
96:27 - elements to stack themselves besides the
96:29 - element well then it won't be able to
96:31 - center itself because that space now is
96:34 - busy with other things
96:35 - so in order to center this poo it needs
96:38 - to control
96:39 - all the horizontal space
96:42 - so it needs this
96:45 - block like that now that didn't change
96:47 - anything but under the hood the poo now
96:50 - controls the full horizontal space
96:53 - okay the second part is that it must
96:55 - have a width
96:57 - and that is what we've done here already
96:59 - because how is this item supposed to be
97:02 - centered inside the browser if it is
97:04 - wider than the browser itself that's
97:06 - often what happens with either large
97:08 - elements or with some html elements who
97:10 - just naturally actually expand to take
97:13 - up all the available space in the block
97:16 - so we have to make sure that our element
97:18 - has a width
97:19 - and finally we set the margin on the
97:21 - left hand side and the right hand side
97:23 - to the value auto
97:26 - let's just do that
97:27 - margin
97:28 - left
97:29 - auto oh wow
97:32 - now it pushed the poo all the way to the
97:34 - right hand side
97:36 - because auto here means take up all the
97:38 - available space and since this is a
97:41 - block element the available space is all
97:44 - the space that's left after the poo has
97:46 - taken up its 200 pixels
97:48 - so it just ate up all of this space and
97:50 - turned it into margin
97:52 - however at this point margin right
97:54 - enters the party
97:55 - margin right
97:57 - and says i want the available space as
97:59 - well and at that point the margin left
98:01 - and margin right goes into discussion
98:03 - and decides well actually since there
98:05 - are two of us here pushing on each of
98:07 - the side of the element trying to get
98:09 - all of the available white space let's
98:11 - just divide it evenly amongst both of us
98:14 - and the result well it is that the item
98:17 - is centered
98:18 - so that was a long explanation of
98:20 - centering with margins if you feel
98:23 - confused don't worry about it right now
98:25 - all you need to do is remember these
98:27 - three conditions and just be aware of
98:29 - the 4.5 million other developers who are
98:32 - in or have been in the same boat as you
98:35 - let's move on to the next scrim
98:40 - okay we are back at our google project
98:43 - now your challenge is to center the logo
98:46 - and the search field using the technique
98:48 - you just learned
98:49 - so go ahead and give that a shot right
98:51 - now and then i will of course show you
98:53 - the solution afterwards as well
99:00 - okay as you hopefully remembered the way
99:02 - to center an element which is display
99:04 - block and has a width is by adding
99:07 - margin left auto and margin right auto
99:10 - so let's do that margin
99:12 - left
99:13 - auto and as you can see that pushes the
99:15 - logo all the way to the right hand side
99:17 - because the margin left is set to auto
99:20 - and it takes up as much space as it can
99:22 - we'll do the same thing with the right
99:24 - hand side margin right auto
99:28 - then the right hand side starts pushing
99:30 - back again and when they're both taking
99:32 - up equally as much space the margin left
99:34 - and margin right kind of decides yeah
99:36 - let's not argue anymore now we have a
99:38 - nice balance and whoa lo and behold our
99:41 - element is centered
99:43 - so
99:44 - now what we can do is be super lazy and
99:46 - copy that code and paste it in down here
99:48 - and boom
99:50 - our input field is centered as well and
99:52 - our project is starting to look a little
99:54 - bit like our finished design so this is
99:57 - super cool let's just keep up the pace
99:59 - and move on
100:04 - we need to take a little step back and
100:05 - learn a new css concept
100:08 - which is the close relative of margins
100:11 - called padding
100:13 - and we're of course going to learn that
100:15 - through the lens of an example
100:17 - so here i have just a simple div
100:20 - which contains a little bit of text or
100:22 - specifically the two first sentences in
100:25 - the white paper behind bitcoin and let's
100:28 - say we want to turn this into a nice
100:30 - looking card that people can read if so
100:32 - we'd probably create a class can call it
100:34 - card then of course in the style.css
100:37 - we'd select that card and apply the
100:39 - styling as for now it just has one
100:41 - property set which is the color that
100:43 - we've set to a shade of black that isn't
100:46 - pure black but a little bit softer so to
100:48 - speak that is because by default the
100:51 - browser uses pure black as the text
100:53 - color and pure white as the background
100:56 - color and as a rule of thumb you never
100:58 - want to have pure black on pure white
101:01 - that's not a pleasant experience for the
101:04 - eyes so instead we went for this but
101:06 - that was the digression let's move on
101:08 - with turning this into a nice looking
101:10 - card
101:11 - so a card needs a background color so
101:13 - let's just
101:14 - do background
101:15 - light
101:16 - gray for example like that and we also
101:19 - don't want our card to be full width
101:21 - because as you remember divs are block
101:23 - by default and take up the full width if
101:25 - you don't specify any width on it so
101:27 - we're going to do with for example 300
101:30 - pixels like that and then we also want
101:32 - some space above the card that is of
101:34 - course margin top
101:37 - let's push it 50 pixels down from the
101:39 - top and finally it should be centered so
101:42 - let's do margin
101:43 - left
101:44 - auto and margin
101:46 - right
101:47 - like that okay so now we have something
101:49 - that looks at least a little bit like a
101:51 - card but there's one problem here
101:53 - you can see the text is crammed all the
101:55 - way into the edges of the which doesn't
101:58 - look particularly good and that is where
102:01 - padding comes into play
102:03 - so now i'm just going to apply the
102:04 - padding
102:05 - by doing padding and for example 20
102:08 - pixels like that as you can see
102:10 - that created a little bit of space
102:12 - basically some breathing room in between
102:14 - the text and the edge of our div
102:17 - container here and if i do 50 you can
102:20 - see it's even more breathing room so
102:22 - where's margin adds space
102:25 - on the outside of our div the card which
102:28 - we've selected here
102:29 - padding will add space on the inside in
102:33 - between the content and the edges of the
102:36 - container or the div
102:38 - so margin kind of lives
102:41 - up here
102:42 - and down here if we are to visualize
102:44 - this in our html where's padding lives
102:47 - on the inside of our element that is
102:50 - here and here
102:53 - and now you might wonder well why did i
102:55 - just write padding whereas for martin
102:57 - we're specifying each of the sides
102:59 - and well you can do exactly that on
103:01 - padding as well
103:02 - this padding 20 pixels right here is the
103:04 - exact same thing as writing the
103:06 - following
103:07 - padding top 20 bottom 20 left 20 and
103:10 - right 20. so with these four lines we
103:13 - can actually delete this one up here and
103:16 - then we have the same convention as
103:18 - we're using with margins
103:20 - it's just that you can use
103:22 - padding 20 pixels like that if all of
103:24 - the values are the same it's basically a
103:27 - shorthand
103:28 - and now that we have all of them written
103:30 - out we can play around a little bit with
103:31 - it perhaps add a 100 pixels on the left
103:34 - hand side looks really weird and 100
103:37 - pixels on the top as well and suddenly
103:39 - our card does not look very good but
103:41 - let's get it back and now i want to give
103:44 - you a challenge
103:45 - i want you to add padding to make our
103:48 - card look like the provided design and
103:51 - the provided design is right here you
103:53 - can see it's a completely broken card as
103:56 - we've been ruthless about our padding
103:58 - and i've actually removed all of the
104:00 - padding rules from the css as i want you
104:02 - to build some muscle memory writing
104:04 - padding so go ahead and make this card
104:06 - look like it does in the slide and then
104:08 - return back to me once you've done it
104:15 - okay hopefully that went well
104:17 - if not no worries let's do it together
104:20 - as you can see here it's completely
104:22 - crammed into the bottom left corner
104:25 - which means that it doesn't have any
104:27 - padding on the left hand side or any
104:29 - padding on the bottom but a ton of
104:31 - padding on the top and a ton of padding
104:34 - on the right
104:35 - so i'm just gonna do padding
104:37 - top
104:38 - 100 pixels something like that
104:41 - yeah seems
104:43 - pretty much what we have in the design
104:45 - as well
104:46 - and then do the same padding
104:49 - right
104:50 - 100 pixels like that and to me that
104:52 - looks actually pretty much like our
104:54 - design
104:55 - i don't need to write padding bottom or
104:58 - padding left now so i could do it i
105:00 - could do padding bottom
105:02 - zero pixels or just zero
105:05 - and padding
105:07 - left
105:07 - zero as well
105:09 - though
105:10 - that didn't change anything
105:12 - so it's actually not needed because by
105:14 - default the padding of a div is zero
105:18 - so however you solve this great job
105:20 - let's move on
105:25 - so now you've learned about controlling
105:27 - the space on the outside of the element
105:30 - with the margin and on the inside of the
105:32 - element with the padding but wouldn't it
105:34 - be nice if we could also control the
105:36 - border in between the margin and the
105:39 - padding
105:40 - and it turns out we can through you
105:42 - guessed it the border property because
105:45 - if i write border here and then specify
105:48 - for example
105:49 - two pixels thickness solid in shape and
105:53 - then color red
105:55 - you can see then we get a border which
105:57 - is on the outside of the padding but on
105:59 - the inside of the margin
106:01 - and if we change any of these three
106:04 - values here it'll update accordingly so
106:06 - let's try eight pixels with instead you
106:09 - can see it's much thicker now instead of
106:11 - solid we can do
106:13 - odded like that pretty weird
106:15 - and instead of red we can do for example
106:18 - fff
106:19 - white in hexadecimal or just right white
106:22 - like that
106:24 - or just blue so it's a little bit
106:26 - clearer
106:27 - now there are many types of borders but
106:29 - in 99.9
106:31 - of the cases you want to use solid like
106:33 - that
106:34 - and also very often you'd want to soften
106:37 - up these corners
106:39 - and you can do that with the border
106:42 - radius property and there you specify a
106:44 - pixel value for example 30 pixels and
106:47 - boom there you can see
106:48 - we have this much softer corners
106:51 - if we crank this up to 100 or a thousand
106:54 - it stops at some point because then the
106:56 - edges have simply turned into half
106:58 - circles so at some point there's no use
107:00 - going any higher
107:02 - now this looks pretty bad so what i want
107:05 - you to do now is fix it up so that it
107:07 - looks like this
107:09 - and i'm not going to give you any of the
107:11 - values i've used here just a little hint
107:13 - i took an already existing color in our
107:15 - box and used it for the border so that's
107:18 - a common web design trick to reuse
107:20 - colors and not have too many different
107:22 - colors so if you think this is pure
107:24 - black
107:25 - you are wrong
107:26 - so go ahead and change the values of the
107:29 - border and border radius so that our
107:31 - example here matches the design i've
107:34 - provided in the slide good luck
107:41 - okay hopefully that went well so let's
107:44 - start with the border 8 pixels here
107:46 - looks a bit too thick for me so let's
107:49 - try four instead
107:51 - like that
107:52 - i think that matches better yes
107:56 - and the color
107:57 - i gave you a hint was just the blackish
108:00 - color we have for our text like that
108:03 - and the border radius is much smaller
108:06 - let's try 10.
108:08 - it's this still looks a little bit
108:10 - rounder
108:11 - so
108:12 - let's try 20 yes there i think we got it
108:16 - great job
108:17 - now a cool thing to do in order to
108:19 - inspect the margin border padding and
108:23 - size of the element in general
108:25 - is to open up the dev tools which can be
108:28 - done by right clicking on the nav bar
108:30 - here and then clicking in spec and then
108:33 - this dev tools panel will open
108:35 - here clicking on the select icon on the
108:38 - left hand side
108:39 - and then hovering over the element
108:42 - finally clicking at it
108:44 - there you will see that we have selected
108:46 - the element in the elements tab and
108:48 - under the styles tab you can see the
108:50 - styling we have applied using css so
108:53 - here you can actually modify them if you
108:55 - want but we're not going to do that
108:56 - right now we're going to scroll down and
108:59 - verify that our margin border and
109:01 - padding are correct so if i hover over
109:03 - the margin here you can see up here in
109:05 - the mini browser it is marked in orange
109:07 - and the values are provided down in the
109:09 - box here if i move over to the border
109:11 - you can see that border is now selected
109:14 - in the browser and is indeed four pixels
109:16 - as we code it up a minute ago if i move
109:18 - over to the padding you can see that is
109:20 - also indeed 20 on each side just as we
109:22 - want it to be and finally if i hover
109:24 - over the center here the content is
109:26 - highlighted and the content of this div
109:28 - is just the text and as you can see it
109:30 - is 300 pixels wide just as we said it
109:33 - has so it's working as expected and the
109:36 - height is dictated by how many lines of
109:38 - text are two sentences required
109:41 - so using this technique of inspecting an
109:44 - element and its sizing properties like
109:46 - this is a really good way of debugging
109:48 - if something for example looks wrong
109:50 - because it gives you an ability to
109:52 - verify if the numbers here match up with
109:54 - what you've tried to write in your css
109:57 - so now that you've learned all of that i
109:58 - want to tell you the name of this and
110:00 - it's actually called the box model and
110:02 - to be honest i've never really liked
110:04 - this word it sounds more complex than it
110:07 - is in my opinion it's just spacing
110:09 - around the element a border spacing on
110:11 - the inside of an element and the content
110:13 - itself but in web development we call
110:15 - this the box model so you'll probably
110:17 - hear this name come up from time to time
110:20 - but you shouldn't fare it you know
110:21 - exactly what it is and you've used all
110:23 - of the properties in the box model so
110:25 - don't worry about it actually let's give
110:27 - you a new box model practice in the next
110:29 - scrim
110:30 - i'll see you there
110:34 - okay now you are going to create a
110:36 - really neat looking button namely the
110:39 - following button on twitter let's zoom
110:41 - in a little bit and here you can see it
110:42 - this is the button you see if you
110:44 - already are following someone and we
110:46 - zoom out again this is the scrimba
110:48 - twitter profile you should definitely
110:50 - just click this image and follow us
110:52 - because we share a ton of useful tips
110:54 - and tricks and career advice for
110:56 - aspiring coders here so it's definitely
110:58 - worthwhile anyway now you are going to
111:01 - use the things you've learned about
111:03 - padding border border radius and so
111:06 - forth in order to make this button right
111:09 - here with the ugly default styling
111:12 - look exactly like this
111:14 - or not exactly as we're not going to
111:16 - worry about the font it is a little bit
111:18 - different but other than that you should
111:20 - try to make it look identical
111:22 - i've given you some hints here for
111:24 - example the border color is this hex
111:26 - color right here and the text color is
111:28 - this one right here and also you need to
111:30 - remember to adjust the font weight and i
111:32 - don't think you've done that ever since
111:34 - the very first scrim where you wrote
111:36 - your first lines of css so you might
111:38 - have to look back so that you figure out
111:41 - how to adjust the font weight or you can
111:44 - google it up to you anyway just go ahead
111:46 - and give this your best shot and if you
111:48 - at some point get stuck or don't know
111:51 - how to do it no worries we are going to
111:52 - do it together afterwards as well
111:55 - good luck
112:01 - okay hopefully that went well let's do
112:03 - it together
112:04 - i'm going to target the button just
112:06 - using an element selector like this and
112:08 - now let's pick the low hanging fruit
112:10 - namely the ones we've gotten here
112:12 - already for example by doing color
112:15 - and then copying this
112:17 - color right here okay that didn't change
112:19 - much
112:20 - at least not visibly then let's do
112:22 - border
112:23 - and i'm going to start with one pixel
112:25 - solid
112:27 - and then the border color right here
112:30 - like that okay so it looks a little bit
112:32 - different now but not quite
112:34 - this
112:35 - one thing we can clearly see is that
112:37 - this image has a white background
112:39 - whereas ours is still a little bit gray
112:41 - so let's do that as well background
112:44 - white okay yes
112:47 - but our button is much more crammed
112:48 - there's too little padding
112:51 - whereas here you can see we have a
112:52 - little bit of padding on the top and the
112:54 - bottom and actually quite a lot of
112:55 - padding on the left and right hand side
112:58 - and that's actually a little design tip
113:00 - right there what you'll often see is
113:02 - that buttons have more padding on the
113:04 - left hand side and the right hand side
113:06 - and they have above and below
113:08 - so let's try
113:09 - padding top 5 pixels for example padding
113:14 - bottom 5 pixels
113:16 - and then we'll try
113:18 - left
113:19 - 10 pixels and
113:21 - write 10 pixels as well
113:24 - how does that look not too bad but
113:26 - actually it looks like this button has
113:28 - even more so we've added half as much on
113:31 - the top and bottom as we have on the
113:33 - sides so let's crank up both of these a
113:35 - little bit
113:36 - i'm going to select both of these and do
113:38 - eight top and below and select both of
113:41 - these and do 16 left and right yeah i
113:43 - think that's more like it
113:45 - now one thing that definitely is
113:47 - remaining is the rounded edges here
113:49 - so that is the border radius added up
113:52 - here with the border let's try 10 pixels
113:55 - it's a little bit round now but not as
113:57 - round as the twitter button
113:59 - so let's do 16. yeah more like it
114:03 - can we go higher yeah i think we can go
114:06 - to 18
114:07 - that looks quite good to me if we
114:09 - compare to this one
114:11 - and then finally we needed to remember
114:12 - the font weight which i can do font
114:15 - weight
114:17 - bold like that
114:18 - that looks a lot better
114:21 - i think the final adjustment i want to
114:23 - make is adding even a little bit more
114:26 - padding around it because now that i
114:27 - look at it it feels like this is a bit
114:29 - more spacious so here we are really in
114:32 - the nit picking area
114:34 - but let's try 10 on both of the top and
114:37 - bottom and let's try 20 on the left and
114:40 - right and what's interesting now is that
114:42 - since the box now has grown in size
114:44 - because it's affected by the padding the
114:46 - border radius can also be cranked up a
114:48 - little bit i think actually we can do 20
114:50 - now
114:51 - yes because the bigger a box is
114:54 - more pixels you need to add in order to
114:56 - get this fully soft looking button which
114:59 - essentially has two half circles on each
115:01 - of its sides so
115:03 - looking at the example and comparing it
115:05 - with ours i think we have reached our
115:06 - goal
115:07 - and if your values are different than
115:10 - mine that does not matter at all you're
115:12 - actually creating the button of a huge
115:14 - public company here you are just
115:16 - learning basic css so it's totally not
115:18 - expected that you create buttons as
115:20 - neatly as twitter does as they probably
115:23 - have a team of developers and designers
115:25 - working just on this profile page so
115:28 - however it went be proud of yourself and
115:30 - get ready to move on with our google
115:32 - project i'll see you in the next scrim
115:38 - okay we are back at our google project
115:40 - and now you are going to fix the design
115:42 - of our search field and you're actually
115:44 - going to get a design spec the proper
115:47 - walkthrough of how i want it to look
115:49 - so here i've opened up the dev tools
115:52 - actually on the right hand side as i
115:54 - want to inspect the box model of this
115:56 - element with you and if you wonder how i
115:58 - managed to stick the devtools to the
116:00 - right hand side here just click these
116:02 - three icons if you're in chrome then you
116:05 - can choose the dock side so let's move
116:07 - on down here to the box model of the
116:10 - input field and if i hover over the
116:12 - content in the box model here you can
116:14 - see that it says 400 pixels times 24
116:17 - pixels and you can see the content is
116:20 - marked in blue in the mini browser here
116:23 - so that means that our width is 400
116:26 - pixels we know that because we set it
116:28 - ourselves here and the height of the
116:30 - content should be 24 pixels okay let's
116:33 - move on to the padding if i hover over
116:35 - that you can see it's green and it's
116:37 - highlighted in green in the mini browser
116:39 - the padding at the top and the bottom
116:42 - are 10 pixels as you can see down here
116:45 - and the left hand side and right hand
116:46 - side have 30 pixels each and then if we
116:50 - move over to the border you can see that
116:52 - it's simply one pixel all around so
116:55 - here is your design spec given to you by
116:58 - your hipster designer down in the bottom
117:00 - right corner here
117:02 - height of content 24 pixels but do
117:04 - remember that that is actually the
117:06 - height of the inner box here not the
117:08 - height of the total input field as that
117:11 - also contains the padding and the border
117:13 - but the height property should be 24
117:16 - pixels the padding above and beyond as
117:18 - said 10 pixels right and left hand side
117:20 - 30 pixels thickness of border 1 pixel
117:23 - the color of border is this and then
117:25 - finally also the border radius is also a
117:28 - value that our designer has been kind
117:30 - enough to give to you so
117:32 - take this design spec and implement it
117:34 - using css
117:41 - okay hopefully that went well if not no
117:43 - worries we'll do this together right now
117:46 - so starting with the height of 24. there
117:48 - i'm going to just write
117:50 - 8 24 pixels like that okay so it became
117:53 - a little bit taller now
117:55 - next step is the padding top and bottom
117:57 - was 10 pixels so
117:58 - padding top 10 px
118:02 - bottom was also
118:03 - mpx like that
118:05 - okay the padding left and right hand
118:07 - side were 30 pixels according to the
118:09 - spec so let's implement that
118:12 - like that and then we'll move on to the
118:14 - border one pixel and this hex code right
118:16 - here
118:17 - so i'll do border and here we have to
118:19 - provide it with three values so one
118:22 - pixel
118:23 - it is going to be solid and the color is
118:27 - dfe1e5 like that looking pretty good
118:31 - the final thing then is the border
118:33 - radius and that should be 24 pixels
118:36 - according to the design and look at this
118:38 - it is starting to look really
118:40 - professional so really good job if you
118:42 - did this challenge if you did a couple
118:44 - of mistakes no worries at all actually i
118:47 - also did a little mistake here according
118:49 - to best practices when setting heights
118:51 - for input fields because actually i want
118:53 - to show you that this height of 24
118:55 - pixels here is actually not the way we
118:57 - want to do it because if i google
118:59 - set height of input field css and then
119:02 - click the first link that is a stack
119:04 - overflow question and here you can see
119:06 - someone who's been having problems with
119:08 - this so they've asked a question about
119:09 - it if we scroll a little bit down you
119:11 - can see that people are saying try with
119:13 - padding and line height
119:16 - line height that's not something we've
119:18 - used if we scroll a little bit down you
119:20 - can see that some browsers will honor a
119:22 - css height rule some not so it seems to
119:25 - be a little bit difficult to use height
119:27 - for the input field
119:29 - and this person's wall suggests line
119:31 - height and likewise with this third
119:33 - person here so i'm going to trust the
119:34 - wisdom of the crowds here and use line
119:36 - height instead
119:39 - like that
119:40 - didn't change anything but we are using
119:42 - a property that more browsers apparently
119:44 - will honor
119:46 - and line height is actually just the
119:48 - height of one line of text and since
119:50 - that is everything we have inside of an
119:52 - input field it's just one line of text
119:54 - that'll be the exact same thing as
119:56 - setting the height of the inner content
119:59 - of the input field so if that was a
120:01 - little bit confusing and you prefer to
120:02 - just use height that's totally fine as
120:04 - well it's more important that you are
120:06 - using what you are comfortable with than
120:08 - that you are doing it the 100 correct
120:10 - way according to conventions so just use
120:12 - whatever you want i just wanted you to
120:14 - be aware of the fact that this is the
120:16 - recommended way according to stack
120:18 - overflow with that let's move on
120:24 - okay now we're gonna add the first
120:26 - button to our google project
120:28 - so i'm gonna head over to the html and
120:31 - here beneath the input field i'm just
120:32 - gonna type
120:33 - button
120:35 - like that
120:36 - and this will be the google search
120:38 - button so there we have it it doesn't
120:41 - exactly look good but don't worry about
120:43 - that
120:44 - now i want to give this a class as well
120:46 - and a class name you'll often see used
120:48 - for buttons is simply btn like that
120:51 - okay
120:52 - now that we have that i want you to
120:54 - center the button and add some space
120:57 - above it so go ahead and use the class
120:59 - selector to select this button and solve
121:02 - this challenge good luck
121:09 - okay so what i'll do is do dot vtn to
121:12 - select the button
121:13 - here you might have been tempted to
121:15 - simply do margin left auto and then
121:18 - margin right
121:20 - auto however that doesn't seem to do
121:23 - anything
121:24 - why is that well if you remember the
121:26 - criteria you needed in order to use this
121:28 - technique to center elements one of them
121:31 - was that you need your element to be
121:33 - display block whereas buttons are
121:35 - actually display inline by default
121:39 - so if we do display
121:41 - block
121:42 - boom there we go the button is centered
121:45 - and now you might ask well what about
121:46 - the width we also set the width on the
121:49 - input field and the logo
121:51 - well we could do that as well with this
121:53 - one let's do with
121:55 - 200 pixels for example
121:57 - however it's not needed because if we
121:59 - remove the width you can see that it
122:01 - still has a width which is certainly not
122:03 - full width across the entire page so it
122:06 - kind of has an implicit width without us
122:08 - setting the width so even though it is a
122:10 - criteria that your element needs with in
122:13 - order to use this technique here in
122:15 - order to center it you don't necessarily
122:17 - have to set the width yourself if the
122:20 - element already has some kind of width
122:22 - so it works perfectly fine just doing
122:24 - display block and margin left right auto
122:27 - in this example
122:29 - finally we are going to add some space
122:31 - above it so let's do that i'll do margin
122:33 - top and do for example 30 pixels yeah
122:37 - looking pretty good great job solving
122:39 - this challenge let's move on
122:44 - now we are going to style the button in
122:47 - our google project
122:48 - because as you can see this is how our
122:50 - button currently looks but
122:52 - this is how we want it to look so we got
122:54 - to do a bunch of changes however there's
122:57 - one thing i want to change actually on
122:59 - this google.com homepage because notice
123:02 - how low the contrast is between the
123:05 - background color of the button and the
123:07 - background color of the entire website
123:09 - it's hardly possible to see that there's
123:11 - any difference and that's not good
123:13 - because it reduces the accessibility of
123:16 - the site and makes it hard for people
123:18 - who are visually impaired to use it
123:20 - actually to prove this let's take these
123:22 - two colors the light gray here and the
123:25 - white and put them into a contrast
123:27 - checker online for example this one
123:29 - right here on userray.org
123:31 - they have this nice little contrast
123:33 - checker where you can paste in the
123:34 - foreground color and the background
123:36 - color and then get a contrast ratio and
123:39 - this
123:39 - f8f9fa hex color is the one that google
123:44 - is using
123:45 - and if we scroll a bit down you'll see
123:47 - that google indeed fails miserably on
123:50 - this test complete failure
123:52 - the ratio is 1.05 though it should have
123:55 - been 4.5 or more so not good google
124:00 - so what we will do instead is change the
124:02 - background from this
124:03 - to something like this here you can see
124:06 - it's much easier to see that it is
124:08 - indeed a button
124:09 - so even though the real background color
124:11 - is this one right here we are going to
124:13 - use this one right here
124:15 - so with that in mind i want you to style
124:18 - the button according to the provided
124:20 - design you now have
124:21 - and the only hint i'll give you is that
124:23 - these are the properties you are going
124:25 - to use however i'm not giving you the
124:27 - values of any of them because i want you
124:29 - to practice looking at an example and
124:31 - making your best guess as to what the
124:33 - values for the css properties should be
124:35 - as that's how you'll work out in the
124:37 - real world when a designer for example
124:39 - gives you a design file so go ahead and
124:41 - do this right now and then i will show
124:42 - you the solution afterwards as well
124:49 - okay let's do this i'm going to bring up
124:52 - the example here have it on the side so
124:54 - that we can
124:55 - see how it develops
124:57 - and then start with the background color
124:58 - as we have the value for that one
125:01 - down here
125:03 - round
125:04 - like that okay next i would try to see
125:07 - what is the most apparent difference
125:08 - between this button
125:10 - and this one right here well the border
125:12 - is certainly different this button does
125:15 - not have a border at all
125:17 - whereas this one has got has a border so
125:20 - let's just remove it
125:21 - border
125:22 - none like that okay good
125:25 - now we can see that the text is much
125:26 - more crammed into this box than there is
125:29 - this one right here so that is the
125:31 - padding and also you can notice that
125:33 - there's more padding on the left and
125:34 - right hand side than on the top and
125:36 - bottom so i'm going to try to add for
125:38 - example padding
125:40 - top 5 pixels
125:43 - ah that actually looks like this one
125:45 - here has more than 5 pixels because this
125:48 - space is still pretty crammed so i'm
125:50 - gonna do for example eight
125:53 - yeah i think that is more like it i'm
125:56 - gonna give that on the bottom as well
126:00 - like that
126:01 - on the sides i'm just going to try the
126:03 - double
126:04 - padding left 16 pixels padding right 16
126:09 - pixels and you know what i think that
126:11 - button and our button looks pretty
126:14 - similar in size
126:16 - so next up is the border radius because
126:18 - you can see this one is totally
126:20 - rectangular
126:21 - whereas this one has softer corners
126:24 - so i'm going to do border
126:26 - radius
126:27 - something like 4 pixels so that is
126:30 - pretty good
126:31 - the final minor adjustments i'm going to
126:33 - make is reduce the font size ever so
126:36 - little from what it is here down to what
126:38 - it is here i mean it's almost identical
126:40 - but i happen to know that this one is
126:42 - indeed 14 pixels
126:44 - so i'm going to do font size
126:47 - 14 pixels like that and there we
126:50 - actually have the buttons this one and
126:52 - this one
126:53 - identical
126:54 - now if you chose any other values than
126:57 - the ones i've chosen don't worry about
126:59 - it at all the point was not for you to
127:01 - reach the exact same values as me but
127:03 - just in the same range basically so
127:06 - regardless of how your example ended up
127:08 - good job reaching this far let's just
127:10 - keep up the pace and move on
127:15 - now we are going to add the second
127:17 - button to our google project this i'm
127:20 - feeling lucky button right here
127:22 - and i want you to do that on your own
127:24 - first so that's your challenge add the
127:27 - next button and do remember to give that
127:30 - button a btn class so that it's styled
127:32 - as our search button and once you've
127:34 - done that and executed the code i want
127:37 - you to take a look in the mini browser
127:39 - and ask yourself
127:40 - why aren't our buttons behaving as we
127:43 - want them to because as you'll see
127:45 - there's something wrong with the layout
127:47 - at least when comparing it to this
127:49 - layout right here we'll go ahead and do
127:51 - that right now and try to think of why
127:53 - our layout is wrong and then i will do
127:56 - it as well when you return back to me
127:58 - and explain what's going on
128:04 - okay let's do this
128:06 - so i'm lazy so i'm just going to copy
128:08 - this one like that and write
128:11 - um
128:12 - feeling
128:13 - lucky
128:15 - run the code and as you can see
128:18 - the buttons are now stacked on top of
128:20 - each other
128:22 - what we can do in order to figure out
128:24 - what's going on here is actually use the
128:26 - built-in dev tools in the browser which
128:28 - you've seen a few times now so let me
128:30 - show you this debug session using slides
128:33 - i'm going to right click in the nav bar
128:35 - and then choose inspect
128:37 - open up the elements tab and then click
128:39 - on the selector icon here so that i can
128:42 - select this button by hovering over it
128:45 - and then down in the styles tab i can
128:48 - scroll down until i see the box model
128:51 - for our button and what you'll notice is
128:53 - that our button is taking up all the
128:55 - available space on the left hand side
128:57 - and the right hand side
128:59 - and if we move down to the second button
129:01 - you can see that that button is also
129:03 - doing that that is because they are
129:05 - display block
129:08 - exactly this line right here if you
129:10 - remember from previous lectures display
129:12 - block kind of takes up all of the
129:14 - available space on the horizontal axis
129:17 - so as we said earlier display block
129:20 - stacks on top we aren't able to get the
129:22 - layout we want if our buttons are
129:24 - display block and then you might be
129:26 - tempted to do well let's just remove the
129:28 - display block
129:29 - however
129:30 - if we do they will be on the same line
129:32 - yes they are now inline elements but
129:34 - they will just be crammed all the way to
129:36 - the left hand side because
129:38 - margin left right auto doesn't work if
129:41 - you remember from the lecture about
129:43 - centering you learned that display block
129:46 - and margin left right auto works
129:48 - together in order to center something
129:50 - you can't have just one of them
129:52 - which means that in order to go from
129:54 - this layout to this layout we have to
129:57 - use a different technique for centering
129:59 - the elements and there's actually two
130:02 - ways we could do this there's the simple
130:04 - and inflexible way using text align and
130:06 - then there's the slightly harder but
130:09 - super flexible way using flexbox and
130:12 - since you're going to use flexbox
130:14 - several times throughout this course i
130:16 - want you to get familiar with it right
130:18 - away so in the next scrim we're going to
130:20 - talk about flexbox but before we do that
130:22 - i just want to show you the simple way
130:23 - as well so that you've seen it because
130:25 - as you might remember from one of the
130:27 - very first scrims in this section we
130:29 - used something called text align in
130:31 - order to align our text either to the
130:34 - left right or center now the text align
130:37 - property actually works on all inline
130:40 - elements not just on text so what we can
130:43 - do is remove the display block from our
130:46 - buttons
130:48 - as you know that turns them into inline
130:50 - elements and they are crammed to the
130:52 - left
130:53 - and as inline elements only take up the
130:56 - available space they need according to
130:58 - their content there is no available
131:00 - margin to use so auto here which
131:02 - basically means take up whatever
131:04 - available margin there is serves no
131:07 - purpose so we can remove both of these
131:09 - two as well as you can see it made no
131:11 - difference and then we can move up to
131:13 - the main the parent will do text align
131:18 - center like that and boom both buttons
131:20 - are now centered so here we have told
131:24 - the container the main element all
131:26 - inline elements inside of it should
131:29 - align to the center
131:30 - so that was the easy but inflexible way
131:33 - of doing this let's instead of using
131:35 - this technique move on to do it how the
131:38 - pros do it using flexbox
131:43 - flexbox is everywhere let's just have a
131:46 - look at twitter for example here the
131:48 - menu on the left hand side is created
131:50 - with flexbox as with the tweet options
131:53 - menu and the timeline itself and guess
131:56 - what the trends for you and who to
131:57 - follow it's created with you guessed it
131:59 - flexbox so this is something you need to
132:02 - learn
132:03 - let's imagine then that you have a
132:05 - e-commerce website which you can see
132:07 - here that sells shoes hoodies and
132:09 - t-shirts well then you probably have a
132:11 - navigation menu like this one where
132:13 - users can click and then probably open
132:15 - up a sub menu or something like that
132:17 - as you can see the items stack on top of
132:19 - each other that is to be expected as
132:22 - these are divs and divs are display
132:24 - block they want to take up all the
132:25 - available space in the width and if
132:28 - you're wondering how i styled these we
132:30 - can head over to the styles.css and just
132:32 - have a quick look at that you can see
132:34 - i've aligned the text to the center
132:35 - inside of all the items hadn't i done
132:38 - that it would have been aligned to the
132:39 - left
132:40 - also there's a border as you can see
132:42 - there's some padding on the inside and
132:44 - there's some margin in between the
132:46 - elements
132:47 - now the question is what if i instead of
132:49 - this vertical layout wanted a horizontal
132:52 - layout which is more common for
132:54 - so-called navigation bars
132:56 - so something that looks like this well
132:59 - this is where flexbox comes to the
133:01 - rescue and in order to turn this into a
133:03 - flexbox layout i would first have to
133:05 - wrap these three items in a container
133:07 - because a flexbox layout always consists
133:10 - of a container and its direct children
133:13 - so
133:14 - let's wrap it in a div
133:17 - and give this a class of
133:19 - for example nav dash wrapper like that
133:22 - if i run this now nothing happens
133:24 - because divs as you know are invisible
133:26 - unless you give them any styling or
133:28 - content
133:29 - so let's head over to the styles.css and
133:32 - now target the nav wrapper like that in
133:35 - order to turn this into a flexbox
133:37 - container all i have to do is write
133:39 - display
133:40 - flex and boom suddenly we have forced
133:44 - our three divs into one row now this
133:46 - layout flows from left to right along
133:48 - the horizontal axis and that is pretty
133:51 - significant given that these items were
133:53 - display block by default but flexbox as
133:56 - powerful as it is overrides that and
133:58 - forces them on to one line
134:00 - however we haven't got quite the layout
134:02 - we want yet as you can see it's centered
134:04 - and there's also some space in between
134:06 - the items
134:07 - now let's start with the centering
134:09 - because flexbox now has control over
134:12 - these items and can decide where along
134:15 - the main axis they should be positioned
134:17 - so we can do justify content that is a
134:19 - little bit of a weird name for a
134:21 - property but that's just how it is and
134:23 - then set that to center like that
134:27 - now all of the items are centered and
134:29 - the final step is just to get some
134:30 - spacing in between these items and that
134:32 - is done with our good old friend margin
134:34 - so we'll do margin left let's do 10
134:37 - pixels and let's add the same thing on
134:40 - the margin
134:41 - right
134:43 - like that
134:44 - and there we have the layout we wanted
134:46 - now a final cool thing i want to show
134:48 - you is that we can do for example end
134:51 - here as well that'll push it all the way
134:52 - to the right hand side or start
134:55 - at the beginning or alternatively you
134:58 - space that around that's pretty cool
135:01 - now we've distributed all the white
135:03 - space around each of the items and
135:05 - another one is space between now all of
135:08 - the available space is between the items
135:10 - so they're spread out like this
135:12 - now we are getting ahead of ourselves
135:14 - here i just wanted to demonstrate this
135:16 - to show how powerful flexbox is what you
135:18 - are going to work with is the center
135:20 - here so with that let's return back to
135:23 - our google clone
135:27 - okay we are back at our google project
135:29 - and now your job is to center these two
135:32 - buttons besides each other meaning
135:34 - getting to this layout right here
135:37 - and the way to do that is of course
135:39 - using flexbox so you'll wrap the two
135:41 - buttons in a flexbox div and then center
135:44 - them
135:45 - and then also
135:47 - i want you to give the div a class of
135:49 - btn-wrapper so you'll need to modify
135:51 - both the html and the css here
135:54 - now before you start i'm going to remove
135:57 - these three lines here because they are
135:59 - solely there in order to center our
136:01 - buttons
136:02 - using this display block and margin left
136:05 - right auto technique however now we're
136:07 - going to use the flexbox technique and
136:10 - we don't want to use both techniques at
136:12 - the same time because that'll just be
136:13 - confusing as they will affect each other
136:16 - so i will remove these lines
136:19 - and now you're left with this left
136:20 - aligned layout here
136:23 - so please take over here do this
136:25 - challenge and then return back to me
136:27 - when you've done it or when you feel you
136:29 - need some guidance good luck
136:36 - okay hopefully that went well if not no
136:39 - worries we'll do it now together
136:41 - so i'm going to start with this flexbox
136:44 - div that we want in our html
136:46 - it should wrap our buttons and only our
136:48 - buttons so we want to start it up here
136:51 - if class of btn dash wrapper
136:56 - at i'm going to indent my buttons
136:59 - and then end the div down here so now it
137:02 - is simply wrapping our two buttons
137:05 - if i run this code seemingly nothing has
137:07 - happened
137:08 - but under the hood we have the button
137:11 - wrapper which we can target using
137:13 - btn.wrapper
137:16 - like that and then we can do display
137:18 - flex that's turned our div into a
137:21 - flexbox and now we can use the
137:24 - justify content and do
137:26 - center like that
137:28 - there you can see both our buttons are
137:30 - centered however they are totally
137:33 - crammed into each other now there's no
137:35 - margin in between them
137:37 - so in order to fix that we want to add a
137:39 - little bit of margin left and right to
137:41 - these buttons so i'm going to do margin
137:44 - left
137:45 - perhaps 4 pixels and margin
137:48 - right
137:49 - or pixels as well
137:50 - like that
137:53 - that's looking pretty good to me so if
137:56 - you didn't do this no worries at all and
137:59 - also if you are a little bit confused
138:01 - about flexbox that is totally okay as
138:03 - well we're going to work with that
138:04 - several times throughout this course
138:06 - you'll get more opportunities to
138:08 - practice this just feel proud that
138:10 - you've at least dipped your toes into
138:12 - flexbox as that is a super important
138:14 - tool for any front-end developer so
138:17 - great job let's move on
138:22 - now there's one final thing i want you
138:24 - to know and that is that you are amazing
138:28 - because you have taken your very first
138:30 - step into the world of css and that is
138:33 - more than most people ever do so take
138:36 - this moment to feel great about yourself
138:38 - and also let's take this moment to recap
138:41 - what you've learned starting out you
138:43 - learned about the css syntax that is how
138:45 - you select elements and also use
138:47 - properties and values and then you learn
138:50 - the key concept about inline elements
138:52 - versus block elements so block elements
138:54 - stacking on top of each other like these
138:56 - two and inline elements standing kind of
138:59 - in a horizontal line like the buttons
139:01 - here moving on you learned about margins
139:04 - which is how you create white space
139:05 - outside of elements for example above
139:08 - the google logo here and you learned
139:09 - about its close cousin the padding which
139:12 - is how you create space on the inside of
139:14 - elements for example in between the text
139:16 - and the edges of these buttons also
139:18 - borders is what is between padding and
139:21 - margin and we use that on the input
139:23 - field here we decided its thickness its
139:25 - type and color and also the radius of
139:28 - the corners so we didn't want the sharp
139:30 - edges but rather soft circular edges
139:33 - which we achieved with this border
139:34 - radius property what we also did was
139:37 - take a closer look at the div tag which
139:39 - you saw briefly in the html section this
139:41 - time around though you actually created
139:43 - two divs one to wrap the entire project
139:46 - and another to wrap the buttons and we
139:49 - had to separate those from each other so
139:51 - you had to learn about classes that is
139:53 - the attribute you set like this and you
139:56 - select by using the dot notation in the
139:59 - css
140:00 - also a big thing is centering in css you
140:03 - learned three different ways of doing
140:05 - this and the final way you centered
140:07 - elements was through the use of flexbox
140:09 - a super powerful tool that all frontend
140:12 - developers need to be comfortable with
140:14 - so you have learned a lot
140:18 - now i think you should take a little
140:19 - break you have to digest these things
140:22 - recharge and then i will see you back
140:23 - here when you are ready in the next
140:25 - section
140:30 - welcome to the second css section of
140:32 - this course where you are going to build
140:34 - a business card for yourself and it's
140:36 - going to look more or less like this
140:38 - though you're going to personalize it
140:40 - make it your own not only with your own
140:42 - information but also with a beautiful
140:43 - color palette of your choice and a font
140:46 - that you like so you are going to level
140:49 - up your design skills as well as your
140:51 - css skills meaning that this is going to
140:54 - be a lot of fun so let's just get
140:56 - started with it right away
141:01 - okay let's start out by having a quick
141:03 - look at the basic skeleton for our app
141:06 - as you can see in the file system here
141:08 - we have an index.html file also a
141:10 - styles.css file and finally we have an
141:13 - images folder which contains my avatar
141:15 - it's a png file called pair.png
141:19 - now starting with the html it's just a
141:21 - very simple setup with the html tag and
141:24 - then the head tag which links to the
141:26 - styles.css
141:27 - as for the body it has one direct child
141:30 - which is a div which will work like kind
141:32 - of the container for our business card
141:34 - and inside of that div we have an image
141:36 - tag we have an h3 with my name we have a
141:39 - paragraph with the title and an h4 with
141:42 - the location
141:44 - moving over to the css we only have one
141:47 - rule here we're setting the margin to 20
141:49 - pixels on the body
141:51 - and if you remember how this works when
141:53 - we're not specifying either margin top
141:55 - margin bottom left or right
141:57 - just setting the margin in general these
142:00 - 20 pixels will be added on all four
142:02 - sides on the top on the left bottom and
142:04 - right and that's simply because i want
142:06 - to avoid that these elements touch the
142:08 - edges of the mini browser
142:11 - so
142:12 - there's a problem though as you can see
142:13 - the image isn't rendering properly it's
142:16 - just an icon that is as far as i can
142:18 - remember not how my face looks like and
142:21 - the problem is in the image tag
142:23 - so i want you to try to fix that and i'm
142:25 - not going to give you any more hints
142:27 - rather than if you are stuck try to
142:28 - google html file paths that should help
142:31 - you so go ahead and give this one a shot
142:33 - and then i will show you how to solve it
142:35 - as well when you return back to me
142:41 - okay let's do this
142:43 - let's take this string right here and
142:45 - paste it into google there you can see
142:47 - that the top result is a w3schools
142:49 - article let's head into that one here
142:51 - you can see file path examples let's
142:54 - zoom in on this one and if we have image
142:56 - source equals picture.jpg which would be
142:59 - the same as we have here although our
143:00 - image is called pair.png that means that
143:03 - the file is located in the same folder
143:06 - as the current page
143:08 - well is that the case now looking at our
143:10 - current page index.html you can see that
143:13 - the image is not located in the same
143:15 - folder as the index.html because the
143:18 - image lives inside of the images folder
143:21 - so what we then might need is something
143:23 - like this where we do images slash and
143:25 - then the picture name
143:27 - here it means that the picture is
143:28 - located in the images folder in the
143:30 - current folder and that looks correct
143:33 - the images folder is in the same folder
143:36 - as index.html and the headshot of me is
143:39 - located inside of that images folder
143:42 - that means that we can try to do images
143:44 - like that slash run the code oh
143:47 - there we go
143:49 - we have my avatar imported and are ready
143:52 - to move on to the next scrim i'll see
143:54 - you there
143:57 - okay now we're gonna do a little bit of
143:59 - housekeeping here because this image
144:02 - element actually has a serious flaw
144:05 - because it lacks an important ingredient
144:07 - that all image tags should have which is
144:10 - called the alt text or the alternative
144:13 - text
144:14 - and that is simply an attribute that is
144:17 - written like this alt equals and then
144:20 - inside of quotes you are to write a
144:22 - description of the image so here it
144:25 - could be for example pierre
144:27 - smiling like that however if we run this
144:30 - code now we can see that seemingly
144:32 - nothing has changed so why do we at all
144:35 - write these old texts well first of all
144:37 - it makes your site accessible because
144:39 - imagine that a person who is visually
144:42 - impaired or who is blind is trying to
144:44 - visit your website in that case they
144:46 - would use a screen reader which goes
144:49 - through the html and reads it out loud
144:52 - to the user
144:53 - and as for the h3 tag it would be simple
144:56 - for the screen reader to read out loud
144:58 - what that says because that is text
145:00 - however for an image like this one you
145:03 - need to add an alt tag to describe the
145:05 - image so that the screen reader has
145:07 - something to read out loud and secondly
145:10 - this also works as a fallback if your
145:12 - image doesn't render properly because
145:14 - let's say you have a spelling mistake in
145:16 - the source attribute for example an
145:18 - extra r well in that case the image
145:21 - won't render but the alt tag provides as
145:24 - a backup so that the user seeing this
145:26 - can kind of understand what was at least
145:28 - supposed to be there and finally writing
145:30 - alt text will help your site rank higher
145:33 - on google meaning you get more search
145:35 - traffic and that is because the alt tag
145:38 - most likely provide important metadata
145:40 - about the image so that google knows how
145:42 - to use it in a search results page and
145:44 - if your site is not accessible it might
145:46 - be punished in the form of ranking lower
145:49 - so with that in mind let's look at how
145:51 - to write these old texts and the first
145:53 - thing you need to know is that you
145:54 - should not include for example image of
145:57 - because that's simply not necessary the
145:59 - screen reader knows that it is an image
146:01 - because it is an image tag
146:03 - secondly should be concise meaning less
146:06 - than 125 characters because a lot of
146:09 - screen readers will cut off after this
146:11 - limit has been reached and finally a
146:12 - trick you should use in order to come up
146:14 - with a good old text is imagine that you
146:17 - are describing this image to a person
146:20 - over the phone so let's try to do that
146:22 - with an example
146:23 - here we have an iconic image of muhammad
146:25 - ali in a boxing match and one way to
146:28 - write an old text for this could be just
146:30 - a boxing match but it would actually be
146:32 - a pretty poor way of describing it
146:35 - because there's so much more going on
146:36 - here you have plenty more characters you
146:38 - can use in order to describe it so a
146:40 - better one would be two boxers in the
146:42 - ring one lying down and the other
146:44 - standing up
146:45 - that's a good factual explanation but
146:47 - we're not quite there yet because it
146:49 - isn't actually describing this iconic
146:52 - moment when muhammad ali knocked out
146:54 - sunny listen so if you were to describe
146:56 - this over the phone you would probably
146:58 - understand that this description is
147:00 - pretty shallow so what i would rather
147:03 - write as an old text for this image
147:05 - would be muhammad ali in the boxing ring
147:07 - screaming at sunny listen after knocking
147:10 - him out that in my opinion properly
147:12 - describes the intent of this image what
147:15 - the person who has decided to show this
147:17 - image on a website is trying to convey
147:20 - so with that example in mind
147:23 - i want you to
147:24 - write what you think is an appropriate
147:26 - alt text for this image go ahead and do
147:29 - that right now and then i will show you
147:31 - what i would write when you return back
147:33 - to me
147:39 - okay let's do this
147:40 - we'll do alt equals quotes and here i
147:43 - would use my name pair harold bergen
147:47 - and you can see i'm smiling and i'm
147:49 - looking at the camera i think that's
147:51 - important so i'd write smiling at the
147:54 - camera
147:55 - finally the background is really playful
147:58 - and colorful
148:00 - so i want to include for example
148:02 - with a
148:03 - colorful
148:04 - background like that so if yours was a
148:07 - bit simpler or shorter don't worry about
148:09 - it the most important thing is that you
148:11 - add an alt text and do as best as you
148:13 - can and actually plenty of developers
148:16 - never add this so just by adding it you
148:18 - are actually separating yourself from
148:19 - most other beginners so with that let's
148:22 - just move on
148:26 - the next thing we're going to do is
148:28 - shrink this image to a suitable size for
148:31 - our business card because as it is now
148:33 - it is far too big
148:35 - so i want you to head over to the
148:36 - styles.css and solve this challenge you
148:39 - are to set the width of the image to 150
148:42 - pixels
148:43 - and you need to use a class to select
148:45 - the image element so go ahead and give
148:48 - this a shot right now
148:54 - okay hopefully that went well let's now
148:56 - do it together so first we need to
148:58 - actually create the class that we are
149:00 - going to select from the css so let's
149:03 - head over to the html file here we'll
149:05 - just do
149:06 - class equals and i'm going to call this
149:09 - one an avatar
149:11 - like that actually now that we have
149:13 - three of these
149:14 - on the image element i think for
149:16 - readability purposes
149:18 - it works well to break them into three
149:20 - lines
149:21 - i think this is a little bit easier to
149:23 - read then i'll head over to the
149:24 - styles.css and target the class dot
149:28 - avatar
149:29 - and reset the width
149:31 - to 150 pixels now rerun the code there
149:35 - we go
149:36 - so great job solving this challenge
149:38 - let's move on
149:42 - okay now you're soon going to start
149:44 - building the layout of this card however
149:47 - right now the card kind of blends into
149:50 - the background there's no separation
149:52 - between the card and the background so i
149:54 - want to add a little helper style in
149:56 - order for us to more clearly separate
149:58 - the card from the background and for
150:01 - that we need to grab hold of the outer
150:03 - element of the card and can you take a
150:06 - guess what kind of html element do you
150:08 - think should wrap the entire card
150:13 - if you guessed a div that is correct
150:16 - and heading over to the html you can see
150:18 - we are actually already wrapping the
150:19 - entire thing in a div so here we have
150:22 - our container div or card div or
150:25 - whatever we want to call it
150:27 - so what i want you to do now is to first
150:29 - give that div a class and actually i
150:32 - think you should call it card and then i
150:34 - want you to select the card class in css
150:37 - and give it a dotted blue border this is
150:40 - our helper styles it'll give us a little
150:42 - blue border around the element so that
150:44 - we can see how our card div kind of
150:47 - behaves
150:48 - and also as you can see from the design
150:50 - here
150:51 - none of the elements
150:52 - touch the edge of the border so it seems
150:54 - like there's some padding in play here
150:56 - let's just add 20 pixels of padding on
150:59 - all sides of the card as well
151:01 - so go ahead solve these three challenges
151:03 - and then i'll of course show you the
151:05 - solution as well
151:11 - okay let's do this
151:12 - so first we need to give the card div a
151:15 - class
151:17 - i'll head over here and do class equals
151:20 - card
151:22 - i'll run this code so that we have this
151:24 - class in the dom
151:27 - the next step is to select the class
151:30 - by doing card
151:32 - and then adding a border if you remember
151:33 - from previously that is done through the
151:35 - border property which takes three values
151:39 - the first one being the thickness of the
151:40 - border i'm just gonna set it to one
151:42 - pixel the second being the quality for
151:44 - example solid or dotted or dashed or a
151:47 - few others we're going to use the dotted
151:49 - one and the color will be blue and there
151:52 - you can see
151:53 - boom
151:54 - we have a border around our entire card
151:58 - and this will make it a lot easier for
151:59 - us to work with the card now that we can
152:01 - see it clearly on the page
152:03 - finally we want to add 20 pixels of
152:05 - padding because as you can see here the
152:07 - elements touch the border on these sides
152:10 - and we don't want that we want some
152:12 - space so we'll do padding
152:14 - 20 pixels like that
152:16 - and there we go
152:18 - we have solved the challenge
152:20 - with this in place i think we're ready
152:22 - to start moving on with fixing the
152:24 - layout and as you can see on the
152:27 - finished design here there's a big
152:28 - difference between this one and our
152:30 - current one and that is that the current
152:33 - one is vertical whereas this one is more
152:36 - horizontal so they stack up differently
152:38 - we want the image on the left hand side
152:40 - and the text on the right hand side not
152:42 - everything on top of each other so
152:44 - basically we want two columns one for
152:46 - the image and one for the text
152:49 - and as you might remember from
152:50 - previously flexbox helps us create
152:52 - columns so let's now just experiment by
152:55 - adding display flex to the card
152:57 - let's see what happens oh wow
152:59 - okay so what happened there it actually
153:02 - turned every single element into a
153:05 - column in itself that's not exactly what
153:08 - we want here
153:09 - so display flex
153:11 - isn't the entire solution so what we're
153:13 - going to do now is go out on a tangent
153:16 - learn a little bit more about this
153:18 - flexbox concept in css and then return
153:20 - back to this business card project once
153:22 - we're ready to build a layout like this
153:25 - so let's move on and learn more about
153:28 - flexbox
153:32 - okay so let's say that you've built some
153:33 - kind of software as a service and now
153:36 - you want to sell it then you might have
153:38 - a page like this
153:40 - where people can upgrade to pro and they
153:42 - can choose the individual plan which
153:44 - gives them one gigabyte and no support
153:46 - or the enterprise plan which gives them
153:48 - 10 gigabytes and priority support now
153:50 - i've purposely not given any design to
153:53 - this example as i wanted to make it as
153:55 - easy as possible to grasp but hopefully
153:57 - if you are to create a pricing page to
154:00 - make it look a lot better than what we
154:02 - have here so you can see the html right
154:05 - here for the entire pricing layout i've
154:07 - wrapped it in a div and i'm using an h2
154:10 - unordered list a button and so on now
154:13 - let's say that you instead of having
154:15 - this one column layout here where
154:17 - everything stacks on top of each other
154:19 - you want this two column layout where
154:21 - you have the individual plan at the left
154:23 - hand side and the enterprise plan at the
154:25 - right hand side well if so we know that
154:28 - flexbox will help us create columns but
154:31 - if we try turning our container that is
154:33 - the div with the class of pricing
154:36 - into a flexbox
154:38 - you'll see that
154:41 - it'll break the layout just as we saw in
154:44 - our business card example because what's
154:46 - going on here is that flexbox
154:49 - takes every single item that is every
154:52 - single direct child
154:54 - and turns it into a column in itself so
154:56 - we get a column for the h2 for the
154:59 - unordered list for the buy button for
155:01 - the h2 again and so on and this is
155:04 - obviously not what we want it's far from
155:06 - this two column layout right here
155:09 - however there's one hint to be drawn
155:11 - from this example and that is that if
155:14 - you check out the unordered list here
155:16 - see that it has two children of itself
155:18 - li element
155:20 - and those two are not their own columns
155:23 - they are in the same column stacking on
155:25 - top of each other so it seems as if
155:28 - flexbox only turns the direct children
155:31 - into their own columns
155:33 - so the direct children are the h2 here
155:36 - the ul the button but not the list items
155:39 - and once we know that we can use that
155:41 - knowledge in order to get to this layout
155:44 - because this layout has two columns that
155:46 - means that our flexbox container should
155:48 - have two direct children not six as it
155:51 - has now and how can we achieve that
155:54 - well we want this group to be inside of
155:57 - a direct child of this container and we
156:00 - want
156:01 - this group of html elements to also be
156:04 - inside of another direct child of the
156:06 - flexbox container so what we'll simply
156:08 - do is we'll wrap both of these
156:11 - inside of a div
156:12 - like that
156:14 - and we'll indent it for readability
156:16 - purposes
156:17 - let's try to run this code having
156:19 - wrapped one of the two groups into its
156:21 - own div
156:22 - and there you can see the four
156:24 - individuals plan now stacks up just how
156:27 - we want it
156:28 - but the rest of the layout is still
156:30 - broken so we need to do the same thing
156:32 - down here
156:35 - like that
156:36 - run the code and there we go
156:39 - now our flexbox container actually only
156:41 - contains two items
156:43 - this div and this div as it doesn't care
156:46 - about what's inside of both of those
156:48 - children it only cares about its direct
156:50 - children and the result is that we get
156:53 - the layout we wanted here at least in
156:55 - terms of having two columns
156:57 - there's still a problem with lacking
157:00 - space in between these two children but
157:02 - we're not going to deal about that right
157:03 - now for now i'm gonna send you back to
157:05 - the business card example so that you
157:07 - can use this to improve our layout
157:12 - okay we are back at our business card
157:14 - example and now i want you to use what
157:16 - you've just learned in order to fix our
157:19 - cards broken column layout because you
157:21 - are going to make this card into a two
157:23 - column instead of a four column which it
157:25 - is now set as the image name
157:28 - title and location at four different
157:31 - columns
157:32 - but instead we want two columns one for
157:34 - the image and another one for the text
157:36 - elements
157:38 - so
157:38 - this challenge is solved in the html as
157:41 - you know we already have a display flex
157:43 - on the card and the only thing you need
157:45 - to do is one change inside of our
157:47 - flexbox so hopefully you're able to do
157:49 - that go give it a shot and then i will
157:51 - show you the solution as well
157:57 - okay hopefully that went well let's do
158:00 - it together
158:01 - so the problem is that flexbox treats
158:05 - each of these elements
158:07 - as a single child and thus each of them
158:09 - get its own column
158:11 - however we only want two columns so we
158:14 - want these three to be governed by one
158:16 - flex child so we need to wrap them
158:19 - inside of a div 12. we'll do like this
158:23 - open the div and then close the div down
158:25 - here
158:26 - and we'll indent these so that we get
158:28 - some better readability now you can see
158:30 - the flexbox only has two direct children
158:33 - this one and this one and that means
158:35 - that we should get two columns in our
158:37 - layout and yes we do
158:40 - brilliant of course there's still a long
158:42 - way from this design to this design but
158:45 - we are making great progress here so
158:46 - let's just keep up the pace and move on
158:48 - to the next scrim
158:52 - okay i think looking at this example now
158:56 - i gotta admit that i'm pretty pleased
158:57 - with this border one pixel dotted blue
159:00 - here i think it serves a very nice
159:02 - purpose which is to highlight for us how
159:04 - our card is being laid out on the page
159:06 - so wouldn't it be nice if we could use
159:08 - that exact technique on other elements
159:11 - on the page as well for example the
159:12 - children of the flexbox container that
159:15 - is this image right here and the div tag
159:17 - that would have been really neat and we
159:19 - can do that by for example just copying
159:22 - this one and adding it for example to
159:23 - the avatar see there the avatar is got
159:26 - that blue border as well
159:28 - however wouldn't it be neat if we
159:31 - in our html could just quickly apply a
159:33 - class to any element for example this
159:36 - one and it would get the same thing as
159:38 - well so basically the argument i'm
159:39 - making is that we should create a
159:41 - dedicated class for this blue border
159:45 - and what that is is a utility class aka
159:48 - a class that only sets a single css
159:50 - property so let me show you how this
159:53 - would work
159:54 - let's say that we for example want a
159:55 - class to make our text italic
159:58 - then we'll simply do class equals
160:00 - italic like that
160:02 - if we run this code nothing has happened
160:04 - because the class hasn't been created
160:06 - yet but here we can create the italic
160:09 - class
160:10 - and do
160:11 - font style
160:12 - italic like that
160:14 - and now you can see
160:15 - the name is in italic
160:17 - now if we want to reuse this we can just
160:20 - do
160:21 - class
160:22 - italic here as well from the code and
160:25 - the location is also italic and if we
160:27 - want the entire card italic we can even
160:29 - add the class here up on the container
160:31 - element itself
160:32 - run the code and now this has been
160:34 - inherited down to all of these elements
160:37 - and if you're a bit confused about what
160:38 - i'm doing here it is simply adding two
160:41 - css classes to a single element do that
160:43 - simply by adding a space in between the
160:45 - two classes okay
160:47 - let's
160:48 - get rid of these
160:50 - like that
160:52 - and delete this one as well now what i
160:54 - want you to do is create a utility class
160:57 - for the dotted blue border this is the
161:00 - styling we have here and then give the
161:02 - class to both flexbox children in the
161:04 - html that is the flexbox items you can
161:07 - see
161:08 - here and here and also
161:10 - i think you should give the same class
161:12 - to the card as well so that you can
161:13 - remove this line 10 here so go ahead and
161:15 - give this one a shot and then i will
161:17 - show you how to do it afterwards as well
161:24 - okay hopefully that went well let's
161:26 - start out by creating the class
161:28 - all right border blue here
161:32 - and then inside of it i'll just
161:34 - cut this away and paste it in here
161:36 - instead now we have a utility class for
161:38 - blue borders
161:39 - i'll copy it
161:41 - and add it
161:42 - to this flex item and as a second as to
161:46 - the
161:46 - image element if we run this code you
161:48 - can see now both of these
161:51 - have the blue border around them let's
161:53 - also add the border blue class to the
161:55 - flexbox container run the code and boom
161:57 - there we go now we have an even better
161:59 - overview over how our elements are laid
162:02 - out
162:05 - okay with these blue borders around the
162:07 - flexbox children it's pretty easy to see
162:10 - that our layout is pretty far from how
162:12 - we want it to be
162:13 - because here you can see in the card
162:15 - that there's some space in between the
162:18 - two elements whereas in our example
162:20 - they're completely crammed together and
162:22 - also pushed all the way to the left hand
162:24 - side whereas here they're kind of spaced
162:27 - out there's some space on the left-hand
162:29 - side in between the element and also
162:32 - some space on the right-hand side so
162:34 - they're kind of spaced out in a nice way
162:36 - and now i want you to add that
162:38 - horizontal space around the flex
162:40 - children there's a flexbox property that
162:42 - does this and you've seen that property
162:44 - before however you might have forgotten
162:45 - it if so then google justify content and
162:49 - you might find the answer i'm not going
162:50 - to give you any more hints than that
162:52 - because if you have forgotten about it
162:53 - it is a great practice to google it
162:56 - then once you've figured out the answer
162:58 - go ahead and add the horizontal space so
163:00 - that our example becomes a little bit
163:01 - more like this layout
163:03 - and just so you know you only need to
163:05 - add one property for this not multiple
163:08 - so give it your best shot and then i
163:10 - will show you the solution afterwards as
163:11 - well
163:17 - okay let's do this so the property is
163:20 - called
163:21 - justify content
163:23 - a little bit of a weird name i agree but
163:25 - that's how it is
163:26 - and here we can use a range of different
163:28 - values and the one we're looking for is
163:30 - called space
163:32 - around like that and now you can see
163:34 - both elements now have some space around
163:37 - them and also we could do space between
163:40 - then all of the available space will be
163:43 - between the two items
163:45 - or we could even do
163:46 - center as you've seen before then
163:48 - there's no space in between them but
163:50 - both of them are centered
163:51 - and end pushes it all the way to the end
163:55 - and start keeps it at the start
163:58 - so this is a super powerful property and
164:01 - we want the space round value for it as
164:04 - you can see it's at least getting closer
164:07 - to the layout we have in our finished
164:09 - design
164:10 - so great job let's move on
164:15 - okay time for a new challenge you are
164:17 - going to set a fixed width on the card
164:20 - and then center it on the page because
164:22 - its behavior is a little bit weird right
164:24 - now as you can see if we enlarge in the
164:26 - screen the card gets enlargened as well
164:29 - and that makes the spacing between the
164:31 - elements look super weird the aspect
164:33 - ratio becomes very different from a
164:35 - business card so we don't want that
164:37 - instead we want the width to be 400
164:39 - pixels
164:40 - so it should be a fixed width and then
164:43 - we also want the card to be centered on
164:45 - the page now one thing i want you to
164:47 - notice when i enlarge in this is that
164:50 - the card is a display block
164:53 - even though we've set it to display flex
164:56 - so that means that flexbox containers by
164:58 - default our display block and hopefully
165:01 - you remember from previously that
165:02 - display block takes up all the available
165:04 - space in the horizontal axis
165:07 - and there is also one of the three
165:09 - ingredients you need in order to center
165:11 - an element using margins so hopefully
165:14 - you remember from the google project how
165:16 - to center block elements so go ahead and
165:19 - give this one your best shot and then i
165:21 - will show you the solution as well when
165:22 - you return back to me
165:28 - okay let's do this i'll start by setting
165:31 - the width
165:32 - to 400 pixels like that now you can see
165:34 - if we enlarge the screen the card is
165:37 - stuck to the left-hand side of the
165:38 - website
165:40 - so in order to fix that and instead
165:42 - center it we'll use margins and
165:44 - hopefully you remember that we'll do
165:45 - margin
165:46 - left
165:47 - and set that to auto that pushes it all
165:50 - the way to the right hand side because
165:52 - all of the margin is now on the left
165:53 - hand side but then in order to even it
165:56 - out and center it we'll do margin
165:58 - right as well and set that to auto
166:02 - and the result of having an equal margin
166:04 - on the left hand side and the right hand
166:06 - side is that the card is centered so
166:09 - great job on solving this challenge
166:10 - let's move on
166:14 - okay now let's talk a little bit about
166:17 - css inheritance and why is that
166:20 - important well css inheritance allows
166:22 - you to write so-called dryer code and
166:25 - dry hair stands for don't repeat
166:28 - yourself meaning that with css
166:30 - inheritance you can write less code
166:32 - though still receive the same result and
166:34 - that's a good thing because less code
166:36 - means a smaller surface area for bugs
166:39 - and it also means that you will be a
166:41 - more efficient developer
166:43 - so let's have a look at how css
166:45 - inheritance works in practice
166:47 - here i've pulled in a wikipedia article
166:49 - in our mini browser a really wacky
166:52 - article about a dancing plague that
166:54 - happened in 1518
166:56 - in modern day france where either dozens
166:58 - or hundreds of people took to the street
167:01 - and danced for days without no one
167:03 - really knowing the reason so this is
167:05 - really weird but properly documented
167:08 - from multiple sources and here is an
167:10 - illustration i have no idea what caused
167:13 - this dance epidemic but i think the
167:15 - modern theory about their grains being
167:18 - poisoned by fungus that gave them the
167:20 - same high as you get from lsd sounds
167:22 - pretty reasonable
167:24 - anyway let's not get too far into this
167:26 - rabbit hole what i want to do is use
167:29 - this article in order to show you how
167:31 - inheritance works
167:33 - so if we head over to the html here you
167:35 - can see that we are using a bunch of
167:36 - different tags h1 h4 h2 paragraph and so
167:40 - forth and let's now say that we want the
167:43 - text in this article to be aligned to
167:45 - the center and not to the left side well
167:47 - then a very poor way of solving that
167:49 - would be to target the age one first and
167:52 - then do text align
167:54 - center like that and then the center is
167:56 - text and then we can copy that we can do
168:00 - the same for the h2 and there you see
168:02 - the h2 is centered
168:04 - and then we can do it for the
168:05 - paragraph like that and so on and so on
168:09 - however
168:10 - this is not a drive we are repeating
168:12 - ourselves a lot here and it's not
168:14 - necessary because
168:15 - since
168:16 - the h1 and the h4 and all of these live
168:20 - inside of the body they will also
168:22 - inherit some properties from the body
168:24 - tag so what we can do instead is just
168:27 - delete all of these now it's back to
168:29 - left aligned and then here we can add
168:32 - text align
168:34 - enter like that
168:35 - now all of these
168:37 - elements inside of the body are centered
168:40 - so as simple as that however there's
168:43 - only a certain set of properties that
168:45 - are inherited and actually most
168:47 - properties are not inherited so then
168:50 - you're probably wondering well how do i
168:51 - know which are inherited well let's do
168:54 - what we always do when we are unsure of
168:56 - something when we're coding we'll google
168:58 - it which css properties are inherited
169:01 - here's the stack overflow question let's
169:02 - click into that
169:04 - and scroll down to the first answer and
169:06 - you can see here is a list of all
169:07 - inheritable properties you can see it's
169:10 - down to 19 if we scroll a bit down down
169:12 - to 41 in total that is quite a lot
169:15 - however you only need to care about very
169:18 - few of these one of them being the text
169:20 - line that you just saw and the others
169:22 - being the font properties so font family
169:25 - font weight font size and so on and
169:28 - finally also the color other than that
169:30 - don't worry about any of these at this
169:32 - point you're going to learn some of them
169:34 - later but to be completely honest
169:36 - there's a ton of css properties here i
169:38 - have never heard about before i recorded
169:40 - this scrim okay now it's time to get
169:42 - your hand on the keyboard so i want you
169:45 - to navigate to this stack overflow
169:48 - question this one right here
169:49 - and then pick a few random inherited css
169:52 - properties
169:53 - and then add them to the body tag up
169:55 - here to see how they work
169:57 - you probably have to google them to
169:59 - figure out what kind of value you should
170:01 - set to the properties but that's also
170:03 - just good practice now some of these
170:05 - just warn you are meant for screen
170:07 - readers or audio for for example speech
170:09 - rate and volume and stuff like that so
170:12 - they might not result in any visual
170:14 - change on the page but others will so
170:16 - just pick a few try it out see how it
170:18 - works in order to experiment a little
170:20 - bit you can click on this image to get
170:22 - to the stack overflow question
170:24 - and then when you have experimented with
170:26 - a couple of properties i will see you
170:28 - back in the next scrim
170:33 - okay now it's time for a challenge in
170:36 - the business card project because you
170:38 - are going to center the text inside of
170:40 - the paragraph and the h4 elements
170:43 - and that is the
170:44 - paragraph right here which says
170:46 - front-end developer and the h4 right
170:48 - here
170:49 - because as you can see
170:51 - both of those elements are now crammed
170:53 - all the way to the left hand side
170:55 - whereas in our finished design
170:57 - they are aligned at the center of this
171:00 - flex children
171:01 - directly underneath the name pair harold
171:04 - borgen and if you're wondering why we're
171:06 - not caring about centering this one it's
171:08 - because it takes up the full width of
171:10 - the container so you can't center or
171:12 - left or right align it because it takes
171:14 - up the full width anyway it is the
171:16 - element that actually decides how wide
171:18 - this container should be
171:20 - so
171:21 - you will only see the paragraph and the
171:23 - h4 change when you fix this
171:26 - and the way you should do it is by only
171:27 - adding one property and then have
171:30 - inheritance take care of applying that
171:33 - property to both elements so you're only
171:35 - going to write one line of code i'm not
171:37 - going to tell you where you should add
171:39 - that line of code you have to figure
171:41 - that out on your own and i'm also not
171:42 - going to tell you what the property is
171:44 - called for the value you'll give it but
171:46 - you have seen it before
171:48 - so hopefully it's not that foreign to
171:49 - you so jump into the code and try to
171:51 - solve this challenge now then of course
171:53 - revert back to me when you want to see
171:55 - my solution
172:01 - okay hopefully that went well now we're
172:04 - going to use the text align property and
172:07 - set it to center
172:08 - but before we do that we need to decide
172:11 - which element we should target with that
172:13 - property should we add it to the entire
172:15 - body for example if so it'll inherit
172:17 - down
172:18 - from the body
172:20 - into the card and then into our flex
172:23 - children right here and then finally to
172:25 - these elements as well that works
172:26 - perfectly fine we can actually try it
172:29 - text align
172:31 - center and boom
172:32 - these two are now centered however
172:35 - imagine that this card is a part of a
172:36 - bigger website if so we've now centered
172:39 - all text inside of the body
172:42 - which is where all of the html both now
172:45 - and in the future will live so this
172:47 - might have second order consequences
172:49 - perhaps you want to have a nav bar with
172:50 - a title that isn't text align center but
172:52 - rather text line right or left
172:55 - so actually i think it's better to scope
172:57 - this to for example our card we at least
172:59 - know now that all the text we currently
173:01 - have in our card should be aligned to
173:03 - the center so let's do that instead
173:06 - let's just remove it from the body and
173:07 - paste it in here and now we're not
173:09 - causing any unwanted second order
173:11 - effects outside of the card so this is
173:13 - in my opinion a better solution but if
173:15 - you added it to the body that is a
173:17 - perfectly valid solution as well so
173:19 - don't feel that you did a mistake in
173:20 - coding there's always plenty of ways to
173:22 - solve things and there's rarely one
173:24 - right answer there's just consequences
173:26 - for whatever choice you make so really
173:29 - good job doing this let's move on
173:34 - all right now the fun stuff remains
173:36 - which is adding colors according to the
173:39 - specified design here so this is a
173:41 - really rewarding little challenge
173:42 - that'll make a ton of difference as
173:44 - you'll go from this boring white layout
173:46 - here to a nice colorful layout so you're
173:49 - going to add these three colors as you
173:52 - can see i've added the hexadecimal
173:54 - values for each of the colors the black
173:56 - the blue and the purple
173:58 - the purple is the border at the bottom
174:00 - here the blue is the background color of
174:02 - course and then finally you might wonder
174:04 - well what's the black well that is
174:06 - actually the text color as the text here
174:09 - isn't pure black
174:10 - as it uses this shade of black instead
174:13 - now you might wonder well
174:15 - how do i create this order at the bottom
174:18 - here i've only learned how to create
174:19 - borders around an entire element
174:21 - previously well the way to solve any
174:23 - problem when coding is to google it so
174:26 - let's just write border bottom css in
174:29 - google there you can see a w3schools
174:31 - article click in on it and here it has
174:33 - some code examples which we can zoom in
174:35 - on
174:36 - set the style of the bottom border for
174:38 - different elements and here it shows us
174:41 - how to set the border bottom so we do
174:43 - border dash bottom and then for example
174:45 - 5px solid red well that's exactly how
174:48 - we'd set the border itself except that
174:51 - we would omit this dash bottom in the
174:54 - property name so you'll use the exact
174:56 - same technique you've used for the
174:57 - entire border just with this extra word
175:00 - added to the end so hopefully you'll be
175:02 - able to do that so here is the design
175:05 - and a final thing i'm going to do before
175:07 - i'll leave it to you is to remove these
175:10 - blue borders here because we don't need
175:12 - them anymore so let's head into the html
175:15 - i'm going to mark the border blue
175:17 - utility class we've added do command
175:20 - plus d that enables you to select
175:22 - multiple instances of whatever you've
175:24 - highlighted and then
175:26 - boom i'm going to remove it like that
175:29 - then also we don't need any class in the
175:31 - div
175:32 - for this flex children anymore in the
175:35 - code our borders are gone
175:37 - i'll leave this for now
175:39 - in case you want to add it back again
175:40 - but now it's your turn
175:42 - go ahead and try to solve this challenge
175:44 - and then of course i will show you the
175:46 - solution when you return back to me
175:52 - okay hopefully that went well let's now
175:55 - do it together i'm going to start with
175:57 - the blue background as that'll make the
175:59 - biggest difference so i'll do
176:01 - background
176:02 - and copy this hex value like that very
176:05 - good
176:06 - then i'll do the text color that is
176:09 - color
176:10 - and copy the one right here
176:12 - yes not as visible as the previous
176:14 - change but something surely happened
176:16 - we're now using that shade of black for
176:18 - the text and finally the purple border
176:21 - bottom will be added by doing border
176:23 - dash
176:24 - autumn
176:25 - and then let's try two pixels and we
176:28 - want to use solid
176:29 - then the purple color
176:31 - okay we can see a thin border at the
176:33 - bottom let's have a look at the design
176:36 - it looks like it is definitely thicker
176:37 - here so let's crank it up a little bit
176:40 - for example six pixels
176:42 - yes that looks pretty good to me
176:44 - actually so
176:46 - really good job reaching this far you
176:48 - are very close to the end right now so
176:50 - let's just keep up this great pace and
176:53 - finish up this project over the next few
176:55 - scripts
176:59 - okay now i want to talk a little bit
177:00 - about fonts because fonts are actually
177:02 - really important let's say that you for
177:04 - example have created a computer
177:06 - specialist company called click lovers
177:08 - well you might want to think about which
177:10 - font you choose in that case or if
177:12 - you're the owner of the megaflix shop
177:14 - you should also think carefully about
177:16 - which font you choose finally if you are
177:18 - the head of the wig and pen association
177:20 - make sure that your font spaces out
177:22 - words correctly now these are of course
177:25 - extreme cases and they're all on prints
177:27 - you'll rarely see cases as bad as this
177:30 - on the web but fonts really matter
177:32 - online as well let's take wikipedia for
177:34 - example here is a random article about
177:36 - people who have died from laughter as
177:37 - you can see wikipedia has this very
177:39 - serious nice font but if we change that
177:41 - to something like comic sans you can see
177:43 - the text gives a whole different type of
177:45 - association it went from being very
177:47 - serious like this to being more like a
177:49 - comic book
177:50 - so when you are building projects it is
177:52 - important that you choose a font that
177:54 - kind of suits your project
177:56 - so let's move on to look at how it works
177:58 - technically under the hood
178:00 - because when you visit a website for
178:01 - example scrimba.com you visit it via a
178:04 - client that could be your mobile tablet
178:06 - desktop or whatever
178:08 - what happens is that when you type
178:10 - www.scramble.com into the url bar it
178:13 - sends a request to scrimbus server and
178:16 - then the server says yeah okay you want
178:18 - to visit our website yeah of course here
178:20 - you go and it takes everything you need
178:22 - in order to run the scrimba in the
178:23 - browser that is the html the css the
178:26 - javascript the assets which can be
178:28 - images and videos and so forth then also
178:30 - the recipe for the font and then it
178:33 - sends that back to the client
178:35 - however for some websites they won't
178:37 - send you the recipe for the font over
178:40 - the network because they will instead on
178:42 - their website use a font that most
178:44 - likely is already pre-installed in your
178:47 - client that is also called a web safe
178:50 - font meaning that the recipe for
178:52 - rendering that font exists in most
178:55 - clients now of course there might be
178:57 - some clients that don't have that
178:58 - specific font but in almost all cases
179:01 - it's safe to use one of the web safe
179:03 - fonts without sending the recipe for it
179:05 - over the network
179:07 - so what are these web save fonts well
179:10 - here is an article on v3 schools where
179:12 - you can see all of the web save fonts
179:14 - for html and css so when you're using
179:16 - these you don't have to send the recipe
179:18 - for the font over the network
179:21 - now for our digital business card we're
179:23 - only going to use web save fonts but
179:25 - later down the line you'll also learn
179:27 - how to pull in external fonts so that
179:29 - you can go outside of these 10 fonts as
179:31 - they don't really give you a lot of
179:33 - flexibility so with that in place let's
179:36 - look at how you actually use a font in
179:38 - css
179:39 - so in order to set the font you first
179:41 - target normally the body and then type
179:43 - out font family and then the name of the
179:45 - font and here you can see we've typed v
179:48 - e and that triggers vs code which is the
179:50 - editor powering scrimba to come up with
179:53 - suggestions for you you can see it
179:54 - doesn't only suggest verdana which is
179:56 - the font we want it also adds a bunch of
179:58 - other fonts after it
180:00 - all separated by comma so if we hit
180:03 - enter now boom then we've added what's
180:06 - called a font stack and what this means
180:08 - is that if the browser finds the verdana
180:11 - font installed it finds the recipe for
180:13 - that font well then it will use it
180:15 - however if it can't find it if verdana
180:17 - isn't installed in the client's computer
180:19 - then it'll try to find geneva which is a
180:21 - pretty similar font if it can't find
180:23 - geneva it'll jump on and try tahoma and
180:26 - if it can't even find tahoma it says
180:28 - well give me any sans serif font and
180:32 - sans serif is a category of fonts so
180:34 - here it's just saying give me any font
180:36 - from this category and there are mainly
180:38 - two categories sans serif and serif here
180:41 - you can see an example of both of them
180:42 - serif fonts contain these decorative
180:45 - strokes at the end of the letters you
180:47 - can see it here
180:48 - here
180:49 - here where's sans serif is without those
180:54 - decorative endings
180:55 - so sans then means without or not or
180:58 - something like that you get the point
181:00 - okay that was a lot of theory now it is
181:04 - your turn you are going to set the font
181:06 - here to verdana and also make sure to
181:08 - remember to get the entire font stack so
181:10 - that we have backups in case the client
181:12 - doesn't include the verdana font
181:14 - so go ahead and do that right now
181:21 - okay hopefully that went well what you'd
181:24 - want to do is font family colon
181:27 - start typing and then the editor
181:29 - suggests the entire font stack though
181:31 - you won't see that now because the
181:33 - scrimba dom recorder doesn't record it
181:35 - however i can see it so i'm just gonna
181:37 - hit enter and boom the editor suggested
181:40 - this entire font stack with me
181:42 - we have changed the font let's verify
181:44 - that by removing it boom yeah that's
181:46 - different from this
181:48 - so really good job we've actually now
181:50 - completed the design for our business
181:52 - card however there's a little issue with
181:55 - our code because this is how noobs write
181:58 - their margins and i want to teach you
182:00 - how the pros do it so let's move on to
182:02 - the next scrim where you'll learn
182:04 - exactly that
182:08 - okay now it's time to learn about the
182:10 - shorthands for margin and padding and
182:13 - you've actually been exposed to one of
182:15 - them already which is that if you have
182:17 - the same value on the margin top right
182:19 - bottom and left you can reduce those
182:22 - four lines into one margin 10px then the
182:25 - browser will take this 10px and apply
182:27 - them to all sides so these four lines
182:30 - are identical to this one down here now
182:32 - the question becomes what happens when
182:34 - you have four different values for
182:36 - example 10 px 20 px 30 and 40. well if
182:39 - so you have to do like this
182:41 - margin and then 10 px 20 30 40. so the
182:44 - first one is margin top the second one
182:46 - is right the third one is bottom and the
182:48 - fourth one is left so now you're
182:50 - probably thinking well how can i
182:52 - possibly remember this order and the
182:54 - trick is to think of the clock
182:56 - it starts at the top then goes to the
182:58 - right then goes to the bottom and then
183:00 - goes to the left so with that in mind i
183:03 - want you to improve this code here
183:05 - which creates the japanese flag in css
183:08 - because as you can see this red circle
183:11 - here which is
183:12 - a div
183:13 - has a few styles applied up here but
183:15 - down here we've used the non shorthand
183:18 - way to set the margins
183:20 - setting some margin on the top so that
183:22 - the circle is pushed down
183:24 - nothing on the right and the bottom but
183:25 - 100 pixels on the left so that it's
183:27 - pushed to more or less the center of the
183:29 - screen given that the screen is as wide
183:32 - as it is right now so i want you to
183:35 - translate this into using the margin
183:37 - shorthand instead go ahead and do that
183:40 - right now
183:45 - okay hopefully that went well i'm going
183:48 - to actually comment these lines out now
183:50 - you can see the red circle is up in the
183:52 - left corner and then i'm going to do
183:54 - margin starting at the top should be 40
183:57 - pixels then the right side 0 pixels and
184:00 - the bottom should also have 0 pixels and
184:03 - then the left side which should have 100
184:05 - pixels and there we go we are back at
184:08 - the exact same layout so great job if
184:10 - you manage to solve this
184:12 - now there's another scenario i want to
184:14 - teach you about as well which is if we
184:16 - have top and bottom as one value and
184:20 - right and left as another value if so
184:23 - you can actually reduce it to margin and
184:26 - then only two values here you do 10px
184:29 - and auto because 10px is top and bottom
184:32 - and auto is left and right so the way to
184:34 - think about this is that the first value
184:37 - controls the
184:38 - vertical line the y-axis and the second
184:41 - value controls the horizontal line also
184:44 - known as the x-axis so with that in mind
184:47 - let me change this a little bit i'm
184:48 - going to go back to the funky way of
184:50 - writing this and i'm actually going to
184:52 - improve it a little bit because if we
184:53 - want to center the circle we shouldn't
184:55 - hard code a margin left because that'll
184:58 - only work on this screen size when we do
185:00 - like this it's not centered anymore so
185:02 - let's instead use the better technique
185:03 - of using auto on the left hand side and
185:07 - the right hand side and also just to
185:09 - make sure that no elements are allowed
185:11 - to appear directly underneath our circle
185:14 - i want to add 40 pixels to the margin
185:17 - bottom so now i'll make it a little bit
185:19 - easier for you and separate these two
185:22 - with this in mind
185:24 - can you reduce these four lines into two
185:27 - go ahead and give that a shot right now
185:34 - okay let's do this
185:36 - i'll comment out these and if you
185:38 - wondered what shortcut i used for that
185:40 - i'm using command plus k plus c but that
185:43 - is on a mac keyboard i'll comment this
185:45 - out
185:46 - then i'll do margin first we'll set the
185:48 - vertical axis it should have 40 pixels
185:51 - at the top and the bottom so that is
185:52 - 40px and then we'll set the horizontal
185:55 - axis which is auto like that and boom
185:58 - there we go we have it centered at least
186:00 - horizontally regardless of how wide the
186:02 - screen is and we have reduced four lines
186:05 - into one so great job let's move on
186:11 - okay now you're gonna take what you've
186:13 - learned about the margin shorthand and
186:15 - use that in order to reduce these two
186:18 - lines into one so you're going to
186:20 - replace the two margin properties with a
186:23 - single margin shorthand and of course
186:25 - after you've done that the card should
186:27 - still be centered as it is now
186:29 - so go ahead and give this one your best
186:32 - shot
186:37 - okay let's do this so i'm going to start
186:40 - by removing both of these
186:42 - now you can see the card is aligned on
186:44 - the left side
186:46 - so in order to fix this we'll do margin
186:48 - and then the first property we'll set
186:50 - will be the vertical line meaning margin
186:53 - top and margin bottom because we're only
186:55 - going to set two values and when we do
186:57 - that each of the value dictates two
186:59 - sides either top bottom or left right so
187:02 - we'll set zero as the first value that
187:05 - means margin top zero and margin bottom
187:07 - zero
187:08 - then for the second value which dictates
187:11 - the horizontal margin meaning left hand
187:13 - side and right hand side we'll set of
187:15 - course auto and there
187:17 - you see now the card is still centered
187:20 - and we have reduced two lines into one
187:22 - so great job solving this challenge
187:28 - last time we deployed a project we first
187:30 - added our code to netlify which then
187:32 - again took care of deploying our project
187:35 - to the web now while this works
187:37 - perfectly fine the way the pros do it is
187:39 - to go via an intermediate service and
187:42 - step called github and then let github
187:44 - take care of sending off the code to
187:46 - netlify so that it's deployed to the web
187:49 - and the reason you want this kind of
187:50 - architecture is because github allows
187:52 - you to collaborate on your code with
187:55 - other developers so now we are going to
187:57 - deploy your business card using this
188:00 - technique the first thing you need to do
188:02 - is head over to github if you're
188:03 - watching this course on scrimba you can
188:05 - just click on this slide right here but
188:07 - if you're following us on youtube just
188:09 - head over to github.com and you'll get
188:11 - to the exact same page once you're there
188:14 - i want you to click at the sign up
188:16 - button that'll open up a form where you
188:17 - have to add your email create a password
188:20 - and also choose a username once you've
188:22 - done all that click the continue button
188:24 - which then sends you to this onboarding
188:26 - screen where you can add a little bit of
188:28 - information about yourself or just click
188:30 - on the skip personalization option if
188:32 - you are impatient once you've done this
188:34 - you'll see a dashboard yours is probably
188:36 - not as filled with information as mine
188:39 - though that doesn't matter what we're
188:40 - going to do now is click on the plus
188:42 - icon in the top right corner there it
188:44 - opens up a menu where you are to choose
188:46 - new repository the repository is the
188:49 - backbone of any software project this is
188:51 - where you'll find all the project files
188:54 - and github along with the git protocol
188:56 - takes care of tracking all the changes
188:59 - that has been done to the repository
189:01 - from its birth though we're getting
189:03 - ahead of ourselves right now we are just
189:04 - going to give it a name which you type
189:06 - in here in the repository name field
189:08 - like that i'm going to call it business
189:10 - card and then i'm not going to touch any
189:12 - of the options here i'm just going to
189:13 - scroll down and click create repository
189:16 - and there we go now we have to upload
189:18 - our files we can do that in many
189:20 - different ways right now we're just
189:22 - going to do the very simplest one so
189:24 - what i want you to do is click on the
189:26 - uploading and existing file link right
189:28 - here as that'll take you to a drag and
189:30 - drop field quite similar to what we saw
189:32 - at netlify earlier here i want you to
189:35 - open up the business card folder which
189:37 - you created on your local computer in
189:39 - the previous scrim mark all of the files
189:42 - and then just drag and drop them into
189:44 - the rectangle at github once you've done
189:46 - that you'll see all of your files listed
189:49 - just scroll a little bit down and then
189:50 - we have to do something called commit
189:52 - changes which might seem a little bit
189:54 - weird and complicated but don't worry
189:56 - about that right now i'm just going to
189:58 - go with the recommended text add files
190:01 - via upload and then hit commit changes
190:04 - and boom there we go we have a
190:06 - repository on github which includes all
190:09 - the code we need for our business card
190:11 - now if you were to collaborate with
190:13 - other developers on this project they
190:15 - would push their code up to this
190:17 - specific repository and you would also
190:19 - probably create issues for tasks you
190:21 - want to do and work with something
190:22 - called pull requests which is when you
190:24 - want to merge someone's changes into the
190:27 - code base and there's also a ton of
190:28 - other things you can do here but we're
190:30 - not going to worry about any of that
190:32 - right now because the only thing we want
190:33 - to use this repository for right now is
190:36 - as an intermediate step before our
190:38 - deployment so let's head over to netlify
190:41 - and make sure you're logged in so you
190:42 - see the previous project we deployed and
190:45 - right besides it you can see this button
190:47 - called add new site click on it and
190:49 - choose import an existing project here
190:52 - you're able to choose github click on
190:54 - that and it'll open this pop-up menu
190:56 - where github asks where you want to
190:57 - install netfly because that's what
190:59 - you're doing now we're installing
191:01 - netlify on our github profile click on
191:03 - your github username in my case peer
191:05 - borgin and here i'm just going to leave
191:07 - all the settings as they are scroll down
191:09 - and hit install and there we go now you
191:12 - can see that netlify has pulled in your
191:14 - github profile and has your repositories
191:17 - listed i have a bunch of repositories so
191:19 - i'll have to search for the business
191:21 - card i'll write business and there we
191:22 - can see it when i click on this
191:24 - repository it is imported into netlify
191:27 - and here i can adjust some settings but
191:28 - i'm not going to do any of that as usual
191:30 - just scroll down to the bottom and hit
191:32 - deploy site and there we go the
191:35 - deployment is now in progress so we'll
191:37 - have to wait a little bit and then once
191:39 - this image turns into a screenshot of
191:41 - your site it is deployed so clicking on
191:44 - this link will open up our business card
191:46 - really good job though i hope your
191:49 - business card looks a lot cooler than
191:51 - this as you were to personalize it in
191:53 - the previous scrim
191:55 - actually to prove to me that you and
191:57 - personalize this i want you to head over
191:59 - to twitter and share your deployed
192:01 - business card do as michael rocket does
192:03 - here and mention me if you want to
192:05 - alongside a link to your project and
192:07 - perhaps even a screenshot of it that
192:09 - would be super cool so go ahead and do
192:12 - that right now and then i'll see you in
192:13 - the next scrim
192:18 - woohoo you've just completed the
192:20 - business card section of this course
192:22 - that is very well done now let's have a
192:25 - little look at what you've learned
192:26 - starting out you learned about image alt
192:28 - text which is a really important html
192:31 - attribute that makes your sites more
192:32 - accessible next up you learned about
192:34 - flex child containers which means that
192:37 - we took this flexbox layout here the
192:39 - card and made sure that it only had two
192:41 - direct children so that is one container
192:44 - and two flex items so that these two
192:47 - stacked up besides each other on columns
192:49 - however we wanted the content inside of
192:51 - the second column to be on rows and for
192:54 - that reason we had to turn this flex
192:56 - child into a container in itself so that
192:59 - these three could stack on top of each
193:00 - other you also learned about inheritance
193:03 - for example here with the card class
193:05 - where we set the text line to center and
193:07 - that propagated all the way down from
193:10 - the card via the div and down to its
193:13 - grandchildren the text elements that
193:15 - contain the data for the business card
193:17 - and also you learned about shorthands
193:19 - more specifically the margin and padding
193:21 - shorthands where we instead of
193:23 - specifying each margin like the top left
193:25 - right and bottom we just use the
193:27 - shorthand zero auto to set zero on the
193:30 - top and bottom and then auto on the left
193:32 - and right
193:33 - and then you learned about web save
193:35 - fonts which are these fonts that you can
193:36 - use pretty much without worrying about
193:38 - whether or not they are installed on the
193:40 - user's computer because in the overall
193:42 - majority of cases they actually are so
193:44 - they are safe to use and we took a look
193:46 - at color palettes which is critical to
193:48 - know about as colors often make or break
193:50 - a design and then finally you learned
193:52 - about github and how to create a
193:54 - repository for github and use that as an
193:56 - intermediate step when getting your code
193:58 - from your local computer and up to the
194:00 - world wide web via a netlife deployment
194:03 - so this was a lot of things to learn i
194:06 - can totally understand if you are a
194:07 - little bit overwhelmed now take a little
194:09 - break and let these concepts mature in
194:11 - your mind and then i will see you back
194:13 - here when you are ready to move on with
194:15 - the course
194:19 - welcome to the section where you are
194:20 - going to build a space exploration site
194:23 - here is the example you're gonna build
194:25 - as you can see it has this super neat
194:27 - background image that animates and it
194:29 - really breathes life into the site we're
194:32 - also using google fonts to pull in this
194:34 - custom space-ish font right here and
194:37 - we're doing a lot of interesting things
194:39 - with some subtle text shadows this
194:41 - underline and more
194:43 - so there will be plenty of new things to
194:44 - learn in addition to reinforcing html
194:47 - and css concepts you've previously
194:49 - learned
194:50 - so let's launch into this section
194:56 - okay let's get started building our
194:58 - space expiration site as you can see
195:00 - i've set up a basic html structure for
195:03 - you here it is very simple as the body
195:05 - simply contains an h1 title and a button
195:07 - as for the css there is no as we are
195:10 - going to add that now so the first thing
195:12 - we're going to do is fix the background
195:14 - here because we don't want the white
195:16 - background we want to have an image of
195:17 - the universe in the background later
195:19 - down the line we're going to change that
195:21 - to an animated image so that it looks
195:23 - like a video playing in the background
195:24 - which is even cooler but as for now
195:27 - we're just going to do a standard
195:28 - background image as we're going to work
195:30 - on this for a while and i don't want to
195:32 - have an animated image looping in the
195:33 - background as we work as i think that's
195:35 - a little bit annoying so let's start out
195:37 - with just a static background image and
195:40 - just so you know background images is
195:42 - something different than how you've used
195:44 - images up until now where you've done
195:46 - img src some kind of jpeg like that
195:50 - instead background images are not in the
195:52 - html they are added in the css file and
195:56 - i'll talk about that let's just find a
195:58 - cool background image and then deal with
196:00 - how to implement it into our app and the
196:02 - service i prefer to use for finding cool
196:04 - images for your web design is unsplash
196:07 - because the quality of images here are
196:09 - really good so they will take your web
196:12 - design to new heights and you can use
196:15 - them freely however you want so if i
196:17 - search here for universe
196:19 - we'll get a ton of nice images let's
196:21 - scroll a bit down as you can see there's
196:23 - plenty of good candidates here but i
196:25 - think this one is particularly nice so
196:27 - i'm going to click in on it it is
196:29 - created by guillermo ferla and you can
196:31 - see it's really popular have over 12
196:33 - million views already now if we want to
196:35 - download this you can click on the icon
196:37 - up here and download it range of
196:39 - different sizes
196:40 - and i've actually done that and placed
196:42 - it here in the images folder so here you
196:44 - can see universe.jpg
196:46 - so let's see how we can add this to our
196:49 - app what i'm going to do is target the
196:51 - body because we want the image to span
196:53 - across the entirety of our page so we
196:55 - need to add the background image to the
196:57 - body we'll use the background image
197:00 - property here we'll utilize something
197:02 - called a css function don't worry about
197:05 - why it's called the css function
197:07 - just remember that the way to do it is
197:09 - by writing url
197:10 - open parentheses and then inside of the
197:12 - parenthesis you refer to the image
197:15 - source just as you do in the image with
197:18 - the img tag it is using quotes
197:21 - so inside of the quotes we'll write the
197:22 - path to this exact image and the way we
197:25 - do that is first by navigating to the
197:27 - images folder so images then slash going
197:31 - into the folder choosing the universe
197:34 - up jpeg and boom there we go suddenly
197:37 - our background changed however there's a
197:39 - couple of problems here our h1 is now
197:42 - almost invisible since by default the
197:44 - text is black and the background is very
197:46 - black as well so i'm going to change the
197:48 - color to white like that
197:52 - much better
197:53 - also this image is thousands of pixels
197:56 - wide whereas our browser is not that
197:59 - wide so notice that if we make it super
198:01 - wide we still only see edge of the
198:03 - galaxy more or less the center of the
198:05 - image so what we need to do is shrink
198:08 - our browser down to like a couple of
198:10 - hundred pixels wide which is what we
198:12 - want
198:12 - and then make our background image
198:15 - shrink so that it's squeezed into the
198:17 - width of this browser
198:19 - the way we do that is background size
198:23 - and value cover boom there we go now the
198:28 - width of the background image is exactly
198:30 - as the width of its container
198:33 - which again is exactly as wide as the
198:36 - browser itself meaning that the browser
198:38 - and the background image has the exact
198:40 - same width and it looks pretty good i'm
198:42 - not going to give you a challenge on how
198:44 - to do this right now as you'll get
198:46 - plenty of practice using background
198:48 - images later in this course so with that
198:51 - let's just move on to the next scrim
198:56 - okay in this two part challenge you're
198:58 - going to improve the design of our app
199:01 - first i want you to center the text and
199:03 - button and then style the button
199:05 - according to the provided design and
199:08 - that is found here in the slide as you
199:10 - can see the button is slightly different
199:12 - from how it is right now not too
199:15 - different but certainly it has some css
199:17 - properties applied and i'm not going to
199:19 - tell you which because this is a good
199:21 - way for you to train your design eye
199:23 - when you design the button i want you to
199:25 - use a class in order to select it so not
199:28 - just using an element selector like we
199:30 - do here
199:31 - so go ahead and give this a shot and
199:32 - then i will show you the solution as
199:34 - well when you return back to me
199:42 - okay let's do this
199:44 - first we got to center the text on the
199:46 - button and here you can use a range of
199:48 - different options either using margins
199:50 - or flexbox or text align
199:53 - you've learned plenty of ways to center
199:55 - elements now
199:56 - i'm going to choose the easiest one
199:58 - which is to apply a text align center in
200:01 - the body element because as you know
200:04 - this centers not only the h1 but also
200:06 - buttons
200:08 - okay with that out of the way let's move
200:10 - on to the button
200:11 - first i want to give it a class and i
200:13 - think btn is a good class name so let's
200:16 - add it to the html as well like that and
200:19 - run the code so we have it applied in
200:21 - the dom
200:22 - now let's have a look at this design
200:24 - the first thing that is apparent to me
200:26 - is that this button has more space
200:29 - around the text as you can see here it's
200:31 - a bit more crammed so that is the
200:33 - padding property
200:35 - let's write 10 pixels just on all four
200:38 - sides of the padding
200:40 - having a look at this button right now
200:42 - you can see that this one is a bit more
200:46 - rectangular whereas this one is a bit
200:48 - more squared now because in this design
200:51 - here
200:52 - there's more space on the left and right
200:54 - hand side then the top and bottom
200:56 - and if you remember the shorthand we can
200:58 - do this by for example starting with 5
201:01 - pixels on the top and bottom
201:03 - and 10 pixels on the left and right
201:06 - and that looks much better
201:08 - maybe it's a little bit higher so let's
201:11 - do 6 and
201:13 - 12. that looks pretty good to me
201:16 - now the next thing i want to change is
201:18 - the background color
201:20 - it's not totally apparent but actually
201:22 - this one has a white background color
201:25 - whereas this one has the default button
201:27 - background color which is a bit grayer
201:29 - it's not that easy to see because of the
201:31 - background here it looks pretty white
201:33 - compared to the black background but it
201:35 - is actually not entirely white something
201:37 - you'd know if you worked with buttons in
201:39 - html for a while as they always have a
201:42 - default grayish background color
201:45 - background
201:46 - white like that okay
201:49 - now it suddenly became apparent that it
201:51 - also has a border in this default
201:53 - styling whereas that's not the case in
201:55 - our provided design
201:57 - so let's do border
201:59 - we can do none like that
202:01 - and with that it looks like we have
202:03 - completed our design as these two look
202:06 - identical as far as i can see so really
202:09 - good job let's move on
202:14 - okay now you're gonna get a new
202:16 - superpower in your tool belt called
202:19 - google fonts and that is a service that
202:21 - gives you access to over a thousand
202:23 - different high quality fonts that you
202:25 - can use in your projects
202:27 - and the reason you need to learn about
202:29 - this now is because the font we have
202:31 - here isn't good enough in my opinion it
202:34 - is a little bit boring for a space
202:36 - project what we want instead is
202:38 - something like this which looks a lot
202:40 - more sci-fi-ish however this font isn't
202:43 - one of the so-called web save fonts you
202:45 - learned about earlier which is already
202:47 - installed in most operating systems this
202:49 - is a very custom font so we have to use
202:52 - google fonts in order to bring it into
202:54 - our project
202:55 - and here you can see the google fonts
202:57 - interface it's located at
202:58 - font.google.com
203:00 - and if we scroll a bit down you can see
203:02 - it contains a range of very different
203:04 - fonts
203:05 - now it has a search feature up in the
203:07 - top left corner but it's actually not
203:10 - that good to be honest it's better to
203:12 - just use regular google search when
203:14 - searching for google fonts so let's do
203:16 - that instead the way i found the font
203:18 - we're going to use now is just by
203:20 - googling sci-fi
203:21 - and then google font and then google
203:23 - suggested this orbitron font so if we
203:26 - click into it you can see here it is if
203:28 - we scroll a bit down you can see we have
203:30 - to choose specifically which styles we
203:33 - want so i'm going to choose this 400
203:36 - regular style by clicking on select this
203:38 - style like that and you can see the
203:41 - panel on the right hand side and it is
203:43 - clear that we have chosen the orbitron
203:45 - font and the regular 400 font weight
203:48 - also let's click on this extra bold in
203:51 - case we want to build some text on our
203:52 - site and there we have that one as well
203:55 - now if we want to use this on the web we
203:57 - can embed it by simply copying a piece
204:00 - of code into the head of our html and
204:02 - that is the code you want to copy
204:05 - and then paste it in
204:07 - exactly here next up we also have to
204:09 - specify it in our css and that's done by
204:12 - pasting this line
204:14 - into our css for example in the body tag
204:18 - i'm not going to do this for you though
204:20 - scrimba is all about you doing things on
204:22 - your own getting your hands on the
204:24 - keyboard so now i want you to head over
204:26 - to google fonts fetch the orbitron font
204:29 - in these two styles
204:31 - and then do whatever you need to do in
204:32 - order to make the orbitron font render
204:34 - properly on our site i'm going to leave
204:36 - you here with this screenshot because
204:39 - make sure to compare
204:41 - this design with what you get in the
204:44 - mini browser because there might be
204:46 - something you need to do down in the btn
204:48 - selector and hopefully you're able to
204:50 - spot that if not no worries because i'll
204:52 - be here showing you the solution when
204:54 - you return back to me
204:55 - good luck
205:03 - okay let's do this
205:05 - so first we're to take this snippet of
205:08 - code right here and then paste it into
205:10 - our html like that we'll then need to
205:13 - run the code so that it is imported into
205:15 - our project
205:17 - and then next up it is the styles which
205:19 - we're going to set here let's copy that
205:21 - line of code and then simply paste it in
205:25 - right here and boom drawing the
205:27 - exploration now looks like our project
205:30 - right here
205:31 - however this one also has the orbitron
205:34 - font applied to the button
205:36 - but we don't have that we still use that
205:38 - boring old font that we had previously
205:40 - why is that well that's actually because
205:42 - buttons
205:43 - don't inherit font families
205:46 - so here the h1 has inherited the font
205:49 - property from body but the button has
205:51 - not so what we need to do here is
205:54 - specifically tell the button to have
205:57 - this font family and we can do that in
205:59 - two ways one way is through using a css
206:02 - value you haven't learned yet and that
206:04 - is
206:06 - the inherit keyword
206:08 - as you can see now it does inherit from
206:10 - the body but only because we've
206:12 - specifically told the button to do
206:13 - exactly that what i'm assuming you did
206:15 - instead which works perfectly fine as
206:17 - well is simply to paste in the font
206:19 - family orbitron on the btn class as you
206:22 - can see that also works well so
206:24 - hopefully you were able to spot this if
206:27 - not nowhere is it was just a little
206:29 - gotcha i left here let's move on to the
206:31 - next scrim
206:35 - before we move on from the subject of
206:37 - fonts there's one more technique i want
206:39 - to teach you because in some cases
206:41 - google fonts might actually not be
206:43 - enough and that's typically the case if
206:45 - you want very specific fonts for example
206:48 - let's say that you are building a
206:49 - godfather website in honor of the
206:51 - classic film well in that case you'd
206:54 - probably want to get a hold of the real
206:56 - godfather font though google fonts
206:59 - doesn't host that one because it is
207:00 - simply too specific for them to care
207:03 - about
207:03 - so you'd most likely have to find this
207:05 - font somewhere on the world wide web and
207:08 - there are great services for this for
207:09 - example
207:11 - 1001font.com there if you search for
207:14 - godfather they actually have it so you
207:16 - can click into it scroll a little bit
207:18 - down and click download so what you then
207:20 - did is kind of downloaded the recipe for
207:22 - the font and if you open up the folder
207:24 - you got you'll see a ttf file that's a
207:27 - file format for fonts what you then can
207:30 - do is simply drag and drop that file
207:33 - into your file system like i have done
207:35 - right here you can see i have the
207:37 - corleone.ttf file now what i can do is
207:40 - use the add font face rule in css so
207:43 - simply writing an at and then font dash
207:45 - face and then open up the curly brackets
207:48 - and write two properties the source
207:50 - which should use the url technique
207:52 - pointing to the ttf file which i'm doing
207:55 - right here and also i need to tell css
207:57 - what name i want to give this font in my
207:59 - style sheets and i'm just going to
208:01 - choose corleona for now but i could have
208:03 - chosen whatever name i wanted now i'm
208:05 - able to target the h1 and use this font
208:08 - family so i'll do font family
208:12 - or leona and there you can see i have
208:14 - the godfather font so i'm off to a great
208:16 - start on my tribute page so now what i
208:19 - think you should do is actually try and
208:21 - do this yourself find a random font
208:22 - online download it so you get a hold of
208:25 - the ttf file drag and drop that ttf file
208:28 - into the file system here on scrimba and
208:30 - use the add font face property to make
208:32 - that font available in your stylesheets
208:35 - once you've done that i will see you in
208:37 - the next scrim
208:41 - now you are going to learn about the
208:43 - span tag because in the next scrim you
208:45 - are going to create an underline under
208:47 - the exploration word and in order to
208:49 - achieve that you need the span tag so
208:52 - let's take a little step back from our
208:54 - space exploration site and learn all
208:56 - about this awesome tag
208:58 - the example we're going to use in order
209:00 - to learn the span tag is of banner ads
209:03 - you've probably seen these before and
209:04 - you've browsed the web for example on
209:06 - new sites
209:07 - and many of these are actually so-called
209:09 - html5 ads where they're built using html
209:13 - and css and it's actually a little bit
209:15 - sad how many clever developers in this
209:18 - world who are spending all of their time
209:20 - in their best years and getting more
209:22 - people to click on these ads through
209:24 - making them more invasive more
209:26 - eye-catching and more targeted but
209:29 - that's the name of the game so we just
209:30 - have to accept it and you are now going
209:32 - to do exactly that you are going to make
209:35 - this ad more eye-catching so that
209:37 - hopefully more people click on it and
209:39 - visit our scammy casino
209:41 - so how do we do this well looking at the
209:44 - html you can see the div wrapper has a
209:46 - class of add which sets the background
209:49 - color border and the text alignment
209:51 - inside of this green rectangle and there
209:53 - are two elements inside of the ad that
209:55 - is the h1 and the h3 and it says click
209:58 - here so what we want to do is make this
210:01 - hair word pop out more so how do we do
210:04 - that we can't target the h3 itself
210:07 - because that'll style the entire
210:09 - sentence we only want to style this word
210:11 - and this is where spans come in here we
210:14 - can write span like that
210:16 - open the tag before the word and close
210:18 - it directly afterward if we now run this
210:20 - code seemingly nothing has happened
210:22 - because spans are invisible unless you
210:25 - give them styling
210:26 - so they're kind of like the div as divs
210:29 - neither provide any styling unless you
210:31 - give it to it specifically although the
210:33 - difference is that spans are in line
210:35 - whereas divs are block-based
210:38 - so to demonstrate that if we change this
210:40 - to div what would happen to run the code
210:43 - is that it would break the hair word
210:45 - onto a new line because divs are display
210:48 - block they take up all the available
210:50 - space in the width
210:51 - where spans do not do that only take up
210:54 - the space they need in order to make
210:56 - room for this content
210:58 - what we now can do is give this span a
211:01 - class
211:02 - i'm going to call it cta that's short
211:04 - for call to action because that's
211:06 - normally what these kinds of elements
211:08 - are called and in the css we'll do cta
211:11 - let's just see that it works
211:14 - by doing color red yes there we can see
211:17 - we have now only targeted the hear word
211:20 - this doesn't look particularly good
211:21 - though so let's instead do something
211:23 - that makes it look a bit more like a
211:25 - button
211:26 - for that we need a border in my opinion
211:28 - for example two pixels and we want it to
211:30 - be solid and here let's steal the color
211:33 - from the border around the ad so that we
211:36 - reuse it a little bit i think that can
211:38 - look nice yeah okay here you can see
211:40 - that it's added a border around the word
211:43 - it is very crammed on the left and right
211:45 - hand side so let's try to add some
211:47 - padding let's just do five pixels or
211:49 - something
211:50 - actually i think we can do five pixels
211:52 - on the top and 10 pixels on the left and
211:55 - right yeah that looks much better and
211:57 - then to make it pop out even more so
211:59 - that it doesn't blend into the overall
212:01 - background we have on the ad itself
212:04 - so i'm going to do background well now i
212:06 - happen to have a nice brown color here
212:09 - which i think looks decent with the
212:11 - other colors here
212:12 - so now it is a lot more easier to see
212:15 - that you are going to click here on this
212:17 - thing that looks like a button as it
212:19 - stands out more and hopefully we have
212:21 - increased the click-through rate with
212:23 - 0.02
212:25 - and thus made our boss really happy
212:28 - so great job
212:29 - now that you've learned this let's
212:31 - return back to the space exploration
212:33 - site and put your new skills to the test
212:39 - okay now you're going to create this
212:41 - neat little underline under the
212:43 - exploration word
212:45 - and i want you to do that using a span
212:48 - and a class as for the specific design
212:51 - of the underline and what kind of css
212:53 - property you are to use that is
212:55 - something you'll have to figure out on
212:56 - your own
212:57 - so go ahead and give this a shot good
212:59 - luck and i'll see you on the other side
213:05 - okay hopefully that went well
213:07 - let's do it i'm going to start with
213:09 - adding this spam to the html
213:12 - it should wrap the exploration word so
213:15 - spam like that
213:17 - and then i'm going to give it a class
213:19 - i'm going to call this class underline
213:21 - because it'll only have one job and that
213:23 - is to give the expiration word the
213:25 - underline so this class is something
213:26 - we've talked about earlier it's a
213:28 - utility class it only has one job and
213:30 - that is setting a single css property so
213:33 - if we run the code now nothing has
213:35 - seemingly happened but we do have this
213:37 - in our dom meaning we can select it in
213:40 - the css we'll do dot underline
213:43 - like that let's just try and set the
213:46 - color to red to see that it works and
213:47 - yes it does indeed work
213:50 - but that's not the effect we want we
213:52 - want to set the underline and what is
213:55 - this underline well it's actually just a
213:58 - border bottom we do border
214:00 - bottom like that
214:02 - two pixels
214:03 - solid
214:05 - white you can see yes we indeed get a
214:08 - border under it
214:10 - however this border looks a little bit
214:12 - thicker so i don't think two pixels is
214:14 - the correct thickness i think we want to
214:16 - have something like four
214:18 - yes
214:19 - that looks pretty good to me
214:21 - so we have solved this challenge and we
214:24 - are ready to move on
214:28 - okay now we are going to add this spacex
214:31 - logo at the top here and while you're
214:34 - adding it you're going to learn a whole
214:35 - new concept in html and css
214:38 - namely a close custom of the class
214:41 - attribute which is called the
214:43 - id attribute and the way to use it is
214:46 - simply by writing id instead of class
214:49 - but now you're probably wondering why
214:51 - would we use this id if we now try to
214:54 - rerun this code you can see that our
214:56 - underline is gone
214:58 - and that is because when you are using
215:00 - an id like this
215:02 - you have to refer to it in the css not
215:05 - by using a dot but instead by using a
215:07 - hashtag there you can see now our border
215:10 - bottom is again applied to our example
215:13 - so now you're probably wondering well
215:14 - why would we want to use this it just
215:16 - further complicates things by having
215:18 - both ids and classes to worry about and
215:21 - the thing is they serve two different
215:23 - scenarios you should use an id if you
215:26 - know that your element is unique and
215:28 - you'll only use it once so id of
215:31 - underline should only be applied once in
215:34 - this entire document whereas class is
215:37 - something you can reuse again and again
215:39 - it's meant for reusage so if you for
215:41 - example wanted a button here
215:43 - that also said for example f a cues
215:47 - then a class is what you use in order to
215:49 - make sure that this button has the same
215:51 - styling as this button but if you did
215:53 - that with ids
215:55 - and turned the btn here into an id this
215:58 - would be invalid html
216:01 - browsers are very forgiving so it
216:02 - probably would work technically the
216:05 - styling would be applied but you just
216:07 - shouldn't do it
216:08 - now as for this idea of underline here i
216:11 - actually don't think it makes sense to
216:12 - use an id
216:14 - because this underline here could
216:16 - perfectly fine be a part of our design
216:18 - system and also be applied at multiple
216:20 - other sections and paragraphs throughout
216:22 - our entire page as we build out this
216:24 - space exploration site so i want to have
216:27 - the freedom to be able to reuse this
216:29 - later as well even though i'm only using
216:31 - it once now so i'm going to turn this
216:33 - into a class again
216:35 - rerun the example now it's not applied
216:38 - and then go from the id selector to the
216:41 - class selector in css by replacing the
216:43 - hashtag with a dot and there it is
216:44 - applied
216:46 - so that was a long intro the reason for
216:48 - that was that i want you to render this
216:50 - spacex logo you can see i've added the
216:53 - spacex.png image file up here
216:56 - and then i want to give it id
216:59 - because this spacex logo at the top here
217:01 - is most likely unique we probably don't
217:03 - want to have multiple centered spacex
217:05 - logos at this size so this is kind of
217:08 - our main logo and you can give it that
217:10 - id main logo
217:13 - then in the css you need to select the
217:15 - logo using whatever id you have given it
217:18 - and then as you'll see you'll have to
217:20 - reduce its size that's why you need this
217:22 - css rule right here because it is far
217:24 - too big this image finally i'm going to
217:26 - remove this faq button so that we're
217:29 - back to our original design now it's
217:31 - your turn take over and try to solve
217:33 - this challenge
217:40 - okay hopefully that went well let's do
217:42 - it we're going to render it using an imd
217:45 - tag
217:47 - and the source will be
217:49 - first images and then slash
217:52 - spacex dot png
217:55 - like that if we run this you can see oh
217:57 - wow
217:59 - that is not exactly what we were looking
218:01 - for it's far too big this image so we
218:04 - have to reduce its size and to target it
218:07 - we're going to use an id and i'm going
218:09 - to call this main logo like that
218:12 - now if we head to the style.css
218:15 - we'll do hashtag main dash logo and here
218:19 - we have to reduce its width so let's try
218:22 - with for example
218:25 - perhaps this is 200 pixels i don't know
218:27 - let's try
218:29 - 200 px like that oh
218:31 - that was a bit too large in my opinion
218:35 - so let's reduce it further
218:37 - to 100 pixels and yes that is
218:41 - much more like our design in my opinion
218:44 - looking pretty good so with that we have
218:47 - solved the challenge great job
218:53 - now we're going to breathe some more
218:54 - life into our example here because
218:57 - it works fine with this static jpeg as
219:00 - the background image but wouldn't it be
219:02 - a lot cooler if it was animated so you
219:04 - could see the stars flying around and in
219:07 - our images folder we now just happen to
219:09 - have a file called galaxy dot web p
219:14 - what's that let's just try to replace
219:16 - this universe jpeg here with the galaxy
219:19 - webp file
219:22 - so i'll do galaxy
219:24 - dot
219:25 - web p and boom
219:27 - the galaxy webp is an animated image in
219:30 - which you see a bunch of stars around
219:32 - the galaxy and to me this looks a lot
219:35 - cooler than what we just had
219:38 - now you might wonder what this web p
219:40 - here is and that is just an image format
219:42 - pretty similar to so-called gifs gif and
219:46 - gif is what you recognize from all over
219:48 - the web in animated images like this one
219:50 - right here which you've probably seen
219:52 - before so webp is used exactly as gifs
219:55 - are on the web however it has a better
219:57 - compression so it's more compact and
219:59 - doesn't use as much data as gifs use
220:02 - when they're sent from a server to a
220:04 - client
220:05 - so we want to use webp where we can
220:08 - and now you might wonder well where did
220:10 - you find this galaxy.webp image that is
220:13 - on a site called giphy giphy that is a
220:17 - search engine for gifs so i just
220:19 - navigated to it searched for galaxy
220:22 - scrolled a little bit down and found
220:24 - this neat looking galaxy gif here
220:26 - created by the european space agency now
220:29 - this is a slideshow so you can't see
220:31 - that this gif is now being animated but
220:34 - it actually is because i just saved this
220:36 - image to my local computer and then
220:39 - uploaded it to the images folder right
220:41 - here now if you want you can also click
220:43 - on the share button here and click copy
220:45 - gift link and then you can simply paste
220:48 - that link into this url and then that
220:51 - will give as you see the exact same
220:53 - result but i prefer to rather use the
220:55 - version which we've imported into our
220:57 - project right here in case the griffey
221:00 - file might change at some point or
221:01 - something however for experimentation
221:03 - purposes i think you should head over to
221:06 - griffe search for a few images and just
221:09 - paste them in right here and see how
221:11 - that affects our example just so you've
221:12 - got familiar with using giphy and
221:14 - pasting external urls into the
221:16 - background image property in css
221:19 - so go ahead and do that and then i will
221:21 - see you in the next scrim
221:27 - one thing i like to do when working with
221:29 - images as backgrounds is to fetch colors
221:32 - from the image and use it in the design
221:34 - because that can often look pretty cool
221:36 - so let me show you exactly how to do
221:38 - that
221:39 - we can use coolers these servers you're
221:41 - already familiar with because if you
221:43 - click on the more option in the nav bar
221:45 - you can choose pick palette from photo
221:48 - that'll take you to this image picker
221:50 - where you can choose an image by
221:51 - clicking on the browse an image and
221:53 - either upload the image or paste a url
221:55 - to it
221:56 - once you've done that you're taken to
221:58 - this nice tool
222:00 - where you can either drag and drop this
222:02 - picker around on the image until you
222:04 - find the color you like or you can use
222:06 - this range input here as that'll
222:09 - automatically try to find interesting
222:10 - colors in the image for you and then it
222:13 - generates a palette as you can see right
222:14 - here
222:15 - now let's say we like this palette then
222:17 - we'll click export and save palette and
222:20 - we have it in our dashboard
222:22 - now it only has three colors but that
222:24 - doesn't matter i'm only going to use one
222:26 - of these that is the blue one because i
222:28 - think it would be cool to use this blue
222:30 - color
222:31 - as the text color on our site so i want
222:34 - the h1 and the button text to have that
222:36 - bluish color and the way i'm going to do
222:38 - that is change the color of the body
222:40 - here because that is where the h1 gets
222:42 - its color from it is the only element
222:45 - inheriting from the body at this point
222:47 - so i'm going to do like that this is the
222:49 - hexadecimal value i got from coolers and
222:52 - as you can see i think it looks pretty
222:54 - cool
222:54 - and also let's keep the underline white
222:57 - because i think it makes sense to have
222:58 - that in a different color now moving on
223:00 - to the button we'll do
223:02 - color
223:04 - and paste it in again and there we go
223:06 - now here i think actually this applied
223:09 - text could be a bit clearer because the
223:11 - contrast with the background is just
223:13 - okay at this point
223:14 - because with this blue color i think the
223:17 - thin letters became a bit too thin
223:20 - now a final thing i want to do with this
223:22 - apply text here is make it a little bit
223:25 - bolder make it stand out a bit more and
223:27 - luckily we imported
223:30 - not only the regular font weight with
223:32 - the orbitron font family but also the
223:34 - 800 font weight to the extra bolt
223:38 - so what we can do now is actually
223:41 - do
223:42 - font weight
223:45 - and then press bold and there you can
223:46 - see
223:47 - it actually bolded the text
223:49 - or we could use the value directly
223:52 - which is 800 that'll give us the exact
223:54 - same result as the font weight property
223:56 - can both take numerical values and named
223:59 - values so the numerical values range
224:01 - from 100 200 300 400 and so forth up
224:04 - until 900 and the named values are for
224:07 - example normal bold and so on so
224:10 - we imported 800 so let's just write 800
224:12 - here with that i think our example looks
224:15 - pretty good so let's move on
224:20 - going to space is definitely a risky
224:23 - affair so i want to add this terms and
224:25 - conditions apply text underneath the
224:28 - main section of our site however i don't
224:31 - want to add this this is scrimba so
224:32 - you're going to do it of course but i'm
224:34 - going to give you a set of detailed
224:36 - instructions so that you know how to go
224:38 - about doing this
224:39 - so you're going to start with wrapping
224:41 - the hero section in a div and the hero
224:44 - section is the one you can see on top
224:46 - here it's very often called a hero
224:48 - section in web design and it's probably
224:51 - called that because kind of serves as
224:52 - the user's first glimpse of the company
224:55 - and the offering and has this kind of
224:57 - prominent place towards the top and it
224:59 - usually extends full width so it is kind
225:01 - of the hero of the website so in our
225:03 - case it is these three elements right
225:05 - here the logo title and the call to
225:08 - action button and those should all be
225:10 - wrapped inside of a div and then i want
225:12 - you to move the background image that is
225:14 - the animated galaxy image
225:16 - from the body and over into this div now
225:20 - as you do that you'll notice that you'll
225:22 - have to add some padding to this hero
225:24 - div as it'll look really crammed if you
225:26 - don't add that then i want you to add
225:28 - the terms and conditions apply in an h3
225:31 - below the hero section and then finally
225:33 - a problem you'll probably come across is
225:36 - that the body tag has some default
225:39 - margins which right now doesn't bother
225:41 - us but which will become apparent once
225:44 - you change this layout so go ahead and
225:46 - give this one your best shot and when
225:47 - you return back to me i'll show you how
225:49 - to do it as well
225:56 - okay let's go i'm gonna start with the
225:58 - hero section div i'm gonna add it right
226:01 - here i'll give it an idea of hero
226:03 - because it is unique so it's okay to use
226:05 - id
226:08 - then i'm going to indent this in
226:10 - and run the code and seemingly nothing
226:13 - has happened because as you remember
226:15 - from previously divs don't have any
226:16 - default styling to them so what we need
226:20 - to do is
226:21 - target the
226:23 - hero
226:24 - and then move the background properties
226:26 - from the body
226:27 - to the hero and there we go
226:30 - as you can see it doesn't look
226:31 - particularly good now as i said we will
226:34 - be forced to deal with the padding in
226:35 - the hero because you can see here this
226:38 - logo is really crammed all the way up to
226:40 - the top and there's no space underneath
226:41 - the button so let's add padding
226:44 - and on the top maybe we want 10 pixels
226:48 - like that yes on the right hand side we
226:51 - don't need anything for now but on the
226:53 - bottom we want a lot of padding maybe
226:55 - we'll do 40 pixels like that and then on
226:58 - the left hand side you don't need
226:59 - anything either
227:01 - so here we have the padding
227:03 - now let's add the terms and conditions
227:05 - apply h3 below the hero
227:08 - that's just
227:09 - like this adding an h3 terms and
227:12 - conditions apply like that
227:16 - from the code and there we go it has
227:19 - already the color we want since we have
227:21 - set the blue color as the text color on
227:24 - the body so it inherits the color
227:26 - property from the body however as you
227:28 - can see are still not quite done because
227:30 - something has happened with the margins
227:31 - on the site or at least the margins of
227:34 - the body has become more apparent
227:35 - because now the entire body isn't filled
227:38 - with the background image anymore so
227:40 - we're suddenly noticing that the body
227:42 - has some default margins on all sides we
227:45 - don't want that
227:47 - so we're gonna neutralize that by doing
227:49 - margin zero and boom there we go
227:52 - we have completed the challenge now
227:54 - there is one more thing which is a
227:56 - little bit problematic which is that if
227:58 - you watch this on a mobile for example
228:00 - so that the exploration word is located
228:02 - directly over the galaxy the readability
228:05 - syncs quite a bit because the text color
228:07 - blends in with the background and we
228:09 - will fix that is by using a shadow
228:11 - technique on this text so now you're
228:14 - going to learn exactly that
228:19 - text shadow is a really nice tool to
228:21 - have in your web design toolkit as it
228:23 - can make your designs much better
228:26 - so here i've created a very simple
228:28 - imitation of the netflix logo with the
228:31 - red background and white text
228:34 - as you can see i've pulled in a font
228:36 - which kind of looks like the netflix
228:37 - font it's not really the same but it's
228:39 - close enough
228:40 - and
228:41 - it is an h1 and i've set the font size
228:43 - to 80 pixels now what if i want to have
228:46 - a black shadow like this
228:48 - as that makes it look even more like the
228:50 - classical netflix logo i can achieve
228:52 - that by on the h1 which is the element
228:56 - that includes the netflix text as you
228:58 - can see here i can add a property called
229:01 - text dash
229:03 - shadow which must contain three values
229:06 - so just bear with me here as i'll write
229:08 - all three of them out and then i'll
229:09 - explain it
229:10 - i'll do zero pixels zero pixels black
229:14 - and seemingly nothing happened
229:17 - that's because i first wanted to show
229:18 - you the third value here black that's
229:20 - pretty simple that's just the color of
229:23 - the shadow and as you can see here it is
229:25 - black
229:26 - the two other values dictate the offset
229:29 - of the shadow on the horizontal line and
229:31 - the vertical line so if i add for
229:34 - example 5px here you can see that now
229:36 - the shadow appeared it's as if it's
229:39 - sticking out to the right of the letters
229:42 - 5 pixels if i do the opposite minus 5
229:45 - pixels it'll stick out 5 pixels on the
229:47 - left hand side
229:49 - as you can see
229:50 - there's no shadow below and above
229:52 - because that's dictated by the second
229:54 - value
229:55 - so if i turn this back to five
229:57 - and on the
229:58 - vertical one do for example
230:00 - 30 then you can see that the shadow got
230:03 - pushed far too much downwards
230:05 - if i do minus 30 it's pushed upwards
230:08 - if i do 5 pixels it's pushed only 5
230:11 - pixels downwards which looks pretty good
230:14 - actually it is indeed the design we were
230:16 - looking for so summarize here the first
230:19 - value is how many pixels you want to
230:21 - push the shadow to the right
230:24 - the second value is how many pixels you
230:26 - want to push the shadow downwards and
230:28 - the third is the color so what i want
230:31 - you to do now
230:32 - is try to make the shadow look like this
230:36 - as you can see now it's on the left hand
230:38 - side and below like as if the sun is
230:41 - shining from the top right corner
230:43 - so take a guess at how you need to
230:46 - change this line 11 here in order to get
230:49 - that effect go ahead and do that right
230:51 - now
230:56 - okay hopefully that went well
230:58 - what you need to do
231:00 - is basically
231:01 - put a minus in front of the first value
231:04 - like that
231:05 - that shifted the shadow from being on
231:07 - the right hand side of the letters to
231:09 - the left hand side
231:10 - okay changing it back again
231:13 - now i want to teach you
231:14 - body fourth value you can add to the
231:17 - text shadow property and that is the
231:19 - third pixel value so here you can also
231:22 - write for example
231:23 - 5
231:24 - px and what happened now
231:27 - if we compare what we have here right
231:28 - now with how it was before we added that
231:30 - value you can see that previously the
231:32 - edges of the shadow were sharp there's
231:35 - no blur
231:36 - whereas here they're kind of fading over
231:39 - into the red color behind it
231:41 - and this is called blur if we reduce
231:43 - this one to zero again the edge is sharp
231:46 - again now if we do something crazy like
231:48 - 50 you can see that it is so blurry that
231:51 - it just looks a little bit like
231:53 - background that's a little bit dirty so
231:55 - let's get it back to zero again here
231:58 - what i want you to do now is
232:00 - try to achieve this shadow go ahead and
232:03 - give that a shot right now
232:08 - okay hopefully that went well let's have
232:10 - a look you can see the shadow is above
232:13 - and to the right of the letters let's
232:15 - fix that first
232:17 - to have it on the right of the letters
232:18 - we need plus value on the first one we
232:20 - want to push it to the right and we want
232:22 - to have it above so we don't want to
232:24 - push it downwards as we're doing with
232:26 - this value so we want to minus it
232:27 - pushing it upwards
232:29 - like that
232:31 - and now the only difference is that this
232:33 - is a lot more blurry whereas this is
232:35 - completely sharp so let's try five
232:38 - pixels here as well and boom there we go
232:41 - that looks pretty correct to me
232:44 - so great job doing this challenge before
232:47 - we move on i have just a final trick i
232:49 - want to show you which is a little bit
232:51 - of a hack but super useful because let's
232:53 - say that for example the background here
232:55 - was
232:57 - white smoke instead of the red color and
232:59 - white smoke is a very white color with
233:00 - just a little bit of gray in it as you
233:03 - can see it looks really bad now we can
233:05 - hardly see the letters we can clearly
233:07 - see the shadows if we now
233:09 - set zero pixels on the two first values
233:13 - but keep the blur well then suddenly
233:16 - there's no shadow but there's just a
233:18 - glowing effect around the letters making
233:21 - them visible even though they are in
233:23 - almost the same color as the background
233:25 - and if we make this smaller for example
233:27 - one you can see the line around the
233:29 - letters look a little bit sharper since
233:31 - it's very little blur now if we do like
233:34 - 20 each letter gets a lot of blur around
233:37 - it and thus making them visible
233:40 - so that is a little trick to use
233:43 - normally with small values on the blur
233:45 - in order to make your text stand out a
233:48 - little bit more in the situation where
233:49 - your text color and your background
233:51 - color is a little bit too similar and
233:54 - this is very relevant if you have a
233:55 - background image in which the contrast
233:58 - between that image and the text color is
234:00 - a little bit too weak so then you'd use
234:02 - this hack to make your text stand out
234:05 - despite the similarities between your
234:07 - text color and the background image so
234:10 - that was quite a lot about text shadows
234:13 - but now you know it so we are ready to
234:14 - move on to the next scrim
234:19 - okay now we are going to fix this
234:21 - problem of the text blending too much
234:24 - into the background when it is broken
234:26 - into two lines and thus are located
234:29 - exactly over the galaxy in the
234:31 - background image here because the
234:32 - readability is a bit too low now in my
234:34 - opinion and i want you to fix that by
234:37 - adding a blurred border around the h1
234:40 - tag using the technique you just learned
234:42 - you should set the blur to 4 pixels and
234:45 - the color to black so go ahead and do
234:47 - this right now then i will show you the
234:49 - solution as well when you return back to
234:51 - me
234:57 - ok let's do this so first we need to
235:00 - select the age run and we've been really
235:03 - good at using ids and classes here so
235:06 - instead of just selecting the element
235:08 - i'm actually going to give this one an
235:09 - id of title because we probably only
235:12 - have one title on the page
235:14 - so running this
235:16 - and navigating back into the css file i
235:18 - can select the title and then i need to
235:20 - use the text shadow property we want
235:24 - both the horizontal offset and vertical
235:26 - offset to be zero pixels
235:28 - we're not actually doing creating a
235:30 - shadow here the effect we want is more
235:32 - of an outline so then without any offset
235:34 - but for pixels blur it'll blur a black
235:38 - shadowish effect around the entirety of
235:40 - all the characters so if you look at it
235:42 - now and look closely there is a
235:45 - slight blurred black border around the
235:48 - letters
235:50 - it's not that easy to see but if you now
235:52 - look at this while i comment out that
235:54 - css rule you'll see the difference so
235:57 - keep looking at the exploration word and
235:59 - i will comment it out
236:00 - now
236:02 - now i'll comment it back again
236:04 - there
236:06 - comment it out
236:08 - comment it back in again so so hopefully
236:10 - you saw that it changed here in a little
236:11 - bit
236:12 - so now the readability is a little bit
236:14 - better
236:15 - great job
236:19 - now i'm not sure if you're aware of this
236:22 - but you're the best because you've
236:24 - completed this section and that is very
236:27 - well done plenty of people who have
236:29 - started this section has never completed
236:31 - it
236:32 - you're not like them so i am really
236:34 - proud of you and let's take a quick look
236:36 - at what you've learned starting out you
236:38 - learned about background images more
236:40 - specifically you learned about the
236:42 - background image property and the url
236:44 - function and also the background size
236:46 - property in css and setting that to
236:48 - cover we also then used a webp format in
236:52 - order to get this animated image in our
236:54 - hero section which is super cool and
236:56 - really breathes life into our website
236:59 - and then you learned about google fonts
237:01 - we imported them
237:02 - up here in the head section and then you
237:04 - set the font family like this
237:06 - fonts do so much for the design of
237:08 - websites so this is an important thing
237:10 - to know as a web developer and you also
237:12 - learned a new html tag which is the spam
237:15 - tag which you can see right here it is
237:17 - what allowed us to create this underline
237:19 - under the expiration word
237:21 - which it did in combination with a
237:23 - utility class
237:24 - the underlying class which only has one
237:27 - job and that is to set the underline
237:29 - whatever element it's applied to and
237:31 - then also we learned about ids which is
237:33 - another attribute in html that you
237:35 - target in the css using a hashtag and at
237:38 - the very end we did a really cool trick
237:40 - with the text shadow property in order
237:42 - to make the readability of our title
237:44 - here a little bit better
237:46 - so you've learned some key concepts in
237:48 - this section now is the time for you to
237:51 - get up stretch maybe get a cup of coffee
237:53 - or whatever you prefer to recharge
237:56 - because be sure to do exactly that and
237:58 - then i will see you in the next section
238:03 - welcome to this section where you are
238:05 - going to build a birthday gift site and
238:08 - it is just so cool because this site is
238:10 - something you can use for whenever a
238:12 - friend or family member of yours has a
238:15 - birthday so what you do is basically add
238:17 - their information to the header here and
238:19 - then we have these gifts so for example
238:21 - this one saying here's how happy i am
238:23 - for you today and when the birthday boy
238:25 - or girl hovers over the image they will
238:27 - see a nice gif that makes them feel
238:30 - truly appreciated
238:32 - going down we have other gifts how
238:34 - people react when you enter the room
238:36 - this is meant to make them feel really
238:38 - good looking
238:39 - and here if i had to describe you with
238:41 - one word genius so you make them feel
238:44 - really smart
238:45 - next up the only person as badass as you
238:48 - is of course james bond
238:50 - and then rounding it up with a little
238:51 - toast
238:53 - so hopefully you have someone special to
238:55 - send this site to like nikki for example
238:58 - who despite being a computer-generated
239:00 - image created by an ai also is one of my
239:04 - best friends so i am looking forward to
239:07 - make nick happy on his birthday let's
239:09 - just get started with this section
239:15 - okay it's time for your first challenge
239:18 - what you're gonna do is create this
239:19 - basic design here for the header of our
239:22 - app and it's pretty far from what we got
239:24 - right now as you can see in the
239:25 - styles.css we have no styling at the
239:28 - moment so our site looks pretty dull
239:31 - you can see everything is left aligned
239:33 - and the image of nick is far too large
239:36 - plus we're lacking the appropriate fun
239:38 - taking a look at the html here it's just
239:40 - a very simple structure with an h1 an
239:42 - image tag an h2 and an h4 inside of the
239:46 - body so nothing special there
239:48 - the font that you will use is called
239:50 - happy monkey and it is a google font so
239:53 - you're going to have to head over to
239:54 - google font to fetch it and then embed
239:56 - it into our project as you can see in
239:58 - the provided design the image of nick
240:01 - should be rounded and not squared as it
240:03 - is right now so you'll have to figure
240:06 - out how to make an image round and yet
240:08 - again you'll find the answer if you
240:10 - google it finally i want you to consider
240:12 - how you should select the image so
240:15 - should you use a class selector an id
240:17 - selector or an element selector you can
240:19 - use any of them but i want you to think
240:21 - about it and try to figure out what you
240:23 - think makes most sense go ahead and do
240:25 - this right now and then i of course will
240:27 - show you the solution when you return
240:29 - back to me
240:36 - okay hopefully that went well
240:38 - let's do it together i want to start
240:40 - with centering everything and for that
240:43 - i'm going to do
240:44 - body
240:45 - and then set the
240:47 - text align to center like that
240:50 - as you can see that indeed centered our
240:52 - elements next up i want to fix the image
240:56 - it is here and i think it makes sense to
240:58 - use an id selector here because this is
241:00 - kind of the main image of our birthday
241:02 - boy and i don't think we'll duplicate it
241:04 - across the page so it is unique meaning
241:07 - we can use an id so i'll do id equals
241:10 - and then bff for best friend forever
241:13 - because nick is my bff please don't make
241:15 - fun of me because my bff is a
241:17 - computer-generated image but that is
241:19 - just how it is and then i'll do dash img
241:22 - just to make it a little bit easier to
241:23 - understand what it is based upon the id
241:25 - name
241:26 - then i'll run the code so that that is
241:28 - applied to the dom
241:30 - and heading over to the styles i'll do a
241:32 - hashtag bff.img
241:35 - like that and first i want to fix the
241:37 - width of it it's far too wide this looks
241:40 - more like 100 200 pixels so let's try
241:44 - width of 150 pixels like that yes that
241:47 - is pretty much what we're looking for
241:50 - and hopefully you figure out how to make
241:52 - an image round and the way to do it is
241:54 - to use the border radius property which
241:56 - you've seen a couple of times by now and
241:59 - the maximum border radius an element can
242:01 - have is 50
242:03 - and boom
242:04 - there it is completely round
242:07 - all right the final part is to add the
242:09 - google font the happy monkey font that
242:11 - is a very birthday-ish font actually i
242:14 - found it just by googling google font's
242:16 - birthday then happy monkey was the top
242:18 - result clicking into that we'll select
242:20 - it by clicking select this style and
242:22 - then we'll copy the links here so that
242:25 - we can embed it into our project i'll
242:27 - paste that into the head of our project
242:29 - then copy the font family rule so that i
242:32 - can paste that directly in as well now
242:35 - i'll have to rerun so that the font is
242:37 - embedded and yes there we go that is as
242:39 - far as i can see exactly the design we
242:42 - were looking for
242:43 - so great job let's move on
242:49 - okay your next challenge is to colorize
242:52 - the app because i wanted to look like
242:54 - this with a nice blue background pink
242:57 - border and white text and as you can see
243:00 - i've provided the hexadecimal values for
243:02 - the pink blue and white colors here so
243:05 - your job is simply to figure out where
243:07 - you need to add these and what kind of
243:09 - css properties you're gonna use
243:11 - go ahead and do this right now
243:19 - okay hopefully that went well let's do
243:21 - it together
243:22 - i'm to start here in the body taking the
243:24 - blue hexadecimal value and setting it
243:28 - as the background of the body boom there
243:31 - we go
243:32 - next up we want to set the color
243:34 - property here
243:35 - to
243:36 - white just just six f's after each other
243:40 - like that
243:41 - now that is inherited down from the body
243:44 - into all of these okay final step is the
243:47 - image as you can see it should have a
243:50 - border around nick and it should be pink
243:52 - so here we'll use the border property
243:55 - and let's try six pixels because it
243:57 - looks pretty thick it should be solid
244:00 - and then
244:01 - we'll copy the hex value from pink and
244:04 - paste it in right there and actually
244:06 - that looks about right to me
244:09 - so great job let's move on
244:14 - there is one problem with our site at
244:17 - the moment which is that if we run these
244:19 - two colors through a contrast checker
244:22 - for example userway.org
244:24 - you'll see that our accessibility
244:26 - actually fails because the contrast
244:27 - ratio is too small so what can we do to
244:30 - improve this given that we want to keep
244:32 - the colors we have what we can do is use
244:35 - the trick you learned in the space
244:37 - exploration section because pay
244:39 - attention to what happens to this text
244:42 - if we add a thin black border around the
244:45 - text using the text shadow property so
244:48 - this is without the text shadow property
244:50 - and this is with it as you can see the
244:53 - text now stands out more as the black
244:56 - contrasts well with both the white and
244:58 - the blue background and is also pretty
245:00 - subtle so the text still looks white
245:03 - but it's just a little bit more visible
245:04 - and in my opinion i think the
245:06 - readability here is pretty good so what
245:08 - i want you to do now is write the css
245:10 - for this exact technique
245:12 - so add a thin blurred border around the
245:15 - h1 h2 and h4 elements using the text
245:18 - shadow technique you learned in the
245:20 - space exploration section you're gonna
245:22 - set the blur to one pixel and the color
245:25 - to black okay hopefully you remember how
245:27 - to do that give it your best shot and
245:29 - then i will of course show you the
245:30 - solution as well when you return back to
245:32 - me
245:40 - okay let's do this so let's start with
245:42 - the h1 here and here i'm just going to
245:44 - use an element selector as we'll have a
245:46 - lot of h2s and h4s throughout the site
245:48 - and i think we want all of them to have
245:50 - this style so there's no point
245:51 - separating it into a class
245:54 - so text
245:56 - shadow
245:58 - setting the first two values to zero
246:00 - pixels since we don't want any offset
246:02 - vertically or horizontally but the third
246:04 - value the blur should be set to one
246:06 - pixel and then the color is black and
246:08 - boom there we go we have that thin
246:11 - outline which improves the readability
246:14 - and now you probably did something like
246:16 - this added a whole new rule for the h2
246:19 - and yet another one for the age
246:21 - four
246:22 - and if you did that is completely fine
246:24 - that is how i expected you to solve this
246:26 - challenge
246:27 - but i do want to show you a little trick
246:29 - which allows us to reduce all of these
246:31 - into one line and that is simply by
246:33 - using a group css selector where you
246:36 - simply add multiple selectors on one
246:38 - line so what you do is instead of just
246:40 - writing a tron you write h1 comma
246:43 - h2 now we can delete the h2
246:46 - because this rule is applied to both the
246:49 - h1 and the h2 and likewise we can just
246:52 - add the h4 here as well like that now we
246:55 - can remove all of this as you can see
246:57 - the thin border is applied to all of the
247:00 - elements now it is really important that
247:02 - you actually use a comma here and not
247:04 - just add it like this this means
247:06 - something entirely different and we're
247:07 - not going to learn about that right now
247:09 - as it's outside of the scope of this
247:11 - section so make sure you have the commas
247:13 - and then you can use this technique and
247:15 - i happen to know that we also want this
247:18 - text shadow to be applied to our h3
247:20 - elements down the line and also our
247:22 - paragraphs down the line so i'm just
247:24 - gonna add them here so that we don't
247:26 - have to think about this as we add new
247:28 - elements to our site later down the line
247:30 - so
247:31 - great job let's move on
247:36 - now we want to take this pink background
247:38 - that we have around the image and apply
247:40 - it behind the h2 and the h4 element so
247:44 - that it looks like this so let's try the
247:47 - most intuitive approach and see how that
247:49 - works that would be to target the h2 and
247:52 - the h4 i'm going to use this comma
247:54 - selector here to target both
247:55 - simultaneously as we've done up here and
247:58 - then we'll set the background
248:01 - to this pink color right here however as
248:05 - you can see that did not give us what we
248:06 - wanted because heading elements like h2
248:09 - and h4 are by default display block so
248:12 - they take up all the available
248:14 - horizontal space so let's then try to
248:16 - turn them into display inline and see
248:18 - what happens then
248:20 - ah that did not work well either because
248:23 - when they're in line they're actually
248:25 - narrow enough to be on the same line and
248:27 - actually jump up to the line above with
248:28 - the image which also is display inline
248:31 - so let's remove the display inline as
248:33 - well and the way to actually solve this
248:35 - is to use a technique you haven't
248:36 - learned yet now i'm just going to show
248:38 - it to you fast and then we're going to
248:39 - take a closer look at how it works in
248:41 - the next script because what we can do
248:43 - is head into the body which is the
248:45 - container element for these two and for
248:48 - all of our elements actually and do
248:51 - display
248:52 - flex that stacks things up on a
248:54 - horizontal line turning every element
248:56 - into its own column but we can change
248:58 - that by doing flex direction which now
249:01 - is set to row by default and that might
249:04 - sound a little bit confusing since i've
249:06 - always said that flexbox turns every
249:08 - element into its own column and yes it
249:10 - does that however what it also does is
249:13 - make sure that all of the elements are
249:15 - in the same row so that is why it's
249:17 - called flex direction row because rows
249:20 - go from left to right you can see
249:21 - there's only one row from left to right
249:24 - here which becomes even clearer if you
249:26 - do like this and all the elements are
249:27 - inside of the same row now in order to
249:30 - flip this we can simply change row from
249:33 - column like that now all of the elements
249:35 - are stacked on top of each other again
249:37 - in one column because a column goes from
249:40 - top to bottom so this is just one column
249:42 - now with that in place we can use
249:44 - another css property in that flexbox
249:46 - give us which is called align
249:48 - items and set that to center and boom
249:52 - there we go
249:54 - now this was probably pretty confusing
249:56 - and you were not meant to understand
249:58 - this right now which is why we're going
249:59 - to take a little digression here and
250:01 - look closer at how flexbox works and
250:04 - then return back to this example where
250:06 - you will code it up yourself and
250:07 - properly understand it
250:12 - if you are to become a flexbox master
250:14 - you will need to know align items
250:17 - luckily though it's not that hard to
250:18 - learn because it is a close cousin of a
250:20 - property you already know which is
250:23 - justify content so let's pretend that
250:25 - the two of us for example work in a lab
250:28 - together well if so we'd have our lab
250:30 - equipment which you can see here inside
250:32 - of our lab which is this green rectangle
250:34 - right here and what we're going to do
250:36 - now is use flexbox
250:38 - along with justify content and line
250:40 - items in order to organize our lab
250:42 - equipment in different ways in our lab
250:44 - so let's have a look at the code
250:47 - the html is very simple it's just a
250:49 - container which has three divs and each
250:52 - div hold exactly one piece of lab
250:54 - equipment visualized via an emoji
250:56 - if we head over to the css you can see
250:58 - that the container has a border and a
251:01 - fixed height so that's why we get this
251:03 - green rectangle the items have a width
251:05 - and a height there's some margin in
251:07 - between them and some padding on the
251:09 - inside i've set the font size and also
251:11 - added a border and finally
251:13 - something you haven't learned yet but
251:14 - i've added a gradient background so that
251:17 - the color slightly fades from a darker
251:20 - shade of green to a lighter shade of
251:21 - green in the background now you are
251:23 - going to learn about the linear gradient
251:25 - later on so don't worry a second about
251:27 - this right now just accept that it is
251:29 - how it is and let's get going with the
251:31 - organizing so as you can see by default
251:34 - the lab equipment
251:36 - the div status are stacked on top of
251:39 - each other because as you remember divs
251:41 - are display block
251:42 - however if we turn it into a flexbox
251:44 - layout
251:46 - each of the item gets its own column and
251:48 - as a consequence they stack up on the
251:50 - horizontal line so far so good and if we
251:53 - set the justify content properly it'll
251:55 - arrange these in different ways along
251:57 - this horizontal axis so if we do center
252:00 - for example they are centered if we do n
252:02 - they are pushed all the way to the end
252:04 - and yeah you know the deal so what align
252:06 - items does is instead of controlling the
252:09 - horizontal line which i from now will
252:11 - call the main axis it controls the cross
252:15 - axis which is the vertical one going
252:17 - from top to bottom
252:19 - so
252:20 - let's turn this back to start and do
252:22 - align items
252:26 - center
252:27 - boom there you can see now it pushed all
252:29 - of the three items down to the center so
252:32 - that they are centered vertically
252:34 - meaning they are centered along the
252:36 - cross axis and then i can combine this
252:39 - with the main axis which is justify
252:41 - content that controls the horizontal one
252:44 - going from left to right for example do
252:46 - end here and boom then we are still
252:48 - vertically aligned so we're in the
252:50 - middle but we are pushed all the way to
252:52 - the right hand side along the main
252:54 - horizontal axis so the values you are
252:57 - going to use for line items to begin
252:59 - with are start center and end whereas
253:02 - with justify content as you know you can
253:04 - use start center and end but also these
253:06 - space around space evenly and space
253:08 - between properties okay let's move on to
253:10 - the challenge what i want you to do is
253:13 - follow my orders on where we should
253:15 - leave our lab equipment because i want
253:17 - you to do it in very specific ways
253:19 - starting with this position here where
253:21 - they're all squeezed down in the bottom
253:23 - left corner so go ahead and modify
253:24 - justify content and align items to
253:26 - achieve that layout right now
253:32 - so to achieve this layout you can see it
253:34 - is at the bottom of the cross axis the
253:36 - vertical one so we'll do end online
253:40 - items but it is at the start of the main
253:42 - axis because it is pushed all the way to
253:44 - the left meaning that we should do start
253:47 - up here and there we go we have solved
253:49 - it
253:50 - okay
253:51 - new challenge i want you to achieve this
253:54 - layout go ahead and do this right now
254:01 - so here we can see we are actually
254:03 - centered both along the main axis
254:05 - horizontally and the cross axis
254:07 - vertically
254:08 - so i'll try center
254:11 - yes and center again and there we go
254:15 - okay final one i want you to organize
254:17 - the equipment like this
254:19 - go ahead and do it right now
254:24 - okay hopefully that went well the first
254:26 - thing i'll notice here is that all of
254:28 - the items are squeezed to the top so
254:29 - align items should be start
254:32 - and there's some space around the
254:34 - elements
254:35 - so we need to try one of these for
254:36 - example space around space evenly or
254:38 - space between so let's try for example
254:42 - space between
254:44 - hmm
254:45 - that didn't exactly achieve what we
254:46 - wanted because there should be some
254:48 - white space on the left side and the
254:49 - right hand side here whereas these two
254:51 - are squeezed all the way to the end so
254:54 - maybe we can do space around instead yes
254:58 - that looks exactly like what we want
255:01 - so really good job solving these three
255:03 - challenges before we move on there's
255:06 - just a small thing i want to tell you
255:07 - that is something you might see from
255:09 - time to time which is that if i now
255:11 - remove the height
255:13 - of our items
255:15 - see then they just became a little bit
255:16 - higher because the content inside of it
255:18 - wants a little more height but that was
255:20 - besides the point what i wanted to do is
255:22 - also remove the align items let's see
255:24 - what happens oh wow it turns out that
255:27 - flexbox in the cross axis actually
255:30 - stretches the content like this and the
255:33 - reason it didn't happen previously was
255:34 - because our height property overrode
255:37 - that stretching so what this means is
255:39 - that line items
255:41 - by default has the value stretch
255:44 - when we do for example start it's no
255:46 - longer stretched and it's pushed to the
255:49 - start
255:50 - so this might feel very confusing and
255:52 - the only reason i want to tell you about
255:53 - it now is that when you are in a flexbox
255:56 - layout and you notice that something is
255:58 - stretching in a way you don't want it to
256:00 - stretch the prime suspect you should
256:02 - look at is align items and experiment
256:04 - with that so be aware of that but don't
256:07 - worry too much if you found this a
256:08 - little bit confusing it's totally okay
256:09 - let's just keep up the pace and move on
256:11 - to the next scrim
256:15 - now you're going to learn about flex
256:17 - direction
256:18 - because there is one problem with our
256:21 - lab system now that is that regardless
256:23 - of how we change around on the align
256:25 - items and justify content let's center
256:28 - an end for example our lab equipment
256:31 - will always stack up besides each other
256:34 - they'll be on the same row and there's
256:36 - no way to get them to stack on top of
256:38 - each other but maybe that's how i prefer
256:40 - to leave my lab equipment for the night
256:42 - but regardless of how we change to
256:44 - justify content and align items that is
256:46 - now impossible now we could of course
256:49 - remove the display flex and then these
256:51 - divs will stack on top of each other by
256:53 - default
256:55 - so by doing this now they stack on top
256:57 - of each other
256:58 - however
257:00 - justify content and line items
257:02 - no longer work so if i try changing
257:04 - these
257:06 - nothing happens because these properties
257:08 - work inside of a flex box not inside of
257:10 - a random div that by default is display
257:12 - block
257:14 - so we need the display flex
257:17 - like that in order to make these work
257:19 - however what we can do is change the
257:22 - flex direction
257:23 - so first let me just both of these do
257:25 - back to start and then i'll do flex dash
257:28 - direction
257:30 - and it by default is a row because as i
257:33 - said they stack up alongside of each
257:35 - other on a row but if we change this to
257:37 - column boom there you can see now they
257:40 - suddenly stack on top of each other as
257:42 - if they are in the same column as
257:44 - columns go from top to bottom so now we
257:47 - are back to the original layout we had
257:49 - before we made this into a flex
257:51 - container but justify content and the
257:54 - line items now work
257:56 - however they work in a little bit of a
257:58 - different way than you might expect
257:59 - because
258:01 - as you remember i previously talked
258:02 - about the
258:03 - main axis going from left to right and
258:06 - being the one controlled by justify
258:08 - content whereas the cross axis going
258:11 - from top to bottom and also being
258:12 - controlled by align items
258:15 - well when we change the flex direction
258:18 - and our items stack up differently on
258:21 - top of each other we also change the
258:23 - main axis so this is no longer the cross
258:26 - axis it is the main axis and it's
258:28 - controlled by justify content whereas
258:31 - the horizontal one is no longer the main
258:33 - it is the cross and it's controlled by
258:36 - align items so we basically flipped
258:39 - align items and justify content
258:42 - so if i now do justify content end
258:46 - it'll jump downwards whereas previously
258:48 - they would have jumped to the right
258:50 - and if i now do align items and it'll
258:53 - jump to the right whereas previously
258:55 - align items control the vertical
258:57 - position so this is probably a little
258:59 - bit confusing now you should not feel
259:01 - bad if this feels overwhelming this will
259:04 - take time to mature in your mind and
259:06 - it's totally okay that in the beginning
259:07 - now you're just experimenting with these
259:09 - values in order to get the layout you
259:11 - want and not really remembering exactly
259:13 - why it works as it works so let's now
259:16 - give you some practice i want to clean
259:18 - up my lab equipment and i want it to be
259:20 - like this
259:21 - so go ahead and change around on these
259:24 - two values in order to achieve that
259:26 - layout
259:31 - okay
259:32 - what we need to do is on justify content
259:35 - i want to center it so that it's
259:37 - vertically centered but then we want to
259:39 - align it to the start on the left hand
259:41 - side
259:42 - yes that is correct
259:44 - okay new one
259:46 - achieve this layout
259:52 - okay
259:53 - here we can see some space in between
259:56 - the items so i think we need to use
259:58 - space between on justify content
260:01 - yes looking good
260:03 - but we are aligning to the left we want
260:05 - to align it to the right instead so
260:07 - align items should probably be end
260:10 - instead of start and boom that is
260:12 - correct final layout
260:14 - this one right here give it a shot right
260:16 - now
260:21 - okay we can see that they are all
260:23 - squeezed towards the top so i think
260:26 - we'll do justify content
260:28 - start
260:29 - like that
260:30 - yes this is good but we want to center
260:32 - it as well
260:33 - so we'll do a line items center and
260:36 - there we go
260:37 - so
260:38 - great job doing this let's just move on
260:44 - okay now we're going to put your freshly
260:46 - acquired flexbox skills to the test
260:49 - because you are going to turn this
260:51 - layout here into
260:53 - this layout
260:54 - so first i want you to wrap the html
260:57 - element in a div with an id called
261:00 - header so that is
261:02 - all of these items right here
261:05 - and then you are to select this header
261:07 - and then use flexbox to achieve the
261:09 - layout from the design slide and as you
261:11 - might have guessed you will need to use
261:13 - flex direction and align items to solve
261:15 - this so go ahead and give this your best
261:18 - shot
261:24 - okay so we'll start in the html
261:28 - create active opening tag and close it
261:31 - off down here
261:32 - indent this
261:34 - run it no change scene in the mini
261:36 - browser
261:38 - that is to be expected
261:39 - because we'll have to target it and
261:41 - style it
261:42 - so i'm gonna do header and then first
261:45 - display flex
261:47 - that forces all of the elements into one
261:49 - row because it is flex direction row by
261:52 - default
261:53 - however we don't want that we want
261:55 - everything in one column so we'll do
261:58 - flex direction
262:00 - column like that now they stack on top
262:02 - of each other which is just what we want
262:05 - but there's a problem the two elements
262:07 - here are stretching and the image of
262:09 - nick is left aligned it's not centered
262:11 - so i think we need to change the align
262:13 - items
262:14 - align
262:15 - items
262:16 - into center
262:18 - like that and there we have the layout
262:21 - we wanted
262:22 - so great job let's move on
262:28 - okay now you're going to fix up the
262:30 - design for this 24 years old element and
262:33 - the date element right here because i
262:35 - want it to look like this here you can
262:37 - see that there's some space between the
262:39 - content of the element and the edge of
262:42 - the element and there's not as much
262:44 - space between the elements and also the
262:47 - edges of the rectangles are a bit softer
262:50 - but before you start doing this there's
262:52 - a couple of things i want to do
262:54 - because here the h2 and the h4 have no
262:57 - ids or classes they are just selected
263:00 - using the element selector and also
263:02 - using a selector list separated by
263:05 - commas and i don't think we should do
263:06 - either of those first of all we probably
263:09 - don't want all of our h2 and h4s on the
263:12 - page to be styled according to how it
263:14 - looks here up in the header so we
263:16 - actually want to give these two ids i'm
263:20 - going to call this one b day age
263:23 - and this one
263:25 - b day date running this code so that we
263:28 - got it applied and then in the css
263:30 - instead of using element selectors we'll
263:32 - use id selectors be they age
263:36 - and delay date and then finally let's
263:39 - avoid applying styles to both of these
263:42 - simultaneously let's work with one or
263:44 - the other because this is really an
263:46 - optimization and writing code which is
263:48 - so called dry short for don't repeat
263:50 - yourself and while that is a good thing
263:52 - i want you to focus on the core css now
263:55 - because this will introduce a little bit
263:56 - more complexity so let us instead just
263:59 - keep it simple so i'll break this into a
264:01 - new line so we got the birthday date
264:03 - rule here and then copy the exact same
264:06 - thing to the be they age
264:08 - like that okay
264:10 - now it's time for your challenge
264:12 - you are going to make the b day elements
264:15 - look like the provided design slide like
264:17 - this so go ahead and do this right now
264:26 - okay hopefully that went well let's
264:28 - start with the age element as you can
264:30 - see there is some space around it that
264:32 - is padding most likely so let's add
264:36 - padding for example 10 pixels and see
264:38 - how that works if we compare that with
264:40 - what we have in the design it looks
264:42 - pretty good but i think we shouldn't
264:44 - have 10 pixels on each side i think the
264:46 - padding on the left and right side is
264:49 - meant to be slightly larger than the top
264:51 - and bottom as we've often seen with
264:53 - buttons and layouts in general so for
264:55 - the top and bottom we'll do 5 pixels and
264:57 - left and right 10 pixels that is what we
265:00 - are looking for as far as i can see okay
265:02 - next up there is some border radius here
265:04 - as well not that easy to see but it
265:06 - definitely is there so we'll do border
265:08 - radius five pixels for example that
265:10 - looks pretty good to me and now let's
265:12 - just try to copy this down to our
265:15 - birthday date and see how that works
265:17 - here you can see except for the fact
265:19 - that there's much less space between the
265:20 - elements here they look pretty similar
265:23 - as far as i can see so we need to move
265:25 - on to the margin let's try first and
265:27 - remove all the margin from the birthday
265:29 - date margin 0 like that now it's quite a
265:32 - lot closer and whatever margin comes
265:34 - from the h2 element that probably has a
265:36 - bit too much margin bottom so let's
265:39 - rather control that by doing margin
265:41 - bottom for example 10 pixels and yes
265:44 - that looks pretty good to me let's also
265:46 - look at the margin top here it is too
265:48 - much space between the age element and
265:50 - the image so if we do margin top by 10
265:53 - pixels there that looks pretty good but
265:56 - it's perhaps still a little bit too much
265:58 - let's do five instead yeah actually i
266:01 - think we got it so the final step then
266:04 - is to convert this into a shorthand
266:06 - because we know how to use shorthand
266:08 - don't we we want 5 on the top and 10 at
266:10 - the bottom then we'll do margin 5px for
266:13 - the top 0 for the right hand side 10px
266:16 - for the bottom and 0 for the left hand
266:19 - side
266:20 - and there we go now if your solution is
266:22 - slightly different from mine perhaps you
266:25 - used
266:26 - slightly different margins border radius
266:28 - padding that doesn't really matter give
266:30 - yourself a pat on the back regardless of
266:32 - how you solve this and let's move on
266:38 - okay now you are going to create the
266:40 - first gift section of our site
266:42 - so as you can see it contains a title a
266:45 - little hint about hovering over the gift
266:47 - and then there's the image itself now
266:49 - the hover effect is not a part of this
266:51 - challenge you're only going to work with
266:53 - this hard-coded gifs cover at this point
266:56 - and that gift cover has been added up
266:57 - here in a images folder which i've just
267:00 - created as we now have two images so i
267:02 - wanted to gather them together in this
267:04 - images folder that means that i've also
267:06 - changed the image of nick or the source
267:09 - that is referring to the image of nick
267:10 - in the html it now contains the correct
267:13 - path into the images folder so the
267:16 - challenge is described in detail here i
267:18 - want you to start by creating a gift
267:20 - section div that will wrap all of the
267:22 - elements for the first gift and then i
267:24 - want you to add the h2 h3 and img
267:27 - element so that is the title which is an
267:30 - h2 the hint which is an h3 and finally
267:34 - the image itself and i want you to give
267:36 - them all their own classes so that you
267:39 - can use the classes to select the
267:41 - elements when you are to style them
267:42 - according to the design and as a final
267:44 - hint the image should be 400 pixels wide
267:47 - so go ahead and do this right now
267:55 - okay hopefully that went well so i'll
267:58 - start by heading over to the html and
267:59 - create the markup
268:01 - so we wanted a div to begin with
268:04 - i'm going to create that and then give
268:05 - it a class of
268:07 - gift section like that and inside of it
268:10 - we wanted first an h2 for the title
268:13 - which should contain the following text
268:15 - let's run this and yeah ah nice
268:18 - we can see that the text already has the
268:20 - correct font and also the slight shadow
268:22 - around it okay very nice let's then give
268:25 - it a class as that or something we
268:27 - should do with all elements
268:29 - i'll call this gift
268:31 - title like that and there was the h3
268:34 - with the following text and i'll give
268:36 - that a class of gift hint as you can see
268:39 - i'm using gift and then a description i
268:41 - think that makes it easy to understand
268:43 - that these are all somewhat related to
268:45 - each other
268:46 - finally the image element
268:48 - should have a source of images slash
268:51 - gift
268:52 - cover dot jpeg and also a class of
268:56 - gift img all right let's run this code
268:59 - and as you can see everything is being
269:01 - rendered though the image is far too
269:03 - large so we need to get going with the
269:06 - styling all right
269:07 - i'll start with the image so dot
269:10 - ift imd and give it a width of 400
269:14 - pixels yes that is much better and that
269:17 - is centered because of our text align
269:19 - center up here very nice okay let's just
269:22 - carry on with this one you can see it
269:24 - has a white border so let's do
269:27 - border
269:28 - looks to be something like six pixels or
269:30 - something and solid white
269:32 - yep pretty good and finally a border
269:35 - radius because the corners here are a
269:37 - little bit rounded off so let's try
269:39 - order radius at 10 pixels for example
269:42 - and yeah that looks pretty much like the
269:46 - design for the image nice okay next up
269:49 - is the spacing as you can see we have
269:52 - far too little space from the gift
269:54 - section itself to the header section
269:56 - above
269:57 - and i could add that to the top element
269:59 - here to the title for example but it
270:01 - makes a lot more sense to add it to the
270:03 - container element itself because it
270:05 - should control how far it is between
270:07 - this container and the container above
270:09 - so let's do gift section
270:12 - margin top and for example 50 pixels
270:15 - that is much better and looks pretty
270:18 - much like what we have here now you can
270:19 - see that the space between the title and
270:21 - the hint is very limited it's not that
270:24 - much space whereas here the default
270:26 - margins for the h2 and h3 elements
270:29 - create quite a lot of space in between
270:30 - them so now we probably have to work
270:32 - with both the default margin that the h2
270:36 - has at its bottom and the default margin
270:39 - which the h3 has at its top it doesn't
270:42 - really matter what we start with let's
270:44 - for example just start with the gift
270:46 - hint and see what happens if we set the
270:48 - margin top actually let's bring it up on
270:51 - the side here now we've not done
270:52 - anything with the margin top at all
270:54 - let's set it to zero
270:55 - you can see
270:57 - nothing happened okay that must be
270:59 - because the margin top here and the
271:02 - margin bottom under the h2 collapsed
271:04 - into each other and the margin bottom
271:06 - for the h2 was probably larger than the
271:08 - margin top for the h3 so removing it
271:11 - served no purpose
271:12 - that means that we also need to try and
271:14 - remove the gift titles margin at its
271:18 - bottom
271:19 - set it to zero for a couple and there we
271:21 - go now they're really crammed into each
271:24 - other actually too much they should have
271:26 - a little bit of spacing in between them
271:28 - so let's try to instead of reducing that
271:29 - to zero we set it to for example 10
271:32 - pixels that looks much more like the
271:34 - design we have here very good so you
271:37 - probably had different names on your
271:39 - classes and different margins and
271:42 - perhaps different borders and radiuses
271:44 - that doesn't matter the important thing
271:46 - is that you gave it a shot and got some
271:47 - kind of result hopefully resembling this
271:50 - so no matter what you did
271:52 - great job let's carry on with this
271:54 - course
271:58 - okay now we're going to prepare our
272:00 - project so that we later can add the
272:02 - hover feature so we're not going to add
272:05 - the hover feature right now we're just
272:06 - going to set the stage for it
272:09 - and in order to do that i'm going to
272:10 - first mess up this project a little bit
272:13 - and then it'll be your job to fix it
272:15 - because
272:16 - we are not going to use the image tag
272:19 - here in order to display this gift
272:22 - instead we are going to use a div tag
272:25 - so i'm changing this into a div which
272:28 - means i also need to close it like that
272:30 - because divs are not self-closing as img
272:33 - tags are and then next up divs don't
272:35 - have a source attribute so we can't use
272:38 - this in order to display the image if i
272:40 - now run this you can see boom suddenly
272:42 - our image is gone this src attribute has
272:45 - no place here because instead we are
272:47 - going to render this image through the
272:49 - css background image property so i'm
272:52 - going to remove this one if we run the
272:54 - code again you can see nothing else has
272:56 - happened and moving over to the css
272:59 - now it is your job to turn this weird
273:01 - line here into something that looks like
273:04 - this which is exactly what we had before
273:05 - i messed up the code here so you are to
273:08 - fix the
273:09 - gift img div because i kept the class
273:12 - right here
273:14 - so that it looks like the provided
273:16 - design
273:17 - and a little bit of a hint it needs a
273:19 - height and if you wonder how much i want
273:21 - it to be a square so equal width and
273:23 - height it also needs a background image
273:26 - which is how you'll render this gift
273:27 - cover it also should be centered again
273:30 - because as you can see here this looks
273:32 - very much left aligned so basically
273:35 - what's happened here is that the div has
273:37 - zero height because the div has
273:40 - no content inside of it so the only
273:42 - thing that's visible is the border which
273:44 - spans 400 pixels starting from the left
273:47 - hand side and over towards the right
273:48 - hand side so go ahead and give this a
273:50 - shot and then i will show you the
273:52 - solution when you return back to me
273:59 - okay let's do this
274:01 - first it needs a height and it should be
274:02 - a square meaning equal width and height
274:05 - so let's just do
274:07 - it and set it to 400px like that
274:11 - as you can see we now have a empty div
274:13 - on our page next up we're going to set
274:15 - the background image so how do we do
274:17 - that well you've seen that one before
274:19 - background image url and then point it
274:23 - to the images folder and the
274:25 - gift
274:26 - cover dot apec and there you go
274:30 - but what is happening here it seems like
274:32 - we only kind of see the top left corner
274:34 - of the image that is because the image
274:37 - itself is huge much larger than this 400
274:40 - by 400 pixel container so we need to use
274:43 - our good old friend
274:45 - background size and set that to cover
274:47 - and that squeezes our large image into
274:50 - the current width we have available here
274:52 - now finally why isn't this element
274:54 - centered anymore well the centering of
274:56 - the image used to happen because the
274:58 - text line is set to center but text
275:00 - align will only center inline elements
275:03 - inside of its container and as you
275:05 - hopefully remember divs they are not in
275:08 - line they are display block and you
275:10 - might have tried to do
275:11 - this play
275:13 - in line like that
275:14 - then you can see that doesn't really
275:16 - work
275:17 - then our width property and height
275:19 - property gets this weird underline
275:21 - underneath them because they are simply
275:23 - ignored by css because you can't force
275:26 - the width and height of an inline
275:28 - element as they should only be as large
275:30 - as the content inside of them are and
275:32 - this div doesn't have any content so we
275:34 - can't really use display inline what we
275:38 - rather can use is the margin technique
275:40 - you learned earlier the one where you
275:42 - set the left and right margin to auto
275:44 - because that works on elements that are
275:46 - display block and which have a set width
275:49 - so let's do margin 0 on the top and
275:52 - bottom and auto on the left and right
275:54 - and there we go
275:56 - we have it centered we are back to our
275:59 - original design and we've set the stage
276:02 - for our hover effect which nick is going
276:05 - to be so glad to experience so it's
276:07 - really cool that you've made it this far
276:10 - and let's just keep up the pace and move
276:12 - on to the next scrim
276:16 - in order for you to build the next
276:18 - feature for our birthday gift site you
276:20 - will have to learn about the hover
276:22 - pseudo class so let's take a step back
276:25 - from our birthday project and learn all
276:27 - about this hover pseudo class for it
276:29 - i've created this little fictional
276:31 - website for a restaurant it's just a
276:34 - very simple site that has three divs
276:36 - that are meant to be navigation items
276:38 - where you can look at the menu book a
276:39 - table or order catering if we head over
276:42 - to the css you can see that the only
276:44 - styling here is a set of rules that are
276:46 - applied to the divs that is the three
276:49 - menu items what i've done is simply
276:51 - aligned the text to the center i've set
276:53 - the text color to white given it's a
276:55 - margin some padding on the inside of the
276:58 - menu items i've added this red
277:00 - background color cranked up the font
277:02 - size and also made the font bold now
277:04 - what would be really nice is if these
277:06 - elements changed slightly when the user
277:09 - hovered over them so that we gave the
277:11 - user some visual feedback hinting to the
277:13 - fact that these should be clicked and
277:15 - also just making the site feel more
277:17 - alive and that is where the hover class
277:19 - comes in because what we can do now is
277:22 - if we target the same divs and then add
277:24 - a colon
277:25 - hover and opening up the curly brackets
277:29 - then we can write specific rules that
277:31 - only are applied when the element is
277:33 - being hovered over so for example we can
277:35 - change the background color to this
277:38 - color right here and this hexadecimal
277:41 - value probably doesn't tell you anything
277:42 - but i can disclose that it is a slightly
277:44 - darker shade of this red hair so now if
277:47 - i hover over the items boom you can see
277:50 - that the background is suddenly a little
277:51 - bit darker than the other items so this
277:54 - gives a nice feedback to the user so
277:56 - what's going on here is that
277:58 - this line takes precedence over this
278:01 - line
278:02 - when any div is hovered over and we can
278:06 - also for example increase the font size
278:09 - 40 pixels let's see how that works
278:12 - all right now it really stands out when
278:15 - you hover over one of the elements
278:18 - and let me show you a cool trick to
278:20 - prepare you for your next challenge
278:22 - because what you can do is actually do
278:24 - background image and then as you know
278:27 - use the url css function and point it to
278:30 - a image source i happen to have a image
278:33 - lying around in the file system right
278:34 - here let's try them so eyes dot
278:38 - jpeg we now hover over the item we can
278:41 - see our good friend nick staring back at
278:44 - us
278:45 - that is
278:46 - probably the creepiest restaurant menu
278:49 - i've ever seen but the point is only
278:51 - that you can change the background image
278:53 - on hover so hopefully this has prepared
278:56 - you for your next challenge because when
278:58 - we return back to the birthday gift site
279:00 - you are going to work with this hover
279:02 - class in order to help nick unpack his
279:04 - gifts so let's return back to our main
279:06 - project
279:10 - okay now we are getting into the fun
279:12 - stuff here because now we're going to
279:13 - create this epic feature where nick when
279:16 - he hovers over the gift paper gets
279:18 - revealed an underlying gif that makes
279:20 - him feel happy and appreciated on his
279:23 - birthday
279:24 - so the challenge is described here you
279:26 - are to swap the gift paper image out
279:29 - with the happy gif when you hover over
279:32 - the gift paper so the happy gif is added
279:36 - here in the images folder i'm not going
279:38 - to show it to you i want you to solve
279:39 - this challenge in order to see this gif
279:41 - now the gift paper image you are to swap
279:43 - out is
279:45 - this div right here
279:47 - as you remember we gave it a background
279:49 - image which is the
279:50 - giftcover.jpg file which also is in our
279:53 - images folder so go ahead and solve this
279:55 - challenge right now and then i will show
279:56 - you the solution when you return back to
279:58 - me
280:03 - okay hopefully that went well what we'll
280:06 - do is first target this gift img here as
280:09 - we want to create a hover effect on it
280:11 - so i'll do gift imd colon hover
280:16 - now whatever css properties and values
280:18 - we are setting inside of these curly
280:20 - brackets will be applied when the user
280:22 - hovers over
280:24 - this gift image and what kind of
280:26 - properties do we want to change well
280:28 - it's actually only one just the
280:30 - background image here so i'm going to
280:31 - copy that one paste it in and we don't
280:34 - want it to be the giftcover.jpg we want
280:36 - it to be the happy dot if like that
280:40 - let's see how this works i'll move the
280:41 - cursor down towards the image and when
280:43 - it crosses over we see phoebe and rachel
280:46 - from friends being super happy for nick
280:49 - on his birthday and i don't know about
280:51 - you but if someone told me that they
280:53 - would be this happy for me on my
280:55 - birthday it would make me feel so
280:57 - grateful and appreciated so we are
280:59 - really doing a good deed creating this
281:01 - website and you know what you've done a
281:03 - great deed for yourself in terms of
281:05 - getting this far in the course you have
281:06 - crushed through so many difficult css
281:08 - concepts so phoebe and rachel are also
281:11 - cheering for you take a moment to
281:12 - appreciate that and then i will see you
281:14 - again in the next scrim
281:19 - okay now that we've made sure that nick
281:20 - feels appreciated on his birthday
281:22 - through this phoebe and rachel gif let's
281:24 - make sure he also feels really good
281:27 - looking because now we're going to
281:28 - create this gift right here which says
281:30 - how people react when you enter the room
281:33 - and the gif will show when he hovers
281:35 - over this element is this hot gif up
281:38 - here i'm not going to show it to you now
281:40 - you're going to have to solve the
281:41 - challenge to see it and speaking of that
281:43 - let's have a look at the challenge text
281:45 - so you are to create the next gift which
281:48 - uses the hot gif and its html structure
281:51 - should be like the previous one but
281:53 - without the gift hint element because as
281:56 - you can see here we have this hint
281:58 - written in parentheses however that's
282:01 - not needed for this one i think nick
282:03 - will probably get the point by the time
282:05 - he scroll down to this one so let's just
282:07 - skip it but other than that you can
282:09 - simply copy paste this section and then
282:11 - of course change the text as well
282:13 - however you will need to do some more
282:15 - things as well
282:17 - because
282:18 - now that you have multiple gifs on the
282:20 - page you cannot use the gift image class
282:23 - to set the background image on hover
282:26 - that is this one right here because if
282:28 - you have multiple gift image elements on
282:31 - the page well then every single one of
282:33 - them will just show this happy gif and
282:35 - that's obviously not what we want so
282:38 - instead each of the gifts will need a
282:41 - unique id that controls which background
282:44 - image that should be shown when the user
282:47 - hovers over the element okay that was
282:49 - probably a lot to parse for you but if
282:51 - you didn't quite catch it just go ahead
282:54 - and try to solve the challenge because i
282:56 - think you will see this problem sooner
282:58 - or later anyway you definitely will
283:00 - actually so make it your best shot and
283:02 - then of course i will show you the
283:03 - solution when you return back to me
283:10 - okay let's do this
283:12 - so starting in the html by simply
283:15 - copying this one right here and pasting
283:18 - it down here removing the gift hint
283:20 - because we don't need that and then
283:22 - updating the title let's run the code
283:25 - now and here we can see the first
283:27 - element with phoebe and rachel let's
283:30 - scroll a bit down and there we have our
283:32 - second element though it still shows
283:34 - phoebe and rachel
283:36 - so that is a problem and that is because
283:38 - as i said this gift image class
283:41 - just sets the background image on hover
283:44 - to the happy gif on both of these
283:46 - elements right now so we can't use a
283:48 - class for this we need a unique id but
283:51 - we're not going to remove the class of
283:53 - gift img because it
283:56 - actually gives
283:57 - a lot of styling actually all the
283:59 - styling to the element
284:01 - so it's only the hover pseudo class that
284:03 - needs to be applied to something else so
284:06 - let's instead now on the first one here
284:08 - add an id that we'll call gif dash img
284:13 - happy
284:14 - we'll run the code so that it's applied
284:16 - and then instead of referring to the
284:18 - generic class here refer to this gift
284:22 - img
284:23 - happy
284:24 - id
284:25 - now if we run the code
284:27 - you can see that it works on the first
284:29 - gift though the second gift now lacks a
284:32 - hover effect and that is because the
284:34 - only hover effect we've applied now is
284:36 - on this specific id here on the first
284:39 - gift previously we used the generic gift
284:42 - img class so it was applied to all gift
284:44 - images but now the hover only works on
284:47 - the first one so what we need to do is
284:49 - use this exact technique
284:51 - but on this section as well so i'll
284:53 - create an id
284:55 - on this section
284:56 - and call it gift dash img
284:59 - dash pot
285:01 - i'll run the code so that it's applied
285:04 - and then since i'm lazy i'll copy this
285:08 - if img happy should be changed to gift
285:11 - img hot because that is our new id that
285:14 - targets that element
285:15 - and we don't want to show the happy gift
285:17 - we want to show the hot gif
285:19 - so let's see if this works here we are
285:22 - at this section when we hover over the
285:24 - image we see someone looking pretty
285:27 - interested in nick so i think he will
285:30 - feel really good looking and hot on his
285:32 - birthday when he sees this gif so great
285:35 - job solving this challenge let's move on
285:41 - as you can see over in the file system
285:43 - i've added a genius gif and a badass gif
285:47 - so your job is now to create the genius
285:50 - and badass gift sections they should
285:52 - look exactly as the hot section so i'm
285:56 - not going to give you any more
285:57 - instructions other than giving you the
285:59 - titles so that you can just copy them
286:01 - from here instead of writing them out on
286:03 - your own
286:04 - so go ahead and create these two
286:06 - sections right now and then i will show
286:08 - you the solution when you return back to
286:10 - me good luck
286:17 - okay let's do this
286:19 - so i'm going to start in the html file
286:21 - because we're simply going to copy paste
286:24 - this one
286:26 - two times
286:30 - then i'm going to add the titles i'll
286:32 - copy this one and paste it in
286:35 - here and copy this one
286:38 - and paste it in
286:41 - here okay
286:42 - let's run this
286:45 - now you can see we have the hot gif and
286:47 - then the genius section which still has
286:50 - the hot gif underneath it that's to be
286:52 - expected and there we have the badass
286:54 - section which also still has the same
286:56 - gif
286:57 - so now we have the sections rendered on
286:59 - the page at least but we need to fix up
287:01 - the css so
287:03 - lazy as i am i'll copy this one there it
287:06 - says gift image hot
287:08 - the first one will be the genius one so
287:11 - i'll do genius instead
287:13 - and that should refer to the genius gif
287:16 - now that we have this in place we can
287:18 - just give this class to the respective
287:21 - image like that
287:23 - running the code
287:24 - and we have the happy gif we have the
287:27 - hot gif and then
287:28 - the genius gif
287:31 - that is pretty cool i surely think nick
287:33 - will appreciate this compliment okay the
287:36 - final one here the keyword is badass so
287:40 - i'll change the id
287:41 - to badass now that we are in the html
287:45 - and moving on to the css
287:48 - copy this
287:49 - and change from genius to badass because
287:53 - that's the id we just created and the
287:56 - gif we want to fetch out from our images
287:57 - folder is the badass.gif
288:00 - let's open up our example again scroll
288:02 - down to who is the only person as badass
288:05 - as you it is of course chuck norris
288:08 - all right
288:10 - we are done with this challenge
288:12 - great job let's move on
288:18 - now it's finally time to add the very
288:21 - last gift and that is the chairs gift so
288:24 - you're gonna add this section but
288:26 - there's a little difference between this
288:27 - section and the previous ones because as
288:30 - you can see here it is not squared but
288:32 - rather more rectangular so what i want
288:35 - you to do is give the gift section a
288:37 - height of 200 pixels which is different
288:40 - from the original height that we
288:42 - controlled up here on the gift img class
288:44 - where we set it to 400 pixels so the way
288:48 - you are to change this or override it is
288:51 - by selecting the gift img shares id
288:54 - which you are going to create just like
288:56 - you've created ids for all the other
288:58 - gift images as well and then you're
289:00 - going to set the height on that element
289:03 - which essentially means to override the
289:05 - previous height and finally here is the
289:07 - text as well along with the chairs gif
289:10 - up in the file system here and i really
289:12 - think you'll enjoy this one so go ahead
289:14 - and give it your best shot and then i
289:16 - will show you the solution when you
289:17 - return back to me
289:23 - okay let's do this i'll start in the
289:25 - html by again copy pasting
289:28 - the previous section and here i need to
289:31 - change the text first
289:33 - so i'm going to do
289:35 - like that
289:37 - and then we're not gonna have badass
289:39 - rather it's shares
289:41 - so running this we can see we have a
289:44 - squared image in place that's not
289:46 - exactly what we want so we need to do
289:48 - the next step which is to use this id
289:50 - which we just created and override the
289:53 - height
289:54 - i'll do height 200 pixels like that and
289:58 - there we can see it is now just as we
290:00 - want it the final step then is to use
290:03 - this hovered pseudo class in order to
290:05 - change the background image to chairs
290:08 - i'll copy this one
290:11 - and do
290:12 - chairs instead and now if we hover over
290:14 - it we see leonardo dicaprio in a smoking
290:18 - giving us a toast
290:19 - really nice
290:22 - and one thing i want to mention here is
290:24 - that you might be a little bit confused
290:26 - as to why this height property takes
290:30 - precedence over this height property
290:33 - and it is actually not because this is
290:35 - written further down in the css file
290:38 - actually if we remove it to even
290:41 - further up in the css file even though
290:44 - css reads from the top and then
290:46 - downwards this still takes precedence
290:48 - over this
290:49 - and that is because of something called
290:51 - specificity which means that the more
290:54 - specific a css selector is the higher it
290:57 - will be prioritized and this id selector
291:00 - is a more specific selector than the
291:02 - class because as you know only one
291:05 - element can have an id whereas multiple
291:07 - elements can share the same class
291:10 - so ids are more specific than classes
291:13 - now i don't want to get more into
291:15 - specificity we're going to learn more
291:16 - about that later in the front-end
291:18 - developer career path for now i just
291:20 - wanted to mention it in case you were a
291:21 - little bit confused so we have now done
291:24 - all of the gifts
291:26 - and we have a super cool birthday page
291:28 - we can send to nick there's just a few
291:30 - things left and then we are completely
291:33 - done with this epic birthday site so
291:35 - i'll see you in the next scrim
291:40 - now you are going to create the footer
291:43 - for our site and it should have a
291:44 - paragraph that says want to create your
291:47 - own birthday gift site take this html
291:49 - and css course with a link to well this
291:52 - exact html and css course
291:55 - and i want you to configure the anchor
291:57 - tag so that it opens up the link in a
292:00 - new tab if you've forgotten how to do
292:02 - that well then you simply have to google
292:04 - it
292:04 - i've provided the link right here and
292:07 - also the text so that you don't have to
292:09 - write that out on your own however
292:11 - outside of that i'm not going to give
292:12 - you any more hints but i want you to
292:14 - notice that there is some spacing around
292:17 - this paragraph both above it and beneath
292:20 - it you can see it doesn't touch the
292:21 - bottom of the site and also it is
292:24 - centered it's about as wide as the
292:25 - images themselves and it's also in
292:28 - italic
292:29 - so you're gonna have to figure out how
292:31 - this translates into css i think you can
292:34 - do it go ahead and give it your best
292:35 - shot and then i will see you again when
292:37 - you return back to me
292:44 - okay let's do this
292:46 - so i'll head over to the html and add a
292:48 - paragraph which i'll give an id of
292:51 - footer and let's paste in the text
292:57 - like that and also the
293:00 - link
293:02 - else we need to create
293:03 - an anchor tag
293:05 - and it should be around
293:06 - this html and css course so we'll start
293:10 - the anchor tag here
293:11 - do an ahrefs
293:15 - and then in order to open the anchor tag
293:17 - in a new tab we'll do target equals
293:20 - underscore
293:21 - blank
293:22 - and then we'll close it off at the end
293:24 - here
293:26 - let's run this
293:28 - okay so we have now something that looks
293:31 - not too far from our design it's decent
293:33 - but still a lot of things lacking
293:35 - first of all this text is far too wide
293:39 - it should be more or less the same with
293:41 - as the images
293:43 - so let's do
293:47 - footer
293:48 - set the width to
293:51 - 400 pixels
293:52 - okay what happened now well we do have
293:55 - text line center but now that this is
293:58 - 400 pixels wide and it's still a display
294:00 - block element as paragraph is that the
294:03 - text line center won't center the
294:05 - content here inside of its container so
294:08 - we need to center it using the margin
294:10 - technique meaning that we'll do margin 0
294:14 - at top and bottom and then auto add left
294:16 - and right
294:17 - yes there it is centered but actually we
294:20 - do want some margin at the top and
294:21 - bottom because as you can see right here
294:23 - it has some spacing above and a little
294:24 - bit more spacing beneath it so let's try
294:27 - 40 pixels on top
294:29 - yeah that's pretty good
294:31 - and now 40 pixels at the bottom that's a
294:33 - bit too much in my opinion here it looks
294:35 - more like 20 or something so let's
294:37 - rather than do 20 pixels like that now
294:40 - we have 40 at top auto at left right and
294:43 - 20 at bottom and that looks pretty good
294:46 - to me
294:47 - however one obvious thing we need to fix
294:49 - is that this anchor tag should also be
294:51 - white so i'm going to target the element
294:54 - itself
294:56 - new color white like that
294:59 - now i think the final step we have is to
295:02 - make it italic and that's done up here
295:04 - where we can do font style
295:07 - italic
295:08 - and there we go that looks identical in
295:12 - my eyes
295:13 - so really good job i'll see you in the
295:16 - next scrim
295:20 - okay now we're going to talk about
295:21 - gradients and that's something you've
295:23 - probably seen many times in nature
295:26 - though not really thought much about
295:28 - because for example because the sky is
295:30 - full of gradients here you can see a sky
295:32 - that kind of fades from a light blue
295:35 - color into a whitish color and this fade
295:38 - is basically a gradient
295:40 - here's another example where it starts
295:42 - almost black at the top and then slowly
295:44 - fades over into purple and then again
295:47 - into a orange-ish or light brown or i
295:50 - don't know what you want to call this
295:52 - color but you get the point it's fading
295:54 - from one color to another and this is
295:56 - very often used in web design you can
295:59 - and you can do it with css pretty easily
296:02 - let's for example remove this background
296:04 - image of the gift card from our gifts
296:06 - now you can see it's just transparent
296:10 - and then instead we'll write background
296:14 - and linear dash gradient
296:18 - and then two parentheses so this looks a
296:20 - little bit like the url keyword we write
296:23 - when we want to refer to images meaning
296:25 - that this is also a so-called css
296:27 - function now inside of the parentheses
296:30 - we simply write the two colors we want
296:32 - to fade from and to so let's do from red
296:35 - to blue and boom there you go now you
296:37 - can see that all of our gifts fade from
296:40 - red down to blue and by default it
296:43 - starts with the first color at the top
296:45 - and then the second color at the bottom
296:47 - so let's try to mimic this image here in
296:49 - css
296:50 - i happen to know that there's a css
296:52 - color called
296:53 - light sky blue
296:55 - so if we start with that one
296:57 - and go down to
296:59 - white
297:00 - and have a look at this gradient here
297:02 - actually
297:03 - to me it's kind of similar to this one
297:05 - we have here not quite but you get the
297:07 - point okay
297:09 - now i'm gonna remove this
297:11 - give us our gift cover back and then
297:13 - give you a challenge because now i want
297:15 - you to change our site's background into
297:18 - a gradient that goes from blue at the
297:20 - top to pink at the bottom and
297:23 - let me show it to you let me and let me
297:25 - here show you how it will look i'm going
297:27 - to do some magic now i'm going to knit
297:29 - my fingers and then the gradient and
297:31 - then the gradient will be applied
297:33 - automatically
297:35 - pretty nice now you can see the bottom
297:37 - here is pink and if we scroll up it
297:40 - slowly fades over into blue
297:42 - and at the top it's totally blue so this
297:45 - makes the site slightly more fancy which
297:47 - i think is cool and matches the birthday
297:49 - team so now i'm going to knit again and
297:51 - the gradient will be gone
297:53 - like that now our site is blue
297:57 - all the way from the bottom to the top
297:59 - and it's your job now to get the
298:00 - gradient back so go ahead and do that
298:03 - right now
298:08 - okay let's do it so the property we need
298:10 - to fix is the background on the body
298:13 - because we need here a linear
298:16 - gradient
298:18 - going from the blue color it used to
298:21 - have to
298:22 - the pink color which we've been using as
298:25 - a border of our image of nick so then
298:27 - i'll simply paste that one in right here
298:29 - now it should be fading from blue to
298:32 - pink
298:33 - let's see we can see the blue and yes it
298:36 - looks like it is slowly fading towards
298:38 - pink
298:39 - really good job now you've learned a
298:41 - super cool css technique i'll see you in
298:44 - the next scrim
298:48 - okay now that you've completed the
298:50 - birthday gift site i want you to make it
298:52 - your own so first try to think of
298:55 - someone whose birthday is upcoming it
298:57 - could be a friend a family member a pet
299:00 - or basically whomever if you need some
299:02 - ideas you can head over to on
299:05 - thisday.com and click on birthdays
299:07 - that'll show you a bunch of celebrities
299:09 - was born on this exact date as you can
299:12 - see here the birth dates are
299:14 - chronological so you probably have to
299:15 - scroll a bit down until you find someone
299:18 - you've heard about rolling it down will
299:19 - show us that louis vuitton was born on
299:21 - this day in 1821 or scrolling even
299:24 - further we can see that also meghan
299:26 - markle was born on this day so if you
299:28 - find a celebrity you like here this is a
299:30 - perfect opportunity to make this site
299:32 - about them and what i mean about that is
299:34 - that i think you should change the gifts
299:36 - to something suitable for that person
299:38 - and also of course change the copy as
299:41 - well accordingly and if you want to go
299:43 - even more above and beyond create entire
299:45 - new sections or even style it
299:47 - differently depending on how you want it
299:49 - to look that is great practice for your
299:51 - design and product skills in general
299:54 - finally once you've done that i want you
299:55 - to download the code files so that you
299:57 - have them locally on your computer if
300:00 - you've forgotten how to do that it's
300:01 - pretty simple just click on the gear
300:03 - icon in the bottom right corner here and
300:05 - click download as zip as you can see it
300:08 - now downloads this zip which in my case
300:10 - is called project parentheses 45 so once
300:13 - you've found someone to create this
300:14 - birthday site about made the appropriate
300:17 - changes and downloaded the code you are
300:19 - ready to move on to the next couple of
300:21 - scrims where we are going to deploy it
300:23 - to the web
300:27 - on its way from your local computer up
300:30 - to the internet your code is going to
300:32 - take a slightly different path this time
300:34 - around because while it worked perfectly
300:37 - fine to just drag and drop your files
300:40 - onto github.com that's actually a pretty
300:42 - clunky way of doing it so instead we're
300:44 - going to use a dedicated tool for
300:46 - interacting with github and that tool is
300:49 - called github desktop because that's the
300:52 - way the pros do it when they interact
300:54 - with github they always have a tool in
300:56 - between them and the service which helps
300:59 - them push code up to github and also
301:01 - pull code down from github and just to
301:04 - make things a little bit more complex
301:06 - for you here what's actually going on
301:08 - under the hood is that both github
301:10 - desktop and github.com rely on a piece
301:13 - of software that's called git
301:16 - what is git well some devs who think
301:18 - they are really smart will probably tell
301:20 - you that git is open source distributed
301:23 - code management and version control
301:25 - system but you should regardless of how
301:28 - smart you are just think of git as a way
301:30 - to keep track of file changes so that's
301:33 - it git helps you keep track of how your
301:35 - project files change over time and
301:38 - actually you don't need to know anything
301:39 - more than that in order to get started
301:41 - using git via github desktop because
301:44 - this desktop app abstracts away a lot of
301:46 - the complexity with git and as long as
301:48 - you know how to use this app you don't
301:50 - really need to know much about what's
301:52 - going on under the hood so let's just
301:54 - get started and download github desktop
301:56 - right away if you are following this
301:58 - course via scrimba you can just click on
302:00 - this slide right here but if you're
302:02 - watching it via youtube just head over
302:04 - to desktop.github.com
302:06 - once you're there click on the download
302:08 - button so that your browser starts
302:10 - downloading the zip file for this app
302:12 - and once that's done open up the app
302:14 - install it on your computer and once
302:16 - you've authenticated with github in the
302:19 - app you should see a screen that looks
302:21 - more or less like this
302:22 - the first step you're going to take here
302:24 - is to click on this button that says
302:26 - create a new repository on your hard
302:28 - drive because that's what we want to do
302:30 - we want to create a repository aka a
302:33 - folder on your computer that holds all
302:35 - of our project files what you'll then
302:37 - see is this little modal where you have
302:39 - to give your repository a name so i'm
302:41 - going to call it birthday gift site and
302:43 - then you are to head down to the local
302:45 - path field and click on choose because
302:47 - what you now need to tell git and github
302:49 - desktop is where on your computer you
302:52 - want your project to live i'm going to
302:54 - navigate to my dev folder and just click
302:56 - open and then create repository that'll
302:59 - change github desktop into this
303:01 - dashboard that you will interact with
303:03 - the earth a gift site repository using
303:05 - the various buttons now you can see that
303:08 - it says no change files because our
303:10 - repository is empty in order to verify
303:12 - that let's click on the show in finder
303:14 - button when we do that you can see that
303:16 - github desktop has created an empty
303:18 - folder on our local computer and i have
303:21 - it here right above the project zip i
303:23 - downloaded in the previous scrim so i'm
303:25 - going to click on the zip file then
303:27 - double click on it so that i'm unzipping
303:29 - the files select all of the files and
303:32 - then drag and drop them over into our
303:34 - repository like that when you then
303:36 - return back to github desktop you will
303:38 - see chuck norris staring you straight in
303:41 - the face because as you can see on the
303:42 - left hand side here all of the images
303:44 - and project files have been registered
303:47 - so click down on the index.html file
303:49 - there you can see they're all in green
303:51 - which means that these are new lines of
303:53 - code ready to be added to the git
303:55 - repository in order to add all of this
303:57 - content to a repository you have to head
303:59 - down and write a commit message in the
304:01 - bottom left field right here i'm going
304:04 - to just say commit initial files and
304:06 - then to perform the commit we'll hit
304:07 - this commit to main button don't worry
304:10 - about what main means at this point and
304:12 - also if you're a little bit confused
304:14 - about what a commit actually is don't
304:16 - worry too much about that what we're
304:17 - just doing here is telling git that we
304:20 - want to add a bunch of files to the
304:22 - repository and we're also adding a
304:24 - little description so that in the future
304:26 - it'll be easier for other developers to
304:28 - understand what you were thinking when
304:30 - you added these files so let's hit
304:32 - commit to main that removed all of the
304:34 - files which was intentional but actually
304:36 - here my computer did something annoying
304:38 - max have a tendency to add a so-called
304:40 - ds store file which is something mac
304:43 - uses to handle metadata for a folder we
304:45 - don't need that in our project so i'm
304:47 - actually just going to right click on it
304:48 - and delete this file entirely by
304:50 - clicking on discard changes now once
304:53 - i've done that the dashboard is back to
304:54 - how it was before we committed the files
304:57 - so it has this publish repository option
304:59 - both here and up at the top this means
305:02 - sending off our code to github that's
305:04 - obviously what we want to do so i'm
305:05 - going to click on publish repository and
305:07 - also give it a name i'm going to give it
305:09 - the same name on github as we have
305:11 - locally calling it birthday gift site
305:14 - and also i'm going to uncheck this keep
305:15 - code private because we want our project
305:17 - to be open source and then i'll hit
305:19 - publish repository now the final step is
305:22 - to click on this button right here view
305:24 - on github and boom here we go we have
305:26 - created a repository locally on our
305:29 - computer and published it on github via
305:31 - github desktop just as the pros do it so
305:36 - really good job we are ready for the
305:38 - next step which is to deploy this site
305:40 - to the web which we'll do in the next
305:42 - scrim
305:46 - now that you've pushed your birthday
305:48 - gift site to github it's time for us to
305:50 - hook it up with netflix so that you can
305:52 - deploy it as well so head over to your
305:55 - netlify dashboard and there click on the
305:57 - add new site button and choose import an
306:00 - existing project there just click on
306:02 - github which then brings up this search
306:04 - menu where you can search for the
306:06 - birthday gift site click on it and then
306:08 - leave all the site settings as they are
306:10 - just scroll to the bottom and click
306:12 - deploy site then you'll see this
306:14 - familiar dashboard again and as always
306:16 - the only thing you need to do here is
306:18 - wait until this image here turns into a
306:21 - screenshot of your site which is now
306:23 - does meaning that your site is available
306:25 - on this url
306:26 - now hopefully your birthday site is not
306:29 - about nick at this point it's about
306:30 - someone else and i definitely think you
306:32 - should send it off to that person or if
306:35 - it's about a celebrity or whomever at
306:37 - least share it with the world and once
306:39 - you've done that give yourself a pat on
306:41 - the back and i will see you in the next
306:43 - scrim
306:46 - at this point you know how to use github
306:48 - desktop locally on your computer how to
306:51 - push code up to github and then have
306:53 - netlify deploy it to the world wide web
306:56 - that is really good however you're still
306:59 - lacking one important tool because what
307:01 - happens if you want to change your code
307:03 - and then push it up to github and deploy
307:05 - it again well in that case you'll have
307:07 - to use a code editor locally on your
307:09 - computer so that's exactly what you're
307:11 - going to learn in this scrim we are
307:14 - going to use a code editor that you
307:15 - actually have been using quite a lot at
307:17 - this point though you might not be aware
307:19 - of it it is called visual studio code
307:22 - and it's actually what powers scrimba
307:24 - under the hood though as you can see
307:25 - from the screenshot here it looks a
307:27 - little bit different from the scrimba in
307:29 - browser editor as we've done some
307:30 - modifications to it and stripped it down
307:32 - a little bit okay so in order to get
307:34 - visual studio code running locally on
307:36 - your computer you have to head over to
307:38 - code.visualstudio.com
307:40 - or if you're watching this scrim on
307:42 - scrimba just click on this slide and
307:45 - you'll get to the landing page once
307:46 - you're there click on the download
307:48 - button that'll start a download process
307:50 - of the app and you'll also get to this
307:52 - getting started page however i'm going
307:54 - to talk you through it so you don't need
307:55 - to read through this guide once it's
307:57 - downloaded just unpack the zip and
307:59 - install it on your computer and then
308:01 - you'll get to a screen which looks like
308:02 - this here you can see a bunch of
308:04 - onboarding steps but we're not going to
308:06 - worry about them right now just click on
308:08 - the back arrow in the top left corner
308:10 - and there i want you to click at the
308:12 - open option because that'll open up the
308:14 - finder menu which you are to locate to
308:16 - the folder for the birthday gift site
308:19 - click on open and there you can see the
308:22 - birthday gift site listed under the
308:24 - explorer tab on the left hand side i'm
308:26 - going to remove this get started file
308:28 - here so i'm going to click on this x
308:29 - icon like that and then i'm going to
308:30 - click on the birthday gift site to open
308:32 - up the folder moving on to the
308:34 - index.html file when we open it you can
308:36 - see that it looks quite a lot like how
308:38 - it looks on scrimba the editor right
308:40 - here though we at scrimba have created
308:43 - our own color theme so we're not using
308:45 - the default one you can see right here
308:46 - but other than that it's quite similar
308:49 - now let's make a change to this code
308:51 - push it up to github and get it deployed
308:54 - the change i want to do is just very
308:55 - simple i'm going to change this name
308:56 - from nick's birthday into pierce
308:59 - birthday if i then save this with
309:01 - command plus s or control plus s you can
309:03 - see that the file turns yellow means
309:05 - that it has changed and also to verify
309:08 - this let's open up finder alongside a
309:10 - browser window and just drag and drop
309:12 - this index html into the browser because
309:14 - then we can see that it says today is
309:16 - pears birthday so by pointing our
309:19 - browser to the local index.html file we
309:22 - have verified that yes the changes have
309:24 - been saved though this is just available
309:26 - for me locally it has not been deployed
309:28 - yet so we got to do that as well and the
309:30 - way we get these changes up to github
309:32 - and then up to netlify is as you
309:34 - probably guessed via the intermediate
309:36 - step of github desktop so if we navigate
309:39 - to the desktop app there you can see
309:40 - that it has noticed that we have changed
309:43 - line 10. you can see the red line 10
309:46 - right here which is the previous version
309:48 - before we saved our code and the green
309:50 - line which is the new version after we
309:52 - saved our code so now we have to tell
309:54 - git that we actually want these changes
309:57 - to be incorporated into our repository
310:00 - we have saved them locally but we
310:02 - haven't saved them or aka committed them
310:05 - to the github repository so by having
310:08 - this file checked and writing a commit
310:10 - message down here in the bottom left
310:12 - corner we can commit this change and
310:13 - thus save it in git i'm going to give it
310:16 - the commit message change the name to
310:18 - pair and then hit the commit button now
310:20 - all of our local changes have been
310:22 - committed as you can see it says zero
310:24 - changed files but what we did get is
310:26 - this number one up here and an option
310:29 - called push origin and that means
310:31 - pushing our changes up to github so if i
310:33 - click at that you can see it starts
310:35 - doing some stuff under the hood and then
310:37 - if i click on view on github it'll open
310:40 - up the github browser and there on the
310:42 - row here which lists the index.html file
310:44 - you can see that our commit message
310:46 - changed the name to peer was added to
310:48 - this project one minute ago that is very
310:51 - promising if we now head over to our
310:53 - netlify dashboard you can see that
310:55 - nitpify has already picked this up here
310:57 - under builds you can see that one of our
310:59 - projects is now being built and in this
311:01 - tab as well you can see we have one
311:03 - concurrent build going on and then after
311:05 - a little while you can see boom it's
311:07 - completed i'll click into the project
311:09 - and open up the url and there you go it
311:12 - says today is pears birthday so now you
311:14 - have a really powerful local dev
311:17 - environment and also an automated
311:19 - deployment process that ensures that
311:21 - when you push changes up to github
311:23 - they'll also be reflected out in the
311:25 - world wide web so again give yourself a
311:27 - pat on the back this might have been a
311:29 - little bit overwhelming i totally get
311:31 - that but over time as you do this more
311:33 - and more it'll become second nature
311:38 - it is not just nick who deserves a
311:39 - congratulation you two my friend deserve
311:42 - exactly that congrats on completing this
311:45 - section now let's have a look at what
311:47 - you've learned starting out you learned
311:49 - about the align items property which
311:51 - allows you to align items in a flexbox
311:53 - container along the so-called
311:55 - cross-access and speaking of access you
311:58 - also learned how to flip the flex
311:59 - direction between column and row so row
312:03 - is what's used by default but we set it
312:05 - to column here because row would make it
312:07 - look completely wacky so instead we want
312:12 - a column that stacks things on top of
312:14 - each other next up you learned about the
312:16 - super cool hover pseudo property which
312:18 - enabled us to create the feature where
312:20 - when nick hovers over the image the
312:22 - underlying gif is exposed and then of
312:25 - course you learned about gradients also
312:27 - a really neat little trick that allows
312:29 - us to
312:30 - slowly fade from blue to pink on the
312:34 - background here here we can see how we
312:36 - did that with the linear gradient on the
312:39 - background of the body
312:41 - and then we also took a quick look at
312:42 - how to group selectors together by using
312:45 - the comma in between a bunch of
312:47 - selectors we could apply the style once
312:49 - instead of having to repeat this rule
312:51 - again and again throughout our style
312:53 - sheet
312:54 - and you also learned about github
312:55 - desktop how to set up a repository
312:58 - locally on your computer and use this
313:00 - tool to push it up to github and finally
313:03 - how to use vs code so that you now have
313:05 - a proper local development environment
313:08 - where you can build stuff change it push
313:11 - it up to github and finally then get it
313:13 - deployed
313:14 - so with all of this your brain is full
313:17 - of new knowledge meaning that you should
313:20 - feel free to take a break right now to
313:22 - let the concepts mature in your mind and
313:24 - then i will see you in the next section
313:26 - when you are ready
313:30 - welcome to the final section of this
313:33 - course and here it is time for you to go
313:36 - solo and what do i mean about that well
313:39 - you know how i've kind of been peeking
313:41 - over your shoulder helping you step by
313:43 - step throughout all of the projects
313:44 - we've built
313:45 - well
313:46 - that time is over
313:48 - now i'm going to remove the training
313:50 - wheels and you will have to build a full
313:52 - project on your own because that's
313:55 - actually the only way you can know
313:57 - whether or not you've truly learned html
314:00 - and css
314:01 - so you're going to build a so-called
314:03 - solo project and the project is a home
314:06 - page for your hometown you can see it
314:09 - here on the right hand side this version
314:11 - right here happens to be about my
314:13 - hometown or the place i grew up in oslo
314:15 - norway it's a part of the city called
314:17 - tushov however the point with this is
314:19 - not for you to build exactly this but
314:21 - rather build a website about a place
314:23 - area city or country that you care about
314:25 - and you have a connection to because
314:27 - when you do that and then share it in
314:29 - the discord community it'll give an
314:30 - opportunity for other students on
314:32 - scrimba to get to know you better and
314:34 - hopefully you'll enjoy building it as
314:36 - well because that is about the place you
314:37 - care about
314:38 - now i'm going to go deeper into the
314:40 - content of the solo project in the next
314:42 - scrim but for now there's one thing you
314:44 - need to do and that is to head over to
314:47 - figma.com because figma is the design
314:50 - tool in which you'll get the design for
314:52 - your project it is the most popular
314:54 - design tool these days it can kind of be
314:56 - seen as the github equivalent for
314:59 - designers so i want you to click on this
315:01 - image right here and then you'll be
315:02 - taken to figma.com there click on sign
315:05 - up and create an account and i also want
315:08 - you to click on this image right here
315:10 - because that'll take you to a quick 10
315:12 - minute figma tutorial which bob's a role
315:14 - our teacher here at scrimba created
315:17 - specifically for students who need to
315:19 - learn a little bit of figma in order to
315:20 - do solo project here on scrimba so you
315:23 - can either watch this right now or you
315:25 - can wait until you've started the solo
315:27 - project when you feel the need for some
315:28 - guidance through the figma interface the
315:31 - reason this is at youtube and not here
315:33 - on scrimba is because learning a
315:34 - browser-based tool like this is actually
315:36 - better to do via a regular video than
315:39 - via slides here on scrimba so with that
315:42 - let's move on and take a closer look at
315:44 - the actual solo project
315:49 - now it is time for you to solve your
315:50 - very first solo project the hometown
315:53 - homepage and here it is as you can see
315:56 - it is a website that consists of three
315:58 - sections the hero here has a background
316:00 - image and a heading and subheading
316:03 - there's the activities section which has
316:05 - a title and three columns each one
316:08 - containing an image a heading and a
316:10 - paragraph and then there's finally this
316:12 - card at the bottom which is meant to
316:14 - introduce you to a tourist guide for
316:16 - this area
316:17 - and you might look at this and think how
316:19 - on earth am i supposed to create all of
316:21 - this
316:22 - well take a look at each of the elements
316:24 - and think back at what we've done in
316:26 - this course for example this hero
316:28 - section here with a background image and
316:31 - another section beneath it well that's
316:33 - pretty similar to what we did in the
316:35 - space exploration site and these two
316:37 - headings right here with the background
316:39 - colors well that's what we did in the
316:42 - birthday gift card with the year element
316:44 - and the date element and as for the card
316:46 - down here i think that resembles our
316:49 - business card quite a lot
316:51 - finally the three columns we have in the
316:53 - activities section well that looks like
316:55 - a job for flexbox if you ask me and
316:58 - we've used flexbox multiple times even
317:00 - the way we use it here where actually
317:02 - all of the three flex children the items
317:05 - are containers in themselves which
317:07 - contain an image a heading and a
317:09 - paragraph so i think you got this let's
317:12 - then look at the specific requirements
317:14 - first of all you're going to build it
317:16 - from scratch or i'm saying that with
317:18 - quotes because i've actually added a
317:21 - little bit of a skeleton here for you
317:23 - so you can see what we got basically a
317:25 - version with hardly any styling but with
317:28 - some of the elements in place you can
317:30 - see there's the hero section here
317:32 - there's the activity section it doesn't
317:34 - have all the data but at least the three
317:35 - images and then there's the guide
317:38 - section at the bottom here obviously
317:40 - though it looks terrible because the
317:41 - only styling i've applied is some margin
317:43 - 0 on the body and i've aligned the text
317:46 - to the center and also limited the width
317:48 - of the images to 100 pixels
317:50 - so you can use this as a starting point
317:52 - if you want or you can wipe it out and
317:54 - do it completely from scratch that's up
317:57 - to you next i want you to make sure that
317:59 - you do use classes
318:01 - flexbox the background image property
318:04 - and also the color palette that i'm
318:06 - providing as you can see in the css here
318:09 - are the hex values for the color palette
318:11 - i'm using and also i have a link to
318:14 - coolers here you can click this image
318:16 - and you'll be taken to the color palette
318:18 - and then once you're done if you are up
318:20 - for it there are some stretch goals
318:22 - first make it about your own hometown
318:24 - country or whatever place you like i
318:26 - hope everyone wants to do this because
318:28 - when you share it in the scrimba
318:30 - community we will get to know you a
318:31 - little bit better secondly if you use a
318:33 - different color palette your site will
318:35 - be even more unique and if you add a
318:37 - google font you can really level up the
318:39 - design because i've not done that and as
318:41 - a result the font here is a little bit
318:43 - boring also if you want to go crazy find
318:45 - a way to use the hover sudo class on any
318:48 - of these elements that would be super
318:49 - cool and finally you could add entire
318:52 - new sections that would be so cool
318:54 - however do remember that these stretch
318:56 - goals are optional you don't have to do
318:59 - them but i would encourage you to give
319:00 - it a shot if you have the energy so
319:02 - moving on to get to the actual figma
319:04 - file click on this image right here and
319:07 - if you get confused do remember the
319:09 - figma tutorial i talked about in the
319:11 - previous scrim you can click on this
319:12 - link right here to get to it now if
319:14 - you're watching this on youtube these
319:16 - links have also been added to the
319:18 - description below the video and they are
319:20 - in the corresponding github repo for
319:22 - this course finally you can do this solo
319:25 - project either locally on your computer
319:27 - or here at scrimba if you do it here at
319:29 - scrimba i would recommend you to click
319:31 - on the three dots in the bottom right
319:33 - corner and choose fork to new scrim as
319:36 - that will give you your very own scrim
319:38 - to work on instead of just working on a
319:40 - note on the timeline of this specific
319:43 - lesson so i will leave you with these
319:45 - requirements so that you can look back
319:47 - at them when you need to with that i
319:48 - wish you the best of luck you got this
319:51 - happy coding
319:56 - hold on a second did you just complete a
319:59 - five hour long online course
320:01 - wow that is phenomenally well done you
320:05 - should be proud of yourself because out
320:07 - of all the people who start this course
320:09 - this is the amount of people who
320:11 - actually complete it and you belong in
320:13 - that group you are not a quitter however
320:16 - at this point you might wonder what now
320:19 - what should i learn next and i think you
320:21 - are ready now to get started learning
320:23 - javascript the programming language that
320:26 - powers the web and there are many ways
320:28 - to do that online one of them is the
320:30 - frontend developer career path that we
320:32 - have here at scrimba which aim to take
320:34 - students from zero to hireable as
320:36 - front-end developers and you've actually
320:38 - taken the second module of this career
320:40 - path because module two consists of the
320:43 - course you've just gone through so you
320:44 - can jump directly to module three where
320:46 - i will teach you the basics of
320:48 - javascript however there are plenty of
320:50 - other resources out there where you can
320:52 - learn javascript so this is just if you
320:54 - like my style and scrimba in general
320:57 - regardless of what you do i think you
320:58 - should celebrate yourself so go ahead
321:00 - and deploy the final project you created
321:03 - that is the hometown homepage and share
321:05 - it with the world and if you've already
321:07 - started creating an online portfolio
321:09 - this project is a great first thing to
321:11 - add to that if you have feedback for me
321:13 - regarding this course i would love to
321:15 - hear it you can click on this link to
321:17 - get to my twitter profile and this link
321:19 - to get to my linkedin profile and if
321:21 - you're watching this on youtube i've of
321:22 - course added the links in the
321:24 - description below the video as well so
321:26 - with that there's just one final thing i
321:27 - want to remind you and that is that you
321:29 - are awesome the fact that you have
321:31 - completed this course gives me a lot of
321:33 - confidence in you on your journey
321:35 - towards becoming a professional web
321:38 - developer good luck with your learning
321:40 - journey going forward and thank you for
321:42 - taking my course