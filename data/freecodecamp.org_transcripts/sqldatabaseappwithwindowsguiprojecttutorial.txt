00:00 - In this course, you will learn
how to design and use databases,
00:04 - you will create a graphical
Windows application that can
00:07 - display and modify data from a
MySQL database server. Shad
00:11 - Sluiter is your instructor for
this course, he is a professor
00:15 - of computer science and software
development at Grand Canyon
00:20 - University.
00:23 - Hi, in this video, I'm going to
show you how to create this
00:27 - application that's on the
screen. This will be a Visual
00:30 - Studio project. And we are going
to focus in on working with
00:34 - databases. So let's look at the
features of what we're going to
00:37 - build. And then I'm going to
give you the outline of the
00:41 - different subjects that we're
going to cover some of the
00:43 - technical things that you'll
learn. And then finally, we'll
00:47 - get into the part where we start
building it. So let's look at
00:50 - the features first. And then
we'll get into what we actually
00:54 - have to learn some of the
features, you can see on the
00:57 - application that we have a
database. So that's the main
01:00 - feature. And we are going to
have a bunch of songs. So you
01:04 - can see that I have albums on
the top table here. And when I
01:08 - click on an album, I have a
preview of the album cover. And
01:12 - then in the bottom part, we can
see the different songs that are
01:15 - on that album. So for instance,
here we got help, and have a
01:18 - video player over here.
01:21 - And so we can listen to The
Beatles, as they call for help.
01:26 - So if I choose the other song
here, you'll see that it'll
01:30 - automatically switch, it looks
to me like that one's
01:33 - unavailable. And then we get
Ticket to Ride. And I have to
01:36 - suffer through an ad. So this is
just a YouTube player. It is not
01:41 - anything saved to my computer.
01:46 - Alright, so now I'm getting
Ticket to Ride like I asked for
01:48 - it to begin with. Now I can also
delete some of these things. So
01:52 - for instance, if I wanted for
some reason to get rid of Abbey
01:54 - Road, I can try the delete
button up here. And then I get a
01:58 - confirm message that says Are
you sure you want to delete
02:00 - number three, as you can see,
album number three is listed
02:04 - here. And I don't actually want
to delete this right now. Okay,
02:07 - so now let's talk about what are
some of the features and some of
02:11 - the programming that you're
going to learn. First of all,
02:13 - you can see that we're going to
build a database, let's see what
02:16 - this database looks like. You
can see I have a table here
02:20 - called album, another one called
track, and I filled in some data
02:24 - for you, we're going to be
working with MySQL and this tool
02:27 - called MySQL Workbench. And so
you can see that the table
02:30 - definition here shows that we
have a foreign key relationship
02:34 - between the album and all of the
tracks that are on that album.
02:38 - So I will take you through the
process of setting up a database
02:42 - and defining the different
fields and then creating this
02:46 - link between the two tables
called a foreign key. So this
02:50 - video is targeted at people who
know some programming, but are
02:55 - not really familiar with
databases to a great deal. And
02:59 - so what we're going to do is
focus in on how to build this
03:02 - database, and to write the
queries that can make this
03:06 - application work. My name is
shad Sluiter, and I teach
03:09 - software development at Grand
Canyon University in Phoenix,
03:12 - Arizona. So in this course,
you're going to see the emphasis
03:16 - on working with databases. So
I'm teaching a course on SQL and
03:20 - on Mongo right now. And so you
get to see the benefit of what
03:24 - we're doing in class. If you
would like to look at the full
03:28 - series of this thing, you can
either subscribe to the channel
03:31 - that you're looking at now on
YouTube, or you can see the more
03:34 - extensive version on steady
coding.org, which is another
03:37 - website. So I welcome you to
come back, because people that
03:41 - are in my classroom are becoming
professional software developers
03:44 - and getting great jobs. And so
you could do that too. Okay, so
03:48 - let's get into the first phase
of this. So phase number one is
03:51 - build the database. phase number
two is to build the application.
03:56 - And then phase three is to
connect those two things
03:59 - together. So we're starting off
here at the beginning, which
04:02 - could take a little while, we're
going to build a database. So
04:06 - what we're going to do first is
design the album table. And then
04:11 - after we have the album table
working, we will go and try to
04:14 - make it connect to the
application. And then we'll come
04:17 - back to the track and we'll add
the song tracks later. So we're
04:21 - going to build this application
kind of piecewise. So we'll get
04:26 - very basic to start with and
then more advanced as we get
04:29 - through this series of videos.
So let's start with building a
04:32 - new database. Okay, so let's get
started with the tools that
04:35 - we're going to need. So in this
first part, we're going to need
04:39 - to have a SQL Server. So there
are various types of SQL
04:43 - databases that you can install.
We're going to be using MySQL
04:47 - which is free it's open source,
it runs on multiple platforms.
04:51 - However, there are other
alternatives besides MySQL even
04:55 - though it's the most popular and
widely used database probably in
04:59 - the planet. You
05:00 - could use Postgres, which
apparently has more features,
05:02 - you could use Microsoft SQL,
which is a very scalable and is
05:06 - used by a lot of enterprise
customers, you could go to
05:09 - Oracle, they have a very
expensive system. And you could
05:12 - probably find others as well.
But MySQL is what we're choosing
05:16 - because it has great tools, and
it's free. So the tool that
05:20 - we're going to be using is MAMP,
Ma, MP that stands for
05:23 - Macintosh, Apache, MySQL, and
PHP. Now, don't let the
05:30 - Macintosh part scare you away,
because if we were to go look at
05:34 - the downloads, we're going to
see that the first version that
05:37 - they recommend is for Windows.
So they have a Windows version
05:41 - and a Mac version, which is
really good, because in my
05:44 - classroom, I have students that
have both types of operating
05:47 - systems on their computer. So
we're going to install MAMP. And
05:51 - we're going to wait for the
download to finish. And then
05:53 - when we set it up, we will not
choose MAMP Pro, but we will
05:57 - just use the free version, that
will work just great for our
06:00 - purposes. Another tool that
we'll be using in this project
06:04 - is MySQL Workbench. And you can
see the download page here. Now
06:09 - MySQL Workbench is used for
arranging more complex
06:12 - databases. And so we won't see
this for the first part of the
06:16 - tutorial, because we're only
going to have a single table to
06:19 - get started with. But just to
let you know that this is
06:22 - coming, we will be using this
eventually, to create the
06:25 - application that will make this
media player work, we're going
06:29 - to be using Visual Studio
version 2022. And we'll be
06:33 - creating a Windows desktop
application. So we'll get to
06:36 - that part. When we get to the
application. We're first of all
06:39 - going to build the database
though. Okay, so now I have
06:42 - skipped ahead, I have installed
MAMP. I have chosen not to use
06:46 - MAMP Pro, so I unchecked one of
those boxes. And now I have this
06:50 - application up and running. Now
I want to start this. So I'm
06:54 - going to click Start servers.
And you're going to see two
06:56 - different little green dots up
here, one for Apache, and the
07:00 - second one for MySQL server. Now
we could care less about Apache
07:04 - server for this application.
This is for hosting websites.
07:08 - And this is not going to be a
web application. However, we're
07:11 - going to be using a SQL server
so that way, we have the ability
07:15 - to handle the database. And so
that's why I installed MAMP. Now
07:19 - there are other packages that
you could use. If this doesn't
07:22 - work out for you, you could use
Wempe wa MP, which is for
07:26 - Windows, you could use XAMPP x a
MP, you can search for that it
07:31 - has the same functionalities
with different menus in
07:33 - different places. Another tool,
which is really good that is not
07:37 - required you to install anything
is the USB web server. So the
07:41 - second link on the page here
actually has a free version of
07:44 - what USB web server is. And you
can download this. And you can
07:48 - literally run it from a USB
stick, you could run it on any
07:51 - computer lab or you don't have
access to install software. And
07:55 - it will do the same features as
what we're going to do in the
07:57 - video. So take your pick, I'm
going to be using MAMP. And
08:01 - that's what the tutorials will
be easiest to follow it. So go
08:04 - ahead and pick MAMP if you can
otherwise choose one of the
08:07 - alternatives. Okay, so now we're
back. Now that we got the
08:10 - application running, let's go
and choose this button called
08:13 - Open start page. And you're
going to see that the website
08:16 - load opens to localhost slash
MAMP. So let's go to tools. And
08:21 - I want to choose PHP myadmin.
And this will bring up all of
08:26 - the databases that I have
installed on this server. So you
08:30 - can see over on the left side, I
have music, MySQL and a few
08:32 - other things. So the only thing
that we're going to focus in on
08:36 - here is this one called music.
And since that I've already
08:40 - created this application, I have
some data in it, you can skip
08:44 - ahead, if you know how to do all
of this, we need to create a
08:47 - table and fill it with some
data. But I'm going to do that
08:50 - right now. So you can see the
process. The first thing I'm
08:53 - going to do is I'm going to
create a new database. So I have
08:55 - music, I'm going to create a new
one. So let's click the link at
08:59 - the top. And this one, I'm just
going to call it music two,
09:02 - because I'm going to recreate
the same application. The
09:06 - language that you choose, of
course, is probably English. If
09:10 - you're watching this video, I'm
just going to choose the general
09:14 - text that we have here. Now we
are supposed to create a table
09:17 - and the first table we're going
to create is called albums. And
09:21 - now we have to decide how many
columns we're going to put in
09:24 - the albums table. Okay, so now
I'm going to cheat and I'm going
09:27 - to look back to what I actually
created in this application. So
09:30 - here's the other tab. You can
see I'm going to create 1234566
09:36 - columns, and I'm going to have
different data types in each
09:40 - column. So let's change this
number to a six and then choose
09:43 - Create table. Let's click the Go
button.
09:48 - The first thing we're going to
do is name the six columns. So
09:52 - just going straight down the
left side of the form I'm going
09:54 - to type in ID and a database ID
is always the first item it's a
09:59 - number that
10:00 - has a unique identifier for each
record. The next thing we're
10:03 - going to put in is the album
title. And I'm using an
10:06 - underscore to separate the
words, you don't have to use
10:09 - underscores. But it's a pattern
that a lot of people use. I'm
10:13 - going to use artists year image,
Name and Description to be the
10:17 - rest of these. So these were
going to be the six columns that
10:22 - describe each album in our
database. Now let's take a look
10:26 - at the next item here. So the
type, so every one of these
10:29 - right now says int, which stands
for integer. Now, integers are
10:34 - numbers, of course. Now if I
want to have something besides
10:37 - an integer, I can just select it
from here, I'm going to choose a
10:40 - text version. So var char and
text are two two choices. Let's
10:46 - take a look at the hints to see
why we would pick one or the
10:49 - other. So var char is a variable
length, character string. And it
10:54 - is used for things like words or
titles, so it fits perfectly
10:59 - with the album title. And then
the next item over here, we can
11:02 - say how many characters so let's
say 100 letters is the length of
11:08 - our title.
11:10 - Now for the rest of these, we're
going to add some more details.
11:13 - So for the artist, this would
also make sense to use a
11:16 - variable character length var
char, we've got a year which
11:19 - will leave right at integer
that's easy to work with, we
11:22 - could pick date, but year is
pretty simple to work with.
11:26 - We're going to work with an
image name, which is a URL. So
11:29 - it's the it's the HTTP slash
Wikipedia address that we're
11:35 - going to get images from. And so
this could be pretty long, let's
11:38 - leave it at, let's say 1000
characters for the maximum
11:41 - length. Then for the
description, let's change this
11:44 - to text. Now the difference
between text and var char is
11:48 - kind of subtle. So text is
usually used if you have a large
11:53 - section like a text area on a
webpage, where you expect to see
11:57 - paragraphs of information. Var
char usually as a single line
12:01 - for like a name or an address or
something rather short. So both
12:06 - of them are saving letters in in
a format that looks the same to
12:10 - us. But they are different in
the computer's mind. So text
12:14 - works well for description.
Okay, so this thing is ready to
12:17 - go. So down here at the bottom,
you can see that there's a save
12:19 - button, let's click it and cross
our fingers. So as soon as I
12:23 - click save, you can see now I
have switched to the tab called
12:26 - structure. So structure tells me
what my database is made of. So
12:32 - you can see that we have all of
these data types that we just
12:34 - created. And there's going to be
no data. So if I choose Browse,
12:39 - we're going to see that the
column headers are here. And
12:43 - there's actually no data in the
database yet, I'm gonna change
12:46 - one item that I forgot to do
previously, the first item is an
12:49 - ID number. And that is supposed
to be a unique number that the
12:53 - computer generates. So I'm going
to click the Change Icon. And
12:57 - let's see why I would want to
change that. So I'm going to
13:00 - switch over here to this item
that says auto increment, a
13:05 - underscore I've had is not
artificial intelligence, that's
13:07 - auto increment. And when I
select it, it's going to
13:11 - automatically choose the next
number available for whatever
13:15 - record I put in. So the first
one will be record number one,
13:18 - and then two, and then so on. It
never deletes or goes backwards.
13:23 - So it'll go to infinity
eventually. But we just want to
13:26 - make sure it's unique. So let's
say let's click save. Now as
13:30 - soon as I click save, you notice
there's a new icon here, it's
13:32 - got a little key. So that tells
me that the ID is now a primary
13:37 - key, which is important, it
means that it is the only item
13:41 - really, that has to be filled
in, in all six columns. And it
13:45 - will be used to connect to this
table to other tables later on.
13:49 - So that's enough to get us
started with our database, let's
13:52 - add some data.
13:54 - So as I tried to add data, I
click on the Insert tab. And now
13:59 - I'm going to fill in some items,
I'm going to leave the ID blank
14:02 - because the computer is going to
automatically provide the next
14:05 - number in the database. So the
first one will be one. So we'll
14:09 - leave it blank. The title for
our album is Abbey Road, and
14:13 - it's done by the Beatles, and
the date is 1961. Now let's see
14:19 - if we can get some information
from the internet to fill in the
14:23 - other items. So I've got a
description and an image URL.
14:27 - Let's just use our friends at
Wikipedia to help us out. So I'm
14:30 - going to search in Google for
Wikipedia and Abbey Road. And
14:34 - let's bring up the article that
tells us about Abbey Road. So
14:38 - first of all the image let's
take a copy of that. So I'm
14:40 - going to right click it and
choose Copy Image address. And
14:44 - let's switch back into our
database. And now let's paste it
14:47 - here. So let's see Ctrl V and
you can see that the URL to this
14:51 - image is from uploads at
Wikipedia. So I don't have to
14:55 - save this to my disk. I'm just
going to rely on whatever's
14:59 - hosted
15:00 - at Wikipedia, so if they delete
this picture from the website,
15:04 - my application will no longer be
able to show the image. So it
15:08 - saves me space, but then I have
to rely on them not to delete my
15:11 - image. Let's scroll down a
little bit. And you can see the
15:14 - last item here is a text field.
And we're supposed to add a
15:17 - description. Well, here's a nice
description, let's just copy the
15:21 - first part of the Wikipedia
article. And let's paste it into
15:25 - our database. And now I don't
have to type anything. Now I'm
15:29 - going to click go. So it says
here at the top that one row has
15:33 - been inserted. And it tells me
the SQL statement that was just
15:37 - executed, you notice it says
Insert into has the table name,
15:41 - then it mentions all of the
column names here. And then the
15:45 - next statement is values. And
then below that, you can see all
15:48 - of the text. So if I click on
Browse, I should be able to go
15:51 - back and see that now I have one
item called Abbey Road. If I
15:55 - want to see one of these in
detail, I can just double click
15:58 - it. And you can now see that I
have a whole bunch of data in
16:02 - the description, which takes
multiple lines. So that is how
16:05 - you can fill in a table. If you
would like to look at the full
16:10 - series of this thing, you can
either subscribe to the channel
16:14 - that you're looking at now on
YouTube, or you can see the more
16:16 - extensive version on study
coding.org, which is another
16:20 - website. So here's your
homework, I want you to fill in
16:23 - about a half a dozen different
albums. So I'm picking the
16:27 - Beatles, you can choose any one
you like. But we need to have
16:31 - something that we can search
for. So for the next video, I'm
16:34 - going to show you how to query
data and you can search for
16:38 - certain keywords or filter it.
So come back again, and we'll
16:42 - continue on our database
application.
16:47 - Hi, and this second video of a
series we're going to continue
16:51 - to explore building a SQL
database application. Here's the
16:55 - index of all of the things we're
going to learn. In the first
16:58 - video we worked through creating
our first database. In this
17:02 - video, we're going to start to
write some queries using the SQL
17:05 - language. In the future, we're
going to talk about the front
17:08 - end connecting our database to
that front end, doing some
17:12 - searches inserting records,
creating foreign keys, joining
17:16 - tables together, creating what's
called UML diagrams, making
17:20 - compound queries or multiple
queries in one step, we're going
17:25 - to delete items from the
database. And then finally, at
17:28 - the very end of this course,
we're talking about features
17:31 - that we didn't get to, but you
could probably explore. So this
17:35 - whole series here is available,
not only here where you're
17:38 - watching, but also on study
coding.org, which is my channel
17:42 - where I create applications. My
name is shad Sluiter, and I
17:46 - welcome you to come to class
with me virtually even where you
17:49 - can become a professional
software developer. So this
17:53 - course that we're covering right
now is focusing on databases.
17:57 - But as you can see from the
selections on steady coding.org,
18:00 - that you can learn C sharp
programming for websites or Java
18:05 - or Node js, and JavaScript and
other languages. So many of my
18:10 - students have become
professional software developers
18:12 - and have great jobs. And I'd
like the same thing to happen
18:15 - for you. So come along, and join
us in class and plan your
18:20 - future. So just as a reminder,
where we're going with this
18:23 - application, this is the final
product. And as you can see, we
18:27 - have a list of albums at the top
of the page. And then we have a
18:31 - list of music or tracks at the
bottom, and then a YouTube
18:34 - player so that we can hear the
music. So in the past video, we
18:38 - created the database that goes
behind this top control, which
18:42 - is a grid. And we're going to
work on some queries this video
18:46 - where we can select items based
on what's in the database. So
18:51 - searching for specific titles,
selecting specific columns of
18:55 - this table. And then eventually,
we're going to come and create
18:58 - this application that you see
and display the data on the
19:02 - front end you might call it or
on the form of the application.
19:06 - So let's go take a look at where
we were. And then we're going to
19:09 - get closer to the vision that
you see here on the screen. So
19:13 - as a reminder, we built our
application using this tool here
19:16 - MAMP, which includes MySQL as
its database. So I've got the
19:21 - two little green dots here
indicating that the application
19:24 - is running and the database is
being served. Now I'm going to
19:28 - click this button here that says
open start page. So here is the
19:32 - start page. As you can see, the
address is localhost MAMP. I'm
19:35 - going to the tools menu and
choosing my admin. And I'm going
19:39 - to take a look at the database
here. So music two is what we
19:42 - created in the last video. And
so far we have an albums item so
19:46 - you can see on the screen now
that I have several items that I
19:49 - imported in the last video so I
have a bunch of albums from The
19:53 - Beatles. So I have the title,
the artists the year the image
19:57 - name and the description, both
of those items at the end.
20:00 - were taken directly from
Wikipedia. So in this video,
20:04 - we're going to practice doing
some selections. And then in the
20:07 - next we're going to do some
programming actually in the
20:10 - form. So let's go to the part
that says SQL. And we're going
20:14 - to learn how some SQL queries
work. So as you can see, there
20:18 - is automatically some code
written for us, which is very
20:21 - helpful. Let me zoom in a little
bit, so we can see very well on
20:25 - the video. There we go. So
select star, it says from albums
20:29 - were one. So let's make this
even simpler, I'm going to take
20:33 - out the where collection, and
just say this statement, select
20:36 - star from albums. And let's
click go and see what that does.
20:40 - So what this is telling us is
select everything that there is
20:45 - in the albums table. And you can
see that the list here includes
20:49 - all of the items. Now we're
going to do a little bit more
20:52 - sophisticated searches than
that. So let's focus in on this
20:56 - last part where it says where so
where is going to be a
20:59 - condition. So we can say, some
name, like ID, and then I'm
21:04 - going to put in an equal sign,
and then specify a specific
21:08 - number. So let's try three. So I
just happen to remember that the
21:12 - first album in my table is ID
three. So if I click on go,
21:17 - we're going to see exactly one
result, because album, three
21:21 - here is Abbey Road. So let's try
a different search. So I'm going
21:24 - to say where ID equals something
else. So I'm going to put in 17.
21:29 - I believe 17 is one of my
albums. So let's click go. And
21:32 - sure enough, it looks like Hard
Day's Night in my collection is
21:35 - number 17. So that is one way to
do a SQL statement. Now let's do
21:40 - another word, we can have a
condition to say something like
21:43 - I want to look for where ID is
anything greater than 10. And
21:48 - let's choose a go. And this
time, you can see that I have
21:52 - two items, I have 16 and 17,
which are bigger than 10. You
21:56 - can experiment with others,
let's try something like a less
21:59 - than sign. So let's say if I say
ID is less than 10. And what
22:04 - comes out now, so we've got
ourselves, four of them. So
22:08 - 34567 Are the results here. So
you can see that the SQL
22:12 - statements are able to select
items based on a condition. All
22:17 - right, so now we're going to do
another query. And this time,
22:19 - I'm going to search in the title
of the album. So let's see if we
22:24 - can find anything that has the
letter A in the album title. So
22:28 - this will hopefully find things
like Abbey Road. So the way we
22:32 - do this is we put in the word
album title after the word where
22:36 - so where album title. Now
instead of an equal sign, I'm
22:40 - using a like operator. So like
says we're going to match a
22:44 - partial match. And so I want to
match something that is like the
22:48 - letter A. Let's see if this does
anything. Now before I click the
22:52 - Go button, I'm going to make
sure that this box down here
22:55 - called retain query box has a
checkmark that will allow me to
22:59 - come back and modify this
without retyping the entire
23:02 - mess. So let's go ahead and
choose go. And I am
23:06 - disappointed. The results down
below says it returned an empty
23:10 - set. So nothing like a. So what
is missing here is the ability
23:15 - to search for wildcards. So I'm
going to put in a percent sign
23:19 - before the a and a percent sign
for the after, which means find
23:23 - a somewhere in the middle of the
word. Let's see if that does any
23:27 - better. So I click go. So let's
look at the results down below.
23:30 - And you can see that there are
three results. It says here,
23:33 - Abbey Road, Yellow Submarine and
Hard Day's Night are all
23:36 - matched. And so this here is a
like statement that gives us a
23:40 - result. So the percent sign and
the Like operator are both
23:44 - important. Now a couple other
things that we're going to
23:46 - notice here is these backticks.
So how do you type those if
23:49 - you're working in here
application, because we're going
23:53 - to be copying and pasting these
search queries into our Visual
23:57 - Studio application. These are
actually optional. So I'm going
24:01 - to delete the backticks they're
only useful is if you need them
24:05 - for holding a space in your in
your query. So if I click go,
24:11 - the query works just like it did
before. If I had something like
24:14 - album collection as my name for
the table, I would have to put
24:20 - in those backticks as you see it
here. But for right now, we
24:23 - don't need them. So I'm just
going to back out to where I was
24:26 - before.
24:29 - Alright, let's do another go
just to make sure that it's
24:31 - still working. Okay, so I have
three albums. Now, what if I
24:35 - only care about retrieving a
certain pieces of these data? So
24:39 - for instance, if I wanted to
know the album title, and I
24:42 - cared about the year, just those
two, for some reason, that's
24:47 - what my application needed. So
instead of the star, I would
24:50 - erase that and change it to
something else. So if I type in
24:53 - something like an A, you're
going to see that there are
24:57 - suggestions here so album title
is what I want to select
25:00 - I'm going to put a comma, and
what was the other I wanted to
25:02 - year. So I'm going to put in the
word year. And those two column
25:06 - names show up from the results
down here. Let's see if that
25:10 - works. And I choose go. And the
results now indicate that I'm
25:14 - only getting two columns in my
response. So if I'm ignoring
25:17 - everything else in my database,
I can do specific searches using
25:22 - the column names. Let's say I
want to rename the search
25:25 - results. For some reason I can
say album title as the word
25:29 - title. And year as let's make it
up about date of publish. You
25:35 - can use any name you want,
really, let's choose go. And
25:38 - let's see what that does at the
bottom. So now you can see that
25:41 - the titles of the results now
are renamed. So title and date
25:46 - of publish are the exact same
column names, it's just that
25:49 - I've renamed them. That is
something that people do
25:52 - frequently when they have to,
for some reason, match up a
25:57 - property in their application to
a column name in a database. And
26:02 - so here's a couple of examples
that we've done. So let me
26:05 - summarize what I'll do on the
screen here of all of the
26:07 - queries that you just wrote. So
first of all, we did just a
26:10 - standard query where we selected
everything, then we did a query
26:14 - where there is a greater than or
less than sign, then we did a
26:17 - query with likes, and we
indicated that we had to have
26:21 - wildcard characters before and
after a string. If we want to
26:25 - get accurate results for the
likes. Then we wanted to be able
26:29 - to select certain column names.
And so the column names are
26:33 - specified instead of the star.
So star gives you all columns in
26:37 - a table. And you can specify
just a few columns if you need
26:40 - to, and ignore the rest. And
then finally, we have some
26:44 - searches where we rename the
column results where we say,
26:48 - rename the title as title, and
the year as date of publish. So
26:54 - those are some of the things
that you can do with SQL. Now
26:57 - there's a lot more things to do
with the SQL searches, but I
27:00 - will leave those for another
exercise. In the meantime, we're
27:03 - anxious to get this thing
working in our application. So
27:06 - in the next video, we're going
to create an app that will
27:09 - display the search results that
we've done here, and put them on
27:12 - a form in a Windows app. So
let's get started with building
27:16 - that app. Next. If you would
like to look at the full series
27:20 - of this thing, you can either
subscribe to the channel that
27:24 - you're looking at now on
YouTube, or you can see the more
27:26 - extensive version on steady
coding.org, which is another
27:30 - website.
27:43 - Hi, and this second video of a
series, we're going to continue
27:47 - to explore building a SQL
database application. Here's the
27:51 - index of all of the things we're
going to learn. In the first
27:54 - video, we work through creating
our first database. In this
27:57 - video, we're going to start to
write some queries using the SQL
28:01 - language. In the future, we're
going to talk about the front
28:04 - end, connecting our database to
that front end, doing some
28:08 - searches inserting records,
creating foreign keys, joining
28:12 - tables together, creating what's
called UML diagrams, making
28:16 - compound queries or multiple
queries in one step, we're going
28:21 - to delete items from the
database. And then finally, at
28:24 - the very end of this course,
we're talking about features
28:27 - that we didn't get to, but you
could probably explore. So this
28:31 - whole series here is available,
not only here where you're
28:34 - watching, but also on study
coding.org, which is my channel
28:38 - where I create applications. My
name is shad Sluiter, and I
28:42 - welcome you to come to class
with me virtually even where you
28:45 - can become a professional
software developer. So this
28:49 - course that we're covering right
now is focusing on databases.
28:53 - But as you can see from the
selections on steady coding.org,
28:56 - that you can learn C sharp
programming for websites or Java
29:01 - or no JS, JavaScript and other
languages. So many of my
29:06 - students have become
professional software developers
29:08 - and have great jobs. And I'd
like the same thing to happen
29:11 - for you. So come along, and join
us in class and plan your
29:16 - future. So just as a reminder,
where we're going with this
29:19 - application, this is the final
product. And as you can see, we
29:23 - have a list of albums at the top
of the page. And then we have a
29:27 - list of music or tracks at the
bottom, and then a YouTube
29:30 - player so that we can hear the
music. So in the past video, we
29:34 - created the database that goes
behind this top control, which
29:38 - is a grid. And we're going to
work on some queries this video
29:42 - where we can select items based
on what's in the database. So
29:47 - searching for specific titles,
selecting specific columns of
29:51 - this table, and then eventually
we're going to come and create
29:54 - this application that you see
and display the data on the
29:58 - front end you might call it or
on
30:00 - In the form of the application,
so let's go take a look at where
30:03 - we were. And then we're going to
get closer to the vision that
30:07 - you see here on the screen. So
as a reminder, we built our
30:10 - application using this tool here
MAMP, which includes MySQL as
30:15 - its database. So I've got the
two little green dots here
30:19 - indicating that the application
is running and the database is
30:23 - being served. Now, I'm going to
click this button here that says
30:26 - open start page. So here's the
start page. As you can see, the
30:29 - address is localhost MAMP. I'm
going to the tools menu and
30:32 - choosing my admin. And I'm going
to take a look at the database
30:36 - here. So music two is what we
created in the last video. And
30:40 - so far, we have an albums item.
So you can see on the screen now
30:43 - that I have several items that I
imported in the last video, so I
30:47 - have a bunch of albums from The
Beatles. So I have the title,
30:51 - the artists, the year, the image
name and the description, both
30:54 - of those items at the end are
taken directly from Wikipedia.
30:59 - So in this video, we're going to
practice doing some selections.
31:02 - And then in the next we're going
to do some programming actually
31:06 - in the form. So let's go to the
part that says SQL. And we're
31:09 - going to learn how some SQL
queries work. So as you can see,
31:13 - there is automatically some code
written for us, which is very
31:17 - helpful. Let me zoom in a little
bit. So we can see very well on
31:21 - the video. There we go. So
select star, it says from albums
31:25 - were one. So let's make this
even simpler, I'm going to take
31:29 - out the where collection, and
just say this statement, select
31:33 - star from albums. And let's
click go and see what that does.
31:36 - So what this is telling us is
select everything that there is
31:41 - in the albums table. And you can
see that the list here includes
31:45 - all of the items. Now we're
going to do a little bit more
31:48 - sophisticated searches than
that. So let's focus in on this
31:52 - last part where it says where so
where is going to be a
31:55 - condition. So we can say some
name like ID, and then I'm going
32:00 - to put in an equal sign and then
specify a specific number. So
32:05 - let's try three. So I just
happen to remember that the
32:08 - first album in my table is ID
three. So if I click on go,
32:13 - we're going to see exactly one
result, because album three here
32:17 - is Abbey Road. So let's try a
different search. So I'm going
32:20 - to say where ID equals something
else. So I'm going to put in 17.
32:24 - I believe 17 is one of my
albums. So let's click go. And
32:28 - sure enough, it looks like Hard
Day's Night in my collection is
32:31 - number 17. So that is one way to
do a SQL statement. Now let's do
32:36 - another word, we can have a
condition to say something like
32:39 - I'm going to look for where ID
is anything greater than 10. And
32:44 - let's choose a go. And this
time, you can see that I have
32:48 - two items, I have 16 and 17,
which are bigger than 10. You
32:52 - can experiment with others,
let's try something like a less
32:55 - than sign. So let's say if I say
ID is less than 10. And what
33:00 - comes out now, so we've got
ourselves four of them. So 34567
33:06 - Are the results here. So you can
see that the SQL statements are
33:09 - able to select items based on a
condition. All right, so now
33:13 - we're going to do another query.
And this time, I'm going to
33:16 - search in the title of the
album. So let's see if we can
33:20 - find anything that has the
letter A in the album title. So
33:24 - this will hopefully find things
like Abbey Road. So the way we
33:28 - do this is we put in the word
album title after the word where
33:32 - so where album title. Now
instead of an equal sign, I'm
33:36 - using a like operator. So like
says we're going to match a
33:40 - partial match. And so I want to
match something that is like the
33:44 - letter A. Let's see if this does
anything. Now before I click the
33:48 - Go button, I'm going to make
sure that this box down here
33:51 - called retain query box has a
checkmark that will allow me to
33:55 - come back and modify this
without retyping the entire
33:58 - mess. So let's go ahead and
choose go and I am disappointed.
34:04 - The results down below says it
returned an empty set. So
34:07 - nothing like a. So what is
missing here is the ability to
34:11 - search for wildcards. So I'm
going to put in a percent sign
34:15 - before the a and a percent sign
for the after, which means find
34:19 - a somewhere in the middle of the
word. Let's see if that does any
34:23 - better. So I click go. So let's
look at the results down below.
34:26 - And you can see that there are
three results. It says here
34:29 - Abbey Road, Yellow Submarine and
Hard Day's Night are all
34:32 - matched. And so this here is a
like statement that gives us a
34:36 - result. So the percent sign and
the Like operator are both
34:40 - important. Now a couple other
things that we're going to
34:42 - notice here is these backticks.
So how do you type those if
34:45 - you're working in here
application because we're going
34:49 - to be copying and pasting these
search queries into our Visual
34:53 - Studio application. These are
actually optional, so I'm going
34:57 - to delete the backticks they're
only used
35:00 - sequel is if you need them for
holding a space in your in your
35:05 - query. So if I click go, the
query works just like it did
35:08 - before. If I had something like
album collection as my name for
35:13 - the table, I would have to put
in those backticks as you see it
35:17 - here. But for right now, we
don't need them. So I'm just
35:20 - going to back out to where I was
before.
35:25 - All right, let's do another go
just to make sure that it's
35:27 - still working. Okay, so I have
three albums. Now, what if I
35:31 - only care about retrieving a
certain pieces of these data. So
35:35 - for instance, if I wanted to
know the album title, and I
35:38 - cared about the year, just those
two, for some reason, that's
35:42 - what my application needed. So
instead of the star, I would
35:46 - erase that and change it to
something else. So if I type in
35:49 - something like an A, you're
going to see that there are
35:53 - suggestions here. So album title
is what I want to select, I'm
35:56 - going to put a comma, and what
was the other I wanted a year.
35:58 - So I'm going to put in the word
year. And those two column names
36:03 - show up from the results down
here. Let's see if that works.
36:06 - And I choose go. And the results
now indicate that I'm only
36:10 - getting two columns in my
response. So if I'm ignoring
36:13 - everything else in my database,
I can do specific searches,
36:17 - using the column names. Let's
say I want to rename the search
36:21 - results. For some reason I can
say album title as the word
36:25 - title. And year as let's make it
up, how about date of publish,
36:31 - you can use any name you want,
really, let's choose go. And
36:34 - let's see what that does at the
bottom. So now you can see that
36:37 - the titles of the results now
are renamed. So title and date
36:42 - of publish are the exact same
column names, it's just that
36:45 - I've renamed them. That is
something that people do
36:48 - frequently when they have to,
for some reason, match up a
36:53 - property in their application to
a column name in a database. And
36:58 - so here's a couple of examples
that we've done. So let me
37:01 - summarize what I'll do on the
screen here of all of the
37:03 - queries that you just wrote. So
first of all, we did just a
37:06 - standard query where we selected
everything, then we did a query
37:10 - where there is a greater than or
less than sign, then we did a
37:13 - query with likes, and we
indicated that we had to have
37:17 - wildcard characters before and
after a string. If we want to
37:21 - get accurate results for the
likes. Then we wanted to be able
37:25 - to select certain column names.
And so the column names are
37:29 - specified instead of the star.
So star gives you all columns in
37:33 - a table. And you can specify
just a few columns if you need
37:36 - to, and ignore the rest. And
then finally, we have some
37:40 - searches where we rename the
column results where we say,
37:44 - rename the title as title, and
the year as date of publish. So
37:50 - those are some of the things
that you can do with SQL. Now
37:53 - there's a lot more things to do
with the SQL searches, but I
37:56 - will leave those for another
exercise. In the meantime, we're
37:59 - anxious to get this thing
working in our application. So
38:02 - in the next video, we're going
to create an app that will
38:05 - display the search results that
we've done here, and put them on
38:08 - a form in a Windows app. So
let's get started with building
38:12 - that app. Next, if you would
like to look at the full series
38:16 - of this thing, you can either
subscribe to the channel that
38:20 - you're looking at now on
YouTube, or you can see the more
38:22 - extensive version on steady
coding.org, which is another
38:26 - website.
38:40 - Hi, and welcome to another video
in this project here with our
38:43 - SQL database application. In
this index, we're showing all of
38:47 - the things that we're doing in
this course, in the first two
38:50 - videos, we created a database,
and then we ran some queries. In
38:54 - this video, we're going to
create the front end. So we're
38:57 - going to actually start creating
an application in Visual Studio,
39:01 - that will be able to display the
results of any queries that we
39:04 - do against our database. In the
future, we're going to have
39:07 - these topics after we finish all
of that they'll still be more
39:10 - left unsaid. So there'll be
future plans that you can
39:14 - implement. So my name is shad
slaughter, and I teach software
39:17 - development at Grand Canyon
University in Phoenix, Arizona.
39:21 - And so I'm glad that you're
here, you're going to become a
39:24 - professional software developer
if you're able to do these kinds
39:27 - of tasks. So my website is study
coding.org, where you'll find
39:31 - all of the courses that I've
taught over the past years. So
39:34 - not only with web development
and databases, but with mobile
39:38 - applications and security and
other issues. So check it out.
39:42 - And if you'd like anything
there, you can join for a small
39:45 - fee, and you get the source
code. So let's take a peek at
39:48 - the application as it is in its
finished state. So you can see
39:51 - that we have tables that are
being searched and then we're
39:54 - playing some music. So these are
all albums that are from the
39:57 - Beatles and then tracks on
40:00 - Each of those albums and then a
player here, so we can see a
40:03 - YouTube video. Now what we're
going to do and this video is
40:06 - we're going to focus in on this
section up here where we're able
40:08 - to display the albums and do
searches against them. So in the
40:13 - previous video, we set up the
database. Now we're going to
40:16 - create the application that does
the front end. Alright, so now
40:19 - let's talk about the different
ways that people use
40:22 - applications when they are
talking to databases. The app
40:26 - that we're going to build here
is a very simple app. And that's
40:29 - why I chose this desktop app to
do it, it doesn't take much
40:33 - effort to learn how to do this
front end. However, if you want
40:37 - to become a professional
software developer, you should
40:39 - probably learn how to create web
applications. Now I have
40:43 - tutorials for how to do that in
different languages. So C sharp
40:47 - is a very popular choice for
creating web apps. And so the
40:51 - key word that you're looking for
is asp.net. And that is the
40:56 - framework that Microsoft uses to
connect websites to databases
41:01 - and create a fully functional
web page that is an application.
41:05 - An even more popular way to
create websites with a common
41:08 - language is Java. So Spring Boot
is the key word that you should
41:12 - be looking for when you're
looking for frameworks on how to
41:14 - build websites with Java. And of
course, I have a tutorial for
41:18 - how to build a java web
application. Another very
41:21 - popular choice for building
websites is using the language
41:24 - php. And as a matter of fact,
the application that you see in
41:29 - this tutorial is MAMP, which
includes PHP as its default
41:33 - language interpreter. And so PHP
is also available on steady
41:38 - coding.org. If you want to learn
how to build websites with that
41:41 - language. Also, you can work
with pure JavaScript, if you
41:44 - work with the Express framework
on Node js, you can build a
41:48 - website in the same manner that
other websites are built in
41:52 - other frameworks. So there's
lots of different choices that
41:55 - you can pick from to build a
website. Why are we then not
41:58 - building a website, you might
ask, because this class is
42:01 - focused in on SQL and the
databases that go with it. So
42:06 - it's very simple to build the
application that we're about to
42:09 - right now. But if you want to be
more advanced, if you want to be
42:12 - more employable, then you should
probably take some of the other
42:15 - courses that I offer, or others
do, on how to build websites and
42:19 - connect them to databases like
MySQL. Anyway, we're trying to
42:23 - build this app. So what we have
on the screen is our final
42:26 - product, and we're going to
implement just the first part
42:29 - here. And let's get started. So
as you can see, I have the
42:33 - database still running in the
background here. So I actually
42:36 - don't need that right now. So
I'm going to just push that off
42:37 - on to my other desktop. Okay, so
let's get started with Visual
42:41 - Studio, you can see that I have
two versions installed on my
42:43 - computer, I have 2022 and 2019.
So honestly, 2019 works a little
42:50 - bit faster on my old computer.
But since we're in 2022, we
42:54 - might as well get with the times
and show you this bigger,
42:58 - heavier version that is going to
have all the features we need.
43:01 - So here it is. This is the
startup screen to say what kind
43:04 - of projects would you like to
open or build. So I'm going to
43:07 - select the item that says create
a new project. And I'm going to
43:10 - make sure that I select the
right places. So the templates
43:14 - up here you can search for or
you can filter them using these
43:18 - choices. So I want to do C sharp
Windows app and a desktop, then
43:22 - I'm going to go down and pick
one of these two options. Now,
43:26 - Microsoft is really good at
confusing people about which one
43:30 - is which, what is the difference
between a Windows Forms app and
43:33 - a Windows Forms app with dotnet
framework? Well, in the in the
43:37 - description, this one says it
uses dotnet framework, these two
43:40 - things are different even though
they have very confusing and
43:43 - similar language. So I believe
the choice that I made for this
43:47 - one to get the most current is
the first item that says Windows
43:50 - Form app. And dotnet framework
below is not the choice that is
43:54 - for an older version. So let's
play try next and see what
43:58 - happens. So now we need to
create this with some kind of a
44:00 - name. So I'm going to say this
is a database SQL music app. And
44:05 - I'm going to leave the other
choices the same you can see the
44:07 - location where I'm putting this
is on my desktop. And let's
44:11 - choose Next. Now I know that
I've chosen the correct
44:13 - application type because of the
next screen. So the framework
44:17 - that pops up next is VS version
6.0 of dotnet. So it says long
44:22 - term support. So at the time of
this video here in 2022. This is
44:26 - the most current version that I
can add program. If you pick
44:29 - something that's older than
this, frankly, it will work just
44:32 - just as well probably. But six
Dotto is what we've got right
44:36 - now. And if you're from the
future, this will probably still
44:39 - continue to work very similar.
So I'm not doing anything that
44:42 - is cutting edge with the dotnet
framework. So I'm picking the
44:46 - current one just because that's
a good practice. OK, let's
44:49 - create it and then give it a
minute to build everything. All
44:53 - right, everything came out. So
we have form one here. And I'm
44:56 - just going to click the green
button at the top that says make
44:58 - this application run
45:00 - I just want to test it out to
make sure everything's good. And
45:02 - I should see an app on the
screen. So sure enough, here
45:04 - comes form one. And I could
Minimize Visual Studio in the
45:07 - background. So that way, I have
my beautiful blank app to look
45:10 - at on the beautiful background.
Now I'm going to put two things
45:14 - on this screen to get started
with. And then we're going to
45:16 - start connecting our application
to the database. So the two
45:20 - things that I'm going to put on
here, our button, and then some
45:23 - kind of a data grid that I can
use to display a bunch of pieces
45:27 - of data. So the button we're
going to drag in from our common
45:30 - controls area. And I'm going to
change the text of the button so
45:34 - that it says load albums. So at
least the user knows what that
45:38 - button is supposed to do. Let's
make it a little bit wider, so
45:41 - it all fits. And the second item
that I'm looking for is in the
45:44 - data controls area. So I
searched for something called
45:48 - the data grid view. And the data
grid view is really why we're
45:52 - building this app in Windows
Forms because it requires no
45:57 - configuration, almost none
anyway, so it'll be able to
45:59 - display data from the database.
And of course, I need to make
46:02 - this wider, I've got kind of a
poor user interface design. When
46:06 - we're finished here, we're going
to have a whole bunch of stuff
46:08 - on one screen, which is very
easy to program. But really, if
46:12 - I were teaching this as a user
interface class and a user
46:16 - experience, I would have
multiple forms. But remember,
46:19 - the focus on this course is on
SQL and how to make the database
46:23 - work. So that's why our app is
going to look kind of busy on
46:26 - the on the main form. So I got
this thing here with it with a
46:30 - form and it has a button and a
grid control. Next, I'm going to
46:34 - have an album class. So this is
a data class in object oriented
46:39 - programming that will connect
our properties in the in the in
46:43 - the class with the column names
in our database table. Now I'm
46:48 - recalling all of the things that
I put into the database. As I
46:50 - create this album class, each
property here is going to
46:54 - represent a string or an integer
or something like that, some
46:58 - data type that is in an album.
So the first thing that each
47:01 - album has is an ID number. So I
type in PR O P, and then press
47:06 - TAB TAB to get the property of
an integer. The first thing is
47:10 - called ID. The second property
is the album's name. So you
47:16 - could call it album title, you
can call it album name, I'm
47:19 - going to purposely not name this
the same thing as my database.
47:23 - Because I want to make sure that
we we, we handle certain
47:28 - exceptions or certain cases,
when there's discrepancies
47:31 - between a class name and a table
name. Generally, people like to
47:34 - keep them the same, but I'm
purposely making them different
47:37 - here, just to highlight some
things. Then we go on, we're
47:40 - going to have the artists name.
So in my case, it's always the
47:43 - Beatles. And then the next one
is a year. So an integer value
47:46 - for the year comes up, we're
going to make an image URL. So
47:50 - this is the title image of the
album. So this is not the URL
47:54 - for the song The the YouTube
song yet, this is just an image
47:59 - of what we got a Wikipedia and
also from Wikipedia, we grabbed
48:03 - the first paragraph, which is
the description. So that also
48:06 - matches as a string type. So
I've got a bunch of properties
48:09 - here that are corresponding to
the table that we made in the
48:13 - previous video, all of these
things about an album. Now I
48:17 - know that later, I'm going to
add some songs to the album. But
48:21 - I want to keep this simple for
this video. So I'm just going to
48:23 - leave comments now to say that
coming soon, is a list of type
48:28 - track. And this list of tracks
will be associated with the
48:32 - album. But right now, we're just
going to put it in comments
48:35 - because we're doing one thing at
a time. Okay, so we got
48:39 - ourselves a bunch of properties.
Now I'm going to make some data
48:43 - and put it into our form. And
we'll connect to the database in
48:47 - a while. But for right now, I
just want to create some dummy
48:49 - data that will make sure that
this grid has something to look
48:53 - at. Now I want to handle all of
the database operations in
48:57 - another class. And it will be
the kind of the interface
49:01 - between the app and the table.
So I'm going to call this thing
49:05 - albums. Dao. So Dao is a
shortcut for data access object,
49:11 - its job is to be able to do all
the queries. And then it'll
49:15 - provide a layer between these,
the front end and the back end.
49:20 - So just to make sure that we
keep these things, kind of
49:23 - simple. In each video, I'm going
to first of all construct this
49:26 - thing without connecting to the
database itself. I'm going to
49:29 - create some dummy data, and then
we'll display it in the grid. So
49:33 - we're not going to keep this
code here for very long. It's
49:37 - just a test. I'm going to type
the word list and an open
49:41 - bracket. And one of the nice
features that you get of Visual
49:45 - Studio 2022 is the type of head
help and it predicted correctly
49:49 - that I wanted to make a list
called albums. It's a list of
49:53 - type album. What it did not
predict was that I wanted to
49:56 - initialize the list so it has
some list value in it. There's
49:59 - not an end
50:00 - D list, it's not a no list, it's
got. It's got values. So it's a,
50:03 - it's a list of zero values, but
it still is defined. Alright, so
50:07 - this is just a placeholder right
now we're just going to create
50:09 - an empty list. Now let's go into
form one. And let's create some
50:13 - events that will fill this list
with some fake data. So I'm
50:17 - going to switch over to form one
design. And I'm going to double
50:21 - click on the load albums. And so
now we have an event for this
50:24 - button, click so button, click
one.
50:28 - Now, this is going to be
temporary code. We'll delete it
50:30 - in a few minutes, but we're just
going to test it out. So I'm
50:33 - going to add the albums Dao
class and initialize it with a
50:37 - new instance of this class. So
when we click the button, it'll
50:41 - create a brand new list from
scratch every time we click it.
50:44 - Now, as soon as I have the list
created, I'm going to start
50:46 - filling it with some data. So
let's create a new album. I'll
50:50 - name this thing as an album of a
one. And after we create the new
50:54 - album, let's fill it with some
properties. So the first item
50:57 - that we're up to is ID. So Id
one sounds good to me, let's
51:01 - take the album name to be my
first album. And I might also be
51:04 - the artist. So put my own name
in there, the year is 2022.
51:09 - Let's put in an image URL of
nothing yet, I guess I don't
51:13 - know what URL I want for the
picture.
51:16 - For the description, let's put
in nothing special. So now we
51:19 - have a one. And we might also
make this have two albums since
51:23 - it is a list. So I'll copy and
paste album one, and I'll name
51:26 - the second one is a two and
change the first name. So it is
51:30 - my second album.
51:33 - Now what I'd like to do is add
the first song to my albums Dao.
51:36 - So I'm going to try that, but
I'm going to come up with a
51:39 - problem. So it says, albums Dao
dot albums. Now there's a list
51:44 - of albums in there, but I can't
see it for some reason. But it
51:47 - allows me to continue ahead
typing and add a one. So why
51:51 - can't I actually add something
that album's a one, let's see,
51:55 - it says in my problem help, it
says it's inaccessible due to
52:01 - its protection level. So means I
probably made it private. And I
52:04 - could turn it public so that I
could actually do the thing that
52:07 - I'm trying to do now. So let's
go back to the album's Dao. And
52:11 - sure enough, let's go here and
change this to public. And we'll
52:14 - save it.
52:15 - And now what happens when I come
back to my form one, so the
52:19 - error goes away, looks like that
was the problem. And we've
52:22 - solved it.
52:24 - Now very helpful, I go to the
next line, and I type in an A,
52:27 - and I get some type of head
help. And it guesses that I want
52:30 - to add the second album to the
list. Okay, great. So all of
52:33 - that work was to simply add two
albums to our list of data. Now,
52:38 - I want to associate this list
with the control that's on the
52:42 - screen. Now one of the tricky
parts about building an
52:45 - application with C sharp and
Windows Forms is called a
52:49 - binding source. So binding
source is the ability to connect
52:53 - a list of items such as albums,
to the control, so the grid
52:57 - control. And so I'm just going
to define this here. And you're
53:00 - going to kind of follow along to
see how the format works. So
53:04 - binding source is the class name
that is allowed to connect these
53:08 - two. And I'm going to let the
type ahead helped me to call it
53:11 - a new binding source. Now I'm
going to rename the binding
53:14 - source because I'm going to
specifically have one for the
53:17 - album's and another one later
for the tracks. So I'm going to
53:21 - name this one as the album
binding source. So to make that
53:25 - work, or make that binding
source work, we're going down to
53:28 - the click button action. And so
after I've added a couple of
53:32 - albums, I'm going to create a
connection between the lists and
53:37 - the grid view. So this is where
the binding source comes in. So
53:40 - I'm going to define this thing
as the album binding source dot
53:44 - and get a property called data
source. And I'm going to set
53:48 - that equal to be the list that I
made. So it is the album's Dao.
53:53 - And it's not as smart as I
thought, I have to add a dot and
53:57 - tell it that the list is called
albums. So putting these two
54:01 - together should allow the grid
source to show these two new
54:05 - albums. Now there's one more
final step that we have to do,
54:08 - we have to tell the grid view
that this binding source is
54:11 - associated with it. So I type in
group data grid view, one dot,
54:17 - and it has a property called
datasource. And so
54:20 - programmatically, we're setting
it up to be equal to this list.
54:23 - Okay, so now all of this
connection should be done
54:26 - correctly. At least I think it
is. Let's try it. I'm going to
54:28 - run the app. So I click the
little green triangle at the
54:31 - top. And let's see what happens.
So I've got the app. Let's see,
54:35 - I'll minimize the rest of this.
So it's kind of out of the way.
54:38 - And what is Cortana get out of
the way. Okay, so here we go.
54:42 - Now I'm going to choose Load
albums, and look at there. So
54:45 - the binding source of these two
albums now displays all of the
54:51 - squares in like a spreadsheet
grid. So that's the magic of
54:55 - this control. It automatically
creates the number of columns it
54:57 - needs, and if these get
55:00 - To be too long, it allows it
puts in scroll bars. And so this
55:04 - is easier to do than if you're
trying to create some kind of a
55:06 - web page. Most of this binding
source and data source does the
55:11 - work for you. All right. So that
is not exactly what we want. We
55:14 - have a couple of albums, they're
nice albums, but they're not the
55:17 - real ones. What I want to do is
get all those Beatles albums
55:21 - that are in the database. And so
we have still not connected our
55:25 - database to the control.
Although you can see we are
55:28 - almost there. So in the next
video, we're going to do that
55:32 - we're going to set up a
connection between the SQL
55:34 - Server and the app that you see
here. And then we'll get the
55:38 - data live from the database. So
let's take a look at the index
55:42 - of where we've been. So you can
see that we're on part three,
55:46 - which is building a front end.
So the front end is got some
55:49 - pieces to it, it's not complete,
but at least we can see where
55:52 - we're going. What's next. Next
is to connect that app that we
55:56 - just started and connect it to
the database. So we're not using
56:00 - fake data anymore. We're getting
the actual albums from The
56:03 - Beatles. And so that will be the
next task that we do. So we're
56:07 - on Part Four coming up.
56:27 - Hi, welcome back to another SQL
application tutorial. So we're
56:31 - in an application series, which
is about building applications
56:35 - using MySQL. We did Part Three
already. And now we're moving on
56:39 - to part four. So in the previous
videos, we've created some
56:42 - tables. And now we're about
ready to connect those databases
56:46 - to the front end of our
application. So the other parts
56:50 - that are coming up are going to
help us do searches and to make
56:53 - more complex queries. And
eventually, we're going to get
56:56 - to the point where we have a
fully functioning app. So if
56:59 - this is interesting to you, then
let's keep right on going. My
57:02 - name is shad Sluiter, and I
teach software development and
57:05 - computer science at Grand Canyon
University. So many of my
57:09 - students are using these
tutorials to become professional
57:11 - software developers. So
congratulations on choosing a
57:15 - good path for a good job, I hope
you have a great future. Now
57:19 - here is the application where we
left it from the last video
57:22 - where we had a simple set of
fake data, we had two albums in
57:27 - our data access object. And they
really don't relate to the
57:30 - database yet, however, they look
like the albums that we put into
57:33 - the database. So we're getting
closer. So by the time you're
57:36 - done here, you're going to see
the application show all of the
57:39 - Beatles albums on the screen
instead of these two fakie.
57:43 - Alright, so let's go modify this
data access object and make it
57:45 - work like it's supposed to. So
we're going to delete all the
57:48 - junk that was already in our
Dao, and we're going to add some
57:51 - new things. So in this first
step, we have to make a
57:55 - connection to our database. So
every database has a user name
57:59 - and password authentication or
some kind of a way to make sure
58:02 - that the right people are
looking at the database. And so
58:05 - ours is going to be very simple
to start with. The first
58:08 - property that we put in is
called the data source. So the
58:11 - data source is where does the
server live. Now if we were on
58:15 - the internet, we would put in
some kind of an IP address, or
58:18 - we would put in Amazon aws.com,
or some detailed long name for a
58:23 - server. Since local host is
here, that means we're talking
58:27 - to the MAMP server. So remember,
we have this map server running
58:31 - here. And this thing is running
on localhost. So we're, we're
58:36 - essentially doubling up our
computer to do two things. One
58:39 - is the application, and the
other is the database server. In
58:43 - the real life. Sometimes these
are divided into separate
58:46 - machines. But anyway, we're
using localhost for now. Next,
58:50 - we need to specify something
called a port. So let's bring in
58:53 - the map server again and check
out to see where this might be.
58:55 - So let's go to MAMP. And choose
Preferences. And let's see what
58:59 - else we can do. It says a bunch
of stuff about PHP, what I'm
59:04 - interested in is ports. So in
this tab, here, we can see that
59:07 - there are ports. So 80 is
currently the the setting for my
59:11 - web server. And then 3306 is the
port for our SQL database. So
59:17 - ports are just numbers that
computers agree to communicate
59:22 - on like it's like a channel.
It's like on your TV when you
59:24 - have channel 15.1 and 15.2. It's
like they're the dot part is the
59:30 - sub channel or it's the port
number for a major channel. So
59:34 - our port number here is 3306.
Now we need to specify how to
59:39 - log in to this server. So user
name and password is what we
59:43 - need to provide. Now I know that
the username and password for my
59:47 - particular MAMP installation is
root and the password is root.
59:51 - If you're using USB web server
or wham you might have something
59:54 - slightly different so check the
help files or the installation
59:58 - guide. If this does
60:00 - and work for you. So root and
root works for MAMP. The last
60:04 - item on the list is telling it
which database it needs to
60:06 - connect to. And as you might
recall, the name is music two.
60:11 - So just bringing up music two is
right here, just refreshing our
60:15 - memory of what we have for data.
Now, the way a data access
60:20 - object works is you create a
bunch of methods that are going
60:22 - to perform actions for the main
program. So the first action
60:26 - that I'm going to create is one
that will get all of the albums
60:29 - from the database. So the return
type of this function is called
60:34 - a list of type album. And then
appropriate name for this would
60:39 - be Git or fetch or search for
all. So I'm going to name it as
60:43 - get all albums, because I think
that's the most clear. Now to
60:48 - make this work, I'm going to
start by creating an empty list
60:51 - of albums. And then I'm going to
return that list at the end of
60:54 - the function. So I'm going to
rename the list as return these.
60:59 - So the next step is we're going
to create a connection. So I'm
61:03 - going to type in something that
will not work at the first it's
61:06 - called My SQL connection. And
it's a new class. So I will
61:11 - create a new class and one
parameter in it is the
61:14 - connection string. Now, why
doesn't it work? Well, by
61:17 - default, Microsoft expects you
to be talking to a SQL Server,
61:21 - that's their version of SQL. But
we built this thing with MySQL,
61:26 - so we have to go get a extra
piece of software called the
61:29 - dependency to make this work. So
let's see if the computer is
61:33 - able to help us out in our
problem. So I'm going to hover
61:36 - here, and it says, I have no
idea what you're talking about
61:39 - my SQL connection doesn't exist
in my list of known classes.
61:44 - Let's see if there are potential
fixes. So the first few fixes
61:47 - are, you can generate this and
create your own. However, you
61:51 - can see that there is a MySQL
dot data or data, different
61:56 - dependency. So let's go ahead
and choose this. And it says I'm
61:59 - going to install this. So how is
it going to do that, let's go
62:03 - ahead and choose Find the latest
version and install it. Now I'm
62:07 - going to just sit and watch and
magically, something will
62:10 - happen. And the problem
disappeared. Where did the
62:14 - problem get resolved? Let's take
a look at how that is resolved.
62:18 - So you can see that the error is
gone. What I'm going to do is
62:21 - right click on the project, go
down to New get packages. So
62:25 - manage nougat packages, is the
dependency manager in SQL. And
62:31 - you can see that it says here
I'm looking at installed
62:34 - packages. And my sequel, that
data is already been installed.
62:38 - And it comes from the Oracle
Corporation. Now, Oracle
62:42 - actually owns MySQL, they paid
quite a bit of money for it. And
62:46 - I guess owning free software is
maybe a status symbol, do they
62:50 - actually make any money on
MySQL, they must somehow I'm not
62:53 - quite sure how they do it. But
anyway, they are the owners of
62:56 - MySQL, and they manage this
extra dependency that allows us
63:00 - to connect using their classes
here. So apparently, it's
63:05 - working, I'm going to close the
nougat Package Manager. Now the
63:09 - next step that we're going to do
is we're going to create an open
63:12 - connection. So I'm going to type
in my connection and type dot
63:16 - open. And that will log in to
the server. Now there's going to
63:21 - be a whole bunch of more stuff
coming up here, we're going to
63:23 - do a SQL statement, and then
we're going to execute it. But I
63:26 - want to first check to make sure
that everything is connecting
63:29 - properly. So I'm going to skip
some lines and then just type
63:33 - return, and then the list called
return these. So right now it's
63:38 - still an empty list, but it will
not be an empty list for very
63:40 - long. Now I want to make sure
that I can test this out. So I'm
63:43 - going back to form one in the
code here. And I'm going to
63:47 - start removing all of the junk
that we put in earlier. So I'm
63:51 - going to delete the majority of
the junk that we put in earlier
63:54 - and just leave this binding
source as the item. So I'm going
63:57 - to create a new instance of the
album's data access object. So
64:01 - we'll do albums Dao equals a new
albums Dao. Now, I want to
64:06 - associate the datasource of this
grid with the event called get
64:11 - all albums. So I'm going to just
erase the one piece of code here
64:16 - at the end of the write and
change it to get all albums. Now
64:19 - remember, get all Elbaz is still
returning an empty list, but it
64:23 - will try to connect to the
server let's let's just run this
64:26 - and see if there are any errors.
Okay, the application is up and
64:29 - running. Let's go ahead and
choose get all albums. And it
64:33 - returned an empty list you can
see it must have curl must have
64:37 - connected correctly. Let's let's
try to break that and see if
64:40 - there's a problem that we can
resolve later. So I'm going to
64:44 - go in and change something. So
local host I could change any
64:48 - one of these details so
localhost exe, or I could put in
64:51 - the wrong port number or I could
put in the wrong username. Any
64:54 - one of those will cause this to
break. So I'm going to put an X
64:57 - in for the server name and then
try it again.
65:00 - So now when I choose Load I
albums, what happens?
65:04 - There, I finally get an error,
something's coming up here and
65:07 - what is it?
65:09 - It says no such host is known.
So you may have gotten a
65:13 - different error based on whether
you change the password or the
65:16 - port number. But this is telling
me that the open connection did
65:21 - not work. And so the program
stopped. So that's one way to
65:25 - test to see if you got the right
connection string or not. All
65:28 - right, let's fix that. So I want
it to actually work. Now we're
65:31 - going to finish off with this
get all albums. So the next item
65:34 - down is we're going to write the
SQL statement. So I'm going to
65:38 - create a new, a new instance of
an object called a my SQL
65:42 - command. So I'll name it is
command. The values that we're
65:46 - going to create when we do the
instantiation is two parts.
65:50 - First is the string, which is
the actual SQL statement. So
65:54 - we're going to say select star
from the albums table. And then
65:59 - we have to provide a comma and
then the connection that we
66:02 - defined earlier. Next, we're
going to use a USING statement.
66:06 - So there's USING statement, it's
kind of like a while loop, it
66:08 - says use this object, and then
when it's done with a loop, then
66:13 - destroy the object. So what I
want to do is create something
66:16 - called a MySQL data reader. And
this reader will be the result
66:21 - of executing the command that we
defined up on line 25. So this
66:25 - reader then can be used in a
loop to be able to fetch each
66:27 - line. Now we're going to go
through each column in the data
66:32 - table. And we're going to
associate it with a new property
66:36 - in a class. So we're going to
make a new album, I'll name it
66:38 - A. And for each of the
properties, we're going to go
66:41 - through the column names. So ID
is going to be equal to the
66:44 - reader dot get, and we want to
get the right type of value. So
66:48 - this is going to be an integer.
So integer, 32 is the size of
66:52 - the data, you could use other
integer types like 16. But 32
66:56 - seems to work. So we're gonna
say at position zero, expect to
66:59 - see an integer. The next item is
the album name or the title. So
67:03 - that is coming from reader dot
get string at the second column,
67:07 - which is item number one. And
then so on, we go down to the
67:11 - artists name, and the year and
the image URL. And then finally,
67:15 - the description. Notice that the
index number goes from 01234,
67:20 - and five, so there are five
numbers for six columns of data.
67:25 - And we have to match up the data
type accordingly, otherwise, the
67:28 - program won't work. After we
have the new album, called a we
67:32 - want to add it to our list. So
return these dot add is the
67:36 - command that will attach this as
another item in our search
67:40 - results. Now to clean up after
ourselves, we want to close the
67:43 - connection. So SQL might be
smart enough to close the
67:46 - connection for us. But it's
always supposed to be here. So
67:50 - after you're done query, do
connection dot close. So this
67:53 - time, we should be able to run
the app. And instead of getting
67:56 - just empty data, we might see
something. Let's go ahead and
67:59 - try it out. Okay, the app is up
and running. Let's see what
68:02 - happens when I choose Get load
albums. Okay, and there they
68:05 - are. So I got lucky and
everything worked out fine. Now
68:08 - I'm going to create an error
just to see if we can do some
68:11 - troubleshooting. So let's close
this. And let's say I changed
68:16 - one of these things, instead of
a five, I put a six. What would
68:20 - that do? What kind of an error
Do you suppose that would make?
68:22 - It probably won't work. But
let's see why. Let's go ahead
68:25 - and choose run this. And now it
says here you have specified an
68:29 - invalid column ordinal. So in
other words, I only had up to
68:34 - five and you chose six. So that
one here is I suppose that's an
68:39 - English. Sometimes computer
errors are hard to understand.
68:43 - Let's say instead of get int i
accidentally put in get string.
68:49 - So let's see what get string
will do for us what kind of an
68:53 - error will that too. So get
string is not it's not given to
68:57 - let me It says an ID is not a
string. Here's a really common
69:00 - thing. So let's say I make a
mistake in my SQL statement. So
69:04 - instead of albums, I put in the
word album, and let's see if
69:07 - that makes a difference. Let's
run that.
69:11 - So now I got the application
running and I choose go. And we
69:14 - got an issue. It says here an
exception it says table music to
69:18 - dot album doesn't exist. So if
you do a typo in this statement
69:24 - right here, things aren't going
to go well either. So albums is
69:28 - the name. Another good practice
in writing SQL statements is not
69:32 - to rely on the star for
selecting all items from the
69:35 - table. This will make your code
more rigid, you might say or
69:39 - more, more specific, but it will
also avoid ever so if I change
69:45 - the star to ID album, artists
and year and all the rest of
69:48 - them, it should still work the
same if I've typed those
69:50 - correctly, so I'm going to try
it again. Run the app and when I
69:54 - choose Get albums, I've got a
problem. It says here the
69:57 - problem is that there is no such
thing as image you
70:00 - URL, what is the image URL
supposed to be? So let's bring
70:03 - that up. Here it is. Image Name.
Okay. So that's what it is.
70:08 - Let's fix that. Okay, so image
name should work. Let's try to
70:11 - run it again and see what
happens this time.
70:15 - Okay, here we go load albums.
And this time, they all seem to
70:19 - work like they're supposed to.
So we've got ourselves a working
70:23 - SELECT statement, we've got the
first section done of our
70:26 - application. Now, it would be
kind of nice to be able to
70:29 - search like, right now I'm
getting all of the albums, how
70:32 - do I do a search so that I can
only get some albums of the ones
70:36 - that I'm interested in? Well,
that's exactly what we'll do. In
70:38 - the next video, we'll do a
select statement using the where
70:41 - clause, so that way, we can do
searches on our collection.
70:57 - Hi, and welcome back to another
edition of our SQL application
71:01 - tutorial. In this application,
we're demonstrating how to use
71:04 - MySQL in various different
stages of app development. So
71:09 - we're up to part five, which is
how to create searches. So if
71:13 - you haven't caught the first
four parts, how to set up an
71:17 - application, how to set up a
database and how to do some
71:20 - queries, then go back in that
playlist and check those out.
71:23 - Right now we're trying to create
a searchable text box where we
71:27 - can put in a partial word, and
then get some search results
71:30 - from a list of albums. So
there's a whole bunch more stuff
71:33 - coming up. So look at all of
these subjects that will make a
71:36 - complete app. And then of
course, when we get to the end,
71:39 - I'll give you some challenges so
that you can continue on with
71:42 - your learning. My name is shad
Sluiter, and I teach software
71:45 - development at Grand Canyon
University in Phoenix, Arizona,
71:49 - a lot of my students have become
professional software
71:51 - developers, which I assume is
what you're trying to do here,
71:54 - as well. So stick with me. And
you can also look at my website
71:58 - at steady coding.org, where you
can become a software developer
72:01 - with C sharp or Java, make
yourself mobile applications or
72:06 - other things that are important
to the career of a software
72:09 - developer. So I'm glad you're
here. Let's get started now with
72:12 - doing searches so that our
application is more powerful
72:15 - than it was before. So I'm
bringing up on the screen here,
72:17 - everything that we've created,
and also a preview of where
72:20 - we're going before the end of
this video. So first of all, you
72:23 - notice we have MAMP, which is
our database server. And then we
72:27 - have the Visual Studio
application that we have in
72:30 - front of us. What's new in this
video is this box up here that
72:33 - says Search. So if I were to put
a letter in like the letter A
72:37 - and choose Search, you're going
to see that only albums in my
72:40 - database that have the letter A
are given as a result. So you
72:43 - can see Abbey Road, Yellow
Submarine and Hard Day's Night.
72:46 - Let's try something else like M
y and see if there's anything
72:50 - that has the word my in it
doesn't look like it. Let's try
72:53 - another one. So let's try H E.
And you can probably guess that
72:57 - help is one of the songs that
The Beatles wrote. If I leave
73:00 - the search box empty and choose
Search, I should get all the
73:03 - results. And the button here
that says load albums still
73:07 - continues to work and shows all
of the albums in my database. So
73:11 - that's what we're going to build
right now. Okay, so we've just
73:15 - gone back in time for one video.
And I am now left with the state
73:19 - of the application as it was
before where we had a load
73:23 - albums button but no search box.
So let's start from this point,
73:27 - and then move forward. So let's
start with the user interface.
73:30 - And then we'll do the back end
programming in a minute. So the
73:33 - user interface changes are
pretty simple, we're going to
73:35 - put a button on here and put the
word search on it. And so that
73:38 - way, we can at least have an
event. So let's put the text of
73:42 - search on the top. And then
we'll also put a text box on the
73:46 - screen. So a text box is where
we can enter in some values and
73:49 - then use the contents of that
box to do the searching.
73:53 - Alright, so that's all the
interface changes we're going to
73:55 - make. Now let's start
programming. So I'm going to go
73:57 - to the search button and double
click it. And we have a new
74:01 - button click handler button to
click. Now for the first version
74:05 - of this button, I'm just going
to steal all of the code from
74:08 - button one, which was to search
for everything in the database.
74:12 - So let's just copy and paste
this here. And then we'll make
74:15 - some modifications so that way
it will search for only specific
74:18 - songs. So the one important
change that we're going to make
74:21 - here is changing the method that
we're going to rely on from our
74:25 - data access object, our Dao, so
instead of searching for
74:29 - everything, I'm going to rename
this method and provide it one
74:32 - parameter, we're going to name
it as search titles, and then
74:36 - provide the contents of that
textbox. So the contents of the
74:40 - textbox are textbox one dot txt.
So those are the only changes we
74:46 - need to make here in form one to
make it work. But we need to now
74:49 - add this event here because you
can see that search titles has
74:53 - an underlying read on it, which
means it doesn't exist yet and
74:56 - we need to go fix that now. So
let's go open up albums D
75:00 - AIO and let's go check to see
what we have here. So I'm going
75:03 - to start selecting, we've got
this get all albums method. And
75:08 - so I'm holding the shift key and
the arrow to select all the way
75:10 - down to the very last. So this
is going to be duplicated and
75:15 - then modified slightly. So I'm
pressing ctrl C. Alright, so now
75:19 - I've got the items copied, I'm
going to create some space here,
75:22 - and then Ctrl V for paste. Let's
see, if I got one extra bracket
75:28 - it looks like so let's take out
him. So that little red thing
75:31 - goes away. Okay, so now I've got
a duplicate of the method called
75:36 - get all albums, what I want to
do is change that to search
75:39 - titles. Inside of the method,
I'm going to put in a parameter
75:43 - called string, and we'll name it
search term. So we're expecting
75:48 - to get some information from the
form. So that way we can query
75:52 - the database based on a keyword
search. Now let's save this and
75:56 - go back to form one CS and see
if the error goes away. So sure
76:01 - enough, now search titles with a
textbox. One text parameter is
76:05 - now valid. So the two different
methods, two different methods
76:10 - sync up well. So let's go back
to the DAO and continue working.
76:16 - What I'm going to do first seems
like the logical thing to do,
76:19 - but we will, we'll have errors,
but let's type it out anyway,
76:22 - just see what the first
intentions would be, if I were
76:26 - programming this without some
documentation to look at. So
76:29 - what I want to do then is in the
sequel search string, I want to
76:34 - add the WHERE statement. And I
want to say I want to search for
76:37 - all albums where the album title
is like the search term. And so
76:44 - will that work, if you remember
from previous videos, that we're
76:48 - missing the percent sign, which
is a wildcard character. And so
76:52 - that's the first problem that
will cause this to error out.
76:56 - But there's another, but anyway,
I'm going to try and test it
76:59 - anyway. So let's put in a search
term with a percent, and then a
77:04 - percent to follow it. And let's
see if that works. I predicted
77:09 - it won't. So let's just test it
and prove my point. So I'm
77:12 - searching for the letter A, and
then type search. And sure
77:16 - enough, it doesn't work. Look at
the error. It says you have
77:20 - something wrong with your syntax
right near the word search term
77:25 - at line one. And so now we're
baffled. We tried to do this
77:29 - with other searches in the past.
But for some reason, our
77:33 - application doesn't behave like
it did in the PHP myadmin
77:38 - screen. So what are we going to
do, the first thing I'm going to
77:41 - do is stitch together a couple
of things into a single string.
77:45 - So I'm going to name my string
as search wild phrase, which is
77:49 - simply the search term with an
addition of a percent sign at
77:53 - the beginning and another at the
end. And so that's step one, to
77:56 - make this whole string work a
little bit better. So now in my
78:00 - brilliants, I think well, I can
just take that string now and
78:04 - attach it to the SQL statement
that I had before. Will this
78:08 - work? Let's try it and see if it
doesn't. So I run the
78:12 - application. And I type in a
letter and choose Search. And
78:16 - sure enough, we have the same
error. So I'm not getting any
78:19 - closer. Well, I am. But I'm
trying to show you the common
78:23 - errors that I went through as a
first time programmer. And what
78:26 - you're probably trying to do as
well. So we're going to abandon
78:29 - this idea and move toward the
solution. A further step toward
78:33 - the solution is to get rid of
this trying to concatenate
78:36 - strings together and use a
placeholder. So I'm going to put
78:40 - an at symbol and search to make
this happen. So let's figure out
78:45 - where I came up with that. So
actually, I looked in the
78:47 - documentation, believe it or
not, and Microsoft tells us what
78:50 - to do. What we're trying to
prevent is called SQL injection
78:54 - attacks. And so this great
article is very simple to
78:57 - understand if you can go through
the examples. So let's take a
79:01 - look at what they had for an
example code that they recommend
79:04 - not to do. It's exactly what I
was trying to do, where you take
79:08 - a item and you try to
concatenate with plus signs. And
79:11 - when you're done, you have a SQL
statement. So it's vulnerable to
79:16 - hackers doing things that you
can do is called SQL injection
79:20 - attacks. And I'm not going to go
into that right now. But if you
79:23 - look in the description, I can
show you a course that deals
79:27 - exclusively with SQL injection
and cross site scripting, all
79:32 - kinds of security issues with
programming. But for right now
79:35 - we're just trying to get this
thing to run. Let's go down and
79:38 - we're gonna go past example two,
because it's doing the same
79:40 - thing where we're concatenating
strings. And so we're trying to
79:44 - find a solution. And sure
enough, it comes up with one. So
79:47 - the solution is this. It's
called parameter queries. And
79:51 - the way it looks like is that we
have to come up with something
79:54 - that has an at symbol, and then
we use let's see, where is it?
79:59 - We
80:00 - Have something where we do
parameters right here. So we're
80:02 - going to have a command that
looks like that parameters add
80:05 - with value. So we're not going
to do the exact code here, but
80:09 - something very close to it. So
take time to read this article.
80:13 - And you'll be a lot smarter when
it comes to using a sequel app
80:16 - and avoiding SQL injection
attacks. So to make this work,
80:20 - we're going to split up our
command item here, our command
80:24 - object and put some extra
parameters into it. So I'm
80:27 - eight, I'm cutting out the
sequel string, and in the line
80:31 - 64, where it says, Make a new
command, I'm just going to leave
80:34 - it with no parameters just to
parentheses. Then in the
80:38 - following line, I'm going to say
I'm going to add a parameter
80:41 - text or a command text to this,
and it is the SQL statement. And
80:46 - I'm going to make sure that I
have the at search parameter in
80:49 - there. So it's a placeholder for
something else. Then following
80:52 - that placeholder, we're going to
put a new line in that says
80:55 - command dot parameters dot add
with value. And then I can tell
81:01 - the computer that at search is
really a substitution for this
81:06 - search wild fruit. Another line
that we need to do is tell the
81:10 - command what connection we're
using. So I'll say command dot
81:13 - connection equals, and then we
have a string up above called
81:17 - connection, which was defined
like way up at the beginning of
81:21 - the of the of the class here. So
we have a connection, we have
81:25 - parameters and command text.
Let's see if this works. So I
81:28 - got the app running. And let's
try letter A, and do a search.
81:32 - And we've got some results this
time. So it looks to me like
81:35 - we've got exactly what we want.
So let's try and search for the
81:39 - letter B again, and see what we
got. Let it be let's try the
81:43 - word L E. And do we get anything
we got one song. And if I take
81:48 - all of the items out and do a
search, we get the whole
81:51 - results. So this to me looks to
like a search results that is
81:55 - successful. Now in the next
video, we're going to add a
81:58 - picture over here. So we're
going to have the album photo on
82:01 - the screen, which is a pretty
simple case, we've already got
82:04 - the image URL in our database.
Now can we make it show up on
82:08 - the form? Well, the answer is
yes. And it's not very hard.
82:26 - Hi, welcome back to another part
for our SQL application tutorial
82:30 - we're doing here. In this video,
we're going to continue on
82:33 - building the interface for our
app. So in the previous videos,
82:38 - we've done all of these items
that you see on the screen,
82:41 - we're at the point now where we
can search for an album in our
82:45 - database. So what we're going to
do in the future is to continue
82:49 - on to build all of these
features, until we have a
82:52 - complete idea of how to use
MySQL. And so continue on and
82:56 - will become a software developer
together. So let's take a look
82:59 - at the application as we're
going to finish today. So you
83:03 - can see we have a little icon on
the screen that shows a picture
83:06 - of the album cover. And every
time I click one of the rows in
83:09 - my table, you can see that the
album art is displayed over here
83:13 - in the picture box. And so a
couple of things we're going to
83:16 - have to do to make this happen.
First of all, we're gonna have
83:18 - to put this picture box on the
screen, of course, the second
83:21 - thing is that when we click the
grid, we're going to have to
83:24 - find out what row we're in, and
what column we're going to get
83:27 - the information from, and then
load that into the picture box.
83:31 - So when all that's done, you'll
have yourself what you see on
83:34 - the screen here. So let's get
started with a code. Okay, so
83:37 - I've reversed the application.
So now the picture box is gone.
83:40 - And we're ready to start adding
that feature now together. So
83:43 - I'm going to close this and
start the process. So here's the
83:47 - process, we're going to take
this form and put a picture box
83:50 - on it. So let's go find the
picture box, first of all, and
83:53 - let's see it's called picture
box right there in wind forms is
83:57 - as simple as dragging something
onto the screen and changing the
84:00 - size. Okay, so now let's check
to see if we can add something
84:05 - to that box. So you can see that
it's it's empty right now. And
84:10 - there's multiple ways to put a
picture into a box, what we're
84:13 - going to do is use the URL from
one of our videos. So to get one
84:17 - of the video URLs, I'm going to
go to the PHP myadmin page. And
84:22 - then I'm going to find the,
let's say the first one here. So
84:25 - let's do a CTRL A to Ctrl.
Select it all Ctrl C to copy it.
84:30 - And then let's come back into
the Visual Studio. Now in here,
84:34 - we're going to be able to add
this and I need some kind of an
84:37 - event. To do that for right now.
I'm just going to choose Load
84:40 - albums. And at the end of the
album, I'm going to load this so
84:44 - let's see if I type in picture
one box one and then there is a
84:48 - command for load I believe it is
yes.
84:51 - So it's as simple as telling it
what URL you want. So I'm going
84:55 - to put in a quotation marks.
Paste in the string and assign
85:00 - Aculon. So that should load an
image from the internet, it's as
85:04 - simple as that. So let's go
ahead and run it and test it
85:07 - out. So when I click the Load
albums, you can hopefully see
85:12 - there is the picture. So that is
Abbey Road. If I click any of
85:15 - these things, it doesn't change.
So we've still got that to go.
85:18 - And it appears that only the top
left corner of the album is
85:22 - showing. So those are the things
that we still have to do. But we
85:26 - have proven that we can load a
picture from the internet. First
85:30 - of all, I want to change the
property of this picture. So
85:33 - let's click here. And let's go
down to the bottom where it says
85:36 - appearances. Now what I'm
looking for is a way to scale
85:39 - this image. And I'm not quite
sure which one was. Here it is
85:43 - it's called size mode. So right
now it's set at normal. And
85:46 - let's look at the choices. So
stretch might be the first thing
85:49 - you think of, but you can get
all kinds of weird warped
85:52 - pictures. The one we're looking
for is zoom, and the others you
85:56 - can experiment with. But for
right now, we're just going to
85:58 - try zoom. And let's run it again
to check to check to see what
86:01 - kind of a picture look that
looks like. So I click on Load
86:04 - albums, and there I get the
whole photo. So it's scaled
86:08 - proportionally. And it
automatically adjusts to the
86:11 - frame. Very nice. So I'm not
really interested in seeing
86:14 - Abbey Road every time I click
the grid, I want to see the
86:18 - actual picture that I'm supposed
to get from the grid. So let's
86:21 - click the grid once. Now, you
might be tempted to double click
86:25 - the grid if you want an event to
occur. So that's like clicking a
86:29 - button. But in this case, what I
want to do is to go to the
86:32 - properties and choose the events
and look at my choices. So the
86:36 - mouse has a click cell, click
contents and cell double click.
86:42 - So let's do click cell. So I'm
in this square here, I'm just
86:45 - going to double click here. And
now I have a sell click event.
86:50 - This one works better than the
other two, I can guarantee you
86:53 - that. But just take my word on
it. So now what I want to do is
86:57 - check to see if this actually
works. So the simplest way to do
87:01 - a test is to do a message box
and show it. Let's go ahead and
87:04 - test it out. Okay, so I'm going
to load some albums. And then
87:08 - I'm going to click something.
And sure enough, it says
87:10 - clicked. So you can see I can
click on any cell in the grid
87:13 - and I get a clicked message. Now
how can I tell which cell I
87:17 - clicked right now it's just kind
of generally saying you click
87:19 - the cell. So the key here is the
word sender. If you look into
87:24 - the parameters that are the
click event has sender is the
87:27 - item that is sending this
message. So I'm going to save
87:31 - the sender as a data grid view
object. So I assume that the
87:36 - sender is always the data grid
view. So I will just say that is
87:39 - equal to the sender. Now you can
see that there's a problem. So
87:43 - sender is a generic object. And
data grid view is a specific
87:48 - type of object. So to make this
fix occur, it says, Would you
87:53 - like to do a cast. So let's go
ahead and choose this and add
87:57 - the explicit cast and tells it
now that I guarantee you that if
88:01 - this receives a click event,
it's coming from a grid view. So
88:06 - now I want to capture some
values about the grid. So for
88:09 - instance, the row number, so
let's create an integer
88:12 - variable, and name it row
clicked, we're going to get it
88:16 - from the data grid view dot
current row dot index. So
88:21 - current row is the current row
that's selected, and index is
88:24 - the row number. And then I'm
going to do a message box to
88:27 - show some feedback. So we can
see if this is actually doing
88:31 - what we want, we want to get the
row number numbers. So let's go
88:34 - ahead and click the Go button
and see what this message box
88:37 - shows. So we show the album's
first and now when we click
88:41 - something, you can see that it
says I clicked row number three,
88:45 - now count these down. So Abbey
Road is zero, let it be as one
88:50 - help us to and then Revolver is
three. So it is not showing me
88:54 - the album ID number. It's
showing me the row number. So
88:57 - this is row number zero. And
let's see what the last one is.
89:01 - So it's not 17 it is row six. So
now that I have the row number,
89:05 - I can go get the column. So if
you if you count the columns,
89:09 - just like the rows we have ID is
zero. I will name as one artist
89:14 - two,
89:16 - years three, and image URL would
be fourth. So the fourth column
89:21 - of the row that was clicked
contains the string that we want
89:25 - to put in the picture box. Okay,
let's see if we can get all that
89:28 - in code. Okay, so here's the
process. Now we're going to
89:31 - create another string and it's
going to be called Image URL. So
89:36 - we're going to get this from the
data grid view. And the type of
89:39 - head help is really pretty much
all right on here. It's pretty
89:42 - close. I want to get the data
grid view dot rows, and then in
89:46 - square brackets tell it which
row number which is the row
89:49 - clicked. Then I want to get the
cells so a little bit off on
89:53 - this one but cells and I want to
get cells, the array of cells at
89:58 - position four
90:00 - And that's actually the fifth
column. And then I'm going to
90:02 - get the value and then change it
into a string. And then I've got
90:06 - myself the value that I'm trying
to put into the picture box.
90:09 - Let's put a message box out to
test this one, and see if that's
90:13 - doing what we expect. Let's run
it again. And check. Okay, away
90:17 - we go. So we click on albums.
And let's click something. So it
90:21 - says here, you click row two,
and the image URL is this thing.
90:25 - Is that indeed what we're after?
So it looks like the Beatles
90:30 - album cover. Oh, help. That's
the word. Help. Okay. Let's try
90:34 - another one. Let's go to the
Abbey Road. And do we get
90:38 - anything.
90:40 - So we got zero. And then it
looks to me like Abbey Road is
90:44 - in the filename. So we've we've
got the right URL. Now, all we
90:48 - have to do now is put it into
the picture box. All right, so
90:51 - I'm a little tired of hearing
these picture box, things show
90:54 - up. So I'm going to comment them
out. So they're out of the way.
90:58 - So the last statement that I'm
looking for is Picture Box, one
91:00 - dot load. And then in
parentheses, I have to put the
91:03 - string of that image. And so
that is a string that we just
91:07 - created a minute ago. It's
called Image URL. So that should
91:11 - load the picture every time we
click a cell. Let's give it a
91:14 - shot and see what happens. Okay,
the album's are loaded now. And
91:19 - let's pick somebody let's try
let it be. And it looks like it
91:22 - help. And revolver, Rubber Soul,
they're all coming up. Nice. So
91:30 - all of my pictures are being
loaded, based on the image URL
91:35 - field that is over here in
column number five. So the next
91:39 - video that we're going to do is
going to be inserting new
91:42 - records. So we need to create a
little data input form and add
91:45 - new albums as the user chooses
to. So let's do that in the next
91:50 - step.
92:06 - Hi, in this video, we're going
to continue on working with this
92:09 - tutorial on the SQL database
application. So we've gone
92:13 - through a few sections already.
And so we are about ready to do
92:17 - inserts. So we've done
searching, we've done creating a
92:20 - table. What we're going to do
now is add records to a SQL
92:24 - database. And so we'll create a
form, and then we'll execute an
92:28 - INSERT statement using SQL. So
here's the rest of the tutorial.
92:32 - So make sure that you stick
around to watch the entire
92:34 - thing. My name is shad Sluiter,
and I teach software development
92:38 - at Grand Canyon University.
We're in the middle of a process
92:41 - here to make you a software
developers so many of my
92:44 - students have already graduated
and gone on to get great jobs.
92:47 - And I'm trying to add you to the
list. So make sure that you
92:50 - subscribe, or go to my website,
which is steady coding.org,
92:54 - where you can see all of the
things that we do in class. So
92:57 - welcome aboard. So now I'm going
to show you where we're going to
93:01 - end at this video. So you can
see the application that we have
93:04 - in front of us here now has a
data entry form. So I kind of
93:08 - shoved it into the corner up
here on the left. And you can
93:10 - see that I've already filled out
a whole bunch of items. Let's
93:13 - see where I got that. So if I
switch back into Wikipedia,
93:17 - you're going to see that I've
been copying information, such
93:20 - as the description, and the
image URL, and the year. So we
93:24 - have a new album to add to our
database. So I filled in all of
93:27 - these fields here. So Sergeant
Pepper's Lonely Hearts Club Band
93:30 - and the rest of the items. Now I
click the Add button, I get a
93:34 - pop up that says there's been
one record inserted. Now I want
93:37 - to either click Load albums to
see everything. And you can see
93:41 - that number 19 is Sergeant
Pepper's or I can choose the
93:44 - search. And you can see that as
also shows up here. So let's
93:47 - just type in an S, G, and search
and we got one item. So it did
93:52 - insert correctly. And now I can
search for it. So that's what
93:55 - we're going to have by the time
we're done with this video. So
93:58 - let's get started with modifying
our application to look like
94:02 - this. Alright, so you can see
that I've got the application on
94:04 - the screen as we left it in the
previous tutorial. Now it's time
94:08 - to put in this insert form. So
I'm going to drag in a whole
94:10 - bunch of things and arrange them
inside of a container. And then
94:14 - we'll add some code. Okay, so
now it's time to set up the rest
94:17 - of the controls on our form. So
let's put some space up here in
94:21 - the upper left corner, so we can
add some input fields. First of
94:24 - all, take the image for the
album and drag it over to the
94:27 - right, so we create some space.
Now I'm going to use a control
94:32 - container. So a container is one
that is kind of a grouping
94:36 - thing. So we look in the
grouping section or the
94:37 - container section. And we find
group box one, so we'll drag him
94:41 - in. So the name of this form or
the sub form really is called
94:46 - add album. So we'll set the text
to add album so that we know the
94:50 - user knows what's going on. Now
I'm going to put in a bunch of
94:54 - labels. So these labels are
going to indicate what we're
94:58 - entering. So we're going to say
95:00 - Skip the ID number. First of
all, just leave that out, we're
95:03 - going to start with the album
name. And so let's put in an
95:07 - album name, change the text
value to album name. And then
95:12 - we'll do artists. And then we'll
follow it with a year and the
95:15 - image URL and the description.
Now I want to arrange these. So
95:20 - we'll set the left margin to be
all equal. And then we'll also
95:25 - set it so that they're
vertically spaced. So there's
95:27 - some controls up here in the top
in the ruler, or the in the
95:31 - control bar, you might call it,
where you can do all of these
95:34 - arrangements. So you don't have
to be very good at arranging
95:37 - things, that computer will help
you with that. Next, we need to
95:40 - put in some text boxes. So let's
drag in a text box for album
95:44 - name. Now instead of leaving the
name as textbox, to as you can
95:48 - see here, I'm going to change
the name of the control because
95:51 - we're going to reference that in
our code. So my convention from
95:55 - working with other types of
forms is to use a prefix on
95:59 - every one of my controls. So TX
T indicates a textbox, and then
96:03 - an underscore, and then a
description of what that's for.
96:06 - So txt underscore album name, is
what I'll use for the next one
96:11 - is Tx T underscore and we'll say
artist or album artist. And so
96:17 - we'll put in another text box
for the year. And we'll set that
96:20 - to be year and then TX T is the
prefix. Let's go with image URL
96:25 - and description following the
same pattern. So TX T, is the
96:30 - prefix that I always use. Now
you might have a different
96:33 - process and many other tutorials
will lead you in another way.
96:36 - But this seems to work for me.
Let's also arrange these so that
96:40 - they're all nice and straight.
So we'll choose a left margin so
96:43 - that they're all lined up to the
left. And we'll also spread them
96:46 - vertically, then we can finally
maybe change the width, so they
96:51 - all match, and then resize the
group box so it fits nicely. And
96:56 - then let's try to squeeze it
into the upper left corner of
96:59 - our form, we might have to move
some of the other controls out
97:02 - of the way to make this happen.
But we will see that there might
97:06 - be enough space there. Now this
is kind of a poor example of
97:10 - user interface design. And we're
trying to squeeze everything
97:13 - under one form, simply because
we're trying to make this as
97:16 - easy to program as possible.
This is not the way that you
97:21 - would probably want to treat
your users if you were making a
97:25 - real app. Can you imagine if you
had a phone app with all of
97:28 - these controls jammed on one
screen? Not a good idea. But
97:32 - we're focusing in the database,
right? This is a sequel class,
97:36 - and we're making the simplest
form possible. Okay, so we got
97:39 - the form setup, now we need a
button, and then an event to go
97:44 - with it. So that way we can talk
to the database. So the last
97:47 - item is to stick in a button
called add. So let's create a
97:51 - little more space in our group
box. And then we'll drag in a
97:55 - button. And let's just set the
text of the button to the word
97:58 - add. I'm going to double click
on the buttons. So that way we
98:01 - have an event, a click event.
And now we're going to program
98:05 - something in here that will talk
to the database. So the first
98:08 - thing I want to do is capture
all of those text inputs and
98:12 - create a new album object. So
let's define the new album
98:15 - object. We'll call it album. And
I'm going to create a new one
98:19 - using an inline constructor
here. So we're going to create
98:23 - all of the properties except for
the ID. So the first item is the
98:27 - name. So the name of the album
is going to get its value from
98:30 - the text control. So now you can
see why I use txt underscore as
98:35 - the prefix for all of my text
items. They're really easy to
98:38 - find on this help when you do
type cyst. So TX T artists know
98:44 - it's called album name, and then
we get the text property of that
98:47 - textbox. The next item is the
artist name. And let's choose
98:51 - the txt artists name and ensure
that you put dot txt, then we're
98:55 - going to use the year now this
one is going to flag an error
98:58 - because a year is an integer and
we're going to assign it a text
99:02 - value. Don't worry, we'll come
back and fix this. So we're
99:05 - going to get the text from the
input box, then we're going to
99:09 - have an image URL. And we'll get
the same idea. So text image
99:12 - URL. And then finally we have
the description. So now we have
99:17 - all of the properties except for
the ID associated with something
99:21 - from the form. So far, so good.
Now for that year, what are we
99:25 - going to do for that? So the
command we're looking for is in
99:28 - the integer 32 class. So we'll
type in int 32 dot, and you can
99:32 - see that there is a method
called parse, and it's Its job
99:36 - is to take a text field and
convert it into an integer. So
99:40 - we'll just surround the text
property with parentheses and
99:44 - use int 32 dot parse. This
should all work as long as the
99:49 - user fills out the fields
correctly. So we're not doing
99:52 - any error checking here.
Remember, this is a simple app,
99:56 - and we're talking about the
database issues. And we're not
99:59 - trying to make a
100:00 - user application so much. Now
that we have an album class, we
100:04 - can now try to add it to the
database. So we're going to
100:07 - create a new instance of the
albums Dao, which is the class
100:11 - that we created in previous
exercises. So we're going to
100:14 - create the new instance. And
then I'm going to call on a
100:18 - method that doesn't exist yet.
But we will create that in a
100:21 - minute. So the method is add one
album, and in parentheses, we
100:26 - use the parameter album, the one
that we just got from the form.
100:31 - Now I am going to come back and
fix this underlying error. One
100:35 - other feature though, I want to
do is have an integer result
100:39 - come back from this method. So
that will tell me if an insert
100:43 - was correct or not. So an
integer value of result is what
100:48 - we're going to get. Now we're
going to come back and finish
100:51 - this code a minute. But now we
have to go and code in the other
100:55 - class, the album's Dao, because
right now, as you can see, we
101:00 - have an underlying, so let's go
check the underlying. And it
101:03 - says here, the album's Dao does
not contain a definition for add
101:08 - one album. So we haven't
programmed that yet. Let's see
101:13 - if we can get some help here. So
show potential fixes. And the
101:17 - only fix that says is would you
like to create this. So sure
101:20 - enough, I'll click it. And
somewhere someplace, somehow,
101:25 - the error goes away, we need to
go find it. So I'm going to save
101:28 - this and switch into albums Dao
and see what's there. So let's
101:35 - refresh our memory from what was
here. So I scroll to the top,
101:38 - and we have a class with get all
albums. Then we have another
101:44 - method down here called Search
titles. And then finally,
101:47 - there's a new one that was just
inserted for us called add one
101:51 - elbow. Now, I'm going to copy
some of the code that we used in
101:55 - previous examples, and then
we're going to modify it. So the
101:59 - simplest code I can pick from is
the very first method called get
102:02 - all albums. So I'll just copy
the contents of that method, and
102:06 - paste it into my insert command
that I'm going to do here at the
102:10 - bottom. Now, I'm going to erase
most of the code, but I do need
102:14 - to keep around a thing like,
open the connection, and close
102:18 - the connection and create a SQL
command. Now the SQL command is
102:23 - going to be drastically
different. But it still is a
102:26 - command. So I'll leave that
line. Now the command here is
102:29 - going to have the select
statement. So let's delete the
102:32 - select statement. And we're
going to replace it with an
102:34 - INSERT statement. Now, I'm not
very good at SQL, or maybe we're
102:38 - new at it, let's say, let's go
and have some help from our
102:41 - MySQL admin page. So I have here
the admin page for the MySQL
102:47 - server. And up at the top, there
is a SQL statement. So I'm going
102:51 - to get some help from here. So
as you recall, we were able to
102:55 - do SELECT statements with help
here, I'm going to choose the
102:59 - insert button, and it gives us
an exact line, what we need to
103:04 - use as a model. Isn't that
handy. So I'm just going to copy
103:09 - the entire thing, and then
change it once we get into our
103:12 - program. So let's copy here, and
then switch back into our Visual
103:16 - Studio and paste it inside of
these quotation marks. Now let's
103:21 - see what we need to change here.
So we have a statement that says
103:26 - insert into albums. Well, that's
the table that we want to insert
103:29 - into. And then you can see the
next section lists all of the
103:33 - column titles that are in the
table. So which of these columns
103:38 - titles are we inserting? Is the
answer all of them? Not quite,
103:44 - we are treating the first column
differently, the ID number, we
103:49 - don't want to provide an ID
number when we insert because
103:53 - the table is set up to
automatically increment the
103:57 - counter variable for ID. And so
in this statement, I'm going to
104:02 - erase the first column. So Id
does not include itself here.
104:08 - And so album title is the first
column. Now the rest of these
104:13 - are valid. Now when we get to
the values here, I'm going to
104:16 - also replace those, so let's
select them all. And let's
104:20 - delete. Now instead, I'm going
to use what are placeholders so
104:25 - I'm going to use an at symbol,
and then some name that refers
104:28 - to this column. So referring to
the rest of these, we're going
104:32 - to have the album title, and
then an ad for the artist name
104:36 - and ad for the year. Then we're
going to have an ad for the
104:40 - image URL and then an ad for the
description. So now it's time to
104:44 - adjust the parameters. So the
command that we want to use to
104:48 - associate a parameter, those add
symbols with the actual value is
104:52 - this command dot parameters dot,
add with value. And then in
104:58 - parentheses, we're going to have
two things.
105:00 - The first is a string, which
says which parameter name are
105:04 - you trying to associate. So the
first column is the album title.
105:08 - So we'll put at album title. Now
the second item is the actual
105:14 - value that we are using for the
insert. So we have a variable
105:19 - called album. Where did that
come from? So the album dot
105:25 - album name is coming from the
parameter up online 92. So when
105:31 - this method is called, it has to
have an album supplied to it. So
105:35 - we've got the actual data coming
in there. So that's this first
105:39 - parameter, then we'll associate
one property of the object with
105:43 - the first parameter in the SQL
statement. So the rest of these
105:47 - parameters are going to be very
similar. So I'll copy and paste.
105:50 - So we're going to copy and paste
and then we'll switch the next
105:53 - one to artists. And the album
dot artists name is the actual
105:58 - value, then we're going to go to
add year. And we'll get that
106:01 - from the property of the album
year. Then the third one, or the
106:04 - fourth one is image URL, notice
I'm using a capital letters so
106:08 - that way they match exactly. And
then we're going to have the
106:11 - image URL from the album
property. And then finally, the
106:14 - description. So all of these
parameters should work. If the
106:18 - user fills out the form
correctly, if they fill out the
106:20 - form, in a bad way, if they put
in strings for the year, for
106:23 - example, then the app will
crash. So remember, we're not
106:27 - checking for errors in the input
field, we're making this a
106:30 - simple user interface. So the
next item is we have to execute
106:34 - the query. So let's type in
command dot execute. And there
106:38 - the the one of the first
suggestions is called a non
106:41 - query execute non query, that
means you're not selecting
106:44 - anything, we're doing an insert.
So I guess that goes as a non
106:47 - query. Now it says here, what we
need is a statement, it says
106:53 - against the connection, and then
it returns the number of rows
106:57 - affected. Well, that's very
handy, because we want to get
106:59 - those numbers of rows affected,
and send it back. So let's
107:04 - choose execute non query, I'm
gonna press tab, and then we
107:07 - have the execution. Now we need
to save this. So let's put in a
107:11 - new value value and call it
result. Or let's call it new
107:14 - rows. And then we'll get it from
this execute non query. So that
107:20 - works out well. Then finally,
when we want to return
107:23 - something, we're going to return
the number of new rows. And
107:27 - let's see if all of the errors
go away. I believe they do.
107:30 - Good. Now, we're almost done.
But we need to go back to form
107:33 - one. And let's see what we can
add after the insert. So the
107:38 - results are here. So I'm going
to just put in a message box. So
107:40 - I'm going to say message box
Show. And then we're going to
107:44 - tell it how many different rows
were inserted.
107:48 - Okay, so now we've got
everything set up, it looks like
107:50 - we're ready to run. So we just
have to click the green button
107:52 - and try it out. All right,
there's the beautiful looking
107:55 - app, let's Minimize Visual
Studio. And let's go back into
107:59 - our Sergeant Pepper's. Let's see
if we can use this. So I'm going
108:03 - to select the first paragraph.
And let's put in the description
108:07 - below. So my user interface
doesn't allow for much space.
108:11 - But as you can see, I can put in
a very long text. So the image
108:15 - URL, I'm going to work up the
from the bottom, so let's go and
108:17 - right copy, right click here,
choose Copy Image address. And
108:22 - let's paste that into the image
URL. The rest of these I think
108:25 - we can fill out so what were the
other ones, we've got 1967 here,
108:31 - and then the artists that looks
like the Beatles,
108:35 - and then says a lot of typing.
So I'm going to copy that title
108:38 - and paste that. Okay, all that
work. Now we're ready to click
108:41 - the Add button. And what do we
get? It says one new row was
108:44 - inserted. And let's choose a
load albums. And let's go to the
108:48 - bottom and you can see that I've
put it in twice now. And so if I
108:51 - click one of these, we get
ourselves the URL image that
108:55 - seems to be loading. So I
inserted Sergeant Pepper's
108:58 - twice, you probably get one if
you click the Add button, you'll
109:02 - get two as well. And you get a
whole bunch of them if you click
109:05 - it multiple times. The next
thing that we're getting to in
109:08 - this tutorial series is creating
a foreign key. Because now that
109:12 - we've got albums, we need to add
some tracks or individual songs.
109:16 - And each song is of course
associated with an album, which
109:20 - is going to require us to learn
how to make two tables and a
109:23 - foreign key. So we're gonna get
started with foreign keys next.
109:41 - Hi, and welcome back to another
section of our SQL database
109:45 - application tutorial. I think
this is part eight, and we are
109:48 - learning how to use SQL
databases. So here's the index
109:52 - of everything that we've learned
so far. You can see that we've
109:55 - created tables and we've created
a simple app that can read and
109:59 - insert
110:00 - records. In this video we are
going to talk about foreign
110:04 - keys, you're going to learn how
to use a new tool that will
110:07 - create links between tables. So
we will have an albums table,
110:12 - and then another table in our
database for each of the songs,
110:16 - we'll call it our tracks table.
And then the relationship
110:19 - between them is very important.
And so we'll learn the how to
110:22 - use the tool called MySQL
Workbench. So a lot of concepts
110:27 - here about SQL databases that
we're going to explore. Right
110:31 - now, here's the rest of the
sequence that we're going to
110:33 - learn. So we're about halfway
through. And by the time you're
110:37 - done, you will become a sequel
expert, we might say my name is
110:40 - shad Sluiter, and I teach
software development at Grand
110:43 - Canyon University in Phoenix,
Arizona, I'm glad you've joined
110:47 - us. So many of the students that
I've taught in the past are now
110:51 - employed very successfully as
software developers. So I'm
110:55 - inviting you to come along and
learn some of the same things
110:58 - that we do in class. In this
particular course, SQL
111:02 - databases, you use this in
almost all types of software
111:06 - development. So this is an
essential part of your
111:09 - education. So make sure you
check out the website at steady
111:12 - coding.org, where you can see
all of the courses that I've
111:15 - been teaching in the past few
years. So here's a preview of
111:18 - what we're going to do before
the end of the video, you can
111:20 - see on the screen that I have a
new tool up. This is called my
111:24 - sequel workbench. And a
workbench tool is used to design
111:29 - databases. So by the time you're
finished, you're going to have
111:32 - not only the album's table that
you see here, but this link to
111:36 - another table called the tracks
table. And so this contains all
111:40 - of the songs that each album
has. And you can see there's a
111:44 - link between the two called a
foreign key. And so all these
111:48 - concepts that we're going to
learn right now, so if you
111:51 - haven't installed this tool yet,
let's go and find it. So I'm
111:54 - googling MySQL Workbench
installs. So let's see what we
111:58 - got here for one of the links.
And this is the one you want
112:01 - here. So MySQL Workbench
Download Now. And then you're
112:05 - going to have the choice of
which platform you want to
112:07 - install. So I'm using Windows,
you might have something else,
112:11 - but go ahead and choose the
download and go ahead and run
112:14 - the setup. And when you're
finished, you will have the
112:17 - application that you see on my
computer. So I've got the
112:20 - application installed, I'm just
going to click the little
112:23 - dolphin icon and run it. So you
can see the first screen is
112:27 - welcome to my SQL workbench.
Now, I'm going to remove this
112:31 - item here because you don't have
that yet. So let's see, delete
112:35 - the connection, and click
Delete. So the first thing you
112:39 - do when you launch this is try
to connect your MySQL Workbench
112:44 - to a server. Now you can see in
the background that I have the
112:47 - MAMP server running. And I have
the green dots indicating that
112:52 - the two servers are active. So
the Apache server which honestly
112:56 - we are not using, but it's are
automatically included in this
113:00 - package. MySQL server is also
running. So the tool MySQL
113:04 - Workbench will work with any
type of SQL MySQL server. So
113:09 - whether you're installing MAMP,
or lamp or USB Web Server, or
113:13 - you just installed MySQL as a
standalone product, they will
113:17 - all be able to connect using
MySQL Workbench. So you might
113:22 - have a similar setup that I do.
But hopefully it's something
113:26 - that is as close as possible so
that the tutorial makes sense to
113:29 - you. Alright, so let's see how
we can make this work. So as you
113:32 - recall, the server here has a
user name and password. So root
113:37 - is the username. And root is the
password for this particular
113:43 - instance of MySQL. So that's
important to be able to connect.
113:47 - Now I'm going to just minimize
this. And now we're going to go
113:50 - into MySQL Workbench. So now
down here, in the section where
113:54 - the mic SQL connections are
listed, I'm going to click the
113:57 - plus sign. And this will add a
new connection. Now if you if
114:01 - you don't find that plus sign,
you can probably find that over
114:04 - here under the databases menu.
But I'm just going to go with
114:07 - this plus sign. So I'm going to
set up a connection. So the name
114:11 - of the server is localhost. So
that's a great name for the
114:14 - connection. Down below here is
the IP address of my server. So
114:18 - I'm going to type in localhost
again, you could leave it as
114:21 - 127 001. But localhost is
synonymous, then the port number
114:27 - is 3306. So that's the default
port. And if you want to check
114:32 - to see if you're running on that
port, you go to your map server,
114:35 - go to the map menu, pick
preferences, choose ports, and
114:41 - you'll see the port number
listed here. So this is 3306. So
114:45 - I'm just going to cancel this
and minimize map. So I'm just
114:49 - verifying that 3306 is the
correct number and it likely is
114:52 - on your computer too. Now I'm
going to test the connection and
114:57 - it says it was successful. So if
this is not
115:00 - Successful check your passwords,
check to see if you've got the
115:03 - right ports and everything.
Let's click OK, and choose OK
115:07 - again. So now I've added a new
connection down here. So I don't
115:11 - have to go through and set up
the connection again, the next
115:14 - time I run this application, I
can just double click on this
115:17 - gray box, which I'm going to do
now. So I've double clicked. And
115:21 - hopefully I've connected. Now
you can see on the left side
115:25 - here, I have two tables, I have
a music table and a music to
115:28 - table. If you don't see that you
can switch because you might
115:31 - have administration on this tab.
And then what I want to select
115:35 - is schemas. So the schemas are
the database names. So let's
115:39 - take a look inside of here. So
music two is the application
115:43 - that we've been working on. So
I'm going to expand this, choose
115:46 - tables. And you can see that
there's an albums table. So if I
115:50 - were to expand that further, you
can see the column names. And
115:53 - then you're going to see more
details about our, our design.
115:57 - So we have ID, the title, the
artist, the year, the image and
116:02 - the description. So those are
all the items that we set up in
116:06 - the PHP admin page. And so you
can see the same kinds of
116:10 - materials here. But my SQL
Workbench will do more
116:15 - administration tasks and an
easier way than the previous
116:19 - admin screen that we've been
using up until now. So what I
116:23 - want to do is add a second table
and make a foreign key. So just
116:27 - to see where we're going, I'm
going to collapse music, too.
116:31 - And I'm going to show you what
music looks like because I
116:34 - created this application
earlier, just to prepare for
116:38 - this tutorial. So to show you
how this works, I'm going to go
116:41 - to database, you won't be able
to do this yet. So just watch.
116:45 - I'm going to choose reverse
engineer. And I'm going to click
116:49 - Next. And then I'm going to log
in,
116:54 - and then click OK. Now it says
you've connected, let's go
116:58 - through this steps here. So
next, and it says which one of
117:02 - the schemas would you like to
connect to. So music two is the
117:05 - one we're currently using. I'm
going to take that one off, and
117:08 - I'll show you the one that I
created an earlier tutorial. So
117:12 - music is what I'm after. Choose
next, it says so far, so good
117:17 - with green checkmarks. Next
again, it says you're going to
117:21 - import to tables and execute.
And this time when I'm done,
117:25 - something happened in the
background, I click Next. And
117:29 - then finally I click Finish. And
here we are. So now you can see
117:33 - the results of what we're trying
to get to. So I have two tables,
117:38 - I have an albums table and
attracts table. So that's where
117:42 - we're going. Now let's back up
and see if we can get to this
117:46 - point. So I'm going to close
these tabs at the top of the
117:49 - screen. And don't save
whatever's there. And we're
117:52 - back. So I want to open up the
music to database. So let's try
117:56 - this again. This time you work
with me. Alright, so click on
117:59 - database, choose reverse
engineer.
118:04 - And then we're going to choose
Next,
118:07 - we're going to choose Next,
we're going to select music to
118:13 - choose Next,
118:15 - choose next.
118:17 - Execute.
118:19 - And next, and finally finish.
Okay, so all of that work gets
118:26 - us to this diagram. So what
we're looking right now at is a
118:31 - diagram called an E R diagram.
This is the design of your
118:35 - database. You can see it has one
table, and it shows you all the
118:39 - column names in it. Now we're
going to add a new table and
118:43 - then resynchronize our database
to this diagram. So there's a
118:48 - couple of steps involved here.
And you have to do it exactly
118:50 - right. Or it will give you an
error. So first of all, we're
118:54 - going to create a table. So over
here in this column here, you
118:57 - can see that there is an icon
that says place a new table. So
119:01 - I'm going to click it and then
click out here. And I got table
119:05 - one. So table one doesn't have
anything in it. Of course, it
119:08 - looks kind of like a title only.
Let's double click it.
119:12 - So when I double click it, I get
a another bunch of things that I
119:16 - can configure. The first thing
is I'm going to give it a name.
119:19 - So let's call this thing tracks
and press enter. Now what are we
119:23 - going to have in the tracks
table, let's go down to the
119:25 - columns. So the first thing you
usually do is you set up an ID
119:30 - and leave it as an integer.
We're going to check auto
119:34 - increment as our option. The
next item down. So the next item
119:39 - down I'm going to call it track
title. And so I'll use an
119:42 - underscore character here. You
don't have to use underscore,
119:45 - you can just shove them all
together into a single word if
119:48 - you like. But I would recommend
that you do not use spaces in
119:52 - any of your column names. So
this is going to be a VAR char
119:56 - type of column. And since the
title of the album is probably
120:00 - Longer than 45 letters, let's
set it to something bigger. I'll
120:03 - choose 100 characters. So let's
add some other items. So after
120:08 - the title, let's put in another
column, and we'll call it
120:11 - number. So this is the track
number, like if it's track
120:14 - number one on the album, so it's
an integer. So usually there's
120:18 - about eight to 10 tracks per
album. So we'll see some number
120:22 - between one and 10. The next
item down that we're going to
120:25 - put is a string. So this is
video underscore URL. So this
120:30 - will be a YouTube link so we can
actually play the video. So a
120:34 - number of characters that we're
going to need here is what maybe
120:38 - 200 or so how long is the URL
for a YouTube video, I'm not
120:42 - quite sure. So 200 is a safe
number.
120:46 - Let's add a lyrics column. So
the lyrics will be the other
120:50 - words to the song. And for some
reason, we might want to print
120:53 - that to the screen. So a lyrics
could be really long. So look at
120:57 - all of the options for our
different data types. So there's
121:00 - a lot of different options for
choosing a text field, I'm going
121:04 - to choose the one that has text
and a parenthesis. So I can
121:07 - specify that it has some number
of items, let's say 2000. Is
121:11 - that enough letters for a song,
I think it might work. So we'll
121:16 - use text. And then that's the
last one we're going to put. So
121:19 - it looks to me like I have a
couple of extra columns here
121:23 - that I didn't mean to do. So
let's go and select the item
121:26 - that was accidentally put in
there. I'm going to right click
121:29 - on it and choose Delete. And
then let's do the last one as
121:32 - well. And so now we're down to
just a few different columns
121:36 - here. Okay, so all of this here
is I think, correct. So I can
121:40 - close this tab. And you can see
the changes occur here. Now,
121:45 - this is not quite finished,
we're missing the link between
121:50 - these two columns, or between
these two tables. So let's go
121:54 - look at these items here. So
these are different links. If I
121:56 - want to have a relationship, I
can have a one to one
121:59 - relationship, or a one to many.
Here's another kind of one to
122:03 - one and another kind of one to
many, many to many
122:06 - relationships. So complex
relationships can be modeled
122:10 - here in MySQL Workbench. The one
I'm looking for is this one that
122:14 - says a it's got a dotted line on
it, I always do this backwards,
122:19 - so I might have to delete my
links, but I'm going to try it
122:22 - anyway. So I'm going to click
once here. Now I'm not holding
122:25 - the button down, I just clicked
once. And I'm gonna go click a
122:28 - table. So let's try this one,
and then click this table, and
122:32 - it creates a link between them.
And sure enough, it's backwards.
122:36 - So look at the little marks at
the end of the row. And this was
122:40 - this is why I know it's
backwards. This says that on the
122:43 - side here is a triple link, it
looks like a bird's foot. And
122:49 - the other side has a single
link. So that means that for
122:53 - every one track, there are many
albums. So that's backwards,
122:58 - because the opposite is true.
Each album has many tracks. And
123:03 - each track belongs exactly to
one album. So I messed up. So I
123:09 - did that on purpose, actually,
because I wanted to show how to
123:12 - delete an item because it's so
oftenly done incorrectly. So I'm
123:15 - selecting the line there. And
I'm pressing Delete on the
123:18 - keyboard, it didn't work. Let's
try right click and choose
123:21 - Delete then. And it says you
want to delete this
123:23 - relationship. And I say delete,
and it's gone. Let's try it the
123:28 - other way. So I'm going to click
here again. This time, I'm
123:30 - clicking on the track and then
back to the album. And as you
123:34 - can see, now the relationship is
the opposite direction. So we
123:39 - have a single album matches with
many tracks. And then here
123:44 - there's a new item. It is the it
says at the bottom albums ID. So
123:50 - this is the foreign key. The
Foreign Key says we're going to
123:54 - store a number in the table that
tells us which album we belong
123:59 - to. So each album has an ID
number. And each track has an
124:04 - associated album to go with it.
124:08 - Okay, so that is our model. Now
we're going to try to
124:11 - synchronize this to our
database. Now when we do this
124:14 - synchronization, we're going to
encounter an error. And I'm
124:18 - going to leave the error on the
screen because it's so common.
124:21 - And so we'll fix that up. So the
first time we do this, it will
124:23 - not work. But here's the
attempt. So if I want to
124:27 - resynchronize my database, I
click here. And I can choose two
124:32 - things I can choose forward
engineer which will erase my
124:36 - current database and replace it
with a model on the screen. Or I
124:39 - can try synchronize model now
where is that so synchronized
124:43 - down here. So this is the one
that I prefer. So let's try
124:46 - synchronize. Now we're going to
see the same choices here. We
124:51 - have a server number and then a
password so we have not updated
124:56 - the database yet. This is the
process of changing
125:00 - The model in our database. Let's
see, click next.
125:04 - Now, I'm not going to do any of
these checks here. So click Next
125:07 - again, it says make sure that
you connect. So I type in the
125:10 - word root for my password. Click
OK. Says that was correct. Let's
125:16 - go to next again. Now it says
which database are you trying to
125:20 - synchronize. And so I am using
music too. Let's click Next
125:25 - again.
125:27 - And it says it's connected.
Let's click Next. And now you
125:31 - can see a preview of what's
going to change. So the albums
125:37 - and tracks tables are currently
in the design that I just drew,
125:41 - we're going to synchronize it
with the database, which has a
125:45 - existing albums table. And then
the second item is a new table.
125:51 - So when I select one of these,
you can see that there is a
125:55 - statement below. So this is the
SQL statement that is going to
125:59 - be executed, if you wanted to
use the command prompt and type
126:03 - all of this out, you could,
you'd have to know every single
126:07 - type of exception and option to
be able to type this correctly,
126:12 - which is why I always use MySQL
Workbench, because honestly, I
126:16 - can't remember all of these
things very well.
126:19 - So this isn't going to work. But
we're going to try it anyway. So
126:22 - let's click Next.
126:24 - And it gives us the preview. So
preview the changes. So it's
126:29 - going to say I'm going to create
a table, the table is going to
126:32 - be called tracks, it's going to
be in the music to database,
126:36 - it's going to have all of these
columns, and then it's going to
126:38 - have some primary keys going on
here. And this problem right
126:42 - here, the word visible is going
to cause our problem to halt.
126:47 - It's not going to work. And I'll
show you why. So let's execute,
126:52 - login.
126:54 - And you can see we have a
problem. So this is so common
126:58 - people Google this all the time
to find out. Why can't I
127:02 - synchronize? It doesn't tell me
why. It just says there's a
127:04 - problem. And here's what the
problem is. So we're going to
127:08 - close this. So the
synchronization failed. Here's
127:11 - what the problem is, we have a
version number here. So if I go
127:14 - to Edit, and preferences,
127:18 - and then I select the modeling
my sequel, we're going to have a
127:24 - version number. So this tool is
set up to synchronize with
127:29 - MySQL, eight dot something 8028.
Now, if you already have version
127:36 - eight on your computer, then you
didn't receive any errors. But
127:39 - more than likely, you have an
older version like I do. So
127:42 - let's go and check out MAMP and
see what version we're running.
127:47 - So I click here, choose MAMP
preferences. And let's go to
127:53 - server does it tell us here it
does. So our database server is
127:57 - running version 5724. So you can
see the difference now, version
128:03 - eight, version five, it doesn't
work. So I have to tell my
128:09 - sequel workbench that this is
the version I am targeting 5724.
128:14 - So I'm going to come back to
here and type that in. So I
128:16 - could probably just type in 5.0.
So I have to actually set this
128:20 - to version five to perhaps I
just had an error when I tried
128:23 - five to seven. So let's try 5.2.
And now I'm ready to synchronize
128:28 - the models. So the two tables
are here. And this ER diagram is
128:33 - on the screen. If for some
reason you want to save this
128:35 - diagram, you can you can go to
File and Save. And if you lose
128:38 - it, you can bring it back.
Anyway, I'm going to go to the
128:41 - synchronized now. So let's
choose database. And let's try
128:44 - synchronize the model. And then
we're going to log in and try to
128:49 - see what happens. So let's see
put in our password. And choose
128:53 - Next, making sure that's music
to is selected. Next again, next
128:59 - again,
129:01 - previewing the settings here. So
if I click here, you're going to
129:04 - scroll down and see the same
thing except for this index no
129:09 - longer has the word visible in
it. That's the change between
129:12 - SQL, MySQL five and MySQL eight,
at least in this one case. So
129:17 - let's click Next. And let's
preview it if you want, you can
129:21 - see all the commands and then
choose execute. This time there
129:25 - are no errors. So I'm feeling
better about this. Let's go
129:28 - ahead and choose Close. So we
have now a foreign key. Now
129:34 - let's go back to our other tool.
This is the my admin tool from
129:39 - PHP. So I'm going to collapse
music and look at music too. So
129:44 - let's go ahead and create click
this green arrow or refresh the
129:47 - page either one and let's see
what comes up now. So I open up
129:52 - the schema called Music two and
now I have two items here I have
129:56 - albums and that looks the same
as it did before no change but
130:00 - I have tracks. So now I want to
insert some items into the
130:03 - tracks table. So I'm going to
pick one of the album's that
130:06 - I've already looked at. And I'm
choosing Abbey Road. I hope that
130:11 - Wikipedia has a list of the
songs here on lb Abbey Road.
130:14 - Okay, here's one. So come
together is one of the songs. So
130:18 - I'm going to insert some data
here into my table. So I'm going
130:23 - to copy come together, and then
switch back into my, my PHP
130:29 - admin. So I'm in the tracks
table. And I'm going to choose
130:32 - Insert. And the track title, I'm
going to paste that in. So come
130:37 - together is the name. So the
number on this thing, it's track
130:41 - number one and the album. And
now I need a video URL. So the
130:47 - video URL that I'm looking for
is on YouTube, of course. So
130:51 - let's, let's play the song here.
And you can see that I've got
130:55 - the right one. So this has come
together. So I'm going to just
130:58 - swipe the URL from the command
bar or the URL address bar here
131:02 - at the top and choose Copy.
131:05 - Let's stop that. And now I'm
going to go back and insert it
131:08 - here where it says Video URL. So
it's just a text string, but it
131:13 - will link us to a video. So how
nice is that? Okay, down here,
131:16 - the lyrics don't have the
lyrics. So I'm looking for the
131:20 - lyrics. So I Google it. And sure
enough, here comes a whole bunch
131:23 - of stuff. So let's go ahead and
copy all of this words that
131:27 - Google gives us. And let's try
that. Okay, so I'm gonna copy
131:32 - this, and paste it into the
lyrics section. So now I have
131:36 - come together Yeah, as my
lyrics. And then the finally we
131:40 - have a foreign key. So when I
choose an album number, it's
131:44 - going to save, I'm going to
force you into one of these
131:47 - albums. So you can see the
bottom group here has the number
131:49 - of the album listed first. So
three in Abbey Road, the top
131:54 - group is reversed. So Abbey,
road three is the order, you can
131:58 - pick either one of these, and
they'll both work. So I'm going
132:00 - to choose three and choose go.
Now this insert command was
132:05 - successful, you can see that
there was one row inserted. And
132:09 - then it gives me the SQL
statement that was done here. So
132:12 - all of this here is what I
didn't have to type, it did it
132:16 - for me. But you can see the
statement and how the work goes.
132:20 - So it's insert into the tracks
table. It lists all of the
132:25 - column names, and then the
values. So you notice the no
132:29 - value for ID is listed. So
that's auto increment. The rest
132:33 - of the stuff is all things that
we just entered in the form. So
132:35 - come together, one, the URL and
everything else. So that is how
132:41 - to insert. Let's go ahead and
browse the table, and you can
132:44 - see that we have one item come
together. So here's your
132:47 - homework, I need you to put in
two or three different tracks
132:53 - for each of the albums in your
collection. So use the same
132:56 - process that I did go looking on
Wikipedia or wherever else you
133:01 - can find the resources. And
especially make sure that you
133:04 - get the video URL from something
on YouTube. And then we're ready
133:08 - to go on to the next step. In
the next part of the video,
133:11 - we're going to use table joins.
So we created a foreign key. And
133:15 - now the next step is to select
items using that foreign key to
133:20 - be able to use in our
application. So we're moving
133:23 - ahead, and you're getting
Smarter Every Day with SQL see
133:27 - in the next video.
133:42 - Hi, welcome back to another
tutorial in our SQL database
133:46 - application. In this tutorial,
we're going to work with joins.
133:50 - So if you look at the table of
contents of all the things that
133:53 - we've learned, we're up to the
end of row two here. So table
133:56 - joins is the ability to take two
tables and put them together.
134:01 - Here's the entire playlist of
everything that we're learning,
134:04 - so make sure that you stick
around for the rest of it. My
134:06 - name is shad Sluiter, and I
teach software development at
134:09 - Grand Canyon University. So I'm
welcoming you to come to class
134:13 - with me in this virtual ways so
that you can become a
134:15 - professional developer. So let's
get started with this next
134:18 - section. So this is how the
application is going to look by
134:21 - the time we're done with this
video. So you can see that if I
134:23 - click an item, up on the top
section, I have an album title.
134:28 - And then when I click it, the
bottom table is refreshed so
134:32 - that it includes the tracks. So
for instance, the help album has
134:37 - three tracks and it has helped
the the night before and then
134:41 - Ticket to Ride. So I can't play
the video yet. There's going to
134:45 - be a video player over here
soon. So this is where we're
134:48 - going we're gonna have a second
table of data that depends on
134:52 - the items that are in the first
table. So in the first section
134:55 - here, we're going to add a few
items to our form. So let's
134:58 - start with the user interface.
135:00 - is designed. So the first thing
I need to do is add a label and
135:03 - then another grid view. So I'm
just going to drag in a label.
135:07 - And then after I put it there,
I'm going to give it a new name.
135:10 - So it's going to have the text
as tracks. And then below that,
135:14 - let's put in a new data grid
view class or a new object. And
135:20 - we'll resize it so that we leave
some space over on the right
135:23 - side, because we're going to put
a video player there eventually,
135:26 - but not in this video, but
coming up soon. So that's the
135:29 - only changes we have to make to
the user interface. So the most
135:32 - of the work here and this part
is going to go in the code where
135:35 - we fetch data. So the part I
want to work on first is in the
135:39 - album's Dao. So let's just
refresh our memory what albums
135:43 - Dao has, I'm going to select the
first item and collapse it, and
135:48 - then the second method, and so
we have search, we have ADD, and
135:52 - we have get all so those are the
three things that we see here.
135:57 - So we're going to make a another
item here that will fetch all of
136:00 - the tracks from the database
that match an album. Now, if you
136:05 - recall from the previous
tutorial, we created this
136:08 - foreign key relationships so
that way, we have tracks that
136:12 - have an album ID number in their
table. So that's how we're able
136:15 - to make this work. So I like to
reuse code and then manipulate
136:19 - it so I don't have to type so
much. So I'm going to copy all
136:22 - of the lines for the method for
searching for albums. So let's
136:27 - select everything from the top
to the bottom. And I'm going to
136:31 - paste this new method down at
the bottom of the class, then
136:35 - I'd have no need to rename it.
So I go back up to line 122, it
136:39 - looks like in my file, and I'm
going to name this thing as get
136:43 - track for album or get tracks
for album. And the parameter
136:48 - that we're going to expect to be
provided here is an integer. So
136:51 - we're going to get the album ID
and return a list of tracks. So
136:58 - that'll be similar to searching
for a name, but a few changes.
137:03 - So let's make those changes now.
So the first change we're going
137:06 - to make is we're going to return
a list of tracks instead of a
137:10 - list of albums. So I replaced
the word album with track. And
137:14 - you can see that the computer
doesn't know what a track is
137:17 - yet, we haven't defined that.
We've just made a database full
137:20 - of tracks, but we haven't given
an object to our application. So
137:24 - usually those two things go
together. So let's make one. So
137:27 - I'm going to go to the
suggestions. So I hover over
137:30 - track and shows potential items.
And it says here generate track.
137:37 - And it says Where would you like
to put that I'm going to select
137:39 - the first item, which is in a
new file. So I select that. And
137:43 - then over here, you can see that
track is now defined. So it has
137:47 - no properties, we can put those
in now. But that was just one
137:51 - way to make a new class. So
let's go put all the properties
137:54 - in that are in our database. So
the first property of the class
137:58 - is the ID number, which is an
integer. And then I'm going to
138:01 - get the next suggestion, which
is a string with a name. So the
138:05 - name of the track is our second
property. The third property is
138:09 - going to be the number which is
the track number on the album,
138:12 - which is an integer. And then we
go on to the video URL, the
138:16 - video URL is a string. And then
finally, we have a lyrics
138:21 - property, which is also a
string. So we define all these
138:25 - things. And now we're able to
create new instances of tracks.
138:28 - So let's go ahead and save this
and go back into the DAO class.
138:33 - So I switch back into Dao. And
you can see that now track is
138:36 - defined. So there is no error on
line 125, we're not going to do
138:41 - any searching by name. So I'm
going to delete this wild
138:44 - phrase. Now here's where the
main part is going to take
138:48 - effect. So we are going to erase
this select statement and change
138:53 - it with another one. So what I
want to select then is every all
138:57 - the columns, so star from the
tracks table, and I'm going to
139:02 - have a WHERE statement where we
have a match of the album ID to
139:08 - some placeholder here, so we'll
call it at album ID. So let's
139:13 - double check to make sure I got
the right column name here,
139:16 - because I'm not quite sure that
album ID is what I actually
139:18 - chose. So let's go back into the
MySQL admin and take a look at
139:22 - tracks. And you can see that
albums underscore id over here
139:27 - is the actual name. So that's
incorrectly typed in my code. So
139:32 - let's correct it here. And
they'll say, albums underscore
139:36 - id make sure that the column
name matches this property here.
139:40 - The next line down we have to
define what the parameter is. So
139:43 - it's at albums ID is the
placeholder that I used in the
139:47 - previous line. And then I have a
parameter called album ID. Now
139:51 - just to prove that I got that
right, let's scroll up just a
139:54 - few lines to see where that
comes from. So that's coming
139:57 - from here on line 122
140:00 - So we're passing an integer in,
which has to be valid. So we're
140:04 - going to get down to the for
loop now or the while loop where
140:06 - we do the reading of each line.
We're no longer reading albums,
140:10 - this is adapting to tracks now.
So let's change the type from
140:14 - album A to B track, and we'll
use T for a placeholder name.
140:18 - Now we can erase all of the
properties that we used for
140:21 - album and replace them. So we'll
go through the list of the
140:25 - anything that's in the table.
First of all, it's the ID, then
140:28 - it's the name, then it's the
number, then I believe it was
140:31 - the URL for the video. And then
finally, the lyrics. And so
140:36 - those are all properly given to
us with this nice type ahead
140:40 - help from Visual Studio. The
last item where we add something
140:44 - to the list of return these is
instead of a, we're going to
140:48 - change it to T because we're
changing tracks. Now it looks
140:52 - like I'm done, except I've got a
strange error at the bottom.
140:55 - Let's see what that is all
about. It says here, we've got a
140:59 - problem. It says you're trying
to return tracks, and you were
141:03 - promising albums. So let's
scroll up to see at the top of
141:06 - the function to see what's going
on here. So in this line here on
141:10 - 122, the datatype for the return
says album, and that's supposed
141:14 - to be tracks. So I think that's
everything we need. So this
141:17 - function here, or this method,
should be able to fetch all the
141:20 - tracks given an albums ID
number. Now, we can't test this
141:24 - out yet in the user interface.
Otherwise, I would go and run
141:28 - it. Now, we need to add
something else. So that way we
141:31 - can produce the proper output.
Okay, so let's start at the top
141:36 - now of our form one program and
look what we did to set up the
141:40 - data grid view, we had to have
something called a binding
141:43 - source. So let's create a
binding source for the second
141:46 - grid. So I'm going to name this
thing as tracks binding source.
141:51 - And we'll just instantiate a new
instance of it.
141:55 - Let's do some other code. So if
you looked at this button,
141:57 - click, we had a data source from
the get all albums and then
142:02 - assigned it to the binding
source. So we're not going to go
142:06 - through all that again, I'm just
going to borrow this and modify
142:09 - it. So let's copy here. And
let's come down to the bottom.
142:12 - Now, whenever we click the grid,
we want to be able to update the
142:16 - binding source for the second
grid. So let's go ahead and
142:18 - paste in some things that we had
before. So instead of albums
142:22 - binding source, I'm going to
have it as tracks binding
142:25 - source. And then you can see
that album's Dao is undefined
142:29 - inside of this function. So
let's create a new instance of
142:32 - it now. So we got a new
instance. And then we're going
142:36 - to redefine the function that
we're using just on the next
142:39 - line. So the function that we
created earlier, or the method
142:42 - is called Get tracks for album.
And then inside the parentheses,
142:47 - we need a, we need an album
number, well, we've just clicked
142:50 - something on the grid. That's
why we're in this function here.
142:53 - And we need to get something
from the click. So we have it
142:58 - right up here. It's on row 45.
This is telling me which row was
143:02 - clicked. So we'll just use that.
So what I want to get out of the
143:05 - data grid is the number or the
ID number of the album. So I can
143:10 - get that by saying go to the
data grid view, get the rows,
143:15 - tell me which row was clicked,
then I'm going to get columns
143:18 - zero, so that is cells, bracket
zero, and then give me the value
143:23 - of that. So that should be an
integer because the first column
143:27 - tells me the ID of the album.
Now you can see there's a
143:30 - problem here, it says, I'm
getting the value, but it's not
143:33 - guaranteed to be an integer. So
let's come down to show
143:35 - potential fixes. And choose Add
explicit cast. And so what's
143:40 - this little thing in the front
here, it says, make sure that
143:42 - this is an integer, and then
we'll convert it into something
143:46 - that we can use to look up by an
integer. The next line down says
143:50 - instead of data grid view to
one, let's change it to two. And
143:55 - instead of the album source,
let's change that to tracks. So
143:59 - it's the track
144:01 - tracks binding source. Okay, so
that apparently is going to
144:04 - work, I'm going to cross my
fingers and see what happens.
144:08 - Okay, got the app up and
running, I'm going to try
144:10 - loading the albums. And they
show up here. Now I'm going to
144:13 - click on Help. And you can see
that it went to the database and
144:16 - selected three items. So each of
these has a various numbers of
144:20 - tracks in them. So this shows us
the track and all of the
144:25 - properties that are there. Now,
we're not quite done yet,
144:28 - because I wanted to show you
what foreign keys can do when it
144:32 - comes to joining tables. Okay,
so that kind of takes us to the
144:35 - end of this part where we're
trying to put two tables on the
144:38 - screen. We didn't do exactly
joins in this lesson, but we did
144:42 - use results from two different
tables. So that kind of gets you
144:46 - one step further to the end. Now
take a look at what's coming up.
144:49 - We're going to do UML diagrams
and a few other things. So stick
144:52 - around, and we'll keep learning
SQL together.
145:11 - Hi, and welcome back to another
part for our SQL database
145:15 - application. In this section,
we're going to continue on with
145:18 - table joins. So if you've been
following along, we're here at
145:22 - the end of row two of our
contents. So table joins is what
145:26 - we're going to be working on,
you can see that we still have
145:29 - four more subjects that we're
going to cover. And by the time
145:31 - you're done, you'll be an expert
with working with SQL databases.
145:35 - My name is shad Sluiter, and I
teach software development at
145:38 - Grand Canyon University. And
you're in the middle of a
145:41 - process of learning how to write
sequel applications. So let's
145:45 - take a quick overview of where
we're going to be by the end of
145:48 - this video. So what you see on
the screen here is the database
145:52 - of our songs. And as you can
see, when I click one of the
145:55 - album titles, the rows below
show us the tracks. Now this is
146:00 - different than the previous
lesson that we did. You can see
146:03 - that the track titles here
include things like the album
146:06 - title, and it's listed three
times here for in this case, the
146:09 - word help. And then you can see
the other show the same results.
146:14 - So what we're going to do is
have custom headers for this
146:18 - bottom table. So you can see
that there's more table headers
146:22 - here that are actually saved in
the database. So how are we
146:26 - going to do that? Well, it's
through the magic of join. So
146:29 - the first part of this tutorial
is to work with the MyAdmin tool
146:33 - to create the joins, and then to
be able to put them into the
146:36 - application as you see it here.
So let's get to the first part,
146:39 - which is, what is a join. So
let's jump back into the tools
146:43 - where we were designing two
different tables and connecting
146:46 - them with a foreign key. So look
at this example here. So we have
146:50 - tracks as one table, and albums
as the other table. And this
146:54 - link, the foreign key shows us
that these two tables are
146:58 - related based on a number that's
saved in each of these columns.
147:03 - So the albums underscore ID
value here on the right always
147:09 - matches with one of the numbers
in the ID column of the albums
147:13 - table. That's the foreign key.
And we're going to use it to
147:16 - create joints. So I'm going to
jump now into the PHP myadmin
147:20 - page. And you can see that I
have the tables for albums and
147:24 - tracks listed here. So we have
contents in both tables. So
147:28 - there's actually values to be
able to search for now I'm
147:32 - selecting the tracks table, and
then I'm going to the sequel
147:35 - tab. And we're going to write a
select statement. So let's click
147:39 - on the word select. And you can
see that we have all of the
147:43 - column names listed for our
suggestion. And then it says
147:47 - here from the tracks table,
let's choose the Go button, and
147:51 - just check to see if it's
actually working. And so it says
147:54 - we have 11 different items that
have been selected. So now let's
147:58 - experiment with changing this
select statement into a join. So
148:02 - I'm going to select again. And
then I'm going to put in
148:05 - something at the very end. So
we're going to get rid of the
148:08 - where clause for a second. And
then I'm going to say join. So
148:11 - there is a join. And I'm going
to tell it the name. So the
148:15 - album's table, and then you have
to say the word on so after the
148:19 - word en then you put in the name
of the foreign key. So if I type
148:24 - in here albums ID, and then
you're going to say equals
148:28 - albums, and then you have.id. So
that's telling it which items in
148:33 - the table contain a foreign key
and two, which one it's
148:37 - associated with. So how did I
know to use those two? Well, I
148:41 - have this diagram in my mind
where I see that albums
148:45 - underscore ID is supposed to
equal albums.id, which is the
148:50 - item on the left. So it's always
a good idea just to check to see
148:54 - if you've written everything,
this will not change the results
148:57 - here. But I just want to make
sure I haven't caused an error.
148:59 - So I'm going to check, retain
the box and go. And sure enough,
149:03 - I do have an error. What's let's
see if we can understand it. It
149:06 - says down at the bottom, it says
column ID in the list is
149:11 - ambiguous. Now that's an
ambiguous error. I don't know
149:15 - what you mean. What that means
is that there are two tables
149:18 - here. And both of them have an
ID column. So if you look at the
149:22 - at the diagram, you can you can
see that right away. So tracks
149:24 - ID and albums ID are both called
ID. And when we join tables, it
149:31 - really wants us to be very clear
to say which table we're talking
149:35 - about. So let's do that. Let's
specify which table so let's
149:39 - scroll up and the problem is
occurring here where it says
149:42 - select ID so it doesn't know
which table to get it from now
149:45 - because we can select from both
tables. So let's put in here the
149:49 - word albums that's the name of
the table and then.id so that
149:54 - will be one selection. We could
also say give me the tracks dot
149:59 - i
150:00 - Add. And that is also valid.
Let's do the Go button now and
150:04 - see what comes up. So now the
results are valid, you can see
150:08 - that it says id and id. And we
can't really tell which one is
150:13 - which. So this is a case of
being ambiguous, it would be
150:17 - easier for us to understand the
results, if we didn't have just
150:21 - the word ID. So since it is kind
of difficult to distinguish the
150:24 - two, I'm going to rename them.
So I'll say, select albums.id as
150:30 - and then I'll put a new label
and a good name for this could
150:33 - be album ID. And the same goes
with the track ID. Let's now
150:36 - rename it as again using the
keyword as, and we'll say
150:40 - tracks.id As Track ID. Now let's
let's go again and see what that
150:46 - does. So scrolling down, I see
the results. And now it is very
150:49 - clear to say I know that the
first column is the album ID.
150:53 - The second column is the track
ID, that makes more sense. So
150:57 - the neat thing about joins is
that you can select columns from
151:01 - either table now, and they will
show up in the results. So let's
151:04 - say I wanted to, for some
reason, add the album title to
151:09 - each row in the search results.
So I can just put in there, put
151:12 - in albums dot album title. So
what does that do? Let's choose
151:17 - go. And let's see the results
now. And you can see that album
151:21 - title now is listed here. So
every row contains the album
151:26 - title along with the rest of the
items for each track. So we're
151:30 - selecting tracks, but we're
adding the album title as the
151:33 - search results. Now I'm going to
reduce the number of columns
151:36 - that we're selecting, because
that's a lot. So I'm going to
151:40 - remove a few things. So let's
get rid of the first item, which
151:42 - was the album ID, let's get rid
of that number. And I'm not sure
151:46 - what else I'm going to get rid
of. But I'm going to delete
151:48 - several of them to reduce it. So
that way when we do the search
151:51 - results, now I click go, we have
a fairly narrow items. So I have
151:56 - track title, track title, video,
URL, and lyrics. So those are
152:01 - the results from this particular
query. Now I'm going to take
152:05 - this query and attempt to use it
in my application. Okay, so now
152:10 - it's time to take that SQL
statement that was using a join.
152:14 - And we're going to bring it into
the application and see what
152:16 - consequences that has. So what I
want to do is in this form,
152:20 - whenever we click an album
title, I get the search results
152:24 - of the tracks below. So right
now, it just shows a list of
152:28 - tracks, which was working, but
we've changed the SQL query. So
152:31 - let's see what that does. So I'm
going into the data access
152:35 - object here. And I'm going to
copy the part that says Get
152:38 - tracks for albums. So let's
select everybody all the way to
152:42 - the last item and Ctrl C for a
copy, and then paste it. Now I'm
152:47 - going to make some changes here.
And so let's just rename this
152:51 - one as get tracks using join. So
right now as an identical piece
152:55 - of code, get tracks using join,
we're going to have to change
152:59 - the SQL statement now. So the
select statement comes from
153:02 - here. So we have this nice
statement that does join. So
153:05 - before I take this one step
further, I just want to add a
153:08 - WHERE statement, I'm going to
say where album's ID, and I'm
153:12 - going to put in something like a
three. So it's a placeholder
153:14 - three is a placeholder. So
let's, let's try that out,
153:17 - choose go. So the results are
that every item comes from
153:21 - album, number three, which is
Abbey Road. So that is the
153:25 - results because I said give me
ID equals three. So let's take
153:28 - this as our example. I'm going
to copy that. So now let's jump
153:32 - back into the code here. And I'm
going to erase this select
153:35 - statement that was there and
paste over top of it the newest
153:38 - version. So we've got albums ID
equals three. So the three isn't
153:43 - quite what I want, I want to
have this placeholder album ID.
153:47 - So that way, whatever we asked
for will match the album number.
153:51 - Okay, so we got a bunch of
columns that are selected, and
153:54 - then we return a track and then
hopefully we return the Okay, so
153:58 - now I'm going to come back into
the form one, and I'm going to
154:01 - change this code here. So this
method was get tracks for album.
154:05 - Let's see what up there is. Now
let's try get tracks for album
154:11 - using join. That's the new
method that I created. So should
154:15 - work, right I'm selecting let's
see what happens when I run it
154:18 - and what surprises might await
me. So I run the application, I
154:23 - choose Load the albums, and then
I'm going to select help, and we
154:28 - got a problem. So you can see
here that the track has, what
154:33 - five different properties. And
when we did a select with a
154:36 - joint statement, all of a sudden
we're selecting like six or
154:39 - seven column numbers. So you
can't just say put these column
154:43 - numbers into the properties of
the track object anymore. They
154:46 - just don't match anymore. We
can't We can't use this process
154:50 - as it's written. So I'm going to
fundamentally change what this
154:54 - method is supposed to return. So
right now it says give me a list
154:57 - of tracks. That's what the
return
155:00 - earned value is on line 169. So
what I want now instead is a
155:04 - something called the J object.
And let's see if we can do that
155:08 - it's probably going to cause a
problem. So I type in J object.
155:11 - And sure enough, it says I have
no idea what you're talking
155:14 - about. So J object is something
working with JSON text, which is
155:19 - a very flexible way to create
objects. And C sharp doesn't
155:22 - automatically know how to work
with JSON, you have to install a
155:25 - library. So let's go down to the
package installer, it says,
155:29 - Newton soft JSON. And we'll
install whatever it says is the
155:34 - most current package, and the
error goes away. Now let's check
155:38 - to see what was installed. So
I'm going to right click and
155:40 - choose Manage NuGet packages.
And let's check to see Yep, sure
155:44 - enough, we got Newton soft, or
Newtown soft, and it's installed
155:49 - here at version 1301. So now,
instead of returning a bunch of
155:52 - tracks, I need a bunch of J
objects. So down here in the
155:56 - reader area, we're going to
expect to add a new item, which
156:01 - is going to be of type J object.
So you're going to see what a J
156:04 - object is in a minute, I'm going
to print it so you can actually
156:07 - see them. So for right now just
let you know that it's a very
156:09 - flexible object, it's kind of
like making a track object or an
156:13 - album object, except it has a
flexible number of columns and
156:16 - properties. So we're going to
create a new one, it's called
156:19 - new track. And then I'm going to
add it to my list of return
156:22 - items. So it says here, you got
a problem. So new track is not
156:26 - the right type. So let's scroll
up a little bit. And I have a
156:29 - list of things called tracks
here. And let's change that to J
156:33 - object. And that way will be
compatible.
156:39 - Okay, so return these is of type
J object. Okay, so the errors go
156:43 - away, we're not quite done, we
need to get all of the
156:45 - properties from each column name
yet. And so that's what we're
156:48 - going to do here. Okay, I need
to cut that out and put it in
156:51 - the while loop. So we're going
to make a new object and then
156:54 - add it to the list. So for each
column that I select, or each
156:59 - column that I read, I'm going to
put it into this J object. So
157:03 - I'm going to make a for loop.
And I'm going to say go from for
157:06 - i equals zero to the length or
the field count of the reader.
157:11 - So the reader read a row, and it
has a bunch of columns in it.
157:15 - And the property called Field
count tells me exactly how many
157:18 - columns there are. So it's a
flexible amount.
157:22 - Now I want to add some rows, or
I am going to add some
157:25 - properties to my new track
object here. So I'm going to say
157:29 - new track dot add. Now we need
two things, we need a property
157:33 - name and a property value. And
we can get those from the
157:37 - reader. The first is to get the
readers name property for this
157:42 - thing. So let's say reader dot
get name at column i. So i goes
157:48 - from zero to the number of
columns. And so that will be a
157:52 - string. That will be the first
half of the property, the second
157:55 - half is the value. So to get the
value, we have a similar item,
158:00 - we say reader dot get value at
position i. So that means we
158:05 - have two parts to each column,
we have its column name, plus
158:08 - its property value. All right,
so check all that out. I think
158:12 - we got the columns all correctly
now. So this will be flexible
158:15 - for the number of columns that
we're reading. And then we're
158:18 - going to return it to our our
other part of the application.
158:22 - So let's go to form one. So now
we come back into our form one,
158:26 - and let's see what happens when
I run this. So now I click on
158:29 - Load albums, and I get everybody
and I click on Help. And this
158:32 - time, you can see that the
select statement is only
158:35 - selecting a few rows. So we have
fewer items across there, but
158:40 - they're flexible in number. So
if I change the columns that I'm
158:44 - selecting, the bottom tables
should be flexible as well. So
158:47 - let's test out that theory. So
I'm going to come back down to
158:50 - here, and I'm going to for
whatever reason is I'm going to
158:54 - leave out the lyrics. So let's
just delete lyrics. And we have
158:58 - one less column. Let's run it
and see if that is as responsive
159:01 - as I promised that it would be.
So here we go. Let's load the
159:04 - album's. And we try help again.
And sure enough, the lyrics
159:09 - column is gone. So I just didn't
need it for this part of the
159:12 - application. So you can add more
columns and subtract columns to
159:17 - the magic of this JSON object.
So this is not only a lesson
159:21 - here and running sequel, but a
little bit in C Sharp and how
159:24 - JSON text is handled. So JSON is
pretty common, you can see that
159:28 - the advantage is that you're no
longer tied to the static number
159:34 - of columns in a thing like this,
like the track or if we created
159:38 - a custom class called a data
transfer object or a DTO, which
159:42 - takes the number of columns and
into effect. So JSON was
159:46 - invented to work with
JavaScript, but all other
159:48 - languages, including C sharp
have adopted it, and you can see
159:52 - the flexibility of it. So we've
moved on to another section. So
159:55 - let's get to the bottom row now
and continue to learn about our
159:59 - SQL application.
160:00 - shins, we're going to talk about
UML diagrams, and how they are
160:03 - used in design. That's coming up
next.
160:16 - Hi, welcome back to another
piece of our SQL application
160:19 - tutorial. In this part of the
video, we're going to pause on
160:22 - the coding and talk about
design. So the subject is u m l
160:26 - diagrams. Now most students of
mine would say that design is
160:30 - not the thing that they would
prefer to do, but I forced you
160:33 - to do it because it turns you
into far more organized in your
160:38 - mindset, and your projects
turnout on time, and with far
160:43 - fewer errors. So it's good to
invest the time my name is shed
160:46 - Sluiter and I teach software
development at Grand Canyon
160:49 - University. So you can check out
my tutorials on steady
160:52 - coding.org. Or you can subscribe
to my channel. So the first
160:56 - thing I want to show you is a
UML diagram for our current
161:00 - application. So you're familiar
with our music app. So this
161:03 - diagram shows two classes that
hold our data. So you can see on
161:08 - the left side, we have an albums
class, and the right side is a
161:12 - track class. So these are in the
C sharp code. This is not
161:16 - necessarily in the database yet,
but they're very closely
161:19 - related. Here's another diagram,
this is called an ER diagram or
161:23 - an entity resource diagram. And
this should look familiar to
161:27 - because we built this directly
out of the MySQL workbench tool.
161:32 - And so you can see that there
are two tables joined by a
161:35 - foreign key. Now you're supposed
to see that these are very
161:39 - closely related in this case. So
this isn't always the case.
161:43 - Sometimes Java classes or C
sharp classes have a lot more
161:46 - methods and properties in them.
So the bottom line here where it
161:50 - says method have pretty much
ignored because we're just using
161:53 - these classes to hold data. So
UML is on the left, er is on the
161:57 - right. Now, you'll also see that
there are some different
162:00 - connectors between the classes.
So classes can be associated,
162:05 - they can have aggregation, and
they can have composition. So in
162:09 - the first case, if we were to
say a bicycle as a class, it
162:13 - could be associated to an owner.
So it doesn't necessarily have
162:17 - to have an owner. But it could,
however, in the second part, we
162:21 - can see that there is an
essential piece. So if we were
162:24 - to design the bicycle class, so
that it had more components,
162:28 - such as frame parts, these would
be called composition. Because
162:34 - the part itself is useless
without the parent, or some kind
162:39 - of a component that really has
no purpose apart from a bicycle.
162:43 - Now you can make the argument
that some things like a wheel
162:46 - here at the bottom, a wheel can
exist without the bicycle, it's
162:50 - not very useful, but you can
imagine it. So it's kind of a
162:53 - fine distinction when you talk
about composition and
162:56 - aggregation. So in the case of
our application, I chose to use
162:59 - aggregation here in the UML
diagram, you can see that a
163:03 - track is part of a album. And so
the album has a property called
163:07 - a list of tracks. So you could
argue that tracks can't exist
163:13 - without an album. But you can
release a single I think so I
163:16 - chose aggregation to represent
this in the UML diagram. Now, if
163:20 - I started to ask for new
features in your app, the first
163:23 - thing I would do is to send you
to the drawing board. And I
163:26 - would say, let's add some
comments. And before we even
163:31 - start coding, I want you to draw
the picture of how we're going
163:34 - to handle these. And so we would
add a comments table to the
163:38 - database, wouldn't we? And you
can see that we would have a
163:40 - foreign key so that each comment
is associated with a track. Now
163:47 - the track can have multiple
comments. So that's a one to
163:50 - many relationship. So that's
what the tables would look like
163:53 - if we were to make an ER diagram
for a comments part. Now in the
163:58 - design for the application
itself, we would have an
164:00 - associated UML diagram. And so
you can see almost the same
164:04 - thing happening here. In this
case, I used a little black
164:07 - diamond to indicate that
comments are a composition
164:11 - relationship to their track. The
reason I chose composition was
164:15 - because if you were to delete a
track from the system, the
164:18 - associated comments would have
nowhere to go. And so a comment
164:22 - should not exist apart from its
parent should not exist apart
164:27 - from a track. So on the left
side, you can see that the
164:29 - relationship between a track and
an album is labeled as
164:33 - aggregation. That's because a
track could exist apart from an
164:36 - album. However, on the right
side, I have labeled the
164:40 - comments and tracks as a
composition relationship.
164:44 - Because a comment should not
exist unless there is an
164:47 - associated track. Now let's add
some more features. Let's say if
164:50 - I were to add users and artists
to the tables. So you can see
164:56 - that now a comment is associated
not using a string
165:00 - For the user name, but an entire
class called user, so the user
165:05 - can have maybe a login screen
could have a password could have
165:09 - a bio, I don't know what you
would put in a user class. But
165:12 - you can imagine all of the
things that go into a user, same
165:15 - thing goes with the artist over
here. So instead of just using a
165:19 - string, and saying that this
album belongs to the Beatles, we
165:23 - could say that the artist has
multiple pieces, we can have a
165:26 - little biography on the artist,
we can have a list of all albums
165:30 - that the artists have has. And
so your your application starts
165:34 - to grow, adding new classes that
are related to each other. So
165:38 - then associated with that would
be the database. So the
165:41 - associated ER diagram shows all
of the tables, and the
165:45 - relationships and the foreign
keys that go with them. Now, by
165:48 - the end of this course, I'm
going to ask you to create some
165:50 - challenge activities. And those
are going to include things like
165:53 - comments. So keep this in mind,
because we're going to see that
165:56 - soon. In the next video, I'm
going to show you how to do
165:59 - something called compound
queries, which is really two
166:02 - queries kind of combined into
one action. So we'll do that
166:05 - next.
166:20 - Hi, and welcome to another
tutorial for our SQL database
166:23 - application. So in this part of
the tutorial, we're going to go
166:26 - to this section here called
compound queries. So we're going
166:29 - to combine one result with
another. And we're just going to
166:32 - refactor some of the code that
we developed in earlier
166:35 - sections. So here's the design
that I'm referring to. So on the
166:38 - left, we have the UML. And we
have the right, which is an ER
166:42 - diagram. So we're going to be
modifying our model here. So you
166:46 - can see about the last line in
the album properties is a list
166:50 - of tracks. And so that's what
we're going to implement here in
166:54 - this video. My name is shad
Sluiter, and I teach software
166:57 - development at Grand Canyon
University. So welcome to class,
167:01 - make sure that you check out
study coding.org To get the full
167:04 - playlist and other courses as
well, I want you to come along
167:08 - and become a software engineer
just like many of my students.
167:11 - So just to be clear, the
application that you see is
167:14 - going to look the same. So I got
the same actions going on here.
167:17 - So when I select an album, I
have the tracks appear in the
167:21 - second table on the application
form. So we're not changing the
167:25 - look, we're just changing the
design. So let's get started in
167:28 - the code. So the first place I
want to go is into the album's
167:32 - class. And some time ago, I left
a note here that said, we're
167:35 - going to later make a list of
tracks as part of the properties
167:39 - here. And so that's what we're
going to do right now. So I want
167:41 - to show that we have a list of
type track, and we're going to
167:44 - use the get and set properties
and make it public. The next
167:47 - part we're going to adopt here
is the album's Dao. So I've
167:51 - collapsed all of the methods
that are in this class just so
167:54 - that we can get a summary of
what we've made. So you can see
167:57 - we have a method to get all the
albums to search for albums by
168:00 - title to add an album. And then
we have two different selectors
168:04 - at the bottom one is getting the
tracks for the album. And then
168:08 - the second item here was also
forgetting tracks using a join
168:12 - statement. So joining meant that
we could have a flexible number
168:17 - of columns. So we're going to be
modifying the the get all albums
168:21 - method here. And we're going to
use the get tracks for album as
168:25 - a kind of a secondary helper. So
let's get into the get all
168:29 - albums. So you can see that I'm
inserting right below the place
168:32 - where we just fetched a new
album, I'm going to now add the
168:37 - tracks property to this variable
called a so a dot tracks equals,
168:43 - and then I can go to another
method in this in this class
168:47 - here to get those tracks. So get
tracks for album is another
168:51 - helper methods we're going to
use. Now the part that's missing
168:54 - here is that it's expecting a
number. So let's type in A, and
168:58 - let's get the let's see, I think
it's the ID number. Yes, it is.
169:01 - So if we provide the ID number
for this album, we should be
169:05 - able to get all the tracks and
then add them to the list of
169:09 - things that we're returning. So
that's a small change here. But
169:12 - it's going to allow us to save
all the tracks at the same time
169:16 - we fetch the album. Now that
we've returned all the tracks as
169:19 - well as the album, we can modify
what we do in our form one. So
169:23 - here we are in form one, I'm
going to the very top, and I'm
169:26 - going to add one new item. So
I'm going to save a Global list
169:30 - of albums that we can refer to
after it's been fetched. So
169:34 - we'll make a list called albums.
Now, just to prove to you that I
169:39 - can use this list, I'm going to
define it here in line 21. And
169:43 - I'm going to fetch all the
albums and assign it to this
169:47 - list. And then the next step
down, let's assign the data
169:51 - source for the control to the
list. So it's an intermediate
169:54 - step. We've just kind of a
temporary placeholder. But we
169:57 - can fetch this again without
going
170:00 - Add to the database and you'll
see that in a second. Now there
170:02 - is an important difference
though. So the album's now
170:05 - contain a property that includes
the list of all tracks, so we
170:09 - don't have to go back later and
fetch those again. So the next
170:12 - section I want to work on is
down here in the data grid view,
170:15 - click an event item. So when we
click an event, in the current
170:20 - stage, what we have right here
are several lines that go back
170:24 - to the database to get the
tracks. And that's where we're
170:27 - going to change the main point
of this lesson. So right now it
170:30 - is going to the database to get
its values. And we're just now
170:33 - going to use the list that we
have stored in memory. So I have
170:37 - to know that on line 46, I know
which row number was clicked. So
170:42 - that also tells me which album
was clicked. So let's use that
170:46 - to our advantage. So I can wipe
out any reference to the
170:49 - database now. And its next is to
just get the item that was
170:53 - clicked. And so albums Add Row
clicked. And that tells me which
170:58 - row number of which album it is.
And I'll just swipe the tracks
171:02 - from that list. It's already
been saved there. So I just
171:05 - reference it. So let's see if
that works. I'm going to run the
171:07 - app now. Alright, here we go. So
I'm going to choose Load albums,
171:10 - and let it fetch from the
database. There's my list. So
171:13 - let's go ahead and click
something like help and see what
171:16 - we get. So we can see that one
of the tracks has help and the
171:19 - other two, so Abbey Road, what
does it contain, it shows come
171:23 - together, and here comes the
sun. So we've got ourselves a
171:27 - list that appears to work the
same as it did before, but we've
171:30 - just refactored it. Now one
final word about doing compound
171:35 - queries. So you can see here in
the album's Dao, I am referring
171:40 - to the database twice. So in the
second time, when I go and get
171:44 - the tracks, I am going through
another loop. So the more times
171:49 - you add a request inside of a
request, your database or
171:54 - response time will become less
and less. So be careful how many
171:57 - times you are calling references
to another table because you are
172:01 - growing exponentially in the
complexity of your for loops. So
172:06 - if you select something in a for
loop, and then another thing
172:10 - inside that for loop, you're
going from squared to cubed into
172:14 - quadrupled and the power so you
can really slow down your
172:18 - database with these kinds of
reactions. Now there are ways to
172:22 - make this work better, including
indexing, or if you go to a
172:26 - different structure altogether,
instead of SQL, you could work
172:29 - with maybe a no SQL database,
such as MongoDB. But that's for
172:33 - another course. And so we're
trying to learn SQL right now.
172:36 - So we're going to do some
deletions from the database. And
172:39 - also I promised you that we're
going to have a video player. So
172:42 - we'll maybe we'll sneak that in
next time. See us soon.
172:59 - Hi, and welcome back to another
tutorial for our SQL database
173:02 - application. In this tutorial,
we're going to learn how to use
173:05 - the delete statement. So this is
the contents of all of the items
173:08 - in the course that we've looked
at so far. So we're on the
173:11 - second to last item, which is
deleted. My name is shed
173:15 - Sluiter, and I teach software
development at Grand Canyon
173:17 - University. I'm glad you're here
in class, and you too can become
173:21 - a professional web developer,
you can find all the courses
173:24 - that I teach at study
coding.org. So make sure you
173:26 - sign up there and get a great
career. So let's take a look at
173:30 - how we're going to finish off
this tutorial. So this is the
173:34 - app as we have it right now I'm
going to select something like
173:37 - Yellow Submarine. And you can
see the new item that I have
173:41 - below is now a button that says
Delete selected. So let's click
173:44 - there. And I get a results says
one item was deleted. Click OK.
173:50 - And it blinks off. Now if I
choose yellow submarine again,
173:53 - you can see that the item is
deleted. So that's what we're
173:56 - trying to do is delete a track
will save deleting an album for
174:01 - another part. But we're trying
to delete tracks in this part.
174:04 - So there are several steps we're
going to accomplish. First of
174:07 - all, we're going to add a button
to the form, then we're going to
174:10 - add an item to the Dao. And then
when we're all done there, we
174:15 - should have our application
working. So let's start here
174:18 - with the form. And I'm going to
just drag a button in. So we're
174:21 - going to put a button in right
below the table. And let's put
174:24 - the text on the button to say
delete selected track. Now this
174:28 - isn't the most fancy user
interface you've ever seen. But
174:32 - remember, our focus here is
about building a SQL database.
174:36 - Alright, so we got the button
here. So let's double click it.
174:39 - So now we need to get in this
event, we need to get whatever
174:42 - was selected in the table and
then call a delete command. So
174:45 - I'm going to scroll up here and
I'm going to grab some code that
174:48 - will come in useful here. What I
want to do is make sure that I
174:51 - have the number that is selected
in the grid. So this here, this
174:57 - row clicked is the value that
I'm going to use
175:00 - Oops, I'm gonna copy that. And
let's bring it down to our last
175:03 - item. So I want to make sure
that the date of it grid view, I
175:07 - think it's number two gets the
item. So let's, let's put in the
175:12 - grid two, and then we're going
to uncomment the line, just to
175:16 - see if this is working. Let's
test it out. All right, we got
175:19 - the app up and running. Let's go
ahead and choose Load the
175:21 - albums. Let's try help. I
believe there are three items
175:24 - here. So I'm going to pick the
night before and choose Delete
175:28 - selected, it says you clicked
row one. So let's try this guy
175:32 - and do it again. And this
doesn't seem to indicate that
175:35 - it's got the row number correct.
Now, I don't want the row
175:38 - number, I want the ID number.
And you can see that in my
175:41 - example, 2728 and 30 are the ID
numbers that I'm interested in.
175:45 - So I have to fetch the value
from that column, to be able to
175:49 - get that value, I'm going to go
back up to row 86, it looks like
175:52 - so there was a statement here
that says we're going to get the
175:55 - row clicked, and then get the
value out of one of the cells.
175:59 - So I'll copy him. Alright, so
let's go ahead and paste that
176:02 - item into there. And it says
here, data grid view needs to
176:06 - have a more specific name, let's
try number two. And I'm going to
176:10 - save this as an integer. And
instead of video URL, let's call
176:14 - this thing Track ID. Now I've
got almost everything there
176:18 - don't I know this is a string,
this needs to get out of the
176:21 - way. And I want to have the
cells at column zero. So all of
176:27 - that now tells me to fetch the
ID number out of the grid, we
176:32 - still have a problem, though, we
have an underline. And let's
176:36 - check to see what it says. It
says here, you're trying to
176:40 - convert something called an
object to an integer. So what
176:44 - that means is, there's no
guarantee that column zero has
176:49 - the integers in it, there might
be an integer there, if I saved
176:53 - it in the database as an
integer. So I'm going to assume
176:55 - that it's there. And what I need
to do then is tell it, we're
176:58 - going to cast the whatever comes
out of that row and put it into
177:02 - an integer type. So there's a
potential for issue that the app
177:06 - could crash because, well, the
database might not have actually
177:10 - an integer there. But remember,
this is trying to make this as
177:13 - fast as possible. No error
checking really going on. Now
177:17 - I've got this integer here,
let's see if it actually is an
177:20 - integer, we'll put a message box
in just to confirm that that's
177:23 - actually what we're getting, I'm
going to put in a message box
177:26 - that says ID of track equals and
then we're going to put in the
177:31 - track ID value. Let's test that
out. Once again, the apps
177:34 - running, let's go ahead and
choose an album. And then after
177:37 - I have the album, I'm going to
pick something. So let's select
177:40 - somebody like Ticket to Ride and
then click the Delete button. It
177:44 - says you are on row two clicked
OK. And it says Track ID is 30,
177:49 - which seems to indicate correct.
So now it's time to advance
177:53 - where we can take that ID 30 and
ask the database to delete that
177:58 - value, delete that track number.
So in the next row down, I'm
178:03 - going to call upon our Dao. And
we're going to call the delete
178:08 - method. So let's make an
instance of the Dao. And then
178:12 - we're going to make a new call
to it that doesn't exist yet. I
178:15 - want to save the results of that
as an integer. And I'm just
178:17 - going to call it result because
I think it's the number of rows
178:20 - deleted, but I'm not sure I'll
test it out. So I'm just going
178:23 - to call it result, I'm going to
be equal to the DAO dot. And
178:28 - I'll invent a new method called
delete track, and provide it
178:32 - with the ID number of the track.
So now that we're done with
178:36 - that, you're going to see that
there's an underline, not quite
178:39 - finished yet. But we do need to
confirm something happened. So
178:42 - let's put another message box in
to say the result. So what are
178:46 - we going to do with this delete
track, it doesn't exist, as you
178:48 - can see. So if I hover over the
error, you're going to say there
178:52 - is no method found there. So
let's ask for it to generate a
178:57 - result for us. So when I click
that link, it should go into the
179:01 - other class and create that
method. For us. It's probably
179:05 - not implemented, but at least
it's there. Let's go see what
179:08 - happens. So I'm gonna go over to
the album's Dao and open it up.
179:12 - And you can see that I have the
previous methods here, I have
179:15 - get search add, and here it is
delete track. So this is brand
179:20 - new, it returns an integer, and
it accepts something called the
179:23 - track ID. We're on the right
track. Now let's see if we can
179:27 - add the code to make this
happen. So let's go to the
179:29 - previous method, which was
adding a new album. So we're
179:32 - going to copy most of the code
in there, and then insert it
179:36 - into our current method, which
is for deleting, we'll make some
179:39 - modifications, obviously, and
then we'll make the SQL
179:42 - statement work. Alright, I'm
gonna go through here and clean
179:45 - things up. So first of all, the
statement where it says, we are
179:49 - going to do the insert, that
obviously is wrong. So I'm going
179:52 - to just delete that for now. And
then I'm going to have one
179:55 - parameter instead of four or
five of them. So I'll delete all
179:59 - those
180:00 - We're going to say instead of
new rows, I'm going to call that
180:03 - a result. And then when I'm
done, I'm going to return the
180:06 - result. So what do we have to
do? Now we have to add a SQL
180:11 - statement to make this happen.
And after the SQL statement,
180:15 - we're going to have to modify
the parameter that's going to be
180:17 - used, which is probably called
Track ID, so use an app Track ID
180:21 - for the placeholder. Now the
only thing left here is to go
180:25 - figure out the SQL statement.
And we're going to get some help
180:28 - from the other part of our
program, the my admin tool. So
180:33 - now I'm looking at the table
here for the tracks. I'm at PHP
180:36 - myadmin. Again, I'm going to
come down to the very last item
180:39 - where it says, Yellow Submarine.
So I'm going to select the
180:42 - yellow submarine, and then the
Delete option here at the
180:46 - bottom. And it says here, I'm
going to execute this statement.
180:50 - So this here is the exact code
that I need. So I'm going to
180:54 - right click on that, and copy
whatever was in there. Now just
180:58 - to test it out, I'm going to
choose Yes. And it looks to me
181:01 - like it worked. It says Yellow
Submarine is gone. So I got that
181:06 - code. Now I can switch back into
my application and right between
181:10 - the little quotation marks, I'm
going to paste it. So here is
181:13 - the code. So how do you do a
sequel Delete? Well, here's the
181:16 - answer we do delete from, and
then it has the table name. And
181:20 - you have a WHERE statement where
the tracks ID equals something.
181:23 - So this 43 worked for one
instance. Now I'm going to
181:27 - change that to be a track ID as
a placeholder. And then I'm
181:32 - going to associate that
placeholder value with what was
181:36 - passed in here. So this should
all work hopefully. Now
181:39 - remember, all these backticks
are kind of optional. I'm just
181:42 - going to leave them in for now
because that's what MySQL seems
181:45 - to like, down at the bottom.
What do we got here? We got one
181:48 - more error, return return, How
about how about if we change
181:50 - that to result? That might make
more sense. Okay, so we're going
181:54 - to execute this delete
statement, we're going to
181:56 - capture the results and send it
back. And hopefully we get a
181:59 - delete. Now I just deleted the
yellow submarine and I want to
182:03 - put it back. So I'm just going
to come back and do a SQL
182:06 - statement. And I have this
prepared where it's inserting
182:12 - new items. So I'm going to go
and it looks to me like it, put
182:16 - it back in. Now we're at row 44.
So you might have to recreate a
182:20 - track if you've deleted them
all. Alright, it's time to run
182:23 - this. Let's go ahead and click
the green button for our app.
182:27 - And let's see if we can do a
delete. All right, here we go.
182:30 - I'm going to load the albums.
And I'm going to try a Yellow
182:33 - Submarine again. So let's go
down to Yellow Submarine. There
182:37 - he is. So I've got it selected.
Choose delete this, it says you
182:41 - clicked row zero. It was ID 44.
And the result was one, so it
182:48 - must be one row deleted. Now
let's see where did it go? Did
182:51 - it go away? Let's try yellow
submarine again. Let's try it
182:55 - again. And delete it says zero
ID 44. This time the result was
183:02 - zero. So you can see that my
user interface is not quite
183:05 - updating. The second time I
tried to delete this, it says
183:10 - there was nothing to delete. So
I believe it was taken out of
183:13 - the database. But the
application on the screen the
183:17 - user interface didn't show the
results. So let's make a quick
183:21 - tweak. So back here in form one,
I'm going to make two changes.
183:24 - First of all, I'm going to erase
the data source for grid two. So
183:28 - it'll erase everything that's
there from the screen. Then I
183:31 - want to reload the albums
because one of the tracks has
183:34 - been deleted, and we need to
refresh that. So we'll do
183:37 - another call to the database to
fetch everything. Alright, with
183:41 - those two steps, we should be
able to see some results. Now
183:44 - I'm going to put in another copy
of Yellow Submarine just so I
183:47 - can delete it. So I'm going to
switch back. And let's try the
183:51 - SQL statement. And let's see, do
I have that copied somewhere.
183:55 - And so I've got this insert
statement to copy and then I'm
183:58 - gonna get choose go. So now
we're up to track number 45.
184:03 - Let's see if we can delete that
track. So switching back, I'm
184:06 - going to run the application
this time and let's go and try
184:09 - to delete Yellow Submarine. So
I'm going to choose Load
184:11 - everybody.
184:13 - And let's go down to one of my
tracks. Let's try a Yellow
184:15 - Submarine. And then I go down to
select the yellow submarine and
184:19 - delete it. It says zero track 45
And the result was one this time
184:26 - as you can see, it deleted the
screen and emptied out the
184:30 - tracks. Let's try a Yellow
Submarine. And this time it is
184:33 - empty. So it looks like the
Delete worked. Now in the next
184:36 - video, we're going to talk about
more features that I'm going to
184:39 - leave for you as a challenge so
that you can develop your skills
184:43 - and make this app complete. See
you soon
185:03 - Hi, and welcome back to another
tutorial for the SQL database
185:07 - application. In this video, we
are finally at the end, and I'm
185:10 - going to show you some of the
new features that you're going
185:12 - to do. So here's the table of
contents of all of the things.
185:15 - And we are at the last item,
which is called future features,
185:20 - which means you get to do them.
My name is shad Sluiter, and
185:23 - I've been your guide here
throughout the course I teach
185:26 - software development at Grand
Canyon University. If you'd like
185:29 - to get the full course on
databases or on web development,
185:33 - or on mobile, go to my website
at steady coding.org. And you
185:38 - can get a full degree almost
just online. Okay, so let's talk
185:42 - about some of the unfinished
business now that is left in
185:45 - this application. You can see on
the screen here that I have
185:48 - completed a whole bunch of
things without the video being
185:51 - on let's take a look at what
they are. And I'm going to
185:54 - challenge you to do them. And if
you can't, I'll give you some
185:57 - source code that you can look at
and learn from. So what did we
186:00 - do. So what I've done is I've
added some features such as
186:04 - edit. So if I choose yellow
submarine and choose Edit, you
186:08 - can see that the form over here
is filled in so that way we can
186:12 - change things. So let's say if I
want to change the year from 68,
186:17 - to 69, you can see that the
Update button shows that there
186:21 - was one row updated, and so the
updated item or appears in the
186:25 - list. Let's take a look down
below here. So if I choose Help,
186:28 - and let's try editing help,
let's go to the Edit Selected
186:32 - button. And you can see that we
have the same thing down below,
186:35 - we can either add a new track,
or in this case, edit one. Let's
186:38 - say I want to change this to
track number 13. And I'm also
186:42 - going to change the album. So
you can see that they dropped
186:45 - down. What would happen if this
actually went with Abbey Road,
186:49 - let's click the Update. And
it'll give me a status message.
186:53 - And then if I choose Abbey Road,
you're gonna see help now
186:55 - appears in the wrong album. Well
better change that back so that
186:59 - it's going back to the help
album.
187:04 - The other choice is the delete
button. So if I wanted to get
187:06 - rid of somebody, I could just
push the delete button and away
187:09 - it goes. Now obviously, there's
some more code that's involved
187:12 - here. So let's take a look
behind the scenes to see how
187:15 - this works. I've repurposed the
input forms so that it not only
187:19 - can add a new album, and put
down here a new track, I also
187:24 - have the ability to update and
edit those things. So let's look
187:28 - in the DAO, which is where a lot
of these SQL statements are.
187:31 - That's where all of the SQL
statements are stored. So we've
187:34 - got some new features here. So
you've got an update, you got an
187:38 - ADD, what else is there is a
delete, there is an update at
187:42 - track and get a new track. So
all of the operations, the
187:46 - entire CRUD operations, which is
create, update, read and delete,
187:51 - they all require some special
coding. So those are going to be
187:55 - found inside of the new methods.
Let's take a look at one of
187:58 - them. So for instance, update
track. So when I do an update
188:01 - track, I'm expecting to get a
object for the new track. And
188:06 - then an updated item number.
Let's see what we do with those
188:09 - inside of this method. So here
is the statement. That's the key
188:14 - part that says, I'm going to run
a SQL statement which is
188:18 - updating. So I copied this
directly out of the MySQL admin
188:23 - tool. And we're going to be able
to adapt it just like we did
188:27 - with the other items in previous
tutorials. So we go through
188:31 - here, and we add all the
parameters. And I get an updated
188:34 - rows number which tells me how
many rows were changed and then
188:37 - return it. Same thing is going
to hold true here with the
188:40 - updated album. So I have two
items, I say give me a new
188:43 - album, give me the album ID that
is going to be changed. And then
188:47 - when I go through here, I get
the same idea. So I'm changing a
188:51 - bunch of albums. So there's a
little bit more code that I'm
188:55 - going to let you look at, let's
try editing a selected. So
188:59 - you're gonna see here that when
we click that button, it's going
189:01 - to fill in a whole bunch of text
values with the properties of
189:06 - the item that is being edited.
And then I'm using a checkbox
189:10 - called editing, to be able to
tell if the form should be used
189:15 - to update an item, or to create
a brand new one. And so if it's
189:19 - an update, then we're going to
set this property to true, and
189:23 - then set the label on the form
to be the item number or the the
189:28 - track number. And so there's
some tricks to making form have
189:32 - two purposes. So the best way
maybe now to learn is to look at
189:36 - the source code for the project
as it is. And of course I'll put
189:39 - that on the course at study
coding.org. So you can take a
189:43 - look there. So if you'd like to
learn how to build more
189:46 - sophisticated apps that are more
web based instead of just forms
189:51 - like this is that's probably
where you're going to get a real
189:53 - job. Jobs are going to be
probably full stack developer
189:57 - and those kind of target
keywords. But I hope you
190:00 - You get a job. And if you do,
I'd like you to let me know. So
190:03 - you can contact me on LinkedIn
or at my YouTube channel. So
190:07 - it's been a great experience
with you. I hope you learned a
190:09 - lot. We'll see you in the next
course.