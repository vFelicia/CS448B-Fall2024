00:00 - in this uh video we're gonna be talking
00:01 - about angular current version five point
00:03 - something uh if it's six or seven in the
00:06 - near future most of this stuff is
00:07 - backwards compatible you don't have to
00:09 - worry about any of that uh but we're
00:10 - gonna be talking about angular
00:12 - what it is what it does and then we're
00:14 - also gonna be introducing you to the
00:16 - important parts of it so what is angular
00:19 - right
00:20 - well angular is uh one of the one of
00:23 - basically two main javascript front-end
00:26 - frameworks there's react and there's
00:28 - angular
00:29 - angular referring to angular 2 and above
00:33 - right angularjs is typically angular 1.
00:36 - anyhow
00:38 - there's also vue which is another up and
00:40 - coming javascript library uh framework
00:42 - there's a bunch of javascript frameworks
00:44 - but there's really two main ones that
00:45 - are dominating the the market at this
00:48 - point in time that's angular and react
00:50 - we're going to be talking about angular
00:52 - 5 currently the current iteration
00:55 - oftentimes just referred to as angular
00:57 - so why use angular well
00:59 - the same reason use any framework you
01:02 - want to
01:04 - angular a framework is supposed to in
01:06 - theory allow you to write cleaner code
01:10 - that is more efficient at sometimes
01:12 - sometimes has better security and also
01:14 - already has some resources there to
01:17 - to make your life a little bit easier as
01:19 - well as make your code more readable so
01:22 - a framework will also gives us a lot of
01:24 - ability to manipulate the dom which is
01:27 - something in vanilla javascript
01:29 - it's a little bit harder than it needs
01:30 - to be and so that's really why front-end
01:33 - frameworks exist so that we can create
01:35 - code that is easy to read that has
01:38 - enhanced functionality that it involves
01:41 - quicker development
01:43 - that may allow us additional features as
01:45 - well as security and authentication and
01:48 - angular is uh pretty good at all that so
01:50 - uh what are we gonna be covering well
01:52 - we're gonna be covering uh angular's
01:54 - major parts angular any framework is
01:56 - massive in um in scope and you know um
02:00 - i just got done taking a 25 hour angular
02:03 - course not too long ago and we're gonna
02:05 - we're gonna cover in this one hour or so
02:08 - all the major parts that you absolutely
02:10 - have to know and that's going to be
02:11 - components those are our reusable parts
02:13 - those are reusable classes we're going
02:16 - to be covering module modules this is
02:18 - where we essentially create a list of
02:20 - all the parts that we want to use and
02:21 - inject it into things
02:23 - we're going to be covering services how
02:25 - do we do ajax calls and how do we share
02:28 - functions between multiple components
02:31 - between our reusable parts that's what
02:33 - services are for and then we're going to
02:34 - be talking about pipes how do we format
02:37 - and display data in the ui without
02:39 - actually um
02:41 - um
02:42 - without actually augmenting the data and
02:44 - that's what pipes are forming they're
02:45 - very helpful
02:46 - i found myself really creating uh pipes
02:49 - left and right now i absolutely love
02:51 - them and we're gonna be talking about
02:52 - routing how to um
02:58 - this is a i need to edit this but this
03:00 - is uh this is not that little bullet
03:02 - point isn't correct so uh how to
03:04 - actually showcase
03:06 - certain things in a route so we want to
03:09 - you know when our route changes angular
03:11 - and all these frameworks are called
03:12 - single page applications you never
03:14 - actually load the page but you do have
03:16 - you know routes where oh if my route is
03:18 - this please display this component
03:20 - please display this view please display
03:22 - this item to showcase and so we're going
03:25 - to show you how to do that in routing
03:27 - let's go ahead and dive right in
03:30 - [Music]
03:37 - all right there's some things that we're
03:38 - going to need to install before we get
03:39 - started when we want to develop an
03:41 - angular application uh one thing is
03:43 - you're gonna have to have text editor
03:44 - the one that i'll be using for this
03:46 - video and the one that i recommend
03:47 - just because i'm a big fan of it is
03:49 - visual studio code if you go to
03:51 - code.visualstudio.com download it
03:53 - install it you'll be good to go another
03:56 - thing that i'll be using is a git
03:58 - terminal and you can go to git dash
04:00 - scm.com to not only install git on your
04:03 - computer but also get the get bash
04:05 - terminal which you'll see in a second uh
04:08 - one other thing that you'll need to make
04:09 - sure you have installed is node as well
04:11 - if you go to nodejs.org en slash or just
04:15 - go to nodejs.org and i'm sure they'll
04:16 - have your language as well
04:18 - and you'll be able to down the latest
04:20 - you don't need to get the current you
04:21 - can just get the recommended one for
04:22 - most viewers um i'm not gonna walk you
04:25 - through how to install that it's pretty
04:26 - straightforward you download the file
04:28 - you keep keep clicking next and it's
04:30 - installed and last but not least we're
04:32 - going to install the angular cli what is
04:35 - the angular cli this is the angular
04:38 - command line interface and what this
04:40 - allows us to do is get a angular
04:42 - environment set up and running very
04:45 - quickly in a short amount of time and
04:48 - pretty much every time i start a new
04:49 - project i install the latest version of
04:52 - angular cli so
04:55 - if you want we can go ahead and walk it
04:57 - through this part just because i think
04:58 - it's a little bit more so uh although
05:00 - there's an instruction so i'm gonna
05:01 - launch my get bash terminal and if you
05:04 - have get installed at this point in time
05:06 - and then you right click you'll see get
05:07 - bash this will launch it just on the
05:09 - desktop we're going to install this
05:10 - globally which means that we're going to
05:12 - have access to it
05:14 - anywhere in our application and all
05:16 - we're going to do here is npm install
05:19 - dash g that's that global at angular
05:22 - slash cli uh
05:24 - there we go make that a little bit
05:26 - bigger for everybody
05:28 - and uh this will take just a second so
05:30 - uh if it's taking a minute don't don't
05:32 - sweat it
05:33 - all right so after you get done
05:34 - installing you'll see some some stuff
05:36 - like this everything will be good to go
05:38 - looks like at the time of this video the
05:40 - angular cli is in version 1.7.4
05:44 - now what we need to do is wherever we're
05:45 - going to go and create our angular
05:46 - application in my case i have a tl dr
05:49 - folder that i'm going to go to you're
05:51 - going to go to that folder um
05:55 - tldr and launch your get bash there
05:58 - we're going to be using this command
06:00 - here
06:02 - ng new
06:04 - and this is going to allow us to create
06:05 - a new angular application and all we
06:07 - have to do is then name our app and i'm
06:09 - going to just go ahead and call it
06:11 - tl dr
06:12 - um angular
06:14 - and this is going to the angular cli is
06:16 - going to automatically create
06:19 - a working angular
06:21 - environment for us to get started with
06:23 - it's gonna be pretty pretty
06:24 - straightforward uh we'll walk through a
06:26 - little bit more
06:27 - of what's inside the application when
06:30 - this when this gets done installing and
06:32 - what you need to know about it uh when
06:34 - we get up and running here
06:36 - all right so let's go ahead and open our
06:37 - text editor of choice again i'm using
06:39 - the visual studio code and what we're
06:40 - going to do is we're going to go ahead
06:41 - and open that file that just got created
06:43 - this folder that just got created
06:45 - and
06:46 - we're gonna see a ton of crap in here
06:50 - and um
06:51 - a lot of it we're not gonna worry about
06:53 - but i'm gonna give you a quick rundown
06:54 - of what's going on here so you'll see
06:56 - this tslint ts config this is going to
07:00 - be to give us some styling suggestions
07:02 - as well as
07:03 - you know angular is written in
07:05 - typescript we're not going to
07:08 - talk too much about typescript in this
07:10 - application i'll have a separate tl dr
07:12 - video i can i'll be doing on typescript
07:15 - and then
07:16 - you know we have our readme file for
07:18 - some information about how to run our
07:21 - application
07:23 - and then we have our angular cli.json
07:26 - this is some of the setup here so um if
07:29 - you need to import a global style sheet
07:31 - or anything like that you can do that
07:33 - here
07:34 - if you need to import a global scripts
07:36 - tag you can do that here as well you can
07:38 - see
07:39 - the name of our application as well
07:42 - and then uh when we these are our node
07:44 - modules all the installs that come along
07:45 - with angular and some end-to-end testing
07:48 - so um
07:49 - a couple more things let's see uh so
07:52 - this is our global style sheet the
07:54 - styles.css
07:56 - so if we want to apply styles globally
07:58 - to our angular application we could do
08:00 - it here
08:01 - and you don't need to worry about that
08:02 - and then at index.html you'll see we
08:04 - have this app root this is our
08:07 - index.html is exactly what you would
08:09 - expect we have a title here for our main
08:12 - home page and then our app root
08:14 - allows us to
08:16 - um elect this is what's injecting the at
08:19 - some point we have to inject our
08:20 - components into here so that's what's
08:22 - going on here don't worry too much about
08:24 - that for the time being and then assets
08:27 - don't need to worry about that then app
08:28 - okay
08:29 - um
08:31 - i could have spent a lot more time you
08:33 - know talking about this but really all
08:35 - this sort of stuff isn't important we
08:37 - have our package json where this has our
08:39 - installs at the time of this video it's
08:41 - apparently installing 5.2
08:44 - 0.9 specifically
08:46 - of things in angular just for that so
08:49 - you know and our dependencies and all
08:51 - that sort of stuff let's go ahead and
08:53 - talk a little bit about a component and
08:55 - actually get this up and running so we
08:56 - could see what comes by default with the
08:59 - angular cli project
09:01 - all right so let's go ahead and launch
09:03 - the angular the default angular project
09:05 - which we've made no changes to quite yet
09:07 - you'll notice that i'm actually now in
09:09 - the folder the set the root folder tl dr
09:11 - angular that
09:12 - we created all we have to do here is put
09:14 - ng serve and what this is going to do is
09:17 - it's going to launch our development
09:18 - server
09:20 - angular
09:21 - the angular cli creates a nice little
09:23 - project for us where by default if we go
09:26 - to localhost 4200
09:29 - we'll go here
09:31 - we have a wonderful little environment
09:33 - this is what it's going to look like by
09:35 - default when we get started with an
09:37 - angular project
09:39 - it has some links to the cli
09:41 - documentation the angular blog etc etc
09:44 - and then a tours of heroes example now
09:47 - one thing to keep in mind is the
09:48 - development server is really great so
09:51 - that if we made a change
09:53 - to our application like so and we wanted
09:56 - to change welcome to app for instance
09:59 - uh to welcome you know hello to app and
10:02 - we saved it the angular cli project that
10:05 - set up automatically refreshes it so
10:08 - that you know we don't have to go and
10:09 - click refresh every time we save and
10:12 - make a change in our application it's
10:13 - going to do that for us
10:15 - all right so what we're going to be
10:16 - doing for our application is we're going
10:18 - to be building a survey form then we're
10:20 - going to have some services connected to
10:22 - it but that's going to cover everything
10:24 - that i want us to talk about so before
10:26 - we move forward let's actually gut out
10:28 - this html file you'll see here that
10:33 - this is just the stuff that we already
10:34 - looked at this isn't going to be helpful
10:36 - to us we're going to cut that out but
10:38 - let's talk about how each one of these
10:41 - components you'll see this component
10:43 - keyword this basically lets us know
10:45 - what this is right and there's a
10:46 - definite file file name convention that
10:48 - goes along with this but this dot html
10:50 - that's going to be our view the dot css
10:53 - that's of course going to be our style
10:54 - sheets one thing to keep in mind with
10:56 - angular style sheets by default if we
10:59 - have a css folder or a style sheet
11:02 - in our component level like this it's
11:05 - actually going to only apply even if we
11:07 - create a name an id it's only going to
11:10 - apply it
11:11 - directly to the component here
11:13 - it's it's the styles for this specific
11:16 - component you'll notice the spec.ts file
11:18 - we don't need to worry anything about
11:20 - this right now all this is is some karma
11:22 - and jasmine unit testing
11:24 - i'll have a separate tldr video going
11:26 - over specifically karma and jasmine and
11:29 - how to get going if you're interested in
11:31 - testing specifically with angular i have
11:34 - uh my part two course we write a ton of
11:36 - tests
11:37 - we're building a cryptocurrency um
11:40 - front-end application using a
11:41 - cryptocurrency api and uh it dives deep
11:44 - into that uh if you're really interested
11:46 - in that so uh then we have our app
11:48 - component and app module we'll come back
11:50 - to app module in just a second but this
11:52 - app component now remember i told you
11:54 - this is how we build our reusable parts
11:58 - you'll see
11:59 - that we're at importing component
12:02 - from at angular core
12:04 - all we're doing here is importing this
12:06 - dependency
12:07 - all right so let's talk about this
12:08 - decorator here and what this basically
12:10 - is this at component so
12:13 - you'll see that we have a selector a
12:16 - template url and a style url when you're
12:18 - defining a component there's three
12:21 - main pieces the selector remember in our
12:23 - index.html
12:26 - where we um
12:29 - where are you index.html where we have
12:31 - this app root this is our selector so
12:34 - the selector allows us to inject the
12:37 - other components into a template into a
12:40 - view and then use it and render it
12:43 - the template url here
12:46 - is
12:48 - the html content that's in there and now
12:51 - remember we're going to be connecting
12:52 - the the component logic to the template
12:55 - but you know in our case we could we had
12:57 - just the angular hello you know welcome
12:59 - to angular and the three links right we
13:01 - deleted all that and got rid of that
13:03 - the styles url this is an array you can
13:06 - have multiple style sheets in here if
13:07 - you want but this allows us to have
13:10 - custom css for our component
13:13 - all right so before moving on let's talk
13:14 - a little bit about modules what they are
13:16 - and what they do
13:17 - modules give us the ability to
13:21 - at the end of the day
13:23 - allow us to
13:25 - import a
13:27 - group of items and install them into our
13:30 - application basically say hey
13:33 - declarations are going to take in your
13:34 - components imports are going to take in
13:36 - other modules that are going to be used
13:39 - and then providers are going to take in
13:41 - services and bootstrap
13:43 - uh
13:44 - are components that will be
13:46 - automatically added when this all
13:48 - launches and runs don't worry really
13:50 - worry about these three main ones here
13:52 - are the ones you have to worry about for
13:54 - the extent of this video and just get up
13:56 - and running so declarations you have
13:57 - components
13:59 - imports you add modules providers you
14:01 - add services we don't have any services
14:02 - yet but
14:04 - modules at the end they really are just
14:06 - a way to add dependencies to your
14:08 - application whether they're external or
14:10 - internal that you've created
14:12 - to your angular application the reason
14:14 - you might use modules is not only to
14:16 - organize your code better
14:18 - but also to um sometimes as applications
14:22 - get more and more complex you may only
14:24 - want to load a third of your code unless
14:26 - they get to the a certain route in your
14:28 - code and then you'll load the other two
14:30 - thirds and so your application will run
14:31 - a little bit faster things like that so
14:34 - that's that's modules and as we go and
14:36 - create components we'll be jumping back
14:37 - in here to add some stuff so let's get
14:39 - started by creating
14:40 - by in our first
14:42 - app component here we're gonna go ahead
14:44 - and um create a heading and a title and
14:48 - we'll get started creating our survey
14:49 - form
14:50 - one more thing before we get started i'm
14:52 - gonna actually install bootstrap this is
14:54 - just gonna be for some styling and css
14:56 - you don't really have to worry about it
14:57 - too much more than that so to do that
14:59 - all we have to do is make sure you're in
15:00 - the your root directory and then go npm
15:03 - install
15:06 - bootstrap
15:09 - and this will take just a second to
15:10 - install
15:12 - all right after it goes ahead and
15:14 - installs you'll see something like this
15:16 - bootstrap's currently in version 4.0
15:18 - right now and uh what we have to do next
15:21 - we just have to add the dependency even
15:22 - though it's
15:23 - added to our application we have to add
15:26 - it
15:26 - to either one of two places the angular
15:29 - cli
15:30 - json we could add to the styles here i
15:32 - personally like to instead just use an
15:34 - import statement in our global styles
15:37 - say at import
15:41 - and then uh this tilde will essentially
15:44 - hit the root
15:46 - of the known modules and then we'll say
15:47 - bootstrap
15:49 - slash dist slash css
15:52 - slash boot strap
15:54 - dot min
15:56 - dot css it's going to give us access to
15:58 - bootstrap to use as we're building out
15:59 - our components now
16:01 - all right so our survey form is going to
16:03 - be about cryptocurrencies um mainly
16:05 - because i already have some
16:06 - cryptocurrency apis i'm familiar with um
16:08 - you don't have to know anything about
16:10 - cryptocurrencies for this tutorial so
16:13 - what we're going to be doing here is
16:14 - we're just going to start off by
16:15 - creating a little container uh this is
16:17 - just some bootstrap and if you're
16:18 - curious how i shorthanded this
16:21 - built into
16:23 - visual studio code basically has a emmet
16:25 - plugin in the background which allows us
16:27 - to type div and then classes
16:29 - like so
16:30 - with the dot or the hashtag for id and
16:33 - hit tab and then it will allow us to uh
16:36 - when we hit tab it's going to create
16:37 - that for us so we're going to go ahead
16:38 - and create this uh div container class
16:40 - then we're going to create a h1 here
16:43 - we just put a crypto survey in it
16:46 - go ahead and save it
16:49 - all right and then of course we need to
16:50 - uh restart our server which we haven't
16:52 - done yet so let's just go ahead and do
16:54 - ng serve real quick that's going to
16:56 - launch
16:57 - as well
16:59 - all right it's back up all right rather
17:01 - than switching between screens and all
17:02 - that sort of stuff i'm just going to put
17:04 - the
17:04 - screen in the bottom left corner and
17:06 - every once in a while i might pull it in
17:08 - for major milestones of the video like
17:10 - towards the end uh so um you'll see here
17:13 - we have our crypto survey it's h1 if we
17:15 - wanted to we could add class
17:17 - text center just to center it
17:20 - make it look a little nice so
17:23 - nothing crazy so far now what we want to
17:25 - do here is we're going to ask we're
17:27 - going to have three parts three inputs
17:29 - uh maybe a name a um a
17:34 - a
17:35 - a drop down like an input a drop down
17:36 - and then a comment so three inputs but i
17:39 - actually want to create a new component
17:41 - to do that so
17:42 - and then also include uh views for the
17:46 - first to start off what we're going to
17:47 - do is we're just going to create the
17:49 - component we're using the angular cli
17:52 - all right so to get to any other cli to
17:54 - generate a component for you
17:56 - all we have to do is ng
17:58 - generate
18:00 - component
18:02 - and then the name of the component in
18:04 - our case um we're going to call it
18:07 - crypto
18:09 - dash form
18:10 - and this will automatically create the
18:12 - component for us uh wham bam go ahead
18:14 - and lower this jump back into our
18:16 - application and you'll see we have this
18:18 - crypto form component now that has been
18:21 - generated in our application
18:23 - so what gets generated with it well we
18:25 - get a css file we get a html file
18:28 - it's just going to have some text in
18:29 - here
18:30 - so that you can see that it displays
18:32 - we're going to get this
18:34 - testing file and we're going to get
18:36 - our
18:38 - natural
18:40 - component here uh that basically
18:42 - everything said about uh with the
18:43 - constructor and ng on in it we'll talk a
18:45 - little bit about what that is and how
18:47 - we're gonna use that uh moving forward
18:49 - so
18:50 - uh one other thing that happens in our
18:52 - app module you'll see here
18:54 - we it automatically will take import our
18:56 - crypto form component and add it to our
18:58 - declarations
19:00 - using the angular cli so we don't have
19:02 - to worry about that if we're using the
19:03 - angular cli but now that we have our
19:05 - component created
19:06 - how do we add a component to another
19:08 - application well it's pretty
19:09 - straightforward right we saw how we did
19:11 - with app component so uh how would
19:14 - crypto form component well do it well
19:16 - let's look at our selector here we have
19:17 - app dash crypto dash form
19:20 - go ahead and uh copy that and we go
19:22 - ahead and jump right into our
19:24 - appcomponent.html
19:27 - put that hit
19:29 - hit tab save it and we should see the
19:32 - text that was in there and we do where
19:34 - it says crypto form works right or you
19:36 - see that there's something there very
19:37 - small if you're watching this on mobile
19:40 - all right very nice let's go ahead and
19:42 - delete that
19:43 - and now we're just going to create our
19:45 - form real quick uh so we'll do a div uh
19:48 - we'll make it a row and then we'll
19:50 - create a uh div call
19:55 - excuse me um
19:57 - um i'm sick why filming this so i
19:58 - apologize if i'm sneezing um so
20:02 - we'll go ahead and create a
20:05 - md-6
20:07 - we'll put a label in here this will be
20:09 - with like font dash weight dash bold to
20:11 - make the
20:12 - label there and um this will be for
20:17 - oh what was this uh we'll do name
20:19 - and then in here we'll have
20:21 - our name
20:22 - and then we'll have an input
20:25 - this is going to have a class of form
20:26 - control all this stuff is basically just
20:29 - basic html and a little bit of bootstrap
20:31 - so it looks nice and uh we're gonna give
20:33 - this an id equal to name so when we
20:36 - click on the label it goes in there
20:38 - and um
20:39 - we'll go ahead and create another we'll
20:41 - save that real quick so that should give
20:42 - us a little label and a little form
20:44 - control
20:45 - uh nice uh let's click name go in there
20:48 - cool let's go ahead and create another
20:50 - div real quick
20:51 - and then we'll uh this will be uh div
20:53 - dot call dash md six another uh label
20:58 - dot um
20:59 - font dash weight
21:04 - uh we'll call this for
21:06 - uh this is gonna be a drop down of some
21:09 - cryptocurrencies and we'll just call
21:11 - this cryptos
21:13 - and we'll say favorite crypto
21:18 - and then we're going to create a drop
21:20 - down
21:21 - uh so we have our select tag and uh this
21:24 - will be we can get rid of name here
21:27 - we don't need that but we do need id
21:29 - here for cryptos
21:32 - and then we're gonna go ahead and create
21:34 - an option and we're gonna iterate
21:36 - through that in just a second so uh one
21:38 - more thing that we need to create for
21:40 - html let's spread that out a little oops
21:41 - let's spread that out a little bit so it
21:43 - looks all right and of course i'm meant
21:46 - to add class here equal to form dash
21:49 - control this will just make it look
21:51 - nicer
21:54 - all right and
21:58 - uh
21:59 - while we're at it we don't need to have
22:01 - this in its own row we'll just have a
22:03 - text input div dot uh row
22:06 - div dot call dash md-12
22:09 - and we can just go ahead and put a label
22:12 - dot font dash weight dash bold
22:15 - this will be for comments
22:18 - and then we'll say
22:20 - comments
22:22 - and then we'll have a text area
22:25 - font
22:26 - dash weight
22:28 - dash bold
22:30 - all right uh
22:33 - delete all this other crap
22:40 - all right cool so basically we just did
22:42 - a little bit of bootstrap a little bit
22:43 - of
22:48 - oh this is a form control extrusion so
22:50 - form dash control a little bit of
22:53 - misspelling so we basically created a
22:54 - little bit of html here looks clean it's
22:57 - nothing nothing super crazy and then um
23:00 - let's go ahead and create a button
23:02 - uh we'll just do um
23:05 - div dot row
23:07 - in here we'll have a um
23:10 - hey we're just making it uh it doesn't
23:12 - matter we'll make it a button and we'll
23:14 - say uh dot
23:16 - um vtn
23:19 - dot btn
23:22 - dash outline
23:25 - dash success
23:28 - uh oh and also let's make it let's just
23:29 - make a block level button and then here
23:32 - we'll just say um
23:34 - um
23:36 - send form something like that
23:40 - all right uh oh
23:43 - it's not gonna look right if we don't do
23:45 - this this will do it so everything's on
23:47 - the same page
23:52 - all right cool uh and maybe we'll add a
23:55 - little bit of padding to the top or
23:56 - margins at the top so mt-2 just a
23:59 - bootstrap margin
24:01 - uh class very nice all right cool so uh
24:04 - pretty basic so uh we've created our
24:06 - component we're not using routes yet
24:08 - we're not going to worry about that but
24:09 - let's actually
24:11 - and we haven't done any logic in our
24:12 - component yet we'll come back to that in
24:14 - a second but let's go ahead and actually
24:17 - create a service because we want to
24:19 - populate this drop down here with a list
24:21 - of cryptocurrencies so how do we go and
24:24 - create a service all right before we
24:25 - move forward let's look at the the
24:27 - endpoint that we're going to be getting
24:29 - our data from
24:30 - we'll be getting it from https colon
24:32 - slash slash api dot coin market cap dot
24:35 - com slash v1 ticker and um
24:39 - if you don't have
24:41 - uh a json
24:43 - uh i have an extension called the um
24:46 - json
24:47 - formatter you can just google type
24:49 - chrome extension json formatter it'll
24:50 - come parse like this um and so i highly
24:55 - this is just straight up text but
24:56 - sometimes they'll come back as one long
24:58 - string so you can't collapse it i really
24:59 - like this plugin it's a great one but
25:01 - basically what we're going to do is
25:02 - we're just going to go ahead and pass in
25:04 - this name property uh from the object
25:07 - but first we have to get the service so
25:08 - that we
25:10 - we can actually do the ajax calls let's
25:12 - go ahead and create our service we're
25:14 - going to create it just like how we did
25:15 - our component if you remember earlier
25:18 - where we can do ng
25:19 - generate
25:22 - service
25:23 - and what are we going to call it well in
25:25 - this case i think we're just going to
25:26 - call it our crypto service
25:35 - wham bam cool uh so you'll see that we
25:38 - have created a crypto service it added
25:41 - here now we're not going to be talking
25:43 - too much about good file structure and
25:45 - folder structures there's just no time
25:47 - but um typically i would have my own i
25:50 - would have a uh every one of my
25:51 - components would have their own folder
25:53 - and a services would have its own folder
25:55 - model would have its own folder pipes
25:57 - would have its own folder so on and so
25:59 - forth but for the sake of this video in
26:01 - time we're just going to go ahead and
26:04 - not worry about that so you'll notice
26:05 - that when we create a service a couple
26:07 - things happen one it creates a test
26:10 - a test application here for us to
26:13 - test the service we're not going to
26:15 - worry about that again and then it
26:16 - creates our service
26:19 - you'll notice here that we have this at
26:21 - injectable this allows us to create a
26:23 - service at the end of the day similar
26:25 - how we have to pass in the
26:29 - the metadata with the at component the
26:31 - at injectable is for uh services uh
26:34 - that's going on here and you always also
26:37 - notice that now
26:39 - oh it didn't add it that's very i
26:41 - thought it was gonna add it so we have
26:42 - to add the crypto service in order for
26:44 - us to use it in other applications here
26:47 - um to the application so we're gonna
26:48 - import
26:49 - uh
26:50 - what did we what did it end up being
26:52 - crypto service service
26:55 - if that isn't a bad name i don't know
26:57 - what is so let's go ahead and just drop
26:58 - off that last service real quick
27:01 - uh
27:01 - crypto service
27:04 - uh i probably should have named the
27:06 - virtual service so from
27:10 - what are we going to name it right here
27:11 - just pass that in
27:13 - cool so now that we have it imported we
27:15 - have to add it to our ng model though uh
27:16 - importing it here without adding it to
27:18 - the ng model does nothing services get
27:20 - added to the providers now our
27:22 - applications will have access to our
27:25 - service so how do we make an ajax call
27:27 - from our service though because that's
27:29 - our that's our end goal right that's
27:30 - what we're trying to accomplish
27:32 - okay so as of angular 5 the http um
27:35 - module slightly changed and so uh we're
27:38 - going to import
27:40 - in our service the http client and
27:43 - that's going to be from
27:45 - at angular
27:47 - slash common slash http
27:51 - now
27:52 - one thing to be able to use this is we
27:55 - actually have to import the
27:58 - http
27:59 - module in our
28:01 - app module here so that we have access
28:03 - to this essentially
28:06 - all right so in our
28:08 - component in our excuse me in our module
28:10 - we're going to import
28:12 - the
28:13 - http
28:14 - client module
28:17 - from
28:19 - uh the same place that we just did a
28:21 - moment ago for http client now this is
28:23 - going to be at angular
28:25 - slash common slash http
28:29 - and then uh now that we've imported it
28:31 - we have to go to our imports here and
28:33 - just let it know that we plan on using
28:36 - it
28:36 - and adding it to our imports so now that
28:38 - we've done that we'll have the ability
28:40 - to actually use the http client
28:45 - now when you're doing a service in the
28:46 - constructor if you're a constructor
28:49 - basically all it really all you really
28:51 - need to know about this if you're not
28:52 - familiar with more object-oriented
28:54 - programming is a constructor essentially
28:56 - when we create our crypto service these
28:58 - are the properties that get created
28:59 - along with it that it that uh or these
29:02 - are the the dependencies that get added
29:04 - to it and so we're going to create that
29:06 - dependency and we'll just create uh we
29:09 - can just put http we're not going to put
29:11 - anything as public or private because
29:13 - i don't want this to confuse anybody so
29:15 - http
29:18 - of type http client now that we've done
29:21 - that whenever you actually go and use
29:23 - the crypto service we'll have the
29:25 - ability to go
29:28 - and um and use the http client module so
29:32 - how do we go about actually doing an
29:34 - ajax call it's pretty straightforward
29:36 - we're going to create a function uh in
29:37 - here called um get cryptos
29:44 - and all we want to do here is return
29:47 - this dot http
29:50 - dot get and then remember that route i
29:52 - was just telling you about a second ago
29:55 - we're gonna take this route
29:59 - and we're gonna pass this in like so
30:03 - and then we're going to say uh
30:07 - what's the issues giving us here
30:10 - http doesn't exist on
30:13 - type crypto service yes it does
30:16 - i think this is just um a little bit
30:19 - of the uh module issue here sometimes
30:22 - when you add new modules without
30:24 - restarting your server you get some some
30:26 - little warnings
30:28 - we'll worry about fixing those warnings
30:30 - later on so what we're going to return
30:32 - here is what's called an observable
30:35 - default it returns a promise so the way
30:38 - that we convert our promise to a
30:41 - observable
30:42 - is we just use the concat map
30:45 - and what we're going to get back from
30:47 - here is a response let me go ahead and
30:50 - wrap that
30:52 - and what we want to do is take that
30:54 - response
30:57 - and we want to take that response and we
30:58 - want to return it back
31:00 - as an observable in json form so now
31:03 - that we've done that
31:05 - this will allow us
31:08 - um
31:09 - did i spell crypto wrong c-r-y yes
31:12 - okay kryptos there we go um to
31:15 - subscribe to that observable in our
31:18 - component and then get that data let's
31:20 - go ahead and see what that's going to
31:21 - look like
31:22 - all right so how do we add this service
31:24 - to our component well
31:25 - exactly how we added
31:28 - http to our service is now when we jump
31:31 - into our crypto form
31:34 - component.ts in our constructor and we
31:37 - um
31:38 - we are going to
31:40 - first we have to import that service so
31:42 - we're going to import the crypto
31:45 - service
31:47 - from
31:50 - uh dot dot slash
31:52 - crypto service
31:54 - and then we're going to add it as a
31:56 - dependency and in our case we're just
31:58 - going to call it crypto service and then
32:00 - uh of type
32:02 - cryptoservice
32:04 - now
32:06 - by default we want it to actually fire
32:09 - off and that's what this ng on init is
32:11 - essentially when the component loads it
32:14 - will then fire off whatever code is
32:16 - within here on init comes from at
32:18 - angular core and you can just put
32:20 - implement on it as well as this function
32:22 - name ng on init to make sure that the
32:25 - code gets fired off
32:27 - so all we're going to do is
32:28 - say this dot crypto service
32:34 - dot get
32:36 - oh
32:37 - and of course make sure you spell crypto
32:39 - service or
32:41 - your intellisense will not work
32:45 - dot get
32:47 - cryptos what is going on here
32:50 - no i spelt it right okay cool dot get
32:53 - kryptos
32:55 - and then what we want to do is we want
32:56 - to subscribe
32:58 - to those cryptos and this is going to
33:00 - pass back some data
33:04 - and all we want to do here good time
33:06 - being just make sure we set everything
33:08 - up just want to go ahead and console.log
33:10 - that data
33:12 - save it
33:13 - and everything should work although this
33:15 - is
33:16 - giving me an error all right so it looks
33:18 - like it's having some issues detecting
33:20 - our
33:20 - our dependencies what we're going to do
33:22 - is we're actually going to close our
33:24 - server
33:25 - and then we're going to rebuild it the
33:27 - reason for this is sometimes when you
33:28 - add new add new dependencies to modules
33:30 - create new components
33:32 - it angular sometimes doesn't know they
33:34 - exist and i think that's what's
33:35 - happening here
33:39 - so http does not exist on crypto service
33:42 - okay so my mistake here is uh we have to
33:45 - actually jump back in here and put this
33:47 - public
33:48 - property on apparently for dependencies
33:51 - and this will allow us to essentially
33:53 - have access oops
33:55 - to our crypto service within it
33:57 - otherwise i think it's assuming it's
33:58 - private or it's assuming that it's it's
34:01 - so
34:02 - i didn't want to do any public or
34:04 - private uh aspects of our application
34:06 - here but it seems when we do dependency
34:08 - injection we have to actually add that
34:10 - and so let's jump back into crypto
34:11 - service and do the same thing
34:13 - public in this case really only means
34:15 - that hey uh
34:17 - other applications can use it even the
34:19 - user can call this if they want to and
34:22 - so now we'll have access to our
34:25 - application
34:27 - and concat map
34:31 - and i also made a little mistake here um
34:33 - concat map you don't have to do this in
34:36 - the application anymore you used to have
34:38 - to in the old one but what we'll have
34:40 - here is just this get call go clean up
34:42 - the code a little bit no big deal and
34:44 - then jump back into our crypto form
34:46 - component which now you'll notice and
34:49 - i'll go ahead and pull this down for
34:51 - this you'll notice in the chat here we
34:52 - get our 100 cryptos and we have access
34:55 - to the whole thing
34:57 - uh that's because the reason for that
34:59 - concat map is when we made the change uh
35:02 - from angular http to angular common http
35:05 - they they um convert it from promise to
35:08 - observable for you and so that's that's
35:10 - why we're doing that we no longer have
35:12 - to do that so that's why that function
35:13 - doesn't exist
35:16 - all right the next thing that we're
35:17 - going to do is we have to actually store
35:18 - this data right it does no good for us
35:20 - to use it in our template if we can't
35:24 - store it and iterate through it so what
35:26 - we're going to do is we're just create a
35:27 - variable here and we're just going to
35:28 - call this um cryptoarray
35:33 - and uh what this is is is a property of
35:36 - our component and cryptoarray is
35:38 - probably a really bad name so let's
35:40 - instead call this top
35:41 - 100
35:43 - cryptos
35:45 - and um
35:48 - we'll just initialize it here and then
35:51 - in our data
35:53 - instead of just console logging it we'll
35:55 - say this
35:57 - top 100 cryptos is equal to the data
36:02 - in a production level application we
36:04 - would have some models and we'd be
36:05 - creating some classes and maybe an
36:07 - interface we're not worried about that
36:09 - right now we're just trying to get the
36:10 - basics down so we create this property
36:12 - and this top 100 cryptos now that we
36:14 - have this well we can actually use it in
36:17 - our application so let's jump into our
36:20 - crypto form component and what we want
36:23 - the whole reason we set that up was for
36:25 - this drop down
36:26 - to actually populate with values and the
36:29 - way that we can iterate through an array
36:31 - is we can use this structural directive
36:33 - here called ng4
36:35 - which will let us do that and all we
36:36 - have to do is say we'll say let crypto
36:39 - now that is our element that we're going
36:41 - to be iterating through of top 100
36:44 - cryptos that's our array
36:46 - and then using stringer interpolation
36:49 - with these curly braces we just say
36:51 - crypto
36:53 - dot name that dot name of course comes
36:56 - from the
36:57 - the application that the uh
37:00 - that we were looking at and you'll see
37:02 - here we have our 100
37:04 - cryptos in order of i believe market
37:07 - share um and while we're at it let's
37:09 - just have add an option here so that
37:12 - it's not going to select the very first
37:14 - value but now we've set up our service
37:17 - with a with ajax called do a git call
37:19 - everything's working well save that
37:23 - and bam so we have access to the top 100
37:26 - cryptos very cool but how do we actually
37:29 - store the data and pass data and
37:33 - you know how do we how do we do that
37:34 - well we're going to use a something
37:36 - called ng model
37:38 - so ng model allows us to create
37:41 - essentially uh place a two-way binding
37:43 - so that we can change a value in the
37:45 - controller
37:46 - in our component and we can change
37:48 - values in our template or our our view
37:50 - here and so do that
37:53 - let's go ahead and jump into our form
37:54 - component and we'll just define an
37:56 - object real quick
37:57 - and
37:59 - um
38:00 - we'll just call this crypto
38:04 - survey
38:06 - and this is going to be equal to an
38:07 - object and we're going to say
38:10 - name
38:12 - and by default we'll set it to an empty
38:14 - string and again you'd probably be doing
38:16 - this in class and then we'll say um
38:19 - favorite
38:21 - crypto
38:22 - that we'll set that to an empty string
38:24 - and then uh we'll do comments
38:26 - and we'll set that to an empty string so
38:28 - we have uh another property like we have
38:30 - with our top 100 cryptos from earlier
38:34 - but now we want to be able to target
38:36 - this
38:36 - directly
38:38 - and change the values so how do we how
38:40 - do we modify our html to do that well on
38:43 - our input here we can use a ng model
38:48 - and assign it and what we're going to
38:49 - assign it to is essentially exactly that
38:52 - uh
38:52 - which i forgot what the hell the name i
38:54 - just defined it was uh
38:57 - crypto survey
39:00 - what an appropriate name dot name
39:04 - so we're going to save that and you see
39:06 - we get this big scary wall of text
39:10 - why did we get that well uh one because
39:13 - i first forgot to put name but we should
39:15 - get i believe we should get another wall
39:17 - of text okay now we get a less scary but
39:19 - still scary uh well attached can't buy
39:22 - the ng model since this is a known
39:23 - property of input
39:24 - all that means is that we actually have
39:26 - to jump into our app module and we have
39:28 - to import the forms module right so
39:30 - they're assuming that you're doing some
39:32 - sort of form if you're using angie model
39:33 - you're probably working with forms and
39:35 - they want you to go ahead and import the
39:37 - forms module and add it to your
39:40 - application and that's going to be from
39:42 - at angular
39:44 - forms
39:47 - very cool
39:49 - take our forms module
39:51 - throw it in there save it and that
39:53 - should solve our issue moving forward
39:55 - and now we can go ahead and
39:58 - and
39:59 - everything works and you'll notice that
40:01 - if we wanted for instance to set name by
40:03 - default to dillon we could change it in
40:06 - our application
40:07 - and you'll see it loads with dylan and
40:09 - if we were to change this
40:11 - uh it would affect this as well and
40:14 - one way that we'll we'll show that is
40:16 - when we do our submission so let's go
40:18 - ahead and delete that and we'll just go
40:20 - and add ng models to the rest of the
40:22 - application like so
40:25 - so uh added on the select
40:28 - and i called that what did i call that
40:31 - favorite crypto
40:32 - and
40:35 - gonna copy that one more time and then
40:37 - comments i can remember comments
40:41 - where are you
40:43 - text area all right comments
40:47 - cool so uh now we've added uh we've now
40:50 - connected in both directions
40:52 - our application here
40:55 - um but where does this we want this form
40:57 - to send us somewhere right um really
41:00 - what we want this to do is we wanted to
41:02 - do a cl we want when we click this to
41:05 - have it call and send some data
41:07 - somewhere in our case we're not going to
41:09 - send anywhere we're just going to
41:10 - pretend like we are but how would we do
41:12 - that well we can add this click event
41:13 - here
41:14 - that then calls a function
41:16 - that's called send form
41:19 - and does some stuff
41:21 - in our case
41:23 - we're going to go ahead and
41:26 - create a function called send form
41:29 - and all it's going to do is
41:31 - console.log
41:32 - top 100 cryptos
41:35 - cool and we can see that just the
41:37 - two-way binding is working just fine
41:40 - so now it's like that we go ahead and
41:41 - put dylan remember everything's starting
41:43 - off empty we'll do bitcoin and we'll do
41:45 - like okay then
41:46 - uh i don't know what to put in the send
41:48 - form and
41:50 - cool
41:51 - when we send the form
41:53 - oh i didn't mean top 100 cryptos i meant
41:55 - crypto survey excuse me
41:58 - uh but you did see that it logged out
41:59 - the top 100 cryptos but that wasn't what
42:01 - i was going for so dylan
42:03 - bitcoin
42:05 - send form and you'll see in our
42:07 - application now that we've actually
42:10 - modified the way that this is going to
42:12 - look
42:13 - favorite crypto name
42:15 - uh oh look we have a bug in our code
42:17 - favorite crypto did not set its value
42:20 - the reason for it is we didn't set our
42:22 - drop down
42:23 - uh
42:24 - value which is why you do these checks
42:26 - which is pretty straightforward this is
42:27 - just some html really at the end of the
42:29 - day and all we have to do here
42:32 - is jump back to our option instead of
42:34 - every value being that all we want value
42:36 - to be and we'll just wrap this when we
42:39 - wrap this like this what this
42:41 - essentially is doing is now doing
42:42 - property binding where essentially if we
42:45 - wanted to pass in a boolean that would
42:46 - be like that and not it wouldn't be the
42:48 - string true and it's the same thing for
42:50 - crypto
42:53 - dot name this will allow the name to be
42:55 - put in there not specifically the string
42:57 - crypto.name
42:59 - and then you'll see now we go ahead and
43:01 - put something here go ahead and put
43:02 - something here select bitcoin submit our
43:04 - form and bam now we have bitcoin in
43:07 - there as we wanted before
43:10 - all right so next what we're going to do
43:11 - is we're going to go ahead and create
43:13 - routing and see how we can set up our
43:15 - routes in angular this is a you know
43:18 - pretty common
43:19 - property of earth item topic in single
43:22 - page applications is a single page
43:24 - because we essentially create these mock
43:26 - routes where we only display certain
43:27 - things if our route or our url here is
43:30 - in fact a certain path uh we're not
43:33 - actually reloading the page we're just
43:35 - changing what's in our view and so
43:37 - what's going to happen is
43:38 - from name favorite crypto comments and
43:40 - sun form when we click the send form we
43:42 - want it to then go and change the route
43:45 - we're still going to have our crypto
43:47 - survey heading there because our router
43:49 - outlet we're going to add this as our
43:52 - as our router as our route as our view
43:55 - that changes based on what our route is
43:58 - so how do we do that well uh first thing
44:00 - we're going to do real quick is go ahead
44:02 - and create a new component go ahead and
44:04 - go to your
44:07 - like so i should have had this open my
44:09 - apologies
44:11 - tldr
44:13 - tldr dash angular
44:16 - get bash and uh ng generate
44:21 - component
44:22 - and in our case we're going to just call
44:24 - it form
44:27 - dash submitted
44:31 - and that's going to generate a new
44:32 - component for our application cool
44:36 - here's our component has all the same
44:38 - stuff that we already talked about
44:41 - um we're not going to worry too much
44:42 - about that right now
44:44 - instead what we're going to do is we're
44:47 - going to comment out this app crypto
44:49 - farm form and you'll notice that it it
44:51 - goes away right
44:52 - as we would expect right because we
44:54 - don't have that anymore so what do we
44:56 - want to do well we need to do some setup
44:58 - well if you haven't noticed by now
44:59 - angular works off a lot of different
45:01 - dependencies and it has this setup a lot
45:04 - of you know these ng modules allow us to
45:06 - set up and say what dependencies we're
45:08 - going to use and what part of the
45:10 - library want to use well we're going to
45:11 - want to import
45:13 - the
45:14 - router module
45:16 - so that we can actually
45:18 - use the routes
45:21 - at angular slash router
45:25 - like so
45:27 - all right up next what we're going to do
45:28 - is we're going to go ahead and
45:29 - create some route
45:32 - here i'm just going to create a constant
45:33 - variable called routes
45:35 - and we're going to set this equal to an
45:38 - array
45:39 - of objects these are really just going
45:41 - to be our routes that we're going to
45:43 - apply
45:44 - uh in in a second so you'll see here
45:47 - we're gonna have an object there's gonna
45:48 - be a path which is a string an empty
45:50 - string is gonna be our default path
45:52 - right our homepage if you will and then
45:54 - we're gonna have this component
45:56 - which is going to take in
45:58 - what we what component we want in our
46:00 - router outlet which is essentially a tag
46:03 - this is where we want to inject our view
46:06 - where we want that to be so
46:09 - in our case we have our crypto form
46:11 - component we just defined so we're going
46:13 - to say look when we're on the home page
46:15 - to find
46:16 - to find this there and
46:18 - when we're on this other route in our
46:21 - case we're just going to call it
46:23 - submitted
46:27 - uh we want the component to be our
46:31 - form submitted component
46:35 - i apologize for the bad naming
46:36 - convention i'm kind of making up this
46:38 - tutorial as we go along uh but we can
46:40 - talk about clean code in a separate
46:42 - video and uh good naming conventions and
46:44 - things like that so we have form
46:46 - submitted component now the way that we
46:48 - add our routes and able to use it well
46:51 - as we all know we have to add our module
46:54 - to imports and then we're going to have
46:56 - this dot for roots for root here and if
46:59 - you see
47:01 - then we're going to pass in our routes
47:05 - so this for root
47:06 - essentially
47:08 - adds our
47:10 - application on the root level all you
47:12 - have to really know is this is a setup
47:13 - to do roots that's really all you have
47:15 - to know um for what we're trying to get
47:18 - going and or for routes not for roots
47:21 - and so now that we've done that the one
47:23 - last thing that we have to do
47:24 - is
47:25 - instead we just have to create our
47:27 - router dash outlet tag
47:30 - and save it like so and you'll notice
47:31 - that our app crypto form component is
47:33 - now here and we can go ahead and delete
47:35 - this comment
47:37 - right because we are on the index page
47:39 - and if we go anywhere else you know it's
47:43 - not going to know what is what that is
47:45 - and we're going to get in here there's a
47:46 - couple different ways that we can solve
47:48 - this uh one
47:50 - we create a 404 component
47:53 - but we don't need to worry about that
47:54 - right now that's beyond the scope of
47:56 - this course but
47:58 - in our remember we created another route
48:01 - which is just submitted
48:04 - and now you can see our form submitted
48:07 - works our form submitted component is
48:10 - there and we're dynamically changing the
48:12 - routes so that
48:14 - it it goes and
48:16 - uh works accordingly so how do we uh how
48:18 - do we just link to this and um
48:21 - pass
48:22 - how do we
48:24 - create our routes uh to go and send to
48:26 - it well it's just an anchor tag at the
48:28 - end of the day really so if we go to our
48:30 - crypto form component
48:33 - we can go to right here we're not going
48:34 - to do anything with this send form
48:36 - component um we'll just create a router
48:38 - link on our
48:40 - crypto form template
48:44 - and we'll just say
48:48 - router link
48:50 - and what do we want it to equal
48:52 - in this case we just want it equal to
48:55 - submitted
49:02 - and bam it jumps between everything we
49:04 - want we can throw this router link on
49:06 - anything that can be clicked essentially
49:10 - router link can also take in an array of
49:12 - values
49:13 - so if you're going to have different
49:15 - values now this would work exactly the
49:17 - same
49:19 - just something to keep in mind so if we
49:21 - click send form it's going to work the
49:22 - same
49:23 - that way if you have parameters or ids
49:26 - or you have multiple things you can
49:28 - concatenate that but um it can take in a
49:30 - string or it can take in an array
49:33 - all right while we're at it let's just
49:35 - go into our form uh component and just
49:37 - add some text that makes sense something
49:39 - like um you know
49:42 - we'll just make this an h1 we'll make
49:44 - this like an h3 and we'll add the text
49:47 - center class
49:49 - and we'll just put some something like
49:51 - thank you
49:53 - thank you for
49:55 - your input exclamation point
49:59 - we're not going to really worry about
50:00 - too much of
50:02 - uh making this app look too good but
50:04 - that's that's that's one thing that i
50:06 - can
50:07 - that we can do to get started
50:09 - all right so let's jump back into our
50:10 - crypto form component and
50:14 - we're going to jump into the html we're
50:16 - going to just
50:17 - first off we're going to display what a
50:18 - pipe is
50:19 - one of the common pipes that you can use
50:22 - and so a pipe just as a reminder
50:25 - something that you are going to use to
50:27 - edit data or to to essentially
50:30 - filter how you see data and what it what
50:33 - it looks like and a good example that is
50:35 - the date pipe so let's create um
50:38 - a variable here we'll just call it
50:39 - today's date and we'll set this equal to
50:41 - a new date
50:44 - oops new date
50:47 - there we go
50:48 - and we'll jump into our crypto forum
50:50 - component and just right at um you know
50:54 - let's jump back here real quick and then
50:57 - we'll create a new div here
51:00 - and in here i'll have a
51:03 - just put a little h
51:05 - h5 that is um today's date
51:10 - again we're not trying to make this look
51:12 - the best
51:14 - it's mainly about
51:15 - illustrating an idea so
51:24 - today's date data oh my goodness today's
51:26 - date
51:27 - there we go
51:28 - all right cool so
51:30 - this very long string uh eastern
51:32 - daylight time
51:34 - all that that's not very good what we
51:35 - can use though is some built-in pipes in
51:38 - angular to actually go and filter this
51:41 - so that we can get in the form we want
51:42 - without having to manually change it
51:44 - so the date pipe uh we're looking at
51:47 - that documentation right now you can see
51:49 - that it comes with several formats that
51:52 - you can use as an example short is
51:54 - equivalent to
51:55 - month day year year
51:58 - hour minute minute and then time zone
52:01 - all that sort of stuff um and then you
52:04 - have these are all predefined but you
52:05 - can see there's a lot of different
52:06 - examples and uh it goes on and on and
52:10 - there's a lot of documentation some
52:11 - other pipes in here to keep in mind they
52:14 - have the number pipe which is allows us
52:16 - to um you know do decimal places on our
52:19 - numbers there is the to lowercase and to
52:22 - uppercase pipe um
52:24 - all all that sort of stuff there's also
52:26 - the slice pipe
52:28 - um
52:29 - there any others bunch of pipes and you
52:31 - can write your own uh we'll go ahead and
52:33 - showcase how to write our own
52:35 - real quick after we use the date pipe so
52:38 - we should i believe we already have the
52:40 - common module imported here but all we
52:43 - need to do to use the datepipe
52:46 - you'll notice we're using these and
52:48 - primarily in our
52:50 - html so if we parse by date
52:54 - you'll see we get
52:56 - the default one but now we get this very
52:58 - nice added
53:01 - very nicely filtered default value
53:04 - now if we wanted to do our own custom
53:07 - one we have this colon that comes so the
53:10 - pipe as you might imagine is denoted by
53:12 - this
53:13 - pipe
53:14 - and if we wanted to add uh custom ones
53:17 - we could do it with a colon and this
53:19 - essentially tells us hey we're about to
53:22 - add in an optional parameter to our pipe
53:24 - here like so and we could pass it short
53:27 - remember we had the short we could also
53:28 - pass in i believe mm is month month
53:31 - minute or
53:33 - what is that
53:35 - minute that might be minute yeah this
53:37 - minute
53:38 - i think mm is month
53:40 - which is the fourth month um for our
53:42 - useful just passing short but that's how
53:44 - you pass in optional parameters now
53:46 - let's go ahead and create our own custom
53:48 - pipe all right we're gonna make a very
53:51 - simple pipe what we're gonna do real
53:52 - quick is just create a drop down here
53:54 - that has a boolean value of true or
53:57 - boolean value of false say hey do you
53:59 - like crypto
54:00 - or do you believe in crypto so we'll
54:02 - just do uh create a little div real
54:04 - quick
54:05 - make that a row a little div dot call
54:08 - dash md-12 and a label dot font dash
54:14 - weight dash
54:16 - bold and
54:18 - uh
54:19 - love
54:20 - crypto something like that
54:22 - and we'll just ask a question it'll be
54:25 - true or false do you
54:27 - love
54:29 - crypto and uh ideally you probably
54:32 - wouldn't use a
54:34 - a um select tag for this but we're going
54:37 - to uh
54:41 - select love crypto and then in here
54:44 - we'll have option
54:46 - uh value
54:49 - true
54:51 - and then we'll have um
54:53 - true here for now
54:55 - and then we'll also have option
54:59 - um
55:00 - false
55:01 - and i'll have false here for now as well
55:03 - and what we're going to do is we're
55:04 - going to write a simple pipe that says
55:06 - if it's a true value if it's if the
55:09 - value is true go ahead and change it to
55:11 - yes output is yes if the value is false
55:14 - go ahead and output it to false
55:17 - all right so let's start by creating a
55:19 - new pipe how do we create a product at
55:20 - this point you probably guess ng
55:23 - generate
55:24 - pipe and we're just going to call this
55:26 - bull
55:27 - uh bull
55:29 - yes actually let's call it yes yes
55:32 - no and it's going to create a new pipe
55:35 - for us
55:36 - jump into back into our component for
55:38 - submitted and then you'll see we have
55:40 - our test file and then we have our
55:42 - actual pipe
55:44 - all right so let's go over what's going
55:45 - on in our pipe here so you'll see we're
55:47 - importing two things
55:49 - for our pipe we have pipe pipe transform
55:52 - this is our decorator and uh remember
55:54 - how we did slash date that's what this
55:56 - name is for in our case it's going to be
55:58 - yes no
55:59 - and then of course we're exporting uh
56:01 - yes no pipe and we're implementing pipe
56:03 - transform what is the transform
56:06 - property coming from pipe all that is is
56:10 - essentially our logic hey when we call
56:12 - this pipe on a value what do we do with
56:15 - it and so
56:16 - uh here we can go ahead and take
56:19 - uh get rid of all this sort of stuff uh
56:22 - not trying to introduce any type script
56:23 - as much as we can in this in this
56:26 - introduction video so what we want to
56:28 - happen here
56:29 - is say hey
56:31 - if
56:33 - value meaning if it's true
56:36 - return
56:38 - yes
56:40 - else
56:42 - we don't need else right because
56:44 - it's a return statement uh it's not
56:46 - going to hit this unless the sales else
56:48 - go ahead and return
56:51 - no
56:52 - and so now we've essentially written our
56:54 - first pipe
56:56 - let's go ahead and save this other file
56:58 - and excuse me for having that up and
57:01 - what we're going to need to do now is
57:03 - we're going to actually need to import
57:04 - that pipe in our module so that we can
57:05 - use it elsewhere
57:08 - all right let's go ahead and fix our we
57:10 - just have this very nasty little input
57:12 - here and so let's go ahead and uh fix
57:15 - that by just adding this
57:17 - uh class form control which is again
57:20 - it's just a bootstrap class
57:22 - form dash control
57:24 - which will just make it a little bit
57:25 - more pretty
57:28 - cool so
57:29 - what we need to do is jump into our app
57:31 - module
57:32 - and import that pipe
57:36 - oh look it's already been imported for
57:37 - us you'll notice that pipes
57:39 - go in declarations as well just as
57:41 - components do
57:43 - let's go ahead and close some of this
57:47 - and so
57:48 - what we can do here
57:51 - is we'll just do some string input
57:53 - interpolation we'll put the string true
57:55 - here and then we'll pipe it with yes no
57:58 - and then we'll do the same thing with
58:00 - false
58:13 - so bam so you'll see our values here
58:16 - are actually
58:19 - oh excuse me so the reason that this is
58:21 - returning yes and yes it's not because
58:23 - our pipe is flawed because i made a
58:24 - mistake here so remember we're expecting
58:27 - a boolean value and when they're strings
58:30 - they are going to always be true because
58:33 - it's going to be
58:34 - um so you'll see yes and no
58:37 - uh and the value here is true and false
58:39 - and so that's a very basic pipe pipes
58:41 - are really powerful i i write i use a
58:43 - pipe um that i just call the keys pipe
58:45 - which essentially if i have an object i
58:47 - don't know what the names and the keys
58:48 - are going to be i'll do the keys and i
58:50 - can have access to all the values in it
58:52 - and it's really dynamic in that way
58:54 - something i use quite frequently so uh
58:57 - when you're creating pipes and you're
58:59 - really wait how how you want to think
59:00 - about pipes is when you're creating
59:02 - something that's going to affect how it
59:03 - gets rendered in the ui you might want
59:06 - to think about using a pipe rather than
59:07 - writing some custom logic in the
59:09 - component and that way you can reuse it
59:11 - in the other other components as well
59:13 - all right so i think we're going to stop
59:15 - there for this quick rundown of angular
59:17 - there's a lot of other things we can
59:18 - talk about in angular animations we
59:20 - could talk about um um sending um data
59:24 - from one component to another and from a
59:27 - parent to a child child to a parent
59:29 - we can talk about how to
59:33 - you know inject services and other
59:35 - services so we can talk about testing
59:37 - there's it the list can go on and on
59:40 - angular's very very long
59:42 - so if you're interested in diving a
59:44 - little bit more deeper deeper in it i
59:46 - have two angular projects uh part one is
59:49 - a introduction projects about three and
59:51 - a half hours of content where we're
59:53 - going to be
59:54 - building a personal portfolio we're
59:56 - going to introduce it to a lot new
59:57 - concepts as well expand on what we have
59:59 - and then part two is a cryptocurrency
60:02 - project where uh it's about eight hours
60:04 - of content or six hours of content i
60:06 - forget what it is it's a it's about
60:08 - twice the size of the original project
60:10 - and uh this goes into even more advanced
60:12 - details so if you enjoyed this i
60:14 - appreciate you guys watching the video
60:16 - don't forget to comment like subscribe
60:17 - sure i hope it gave you maybe a little
60:18 - bit of a head start a jump start
60:21 - to get going with angular 5 and angular
60:24 - thank you for watching the video don't
60:26 - forget comments
60:28 - milo i'm trying to do an outro here uh
60:30 - comment like subscribe share support me
60:31 - on patreon hit that notification bell
60:34 - all that good stuff um i'll see you in
60:37 - milo
60:38 - we'll see you next time
60:40 - bye guys