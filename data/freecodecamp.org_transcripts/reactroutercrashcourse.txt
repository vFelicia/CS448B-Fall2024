00:00 - React router is commonly used to create different 
routes for pages in react applications. This  
00:06 - course will teach you how to use react 
router to create your own routes in react,  
00:10 - we're going to learn about react router, and its 
different concepts such as creating different  
00:15 - routes for different pages in react. Also, 
we're going to learn how to nest a route of a  
00:19 - page under another page. hooks like US history, 
use params, use locations and use route match,  
00:27 - also how to fetch a query string in form of a 
variable from the URL. So let's get started.  
00:39 - Okay, so let's start by creating a 
new react app. I'm going to type NP x  
00:44 - create react app, and the name of our app, 
which I'm going to give react router tutorial.  
00:56 - Now what is going to do, it's going to go to NPM 
website or NPM repository and going to take all  
01:01 - of the things needed to create a new react app. 
And it's going to put all of those things into  
01:06 - this folder, React router tutorial, it's going 
to find all of the dependencies that we need to  
01:12 - create our react app. And it's going to basically 
initialize a boilerplate code for our react app.  
01:19 - Alright, so it has successfully 
initialized our new react app.  
01:22 - Now we need to switch to that folder, 
what we can do is either we can type cd,  
01:28 - and the name of the folder, you can switch 
this way. Or what you can do is you can  
01:32 - open that folder in VS code, which in my case is 
this folder. And I'm going to select this folder.  
01:41 - So here we go. I folder has been 
opened in the VS code successfully.  
01:45 - So what I'm going to do now is I'm going to type 
NPM start. So it's going to start our react app.  
01:53 - Here's our react app running successfully. So 
what I'm going to do now is I'm going to go I'm  
01:57 - going to go to the src folder. And I'm going 
to get rid of those things that we don't need  
02:02 - this, this, this and this, we're going to get rid 
of these four files. And we're going to remove the  
02:08 - places that they were being used. So over here. 
And we're going to get rid of all of these styles.  
02:18 - Inside app j s, app dot j s, I'm going 
to get rid of this. Get rid of logo.  
02:28 - And now you'll see that our app will have nothing 
to show. Me refresh it. Yep, there you go.  
02:38 - It's an empty page. Okay, so what 
I'll do now is I'm going to type  
02:44 - h1, h1, react, router Dom tutorial, for this 
react router tutorial. Let's save this and see.  
03:00 - Yes, it has successfully rendered this over here. 
So let's create a different component for header.  
03:07 - When you create a new component 
called a new folder called components,  
03:12 - it's not necessary to create a separate folder 
for components, but it's a good practice.  
03:18 - I'm going to create a different component for 
header dot j, s. And I'm going to type our A,  
03:23 - F, C underscore RFC and press Enter. 
And let's copy the same thing. Over  
03:32 - here we go. Let's first center align this thing. 
And then we're going to start with our tutorial.  
03:39 - So I'm going to give it a few of the styles in 
app dot CSS. I'm going to get rid our display flex  
03:49 - and justify content. No, 
sorry. I mean to say align  
03:56 - items to center and flex direction is going to be 
column because we want everything to be top down.  
04:05 - You know, aligned. So yeah, 
here we go. You're nice.  
04:08 - It is in the center. So yeah, I haven't done 
this. imported the header component. Yeah.  
04:19 - header is not defined. Let's 
just import it manually.  
04:33 - Here we go. It should work fine now. Yep, here 
we go. It's working fine. So now we're going  
04:40 - to install react router DOM. So I'm going 
to open a new terminal and type NPM I react  
04:50 - router DOM. And you know what I'm gonna go to 
header and get rid of this dev Let's use the  
05:01 - React fragment. So if you don't know what react 
fragment is, you can watch my previous video on  
05:05 - eight clean code practices in react, it's going to 
help you a lot 2000 years later, or it's finally a  
05:14 - react router Dom has installed successfully. 
So I'm going to go to my app JS component.  
05:20 - And to use our react router DOM, what 
we'll need to do is we're going to have to  
05:25 - cover this whole react app in something 
called browser router, browser router,  
05:31 - which comes from react router DOM, 
so you can see it has auto imported.  
05:37 - So I'm going to pull off my app in this. 
Alright, here we go. Let's close this terminal.  
05:48 - I think I'm going to have to restart my 
application. So let me just do that quickly.  
05:53 - Alright, it's fine now. So what are we what are 
we going to do next is we're going to create  
05:58 - different different routes for different 
different pages that we're going to work with.  
06:01 - So let's create a route for homepage about page 
and profile page. Yeah, so I'm going to type route  
06:09 - and press Enter. And you can see 
route has auto imported from VS code  
06:12 - coming from react router, Dom VS code has auto 
imported it. So I'm going to give it a path.  
06:19 - This is going to be your homepage. So it's going 
to be this. And we have to give it a component,  
06:25 - which we'll create in a second. So let's duplicate 
these paths. Another one will be for about.  
06:36 - And the third one will be for profile. So let's 
create these pages. First, I'm going to create a  
06:42 - new folder with the name of pages. Home dot j s, 
I'm going to create a file called about dot j s.  
06:57 - And the third file will be profile dot j s. Next, 
let me quickly write some code inside of this  
07:07 - type homepage. Remove these divs and add h1. 
Next, same thing with the about page. bout page.  
07:23 - And the profile page. All right, good. 
profile page. Alright, cool. So we have  
07:33 - created all of our three routes. Now let's 
test these routes if these are working or not.  
07:38 - So let me save my app real quick. Okay, 
there's an ad a worse theater. Okay,  
07:44 - we haven't even the components, obviously. 
So let's just give this home. Go  
07:49 - Oh, sorry. My bad, we have to import all of 
these components first. So import home from  
08:00 - slash home. And I'm going to do for 
about and profile as well. So about  
08:09 - and profile. Let me just bow and put off five. 
Here we go. So we have created three routes.  
08:20 - This is how you create a route in react by 
using react router DOM. So you can see it's  
08:26 - currently in the root folder, I mean, in 
the root path. So it's giving us homepage.  
08:30 - Let's go to the about page route. There we 
go it giving us about but you can see the  
08:37 - homepage is also appearing here and 
about page is also appearing here.  
08:40 - Why is that happening? Because you can see it, it 
has about page as well. And this route as well.  
08:48 - In this init spot, it has route as well. 
So what we can do is we can type exact,  
08:58 - so it's gonna go exactly to this path and 
not nowhere else. So if it type about it's  
09:03 - going to click open about page. And if you 
type profile, it's going to go to work.  
09:13 - Okay, I have made this mistake. Yeah, now 
it's gonna work fine. If I go to profile page,  
09:21 - it's gonna open the profile page. 
Another thing which you can do apart  
09:24 - from exact is you can use something called 
switch. So if I type switch over here,  
09:31 - and we're going to take all of these three 
inside of the switch, and I've imported  
09:35 - the switch from react router DOM. So is what 
switch does is when you go to a particular path,  
09:41 - let me remove this exact from here. So it's 
gonna find whatever it finds first is gonna  
09:48 - stop there. For example, it has written slash 
profile. So it has found the slash path First,  
09:54 - it has matched this path slash with this. So 
it is found the homepage is going to render  
09:59 - if we use Switch Murphy type exact, then 
we're not going to have the same problem now.  
10:06 - You can see it's rendering the 
profile. Now, let me type about.  
10:11 - Alright, here we go about page. All right, one 
more thing. So we don't need to manually type this  
10:17 - in the URL. So what can we do to go to another 
page, in the traditional web development in the  
10:24 - HTML, we use something called a tag to go to a 
different page. So we can use that over here as  
10:29 - well. But it has a disadvantage, what disadvantage 
is there, when we click on this a tag, it's  
10:35 - going to refresh our page, let me demonstrate 
that thing. So I'm going to go to our header,  
10:41 - I'm going to create a navigation menu for our 
app. Let me create an unordered list over here.  
10:52 - I'm going to create few list items, and have 
a new tag inside of it with h ref of a partner  
11:01 - first is going to be the homepage. So let's 
type slash over here and give it a name of home.  
11:08 - Alright, so I'm going to duplicate these 
multiple times, and going to give this about  
11:15 - about seem to get a profile, 
and profile. Let's save this.  
11:22 - And currently looks a bit ugly. So I'm 
going to give it a little bit of styling.  
11:26 - So let's go to our app CSS. And I'm going to 
add some styling to it. Let me give this a  
11:33 - class name. First, I'm going to give this class 
name of now. Yeah. Let's give it some styles.  
11:45 - So I'm going to type list style type is going to 
be none so that it doesn't displace the bullet.  
11:52 - And I'm going to type width to be 500 
pixels. So I'm going to type display, flex  
12:03 - and justify content to be spaced 
evenly swear it spreads around evenly.  
12:10 - Now you'll see Yep, it has spread around 
evenly. Now let's click on one of these links.  
12:15 - If I'm going to click on home, you can 
see the page has refreshed over here.  
12:19 - If I click on profile, again, the page has 
refreshed we have reached the destination but  
12:23 - the page has refreshed. We don't want the page 
to be refreshed. We don't want our components  
12:27 - to be re rendered. So what are we going to do 
now. So instead of this a tag, what I'm going  
12:32 - to do is I will use something called link, 
which is provided to us by react router DOM.  
12:38 - Let's click on this link. And you can see it 
has auto imported. So over here as well. Link.  
12:49 - And lastly, yeah. What do we can't use h ref with 
the link, we need to use something called to.  
13:00 - This is the prop that it takes. So let's 
save it. Alright, our app has reloaded. And  
13:08 - let's click on About. Now you can see the 
page has not refreshed if I click on home,  
13:15 - again. So you see this is the power of react 
router DOM, it doesn't refresh your page,  
13:22 - and it takes you to another 
page in a blink of an eye.  
13:27 - Alright, cool. So let's discuss some more 
features of this library. So let's see if I want a  
13:33 - default route for our app. Now what I mean by that 
is let me give a base name over here. If I give  
13:41 - the base name as a tutorial, and save this now you 
see if I click on homepage, it's going to take us  
13:49 - to the slash tutorial. If I click on About, it's 
going to take a slash tutorial slash about so this  
13:54 - is how you can define a base name for this by 
typing base name equals whatever the name that  
13:59 - you need to use. If I click on profile, it's 
going to take us slash tutorial slash profile.  
14:04 - So this is a really powerful feature. Let's 
check out another feature of the browser router.  
14:08 - I'm going to remove this. And let's say for some 
reason, you need to use the refresh feature.  
14:15 - So currently, it's not refreshing our page when 
I'm taking it to another route. So if I type force  
14:22 - refresh over here, then you'll see what it does. 
If I'm going to go to about you can see the  
14:28 - page is refreshing now it's providing the force 
refresh forcely are apt to re render everything.  
14:35 - So you can use force refresh for that, 
which I don't think anyone needs to use.  
14:41 - Also, if you want to confirm every time a 
user goes to another route, for example,  
14:45 - if I click on About you need to confirm it by some 
prompt or by some displaying some modal, what you  
14:51 - can use is called get user confirmation. You can 
type get user confirmation, and then inside of  
14:58 - this you can write a class Message to be displayed 
whenever the route changes. So I'm going to  
15:03 - write a function inside of it by typing message, 
whoops message. And it's going to take a callback  
15:13 - is going to be an arrow function. callback is 
going to take window, dot confirm. And you can  
15:23 - pass whatever component that you need to pass 
inside of it. Let's say if you create a prompt,  
15:28 - you can pass inside a prompt inside of it or a 
modal, but I don't think this is used that much  
15:33 - as well. So this is one of the features that you 
can use in react router DOM. So let's remove this.  
15:43 - Yeah. All right, let's move forward. 
First of all, I what I want to do is  
15:47 - the let's remove these styles from the 
links. I don't want this style. So I'm  
15:52 - going to go to App dot CSS, and let's remove 
the styles by typing a removing text decoration.  
16:04 - And go alone will be inherited. Yeah, fine. See, 
our pages are not that big. Right now. If you go  
16:14 - to homepage, or if you go to profile page, it's 
its height is not that big right now. But let's  
16:20 - say your your page is so big that you need to 
scroll down. So whenever you change your route,  
16:25 - what's going to happen, it's going to continue 
the other page from the same position. If so  
16:29 - what you want to do in that case, whenever you go 
to a different component, you can type like this.  
16:35 - Let me just go over here to homepage. And you 
I can, what I can do is I can use use effect.  
16:42 - And instead of use effect, I can type window dot 
scroll to zero comma zero. So it's going to do  
16:53 - it's going to continue the other page from the 
top and not the previous position that page was  
16:58 - when you were in the other component. So this is 
helpful. Okay, so next important thing is if when  
17:05 - we type to some other route that doesn't exist, 
right now, let me say anything like something,  
17:11 - and enter, you can see there's nothing being 
displayed over here. We want something to display  
17:15 - over here, like 404 error page not found something 
like that. So how can we display that over here?  
17:21 - let me create a new page for that. I'm going to 
new command create a new page called not found  
17:29 - dot j s. Right? Let's initialize this page, A, 
C, press Enter. And I'm going to give it an h1  
17:40 - of four books 404. Not Found. Let's save this. 
Now how can we how can we use this? Now we need  
17:51 - to go over here and close this? Yeah, we need 
to go over here we need to create another route,  
17:56 - we've created another route. In this case, 
we're not going to give it any of the path  
18:02 - such as about our profile or anything, 
we're just going to give it a component  
18:11 - not found. And we're going to manually import it. 
Here we go. We've imported our not found page.  
18:22 - And here we go. The message is displayed 
successfully. If I go to somewhere else,  
18:28 - it's going to still display this message. If I 
go to a relevant page, like home about profile,  
18:33 - it's not going to display any of the message. 
Alright, so let's move to the next thing, which  
18:38 - is taking parameters from the URL. So let's say 
if I want a page like something called post, and  
18:44 - we want some random post. So we want this random 
ID to be accessed by us. So what can we do over  
18:52 - here. So currently, it's going to show 404 not 
found. So let's create a new page for our post.js.  
19:00 - So what we want to do is want we want to 
fetch this particular ID. So let me type ID  
19:06 - is and we're going to display the particular 
ID. I'm going to give it h two over here.  
19:14 - Currently, it's not going to 
display anything if I go to post.  
19:19 - Okay, we haven't created that out obviously, we 
need to go to App j s and create another out.  
19:29 - Here we go. We have created this part 
successfully. Now you can see it showing  
19:33 - us ID is equals which we can't do anything if 
the slash type anything. It's going to no it's  
19:40 - not a display anything. So what we need to do 
now we're going to do is slash ID. So now it's  
19:48 - going to take a random ID from us. So if I go to 
post now it's going to display not found because  
19:56 - that page doesn't point needs to have an ID 
to display. So let's go back to our pitch.  
20:02 - And now we're going to use our first hook, which 
is called use params. Or we can use a match as  
20:07 - well, let me just display, let me just demonstrate 
it with the match first. So we're going to go  
20:12 - over here D, D structure the match from here. 
And now, what we're gonna do is we're gonna  
20:20 - go over here and type match dot params. And 
what what was the name of the params? It was ID,  
20:28 - let's save this. And let's check this out. Now. 
Here we go. If I give this let me type random  
20:37 - over here, and press enter. You can see the 
ID is generated, and it's displayed over here.  
20:43 - I mean, it's not generated, we have 
provided it, but it's displayed over here.  
20:46 - Yeah, so what's the another other way to do this. 
The other way to do this is using use params hook,  
20:53 - which is provided to us by react router DOM. So 
I'm going to click over here. And you can see  
20:57 - it has auto imported from react router DOM. Now 
we don't need this, I'm gonna get rid of this.  
21:03 - I'm gonna use use params. Let's first log this use 
params. Let's see, what do we get inside of this.  
21:12 - I'm going to remove this now. So don't get 
better. All right, let's log this use params.  
21:17 - and inspect this, you get an object. And this 
object has something called ID inside of it,  
21:24 - which is the ID that we have passed over here. Let 
me type something and press. Here we go. It has  
21:31 - given us another object with ID of something. 
So now, we're going to use this use params.  
21:40 - I'm going to type const, ID equals use params. 
And we're going to D structure this ID inside  
21:46 - of the use params. So we have taken out this 
ID and we can just use this ID over here. Now.  
21:54 - Let's save this. Let's check here we go 
something and we give it a random number.  
22:01 - And here's our ID displayed successfully. 
So this is how you can fetch the ID from the  
22:05 - URL. Now let's say we need to use a we don't want 
to change our route. But we still need to use  
22:12 - the variables from the URL. For example, if I type 
question mark, and I, let's say I type name equals  
22:20 - viewshe. Let's say we want this name this 
new How can we fetch this from the URL?  
22:28 - Is there any other way? So we're gonna use 
our second hook called use location, use  
22:34 - location, and it's also provided to us by react 
router DOM. So we're gonna type use location  
22:41 - over here, let me just log this use location 
first. And check what do we get inside of this?  
22:52 - Let's go to inspect. We get an object. So 
what does this object has it has a path name.  
22:59 - And it has a search with the value of name 
equals viewshe. Let me type something else  
23:06 - first. equals viewshe. And we can type and 
last equals Agarwal, which is my name. So yeah,  
23:18 - let's see. Now the value of search has changed 
to first equals fusion logic, what? Now how do we  
23:25 - fetch these first and last variables from this 
search? You know, variable search object. So  
23:33 - what I'm going to do now, so we're going to 
use an inbuilt API from the browser called  
23:38 - URL search params. So I'm going to select it. 
And I'm going to type you are l search params.  
23:47 - And I'm going to create an object out of it. 
So I'm going to type new URL search params. And  
23:53 - what do we want inside of this use location, we 
want this search. So let's type search. Alright,  
23:59 - let's take it in some variable. Let me type 
const. query equals new URL search params.  
24:08 - Here we go. So how do we take out the stuff 
from this query? So let me just go over here and  
24:21 - h2. And we need to use the first and the 
last. So let's first extract the first one.  
24:28 - So query dot get. And in the bracket, we need 
to, we need to write the variable that we need to  
24:36 - fetch from the URL. So I'm going to type first 
and save this. Let's see what happens. Okay,  
24:42 - here we go. We get the page from here from 
the first and let's fetch the last as well.  
24:52 - Last, here we go. So we can type n number of 
queries inside of this URL, and we can Then by  
25:00 - using this method, use locations hook. So that's 
pretty cool. Now let's see, let's suppose you have  
25:07 - a login feature in your app. And you want user to 
access the profile only if that user logs in into  
25:14 - your app. So how are we going to modify our react 
router Dom according to that, let's find out.  
25:21 - We're going to go to App j s. And we're going to 
create a new state, let's say login. import the  
25:32 - user state from react, here we go. So by default, 
login will be false. Login will have false value,  
25:40 - because we are not logged in now admit, let 
me just create a button over here to log in.  
25:46 - But nobody has created it. 
Let me just take this div and  
25:59 - put it over here so that everything 
is centered. Yes, it's centered.  
26:03 - So what I want is, when I tap on this 
login, we're going to simulate a login  
26:08 - feature by making this log in as true and it's 
going to display log out then. So on click  
26:18 - what it should do, it should set login 
as the opposite value. So if it's true,  
26:27 - it's going to be false. If it's false, it's going 
to be true. Also, what I'll display over here is  
26:37 - if login is true, if which means 
if user has successfully logged in,  
26:43 - then it should display Whoa, what's happening? 
Yeah, then it should display logged out.  
26:55 - Otherwise, it should display login.  
27:02 - Let's save this. And let's see if it's working 
or not. Okay, it's working fine. So what do we  
27:08 - want to do over here, if our user is not logged 
in, he's not going to be able to access the  
27:12 - profile page, and he's going to be redirected 
to the home page. So how can we achieve that,  
27:17 - we're going to use something called redirect from 
react router DOM. So let's remove this component  
27:24 - from here. how I'm going to do this is here, 
we're going to make the child component of this  
27:31 - route. So let's check this over here. If login 
is true, if login is true, then it's going to  
27:40 - be able to access the profile page. So profile. 
Otherwise, it's gonna be redirected. So redirect.  
27:49 - Where will it be redirected to home page. Here 
we go. Alright, let's try clicking on our profile  
27:58 - page. Let me go to about page and let's click on 
profile page. You can see we have been redirected  
28:03 - to homepage. We can't access the profile page 
now. But the moment we press login, and let's go  
28:08 - to profile page. Now. Now we're able to access 
the profile page. So it has became a protected  
28:13 - route for our app. If I'm inside of this profile 
page. And if I press logo, let's see what happens.  
28:19 - It's gonna redirect us back to the homepage. 
Now there's another way of doing this.  
28:24 - Let me show you, we can use something called 
US history, US history hook. So let me just tie  
28:32 - this over here, I'm going to remove all of 
this redirect stuff. Make it a normal route now  
28:40 - to working normally now without login. Alright.  
28:44 - So I'm going to, what I'm going to do is I'm going 
to send the log in as a parameter inside of this  
28:54 - stuff, send the login as a params. Let's go to 
profile and D structure the logging out of here.  
29:02 - Here we go. And let's create a use effect. So use 
the effect brands whenever our app is initialized  
29:10 - first time. So I'm going to take the history out 
of the US history hook. So let's type US history.  
29:22 - I'm going to assign it to const. History 
variable. All right. It has auto imported  
29:30 - from react router DOM, what happened? 
Okay, we haven't imported the US effect.  
29:37 - Here we go. Alright, so what do we need to type 
inside of the US effect, we need to check if the  
29:43 - user is logged in. Or if the user is not logged 
in? What are we going to do if he's not logged in?  
29:50 - Then we will use history. dot push is 
going to push this path to our URL.  
29:57 - So it's going to push to the slash page which 
is our home page. So let's try this out.  
30:03 - I'm at the homepage, let's go to profile page, 
I'm not able to access the profile page. Now,  
30:07 - let's log in. And let's go to profile page. Here 
we go. We're successfully in the profile page. And  
30:12 - let's log out now. Whoa, what happened? I think 
I have missed some. Yeah. Okay. So if we wanted  
30:21 - to run whenever the login variable changes, so 
I'm gonna provide login over here and history,  
30:27 - we're going to provide these two dependencies 
inside of the use effect. Whenever these two  
30:31 - dependencies are gonna change. It's going to fire 
off this function. Let's try again, we're going to  
30:36 - go to profile, it's not going there. I'm going 
to type I'm going to click on login. What am I  
30:42 - saying today? Okay, so let's go to profile now. 
Here we go, we're able to access the profile  
30:47 - page. Let's log out. Here we go. We're back at the 
homepage, if we want to go to about page about,  
30:55 - let's say, if the user is not logged in, is 
going to go to about page, if I click on profile,  
31:00 - see it redirects us to about page. But if you 
are logging in, go to profile page. So I hope  
31:04 - you all understood, you know this feature of 
react DOM. Let's move to the next feature.  
31:11 - So let's discuss how can we create 
nested route inside of a particular page.  
31:16 - For example, if inside of the profile 
page, I want to create two routes,  
31:20 - with the name of let's say, view profile, and 
edit profile, and I don't want those two routes  
31:25 - to affect our whole react router system, we only 
want them to work inside of this profile page. So  
31:30 - let's create two new routes over here. I'm going 
to remove this, let me just put it inside of this  
31:39 - round braces and then provide 
react fragments to these.  
31:45 - Alright, let's move this. Yeah, so I'm going 
to create a navbar inside of a profile page.  
32:03 - I'm going to create a link tag 
over here. And let's say view.  
32:09 - And the other link tag, is gonna 
have heard it, edit profile, it's  
32:19 - also we haven't created these view profile 
Edit Profile components yet. So we also  
32:23 - have to create those view profile. 
Here we go. We need to provide it to  
32:34 - it's going to go to work. So first 
of all, before doing all of this,  
32:36 - let's create our route and the component first 
to read we have these errors out of the way.  
32:41 - So I'm going to go below this. And as 
usual, we're going to create a switch.  
32:48 - Whoops, switch. x even has auto 
imported or not, yes, it has.  
32:54 - Alright, we need to create two routes. Route 
one will have path of slash, view profile.  
33:07 - And it has it's gonna have some component which 
I'm going to create next. And the other one will  
33:12 - be the Edit Profile. Edit Profile. Yeah. 
Let's create those two components first.  
33:20 - Review, proof filed or GS made a spelling mistake. 
reprofiled rj What the heck. br o f i l e. Yes.  
33:41 - Edit profile.whoops.js. Let's create this RFC. And 
I'm gonna give it a h two and view profile page.  
33:59 - This component created and 
remediated profile image,  
34:05 - Edit Profile page, giving this h2 as well. Yeah, 
fine. Let's move on to the next thing. Now we're  
34:13 - going to go back to our profile page. And over 
here, we're going to go and give it a to to slash  
34:21 - Edit Profile. And this one to the view profile. 
Let's see if it works or not. route is not defined  
34:34 - obviously route and links are not defined yet. 
So I'm going to auto import it from the VS code.  
34:41 - With the help of VS code here, here we go. 
All of these are important now. Alright,  
34:48 - let's see. What's the error 
over here. Link is not defined.  
34:52 - Link is defined. You can see link is defined 
over here. Let's meet Let me refresh this. Yep,  
34:56 - it's working fine. Let's go to the profile. 
Okay, we have to log in first and let's go to  
35:01 - profile. Okay, we have view profile and edit 
profile over here. But it's not working now.  
35:07 - But why is it not working now? Because we 
have already created our routes over here.  
35:12 - So what do we need to do? So what do we need to 
use now? Because we're going to use something  
35:19 - called use route, match hook, use route 
match. So this is the hook that we're gonna  
35:27 - use to help us, you know, move the components 
inside of other component. So let me type const.  
35:37 - And I'm going to take out something called 
path and something called URL from inside of  
35:44 - this thing. So let's see how can we use this path 
and URL, first of all, we want to go to, we don't  
35:52 - want to go to View profile, because it's taking 
us to slash edit profile or slash view profile,  
35:56 - we want to go for example, if your add the 
profile, we want to take the current URL,  
36:01 - and then append the view profile after it. So 
what I'm going to type over here, first of all,  
36:07 - I'm going to remove this standard string 
tags, and I'm going to use backticks. Oops.  
36:20 - Like that. Okay, so now we need to 
provide a variable inside of it.  
36:26 - Which will be URL. Yep, now it's gonna 
work fine. And the same over here.  
36:35 - URL, and I'm going to remove the 
string and give it a backtick.  
36:44 - Just like that. So this is how it's going to work.  
36:47 - And what here as well. Okay, we haven't given 
the component, prop. So it's gonna be view,  
36:57 - view, bureau file. So it's not auto importing. 
Let me just import it over here. Your profile from  
37:14 - have to go one step back and inside of 
the components and view profile, same  
37:18 - with the Edit Profile as well as your profile, 
I should work now. Then we would have component  
37:33 - component of edit, profile. Yep. So here we go. 
We have created our two routes over here. So  
37:43 - what do we need to do now, we need to provide 
it the PATH variable. But it's going to know  
37:48 - that the current URL that we are in the current 
path that we are in, we only need to append  
37:52 - this particular you, you know, URL to that URL, I 
mean path to that URL, or the route to that URL.  
38:00 - So I'm going to type path over here, similarly,  
38:07 - but over here, just like that, you know, the 
drill. I'm going to do this created a back tick.  
38:21 - Over here as well. Now, everything should 
work fine. Let's try it out. If I click on  
38:25 - View profile, it's going to take us to view 
profile page, you can see slash profile slash  
38:30 - view profile. And if I click on Edit Profile, 
it's going to take us to edit profile page.  
38:35 - And all of the other routes are working absolutely 
fine. There we go. If I click on logout, it's  
38:42 - going to take us to the home page. So thank you 
all for watching this react router Dom tutorial.  
38:46 - I hope you all understood what are the concept 
that I explained to you in this video. If you  
38:50 - have any confusion, you can comment down below 
to ask me I'll reply to you as soon as possible.