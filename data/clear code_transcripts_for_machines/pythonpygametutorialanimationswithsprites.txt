in this tutorial we are going to make basic sprite frame animation and PI game and to illustrate the principle we're going to take this little frog and animate it which should be a quite straightforward thing to do and to do all of this we are going to use sprites and PI game which I just did it tutorial about in the last video so check this one out if you are completely new to PI game and how I'm going to start with is this that as usual we start with importing PI game and sis then we have a general setup with initiating PI game creating the clock or rolling the frames per second with the clock then we have our main display surface which are still called screen then we have our game loop down here and redraw all the stuff the one slightly more advanced thing is that we already have a class called player that for now just draws surface it fills the surface then it gets the rectangle and it positions the rectangle on the screen and then light it down here we are adding this sprite to a sprite group and then we draw this one in the main game loop so what we're getting for this one is a plain rectangle it doesn't really do anything and I just put it here to save some typing if you want more details about this check out the last tutorial so the animation is going to happen in this class and before we program this let's talk about how animations work because that's quite important an animation by itself is actually really simple all you need are different images of the different stages of the animation so in our case for example all we have are 10 pictures of the different frames of the frog animation and if you play these fast after each other our eye perceives this as a moving motion which is basically what any kind of twodimensional animation is it just draw lots of frames after each other and you play them fast enough so our eye interprets this as a movement basically any movie before 3d was made in that way although 3d movies do work in different ways but that's a topic for a completely different thing but that already illustrates what we need for our sprite to animate it essentially all we need is that we need to import lots of different images into our class and then cycle through them at a certain pace and it is important to control how fast the animation is going to run we are going to see that in just a second and we are going to talk about how to control the speed of the animation it honestly isn't all that hard first step is to get all the animations into our class what I'd say the first step is to get rid of the existing stuff we have because we don't need it yeah we just don't really need it and I'm going to start with creating selftaught sprites which is just going to be an empty list and into this list are gonna load 10 images and I already copied all of these is going to look like this so you don't have to watch me type all of this by hand all we do is we take this group and we're gonna pen one thing and that's gonna be the image we are loading in and I'm gonna have pictures 1 to 10 and all of these images are in the same folder as the script otherwise you would have to add some stuff in the beginning to get the proper path towards your picture and now we have 10 images in our sprite class now we need to figure out a way how to select a certain one at different steps of the animation and the first step towards that is what I'm going to call current sprite and by default this is 0 and you're gonna see in a second why this one becomes important right now actually so when I select the actual image for this sprite I want to take it selftaught sprite good sprites with this entire group and I want to select one of these which is gonna be the index and that's going to be this sprite so later on we're gonna increase this number incrementally and then just cycle through these one by one so I just want to select self dot current sprite so right now we're just selecting the first sprite so by default this is going to be our first standard image and now we're for image now we just need to rectangle around it but selfdirect equals self dot image dot cat right this works just as before and now we need to position this rectangle with self dot rect thought and I place the top left but places however you and it's gonna be position X and position Y so now when we initiate this kind of class we get a picture and let's actually try this it should be working already except I made a typo now it should be working exactly now we can see a picture of a frog and it's moved too far to the right so let me move it I think it will just change to 10 and 10 it should look better yeah exactly this looks better so we can see it's 10 pixels from the left at least roughly but it is quite a bit further from the top the reason for that is it has a lot of empty space above the Frog it was like that in the original piece of art and I didn't really change it but it doesn't matter too much okay now with a frog let's start at animation and to animate it we need the update function so dev update and self as usual and to get to started all we need a self dot current sprite and this needs to be plus equals one so on every frame we just increase this number by one and then select whichever sprite we are using so we start with this one then we come to this one this one this one and so on so now we have an updated current sprite but we also need to make sure it self dot image gets updated as well so self dot image equals self dot sprites but self dot current image the reason for that is that when we initiate this class it uses number zero for the current sprite but when we update current sprite it already picked one so we need to pick the image again this would get us a start but we run into an error message really fast but at some point we reach a number that's higher than this one and Python doesn't find the item that list anymore so what we need is that if self dot or and sprite is greater or equal than the of selftaught sprites then we wanna self dot currents fried currents pride back to zero and if we're running this thing down this should be working except it's not that's one thing I forgot we are not calling this update method which we have to do down here with moving sprites dot update and again this update I have explained in the previous tutorial and quite a bit more detail but basically what happens here is that when you call update on this group it is going to call the update method on each sprite in that group and if you run this now now it should be working except you can already see why this isn't working it is way too fast and also plays automatically it doesn't play on button press so let's work on these two things the first one is going to be just pressing a button and having it start there and to get that one done I first create some kind of input for the button so if event dot I equals Pi game dot d down what we want to do now is take our layer and I think I just call it animate we want to run a function that animates all for once so let's add this to this class now and so I create a animate and just itself and there are different ways to organize this the way I went with is that this entire thing only runs when we have if self dot is animating equals to true and this true is going to be said in deep animate method so self thought is animating equals true and by default is animating is false and I going to create this one up here it's animating because false and let me invent all of this and yeah looks good so basically what happens here is that by default self the animating is false so when pipe wants to update all of this it looks like this is false by default so all of this is not being run when we start the code it just picks the first sprite and then displays it as an image fair enough only when we press the animate function and is animating a set to true so on that frame it is going to start running this animation and we can actually try this now and we get an error event I PI game and that's an easy fix if I run the game now if I press any button now it runs perpetually and there's no way for me to stop it but I only want to play the animation once when I press the button so let's implement this now and the easiest way to implement this is in this if statement because this one already tells us if the animation has finished running because we know if the current sprite is greater than whatever index this one here is at then the animation has finished so once self current spray is greater than the length all we need is to self dot is animating equals defaults so what basically happens now is that self the currents pride if this has gone through all of these then we sets after animating back to false so this one stops running and we go back to the first pride so let's try it now and yeah reverse button only runs once so this one's working and that brings us to the final part that we need to slow down the animation so it actually looks halfway decent and there are lots of different ways to get this one done and you could do something quite fans are using Piegan the time that get takes and make specific timers but I felt this is way too complicated and overthinking the problem quite a bit what we can do instead is something much simpler that gets you basically the same result and basically what I'm going to do is use the IMP method to round numbers down basically think of it like this we want pygame to paint the first picture not just on one frame but on let's say three to four frames and then the second one also on three to four frames and the problem we have right now is that pygame increase current spread by one but how we're going to change this is that instead of adding one we're only going to add something like 0.2 or 0.25 or 0.5 so current sprite isn't going to increase as fast anymore and then we use this current sprite to pick from the sprites we use the in function return' this number in to an end which basically means that python is going to round it down to the next number so if we incremented current sprite by 0.2 we would end with 1 1.2 1.4 1.6 1.8 and then 2 but if we want the Internet anything from 1 to 1.8 it's going to become 1 and anything from 2 is going to become 2 and then from 2 we can do the same process again and this way we basically keep on playing the same frame numerous times so let's implement this and I think is gonna make much more sense so for current sprite instead of incrementing this by 1 I want to increment this by 0.2 which for now isn't going to work because cannot pick the 0.2 index of selftaught sprites so we need to change this one to end of the current sprite so if this one now is 0.2 so zero plus zero point two is going to be zero point two if the in method gets his hand on it it's going to turn to zero point two into zero and you can get the index zero of this number but when this one runs again and we get to zero point four and this one is still going to turn into zero and it's only going to turn into one after five frames and that's basically it if I run the game now now we have a much slower animation and that's all you really need to do and now if you change this number you can get the animation speed that you want and you can even make this even more adaptable let's just call it speed and then we're going to call it speed here and then down here update speed and I'm gonna put zero point let's say the five gonna be a bit faster now we have a bit fast animation and it looks so much better but if you wanted a fast animation you could put this down to 0.5 or if you're gonna go crazy you could put something like 2 and that's gonna look weird we can barely see it or incredibly slowly but a thing 0.25 seemed like a good middle ground yeah that seems nice I hope this was useful and I'll see you around