hello there in this tutorial i will talk about how to fix bugs in pygame not literally any bug but how to approach debugging in pygame and there's one fundamental problem that you need to work around and that is that our code runs in a for loop that updates 60 times per second as a consequence if you try to use the print statement to figure out what happens in your code you get a huge amount of information that honestly isn't all that useful so we need to figure out something else and what i use is a function that displays basically any kind of information in the corner of the screen while our game is running and this function you can call basically anywhere in your code and you can call it multiple times and you can move it around basically as you want it really isn't all that fancy but it is really helpful to debug your code but well this really isn't going to be that long of a video so let's jump straight into the code and let's have a look at this here we are in some very simple pie game code if i run out of this we can see a static image with a cat the cat really isn't all that necessary i just bought it look cute and in here let me talk about the problem that we have if we wanted to find information about what's going on in the code for example let's say i want to know where my mouse position is right now what you could be doing is in the game loop use the print statement and what i want to print is pygame dot mouse dot get underscore pause and if i run out of this now we can indeed see the mouse position so if i scroll down i can't see my mouse position but the problem is this isn't all that helpful because i have to look in the console and i can't see this in real time so this is well kind of pointless at least in most cases so what i want to figure out is how to display this position in real time right on my window without having to use a ton of information in the console so let me get rid of all of this and instead what i usually do is i create a new file that i save in the same folder where my code is so in here i call this debug.pi and now we have to write a function that displays basically any kind of information in the top left corner of the window and that information basically depends on what we pass into this function and first of all we have to import pygame as always and now that we have imported pygame i also want to run pygame.init and the only reason why i am going to do that is because we have to create a font so the text style we want to use and this is done with pygame.font.font and now i need a font style and a font size the font size is the easier part i just go with 30. now for the font style i go with none so use the default font of pygame but you could basically pass anything you want in here and now we come to the actually important part and that is i want to create a function that i call debug and debug is going to need three different arguments the first one is going to be the information we want to pass into and then i want to give it an x and a y position and by default those are going to be 10. and 10. you see in a second why and now in here we first need a display surface and let me explain what that means i want to be able to run this function basically anywhere in my code in for example this debug process i want to just call debug in here and pass in the information now the problem is right now i do know what my display surface is and that is because this code here is really really simple but in more complex parts you might not know what the display surface is so this function here has to be able to find the display surface no matter where it is in our code and this we can actually get quite easily and to get the display surface we need pygame dot display dot get underscore surface and this is always going to give us the display surface and since we only ever have one display surface this is actually quite straightforward and now all i want to do is to save all of this in a separate variable let's call it display underscore surface and now all we have to do is to create some text then we want to create a rectangle with a position and finally we want to blit all of that and all of that should actually be quite straightforward and i guess let's go through it one by one and what i just realized i made a typo and i made another typo that looks better all right so i want first of all to get some text on a separate surface and let's call this one debug surface and in here all i want to do is to get my font and render that font and this needs now three bits of information we first need some text then we need empty alias and then we need a color now for antialiasing i want to go with true although what you pass in here really doesn't matter all that much since the player isn't going to see it anyway now for the color i am going to go with black but now we need something for the text and in here you could just pass in the info so what we pass in here as the argument but that might not always work because usually what you expect in here is probably some kind of number and render wants a string so we have to convert this info to a string which is well very easily done and now we have a surface with some text so that was actually quite simple now next up we have to create a rectangle and this i have called debug underscore rect and really all we are going to do here is use the debug surface and then get underscore rect and now i want to place the top left in the position where my x and my y is and the x and my y are up here so by default they are going to be 10 but we can pass in specific arguments if we want something else i'm gonna show you in a second what that means but with that we have a surface and a rectangle so now all we have to do is get the display surface use blit and then the debug surface and the debug rectangle and now we should be good to go so what we can do now is to import this debug function in our main program so in here from debug import debug and now we can run this function down here and pass in literally any argument that we want so for now let me just pass in test and let's see what happens and now in the top left corner of the window you can see the word test and this isn't particularly useful right now but what i can do now is something like pygame dot mouse dot get underscore position and if i do this now now i can get the exact mouse position right on the window which is significantly better than what we had before so this is working really well and what is even more powerful because what you can do now is copy this and let's say we want to get some other information for example instead of get pause i want to get get pressed so what most buttons i'm pressing right now and by default this is not looking great because the information is on top of each other but we can fix that quite easily because what we can pass in here is the x and the y argument and in my case the x i'm still happy with but for the y i want to give this an offset of 40. and now if we run all of this you can see that we have well two bits of information that are quite useful so i know my mouse buttons and i know my mouse position and i guess what you can also do let me close this and let me go back to debug so most of the time you don't really touch the xcoordinate and it's much more common that you just want to place information on top of each other so this y you would use much more often so instead what i usually do is i put the y before the x and this allows me if i go back i can just pass in a 40 and this 40 would then be the y offset and since we don't specify anything for the x this one is still going to be 10. and as a consequence if i run this now we get some much nicer looking debugging text and this is working pretty good now i guess there are two more things i do want to cover and the first one is sometimes you want this text to follow your mouse and this you can also do very easily so let me copy all of this and for now i just want to place let's call it mouse and i want this mouse to follow my mouse cursor so i'm going to copy this get most position and place it in here and for now i want the y position of my mouse and my x position of the mouse and now if i run this now i have mouse following my mouse cursor which can be very useful if you want to know the specific pixel position so this is also something i use fairly often and the one thing that might be confusing here is that this and this is one and zero because this is the y position and this is the x position and the reason is that our first argument is the text and the second argument is the y position and the third argument is x so just keep that in mind but i guess for now we don't really need it all right now for the last thing maybe sometimes you have a game where you have a ton of black and also a ton of white and as a consequence just having some black text isn't particularly useful and what i do in this case is to create a black rectangle behind the text and this is added with literally one line of code because all we are going to need is pygame.draw.rectangle and in here we need a display surface or well any kind of surface then we need a color and then we need the rectangle and i guess for the background here i usually use black then for the surface i want my display surface and now for the rectangle we can just use this debug rectangle and well all we need is then the debug rectangle and now since we have some black background the text should be something else usually i go with white but i guess red would also work and now if i run all of this now we have some black background for our text which is still working just fine and that way even if you have some darker background you can see your debugging text really really well and well that was basically it so i hope that was helpful and i will see you around