hello there in this tutorial we are going to be creating snake in godot and i will be going through these steps to achieve the entire thing and i do expect that you already know the basics of good dough if you don't check out these videos to get you started on the basics and to start this entire thing off let's start talking about how the game is going to work on a logical level and there are three main steps that we have to cover the first one is that we have to create a grid and for that i am going to use a tile map and usually tile maps are used to layout a level but they are actually quite flexible and you can use them for lots of different purposes which is what we are going to do and once we have the grid we are going to look at every single cell inside of this grid and then we're either going to measure what's inside or we're going to place something inside there and what we're going to place in there is either a part of our snake or the apple and our snake is actually just an array of different grids that we put together and then we're moving these points in certain time intervals super easy actually and then we come to the third part that we are going to add proper graphics and for that we are going to look at the snake and compare each part of the snake relative to the rest of the body so for example when we look at the head we look at the item before it and from that relation we determine what direction the head has to face in and really the only fundamental concept you have to understand is how to use code to influence tile maps so before we get into the actual game let's first play around with that for a little bit i think that's going to be quite useful alright so here we are in an empty scene of godot nothing is happening right now the only thing is that i already imported a couple of files so i have a font i have a couple of graphics and i have one sound file nothing spectacular and before we start with the tire maps i first want to resize our window so that we have a square so for that i go to project settings i scroll down to window and i went with 800x800 so that we have a proper square and now i close it and there we go we have a bluish square cool and to get started i want to create a basic note that i'm going to call let's call it main game and as a child of this i'm going to add a tile map and this tile map is going to hold both our snake and our apple so let's call it snake apple although it's not the greatest name but well it's fine i guess and this snake apple is going to get two tile sets so let me create them so on the right i go to tile set and new tile set and then i click on it again and we get to our tile set editor and there i'm going to start with the snake sprite sheet so i just drag it in and they can see our snake so let me zoom in a little bit and this thing we are going to separate into separate different parts so for that i'm going to create a new atlas and i'm going to click on snapping and then i select the entire region and right now you're going to realize that the tile set doesn't line up properly so especially when you look at the head for example it's split into four different parts so we have to adjust a couple of things the first one is the step size it's going to be 40 and 40. oh yeah and these graphics are all 40 pixels by 40 pixels just to mention that and then for the subtitle size this also has to be 40 and 40. and once we have that now this entire thing lines up perfectly fine and now i can reselect the region and this is looking much better cool and we could change the icon for this just to make it look a bit nicer and let's go with this one and that's pretty much it so now i can deselect it and go back here and we have our snake dot sprite sheet and there's one important thing right now we look at the name you can see snag underscore spritesheet.png and followed by zero that zero is going to become important later on but we come to that in a bit but now we can like any tile set just pick up a different part of this and draw something with it and i can just pick different elements and draw them on the screen there's one thing i forgot that right now our tiles are too large so i go to cell and the inspector and change this to 40 times 40. and now this is working much better so the one title that i have used as a basic block for now is this one and we can just use it to just paint all over the entire thing and this is how you would create a basic setup for a level that you just pick up random items from this and you build different levels from it which works super well but i don't want to do any of that okay went a bit too far back so i don't want to place any of these elements randomly on the screen i want to use code to put them in very specific positions and for that i first give our main game a script and i want it to be empty and the rest can stay as it is so click on create and now i want to go with funk underscore ready so just to get it tested and whatever this scene is ready i want to do a certain thing and now we can actually talk about using code to influence a tile map and there are a couple of methods that are really useful so let me just create a test variable that i call var test and in that we're going to store something we are going to print once the scene is ready so the most basic one if i target my tire map would be get cell and into this you have to place an x and y so let's just go with zero and zero which would be the top left coordinate and now if i save the entire scene as main game i can run this and let's see what happens in the output we get 1 which is shorthand for this cell is empty but what we could be doing now if i go back to it and let's just fill it with this one for now so the top left one this is going to be zero and zero and if we look at the bottom of the viewport you can actually see zero and zero that's the coordinate so if i go down we can see a preview of what's in there so now we run this entire thing again and i look at output we get zero and this zero is the same zero that we got for the snake here so we know that on this position we have the first tile set which is going to be super useful and actually let me add the second tile set so if i reopen the tile set i want to create a second one with the apple.png let's create a new atlas select it and that's all we needed so now i can go out of it again and now we can see we have our snake with zero and the apple with one so now if i place the apple in this position and now if we were to run this again i would expect one as the output and let's try it and there we go we have one so this is the easiest way to measure something in the tile map so this is already quite useful what we can also do and let me add a couple more tiles and let me actually make a little snake so that we have a bit more to look at so now we have a snake and we have an apple and what i want to do now is to find all the cells that are being used and for that we can get get used cells and if i run this we can get all the different cells that are being used so this is also quite useful and to make this even better i can change this to get used cells by id and now if i were to pass in 0 we would get our snake and if it were to pass in 1 we would get our apple and let's try this so i just want the apple so one and i run this again and this should give us zero and zero because the app is in the top left and we get that cool so with that we have two ways to get all the cells we need to find so this is a really good start so with that we can talk about how to set a cell instead of just getting the information so let me get rid of the print statement and instead of getting a cell i want to set a cell which is called set cell and in here we have to pass in a couple of arguments the first one is the x and the ycoordinate so my case i'm going to go with zero and zero next up we have to give the id of the tile set we want to use so if i pass in 0 we will get the snake if i pass n1 we will get the apple and for now let's go with 0 because i want to use the snake next up we have three more arguments that are called flip x flip y and transpose for now i'm going to set all of them to false because we are not going to use them but they are effectively used to rotate the tile around in its place which we are going to use more later on but for now don't worry about it and finally we have one more argument that is called auto tile coordinate and this one would allow us to select a certain tile from this tile set but for now i'm going to leave it empty and actually this doesn't have to be stored in a variable so i can just get rid of this and just to make this a bit clearer let me get rid of the entire tile set so we know exactly what's going to happen so now i have an empty tile set but when i run the code we see in the top left the one tile we have set via the code once the scene is ready and since we didn't specify a specific subtile we are always going to get the top left tile in this tile set which in my case is a tail that points to the left but what i can do now if i go back to my code i can set a subtitle set which has to be a vector 2. and in here we have to pass in an x and a y and let me explain how this is going to work and this is best explained by going back into our scene and i still have my title set open so in here you can see two rows one and two and then lots of columns so we have one two three four five six seven eight different columns and in the vector we just created the x is going to target the column and the y is going to target the row so for example 0 and 0 would be the first item but if we passed in 1 and 0 so x 1 y 0 we will go to this cell here and let's actually try this so for now let's just pass in 0 and 0 which should not make any change and we still got a tail pointing to the left cool but now let's change x to one and now we get a tail pointing in the other direction and to make this a bit more clear let's go with two and zero and this should give us the head and there we go we have the head pointing to the right which is if i go back to the tile set we have x 0 1 and 2 and for y it's just going to be 0. so this way we can put any kind of tile on the map and with that we have all the basics we need to make this game work so let's start placing the apple randomly on the screen and the logic for this is super simple all we need is to create two random numbers for x and y and then use those two numbers to place the apple randomly somewhere on our map so let's go straight into our code and let's take care of this so here i am where i left off just a second ago and i'm going to go back into my code and i am for now just going to get rid of all of this so i'm just going to put pass in here so gudo doesn't freak out about error messages and before i go into the other parts i first want to create some constants for now this snake is going to be zero and constant apple is going to be one and this is just going to make it a little bit clearer later on when i select specific tile sets which tile set we are working with and that's all that's happening here and besides that since i have to use the apple position quite a bit i also want to make this a variable so let's call it apple pause and i am just going to leave it empty however once the scene is ready i want to place this apple so i'm going to create apple boss is going to get a return value from a function i call place apple so let's create a function so funk plays apple it doesn't need any arguments and in here i want to create a var x and a var y which are both going to be random numbers and to create a random number we need rand i but i don't want any random number i want a random number between 0 and 20 and 20 i got from let me open my time up again so our entire window right now is 800 pixels wide and 800 pixels high and each of these cells is 40 pixels high and 40 pixels wide and if we divide 800 by 40 we get 20. so this is going to be the max amount of cells we have and the entire game is going to be static although you could make this more responsive quite easily but that's not the point of this tutorial so i'm just going to keep it static and just use integers so both get rand i mod 20. so that both x and y is going to be a random number between 0 and 20 and to not get the same numbers every time i am going to add the randomize method and all this one does that make sure that we don't get the same random number every time we run the game which would look quite weird and now that we have that all we have to do is to return a vector 2 that has the x and the y coordinate so every time this ready method is being run our upper position is going to get a random vector with an x and a y position so now i can close this method because we are not going to use it for a little bit and i'm also going to create another function that i'm going to call draw apple so this draw apple actually takes this apple position and puts an apple on the screen and all this one has to do is to target our snag apple and set cell and in here i need apple pause dot x apple pause dot y so the numbers we created in this place apple then i want to get the tile set apple and that's pretty much all we needed so now with a drawable function that does all it needs to do and for now let's just call this drawapple in our ready function so draw apple and let's see if this is working so we got an apple on the screen cool and let's try it again and there we go now we have a different apple and one more time just to be sure now we have an apple in a different position nice so this is already a basic start with very few lines of code we can place an apple randomly on our screen and with that covered let's take care of our snake and for now we are just going to draw a static snake the movement is going to come in the next part and the drawing of the snake works really similar compared to the apple with the only difference now is that we don't have a single position we want to place instead we are going to have an array with multiple positions and we really just cycle through all of them and draw each of these points and that's pretty much it it's surprisingly simple so let's jump right into our code and let's take care of this here i'm back in my basic setup and i want to go back straight into my code and for now i want to create a new variable that i'm going to call snake body and this snake body is going to store all the parts of our snake so it is going to store quite a few different vector 2 positions and just to get it started i want to give it a couple of points so i start with vector 2 and now we need an x and the y position very much like the apple we created earlier or the apple position more specifically and i went with 5 on the x and 10 on the y so it's roughly in the middle of the screen but moved slightly to the left and this would be the head of our snake so next up i create another vector 2 it is going to be 4 on the x and 10 on the y so this position of the snake is one field further to the left than the head and let me copy the entire thing and give it one more position this time three and let me properly assign it to the variable all right so all i have to do now is take each of these points and draw them so let me minimize all of this and create a new function that i call func draw snake and this function later on is going to become quite massive because it will draw lots of different graphics but for now just to get the basic logic working i just want to draw a plane block for every part of the snake it's not going to look great but we're going to take care of the looks later on so really all i want to do in here is for let's call it block in snake body i want to get my snake apple tile map i am really starting to regret the naming here but anyway set cell and now i need a couple of arguments the first one is the x and the y on the tile map and this one is going to be block.x and block dot y so we take let's say this first vector this is going to be this block and then we take the x and y of this to place it and the tiles that we want to use is the one for snake and this right now is going to give us let me open it again so if we left the code like this we would only get the snake tail pointing to the left which i don't want what i want is this plane block all the way to the right and to target this i have to let's say add in faults for x flip y flip and transpose and for the auto tile coordinate i'm going to add a vector 2 and i believe this one had 8 and 0. oh and it is vector 2. did i forget something no it looks good and let's actually try this so once our scene is ready besides draw apple i also want to draw our snake and let's see if this is working all right there we go we have the basic parts of our snake let me close it and with that covered we can actually start talking about moving the snake so let's work on that and this is the part where we get really interesting logic so let me talk about how to move this snake right now our snack has three different points 5 10 4 10 and 3 10 and let's say i want to move this snake one cell further to the right to achieve that i have to take the head and move it one cell further to the right then i have to take the cell in the middle and move it where the head used to be then i take the third cell and move it where the second cell used to be and that way we have moved the entire snake oneself over to the right and this process we are going to do really often about five times per second and here's how this is going to work in code we start by creating a copy of our snake body but this isn't going to be a perfect copy because when we copy it we only copy all the elements besides the last one so every time we do this we remove the last part of the snake and to make up for this we're going to create a new cell at the beginning of the snake and this new cell is going to be the sum of the previously first item in our snake body plus the direction the snake is supposed to go in and the direction is going to be set by the player and this we are going to cover later on but now we would just suppose our snake is moving to the right and that's really all we needed so now let's actually implement it and the very first thing i want to do is to maximize the code editor so we have a bit more space cool now i want to create a new function that i called move snake it doesn't need any arguments so let's jump right in and the first thing i want to do is to create a body copy of our snake so i want my snake body and i want to take a slice which is done with the slice method and in here we need two arguments the first one is the index we want to start on which in my case is zero because i want to start right at the beginning but then we want to go all the way to the end minus one so we take the entire snake body besides the last element and unfortunately we can't just write 1 godot doesn't support that instead what i have to do is snake body dot size and this would give us the number of items inside of this list and then i have to go minus two and the minus two here is important because we start counting from zero so if you wanted the entire list we would have snake body dot size minus 1 but we want all the elements besides the last one so it has to be 2 but alright now we have a copy of our snake besides the last element so now we have gotten rid of the tail and to make up for this we have to create a new head so i create a variable new head and for this one i want to get my body copy and get the first element in there so the one with index zero and towards this one i want to add a snake direction which is also going to be a vector and this is going to move this first element into a specific direction and we haven't created this one yet so let's do that so bar snack direction and this is later going to be determined by the player input but for now i just want to make this a vector 2 and let's say 1 and 0. so this means it would move to the right and that's pretty much all we needed so all we have to do now is take our body copy and insert a one new head in there and i want it to be inserted at index zero so right at the beginning and i want my new head and this is the entire logic we needed that i talked about just a second ago we start by creating our original snake body and copy all the elements besides the last one so effectively we are going to get rid of the tail and to make up for that we use these two lines where we are going to create a new head that moves our snake in a new direction and now all we have to do is i want to get my snake body back and set this to body copy so that way we can keep on working with our snack body and not have to work with a different variable and all right this is all we needed except there's one more thing because we don't want to call this function once we want to call it multiple times so we have to find some way to call this function lots of times and to do that i just went with a basic timer so i just click a timer and i call this snake tick and here for the wait time i went with 0.2 and this is supposed to be autostart but not one short and then every time this triggers i want to send a signal on snake take timeout and this is connected to our main game cool so every time this one ticks i want to call move snake and what i can do as well now i can take raw apple and draw snake and also place them inside here so we keep on drawing them and updating them as well later on and let's actually try this and see if it works so now you can see we have a movement but the movement kind of has a problem so our snake keeps on growing but this isn't because the vector doesn't work the vector keeps on having just three elements the reason why our snake is growing is because we don't delete the old cells so what we have to do every time before we move our snake we have to delete all the snake tiles so what i want to do before all of the movement happens delete tiles and snake now right now this function doesn't exist and kudo is going to give me an error so let me copy the name and create this function so func delete tiles and this one does need an argument it needs the id and this one is supposed to be an integer and all i want to do in here is to get all the cells of a certain id so i have the snake or the apple and delete all of them so i'm going to start by creating a new variable that i call cells and to get all the cells all i need is our snake apple dot get used cells by id and pass in the id we pass into so whatever we pass into delete tiles is also going to be deleted which in this case is going to be snake but this one right now is only going to give us all the used cells so we don't delete them this is going to come now because what i want to do is for cell in cells then i want to target my snack apple again and to delete cells we are still going to use set cell and we target the vector we are going to get from the cell so cell x and cell dot y but what we can do now is pass in a negative one for the tile set id and if this is negative one we are just going to get rid of whatever is in this tile so really all that we are doing in this function is we first get all the different cells by a certain id and then we tell godot to delete all the cells inside of this tile set and now this should be working so let's try and there we go we have a snake moving to the right so this is looking much better but obviously we can't move it so let's work on that so in this section we are going to give the player the ability to control the snake and really all we're going to do is to influence the snake direction we created earlier by using the input method and this is quite easy to do let's jump right back into godot and let's take care of this so here i'm back in my code and i want to create a new function that covers any kind of player input so underscore input event and this function is going to be triggered every time the player makes any kind of input and what i want to do in here is if input is action just pressed and i would just keep with the predefined one and let's start with ui up so if the player is going to press up i want to get my snake direction this one and set this to vector to the x is going to be zero and the y is going to be minus one because we want to move upwards and let me actually move both of them on the same line so it's a bit easier to read and now all i have to do is copy this thing four times and change the different directions so this is going to be right this is going to be left and this is going to be down so for right we go with one and zero or left we're going to go with minus one and zero and then for ui down this is going to be zero and one and that's pretty much it so now whenever we create the new hat instead of just moving the snake to the right we move it wherever the player last pressed the button so let's actually try this so our game is still running that's a good start but now if i press up my snake is moving up and this is working in all the different directions cool so now we have a moving snake now obviously this isn't perfect yet because i can move the snake backwards basically which well would break the game quite fast if it actually was a usable game we also can't touch the apple but all of that is going to come later for now i'm quite happy with this so with that covered let's give our snack the ability to eat the apple and once we're doing that our snack is supposed to grow by one cell and the logic here is surprisingly simple because we only require two bits of information and we have both of them so first off we need the position of the apple and this we have it's a vector two and second we need the head of our snake which we can also get it's just the first element in our snake body and really all we have to do is check if both of these are equal to each other and if that's the case our snack has eaten the apple and for now if that happens i just want to put the apple in a different position growing the snake happens afterwards so here i'm back in my code and let me scroll down a bit and let's create a new function here so i want to create a new function that i am going to call check apple eden potentially not the greatest name but well it's fine in here i want to check if apple pos is equal to snake body and we just want to check the first index oh and i have to use a proper comparison operator and then we're good to go so if this statement is true we know the head of our snake is in the same position as the apple which basically means our snake is eating the apple and if that is the case i want to get my apple pause again and again place the apple which is the function we have created earlier right in the beginning this part here and all this function is doing is it creates random positions and places the apple so we don't have to write anything new here because this function just places the app in a new position so now all we have to do is on our timeout function is also called check apple eaton and let's try this and see what happens so the game is still starting that's a good start and i missed the apple cool and nice this is working pretty well so we get our apple in a new position every time so this part is working but obviously this doesn't really target the main requirement of the game because we want to grow the snake and we already have most of the code let me explain what's going to happen so far every time we moved our snake we get rid of the tail and move the head one cell further in whatever direction we wanted to go in and now to grow our snake for one tick of our game we are not going to get rid of the tail but we are still going to add a new head and that way our snake is going to grow by one cell and that's really it let's actually implement it and let me go all the way to the top because i want to create a new variable and this variable i call at apple and by default it is going to be false and now when i move our snake i only want to do this if at apple let's say let's keep it simple so i only want to do this if add apple is false and if that's not the case i want to do this so if add apple is true i'm going to copy all of this and now literally the only change i have to make is to change this from 2 to 1 so now we are actually copying the entire list and adding a new hat to it and that way we're adding a new cell to the snake but we are only going to do this for one tick of our game so once this has run once i want to set add apple back to false and then when we eat the apple so back here i would just add add apple to true and i think that's all we needed let's try so we have our moving snake we get an apple and our snack is growing nice let me try one more and i think this is working really well so that way we have already the basics of our game so with that covered let's talk about fail states that we are actually able to lose our game and let's talk about all the possibilities that could lead to a failure state the easiest one is if we're moving too far to the left to the right up or down so if that happens we want to end the game also we want to end the game if the snake overlaps with itself and right now this could happen for two different reasons one is that the snake bites its own tail or that the player is moving in reverse so we have to cover both of these and we already have all the information we need to cover all of this so i think it's best to jump right into our code and let's take care of this so here i'm back in my code and i want to create a new function that i'm going to call check game over and the first thing i want to do because i want to check the head of our snake quite often i'm going to create a new variable that is going to be this snake head so snake body zero just to save me some writing and now we have to cover two different failure states the first one is snake leaves the screen and the second one would be snake bites its own tail so let's start with snake leaves the screen that one's the easier one and really all we have to check is if hat.x is either greater than 20 or head dot x is smaller than zero so if we're going too far to the right or too far to the left then the game is going to be over but we also have to check up and down so our head dot y is smaller than 0 or head dot y is greater than 20. so if any of these conditions is true we know our snake has left the screen and what happens then let's say i want to reset the game which is a function we haven't created yet but that comes in just a second actually let's do it right now because godot is incredibly annoying about any kind of mistake so all i really want to do in here is that if we have a game over state i want to reset our snake so put it back into the original position so i go all the way to the top and just copy these vector positions and then i just want to take our snake body and give it the original vector positions again so that way we're going to put our snake back into its original position and get rid of all the extra bodies we have added to it and along with that i want to get my snake direction and by default i want to set this to vector 2 to 1 and 0. so that by default our snack is moving to the right and now all i have to do is to copy check game over and call it in our timeout function and let's try this so i just going to move it outside of the screen and well we are getting a game over although what i don't really like about it is that if we're moving outside our snake is going to move quite a bit further and the main reason for that is that this snake timeout function is only called every 200 milliseconds so what i can do instead is to create funk underscore process and check our game over state in there and if we run this now we are checking our fail state much faster so with that we can start working on the second part that the snake bites its own tail and this one is also quite simple to achieve so what i want to do is for block in snake body but i don't want to check the entire snake body instead i only want to take a slice and now i want the entire snake body besides the hat because i already have the head and i want to compare the hat in relation to the rest of the body so this is going to be 1 and snake body dot size minus one so what's happening in here is that we look at every block of our snake besides the head so we are starting at the first index and then we go all the way to the end of the snake and in here all we have to check is if lock is equal to our head and if that's the case i just want to reset our game again and let me try this and all i have to do is to move backwards so now we can see i can reset our snake because we're moving inside of the snake but i could also play this for a second and try it that way so this is working quite well nice so the last thing we have to cover for this part is that when we get player input so this entire section here we can't reverse which is very easy to add because all i have to check is if we're going upwards then we can't go downwards so i have to add another if statements so if not snake direction is equal to vector 2 and 0 and 1. and only if that is the case our snag direction can change so there are three steps to make the snake direction work we first check for player input right now this is the player pressing up and then if the player is pressing up we are checking if the player is not moving downwards and only if that is not the case then we set the snake direction to go upwards and this logic we have to apply to all of them so let me copy this line and now we want to go right so our snag direction cannot be left which is minus one then we have snake left and in here our snack direction cannot be right so this is going to be one and zero and finally if we are going down our snake cannot be moving upwards so this would be 1 and that should cover it so let's try so our snake is still working and i'm pressing to the left right now or i'm pressing down right now but we can't move in that direction but the rest of the controls still work perfectly well cool so with that we have the really basic parts of a snake game and with that part covered we can talk about making the game look a bit nicer and this is going to be the most complex part of this entire tutorial so let's go through it really really slowly what we are going to do is we are going to cycle for each part of the snake and compare each bit with the bit before and after it and then depending on the relationship with the neighbors we are going to place a specific kind of graphic so for example for our head if the next block is to the left we know our head has to face to the right or if we are in the middle of the snake if there's a block below and to the right of a block then this block has to be a curve that goes right and down but since there are quite a few different possibilities we are going to end up with lots of different if statements so let's go through it slowly and i explain why we implement it so here we are back in the code and i have minimized all the functions besides draw snake because this is where all the graphics stuff is going to happen and let me comment out this part for now because we are going to replace the entire thing and what i want to do in here is to cycle for every block of the snake so you could go for block in snake body however that would not work because besides the block of the snake we also want to know the index of this block because the index could be used to find the neighbors of this block and unfortunately godot does not have an enumerate method so this one wouldn't be working but instead what we can do is for let's call it block index in snake body dot size so this way our block index would just be 0 1 and 2 and then we can create a new variable that is called block and this block is going to be snake body and the index is going to be block index and now i could actually let me copy the previous one so this is the drawing we had earlier and let me run off this to see if it's working and yeah we get the exact same result so this one is still working quite well nice but now i don't want to draw all of these elements anymore instead i want to draw individual elements so for example i want to target the head or the tail and let's actually start with the head and targeting the head is really easy because the head is always the very first element so all we have to do is if log index is equal to zero and if that is the case we know we have the head and in here we have to figure out what the relation between the head and the next block is going to be so for that i'm going to create a new variable that i call head direction or head dear just to keep it a bit shorter and for this one i'm going to create a new function that i call relation 2 and this is just checking the relationship between two vectors and it's supposed to check snake body 0 so the head itself and snake body 1 so the next block so let's create this function so func relation 2 and i want a first block that is going to be a vector and then a second log which is also going to be a vector 2. and now all i have to do in here is to subtract one vector from the other and i call this block relation and really all we have to do is get the second block minus the first block and this is going to give us a vector that points in one of four directions it could be 1 0 minus one zero zero one and zero minus one depending on how these blocks relate to each other so for example if the head of our snake is in position five and ten and the second block is at position five and four then we can subtract the first one from the second one and then we get minus one and zero and this would tell us that the second block is to the left and with that all we have to do is if log relation is equal to vector 2 and let's go with 0 and 1 and if that is the case i want to return left and now we have to do the entire thing for all the four blocks oh sorry this is supposed to be 1 and 0. so now let's say if this is 1 and 0 this would be right if this is 0 and 1 this would be bottom and 0 and 1 this would be let's call it top so all that's happening in here is that we are subtracting one vector from the other and this is going to tell us where these blocks are in relation to each other and now in our drawsnake function we can use that information so if head deer is equal to right then i want to get my snake apple tile map and i want to set the cell and now x and y and the entire set is going to stay the same actually all of them are going to stay the same at least for now let's just copy the entire thing so for this entire block we know that this is supposed to be the head facing to the right so what we can do now instead of taking this plane rectangle let me open the tile map again so right now we're taking this piece but now we want to take the head facing to the right so this would be two and zero and two and zero and that's pretty much all we have to do all i have to do now is to copy this line for each of the different directions so let me copy it four times and now i want to look at if my head is facing left up or down and now to pick the different graphics we can go in two different routes we could either select a different kind of vector so for example vector left instead of two and zero would be three and one so this would be one way to approach it or we could just flip the entire thing in the x direction so i could just set this to true and we would have the same outcome both would work just fine it's really up to you what you want to go for and then for up let me look it again so this one would be four and zero and we just have to flip it in the y direction so this would be four and zero and then this would be true and then for down we would just have to take four and zero and that is all we need for the head let's try this now let's hope it's working and it is not ah and the reason is quite simple that right now we are drawing all of this but then we are drawing this on top so i only want to get this line here if none of this is true so now let's try it again and there we go something has gone wrong a tiny bit which i think is quite useful to illustrate the principle so for now we know that going left and right at least shows us a head but the head is going in the wrong direction which is very easy to address because all we have to do is to change the flip x to the inverse value so true and false and now let's try again and now for left and right we have the head of our snake nice oh and for up and down this is not up this is top and down is autumn so now let's try this again and well we get something at least now but what you can see now this is that i have picked the wrong element but that's not a problem so this one is supposed to be three because we start counting at zero so now let's try it again and ah we are almost there i just inverted them final step this has to be volts and through and now let's try it there we go this feels much better so i think you can already tell this is going to be a lot of if and else statements and when i set up the entire system i went a lot with trial and error to figure out in what way each element has to point which can be quite confusing but if you work with this for a little bit it actually gets fairly straightforward and now that we have the head we can take the tail actually super easily because it's the exact same logic except on the other part so now to target the tail i want if block index is equal to snake body dot size and 1 so this one is always going to give us the last element in our snake and for this one i want to create a new variable that i call tail direction and here again i can use my relation to function and i want to place in here snake body 1 so the last element and then snake body 2 so the element before the last element and once i have that i can just copy the entire part for the head and paste it in here because it's the exact same logic except now i have to rename a couple of things or let me call this head here instead of head direction it's going to make the entire thing a good bit more compact so tail direction oh and an important part is that this has to be an l if statement so the entire thing is going to work and we don't overwrite the original one with this else statement down here so let's actually try how this is going to look and now well i guess this is some kind of snake game it could be a fun multiplayer game but well it's up to you okay so instead of getting a head i want to get a tail to make this thing look decent and i have to tailor position 0 0 and 0 1. so this is going to be 0 0 and this is 0 and 1 and 0 and 1. and we probably have to adjust it so let's have a look so it is working but each direction is exactly the wrong way but the entire logic else is still working fine cool so all we have to do is for the left and the right is to invert the horizontal direction so instead of true for x flipped is going to be false and for false is going to be true and then for top and bottom the false y flip has to be true and the true for the bottom has to be false and now let's try the entire thing again and there we go we have the head and the tail of our snake and they work perfectly fine let's say one more and yeah this is working really well nice so with that we have the head and let me put it away and we have the tail and let's move that away as well so now we can start working on all the parts in between and so far we only have to know one neighbor for each block so for the head we had to know the block that came before it and for the tail we had to know the block that came after it but for all the middle parts we need to know the block that came before it and the block that came after it so even more logic to make all of this work but again let's work through it step by step so here i'm back in my code and i want to put all of this inside of an else statement and because of that i also move all of this in there as well and the first thing we have to get here is to get the actual position of the previous end of the next block and i'm going to store both of them in their own variable so let's call this previous block and i want var next lock and previous block is going to be snake body and i want my block index and it's going to be plus one and we can do the very same thing for the next block except now this has to be 1 so this way we have a block ourselves our main block here and then we have a previous block and the next block and the relation between these three blocks is going to tell us what kind of block we need for the block itself although there's one more change i want to make that i don't want to block itself i want the block's relationship with our current block and for that all i have to do is to subtract the block itself so minus block and this is going to give us exactly the same thing that we have seen down here that we're just going to subtract one block from the other and unfortunately we couldn't use this function anymore because we are going to need a bit more information from these blocks but okay let's do some more if statements and for now i want to work on all the blocks that are either horizontal or vertical because these are quite easy to get and really all we have to know here is that if our previous block and our next block have the same x position then we know it's going to be a vertical block and if they have the same y values then they are going to be a horizontal block so really all we have to do is if previous block dot x is equal to next block next block dot x and if that is the case let me copy the entire set cell method again so these three stay the same every single time but now i want to cover the vertical cell which is going to be zero one two three four so four zero and four one are the vertical and the horizontal cell so this is going to be four and one and now i can copy the entire thing and i just want to check the y attributes and if they are true then this is going to be four and zero and let's try this now and there we go if we're going just left and right this is already looking really good but if you're going up and down something is going wrong so let's investigate that part and again the reason for this problem is that i forgot to set an l if statement so that this one did actually work but the problem is that then godot went with this statement and then use the else statement and paint it over this initial if statement so that's why it didn't work but now with an el if statement this is only going to run if neither of these work out so now let's try it and there we go if we go all the way horizontal or vertical then this is working really well so all we have to do now is to figure out the corners and this is arguably the most complex part of this entire thing so let's talk through it very slowly and all of this is going to end up in another else statement and let me get rid of this bit here entirely now because we're not going to need it anymore for the corners we have all the information we need to draw the right one but we do have to think about the logic here quite a bit so let's use an example let's say we have one block on position five and ten and then we have one block to the right at position six and ten and then one block above this block so position five and nine and let's say the one to the right is the next block and the one on top is the previous block and all we have to check now is next block.x is equal to one and previous block.y is equal to 1 but we have to check these blocks from two different positions so the snake could either come from the right and go upwards or the snake will come from the top and go to the right so when we check the relation between these blocks we have to check both possibilities and that's pretty much it it probably is going to be quite complicated so i would recommend going over this a couple of times but let me actually implement it so let's start if previous block dot x is equal to 1 and next block dot y is also equal to 1 so we have a block to the left and the block above but we also have to check the or that if next block dot x and previous log dot y both equal to 1 then we're going the same corner but the other direction but if either of these are true then we just want to draw a corner so again i copy snakeapple all of these still stay the same but now i'm going to copy i think this is number five and let me open our tile map again so now i want these four blocks here that are the different corners it's going to be 0 1 2 3 4 and 5. so i have 5 6 5 1 and 6 1. and these are the blocks i want to target now and i will probably have to work around with these different ones so let's see how far we get with this one so it's still working but now if i get around the corner we can see that we're going up and to the left or we're going down and to the right so what we have to do is to flip both of these to true and that way if we're going right and up we have a proper corner nice so now i can copy these two lines and again copy them four times for each different possibility and now one previous blocked x is minus one and i want to go with minus one and one and then for the next block x is still minus one and previous block dot y is just going to be one and if that is the case i think i just have to flip this one around so now instead of going right and up we're going right and down and let's try this so now we can go right and up and right and down nice and we can also get top and left because it's the same corner so this starts to come together quite well nice oops that wasn't intentional okay now we can cover the next one where we have x is one and y is negative one and next block is going to be one and previous block is going to be minus 1 and i think for this one we have to flip around the previous one entirely so this is false and true and let's try this one now and seems to be working nice and every other part is still working perfectly fine and now for the final one we just go with one and one and one and one and for this one i think both have to be false and this is pretty much it let's try it now and we have a fully functioning snake nice and yep i think this works really well so i assume if you look at this entire block here even further up all the way up till here this is quite a bit of advanced coding or at least let's say slightly more advanced so i would really recommend to go over this a couple of times and ideally draw all of the vectors it is really good to visualize how all of these relate to each other and honestly when i laid out the entire logic by myself i just draw them out and went by trial and error because just doing all of this in your head is really complicated but if you understand the basic logic all of this actually becomes really simple but okay now we have finished our drawing snake function so i can close it and not worry about it again but now while we're at it let me go back to the scene again we don't have a background which well would be kind of nice to add and for this one i was quite lazy because i already have the grass background and all i have to do is to add a texture rectangle and put it behind our snake tile map and place it in there and we have two blocks and these are also 40 by 40 pixels so they are already covering the same block size and now all i really have to do is to go to layout and click on full rect and then in the inspector click on expand and stretch mode is supposed to be tile and that way we get the entire background so let's try now and there we have a much better looking game so this is already getting much much better so very nice and we are actually quite close to finishing the entire game the one thing left to do is to talk about the score and to add some sounds and that's pretty much it both of these are really easy to get so let's start with the score and all we have to do to get the score is to measure the length of our snake body array because every time our snake eats an apple this one gets longer by one unit and then we just have to display that number minus our starting length which is super easy to do so let's jump right in so here i am back in my main game scene and to get our score i want to put all of this into a new scene that i will just put down as a 2d scene and let's call this one score seems like a good name and for now all i want to put in here is a label that i will call score text and by default just so we can see it let's put a zero in there so now if i zoom all the way in we can see our zero and furthermore i can give it a custom font on the right under custom fonts i give it a dynamic font and i click on it again and i click on font and drag in poets in one the font i had in my font folder and now this is looking a little bit nicer and while we're at it i also changed the color of the font so i go to custom colors and click on font color it's not supposed to be black instead the font hexadecimal is 3 8 4 a 0 and c which is a dark greenish color which i think works well with the theme and since i want to reuse it i click on the plus in the bottom here and now i saved it so we can reuse it later and now i have the number and i want to save this scene i am also going to do this in the main folder and score is still a fine name and now back in our main game i am just going to put an instance of this score as a child to our main game and now if i run the entire scene i can see the zero in the top left it doesn't do anything right now but we are going to take care of that right now and let me explain how i want to do that i am going to put my score scene into a group and this group is going to have an update method and every time our snake eats an apple i'm going to trigger this update method and pass in the length of our snake and that way we can update the score every time the snake eats an apple so we are going to use a very simple group setup for godot to make all of this work so back in the editor i go to score and with my score selected i go to node and groups and i'm going to give it a group and let's call this score group and now we can see the icon next to score and besides that i also want to give it a script and i'm going to leave all of this let's leave it empty seems fine and now in here i have to create a new function that i call update score and this update score is going to take one argument that i'm going to call snake length and then all i want to do is to get my score text dot text and this is going to be a string of the snake length so literally all that happens in here is that whenever we call this method we are taking our score text and setting the string of the text to whatever the snake length is going to be and now that we have that we can go back to our main game scene and let me clean this up a little bit so it looks a little bit neater okay this looks better there we go okay now in our function for check apple eaton i'm going to open this one and every time this is happening all i want to do is get tree and call group and i want to call my score group and inside of that score group the method i want to call i called update score or at least i think i did uh yes i did and the argument i want to pass into it is snake body dot size and now with that this should theoretically be working let's try so i run the game still shows zero and now whenever i eat the first apple we get three we're gonna fix that in a second but if i eat another apple we get to four and then we get to five and let's try one more just to be sure and we get to six cool so this is working and now the only problem with the score is that when we eat our first apple we don't go to one instead we are going to free and the reason for that is that our snack body by default has three vectors inside and then when we eat the first apple this size is supposed to be four but we only update the snake body after this is run but since all of that is constant all i have to do is to get my snake length and subtract two and that's pretty much it so now let me get back to my main game and let's try this again now we still start at zero and if i now go up we get to one and then we will get to two and so on so this is working nice and well cool so now we have a score and all we really have done here is that we have taken the length of our snake minus the starting position with some minor adjustments so what we have to do now let me run the game again is that we have to place the score in a nicer position because i don't want it to be this random number in the top left of the screen and we could approach this topic in a couple of different ways one way would be to use control notes and this would be a perfectly valid way but i'm not going to use it instead i'm going to write some code to place the text in the bottom right for the simple reason that the game is really simple and static so we don't really need any kind of fancy setup so let's have a look at this so i go back to my score scene and the first thing i want to do is to add another sprite and this is going to be the apple because i want to have an apple next to my score so in graphics i'm going to drag my apple as a texture in there so now we have an apple and the text and let me rename the sprite to apple and now i have to set up the entire thing in code and the first thing i need is the actual screen dimensions so i need to know how large the window is to place something in the bottom right and for that when the scene is ready i want to create a new variable that i have called screen size and to get the screen size or more specifically the viewport size i need get viewport dot size and this is going to give us a vector that shows the x and the y dimensions of our viewport and now once our entire scene is ready i want to use that information to place the apple and to score and let's start with the apple i think that's a bit easier to illustrate so i want to get my apple and i want to set the position and for the position i'm going to need a vector 2 and in here i need an x and a y position and i have both of them it's just the screen size dot x and screen size dot y but now if i run this entire scene we can see that we can't see the top left of the apple but the center of the apple is in the corner of the screen so this is no good so i have to move both of these a bit further to the left and a bit up and the numbers i have come up with are 60 and 40. and now if i run the scene we can see the apple in the bottom right so this one looks quite nice and with that i want to get my score text and do the same thing to it with one difference that we couldn't just place the position of the text because this one is a control node so instead what we have to do is to get the rect position and once we have that we can do the same thing we have done to the upper position so this one also takes a vector 2 vector 2 and i can literally just copy the entire coordinates for the apple and move them slightly further to the right so instead of 60 i go to 40 and then i also place the y position a bit further up so 50. and let's try this now and it's very hard to see because we have a gray background but you can see the zero there very faintly but if i go back to my main game scene and let me actually set up a main scene so main game if i run this you can see it much better and the score also still works so this is all coming together quite nicely the only problem now is that i think there should be some kind of background behind the score because just having the apple and this text on the screen well it looks a bit weird so what i want to do is to draw on the screen and this fortunately we can do very easily all i need is the funk underscore draw method and in here we can draw a method that is called draw rect and this one is going to need two arguments at the minimum the first one is a rect to d and the second one is a color so what i'm going to do is i'm going to create a bg rect in just a second and to create color i just have to write color and here we have three different options we have just color we have color 8 which stands for color 8 bit and then we have color n which stands for color name i want to go with color 8. and in here we have to pass in three numbers the amount of red the amount of green and the amount of blue and for each of those we have to get a number between 0 and 255 with 0 being the absence of the color and 255 being the full amount of the color so for example for red i want 166 which is a bit more than 50 percent of red then i want 209 for green and i want blue so for this color we have a lot of green a bit less red and very little blue so this would cover the color itself but now we have to create the actual rectangle we want to draw so i want to create var bg rect and this has to be erect 2 and for this rect2d we either have to pass in two vector 2ds one vector2d for the position and one vector to d for the size or we just pass in four different numbers that are for x y width and height i'm going to go with the second approach because i have used way too many vectors in the last hour so let's work through them the first one is the x position and i have the x position for now it's just apple dot position dot x this isn't going to be perfect but for now it is good enough next up i want the y position and this is also going to be the apple dot position except now it's going to be y and now i need the width and the height or the width at least for now i'm just going to go with 100 and for the height since i know that the apple is 40 pixels high i am just going to go with 40. and now if i run this entire game um well it is there but it is very hard to see so let me close this game and let me just open the scene by itself ah so this is much easier to see so now we can see that we have placed the top left of this rectangle in the center of our apple so it's a start but it's not perfect let's fix it since i know that the apple is 40 pixels wide and 40 pixels high all i have to do is to subtract 20 from the x and the y position and with that we should already have a much better rectangle nice so this one is looking quite a bit better already but now the problem is for the width i don't want a generic number instead i want to combine the width of the apple and the width of the text and let me put this into its own variable just so it's a bit clearer so let's call this var score with and how i am going to get this is i'm going to get my apple i'm going to go with get rekt which is going to give us a rectangle of the outlines of the apple and of this rectangle i want the size and this is going to give us a vector with the x and the y dimension and of that i only want the x one so this entire line is going to give us 40 because i already know that my apple is 40 pixels high and 40 pixels wide and towards that i want to get my score text and do the same thing so get rekt then i want the size and then i want the x value of the size and that's all i needed so now i can type in score with and let's try the entire thing now so now something weird that this entire rectangle is too wide but all we have to do to fix it is to subtract a few pixels from this rectangle in my case i went with 16 and let me actually add it all the way up here so minus 16 and now if i run it now we get a proper rectangle and i really don't know why godot makes this much longer than it's supposed to be it might be a problem with the font i really can't tell if you know let me know in the comments but okay now we have a proper rectangle that we can work with and what we can also do is if i copy the entire rectangle i can add one more argument for false and this argument here is the fill argument and by default it's true so since we didn't pass anything in here this is true and if this one is true godot is filling the rectangle however if this one is set to false godot is only drawing a frame around the rectangle so let me illustrate this by just adding 0 and 0 and 0 in here so now we should be drawing a black frame around the rectangle and let's try this and there we go it's a little bit hard to see let me run the actual game this is much better to see so now we have a black rectangle around the score that makes it much easier to see and all of this is coming together quite well nice but now for the color i want to use 56 for red i want to use 74 for green and i want to use 12 for blue and this is going to be the exact same color as our text so now if i run out of this this is starting to look a bit nicer cool so now we have our score and all of this is working really well so all is good and with that covered we can finish the game by adding a sound and fixing some minor bugs and let's start with the sound that is the super easy part so here i'm back in my main game scene and all i have to do is to add a new node that is going to be an audio stream player and i have called this crunch sound and into this i am adding my crunch sound and now we have a sound we can work with and really all i have to do is if my apple is eaten i am also going to call this so i just target my crunch sound and click on play so let's try this one now and i can hear a crunch sound so that is the really easy part cool and right now there's one possible bug that can be quite annoying since we're placing the apple randomly on the screen there's a small chance that the apple lands exactly on the body of the snake which well i don't want but fortunately this is very easily fixed all we have to do in our process function is when the apple is overlapping with the body of the snake then we want to reposition the apple and once we have that we have finished the game so let's jump right in and finish the game alright so here we are back in the editor and i want to go back to my code and move all the way to the bottom to my process function and in here all i have to do is check if my apple pause in snake body and if that is the case i want to get my apple pause and place it in another random position which we already can do with the place apple function and well that is literally it this is all we have to do so now whenever we are running let me find it whenever running check apple eaten and replace the apple then we also check if the apple lands somewhere on the snake and if that is the case we want to reposition the apple and we want to do this immediately so it has to be in the process function and now let me run the game to see if it still works and this still seems fine we can also eat the apple and well that's it so this should be a fairly decent slate game so i hope you enjoyed this and i will see you around