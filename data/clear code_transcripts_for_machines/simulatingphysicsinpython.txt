hello in this tutorial I'm going to show you how to make a physics simulation in PI game and PI monk and specifically we are going to be making this we have a blank screen with two dots and if we click our mouse button we are spawning an apple that folds down and is physically accurate and we can go completely crazy with this and just drop a ton of apples and they all fall down physically accurate at least reasonably physically accurate and yeah that's pretty much it let's jump right in and before we get into code let's talk about the theory of what we are doing and the most important thing we have to talk about is the PI Monk library and the PI monk library is basically a 2d physics library so this one can help us to calculate physics in a 2d space and this library could stand entirely by itself so you could just run it not visualize anything but have all the accurate numbers to calculate some physics simulations but what we are going to do for this tutorial is we take what's being calculated by payment and then visualize all of this with PI game and you really have to be aware that those are two different libraries and they are fairly independent of each other so why we calculate the physics and pi monk we could visualize them in lots of other libraries this could be piglet this could be Medford lib this could be PI game arcade there are lots of different ways basically anything that can visualize theta could visualize the data from PI map but in our case we are using PI game because it's a fairly straightforward library and I do make the assumption that you already know some PI game it doesn't have to be much just the absolute basics if you don't know them check out this video it explains all the basics you need for this tutorial but we followed up one done let's talk about how to simulate stuff in PI monk and before we get into explaining anything we have to install PI game and PI monk so if you're in a Mac open the terminal if you're on Windows open the powershell and to install PI game Beauty pip install PI game to install pi manually pip install PI Mac in both cases you should be seeing a brief animation and then you have it installed this step should be fairly straightforward and once that is done you can use them like any other library in Python so you just need to type import and import your relevant module you want to have let's actually talk about how PI Mac works the first thing we need for pi is to create what is called a space and a space is just an area where physics is being calculated so we are basically creating a universe with our own physical laws and the one physical order is relevant for us in this case is gravity so we create a space with a gravity and also be aware you have to continuously update this simulation otherwise it's just standing still and inside of the space we can create physical objects the first thing we need is a body and the body is basically a physical body with one major difference that this body does not have a shape so it can accept physics but it cannot collide with anything so we are basically controlling an atom right now but to this body we can give a shape and this would allow to collide with other bodies and then when they all work together you have a physics simulation and that's pretty much the basics of PI Mac we're gonna do all of this in code in a little bit but again be aware right now you would not be able to see anything who actually visualize all of this you need another library which in my case is PI game okay if I love that one done let's actually get into some code so here we have the most basic setup for PI game it doesn't really do anything if I run this we are getting a screen account to anything it just shows a fairly great background and again check out the other tutorial to get the details on all of this so let's start simulating physics in this and the first thing we need is to actually import PI Mac so in our import line I import my Mac as well and if you want to make sure that you installed payment correctly just run the code now and if you do not get an error message you have installed all of the modules correctly so if PI game or PI monk have not been installed properly then you would get an error message and this is being installed along with python if this one is giving an error message something else has gone horribly wrong all right now we have all the things we need to get started so the first step we need is to create our space and this needs to be stored in a variable let us call mine space and to create this we need PI monk space and it does not eat any arguments so now we have created a physical universe that can calculate physics but we have to give it one thing in its gravity so space talk Rev the T and this one it's a gravity both for X&Y and I'm gonna go for zero and let's say for now 500 and what this basically means is that this is the horizontal gravity and this is the vertical gravity and the numbers are entirely fictional what we are looking in here is something that looks good we don't really care how physically accurate this is but all right now we have a physical space and we have gravity there's one more thing we need to do and that is to update this simulation and for that we need space dot step and now we need how fast we want to update this and in the paiement example it's 1 divided by 50 so 0.02 which is a fairly small number so effectively we have two loops in our game we have our game loop for pi game when it updates the screen and every time we update our screen we are also updating our physics simulation but you still have to be aware we have effectively two different loops that could be updated independently now we have a basic simulation if we run the code now we still can't see anything because we haven't created any objects yet and for that I'm going to create a new function that I'm going to call create apple and these are the apples I'm going to drop later and for now this one needs one argument and that's the space so this space we've created earlier and inside of this function we have to create two different objects the first one is the body and this is the atom that actually is being influenced by physics and it's being created with PI monk node body it's spelled correctly and there are different bodies that you can simulate and PI monk the easiest one is a static body this one just doesn't move at all and it's just a static body so this one would not be moving however when moving bodies come in contact with it they would be reacting towards them so they still have impact on the physics calculation so when I showed you the example in the beginning the circles at the bottom those aesthetic bodies because I don't move but other physical bodies can still interact them the second kind of body is a dynamic body and this is a body that can be moved and these are the apples we have created earlier and the third one is a kinematic body and we are not going to create them in this tutorial but basically what they do is that they can be controlled by the player or by some external code basically think of it like this the kinematic body can move by itself and influence other objects the dynamic body can only be influenced by outside objects but it can still be moved is that a body just can't be moved at all and in our case our apples are going to be a dynamic body and for this one we'd three different arguments the first one is the mass of the object the second one is that I know sure and then the first one is the actual body type which in our case is dynamic mass should be the easiest one it's basically how heavy the object is inertia means how difficult it is to get it to start moving and you can calculate inertia in a more mathematical way in our case we're just gonna use some random numbers and see what it looks good so for our mass I just go with one and for inertia I am just going to go with 100 libous our first two arguments now when to specify the body type this will be done with the keyword argument body underscore type and then we need pie mark dot body thought dynamic all uppercase letters so now we have an atom that can be influenced by physics and the next thing I want to do is set a position of this atom so body top position and this again needs a tuple or now I'm going to set it at the middle of the screen so ax is going to be four hundred and zero so our screen is 800 by 800 pixels wide and I'm gonna sell at 400 so the middle of the horizontal space and zero so right at the top so now we have an atom in one specific position but it could not be interacting with anything because it's just an atom it cannot collide with anything to get it to collide with anything we need a shape and in our case our shape is going to be a circle so we are simplifying things quite a bit and generally think of it like this calculating physics is really hard and math intensive and when we later use our Apple it has a very irregular shape which would be a nightmare to calculate so what we do instead is we try to simplify the shape and in our case since the Apple is fairly round we just put a circle around the entire Apple and simulate collision with this circle which is going to make everything much simpler but you could literally just draw a couple of points around the Apple and make this much more accurate so we need high monk dot circle and the circle needs two arguments the first one is the body so this line here and then we need the radius of our circle which in my case I am going to go with if let's say 80 and this number we have to experiment a little bit with in a bit because we have to make it as close to the apple as possible so we basically run the simulation and see how good it fits and I will make it smaller or larger depending on what we need so now that we have a body and the shape we have to add both of these to our physics simulation and this is space dot add and body and shape and now if we were to run this function we would have one body in our simulation however again this would not be visible even though we have a body and a shape so the body we are creating could clip of something but we just wouldn't be able to see it so we're basically using the force right now and to make it visible we need to return something and what we need to return is the shape so what we used PI game for is to visualize this shape and wherever this shape happens to be we are going to draw a circle in PI game a by itself these are two different objects and all of this is going to happen in a different function that I'm going to call draw petals and it just needs one argument which I'm going to call apples and this is going to be a list because we want to create multiple apples and in this list we loop through each apple so for Apple and apples and inside of this for loop we just want to draw a circle and this happens with the normal pie drawing mechanics so pygame to draw dog circle and we'll just service the drawn which in my case is screen there Moneta color which for now I'm going to just make it black so 0 0 and 0 and next up in the center of this circle and effectively what we want is to take this shape and the center of this shape and have our circle in the same position and since each Apple represents the shape what we need is Apple body dot position so this line here who gave us the center of this shape because at the center of this shape we have the body and from the body we can access the position so basically what we created here in the beginning it's gonna be passed into our circle as well later on and then we need one more argument and that's the radius of the circle and now a case this has to be a t because when we create this circle up here this is also a tea light it's gonna stick with a tea and that's basically it all we need for now so in here we created a physical body and in here we are drawing it in piking so now we to run all of these functions and for now I'm just going to run this create Apple function once and what I want to do is create an empty list then I'm gonna call apples and for now it's just an empty list and then petals dot append and create Apple and it gets space so basically create an empty list and we create one apple and pass it into here for now it's just a circle but we can insert an apple in just a little bit so now we have a list with one circle inside of it and this needs to be drawn now so in our game loop I gonna draw apples and I pass in eat apples list and if I run this now we get an error because pie game was expecting an integer so let me explain when this one here is run it is as floats where as pie game expects integers so the X and the y position right here are floating point numbers and we have to just convert them to integers which we can do quite easily so let me create some new variables this is going to be position X it's going to be F of body position dot X and this is going to be a float so it would have this into an argument and turn us into int and we copy the entire line and turn all of this into Y and now for this one this is just going to be position X and position Y and if I run this now we can see a ball falling downwards it's not particularly impressive right now but let me reduce the gravity back quite a bit now it should fall very slowly and it falls down at a speed of a hundred but let me increase the acts to let's say 150 now we can see that is moving to the right and we basically have our circle here that reacts to the gravity we are creating in this space and let me return office to before and this shape could wreck two other shapes as well and let's actually create one so I would create another function that I'm going to call static all and static ball is going to be very similar to create apple with the one difference that we are not going to create a dynamic body this time we're going to create a static body so static board create space and this time we want to create a body and it's gonna be high monk dot body and since we are going to create a static body we don't need a mass or inertia because this body is not going to move so no matter what you pass into it it wouldn't matter so all we need is body underscore type is high monk dot body God static on uppercase letters so this would be a body that is fixed and pace it is never going to move no matter what you do to it and then this body will also want to set it position and in my case I'm going to set a position of 500 and 500 and the next step we have to create a shape again and the shape is going to be basically the same as this one here so it can just copy the entire line and in my case I want to keep this a little bit smaller so 50 and then again space door add body and shape and then we're all set you've returned to shape again so these two functions are incredibly similar and the matter what kind of object you create you always create a body and you create a shape and then you add it to the space that's basically all there is to it and now we could actually use this function here to visualize this board as well however I'm not going to do that because later on we want to change this function to create an apple at this position so we need a new function that is there going to be quite similar so def draw static bolts this one needs finger response bolts I know justice before football in balls we just copy basically all of this just to save some typing and in this case this is ball this is ball and the rest should be working out fine except our radius is 50 so again this function of this function they are fairly similar we basically create a shape and a body and then from the shape that is being returned we are drawing all of this with PI game so when I go down I am going to create a list I'm going to called bolts and Inter balls we append a static ball that needs the arguments space and just to illustrate this would already work let me run the game and now we can see a collision so we couldn't see the second body because it's not being drawn but in our physics simulation it does actually exist so the shape of our apple circle would collide with it but to actually draw it I call it draw a static ball and bolts so run this now we can see it and it reacts properly so cool that's a basic start for simulation and that is already the basics you need to create any kind of simulation all I need to do now is to make all of this look a little bit prettier and the first thing I need to do is to change this draw apples to actually draw apples and what that means is I don't want to draw a circle anymore instead I want to import an apple and draw this apple and the first way through is to import an image of the Apple so I'm going to create Apple surface and this is going to be my game tour image upload and the name of the Apple in my case is Apple underscore read dot PNG so now we import at the Apple and it's going to be on its own surface now inside of the droplets function we have to give this position to the Apple we have created on each frame and to do that we need a rectangle so I'm going to create Apple and that's correct and this is Apple surface get rekt so we take the surface and draw a rectangle around it and the center of that rectangle is going to be position X and position Y so this is effectively just drawing a rectangle around the center of this point with the dimensions of the other surface and now I just need to put this on the screen with screen doclet this is Apple surface and Apple rect and if I run this now we can see how Apple and it's bouncing off but you could already see that there was quite a bit of a gap but we can fix that later but before that I want to first be able to click the nantan spawn Apple wherever I have clicked and to do that we need to update in the original create Apple function this position here and instead of the fixed position I want this to be a generic position that I pass into the function and then in our game loop I want to go if event dot type equal spy game dodge mouse button down only then do I want to append our Apple and the position of this apples that's being created it's gonna be event dot pause so basically when I click my mouse button i create a new apple and i pass it into the apples list and we're create the apple is going to be the event position so where i click the mouse and then inside of this it just sets the position of the body to whatever position where we clicked so when i run this now so now we can click the button and the Apple falls down and we can get as many apples as we want but you can see there's quite a bit of a gap and that's because the circle we draw around the apple is too large so let's make it quite a bit larger let's say 50 and see if that works over renders now it is quite a bit too large but it does look better let's go for middle ground let's say 65 and yeah that looks much better so now we're for Apple that bolts on it and we can do this multiple times and they all work perfectly fine and you can experiment this quite a bit so for example we could set our gravity here to something like a thousand and is going to be a hundred every one is now our apples move to the right so this could Bob simulate wind and gravity but for now I just want my apples to fall down in a straight way and that's already pretty good start so what is really left to do is to update the bolts so we can place those and have multiple balls and to do that I need to update this position here that we don't always pay sit in the same position instead we place it in a specific position so again here I want position and then this one is gonna be positive and then when we create it that happened yeah so instead of just passing space we want to set a specific position and in my case this was 500 and 500 but now because we've set a position we can just copy this entire thing and create a second one and in my case I said this is 250 and 600 and if I run this now we get two points and they both react to physics perfectly well and the one difference compared to the example is that I set the color to a different value which in my case was 217 98 and 119 letter on this now we get the example from the beginning and this works perfectly well and yeah that is pretty much it hope that was helpful and I see you around