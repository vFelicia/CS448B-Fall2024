hello everybody so a while ago I made this pong game in PI game and people seem to quite like it so I guess I added a little bit of stuff to it and make it a little bit more fancy and specifically I'm going to add two particular things the first one is to have a score counter so you can actually tell who's ahead and who's behind and the second one is to have a little bit of a count on timer before the game starts so that it isn't that surprising and you have time to prepare and covering those two topics should actually get you quite a few extra things in pygame that are really important since it's been a while since I made the game let's go over it really fast so here's the final file I made in the first tutorial and we are starting with a couple of function I'm going to talk about them in a second we effectively start with the general setup where we just initially had pygame that one's quite simple and we create a clock as well everyone is basically used to make sure the game runs at a constant speed and we have main window so here we just create the main display surface and we have to display width and height and we create a title and I have called the display surface screen in our game and this is the one that a player sees in the end this is going to become quite a bit more important if you have no idea how surfaces work in pi game check out the first tutorial they are going to explained in much more detail but for the rest of it here we set up some colors and we have two game rectangles so these are the two players and the ball itself quite simple and I use the screen to calculate whether should be on display then we have some game variables and this is just how fast everything is going to work so these are all the basic variables we need for the game then we come to the while loop and in this one in this first part here we are getting to play an input and we also get a function to quit the game once we're done with it if a get on a bit further then we have the game logic and the game logic basically runs across three different functions the first one spawn animation then we have play animation and then with the opponent AI play animation and appoint AI are quite straightforward they control the play and the opponent respectively board animation is quite a massive function you can find right at the top this one effectively controls the ball and make sure the ball collides and this function also ensures that if the bar gets too far to the left or to the right you get the ball restarted the center we use the ball start function and this function is only called from the board animation function itself and we have to find it down here and once we have those free functions we just individuals display all of it and then in the end the two lines pygame display dat flip just draws everything the claim before it and clock tot take the terminus of a frame rate it's less than 100 lines and it honestly isn't that complicated of a code but all right let's start talking about the first thing I would like to add and that is a score counter so we just display how many points a player has scored and to get the score we need two things to make all of this work the first one is that we actually the variable that calculates what the score is and that one's actually really easy we can just use a variable to measure which one is which but then we also need to display this variable in text and that's a little bit more complex in Pi game so let's first talk about how to display text in pi game in the first place to get text and pi game you need three steps the first one is to create the font itself and the font size so all this is is that you create a basic font and tell it how large it should be but at this stage you don't actually create any text you just create a blueprint for the text itself and only in the second step do you actually add text but the problem here is that this tax is going to be added on its separate surface so it's not going to be drawn on the main surface that we have created earlier so the screen and step pi again creates its own surface and puts text on that and because of that we need step number three where we take the text surface and put it on the main surface and that's basically it so in our game I will create a fund then I will use that phone to create text on its own surface and then I will put that surface on the main surface so here we are back in the code and I am going to create a new section with a comment and I'm going to call this text variables and in here I'm going to start with two variables that I'm going to call player score and I start with zero and opponent score which is also zero so those two are just integers that measure what disco is for each player so that's quite easy but next we need to create the font for the text that we want to use so I'm going to call this let's call it game font and to create that bond we need PI game dot font font and make sure you get the uppercase in the lowercase right so the first one is lowercase the second one is uppercase can be quite confusing but now we need to fund up we want to use and in my case I want to use free suns old dot TTF which is a phone that already comes with basically any computer i think okay and with that one done now we do the second argument it's going to be the size of the text in my case I'll go over text size of 32 so the larger number is the larger your text will be and discovers the first step so now we have a font and two variables that calculate what the score is and with that one done we need to create the surface where the text will be displayed on and for that I'll go a little bit lower and I'm going to put the text below all the drawing stuff you can put a little bit higher but it needs to be above the background so at least has to be below this line otherwise you're going to paint the text below the background so you wouldn't be able to see and I like all of these parts and one night's paragraph so I gonna add all of this afterwards and now we need to create a surface with the text and I'm gonna start off this in a variable first I'm gonna call the first one player text and to create a new surface with text we need to start with the font I called mine game font and I'm gonna need render and as arguments the first thing we need to pass in is the argument for what the text is supposed to be in my case I'm going to use an F string and just pass in the player score the second argument is if the text is entirely iced or not in my case I don't really care about it so I put it to false but it could put true in here it doesn't really matter and then we need the color of the text and in our case we already have the color it's the light gray color that we defined very early on in the game okay and now we have a display surface now we need to put this surface on the main surface so on the screen surface and that one is done with screen dots blitt and i don't actually know what that stands for but it puts one surface on another so what we put into arguments here is the surface we want to put on the surface and in my case this is a player text and then we need to position where to put this text and in my case is going to be six hundred sixty and four hundred seventy and I pretty much got these variables by trial and error and they're roughly in the middle and that's basically all we need if I run the game now we should have text yes well we see a zero here it doesn't exactly work yet but that's going to come in a second okay let's close it for now and now we need to do the same thing for the opponent because right now we only have to play a tax so I just copied the entire thing change player to opponent wherever it's needed on an opponent opponent player this was going to be opponent as well and I also need to change the position itself so this one's going to be 600 and if I run the game now we can see both the score variables obviously they don't change right now so we have to work on that but otherwise we already have text now all we need is to update either of these variables and then we are pretty much good to go for this part updating those is actually quite easy and I'm going to do this in the ball animation part and what we have right now is this one here that's the function of calculates if the boys gotten too far left or too far right so if the ball has gotten smaller than zero this means the ball is very far left or beyond the screen on the left and if the ball right is squared in the screen width means the ball is all the way on the right and we can use both of these to calculate if either player has scored a goal but to really calculate which one is which we need to separate them to two separate statements so let's start with that one and let me just rewrite them and don't forget function and the fifth statement now and now we have two if statements that do the same thing that we have done before but the advantage now is that we could control which side the board has entered so on the ball left this means that the player scored a goal so when he they are that was terrible writing player score plus equals one and if the bug is to find the right deer point get score so we have opponents score thus equals 1 this is going to work except for one thing that right now we have a local scope we're inside of a function and we're trying to effect a global variable which is down here so by itself this wouldn't work we have to declare a global variable for these two so this would be player score and opponent score and you can see in the top here this is a lot of global variables and this ball animation function really isn't well designed it's still working because the game is fairly small but if it becomes any more complex this is just really bad practice I only did this because I started the original tutorial and didn't expect it to become much more complex if you want to challenge yourself try to avoid this by ever using return statements or to create a whole class off the ball besides that this should now be working so let's start it up and now to hone and got a score and let's try it again yeah this works and all right now we have a player score and we are able to put text on the screen so now we can tackle the second part of this tutorial and it is to create a countdown timer before the ball starts and the really useful part we're going to learn in this part is about how to use timers and pygame which by itself is a really useful topic so let's talk about the theory of timers and pygame first before we get into the practice so effectively in pi game you don't have a specific timer so there is no function where you can just wait for a couple of seconds and then start and never function it just doesn't exist in pi game instead how timers work in pi game is something like this when you start Pi game a timer starts to count from zero until you stop the game and you can measure on what time you are on right now and you can do this multiple times and with that you can build a PI game timer and specifically what you need to do is that you first need to create a function that measures the time only once so let's say at three seconds or 3,000 milliseconds that's how pi game measures time we have a function that runs once and returns the time and after that we repeatedly call the function and try to get the time again and again and again and as soon as the difference between your original point and the current point is greater than let's say 2000 and we want to run the function so that way we have made a time that runs for two seconds and the major problem here is that you really have to be careful about running a function once and running a function repeatedly which sometimes really gets confusing and the main reason for that is that we have a wild function where everything is going to be run once a second so running a function once can actually be quite difficult at times and along with all the theory here's another problem that's going to make this even more complicated we make this kind of time at work in our game we will have to rewrite a bit of the code so I'll try to go over it quite slowly so here we are back in our code and the first thing we need is a variable that stores the time that we want to choose later so I'm gonna create a new section here and I'm gonna call it score timer dings okay and I just create one variable that's gonna be called score time and I'm going to set it to none for now we're gonna change that in a little bit but for now none just means it doesn't really do anything now we want to make sure that when a score was gold this function gets a specific kind of time and this we can do quite easily up here so we have a function when the player scores a goal and when the opponent scores a goal what we need to do in here is score time and the command we need here is PI game dot time dot get X and this would get us an integer that tells us for how long the game has been running since it was started or most specifically since this PI game dot init method was called and we need to do the same thing also for when the opponent hits the goal so now we have the starting point and also this function is only going to be called once which is quite a nice start to get this thing started and the thing we need now is to have another function it repeatedly runs and checks the current time then we subtract the score time from the current time and then the difference between them is the length of our count on but this is going to present us with a little bit of a problem oh but before we talk about this in detail score time is just like the player score it's a global function so this also needs to be cleared at the top of the function the best function projector time would be the ball start function but here's the problem the ball start function would also only be called once whenever score is achieved but this isn't good for our purposes because we need to call this poster function multiple times so we need to do a little bit of redesigning of our code and the way IDEs achieve this is to just remove this here entirely from the ball animation function and what I do instead is further down in the code I put if score time is evaluates to true then I want to run the ball start function and the basic idea here is that score time at the beginning is set to none so this one would not be running and this one would only be running if score time is something that evaluates to a true statement and when we give it any kind of positive integer like we do here or here then this one would evaluate to true and deposit function would be running so effectively we're working with the different types and and kind of exploiting app changes the types but with this kind of setup would basically make sure that now the ball start whenever score was achieved it's gonna run on every single frame as long as the score time is something evaluates to true so now we just need to make sure the ball start function let's go through it it is this one that this one only starts again after a couple of seconds and then once it is greater than this amount of time it sets the score time variable back to none so at this function doesn't run again so to achieve all of that we first need a variable that I will called current time so now we check what is the current time this one is done in the same way that we approach the time for the score time so this would also be PI game but time that get takes and make sure you understand the difference between these two even though they have the same command to do something slightly different this scar time and this scar time is only going to run once so we get one point in time whereas current time gets us on what current time we are on right now and then when we get the difference between these two we basically made a timer because this one is going to get greater and greater whereas this one stays the same so basically what we want is that if current time score time is smaller than 2100 and I'm going to set the ball speed X and all speed y to zero and let me move we put the bond to the center of the screen a little bit high up like let's put a line between but basically what happens is that when the boss that function is run and we get the current time the ball is going to be set to the center of the screen and then we check if the current time minus the score time is smaller than 2.1 seconds and the ball speed is zero so the ball just stays in the middle of the screen and now we just need a case when the difference is greater than 2100 and what I want here and actually use these two lines what we want here is that the ball speed is seven and it should be going in the random direction and same for this one so basically what happens that here we take the time check if this time is smaller than 2100 or 2.1 seconds then the board isn't moving and if it's greater than that the board is moving in the random direction and the final thing we need is scored time it's going to be set back to none so at this function down here is not going to be run anymore and again we need to declare score time as a global variable again I have way too many global variables in this code it's really bad practice please don't learn from me all right when we're doing this didn't work and we get an error message and two reasons quite simple I forgot this second zero and in case you haven't seen this kind of thing before it's actually quite a simple way to just write something that's a bit more concise but only happens here we have two variables separated by a comma and we have two values also separated by a comma and all a Python detects the first variable and assigns the first value and take the second variable and assigns the second value or let me get it away and now this should be working right and now we should have a timer so should start about now perfect now we have a timer but this isn't great yet because the player doesn't know when the ball is going to start so we need to add some text to show how much time is left so let's do that now and that's actually quite easy to do because we have done this very same thing before and the logic for that is actually quite simple and we can actually reuse this one quite a bit and what I want is to display three to one and then the ball starts so to get it free we just want to display this one when the difference between the current time at the scorer time is more than 700 but is going to be only on the screen for less than a second and then when we have that likely a number re variable and that's gonna get you can reuse for the game point yet game forth go to render just gets a free and it's gonna get a faults because we don't care about antialiasing and then we're gonna call it light gray and next we need to scream don't let number three and the coordinates are going to be screen width divided by two minus N and screen height divided by two plus twenty so basically what this one does is that we take the center of the screen and move it a little bit to the left because this point moves the top left of the number so it needs to be a little bit offset to the left and then screen height would take the middle of the screen and we go down by a little bit and remember in PI game like in most games if you want to go down it's positive Y values okay so now we have two free and is only going to show for the first seven hundred milliseconds so we have to copy this entire statement and now we want to show the number two let me change those number two and number two down here and this one's only going to show if the difference between the current time at the score time is I have a greater than 700 or smaller than 1400 and then we do the same thing again and now we want a number one number one here as well and this is going to be at one and it is going to show when we are between 1400 and 2100 and after upon countdown timer because then the board has started and all of this should be working now so let's try and let me just get a score three two one all right perfect so this is working now and there's only one thing missing that when we start the game the ball starts immediately and there's no counter at the beginning which is a little bit confusing but it can be fixed really easily all we need is to change this none to any value that does evaluate to true in my case I just gonna use true but it comes to putting one in here or or you could put any kind of text in there doesn't matter but I think true is the most straightforward one and if you run the game now and it starts with the counter and right at the beginning so we are basically done and this is a much more refined experience of the pong game and yeah I hope you enjoyed this tutorial and let me know if you have any question