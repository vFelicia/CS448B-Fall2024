in this tutorial we are going to be creating health bars in pie game and here's what we are going to be making we will make two health bars the first one is going to be a very static one so it just displays the amount of health you have in a bar but the second one is going to be animated meaning that when you gain or lose health it shows you how much you're gaining how much you are losing and both of these are quite easy to implement so let's jump right in all right so here we are in a very basic setup of pie game and really nothing happened so far if i run this code so far all we can see is a plain window with a white square in the middle it happens to be a pie game sprite but it doesn't need to be the only reason i'm using a pie game sprite is because you would usually use that for main player and a main player would have the health bar so this is why i'm using this but the helper would also work without this kind of class but okay let me close this and let's go for this code really quickly so we're importing pi game and cis we are initiating pi game then we are creating our screen so our main window in my case it's 800 by 800 pixels but it's completely irrelevant what dimensions you have choose whatever you want in here then we are creating a clock and then we are creating a player so this player class i can explain that in a second but we are basically creating a group single and instead of that we are creating the player class so nothing complicated after that we have our game loop that doesn't do anything right now we are checking for closing the game then we are filling the screen and we are drawing and updating our player then we are drawing the entire thing and then we control the frame rate so all of this is super basic pie game and if i open our player class in here also nothing difficult is happening we start by inheriting from the sprite class then we are initiating the entire thing we use the super method to get the attributes of the sprite class and then we are creating an image and a rectangle so what the sprite class always needs and then i fill the rectangle so that we have a white square in the middle but you could also add a picture in here or really add all the code for your main player but none of that matters for me so i just filled it with a white color and after that we have the update method that right now doesn't do anything but we do need it because down here we call playerupdate but all right so this is a very basic setup so let's create a basic health bar the one without animations and the logic for that one is actually remarkably simple effectively the health bar only has to be as large as our health is because that's what it indicates and the health bar also is just a plain rectangle so we can use pygm's rec class for it so really all we have to create is a rectangle with the width of our health and then depending on how much health we have this bar becomes longer or shorter because its width is defined by our player health then that's really all we need so let's implement all of this so here i'm back in my code and i first have to create some new attributes the first one is going to be self dot current health so this is the amount of health we want to track in my case i just choose 200 but this is basically random then i want to have another attribute that is self.maximum health so the amount of maximum health we can have and in my case i have chosen one thousand but again this number you can choose basically whatever you want and then i need another attribute that is self dot health bar length so this is going to be in pixels how long our health bar is and in my case i've chosen 400 so it's about half as long as the entire width of the screen so these are the very basic attributes we need but there's one more attribute that we do need that right now our health by length is 400 pixels so that's a distance but then we have our maximum health that could be 1000 and our health that is 200 so these two measure our health and this one measures a distance so there's some kind of disconnect that we have to make them relate to each other in some way that when we get to a maximum half of 1000 our alpha should be 400 pixels long and then when our health is 500 this one should only be 200 pixels long so we have to make sure that these two attributes relate to this one so we have to convert our health to the health bar length but this one is quite easy to get and i call this attribute self dot elf ratio and to get it all we need is self dot maximum health divided by self dot elf bar length and this one would convert our health to a distance of the health bar length you will see in a second what this means specifically but for now just take it as it is so now we have some health but we don't have any way to influence our health so all of these numbers are completely static which obviously is not great so to fix that i'm going to create some more methods that can add or subtract health and the first one is called get damage and then here i want our self that always is necessary and then i want an amount so how much damage we are going to take and in here what i want to do is if self dot current health is greater than zero then i want self.current health minus equal the amount of damage that we would receive and we can also add ifself.c is smaller or equal to zero then self.currenthealth is equal to zero just to make sure we don't go below zero but obviously in a real game if you come to this state the player is dead but well for now doesn't really matter so now we have our damage and then we also need our get health and this one works the same way so we have self and we have amount and if self dot current health is smaller than self dot maximum health then self dot current health plus equal amount and if self dot current health is greater or equal to self dot maximum health then i want self dot current health to be equal to self.maximum health so really all that happens in these two methods is that we ever add or subtract from our current health and if it's below zero we set it to zero or if it's greater than our maximum health then we set it to the maximum health so effectively all we are doing is we add or subtract and we keep it within a bound of zero and our maximum health and with that covered we need some way to call these two methods so we can actually test our health bar and in my case all i'm going to do is to check if we're pressing up or down on our keyboard but in a real game obviously you would want to trigger them in different ways like if the player is hit by an enemy or something like that so in our event loop if event dot type is equal to pi game dot key down and if event dot e is equal to pygame dot a up then i want to call our player group i want to target the sprite and then what to call get health and in here you could add in basically any number i'm going to go with 200 and now i just copied the entire thing let me do it properly and this is going to be a down and it's going to be get damage so with that one covered we have a way to call our health bar so now we can close this entire thing and never look at it again and same for these two just for simplicity so the code doesn't look too messy so now we can actually get to creating our health bar and i am going to create a new method for that then i'm going to call basic health and needs self as usual and then in the update method i'm also going to call self dot basic health and in here the actual logic is remarkably easy all we have to do is use pygm draw.rect so we are drawing a rectangle and now we need a couple of attributes the first one is on what surface we want to draw in my case that's going to be screen so our main display surface then we need a color so 255 0 and 0 a basic rgb 2 before red and now we have to create a wrecked object all inside of brackets and the first two attributes are the x and the y coordinate so in my case i just go with 10 and 10. so we are 10 pixels from the top and 10 picks from the left super simple stuff and now we need the width and the height and the width is the actually complicated part well it's not really complicated but that's the really interesting part but the height is incredibly easy so let's start with that one because all i want is this thing to be 25 pixels high that's all we needed so the one last thing is that we have to figure out our width and really all i want to have in here is our self dot current health although this would not work well it would work but it wouldn't work properly so let me actually run this thing and let's see if it works so this is working but we can go basically as far as we want well we can't go below zero but it can get as long or while it can get very very long outside of the screen which we don't want we want the maximum health to be 400 so what i want is to divide this thing by itself dot our health ratio so that when our maximum health for example is 1000 we would divide it by such number that we get to 400 in the end our maximum health so now let's try off this again and now i can't go further than this so and i also can't go less than zero so this seems pretty good but obviously there's something missing that i want to have a white bar around this or well you could have it i think it looks fine by itself already but let's have a white bar around it and for that i'm just going to create a new rectangle so pygame.draw.rect we need the same attributes except this time it's white so 255 255 and 255 and for the rectangle this time i want the same x and y coordinates but for the width i want self dot health bar length and the same height but now i'm going to add another attribute that's going for the width of this thing which i'm going to set to 4. and let's run this again there we go now we have a proper area around it and this looks like a pretty useful health bar and just to explain what happened here if you call pygame.direct and you add a line with attribute in the end then pygame is going to draw an empty rectangle just with the line width so this is what we have done here but with that we have our basic health bar so this is already a really useful basic health bar but obviously it doesn't look particularly good so let's create a more fancy one that looks better and for that we are going to need quite a bit more logic so let me explain what's going to happen in the most basic sense we are effectively going to create two rectangles for our health bar the first health bar is pretty much the basic health bar we have already seen so this is just the health but it accounts for how much health we have but then we are going to have a second health bar that shows us the difference between the current health and the health we want to get to and this one is going to be animated and how it animates is that we have two points of health we have our current health and we have our target health and that on every cycle of our game loop we're going to subtract or add a tiny amount to go from our current health to our target health and since the second health bar is on top of the first bar it's going to look like our entire health burst transitioning but this isn't actually what's happening but that's the basic logic let's actually implement all of this so here i'm back in my code and first of all i have to add a couple more attributes the first one and let me put them in the proper place a self.target health and let's set this one for now to 500 and then at the bottom i want self dot alph change speed and i'm going to set this to 5. so this one is going to be how fast our health changes and this is all we need in terms of attributes but in our get damage and get health we have to make some updates because now we don't want to change the current health we want to change our target health so let me copy target health and change all of this to target health so that when our player is hit or gets health we are changing the target health and our current health is going to catch up to the target health so we never actively change our current health we only ever change the target health but okay now we can close those again and for our basic health to keep this one working i would also have to change this to target health but i'm going to comment this out anyway because we're not going to use it anymore but just in case you want to use it make sure this is target health not current health okay let me minimize this as well and now i want to create another method that i called advanced health and in itself as usual and nothing else and now no update method let's call self dot advanced elf so in here we are going to need a couple of things so let me go through them step by step first of all i'm going to create two variables the first one is going to be transition with and this one is going to be zero and i want to have a transition transition color and this one is going to get an rgb tuple and by default i'm going to make it red and let me explain what this means you remember earlier when i said we are going to create two health bars this one transition color and transition with are going to be the width and the color of the second health bar the one that is supposed to be animated but by default our transition bar should be invisible and to make it invisible is to give it a width of 0 and a color of red so the same as our actual health bar so effectively what is happening is that our second health bar is always technically on the screen except that when there is no change to the health it's not visible but we do need variables nonetheless but now we come to the actually interesting bit we calculate the difference between our current health and our target health and this is going to be an if statement that if self dot current health current health is smaller than self. target health and we want to do something and what we want to do is self dot current health plus equals self dot elf change speed so really what happens is if our current health is smaller than the target health we want to add a certain amount to our current health in this case it's going to be five and this keeps on happening as long as the current health is smaller than the target health and while that is the case i want to influence our transition width so this one here by default it's zero but when there's a difference between current health and target health this has to be different from zero and this one should be an integer so i put all of this in there and really all i need is a difference between our target health and our current health so this one is just going to be self dot target health minus self dot current health and as always we have to divide it just like the basic health bar by our health ratio so i'm gonna put all of this again into brackets and divide it by self.health ratio so this entire line is giving us the width between our current health and our target health and makes it relative to the health bar and then for the final bit we have to change the color of the transition bar so right now it's red and in this case we are gaining health so i want to make this green so transition color is going to get an rgb tuple that is plain green so zero 255 and zero and this is all we needed for adding health now i can copy the entire thing and add the logic if we are losing health so if our current health is greater than our target health and if that is the case instead of adding our health speed we are subtracting it or health change speed and this line here actually remains exactly the same and this would still work for the simple reason that rectangles can have a negative width so in this case i'd say our target health is 500 and our current health is 800 and this thing would be negative 300. it would just go to the left instead of to the right and the last one we need is to change the color to yellow so this would be 255 for red 255 for green and we'll leave blue as zero so this rgb tuple would end up as yellow and with that part covered we are actually almost ready so really all we have to do now is to use all of this information and create two rectangles from it and the first rectangle is basically the same that we have created earlier so really similar to this line here except this time i don't want the line to become too long so i'm going to create the rectangle first by itself and then i'm using the rectangle to draw the actual health indicator so i'm going to create a health rect variable and this one is going to be pygame.rect and in here we again need an x and the y coordinate for the x i'm going to go with 10 and for the y i'm going to go with 45 so it's slightly below the original basic health indicator and then again we have the width and the height the height again is just going to be 25 because this one is super easy and for the width we have to do the same thing we've done earlier so it's going to be self dot current health divided by self dot alph ratio but now we are going to need another health bar and that's going to be the transition bar rectangle and here again i'm going to create a pie game.rect and now we need a couple of attributes so we need the x and the y coordinate then we need the width and the height so let's go through them step by step we know why this one is the easiest this one's going to be 45 exactly the same as our health bar and the same applies to the height this has to be 25 so the height and the y are super easy to do but now for the x we need to make a slight change that we don't want this bar to start at the beginning of the bar we want it to start wherever our health bar ends and this one we can do with alpha rect dot right so that this bar is always supposed to start with our actual health bar ends and this is going to be the right of the health bar and this one we can target super easily and finally we need our width and this is what we calculated here so this is always going to be this transition width so all i have to do in here is transition with and with that we have our two rectangles so now all that's left to do is to actually draw the two so i want pygame dot draw dots rect it's going to be screen then i want the color for the actual health bar it's going to be 255 0 and 0. so it's going to be red and then i have the health bar wrecked so this is our actual health bar then i have pygame.draw.rect it's going to be screen and this time we are drawing the transition rectangle so this one is this transition color so i just copy it and since we are sitting this at every stage it's going to have different colors and now for the actual rectangle this is going to be transition bar rectangle and now finally i want to create the same outline again that we created for the basic health so the white frame around it and for that i need pygame.draw.rect it's going to be screen it is going to be white so 255 255 and 255 and now i have to create a new rectangle that's going to be 10 pixels from the left 45 pixels from the top it is going to be self dot elf bar length and that is 25 pixels high and again we need a pixel frame of 4. so this line here is exactly the same as this line here except now it's a bit further down but all right let me run this and see if it's working so we don't get an error message and this already looks pretty good so now i can go up and down and even in the process looks pretty good and since i fixed our self.basic health this one should also work so let's try both of them together and yep looks pretty good arguably the health change is quite slow so you might want to speed this one up a tiny bit but i think by itself this one seems pretty good so hope that was helpful and i'll see you around