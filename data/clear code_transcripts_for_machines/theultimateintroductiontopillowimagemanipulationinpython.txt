hello there in this video we are going to cover image manipulation with pillow in python and what we are going to do is we are going to take this image and we are going to change it a lot in a lot of different ways and after you have done all of this you should have a really good understanding of the pillow module i am basically going to cover all of it or at the very least i am going to cover all the important bits and the pillow module ultimately is fairly simple it just does have a lot of methods that you could be using i guess we can cover that when we actually work in code which i guess we can do right after installing pillow because it doesn't come with python by default and this is going to happen either in the powershell or on the terminal in my case i'm using the powershell because i'm on windows and in here you need pip install hello if you run this you can see some download and you have it installed if you're using a mac you should be typing pip free install pillow and you should be getting the same result pillow works both on windows and on mac os and on linux it's pretty flexible overall and alright with that we have it installed let's start with the first part and what we are going to start with is the basics of pillow and in here there's one really important concept and that is the image object this is basically where all of the actual image information is stored and this is what we're using to change save and display it basically what we are going to do for this entire video we are always going to have some kind of image object and this is what we are actually working with and i suppose we can actually create this straight away alrighty here we have a completely empty python file and the first thing i want to do is from pil that's the pillow library i want to import image and make sure here the first letter needs to be capitalized that is really important and once you have that you actually want to create an image and this you can do in two different ways let me add comments to make this a bit more organized the first way to create an image object is to create new image by import and for that we just need image.open and then the name of a file in my case my folder setup right now looks like this i have two images called picture and python and then i have my code so all of the project is in one folder which makes it kind of easy to access things all i really need is the name which in this case is going to be picture and don't forget the file ending in this instance this is jpg and now this is going to return an image object and this we want to save in the variable let's call it image and now if you run the code we are not getting an error that is looking pretty good and this image object we can now work with and at least for this video what we are going to do a lot is to just show the picture and this happens with image dot show if i run the code now we can see a preview of the image you can also as an argument inside of show add a name for the image you want to display let's say in this case red panda although if i run this again now you can't really see any kind of difference the reason is that this needs to be supported by the image viewer on your computer which usually is not the case and it really doesn't make much of a difference so most of the time there's no argument inside of show and well with that we already have the ability to import an image although what you see fairly often online is let me call it an alternative way to import an image is something like with image dot open ideally spelled correctly and then the file path which again is going to be picture dot jpeg and then as image and then in here we can work with this image for example i could run image.show and this code here i guess let me put it below show picture this here and this here functionally does the same thing we are importing an image and we are showing it to the user i suppose this approach here is a little bit cleaner because we are more specific when we are using the image but most of the time you are going to see something like this as a consequence let me comment it out and let me put it right below creating the image i think that makes the most sense so with that we can create an image by importing it alternatively you can also create a new image from scratch and this you would do with image.new and in here we are going to need two arguments the first one is the format the second one is the size format is something like rgba or rgb or whatever kind of color format you are going to look for a pillow supports most of them if you are completely new to colors and images rgb stands for red green and blue for every pixel of the image we having an amount of red an amount of green and amount of blue and we are mixing these three colors to get a new color for each pixel and a in this case stands for transparency meaning the image we have could also have some transparent bits usually rgba here is the safest option and for size we are looking for a tuple with the width and the height let's say in this case i want a width of 1000 and a height of 600. and this image again we can save in a variable let's call it image blank because right now this is just going to be black because we didn't add anything to it and now at the end i can get my image blank and show it if i run the code we can see a black screen and well with that we have covered how to create a new image we can also show it another thing that we can do besides showing it is saving the picture and this happens let's say i want to save this image here for that i need image dot save and in here i now need a string with the new name let me call it test underscore save and now really important you want a dot and then the file format for example if you want a png image you want to add png if you wanted a jpg you would add jpeg and so on and now let me comment out the show part and run the code now nothing happens but we don't get an error but now if i look at my folder again this one here besides picture we also have test save now and this is a png file meaning we have actually just covered how to convert different images using pillow we have started with a jpeg file and we end it with a png file and this would also work with other image formats image.save is quite flexible to just save in whatever format you need you could even be more specific and specify a format here for example something like png although most of the time you are not going to need it and with that we have all of the basics i guess there's one more thing we can cover for this section and that is image information and for this part all i really want is to get some basic information about the image for example i could print image.size that is probably the one you are going to use the most and let me comment out the safe line and run the code now and we get the size of the image is 1920 by 1280 and image has a few more things that you can look at there is for example file name there is format and there is format underscore description that is horrible spelling and if i run this now we're getting quite a bit of information about the image we just imported and well with that we have covered all of the really basic parts of pillow at least to access an image obviously not particularly useful so let's start with some basic manipulation we are going to do some basic manipulation and what we are going to do is rotate flip prop and scale and we are also going to create a thumbnail which is just the smaller image you would use for previewing all right here i have another python file and i have already imported one image the same image of the red panda we have seen earlier and now i want to manipulate it in a couple of different ways i suppose we can start with rotating the image and all we need for that is the image itself and then dot rotate and in here we can specify an angle for example i could rotate the image by 60 degrees and the result is going to be another image and this image i want to save let's say in a variable called image rotate and with that we have rotated the image let me display it so image rotate dot show and if i run the code now we can see we have rotated the image by 60 degrees and in here i can add any other number for example 10 degrees would look like this and if i added something like 190 degrees it would look something like this i suppose i can leave it at 60 degrees this one looked pretty okay although we do have a problem that right now we are cutting off the image you can see it here for example or on the other side here as well and this isn't ideal we are losing picture information also right now the entire background is black and for all of that pillow has a couple more things that we can do and all of those happen inside of the arguments for rotate for example what you could be specifying in here is expand and if you set this one to true and run the code again now we are expanding the entire image to cover these parts that we cut off earlier obviously as a consequence you are going to have a larger image but you are not losing any image information which is quite nice and to figure out what else you can do you can look at the documentation let me actually add it right here documentation you can find this one under this link and if i open this one we are getting a pretty long list of different things that the image module can do right now rotate is the only one i care about and in here all we have seen so far is angle and expand you could also use fill color to fill the background you can add some translation you could change the center you can do a ton of different things in here i suppose fill color is the one that we are caring about the most right now so let's have a look at that one meaning what i want to do is to add fill color here and now we need some color information and the simplest way to approach this is using a tuple with r g and b values and what we are doing in here is we are specifying the amount of red the amount of green and the amount of blue for every individual pixel and for each of these we can choose a value between 0 and 255 meaning if i choose 255 0 and 0 i only have red i have no green and no blue if i run the code now the entire background is going to be red because we only have red if i added 255 for all of them i would get white although this also is kind of annoying to work with because ideally we want to use real words for colors we don't just want to work with individual numeric values and for that pillow is happy to help you because we can import image and color and this is giving us access to a lot of different colors out of the box for example i could use image color dot get color and now for this one i can specify a color for example red and then the format i want and this in my case is going to be rgb and if i run this now we are getting the same outcome be aware here this line of code is just returning an rgb tuple it's more or less a dictionary i guess i can demonstrate this a bit better if i copy it and just print what this image color is returning if i run the code now and close the preview we are just getting an rgb tuple that's literally it it's nothing too complicated so all right with that i think we are pretty good on rotating images next up we can i guess we can work on cropping an image and for that i want image dot crop and this again is going to return an image and this i want to save as image crop and now the one important information we have to specify in here is a tuple with four bits of information and the four bits of information refer to positions the first one is the left x position then we have the top y position and we have the right x position and finally we have the bottom y position and i guess let me explain this in a bit more detail if this is our original image pillow declares that this top left point is the origin meaning this has the position 0 and 0. and inside of this we want to specify some kind of rectangular shape to cut something out so this red area here is what i want to cut out and the size of this rectangle is determined by these four bits of information left x is this side here top y is this side here right x is going to be this side here and then finally bottom y is this side here and once we have specified all of these sides we have the entire size of the rectangle we want to cut out and let's do an example let's say i want to cut out the top left and the image i want to cut out should be 500 by 400 pixels and this means that the left x should be 0 and the top y should be 0. the right x then should be 500 and the bottom y should be 400 and if i bring this back on the image what we have created now let me undo a few things we are starting with 0 and 0 which is this point here and from that we are going 500 pixels to the right so the right side of the square we are cutting out is somewhere here and then the bottom part of the rectangle is 400 pixels which is somewhere here now that i have that i want to show my cropped image and if i run this we can see the top left of the image obviously not particularly helpful now to find the red panda in this image i already have a couple of numbers and those are looking like this and if i run the code now we can see the actual red panda so these are numbers you do have to play around with quite a bit to find just the right image you need but that is basically all you need for crop i suppose next up we can work on flipping the image or another way of putting this we can transpose the image and to get started i want my image flip horizontal and this i get with image dodge transpose in here i can pass in a ton of different arguments they're all part of the image module so make sure you capitalize this i here really important and inside of this we have transpose and inside of that we have all of our options for example in my case i want to flip the image from left to right and that way i am flipping this image here meaning now i can show that image run the code and we have flipped the image and along the same lines i can duplicate this line here and change this horizontal to vertical and to get the vertical flip we need top to bottom and now i can take this new image i can show it and there we go now the panda has to make sure it doesn't fall down and you do have quite a few more options these ones here i have used flip left right and flip top button you could also rotate the thing and it could transpose and transverse it transpose and transverse basically flip and rotate the image at the same time i honestly have no idea why you would ever want to use it but i guess let's do one example we can run image transpose and for this one we need image dot transpose and then again capital i image dot transpose and then inside of that i want transpose and this has to be all capitalized if i show this image we have the red panda rotated and flipped and again no idea why you would want this but you can do it all right and with that finally we can work on resizing the image this happens with image dot reset all that pillow wants in here is a tuple with the new width and a new height for example i could resize the image to 600 and let's say 1000 and then save all of this in image underscore resize and if i show this image now we are getting the panda very much squashed and i guess the way you have to think about it that this is a very easy way to change the size of an image but it also is very prone to errors that you are ruining the aspect ratio of an image so a better way let me add a comment that example and better example you would usually want to add something like a scale factor let's say in my case i want to double the size of the image and now we are going to use this two to calculate the new size of the image and let me save this in a separate variable as well so new image size and this is supposed to be a tuple with a width and a height and we can get the size of the original image this we get with image dot size and for the width i want the first part of it or the one with the index zero and this i want to multiply with the scale factor and we have the new width and then i can copy all of this and instead of the width i want to get the height and once we have that i can get my image resize and let me call it better and here again i want to get image.resize and now i want to pass in the new image size and that way we are keeping the same aspect ratio so if i print the image resize better we shouldn't really see a difference except now this image is twice as big as the original a good way to illustrate this let me comment this part out and i want to image resize better and save this as double resolution and this should be a jpeg if i run the code now we get no errors that's usually a good sign and if i look at my folder my original image had the dimensions of 1920 by 1280 and the new one has 3840 by 2560 which is exactly twice the size of the original meaning this is working really well and with that we can cover filters and enhancements this is quite a bit more material although it is very easy to access essentially all we are going to do pillow can change vibrance contrast brightness and sharpness using image enhance and we can use filters for a lot of other things like blurring contouring embossing sharpening and there are like 10 other filters that can do quite a few more things they are really easy to access and once you have that you are pretty much done it really is easy so let's have a look at this straighten code here we are in a nearly empty python file all we are doing is we are importing pillow and we are opening the image we have already seen i guess the one other thing i've included is a reference to the documentation of image enhance let me open it to have a look here's the documentation and it really isn't that big we are starting with importing image enhance and inside of that we have a couple of subparts we have color contrast brightness and sharpness and that is literally it and at the top it tells you we have to create some kind of enhancer object and that enhancer object then is being used to alter the original image so let's implement that and for that first of all i have to import image enhance and then here make sure the i and the e are capitalized and now first of all we have to create an enhancer and since we have different enhancers i want to start with a color enhancer and to create this enhancer we first of all need image enhance and then dot color and now we need a reference to the image so i enter image and that is basically it and this one basically takes care of the vibrance of the image how you would be using it let me put this under another header let's call it applying the enhancer all you have to do to apply the enhancer is first get the color enhancer and then add dot enhance and now in here you can add an integer to determine how strong this enhancer is let's start with a 2 just to have something basic and this is going to return a new image let's call it the enhanced image and this is also what i want to print after i spell this properly so enhanced image dot show and now if we run this we can see the same red panda except now he is significantly more red as a matter of fact all the colors are a lot more vibrant and this we can push quite a bit more for example if i added f5 in here and run this again now we can see it much more that the colors are really really strong and if you added a zero in here you would get black and white or i suppose the absence of a vibrance of color one is the default this one looks like the original if you wanted to you can also add floating point numbers like 0.5 to wash the image out a little bit and well if you understand this part it's basically all you need to know if we come to the next one we can do the same thing with contrast enhancer and the only difference for this one is instead of color we are using contrast and i guess let me update the comment to contrast and that is it now instead of the color enhancer i want the contrast enhancer and then here again let's start with two to get some basic start and now we can see we have a lot more contrast between the colors if i set this to something like five it's even stronger and if i set this to a zero we can see nothing because a plane ray background has no contrast and the two other options you have besides contrast and color brightness and we have sharpness and those you get with you might have guessed we have bright nes and we have sharpness and let's start with brightness enhancer and again two and now we have a brighter image and if i am going with sharpness enhancer we get a sharper image i guess this one is a bit hard to see let's go with five and there you hopefully can see it youtube might butcher the video quality a bit but it definitely is sharper let me add some ridiculously high number like 500 and now you should be able to see that this is having a lot of sharp edges and that we have all we need for image enhance it is a very simple part of pillow so next up we can start working on the filters and filters work in kind of the same way compared to image enhance we are basically taking an image and we are changing something for the entire picture like for example we could blur the entire image and once again at the top of the image we have a reference to the documentation part of this bit of pillow if i open this one and the website is looking like this and at the top you can find most of the filters a bit further down there are more i will cover most of them although not all i won't cover for example color 3d lut because i don't really know what it's doing it's fairly technical but the actual filters the stuff down here like box blur gaussian blur unsharp mask i will cover all of those so let's have a look and once again like an image enhance we have to import the specific part of pillow and this one is called image filter and once we have this we can apply some basic filters and applying these filters is super simple for example if i want to let's call it image blur i need the original image i have to apply a filter and now i need the specific filter i want and those specific filters i get from image filter and then dot the name of the filter in this case blur in all uppercase letters and with that i have my filtered image and since this filter returns a new image all i have to do is get my image blur and then show this one and i am getting a slightly blurred red ponder this blur filter cannot be changed so the blur amount is fixed although later on we're going to see another filter that can change the amount of blur and well if you understand it this far the same system applies to all of the other filters since i don't want to bore you let me just copy all of them in here they are looking like this we have filters for contour detail edge a few more edge thingies emboss sharp smooth and smooth more those are all of the basic filters that you can apply and i code those basic filters because there's no argument to determine how strong the filter is i suppose let me show a couple for example image edge is this one if i show it we have the edges much stronger in the image and this edge here is very similar compared to the sharpness enhancer there is a ton of overlap in terms of what you can do here think of pillow like photoshop there are always a ton of different ways to achieve the same outcome so it's totally fine if there's some redundancy in here i guess one that is going to be really obvious is the emboss filter because this one is looking like this and let's say image smooth more this one i think is a stronger blur although probably very hard to see on youtube but you get the idea these are all the basic filters you can apply now with that we have two more types of filters the first one is called rank filters and what those filters are doing they are sorting the pixels let me actually open the documentation and in here we have a medium filter a min filter and a max filter and i guess a rank filter and they are sorting all the pixel in the window in a given size probably doesn't mean too much to you it basically creates a weird kind of blur it's very hard to explain fortunately i don't have to explain it i can just show you let's create another image filtered minimum and the same syntax that applies we need image we need a filter we need image filter and now i want my min filter and this one is a method and it needs a size argument and let's start with size equal five and this one is a method because it needs an argument that is called size and let's start with five to see how it looks like and if i now show my image filled at minimum and run the code it looks like this basically what these filters do if i zoom in a tiny bit i think it's better to see let's look at the head basically pillow takes small clusters of colors and averages them out so the entire image looks a bit more bloppy or boxy it's really really hard to explain down here on the branch it's really good to see how this system works and the different filters we are using just use a different way to average these pixels and now besides the mint filter we can also create a median filter and we can create a max filter and those work by creating a median filter and a max filter and well with that we have the different ranked filters these are the kind of filters you would only ever use if there's a very specific use case for them if that doesn't apply to you just don't worry about them but some filters that you probably want to care about are called the multiband filters and in here let me create one image as an example and this would be the box blur and for this one we need image we need filter once more i want my image filter yet again and now the filter i want to apply is called box blur and just like the rank filters we have to give them some kind of argument to determine how strong the effect is for all of the multiband filters that argument is called radius and in here for example i could use a radius of 20. and once i have that let me display it and i guess let me comment out all of this so it doesn't take that long to process all of it and now if i run it you can see a lot of blurring for the red panda it's probably much too strong so let's set this to a 10 might be better still very strong let's go with four that's probably much better yeah you can definitely see a lot of blurring now but the panda is still very recognizable with that we have box blur and there are two more multiband filters we can use the first one is called gaussian blur so let me call it gauss blur and finally the last filter is called unsharp or well it's called an unsharpening mask and to apply the gaussian filter we need gaussian blur and for the unsharp mask we need unsharp mask and with that we have pretty much all of the filters so let me show gaussian blur this one is just another kind of blurring it works more or less like the box blur except the effect looks slightly different the image unsharp filter is looking like this it's basically the opposite of blurring where we're adding a ton of contrast to the image well that is it for this section let me uncomment all the other parts these are all of the filters you're probably going to use in pillow we are very nearly done there's just one more small topic i do want to cover and this one is really important to understand how pillow works in general you see when we are covering all of these filters you always have to be aware that we are getting an image returned all of these filtered things are images meaning we could combine them with another filter let's say this image emboss here even though it was created by a filter is just an image so we could apply another filter to it afterwards as a matter of fact all of these things change an image and this is what we always do in pillow we are always applying one change after another to the same image to get a different kind of effect and let's actually do an example here i want to combine filters i guess let's add a bit more space and i want to combine a blur and an emboss filter so we can see what's going on and let me move the show part below that for this first of all i want to create the emboss filter and i suppose i can just copy it from here i want to have my emboss filter and if i print this one again and let me comment out everything else so it doesn't take too long to load there we go if i now run this we are getting the embossed image but now what we can do i can let's call this one the image emboss blur now instead of just taking the image i would take the image embers and apply another filter to it and let's say i want to apply the gaussian blur let me copy it from here and let's say a radius i want for two and now this image ambush blur i can show and we have an emboss effect plus a blur effect and that is how you want to think about images in pillow you can just apply more and more things to it just be aware you need an image for that but well if it got that far this should be a really powerful way to change any kind of image so for the next part we can look much deeper into pillow and what we are going to look at is colors in pillow and well pillow can do a lot with colors it can access and change colors of any image and it can also change the format of the image itself so we get different kinds of colors the problem is to understand how all of this works we need some theory and probably some photoshop as well so let's get started in the most basic sense any image consists of pixels for example the image we have seen so far has 1920 by 1280 pixels and what that means in practice just to visualize it if this here is our image and inside of this image we have a huge amount of very very small dots and those are creating our image on the width we have 19 20 of them and in terms of height we have 12 80. these two numbers here so in total we have about 2.5 million pixels and every single pixel has a specific color and these colors can be expressed in a lot of different ways the one you might have seen so far is we are using a combination of red green and blue that's the one i've actually used earlier and these values usually go between 0 and 255 meaning for red we could have a value of 255 or green we could have a value of zero and for blue we could have zero as well the result would be we have a plain red color and this is the most common way to express colors but there are quite a few more cyan magenta and yellow are very commonly used for printing businesses where you actually want to print colors another way would be hue saturation and the lightness value and all three of these approaches can get you a lot of different colors but there are also ways to create color in an easier way for example what we could do for each pixel just assign the value between 0 and 255 and 0 in this example is black and 255 is pure white and anything in between is some shade of gray and we could make this even easier by just switching between 0 and 1 with 0 being black and 1 being white obviously both of these examples wouldn't get you very highres images but it is a valid way to express colors all i want you guys to take away from this is that there are different ways to express colors so let's have a look at all of this in photoshop alright here you can see the video i have used for this video so far and if i zoom in to let's say some part of the fur you can see every individual pixel and for each of those i can pick the specific color let's say for this bit here and if i open this color you can see the hsb values and you can see the rgb values hsb is for hue saturation and brightness i called this lightness value earlier but same thing and rgb stats for red green and blue and those are two different ways to express color the other way i have talked about just now as well is cmyk i guess you could also use a hexadecimal color there are lots of different ways of doing this the main thing you have to understand is that colors can be expressed in lots of different ways and this can influence what you need for a specific image and what we can do in photoshop if we go all the way to the top we can go to mode and in here right now we have rgb color with 8 bits what i could do here instead is change all of this to grayscale if i do it photoshop is going to complain that this is going to convert my image to black and white because i am changing my image from having three different colors for every pixel red green and blue to only having one color which is going to get rid of any kind of color and just leaves me with black and white and if i discard this and zoom out now all of this is black and white and if i click on any individual pixel now the only value we have left is for hsb we have brightness and that is the most common way to convert an image with rgb values to grayscale we are basically getting rid of all of the hue and saturation and we are just left with brightness another way to think about is in terms of rgb we are just averaging out all of the values so we have the same mode of red green and blue and that way we have some shade of gray and pillow is doing the very same thing so with that i think we have some good bases to understand how pillow is going to work with colors although before we are jumping into code there is one more thing i do want to address and that is that i am going to use numpy to illustrate how pillow works if you're a beginner you might not know what numpy is in the most basic sense it's a way to work with numbers in python it's a really popular module for this video i don't expect you to know it and you don't have to follow along i will just very rarely use it to illustrate some basic things however if you want to follow step by step you do have to install numpy and this happens i will pip install numpy or pip3 install numpy and with that we can actually jump into the code and let's have a look at all of this here we have a very basic setup once again and the first thing i want to work on is let me comment it in i want to analyze picture information and this you can do in quite a few different ways i suppose the easiest way to approach this is you get the image and then you get the method get pixel and in here you have to specify an x and a y coordinate and this is then the pixel you are going to look at for example if we look at the pixel 0 and 0 and then print the result we are getting the rgb value 100 105 and 5. and those are the values for red green and blue respectively we are combining these three colors to get another color i guess here we are back in photoshop and the pixel i have been looking at right now is the pixel all the way in the top left let me zoom in all the way we are looking at let me show my mouse we are looking at this pixel all the way in the top left here some shade of green and if i open this one we get 100 105 and 5. those are the values we just looked at and i guess while we added i should mention i think i talked about this earlier but just to be sure if this here is our image the origin point is in the top left this point here is 0 and zero the point we have just looked at b sites get pixel we can also run image dot get colors and this one by itself right now is not going to work if i print all of this and comment out get pixel i would get none and the problem here is this get colors is going to get all of the colors we are using in our image the problem is if there are too many colors in the image this one is going to return none i have actually added a comment for that in my notes that might be helpful the max color argument is what we can specify in here and by default this one is 256 and if the image has more colors than that get colors is going to return none meaning inside of this we have to define a new max color and for that we have to figure out how many colors we could possibly have at the maximum and the maximum amount of colors we could theoretically have is the number of pixels so if you want to make sure that this get colors always works you want to get the number of pixels and this is a number you can get quite easily all you have to do is get image size n0 and multiply it with image.size with 1 meaning we are multiplying the width by the height of the image and that way we are going to get all of the pixels and now if i run this we are getting an error because this is max colors let me fix it here and now if i run this there we go now we can see all of the colors that are being used inside of the image a huge list because the image is quite large remember we have 2.5 million pixels and what you have to understand about this list is that the first item is the amount of times we have this color and then the color itself meaning we have this color here one time and with that we have a way to find all of the colors used in the image now there are a few more ways to get more information about the image i guess these two here let me actually add proper comments is colors only but besides that maybe something i should have started with is getting picture information and in here i can for example print my image.mode and if i run this i get rgb the current picture format later in this section you are going to learn how to change this one as well now besides that you can also use get bands and this one is a method if i run this i get rgb basically the same information as i get before if you want to go overkill there is also an attribute that is called info that you should spell correctly and if you run this you are getting quite a bit more information i guess this party at the top is the really important bit if you know what you're doing with images this can be quite useful in our case though this really doesn't do all that much so let me comment this one out as a matter of fact get bans we also don't need but just for mode we get rgb and this one is kind of important to understand what is going on in our image because what you have to understand about this rgb is that we have three different layers we have one layer for red one layer for green and one layer for blue and you can access each of these channels let me actually add this in a separate part we have channels here and what you could be doing you can get image and get channel and in here you can access different channels you could either use letters like r for the red channel or you could use indexing like zero this would also be the red channel and one would be green and two would be blue but let's stick with r this is the easiest one to read and this is going to return another image so let me save this as another variable and now if i use red channel and show what we are getting we can see our red panda again except now we have some kind of black and white image and to understand this black and white image i am going to use numpy and this is all going to make sense in just a second but what i want to do i want to from numpy import array that is all i'm going to do and an array is basically a really fancy kind of list and what this array can do in pillow is convert this image here to a list of numbers and this list of numbers contains all of the pixels with their color information and let me comment out the show part here and printing this image as well and i guess i can add a numpy section here to use the array all we need is array and then we can insert the image itself if i run this now i get a very long list of numbers oh well not that long because numpy shortens it you can see it with the dots here but inside of this we can see the different pixels here again is our very first pixel the one with the color 100 105 and 5. this is the top left pixel the pixel to the right of that is going to be this one then we have this one and then we have about 2.5 million more pixels and this is how your computer sees an image and what you can also do with numpy is to get the shape of a certain kind of number set meaning if i run this now we get the height of the picture the width of the picture and then the depth of the picture i guess you could call it and this one here is three because we have three different layers for our image we have one layer for red one layer for green and one layer for blue and what we have done down here when we get the red channel we get the red layer by itself and this you can also illustrate let me copy this get channel and copy the array here and now instead of the original image i want to turn the red channel into a numpy array so we can see the individual numbers and now if i run this we can see another list of numbers and this might not tell you too much but the way it might make more sense is if i print both and not the shape the actual list itself meaning this here is our red channel and this here is the entire original image and the one thing you have to understand now is that this here on the left is the red channel we have 99 103 and so on and if i return to the red channel we have 100 99 103 these are all of our red colors in a slightly different format but don't worry about that numpy can be a tiny bit confusing about that all we have done with this get channel is we have just picked up the red colors and turned those into a grayscale image and the higher this number gets the closer we are getting to white and the lower this number gets the closer we are getting to black if i show this red channel image again the whiter a part is like this bit here or these parts down here the more red they had in the original image and the darker something is let's say like this part here or this bit here the less red they had in the original we are working with a long list of numbers for the image these numbers are organized in rgb tuples so we have red green and blue for the red channel we only have one number between 0 and 255 and these numbers are then translated by our computer into an actual image that we can work with and well i think that was very boring but really important to understand how pillow works because once we have all of that let me comment out these parts we don't need them anymore we can come to the actually more interesting part and i guess i can copy it for my notes we have color conversions and here we can convert our image in lots of different ways and to understand how these conversions work we needed this bit of theory here so i hope that made sense the first kind of conversion we can do is turning our image into one bit grayscale image and to convert an image you need image dot convert and now in here you can add a certain kind of mode and there are lots of different ones you can have the one for one bit is done with the string one and this is going to return another image let me save this in the variable image ray scale one bit and now if i show this image grayscale one bit with the show method you can see we have something that looks pretty bad and what you have to understand about this image is that we only have two different colors we have black and we have white there's no other color it might look like it if you look at it from this angle but that's just your lizard brain playing tricks on you i can actually illustrate that we literally only have two colors using numpy again if i print an array with this image grayscale one bit and let me not show the image so things staying a bit cleaner now we get something weird we only have thoughts and true the reason for that is that numpy got a bit confused because this image here only contains zeros and ones and those numpy automatically converts to true and false so to booleans to overcome that we can change the data type to an integer and now if i run this you can see the actual number of this image and what you can see in here is we only have zeros and ones wherever we have zero we have a black pixel wherever we have a one we have a white pixel basically what happens with this kind of conversion if a pixel is bright enough the pixel becomes white if the pixel is not bright enough it becomes dark and one bit literally means we only have a zero or one this is the simplest forms of image storage another way to look at it is to look at the channels let me print this one i want to get my image grayscale one bit and i want to look at get bands and if i run this we are getting the channels down here we only have one channels we don't have the rgb channels anymore we only have the one channel and this channel only contains numbers between zero and one and with that we have grayscale conversion so this is one way to work with color besides that we also have eight bit grayscale and this is a better kind of grayscale essentially and this is also the image you have seen in photoshop let me add another variable and i'm going to call this one grayscale l the reason why i'm calling it grayscale l is because we need image convert and now the mode i'm looking for is called l actually capital l and now if i show the image with show we are getting a much nicer looking grayscale image if i zoom in you can very clearly see we have lots of different shades of grey to be a bit more specific let's show the numpy array again i want to look at the array of my grayscale l image and let me comment out this part and here you can see all of the numbers we have for every single pixel and again keep in mind every single pixel is a number between 0 and 255 and the higher this number gets the brighter the pixel is although that being said if i print my grayscale and then get the bands we again only have one channel and that is the channel l meaning this is all the information we get there's only one layer cool and this is 8bit grayscale still a fairly simple way to approach colors next up on the hierarchy is what is called a palette and this one is going to get a fair bit more powerful i guess let me create another variable that i call palette and to convert an image to a palette we need convert once more and the mode now is called p and if i show this palette with show we can see well if you look on youtube this probably looks more or less the same but if i zoom in a bit you i hope can see what's going on we only have a very limited amount of colors specifically we have 256 colors kind of like the 8bit grayscale except now they're not black and white they have a different kind of color set or rather a specific kind of palette that we are using to make all of this look actually kind of good if you look at it from far enough away this was actually used by computers about 20 years ago to save hardware space because it doesn't look like a boring grayscale image but it's still fairly efficient to save now this palette can get quite confusing so let's talk about how it works when you are converting an image to a palette you have 256 colors in total let me add colors only and you can again print an array of this palette and let's do this again and not show the image and we are getting a bunch of different colors however what you have to be aware of these numbers here do not refer to a color all of these numbers are just references to the actual color and this is really important let me add a comment here not colors they are references to a color in a palette this is why all of this is called a palette and that palette we can get with the palette image again and then get palette and if i run this we are getting a typo because i am really bad at typing if you spell this correctly and run the code you are getting a very long list of numbers and this long list of numbers is probably really confusing so what does that mean and to understand what this number means let me rearrange it a bit using numpy again i want to print an array and the array or the numbers for the array are this one here and now this array i want to reshape we have 256 colors and each color is represented by a tuple of three individual colors and if i run this now you can see each individual color and this is an rgb tuple let me scroll up a tiny bit more to get to the first actual entry in here there we go when we are starting this list here we have just a bunch of zeros but at some point we have 51 0 and 0 and this is a very muted red if we go up to the original list so the list we got from this line here we again start with all of the zeros but at some point we get 51 0 and 0 meaning all i have done down here is i have rearranged this long list into something that is a bit more readable all you really have to understand about this list is that we are moving in triplets these three items are the first color these three are the second color these three are the third color and so on and the list we are getting up here from the palette itself is a reference to this list for example this 24 here points to the 24 item inside of this list don't know maybe it is 0 51 and 204 that looks about like index 24. i should make this arrow a bit better i hope you get the idea just to summarize this what you have to understand for palette is that each pixel holds a reference to a palette of colors and this palette of colors is just a long list of rgb tuples and then the index for each pixel points to something like this and this is the color we are getting it honestly is kind of annoying especially since pillow is a bit weird about displaying the numbers which is why numpy is really useful in here and if you don't understand how palettes work this kind of system is probably unbelievably confusing what we can also do with palettes let me remove this line here and go on the next line we can change the amount of colors we have for example if i want a palette with only 16 colors i would again use image and convert i would use the p mode and now i need two more arguments the first one is called palette as well and here we need image dot palette and then dot adaptive this one is going to allow us to specify how many colors we want and once you have that one you can specify an amount of colors in this case 16 and let me again comment out the earlier part and i want to get my palette 16 and show all of this and we are getting a image that looks much older so now we only have 16 colors in total in this entire thing what you can also do let me add another section here you can update the color palette i am very bad at spelling palette and just to keep things simple let's say for this palette 16 i want to update the palette to change the colors for that i first of all have to create a new palette all we have to do is get my original palette 16 palette and this i get with get pal let the same thing we have used up here and this is going to return a really long list of numbers i guess let me print what we are getting from this so far new palette is going to be a really long list of numbers and these numbers again in triplets here are the actual color of this image and if i change these numbers in here i can change what the colors look in the image and this i can do with list comprehension let's say x for x in this list and now when i get this new value i want to divide it by two i suppose we should use floor divide so we keep on using integers and now this new palette i can set as the palette for my palette 16 and this you do with put pellet and i want to insert my new pallet and if i now show my pallet 16 again the entire thing is significantly darker we have the brightness of every single pixel and with that we have covered all of the really basic color operations now these are different ways to create simple images and to play around with the format of pillow or of the images inside of pillow now you can convert images in a lot more ways here is the website and here are all of the modes you can work with the one you are going to work with the most is rgb or rgba and the ones you have just seen are 1 l and p and you can also work with a lot more numbers and down here you have even more options for all of these you are just working with very long lists of numbers and these lists either contain tuples with for example rgb values or you just have individual numbers that represent a color in the gray scale like these two here if you understand that part it should help you quite a bit to understand pillow itself cool now one more thing that we can do in here is to change individual pixels let me add another section change individual pixels and this one really isn't going to get too long all you need is image dot put pixel and now in here you need two bits of information you need a position and you need a color for the position let's say at position 100 and 200 i want to put a red pixel and this red pixel i get with an rgb tuple with 255 0 and 0. once i have that i can show my image run all of this and now somewhere in the top left i hope i can find it ah there we go here we have a red pixel the one we have just created and be aware here the color you need for this pixel depends on what color format you have this image is in rgb if we had grayscale if we had a grayscale image this would have to be an integer like 255 for white and once we have that what we can also do is change large numbers of pixels and all we need for that is for x in range image dot size of zero so we are cycling through the horizontal image and then for y in range image and size and one and this cycles through the vertical part of the image and what i can do for example in here is if image and get pixel of the current position so x and y and this is going to return a tuple with r g and b and in my case i could grab the r part so the one with the index zero and check if this one is above a certain threshold i don't know 200 as an example and if that is the case we can use image put pixel and place another pixel in this x and y position let's say for this one i want to place a black pixel if i run this what is going to happen pillow is going to calculate for a bit you can see in the entire image wherever our red color exceeded a certain threshold we are placing a black color all of these parts here and this would be one way to replace all of the colors in one go although you do have to be aware that this operation here is very slow in pillow if you wanted to do this more regularly you would want to use numpy arrays the stuff we have used or imported up here those are really powerful but this is something you can do this probably was a really boring section so sorry about that but if you got so far you should have a really good understanding about the numpy library and how it works under the hood this is really useful to understand later on what's going on alright with that we have finished another section and for the next bit we are going to look at image ops and this is just another subpart of the pillow library and image ops works somewhat like a filter we can for example change the contrast although image ops does a few bit more things as well like mirroring or flipping an image and it can add borders as well for example there are also some options in image ops that a filter cannot do but in terms of how to use it it works like a filter so let's have a look at all of this once again we have a nearly empty python file and in here besides image i want to import image ops or image ops i'm never sure which one is the right way to pronounce it and with this image ops you can do quite a few different things let me start with color changes and in here for example we could let me start with image contrast we can give an image a different kind of contrast and to apply this we need image ops and then we need auto contrast and in here we have two arguments we need so let me use named arguments we first of all need the image itself in my case this is the image we have and then we need a cutoff point i guess i can demonstrate what this does in practice for now let me set it to 20. and once we have that we have a new image and this we can just show and we can see something like this now the image has a ton of weirdlooking contrast basically what this autocontrast does it works kind of similar compared to the contrast in the enhanced part except this one is a bit smarter in terms of what kind of contrast it applies most of the time you would use a much lower value than 20 maybe something like 5 and now this image has a lot more contrast but the contrast looks a bit more natural and now like with the filters we have a ton of different options that we could be using i guess one more that we could cover is image inverted and this one you get with image ops and invert and then here we just need the image itself i can show this as well and now we have the image inverted and i think i bought you enough in the last section so let me just copy in the other options we have we have solarize posterize grayscale and equalize and in here posterize and solarize have a few more parameters that you could be using like threshold and bits and those determine how strong the effect is for example for image posterize if i show this we are basically reducing the amount of colors we have if this is set to 2 we have well two bits of colors if this is four we have a lot more colors so the image looks more natural if you set this to one you have basically only a very low amount of numbers now besides those there's one more and this is called let me call the variable colorize and this one we get with image ops dot color rice and in here we need an image once more i want to reuse my image and what we have to do in here besides the image itself is set a black and a white named argument and how this colorize works it wants basically a black and white picture and then it changes what is considered white and what is considered black so for example the black color you could assign to a green color and the white color you could assign to a red color the problem is right now this is not going to work i guess i could print the colorized image but we are going to get an error message and the error message is we have assert image mode has to be l and if you look at the last section image mode l is this one here the 8bit grayscale what pillow is expecting is an image that consists of just numbers between 0 and 255 and to get there all we have to do is apply convert to the image and then put it in image mode l and now if i run this you can see a very strange looking image let me keep the black color as black and run this again now and i think now it's a bit easier to see what this one does is it changes how pillow is processing the image we don't have a grayscale anymore instead we go from black to red or if we are changing this from black here let's say to blue then our gradient for these colors is between blue and red and this is why i had this really boring section about how pillow works if you don't understand that part this bit here is going to be very confusing alright these are all of the parts you need to change colors let me comment them out because now we can do some other things we can this section are called dimension changes although it's not the most accurate name basically what you are doing in here you can either mirror an image and this happens with image ops again and you use mirror then you pass in the image you want to change and you are done so image mirror and now we have mirrored the image the same thing works by using flip so let me change the naming here and flip is flipping the image in the vertical axis so image flip and there we go now the panda is upside down again what you can also do is scale the image by a certain factor in this one you do with image ops and scale and in here we want an image again let me use a named argument and now to scale the image we need a factor and this factor changes the scaling both on x and y so the aspect ratio always remains the same i could for example pass a 2 in here and then show my image scale although you are not going to see much of a difference i suppose a better way to visualize this would be to pass in a 0.4 in here and now we have a much smaller image but with the same aspect ratio meaning if you want to scale an image this image scale here is much easier to use than the one i have used earlier in section 2 this one here and once again pillow has a ton of methods that achieve basically the same outcome there is one more and that is called image contain and this one we get with image ops dot contain and in here we have to specify once more the image now how this size is going to work can be a tiny bit confusing but in the most basic sense pillow expects here a width and a height argument and basically what is going to happen is that contain is going to change the size of the image but the aspect ratio of the image will always stay the same and the numbers you pass in here are not going to be the numbers you actually get as image dimensions i guess let me do an example if i add 500 and 200 pillow is going to resize the original image to try to fit inside of these dimensions however the aspect ratio is not going to allow that to fit these two numbers perfectly pillow would have to stretch the image which it is not going to do so it is going to pick the smaller of these two numbers and then change the other number to keep the aspect ratio if i show the image contained now we now have a much smaller image and if i showed the image information we now have on the left side 300x200 the 200 is what we specified that's the height of the image and when pillow scaled the image it realized it can reach a maximum height of 200 but to keep the aspect ratio it couldn't change the width to 500 so it kept the width to 300 contain is what you would use if you want a specific pixel size and all right with that we have dimension changes there's one more part we can look at and that is adding and removing things and in here for example we could add image with a border and this one you get with image ops dot expand and then here at the minimum we need two named arguments oh well two arguments but i'm going to use named arguments we need the image and then we need a border and for the border we just need one number the border size in my case 100 pixels and now if i show my image border we have a black border around the image and if you want to you can add a few more arguments in here and by default the color is black to change it you would need a fill argument and for example in here i could set an rgb tuple again let's say 255 255 and zero and now if i run this we should be getting yellow borders and there we go and there are three more things you can do you can add an image padded and this one works with image ops dot pad in here we need an image again and now we need a size and for the size let me use specific numbers here that is going to illustrate what this does a bit better let's say 1500 and 1 600. these numbers need to be bigger than the original image and now if i show my image padded you can see on the left and the right side some black bars but you cannot see bars on the top or the bottom the reason is that this padded only works on one side just like contain pillow tries to keep the aspect ratio so once we hit one of these sides pillow stops scaling the image or stops adding a padding there is also image fit and this one we get with image ops one more time and in here we want fit and once again we need image is equal to image and now for this one we need a size and let me add in 300 by 300 and let's see what happens so image fit if i run this we have cropped out the inner part of the image the way you have to think about it is that this was just about the entire size of the image and starting from the inside we have created an image with the height of 300 and a width of 300 as well i guess using the same number for width and height wasn't ideal here so let me change the width to something like 500 run this again and now you can see this a little bit better we are cropping the image from the center that's all that's happening here and actually the final part i can just copy because now we have a different way to crop the image and we don't need the size instead we have a border and for the border you have to specify one number let me define 100 and this crop here works by cutting away from the border if i show the result we are getting an error the reason is that i forgot to change this fit to crop and now if i run this we are basically cropping this image from the border so we are moving this way i suppose the best way to visualize this is if i change this to a 400 and now we are really close to the red panda and well with that let me uncomment all of those we have covered all of the basic parts of image ops so with this filters and enhance you can basically change the image to whatever you want and if you understand colors you have a good idea of what's going on these sections work really well together although there's one more thing that i haven't mentioned and that is the deformer although the deformer is getting a bit more complicated so i'm going to put all of this in a separate file and here we are we once more have a very minimalist setup and what i want to do is i want to run image ops dot deform and i want to deform the image i just import it now what does deform do and well this is probably one of the more complicated parts of pillow let me draw it right here to get the sense of what we are doing we are starting with an original image that could be the image we have imported right now and besides that we are going to create another image and what deform is doing or what it wants to do in the most basic sense it wants to cut out individual parts of the original image let's say we could cut out a part that looks something like this right now a pure rectangle but this could be any kind of shape and then this cutout we can put somewhere on the new shape we could put it in the same position although that would be kind of pointless we could also stretch it to something like this what we could also do in the original image we don't necessarily have to have a rectangle for example we could have a completely random shape that looks something like this the only limitation is it has to have four corners and if we put this on the new image it always has to be some kind of rectangle but if we put it somewhere here pillow is going to adjust the image it would for example in this case i think stretch out the corners to something like this and that way we can create a whole range of different effects for example what we could be doing let me clean this one up a bit we could select different parts of this image that are offset by a sine curve something like this and if these are then translated to the new image the image is going to be wobbled although i am not going to do that because that takes quite a while to implement and i want to keep things straight forward for this one for this d form it expects a second argument and this has to be a class or well it has to be an object but we are getting that from a class and in my case i want a deformer and make sure to add brackets here so we're turning a class into an object and now let's create the class for this object and this is deformer and in here we only need a single method and this one is called get mesh and it needs self as always but it also needs an image and now in here we have to cover a couple of important things number one we have to define a shape in the original image number two we have to define a rectangle in the new image and finally we have to return all the shapes and in here pay attention to the specific words we are defining a shape in the original image but we are defining a rectangle in the new image and that is intentional wording here in the new image we are always defining a rectangle but in the original we can define any kind of shape it just has to have four points i suppose let's get started on this that should explain all of this the best and i want to create variables here let's start with the source shape and for this we need a tuple with eight different points and for the target rectangle i want a target rectangle and since you can express a rectangle easier this one is also triple but it only needs four points i guess let's start with this one this one is easier to explain for this target rectangle the four points we are specifying are left top right and bottom let me cut it out and add the same thing as a comment and for example i could write in here 0 0 100 and 200 and this would mean our rectangle starts on the left side and at the top so the left at the top is zero and zero then we have zero for the right side and the bottom would be 200 if this was the entire new shape we would start here and here then the right side would have something like 100 points here and then the bottom would be somewhere down here to cover the 200 points something like this for the source shape this gets a good bit more complicated because in here we don't specify a side we are specifying a specific pixel position let me actually draw it this one can get incredibly confusing this here is our original image this picture here right now and in the tuple here i could for example specify zero and zero and this would put us all the way at the point here and what pillar wants is eight values in total here with these two points being the first tuple then we want tuple number one then tuple number two tuple number three as well and the one tuple we have specified so far is zero and zero and for tuple 1 and 1 we need another kind of position for example in here i could specify 200 for the x position and 0 for the y position if i do that i get my second point and this would bring me somewhere here to position 200 and 0. and after that i would have to specify four more numbers for two more tuples it honestly is kind of annoying to explain now what i have done to just get started i got the width and the height of the original image and this we get with image dot size and for this tuple here let's do an actual example that should be much better i still want to start at position 0 and 0. this is going to be our first point let me underline it so we're not getting lost for the second point i want to stick on the left side but now i want to go all the way to the bottom so the height of the image i suppose we can draw all of this that should be even better the point we started on was this one here and the point we just created 0 and h is the point all the way down here we are still at position 0 or the x part but now for y we are at height or the height of the image next up i want the width and the height and these two numbers get us all the way to the bottom in here we have w and h and finally i want to go all the way to the top left and this one we get with w and zero which is this point up here w for x and zero for y i guess let me add zero and zero for top left as well and with that we have eight points and these eight points right now specify our entire original image and this entire image these eight points here we want to put on a new image with these dimensions here and for that we need the final bit and that is to return all of the shapes and what pillow wants here is it wants all of this returned inside of a list and then inside of another tuple and we have to start with the target rectangle and then with the source shape and that is all we need and this is going to return a new image as well which i can store in a variable and now if i show the form we get the entire image squashed to the top left now this obviously isn't particularly useful but these points here you could also influence for example if i just wanted to copy this image i could add w and h in here and now this image would be copied one to one but for example i could have the size of the width and now the image will be squashed on the left side and what is even better right now both the source shape and the target rectangle are rectangles so we're just scaling the image but if this one here wasn't a rectangle let's say for this is the first point the second point for the bottom right point this one here if the width wasn't on the right side let me actually draw this if i were to put this width somewhere let's say here then the shape we are getting from all of this would look something like i am kind of running out of colors this is a problem let me use blue the shape i would be getting now would look something like this we are not having a rectangle anymore but what pillow gets as a target is this rectangle here so pillow is then going to account for that and stretch out all of these pixels to turn this into a rectangle again let me demonstrate this we can get the width of the image minus 1000 and let's fill out the entire target shape so it's easier to see if i run this now you can see the bottom right pixel all of this stuff here is massively stretched to this side and this happens because pillow tries to account for this irregular shape here and this is something you definitely want to go over a couple of times it took me like an hour to understand it it's really hard to work with when you're just getting started but if you understand it it is incredibly powerful let's actually do a more complicated example because what you can do in here is define more than one shape or more than one target and source area and in here i want to define a left side and for this i need a target and i need a source shape i guess let me be a bit more specific i need a target rectangle and a source shape for the target rectangle i want a tuple with zero zero width divided by two and the height by itself this is just going to get us half of the target image and for the source shape let me copy this in actually i have something like this and this is going to be really hard to read i should draw this the eight points we are getting from this r we are starting in the top left here and here again after that we are going all the way to the bottom to here next up we are going to half of the width and we are staying at the bottom so we are just about here and finally we are going to the middle of the top so we are here the result is going to be half of the image and this half of the image we are putting on the left side of the target image right now we are just copying the left side of the image obviously not particularly useful but now i can also add a right side and for this right side i again need a tuple with the target and the source for the target i now want to target the right side of the target image and this is going to be width divided by 2 for the starting point and we want 0 for the height and for the end we want w and h if i am drawing this one with divided by two and zero is getting us to this point here and then width and height basically bring us to the right side of the image and to the bottom of the image we are literally just on the right side of the image now and now we come to the actually interesting bit because for this one the coordinates are this point here and to understand what is happening let me actually show the outcome and for that we just have to return the different positions we get so we have the first transfer or deform and then the second one and if i run this now we can see something like this and what happened here is we copied the left side of the image one to one this goes up to just about here but for the right side we have copied the left side of the image copied it over and then reversed the direction and this is where deform becomes incredibly powerful you can do a lot of really funny things with it but let's talk about how this works and for that we have to go through these positional points and i hope you can still follow along i know this is getting really complicated here once again we have the original image and the points we are selecting we are starting with width divided by two and zero meaning we are starting here ish and next up we are going to width divided by two and height so we are moving all the way down here and we are ending on this point the next point is zero and height so we are moving here and finally we are going to zero and zero so the point up here and then we are closing the shape by going back to the original point and the reason why this flipped the image is because the direction of these points really mattered where the magic happened was in this arrow down here where we are moving from the right side to the left side and this is what's reversing the image probably go over this a couple of times eventually it will start make sense another example i did by myself is to flip the entire thing and this one you can add in here for the right side and this one is flipping the red panda on the halfway point and again i am primarily using rectangles but you don't have to you could add any kind of shape you want in here for example for this final width i could subtract 1000 pixels and now we are stretching out the entire image and if you understand how this works you can create some really advanced shapes like a fisheye lens or you could account for a fisheye lens you could wiggle the image you could do basically whatever you want it's really powerful and i'm going to leave it at that i don't want to make things even more complicated although if you want to learn more about it there is a really good example i found online and this one creates this kind of shape although to create it you need some slightly more advanced code that relies a bit more on math i suppose it's not that complicated you could definitely figure it out if you were able to follow along so far i'm going to add a link in the description or i guess i could just add it at the end here more advanced example there we go with that we have covered the most difficult part of this entire tutorial next up let's do something easier and for the next part we are drawing some shapes this one should be fairly straightforward and pillow can draw lots of different shapes like rectangles squares circles basically anything you want and we can also draw text i know that drawing here isn't the perfect word but they are in the same submodule of pillow so i'm going to put them together all right here we are in a new python file and besides image i want to import image draw and now before we can start drawing we have to create a draw object and this you do with image draw dot draw and then the image you want to draw on which in my case is the image itself and this one is creates a draw object once you have that drawing becomes really easy let's start with drawing some basic shapes i could for example draw a rectangle and in here pillow expects a tuple with four different arguments we need the left the top the right and the bottom all in pixels for example i could add the left 0 and the top 0 the right 100 and the bottom 200 and once i have all of that i can image dot show and we can see in the top left we have the outline of a rectangle let me zoom in a bit the left side of the rectangle is at position 0. the top is at position 0. the right side is at position 100 and the bottom is at 200 and once you figured out that part the rest should be fairly simple for example you could put a rectangle at the position 200 400 then 700 and 600 and now we have a shape that is a bit more in the middle of the image if you don't like the colors you can also change that very easily for a fill color you need fill and in here you have to specify either a word like red or a tuple with rgb colors like 255 0 and 0. if i run this now we have a proper red rectangle you can also specify an outline this one has the same kind of color requirement i guess i can start with a word here yellow is totally fine and now we have yellow outlines you can also change the width of the outline to something like 5 and now we have a thicker outline and that covers the rectangle and let me copy it actually because very similar to the rectangle is the ellipse because this one also needs a rectangle as an outline what pillow is doing internally when we are defining a rectangle like this one here it puts an ellipse inside of it something like this that is a horrible ellipse let me try this again okay a little bit better we are putting the ellipse inside of the box that surrounds it and let me give it some different colors i guess for this one 255 and for the outline we can go with purple i think is supported there we go now you can see they are in the same position but the ellipse is inside of the rectangle besides these two you can also draw a polygon and for this one we just have to specify a couple of individual points and those are just tuples inside of one larger tuple we have tuple one here tuple two and let me define four bolts in total like this and each tuple would need x and y positions i guess we can start with zero and zero so it's easier to understand then for the next tuple i go 100 pixels to the right but i stay on the top then for the next one i go to 100 and 100 and for the final one i go to 50 and 200 and let's see what we get you can see in the top left we started at position zero and zero then we moved to i think this was one hundred and zero then we moved down to this point here one hundred and 100 and then the final point was this one here and i believe this one was 50 and 200. and pillow connects all of these shapes and this is what we get and here again you can add more named arguments to add more customization if i run this one now we get some different kind of colors if you look at the documentation this one is really easy to figure out and the final one is very similar compared to the polygon this one is called line and then here again you need different points inside of a tuple i guess let me use different ones let's say 800 and 1000 then 1000 and 1000 and 1200 and 1000 and i want to keep to three points and for the fill i want to go with black and in here you don't need an outline instead you would define a width and the width is just an integer could be 10 and i guess one more interesting point you could add a joined outline and this is how the points connect with each other for example you could add a curve in here and if i run this now we can see a black line that looks really boring i guess the middle point here should be something like 1 500. that is much better although also not great let me put the 1100 so we can see the joint there we go if i zoom in the one interesting bit here is that this point here is curved out a tiny bit the reason why it is curved out is because of this curved named argument here if i get rid of it and run this again this one is looking much sharper and isn't even properly connected all right this is stuff you can figure out yourself really easily if you look for the documentation besides that we can also i call this one in my notes draw circle thingies i could not come up with a better name you are basically drawing round shapes like a pie chart for example but there are a couple of different ways to approach this the easiest one is draw dot arc and in here pillow is expecting just like for the rectangle and the ellipse some kind of rectangle in my case something like this and besides that it also wants a start and an end argument and let me just start with some numbers these are both angles the start angle could be 20 degrees and the end angle could be 180 degrees if i run this now it's very hard to see it's up here i suppose we can customize this already a fair bit i could for example change the width of this and now this is much more visible and the way you have to think about it is that angle 0 is here and this angle goes like this these are 20 degrees and 180 degrees all the way up here is to go halfway around it if you added 360 you would add again at the starting point let's actually play around with this if i add the starting point to 0 and the end point to 360 i have a full circle looks like this if i change the start point to 10 degrees and the end point to something like 40 i get with a very short slice of this and i guess what else you can do you could for example fill this with a color let's say red in my case and there you go now this thing is red there are two slightly more advanced versions of this arc so let me copy it once and the slightly better version is called chord or not better but more well powerful let me comment out the original one if i run this one we are now getting a slightly different shape it's very hard to see because the arc we are covering is very short if i change this to 180 you can see it much better we are basically creating a half circle that is closed so here is i think 10 degrees here we have 180 degrees and then we are closing this half circle and finally i can duplicate all of this one more time and comment out the original besides chord we also have what is called pi slice and this should be spelled like this if i run this one we are now getting a pie chart that let me zoom in a bit here's the center of the pie chart here we have 10 degrees and here we have 180 degrees and with that you have the three different ways to create some circly thingies i still don't know how to call them and for the final part for the shapes we have drawing text and this one is really easily done all you need is draw.text and then here you need a position let's say in my case 1 300 and 640 and then you need a word that is just going to be a string let's say panda if i run this now it's very hard to see but there we can see panda now this text this text right now doesn't look very good and to customize it we need something else and this is called image font and this one allows us to create a font and this you store in a separate variable and here use image font and then dot true type and truetype is a file format for fonts oh and i actually forgot to mention while i was recording this i forgot to add in the true type file format it's this one here in the code now and this is what we are going to import and for that all you need is the name of the file which in this case is hellogen.ttf and now we have font so when we are drawing the text we can specify that the font is the font and now if we run this we get a different font the issue is this is way too small to see but that is not a major problem because when we create a font we can set a size let's go with 80. and if i run this now this is much easier to see and if you want colors you could add something like fill and add what's the color i haven't used yet i think this one is a light blue it really doesn't matter choose whatever you want in here and for text you have a few more things you could be working with for example a line is something that is quite useful if you have more text and in here you could choose let's say something like center to center the text although in this case you're not going to see much of a difference the one parameter in here that is a bit more difficult to understand is the anchor for this one you always need two letters like m m for middle and middle and i think if i look at the documentation this should explain it the best and here we go and if you look at it you can see the entire guide all you need is here by default you are placing this top left point here and with the anchor you can customize which point you are placing for example if you place m and m here you are getting to the middle of the text if you used a different example let's say right and top you will be placing this point here and this way you can be much more deliberate when you position the text and when you are placing these arguments the first one is always for the horizontal the second one for the vertical i could place the right and the top here and now the angular or the placing position of the text would be the top right so if i run this now the text is a bit more to the right and a bit further down because i am placing this point here and with that we have all of different shapes you could be drawing in pillow it really is quite simple and with that we can come to the final part of this video and that is combining images and for this we have a couple of different ways we can use the inbuilt methods of the image object there are quite a few actually but what you're going to use most of the time for merging images is image jobs this one is much more powerful and in this section i'm also going to cover masking which is basically what you need to cut out alpha bits in an image and once again i have a new python file except this time it is a bit more complex or well not that much we are now importing three different images we have the panel we have already seen we have an owl and we have the python logo i suppose let me show them so owl.show we have an owl and we have the python logo looks like this i should mention at this point i have added a few more pictures to the project folder it now looks like this i have added the owl picture here and now we also have a mask this one we are going to use in just a bit what we can start with is merging images with let's call it image methods and we have a couple of methods that we could be using here all of them are part of the image class one for example is called blend and this one just takes two images let's say in my case my panda and the owl and for the third argument we need some kind of alpha value let's say for a start we can leave this at 1.0 and this is going to return a new image which we can store let's call it image blend and this if i show it we get image blend and now we can see only the owl the reason is we are putting the owl on top of the panda and then we are basically using full alpha here so we're only showing the owl if i set this to something like 0.5 then you can see a much better blend we have the owl in the foreground and the red panda in the background and that would be one way to combine these two images now there are two things you do need to consider here and that is that both images need same size and mode and right now both the panda picture and the old picture have the same size and they do have the same mode so we are good here however if i added the python image and run this again we are getting a value error that the images do not match because this python image here is much smaller and this can be a bit annoying but i will show you a few ways to play around with this now besides blend we also have image composite and this one again needs two images with the same size so in my case panda and owl and finally it is going to need a mask and the masks determine which parts are being cut out here i will cover masks in more detail later on in this section for now i just want to cover the entire image and a mask is just going to be another image where you can set a certain size for example what i could be doing here is just use image new and now i have to set a mode and usually a mask is in l mode where we just have black and white then we need a size of the image and this we get with panda.size so the size of the panda image and finally we can actually set a third parameter in here and this i don't think i have covered yet but this one is called color for now let me set it to 255 the maximum you can set in here at least for l values and this is now going to return a new image which again we can store let's call this image composite and this if i show it is going to look like this we only have the red panda the reason is because of this value here if i set this one to zero we can see only the owl and if i set this somewhere in the middle let's say at 100 then we can see how these two images are merging with each other and to understand how all of this works you have to understand this number here it basically sets the gray value for this entire image if this was 0 this entire thing would be black if it was 255 let me use a different color 255 all of this would be white and when we are using a mask white means we want to show all of it and black means we want to show none of it so the closer this thing gets to 255 the more we are showing off let me show it again so if this is 255 this mask here is white meaning if i show it we can only see the red panda this original one here is now using this mask and since the mask is all white we are showing this image entirely if it is zero the entire mask is going to be black meaning we are showing none of these pixels here and we can only see the owl which if i run this we can see the owl indeed and if i set any value in between let's say 50 then we have some level of transparency in here again i will cover mass in more detail in just a bit and with that we have different ways to overlay images now the limitation we have right now is that these images always have to have the same size but that we can get around with image paste and this literally is we are calling one image and we are pasting another image on it it's just a method and in here i need two arguments i need the image and i need the position i want the image to be in for example in my case i want to put my python image on the panda image and for now at the position zero and zero and if i now show my panda you can see the python logo in the top left this one is looking pretty good although you can see quite a noticeable problem we still have the background and this is a problem in pillow right now if i show the image again in the file explorer we have transparency in here so this transparency does not show up in pillow to get the transparency we are again going to need a mask and now how this mask is going to work we again want the python image and if i run this now we have the proper cutout and now you could move this python logo around to wherever you want the first argument here is the xcoordinate the second one is the ycoordinate let's say 300 and now the python logo is a bit further to the right and a bit further down notice here we are placing the top left point anytime you have any kind of transparent image that you want to put on something else you would use paste and then you would use the image python in this case and then the image itself as a mask and all right with that we have some basic ways to put one image on another but there is something much more powerful and this is called something like channel operations and this is something we have to import what we need is image shops and shops here stands for channel operations and this is the one part of pillow that is concerned entirely with combining different images i suppose a really easy one here is image and i want to create an overlay between my panda and my owl and this i'm going to get with image chops dot overlay and now on here we need two images and in my case i want my panda and my owl and now i want my image overlay if i run this we are getting an error because this needs to be an uppercase i here and here now if i run this there you can see we have the owl we have the repunda and we have the python logo although in my case i want to comment out all of this to keep things a bit more organized now if i run this again we only have the overlay with the owl in the foreground and image jobs has lots more methods that we could be using since they all work in the same way let me just copy paste them in we have darker lighter soft light hard light difference modulo and screen and they all work in the same way that we have one image another image and we are merging them together in some different way i guess let me do some examples here we have image screen for example the one all the way at the bottom this one looks like this very bright we also have image darker and this one if i run it only picks the darkest pixels between these two images for example you can see the owl here really well because the out has lots of dark pixels same with the panda legs here and here they are very dark so they're very easy to see and this blending mode always picks the darkest pixel and lighter does the exact opposite it always picks the brightest pixel meaning now we can see more of the red panda because he is a bit brighter i guess a good one here is image difference because this one is a bit of a nightmare image to look at but well i hope you get the idea all of those are really easy to implement but there are a few more and those are called more complex channel operations because all of those need more arguments besides two images the first one is image shops dot add and this one again needs two images in my case again i want the panda and the owl but now we also need scale and this by default is 1.0 and we need an offset and this by default is zero and this again is going to return another image let me call it image ahead did or just image add i think that makes more sense and now if i run image add we can see we have some kind of addition where we are combining the brightness of each pixel and these two arguments make this brighter as well for example for scale if we choose a higher number here like 5 it makes all of this darker and if we go down to something like 0.5 this thing is becoming even brighter let me keep it at 2 i think that looks better something like this and offset this one the higher you put it let's say 10 the brighter the image becomes i'm not sure how these two parameters differ i couldn't really find anything good on them but if you add 100 in here the entire thing gets brighter just play around with this it's not that complicated and if we have add we also have subtract which i get with the subtract method and this one has the exact same named arguments we have scale and we have offset so my image subtract i can show it and now we get some slightly nightmarish result again again here play around with the parameters this one is quite easy to work with actually speaking of nightmare fuel when i played around with this there's one thing i did forget to mention and that is image blend if you add a really large number in here let's say 10 and then show image blend you get some horrifying nightmare thing i really wanted to show that you probably are never going to use it but use it if you want to scare someone or something like that okay and then we have two more that i do want to show and the name here is going to be a bit weird i call this one image underscore logical underscore end the reason why i called it like that is because we are again using image jobs but now the method is called logical underscore and and in here we again need two images i want to use my panda and my owl once more and i want to show the result so image logical and but we are going to get an error and the error is that the image has a wrong mode what pillow wants for both of the images in here is they have to be in one mode meaning all of the pixels either one or a zero and this we can get by converting both to the one mode and now if i run this we get this kind of result and besides and we also have the or operator here if i show that one we get the exact opposite operation why you would want to use that honestly i have no idea i'm sure there's some really specific use case that you might need with that we have the more complex operations there is one more thing in the image jobs that is super easy and i'm not sure why this in there in the first place we can invert an image we need again image chops and now we need invert and in here we only need a single image let's say my panda again and if i show this image invert we get the inverted image of the panda and i think by now we have seen like five different ways to get the same result there are lots of different ways to get the same outcome in pillow it works somewhat like photoshop and well if you get this far this is pretty much all you can do with channel operations and with that i can comment out all of them because for the next part i want to talk about mass let's call it masking and the general idea of a mask is let me go over this in quite some detail i think that is important if this here is our image a mask in the most basic sense is just another image but this one needs to have some kind of alpha value how this works can be done in a couple of different ways the easiest one to explain is we could have an r g b a image and for the a part we make sure that some pixels are hidden for example we could have an image that only covers something like this of the screen and if we then apply this mask what you would actually see in the end would only be the part inside of the mask so all of this red bit here would be visible because this is what we are cutting out with the mask the best way to think about a mask is to compare to a cookie cutter with the yellow bit here being the dough and the red bit being the cutting part i'm not sure what the actual name is and in pillow this mask can work in a couple of different ways we could either use an rgba tuple where all the transparent pixels are the empty parts of a mask so this bit here would be invisible there's another way though that is i think a bit more common and that is to only use black and white images and in this case all the white parts would be visible and all the black parts would be hidden meaning in this case all of this stuff here would be visible and this bit here would be black i suppose let's implement all of this and that should illustrate it better but i do want to add a comment that a mask must have a specific mode we can have rgba 1 or l if you have any other mode this is not going to work first of all we have to actually import an image that we are going to use as a mask and this i'm going to save in a variable called mask and to get this image we need as always image open and in my case i want to import mask.png and this if i show the image looks like this on the top left we have black all of this stuff here and on the bottom right we have transparent pixels and this happens because this entire image is in the rgb format i can actually demonstrate this let me print mask dot mode and if i run this you can see we have rgba which means that this image is perfectly fine to use as a mask we have rgba now there are two ways to actually use it let's start with image mask i guess is a good name and a common way to cut something out in pillow is to use alpha underscore composite inside of this we need two arguments we need the mask we want to cut out from let's say the panda and then we are going to need the mask although i guess let me show the mass but we are going to get an error if i run this we get a value error that image has the wrong mode and we are referring to this panda image because this one has to be in the rgba mode as well both of these actually have to be for this method to work but this is not a problem we can convert this thing to an rgba tuple and now if i run this this is working just fine and essentially what's happening now is that pillow combines these two images by the transparency with the top left being black that's the stuff of the original image but the top left is well you can still see the red panda because there it was transparent and this is possible but usually kind of limited so not exactly what you want to use let me rename it to alpha for the simple reason that we can also use image mast with image dot composite and this is the one we have seen earlier actually we have used this one up here and for this one we need image 1 we need image 2 and we need a mask let's say in my case i want to have my panda i want to have the owl and then for the mask i want to have well this mask and if i now show this image masked this is a much better way to use a mask and well this looks horrible let me flip this around the owl should be on the top and the panda should be at the bottom that is feeling much better and basically what happens in here is that i guess let me cut this out by default we are putting the owl on top of the panda but because of the mast we are cutting out certain parts of the owl all the stuff in the mast if we're using rgb that are not transparent so we only get the owl if this was the image we are getting the owl in this bit here wherever there's no transparency although there is something really interesting and that is that right now this master's rgba but if i convert this into a grayscale image using l we are getting the exact opposite now why is that and to understand why this is happening let me actually show what we are getting when we are converting this mask now we can see the top left this bit here is still black this one did not change however on the bottom right this stuff used to be transparent but now it is just white and if we're using this image as a mask what pillow does is it turns all of these black pixels invisible so we can't see them whatsoever and all the white pixels are perfectly visible so those you can see we are still taking parts of the owl but now the parts that we are taking are the parts of the mast that are white which in this case is this bottom triangle here and since the other rectangle this bit top here is now invisible we can see the panda so we have the panda and the owl and if we used rgba this format here we used a different format where these bits down here were invisible and this is then what we cut away from i hope that makes sense masking can get a little bit tricky the main thing you have to understand is you always have to use rgba 1 or l if you don't you get an error message that is really common so use convert here quite aggressively and then if you use an rgba mask you're cutting out the invisible pixels if you use one or l you're cutting away the black pixels and once you have all of that you are done so this is the entire video i hope that was helpful