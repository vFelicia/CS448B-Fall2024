hello there in this tutorial we are going to be creating an animated button in pygame and unfortunately creating a button and pygame is more complicated than it really should be but in this tutorial i cover a couple of important bits for example how to create an elevated animation how to make sure the button only triggers once and how to set up the entire thing so let's start with the logic of how this button is going to work and in here we have three major components that we need to understand the first one is the text the second one is the top racked and the third one is the bottom right and let's go through them one by one the text is literally just a string that we put on top of the button so this one really doesn't do all that much then the top rack is basically the top part of the button and this one is going to carry a ton of logic i'll cover that in just a bit but in the most basic sense it's like the top color of the button and finally we have the bottom racked this is also going to be a rectangle and this one is well if you had an actual button it would be the side so this one is essentially there to show the elevation of the button it really doesn't do all that much else so these would be the three things we can actually see and we're gonna draw them in just a second but now we have to cover two more important bits that are really important to make this work number one is we have to create a click logic and number two is we have to be able to move the button and to get the button click logic all we really have to do is to check between a collision between the mouse and one of the two rectangles and the one thing we really have to be careful here is that we are only triggering a click once you're going to see in a second what that means and to get the elevation logic all we really have to do is to move the top rack a little bit up and then limit the bottom rack by a tiny bit so with that we have the basic logic so let's get into the code and let's actually implement all of this alrighty so here we have a super simple setup for pygame this would be the most basic setup or almost the most basic setup you could go with so if i run this code all we really can see is well a white background so just to go through it really quick i am importing pie game and cis at the top then i set up a couple of main things so we have the pie game display surface we're setting up a caption here and then we are creating a clock so all of these should be very basic things and the only thing that we really add towards this is a font and this is just the basic font that pi game has inbuilt this is why we added none in here and in my case i have added a font size of 30 although you could have gone with a larger one just check with your own project to see what works for you and then we have our game loop and this one right now doesn't really do anything the only substantial thing we do in here is to draw a whiteish background color so all of this so far really really easy and nothing really happens here so far so let's actually make something happen and how i want to approach this is i want to create a class that i'm going to call button it's going to need an init method that needs self and a couple more arguments so let's go through them one by one the first one i just want to have a text so this is just going to be a string then i want to have a width and a height ideally spelled correctly that tends to help so those are the width and height of the button and then we have a position so the position is going to be an x and a y position so we can actually place the thing somewhere on the screen so what we would be passing in here later on would be a tuple with these two coordinates so um yeah you could organize this differently it doesn't really matter and this is the basic stuff we are going to need for now so now let's start to define some basic points in here first of all i want to create the top rectangle because this one is going to carry a ton of logic and i want to put this into its own attribute so self.top rect and then i use pygame dot rect to create a rectangle and in here we could approach the arguments in two different ways we have to specify x y width and height so this is usually how you specify it although if you check the documentation there's also another way that you could insert a tuple with the position and another tuple with the width and the height and this is what i am going to go for so this is going to be slightly different from what i usually do but not that much and well the reason for it is that this is much simpler because we already have a tuple with the position it is literally just this bit here that we are passing in there so very very simple now next up we have to specify the width and the height of this rectangle and this is also information that we have because all we need are these two bits here and we pass them in here so yeah also super simple stuff so all i have to add in here is the width and the height of this rectangle and height that's how you spell that cool so with that we do have a rectangle and there's one important thing i do want to emphasize here that when we are using this position we are placing the top left so if i draw this here's our rectangle that we just draw and the point we are placing is this point up here so just keep this in mind you could change it but i think this is generally the easiest way to place something although center would also not be a bad point but we are placing this point just keep that in mind all right so with that we have our top rectangle now next up i want to give this thing a color and for this i just declare another attribute i call this self top color and in here i am just going to use a string with a hexadecimal value which in my case is 475 f77 and i got this from an artist online but okay so with that we have our top rectangle next up i want to create some text so let's add another comment with text so we know what we're doing and in here we first have to create a surface with the text so i want self text let's call it surface and this one to render a text we first need our gui font so gui font then i want render and now in here we are going to need three bits of information first of all we need the actual text so this is the text that we have specified earlier in here so this bit now next up we have to specify if this is supposed to be antialiased or not which in my case i do want to do because we are not using pixel art and finally we have to specify a color and for that again i'm going to use a hexadecimal color so ff ff and ff and this is pure white so a pure white text for our text surface cool so now we have a surface and to place it i want to get another rectangle so i'm going to call this text rect and for that all we want to do is to get the surface the text surface and then use get rekt and in here we have to figure out where to place it and well let me illustrate this so we know that this top rectangle is going to be this kind of rectangle and when we have our text all we want to do is to place this thing right in the center of it and that's a bit of information that we can use very easily so all we have to do is to specify this center here when we place this rectangle and then get self top rectangle and then get the center from that so when we are getting this rectangle we are picking this rectangle at the top and just placing the center of one into the center of the other that's really all we have to do and with that we have a basic setup for button so now let's actually draw the thing and i called this draw it's going to be another method that needs self and in here i just want to draw the top rectangle and the text itself so let's start with the top rectangle so for that i need pygame.draw.rect and in here we first of all need our display surface so this is going to be screen which in turn is the display surface we have specified early on that's all that's happening here next up we have to create a color and we already have a color it is this top color up here so we have to pass this in there and next up we need the actual rectangle we want to draw which we also have it's this top rectangle so we want to pass this in here and for now this is all we need although i am going to add a little bit towards this in just a second now with that covered we have to display the text as well and for that we need screen dot blit because now we are placing a surface we are not drawing a rectangle so this is why these two lines are different and in here we are going to need a text surface and a text rectangle both bits of information we already have so i want self.text surface and i want self.text rect so with these two bits we basically have all we need to draw this basic thing so with all of that covered let's actually create an instance of this button so let's call this one button1 and this button is just going to inherit button itself and now in here we have to specify a couple of things first of all the text itself and for that i'm just going to go with click me but really any text is fine here now for the width i went with 200 and for the height i went with 40 and finally for the position i want to place this thing roughly in the middle so our entire surface is 500 by 500 pixels so let's go with 200 and 250 and with that we have created our basic button now all i want to do is to draw it by calling this method so in our game loop all i want to do is button one and draw it and now let's run this and we have clickme it doesn't do anything right now but this we can work on in just a bit but first of all i want to style this a tiny bit because right now it has very sharp corners but instead i want it to look more like this and have more rounded corners so something like this that was terrible drawing i apologize so let's actually work on that and fortunately our draw method can do this very easily all we really have to do here is to specify a named argument called border radius and this one is going to need an integer and for this one i want to go with 12. so now let's run this and here we have some more rounded corners now the slightly annoying thing is that you can see the pixels here quite a bit so i guess you would have to play around with the border radius to make this look nicer um but i guess for now it's fine and with that we have the basics covered to just display a button but well it doesn't do anything right now and that is going to be the next step we will work on that we make this button clickable and for that really all we have to check is the collision between our mouse position and our top rectangle and then once we have that we want to run some code and this is literally the basic logic that we have to run here now there's one complication that we do have to be aware of that if we were to just check the collision and the mouse button press then we would trigger this button multiple times even though the user would only click it once and this is something i'm going to demonstrate in just a second it's a minor problem and we can fix it quite easily but it is something to be aware of but let's jump back into our code and let's have a look at this so here i'm back in the button and i want to add another method that i called check click potentially not the greatest name but well it's fine and the first thing i want to get in here is the mouse position and i'm going to call this mouse pause and to get the mouse position all we need is pygame dot mouse dot get underscore pause and with that we would get the mouse position so print mouse pause and then in our drawing method i want to call check click and now if i run this and you look at the terminal you can see our mouse position so if i go to the top left it's going to be basically 0 and 0. if i go to the bottom right we get 500 and 500 okay close enough oh you will get 499 and 499 because we start at zero so what i first want to do is to check if this mouse position is overlapping with this top rectangle and all we need for that is if self.top rect is collide point with our mouse position so all that collide point does is that it takes a rectangle and it checks if this rectangle is colliding with a single point so this one has to be an x in the y position which fortunately we have and if that is the case for now let's just check if this works we want to print let's call it overlap and i am really bad at typing okay so now if my mouse is hovering over the button we get overlap so that's a pretty good start but now we don't just want to check an overlap we also want to check if the mouse button was pressed and this we can also check very easily and this would be done with pygame dot mouse dot get pressed and this one is going to return a tuple with three elements and each of these elements is one of your buttons of the mouse so the left mouse button the middle mouse button and the right mouse button and let me actually print this thing just to demonstrate what it does so now if i hover over the button you can see false thoughts and faults but if i click my mouse you can see one true if i click the other one you can see the other true and if i click my middle mouse button you can see the middle true and if i press all three you can see true true and true so this is something that we can use and in my case all i really want is to get the index zero so this would be the left mouse button and then all we want to do in here is to use this in an if statement so if my mouse is inside of this rectangle and if i'm pressing this button then i want to do something and in my case i just want to print click but in here in an actual project this obviously would be much more complicated depending on what you would like to do but here's actually a problem i talked about earlier and let me demonstrate so let's say you want to click this button and run code only once however if i click it we are running this six times and the problem here is that pygame runs this code 60 times a second so you think you might have pressed this down once really fast but for pygame your reactions are incredibly slow and what pygame perceives is that you have pressed on the button for six frames of the game so you would have run this code six times which obviously we don't really want to do so we have to add a little bit of logic here to only run this code if the button was released which i think is the easiest way and for that we have to specify another attribute and let me do this right at the top so in here i want to have a couple of let's call it core attributes and the first one is going to be self dot pressed and by default this one is going to be false and now in this code we are going to set this self.pressed to true because we indeed have pressed it so this right now wouldn't really do anything but what we can do now is if the player stops pressing the button so if this one doesn't evaluate to true anymore only then do we actually want to run the code so in here we want to print the click but this by itself wouldn't really work because we first have to check if self.pressed is actually true and only then do we want to run this and after it has run we want to set self.pressed back to false and now let's try this again so i have to code and now if i click it it only runs once and i can do this multiple times it works pretty well cool so let's go for the logic of what happens here and i think let's do this step by step so we start in step number one we get the mouse position this one i think is super easy to do so we don't really have to add it here next up we check in this step here if our mouse position so this bit here is colliding with the top rectangle so if we actually have our mouse on top of the button which also i think is a very straightforward thing next up we are checking if the player is pressing the mouse button and if that is the case we want to set self.pressed to true so that we know the button was pressed but it doesn't really matter how often it was pressed it is always going to be set to true but now we want to check if this condition is not true anymore and this one here is true so basically we want to check if the player has pressed the button but is not pressing it anymore so then this else statement is going to run and in here we are going to check if the player has pressed the button in the first place so if this condition here was triggered and only if that is the case we are actually going to print our code and then set press to false again so with this logic we ensure that our button is only going to be pressed once or in other words we are only going to run the code once the player releases the button so with that we have our basic button logic and well all that's really left to do is to add some visual elements to it to make it look a bit nicer so this is going to involve two parts number one if the player is hovering with the mouse over the button i want to change the color and number two is i want to add the bottom part of this button so that we can have a downward motion that simulates how a button press would work which i think looks quite nice and well let's actually jump right into the code i think doing this explains better than any kind of theory so here we're back in our code and let's start by adding the hover color that i think is the easier part and well all we really have to do is down in our check click we have to look for this part here that if the mouse is hovering over the button and if that is the case i just want to change the self.top color to something else and in my case i'm using a hexadecimal value again which in my case is d7 for b4b you're going to see in a second what this one is going to look like actually let's do it right now so now if i run this still looks the same but now if i hover over this it's going to be red now the problem is if i move outside of this button the color stays the same so to fix that all we have to do is if this condition is not true anymore i want to add another else statement so if our mouse has left the button and if that is the case i want to return myself.top color back to what it used to be so the color we have specified earlier here and well that is literally all we have to do so now let's try this again and now i have a hover color this one is very easy and everything else still works the same so this is quite nice so with that we are going to come to the slightly more complex part that i want to add the bottom part of the button so we are simulating the downward press and for that we are going to need a couple of different elements so first of all when we create this button i want to specify an elevation and this is going to be how high the button is so if i were to draw this let's say this is the top part of our button and this would be the sides of the button then the elevation is going to be how high this bit here is going to be this is a number you really don't want to make too large in my case i went with something like six if you make this number too large this is going to look very very strange so this is the first element we are going to need and when i create the core attributes i want to get myself elevation is going to be elevation but here's going to be the problem that when i press the button i want to set this elevation to zero and after i have released the button i want to set it back to what we have passed in here now the problem is if we were to set this value to zero we would lose the original value we have specified so to fix that i'm going to add a second let's call it dynamic elevation and this for now is just going to be elevation as well but essentially what's going to happen is that when we actually move the button we're only going to change this value and then once the player has released the button we are going to set this value back to this elevation and that way the elevation we specify earlier under the code is not going to be lost this should make a lot more sense in just a bit and now there's one more bit of information that we are going to need and here the problem is that i want to move this top rectangle slightly up in the code when the button is not being pressed so when it's elevated so i want to move this thing up by a couple of pixels but for that i really want to keep the original y position and just to make it easier to work with i'm going to specify this as its own attribute so let's call this original y position but really all that is going to be is pause and one so the y position we have inserted when we created the instance of this class and all right so with that we have all the basic parts that we are going to need to make this button look fancy now before i forget when i create the instance of this button i now also have to add the elevation and in my case i went with six and i would really recommend to not make it larger than that because that would start to look very very silly but okay so now we have all the basic elements we need although there's one more bit that we do require and let me put it right below the top rectangle because we actually want to draw the bottom part of the button so i've called this the bottom rectangle and then here all we need is self.bottom underscore rectangle or rect and this one again is going to be pygame.rect and for now i'm going to place this in the exact same position as the top rectangle but the position here doesn't actually matter all that much because we are going to change this in just a bit all i really want to do is to create this rectangle in the first place because we are going to use it in just a second but the actual dimension of position really doesn't matter all that much for the x and the y position i do want to have the width and for the height for now i just go with elevation but again this part really doesn't matter okay and next up i want to give this a color so i call this bottom color and in here once again we have one more hexadecimal color which in this case is 354 b5e and alrighty now we have finally finished the init part of this code so let me minimize it and then we don't have to worry about it anymore and now we actually come to the interesting part because when i want to draw all of this code i want to specify the elevation logic that's probably a good name and here's how this entire thing is going to work before we draw this button here we want to lift it up ever so slightly by whatever we specified in the elevation so well all we have to do in here is to get our self.top rectangle and get its y property so we move it up and down and i want to place this in the original y position so original y position but i don't just want to put it in that position i want to subtract the elevation so self dot dynamic elevation so minus this point here and that way we are moving the button up ever so slightly before we draw it now why have i done that well the idea here is that this dynamic elevation we can change by default it's going to be six or whatever you specify but if we were to press the button we could change this value to zero or to any other value to be honest so that we only elevate the button if we don't press the button but if we do press a button this value becomes zero so the button isn't elevated anymore and for now let us print this and well you can't really see anything but what you can see now is that the text is slightly further down and this happened because we moved up the button by itself by a couple of pixels so we do know this is working and everything else still works so let's actually implement the rest of the logic for the button itself and then we are going to fix the text all i want to do is when the button is being pressed so when we are in this bit here then i want to get self and set the dynamic elevation back to zero so now let's try this and now we can see that our button is going to be moved down ever so slightly the problem now is it stays down so once we release it it's not going to make a change and that we can also fix very easily when we go to this else statement and we move outside of the button i want to get self dot dynamic elevation is back to self dot elevation so this value is going to be six whatever we specified earlier and this value right now is zero and we're overwriting it so now let's try this and i click it and once i leave it the button goes back to where it used to be so this one is already working quite well cool now next up the text makes this whole thing look quite weird so i want to update the text position as well and for that all we need is self dot text rect get the center again and now move the center once again to the top rect dot center and this is pretty much the same logic that we have used in here where we just take the center of the text and move it to the center of the top rectangle so now when i do this we can see that we are getting the down click button and i did just realize that this line should rather be in this else statement that once we have stopped pressing the button down now it should be in here so now let's try this and yeah this feels much better so we don't want to elevate the button once we leave with the mouse we want to elevate it once we stop pressing the button sorry about that so alright this does make much more sense although actually here's one problem that if we were to press down this button and now with the mouse button still being pressed move outside of this the button would have a slight bug so i hope this makes sense so if you follow along try this yourself keep the button pressed and move outside now there's nothing that triggers this button being moved up again so as a matter of fact we have to add this line of code to both sides so that we're lifting up the button once the player stops pressing the button or if the player moves the mouse outside of the button so if we have both codes we can either press the button it comes up again or we can move the button outside and it also moves again so um i hope that makes sense sorry that was a little bit confusing but alright now we have finished that part and now all we have to do is to actually visualize the bottom right part and well this one is also actually not that difficult to do because all we have to do here is to get our self.bottom rectangle and now i want to specify its mid top so let me just draw this thing really quick so now here we have the button and we are moving this point and now the question is where do we want to move this point and in my case i want to move it to the exact position where our top rectangle has its top point so we are moving the bottom rectangle exactly below the top rectangle so right now both buttons are right on top of each other and to achieve that all we have to do is to get our self dot top rectangle and get mid top again so right now these two buttons would be right on top of each other however now we can change a tiny bit to make all of this work because now i want to get my bottom rectangle again and this time i want to change the height of this button and all we are doing in here is when we get the red button we are extending it ever so slightly downwards and that way we are making it look like the button has a bottom bit and that's really all that's happening here and since we're doing that the height we have specified up here really doesn't matter because we're overwriting it anyway but we did have to specify it here because we're changing the rectangle here so we didn't need to specify it earlier but the actual height doesn't matter so with that all i have to do in here is to get self.toprekt.height so right now we're just copying the top rectangle but what we want to do now is to get plus self dot dynamic elevation so effectively all we're doing is we are copying the top rectangle and adding a little bit of height at the bottom and now if this number is 6 we have a bottom part but if this number is 0 we don't have a bottom part it's as straightforward as that now if we were to run this we couldn't see it and the simple reason is that we are not drawing this button so let's do that again i need pygame.draw.rect i have to specify screen then i have to specify a color which fortunately i do have and then i need a rectangle which i also have it's self dot bottom rect and now finally i need to bought a radius and this one i also have and now let's try this now we have a bottom and this bottom is defined by this dynamic elevation so if i press the button and it goes to zero the bottom part disappears and if i unpress it it goes away so with that we have a button that actually works really well so i hope that was helpful and let me know if you have any questions