hello there in this video we will talk about frame rate independence and delta time in pygame now this isn't a topic that's easy to visualize but for what it's worth here's what we are going to make in this tutorial a sprite that moves left and right with a rotation and an animation now that's not anything impressive but the special thing about it is that this animation runs at basically any frame rate which is something that is really important for basically any video game now before we can talk about how to create this let's talk about some theory first if you make any kind of game you want it to be consistent at all times and for every device but the problem is that players have very different kinds of devices so some players have really good computers other players have really old and weak ones and in practice that means that you might have one player with a really good pc that runs your game at 600 frames per second whereas another player might have a really old computer that can only run 30 frames per second and you want both of these players to have the same experience in your game and also even on the same computer there might be different parts of the game that might be more demanding than others for example an elder ring this is actually an issue right now where the game runs really smoothly inside of a dungeon but if you are inside of the overworld the game tends to slow down once in a while which is something players are really unhappy about so what you really have to make sure is that you always account for any kind of frame rate and let's do some math on this to illustrate what the problem here is we have different frame rates or frames per second we have 10 30 60 120 and 600 and then we also have some kind of object that moves at a certain pixel speed per frame in my case it's always going to be 10. so this could for example be a player that moves 10 pixels to the right on every single frame and this could either be different devices or the same game in different circumstances so like i have said just now elden ring might be running 60 frames inside of a dungeon but in the overworld we might only get 30 frames which would be a very different experience so essentially what we have to do is multiply and then we get different pixels per second in terms of movement and here you can already tell the massive differences that if our frame rate is 10 we're moving at 100 pixels per second but if our frame rate is 600 we are moving 60 times as fast which would essentially break any kind of game so these differences here are a terrible problem for your game and if you didn't account for them the game would essentially be unplayable so how can we fix that and there's one easy ish solution and that is that you can limit the maximum frame rate elton ring actually does that that without a mod ellen ring at the most runs at 60 frames per second but this approach has two major downsides number one is that it does not account for the game running below the target frame rate so if you are dropping down to 10 frames per second this approach would break down and besides that possibly even more important is that you want a high frame rate because it will make the game look and feel much better so if you have a higher frame rate you will draw significantly more frames for the game which will look much smoother and on top of that you will also check player input physics collisions much more often which will give a more responsive feel to the game so limiting the frame rate by itself isn't good enough there's one more thing that we do need and elm ring does this one as well and what it does is it uses delta time for consistent speed at all frame rates now what does that mean essentially delta time is the time difference between the current and the previous frame so literally how long it took our computer to draw the current frame and this information then we're going to multiply with any movement inside of our game and that will make the game run smooth at literally any frame rate it sounds a bit like voodoo magic but it works really well and let's do some math to illustrate what's happening let's say we have a game that runs at 60 frames per second and from that we get a delta time of 1 over 60 or 0.01666 and so on and this we're going to multiply with our movement and our frame rate so if again we get our movement at 10 and our frame rate at 60 we get a movement of 10. and this by itself doesn't sound too impressive but now let's do a second example that we have 30 frames per second now for this one our delta time is going to be 1 over 30 or 0.033 and 3. now if we do the same math again with a movement of 10 a frame rate of 30 and a delta time of 0.03 we are also getting 10. so our pixels per second outcome is identical for two different frame rates and as a matter of fact i can do the same math for all our previous examples and we would always end up with 10 pixels per second regardless of the frame rate which is exactly what we wanted now before we are going to implement this there are a couple of things you have to be aware of first of all when you use delta time you have to multiply any movement with it so literally any movement any rotation any animation literally anything that moves needs delta time and besides that you are also going to need much larger numbers to move things that's arguably quite a simple thing to implement but if you move 10 pixels per second it really isn't all that much so just keep that in mind now we are almost there the last thing we need is that in pi game there are two different ways to get delta time the first approach is to use clock.tick and this one you have probably already seen in pygame it is usually used to limit the frame rate but it also returns our delta time so we can get it from here and this is a very easy way but it's also not as precise as it could be and you do want precision in your game it's generally a good thing to include so i generally wouldn't really recommend using this approach a better one would be to use the time module in python and this one is already included in python so you should already have it and i'm going to explain the code in just a second but essentially this is a slightly more complex but is significantly more precise approach so this is the one we are going to go with and there is going to be another issue but let's jump into the code and let's actually implement this and see how far we get so here we are in a very simple setup let's actually run it and see what we get all we can see right now is a rectangle moving left to right literally nothing else and let's go over this code before we start working with delta time at the top we are importing the usual pi game stuff and debug and debug is this file here i have actually made a whole video about how this works but basically all it does is this in our game loop we can call the debug function and pass in any kind of string to display it right on the window so for example i could write test run this and we can see test in the top left it literally doesn't do anything else it doesn't influence the game whatsoever it's really just there to show some information so if you don't understand this one don't worry about it now for the more important stuff we are initiating pygame and we are creating a clock and a screen after we have done that we are creating a rectangle with a speed and this speed we are using further down here to move the rectangle so what is happening down here is we are grabbing the x part of the rectangle and adding the speed to it and once we have that we are just drawing the rectangle this is some very basic stuff in pi game this shouldn't be difficult at all and then besides that we have our event loop and then we have down here we are updating the window and we are limiting the frame rate to 60 frames per second and now to actually demonstrate where the problem is right now our frame rate is defined down here and this gives us this kind of speed if i were to run it so if i set this to a very low number let's say 10 and if i run this again now our game is running significantly slower and i could also set this number to something really high if i run it again now it's way too fast so both of these extremes would break the game and now basically what we want to do when we are running this line here we want to multiply our test speed with dt short for delta time and for that to work we have to get delta time and there are two ways of getting it let's start with the easier one and this one we get from clock.tick and usually in this approach the tick method for the clock is all the way at the top and for this one we can just save the value in dt and before we actually use it let me comment out the dt down here and let's just print what we actually get from dt so what i'm doing right now i'm just passing this variable into the debug method so if i'm running all of this we can see we get 16 17 sometimes now what does this number mean the tick method essentially gives us the milliseconds since the previous frame and this is the math i have done earlier so if you divide one second divided by 60 you get 0.0166 and then you continue with a lot more sixes and what the tick method is giving us is this 16 essentially and remember here they are 1000 milliseconds in one second now the problem we have with this right now is that we want this value in seconds we don't want this in milliseconds so a number we actually want is this entire thing we don't just want it 16 or 17 we want a 0.016 something and this we can get quite easily all we have to do is divide this value by 1000 and now i can uncomment dt and now this should be working much better so let's run it again and now we get zero movement for the simple reason that now our test speed is way too low so let's change this to something like 200 and now this should be working so now we are getting a movement again that is well you can't really see a change so far but now what i can do is for this frame right here i can set this to something like a 10. and now if i run this again the rectangle is moving at the same speed except now the frame rate is well much worse but the speed itself doesn't change and that's the important bit and well with that we have gotten delta time now this approach has one problem and that is that it's not exactly precise and since we're working with very small numbers you do want precision so a better way would be to use the time module in python and let's do this straight away now to use this we have to import the time module and this one is already installed with python so it should work by default and what we basically want to do before we are starting the while loop i want to get previous time and what i want to get in here is time dot time and this is giving us our current time and then inside of our while loop let me comment out the previous clock.tick i want to get my delta time is going to be now my time dot time minus the previous time and after that is run i want to set my previous time to time dot time and with this approach we always get the time between the different frames it's ultimately quite simple and let me add another space so now let's run all of this and now you can see we have a significantly longer and much more precise number which is exactly what you want now the problem is that our rectangle is not moving whatsoever and well now you can see it's moving a tiny bit but why is this thing not moving or moving so inconsistently and the answer here is that our frame rate is too high and that is not the problem that happens because of time.time so if i comment all of this out again and uncomment the previous approach and change this to something like 600. now if i run this we get the same result essentially the problem we have right now is that all of this breaks if our frame rate is getting too high now you might be asking why is that the case and that's a very good question let's talk about it that's just going to be a tiny bit more theory basically the problem is that when we use delta to move we are always moving with floating point numbers but with pygame when we are placing a rectangle we always have to place an integer and well what does that actually mean let me give an example if we move with pure integers let's say 5 pixel and this could for example be the rectangle we have just used and we want to move this rectangle to the right by 5 pixels if that was the case on the first frame we would have 5 pixels then 10 pixels then 15 and then 20. this one works just as expected so this one is totally fine now where the system does break down is when we have a floating point number let's say 4.5 so technically this should be 90 of the original speed so this is also a rectangle that we want to move to the right by 4.5 pixels the problem is now when we use this pixel information on a rectangle pygame always has to place a rectangle in an integer position because it's pixel information and as a consequence this 4.5 would be truncated meaning that this 0.5 would be omitted and as a consequence when we move it by 4.5 pixels we would only get 4 pixels and then our next frame we get to 8 pixels then to 12 pixels and then to 16 pixels so even though it's supposed to be at 90 percent of the speed of this initial rectangle it is actually moving much slower and even worse if our framerate can fluctuate quite a bit this number might get lower or higher which is making our movement very inconsistent and then what happened in our actual code let me go back to it so in this one here if i run it again we still get basically zero movement sometimes we get a tiny bit of movement and let's actually visualize the information that this rectangle here is getting so let's print this test speed multiplied by delta time and let me use time.times so we get more precise information and now let's run this again and now the number we get is 0.2 and a long number now pi game essentially sees 0.2 for the most part and truncates this to a zero so the rectangle doesn't move at all now very rarely this number gets just large enough to pass a one very very rarely and this is why sometimes this rectangle is moving but most of the time it doesn't so i hope that explains the issue now more importantly how do we solve it and the answer here is essentially that we don't move rectangles by themselves at all instead we are storing the information in a separate variable and then set the rectangle to the position of that variable sounds complicated it really isn't that bad so below my test rect i want to set let's call it test rect position and by default this is going to be test rect.x and now in our game loop i want to get my test rect position and this one is going to get test speed multiplied by delta time and now for the test rect position i want to set this test right position for the x part of the rectangle and important here this should be equal not plus equal so now if i run all of this now we have a very smoothly moving rectangle this feels much better and this works at literally any kind of frame rate so right now our frame rate is literally unlimited so this is working really well although there's one more thing that i would like to do that this test rack position should get a rounding and the reason for that is let's say right now this test track position is 1.6 if we were to just pass this into the position of testrec.x pygame would turn this 1.6 just into a 1 and it would essentially remove this 0.6 now the problem is this isn't as precise as it could be because the more precise location here in terms of pixels would be a two so we don't want to truncate this value instead we want to turn it into the integer that's closest which this case is two and for that we're using round although in practice you don't really see that much of a difference so for all of this now well we get essentially the same outcome but now this is looking really smoothly so with that we have a very basic setup on how to use delta time and basically any kind of frame rate now the question is how do you actually implement this in a more complex project and for that we have the second example and the more complex example is going to be this one so if i run this code here we can see a pirate that's moving left and right that rotates and that has an animation which is basically all the stuff you want to do in a game and if i close this we have a couple of lines of code that should all make sense i guess let's go really quickly over the main parts here we are importing the usual stuff plus time then we are setting up the pygm window just we have done before then we are creating a sprite i'll explain this one in just a second after we have done that we are creating a group and placing one instance of this sprite inside of that group after that we are starting our while loop and we're getting delta time with time.time basically what i've just explained then we have our event loop we are filling the screen then we are updating and drawing the spread group and finally we're updating the window and limiting the frame rate so all of this should be fairly simple but now we have the same problem that if i change the frame rate to basically anything besides 60 this entire thing breaks so at 600 this thing becomes basically unplayable and if i set this to something like 5 it becomes incredibly slow so this is what we have to work on and for that we have to update our sprite so let's have a look at this one first we are starting with our indeed method and in here we first import a couple of frames and set a frame index and this one will be used to pick one of these frames we are actually doing this straight when we set the image but we're also doing this down here in the animate method and this one here would be a really simple way to animate a sprite if you have no idea how this one works check out my introduction to pygame it explains all of this in quite some detail once we have that we are setting self direct and this one is in the mid left of the window and then besides that we have a couple of attributes for the rotation the direction the move speed and the animation speed so this is basically what moves and rotates and animates our sprite and how these things are going to be used is a bit further down here so besides our animate method we also have a move method that right now just moves the rectangle to the right in a direction by a speed and then if this rectangle gets too far to the right or too far to the left we are changing the direction and for the rotation we are simply increasing the rotation and then we're using pygm transform row to zoom to rotate this image and then in our update method we are well calling these three methods here and now basically all we have to do is apply delta time to all of these methods and for that first of all we have to make delta time available inside of the update method which is quite easily done so when we call the update method i want to pass in delta time in here and for that to work the update method needs another parameter that i am also going to call delta time and now each method that moves anything needs a delta time argument and since we have now an argument we have to create some more parameters that are all going to be called delta time and let's just run the code to make sure nothing went wrong cool still works and let me set the frame rate let's say to 600 so it's a bit easier to see what's going on so right now all of this is going to be way too fast and the most obvious problem right now is the move method so this one works way way too fast and in here we could just multiply this line with dt which right now would well make the movement basically zero and that's the problem i just talked about that pi game is truncating this number so anything like 0.2 would become zero so our movement would be a zero and to fix that i want to create another attribute in the init method that i have called self.position and this one is going to be pygame.math.vector2 that needs to be capitalized and the position at the start is going to be self.rect.top left essentially the top left of this rectangle now we are not going to move this rectangle instead we are going to move the position so self dot pause dot x is going to be plus equal all the stuff we have just done and now the rectangle x position is going to be self.x with the slight modification that this value is going to be rounded and right now our rectangle is only moving left and right but if you also had vertical movement you could just add a y to both of these values and you would address this part as well so now if i run this we can see we still don't have much of a movement but now the reason is that our move speed is very very low so if i set this to something like 200 now it should be working and there we go even though we have a move speed of 200 this thing is moving at a reasonable pace and just to see if this is working with other frame rates as well let's change this to let's say a 30. and let's try this again and now we have the same move speed except now the difference is our rotation and our animation are much much slower but the move speed does not change so with that we have addressed the first part now next up i guess we can work on the rotation and all we have to do in here is to move the rotation plus equal one multiplied by delta time and now we also have to increase the rotation number let's say 50. and now if we run all of this we have a movement and the rotation is significantly slower even though our frame rate is still at 600 and well this is working really well now the last thing we have to address is animate and this one also is kind of simple because all we have to change is the animation speed here and this one i'm just going to multiply with delta time and now we also have to increase the animation speed here so let's set this one to 5. and now it may be a tiny bit too slow but i think generally you get the idea this is working really well and well with that we have our basic setup and we can try this as well so here we have our clock.tick and let's set this to 30. and now we still have a similar speed except now the entire thing looks a bit choppier actually to illustrate this a bit better let's set our frame rate to 1. and now you can see that everything is very slow but we still keep the same speed the same animation speed and the same rotation except now we have very very few frames i guess a bit better would be something like five and there you can see it's significantly better so now our animation movement rotation speed is the same except we're doing it with much fewer frames and all right so with that we have basically covered all you need to know to understand delta time and how to apply it to pygame so i hope that was helpful and i will see you around