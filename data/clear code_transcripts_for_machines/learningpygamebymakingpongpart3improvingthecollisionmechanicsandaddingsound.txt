hello in the first two parts of this tutorial series we made this game which worked reasonably well and you have quite a lot of features but there are a couple of things missing and I'm going to add them in this video and it's two things in particular I want to work on number one is the collision mechanic because in the game there are some collisions that don't work quite right just yet and I'm gonna show you in a second just what I mean and number two is that there is no sound which does improve things quite a bit once you add it and that's basically it so let's go through them one at a time and let's start with the collision the main problem we have right now is that while the collision with the paddles from the left and the right works perfectly fine if you have a pedal from the top of the bottom the collisions break down and let me visualize this so here we are back in the normal code and check out the previous tutorials to get to all of this and all I'm going to do for now is go to the line where we have created our player and make the pedal quite a bit wider so I add for any pixels and move it for any pixels to the left if we run the code now we have a really wide pedal and if the ball hits it from the top or the bottom we get something like this where the ball just weirdly wobbles up and down same if we hit it from the top it just doesn't really work and the game kind of breaks and let me talk about what happens here basically the problem happens in this line because all we do is check if any collision has occurred and if that's the case we multiply the direction of the ball by minus one meaning we are reversing the direction and this works if you hit a pedal from the left or the right but if the ball hits the paddle from the top this doesn't work anymore and let me explain this in terms of frames so on the first frame the ball hits the player pedal on the top and so direction is being reversed however on the next frame the ball is still colliding with the pedal and as a consequence the ball direction is being reversed again and this continues to happen until the ball reaches the bottom of the player pedal which looks terrible and kind of breaks the game at some points and fixing all of that needs a bit of logic and I've made a dedicated video to just talk about collisions and I am NOT going to talk too much about theory in this video but check out the other video if you want all the details on collisions but to fix all of this let me first turn both of these if statements into separate parts so we have two if statements that each check one of the pedals so if collide rect of the player and we also move the pedal so both of these if statements are equivalent to the first if statement except we have not put them on separate lines and let me at the top two all right here we go the first thing I want to do is check the direction of the ball when it is colliding with the rectangle so boys relaxed and for this one has to be a positive and for the opponent has to be negative and let me add an end for both of them that's really important so now we have changed both of these data checks to conditions the first one is that the collision has happened between the ball on the player and the second one is that the direction of the ball has to be positive in case of the player and negative and case of the opponent moving that the ball is either moving to the right or to the left and this should make some intuitive sense now let's say on this line if the ball is colliding with the player then this can only really happen if the ball is moving to the right if the ball is moving to the left we don't really want to hit a player at all so if I run this code now we should already see some improvement so if I right now we are seeing some improvement that the ball doesn't wiggle as much but there's still some problems happening here but we can work on them and the first line I want to add is if the absolute value of ball door right player toward left is smaller than 10 and if that's the case we want to move the X direction of the ball and I've explained this line in particular on the other video in quite a bit more detail but basically all it does is we first check if a collision has occurred and then we check what side the collision has occurred and this line can only be true if the player pedal has been hit from the left and as tennis a tolerance for how much wiggle room we have and if that's the case we just want to think we already had so just reverse the direction of the ball and if we implement the same thing or our opponent when you do digs other way so will he bought off left and has to hit the right of the pedal and has to be the opponent not the player it's so opponent or right yeah looks right so if I run this code now our boss should not be colliding with the top or the bottom at all so if the ball hits from the top it should just entirely ignore the pedal and let's try this and here we go and it's completely ignored so the ball goes right through our pedal so that's a good start but we want more than that we want the ball to actually collide and bounce off the top or the bottom of our rectangle and that we can also add quite easily and we need an L if statement and the same logic as with this line just for the top on the bottom now so we need ball dot bottom player top and also has to be smaller than 10 and if that's the case we want to reverse yeah why speed but another problem here that we also want to check if ball speed Y is greater than 10 so at the balls moving downwards and hits the player at the top and it's kind of same logic that we have used up here and again if that sounds confusing check out the other video it's much better explained in there right now we just need to copy this line again and instead of Paul dough bottom we change to balls on top and play at bottom and now Y has to be smaller oh and this isn't ten this is zero and all of that point done this should actually be working so let's try it and yep here we go we do have a collision from the ball and it's moving up and down and the same thing again and even if I move the paddle a little bit it still is working and yeah there we go with that one done we just have to copy all of this to our opponent that this works in the same way there and both of button and opponent top and the rest is fine and this one should be opponent at bottom and that's pretty much it and now we have proper collisions for both of the paddles which is quite an improvement the only thing left to do is remove all of this that we have enormous size player pedal again and if I run this now this should look as normal but now the difference is if I've of the pedals has been from the top or the bottom and then the game doesn't break so this is a nice improvement and that brings us to the second point to add sound to all of this and adding some time per game is actually fairly simple there are two steps to it on the first type you have to import the sound and in the second step you have to play the sound in certain parts of your code and in my case I have two different sounds one is called pong Devas called score the score song has been played whenever squad was being achieved so if the ball has gone too far to the left or too far to the right and the pong sound is going to be played whenever the ball is collided with either the pedals or the top or the bottom of the screen so let's implement all of that and here I am back in my court and at the bottom where we initiated all of the other variables I'm gonna add another part and it's going to be sound and I have two files that I want to store on variables the first one is pong sound and to import sound into Paganini pygame thought mixer table sound and make sure the S is capitalized and emanate a name of the file which in my case is pong thought OGG and then for the score sound I copied this entire line just changed it to score and the name of this one is also called score and as always make sure that both of these files are in the same directory as your code otherwise you would have to give more specific direction towards them so now we have covered the first step that we have imported our sound now we just need to play it in certain parts of our code and this happens in our code all the way up here and bore animation and the easiest one is this line here when the ball IVA hits the top or the bottom of the screen and what I want to do is PI game mixer got sound dot play so this is to play a sound and now we just need to tell Python what sound to play which in my case is pong sound and now we need this kind of thing in all of these different cases and then we have our sounds so I start with on the ball clicks of the player and when the ball collides with the opponent that is all the pong sounds now I need when the score is being achieved so this one please score sound and then the same for the other score and that is pretty much it if I play the sound now it should be working but there's a problem to death that is when we play this game right now all of the sounds are being delayed by a couple of milliseconds which does sound really really strange and let me explain why this happens basically pi camp tries to account for really slow computers so before it plays a sound it tries to buffer the sound and only place the sound once it's fully buffered which avoids broken sound on very slow computers but also delays the sound by quite a bit and we need to specifically turn this kind of thing off so when to reduce the buffer size and that is really easily done so here I'm back in my code on the line where we initiate PI game and what we need to do is to initiate a part of PI game specifically so we want to look at PI game dot mixer and the line is called pre in it so at one PI game initiates out of it it gets some specific information on how to initiate the mixer module and there are few arguments we don't we need to worry about the first one is the frequency that was 44100 by default you just don't worry about this one then we have precise this one is 16 by default also don't worry about this then we have two channels and this one is 2 by default and we can just leave it as it is and now we come to the important part and that's the buffer size and by default this one is 4096 and the high value causes the delay here so we have to change it to a smaller value let's say 512 and once we have that one we can run the game and this should work perfectly fine okay cool but you do want to be aware of that this value should not be too small and let's make it really small let's say we're gonna make it six before if you play this now it is going to sound terrible but that's basically it if I return this to five eleven twelve and we have a proper working game and yeah hope that was helpful and I see you around