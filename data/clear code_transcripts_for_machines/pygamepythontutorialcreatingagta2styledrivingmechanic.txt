hello in this tutorial we are going to create this it's a pretty straightforward topdown driving game where we can press the space button and we start the car and it drives and we can press left and right to move the car left and right and we have fairly decent driving mechanics for the car not perfect but it's working for basic driving mechanic and most importantly we are going to use vectors to derive the car which is a whole new topic and Piegan that I'm going to talk a little bit about let's jump right in and this is a topic that is getting a little bit more advanced than pygame so if you are completely new to the program you probably want to check out these two videos at the very least a basic introduction to PI game and an introduction to sprites and PI game both are really helpful for you to understand what's going on in this video and besides that I also made a video about rotating stuff in PI game which I'm also going to use in this video so these videos are going to help on more specifics so here we have a very simple setup for pi game and we already have one sprite class that I have called the car and this is going to be our main car and for now it doesn't do much it just gets a surface that are called original image that imports an audio PNG that is in the same folder as the code they put this original image on an image so that I was practice the surface and what I forgot to add here is selfdirect it's after image don't get rekt and center I think I put it at at size 6 and 40 and friend at 60 so basically what happens is that we are importing an image putting this image on the screen and putting a rectangle around the screen it's essentially a simple sprite class and the only reason I separated these two lines is because we need to rotate this surface and whenever we rotate something in PI game it loses a bit of quality and to prevent a quality loss we split these two two different files that we can rotate one and safety image in another surface I explained the entire logic in another video check this one out if you want more details on this but besides that our code so far doesn't do anything because right now we are not using the class whatsoever and we're not even drawing a background image let's start with that one actually the first way I want to do is import a background image and that's already giving us the track we want to drive on and I've got this one bg track and this is PI game image load and I caught the file track dot PNG and this PNG file I'm just going to put as a backward picture so screen clip BG track beyond this code track and I'm gonna put this on the top left of the screen and we already have our racing track obviously nothing's going to happen if we don't drive on it it's just a picture but that's not the important part the important part is our car itself and for now let's just create the car and put it on the screen and then we can worry about actually moving it and first thing I want to do is to create our new car I'm going to graders with car and actually doesn't need a width and height that was the leftover so that's only to create the car now we need to put this car into a class and I'm going to call this cars and this is per game don't sprite dot group single and then car store add car so this is a pretty basic setup for a group we first create a sprite object and we create a group and then we add the sprite object to the group and now in our game loop we need cars to draw and on what surface you want to draw on the screen and with that we can see our car on the screen it's quite large right now we're going to work on that in just a bit there's first one more thing that we can simplify this thing quite a bit because I really need is to put this car into this group single because whatever is being passed into here is automatically added to this group and once we have that we can get rid of these two lines and call this car and car and this simplifies the entire code quite a bit and it's much easier way of writing all of this so if I run the code now we get the very same result and with that one done let's actually work on the car movement and rotation and I'm going to start by just rotating the carb if I press left and right and after that's done we're going to get to moving the car so let's rotate the car and there are couple more attributes I need to do this the first one is selftaught angle and by default this is going to be zero so this is the angle the car is going to be looking at and the second one is self dot I call this rotation speed and this is effectively how fast the car can rotate and let me write this an all lowercase letters and I went with 1.8 you can go with the lower or higher speed just experiment with the code and see what it looks good and this one right here people need that it's self dot direction and by default this is none and this is the attribute that we are going to influence with our keyboard input which is going to happen down here in the event loop and what I want to do is if event dot type is equal to PI game thoughts key down so if you press any button down and then if even dot key it's equal to PI game dot okay right and we also want one four key left and then we want to do the same thing when we lift the key up again and I'm going to add code to all of these in just a bit so key up so now we need to add code to these four different lines to actually give some indication of what the car needs to do when we press a button and here's the logic I came up with our direction can take three different values 1 0 and minus 1 if it's 1 then the cars going to rotate right if it's minus 1 the cars going to rotate left and if it's 0 it's not going to rotate at all and whenever we press the right key on our keyboard we're going to add one to our direction and when we left up the right key we're going to subtract one from it and then the opposite logic for key left and the major reason for that is that if you press both left and right you're going to get 0 so the cars moving in a straight line and now let's implement all of this and the one mistake I make this shouldn't be none the ship is obviously so now let's go for the step by step the first thing I want to do is only press key right I want to add one to this direction and to get to this attribute we first need to target the group itself and then the sprite inside of this group single so what we need is car dot sprite and this is something that only works for single groups if you have a normal sprite group this is not going to work because all in a single group can you target the sprite inside of the group but now we have the object itself so now we can just go direction and what I want is classical one and then four key left we have the exact opposite that we want minus equal one and then four key right we want minus one so we do the opposite and then four key left we want plus one again so with this logic what's basically going to happen if we press key right is gonna be one and if we lift up Q right again it's gonna get minus one so this direction is going to be zero again so effectively when we press key right the cars going to move right if we lift up the right key again the cars going to move straight again because Direction is zero and with that one we actually have to implement some logic that if this direction has different values we are getting different directions and for that I need to define a new method a called set rotation it needs serve as always as an argument and in here we are going to need quite a few different if statements and the first one is if self dot the erection is equal to one so we're going to move right then self dot angle is going to be minus equal itself thought rotation speed and the reason why this is negative is because pygame rotates counterclockwise so if you want to go right you have to go negative if you go left you have to go positive and going left is exactly what we are going to do next so self dot direction is negative one then we want to add towards our angle but for now our angle is just a value we have to apply this value to our image and this is going to come next karna go self dot image is equal to PI game transform dot bro to zoom and again for the entire rotation stuff I've made a separate video for this if you're confused about the logic here check out the other tutorial is going to help immensely to explain all of this in much more detail alright this rotor zoom takes the surface and it gives us new surface that we're going to store on the image and then this image is going to be shown to the user in the end and the surface I want is self thoughts or regional image and next up we need the amount of rotation which is softer angle so self dot and go and then since row tourism can both rotate and scale we need to scale which in our case is going to be 0.25 and with that we would already be getting a car that is rotating left and right and is much smaller but there's one more line we need and that is self direct self image get rekt and the center is going to be self directed center basically what this line is for is that whenever we rotate something in pygame we change the focal point so the point will be rotated around and to keep it in the center we take the center from the last rectangle and applied to direct angle we create from this new image but with that one we have a rotation so if I create an update method now and go with self dot set rotation and in the code I also need to card update and now this should be working so let's try it and we have an error because I have a typo so let's try to get now and we have another typo because we copied the line okay and now I pressed right we move to the right if I press left we move to left so this is a good start but now II to cover another subject now let's say when I press space I move the car forwards in the direction that is facing right now and for that we need vectors and I haven't covered vectors yet but they are quite important for game development so let's talk about 2d vectors effectively what they are is a line in a 2d space so you start from one point and you end up in a different point and they only really have two major attributes one is the magnitude so how long the line is and then you have an angle so what rotation you have and then this entire vector can be expressed with two numbers how far you go in the xdirection and how far you go in the ydirection and then this vector does consists of these two numbers and this vector you can use in lots of different circumstances and there are lots of inbuilt functions into PI game to make use of it quite a bit the way we are going to use it is that we are going to rotate this vector in a certain direction which ever the car is facing in my press space we want to move the car in direction this vectors facing but this is only a very basic application of vectors check out other tutorials there's lots more stuff you can do with vectors they are incredibly powerful but in our case we just want to move the car so let's implement all of that so here I'm back in my code and let me close the rotation method because we don't need it anymore and they had two more attributes I want to add to it the first one is the actual vector and this is going to be self thought I called it forward and to create a vector and pygame put it PI game dot math the vector 2 so this is a twodimensional vector and the twodimensional vector has two attributes and X and the y coordinate so basically how far'd must in our resulting space and how far moves in the vertical space and the my case I want to go with zero and minus one and what this means is that we don't move on your horizontal space and in the vertical space we're going upwards because minus 1 and PI key must always upwards and the reason I've chosen those two is because when I run the game by default or a car is pointing upwards and that's literally the only reason and besides that I also want one attribute are called active and by default this one is false and when this one is true I want to move the car forwards so this is basically direction if this one is true when I move a certain amount of pixels in this direction and the first we need is some input to make this true which happens again down here in the event loop and what I want to do is if event dot T is equal to PI game dot k space and if that is true then I want card dot sprite dog active is equal to true and then when we lift up the key then it's going to get to false so all that happens is if you press space then active becomes true if we lift up space then it becomes false again so the car is only going to drive when we press the spacebar once we lift the space bar the car stops moving it's not the most realistic kind of car mechanic but it's a basic start now we need to give our car a method that it moves in the direction of the vector and for that we are going to need a couple of wings let's go for them stepbystep the first one is a method I called get rotation and this one itself as usual and this method is to rotate this vector in the direction the car is facing so I may use this rotation here we only rotate the picture of the car but to move it in a certain direction we also have to rotate this vector by the same amount and then it's going to look quite similar so if self dot row tation is equal to 1 then we want to move this vector to the right and this happens with self dot forward dot rotate IP and I pee standing this vector in the same spot and it just needs one argument and it's by how much we want to rotate it I want to rotate this thing by self dot rotation speed and that's all we need to rotate the vector to the right now if I copy this we the same logic for the left so if this one is minus 1 and this also to be negative because we're moving it left and that's literally all we need to rotate this vector this one here now we two actually this vector to our car and for that I'm going to use another method that I called excel rate Osen itself as usual and aletan here is if selfprotective so if it's true then self dot rec center plus equal self dot forward and that is all we need so now in our update method I want to add a self dot get rotation and self self dot accelerate and now let's try this and we get an error because this shouldn't be rotation this should be direction I am making it a ton of type is today so let's try it again and here we go if I type now we are moving upwards and we have a very weird movement dynamic it kind of works but not really and this can be fixed quite easily so let me explain what is happening right now when we applied a vector the numbers inside of the vector of really small so we have 0 and minus 1 and if you rotate them they might get even smaller so minus 1 might become something like minus 0.5 and since we are still moving in pixels this would not move the car at all and that is because for pygame these numbers are so small that it basically doesn't register them so just ignores them so for quite a few numbers the rotation is going to be ignored because the numbers are too small but this can be fixed really easily all we need is to multiply a vector by basically any number I went with 5 and if I run this code now we have our car mechanic this is actually working quite well and yeah this works as intended so it's not the most perfect car mechanic and there are a couple of bucks in there but it's a pretty good beginning to get started on car mechanics so I hope that was helpful and let me know if you have questions about it