hello in this video we will be creating heart containers in pygame and here's what we are going to make right now on the screen you can see three different rows of hearts and they all work in slightly different ways so let me remove a couple of hearts and they can see on the first row we can see full hearts and empty hearts in the second row we can see only four hearts and in the third row we can see half hearts and all of this is inside of a sprite class but that isn't strictly necessary so you could create the entire thing without one i just thought it was useful because you are usually going to create hearts inside of a sprite class that represents your player but it's up to you and i got the artwork for the hearts from an artist called kenny who does amazing art for free so check him out i'll put a link in the description but with all of that covered let's actually jump in and let's create some hearts and pie game so here we are in our code and i already have a couple of lines there there is all the basic logic you need to create pygame and i created a sprite class that i've put into a group single and in our game loop i am drawing and updating it and i called the link because that's where the logic for hearts basically comes from and the class is created up here and i will talk about it in just a second but before that i also imported three different hearts that are called full heart half out and empty heart and they do what the name implies so this one is quite straightforward so with all of that out of the way let's look at our class so in the class we have an image and we have a rectangle the basics you need for any kind of class and right now this just shows an image of link so if we run the code right now we can see link in the middle of our screen but he can't do anything and he will never be able to do anything in this game i just want to have something on the screen for the class it felt a bit weird having it empty but okay then we have an update method that doesn't do anything right now so now let's get started with the health and the very first thing we need is an actual number that keeps track of how much health we have which in my case i call it self.health and let's start with five but you could put any number in here it's really up to you and i will also create an attribute that i called self dot max health that i will be setting to 10 and this is going to be the maximum amount of health we are going to have and we will also have a minimum health but that's going to be zero so that doesn't really need its own attribute okay and now we need some methods to influence this number here and i created two that i called get damage and all that get damage does is if our self dot health is greater than zero then self.health minus equal one so if you're running this method and our player has greater than zero health then we are reducing the health by one so effectively we can never go below zero in our health and then let me copy the entire thing actually there is the opposite function that i call get health and this one is our health is smaller than our self dot max self then i want to increase our health by 1. so all these two methods do is increase or decrease our health nothing fancy but now we have to figure out a way to trigger both of these methods and how i approach this is that if we're pressing the up key we're running get health and if i press down we get damage so let's implement that so where we check our events i'm going to add if event dot type is equal to pi game dot k down down and then if event dot key is equal to pygame dot key up and if that is the case i want link dot sprite dot get health and then equally let me copy this entire line if i'm pressing the down key then i want to get damage and with that logic our player has health that we can influence and let me actually test this so in our update method i'm going to print self dot health and if i run all of this now you can see in the bottom of the screen our health and if i press up or down and i scroll down in this thing you can see here the numbers going up or down it doesn't go down with it right now i don't know why but we can't go below zero and if i press all the way up we can never go higher than 10. so we know this is working so that's a pretty good start so let me stop this and replace this with pass again so now we know all of this is working but we can't see it so it's not really a good health indicator so let's actually put some hearts on the screen and i'm going to start with the simplest approach and that is just having the full hearts on the screen and not showing the empty hearts and that's the second row i showed in the beginning and to get to that i'm going to create a new method that i call full hearts and now we need to figure out how to approach this in terms of logic to put hearts on the screen by using this self.health and the logic is actually surprisingly easy all i'm going to do is to use a for loop that runs as many times as we have health so in our case right now that's going to be five and on every cycle of this for loop i'm going to use this health indicator to place the heart a little bit further to the right so the first heart is going to be at position zero the second one is going to be at position one times fifty the second one is going to be at position two times fifty and so on depending on how many hearts we have and all of this is really just a basic for loop so for heart in range self dot health and then in here we want to use screen dot and what we want to blit is this full heart for now and full heart and blit always needs two arguments it needs the image you want to put on the screen and then the coordinate of this image and for the coordinates we always need x and y and for my xcoordinate i want heart multiplied by 50. so the first side is going to be zero so zero times 50 is going to be zero but for the first heart this is going to be 50 because it's 1 times 50 and then we have 2 times 50 3 times 50 and so on and then we need a y coordinate and in my case i went with 45. and that's all we need for the simple hearts so if i call this method now so self.full hearts then we should be seeing some health on the screen there we go and i can press up and down and we can see the health increasing or decreasing so pretty nice so that's our first hard system and there's one improvement you could be making is that when you're placing the x coordinate you can increase this by a tiny number let's say 10 then we are going to have a little bit of space on the left side of the hearts which i think is going to look slightly better now we have the first kind of heart system the full hearts next up i want to add the full hearts and the empty hearts and for that i created another method that i call empty hearts maybe not the perfect name but doesn't matter too much and here's how this is going to look like we are still going to run the for loop but this time the for loop is going to be on our max health so 10 in our case and inside of this for loop we are going to make a check that if the point of health we are looking at this particular for loop is smaller than our health then we want to print a full heart however if the heart in the current for loop is greater than our health then we want to print an empty heart and that way we are always going to create 10 hearts but some are going to be full and some are going to be empty so let's implement it so i'm still going to start with for heart in range and this time it's going to be self.max health and now i need some slightly different logic the first thing i want to check is if this heart is smaller than self dot health and if that is the case i want to use this line again basically so let me put it down here and this time i'm going to reduce the y coordinate to 5 so it's above this line but now i also want an else statement that if this line is not the case we want to print an empty heart so i can copy this entire line again and this time i called it empty heart empty heart and with that we are done so let me try this now and we can't see it because i'm not calling the method silly mistake so self. empty hearts and now let's try it again and there we go this seems to be working quite well cool so we already have two lines of hearts that work quite well and the reason i went with this order of hearts is because if we're losing some health it looks better to have the full hearts at the top but it really doesn't matter too much but alright now we have two different ways of creating hearts and pie game and to finish this off let's create our half hearts on the screen and this is going to be the most complex way but it's not that much more complicated and i think for this one it's best to explain it while i'm actually creating it so let's go straight to it i will start by creating a new method that i call half hearts and the first thing i want to check is how many half hearts we are going to have so i'm going to create a new variable that i call half hearts total and all this is is self dot health divided by two so right now we have five health if we divide it by two we get 2.5 and this is the amount of half hearts we are going to have and besides this one line i also found it really useful to check if our last half is going to be a full heart or a half heart and how i call this variable is half heart exists and all i need for this one is half hearts total minus bind half heart's total is different from zero so let me explain what happens here we first check the half heart's total so the result of this line right now this would be 2.5 then we take the same number but turn it into an integer so the 2.5 will be turning into a 2 because pygame always rounds down the number when it creates an integer and then 2.5 minus 2 would be greater than 0. however if this half hearts would be 2 then this line would also be 2 so this one would be 0 and this entire line would then be false so if we have a half out at the end of our line this is going to be true if not this is going to be false and this is going to become important in just a bit but let's go through it step by step now we come back to our for loop that for part in range and in here we do have to think about this a little bit the first thing we have to worry about is that we want to see both the half hearts and the background for the empty hearts so we do have to use self.maxhealth just like we used in this method here so this one should be quite straightforward for now but we don't want to have to fill max health instead we want to divide this by two because each health point right now is going to be represented by half a point of health not a full one anymore so all of this has to be divided by two but now the problem is you couldn't put a number like 2.5 into a range function it always has to be an integer so we have to turn this entire thing into an integer and for the first line in here i am only going to worry about full hearts so if we have 2.5 health we have two full hearts and one half heart and i'm going to start by creating the full hearts and what i want to do in here is if the integer of our half hearts total is greater than our heart and if that is the case i want to put the hearts on the screen again so i can copy again screen.lit and i want to draw a full heart at this position and this time it is going to be 85. so when it comes down to it this entire bit is really similar to this entire bit here except for some minor changes to account for the 0.5 at the end of the number and just like before if that is not the case so else then we want to draw the empty heart and for that i can just copy this entire line again and again i have to change it to 85 so now we have the full hearts and the empty hearts but this leaves us with the half hearts and this is going to be in an l if statement and what i want to check in here is first if half hearts exists in the first place and then i also want to check if the integer of our half hearts total is equal to heart and i'm going to explain this in just a second but if all of that is the case i want to draw a half heart so i can just copy the entire line again and this time i am drawing at a half heart and it needs 85 for the y position again and this is all we needed so let's try this now and again i forgot to call the method in the update function so self dot half hearts and let's try this again now and there we go so we can see that this is working and let me go through now what happened in here so we are starting with a for loop that looks at the max health and divides it by 2 and takes the integer of the entire thing and in this for loop we start by drawing the full hearts so if we are 2.5 health this if statement would draw two health points on our screen exactly what we wanted but then we want to look at the half hearts and that is this entire l if statement and we start by checking if a half out exists in the first place but if we just had this one line we wouldn't know where the half heart needs to be and for that we have this entire line here and it effectively checks where the half heart needs to be which is right next to the full hearts and if that's the case we're just drawing a half heart and for everything else we just have this line where we are drawing empty hearts and with all of that we have full hard systems that work quite well and even nicer if we changed for example our max health to 20 then we would just update the entire thing so in your game you could very easily add more and more hearts to the entire thing and create a zeldalike health system so i hope you found this useful and i will see you around