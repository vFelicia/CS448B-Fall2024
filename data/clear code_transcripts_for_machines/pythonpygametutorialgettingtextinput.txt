hi everybody in this tutorial I'm going to show you how to create this it is a very simple text input for PI game and we can just type something in a box and we have to have the box selected to be able to type anything and if it's not selected I could be typing but nothing happens and yeah that's pretty much it getting text and PI game isn't all that difficult so it should be a pretty straightforward tutorial before we get into actual code let's talk about the logic of getting text input and to get any kind of text input you mostly have to follow the logic of just getting any kind of text and they have three major steps to it and the first step is to get a fund the second step is to use that phone to run the text on a new surface and then the final step is to use that new surface and put it on the main surface that the user sees in the end and we are going to follow this very logic but there's one addition to it that when we get to rendering the text we get input from the user from the event loop so whenever the user type something we capture it in a string and then this string is being rendered and that's really only to get basic text input so let's start with that one and before we get into this fully I have used most of the ideas in here from a tutorial by SCR X on Stack Overflow and this guy is amazing you have lots of really good explanations on basic PI game questions check out his page on Stack Overflow he has lots of really good stuff to learn to get better at game development in Python alright let's get into the actual code so here we have almost basic PI camp set up by itself this doesn't do anything because we're not rendering anything we are starting with the display surface which is 800 by 800 pixels we have our game loop all of this part and for now all we do is draw background and it's completely black so all we can see is a black background picture and to get all of the started for now let's just draw a basic piece of text the very first thing we need is a font and I'm going to call mine base font and to get this one all we need is PI game dot font font and make sure you get the capitalization right that this one here should be capital letters this one should not be and now we need two arguments the first one is the style of the font and we can just go with none so we go over the fault one and now I need the size of the text and I'm just gonna go with 32 it seems like a decent value so that's a starting point and next up we are going to be needing a basic piece of text that we actually want to render I'm going to call mine use a text and for now it's just going to be empty but later on we are going to use this string to add information into it so a bundle user presses a this one gets an A if these are present as this one gets an S but this one comes later so now we have to first start to create text let's go to the second one so in our game loop we need to render this text and this is going to happen on its own surface so I'm going to create a variable called text surface and this one is going to get PI games or render so we're taking this font and we run the text with it and the first thing we need is the text mode to render our case this is user text next up when you tell it if it's going to be anti aliased or not um I can just put that true but you could false in there it really doesn't matter and finally we need a color for the text and this has to be an RGB value and micah is i just going to go with white so 255 255 and 255 so this is the second step now we have created text but it's on its own surface so if we were to run this nothing would happen and I get an error because the problem here is that bonis base so PI game knows what to render if you run this now now we can see that we can't see anything cool but we are getting much closer so next up we need screen doublet and this is the first step to actually put all of this on the actual surface and this happens of screen doublet and now we need the surface we want to put on it and a coordinate I'm just going to put it at zero and zero and if we run this now we still can't see anything but if we now type something in here hello now we can see text up here so we are able to draw text now and we just need to figure out how to get user input so let's work on that and let me get rid of this string for now and let's work on the input and to get input we need the event loop and for now audibly check is if the game was closed which is this line here and to get input we need to add another one we need if event dot type is equal to PI game dot key down so this one just checks as any button was pressed and inside of this if statement we can use this event to check which specific button was pressed and this happens with event dot unicode so this is the information of what specific button was pressed and I want you do is to add this to this use a text so all we need to do is user text plus equals event of Unicode and if you run this game now and I can type text perfectly fine and I can just keep on going and write what's long as I want this will never stop the one thing you want to be aware of that right now if you press ENTER nothing happens it just gives us a random character also if I press backspace the same happens because neither of these are unicode characters so pi game doesn't know how to render them and if you want multiple lines and pi game it is generally going to be difficult because pi game can only render single lines at one point so if you want multiple lines you need to code this yourself but all right so this is some basic input already now let's give it the ability to delete something so that we can use our backspace and this is also quite easy and all we want that if event dot key equals eye game not Kay backspace so for this line we just check for very specific key so now we look for is the backspace key pressed and this key here and this event unicode they are somewhat different but i do similar things think of it like this this one here is to get the actual information this one is to look for a specific once this backspace is pressed what we want is to use a text but we don't want to get all the characters we only want to get all the characters minus the last one so that we effectively delete the last one and this one is really easy to do with indexing and all we need is go from 0 to minus 1 so we go from the very first character to the one before the last and we could even get rid of the 0 because Python then just assumes is going to be a 0 and if any other button was pressed so else then we just add whatever our character was pressed and if I run this now I can type test and if I press backspace that is gonna get deleted and that's pretty much it for a very basic setup to type text so if you get this for you already know how to write any text but obviously this isn't very flexible so next up we're going to put this into a box which is also quite easy because all we need to do is to create a rect and then when we render the text down here we don't run it a text at a specific coordinate instead we're running the text whatever this rectangle we created earlier happens to be so that whether we put the rectangle later on it's gonna be the same position where the text is so in this way the rectangular texts are always connected and to get that one done we first need to create a rectangle and I'm gonna combine import direct and to create a rectangle or record we just need PI games or rect and now you need a couple of variables the first one is the X and the y coordinates so I'm gonna put mine at 200 and 200 and next up we need a dimension of the rectangle and in my case I'm gonna go with 140 and 32 so the rectangle is 140 pixels wide and 32 pixels high and to give our rectangular color I'm going to find a color by itself and I'm gonna call mine for now just color and you get a color we can I've use RGB values like down here or we could use what's called pi game dot color and now we can use quite a few different names to get a specific color and the one I want to use is called light skyblue three it is a very light blue and there's a very long list online of Pi game on what colors you can use for this so now we have a rectangle but we wouldn't be able to see it we first have to draw it on the screen so let's do it and I'm gonna do it before the text and to draw this rectangle we need PI game toward draw dot rect now we need an argument on what surface to draw it on so we need to screen then we need what color to give it so I'm gonna stand up call it color and emanate the actual rectangle so import or right now we need one more variable and that's the border with which I'm going to put at two so if I run this now we get the surroundings of a rectangle and in PI game if you specify a border with this one then PI game only run as the border with if I remove this one we will get a fully drawn a rectangle just in case you're wondering I just want the outline because the content is supposed to be the text so now the problem is that we have a rectangle and when we type text they are in different positions and that's very easy to fix the only thing we need is that when we render this text we don't want to render it at position 0 0 we want to render it wherever the input erectus so we just put input rect and if I type this now is almost work so if I type the text now we are almost in the right position we just have to offset it by a few pixels and to get this one done all we need is input rect dot X and it's plus 5 pixels and then input rect dot Y also gets plus 5 pixels so basically apples here is then we put the text on the main surface we first take the x position at 5 pixels and then we take the Y position of the rectangle also at 5 pixels and if we run this now and I distract text then this is perfectly in the middle it has one more problem though that if I keep on typing a text goes outside of the box so we have to fix that one next which fortunately is also very easy to do because we can control the width of this rectangle very easily and all we need to do is get the width of the text we render and then you start to influence the width of this rectangle so below the text and I get our input rect and to influence the width we just need W so our biffed is going to be the text surface and to get to without this one we need to get underscore width and this would already get us a kind of working example so if I type text now that's called this is lit best so this is somewhat working but the box cuts off too fast so we just need to add a few more pixels that's like 10 and now we start with 10 pixels and if we now type test this is a test this one already works much better and there's one more thing we can do because when we run this at the beginning this text box is really narrow so what I want to do is that at the beginning this text box is 200 pixels wide and then when we add more text it gets wider and to get this functionality we just need to basic pipe method as called Max and Max only does one thing it picks the highest number of whatever is passed inside of it so right now we only have one argument whatever comes out of this one here but if we had a second one let's say 100 if you run this now we get a basic text box and what happens here is that when pygame looks for the width of this rectangle it looks at the max function and it sees these two values and the first one is a hundred and the segment is going to be 10 so it returns a hundred so our text box is 100 pixels wide but if we keep on writing in it then at some point the text surface is wider than 100 pixels and then this becomes the width of the rectangle so we have a reasonably working rectangle and that brings us to the last topic that what if you don't want to write in this topic so that's how you want to play outside of it and then you can press our buttons that say to move a main character so we need some kind of functionality to deselect this box which is also quite easy to do so back in our code the first way I'm going to do is add one let's say update our colors so I have a color that I'm going to talk active the one we had so far and then I'm going to add another color that I'm going to call passive so this is the color when the box is not selected and in this case I'm just gonna go with rate 15 which is a very plain gray color and then next up I'm gonna create a new color variable it then follows the activity and updates the color if the box is selected or not and for now it's gonna be color passive and then we need another variable that I'm gonna call active and by default it is false and this variable we are going to use later to check if the box is selected or not so we can only write in the box if this one is set to true and I only wanted to be true when we click into the box and if you click outside of the box it's set to false so then we couldn't write in it and the first one you to do is inside of this that this only works if active is true so if active equals true and all of this works if not it doesn't work so if you run the code now we couldn't be selecting it and we couldn't be writing nothing would happen and to get the behavior to make this actor I want to check if event dot type is equal to PI game mouse button down so this is when we make it click essentially and inside of this we want to check that when we click the button is this actually a click on the rectangle outside of it so basically checks a collision and that happens with if info direct George will like point and then event us so what happens here is then we click with the mouse we get an event and we can check the position of this event so this is giving us an X in the Y position and then we can check if these two positions are inside of the rectangle and if that is the case we want active to the group so if we run this now and we click on the box now we're able to type again and this works almost as usual the next step is to update the colors that if this is active and we go to the active color and this happens in the game loop and all I want is if active and color is going to be color active I think I called it and else color is equal to color passive don't forget up here or we can do this in a second actually for now let's try this so now we outside of it if I click on it it becomes blue I can write in it but what I forgot earlier is actually got side of it we cannot unselect it but this is very easy to add so one way back here when we check the collision that if this isn't the case else that active is back to false and this is pretty much it's now we outside of it if I click in it and I can write something if I now click outside of it it deselects it and if I type now nothing is happening and that is literally it I hope you enjoyed this tutorial and I'll see you around