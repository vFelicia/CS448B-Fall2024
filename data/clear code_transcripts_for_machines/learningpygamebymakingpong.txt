hello in this tutorial I'm going to show you how to make a pong game that looks something like this I'll be using Python and PI game for that purpose and it should be fairly straightforward because pong is quite easy after all I'll be going for all of these steps if you want to jump to specific parts let's jump right in if you are new to Python pay game is a module that doesn't come with Python but you can download it for free that is done idle with the powershell of the terminal depending on your operating system so start the one you need just like any other program and you type pip install PI game you should now be seeing a little animation where you can see things of being installed once that is done open your code editor of choice and type import PI game and if you can execute that code without an error you are good to go before we actually get into the code let's talk about how Piegan works on a conceptual level to oversimplify things a little bit every pygame code consists of two parts one part where you set up all your code you need for the game so your classes functions and variables that carry the logic of the game that is the part that works like any other code but to actually run the game you need a loop which is the second part inside of this pi and continuously cycles through a while loop updates the code and draws the resulting picture and since that happens many times per second we perceive this as a moving image for a simple example imagine you want to move a rectangle from the left to the right of the screen in the setup part you would create a rectangle and give it a starting position and a movement speed and then in the loop you would run a function to make the rectangle move to the right by the movement speed once per loop cycle with all of that established let's create a basic setup and we'll work ourselves up from there the code to create a basic window looks like this first we import PI game and sis why we need PI games should be obvious at this point since if you haven't encountered it yet it's a module to access some more functionality on your system in our case though we're only going to use it to close the game once we're done with it which happens further down here next we have two lines that are important for the general setup pygame in it initiates all the pygame modules and is required before we can run any kind of game and you always need it for any kind of PI game code after that we have a clock method that we store in the variable clock I will come back to this in a couple of minutes so keep with me for now and in the next few lines we create the actual window the important line here is PI game not displayed of set underscore mode which returns a display surface object which we store in the screen variable this method can accept a number of arguments for more advanced games but we only want to create a basic game all we pass in is a tuple with the width and a hype of the window both of which are defined in their own variables in this case I create a window that is 1280 pixels wide and 960 pixels high and the next line is purely to give the window a title I called it pong but you could put in any string you like once that is done we get to the loop which is just a simple wire loop that runs perpetually for now this loop is incredibly basic and only really checks if the user has pressed the close button at the top of the window how would that works is that on every single cycle of the loop we get a list of all the user inputs with PI games or event or get pygame calls all user interactions events so an event could be a click of a button the moving of the mouse or even just closing the window and we loop through all of those with a for loop so effectively we have a while loop that updates the game and inside of that loop we have a for loop that checks for all the user actions for now all we want to check is whether the user has clicked a little X at the top of the screen which is a certain type of event that pagan cults quit and if the event type equals PI game not quit we call two methods PI game that quit and initializes the PI game module and system exit closes the entire program all you really need to know is that both of these combined close the game reliably pagon has lots of keywords to check for different kinds of user input these are called locals and they are always capitalized I'll put a link in the description for all the options and after the input we have pi gamma dot display dot flip this methods entire purpose is to take everything that came before it in the loop and draw a picture from that well now since we haven't drawn anything yet it only draws a black screen and finally we have clock tick the same clock we defined earlier in the code it is essentially what this one does is that it limits how fast the loop runs in this case 60 times per second this is necessary because the computer will try to run the code as fast as it can so if you don't control the speed the computer might just try to run it at 10,000 cycles per second and you wouldn't be seeing anything and that's it we have created a basic setup when I run the code now we get a black window with a title so let's talk about how to draw on that to draw stuff in pygame you have to understand the hierarchy of four different concepts the most basic element is the display surface object we already created this one in the code with PI Gambler displayed at set mode and stored it in the screen variable is this going to be the main screen that we draw all our shapes on and there can be only a single one so even if you created lots of shapes and images unless they are on the display surface they would not be shown now you could draw it directly on this display surface with PI games or draw and you have the option to draw all kinds of shapes however there are two more elements that make it easier to organize and manipulate all the shapes and images the first is a regular surface or just a surface think of it like an extra layer that holds material which is quite useful to keep your game organized the difference between the display surface and a regular surface is that you can have as many regular surfaces as you like but you need to attach them explicitly to the display surface otherwise they would not be shown but besides that you can basically do the same thing with both kinds of surface like adding drawings or putting pictures on them the second element is a rectangle or a rect and that is literally what it is a rectangle what you do with this rectangle is that you can put it around shapes and regular surfaces which makes it much easier to measure them and to manipulate them as well which becomes really handy when you actually make a game and that is it for this game I won't be making any services besides the display surface I will however use rectangles for the shapes let's put all of that into code I will start by defining a rectangle for the ball this is done with pygame direct which takes in the X&Y position along with the height and the width of the rectangle keep in mind that the X and the y position is for the top left of the rectangle and also that the origin of the window itself is on the top left so if you want to go down you have to increase Y the ball itself is going to be 30 pixels wide and 30 pixels high that part is easy to place it right in the middle of the screen we do need a little bit of math though I couldn't just put it at half of the screens width and half of the screens hype because I am moving the top left and if I placed it like that it would be slightly off the center but that can be fixed by subtracting half of the width and half of the hype of the ball itself and if we do that the ball is perfectly centered next I define a rectangle for the player that I put in the middle of the right side that is 10 pixels wide and 140 pixels high and a place it's top left on the coordinates screen with minus 20 and I get height with the same method that I get the height of the ball I divide the height of the screen by 2 and I subtract half of the players length from that and then I define another variable for the opponent that holds a rectangle at the coordinates 10 and the same height as the player and it would also be 10 pixels wide and 140 pixels high for now these are just free empty rectangles to actually draw them we need to get the loop and use pygame dot draw which is the module with all the different options to draw shapes to use that one we usually three arguments the service to draw on a color argument and a rectangle since I'm drawing directly on the display surface that one is easy and I also have two rectangles I need so let's talk about colors then there are two ways to create colors and pygame the most common one is with a tuple of RGB values RGB stands for red green and blue and you can set the value of each of these colors and if you mix the different values of each of these colors you can create basically any color essentially we have a tuple that we can pass breve values into the first one for red just like one for green and the third one for blue and you can choose the values from 0 to 255 with 0 being the absence of the color and 255 being the pure color so for pure red it would be 255 0 and 0 for pure black it would be 0 0 0 and for pure white it would be 255 255 and 255 the other way to create colors and pygame is with a color object this one is created with the command pygame code color and you pass in the string of the name of a color you can find all of the available color names online and that's basically it for this one let me use both methods so you guys have an idea of how it looks in the code I will make the background with a color object and use an RGB tuple to make a greyish white that I will use for all the other shapes so below the rectangles I declare a variable BG underscore color and assign it pygame blood color and pass in the string gray 12 and on the next line I create another variable called light gray and I assign it a tube of 200 200 and 200 which gives us a light gray with all of that done we can get into the actual drawing in the loop I start by drawing the two players since both are plain rectangles pygame the draw the direct fits really well I passed on the surface to draw on the light gray color and the rectangle and then I do the same thing for the opponent next is the ball this we draw with pygame the draw the ellipse which also takes a surface a color and a rectangle but instead of filling the whole rectangle it uses its frame to draw an ellipse into it and since all our sides are the same length this ellipse becomes a circle and that covers all the main shapes but I will add two more elements that don't need a rectangle the line that separates the two sides of the field and the background color especially the background color is important because without it you would still be able to see the previous frame which would make the game impossible so I add the background color by filling the entire display surface this is done by calling dot fill on the variable that holds the surface screen in this case and into that I passed the color I want to use BG and ESCO color in this case and finally I create a line that separates the two sides this will be done with pygame the draw lat a a line which stands for anti aliased line this one needs four arguments its service to draw on the color and the tip of the start point and a tuba with the end point so I pass in the screen light gray for the color the first tuple will be half of the screens with and zero for the middle of the table window the second tuple will be half of the screen Swift and the screen height for the middle of the bottom of the window and one thing to pay attention to is the order of the code successive elements in the loop are drawn on top of each other so the first element called in the code will be at the bottom of the frame and the last one will be on the top if I put screen note fill below the other elements we would only see the background so do be careful with that but if I run the proper code now we can see that all the basic shapes are there and with that one done we can get to the animations I will start with the ball right now the code works like this we define a rectangle with coordinates and dimensions and later we draw a rectangle on the surface with a color the way we do animations is that we add a step in between that tells pygame to move the coordinates by number of pixels every cycle in the loop and for that purpose the rectangles are incredibly useful essentially in and around each rectangle there are these points that we can influence and measure and if we move a single point we move the entire rectangle so for example if I wanted to move this rectangle to the right by 5 pixels I could use x + equals 5 or right plus equals 5 or even left plus equals 5 they would all achieve the same result and that result would be that on every cycle this rectangle would move to the right by 5 pixels so to get the ball moving I start by defining two speed variables one for horizontal speed and one for the vertical speed respectively called ball speed X and ball speed Y and I set both to seven Y we need to will become clear in just a second now in the loop we want the ball to move every frame by the ball speed we defined earlier that is super easily done with ball dot X plus equals ball speed X and bolded y plus equals post lead Y so on every single cycle this ball will be moved by the speed we defined in the speed variables and since we're doing this 60 times a second we get a moving image let's run the code now and see how this looks we can see that we have a moving ball but the problem is that the ball moves out of the frame since we never told it to stop for that we need some collisions just to get this started and we let the ball bounce around the four sides of the screen and later we had more code when the ball hits left or the right side the basic logic we need is something like this if the top of the ball is zero the bottom of the ball is equal to the height of the screen then reverse the vertical ball scale and if the left side of the ball is zero or if the right side of the ball is equal to the screen width then reverse the horizontal ball speed and the reason we have to speed variables is to be able to reverse the speed for each axis separately and since we can access all of those attributes this is actually a really simple if statement to reverse the ball speed all we need is to multiply the speed by negative one and since we don't care if this goes from positive to negative or from negative to positive we only need one if statement for each axis and when I execute the code now we have a bouncing ball one thing to be careful of is that you shouldn't use the equal comparison as you can see in my if statement I use greater or equal or smaller or equal the reason for that is that we need to be careful of what points we are measuring if the ball moves seven pixels per cycle and it happens to be at the position 955 and then it would move to 962 in the next frame since that wouldn't be equal to the height of the screen the ball would just continue and we would have a gamebreaking bug if we use greater or equal to then this problem wouldn't a cure at all so this is why I'm using greater and equal or smaller and equal to but anyway I also want the ball to collide with the twoplayer rectangles and directs are great for that as well because they have lots of methods to measure collisions we only need the simplest one but we just check if two rectangles are colliding the method for that is called collide rect and you call it on one rectangle and pass in the other rectangle and if they collide it returns true and with that all we need is an if statement with two conditions so if ball dot collide rect player or ball dog collide direct opponent and inside of that we just tell the ball to reverse the horizontal speed just like we did for when it hits the left or the right side of the screen and with that we have all the collisions we need I will do some housekeeping before continuing adding too much logic in the loop is going to become quite confusing and also difficult to maintain and it is usually better to keep all the logic in the set apart and used to loop primarily to draw and update the shapes so to make things a little cleaner I will put the ball movement inside of a function and call that function where the code used to be and I will call it ball animation and put it at the top of the code however if I run the code now we get an error message about some local variables this can be fixed by including global ball speed X ball speed Y at the top of the function and let me add a small intermission to explain why this is necessary in most programming languages including Python it is really important where a variable is declared in Python you have two major spaces also called scopes the global and the local scope if you declare a variable inside of a function you create a local variable that isn't available in the global scope this applies even if a variable of the same name already exists in the global scope so when we try to update the ball speed we try to update a local variable that Python did not yet initiate so it threw an error there are a couple of ways to get around that one way like I did in the code is to declare global variables inside of the function unfortunately this is only a good solution in simple programs if you attempt this approach in more complex code you will end up with adding more and more names to the global namespace and make things quite confusing a better way would be to use either return statement or to use a class especially if you use a class in the global namespace then its attributes can be updated within the local scope as a matter of fact when we move the ball who did just that hope that clarifies things a little bit back to the game now next up is the input there's one input command already that you can close the program by clicking on the little X at the top I will expand this and what I want is that by clicking the up and down arrow it moves the player in those direction this requires to check two events actually first that a button is pressed down to start the movement and second that a button is not pressed anymore and that the movement should stop pygame can handle both of these easily we just need to check the event type for pi game key down and PI game key up I will start with key down which is for pressing a button down but this one only checks if any key on the keyboard has been pressed down to check for a specific key need another if statement inside of this if statement that checks for event key and the down arrow is called K unless code down in PI game and inside of this if statement we can add code to execute when the down key has been pressed you might be tempted to just add something like player dot y plus equals 7 but that would not work you see PI gam only checks if the button changes to state from unpressed to pressed so if you keep it pushed down it will not trigger the event you would need to continuously press the button to move in tiny steps which would not be fun at all there are a couple of ways to solve this the one I found the best is the following you declare a variable player underscore speed and at this speed to the player rectangle on every single cycle of the loop regardless of what button is pressed that being said if no button is pressed this variable is zero so the player effectively doesn't move however when the up or down key is pressed this variable becomes positive or negative and then the player will move so let's put that into code I first declare the variable player underscore speed and assign it to value zero so back in the loop I have player dot y plus equals player speed now to the input back in the event key if statement I change player and ESCO speed to plus equals seven and at a second if statement checks if event key equals K and let's go up for the UP button if this one triggers the player speed should be minus equals seven and after all of that I add the if statement for releasing the button I can just copy the entire statement from key down actually all I need to change is that we reverse the operation I change key down to key up so negative 7 becomes plus 7 + + 7 becomes negative 7 and with that we're done if I run the code now we can move the player but there's one small problem the player can move outside of the window which is a little bit annoying so let's fix it all the logic I need is that if the players top is more than 0 to put a player's top at the location 0 and if the players bottom is greater than this Green's hype then you put the bottom at this green side that way the player will always be placed back at the border if it tries to go over it we basically teleport him by such small numbers that it looks like that there's no movement at all and again this starts to look a bit messy so I put all these lines into a function like Hall player underscore animation and no need to declare global variables all of this should still work perfectly fine and with the player input animation we almost have a game but we still need an opponent I will keep this one simple if the opponent's top is above the center of the ball move the opponent down and if the bottom of the opponent is below the center of the ball move the opponent up and the speed of the opponent will be used to determine the difficulty it's pretty simple actually in the code I declare a variable called opponent underscore speed and I set it to seven and in the loop I add if opponent or top is smaller equal than balls at Y then opponent or top plus equal opponent speed and if opponent at bottom is greater or equal than ball at Y then the opponent of Y equal opponent speed I also want to prevent the opponent from leaving the screen so I implement the same logic that I use for the play at just a second ago and again I put all of that logic into a function and call the function and the main loop running on off that basically gives us a working game it's not much because nobody can lose so let's finish the game of that one I really want is that once the ball hits over the left or the right wall I wanted to return to the center and restart in a random direction we already have code that checks whether the ball hits the left or the right side it's in the ball movement function within that I removed the line that reverses the speed of the ball and replace it with a function I called ball and let's go restart and further down the code I create that function and add the details the first thing we need is to teleport the ball to the center this is actually quite easy we did similar things already loads of times you see for now we only ever added small increments to a number by using plus equal or minus equal but we don't need to use that we could just assign a number immediately and teleport the ball or out exactly what I want to do here so on the first line of the function I add ball but Center equals screen worth divided by two and screen height divided by two note that this one needs a tuple and that we move to center of the ball not the top left like we did in the beginning which makes the math a little bit easier and running that code already gets us kind of a working game but the bog keeps the same direction after a goal was scored to fix that I need to random module so at the top of the code it is import random and back in the function after the ball was centered at a vertical ball speed and type multiplied equal randomly choice and insert a tube of positive and negative one and after that I did the same thing for the horizontal speed Brennan the choice selects a random element from a list that is passed into it basically after the ball is teleported to the center each speed variable is multiplied with 1 or minus 1 does randomize in the direction the one thing we need though is to clear both speeds as global variables don't forget that and while we add it I can also multiply both speeds when they initially set with positive or negative 1 so that the ball starts in a random direction at the beginning of the game that being done we can run the game and we have really basic pong game and granted it's pretty basic and you could add lots of things like a timer before the boat starts or score and some sounds might be a good idea as well but it is a working game to get things started so I hope you like this tutorial you can download the source code from the links in description and if you want me to explain how to add these parts as well just let me know in the comments otherwise for next week I'll be showing you how to make a calculator in Python I'll see you then