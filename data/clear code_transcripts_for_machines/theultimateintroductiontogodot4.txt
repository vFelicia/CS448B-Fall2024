thank you in this video you will learn the fundamentals of the Godot gaming engine we will start with the program setup and its key Concepts from there we will cover a broad range of topics like Tire Maps animation players lights particle effects shaders and user interfaces we will also cover more advanced topics like skeleton animations and pathfinding if none of these words mean anything to you don't worry I'm going to explain everything from scratch either way by the end of the video you should have a strong understanding of how to create basically any 2D game in Godot and you will also have a really good foundation to start with 3D games before we begin a huge shout out to the sponsor of this video not pass business when making a game you will end up with a lot of data and backing all of that up is a nightmare you want to access your data from anywhere from any operating system it should be convenient and it should be secure both from hackers and from your house burning down especially security is a major concern having my accounts hacked would be a disaster for me and if it can happen to a large organization like city project red or Linus Tech tips it could happen to me it could happen to you or it could happen to your company not past business is an excellent solution for all of that it safely stores your passport in one accessible location and even enters your login credentials for you this makes it super easy to save your game projects both on GitHub and Google Drive and have access to them everywhere in the world it even lets you identify weak passwords and it checks if any of your existing passwords has been leaked online on top of that you can also set up biometric identification and use multifactor authentification notepass business also works with unlimited passports including WiFi credentials and credit cards so even for things Beyond work it can be incredibly useful if you want to sleep peacefully at night and not worry about your passwords check out notepass business in the description and the link comment if you go to notepass.com clearcode you will get a free month of trial for an amazing password manager and also help me make more videos so definitely check it out all right let's get started first of all what is Kudo and how does it help you make a game Fido is a game engine which means it is an app that lets you display images play sounds capture user input and stuff like that the dough can do even more advanced things like physics calculations pathfinding skeleton animations and networking for multiplayer games all you have to do is to combine the various Concepts and then create your game this could either be a 2d or a 3D game Godot supports both other game engines you may have heard of are unity and unreal there are hundreds of engines But ultimately they all do basically the same thing one major advantage of Godot is that it is entirely free and Community developed you never have to pay for anything you don't have to sign away your soul in some legal text you don't even have to create an account all you have to do is go to godotengine.com and click on download latest then you can select a version that fits your operating system although Godot will likely detect the right version for you on the website so just click on Godot engine and you should be good with that you are downloading a zip file and if you extract that you get two files one is Godot itself the other would open a console you can use the latter one for debugging but I would just ignore it so I'll just click on Godot and you get the launcher in the main panel you would see the projects you have created in the past at the moment it is empty though since we haven't done that yet on the right you can create a new project or import an existing one I want to create a new project that will open the dialog where you can specify a project name and a folder I will call the project shooter and for the folder I click on browse it opens documents by default and you want to create a folder in there while making the game we're going to create a lot of files and you want to keep things organized we can aimed for the shooter as well and then select current folder after that you have to choose a renderer this will determine how Godot renders your game when it is run mobile is the default and it works for desktop and mobile games the name is slightly misleading this mode can also display 3D Graphics but it's a bit more limited for a 2d game though this is perfectly fine forward plus is for really pretty 3D games and compatibility is useful if you want to support really old devices or make browser games now for the purposes of this tutorial it doesn't matter which one you choose the dough is going to be of the same no matter what you choose and also later on you can change your selection for the purposes of this tutorial I will go with mobile but you can choose whatever you want it really does not matter you can also use Version Control but I'm going to ignore that one that finishes the setup now click on Create and edit this should open the editor to understand what you see we need to cover the most fundamental concepts of Godot notes and scenes nodes are the most basic building blocks a node could be an image a sound it could also be a timer a path a skeleton an area or a lot of other things there are hundreds of nodes and you basically combine them to create various parts of your game for example here is a simple Scout anime that we are going to create on the left you can see the nodes that create this character Sprite 2D is just an image and this one contains the actual image of the scout there's also an attack area we have two timers and a sound a place when the Scout was hit there are a couple more notes but don't worry about those for now the only thing that is important is that the Scout is consisting of multiple nodes Each of which does a particular thing like displaying an image or playing a sound or an area where we can check if another object has entered on top of that all of these nodes have properties that you can manipulate you can see all of that in the inspector on the right for example with the Sprite to deselected I could go to transform and then change the position the scale and the rotation we will use all of that in a lot of detail later on and that is basically all you have to know for the basics of notes the other important concept is a scene in this one there's two major things number one it organizes nodes and number two it displays them you can think of it as a canvas and a folder basically the main panel you see is the currently open scene this can either be 2D or a 3D and it displays the notes that you put inside of it meaning it contains and it organizes the nodes and it displays them what is really important to understand as well is that you can place a scene inside of another scene that way you combine notes into logical objects for example here we have to scout again and in the middle of the editor the big panel is the Scout scene besides that we can have other scenes for example I have a larger level called outside this is another scene that gets significantly more complex although if you zoom in you can see that we have multiple instances of the Scout scene in the outside level scene there is a lot more going on in here but don't worry about that I will go for all of that in a lot of detail later on for now all you really have to understand is that notes are d basic building blocks and you place these notes in scenes to organize them on top of that scenes can be placed in other scenes to organize the entire game a bit better that's basically it and it covers the majority of godot's UI so just as a recap we have the currently open scene in the center then on the left we have all of the notes inside of that scene and on the right you have the inspector for the properties of the nodes the last major part is the file system you can see that in the bottom left this displays your files and you can also use it to import other assets I actually want to do that if you look at the video description you will find a link to the resources that will lead you to a page where you can download the full game and the resources which is what I want to do so I want to download the zip file once you have finished the download you want to go back to Godot and there is the file which I want to extract also on downloads this is going to take a second then you have the folder in there you want to go to resources and there you have graphics and audio to import them you just have to drag the file into Godot like so thank you is going to import for a second and then you have all of the art assets so in there we have a ton of stuff at this point you could also import the audio folder although I am going to do that much later because for now we don't really need it finally at the top you can see a few more options although those aren't too important for now except for one by default Godot has a bluish tint which I find really distracting to change it go to editor and then editor settings this opens a new dialog where you can update the theme I will be using the gray theme which is much more neutral this only changes the color though if you like the default or want other changes just select what you like that makes the editor much more pleasing to look at now that we have covered the basics I want to actually create a couple of scenes and nodes specifically I want to create two scenes and a bunch of notes most importantly I want to create a level scene for now this one is only going to contain some images simply because that's the easiest thing to add besides that I also want to create a player scene this one also is just going to be a single picture for now finally the last thing I want to do is to put the player scene inside of the level scene that way we can add a lot of stuff later on to the player but still see the player itself inside of the level makes the organization much better but for all of this let's actually create some basic things in Godot here we are back in the editor and since I want to create a 2d game I want to work in a 2d workspace we can select the different workspaces at the top I want to work inside of 2D and now we can see a 2d workspace let me zoom out a tiny bit all of the gray area that you can see is the workspace although what you want to be aware of is that there is a blue rectangle it's kind of hard to see on video but if you have go to open this one is quite easy to see this blue area is what's going to be visible to the player this will effectively become the game window in just a bit or well it already is but this part is going to be visible all of the stuff you can see right now is a scene this scene at the moment doesn't have a name which means at the tab on top you can see empty to give this scene a name you have to save it something we are going to do in just a second but right now we can't because in order to save a scene we need to have some notes inside the notes we can get from the panel on the left we can choose to create a 2d scene a 3D scene a user interface or other node if I click on other node you can see all of the available nodes inside of Godot and there are quite a few for example inside of node 2D I can expand everything and see all of the available nodes now I will cover most of them throughout this tutorial but for now all of this is going to get way too advanced so I'm going to click on cancel instead I simply want to create a 2d scene this is going to create one node in node 2D this would be one of the simplest notes you can create in Godot effectively it is literally just a point in a 2d space you can actually see it already if you look at the canvas there's this Red Dot and if I hover over it you can see node 2D but this is literally what it is it's just well a Red Dot I can illustrate this a bit more because if you look on the right we have transform then we can set the position the rotation the scale and the skew of this point rotation is going to be really easy to see if I rotate the point we get a rotated Point although the player wouldn't see any of this this point is only visible in the editor and you might be asking how is this helping for a game and the answer is not very much at least in terms of visibility in no 2D largely is used for organization so you would add other nodes as children to this node 2D to organize your game as a matter of fact I want to rename this node 2D right away I think level is going to be a much better name now that we have that we have one scene with one note inside of it and this scene I now want to save this I can do either with Ctrl or command s or by going to scene and save scene at the moment we only have the graphics folder we imported earlier besides that I want to create another folder that I'm going to call scenes all in lowercase letters inside of this scenes folder I want to create another folder I call this one levels simply because later on we are going to have multiple of them inside of this levels folder I am going to save this scene and you can already tell that we have level.tscn Godot always chooses the name of the first node of the scene which means in my case the first note that we added to the sinus code level and this is going to be the name that we get by default and this is the one you probably want to use as well so I want to save that and now we have some minor changes the most important change is that we now have a tab called level this is the scene inside of this scene we have one note in node 2D called level this node 2D doesn't do very much right now it is literally just this point we're going to do something more useful in just a bit besides that we also have a new folder in our file system we have scenes that we have levels and then we have level.tscn although let me minimize all of this because we don't need it right now not if we have a basic setup I want to add a picture to this scene for that I will need another node to add another node I have to go either to this plus symbol or press Ctrl or command and a in either case you are going to find this dialog again inside of it you can simply select any kind of node like multiplayer spawner but this is not what I want so let me undo all of this with controller command Z instead I want to look for a specific node and since there are so many most of the time when you add new nodes you're using the search function I want to look for a Sprite or more specifically a Sprite 2D this is a node that can display an image so if I double click on it we have now added another node and before I continue something you do want to pay attention to is we have our level node this is the parent and this parent has a child which is the Sprite 2D this parentchild relationship is really important I'll cover more of it in just a bit but now just keep in mind we have a parent and a child and the parent influences the child that being said we still cannot see any kind of image inside of the scene for that we have to look on the right because there we have the inspector we still can transform the image so like with no 2D we have position rotation scale and skew but we don't care about any of them instead what we care about are the additional options we have texture offset animation and region texture is what we have to add to get a picture and if you click on the drop down you can add a whole bunch of stuff although I don't care about that because there's an easier way to add an image all you have to do is look at the file system for example in there I have icon.svg this you have an every Godot project by default and this image I simply want to drag into the texture and you can see there's this blue frame around the field so if I drop it in there we now have an image this is the Godot logo and we can see it because we have a Sprite 2D this image we can now influence for example I can simply drag it with my mouse and move it around and let me zoom out a tiny bit so I can see the entire game window I can simply move this image around and place it in a certain position besides that if you look at the inspector we have a few more things there's offset and then there for example we could use flip age that's not visible but you can use flip V for flip vertical you can also give it an offset but I don't really care about any of these options besides that we have an animation but that's a tiny bit more advanced so I'm going to ignore it and we have a region if you enable that the image disappears however what you can also do is edit region then you get another dialog and then here you can select one region of the image so let me just cut out a part of it and then click on close and now you can see some slightly weird Behavior don't worry about this too much because later on we're going to work with this in more detail and fix these weird artifacts for now I am simply going to disable the region and then we are back to the basic image finally you can use transform and we could update the position we can change the rotation we could scale all of this or we could skew it like so and you can also see inside of the inspector whenever we change the default value you can reset it by clicking on the return arrow thingy there we go with that we have added one image before we continue There are two important Concepts that I want to cover the first one is the coordinate system of the window that we are working in right now the window has a position the one you can see inside of the inspector we have X of 629 and Y of 303 this means that we are 629 pixel from the left and we are 303 pixels from the top the point we're talking about is the center of the note by the way this position can be a bit confusing basically what is happening is that we are creating a coordinate system with the origin point in the top left this point would be 0 for x and 0 for y if you want to place any element further to the right you have to increase X however if you want to move an element down you also have to increase y if you are used to coordinate systems from high school where the origin point is in the bottom left this might be a bit confusing because what you have learned is that if you want to go to the right you have to increase X and if you want to go up you have to increase y inside of Godot and most game engines Y is going to be inverted meaning if you want to go up you have to decrease y if you want to go down you have to increase y most game engines in fact most computer Graphics work like that so you kind of have to get used to it it will take you some time but eventually this will become natural and just to demonstrate let's move around this image a bit right now the X position is 629 if I change this to 500 we are moving a bit to the left if I change the Y part to 200 so we are going from 300 to 200 and I click enter we are moving up we have decreased Y and because of that we have moved up this was the first important concept now we have a coordinate system that we can work in besides that we have to talk about the relationship between the level and the Sprite 2D ever right now is the parent which effectively means if you're changing the level you would also affect the Sprite 2D image for example if I change the rotation of the level we are also rotating the image let me zoom out a tiny bit if I rotate this level we are rotating all of its children however if I simply click on spriter D and rotate this one we are only rotating the image itself this would also work with other properties for example if I click on level again I can change the position to 200 and 300 and now the level node is on this position and relative to that we have the Sprite Which means inside of the Sprite if I change the position back to 0 and 0 we are at the point of the level 2D node the interaction between any of these nodes is super important to understand we always have a parent and a child and whatever happens to the parent is also going to be applied to the child and whenever we are transforming the parent we are also transforming the child which means whenever we are changing average position the rotation the scale or the skew of the parent we also influence the child this by the way would also work with multiple nodes so if I have level selected I can click on the plus again and you can see on the left side we have recent notes that we worked with I want to add another Sprite to D now we have a second Sprite and this one right now is invisible because there's no texture to give it one and for this one I want to use a different image so let's say inside of Graphics there we have a car and we have main this is the main part of the car this I now want to drag into the texture and there we can see we can now see a car this car we can also move around let me place it roughly here now if I select the level again I can rotate and now I am rotating both the image of Godot and the car what I can also do and let me rename these Sprite to these so to be clear what they do if I double click on the first Sprite 2D this one is going to be let's call it logo the second Sprite to D is going to be the car what I can now do is Select this car and drag it on top of the logo image what this one is doing is it turns the car into the child of the logo and this means whatever transform we apply to the logo will also be applied to the car so if I now change the rotation of the logo for example we would also rotate the car the same would apply to scale or to skew we always get multiple transformations and of course level would still apply to all of the children so logo and car would both be affected let me demonstrate by using rotation again we are still rotating the car I hope this relationship makes sense you basically always want to be aware of the parent node and then whatever children there are their relationships and how they influence each other is something really important to understand in good though so this is something you absolutely want to practice as a matter of fact let's practice this right away I want you guys to create another scene this scene is going to have one parent note which is going to be the player this is going to be a node 2D this note 2D is going to have a child which is going to be a Sprite and the Sprite should be the player image you can find it inside of the file system and finally for good practice I want you guys to add another Sprite to the player and this is going to be a laser pause the video now and try to figure this one out to create a new scene I should have covered that sorry about that but to create a new scene all you have to do is click on this little plus icon now we get another scene and I want to create another 2D scene and this I want to rename to player let's save all of that right away with Ctrl s and I want to go one folder up so I click on the upwards pointing arrow and now I'm back in my scenes folder in here I want to create another folder that I'm going to call layer inside of the player I want to save the scene as player.tscn there we go now we have another scene although inside of it we can't see anything because we don't have any kind of image for that with the player selected I want to click on the plus icon and add another Sprite 2D I can select this from the recent tab now for this spriter D I want to minimize the car folder and instead look at the player folder inside of Graphics there we have player.png and this I want to drag on the texture and there we go we have the player on top of that I want to add another Sprite so now with the Sprite 2D selected actually let me rename it to player image with this selected I want to click on Ctrl a or the plus icon and add another Sprite this Sprite is going to be the laser so let's rename it to laser image the laser image if I minimize the player folder we are getting from projectiles and there we have a file called blue.png this I want to drag on the texture and there we go we have the laser what we can now do is arrange the laser in such a way that it looks a bit better something like this later on we're going to spawn these lasers dynamically so we're going to delete this anyway the position doesn't matter so much I just wanted you guys to practice placing notes inside of a scene and alright with that we have two scenes we have a player and we have a level and while we're here I want to change the node 2D level with the position back to 0 and 0. that just feels a bit cleaner also I want to reset the rotation and then I can move this Sprite and the car so that they are somewhat visible now we have a couple of scenes next up what I want to cover is how can we put one scene inside of another scene specifically what I want to do is to place this player inside of the level and for that we have this symbol it looks like a chain if you hover over it it says instantiate child scene you can also get this with Ctrl shift and a if I click on that we get all of the scenes available in the game and I want to get my player.tscn if I click on open we simply get another node inside of our game and this is very hard to see but on top of the car we now have the player I can move him around actually essentially what happened I had the car selected and on this car I added another scene and the scene we have gotten from what we created earlier the player and since I had a car selected this scene became a child of the car which is not exactly what I want so I'm going to click on the player and simply drag it on the level that way we have the logo with the cars the child and then as a peer we have the player if we are changing the logo or the car it's not going to affect the player because the player is not a child of the logo or the car but it is a child of the level to really understand how important this system is let me make a change to the player so right now we have a player with a Sprite and another Sprite if however I add another kind of sprite let me with the player selected click Ctrl a and add another Sprite I want to add the grenade I can add to it texture and move it let's say roughly here and also it's quite large so I want to change the scale to 0.2 what is really important to understand now is whatever change we are making to this scene will show up inside of the level so now you can see we have the grenade we cannot select it from this level scene but inside of the playup we could make updates to it with that system you essentially can isolate the player and all of the code for the player could be in here and then the level is going to be separate from all of that later on this kind of system will become incredibly important to organize your game you will essentially have increasingly complex scenes and you place them inside of other scenes I think when you are getting started in Godot this can be a tiny bit overwhelming so I would very much recommend just play around with the notes and the scenes to make sure you understand what you are doing as a matter of fact let's do an exercise I want you guys to create another scene that scene is going to be for a bad once again the parent node is going to be a node 2D this note 2D is going to get one child which is going to be a Sprite of a bet you can find the images for that inside of graphics and objects on top of that I want you guys to add a few more images for the pillows on top of the bed and just arrange them in such a way that they look decently okay once you have all of that create an instance of the bed inside of the level so we can see it next to the player and the car pause the video now and try to figure this one out back in Godot I want to create another scene for that I click on the Plus or I can use Ctrl or command and n now we have an empty scene and once again I'm going to create a 2d scene this I want to rename right away to that I also want to save the scene let's go up one folder and let's create another folder I suppose we could name this objects inside of objects I want to have bad dot tscn now I can click on Save and there we have our bad scene the bet is going to be once again a couple of Sprites so I want to add a Sprite 2D and to find the image for the Sprite 2D I want to look at objects and in depth we have bad.png this I want to drag on the texture and there we have a pad besides that I also want to add a couple of pillows so with the pad selected I want to add another Sprite and this Sprite is going to be the pillow let me rename everything actually so we have the pillow and we have the bed for the pillow we don't have a texture yet although this one we can also find inside of the objects you have to scroll down a tiny bit there we have Pillow large and pillow small let's add a pillow large for now there we have the pillow large and this I want to move around a bit I can also use transform to give it a touch of a rotation you could also change the scale let's make it a bit smaller and we could skew it like so just make whatever changes you like in here whatever looks good now besides that I want to add another pillow which means with the bed selected I want to add another Sprite 2D and this one is going to be for the small pillow so I'd rack pillow small in there and this I can drag I don't know let's say somewhere here just to keep the naming consistent let me rename this one as well let's call it pillow small and with that we have the bat now we have to figure out how to get this bad scene into the level scene and for that I want to have the node 2D level selected and add another scene by clicking on the Chain icon and now we have another scene we can add which is the bad so if I now click on open we have the bad I can move it around like any other object and this is looking really good before we finish there are two things I want to cover the first one is the naming convention in Godot you might have already seen some minor bits of that when I created the bat I named the small pillow pillow small with no separation and each word started with a capital letter this is called Pascal case and that is what you use for basically any kind of node meaning there's no space between the words and every word starts with a capital letter however for everything else in godob you basically always use snake case which means everything is lowercase and if there's a space use an underscore Godot does this automatically actually so when I'm saving any of the scenes they are always written with lowercase letters so we have bad on lowercase letters player and lowercase letters level and lowercase letters and so on you don't have to follow this convention but it would be a good idea to do so and number two you have to be aware of the drawing order so for example right now the bed is on top of the player I hope that's quite easy to see if we move the bed of the player you can't see the player anymore that is because the bad note was added after the player node if I move those two nodes around so I click on the player and move it all the way to the bottom now we have the player on top of the bed basically what is going to happen is that you have a hierarchy that goes from the top to the bottom or rather from the root outwards which means level is all the way at the bottom then we would have the logo then we would have the bad and then we would have the player if a note is further down than another node this node will be drawn on top of the other node you can make some changes to this behavior and we will cover that later on but for now just keep in mind the order of these notes is quite important so when you are placing all of these notes you want to be aware of two things level one is the parentchild relationship so what note is part of what other node besides that you also want to keep an eye on the order so if a node is below another node it means it is drawn on top of that node in the actual game now before I finish this video the last thing I want to do is to actually play the game obviously right now nothing is going to happen but I do want to create a basic window so we can see something that the player would see for that you want to look at the top right there we have a play symbol or run project if I click on that the door is telling me that no main scene has been selected yet I can click on select cancel and select current when we are starting the game Google wants to have a starting scene in my case I do want to start with the level scene which means I want to click on select current and now we can see an actual window of the game it doesn't do anything right now but at the very least we can see something now that we have covered the basics of notes and scenes we have to come to the next major topic which is coding which in turn is what you're going to use for all of the interactivity inside of your game meaning if you ever want to rotate move or scale literally any object inside of the game you would need to add some code let's talk about it and there are two major issues we have to address number one is how to code in Godot and number two is how to influence notes and scenes I'm going to cover both of these points somewhat combined although I will start with the first question let's start with that one actually Godot can support multiple languages the most common and default one is 3D script besides that though you could also use something like C plus or C sharp and a host of other languages that being said GD script is the default language and also the most popular one as a consequence that's also the one I am going to use and GD script is most similar to Python and the most similar in here is a bit deceptive you could almost cross it out and simply say gdscript is python because the two languages are incredibly similar although that being said if you know any programming language you should have no problem picking it up let me go over the major differences between GD script and python at least for the purposes of this video in terms of data types we have all of the common ones we have integers floats booleans strings and dictionaries there are no tuples and lists have been replaced by arrays although in practice you are not going to notice much of a difference number two variables there are two types of variables in Godot we have normal variables and then constants in normal variable is well a normal python variable you are declaring this one with a VAR keyboard and then a variable name and then you can assign any kind of value you also have constants those are variables that are not allowed to change so whatever value you assign to it when you create it this is the final value it cannot be changed just like in Python once you declare a variable you can assign any new value to it for example if you don't want to have an integer like this 200 you could assign for example a string let's say string like so changing the data type dynamically is perfectly fine that being said though what you can see further down here you can tell a variable to only work with a specific kind of data for example the variable a string as a colon and then the string keyword this tells godo that this variable can only accept a string nothing else the same would also work with integers and booleans and all of the other data types as well on top of that if you are creating an array like I'm doing down here you can also tell gdscript to have specific kind of data types inside of this array in this case we have an array with integers which means we have an array and this one has one two three and four simple integers next up we have functions and functions work basically like in Python the major difference is that now you don't use the defined keyword instead you use func after that you are still specifying a function name and then you can declare parameters on top of that you can also tell the parameters to have a certain kind of data type in this case integers and strings besides that you can also specify a return value for this function which for this function would be a Boolean if you do not specify a return value what is going to be returned will be void which is essentially the absence of a value finally just like in Python if you want to assign a specific line of code to a function you would use indentation so in this example this annotation tells us that the return statement belongs to the function once again if you know python all of this should be really straightforward next up we have flow so how we can control the flow of your code and for that one we have if statements we have while Loops we have for Loops along with comparison operators so greater than smaller than greater equal than all of these are there you also have continue and break those are the major differences if you got so far and you know basic python you should have a good grasp on GD script that being said there's one really important topic I do have to address losses the way you have to think about it is that whenever you create a script you always have to add it to a node and nodes are simply classes with default methods and attributes which means if we want to create a script we would have to for example add it to a node 2D and this creates a new object this object would then have a position a rotation a scale and all of the properties and methods in node 2D would have this we can then use to overwrite these default values for example if we change the position we will place the node to D in a new position I'm going to add lots of examples on this later on for now just keep in mind that whenever you create a script you add it to a node and the node is a class with properties and methods now before I jump into Godot there are two more rather minor things I want to cover number one there are lots of inbuilt functions that you will use they all start with an underscore for example we have underscore ready and this is run when a node is added to the tree which basically means we're running this when the node is ready besides that we have process and this is run on every frame of the game there are a few more but those two are the most important ones besides that you can also Target other nodes from your node this can be done in two ways you could either use get node which is a function and this is going to return a node it wants one argument which is a string of the notepad this isn't used very often because the alternative looks like this you have a dollar sign with the notepad this does the same thing but is much more concise which is why you're seeing this significantly more often all right with that we have covered a whole bunch of theory let's actually jump into Godot and let's play around with all of this here we are back in the scene we created earlier and right now it's quite messy so I want to clean things up a bit I want to get rid of the player so I'm just selecting it and then click on delete is going to ask me if I want to delete the player node and I do want to do that I also want to get rid of the bad so delete a and I also want to get rid of the car now besides clicking on the lead on your keyboard you can also right click and somewhere in there we have delete all the way at the bottom this is going to leave us only with the logo as the only node inside of the scene for now I want to return all of the values to that default state so rotation should be 0 and position should also be zero and zero with that we have a very basic scene if you followed along so far you don't have to clean up the scene on your end I am just going to do it to keep things a bit more organized on my end now to add a script to any kind of node you have to use the symbol in the top left this one here it's a little scroll with a plus symbol before I am going to click on it you have to be aware depending on what note you have selected if you click the button you will attach a script to this particular node because remember whenever you create a script it always has to be attached to a node in my case I want to attach a script to the logo Sprite so I have this one selected I click on the symbol and then we get a new dialog and in there we can select a couple of things first of all the language although right now we only have GD script then we have inherits and this is Sprite 2D this is an option you basically never want to change then we have class name you can ignore that then we get a template for this one you want to keep the default don't worry too much about it then we have builtin script you can ignore this one as well and finally we have the path this is where we are going to save the script in my case I want to look at let's say I want to go up one folder and save the script somewhere in here I'm going to delete this later anyway but for now I'm going to save it inside of scenes as logo.gd if I now click on OK we are going to the script view if you want to go back to 2D you click on the top on 2D and this way you can change between 2D and script quite easily on top of that what you can also see now is that we have an icon next to the logo we have the logo node and on the right of it we have a script this is telling you that there's a script attached to this node should be fairly obvious other than that we can now see a few lines of code besides that what you can also do in the top right there's an expand symbol if you click on that you're maximizing the code window at least a tiny bit since I'm working on a small screen I'm going to work with that if you have a larger window this shouldn't be necessary now let's go through what we are seeing on the first line we have extends Sprite 2D this is really important and this extends spread to D let me minimize this a tiny bit this extends Sprites to D has to match the node that we have attached the script to so in my case I have attached a script to a Sprite 2D which is the logo we have created in the last part basically what this one is doing is it creates a new object from Sprite 2D and adds extra functionality whatever we are adding to it later on but to ensure that the spreadery still works we have to inherit from a Sprite to D that way we don't create some kind of new data since this is done automatically you don't have to worry too much about it other than that we have two functions we have a ready function and we have a process function I covered both of those earlier ready is essentially called whenever the node is ready process is called on every frame of the game we actually use them let me add a few print statements I want to print this string ready when the node is ready and then inside of process I want to print let's call it process and now that I have that I can run the entire game again by clicking on the button on the top right so if I run this now you can see let me close the window in the bottom we have output this is where you can see print statements and they can see process quite often and although at the beginning we have ready all of that came from these two functions although in our case we don't want to print things we want to move things around so what I basically want to do is I want to update the position of the Sprite and for that let me return to the 2D scene and if I click on the logo on the right we have the inspector there we have the transform properties in there we have position and this is what we want to change and if you hover over it you can see the property it says position this tooltip is telling you how you can Target this property with code which means if we overwrite the position we can update the position of the node which means if I go to script and let's say once the node is ready I can give it a new position and Godot has an auto complete that is quite nice so we can assign a new value to the position or this value it wants to have a vector 2 which is basically a list with two values and x and a y value which means if I add a 100 and a 200 in there we are moving this Sprite by 100 pixels to the right and 200 pixels down and that is all we need to update the position meaning if I now Run the game you can see we have a new position for the Sprite originally it was a disposition but we moved it down there because of the ready function on top of that we are still printing process because of the process function here but other than that we have a really good start what you can also do inside of process we can Target position dot X and then add a small amount let's say 10. if I now run all of this again the Sprite is going to move to the right there we go basically what is going to happen is that we are increasing the position X by 10 pixels on every frame which basically makes it move a tiny bit further to the right every time we're creating a new image of the game disappear some super basic stuff to extend this a tiny bit we can create a couple of variables for that all the way at the top outside of the functions you can either use VAR or const along with the variable name in my case I want to create a variable and I call this one the position since this is going to be a vector 2 I want to force a certain kind of data type which is Vector 2. and now with an equal sign I can actually assign a value since I will need a vector 2. I will have to type vector 2. now this Vector 2 has a couple of nice extra methods that we can work on for example if I add Dot and 0 we are creating a vector with zero and zero meaning this would be the same as a vector with 0 and 0. besides that I want to create a constant with this beat because this is not something that should change although it should be an integer so I'm going to tell it that the data type always has to be an integer and now for the value let's say 10. with that we have created two variables inside of this class and those two variables are available everywhere we could use them inside of ready or we could use them inside of process or we could use them in any other function that we create ourselves which means for the position let's say I want to update my pause variable that I just created and give it a vector 2 with 300 and 200. this by itself would not affect the game in a visible manner because right now we have created a new variable that has a vector 2 value and then we are assigning a new Vector to Value we are not actually updating the position of the Sprite for that we would need to position attribute and then give it the position variable we have just created the same thing we can do inside of process instead of updating position.x directly I want to get my POS dot X and then plus equal the speed and then I can assign a whole new value to the position which is just going to be pause with that I can run the code again and we're going to get a similar result that's looking pretty good what you can also do is declare local variables inside of every function you have for example inside of the ready function I can create a new variable let's call it test rotation for Value I'm going to go with 45. the specific number here really doesn't matter once I have that I can get the rotation once again I get these names from hovering over the value inside of the inspector so there I have rotation and if I have over it we get rotation one thing you do want to keep in mind is that rotations are in radians so if I want to use 45 degrees I would want to use rotation degrees which means inside of the code I want rotation degrees which is going to be the test rotation if I run this now we should have a rotated Sprite and that is looking really good now the Sprite is rotated by 45 degrees keep in mind now that this test rotation is a local variable inside of the ready function we could not use it inside of process if I try to for example print test row rotation we would get an error and you can already see that Godot is telling me that identify test rotation is not declared in the current scope let me extend the window tiny bit they can see it better Godot can be very aggressive at Godot can be really aggressive at telling you errors in your code early which is nice but can also be kind of annoying but in this case it is quite useful with that we have covered the most important basics of GD script since this is something really important to understand I do want to include an exercise at this point I want you guys to create another variable called test scale make sure that the data type for this one is an integer and the default value should be one when the game is ready use the variable to change the scale to do on top of that while the game is running continuously increase the scale by a very small amount choose whatever you like pause the video now and try to implement this one back in the code I want to create another variable or the name I want to have test scale and on top of that I want to force a data type which is going to be an integer and the default value should be 1. with that we have created a new variable next up inside of the ready function I want to use this test scale to change the scaling of this node to a 2. for that I want to get the test scale and set it to 2 and next up let me minimize this window a bit so I can see the inspector we want to look at this scale and there you can see the notes scale the unscaled value is one and one and whenever you see two parentheses it means it's a vector the problem is inside of the code we're using an integer for the test scale so we have to adjust a tiny bit but let's play around first of all I want to update this scale and the scale should be the test scale and now we are already getting an error and once again let me extend this window so we can see what's going on we are trying to assign a value of type int to a variable that wants to have a vector 2. so this is not going to work scale always wants to have a vector 2. but that we can account for quite easily all we have to do is get Vector 2 and then pass in the test scale for x and y and now the good old debugger is happy again with that I can run the entire thing and now the Godot logo is twice as large perfect which means with that we can work inside of the process function to continuously increase the size for that I want to get the test scale again and increase it by a very small amount let's say 0.01 other than that I want to get the scale property and set it to a new Vector 2 with the test scale for both X and Y let's try all of that and now it's not growing let's instead change it to a one and now if I run this again this is definitely working the issue with adding 0.1 is that test scale is always going to be an integer and when we add 0.1 we would get 1.1 and since the value for test scale always has to be an integer the dough only takes the first value which is going to be a one anything after that is going to be ignored if where to float this would work better but in this case the code is only going to work if we have full numbers like 1 2 and 3 and so on all right with that we have a couple of really important basics of GD script that being said there's still quite a bit to go the really important issue that we have right now let me minimize all of this and return back to the 2D scene right now we can only influence the logo itself but what if we wanted to go from level and then influence the logo this we can't do right now but this video is getting quite long so let's do all of this in the next video let's continue talking about coding in good dough and for this part I want to focus on two major things number one targeting one node from another node which means I want to use the level node to influence the Sprite on top of that I want to work with the flow so we're going to use some if statements and some for loops let's Jump Right In if you got so far this shouldn't be too difficult here we are back in the code and you can see we have 11 node and then a logo node with a script all of the stuff we have done in the last part what I now want to do is to give the level node a script as well which I Do by attaching a new script all of the default options for this one are okay I usually don't change any of those besides the path what you see most of the time is that people change the script next to the scene that it is attached to which means in my case I want to add the level script in the same folder where we have the level scene which is what I have right now so I'm going to click on open and then on create now we can see we have two script symbols because both of these nodes have a script attached to them we also have the scripts available in here which is quite nice to switch between the two now inside of the level you can tell that we don't have the functions we had inside of logo but that is only because of the preset I have selected you can totally add Funk and ready and then you get the same function in the app I can print let's say level node is ready and once I have that I can run the entire thing again and let me close it right away and look at the output again there we get level node is ready meaning this ready function works just fine these underscore functions you have available all of the time meaning you can always use ready or process and a host of other ones let me minimize the output and then we can work a bit more inside of the level script now I could be running any kind of code the same thing we have done inside of the logo but I want to do something else what I want to do is from inside of this script level.gd I want to update the logo and let's say I want to update the rotation that we can do quite easily but first of all I want to go back to logo.gd and in there I want to comment out the test scale because this is scaling everything too fast and we can't see what's happening anymore to comment out code in GD script you would use control or command and K if you add that you are adding a comment alternatively you can also simply add the hashtag symbol and then you're adding a comment so I can get for example to positions add the hashtag and then you have commented it out both is fine I tend to use Ctrl or command K because it's a bit faster but choose whatever you like with that if I run the code again you can see that we have the Godot symbol moving to the right and we have a starting rotation of 45 degrees which is what we're getting here let's comment out this one as well so we are starting with a rotation of zero degrees that is looking like a good start now inside of level.gd I want to change the rotation of the logo for that we first of all have to get the logo and this is what I talked about in the last video let me bring up this slide again there towards the end I talked about that we can Target notes in two ways we could ever use get node and then a notepad or a dollar sign along with the note path both of those would give us a note and then on this node we can change the properties for example we could get the node path and then dot position I hope you can read that and we could simply attach a new Vector too back in Godot I want to get a node and now the autocomplete is already giving me a couple of options we either have a DOT which doesn't do anything or we have the logo and with that we have the logo what we could do now for example is to change the rotation and for that we need the grease let's change it to 90 degrees with that if I run all of this again there we have a 90 degree rotation for the Godot symbol this is one way to get a node alternatively what you are probably going to use much more often is a dollar sign and then the name or the path of the node you want to Target in this case logo if I run the entire scene again we are getting the same result as a matter of fact you don't actually have to type it what you can also do if I get rid of it you can simply select and click on the note you want to get and then drag it into the code editor and if you then drop it you get the name of the node or rather the path of the node same thing this we can also Target multiple times for example we can once again use func underscore process then get the logo with dollar sign logo and then the rotation in degrees we could for example plus equal 0.1 if I now run the scene again we get a very slow rotation let's increase the number by a fair amount let's say I want to increase it by one degree on every frame of the game that is much more visible and certainly it is working to make it even more visible let me change it to a 10 if I run this again much more visible cool that is what I wanted so with that we can now Target other nodes next up I want to work on the flow let's say I want to add an if statement that if the rotation is greater than 180 degrees I want to change the rotation back to zero for that we will need an if statement I want to get if and then I can Target the logo once again and I want to get the rotation underscore the grease and if that is greater than 180 then I want to get this same node so I can just copy it and set the rotation degrees to zero also I've realized this should be an uppercase l for both of these nodes what you want to keep in mind that these properties you can either set or read both is totally fine let's run all of this again and this is quite hard to see but let me write again and it is certainly working because the face of Godot is switching around this isn't too visible but the really important thing is the if statement you basically add if like in Python and then the condition for this one we're comparing the rotation degrees against a number 180 in this case what you also see quite often is that people put parentheses around them the result would be the same and this is something I really want to practice I want you guys to update the position of the Sprite if it is greater than 1000 move it back to zero and I am purely talking about the horizontal axis if this is our starting position zero we're going to add a line of 1 000 pixels this Sprite is going to start on position 0 enter continuously move to the right once it reaches the point 1000 I want you guys to move it back to the starting position that way it doesn't move infinitely to the right also all of this has to be on the level node so now pause the video and try to implement this one back in the code the rotation is kind of confusing so I just want to get rid of it along with the comment we don't need any of that instead I want to get an if statement once again I want to get the logo on that I want to get the position and this is going to return a vector 2. meaning on that I can either Target X or I can Target Y in my case I only want to look at X if this is greater than 1000 I want to do something so colon and if I now press enter we get another level of indentation just to see if this is working I want to print let's say position exceeded with that I can run the code again and now if we reach a thousand pixels at some point we get position exceeded with that we know this if statement is working perfectly fine that means we can use it once again let me copy it and set the position to zero if we run the code now we should move back to zero although we are not let's explore what went wrong and I would very much recommend you to investigate this yourself you can find all of the information inside of the logo GD script we do know that this if statement is working so something is wrong with this line and well the issue is inside of the logo GD script we are storing the position inside of this Vector that I called pause and we are updating this post vector and then we are setting the position to the pause the problem essentially is inside of level when we updating position.x and set it to zero we are actually setting the position of this Sprite to zero however what is happening right after inside of logo.gd we are setting another position the one we have specified here because of that we are overwriting what we have done inside of this line now to fix that all we have to do is to change the position to pause that way we don't update the position itself instead we are updating this post Vector which is responsible for the position which means now this should be working and there we go this is looking much better it keeps on working perfect basically we want to control the position with the pause variable which is a vector 2. and when you target a node from another node in this case the level you can Target any of the attributes it can either be some of the inbuilt ones like position or it can be one of the attributes that you have created like pause you can Target both just fine finally before I finish this video let's have a look at the for Loop and for that we are going to need an array and let's create one in the entire scope of the class I want to create VAR test array and this is going to be an array that is only accepting let's say a string for the data inside for an array you need square brackets and since we only have strings inside we will need either single or double quotation marks usually what you see in Godot are double quotation marks but single ones work just as well I'm going to add some random words it doesn't really matter what you add in here and stuff also let's extend the entire thing so we can see all of it cool now we have an array full of strings if you want to look at every single value individually you will need a for Loop which basically means we want four and then we need a name for the value just like in Python let's call it for I in test array then we need a colon and then inside of this for Loop we can for example print I if I now run the code you can see in the bottom we have test hello and stuff the content of the array if you're used to python this should feel very familiar or in fact if you know any programming language this shouldn't be too difficult on top of that you can also use indexing if for example I only wanted to print the first value I can go print a test array and then the index 0. once again if I run all of this we get test which is the first value inside of the array so I hope all of this is reasonably straightforward now that we are moving things we have to cover one super important concept that is called Delta time and Godot is actually already complaining that we are not using Delta time let's have a look in Godot right now actually here we are back in the editor and if you look at the bottom there we have a debugger that says two if you click on that you get some weird thing but then we have a tab that says errors with a two and in there we have either errors or Warnings right now we have two warnings so if you have over both of them we get a warning and the warning for both is the same that the parameter Delta is never used in the function process if this is intended prefix it with an underscore underscore Delta basically what Godot doesn't like right now is we have two scripts let me open them and in both of these scripts we are using Delta we have one here and we have another one here Delta always comes with the process function Godot inserts it automatically the question then is how can we use Delta and why does Google complain if we don't use it and well for that Godot actually adds a comment for this one if I expand it a bit we have called every frame this applies to the process function and Delta is the elapsed time since the previous frame and to understand what that means we have to cover a bit of theory let me open the slides when we are moving objects in the game the speed of them is determined by how fast the game runs I'll explain this in a bit more in just a second but the main thing we have to account for right now is that our game can run at wildly different speeds and when I talk about speeds I talk about how many frames are being generated so for example our game might run on a really slow computer or on a really fast computer and depending on where it runs we might get different frame rates and this can be a massive problem let's do some examples here is a table and for all three rows we want to move an object by 10 pixels per frame this is actually what we have already done if I jump back to Godot really quick when we move the logo we set position.x plus equal to speed and the speed was 10 pixels which means on every frame of the game we moved this position 10 pixels further to the right next column we have frames per second this is determined by your computer for example on my computer I have a reasonably fast one so my game would probably run a bit higher than 60 frames per second that being said another person might have a really really really good computer and their game might run at 120 frames per second or even faster the list can go on forever and some person with a crazy computer might even have a thousand frames or higher on the other end if you have a really slow computer you might only get 30 frames per second or something lower so this can also go up to zero where you get no frames at all this frame rate is really important because it influences how fast things are moving for example on this slowest possible computer but we only get 30 frames per second if we are moving by 10 pixels per frame we are moving 300 pixels per second that is the total movement which is fine by itself but if the frame rate changes so if we get 60 frames or 120 frames then we get different kinds of movement we would get 600 or 1 200 pixels per second and that would be an enormous problem because now depending on what computer the game is run on we get different movement speeds just imagine you have the same game something like Elden ring and on some computers it runs four times as fast than on others and when I say it runs four times as fast I'm meaning the movement speed of a character is four times as fast as on another computer the game would effectively be unplayable so we do have to account for that this inconsistency is also not limited to different computers since some scenes are more difficult to render than others we might even have an inconsistent experience on the same computer if you imagine any kind of video game sometimes you have a small room with very few objects and sometimes you have a giant area with a huge amount of stuff obviously the larger area is much more difficult to run and you don't want to have different kinds of movement speed in the different scenes so we have to account for that and we want to avoid something like this where the frame rate dips quite a bit over time and while this by itself is fine and you see it fairly often it should not influence the movement speed so a lot of problems how can we account for it for that we have Delta time and Delta time literally just measures how long it took to create the current frame for example if our current frame rate is 60 frames per second then Delta time is one second divided by 60. roughly 17 milliseconds this information we can use to keep a constant speed of any object in the game regardless of the frame rate all we have to do is to multiply the movement with Delta time it's actually really easy to implement but to understand why this works let me add another table how frame rates influence the game when we have Delta time this table is somewhat similar compared to what we have seen earlier we still have our speed with pixels per frame and then we have the frame rate originally what we have seen was this column where we are getting different movements depending on the frame rate which was really bad so we have to account for that and for that we have added another column for Delta time now depending on the frame rate we are getting a different Delta time if our frame rate is 30 frames per second we simply divide one second by 30 and Delta time would be 0.033 if our frame rate is 60 we would divide 1 by 60 and we get 70 milliseconds or something approximate to it and if our frame rate is 120 we divide 1 by 120 and we get 0.08 these numbers we can then use as a multiplier or the frame rate which is what happens in the final column for example for 120 frames we are moving by 10 pixels per frame at 120 frames per second and this you multiply with Delta time and the outcome is 10 pixels per second a better way to visualize this is this 0.08 is literally 1 divided by 120 and if you multiply 120 with 1 over 120 both cancel each other out so we are literally left with 10. and this applies to all the different frame rates the higher the frame rate the lower Delta time and since these two move proportionally they always cancel each other out and all that's left is the actual movement per second which is exactly what we want so with Delta time accounted the game is going to run at the same speed for any frame rate let's implement it back in Godot all I have to do is get my speed and then multiply it by Delta the issue now is if I run all of this this is going to be really really slow we basically have no movement left the reason for it the speed right now is 10 pixels per frame and Delta time is something like 0.000 and so on as a consequence the final result is going to be incredibly low whenever you use Delta time you want to have somewhat larger numbers let's go with 200 that is going to be a much better number and there we go now we have roughly the same Movement we had earlier the if statement also still works but now the important difference is that this movement always is the same regardless of the frame rate now in my case I can't easily control the frame rate so this is a bit difficult to visualize but trust me this is a very easy thing to implement and really important for a consistent game experience on top of that if you look at the bottom the debugger is now a bit less unhappy we only have one issue left fixing that one is going to be your exercise I want you guys to use Delta time in level.gd more specifically inside of the process function of level.gd possibly now and try to implement this one back in Godot I want to look at level.gd and there we have process with Delta for this one we have two things we are updating the rotation and then we are setting the position we only need to use Delta for one of them when we're updating the rotation this one we want to multiply with Delta and now remember the rotation is going to be incredibly slow because Delta is such a low number it's actually now we have a very very very minor rotation to make this more noticeable let's change this to I know 60. that is more visible and once again this rotation is now frame rate independent we do not need to apply Delta for this if statement where we are updating the position because this one is not a change in Movement we are simply setting the position of the frame to X being zero we are not continuously updating the movement we are only doing this once because of that we are not going to need Delta time in the future we are also going to encounter quite a few functions that apply the movement with Delta time automatically in build so quite often you don't have to think about Delta time at all but it is a really important concept you are going to see it fairly often and it is super important to understand so I hope this part was useful a really important part for any game is player input so let's talk about that to capture any kind of input in Godot there are two steps number one we have to create an input map basically what this one is doing is it allows you to capture different kinds of inputs and store them under a certain keyword for example we could get the left key on the keyboard and the a key and store them both under the left keyboard inside of the input map that way we can access both of these keys inside of the game very easily we could also account for the mouse joysticks controllers basically anything once we have all of that we have to access the input for that Godot has an input object and this is allowing us to capture various kinds of inputs all combined this should be quite easy to implement once again here is the project we have created so far and I want to get started by creating an input map for that we have to go to the top there is project and there we have project settings if you look at the top there we have an input map and right now it's completely empty for that we have to create a new action first of all this would be a category that can capture different kinds of inputs for example the one we could start with is left now we have one action called left and this action should have a couple of keys Associated for that I want to go all the way to the right there's a plus symbol and there I can add an event and here we have keyboard Keys Mouse buttons dropper buttons and joypad access basically any kind of input now the list for all of them gets quite long because well there are a lot of keys on the keyboard so most of the time you don't go for the list instead instead you click on listening for input and then you press the button on the keyboard that you want so in my case I want to have the left button so I click left and that way we find the key automatically that I can click on okay and now we have the left physical button this is the left key on the keyboard we can also add a second key to this action which I do Again by clicking on plus and the other key I want to add is the a button so I just click on a and click on OK with that we have left and a and they both represent left inside of the game we are going to add quite a few more actions later on but for now I want to keep it simple so let's close the input map and see how we can use it which is bringing us to the second step we have to access the input map and this is going to happen with code so let's say inside of the level I want to open the code and make some updates to all of this the code we're going to write has to be inside of the process function because this one is going to run on every single frame of the game if we try to run the code for the input in the ready function it wouldn't work because ready is only running for one frame when the game is starting after that it wouldn't do anything so checking input in there would be pointless which means inside of process I'm going to add a few more lines and the most important line is going to be input and you can see Godot is coloring this one already which means this is a special keyword to understand what it's doing I think the best way to start this is to look at the documentation and for that Godot is amazing because if you hold Ctrl or command and you click on input then Godot is opening the inbuilt documentation and then there you can read anything that you could possibly need about the input object there's quite a bit so let me extend the entire thing and there are all of the methods that you have on the input object a really easy one if I scroll down a bit is is action pressed this one is simply checking if a certain action has been triggered or pressed on the keyboard let's use this one for that I'm going to stop using this in full screen mode and go back to the level on input I want to run a method so I add Dot and then is action there we can choose just pressed just released or simply pressed I want to go with is action pressed and now we can look for the various actions the dough has a couple of predefined ones although all the way at the top we have the one that we created which is called left and now whenever we are pressing the button or rather whenever the player is pressing the button this is going to return a Boolean that says either true or false true if the button is pressed and Falls if it isn't pressed which means we can simply print all of this and we should see either true or false let me run the code and now I get false because the key isn't pressed but if I click on the left key or on a we're getting true which means we can register for the key press oh this one is working really well in case you're wondering if I return to input and look at the method we have just used there we go is action pressed what's the difference between is action pressed and is action just pressed for that you can simply click on the method and then you get the entry inside of the documentation the difference basically is that is action just press is only checking the action of pressing the button which means if the player is pressing a button and holding the button down we are only getting true once whereas is action pressed we are checking the button being pressed down so if the player holds down the button we keep on getting some kind of output the difference is somewhat subtle but it can be quite important if you play around with this it should become fairly straightforward and with that we have the basics of keyboard input all we have to do now is to expand all of this and then we can move the player at least in a very rudimentary sense first of all inside of project project settings I want to keep on working inside of the input map first of all I want to add a few new actions besides left I also want to have a right I want to have up and I want to have down this is going to cover the keys to move the player on top of that I want to have a primary action action this would be the left Mouse button or the spacebar to shoot a laser later on although there's still quite a bit of ground to cover before we reach that stage but first of all we have to add a few keys to all of these actions and I would recommend that you are doing this yourself but I'm going to add a proper exercise later although this shouldn't be too hard so let's just go through it for the right action I'm going to press right on the keyboard or I want to press e on the keyboard next up for up I want to press up on the keyboard click on OK or I want to press W on the keyboard and click ok or down I want to press down on the keyboard and I want to press s on the keyboard with that we can move around next up we need primary action this one is triggered either by the spacebar this one is easy to capture all you have to do is press space and there we go we have the spacebar capturing the mouse buttons is a tiny bit more difficult because I couldn't just click in there oh well I actually can but I didn't know I could do that so instead of doing that you could simply look at Mouse buttons and there's leftmost button right Mouse button middle Mouse button and so on I want to get the left Mouse button so I click on OK and there we go now we have a ton of keys that we can work with now back in the code let me move back to the editor I don't want to move this Sprite that we have created earlier instead I want to move the player and for that I want to clean things up a bit I don't need the laser image anymore so I'm going to get rid of this and this is brighter deep for the grenade we can also get rid of that way we are left only with the player image on top of that inside of the level I want to attach an instance of this player so with level selected I'm going to click on the Chain symbol and then attach the player and let's just move them somewhere there so we see what's going on now with that I want to give the player a script and the script is going to go on the player node 2D not on the image itself the reason for that is later on this node is going to get a whole bunch more children and we want to move all of them together for that we have to move only the parent node and since we apply the same transform to all of the children we are moving all of them if we move the parent which means the player is going to get a script once again we get a dialog to create a new script and the one thing I should have mentioned earlier when you click on template you either have default and this one includes the ready function and process whereas if you have empty it doesn't include anything except the extend statement for the inheritance I am going to go with empty because I like to start clean but you can choose whatever you want on top of that for the path I want to save this script so player.gd in the same folder where I have the scene for the player which I already have so I can click on open and create there we go now the player has a script to check for input once again we will need the process function and first of all in there I want to get the input and this I can do in a couple of different ways although there's one method that is the most succinct and the easiest to use let's have a look at input because in there if I scroll all the way up we have a whole bunch of methods that we can use and let me extend this window a bit so we can see things better the method that is going to be most useful for us is called get Vector if I click on that we get a bit more detail this method is designed for topdown movement basically what it wants is four different actions one for Negative X or left then positive X so right after that negative Y and positive y which would be up and down we could also add a dead zone but we don't need to so I'm going to ignore it once we have these four actions the dough is going to return a vector and this Vector is going to give us the movement for example if the user only pressed the negative X action we will get a vector that points at negative one and zero so we are just going to the left no up or down if you just read these things on your own I think especially at this stage this is probably a bit confusing and when you get started with coding reading documentation can be a bit difficult but if you have a bit of practice all of this should become quite easy to understand but well it does take some time to get used to it anyway though I want to minimize this window and work inside of the player to get the input I first of all want to create a new variable let's call it VAR Direction and this direction I get with input and then dot get underscore Vector that is the method we just looked at this one and now we have to go through the different actions for the four directions we have to start with negative X which is a fancy way of saying left then we need positive X which is just right then we need negative Y which is up and finally we needed positive Y which is done once we have all of those good old stops complaining and we are getting a vector to make sure this is working let's print what we are actually getting from Direction and before I run all of this inside of the level I want to comment out the print statement so we only see the output for the direction and it's not going to get too confusing let's run all of this and now by default we get 0 and 0 because I'm not pressing anything however if I press the left key or I press a then we get negative one because this is now telling the game that we want to move in the left Direction I can also press up or down or right or two keys combined then we get a slightly less pretty Vector but it certainly works the same would also work with wasd we get pretty much the same output this is looking really good which means with all of that we can get the input and then we just have to use it to move the player to actually move the player then we have to Target the position and once again I think for this it's easiest to have the inspector open because what we ultimately want to change is the position of the node 2D and this we can Target with the position which by itself is going to be a vector all we have to do is position plus equal the direction and then times some kind of speed let's say 200. on top of that what I covered in the last part do not forget Delta whenever you move anything continuously now once we have all of that I can run the code again and now we can move the player around it's quite slow but it definitely works so I am quite happy with that it might be a good idea to increase the speed to let's say 500 and now we can move much faster this is feeling better but this will be the basics of movement later on we are going to change that to account for physics but for now this is working just fine that being said I do want to add one more thing though because right now we are just able to move the player wouldn't have any way to input a shooting mechanic for that I want to add a bit more code let's call it the laser shooting input I want to check if the player is pressing the primary input I need an if statement and this is going to look very similar compared to what we have done inside of this print statement I want to check the input and then is action pressed which means inside of the player I want to get the input and then is action for this one you could use either is action just pressed or is action pressed later on we are going to have a timer to the later laser shooting anyway so the difference here is negligible but the action I'm looking for is primary action if that is the case for now I simply want to print let's say shoot laser and now I can run the game again now if I click with my mouse button I can shoot laser or if I press space we're also getting shoot laser so this is working just fine and that is covering all of the basics of keyboard input all we have to do now is do an exercise and then we are done I want you guys to create another action in the input map and call it secondary action the associated keys are control left control to be more specific but it doesn't really matter and also the right Mouse button if that action is triggered print should grenade and all of the code should be inside of the player right below the laser most of you now and try to figure this one out first of all I have to update the input map this I'm doing inside of project input map I want to add another action I call this one secondary action now that I have the action I have to add a couple of keys I want to add control so I just click control on the keyboard besides that I'm going to click on the plus again and I can click left Mouse button in the field and then select right Mouse button this is the one we're looking for that is going to update the input map so now I can close it after that I can reopen the player code and now we need to do something that is pretty similar to this I want to add an if statement and if input is action pressed I am looking for this secondary action if that is the case I want to print shoot grenade the specifics of what I print really don't matter we're going to change this later on quite a bit anyway but for now this should be all we need let's try and if I right click we get shoot grenade if I press on Ctrl we also get shoot grenade if I press space we still get to laser and we can also still move around so all of this is coming together quite nicely perfect before we continue I want to cover some more minor topics specifically I want to talk more on notes even more specifically I want to talk about how to interact with nodes via code we have already seen some of that to bring up an earlier slide you can Target nodes in two ways either with get node or with a dollar sign the dollar Note 1 is the much better one because it's just more concise we are going to explore this further specifically how to Target different nodes that are a bit more nested so if a node has more parent nodes or more children nodes how can we target various notes in there I think that's a really important thing to understand what you can also do is you can give a node unique names especially for a complex scene this can be incredibly useful also very easy to implement so quite a useful thing on top of that what I really want to emphasize is that once you capture a node inside of your code you can access the properties and the methods of this node you basically treat a node like a class that has properties and methods and you can work with them because that's basically what's happening here we are back in the level and let's see what we already have in terms of working with the nodes inside of the code so if I look at the level I can open the code in there and we can see we have already a couple of interactions most importantly we're getting the logo node this bright we have created earlier and we are changing the rotation and the position notice here that we are influencing and measuring some of the inbuilt properties like position and we are changing a custom attribute that we have added like pause so if I look inside of logo we have pause something we created ourselves and we have the position this is part of the node itself we could do the same thing with the player although for this part we don't really need it now what I first of all want to cover is how to work a bit more with different node paths for example let me add a few more notes so with the level node selected I press Ctrl a or I could also click on the plus symbol and I want to add another Sprite 2D however with this Sprite 2D selected I want to click on Ctrl D to duplicate it and then set the second Sprite 2D as the child of this Sprite 2D so we have never spread 2D with another child in this process I'm going to do a few more times that way we have Sprite 2d4 as a child of a couple of other nodes this isn't the most useful setup but for the purposes of this video it's going to be quite useful because let's say you wanted to Target this Sprite to D4 and let me rename it to Target so it's a bit easier to understand what's going on let me just drag it somewhere down there and there we can see we have a longer path we have Sprite 2D that is the first spriter D the first child of the level node because right now the code is for the level inside of this spriter D we have another spread to D this would be Sprite to D2 that's this one then we have another Sprite 2D spriter D3 this one and finally we have the target the final note if your scene becomes more complex and you have more nested nodes this is the kind of thing you will see quite often but it's still not too bad and for example what you could do right now is simply print the node and let's not do this in the process node and instead put all of that inside of the ready function that way we don't clutter the output if I now run this we get inside of the output Target and then a spread to the somewhere with a unique ID meaning all of this is working just fine now if you feel like this is becoming too hard to read which it might actually become you can give this target node a unique name to give it one you have to right click on it and then access as a unique name if I click on that we have a percentage sign on the right side of it what this one means if I now delete this path and drag the target node again in there we are now getting a percentage sign and then the target although the result is going to be the same we are still getting the target which is a Sprite 2D with some unique ID basically what this one is doing is it gives this target a unique name that you can access anywhere inside of the scene for example if I wanted to work inside of the logo where we are simply moving a Sprite right now I could also Target the same node I can simply let's say I want to have the percentage sign then the target that will give us the entire node and on that I could for example get the position if I spell this correctly this would also help a lot and now if I run all of this again we are getting a position which is zero and zero with this kind of setup it's much easier to work in larger scenes although don't overuse it if you add this kind of thing to every single node the system kind of becomes pointless so use the sparingly but in certain situations this can be incredibly useful that being said in this case this is not useful at all because of that I want to delete all of the stuff we have just created so I'm going to lead all of these notes and get rid of the print statement inside of logo GD and level GD because the target node doesn't exist anymore the last thing I want to cover is what if you have a child node like this logo 2D with a script and you want to access something inside of the parent in this case the level for example right now inside of our level we have a test array with a couple of entries and I want to access this from inside of the logo which has this script attached to it that you can also do quite easily all you have to do is well you basically just have to drag the node into the code and then you see what's going to happen we get a double dot this is the signing Guido to get the parent node and on that we can Target certain things in this case inside of level GD we have a test array this is just a property of this node so I can get test array all of this I want to print so we can actually see it also let me get rid of any other print statement for example here we have test array 0 that we are printing which would be confusing right now inside of the player we are only printing if we are shooting the laser or the grenade so those are fine now if I run the code again we get the test array inside of the output and this is because we're getting the parent node with the property on top of that what you can also do is you can give this node a custom function and call it from any of the children or the parents something we haven't done yet actually so let's create a custom function so far we only use the inbuilt ones but you can totally create your own function simply type func and then type a custom name for example test function then you need the parentheses in there you could add parameters although in this case I don't have any and I simply want to print this is a test function this function I now want to call from inside of logo.gd I want to get the parent node and for this one I need quotation marks and then dot dot the same thing we have done up here the quotation marks you will need when you use the dot dots if I remove them we would get some weird output so when you use a parent node you would need the quotation marks although other than that we can simply call the test function and since we now want to call the function don't forget the parentheses at the end with that I can run all of this and there we get this is a test function looks pretty good and now inside of the level we could use this to do basically anything inside of this script for example we could change the position we could change the rotation we could change the test array whatever we want to do and this is something really important that you have to understand so let me emphasize it one of the most important aspects of Godot if you want to master it is to make notes communicate with each other what we have done so far is we have made notes work together in the same scene although later on we will also work across multiple scenes there are quite a few tools to make all of this work but I really want to emphasize that making nodes communicate with each other is a fundamental part of Godot and you have to understand how this works I suppose for now this isn't too difficult but later on we're going to expand on this system quite a bit so definitely play around with this and make sure you can access different nodes and change their properties from anywhere inside of a scene at this point you should be able to do just that for this section we are going to have a slightly different exercise it's a much more openended I want you guys to play around with the notes and try to change and update other nodes basically make sure that you understand the notepads and how you can use them to access properties and methods on other nodes there isn't really a specific goal with all of this just play around and see what you can change what you can access what properties you can work with it's really important to understand and once you understand all of that we can work with the actual character movement so in the next part we will talk about physics let's talk about one of the most important parts so far and that is physics this is incredibly important for any kind of movement to illustrate why I want to cover some problems we have right now so far we are currently just moving images which is fine but also limited because an image cannot Collide or slide along a surface essentially they don't have any physical properties which would be a massive issue for a game to fix that we have to use Collision bodies and physics bodies those are good nodes that can work with all of that and the best way to approach all of that is to look at this straight in good dough here we are back in the editor and I want to create a few more notes let's get rid of sprite 2D and here we can see all of the nodes in a very broad sense you have four different types of notes you have the blue ones those are notes for a 2d game then you have control notes those are notes for the layout we'll cover those to some extent later but this is quite a large topic so this is going to be a separate video we also have 3D nodes and then we have a lot of General nodes for example there's a timer we cover that quite soon actually for now I want to work inside of node 2D because we are making a 2d game and there we have lots more nodes but at the top we have Collision object 2D if I expand that we get physics body 2D and we get an area 2D node we can also expand physics body 2D and there we have a static body 2D a character body 2D and the rigid body 2D we can expand things a bit more but we don't need to these four nodes are incredibly important so I want to talk about them in quite some detail there are two major parts for every one of these nodes that you have to be aware of number one is what they do and number two is how you would move them because now that we are working with physics the movement gets a bit different most of the work is done by the dough so we're not going to do anything complicated the easiest note that we can talk about is area 2D this is just an area that can check if another body has entered this area you can also move by changing the position which is quite easily done a good example for this one would be if the player is entering a house the house would be an area 2D and this area 2D can check if a body has entered besides that when we are creating the lasers later on those will also have areas attached to them and those areas are going to check if the laser is colliding with an enemy or wall or an obstacle or something like that next up we have a static body 2D the name gives you a pretty good idea of what this one is doing it's a static body that is colliding with other bodies as a consequence there's no movement for this one I guess in theory you could be moving it but you're not supposed to examples for this one would be literally any static object in the game any kind of wall any kind of obstacles and what we've already created the bad is going to be a static body 2D which means later on other bodies can collide with them but they cannot move themselves they are the easiest kind of collidable body we have next up we have a rigid body 2D this is a body that moves purely via physical forces think of it like a cannonball if you want to move them all you have to do is set a velocity when you create them and then the body is going to move on its own we are not going to use this very much but when we are going to create the grenade later on we are going to use a rigid body 2D because for the grenade all we have to do is set a velocity and then it's going to move on its own finally the most important body is character body 2D this is a moving body controlled by code and you are moving this via inbuilt methods there are a couple depending on what kind of collision you want I'll cover this in just a bit but essentially any entity controlled by code is going to be a character body 2D this includes the player and all of the enemies and when I say an entity controlled by code I mean some complex movement for example the player has a complex movement of a direction that we get via input and then a certain kind of speed the enemies would also have some slightly more complex movement although for now I covered a whole bunch of theory so let's return to the editor and let's do something more practical back in Godot I want to create a couple of physics bodies and let's start with the easiest one I want to update the bad because right now we have a no too deep as the parent and then we have three Sprites attached to update this I want to change the parent node so this node 2D I want to turn into a static body 2D for that I have to right click on it and there we have change type right now we have an o2d this is not what I want instead I want to go to node 2D Collision object and physics body 2D and there we have a static body 2D alternatively you could also simply type in static body 2D and you will get the same result so now we get a static body 2D you can see that the icon has changed but so far not much has happened the other thing we got is a warning symbol which is saying that this node has no shape so it cannot Collide or interact with other objects consider adding a collision shape to D or a collision polygon 2D as a child to Define its shape what that means is that whenever you have any physics body you have to also attach a shape because right now this Collision body doesn't know what its actual body is or more specifically it doesn't know what the shape of its body is to fix that we need to add another node which means I click on the plus and what we need is a collision shape 2D or a collision polygon 2D is giving you predefined shapes whereas a collision polygon 2D allows you to create more flexible arrangements for now though since the bad is a really easy shape I want to have a collision shape 2D if I now click on enter we create another child which is a collision shape 2D although now we are getting another warning which is saying that a shape must be provided for Collision shape 2D to function to add this shape we have to look at the right there inside of the inspector we have a shape property right now it says empty but if I click on it we can select a set of shapes the one I want to look at is a new rectangle shape 2D if I click on that we get a small blue area on top of that if we look at our nodes we don't have an error anymore which is perfect what you now have to understand is that this blue area here that we can move around is the shape of this static body which I called bad right now to make all of that work properly I want to select it again and scale it up so that it fits the entire physical shape of the bed which right now is simply the image you can simply direct dots also what you can do if you select one dot and hold alt you are scaling it on either axis so vertical or horizontal is fine basically what you want to end up with is some kind of shape that covers what you want to have as the actual physical body something like this looks pretty good now I want to save the scene and if I look at the level again in here we don't have the bed right now so with the lever selected I want to click on the Chain symbol to add a child scene and add the bad and let's move it here ish you can still see we have the blue outline in the game though this is not going to be visible this blue area is purely for debugging purposes so you know what the actual Collision shape is that being said though if I run the game again I can move the player but we have no Collision the reason for that is that the bad has a collision shape but the player is just an image and images cannot Collide so we have to update the player and then we have an actual Collision which means once again we have to update a node in this case the player is also a node 2D but this is not what I want anymore so I right click on it and I want to change the type I don't want a node 2D instead I want to have a character body 2D with that once again we get a different symbol and a warning icon this body has no shape to fix that I want to add another node which is going to be a collision shape 2D I have this one in my recent tab I can click on create now we get another warning that there's no shape for this body and for that we have to look on the right where we can add a shape now for this one the shape is getting a bit more complicated because the player itself doesn't have a regular shape although we can simplify things a bit if you look at the player and squint a bit you get more or less a round shape which is what I want to go with which means for the shape I want to have a circle shape 2D this has now giving me a circle and this circle I want to expand a bit to something like this and on and on top of that I want to get the player image and move it so it's roughly in the middle I would recommend to always keep the Collision shape around the center so right now this character body has a center around the position 0 and 0. and this 0 and 0 I don't want to change so I keep the Collision shape around this position and then move the player to align with it with that we have a collision shape this sort of setup where you have a character body 2D and image and then a collision shape is incredibly common in good dough basically any kind of game for any scene is starting with something like that way you get collisions you get movement and you can see what's going on Via the image and if you don't have movement like for the bad you would have a static body 2D then an image or multiple images and then another Collision shape so this kind of setup is something you really have to understand that being said right now if I run the code again I still don't get any kind of collision so something still isn't working the reason why that is if I look at the player and open the code we get one problem and this is we are extending a node 2D this is because early on we created a note 2D and attached all of the code but we changed the node now we don't have a node to D anymore instead we have a character body 2D so we don't want to extend a note 3D we want to extend a character body 2D now that we have that I can run the code again and we still don't get a collision that is because we are right now updating the position which is not how you are supposed to use a character body 2D as a consequence let me get rid of this position also I want to extend the code window so we can see a bit better what's going on to update a character body 2D you will want to use a specific method that is called move and slide you don't have to add any kind of argument this one works by itself however what you also have to do is to update a velocity this velocity is a property of a character body to D you always have it but once you overwrite it move and slide is picking it up you move the body so in our case we want to set the velocity which is going to be a vector 2D do the direction and then multiply it with some kind of speed let's say for now I want to go with 500. now if I run the game again we are getting a collision and this is feeling much better let's talk about this setup a bit more and the best way to think about it is to look at all of this inside of the documentation for that I am going to hold Ctrl or command and click on character body 2D if I do that I get the documentation for a character body 2D and in there you have a lot of information I would recommend you to read this in your own time but for now it's not too important what is really important instead is the velocity this is what I want to First Look at if I click on it we get the current velocity in pixels per second used and modified during calls to move and slide on top of that we also see that the default is Vector 2 0 and 0 which means the default velocity for character body 2D is no movement at all and once we're changing the vector 2D of the Velocity to something else move and slide is going to move this body in the direction speaking of which let's click on move and slide this one moves the body based on velocity the property we just looked at and if the body collides with another it will slide along that body you can define a floor but in our case since we have a topdown game we don't need to do that here's a bit more information but for now this isn't too important I guess one more thing that we could look at is that this method returns true if the body has collided and otherwise it returns false which can be useful information but for this tutorial we're not going to use it with that let me scroll all the way to the top and there we can see another way to move a physics body 2D which is called move and Collide this one has some slightly different Collision Behavior but it's ultimately quite similar to move and slide I am not going to cover this one for this tutorial because we don't need it move and slide is what you're going to use most of the time but just keep in mind there are two different ones also if you scroll down a bit further you can see there are lots more methods that you could work with for example you could tell if the body is on the floor is on a wall is on a ceiling stuff like that it can be super useful especially if you create a platformer this is going to be incredibly helpful but for now we don't need it since we are done with this one I want to close this entry inside of the documentation which can do either by right click and close or control and w and let me close the input one as well we don't need this one either so with that back inside of the player we are updating our velocity and we are using move and slide to move this body now that we have that let me minimize the code and return to the level scene first of all I want to clean things up we don't need this logo anymore which means I can click on delete and get rid of it on top of that inside of scenes we have logo GD this script I also want to get rid of video is going to complain that we are using this script inside of a scene and I'm okay with that so now we have the levels we have level GD and level scene we have the object which is the bad and we have the player that is feeling like a much cleaner setup also if you look at the debugger now it's complaining again so let's have a look we have once again the parameter Delta is never used in the function process if I double click on that we get now process Delta is not being used anymore let me minimize the debugger actually this is something I should have covered as well move and slide uses the velocity to move the character body and it automatically includes Delta because of that we don't have to use Delta in this process function at all to indicate that we're not using it the dough wants us to use an underscore at the beginning that way this Delta is still available but we are not using it so now if I run the code again the debugger is happy again although now we're getting an error because we got rid of the logo so the level scene has quite a bit of code that is not relevant anymore inside of the ready function we are using the logo and that's the only thing we are doing in there so let's get rid of all of that same with process actually we can get rid of all of this as well with that I can run the game again and now we have a much simpler setup and this is still feeling good though I guess while we are here we can also get rid of the test function and the test array that way everything is nice and tidy all we have to do now is add an exercise and then we are done with the video and for the exercise we have quite a bit I want you guys to create another scene that is going to be a static object this specifics here don't matter too much basically go through the graphics folder and look at the objects and just see what you want to create as a static object in the end it should look somewhat similar compared to the Belt we made earlier besides that I want you guys to create a moving scene with a drone and this one should move constantly to the right you can find the Drone under the enemies folder inside of Graphics pause the video now and try to implement both of these things back in the editor let's start with a static scene for that I want to create a whole new scene click on other node because now the parent node is going to be a static body 2D first of all in there we have to add an image for that I want to have a Sprite 2D and now for the spriter Deep we have to look at graphics and in there we have a whole bunch of stuff I want to look at objects and for example what we could be looking at is let's say there's a billboard this we could work with and this I want to drag into the texture for the Sprite 2D and there we have a billboard that's a pretty good start next up I want to add a collision shape there we have a collision shape and now this one needs a shape a shape we create inside of the inspector and for this one I think a rectangle would be the best shape and this shape I now have to extend a bit remember here holding down alts let's use scale the thing in either axes and also let me move this you can use the arrow keys to move it by one pixel at a time I think this one is looking good obviously play around with this as much as you like you can fine tune things a lot in here cool with that we have a billboard finally to finish up the scene I want to rename the static body 2D to build board and then save all of this I want to save it inside of scenes there we have objects we already have the bad and now I want to save the billboard in the same folder and that is all we need for the first part of the exercise so back in the level with the level selected I want to add another child node which I can do either by clicking on the Chain symbol or with Ctrl shift and a there we have our billboard I can click on open and we have a billboard you can also transform it inside of this level scene all you have to do is go to transform and then apply for example a rotation something like this now let's run the game and there we have still our Collision this one is looking really good the bad also works so I am very happy with this what is annoying me right now is that the bad is on top of the player and this is because the bad comes after the player inside of the note 3. to fix that I want to move the player below the bed inside of this note 3. if I now run this again this is feeling significantly more realistic later on we're going to work a bit more of the drawing order but this is a much better start with that we have covered the first part of the exercise I can also close the Bad scene and the billboard scene we don't delete them we just close them in the editor you can still access them later on I prefer to have as few tabs open as possible that way things are a bit cleaner to work with now next up we have to create a drone and this one since it is going to move is going to be a character body 2D which means for the first note inside of the scene I want to have a character body 2D once again this character body 2D is going to need a Sprite a Sprite we can find not inside of the objects but rather inside of the enemies there we have a drone and this drone I want to move into the texture that's all we need from the graphics folder and next up we have to add a collision shape for that I have the character body 2D selected click on Ctrl a and add a collision shape 2D for this Collision shape I want to have a custom shape which is going to be a circle shape and if you now look very closely we have a circle shape and this I want to scale up to roughly capture the body of this drone and once again with that we have the basic setup we have a physics body an image and a collision shape with that I can rename things let's call the parent a drone and then save the entire scene for all of this I want to add another folder that I called enemies inside of this enemies folder I want to have my drone and now back inside of the level I want to add with the level node selected my drone which I have all the way at the top and let's move the Drone somewhere here so we can see it perfectly inside of the game cool with that we have a drone and the collision with the player is still working so that's a good start to finish things up we have to move this drone and for that inside of the Drone the Drone is going to get a script meaning I want to attach a new script it should be in the same folder as the Drone which it is right now and for the basic setup I want to have empty I can click on Create and there we go we now have an empty script that is inheriting from a character body 2D to move it we have to do something roughly similar compared to the player which means first of all we will need a process function this one is quite easy func underscore process and we know already we're not going to use Delta so I'm going to add an underscore right away inside of this function we now first of all need a direction then we have to update the velocity and then we have to call move and slide the direction is the easiest because I want this drone simply to go to the right at least for now for that I want to create a new variable call it Direction like we have done for the player except this one is just going to be a vector 2 that has 1 and 0. which basically means we are going to the right we could actually make this a bit more expressive because instead of 1 and 0 we can type Dot and in all uppercase letters write the outcome is going to be the same now that we have that we can update the velocity we have to Target the velocity property and then get the direction and multiply it with some kind of speed for this one let's go with 400. finally all we have to do is call move and slide and we should be good to go let's run the game and there we go we get the Drone moving and also we have collisions with the player let's try all of this again so you can see a bit better so if the Drone is colliding with the player it's trying to wiggle around it I guess making the movement speed a bit lower to 100 is going to visualize all of this better now we have a very slow drone and the player can stop it so there's collision between these two objects and if the player is simply blocking a part of it then a drone slides along the player which is what we're getting because we are using move and slide and this was a super important lecture so I'm going to finish it here but definitely play around with this in your own time it's really important to understand once again to finish up this video this kind of setup is fundamental to basically any kind of game in Godot you have some kind of physics body then an image and then a collision shape this is something you see all the time and something I'm going to use a lot as well for the next major part we are going to create an area 2D and to use an area to do properly we are also going to have to talk about signals I'll cover that in just a second first of all though a bit of a recap here is an overview of all of the Collision body 2DS so far we have used a static body 2D and we have used a character body 2D those two I think at this point should at least be somewhat doable for this video I want to work on an area 2D which as a reminder is simply an area that can check if another body has entered it can also check for other things but I want to keep it simple for now ultimately what we're going to build is an inside Area entrance and the area 2D is going to check if the player has entered this area that being said there is a problem we have to talk about right now we can use an area 2D but it would be pointless it would simply be an invisible area that can't do anything as a consequence we have to learn about some extra functionality so that the area can actually do something that functionality is called signals and signals are incredibly important basically what they are doing when a certain action happens to a node for example a body entering an area it could also be a timer running out or two bodies colliding and a whole host of other options if that happens to a node then the node can call a piece of code somewhere in your script and this is called a signal so essentially whenever a certain action happens to a node the node can trigger some code that's basically all that's happening this is also incredibly powerful to make notes communicate with each other and make your game more Interactive back in Godot I want to start by cleaning things up a bit most importantly I want to delete the Drone the billboard and the bad because we don't need them right now and I want to have a bit of space with that the only note we have left is the player let's try this scene just to make sure that everything is still working and that's looking pretty good cool once we have that I want to build an entrance e area this is going to transition us later from an outside level to an inside level there is one graphic that contains all of that this is inside of Graphics there we have objects and in there we have the gate I already had it selected if I double click on it you can see it's a simple entrance area by the way what you can also do you can simply drag the node into Godot and then it creates a Sprite automatically can be quite nice although I don't use it too often but basically what we have is an entrance area what you do want to be aware of is that only this part of the area is supposed to be visible if the player can see the area in the back it's going to look a bit broken but the idea is that all of this is collidable and then in just a bit we're going to add some walls or obstacles around these areas surrounding it that way the player can never get to this back bit for now I want to move the entrance area a bit up like so so we can see it a bit better in our current scene and later on when we have the camera all of this is going to be much more visible but for now don't worry too much about it we need to see the entrance this bit so let me run the game and there we can see we have an entrance area although it doesn't do anything right now because it is literally just an image also I want to have this below the player so the players on top of it that's feeling a little bit better once again don't worry too much about it for now with that we have an image but there are two things we have to work on for now number one is we have to add the collisions for these parts here that are supposed to be collidable as a matter of fact if I scroll out a bit I want to have a collision that goes roughly around here then we have a cutout for the entrance and then we have the rest of the collidable area for that we have to learn about a new node because now we have a more irregular Collision shape after we have that we can add an area around this entrancy bit and this is going to actually trigger an action if the player enters it but that comes next first of all let's add a collision area for that with the level node selected I'm going to add a new node which once again is going to be a static body 2D because this entire area is going to be aesthetic body 2D and this static by 2D is going to get the image as a child and with that I can also move all of that below the player so we once again reestablish the drawing order where the gate is below the player this static Point 2D now once again has a warning that we are going to need a collision shape and there you can already see we have a collision shape 2D or a collision polygon 2D so far we use the Collision shape now we are going to use a collision polygon 2D which means with the static body 2D selected I'm going to click on the plus again and I am going to type into the search Collision polygon 2D then click on enter and now we are getting another node this node on the right side doesn't have a shape instead what it has at the top these three symbols we have create points we have edit points and we have erase points I'm going to start by selecting create points and then you can simply draw points on all of this and basically draw a shape that you want around this object I am not going to be too precise for all of this let me do it like this and around here obviously for an actual game you do want to be somewhat precise here and let me finish the shape like so there you can see we have a reasonable shape that covers the area and if you want to update a point you can simply click on it and move it around like so that feels okay and if I zoom in you could be a lot more precise with all of this also when you have over a path between two points you can see a plus and you can click on it and then move this point so let me add a few more and this isn't looking too terrible at least in terms of the game this should be working okay so I can refine this a bit but if you want to have a really nice Collision mechanic for your game you do want to spend some time on all of this but in my case I don't want to keep up the tutorial too long Alright I think this is working quite well Let's test it and if I now move around there is a collision it's a bit hard to see since the gate takes up so much space but it is definitely working nice with that I can rename the static by 2D to gate that feels a bit better and now we can work on the second part the area 2D with the gate selected I am going to add another node with Ctrl a and I want to have an area 2D this once again is not going to do anything and we're getting a warning that we need to add a shape like we have done for all of the other Collision objects and this has to be a child so with the area to deselected I am going to press Ctrl a again and for this one I want to have a collision shape 2D so let's create it we still can't see anything we're getting another error that now we have to provide a shape this we get on the right side in the inspector shape and for this one I want to have a rectangle and this rectangle we can now see here so let me move it to the place where I want it to be somewhere here and let's move it to some area like this I should probably make it a bit more narrow and something like this is looking okay I guess move it a bit further down there we go this is a roughly decent entrance area but now if I run the game you can't see it and it doesn't do anything I still have the Collision so it doesn't influence the game and well the issue right now is that this area today is literally just that it's an area and unless we give it extra functionality it doesn't do anything it's simply invisible to make it do something we are going to need a signal and signals you can see on the right under the node tab if you click on that you get signals and these are all of the signals that an area 2D could send out the one we are going to use is called body entered this is going to be triggered whenever a body like a character body 2D enters this area 2D we could also check for another area entering or exiting we could check if an area shape is entered we could check for a whole range of other things and these kind of signals are available for every node although every node has different kinds of signals for example if we click on the player we have signals for example for input or Mouse entered or exited but they are not as useful if I click on the level we get even fewer for example in there we have a signal if the current node is ready if it was renamed if it entered the tree or if it exited the tree which means it was deleted or well a couple of others but they're not too important area 2D is one of the nodes that has most of the signals that you actually care about to actually use a signal you have to double click on it so in my case I want to have the body entered I double click on it and now we get another dialog essentially what is going to happen when this body entered is triggered we are running a function somewhere and this function we can only run when we have a script so we have to connect this signal to some kind of code inside of this scene right now in the scene we have two notes with a script we have the level and we have the player I want to connect it to the level which means with the level selected you can see it we have a script there I want to click on connect although before I do that you could also rename the function we are going to call although you probably shouldn't so let me just click on connect and now we have a function inside of the level so inside of this node inside of the script of this node to be more specific we have a function and this function will be triggered whenever a body is entering the area 2D on top of that you can also see on the area 2D node we have a symbol that says node has one connection which basically means to notice one signal Let's test this one if this is the case I want to print let's say body has entered and now if I run all of this we already get body has entered and if I go into this area a couple of times with the player you can see we get body has entered multiple times the reason why we are getting body entered by default is well the player is already inside of this area when the game is starting that probably shouldn't be the case so let me move the player a bit outside of it now if I run this again we don't get any message by default but if I move into this area we get body has entered and this I can do multiple times understanding signals is another super important part of Godot so if you want to play around with these signals a bit more I would definitely recommend you to do so I guess I could add another one for example we could add body exited this is the opposite of body entered it's going to be triggered whenever a body exits an area for that I have to double click on it and I have to once again connect it to some kind of script this once again I want to do for the level so now click on connect again and now we have another function inside of the level node this one could for example print body has exited now if I run the entire thing again we get nothing by default if I enter the area to the body has entered and if I exited body has exited I think if you play around with the system it should be fairly straightforward there isn't that much to it I suppose one more thing that you should be aware of is that sometimes a signal gives you an argument in this case it is the body that has entered you can see it because we have one argument that we get by default into this function for example we could print this body and now if I run it again we get body as entered and we get the player character node because this is the body that has entered this area 2D so when we are printing the body we are printing the player let me expand the right side a bit sometimes a node has a lot of arguments for example when we look for area entered we can capture the area that has entered or if we look for area shape entered there is a lot of extra arguments you get you do want to be aware of them because sometimes they are really useful although in this case we don't need them because of that and you can already see it in the debugger we have one warning that the perimeter body is never used in the function so Godot wants an underscore or at least it would very much recommend it underscore so for that I'm going to add an underscore to both of these functions and get rid of the print statement because we are not going to need it with that we have covered the basics of a signal there's one other place where we are going to use it right away that is going to be inside of the player right now the player can shoot a laser and shoot a grenade whenever we are pressing the button let me demonstrate actually I can click on the left Mouse button and we're getting shoot laser as fast as I can click the button same with the grenade if I right click we're getting a grenade as fast as I can click this is not what I want instead I want to have a delay between shooting laser or shooting a grenade and for that I am going to add a bit more logic all the way at the top I'm going to add two variables the first one is going to be called VAR can underscore laser this one is going to be a Boolean which by default is going to be true after that I can press on Ctrl or command shift and d and duplicate the entire line I am going to change can laser to can grenade which is also going to be a Boolean that by default is true both of these booleans I'm going to use inside of these two input statements first of all I am only going to allow the player to shoot a laser if the input action is true and can laser is also true same for the grenade I want to check for the input and can renate also once again here GD script works like python where you don't have to add can laser is equal to true if this value is true by itself then 3D script is going to evaluate the entire thing to true inside of the function now I want to set can laser to false and can grenade who folds as well if I run the game again I can shoot exactly once so if I left click I can shoot once and not do it again and if I right click I can also shoot grenade once but not again that is because we can only do either of these things if can laser or can grenade is true which it is not once we have done it once because we are setting it to false now we have to use a timer to reactivate both of these variables and timers are simply another node so with the player selected I want to add another node and this node is called a timer a timer has a couple of parameters you can work with we have a wait time this is the length of the timer then we have one shot this one tells the timer to only run once and if it's deactivated it will run continuously finally we have auto start this tells the timer to start automatically once it was created also a timer has a couple of signals that you want to be aware of although timeout is the one you really want to care about once we have all of that we can do an exercise I want you guys to set the timer duration to half a second and the timer should be started once the laser is shot for that check out the methods of the timer after you have that once the timer finishes can laser should be set back to true and for that you want to use a signal finally add another timer and do all of that again for the grenades the one difference now is that the cooldown should be two seconds pause the video now and try to implement all of that back inside of Godot we have to cover a couple of things first of all for the timer I want to set a wait time to 0.5 that is going to be the length of the timer on top of that since I only want this timer to run once we want to enable one shot although AutoStart should not be enabled because we want this timer to only start once the play has shot a laser speaking of which we have to look at some code because once all of this code here is run we want to activate the timer this we can do quite easily I first of all want to get the timer itself I can simply drag it into the code we have a timer and to start a timer we need the method start the last thing we have to do is once the timer has finished we want to set can laser back to true for that we will need a signal inside of the node I want to use the timeout signal I double click on it and connect it to the player script I don't have to change the name this one is perfectly fine I can click on connect and now we have on timer timeout this is going to run whenever the timer finishes or times out what I want to do inside of it is I'm going to set can laser back to true that should be all I need so now I can run the game again I can now click as fast as I want but we only get shoot laser every half second we can actually test this if I set the timer to something longer in the inspector let's say two seconds entry out of this again I can now click it and it takes longer to shoot the laser again but we do still get it cool 0.5 here was a better value though next up we have to add another timer for that with the player selected I am going to add one more timer and this timer I'm going to rename to grenade reload timer in your game it would probably also be a good idea to rename the laser timer although in my case I'm not going to worry too much about it this grenade reload timer is going to have a wait time of two and one shot should also be enabled next up inside of node I want to connect the timeout signal so I double click on it and connect it to the player script inside of that function all I want to do is set can grenade back to true that should be all we need so now I can still use shoe laser and now if I right click we get shoot grenade if I keep on pressing it nothing is going to happen the reason for that is inside of the input statement for the secondary action we're not starting the timer for the grenade that we can do quite easily I need grenade reload timer and drag it in there and then start it now let's try this again I can still use the laser and now shoot grenade should work every two seconds and this is looking pretty good cool with that we have covered a really important part of Godot signals especially for an area 2D or for a timer is something you are going to use all the time another really important thing you can do with signals is create your own and this sometimes is absolutely necessary you can create your own signals but why would you want to do that the reason is that the major limitations of signals is that they can only work between nodes inside of the same scene and triggering custom signals can really help you to communicate between scenes we actually already have that problem to an extent let's have a look inside of our level scene we currently have two main children we have the player this one is totally fine and then we have the gate the gate Dome if I expand it is quite extensive ideally all of this should be a separate scene but this we can't do right now because the area 2D node sends a signal that is being captured by the level as a matter of fact let's rebuild all of this and then you can see very well where the problem is and for that let me close the Drone scene and I want to create a new scene I want to add a static body 2D which is going to be the gate and this gate is going to be the same thing that we have done with all of these nodes which means first of all I want to add a Sprite 2D which is going to get the gate like so on top of that I want to add a collision polygon 2D that is going to get a couple of points let me do it a bit more quickly because once again for this tutorial it's not too important how this looks and especially the corners are something you want to spend some time on but in my case I'm not worried too much there we go this is looking passable next up we have to add the area 2D and the Collision shape for that I want to add an area 2D and this area 2D is going to get a collision shape 2D this if I zoom in a bit we have to add on the shape we want a rectangle and this rectangle is now all the way at the top and I want to extend it a touch like so this really doesn't have to be too large also what you want to avoid for now is this area 2D touching on the static body 2D when we are looking for body entering this shape a body could also be the gate itself so you do want to be careful with that but we can account for that I will cover that in just a bit now we have the basic setup and this I want to save under scenes and let's put it under objects it's basically just that with that we have a gate so I can get rid of all of this stuff so delete and also inside of the level I want to get rid of both of these functions because the nodes sending the signal doesn't exist anymore instead with the level selected I want to attach the gate which I can do by selecting the scene and there we go now we have functionally the same outcome although if I run the game we don't have any kind of signal once the player enters this area 2D also I want the gate to be below the player so it looks a little bit less bad the major issue is with the area to deselected I can click on node and I want to run some code if a body has entered this area 2D but if I now click on it I cannot select any node outside of the scene which is a problem because I have to connect the code to this level script and this is really important because the level is going to organize the entirety of the game so it needs to have the information if the player has entered or not we couldn't keep that logic organized inside of the scene it just needs to be available in more spaces and to make all of this work we have to send a custom signal this custom signal we're going to create inside of the gate or more specifically the root node of this scene this is going to get a script so objects and gate the folder is perfectly fine and now we have a script attached to the gate I don't need any of the inbuilt functions instead what I want to do first of all this area to D is going to now be connected to this script so body entered and now since gate has a script I can connect a signal so on area 2D body entered I can now once again print body has entered this would also work so if I run all of this I can run into it and now a body has entered so this is still working the issue now is that this information I need to know inside of my level script and to make that work we have to create a custom signal this is actually quite easy and it works somewhat similar compared to creating a variable the keyword to create a signal is called signal next up we have to give it a name let's call it player entered gate and once you end that these two keywords the word signal and then a name for your signal back in the level you can select the scene and under note you now have player entered gate and we can see at the top this is because inside of gate.gd we now have this signal this is a custom signal you can see at the tabs where a signal is coming from for example some signals are connected to a node other signals are connected to a canvas item and some are connected to a collision object 2D but in this case we have a script and this is where this signal is coming from and this signal you can use like any other signal so I can double click on it and now connect it to the level and now we get on gate player entered gate the naming here isn't ideal but uh well you get the idea if we are triggering the signal I now want to print layer has entered gate there's one more thing that we need though and that is inside of gate.gd we have created a signal but now we have to trigger this signal or more specifically the keyboard here is called we have to emit the signal that is because this function right now can only capture a signal but it doesn't know when the signal is being triggered and this we can do quite easily because we know when the body has entered the area 2D then we want to trigger this signal and this means instead of the print statement I want to get player entered gate and then emit this signal and don't forget to call it and now if I run all of this again we get back to player has entered the gate this is run inside of the level there we have player has entered the gate now the logic for all of this can be a bit confusing so let's go through it one by one we start inside of the area 2D node and this one has one signal attached body entered if this one is triggered we have some code inside of the parent node which is gate if it is triggered the function is this one on area 2D body entered this is the signal attached to this area 2D if we are emitting this signal we are emitting our own custom signal and this custom signal we are capturing inside of the level where it is now being emitted from the parent node so the gate and the result is going to be captured inside of the function on gate player entered gate now this is something you absolutely want to practice although before we get to that inside of the gate we don't need the body anymore because we assume that the body entering is going to be the player but while we are here you can add an extra argument or extra arguments into your own custom signals as well all you have to do for that is add parentheses and then the argument you want to add for example in this case this could simply be a body and then when you are emitting a signal you can simply pass the body in there and then after you have that inside of the level you need a parameter to capture this body let's call it body as well and then you can print the body and you should be good to go let's try out of that and now we get player has entered the gate and player character body 2D whatever we have in there I would very much recommend you to play around with this in your own time it is really important to understand custom signals because they allow you to make scenes emit signals as well and that way you can get a signal from inside of a scene and then work with this across multiple scenes and the exercise I want you guys to do is make the player emit a custom signal called laser when the laser input is detected and then inside of the level scene I want you guys to capture all of that and print laser from Level finally do all of that with the grenades as well pause the video now and try to figure this one out back in the editor I want to look at my player specifically I want to look at the script first of all all the way at the top I want to create a signal the signal is going to be let's just call it laser for now we don't need any arguments but later on we are going to add some for now though I simply want to admit that a player has shot a laser and for that also let me extend the window a bit if the player is clicking on the primary action and can laser is true if that is the case I know the player has shot a laser and because of that I want to get the laser signal and then emit that is all we need for this one so now we can return to the level click on the player and we now have a laser signal I am going to double click on that and connect it to the level node so connect and now we get on player laser we can't do very much with that just yet so for now I am simply going to print laser from Level now that we have that back inside of the player I can also get rid of shoot laser because we don't need that anymore and that should be all we need for this part so let's try all of this if I now left click we get laser from Level so this is working just fine and on top of that the other signal also works perfectly well next up all we have to do back inside of the player I want to create another signal this one is going to be called Grenade we are triggering this one if the player is pressing the secondary action in here I want to get grenade and then emit also now I can get rid of the print statement because all of this logic should be inside of the level so back inside of the level scene I now have another signal that I want to connect to the level and this one is going to print renate from level all of that I can run now I can left click I get laser I can right click I get grenade every two seconds and I can move around and I get player has entered the gate this is all we needed and with that we also have made huge progress to connect different nodes across different scenes which is incredibly important this level C now it feels significantly cleaner where we have one node for the gate and one node for the player earlier we had all of this stuff here inside of the level scene and if you did that for hundreds of objects it would be incredibly difficult to manage the next major aspect I want to work on is to create custom scenes in code and this is another really important aspect let's talk about why so far we always created scenes inside of the editor for example we made the gate we made a player we made lots of things like that but sometimes this isn't possible or desirable in the game for example when we are working with the lasers something we are going to do for this part we cannot just create a scene and then add it because we have to do all of that dynamically meaning we want to create a laser whatever the player is shooting and for that we have to use code to create and instance a scene let's talk about how this is going to work number one we have to create a scene in the first place this we are still going to do manually which means we are going to put together a couple of notes that are going to constitute the laser and that's going to be one scene this part we have already done multiple times it shouldn't be too difficult at this point number two this is something we haven't done yet we have to create an instance of the scene the way you have to think about it is that when we are creating a scene we are basically creating a blueprint which by itself doesn't do anything and once we are creating an instance this is a really important word then we are creating an actual node that we could use in another scene and once we have this instance we need to go through one more step and that is we have to add this new instance of the node to the node tree this is important because at step number two when we have an instance we only basically have a node that we can work with but it's not attached to our current scene and for that we need step number three where we add it to the node tree only then can we actually see and use it inside of the game so with that we have quite a bit of material to go through let's jump into Godot and let's have a look back in the editor I want to first of all close the gate because we don't need this part anymore next up I want to create a new scene and now I have to figure out how to create a basic scene for the laser and the most important part for now is we have to think about what the root node is going to be and let's talk about how we have to approach this we have area2d static body too deep rigid body 2D and character body 2D now when we are creating the laser we want to move the laser obviously so we have to choose one of these that can collide with something and that can move the one I'm going to go with is the area 2D this is a node we can move perfectly fine and it can also detect collisions which is basically all we need alternatively you could also use a rigid body 2D or even a character body 2D although you probably wouldn't want to a character body 2D would probably be Overkill because a laser ultimately is quite simple and a rigid by 2D also isn't really that necessary because laser is moving at a constant speed we don't really need any kind of advanced physics in there although later on when we are working with the grenade we are going to work with a rigid body 2D but now though we don't need it the way you want to think about it is that you always want to use the simplest note that you can possibly use in this case this would be area 2D I want to create another node which is going to be an area 2D this area 2D I want to rename to laser right away and now we have to do the usual we want to add a Sprite and I want to add a Collision shape 2D for the Sprite we will need a texture which we get inside of graphics and in there we have projectiles the file we need for this one is called Blue I just have to drag it in there and then we are getting the image of a laser next up we have to add the Collision shape for that I am going to go with something we haven't used yet which is a capsule this I want to extend a bit and basically what this one is is a rectangle with rounded corners once again as well I want to keep the center of this Collision shape around the origin point so position 0 and 0. so I'm going to move the image to a line with the Collision shape I think that's looking mostly okay you can play around with this a lot and if you want to have a really well working game these small details are really what make a good game so I think this one is a pretty good start this seems reasonably okay which means I can save the entire scene under scenes and in there I want to create a new folder let's call it projectiles and I can save it in there and now we have a laser this would cover the first part so now we have created a scene next up we have to create an instance of this scene in the new scene where we want to work with this what that means is I want to use this laser inside of the level specifically I want to create an instance of the laser when we are triggering the on player laser event for that we have to go through two steps first of all we have to preload the scene we have just created and this happens all the way at the top I want to create a new variable let's call it VAR laser scene and to preload a scene we need the function preload and this preload wants to have a scene since we do have quite a lot of stuff in there you usually just want to type the name of the scene and then Godot is quite intelligent about it and gives you the scene make sure that the ending is tscn this is a scene if you have PNG or anything other than TSC and in there something probably went wrong you can be even more aggressive about it and force a certain data type the data time we're looking for here is called a packed scene so now we have a scene ready that we can use what we have to work on next is we have to create an instance of this scene this is turning the actual scene into a node that we can use in our currency that is actually quite easily done and I want to do all of that inside of on player laser all I want to do in here is create a new variable that I'm going to call Laser and this laser is going to be an instance which means I want to get the laser scene the one we created up here and then run the method instantiate on it with that we have an instance of the scene which is covering part 2 of our requirement all that is left to do is to add this scene to the note 3. this we can do with a simple function it is called ADD child and the child we want to add in this case is going to be the laser with that we should be good to go let me run the game and let's just see what happens if I now click on the button you can see we have the laser the reason it is up there is because well inside of the laser we always are in the top left point and we don't update this position because of that we always have the laser in this point and it's not moving so we do have to make some updates but it's certainly a good start on top of that what is another really powerful part of Godot if I go back to the standard view if the game is running like it is right now so I can still run around perfectly fine then you can return to the editor just fine and you can actually look on the left there is besides local where you can see all of the notes every mode tab this is only visible when the game is running and this shows you in real time what is happening inside of the game so right now we have root this is a technical part but then we have the level this is this level scene inside of there we have the gate and we have the player these are the two notes we have added ourselves but after that we have the laser four times and if I go back to the game and I keep on clicking we add more and more lasers so we can tell in real time this is showing you what's going on in your game which is incredibly helpful to debug your game also when you click on them you can look at the inspector and get a lot of information about what's going on all of this updates in real time which is super useful although in my case I want to close the game because we don't need it right now for now there are two things I want to work on and let me add comments number one the most important thing is we have to update the laser position right now the laser spawns in the top left and well that's a problem number two we have to move the laser that part should also be fairly obvious and I do want to add a number three which is a bit smaller I want to add the laser instance to a node to E right now we always add the laser to the level scene itself which tends to get a bit messy because we just have a whole bunch of notes in there instead what is going to be much cleaner is if we add another node to D that we could rename as projectiles I want to add the lasers to this node that way the entire scene itself keeps much cleaner but we're going to work on that in more detail later on first of all though we want to update the laser position and that in the most basic sense is actually really easily done because this Laser Now is also just a class and we know how to update the position of a class all we have to do is get the laser and then get the position this position could for example be the player position which means I can simply drag the player note in there and then get the position of the player now if I run the game I can click and the laser is going to be on the position of my player which is already a pretty good Improvement but not perfect yet so instead what I want to do and let me illustrate the problem we are spawning the laser around the center of the player so this Red Cross which isn't realistic ideally we want to spawn the laser somewhere from the position of the top of the gun and for that we can actually learn about another node and about some Randomness which are two very important Concepts in gudo so what I want to start with is I want to get a couple of random positions around the top of the gun around here I want to have three random points distributed something like this for that we are going to need a marker 2D although this I want to organize because our player scene starts to get a bit messy so inside of the player I'm going to add a node 2D this one is not going to do very much it's just going to hold other notes I want to call this one the laser start positions what is actually going to become important is I want to add another node and this node is called a marker 2D this marker 2D if I hover over the center let me show my mouse actually if I hover over the center we have a marker 2D and this I can move a marker 2D is literally just a position you don't use it for anything else if you look on the right there really isn't too much so let me put it roughly in the middle that looks about right then I want to duplicate this node so with the node selected I click on Ctrl D and now we have a marker 2D2 and this I move somewhere here I can do the same operation again and now move the final marker somewhere here with that I get three different points and those are supposed to be my laser starting positions next up inside of the code first of all when the player is clicking on the primary action I have to randomly let me add a comment I want to randomly select a marker to D for the laser start which means I want to pick one of these three notes and that is going to be the actual starting position for the laser number two this is going to be right inside of emit I want to emit the position we selected when we are emitting the signals for the laser we also want to emit the position so there are two things we can work on let's start by randomly selecting one of the markers well that first of all I want to get all of the markers inside of a list that is going to make our life much easier I'm going to store all of this in a new variable let's call this laser markers to get the laser markers first of all I want to get the laser start positions this is just going to be a node 2D right now although this node 2D has children and these children we can get with the method get chilled during once we have that I can simply print the laser markers and let's see what we get if I now run the code and I click we are getting a list inside of the output with three markers we have marker 2D another marker 2D and the final marker 2D this I also want to store in a variable let's call it VAR selected laser and this should be a lowercase to get a random item from a list we first of all need the list itself so laser markers and I should say this is an array not a list but the difference is fairly minor on that we want to use indexing for example we could use index 0 this will give us the first item or index one this would give us the second item but we want to have a random item for that we will need random numbers in good dough which always is a tiny bit weird basically what you have to do is use the function Rand I then we need the modulus operator so the percentage sign that looks like this and then we need the highest number which in our case is going to be the laser markers Dot and this would be the size and just to test if this is working let me print the selected laser if I now Run the game again I can click and I always get some kind of marker there is some Randomness although since we don't have too many nodes it's going to be a bit hard to see but they can definitely tell we get random markers there are other ways to create Randomness but this is one of the more common ones you are going to see you want the function rant I then the percentage sign and then the highest number that you want for your Randomness in our case the number here would be a three because there are three items inside of the list and this would give us a number that goes from 0 up to three but not including free the possible numbers we could get would be 0 1 and 2. and those we are then using for indexing on the laser markers with that I can get rid of the print statement and of the comment as well next up I want to emit the position that we are getting from this selected laser position and something like this we have already done so I want to go all the way to the top there we have the laser signal this signal should contain one argument which is going to be the position now that we have that when I'm emitting the laser I want to also as an argument include selected laser and then the position of this one node that is actually all we needed now we are emitting a position in this position we can capture inside of the level because now on player laser is going to contain one argument which we can capture in a parameter which is going to be the position and this position we now want to use to set as the laser position let's try all of this now if I click nothing is happening however if I go back to Godot and go back to normal View and remote you can see we have the lasers and if I keep on clicking we also can see we are generating more lasers so the tool tip is a bit annoying right now but if you look at the scroll bar we are definitely creating more lasers so this is working basically the one change we have to make we don't look at the position of the selected laser instead we want to look at the global position now if I run all of this we can see the laser and this one is working perfectly fine which begs the question what is a global position and how does that differ from a normal position let's talk about it so far we always used a local position and this position is always relative to a parent we are basically measuring how far off we are from the center of the parent a global position however is an exact pixel coordinate that is independent from any parent the way you want to think about it is imagine you are sitting in your house right now you do have some relative position to the center of the house this would be your local position but that being said you still have even in your house a specific GPS location and this position doesn't care about the position of your house this would be your Global position to be a bit more specific for Godot imagine you add a node 2D with an offset of X100 and y200 and you give this node a child on the same position the child node would have a local position of X being 0 and Y also being zero that is because we didn't move it away from the parent however it does have a global position of 100 and 200 because that is the actual pixel position understanding local and Global positions can be a bit tricky especially in the beginning I suppose for now just generally keep in mind that there can be a difference and just experiment with the two eventually this should become fairly straightforward with that though we can return to Godot because now we have the laser and this is covering the first part we have to update the laser position so I can get rid of that next up we have to move the laser for that I want to return to the laser and now the laser is going to need a script so I click on attach a new script for the template I want to go with empty and for the folder we are still in projectiles so I am happy with that I can click on Create and now we have a script first of all I want to Define some kind of movement speed let's just call it speed this is going to be an integer and for the number here let's go with 1000 for now once we have that we are going to need a process function all we want to do in there is to update the position of the laser so I want to change the position and all I want to do is I want to have some kind of Direction in this direction I want to multiply with this speed and once again don't forget we also want to multiply all of that with Delta now the direction doesn't exist right now and later on we want to have the direction the player is looking at for now though I want to have a VAR Direction which is going to be a vector 2 and the actual variable is simply going to be Vector 2 dot up at the moment the player is always looking up so this is the only Vector we need I can now run all of this and shoot the laser and we get a laser that is moving this is looking really good at this point you probably want to experiment with the speed of the laser and there's one really nice feature of Godot when you are creating a variable at the beginning of the script what you can do is add the keyword export and this should be combined it should be orange then you know it's working what this one is doing if I return to the 2D View and with the laser selected I now get another parameter inside of the inspector and this is giving me the speed and I can update this so let's say to 2000 and now if I run the game again the lasers are moving a lot faster all this export does is it exposes the variable to the inspector so you can change it much more easily which very often is really nice and makes the game much easier to update cool in our case this is covering another important part we can now move the laser finally I want to add an instance to laser to this projectiles instead of the level node and this is super easily done right now when we are calling this a child we are calling the function on the Node the script was attached to which is this node 2D right now I already have it selected to add the child to another note all you have to do is get a note itself so let me drag in the projectiles and then run the method ADD child don't forget to actually add the child which is going to be the laser and then we are good to go if I now run all of this again click on remote you can now see if I move the game to the side inside of projectiles we have a drop down and we keep on adding more lasers it has a bit of a delay but it definitely works cool with that we have covered the final part all we have to do now is do an exercise and then we are good to go when this secondary action is triggered I want you guys to create a grenade scene with a rigid body 2D for now the movement is going to be really weird so don't worry too much about it I'll cover that in the next part once you have that create an instance of this node in the level scene and position it at the gun nozzle position basically I want you guys to repeat what we did for laser except with the rigid body 2D the major difference now is that instead of a laser we have a grenade you can find the image for that next to the lasers in the graphics folder pause the video now and try to implement all of that back in Godot I want to create a new scene and this new scene is going to be a rigid body 2D let's rename this right away to grenade like with the laser we're going to need two more nodes we first of all need a Sprite so we can see something and then we need a collision shape 2D the Sprite we're getting from projectiles and there we have grenade let me place it in there and there we go we have a grenade for the Collision shape I think for this one a circle shape is going to be ideal something like this with that I can save all of this as grenade next to the laser before we are using this I want to inside of the level just attach this scene with Ctrl shift and a and add the grenade because I think by default this one is a bit large it's even larger than the player for that inside of the grenade I want to get the Sprite 2D and transform the scaling to let's say 0.2 also now I have to update the Collision shape to something like this save the scene and now we have a grenade that's probably a bit too small let's go for a scale of 0.4 once again we need a new Collision shape that's looking good and now this feels much more appropriate now that we have that we can work inside of the level script to create an instance of this scene once the player clicks on the secondary action which Triggers on player grenade I guess as a reminder when the player is clicking on secondary action then we are emitting the grenade signal and this grenade signal we are capturing inside of this function first of all though we have to create a laser scene like we have done for the laser earlier to keep things consistent I want to get a grenade scene which once again is going to be a packed scene which I want to preload and in there I want to get the grenade spelling this correctly would help a lot for this one now we have a couple of options we have grenade.png then inside of the UI we have another Grenada PNG and then we have the actual scene so be careful which one you are choosing here once again you always want to have a tscn ending I guess Udo is quite smart here if you choose anything else like the image you are going to get an error like so that you cannot assign a value of a compressed texture 2D to a variable grenade scene that is because we have a specified type packed scene so this packed scene is actually quite helpful here so let me undo all of this this is going to work much better next up we have to create an instance of this packed scene which I Do by creating a new variable let's call it grenade and for that we want to have the grenade scene and then instantiate next up I want to get the grenade and then update the position and set the position we are hopefully getting from this signal right now it doesn't exist so Godot is giving us an error to fix that inside of the player disc grenade emit has to include a position I suppose for this one we could go with a random position and if you want to practice that I would very much recommend you to do so although to simplify things a bit I want to get a position let's call it the marker an alternative way of approaching all of this is once again I could get the laser start positions on that I want to get the children once again and on that I simply want to pick child number zero this is the one I placed in the center so this one should always work just fine since this is now going to return a note I can get the global position on this one right away let's actually remove the marker because now we are simply getting a position in this position I want to emit when we are sending the signal so with that back inside of the level I get another parameter which is the position and with that Kudos should be happy again perfect finally we have to add this new grenade to the Note 3 and for that I am going to reuse the projectiles node 2D so I want to get projectiles and then add a child except now the child is going to be the grenade and with that I can run all of this if I now click with my right Mouse button we got some weird Behavior we do get a grenade but well it's falling down and that's a very weird Behavior the lasers though still work just fine and this part is getting really long so let's finish it here and in the next part we talk more about rigid body 2DS if you understand them they're quite easy to work with but if you don't they are really frustrating let's cover the final Collision body which is a rigid body 2D on top of that for this part we are also going to cover the player rotation that way we can shoot in different directions something that is very much missing right now but first of all a reminder here are all of the Collision objects at this point we have covered an area 2D in detail we have covered static body to these and we have a character body 2D so the only thing missing is a rigid body 2D and as a reminder this is a moving body that moves by a physics it's basically a cannonball we already created the grenade so we already have some pretty good starting points however if I go to godo I can already show you as a reminder that right now the grenades are acting really really weird so what's happening here the issue is that a richer body 2D has a gravity setting which by default is set to 1 which means it is falling down which is the issue we have to deal with right now besides that you can also set physics behavior in the inspector and there are additional options that you set via a physics material I'll cover those in just a second finally you are only supposed to give this rigid body 2D a starting velocity all of the other movement is handled by physics and that once again is quite a bit of theory so let's have a look at all of this back in the dough I want to have a look at the grenade and on the right we have the inspector right now the major issue that we have is this gravity scale this is set to 1 and this means that things are moving down if we set it to zero and start the game again I can now shoot a grenade and it doesn't fall down anymore we also get collisions but that's just about it nothing else is happening basically with this setup we have a static body so how can we actually change things for that you would want to look down a bit and there we have linear and angular linear is the easier one in there for example we have velocity this is the movement of this rigid body there we have X and Y for example if I set X to a hundred and run all of this again then we have a movement to the right and this works for all of the objects we are going to create so this is working just fine also we get collisions looking pretty good you can set a few more things in here for example there's angular velocity we have constant forces but I don't worry too much about those instead what I want to work on is the physics material and spam this a bit we have a physics material overwrite right now it says empty but if you click on it you can give it a new physics material and this gives you a few more options and in particular bounce in there is an interesting one for example this we can set to something really large let's say a hundred and now if we run the game again and we get a bounce there the grenade is bouncing off our player we can do this a couple of times let me create another grenade and yeah we get another bounce if we set this to a lower number let me set it back to zero and we do all of this again now we get a different kind of bouncing behavior all of these numbers depend very much on the mass the inertia then the physics material and then all of the other stuff you can set in here if you want to have really good physics Behavior you want to play around in this a lot although in my case I'm not going to worry too much about it instead what is much more important right now is that right now we always shoot the grenade in One Direction so right now this would be to the right but this obviously doesn't work terribly well so we have to figure out how to control the starting direction of this grenade and for that once again we will need some code although first of all I want to minimize the physics material if you click on it you can maximize and minimize it and I want to set the velocity back to zero once we have all of that I can have a look at the script and we are creating a grenade inside of the on player grenade function right now we are only setting a position what I also want to do is get the grenade again and then set a linear velocity right now Godot doesn't auto complete this line and there's actually something super useful I can cover right away we know that this grenade is a rigid body 2D and a rigid body 2D if I open the inspector has a linear velocity so it should come up in the autocomplete however it doesn't so if I type linear nothing is happening the reason it doesn't is because Godot doesn't know that this grenade is a rigid body 2D but we can give godo a hint or rather we can tell to instantiate this object as a rigid body 2D that way the grenade now is going to get a linear velocity which is much easier to work with you don't have to add these things but very often game development or in development in general you want to be really precise about the types of data you are working with so adding this s can be super helpful but anyway this linear velocity wants to have a vector let's just give it one and let's say for now we want to have a vector 2 that is always pointing up so we always shoot North this we can multiply it by a speed let's say for now a hundred what this one is going to do is now the grenade is going to move up the grenade we had by default in the scene is not going to get this attribute so as a reminder let me minimize this inside of the level I have created one grenade to test the scale and this one we are just adding as an instance inside of the editor however inside of the script when we are creating the grenades we are updating the position and the linear velocity which means the grenades we are creating inside of the function are going to move but the one we created just here is not going to move I hope the difference here makes sense you could also work with different directions now for example this could be left and let me run this again now we get a grenade moving to the left so this is still working just fine that being said we don't just want to have a hardcoded direction we want to shoot in the direction the player is looking at and for that we have to add a few more things first of all we have to start with the player so right now the player is always looking up and this obviously isn't ideal fortunately we can change that super easily inside of the process function I want to add another entry let's call it rotate layer or just rotate basically what we want to do is we want to play it to always look at the mouse meaning if the player is somewhere here and our Mouse is somewhere here we want the player to rotate and look at the mouse for that Godot has an inbuilt function that is incredibly helpful this one is called look at and this look at function is rotating any kind of node so it looks at a certain Vector you can see it in the prediction we get Point vector 2. the point we want to look at is our Mouse position and this we can get very easily we need another function that is called get Global Mouse position and that is almost all we need at this point I can run the code and we're going to get something weird you can see my mouse and the player is rotating but it is rotating in the wrong way so we basically have a 90 degree offset the reason for that and let me minimize all of this and explain things a bit more so here is the player we want the player always to look at straight ahead and let's say here's the mouse this would be the ideal right now however the issue is that the player always rotates in roughly this direction so what's going wrong the answer for this one is actually quite easy the default rotation for a vector is always going to the right so this is the default zero position and since our player currently is looking up we are giving it a negative 90 degree offset which is what's causing the problem inside of the game to fix that we have to get our player image then go to transform and then rotate all of this by 90 degrees and now we have to realign the playup with the Collision shape and this should work much better if I now run all of this again there we get a much better Behavior so this I am quite happy with although now if I actually click on the mouse button we get some weird laser spawn Behavior same with the grenades this doesn't work terribly well the reason for that is now we have the gun nozzle here and the laser starting positions are here that fortunately is quite easy to fix let me zoom in a bit all we have to do is take the markers and move them in the new position it doesn't have to be too precise but try to get it something like this way of that I can run the game again and now we get a laser from the top of our gun same with the grenades and this is definitely an improvement cool however now we have another problem and that is you could already see it the lasers always go up and the grenades always go to the left which means we have to add a few more things and let's start with the grenade and sending the signal I actually realized I forgot to add the position down here when we are emitting the signal for the grenade we already included the position and this still works even if you don't add it but it's better phone to include it I want to include a position and besides that I also want to include a Direction this direction we have to get all of that is going to happen inside of the secondary action if statement I besides a position want to emit a direction which doesn't exist right now so we have to create it let's create another VAR Direction so what are we going to need for the direction well what we are going to need is some Vector math we basically want to figure out and let me draw all of this our player would be somewhere around here the actual position doesn't matter so much and then we have a mouse position and what we want to know is the direction so what is this angle going to be and for that some very basic Vector math is going to be what we need and let me simplify the drawing this is our player let's call that P and then we have the mouse let's call this one m that is the worst M I have ever made that should look more like this to get the direction between two vectors you always want to have the target Vector which in our case is the mouse position and from that you want to subtract the starting Vector which in our case is the player position which means all that we want to do we want to get once again get Global Mouse position and from that we want to subtract the player position the position of the player we can get quite easily this is literally just a position because remember this script is attached to the player so a position is just the attribute of the player and with that we have a good start although Godot is complaining there is already a variable named Direction declared in this scope as a consequence we have to rename this direction let's call it player Direction and this is the direction we want to emit when we are emitting the grenade signal that being said there's one more thing that we do have to do this outcome which is going to be a vector we have to normalize what does that mean well back to the drawing and let me clean all of this up once again let's say the player position is at 200 for x and 100 for y this is just the position and the mouse could be at something like let's say 300 and 200. if we subtract one from the other the operation we have done down here all that we're doing we are getting our Target Vector which is 300 and 200 and from that we are subtracting 200 for x and 100 for y the result would be 10100 what these numbers mean is that we have to go 100 pixels to the right and also 100 pixels up and that way we get from one point to the other point now these numbers are useful for the position but for a Direction they are useless because what we want to do in just a second is we want to multiply this with a speed for Simplicity let's say our speed could be 500. a result of all of this would be a huge number way too large also it would be inconsistent if the mouse so this point is further away let's say it is at a position 1000 and 500. we would get one thousand and we would get 500 and from that we would be once again subtracting two hundred and one hundred the result would be 804 100. having these two numbers being different this direction and this direction are inconsistent the outcome would depending on how far away the mouse is from the player we will get faster or a slower movement so I hope all of this makes sense basically what we want to do is we want to normalize the direction that we only get the direction but not the length of this vector and for that we will need normalized this is a really common operation you do in game development is it reduces the size of the vector to 1. which would turn the length of this vector and this Vector identical so that when we multiply it with the speed we always get the same outcome okay there was a lot of explanation for not very much code but this is what we need to get the direction that the player is currently facing at this we can now use inside of the level because there we have on player grenade besides a position we also get a direction now and this direction I want to use instead of the vector.left so Direction and now this should be working much better so I can shoot a grenade and I always have to wait two seconds but now it moves in the right way so this is looking much better one more thing that I do want to do right now the speed is always 100 and that I don't like so much back at the grenade I want to add a script and the script once again I want to have in the same folder where we have the scene this one is looking good and for the note I want this to be empty so create and now we can set a VAR speed and let's go with 750. although this doesn't have to be a variable this can just be a constant because it's not going to change with that back inside of the level and once again I want to extend all of this I want to get the grenade and this now has an attribute which is going to be the speed let's try all of that again it is working well the grenades are moving faster so that's a good sign although there's one thing that I do want to do so let's say I hit a wall something like this right now the grenades stick to the wall almost perfectly but that I don't like so much to overcome that I am going to work inside of the inspector inside of the physics material I'm going to set the friction to 10 and the bounce to 0.4 besides that under linear we have damp and this I want to set to 1.6 with that if I try all of that again and hit a wall we get quite a bit more bounce that I do like a bit more also when we had other rigid bodies we get basically billiard so if you want to make that kind of game you now have a really good start with that we just have to do an exercise and then we are done with another really important bit I don't think we have the practice of rigid bodies too much because they're ultimately not that complicated however what I do want to practice is the laser and this is the one part of the game that we definitely have to work on I want you guys to move the laser in the player Direction like we have done for the grenade most of you now try to implement this one I want to look at the level and in the app first of all I want to get rid of the grenade because this one shouldn't be there in the first place now we can work on the laser this part just annoyed me okay so for the laser we have to look at some code we are creating a laser in the on player laser function and this one right now only has a position besides that we also want a Direction this direction we have to generate inside of the player and for that let's look at the player inside of this if statement we are generating the laser action so this one will also need the direction I'm going to put this right below the other variables but you can basically put it wherever you want once again I want to create a player Direction This player direction is going to be a new vector and for that I want to get Globe build Mouse position and then subtract the current position of the player all of that we also have to normalize and then we are good to go one important thing to mention now is that we now have a player Direction inside of this if statement and another one inside of this if statement which well is a bit unnecessary we can simplify this by simply cutting out the first one and then placing it before the if statements that way we don't need the second one anymore next up when we are emitting the laser signal besides the position I also want to get the player Direction on top of that all the way at the top right now when we are declaring the signal we only have the position now all of this would still work but nonetheless you want to add the direction in there for one important reason if I minimize all of this and go back to my level scene in the app we have the player and the player has two signals we have the grenade and this one shows the position and the direction however the laser only has the position right now and it shows the position because inside of the script for the player we only have the position if I add the direction and then save all of this we now get laser position and Direction so this makes it much easier to see what's going on in your game you could leave all of this entirely blank and it would still work but if you work with anybody else or if you are not looking at your game for some time and come back to it this would become incredibly confusing adding these parameters here is really good documentation of your code all right with that we have a laser signal and we are emitting the position and the direction which means now inside of the level we are getting the position and the direction so now inside of the laser we can use all of that for this one we want to get our laser and now we have a bit of a problem because for the grenade so the rigid body 2D we could use the linear velocity but for the laser such an attribute does not exist and just to be consistent here it's going to be an area 2D so what can we do to move the laser in a certain direction well all we have to do is once again get our rotation degrees to get the rotation degrees all we have to do is get the direction and then use the angle method any Vector in Godot has this method it simply converts a vector to an angle however it returns a Radiance not degrees so you can make an adoption in one of two ways either you could wrap all of this inside of another function and the function you want is called red underscore 2 underscore degree or just deg this converts a radiant to a degree alternatively since the rotation by itself is looking for Radian this would also work just fine however if I run all of this now and I shoot we get some slightly weird Behavior so this is not ideal the reason for that if I open the laser scene you might already see it by default the vector position for zero goes this way but our laser points up because of that our direction is wrong by 90 degrees now you could rotate the laser but in my case since I want to demonstrate a couple of different approaches we can do something different back inside of the level I want to expand all of this I once again want to use rotation the grease because that's going to make the math easier and I want to convert the angle we get from the direction and convert this with red to dig three like so all we have to do is add Plus 90 and this would also work so let's try this one and now we get a better Behavior so the laser is pointing in the right direction it's just not moving in the right direction it always moves up but we certainly make progress the reason why the laser is always moving up let's have a look at the script we have a direction that is a vector 2 and this one is always going up so this Vector we have to change which we can do inside of the level I want to get the laser and now one attribute is Direction This is the direction we have declared here and this direction is just going to be the direction we are getting from the player so the one we're getting via the attributes and now this is feeling drastically better and with that we have our laser and it's working really good cool so with that we have covered another really important part of Godot at this point you should have at least the basic understanding of the different physics bodies and also how to create instances of a scene in code which is super useful to create bullets or lasers or stuff like that for this part we're going to cover something surprisingly easy the camera all we have to do for that is to add one more node to our player and then we are done there is no Theory to cover here let's Jump Right In here we are back in Godot and if I run the game you can very much tell there just isn't very much space all of this feels incredibly cramped so what I want to have is a camera that follows the player which would enable us to actually explore the level and for that like basically anything else in godo we have to learn about another node that node is called a camera and the first thing you have to know about it is that it wants to be the child of the node it follows which in our case will be the player which means with the instance of the player selected I want to add a camera 2D and now we get another box around the player it's a pinkish color that well shows us another outline never run the game we already get some very different Behavior it's as easy as that to add a camera however at this point if I move around a tiny bit you can see there's some weird junkiness if you follow along just move around yourself it doesn't feel very natural that is because the camera 2D is lagging behind the object it follows it's not a perfect onetoone movement instead there's supposed to be some smoothness that smoothness you get under positions moving and you basically always want to have this enabled otherwise your game is going to look quite weird you can set a speed Auto 5 pixels per second is usually what you want now with that everyone all of this again now our game is feeling much better and if I stop the movement you can see the camera is catching up to the player very very quickly but there definitely is some kind of movement swing after we stop moving and with that we have a camera that's actually looking good now another thing that you probably want to do is set the zoom level this tells you how big this rectangle is going to be so the actual visible area for example we could set this to 0.6 and now you are going to see much more of the level and this is what I think I used for the final game so this is what I quite like other than that you have a few more attributes you could be working with for example you could give the camera an offset and if I set this to let's use a larger number 300 pixels you can already tell now the camera is being offset by 300 pixels this would also be visible in the game let's run all of this again and there we go now the player is always at the top and the object or the gate is still there there are a few more things you could work with but most of them aren't terribly important I guess rotation could also be an attribute but in our case the player isn't going to rotate so all of this gets much easier the last attribute you might be interested in is the limit and this tells you how far the camera is going to go for example if I set the left side which right now is at minus 10 million if I set this to zero you can already see it in the game now the camera cannot exceed the left side of 0 pixels 0 pixels is this side and our camera can never exceed it so now if I run the game you can see our camera is never going further and if I go up and you see the gate you can actually tell what's going on so our camera can never go further to the left but we can still go further to the right cool now in my case I don't want to have this enabled and I also want to set the offset to zero but these options you might find interesting but other than that a camera really isn't terribly complicated so there isn't that much you have to know about it but before I finish this part there's one more thing I do want to cover and that is the actual size of the game so right now you can see we have this blue outline around our game and this is telling us how big the window is and this you can change quite easily this happens inside of project and project settings and in there you have lots of options that can determine how the game is run on a computer the option you want to look at is under display and there we have a window right now we have a window size of 1152 and 648 I have no idea how we get those numbers but you can change them quite easily in my case I'm going with 1280 by 720. those feel like much more natural numbers you can also set a whole bunch of other variables but in my case I'm not going to bother too much also if you have a larger window you could set larger numbers just choose whatever you think is best so with that said let's run all of this again and now we get a slightly larger window and that is all we need for this part the camera ultimately is a really easy thing to implement for the next part though we are going to cover how to actually fill out the level with something that looks good so there's actually a point to exploring the game I'll see you there now that we can move around it is becoming a bit obvious that our level is just not looking very good simply because we don't have that many images so what I want to cover in this section is how to display lots of images or more specifically we want to decorate the level with images and there are a couple of ways you can approach this the easiest one is you can simply place a lot of Sprites and then modify them quite a bit you can do that either by changing the scale or the color values and this is what I want to start with although I already want to emphasize for any kind of complex setup this is not going to be good enough for that we're going to use a tile map that I will cover in just a bit but now let's play some Sprites because they can do quite a bit back in good hope we can see that we have a gate and a player those are the only things visible which isn't very much and that's the main reason why our level doesn't look very good to make all of that a bit prettier with the level node selected I want to add another node and this for now is going to be a node 2D which I'm going to rename right away let's call this one the ground and this ground should be below everything else so I'm placing it before the gate and the player this round for now is going to get a Sprite I want to rename this one right away as well let's call this one the soil now that we have that I want to go to graphics and in there we have a folder called Ground there we have dirt mesh and Stones Stones is the one I want to use so I'm going to drag it into the texture Tab and now we get a texture let me move it a bit around and with that if I restart the game this is already looking a little bit better not that much but it's certainly an improvement for now the major issue is that this texture is ending quite quickly so this isn't ideal which means now we have to figure out how to extend this texture and the first thing you could be doing is if you go to transform and look at scale you could scale this by a factor of a hundred and well you would have technically an infinite texture or the very least a really large one but it would look really bad so this isn't acceptable for a game that being said though if you scale to something let's say a factor of five this would still be looking fine so this is definitely something you can work with but in my case though I don't want to use this scale at all so I'm going to set it back to 1. instead I want to use the region and we have seen this all the way at the beginning of this tutorial so if I enable it by default the texture is going to disappear because we now use a rectangle that has an X and A Y position and a width and a height by default all of these are zero so we are showing nothing of the texture but we can edit the region with the edit region button and there we can select what we want to show of this texture we could for example simply pick one part of it and there you can see inside of the game we get this texture inside of the game what we can also do is we can select a larger area and let me select a much larger area something like this and now we have well a larger texture but it looks absolutely horrendous and that is because Godot is stretching out the Border pixels which is not a good behavior we can change that though and this we do under texture and there we have filter and repeat filter tells you when you are scaling the texture how is it going to scale which in our case we're not going to touch repeat is what we care about because in there we have inherit disabled and enabled enabled is what I want and this is looking much better with that we get an actual texture that we can use basically infinitely so let me run this again and if you look very very very closely so let me close the game and if I zoom in you can tell there we have repetition marks which are quite fine and for our game they probably wouldn't be noticeable and in an actual game you could simply Place some other object on top of that and then not worry about it also if you zoom out it's barely noticeable so this is totally fine for a game that would be the first way you can work with your level to add more images and this is a really good start so now at the very least we have some kind of background although I do want to add a bit more so with the ground selected I'm going to add another Sprite note and this Sprite node I'm going to call a decoration the texture for that we get from decals and there we have a dirt patch this I want to drag into the texture and now we get something like this it's just a texture that is displaying some dirt I think it's quite straightforward and this one doesn't really fit into the background we have right now so if you look at it inside of the game I guess it kind of fits to an extent but it could be better to make this kind of thing look better with the decoration selected you want to go to visibility because there you have visible this one should be obvious but then you have modulate and selfmodulate and by default they are showing a white color and this one changes the color of this Sprite texture for example if I change it like so you can see we get some other kind of color you can also change the transparency and then make it disappear or reappear and in my case we could make all of this quite a bit more orange although you would have to play around with this quite a bit to make it look really fitting and I just don't have the time inside of a tutorial so let me do this a bit more roughly I just want to wash it out so the color fits better I guess this one a bit slightly better it's certainly an improvement so I am reasonably happy with that you might also be wondering why is the modulate and selfmodulate what's the difference between the two and if you hover over them you can already get the answer if you look at modulate we got the color applied to this canvas item this one should be quite obvious the more important part comes next and that is that this property does affect child nodes unlike selfmodulate which only affects the note itself which basically means that if this node has children they would also be affected by modulate however selfmodulate only affects the node itself which means if there are children they would be ignored that's the only difference between the two cool and with that we have some more upgrades I guess what you could also do is there's quite a bit of moss and you could just drag it into the scene let's say like so like so like so and just zoom in there we get just a couple of most images and all of these most images I want to have inside of the ground that way we keep everything organized which is really important for a more complex game and while these are once again just images you can move around they don't do very much so with that in place let's play the game and there we get more and more details for an actual game you basically want to keep on adding more images and then flesh out the game the more you have and the better you get at placing them the better your game is going to look although this kind of thing is really time intensive so if you want to have a really good looking game you will have to spend a lot of time working with these Sprites in my case though I'm happy with this and I think all of this is reasonably straightforward so we don't have to practice it instead there's something that I really want to cover which is significantly more important that topic is going to be tile Maps to explain what they are doing let me show you an image here we have a couple of walls and a tile map is dividing these into certain areas you can set the size yourself and when you design artwork you want to keep this kind of Grid in mind and once we have this kind of grid we can pick items from that and then place them in a certain position for example we could make something like this where we take specific parts of the wall for example we are starting with this part and place it on the top left then we place another bit this number six and place it there next up we take number seven and place it twice and that way we are creating much more complex images with that system you can create really really complex levels and keep everything quite organized and also it allows you to place elements really precisely also later on you can add something like collisions or different visibility layers something I'm also going to cover that should cover the basics now before we work with all of this in practice I want to cover the basics in terms of naming the most important part is a tile set this is simply a graphic that we are separating into individual parts or to be more specific each individual part is called a tile which means a tile is a single graphic then we have a tile set and this one is a combination of tiles finally Godot specific we have a tile map and this is a good node that organizes tile sets it can contain a single one but it could also contain multiple power maps on Godot are fairly powerful so I will spend quite a bit of time on them but with all of that covered let's jump into the editor and let's have a look at all of this in practice back in the dough I want to add another node and I want to add it as a child to the ground node so with Ctrl or command a I want to add a tile map if I add that nothing is going to change in the game but inside of the editor we are now getting a tile map this one contains a few tabs we have tiles patterns and terrains although right now all of them are empty so we can't use any of that to make something work we have to look on the right in the inspector there is a tile set right now this one is empty and to create a new tile set we have to click on empty and then new tile set if I click on that not much is going to change although at the bottom we now have a tile set and a tile map the basic separation between the two is that a tile map lets us use a tile map and draw things inside of the game whereas a tile set contains the graphics and lets us edit them for example in there we could rename things or we could add physics behavior and quite a bit more I'll cover that in just a bit first of although I want to click on the tile set again so inside of the inspector I want to click on this tile set because in there we get a few more options that are really important tile shape and tile size are the really important bits tile shape right now is square although besides that we could also have isometric half offset square and hexagon in our case we want to have a square and the square size we are setting in the tile size by default this one is 16 by 16 pixels although in our case I want to have a size of 390 by 390. there's no Universal Tile size this always depends on what kind of graphic you are using also with these numbers selected we can now see in the game some kind of grid so this is definitely helpful although before we continue let me explain what these numbers mean really quick here's the slide from earlier and there are two attributes that we need to set the first one is the shape of each tile right now this is a square but it doesn't necessarily have to be a square for example we could also have a hexagon so then the tiles would look like this and if I could draw this would look halfway decent but I hope you get the idea the other attribute we have to work on is the width and the height of each of these tiles by default in Godot this was 16 by 16. but in our case we are going with 390 by 390. that way the tiles align perfectly with the graphic and that sets the size of each of the tiles so if you have a Graphic where you don't know what the size is you do want to play around with this quite a bit if the size or the shape doesn't line up none of this is going to work properly with that we have everything we need to get started so I can minimize the tile set again if I click on that as well we are now getting the tile set inside of the editor and essentially what goodo wants is that we are dragging a graphic into this table thing here the graphics we're getting from graphics and in there we have tile sets and there we have a few different tile sets the one you have seen in the slides is called outside walls this I want to drag into the tile set like so and then we can already see the graphic first of although Godot is giving us a message if I expand this it says autocrate titles and nontransparent texture regions basically what Godot wants to do is to create a tile in all of the tiles where we have some kind of graphic this I do want to do so I'm going to click on yes and with that let me expand this field by clicking on the icon we now get a selectable graphic in all of the tiles that have a Graphic so those two at the bottom don't have anything so I have to click on them to activate them and if I right click on them I can delete them again which unselects them which is the behavior I want because those two tiles are going to be useless I don't need them now we have a tile set and this tire set right now we can change this for example we could do inside of this field we could for example change the name right now the name is the name of the file which isn't ideal so let me rename it to volts that seems a bit better you could also change the margin or the separation let me change the separation to 50 then you can tell we have a gap of 50 pixels between them which is very much not what I want but if you have some kind of graphic where you don't know the tile size you do want to play around with them quite a bit you could also if you look at the top select the tile so if I click on select we get a few more information for example we could add an animation we could change the rendering but I am not going to do any of these things what I am going to work on later on though is the paint tab in there we can paint properties and the properties we could paint are quite diverse for example later on we're going to add a physics layer which is telling a though that we want to have collisions with all of these Sprites but this is going to come later for now inside of the setup because I changed the properties some of these tiles aren't selected so I want to click on them to make them available again that way I can use all of them inside of the editor and well with that I can minimize this tab by clicking on the icon at the bottom right again and now with the tile map selected all I have to do is select one of these tiles then click on the level and now I can paint these tiles and create a wall for example I could make this even more elaborate and make a larger wall that has a corner something like this and with that we have a wall I can run the game now and we can see the wall in the game this is looking really good so I am quite happy with this one although the actual wall I don't want to have like this so I want to delete the tiles for that I simply have to right click on the tile and then it gets deleted instead what I want to do for now since the player isn't supposed to get into this area in the back I want to create a wall let's say roughly here and then move around I guess we can place one more here and then on the other side we could start a wall something like this and since the player isn't going to see this part here at all anyway we don't have to worry too much about what the graphics look like so I want to have a few more walls and you definitely want to play around with this and spend some time on it but this for tutorial is totally fine so now let's run this again and now we are seeing a wall and right now there's too much of a gap so we do have to work on that I guess later on I could add for example another kind of object in there but the wall otherwise is working just fine this is covering the absolute basics of a tile map that being said though tile maps are really powerful so there's a lot more to cover I guess what I want to start with with the tile set selected I want to add another tile set right now we have walls besides that I want to have soil so this I also want to drag in there and then Godot was asking us once again do you want to autocrate tiles and this I do want to do now we have a second tile set I want to rename this one as well let's name it soil and this is just about all we have to do in here there isn't that much more and this tile set is quite simple so we just have a couple of dirt textures basically those I can also use inside of the tile map so now besides the walls we have the soil and this soil I can also place on the map just fine so this one works just as intended however we do have a problem now if I place the soil tile in the same tile where I have the wall we can see we are deleting the wall which is very much not intended so let me undo it and instead what I want is to have these soil tiles always below the walls and to achieve that I have to work with layers so there on the tile map we have layers right now we only have a single layer and this I want to give a name right away let's call this one the walls and if I type in here a name you can also see we have wallets in this tab as well this is really important keep this in mind what you can also do is add another element which is what I want to do because besides the walls I also want to have soil or ground or whatever you want to name it with that we have two layers and the Order of these two layers is really important whichever layer comes first is going to be below the other layer this works kind of like what we have seen with the notes so in our case we have the wrong Behavior right now where the soil is on top of the walls and this you can change quite easily all you have to do is pick this icon on the left the three lines and then move it where you want it to be so now we have the soil below the walls which means now whatever we are placing inside of the soil layer is going to be below the walls and these layers you select with this tab where we have soil and we have the walls and if you select one of them right now all of our tiles are inside of the walls layer so from this I want to get rid of all of the soil which means at this point I only have walls on this layer but if I select soil these walls become a bit more transparent which is indicating to me that we don't have them in the current layer and instead what I can do I could for example draw below them a couple of tiles with soil and let me do it like this so all of this isn't looking too bad now if I once again select the walls we can see that the soil this is a bit hard to see but the soil is now blacked out and we can see the walls again and if I unselect the entire tile map we can see we now have a wall and below that we have tiles with the soil this also works in the game and if I walk over there we get quite a nice looking graphic so this is looking really good what you can also do with the tile map selected again on the right side it's going to be quite annoying to draw all of these tiles so if I simply want to paint this one area selecting every single tile is going to be kind of annoying and for that Godot has a couple of features so right now we have this pen selected which says paint on top of that we could also draw a line with this one selected I can simply draw a line and Godot is drawing a line from one point to another what is a bit more useful is the rectangle this one allows you to draw a rectangle which is drastically faster you also have a fill bucket and this one intelligently fills a certain area although this is not what I want to use right now because well we don't want to fill every single tile the way you would want to use the Paint Bucket is you want to draw an area of tiles let's say something like this and this needs to be enclosed and in there you can fill the entire area although this is not what I want to do right now instead I want to draw in the corners of this area here so something like this and there I realized that right now I am working on the walls I should have been working inside of the soil which means I want to get rid of all of the tiles I have just created this shouldn't take too long there we go and now with the soil selected I want to draw a couple of corner pieces like so like this one this one for the downward pieces I can use those and then at some point I'm going to go back to the right now for this one piece we have a bit of a problem because we don't have a corner piece for this particular area instead I'm going to place a tire like that and this wouldn't work in the game because you can see the transition from montile to the other is looking pretty bad to hide that later on I'm going to place a object on top of that if the player can't see it it basically doesn't exist so we don't have to worry about it too much and now if I zoom out I can close this area something like this and then fill the entire thing with a paint bucket with that let me try the game and I can still shoot the laser that's a good start and there we can see we have a wall and the wash should probably be a bit longer and on the right we can see we have certainly an improvement although we do have to extend the soil and we have to later on hide this corner first of all with the soil selected I want to click on region and edit region with the editor selected let me maximize the window I want to expand this window as much as I can and this if you make it too large can be a bit annoying to work with but I think something like this should work and there we go now we have a really wide level obviously if you have your own game you want to be a bit more specific here but I think for my purposes this is fine I guess inside of the editor we can change this from 25 000 to 22 000. that's looking a bit better let's say 20 000 pixels it looks about right later on we're going to constrain the player to roughly this area that way whatever happens outside of it doesn't really matter but you don't want to have a Graphic too large because that's going to affect performance at least a little bit I guess we could turn this to 16 000 and yeah that feels a bit better and for the height I want to have 10 000. and next up we have to hide this ugly corner and I suppose a good way to approach that is to Simply drag some of the Moss and then place it in that position and make sure it's on top of the tile map and that is looking a bit better I guess to make all of this look more realistic we could take all of the Moss and place it on top of the tile map that's not what I meant to do something like this is better and now we can simply have some Moss along this tile map and if you duplicate the notes you can add a lot of stuff in there quite quickly then I want to duplicate all of this with transform I want to give it some rotation move it there and I can do this multiple times and simply add more and more tiles once again the more detailed you add to your level the better it is going to look at least as a general rule finally this wall is too short right now so if the tile map selected I want to work inside of the walls and add or paint a few more bits there and this is not what I meant to do there we go and all right with that we have a much better looking level this is a significant Improvement all we have to do now is do an exercise and then we're done with another major part I want you guys to create a new scene with an area 2D as the parent the name of this scene should be house next up I want you guys to add a tile map as a child and then use the interior.png graphic to create images for the house to make all of that you will need three layers you will need the floor then the outer walls and then the interior walls the order of this also matters the philosophy at the bottom next up you have the outer walls and then the inner walls I suppose I should explain the tile set first of all let's have a look really quick back in the dome I am going to click on the interior.png tile set there I can expand things a bit we have lots of tiles the ones for the floor are these the outer bolts are those and then the inner walls are these ones at the bottom you will have to play around with this for a bit but I think once you have a bit of practice there should be a fairly straightforward tile set so pause the video now and try to figure this one out yourself back in good dome I want to make all of this a bit smaller and instead create a new scene this new scene as the parent is going to get an area 2D this area 2D I want to rename right away to house with that I can save all of that in scenes and I guess we could create a new folder let's call this one houses in case you want to create more you could create multiple in here although I'm gonna stick with one now with that we have a new scene this one is supposed to get a child which would be a tile map what is tile map now we have to set the tile map right now it's empty so we need a new tile map on this tile set I want to click again and change the size to 390 by 390. with that we can drag the interior.png into the tile set and we do want to create tiles automatically and there are all of the tiles we could be working with that's looking really good also just to stay consistent I am going to rename all of this and call it interior so with that if I click on the tile map we could start drawing but this is not what I want to start with instead I want to look at the layers and then create the three layers I will need first of all we have the floor that I want to have another element which is going to be the outer walls finally we have the inner walls or interior walls the name here really doesn't matter that much all that matters is that we can separate the different layers inside of this drop down menu let's get started with the floor and for that we have this tile and this is what I want to start with so with this one selected I want to draw a rough area for the house something like so and if you zoom in you can see there's a separation between the various tiles which I think is looking pretty good now that we have that I can click on outer walls and the outer walls are supposed to be this area on top of that we have these ending bits that we can use to close a door once I use it it's going to make much more sense so I want to draw a wall around all of this well I have to make sure I always select the right tile and then simply drag all of it around the area of the floor we just created that's looking pretty good and now if I zoom into the tile set we have these ending parts so this one will be for the left side and this one would be for the right side that way we don't have a simple ending of the graphic which would look a bit weird next up I want to select the floor again because now we have this empty space between the floor and the wall and to fill that I have these ending parts so I can simply drag my mouse over all of them and then paint in the Edge bits and there I made a mistake so with this kind of thing you just want to keep on working and if you make a mistake just fix it really quick you are going to make quite a few mistakes all right cool with that we have all of the edge bits besides the ones for the entrance the entrance is a bit special because those get these tiles so not this one but this one that way we cover the area up to the wall which I think looks better and now if I unselect the tire map we can see we have the area for a house this house we can simply put into the level and then we have another area although before I am doing that we still have the warning that we don't have a shape for this area 2D that we can change quite easily I want to give it a collision shape 2D and the shape is going to be a new rectangle shape and this rectangle shape I have to extend because it's quite a large area we have to work with let's say something like this would work just fine you don't have to be too precise here it doesn't matter that much but this is looking all right with that we have a house so now back inside of the level still inside of the ground I want to add this scene and I call this one house and now we can move this house around we could give it a rotation and a transform let's rotate it to something like this and then if I run the game again I can move to the house and eventually there we have it the entrance is probably a bit too large but it doesn't matter that much and well this is looking really good we have a house although right now we don't have an interior that back in the house I want to keep on working with the tile map also I want to move the Collision shape behind the tile map the order of these two notes doesn't matter in our case though the tile map on top makes it much easier to work with cool now with the inner World selected I want to look at the bottom and there we have all of the inner walls and for those I want to zoom in a bit and there for example we could take this tile this would be an ending bit and then add a few interior walls there we have a corner part and then we can go this way if you haven't worked with these tile sets before they're probably a bit difficult to work with so sorry about that but this is just a matter of practice so like this we have added in interior wall it's probably a bit too far up so let me get rid of all of this and instead start placing it I guess here's okay so I want to once again create a door inside of this area and then the rest is going to be just a wall and just for the sake of adding something else in there I guess at the top Wicked section of this area for that I want to have an ending bit here and an ending bit at other side and then simply drag a wall all across them and to decorate this a bit better we can get this tshaped piece and then add another separation with that if I return to the level we can't see anything and that is because I didn't save the scene so if I save it and now we go back we can see we have actual interior walls for this house let's try out of this again and I do have to walk a bit which is fine there we go we have interior walls if we add more objects inside of it this would also look much better something we are going to work on in a bit but for now this section got quite long so let's finish it here now that we have a tire map we should discuss physics a bit more in particular I want to talk about physics layers and there are two issues we have to address right now and let me demonstrate out of this in good dough it should illustrate all of this the best here we are back in the dough and the most obvious issue if I run all of this I can still move the player and I can still shoot but at some point once we reach the house there are no collisions which obviously is not great so this is something we have to work on on top of that though and let me demonstrate this inside of the editor we have this area in this area later on will be a transition point which means if the player collides with it we're going to load an inside level for that though we want to make sure that only the player can interact with this area we don't want to load a new area if any other object collides with it for example if an enemy moves into it or if we shoot a laser into it we don't want to launch a new level I can actually demonstrate this as well so if I run all of this again and if the player goes into the area we get players entered the gate and then the player node and that's totally fine however if I'm shooting the grenade into this area we are get grenade and we also get players enter the gate which basically means that we are getting some inconsistent Behavior the reason why we're getting this is that this gate or the area to the inside of the gate only really cares that a body is entering this area it doesn't care which kind of body so the body could be the player but it could also be an enemy or it could be the grenade the legs that though wouldn't trigger it because that's an area not a body but we still have to account for that fortunately that is very easy to do using physics layers and let's talk about them in Godot every Collision object has a collision layer so if you look at any kind of collision object we could look at the player let me open the scene in the app we have the character body 2D this is a collision object and this one on the right inside of the inspector has a collision in there we have a safe margin this one I'm just going to ignore then we have a layer and we have a mask this kind of collision system we have for every single collidable object for example if I look at the grenade there if I minimize the physics a bit further down we have collision and once again we have a layer and we have a mask so what does that mean in Godot you can place collidable objects on various layers and then also tell them to only interact with objects on a certain kind of layer and for that we have a layer and a mask how the system is going to work is that a layer determines on which layer and object itself is while a mass determines which layer it can interact with and this might sound a bit confusing so let's do an example here's the definition again and in our game we are going to have multiple layers we have a layer for the player the enemies the objects the projectiles and then for items and zones the player scene or more specifically the character body too deep for the player is going to be on the player layer but the mask for it is going to interact with all of the other layers which means that the player can interact physically with all of these other layers for another example we have the enemies and the enemies itself are going to be on the enemies layer that should be fairly straightforward however for the mask we will only have the layer the objects and the projectiles which means enemies can only interact with those layers they cannot interact with items or zones and this would fix the gate Behavior where we only want the player to interact with it but no other object inside of the game and well with that we have a few things to implement so let's go back to Godot and then we can make some changes I want to start with the player scene in there we have the character body 2D that we called player if we look there on the right we have Collision the layer is going to set which layer this object is on and in there we have a couple of numbers right now they always say layer 1 2 or 3 which doesn't tell you very much to make this system a bit easier to comprehend you want to go to project and there if you scroll down I already have it selected we have 2D physics there you can give layers names that are much more descriptive in our case we want to have layer 1 being the player layer layer 2 is going to be for the enemies layer 3 is going to be for the objects layer 4 will be for projectiles and finally layer 5 will be for items and zones although the naming here really doesn't matter you can name this whatever you want you're going to see in a second what difference it is going to make now if I fall off that if I hover over these layers now we get or layer 1 player four layer 2 enemies and for layer 3 we get objects on top of that if I do the same thing for the mask on number one we get player on number two we get enemies and on three we get objects the same thing we have gotten for the layers the really important thing you have to understand is that layers and must talk about the same kind of layers so for example right now the player would be on layer 1 which would be for the player and it can only see itself and that is because the mask is also for number one however if I click on number two three four and five now the player is still on the layer for the player but the player can also interact with all of the enemies all of the objects all of the projectiles and all of the areas and items although right now this doesn't do very much because we also have to update everything else for that I want to look at the gate because this is the easiest thing to work on right now if I open that scene and click on area 2D we once again have a collision although now for the layer if we don't want this to be on layer 1. instead the area to D should only be on layer 5. and then for the mask we only want this to interact with the player we do not want to enable enemies for example because this would allow any kind of enemy to interact with this object as well or area not object but you get the idea and with that we should already have a pretty good start if I now Run the game and go into the gate we still get players enter the gate however if I shoot a grenade we are still getting the wrong Behavior and this is bringing us to a good challenging Point Let's do an exercise I want you guys to look at the grenade and figure out why it still triggers the gate area 2D as a tip look at the layers and the mask for this scene it should be fairly straightforward but most of you now and try to figure this one out let's have a look at the grenade more specifically I want to have a look at the rigid body 2D inside of the grenade scene on there once again we have a layer and a mask and the reason why we are still getting the wrong behavior is as far as the good dough physics system is concerned this grenade is the player because it is on the player layer so layer one but this shouldn't be instead it should be on layer four I think this one is for projectiles there we go now if I run all of this again I can shoot the grenade into the area and nothing is going to happen so now we don't get a print statement anymore this is exactly what we wanted although we also have to update the mask because a grenade is supposed to collide with the player it is supposed to collide with the enemies with the objects and with projectiles itself especially the last one projectiles this means that one grenade scene can interact with another grenade scene you can see this for example in the game if I shoot one grenade and then another grenade the two grenades interact if I take this four away they cannot interact with each other anymore so now if I do the same thing again there they are simply ignoring each other which is not what I want so I'm going to enable all of that alright next up we have to update the gate because in there we have a static body 2D inside of the gate we have the collision and this one should be on layer 3 which is for the objects however for the mask we want this to be one two three and four which means this gate can interact with the player the enemies other objects although this one we don't actually need because none of the objects are going to move although for number four we want this to interact with projectiles as well next up for the laser we have an area 2D although since this one is also a collision object we have Collision as well for this one the layer should be layer number four for projectiles although a laser can interact with the player the enemies the objects but not with other projectiles I hope at this point you get the system at least on a basic level it doesn't get too complicated the major thing you have to remember is that you want to set layers and masks really early on in the game because later on updating all of this can be quite tedious although in our case we are nearly done next up I want to work on the house because there we have an area 2D that later on I do want to use so on there for the Collision I only want this to be on layer this one should be five and it can only interact with the player so mask should be one with that we have most of the things although if I hold Ctrl or command shift and O I can open up all of my scenes in the app we have a few more the really important one is the Drone this is the one enemy we have right now this one definitely needs a collision layer because it shouldn't be the player it should just be enemies although it can interact with the player with other enemies objects and with projectiles other than that we have the Bad and the billboard and those should be the last two both of them are quite easy so if I look at the Collision they should both be on the objects layer and for the Mast they can interact with the enemies and with the projectiles and then finally let's work on the billboard and this one once again should be on layer number three and you can interact with the player the enemies and the projectiles and with that we are done updating the physics layers so let me close all of this because it's going to be really confusing having all of this open okay this is feeling much better although I didn't mean to close the house we're going to use that right now actually cool so with that we have Collision layers and this is a really important system to get started with so the next issue we have to deal with is how can we give the tile map a collision layer so the player can collide with it and for that if I minimize the layers and I click on the tile set itself in there we have physics layers among a lot of other stuff but this we can just ignore for now physics layers is what we care about if I click on that we can add an element and there once again we get a collision layer and a collision mask and if I hover over them we get the usual layers so we have the player we have the enemies we have objects and we have projectiles and since this is just going to be a static object one two and four is what I want to select although I just realized this is wrong because this should just be number three because Collision layer is the layer it is on and it's just going to be an object however it can collide with one two and four so the player the enemies and the projectiles getting these numbers confused is incredibly easy to do so you do want to be careful here if I run out of this now we still don't get the proper behavior so let me move over again I can still shoot and have grenades as well but we still don't get a collision and I think you can understand why quite easily if we look at this individual tile Godot roughly knows that there is going to be some kind of collision because we have set a collision layer and a collision mask what Godot doesn't know is which area can be collided with all that Godot says is that there is an image here but this could mean anything we could want to have a collision for example in a much larger area as a consequence we have to draw in the Collision area and for that inside of the tile set there we have paint and it's called paint because we literally paint an area where we want collisions to happen and let me extend all of this a bit what I want to do I want to click on Select Property editor and now we have physics layer 0. if I click on that and zoom out a bit on a tile set they can see the entire tile set and if I zoom in again on the outer tiles if I just click on this corner tile there we get the entire Collision area this means that right now all of this could be collided with which is also not what we want all of this bit and this inner bit should not be collidable we only want to have the Collision around the actual wall and for that on this left side you have a painting area where you can paint in or rather select an area that you want to have a collision on and there you have a bunch of points that you want to move around and right now we don't have enough points for the curve but if you click on a path between two points you can add more points there's no real limit to how many you have so work with this to your heart's content you can be very refined with this something like this looks good now I have an area I actually want to have collisions for and if I now click on the tile again this is looking much better and with that if I run the game again and go to the area I should have placed the house a bit closer but I hope you get the idea and this wasn't the curve that we needed I think it was this one nope there we go here we are in the right corner and now we can see I cannot go further than this area so this is working perfectly fine now since we don't have Collision areas for the other tiles this doesn't work perfectly but this is something we can work on quite well although drawing in all of these areas can be a bit cumbersome but there are tools to make this easier so right now I have this drawing area if I click on another tile we get literally the same area which doesn't fit anymore however what you can do is click on these three dots and then flip horizontally and now it fits again then I can do the same thing for the other corner and now flip vertically and click on the tile again and there we go finally for the last corner I can do all of this again and flip horizontally again and there we go now we have the Four Corners which are the most time consuming bit for this straight lines we can delete a couple of points let me get rid of most of them and then simply move things around and I didn't mean to delete this one I just want to move the points and obviously once again this is something for an actual game you do want to spend some time on but I'm not too concerned with that so in my case I'm going to speed all of this up a bit so this one is looking good and now if I run all of this again once again I need a bit of walking around but at least for the outer walls this is working perfectly fine cool so next up we have a few more tiles we have these door and the bits and for that let me just draw in the area so this is looking roughly good and then for the other bit I want to have this bit and then flip vertically and then we are done finally for this tile we have to create two areas which is totally doable so all I have to do is add another shape in there something like this and now if I click on the tile there we have two areas they are not perfect but this is just a bit of refinement what you can do if your control or command and use the scroll wheel you can zoom in and then with the middle Mouse button you can move around so this is feeling a bit better cool and then next up we have left and right for that I want to rotate everything right and select both of these and then I can just delete where appropriate and we are nearly done with this part okay there we go this is the first one now I can click on the other one and then flip horizontally there we go now we have all the Collision parts for the outer walls unfortunately we have another part and this is all the Collision part for the inner walls and this is going to be your exercise draw all of these areas and if you get through that you will have some really good practice to drawing in these areas it unfortunately is kind of repetitive work and you just have to get through it luckily though it's not particularly difficult and in my case I'm going to speed up all of this because it's going to be really boring to watch all right and this is going to cover all of the inner walls I hope you managed to do all of this on your own as well I guess I should have mentioned earlier there are three ways you can interact and draw these areas you have ADD polygon tool you have edit points and you have remove the one you want to use the most is the middle one edit points because this one allows you if you just over it to also add points so this is quite easy if you just play around with all of this it should be fairly straightforward but alright with that let me zoom out save the scene and now inside of the level I am going to move inside of the ground we have the house I'm going to move that a bit closer to the player so I don't have to walk as much so with that the outer Collision still work the gates also work and the inner worlds are also working perfectly fine and let's try a few more this feels really good now here there's one thing you have to be slightly aware of and that is if I reopen the tile map and go back to the tile set and painting you want to be really careful that when you have a they can see it quite well so right now for this point we have a slight gap which is right now so minor that you wouldn't really notice it inside of the game but if this becomes large enough this might be an area where the player or an enemy could get stuck in which would be really inconsistent Behavior oh and I just realized I messed up a bit this shouldn't happen so when you create especially for walls these kind of collision shapes you want to be very careful and they can actually see this kind of shape isn't ideal because if the player is coming from one side so if the player is coming from this area we might have a collision for this bit and then the game thinks there's a corner but there isn't in practice so when you're drawing these areas just be aware that you do want to have some very very detailed shapes and this is something you absolutely want to work on for a bit in my case though for tutorial this really doesn't matter so much and with that we have another super important bit and let me remove the house a bit further away so this doesn't look too cramped board and next part to make the game look actually good I want to talk about particles and particles are basically small objects that are dynamically generated the best example for that would be we're going to create some smoke in this part and for that smoke we're going to create lots of small dots and then combine them into the player this will look like smoke also we're going to add some visuals for the laser or more specifically when the laser is shot I think expanding all of this in practice is going to be much easier so let's jump straight into Godot here we are back in the editor and I want to create a new scene and this new scene as a bass note is going to get a static body 2D let's rename this one to steam vent and then this I can save right away under scenes there we have objects and there I want to have the steam vent cool now this one is going to get a Sprite and to Sprite we can get under graphics and in there we have objects and under objects we have all the way at the bottom a ventilation hole so this I want to drag in there and this is going to give us simply a ventilation hole now before we start with the actual particles I want to give this a collision shape and the shape here should be fairly straightforward this needs to have a collision shape the shape should be a circle shape and let's align it more or less accurately this is looking good cool also I want to move the Collision shape behind the Sprite so we can see a bit better what's going on right now this kind of object is going to look incredibly boring inside of the game and to make it more interesting I want to generate smoke that moves something like this so we have smoke coming out of this and moving in a certain direction and to create something like smoke we will need a particle emitter and like everything else in godo this is going to be another node so with this theme then selected I click on controller command a and now I type in particle we have CPU particles and GPU particles at least in a 2d space inside of the 3D space all of that gets a lot more complex but in our case we only have two nodes and if you look at the description we get a cpubased particle emitter or a GPU based particle emitter now you might be wondering what's the difference between these two and well if you're creating lots of particles you want them to run on the GPU because the GPU is much more powerful and much better at processing these kinds of particles unfortunately you don't always have a graphics card available for example when you make a mobile game or browser game you might have to work with less powerful hardware and for that you would use CPU particles but in our case we are making a game for a computer so I want to use GPU particles basically the way you want to think about it is that CPU particles is for weaker systems GPU particles is for everything else so let's work with GPU particles 2D I can click on Create and nothing happened to make something happen we have to look on the right in the inspector the most important attribute in there is the process material right now this one is empty we can give it a Shader material or a particle process material the second one is what we want to go for and now we can actually see something we have a couple of particles going in One Direction which arguably isn't particularly helpful but we can customize all of that quite a bit if you click on particle process material there we get a whole bunch of options for example what we could be doing is set the emission shape right now it's a point this means all particles are emitted from this one point but in my case I want to have a sphere and this sphere should have a certain size depending on how large you want this area to be so I think a bit smaller than this should be okay and yeah this one is looking better if you want the particles to stop falling you would want to look at gravity we have 0 98 and 0. if I set all of this to 0 0 and 0 we get no movement at all and in my case I want the particles to move to the top right so this direction for that I want to have X being positive let's say I know 50 and then I want them to go up and this would be negative I know let's say 45 just have some random numbers with that we already get some nicer Behavior so this doesn't look terrible well it still looks terrible but it looks less terrible than before one way to make all of this look much nicer is to look at this scale because in there we have scale minimum and scale maximum and Godot is going to pick a random number in between right now they're both one so we always have a scale of one but if I make that much larger we're getting a better Behavior so this is definitely coming together if I now go back to the level and with the ground node selected add this scene I want to add the steam vent and this I want to have let me move it around let's put it somewhere there for now if I now Run the game again we have a steam vent although this doesn't look amazing right now but I guess you can at the very least tell what's going on somewhat the major issue we have right now is that we always have a square so this isn't great and this we cannot change inside of the process material so this I want to minimize for now instead what we need is a texture and the texture is going to be an image so under I think I put it under decals there we have white dot PNG this is the graphic I want to use and to use it I simply have to drag it into the texture and now we are getting some very strange Behavior the reason why this is happening is because the graphic is way too large or more specifically inside of the process material and the scale we have a way to large maximum scale let's set this to a 3 and this is going to feel much better and this is looking much more like actual steam so let's try this again and well we are making progress still not amazing but certainly better I suppose the most important thing for now is we don't have that many dots and for that at the amount although at the top I want to set this to let's go with 20. and this is feeling a little bit better another thing that you could be doing if you look at color there we have color and color ramp for example you could change the opacity a bit endemic all of this a touch darker and I think we do need a lot more dots so instead of 20 let's go with 60. and possibly even higher maybe a hundred that probably feels a good bit better what I can also do is lower the opacity and then just see what feels good when it comes to particle systems you do want to play around a lot and there's a lot of stuff you can do so all of these options you can just play with them and see what you like what you see quite often is a ramp so in this case the color ramp what this one is doing right now it's empty if I give it a new gradient texture 1D then we get some weird behavior and what this one is doing is when a particle is spawned it starts with black and then over time it becomes White we could change this so if I click on it and double click on that we get another color and let's say I want a particle to start white white with full transparency and then towards the end so I click on the ending bit I want transparity to go basically away entirely and have this thing go into a darker color and there you can see we have a new gradient and this one is giving us a different kind of behavior and that should be a decently occased behavior for inside of the game so once again for this kind of thing you do want to play around a lot to get the kind of look that you want you could also change the scale and give this one a curve but in my case I think the color was a bit too strong so let me if this a bit more opacity especially towards the end this might have been a bit too low and then the color could be a bit brighter and then I also want to have for the gravity slightly faster movement so instead of 50 I want a hundred and so of negative 45 I want to have negative 150. on top of that the emission shape could be a bit larger so this feels better and then for the amount of particles let's go with 200. and there we go this is coming together much better so with that we have some steam and what you really want to be aware of that you are spawning a huge amount of particles and for that if you have a proper GPU this isn't going to be too taxing especially in a 2d environment but still you do want to be conscious of the performance so use this sparingly one good way to do that is to only have a certain amount of particles 200 is still fine but in your own game test this a lot changing the amount of particles can make a huge difference I suppose I should also mention we have time Collision drawing and trails time is the one I want to focus on for now and there for example we have a lifetime if we extend that we get much longer living particles although in my case I'm not really interested in that and this is still way too long let's set this to 1.5 to some kind of custom value and what is much more important you can also set to one shot this is something we are going to explore in just a bit but if I set this one to on then we get lots of particles and then they disappear because we are only spawning every particle just once and you can see at the top emitting is off if I set this to on again we get all of the particles but just once and there we go we can do this multiple times and we only always have one round of particles now for this one I don't want to enable it so I just want to have embedding enabled and one shot set to false now besides that you could also look at drawing or Collision but all of this is a bit more advanced so I'm going to ignore it instead what I want you guys to do is when the player is shooting a laser inside of the player I want you guys to spawn some particles along with the laser and to be a bit more precise for the exercise I want you guys to emit particles when the player is shooting a laser you can reuse the same texture but make sure that you are changing lots of other attributes like the color or the scaling or the duration just see what looks good finally a really important part is that one shot needs to be enabled we only want to spawn a couple of particles when the player shot a laser but they should not be continuous so with that pause the video and try to implement your own particle system with the player selected I want to add another node which is going to be GPU particles 2D this one right now is giving us a warning that we don't have a material for that I want to have a process material which is going to be a particle process material if I have that selected we get particles that are barely visible and right away we have to make one change and that is that these particles should be at the nozzle of the gun basically here next up the direction doesn't work at all so this one we also have to update that we can do quite easily inside of the process material I want to update the direction although to be a bit more specific we have Direction and we have the gravity the Gravity by default should be 0 0 and 0. so the particles don't move at all however then we have a direction which right now by default is one zero and zero so we should only have movement in the xaxis but this we can't see at all right now everything just is static so we have a white dot there to change that we want to give each particle an initial velocity and this we can do on the right there we have initial velocity and let's give it some Randomness so something like this and that is looking significantly better for these numbers inside of Direction you can update the spread in my case I went with 15. this is a much more narrow range but once again just choose whatever you think is looking good besides that if I minimize these two tabs the next important part is we will need a texture and I still have white dot PNG and this I want to drag in there and with that we get something much more visible so this is a good start and let's try the scene itself and let's hope this is still working and yeah it's kind of working especially if you move around this doesn't work perfectly yet but at the very least we get something the main thing I'm looking for is that all of this aligns with the player Direction so if the player moves or looks at the top right the particles move in this direction as well which they do so this is a good start the one important thing that might be a bit of a challenge is that we only want to spawn these particles when the player is shooting a laser and for that on the time I want to set one shot and enable it and set it to true and now inside of the code so the player code and this I do want to extend whenever we have an input action for the primary action this if statement I want to emit the particles which I can do quite easily I want to get my particles node so GPU particles 2D and this has an attribute called emitting which I want to set to true and that is actually all we needed so if I now Run the game again I can shoot a laser and then we get a couple of particles I can do this multiple times and we get a couple of particles so this is working but the particles look terrible so this isn't great yet also if I shoot multiple lasers this is really inconsistent so we have to update some things which means with the GPU particle selected we have to update a lot of these attributes to make all of this look good what I started with was the initial velocity right now this is quite low I have set these numbers to 750 and 1 000. if I run all of this again we get particles that move really really far because well we have a really high initial velocity to account for this increased speed I want to set the lifetime of each particle to much lower number let's say 0.2 and now if I run this again each particle moves very very quickly so this is definitely an improvement although all of the particles are still much too large for that and the scale I want to have a scale minimum of 0.05 and a scale maximum of 0.1 if I run that again now we get particles that are way too small so these numbers are probably a bit overly aggressive let's say 0.5 and 1. and that's feeling a bit better I guess 0.3 and 0.8 should work and this is just a thing you have to practice over and over eventually you find some numbers that you like next up though much more importantly I want to work on the color this is the part that really doesn't work right now instead of a white color I want to have some light bluish because that's the color of the laser as well also the transparency should not be full I want to have some fairly seethrough kind of color so if I run this again that is starting to come together much more nicely also we can give this a color ramp which is a gradient texture 1D and for this one we can set a color the starting color is the color I've just set and in there we have a hexadecimal color this we can simply copy with Ctrl or command s and then paste it in there now we get this starting color and for the end color I want to have the same color except I want to make this more whitish and less transparent at the end you should have some kind of gradient that looks something like this we start with a bluish tint and then we become more and more transparent if I run that one again we get something that's barely visible so we want this to be more so we want to increase these numbers a bit and once again this is just something you have to play around with we get some very faint particle effects although I think the initial velocity could even be higher let's go with 1200 to 1 500. and there's certainly something that works and I don't want to keep you here for too long you can play around with all of this to a great extent and if you want your game to look good then obviously you have to spend a lot of time with all of this in my case though this is a tutorial so let's say for this part we are basically done the next major aspect that I want to work on is going to be light which is super important to make games look good and in Godot there isn't that much to it it's quite easy to work with light ultimately there are two nodes that you can use number one is called a point light and this is a single point of light that you have somewhere in your level so think of a flashlight or any kind of a lamp besides that we have a directional light and this is a light from a direction that usually is really far away the best example for that would be a sun although if you want to have some general lighting for your scene to create a certain kind of atmosphere you would also use a directional light that being said though most of the time you would combine a point light and the directional light all over your scene using lights is a really common thing you are doing that basically everywhere now besides those two nodes we have one more concept and that is called light occluder which is basically a shape that a light can collide with so so far we have used Collision bodies with a collision shape and a light occluder does the same thing just for light and that is all we need to get started so let's have a look at all of this in practice back in good old I want to create a whole new light so with a new scene selected I want to create another node and the root node is going to be a static body 2D let's call this one a simple light we are going to need a Sprite 2D and the Sprite 2D we find under Graphics there we have objects and under objects we have light.png is I want to drag into the texture and there we get a basic light this one is also going to need a collision shape so with simple light selected once again I want to give it a collision shape 2D and I think for this one a capsule shape is probably best although I do want to transform it and give it a rotation of 90 degrees and now we can drag it out to cover the area that we need that is looking roughly okay now I want to move the Collision shape behind the Sprite 2D so we can see what's going on and now we have a basic static object let's save it right away under scenes objects and then we have SIMPLE light now this light I want to use inside of the house right away so in there let me attach a new scene which is going to be this simple light and this simple light I want to move somewhere let's put it here on the right side so if I zoom in I can place it a bit better and if you use transform we can give this a negative 90 rotation although the proper rotation would be positive 90 degrees because this area is where the light is coming from and then we can move it a bit further to the right and then we have some kind of light so this is certainly a start but well we don't actually have any kind of light all we have is a lamp that is Switched Off for that back in the simple light we have to work with light notes and for that with the simple light selected I want to attach another node if I simply type light we can see we have a directional light a point light and a light occluder since we want to have a local light which means a light from one point we want to have a point light so this I want to create and this changes nothing and we are getting a warning if I hover over that Godot was complaining that we are missing a texture and the texture we are placing in there and to get a texture I want to minimize the objects and we have a folder called lights in there we have textures and then there we have circle.png this I want to drag in there I don't want to drag it on the editor I want to drag it into the texture that is looking better and you can already tell if I toggle the visibility of the point light we have some kind of light and now if I save the entire scene and go back to the house you can see we have a brighter color around this area and this is the light I can make this even more noticeable so on the right in the inspector we have a couple of attributes that we can work with the texture scale the color and the energy are the attributes you want to care most about color is the easiest one to see and there by default we have white but we can change this to any color we want let's say in my case I want to have a bluish color that should still be quite bright because we have a light but something like this should be much better and now I save the scene go back to the house and now we have a bluish light around this area still not particularly visible because the energy for this light is quite low if I make this brighter you can already see we have a much more noticeable light so now if I go back to the house there we have a very strong light and if you want to change the scale of the light or how far this light is reaching you would work with the texture scale if I increase that one to really large number and return to the house now we can see the light is Illuminating basically all of the house although this is way too much let's put this at a two that should be much better and yeah I think this is reasonably okay on top of that if I go back to the level we can see all of that as well and if I run the game and go to this area it still is going to take some time but there we have the light and the player is also reacting with the light so this is working quite well cool now this is a good start but it's still fairly limited and the main issue we have are shadows so right now we are Illuminating all of this area let me zoom out a bit we are Illuminating all of this but this is not how a light works instead I just want to have a cone that goes something like this or at the very least I want to have shadows around the back of the light and along the main wall of the tile map for that we have to learn about another node so back inside of the simple light I want to add another note and this node is a light occluded 2D if I create that one nothing is going to happen to make something happen inside of the inspector we have an occluder and this is just a shape so we have to give it a polygon and then on top we have the tools to draw another shape so let me draw a couple of basic points around this doesn't have to be too specific but once again if this is your game make sure that you are spending a fair bit of time on this because this is what makes the game look good cool and now if I have the shape you can see some parts do have light and other parts are blacked out if I save all of this and go back to the level we can see that now this part is not visible anymore now this still isn't looking great and to make it look much better back in simple light we want to enable Shadows if I switched up and on we get some slightly weird effect inside of simple light but if I look back at the house this is looking significantly better now we get some proper light Behavior the light possibly is a bit strong but this is something you can fine tune on your own now for the shadow you can also customize a couple of bits most importantly you have the color and the filter color is fairly straightforward so if you change this to something really weird you can create any kind of color for the shadow that you want although this is not something you particularly want to do because the shadow at some point has to disappear like you can see in this corner The Edge shadow disappears but for the other areas like this getting the shadow back to zero might take forever so you want to be really careful especially for the alpha value of the Shadow most of the time you want to have a really dark shadow because shadows in general are black they are the absence of light so you don't want to have a bright shadow that being said we can give it a slight bluish color to match it with the light so if I have something like this this is well it's getting a bit better but you don't want to have a shadow too visible besides that what you can do is work on the filter and there are three different kinds of filters that you can work with by default you have none and this is the fastest or the easiest one to calculate however if I go to PCF 13 then if I save all of this and go back to the level now we have a much fuzzier outline for the shadow so if I compare this with none and save all of this we now have a sharp line for the shadow and this is basically what the filter does and the more filter you use the more difficult it is for your computer to process so you do want to be careful with that this is the kind of thing that can really tank your performance I guess for this one we can go with average and then give it a bit of smoothing and just see what happens I guess this is an interesting effect although not exactly what I want if I add a lot more smoothing they can see what this one is doing it creates a greater distance between these points so I guess we should have very low amount between them and if you zoom out this is basically not noticeable anymore so with that let's run the game and let's see how this looks actually when we play it and I can move in there and this is looking at least acceptable but obviously customize this as much as you want once light thing that annoys me is that we have these larger blue rays and this is because of the color of the Shadow we want this to be a bit darker so let's reduce the opacity and make all of this generally a bit darker now if I save this there it's much less noticeable cool and with that we have some very basic light and some very basic Shadows and that is also a really good point to do an exercise I want you guys to create another wall light if you look at the graphics folder inside of objects we have another image called wall lamp.png use that to create another light this light should also have a couple of occlusion shapes finally make the player cast a shadow pause the video now and try to implement all of that I think we can start with the second part of the exercise I want to make the player cast a shadow this is quite easy to implement and quite fun so back in the player scene I want to give the player another note which is going to be a light occluded 2D for this one once again we will need an occluded polygon and now we have to draw in a shape this doesn't have to be too precise but you do want to spend a few seconds on this at the very least because once again the more work you put in here the better your game is going to look but in my case this is a tutorial so we can be a bit more sloppy although this was probably a bit very sloppy but um well there's not that much to say about it we just have to draw a whole bunch of points around the player nearly done there we go and the one bit that annoys me is that this bit properly needs a bit more work that's looking more acceptable with that our player has a light shape although we're getting an error that a polygon must be supplied and if we click outside of the node this disappears now if I go back to the level and run all of this again I can move to the light but take a few seconds and there we can see our player is casting a light which is looking really good also if we rotate around this works really really well well I'm happy with this so with that we can come to the second part of the exercise I want to create a new scene the parent or root node is going to be a static body 2D again let's call this one the wall light I suppose we can save this right away on the wall light right next to simple light and then once again we will need a Sprite which we are getting not from the lights but from the objects and all the way at the bottom we have the wall lamp this I want to drag into the Sprite 2D like so and now if I zoom out you might have noticed that I made a mistake when I prepared this graphic that there's way too much white space around it this isn't actually going to be much of an issue because this shape doesn't have any kind of collision although it is a bit annoying to work with to update this we have to go to region then enable the region and inside of edit region you can create a proper shape around it something like this and now this is much easier to work with next up we are going to need a collision let's go with a polygon 2D because there's no regular shape for all of this and to draw a shape in once again I'm going to be quite sloppy with this one and this is looking reasonably okay cool also I want to move the Collision shape behind the Sprite 2D so we can see what's going on with that we have a light and let's place this inside of the house right away so if the house selected I want to add the wall light and I guess we can put this somewhere here ish actually let's put it right next to the other light so we can see how the two lights interact with each other that might give us some cool effects I want to rotate it by negative 90 degrees and now I want to move both lights right next to each other that's a good start next up we have to actually create a light for this light so I want to create a point light 2D first of all we need a texture so under lights and textures we have circle.png this I want to drag in there and now we have a light I guess for this one we can use a different kind of color I guess what might look good is a bluish purpley color then we can increase the strength of all of this and maybe the texture scale since this is a larger light it probably wants to have a bit more space let's try all of that and let's look at the house individually that is looking not bad at all or at least it's passable for tutorial let's try it in the game and if I walk over there we get two different kinds of color and they are working together quite well so I'm happy with this although I forgot for this wall light we don't have a shadow so this I want to enable and now let's try this again there we go we can also get two Shadows so this is quite a cool effect very happy with it next up I want to create a few occlusion shapes and specifically I want to mask out this holding thing because this is the only thing that should cast a shadow I think at least so for that I want to have a light occluder this one is going to need a new shape and now all I have to do is draw in a shape this doesn't actually have to be too precise but something like this should work quite well and there we get already we have the shadow now for the shadow for this one I want to have some filter so pcf5 that way it looks like the other one I'm not going to mess with the color I think this one is looking fine now there's one thing you need to be aware of when you are using a light occluded 2D and that is you can only ever have a single shape if I try to draw in another shape around the second bit something like this then the first shape disappears so this you simply can't do let me undo it and instead what you would do is copy this entire node so with Ctrl and D we are duplicating it and now simply what I want to do is to mirror it along the xaxis and a very simple way of doing that is under transform I want to change the scale of x to negative one while leaving Y at one to make that work I want to click on the Chain symbol and that way we can work on each axis individually and all I want to do is set X to negative 1. all we have to do then is update the position a tiny bit and we are done probably be a bit more specific something like this looks good and with that I can save all of this and let's have a look back at the level this is definitely working I guess one more thing that we could do is maybe a bit more energy for this one since it is quite large um yeah I guess this is something that you can play around with but for my purposes I am totally happy with this kind of light but now we have another issue and the issue is that all of the worlds are illuminated especially by the bigger light this doesn't happen for the smaller light because we have an occlusion shape in between the two but this simply doesn't work there's way too much light to work on that we have to look at the tile map so inside of the tile map we have I still have the physics layers open if I minimize that you can see we have more layers that we could work with for example there are navigation layers and custom data layers on top of that if you open rendering there we have occlusion layers those cover light and I want to add another element if I add one then we get a light mask and these masks are fairly similar compared to the physics layers we have seen earlier if I look at the wall light or the simple light we always get an item call mask those were kind of like the Collision layers so like we have done for physics where an object can only see another object if it is on a certain Mast the same works with lights lights can only see objects that are on a certain layers for this game though I'm not going to change them everything is going to be on one layer to keep things simple so I can minimize the occlusion layers and now we have another problem like with physics Godot doesn't know for each individual tile where the light begins and ends and for that if I maximize the tile set again and look at paint we can select a property so far we worked in physics but we can also work inside of the occlusion layer if I click on that and zoom out now you can already see what is going I think we can draw again shapes so for this one I want to have one shape for this wall and let me just do the four different worlds for now the one that are straight so this one and this one that I can do this one and rotate all of this and now we have the shapes for the wall if I save all of this you can already see the difference and if I go back to the level in particular now we can see the walls also have occlusion that being said to make all of this work properly if I move the light around you can see the issue we have with all of this so this occlusion right now only works for the straight tiles if I have a corner this doesn't work at all anymore which means back in the tile map in the tile set we have to create occlusion shapes for all of this once again so in my case I'm going to speed up all of this but well you get more time to practice your shapes so this is going to be another exercise for you all right with that we have covered all of the shapes now there's one thing I realized we're working on this if I look at this one shape let me draw it in again from scratch actually so the issue for this one is we have two separate areas and that's looking better if I want to create a second one I can start drawing but then the original shape disappears turns out that for occlusion shapes you cannot do this kind of area but I guess in our case this isn't too much of a noticeable issue but when you design your own graphics for your game just keep that in mind but now for the rest of it I can move the lights around let's say I want to duplicate them and place the lights throughout and you can already see this is working quite well we're getting pretty good light so let me set the color back to default move a light here I can duplicate it again move another light there and then is the light going to fit on the left there uh probably not let's get rid of this one and instead I want to get the simple light and move that one up they can see selecting these lights can be kind of annoying because they always cover a larger area if this becomes too much of an issue you want to use this lock symbol this one locks a node so you can't select it anymore so I want to select all of the existing notes and then drag the simple light and now I can move it around easily for this one for the transform I want to have negative 90 so it points to the right and I have something like this that I can duplicate it again and move it between those two lights and the rotation should be negative 180. and then I can move it right in between and now the house has basically become a disco but let's try all of this looks in the actual game so back inside all of this we're getting some lights we're getting Shadows we're getting multiple shadows and even when we have some walls they also get Shadows so with that we have a pretty good amount of light I am quite happy with this there's just one more light to cover and this one is actually quite simple so if I zoom out the other light let me minimize everything so we can see what's going on the other light that I haven't covered yet is a directional light and this one is incredibly simple if I double click on that our entire scene has become much brighter and if I change the energy of this light you can see that we are simply adding light to everything you can also update the color so if you don't want to have a pure white you can change this to a reddish tone or really whatever color you want it's entirely up to you and that's more or less all that you can do in here you can also enable Shadows but that's probably not what you want to do I guess one thing that I found kind of useful is if you want to have a much darker level then well you couldn't really set this to Black because then this thing doesn't add anything so if I have it to Black and toggle it on and off it doesn't do anything because the way light is working is that we are always adding the light or rather we are multiplying the current layer with a certain color and the brighter the color is the more noticeable it becomes but if the color for the light is black it doesn't change anything so even if you change the energy for pure black the light doesn't do anything and that is because of the blend mode right now it's add but if we change this to subtract then we can okay the energy doesn't do anything but if we now change the energy to something brighter what is basically going to happen is that we are subtracting whatever color we have on this from the level so the brighter becomes the more of a color we subtract from everything so this shouldn't be entirely white but if we have let's say a grayish color something like this this would allow us to make the entire game much darker so if I now toggle this light we get a darker game that being said the other lights are still working so if I run all of this again and walk back to the house we get a much more atmospheric game later on when we are building the interior level we are going to use this directional light quite a bit although for now I'm going to get rid of it because for this outer scene it wouldn't be particularly helpful but keep it in mind later on we are going to reuse it a lot and okay with that we have covered a really important part so now we have lights next up I want to talk about animations and animations are ultimately quite simple you basically always play images in a sequence the issue with that is that there are two ways to store all of these images you can either have separate images or you can have what is called a Sprite sheet for this project we are going to work with both so let's have a quick look at what we have inside of our Graphics folder if you look on the left there we have graphics and in there we have all of the folders if you look inside of Lights there we have a fan animation and these are just individual images that we want to play in sequence so we just have about 48 different images it goes from 0 to 47. alternatively what we also have if I minimize the lights and look at explosions there we have just three images and if I look at one of these images in a bit more detail you can see that we have one images with lots of individual images on top of it essentially what we want to do is to pick individual parts from that so this is another thing we have to figure out and this Sprite I don't want to have in the scene but the main thing you have to understand is that we have to pick individual parts of these images like anything else in Godot what we have to use are different notes Godot can cover both but you are using different notes for each if you have separate images you would use an animated Sprite 2D it works kind of like a Sprite so the note we have already seen except it wants multiple textures instead of a single one if you have a Sprite sheet you would use the normal Sprite 2D because that one has an animation tab which allows you to pick specific parts of a larger image back in Godot first of all I want to close the steam vent this simple light and the wall light we don't need those anymore instead I want to create a new scene and for this new scene we have another root note and this root node is going to be an animated Sprite 2D if I double click on that we get an animated Sprite 2D along with a warning the warning being that we are going to need Sprite frames as a resource I'm going to cover that in a second first of all though I want to rename this and let's call it light fan animation to work with this kind of animated Sprite you want to look on the right under animations because there we have Sprite frames and right now it's empty which is what Kudo really does not like to fix that we have to click on it and then use Sprite frames if you have that nothing changes but if you click on it again now we get another kind of editor in here on the left side we can set a couple of animations right now we only have default and this is what I want to keep you could rename it though if you double click on it but on top of that you could also add new ones with this icon so if you want to have multiple animations this is how you would use that although in my case I want to delete these new animations because we don't need any of that instead I want to look at lights and in there we have the fan animation and this contains all of the images and all of these images I want to drag into these animation frames and there you can see we have lots of textures once you have that you can click on this play icon and then we are getting an animation right now it's looking really choppy because we only have 5 frames per second if I change this to 24 then we have a much smoother animation and well this is kind of all you have to know about the basics of animated Sprites they basically work like Sprites but instead of one texture you are working with Sprite frames where you have multiple textures that's pretty much it and with that I can save all of that let's say under scenes I want to save this I guess objects also work although this folder is getting quite crowded but it works for this one and now that we have that I want to look at the level and now we can add inside of the ground node 2D the light fan animation and this we can move around and there we get the same issue again that we've seen in the last part that right now I want to grab the light fan animation but we have lots of stuff on top which makes all of this a bit annoying to work with so because of that I want to lock projectiles and I want to lock the gate with that I should be able to drag the fan animation and there we go this is feeling better and let's just say I want to have it somewhere in here and don't forget to enable it so it plays and then I can run the game and move towards this area and there we should have well we don't have an animation but at the very least we have an image the reason why that didn't work is because we have to click on this icon which says autoplay on load and now I can run all of this and if I get to the area we now have the animation so this is what we actually wanted and well with that we have pretty much all we need for this kind of node on top of that you could also grab this node and transform it for example we could change the scale and double it in size if I save it now we get a much larger one let me move it a bit further to the middle and there I think this is looking okay now this light for animation you can also Target in code quite easily and we actually haven't written code in a while and for this one we still don't need it but once again the main thing you want to do in there is you could update the animation in our case we don't need it because we only have a single one if you want to update the animation you would simply the animation property cool but this is the first kind of Animation that you could be working with it's super easy I guess while we are here we could also add another smaller thing and that is with the light fan selected I want to add a point light 2D for this one once again I want to look at the lights there we have textures and then drag circle.png but what I meant to do I want to drag circle.png into the texture and now we can make all of this quite a bit brighter let me change the texture scale and the energy and now if I save this we get even more light inside of this area this might be a bit too much so a lot less energy now let's save it and there we get another kind of effect importantly for this one you do not want to have shadows with that we have the first kind of Animation along with a bit of light next up I want to add the explosions and this I want to do inside of the grenades so basically right now we only have grenades that work like hockey pucks they just move but they don't explode let's work on that a bit more which means with Ctrl or command shift and O I want to open the grenade and here you can see we have a grenade we have a Sprite 2D and a collision shape so basically nothing is happening to work on that a bit more I want to add the animation and this is in a Sprite sheet let me before I add the note look at this so instead of explosions we have let's say explosion 2. and zoom out we have one image that contains a huge amount of smaller images and basically what we want to do is to pick individual parts from that and then play them in sequence for that we can use enormous Sprite 2D the note we have already used many many times because in there in the inspector we have animations this one has a few properties we have age frames V frames and then frame if I increase the number you can see quite well what this is doing if I change this to 2 we are cutting the entire thing in half and if I increase the number even further at some point we are down to one column and let me draw on this that should be easier to explain when you look at this image you notice that we basically have columns like so and then we have rows like so in total we have one two three four five six seven and eight columns and I think the same amount of rows so one two three four five six seven and eight indeed what H frames and V frames want is the amount of columns and rows that we have age frames covers the columns and V frames covers the rows which means in our case we have eight columns and eight rows and you can already see I can zoom in now and we can't see anything because the very first frame doesn't have any kind of image and I should show my mouse I can see it right now we are splitting up the image into eight columns and eight rows and currently we have the first item selected which doesn't have anything so we can't see anything at all right now but if I increase this number at some point we get an image and the higher the frame number is the further we get in the animation and I can click on this faster and then recycle through the animation that's literally all that's happening in here so if you cycle around you have the animation you can even be a bit more specific because under there we have another attribute called frame coordinates there you can Target the column and the row more specifically for example if I set the frame back to zero we get X and Y being zero but if I change this Frame to let's say two then we move X to 2 but we stay on the first row I hope the system makes sense if you play around with it it should be fairly straightforward now though we have another issue and that is none of this plays automatically in the game so this kind of behavior we have to program and that would be kind of an issue now we could manually Target every single frame inside of code and then make this work but that would be really annoying to work with so we need a better solution and fortunately Godot has another better solution which is actually one of the most important notes you can learn about that node is the animation player and basically what it does is it plays an animation doesn't sound like a lot but the reason why this is powerful is because when we talk animation in this context we mean literally any kind of change in property it could be a movement a rotation animation frames light energy or literally any property of any node you can also use an animation player to call methods on a certain note and you get a huge amount of control over how these things change so let's play around with that first of all though I want to clean things up a bit and for that I'm going to get rid of explosion 2. so let me delete it and instead with grenade selected I'm going to add a simple Sprite 2D and this spriter D is going to get explosion free this is the one I actually want to use so I'm dragging it into the texture now we get another kind of sprite frame and on that once again I have eight columns and eight rows which means now we can animate via the frame what kind of image we actually want and by default let me set it to zero also I want to rename the Sprite 2D to explosion that feels significantly cleaner well with that I have the grenade selected and now I want to add an animation player if you just type in animation you get animation player and animation 3. for this tutorial we are only going to use the animation player however if you use more complex games especially 3D ones you want to use an animation tree to control the animation you have inside of the animation player although for now don't worry too much about that I simply want to add an animation player and then we are good to go at the bottom we have another kind of editor that doesn't really have any kind of content to change that you have to click on animation this gives you another menu and in there you can click on new this is going to create a new animation the kind of Animation I want to create I want to call explosion once you have that you get a timeline right now we have a timeline you can drag a kind of indicator around and this timeline goes from 0 to 1 second although you can make it longer so on the right we can set this to one second or two seconds or 10 seconds whatever you fancy in my case I want to set the animation length to 2 seconds for these kind of values you just want to choose whatever looks best in the end there's no Universal value you can also change the units they are seconds of frames per second the indicator right now we are moving in increments of 0.1 seconds and quite a few more but none of this really matters what instead is incredibly important is this ad track if you click on that you get a menu of what kind of value you want to animate in our case we want to animate a property track so if I click on that then Godot is asking me to select a node and in my case I want to select the explosion or more specifically the Sprite 2D that is called explosion if I now click on ok but those asking me which kind of property of this node I want to animate in my case I want to Target the frame of the Sprite 2D and on this I can click open and now we have the frame property and if I look back at the Sprite to the explosion all the way on the right we now have keys this is because of this property that we have set almost specifically because we connected this Sprite to an animation player and now with that we can create key frames so right now in the timeline I am at second zero and if I click on the key next to frame I have added a keyframe for this time which means at this time we are going to have this Frame however if I now go to one second I can right click on it and insert another key or to be more specific another keyframe and if I click on this one on the right in the inspector we get another value so for example in there I could set this to 1 and now if I go further to the right I can right click again insert another keyframe click on this one and then increase the value by one again and now if I move along the timeline and let me zoom in a bit if I now play all of this we get a very basic animation and if I move these Keys closer to each other you can see a bit better what's going on so if I now play it we get a really slow animation it doesn't look particularly good but that is a rather small issue all we need are more images and then we have all we need let me get rid of all of these keyframes and move the timeline back to zero now with the explosion spread selected I want to get my start frame for this particular one I want to start with frame 29 so let me increase this a bit and I want to start on 29 actually 28 might be better let's start with this one so 27 this is where I want to start if I now click on the key we have added one keyframe and we have moved the timeline forward by one increment so 0.1 second because of that still with the explosion selected I can click on this key multiple times and every time we get the next frame inside of this animation and we're moving the timeline forward a tiny bit so I can do this multiple times and I want to go up to frame 44. or we can go a tiny bit further I guess this one looks good you do want to be careful here because if you keep on moving forward at some point you reach the end of the timeline and then you would get some weird Behavior so in my case I want to extend all of this let's say 2.4 seconds and if I now play all of this we are getting an animation so this is working really good and this is the basics of what you can do with animations pretty much all you want to do is always add another track then you have a property track and then you select a note and on that for example I could get the grenade now you can update one property of this node and literally any property of this node can be animated there's no limit to it also what you can do inside of the animation player we still have autoplay on load and we have looping the animation so both of these you could use just fine like we have seen for the other animation let's say I want to autoplay this animation if I now Run the game I shoot a grenade there we get an animation although you can see this isn't ideal yet we keep the last frame of the animation so we still have to work a bit more on this I want to select the animation player again and if you click on the Node and you don't get the editor all you have to do is click on the animation at the bottom and there we are again I want to add another track but now I want to call a method and the method is going to be on grenade and now we get another timeline if I now right click on this I can insert a key and now Godot is asking me what method I want to call right now grenade doesn't have any custom functions so we can only call the inbuilt ones but that is all we need for now the one I want to call is called Q3 this destroys a node so this is the method I want to call at the end of this animation and now if I run out of this again I can shoot a grenade and by the end it disappears because we literally destroy the node I can actually demonstrate if I go to remote and look at the projectiles I can still show you the laser and we get a laser inside of the projectiles and if I shoot a grenade we get a grenade 4 bit but after a while the grenade disappears again along with the animation so this is exactly what we wanted and once again all we need to do for all of this is an animation player and this could do even more there's a lot of stuff you can do in here as a matter of fact we can do an exercise with this one I want you guys to add a red light to the grenade on top of that add another animation to the animation player and use that to make the red light blink for two seconds the energy property of the light is probably what you want to use for that but just play around on top of that add another function to the root node of the grenade this function should be called explode and at the end of the animation for the blinking I want you guys to call this function pause the video and try to implement this one yourself first of all I want to create another animation so with animation I click on new and let's call this one Ling ping inside of this animation we have a timeline and we want to add a track although to animate a property we first of all need the light for the grenade and for that with the grenade selected I want to add another Point light 2D and let me hide the explosion for now because this one would be distracting basically what I want to do is to have a light over this red circle also the Collision shape should probably be below the Sprite so we can see a bit better what's going on once again inside of Graphics we have lights and the texture there we have circle.png this I want to use for the texture and I definitely want to scale this down quite a bit let's say 0.3 probably too large 0.2 still quite large okay this one is definitely much too large 0.01 is too small 0.1 okay 0.03 was the ideal number here on top of that I want to update the color so the color for this one should be a reddish tone and let's go all the way to red and finally to make sure the energy works so we can add some blinking via the energy this is looking quite good which means we can use the animation player to update this energy property although first of all the animation needs to be two seconds long which means in the timeline I want to set this to 2 seconds now I want to go all the way to the beginning and at this point I want to add a track then a property track I want to get the point light and on there I want to get the energy if I open this one now I can either add a keyframe with a right click and insert key and let's say by default this should be zero so we have no light at all and let's say if we go to half a second I could go to point light 2D and I could add another key via the inspector both is totally fine you get the same result although right now both of these points have a value of zero so there's no change instead I want to increase the value quite a bit let's say this one and to have a bit clearer numbers let's go with 10 and if I now click on the key we go from 0 to 10 which means if I play this we get an animation cool and now we can go to one second set this to zero once again click on the key again then we get kind of a blinking animation then 1.5 it should be 10 again and then I can go to 2 and set this back to zero if I now play all of this we get an animation although it's not exactly a perfect animation we probably want to have some slightly faster blinking for that I want to move the nodes a bit closer to each other and once again I keep on repeating myself but the more time you spend on all of this the better it's going to look and let me move them in equal increments and what you can also do if I go to the right part you can simply duplicate a key so if I click on duplicate key we get the same kind of outcome now I want to get this one and let's say for last one I want to increase the time to 2.1 second and now for the final key I want to duplicate this one and now we have faster blinking I guess this one works and this animation is what we want to play by default on auto load so now if I run out of this again and shoot the grenade we get a blinking behavior that stops after two seconds so this is perfect on top of that with the animation player selected I want to call a function at the end of this animation now for that I have to get to my grenade or the script on my grenade and right now there's literally nothing so I want to add a function that I called explode it doesn't need any arguments and in there for now I simply want to print explosion really important now make sure you are saving this script otherwise the next step is not going to work the next step being I want to add track then call the method I want to call the method on the grenade now we get another timeline and Godot wants a function all the way at the end of the animation I want to insert a key and now we have from script methods explode this is the function I want to call and if you didn't save the script you wouldn't have this final step you wouldn't get this explode function this is only available once you save the script but with that if I run out of this and I shoot a grenade after two seconds we should get explosion cool this is working although in this case I don't want to print explosion instead what I want to do inside of the animation player I want to play the explosion animation and now we can do quite easily all we have to do is first of all we have to get the animation player and then the play Method already doing that Godot is giving us a couple of choices blinking is the current animation and instead we want to play explosion and now if I run all of this I can shoot a grenade it blinks and then it simply disappears the reason why this doesn't work is because I have hidden the explosion node so if I make this one visible then it should be working so now if I run all of this again that is feeling much better I guess we could refine this a tiny bit though because this animation doesn't look amazing yet inside of explosion and let me show the editor there we have the explosion first of all I want to hide the actual Sprite 2D so if I hide this it's partly right now is the grenade itself I want to hide this around this part of the animation because there it's not visible at all so another property track I want to get property track then I'm going to get Sprite to D and the value I want to look for is visible in there I want to insert a key at this point and you can already see right now it's enabled but this should be disabled at this point in the beginning when we start the animation I want to have another key and there it should be enabled which means now if we run all of this at some point this spread too deep will not be visible anymore and this we can use around this timeline to add another track a property track I want to get the explosion and on that I want to get module late what this allows us to do is set a transparency of this animation and it was up here if I now insert a key we get pure white and this is totally fine we can leave this as it is however if I go all the way to the end of the animation I can add another key and this one is going to be fully transparent and now we are getting the explosion slowly disappearing so if I now play all of this the transition is a bit cleaner on top of that what you can also do is change how these two values change from one point to another point and this you do on the right there you have continuous discrete or capture or you have nearest linear or cubic this is how the animations change but this one for example if we go with cubic then we get some slightly different Behavior although in this particular case it's not too visible but you can play around with this a lot and get the exact kind of Animation that you want but with that I can run all of this again shoot a grenade and there we have a bit of an issue so you can see we still have the light and that is because the spriter D was hidden because of the animation if I now run all of this again with the spriter D visible now this looks better and let's try an animation this is looking pretty good we probably want to hide the light as well this could be a problem yeah definitely the light is going to be an issue so once again with the animation player for the explosion we have to add another track which is a property track for the point light 2D and all I really want to do is to hide the light entirely so this is not height this is visible at the start of the animation I want to have the light visible so insert key it should be visible and along with the Sprite 2D I want to hide the key so on this keyframe I want to make the light disappear and now this should look better and there we have another minor issue but the light disappears so basically every time we are playing the animation we are hiding the Sprite 2D that is because inside of this animation whenever we are playing this at the end of The Animation Sprite 2D is invisible I suppose the most secure way to ensure this isn't going to be a problem inside of blinking although at the beginning I want to add a track a property track then Sprite 2D and set visible to being enabled all the way at the beginning and that way we are not going to have the issue I can now shoot it and we have another issue now the light isn't being visible anymore and this once again is because inside of explosion we're hiding the Sprite 2D and the point light 2D so both of these if we're playing the animation past this point they are being hidden so you can see it in the editor right now this can be an issue and once again inside of blinking all the way at the beginning one more track property track Point light 2D I want to set this to visible and now I want to add another value to point letter D in the beginning this should be visible and finally let's try all of this if I now shoot it we get the light we get the grenade we get the explosion and we get a transparency effect cool with that we have animations and yeah I'm happy with this so this was the animation player one of the most powerful notes in all of Godot and you can have a lot more animations in there and you can do a lot of things also when you look at add track there's a lot more stuff that you could work with I have only touched the surface of this node I want to talk a bit more about animations specifically I want to cover another concept called tweens and tweens are not essential to make a good gaming Adobe but they can make your life significantly easier at this point we can animate basically any property using an animation player the thing is sometimes you just want to have a simple animation like zooming in with the camera updating a position or changing the transparency all of these things are quite simple and as a consequence an animation player for them would be Overkill to remedy that situation we have tweens and basically what they are most importantly they are not a node although there used to be in earlier versions of Godot instead they are an object that you create in the script of a node and then this twin object can interpolate between two values this might sound confusing so let's do an example we want to rotate any kind of node it doesn't really matter what it is for that we are setting a start value an end value and a duration with that information the twin object can start at a certain point in this case we would have a rotation of zero degrees at zero seconds and then over the duration of one second we would go through all of the values and eventually end up at the final value the one we have specified all of this would take just a couple of lines of code no dedicated node and it's very easy to work with once again here we are back in the dough and what I want to do is that if the player is entering this house I want to zoom in on the player which means inside of the player we have the camera 2D and this one has a zoom level if the player is entering the area to D of the house then I want to increase the zoom level to whatever value we want let's say if I go to one then okay you can't really see the outcome but if I zoom in this pink reddish area is the camera zoom so if we change this to a one it is much closer to the player although this is not the value I want for now I want to give it 0.6 for that though first of all we need to have a bit of a setup and first of all I want to close the light fan animation and the grenade we don't need those anymore instead I want to work inside of the house this one is now going to need a script so I'm going to attach a script for the template I want to have an empty one and the folder should be in the same folder where we have the house all of this looks pretty good now we have a script and next up with the house node selected I want to click on node and then look at body entered I want to trigger this signal once the player has entered and for now let me simply print player has entered also while we are here let me check the house area 2D in the inspector for the collisions those look good the house is on layer 5 and can only see the player whenever you check collisions this is a really important tab it's very easy to mess up now with that we should be printing something and let's test it that's usually what you want to do very often so there we already get an issue that we get players entered many many times although we are also getting it when the player is actually entering to check what's going wrong here let me print the body that we are getting and let's run off this again and there we can see this simple light is causing the problem along with the wall light but those we have to update the Collision layers which means I want to open up the wall light and I want to open up the I called it this simple light both of those have the wrong Collision layer and I really want to emphasize this you always want to keep in mind it's very easy to forget should not be layer 1 instead it should be on layer 3 for objects and for the Mast it can see the player it can see the enemies and they can see the projectiles with that we can save it and then for this simple light I want to have the same it should be on layer 3 and can see layers 1 2 and 4. and with that I should be able to close both of these run all of this again and now there's no print statement when we are running the game and if I walk into all of this we are getting the player and this works multiple times so this is looking really good that is a good start next up I want to connect this house to the level or more specifically the signal we have just created this one here this needs to trigger a function inside of the level which we can do via is signal so I want to create a signal let's call it player entered and instead of printing something I simply want to get the player entered and then emit all of that now with that back inside of the level I can get inside of ground we have the house and now the house has player entered as a signal this I want to connect to the level script and now we get on house player entered just to make sure that this one is the working I want to print player has entered a house in level it's really important to always double check your code and especially when you're recording all of this gets significantly more difficult but this is looking really good so finally we can start creating a tween the way you're doing that is first of all you want to get the tree this is a function that Returns the node tree basically the entire scene we currently have and this one has a couple of methods the one we want to use is called create Queen also function and the function that doesn't need any arguments so this would create a twin object this we want to store in a variable right away let's call it VAR tween and now we have a tween although this doesn't do anything instead what you now have to do is get this tween and then run tween underscore property and let me extend this window so we can see what's going on this twin property method wants to have at least four arguments but we have received zero so far so we have to make some updates also a really useful tip if you hold Ctrl or command and space then you can see what could those specifically wants for this method and number one it wants an object most of the time the object is going to be a node in our case the object would be the camera 2D so inside of the player we have a camera 2D next up we want to have the property on this node that we want to change which means if I minimize this window and go to camera 2D in the inspector there we have zoom and if you hover over that we get Zoom this is the property we want to address and importantly this property Godot wants to have as a string so in string Zoom the name of this property and then we're good to go and once again let me extend this we will need two more attributes the door wants to have the final value and the duration now for Zoom the value good ones is going to be a vector 2. with two values let's go up with one and one for X and Y values and finally we need a duration and this is in seconds so if you had a one here we have a one second duration and now Godot is not complaining anymore and this should be working so let's try all of this and I can walk towards the house and once we are entering the area 2D we can see our camera is zooming in so this is working really well I can still do everything else so I am quite happy with that perfect I really hope you understand why the system is incredibly powerful if the player is entering the house we only want to zoom in so ultimately a fairly simple operation we could accomplish all of this using an animation player but it would be way too much work which is why you're seeing tweens all over the place they make your life much easier although you could get by without them however with that being said if I run all of this again and I go into the house so just a second the animation still works but the issue we have now is that if the player is leaving the house the camera doesn't return back to the default state and fixing that is going to be your exercise I want you guys to change the camera zoom back to the start value of 0.6 for both X and Y once the player is leaving the house pause the video now and try to implement that I want to start working on the house because in there we have to attach a new signal which is body exited I want to add that to the house and now we have a new function although this is local to the house scene so we have to create another signal let's call it player exit it once we have that all you have to do is get player exited and then emit this signal with that we can return to the level scene select inside of the ground the house and now we have another signal this we want to trigger and connect it to the level script let me get rid of the white space and extend the window inside of this function we now want to create a new tween and use that to update the camera once again for that once again I want to create a new variable with tween and this one is going to get 3 and then on that I want to create a queen on the next line I want to use this twin object and then run the method tween property and once again we're going to need four arguments first of all we need an object which in our case is the player camera so I want to have the player and then the camera 2D once again we want to Target the zoom so as a string I want to add Zoom next up we want to return to the start value which was Vector 2 and 0.6 and 0.6 finally for the fourth value we need a duration and just do something else let's say two seconds once we have all of that Google stops complaining we can run the game again and now if I go into the house this should still work and that is looking really good and now if I leave the house we are going back to the default camera zoom and well we can do this multiple times this works really well I am happy with this with that we have the basics of tweens now that being said you can do quite a few more things with them although before I get to them the debugger is complaining and this I don't like basically we are using body inside of these two signals and Godot doesn't like that so we have to add an underscore so the debugger stops complaining this is a smaller issue but you don't want to have too many debugger issues at some point they are going to become annoying and confusing if we now run out of this again the debugger is happy so everything is good now with that covered we can look at a few more extra functionalities of tweens that can also be super useful right now we have one animation when the player is entering the house and another animation when the player is leaving if you want to have something a bit more fancy you could add multiple animations on one tween for example what we could be doing if I want to add another animation I would simply add tween again then use tween property once more let's say as an example I want to make the player invisible for that I want to get the player or the player know to be more specific next up the property I want to Target is modulate this property covers the color and the transparency of any node ultimately it is a vector 4 with 4 values we have a value for the red color for green for blue and then for the alpha values which we cover with a now in our case we don't really want to Target all of them all we care about is the alpha value and for that Godot has a nice shortcut you can use a colon and then lowercase a with that we are only targeting one value inside of this property and this value we want to set to zero finally for the duration let's say I want to have a duration of 2 seconds and with that if I now run all of this again I can move the player to the house and now we are zooming in and after we have done that the player becomes invisible and we still have the Shadows so everything else works fine but well now we have an invisible player which is illustrating one major issue that we are first playing this animation and then we are playing the other animation Godot plays them in sequence which means if I turn all of this around and have modulate first and then the zoom you can kind of tell where this is going we are going to have first the transparency and then the camera so now the player becomes invisible and then we are zooming in sometimes this is the desired Behavior but most of the time it is not to play both of these animations in parallel you would get the tween and then the method set parallel and you would set this one to true or false depending on what you want in my case I want this to be true which means if I run all of this now we can walk in there and we would get the animation and well we will get both animations for the camera and for the transparency you might have also seen let's say if I type tween again and then set you can also set a Loops so if you want to play an animation multiple times you could do it with that one although I am not going to do that that's something slightly more advanced or not really more advanced just slightly different and I am not going to need it instead I want to cover something else and that is when you are treating a property you can add a tiny bit more or example right now we are setting the player we're getting transparency and we are only setting the end value and the duration what we can also do is set a start value this you get by adding a DOT and then the from method in there you can simply set a start value for example if I set this to 0.5 then let me actually demonstrate what's going to happen if I now run into the house we are going to transition the player almost immediately to half transparency and then we are moving to zero transparency by default Godot is going to start with the current value of the player which is one so full transparency but if you want to have a default start value you could use from besides that you could also set a transition speed for example right now we are zooming in with the camera and this works at a linear speed but sometimes you don't want to have a linear speed and for that you can add another method called set runs for set transition and in there you get a whole bunch of different kinds of transitions for example I guess trans quote should be visible if I now run all of this you might be able to see this or you might not or this kind of Animation it's a bit hard to see so there we are zooming in seemingly faster but we're not actually doing that let me draw this actually when you think about transitioning any kind of property you would have two axes on the xaxis you would have time and on the yaxis you would have some kind of value the simplest transition to understand is a linear one this one simply moves at a straight line however this is not always what you want to have sometimes you want to have animation transition that looks something like this or something like this or even something like this all of these you could set with set trends now in my case I will not be too concerned about this but this is also something you can do tweens are actually quite powerful in the dough although at some point if you add too many things inside of this tween you might simply want to use an animation player there's no hard line between which one you should be using at some point you're just going to get a feeling for it but both are perfectly fine approaches in my case though I want to comment out the modulate because this is not something we are going to need now finally there's one more thing that I want to do if I go back to the main scene when the player is entering this area so far I can actually demonstrate this the player can keep on moving so this is not ideal instead what I want to do is if the player is entering this area I want to transition the player speed to zero what that is going to mean is that the player is moving normally and once we are entering we are slowing down the player so we are ending up somewhere here that way the player is never going to reach this bit which would look a bit unrealistic for that we will need a few more things it's not too much back in the player I want to work in the script and I want to give the player a few more attributes also for those I want to use export I want to create VAR max speed this is going to be an integer and this should be 500. besides that I want to have a normal variable which is going to be speed this one is going to get the max speed value by default also we can be a bit more aggressive here this speed should also be an integer once we have that I can update this 500 with the speed if I now run all of this we are not going to see a difference because as far as Godot is concerned the numbers haven't changed speed is still 500. that being said what we are now able to do inside of the level when the player is entering the gate this is happening inside of this function I don't want to print things anymore instead I want to create another variable which is going to be the tween and there's something I forgot to mention earlier so far we created a tween with get 3 and then create tween you don't actually in the first part you can simply type create Queen and then Godot figures out the rest for you so this is also perfectly fine and also to more easily understandable part so this is probably what you want to do next up I want to get the tween once again and then run tween property I want to get the player node and spell this correctly as well on that player node I want to update this speed the final speed should be zero and I want to have a duration of one second with that I can run all of this again and now if I go into this area we cannot move anymore although the duration was a bit too long so let's say this one could be 0.5 and now if I run this again in there we cannot reach this ceiling anymore this is exactly what I wanted now right now this is looking very silly and we are breaking the game but later on we're going to add a transition that the player is going to get into a different level although for now we have covered another really important part so we are good to go although before that before I forget the debugger now is unhappy again because we have this body parameter that we're not using so let's add underscore and now gudo is happy again at least I think it is yep that looks good cool with that we are finished with this part now that we have a level I want to connect the laser to it and this is going to mean a couple of things most importantly I want the laser to disappear when it is colliding with a wall or an object on top of that if it is colliding with an enemy it should trigger a function but now this function is going to do very much later on when we work on the enemies all of that will be much more elaborate on top of that there's one more thing I want to cover and that is that the laser should disappear after a certain amount of time that is important because I want to make sure that we cannot have infinite laser and the reason I think is best explained if I look at all of this in the dough back in the editor I want to run the game although I don't really care about the game I want to look at remote there we have the level and there we have projectile this right now has nothing in it however if I go back to the game and I simply shoot in One Direction we now get a whole bunch of children and this can go on ever which is fine for the game and for this kind of 2D game it wouldn't cause a problem that being said if you have a more elaborate game where you work with 3D objects where things get much more complicated you want to have a limit on how many objects you have in the game just imagine that the more objects you are creating the more your computer has to process so we want to have a limit on how many we can have and for that we want to have a timer that even if the laser doesn't hit anything we still want to get rid of it after some amount of time now for all of that we have to work inside of the laser so let me open this scene with controller command shift and oh I can open the laser and there we have a laser and the laser has a script we are simply creating a speed and a direction which by default is up and then inside of process we are updating the position of this area 2D and then inside of the level when we are creating all of this inside of the on player laser function we are setting a position for the laser a rotation and the direction so now we have to create a few more things most importantly whenever this laser collides with a static object then we want to destroy it which means inside of node we want to look at body entered body entered because the area is going to collide with bodies which are static objects or character bodies so this I want to connect to the laser and now we have a function what we could be doing in here for example is fringe and let's say Collision now if I run the game again I can shoot at a wall and we get Collision to be a bit more detailed we can also print the body this laser is colliding with so if I now do this again we get a collision with the gate and if I shoot in this direction we get collision with a tile map and this multiple times so if I click on this we get a whole bunch more and this seems to be working just fine that being said though for this game I don't want to print anything I want to destroy the laser and this we can do quite easily all we need is the command Q3 this is destroying a node and that is exactly what we want to do if I run the game and I shoot at a wall the laser simply disappear the same works with the steam vents and the same is going to work with these walls as well with that we have covered the first part that now the laser is going to disappear once it collides with a static object but this is not enough because if I go back to the level and minimize everything what I now want to do is add another scene and the scene I want to add if I click on Ctrl shift and a I want to add a drone scene to my level let's say somewhere here and now if I run the game the Drone is going to move to the right and if I shoot at it the laser is also going to disappear so this one is still working just fine but now what I ultimately want to do is that if the laser is colliding with this drone I want to call a function and for that we have to figure out inside of the script on the laser we want to get the body which could either be a static object or an enemy and on this body we want to call a function if the body has certain attributes for example if the body belongs to an enemy the way I approach all of that is inside of the Drone we have a process function and I want to create another function I call this one function hit doesn't have any parameters and all it is going to do for now it is going to print let's say damage it doesn't really matter what it is what I now want to do inside of the laser I want to call this hit function what we can be doing quite easily is we can get the body and then call the hidden method on it and this would already work so if I now run all of this and I shoot at the Drone we get damage so this is working just fine the problem is if I should add anything else the game is crashing because we have a nonexistent function hit in Bay's static body 2D which basically means that this method doesn't exist inside of a static body which is the steam vent to fix that we have to check if the body has a hidden method or not the easiest one would be with if then the body and then the inbuilt method has method I don't suppose I have to explain what this one is doing the one argument that this method wants is a name of a function in our case this would be hit and if that is the case I want to call this method and now if I run all of this again I can shoot at a drone it is still working just fine but if I should add anything else we are not getting an error anymore and that is because this if statement is not triggering which is basically covering the other aspect of the assignment so now we can trigger a function if we're hitting an enemy with a laser although you don't actually see this kind of method being used all that often because Godot has a simpler way of doing all of that all you have to do if I get rid of it you have to check if the function or property in this case hit is in the body the result would be the same so if I now run all of this again I can still shoot at the Drone we get damage and if I shoot anything else we don't get anything so this is the same outcome but a bit easier also more powerful because with this syntax you can check if a method like hit or a property is inside of a node for example what I could be doing inside of the Drone I could create an attribute let's say VAR is enemy and this would be a Boolean which by default is root this notably is an attribute not a method so we cannot call it but inside of the laser we don't really care about it we could simply check if is enemy is in the body then we can print is an enemy if I now run this again I can shoot at it and we get is an enemy and this we don't get anywhere else although this isn't actually what I want to do so I'm going to get rid of it also in the Drone we don't want to check if this is an enemy cool with that we have another really important bit now we can call a method on an enemy and we can also get rid of the laser if we have a static object now we have another way to damage an enemy and that is via a grenade and for now I'm going to ignore this one because later on we have to cover another concept to make all of this work efficiently so don't worry about this one for now finally I want to create the third part and that is that we want to get rid of the laser after a certain amount of time even if it doesn't hit anything and that is going to be your exercise basically what I want you guys to do is to use a timer to destroy the laser after two seconds or basically whatever amount of time you think is appropriate pause the video now and try to implement this one back in Godot I want to keep on working in the laser and since we now want to use a timer I have to attach to this laser another note which would be a timer I'm going to call this the self destruct timer this selfdestruct timer inside of the inspector is going to have a wait time of two seconds one shot should be enabled but auto start should not be a name once we have that inside of this script we basically want to start this timer once the node has been created and for that we will need the ready function so func underscore ready and once it is ready I want to get the self destruct timer and then start it that's the first part the second part is once the timer is running out then I want to call the timeout method and connect it to the laser all this one has to do if I get rid of s we want to Q3 meaning we want to destroy this node and with that we should be done so now if I run this I can shoot all the way to the right and if I now look at remote level vectiles right now it's empty let's try this again we get a laser for a short period of time so this there we have a laser and there disappear and this to the player would never be visible because the laser leaves the screen really quickly but well we make sure that we never have too many laser and with that we have connected our laser to the level scene which is another major part of the game so with that we have made a huge amount of progress at this point we are able to create a single level but that is still quite limited so in this part we are going to cover how to create multiple levels all of that in the most fundamental sense is actually kind of easy all we have to do is to create multiple level scenes unfortunately it isn't that easy simply because our level contains quite a bit of code for example to create a laser or the grenades all of that codes exist inside of one level scene if we made multiple level scenes that would not be available now we could copy the code over but that would be really inefficient imagine later on you might have hundreds of levels and you wouldn't want to copy over the code every single time if you had to make a single change this would just not work anymore now to illustrate all of this a bit better let's have a look at all of this in good dough right now we have a single level so I can zoom out and we have all of this a fairly basic level but for now this is pretty good if I wanted to create a second level in the most basic sense all I would have to do is create another scene this would be a 2d scene and let's rename it right away to level two the name here doesn't matter so much I am going to delete all of this in just a bit anyway so if you don't want to code along for this short bit don't worry too much about it for this level 2 I could for example add another scene which would be the layer if I save all of this under scenes and levels there we have level two and now I have level two this one contains the player and I guess just so that we have something else let me add the bed in there as well so there we have a bed and the player if you want to test an individual scene you wouldn't click on this play icon instead you will click on this one with that you are only running the current scene so now if I click on that the player is still working around however now we don't have a camera and if I shoot we only get the particles but we don't get an actual laser and that is because all of the logic for that happens inside of the level meaning all of this code here 35 lines of code are only available inside of this level they are not available inside of level 2. which is why all of this is incredibly Limited as a consequence I will close the scene and go to levels and level 2 and delete this scene because it's simply not an efficient way to create multiple levels instead let's talk about a much better way the concept we need is called inheritance basically what that means is we want to create a parent level scenes and this one is going to contain all of the logic so for example this one would contain the logic for shooting a laser shooting a grenade and anything else that we could need but this parent level scene isn't actually going to be visible instead what we are going to do is when we are creating any other level scene these level scenes are going to inherit from the parent level scene that way they have all of the important code but we can create multiple instances of that scene that way we could have hundreds of levels they would all share the same code base and then you could even add additional parts Godot is making all of that actually quite easy so let's Jump Right In and let's have a look at all of that what I want to do is to have this level as the parent scene and then I'm going to create an inside level and an outside level and both are going to inherit from this level that way we can keep all of the code we have written so far and then have two other scenes inheriting from this code or at least from parts of this code you're going to see in a second what I mean when you look at the top left there we have scene and the first entry is new scene besides that though right below we have a new inherited scene if I click on that Godot is giving me another dialogue in there it helps me to open up a scene the scene we are opening up would be the parent scene and right now this will be level so this is what I want to open and now we get another scene and let me put both of those scenes right next to each other so you can see the difference also I guess I should close everything else so things are a bit easier to see right now we have the level and we have an unsafe new scene if I minimize everything in there you can see now we have the same notes but some of them are yellow so in the original everything is white in the inherited one we have some yellow scenes the yellow scene means that it is inherited and all of this should be yellow this may just be a bug but all of these scenes are inherited from the parent scene and what is really important now if I go to the level and I for example delete the Drone if I now set the level again and return to the unsafe scene the Drone has also disappeared which means that whatever change we are making to the parent scene it will also affect the child scene and I guess to make all of this a bit more noticeable let me rename this scene to the outside scene and now once I've renamed it the bug disappeared now all of this is yellow this is how it should look like I can save all of this as well now I have outside.tscn and if I run this we have no change whatsoever besides that I want to create from My Level another inherited scene so new inherited scene once again I want to inherit from the level so I click on open and this scene I want to rename to inside I want to save that one as well and we have the name right away insight.tscn perfect with that we have three levels we have a parent then outside and inside with outside and inside being Children of the level the issue now is that both of the inside and the outside levels look identical and for that we have to make a few more changes inside of the parent all of this needs to be quite a bit more flexible for example what we could be doing is that this gate isn't necessary inside of the parent it should only be inside of the outside scene which means I want to get rid of it I can simply delete it and now it's not visible anymore with that make sure you are saving this level and now in the outside scene this one isn't visible anymore that being said we can totally add it again so with outside selected I click on Ctrl shift and a and I want to add the gate again and place it once again in the right position something like this and also make sure that it's below the player with that we have the gate inside of the outside scene but inside doesn't have it and a similar thing if I go back to the level I want to do with all of the notes inside of the ground node 2D so for that I want to right click and cut all of them out the level scene becomes really empty and this is by Design all of this should be empty so we can design the actual level inside of the child scenes in there we still have all of this stuff in the parent and that is because I have to save this level it's very easy to forget now the ground node is entirely empty but what we can do now is simply paste all of the stuff we have cut out and there we have the level again however inside of the inside level none of that is visible so this is looking significantly better at this point I can play both of these scenes so if I run the outside scene just the scene itself which I do with this icon I can still run around everything is working just fine so this is really good we also still have the house over there and all of this is working although there's going to be one change we have to make and that is the Gate entrance this one doesn't work anymore because we have to reconnect the signal but that is quite easily done what is much more important now if I go to the inside level and run all of that I can run around and there's nothing right now however we still have a camera and we can still shoot a laser we can also shoot a grenade so this is working just fine and there if I shoot it you can see the camera is still working that is the basics of inheritance if you are creating multiple levels you want to have a parent level that is ultimately quite bare bone though in this case we have a no 2D for the level then a ground node then the player and then projectiles however then inside of the outside scene we have the actual images that flash out the level and besides that we have an inside scene in this one we're going to decorate in just a bit first of all though we have to cover one more thing and that is that if I zoom in this area 2D has lost its functionality if you look at the code we want to reconnect this signal but there's a bit of a problem right now and that is that this outside scene has the level node so if you hover overt you can see level.gd if I go to the parent node the level we have the same script so level.gd and inside of the inside scene we also have level.gd which basically means that all three scenes share one script which might be intentional but very often it is not for example for the outside scene we want to have the functionality for the gate only inside of this particular scene which basically means for the outside level I want to have another script and this script should inherit from the level scene as well and that you can also do quite easily first of all with outside selected I'm going to click on this icon which is going to detach the script from the selected node if I click on that we don't have a script anymore but now I can add another script and this one would be outside.gd I want to save all of that in the same folder so all of this is looking really good I can now click on create and with that if I run this particular scene we are losing our access to the laser so now once again we don't have level.gd anymore meaning nothing is going to happen which means we have to figure out how to get all of the code from level.gd into outside.gd to achieve that you want to go to level.gd and then all the way at the top you want to create what is called a class underscore name and you can see once you write it it becomes red right away once we have that Godot wants to have a name for this class name in my case I'm going to call it level parent what this allows us to do is to inherit from this script which means inside of outside I don't want to extend a node 2D instead I want to extend a level parent right now Godot cannot find it because we have to save level.gd if I save it go back to outside now the error should disappear and there we go if I now run all of this again I can shoot and you can see I have loaded level the currency and this one doesn't contain anything right now instead I want to play the outside scene so if I run out of that now we have the shooting functionality once again so this one is working just as before and that is because with this class name we can inherit from the script like we have inherited a scene so all of these functionalities are available inside of outside.gd what this is going to allow us inside of level.gd we want to cut out this on gate player entered gate so I can simply control or command X and get rid of this code because we don't need it inside of level.gd it should only exist inside of outside.gd and let me save level.gd really quick and now in outside.gd I want to select the gate go to node and now player entered gate we can connect to the outside scene and with that we get this signal once again and inside of there I want to paste the code in that we had earlier like so if I run this scene again and I go to the gate the player stops moving really quickly meaning this code is working just fine and it is only available inside the outside scene inside doesn't have anything like that but it does have access to all of the stuff from the level although we are getting a debugger arrow and that is because in outside it should be an underscore body with this part implemented we have the two major approaches to inheritance you can either inherit from a scene which you do by going to scene and a new inherited scene or control or command shift and n you can also inherit from a script and this you do for example inside of laser you are giving a script a class name and then on any child script you are extending this script not to note you inheriting from that is pretty much all you have to know if you understand that you can work with inheritance quite well now this is incredibly important to understand so I really want to do an exercise I want you guys to create a generic item container scene it should just be a static object a Sprite and a collision shape it should also have a script with a hit function so if a laser collides with it you are printing something this could be literally anything let's say for now you should be printing the word object from that I want you guys to create two child scenes one should be for a toilet the other for a box all of the graphics you can find inside of graphics and objects finally there should also be inherited scripts one for the toilet and one for the box for both of them I want you guys to overwrite the hit function so that you are printing toilet for the toilet and box for the Box pause the video now and try to implement all of that and see how far you get I want to get started by creating the parent scene so a new scene the root note should be another node and more specifically a static body 2D let's rename this one right away as well I suppose item container seems appropriate besides that I also want to give this one a Sprite 2D and a collision shape 2D important for this one they don't have any contact the Sprite 2D doesn't have a texture and the Collision shape doesn't have a shape Godot is going to complain about it but we can just ignore it next up I also want to give this item container a script although first of all I want to save it with Ctrl or command shift I want to go to scenes and in there I want to create a new folder I suppose I could call it container all I have to do in there is save it and now we have an item container this one should get a script right away so I attach a script item container the same folder all of that is looking really good I can create and all I really want to do in here is to create a function for hit without any parameters and all I want to do is to print the word object with that we have a couple of nodes inside of a scene along with a script this we want to use via inheritance which we do by going to scene and then new inherited scene the parent should be the item container this I want to open and let me return to the 2D view that's a bit easier now we have an unsafe new scene with a Sprite 2D a collision shape and a static body 2D I want to rename that one right away let's call it toilet inside of this child scene I now want to add the Sprite texture which I'm getting from Graphics there we have objects and inside of there I think all the way at the bottom we have a toilet.ph I want to direct that into the texture and there we go we have a toilet next up we will also need a collision shape 2D and I think for this one a circle shape 2D would be best let's do something like this this really doesn't have to be perfect I want to save all of this and now we have a toilet.tscn this would cover one of the objects next up I want to go to scene again and then new inherited scene for this one now we have to be a bit careful because Godot by default sets the parent as the currently selected scene which is the toilet scene in my instance this shouldn't be the parent scene instead the parent should be the item container make sure you select the right one for this one can be really easy to confuse this I want to open and now once again I have the same basic setup although for this one I want to go all the way to the top there we have box and the box has a base and a lid I just want to use the base and drag it into the texture although that being said with this item container we could add another Sprite 2D and place it right below the other Sprite 2D and simply place the lid in there and I think the lid needs to be moved down it tiny bit something like this you don't necessarily have to add this step but I'm going to use this one later on anyway so we might as well add it right now next up we have to add a collision shape and for this Collision shape I want to have a rectangle shape 2D which I want to space accordingly that's looking pretty good once we're part of that I can save it let's name it create and that's not how you spell create that's better now we have a crate and a toilet that's a really good start inside of the outside scene I want to add these two new scenes so with Ctrl shift and a I want to add the toilet and I want to add the crate I can also place them in a better position and I think the toilet ended up to be a bit large but that we can work on later first of all though I want to run this particular and now if I shoot at the toilet we get object and if I shoot at the crate we also get object on top of that the collisions are also working just fine and the player can collide with them so this is looking really good perfect that's a really good start so once again we have an item container and this is a static body 2D with a Sprite and a collision shape this we are using inside of the toilet to give it a certain kind of texture and a certain kind of collision shape same with the crate in this one we have another texture and another Collision shape and on top of that we are adding another Sprite 2D whenever you do inheritance I guess the best way to think about it is that whatever you're doing to the parent is going to affect the children however what you are doing to the children is not going to affect the parents or the other children that way we can customize each children individually without affecting any other child next up we have to work with the script so just as a reminder if I run out of this again if I shoot at the toilet and the crate we always get object and this is not what I want right now the issue is that the item container the toilet and the crate all share the same script they all have itemcontainer.gd to work with that I want to open the item container.gd script and give it a class name plus underscore name I suppose item container for this one is also a pretty good name this now allows me to inherit from the script which I want to do inside of the toilet first of all though I have to get rid of the previous script for that I want to detach that script and add a new one it should be called toilet this one's just fine and I want to create that one really important I don't want to extend aesthetic body 2D instead I want to extend this item container.g meaning I want to extend this class name for that inside of toilet.gd I want to extend the item container so far this is not going to make a difference so if I just run all of this I can still shoot at the toilet and we get object however this allows me now inside of toilet.gd to create another function called Hit this one should simply print or lit what is now going to happen is that toil.gd is looking at the item container and gets access to all of these functions almost specifically this one particular function but then it also looks at its own body where it also finds a hit function and it always prioritizes its own hit function meaning this head function is going to overwrite this hit function inside of the parent as a consequence if we are running the outside scene again I can shoot at the toilet and we get toilet however if I shoot at the crate we're getting object to work on that inside of the crate I should also rename the item container to create next up I want to detach the script and attach a new one with create.gd this one once again should inherit from item container and after that I want to create a new function that is going to be it without any parameters and for now it is just going to print rate that should cover everything we need I can run outside we have toilet and we have crate and this is looking really good I supposed to demonstrate that we are still getting from Level container the basic information we could for example add a method here let's say func underscore ready and simply print object was created if I now run outside again we get object was created for both of these objects but the other stuff still works just fine which means you could add any kind of function inside of the item container and they would be available inside of create GD in toilet.gd once again it might be a good idea to play around with this yourself it can be a bit overwhelming in the beginning but once you get the basics of it it's incredibly useful especially when you have multiple objects that are kind of similar but not exactly similar before we finish with this part there are two very minor changes I want to make number one inside of the level the projectiles should be below the player that way if I am running this particular scene the lasers look like well they don't look like they're on top of the gun anymore when we are creating them it's a fairly minor change but once you notice it it gets really annoying so look at the gun the laser always starts on top of it which isn't ideal but if we have to project ads below the player this is not a problem besides that I want to go to project project settings and there inside of run we can set the starting scene which I want to set to the outside level that way I can close all of this and now whenever I click on this button to run the game we are starting inside of the outside level the apparent level the player is never actually going to see it's simply a template for all of the other levels the major part missing right now is that we have to create an inside level and this is what this part will be about and fortunately there isn't very much that we need to get started basically we're going to reuse the tile map and the earlier bits we have built to build this level there's only one thing that I absolutely have to cover and that is how to use a tile set across multiple tile Maps so we don't have to redraw all of the shapes for the collision and the lights but that is very easily done here we are back in Godot and first of all I want to close the item container the toilet and the crate so I have only the levels open and what I want to do right now is inside of the level I want to add in the ground a tile map so we'll control our Command a I want to add a tile map the issue right now is that for this tile map we could create a tile set new tile set and then redo all the stuff we have done for the house as a matter of fact let me reopen the house or the house scene to be a bit more specific there we have built all of the stuff with a tile map and the tile map gets quite extensive so if I look at tile set then all of this underpaint we have painted a whole bunch of physics layers there you can see it a bit better and on top of that we have also drawn a whole bunch of occlusion shapes all of this we right now only have available inside of the house scene but we want to use all of that inside of the inside level and for that you want to go to tile set and then click on Save the tile set now Godot is giving you a no file dialog and there we have house.tress this is the tile set we are currently working with and this I want to save not inside of houses but instead I want to save it inside of levels save it in there and now if you look under scenes there we have levels and in there we now have house.tress doesn't look like very much but what we can use it for is inside of the inside level we can drag this how stress into the tile set and now we have everything available that we need especially if I go to tile set all of the occlusion and physics layers are still available so we don't have to redraw everything also the size of each tile is also correct and that is pretty much all we needed which means now we can start with the exercise and that is going to be I want you guys to build the inside level make sure to use a time lapse extensively and add some lights maybe some particles and just make the entire thing look nice pause the video now and try to create all of that back in Godot before we start there's one thing I forgot to mention if you look at the layers you can see that we don't have the layers from the earlier tile set inside of houses we had if I scroll down a bit we had layers for the floor the outer and the inner walls these layers are not being carried over so we have to recreate them that being said physics layers or all the layers associated with the title set like physics layers and occlusion layers those do carry over so if I look at this house there we have physics layers and we have the occlusion layers as well although we didn't change them but they would be changed if we had changed them which means inside of the inside level I want to create a couple of layers and I'm going to use the same I have used for the house meaning we have a floor then we have outer walls and finally we have inner walls I think I just called them floor outer and inner but let me extend the inspector a bit and let's look at all of this up I call them properly so outer walls and inner walls though this should be called outer walls and inner walls this is all we need now we have different layers and if I now look at the tile map we have floor outer walls and inner walls perfect with that we can start sketching out a basic shape for the level and usually the best way to approach this is to use the rectangular shape I already have that one selected which means if I now select the basic floor tile I can sketch out a couple of rough shapes let's do something like this then we can add a shape down here and obviously for all of this you want to spend some time for an actual level but in my case I am not terribly concerned with this I do however want to have some entrancy area and that's looking pretty good and now I have a rough shape for the level once I have that I can zoom in and then create the outer walls for the outer walls I want to use the pencil and then do something like this also making sure that I finish the ending bits like so basically what we have to do is draw a shape around all of this and I'm pretty sure I'm going to speed up the video at this point because this is pretty boring to look at all right there we go this covers the outer wall and you can still see we have these gaps in the middle and for that we have and we have to work on the floor layer we have these bits we have those Corner bits and we have some round shapes for this area and well now we have to go for all of this again and add these other shapes all right that is quite a bit and this is quite a large level finally before I start the scene I want to place the player at the starting point roughly here next to the main entrance and that wasn't the layer that was the camera so I want to undo all of this the issue we have for this one is that if I try to move the player I always move the camera so the node furthest down in the tree but this is not what I want I want to only target the parent not the child node and for that Godot has another nice functionality it's this symbol right next to the lock if you select the player and activate it now whenever we click on the player we only select the parent node we cannot select the children anymore which in this case would be the camera 2D so with that I want to move the player roughly to the entrance area and that is looking quite good now before we continue and test all of this there's one more thing that I want to do and that is inside of the ground I want to add is Right 2D this spriter D has to be behind the tile map it's gonna get a graphic so I go to graphics and there we have round and I want to use dirt.png so drag this into the texture and right now you can't see this one at all because it's way too small for that I want to enable region then click on edit region and you can see what kind of texture we have it's some Basic Ground texture and on that I want to select a giant area so we are covering a larger bit if I close this now it's still not large enough so let me manually update the width and the height right now it's 7 000 let's go with ten thousand probably still too small let's say 15 000. definitely better and for the height we currently have about four thousand let's go with ten thousand and move the thing in the right spot something like this that's feeling a bit better now the issue we have right now is that the repetition of these pixels is wrong so we are stretching out the outer bits for that I want to go to texture and repeat should be enabled now this is looking significantly better and with that let's test this particular scene and I can move around I still get collisions and I am quite happy with this at the moment we are still able to walk out of the building and then break the game meaning if I walk too long in One Direction you will be seeing the background there we go but in the actual level once the game is done I'm going to add another area here that is going to transition us to the outside level so that that way the player will never notice but so far this is looking pretty good although we don't have any inside bits and for that I want to work in the time lap again and now we have inner walls and for the inner worlds we have to use the bits at the bottom and I am probably going to speed up all of this once again because looking at this part is going to be incredibly boring but basically all you want to do is to add a few parts and then make the game look good all right with that we have a couple of interior walls obviously as always this isn't too fancy and for your game if you want to have a good looking one you want to spend a lot more time on all of that but for my purposes this is a decent tile map which means next up we can add some lights now the lights I want to have in a separate node so that we have the ground projectiles the player and then I want to have lights since we want to have this inside of the inside level and the outside level I'm going to create a new node inside of the parent level all I want in there is a node 2D that I will call lights if I now save the scene inside of the inside level we have lights the one light that we have already used if I open I think I called it fan light light fan animation step one I can place this in a couple of spots let's say one here then I can duplicate it Place another one I know let's say somewhere here and then the final one somewhere over there and let's test all of that it's looking pretty good so I am reasonably happy with that there are a few more lights that we can work with if I close ground and look at lights there we have overlays and there we have whole infrastructure and letters basically what those are if I direct them in there we have simply a kind of light texture that we could use as an overlay the way you would want to use it I want to place all of this into the lights you want to go to visibility and under modulate you want to lower the transparency quite a bit something like this and once you have that you can use all of that you drag image to something like this I guess I could move it over here so we're covering the entire area and a bit more something like that and now if I run the game we have an overlay that adds a bit more texture it doesn't look ideal but I think you get the idea let's say for this one I want to lower the opacity quite a bit more so it's barely visible something like this and yeah that gives it a bit more of an atmosphere and essentially what you want to do is once again you want to scatter around a couple of these throughout the inside level make the entire game look good by the same logic we could add a few more lights for example if I add another Sprite 2D we could add a whole add it to the texture and there we have a hole and if you hold alt and shift you can scale it up proportionally and this once again I want to modulate and lower the modulation and lower the transparency and then give it a slightly different color to add a bit of atmosphere something like this looks good and finally we have the lattice so let me duplicate this Sprite 2D and paste in the letters and this one is a bit too large so let's scale it down and I want to move it I don't know let's say somewhere here and also change the modulation so it's a bit less visible it's probably a bit too little there we go so with that we can add a few more lights and those I want to duplicate just to place them in different spots I am probably going to speed up all of this quite a bit because well it's going to be boring to watch this is fairly manual labor all right I think with that we have a decent start especially for tutorial the last thing I want to do is to duplicate this industrial line then rotate it and this you can do by the way on top you have these symbols there you have move mode you have rotate mode and you have scale mode if you click on rotate you're just rotating whatever object you're selecting I'm going to rotate it to roughly 90 degrees now go back to the normal mode and then scale all of this up so we are covering the entire rate and then scale it a bit further and there we go this is adding a bit more and the more of the stuff you add the better your level is going to look let's try and test all of this that is still looking pretty good and yeah I'm reasonably happy with all of that next up we have to add a few more lights and those I want to add in the ground because the player should be on top of them basically what I want to add is the wall light and the simple light let's start with the wall light and I could see another problem that if I try to select this light I am selecting this upper light and for that I want to lock the lights for now so they're not cutting in the way as a matter of fact let's lock all of this that way I should be able to Simply drag light and move it to wherever I'm going to need it like this then I can do it again place it with a transform of 90 degrees actually negative 90 degrees somewhere here do the same thing down there and I think at this point you get the idea and this should be kind of boring but if you want to create a level you simply have to put in some manual work so let me create a few more lights I don't want to make this too boring say one more here one more there and final one up here and let's go with one here this will be the first kind of light the other kind of light I want to add is going to be this simple light I think I called it there we go it's a smaller light and I'm going to place those here I want to place them there they never won but this position then I can rotate all of this in the right way and just add a few more things like this so now we once again have kind of a disco theme and once again let's trial of this to make sure it's working and I get some lights I get Shadows so all of this seems to be working just fine another part that I do want to add now and we had this earlier in the outside level that so far we always used a point light let me open for example the wall light there we have a point light and then a couple of light occluders but besides Point light we also saw a directional light but inside of the outside level this wasn't necessary in the inside level though I do want to use it and let me minimize all of this because this light should be all the way at the top of everything else I want to add another light and the light I want to add is going to be a directional light 2D if I add this by itself everything is going to be really bright that is because we are adding a color but this is not what I want to do I want to go to blend mode and then subtract now the color we have selected is going to be subtracted from the color in the level meaning the brighter the color is the more of a color we are subtracting so you want to have this kind of dark so we're not making our level too dark also if you give this color a bluish tint you make the entire level more red the way you want to think about it is that whatever color you select inside of this color wheel is the color you remove from the level so in my case I want to have a bluish color with a very faint tint so that the entire level looks a bit more reddish and make this a bit darker I guess and if you toggle the visibility you can see the result and I think this adds a lot more atmosphere let's try it again and there we go this I think adds quite a bit and one more thing that we can do now with the player node I want to add another Point light and for that we need a texture we can use the circle once again place it in there if I change the strength you can see what's happening with that we are lightening up the area around the player a bit so let's try something like this all of this again and that is definitely too much but you can see that now we have some light around the player although it's way too strong let's keep it at one that should look better and we probably have to work with the texture scale let's try to increase that to a three and there we get a slightly brighter area around the player which I think helps a lot for visibility but once again just play around with the numbers and just choose what you think looks good I think we should make the entire level quite a bit darker that way the effect is much stronger but now run this again there we go this is feeling quite a bit better so now we can still see something around the player but the level itself looks really dark and we get some lights and all of this is starting to come together really really well all right and I think with that we have made a huge amount of progress and unfortunately if you look at this in the editor now because the directional light everything is really dark so I guess when you want to work with it you want to disable it also you want to lock the layer that way you don't select it by accident but with that we have another level the last thing we have to do to make all of this work is to add a final area 2D and this can just be an area 2D this one once again wants to have a collision shape to the and this Collision shape is going to be a rectangle shape and this one right now is going to be in the center of the game let's scale it out a bit so it's easier to see this shape is going to be the door or the transition area it makes it impossible for the player to leave so I want to scale this to the size of the door something like this should be reasonably okay next up I want to connect this area to D with a signal to the inside level so we can use it to trigger a script the issue however is that the script attached to this node is right now A level.gd so the one from the parent node I have over that we have level.gd which means we have to do kind of the same thing we have done for the outside level where we have created another script with inheritance this I can do quite easily I want to detach the current script and then attach a new one called insight.gd I'm going to create this and if I look at the outside level they can see we are extending the level parent this I also want to do for the inside level and this is all we have to do for now if I now run the inside level again we should still be able to shoot a laser and shoot a grenade and we can this is all working pretty well what that means is I can select the area 2D as a matter of fact let's rename it to exit gate area this I now want to connect my signal whenever a body enters then I want to run a script inside of the script for the level for this one I can actually copy what we have done inside of the outside level so I want to copy all of that and paste it in there and this is very hard to read that's better but now we are basically just slowing down the player let's try that one actually just to make sure it's working if I now run there the player stops moving pretty much immediately now this part has gotten quite long so for the next part we're going to work on the actual transition first of all though there's one more thing that I want to cover the debugger is unhappy again because we are using the perimeter body inside of this function and we're not actually using it we're just having the parameter which means we have to add an underscore a good deal stops complaining and I'll run this again no more debugger issues and this is much better with the inside level build we have an outside and an inside level so for this part we will look at the transition between the two which in practice means that we want to change a level which means we have to load another scene ever the inside or the outside scene fortunately this is Trivial in Goodwill it's really easily done however just transitioning between two scenes is going to be a really hard cut we are immediately going from the inside to the outside level which isn't going to look amazing for that we're going to use an animation player to add a proper transition that being said that last part we are not going to cover for now because I will have to cover a few topics inside of the UI so the user interface to make that part a bit more understandable so for now we have a transition with a hard cut let's Implement that one right now we have an outside level and let me close everything where the player is starting outside of the gate and once again I want to make sure that we cannot select the children so I can choose to place the player right here also the crate shouldn't be there and the toilet should also not be there what is really important now to understand is that when we are loading a scene we are loading all of this which means that this player will always start in this position same for the inside scene this will be the starting position of the player later on once we had enemies you're going to see what this means in practice basically when we're going to this scene and waiting some monsters and the player comes in here for the game and kills all of the monsters then goes outside and then inside again so we are reloading all of this then the monsters would reappear it's going to make a lot more sense later on for now just be aware that we are loading all of this so all of these nodes and this is always from scratch there's nothing persistent right now and to change the scene we have to look at some script and we have on gate player and that gate if that is the case we want to transition to the inside level all we have to do for that is to get the tree and then run the method change scene to file there you can already see Kudos giving us all of the scenes we have available inside of the project and I want to look at inside level it's very hard to read that's a bit better we are basically opening a file from the file explorer that's all we are doing and now if I run this again we are starting inside of the outside level and if I go into the gate we have another scene this doesn't work the other way around we're just stopping and not moving anymore but that inside of insight.gd we want to do the same thing I want to get the tree and then run the method change scene to file and now I want to open the outside scene and another way to get the file in there is you could literally look at the file explorer there we have scenes and there we have levels and there we have outside.tsen this you can just drag in there like so and there you have the right file if I now run out of this again I am in the outside I can go inside and if I go outside again we are in the outside so this keeps on working just fine although you can't see very much that the transition between the two is incredibly harsh we are basically teleporting which isn't ideal but it certainly a start right now we have used change scene to file which works reasonably well besides that we can also use get free once again this we always need and then if I type change we get changes into file or change the scene to Pact and what that means is that this method wants to have a packed scene that we are loading into the level yes we do all the way at the top I could for example create VAR outside level scene which has to be a packed scene and to add this one we have to do the same thing we have done for the laser if I look at the level.gd we are preloading a scene here we have done this for a laser and here we have done the same thing for the grenade inside of inside.gd I want to use preload once again and what I want to preload is the outside level once I have that I can simply paste in outside level dot scene and comment out the earlier code to change scene to file run all of this again and we should have the same result if I do this we are still going between the inside and the outside so this is also working real I guess one more thing that could be super useful is that you can set this outside level scene to an export variable so if I add add export we can change all of this inside of the editor and right now I don't want to preload anything which means I am simply creating a variable that has to be a packed scene but there isn't any packed scene available right now which means if I now go to the inside level or scene click on inside there we have outside level as a new attribute inside of the inspector and there we can simply drag in a scene once again I want to use the outside scene so I can simply drag it there once again the result will be the same I can switch between the scenes very easily perfect now this kind of setup can be really useful if you want to have a lot of control over what kind of scene you are spawning for this setup probably not terribly useful but for example for the lasers this could actually be incredibly powerful you will see immediately what kind of scene you have that is going to cover the transition now right now this isn't going to look amazing and to make it look good we have to cover UI topics so let's talk about that the next major topic is going to be the user interface which means I want to display the amount of Health the player has the amount of ammunition and the amount of grenades on top of that I also want to display a couple of icons to make the entire thing look a bit nicer although for all of this we have to cover a tiny bit of theory let's Jump Right In in Godot they are fundamentally four kinds of nodes number one we have the 2D notes and those are always blue we have seen quite a few of them a Sprite would be a really good example next up we have 3D notes and those are for 3D games and I'm going to skip them entirely for this video next up we have the control notes and those are the notes you would be using for the user interface I will cover them in just a second finally you have other nodes and this would for example be a timer if we look at all of this in the dome you can see so far all of the nodes we have worked with always have a blue icon on the left this means that they are exclusively for 2D space The Only Exception is the timers that we have used those icons are white and also if I open the grenades there we have an animation player but while an animation player could be used for a 2d game for a 3D game or for literally any kind of app now I want to close the player the wall light and the house so I'm stuck with the level and the parent also let me close the animation player if I'm trying to add another node you can see all of the notes we are working with and the really important ones are either in node 2D in control or in node 3D if you look at the control notes and expand that one one really popular note you would see in there is a label which is the easiest way to display text inside of Godot besides that if I go down a bit further we have a texture rectangle this one you could use to display an image and besides that we would for example have a video stream player with that you could display videos meaning all of these notes are for displaying some kind of user interface there are quite a few more examples for control nodes labels and images are the really big ones but we'd also have progress bars buttons areas of colors text input graphs menus videos and basically anything you would use for a user interface in just a second I will cover quite a few examples but before that there's something really important I have to cover and that is when we are placing 2D nodes we are working with pixel positions which means that any 2D node has an X attribute and a y attribute and together those to determine the position of a 2d node control notes work differently for there you ever use anchors or containers or both you still have X and Y attributes but you wouldn't really use them this is something that confuses a lot of beginners so I'm going to cover it in quite some detail although first of all let's jump into Godot and let's have a look at all of this and practice here we are back in the editor and let's say I want to add a couple of control nodes inside of the outside level for that I really just have to add a couple of notes for example I could add a lay bill if I that and let me zoom in a bit we get some kind of outline and in the top left we have something that looks like green needles for now ignore that part what is much more important on the right in the inspector we have a text property and there we can write some text and that is giving us some text inside of the game if I now zoom out we can see text is part of the game I can also run the entire thing and there we have some text this works pretty easily although note right now that the text is literally part of the game so this wouldn't work for a UI because the text would have to stay inside of one part of the game we are going to enable that in just a second first of all though I want to cover a few other notes another really popular one would be a button you also have a texture button if you want to have images in your button but I just want to work with a button on its own this one once again has some kind of area and then these green needles also on the right we have a text property there we can add some text like a button also you can move these elements around so let me move it somewhere here and play all of this again and now I have a button that I could click on with my mouse these notes work like any other node in the sense that they would have signals that you can send you could run a function when the button is pressed when the button is released or when the button is toggled there are quite a few options you have in here besides that one more note I do want to cover would be a texture rectangle this by itself doesn't have anything but on the right we have a texture property which means in there we can drag some graphic let's say I want to place the Scout PNG in there and there we go we have an image as part of the game this is somewhat similar to a Sprite but there's one really important difference if you look on the right you cannot see a transform property although I tell a lie if you look at layout there we have transform and this you could use to place this Sprite for example if I change these numbers to 300 we would be moving this texture rectangle but this isn't what you are supposed to be using for an actual layout they are much more efficient ways of working with all of this so the main difference of a texture rectangle to a Sprite is that this texture rectangle would allow you to work with containers and anchors if you look at the top there we have presets for anchors and we have anchors themselves if you click on that you get a couple of predefined choices and you could use that to place the element although this doesn't work perfectly right now but you can see at the very least we can work with it don't worry too much about this for now I will cover it in a lot of detail in just a second before we can get to that I have to cover one more note and the major issue we have to fix right now is that if I run the game and let's say we want to have a UI meaning in the bottom left we want to have the ammunition and the grenades we have and in the middle bottom we want to have the health bar for the player but this we can do right now because the UI is moving along with the camera so this we have to fix and to fix that we have to learn about one more node also let me get rid of these notes instead I want to create a new scene and the root note for this one is going to be a canvas layer a canvas layer is essentially another layer on top of the game and this layer ignores the camera the best way to think about it is that right now we have a camera pointing at our game and this camera is following wherever the player is going a canvas layer would be a sheet of glass glued to the camera so it is always going to be inside of the frame this canvas layer is going to become the UI this I want to save right away let's do it inside of scenes and then I want to create another folder and let's call it user interface in there I want to save the UI and now we have the UI I guess while we're here we could give it a label and we could give it a texture rectangle the texture rectangle once again is going to get discount just for now and let's move it here and the label is going to get some random text this canvas layer we can now use like any other nodes and I want to place it inside of the level and edit there on top of everything else if I now Run the game we have the texture and we have the text but if I move around they are always on top of the game and they always stay inside of the frame so this is working really good meaning this UI node is doing exactly what it's supposed to do perfect now with that I can get rid of these two nodes and now we can talk about how to actually place a control node fundamentally there are two ways to place control notes those will be anchors and containers anchors are the green needles in the top left of a control node and they determine what side the control node is sticking to so it determines the position and the size besides that you have containers and those are parent nodes that determine the position of their children for example you could have a node that places all of the children in a vertical or horizontal layout those are the two major ways to place a control node and that gives you a ton of control over how you are placing UI elements now you could also use X and Y Properties or drag a control node to the position that you want but this is almost never a good idea let me actually demonstrate why back inside of the editor let's say I want to add some label and this label is telling us the amount of lasers we have let's call it bullets for now and those bullets I want to place in the bottom left of the screen somewhere here and if I now Run the game this works reasonably well so for both scenes we have in the bottom left some bullets so you might be happy with that but if I resize the screen then well all of this is going to break also if I remove this one you can see pretty well that this kind of layout doesn't work all that well and if I make the screen smaller the note disappears entirely so this kind of system really isn't that good which is why most of the time you want to avoid it you want to have a game that works with basically any kind of size and placing UI notes like that by using an X and the Y position is going to give you a ton of problems so let's not do that and instead I want to undo everything and instead use anchors and to best visualize what's happening let me get rid of this label and instead use a color rectangle this is simply a rectangle that has a color that's all that's happening in here inside of the inspector you can change the color let's go with a bluish color now the first way to place a UI note you can see in the top left there we have the anchors those are also these green needles and for example if I click on this full rect icon then you can see pretty well what's happening we are sizing this node to the size of the entire window and the green needles are also covering all the four corners if I now Run the game all we can see is this greenish color because it covers the entire window if you click on something else for example the middle left then we are placing this color rectangle purely in this one point in the center of the left side you could also manually drag these needles so if you click on one of them you can resize them this works perfectly fine although also not what I want to do instead how you would want to work with them is inside of layout there you have the anchors properties if I extend this a bit you have an anchors preset right now it's Center left but what you could do is click on custom and then you get anchor points anchor offset and grow Direction and anchor points is the really important one this one will give you the position and the size of this area and I think the best way to think about it is to draw all of this in at the moment there are four properties that we can work with we have left up right and bottom those refer to the four sides of the screen we have the left side we have the top side we have the right side and we have the bottom and I guess let's focus on one side for now I just want to talk about the left side the associated value for this property would be zero this means that this node has a distance of 0 to the left side if you combine that with the right side which is also zero it means that we are starting on the left side and we are going to zero percent of the right side which means that the width of this area is effectively zero however what we could be doing is that this ride to something like 0.25 what this is going to do is replaces the right side of the area to 25 of the distance to the right side meaning this part here would be zero and this side would be one and we are currently at 0.25 in the game right now we still couldn't see anything because we have some kind of width but the height of our area is still zero because the top side is 0.5 and the bottom side is also 0.5 so the starting point is at half of the window and the ending point is also at half of the window but if I change the bottom to let's say 0.8 then we are back to having an area so once again let me explain there are two properties you have to be aware of the top side is the first one this one starts all the way up here and the default value is zero the final value all the way at the bottom would be one and the value we currently have selected will be right in the middle at 0.5 so this 0.5 gives you this distance we are effectively 0.5 times the window height away from the top side of the window the other property you have to be aware of is the bottom this is the bottom area and this one also has an end value of 1 and a start value of zero currently the value we have is 0.8 which would be this line this means that we're going from the top eighty percent to the bottom of the screen which is then going to give us a proper area so these numbers combine quite well these anchor points are incredibly useful but also really difficult to understand when you're getting started so I would very much recommend for you to play around with these numbers and play a couple of color rectangles so you can see what's going on CE you understand it it makes a ton of sense but to get there you will need a couple of hours so give it some time these anchor points are also available for any control node for example if I add UI and give it another label this would be another piece of text for this once again at the top we have the anchors so far we have seen the presets for example this you can use to place it in the center in the bottom right on the right in the top or to cover the entire top area you can also change the sizing although this one isn't too important when you're getting started the one on the left is what you want to focus on the most and that would be the first way to work with UI notes in terms of layout the second one would be containers and let me get rid of these two notes and let me explain the problem that you might encounter say you want to create a container with a couple of items for example in the bottom left we want to create the ammunition indicator for that we want to have an icon on the top and then some text at the bottom which means we want to place two control notes in a vertical order we could accomplish all of that with anchors but it would be kind of a pain to work with so for that Godot has another way and that would be contain to work with them you would add another node there we have control and in there we have container for example in the app we would have a grid container to place items inside of a grid we would have a margin container to give a node some margins and we would have inside of a box container a vbox container and an hbox container those are aligning control nodes in a certain direction either in the vertical axis or in the horizontal axis let's say for now I want to work with an hbox container and if we're just adding it this doesn't look terribly impressive so right now we have alignment in the inspector but nothing else the way you are supposed to use this kind of container is by giving it children let's add some labels to illustrate what's happening and if I add one note the entire area collapses but first of all let's give this label some text let's say label one this is still not doing very much but now if I duplicate this label we have another label right next to it and let's call this one label 2. this I can duplicate multiple times now we get another label and all of these labels will always be to the right of each other and let me duplicate this a few more times now we have a whole bunch of labels and they're always right next to each other this is because of the hbox container you can tell this even better if I click on one individual label and I go to layout if you look at layout mode we have a container and this one is not available so we cannot change this and that is because we are getting the position from the hbox container so stuff like transform also doesn't work the position and the size of this node is determined by the hbox container the door literally is telling you that this node is a child of a container and if you click on that use container properties for positioning the only thing you could influence is a custom minimum size and by extend the inspector you could for example give each nodes a certain minimum size this could be 200 pixels and now this node has 200 pixels of minimum width although not exactly what I want to do instead you would look at the hbox container and in there you determine all of the positioning and the sizing for example what you could be doing is make this thing span the entire window and now we have all of the nodes in the middle of it on the left side but this you can change with alignment right now let's begin if you set this to Center they're all in the center and if you set this to end they're all at the end another thing you could be doing inside of theme override there we have constants and there you have separation which gives you a space between these nodes so if you increase that one you get a bit of spacing between them and well that's kind of it basically what you would be doing is you would use this hbox container with anchors to place it in a certain position and then inside of the hbox container everything is aligned along a horizontal axis and if you combine those two you can create incredibly powerful layouts I suppose we could do another example so let me get rid of the hbox container and instead add a grid container for this one we could once again add a couple of labels so let's call this just label the actual text really doesn't matter I just want to have lots of labels right now the grid container is aligning all of them on a vertical axis but that's because we only have a single column if I change this to a 2 or 3 we get the associate number of columns and for that once again I can place all of this let's say make it span the window and under theme overrides we could add H separation or V separation and I know place all of this out quite a bit more and that would be a very basic introduction to control nodes now this is barely scratching the surface you can go much much deeper into all of this I am going to make a separate video on all of that but for now it would be massive Overkill what you want to focus on is to master containers and anchors that's the really important bit to understand for now so in our case what I want to start working on is the indicator for the laser amount and the grenades for that I want to add one node that would simply be a control node this one doesn't really do anything you would largely use it as a parent for another node let's rename it right away to the laser counter or bullet counter whatever you want to name it this laser counter I want to have in the bottom left of the screen which means with the anchor I want to select bottom left now we are all the way in the bottom left that's a good start next up I want to have two notes on top of each other for that I am going to add a v box container this vbox container is going to have two children the first one will be a label and the second one will be a texture rectangle the label is just going to be a number for now we're going to have some placeholder text let's say 20. also in there we have horizontal and vertical alignment and I want to set the horizontal alignment to Center that way we are centering the text for the texture rectangle I want to close the enemy folder and instead we have a UI folder which has bullet and grenade as images but now I want to work with the bullet.png and drag it in there and now you can see a bit of a problem that this image is way too large to change that we have the expand mode right now we have keep size this one keeps the size of the original image which is very much not what we want instead what I want is to use fit height with that we are fitting this image to only cover the available height that looks significantly better now we have a label and a texture rectangle so with that we have a decent start but if I run all of this you can see that the icon for the bullets isn't perfectly inside of the window we're cutting off quite a bit to fix that I want to click on the laser counter go to layout and right now we have the bottom left but this I want to change to custom and then work with the Anchor Point because in here I give it a tiny bit of padding to the left side let's say 0.01 and if I change that look at what's happening to the right side it also changes to 0.01 the reason is that the right side can never be lower than the left side if that was the case we would have a negative width which shouldn't be possible besides that I want to set the top to 0.88 and that way all of this is going to move up a fair bit the right side and the bottom we can simply ignore the right side simply doesn't matter and the bottom should be one because I want to have this node all the way at the bottom and now if I run out of this we have the icon in the bottom left there might be quite a bit of a distance between the bottom of the icon and the bottom of this so let's change the top to 0.92 that might be a bit better and yeah I'm much more happy with that also what is really important now if I resize the window this is always going to stay in the bottom left I guess the one downside is if you just get all of this too much at some point there's going to be more and more of a space between them but this is something you can work on in your own time and the node you would want to use for that would be a margin container but in my case I think I cover quite a bit of content already so I don't want to add too much at once instead Let's do an exercise I want you guys to add the grenade text and the icon to the right of the laser counter basically use the vbox container and anchors like we have done for the laser but make sure that you are changing the anchors so that the grenade is to the right of the laser counter most of you now and try to implement that one with the UI node selected I want to add another control node this control node is going to be the grenade counter and this grenade counter is going to have a vbox container and this vbucks container is going to have label and it is going to have a texture rectangle we are pretty much copying what we have done for the laser for the label for now let's add a placeholder or five in there doesn't really matter what it is and for a texture rectangle I want to use the grenade or the grenade I want to place into the texture and now once again this is way too large so with that I want to select the grenade counter and once again place this thing in the bottom left that is a tiny bit of an improvement next up the texture rect I don't want to have keep size instead I want to fit the height besides that for the label I want to set the horizontal alignment to Center so with that we have a reasonable upgrade although the problem is that the grenade is below the laser not to the right of it for that we will need the grenade counter and go to layout and instead of bottom left this should be custom with that we can use the anchor points once again the major difference compared to the lasers is that the left side should be 0.06 we go to the right of the laser and we have 0.1 units of the display width as padding the top should be the same number so 0.92 is what I think I used and the other two numbers can stay as they are this is going to be a reasonable start if I now run all of this we have a pretty good UI already well it's not pretty good but at the very least it's an improvement I think for now this is a really good start and before I continue there's one thing that is annoying me a bit and that is that the text doesn't look very good so with the label selected I want to give this a custom font this you do via a theme and right now we don't really have a theme so I'm going to create a new one and now if you click on that you have a default font at the moment this is empty but we have in the UI folder is subatomic tsunami tdf this you can drag into the default font and now we have a different kind of font on top of that you can set the default font size let's say 25 and that feels much better this theme I want to save so with the drop down arrow I want to save it and now I'm going to save it in the user interface folder let's call it the main underscore theme and there we go once we have that I can go to label and there we have theme and I want to quick load a theme and we only have one theme the main theme if I open that this one gets the same font and now if I run all of this this is massively improved because now the text is looking better all right finally there's one more thing we have to cover and that is that this grenade is a bit too small right now let me explain what the issue is we have a grenade counter which is a control node which covers this area inside of that we have a vbox container that is covering this area and inside of that we have a texture vect that is constrained by the size of the vbox container right now these green needles determine how much space the vbox container can occupy which is zero so if you change this to cover the entire available area now we can see the green needles are covering the entire available space but still the grenade counter constrains the size of the grenade so this fed height is the constraining factor that being said if we make all of this a bit wider let's say 0.08 then the grenade is also scaling up because now there's more space in the horizontal and in the vertical axis although this might be a bit too large let's say 0.07 I think that's looking better and with that I can run all of this again and we have some basic UI this is feeling quite nice cool the next major part of the UI is going to be the health bar and for that we will need what is called a progress bar the dough actually has two of them we have a plain one and a textured one the only difference between the two is that the texture progress bar has custom textures whereas a plain one does not other than that they are basically working in the same way I am still in the UI scene and I want to add another note so with UI selected I add another node and the node I want to add is called progress bar and there you can see we have a progress bar and a texture progress bar for now I will work with the simpler one the progress bar so I create that one and now if I zoom in we can see we have a thin area with zero percent in the middle you understand a bit better what's Happening Here let me go to layout and give this node a custom minimum size for the xaxis let's say 200 pixels if I now look at the entire thing you can see a bit better what's going on and if you look at the inspector we have a minimum value a maximum value and a value there are few other attributes but those don't matter so much for now if you update the value you can see quite well what's going on for example if I change this to 20 we get 20 percent and if you update the minimum value let's say to 10 and the maximum value to 30. you can also tell that we now have a minimum value and a maximum value and the actual value we see is the value between the two also we get the actual progress bar so that is quite nice on top of that if you don't want to see the percentage you can simply disable or enable your percentage inside of the inspector it's kind of it for simple progress bar later on when we have the player Health we're going to update this value and that way displaying the amount of Health the player has although for all of this I want to have a bit more styling right now we have a plain gray color this doesn't look very good and for that I want to get rid of the progress bar and instead add a texture progress bar this one like the normal progress bar has a minimum value and maximum value and a value but if we add a value in here nothing is going to happen the reason for that is that we have to add textures and there are three textures we could add and at a minimum to make this work you would need a graphic behind the texture bar and a progress indicator well that inside of Graphics under UI we have another folder called progress bar and in the app we have three pretty simple images we have a background we have an overlay and we have a progress.png all three of which if I simply drag them in the progress bar is a simple green rectangle the BG is a grayish rectangle and the overlay file is an outline over a rectangle the way you'll be using them is under would be the background of the progress bar and for that I am going to use bg.png so I can drag it in and now we can already see a bit better what's going on besides that you absolutely need a progress texture and for that I have progress.png I want to drag this in there and now we have an actual progress bar once again on that we can update the value let's say to 50 or 280 and you can see this is working like a progress bar besides that you can also add an overlay and this is simply a graphic that is on top of everything else it doesn't actually serve a purpose it's just there for decoration and in my case I don't really like it so I am going to leave this one empty which is a totally fine thing to do cool and with that we have a progress Bar for our health that being said though if I run the game this health bar is all the way in the top left so this isn't ideal instead I want to have it in the middle of the bottom of the window implementing that is going to be your exercise I want you guys to place the progress bar in the center of the bottom of the window with some margins and for that I want you guys to use anchors and a margin container now imagine container I haven't used myself so you have to experiment with this a tiny bit but I'm sure you can figure it out positively now and try to make all of this work I first of all want to wrap this texture progress bar in a margin container which means with UI selected I want to add a margin container and then make the texture progress bar a child of that container and if you do that nothing is going to change inside of the game next up I want to place this margin container in the center of the bottom of the window and for that I want to go to Anchors and then use this Center bottom button and click on it and then we are all the way at the bottom and this is already a pretty good start on top of that what you can also do is you can go to theme overrides there we have constants for example in my case I want to give all of this a bottom margin and if I increase that number at some point we are moving all of this up by a certain amount let's say 30 pixels looks about right if I now run all of this again there we have the progress bar bottom on top of that because of the margin container this health bar is always going to be 30 pixels from the bottom of the window so if I make the window much larger you can see this health bar still works just fine whereas the indicator for the ammunition and the grenades don't work as well so working with the margin container is definitely the better choice and with that we have covered another important widget for the next part we can actually start working on the functionality of all of this now that we have the UI notes in place we want to make the UI interactive although before we can make that work I have to cover another really important concept let me explain the problem right now when the player is shooting a laser or a grenade we want to reduce the lasers or the grenades by an amount of one which means that we have to have a laser variable available in two scenes in the player and in the UI and if the game was more complex we might even want this available in more scenes like an upgrade menu or store or literally anything else that means that we have to make the lasers and the grenades accessible everywhere inside of the game which is not something that we can do right now but we can learn how to do it quite easily the concept we have to learn about is called autoload this one literally loads a scene or a script into every single scene in the game that way we can store and access information globally by globally I mean every single scene regardless of what scene you are in for now we are going to use that for the laser and the grenade amounts and the player Health later on we are also going to use it for the player position but don't worry about this one for now we're going to cover that later but now let's play around with auto load if you look at the top there we have project and there we have project settings so far we have looked at General and the input map besides that if you look on the right we have Auto load and this tab is incredibly important in there you can set a path and then a node name pretty much what you want to do is use the folder symbol and then click either on the script or on a scene both would be possible and then this script or scene would be loaded into every single scene by default and for now I want to create another script and for that I want to create another folder so let me create a new folder and I'm going to call this one Globe belts inside of this folder I want to create a new script so I right click on it and then new and then script is not going to ask me what I want to name this script and I want to call it Glow bills also for the template this should be empty by default and if I now create it we have another script I can double click on it to open it and right now we have an empty script that is extending the node now that we have that I can go back to project project settings and autoload and I want to select this particular node so all the way at the Globus folder I want to select globals.gd and now Godot wants to give this a node name and globals is perfectly fine if you are happy with both of them you can click on ADD and now we have a globals that is being Auto loaded so what does that actually mean and to illustrate that let me run the game if I now look at remote we have globals and we have outside inside of outside we have all the stuff inside of the game but globals is also there and if I go to another scene there we have Insight but we also have globals and this globals we never added manually into a scene it's not inside of level it's not an outside it's not an inside it is only there because we are auto loading it which is incredibly useful because now we can simply store any kind of value inside of this script for example what we could be adding could be a variable for the laser mount which by default could be 20. I don't really care about the number here just choose whatever you like the important thing is that we can access this laser amount from any other script for example we could look at the player player.gd and I could extend this window inside of the player we could add another function for underscore ready this function will be run automatically once the player has been added to the game and I want to print layer and then I want to print your low builds and inside of there we have the laser amount and the same thing I can do inside of level once this scene is underscore ready I want to print that we have a level and then I also want to print the low builds and the laser amount if I now Run the game you can see we have player 20 and level 20. which is a really good illustration that we have globals available everywhere this would also work inside of the UI or literally any other node it's available globally also for the name here you could name this script whatever you want although I think in my case globals makes the most sense I guess on top of that I should mention we have named the script in lowercase globals.gd but inside of project and auto load we have given this a custom node name which is globals with the first letter being capitalized this is how you would access this node but well with that we don't need this information in the level at least for now also inside of the player I want to get rid of this ready function because it's not yet let me move the inspector a bit to the side so I have a tiny bit more space the way I want to use this Global's information right now we are shooting a laser with this if statement but we are checking if we are pressing the primary action button and the player can laser on top of that I want to add another conditional part I want to check if Globe builds and the laser amount is greater than zero with that we are reading the global variable on top of that we can also change it so the first thing I want to do is to get globals.laser amount once again and then subtract one from it with that I should be able to shoot the laser 20 times and let's try that so this might take a second I probably am going to speed all of this up and there we go I keep on clicking but there's no laser and well this is covering the first part now the player has access to the laser amount next up we have to access all of this as well from inside of the UI and for that we have to give this one a script so I'm going to click on ADD script and I want to save the script inside of the same folder where we have the scene this looks pretty good so I can edit and I don't want to have anything else there the way I want to approach this is I want to write another function and let's call it update laser text this doesn't need any parameters and really all I want to do I want to get the label inside of the laser counter this label here and I could drag all of this in there but this would be kind of annoying to read also later on I want to access this multiple times so this isn't a really efficient way of working instead what I am going to do is to store this label or this node to be more specific inside of a separate variable all that means is I want to create another variable that I'm going to call the Laser label this has to be a label node and the value is going to be what we're getting from this node also let me extend this window so we can see a bit better what's going on I hope this kind of setup makes sense I am simply storing a reference to the note inside of a separate variable that way inside of this function I can get my laser label and then I can look at the inspector to see what we can work with so if I look at the label and I have a over text you get text so if you want to update this property you will use the text property and then give it a new value in this case I want to Target my globals and then the laser amount once again however we have two problems inside of this script right now and Godot is actually complaining the first one is that the default value is using a dollar sign which won't return nodes in the scene 3 before the ready function is called which means that only when you're calling the ready function we are creating all of the nodes and this one will be run before that so it wouldn't work there are two ways to solve this one approach would be to Simply create a ready function and then paste this variable in there and this would be totally fine although now we have another problem that this variable is only existing inside of the ready function as a local variable so it wouldn't be available inside of the update laser text so this isn't ideal I guess you could work around it but there's an easier way you could add an ad and then on ready with that this line of code is only run once the scene is ready it's effectively the same thing as running this line inside of the ready function although with the difference that all of this is going to be in the global scope of this class this will be the first problem the second problem is when we updating the text Godot is expecting a string but globals.laser amount right now is a number and this would cause an error so we have to convert this number into a string which you can do very easily by using the Str function and that is pretty much all we need to update this node the one issue we have now is that we have to call this function at a certain time right now we have a function that could update a laser label but we don't know when to call it this I want to do inside of level.gd and once again let me extend all of this when the player is shooting a laser I want to Target the UI and on there I want to get the update laser text or paste it in there and simply run it with that I should be good to go let's try out of this and now the numbers are updating this is looking really good and once again let me keep on shooting the laser so we can make sure that this doesn't work once we have zero lasers and there we go this is looking really good and just to reiterate what is happening here the first step is we have a global script and in there we're only storing a single value the laser amount this value we access in two places we have it in the player and there we are checking if the number is greater than zero and if it is we're reducing it by one besides that inside of the UI we have an update laser text and this one is taking one node and then uses the global laser amount to update this text finally inside of level.gd we are targeting the UI scene and then calling update laser text I hope all of that is straightforward this is an incredibly important concept to practice so let's do that I want you guys to create a global grade amount variable and connect it to the player and the UI it should look really similar compared to the laser most of you now and try to figure this one out I want to start by working inside of globals.gd right now we have a laser amount besides that I also want to have a grenade amount for the starting value I want to set this to 5. next up we have to work inside of the player and in there like we have done for the laser I want to check if the input is pressed for the secondary action if we have a timer for can grenade and on top of that I want to check if globals.grenade amount is greater than zero if that is the case I want to reduce globals.grenade amount by one this should already be the first step so if I now Run the game we should be able to shoot five grenades one two three four and five and now I shouldn't be able to do it anymore and I can't so this is definitely working next up we have to look at the level and if the player is emitting the on player grenade signal I want to Target my UI once again and then run a function called update grenade text this function doesn't exist right now let me copy it and then work inside of the UI I want to create a function called update grenade text doesn't need any parameters and all we have to do now is Target the label and then update the text for this one once again I want to create a global variable that stores a reference to this node so with on ready I have VAR grenade label which has to be a label just to be sure and this value we can simply drag in there I get it from the grenade counter there we have the label and that I want to drag in there like so this we can now use with the grenade label dot text and then I want to have a string with globals.grenade amount and that should cover us let's try all of this and we are getting an error because I didn't get the proper note I got the grenade counter the vbox container but not the label and since I specified that this has to be a label we're getting an error all we have to do to fix that is to add the label and now it should be working let's try again this is looking better if I shoot a grenade we are updating the number cool so this is working quite well I can also do this over multiple scenes and there you can see a problem we are recreating the new number let me actually play all of this again right now we are in the outside scene I can shoot a laser a couple of times also the grenade and now for the numbers we have 17 and 3. but if I go to the inside level we are back to 20 and 5. however once I shoot a laser we are going to 16 and if I shoot a grenade we go to the issue we have here is if I go back to the UI we have a default value for both labels which are 20 and which are five now I could get rid of them but this wouldn't exactly help me so if I remove these numbers we can't see any number and if I run the game by default we don't have any numbers and only if I shoot we are getting numbers but this also isn't ideal and once again once we entering a new scene this also isn't working basically what we want to do is once we are starting a new scene we want to display the global numbers doing that is actually really easy I want to work inside of the script of the UI and in there I want to create the function underscore already once again this will be run once the UI scene is ready which means once we're entering the inside or the outside level this function will be executed and basically all we have to do is get the laser label then get the text and assign it the string value with globe builds and the laser amount now if I run this we're getting 20 by default and if I shoot all of this we are down to 16 if I now go inside we still have 60. so this is working even across scenes and you may be noticing now that we are duplicating code I am running this line and this line here and they are identical which means I can simply call update laser text and I guess what we're here also update grenade text once the scene is ready and with that we should be having everything in place so we get the numbers right away and now the numbers are 17 and 4. if I go inside we keep the same numbers so this is working super well cool let's try it one more time and yeah I am really happy with it but we can make all of this look quite a bit more fancy I'll cover that in the next bit next up I want to change the UI color or more specifically at the moment the laser and the grenade parts are pure white which is a bit boring instead I want them to be green by default and red when the number is zero so if the laser is a number like 10 or 20 I want the icon and the text to be green but if they are zero they should both be red all of that we can change quite easily using modulate so let's Jump Right In once again back in Godot for now I want to give the label a default value of 20 and same for the grenade a default value of 5. that way it's a bit easier to see what's going on the really important thing to understand is that the default white color is on purpose what that allows me to do for example if I take this texture rectangle I can go to visibility and modulate and change the color really easily to whatever value I want what modulite is doing it is multiplying the color with the color we are selecting in here and if it is pure white we are ignoring the base color and only use the selected color if this was any other color we would multiply this value and keep the original so the white here is a deliberate choice that being said though I don't want to modulate this by hand instead I want to change this with code for that I want to open this script and extend all of this and declare two color values I guess I should add a colors comment and I want to create a variable for the green color I guess we can just call it green although we can specify this has to be a color and to create a color value we are simply typing in color and then Google lets you create a color and you can create color in quite a few different ways the prediction here gives you an idea of what you can do one way would be to use hexadecimal values which is actually what I want to do and the value I want to use is 6bb f a 3. the way hexadecimal values work is you have six digits in total the first two are for red the third and fourth are for green and the final two are for blue and the values always start with 0 and 0 which are the absence of the color and they go all the way to F and F for the full amount of the color and this might seem a bit weird to go from 0 and 0 all the way to F and F but basically the way it works is we go from 0 0 to 1 1 and then so on at some point we reach 9 and 9 and after that we are getting to a and a with that system we get quite a few more values although when you start reading about it it's kind of confusing but most of the time you don't create these values by hand you use something like Photoshop or an online Editor to create them for you as a matter of fact Godot has something inbuilt if I close all of this and select the texture rectangle again under modulate you can select any value let me choose one and there in the bottom you can see the value or a similar kind of value besides that I want to create another color this one would be for red it also has to be a color and this will create with color and for this one I want to have another approach to color in the first approach we used a code string to create a value for the next one I want to have an RGB a tuple which means we have to add four values all separated by comma the value for red for green for blue and for the alpha value for each of these values you have to choose a value between 0 and 1. for example for transparency zero would be full transparency and one would be no transparency at all this is actually what I want to keep for this one now besides that for red I want to have 90 of the color and for green and blue I want to have none of the color and there we go with that we have another color object and there are quite a few more ways to create colors in Godot but these would be two popular ones the way we would be using either of these values is we would simply get the laser label for example and then use modulate to that we would assign the color for example this could be rain or it could be for the grenades let's start with red so I want to have the grenade label use modulate and then assign the red color if I now run this scene we are getting different kinds of color for now we're only changing the color of the text and the icon for the bullets is colored because I have changed the value by hand so if you look at this text direct I have changed the color this shouldn't have happened if I now run this again that looks much better so now we have a green and a red color that isn't enough though and we have quite a few problems at the moment number one is we are only coloring in the labels not the icons so what I want to do is to also store the icons inside of separate variables which means I want to have on ready a variable for the laser let's call it icon this has to be a texture rectangle and the value for that we can simply drag it in there so I can drag this texture back in there and then I can duplicate the entire line and change this to a grenade icon and the value we are getting from the grenade counter then we have the vbox container and then the texture rectangle that way we can Target the grenade icon much more easily and for example what we could be doing is besides the laser label I also want to get the laser icon and then run the modulate attribute and assign it also the green color if I now run this we have a green color both for the text and the icon of the laser that's working really well and this covers all of this setup so next up I want to do a slightly more advanced challenge I'm sure you can figure it out I want you guys to create a function called update color and this one has three parameters the amount a label and an icon and this function should color the icon and the label red if the amount is zero and otherwise green pause the video now and try to make this one work I want to create another function all the way at the bottom this function is called update color and we will need three parameters the amount the label and an icon and in here we can be a bit more specific although for now let me add person there so Google stops complaining we know that the amount always should be an integer so we can add an intern there just to make sure we don't add any other data the same we can do for the label this needs to be a label and for the icon this needs to be a texture rectangle basically what I want to do is to pass any of these labels or Texture rectangles into this function and I guess while we're doing this you can also specify the return value in Godot so this function by default should return void meaning it doesn't return anything and this should be a lowercase V you see this kind of setup really often in good dough so you're specifying what kind of parameter you're getting and what return value you're getting from the function if I change this void to let's say an integer the dough would complain that the function doesn't return that value but if it is void we are not returning anything inside of this function I want to check if the amount is smaller or equal than zero if that is the case I want to get the label and then run modulate on it or more specifically I want to overwrite the modulate value the value I want is the red color the same thing I want to do for the icon and in there once again I want to get the modulate value and this should be red if that is not the case so else I want to do basically the same thing so I can just copy all of this except this shouldn't be red this should be green that is pretty much it all we have to do now is call this function and this we do inside of update grenade text or update laser text I don't want to modulate this grenade label anymore instead I want to call update color and pass in the value which would be the low builds and then the grenade amount next up we need the label which would be the grenade label and finally we need the icon which will be the grenade I can now we can duplicate this line and move it into the laser amount because in there we want to have pretty much the same thing except it would be the laser amount the laser label and the laser icon like so and now if I run all of this by default we get green icons and if I shoot the laser and the grenades let me do all of this whichever one finishes faster I guess the laser is going to be faster if we get to zero this thing is becoming red the same with the grenades let's try this again actually I want to move to another scene to make sure this works across multiple scenes so if I now go inside we still get the same colors and I can shoot the grenade and do it one more time it also becomes red and this also works across multiple C cool so this one is working super well I think the logic here keeps on getting a bit more complicated so I hope all of this is still making sense the major new thing is that now we are passing entire nodes into other functions which is a perfectly fine thing to do I hope that was useful and for the next part we can actually work on the transition between the two levels now that we have covered the basics of UI we can work on a pretty level transition we already have elevel transition but it doesn't look very good so let's make this a bit nicer basically what we are going to do we're going to take a canvas layer a color rectangle and an animation player to create a transition we are fading to Black when we are leaving a level and we are fading from black to a transparent cutter once we are entering a level all of this will also be Auto loaded into every scene so it is easily accessible I want to start by creating another scene and this scene has to be once again a canvas layer that way it's ignoring the camera this I want to rename right away to a transition let's call it transition layer the first note we are going to add is going to be a color rectangle this color rectangle is going to get a black color and I wanted to cover the entire window and with a control node this is quite easily done cool with that we have a transition layer this I want to save right away inside of globals and let's call the transition layer the name works and now inside of project project settings there we have Auto load I want to add not a script but a whole scene which Godot is perfectly happy with if I know open this we have a transition layer name which is perfectly fine so I want to add this one as well if I now Run the game we are getting a black screen and that is because you can see it under remote we have globals and then a transition layer and this transition layer is pure black right now so everything else is going to be black as well and note here as well that this transition layer comes before the outside level but still inside of the game it's on top of it you could change that but I do want to keep it because later on the transition layer has to be on top of the outside level anyway so let's change the transparency the way we would be doing that is by adding an animation layer this animation player is going to get for now is single animation I guess we could call it Fade to Black we have to add one track for a property we want to cover the color rect node and in there I want to get the modulate property we have to add two keys one at the beginning and this value should be purely transparent and then at the end we want to add another key and this one should be pure black or pure black with full transparency that way if I play the animation we are fading to Black so this is working really nicely once again though we have to figure out when to play this anime and for that I'm going to add a script to the transition layer this one can be empty and I want to create it and now I want to create a function that I call change underscore scene this one is going to get one argument that I called Target and the value for that is going to be a string also to be a bit more consistent the return value for this function should be void once we are calling this function I want to get my animation player and then play the animation Fade to Black after the animation is done I want to get the tree and then call the method change scene to file and pass in the target why that is useful if I hide the animation and go for example to the outside.gd file right now we are simply changing scene to file and this works so far but this is not what I want to do anymore so instead let me copy the target and get rid of all of this instead I want to get the transition layer and then on that run change scene and I realized I didn't save the transition layer so now if I save it and go back to the outside level if I now type change underscore scene Kudos should be predicting it in there now I want to pass in the Target this is almost going to work if I now run the entire game we are still getting pure black and that is because if I go back to the transition layer by default the value for the color rectangle is a pure black this is not what I want I want to set a transparency to zero so that way if I run the game we can't see the actual game but now if I go into the transition area we are still not seeing anything the reason for that is that once we're entering this area we are starting to play the animation but we are immediately changing the scene so the animation doesn't actually matter for that we have to learn one New Concept and that is called a weight the weight does what the name applies it awaits another kind of event for example an event we could be looking for would be the animation player and then animation underscore finished so we want to play the animation then we want to wait for the animation to finish and then we want to change the scene if I now Run the game and I walk into there we okay this didn't exactly work but you can see if I go in there the player stops and after about a second we are transitioning so now at the very least we have a delay and the reason why it didn't work if I go back to the scene this color rectangle always has a pure transparency but this shouldn't be the case I want this to be actually visible with that the animation player is actually going to show this modulate so now if I run this and move in there we are actually fading to black but now we have loaded the other scene but we're not fading from black to a transparent color again but that we can fix quite easily and there are actually two ways of approaching this the first one would be inside of the animation player I want to add a new animation and let's call this one reveal for this one once again I want to get a property track get the color rectangle get the modulate property and for this one I want to get a key that should be pure black by default so I want this to be completely black and then after one second or whatever amount of time you want I want this to be completely transparent once we have the animation I can look at the script again and then get the animation player and play the reveal animation if I have all of that I can see it in my animation player so I am moving from Pure Black to purely transparent and then inside of fader black I'm doing the opposite which is pretty much exactly what I want so now if I am trying all of this we can see the game I can move in there we have a transition and now we are revealing the other level and this should also work right now it only works in one way but at least this way it is working really well which means there's only one more thing to do and exercise instead of playing this reveal animation we could simply play another animation backwards and what I want to play Backwards is Fade to Black so if you look at the animation player we basically have from transparent to Black and then from black to transparent which means if we reverse one of these animations we get the other animation both approaches here would be fine and let me actually test all of this now we still get a level transition so this is working just fine cool for this part the exercise is going to be quite easy I want you guys to play the transition when the player is leaving the inside level all we have to do is go to our scripts and I want to look at not outside but inside.gd currently we are getting a packed scene and this is not what I want anymore also I want to extend the window and get rid of all of this instead I want to have the transition layer and then change scene I think I called it instead of transition layer change scene yes this one works this one wants to have the target node and I think the best way to approach step one is to Simply drag it in from the scenes so in scenes we have the levels and I want to go to the outside scene so I can paste this in there or rather drag it in there and now we should be good to go let's try it so I can go into the inside area and if I now leave it we are going to the outside area let's try it again and all of this is working just fine perfect so with that we have much nicer level transitions at this point we have all of the setup we have a UI so the last major thing that we have to add are items and the enemies meaning we are going to add the more interactive parts to the game I want to start with the items because that bit is quite a bit easier and that way we can set up the interaction between the level or rather the dynamic items of the level with the player and the UI I want to create one item which is going to be a scene that gets a random value it can either update the health lasers or grenades on top of that depending on what choice it has taken it will get a different color so for example health is going to become Green Lasers I think will become blue and grenades will become red although the colors here are fairly random at this point all of this should be reasonably trivial the only major challenge is going to be to wire up all of this with the player and the UI for now we're going to do all of that with signals I want to get started by creating a new scene and now we have to think about what kind of setup we want that will determine the root node in my case I want to have an area 2D and right away when we work with the collisions I want to set this before I forget the area to D should only be on the fifth layer which is going to be items and zones it shouldn't be or anything else on top of that it should only be able to see the player and nothing else besides that I would like to rename all of this I suppose item would be a good name on top of that I want to have a Sprite a Sprite we are getting from graphics and in there we have items and in items we have one file called orb2.png this I want to drag into the texture and there we go we have some icon looking thingy once again it is pure white because that allows us to use visibility and modulate and then set any custom color although for now I don't actually want to do that we will work on that in just a second before that I want to give this item a collision shape which is going to be pretty simple this is going to be a circle shape and let's give it this kind of size looks about right now I can save all of that and let's save it under scenes and I guess we should create a new folder let's call it items and save it in there now we have one item and let's test it right away I want to place one inside of the outside area so item and place it somewhere here and then the same I want to do inside of the inside level and place an item in there as well just to test if they are looking good and the item right now is here and let's place it in the dark so we can see what's going on Also earlier when I locked all of these lights I kind of made a mistake so with all of them selected I want to unlock them and this I have to do like so basically when you want to lock all of the children of one particular node in this case of all of the lights you wouldn't select everyone individually and then lock them because that is incredibly inefficient instead you lock the parent node but then you can still select the children so there I can select for example the light but what you can do on top of that besides locking this layer you can also select this icon so you cannot select the children anymore with that I cannot select anything and right now I am selecting the player that kind of setup is significantly more efficient also I want to lock the directional light I may have done that earlier cool but with that we can try all of this and now we can see one item and if I go inside we should be able to see another item and I guess they work reasonably okay although right now they're also on top of the player but I think they should work better with some light so besides the spread to D and the Collision shape I want to give this one a point light 2D next up for the point like 2D we will need a texture for that inside of Lights we have circle.png I want to drag this in there and now this one is a little bit too large let's change the scale to 0.2 and let's see how it looks possibly a bit too strong and let's see how it looks indoor looks a bit better in here but still I think a bit too much light so I'm going to set the energy down to 0.5 and the texture to 0.4 and slight improvements and this one is I think looking quite good actually once again just play around with the values here and see what you like the most in my case I am happy with this so I'm going to give the item a script and this should be empty by default so let's create it and now we have a script for an area 2D for this area 2D what I want to start with is to make the entire item rotate this I can do with the process function and all I really have to do is get the rotation and then increase it by some kind of rotation speed that doesn't exist right now and don't forget we want to multiply all of that with Delta next up we have to create a rotation speed variable which has to be an integer for the value let's go with five I can run the game again and now we get a rotation might be a little bit too fast let's say four but once again just play around and see what looks best next up I want to give this a type and a item could either be a laser it could be a grenade or it could be a health upgrade the value should be randomly assigned and for that we have to use an array an array if you ever use Python is basically a list so in here we can add the values that we want for example this could be a laser this could be a grenade or this could be elf also let me expand the window now we have an array with three values and we want to pick one of them at random we would be using indexing so we would add another square brackets afterwards and if we added a zero in there we'll pick the first item but I don't want to have a hardcoded first item I want to get a random number to achieve that I'm going to get rid of the square brackets and rename this type to available options and then on the next line I'm going to create the actual type and this type is going to be the Veil options and this one is going to get the square brackets inside of there I want to create a random number and this I do with Rand I and this will create a random number but this random number I want to limit to the length of this list for that I will need a modulus operator and then the length of the available options once I have all of that I can run the ready function and simply print what kind of type we are getting Let's test all of this and we're getting laser if I try this again we're getting grenade let's try it again we're getting Health this is actually working incredibly well and we're getting grenade so this seems to be working just fine cool with that we got the different options that an item can take but there's a bit of a problem right now and that is that I want to prioritize the laser so right now we have a one and three chance to get a laser a grenade or a health upgrade but this isn't exactly what I want I want the lasers to be more likely and to make that a thing we can use a slight workaround all we have to do is add the laser multiple times in this list and that way getting the laser is significantly more likely although we could still get a grenade or a health upgrade next up inside of the ready function I want to use the type to give this item a color this we can achieve with a simple if statement so if the type is for example a laser that I want to get this bright 2D use the modulate property and give it a color that should be some shade of blue and once again for that I can use an RGB value so I want to specify a value for red for green and for blue to keep this one simple I'm going to give this 100 blue no amount of green and no amount of red and with that I can run the code and there we already have something although the blue might be a bit too strong so let me go back in there ah and now we can see since we have reloaded the scene we get a new kind of item this we're gonna fix later but for now there we have a blue item again let's say instead of a one I want to have 0.6 and that is looking a bit better once again if you play around with these numbers let's say I want to increase the other values to 0.2 and 0.1 and now let's try this again and that's looking a bit washed out but you get the idea I'm going to change this to 0.8 and now let's try it again and this is a white item there we go I think this is looking decent which means next up we can work on the other type which would be the grenade for this one we can do the same thing we have done for the laser so I can simply duplicate this line and if we have a grenade I want to have a red color which means the red in the RGB Tuple should be 0.8 and then the 0.8 for blue should be 0.1 to test this one I am going to comment out the available options and then simply type in renate let's try that one and that's a decentish red color so I'm quite happy with that finally I want to copy all of this one more time the final value we want to look for is going to be health for this one I want to have 0.1 or red and blue and 0.8 for green and to test this one the type is going to be health so let's try and this is a decent green color cool that means I can get rid of this testing string and then get a random option let's try that button and it should still work yep that is looking good cool with that we get the right kind of color once we get an item that is going to bring us to the slightly more complicated bit and that is that we want to connect this item if I go back to the scene actually I want to connect this item if the player is touching it I want to update let's say the player lasers and then the UI and this is going to happen once the player touches the item which gives us the first step I want to go to node and then have the item selected and then click on body entered once the player is entering the item we can run a function and since we get access to the player via the body we can run a function directly on the player basically what I want to do is to get the body of the player and then use a function that I call add item and this add item needs to know what kind of item we have which we are getting from the type also while we are here once the player touched an item I want to destroy the item which we can do with Q3 and if I am able to type this would be much easier done now we can work inside of a player and run and add item function so let me find the player once again there we go and extend all of this also I can minimize the process function for the player and then work all the way at the bottom we want to have a function called add item this function needs to have one parameter which is the type which needs to be a string and on top of that this function should return nothing just to test if this is working let me print player scene and on top of that I want to print the type that we are getting if I now run the code again we can collect the item and we get player scene and grenade so this is working just fine which means now besides printing something I want to check what kind of type we are getting so if the type is for example a let's start with a laser actually if that is the case I want to get globals inside of there we have the laser amount and this I want to increase by a certain number you could use a one here but I'm gonna go with five because we want to use the laser quite a bit this logic should already work but there is going to be a major downside to illustrate let me run the game and there we have a blue item this is going to update our lasers and to visualize the problem let me shoot away our entire ammunition I am probably going to speed this one up perfect now we have zero lasers left so I cannot shoot anymore but if we go over the item we still can't see any laser bullets but we can shoot again and if I should we get to four bullets which means that this line here does update the amount of lasers but it doesn't update the UI which is going to be a bit of a problem because we don't have direct access to the UI so if I minimize this and go back to the 2D view we only have the UI available either inside of the level inside of the outside level or inside of the inside level meaning we have to get if I go back to the player from inside of this function we have to tell any kind of level that we want to update the UI for this one we can use a signal but I think you can already tell that this kind of system is getting kind of convoluted and in the next part we're going to find a much easier and better way of working with this but for now I just want to implement the basics so what I want to do the player is going to get another signal that signal is going to be update stats and as soon as we are doing any of this I want to get the update stats signal and emitted that is information we can use inside of the level as a matter of fact if I go there select the player we now have update stats this I want to connect to the level so connect and now we have a function inside of the level and inside of that level we have the UI which is quite handy because that way I can get the UI and the UI has a couple of functions that update the UI itself let me open it actually I want to open the UI in there we have update laser text and update grenade text also I've realized that those two lines shouldn't be there anymore all we have to do inside of the level is called these two functions and then we are good to go I want to get UI and then update laser text yes I want to duplicate because the next line is going to be update grenade text and with that we should be good to go if I now run out of this I can shoot the laser a couple of times and now if I collect the blue orbs our lasers are indeed updating so this is a really good start and I really want to reiterate what is happening here we are starting inside of the item this item is going to select a type when it is being created let's say it becomes a laser and because of that we are giving it a certain color although this doesn't affect the functionality at all what does however affect the functionality is the function at the bottom if the player is colliding with it we are running the add item function this exists inside of the player and we are accessing the player via the body that is entering the function which means next up inside of the player we can run the function here we are checking the type of the item and if it is a laser we are updating the global amount and this laser amount we are using in the process function to check if the player can shoot a laser also in the UI we're updating all of this the problem is the UI doesn't know when it is supposed to be updated so here we are updating the laser amount but we're not telling the UI to update this we are doing via a signal which is called update stats that we can capture inside of the level and inside of the level we have the UI and the depth we update in the text for laser and the grenades once again all of this is getting a bit convoluted and in the next part we're going to cover a much better way of covering this first of all though I want to do an exercise I want you guys to implement the logic to update the grenades once again this is going to be really similar compared to the lasers pause the video now and try to work on that first of all I want to work inside of the item in there we are already getting the type for the grenade so this one is working just fine and we are still calling the onbodied entered function which means next up we can work inside of the player in there we are only checking for the laser right now which means I can duplicate these lines and change the type to grenade if that is the case I want to update the grenade amount and increase it let's say by one with that we have an increased Global amount and we are also telling the UI to update which we're doing via this signal and since this inside of the level is covering both the laser and the grenade we should be good to go and just to test this inside of the item I'm going to once again comment out the random item and instead get a grenade with that we should always get a red item and that's looking good and now we're getting six grenades and everything else is still working just fine meaning now I can get rid of the grenade and we have a random item again so let's try this one more time and there we have more lasers perfect this covers the first important part and in the next part we're going to make all of this significantly more efficient I'll see you there for this part we are going to cover set get which is a really powerful tool in Godot but to understand why it is useful let's talk about a problem at the moment when the player is colliding with an item we are updating the player stats and the UI separately which is getting really complex really fast we have to work across multiple scenes we have to use signals and the game is still quite simple if it became more complex this would become a nightmare to manage what would be much better is to have some kind of code that updates the UI automatically as soon as we're updating the player's stats and all of this should work on a global level to make that work we will need set get basically what this one allows us to do is to run code whatever the value of a variable is changed or accessed for example what we're going to do in this part is whenever the health of the player changes we want to update the UI from the globals file which we can do quite easily using set get so let's look at that back in Godot before we can start working on the actual set get we have to make a few more changes at the moment let me work inside of the item we are getting the type of Health when we are creating an item and this also updates the color however when we run on body entered we are running add item and this happens inside of the player and in there we are currently not checking if we are updating the health which isn't possible because if I look at the globals there we have an amount for the lasers and for the grenades but there's nothing for health for now let's say I want to create another variable that I'm simply going to call Health and this is going to get a default value of 60. the value here once again doesn't matter although for the health bar it would be easier if you choose a value between 0 and 100. now that we have that I want to work inside of the item I want to update the global health which once again is going to be an if statement if the type is equal to health then I want to get below builds update the health amount and let's say increase it by an amount of 10. now this is already going to work for example after this line of code we could print globals and health and also just to test this I want to once again comment out the random item and replace it with health that is going to make testing all of this much easier so now let's run it and if I select it we are getting 70. which would be the start amount of 60 plus 10. the thing is though this did not update the UI and with our current tools there would be no easy way of doing that basically what we would have to do from inside of the item we would have to go to the player and then from the player we would have to emit a signal and then inside of the level we would have to add another function inside of on player update stats to make all of this work and once again this is not an efficient way of working instead I want to do all of this inside of globals specifically as soon as the health changes I want to run a function and to make that work Godot has an extra functionality what I want to do is I want to add a colon after the 60. once I have that I can basically add two functions inside of this variable the first one you just need the name would be called get and in there I am just going to add pass for now but we are going to add something else in there in just a second besides there you can add a set and this one needs a parameter called value also in there for now I simply want to add pass what this is going to do it is going to influence how we are working with this variable yet determines what happens when you are reading this variable and just to demonstrate right now inside of the item when the player is colliding we are updating the value of health and we are printing it which means we are writing on the value and we are reading the value and both of those are set with get and set if you are trying to read a value so for example using the print statement you would trigger the get function and if you're trying to update the value you will trigger the set function if we are trying to get the value I simply want to print health value what's red then I can duplicate all of this and instead of setting a value we can write the health value was changed and now if I run the game again we're going to get some really strange Behavior if I get the item we are getting an error that we have nil and interoperate up with plus and this is happening down there for now let me simply comment out this part so I can demonstrate what's happening now if I collide with it we get health value was red and null that is because when we are currently trying to print globals.health we are triggering this get method which is printing Health method was red on top of that this get method is always returning a value and if we don't specify that value it is going to be null and this is what we printed on the second time via this print statement most of the time print doesn't actually do anything complicated instead what he would do is you return the value itself of the variable that way when you try to print it let me demonstrate this actually you are simply getting 60 which means inside of the item we are trying to access globals.health so globals.health is looking at the variable it sees a get function and it returns whatever this function returns currently the value of the variable itself set Works somewhat in the same way although for this one we want to update the variable which means in this case to get this variable to work normally we want to get health and then set it to the value we are getting set is looking for a way to update this health and the value we are getting is any kind of change that could happen for example inside of item if we are updating globals.health by increasing it by 10 then the resulting value is going to be the value of this parameter which means if I print the value run out of this again we are getting 70 twice because this value is the result of this operation and we are printing that and we are setting it as the value for health which means we are updating this variable the best way to think about set get is that we are simply attaching two functions to a variable one is triggered when we are getting the value the other is triggered when we are setting the value that's literally all that's happening here and all of that is really useful because now we can run other functions once this value is updating the way we would be using this is in my case I created a new signal and this signal I call Health change and as soon as we are updating the health value so we are setting a new value I want to emit this health change so Health change dot image and this health signal we can capture everywhere because globals is available globally so for example inside of the UI we can also work with it although for that to work we first of all have to work inside of the ready function because right now if I simply run the UI on its own so I'm simply running this one scene which doesn't do anything but if I click there on remote we have globals and inside of globals we can emit a signal but this signal right now is not connected to the UI script this we have to do manually but that is quite easily done all we have to do is get the global script and then connect a signal the signal we want to connect is called health underscore change Kudos predicting it already and if we're getting that signal we want to run a function for example this could be update elf actually to be a bit more specific update Health text now next up we have to create this function and let me put it somewhere here I want to update Health text which is a function and this one for now is going to print hello builds and then the health that the player has next up inside of the item I don't want to print globals.health anymore just to keep things simple also inside of globals we are not printing anything so now if I run this again we should only see 70 once and we do and this 70 we are printing from inside of the UI this function to be a bit more specific but we don't actually want to print it instead we want to get the health bar and then update the value and for that like we have done with the other nodes I want to on ready write a variable let's call it the health bar this one has to be a texture progress bar and the value for that we can simply drag in there I want to get this texture progress bar drag it so I can capture it in a variable now that I have that I can get the health bar and set the value and the value should be globals.health and with that we are good to go if I now Run the game and I collect the item we are changing the health amount now if you look at this closely you can see the value changed and that is because if I go back inside of texture progress bar we have a minimum value a maximum value and then a start value of 80. which is different from what we have inside of globals in there we are starting with there we have globals we are starting with 60. so this we have to update that we are going to do inside of the UI we have ready and there we want to get the health bar and then set the value to low builds DOT health and now if I run this we have slightly more than half of the health and if I collect the item we are increasing it by an amount of 10. also this code is now a bit inconsistent because I'm using a function for the laser and the grenade but for the health I am setting the value individually so for that I want to use the function as well and that's feeling a bit cleaner with that we have the health functionality and I really hope you get a sense of why this kind of system is much more efficient we are basically bypassing the player entirely so while for the laser and the grenade we have to go through the player and then emit a signal Health doesn't need any of that we are simply working inside of the item and in the app we are updating the global Health amount and that is literally it we don't do anything else the entirety of the logic happens inside of globals and in there we're updating the value and if that is the case we are emitting a signal and then this signal is telling the UI in there to update the health text just imagine we had a much more complex game across lots of scenes and maybe a level is inside of another scene and this scene could be inside of another scene we would have to use signals consistently across multiple scenes which would get incredibly confusing but with our system we are always targeting the UI basically directly and on top of that we are addressing it from the global scope so from globals.gd Let's do an exercise to make sure you understand I want you guys to update the grenade and Laser logic to also use set get like we have done for the health part on top of that remove the signal logic so we're not cluttering up the code most of you now and try to implement that I want to start working inside of globals.gd because in there we have to add setget to laser amount and Grenada mount although we don't actually have to update the get functionality because this part we don't really want to update and Godot is perfectly happy to only cover one of them we could simply delete get and the code would still work just fine meaning now whenever I update Health we are getting the same functionality which saves us a bit of writing on the laser Mount I want to add a set function the parameter you can call whatever you want but it is basically always called value and now I want to get the laser amount and set it equal to this value on top of that this I also want to add for the grenade although for that I want to update the grenade amount and this we can now use to emit a signal like we have done for the health and right now we only have a signal for health but I think we could have the same signal for all three of these variables which means I don't want to have a health change I want to have a stat change signal so let me rename things stat change and this signal I want to admit when any of these values changes once I have that I can work inside of UI and I want to check if we have a stat change if that is the case I want to run a different function right now we have update Health text I want to rename this to update stat text now Godot is going to complain because this function doesn't exist but we can create it quite easily I want to have a function called update stat text it doesn't need any parameters and in there all we have to do is to call the same three functions we have already created like so and then we should be good to go although before we can test all of this we have to get rid of the earlier functionality so inside of the layer we are currently having the add item function and this I don't want to run anymore but I do want to copy the two if statements so let me cut them out and paste them inside of the item because these we are still going to need but we don't have to call Body dot add item anymore this should already be enough if I now run the code health is still going to work and I can get rid of the health for the type and get a random item again if I now run this again we get a laser item and this is updating our lasers and just to make this a bit faster let me add grenade for the type and this one is going to update our grenades cool so all of this is still going to work just fine which means inside of the player we can get rid of this function entirely on top of that inside of the level I can minimize this and now the player for the node doesn't need the update stats signal anymore so I can disconnect this one and then inside of the player I can remove this signal entirely if I run the entire code again we are still getting our laser updates and everything else should still work just fine with that I really hope you get why this kind of system is incredibly powerful we are basically inside of the item simply updating the global amount for the health the lasers and the grenades and then inside of globals we are emitting a signal whenever any of these values change and then this signal we are capturing right away inside of UI and simply updating the text there's only one more thing to do and that is that the debugger is unhappy so let's click on it and right now we have on body entered but the body we're not actually using which means I can add an underscore and run this again and now Godot is happy again and the rest is still working just fine perfect with that we have a really important functionality to keep our game more organized we are nearly done with the items the last thing that we have to do is to spawn them from crates and toilets right now we only have a single item and we have to place it manually which I guess works fine but I would rather have it so the player has to shoot at toilets and crates and then we are spawning the items most of that we can already do quite easily so let's get started back in Godot let me first of all explain what I want to do I want to reopen a great that we created earlier than a toilet we made and on top of that we had an item container which is empty right now but it's the parent of the crate and the toilet and basically what I want to do is to have it so that when the player is shooting at these objects then we are spawning the items and to test all of that a bit better inside of the outside level I want to attach a crate and I want to attach the toilet and let me just move them around like so and just as a reminder what we have done so far if I run the game I can shoot at the toilet we're getting toilet I can shoot at a crate and we are getting great we're getting this by the way if I open the script inside of the crate we have a hit function that is printed great and inside of the toilet We have basically the same thing except we are printing toilet on top of that we have a parent script item container this one has a ready function and a hit function that being said though I don't need either of those anymore so let me just get rid of them instead here's what I want to do when we are hitting either of these objects let's say we are hitting the crate then I want to spawn items in the direction this crate is facing which right now for both of them would be down but this should be flexible so for example if I take the toilet and transform it and give it a rotation of 90 degrees if that is the case then the iTunes should be spawning in this direction to make that work we have to get started inside of the item container parent script in there I want to create a variable called Direction actually let's call it current direction this one has to be a vector 2 and the value we are going to use will be Vector 2 then down and this Vector we want to rotate so I'm going to use the rotated method and then pass in the current rotation of the object so what does that mean we are starting with a vector down and this Vector I am using because both of these objects by default are pointing downwards the toilet currently is pointing to the left because we have rotated it but if we didn't add any rotation so if I remove the transform property from the toilet then the toilet would also be facing downwards because of that I am using a downward facing vector and this Vector I am rotating to whatever rotation we are applying to the object and since we have this inside of the parent object inside of the children I could print the current Direction quite easily and let's do this both for the toilet and for the crate also you might have noticed that Kudos complaining that current direction isn't declared that is because I didn't save the parent script if I do that the error disappears now let's try all of this again if I shoot at the toilet we get 0 and 1 and the same for the crate this is because we haven't rotated either of them but if I now go to the editor and for the toilet let's say 180 degrees and for the crate I want to have a transform of negative 90 degrees if I now run this again I can shoot at the toilet and we are still getting 0 and 1. same for the crate so what's going wrong here well the issue is that all of this is being calculated before we are actually creating the node the way you want to think about it is that we are running all of this before the ready function and then when we are running the ready function that is where we are applying rotation and this is essentially where we are creating the node and since we're doing all of this before that the rotation hasn't been applied but that you can fix quite easily all you have to do is add on ready and then it's going to work so let me get rid of the comments because they're not necessary and now if I run this again I can shoot at the toilet and we get a very small amount of X we can just ignore that the minus one for y is important this is a vector pointing upwards and for the crate we get one for x and a really small amount for y this is a vector pointing to the right with that we have a direction and a really important thing in Google to understand is this on ready basically the way you want to think about it is that all of the actual attributes of a node are being created when you are adding this node to a scene which is happening inside of the ready function so if you try to get a rotation before that it wouldn't work because the rotation hasn't been applied if you play around with this for a while it should become quite straightforward but this can be confusing in the beginning but alright with that we have a direction next up we have to actually create some items and I want to start working inside of the create in there we currently have a Sprite another Sprite for the lid and then a collision shape although while looking at this I think we can refine all of this because later on for the toilet we also have a spray Duty for the base but on top of that I want to add a lid and since I want to have the same setup for the crate and the toilet I'm going to work inside of the parent in there I'm going to rename the Sprite too deep we so far have into base right and then I'm going to add another Sprite to the right on top of the other Sprite and I'm going to call this the lid Sprite because of that change inside of the crate and the toilet we are going to lose all of the content of the node so if I get rid of this Sprite redeem that only existed inside of the crate we have a base Sprite and a lid Sprite but neither has any texture what happened here is that as soon as you're renaming a node you are losing all of the content of this node in the children so in this case bassbrite used to be a Sprite 2D with a texture but this changed because we renamed it inside of the parent but this we could fix quite easily back inside of Graphics there we have objects and then objects we have the box with bass and lit base is going to go into the base Sprite and lid Sprite is going to get the lid then the lid I want to move a bit downwards something like this now we have to create again and then for the toilet we also have a base Sprite this one is there and then besides that we have a lid Sprite that is literally just a lid this I also want to move down using the arrow keys and there we go now we have a toilet and this kind of setup is a bit cleaner because we can simply make changes inside of the parent and then update them inside of the children besides that there's one more thing I want to add to the parent and that is just going to be in node 2D which I want to rename right away to spawn positions these spawn positions if I work with them inside of the crate are going to get lots of marker 2DS they are essentially going to be a random position on top of the crate that will be a starting position for an item and let me just create a whole bunch of them all across this box and then we're going to pick a few random ones of them and use them to spawn an item something like this looks pretty good so now we can work inside of the script and update the hit function for the crate as soon as this crate is hit first of all I want to hide the lid Sprite this I can do super easily I want to get the lit Sprite and then hide it if I now Run the game and shoot at the lit it disappears or if I shoot at the crate the lid disappears to be more specific besides that I want to implement something like we have done for the laser where this hit function is emitting a signal to the level and in the level we are creating an item so as a comparison inside of the player once the player is inside of process activating the primary action we are emitting a laser signal and this lays a signal inside of the level if I find that one on player laser is creating one instance of a laser scene the same thing I want to do for the crate so in there I want to get some kind of signal we could call this one open and this I want to emit now this signal does not exist right now and I could create it inside of this script but that wouldn't be ideal because I also want to use it inside of the toilet as a consequence this is going to be created inside of the item container I want to create a signal that is going to be called open this signal will have two parameters we have a position and we would have a direction now that we have that back inside of the crate stops complaining about this signal so that's a good start although now I have to figure out a position and a direction the direction is easy because we literally can just use the current direction and we are good to go however we will need a position and this one is currently not available and for that I want to basically pick one of these spawn positions at random and then use that position for that let me create another variable and call it pause and all I really want to do is get my spawn positions and on there we have a method called get child your child wants to have an index where the first item would be index 0 and the last index would be the length of the list which means in there we want to create a random number with Rand I with a maximum length of the amount of children inside of this node and this we can also get once again I want to have my spawn positions and on there I want to get child Hound and this definitely has to be extended for this one we are looking at the spawn positions this one contains lots of marker 2DS and we want to get one child for this child we're using an indexing and we are basically creating a random number between 0 and the length of the list this would give us a node but that wouldn't be a position yet to get the actual position we have to get the global position of that node and then we have a position so now we have all we need for this signal which means I can return to the outside level and if I select the create go to node we have an open signal we could be connecting this one to the outside level right away but that wouldn't be great there are a couple of problems we have right now there are two problems actually that we really have to be aware of the first one is that let's say right now I have a single crate so I could connect this to the outside level and it would work just fine but I don't want to have just one crate I want to have multiple crates so let me create multiple and now I could get every single one of these crates and connect all of them individually but the outcome would be that I have a ton of functions so we are replicating the same signal over and over again which would really not be ideal you would have to wire up a new function for every single instance of this great scene on top of that the other problem is that I don't actually want to connect this crate signal to the outside level script I want to connect it to the actual level script so the parent but this I can't do right now because we are in the outside scene so if I click on Create and open we can only target the outside script both of these problems can be solved With A New Concept the concept we need is called groups and basically what that means is that any note or scene can be added to a group and Via that you can Target this scene or node from anywhere inside of the game and do anything to it for example you could run a function or connect a signal or literally anything else this system is incredibly flexible back inside of the level you can see currently we are looking at the signals but if you look to the right of that we have groups and right now this is not something we have used at all the way you would be using it for example I want to add my item container to a group for that I would have to have the item container selected and then give it a group name let's say container if I now click on ADD we get an entry inside of the manage groups tab on top of that next to the icon we have this symbol which is telling us that this node is in a group container this also applies to the children so great will also be inside of this group and the same for the toilet and that is information that we can use for example if I am shooting at the crate we could get the tree and then get notes in group this is a method that wants one argument the name of the group we are looking for now we would be getting all of the instances of a scene inside of this group meaning I could print it so print all of that and now whenever I am shooting at a crate we're getting two objects we're getting a crate and a toilet because we have an instance of a toilet and an instance of a crate since both of those are part of the container group they will be displayed here so they are easily accessible although I don't want to use that inside of the crate itself instead I want to go to the level and in there let me maximize the window I want to make it so that once the ready function is called meaning once the outside or the inside level is ready then I want to get all of the scenes inside of this group I want to get the tree and then get notes in group specifically the container group this would return an array of notes which I can use right away inside of a for Loop let's say for container in get three and all of the nodes inside of this group I could use that for example to print all of the containers with that set up I can run the game again and now once the scene is ready we get create and toilet on top of that if I now duplicate this crate and add multiple instances and I could also duplicate the toilet and now if I run all of this again we're getting all of these objects that being said I don't actually want to do that I want to have one crate and one toilet for now now we have access to all of the scenes that we want to connect to a signal and for that we can run another function I want to get the container and then use the method connect this one wants to have two arguments first of all the signal we want to connect which in our case is open this is the open we have gotten from the item container this open here and if that signal is received we want to run another function which I'm going to call on container opened this function doesn't exist right now and let's create it right below I want to have on container opened they had two parameters we need for this one a position and a Direction although for now inside of this function let me simply print container opened now if I run this again I can shoot at the toilet and nothing is going to happen because this one doesn't have the function but if I shoot at a crate we get container opened which means that this open.emit is working just fine and that means inside of the level we can use this function to spawn items like we have done for the laser which means once again we want to preload a scene so all the way at the top VAR item underscore scene which is going to be a packed scene I want to preload and item scene and I hope I find it really quick this item.tscn is what we want to preload once we have that inside of the container I want to create VAR item which is going to be an item scene and an instance of that and this shouldn't be instance this should be instantiate this item right now is going to be in position 0 and 0 so I want to update the position to the pause we are getting from the parameters the direction I'm going to ignore for now so next up what I want to do is to add this item to the current scene although for that inside of the level I want to add another node which would be a node 2D and this node 2D I want to have below projectiles I'm going to call this one items and to this items I want to add the child of the item we have just created with that we should already have something working if I run the game now I can shoot at the crate and nothing is going to happen although if I shoot multiple times you can see if you look at the bullets or the grenades or the health if I shoot at this they are updating which basically means that as soon as the item is spawned it is being destroyed and I think that is because inside of the item container under Collision we haven't updated these layers so it shouldn't be on the player layer it should be on the object's layer and for the Collision we can see the player the enemies and the projectiles but we should not be able to see layer 5 because there we have the items if we are now trying all of this again then I can shoot at a crate and we are getting something there are a couple of issues right now the first one the most obvious one to be honest is that our items are below the crate and the toilet that I can fix very easily we simply have to put the notes below the item that means I can try it again now and we should have the items on top and that is looking quite a bit better on top of that the player can also collide with them and we are updating the lasers and the grenades although I can't collide with all of them because they're on top of the crate but that we can fix very soon if you look at the bottom we have Godot being incredibly unhappy the first one is quite easy we're not using Direction so this we can ignore for now for this function we are going to use Direction in just a second so this one's fine the next one though is in Red so this one is quite a bit more serious and that is that on container open can't change the state while flashing queries and use call deferred or set the Third this issue is happening because we are spawning an area on top of a static body and Godot doesn't like that because it messes with physics calculations there is a lot of stuff in the back end but don't worry too much about it basically whenever you're getting this kind of error you can either get it when you're updating an attribute or when you're calling a function in our case we are getting the error inside of level if I find it really quick there we have level and let me actually expand all of this a bit we are getting the error on this line that we are calling a child and Godot wants this to be the third which is very easily done all we have to do is to not call this method right away instead we want to call it deferred call the third wants two arguments the first one is the function you actually want to call which in my case would be ADD child the second argument would then be the argument you want to pass into this function or method for this particular case we only have a single argument although if you had multiple you would add multiple arguments after this now I can run all of this again and if I shoot at the crate Godot keeps on being happy so this is a really good sign everything else also still works so I am quite happy with it so with that we connect the items and we get them into the level there's only one last thing to cover and that is I want to move the items when they are being created you could achieve that either with an animation player or with tweens I am going to use tweens and for that first of all when we are creating the item I want to give that one a direction the direction we are getting from the container which means in there I want to get the item and give it a direction the direction is simply going to be the direction we are getting from the parameter this we can now use inside of the item in the ready function from there I want to create a couple of tweens to animate the position and the size we can do both actually let's get started with the more important one I want to move this item for that I want to define a Target position this target position is going to be the current position of this node and then plus a direction and this I want to multiply with some kind of distance now for that we have a couple of issues we do right now doesn't have a direction and it doesn't have a distance now direction we would be getting from the level what we are doing here although inside of this script we want to have a variable ready for it which means when I'm creating this node I want to create a VAR Direction which has to be a vector 2. besides that I also need a distance which has to be an integer and for this I want to have a random number a random number I get with Rand I range short for random integer from a range in there we have to get a from into two value in my case I want to have a distance between 150 and 250 pixels once we have that Godot is happy again and now we have a Target position for a tween which means we can now create let's call it a movement Queen which we are creating with create Queen on this movement tween I want to Tween a property and the property is going to be the node itself which I haven't covered yet so the object if you want to cover the actual object itself you would simply type self in there if you're doing that you're always targeting the node that has the script attached in this case this area 2D next up we will need a property to Target in our case this will be the position then we need a final value which in our case will be the Target and finally we need a duration in my case I think half a second is pretty good oh and this shouldn't be Target this should be Target position if I now run all of this I can shoot at the crate and this is looking like a nice movement so I am quite happy with this although what we could also do instead of spawning a single item I want to spawn multiple which means inside of the crate currently we are meeting this signal only once but that seems kind of low so in my case I want to run this emit multiple times what I can do with 4i in range let's say five and then I want to emit this thing five times if I now run all of this again and I shoot at the crate and this almost works the issue is we are declaring this position once and then when we are meeting the signal we are always emitting the same position to fix that I want to move the position into this for Loop that should fix it if I now run this again that is feeling drastically better although you can see we can spawn infinite items and if I collect all of them the player has infinite resources so not ideal yet but we are certainly making progress the last thing we need for the basic functionality inside of the item container I want to add another variable and let me put it there I want to have VAR opened which has to be a Boolean and by default this one is going to be false then back inside of the crate I only want to do all of that if not opened then I have to indent the entirety of it and finally at the end of it I want to set open to true with that we should be only able to shoot at the crate once or while we could shoot at it more of times but we only get items once and this is looking really good cool the items still work and all of this is working just fine now this section has gotten really long so let's do an exercise and then we are done the exercise is going to be to work out the toilet so whenever the toilet gets it it should spawn a single item on top of that there should only be a single spawn position that is going to simplify the entire thing quite a bit but pause the video now and try to implement that one let's open the toilet and right now we have all of the images we have a collision shape and we have spawn positions but spawn positions doesn't have any children and just to keep things consistent I'm going to give it a marker 2D this marker 2D is already in the right position I think this center of the toilet is pretty good which means next up we can work on the functionality right now we only have a basic function that prints the current direction not amazing although for that we can actually copy quite a bit from the grade as a matter of fact let me copy all of it and paste it into the toilet now pasting code is not really a good solution what would be more elegant here is to have the item container with a function that covers most of the logic and then inside of the toilet or inside of the crate you are executing shorter pieces of code that rely on the function from the parent but I think inheritance can get really complicated really fast and I do want to keep it simple so for now we're going to copy a tiny bit of code but let's go through it on the first line we have function hit and this one is totally fine next one if not opened I'm happy with that one as well then we have let's sprite.height this one is still working just fine all the way at the end we have open being true this one also works perfectly okay the only change we have to make is that we don't want to have five random positions we only need a single position and that is this marker 2D which means I want to cut out open image and then get rid of the rest now Godot is going to complain that identifier pause is not declared position simply does not exist for that I want to create another variable called position and the position we are getting from the market to B and this one has a global position and with that we are pretty much done if I now run out of this shoot at the toilet we are getting one item the crate is also still working and well with that I am quite happy although really quick before I finish there's one more thing that I have forgotten inside of the item when we are creating it I want to have two tweens one is going to be for the movement and the other is going to be for the size although to be a bit more specific here I only want to have a single tween so let me rename movement tween simply to Queen the other thing besides the position that I want to Tween is going to be between property with self again and the property I want to Tween is going to be the scale or this one the final variant has to be a vector 2 and the default size is one and one so this is what I am going to keep next up we have a duration let's say 0.3 seconds finally this is not going to do anything by default because our starting size is 1 and our end size is one so we are transitioning between two equal values it's not going to do anything you fix that I want to add one more method and it is called ROM this defines our start value which also has to be a vector 2 and in this case it's 0 and 0. this is telling between to start from zero and then go to the end value with that we are nearly done although this isn't going to work perfectly you can already see it and there well this is looking a bit weird the major issue is that we are calling these twin properties in sequence meaning we are first moving it with the original size and then we are updating the size to fix that one we have to get the tween and then set parallel and this should be true and this should fix basically everything let's try and if I now shoot at a toilet that's looking better and that's also looking better let me try again because we only got blue items and yeah this is quite good now we're done with this part next up we can work on the enemies for this part I want to make a couple of updates to the inside level and add a few minor fixes there is no theory for this part let's Jump Right In once again back in Godot there is first of all the main issue that we have a single crate and we have one toilet but we want to have multiple of them and also not in this position as a consequence let me get rid of both of them on top of that I realized that the toilet is a bit too large which we can fix quite easily with transform I'm going to set it to a size of 80 percent and that way we should have a much more realistic proportionate toilet also we have to update the Collision shape and that's feeling better that isn't actually the issue I wanted to work on first but basically for the most part we are going to work inside of the inside level and in there I want to add a whole lot more static objects for example in there we would have the bed we would have the item containers we would have the toilet and on top of that I am also going to add a few additional things but that's going to come later so let me go back to the outside level because if I run the game and I go to the outside house there is one thing that doesn't work right now if I enter the house the camera tween is not working anymore the reason for that is that we have the house inside of the ground somewhere there and this house is sending a signal we have player entered and player exited but those we originally connected to the level node which means in there we have onhouse player entered and onhouse player exited but this shouldn't be inside of the parent level it should be in the outside level I have to reconnect both of these signals although first of all inside of the level I want to cut out these two functions because they are not working and not needed anyway with that we can work inside of the outside.gd script and connect the signal for onhouse player entered and on top of that also player exited and now let me extend this script and paste in what I have cut out earlier the actual tweens do not change so I can literally just copy cut and paste them into the appropriate function and we should be good to go these other functions should be deleted also I can get rid of twin parallels and the comment and with that we should have the previous functionality let's try I can now once again walk to the house and if we are entering we are back to a working camera transition so this is feeling much better also the code is much more organized because these two functions should only be available inside of the outside level it wouldn't make sense to have them inside of the parent class because they are not needed there and that covers another super important part next up I think I have realized there's another issue and that is that we don't need these functions anymore so UI update grenade text is not needed because we're doing all of that via the global script anyway which means I should be able to get rid of all of that and the game should still work just as before and that is looking pretty good cool now all of this is looking significantly cleaner that means we can come to the actual important part of this section I want to flesh out the inside level for that I'm going to hide the directional light so we can see a bit better what's going on in here I mostly want to work inside of the ground and then add a few more objects for example we have a bet that we could be adding Deb on a spawn in the center and also I want to lock every other scene that we don't need so items we don't need and with that we should be able to select just a bat and then place it in wherever we want to have it also we can duplicate it and place it in a couple of positions where it could fit well yes one there with a transform of 180 and then duplicate it one more time and place it somewhere here and the same thing we can do for the other room something like this and once again this is going to be a fairly boring process I am not going to add too much but in your own game play around with this a lot besides that what I also want to add and this is much more important I want to add the crate and I want to add the toilet and I guess before we use the toilet let me compare it to the player and I think that's a reasonably sized toilet maybe still a tiny bit large but it's doable this toilet I now want to place into certain positions let's say we can put one right here I think for real game you would want to create an actual bathroom but uh I'm not too concerned let's say we can put one there this would be minus 90 actually just 90. and a similar one for the other room and besides that I also want to work with the crate and on this one we have to check where the front is so this part is the front of the crate it's a tiny bit hard to see but this one I want to place let's say here then I can place another one there and since the player is going to need lots of ammunition you do want to have quite a few of them um I guess we could put one there ish then another one could be here and this one I do want to rotate by 180 degrees then we can copy it again and place a couple all the way in but um of this room let's do one more time with a bit more rotation so this one should have a rotation of 90 degrees and we can place it here later on I am probably going to add lots of enemies so it's a bit more difficult to reach this area let's do one more crate here and that should be quite a bit of stuff I guess I should minimize things and there is one item that shouldn't be there this item I want to get rid of right away I think same at the outside level there we have one item that should be here so let's get rid of it and now I can try all of this the outside level is still looking just fine so I can go inside and we should be seeing the crates and shoot at it we are getting the items we also have the bed and religions also work toilet is also good cool next up in the inside level we also can add inside of ground the steam vents so the particle thingy that I worked on earlier and this one I just want to place in a couple of positions so it's not getting too annoying I guess we can put one here ish and then another one there and third one here it doesn't really matter for this tutorial but obviously the more time you spend on this kind of work the more realistic your game is going to feel and look I guess here works once again let's try all of this and if I go inside we have steam vents and collision is also working and once again this is feeling quite nice notice here also that none of these objects I have added the steam vents the beds the toilets they don't interact with the light whatsoever meaning I could place them here and nothing would happen that is by Design the more objects you make interactive with light the more the performance hit you are going to suffer so you want to be careful with that and these steam vents don't really need light alright with that we are nearly done there's just one more thing that I do want to add inside of level I want to add another node 2D and this one has to be below the ground I call this one decals although right now this wouldn't do anything what this one is going to get if I work inside of the let's say inside level in graphics we have decals and there we have brushes Moss blood ceiling holes and some random stuff most importantly inside of brushes we have lots of random brushes and those we could use to add some dirt on top of the tile map although right now if I minimized the ground we have decals to D and if I add a Sprite in there and add a texture it wouldn't be visible because it is below the tile map so what could we do about that and there are two solutions either you could take this Sprite 2D and the tile map and simply drag them in the scene tree before the decals node 2D that way we could see this one once again but that's not exactly what I want to do because that would clutter up the scene I want to have all of this a bit more organized instead I want to do something else if I have for example this Sprite 2D selected and as a reminder this is the background dirt graphic so this we absolutely have to have in the background as the deepest layer everything else has to come on top of that one to ensure that you can look inside of the inspector we have another tab called ordering and there you have a z index a z index in a 2d game determines what is drawn on top of each other right now every object we have ever worked with has a z index of zero however if I increase this for the ground by 1 the ground is on top of everything else except the lights are getting a bit weird this number can also go negative so now the Z index for the ground is negative one and every other object has is the index of zero which means that a ground will always be below everything else so in this case what we could be doing is that the Z index for the ground to negative two and for the tile map to negative one and that way we can once again see the decals again the advantage of that solution is that now the game is much more organized or at least reasonably more organized you can tell that this scene is getting quite busy because we have quite a few notes in there and well it's becoming a proper game it's still quite small but you get the idea although right now what I want to do is I want to lock the items and the ground make sure I can't select any children for the ground now I can work inside of decals and move stuff around and those are simply a couple of Graphics that I want to modulate so they are looking dark and green they should be much darker and a bit less green and a bit less transparent and now we have a Graphic that gives the entire thing a bit more texture so we could put this for example there let's scale it up and now if I run the game and go inside again you can see this is feeling much better and for some reason in the outside level the gate has disappeared although if I hide the ground nodes we can see it again which means something went wrong here with the Z index we can fix that by increasing the Z index by one not quite sure what happened here but well it's working for now anyway I went to work inside of the inside level and duplicated D cards and while we're doing that I want to make everything else invisible so it's not getting distracting I guess we can put one more of those here and then another one you can also rotate it or scale it up although you do have to be quite careful with that but basically just take a couple of them and then move them around next up I want to add another Sprite to the with a different kind of brush doesn't really matter which one it is this one also has to get visibility modulate much darker green ish and less transparency and definitely more dark I guess a bit less transparency and there we have another one and pretty much all you want to do is add lots of those all over the game so that the bass actually looks like it was infested by some random bugs and aliens I am probably going to add quite a few more and speed the entire thing up that's why you don't have to watch me do this for five minutes all right with that we have added quite a bit so the last thing we have to do is to make everything else visible again and now let's try the game and there we can see that this is feeling significantly better now the game doesn't look as clean anymore and we have a lot more texture to it so this is feeling a lot more scary and everything else is still working perfectly fine cool I am quite happy with this although there's one issue I've just noticed in the outside level if I run all of this again and notice when I am entering the gate the player is now below the house this is because the gate now has a z index of one but the player has a z index of zero because of that the gate is always on top of the player now in my case I'm going to set the Z index for the player to 2 and call it a day for real game you probably want to have a bit more of planning in terms of what layer gets what Z index otherwise you can get quite lost with this one and it might get a bit annoying but now if I'm trying this again this is much better now there's one more thing that I do want to do inside of the inside level and for that I want to hide the other stuff again we now have lots of stuff for the ground but on top of that especially for this area I want to add a bit of infestation and for that once again inside of the parent level I want to add another node 2D and this node 2D I'm going to call infestation this infestation is going to be right next to the ground and basically what this one is going to be if I work inside of the inside level we have infestation and it's there if you look under I think it is under objects and there we have infestation there we have a corner large line stuff like that I basically want to take all of them and drag them into this area and now we have added them to the parent node so let's move them to their proper place infestation also I want to lock the decals so they're not getting in the way inside of infestation now we have all of these random objects that look like let me break them apart all of these are random infestations that give the level once again a bit more detail and those I just have to place in the proper way for example this one would be a corner piece more or less so I can place it roughly here doesn't have to be perfect but once again the more time you spend on this the better it's going to look and if you duplicate nodes you can also make all of this a lot nicer so I want to keep on adding more nodes and this is a fairly boring tasks so this is also going to be sped up I guess this one is serviceable so I am reasonably happy with that now we have a problem though and that is that none of these have any kind of collision and you could approach that in two ways one would be to turn every single one of these Sprites into a separate scene and then place them all again that obviously is not what I'm going to do that would take way too long instead what you can do inside of these infestations we can add a static body 2D and for that first of all once again you want to update the Collision layers this one should only be in the objects layer and you can see the player the enemies and the projectiles now that we have that I want to add a collision polygon 2D this one is going to get a rough shape to block out one area and you really don't have to be too precise for this sort of thing the playup would never notice this will be one area now we can do all of that again and cover an area down there although for that I want to get rid this shape and then do something like this one more time and this static body area should cover this bit then I can duplicate It Again cover the other area copy it once again this area now and I think you get the idea I'm going to this corner and then ignore the other two parts because they're not terribly important so this bit gets this area all right with that we have most of the areas and let's just say the player can walk on top of the other bits so with that we have inside of one node 2D a lot of extra decoration for this one part now before we test all of this I have to reenable the lights and the player or rather make all of this visible again and now if I go in we are getting a lot of dark atmosphere especially when I'm getting to the area at the bottom you can see there we have some spooky stuff and the collisions work perfectly fine also all the way at the bottom we should be having the crates and they also work once we have enemies this is going to get even better but well with that I think we have added a whole bunch of stuff and I guess let me talk about really quick if I switch off the light when you're creating some area like this most of these little infestation Sprites are so simple they don't really need their own scene all you would do is create a static node a Sprite and then a collision shape but since this is so simple you could just add them directly and then add the Collision shape to the parent level in this case the inside level sometimes you might want to reuse them and then having separate scenes might make sense so this is totally fine for the next part we are going to start with the enemies the first enemy I want to work on is the Scout enemy this one is the easiest one it's basically going to be a static object that can shoot like the player which means we can already reuse all of the laser logic besides that the only difficulty is that we have to alternate between the two guns of the Scout but that should be quite easily done once again back in Godot I first of all want to close a couple of things we don't need the item anymore we don't need the UI we don't need the item container we don't need to create and we don't need the toilet instead I want to create a new scene and the root node is going to be a character body 2D I can rename this one right away to a Scout and then save all of this it should be in scenes and in there we have enemies currently there's a drone in there we're going to update this one as well but for now I want to work on the scout this scout like any other object is going to need a Sprite and he is going to need a collision shape 2D the Sprite we are getting from Graphics there we have enemies and there we have the scout I want to drag this one in there and there's one thing we have to change already and that is that the Scout has to face to the right that way we can use the look at function and make a point at the player easily so we have to give him a rotation of 90 degrees and then align him to something like this so that we can give him a collision shape and for this one I'm going to use a circle shape something like this and let's align the Sprite a bit better I suppose I should mention that in just a bit we're going to spawn the lasers on top of the guns and if you made the Collision shape something much larger something like this or you added a collision polygon and covered the entire area you would get an error later on where the lasers would Collide immediately with the shape of the enemy as a consequence we have to have this shape away from the guns like we have done for the player I didn't mention it back then but here's the player and the gun of the player is outside of the Collision area because of that the lasers when we are shooting from the player do not collide with the player itself if you wanted to have more specific Collision shapes then you would have to add for example a timer to each laser to only have a collision after let's say half a second but in my case I don't really care about any of this this Collision shape is totally fine which means now inside of the outside level I want to add this enemy although I want to keep everything organized and for that inside of level I will add another note 2D which is going to be for the enemies and the enemies could be right next to the player that looks about right if I now save the scene go to the outside level we have enemies in there I want to add this scout right now Godot is complaining that the Scout doesn't have a shape that is because I didn't save the Scout scene if I do that all of that looks just fine and let's move him to a slightly better position somewhere up here I can now Run the game and we have a scout so that is kind of working although before we do anything else there's one thing I forgot inside of the Scout we have to work on the collisions because right now Godot thinks that this scout is a player so the Scout shouldn't be on the player layer it should be on the enemies layer it can however see the player it can see the other enemies and it can see projectiles with that we can add a script to the Scout and the most important thing for now is a process function what I want to do in there is to make this enemy look at the player so we have to get the player position somehow this is a bit of an issue and let me explain why currently we have one player and one enemy and the enemy doesn't know where the player is we could store the position of the player in the outside scene or we could work with signals to make the player signal where he is but this would be kind of annoying because if we're working inside of the inside level then we would have to redo all of that once again but we already have a much better way and that is inside of the globals if I find it globals in there I want to store the player position so VAR let's call it player position this has to be a vector 2. although for now we are not going to give it a value instead what we are going to do inside of the player and we do have a ton of scripts but the player is here whenever we are moving the player this is happening inside of process after we are running move and slide I want to get globals and in there we have the playup position the value that this one is going to get will be the global position of the player this is allowing us inside of this scout this one you simply get the low volts and then the player position remember globals is available everywhere which means enemies have access to it as well now I can run out of this again and the enemy is looking at the player so this is working just fine I can also shoot at the enemy and the laser disappears so we are making quite a bit of progress before we do anything else Godot is complaining that we have a debugger error that the parameter Delta is never used to keep godo happy I want to add an underscore if I now run this again Godot is Happy perfect with that we can add a few more things first of all I want to add an area 2D this area to D I'm going to rename to let's call it an attack area this area has to have a collision layer it should be on layer 5 items and zones and you can only see the player this attack area is going to get a collision shape to the which is going to be a circle shape 2D this circle shape 2D should be fairly large something like this if I try this in the outside scene this is going to be the area where the Scout starts to attack the player you probably want to play around with the distance just see what feels good this area we can now use with a signal where I want to have body entered and on top of that also body exited all I really want to do is to add another variable call it player near by which is going to be a Boolean that by default is false and as soon as the player is entering the attack area we're going to set this player nearby to true and if the player is exiting the area it's going to be false again that we can use inside of process that if the player is nearby then I want to print it tag let's try this one and now we get attack although if I move outside of the area the attack is stopping but if I go back in we can see it again meaning this is working already next up we have to add the laser Logic for that we will need a few more notes I first of all want to have another node 2D which I'm going to rename to laser spawn positions they had two positions we have actually this is what I mentioned at the beginning of this section we have two guns and we want to alternate between them which means for the laser spawned position we have a marker 2D for one gun let's put it there and then a second position for the other gun besides that I want to add one more node which would be a timer and this I want to rename to let's call it a laser cool down back in the script of the Scout I want to send a signal that I called laser this laser will need a position and a Direction and if you remember from about 10 hours ago this is just about the same thing we have done for the player if I open that one we have a laser signal with a position at the direction and this we are emitting in this if statement which in turn will be captured by the level in the on player laser function we are creating one instance of laser and overwriting the position and the direction we are going to reuse all of this in just a second for now though inside of the Scout we have to emit the signal with a position and the direction this is going to happen if the player is nearby and actually we only want to look at the player if the player is nearby oh and there's one thing that I did forget to mention that we also want to have a cooldown between the lasers like we have done for the player there we have Ken laser this one is connected to a timer on timer timeout can laser is true I want to do the same thing for the scout which means I am going to create another variable and we can call this one can laser as well also this is going to be a Boolean by default this one is going to be true inside of the if statement if the player is nearby I want to add another if statement that if can laser if that one is true I want to get VAR position which is going to be some kind of vector true besides that I also want to get a direction which also needs to be a vector 2. once I have all of that I can get the laser and then emit the signal with the position and the direction other than that we have to add the logic for the timer we want to set can laser to volts and on top of that we want to get the laser cool down and start the timer this time up we have just created laser cooldown and if this timer times out then I want to set an laser back to true I hope all of this at this point is becoming fairly straightforward if you fold along it should be but if you want to have a reminder when I did all of this for the player we had pretty much the same logic so check this one out if you are totally confused now though we have another issue one that we have already seen the Scout at the moment is emitting a laser signal however inside of the outside level we are not capturing it there's no function either inside of outside or inside of level that would look for the signal from the scout we could connect all of that manually so I could click on the Scout and then connect the laser to the outside scene but that would be incredibly annoying once we have multiple Scouts we would have to connect every single Scout to make sure they can shoot a laser but this problem we have encountered before specifically inside of the container section we had the issue that we wanted to connect all of the containers to the signal and for that we used groups the same thing I want to do for the scout which means with discount selected I am going to go to groups and let's call this one Scouts now the Scout has a group and this we can use inside of level I want two for scout in get 3 and get notes in group the group we are looking for is called Scouts I think I called it Scouts yep and then inside of this for loop I want to Target every single Scout and connect the laser signal to a function since we already have an on player laser function I want to call this one on Scout laser this one doesn't exist right now so let's create it right away function on Scout laser this one will need a position and a direction the arguments we are getting from the signal for now let's simply print Scout is shooting this should already work if I now Run the game we can see Scout is shooting about once a second so I am quite happy with this that's a really good start however we are not actually getting lasers for that we have to make two changes the first one is we have to copy all of this so we actually create an instance of a laser besides that inside of the Scout we have to get an actual position and a Direction so let's get started with the position for now I'm going to keep things a bit more simple and I am simply going to get from Scout the first marker too deep for the position which means I can simply drag this in there and then get the global position of this marker for the direction we are going to need a tiny bit of math and once again I covered this a while back inside of the player if you want to have the direction between two vectors inside of the player we have done this all the way at the top we have to get a Target position and from that subtract the current position and then normalize everything so inside of the Scout I want to get the low builds dot player position that would be our Target from that I want to subtract the current position of the Scout all of this is going to return a vector and this Vector I want to normalize and that is going to give us a position and a direction this we can now use inside of level because in there we have on Scout laser which is carrying the position and the direction and for that we are going to reuse all of that and to make that a bit more organized I'm going to cut it out and then create another function let's call it create laser this grid laser is going to need two parameters for the position and the direction I am deliberately also naming them like I have done for onscout laser or for on player laser because that allows us to Simply call create laser and pass in the position and the direction if I'm doing that the player should still be able to shoot there we go this is working just fine all we have done is taking the logic we had sofa for the laser and place it inside of a function this is useful because now we can use the same function create laser with a position and the direction for the scout let's try this one and now we are getting lasers from the Scout and this seems to be working just fine so I am quite happy with this there are two more things to do inside of the Scout we are currently only using one of the guns I also want to use the second one besides that inside of the debugger we have two errors or two warnings that Godot isn't happy about fixing all of that is going to be your exercise so just to reiterate I want you guys to get the Scout to shoot from both guns and Alternate between them besides that fix the debugger warnings pause the video now and try to figure this one out the easier bit to work on is to debug a warning you can actually click on them the dough is bringing you to the function where the error is happening right now the issue is that we are having these two functions that use the body parameter but we don't actually use this parameter so Godot isn't happy about that and wants us to add an underscore before them if I now run all of this again the debugger is happy so this is working just fine also I should test if the Scout is the shooting at us if we're moving outside of the attack area and this is working fine next up the more important bit I want the Scout to shoot alternately between the guns and this you could approach in a couple of ways and I think there's a smart way to write the least amount of code let's say I want to create another variable for the marker note to get the marker node we want to get the laser spawn positions and this has two children we want to get one of them which we can get with get child get child wants to have an index and in our case we ever have 0 or 1. these are the only two options and we want to have a quick way to switch between them although first of all for now I want to get the first note this is the one we already have down here which means if I replaced all of this with the marker node we shouldn't see a difference let's try it and now we are Yep this is looking good same result what you can also do is write true in there it seems a bit weird but if I run this we are still getting the same outcome although a slight difference now we are getting the right gun whereas if we write volts in there we would be getting the left gun and they can see we are using the left gun the reason why this is working is that godom like python is converting data automatically to suit its needs your child wants to have a number like 0 or 1. with those converting faults to a zero and true to a one which will get us one of these children you could be more explicit about this and convert The Faults to a number using the int function although you don't have to and now all we have to figure out is how to switch between false and true every time we are shooting for that I want to create another variable let's call it VAR right on use this has to be a Boolean which by default is going to be true this red gun use we want to place into the getchild method after that I want to get write gun use and then assign it a new value the value has to be whatever write gun use is not so not right gun use if right can use is false then not red can use is going to return true and if right can use is true then not right can use is going to return false that way we are alternating between true and false which is exactly what we need for this one let's try it and there you can see we're using both guns in an alternating way so this is working really good with that we have the basics of a scout for the next part we are going to add a bit more interactivity I'll see you there at this point we have to scout unfortunately the Scout doesn't do very much it just shoots at us but we can't shoot back for that we want to connect the Scout to laser and to the grenades unfortunately at the moment the grenades don't work so let's work on that at the moment the grenades only explode which is basically an animation meaning they don't damage anything or more specifically they do not call the hit function and what is really important for this one is that as long as the grenade is exploding it should trigger the hit function the laser is only calling the hit function once and that's perfectly fine but for the explosion I want there to be some damage as long as any kind of entity is standing inside of the blast radius and for this part there is pretty much nothing new as a consequence all of this can be an exercise right away I want you guys to implement the grenade mechanic for that number one I want you guys to place the enemies and the player inside of another group called entity any node can be in multiple groups so the Scout for example could be in a scout group and in an entity group besides that if the grid is exploding check the entity and the container nodes after that if they are close trigger the hit function and make sure that you're continuously triggering it as long as the explosion is playing for this exercise I want to give you two tips number one is you can combine two arrays with a plus so if you add one array to another array you are getting a third array with all of the elements besides that there is a distance to method in every single Vector with all of that you should be able to implement all of this yourself so pause the video and try to work it out first of all I want to open the grenade scene at the moment there isn't very much we have a collision shape we have to spray to the of the grenade then we have an explosion and the explosion is controlled by an animation player besides that we have a point light and this one is a blinking to show us that the grenade is working if we are opening the code you can see there really isn't very much in there I guess I should mention that we have autoplay blinking and this one changes the energy of the light and if the two seconds of the animation duration up we are calling the explode function this explode function which is playing the explosion animation and that one is going through all of the frames of the animated Sprite to update all of that first of all I want to create another variable let's call it explosion active this has to be a Boolean which by default is going to be false and as soon as we're calling the explode function we want to set explosion active to row what that allows us to do is to use the process function and then check if explosion is active if that is the case for now I want to print explosion and with that let me return to the blinking animation and now if I run the game I can shoot a grenade and after two seconds we get explosion and we're getting this okay I should do this again and fix my typo explosion if I now run all of this again and not go into the inside level and shoot a grenade after two seconds we're getting explosion multiple times although at some point it stops because after the lay animation has finished so in the animation player we can look at the explosion animation once this animation is done we are destroying the entirety of the scene with Q3 because of that the process function will not be called anymore also we're not going to use Delta inside of this function so let's add an underscore next up if that is the case so we do have an animation I want to check or Target in let's call it actually targets just to keep it all a bit more readable if that is the case I want to get something like Target dot it although we want to add one more thing and that is if it in Target and only if that is the case we want to call the hidden method the issue we have right now is that there are no targets for that I want to create another variable this variable is going to be called targets and we get that with get re and then get notes in group for now I am only going to use the containers but later on we're going to add a bit more in there but for now we have all of the containers we're going through all of them and if there's a hit function in them we're going to call the hit function or method although I believe this should only be called container not containers but let's try this now if I go to the inside level and down there we have a great if I shoot a grenade at it and wait for two seconds there we go we now have the items but there's a bit of a problem and that is if I go to the other crates we can see they all have been triggered so this toilet was triggered and then we had a few more crates up here they have all been opened that is because as soon as we have explosion active we are running the hit method on every single Target but this obviously isn't what we want to do we only want to call the hit method if a Target is within a certain range of the explosion for that I want to create another variable let's call this one explosion radius this one has to be an integer which I want to set to 400. and then inside of the if statement if the explosion is active I want to get another variable let's call it in range this we are getting via the target and on there I want to get the global position this would be a vector 2. and this is what I mentioned earlier every Vector 2 has a distance to method and I just realized this doesn't work because we don't have the target I can fix that by moving this inside of the for Loop now we have access to the Target which is important because this gives us the position of the crate or the toilet so I'm checking the target Global position and I want to get the distance to the position of the grenade which we are getting with the global position of this one this is telling us now the distance between these two vectors if that number is smaller than the explosion radius only then do we want to call this hidden method which means we want to check if there's the method inside of Target and in range with that I can run the entire thing again and now if I shoot at the crate it should still work that's looking good if I however go to the toilet this one should still be closed and it is although I can still shoot at it and this one also work now for the distance you do have to experiment so if I shoot a grenade let's say here that shouldn't trigger it and it doesn't I shoot it here bill doesn't if I shoot it here that should triggered yeah and it does so obviously with the distances you do have to experiment quite a bit 400 might be a tiny bit large but these numbers are entirely up to you anyway though with that we have a process function and this one runs the hit method on the target but now the targets are only the crates in the toilets but we can update that to also incorporate the player and the scout let's have a look at the scout right now the Scout is in a single group the scouts but besides that I want to have another group called entity entities are supposed to be the objects that can move around in the game and be damaged I couldn't really think of a good name you might have called it damager builds but that sounded weird so I stuck with entity entities are going to be all of the enemies plus the player speaking of which we have to get the player seen and the player should also get the group entity that is going to give us the player and the scout with that we can return to the grenade and let me extend all of this because right now we are only getting the container but I want to get the container and the entities for that we can simply combine these two arrays meaning I want to get the tree again and on that I want to get notes in group and the group I'm looking for is entity I just realized I got a typo instead of get notes in group I got get first node in group which is another thing you can do but not what I want to do right now so get notes in group and now Godot is happy again this would give us the enemies or to very least the Scout and the player but it wouldn't do anything because the Scout doesn't have a hit function so we have process and then a couple of signals but nothing for a hit function that we can add right now though let me do it all the way at the top I want to create another function called Hit no parameters and for now I want to print Scout was it besides that I also want to go to the player and the player has a ton of stuff so let me minimize everything actually most of it is inside of the process function but you can tell there's no hit function for the player which I also want to add so func it no parameters and for this one I want to print layer was hit and now if I run all of this again the player can be shot at and we get player was it so this one is working the same is also going to work for the Scout so we get Scout was it and now if I shoot the grenade we get Scout was hit multiple times the same is going to work for the player so if the player stands next to the explosion we get player was hit multiple times all of that is working just fine so that covers another really important part now we have the grenades working properly so next up we can work on the actual enemy with the lasers and the grenades in place we can work on the Scout Health basically what we want to do is that the Scout has a hit function but this one doesn't really matter because the Scout doesn't have health which means we want to give him some health and then reduce that Health whenever he is hit on top of that we are going to need a timer and you will see very soon why but for now let's implement the basic damage mechanic once again back in good old first of all I want to close the grenade scene then I can work inside of the Scout and for the Scout I want to make the inspector a bit smaller also what you can do is this little arrow is hiding all of the open code which is giving me in particular a bit more space I assume you are working on the larger monitor so you probably don't need it but if you work on a laptop this can be super useful at the moment we are printing Scout was hit as soon as we're calling the hidden method but that isn't going to be enough instead I want to create another variable that we can call Health this one has to be an integer and the value is kind of random I'm going to go with 30. once again choose values that you like and basically all that we have to do if this scout was hit we want to get the health and then subtract it by a certain amount let's say 10 for this one after that if health is smaller or equal then 0 and if that is the case I want to destroy the node with Q3 and that should be all we need if I now shoot at the scout three times eight disappears so this is working really well and this was incredibly easy but there is an issue and let me run the entire game again if I now shoot a grenade at the scout the Scout disappears immediately the reason for that is that we are calling the hit function from the grenade inside of the process function which means we are calling it multiple times per second and since every call of the hit method is reducing the health by 10 amounts we are destroying the Scout after three frames of the game which is incredibly fast that is about one tenth of a second and that would make the grenades way too strong meaning we have to find some other way to work with this and the way you usually see this is that once any kind of entity has been hit this could be the Scout or a player it doesn't really matter as soon as they have been hit there's going to be a short timer doing which they are invulnerable this is going to be a very short amount of time let's say less than half a second that way if we have something like a grenade that continuously cuts the hit method we have at least some kind of delay between calling this method implementing something like this is actually not that difficult so it is going to be your exercise I want you guys to play around and create some logic so that the Scout can only be damaged every half second pause the video now and try to figure this one out first of all I am going to need another timer node so with the Scout selected I want to add another timer this timer we can call it a hit timer is going to get a wait time of 0.5 seconds one shot should be enabled this one should only run once and auto start should not be enabled we only want to call this a timer once the Scout has actually been hit but first things first at the moment I feel like the Scout node could be organized a tiny bit better so we do have Sprite 2D we have a collision shape we have an attack area and we have laser spawn positions those are working just fine but we have two timers that could be inside of another node which means we've just got selected I want to add simply a note the simplest note you have in Godot if I add this one we are getting a white node and if you look at the inspector this one has some process and editor description but it doesn't do anything this is perfect because for example for the laser spawn positions you want to have the parent being in node 2D because the node 2D could have transformed so position and a rotation what you need for a marker 2D but the lasers don't have any kind of positioning I hope that makes sense basically what I'm saying is that you always want to use the easiest node available and for a timer the parent could just be a play node because timers don't need a position so I want to move both timers into the node this note I want to rename right away to timers and if I now minimize everything this is feeling much cleaner although that being said we have a laser cooldown and a hit timer so the naming here I'm not a big fan of I want to have this being a laser timer now with that we have to update this script it touch at the moment we have on laser cooldown timer this I want to get rid of entirely and then in the laser timer I want to disconnect the signal now I want to reconnect the timeout for on laser timer and also for on hit timer that will give us two new functions the first one is on laser timer timeout this one should simply reenable can laser and set it to true then I can remove some white space and next up we have on hit timer timeout for that I am basically going to implement a similar logic compared to what we have done for can laser which means all the way at the top we have can laser and a similar thing we want to do for the vulnerability so VAR let's call it vulnerable this has to be a Boolean which by default is going to be true and then we are only going to reduce the amount of Health if the Scout is vulnerable a very difficult word to spell vulnerable and only if that is the case we want to reduce the health by 10. besides that we want to set vulnerable and I am terrible at spelling that word vulnerable we want to set two false and on top of that we want to get the hit timer and started and with that I can try all of it and we're getting an error because I have forgotten to rename the laser cooldown this I can do quite easily I'm going to get rid of the laser cooldown and use the laser timer instead now if I try this again it's feeling better and if I shoot a grenade at the scout he only disappears he actually doesn't disappear at all so I have to shoot at him okay he is completely invulnerable and I think I know why so we don't need the process function the issue right now is that we are only running or we are only reducing the health if the Scout is vulnerable but then inside of the on hit timer we're never setting vulnerable back to true so vulnerable should be true once the timer takes out and now this should be working so let's try grenade again and the Scout disappears after 1.5 seconds perfect so this one is working just fine and on top of that now our Scout scene is significantly better organized but right now we have a problem let me close the Scout and I want to look at the player if I run the entire game again I can shoot the grenade and this still makes the Scout disappear but the player is going to be hit continuously and that is also something we have to fix but that's going to be in the next part I'll see you there for this part we are going to work on the player health and most of that is going to be straightforward but we are going to have some issues but first of all the player already has some health this is stored inside of the global script which is fine except for two issues number one is we want the player to have a damage cooldown like the Scout however the player should always be able to pick up Health items the way you want to think about this one is that the Scout can only be damaged if vulnerable is set to true which means if that variable is false the Scout Health could never be changed if we had a similar logic in the player the player couldn't pick up Health items once he was hit which obviously would be a really big issue besides that we are storing the health of the player inside of globals which is just a script and as a consequence we cannot add a timer node we have to figure out something else we are back inside of Godot and I want to go to this script and look at the player I guess this is where we can start if the player is hit we are calling the hidden method and this one right now doesn't do anything besides printing the player was hit the actual health information though is stored inside of globals and there we have health at the moment this one is 60 but the actual amount here doesn't matter first of all then we have to connect the player to the actual player health and for that inside of hit I want to get globals then the health of the player and reduce it by a certain amount I am always going to work with 10 because that's an easy number to work with but once again you can choose whatever value you want in here I guess the value should be positive and this shouldn't be equal to 10 this should be minus equal 10. we want to reduce the health by 10. now let's try it off this and this scout is shooting at me and it reduces my health by 10. and if I get hit multiple times there we go now the player is dead on top of that if I run all of this again and let me do it in the inside scene if I shoot a grenade that is going to kill the player basically instantly so this is something we have to work on all of that logic is going to happen inside of globals so let me give it a bit more space and now we have to figure out a couple of things inside of this set function most importantly we want to implement some kind of logic that if let's call it player vulnerable only if that is the case we want to update the health this player vulnerable doesn't exist right now so let's create it I want VAR player vulnerable Boolean which by default is going to be true if that is the case we're going to do the same thing we have done for the Scout which means if I find it really quick inside of the scout we are updating the health we are updating vulnerable and set it to false and then we are starting a timer that sets vulnerable back to True once the time has run out which means inside of globals I want to update the amount of Health that we get I want to set layer vulnerable to false and then I have to start some kind of timer which unfortunately we cannot do because globals is just a script instead I want to call a function let's call it player invulnerable timer this function doesn't exist so we have to create it let's do it right below Funk layer invulnerable timer doesn't need any parameters and in there we want to create a custom timer purely in script and that we can do quite easily we once again want to get the tree and on there we have a function called create timer it's actually all the way at the top this time up wants to have one argument the duration of the timer in my case I want to go with half a second this time up would also start right away and the way you would be using it is with the await function and then what you're looking for is Timeout like the timeout we have seen for any kind of timer here we have a timeout and this timer Works in basically the same way and what this line of code does is it waits for half a second and then it does something else whatever we are writing afterwards the thing that we want to do is player vulnerable and this one should be true again let's try all of that and let me move this way if I now shoot a grenade and the player gets it we are only updating the health every half second so this is working now we have a problem though and that is that if the player isn't vulnerable then we cannot change the health at all because the entirety of the function happens inside of this if statement meaning there is a timer if the player gets hurt but there's also going to be a timer when the player is picking up a health item but fixing that is going to be fairly straightforward there's no New Concept we have to learn which means this can be an exercise which means I want you guys to update the set function for the health so at the health items can always be picked up and affect the player also with you now and try to implement this one righty let's think about the issue if we go back to the item and somewhere down there we are if the player is colliding with a health item we are increasing Global Health by 10. which means back inside of globals the value after picking up an item would in this case be 70. 60 plus 10 from the item that information we can use because we can check in an if statement if the value is greater than the current amount of Health this can only be the case if we have picked up a health item there's nothing else that is currently updating the health of the player and increases it and there we can get the health and then set it to the value we are getting and this we can refine even further using another function called minimum this one is picking from two values and it always picks the lower one and I want to have the value and 100. this one limits the maximum amount of health of the player to 100 so if value becomes 150 minimum is going to pick 100. since our current health bar only goes up to a hundred this is quite important to include imagine we could have a health of 150 but our health bar would only show a hundred so if the player get hit we would be at 140 and the health bar wouldn't move at all so this helps to not confuse the player besides that I want to add an else statement so we are checking if the value is smaller or equal to health and if that is the case I want to check if the player is vulnerable then we can update to health update the vulnerability and then call the timer although the one thing we have to update is the stat change this one should always be called without it this change appeared to increase the health wouldn't be emitted so it wouldn't be visible but that is all we needed so let's try all of it and I guess it's going to be really hard to show but if I get hit we are decreasing the health and if I get hit by a grenade this is also working and now if I pick up Health items I hope I can find some also not lucky okay I am really unlucky with health items right now let's try it all the way at the bottom and I am probably going to speed up all of this okay there we have health items and if I pick them up we are increasing the amount of Health oh and then we have quite a few health items so I can pick up all of them and this is working just fine perfect with that we have the player Health sorted out for this section I want to work a bit more on the Scout specifically I want to make it light up under certain conditions so the problem right now is that if the Scout or the player get hit there will be a change in health and if we hit the Scout often enough the Scout is going to disappear the problem is that a change in health of the Scout is not being communicated all we can see is that the laser disappears once it collides with the Scout ideally what I want is that the Scout is flashing for a short period of time after it is being hit for that we are going to need a completely new topic called shaders shaders in the most basic sense determine how elements are being displayed in the game for example we could have a simple resource that would be the Godot logo this coder logo is just an image comprised out of pixels if I open the same logo in Photoshop we get something like this and if I zoom in Far Enough at some point you can see individual pixels and all of those pixels have a couple of attributes if I click on this pixel for example we have a value for red a value for green a value for blue then we also have an alpha value and a position all of that happens inside of the original resource but this isn't necessarily what we are going to display inside of the game now so far for every graphic we have ever used we have simply told every pixel to have the same color and the same Alpha which means we didn't update the original image at all but we could totally make updates to it for example what we could be doing is tell Godot to display every single Pixel as a white color that way instead of a graphic we are simply getting a white rectangle what you really have to understand here is that in the original image the corners are rounded because these pixels are transparent any image that you have is always going to be a perfect rectangle and if you want to have rounded Corners you have to make the corner pixels transparent but if we tell Godot to make every single Pixel white we will always have a rectangle with sharp corners now that being said what we can also do is to tell Godot to display every single Pixel as white but keep the original Alpha values that way we keep the rounded corners and all of that is just the very tip of the iceberg shaders get incredibly more complex you can do so much more with them there's literally an entire website dedicated to Godot shaders and this gives you a really good idea of what you could be doing with shaders for example there we have a color cycling hit effect and this one is looking quite nice besides that you could also give items an outline or you could create a vignette or you could swap the colors of Sprites and you could do a lot more water shaders are also really common thing and well the list goes on for quite a while shaders are a really extensive topic and it can only cover the most basic parts of them although I will be making a dedicated video on them well now though let's cover some basics shaders can change a couple of attributes the most important one is the color of a pixel besides that we can also change the transparency of a pixel and the position of a pixel all of this is calculated in real time which means you could change these values dynamically and then create movement or changes in color over time this is going to give you a ton of power in terms of how your game will look but that being said shaders are more advanced and they can get very complicated most importantly because we are not using GD script instead Godot has a c like shading language what that means to give a couple of basic examples is that you have to be really strict with data types you couldn't even add up an integer and a float besides that you also have to add semicolons after every single line and there are quite a few more differences we are literally going to use a whole new programming language on top of that what is really important to understand is that when we are running the script we are running a script for basically every single Pixel of the graphic we are working with because of that we are a bit more constrained for example the print statement wouldn't be available simply because you would get way too much output and this is making debugging much more difficult alright that was a ton of theory let's do all of this in practice actually that should be much more straightforward here we are back in Godot and I want to reopen this scout so the Scout scene in there we have a couple of items we have the timers we have the laser spawn positions attack area and collision shape all of those we are going to ignore because we want to work with the Sprite 2D this is the only visible element of the scout so this is the only element we want to work with now to give an item a Shader you have to go to material and in there you have a material attribute right now it's empty but you can give it a Shader material then you get something weird but if you click on that you get a Shader right now this one is empty and we want to give it a new Shader now Godot is going to ask you what you want to name this script I think scout.gd Shader is perfectly fine so I want to create this new script and now nothing has happened you actually make something happen you can either click on scout.gd Shader or you can go to the Shader editor at the bottom if you click on that you can see an editor right now there's nothing but if you open the script you can see we have Shader type and notice a semicolon and after that we have void fragment and then we have some curly brackets inside of there we can actually write some code so what does all of that actually mean on the first line we have the Shader type that is going to tell Godot what kind of graphic we are working with a canvas item is a 2d item besides that we could also have a spatial Shader type and this would work for 3D objects but in our case canvas item is totally fine besides that all of that is a function and a very specific one called fragment this one determines the color and the transparency of every single Pixel another inbuilt function you could be working with would be void and this one is called vertex this one would let you update the position of every single Pixel although this is not something I am going to work with we want to keep it simple and I just want to work with the color and the transparency of every pixel and for that let me zoom in on Scout and let's see what we can do in here ultimately what could do once is some kind of color attribute and this color attribute has to be a vector with four values and inside of the shading language to create that we want vac 4 so this is telling a door to create a vector with four values and there we can simply add four values in my case I could go with one one one and one and now don't forget at the end we do want to have a semicolon and if I now wait a second we are getting a completely white square around everything what has happened here is that Godot looked at every single Pixel of this image and then changed the color of this pixel to the vector we have gotten in there the values we would get in there are red green blue and transparency so if we change the vector 4 to 0.1 and save all of this we're getting a bluish color because now we are removing the red color I could actually get this to zero and then we get an even Bluer color and that is the very first thing you have to really understand about shaders that inside of a fragment Shader Adobe wants to have a color and this color determines the color of the pixel and the transparency of the pixel the transparency you get via the last value so 0.5 would give us 50 transparency and while we're working on this I am going to tide the Collision shape and the attack area so we can actually see what's going on so with that we can already change the color of everything but that doesn't help us very much right now now before I continue I do want to cover a few more basics of the shading language first of all you can create variables for that you wouldn't use a VAR instead you would use the data type you want to create for example if you want to create a float you would type float and then the name of the variable for example we could have a test variable and then we can assign it a value let's say 0.1 and then once again don't forget to semicolon that is giving you a test bar and this test bar you can use inside of color for the vector 4 and if I save this we have a lower transparency however this is something I've mentioned earlier that you have to be incredibly strict about the data types what you couldn't do for example is get a test VAR and then add a 1 to it the dough is going to give you an error right away that we have an invalid arguments to operator plus load plus int so in normal python or GD script you can add a float and an integer perfectly fine together because to humans those are both just numbers but for a computer those are entirely different values and in the shading language we cannot simply add them up together which can be kind of annoying but you will get used to it eventually besides that the shading language also has a couple of predefined keywords that are super useful color is the one we have already seen another one is UV and this one gives you the position of the current pixel for example what we could be doing if I once again get a vector 4 with 1 1 1 and 1. so completely white area what change I could be making is for the first value I want to have UV and this is giving me the current position of the pixel and this one is going to be a vector 2 with an X and A Y attribute if for example I change this to UV X then the output would look something like this so what happened here there are four values we're working with in total we have a red color a green color a blue color and then a transparency the last three values are always one so we have the full amount of transparency and all of the green and all of the blue color the only change we are making applies to the red color and the value we get here is determined by the position these values start at 0 all the way on the left and then go to one all the way on the right which means all the way on the left we get no amount of red so this area is going to be blue and then all the way on the right we get the full amount of red so the color is going to be white now in this case we are rotating the entire thing if I show this really quick we are rotating the entire Surface by 90 degrees we're just going to make all of this a bit more confusing but if you look at the material we have the unrotated graphic and in there you can very much see that the further to the right we are going the more white it is going to become or rather the more red we are going to have because if you have a pixel all the way on the left then X is going to be zero and if you have a pixel all the way on the right X is going to be 1. what we could also do for example with the transparency get a UV and then y if I now save all of this we get transparency for the other pixels and once again if you look on the right all of that is much more understandable we start all the way at the top and they are transparency for uvy is zero so this UV for the pixel all the way at the top would be zero but the further down we go the closer we get to one which is the value all the way at the bottom and once we reach the bottom we are getting a one so all of those pixels will be completely visible however there is one important thing that we cannot do right now we cannot get the current transparency of the pixel that we are working with for that we have to learn One More Concept so right now I'm creating a float test varm but this I want to get rid of instead I want to get the current Alpha value of the pixel I am looking at and for that we will need a function this function is called texture texture wants to have two arguments the first one is called a texture sampler you can see it kind of there at the bottom although I am running out of space a sampler is simply giving us access to a certain kind of texture the one we want to use is the texture applied to this Sprite 2D which we're getting with simply the word texture all in uppercase letters besides that the texture function wants to know the position that we are looking at which in our case we are getting via UV and with that we are getting an error that we have an invalid assignment of vector 4 to a float which means that this texture is returning the current color so RGB and the alpha value of the current pixel which actually means that this is returning the literal color that we have so we could replace this and get rid of the vector 4 and if I now save it we get the original oh well I have to comment out the float a because this is giving us an error but this texture is literally what you get by default you are looking at the current pixel and on this pixel you are copying the alpha value and the color however what you can do on this Vector 4 is get one specific value and that would be the alpha value and once we have that good old stops complaining so this is a good start and what you could be doing now and let me give a bit more space you could use an if statement that we only want to have the current color if there is a transparency value and to add if statements inside of the shading language you would need if then parentheses and then you want to have current a is equal to 1. however this is not going to work and godo is going to complain that once again we have to be really strict with the data type right now we're comparing a float and an integer to fix that we have to add a point zero that way Godot is happy and now we need curly brackets and inside of there I want to have the color and just so that we can see what is happening I don't want to have the current color instead I want to have a vector or with one one one and one so basically what we're doing right now and you can see a really ugly result we are getting the current Alpha value of the pixel and once again remember this script is run for every single Pixel of this texture and then if the current Alpha value is 1 then we are coloring in the current pixel in pure white this kind of well partly works but you can see the issue that some of these pixels don't have perfect transparency but they are still visible so they might have 90 transparency which is why this kind of if statement wouldn't really work here and more General an issue with shading languages is that you want to avoid if statements simply because they have some performance penalties let's get rid of them instead what I want to create is going to be a vector 4 and this is going to be the target other and for this target color I want to use another function mix is going to mix two colors and in our case we want to mix the current color with a pure white color which means we want to have the texture with texture and UV to get the current color of the pixel besides that I want to have another vector or and this one actually let's do it like this this is much easier to understand for this Vector 4 I want to have a vector 3. that has one for all of the values and besides that since I will need a fourth value I want to have the current Alpha value finally we need one more argument which is a floating value for the progress let's say 1.0 for now and although at the end we will need a semicolon I'm going to explain all of this in a bit more detail in just a second but what I can do now is get the color and then assign it the target color and this is going to light up everything exactly as we want so what happened here mix is going to mix two values in our case two Vector force and how much you get of the second Vector is going to determine by the final value which would be this 1.0 1.0 means you have all of the second vector and none of the first Vector if we change this 1.0 to let's say is 0.5 then we're making all of this much brighter but you can see the original pixels much better and if this value is 0.0 we can only see the original there's nothing of the white pixel besides that there's one more change that I have made we are for the second Vector 4 creating a vector 4 and then we have vac 3 1 and the current Alpha value what happened here when you're creating a vector 3 you can give it values in a couple of different ways if you simply add a 1 and there is the only argument then all of the three values inside of the vector are going to get that value which means simply adding a 1 would be the same as 1 1 and 1. that's simply a way to write a bit less code and the reason why I am choosing a vector 3 is because 40 Alpha value we want to have the current Alpha value of the pixel we are looking at that way if we're getting a value let's say in the top right where there is literally nothing of the Scout we are keeping the original Alpha value both in the original Vector 4 and in the new Vector 4 we have the same Alpha values which means all we are changing is the color when you're getting started with shaders all of this is going to be really confusing so at the moment I am not going to make this any more complex so I'm going to add some minor parts to access the Shader but this is as complex as it's going to get for this video shaders can get quite a bit more advanced and well they can get really difficult so this is something you want to approach once you have a bit more of a stronger foundation in Godot yes one more thing we have to figure out and that is at the moment we can set a static color let's say one but we can't influence this from inside of gdscript let's say inside of the Scout and I give it a bit more space if this scout has been hit inside of this function we want to tell the Shader so the script all the way in the bottom should change the value to one and if we're not being hit we want to change the value back to zero how could we do that and well for that we have another concept and that is called uniform uniform is a key word that if you add this to a variable this variable will be exposed to GD script or while to godo in general so he can access it via the inspector for example what we could have is a vector 3 for the color and for this color we can tell Godot that this is going to be a source color that's why Google knows that we're not just working with a vector but with a color expressed as a vector after that we can set a start value let's say Vector 3 where all of the values are one and once again don't forget to semicolon and right now nothing really changed but if I show the inspector of the Sprite 2D you can see on the material we have Shader parameters and in there we have a color and this color we can simply update to whatever we want for now let's keep it at a pure white now this color I want to use inside of mix to replace this vector3 so in there we want to have the color right now this is not going to change anything but what I can do now is to go to Shader parameters and select a new color and then we are in real time updating the color of the highlighting color I guess we could make this fairly bright and make it a bit more bluish whatever kind of color you like it really doesn't matter besides that I want to create another variable this is going to be a uniform variable as well although this one has to be a float I called it progress this is a value I want to have inside of a certain range and to give that prediction I want to add hint range for this one we need three values a start value 0.0 and a final value 1.0 and then a step size let's go with 0.1 although this one doesn't really matter and then for the start value I want to set this to zero once again don't forget to Summit colon and now Kudos stops complaining this progress is what I want to use all the way at the end instead of this 1.0 I want to have the progress variable what this is now allowing us to do is we have a color and we have a progress it starts at zero and then we can use it to update the color or rather how much we see of that color and with that we have written a reasonably complex Shader it still is incredibly basic but for our purposes this is all that we are going to need next up inside of the Scout in GD script when we are calling the hit method I want to update the value of this progress or more specifically if the Scout is vulnerable we want to set the progress value to 1. for that we will first of all need the Sprite 2D so the note with the Shader on there we have a material and on there we can set Shader parameter that is going to give us access to this material and these two Shader parameters and there we have color and progress the one I want to work with is progress this will be the first argument the second argument is the value you want to set it to in our case this will be one and with that we are good to go if I now run all of this you can see we have the Scout being pure white and that is because by default we have set this to one I want to set this back to zero and now if I run this again the Scout has the original colors but if I shoot it and hit it now it gets a pure white color with a slight blue tint but this line is working just fine we're getting the Sprite to D and we are updating the Shader parameters on the material we could also update the color but in our case we don't really have to do that besides that I also want to disable this color once the Scout is vulnerable again that is going to happen inside of the on hit timer timeout if that one times out the Scout is vulnerable once again in there we want to get a Sprite to D we want to get the material and on there we want to set Shader parameter once again we want to get the progress attribute and now set this back to zero if I now run all of this again I can shoot a discount and we are getting an error that is because in godob I have made a typo this should be set Shader parameter let's try again now and if I shoot at the scout and hit it there we go I should run this again but you can tell that this scout is lighting up for a short period of time although the amount of time here might be a tiny bit long for that inside of the hit timer I want to set the wait time to 0.2 now I can run this again and we get a much shorter blinking up as always for the specifics you can play around quite a lot but I think for this part we have learned about some really important Concepts and well I think this is a really good start there's not going to be an exercise but for the next part we are going to have a much chunkier exercise so I'll see you there