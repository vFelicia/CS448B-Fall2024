hello there in this video we will visualize some data with map.lib and python and here's what we are going to make so on this graph we have bar charts with video game sales and on top of that we have a line plot with pc sales and all of that is actually quite simple to make so let's jump right in and before we get into code let's first talk about map.lip by itself that is really going to help us later on understand what we are doing so in essence map.lib needs two things to visualize data number one is a figure and number two is an axis and a figure is just a blank canvas it doesn't do much by itself except that it holds an axis and the axis is what actually holds the data so on this we would draw our bar charts and our line plot so what we are effectively going to do is that we first create a canvas then we are creating an axis and then we are creating graphs within the axes and you can create multiple graphs on top of the same axis and there is one more thing we need to get started and that is that map.lib is not the default module of python so we have to install it so open either the powershell or the terminal and type pip install matplotlib and then you should be seeing a fairly long animation installation and once that's done you have map.lib so with that one done let's actually get into some code so here i have a completely empty python file and the very first thing i need is to import matplot lib but map.lib is a giant module so what you usually see is that people don't import the entire thing and instead they only import one specific part of map.lib that is called pi plot and this for brevity is usually abbreviated as plt there's one more thing we need to and that is some data to visualize because if you want to visualize data you need some data obviously in my case i already have some data prepared and it's going to look like this well we have five different lists that says phases playstation xbox nintendo and pc sales and these data points either show the sales of a specific console or pc sales in a given year and this data is by no means perfect there are quite a few things i left out but none of that really matters because this is just a demonstration we don't look for accurate data but obviously when you actually create data this is something you really want to keep in mind that the data you are using is proper and accurate but there's another thing i really want you guys to pay attention to that effectively each list is a row and each entry in the list is a column and this is intentional and really important because map.lib by default doesn't know how to connect these different lists and the only way it can connect them is by them having the same order so at the first entry for the playstation is also the first entry for the xbox and this would then also be the first entry for the phases and if we didn't have that map.lib couldn't connect the data and would give us random results which we obviously want to avoid all right let's actually create some visuals and i want to create my figure and my axis in its own variables and there's one command to create both at the same time it is called plt dot sub lots and to show all of this we need plt.show and if we're on the code now we can see a figure and an axis inside of this figure obviously right now they are not showing anything that's going to come in just a second so what we now have to do is to use this axis and pass some data into it and let's do that actually so what i want to do is to create a bar chart which is done with the command x dot bar and at the minimum you need two arguments in here number one is the position of each bar on the bar chart and number two is the height of each bar and map.lib is quite flexible so in here for example we could pass in the phases so just a list with all the names and then let's say for example playstation and this would be working so let me run this and we can see some very basic graphs but this isn't exactly what i want because i want to have multiple bars on each of these entries so what i have to figure out is how to make each bar thinner and also how to put it in a specific position so for example that the playstation ones are always a bit further to the left and there are a couple of things we need for that so let's go through them step by step the first thing i want is that each of the bars has a specific width and for that i'm just going to create a new variable that i'm going to call with and i've chosen 0.2 but you could go with other numbers just see what you think looks good and with is also an argument that you can pass into bar so if i pass in with and here and run the entire thing again now we have much thinner bars so we are making some progress what we now have to figure out is how to move each of the bars a bit further to the left and for that we have to talk about the first argument inside of the bar and effectively what happens in there is that map.lib assigns each of the entries in index with the first one being zero the second one being one the third one being two and so on and then it puts the bar exactly on this position but we don't want the bar to be right on that position instead we want to offset it by a tiny bit so for example for the playstation we want to offset every bar by its own width to the left so the first index for the playstation is negative 0.2 then the second one is 0.8 and the third one is 1.8 and we can achieve all of that with list comprehension and i'm going to assume you know how list comprehensions work if you don't i will link a video in the description to explain it so i want an x position for the playstation so i create a new variable that i call x playstation and for the list comprehension i want the x position minus the width for every x in range of the length of the playstation list so effectively what we are doing is we're looking at all the entries of the playstation starting from 0 and going to 4 and for each of them we subtract 0.2 our width and now that we just have to pass in for the phases and now if i run the code we can see our entries being slightly offset and that is exactly what we needed so now we have the basics for our playstation graph now we can come to the next one and on the same axis create another bar chart and in here i want to go with the xbox data set and for that i have to create a new list comprehension so i'm going to copy the entire thing and rename it a tiny bit let them move on the same line and since the xbox bars are supposed to be in the middle of the other two graphs they are supposed to be right on the middle so we don't really do anything specific here and yeah that's all we needed so now i can type x for xbox then i can add in the xbox entries and then i also need to whiff and let's try out of this now and we have two entries right next to each other obviously the very first one is empty because the first playstation came out way before the first xbox so back in this time period the xbox just didn't exist but okay now we need one more and that is for nintendo so i'm going to create another x dot bar and this time i want x of nintendo i'm going to create this in just a second then i want nintendo and then i want the whiff all we have to do for nintendo is to do kind of the same thing for the playstation except instead of going negative we want to go positive so that all the bars for nintendo are slightly offset in a positive direction and then pass in here nintendo and then we are good to go so let me run all of this and there's a mistake x nintendo all right nintendo let's try this now and there we go we have all the basic bar charts that we need but there's one more element that we do need and that is the pc sales line chart and to create a line chart we need x dot plot which is short for line plot and this one again needs two arguments number one is the x position and number two is the height of each point and since we don't have to worry about offsetting anything for the x position we can just use the phases and then for the height we can just use pc sales and it should be a comma and let's run all of this now and there we go we have our very basic data setup obviously it doesn't look very good right now and there are some parts missing but all the basic data is in there so let's make it look prettier then and there are quite a few things i do want to add so let's go for them step by step the first thing i want is to add a title and to do that we have to first address the axis again and then use set title and in here we just have to pass in a string with the name of the title which in my case is the hardware market and if i run all of this now we can see a title so this one is working and next up i want to set the y labels so we can actually tell what the data is telling and this happens in quite a similar way we are still targeting the axis but this time we use set y label and in here again we need another string which in my case is total sales and in millions and if i run off this now we can see on the left side total sales in millions but to get full clarity we need a legend so you can actually tell which bar is which and to add that we need again x and this time we need a legend but by default this isn't going to work and let me run this code so we can see this tiny little icon in the top right that is empty right now and it's very small and this happens because map.lib doesn't have any data in terms of what each bar represents and to fix that when we create the bars and the line plots we have to give them a label to tell them what they are which is very easy to do so in the bar charts we have to create for each of them a label what they are so for the playstation this would be the string playstation and then i can copy the entire thing and this one would be xbox or microsoft whatever works the next one would be nintendo and the final one we have pc sales and now let's run the entire thing and there we go we have a properly functioning legend so things are becoming much clearer already but i don't like the colors of each of the bars of the line plot so let's work on that and again all we really have to do is to add another argument in any of these to change the styling of each of the bars or of the line plot and i'm going to keep this very simple all i'm going to change is the color of them and that you achieve with the color argument and in here you could pass in quite a few different arguments to get different kinds of colors but the easiest one is that map.lip has a set of predefined colors that i'm going to use because they're the easiest and for the playstation i'm going to go with a color called dark slate grey and now we run this we can see a much nicer color for the playstation entries and what's even nicer is that the legend automatically updates which is quite a nice extra and now again i just have to apply the same thing to all of the other bars with a slightly different name so for the xbox i have lime green and for nintendo i have crimson so let me run this again and now we have nicer looking colors so making some decent progress now for the line plot we have to do some more stuff we can still use color and i have chosen black for this one so if i run this now we get a black color but i want to have another thing for the line plot that each of the points is a bit more noticeable and for that we have to add what's called markers and you're going to see in a second what that means specifically so what i want to add is a marker and in here we have a couple of different options what i want is an o and let me show what this means so now for each of the points we have a circle around it which makes it much clearer to illustrate where each point is and if you passed a different argument for the marker you can make this look like an x or a triangle or really whatever you want and i think this finishes the styling so in the next part we'll work on adding numbers to each of the bars so what i want to achieve is on top of each of the bars there's a number saying exactly the number on how high this bar is and to achieve that we need to know a few things number one is the height of each bar and number two is the position of each bar and maple lip makes this quite easy because when we created the bars we can access each of the rectangles inside of the bars and this information we can store in a variable and then use in a for loop for example so let's have a look at that the first thing i want to do is to store the rectangles for each of these bars inside of a variable and this happens by just typing right 1 in this case in front of the bar and what happens is when map.lib creates a bar it returns a value that we can store in a variable and i want to do that for each of them so now i have three rectangles for each of the bars i don't have to do this for the plot because we don't need it for it and now i want to loop over each of them and do a couple of things and since i don't want to duplicate code i'm going to write a function right at the top of the code that i'm going to call auto label and into this function i want to pass in the rectangle group so rect 1 rect 2 and rect 3 would each be a rectangle group so for example rect 1 will contain 4 different rectangles and i want to loop over every single one of them so what i have to do is for rekt in wrecked angle group and now i want to do a couple of things the first one is i have to get the height of each bar which i want to store on its own variable which i'm going to call height and to get the height of each bar we need rect dot get height and next up we have to create some text and this happens with x dot annotate so this one can create very simple text and the first argument we have to pass into it is the text we actually want to display which in my case is the string of the height and the second argument is called x y and this is the actual position of each of the text elements and in here we have to pass an x and a y coordinate which is going to be a tubal and we know the y coordinate that was just going to be the height but for the x part we have to think about this a tiny bit more and to get the x position we again have to target our specific rectangle and to get the x position we need get x and this by itself would be working so let me actually demonstrate this so bit further down i'm going to call this function and pass in rectangle one and let me run off this now so now we can see the number on top of each of the bars for playstation but you can also see the text isn't perfectly centered you can see this in particular on the ad7 that this one is skewed to the left which i want to avoid because i want to have the numbers right in the middle for each of the bars and the problem here is that this x position is the left side of the text so i have to add something to the x position and all i have to add is half of the width of each of the rectangles so rect.get with this time and divide this by two so now if i run the code all of this is going to be offset by quite a bit and the reason for that is that the horizontal alignment of the text is off but we can fix that very easily with the argument ha which stands for horizontal alignment and i want this to be centered so now we run the code we have text right in the middle of the entire thing so this one is ideal and let me actually call auto label on all of the rectangles so rectangle two and rectangle three and now we can see all of the different pieces of text so this is already getting quite close to what we need now the next problem is that i don't want the text to be right on top of the bar i want there to be a tiny offset and maple lip has a specific argument for that but before i go to that let me add some lines between that so that all of this is easier to read so to create an offset we need two more arguments the first one is called x y text and this one will give us the amount we want to offset the text and here again this has to be an x and a y tuple in my case the x is to be zero because i don't want any horizontal offset but for the vertical ones so for the y i want this to be three so now i have the coordinates by how much i want to offset the entire thing but if i were to run this it would not work so as you can see in here everything is broken but this we can fix betting just one more argument that is called text chords and this one has to be offset points and now let me run this now all of this looks much better and let me explain what happens here that when we just call xy text map.lib doesn't know exactly what to do with this information so it puts all of the text inside of this position but we don't want that instead what we want to do is to take the original position and just offset the text by this amount which we tell my.lib by adding this argument there's one more thing we need and then we're done and that is let me run the entire thing again i think the text right now is a bit too dominant so i want to change the color to make it a bit less obvious and this is again the color argument and all i want is to make the text gray and now if i run the entire function again now we have grey text and that is the entire thing so this is exactly the same graph you have seen earlier in this video so i hope you enjoyed this and i'll see you around