With timestamps:

00:00 - hey guys in today's video we're going to
00:02 - be going over cs50 lab 2 scrabble and
00:05 - this is going to be a step-by-step
00:06 - walkthrough for beginners so let's just
00:08 - jump straight into it
00:10 - so i have this tab open here and this is
00:12 - cs50s explanation on how to do scrabble
00:16 - okay so let's just follow the
00:16 - instructions step by step
00:18 - so first it says to type cd and this is
00:20 - just my vs code here empty
00:22 - cd okay
00:24 - and then it tells us to copy this okay
00:26 - it's going to do exactly what they say
00:29 - and then it says to unzip okay i'm just
00:32 - going to copy and paste what they tell
00:34 - me to do
00:35 - and rm and then type y
00:38 - okay
00:40 - and then type y enter okay
00:43 - finally they say to do cd scrabble
00:46 - okay again i'm just copying and pasting
00:48 - step by step what they tell me to do
00:52 - and finally
00:54 - they say
00:55 - okay type ls
00:57 - ls okay and scrabble.c shows up so
00:59 - that's a good sign
01:02 - and then we do code scrabble.c
01:05 - okay and now lots of distribution code
01:07 - comes up
01:08 - um so this is the code that they give us
01:11 - when we just follow the instructions on
01:13 - their page so this distribution code or
01:15 - code that cs50 gives to us
01:18 - okay
01:19 - um but before we jump into that let's
01:21 - first uh let's first understand what
01:23 - scrabble is actually about what the
01:25 - program is
01:26 - so here's how it works
01:28 - every letter is given a score
01:30 - so letter a is worth one point b is
01:32 - worth three points c is where three
01:34 - points and so on and so forth
01:36 - so how it works is
01:38 - both players player 1 and player 2 will
01:40 - input a word
01:42 - and the player whose word scores more
01:44 - points wins the game okay so let me just
01:47 - give a quick example here
01:49 - so let's say player 1 puts in the word
01:50 - bad
01:51 - so here bad b is worth three points a is
01:55 - worth one point and d is worth two
01:57 - points that gives player one a total of
01:59 - six points
02:01 - player two puts in the word def
02:03 - so d is where two points e is worth one
02:06 - point a is worth one point and f is
02:08 - worth four points
02:09 - so the total score is eight points so
02:12 - here we can see player two has more
02:14 - points than player one
02:15 - so the computer should print out player
02:18 - two wins
02:19 - okay so this is a very basic explanation
02:22 - and that's what we have so far that's
02:23 - what we have to do
02:25 - now let's take a look at the
02:26 - distribution code that they give us
02:28 - so first things first we see here an
02:30 - array called points which has ins
02:34 - okay
02:35 - and here we can see that this is the
02:37 - points assigned to each letter of the
02:39 - alphabet okay so here in the zeroth
02:41 - index points zero
02:44 - is one
02:45 - which means that a is worth one point
02:48 - and in points one the first index is
02:51 - three which means b is worth three
02:53 - points so these are the points assigned
02:55 - to each letter so a is one b is three c
02:57 - is three and so on and so forth right
03:00 - as we said earlier in this talk
03:02 - okay so this is the array that they give
03:04 - us
03:05 - and
03:06 - next up we have a prototype here a
03:08 - function called compute score
03:10 - that takes in a string called word
03:14 - and outputs an integer okay and so far
03:16 - this makes sense because the player is
03:19 - going to give us a word so that's the
03:20 - input
03:21 - and it's going to output an int which is
03:23 - the score right
03:25 - okay so let's go
03:27 - i'm just going through the code step by
03:29 - step by the way uh we don't have to
03:30 - write this code this is the code already
03:31 - given to us
03:33 - so next thing you do is get input from
03:35 - both players okay and how we do that is
03:37 - using the get string function if you
03:39 - remember from earlier problem sets
03:41 - so string word one equals to get string
03:44 - getting some input from the user
03:47 - and the same thing for word two so we're
03:49 - getting two inputs one from player one
03:51 - and one from player two
03:53 - and that's where they type in the word
03:55 - and next thing we have to do is score
03:58 - both words right
03:59 - so in score one equals compute score
04:02 - word one and this is the prototype we
04:05 - saw earlier right so we have to write
04:07 - this function
04:08 - so they don't tell us how to compute the
04:09 - score we have write the program that
04:11 - completes the score
04:13 - right and finally we have to print the
04:15 - winner okay
04:18 - so first thing we have to do here is
04:20 - let's actually write the function
04:22 - so how do we go about that when the
04:24 - player inputs a word we need a specific
04:27 - score to be given to that word
04:29 - right
04:30 - so
04:31 - let's take a look here
04:33 - we should remember that every string is
04:35 - just an array of characters right if you
04:37 - remember from the lecture every string
04:39 - is just an array of characters so let's
04:41 - take an example here the word code
04:44 - so
04:45 - code is a string right the word code is
04:47 - a string but it's actually just an array
04:49 - of characters
04:50 - so let's just say
04:52 - this is an array called word
04:54 - and in the zeroth index will be the
04:57 - letter c
04:58 - and the first index will be the letter o
05:00 - and the second index will be the letter
05:02 - d and the third index will be the letter
05:04 - e which makes up the word code right so
05:07 - every character has its own index here
05:09 - so every character
05:11 - is an index in the array and every
05:14 - string is just an array of characters as
05:16 - we can see here
05:18 - okay
05:18 - so how do we go about calculating the
05:20 - score then of each word
05:23 - well it will make sense that we loop
05:25 - through every character in the word
05:27 - every every index in the array
05:30 - to
05:31 - find out the score of each letter right
05:34 - so we go through them one by one again
05:36 - and again until the end of the word
05:39 - so it sounds like we need to use some
05:41 - sort of loop to do this to go over each
05:43 - character one by one
05:45 - and let's go ahead and do that
05:48 - so let's code here
05:50 - and here we know we can use a for loop
05:55 - so
05:56 - for let's just set an index let's call
05:58 - it zero
06:00 - i let's initialize it to zero i equals
06:02 - to zero
06:05 - and i equals to zero and we need to keep
06:07 - on going along the length of the word
06:10 - and if you remember there is actually a
06:13 - function that lets us do this sterlin
06:16 - right
06:17 - so let's use this function which is
06:19 - under string.h
06:21 - which tells us the length of the string
06:23 - okay
06:25 - so if you remember how a for loop is is
06:28 - arranged it's first you initialize it to
06:30 - something right
06:31 - and then we give it a condition keep on
06:34 - going as long as
06:36 - so we want to keep on going as long as i
06:39 - is less than
06:41 - the length of the string
06:43 - called word right so i is less than
06:46 - sterling of words so keep on going keep
06:47 - on going as long as i is less than the
06:49 - string length of word
06:52 - and we want to keep on going
06:54 - one by one so we do i plus plus
06:57 - so what it says here is
06:59 - at i equals to zero we initialize it to
07:01 - zero keep on going as long as there's
07:03 - still letters in that word
07:06 - and we want to go one by one so i plus
07:08 - plus
07:09 - so it's
07:10 - initialize
07:11 - condition
07:13 - and then the increment
07:15 - okay
07:16 - so for this what we want to do we want
07:18 - to compute the score right
07:20 - so first things first we know we need to
07:22 - have
07:23 - a variable called score to keep track of
07:25 - the score
07:26 - so let's have an
07:28 - integer of course score can either be 0
07:30 - 1 2 3 so on and so forth it's not going
07:32 - to be a decimal
07:33 - right so let's do in score and let's
07:36 - initialize it to zero
07:38 - so it starts with zero right
07:41 - so here
07:43 - when someone types a letter in the
07:45 - computer what happens
07:47 - so actually if you remember from the
07:49 - lecture
07:51 - every letter has its own position on the
07:53 - ascii table right
07:55 - so we can see here that capital a is 65
07:58 - capital b is 66 c is 67 and so on and so
08:01 - forth and this is according to the ascii
08:03 - table which the computer uses
08:06 - but uh now we can see that actually
08:09 - capital a uppercase a is in the 65th
08:13 - position according to ascii
08:15 - but lowercase a is in the 97th position
08:19 - so uppercase and lowercase a have
08:22 - different positions in the ascii table
08:25 - but when we compare it to the
08:28 - array here the points array
08:30 - it doesn't matter whether it's capital
08:32 - or lowercase
08:33 - points uh a still needs to be in the
08:36 - zeroth index of points right
08:38 - and
08:39 - b whether it's uppercase or lowercase
08:41 - doesn't matter in scrabble we still need
08:43 - it to be in the first index of points
08:46 - right so a needs to be in the zeroth
08:49 - index and b needs to be in the first
08:51 - index
08:53 - and so on and so forth
08:54 - but according to ascii
08:57 - uh it's different right a is 65 and
09:01 - uppercase is 65 and lowercase is 97.
09:04 - so already immediately just like that we
09:06 - know that we need to treat uppercase and
09:09 - lowercase letters differently right
09:12 - so how do we go about doing this we need
09:15 - to convert it from ascii from its
09:16 - position and ascii
09:18 - to its position in the points array
09:21 - okay
09:22 - i hope everything makes sense so far
09:24 - because the computer when we type a
09:26 - letter understands ascii
09:28 - but here we need to make it equal to the
09:29 - we need to make it equal to the position
09:31 - in the points array so how do we go
09:32 - about doing this
09:36 - well
09:37 - we know that uppercase a
09:40 - its position ascii 65
09:43 - its position in points is zero right
09:46 - you can see here a is in the zeroth
09:48 - index of points
09:51 - b is 66 in ascii
09:53 - but in points it's in the first index
09:56 - c
09:57 - 67th in ascii
09:59 - and second in the points array
10:02 - so the difference here is always 65
10:05 - right
10:06 - so it actually is just ascii minus 65 is
10:11 - where it is in the points array
10:13 - so in the 65th position of ascii
10:16 - is the same thing as the zeroth index of
10:18 - the array points
10:20 - okay so that makes sense so let's try to
10:24 - let's try to make a formula here for the
10:26 - score
10:27 - so
10:29 - score equals
10:31 - what is it we need to update it every
10:32 - time so score
10:34 - plus
10:36 - now
10:38 - which uh which position in the points
10:39 - array should it be
10:41 - so points
10:43 - which array should be here
10:45 - it should be
10:47 - whatever the index is an ascii which is
10:50 - word right
10:52 - minus 65
10:55 - okay and i hope that makes sense and
10:56 - i'll just explain it once again
10:59 - so
11:00 - um here what
11:02 - the index of points that it takes is
11:05 - whatever index it actually is from the
11:07 - word
11:08 - minus 65 because this is according to
11:12 - ascii the index of the word is according
11:13 - to ascii right
11:15 - so here
11:17 - uh
11:18 - right like we said it should be
11:21 - an ascii 65 but in points it's zero
11:24 - so that's why we need to do whatever it
11:26 - is whatever the index of the word is
11:29 - minus 65. so index and ascii minus 65
11:33 - will give us the index in the points
11:35 - array okay i hope that makes sense
11:38 - so far
11:39 - but here we can see that this 65 is
11:42 - actually only applicable
11:44 - for the uppercase letters because for
11:46 - the lowercase letters we need to treat
11:47 - them differently right
11:50 - so
11:51 - how do we tell the computer that
11:53 - this only applies
11:55 - this only applies
11:56 - if it's an uppercase letter
11:59 - it sounds like we need to use a
12:01 - condition here
12:02 - which is the if condition right
12:05 - so if
12:07 - sorry just put that within the if
12:09 - condition here
12:12 - so if something is true then this so if
12:15 - it's an uppercase letter then we need to
12:17 - subtract 65.
12:19 - so how do we say it's an uppercase
12:20 - letter
12:22 - well we see the position here it's six
12:24 - uppercase letters in the ascii
12:26 - are 65 to 90 right uppercase is 65 to
12:30 - 90.
12:31 - okay so we can simply say if
12:35 - the index of word
12:37 - is
12:38 - greater than 65
12:42 - and and how how do we say and
12:45 - in the in the this condition it's double
12:48 - ampersands okay
12:49 - so if
12:51 - it's less than 65
12:53 - so if it's greater than 65
12:56 - and it's less than 90 right so this is
12:59 - the way you tell the computer that hey
13:01 - if it's between 65 and 90
13:03 - then
13:04 - do this which makes sense right
13:06 - everything makes sense so far hopefully
13:09 - but now
13:10 - we need to treat lowercase letters
13:12 - separately again because here it's 97
13:15 - a is 97
13:17 - whereas
13:18 - in our points array
13:20 - a is still zero whether it's uppercase
13:22 - or lowercase doesn't matter at all
13:24 - so again
13:26 - now we need to tell the computer if it's
13:28 - lowercase
13:30 - then we need to do the same thing but
13:31 - instead of subtracting 65 how much do
13:33 - you think we should subtract
13:35 - well we should subtract we should
13:37 - subtract 97 right that makes sense
13:41 - and here here's how it works
13:43 - so lowercase a in ascii is 97 but in
13:46 - points it's zero so the difference is
13:48 - 97. same goes with b b is 98 and ascii
13:52 - but in the points area it's one so the
13:53 - difference here is always going to be
13:54 - 97. so for lowercase letters we need to
13:57 - subtract 97.
14:00 - okay so hopefully that makes sense
14:02 - so now we do if
14:06 - sorry
14:11 - if
14:13 - the index
14:14 - is greater than 97
14:18 - and
14:20 - it's less than
14:22 - whatever capital z is let's check real
14:24 - quick
14:26 - whatever lowercase z is a lowercase e is
14:29 - one two two okay
14:31 - so one two two
14:34 - then
14:36 - so if it's greater than 97 and less than
14:39 - one to two which is basically saying if
14:41 - it's an upper case letter
14:42 - then we need to do score
14:44 - equals score that's the way to update
14:46 - the score plus points
14:50 - and the index it should take in the
14:51 - points array is whatever the index is in
14:54 - ascii
14:56 - minus 97 right because lowercase is 97.
15:01 - but here it just it feels a little bit
15:03 - complicated here we're saying like
15:04 - greater than 65 less than 90 and this is
15:07 - completely correct so far logically it's
15:09 - correct
15:10 - but what if there was a simpler way
15:12 - to say if it was uppercase and if it was
15:14 - lowercase rather than checking the ascii
15:17 - values and doing all that
15:18 - well it turns out there is a way to do
15:20 - that
15:21 - and the way we do that is
15:24 - using this
15:25 - function right here
15:27 - so it's called is upper and it's under
15:29 - the header c type dot h and you wouldn't
15:31 - know this unless you actually went
15:32 - through the entire cs50 manual
15:35 - so don't worry at all
15:36 - so but it turns out there is a function
15:38 - called is upper which checks whether or
15:40 - not the function is uh whether or not
15:42 - the letter is uppercase
15:44 - so rather than doing this whole long
15:46 - thing
15:47 - rather than saying between 65 and 90
15:49 - greater than 65 less than 90 doing all
15:51 - this what we can simply do is replace it
15:53 - with the function is upper
15:58 - if is upper
16:02 - word
16:03 - so it checks whether the index is upper
16:06 - case or not whether the character in
16:08 - that index uppercase or not and if it is
16:10 - it'll execute this
16:11 - so it's it's the exact same thing
16:13 - functionally but
16:14 - just it's simpler right if we can use a
16:16 - function why do we have to reinvent the
16:17 - wheel and do it all over again
16:19 - so we can do the same thing here if
16:22 - is lower for this one that's the name of
16:24 - the function
16:26 - word i right if you do it the previous
16:28 - way it's correct as well if you did this
16:29 - way it's correct as well this is just
16:31 - simpler right
16:34 - so we've done all this so far
16:36 - but uh actually we don't just want to
16:38 - return the score uh we don't just want
16:40 - to print the score
16:42 - we need to we calculate the score
16:45 - and then we need to
16:47 - print out the winner right
16:49 - so what you need to do here is return
16:51 - score
16:52 - right
16:54 - um
16:55 - okay
16:56 - i hope everything's clear so far if you
16:58 - don't understand anything please rewind
16:59 - or
17:00 - if anything's unclear at this point
17:02 - please leave a comment down below and
17:03 - i'll be sure to answer every single
17:04 - comment
17:06 - right but hopefully everything's clear
17:09 - here we've calculated the number of
17:10 - points but we don't want to print the
17:12 - score here we want to return the score
17:14 - and we want to print the winner instead
17:17 - so here
17:19 - it's very simple right so
17:21 - what we do is simply
17:25 - print
17:26 - f sorry we need conditions
17:29 - right so
17:30 - if score one is greater than score two
17:37 - we need to print
17:40 - what do we need to print player one wins
17:43 - right player one wins
17:45 - and these are according to the
17:46 - instructions on uh cs50 themselves right
17:49 - so if player if player one's word has
17:51 - more points print player one wins if
17:54 - player two has more points print player
17:56 - two wins
17:57 - and if player one and player two have
17:59 - the same number of points print i okay
18:01 - this is what they tell us to do so this
18:03 - is the way to do it write in code right
18:05 - if score 1 is greater than score 2
18:08 - print player 1 wins just make lot just
18:10 - makes logical sense
18:12 - else
18:14 - if score two is greater than score one
18:18 - what do we do what do we need to print
18:20 - here
18:21 - print
18:23 - player two wins
18:26 - player two wins okay
18:30 - and there's a third scenario here right
18:31 - if it's a tie
18:33 - so else
18:36 - print
18:38 - tie
18:40 - right
18:42 - and here we can write the condition if
18:44 - score 2 is equal to score 1
18:47 - but we don't have to write it because
18:49 - if it's not this if it's if 1 is not
18:52 - greater than 2 and 2 is not greater than
18:54 - 1 it's understood that one is equal to
18:56 - two so they have the same player one and
18:58 - player two at the same number of points
19:00 - so we can write it we can write here
19:02 - else if um
19:04 - score one is equal to score two but we
19:06 - don't have to because it's understood
19:07 - logically
19:09 - right so everything here makes sense so
19:11 - far
19:13 - and let's just go ahead and compile the
19:16 - program
19:17 - see
19:18 - if we did anything wrong make scrabble
19:20 - dot c
19:22 - sorry make scrabble not make sure this
19:24 - how you compile
19:26 - make scrabble oh
19:28 - one error generator here
19:31 - oh okay so in line 27 there is an error
19:36 - and here the problem is okay so we can
19:38 - see here that the
19:39 - variable is defined as score two
19:41 - whereas here i accidentally put a space
19:44 - so that's not gonna count that as it um
19:46 - as the variable so it needs to be
19:48 - exactly what you do what the variable is
19:50 - you need to write it exactly we can't
19:51 - accidentally put a space here space
19:53 - there completely changes the meaning and
19:55 - as you can see it gave us an error there
19:57 - so that was just a silly mistake on my
19:59 - part
20:00 - so let's try to compile again make
20:02 - scrabble okay
20:04 - let's try dots less scrabble to run it
20:07 - okay it asks me player one
20:09 - and let's just go back to our earlier
20:11 - example here
20:12 - bad right player one says bad
20:15 - and player two says def
20:17 - player two wins okay
20:19 - oh one small thing here
20:21 - is that um the problem starts on the
20:23 - same line
20:24 - so let's just make a new line here we do
20:26 - that by doing backslash n
20:29 - so every time we print something we want
20:31 - it to always move to the new line after
20:33 - that it's just it's still correct the
20:35 - code itself is correct it's just that uh
20:37 - for neatness sake you know for style
20:39 - sake
20:41 - so let's see what they tell us to check
20:42 - here what cs50 themselves want us to
20:44 - check okay
20:46 - so let's check the word computer player
20:48 - one says the word computer
20:50 - in all caps and remember we've already
20:52 - accounted for the uppercase and
20:53 - lowercase
20:55 - over here
20:56 - if is upper then minus 65 is if lower
20:59 - than minus 97. so we've already
21:01 - accounted for that
21:02 - so it shouldn't be a problem here that
21:04 - they tell us to check computer with all
21:06 - caps and science with all lowercase
21:10 - so let's make scrabble
21:14 - let's run it
21:15 - scrabble
21:17 - player one
21:19 - puts in the word computer
21:21 - and player two puts in the word science
21:24 - and player one wins
21:26 - and as it should print player one wins
21:28 - okay everything's correct so far
21:31 - let's just go ahead and check
21:34 - just copying and pasting this code here
21:37 - to check whether or not it's correct and
21:39 - this is um from the from the original
21:41 - file itself right this is the link i'll
21:43 - put in the description it's a it's cs50s
21:45 - official link to explain what scrabble
21:47 - is i'm just going to go ahead and check
21:48 - here
21:49 - and while we're doing that guys always
21:51 - remember to check the manual
21:52 - wrong tab screen
21:56 - um right so we use some functions here
21:59 - that are part of the manual right but
22:01 - they didn't explicitly explain it in the
22:03 - lecture
22:04 - so um in your free time just like go
22:06 - over the function right it can save us a
22:08 - lot of time like we did the is upper we
22:11 - had to do a whole bunch of things from
22:12 - ascii and less than 97 greater than one
22:14 - two two all that stuff it could have
22:16 - been saved if we simply knew about the
22:17 - function called is upper right
22:19 - so it's worth it to go through the whole
22:21 - thing
22:22 - go through everything and kind of get a
22:24 - feel for all the functions and
22:25 - everything so that we can save time in
22:27 - the future
22:28 - and we can see here it's done checking
22:31 - and
22:32 - everything is green which means
22:33 - everything is good right
22:34 - everything's correct and if you want to
22:36 - maximize your points you can also put in
22:38 - this code to check the style of your
22:41 - code right how good is your style
22:45 - and okay we have a few errors here
22:48 - okay one one small thing which i forgot
22:51 - to
22:52 - put the space here okay let's run style
22:55 - once again just make sure okay looks
22:56 - good everything's good
22:58 - so
22:59 - please please please after you watch
23:01 - this video don't don't copy this step by
23:03 - step
23:04 - try doing it yourself right everything
23:06 - here is explained logically for you for
23:07 - you to understand please don't copy the
23:09 - solution guys
23:10 - and with that said thank you so much for
23:13 - watching i'm going to be posting
23:15 - i'm going to be posting psats every
23:16 - single week so make sure to
23:19 - subscribe to the channel with
23:20 - notifications on so to be updated and
23:23 - never miss a video let's get through
23:25 - cs50 together guys thanks for watching
23:27 - bye david

Cleaned transcript:

hey guys in today's video we're going to be going over cs50 lab 2 scrabble and this is going to be a stepbystep walkthrough for beginners so let's just jump straight into it so i have this tab open here and this is cs50s explanation on how to do scrabble okay so let's just follow the instructions step by step so first it says to type cd and this is just my vs code here empty cd okay and then it tells us to copy this okay it's going to do exactly what they say and then it says to unzip okay i'm just going to copy and paste what they tell me to do and rm and then type y okay and then type y enter okay finally they say to do cd scrabble okay again i'm just copying and pasting step by step what they tell me to do and finally they say okay type ls ls okay and scrabble.c shows up so that's a good sign and then we do code scrabble.c okay and now lots of distribution code comes up um so this is the code that they give us when we just follow the instructions on their page so this distribution code or code that cs50 gives to us okay um but before we jump into that let's first uh let's first understand what scrabble is actually about what the program is so here's how it works every letter is given a score so letter a is worth one point b is worth three points c is where three points and so on and so forth so how it works is both players player 1 and player 2 will input a word and the player whose word scores more points wins the game okay so let me just give a quick example here so let's say player 1 puts in the word bad so here bad b is worth three points a is worth one point and d is worth two points that gives player one a total of six points player two puts in the word def so d is where two points e is worth one point a is worth one point and f is worth four points so the total score is eight points so here we can see player two has more points than player one so the computer should print out player two wins okay so this is a very basic explanation and that's what we have so far that's what we have to do now let's take a look at the distribution code that they give us so first things first we see here an array called points which has ins okay and here we can see that this is the points assigned to each letter of the alphabet okay so here in the zeroth index points zero is one which means that a is worth one point and in points one the first index is three which means b is worth three points so these are the points assigned to each letter so a is one b is three c is three and so on and so forth right as we said earlier in this talk okay so this is the array that they give us and next up we have a prototype here a function called compute score that takes in a string called word and outputs an integer okay and so far this makes sense because the player is going to give us a word so that's the input and it's going to output an int which is the score right okay so let's go i'm just going through the code step by step by the way uh we don't have to write this code this is the code already given to us so next thing you do is get input from both players okay and how we do that is using the get string function if you remember from earlier problem sets so string word one equals to get string getting some input from the user and the same thing for word two so we're getting two inputs one from player one and one from player two and that's where they type in the word and next thing we have to do is score both words right so in score one equals compute score word one and this is the prototype we saw earlier right so we have to write this function so they don't tell us how to compute the score we have write the program that completes the score right and finally we have to print the winner okay so first thing we have to do here is let's actually write the function so how do we go about that when the player inputs a word we need a specific score to be given to that word right so let's take a look here we should remember that every string is just an array of characters right if you remember from the lecture every string is just an array of characters so let's take an example here the word code so code is a string right the word code is a string but it's actually just an array of characters so let's just say this is an array called word and in the zeroth index will be the letter c and the first index will be the letter o and the second index will be the letter d and the third index will be the letter e which makes up the word code right so every character has its own index here so every character is an index in the array and every string is just an array of characters as we can see here okay so how do we go about calculating the score then of each word well it will make sense that we loop through every character in the word every every index in the array to find out the score of each letter right so we go through them one by one again and again until the end of the word so it sounds like we need to use some sort of loop to do this to go over each character one by one and let's go ahead and do that so let's code here and here we know we can use a for loop so for let's just set an index let's call it zero i let's initialize it to zero i equals to zero and i equals to zero and we need to keep on going along the length of the word and if you remember there is actually a function that lets us do this sterlin right so let's use this function which is under string.h which tells us the length of the string okay so if you remember how a for loop is is arranged it's first you initialize it to something right and then we give it a condition keep on going as long as so we want to keep on going as long as i is less than the length of the string called word right so i is less than sterling of words so keep on going keep on going as long as i is less than the string length of word and we want to keep on going one by one so we do i plus plus so what it says here is at i equals to zero we initialize it to zero keep on going as long as there's still letters in that word and we want to go one by one so i plus plus so it's initialize condition and then the increment okay so for this what we want to do we want to compute the score right so first things first we know we need to have a variable called score to keep track of the score so let's have an integer of course score can either be 0 1 2 3 so on and so forth it's not going to be a decimal right so let's do in score and let's initialize it to zero so it starts with zero right so here when someone types a letter in the computer what happens so actually if you remember from the lecture every letter has its own position on the ascii table right so we can see here that capital a is 65 capital b is 66 c is 67 and so on and so forth and this is according to the ascii table which the computer uses but uh now we can see that actually capital a uppercase a is in the 65th position according to ascii but lowercase a is in the 97th position so uppercase and lowercase a have different positions in the ascii table but when we compare it to the array here the points array it doesn't matter whether it's capital or lowercase points uh a still needs to be in the zeroth index of points right and b whether it's uppercase or lowercase doesn't matter in scrabble we still need it to be in the first index of points right so a needs to be in the zeroth index and b needs to be in the first index and so on and so forth but according to ascii uh it's different right a is 65 and uppercase is 65 and lowercase is 97. so already immediately just like that we know that we need to treat uppercase and lowercase letters differently right so how do we go about doing this we need to convert it from ascii from its position and ascii to its position in the points array okay i hope everything makes sense so far because the computer when we type a letter understands ascii but here we need to make it equal to the we need to make it equal to the position in the points array so how do we go about doing this well we know that uppercase a its position ascii 65 its position in points is zero right you can see here a is in the zeroth index of points b is 66 in ascii but in points it's in the first index c 67th in ascii and second in the points array so the difference here is always 65 right so it actually is just ascii minus 65 is where it is in the points array so in the 65th position of ascii is the same thing as the zeroth index of the array points okay so that makes sense so let's try to let's try to make a formula here for the score so score equals what is it we need to update it every time so score plus now which uh which position in the points array should it be so points which array should be here it should be whatever the index is an ascii which is word right minus 65 okay and i hope that makes sense and i'll just explain it once again so um here what the index of points that it takes is whatever index it actually is from the word minus 65 because this is according to ascii the index of the word is according to ascii right so here uh right like we said it should be an ascii 65 but in points it's zero so that's why we need to do whatever it is whatever the index of the word is minus 65. so index and ascii minus 65 will give us the index in the points array okay i hope that makes sense so far but here we can see that this 65 is actually only applicable for the uppercase letters because for the lowercase letters we need to treat them differently right so how do we tell the computer that this only applies this only applies if it's an uppercase letter it sounds like we need to use a condition here which is the if condition right so if sorry just put that within the if condition here so if something is true then this so if it's an uppercase letter then we need to subtract 65. so how do we say it's an uppercase letter well we see the position here it's six uppercase letters in the ascii are 65 to 90 right uppercase is 65 to 90. okay so we can simply say if the index of word is greater than 65 and and how how do we say and in the in the this condition it's double ampersands okay so if it's less than 65 so if it's greater than 65 and it's less than 90 right so this is the way you tell the computer that hey if it's between 65 and 90 then do this which makes sense right everything makes sense so far hopefully but now we need to treat lowercase letters separately again because here it's 97 a is 97 whereas in our points array a is still zero whether it's uppercase or lowercase doesn't matter at all so again now we need to tell the computer if it's lowercase then we need to do the same thing but instead of subtracting 65 how much do you think we should subtract well we should subtract we should subtract 97 right that makes sense and here here's how it works so lowercase a in ascii is 97 but in points it's zero so the difference is 97. same goes with b b is 98 and ascii but in the points area it's one so the difference here is always going to be 97. so for lowercase letters we need to subtract 97. okay so hopefully that makes sense so now we do if sorry if the index is greater than 97 and it's less than whatever capital z is let's check real quick whatever lowercase z is a lowercase e is one two two okay so one two two then so if it's greater than 97 and less than one to two which is basically saying if it's an upper case letter then we need to do score equals score that's the way to update the score plus points and the index it should take in the points array is whatever the index is in ascii minus 97 right because lowercase is 97. but here it just it feels a little bit complicated here we're saying like greater than 65 less than 90 and this is completely correct so far logically it's correct but what if there was a simpler way to say if it was uppercase and if it was lowercase rather than checking the ascii values and doing all that well it turns out there is a way to do that and the way we do that is using this function right here so it's called is upper and it's under the header c type dot h and you wouldn't know this unless you actually went through the entire cs50 manual so don't worry at all so but it turns out there is a function called is upper which checks whether or not the function is uh whether or not the letter is uppercase so rather than doing this whole long thing rather than saying between 65 and 90 greater than 65 less than 90 doing all this what we can simply do is replace it with the function is upper if is upper word so it checks whether the index is upper case or not whether the character in that index uppercase or not and if it is it'll execute this so it's it's the exact same thing functionally but just it's simpler right if we can use a function why do we have to reinvent the wheel and do it all over again so we can do the same thing here if is lower for this one that's the name of the function word i right if you do it the previous way it's correct as well if you did this way it's correct as well this is just simpler right so we've done all this so far but uh actually we don't just want to return the score uh we don't just want to print the score we need to we calculate the score and then we need to print out the winner right so what you need to do here is return score right um okay i hope everything's clear so far if you don't understand anything please rewind or if anything's unclear at this point please leave a comment down below and i'll be sure to answer every single comment right but hopefully everything's clear here we've calculated the number of points but we don't want to print the score here we want to return the score and we want to print the winner instead so here it's very simple right so what we do is simply print f sorry we need conditions right so if score one is greater than score two we need to print what do we need to print player one wins right player one wins and these are according to the instructions on uh cs50 themselves right so if player if player one's word has more points print player one wins if player two has more points print player two wins and if player one and player two have the same number of points print i okay this is what they tell us to do so this is the way to do it write in code right if score 1 is greater than score 2 print player 1 wins just make lot just makes logical sense else if score two is greater than score one what do we do what do we need to print here print player two wins player two wins okay and there's a third scenario here right if it's a tie so else print tie right and here we can write the condition if score 2 is equal to score 1 but we don't have to write it because if it's not this if it's if 1 is not greater than 2 and 2 is not greater than 1 it's understood that one is equal to two so they have the same player one and player two at the same number of points so we can write it we can write here else if um score one is equal to score two but we don't have to because it's understood logically right so everything here makes sense so far and let's just go ahead and compile the program see if we did anything wrong make scrabble dot c sorry make scrabble not make sure this how you compile make scrabble oh one error generator here oh okay so in line 27 there is an error and here the problem is okay so we can see here that the variable is defined as score two whereas here i accidentally put a space so that's not gonna count that as it um as the variable so it needs to be exactly what you do what the variable is you need to write it exactly we can't accidentally put a space here space there completely changes the meaning and as you can see it gave us an error there so that was just a silly mistake on my part so let's try to compile again make scrabble okay let's try dots less scrabble to run it okay it asks me player one and let's just go back to our earlier example here bad right player one says bad and player two says def player two wins okay oh one small thing here is that um the problem starts on the same line so let's just make a new line here we do that by doing backslash n so every time we print something we want it to always move to the new line after that it's just it's still correct the code itself is correct it's just that uh for neatness sake you know for style sake so let's see what they tell us to check here what cs50 themselves want us to check okay so let's check the word computer player one says the word computer in all caps and remember we've already accounted for the uppercase and lowercase over here if is upper then minus 65 is if lower than minus 97. so we've already accounted for that so it shouldn't be a problem here that they tell us to check computer with all caps and science with all lowercase so let's make scrabble let's run it scrabble player one puts in the word computer and player two puts in the word science and player one wins and as it should print player one wins okay everything's correct so far let's just go ahead and check just copying and pasting this code here to check whether or not it's correct and this is um from the from the original file itself right this is the link i'll put in the description it's a it's cs50s official link to explain what scrabble is i'm just going to go ahead and check here and while we're doing that guys always remember to check the manual wrong tab screen um right so we use some functions here that are part of the manual right but they didn't explicitly explain it in the lecture so um in your free time just like go over the function right it can save us a lot of time like we did the is upper we had to do a whole bunch of things from ascii and less than 97 greater than one two two all that stuff it could have been saved if we simply knew about the function called is upper right so it's worth it to go through the whole thing go through everything and kind of get a feel for all the functions and everything so that we can save time in the future and we can see here it's done checking and everything is green which means everything is good right everything's correct and if you want to maximize your points you can also put in this code to check the style of your code right how good is your style and okay we have a few errors here okay one one small thing which i forgot to put the space here okay let's run style once again just make sure okay looks good everything's good so please please please after you watch this video don't don't copy this step by step try doing it yourself right everything here is explained logically for you for you to understand please don't copy the solution guys and with that said thank you so much for watching i'm going to be posting i'm going to be posting psats every single week so make sure to subscribe to the channel with notifications on so to be updated and never miss a video let's get through cs50 together guys thanks for watching bye david
