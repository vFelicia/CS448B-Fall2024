With timestamps:

00:00 - hey guys in today's video we're going to
00:02 - be going over cs50 problem set to
00:05 - readability and before we jump into that
00:07 - i see that 78 of you guys are actually
00:10 - not subscribed so please subscribe to
00:11 - the channel if you want videos like this
00:13 - every week i'm going to be proposing all
00:15 - the problem sets for cs50 so make sure
00:18 - you do that and let's just jump straight
00:19 - into it okay so first things first as
00:22 - usual uh let's just
00:24 - copy and paste everything we need to get
00:26 - our file ready and this is from cs50's
00:28 - official website again
00:30 - i will leave the link down below
00:33 - so let's just copy and paste
00:36 - exactly what they tell us to do
00:38 - unzip
00:40 - again all i'm doing here is copying and
00:42 - pasting
00:44 - and following their instructions
00:46 - precisely as we've done before
00:50 - now it says cd readability okay change
00:52 - directory readability
00:54 - okay
00:56 - now execute ls
00:58 - okay
01:00 - and finally code readability
01:06 - okay so it gives us a blank file there's
01:08 - no distribution code this time
01:10 - that's fine so what is this program
01:13 - actually about what do we need to do in
01:15 - readability
01:17 - well so first we need to get some text
01:19 - from the user okay so the user has to
01:21 - input some text
01:23 - and then our program should tell the
01:25 - user the reading level of the text okay
01:29 - so
01:30 - the the reading level is calculated
01:32 - based on this formula which cs50 gives
01:34 - to us we don't come up in the formula
01:36 - ourselves
01:37 - so they tell us the formula and this
01:39 - formula will will calculate the reading
01:41 - level right
01:43 - so over here in this formula l
01:46 - is the number of letters per 100 words
01:48 - and again all this information is
01:50 - already given to us right
01:52 - and s
01:53 - is the number of sentences per 100 words
01:56 - so from this formula we will need to
01:58 - calculate the grade level this formula
02:00 - gives us the grade level
02:02 - but in order to get the inputs for this
02:04 - formula we can see here we need the
02:05 - number of letters
02:07 - the number of words
02:09 - and the number of sentences right
02:11 - so just to recap real quick the user
02:14 - inputs some text and from that we need
02:16 - to calculate the grade level
02:18 - but to calculate the grade level we need
02:20 - to know the number of letters words and
02:22 - sentences in the text
02:24 - okay
02:25 - and after we count the words letters and
02:26 - sentences we need to calculate the grade
02:28 - level like we said through this formula
02:30 - and after we calculate the grade level
02:32 - we need to finally print that and that's
02:34 - what the program needs to do okay so it
02:37 - seems pretty okay seems pretty simple so
02:39 - far
02:40 - let's get into the code
02:43 - so first things first as usual let's
02:45 - include our standard io.h
02:48 - as well as our cs50.h
02:55 - and now let's start our program into
02:56 - main void as usual
03:00 - okay so the first thing we need to do
03:02 - here is get some input from the user
03:05 - right
03:06 - so we need to ask for some text
03:08 - so let's just say string
03:11 - text equals to
03:13 - remember how we get some input from the
03:15 - user using cs50 function called
03:17 - getstring
03:19 - so getstring and we need to prompt them
03:21 - for some text
03:24 - okay
03:26 - and once we get the text we need to
03:28 - calculate the number of letters words
03:30 - and sentences in that text
03:32 - so how do we go about doing that
03:34 - let's take it one by one how do we
03:36 - calculate the number of letters
03:38 - in the whole text
03:40 - well if you remember
03:42 - we we're getting a string from them
03:44 - and recall that a string is just an
03:46 - array of characters right
03:49 - so a string is just an array of
03:50 - characters so to find out how many
03:52 - letters are in the text we simply need
03:54 - to loop through each character and check
03:57 - whether or not it's a letter and if it's
03:59 - a letter we need to add one to our
04:01 - counter right
04:02 - so loop through the entire text
04:04 - one by one
04:06 - one index at a time in the array and
04:08 - check is it a letter yes add one is it a
04:11 - letter yes add one okay and that's go on
04:13 - goes on and on and on
04:15 - so first things first we need to make a
04:16 - for loop
04:18 - right because we need a loop through
04:20 - every character in the text
04:22 - and
04:23 - if you've done scrabble this is very
04:24 - simple so i highly highly recommend you
04:26 - go you go to the scrabble first the lab2
04:29 - scrabble and i already have the solution
04:31 - for that so you can check out that video
04:34 - uh but that makes this problem set a
04:36 - whole lot easier
04:37 - okay
04:39 - so we need to make a for loop here
04:42 - and let's set an index let's call it i
04:45 - initialize it to zero
04:47 - and again here we need to make the for
04:49 - loop keep going on and on and on
04:51 - according to the length of the string
04:53 - right
04:54 - so as long as i
04:56 - is less than the string length and we
04:58 - use a function there called sterlin
05:02 - text
05:04 - i plus plus okay so what this for loop
05:07 - here is saying that
05:08 - certain index initialize it to zero
05:11 - keep on going as long as it's less than
05:13 - the length of the string context
05:16 - i plus plus which means go one by one
05:19 - okay
05:21 - so now what do we need to do we need to
05:23 - say if it's a letter
05:27 - if it's a letter
05:29 - then add a letter but how do we
05:31 - calculate whether it's a letter or not
05:33 - well if you recall from scrabble right
05:35 - again it's all going back to scrabble so
05:36 - make sure you do that first
05:39 - according to the ascii table
05:41 - every letter has its own position in the
05:44 - ascii table right
05:46 - so here we can see the letters for
05:49 - uppercase letters
05:50 - it's between 65 and 90. that's their
05:53 - position according to ascii
05:55 - and for lowercase letters is between 97
05:59 - and 122.
06:01 - so unlike scrabble we don't need to
06:03 - distinguish between uppercase and
06:04 - lowercase letters right
06:07 - and all we cares about is is it a letter
06:09 - or not right so if it's a letter we need
06:12 - to add one to our letters uh function
06:15 - actually before we even do this
06:17 - we know that we need to calculate the
06:18 - number of letters words and sentences so
06:21 - let's just go ahead and do that first
06:22 - let's say int
06:24 - letters equals to zero initialize it to
06:26 - zero of course
06:28 - and let's do the same for words into
06:30 - words equal to zero
06:32 - and int sentences
06:34 - equal to zero because we know we need to
06:36 - calculate the number of letters words
06:37 - and sentences right so we call them ends
06:40 - and we initialize them all to zero
06:42 - and now back to our for loop
06:44 - if it's a letter right so we need to
06:46 - check um we need to check the ascii
06:49 - value of whatever the user puts in
06:51 - is it between
06:53 - the numbers is it between the ascii
06:54 - position between 65 and 90
06:57 - or
06:58 - 97 or 122. so if it comes in between any
07:01 - of those that means it's a letter and we
07:03 - need to add one to our letter count
07:06 - right and if you remember how to do that
07:08 - again if you know if you've done
07:09 - scrabble this will be on the tip of your
07:10 - fingers here it's very simple
07:13 - so if
07:15 - the text index
07:17 - is greater than 65
07:21 - and and remember how we say end and this
07:23 - function is with that two ampersands
07:26 - and it's less than 90
07:31 - so this means
07:33 - if
07:34 - this means if it's an uppercase letter
07:35 - right
07:36 - but we also want to account for
07:38 - lowercase letters so when you say if
07:40 - it's between 65 and 90
07:42 - or it's between 97 and 122
07:45 - then we need to increase the letters
07:47 - right
07:48 - so let's do it here and remember how we
07:50 - say or this condition it's with the two
07:52 - lines like this
07:54 - or
07:55 - the index is
07:59 - greater than what is it 97
08:03 - which is the
08:04 - ascii number ascii position of the
08:06 - lowercase a
08:08 - and
08:10 - the index is
08:12 - less than 122 which is the lowercase z
08:16 - then we need to add the letters okay
08:19 - let's see the brackets here okay
08:22 - so if this condition is true
08:25 - then we need to do letters plus plus
08:28 - right
08:29 - which basically means if it's either an
08:32 - uppercase letter
08:33 - or it's a lowercase letter we want to
08:36 - count it as a letter and do letters plus
08:37 - plus
08:38 - okay so that's how we count the number
08:41 - of letters pretty simple
08:42 - but again if you've done scrabble you'll
08:44 - notice something here
08:47 - we don't actually need to do all this
08:49 - there's actually a very simple function
08:51 - that tells us whether or not something's
08:53 - a letter and if you check the cs50
08:55 - manual here
08:58 - okay so i didn't open it up but there's
09:00 - actually a function called
09:02 - is alpha
09:03 - and you wouldn't know this unless you've
09:04 - gone through the manual so don't worry
09:06 - there's not like general knowledge or
09:07 - something
09:08 - so is alpha actually tells you whether
09:11 - it's a letter or not
09:13 - so rather than doing this whole
09:14 - expression here
09:16 - all we can say is if
09:19 - is alpha
09:21 - text
09:22 - if the index of text is an alphanumeric
09:25 - character
09:26 - then add letters plus plus okay
09:28 - so both ways are correct right we can we
09:30 - can do it the ascii way or like uh
09:33 - through the numbers
09:34 - or to simplify our life a bit we can
09:36 - simply do if is alpha right it leads to
09:39 - the same result
09:40 - so nothing fishy there
09:42 - and again uh we view this is alpha
09:45 - function
09:46 - which is in the c type.h at header so we
09:49 - need to include that i'm just gonna copy
09:51 - and paste it here
09:55 - okay and also if you recall this
09:56 - sterling function that goes through the
09:59 - length of the string
10:00 - is actually under a different header
10:04 - and that's string.h so we need to
10:06 - include that as well
10:08 - right i forgot to do it in the beginning
10:09 - but again you have to go through it if
10:11 - you're using a function you need to make
10:13 - sure that you have the header file for
10:14 - the function right where that function
10:16 - is stored okay so sterling is under
10:19 - string.h
10:21 - and is alpha is under c type of h and
10:23 - again we don't have to use this we can
10:25 - do the ascii way if we want to it's just
10:26 - simpler so i'm going to do it this way
10:30 - and next we need to see if it's a word
10:32 - right we've calculated the number of
10:33 - letters now
10:34 - if it's a word
10:36 - well is there any programmatic way we
10:38 - can use to check whether or not
10:39 - something is a word
10:41 - uh i don't know of any way maybe you do
10:44 - um maybe there is a way but personally i
10:46 - don't know anyway
10:47 - so i'm just gonna resort to logic here
10:49 - okay
10:51 - is there any way to count the number of
10:52 - words in c
10:54 - we don't know so let's just use logic
10:56 - instead
10:57 - words are separated by words are
10:59 - separated by spaces so we can simply
11:02 - count the number of spaces in the text
11:04 - right and they'll tell us how many words
11:05 - there are
11:06 - so let's consider this sentence david is
11:08 - my friend
11:10 - so we can see here there is one
11:12 - two
11:13 - three spaces right and there are four
11:15 - words
11:17 - so we can say that assume that
11:20 - um whatever the number of spaces is
11:22 - there's going to be always one more word
11:24 - then there is a space because the spaces
11:26 - are between the words right and this is
11:28 - speaking logically there's no there's no
11:30 - programming here nothing like that
11:32 - just logically
11:33 - three spaces four words right it's gonna
11:35 - be like that in every single sentence
11:36 - because spaces are between words right
11:40 - so here we know that the number of words
11:42 - is just the number of spaces plus one
11:46 - right
11:47 - so what we can do is actually rather
11:50 - than make a formula again
11:52 - we can simply here
11:54 - initialize words to one
11:58 - why are we doing that because
12:00 - let's count the number of spaces in the
12:02 - text instead that's why we're doing that
12:04 - so if
12:06 - else if
12:08 - the text
12:11 - is a space and all i'm doing here is
12:13 - putting the space bar
12:16 - words plus plus
12:18 - so here this is why we need we need to
12:20 - initialize it to one
12:22 - because we're counting the number of
12:23 - spaces in the text
12:26 - and then adding a word every time there
12:27 - is a space so we initialize it to one
12:29 - because there's always one more word
12:31 - that there is a space right
12:33 - so again we've just used logic here not
12:35 - much of
12:36 - programming and it makes sense right it
12:39 - works so it makes sense
12:41 - so we've completed the number of letters
12:44 - using this function and we've filtered
12:46 - the number of words
12:47 - by counting the number of spaces and
12:49 - then adding one to it so we initialize
12:51 - words to one
12:52 - so now what we need to do is count the
12:54 - number of sentences
12:56 - and again with sentences
12:58 - is there a way to do it programmatically
13:00 - i don't think so
13:02 - so let's instead resort to logic
13:04 - right a sentence ends when there is a
13:06 - full stop right a period
13:08 - so we can count the number of full stops
13:10 - and that will tell us how many sentences
13:11 - there are
13:13 - but it doesn't only end in full stops
13:16 - there are also question marks and
13:17 - exclamation marks that define the end of
13:19 - a sentence
13:20 - right
13:21 - so what we can say
13:23 - is if there's either a full stop
13:26 - or a question mark or an exclamation
13:28 - mark we can count that as a sentence
13:30 - right
13:31 - and again this is full using logic here
13:34 - so all we need to do is write it else if
13:39 - text contains right if the array call
13:42 - text
13:43 - has a full stop
13:45 - right
13:48 - or
13:49 - if the text contains
13:54 - a question mark right this denotes the
13:56 - end of a sentence
13:58 - or the third thing
14:00 - is if the text contains
14:03 - an exclamation mark
14:05 - what do we need to do
14:07 - we need to say sentences
14:09 - plus plus
14:11 - which basically means if the text
14:13 - contains a full stop or a question mark
14:15 - or exclamation mark
14:16 - add the number of sentences right
14:18 - because it's equal if there's one full
14:20 - stop it means there's one sentence right
14:23 - and so on and so forth with these other
14:25 - characters as well
14:26 - okay so it all makes sense here we've
14:28 - calculated the number of letters the
14:30 - number of words and the number of
14:31 - sentences
14:33 - but
14:34 - we don't actually want to print out the
14:36 - number of letters in sentences
14:39 - we need to use this to instead calculate
14:41 - the grade level right
14:44 - and the grade level we were given this
14:46 - formula here by cs50 so let's just copy
14:48 - and paste that
14:50 - into our program okay
14:52 - and index here obviously will be an int
14:54 - because we can't have a grade 5.4 or 4.8
14:58 - no it's going to be an end
15:00 - so int index equals to this formula
15:04 - whatever it is
15:06 - and l
15:07 - here l is this is again this is what
15:10 - they told us they told us that l is the
15:12 - number of letters
15:13 - per 100 words okay
15:16 - so what we can do simply
15:17 - and
15:18 - here we can see that it's definitely
15:20 - going to be a decimal right because here
15:23 - it's full of decimals and the letter of
15:25 - number of letters per 100 words
15:27 - is definitely going to be a decimal
15:29 - so we have to call it a float right not
15:32 - an int
15:33 - so float l
15:34 - equals
15:37 - number of letters per 100 words right so
15:39 - letters
15:40 - divided by words times a hundred okay
15:44 - float l equals letters divided by words
15:46 - times hundred
15:47 - and s remember here this s is the number
15:50 - of sentences per hundred words
15:53 - so again that's going to be a decimal we
15:54 - call it float
15:56 - so
15:57 - sentences
15:59 - divided by words
16:02 - times 100 okay because it's per 100
16:04 - words
16:06 - okay so we've calculated everything here
16:10 - it's using all decimals here right zero
16:12 - point zero five eight eight and again l
16:14 - is a float and again s is a float
16:16 - so how is it going to give us an int
16:18 - it'll give us uh
16:20 - it does not give us an it'll give us a
16:21 - float right
16:23 - so we want to do
16:24 - is whatever we get whatever result we
16:27 - get from here we want to round it off
16:29 - okay
16:30 - and how we do that
16:31 - is there's actually a function
16:34 - called round okay and again you wouldn't
16:36 - know this this is not general knowledge
16:38 - this is something you would only know by
16:39 - reading through the cs50 manual
16:42 - okay this function called round and it's
16:45 - under the header file called math.h so
16:47 - let's first include that
16:51 - okay
16:53 - and now let's go back here so what we
16:55 - need to do is we need to round off this
16:57 - expression
16:59 - so we simply do round
17:02 - and put that in the rounds brackets
17:04 - okay
17:05 - so into index equals to round whatever
17:07 - this formula is right the formula given
17:09 - to us
17:10 - whatever whatever result it gives we
17:11 - need to round it off and that'll be the
17:14 - index or the greater level right
17:17 - okay um so it may not seem obvious there
17:20 - is actually an issue here okay and i got
17:22 - this wrong the first time as well so be
17:24 - attracted to this
17:26 - so letters
17:28 - is actually
17:30 - an end right
17:33 - and words is an int as well
17:36 - so even though when you divide two ins
17:38 - it can give us a float right
17:41 - but since here we can't we count them
17:44 - both as ins the result according to c
17:47 - will give us an int as well but over
17:49 - here we don't want it end we actually
17:51 - want a float right so when you divide
17:54 - two ins c is going to give us an int
17:56 - okay
17:58 - that's just the way c works even though
17:59 - the answer is actually
18:01 - a decimal
18:02 - so what we can do here
18:05 - is we can actually
18:07 - just cast words discussed anything here
18:11 - as a float okay just so that it gives us
18:14 - an answer as a float
18:16 - right so what we do here is how we cast
18:18 - something
18:19 - so casting is basically like you're just
18:20 - on the computer temporarily count words
18:24 - as a float okay
18:26 - so here we can do that by doing this so
18:28 - float words even though even the words
18:30 - is an end we know that
18:32 - we just want the computer to give us a
18:34 - float over here so we need to cast words
18:37 - as a float over here
18:38 - and um
18:39 - we can also cast letters as a float that
18:41 - uh makes no difference so we can do it
18:44 - for both or we can do it for either one
18:46 - as long as at least one variable over
18:48 - here
18:49 - is a float the computer can give us a
18:51 - float okay
18:53 - so we can do it for both
18:55 - we don't have to do it for both you can
18:57 - do it actually for either one but let's
18:58 - just do it for both or in this case
19:01 - okay
19:02 - so we've calculated the index
19:05 - but now what we finally need to do is we
19:07 - need to print the index right
19:09 - and what grade levels do they want us to
19:11 - give let's just take a look real quick
19:14 - this is the official cs50 uh guide
19:18 - so if the index is 16 or higher
19:22 - if the result is 16 or higher right from
19:23 - the formula
19:25 - we need to do grade we output 16 plus
19:28 - grade 16 plus is what it needs to print
19:31 - and
19:32 - if the index number is less than one so
19:35 - if it gives us a number less than one
19:37 - our program should output before grade
19:38 - one
19:40 - okay
19:41 - and
19:42 - if it's between grade 1 and 16 then we
19:44 - need to actually calculate we need to
19:47 - print whatever grade it actually is so
19:49 - grade 2 or grade 8 or whatever it is
19:52 - okay
19:53 - so
19:54 - now comes the simple part we just need
19:55 - to print
19:57 - so if
20:00 - the index is less than one
20:03 - what do we need to do
20:05 - we need to print
20:07 - they wanted us to print before grade
20:10 - 1
20:11 - okay
20:15 - and
20:15 - what if it's greater than 16 right if
20:18 - index now is greater than 16
20:23 - we need to print
20:26 - grade 16 plus and this is what they tell
20:28 - us to print right
20:31 - and finally if it's between grade 1 and
20:34 - 16
20:36 - sorry we need to else if here
20:39 - else
20:43 - print what do we need to print we need
20:44 - to print whatever grade it actually is
20:46 - right
20:47 - so grade
20:48 - and we want to print whatever the index
20:51 - answers from here so we use a
20:52 - placeholder first right
20:55 - percent i that's a placeholder for an
20:57 - integer
21:01 - comma
21:02 - index
21:03 - so it tells us here that over here in
21:05 - the percent i we print the value of
21:07 - index which is calculated over here
21:10 - and again so if it's if the index is
21:13 - less than one print before grade one if
21:15 - the index is greater than 16 pre print
21:18 - create 16 plus
21:20 - else and again over here we can actually
21:22 - write if index is
21:24 - between 1 and 16 but we don't actually
21:27 - have to because if it's not less than 1
21:29 - and it's not greater than 16 it's
21:31 - obviously in between 1 and 16. so we
21:33 - didn't we don't need to write that again
21:35 - the computer already understands that
21:38 - okay and everything looks good so far
21:40 - over here
21:41 - let's just
21:43 - make sure that it is so let's try to
21:45 - make readability
21:47 - try to compile it
21:49 - oh
21:50 - errors errors okay um i've got the
21:53 - semicolon
21:54 - over here
21:57 - and over here
21:59 - okay
22:00 - and again guys make sure you do all this
22:02 - like
22:04 - small errors like that can stop the
22:05 - program from running and again i forgot
22:07 - another semicolon it's very important
22:09 - guys it's going to give you errors
22:11 - so let's try that again make readability
22:14 - okay and now it runs
22:16 - so let's try to run it it has compiled
22:19 - does slash readability and ask me for
22:21 - some text okay
22:23 - so let's
22:25 - see what examples they want us to put
22:26 - here
22:27 - let's just try a random one let's copy
22:30 - this
22:31 - in my younger and more vulnerable years
22:33 - okay so it's supposed to print out grade
22:34 - seven if everything's correct
22:36 - that's my text
22:38 - just copy and pasted it grade seven okay
22:41 - um so it printed out the correct grade
22:42 - but again um
22:44 - not very pretty because the command
22:46 - again starts on the same line
22:48 - so let's print a new line
22:51 - and we use that by doing backslash n to
22:53 - create a new line and let's do that for
22:55 - all outcomes
22:58 - okay
22:59 - and let's recompile make readability
23:01 - again
23:02 - okay dot slash readability to run it
23:06 - and let's try another random example
23:08 - here let's try let's see this one
23:11 - a large class of computational problems
23:13 - involve the determination blah blah blah
23:15 - blah blah let's copy and paste that
23:17 - grade 16 plus okay so our program seems
23:19 - to be working well okay so guys i'm
23:21 - going to be posting videos every single
23:22 - week so please make sure to subscribe to
23:24 - the channel with notifications on to be
23:26 - updated every time i post where to get
23:28 - through this course together make sure
23:30 - to leave a like on this video if it
23:31 - helped and thank you so much for
23:32 - watching guys bye david

Cleaned transcript:

hey guys in today's video we're going to be going over cs50 problem set to readability and before we jump into that i see that 78 of you guys are actually not subscribed so please subscribe to the channel if you want videos like this every week i'm going to be proposing all the problem sets for cs50 so make sure you do that and let's just jump straight into it okay so first things first as usual uh let's just copy and paste everything we need to get our file ready and this is from cs50's official website again i will leave the link down below so let's just copy and paste exactly what they tell us to do unzip again all i'm doing here is copying and pasting and following their instructions precisely as we've done before now it says cd readability okay change directory readability okay now execute ls okay and finally code readability okay so it gives us a blank file there's no distribution code this time that's fine so what is this program actually about what do we need to do in readability well so first we need to get some text from the user okay so the user has to input some text and then our program should tell the user the reading level of the text okay so the the reading level is calculated based on this formula which cs50 gives to us we don't come up in the formula ourselves so they tell us the formula and this formula will will calculate the reading level right so over here in this formula l is the number of letters per 100 words and again all this information is already given to us right and s is the number of sentences per 100 words so from this formula we will need to calculate the grade level this formula gives us the grade level but in order to get the inputs for this formula we can see here we need the number of letters the number of words and the number of sentences right so just to recap real quick the user inputs some text and from that we need to calculate the grade level but to calculate the grade level we need to know the number of letters words and sentences in the text okay and after we count the words letters and sentences we need to calculate the grade level like we said through this formula and after we calculate the grade level we need to finally print that and that's what the program needs to do okay so it seems pretty okay seems pretty simple so far let's get into the code so first things first as usual let's include our standard io.h as well as our cs50.h and now let's start our program into main void as usual okay so the first thing we need to do here is get some input from the user right so we need to ask for some text so let's just say string text equals to remember how we get some input from the user using cs50 function called getstring so getstring and we need to prompt them for some text okay and once we get the text we need to calculate the number of letters words and sentences in that text so how do we go about doing that let's take it one by one how do we calculate the number of letters in the whole text well if you remember we we're getting a string from them and recall that a string is just an array of characters right so a string is just an array of characters so to find out how many letters are in the text we simply need to loop through each character and check whether or not it's a letter and if it's a letter we need to add one to our counter right so loop through the entire text one by one one index at a time in the array and check is it a letter yes add one is it a letter yes add one okay and that's go on goes on and on and on so first things first we need to make a for loop right because we need a loop through every character in the text and if you've done scrabble this is very simple so i highly highly recommend you go you go to the scrabble first the lab2 scrabble and i already have the solution for that so you can check out that video uh but that makes this problem set a whole lot easier okay so we need to make a for loop here and let's set an index let's call it i initialize it to zero and again here we need to make the for loop keep going on and on and on according to the length of the string right so as long as i is less than the string length and we use a function there called sterlin text i plus plus okay so what this for loop here is saying that certain index initialize it to zero keep on going as long as it's less than the length of the string context i plus plus which means go one by one okay so now what do we need to do we need to say if it's a letter if it's a letter then add a letter but how do we calculate whether it's a letter or not well if you recall from scrabble right again it's all going back to scrabble so make sure you do that first according to the ascii table every letter has its own position in the ascii table right so here we can see the letters for uppercase letters it's between 65 and 90. that's their position according to ascii and for lowercase letters is between 97 and 122. so unlike scrabble we don't need to distinguish between uppercase and lowercase letters right and all we cares about is is it a letter or not right so if it's a letter we need to add one to our letters uh function actually before we even do this we know that we need to calculate the number of letters words and sentences so let's just go ahead and do that first let's say int letters equals to zero initialize it to zero of course and let's do the same for words into words equal to zero and int sentences equal to zero because we know we need to calculate the number of letters words and sentences right so we call them ends and we initialize them all to zero and now back to our for loop if it's a letter right so we need to check um we need to check the ascii value of whatever the user puts in is it between the numbers is it between the ascii position between 65 and 90 or 97 or 122. so if it comes in between any of those that means it's a letter and we need to add one to our letter count right and if you remember how to do that again if you know if you've done scrabble this will be on the tip of your fingers here it's very simple so if the text index is greater than 65 and and remember how we say end and this function is with that two ampersands and it's less than 90 so this means if this means if it's an uppercase letter right but we also want to account for lowercase letters so when you say if it's between 65 and 90 or it's between 97 and 122 then we need to increase the letters right so let's do it here and remember how we say or this condition it's with the two lines like this or the index is greater than what is it 97 which is the ascii number ascii position of the lowercase a and the index is less than 122 which is the lowercase z then we need to add the letters okay let's see the brackets here okay so if this condition is true then we need to do letters plus plus right which basically means if it's either an uppercase letter or it's a lowercase letter we want to count it as a letter and do letters plus plus okay so that's how we count the number of letters pretty simple but again if you've done scrabble you'll notice something here we don't actually need to do all this there's actually a very simple function that tells us whether or not something's a letter and if you check the cs50 manual here okay so i didn't open it up but there's actually a function called is alpha and you wouldn't know this unless you've gone through the manual so don't worry there's not like general knowledge or something so is alpha actually tells you whether it's a letter or not so rather than doing this whole expression here all we can say is if is alpha text if the index of text is an alphanumeric character then add letters plus plus okay so both ways are correct right we can we can do it the ascii way or like uh through the numbers or to simplify our life a bit we can simply do if is alpha right it leads to the same result so nothing fishy there and again uh we view this is alpha function which is in the c type.h at header so we need to include that i'm just gonna copy and paste it here okay and also if you recall this sterling function that goes through the length of the string is actually under a different header and that's string.h so we need to include that as well right i forgot to do it in the beginning but again you have to go through it if you're using a function you need to make sure that you have the header file for the function right where that function is stored okay so sterling is under string.h and is alpha is under c type of h and again we don't have to use this we can do the ascii way if we want to it's just simpler so i'm going to do it this way and next we need to see if it's a word right we've calculated the number of letters now if it's a word well is there any programmatic way we can use to check whether or not something is a word uh i don't know of any way maybe you do um maybe there is a way but personally i don't know anyway so i'm just gonna resort to logic here okay is there any way to count the number of words in c we don't know so let's just use logic instead words are separated by words are separated by spaces so we can simply count the number of spaces in the text right and they'll tell us how many words there are so let's consider this sentence david is my friend so we can see here there is one two three spaces right and there are four words so we can say that assume that um whatever the number of spaces is there's going to be always one more word then there is a space because the spaces are between the words right and this is speaking logically there's no there's no programming here nothing like that just logically three spaces four words right it's gonna be like that in every single sentence because spaces are between words right so here we know that the number of words is just the number of spaces plus one right so what we can do is actually rather than make a formula again we can simply here initialize words to one why are we doing that because let's count the number of spaces in the text instead that's why we're doing that so if else if the text is a space and all i'm doing here is putting the space bar words plus plus so here this is why we need we need to initialize it to one because we're counting the number of spaces in the text and then adding a word every time there is a space so we initialize it to one because there's always one more word that there is a space right so again we've just used logic here not much of programming and it makes sense right it works so it makes sense so we've completed the number of letters using this function and we've filtered the number of words by counting the number of spaces and then adding one to it so we initialize words to one so now what we need to do is count the number of sentences and again with sentences is there a way to do it programmatically i don't think so so let's instead resort to logic right a sentence ends when there is a full stop right a period so we can count the number of full stops and that will tell us how many sentences there are but it doesn't only end in full stops there are also question marks and exclamation marks that define the end of a sentence right so what we can say is if there's either a full stop or a question mark or an exclamation mark we can count that as a sentence right and again this is full using logic here so all we need to do is write it else if text contains right if the array call text has a full stop right or if the text contains a question mark right this denotes the end of a sentence or the third thing is if the text contains an exclamation mark what do we need to do we need to say sentences plus plus which basically means if the text contains a full stop or a question mark or exclamation mark add the number of sentences right because it's equal if there's one full stop it means there's one sentence right and so on and so forth with these other characters as well okay so it all makes sense here we've calculated the number of letters the number of words and the number of sentences but we don't actually want to print out the number of letters in sentences we need to use this to instead calculate the grade level right and the grade level we were given this formula here by cs50 so let's just copy and paste that into our program okay and index here obviously will be an int because we can't have a grade 5.4 or 4.8 no it's going to be an end so int index equals to this formula whatever it is and l here l is this is again this is what they told us they told us that l is the number of letters per 100 words okay so what we can do simply and here we can see that it's definitely going to be a decimal right because here it's full of decimals and the letter of number of letters per 100 words is definitely going to be a decimal so we have to call it a float right not an int so float l equals number of letters per 100 words right so letters divided by words times a hundred okay float l equals letters divided by words times hundred and s remember here this s is the number of sentences per hundred words so again that's going to be a decimal we call it float so sentences divided by words times 100 okay because it's per 100 words okay so we've calculated everything here it's using all decimals here right zero point zero five eight eight and again l is a float and again s is a float so how is it going to give us an int it'll give us uh it does not give us an it'll give us a float right so we want to do is whatever we get whatever result we get from here we want to round it off okay and how we do that is there's actually a function called round okay and again you wouldn't know this this is not general knowledge this is something you would only know by reading through the cs50 manual okay this function called round and it's under the header file called math.h so let's first include that okay and now let's go back here so what we need to do is we need to round off this expression so we simply do round and put that in the rounds brackets okay so into index equals to round whatever this formula is right the formula given to us whatever whatever result it gives we need to round it off and that'll be the index or the greater level right okay um so it may not seem obvious there is actually an issue here okay and i got this wrong the first time as well so be attracted to this so letters is actually an end right and words is an int as well so even though when you divide two ins it can give us a float right but since here we can't we count them both as ins the result according to c will give us an int as well but over here we don't want it end we actually want a float right so when you divide two ins c is going to give us an int okay that's just the way c works even though the answer is actually a decimal so what we can do here is we can actually just cast words discussed anything here as a float okay just so that it gives us an answer as a float right so what we do here is how we cast something so casting is basically like you're just on the computer temporarily count words as a float okay so here we can do that by doing this so float words even though even the words is an end we know that we just want the computer to give us a float over here so we need to cast words as a float over here and um we can also cast letters as a float that uh makes no difference so we can do it for both or we can do it for either one as long as at least one variable over here is a float the computer can give us a float okay so we can do it for both we don't have to do it for both you can do it actually for either one but let's just do it for both or in this case okay so we've calculated the index but now what we finally need to do is we need to print the index right and what grade levels do they want us to give let's just take a look real quick this is the official cs50 uh guide so if the index is 16 or higher if the result is 16 or higher right from the formula we need to do grade we output 16 plus grade 16 plus is what it needs to print and if the index number is less than one so if it gives us a number less than one our program should output before grade one okay and if it's between grade 1 and 16 then we need to actually calculate we need to print whatever grade it actually is so grade 2 or grade 8 or whatever it is okay so now comes the simple part we just need to print so if the index is less than one what do we need to do we need to print they wanted us to print before grade 1 okay and what if it's greater than 16 right if index now is greater than 16 we need to print grade 16 plus and this is what they tell us to print right and finally if it's between grade 1 and 16 sorry we need to else if here else print what do we need to print we need to print whatever grade it actually is right so grade and we want to print whatever the index answers from here so we use a placeholder first right percent i that's a placeholder for an integer comma index so it tells us here that over here in the percent i we print the value of index which is calculated over here and again so if it's if the index is less than one print before grade one if the index is greater than 16 pre print create 16 plus else and again over here we can actually write if index is between 1 and 16 but we don't actually have to because if it's not less than 1 and it's not greater than 16 it's obviously in between 1 and 16. so we didn't we don't need to write that again the computer already understands that okay and everything looks good so far over here let's just make sure that it is so let's try to make readability try to compile it oh errors errors okay um i've got the semicolon over here and over here okay and again guys make sure you do all this like small errors like that can stop the program from running and again i forgot another semicolon it's very important guys it's going to give you errors so let's try that again make readability okay and now it runs so let's try to run it it has compiled does slash readability and ask me for some text okay so let's see what examples they want us to put here let's just try a random one let's copy this in my younger and more vulnerable years okay so it's supposed to print out grade seven if everything's correct that's my text just copy and pasted it grade seven okay um so it printed out the correct grade but again um not very pretty because the command again starts on the same line so let's print a new line and we use that by doing backslash n to create a new line and let's do that for all outcomes okay and let's recompile make readability again okay dot slash readability to run it and let's try another random example here let's try let's see this one a large class of computational problems involve the determination blah blah blah blah blah let's copy and paste that grade 16 plus okay so our program seems to be working well okay so guys i'm going to be posting videos every single week so please make sure to subscribe to the channel with notifications on to be updated every time i post where to get through this course together make sure to leave a like on this video if it helped and thank you so much for watching guys bye david
