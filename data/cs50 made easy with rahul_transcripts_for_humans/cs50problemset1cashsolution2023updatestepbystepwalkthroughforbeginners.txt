With timestamps:

00:00 - hey guys in today's video we're going to
00:02 - be going over cs50 problem set one cache
00:05 - and this is the updated version for
00:06 - 2022. but before we jump into it please
00:09 - make sure you're subscribed to the
00:10 - channel with notifications on because
00:12 - i'm going to be posting videos every
00:14 - single week so you don't want to miss
00:15 - one let's jump straight into cash
00:18 - okay
00:19 - so in cash the whole objective
00:22 - is we need to ask some input from the
00:24 - user for some number of sense
00:26 - and then our program needs to output
00:29 - the not the minimum number of coins it
00:31 - would take to make up that amount of
00:33 - sense
00:34 - okay so what i said may sound confusing
00:35 - so let's jump straight into an example
00:38 - so let's say the user type in 68
00:41 - okay
00:43 - so sensod is 68.
00:46 - so now we need to tell the user how many
00:47 - coins how many coins we need to make up
00:50 - 68 cents
00:52 - assuming that there are only quarters
00:53 - dimes nickels and pennies okay
00:57 - so the number of quarters is needed how
00:58 - do we go about this here
01:00 - well we can see first of all that we
01:02 - will need quarters because again let's
01:04 - compare here
01:05 - so 68 cents
01:07 - and 68 is greater than 25
01:11 - so this means that we will need a
01:13 - quarter we need at least one quarter so
01:15 - let's see 68 minus 25 will give us 43
01:20 - and then
01:21 - we compare it again
01:23 - is 43 greater than 25 well yes it is so
01:27 - we can use another quarter
01:29 - so we can do
01:31 - 43 minus 25 now
01:34 - and that will give us 18.
01:36 - okay and now we can check again can we
01:38 - use another quarter 18 cents left
01:41 - okay no because 18 is smaller than 25 so
01:44 - we cannot use another quarter
01:47 - so how many quarters do we need we need
01:49 - one two quarters okay
01:52 - and now let's move on to dimes so we
01:54 - know that the remainder is now 18 cents
01:55 - left
01:56 - so
01:57 - 18 is 18 greater than 10 yes so we can
02:00 - use a dime
02:02 - and then leave us with eight cents
02:03 - remaining
02:04 - and now we check it is not greater than
02:07 - 10. it is smaller than 10 so we can't
02:09 - use another dime
02:10 - which means we only need a total of one
02:12 - dime
02:14 - right one tenth cent coin
02:16 - and now there's eight eight cents
02:17 - remaining
02:18 - so eight is greater than five so we can
02:21 - use a nickel right and then let's minus
02:23 - five so the remainder is now three
02:26 - is three greater than five no it's not
02:28 - so we can't use any more nickels
02:30 - right so we only need one nickel here
02:33 - and what about here so now we have three
02:35 - cents remaining how many pennies do we
02:37 - need to make three cents
02:38 - well we'll need three pennies right
02:41 - because it's one cent each
02:43 - so we'll need three pennies and then
02:45 - they'll leave us with a remainder of
02:46 - zero
02:47 - okay
02:48 - so we need a rule of two quarters one
02:50 - dime one nickel and three pennies to
02:53 - make up 68 cents so that's a total of
02:57 - two plus one plus one plus three will
02:58 - give us seven
02:59 - okay
03:00 - so basically now the program is
03:03 - when the user inputs 68
03:05 - our program needs to print out seven
03:08 - which is a which is the minimum number
03:09 - of coins needed right
03:11 - okay so the logic here is very simple
03:14 - now let's put it into code
03:16 - so this is the distribution code that
03:18 - cs50 gives us
03:20 - and okay let's go through the
03:21 - distribution code real quick
03:23 - so on top obviously we have our header
03:25 - files cs50.h and centerdio.h
03:28 - and then we have some functions
03:30 - called okay this is prototype so let's
03:33 - go into the main code
03:34 - so first things first is ask how many
03:36 - cents the customer is owed right so
03:39 - first to get some input from the user
03:42 - right similar to mario we know how to
03:43 - get input from the user
03:45 - okay now let's go further into the
03:47 - program and it says
03:48 - in quarters equals calculate quarters
03:51 - okay
03:52 - so this is what we need
03:54 - uh this is a function called calculate
03:56 - quarters but they don't tell us how to
03:58 - calculate it and that's what we need to
03:59 - write that's the part that we need to
04:01 - write of the code so we need to make
04:03 - this function calculate quarters right
04:06 - and then it says cents equals to cents
04:09 - minus quarters times 25. so this may
04:12 - seem confusing at first but it's it's
04:15 - exactly what we actually just did
04:17 - so since it's just updating the value of
04:19 - cents
04:20 - so again let's say it's 68 right
04:23 - so 68 minus the number of quarters times
04:27 - 25.
04:28 - so what we did here
04:30 - is basically this thing says we use two
04:32 - quarters here so it's just 68 minus 2
04:35 - times 25 right it's the same thing what
04:37 - we did here it's just updating the value
04:39 - of cents
04:40 - and then after that we move on to dimes
04:43 - so just remember in our example earlier
04:45 - after we used two quarters 68 minus 50
04:48 - was 18 right according to our example
04:51 - so now we move on to dimes and again we
04:52 - need to they give us a function
04:54 - calculate dimes but they don't tell us
04:56 - what's in that function so that's what
04:57 - we need to write again
04:59 - and then it does sense equals cents
05:02 - minus dimes times 10 right it's exactly
05:04 - what we did earlier so for example let's
05:06 - say it was 18 from our earlier example
05:08 - 18 minus one times ten right earlier was
05:12 - two quarters here it was two times
05:14 - twenty five here it's one times ten
05:16 - because we only use one dime in our
05:17 - example
05:18 - okay and then it goes and does this same
05:20 - thing for nickels times five again
05:22 - and pennies times one obviously so
05:25 - basically they need to calculate the
05:26 - total number of quarters dimes nickels
05:28 - and pennies in order to make up the
05:31 - the cents owed right
05:33 - and then finally
05:35 - coins into coins okay so they have an
05:37 - integer called coins and that just sums
05:39 - up the total of quarters times nickels
05:41 - and pennies right so as we said in our
05:43 - example earlier this is the seven
05:45 - right when user input 68 our program
05:47 - outputs a seven
05:49 - so then
05:51 - finally it just prints out the total
05:52 - number of coins
05:54 - okay seems simple enough
05:56 - so how do we actually get into it
05:59 - so first things first we need to write a
06:01 - function to get sends right to get an
06:03 - input from the user
06:05 - and if you remember how we get something
06:07 - from the user is using the get
06:08 - function right okay
06:10 - so first things first let's make an
06:12 - integer let's call it sense incense
06:16 - okay
06:18 - and now we want to get some input from
06:19 - the user
06:20 - and we know that the input one's going
06:22 - to be an integer right because we want
06:24 - to get a number from the user so we use
06:26 - get int
06:27 - okay so let's use um let's call it
06:31 - incense
06:33 - oh sorry we don't need to say anymore so
06:35 - let's say sense equals to get underscore
06:38 - in right that's how we get some input
06:39 - from the user
06:40 - and let's prompt the user and say sends
06:43 - ode
06:44 - all right
06:46 - okay
06:48 - but now again there's a slight problem
06:50 - here because just like mario there is a
06:52 - condition
06:53 - right we can't have the user inputting a
06:56 - negative number because we only want
06:58 - positive numbers right so if the user
07:00 - inputs a negative number we want that we
07:02 - want to keep on repeating we want to
07:04 - keep on asking them since old sense oh
07:06 - it sends out until they put in a
07:07 - positive number so we want to reject all
07:09 - negative numbers
07:10 - so for that it sounds like we can use a
07:12 - loop right
07:13 - so let's go ahead and use a do while
07:15 - loop so do the following
07:18 - right
07:20 - while a certain condition is true
07:22 - and now we want to put this in our do
07:24 - while loop because if there is a
07:26 - condition right
07:27 - so from the user
07:29 - for cents owed
07:31 - while they put in a negative number
07:33 - right so while sense is less than zero
07:37 - so what this means is
07:38 - keep on asking the user for cents owed
07:41 - while they're putting in a negative
07:42 - number so it's going to keep on
07:43 - prompting them for the number of cents
07:45 - owed until they actually put in a
07:47 - positive number which is what we want
07:48 - right
07:50 - okay so this is pretty similar to mario
07:51 - pretty simple so far um
07:54 - and finally we want to return now we
07:56 - don't want to print the number of cents
07:58 - right that's what we got from the user
07:59 - we don't want to return zero we want to
08:01 - return cents
08:02 - okay
08:03 - everything makes sense logically so far
08:06 - and finally now here we want to
08:07 - calculate the number of quarters right
08:10 - okay
08:11 - so again let's use the similar logic
08:13 - like we did in our example here
08:15 - um but first of all let's make an
08:17 - integer
08:19 - right int quarters
08:21 - and let's set it to zero because it
08:23 - starts at zero obviously
08:25 - so
08:26 - now here what's the logic
08:29 - uh
08:30 - let's say like it's we need a loop for
08:32 - sure because we need to keep checking
08:34 - whether it's greater than 25 or not
08:36 - right like 68 minus is 68 greater than
08:39 - 25 first of all
08:40 - yes it is right that's why we use a
08:42 - quarter and we minus 25
08:45 - and then our second iteration we have to
08:46 - check
08:47 - is 43 greater than 25
08:50 - and if it is then we need to minus 25
08:52 - cents and add another quarter right
08:55 - so over here we use two quarters
08:57 - so how do we translate this into code
09:00 - well let's go ahead and try we know we
09:02 - need a loop let's use a while loop
09:06 - so while
09:09 - sense is greater than or equal to 25
09:14 - right what do we need to do
09:16 - we want to update the value of sense to
09:18 - sense minus 25
09:20 - and
09:21 - quarters plus plus which means add a
09:23 - quarter right so we've not come across
09:25 - this syntax before but it basically
09:27 - means add a quarter so it starts at zero
09:30 - and every time this happens add a
09:32 - quarter okay
09:34 - so
09:35 - again what's the logic here let's say
09:37 - let's use an example so let's say it was
09:39 - 68 again so while sense is greater so
09:42 - while 68 is 68 greater than 25
09:45 - yes it is so we update the value so we
09:48 - do 68 minus 25 right
09:51 - and then add a quarter because we've
09:53 - already minus 25 so that's one quarter
09:56 - and now the new value is 43.
09:58 - so we check again is 43 greater than 25
10:01 - yes it is so again we minus 43 minus 25
10:05 - and add a quarter so that puts us at two
10:07 - quarters now
10:08 - and then again check again uh the new
10:10 - value is 18.
10:12 - so is 18 greater than 25 no it's not so
10:15 - now we just want to return quarters
10:19 - and then move on to dimes right so the
10:21 - logic here is very simple it's exactly
10:23 - same like this
10:24 - it's just putting it into code
10:27 - and now for dimes it's very similar
10:28 - process
10:29 - so once again let's make a function
10:32 - let's make a variable called dimes
10:34 - in dimes and we set it to zero of course
10:38 - so while now it's very similar while
10:40 - sense is greater than or equal to 10
10:45 - right what do we want to do
10:46 - we're going to do sense equals to cents
10:49 - minus 10
10:51 - and do dimes plus plus which means add a
10:53 - dime right it's very similar logic right
10:56 - so following the previous example let's
10:57 - say it was 18 cents so we check is 18
11:00 - greater than 10
11:02 - well yes it is so we do this for the
11:05 - following we do 18 minus 10 which leaves
11:08 - us then with eight cents
11:09 - and at a time since we already minus the
11:11 - 10. so that gives us one time
11:14 - and now since we have eight cents left
11:16 - is eight greater than ten well no it's
11:18 - not so we quit since we just want to
11:20 - return we want to return dimes and then
11:23 - move on to nickels right which are five
11:24 - cent coins
11:26 - same logic here as well we're working
11:28 - our way down here so let's make a
11:30 - variable again let's call it nickels n
11:32 - equals equal to zero
11:35 - and again it's the same logic again
11:37 - while sense is greater than or equal to
11:39 - five
11:41 - what do we want to do
11:43 - sense equals to sense minus 5
11:46 - and nickels plus plus right which means
11:48 - add a nickel
11:49 - it's the exact same logic as the code
11:51 - we've been doing before
11:53 - and here we want to return nickels
11:55 - right so eight cents eight is greater
11:56 - than five eight minus five will give us
11:59 - three and add a nickel since we've
12:01 - already minus the five
12:03 - and three is now
12:05 - uh three is now less than five so we
12:06 - don't add another nickel right instead
12:08 - we move to pennies so it's the same
12:10 - logic here it's the exact same logic as
12:12 - what we did here but we're just putting
12:13 - into code right
12:15 - and finally we do the same for pennies
12:17 - i'm sure by now you guys can figure out
12:21 - uh while sense is greater than or equal
12:24 - to one
12:27 - what do you want to do
12:28 - since equals to cents
12:31 - minus one
12:33 - penny is plus plus right and this is
12:34 - just updating the value of
12:36 - cents here
12:38 - pennies plus plus and finally we want to
12:40 - return pennies
12:42 - okay so now we've calculated the number
12:44 - of everything the number of uh quarters
12:47 - dimes nickels and pennies
12:48 - and now here they've already in the
12:50 - distribution code they've already made
12:52 - an integer called coins to add it all up
12:54 - and they even have the print function to
12:56 - print everything out
12:58 - so let's see if our code is correct here
12:59 - let's compile the program make cash
13:02 - okay so there seems to be an error here
13:04 - and that's actually because
13:07 - ah okay so a silly mistake here
13:10 - we forgot to initialize my knees to zero
13:12 - so in pennies
13:14 - equal to zero right so sometimes silly
13:16 - mistakes can happen even though it's
13:17 - such a simple problem set right so let's
13:20 - make cache
13:22 - okay compiles
13:24 - dot slash cache to run it
13:26 - okay prompts me for something uh sends
13:28 - od let's try 68 and it prints out seven
13:31 - right which matches up with our with our
13:33 - example earlier so that makes sense
13:35 - let's just try another example just to
13:37 - make sure that it's correct
13:39 - let's just try this one 99 okay and it
13:41 - should
13:42 - should output nine
13:44 - based on cs50s uh example so let's do
13:46 - dot slash cache it sends out 99 and it n
13:49 - plus nine okay so that's correct
13:51 - everything seems to be correct here but
13:52 - just to double check as we do with all
13:54 - problem sets let's run the check 50 line
13:57 - here
13:58 - this is just going to tell us whether
13:59 - our code is correct or not and by the
14:01 - way guys if you enjoyed the videos if
14:03 - you think they're helpful please make
14:04 - sure to leave a like on the video please
14:06 - make sure to subscribe with
14:07 - notifications on so you get posted so
14:09 - you get notified every single time i
14:11 - post a video right
14:12 - i'm gonna be posting videos every single
14:14 - week so we can get through this course
14:16 - together guys
14:17 - okay so let's wait for it to check
14:20 - and while it's checking i just want to
14:21 - tell you guys also there's also points
14:24 - for style okay that's the format of your
14:26 - code so not the correctness but the
14:27 - style so it's worth running this as well
14:29 - because it is graded
14:31 - right so if this is correct if the
14:33 - check50 comes correct make sure you
14:34 - check for style and finally don't forget
14:36 - to submit using this code as well
14:38 - okay
14:40 - okay we're still waiting for results
14:41 - here okay so everything's green which
14:43 - means everything's correct right after
14:45 - this you can go ahead and check your
14:46 - code for style and if that's all correct
14:48 - you just have to go ahead and submit
14:50 - your code i'm not going to do that here
14:51 - because i've already submitted the
14:52 - program so
14:53 - that's all for today guys thank you so
14:55 - much for watching and see you all next
14:57 - time bye david

Cleaned transcript:

hey guys in today's video we're going to be going over cs50 problem set one cache and this is the updated version for 2022. but before we jump into it please make sure you're subscribed to the channel with notifications on because i'm going to be posting videos every single week so you don't want to miss one let's jump straight into cash okay so in cash the whole objective is we need to ask some input from the user for some number of sense and then our program needs to output the not the minimum number of coins it would take to make up that amount of sense okay so what i said may sound confusing so let's jump straight into an example so let's say the user type in 68 okay so sensod is 68. so now we need to tell the user how many coins how many coins we need to make up 68 cents assuming that there are only quarters dimes nickels and pennies okay so the number of quarters is needed how do we go about this here well we can see first of all that we will need quarters because again let's compare here so 68 cents and 68 is greater than 25 so this means that we will need a quarter we need at least one quarter so let's see 68 minus 25 will give us 43 and then we compare it again is 43 greater than 25 well yes it is so we can use another quarter so we can do 43 minus 25 now and that will give us 18. okay and now we can check again can we use another quarter 18 cents left okay no because 18 is smaller than 25 so we cannot use another quarter so how many quarters do we need we need one two quarters okay and now let's move on to dimes so we know that the remainder is now 18 cents left so 18 is 18 greater than 10 yes so we can use a dime and then leave us with eight cents remaining and now we check it is not greater than 10. it is smaller than 10 so we can't use another dime which means we only need a total of one dime right one tenth cent coin and now there's eight eight cents remaining so eight is greater than five so we can use a nickel right and then let's minus five so the remainder is now three is three greater than five no it's not so we can't use any more nickels right so we only need one nickel here and what about here so now we have three cents remaining how many pennies do we need to make three cents well we'll need three pennies right because it's one cent each so we'll need three pennies and then they'll leave us with a remainder of zero okay so we need a rule of two quarters one dime one nickel and three pennies to make up 68 cents so that's a total of two plus one plus one plus three will give us seven okay so basically now the program is when the user inputs 68 our program needs to print out seven which is a which is the minimum number of coins needed right okay so the logic here is very simple now let's put it into code so this is the distribution code that cs50 gives us and okay let's go through the distribution code real quick so on top obviously we have our header files cs50.h and centerdio.h and then we have some functions called okay this is prototype so let's go into the main code so first things first is ask how many cents the customer is owed right so first to get some input from the user right similar to mario we know how to get input from the user okay now let's go further into the program and it says in quarters equals calculate quarters okay so this is what we need uh this is a function called calculate quarters but they don't tell us how to calculate it and that's what we need to write that's the part that we need to write of the code so we need to make this function calculate quarters right and then it says cents equals to cents minus quarters times 25. so this may seem confusing at first but it's it's exactly what we actually just did so since it's just updating the value of cents so again let's say it's 68 right so 68 minus the number of quarters times 25. so what we did here is basically this thing says we use two quarters here so it's just 68 minus 2 times 25 right it's the same thing what we did here it's just updating the value of cents and then after that we move on to dimes so just remember in our example earlier after we used two quarters 68 minus 50 was 18 right according to our example so now we move on to dimes and again we need to they give us a function calculate dimes but they don't tell us what's in that function so that's what we need to write again and then it does sense equals cents minus dimes times 10 right it's exactly what we did earlier so for example let's say it was 18 from our earlier example 18 minus one times ten right earlier was two quarters here it was two times twenty five here it's one times ten because we only use one dime in our example okay and then it goes and does this same thing for nickels times five again and pennies times one obviously so basically they need to calculate the total number of quarters dimes nickels and pennies in order to make up the the cents owed right and then finally coins into coins okay so they have an integer called coins and that just sums up the total of quarters times nickels and pennies right so as we said in our example earlier this is the seven right when user input 68 our program outputs a seven so then finally it just prints out the total number of coins okay seems simple enough so how do we actually get into it so first things first we need to write a function to get sends right to get an input from the user and if you remember how we get something from the user is using the get function right okay so first things first let's make an integer let's call it sense incense okay and now we want to get some input from the user and we know that the input one's going to be an integer right because we want to get a number from the user so we use get int okay so let's use um let's call it incense oh sorry we don't need to say anymore so let's say sense equals to get underscore in right that's how we get some input from the user and let's prompt the user and say sends ode all right okay but now again there's a slight problem here because just like mario there is a condition right we can't have the user inputting a negative number because we only want positive numbers right so if the user inputs a negative number we want that we want to keep on repeating we want to keep on asking them since old sense oh it sends out until they put in a positive number so we want to reject all negative numbers so for that it sounds like we can use a loop right so let's go ahead and use a do while loop so do the following right while a certain condition is true and now we want to put this in our do while loop because if there is a condition right so from the user for cents owed while they put in a negative number right so while sense is less than zero so what this means is keep on asking the user for cents owed while they're putting in a negative number so it's going to keep on prompting them for the number of cents owed until they actually put in a positive number which is what we want right okay so this is pretty similar to mario pretty simple so far um and finally we want to return now we don't want to print the number of cents right that's what we got from the user we don't want to return zero we want to return cents okay everything makes sense logically so far and finally now here we want to calculate the number of quarters right okay so again let's use the similar logic like we did in our example here um but first of all let's make an integer right int quarters and let's set it to zero because it starts at zero obviously so now here what's the logic uh let's say like it's we need a loop for sure because we need to keep checking whether it's greater than 25 or not right like 68 minus is 68 greater than 25 first of all yes it is right that's why we use a quarter and we minus 25 and then our second iteration we have to check is 43 greater than 25 and if it is then we need to minus 25 cents and add another quarter right so over here we use two quarters so how do we translate this into code well let's go ahead and try we know we need a loop let's use a while loop so while sense is greater than or equal to 25 right what do we need to do we want to update the value of sense to sense minus 25 and quarters plus plus which means add a quarter right so we've not come across this syntax before but it basically means add a quarter so it starts at zero and every time this happens add a quarter okay so again what's the logic here let's say let's use an example so let's say it was 68 again so while sense is greater so while 68 is 68 greater than 25 yes it is so we update the value so we do 68 minus 25 right and then add a quarter because we've already minus 25 so that's one quarter and now the new value is 43. so we check again is 43 greater than 25 yes it is so again we minus 43 minus 25 and add a quarter so that puts us at two quarters now and then again check again uh the new value is 18. so is 18 greater than 25 no it's not so now we just want to return quarters and then move on to dimes right so the logic here is very simple it's exactly same like this it's just putting it into code and now for dimes it's very similar process so once again let's make a function let's make a variable called dimes in dimes and we set it to zero of course so while now it's very similar while sense is greater than or equal to 10 right what do we want to do we're going to do sense equals to cents minus 10 and do dimes plus plus which means add a dime right it's very similar logic right so following the previous example let's say it was 18 cents so we check is 18 greater than 10 well yes it is so we do this for the following we do 18 minus 10 which leaves us then with eight cents and at a time since we already minus the 10. so that gives us one time and now since we have eight cents left is eight greater than ten well no it's not so we quit since we just want to return we want to return dimes and then move on to nickels right which are five cent coins same logic here as well we're working our way down here so let's make a variable again let's call it nickels n equals equal to zero and again it's the same logic again while sense is greater than or equal to five what do we want to do sense equals to sense minus 5 and nickels plus plus right which means add a nickel it's the exact same logic as the code we've been doing before and here we want to return nickels right so eight cents eight is greater than five eight minus five will give us three and add a nickel since we've already minus the five and three is now uh three is now less than five so we don't add another nickel right instead we move to pennies so it's the same logic here it's the exact same logic as what we did here but we're just putting into code right and finally we do the same for pennies i'm sure by now you guys can figure out uh while sense is greater than or equal to one what do you want to do since equals to cents minus one penny is plus plus right and this is just updating the value of cents here pennies plus plus and finally we want to return pennies okay so now we've calculated the number of everything the number of uh quarters dimes nickels and pennies and now here they've already in the distribution code they've already made an integer called coins to add it all up and they even have the print function to print everything out so let's see if our code is correct here let's compile the program make cash okay so there seems to be an error here and that's actually because ah okay so a silly mistake here we forgot to initialize my knees to zero so in pennies equal to zero right so sometimes silly mistakes can happen even though it's such a simple problem set right so let's make cache okay compiles dot slash cache to run it okay prompts me for something uh sends od let's try 68 and it prints out seven right which matches up with our with our example earlier so that makes sense let's just try another example just to make sure that it's correct let's just try this one 99 okay and it should should output nine based on cs50s uh example so let's do dot slash cache it sends out 99 and it n plus nine okay so that's correct everything seems to be correct here but just to double check as we do with all problem sets let's run the check 50 line here this is just going to tell us whether our code is correct or not and by the way guys if you enjoyed the videos if you think they're helpful please make sure to leave a like on the video please make sure to subscribe with notifications on so you get posted so you get notified every single time i post a video right i'm gonna be posting videos every single week so we can get through this course together guys okay so let's wait for it to check and while it's checking i just want to tell you guys also there's also points for style okay that's the format of your code so not the correctness but the style so it's worth running this as well because it is graded right so if this is correct if the check50 comes correct make sure you check for style and finally don't forget to submit using this code as well okay okay we're still waiting for results here okay so everything's green which means everything's correct right after this you can go ahead and check your code for style and if that's all correct you just have to go ahead and submit your code i'm not going to do that here because i've already submitted the program so that's all for today guys thank you so much for watching and see you all next time bye david
