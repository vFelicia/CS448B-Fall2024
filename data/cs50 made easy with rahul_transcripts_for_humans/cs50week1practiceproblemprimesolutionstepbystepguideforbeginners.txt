With timestamps:

00:00 - in this video we're going to be going
00:01 - over a cs50 practice problem called
00:03 - Prime and this one's a little more
00:05 - difficult and a little more involved
00:06 - than the others so make sure you watch
00:08 - all the way to the end and don't skip
00:10 - any part of the video if you want to
00:11 - fully understand it now let's jump
00:13 - straight into Prime so the program
00:14 - should do this it should ask the user
00:16 - for a range minimum and maximum value
00:18 - and then give the user all prime numbers
00:20 - within that range so let's say the user
00:22 - inputs a minimum of 2 and a maximum of
00:25 - 10. our program should output all prime
00:27 - numbers between 2 and 10 which in this
00:29 - case is 2 3 5 and 7. so I guess the next
00:32 - natural question becomes how do we know
00:34 - if something is a prime number or not
00:36 - well a prime number is something that
00:38 - can only be divided by one and itself in
00:41 - other words when you divide a prime
00:43 - number by any other whole number you
00:46 - will always have a remainder let's do a
00:48 - quick example of that so 4 divided by 2
00:50 - which is another whole number does not
00:52 - have a remainder 4 divided by 2 is 2 not
00:55 - 2 point something just two so we can say
00:57 - that 4 is not prime okay because it does
00:59 - doesn't have a remainder when you divide
01:01 - it by a whole number what about five
01:03 - five divided by 2 has a remainder it's
01:05 - 2.5 5 divided by 3 is also one point
01:08 - something so it does have a remainder
01:10 - and 5 divided by 4 is also one point
01:12 - something and it does have a remainder
01:14 - right so we can say that 5 is prime so
01:16 - just to make this concept very clear
01:18 - let's take an example of nine so 9
01:20 - divided by 2 has a remainder right it's
01:22 - 4.5 but that doesn't mean it's Prime
01:24 - because for it to be prime it would need
01:26 - to not have a remainder when dividing 9
01:28 - by all numbers between 1 to 9. so let's
01:31 - take the next step now from two to three
01:33 - nine divided by 3 we see here does not
01:35 - have a remainder because 9 divided by 3
01:37 - is 3 which means that 9 is not prime so
01:40 - would you divide a number by all whole
01:42 - numbers between 1 and itself and it does
01:45 - not have a remainder that means that
01:47 - it's Prime and even if divided by one of
01:49 - the whole numbers result in a remainder
01:51 - of 0 that means that the number is not
01:53 - prime as we see in this example of 9
01:54 - here so we understand the concept of
01:56 - Prime versus not prime but how do we
01:58 - actually implement this into code well
02:00 - let's first take a look at the
02:01 - distribution code that they give us
02:02 - specially include the standard header
02:04 - files and then they have a function
02:05 - called Prime which takes in an integer
02:08 - called number as input and gives out a
02:11 - boo or true or false value and on the
02:13 - main function we can see that they're
02:15 - prompting the user for a minimum value
02:17 - and a maximum value using the get in
02:19 - functions and the conditions over here
02:21 - we see that the minimum needs to be
02:23 - greater than one at least and the
02:25 - maximum obviously needs to be greater
02:27 - than the minimum right so this is just
02:28 - prompting the user for input of the
02:30 - range and then over here we have a for
02:31 - Loop so let's dig into this so four and
02:34 - I gets Min okay which means start Loop
02:37 - and it initializes at the minimum value
02:39 - go all the way up until it's less than
02:42 - or equal to Max right and go one by one
02:46 - step by step I plus plus so what this is
02:48 - doing is let's say the user inputs a
02:50 - range of 1 till 10 or 2 till 10 well
02:53 - it's gonna go from 2 all the way up till
02:56 - 10 it's going to go one by one so it's
02:58 - going to go through two three four five
02:59 - six seven and so on and if it's Prime
03:02 - then we want to print it out it's not
03:04 - prime that we don't want to print it out
03:06 - right so if the user inputs a minimum
03:08 - value of 2 and a maximum value of 10 our
03:11 - program should print out two three five
03:13 - and seven just as we discussed earlier
03:15 - so our job now is to write this function
03:18 - called Prime to check whether the number
03:20 - in the user's given range is prime or
03:22 - not okay how do you go about doing that
03:24 - in code well let's take a look here so
03:26 - it's pretty obvious that we're going to
03:28 - need two main loops the first Loop is to
03:30 - go through all the numbers within the
03:32 - range given by the user so if the user
03:34 - input the range between 2 to 10 this
03:36 - first Loop will go over 2 3 4 5 and so
03:39 - on and so forth all the way up until 10
03:40 - right to go through all the numbers
03:41 - within the user's given range and the
03:44 - second Loop is to check whether or not
03:46 - the number is prime okay and how do we
03:48 - do that well over here remember earlier
03:50 - we said we go through all the numbers
03:52 - from 2 until that number minus one right
03:57 - so if you want to check whether 5 is
03:58 - prime we guess divided by 2 see if it
04:01 - has a remainder divided by three see if
04:02 - it has remainder divided by four let's
04:04 - see if it has a remainder so all the
04:05 - numbers from 2 until the number itself
04:08 - minus one so the nested Loop checks each
04:12 - number from 2 to that number to see
04:14 - whether it's prime or not so just as a
04:16 - quick example we see that 9 divided by 2
04:19 - has a remainder and now we go to the
04:21 - next number 9 divided by 3 we can see
04:24 - that it does not have a remainder so our
04:27 - function should return false it's not a
04:30 - prime number because when you divide it
04:31 - by another number it does not have a
04:33 - remainder or the remainder is zero so
04:36 - whenever the remainder is 0 that means
04:38 - that function is not prime so the logic
04:41 - is sound but how do we do this remainder
04:43 - stuff in code
04:45 - well it turns out that there is
04:46 - something called a modulo function which
04:48 - gives us the remainder after dividing
04:50 - whole numbers okay and this may seem a
04:52 - little confusing at first because it
04:54 - wasn't thought in the lectures but this
04:55 - is just something we have to know and
04:57 - something of research on your own but
04:58 - basically the modular function is the
05:00 - remainder you get after dividing whole
05:02 - numbers so how does it work well we know
05:04 - that 7 divided by 2 is 3.5 right it has
05:07 - a remainder but 7 mod 2 is 1 because
05:11 - that's the remainder so how do you think
05:13 - about this logically well let's say you
05:15 - have seven apples and your basket can
05:17 - fit exactly two and this is a
05:19 - representation of 7 mod 2. your mod is a
05:22 - basket size and seven is the number of
05:24 - apples you have so we have seven in the
05:26 - first basket we put two and now we have
05:28 - five left and now we have five apples we
05:30 - put two in the basket and now we have
05:32 - three apples left and then we take
05:34 - another basket and we put another two
05:36 - apples and now we have one lap now this
05:38 - one apple can't fit in that basket
05:40 - because the basket can fit exactly two
05:42 - it can't fit anymore it can't fit any
05:44 - less get fit exactly two apples so over
05:47 - here we'll fill three baskets right we
05:49 - fill three baskets and then we'll have
05:51 - one apple remaining which can't fit in
05:53 - any basket so this means that seven mod
05:55 - two is one that's the number of apples
05:58 - we have remaining okay just go through
05:59 - another quick example let's say now you
06:01 - have seven apples and your basket can
06:03 - fit exactly three this is seven mod
06:05 - three so in the first basket we'll put
06:07 - three and then we're gonna have four
06:09 - apples remaining from those four we take
06:11 - three apples and put them into the
06:13 - basket and now we'll have one apple
06:15 - remaining so in this case we're gonna
06:17 - fill two baskets and then we're gonna
06:19 - have one apple remaining which means
06:22 - seven mod three is one we're getting the
06:25 - gist of it by now so basically the rule
06:27 - for prime number is is over any point
06:30 - the number mod a whole number is zero
06:34 - that means it's not Prime and you can
06:36 - see why right let's say you have four
06:37 - apples and your basket size is two So
06:40 - You're Gonna Fill two baskets and have
06:42 - exactly zero apples remaining so we can
06:44 - conclude the that 4 is not a prime
06:46 - number it's that simple so basically
06:49 - this modulo function it might seem a
06:51 - little complicated at first but it's
06:52 - just something you need to understand
06:53 - once and then you're going to understand
06:55 - it forever so think about it in terms of
06:56 - apples and baskets and it's denoted by
06:58 - the percentage sign that's what you need
07:00 - to know now that we understand the
07:01 - concept remainders and the modular
07:03 - function it sounds like now we will be
07:05 - able to write this function called Prime
07:06 - so let's take a look at the distribution
07:08 - code again and over here we can see that
07:10 - the first Loop they've already given us
07:12 - right this Loop goes through all the
07:14 - numbers from the minimum till the
07:15 - maximum and if it's Prime then print out
07:19 - the prime numbers so this Loop is
07:21 - already within the loop that goes
07:23 - through all the numbers so we need to
07:25 - make the second Loop which is the nested
07:27 - Loop to check whether or not the number
07:28 - is prime and now we have a pretty good
07:30 - idea on how to do that with the modulo
07:32 - function so let's take a look at that
07:34 - okay so that has to do and return false
07:36 - Let's ignore the return false for now so
07:38 - let's make a for Loop right and how much
07:41 - do we want to initialize this to well we
07:43 - know that we want to start at 2 and go
07:46 - all the way up until that number and we
07:48 - want to go one by one so let's just make
07:51 - a variable let's call it J and how much
07:53 - do we want to initialize it to 2 right
07:55 - so for NJ gets two and so what's the
07:59 - maximum value you want to go up to you
08:01 - want to go up till the number itself
08:02 - right so J less than numbered so keep on
08:05 - going until it reaches the actual number
08:07 - itself and J plus plus which just means
08:09 - go one at a time so this Loop is
08:11 - basically initializing it to 2 going all
08:13 - the way up till the number right as we
08:15 - said here what we want to do it for five
08:17 - we said that okay we started two five by
08:19 - two as remainder now because then next
08:20 - we go to three we go to four and if all
08:22 - of them have a remainder that means it's
08:24 - not prime but if even one of them
08:26 - doesn't have a remainder that means it's
08:28 - not prime so this is the for Loop so now
08:30 - if the number mod the whole number which
08:34 - is J in this case is equal to zero that
08:38 - means it's not prime right so we want to
08:40 - return false otherwise you want to
08:42 - return true which means it is Prime and
08:45 - this what we've written here is nothing
08:46 - more than what we've done with 5 at the
08:49 - beginning so we initialize it two right
08:51 - we check 5 divided by 2 5 divided by 3 5
08:53 - divided by 4 so it's going to keep on
08:55 - going and the moment it reaches
08:57 - something with a remainder of 0 that
08:59 - means we return false it's not a prime
09:01 - number and we don't want to print it
09:02 - okay so let's check our code now let's
09:04 - try to compile see if we made any
09:05 - mistake okay we didn't make any mistakes
09:07 - let's go to compiles let's run it let's
09:09 - even move to maximum of 10 and it prints
09:11 - out 2 3 5 7 Square Factor seems to be
09:13 - all correct but just to double check
09:14 - let's use the check 50 function here and
09:17 - while we're waiting for that I know this
09:18 - problem set was a little bit complicated
09:20 - because we got introduced to a lot of
09:21 - new Concepts right like defining a prime
09:23 - number and then modulo but I promise it
09:25 - all gets easier with time if there's
09:26 - anything you didn't understand please
09:27 - make sure to re-watch the video first
09:29 - and focus and if you still don't
09:30 - understand something make sure to leave
09:31 - a comment down below I'll do my best to
09:33 - get to it and in case you need private
09:35 - tutoring feel free to email me at Rahul
09:37 - cs50madeeasy.com that's gonna be private
09:39 - one one two three four you if you need
09:41 - it and now we can see that it's all
09:42 - green which means it's all good and if
09:44 - you enjoyed this video please make sure
09:45 - to like the video subscribe to the
09:47 - Channel with notifications on for weekly
09:48 - cs50 videos and that's all for this one
09:50 - thanks for watching guys bye David

Cleaned transcript:

in this video we're going to be going over a cs50 practice problem called Prime and this one's a little more difficult and a little more involved than the others so make sure you watch all the way to the end and don't skip any part of the video if you want to fully understand it now let's jump straight into Prime so the program should do this it should ask the user for a range minimum and maximum value and then give the user all prime numbers within that range so let's say the user inputs a minimum of 2 and a maximum of 10. our program should output all prime numbers between 2 and 10 which in this case is 2 3 5 and 7. so I guess the next natural question becomes how do we know if something is a prime number or not well a prime number is something that can only be divided by one and itself in other words when you divide a prime number by any other whole number you will always have a remainder let's do a quick example of that so 4 divided by 2 which is another whole number does not have a remainder 4 divided by 2 is 2 not 2 point something just two so we can say that 4 is not prime okay because it does doesn't have a remainder when you divide it by a whole number what about five five divided by 2 has a remainder it's 2.5 5 divided by 3 is also one point something so it does have a remainder and 5 divided by 4 is also one point something and it does have a remainder right so we can say that 5 is prime so just to make this concept very clear let's take an example of nine so 9 divided by 2 has a remainder right it's 4.5 but that doesn't mean it's Prime because for it to be prime it would need to not have a remainder when dividing 9 by all numbers between 1 to 9. so let's take the next step now from two to three nine divided by 3 we see here does not have a remainder because 9 divided by 3 is 3 which means that 9 is not prime so would you divide a number by all whole numbers between 1 and itself and it does not have a remainder that means that it's Prime and even if divided by one of the whole numbers result in a remainder of 0 that means that the number is not prime as we see in this example of 9 here so we understand the concept of Prime versus not prime but how do we actually implement this into code well let's first take a look at the distribution code that they give us specially include the standard header files and then they have a function called Prime which takes in an integer called number as input and gives out a boo or true or false value and on the main function we can see that they're prompting the user for a minimum value and a maximum value using the get in functions and the conditions over here we see that the minimum needs to be greater than one at least and the maximum obviously needs to be greater than the minimum right so this is just prompting the user for input of the range and then over here we have a for Loop so let's dig into this so four and I gets Min okay which means start Loop and it initializes at the minimum value go all the way up until it's less than or equal to Max right and go one by one step by step I plus plus so what this is doing is let's say the user inputs a range of 1 till 10 or 2 till 10 well it's gonna go from 2 all the way up till 10 it's going to go one by one so it's going to go through two three four five six seven and so on and if it's Prime then we want to print it out it's not prime that we don't want to print it out right so if the user inputs a minimum value of 2 and a maximum value of 10 our program should print out two three five and seven just as we discussed earlier so our job now is to write this function called Prime to check whether the number in the user's given range is prime or not okay how do you go about doing that in code well let's take a look here so it's pretty obvious that we're going to need two main loops the first Loop is to go through all the numbers within the range given by the user so if the user input the range between 2 to 10 this first Loop will go over 2 3 4 5 and so on and so forth all the way up until 10 right to go through all the numbers within the user's given range and the second Loop is to check whether or not the number is prime okay and how do we do that well over here remember earlier we said we go through all the numbers from 2 until that number minus one right so if you want to check whether 5 is prime we guess divided by 2 see if it has a remainder divided by three see if it has remainder divided by four let's see if it has a remainder so all the numbers from 2 until the number itself minus one so the nested Loop checks each number from 2 to that number to see whether it's prime or not so just as a quick example we see that 9 divided by 2 has a remainder and now we go to the next number 9 divided by 3 we can see that it does not have a remainder so our function should return false it's not a prime number because when you divide it by another number it does not have a remainder or the remainder is zero so whenever the remainder is 0 that means that function is not prime so the logic is sound but how do we do this remainder stuff in code well it turns out that there is something called a modulo function which gives us the remainder after dividing whole numbers okay and this may seem a little confusing at first because it wasn't thought in the lectures but this is just something we have to know and something of research on your own but basically the modular function is the remainder you get after dividing whole numbers so how does it work well we know that 7 divided by 2 is 3.5 right it has a remainder but 7 mod 2 is 1 because that's the remainder so how do you think about this logically well let's say you have seven apples and your basket can fit exactly two and this is a representation of 7 mod 2. your mod is a basket size and seven is the number of apples you have so we have seven in the first basket we put two and now we have five left and now we have five apples we put two in the basket and now we have three apples left and then we take another basket and we put another two apples and now we have one lap now this one apple can't fit in that basket because the basket can fit exactly two it can't fit anymore it can't fit any less get fit exactly two apples so over here we'll fill three baskets right we fill three baskets and then we'll have one apple remaining which can't fit in any basket so this means that seven mod two is one that's the number of apples we have remaining okay just go through another quick example let's say now you have seven apples and your basket can fit exactly three this is seven mod three so in the first basket we'll put three and then we're gonna have four apples remaining from those four we take three apples and put them into the basket and now we'll have one apple remaining so in this case we're gonna fill two baskets and then we're gonna have one apple remaining which means seven mod three is one we're getting the gist of it by now so basically the rule for prime number is is over any point the number mod a whole number is zero that means it's not Prime and you can see why right let's say you have four apples and your basket size is two So You're Gonna Fill two baskets and have exactly zero apples remaining so we can conclude the that 4 is not a prime number it's that simple so basically this modulo function it might seem a little complicated at first but it's just something you need to understand once and then you're going to understand it forever so think about it in terms of apples and baskets and it's denoted by the percentage sign that's what you need to know now that we understand the concept remainders and the modular function it sounds like now we will be able to write this function called Prime so let's take a look at the distribution code again and over here we can see that the first Loop they've already given us right this Loop goes through all the numbers from the minimum till the maximum and if it's Prime then print out the prime numbers so this Loop is already within the loop that goes through all the numbers so we need to make the second Loop which is the nested Loop to check whether or not the number is prime and now we have a pretty good idea on how to do that with the modulo function so let's take a look at that okay so that has to do and return false Let's ignore the return false for now so let's make a for Loop right and how much do we want to initialize this to well we know that we want to start at 2 and go all the way up until that number and we want to go one by one so let's just make a variable let's call it J and how much do we want to initialize it to 2 right so for NJ gets two and so what's the maximum value you want to go up to you want to go up till the number itself right so J less than numbered so keep on going until it reaches the actual number itself and J plus plus which just means go one at a time so this Loop is basically initializing it to 2 going all the way up till the number right as we said here what we want to do it for five we said that okay we started two five by two as remainder now because then next we go to three we go to four and if all of them have a remainder that means it's not prime but if even one of them doesn't have a remainder that means it's not prime so this is the for Loop so now if the number mod the whole number which is J in this case is equal to zero that means it's not prime right so we want to return false otherwise you want to return true which means it is Prime and this what we've written here is nothing more than what we've done with 5 at the beginning so we initialize it two right we check 5 divided by 2 5 divided by 3 5 divided by 4 so it's going to keep on going and the moment it reaches something with a remainder of 0 that means we return false it's not a prime number and we don't want to print it okay so let's check our code now let's try to compile see if we made any mistake okay we didn't make any mistakes let's go to compiles let's run it let's even move to maximum of 10 and it prints out 2 3 5 7 Square Factor seems to be all correct but just to double check let's use the check 50 function here and while we're waiting for that I know this problem set was a little bit complicated because we got introduced to a lot of new Concepts right like defining a prime number and then modulo but I promise it all gets easier with time if there's anything you didn't understand please make sure to rewatch the video first and focus and if you still don't understand something make sure to leave a comment down below I'll do my best to get to it and in case you need private tutoring feel free to email me at Rahul cs50madeeasy.com that's gonna be private one one two three four you if you need it and now we can see that it's all green which means it's all good and if you enjoyed this video please make sure to like the video subscribe to the Channel with notifications on for weekly cs50 videos and that's all for this one thanks for watching guys bye David
