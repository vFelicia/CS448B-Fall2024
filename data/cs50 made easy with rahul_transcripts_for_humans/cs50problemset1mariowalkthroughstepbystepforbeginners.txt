With timestamps:

00:00 - hey guys it's me Mario okay no it's not
00:05 - today we're actually going to be doing
00:07 - the cs50 problem set one Mario
00:10 - walkthrough this is going to be a
00:11 - step-by-step guide for beginners so
00:14 - what's the program actually about the
00:17 - we'd print a pyramid whose height
00:19 - depends on the user so if the user
00:22 - inputs a height of eight we need to
00:24 - print a pyramid with the height of eight
00:25 - if the user inputs a height of four when
00:28 - you print a pair mid with a height of
00:29 - four and so on and so forth now the only
00:32 - condition is that the user it needs to
00:35 - input a number between one can hit so
00:37 - anything outside the range I mean to be
00:39 - prompt them for another height so if the
00:42 - user inputs zero that's outside the one
00:44 - to eight range so we need to replant
00:45 - them again ask for another eye if the
00:47 - input the number 42 we need to replumb
00:49 - them again right so we need to keep on
00:51 - we prompt ting them as long as the range
00:53 - is outside one to eight right and then
00:56 - we need to print permit according to the
00:57 - height that they type in so how can we
01:00 - go about doing this well first of all
01:03 - let's do su the normal stuff let's
01:05 - include our libraries which are standard
01:08 - i/o dot H and cs50 dot H all right now
01:17 - we want to start the program and
01:18 - remember how we do that is int main void
01:21 - and this is basically the equivalent of
01:24 - saying when green flag clicked on
01:26 - scratch right so now we want to prompt
01:29 - the user for some input right so let's
01:31 - create a variable let's call it height
01:34 - height equals now how do we get some
01:37 - input from the user while using the get
01:40 - function right so height equals to get
01:42 - underscore and what type of data do you
01:46 - want here we want a number between 1 and
01:48 - 8 right so that's an integer so we write
01:51 - get underscore int now we prompt the
01:54 - user for some input let's say enter
01:57 - height here and don't forget the
02:01 - semicolon at the end ok so we don't want
02:05 - to just do this once as we said earlier
02:06 - we want to keep on doing this as long as
02:10 - the input a number outside the 1 to 8
02:12 - range right
02:13 - so for this we use a loop and we can
02:17 - essentially use a do-while loop which
02:19 - basically means do the following while a
02:23 - certain condition is true so we want to
02:25 - prompt the user for input while height
02:30 - is less than 1 or 10 remember how we say
02:36 - or with those two lines or height is
02:39 - greater than 8 right so no new
02:42 - information here so no new information
02:44 - here so far what we're saying is as long
02:47 - as the height is less than 1 or greater
02:48 - than 8 we need to keep on asking the
02:51 - user saying enter height here all right
02:54 - and now let's just inform the computer
02:56 - that height is an integer so this in
02:58 - type this is just defining the height
03:00 - and just tell the computer hey height is
03:03 - an integer all right so that's what
03:05 - we've done so far let's test out the
03:07 - program let's say make Mario ok compiled
03:11 - dot slash Mario to run it
03:13 - let's try a height 10 ok ask us can
03:17 - let's say hi zero okay after skin let's
03:21 - say height for okay so so far we know
03:23 - the program works right but now what do
03:26 - we need to do we don't we just want to
03:27 - get some input we actually need to go
03:30 - about building the permit being to print
03:32 - the pyramid right so for that now let's
03:36 - just take a look at the pyramid first of
03:37 - all so when we look at the pyramid here
03:40 - we can see that there's some sort of
03:43 - pattern right like there is one hash in
03:46 - the first line to ashes and second line
03:48 - three ashes in the third line and so on
03:49 - and so forth so we know that it somehow
03:52 - involves using loops all right so let's
03:55 - first of all make a loop let's use a for
03:57 - loop so for now in the now we need to
04:02 - put some sort of variable right we can
04:03 - call this variable anything at all we
04:05 - can called ijk X David whatever you want
04:07 - but for the purposes of this video since
04:10 - it's a beginner video I'm just gonna
04:12 - call the variable rule and it has no
04:14 - function at all I'm just calling it row
04:16 - because it helps me remember stuff so
04:19 - I'm calling it a row because I want this
04:20 - to make a new row I want this Lou to
04:22 - make a new row so I said to zero
04:25 - I'll put a condition row less than
04:28 - height row plus plus all right
04:32 - so within this for loop I want to say
04:35 - printf a newline and remember how we do
04:41 - a new line is just backslash n right so
04:44 - basically what I've said here so far is
04:45 - as long as Rho is less than height print
04:50 - a new line
04:51 - all right that's basically what I've
04:52 - said so far and so why is this condition
04:56 - true why do we want to print a new row
04:58 - as almost Rho is less than high because
05:00 - you might be thinking isn't true equal
05:03 - to the height right because we can see
05:05 - Row 1 Row 2 Row 3 Row 4 and the pyramid
05:09 - has height of 4 Behrman with the height
05:12 - of 4 has 4 rows so why do we want to do
05:14 - rule less than height well the
05:17 - explanation is very simple now remember
05:20 - we initialized row to 0 which basically
05:23 - means a pyramid with a height of 4 and
05:26 - we if we start counting from 0 the last
05:28 - row we'll get is 3 so we can see that
05:31 - row 0 has one hash Row 1 has two hashes
05:34 - and so on so now a pair of the height of
05:37 - 4 and the last row is 3 which is why we
05:40 - want to keep on printing a new row as
05:42 - long as Rho is less than hype now what
05:45 - if you put it as less than equal to
05:46 - height then we would actually get a new
05:49 - row here with five hashes and that'll be
05:52 - row four
05:53 - now we don't want this because then the
05:56 - height of the pyramid would be five
05:58 - right so the condition here should be as
06:01 - long as Rho is less than height all
06:03 - right so that makes sense so far but now
06:06 - when we look at the pyramid we don't
06:08 - just want to print new lines before
06:10 - printing every new line we actually want
06:13 - to print a hash all right so we want to
06:16 - print a hash so we need to make another
06:19 - loop right because there is a pattern
06:20 - for the hashes as well like one hash in
06:22 - the first line two hash in the second
06:24 - three in the third and so on so we know
06:26 - we know another loop and let's put that
06:29 - loop inside the row loop so let's call
06:32 - it another for loop let's call this one
06:35 - column because rows go down called
06:38 - Krauss so just intuitively you can name
06:39 - it anything literally anything just for
06:42 - the purposes of clarity I'm gonna name
06:43 - it column so for a column equals to zero
06:46 - initializing column to zero some
06:49 - condition we don't know what yet column
06:53 - plus plus and for this we want to print
06:57 - a hash write printf a hash all right and
07:03 - semicolon now how do we go about finding
07:07 - out what the condition is let's just
07:10 - test it out first let's say call them
07:12 - less than height all right and remember
07:17 - we have to tell the computer that row
07:18 - and column I ins as well so let's just
07:20 - go ahead and do that in row okay this is
07:25 - informing the computer that ruin column
07:27 - are int right now that that's done let's
07:31 - try to compile the program make Mario
07:34 - okay compiles let's run it dot slash
07:38 - Mario let's see how for okay so it
07:43 - prints something but it's not a pyramid
07:45 - right we don't want to block we want a
07:47 - pyramid so we know that there is a
07:50 - problem with the condition here we don't
07:51 - want the same condition for a row and
07:53 - column we need to make it something else
07:55 - something different so the condition I'm
07:58 - gonna put is column less than row and
08:02 - basically what it means now is as long
08:05 - as column is less than or equal to row
08:07 - print a hash so how does this make sense
08:11 - how do we like put some logic into this
08:13 - well it's very simple so basically what
08:18 - I'm saying so far is if column is less
08:21 - than or equal to row print hash right
08:24 - that's my condition
08:25 - so because the column loop is nested
08:30 - inside the row loop remember here column
08:32 - loop is within the row loop every time
08:36 - Row is increased column is initialized
08:39 - to 0 so let's just read that one more
08:41 - time
08:42 - every time row is increase column is
08:46 - initialized to 0
08:47 - all right just get that in your head and
08:49 - that's because the
08:50 - loop is nested within the rule loop
08:52 - alright so let me just give you an
08:55 - example here now let's take a parameter
08:57 - at the height of three okay
08:59 - so in the first loop true is 0 because
09:02 - we initialized it to 0 and column is
09:04 - here as well so now it's gonna check for
09:07 - the condition the first loop is column
09:10 - less than or equal to row yes because 0
09:14 - is equal to 0 the condition is true so
09:16 - we print a hash now column is going to
09:20 - try to increase to 1 and then it's gonna
09:22 - check again is column less than or equal
09:25 - to row and this time the condition is
09:28 - not true because 1 is greater than 0 so
09:30 - column is greater than row so it
09:33 - wouldn't print a new hash here so it
09:35 - prints newline and goes to the second
09:37 - loop alright and the second loop it's
09:39 - been row plus plus now so row is 1 and
09:42 - column is once again initialized to 0
09:45 - all right now it's gonna check is the
09:49 - condition true is column less than or
09:51 - equal to row yes it is because 0 is less
09:54 - than 1 so it's gonna print a new hash
09:56 - and now column will try to increase
09:58 - again and again it's gonna check his
10:01 - column less than or equal to row yes
10:04 - because 1 is equal to 1 all right so
10:06 - it's gonna print another hash and now
10:10 - column will try to increase again it's
10:12 - gonna see column 2 and now we check
10:15 - again is column less than or equal to
10:17 - row and now it's not right because 2 is
10:21 - greater than 1 column is greater than
10:23 - row the condition is not true so we
10:25 - won't print another hash and instead
10:27 - we're gonna print a new line and then we
10:30 - go to the third loop now it's been row
10:32 - plus plus again so row is 2 and column
10:36 - is once again initialized to 0 that's
10:38 - the key that's the key here
10:40 - column is initialized to 0 all right so
10:43 - now it's gonna check is column less than
10:45 - or equal to row yes it is because 0 is
10:48 - less than 2 and hopefully hopefully
10:50 - you're seeing some pattern here
10:51 - hopefully you're getting the hang of
10:52 - this now column we'll try to increase
10:54 - again column is 1 row is 2 is column
10:57 - less than or equal to row yes it is
10:59 - because 1 is less than 2
11:00 - right so we print another hash
11:03 - now Collin will try to increase again so
11:06 - now it's gonna check again is column
11:09 - less than or equal to row yes it is
11:12 - because 2 is equal to 2 right it's going
11:14 - to print another hash now column will
11:17 - try to increase again and it's gonna say
11:19 - column equals 3 now I'll check for the
11:21 - condition again and column is greater
11:24 - than row so it does not meet this
11:26 - condition so if one print another hash
11:28 - and that's the end of the program
11:31 - because we chose a parameter at the
11:33 - height of 3 and this is just an example
11:34 - so now we can see that on row 0 we have
11:37 - one hash on Row one we have two hashes
11:40 - and in Row two we have three hashes all
11:44 - right and if you look at the initial
11:45 - pyramid here this makes sense because on
11:47 - Rosi row we have one hash on Row one we
11:50 - have two hashes and so on and so forth
11:52 - so hopefully it makes sense so far let's
11:55 - try to compile the program make Mario
11:58 - and I'll slash Mario to run it
12:01 - that's right BAM I died of four okay so
12:05 - it does print a pyramid right but it's
12:08 - not quite the pyramid we want because
12:10 - you can see that our pyramid the one we
12:13 - print is left aligned whereas the one
12:15 - we're required to print by cs50 is a
12:18 - right aligned pyramid so how do we
12:21 - convert this pyramid from left aligned
12:23 - right aligned let's take a look at that
12:26 - so how do we how do we convert it right
12:31 - so here we have a left aligned pyramid
12:33 - and we want it to be right aligned okay
12:37 - so all right how do we go about doing
12:40 - that
12:40 - well we can do is simply add spaces so
12:45 - let's add some spaces there all right so
12:48 - now we can see that all of a sudden the
12:52 - pyramid has become a right aligned
12:54 - pyramid right now just um just forget
12:57 - about these objects here like let's just
12:59 - assume they're spaces all right I'm just
13:01 - putting those objects the symbols just
13:02 - for clarity's sake so let's assume these
13:05 - are spaces and all of a sudden we have a
13:08 - right aligned pyramid so we now know
13:11 - that to convert a pyramid from left
13:13 - aligned right aligned all we need to do
13:15 - is add spaces
13:16 - so how do we actually go about doing
13:19 - that well we need to know how many
13:22 - spaces we should print on every row
13:24 - right so let's try to find some sort of
13:28 - relationship between height spaces and
13:31 - rows so for example let's just take a
13:35 - pyramid of height for all right and this
13:37 - is row zero Row 1 Row 2 and Row 3 so we
13:40 - can see that on row zero there are three
13:42 - spaces I Row 1 there are two spaces and
13:46 - Row two there's one space right so let's
13:51 - try to figure out a relationship somehow
13:53 - okay
13:54 - so a pyramid of height for row zero 3
14:00 - spaces height is 4 rows 1 2 spaces
14:05 - height is 4 row is 2 1 space alright so
14:10 - hopefully you're starting to see a
14:11 - pattern here somewhat 4 0 3 4 1 2 4 2 1
14:18 - all right so I deducted a pattern here
14:21 - which I think you can as well which is
14:24 - that height minus Rho minus 1 is equal
14:29 - spaces so 4 minus 0 minus 1 is equal to
14:35 - 3 4 minus 1 minus 1 is equal to 2 4
14:41 - minus 2 minus 1 is equal to 1 and so on
14:44 - and so forth all right so this works
14:46 - with the payment of any height so let's
14:48 - take another example so let's say height
14:51 - of pyramid is 6 and on a 0 there are
14:53 - five spaces right 6 minus 0 minus one is
14:58 - equal to five six minus one minus one is
15:02 - equal to four so hopefully our so
15:04 - hopefully already understand the pattern
15:06 - here and we came up with the formula
15:07 - right which is basically space equals to
15:11 - height minus Rho minus one and this is
15:14 - just the formula we deducted here so now
15:17 - we know the formula how do we actually
15:19 - go about putting it into code right so
15:23 - now we can see here that on every single
15:26 - Lion the spaces come before the hashes
15:29 - right
15:30 - paces and then the hashes so it makes
15:32 - sense here then we put this that we put
15:35 - the loop for the spaces before the loop
15:38 - for the hashes right so let's make
15:40 - another loop here another for loop
15:42 - within the roll loop right before we
15:44 - print a new line we want to put spaces
15:45 - first so this makes sense
15:47 - so for let's create another variable
15:50 - called space four space equals to zero
15:54 - space less than height minus Rho minus
15:57 - one space plus plus right this is just
16:00 - the Commission is just the formula we
16:02 - found out earlier so for this we want to
16:06 - actually just printf a space all I do is
16:09 - press the space bar and semicolon let's
16:15 - compile the program hopefully it works
16:17 - all right we got an error and that's
16:20 - because we've forgotten to find that
16:21 - space is an int all right so space here
16:25 - what by the way we can also just like
16:27 - right in here instead like intro if you
16:29 - don't wanna do it up there but I just
16:31 - prefer for like just to make it neat
16:33 - right I just put it all the top so these
16:36 - are all ends and now let's try to make
16:38 - Mario again compile it all right
16:41 - well duh / Mario I'd write here for all
16:47 - right so it does print what we want
16:48 - that's great let's write again does
16:50 - slash Mario that's try five alright so
16:54 - it seems to work right works well now
16:57 - before submitting the program we let's
16:59 - actually check all right so cs50 will
17:02 - check it for us so what how we do that
17:04 - is we just need to copy this line over
17:07 - here copy to the terminal window and now
17:12 - it's gonna automatically check for us
17:13 - and actually in a while it's gonna
17:16 - prompt us for a github username all
17:18 - right type that in and our password as
17:21 - well all right so once you check all
17:26 - that you can actually check for the
17:28 - formatting as well and this is South 50
17:30 - and there are points for this as well so
17:31 - you might as well do it so you copy this
17:34 - into the terminal window as well the
17:36 - same way we just did and when you're
17:38 - satisfied with these you can actually
17:40 - just go ahead and submit the final
17:42 - program
17:43 - right that's just by copying this into
17:46 - the terminal window all right I don't
17:48 - know submit it because I've already
17:49 - submitted it so you can just go ahead
17:51 - and do that and we can see that
17:53 - everything here is correct everything
17:55 - green so all works well so you can just
17:57 - go ahead and submit it so that's it for
17:59 - this video guys I hope you enjoyed it I
18:01 - hope it was clear if you have any
18:03 - questions leave them in the comments
18:04 - below and let me know which from said
18:07 - you want me to tackle next I'm thinking
18:09 - of doing the Mario more comfortable next
18:10 - so make sure to stay tuned for that but
18:13 - I'll also be doing the rest of cash
18:14 - credit week 2 week 3 before so make sure
18:17 - to subscribe for all that and yep hope
18:20 - you enjoy guys
18:20 - bye David

Cleaned transcript:

hey guys it's me Mario okay no it's not today we're actually going to be doing the cs50 problem set one Mario walkthrough this is going to be a stepbystep guide for beginners so what's the program actually about the we'd print a pyramid whose height depends on the user so if the user inputs a height of eight we need to print a pyramid with the height of eight if the user inputs a height of four when you print a pair mid with a height of four and so on and so forth now the only condition is that the user it needs to input a number between one can hit so anything outside the range I mean to be prompt them for another height so if the user inputs zero that's outside the one to eight range so we need to replant them again ask for another eye if the input the number 42 we need to replumb them again right so we need to keep on we prompt ting them as long as the range is outside one to eight right and then we need to print permit according to the height that they type in so how can we go about doing this well first of all let's do su the normal stuff let's include our libraries which are standard i/o dot H and cs50 dot H all right now we want to start the program and remember how we do that is int main void and this is basically the equivalent of saying when green flag clicked on scratch right so now we want to prompt the user for some input right so let's create a variable let's call it height height equals now how do we get some input from the user while using the get function right so height equals to get underscore and what type of data do you want here we want a number between 1 and 8 right so that's an integer so we write get underscore int now we prompt the user for some input let's say enter height here and don't forget the semicolon at the end ok so we don't want to just do this once as we said earlier we want to keep on doing this as long as the input a number outside the 1 to 8 range right so for this we use a loop and we can essentially use a dowhile loop which basically means do the following while a certain condition is true so we want to prompt the user for input while height is less than 1 or 10 remember how we say or with those two lines or height is greater than 8 right so no new information here so no new information here so far what we're saying is as long as the height is less than 1 or greater than 8 we need to keep on asking the user saying enter height here all right and now let's just inform the computer that height is an integer so this in type this is just defining the height and just tell the computer hey height is an integer all right so that's what we've done so far let's test out the program let's say make Mario ok compiled dot slash Mario to run it let's try a height 10 ok ask us can let's say hi zero okay after skin let's say height for okay so so far we know the program works right but now what do we need to do we don't we just want to get some input we actually need to go about building the permit being to print the pyramid right so for that now let's just take a look at the pyramid first of all so when we look at the pyramid here we can see that there's some sort of pattern right like there is one hash in the first line to ashes and second line three ashes in the third line and so on and so forth so we know that it somehow involves using loops all right so let's first of all make a loop let's use a for loop so for now in the now we need to put some sort of variable right we can call this variable anything at all we can called ijk X David whatever you want but for the purposes of this video since it's a beginner video I'm just gonna call the variable rule and it has no function at all I'm just calling it row because it helps me remember stuff so I'm calling it a row because I want this to make a new row I want this Lou to make a new row so I said to zero I'll put a condition row less than height row plus plus all right so within this for loop I want to say printf a newline and remember how we do a new line is just backslash n right so basically what I've said here so far is as long as Rho is less than height print a new line all right that's basically what I've said so far and so why is this condition true why do we want to print a new row as almost Rho is less than high because you might be thinking isn't true equal to the height right because we can see Row 1 Row 2 Row 3 Row 4 and the pyramid has height of 4 Behrman with the height of 4 has 4 rows so why do we want to do rule less than height well the explanation is very simple now remember we initialized row to 0 which basically means a pyramid with a height of 4 and we if we start counting from 0 the last row we'll get is 3 so we can see that row 0 has one hash Row 1 has two hashes and so on so now a pair of the height of 4 and the last row is 3 which is why we want to keep on printing a new row as long as Rho is less than hype now what if you put it as less than equal to height then we would actually get a new row here with five hashes and that'll be row four now we don't want this because then the height of the pyramid would be five right so the condition here should be as long as Rho is less than height all right so that makes sense so far but now when we look at the pyramid we don't just want to print new lines before printing every new line we actually want to print a hash all right so we want to print a hash so we need to make another loop right because there is a pattern for the hashes as well like one hash in the first line two hash in the second three in the third and so on so we know we know another loop and let's put that loop inside the row loop so let's call it another for loop let's call this one column because rows go down called Krauss so just intuitively you can name it anything literally anything just for the purposes of clarity I'm gonna name it column so for a column equals to zero initializing column to zero some condition we don't know what yet column plus plus and for this we want to print a hash write printf a hash all right and semicolon now how do we go about finding out what the condition is let's just test it out first let's say call them less than height all right and remember we have to tell the computer that row and column I ins as well so let's just go ahead and do that in row okay this is informing the computer that ruin column are int right now that that's done let's try to compile the program make Mario okay compiles let's run it dot slash Mario let's see how for okay so it prints something but it's not a pyramid right we don't want to block we want a pyramid so we know that there is a problem with the condition here we don't want the same condition for a row and column we need to make it something else something different so the condition I'm gonna put is column less than row and basically what it means now is as long as column is less than or equal to row print a hash so how does this make sense how do we like put some logic into this well it's very simple so basically what I'm saying so far is if column is less than or equal to row print hash right that's my condition so because the column loop is nested inside the row loop remember here column loop is within the row loop every time Row is increased column is initialized to 0 so let's just read that one more time every time row is increase column is initialized to 0 all right just get that in your head and that's because the loop is nested within the rule loop alright so let me just give you an example here now let's take a parameter at the height of three okay so in the first loop true is 0 because we initialized it to 0 and column is here as well so now it's gonna check for the condition the first loop is column less than or equal to row yes because 0 is equal to 0 the condition is true so we print a hash now column is going to try to increase to 1 and then it's gonna check again is column less than or equal to row and this time the condition is not true because 1 is greater than 0 so column is greater than row so it wouldn't print a new hash here so it prints newline and goes to the second loop alright and the second loop it's been row plus plus now so row is 1 and column is once again initialized to 0 all right now it's gonna check is the condition true is column less than or equal to row yes it is because 0 is less than 1 so it's gonna print a new hash and now column will try to increase again and again it's gonna check his column less than or equal to row yes because 1 is equal to 1 all right so it's gonna print another hash and now column will try to increase again it's gonna see column 2 and now we check again is column less than or equal to row and now it's not right because 2 is greater than 1 column is greater than row the condition is not true so we won't print another hash and instead we're gonna print a new line and then we go to the third loop now it's been row plus plus again so row is 2 and column is once again initialized to 0 that's the key that's the key here column is initialized to 0 all right so now it's gonna check is column less than or equal to row yes it is because 0 is less than 2 and hopefully hopefully you're seeing some pattern here hopefully you're getting the hang of this now column we'll try to increase again column is 1 row is 2 is column less than or equal to row yes it is because 1 is less than 2 right so we print another hash now Collin will try to increase again so now it's gonna check again is column less than or equal to row yes it is because 2 is equal to 2 right it's going to print another hash now column will try to increase again and it's gonna say column equals 3 now I'll check for the condition again and column is greater than row so it does not meet this condition so if one print another hash and that's the end of the program because we chose a parameter at the height of 3 and this is just an example so now we can see that on row 0 we have one hash on Row one we have two hashes and in Row two we have three hashes all right and if you look at the initial pyramid here this makes sense because on Rosi row we have one hash on Row one we have two hashes and so on and so forth so hopefully it makes sense so far let's try to compile the program make Mario and I'll slash Mario to run it that's right BAM I died of four okay so it does print a pyramid right but it's not quite the pyramid we want because you can see that our pyramid the one we print is left aligned whereas the one we're required to print by cs50 is a right aligned pyramid so how do we convert this pyramid from left aligned right aligned let's take a look at that so how do we how do we convert it right so here we have a left aligned pyramid and we want it to be right aligned okay so all right how do we go about doing that well we can do is simply add spaces so let's add some spaces there all right so now we can see that all of a sudden the pyramid has become a right aligned pyramid right now just um just forget about these objects here like let's just assume they're spaces all right I'm just putting those objects the symbols just for clarity's sake so let's assume these are spaces and all of a sudden we have a right aligned pyramid so we now know that to convert a pyramid from left aligned right aligned all we need to do is add spaces so how do we actually go about doing that well we need to know how many spaces we should print on every row right so let's try to find some sort of relationship between height spaces and rows so for example let's just take a pyramid of height for all right and this is row zero Row 1 Row 2 and Row 3 so we can see that on row zero there are three spaces I Row 1 there are two spaces and Row two there's one space right so let's try to figure out a relationship somehow okay so a pyramid of height for row zero 3 spaces height is 4 rows 1 2 spaces height is 4 row is 2 1 space alright so hopefully you're starting to see a pattern here somewhat 4 0 3 4 1 2 4 2 1 all right so I deducted a pattern here which I think you can as well which is that height minus Rho minus 1 is equal spaces so 4 minus 0 minus 1 is equal to 3 4 minus 1 minus 1 is equal to 2 4 minus 2 minus 1 is equal to 1 and so on and so forth all right so this works with the payment of any height so let's take another example so let's say height of pyramid is 6 and on a 0 there are five spaces right 6 minus 0 minus one is equal to five six minus one minus one is equal to four so hopefully our so hopefully already understand the pattern here and we came up with the formula right which is basically space equals to height minus Rho minus one and this is just the formula we deducted here so now we know the formula how do we actually go about putting it into code right so now we can see here that on every single Lion the spaces come before the hashes right paces and then the hashes so it makes sense here then we put this that we put the loop for the spaces before the loop for the hashes right so let's make another loop here another for loop within the roll loop right before we print a new line we want to put spaces first so this makes sense so for let's create another variable called space four space equals to zero space less than height minus Rho minus one space plus plus right this is just the Commission is just the formula we found out earlier so for this we want to actually just printf a space all I do is press the space bar and semicolon let's compile the program hopefully it works all right we got an error and that's because we've forgotten to find that space is an int all right so space here what by the way we can also just like right in here instead like intro if you don't wanna do it up there but I just prefer for like just to make it neat right I just put it all the top so these are all ends and now let's try to make Mario again compile it all right well duh / Mario I'd write here for all right so it does print what we want that's great let's write again does slash Mario that's try five alright so it seems to work right works well now before submitting the program we let's actually check all right so cs50 will check it for us so what how we do that is we just need to copy this line over here copy to the terminal window and now it's gonna automatically check for us and actually in a while it's gonna prompt us for a github username all right type that in and our password as well all right so once you check all that you can actually check for the formatting as well and this is South 50 and there are points for this as well so you might as well do it so you copy this into the terminal window as well the same way we just did and when you're satisfied with these you can actually just go ahead and submit the final program right that's just by copying this into the terminal window all right I don't know submit it because I've already submitted it so you can just go ahead and do that and we can see that everything here is correct everything green so all works well so you can just go ahead and submit it so that's it for this video guys I hope you enjoyed it I hope it was clear if you have any questions leave them in the comments below and let me know which from said you want me to tackle next I'm thinking of doing the Mario more comfortable next so make sure to stay tuned for that but I'll also be doing the rest of cash credit week 2 week 3 before so make sure to subscribe for all that and yep hope you enjoy guys bye David
