Hey there, future Python wizards! Today, we're learning about global variables. These are special variables that live outside of functions and can be accessed by everyone, both inside and outside of those functions. Let's start with a simple example. Here, we create a variable x outside of the function and use it inside the function myfunc(). When we call myfunc(), it prints 'Python is awesome'. Easy, right? Notice how the variable x is created outside the function. That's why it's called a global variable. It can be used anywhere in our code. Now, what happens if we create a variable with the same name inside the function? Here, inside myfunc(), we set x to 'fantastic'. But outside the function, x is still 'awesome'. This is because the x inside the function is a local variable, only accessible within myfunc(). See? The global x remains unchanged. Pretty neat, huh? Now, what if we want to create a global variable inside our function? We use the global keyword. This tells Python that we want our variable to be global, and not local. After calling myfunc(), x is now 'fantastic' in the global scale. The global keyword gives us the power to create the global variable inside a function. In the next example we first set x to 'awesome', as a global variable. Then, inside myfunc(), we use the global keyword to change x to 'fantastic'. When we print x outside the function, it shows 'fantastic'. And there you have it! Using the global keyword, we can access and modify global variables from within our functions. Remember, with great power comes great responsibility! Thanks for watching! Like and subscribe to get notified about our latest videos! For more coding tips and tricks, keep it locked right here on W3Schools.com! Don't forget to try out what you've learned in our interactive editor. Happy coding!