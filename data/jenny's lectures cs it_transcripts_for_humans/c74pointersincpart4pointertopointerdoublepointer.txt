With timestamps:

00:01 - so in the series of learning programming
00:02 - in c we are discussing pointers in C so
00:04 - far we have discussed some Basics about
00:06 - pointers and those two operator like
00:08 - address of and indirection operator in
00:10 - pointer as well as how to assign a
00:13 - pointer value to another pointer that we
00:15 - have discussed now in this video we'll
00:17 - see an extended concept of pointer that
00:19 - is pointer to pointer or in other word
00:22 - you can also say it's a double pointer
00:24 - so this concept is also very important
00:26 - when you deal with pointers right we'll
00:28 - discuss this with proper examp example
00:30 - we'll see a simple program also here we
00:32 - will try run that program here how like
00:34 - that program works everything we'll
00:35 - discuss and then I'll show you
00:36 - practically on my laptop using vs code
00:39 - editor right see before going to the
00:42 - pointer to pointer concept or the double
00:44 - pointer concept let me just recap this
00:47 - thing if I if I want to declare a
00:50 - variable like int a is equal to suppose
00:52 - 10 right and if you want to declare a
00:55 - pointer then in Star p and pointer is
00:59 - going to to contain address of any other
01:01 - variable so I'm going to initialize this
01:03 - here only address of a right int SRI p
01:08 - means it means see in memory if suppose
01:10 - in memory this is our
01:13 - memory you can draw it horizontally or
01:16 - vertically it's up to you right and it's
01:18 - like you can say it's a long tape of
01:20 - bites something like
01:22 - this right now these are like one by 1
01:26 - by one by this kind of thing so in a is
01:28 - equal to 10 so somewhere memory would be
01:30 - to this a that is 4 by maybe suppose we
01:33 - have this this memory something like
01:36 - this and these four bytes from here 1 2
01:38 - 3 4 these four bytes has been allocated
01:40 - to this a right and here I'm going to
01:43 - store
01:45 - 10 like in 32 bits 10 would be you know
01:48 - this would be converted into binary
01:50 - digit like 0 and one in 32 bits and that
01:52 - would be stored here right so now this
01:54 - is for a and int star p is estri means
01:59 - obviously this would be a pointer this
02:01 - is Declaration of pointer or as well as
02:03 - initialization of this pointer so it
02:04 - will tell the compiler that P would be a
02:06 - pointer but obviously memory would be
02:07 - allocated to this what is size of
02:09 - pointer on a 32-bit machine it it would
02:11 - take four byte right so suppose here we
02:14 - have pointer these four by one 2 3
02:17 - 4 1 2 3 4 these four bites would be for
02:20 - this P here we have p and here what
02:23 - would be stored address of a and suppose
02:25 - address of a is this this bite this
02:27 - address of a is suppose 1,000 1 th1
02:31 - 1,2,3 so obviously we'll take Base
02:34 - address like the address of the first
02:35 - bite of this first address of the first
02:38 - bite that would be address of this a so
02:40 - now this th000 would be stored here
02:42 - right so this would be pointing to this
02:44 - memory location right so simp for
02:47 - Simplicity purpose I'm just drawing this
02:49 - thing like this here we have
02:53 - a somewhere in memory and location is
02:56 - address is th000 in a we have 10 right
02:59 - and one pointer we
03:01 - have p and suppose address of this is uh
03:05 - maybe I don't know what should be the
03:06 - address or I can say like
03:08 - 850 maybe I mean address would be in
03:11 - hexadecimal form obviously right so now
03:14 - in P what we have address of a address
03:15 - of pH th000 so in P we have 1,000 so now
03:19 - p is pointing to this a something like
03:22 - this this would be the visual
03:23 - representation of this this thing right
03:27 - so now p is what a pointer to integer
03:30 - data type
03:32 - right type of this is int like if I
03:36 - write here type of this is like int star
03:40 - this thing you can say because this is a
03:42 - pointer so I think this thing is clear
03:44 - to you because this is going to be very
03:46 - important whatever data type you write
03:48 - here in the Declaration of this pointer
03:50 - this will
03:52 - tell this pointer is going to store or
03:54 - this pointer is going to point which
03:56 - data type of variable right means here p
04:00 - is going to store address of a variable
04:02 - whose data type is integer should be
04:03 - integer if your data type is float that
04:05 - would be illegal right I hope you got
04:08 - this now now what is pointer to
04:12 - pointer pointer two pointer means see
04:15 - this is pointer to
04:18 - variable right pointer to variable it
04:21 - means this pointer is going to store
04:22 - address of this variable if I say
04:24 - pointer to
04:26 - pointer
04:28 - means a point pointer to pointer is or
04:31 - you can say double pointer is a special
04:33 - variable or special pointer which is
04:35 - going to store address of another
04:39 - pointer right not any ordinary or normal
04:42 - variable this double point is going to
04:44 - store address of other pointer variable
04:48 - so if I take here suppose Q I'm taking Q
04:52 - is another pointer and is Q is going to
04:55 - store it is pointer to pointer means it
04:58 - is pointer to suppose this
05:01 - pointer right it is not pointer to a
05:04 - normal variable it is pointer to pointer
05:06 - that is why it is double pointer right
05:09 - it is going to show
05:11 - level right so now here 1,000 so not
05:15 - th000 here address of P would be stored
05:18 - now address of this pointer is 850 so
05:20 - here it should be 850 and obviously it
05:23 - is a variable so it is also having some
05:26 - memory location suppose memory location
05:27 - is
05:28 - 1046
05:30 - right so now Q is here double
05:33 - pointer Q is pointer to a
05:37 - pointer to variable so now how to
05:41 - declare this Q
05:44 - see
05:46 - in if I want to declare q and in Q I'm
05:49 - going to store address of obviously P so
05:53 - now first
05:55 - thing Q is also a pointer right and S
05:59 - will tell the compiler in in the
06:01 - Declaration estri will tell the compiler
06:03 - that it is a pointer so definitely one
06:05 - estri would tell that Q would be a
06:08 - pointer right now Q is going to store
06:11 - address of a pointer variable so here
06:14 - data type which type of data type you
06:17 - will use whose address this Q is going
06:20 - to store so Q is going to store address
06:22 - of this
06:23 - P so here data type what you will write
06:26 - int SRI int
06:31 - SRI that is why here we are having two
06:33 - estri in double pointer I hope you got
06:36 - this concept why double estri here right
06:40 - here estri will tell it is single level
06:43 - pointer estri will tell this this is a
06:44 - pointer and int will tell data type of
06:47 - this variable so here this estc will
06:49 - tell that Q is pointer obviously Q is a
06:51 - pointer because it is storing address
06:53 - but it is storing address of a pointer
06:55 - variable so a data type you can write
06:58 - here we have have to tell here the type
07:01 - which type of address it is going to
07:02 - store so that should be in
07:05 - Star right so I hope you got this thing
07:08 - or you can say it is having what two
07:10 - level
07:12 - pointer right so now what you can say
07:15 - how you can initialize it it will
07:16 - contain address of another pointer that
07:19 - is
07:21 - p if you write here address of
07:24 - a it would be illegal right it will give
07:28 - some warning message
07:30 - incompatible know pointer type because a
07:32 - is what normal variable and it is double
07:34 - pointer so according to the rule it
07:36 - should contain address of a pointer
07:39 - variable only right so here we must
07:42 - write any pointer variable that is p now
07:46 - this is correct I hope you got now what
07:49 - is double pointer right now see if you
07:52 - want to print value of
07:54 - a how you can print a is equal to I'm
07:58 - going to print you using three methods
08:00 - so three percentage I'm writing here
08:03 - either you can write here
08:05 - what here I'm writing a so that will
08:08 - also give 10 or you can access it using
08:10 - this pointer also how you can write
08:13 - estri
08:15 - P estri IND Direction operator here it
08:18 - will act as IND Direction operator but
08:19 - here it is not IND Direction operator
08:21 - right because it is Declaration of
08:23 - pointer so here we have already declared
08:26 - after that if you use this one this
08:28 - thing then it will act as Direction
08:29 - operator or D referencing operator so
08:31 - value at this address right it it will
08:33 - also give 10 but if you want to access
08:37 - using this Q using this double pointer
08:39 - then how you will access C if I
08:43 - write s
08:45 - q it means estri q estri q means Q is
08:51 - what having address of p in Q we have
08:56 - 850 that is address of P so so it means
09:00 - this will tell value at this address and
09:04 - address of p is
09:06 - 850 so it will give value at 850 value
09:09 - at 850 is
09:12 - 1,000 but that that's not we want we
09:15 - want value of
09:16 - a so we want value at th000 this is
09:21 - again address so again put ack here at
09:26 - that time it will give 10 value at 1,000
09:28 - would be 10 so here means it will we
09:31 - will
09:33 - use two in Direction operator because it
09:36 - is obviously it is of it is you can say
09:38 - it's of two level pointer so for
09:41 - accessing this value firstly we will go
09:43 - here then we will go here so one estri
09:45 - we will use then we go here another
09:47 - estri we use then we'll go here right so
09:51 - see here one more estri we have here one
09:54 - morec we have so value at 850 is
09:58 - 1,000 one more stric value at th000 is
10:01 - 10 so finally it will give 10 so using
10:04 - double pointer also you can access this
10:06 - a I hope now you got the concept of
10:09 - double pointer and same you can increase
10:12 - this level
10:13 - also right if I want to uh know store
10:17 - address of the
10:18 - skew suppose I'm taking one more
10:21 - variable uh PQ
10:24 - R and here I want to store address of
10:26 - this q that is 1046
10:29 - so it should point to here and suppose
10:32 - address of this is
10:34 - 2046 so now Q is what pointer to pointer
10:40 - two pointer two variable it is having
10:44 - three level 1 2 and
10:47 - 3 right it means how you will declare
10:53 - this
10:54 - in so now obviously R is a pointer
10:57 - variable because it is any address so
11:01 - this 1 s trick will tell the compiler
11:04 - that it is a it is what pointer type of
11:07 - variable whose address it will
11:10 - contain Q so Q type in general if you
11:14 - write like this would be
11:16 - int
11:18 - estri
11:20 - estri right because it is also
11:23 - containing this address address of a
11:25 - pointer and then variable so here we
11:27 - will write two s one and again one so
11:32 - it's of three level so here we can store
11:34 - address of
11:36 - Q if you want to store her address of
11:40 - P that would also be
11:42 - illegal right because 1 2 three three
11:47 - level pointer or in short in shortcut or
11:49 - in simple term you can say it is three
11:52 - level pointer so it can store according
11:54 - to the rule address of two level pointer
11:56 - two level pointer is Q so according to
11:59 - the rule it should store address of Q if
12:02 - a two level pointer it should store
12:04 - address of one level pointer if a one
12:06 - level pointer it should store address of
12:08 - zero level because a is what obviously
12:11 - zero level having zero level it is
12:13 - having one level it is two level it is
12:14 - three
12:15 - level
12:17 - right so I hope you got this and using R
12:21 - if you want to access a then how you can
12:25 - access 1 2 3 and R here you can write
12:31 - this thing see how you will get this
12:34 - thing SRI SRI estrick and R is what
12:39 - address of Q address of Q is
12:44 - 850 first of all this one then this one
12:48 - and then this you can write this also
12:51 - but better to write here the level in
12:54 - Brackets this and this it's a good
12:57 - practice what one bracket something like
13:00 - this right this is also fine without any
13:03 - brackets so first this star value it
13:07 - means it will give value at this address
13:10 - whatever the address return to the next
13:12 - of this star so estri estri and what
13:17 - this will give value at 850 value at
13:19 - 850 value at 850 is oh not 850 see R is
13:25 - what address of Q address of Q is 10
13:30 - 46 right in R we have 1046 so value at
13:33 - 1046 is 850 so this will give
13:37 - what
13:39 - 850 now this SRI value at 850 value at
13:43 - 850 is 1,000 so it will
13:45 - give 1,000 so now this s value at th000
13:49 - is 10 so it will give 10 so finally
13:51 - answer would be 10 this is how you can
13:54 - access the variable using three level
13:57 - pointer right and if you want to store
14:00 - if you want to you know change this
14:02 - value using these double pointer and
14:04 - this
14:05 - pointer then how you can write if you
14:07 - write something like
14:10 - this if I write here estri estri Q is
14:14 - equal to
14:16 - 25 and now I want to print value of a
14:19 - then what should be the answer C estri
14:21 - and EST Q it means what you are
14:24 - accessing this 25 would be stored where
14:26 - the s q means value at Q in Q we are
14:30 - having 850 so value at 850 is value at
14:34 - 850 is 1,000 then again here would be
14:37 - th000 but this star we also have then
14:40 - value at th000 is 10 so ultimately we
14:44 - are accessing this and here we are going
14:46 - to show 25 so if you want to print a now
14:49 - then it would be
14:50 - 25 right but but see here I'm writing
14:55 - here I'm writing this is question for
14:57 - you rather than this I'm just writing s
15:00 - q is equal to 25 what would be the
15:03 - answer if you will print a then what
15:06 - would be the answer or where this 25
15:07 - would be stored or it it will give any
15:09 - error or it is illegal or not that you
15:11 - have to tell me in comment box right I
15:14 - think it it is illegal it will give some
15:16 - error why so see EST Q means value at q
15:21 - q is what Q is containing 850 so SRI 850
15:26 - Q is what pointer to pointer so when
15:28 - value at
15:29 - 850 value at 850 is 1,000 and here I
15:33 - want to store
15:34 - 25 but here it is containing
15:38 - address so directly we cannot assign any
15:41 - integer value here in any pointer this
15:44 - would be invalid incompatible type of
15:47 - error it will give right because the
15:50 - here the DAT type is or you can say here
15:52 - this type of this is what in Star but
15:55 - you are going to assign integer only
15:57 - that would be illegal
15:59 - right so it will give error fine now see
16:04 - you have to assign this Q value using
16:07 - this R pointer that you have to do right
16:13 - you have to change this value to
16:15 - 50 but using this pointer R how you will
16:19 - change it and how you will print that
16:22 - thing you have to tell me in comment box
16:23 - right so I guess this is not very tough
16:25 - you got the concept pointer two pointer
16:27 - or double pointer and why we are writing
16:29 - this this double pointer and using
16:31 - double pointer also how you will access
16:33 - the variable value of that
16:36 - variable right so now let me show you
16:38 - practically this thing so now let me
16:41 - create a file
16:42 - here I'm taking
16:46 - name double pointer do c
16:53 - right header file and then we'll write
16:56 - main function and here I'm going to take
16:59 - a variable in a is equal to 10 and here
17:03 - I'm taking a what single pointer first
17:06 - of all right in single pointer we can
17:09 - store address of a normal variable right
17:12 - address of a and here I want I'm
17:15 - declaring double pointer suppose q and
17:17 - in double pointer I'm initializing we
17:19 - can store according to the rule address
17:21 - of any pointer variable so here we have
17:24 - P pointer variable right so now uh
17:30 - just
17:31 - print a a is equal to percentage
17:35 - D and
17:38 - uh we are printing value of a
17:42 - here using simple a or another method is
17:46 - you can also print a is equal to
17:49 - percentage D and using pointer single
17:52 - pointer so estri
17:54 - P that's it right and one more more
17:58 - method is obviously we can also
18:01 - access this variable using double
18:04 - pointer also right it's a chain of
18:06 - pointer right print
18:09 - F or you can say it's
18:13 - like of a right obviously if you have
18:16 - relative it's D relative but then also
18:20 - anyone who knows your D relatives then
18:23 - he or she can also access you through
18:26 - those dur relatives right I hope hope
18:28 - you got my point so now a is equal to
18:32 - because you know these are Interlink
18:34 - pointer two pointer then two variable so
18:37 - percentage D and here how to access
18:42 - estri
18:43 - estri and
18:47 - Q
18:49 - right now let me print
18:52 - this what output it will give give C in
18:56 - three cases a is 10 it is is giving
18:58 - value of pH 10 so using double pointer
19:01 - also this is how you can access this a
19:04 - or if I write here see if I write here
19:07 - in s p is equal to um address of a I'm
19:12 - going to store address of a single
19:14 - simple variable normal variable and here
19:17 - let me just run this and see what
19:19 - happens see initialization of in star
19:23 - star it's like incompatible pointer type
19:26 - int Star right so it will give this type
19:28 - of error and it has stopped working so
19:31 - according to the rule we shouldn't do
19:32 - this
19:36 - right and see it is giving a 10 and a 10
19:39 - these two a and star B so that is not
19:43 - correct if a two Lev pointer it it can
19:45 - only store address of a one level
19:47 - pointer that is address of P right and
19:50 - here if I'm taking int three level
19:53 - pointer star star star
19:56 - r that according to the rule should
19:58 - contain address so for two level pointer
20:00 - here two level pointer is Q because it
20:03 - is having two estri
20:04 - right so that's it and using this also
20:09 - we can also access
20:12 - a a is equal to percentage D and uh here
20:18 - I'm accessing how three SRI sign we have
20:22 - to use right because it is three level
20:24 - pointer srick and here I'm using what
20:30 - R so this also will give you same result
20:34 - that is 10 see here a is equal to 10
20:39 - fine
20:41 - now another another thing what we can do
20:44 - is see
20:46 - here if you want to print if you want to
20:49 - print address of
20:51 - Q you want to print address of Q so
20:55 - address of Q is where in which pointer
20:58 - in r r is storing address of Q so if you
21:02 - print here print
21:05 - F address of
21:08 - Q in hexadecimal form I want to print so
21:11 - percentage uh X right and simply you can
21:15 - print R and that will give address of Q
21:20 - or if you want to print address of Q
21:23 - then you can also write address of
21:25 - operator and address of Q so here I'm
21:28 - writing two percentage x two times and
21:31 - that that should give same result right
21:34 - and suppose you want to print address of
21:37 - address of P now address of p is where
21:40 - in Q right
21:43 - so address of p is equal to address
21:47 - would be in exod decimal form and using
21:50 - two know method I want to print one is
21:53 - what address of Simply use address of
21:55 - operator so address of P it will give
21:57 - address of P or next thing is address of
21:59 - p is where in Q pointer Q is double
22:03 - pointer so simply you can print Q
22:06 - here that will also give address of P
22:09 - right so now let me save this and let me
22:13 - run this now what it will give
22:20 - see okay let me uh do what
22:25 - here it should be SL then you will get
22:29 - it better right see
22:32 - now address of Q is both are giving same
22:37 - result address of Q is either you can
22:39 - print r or address of Q obviously
22:41 - address would be same so it will give
22:42 - same result address of PS both are
22:45 - giving same 61 FC C4 fc4 right so this
22:50 - is the method either you can print
22:52 - address of P using address of p and or Q
22:55 - right address of R if you want toint
22:58 - print
22:59 - then then address of RS where is stored
23:02 - no we have no pointer which is going to
23:05 - store address of Q we haven't declared
23:07 - any pointer if you want to declare you
23:09 - can see like star star star star another
23:12 - pointer maybe you can say and take s or
23:15 - t or there you can store address of r
23:18 - four level pointer right or simply you
23:20 - can print here address of R using
23:22 - address of operator right and you can
23:24 - also see something like you can also do
23:26 - something like this if I write here star
23:30 - p is equal to
23:33 - 2 right and after that I'm writing star
23:37 - star Q is equal to
23:41 - 17 so according to what should be the
23:43 - final value of a see SRI p means value
23:49 - at p in P we have what address of a so
23:52 - value at that address is 10 so in a 12
23:56 - would be stored but again estri SRI Q
23:59 - this is also another way what to
24:02 - access value of a so now value of a
24:06 - becomes 17 so final value of a becomes
24:08 - 17 so it should print 17 see
24:17 - now let me save it and again run it see
24:21 - now value of a 17 I hope you go we can
24:25 - update this thing or using this operator
24:27 - Al so like s star star star R and if I
24:30 - write here 78 now final value of a is 78
24:34 - because this also meaning of this is
24:36 - also same thing we are accessing value
24:37 - of a right I hope this is clear double
24:41 - pointer and you know level of
24:43 - pointers so you can also know practice
24:46 - these kind of simple simple problems
24:47 - using these double pointer and triple
24:50 - pointer and this kind of thing and you
24:51 - can print uh try to print values and
24:54 - variables and you can see what kind of
24:56 - error you are getting right so that's it
24:58 - for this video now so in the next video
25:00 - we'll see some another concept of
25:02 - pointers now I'll see you in the next
25:03 - video till then bye-bye take care

Cleaned transcript:

so in the series of learning programming in c we are discussing pointers in C so far we have discussed some Basics about pointers and those two operator like address of and indirection operator in pointer as well as how to assign a pointer value to another pointer that we have discussed now in this video we'll see an extended concept of pointer that is pointer to pointer or in other word you can also say it's a double pointer so this concept is also very important when you deal with pointers right we'll discuss this with proper examp example we'll see a simple program also here we will try run that program here how like that program works everything we'll discuss and then I'll show you practically on my laptop using vs code editor right see before going to the pointer to pointer concept or the double pointer concept let me just recap this thing if I if I want to declare a variable like int a is equal to suppose 10 right and if you want to declare a pointer then in Star p and pointer is going to to contain address of any other variable so I'm going to initialize this here only address of a right int SRI p means it means see in memory if suppose in memory this is our memory you can draw it horizontally or vertically it's up to you right and it's like you can say it's a long tape of bites something like this right now these are like one by 1 by one by this kind of thing so in a is equal to 10 so somewhere memory would be to this a that is 4 by maybe suppose we have this this memory something like this and these four bytes from here 1 2 3 4 these four bytes has been allocated to this a right and here I'm going to store 10 like in 32 bits 10 would be you know this would be converted into binary digit like 0 and one in 32 bits and that would be stored here right so now this is for a and int star p is estri means obviously this would be a pointer this is Declaration of pointer or as well as initialization of this pointer so it will tell the compiler that P would be a pointer but obviously memory would be allocated to this what is size of pointer on a 32bit machine it it would take four byte right so suppose here we have pointer these four by one 2 3 4 1 2 3 4 these four bites would be for this P here we have p and here what would be stored address of a and suppose address of a is this this bite this address of a is suppose 1,000 1 th1 1,2,3 so obviously we'll take Base address like the address of the first bite of this first address of the first bite that would be address of this a so now this th000 would be stored here right so this would be pointing to this memory location right so simp for Simplicity purpose I'm just drawing this thing like this here we have a somewhere in memory and location is address is th000 in a we have 10 right and one pointer we have p and suppose address of this is uh maybe I don't know what should be the address or I can say like 850 maybe I mean address would be in hexadecimal form obviously right so now in P what we have address of a address of pH th000 so in P we have 1,000 so now p is pointing to this a something like this this would be the visual representation of this this thing right so now p is what a pointer to integer data type right type of this is int like if I write here type of this is like int star this thing you can say because this is a pointer so I think this thing is clear to you because this is going to be very important whatever data type you write here in the Declaration of this pointer this will tell this pointer is going to store or this pointer is going to point which data type of variable right means here p is going to store address of a variable whose data type is integer should be integer if your data type is float that would be illegal right I hope you got this now now what is pointer to pointer pointer two pointer means see this is pointer to variable right pointer to variable it means this pointer is going to store address of this variable if I say pointer to pointer means a point pointer to pointer is or you can say double pointer is a special variable or special pointer which is going to store address of another pointer right not any ordinary or normal variable this double point is going to store address of other pointer variable so if I take here suppose Q I'm taking Q is another pointer and is Q is going to store it is pointer to pointer means it is pointer to suppose this pointer right it is not pointer to a normal variable it is pointer to pointer that is why it is double pointer right it is going to show level right so now here 1,000 so not th000 here address of P would be stored now address of this pointer is 850 so here it should be 850 and obviously it is a variable so it is also having some memory location suppose memory location is 1046 right so now Q is here double pointer Q is pointer to a pointer to variable so now how to declare this Q see in if I want to declare q and in Q I'm going to store address of obviously P so now first thing Q is also a pointer right and S will tell the compiler in in the Declaration estri will tell the compiler that it is a pointer so definitely one estri would tell that Q would be a pointer right now Q is going to store address of a pointer variable so here data type which type of data type you will use whose address this Q is going to store so Q is going to store address of this P so here data type what you will write int SRI int SRI that is why here we are having two estri in double pointer I hope you got this concept why double estri here right here estri will tell it is single level pointer estri will tell this this is a pointer and int will tell data type of this variable so here this estc will tell that Q is pointer obviously Q is a pointer because it is storing address but it is storing address of a pointer variable so a data type you can write here we have have to tell here the type which type of address it is going to store so that should be in Star right so I hope you got this thing or you can say it is having what two level pointer right so now what you can say how you can initialize it it will contain address of another pointer that is p if you write here address of a it would be illegal right it will give some warning message incompatible know pointer type because a is what normal variable and it is double pointer so according to the rule it should contain address of a pointer variable only right so here we must write any pointer variable that is p now this is correct I hope you got now what is double pointer right now see if you want to print value of a how you can print a is equal to I'm going to print you using three methods so three percentage I'm writing here either you can write here what here I'm writing a so that will also give 10 or you can access it using this pointer also how you can write estri P estri IND Direction operator here it will act as IND Direction operator but here it is not IND Direction operator right because it is Declaration of pointer so here we have already declared after that if you use this one this thing then it will act as Direction operator or D referencing operator so value at this address right it it will also give 10 but if you want to access using this Q using this double pointer then how you will access C if I write s q it means estri q estri q means Q is what having address of p in Q we have 850 that is address of P so so it means this will tell value at this address and address of p is 850 so it will give value at 850 value at 850 is 1,000 but that that's not we want we want value of a so we want value at th000 this is again address so again put ack here at that time it will give 10 value at 1,000 would be 10 so here means it will we will use two in Direction operator because it is obviously it is of it is you can say it's of two level pointer so for accessing this value firstly we will go here then we will go here so one estri we will use then we go here another estri we use then we'll go here right so see here one more estri we have here one morec we have so value at 850 is 1,000 one more stric value at th000 is 10 so finally it will give 10 so using double pointer also you can access this a I hope now you got the concept of double pointer and same you can increase this level also right if I want to uh know store address of the skew suppose I'm taking one more variable uh PQ R and here I want to store address of this q that is 1046 so it should point to here and suppose address of this is 2046 so now Q is what pointer to pointer two pointer two variable it is having three level 1 2 and 3 right it means how you will declare this in so now obviously R is a pointer variable because it is any address so this 1 s trick will tell the compiler that it is a it is what pointer type of variable whose address it will contain Q so Q type in general if you write like this would be int estri estri right because it is also containing this address address of a pointer and then variable so here we will write two s one and again one so it's of three level so here we can store address of Q if you want to store her address of P that would also be illegal right because 1 2 three three level pointer or in short in shortcut or in simple term you can say it is three level pointer so it can store according to the rule address of two level pointer two level pointer is Q so according to the rule it should store address of Q if a two level pointer it should store address of one level pointer if a one level pointer it should store address of zero level because a is what obviously zero level having zero level it is having one level it is two level it is three level right so I hope you got this and using R if you want to access a then how you can access 1 2 3 and R here you can write this thing see how you will get this thing SRI SRI estrick and R is what address of Q address of Q is 850 first of all this one then this one and then this you can write this also but better to write here the level in Brackets this and this it's a good practice what one bracket something like this right this is also fine without any brackets so first this star value it means it will give value at this address whatever the address return to the next of this star so estri estri and what this will give value at 850 value at 850 value at 850 is oh not 850 see R is what address of Q address of Q is 10 46 right in R we have 1046 so value at 1046 is 850 so this will give what 850 now this SRI value at 850 value at 850 is 1,000 so it will give 1,000 so now this s value at th000 is 10 so it will give 10 so finally answer would be 10 this is how you can access the variable using three level pointer right and if you want to store if you want to you know change this value using these double pointer and this pointer then how you can write if you write something like this if I write here estri estri Q is equal to 25 and now I want to print value of a then what should be the answer C estri and EST Q it means what you are accessing this 25 would be stored where the s q means value at Q in Q we are having 850 so value at 850 is value at 850 is 1,000 then again here would be th000 but this star we also have then value at th000 is 10 so ultimately we are accessing this and here we are going to show 25 so if you want to print a now then it would be 25 right but but see here I'm writing here I'm writing this is question for you rather than this I'm just writing s q is equal to 25 what would be the answer if you will print a then what would be the answer or where this 25 would be stored or it it will give any error or it is illegal or not that you have to tell me in comment box right I think it it is illegal it will give some error why so see EST Q means value at q q is what Q is containing 850 so SRI 850 Q is what pointer to pointer so when value at 850 value at 850 is 1,000 and here I want to store 25 but here it is containing address so directly we cannot assign any integer value here in any pointer this would be invalid incompatible type of error it will give right because the here the DAT type is or you can say here this type of this is what in Star but you are going to assign integer only that would be illegal right so it will give error fine now see you have to assign this Q value using this R pointer that you have to do right you have to change this value to 50 but using this pointer R how you will change it and how you will print that thing you have to tell me in comment box right so I guess this is not very tough you got the concept pointer two pointer or double pointer and why we are writing this this double pointer and using double pointer also how you will access the variable value of that variable right so now let me show you practically this thing so now let me create a file here I'm taking name double pointer do c right header file and then we'll write main function and here I'm going to take a variable in a is equal to 10 and here I'm taking a what single pointer first of all right in single pointer we can store address of a normal variable right address of a and here I want I'm declaring double pointer suppose q and in double pointer I'm initializing we can store according to the rule address of any pointer variable so here we have P pointer variable right so now uh just print a a is equal to percentage D and uh we are printing value of a here using simple a or another method is you can also print a is equal to percentage D and using pointer single pointer so estri P that's it right and one more more method is obviously we can also access this variable using double pointer also right it's a chain of pointer right print F or you can say it's like of a right obviously if you have relative it's D relative but then also anyone who knows your D relatives then he or she can also access you through those dur relatives right I hope hope you got my point so now a is equal to because you know these are Interlink pointer two pointer then two variable so percentage D and here how to access estri estri and Q right now let me print this what output it will give give C in three cases a is 10 it is is giving value of pH 10 so using double pointer also this is how you can access this a or if I write here see if I write here in s p is equal to um address of a I'm going to store address of a single simple variable normal variable and here let me just run this and see what happens see initialization of in star star it's like incompatible pointer type int Star right so it will give this type of error and it has stopped working so according to the rule we shouldn't do this right and see it is giving a 10 and a 10 these two a and star B so that is not correct if a two Lev pointer it it can only store address of a one level pointer that is address of P right and here if I'm taking int three level pointer star star star r that according to the rule should contain address so for two level pointer here two level pointer is Q because it is having two estri right so that's it and using this also we can also access a a is equal to percentage D and uh here I'm accessing how three SRI sign we have to use right because it is three level pointer srick and here I'm using what R so this also will give you same result that is 10 see here a is equal to 10 fine now another another thing what we can do is see here if you want to print if you want to print address of Q you want to print address of Q so address of Q is where in which pointer in r r is storing address of Q so if you print here print F address of Q in hexadecimal form I want to print so percentage uh X right and simply you can print R and that will give address of Q or if you want to print address of Q then you can also write address of operator and address of Q so here I'm writing two percentage x two times and that that should give same result right and suppose you want to print address of address of P now address of p is where in Q right so address of p is equal to address would be in exod decimal form and using two know method I want to print one is what address of Simply use address of operator so address of P it will give address of P or next thing is address of p is where in Q pointer Q is double pointer so simply you can print Q here that will also give address of P right so now let me save this and let me run this now what it will give see okay let me uh do what here it should be SL then you will get it better right see now address of Q is both are giving same result address of Q is either you can print r or address of Q obviously address would be same so it will give same result address of PS both are giving same 61 FC C4 fc4 right so this is the method either you can print address of P using address of p and or Q right address of R if you want toint print then then address of RS where is stored no we have no pointer which is going to store address of Q we haven't declared any pointer if you want to declare you can see like star star star star another pointer maybe you can say and take s or t or there you can store address of r four level pointer right or simply you can print here address of R using address of operator right and you can also see something like you can also do something like this if I write here star p is equal to 2 right and after that I'm writing star star Q is equal to 17 so according to what should be the final value of a see SRI p means value at p in P we have what address of a so value at that address is 10 so in a 12 would be stored but again estri SRI Q this is also another way what to access value of a so now value of a becomes 17 so final value of a becomes 17 so it should print 17 see now let me save it and again run it see now value of a 17 I hope you go we can update this thing or using this operator Al so like s star star star R and if I write here 78 now final value of a is 78 because this also meaning of this is also same thing we are accessing value of a right I hope this is clear double pointer and you know level of pointers so you can also know practice these kind of simple simple problems using these double pointer and triple pointer and this kind of thing and you can print uh try to print values and variables and you can see what kind of error you are getting right so that's it for this video now so in the next video we'll see some another concept of pointers now I'll see you in the next video till then byebye take care
