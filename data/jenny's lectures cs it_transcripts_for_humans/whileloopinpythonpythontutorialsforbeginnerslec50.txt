With timestamps:

00:00 - so in the series of learning Python
00:01 - programming language in the previous
00:03 - video we have worked on a project
00:04 - password generator I hope you have done
00:06 - that project right because that was not
00:08 - too tough until now we have discussed uh
00:11 - for Loop in Python so now we'll be
00:13 - discussing while loop in Python there is
00:15 - no do while loop in Python like in other
00:17 - languages C C plus plus Java for while
00:20 - and do while but there is no doubt Loop
00:22 - so now the next Loop is while loop and
00:24 - we'll be seeing each and everything
00:25 - about while loop how this while loop is
00:28 - different from for Loop and when to use
00:30 - for Loop when to use while loop as well
00:33 - as while with else block also the
00:35 - working syntax with the help of program
00:37 - examples will be seeing this practically
00:39 - also I will show you right now okay
00:42 - while loop basically see you know why we
00:46 - use Loops when you want to you know
00:49 - execute a statement or set of statements
00:52 - repeatedly multiple times then we use
00:55 - Loop you put those statements in Loop
00:57 - and that's it right same while loop is
01:00 - also used when you want to repeat a
01:04 - statement or block of statements when
01:07 - you want to execute block of statements
01:08 - repeatedly
01:10 - until a given condition is true until a
01:14 - given condition is satisfied
01:16 - right okay let's see the syntax
01:20 - how you will write y then here you will
01:23 - write condition whatever condition you
01:25 - want to give or you can say expression
01:27 - any expression also you can
01:30 - you can write and that that expression
01:32 - would be evaluated ultimately uh you
01:34 - know in the form of Boolean value true
01:36 - or false and based on that if this thing
01:39 - is true then here you can say the loop
01:42 - body or we can write some statements
01:44 - a single statement or multiple
01:46 - statements also that's it
01:48 - don't forget to put a call in right so
01:52 - now this these statements would be
01:54 - executed repeatedly
01:56 - until this given condition is true
02:00 - right
02:01 - okay now with the help of flowchart let
02:04 - me just show you
02:05 - we are entering into the while loop so
02:08 - first thing is what
02:10 - this condition would be tested
02:14 - right if this condition is true two
02:18 - cases can be the true or false
02:21 - if this condition is true then these
02:25 - statements should be executed
02:28 - it may be a single statement or multiple
02:30 - statements and those statements should
02:32 - be indented right because indentation is
02:35 - the only way to you know denote in
02:38 - Python that this is a block and these
02:41 - statements are within this value right
02:43 - there is no these kind of braces right
02:47 - now after this statement will be
02:51 - executed again condition would be
02:52 - checked again trigger false and this
02:54 - would be in Loop if this is condition is
02:58 - false then simply exit from while loop
03:02 - see it's exit from while loop not exit
03:05 - from actually program because once this
03:07 - condition becomes false the whatever you
03:10 - will write immediately after this while
03:12 - loop those statements would be executed
03:14 - that's it so this is syntax this is
03:17 - simple flowchart and working of while
03:19 - loop now see let's take a simple example
03:23 - here
03:25 - so if you take the same example like if
03:27 - you want to print number from one to
03:29 - five or one to ten or any number then
03:31 - using for Loop also we can do if you do
03:33 - with this while loop then simply we take
03:35 - a variable like any variable a b c d
03:37 - count IE or anything we start with
03:39 - initialize with one and while the
03:42 - conditional will give while count less
03:45 - than equal to
03:46 - Phi
03:48 - print count
03:51 - but not that's it you have to increase
03:53 - this count also count Plus
03:56 - plus count plus one right
03:59 - so first time count is one condition
04:02 - would be checked condition true Count
04:03 - would be printed one then count becomes
04:06 - count becomes two then two condition
04:10 - true again two will be printed then it
04:11 - becomes three like this till 5 1 2 3 4 5
04:15 - like this five would be printed and
04:17 - after that it becomes sixth condition is
04:19 - not true exit from the while loop and
04:21 - whatever you will write immediately this
04:23 - that would be executed right if nothing
04:25 - is there then exit from the program
04:28 - simple working
04:29 - but
04:31 - here see here we know like this also we
04:33 - can do with for Loop also this this
04:34 - thing then why why Loop
04:38 - in which cases it is beneficial to use
04:41 - while loop for Loop is more like a
04:43 - iterator in Python right now basically
04:46 - we use while loop in those situation
04:48 - when user you know in advance user or we
04:53 - don't know
04:55 - the number of times how many you know
04:58 - how many times these statements would be
05:00 - executed in this program we know how
05:02 - many times does these statements these
05:04 - two statements are part of this value
05:06 - would be executed how many times five
05:07 - times in advance we know because we have
05:10 - you know written this program like that
05:12 - till one two five I want to print but
05:15 - what if you don't know in advance how
05:16 - many times these statements whatever
05:19 - statement you will write those would be
05:20 - executed
05:21 - user will decide that number of times
05:24 - these statements would be executed
05:27 - right
05:28 - so in those situations it's better to
05:31 - use while loop because for Loop is
05:33 - obviously when we we use when we in
05:35 - advance we know the number of times the
05:38 - loop body would be executed in that
05:41 - cases for Loop would be used right
05:45 - but while loop I have told you the
05:47 - situation and I'll tell you this thing
05:49 - with the help of example and program
05:51 - also right we'll see the difference
05:54 - properly with the help of program but
05:56 - generally basics of while loop I'll I
05:58 - guess this is clear to you and in one
06:00 - statement also within one statement also
06:03 - we you can write down these things like
06:04 - this
06:06 - simply I can write here print
06:09 - count then semicolon then
06:12 - count plus equal to one this will also
06:15 - print one to five
06:17 - right or on a list or Tuple also it will
06:20 - work that is also fine suppose I have a
06:22 - list list one is equal to one two zero
06:25 - five six something like this and so in
06:29 - condition I can give y list 1. while
06:33 - list one means this is the list so
06:36 - obviously we have item in list so why
06:38 - list one
06:39 - if you want to print like print hi Jen
06:45 - but if this is the
06:47 - then how many time this program would be
06:49 - executed think
06:52 - it would be an infinite Loop because
06:54 - every time this condition is true so you
06:56 - have to give something in this to stop
06:59 - the execution right so suppose after
07:02 - printing one time hi Jenny let's remove
07:05 - one item from the list then again second
07:07 - then third and fourth and fifth then
07:09 - after printing five times Jenny the list
07:11 - would be empty and then this condition
07:13 - would be false that's it so we have I
07:17 - have told you when we were discussing uh
07:18 - list we have a function pop
07:21 - this will pop any element from this list
07:25 - and this will also return that element
07:26 - so if you want to print you can print
07:28 - that element also so now at this point
07:30 - of Time how many times Jenny would be
07:32 - printed hygiening
07:33 - five time one two three four five
07:35 - because there are five items right and
07:38 - after
07:39 - that one by one like first if this would
07:43 - be printed high Journey then list one
07:45 - note pop one element would be pop
07:47 - suppose five then only four elements are
07:50 - there one by one each element would be
07:52 - removed from the list and after printing
07:54 - five times this list would be empty so
07:57 - this is how also you can use while loop
07:58 - now how you can use while loop with else
08:02 - block same we discussed with for Loop
08:05 - also after this while body will have
08:08 - else body
08:10 - this
08:12 - and this this else body this would be
08:14 - executed when this condition becomes
08:17 - false
08:20 - to make this thing very clear
08:22 - see
08:25 - if the condition is false or if we are
08:28 - out from the while loop
08:31 - no matter how
08:32 - maybe after successful execution of this
08:35 - Loop or maybe you have used break
08:37 - statement in between right then whatever
08:41 - you will write immediately after this
08:43 - while loop those statement will be
08:44 - executed but but if you have written
08:47 - else part then this else part this else
08:50 - body would be executed when this
08:52 - condition becomes false but but this
08:55 - else body would not be executed
08:58 - if the loop has been terminated
09:01 - forcefully using break
09:05 - these are some control statements like
09:07 - Loop control statement break continue
09:08 - pass those will be discussing in next
09:11 - video like in detail break is just to
09:15 - exit from the loop break the loop
09:17 - if you have used break here then this
09:20 - else body would not be executed
09:22 - right
09:25 - I hope you got what does the use of this
09:28 - else block and when this else block
09:31 - would be executed
09:32 - I'll show you this thing with the help
09:34 - of example let's see okay let's take
09:37 - these two example
09:39 - same we are printing from one to five so
09:41 - in this case we have used else also
09:43 - while with else
09:44 - in L slope but in this case same will be
09:48 - printing from one to five but within
09:49 - while loop we have put one more
09:51 - condition if count equal to 3 in that
09:54 - case break break means exit from this
09:56 - Loop so what would be the output in this
09:58 - case
09:59 - one two three four five would be printed
10:02 - now once this count becomes 6 this
10:05 - condition becomes false and once
10:07 - condition becomes false this else law
10:09 - would be executed
10:10 - because here we have successfully
10:13 - terminated this Loop we haven't
10:14 - forcefully terminated terminated this
10:17 - like using break or any exception is not
10:19 - there if exception is not there then
10:21 - only this else law could be executed
10:24 - then in else block would be printed but
10:26 - in this case first count is one
10:29 - condition true it will print one count
10:31 - plus one it becomes two condition true
10:33 - again it will print
10:34 - 2 right now it becomes three a now again
10:39 - this condition would be checked if three
10:40 - count is 3 equal to equal to 3 yes this
10:43 - condition is also true now control will
10:45 - enter here and break means out from this
10:47 - while loop but this time this else block
10:49 - would not be executed because we have
10:52 - forcefully terminated this Loop so this
10:55 - block would not be executed if we have
10:57 - written any other statement like print
11:02 - out from Loop
11:05 - and here also we have written the
11:07 - statement print
11:09 - out from Loop
11:12 - so in this case in else block would be
11:14 - printed then in out from Loop would be
11:16 - printed but in this case this would not
11:18 - be printed only one then two and then
11:22 - out front Loop
11:24 - so I hope you got when this else block
11:27 - would be executed right
11:30 - significance of this else block
11:32 - fine so just to show like else blocky
11:35 - just to show that yeah successfully we
11:37 - have completed this Loop has completed
11:41 - its execution or its iteration all the
11:44 - iteration successfully
11:46 - there is no break
11:48 - that is indication if else block would
11:50 - be executed means there is no break in
11:52 - this Loop right now what if there is one
11:56 - quiz question for you if if I modify
12:00 - this something like this less than one
12:03 - and same print count and all
12:06 - so what would be the output in this case
12:09 - so this is for your assignment you have
12:11 - to let me know in the comment section
12:12 - right I have just updated this condition
12:15 - everything is same count less than one
12:18 - this is the condition this time so what
12:20 - would be the output in this case now
12:22 - let's see the difference between for
12:23 - Loop and while loop with the help of
12:24 - example right see I have told you for
12:27 - Loop is used when in advance we know the
12:30 - number of iterations of the loop right
12:32 - but if you don't know in advance how
12:34 - many times the loop would be executed
12:35 - the loop body would be executed then we
12:38 - know usually we we you we use y Nu right
12:41 - so how in this case you will terminate
12:44 - the loop if you don't know how many
12:46 - times the loop would be executed
12:48 - so what condition you will put here and
12:50 - when the loop would be terminated how
12:53 - you will terminate the loop so in this
12:54 - type of situation we provide a special
12:56 - value Sentinel value which is called
12:59 - Sentinel value
13:05 - it is a special value which is used to
13:07 - terminate the loop and generally if you
13:09 - are working on positive integer then
13:11 - minus 1 is this value V we give minus 1
13:15 - like minus one took it enter minus one
13:17 - or sometimes we use like press n
13:21 - yes or no then press n to quit or press
13:24 - Q or capital Q to quit so thus these
13:27 - kind of values these are Sentinel values
13:30 - right
13:31 - so let's see this with the help of an
13:33 - example
13:34 - so this thing better we discuss this
13:36 - thing with the help of you know program
13:38 - practically I will show you
13:40 - so now I'll show you the basics of while
13:41 - loop with 102 example then while with
13:44 - else and then we'll see the difference
13:46 - between between four and while loop with
13:47 - the help of programs right so let's
13:51 - create a new file here
13:56 - while underscore Loop Dot py
13:59 - start with the basic one
14:01 - they will just print from 1 to 5 right
14:16 - okay so we'll simply print here
14:20 - this variable count
14:22 - but if this is the case then it would be
14:25 - in finite Loop because the condition
14:26 - would always be true so it would be you
14:28 - know keep running
14:30 - so we will
14:33 - increase this with plus one and that's
14:35 - it right okay now let's
14:40 - write down one more thing
14:43 - after this immediately after this while
14:45 - loop we will be
14:47 - cutting out from
14:49 - Loop
14:50 - let's run this
14:52 - see
14:55 - it will print
14:57 - one two three four five and then out
14:59 - from
15:00 - Loop right
15:04 - so simple one or in negative also like
15:07 - it's not like that you have to only
15:08 - increment this whatever variable you
15:10 - will take you can decrement also this
15:12 - this thing so five to one if you want to
15:14 - print then you can take here this five
15:16 - and condition would be now at this point
15:18 - of time count is greater than equal
15:21 - greater than zero right or greater than
15:23 - equal to one but at this point of time
15:25 - you have to do minus
15:27 - right so it will print C 5 4 3 2 1 in
15:32 - reverse order and out from the loop
15:34 - simple one or in one line also you can
15:37 - print this thing like print this then
15:39 - you put semicolon here and then this
15:42 - line
15:44 - and out from Loop
15:46 - let's run this see same output you will
15:48 - get here five four three to one out from
15:50 - Loop right
15:52 - now if we are writing the else part here
15:55 - how to use else okay C after this while
15:59 - loop we will simply print five to one
16:01 - right and after that
16:03 - one else look I'll be taking right so
16:06 - here simply I will print in
16:10 - else block
16:12 - that's it
16:13 - right and one more one more statement
16:16 - out from Loop that is not within this
16:18 - while loop or within else block that is
16:20 - outside of this Wireless block right
16:23 - let's run this and
16:25 - see what output you are getting here
16:30 - see in else block is also executed five
16:33 - four three two one and out front Loop
16:34 - because in this case we have
16:36 - successfully completed this iteration of
16:39 - the loop without any termination
16:40 - forceful termination or without any
16:42 - exception at all right so of once the
16:45 - condition becomes false
16:48 - and then the statement also but if I
16:50 - modify this
16:52 - if
16:53 - this variable count
16:55 - equal to equal to 3.
16:59 - then exit from the loop and how to use
17:01 - how to exit from the loop we use a break
17:04 - statement break means out from the slope
17:06 - right now right break the loop break the
17:09 - you know the execution of the loop so at
17:12 - this point of time see it will print
17:14 - only 5
17:16 - 4 and then out from Loop else part would
17:20 - not be executed because
17:22 - we have forcefully terminated this while
17:24 - loop
17:27 - so the the the the these iterations this
17:30 - this you know
17:32 - execution of the while loop is not
17:34 - completed we have forcefully terminated
17:36 - this execution with break so at this
17:38 - point of time else would not be executed
17:40 - right now let's see the difference
17:42 - between while and for Loop
17:45 - so there may be a case like
17:47 - user will enter a number and once user
17:49 - will enter -1 exit from the slope
17:52 - right so how you will do that thing
17:55 - first we will take input from the user a
17:58 - number using input function so
18:01 - obviously will print we will Typecast
18:04 - that into integer
18:09 - and we simply tell minus one to quit
18:18 - right so a number would be entered and
18:20 - that would be converted in integer at
18:23 - the same point of time right so while
18:26 - while
18:28 - this number
18:29 - not equal to
18:31 - minus 1.
18:33 - till then
18:35 - these statement whatever you you will
18:37 - write that would be executed right so
18:40 - maybe simply we will I'm going to print
18:43 - that number print
18:45 - number
18:47 - right nothing we will do and then
18:50 - obviously you have to ask again
18:53 - like
18:54 - enter a number so same line will be
18:58 - writing within this Loop also right
19:02 - enter number minus 1 to quit in else
19:05 - also suppose I am writing in else block
19:07 - and out from the loop same thing
19:09 - right
19:10 - okay
19:11 - we have to put here
19:13 - colon let's run this one
19:17 - enter a number -128 so I am entering 5
19:20 - it will print 5 then again it will ask
19:22 - enter a number minus 9. it will print
19:25 - minus 9 again it will print entire
19:26 - number and this point of time if I print
19:28 - if I enter minus 1.
19:31 - then in else flow then out from the loop
19:36 - right at this point of time else block
19:39 - would also be executed because we
19:40 - haven't written any break or anything
19:42 - else
19:43 - once the condition becomes false
19:45 - successfully termination of this Loop
19:47 - condition becomes false and then at that
19:50 - point of time obviously else flow could
19:51 - be executed if you write
19:53 - right
19:55 - and then whatever statement you will
19:57 - write immediately after this while or
19:59 - else that would be executed right
20:02 - so here minus 1 is what uh you can say
20:04 - special value or
20:06 - Sentinel value to exit from this Loop
20:09 - right we don't know how many times we
20:12 - want to
20:13 - you know print that number how many
20:15 - times you want to execute whatever you
20:17 - will write here maybe I'll print here
20:19 - print genuine and do any calculation
20:21 - here then I'll ask uh you know 10 or 15
20:24 - or 50 lines of code I can write within
20:27 - this while loop in this block and then
20:28 - again I'll ask
20:30 - so one time maybe I'll enter two number
20:32 - five and four and then I'll enter minus
20:34 - one so two times the statement will be
20:36 - executed again if a user run then it
20:40 - will enter 10 number my like zero one
20:43 - two three four or any other number ten
20:45 - number and after that it will enter -1
20:46 - then 10 times these statement would be
20:49 - executed
20:51 - so user is controlling how many time
20:53 - this Loop would be executed in advance
20:55 - we don't know how many time the snow
20:57 - could be executed so in this type of
20:58 - situation we use y u right and better to
21:02 - use and here one more thing
21:04 - we can use those what I can say Boolean
21:07 - values also true and false
21:09 - so if I write something like this
21:12 - okay let's comment out this thing and if
21:15 - suppose I am taking account and then
21:19 - while I'm writing while true
21:23 - while true then
21:25 - print count
21:28 - we don't know how many time this count
21:30 - would be
21:31 - this statement would be executed we will
21:34 - do count Plus
21:35 - plus one this is just simple example
21:38 - right
21:39 - so to break this thing we can write down
21:42 - something like if count equal to equal
21:44 - to Once count becomes suppose 5.
21:47 - then
21:50 - break
21:52 - right
21:53 - and in else we'll be writing like same
21:57 - thing we'll write
22:00 - in else block
22:03 - and after that simple statement I'm
22:06 - writing
22:10 - sorry
22:16 - out from Loop
22:18 - okay
22:19 - so here also we have to put one column
22:22 - let's run this
22:24 - see what it will print
22:26 - 0 1 2 3 4 Once the value becomes 5 break
22:32 - so out from the loop so we have
22:34 - forcefully terminated this Loop that is
22:36 - why no else law could be executed at
22:38 - this point of Time Out From Loop only
22:40 - the statement would be executed
22:43 - right
22:44 - so like
22:45 - we can also use this is one of the good
22:49 - use of these Boolean values true and
22:51 - false in while loop we can set this
22:53 - thing
22:54 - so this Loop would always be true until
22:57 - you give something to break to terminate
23:00 - this Loop within this thing
23:02 - so that you can put any condition based
23:04 - on your program right it is just a
23:06 - simple example
23:08 - now I hope you would
23:10 - you know
23:11 - why when we use generally this while
23:14 - loop and how we can use if you don't
23:16 - know in advance number of iterations of
23:18 - the loop right
23:20 - okay here is one assignment for you
23:22 - you have to calculate the sum of
23:25 - positive integers only
23:27 - right
23:28 - ask a number from the user and as soon
23:31 - as a user enter any minus value
23:34 - exit or maybe as soon as a user enters 0
23:37 - exit from there so whatever user will
23:40 - enter either positive or negative
23:42 - integer do some once when you have to
23:46 - quit once user enter 0 this is the
23:50 - condition
23:51 - so this is for your assignment pause the
23:53 - video and try this out
23:54 - okay let's do this let's take a variable
23:58 - total and at first Total is zero right
24:02 - now
24:04 - we'll ask from obviously we'll ask from
24:06 - the user number right and at that point
24:09 - of time only we will Typecast this into
24:12 - integer
24:23 - and I'll be just mentioning 0 to quit to
24:27 - quit right
24:28 - so we have typecasted this number now
24:31 - it's time to put some conditions so
24:33 - while
24:34 - this condition I am putting
24:37 - number not equal to zero
24:43 - it's very not equal to zero
24:47 - then just do total equal to
24:51 - Total Plus
24:53 - number
24:56 - right or total plus equal to number in
24:59 - short form also we can write
25:01 - and again obviously we'll ask from the
25:04 - user a number
25:06 - that would be in Loop but again and
25:08 - again we'll be asking from the user so
25:10 - that thing you have to put in Loop and
25:14 - after that
25:16 - after this Loop you can simply print
25:19 - total
25:20 - or total is if you want to print
25:23 - something like this
25:24 - so you can write there right down here
25:27 - like total is then comma
25:30 - and from this variable or F string also
25:32 - you can use here right
25:35 - so let's run this
25:38 - okay I am entering one simple number
25:42 - I'll be entering then two
25:45 - then
25:46 - sorry
25:47 - three then I'm entering minus 1. then
25:51 - I'm entering minus 2.
25:53 - and now zero
25:55 - so what it should print only three
25:58 - so the total is three once you enter 0
26:01 - it will quit so at this time of this
26:04 - point of you know this situation in this
26:06 - situation you can use these type of
26:08 - situation you can use while loop right
26:10 - because in this case also we don't know
26:12 - how many time this this Loop body would
26:14 - be executed we don't know because the
26:16 - condition is once user enters zero then
26:18 - only you have to quit maybe before
26:20 - entering 0 he or she can enter 50
26:23 - hundred numbers I don't know maybe 10
26:25 - numbers 20 number 50 number I don't know
26:27 - once 0 would be entered then quit so I
26:30 - hope you got while loop Basics
26:32 - difference between four and while and
26:33 - all so I hope you got what is while loop
26:35 - in Python and how to use this how this
26:37 - is different from for Loop right when to
26:39 - use whole Loop when to use while loop
26:41 - now the next video we'll see uh loop
26:43 - control statements like break uh then
26:46 - continue then pass right so now I'll see
26:48 - you in the next video till then bye take

Cleaned transcript:

so in the series of learning Python programming language in the previous video we have worked on a project password generator I hope you have done that project right because that was not too tough until now we have discussed uh for Loop in Python so now we'll be discussing while loop in Python there is no do while loop in Python like in other languages C C plus plus Java for while and do while but there is no doubt Loop so now the next Loop is while loop and we'll be seeing each and everything about while loop how this while loop is different from for Loop and when to use for Loop when to use while loop as well as while with else block also the working syntax with the help of program examples will be seeing this practically also I will show you right now okay while loop basically see you know why we use Loops when you want to you know execute a statement or set of statements repeatedly multiple times then we use Loop you put those statements in Loop and that's it right same while loop is also used when you want to repeat a statement or block of statements when you want to execute block of statements repeatedly until a given condition is true until a given condition is satisfied right okay let's see the syntax how you will write y then here you will write condition whatever condition you want to give or you can say expression any expression also you can you can write and that that expression would be evaluated ultimately uh you know in the form of Boolean value true or false and based on that if this thing is true then here you can say the loop body or we can write some statements a single statement or multiple statements also that's it don't forget to put a call in right so now this these statements would be executed repeatedly until this given condition is true right okay now with the help of flowchart let me just show you we are entering into the while loop so first thing is what this condition would be tested right if this condition is true two cases can be the true or false if this condition is true then these statements should be executed it may be a single statement or multiple statements and those statements should be indented right because indentation is the only way to you know denote in Python that this is a block and these statements are within this value right there is no these kind of braces right now after this statement will be executed again condition would be checked again trigger false and this would be in Loop if this is condition is false then simply exit from while loop see it's exit from while loop not exit from actually program because once this condition becomes false the whatever you will write immediately after this while loop those statements would be executed that's it so this is syntax this is simple flowchart and working of while loop now see let's take a simple example here so if you take the same example like if you want to print number from one to five or one to ten or any number then using for Loop also we can do if you do with this while loop then simply we take a variable like any variable a b c d count IE or anything we start with initialize with one and while the conditional will give while count less than equal to Phi print count but not that's it you have to increase this count also count Plus plus count plus one right so first time count is one condition would be checked condition true Count would be printed one then count becomes count becomes two then two condition true again two will be printed then it becomes three like this till 5 1 2 3 4 5 like this five would be printed and after that it becomes sixth condition is not true exit from the while loop and whatever you will write immediately this that would be executed right if nothing is there then exit from the program simple working but here see here we know like this also we can do with for Loop also this this thing then why why Loop in which cases it is beneficial to use while loop for Loop is more like a iterator in Python right now basically we use while loop in those situation when user you know in advance user or we don't know the number of times how many you know how many times these statements would be executed in this program we know how many times does these statements these two statements are part of this value would be executed how many times five times in advance we know because we have you know written this program like that till one two five I want to print but what if you don't know in advance how many times these statements whatever statement you will write those would be executed user will decide that number of times these statements would be executed right so in those situations it's better to use while loop because for Loop is obviously when we we use when we in advance we know the number of times the loop body would be executed in that cases for Loop would be used right but while loop I have told you the situation and I'll tell you this thing with the help of example and program also right we'll see the difference properly with the help of program but generally basics of while loop I'll I guess this is clear to you and in one statement also within one statement also we you can write down these things like this simply I can write here print count then semicolon then count plus equal to one this will also print one to five right or on a list or Tuple also it will work that is also fine suppose I have a list list one is equal to one two zero five six something like this and so in condition I can give y list 1. while list one means this is the list so obviously we have item in list so why list one if you want to print like print hi Jen but if this is the then how many time this program would be executed think it would be an infinite Loop because every time this condition is true so you have to give something in this to stop the execution right so suppose after printing one time hi Jenny let's remove one item from the list then again second then third and fourth and fifth then after printing five times Jenny the list would be empty and then this condition would be false that's it so we have I have told you when we were discussing uh list we have a function pop this will pop any element from this list and this will also return that element so if you want to print you can print that element also so now at this point of Time how many times Jenny would be printed hygiening five time one two three four five because there are five items right and after that one by one like first if this would be printed high Journey then list one note pop one element would be pop suppose five then only four elements are there one by one each element would be removed from the list and after printing five times this list would be empty so this is how also you can use while loop now how you can use while loop with else block same we discussed with for Loop also after this while body will have else body this and this this else body this would be executed when this condition becomes false to make this thing very clear see if the condition is false or if we are out from the while loop no matter how maybe after successful execution of this Loop or maybe you have used break statement in between right then whatever you will write immediately after this while loop those statement will be executed but but if you have written else part then this else part this else body would be executed when this condition becomes false but but this else body would not be executed if the loop has been terminated forcefully using break these are some control statements like Loop control statement break continue pass those will be discussing in next video like in detail break is just to exit from the loop break the loop if you have used break here then this else body would not be executed right I hope you got what does the use of this else block and when this else block would be executed I'll show you this thing with the help of example let's see okay let's take these two example same we are printing from one to five so in this case we have used else also while with else in L slope but in this case same will be printing from one to five but within while loop we have put one more condition if count equal to 3 in that case break break means exit from this Loop so what would be the output in this case one two three four five would be printed now once this count becomes 6 this condition becomes false and once condition becomes false this else law would be executed because here we have successfully terminated this Loop we haven't forcefully terminated terminated this like using break or any exception is not there if exception is not there then only this else law could be executed then in else block would be printed but in this case first count is one condition true it will print one count plus one it becomes two condition true again it will print 2 right now it becomes three a now again this condition would be checked if three count is 3 equal to equal to 3 yes this condition is also true now control will enter here and break means out from this while loop but this time this else block would not be executed because we have forcefully terminated this Loop so this block would not be executed if we have written any other statement like print out from Loop and here also we have written the statement print out from Loop so in this case in else block would be printed then in out from Loop would be printed but in this case this would not be printed only one then two and then out front Loop so I hope you got when this else block would be executed right significance of this else block fine so just to show like else blocky just to show that yeah successfully we have completed this Loop has completed its execution or its iteration all the iteration successfully there is no break that is indication if else block would be executed means there is no break in this Loop right now what if there is one quiz question for you if if I modify this something like this less than one and same print count and all so what would be the output in this case so this is for your assignment you have to let me know in the comment section right I have just updated this condition everything is same count less than one this is the condition this time so what would be the output in this case now let's see the difference between for Loop and while loop with the help of example right see I have told you for Loop is used when in advance we know the number of iterations of the loop right but if you don't know in advance how many times the loop would be executed the loop body would be executed then we know usually we we you we use y Nu right so how in this case you will terminate the loop if you don't know how many times the loop would be executed so what condition you will put here and when the loop would be terminated how you will terminate the loop so in this type of situation we provide a special value Sentinel value which is called Sentinel value it is a special value which is used to terminate the loop and generally if you are working on positive integer then minus 1 is this value V we give minus 1 like minus one took it enter minus one or sometimes we use like press n yes or no then press n to quit or press Q or capital Q to quit so thus these kind of values these are Sentinel values right so let's see this with the help of an example so this thing better we discuss this thing with the help of you know program practically I will show you so now I'll show you the basics of while loop with 102 example then while with else and then we'll see the difference between between four and while loop with the help of programs right so let's create a new file here while underscore Loop Dot py start with the basic one they will just print from 1 to 5 right okay so we'll simply print here this variable count but if this is the case then it would be in finite Loop because the condition would always be true so it would be you know keep running so we will increase this with plus one and that's it right okay now let's write down one more thing after this immediately after this while loop we will be cutting out from Loop let's run this see it will print one two three four five and then out from Loop right so simple one or in negative also like it's not like that you have to only increment this whatever variable you will take you can decrement also this this thing so five to one if you want to print then you can take here this five and condition would be now at this point of time count is greater than equal greater than zero right or greater than equal to one but at this point of time you have to do minus right so it will print C 5 4 3 2 1 in reverse order and out from the loop simple one or in one line also you can print this thing like print this then you put semicolon here and then this line and out from Loop let's run this see same output you will get here five four three to one out from Loop right now if we are writing the else part here how to use else okay C after this while loop we will simply print five to one right and after that one else look I'll be taking right so here simply I will print in else block that's it right and one more one more statement out from Loop that is not within this while loop or within else block that is outside of this Wireless block right let's run this and see what output you are getting here see in else block is also executed five four three two one and out front Loop because in this case we have successfully completed this iteration of the loop without any termination forceful termination or without any exception at all right so of once the condition becomes false and then the statement also but if I modify this if this variable count equal to equal to 3. then exit from the loop and how to use how to exit from the loop we use a break statement break means out from the slope right now right break the loop break the you know the execution of the loop so at this point of time see it will print only 5 4 and then out from Loop else part would not be executed because we have forcefully terminated this while loop so the the the the these iterations this this you know execution of the while loop is not completed we have forcefully terminated this execution with break so at this point of time else would not be executed right now let's see the difference between while and for Loop so there may be a case like user will enter a number and once user will enter 1 exit from the slope right so how you will do that thing first we will take input from the user a number using input function so obviously will print we will Typecast that into integer and we simply tell minus one to quit right so a number would be entered and that would be converted in integer at the same point of time right so while while this number not equal to minus 1. till then these statement whatever you you will write that would be executed right so maybe simply we will I'm going to print that number print number right nothing we will do and then obviously you have to ask again like enter a number so same line will be writing within this Loop also right enter number minus 1 to quit in else also suppose I am writing in else block and out from the loop same thing right okay we have to put here colon let's run this one enter a number 128 so I am entering 5 it will print 5 then again it will ask enter a number minus 9. it will print minus 9 again it will print entire number and this point of time if I print if I enter minus 1. then in else flow then out from the loop right at this point of time else block would also be executed because we haven't written any break or anything else once the condition becomes false successfully termination of this Loop condition becomes false and then at that point of time obviously else flow could be executed if you write right and then whatever statement you will write immediately after this while or else that would be executed right so here minus 1 is what uh you can say special value or Sentinel value to exit from this Loop right we don't know how many times we want to you know print that number how many times you want to execute whatever you will write here maybe I'll print here print genuine and do any calculation here then I'll ask uh you know 10 or 15 or 50 lines of code I can write within this while loop in this block and then again I'll ask so one time maybe I'll enter two number five and four and then I'll enter minus one so two times the statement will be executed again if a user run then it will enter 10 number my like zero one two three four or any other number ten number and after that it will enter 1 then 10 times these statement would be executed so user is controlling how many time this Loop would be executed in advance we don't know how many time the snow could be executed so in this type of situation we use y u right and better to use and here one more thing we can use those what I can say Boolean values also true and false so if I write something like this okay let's comment out this thing and if suppose I am taking account and then while I'm writing while true while true then print count we don't know how many time this count would be this statement would be executed we will do count Plus plus one this is just simple example right so to break this thing we can write down something like if count equal to equal to Once count becomes suppose 5. then break right and in else we'll be writing like same thing we'll write in else block and after that simple statement I'm writing sorry out from Loop okay so here also we have to put one column let's run this see what it will print 0 1 2 3 4 Once the value becomes 5 break so out from the loop so we have forcefully terminated this Loop that is why no else law could be executed at this point of Time Out From Loop only the statement would be executed right so like we can also use this is one of the good use of these Boolean values true and false in while loop we can set this thing so this Loop would always be true until you give something to break to terminate this Loop within this thing so that you can put any condition based on your program right it is just a simple example now I hope you would you know why when we use generally this while loop and how we can use if you don't know in advance number of iterations of the loop right okay here is one assignment for you you have to calculate the sum of positive integers only right ask a number from the user and as soon as a user enter any minus value exit or maybe as soon as a user enters 0 exit from there so whatever user will enter either positive or negative integer do some once when you have to quit once user enter 0 this is the condition so this is for your assignment pause the video and try this out okay let's do this let's take a variable total and at first Total is zero right now we'll ask from obviously we'll ask from the user number right and at that point of time only we will Typecast this into integer and I'll be just mentioning 0 to quit to quit right so we have typecasted this number now it's time to put some conditions so while this condition I am putting number not equal to zero it's very not equal to zero then just do total equal to Total Plus number right or total plus equal to number in short form also we can write and again obviously we'll ask from the user a number that would be in Loop but again and again we'll be asking from the user so that thing you have to put in Loop and after that after this Loop you can simply print total or total is if you want to print something like this so you can write there right down here like total is then comma and from this variable or F string also you can use here right so let's run this okay I am entering one simple number I'll be entering then two then sorry three then I'm entering minus 1. then I'm entering minus 2. and now zero so what it should print only three so the total is three once you enter 0 it will quit so at this time of this point of you know this situation in this situation you can use these type of situation you can use while loop right because in this case also we don't know how many time this this Loop body would be executed we don't know because the condition is once user enters zero then only you have to quit maybe before entering 0 he or she can enter 50 hundred numbers I don't know maybe 10 numbers 20 number 50 number I don't know once 0 would be entered then quit so I hope you got while loop Basics difference between four and while and all so I hope you got what is while loop in Python and how to use this how this is different from for Loop right when to use whole Loop when to use while loop now the next video we'll see uh loop control statements like break uh then continue then pass right so now I'll see you in the next video till then bye take
