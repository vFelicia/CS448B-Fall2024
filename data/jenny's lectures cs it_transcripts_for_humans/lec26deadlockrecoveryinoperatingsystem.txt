With timestamps:

00:00 - preemption of the sources and processes
00:03 - that is optimistic approach second is
00:06 - pessimistic approach pessimistic means
00:09 - termination of process or you can say
00:11 - the killing of processes right now in
00:15 - this case process termination basically
00:18 - two methods are there first is you can
00:22 - kill all the processes which are in
00:26 - deadlocked state maybe sometimes there
00:29 - is a situation that more than two or
00:32 - three processes are there in deadlocked
00:34 - State they are forming a cycle five
00:36 - processes ten processes something like
00:38 - this so what method is kill all the
00:41 - processes which are in deadlocked states
00:44 - see in the previous video you have
00:45 - discussed one example in that case four
00:47 - processes are there in deadlocked state
00:49 - p1 p2 p3 and p4 so the first method is
00:52 - about all the four processes I know you
00:54 - can say kill all the processes but you
00:58 - know killing all the processes who are
01:00 - in deadlocked state may be very costly
01:03 - so the drawback of this case is one it
01:06 - is very costly method to abort all the
01:10 - processes see let us take one example
01:11 - maybe five processes are there which are
01:14 - in deadlocked state p1 p2 p3 p4 and p5
01:20 - and I say costly in what sense may be
01:23 - suppose p1 and p2 has completed its
01:26 - execution up to 90% fine suppose a 10%
01:31 - this one is 10% in this one is 20% so
01:35 - see when you'll about all the processes
01:38 - then the p1 and p2 will have to then
01:40 - these processes will have to starts
01:42 - their execution from the starting only
01:44 - but see p1 and p2 has almost completed
01:48 - its execution so it is not a good idea
01:50 - to abort these processes so it is not a
01:53 - good idea to about all the processes who
01:55 - are in deadlocked state why so because
01:57 - maybe some processes may have been may
02:00 - have executed may have computed their
02:03 - work for a long time
02:04 - fine and when you will about all the
02:06 - processes then they'll have to recompute
02:08 - all the cases they have they'll have to
02:11 - recompute all its calculation
02:13 - from starting only so that is not a good
02:15 - idea right so next thing is about one
02:19 - process at a time fine and then decide
02:23 - next one decide next one to a boat after
02:26 - deadlock detection means about one
02:29 - process at a time then apply or you can
02:31 - say invoke the deadlock detection
02:32 - algorithm if still detection cycle is
02:36 - there then then choose the next process
02:39 - to abort
02:40 - then again invoke deadlock detection
02:42 - algorithm and keep repeating this step
02:46 - and until what until the deadlock cycle
02:50 - is eliminated but see see drawback of
02:53 - this cases what you are selecting one
02:55 - process and you are calling detection
02:57 - algorithm again selecting one process
02:59 - again calling detection algorithm so
03:02 - this is basically a it contains overhead
03:07 - of invoking the deadlock detection
03:10 - algorithm again and again after each
03:12 - after killing of each process so in this
03:15 - can say the drawback is overhead of
03:17 - calling detection algorithm again and
03:19 - again after termination of each process
03:22 - fine so here here the funda is we should
03:26 - terminate that process when we should
03:30 - terminate that process whose termination
03:33 - will cause minimum overhead and minimum
03:37 - cost to the system now how to have to
03:41 - select that process whose termination
03:44 - will cause the minimum overhead and
03:46 - minimum cost to the system there are
03:48 - many effectors basis on those factors
03:50 - you can select to terminate a process
03:53 - and those factors are so these are some
03:57 - factors to be considered when we are
03:58 - selecting a process to kill like what
04:02 - what is the priority of the process if
04:04 - process is having higher priority then
04:06 - we obviously would on we we don't kill
04:08 - that process we used to kill a process
04:10 - which is having lower priority fine
04:13 - next next may be how long the process
04:15 - has computed may be a process has
04:17 - completed its 90% execution so it's
04:20 - better not to abort that process fine
04:22 - third thing may be how much longer a
04:24 - process will come
04:26 - before execution and before completion
04:29 - fine next fundamentally sources that
04:35 - process has used fine next thing may be
04:40 - whether the process is interactive
04:42 - process or a batch process next thing
04:45 - which is to be considered is how many
04:49 - resources the process needs to complete
04:51 - its execution fine maybe a process needs
04:54 - one one more resource to complete its
04:56 - execution or maybe you another process
04:58 - needs ten more resources for its
05:00 - execution so it's better to abort that
05:03 - process which needs ten resources for
05:05 - completing its execution rather than the
05:07 - process which needs only one resource
05:09 - these are some factors to be considered
05:11 - when our system is selecting a process
05:14 - to kill fine now the optimistic
05:17 - approaches this approaches preemption of
05:20 - resources and processes fine in this
05:23 - case some resources would be forcefully
05:27 - preempted from any process and that
05:30 - resources would be given to another
05:32 - process so that the another processor
05:34 - can complete its execution
05:36 - fine now here here the question is C
05:42 - preempts some resources from process
05:45 - fine but the question is from which
05:47 - process you will preempt the resources
05:49 - so so when when a system is implementing
05:53 - this kind of approach preemption of
05:55 - resources and processes then basically
05:57 - it needs to handle three problems so the
05:59 - three problems are selecting a victim
06:01 - rollback and starvation now what are
06:03 - these problems so selecting a victim
06:06 - means you can say which is a source or
06:09 - which process is to be preempted fine
06:12 - say he here Here I am saying preempts
06:14 - some resources from a process from which
06:16 - process and which resource you will
06:19 - preempt you have to select that one so
06:22 - we will select that process you can say
06:25 - that will cause minimum course truth to
06:28 - the system dual preempted resources from
06:30 - that process
06:31 - now now the minimum cost means many cost
06:34 - factors are there see here also we have
06:36 - considered these cost factors fine when
06:39 - we are
06:40 - we are selecting a process to kill so
06:43 - here also these type of you know cost
06:45 - factors are there like a number of
06:47 - resources a deadlocked processes have
06:50 - holding so here also some cost factors
06:53 - are there which is to be considered when
06:55 - we are selecting a victim process next
06:57 - one dice this roll back now what is this
07:00 - roll back when you select a process and
07:04 - preempt resources from that process then
07:06 - obviously that process cannot continue
07:08 - its normal execution fine then that
07:11 - process has to be rolled back to
07:14 - previous safe state and that process
07:18 - will start says its execution from that
07:21 - safe state only restart you can say
07:23 - restart its execution from that safe
07:26 - state fine
07:27 - our second thing is total roll back you
07:31 - your selecting and you have selected a
07:33 - process you have preempted some
07:34 - resources from that process then you
07:36 - will do total roll back to that process
07:39 - total roll back means you will you can
07:41 - say about that process and that process
07:43 - will restart its execution from its
07:47 - initial point that is total rollback but
07:51 - it's better it's better to roll back a
07:54 - process to previous safe state why so
07:57 - let us take a real-life example suppose
07:59 - I am making this video fine and I have
08:02 - completed almost 50% of the lecture
08:05 - maybe at last at some point of time I
08:07 - told some wrong information
08:09 - so I'll reshoot the this video I'll
08:13 - reshoot the video obviously from the
08:14 - point where I told you that maybe is
08:17 - some wrong information
08:18 - I will not reshoot the video the
08:20 - complete video from starting only if
08:23 - reshoot the video from starting it means
08:25 - total roll back and if I'm shooting the
08:28 - video from that point where I I told you
08:31 - the wrong information then it is known
08:33 - as roll back to some previous safe state
08:36 - fine so that is the roll back fun die in
08:40 - the process process will be roll back to
08:41 - previous T safe state and we'll study
08:43 - started its execution from that safe
08:45 - state second thing is total roll back
08:48 - the process which is selected as a
08:50 - victim is you
08:53 - is to be aborted and that Italy started
08:55 - its execution from its starting point
08:58 - only see it's better what approach is
09:00 - better it's better in that safe state
09:03 - approach better to roll back that
09:06 - process to previous safe state but in
09:09 - that case in that a system has to
09:12 - maintain the information of the state
09:16 - for all the running processes
09:19 - obviously if system has the information
09:21 - in what point what is the previous safe
09:24 - state then only system can roll back to
09:27 - that safe state 'no system can roll back
09:29 - that process to that safe state so
09:31 - system needs to maintain some extra
09:33 - information in this case now what does
09:35 - this starvation problem see in this case
09:37 - we are selecting a process and we are we
09:40 - are pre-empting resources from that
09:42 - process
09:42 - fine but if again and again same process
09:46 - is selected for preemption then what
09:49 - will happen then starvation problem
09:50 - would be therefore that process that
09:52 - process will never complete its
09:55 - execution will never be able to complete
09:57 - its execution now how to how to ensure
10:00 - that same process would not be selected
10:03 - as a victim again and again so in for
10:06 - this system has to ensure that a
10:09 - particular process can be you know
10:12 - picked as a victim for some finite
10:16 - number of time and how how this thing
10:18 - can be ensured you can say in Khost
10:21 - factor many cost factors we have
10:22 - discussed many cost factors we will
10:25 - consider when we will select a process
10:26 - to preempt so in those cost factors we
10:30 - can include one extra cost factor that
10:32 - is number of roll mix in our all bakes
10:34 - means when you will select a process and
10:36 - preempted resources from that process
10:38 - and that process will have to be
10:39 - rollback so you can select maybe suppose
10:42 - number of roll bakes are 5 set number of
10:44 - roll backs cannot be more than 5 so
10:46 - suppose a process p1 has reached to this
10:51 - point p1 has rolled back five times then
10:54 - again sixth time you cannot select p1 as
10:58 - a victim process you cannot preempt
11:00 - resources from p1 process you have to
11:02 - system how to select some other process
11:06 - so this this number of rollbacks can
11:09 - also be included in cost factors too to
11:12 - avoid this starvation problem so these
11:16 - are two types of recovery approaches
11:18 - optimistic and pessimistic approach so
11:21 - that is all about deadlock in next video
11:23 - I'll start that base replacement
11:26 - techniques I'll provide the link of all
11:29 - the deadlock videos in the description
11:30 - box you can check it out so till then
11:32 - bye bye take care
11:41 - you

Cleaned transcript:

preemption of the sources and processes that is optimistic approach second is pessimistic approach pessimistic means termination of process or you can say the killing of processes right now in this case process termination basically two methods are there first is you can kill all the processes which are in deadlocked state maybe sometimes there is a situation that more than two or three processes are there in deadlocked State they are forming a cycle five processes ten processes something like this so what method is kill all the processes which are in deadlocked states see in the previous video you have discussed one example in that case four processes are there in deadlocked state p1 p2 p3 and p4 so the first method is about all the four processes I know you can say kill all the processes but you know killing all the processes who are in deadlocked state may be very costly so the drawback of this case is one it is very costly method to abort all the processes see let us take one example maybe five processes are there which are in deadlocked state p1 p2 p3 p4 and p5 and I say costly in what sense may be suppose p1 and p2 has completed its execution up to 90% fine suppose a 10% this one is 10% in this one is 20% so see when you'll about all the processes then the p1 and p2 will have to then these processes will have to starts their execution from the starting only but see p1 and p2 has almost completed its execution so it is not a good idea to abort these processes so it is not a good idea to about all the processes who are in deadlocked state why so because maybe some processes may have been may have executed may have computed their work for a long time fine and when you will about all the processes then they'll have to recompute all the cases they have they'll have to recompute all its calculation from starting only so that is not a good idea right so next thing is about one process at a time fine and then decide next one decide next one to a boat after deadlock detection means about one process at a time then apply or you can say invoke the deadlock detection algorithm if still detection cycle is there then then choose the next process to abort then again invoke deadlock detection algorithm and keep repeating this step and until what until the deadlock cycle is eliminated but see see drawback of this cases what you are selecting one process and you are calling detection algorithm again selecting one process again calling detection algorithm so this is basically a it contains overhead of invoking the deadlock detection algorithm again and again after each after killing of each process so in this can say the drawback is overhead of calling detection algorithm again and again after termination of each process fine so here here the funda is we should terminate that process when we should terminate that process whose termination will cause minimum overhead and minimum cost to the system now how to have to select that process whose termination will cause the minimum overhead and minimum cost to the system there are many effectors basis on those factors you can select to terminate a process and those factors are so these are some factors to be considered when we are selecting a process to kill like what what is the priority of the process if process is having higher priority then we obviously would on we we don't kill that process we used to kill a process which is having lower priority fine next next may be how long the process has computed may be a process has completed its 90% execution so it's better not to abort that process fine third thing may be how much longer a process will come before execution and before completion fine next fundamentally sources that process has used fine next thing may be whether the process is interactive process or a batch process next thing which is to be considered is how many resources the process needs to complete its execution fine maybe a process needs one one more resource to complete its execution or maybe you another process needs ten more resources for its execution so it's better to abort that process which needs ten resources for completing its execution rather than the process which needs only one resource these are some factors to be considered when our system is selecting a process to kill fine now the optimistic approaches this approaches preemption of resources and processes fine in this case some resources would be forcefully preempted from any process and that resources would be given to another process so that the another processor can complete its execution fine now here here the question is C preempts some resources from process fine but the question is from which process you will preempt the resources so so when when a system is implementing this kind of approach preemption of resources and processes then basically it needs to handle three problems so the three problems are selecting a victim rollback and starvation now what are these problems so selecting a victim means you can say which is a source or which process is to be preempted fine say he here Here I am saying preempts some resources from a process from which process and which resource you will preempt you have to select that one so we will select that process you can say that will cause minimum course truth to the system dual preempted resources from that process now now the minimum cost means many cost factors are there see here also we have considered these cost factors fine when we are we are selecting a process to kill so here also these type of you know cost factors are there like a number of resources a deadlocked processes have holding so here also some cost factors are there which is to be considered when we are selecting a victim process next one dice this roll back now what is this roll back when you select a process and preempt resources from that process then obviously that process cannot continue its normal execution fine then that process has to be rolled back to previous safe state and that process will start says its execution from that safe state only restart you can say restart its execution from that safe state fine our second thing is total roll back you your selecting and you have selected a process you have preempted some resources from that process then you will do total roll back to that process total roll back means you will you can say about that process and that process will restart its execution from its initial point that is total rollback but it's better it's better to roll back a process to previous safe state why so let us take a reallife example suppose I am making this video fine and I have completed almost 50% of the lecture maybe at last at some point of time I told some wrong information so I'll reshoot the this video I'll reshoot the video obviously from the point where I told you that maybe is some wrong information I will not reshoot the video the complete video from starting only if reshoot the video from starting it means total roll back and if I'm shooting the video from that point where I I told you the wrong information then it is known as roll back to some previous safe state fine so that is the roll back fun die in the process process will be roll back to previous T safe state and we'll study started its execution from that safe state second thing is total roll back the process which is selected as a victim is you is to be aborted and that Italy started its execution from its starting point only see it's better what approach is better it's better in that safe state approach better to roll back that process to previous safe state but in that case in that a system has to maintain the information of the state for all the running processes obviously if system has the information in what point what is the previous safe state then only system can roll back to that safe state 'no system can roll back that process to that safe state so system needs to maintain some extra information in this case now what does this starvation problem see in this case we are selecting a process and we are we are preempting resources from that process fine but if again and again same process is selected for preemption then what will happen then starvation problem would be therefore that process that process will never complete its execution will never be able to complete its execution now how to how to ensure that same process would not be selected as a victim again and again so in for this system has to ensure that a particular process can be you know picked as a victim for some finite number of time and how how this thing can be ensured you can say in Khost factor many cost factors we have discussed many cost factors we will consider when we will select a process to preempt so in those cost factors we can include one extra cost factor that is number of roll mix in our all bakes means when you will select a process and preempted resources from that process and that process will have to be rollback so you can select maybe suppose number of roll bakes are 5 set number of roll backs cannot be more than 5 so suppose a process p1 has reached to this point p1 has rolled back five times then again sixth time you cannot select p1 as a victim process you cannot preempt resources from p1 process you have to system how to select some other process so this this number of rollbacks can also be included in cost factors too to avoid this starvation problem so these are two types of recovery approaches optimistic and pessimistic approach so that is all about deadlock in next video I'll start that base replacement techniques I'll provide the link of all the deadlock videos in the description box you can check it out so till then bye bye take care you
