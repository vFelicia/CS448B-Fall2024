With timestamps:

00:00 - in this video we are going to talk about
00:01 - queues in data structure see what is the
00:04 - data structure it is a way of storing
00:06 - and organizing the data right we have
00:09 - discussed few data structures like
00:10 - arrays linked lists and stacks in this
00:13 - video we will see what is U so Q is what
00:16 - it is a linear data structure you can
00:18 - see or you can say Q is an abstract data
00:22 - type in this video we will discuss Q as
00:24 - an abstract data type ADT means when I
00:28 - say edit E it means we are going to
00:31 - define we are going to see the features
00:33 - or operations of Q we will not go in
00:37 - detail implementation right see we can
00:40 - implement Q's using arrays linked lists
00:42 - as well as using stack that
00:44 - implementation we will discuss in next
00:45 - video in this video we will see what is
00:47 - Q and what are different operations
00:49 - performed on Q fundamental operations
00:52 - fine as well as we will see some
00:54 - applications of Q's so let us understand
00:57 - this concept with a real-life scenario
00:59 - first of all right let us suppose there
01:02 - is a ticket counter fine that's a movie
01:06 - ticket counter you can consider right
01:08 - and now there is no one there in the
01:11 - queue or in the line fine first of all
01:14 - suppose you go and you stand there and
01:16 - after that second third fourth fifth
01:19 - five persons are there so obviously you
01:23 - if you are the first then you will get
01:25 - the ticket first then you will go after
01:29 - that second person then third and fourth
01:31 - and then fifth and suppose before you
01:34 - there are five persons and after that
01:36 - you reach there so you have you will
01:38 - have to stand at sixth position right
01:41 - and you will get ticket after be after
01:45 - you know these five persons fine
01:48 - so here the simple funda is what
01:51 - first-in first-out or you can say first
01:54 - come first so the person who is first in
01:57 - the row will get the ticket first right
02:00 - so now in the queue this funda is known
02:04 - as first in first out FIFO so Q is
02:09 - basically what it is a structure
02:12 - it is an ordered list as stack we have
02:15 - discussed staff is an ordered list that
02:17 - follow the principle of Li for last in
02:19 - first out queue is an collection or
02:21 - queue is an ordered list which follow
02:23 - what principle first-in first-out
02:26 - right now what is that principle see you
02:30 - can say Q is a structure that is going
02:31 - to follow some restrictions on insertion
02:34 - and deletion operation fine or that is
02:38 - going to follow a rule that is going to
02:40 - follow a principle and what is that rule
02:44 - insertion and deletion in case of queue
02:50 - insertion would be performed from one
02:53 - end right and the name of that and that
02:57 - end is known as rear or till right and
03:06 - deletion would be performed from another
03:10 - end and that end is known as head or you
03:15 - can say friend right in queue if you say
03:21 - more technically then we will use a rear
03:23 - end front not head and pain and rather
03:27 - than insertion insertion means adding a
03:30 - data in the queue fine
03:31 - so the technical name in the for in in
03:35 - this in the context of queue it is known
03:38 - as in queue right and deletion is known
03:44 - as DQ by and in stab this insertion and
03:52 - deletion is not known as push and pop
03:54 - fine
03:55 - so NQ operation should be performed from
03:59 - one end and DQ operation would be
04:01 - performed from another end right so we
04:06 - will see the logical representation of
04:07 - queue if you logically represent the
04:09 - queue it means it will have two ends to
04:12 - open it right in stab we have only one
04:15 - end one opponent like and queue would be
04:20 - represented something like this
04:23 - it is having two and one is this one is
04:26 - this right suppose I am taking this end
04:30 - is rear right and this is what friend
04:37 - obviously when you are going to
04:39 - implement this cue you will have to take
04:42 - front and rear two variables like that
04:45 - is must so insertion or you can see NQ
04:49 - operation would be performed from rear
04:51 - from here we can insert data in the cube
04:57 - and if you want to delete data from the
04:59 - queue it means from the front we can DQ
05:04 - we can delete data right so this is what
05:09 - a logical representation of a queue fine
05:12 - suppose and queue I have right now two
05:16 - elements two and three at some point of
05:19 - time right so at that time this front
05:22 - variable would be pointing to here and
05:25 - the rear variable would be pointing to
05:27 - here right and the index is suppose zero
05:34 - and one at some point of time we are
05:39 - suppose we are implementing the skew
05:40 - using array and at some point of point
05:42 - of time p.m. only two elements in that
05:45 - queue and index is zero and one so front
05:48 - is zero and rear is one now in this case
05:51 - if you want to insert third element from
05:54 - where we can insert from this end only
05:57 - so what you need to do if suppose the
06:01 - size of this do we have taken five we
06:03 - can insert five element the capacity is
06:05 - five right so now first of all you will
06:09 - increment this rear right so now rear
06:13 - plus plus that is real would be pointing
06:15 - to this node and now you can insert
06:17 - another it suppose I have inserted five
06:20 - right and if you want to delete then
06:23 - from here only you can delete right so
06:27 - first in first out firstly we have
06:30 - inserted two and that is the first
06:33 - element you can delete if suppose you
06:35 - want to
06:35 - later this five you cannot directly
06:37 - delete this five first of all you will
06:40 - have to delete this two from the queue
06:41 - then three from that you after that only
06:44 - you can delete this 5 right so it is
06:48 - that is why it is no it is known as it
06:50 - will follow FIFO principal love first-in
06:53 - first-out
06:53 - or you can say last in last out last in
06:58 - last out somewhere it is also written
07:01 - like this that the same thing last
07:04 - integer that is in queued in this 2 is 5
07:07 - and that would be the last element you
07:10 - can remove so last in last out this is Q
07:14 - so now we will see some operation that
07:16 - can be performed on a Q so you can
07:18 - define Q as it is a ordered list or you
07:21 - can say it is a collection in which
07:24 - insertion can be performed from one end
07:27 - that is from rear end and a deletion can
07:30 - be performed from another end that is
07:33 - from front end of the queue fine and it
07:36 - is going to follow it is a structure you
07:38 - can say that is going to follow the FIFO
07:39 - rules that is first-in first-out
07:41 - right so now we will see some operation
07:44 - that can be performed on Q so two
07:47 - operation we have discussed that is
07:49 - first is n 2 and that is the second is
07:53 - DQ right these are two fundamental
07:57 - operations and Q and D Q n 2 means
08:00 - inserting or adding a data in the q DQ
08:02 - ms deleting a data from the queue
08:04 - see here in NQ I'm passing to as an
08:06 - argument because I want to suppose I
08:07 - want to insert 2 in the queue then I can
08:10 - pass this in the NQ in DQ no need to
08:12 - pass anything because always the element
08:15 - would be DQ'd from the front so the
08:18 - element which is at the front index of
08:21 - the queue that would be deleted right so
08:23 - no need to pass anything third may be
08:26 - friend or you can say peek in stack it
08:32 - was top it means the motto of this
08:35 - operator operation is what it is going
08:38 - to tell you what does the element at the
08:40 - front of the queue right we will see
08:43 - what is the element at the front of the
08:44 - queue without removing that
08:46 - from the queue or without deterring that
08:49 - element from the queue right now is
08:52 - queue full you can check by is full
08:57 - function it is it will return true if
09:00 - the queue is full it will otherwise it
09:02 - will return phones is empty same we have
09:06 - discussed in stack if the queue is empty
09:08 - then it could return true otherwise it
09:10 - will return false right now see the
09:13 - logical representation of you so this is
09:16 - the logical representation of queue fine
09:18 - any end you can take front or rear but
09:23 - you have to take care of that thing
09:24 - deletion from front and insertion from
09:27 - rear right so here I am taking this is
09:30 - what front and this is what rear I will
09:35 - insert always from here delete from here
09:37 - you can take front this side rear this
09:39 - side as you wish but insertion and
09:41 - deletion would be according to the rule
09:43 - only fine now if you want to insert some
09:46 - data here obviously you need to specify
09:48 - the size of this queue suppose the
09:50 - capacity of queue is fine you can say
09:53 - size I am taking is 5 how will take the
09:57 - size 5 Huggle implement this through
09:59 - that thing we will discuss in next video
10:00 - so it means I can insert 5 element in
10:06 - this queue right here I have 3 this end
10:10 - and index is 0 1 2 3 & 4 so initially
10:14 - there is nothing in the queue right in
10:17 - that case what we will do both friend
10:20 - front end this rear would point to minus
10:22 - 1 hypothetically we assume that there is
10:25 - a minus 1 index and these are pointing
10:26 - to minus 1 it means queue is empty right
10:30 - that is the signal if this is minus 1 it
10:33 - means Q is impeding now I want to
10:35 - include 2 now what would happen see
10:39 - friend is minus 1 rear is also minus 1
10:42 - obviously we will increase front and
10:45 - rear both so front plus plus and rear
10:48 - plus plus also right so now front is
10:51 - also pointing to here and at this point
10:55 - of time rear is also pointing to here
10:59 - at the zero and now we can insert here
11:02 - too right now suppose again I want to NQ
11:06 - three
11:07 - I have hold again function and Q and
11:11 - suppose ten I want to insert in that
11:13 - case what will happen
11:14 - see friend will always point to this
11:18 - node the front one the front element we
11:21 - will not move this front for inserting
11:25 - the data inserting would be always from
11:27 - the rear part so the real variable we
11:31 - are going to move so first of all you
11:34 - will increase the rear rear plus plus
11:37 - means now rear is pointing to here and
11:39 - now here I can insert ten again suppose
11:43 - I am calling NQ minus 1 again what we
11:48 - will not touch this front we will move
11:51 - this rear insertion from drear only that
11:53 - thing you have to take care rear plus
11:55 - plus means rear would point here and now
11:57 - here I can insert minus 1 say at this
12:00 - point of time front is 0 and rear is now
12:03 - - right now suppose I am calling DQ
12:06 - function no need to pass anything
12:09 - because always the data would be deleted
12:11 - from front now when you can touch this
12:14 - front now we will not touch this rear in
12:17 - DQ we will touch this friend right so
12:20 - now suppose you want to print the data
12:23 - you have DQ'd so you can write down
12:25 - printf the data you have DQ'd is from
12:28 - the queue you can print this value and
12:30 - after that what you will do you will do
12:32 - front plus plus right so now front is
12:36 - pointing to here front is one rear is
12:40 - two or in DQ simply you will write front
12:44 - plus plus that is also fine because now
12:46 - this is not a part of queue the part of
12:49 - queue is only two elements whatever
12:51 - between front and rear that is part of
12:54 - you this is now a garbage value and we
12:56 - don't care what the garbage value lies
12:58 - here in future if you will access this
13:00 - selling and usually if you will write
13:02 - here something that this value would be
13:03 - overwritten that is fine fine now
13:06 - suppose I am calling NQ function 3 times
13:08 - so now NQ 0 means from rerai I will know
13:11 - touch this front from rear I'm where
13:13 - only I can insert a year plus plus a
13:15 - year would be pointing to here and here
13:17 - I can insert a 0 into one rear plus plus
13:20 - here I can insert one into five then
13:24 - rear plus plus but what we have the size
13:29 - till here only
13:31 - so if rear is what rear is equal to four
13:35 - it means rear is equal to this maximum
13:37 - size minus one index is 4 now maximum
13:41 - size is five in that case you will print
13:43 - we cannot insert any data you means you
13:46 - can say all flow condition this is all
13:47 - flow condition right so this will print
13:50 - what overflow condition this is an hour
13:53 - of overflow condition right and what is
13:57 - under flow condition suppose you want to
13:59 - DQ and there is nothing in this list
14:02 - right both front and rear are minus one
14:07 - in that case what that is done under
14:09 - flow condition that is to is empathy
14:12 - right now suppose before calling this DQ
14:14 - function I am calling peak function
14:16 - after this NQ but you can say front so
14:19 - it will return what front value is now n
14:21 - because C Q is between from front to
14:24 - rear that is here to here this is what
14:26 - garbage value so I rub this one this is
14:28 - garbage value right so now this will
14:30 - return 10 after that suppose you are
14:32 - calling DQ function continuously three
14:34 - times what would happen first of all DQ
14:37 - it means front plus plus front foot
14:38 - point here again DQ front plus plus AG +
14:42 - DQ front plus plus right means front and
14:46 - rear both are pointing to here now this
14:49 - is what a garbage value this is not a
14:50 - cure suppose I am removing these value
14:53 - from here from these cell because you
14:54 - can have override these values right now
14:57 - as you can see both front and rear are
14:59 - pointing to hair both are at same index
15:02 - so in de you can write down one
15:04 - condition you can check that condition
15:05 - also if front and rear is different is
15:07 - equal to is equal to read in that case
15:09 - what it means only one element is there
15:12 - in the queue so what you can do after
15:14 - removing this what will what would
15:16 - happen friend and driller is equal to
15:18 - minus one you can set front and rear is
15:20 - equal to minus one because this is the
15:22 - we have set for em ptq right or if we
15:27 - will not do this thing then simply same
15:29 - processor front plus plus right front
15:32 - plus plus means front foot point to here
15:34 - that is five friend becomes five
15:36 - so another condition of checking the in
15:39 - particular is what if front is greater
15:42 - than this rear because rear is still
15:44 - four front is five right in that case it
15:47 - means Q is empathy friend plus plus
15:50 - means we have deleted this Q right so
15:53 - delete this element from the queue so it
15:55 - means Q is empathy
15:56 - so when friend becomes greater than we
15:58 - are then also it is empathy so we are
16:00 - going to see how to write down these
16:02 - condition in next video
16:03 - fine now suppose if you talk about the
16:06 - time complexity then in that case these
16:08 - operations would take order of one only
16:11 - because we are not going to write any
16:13 - loops or anything for performing these
16:15 - operations so it would take order of one
16:17 - only right constraint time now suppose
16:20 - at some point of time both friend and
16:22 - Bria are pointing to this node
16:24 - it means Q is having only one data this
16:27 - this this this these four cells are
16:29 - empty right and now if you call NQ in
16:34 - that case it would return what Q is full
16:38 - that is the drawback why it will return
16:40 - Q is full because see see here near is
16:42 - what pointing to for or ear is for that
16:45 - is maximum size minus one and that is
16:47 - condition of what or flow condition
16:50 - means the Q is full now it will show you
16:52 - Q is full right but see these spaces are
16:56 - free but we cannot insert here this is
16:59 - what wastage of the space so this is a
17:01 - drawback of this Q we have a solution of
17:04 - this cube that is the circular queue
17:05 - that also I will discuss later fine
17:08 - so but this is now a drawback you have
17:11 - space but you cannot insert here data
17:13 - right now we will see some applications
17:16 - of Q so the most common application of
17:20 - this queue data structure is what it is
17:23 - used where you want to you know serve
17:26 - the request on a single shared resource
17:30 - suppose you have a single resource and
17:32 - that is shared
17:33 - let us take you you can take an example
17:36 - of printer suppose you have one printer
17:38 - and that is shareable fine so what would
17:41 - happen it's not like that suppose there
17:44 - are five pcs and these five pieces are
17:47 - sharing one printer it's not like that
17:49 - it will give command and this will print
17:51 - and at the same time it will print it
17:53 - will give command and it will print
17:55 - right what this printer will do suppose
17:58 - this this has given some command to
18:00 - print a date and now the printer is
18:02 - printing now at the same time computer
18:05 - this tree it has given command to this
18:07 - printer then what would happen the
18:10 - printer is busy 'no so what printer will
18:12 - do it will obviously it will have a
18:13 - program so that request would be stored
18:17 - in queue after that suppose this printer
18:21 - would give the request so it would store
18:23 - here after that this this would store
18:25 - here so it will in the memory in the
18:28 - printer memory it will what make a queue
18:30 - of all the requests right first of all
18:32 - it will print whatever the request it
18:35 - has even then it will fulfill requests
18:36 - of three then two like this right and
18:39 - queues are also used in real life
18:41 - scenario like you can take an example of
18:43 - a new oil in customer care then
18:45 - sometimes they tell you that they tell
18:47 - you to hold on for a few minutes because
18:49 - their representative is not free so what
18:51 - they do they use queues to put the
18:54 - people on hold right until their
18:57 - representative are free fine
18:59 - next you can take an example of
19:01 - processor see you have only one
19:03 - processor CPU you can see right so the
19:07 - processes would be placed in queue in
19:11 - operating system I guess we have
19:13 - discussed many times when we were
19:15 - discussing the concept of operating
19:17 - system then you can check out in the
19:18 - playlist there are ready queue there are
19:20 - waiting queue fine so the processes
19:23 - would be put in the queue and as soon as
19:27 - processor gets free it will take from
19:30 - the queue it will take the processes
19:32 - from the queue one by one right so all
19:35 - the processes are also put in the queue
19:37 - right because processor is what it is a
19:40 - shareable resource any process all the
19:44 - processes can share this processor
19:46 - but obviously we cannot execute all the
19:48 - processes at the same time so you have
19:52 - to put those processes and waiting or
19:54 - you can say those processes are put in
19:56 - queues right so these are some example
19:59 - these are some applications of queue
20:01 - data structure and there are many more
20:03 - applications of youth' we will discuss
20:05 - all these one-by-one in later videos so
20:07 - in next video basically we will discuss
20:09 - how to implement queue using arrays and
20:12 - then using linked lists and then using
20:14 - stacks fine so I'll send the next video
20:17 - till then bye bye take care

Cleaned transcript:

in this video we are going to talk about queues in data structure see what is the data structure it is a way of storing and organizing the data right we have discussed few data structures like arrays linked lists and stacks in this video we will see what is U so Q is what it is a linear data structure you can see or you can say Q is an abstract data type in this video we will discuss Q as an abstract data type ADT means when I say edit E it means we are going to define we are going to see the features or operations of Q we will not go in detail implementation right see we can implement Q's using arrays linked lists as well as using stack that implementation we will discuss in next video in this video we will see what is Q and what are different operations performed on Q fundamental operations fine as well as we will see some applications of Q's so let us understand this concept with a reallife scenario first of all right let us suppose there is a ticket counter fine that's a movie ticket counter you can consider right and now there is no one there in the queue or in the line fine first of all suppose you go and you stand there and after that second third fourth fifth five persons are there so obviously you if you are the first then you will get the ticket first then you will go after that second person then third and fourth and then fifth and suppose before you there are five persons and after that you reach there so you have you will have to stand at sixth position right and you will get ticket after be after you know these five persons fine so here the simple funda is what firstin firstout or you can say first come first so the person who is first in the row will get the ticket first right so now in the queue this funda is known as first in first out FIFO so Q is basically what it is a structure it is an ordered list as stack we have discussed staff is an ordered list that follow the principle of Li for last in first out queue is an collection or queue is an ordered list which follow what principle firstin firstout right now what is that principle see you can say Q is a structure that is going to follow some restrictions on insertion and deletion operation fine or that is going to follow a rule that is going to follow a principle and what is that rule insertion and deletion in case of queue insertion would be performed from one end right and the name of that and that end is known as rear or till right and deletion would be performed from another end and that end is known as head or you can say friend right in queue if you say more technically then we will use a rear end front not head and pain and rather than insertion insertion means adding a data in the queue fine so the technical name in the for in in this in the context of queue it is known as in queue right and deletion is known as DQ by and in stab this insertion and deletion is not known as push and pop fine so NQ operation should be performed from one end and DQ operation would be performed from another end right so we will see the logical representation of queue if you logically represent the queue it means it will have two ends to open it right in stab we have only one end one opponent like and queue would be represented something like this it is having two and one is this one is this right suppose I am taking this end is rear right and this is what friend obviously when you are going to implement this cue you will have to take front and rear two variables like that is must so insertion or you can see NQ operation would be performed from rear from here we can insert data in the cube and if you want to delete data from the queue it means from the front we can DQ we can delete data right so this is what a logical representation of a queue fine suppose and queue I have right now two elements two and three at some point of time right so at that time this front variable would be pointing to here and the rear variable would be pointing to here right and the index is suppose zero and one at some point of time we are suppose we are implementing the skew using array and at some point of point of time p.m. only two elements in that queue and index is zero and one so front is zero and rear is one now in this case if you want to insert third element from where we can insert from this end only so what you need to do if suppose the size of this do we have taken five we can insert five element the capacity is five right so now first of all you will increment this rear right so now rear plus plus that is real would be pointing to this node and now you can insert another it suppose I have inserted five right and if you want to delete then from here only you can delete right so first in first out firstly we have inserted two and that is the first element you can delete if suppose you want to later this five you cannot directly delete this five first of all you will have to delete this two from the queue then three from that you after that only you can delete this 5 right so it is that is why it is no it is known as it will follow FIFO principal love firstin firstout or you can say last in last out last in last out somewhere it is also written like this that the same thing last integer that is in queued in this 2 is 5 and that would be the last element you can remove so last in last out this is Q so now we will see some operation that can be performed on a Q so you can define Q as it is a ordered list or you can say it is a collection in which insertion can be performed from one end that is from rear end and a deletion can be performed from another end that is from front end of the queue fine and it is going to follow it is a structure you can say that is going to follow the FIFO rules that is firstin firstout right so now we will see some operation that can be performed on Q so two operation we have discussed that is first is n 2 and that is the second is DQ right these are two fundamental operations and Q and D Q n 2 means inserting or adding a data in the q DQ ms deleting a data from the queue see here in NQ I'm passing to as an argument because I want to suppose I want to insert 2 in the queue then I can pass this in the NQ in DQ no need to pass anything because always the element would be DQ'd from the front so the element which is at the front index of the queue that would be deleted right so no need to pass anything third may be friend or you can say peek in stack it was top it means the motto of this operator operation is what it is going to tell you what does the element at the front of the queue right we will see what is the element at the front of the queue without removing that from the queue or without deterring that element from the queue right now is queue full you can check by is full function it is it will return true if the queue is full it will otherwise it will return phones is empty same we have discussed in stack if the queue is empty then it could return true otherwise it will return false right now see the logical representation of you so this is the logical representation of queue fine any end you can take front or rear but you have to take care of that thing deletion from front and insertion from rear right so here I am taking this is what front and this is what rear I will insert always from here delete from here you can take front this side rear this side as you wish but insertion and deletion would be according to the rule only fine now if you want to insert some data here obviously you need to specify the size of this queue suppose the capacity of queue is fine you can say size I am taking is 5 how will take the size 5 Huggle implement this through that thing we will discuss in next video so it means I can insert 5 element in this queue right here I have 3 this end and index is 0 1 2 3 & 4 so initially there is nothing in the queue right in that case what we will do both friend front end this rear would point to minus 1 hypothetically we assume that there is a minus 1 index and these are pointing to minus 1 it means queue is empty right that is the signal if this is minus 1 it means Q is impeding now I want to include 2 now what would happen see friend is minus 1 rear is also minus 1 obviously we will increase front and rear both so front plus plus and rear plus plus also right so now front is also pointing to here and at this point of time rear is also pointing to here at the zero and now we can insert here too right now suppose again I want to NQ three I have hold again function and Q and suppose ten I want to insert in that case what will happen see friend will always point to this node the front one the front element we will not move this front for inserting the data inserting would be always from the rear part so the real variable we are going to move so first of all you will increase the rear rear plus plus means now rear is pointing to here and now here I can insert ten again suppose I am calling NQ minus 1 again what we will not touch this front we will move this rear insertion from drear only that thing you have to take care rear plus plus means rear would point here and now here I can insert minus 1 say at this point of time front is 0 and rear is now right now suppose I am calling DQ function no need to pass anything because always the data would be deleted from front now when you can touch this front now we will not touch this rear in DQ we will touch this friend right so now suppose you want to print the data you have DQ'd so you can write down printf the data you have DQ'd is from the queue you can print this value and after that what you will do you will do front plus plus right so now front is pointing to here front is one rear is two or in DQ simply you will write front plus plus that is also fine because now this is not a part of queue the part of queue is only two elements whatever between front and rear that is part of you this is now a garbage value and we don't care what the garbage value lies here in future if you will access this selling and usually if you will write here something that this value would be overwritten that is fine fine now suppose I am calling NQ function 3 times so now NQ 0 means from rerai I will know touch this front from rear I'm where only I can insert a year plus plus a year would be pointing to here and here I can insert a 0 into one rear plus plus here I can insert one into five then rear plus plus but what we have the size till here only so if rear is what rear is equal to four it means rear is equal to this maximum size minus one index is 4 now maximum size is five in that case you will print we cannot insert any data you means you can say all flow condition this is all flow condition right so this will print what overflow condition this is an hour of overflow condition right and what is under flow condition suppose you want to DQ and there is nothing in this list right both front and rear are minus one in that case what that is done under flow condition that is to is empathy right now suppose before calling this DQ function I am calling peak function after this NQ but you can say front so it will return what front value is now n because C Q is between from front to rear that is here to here this is what garbage value so I rub this one this is garbage value right so now this will return 10 after that suppose you are calling DQ function continuously three times what would happen first of all DQ it means front plus plus front foot point here again DQ front plus plus AG + DQ front plus plus right means front and rear both are pointing to here now this is what a garbage value this is not a cure suppose I am removing these value from here from these cell because you can have override these values right now as you can see both front and rear are pointing to hair both are at same index so in de you can write down one condition you can check that condition also if front and rear is different is equal to is equal to read in that case what it means only one element is there in the queue so what you can do after removing this what will what would happen friend and driller is equal to minus one you can set front and rear is equal to minus one because this is the we have set for em ptq right or if we will not do this thing then simply same processor front plus plus right front plus plus means front foot point to here that is five friend becomes five so another condition of checking the in particular is what if front is greater than this rear because rear is still four front is five right in that case it means Q is empathy friend plus plus means we have deleted this Q right so delete this element from the queue so it means Q is empathy so when friend becomes greater than we are then also it is empathy so we are going to see how to write down these condition in next video fine now suppose if you talk about the time complexity then in that case these operations would take order of one only because we are not going to write any loops or anything for performing these operations so it would take order of one only right constraint time now suppose at some point of time both friend and Bria are pointing to this node it means Q is having only one data this this this this these four cells are empty right and now if you call NQ in that case it would return what Q is full that is the drawback why it will return Q is full because see see here near is what pointing to for or ear is for that is maximum size minus one and that is condition of what or flow condition means the Q is full now it will show you Q is full right but see these spaces are free but we cannot insert here this is what wastage of the space so this is a drawback of this Q we have a solution of this cube that is the circular queue that also I will discuss later fine so but this is now a drawback you have space but you cannot insert here data right now we will see some applications of Q so the most common application of this queue data structure is what it is used where you want to you know serve the request on a single shared resource suppose you have a single resource and that is shared let us take you you can take an example of printer suppose you have one printer and that is shareable fine so what would happen it's not like that suppose there are five pcs and these five pieces are sharing one printer it's not like that it will give command and this will print and at the same time it will print it will give command and it will print right what this printer will do suppose this this has given some command to print a date and now the printer is printing now at the same time computer this tree it has given command to this printer then what would happen the printer is busy 'no so what printer will do it will obviously it will have a program so that request would be stored in queue after that suppose this printer would give the request so it would store here after that this this would store here so it will in the memory in the printer memory it will what make a queue of all the requests right first of all it will print whatever the request it has even then it will fulfill requests of three then two like this right and queues are also used in real life scenario like you can take an example of a new oil in customer care then sometimes they tell you that they tell you to hold on for a few minutes because their representative is not free so what they do they use queues to put the people on hold right until their representative are free fine next you can take an example of processor see you have only one processor CPU you can see right so the processes would be placed in queue in operating system I guess we have discussed many times when we were discussing the concept of operating system then you can check out in the playlist there are ready queue there are waiting queue fine so the processes would be put in the queue and as soon as processor gets free it will take from the queue it will take the processes from the queue one by one right so all the processes are also put in the queue right because processor is what it is a shareable resource any process all the processes can share this processor but obviously we cannot execute all the processes at the same time so you have to put those processes and waiting or you can say those processes are put in queues right so these are some example these are some applications of queue data structure and there are many more applications of youth' we will discuss all these onebyone in later videos so in next video basically we will discuss how to implement queue using arrays and then using linked lists and then using stacks fine so I'll send the next video till then bye bye take care
