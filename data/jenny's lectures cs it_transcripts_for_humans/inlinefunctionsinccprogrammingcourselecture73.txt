With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we are
00:05 - discussing uh functions in C++ in the
00:07 - previous video we have seen how actually
00:09 - function call works that stack function
00:11 - call stack what is happening behind the
00:13 - scene when you are calling a function
00:15 - right like that creation of activation
00:16 - record dealing with parameters pushing
00:18 - that into the stack that uh activation
00:21 - record then pop out that activation
00:23 - record from the stack when termination
00:24 - dealing with the return address return
00:26 - value and all right and this is
00:28 - basically we call it fun function called
00:31 - overhead right if you don't remember
00:34 - that thing let me just brief you that
00:35 - thing with this example after that we'll
00:38 - be discussing inline function in this
00:40 - video right we have this program
00:42 - basically a small program here we are
00:44 - just adding two numbers right this is
00:47 - the function definition add two
00:49 - parameters A and B return a plus b and
00:51 - here we are calling this function add
00:52 - and we passing parameter 1 and two what
00:54 - what is happening behind the scene how
00:56 - this function call Works actually when
00:57 - we are calling this add this function
01:00 - add then the control will go here and in
01:03 - that memory it's like we are dealing
01:05 - with that stack memory only so one
01:08 - activation record for this first first
01:10 - we have main function so for this main
01:11 - we have one activation record here right
01:13 - that will be pushed in this stack so
01:16 - here we have in we have sum and sum is
01:19 - zero right after we are calling this add
01:22 - so we are calling this add means control
01:23 - will go here this is function definition
01:26 - so one activation record for this add
01:29 - would be pushed in in this stack frame
01:31 - in the stack or this is called as
01:32 - activation record stack frame right now
01:36 - here we have a and b so a would be
01:40 - passed as one and B would be passed here
01:42 - that would be like value is two return a
01:45 - plus b so 1 + 2 it will return three
01:48 - right where it will return here
01:52 - here and after that it will just simply
01:55 - print some so this is kind of overhead
01:58 - just creating the activation record
01:59 - pushing that into the stack dealing with
02:01 - those parameters like copying this
02:03 - actual parameter to formal parameter and
02:05 - all right after that obviously saving
02:07 - that return address where you want to
02:09 - return what next instructions to be
02:11 - executed that's having that instruction
02:13 - pointer Base address stack pointer and
02:15 - all right so this is kind of overhead so
02:19 - uh if a function is very small yeah
02:22 - obviously this function is very small
02:23 - just addition and I have only one line
02:26 - it on a plus b right so this fun
02:30 - or sometime we have just display
02:31 - function rather than and and add we have
02:33 - display and here I'm just displaying C
02:36 - out the value of a and b is like
02:40 - whatever value you pass here one and two
02:41 - rather than adding right so if a
02:43 - function is very small then sometimes
02:45 - sometimes this function call Overhead
02:48 - might be more than the time spent
02:51 - executing the function means the time to
02:55 - execute the time taken to execute this
02:57 - function or you can say the execution
02:58 - time of this fun function is less than
03:01 - the function call Overhead time right so
03:04 - in this case we can use inline function
03:06 - inline function basically expanded in
03:09 - line while calling that function means
03:12 - in line function is a function which is
03:14 - expanded in line when it is called what
03:16 - does that mean I'll show you that thing
03:18 - also see if you want to make this add
03:20 - function inline function then you just
03:22 - have to add a keyword inline as a prefix
03:25 - I mean before this return type of the
03:27 - function while defining this function
03:29 - just add here a keyword so inline
03:32 - keyword then return type function name
03:33 - parameters and the function body but
03:35 - make sure the function should be very
03:36 - small or
03:37 - simple right uh hardly it contains like
03:41 - one or hardly two lines maximum right so
03:44 - and it's not compulsory that that
03:46 - compiler compiler will treat this
03:48 - function as inline function we can just
03:50 - suggest compiler by adding this keyword
03:53 - that please treat my function in line
03:55 - function because it's very small so here
03:57 - that function call Overhead is more
03:59 - rather than the time taken time uh you
04:01 - know the execution time of this function
04:03 - but it's completely depends on compiler
04:05 - whether it you know this function would
04:07 - be treated as in line or not right and
04:11 - sometimes even you don't know I mean
04:13 - even you don't suggest even you don't
04:14 - write this in line keyword and the
04:16 - function would be treated as inline
04:18 - function because compiler optimizations
04:21 - are very
04:23 - sophisticated right so it will treat
04:25 - that function in line even if you
04:26 - haven't written any inline keybord and
04:29 - sometimes you have written that in line
04:31 - keyword and your function will not be
04:32 - treated as in line
04:33 - function right so see now I we will
04:37 - discuss the advantages of using inline
04:39 - function the drawbacks and when to use
04:40 - inline function right now what is
04:42 - actually happening when you write here
04:44 - the inline keyword at the function poll
04:47 - while you're calling this function
04:48 - here here only at compile time only this
04:52 - the whole body of this inline function
04:55 - would be replaced here I mean the whole
04:58 - body of this inline function function
05:00 - gets inserted at the place of inline
05:03 - function call so I mean this line would
05:06 - be replaced with return a plus b here
05:09 - return a plus b so 1+ 2 return a plus b
05:11 - 1+ 2 means 3 so the control will not go
05:16 - here and back and all directly it will
05:18 - give you answer
05:20 - three so definitely it would be faster
05:23 - if you use in line function in your
05:24 - program and the efficiency would be a
05:25 - little bit more right but if a function
05:29 - contains Loops or static variables or
05:32 - switch or go to or a function is large
05:35 - then do not make that function in line
05:38 - function
05:39 - right if a function is very simple
05:42 - contains only one line or hardly two
05:44 - lines that function you can consider as
05:46 - inline function because see if you use
05:48 - more and more inline function maybe you
05:50 - think that yeah it is going to save time
05:52 - right the efficiency would be more right
05:55 - execution would be faster so make every
05:57 - function in line function but if you use
05:59 - more and more inline function then what
06:01 - happens suppose this is inline function
06:03 - ad and I'm calling this function in my
06:05 - program like 10
06:08 - times or 20
06:11 - times like add 1 2 add 2 three and like
06:14 - this 20 times I'm calling this function
06:16 - right so at every function call this
06:20 - statement or this whole body of the
06:22 - function gets inserted right at every
06:25 - function call obviously this is the
06:27 - meaning of inline function right right
06:29 - so in that case there would be you know
06:32 - that size of that binary executable file
06:34 - would be large and it may lead to
06:37 - sometime threshing right threshing I
06:39 - hope you have heard the term like
06:41 - threshing in memory in operating system
06:43 - right it's because of those page fault
06:45 - and swapping when page Vol and swapping
06:48 - is more then CPU utilization would be
06:50 - less and this will lead to ultimately
06:51 - threshing like in operating system or in
06:53 - memory right so that is why if you are
06:57 - calling this in line function many times
06:59 - then this would lead to this problem
07:02 - right if you change in this inline
07:04 - function right then you have to
07:06 - obviously recompile all the location
07:08 - where you are calling that function
07:11 - right to reflect the changes you have
07:13 - done in the in line function right so
07:16 - that compile time overhead would be more
07:18 - also basically in large projects and
07:20 - programs these inline functions would be
07:22 - Tre treated and no this inline function
07:24 - would be written in a separate file
07:25 - those header file or do H file so that
07:28 - the definition would be visible to every
07:30 - program right so let's run this program
07:33 - so this is a simple program right
07:35 - addition of two numbers if you run this
07:37 - then simply it will give you three the
07:39 - answer right but if I want to make this
07:42 - function in line so you just have to add
07:43 - a one line one keyword here in
07:46 - line let's run this and see again it
07:48 - will give you three now this time this
07:51 - it would be treated as this this body of
07:53 - the function return on a plus b would be
07:55 - replaced here like add 1 and two so it
07:59 - would be plac like here return a plus b
08:01 - so a b we know these are one and two so
08:04 - a plus b would be given as like three
08:05 - that is three so now I hope you got the
08:08 - idea about inline function what are
08:09 - inline function how to use when to use
08:10 - when not to use in line function and
08:13 - like advantages of using this function
08:14 - drawbacks of using in line function
08:16 - everything about function right so in
08:17 - the next video we'll see what are
08:18 - recursive function and what is recursion
08:20 - so now I'll see you in the next video
08:21 - till then bye bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing uh functions in C++ in the previous video we have seen how actually function call works that stack function call stack what is happening behind the scene when you are calling a function right like that creation of activation record dealing with parameters pushing that into the stack that uh activation record then pop out that activation record from the stack when termination dealing with the return address return value and all right and this is basically we call it fun function called overhead right if you don't remember that thing let me just brief you that thing with this example after that we'll be discussing inline function in this video right we have this program basically a small program here we are just adding two numbers right this is the function definition add two parameters A and B return a plus b and here we are calling this function add and we passing parameter 1 and two what what is happening behind the scene how this function call Works actually when we are calling this add this function add then the control will go here and in that memory it's like we are dealing with that stack memory only so one activation record for this first first we have main function so for this main we have one activation record here right that will be pushed in this stack so here we have in we have sum and sum is zero right after we are calling this add so we are calling this add means control will go here this is function definition so one activation record for this add would be pushed in in this stack frame in the stack or this is called as activation record stack frame right now here we have a and b so a would be passed as one and B would be passed here that would be like value is two return a plus b so 1 + 2 it will return three right where it will return here here and after that it will just simply print some so this is kind of overhead just creating the activation record pushing that into the stack dealing with those parameters like copying this actual parameter to formal parameter and all right after that obviously saving that return address where you want to return what next instructions to be executed that's having that instruction pointer Base address stack pointer and all right so this is kind of overhead so uh if a function is very small yeah obviously this function is very small just addition and I have only one line it on a plus b right so this fun or sometime we have just display function rather than and and add we have display and here I'm just displaying C out the value of a and b is like whatever value you pass here one and two rather than adding right so if a function is very small then sometimes sometimes this function call Overhead might be more than the time spent executing the function means the time to execute the time taken to execute this function or you can say the execution time of this fun function is less than the function call Overhead time right so in this case we can use inline function inline function basically expanded in line while calling that function means in line function is a function which is expanded in line when it is called what does that mean I'll show you that thing also see if you want to make this add function inline function then you just have to add a keyword inline as a prefix I mean before this return type of the function while defining this function just add here a keyword so inline keyword then return type function name parameters and the function body but make sure the function should be very small or simple right uh hardly it contains like one or hardly two lines maximum right so and it's not compulsory that that compiler compiler will treat this function as inline function we can just suggest compiler by adding this keyword that please treat my function in line function because it's very small so here that function call Overhead is more rather than the time taken time uh you know the execution time of this function but it's completely depends on compiler whether it you know this function would be treated as in line or not right and sometimes even you don't know I mean even you don't suggest even you don't write this in line keyword and the function would be treated as inline function because compiler optimizations are very sophisticated right so it will treat that function in line even if you haven't written any inline keybord and sometimes you have written that in line keyword and your function will not be treated as in line function right so see now I we will discuss the advantages of using inline function the drawbacks and when to use inline function right now what is actually happening when you write here the inline keyword at the function poll while you're calling this function here here only at compile time only this the whole body of this inline function would be replaced here I mean the whole body of this inline function function gets inserted at the place of inline function call so I mean this line would be replaced with return a plus b here return a plus b so 1+ 2 return a plus b 1+ 2 means 3 so the control will not go here and back and all directly it will give you answer three so definitely it would be faster if you use in line function in your program and the efficiency would be a little bit more right but if a function contains Loops or static variables or switch or go to or a function is large then do not make that function in line function right if a function is very simple contains only one line or hardly two lines that function you can consider as inline function because see if you use more and more inline function maybe you think that yeah it is going to save time right the efficiency would be more right execution would be faster so make every function in line function but if you use more and more inline function then what happens suppose this is inline function ad and I'm calling this function in my program like 10 times or 20 times like add 1 2 add 2 three and like this 20 times I'm calling this function right so at every function call this statement or this whole body of the function gets inserted right at every function call obviously this is the meaning of inline function right right so in that case there would be you know that size of that binary executable file would be large and it may lead to sometime threshing right threshing I hope you have heard the term like threshing in memory in operating system right it's because of those page fault and swapping when page Vol and swapping is more then CPU utilization would be less and this will lead to ultimately threshing like in operating system or in memory right so that is why if you are calling this in line function many times then this would lead to this problem right if you change in this inline function right then you have to obviously recompile all the location where you are calling that function right to reflect the changes you have done in the in line function right so that compile time overhead would be more also basically in large projects and programs these inline functions would be Tre treated and no this inline function would be written in a separate file those header file or do H file so that the definition would be visible to every program right so let's run this program so this is a simple program right addition of two numbers if you run this then simply it will give you three the answer right but if I want to make this function in line so you just have to add a one line one keyword here in line let's run this and see again it will give you three now this time this it would be treated as this this body of the function return on a plus b would be replaced here like add 1 and two so it would be plac like here return a plus b so a b we know these are one and two so a plus b would be given as like three that is three so now I hope you got the idea about inline function what are inline function how to use when to use when not to use in line function and like advantages of using this function drawbacks of using in line function everything about function right so in the next video we'll see what are recursive function and what is recursion so now I'll see you in the next video till then bye bye take care
