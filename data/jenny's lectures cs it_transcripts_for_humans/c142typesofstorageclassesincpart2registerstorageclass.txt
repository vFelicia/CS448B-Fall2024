With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing types of
00:02 - stories classes in c in the previous
00:04 - video we have discussed auto stories
00:05 - class in this this video will talk about
00:07 - the next stories class that is register
00:09 - stories class
00:10 - and i'll also i'll ask one question also
00:13 - that is based on auto storage class and
00:14 - the answer of that question you will get
00:16 - in the end of that video that question
00:17 - is also very important right now every
00:19 - single detail everything about
00:21 - registered stories class we are going to
00:22 - discuss in this video with the help of a
00:24 - program some very important points also
00:26 - i will tell you about the stories class
00:28 - that you would rarely find anywhere
00:30 - fine now before that just want to tell
00:32 - you one thing if you are preparing for
00:34 - gate 2023 exam or you are planning to
00:36 - prepare for gay 2023 then an academy is
00:39 - conducting a combat it's a scholarship
00:41 - test to maximize your gait and esc
00:43 - preparation which would be on 10th of
00:46 - april at 11 am and it is a live test
00:49 - and you can take this test for free you
00:52 - don't need to pay anything
00:54 - so in this test you will get a chance to
00:55 - compete with thousands of learners from
00:57 - all over india and you will
00:59 - you stand a chance to win up to 100
01:01 - scholarship
01:02 - top rankers will get up to 100
01:05 - scholarship here you will get 20
01:07 - question and the time limit would be 60
01:09 - minutes and the questions has been
01:11 - curated by their
01:12 - top
01:13 - gate and esc educators and with the help
01:16 - of uh you know live leaderboard you can
01:18 - instantly see you you know what the
01:20 - answer right or not and you can see
01:23 - where you are standing among the other
01:24 - learners from all over india
01:27 - and you'll also be given personalized
01:29 - rating and scoring with the help of that
01:31 - you can constantly measure your progress
01:34 - and after the combat you will get
01:36 - detailed in-depth video solutions
01:38 - provided by their experts so that you
01:40 - can identify your weak areas and your
01:43 - strength and you you know you can
01:44 - improve according to that
01:46 - and you can get it right next time
01:49 - so the enrollment link for this combat
01:51 - you will find in the description box of
01:52 - this video and you can use my code jkl10
01:55 - to enroll
01:56 - for this combat for free and if you use
01:58 - my code jkl10 for your gate
02:01 - and esc plus subscription you will get
02:04 - 10 percent discount on this subscription
02:06 - on all the paid subscriptions so all the
02:09 - relevant links and details i'll put in
02:11 - the description box of this video you
02:13 - can go and check out now let's see what
02:14 - is the stories class and you can see
02:16 - what is the register stories class first
02:19 - of all it is same as
02:21 - auto storage class
02:23 - except
02:24 - there are two differences first thing
02:25 - how to use this
02:27 - you are supposed to use
02:28 - this keyword resistor
02:30 - then
02:31 - the data type and then
02:33 - the name of the variable
02:35 - in the auto we use
02:37 - auto then data type and the name of the
02:39 - variable right here you will use this
02:42 - keyword resistor
02:43 - second thing is now default value of
02:45 - this would be garbage value same as
02:49 - auto
02:50 - scope is same that is
02:53 - block
02:54 - or you can say function or methods go
02:58 - we cannot declare
03:00 - this variable the you know the
03:02 - register type of variable
03:05 - the variable which is having a register
03:07 - storage class globally so global declare
03:10 - declaration is not allowed same in auto
03:13 - that also if i have shown you with the
03:16 - with the help of a program if you have
03:17 - declared
03:18 - a variable with auto storage class
03:21 - globally outside of main function then
03:23 - it would give error right it would have
03:25 - given you error same with this only
03:27 - local declaration is allowed no global
03:30 - declaration is allowed so within the
03:31 - block scope is within the block right
03:34 - and lifetime is till the end of that
03:37 - block or till the end of that function
03:38 - or method
03:40 - right
03:41 - now
03:42 - another main difference is
03:43 - location where
03:46 - this variable would be stored
03:50 - location the auto variable
03:52 - will be stored in ram
03:55 - or you can say that stack fragment of
03:58 - the memory ram
03:59 - but here this variable would be stored
04:02 - in
04:02 - cpu resistors
04:08 - right and why we store
04:10 - this in cpu resistor
04:12 - or is it possible to store all the
04:14 - variables in cpu register or you can say
04:16 - which type of variable we should store
04:18 - in cpu register means we in with which
04:21 - type of variable we should use a
04:22 - resistor with which type of variable we
04:24 - should we should use auto all you know
04:26 - answer of all these questions you will
04:27 - get one by one in this video right i
04:30 - guess this is clear to you garbage value
04:32 - you know default value the scope and the
04:35 - lifetime now main thing is
04:37 - the location where we are going to store
04:39 - this and why we are storing this here
04:41 - see
04:44 - for that thing you need to understand
04:46 - this see if you have written a program
04:48 - program is same i am going to write the
04:50 - same program that we have discussed in
04:51 - previous video or let me just write down
04:54 - a different program
04:55 - with which you know with hell of that
04:57 - program you will get it better this
04:59 - concept right
05:01 - now here the program is i want to you
05:03 - know sum
05:04 - ten numbers zero to nine right now here
05:08 - these variables i have declared as o2
05:11 - by default these are o2 right so the
05:13 - question
05:14 - you know
05:15 - i wanted to ask to you guys is what see
05:18 - if i
05:20 - by default the variable is auto if i
05:22 - don't write anything then that is auto
05:24 - so if globally i write in
05:26 - a
05:27 - global variable that would also be
05:28 - considered as auto but in previous video
05:31 - i have told you here
05:33 - global declaration of photo variable is
05:34 - not allowed so these two statements are
05:37 - contradictory
05:38 - right so how you will justify this
05:41 - thing what should be your answer think
05:43 - about this
05:45 - see now these variables are by default
05:46 - total variables right now
05:49 - the processing of this is what this
05:51 - program would be stored in
05:53 - in
05:54 - our hard disk
05:56 - right here we have the program this
05:58 - program
05:59 - whenever you are going to execute this
06:01 - program this would be loaded into memory
06:05 - or you can say that ram
06:08 - here
06:09 - here
06:10 - in ram we are going to load this program
06:12 - while execution
06:14 - right
06:15 - now
06:16 - instruction by instruction
06:18 - the processing would be done where not
06:21 - in ram
06:22 - where
06:23 - with the help of processor or cpu in
06:26 - processor
06:28 - or you can say cpu
06:30 - in cpu we are having that alu arithmetic
06:32 - and logic unit
06:34 - there the processing would be done so in
06:36 - cpu we have some resistors
06:41 - right
06:43 - out of these resistor one resistor is
06:45 - some you know data resistance also their
06:46 - instruction resistor is also there so
06:48 - one resistor is instruction resistor
06:50 - so one by one instruction would be
06:52 - loaded to that register
06:55 - right
06:56 - then processing would be done
06:59 - fine all the instruction one by one
07:01 - would be loaded here in the instruction
07:02 - register and then processing would be
07:04 - done
07:05 - right
07:06 - so now
07:07 - these variables are auto so we are going
07:09 - to store these variable in main memory
07:10 - so here we have i and sum two variables
07:14 - right
07:15 - i is equal to 0
07:16 - sum is equal to 0
07:18 - and then
07:20 - this this this
07:22 - is what for loop this would be first of
07:24 - all i is equal to 0 now sum is equal to
07:26 - sum plus i this is what instruction that
07:28 - would be loaded first here
07:30 - in cpu in register instruction resistor
07:33 - but sum is equal to sum plus i now some
07:34 - value is in main memory i value is also
07:38 - in main memory so obviously we are
07:39 - supposed to fetch that
07:41 - value first of all in register so that
07:44 - value would be fast
07:46 - here in the data register first of all
07:49 - then processing would be done some would
07:50 - be done and then that sum would be
07:53 - updated here
07:55 - some is what sum plus i that is 0 plus 0
07:57 - first to full sum is 0
08:00 - next instruction is i plus plus
08:02 - that would also be loaded first of all
08:04 - here
08:06 - but i value is stored in ram memory so
08:09 - then i value would be fetched here
08:11 - then i plus plus would be done and that
08:13 - value would be stored here now i become
08:15 - one
08:17 - now next instruction is sum is equal to
08:19 - sum plus i same that instruction would
08:21 - be loaded here in the instruction
08:22 - register but the value the sum and i
08:25 - value is in the ram so the value would
08:28 - be loaded here
08:30 - one and zero then processing would be
08:32 - done
08:33 - one plus zero is one so then some would
08:35 - be updated here
08:37 - right
08:38 - so this is now processing
08:41 - we are you know processing is to be done
08:42 - in the resistor but value we are storing
08:44 - in
08:45 - memory
08:46 - so we are switching we are
08:49 - first of all you know fetching this
08:51 - memory fetching the data in the resistor
08:53 - then we are updating here then again for
08:55 - next instruction we are fetching the
08:56 - data and then we again
09:00 - again we are you know loaded the data in
09:02 - the ram memory updated the data here the
09:04 - sum value here
09:06 - so this process this processing is what
09:08 - you can say switching
09:10 - switching from ram to resistor so this
09:13 - is going to take time
09:16 - the processing
09:18 - is fast processing is fast but switching
09:20 - this switching is taking some time so
09:22 - because of this switching
09:25 - the running time is increasing
09:27 - the efficiency of the program is
09:29 - decreasing
09:30 - right
09:31 - so the better option is what
09:33 - better to store this i value and some
09:36 - value in register only here only
09:40 - not in memory here i and sum
09:45 - so whenever we fetch the instruction sum
09:47 - is equal to sum plus i
09:49 - the i and some value is already in the
09:50 - register we do some processing
09:53 - and value would be updated in in this
09:55 - variable only
09:57 - right i plus plus
09:59 - okay i value is here only do i plus plus
10:01 - again for next iteration sum plus i
10:05 - then next instruction is m plus i okay i
10:08 - n some value we are we are having these
10:10 - values in resistor only so we don't need
10:12 - to fetch these values from main memory
10:14 - so this switching time
10:15 - we are removing this switching time by
10:18 - storing these
10:19 - variables into register
10:22 - right
10:24 - so if we
10:25 - store a variable
10:27 - like if we are using register storage
10:29 - class if you are storing that variable
10:31 - into resistor means
10:32 - you can
10:34 - quickly access those variables
10:37 - for faster access
10:39 - so it will increase the efficiency of
10:41 - the program it will decrease the running
10:43 - time of the program
10:44 - running time of the program would be
10:46 - less so obviously efficiency would be
10:48 - more
10:50 - fine so that's why we use resistor
10:51 - storage class now you will say for all
10:54 - the variables better to use resistor
10:55 - storage class
10:57 - because we can easily we can you know
10:59 - access fastly these variables so better
11:02 - we use for all the variables declare all
11:05 - the variables has register storage class
11:07 - using register source class but it is
11:08 - not possible
11:10 - because these resistors
11:12 - the size of these resistors are very
11:14 - less in kbs only
11:17 - so if we store all the variables
11:19 - in registers
11:20 - then
11:22 - for memory for the execution for
11:24 - execution of the instruction there would
11:25 - be no memory in register so that would
11:27 - be also a problem for
11:29 - us
11:30 - so now which type of variable we should
11:32 - store in resistor the variables which we
11:34 - frequently use
11:36 - like counter variables the loop
11:38 - variables the psi variable we are
11:41 - accessing
11:42 - frequently the sum variable we are
11:44 - accessing in every iteration frequently
11:45 - so better to use these variables better
11:47 - to store these variables as register
11:50 - variable in cpu register not all the
11:52 - variables
11:53 - right
11:54 - because register memory is very less we
11:56 - cannot store all the variables in
11:57 - resistor this thing is very important i
12:00 - hope now you put this point right now
12:02 - which type of variable we should store
12:04 - in cpu resistor
12:05 - fine
12:07 - now it is not guaranteed that if you
12:10 - specify here register storage class this
12:12 - i and sum would be
12:14 - stored in cpu register no it totally
12:16 - depends on many factors one factor is
12:18 - depends on you can say the resistor is
12:20 - free or not the data register is free or
12:22 - not available or not it depends on the
12:24 - compiler only we can only force the
12:27 - compiler that
12:28 - store
12:29 - these high and sum these local variables
12:32 - in cpu register but it is not guaranteed
12:35 - that these variables would be stored in
12:37 - cpu register
12:39 - if the resistor is not available
12:41 - then or it depends on any factor one
12:43 - factor is availability of the cpu
12:45 - register or it depends on the some you
12:47 - know restriction some uh
12:48 - implementation also right hardware
12:50 - implementation and
12:52 - on many factors so now if
12:56 - these are not compiler is not able to
12:58 - allocate uh you know store these local
13:01 - variables in cpu register then
13:03 - by default these would be stored these
13:05 - these would be considered as auto
13:07 - so this i and sum would be
13:10 - here in main memory only but we do not
13:12 - know
13:13 - for our satisfaction we have written
13:14 - resistor but we do not know that
13:17 - these are in memory or in cpu resistor
13:19 - we don't know
13:20 - right one more point about resistor
13:22 - variably is what
13:24 - we cannot use pointer means we cannot uh
13:27 - uh you know use pointer with this
13:29 - resistor variable like what if i'm using
13:32 - int i and
13:35 - here i am using int
13:37 - asterisk
13:38 - ptr
13:39 - and in ptr i want to store address of
13:42 - this i
13:43 - address of this i is register variable
13:45 - right
13:46 - i am going to store address of the site
13:48 - in this ptr this would not be allowed
13:51 - you cannot use this unity operator with
13:53 - this eye
13:54 - because this eye is not having any
13:56 - memory
13:57 - location the psi is what in a resistor
14:00 - it is not having any memory location in
14:02 - memory so we cannot use address of
14:04 - operator we cannot you can say d
14:05 - reference this we cannot use pointer
14:07 - with this
14:08 - we cannot get the address of a resistor
14:10 - variable with the help of pointer this
14:12 - point is also very important right
14:16 - yeah but we can write down this thing
14:18 - like register in strict
14:21 - i
14:22 - and in i now we can store address of
14:24 - another variable
14:26 - that is fine
14:28 - right
14:30 - i hope now you good the difference
14:31 - between these two points
14:33 - fine next point about this variable is
14:35 - what
14:36 - so why we use this resistor if we want
14:38 - to store some local variable into cpu
14:41 - register then use register storage class
14:43 - local variables i am saying not global
14:45 - variables
14:46 - we cannot write this thing outside
14:48 - domain this thing register
14:50 - in
14:51 - x is equal to 10 this would not be
14:53 - allowed this global declaration is not
14:55 - allowed same in auto this global
14:57 - declaration is not allowed only local
14:58 - scope is allowed within the block
15:01 - inside a block or
15:03 - a function
15:04 - right only local declaration is allowed
15:06 - for both resistance and auto no global
15:08 - declaration is allowed i hope now you
15:10 - can write down a program it is
15:13 - same almost same as o2 only differences
15:16 - we use this keyword and where this would
15:18 - be stored in cpu register rather than
15:20 - the memory that's it otherwise
15:22 - everything is same as auto so the same
15:24 - example you can take and you can just
15:26 - you or you this example you can take and
15:28 - you can
15:29 - you can try out this thing this will
15:30 - give error or not and you can tell me in
15:32 - comment box it is giving error or not
15:34 - right i hope now you can try the program
15:37 - by yourself fine
15:39 - so now that's it from my side about this
15:41 - resistance source glass if you have any
15:43 - other point if you know any other point
15:45 - about this storage class you can write
15:47 - down that thing in uh comment section so
15:49 - that other people can also get help from
15:50 - that
15:51 - comment right so from the next we will
15:53 - see about a static storage class so now
15:56 - it's in the next video till then bye bye
15:57 - take care

Cleaned transcript:

so in the series of learning c programming we are discussing types of stories classes in c in the previous video we have discussed auto stories class in this this video will talk about the next stories class that is register stories class and i'll also i'll ask one question also that is based on auto storage class and the answer of that question you will get in the end of that video that question is also very important right now every single detail everything about registered stories class we are going to discuss in this video with the help of a program some very important points also i will tell you about the stories class that you would rarely find anywhere fine now before that just want to tell you one thing if you are preparing for gate 2023 exam or you are planning to prepare for gay 2023 then an academy is conducting a combat it's a scholarship test to maximize your gait and esc preparation which would be on 10th of april at 11 am and it is a live test and you can take this test for free you don't need to pay anything so in this test you will get a chance to compete with thousands of learners from all over india and you will you stand a chance to win up to 100 scholarship top rankers will get up to 100 scholarship here you will get 20 question and the time limit would be 60 minutes and the questions has been curated by their top gate and esc educators and with the help of uh you know live leaderboard you can instantly see you you know what the answer right or not and you can see where you are standing among the other learners from all over india and you'll also be given personalized rating and scoring with the help of that you can constantly measure your progress and after the combat you will get detailed indepth video solutions provided by their experts so that you can identify your weak areas and your strength and you you know you can improve according to that and you can get it right next time so the enrollment link for this combat you will find in the description box of this video and you can use my code jkl10 to enroll for this combat for free and if you use my code jkl10 for your gate and esc plus subscription you will get 10 percent discount on this subscription on all the paid subscriptions so all the relevant links and details i'll put in the description box of this video you can go and check out now let's see what is the stories class and you can see what is the register stories class first of all it is same as auto storage class except there are two differences first thing how to use this you are supposed to use this keyword resistor then the data type and then the name of the variable in the auto we use auto then data type and the name of the variable right here you will use this keyword resistor second thing is now default value of this would be garbage value same as auto scope is same that is block or you can say function or methods go we cannot declare this variable the you know the register type of variable the variable which is having a register storage class globally so global declare declaration is not allowed same in auto that also if i have shown you with the with the help of a program if you have declared a variable with auto storage class globally outside of main function then it would give error right it would have given you error same with this only local declaration is allowed no global declaration is allowed so within the block scope is within the block right and lifetime is till the end of that block or till the end of that function or method right now another main difference is location where this variable would be stored location the auto variable will be stored in ram or you can say that stack fragment of the memory ram but here this variable would be stored in cpu resistors right and why we store this in cpu resistor or is it possible to store all the variables in cpu register or you can say which type of variable we should store in cpu register means we in with which type of variable we should use a resistor with which type of variable we should we should use auto all you know answer of all these questions you will get one by one in this video right i guess this is clear to you garbage value you know default value the scope and the lifetime now main thing is the location where we are going to store this and why we are storing this here see for that thing you need to understand this see if you have written a program program is same i am going to write the same program that we have discussed in previous video or let me just write down a different program with which you know with hell of that program you will get it better this concept right now here the program is i want to you know sum ten numbers zero to nine right now here these variables i have declared as o2 by default these are o2 right so the question you know i wanted to ask to you guys is what see if i by default the variable is auto if i don't write anything then that is auto so if globally i write in a global variable that would also be considered as auto but in previous video i have told you here global declaration of photo variable is not allowed so these two statements are contradictory right so how you will justify this thing what should be your answer think about this see now these variables are by default total variables right now the processing of this is what this program would be stored in in our hard disk right here we have the program this program whenever you are going to execute this program this would be loaded into memory or you can say that ram here here in ram we are going to load this program while execution right now instruction by instruction the processing would be done where not in ram where with the help of processor or cpu in processor or you can say cpu in cpu we are having that alu arithmetic and logic unit there the processing would be done so in cpu we have some resistors right out of these resistor one resistor is some you know data resistance also their instruction resistor is also there so one resistor is instruction resistor so one by one instruction would be loaded to that register right then processing would be done fine all the instruction one by one would be loaded here in the instruction register and then processing would be done right so now these variables are auto so we are going to store these variable in main memory so here we have i and sum two variables right i is equal to 0 sum is equal to 0 and then this this this is what for loop this would be first of all i is equal to 0 now sum is equal to sum plus i this is what instruction that would be loaded first here in cpu in register instruction resistor but sum is equal to sum plus i now some value is in main memory i value is also in main memory so obviously we are supposed to fetch that value first of all in register so that value would be fast here in the data register first of all then processing would be done some would be done and then that sum would be updated here some is what sum plus i that is 0 plus 0 first to full sum is 0 next instruction is i plus plus that would also be loaded first of all here but i value is stored in ram memory so then i value would be fetched here then i plus plus would be done and that value would be stored here now i become one now next instruction is sum is equal to sum plus i same that instruction would be loaded here in the instruction register but the value the sum and i value is in the ram so the value would be loaded here one and zero then processing would be done one plus zero is one so then some would be updated here right so this is now processing we are you know processing is to be done in the resistor but value we are storing in memory so we are switching we are first of all you know fetching this memory fetching the data in the resistor then we are updating here then again for next instruction we are fetching the data and then we again again we are you know loaded the data in the ram memory updated the data here the sum value here so this process this processing is what you can say switching switching from ram to resistor so this is going to take time the processing is fast processing is fast but switching this switching is taking some time so because of this switching the running time is increasing the efficiency of the program is decreasing right so the better option is what better to store this i value and some value in register only here only not in memory here i and sum so whenever we fetch the instruction sum is equal to sum plus i the i and some value is already in the register we do some processing and value would be updated in in this variable only right i plus plus okay i value is here only do i plus plus again for next iteration sum plus i then next instruction is m plus i okay i n some value we are we are having these values in resistor only so we don't need to fetch these values from main memory so this switching time we are removing this switching time by storing these variables into register right so if we store a variable like if we are using register storage class if you are storing that variable into resistor means you can quickly access those variables for faster access so it will increase the efficiency of the program it will decrease the running time of the program running time of the program would be less so obviously efficiency would be more fine so that's why we use resistor storage class now you will say for all the variables better to use resistor storage class because we can easily we can you know access fastly these variables so better we use for all the variables declare all the variables has register storage class using register source class but it is not possible because these resistors the size of these resistors are very less in kbs only so if we store all the variables in registers then for memory for the execution for execution of the instruction there would be no memory in register so that would be also a problem for us so now which type of variable we should store in resistor the variables which we frequently use like counter variables the loop variables the psi variable we are accessing frequently the sum variable we are accessing in every iteration frequently so better to use these variables better to store these variables as register variable in cpu register not all the variables right because register memory is very less we cannot store all the variables in resistor this thing is very important i hope now you put this point right now which type of variable we should store in cpu resistor fine now it is not guaranteed that if you specify here register storage class this i and sum would be stored in cpu register no it totally depends on many factors one factor is depends on you can say the resistor is free or not the data register is free or not available or not it depends on the compiler only we can only force the compiler that store these high and sum these local variables in cpu register but it is not guaranteed that these variables would be stored in cpu register if the resistor is not available then or it depends on any factor one factor is availability of the cpu register or it depends on the some you know restriction some uh implementation also right hardware implementation and on many factors so now if these are not compiler is not able to allocate uh you know store these local variables in cpu register then by default these would be stored these these would be considered as auto so this i and sum would be here in main memory only but we do not know for our satisfaction we have written resistor but we do not know that these are in memory or in cpu resistor we don't know right one more point about resistor variably is what we cannot use pointer means we cannot uh uh you know use pointer with this resistor variable like what if i'm using int i and here i am using int asterisk ptr and in ptr i want to store address of this i address of this i is register variable right i am going to store address of the site in this ptr this would not be allowed you cannot use this unity operator with this eye because this eye is not having any memory location the psi is what in a resistor it is not having any memory location in memory so we cannot use address of operator we cannot you can say d reference this we cannot use pointer with this we cannot get the address of a resistor variable with the help of pointer this point is also very important right yeah but we can write down this thing like register in strict i and in i now we can store address of another variable that is fine right i hope now you good the difference between these two points fine next point about this variable is what so why we use this resistor if we want to store some local variable into cpu register then use register storage class local variables i am saying not global variables we cannot write this thing outside domain this thing register in x is equal to 10 this would not be allowed this global declaration is not allowed same in auto this global declaration is not allowed only local scope is allowed within the block inside a block or a function right only local declaration is allowed for both resistance and auto no global declaration is allowed i hope now you can write down a program it is same almost same as o2 only differences we use this keyword and where this would be stored in cpu register rather than the memory that's it otherwise everything is same as auto so the same example you can take and you can just you or you this example you can take and you can you can try out this thing this will give error or not and you can tell me in comment box it is giving error or not right i hope now you can try the program by yourself fine so now that's it from my side about this resistance source glass if you have any other point if you know any other point about this storage class you can write down that thing in uh comment section so that other people can also get help from that comment right so from the next we will see about a static storage class so now it's in the next video till then bye bye take care
