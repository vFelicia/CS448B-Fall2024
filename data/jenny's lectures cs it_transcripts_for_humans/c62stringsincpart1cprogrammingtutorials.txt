With timestamps:

00:00 - so in the series of learning programming
00:01 - in c from this video I'm going to start
00:04 - strengths in C in this video we'll talk
00:06 - about basics of strengths like what is
00:09 - string and how the string is different
00:11 - from character array how to declare a
00:13 - string how to initialize a string
00:15 - different different methods of
00:16 - initializing strings with some example
00:18 - that we'll discuss in this video so now
00:21 - what is string in simple terms if you
00:24 - say in C string is simply array of
00:28 - characters
00:34 - you know what is array right we have
00:36 - discussed array how to say how to
00:38 - declare array and AR data type first of
00:41 - all you will write then we used to write
00:44 - array name and then size of a right
00:48 - array means collection of more than one
00:50 - data items that are of same type right
00:53 - either int or float or C right so now it
00:57 - is array of
00:58 - characters right right means how to
01:02 - declare a string it is array of
01:05 - character so data type must always be a
01:09 - character care the data type would
01:12 - always be a
01:13 - character right in case of string this
01:16 - is I'm know writing what declaration of
01:20 - string so data type always be a
01:22 - character here you cannot write data
01:24 - type because here we cannot write any
01:25 - int or float or anything right in string
01:30 - always the data type would be character
01:32 - we can only store
01:34 - characters right so care
01:38 - here string name any name you can take
01:41 - and here same size you will give size of
01:44 - the string see only difference is in
01:47 - Array we can take any data type int
01:49 - float C right but in string you can only
01:53 - take data type character because string
01:55 - is array of
01:57 - characters right or you can say it is a
02:00 - character array in other words you can
02:02 - also say string is a character array the
02:04 - only difference is what string you can
02:07 - say string is a character array which is
02:10 - ending with a null
02:12 - character whatever I'm saying I'm just
02:15 - going to you know justify this thing so
02:17 - this is I guess clear Declaration of a
02:20 - string right so if I declare a string
02:22 - like care and string name I'm taking
02:25 - generally we take like name and I'm
02:28 - taking size what
02:31 - 10 this is what declaration of a string
02:35 - and you know name of the string is name
02:39 - right name I'm taking only and the size
02:41 - is 10 right so now here see string will
02:46 - always be ended with a null
02:49 - character right if how memory would be
02:53 - allocated to this 10 bytes should be
02:55 - allocated 10 bytes why because character
02:58 - is going to take only one by suppose
03:01 - address is 2000 so Next Bite would be
03:05 - 2001 then 2 then 3 then
03:11 - four and 2009 something like this right
03:15 - so here the name of this is what
03:18 - name I mean the variable the string name
03:21 - I'm taking just name so name and name is
03:24 - containing What Base address of the
03:27 - string that is 2,000
03:30 - we know array is what array is
03:32 - considered as a internal pointer because
03:35 - it is containing array the name of the
03:36 - array variable is containing Base
03:39 - address of the array or you can say the
03:40 - address of the first element of the
03:42 - array and string is also an array it is
03:44 - array of characters right so obviously
03:47 - the name of this string is also going to
03:49 - contain Base address of the string B
03:52 - Base address of this character array or
03:53 - of the string you can say Base address
03:55 - is 2,000 so here in the name we have
03:58 - 2,000 so it is you can say internal
04:00 - pointer to this
04:02 - string right and index would be same 0
04:05 - to size minus one 0 to
04:08 - n see now the point the main point is
04:11 - what in this string or in this character
04:13 - array we can only store how many
04:16 - characters nine
04:18 - characters because string would always
04:22 - be ended with a null character so in at
04:25 - the last we always store null
04:28 - character so where you can store Nine
04:31 - characters right or if
04:35 - C so I guess declaration is clear let me
04:38 - store some value now how to initialize
04:41 - this string multiple ways are there one
04:44 - way is while declaring here only we can
04:47 - write what string as we have discussed
04:51 - in previous videos also that starting
04:53 - videos of C programming how we write
04:55 - string something like this in double
04:57 - quotes if I write in double quotes
05:01 - Jenny so this is considered as string if
05:04 - I write Jenny Jenny's
05:09 - lectures this is also a string if I
05:13 - write something like this one 2 3 4 5 in
05:17 - double quotes this is also
05:20 - string right it's not like that I'm
05:22 - saying it's array of characters so you
05:25 - can only uh store A B C D and up to Zed
05:29 - no you can also store a white space uh
05:34 - these numbers because if you write this
05:37 - one 2 3 4 5 in this that is considered
05:39 - as string if you write one in single
05:42 - code that is considered as character if
05:45 - you write two like this this is
05:47 - considered as character if you write
05:49 - space like this is space in single code
05:52 - that that is considered as
05:54 - character so please don't get confused
05:56 - like characters are only a BC D till Z
06:01 - right okay now see and how this data is
06:05 - to be stored here SK values would be
06:08 - stored I guess that you know right the
06:11 - character system that also we have
06:12 - discussed in previous videos you can
06:14 - check out the playlist of C programming
06:15 - and you can check out the previous
06:16 - videos so SK values would be stored so
06:19 - suppose I'm I am storing here something
06:21 - like this
06:25 - J that's
06:26 - it right I'm initializing the string
06:30 - here this is one way of initial
06:32 - initializing a string initialization of
06:34 - a string using string literal we call as
06:38 - string literal Right double quotes J so
06:41 - how it would be stored in this memory j
06:44 - e double n y
06:48 - and at last string would be ended with a
06:52 - null character SK value of null
06:55 - character is zero right so that is uh
06:59 - the difference between string and
07:00 - character array string is is a character
07:02 - array you can you know say it's a
07:05 - character array that is always ended
07:06 - with a null character and why it is
07:10 - ended with null that also we'll discuss
07:12 - the reason also we'll discuss right one
07:15 - by one we'll discuss everything about
07:17 - string uh so now by default compiler
07:20 - will put null at last and here some
07:23 - garbage
07:24 - values right and if I write second way
07:29 - of initializing string is what one way
07:31 - is this second way is you can also write
07:34 - something like this I hope you can see
07:36 - this care name and I'm taking suppose 10
07:41 - here so how you can
07:44 - initialize
07:46 - j e in characters
07:51 - form J is individual character all are
07:55 - individual characters I'm providing list
07:57 - of characters but here at last
07:59 - explicitly you have to provide SL sorry
08:02 - null
08:04 - character right that is another way of
08:06 - initializing string that is also fine
08:09 - this is how this is what uh that is also
08:12 - stored something like this J and Y and
08:14 - at last you have provided null character
08:16 - that is also fine and remaining would be
08:18 - garbage value right so that is also
08:21 - correct that is also correct but you
08:23 - initialize if you initialize something
08:25 - like this see I'm not providing the size
08:28 - here
08:30 - that is also correct why because you are
08:33 - providing the values this is the string
08:37 - those these values you want in this
08:38 - string in this character array so
08:40 - automatically compiler will uh compiler
08:43 - will do what it will
08:45 - U I'm not getting the exact word
08:50 - y sorry compiler will automatically
08:52 - decide know find out the size and
08:55 - according to that it will store right so
08:58 - how the this is going to be stored the
09:00 - size would be now in this case size
09:02 - would be 1 2 3 4 5 6 like
09:08 - this j e n y and at last null so only
09:13 - what uh six bites to be allocated right
09:18 - no Wast no wastage of space here also
09:20 - you can skip the size because it is what
09:23 - string you are giving right Jenny it is
09:26 - in double quot so that is why it is what
09:27 - a string so same it would be stored like
09:29 - J Jenny and automatically compiler will
09:31 - add what uh null character at last right
09:36 - so by default size would be 1 2 3 4 5
09:39 - and six so the number of characters plus
09:43 - one that you need to take care size
09:45 - would be that thing number of characters
09:46 - plus one one for null character right
09:50 - now another way of initializing this a
09:53 - string is what and see this is also a
09:55 - string if I write something like
09:58 - this
10:00 - Jenny
10:02 - and with space and then katri this is
10:05 - also string space is also allowed
10:07 - symbols are also like plus minus divide
10:09 - these symbols are also allowed within
10:10 - this string that is also fine I hope you
10:13 - got my point what a string is Right
10:16 - special symbols are also a lot whatever
10:17 - you will write in this double quotes
10:19 - that is considered as string you can
10:20 - write something like this right or you
10:22 - know like welcome to my world that is
10:25 - also string in double quotes that is
10:27 - also fine right so now uh next is see
10:31 - this initialization is what it's I guess
10:33 - similar to one dimensional array right
10:37 - so you can also say string is One D one
10:39 - dimensional AR one dimensional character
10:41 - array right where each you know that
10:44 - element is either a character constant
10:46 - or a string constant right but here the
10:49 - data type must be care and one more
10:51 - thing in C string is not considered as a
10:54 - data type like int float and Care these
10:58 - are data types in C array is also Drive
11:00 - data type and see we also discuss some
11:02 - more data types right structure and
11:04 - Union these are also data types user
11:06 - defined data types right but string is
11:08 - not a data type in C separate data type
11:11 - in C but yeah we can represent string as
11:14 - a character array in C right so here
11:18 - format specifier for string is
11:21 - percentage
11:24 - s right like in for integer percentage D
11:28 - for Lo percentage f for character
11:31 - percentage C for uh string it's
11:35 - percentage
11:36 - s right and this is very important this
11:40 - also some properties of this also we'll
11:42 - discuss one by one right now another way
11:45 - of initializing string is what like I
11:47 - can also write care name and I'm not
11:51 - supposed giving any size here and I'm
11:53 - initializing it something like this V
11:57 - space space is a character so I'm
12:00 - providing list of characters so that is
12:01 - also in single code that is space here V
12:04 - rock that is also perfect so here the
12:08 - size of the string would be 1 2 3 4 5 6
12:11 - 7 + 1 that is 8 8 how suppose I'm uh
12:17 - know eight like
12:22 - this so index would be 0 to 7 8 bytes
12:25 - should be allocated and here we store V
12:28 - then space
12:29 - Rock and
12:31 - null I guess you got it and this address
12:34 - address would be stored in this uh this
12:36 - name I mean the string name so string
12:38 - name is considered as a pointer pointer
12:40 - to the first character of the string
12:43 - right so we can access the the string
12:45 - using this pointer also and next way is
12:49 - if you declare here so you must declare
12:51 - size what eight if you declare five it
12:56 - is not
12:57 - allowed because size is only five but we
13:00 - are providing values more than five so
13:02 - that is not allowed size would be number
13:04 - of characters plus one right now 10 is
13:08 - fine right remaining would be any
13:10 - garbage value another way of
13:12 - initializing string is see if you want
13:15 - to initialize like this scare name and
13:18 - I'm providing sizes 10 and in next line
13:21 - I want to write name 10 is equal to j e
13:24 - n y
13:26 - j this is not allowed we cannot separate
13:29 - this out Declaration and initialization
13:32 - that would be in same line so this would
13:34 - give an error this is not allowed in see
13:37 - right uh next is if you want to do
13:40 - something like this like name 10 and
13:43 - this is
13:44 - what Jenny and I'm writing sorry
13:48 - care
13:50 - care and uh suppose I'm writing S1 same
13:54 - size is 10 and I want to initialize this
13:57 - S1 equal to name because this is also
14:02 - string this is also string I want to
14:03 - copy the whatever in this string that is
14:06 - Jenny into S1 I want to write this thing
14:08 - so that is also not allowed see here S1
14:10 - is what it's like array name so we
14:12 - cannot put any array name to the left
14:14 - side of this equal to operate have to
14:17 - read a string or you can have to
14:19 - initialize a string at run time so here
14:22 - in this case we are having what we use
14:24 - in array using
14:26 - scanf like for Loop and scanf use atun
14:29 - time initialization but here we use
14:30 - scanf also we can also use gets function
14:32 - we can also use get character two to
14:34 - three types of function we can use so
14:36 - that we'll discuss in next video because
14:38 - we have some drawbacks of scanner
14:39 - function that's why we use get as
14:41 - function also we have some drawbacks of
14:42 - get as function so that everything we'll
14:44 - discuss in next video with the proper
14:46 - example and that example also I'll show
14:48 - you practically on my laptop right so
14:51 - now some questions on string for you is
14:53 - I guess you got the basics of string
14:55 - only right I mean what is a string and
14:58 - some declaration and initialization like
15:01 - uh compile time initialization of string
15:03 - and some points important points about
15:05 - string I hope you got everything right
15:07 - so now you have to tell me in comment
15:09 - box like these are valid or not this
15:12 - initialization of string and if there's
15:14 - any error you can tell me what is the
15:16 - error or here you have to tell me the
15:18 - size because I'm not giving any size
15:20 - what size will be you know determined by
15:22 - the compiler automatically in this case
15:24 - and in this case right so this is
15:26 - assignment for you so now and the next
15:29 - video will discuss next part of our
15:30 - string like how to read a string how to
15:32 - print a string everything about string
15:34 - with some examples and I'll see you in
15:35 - the next video till then bye-bye take
15:39 - care

Cleaned transcript:

so in the series of learning programming in c from this video I'm going to start strengths in C in this video we'll talk about basics of strengths like what is string and how the string is different from character array how to declare a string how to initialize a string different different methods of initializing strings with some example that we'll discuss in this video so now what is string in simple terms if you say in C string is simply array of characters you know what is array right we have discussed array how to say how to declare array and AR data type first of all you will write then we used to write array name and then size of a right array means collection of more than one data items that are of same type right either int or float or C right so now it is array of characters right right means how to declare a string it is array of character so data type must always be a character care the data type would always be a character right in case of string this is I'm know writing what declaration of string so data type always be a character here you cannot write data type because here we cannot write any int or float or anything right in string always the data type would be character we can only store characters right so care here string name any name you can take and here same size you will give size of the string see only difference is in Array we can take any data type int float C right but in string you can only take data type character because string is array of characters right or you can say it is a character array in other words you can also say string is a character array the only difference is what string you can say string is a character array which is ending with a null character whatever I'm saying I'm just going to you know justify this thing so this is I guess clear Declaration of a string right so if I declare a string like care and string name I'm taking generally we take like name and I'm taking size what 10 this is what declaration of a string and you know name of the string is name right name I'm taking only and the size is 10 right so now here see string will always be ended with a null character right if how memory would be allocated to this 10 bytes should be allocated 10 bytes why because character is going to take only one by suppose address is 2000 so Next Bite would be 2001 then 2 then 3 then four and 2009 something like this right so here the name of this is what name I mean the variable the string name I'm taking just name so name and name is containing What Base address of the string that is 2,000 we know array is what array is considered as a internal pointer because it is containing array the name of the array variable is containing Base address of the array or you can say the address of the first element of the array and string is also an array it is array of characters right so obviously the name of this string is also going to contain Base address of the string B Base address of this character array or of the string you can say Base address is 2,000 so here in the name we have 2,000 so it is you can say internal pointer to this string right and index would be same 0 to size minus one 0 to n see now the point the main point is what in this string or in this character array we can only store how many characters nine characters because string would always be ended with a null character so in at the last we always store null character so where you can store Nine characters right or if C so I guess declaration is clear let me store some value now how to initialize this string multiple ways are there one way is while declaring here only we can write what string as we have discussed in previous videos also that starting videos of C programming how we write string something like this in double quotes if I write in double quotes Jenny so this is considered as string if I write Jenny Jenny's lectures this is also a string if I write something like this one 2 3 4 5 in double quotes this is also string right it's not like that I'm saying it's array of characters so you can only uh store A B C D and up to Zed no you can also store a white space uh these numbers because if you write this one 2 3 4 5 in this that is considered as string if you write one in single code that is considered as character if you write two like this this is considered as character if you write space like this is space in single code that that is considered as character so please don't get confused like characters are only a BC D till Z right okay now see and how this data is to be stored here SK values would be stored I guess that you know right the character system that also we have discussed in previous videos you can check out the playlist of C programming and you can check out the previous videos so SK values would be stored so suppose I'm I am storing here something like this J that's it right I'm initializing the string here this is one way of initial initializing a string initialization of a string using string literal we call as string literal Right double quotes J so how it would be stored in this memory j e double n y and at last string would be ended with a null character SK value of null character is zero right so that is uh the difference between string and character array string is is a character array you can you know say it's a character array that is always ended with a null character and why it is ended with null that also we'll discuss the reason also we'll discuss right one by one we'll discuss everything about string uh so now by default compiler will put null at last and here some garbage values right and if I write second way of initializing string is what one way is this second way is you can also write something like this I hope you can see this care name and I'm taking suppose 10 here so how you can initialize j e in characters form J is individual character all are individual characters I'm providing list of characters but here at last explicitly you have to provide SL sorry null character right that is another way of initializing string that is also fine this is how this is what uh that is also stored something like this J and Y and at last you have provided null character that is also fine and remaining would be garbage value right so that is also correct that is also correct but you initialize if you initialize something like this see I'm not providing the size here that is also correct why because you are providing the values this is the string those these values you want in this string in this character array so automatically compiler will uh compiler will do what it will U I'm not getting the exact word y sorry compiler will automatically decide know find out the size and according to that it will store right so how the this is going to be stored the size would be now in this case size would be 1 2 3 4 5 6 like this j e n y and at last null so only what uh six bites to be allocated right no Wast no wastage of space here also you can skip the size because it is what string you are giving right Jenny it is in double quot so that is why it is what a string so same it would be stored like J Jenny and automatically compiler will add what uh null character at last right so by default size would be 1 2 3 4 5 and six so the number of characters plus one that you need to take care size would be that thing number of characters plus one one for null character right now another way of initializing this a string is what and see this is also a string if I write something like this Jenny and with space and then katri this is also string space is also allowed symbols are also like plus minus divide these symbols are also allowed within this string that is also fine I hope you got my point what a string is Right special symbols are also a lot whatever you will write in this double quotes that is considered as string you can write something like this right or you know like welcome to my world that is also string in double quotes that is also fine right so now uh next is see this initialization is what it's I guess similar to one dimensional array right so you can also say string is One D one dimensional AR one dimensional character array right where each you know that element is either a character constant or a string constant right but here the data type must be care and one more thing in C string is not considered as a data type like int float and Care these are data types in C array is also Drive data type and see we also discuss some more data types right structure and Union these are also data types user defined data types right but string is not a data type in C separate data type in C but yeah we can represent string as a character array in C right so here format specifier for string is percentage s right like in for integer percentage D for Lo percentage f for character percentage C for uh string it's percentage s right and this is very important this also some properties of this also we'll discuss one by one right now another way of initializing string is what like I can also write care name and I'm not supposed giving any size here and I'm initializing it something like this V space space is a character so I'm providing list of characters so that is also in single code that is space here V rock that is also perfect so here the size of the string would be 1 2 3 4 5 6 7 + 1 that is 8 8 how suppose I'm uh know eight like this so index would be 0 to 7 8 bytes should be allocated and here we store V then space Rock and null I guess you got it and this address address would be stored in this uh this name I mean the string name so string name is considered as a pointer pointer to the first character of the string right so we can access the the string using this pointer also and next way is if you declare here so you must declare size what eight if you declare five it is not allowed because size is only five but we are providing values more than five so that is not allowed size would be number of characters plus one right now 10 is fine right remaining would be any garbage value another way of initializing string is see if you want to initialize like this scare name and I'm providing sizes 10 and in next line I want to write name 10 is equal to j e n y j this is not allowed we cannot separate this out Declaration and initialization that would be in same line so this would give an error this is not allowed in see right uh next is if you want to do something like this like name 10 and this is what Jenny and I'm writing sorry care care and uh suppose I'm writing S1 same size is 10 and I want to initialize this S1 equal to name because this is also string this is also string I want to copy the whatever in this string that is Jenny into S1 I want to write this thing so that is also not allowed see here S1 is what it's like array name so we cannot put any array name to the left side of this equal to operate have to read a string or you can have to initialize a string at run time so here in this case we are having what we use in array using scanf like for Loop and scanf use atun time initialization but here we use scanf also we can also use gets function we can also use get character two to three types of function we can use so that we'll discuss in next video because we have some drawbacks of scanner function that's why we use get as function also we have some drawbacks of get as function so that everything we'll discuss in next video with the proper example and that example also I'll show you practically on my laptop right so now some questions on string for you is I guess you got the basics of string only right I mean what is a string and some declaration and initialization like uh compile time initialization of string and some points important points about string I hope you got everything right so now you have to tell me in comment box like these are valid or not this initialization of string and if there's any error you can tell me what is the error or here you have to tell me the size because I'm not giving any size what size will be you know determined by the compiler automatically in this case and in this case right so this is assignment for you so now and the next video will discuss next part of our string like how to read a string how to print a string everything about string with some examples and I'll see you in the next video till then byebye take care
