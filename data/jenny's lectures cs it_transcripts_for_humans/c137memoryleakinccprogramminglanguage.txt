With timestamps:

00:00 - so in this video we'll discuss an
00:01 - important concept in c that is memory
00:03 - leak in c right this is interval
00:07 - question generally it's being asked in
00:08 - many interviews like what is memory leak
00:10 - in c and c plus plus also we have this
00:13 - this this problem in c and c plus plus
00:15 - not in java or c sharp right and so what
00:17 - does this problem
00:19 - why we use
00:20 - why we have this problem in c and c plus
00:22 - plus how to remove this problem right
00:25 - what exactly happens what exactly memory
00:27 - leak is and how this happens i'll show
00:29 - you practically with the help of my
00:30 - laptop like what is memory leak we will
00:32 - see a program also right so all the
00:34 - things about this memory leak this thing
00:36 - will discuss in this video right so this
00:39 - is also an important video for you guys
00:41 - because generally they ask this type of
00:43 - question in interviews
00:44 - right so you should have idea about this
00:46 - thing like what is memory
00:48 - but before they just want to tell you
00:50 - one thing see an academy is offering you
00:52 - a great offer
00:53 - unlock 20
00:55 - in which if you use my code jkl10 on any
00:58 - of your
00:59 - plus subscription you will get 20 off
01:03 - before you will you you are getting 10
01:05 - percent off now you will get 20 off but
01:08 - the software is valid between 14th march
01:11 - to 16th march
01:13 - now on academy is also going to start
01:16 - new batches for gate and you know for
01:18 - gay 2023 and 2024 aspirants in this
01:22 - batch they are going to cover all the
01:23 - subjects of csit and in this course you
01:26 - will get preparation strategy tips and
01:28 - tricks practice questions numericals
01:30 - along with a detailed explanation of all
01:32 - the concepts and your doubts separate
01:34 - doubt clearing session would also be
01:36 - conducted so you can get all your doubts
01:38 - cleared on those doubt clearing sessions
01:42 - so here if you use my code jkl10 on this
01:44 - this would be paid subscription but you
01:45 - can use my code jkl10 and you will get
01:47 - now 20 off if you purchase it between 14
01:50 - march to 16 march plus an academy is
01:53 - also conducting a scholarship test all
01:55 - india scholarship test for all the gate
01:57 - 2023 and 2024 aspirants and the date of
02:01 - this test is 20 march
02:03 - it is a live test and you can take this
02:05 - test for free so you will also get
02:09 - all india live ranking
02:11 - and slaves for this test is general
02:14 - aptitude and engineering mathematics you
02:16 - will get a chance to compete with
02:17 - thousands of learners from all over
02:19 - india and you stand a chance to win up
02:21 - to 100
02:22 - scholarship here
02:24 - so all the relevant links and detail
02:25 - i'll put in the description box of this
02:27 - video you can go and check out now let's
02:29 - see what is memory leak in c
02:31 - see it's a problem in c and c plus which
02:34 - occurs
02:35 - due to improper use of your dynamic
02:37 - memory or you can say due to improper
02:39 - use of heap section
02:41 - right
02:42 - see as we know when we run a program
02:45 - then generally
02:47 - for our application the memory layout is
02:49 - what four segments one is for code or
02:51 - you can say for text
02:53 - next segment is what in this memory
02:55 - section we can you can know that global
02:58 - and
02:59 - this is for global and static variable
03:00 - global variables means outside of any
03:03 - function you when you declare any
03:04 - variable or function
03:06 - those would be you know assign the
03:08 - memory from this section one section is
03:10 - stack
03:11 - and one is
03:12 - heap
03:14 - right so whenever you dynamically
03:15 - allocate memory that would be located
03:16 - from heap section right and static
03:18 - memory location is from stack section
03:20 - right
03:21 - some instructions are coders
03:23 - having some space in a space in this
03:26 - section and in stack we have no local
03:28 - variables and functions for those have
03:30 - space in stack memory and from
03:33 - so see this these portions stack global
03:36 - this section and this section are fixed
03:39 - some memory would be allocated while
03:40 - your application would be running like 2
03:43 - mb 4 stack something like this right and
03:45 - this would be fixed but heap section
03:47 - this section is not fixed heap can grow
03:50 - according to your needs
03:52 - right
03:54 - if your system is having memory then
03:56 - heat can grow it can take memory from
03:58 - the system memory it's not like that for
04:00 - your application for your program the
04:02 - heap section is also fixed and
04:04 - dynamically you can allocate memory from
04:06 - this section and this memory is also
04:07 - fixed no
04:09 - this heap section can grow according to
04:10 - your needs but stack section whenever
04:13 - for your application for your program if
04:15 - 2mb stack memory has been allocated then
04:18 - this would be fixed for your application
04:21 - when you run your application the stack
04:23 - memory would be 2mb only it cannot be
04:25 - you can say increased or something like
04:28 - this
04:28 - right
04:30 - now see
04:32 - let's see a program first see it's a
04:34 - simple example i'm taking to explain
04:36 - this memory leak suppose i'm i'm having
04:38 - a function sum i'm taking two variable
04:41 - in a b then a plus b and some i'm just
04:43 - printing and in main i'm calling this
04:45 - function sum but
04:47 - while loop i'm taking a variable choice
04:50 - while ch i'm calling sum now i'm asking
04:53 - printf 1 to continue continuing 0 or 1
04:55 - you can enter 0 1 0 means don't want to
04:57 - continue 1 means continue so in choice
05:00 - variable i am entering suppose i am
05:01 - entering 1 so 1 means again while is
05:05 - true again function would be called some
05:07 - function would be called and again it
05:09 - will ask so this type of program i have
05:11 - a simple program right so this function
05:14 - this is what there is no dynamic memory
05:15 - allocation so
05:17 - one main frame first of all mainframe so
05:20 - from stack here one stack frame is for
05:23 - main
05:25 - from this memory from stack right in
05:27 - main i have ch here i have one right so
05:30 - now i'm calling sum so this main
05:34 - progress this execution domain would be
05:35 - posed and i'm calling sum so again
05:38 - we have a frame stack frame for sum here
05:41 - i have
05:42 - a b and some three variable a b and sum
05:45 - here we have 10 11 and zero so some a
05:47 - plus b and just print sum and after that
05:51 - after this the control would be back to
05:53 - here means
05:56 - finish it it has finished its execution
05:58 - so so now from the stack control is
06:01 - again to main and this would be released
06:04 - automatically these variables these
06:06 - variables are now out of scope
06:08 - so the memory would be released
06:10 - right now again continue if i press 1
06:13 - again i'm calling i'm calling sum again
06:17 - frame for sum
06:18 - so again a b and sum these variables
06:21 - would be allocated from the stack frame
06:23 - again some would be created and once
06:25 - control is out of this
06:27 - some function
06:29 - these memory this memory would be freed
06:31 - and we are back to main
06:33 - so this is how we are using this static
06:35 - memory allocation or this memory foam
06:37 - step but suppose here
06:39 - i am i am taking i am taking rather than
06:42 - static memory allocation here i am
06:43 - taking what dynamic memory allocation
06:46 - something like this end ptr is equal to
06:49 - int asterisk
06:51 - malloc
06:53 - and 2 into
06:56 - size of
06:58 - int
06:59 - right
07:04 - this kind of thing i am taking so we
07:05 - cannot do sum is equal to a plus b
07:07 - obviously we have to use pointer and
07:09 - something like like sum is equal to s
07:11 - trig
07:12 - ptr
07:13 - plus 0
07:15 - plus s trick
07:17 - ptr plus 1 i am accessing the value
07:19 - something like this and just print here
07:22 - sum
07:23 - right and after this obviously you will
07:26 - enter the values and you can enter the
07:27 - value i guess you can enter the values
07:29 - we have discussed many type of programs
07:30 - you know this type of program before
07:32 - also in malok and calum so
07:35 - here what what happens now
07:37 - now the memory would be allocated from
07:40 - main function obviously this is
07:42 - stack frame for main the memory would be
07:44 - located from this this one from main
07:47 - from the stack section because this is
07:48 - what
07:51 - static memory location right ch is equal
07:53 - to one while one we are calling sum now
07:55 - in sum we have dynamic memory allocation
07:57 - so now from heap section memory would be
08:00 - allocated from heap section
08:03 - how much how much 2 into size of it
08:05 - means
08:08 - 8 bytes
08:11 - and once you will enter some data those
08:13 - data would be stored here suppose i have
08:15 - entered one and two so one plus two
08:17 - three and some three would be printed
08:20 - right
08:21 - three would be printed suppose some i am
08:23 - taking here and
08:25 - sum
08:26 - so
08:27 - one
08:29 - for sum also we have
08:32 - sum is a function stack frame and here
08:34 - we have a variable sum
08:36 - this will allocate this will take memory
08:37 - from the stack this is static memory
08:39 - allocation but this is dynamic memory
08:41 - allocation right we are printing some
08:43 - and we are not going to free this
08:44 - pointer
08:45 - suppose
08:47 - end of this thing now
08:49 - back to here right but okay if you are
08:53 - going to back to here then this memory
08:55 - would be erased i mean this would be
08:56 - freed
08:58 - but this is still there one pointer is
09:00 - pointing to this ptr
09:02 - suppose memory address is thousand base
09:04 - address so here we have thousand
09:06 - again want to continue again i am
09:08 - printing one like yes so again it is
09:11 - going to call some and at this time
09:14 - again
09:15 - memory would be allocated for two
09:16 - integer dynamically
09:18 - again if you will call again memory
09:20 - would be allocated from heap section
09:22 - photo integer but this previous memory
09:25 - is also in the use
09:27 - we haven't de-allocated this memory
09:30 - so this is what now this value and this
09:32 - memory is something like garbage for us
09:36 - we have allocated this memory but we
09:38 - forgot to free
09:40 - right we haven't free this
09:43 - before
09:44 - again
09:45 - calling mallow
09:47 - so this type of thing again you will
09:49 - call malloc again for two integer memory
09:51 - would be located so this is what
09:54 - you can say its type of garbage so this
09:56 - is memory leak
09:59 - you are using this memory from the heap
10:01 - section
10:03 - improperly you are using you are
10:05 - allocating memory but
10:06 - once you have used once your task is
10:08 - done but you are not
10:10 - freeing this memory you forgot to free
10:12 - that memory
10:14 - and that memory is still
10:16 - in the count of your program use
10:19 - right and this memory cannot be reused
10:22 - now so like this
10:24 - if here i am just allocating memory for
10:26 - two integer suppose for one lakh and
10:27 - d000 integers i am allocating memory
10:30 - so again again again you are just
10:32 - allocating memory you are not
10:34 - deallocating this memory you are not
10:35 - releasing this memory space so
10:38 - this is what at some time obviously
10:40 - memory would be exhausted at some point
10:42 - of time and it may your application will
10:44 - maybe fail or your system may shut down
10:46 - these kind of things may happen and
10:48 - memory is see memory is what crucial
10:50 - resource so in this case you are just
10:52 - wasting the memory
10:55 - right so this situation is memory leak
10:58 - improper use of heat is what memory leak
11:01 - you are allocating memory dynamically
11:03 - but you are not releasing that memory
11:05 - that is memory leak
11:07 - will show up i'll show you a program
11:09 - also
11:10 - so this memory is what now for garbage
11:12 - for us
11:14 - it's like a garbage
11:16 - but see in java and c sharp there is
11:19 - automatic garbage collector so
11:22 - automatically this memory would be freed
11:24 - automatically automatically that garbage
11:26 - collector will identify will detect that
11:28 - yeah this memory is
11:30 - garbage so let's just free this memory
11:32 - but in c and c plus plus there is no
11:34 - such funda of automatic rbs collection
11:37 - so you have to manually free that memory
11:40 - and how you can free using free function
11:43 - so here
11:44 - after this after this better before
11:47 - exiting
11:49 - this one better to use free ptr this
11:52 - line
11:55 - now once you will back here this memory
11:57 - would be freed means now this memory can
12:00 - be reused
12:01 - so again if you use mallow maybe
12:04 - and again also the same block would be
12:06 - allocated to you
12:08 - because now you can reuse this memory
12:10 - you have freed this ptr
12:12 - right
12:13 - so now there is no memory leak there is
12:15 - no wastage of memory right i'll show you
12:17 - practically also you know with the help
12:19 - of a program of memory like i hope the
12:21 - theory of this memory leak is clear to
12:23 - you and why memory leak happens in your
12:24 - program
12:25 - right
12:26 - and see this memory leak this will
12:29 - reduce your performance of your system
12:32 - by reducing the memory
12:34 - so let's create a new file
12:41 - memory leak dot c
12:44 - right
12:45 - and
12:56 - we should include stdlib dot h because
13:00 - those functions are declared in
13:02 - this one right and
13:05 - simple program i am taking
13:07 - into main suppose i am taking here in
13:10 - a variable choice
13:12 - is equal to 1
13:14 - right and we have a
13:16 - variable ptr also
13:18 - right
13:20 - and what
13:22 - a while loop while choice
13:25 - is
13:27 - less than
13:28 - less than suppose
13:30 - what
13:31 - 50.
13:36 - so i am just
13:39 - doing what printf and
13:44 - memory leak demo
13:48 - and just printing this thing
13:51 - and after that after that obviously
13:53 - memory leak means dynamic memory
13:54 - allocation we have to use so here i am
13:56 - using
13:58 - ptr is equal to
13:59 - dynamic memory allocation
14:02 - int asterisk and i'm using malloc you
14:05 - can use callow also right
14:08 - for how many integer
14:09 - let's see for
14:14 - 40 000 in teaser
14:16 - into
14:17 - size of
14:20 - in why i'm taking like you know 40 000
14:25 - because i'm going to show you actually
14:27 - the memory consumption that's why i'm
14:28 - taking this a long number a large number
14:32 - so 40 000 integer i am going to allocate
14:34 - memory dynamically and
14:37 - then
14:38 - just ask printf
14:41 - continue if you want to continue or you
14:44 - can like
14:45 - press
14:47 - one
14:47 - for
14:50 - for continue
14:52 - right
14:57 - and in scan a function
15:00 - just use this and we have variable ch
15:03 - address of ch
15:06 - and i am not going to free this memory
15:09 - right
15:11 - let's just save it and
15:14 - i hope everything will work fine
15:16 - and i'll show you in the task manager
15:19 - right how much memory this program is
15:21 - consuming
15:23 - right
15:24 - so
15:25 - let me just run this better to run this
15:27 - with the help of this like i'm uh
15:29 - doing what
15:30 - gcc
15:34 - memory leak dot c
15:37 - manually i'm writing this thing and then
15:40 - executable file
15:42 - has been made so we just write down what
15:46 - slash a dot e x e
15:52 - right
15:54 - so it is bring see memory leak demo now
15:56 - it is asking press one to continue so
15:58 - let me just first open the
16:02 - task manager
16:04 - so in this task manager in processes we
16:06 - have a process of this c visual studio
16:09 - code here we have memory leak
16:12 - memory leak
16:14 - and we have
16:17 - okay sorry we have
16:21 - this thing
16:22 - a dot out
16:24 - right a dot exe sorry a dot exe
16:28 - this this i'm running a dot x is this i
16:31 - am running so let me just show you
16:34 - see the memory consumption memory
16:36 - consumption for this is 0.4 mb 0.4 mb
16:40 - right let me just run this program and i
16:42 - will show you if it increases or not see
16:48 - it's 0.4 mb it is for a dot exe file
16:52 - right
16:52 - that is vrna
16:54 - so i'm going to continue
16:56 - one
16:57 - enter
16:59 - again
17:06 - see
17:06 - 0.5 mb now
17:08 - it has increased
17:11 - 0.6 mb
17:14 - 0.7 mb
17:16 - it is increasing the memory consumption
17:18 - for this 0.8 mb right
17:20 - because
17:22 - in every loop iteration
17:24 - 40 000 for 40 000 integer dynamically we
17:27 - are allocating memory and we are not
17:28 - freeing that memory so we are just
17:30 - consuming that memory
17:32 - now see at this point of time now i have
17:34 - opened this again i have used free ptr
17:37 - in every iteration after every iteration
17:39 - i am using free ptr i am going to
17:41 - release the memory right so now let me
17:44 - just
17:44 - show you i have just run this program
17:47 - and let me just see the memory for a dot
17:49 - exe
17:50 - in this
17:51 - 0.4 mb right and i'm going to continue
17:54 - press 1 for continue i have just run
17:56 - this program right
17:58 - using the same method and
18:00 - one continue one continue one continue i
18:03 - am just continuing but
18:05 - memory is still 0.4 mb
18:08 - i am continuing i am just pressing one
18:10 - and continue so for after every
18:12 - iteration memory four dynamically memory
18:15 - for forty thousand student forty
18:16 - thousand in teaser
18:18 - has been allocated but after every
18:19 - iteration we are we are freeing that
18:20 - memory so obviously
18:23 - we are allocating after that we are
18:24 - freeing we are allocating our after that
18:26 - we are free so memory usage will be same
18:28 - 0.4 mb only it is not going to increase
18:31 - see let just continue again 0.4 mb 0.4
18:35 - mb
18:36 - but before
18:38 - when we were pressing 1 and continue
18:40 - after continuation after pressing i
18:42 - guess four seven or eight time one
18:45 - memory would be 0.5 mb then 0.6 0.7 0.8
18:49 - this type of thing happens because we
18:50 - were not using free ptr we were not
18:52 - freeing the memory right we were just
18:54 - allocating the memory and we are not
18:56 - releasing the memory so that is what
18:59 - memory leak basically i hope now the
19:01 - practically also i have shown you so you
19:03 - can do this thing you can open your task
19:05 - manager you can run this program and you
19:06 - can see memory is increasing or not so
19:09 - that's it for memory leak video now
19:11 - so i guess this concept of memory leak
19:13 - is clear to you if you are left with any
19:14 - other important concept in c you can
19:16 - tell me in comment box i will explain
19:17 - that thing also before moving to the
19:20 - new subject so now so the next video
19:21 - tells me bye bye take care

Cleaned transcript:

so in this video we'll discuss an important concept in c that is memory leak in c right this is interval question generally it's being asked in many interviews like what is memory leak in c and c plus plus also we have this this this problem in c and c plus plus not in java or c sharp right and so what does this problem why we use why we have this problem in c and c plus plus how to remove this problem right what exactly happens what exactly memory leak is and how this happens i'll show you practically with the help of my laptop like what is memory leak we will see a program also right so all the things about this memory leak this thing will discuss in this video right so this is also an important video for you guys because generally they ask this type of question in interviews right so you should have idea about this thing like what is memory but before they just want to tell you one thing see an academy is offering you a great offer unlock 20 in which if you use my code jkl10 on any of your plus subscription you will get 20 off before you will you you are getting 10 percent off now you will get 20 off but the software is valid between 14th march to 16th march now on academy is also going to start new batches for gate and you know for gay 2023 and 2024 aspirants in this batch they are going to cover all the subjects of csit and in this course you will get preparation strategy tips and tricks practice questions numericals along with a detailed explanation of all the concepts and your doubts separate doubt clearing session would also be conducted so you can get all your doubts cleared on those doubt clearing sessions so here if you use my code jkl10 on this this would be paid subscription but you can use my code jkl10 and you will get now 20 off if you purchase it between 14 march to 16 march plus an academy is also conducting a scholarship test all india scholarship test for all the gate 2023 and 2024 aspirants and the date of this test is 20 march it is a live test and you can take this test for free so you will also get all india live ranking and slaves for this test is general aptitude and engineering mathematics you will get a chance to compete with thousands of learners from all over india and you stand a chance to win up to 100 scholarship here so all the relevant links and detail i'll put in the description box of this video you can go and check out now let's see what is memory leak in c see it's a problem in c and c plus which occurs due to improper use of your dynamic memory or you can say due to improper use of heap section right see as we know when we run a program then generally for our application the memory layout is what four segments one is for code or you can say for text next segment is what in this memory section we can you can know that global and this is for global and static variable global variables means outside of any function you when you declare any variable or function those would be you know assign the memory from this section one section is stack and one is heap right so whenever you dynamically allocate memory that would be located from heap section right and static memory location is from stack section right some instructions are coders having some space in a space in this section and in stack we have no local variables and functions for those have space in stack memory and from so see this these portions stack global this section and this section are fixed some memory would be allocated while your application would be running like 2 mb 4 stack something like this right and this would be fixed but heap section this section is not fixed heap can grow according to your needs right if your system is having memory then heat can grow it can take memory from the system memory it's not like that for your application for your program the heap section is also fixed and dynamically you can allocate memory from this section and this memory is also fixed no this heap section can grow according to your needs but stack section whenever for your application for your program if 2mb stack memory has been allocated then this would be fixed for your application when you run your application the stack memory would be 2mb only it cannot be you can say increased or something like this right now see let's see a program first see it's a simple example i'm taking to explain this memory leak suppose i'm i'm having a function sum i'm taking two variable in a b then a plus b and some i'm just printing and in main i'm calling this function sum but while loop i'm taking a variable choice while ch i'm calling sum now i'm asking printf 1 to continue continuing 0 or 1 you can enter 0 1 0 means don't want to continue 1 means continue so in choice variable i am entering suppose i am entering 1 so 1 means again while is true again function would be called some function would be called and again it will ask so this type of program i have a simple program right so this function this is what there is no dynamic memory allocation so one main frame first of all mainframe so from stack here one stack frame is for main from this memory from stack right in main i have ch here i have one right so now i'm calling sum so this main progress this execution domain would be posed and i'm calling sum so again we have a frame stack frame for sum here i have a b and some three variable a b and sum here we have 10 11 and zero so some a plus b and just print sum and after that after this the control would be back to here means finish it it has finished its execution so so now from the stack control is again to main and this would be released automatically these variables these variables are now out of scope so the memory would be released right now again continue if i press 1 again i'm calling i'm calling sum again frame for sum so again a b and sum these variables would be allocated from the stack frame again some would be created and once control is out of this some function these memory this memory would be freed and we are back to main so this is how we are using this static memory allocation or this memory foam step but suppose here i am i am taking i am taking rather than static memory allocation here i am taking what dynamic memory allocation something like this end ptr is equal to int asterisk malloc and 2 into size of int right this kind of thing i am taking so we cannot do sum is equal to a plus b obviously we have to use pointer and something like like sum is equal to s trig ptr plus 0 plus s trick ptr plus 1 i am accessing the value something like this and just print here sum right and after this obviously you will enter the values and you can enter the value i guess you can enter the values we have discussed many type of programs you know this type of program before also in malok and calum so here what what happens now now the memory would be allocated from main function obviously this is stack frame for main the memory would be located from this this one from main from the stack section because this is what static memory location right ch is equal to one while one we are calling sum now in sum we have dynamic memory allocation so now from heap section memory would be allocated from heap section how much how much 2 into size of it means 8 bytes and once you will enter some data those data would be stored here suppose i have entered one and two so one plus two three and some three would be printed right three would be printed suppose some i am taking here and sum so one for sum also we have sum is a function stack frame and here we have a variable sum this will allocate this will take memory from the stack this is static memory allocation but this is dynamic memory allocation right we are printing some and we are not going to free this pointer suppose end of this thing now back to here right but okay if you are going to back to here then this memory would be erased i mean this would be freed but this is still there one pointer is pointing to this ptr suppose memory address is thousand base address so here we have thousand again want to continue again i am printing one like yes so again it is going to call some and at this time again memory would be allocated for two integer dynamically again if you will call again memory would be allocated from heap section photo integer but this previous memory is also in the use we haven't deallocated this memory so this is what now this value and this memory is something like garbage for us we have allocated this memory but we forgot to free right we haven't free this before again calling mallow so this type of thing again you will call malloc again for two integer memory would be located so this is what you can say its type of garbage so this is memory leak you are using this memory from the heap section improperly you are using you are allocating memory but once you have used once your task is done but you are not freeing this memory you forgot to free that memory and that memory is still in the count of your program use right and this memory cannot be reused now so like this if here i am just allocating memory for two integer suppose for one lakh and d000 integers i am allocating memory so again again again you are just allocating memory you are not deallocating this memory you are not releasing this memory space so this is what at some time obviously memory would be exhausted at some point of time and it may your application will maybe fail or your system may shut down these kind of things may happen and memory is see memory is what crucial resource so in this case you are just wasting the memory right so this situation is memory leak improper use of heat is what memory leak you are allocating memory dynamically but you are not releasing that memory that is memory leak will show up i'll show you a program also so this memory is what now for garbage for us it's like a garbage but see in java and c sharp there is automatic garbage collector so automatically this memory would be freed automatically automatically that garbage collector will identify will detect that yeah this memory is garbage so let's just free this memory but in c and c plus plus there is no such funda of automatic rbs collection so you have to manually free that memory and how you can free using free function so here after this after this better before exiting this one better to use free ptr this line now once you will back here this memory would be freed means now this memory can be reused so again if you use mallow maybe and again also the same block would be allocated to you because now you can reuse this memory you have freed this ptr right so now there is no memory leak there is no wastage of memory right i'll show you practically also you know with the help of a program of memory like i hope the theory of this memory leak is clear to you and why memory leak happens in your program right and see this memory leak this will reduce your performance of your system by reducing the memory so let's create a new file memory leak dot c right and we should include stdlib dot h because those functions are declared in this one right and simple program i am taking into main suppose i am taking here in a variable choice is equal to 1 right and we have a variable ptr also right and what a while loop while choice is less than less than suppose what 50. so i am just doing what printf and memory leak demo and just printing this thing and after that after that obviously memory leak means dynamic memory allocation we have to use so here i am using ptr is equal to dynamic memory allocation int asterisk and i'm using malloc you can use callow also right for how many integer let's see for 40 000 in teaser into size of in why i'm taking like you know 40 000 because i'm going to show you actually the memory consumption that's why i'm taking this a long number a large number so 40 000 integer i am going to allocate memory dynamically and then just ask printf continue if you want to continue or you can like press one for for continue right and in scan a function just use this and we have variable ch address of ch and i am not going to free this memory right let's just save it and i hope everything will work fine and i'll show you in the task manager right how much memory this program is consuming right so let me just run this better to run this with the help of this like i'm uh doing what gcc memory leak dot c manually i'm writing this thing and then executable file has been made so we just write down what slash a dot e x e right so it is bring see memory leak demo now it is asking press one to continue so let me just first open the task manager so in this task manager in processes we have a process of this c visual studio code here we have memory leak memory leak and we have okay sorry we have this thing a dot out right a dot exe sorry a dot exe this this i'm running a dot x is this i am running so let me just show you see the memory consumption memory consumption for this is 0.4 mb 0.4 mb right let me just run this program and i will show you if it increases or not see it's 0.4 mb it is for a dot exe file right that is vrna so i'm going to continue one enter again see 0.5 mb now it has increased 0.6 mb 0.7 mb it is increasing the memory consumption for this 0.8 mb right because in every loop iteration 40 000 for 40 000 integer dynamically we are allocating memory and we are not freeing that memory so we are just consuming that memory now see at this point of time now i have opened this again i have used free ptr in every iteration after every iteration i am using free ptr i am going to release the memory right so now let me just show you i have just run this program and let me just see the memory for a dot exe in this 0.4 mb right and i'm going to continue press 1 for continue i have just run this program right using the same method and one continue one continue one continue i am just continuing but memory is still 0.4 mb i am continuing i am just pressing one and continue so for after every iteration memory four dynamically memory for forty thousand student forty thousand in teaser has been allocated but after every iteration we are we are freeing that memory so obviously we are allocating after that we are freeing we are allocating our after that we are free so memory usage will be same 0.4 mb only it is not going to increase see let just continue again 0.4 mb 0.4 mb but before when we were pressing 1 and continue after continuation after pressing i guess four seven or eight time one memory would be 0.5 mb then 0.6 0.7 0.8 this type of thing happens because we were not using free ptr we were not freeing the memory right we were just allocating the memory and we are not releasing the memory so that is what memory leak basically i hope now the practically also i have shown you so you can do this thing you can open your task manager you can run this program and you can see memory is increasing or not so that's it for memory leak video now so i guess this concept of memory leak is clear to you if you are left with any other important concept in c you can tell me in comment box i will explain that thing also before moving to the new subject so now so the next video tells me bye bye take care
