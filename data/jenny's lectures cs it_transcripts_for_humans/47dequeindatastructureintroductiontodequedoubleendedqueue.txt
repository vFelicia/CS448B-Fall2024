With timestamps:

00:00 - in this lecture we are going to talk
00:01 - about DQ that is double ended queue
00:04 - right we will discuss what is DQ how
00:07 - this is different from the q''-word you
00:10 - can say linear to and circular queue
00:11 - fine as well as we will see some types
00:15 - you can say two types of this DQ and
00:18 - some applications of BQ right and how we
00:21 - can implement this Q in memory right see
00:24 - I have already discussed about Q and
00:27 - circular Q's fine with their operations
00:29 - plus implementation I'll provide you the
00:31 - link of that playlist in the Seibert and
00:33 - as well as in the description box you
00:35 - can check out there we are left with D Q
00:38 - that is double ended queue and priority
00:40 - queues right so in this video we'll
00:41 - discuss about a double ended queues
00:43 - sometimes it is also known as Dec fine
00:46 - now see I guess you remember what is a
00:49 - queue it is a list where you can say
00:52 - insertion would be from one end and
00:54 - deletion would be from another end right
00:56 - see this is how we are going to
00:58 - represent a queue so insertion would be
01:02 - from one end and that end is known as
01:04 - rear end of the queue and deletion would
01:07 - be from another end that is known as
01:09 - known as front of the queue you can take
01:12 - here front here rear but you you should
01:15 - follow the rules if you take here rear
01:18 - end this rear end you consider this and
01:20 - is the rear and then insertion will be
01:22 - from here and deletion will be from here
01:24 - that is the destruction in the queue now
01:27 - as the names has a straight double ended
01:30 - queue in this case how this is different
01:33 - from this cube insertion and deletion
01:37 - are allowed from both the ends right to
01:41 - make it you can say BQ what you need to
01:46 - do from here see this is what a deletion
01:51 - so here you can insert from here you can
01:54 - insert and delete from here also you can
01:58 - insert and delete right so insertion and
02:05 - deletion are allowed from both the ends
02:07 - it is known as double ended queue right
02:11 - so if you define there
02:13 - you can say it is a linear list in which
02:16 - insertion and deletion or you can say
02:18 - into and DQ operations are allowed from
02:20 - both ends
02:21 - alright so it is you can say a
02:23 - generalized version of Q so here also
02:26 - you can consider this as front this has
02:29 - rear as you visual this has front this
02:31 - has real because insertion and deletion
02:32 - are allows from both things right so now
02:35 - you can also write down some properties
02:37 - of this Q see it is having the
02:41 - properties of both strap and Q see stack
02:46 - is going to follow a leaf or property
02:48 - and Q is going to follow FIFO property
02:50 - this we know already we have already
02:52 - discussed so see it supports the
02:54 - properties of both stack and queue right
02:57 - so it can be used as both stack and
02:59 - queue sometimes you can use that it as a
03:02 - stack and queue if you are using it as a
03:04 - stack then what you need to take care in
03:06 - in this case last in first out property
03:10 - it should fall over last in first out
03:12 - property to make it has a step right it
03:15 - means something like this here from here
03:20 - only I can insert and from here only you
03:24 - can delete right this is one end of the
03:27 - queue implement insertion and deletion
03:29 - from this end only you will not touch
03:32 - this end it means this is what Stagner
03:34 - horizontally if you will represent it
03:37 - something like this
03:38 - right this is the one end from where you
03:40 - can insert and from here also you can
03:42 - delete and to use it as a cue what you
03:45 - need to take care in the queue we know
03:48 - that from it insertion can be from one
03:52 - end you can say from this and deletion
03:53 - will be from this end so you can
03:55 - implement this thing using this DQ also
03:58 - right insertion you can put some
04:00 - destruction here and you can use it as a
04:03 - queue because it is going to follow with
04:05 - the property of both stack and queue
04:07 - fine now types of take you see basically
04:12 - two types of DQ are there one is input
04:14 - restricted and second one is output
04:21 - restricted right an input restricted
04:26 - q what is the case see as the name
04:28 - suggests input restricted means you are
04:30 - going to put some restrictions on input
04:32 - on you can say insertion but you can say
04:34 - on NQ operation right so here in this
04:38 - case and this DQ insertion can be
04:41 - allowed only from one end deletion is
04:45 - allowed from both ends
04:46 - right so how we are going to represent
04:48 - this queue that input restricted queue
04:50 - see if suppose I'm taking this as a
04:53 - queue
04:54 - fine so this is front this is real so
04:58 - insertion can be from one end only
05:01 - either from this or this
05:02 - as we wish from where you are one two
05:04 - from which and you want the insertion
05:06 - suppose I want insertion from here right
05:09 - insertion can be from this end only you
05:12 - can delete from here you can delete from
05:15 - here all right we are going to put in
05:18 - strong restriction only on the input
05:21 - operation this is what input restricted
05:23 - queue now next is output restricted
05:27 - queue it means as the name suggests you
05:28 - are going to put restrictions on output
05:31 - or you can say that delete operation it
05:33 - means a deletion can be possible from
05:36 - one end insertion is possible from both
05:39 - ends
05:39 - right so suppose this is a queue this is
05:43 - front this is rear and here also you can
05:47 - take either end at which you can perform
05:50 - deletion but you should take care of
05:53 - this thing that deletion can be from
05:54 - that end right suppose I am taking
05:57 - deletion from this end so you cannot
06:00 - delete from the same you can insert from
06:03 - this end you can insert from this end
06:05 - right so this is what output restricted
06:08 - DQ this is input restricted DQ these are
06:11 - two types of DQ you can say now next is
06:15 - what type of operations you can perform
06:17 - on a DQ see basically these four types
06:21 - of operations you can perform you can
06:22 - insert that front delete from front
06:25 - insert atrial delete from rear right how
06:28 - we are going to implement these
06:30 - operations that thing we will discuss in
06:32 - the next video right now other than
06:34 - these operations what you can do you can
06:36 - perform what see in
06:39 - the q''-word operation we can perform
06:41 - other than insertion and deletion or you
06:43 - can see other than in 22 peek means we
06:46 - are going to get the front element so
06:49 - here you can say you can get the front
06:51 - element as well as the rear element so
06:53 - you can say get front get ring here
06:59 - fine oh you can say front and rear means
07:03 - you want to check out which value is at
07:05 - the front of the queue which value is at
07:07 - the rear of the queue and other than
07:10 - these two operations are also there that
07:11 - is is full and is empty right this
07:18 - operation is going to return true if the
07:21 - DQ is full otherwise Falls and SMPT
07:24 - means this is going to return true if
07:26 - the DQ is empty otherwise it is going to
07:28 - return false how we will implement these
07:31 - operations on a DQ that we will discuss
07:34 - in the next video with proper code so
07:36 - now next thing is memory representation
07:39 - of this DT or you can say how we are
07:41 - going to implement this DQ how we are
07:43 - which data structure you are going to
07:45 - use to implement this beacon so the
07:47 - answer is either you can use a circular
07:49 - array or you can use a doubly-linked
07:52 - list right how we will implement this
07:55 - using circular array that thing we will
07:56 - discuss in the next video what a
07:59 - circular array see we have already
08:02 - discussed the circular queue
08:04 - implementation in that case we have
08:06 - discussed that we can implement that
08:09 - circular queue using a circular arrays
08:11 - right so now in that case what is the
08:14 - case here suppose we have front and rear
08:17 - so now the situation is something like
08:20 - this here I have 3 4 & 2 and this is
08:23 - free now so front is pointing to here
08:25 - and rear is pointing to here now I want
08:27 - to perform this insert at rear insert
08:31 - adri√† here but now see suppose array
08:35 - size is 4 only right so now you cannot
08:39 - do rear plus plus means here you cannot
08:42 - insert but it should not return that q
08:45 - is full
08:46 - why so because we are using circular
08:48 - array concept something like this
08:50 - logically you can represent it something
08:52 - like
08:52 - this is a circular adding zero one two
08:56 - and three
08:57 - after this three index we will move to
09:00 - the 0th index means something like this
09:03 - and this space is free so you can insert
09:05 - here this is what a circular array
09:08 - concept so you can implement this DQ
09:11 - using circular adding or you can
09:13 - implement it using linked list also
09:15 - doubly linked list also and here in this
09:17 - case all the operations that is
09:19 - insertion and deletion should take what
09:21 - order of one time complexity right now
09:25 - we will see some applications of DQ C as
09:29 - we have discussed it has the property of
09:31 - both stack and queue right so we can use
09:33 - it as stack and queue both fine so the
09:37 - applications of stack and queue would be
09:39 - obviously the application of this DQ so
09:42 - first application is you can say it can
09:44 - be used to perform the redo and undo
09:46 - operations my second thing you can say
09:49 - it that you can also be used as a
09:51 - palindrome checker palindrome means if
09:54 - you read a string from the front and if
09:58 - you read from the and then it would be
10:00 - same from both things fine suppose you
10:02 - can take an example of this thing if you
10:08 - read from here then radar and if you
10:10 - read it from the end then also it would
10:12 - be rather so it can also be use as a
10:14 - palindrome checker now the very
10:15 - important application is what it is used
10:18 - in what multi processor scheduling see
10:20 - what is that thing it means multi
10:22 - processor means you can say how multiple
10:24 - processors are there suppose we are
10:26 - taking two processors and each processor
10:28 - is assigned some job and every or you
10:31 - can say process and every process is
10:33 - having multiple threads right so each
10:35 - processor is containing its key word you
10:38 - can say a DQ this is also maintaining
10:40 - its DQ this is also maintaining its dake
10:43 - you see these beacuse are used to
10:47 - maintain those threads which are ready
10:50 - to execute now see here when a process
10:53 - creates a new process suppose the
10:55 - process is a process this processor is
10:58 - executing a process so a process can you
11:00 - can say produce its trial process so
11:02 - that process would be inserted at the
11:04 - front of this
11:06 - DQ but suppose this processor has
11:08 - executed its all the threads right now
11:12 - this processor this processor will steal
11:16 - a thread from this processor or you can
11:19 - say the process of this processor but
11:23 - this will take a thread from the rear
11:26 - right from rear of this DQ and after
11:30 - stealing this thread it will execute the
11:33 - thread on this processor means on its
11:36 - own and it will add this thread to its
11:39 - friend and this processor will take you
11:45 - can say threads from its front so here
11:48 - you can say this we can delete from the
11:51 - rear and we can delete from the front we
11:53 - can insert from both the ends also and
11:56 - delete from both ends so here too to
11:59 - implement this thing in this
12:00 - multiprocessor scheduling algorithm DQ
12:04 - is going to be used right so this
12:06 - complete process is known as what it is
12:09 - known as known as a stream algorithm for
12:15 - job scheduling say this is just a brief
12:18 - overview of what a steal algorithm is
12:21 - there if you want me to make a video on
12:24 - this thing you can write down me in the
12:25 - comment box right see there can be many
12:28 - more applications of this DQ other than
12:30 - these three that we have discussed here
12:31 - fine but I guess this is fine for the
12:34 - introduction of DQ in next video we will
12:36 - discuss how to implement double ended
12:39 - queue using circular arrays right so I
12:42 - will see in the next video does number
12:43 - by a taking

Cleaned transcript:

in this lecture we are going to talk about DQ that is double ended queue right we will discuss what is DQ how this is different from the q''word you can say linear to and circular queue fine as well as we will see some types you can say two types of this DQ and some applications of BQ right and how we can implement this Q in memory right see I have already discussed about Q and circular Q's fine with their operations plus implementation I'll provide you the link of that playlist in the Seibert and as well as in the description box you can check out there we are left with D Q that is double ended queue and priority queues right so in this video we'll discuss about a double ended queues sometimes it is also known as Dec fine now see I guess you remember what is a queue it is a list where you can say insertion would be from one end and deletion would be from another end right see this is how we are going to represent a queue so insertion would be from one end and that end is known as rear end of the queue and deletion would be from another end that is known as known as front of the queue you can take here front here rear but you you should follow the rules if you take here rear end this rear end you consider this and is the rear and then insertion will be from here and deletion will be from here that is the destruction in the queue now as the names has a straight double ended queue in this case how this is different from this cube insertion and deletion are allowed from both the ends right to make it you can say BQ what you need to do from here see this is what a deletion so here you can insert from here you can insert and delete from here also you can insert and delete right so insertion and deletion are allowed from both the ends it is known as double ended queue right so if you define there you can say it is a linear list in which insertion and deletion or you can say into and DQ operations are allowed from both ends alright so it is you can say a generalized version of Q so here also you can consider this as front this has rear as you visual this has front this has real because insertion and deletion are allows from both things right so now you can also write down some properties of this Q see it is having the properties of both strap and Q see stack is going to follow a leaf or property and Q is going to follow FIFO property this we know already we have already discussed so see it supports the properties of both stack and queue right so it can be used as both stack and queue sometimes you can use that it as a stack and queue if you are using it as a stack then what you need to take care in in this case last in first out property it should fall over last in first out property to make it has a step right it means something like this here from here only I can insert and from here only you can delete right this is one end of the queue implement insertion and deletion from this end only you will not touch this end it means this is what Stagner horizontally if you will represent it something like this right this is the one end from where you can insert and from here also you can delete and to use it as a cue what you need to take care in the queue we know that from it insertion can be from one end you can say from this and deletion will be from this end so you can implement this thing using this DQ also right insertion you can put some destruction here and you can use it as a queue because it is going to follow with the property of both stack and queue fine now types of take you see basically two types of DQ are there one is input restricted and second one is output restricted right an input restricted q what is the case see as the name suggests input restricted means you are going to put some restrictions on input on you can say insertion but you can say on NQ operation right so here in this case and this DQ insertion can be allowed only from one end deletion is allowed from both ends right so how we are going to represent this queue that input restricted queue see if suppose I'm taking this as a queue fine so this is front this is real so insertion can be from one end only either from this or this as we wish from where you are one two from which and you want the insertion suppose I want insertion from here right insertion can be from this end only you can delete from here you can delete from here all right we are going to put in strong restriction only on the input operation this is what input restricted queue now next is output restricted queue it means as the name suggests you are going to put restrictions on output or you can say that delete operation it means a deletion can be possible from one end insertion is possible from both ends right so suppose this is a queue this is front this is rear and here also you can take either end at which you can perform deletion but you should take care of this thing that deletion can be from that end right suppose I am taking deletion from this end so you cannot delete from the same you can insert from this end you can insert from this end right so this is what output restricted DQ this is input restricted DQ these are two types of DQ you can say now next is what type of operations you can perform on a DQ see basically these four types of operations you can perform you can insert that front delete from front insert atrial delete from rear right how we are going to implement these operations that thing we will discuss in the next video right now other than these operations what you can do you can perform what see in the q''word operation we can perform other than insertion and deletion or you can see other than in 22 peek means we are going to get the front element so here you can say you can get the front element as well as the rear element so you can say get front get ring here fine oh you can say front and rear means you want to check out which value is at the front of the queue which value is at the rear of the queue and other than these two operations are also there that is is full and is empty right this operation is going to return true if the DQ is full otherwise Falls and SMPT means this is going to return true if the DQ is empty otherwise it is going to return false how we will implement these operations on a DQ that we will discuss in the next video with proper code so now next thing is memory representation of this DT or you can say how we are going to implement this DQ how we are which data structure you are going to use to implement this beacon so the answer is either you can use a circular array or you can use a doublylinked list right how we will implement this using circular array that thing we will discuss in the next video what a circular array see we have already discussed the circular queue implementation in that case we have discussed that we can implement that circular queue using a circular arrays right so now in that case what is the case here suppose we have front and rear so now the situation is something like this here I have 3 4 & 2 and this is free now so front is pointing to here and rear is pointing to here now I want to perform this insert at rear insert adri√† here but now see suppose array size is 4 only right so now you cannot do rear plus plus means here you cannot insert but it should not return that q is full why so because we are using circular array concept something like this logically you can represent it something like this is a circular adding zero one two and three after this three index we will move to the 0th index means something like this and this space is free so you can insert here this is what a circular array concept so you can implement this DQ using circular adding or you can implement it using linked list also doubly linked list also and here in this case all the operations that is insertion and deletion should take what order of one time complexity right now we will see some applications of DQ C as we have discussed it has the property of both stack and queue right so we can use it as stack and queue both fine so the applications of stack and queue would be obviously the application of this DQ so first application is you can say it can be used to perform the redo and undo operations my second thing you can say it that you can also be used as a palindrome checker palindrome means if you read a string from the front and if you read from the and then it would be same from both things fine suppose you can take an example of this thing if you read from here then radar and if you read it from the end then also it would be rather so it can also be use as a palindrome checker now the very important application is what it is used in what multi processor scheduling see what is that thing it means multi processor means you can say how multiple processors are there suppose we are taking two processors and each processor is assigned some job and every or you can say process and every process is having multiple threads right so each processor is containing its key word you can say a DQ this is also maintaining its DQ this is also maintaining its dake you see these beacuse are used to maintain those threads which are ready to execute now see here when a process creates a new process suppose the process is a process this processor is executing a process so a process can you can say produce its trial process so that process would be inserted at the front of this DQ but suppose this processor has executed its all the threads right now this processor this processor will steal a thread from this processor or you can say the process of this processor but this will take a thread from the rear right from rear of this DQ and after stealing this thread it will execute the thread on this processor means on its own and it will add this thread to its friend and this processor will take you can say threads from its front so here you can say this we can delete from the rear and we can delete from the front we can insert from both the ends also and delete from both ends so here too to implement this thing in this multiprocessor scheduling algorithm DQ is going to be used right so this complete process is known as what it is known as known as a stream algorithm for job scheduling say this is just a brief overview of what a steal algorithm is there if you want me to make a video on this thing you can write down me in the comment box right see there can be many more applications of this DQ other than these three that we have discussed here fine but I guess this is fine for the introduction of DQ in next video we will discuss how to implement double ended queue using circular arrays right so I will see in the next video does number by a taking
