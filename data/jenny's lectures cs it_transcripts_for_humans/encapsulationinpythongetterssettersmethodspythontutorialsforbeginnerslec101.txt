With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - doing good so the series of Learning
00:03 - Partner programming language in the
00:05 - previous video we have seen what are
00:06 - access specifiers or access modifiers in
00:08 - Python public protected and private
00:11 - right and till now we have discussed two
00:14 - oops concept inheritance and abstraction
00:16 - the third one is encapsulation so it is
00:19 - one of the four pillars of op four
00:22 - pillars are inheritance abstraction
00:24 - encapsulation and polymorphism and it's
00:26 - also important from security point of
00:29 - view now how
00:31 - so what is basically first we will
00:34 - discuss encapsulation and how we are
00:36 - going to achieve encapsulation with the
00:38 - help of program I will show you
00:39 - practically right now let's see this
00:43 - thing with the help of real life example
00:44 - what is encapsulation see I hope you
00:47 - have seen uh that capsule right like
00:52 - this we have a capsule
00:55 - and here in this we are having some
00:57 - drugs or you can say medicine
01:00 - right and if you are sick or if you are
01:03 - not feeling well or if you have any
01:04 - other problem you just take it and it
01:06 - will act in your body accordingly right
01:08 - you'll be fine
01:10 - so now within this capsule we are having
01:13 - some amount of drug different types of
01:15 - thing so these are bundled together or
01:19 - these drugs or these medicines are
01:21 - wrapped together and you just take that
01:24 - complete capsule it's not like that you
01:26 - just open it and then you take
01:27 - individual uh that component obviously
01:31 - not right
01:33 - so that is encapsulation encapsulation
01:36 - means just wrapping off something
01:39 - now in programming what is encapsulation
01:42 - if you say then what we are going to
01:44 - wrap what we are going to bundle in one
01:47 - unit or in one capsule
01:49 - what the data members or you can say the
01:53 - data and methods together
01:57 - so you will find this kind of definition
01:59 - everywhere like wrapping up of data or
02:01 - you can say code and methods into a
02:04 - single unit and that is encapsulation
02:07 - right the data and the methods which are
02:11 - acting upon that data
02:13 - into a single unit that bundling or that
02:16 - wrapping is known as encapsulation so
02:19 - obviously this is a kind of Shield it is
02:21 - going to protect whatever there inside
02:24 - the capsule from outside world
02:26 - right so same in programming also it it
02:32 - is a shield kind of thing
02:34 - right that is going to protect our data
02:36 - and our method from outside wall now how
02:39 - that I'll show you right so now
02:42 - basically if I say like if you are
02:44 - defining a class then what is there in a
02:47 - class class here you will have a class
02:49 - name then some attributes
02:52 - and methods
02:55 - this is class so this is just an example
02:58 - of encapsulation
03:00 - simplest example because in class we are
03:03 - having some attributes of the class or
03:05 - you can say the data of the class or the
03:07 - member data members of the class as well
03:08 - as the methods
03:10 - in the single unit right so this is you
03:13 - can share Capital this is what nothing
03:15 - but encapsulation so like in real world
03:18 - we have this kind of capsule and so it's
03:21 - not easy to open that capsule right or
03:24 - maybe if something is very precious like
03:25 - in previous example we have discussed X
03:28 - specifiers so that thing you will put in
03:31 - a locker you have a lock and you have a
03:32 - key but in programming obviously we are
03:34 - not having any proper lock or any proper
03:36 - key right so there are simply some name
03:39 - conventions some notification or this
03:41 - kind of thing right so here you are
03:44 - going to achieve encapsulation or you
03:47 - are going to see encapsulation is
03:49 - wrapping up of these things into single
03:51 - unit right as well as
03:53 - encapsulation is also known as data
03:56 - hiding it protects our data it hides the
03:59 - data
04:00 - right as well as the implementation
04:02 - detail from the user see in abstraction
04:04 - I have told you abstraction is basically
04:06 - a process of finding out
04:08 - which functionality is shown to the user
04:11 - and which is to be hidden from the user
04:13 - right but actual hiding is done with the
04:16 - help of this thing encapsulation
04:20 - now how we are going to hide using
04:22 - excess specifier and access specifier
04:25 - public private protected that thing we
04:27 - have discussed in previous video
04:30 - is also known as data hiring so I want
04:33 - to hide some data then you just declare
04:36 - that attribute suppose a student age
04:39 - I want to hide that age
04:42 - right so I just declare that age
04:44 - variable private that's it
04:48 - or I want to hide some method from
04:50 - outside world that also method we can do
04:52 - we can make that method private or
04:54 - either protected
04:55 - right
04:57 - right so in if you make it protected
04:59 - then drive the class and you can access
05:01 - those protected attributes and methods
05:04 - but if a method or an attribute is
05:07 - private then
05:08 - that we can use only inside the class
05:11 - not outside the class
05:14 - yes we can
05:15 - we can access private methods and
05:17 - attributes outside of the class there
05:19 - are basically three methods first just
05:22 - create public method within the class
05:24 - only and using that we can access
05:26 - private
05:28 - methods and attributes second thing
05:30 - using name mangling and third thing
05:32 - using getter and Setter methods
05:35 - so first two technique we have discussed
05:37 - in previous video please watch that
05:39 - video first right that's very important
05:42 - to get encapsulation now third method
05:45 - using Getters and Setter method how you
05:47 - can achieve encapsulation that thing
05:48 - I'll show you practically in this video
05:49 - right I hope now the basics of
05:52 - encapsulation what is encapsulation is
05:53 - clear to you guys right so if I say
05:57 - what are advantages or let me just show
06:00 - you that practical example and at last
06:01 - we will just summarize this thing and
06:04 - I'll show you I'll tell you the
06:05 - advantages of encapsulation right okay
06:08 - so see this solves the example you have
06:10 - taken in previous video when you're
06:12 - discussing excess specifier public
06:13 - private and protected because obviously
06:15 - using these specifier only we can
06:17 - achieve encapsulation we can hide our
06:19 - data right or you can say not only the
06:22 - data are methods as well as right like
06:25 - this example you have taken this name is
06:27 - public this one is protected
06:29 - so if this is a prefix with one and a
06:31 - one underscore that is protected and
06:33 - this age is private private instance
06:36 - variable so it is a prefix with double
06:38 - underscore and we have a private method
06:41 - as well as right so if you want to
06:42 - access this private
06:45 - attribute outside of the class directly
06:48 - with the help of this we cannot access
06:50 - if you want to print directly with the
06:52 - help of like
06:53 - S1 and underscore underscore
06:57 - age I want to print 8 so it will give
07:02 - error see attribute error student object
07:05 - has no attribute age because outside of
07:08 - the class
07:10 - we cannot access private
07:12 - if it is a private method or private
07:14 - attribute
07:16 - within the class means
07:18 - this area is within the class only only
07:20 - this area this object we are creating
07:22 - outside of the class so that is why we
07:24 - are not able to access this thing right
07:26 - so this is obviously we are hiding our
07:29 - data we are protecting our data from
07:32 - Public Access we are restricting the
07:35 - access to our data which is very maybe
07:37 - some sensitive data we have in our class
07:39 - it's just a simple program but
07:42 - in Industry when you are working on
07:44 - Project then definitely
07:46 - there must be some sensitive information
07:47 - in that project so that we are going to
07:50 - declare that thing as private okay now
07:53 - how you can access this private kind of
07:54 - thing either you can use first method is
07:57 - using public method you can access this
07:59 - thing see this display private data is
08:02 - public method so here
08:04 - I'm just calling
08:07 - uh this this display method is private
08:09 - so directly we cannot access house
08:11 - outside of the class but within this
08:13 - public method we can access we can call
08:15 - this method so underscore underscore
08:18 - display and within this display I am
08:21 - accessing age that is fine now I can
08:23 - call outside of the class this display
08:25 - private data right so if I go like S1
08:28 - Dot display private data then we can
08:31 - access let let me just comment out this
08:34 - thing
08:38 - see now Rahul age and roll number 23
08:43 - from student class right like this one
08:45 - is the second thing how you can access
08:46 - private data using name manly so that
08:49 - also we have discussed in last video
08:50 - using dir you can do name adding how to
08:52 - access name angling type of thing this
08:54 - is the example C
08:56 - if you want to call this a display
08:58 - method because this is private directly
09:00 - you can call but using name mangling we
09:02 - can code so name angling what you have
09:04 - to do first underscore then class name
09:06 - then private data or private attribute
09:10 - name or private method name this is fine
09:11 - now this display will work now let me
09:14 - just comment out the same let's run this
09:17 - now see this display is working right
09:20 - this function
09:21 - or if you want to access this age that
09:23 - is also fine
09:24 - we have uh C
09:28 - using name angling the object name dot
09:31 - underscore class name underscore
09:33 - underscore H here is fine third thing is
09:35 - now using getter and Setter method we
09:39 - can access private kind of thing now
09:40 - basically if I would say this is the you
09:45 - know best process using Getters and
09:47 - Setters method to implement complete
09:50 - encapsulation in your program
09:52 - right because see we can access private
09:56 - data outside of the class
09:59 - so in Python there is no such mechanism
10:02 - to completely restrict the excess of
10:04 - private data outside of the class it's
10:06 - flexible right it is responsibility of a
10:09 - good programmer to you know not tax
10:11 - private and protected members outside of
10:14 - the class
10:15 - do not modify this thing outside of the
10:18 - class
10:19 - I can modify this private
10:21 - data outside of the class so if I want
10:23 - to modify like this age
10:26 - then simply you have to access like this
10:28 - and equal to now age I just want to set
10:32 - 45 let's run this and see 45 year old so
10:36 - I can modify the state outside of the
10:38 - class now what is the use of this
10:39 - private kind of thing right so obviously
10:41 - if something you have seen if you are
10:44 - working in a team on a in a company then
10:47 - if you have seen in a class you have
10:48 - private thing private attribute
10:51 - underscorants for each then better not
10:53 - to touch the south side of the class
10:55 - better not to modify this
10:57 - it is a responsibility these are you can
11:00 - say manners or these are ethics it's not
11:02 - to touch these things outside of the
11:04 - class so always use Getters and Setters
11:07 - methods now getter method is to access
11:10 - the private
11:12 - data and stator method is to set or to
11:15 - modify the values
11:17 - right so rather than modifying this
11:19 - thing outside of the class
11:21 - okay let's create a new project
11:24 - sorry new file in abstraction demo only
11:27 - and I'm creating
11:29 - encapsulation demo.py and let's just
11:33 - copy paste the previous code as it is
11:38 - let me just remove first of all
11:40 - something here
11:42 - right so we have this class
11:44 - right this is Drive class so Drive class
11:47 - is basically comes into picture when you
11:49 - are dealing with protected
11:51 - data and in inheritance basically if you
11:54 - want that your drive class can access
11:56 - the data only derived class can access
11:58 - the data not public member not public
12:01 - person then just declare that thing as
12:04 - protected so this row number this drive
12:06 - class can access see here directly I can
12:09 - access
12:10 - right
12:15 - so now
12:17 - okay let's use Getters and Setters
12:20 - method suppose using getter
12:23 - using get method I want to get the age
12:26 - so just Define
12:28 - this name get
12:31 - what get age
12:33 - right because
12:35 - age is only private so we use Getters
12:38 - and Setters on private attributes only
12:41 - so get age and get means
12:45 - to get at the age so return just self
12:49 - note
12:51 - underscore underscore H or maybe
12:53 - directly you can print that my age is
12:55 - this
12:56 - and if you want to modify the sage then
12:59 - use Setters method like set
13:04 - it's not like that you have to give the
13:06 - name getter and setter
13:08 - just
13:10 - indicate get and set
13:12 - like and just you can say underscore and
13:15 - the name of the attribute name anything
13:18 - you can give right set age so I want to
13:22 - modify
13:23 - so obviously when we pull this function
13:26 - we are going to provide our age so let's
13:28 - just maybe number or any parameter name
13:32 - you can take is you can take even age
13:35 - you can take a you can take x y z
13:37 - anything right
13:38 - so and basically Center and getter we
13:40 - use when we uh want to apply some
13:43 - validation logic when we are modifying
13:45 - the age right so if you want to apply
13:49 - some validation logic either directly
13:51 - you can set like self
13:53 - Dot
13:54 - underscore under score is equal to
13:57 - directly the attribute name age this is
14:00 - also fine
14:01 - if you want to apply some logic
14:02 - validation logic like if this is
14:06 - you have given is greater than
14:09 - 25. or greater than suppose 35.
14:15 - then print
14:17 - suppose I have some restriction a should
14:19 - be less than 35 so if greater than 35
14:21 - then it will give error
14:24 - else
14:25 - set the age
14:28 - else just set page
14:31 - right
14:33 - now suppose let's just comment out these
14:37 - two methods and comment out this class
14:40 - as well derived class
14:43 - now let's create
14:45 - S1 student what you need to pass name
14:47 - row number age okay name row number age
14:50 - and
14:51 - now use get and set method
14:56 - so if you want to get the age just call
14:59 - S1 Dot
15:01 - get age and it is returning so
15:04 - definitely you have to
15:06 - print
15:09 - let's run this and it will print ages
15:12 - 20.
15:14 - okay we have given 20. if you want to
15:16 - modify that private variable private
15:18 - attribute age then just call
15:22 - set inch and here just I just want to
15:24 - pass like 34 Maybe
15:26 - okay
15:28 - and after that just again I want to
15:31 - print age
15:34 - just copy paste this thing and let's run
15:36 - this see first it was 20 then it was 34.
15:40 - using Getters and Setters method it's a
15:43 - good idea it's a good practice to modify
15:46 - private
15:48 - members private attributes rather than
15:50 - directly using name manually modify that
15:52 - that is not a good practice okay a good
15:55 - practice a good programmer never do this
15:57 - he or she will use Getters and Setters
16:00 - method to access private variables
16:02 - private methods okay so we use these
16:06 - Getters and Setters method when we want
16:08 - to avoid the direct access to private
16:12 - data right then use data center and if
16:15 - you want to apply some validation logic
16:16 - to set any private data that then also
16:18 - obviously we can apply that thing also
16:20 - right now I hope this is clear to you
16:23 - guys encapsulation what is encapsulation
16:25 - how to achieve in laboration and
16:27 - encapsulation
16:28 - implements abstraction
16:31 - right because now actually we are hiding
16:34 - our data right
16:36 - something hiding something from outside
16:38 - wall
16:40 - and this is encapsulation so it is what
16:42 - what we can say encapsulation implements
16:45 - abstraction abstraction is simply a
16:47 - thought process abstraction works at
16:50 - design level actually at implementation
16:52 - level level
16:53 - encapsulation works and how to achieve
16:56 - encapsulation obviously using these
16:57 - excess specifiers right and how we can
17:01 - use you can watch my previous video and
17:03 - one thing we have discussed set us and
17:05 - get us method we have discussed in this
17:06 - thing so what are advantages of
17:07 - encapsulation obviously it provides
17:09 - security
17:10 - right
17:11 - it is provides our data hiding
17:13 - and obviously if you are bundling
17:15 - something bundling the code and the
17:17 - method which are working on that code in
17:19 - a single unit then that provides us a
17:21 - Simplicity kind of thing like the code
17:23 - would be more
17:24 - readable and more maintainable
17:28 - right so I hope you got what is
17:30 - encapsulation how to achieve
17:31 - encapsulation and why this thing is
17:33 - important right now only one OB if we
17:36 - say you know concept is remaining that
17:38 - is polymorphism so that will think that
17:40 - we'll see in the next video so now I'll
17:41 - see in the next video bye take care

Cleaned transcript:

hey everyone I hope you all are safe and doing good so the series of Learning Partner programming language in the previous video we have seen what are access specifiers or access modifiers in Python public protected and private right and till now we have discussed two oops concept inheritance and abstraction the third one is encapsulation so it is one of the four pillars of op four pillars are inheritance abstraction encapsulation and polymorphism and it's also important from security point of view now how so what is basically first we will discuss encapsulation and how we are going to achieve encapsulation with the help of program I will show you practically right now let's see this thing with the help of real life example what is encapsulation see I hope you have seen uh that capsule right like this we have a capsule and here in this we are having some drugs or you can say medicine right and if you are sick or if you are not feeling well or if you have any other problem you just take it and it will act in your body accordingly right you'll be fine so now within this capsule we are having some amount of drug different types of thing so these are bundled together or these drugs or these medicines are wrapped together and you just take that complete capsule it's not like that you just open it and then you take individual uh that component obviously not right so that is encapsulation encapsulation means just wrapping off something now in programming what is encapsulation if you say then what we are going to wrap what we are going to bundle in one unit or in one capsule what the data members or you can say the data and methods together so you will find this kind of definition everywhere like wrapping up of data or you can say code and methods into a single unit and that is encapsulation right the data and the methods which are acting upon that data into a single unit that bundling or that wrapping is known as encapsulation so obviously this is a kind of Shield it is going to protect whatever there inside the capsule from outside world right so same in programming also it it is a shield kind of thing right that is going to protect our data and our method from outside wall now how that I'll show you right so now basically if I say like if you are defining a class then what is there in a class class here you will have a class name then some attributes and methods this is class so this is just an example of encapsulation simplest example because in class we are having some attributes of the class or you can say the data of the class or the member data members of the class as well as the methods in the single unit right so this is you can share Capital this is what nothing but encapsulation so like in real world we have this kind of capsule and so it's not easy to open that capsule right or maybe if something is very precious like in previous example we have discussed X specifiers so that thing you will put in a locker you have a lock and you have a key but in programming obviously we are not having any proper lock or any proper key right so there are simply some name conventions some notification or this kind of thing right so here you are going to achieve encapsulation or you are going to see encapsulation is wrapping up of these things into single unit right as well as encapsulation is also known as data hiding it protects our data it hides the data right as well as the implementation detail from the user see in abstraction I have told you abstraction is basically a process of finding out which functionality is shown to the user and which is to be hidden from the user right but actual hiding is done with the help of this thing encapsulation now how we are going to hide using excess specifier and access specifier public private protected that thing we have discussed in previous video is also known as data hiring so I want to hide some data then you just declare that attribute suppose a student age I want to hide that age right so I just declare that age variable private that's it or I want to hide some method from outside world that also method we can do we can make that method private or either protected right right so in if you make it protected then drive the class and you can access those protected attributes and methods but if a method or an attribute is private then that we can use only inside the class not outside the class yes we can we can access private methods and attributes outside of the class there are basically three methods first just create public method within the class only and using that we can access private methods and attributes second thing using name mangling and third thing using getter and Setter methods so first two technique we have discussed in previous video please watch that video first right that's very important to get encapsulation now third method using Getters and Setter method how you can achieve encapsulation that thing I'll show you practically in this video right I hope now the basics of encapsulation what is encapsulation is clear to you guys right so if I say what are advantages or let me just show you that practical example and at last we will just summarize this thing and I'll show you I'll tell you the advantages of encapsulation right okay so see this solves the example you have taken in previous video when you're discussing excess specifier public private and protected because obviously using these specifier only we can achieve encapsulation we can hide our data right or you can say not only the data are methods as well as right like this example you have taken this name is public this one is protected so if this is a prefix with one and a one underscore that is protected and this age is private private instance variable so it is a prefix with double underscore and we have a private method as well as right so if you want to access this private attribute outside of the class directly with the help of this we cannot access if you want to print directly with the help of like S1 and underscore underscore age I want to print 8 so it will give error see attribute error student object has no attribute age because outside of the class we cannot access private if it is a private method or private attribute within the class means this area is within the class only only this area this object we are creating outside of the class so that is why we are not able to access this thing right so this is obviously we are hiding our data we are protecting our data from Public Access we are restricting the access to our data which is very maybe some sensitive data we have in our class it's just a simple program but in Industry when you are working on Project then definitely there must be some sensitive information in that project so that we are going to declare that thing as private okay now how you can access this private kind of thing either you can use first method is using public method you can access this thing see this display private data is public method so here I'm just calling uh this this display method is private so directly we cannot access house outside of the class but within this public method we can access we can call this method so underscore underscore display and within this display I am accessing age that is fine now I can call outside of the class this display private data right so if I go like S1 Dot display private data then we can access let let me just comment out this thing see now Rahul age and roll number 23 from student class right like this one is the second thing how you can access private data using name manly so that also we have discussed in last video using dir you can do name adding how to access name angling type of thing this is the example C if you want to call this a display method because this is private directly you can call but using name mangling we can code so name angling what you have to do first underscore then class name then private data or private attribute name or private method name this is fine now this display will work now let me just comment out the same let's run this now see this display is working right this function or if you want to access this age that is also fine we have uh C using name angling the object name dot underscore class name underscore underscore H here is fine third thing is now using getter and Setter method we can access private kind of thing now basically if I would say this is the you know best process using Getters and Setters method to implement complete encapsulation in your program right because see we can access private data outside of the class so in Python there is no such mechanism to completely restrict the excess of private data outside of the class it's flexible right it is responsibility of a good programmer to you know not tax private and protected members outside of the class do not modify this thing outside of the class I can modify this private data outside of the class so if I want to modify like this age then simply you have to access like this and equal to now age I just want to set 45 let's run this and see 45 year old so I can modify the state outside of the class now what is the use of this private kind of thing right so obviously if something you have seen if you are working in a team on a in a company then if you have seen in a class you have private thing private attribute underscorants for each then better not to touch the south side of the class better not to modify this it is a responsibility these are you can say manners or these are ethics it's not to touch these things outside of the class so always use Getters and Setters methods now getter method is to access the private data and stator method is to set or to modify the values right so rather than modifying this thing outside of the class okay let's create a new project sorry new file in abstraction demo only and I'm creating encapsulation demo.py and let's just copy paste the previous code as it is let me just remove first of all something here right so we have this class right this is Drive class so Drive class is basically comes into picture when you are dealing with protected data and in inheritance basically if you want that your drive class can access the data only derived class can access the data not public member not public person then just declare that thing as protected so this row number this drive class can access see here directly I can access right so now okay let's use Getters and Setters method suppose using getter using get method I want to get the age so just Define this name get what get age right because age is only private so we use Getters and Setters on private attributes only so get age and get means to get at the age so return just self note underscore underscore H or maybe directly you can print that my age is this and if you want to modify the sage then use Setters method like set it's not like that you have to give the name getter and setter just indicate get and set like and just you can say underscore and the name of the attribute name anything you can give right set age so I want to modify so obviously when we pull this function we are going to provide our age so let's just maybe number or any parameter name you can take is you can take even age you can take a you can take x y z anything right so and basically Center and getter we use when we uh want to apply some validation logic when we are modifying the age right so if you want to apply some validation logic either directly you can set like self Dot underscore under score is equal to directly the attribute name age this is also fine if you want to apply some logic validation logic like if this is you have given is greater than 25. or greater than suppose 35. then print suppose I have some restriction a should be less than 35 so if greater than 35 then it will give error else set the age else just set page right now suppose let's just comment out these two methods and comment out this class as well derived class now let's create S1 student what you need to pass name row number age okay name row number age and now use get and set method so if you want to get the age just call S1 Dot get age and it is returning so definitely you have to print let's run this and it will print ages 20. okay we have given 20. if you want to modify that private variable private attribute age then just call set inch and here just I just want to pass like 34 Maybe okay and after that just again I want to print age just copy paste this thing and let's run this see first it was 20 then it was 34. using Getters and Setters method it's a good idea it's a good practice to modify private members private attributes rather than directly using name manually modify that that is not a good practice okay a good practice a good programmer never do this he or she will use Getters and Setters method to access private variables private methods okay so we use these Getters and Setters method when we want to avoid the direct access to private data right then use data center and if you want to apply some validation logic to set any private data that then also obviously we can apply that thing also right now I hope this is clear to you guys encapsulation what is encapsulation how to achieve in laboration and encapsulation implements abstraction right because now actually we are hiding our data right something hiding something from outside wall and this is encapsulation so it is what what we can say encapsulation implements abstraction abstraction is simply a thought process abstraction works at design level actually at implementation level level encapsulation works and how to achieve encapsulation obviously using these excess specifiers right and how we can use you can watch my previous video and one thing we have discussed set us and get us method we have discussed in this thing so what are advantages of encapsulation obviously it provides security right it is provides our data hiding and obviously if you are bundling something bundling the code and the method which are working on that code in a single unit then that provides us a Simplicity kind of thing like the code would be more readable and more maintainable right so I hope you got what is encapsulation how to achieve encapsulation and why this thing is important right now only one OB if we say you know concept is remaining that is polymorphism so that will think that we'll see in the next video so now I'll see in the next video bye take care
