With timestamps:

00:00 - so there is one more concept left in c
00:01 - language that is storage classes in c
00:04 - but this is different from c plus plus
00:05 - concept class object concept and this is
00:07 - different storage classes in c
00:10 - so in this video we'll talk about
00:11 - everything about storage classes what is
00:13 - storage class types of storage class
00:14 - properties how to use storage classes in
00:17 - your program why we use it if you use
00:19 - storage classes class in your program
00:21 - then you know how to use it and what it
00:23 - will tell about our program
00:25 - right everything all this now every
00:26 - single detail about this thing will
00:28 - discuss in this video with the help of a
00:29 - program also right i'll show you
00:31 - practical but before that i just want to
00:33 - tell you one thing this summer
00:35 - geeks4geeks is going to bring back fun
00:37 - to your screens with the biggest virtual
00:40 - event in 2022 presenting geek's summer
00:43 - carnival
00:45 - so experience fun excitement
00:47 - entertainment and games and also get
00:50 - loads of discount goodies and various
00:52 - other cool stuff to relish this carnival
00:55 - in its truest form geeks for geeks is
00:57 - inviting you to experience starters
01:00 - before the main course
01:02 - starting from 26th of march there are
01:04 - going to be various tickets that
01:06 - definitely you don't want to miss out
01:08 - with these tickets you get the best of
01:10 - the courses at the best prices so let me
01:12 - share some more details about the same
01:15 - one ticket is of rupees 2000 and what
01:16 - benefits you will get here doubt
01:18 - assistance for three months plus premium
01:20 - quarterly with this ticket and you will
01:22 - get dsa at the lowest price ever second
01:24 - is of 5000 and here you will get doubt
01:27 - assistance for six months plus premium
01:29 - plus quarterly and your ticket to get
01:31 - one of the best gfg score cip at a huge
01:34 - discount
01:36 - next is of 8 000 rupees and in this what
01:38 - benefit you will get premium plus yearly
01:41 - plus goodies t-shirt pen mask stickers
01:44 - kitchen and much more so it would be
01:46 - easy and budget friendly entry to any of
01:48 - the live courses of gfg
01:51 - and here you will also have a chance of
01:52 - wall of wishes like you can wish for any
01:54 - course fill out the detail and you can
01:56 - send requests if you want to you know
01:58 - explore more if you have any you know a
02:00 - question then you can go to the faq
02:01 - section frequently asked question and
02:03 - you can see the answer of these
02:04 - questions maybe you'll get the you know
02:06 - answer of your question so this summer
02:08 - carnival is all about enhancing your
02:10 - skills so definitely you don't want to
02:11 - miss out an opportunity like this so all
02:13 - the links relevant links and details
02:16 - i'll put in the description box of this
02:17 - video you can go and check out now let's
02:19 - see what is stories classes and see see
02:21 - when we declare any variable in c how we
02:23 - declare like int
02:25 - a
02:26 - something like this and if you
02:28 - initialize this variable like this
02:30 - a is equal to
02:31 - 10
02:33 - then what this line
02:35 - tells about this variable like name of
02:38 - the variable is a
02:40 - value what you are going to store is 10
02:42 - and which type of value the type the
02:45 - data type this thing
02:47 - this is type of the value you can store
02:50 - in this variable three things it is
02:51 - going to tell
02:52 - right
02:53 - so basically a variable
02:56 - now next thing is see a variable is
02:59 - associated with basically
03:01 - two things one is type and one is
03:05 - storage
03:06 - class
03:08 - so this type means the data type
03:11 - this thing
03:12 - it will tell the you know type of the
03:15 - what type of value you can store at the
03:17 - data right obviously name this will tell
03:20 - right now what is this storage class now
03:23 - another things associated with this type
03:26 - of this variable is what
03:28 - like
03:29 - if i don't i'll not initialize this
03:32 - thing into a
03:34 - then first thing is what default value
03:36 - it will take
03:39 - right some other things or some other
03:41 - points which are associated with this
03:43 - variable right
03:44 - next is what location
03:48 - where this variable would be stored in
03:51 - ram or in
03:52 - register yes you heard it right we can
03:54 - also store variables in register
03:57 - no not we can store it depends on the
03:59 - compiler right that also i'll tell you
04:02 - so third thing is you can say the scope
04:04 - of the variable
04:06 - we have heard about local scope global
04:08 - scope right where you can access
04:12 - scope means where you can access this v
04:15 - this variable from where this variable
04:16 - can be accessed the scope
04:18 - right
04:19 - next thing is what you can say the
04:21 - lifetime
04:25 - lifetime means
04:26 - till when you
04:28 - it's like till
04:30 - when
04:32 - this variable is alive
04:35 - like within a function suppose i'm
04:37 - writing a function 1 1
04:39 - and here i'm declaring a variable in x
04:41 - is equal to 10
04:42 - and this is end of this function so the
04:45 - lifetime of this variable is
04:48 - till here
04:50 - till this line till the termination of
04:52 - this function
04:53 - after this you can say this variable is
04:56 - dead
04:57 - this variable is alive till here we can
05:00 - access this variable throughout this
05:02 - function but after this it is dead so
05:04 - this is you can say the life of this
05:07 - variable
05:09 - right now
05:11 - what thing will tell
05:13 - these properties of this variable
05:15 - because this end will tell only the type
05:17 - which type of value it can store
05:20 - right
05:21 - so what extra thing which is associated
05:24 - with this variable will tell about these
05:25 - things like the default value of this is
05:27 - what where this variable would be stored
05:29 - the scope and the lifetime
05:32 - these things would be
05:34 - told up
05:35 - by the storage classes
05:39 - yes
05:40 - and where you will write stories class
05:42 - here
05:45 - before the time
05:46 - now we have four type of stories classes
05:49 - see koto
05:51 - resistor
05:53 - extern and static
05:58 - right and these storage classes will
06:00 - tell these things about this variable
06:03 - right
06:05 - now see
06:07 - we have done many programs we have
06:09 - written many programs till now but we
06:11 - haven't used these kind of things
06:13 - right
06:15 - so
06:16 - our program were right
06:18 - so by default if you will not write
06:19 - anything here
06:21 - by default compiler will associate a
06:22 - storage class with it that is o2
06:26 - this by default
06:28 - so if you don't write anything
06:30 - this is fine if you write something like
06:32 - this auto int
06:34 - b
06:35 - this is also fine this is also would be
06:37 - considered under the storage class auto
06:39 - this will also be considered under
06:40 - storage class o2 so explicitly if you
06:43 - write this keyword that is also fine if
06:44 - you don't write that would be considered
06:46 - in auto storage class right
06:48 - now now see
06:50 - i hope you aware about these these
06:52 - things default value
06:55 - like
06:56 - if you don't declare this thing if you
06:58 - don't initialize this thing so sometimes
06:59 - it will take 0 default value sometimes
07:02 - this will take garbage
07:03 - default value right when you print this
07:06 - so it depends on these
07:08 - storage classes which storage class you
07:10 - write here according to that it will
07:12 - take default value so i guess you do not
07:14 - have any uh confusion and default value
07:16 - location means where we are going to
07:18 - store this in register or in
07:20 - uh like ram main memory
07:23 - now scope is one
07:25 - where you can access this now scope is
07:27 - also for you can say mainly three types
07:31 - block
07:36 - block
07:38 - function
07:40 - and one is
07:42 - function or you can say method or one is
07:45 - program
07:48 - three type of scope a variable can have
07:50 - depends on the storage class you use how
07:52 - to use that also discuss right and which
07:55 - storage class is having which scope that
07:57 - is that also we will use but first of
07:59 - all you need to understand what is block
08:00 - scope what is function and what is
08:02 - program scope this is very important
08:03 - first of all otherwise many students get
08:05 - confused in this scope especially in
08:07 - this point right
08:09 - and life time also i guess you have idea
08:12 - like
08:13 - till when we can access that
08:15 - variable one variable like global
08:18 - where we are we declare a variable
08:20 - globally then you can access that
08:22 - variable till the end of the program
08:24 - right
08:25 - so this is what you can say life of
08:27 - variable basically scope is
08:29 - you need to understand now block means
08:31 - what something you write within these
08:33 - curly braces that would be considered as
08:35 - block
08:39 - function
08:40 - you know any function we can write like
08:42 - void
08:44 - add
08:45 - this and this this is function scope
08:47 - this is what function right you are
08:49 - defining this function so this is block
08:51 - anything which is in curly braces this
08:53 - would be considered as block it's not
08:55 - compulsive that we write this thing
08:57 - after the function only in programming
08:59 - anywhere we can define a block
09:02 - let me just show you one
09:04 - example of this these three things let
09:06 - me show you example one by one see
09:09 - i am writing a
09:10 - simple
09:11 - program here
09:13 - see in main
09:17 - first of all i am taking a variable into
09:19 - a is equal to ten
09:21 - then
09:22 - this
09:24 - then here i am taking int a again is
09:26 - equal to 20
09:28 - and
09:30 - printf
09:32 - so
09:33 - this would be what
09:34 - i am considering inside block and i am
09:37 - printing this value of a
09:41 - and after this also i am printing value
09:43 - printf
09:45 - percentage d
09:48 - a
09:53 - so this would be considered as
09:55 - this is what block so this variable this
09:58 - a
10:00 - this this is not duplicate thing because
10:02 - this is
10:03 - yeah this is what functions go this is
10:05 - main function so main function scope is
10:07 - from here to here this is function scope
10:09 - within this functions for we have a
10:10 - block also so this this a is having
10:14 - this block scope within this block only
10:17 - we can use this a so what it will print
10:19 - inside block and this a it will print 20
10:22 - the value
10:23 - right it will not take this one
10:27 - the print of this statement this would
10:30 - take value which is closer which is you
10:33 - know close to this a now close to the
10:36 - size they say or the same this value
10:38 - right so it will print 20 within this
10:40 - block and this printf this a will print
10:43 - what
10:44 - after this block this a the life of the
10:47 - says no it is dead you can see we cannot
10:49 - access this a this value 20 outside this
10:51 - block so outside this block
10:54 - this is
10:56 - this printf is within this function so
10:58 - in this function we have do we have
11:00 - declaration of a yes a is equal to 10
11:02 - definition you can say
11:04 - this 10 value so it will print 10. so
11:06 - this is this is having this function
11:08 - scope this is having this block score
11:10 - right
11:12 - again if i write one more function like
11:13 - void
11:15 - fun
11:17 - so this a is having
11:19 - this function scope this is what
11:21 - function scope this is function so this
11:22 - is function scopes this a we can use
11:24 - throughout this function so this a will
11:25 - print
11:27 - 30
11:28 - right
11:29 - now again suppose
11:31 - here i'm here i'm writing one more
11:35 - block
11:36 - after this block one more block and in
11:39 - this block i am just writing printf
11:42 - percentage d
11:44 - and
11:45 - a plus plus
11:48 - that's it
11:49 - and after this
11:51 - again printf
11:53 - percentage d
11:55 - a and after this line i am closing main
11:58 - function after writing return 0
12:01 - right and within this function i have
12:03 - this thing and one more
12:07 - i have
12:08 - before this main
12:10 - end a is equal to 50
12:12 - this i am taking after the header files
12:20 - so this a is outside of this function so
12:23 - this a is having program scope
12:26 - throughout the program
12:29 - where you can access this throughout the
12:30 - program you can access this
12:33 - right
12:34 - now see
12:36 - this time what output you will get
12:38 - this is one block this is second block
12:40 - we have now block one and block two
12:43 - so this will give 20
12:45 - right but in this block we are not
12:48 - declaring any variable a but i am
12:50 - printing a plus plus so it will not give
12:52 - error what it will do
12:53 - now
12:55 - this block is
12:57 - within
12:58 - this function within this function
13:01 - so within this block no a
13:03 - can we use can this
13:05 - we can use value of this block no the 20
13:08 - would be within this block only after
13:10 - that it would be dead now which a value
13:12 - it will print
13:14 - which is closer to a now this value
13:17 - so it will take this value though in
13:20 - which function this block is main
13:21 - function in main function do we have any
13:24 - definition of the say this variable a
13:25 - yes we have a and it will take value 10
13:29 - so now it will print 10 and a plus plus
13:32 - means now value becomes 11
13:35 - now after this block again we have a so
13:38 - obviously this is in in this function so
13:40 - it will print 11 it will print 11 now
13:43 - and in this function obviously this
13:44 - function we are going to call suppose
13:46 - here i am going to call this function
13:48 - fun
13:50 - that's it
13:51 - so we are calling this function within
13:52 - this function do we have a yes 30 we
13:55 - have so it will print 30. if we don't
13:57 - have this line
13:58 - here
14:00 - i am just calling function here so first
14:02 - a value 30 you will get 30
14:04 - after that within this block yes 20 you
14:07 - will get after this now what value it
14:09 - will get
14:10 - there is
14:11 - no declaration within this block
14:14 - now in this function also main also we
14:17 - have
14:18 - no declaration of a
14:20 - now
14:21 - see it will check globally do we have
14:23 - any a value yes we have a is equal to 50
14:26 - globally so it will access that value so
14:28 - it will print now 50 and a plus plus
14:31 - means this value now becomes 51 in
14:33 - memory
14:34 - and again it will print
14:36 - in this function we don't have any a
14:39 - from this function it cannot use the
14:41 - value so what value it can use if we
14:43 - have any global declaration of a that
14:45 - value it can use do we have yes we have
14:48 - that is 51
14:49 - so it will print now 51
14:51 - right
14:53 - if we have suppose in a also and
14:55 - b also b is equal to 10
14:58 - so within this function obviously we can
15:00 - print percentage d
15:02 - b so it will print 10 but in this in
15:04 - this main function if i want to print
15:08 - like printf
15:09 - percentage d and b
15:13 - this line will give error
15:15 - because this b is
15:17 - undefined undeclared variable for this
15:19 - function this b is having a function
15:21 - scope within this function only after
15:23 - this function this b is dead we cannot
15:25 - access this b
15:26 - on in another function
15:29 - if we have any
15:30 - global b is equal to
15:32 - ah suppose hundred
15:36 - then it will print hundred
15:38 - then it is fine but this b within this
15:41 - function b value would be 10 and this b
15:43 - would be print would be taken as the
15:45 - global value so i hope now you
15:47 - understand the block scope the function
15:49 - scope and the program scope
15:52 - right
15:53 - so now let me show you practical of this
15:55 - thing
15:56 - see we have this program
15:58 - first of all i'm not going to
16:00 - take this global one we are taking in in
16:03 - main i'm taking a variable a i'm
16:05 - resizing it with one
16:06 - and i'm taking a function function one
16:08 - i'm calling that function here in
16:10 - function one the definition is a
16:12 - right now within this we haven't blocked
16:14 - this this block
16:16 - within this block also i have one a
16:18 - value is done 10 and i'm printing the
16:20 - just a value second block i'm just
16:22 - printing a plus plus no declaration of a
16:25 - and after this block also
16:28 - i'm going to print
16:29 - percentage d
16:33 - and
16:34 - a
16:36 - right
16:37 - and let's suppose here we write
16:39 - [Music]
16:40 - inside
16:41 - main
16:43 - this is inside block
16:45 - one and
16:47 - here i'm writing
16:49 - inside
16:51 - block 2 this is block 2 right
16:54 - and i'm just printing a in function 1
16:56 - also i'm printing a so let me just show
16:58 - you the output here no global variable
17:02 - i'm declaring right i am just taking the
17:04 - blog scope and function scope variable
17:06 - of
17:07 - a
17:08 - fine
17:09 - now see
17:11 - okay this warning we are getting because
17:13 - before calling we haven't
17:16 - declared we haven't give the prototype
17:18 - of this function so let me just leave
17:19 - the prototype here
17:21 - void
17:22 - one one
17:24 - that's it
17:26 - right and now let me just run this again
17:28 - and show you that
17:30 - see now let's see what output you are
17:32 - getting here first of all inside
17:34 - function 1 we are calling function 1 and
17:36 - it is printing 23 we have 23 in function
17:39 - 1 then inside block 1
17:41 - we will get value 10 value 10 now inside
17:44 - block 2
17:45 - which value we don't have any
17:47 - declaration of a so in function yeah
17:49 - this block is within main function in
17:50 - main function we have value 1 so it will
17:52 - print
17:53 - inside block 2 1 not 21 its value is 1 2
17:56 - is of block 2 right
17:58 - now
17:59 - this
18:00 - this a will print one now a plus plus
18:02 - means this value one becomes two now
18:04 - this printf this printer will be uh
18:06 - print value inside main and value two i
18:09 - hope now you are clear about this uh
18:11 - scope let me just
18:14 - inside block two
18:19 - right and
18:20 - now we are not taking this one we are
18:22 - taking a global way
18:25 - right
18:28 - now let's see what output you will get
18:30 - let me just run this again
18:33 - see first same inside function 123
18:36 - inside block 1 10 inside block 2 now
18:39 - which value the global one we don't have
18:41 - any value in this function so
18:43 - so it will search for the global value
18:45 - global value you do we have yes a is
18:47 - equal to 50 so it will print 50 and
18:48 - inside main this also will access this
18:51 - global value because we don't have any
18:52 - value of a within this main function
18:55 - so 51 right now if in this we have in a
18:59 - as well as
19:00 - we have
19:02 - b
19:03 - is equal to 89.
20:20 - so i hope now all the properties of this
20:23 - like default and whatever properties
20:26 - storage class will tell default value
20:28 - storage uh
20:30 - like the location and the scope and
20:32 - lifetime is clear to you right basically
20:34 - scope is clear to you blog function and
20:37 - this global scope
20:39 - i guess you will not be confused in this
20:40 - type of thing now right sometimes they
20:42 - ask an interview also there's these type
20:44 - of questions within this block also they
20:46 - write this thing within this block
20:47 - they'll read this thing but they'll not
20:49 - declare anything here so what value it
20:51 - will print whether it will first of all
20:53 - it will search for the function scope
20:54 - value if you don't have any value in
20:57 - function scope it will search for global
20:58 - scope value
20:59 - then it will print right so this is very
21:02 - important so in the next video we will
21:03 - see the types of stories classes and
21:05 - i'll see you the next video until then
21:06 - bye take care

Cleaned transcript:

so there is one more concept left in c language that is storage classes in c but this is different from c plus plus concept class object concept and this is different storage classes in c so in this video we'll talk about everything about storage classes what is storage class types of storage class properties how to use storage classes in your program why we use it if you use storage classes class in your program then you know how to use it and what it will tell about our program right everything all this now every single detail about this thing will discuss in this video with the help of a program also right i'll show you practical but before that i just want to tell you one thing this summer geeks4geeks is going to bring back fun to your screens with the biggest virtual event in 2022 presenting geek's summer carnival so experience fun excitement entertainment and games and also get loads of discount goodies and various other cool stuff to relish this carnival in its truest form geeks for geeks is inviting you to experience starters before the main course starting from 26th of march there are going to be various tickets that definitely you don't want to miss out with these tickets you get the best of the courses at the best prices so let me share some more details about the same one ticket is of rupees 2000 and what benefits you will get here doubt assistance for three months plus premium quarterly with this ticket and you will get dsa at the lowest price ever second is of 5000 and here you will get doubt assistance for six months plus premium plus quarterly and your ticket to get one of the best gfg score cip at a huge discount next is of 8 000 rupees and in this what benefit you will get premium plus yearly plus goodies tshirt pen mask stickers kitchen and much more so it would be easy and budget friendly entry to any of the live courses of gfg and here you will also have a chance of wall of wishes like you can wish for any course fill out the detail and you can send requests if you want to you know explore more if you have any you know a question then you can go to the faq section frequently asked question and you can see the answer of these questions maybe you'll get the you know answer of your question so this summer carnival is all about enhancing your skills so definitely you don't want to miss out an opportunity like this so all the links relevant links and details i'll put in the description box of this video you can go and check out now let's see what is stories classes and see see when we declare any variable in c how we declare like int a something like this and if you initialize this variable like this a is equal to 10 then what this line tells about this variable like name of the variable is a value what you are going to store is 10 and which type of value the type the data type this thing this is type of the value you can store in this variable three things it is going to tell right so basically a variable now next thing is see a variable is associated with basically two things one is type and one is storage class so this type means the data type this thing it will tell the you know type of the what type of value you can store at the data right obviously name this will tell right now what is this storage class now another things associated with this type of this variable is what like if i don't i'll not initialize this thing into a then first thing is what default value it will take right some other things or some other points which are associated with this variable right next is what location where this variable would be stored in ram or in register yes you heard it right we can also store variables in register no not we can store it depends on the compiler right that also i'll tell you so third thing is you can say the scope of the variable we have heard about local scope global scope right where you can access scope means where you can access this v this variable from where this variable can be accessed the scope right next thing is what you can say the lifetime lifetime means till when you it's like till when this variable is alive like within a function suppose i'm writing a function 1 1 and here i'm declaring a variable in x is equal to 10 and this is end of this function so the lifetime of this variable is till here till this line till the termination of this function after this you can say this variable is dead this variable is alive till here we can access this variable throughout this function but after this it is dead so this is you can say the life of this variable right now what thing will tell these properties of this variable because this end will tell only the type which type of value it can store right so what extra thing which is associated with this variable will tell about these things like the default value of this is what where this variable would be stored the scope and the lifetime these things would be told up by the storage classes yes and where you will write stories class here before the time now we have four type of stories classes see koto resistor extern and static right and these storage classes will tell these things about this variable right now see we have done many programs we have written many programs till now but we haven't used these kind of things right so our program were right so by default if you will not write anything here by default compiler will associate a storage class with it that is o2 this by default so if you don't write anything this is fine if you write something like this auto int b this is also fine this is also would be considered under the storage class auto this will also be considered under storage class o2 so explicitly if you write this keyword that is also fine if you don't write that would be considered in auto storage class right now now see i hope you aware about these these things default value like if you don't declare this thing if you don't initialize this thing so sometimes it will take 0 default value sometimes this will take garbage default value right when you print this so it depends on these storage classes which storage class you write here according to that it will take default value so i guess you do not have any uh confusion and default value location means where we are going to store this in register or in uh like ram main memory now scope is one where you can access this now scope is also for you can say mainly three types block block function and one is function or you can say method or one is program three type of scope a variable can have depends on the storage class you use how to use that also discuss right and which storage class is having which scope that is that also we will use but first of all you need to understand what is block scope what is function and what is program scope this is very important first of all otherwise many students get confused in this scope especially in this point right and life time also i guess you have idea like till when we can access that variable one variable like global where we are we declare a variable globally then you can access that variable till the end of the program right so this is what you can say life of variable basically scope is you need to understand now block means what something you write within these curly braces that would be considered as block function you know any function we can write like void add this and this this is function scope this is what function right you are defining this function so this is block anything which is in curly braces this would be considered as block it's not compulsive that we write this thing after the function only in programming anywhere we can define a block let me just show you one example of this these three things let me show you example one by one see i am writing a simple program here see in main first of all i am taking a variable into a is equal to ten then this then here i am taking int a again is equal to 20 and printf so this would be what i am considering inside block and i am printing this value of a and after this also i am printing value printf percentage d a so this would be considered as this is what block so this variable this a this this is not duplicate thing because this is yeah this is what functions go this is main function so main function scope is from here to here this is function scope within this functions for we have a block also so this this a is having this block scope within this block only we can use this a so what it will print inside block and this a it will print 20 the value right it will not take this one the print of this statement this would take value which is closer which is you know close to this a now close to the size they say or the same this value right so it will print 20 within this block and this printf this a will print what after this block this a the life of the says no it is dead you can see we cannot access this a this value 20 outside this block so outside this block this is this printf is within this function so in this function we have do we have declaration of a yes a is equal to 10 definition you can say this 10 value so it will print 10. so this is this is having this function scope this is having this block score right again if i write one more function like void fun so this a is having this function scope this is what function scope this is function so this is function scopes this a we can use throughout this function so this a will print 30 right now again suppose here i'm here i'm writing one more block after this block one more block and in this block i am just writing printf percentage d and a plus plus that's it and after this again printf percentage d a and after this line i am closing main function after writing return 0 right and within this function i have this thing and one more i have before this main end a is equal to 50 this i am taking after the header files so this a is outside of this function so this a is having program scope throughout the program where you can access this throughout the program you can access this right now see this time what output you will get this is one block this is second block we have now block one and block two so this will give 20 right but in this block we are not declaring any variable a but i am printing a plus plus so it will not give error what it will do now this block is within this function within this function so within this block no a can we use can this we can use value of this block no the 20 would be within this block only after that it would be dead now which a value it will print which is closer to a now this value so it will take this value though in which function this block is main function in main function do we have any definition of the say this variable a yes we have a and it will take value 10 so now it will print 10 and a plus plus means now value becomes 11 now after this block again we have a so obviously this is in in this function so it will print 11 it will print 11 now and in this function obviously this function we are going to call suppose here i am going to call this function fun that's it so we are calling this function within this function do we have a yes 30 we have so it will print 30. if we don't have this line here i am just calling function here so first a value 30 you will get 30 after that within this block yes 20 you will get after this now what value it will get there is no declaration within this block now in this function also main also we have no declaration of a now see it will check globally do we have any a value yes we have a is equal to 50 globally so it will access that value so it will print now 50 and a plus plus means this value now becomes 51 in memory and again it will print in this function we don't have any a from this function it cannot use the value so what value it can use if we have any global declaration of a that value it can use do we have yes we have that is 51 so it will print now 51 right if we have suppose in a also and b also b is equal to 10 so within this function obviously we can print percentage d b so it will print 10 but in this in this main function if i want to print like printf percentage d and b this line will give error because this b is undefined undeclared variable for this function this b is having a function scope within this function only after this function this b is dead we cannot access this b on in another function if we have any global b is equal to ah suppose hundred then it will print hundred then it is fine but this b within this function b value would be 10 and this b would be print would be taken as the global value so i hope now you understand the block scope the function scope and the program scope right so now let me show you practical of this thing see we have this program first of all i'm not going to take this global one we are taking in in main i'm taking a variable a i'm resizing it with one and i'm taking a function function one i'm calling that function here in function one the definition is a right now within this we haven't blocked this this block within this block also i have one a value is done 10 and i'm printing the just a value second block i'm just printing a plus plus no declaration of a and after this block also i'm going to print percentage d and a right and let's suppose here we write inside main this is inside block one and here i'm writing inside block 2 this is block 2 right and i'm just printing a in function 1 also i'm printing a so let me just show you the output here no global variable i'm declaring right i am just taking the blog scope and function scope variable of a fine now see okay this warning we are getting because before calling we haven't declared we haven't give the prototype of this function so let me just leave the prototype here void one one that's it right and now let me just run this again and show you that see now let's see what output you are getting here first of all inside function 1 we are calling function 1 and it is printing 23 we have 23 in function 1 then inside block 1 we will get value 10 value 10 now inside block 2 which value we don't have any declaration of a so in function yeah this block is within main function in main function we have value 1 so it will print inside block 2 1 not 21 its value is 1 2 is of block 2 right now this this a will print one now a plus plus means this value one becomes two now this printf this printer will be uh print value inside main and value two i hope now you are clear about this uh scope let me just inside block two right and now we are not taking this one we are taking a global way right now let's see what output you will get let me just run this again see first same inside function 123 inside block 1 10 inside block 2 now which value the global one we don't have any value in this function so so it will search for the global value global value you do we have yes a is equal to 50 so it will print 50 and inside main this also will access this global value because we don't have any value of a within this main function so 51 right now if in this we have in a as well as we have b is equal to 89. so i hope now all the properties of this like default and whatever properties storage class will tell default value storage uh like the location and the scope and lifetime is clear to you right basically scope is clear to you blog function and this global scope i guess you will not be confused in this type of thing now right sometimes they ask an interview also there's these type of questions within this block also they write this thing within this block they'll read this thing but they'll not declare anything here so what value it will print whether it will first of all it will search for the function scope value if you don't have any value in function scope it will search for global scope value then it will print right so this is very important so in the next video we will see the types of stories classes and i'll see you the next video until then bye take care
