With timestamps:

00:00 - in the series of learning programming in
00:01 - c we are discussing about operators in c
00:03 - in the previous studio i have discussed
00:04 - some bitwise operators three bitwise
00:06 - operators bitwise and bitwiser and
00:08 - bitwise xor operator with the help of
00:10 - proper example so in this video i am
00:11 - going to discuss the remaining bitwise
00:13 - operators that is left shift right shift
00:15 - and bitwise not and bitwise note is also
00:17 - known as one's complement right so we'll
00:19 - be discussing these remaining bitwise
00:21 - operators with the help of proper
00:22 - example and after discussion on these
00:24 - operators i'll be telling you some short
00:26 - trick also like if in a program or if in
00:29 - a code the bitwise operators are given
00:31 - and you are supposed to tell the output
00:33 - send then directly by using that short
00:36 - break you can tell the output of that
00:38 - code right everything will be discussing
00:41 - in this video now so now let us discuss
00:43 - the remaining operators
00:45 - one we have left shift we have right
00:47 - shift and this one is tilt sign this one
00:49 - is bitwise not operator so first let us
00:52 - discuss this
00:53 - left shift operator don't confuse don't
00:55 - get confused in this left shift and
00:57 - right shift see
00:58 - if it is like it is you know right like
01:01 - this this and this so it is left shift
01:03 - this is
01:04 - e this side so it is for right shifting
01:07 - right so this operator is binary
01:09 - operator and if this operator is used to
01:12 - shift the number the given number to
01:14 - left side
01:16 - now what is the syntax of this operator
01:18 - this side we have first operand or you
01:21 - can say variable
01:23 - and the operator and after that you have
01:26 - second operand or the number maybe
01:28 - suppose i am writing here 2
01:32 - so
01:32 - this is first operand this is second
01:34 - operand
01:36 - first operand
01:37 - is what you have to shift this variable
01:40 - or you you can say you have to shift
01:41 - this number you have to shift this
01:43 - operand
01:44 - by how many bits
01:46 - that the second operand will tell you by
01:49 - two bits you have to shift this variable
01:51 - this number
01:52 - and to the side left side or here rather
01:56 - than variable see suppose i am taking
01:58 - this example int
01:59 - a is equal to 10 and i am writing here a
02:02 - left shift
02:04 - 2
02:05 - and i am storing suppose this value in c
02:08 - or b
02:09 - now what output you will get what value
02:11 - would be stored in c so now check the
02:14 - functioning of this left shift operator
02:16 - see the value is 10
02:20 - so bitwise operators always manipulate
02:22 - the data always operate at bit level
02:26 - it is byte
02:28 - all the other operators operates at byte
02:31 - level and this operator
02:34 - manipulate the data or perform the
02:35 - operations at bit level so first of all
02:37 - convert this this is decimal to convert
02:39 - this into binary form i am using eight
02:42 - bit representation right so now
02:52 - the binary form of this 10 is what
02:55 - we have 1 0 1 0 i hope you know
02:59 - how to convert a decimal number to 2
03:01 - binary number the shortcut is you can
03:02 - write down here 1 2 4 8 16
03:08 - 32 64 128
03:10 - and i am placing 1 and 1 here because 8
03:13 - plus 2 is 10 so this is binary form of
03:16 - 10 right
03:17 - now
03:18 - if suppose number is
03:20 - 11 then where you will put 1 here 1 here
03:23 - 1 as well as here 1 8 plus 2 is 10 plus
03:26 - 1 is 11
03:27 - right this is shortcut
03:29 - so now you have to shift this number
03:32 - by
03:33 - two bits
03:35 - left shift means this side so now after
03:38 - left shifting
03:39 - the number would become something like
03:41 - this
03:43 - this side left shift you have to shift
03:45 - this means one and two two bits would be
03:48 - discarded
03:49 - right now this
03:51 - bit would be at this place this would be
03:53 - shifted to this
03:55 - like this
04:07 - and now these two places are remaining
04:10 - blank because we have discarded two bits
04:12 - from the left
04:13 - now at this places the trailing
04:17 - places the trailing bits would be filled
04:19 - with zero
04:21 - zero and zero it's not like that we are
04:24 - filling these zero and zero here no
04:27 - these bits are discarded no use of these
04:30 - bits just fill the remaining the
04:32 - trailing places the trailing bits with
04:34 - 0. now this is the new number now
04:36 - convert this into decimal what output
04:38 - you will get this is binary form right
04:41 - now the decimal form of this one
04:43 - we have one
04:44 - at this place eight and we have one at
04:47 - this place thirty two thirty two plus
04:48 - eight is
04:49 - forty so this number is forty when you
04:51 - convert this into my uh decimal that you
04:54 - will get forty so now in c what value
04:56 - would be stored 40 so if you will print
04:59 - c then you will get 40
05:01 - right
05:02 - now and if you print a also then after
05:03 - that a has also updated and that is also
05:06 - 40 or you can tell me if i am wrong
05:09 - just
05:10 - write down a simple program take a
05:11 - variable left shift this print both c
05:13 - and a what output you will get you can
05:15 - tell me in comment box right so this is
05:17 - functioning of left shift operator i
05:19 - hope you got it suppose i shift this one
05:22 - by four
05:25 - a left shift four
05:27 - now what you will get four bits would be
05:29 - shifted to left
05:34 - these four bit one two three four these
05:36 - bits would be discarded now this 1 would
05:38 - be at this place 1 0 1 0 the remaining
05:42 - bits the trailing bits should be filled
05:44 - with 0 0 0
05:46 - right now what is the decimal number of
05:49 - this one
05:50 - we have one at 128 and we have one at
05:55 - where 32 so just add these numbers
06:00 - this is i guess 1 6 160 so the output
06:03 - would be 160 the decimal one number
06:05 - corresponding to this is 160.
06:07 - now this is the processor long processor
06:09 - now what is the shortcut
06:11 - if
06:12 - without look without converting it into
06:14 - binary and without shifting how you can
06:16 - tell see
06:17 - if a left shift 4 then final output you
06:21 - will get is what the number a just take
06:24 - the number that is 10
06:26 - into
06:28 - 2 raised to power
06:30 - the right operand this is left operand
06:31 - to this operator this is right operand
06:34 - so here at in right operand we have what
06:36 - 4 2 raise to the power 4
06:39 - now 10 into 2 raise to power 4 is
06:42 - 16 so that is what 160 and that that's
06:45 - it we got 160. so this is shortcut if
06:49 - you write here
06:51 - 2
06:52 - what output you will get without looking
06:53 - at this one a is 10
06:56 - into 2 raised to power
06:58 - 2 10 into 4 that is 40 and the same
07:01 - output we got 40. so this is short short
07:04 - trick to find out the answer to to find
07:07 - out the output right without
07:10 - following the proper processor now what
07:12 - about left sorry right shift operator
07:14 - this is used to shift the number by two
07:17 - right side so this is this one it is
07:20 - also having two operand one is this one
07:22 - one is this one this is the number you
07:24 - have to shift this is by how many bits
07:26 - you have to shift that number so suppose
07:28 - i'm taking same example a is 10 binary
07:30 - value of a is this one i am going to
07:33 - do what right shift of this by 2
07:37 - now what is the processor c
07:42 - right shift this number means this side
07:46 - you have to shift this side so now two
07:48 - bits
07:50 - one and two these two bits would be
07:52 - discarded
07:53 - now this bit would be at this place
07:57 - and now here we have blank spaces so in
07:59 - this case
08:01 - the leading uh space the leading places
08:04 - would be filled with zero same here
08:07 - zero
08:08 - it's not like that we discard it and
08:10 - this would be at this side we discard it
08:12 - or you can say we we ah remove this this
08:15 - bit from here and we place it here no
08:17 - these bits should be discarded two bits
08:19 - and we place
08:20 - new bits that is zero we fill this
08:22 - remaining space the blank
08:24 - space with zeros now see
08:27 - what is decimal form of this one we have
08:29 - one at what place this is what two
08:32 - so the decimal form of this is two now
08:35 - suppose if you shift it by four
08:37 - right shift by four then what value you
08:39 - will get
08:40 - this number by four one two three four
08:43 - these four bits would be discarded
08:45 - now these bits would be shifted like
08:47 - this zero zero zero zero and that the
08:50 - remaining places will fill
08:52 - zero
08:53 - so what is decimal form of this one 0
08:55 - because we have no 1
08:57 - no 1 here so that is 0 output would be
09:00 - 0. now let us discuss the shortcut to
09:03 - find out the shift and the result after
09:05 - the shift operator without following the
09:07 - proper processor see the number is a
09:10 - that is 10
09:12 - if you right shift this one then you
09:14 - divide this in left shift you multiply
09:17 - this number the given number so 10
09:19 - divided by 2 raised to power
09:22 - how many bits are there 2 raise to power
09:24 - 4
09:25 - so 10 divided by 16 so definitely the
09:27 - output would be 0 0 point something so
09:30 - it will take it will remove that
09:32 - fractional part it will take only
09:34 - decimal value if i write here that's
09:36 - what exactly you got 2
09:38 - now if you write here 2 then what out
09:40 - you will get 10 divided by 2 raised to
09:42 - the power 2 10 divided by 4 that is we
09:44 - get
09:45 - 2
09:46 - 2 point something but it will remove
09:48 - that
09:49 - fractional part it will give you what
09:50 - that decimal value and exactly we got
09:53 - two
09:54 - so this is what shortcuts so i hope you
09:57 - got water left shift and right shift
09:58 - operator and you can tell the output by
10:01 - using the short short trick now what
10:03 - about this logical not operator so this
10:05 - operator will use to find out you can
10:06 - see the ones complement of the number or
10:09 - this will invert the bits in what the
10:11 - bits mean if the bit is zero original
10:13 - bit is zero after applying this operator
10:15 - that
10:16 - will become 1 if the original bit is 1
10:18 - after applying this operation that
10:19 - become
10:20 - 0 see let us take one example
10:23 - if i write here
10:25 - that number 5
10:28 - right
10:29 - and or you can say int
10:31 - a is equal to 5 and i am storing b is
10:34 - equal to
10:35 - bitwise not a now what output would you
10:38 - you will get means what is the value of
10:40 - b now see
10:42 - first of all convert this into binary
10:43 - the binary number is this one 1 zero one
10:46 - i am using four bits for this five
10:49 - because remaining would be zero zero so
10:51 - one two four eight four plus one is five
10:53 - so this is what binary number of five
10:56 - now bit wise not of a
10:58 - so the bits would be converted inverted
11:00 - means 1 becomes 0 this becomes 1 this
11:03 - becomes 0 this becomes
11:05 - 1
11:07 - right so this is what
11:09 - binary number of
11:12 - 10. so this is when you apply a bit wise
11:16 - not then this output you will get or
11:18 - when you will run this one into computer
11:20 - then
11:21 - you will get a negative number
11:24 - means you will get a two's complement
11:26 - number here negative numbers in computer
11:28 - negative numbers are stored
11:30 - uh using three methods we can show
11:32 - negative numbers sign magnitude one's
11:33 - complement and two's complement but in
11:35 - sign magnitude and one's complement here
11:37 - there are some drawbacks that is why
11:39 - uh the standard method to represent to
11:42 - store negative numbers in computer
11:43 - memory is two's complement that maybe we
11:46 - will be discussing in some separate
11:47 - video that is a complete chapter right
11:51 - now what output you will get when you
11:53 - run this statement into your computer
11:55 - you will get what
11:57 - ah that negative number
11:59 - now see negative number what you will
12:01 - get
12:02 - see this is the number suppose a
12:04 - and when you apply negation of a then
12:07 - shortcut is what how you will get minus
12:11 - a plus 1
12:12 - just simply do this thing and you will
12:14 - get that answer means minus a is what 5
12:17 - 5 5 plus 1 is 6 that minus 6 you will
12:19 - get so according to the logic of bitwise
12:22 - not operator this is also right you will
12:23 - get this one but in computer memory you
12:25 - will get this one in two's complement
12:27 - form so that is also fine
12:29 - now suppose a is 10
12:32 - and so negation of a would become minus
12:35 - 10 plus 1 that is minus 11 you will get
12:39 - right so i hope directly you can tell
12:41 - the output if this this is given so now
12:43 - minus 10 would be stored in b fine
12:46 - now this is what about bit wise not
12:48 - operator and see bit wise
12:50 - it's not like that you can only use
12:52 - variable here you can also write simply
12:54 - negation of 5
12:56 - then also you'll get same output
12:58 - negation of 10 you can also use a
12:59 - constant that is also fine
13:02 - right
13:03 - and
13:04 - suppose if you use in that left shift
13:06 - and right shift also you can write down
13:08 - 5 left shift 1 that is also fine means
13:12 - here please don't get confused this is
13:15 - what the number you have to shift means
13:17 - 5 need to be converted into binary and
13:19 - that number need to shift by how many
13:21 - bits that will tell the right operand by
13:24 - one bit or you can write down like 10 10
13:27 - right shift 2 this is also fine you can
13:29 - also use constant instead of variables
13:33 - or here also you can use some that
13:35 - arithmetic
13:37 - operations or
13:38 - ah let us suppose if i write like this
13:42 - a is 10 suppose a is 10 i am writing a
13:44 - plus 1
13:47 - left shift
13:48 - 2 and i am writing
13:50 - a plus
13:51 - 2
13:53 - right shift
13:54 - 1 or i am writing negation of a plus
13:58 - 3
13:59 - now tell me what
14:00 - you can tell me in comment box what
14:01 - would be output of these things
14:04 - or maybe
14:05 - there are some errors like you cannot
14:07 - use these kind of things in these
14:08 - operators then also you can tell me
14:10 - right so you have to execute these
14:12 - statements fine so now this is all about
14:15 - bitwise operators i mean
14:17 - i just want to give you the overview the
14:19 - functioning of these operators will be
14:21 - discussing in separate video maybe some
14:23 - technical type of questions that could
14:25 - be asked on these operators some twisted
14:27 - type of questions
14:29 - right so now that's it for this video
14:32 - now in next video i'll be discussing
14:34 - about some special operators in c so now
14:36 - i'll see in the next video till then bye
18:19 - you

Cleaned transcript:

in the series of learning programming in c we are discussing about operators in c in the previous studio i have discussed some bitwise operators three bitwise operators bitwise and bitwiser and bitwise xor operator with the help of proper example so in this video i am going to discuss the remaining bitwise operators that is left shift right shift and bitwise not and bitwise note is also known as one's complement right so we'll be discussing these remaining bitwise operators with the help of proper example and after discussion on these operators i'll be telling you some short trick also like if in a program or if in a code the bitwise operators are given and you are supposed to tell the output send then directly by using that short break you can tell the output of that code right everything will be discussing in this video now so now let us discuss the remaining operators one we have left shift we have right shift and this one is tilt sign this one is bitwise not operator so first let us discuss this left shift operator don't confuse don't get confused in this left shift and right shift see if it is like it is you know right like this this and this so it is left shift this is e this side so it is for right shifting right so this operator is binary operator and if this operator is used to shift the number the given number to left side now what is the syntax of this operator this side we have first operand or you can say variable and the operator and after that you have second operand or the number maybe suppose i am writing here 2 so this is first operand this is second operand first operand is what you have to shift this variable or you you can say you have to shift this number you have to shift this operand by how many bits that the second operand will tell you by two bits you have to shift this variable this number and to the side left side or here rather than variable see suppose i am taking this example int a is equal to 10 and i am writing here a left shift 2 and i am storing suppose this value in c or b now what output you will get what value would be stored in c so now check the functioning of this left shift operator see the value is 10 so bitwise operators always manipulate the data always operate at bit level it is byte all the other operators operates at byte level and this operator manipulate the data or perform the operations at bit level so first of all convert this this is decimal to convert this into binary form i am using eight bit representation right so now the binary form of this 10 is what we have 1 0 1 0 i hope you know how to convert a decimal number to 2 binary number the shortcut is you can write down here 1 2 4 8 16 32 64 128 and i am placing 1 and 1 here because 8 plus 2 is 10 so this is binary form of 10 right now if suppose number is 11 then where you will put 1 here 1 here 1 as well as here 1 8 plus 2 is 10 plus 1 is 11 right this is shortcut so now you have to shift this number by two bits left shift means this side so now after left shifting the number would become something like this this side left shift you have to shift this means one and two two bits would be discarded right now this bit would be at this place this would be shifted to this like this and now these two places are remaining blank because we have discarded two bits from the left now at this places the trailing places the trailing bits would be filled with zero zero and zero it's not like that we are filling these zero and zero here no these bits are discarded no use of these bits just fill the remaining the trailing places the trailing bits with 0. now this is the new number now convert this into decimal what output you will get this is binary form right now the decimal form of this one we have one at this place eight and we have one at this place thirty two thirty two plus eight is forty so this number is forty when you convert this into my uh decimal that you will get forty so now in c what value would be stored 40 so if you will print c then you will get 40 right now and if you print a also then after that a has also updated and that is also 40 or you can tell me if i am wrong just write down a simple program take a variable left shift this print both c and a what output you will get you can tell me in comment box right so this is functioning of left shift operator i hope you got it suppose i shift this one by four a left shift four now what you will get four bits would be shifted to left these four bit one two three four these bits would be discarded now this 1 would be at this place 1 0 1 0 the remaining bits the trailing bits should be filled with 0 0 0 right now what is the decimal number of this one we have one at 128 and we have one at where 32 so just add these numbers this is i guess 1 6 160 so the output would be 160 the decimal one number corresponding to this is 160. now this is the processor long processor now what is the shortcut if without look without converting it into binary and without shifting how you can tell see if a left shift 4 then final output you will get is what the number a just take the number that is 10 into 2 raised to power the right operand this is left operand to this operator this is right operand so here at in right operand we have what 4 2 raise to the power 4 now 10 into 2 raise to power 4 is 16 so that is what 160 and that that's it we got 160. so this is shortcut if you write here 2 what output you will get without looking at this one a is 10 into 2 raised to power 2 10 into 4 that is 40 and the same output we got 40. so this is short short trick to find out the answer to to find out the output right without following the proper processor now what about left sorry right shift operator this is used to shift the number by two right side so this is this one it is also having two operand one is this one one is this one this is the number you have to shift this is by how many bits you have to shift that number so suppose i'm taking same example a is 10 binary value of a is this one i am going to do what right shift of this by 2 now what is the processor c right shift this number means this side you have to shift this side so now two bits one and two these two bits would be discarded now this bit would be at this place and now here we have blank spaces so in this case the leading uh space the leading places would be filled with zero same here zero it's not like that we discard it and this would be at this side we discard it or you can say we we ah remove this this bit from here and we place it here no these bits should be discarded two bits and we place new bits that is zero we fill this remaining space the blank space with zeros now see what is decimal form of this one we have one at what place this is what two so the decimal form of this is two now suppose if you shift it by four right shift by four then what value you will get this number by four one two three four these four bits would be discarded now these bits would be shifted like this zero zero zero zero and that the remaining places will fill zero so what is decimal form of this one 0 because we have no 1 no 1 here so that is 0 output would be 0. now let us discuss the shortcut to find out the shift and the result after the shift operator without following the proper processor see the number is a that is 10 if you right shift this one then you divide this in left shift you multiply this number the given number so 10 divided by 2 raised to power how many bits are there 2 raise to power 4 so 10 divided by 16 so definitely the output would be 0 0 point something so it will take it will remove that fractional part it will take only decimal value if i write here that's what exactly you got 2 now if you write here 2 then what out you will get 10 divided by 2 raised to the power 2 10 divided by 4 that is we get 2 2 point something but it will remove that fractional part it will give you what that decimal value and exactly we got two so this is what shortcuts so i hope you got water left shift and right shift operator and you can tell the output by using the short short trick now what about this logical not operator so this operator will use to find out you can see the ones complement of the number or this will invert the bits in what the bits mean if the bit is zero original bit is zero after applying this operator that will become 1 if the original bit is 1 after applying this operation that become 0 see let us take one example if i write here that number 5 right and or you can say int a is equal to 5 and i am storing b is equal to bitwise not a now what output would you you will get means what is the value of b now see first of all convert this into binary the binary number is this one 1 zero one i am using four bits for this five because remaining would be zero zero so one two four eight four plus one is five so this is what binary number of five now bit wise not of a so the bits would be converted inverted means 1 becomes 0 this becomes 1 this becomes 0 this becomes 1 right so this is what binary number of 10. so this is when you apply a bit wise not then this output you will get or when you will run this one into computer then you will get a negative number means you will get a two's complement number here negative numbers in computer negative numbers are stored uh using three methods we can show negative numbers sign magnitude one's complement and two's complement but in sign magnitude and one's complement here there are some drawbacks that is why uh the standard method to represent to store negative numbers in computer memory is two's complement that maybe we will be discussing in some separate video that is a complete chapter right now what output you will get when you run this statement into your computer you will get what ah that negative number now see negative number what you will get see this is the number suppose a and when you apply negation of a then shortcut is what how you will get minus a plus 1 just simply do this thing and you will get that answer means minus a is what 5 5 5 plus 1 is 6 that minus 6 you will get so according to the logic of bitwise not operator this is also right you will get this one but in computer memory you will get this one in two's complement form so that is also fine now suppose a is 10 and so negation of a would become minus 10 plus 1 that is minus 11 you will get right so i hope directly you can tell the output if this this is given so now minus 10 would be stored in b fine now this is what about bit wise not operator and see bit wise it's not like that you can only use variable here you can also write simply negation of 5 then also you'll get same output negation of 10 you can also use a constant that is also fine right and suppose if you use in that left shift and right shift also you can write down 5 left shift 1 that is also fine means here please don't get confused this is what the number you have to shift means 5 need to be converted into binary and that number need to shift by how many bits that will tell the right operand by one bit or you can write down like 10 10 right shift 2 this is also fine you can also use constant instead of variables or here also you can use some that arithmetic operations or ah let us suppose if i write like this a is 10 suppose a is 10 i am writing a plus 1 left shift 2 and i am writing a plus 2 right shift 1 or i am writing negation of a plus 3 now tell me what you can tell me in comment box what would be output of these things or maybe there are some errors like you cannot use these kind of things in these operators then also you can tell me right so you have to execute these statements fine so now this is all about bitwise operators i mean i just want to give you the overview the functioning of these operators will be discussing in separate video maybe some technical type of questions that could be asked on these operators some twisted type of questions right so now that's it for this video now in next video i'll be discussing about some special operators in c so now i'll see in the next video till then bye you
