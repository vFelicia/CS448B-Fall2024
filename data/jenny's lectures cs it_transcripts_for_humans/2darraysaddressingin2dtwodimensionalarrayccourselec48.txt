With timestamps:

00:00 - hey everyone I hope you are safe and
00:01 - doing good so in the series of learning
00:03 - C++ programming language we are
00:05 - discussing 2D arrays in the previous
00:07 - video we have seen memory representation
00:09 - of FD aray and how to access elements
00:11 - from 2D aray right two technique for
00:13 - memory representation row measure and
00:16 - colum right and using index just provide
00:19 - row index and column index and you can
00:20 - access elements right but what is
00:23 - happening behind the
00:24 - scene like when uh you say how the
00:26 - memory is to be allocated to those
00:28 - elements means
00:30 - addressing addressing of 2D array
00:33 - elements how this is to be done how the
00:35 - address is to be calculated like which
00:37 - element is stored on which address right
00:42 - this is known as like addressing of
00:44 - elements so this thing we'll see in this
00:46 - video right addressing in 2D array okay
00:50 - let's take that simple example first
00:53 - let's take this is a 2d array three into
00:55 - three array three column and uh three
00:58 - rows number of rows number of columns so
01:01 - this is how we I'm going to initialize
01:03 - this thing first row second row third
01:06 - row right in first row only two elements
01:08 - I have given in second row three
01:09 - elements third row three elements right
01:11 - so if you visualize this thing then how
01:15 - we are going to store in the form of
01:18 - like a matrix First Row 1 and 10 and the
01:23 - remaining element is by default 0o -1 9
01:26 - 5 2 70 and 22 this this is three into
01:30 - three Matrix three rows and three
01:32 - columns right number of rows number of
01:34 - columns index We Know by default start
01:35 - from 0o so 0 1 2 for column also 0 1 2
01:39 - index would start from zero
01:42 - right so this is the case but how now
01:46 - the addressing is to be done suppose The
01:47 - Base address is memory manager has
01:50 - allocated Base address is 100 we are
01:52 - taking simple address right we are just
01:55 - supposing that Base address is 100
01:57 - actually it is in hexadecimal form
02:00 - right so how this is to be stored in
02:03 - memory like this there are two
02:06 - representation memory represent
02:07 - representation row measure and column
02:09 - measure by default 2D arrays are stored
02:11 - in memory with row measure
02:13 - representation so both the things
02:14 - addressing in both the cases we will
02:16 - discuss there are two formulas so first
02:18 - we are checking row measor
02:20 - representation right so we are supposing
02:22 - this array has been stored in row
02:24 - measure cering in memory so first row
02:27 - second row third row like this so first
02:30 - the all the element of first row then
02:33 - second row then all the element of third
02:37 - row this is the case and suppose Base
02:39 - address is
02:41 - 100 right so how now the address is to
02:44 - be calculated calculated like for all
02:46 - the elements like for minus one for
02:48 - minus one what should be the address so
02:50 - like this we know every element is
02:53 - taking four bytes integer is taking four
02:55 - bytes so for next element it is 104 108
02:59 - and so on
03:00 - so how many total bites would be
03:01 - allocated how many elements are there
03:03 - number of rows into number of columns 3
03:06 - into 3 that is 9 and one element each
03:08 - element is taking 4 by in memory into
03:10 - four that is 36 by would be allocated
03:13 - right but now how actually this
03:15 - addressing is to be done there is a
03:17 - Formula how the address is to be
03:19 - calculated right now let's take we have
03:22 - example of uh this element n so index of
03:27 - this is if I say a of first row number
03:30 - is one and column number is 1 so a11 a11
03:35 - will give you nine first this row and
03:39 - this column right by default index is
03:41 - from 0 to
03:43 - zero but how this address is to be
03:45 - calculated the address of this N9 is
03:47 - 116 right there is a Formula see you
03:51 - know the Base address you know from
03:53 - where to start from 100 right so in Base
03:57 - address what you are going to add
04:00 - Base address plus suppose here we I'm
04:04 - taking i j for general formula we are
04:06 - calculating right I index J index I for
04:10 - row J for column Base address plus now
04:13 - what how many bytes to be added like
04:16 - Base address 100 plus we will add here
04:18 - 16 by so 100 + 16 116 so address of 9
04:22 - would be for 1 one would be 116 but how
04:25 - this number of B would be calculated see
04:29 - obviously see first we are in this row
04:32 - so how many rows before this row our
04:35 - actual element is nine so how many rows
04:37 - before this row it is first row so one
04:41 - row right so how many rows this have to
04:45 - be
04:46 - calculated I'm taking example of
04:49 - a11 so this thing this I will give the
04:53 - number of rows before the actual row
04:56 - because our element the actual Row in
04:59 - which our element is that is this row so
05:00 - before this we have one row so this I
05:03 - value will give this thing right if I
05:07 - take this example a of 2 and
05:10 - 1 so how many elements from how many
05:13 - rows before this Row one two from where
05:16 - we'll get this idea how many R obviously
05:19 - from the I value whatever we have given
05:21 - the I value right so I now
05:25 - into in each row how many elements in
05:29 - each row how many elements means how
05:32 - many columns what it will from where we
05:35 - will get this value how many number of
05:38 - columns are there in your 2D array and
05:42 - number of rows number of columns suppose
05:43 - I'm taking this value m and n m isal 3 n
05:47 - isal 3 m means number of rows N means
05:50 - number of columns right so I into how
05:53 - many number of columns in each or how
05:56 - many number of elements in each row
05:58 - equal to how many the number of columns
05:59 - number of
06:01 - columns we will take from this variable
06:03 - n so I into n right now
06:09 - plus plus suppose I'm taking this value
06:13 - a11 9 so now we are in the actual Row in
06:16 - which our element is but before this
06:18 - element how many elements are there
06:19 - before this element how many elements in
06:22 - this
06:23 - Row from where we will get this value
06:26 - here before this we have one element so
06:29 - from
06:30 - JF value from JF value we will get this
06:33 - idea right before this how many elements
06:36 - we have only one so on plus
06:40 - J it's not in right it's plus J because
06:46 - if we take this suppose this example one
06:49 - and two so number of rows only one
06:53 - right so 4 by for this 4 by for this 4
06:57 - by for this right now before for this
06:59 - how many elements how many elements that
07:02 - just we are going to add not into right
07:05 - so plus J value is two so only two
07:08 - elements so J value will give this idea
07:10 - plus J and whatever this thing that
07:13 - number of byes will add into Base
07:15 - address so this is the simple formula
07:19 - okay uh there is something missing into
07:23 - obviously in two you have to calculate
07:25 - number of bytes these are the number of
07:27 - elements from the actual El element one
07:30 - element will take four bytes or the you
07:33 - can say the size of that
07:36 - particular you know one element in that
07:39 - particular ARR so into
07:41 - size these many number of bytes we are
07:44 - going to add in Base address and then
07:45 - we'll get the actual address of that
07:48 - particular element so this is the
07:49 - formula for row measure ordering to
07:52 - calculate address right if we take
07:55 - example of one one then Base address
07:56 - suppose 100 plus I value is 1 1 into
08:01 - number of columns three plus J value is
08:04 - also one into size is four byes so this
08:08 - would be 16 it would be 116 and yeah for
08:12 - a11 a11 is 9 and for 9 address is 116
08:17 - right actually this is not the complete
08:19 - formula this is the basic one
08:22 - right the variation of this formula also
08:25 - I'll discuss with the help of one
08:26 - example but first of all for that to
08:29 - understand that complex formula you have
08:31 - to understand this formula and why it's
08:34 - not like that just you know learn or
08:37 - just cram this formula it's not like
08:39 - ratification no that kind of thing you
08:42 - have to understand why we are doing I
08:45 - into n + J why right I hope you got this
08:49 - idea if not pause the video just you
08:53 - know rewind this watch it again before
08:56 - going you know for the second formula so
08:59 - I hope you got this
09:00 - thing now please calculate for this a 2
09:05 - and one and just you can just Che me
09:07 - comment section now this is for row
09:08 - measure now let's suppose second is
09:11 - column measure so in column measure what
09:15 - how to represent column wise First
09:18 - Column second column third column so
09:19 - First Column so 1 - 1 2 10 9 70 0 5 and
09:27 - 22 this is the case
09:29 - right so yeah in this case addressing is
09:32 - something different for 10 if you take
09:35 - here for 10 the address is 112 but in
09:38 - row measure the address for 10 was
09:42 - 104 right so now how thises addressing
09:45 - is to be done what is the formula in
09:47 - this case if you got this formula then
09:49 - it is very easy for you to get the
09:52 - second one for row measure I and J same
09:55 - in Base address what you are going to
09:58 - add so if you're taking this example
10:00 - suppose I'm taking this example this
10:02 - time a of 2 and 1 second row First
10:07 - Column right okay for 70 it's 120 but
10:11 - how to calculate in column measure for
10:14 - 70 so first in column baser we know
10:17 - First Column we are going to store first
10:19 - then this column so before this how many
10:21 - elements are there five elements so how
10:23 - to know that thing first for this column
10:27 - you know 70 is in this column First
10:30 - Column like the column having index
10:32 - first so before this how many columns we
10:35 - have right one column we have but from
10:39 - where we will get this
10:40 - idea from this thing I and J from J
10:44 - value J is because column Index right J
10:47 - is here one right so before this we have
10:51 - only obviously one column so this will
10:53 - you idea this thing so here J
10:56 - into now J into how many element in this
10:59 - column equal to obviously the number of
11:02 - rows so number of rows we'll get from M
11:05 - into M plus now in this particular
11:09 - column we are in that specified column
11:10 - how many elements before this element 1
11:12 - 2 from where you'll get this idea
11:16 - whatever the index for row two two right
11:19 - so from before this we have one two two
11:21 - element plus I into size I hope you got
11:26 - this formula also these are very simp
11:29 - simple if you're not getting please
11:31 - pause the video and watch it again
11:34 - before going to you know the complex
11:36 - formula right because it's very you know
11:39 - important to understand these two basic
11:42 - formulas right now if you calculate
11:44 - address of a to 1 a to 1 in column
11:49 - measure so 100 plus J value is 1 into M
11:53 - value is 3 plus I value is 2 into size
11:56 - is 4 so 100 plus
11:59 - it's 120 right so for 70 21 it's 120
12:05 - right and if suppose this is we are
12:09 - supposing this has been stored in row
12:12 - measure so in that case a 21 what should
12:15 - be
12:17 - the
12:19 - address in row measure this is the
12:21 - formula I into n i value is 2 2 into n
12:25 - is 3 + J J value is 1 into 4 is equal to
12:30 - 100 plus it is 128 so in row measure for
12:34 - the same 2 1 for 70 the address is 128
12:39 - in column measure it's 120 right I hope
12:42 - you're getting the difference and why
12:44 - these kind of difference okay so these
12:46 - are simple formula but one type of
12:49 - problem you will get in un University
12:52 - exam also in competitive exam also that
12:54 - is some kind of you know that is
12:56 - different thing here by default
12:59 - the
13:00 - lower limit of row is zero lower limit
13:03 - for column is zero index starting index
13:06 - is starting from zero right we know so
13:10 - that is why this is the simple formula
13:12 - but but if question is something like
13:15 - this this is the thing we are given an
13:18 - array and this kind of thing 10 do do do
13:22 - 30 55 do 75 Base address one20 size 4
13:26 - byes for one element you have to find
13:28 - out the address for this A5 and 68 now
13:33 - and the representation is row
13:37 - measure what you will do you simply put
13:40 - here something like this Base address is
13:43 - this I is 15 n
13:47 - is and number of uh columns how to
13:51 - calculate because a is something like
13:53 - this then size is given four so here the
13:56 - formula is something different here the
13:58 - case is is lower limit for row is given
14:01 - 10 and upper limit 30 means you can say
14:04 - the index right lower limit lower index
14:08 - of column is 55 and the last index for
14:13 - column is
14:14 - 75 index is not started from zero here
14:18 - so the situation is something like that
14:20 - so here this is the case index the lower
14:24 - index for RO is started from 10 to 30 55
14:28 - to 75 it's not from 0o 0 1 2 3 4 no
14:32 - there is something different so how to
14:34 - calculate M and N value number of rows
14:36 - and number of columns number of rows M
14:39 - are 30 - 10 obviously + 1 right so
14:44 - 21 you can calculate from 10 to 30 it
14:48 - would be 21 and N is 75 - 55 and + 1
14:54 - right so 21 number of rows number of
14:58 - columns are 2 21 right okay now
15:01 - formulize something different here a of
15:03 - I if you want to calculate your I value
15:06 - is 15 J value is 68 so same Base address
15:09 - would be same obviously plus now this
15:13 - would be something different okay it is
15:16 - row measure and 15th row this
15:19 - row and 68 column somewhere here 68
15:22 - column this here is some element
15:24 - addressing for this element right so how
15:27 - many rows before this row you have to
15:30 - calculate that according to the formula
15:33 - which value will give that I value but
15:36 - directly we cannot say I into n because
15:39 - I value is 15 but before this row how
15:42 - many actual how many rows 1 2 3 4 5 it's
15:45 - not 15 rows why so because the lower
15:49 - limit of index is 10 it's not zero so
15:53 - only five rows so how to calculate this
15:55 - thing 15 - 10 5 so the formula is here I
16:01 - minus the lower limit for row index l r
16:07 - lower limit for row right this not
16:10 - simply I
16:12 - into how many
16:15 - columns obviously how many like elements
16:18 - in these each row equal to number of
16:21 - columns so we'll do obviously into
16:23 - number of rows into in each in each how
16:26 - many elements are there right to
16:29 - calculate all the elements into n right
16:33 - okay this is the case but n n how to
16:36 - calculate I have told
16:41 - you upper limit for this column minus
16:44 - lower limit + one right that would be n
16:49 - right
16:52 - plus here we have J obviously from this
16:55 - before this now in in this particular we
16:57 - are now in this particular row so how
17:00 - many elements before this particular
17:02 - element plus how to calculate it's not
17:05 - like directly write down here J 68
17:07 - Element no there are not 68 element
17:09 - before this element because index is
17:11 - from 55 so I have to calculate how many
17:14 - actual elements before
17:16 - this J whatever the J value minus lower
17:20 - limit for the column lower limit for the
17:23 - column index means actually 65 8 - 55
17:27 - these many elements would be there
17:28 - before this element right so J minus LC
17:32 - into
17:33 - sides so in this case this type of
17:36 - formula would be used so actually if we
17:38 - say the complete formula for addressing
17:40 - is this one right in that formula we are
17:44 - not using LR and LC lower limit because
17:46 - lower limit is zero so it doesn't make
17:49 - any difference but if this is the case
17:52 - then you have to put the these lower
17:53 - limits right so if you find out a15 and
17:57 - a68 then BAS address 1020
18:00 - plus I is 15 15 minus lower limit is
18:05 - 10 into n we have already calculated
18:08 - it's 21 plus J value is 68 minus lower
18:12 - limit for column is
18:14 - 55 into size given 4
18:16 - bytes I think it will give you 1492 you
18:20 - just calculate this thing maybe there
18:21 - will be calculation error I hope you got
18:23 - the formula this is in raw measure but
18:26 - the same thing is suppose I have given
18:29 - in Formula it is given the
18:30 - representation is column meas and you
18:32 - have to find out 15 to 68 then you
18:35 - please pause the video and just write
18:38 - down this formula find out this formula
18:40 - right in this case for column measor
18:42 - representation right and just write down
18:44 - in comment section yes you got it
18:46 - yourself without watching this video you
18:48 - can just comment this thing also now see
18:51 - obviously the Base address Plus for
18:54 - column measure if this is the case if
18:56 - you are representing this in column
18:58 - measure so from before this element how
19:00 - many elements have to calculate because
19:02 - first we will store this column then
19:03 - second then third fourth like like this
19:05 - so how many column before this how to
19:08 - calculate whatever the J value is given
19:11 - J minus lower
19:14 - limit right how many columns before this
19:18 - 68 - 55 right now into into in each
19:23 - column how many elements we
19:25 - have that would be equal to number of
19:27 - rows so how to calculate number of rows
19:30 - 30 - 10 + 1 that is 21 so directly I'm
19:34 - writing M here right number of rows but
19:38 - there is different formula to calculate
19:39 - number of rows and number of columns
19:41 - that I have told you right plus plus now
19:45 - how many elements before this particular
19:47 - element in this
19:49 - column that
19:51 - thing what will give that thing I mean
19:55 - uh this this um I so it's I minus lower
19:59 - limmit of Index this index so 15 - 10
20:02 - that is obviously before this element
20:04 - actually in this column there are only
20:06 - five elements right so 15 - 10 is it
20:08 - would be five into
20:12 - size so I guess you got it now you can
20:16 - just put the values of the these values
20:18 - and you can find out the address right
20:20 - that would be something
20:27 - different
20:33 - like one20 plus J value is 68 68 minus
20:37 - lower limit for column is 55 55 into 21
20:42 - number of rows we have already
20:43 - calculated I is 15 minus lower limit for
20:47 - I is 10 into 4 so if you calculate this
20:50 - thing that would be something different
20:51 - and it would be something uh 2132 I
20:54 - guess if I'm wrong you can just let me
20:55 - know in comment section so I hope you
20:57 - got the formula so actual the complete
20:59 - formula for row measure column measure
21:01 - to calculate addresses these formulas
21:04 - right but in these cases but by default
21:08 - if the index is 0 0 then we simply
21:11 - ignore LC LR and these things we simply
21:13 - put these formulas
21:16 - right so I hope you got these formulas
21:19 - if you are still confused then in next
21:21 - video we'll see two or three more
21:23 - example of addressing right so now I'll
21:27 - see you in the next by bye take
21:35 - care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing 2D arrays in the previous video we have seen memory representation of FD aray and how to access elements from 2D aray right two technique for memory representation row measure and colum right and using index just provide row index and column index and you can access elements right but what is happening behind the scene like when uh you say how the memory is to be allocated to those elements means addressing addressing of 2D array elements how this is to be done how the address is to be calculated like which element is stored on which address right this is known as like addressing of elements so this thing we'll see in this video right addressing in 2D array okay let's take that simple example first let's take this is a 2d array three into three array three column and uh three rows number of rows number of columns so this is how we I'm going to initialize this thing first row second row third row right in first row only two elements I have given in second row three elements third row three elements right so if you visualize this thing then how we are going to store in the form of like a matrix First Row 1 and 10 and the remaining element is by default 0o 1 9 5 2 70 and 22 this this is three into three Matrix three rows and three columns right number of rows number of columns index We Know by default start from 0o so 0 1 2 for column also 0 1 2 index would start from zero right so this is the case but how now the addressing is to be done suppose The Base address is memory manager has allocated Base address is 100 we are taking simple address right we are just supposing that Base address is 100 actually it is in hexadecimal form right so how this is to be stored in memory like this there are two representation memory represent representation row measure and column measure by default 2D arrays are stored in memory with row measure representation so both the things addressing in both the cases we will discuss there are two formulas so first we are checking row measor representation right so we are supposing this array has been stored in row measure cering in memory so first row second row third row like this so first the all the element of first row then second row then all the element of third row this is the case and suppose Base address is 100 right so how now the address is to be calculated calculated like for all the elements like for minus one for minus one what should be the address so like this we know every element is taking four bytes integer is taking four bytes so for next element it is 104 108 and so on so how many total bites would be allocated how many elements are there number of rows into number of columns 3 into 3 that is 9 and one element each element is taking 4 by in memory into four that is 36 by would be allocated right but now how actually this addressing is to be done there is a Formula how the address is to be calculated right now let's take we have example of uh this element n so index of this is if I say a of first row number is one and column number is 1 so a11 a11 will give you nine first this row and this column right by default index is from 0 to zero but how this address is to be calculated the address of this N9 is 116 right there is a Formula see you know the Base address you know from where to start from 100 right so in Base address what you are going to add Base address plus suppose here we I'm taking i j for general formula we are calculating right I index J index I for row J for column Base address plus now what how many bytes to be added like Base address 100 plus we will add here 16 by so 100 + 16 116 so address of 9 would be for 1 one would be 116 but how this number of B would be calculated see obviously see first we are in this row so how many rows before this row our actual element is nine so how many rows before this row it is first row so one row right so how many rows this have to be calculated I'm taking example of a11 so this thing this I will give the number of rows before the actual row because our element the actual Row in which our element is that is this row so before this we have one row so this I value will give this thing right if I take this example a of 2 and 1 so how many elements from how many rows before this Row one two from where we'll get this idea how many R obviously from the I value whatever we have given the I value right so I now into in each row how many elements in each row how many elements means how many columns what it will from where we will get this value how many number of columns are there in your 2D array and number of rows number of columns suppose I'm taking this value m and n m isal 3 n isal 3 m means number of rows N means number of columns right so I into how many number of columns in each or how many number of elements in each row equal to how many the number of columns number of columns we will take from this variable n so I into n right now plus plus suppose I'm taking this value a11 9 so now we are in the actual Row in which our element is but before this element how many elements are there before this element how many elements in this Row from where we will get this value here before this we have one element so from JF value from JF value we will get this idea right before this how many elements we have only one so on plus J it's not in right it's plus J because if we take this suppose this example one and two so number of rows only one right so 4 by for this 4 by for this 4 by for this right now before for this how many elements how many elements that just we are going to add not into right so plus J value is two so only two elements so J value will give this idea plus J and whatever this thing that number of byes will add into Base address so this is the simple formula okay uh there is something missing into obviously in two you have to calculate number of bytes these are the number of elements from the actual El element one element will take four bytes or the you can say the size of that particular you know one element in that particular ARR so into size these many number of bytes we are going to add in Base address and then we'll get the actual address of that particular element so this is the formula for row measure ordering to calculate address right if we take example of one one then Base address suppose 100 plus I value is 1 1 into number of columns three plus J value is also one into size is four byes so this would be 16 it would be 116 and yeah for a11 a11 is 9 and for 9 address is 116 right actually this is not the complete formula this is the basic one right the variation of this formula also I'll discuss with the help of one example but first of all for that to understand that complex formula you have to understand this formula and why it's not like that just you know learn or just cram this formula it's not like ratification no that kind of thing you have to understand why we are doing I into n + J why right I hope you got this idea if not pause the video just you know rewind this watch it again before going you know for the second formula so I hope you got this thing now please calculate for this a 2 and one and just you can just Che me comment section now this is for row measure now let's suppose second is column measure so in column measure what how to represent column wise First Column second column third column so First Column so 1 1 2 10 9 70 0 5 and 22 this is the case right so yeah in this case addressing is something different for 10 if you take here for 10 the address is 112 but in row measure the address for 10 was 104 right so now how thises addressing is to be done what is the formula in this case if you got this formula then it is very easy for you to get the second one for row measure I and J same in Base address what you are going to add so if you're taking this example suppose I'm taking this example this time a of 2 and 1 second row First Column right okay for 70 it's 120 but how to calculate in column measure for 70 so first in column baser we know First Column we are going to store first then this column so before this how many elements are there five elements so how to know that thing first for this column you know 70 is in this column First Column like the column having index first so before this how many columns we have right one column we have but from where we will get this idea from this thing I and J from J value J is because column Index right J is here one right so before this we have only obviously one column so this will you idea this thing so here J into now J into how many element in this column equal to obviously the number of rows so number of rows we'll get from M into M plus now in this particular column we are in that specified column how many elements before this element 1 2 from where you'll get this idea whatever the index for row two two right so from before this we have one two two element plus I into size I hope you got this formula also these are very simp simple if you're not getting please pause the video and watch it again before going to you know the complex formula right because it's very you know important to understand these two basic formulas right now if you calculate address of a to 1 a to 1 in column measure so 100 plus J value is 1 into M value is 3 plus I value is 2 into size is 4 so 100 plus it's 120 right so for 70 21 it's 120 right and if suppose this is we are supposing this has been stored in row measure so in that case a 21 what should be the address in row measure this is the formula I into n i value is 2 2 into n is 3 + J J value is 1 into 4 is equal to 100 plus it is 128 so in row measure for the same 2 1 for 70 the address is 128 in column measure it's 120 right I hope you're getting the difference and why these kind of difference okay so these are simple formula but one type of problem you will get in un University exam also in competitive exam also that is some kind of you know that is different thing here by default the lower limit of row is zero lower limit for column is zero index starting index is starting from zero right we know so that is why this is the simple formula but but if question is something like this this is the thing we are given an array and this kind of thing 10 do do do 30 55 do 75 Base address one20 size 4 byes for one element you have to find out the address for this A5 and 68 now and the representation is row measure what you will do you simply put here something like this Base address is this I is 15 n is and number of uh columns how to calculate because a is something like this then size is given four so here the formula is something different here the case is is lower limit for row is given 10 and upper limit 30 means you can say the index right lower limit lower index of column is 55 and the last index for column is 75 index is not started from zero here so the situation is something like that so here this is the case index the lower index for RO is started from 10 to 30 55 to 75 it's not from 0o 0 1 2 3 4 no there is something different so how to calculate M and N value number of rows and number of columns number of rows M are 30 10 obviously + 1 right so 21 you can calculate from 10 to 30 it would be 21 and N is 75 55 and + 1 right so 21 number of rows number of columns are 2 21 right okay now formulize something different here a of I if you want to calculate your I value is 15 J value is 68 so same Base address would be same obviously plus now this would be something different okay it is row measure and 15th row this row and 68 column somewhere here 68 column this here is some element addressing for this element right so how many rows before this row you have to calculate that according to the formula which value will give that I value but directly we cannot say I into n because I value is 15 but before this row how many actual how many rows 1 2 3 4 5 it's not 15 rows why so because the lower limit of index is 10 it's not zero so only five rows so how to calculate this thing 15 10 5 so the formula is here I minus the lower limit for row index l r lower limit for row right this not simply I into how many columns obviously how many like elements in these each row equal to number of columns so we'll do obviously into number of rows into in each in each how many elements are there right to calculate all the elements into n right okay this is the case but n n how to calculate I have told you upper limit for this column minus lower limit + one right that would be n right plus here we have J obviously from this before this now in in this particular we are now in this particular row so how many elements before this particular element plus how to calculate it's not like directly write down here J 68 Element no there are not 68 element before this element because index is from 55 so I have to calculate how many actual elements before this J whatever the J value minus lower limit for the column lower limit for the column index means actually 65 8 55 these many elements would be there before this element right so J minus LC into sides so in this case this type of formula would be used so actually if we say the complete formula for addressing is this one right in that formula we are not using LR and LC lower limit because lower limit is zero so it doesn't make any difference but if this is the case then you have to put the these lower limits right so if you find out a15 and a68 then BAS address 1020 plus I is 15 15 minus lower limit is 10 into n we have already calculated it's 21 plus J value is 68 minus lower limit for column is 55 into size given 4 bytes I think it will give you 1492 you just calculate this thing maybe there will be calculation error I hope you got the formula this is in raw measure but the same thing is suppose I have given in Formula it is given the representation is column meas and you have to find out 15 to 68 then you please pause the video and just write down this formula find out this formula right in this case for column measor representation right and just write down in comment section yes you got it yourself without watching this video you can just comment this thing also now see obviously the Base address Plus for column measure if this is the case if you are representing this in column measure so from before this element how many elements have to calculate because first we will store this column then second then third fourth like like this so how many column before this how to calculate whatever the J value is given J minus lower limit right how many columns before this 68 55 right now into into in each column how many elements we have that would be equal to number of rows so how to calculate number of rows 30 10 + 1 that is 21 so directly I'm writing M here right number of rows but there is different formula to calculate number of rows and number of columns that I have told you right plus plus now how many elements before this particular element in this column that thing what will give that thing I mean uh this this um I so it's I minus lower limmit of Index this index so 15 10 that is obviously before this element actually in this column there are only five elements right so 15 10 is it would be five into size so I guess you got it now you can just put the values of the these values and you can find out the address right that would be something different like one20 plus J value is 68 68 minus lower limit for column is 55 55 into 21 number of rows we have already calculated I is 15 minus lower limit for I is 10 into 4 so if you calculate this thing that would be something different and it would be something uh 2132 I guess if I'm wrong you can just let me know in comment section so I hope you got the formula so actual the complete formula for row measure column measure to calculate addresses these formulas right but in these cases but by default if the index is 0 0 then we simply ignore LC LR and these things we simply put these formulas right so I hope you got these formulas if you are still confused then in next video we'll see two or three more example of addressing right so now I'll see you in the next by bye take care
