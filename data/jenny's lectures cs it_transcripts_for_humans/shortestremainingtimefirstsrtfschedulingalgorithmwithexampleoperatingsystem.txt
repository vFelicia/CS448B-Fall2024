With timestamps:

00:00 - topic in society if that is shortest
00:02 - remaining time first CPU should any
00:04 - algorithm or you can say it is SJ with
00:07 - preemption so we have already discussed
00:10 - that non preemption case in the previous
00:12 - video and in this video I'm going to
00:14 - discuss with you the SJ with preemption
00:17 - so how the society offends different
00:19 - from last year what you can say SJ f
00:22 - with preemption is different from SJ
00:24 - with non preemption case C in SJ of
00:27 - basically we pick the JA from the ready
00:29 - prove it is having the smallest boss
00:31 - time we are located the CPU to that
00:33 - process and in non preemption that
00:35 - process will continue its execution till
00:37 - its termination
00:39 - you cannot forcefully remove that
00:42 - process from CPU in between the
00:44 - execution of that process but in case of
00:46 - preemption you can remove that process
00:49 - while it is executing before the
00:53 - termination of that process and what is
00:55 - that condition when you will remove that
00:57 - process from CPU okay that condition is
01:01 - if the newly-arrived process is having
01:06 - shorter bursts time then the remaining
01:11 - first time of the currently running
01:13 - process then you will remove the
01:16 - currently running process and allocate
01:18 - the CPU to the newly-arrived process and
01:20 - the currently running process will wait
01:21 - in the ready queue so say see here you
01:25 - can say whenever a new process arrived
01:27 - there may be preemption of the currently
01:29 - running process you cannot say that
01:31 - there will be preemption of the
01:34 - currently running process see that is
01:37 - not true it is not true that always
01:38 - whenever a new process arrives the
01:41 - currently running process will be
01:42 - preempted no that is not true may or may
01:45 - not be so when it would be preempted if
01:48 - the newly arrived process has shorter
01:52 - bursts time then the remaining burst
01:55 - time of the currently running process
01:57 - then only preemption will be there
01:58 - otherwise the currently running process
02:01 - will continue its execution if the newly
02:04 - arrived process have larger burst time
02:07 - than the remaining burst time of the
02:09 - currently running process fine you will
02:12 - get it better with the help of
02:14 - so I'm going to take the same example we
02:15 - have discussed this example with sjf
02:17 - with non preemption now we'll discuss
02:19 - this case with preemption okay now first
02:23 - of all draw the line chart this would be
02:25 - started from zero fine now check out at
02:29 - zero is there any any process which is
02:32 - in ready queue check out the arrival
02:34 - time of the process yes at zero one
02:36 - process has been arrived at as before
02:38 - now in ready queue we have one process
02:40 - only one process that is before now see
02:44 - if one process is there then you have
02:47 - you do not have any other choice you
02:49 - have to share Doon this process only you
02:52 - have to give CPU to this process
02:54 - although the burst time of this one is
02:56 - six and you can say that my main sure
02:58 - you can see that in shortest your first
03:00 - we we pick the job of having the
03:02 - shortest burst time and the shortest
03:03 - verse time is one and one then why we
03:06 - are picking this process why so because
03:09 - these processes are not in ready queue
03:12 - now they haven't arrived till now only
03:15 - one process we have that is p4 so only
03:19 - one process you have you have only one
03:20 - choice you have to share dude p4 right
03:26 - it is not like that p4 will continue its
03:28 - execution till 6:00 till its termination
03:32 - that is the case in SJ with non
03:33 - preemption but here in preemption what
03:36 - you will do you will check out after
03:40 - every unit of time see from 0 to 1 now
03:45 - at 1 you check out has any other process
03:47 - arrived at 1 we have p4 that is
03:50 - currently running now fine and after 1
03:54 - see the p4 has been executed from 0 to 1
03:57 - that is one unit of time now remaining
03:59 - time for p4 is 5 6 minus 1 that is 5 now
04:04 - check out at 1 is there a and has any
04:06 - other process arrived at 1 yes one
04:08 - process that is p2 now we have p2 also
04:12 - now available processes are p2 and p4 is
04:16 - currently running not checkout newly
04:18 - arrived processes p2 not check out the
04:21 - first time of P 2 that is 5 and the
04:24 - remaining time of p 4s
04:27 - fine which one is smaller both are same
04:31 - if both are same there is a tie then to
04:34 - break the tie viewers first come first
04:36 - so so firstly p4 has come after that p2
04:40 - comes hope will continue with p4 on okay
04:45 - will not do the context switching again
04:47 - after one unit of time at two we would
04:51 - check has any other process arrived at
04:53 - two now a time poopy one has arrived and
04:55 - p5 has been arrived now as well as you
04:59 - have to update this time this remaining
05:01 - time also
05:02 - now p4 has been executed one more unit
05:04 - of time so remaining time is now for pi
05:07 - minus 1 that is for now out of the
05:10 - available resources or sorry out of the
05:12 - relevant processes find out which one is
05:14 - having the shortest burst time see we
05:17 - don't have this p3 because it will come
05:19 - at time 4 so out of 1 5 updated is 4 & 3
05:23 - which one is which one is the shortest
05:25 - that is we have 1 so will allocate cpu
05:28 - to p1 for 1 unit of time only and this
05:34 - will require only one unit of time so
05:36 - this has been terminated now this has
05:39 - been done okay
05:41 - now check out at 3 has any idea has any
05:45 - other process arrived at 3 no because it
05:48 - will arrive at 4 only okay now p1
05:52 - compete in p1 has been completed so
05:55 - remaining is p2 p4 and p5 p2 p4 and p5
05:59 - so out of these 3 check out which one is
06:01 - minimum 5 4 and 3 3 is minimum so we'll
06:05 - pick this process p5 for one unit of
06:09 - time only 3 to 4 will check okay and now
06:14 - for at you'll check has any other
06:16 - process arrived at 4 yes p3 has been
06:18 - arrived and as well as you will update
06:21 - the time the remaining bursts time of
06:24 - the currently running process so after
06:26 - one unit of execution remaining time is
06:28 - 3 minus 1 that is 2 now we have P 4 P 2
06:33 - P 5 and P 3 now out of these 4 see this
06:36 - has been done out of 5 1 4 n 2 which one
06:39 - is having minimum
06:39 - first time that is this one p3 this one
06:44 - is p3 and for one unit of time and it
06:49 - will require only one unit to complete
06:52 - its execution
06:53 - so p3 has been done p3 has been done now
06:57 - remaining is only three process now you
07:01 - have reached a point where all the
07:04 - processes see we have only five
07:06 - processes and all the processes has been
07:08 - arrived in ready queue now this
07:11 - algorithm will act as simple sjf
07:16 - algorithm okay
07:19 - you will not again and again check for
07:21 - in after one unit of time and then is
07:24 - there any other process arrived or not
07:26 - now after every process has been arrived
07:30 - in the ready queue from that point of
07:34 - time the society F will work as SJ f
07:37 - money fine let's make yogurt okay you
07:41 - will pick from all the available waiting
07:44 - processes you will pick the process
07:46 - which is having the shortest remaining
07:47 - time first you will allocate that
07:49 - process you will allocate the cpu to
07:51 - that process and continue that process
07:54 - will continue its execution till its
07:55 - termination okay now see now at five we
08:02 - are done with this p3 now remaining is
08:05 - p2 p4 and p5 out of these three which
08:07 - one is having shortest bus time this one
08:10 - is having that is two so this would be
08:12 - allocated to p5 for two unit of time no
08:16 - need to check for C no need to check for
08:19 - the 5 to 6 and then 6 to 7 you can check
08:22 - if you want but if all the processes has
08:25 - been arrived in the ready queue after
08:27 - that just follow the same process as in
08:31 - SJ of with non preemption case so it
08:34 - would require 2 unit of time so 5 plus 2
08:37 - is 7 now this one is also done p5
08:40 - remaining is now p4 and p2 p4 and p2 v +
08:44 - 4 which one is minimum that is P 4 P 4
08:47 - having 4 unit of time 7 plus 4 is 11 in
08:52 - law
08:52 - one is p2 5 in a row time that is 16 say
09:00 - why we haven't checked here after each
09:03 - unit of time like this only we have
09:05 - checked here after each unit of time see
09:08 - here the main fund is if newly arrived
09:12 - process is having shorter bursts time
09:16 - then the remaining time of the currently
09:18 - running process then only preemption
09:20 - would be done but once all the processes
09:22 - has been arrived then there is no chance
09:25 - that any new process will arrive so no
09:28 - need to check after each after every
09:30 - amount of time see any other processor I
09:32 - do not any other processor I've ever
09:34 - known because you know all the processes
09:36 - has been arrived so no need to check
09:38 - after the arrival of all the processes
09:40 - I will check for each unit of time till
09:44 - all the processes arrives in the ready
09:47 - queue now see here also at last we have
09:53 - 16 and this would be same as the total
09:56 - burst time 5 plus 1 plus 1 plus 6 plus 3
09:59 - that is 16 only and in previous case
10:04 - also we have got here 16 so this would
10:06 - be see the change would be only in the
10:10 - location of these processes the order of
10:12 - allocation of these processes now I will
10:14 - find out the completion time check out
10:20 - at what time p1 has been completed p1
10:22 - has been completed see here we have p1
10:24 - after that we don't have p1 so
10:27 - completion time of p1 is this 3 at three
10:32 - p1 has been completed right see you will
10:35 - not take this one because this is the
10:37 - starting time of p1 at 2 CPU has been
10:40 - allocated to p1 and this is the
10:42 - finishing time of p1 ok to the right of
10:46 - this p1 for p2 p2 it's 16 for p3 check
10:52 - out where is p3 here is p3 after that we
10:55 - don't have p3 so
10:56 - completion time is 5 for p4 see now you
11:01 - cannot say here we have p4 so you can
11:03 - write here - no company this is
11:05 - the completion time of p2y so because
11:08 - after waiting of some unit of time CP
11:11 - was allocated to p4 again fine
11:15 - so this is the waiting time so here you
11:18 - can say you cannot say this is the
11:19 - completion time check out here and after
11:23 - that there is no p4 so this is the
11:26 - completion time of people that does 11
11:30 - okay now for p5 check out this is p5 yes
11:34 - now p5 here we have Wi-Fi from 3 to 4 so
11:38 - do not write for this is the completion
11:40 - time because here also we have p5 again
11:42 - CP was allocated to p5 here after that
11:45 - no p5 so 7 would be the completion time
11:48 - of p5 now what is turnaround time
11:52 - turnaround time would be word completion
11:54 - time - arrival time completion time 3
11:57 - arrival time - 116 - 115 5 - 4 1 11 - 0
12:03 - 11 7 - 2 that is 5
12:05 - next is waiting time would be done wrong
12:08 - time - boss time 1 minus 1 I hope you
12:11 - know the formula 5 minus 15 minus 10 is
12:16 - sorry 10 15 minus 5 is 10 1 minus 1 is 0
12:21 - 11 minus C 11 minus 6 we will take the
12:25 - original burst time not the updated 1 11
12:27 - minus 6 is 5 5 minus 3 is 2 now find out
12:33 - the response time the time at which CPU
12:38 - was first floated to that process after
12:41 - the arrival of the process for p1 when
12:45 - the CPU was allocated first time to p1
12:47 - here at time 2 and arrival of the p2 is
12:52 - also - the response time is C and when
12:55 - as when the process come then only PCP
12:59 - was allocated to that process so p1
13:02 - didn't wait not for a single unit of
13:05 - time 2 minus 2 that is 0 response time I
13:08 - take use Co CPU millia at the Hugh's
13:10 - corresponds Millia from the CPU now what
13:14 - about p2
13:15 - here we have p2 first time CP was
13:18 - allocated at time 11 check out the
13:21 - arrival time of this one that is 111
13:22 - minus 1 that is 10 so p2 after arrival
13:27 - p2 has to wait for any unit of time ok
13:32 - and after 10 unit of time CP was
13:34 - allocated to p2 for the first time P 3 P
13:38 - 3 the here is P 3 that is 4 and arrival
13:43 - time is 4 4 - 4 0 4 p 4 C first time CP
13:47 - was allocated to 0 will not take this 7
13:50 - because this is the second time CPUs are
13:53 - located 2p for first time you have to
13:55 - check first time at 0 CP was allocated
13:57 - to P for arrival time is also 0 0 - 0 0
14:01 - P 5 first time at 3 CPUs are located 3 -
14:05 - arrival time is 2 3 - 2 that is 1 so
14:10 - here we cannot say that waiting time and
14:11 - response time would be same in the case
14:14 - of non-preemptive algorithm response
14:17 - time and waiting time would always be
14:19 - same but in case of pre-emptive
14:21 - algorithm this would not be same here
14:23 - you can see the difference here 5 here
14:25 - we have 0 here we have two here here 1
14:27 - now you can find out the average waiting
14:30 - time of this algorithm so the average
14:32 - waiting time for this algorithm will
14:34 - would be 3 point 4 and this SI TF would
14:38 - give you the minimal average waiting
14:41 - time
14:41 - now what this minimal means for this
14:46 - numerical on this numerical you apply
14:48 - any algorithm maybe you you you device
14:52 - you develop your new algorithm after
14:54 - some modification and you apply that
14:55 - algorithm on this numerical but you will
14:57 - never get the average waiting time less
15:01 - than 3 point 4 so this that is why it is
15:05 - known as the optimal solution this will
15:07 - give you the minimal average waiting
15:09 - time so one more example I will discuss
15:11 - on this SR TF only till then take care
15:14 - bye bye

Cleaned transcript:

topic in society if that is shortest remaining time first CPU should any algorithm or you can say it is SJ with preemption so we have already discussed that non preemption case in the previous video and in this video I'm going to discuss with you the SJ with preemption so how the society offends different from last year what you can say SJ f with preemption is different from SJ with non preemption case C in SJ of basically we pick the JA from the ready prove it is having the smallest boss time we are located the CPU to that process and in non preemption that process will continue its execution till its termination you cannot forcefully remove that process from CPU in between the execution of that process but in case of preemption you can remove that process while it is executing before the termination of that process and what is that condition when you will remove that process from CPU okay that condition is if the newlyarrived process is having shorter bursts time then the remaining first time of the currently running process then you will remove the currently running process and allocate the CPU to the newlyarrived process and the currently running process will wait in the ready queue so say see here you can say whenever a new process arrived there may be preemption of the currently running process you cannot say that there will be preemption of the currently running process see that is not true it is not true that always whenever a new process arrives the currently running process will be preempted no that is not true may or may not be so when it would be preempted if the newly arrived process has shorter bursts time then the remaining burst time of the currently running process then only preemption will be there otherwise the currently running process will continue its execution if the newly arrived process have larger burst time than the remaining burst time of the currently running process fine you will get it better with the help of so I'm going to take the same example we have discussed this example with sjf with non preemption now we'll discuss this case with preemption okay now first of all draw the line chart this would be started from zero fine now check out at zero is there any any process which is in ready queue check out the arrival time of the process yes at zero one process has been arrived at as before now in ready queue we have one process only one process that is before now see if one process is there then you have you do not have any other choice you have to share Doon this process only you have to give CPU to this process although the burst time of this one is six and you can say that my main sure you can see that in shortest your first we we pick the job of having the shortest burst time and the shortest verse time is one and one then why we are picking this process why so because these processes are not in ready queue now they haven't arrived till now only one process we have that is p4 so only one process you have you have only one choice you have to share dude p4 right it is not like that p4 will continue its execution till 600 till its termination that is the case in SJ with non preemption but here in preemption what you will do you will check out after every unit of time see from 0 to 1 now at 1 you check out has any other process arrived at 1 we have p4 that is currently running now fine and after 1 see the p4 has been executed from 0 to 1 that is one unit of time now remaining time for p4 is 5 6 minus 1 that is 5 now check out at 1 is there a and has any other process arrived at 1 yes one process that is p2 now we have p2 also now available processes are p2 and p4 is currently running not checkout newly arrived processes p2 not check out the first time of P 2 that is 5 and the remaining time of p 4s fine which one is smaller both are same if both are same there is a tie then to break the tie viewers first come first so so firstly p4 has come after that p2 comes hope will continue with p4 on okay will not do the context switching again after one unit of time at two we would check has any other process arrived at two now a time poopy one has arrived and p5 has been arrived now as well as you have to update this time this remaining time also now p4 has been executed one more unit of time so remaining time is now for pi minus 1 that is for now out of the available resources or sorry out of the relevant processes find out which one is having the shortest burst time see we don't have this p3 because it will come at time 4 so out of 1 5 updated is 4 & 3 which one is which one is the shortest that is we have 1 so will allocate cpu to p1 for 1 unit of time only and this will require only one unit of time so this has been terminated now this has been done okay now check out at 3 has any idea has any other process arrived at 3 no because it will arrive at 4 only okay now p1 compete in p1 has been completed so remaining is p2 p4 and p5 p2 p4 and p5 so out of these 3 check out which one is minimum 5 4 and 3 3 is minimum so we'll pick this process p5 for one unit of time only 3 to 4 will check okay and now for at you'll check has any other process arrived at 4 yes p3 has been arrived and as well as you will update the time the remaining bursts time of the currently running process so after one unit of execution remaining time is 3 minus 1 that is 2 now we have P 4 P 2 P 5 and P 3 now out of these 4 see this has been done out of 5 1 4 n 2 which one is having minimum first time that is this one p3 this one is p3 and for one unit of time and it will require only one unit to complete its execution so p3 has been done p3 has been done now remaining is only three process now you have reached a point where all the processes see we have only five processes and all the processes has been arrived in ready queue now this algorithm will act as simple sjf algorithm okay you will not again and again check for in after one unit of time and then is there any other process arrived or not now after every process has been arrived in the ready queue from that point of time the society F will work as SJ f money fine let's make yogurt okay you will pick from all the available waiting processes you will pick the process which is having the shortest remaining time first you will allocate that process you will allocate the cpu to that process and continue that process will continue its execution till its termination okay now see now at five we are done with this p3 now remaining is p2 p4 and p5 out of these three which one is having shortest bus time this one is having that is two so this would be allocated to p5 for two unit of time no need to check for C no need to check for the 5 to 6 and then 6 to 7 you can check if you want but if all the processes has been arrived in the ready queue after that just follow the same process as in SJ of with non preemption case so it would require 2 unit of time so 5 plus 2 is 7 now this one is also done p5 remaining is now p4 and p2 p4 and p2 v + 4 which one is minimum that is P 4 P 4 having 4 unit of time 7 plus 4 is 11 in law one is p2 5 in a row time that is 16 say why we haven't checked here after each unit of time like this only we have checked here after each unit of time see here the main fund is if newly arrived process is having shorter bursts time then the remaining time of the currently running process then only preemption would be done but once all the processes has been arrived then there is no chance that any new process will arrive so no need to check after each after every amount of time see any other processor I do not any other processor I've ever known because you know all the processes has been arrived so no need to check after the arrival of all the processes I will check for each unit of time till all the processes arrives in the ready queue now see here also at last we have 16 and this would be same as the total burst time 5 plus 1 plus 1 plus 6 plus 3 that is 16 only and in previous case also we have got here 16 so this would be see the change would be only in the location of these processes the order of allocation of these processes now I will find out the completion time check out at what time p1 has been completed p1 has been completed see here we have p1 after that we don't have p1 so completion time of p1 is this 3 at three p1 has been completed right see you will not take this one because this is the starting time of p1 at 2 CPU has been allocated to p1 and this is the finishing time of p1 ok to the right of this p1 for p2 p2 it's 16 for p3 check out where is p3 here is p3 after that we don't have p3 so completion time is 5 for p4 see now you cannot say here we have p4 so you can write here no company this is the completion time of p2y so because after waiting of some unit of time CP was allocated to p4 again fine so this is the waiting time so here you can say you cannot say this is the completion time check out here and after that there is no p4 so this is the completion time of people that does 11 okay now for p5 check out this is p5 yes now p5 here we have WiFi from 3 to 4 so do not write for this is the completion time because here also we have p5 again CP was allocated to p5 here after that no p5 so 7 would be the completion time of p5 now what is turnaround time turnaround time would be word completion time arrival time completion time 3 arrival time 116 115 5 4 1 11 0 11 7 2 that is 5 next is waiting time would be done wrong time boss time 1 minus 1 I hope you know the formula 5 minus 15 minus 10 is sorry 10 15 minus 5 is 10 1 minus 1 is 0 11 minus C 11 minus 6 we will take the original burst time not the updated 1 11 minus 6 is 5 5 minus 3 is 2 now find out the response time the time at which CPU was first floated to that process after the arrival of the process for p1 when the CPU was allocated first time to p1 here at time 2 and arrival of the p2 is also the response time is C and when as when the process come then only PCP was allocated to that process so p1 didn't wait not for a single unit of time 2 minus 2 that is 0 response time I take use Co CPU millia at the Hugh's corresponds Millia from the CPU now what about p2 here we have p2 first time CP was allocated at time 11 check out the arrival time of this one that is 111 minus 1 that is 10 so p2 after arrival p2 has to wait for any unit of time ok and after 10 unit of time CP was allocated to p2 for the first time P 3 P 3 the here is P 3 that is 4 and arrival time is 4 4 4 0 4 p 4 C first time CP was allocated to 0 will not take this 7 because this is the second time CPUs are located 2p for first time you have to check first time at 0 CP was allocated to P for arrival time is also 0 0 0 0 P 5 first time at 3 CPUs are located 3 arrival time is 2 3 2 that is 1 so here we cannot say that waiting time and response time would be same in the case of nonpreemptive algorithm response time and waiting time would always be same but in case of preemptive algorithm this would not be same here you can see the difference here 5 here we have 0 here we have two here here 1 now you can find out the average waiting time of this algorithm so the average waiting time for this algorithm will would be 3 point 4 and this SI TF would give you the minimal average waiting time now what this minimal means for this numerical on this numerical you apply any algorithm maybe you you you device you develop your new algorithm after some modification and you apply that algorithm on this numerical but you will never get the average waiting time less than 3 point 4 so this that is why it is known as the optimal solution this will give you the minimal average waiting time so one more example I will discuss on this SR TF only till then take care bye bye
