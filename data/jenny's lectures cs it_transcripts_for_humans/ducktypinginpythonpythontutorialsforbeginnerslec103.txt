With timestamps:

00:00 - hey everyone I hope you are safe and
00:01 - doing good so in the series of learning
00:03 - Python programming language in the
00:04 - previous video we have seen what is
00:05 - polymorphism that was introduction to
00:07 - polymorphism right and in that video I
00:09 - have told you there are four ways like
00:11 - how to implement polymorphism using four
00:13 - ways first is duct typing method
00:15 - overloading operator overloading and
00:17 - Method overriding so in this video we'll
00:19 - see the first way that is duct typing in
00:22 - Python so what we'll see in this video
00:24 - first of all what is duct typing okay
00:27 - what is this feature and why we use this
00:28 - feature duct typing and how we can use
00:30 - this feature to achieve polymorphism to
00:32 - implement Po polymorphism polymorphism
00:35 - in our program right so first this St
00:39 - duck typing basically comes from an old
00:42 - sayings and that is if it walks like a
00:45 - duck swims like a duck quacks like a
00:47 - duck then it probably is a duck means if
00:51 - it is a known duck entity if there is a
00:54 - bird which is not actually a duck but if
00:56 - it swims like a duck if it quacks like a
00:58 - duck if it walks like a duck then we can
01:01 - consider it as a duck means it probably
01:03 - is a duck means we are judging that we
01:06 - are judging that you can say the bir
01:08 - based on the behavior of that
01:12 - bir right like okay let's take one
01:15 - simple example suppose there's a boy and
01:19 - suppose we
01:22 - Rahul and he's not so innocent boy like
01:26 - he's having a
01:28 - girlfriend he is not so you can say
01:31 - Sharif kind of Sharif type of
01:34 - boy and someday like uh his parents
01:38 - decided to get him married okay so like
01:42 - L alas are coming to see him obviously
01:46 - at that time he'll behave like an
01:48 - innocent boy like he's very
01:51 - Sharif okay so based on the behavior at
01:55 - that particular time or during that time
01:58 - maybe during one one month or 2 month
02:01 - because it's not that directly let Bas
02:03 - come
02:04 - and next day you'll get married no it
02:07 - will take some time one day one month
02:09 - two month 3 month or 6 month but during
02:11 - that those months obviously he will
02:13 - behave like he's very
02:16 - Sharif he didn't have any girlfriend
02:19 - right so based on that behavior like
02:22 - maybe the from the the parents of girls
02:27 - or the lyas think
02:30 - boy is
02:33 - innocent sh okay but actually he's not
02:37 - so
02:38 - Shar so we are judging based on the
02:42 - behavior we are judging Rahul based on
02:44 - the behavior during that time okay I
02:47 - hope you are able to relate this concept
02:49 - with duct typing
02:52 - okay okay if not we'll discuss this
02:55 - thing with help of an example now why
02:57 - basically this duct typing feature is
02:59 - used us
03:00 - why so in Python Programming this duct
03:03 - typing feature is used basically it
03:05 - allows the data types to be
03:08 - dynamic I hope you have heard these two
03:11 - terms Dynamic typing and static
03:14 - typing if not okay let me just clear
03:17 - first of all these things to you these
03:19 - two terms static typing and dynamic
03:21 - typing we'll see this thing with the
03:23 - help of example okay once it is clear to
03:27 - you then definitely you will get it what
03:29 - is d typing and how we are going to use
03:31 - this duct typing to achieve polymorphism
03:33 - okay now let's do practical okay so in
03:36 - this polymorphism demo project let's
03:39 - create a new file and uh duct typing do
03:43 - py first let's see the difference
03:45 - between static typing and what is
03:47 - dynamic typing okay okay so I want to
03:50 - define a function that will find out
03:52 - square of a number so how to define in
03:55 - Python def name of the function and I'm
03:58 - going to pass one argument
04:00 - okay and this function is
04:03 - returning like X into
04:07 - xÂ² right and we are calling this
04:12 - function square and I'll pass suppose
04:15 - five so it is going to return so
04:17 - obviously you have to print that value
04:21 - let's run this and it will print what
04:25 - 25 see it is printing 25 if I pass 5
04:30 - .5 a floating number let's run this
04:36 - 3025 so see if you pass integer number
04:40 - then also it will give uh what you can
04:42 - say square if you pass float then also
04:45 - it will give float here you don't need
04:47 - to specify the type of this x like int
04:51 - and
04:52 - Float if you pass int according to int
04:55 - it will accept int and accordingly it
04:57 - will return the result if you pass float
04:59 - it will accept float right and the X
05:03 - Type becomes at that time float and it
05:05 - will return the result accordingly it
05:07 - isn't uh python it is dynamic typing
05:09 - Dynamic typing means you don't need to
05:11 - specify the data type of the
05:14 - variables at compile time okay at run
05:18 - time it will distinguish the data
05:23 - types because when you are passing five
05:26 - then at run time it will check okay it's
05:27 - five means integer so X is now integer
05:30 - it's 5 5.5 then okay it's uh float then
05:34 - X will become float but it's not the
05:37 - case in like C and Java there when you
05:40 - are uh defining a function like let me
05:44 - just tell you here what would be the
05:46 - syntax
05:48 - there square and then you have to
05:51 - specify not int float
05:56 - X okay we are accepting a type float and
06:00 - it it will return a float value and
06:03 - there after that in these obviously we
06:06 - will
06:07 - return X
06:10 - into X something like this and semicolon
06:14 - obviously so these kind of syntax we
06:16 - have in we can say in C or we can say in
06:19 - Java if you want to find out square of
06:23 - int
06:25 - then you have to Define one more
06:28 - function and there rather than float you
06:32 - have to replace this with
06:37 - int so here we are defining in Java
06:40 - suppose or in C let's take C is also
06:43 - static typing you have to Define two
06:45 - functions but in Python only one
06:48 - function is sufficient because these are
06:51 - these languages are static typing means
06:54 - you have to specify the data types
06:56 - before use at compile time only you have
06:58 - to spef specify the data types of the
07:02 - variables right but here no need to
07:04 - specify the data type that is why it is
07:06 - dynamic typing and it is type of static
07:09 - typing when you tell the data types of
07:11 - your variables and Methods at run time
07:14 - sorry at compile time
07:16 - only I hope you got the difference
07:18 - between now static typing and compile uh
07:20 - Dynamic typing so python is a
07:23 - dynamic type language okay and basically
07:26 - this feature duct typing allows python
07:29 - to support data type to be dynamic allow
07:32 - python to be a dynamic
07:34 - language in which the type of the
07:38 - variables or you can say the we are
07:40 - dealing with objects now and objects
07:43 - will create from class so you can say
07:45 - the type or the class of the object
07:48 - doesn't matter but what matters is what
07:52 - the methods it defines the attributes
07:55 - the
07:57 - methods right
08:00 - so let's take one example of duct typing
08:03 - now so basically the main reason to use
08:05 - this feature duct typing python is what
08:07 - to support Dynamic typing okay let's say
08:10 - we have a class
08:13 - duck simple example I'll take right and
08:17 - let's have two function here one is walk
08:22 - okay let's take not walk let's take
08:27 - swim and one function let's take
08:30 - um speaks quack quack how it speaks
08:35 - something like this so we have one class
08:38 - test let's have one more class I have a
08:41 - class
08:43 - dog right so in dog also I have one
08:47 - function
08:48 - swim and same second function also I'm
08:52 - having
08:53 - here speaks and that would be like maybe
08:58 - w W
09:00 - wo two classes we have okay now that
09:06 - class is different dog is different but
09:09 - both Dog and Duck can swim as well as
09:13 - speaks right so if I
09:17 - Define any
09:20 - random uh function suppose I'm defining
09:23 - anything display or catch or
09:26 - anything like display
09:30 - this function is outside of these
09:31 - classes okay and in display what I'm
09:36 - going to call the object object of any
09:39 - class maybe it's duck or do okay so if I
09:44 - pass if I want to pass like Duck
09:47 - object let me just clear out this
09:50 - thing first I'll be passing like Duck
09:54 - means any object I'll pass and name I'm
09:56 - taking the parameter name duck only okay
09:59 - and using this object I'll call Duck
10:02 - dot swim this
10:07 - function and same second
10:10 - function and just one one print like
10:12 - information displayed so let's
10:15 - create an object of duck class first so
10:19 - I'm I'm creating
10:21 - like Duck name of the object is duck
10:24 - name of the class is capital d d c right
10:29 - so I'm calling this function Now
10:31 - display and I'm passing the object of
10:34 - duck object name is what du only you can
10:37 - take different name as well here I can
10:39 - take D so I'm taking suppose D just pass
10:43 - D
10:44 - here okay let's run this and
10:49 - see
10:50 - see I'm a duck I can swim quack quack
10:53 - information displayed means swim and
10:56 - speaks both functions of this object is
11:00 - from du class so these two would be
11:04 - called now it's not like that I can pass
11:08 - only
11:09 - duck like object of duck class if I
11:12 - create object of dog class like B OG is
11:15 - equal to
11:18 - dog and now I'm passing this object
11:22 - dog let's run this see I'm a dog I can
11:26 - swim woof woof information displayed
11:30 - any object you can
11:32 - pass so I have told you in duct
11:36 - typing the type or the class of the
11:39 - object doesn't matter what matters is
11:41 - what the methods it defines the
11:45 - attributes the object I'm calling from
11:48 - dog class so this object would be past
11:52 - dog so it will check on this subject
11:56 - whether we you have defined swim method
12:00 - yes whether you have defined speaks
12:02 - method
12:04 - yes then it's fine it will go it will
12:07 - call these two functions class doesn't
12:10 - matter it's not like that only duck
12:12 - class object would be would be called
12:15 - no Ty doesn't matter okay so rather than
12:20 - than duck we can take any name like
12:24 - obj and if if suppose let's take another
12:27 - class we have a class
12:29 - class
12:31 - [Music]
12:32 - person and there also I have speaks blah
12:37 - blah blah but person is not having swim
12:42 - method
12:44 - right
12:48 - so after this class we are having this
12:56 - display now I let's create an object of
12:59 - person
13:03 - class and this time I'm not passing dog
13:06 - I'm passing person P let's run
13:10 - this C person object has no attribute
13:18 - swim in when you're calling this obj do
13:21 - swim because in person class when you
13:24 - call P then here the subject become from
13:27 - the class person so on this object have
13:30 - you defined
13:31 - swim method see in this class no we have
13:35 - just defined speaks that is why it is
13:37 - giving an error so python doesn't care
13:39 - about the class of the object in order
13:42 - to call an existing method on the object
13:45 - if that method is defined on the object
13:47 - it will be
13:49 - called class doesn't matter whether it's
13:52 - class it's a person class dog class or
13:53 - duck class if method is defined on that
13:55 - object it will be called right that is
13:59 - why I have told you if it swims like a
14:02 - duck if it quacks like a duck if it
14:04 - walks like a duck then it probably is a
14:06 - duck maybe it is a non duck entity maybe
14:08 - it's not a duck it's some other bird but
14:10 - it is behaving like a duck means it
14:13 - probably is a
14:14 - duck
14:16 - right and this is possible this is
14:19 - possible because of the dynamic typing
14:21 - we have Dynamic typing in Python the
14:24 - type of the variables or you can say the
14:26 - classes of the object doesn't matter
14:29 - at we at compile ter we don't specify
14:32 - the type of the variable the data type
14:34 - of the variable and all the data type of
14:36 - the variable can change accordingly at
14:38 - run time so we can say python is a duct
14:40 - typing language it means data types of
14:43 - the variables can change as long as the
14:45 - syntax is compatible here we are not
14:48 - having variables we are having objects
14:50 - so the class of the objects can change
14:55 - as long as syntax is compatible means as
14:58 - long as the methods are defined on that
15:00 - object right so the first
15:04 - time we can call this display
15:09 - function let's suppose with the help of
15:12 - D object duck object then call this
15:15 - display with the help of dog object pass
15:19 - dog and then pass person
15:23 - P let's just call this at last otherwise
15:29 - at first it will give err so first we
15:30 - calling with the duck object then dog
15:31 - object then person object so what output
15:34 - you should get
15:36 - see using duck object it is running
15:39 - using dog object also it is running
15:42 - completely fine but using person object
15:44 - it is giving attribute ER person object
15:45 - has no attribute swim or rather than
15:49 - just defining this uh function outside
15:53 - of any class we can take one more class
15:55 - and within that class also you can
15:57 - define a method and there you can pass
15:59 - object that is also fine like I'm
16:02 - defining a class maybe
16:06 - demo in class we have this method cell
16:11 - comma when object we are passing and
16:12 - same thing we are passing so let's run
16:15 - this okay now the display is not defined
16:19 - okay we are not having this display now
16:22 - we are having this in class so with the
16:24 - help of class object we can call this
16:26 - display so let's create a
16:30 - object of this demo
16:33 - class and with the help of this
16:36 - object we call this
16:41 - display see
16:43 - now for two it is running fine but in
16:46 - person it is giving same attribute so
16:48 - like this also you can this type of uh
16:51 - example also you can take in a class of
16:53 - method right so I hope you got now what
16:55 - is duct typing so I hope you got what is
16:57 - duct typing and we use this thing to
16:59 - achieve polymorphism now in the next
17:01 - video we'll see operator overloading
17:03 - maybe so now we'll see in the next video
17:04 - bye-bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning Python programming language in the previous video we have seen what is polymorphism that was introduction to polymorphism right and in that video I have told you there are four ways like how to implement polymorphism using four ways first is duct typing method overloading operator overloading and Method overriding so in this video we'll see the first way that is duct typing in Python so what we'll see in this video first of all what is duct typing okay what is this feature and why we use this feature duct typing and how we can use this feature to achieve polymorphism to implement Po polymorphism polymorphism in our program right so first this St duck typing basically comes from an old sayings and that is if it walks like a duck swims like a duck quacks like a duck then it probably is a duck means if it is a known duck entity if there is a bird which is not actually a duck but if it swims like a duck if it quacks like a duck if it walks like a duck then we can consider it as a duck means it probably is a duck means we are judging that we are judging that you can say the bir based on the behavior of that bir right like okay let's take one simple example suppose there's a boy and suppose we Rahul and he's not so innocent boy like he's having a girlfriend he is not so you can say Sharif kind of Sharif type of boy and someday like uh his parents decided to get him married okay so like L alas are coming to see him obviously at that time he'll behave like an innocent boy like he's very Sharif okay so based on the behavior at that particular time or during that time maybe during one one month or 2 month because it's not that directly let Bas come and next day you'll get married no it will take some time one day one month two month 3 month or 6 month but during that those months obviously he will behave like he's very Sharif he didn't have any girlfriend right so based on that behavior like maybe the from the the parents of girls or the lyas think boy is innocent sh okay but actually he's not so Shar so we are judging based on the behavior we are judging Rahul based on the behavior during that time okay I hope you are able to relate this concept with duct typing okay okay if not we'll discuss this thing with help of an example now why basically this duct typing feature is used us why so in Python Programming this duct typing feature is used basically it allows the data types to be dynamic I hope you have heard these two terms Dynamic typing and static typing if not okay let me just clear first of all these things to you these two terms static typing and dynamic typing we'll see this thing with the help of example okay once it is clear to you then definitely you will get it what is d typing and how we are going to use this duct typing to achieve polymorphism okay now let's do practical okay so in this polymorphism demo project let's create a new file and uh duct typing do py first let's see the difference between static typing and what is dynamic typing okay okay so I want to define a function that will find out square of a number so how to define in Python def name of the function and I'm going to pass one argument okay and this function is returning like X into xÂ² right and we are calling this function square and I'll pass suppose five so it is going to return so obviously you have to print that value let's run this and it will print what 25 see it is printing 25 if I pass 5 .5 a floating number let's run this 3025 so see if you pass integer number then also it will give uh what you can say square if you pass float then also it will give float here you don't need to specify the type of this x like int and Float if you pass int according to int it will accept int and accordingly it will return the result if you pass float it will accept float right and the X Type becomes at that time float and it will return the result accordingly it isn't uh python it is dynamic typing Dynamic typing means you don't need to specify the data type of the variables at compile time okay at run time it will distinguish the data types because when you are passing five then at run time it will check okay it's five means integer so X is now integer it's 5 5.5 then okay it's uh float then X will become float but it's not the case in like C and Java there when you are uh defining a function like let me just tell you here what would be the syntax there square and then you have to specify not int float X okay we are accepting a type float and it it will return a float value and there after that in these obviously we will return X into X something like this and semicolon obviously so these kind of syntax we have in we can say in C or we can say in Java if you want to find out square of int then you have to Define one more function and there rather than float you have to replace this with int so here we are defining in Java suppose or in C let's take C is also static typing you have to Define two functions but in Python only one function is sufficient because these are these languages are static typing means you have to specify the data types before use at compile time only you have to spef specify the data types of the variables right but here no need to specify the data type that is why it is dynamic typing and it is type of static typing when you tell the data types of your variables and Methods at run time sorry at compile time only I hope you got the difference between now static typing and compile uh Dynamic typing so python is a dynamic type language okay and basically this feature duct typing allows python to support data type to be dynamic allow python to be a dynamic language in which the type of the variables or you can say the we are dealing with objects now and objects will create from class so you can say the type or the class of the object doesn't matter but what matters is what the methods it defines the attributes the methods right so let's take one example of duct typing now so basically the main reason to use this feature duct typing python is what to support Dynamic typing okay let's say we have a class duck simple example I'll take right and let's have two function here one is walk okay let's take not walk let's take swim and one function let's take um speaks quack quack how it speaks something like this so we have one class test let's have one more class I have a class dog right so in dog also I have one function swim and same second function also I'm having here speaks and that would be like maybe w W wo two classes we have okay now that class is different dog is different but both Dog and Duck can swim as well as speaks right so if I Define any random uh function suppose I'm defining anything display or catch or anything like display this function is outside of these classes okay and in display what I'm going to call the object object of any class maybe it's duck or do okay so if I pass if I want to pass like Duck object let me just clear out this thing first I'll be passing like Duck means any object I'll pass and name I'm taking the parameter name duck only okay and using this object I'll call Duck dot swim this function and same second function and just one one print like information displayed so let's create an object of duck class first so I'm I'm creating like Duck name of the object is duck name of the class is capital d d c right so I'm calling this function Now display and I'm passing the object of duck object name is what du only you can take different name as well here I can take D so I'm taking suppose D just pass D here okay let's run this and see see I'm a duck I can swim quack quack information displayed means swim and speaks both functions of this object is from du class so these two would be called now it's not like that I can pass only duck like object of duck class if I create object of dog class like B OG is equal to dog and now I'm passing this object dog let's run this see I'm a dog I can swim woof woof information displayed any object you can pass so I have told you in duct typing the type or the class of the object doesn't matter what matters is what the methods it defines the attributes the object I'm calling from dog class so this object would be past dog so it will check on this subject whether we you have defined swim method yes whether you have defined speaks method yes then it's fine it will go it will call these two functions class doesn't matter it's not like that only duck class object would be would be called no Ty doesn't matter okay so rather than than duck we can take any name like obj and if if suppose let's take another class we have a class class person and there also I have speaks blah blah blah but person is not having swim method right so after this class we are having this display now I let's create an object of person class and this time I'm not passing dog I'm passing person P let's run this C person object has no attribute swim in when you're calling this obj do swim because in person class when you call P then here the subject become from the class person so on this object have you defined swim method see in this class no we have just defined speaks that is why it is giving an error so python doesn't care about the class of the object in order to call an existing method on the object if that method is defined on the object it will be called class doesn't matter whether it's class it's a person class dog class or duck class if method is defined on that object it will be called right that is why I have told you if it swims like a duck if it quacks like a duck if it walks like a duck then it probably is a duck maybe it is a non duck entity maybe it's not a duck it's some other bird but it is behaving like a duck means it probably is a duck right and this is possible this is possible because of the dynamic typing we have Dynamic typing in Python the type of the variables or you can say the classes of the object doesn't matter at we at compile ter we don't specify the type of the variable the data type of the variable and all the data type of the variable can change accordingly at run time so we can say python is a duct typing language it means data types of the variables can change as long as the syntax is compatible here we are not having variables we are having objects so the class of the objects can change as long as syntax is compatible means as long as the methods are defined on that object right so the first time we can call this display function let's suppose with the help of D object duck object then call this display with the help of dog object pass dog and then pass person P let's just call this at last otherwise at first it will give err so first we calling with the duck object then dog object then person object so what output you should get see using duck object it is running using dog object also it is running completely fine but using person object it is giving attribute ER person object has no attribute swim or rather than just defining this uh function outside of any class we can take one more class and within that class also you can define a method and there you can pass object that is also fine like I'm defining a class maybe demo in class we have this method cell comma when object we are passing and same thing we are passing so let's run this okay now the display is not defined okay we are not having this display now we are having this in class so with the help of class object we can call this display so let's create a object of this demo class and with the help of this object we call this display see now for two it is running fine but in person it is giving same attribute so like this also you can this type of uh example also you can take in a class of method right so I hope you got now what is duct typing so I hope you got what is duct typing and we use this thing to achieve polymorphism now in the next video we'll see operator overloading maybe so now we'll see in the next video byebye take care
