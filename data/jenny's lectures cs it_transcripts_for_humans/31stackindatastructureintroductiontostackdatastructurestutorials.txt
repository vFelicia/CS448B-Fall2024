With timestamps:

00:00 - Yeah right we have discussed few data
00:02 - structures like array and Ling lists how
00:05 - data is stored in array what are the
00:07 - different operations on array what is
00:09 - linked list or what are the different
00:10 - operations on linked list how data is
00:12 - stored in linked list right and now we
00:14 - will see what is the stack data
00:16 - structure so you can see it is a linear
00:19 - data structure fine and seen array what
00:23 - is their random access as possible you
00:25 - can directly access any data in a
00:27 - constant time in linked list what only
00:29 - sequential access is possible right
00:32 - what about stuck in stack only you can
00:36 - say limited access is possible right or
00:39 - you can say it is a ordered list what is
00:43 - that it is an ordered list or you can
00:46 - say it is a collection or you can say it
00:48 - is a container which is going to follow
00:51 - a rule for insertion and deletion of the
00:56 - data right and what is that rule or what
00:59 - is that restriction you can say or what
01:01 - is that principle right which that stack
01:04 - data structure follow so that rule is
01:10 - insertion and deletion is possible only
01:14 - from one end right this is applied on
01:19 - both insertion and deletion insertion
01:22 - and deletion is possible from only one
01:25 - end like you can take a real life
01:28 - example suppose you have a CD stand
01:31 - right like this you are going to put CDs
01:35 - here first CD then second third fourth
01:39 - fifth obviously like this you are going
01:42 - to put suppose you want to insert
01:43 - another CD in that case you have only
01:47 - one way to insert CD from the top only
01:49 - you cannot insert CD here from the
01:53 - bottom you cannot insert from the left
01:55 - or right the only way is from the top
01:56 - only you can insert that CD right second
02:00 - K says if you want to take out a CD from
02:03 - this series stand then what you will do
02:05 - only one option you can take out from
02:08 - the top right suppose you want to take
02:12 - out
02:13 - in this city the first CD right so you
02:17 - don't have any option the only option is
02:19 - first of all you will have to take out
02:21 - all the CDs which are placed above this
02:25 - CD after that only you can take out this
02:27 - CD right that is the restrictions on
02:31 - insertion and deletion in stock fine so
02:35 - in this video we will see how logically
02:37 - you are going to represent a stack what
02:40 - are the introduction introductory part
02:42 - of stack some basic operations on stack
02:45 - what what are the meaning of those
02:47 - operations as well as some applications
02:49 - of stack in next video we will see how
02:52 - to implement a stack right using arrays
02:55 - as well as using link inst so now like
02:59 - this if you map this real-life stack
03:03 - obviously this is what a stack only or
03:05 - you can say a stack of plates right one
03:08 - plate is you have put one plate here if
03:10 - you want to play a place another plate
03:12 - then you will put on this plate then
03:14 - third and fourth and fifth like this you
03:16 - are going to place if you want to remove
03:18 - a plate then first plate you will take
03:22 - out first right so the principle is what
03:24 - last in first out you can say right this
03:29 - is the last plate or you can say this is
03:32 - the last CD you have put in the CD stand
03:35 - and the last CD would be the first one
03:40 - that you can take out so last in first
03:43 - out leaf oh so the rule on which this
03:50 - stack data structure works is what leave
03:53 - for last in first out or you can say
03:56 - first in last out this CD was first in
04:01 - but if you want to take out this CD then
04:04 - this would be the last one you can take
04:06 - out because for for taking out this CD
04:09 - outside of the series 10 you how to take
04:11 - out all the above CDs first of all right
04:15 - so first any last out and if you will
04:18 - map this real-life example of stack in
04:20 - this with this stack then you can say
04:23 - the logical represent
04:25 - datian of the stack is what we represent
04:27 - stack something like this like this this
04:32 - is what a stack you will represent this
04:35 - it is a container which has only one
04:38 - open end you can insert data from here
04:41 - you can delete a data from here right
04:44 - there is no other way this is what a
04:46 - stack logical representation of stuff
04:48 - this is not actual representation of
04:50 - stack right that we will discuss in
04:52 - later we use right
04:54 - and in stab insertion operation when you
04:58 - will insert some data understand that
05:00 - operation is known as push right and
05:07 - deletion operation is known as pop so
05:12 - two fundamental operations are there on
05:15 - the stack one is push one is pop push
05:18 - means inserting or putting a data into
05:21 - the strap pop means taking out or
05:24 - deleting the topmost data from the stack
05:27 - right two fundamental operations many
05:30 - more operations are also there that if
05:32 - you are we will also discuss now see
05:34 - this is the only and from where you are
05:37 - going to push and pop the data right so
05:40 - this is known as top top of the step
05:44 - right
05:46 - you can insert a data and you can delete
05:48 - data from top of the stack that end is
05:51 - known as top from where you can insert
05:54 - you can push and pop data right so now
05:58 - we will see some operations that are
05:59 - performed on star data structure see
06:01 - first is push and in bracket you will
06:07 - write down that a data you want to
06:09 - insert into stack C stack is what it is
06:11 - a collection of similar data type only
06:13 - it's not like that this is stack and
06:15 - here the first data is suppose integer
06:18 - and after that I'm inserting a character
06:20 - after that again I am inserting to know
06:23 - you can only insert the data of similar
06:25 - data type either in teaser all the data
06:27 - should be integer or character or float
06:29 - something like this right see push
06:32 - second operation is pop operation
06:37 - right here they don't pass any argument
06:41 - here why so because pop means always the
06:44 - topmost element would be popped out from
06:47 - the step right so no need to pass
06:49 - anything in this function these are two
06:52 - fundamental operation third operation
06:54 - may be peak operation or somewhere it is
06:58 - also known as top operation it means
07:02 - what it is going to return the topmost
07:05 - element of the stack without removing
07:08 - that element from the stack see Bob will
07:12 - return the topmost element from the
07:14 - stack as well as it will remove that
07:16 - element from the stack see suppose this
07:19 - is what I have stack and in this I have
07:22 - data type 1 I have data 1 2 & 3 if you
07:25 - write down pop it means it will remove 3
07:28 - from the stack now this is the step
07:32 - right and if on this stack you will
07:35 - perform peak operation or top operation
07:38 - it means it will return 3 but it will
07:41 - not remove this from the step this is
07:44 - the difference right fourth operation
07:48 - may be is empty means it will true if
07:54 - the stack is empty there is known data
07:57 - in the list just in the stack right
07:59 - otherwise it will return false sake
08:02 - another may be is full so this function
08:06 - will return true if this stack is full
08:09 - otherwise it will return false see these
08:12 - are not the only operation you can
08:13 - perform there are many more operation
08:15 - you can perform on stack like you cannot
08:18 - perform search operation reverse
08:20 - operation you can find out that minimum
08:23 - element from the stack maximum value
08:24 - element from the stack right bad thing
08:27 - also we will discuss in a later videos
08:29 - right these are some fundamental
08:30 - operations you can perform one stack
08:32 - fine now we will see the logical
08:35 - representation of stack as well as we
08:37 - are going to perform these operations
08:38 - right so this is how we logically
08:43 - represent the step right not actually in
08:46 - the memory this is just a logical
08:47 - representation right for your
08:49 - understanding purpose now
08:52 - obviously you want do you want to push
08:54 - some data in the stack right so you need
08:56 - to know the capacity of the stack or you
08:58 - can say the size of the stack so you
09:00 - need to allocate some memory to the
09:01 - stack right and how to fix that size how
09:06 - you will get to know the size of the
09:08 - stack you can allocate the memory either
09:11 - using static memory allocation or
09:14 - dynamic memory allocation there are two
09:17 - ways to implement stack static memory
09:20 - allocation and dynamically you can
09:22 - implement step static means using arrays
09:25 - you can implement stack write dynamic
09:29 - means using linked lists you can
09:31 - implement stack so these implementations
09:34 - we will see in the next video with the
09:37 - proper with the help of an example plus
09:38 - code right so now suppose I have taken
09:41 - the size of the stack as 5 means the
09:45 - stack can store only five elements
09:47 - either using by static memory location
09:50 - or dynamic memory allocation right that
09:52 - thing in detail we will discuss in next
09:54 - video see suppose the capacity is here 5
09:57 - so you can insert here 5 elements only
09:59 - fine
10:00 - at starting at starting top is what top
10:05 - is equal to minus 1 fine 5 means you can
10:10 - say you can insert 5 elements the index
10:13 - would be 0 first of all then 1 then 2
10:16 - then 3 then 4 from 0 to 4 right so here
10:20 - 5 elements I can store this is the
10:22 - capacity of the stack at starting top is
10:25 - minus 1 right minus 1 means somewhere
10:28 - here minus 1 hypothetically we assume
10:30 - that here we have minus 1 index right
10:33 - now suppose in the empty stack you call
10:38 - this pop operation what would happen pop
10:41 - means the topmost element would be
10:43 - removed but here we don't have anything
10:45 - stack is empty in this case it is what
10:48 - under flow condition it will return what
10:52 - the stack is empty so this is what an
10:54 - under flow condition you can say right
10:57 - and
10:58 - now suppose I'm calling push to write
11:04 - actually implementation or loose also we
11:06 - will see how to write down the code for
11:08 - push and pop right here I am just giving
11:11 - you the brief introduction push 2 mins
11:13 - here from the top one you will insert
11:15 - this 2 right we have only one end so
11:17 - first of all what would happen top is -1
11:20 - so we will increment this top first of
11:23 - all top plus plus it means top becomes 0
11:27 - now now here we have top and now you
11:30 - will insert this to write again if you
11:35 - will call push 3 again first of all top
11:40 - plus plus
11:41 - right now table becomes this one top is
11:46 - pointing to this one 1 and now you will
11:48 - insert 3 here in the stack fine if you
11:53 - call pop no need to pass any argument
11:56 - here why so because only the topmost
11:59 - element would be removed from the stack
12:01 - you cannot write here pop 2 means if you
12:03 - want to remove this 2 you cannot see pop
12:05 - 2 and this 2 would be removed no always
12:08 - this element would be removed right so
12:11 - pop 3 pop means the 3 would be removed
12:14 - from the stack and now see right now we
12:19 - will do top minus minus means now again
12:24 - top is 0
12:25 - Oh second again if you do pop in that
12:31 - case again though would be removed from
12:34 - the list or simply you can do top minus
12:37 - minus means top is now minus 1 right and
12:45 - if you will not remove this if you will
12:48 - not take out this from the stack that is
12:50 - also fine because this is now a garbage
12:53 - we do not care what garbage value is
12:57 - there in the stack because after that if
13:00 - you will again call push for then first
13:05 - of all top plus plus means now top
13:07 - becomes 0 minus 1 to 0
13:11 - here we will this too would be
13:13 - overwritten and herefor would be stored
13:15 - right this thing also will discuss how
13:19 - to code push and pop operation fine now
13:22 - suppose I am going to push four times
13:23 - one five six and seven one five six and
13:25 - seven again I am calling push eight now
13:30 - the stack is full Vegas capacity is only
13:32 - five right so now it should return what
13:35 - it is what an overflow condition we have
13:39 - discussed what is under flow condition
13:41 - now here this is what overflow condition
13:44 - if this dope is pointing to this maximum
13:49 - size minus one the index is for maximum
13:52 - size is five in that case it would
13:55 - return overflow condition you cannot
13:58 - insert any data in the stack because
14:00 - stack is full so this is what overflow
14:03 - condition and now here if you will call
14:05 - is full function means it will return
14:08 - true if the stack is full and now the
14:10 - condition is status full so it would
14:12 - return at this time is full function
14:14 - would return true right and when there
14:18 - is nothing in the stack suppose we have
14:21 - popped out all the data and after that
14:23 - we call is empty in that case it would
14:26 - return true because stack is empty how
14:29 - you are going to code these function we
14:31 - will see what so now what are the
14:33 - applications of stack see the very basic
14:36 - application is if you want to reverse a
14:40 - string or in reverse a word then we will
14:45 - use stack that is very simple suppose I
14:47 - want to reverse I have a string ABC and
14:51 - D so I want to reverse this I want to
14:54 - print a DC B and a so simply what I can
14:58 - do I can push this into stack first of
15:01 - all ABC and D and then pop out first of
15:05 - all D would be popped out then C then B
15:07 - then e this is what we have reversed to
15:09 - the string second application is for
15:12 - undo mechanism in text editor I guess
15:14 - everybody have used this undo mechanism
15:17 - suppose you have written something I
15:18 - have written ABCDE right in the text
15:22 - editor in text editor and
15:23 - you press ctrl-z the shortcut key for
15:26 - undo then you would be deleted then D
15:29 - would be deleted then C then B then a
15:31 - this mechanism is performed using step
15:34 - in your text editors right third
15:38 - application maybe you can use it in
15:40 - recursion or you can say in function
15:41 - call when you are going to call a
15:43 - function then obviously something would
15:45 - be returned some value would be return
15:46 - like and recursion means it is you can
15:49 - say a chain or function call a function
15:51 - is calling itself again and again right
15:53 - so whenever that function would return
15:56 - something then that values would be
15:58 - stored in stack how actually recursion
16:01 - will work that also we will discuss when
16:03 - we will discuss recursion fourth may be
16:06 - to check the balance of the parentheses
16:09 - parentheses means like this the compiler
16:13 - use stab for verifying the balance of
16:16 - the parentheses means for each opening
16:20 - parenthesis there is proper closing
16:23 - parenthesis at right place right suppose
16:26 - here is opening again here I have opened
16:29 - again here I hope open so it means there
16:31 - should be three closing brackets right
16:34 - so this balance would be checked using
16:37 - step this thing also we will discuss in
16:39 - detail right fourth application may be
16:41 - in fix to postfix or prefix conversion
16:44 - when you are going to convert these
16:45 - expressions from infix to postfix or in
16:48 - fix to prefix in that case also starting
16:50 - to be used that thing also will discuss
16:52 - entity right and as well as in many
16:55 - algorithm stack data structure is used
16:57 - you can say in topological sorting in
16:59 - DFS we are using staff in Tower of Hanoi
17:02 - problem also we are going to use staff
17:04 - in tray traverser also we will use step
17:07 - right so there are many applications of
17:09 - staff and sixth you can say for the
17:13 - evaluation of postfix expression we will
17:16 - use step right that is also we'll
17:18 - discuss all the application we will
17:20 - discuss in detail this is just an
17:22 - introductory video of this tag to get
17:25 - you familiar with stack the logical
17:28 - representation of star how actually we
17:30 - are going to implement stack how we are
17:32 - actually going to code these operations
17:34 - we will discuss in next
17:36 - you fine so I'll see in the next video
17:38 - till then bye-bye take

Cleaned transcript:

Yeah right we have discussed few data structures like array and Ling lists how data is stored in array what are the different operations on array what is linked list or what are the different operations on linked list how data is stored in linked list right and now we will see what is the stack data structure so you can see it is a linear data structure fine and seen array what is their random access as possible you can directly access any data in a constant time in linked list what only sequential access is possible right what about stuck in stack only you can say limited access is possible right or you can say it is a ordered list what is that it is an ordered list or you can say it is a collection or you can say it is a container which is going to follow a rule for insertion and deletion of the data right and what is that rule or what is that restriction you can say or what is that principle right which that stack data structure follow so that rule is insertion and deletion is possible only from one end right this is applied on both insertion and deletion insertion and deletion is possible from only one end like you can take a real life example suppose you have a CD stand right like this you are going to put CDs here first CD then second third fourth fifth obviously like this you are going to put suppose you want to insert another CD in that case you have only one way to insert CD from the top only you cannot insert CD here from the bottom you cannot insert from the left or right the only way is from the top only you can insert that CD right second K says if you want to take out a CD from this series stand then what you will do only one option you can take out from the top right suppose you want to take out in this city the first CD right so you don't have any option the only option is first of all you will have to take out all the CDs which are placed above this CD after that only you can take out this CD right that is the restrictions on insertion and deletion in stock fine so in this video we will see how logically you are going to represent a stack what are the introduction introductory part of stack some basic operations on stack what what are the meaning of those operations as well as some applications of stack in next video we will see how to implement a stack right using arrays as well as using link inst so now like this if you map this reallife stack obviously this is what a stack only or you can say a stack of plates right one plate is you have put one plate here if you want to play a place another plate then you will put on this plate then third and fourth and fifth like this you are going to place if you want to remove a plate then first plate you will take out first right so the principle is what last in first out you can say right this is the last plate or you can say this is the last CD you have put in the CD stand and the last CD would be the first one that you can take out so last in first out leaf oh so the rule on which this stack data structure works is what leave for last in first out or you can say first in last out this CD was first in but if you want to take out this CD then this would be the last one you can take out because for for taking out this CD outside of the series 10 you how to take out all the above CDs first of all right so first any last out and if you will map this reallife example of stack in this with this stack then you can say the logical represent datian of the stack is what we represent stack something like this like this this is what a stack you will represent this it is a container which has only one open end you can insert data from here you can delete a data from here right there is no other way this is what a stack logical representation of stuff this is not actual representation of stack right that we will discuss in later we use right and in stab insertion operation when you will insert some data understand that operation is known as push right and deletion operation is known as pop so two fundamental operations are there on the stack one is push one is pop push means inserting or putting a data into the strap pop means taking out or deleting the topmost data from the stack right two fundamental operations many more operations are also there that if you are we will also discuss now see this is the only and from where you are going to push and pop the data right so this is known as top top of the step right you can insert a data and you can delete data from top of the stack that end is known as top from where you can insert you can push and pop data right so now we will see some operations that are performed on star data structure see first is push and in bracket you will write down that a data you want to insert into stack C stack is what it is a collection of similar data type only it's not like that this is stack and here the first data is suppose integer and after that I'm inserting a character after that again I am inserting to know you can only insert the data of similar data type either in teaser all the data should be integer or character or float something like this right see push second operation is pop operation right here they don't pass any argument here why so because pop means always the topmost element would be popped out from the step right so no need to pass anything in this function these are two fundamental operation third operation may be peak operation or somewhere it is also known as top operation it means what it is going to return the topmost element of the stack without removing that element from the stack see Bob will return the topmost element from the stack as well as it will remove that element from the stack see suppose this is what I have stack and in this I have data type 1 I have data 1 2 & 3 if you write down pop it means it will remove 3 from the stack now this is the step right and if on this stack you will perform peak operation or top operation it means it will return 3 but it will not remove this from the step this is the difference right fourth operation may be is empty means it will true if the stack is empty there is known data in the list just in the stack right otherwise it will return false sake another may be is full so this function will return true if this stack is full otherwise it will return false see these are not the only operation you can perform there are many more operation you can perform on stack like you cannot perform search operation reverse operation you can find out that minimum element from the stack maximum value element from the stack right bad thing also we will discuss in a later videos right these are some fundamental operations you can perform one stack fine now we will see the logical representation of stack as well as we are going to perform these operations right so this is how we logically represent the step right not actually in the memory this is just a logical representation right for your understanding purpose now obviously you want do you want to push some data in the stack right so you need to know the capacity of the stack or you can say the size of the stack so you need to allocate some memory to the stack right and how to fix that size how you will get to know the size of the stack you can allocate the memory either using static memory allocation or dynamic memory allocation there are two ways to implement stack static memory allocation and dynamically you can implement step static means using arrays you can implement stack write dynamic means using linked lists you can implement stack so these implementations we will see in the next video with the proper with the help of an example plus code right so now suppose I have taken the size of the stack as 5 means the stack can store only five elements either using by static memory location or dynamic memory allocation right that thing in detail we will discuss in next video see suppose the capacity is here 5 so you can insert here 5 elements only fine at starting at starting top is what top is equal to minus 1 fine 5 means you can say you can insert 5 elements the index would be 0 first of all then 1 then 2 then 3 then 4 from 0 to 4 right so here 5 elements I can store this is the capacity of the stack at starting top is minus 1 right minus 1 means somewhere here minus 1 hypothetically we assume that here we have minus 1 index right now suppose in the empty stack you call this pop operation what would happen pop means the topmost element would be removed but here we don't have anything stack is empty in this case it is what under flow condition it will return what the stack is empty so this is what an under flow condition you can say right and now suppose I'm calling push to write actually implementation or loose also we will see how to write down the code for push and pop right here I am just giving you the brief introduction push 2 mins here from the top one you will insert this 2 right we have only one end so first of all what would happen top is 1 so we will increment this top first of all top plus plus it means top becomes 0 now now here we have top and now you will insert this to write again if you will call push 3 again first of all top plus plus right now table becomes this one top is pointing to this one 1 and now you will insert 3 here in the stack fine if you call pop no need to pass any argument here why so because only the topmost element would be removed from the stack you cannot write here pop 2 means if you want to remove this 2 you cannot see pop 2 and this 2 would be removed no always this element would be removed right so pop 3 pop means the 3 would be removed from the stack and now see right now we will do top minus minus means now again top is 0 Oh second again if you do pop in that case again though would be removed from the list or simply you can do top minus minus means top is now minus 1 right and if you will not remove this if you will not take out this from the stack that is also fine because this is now a garbage we do not care what garbage value is there in the stack because after that if you will again call push for then first of all top plus plus means now top becomes 0 minus 1 to 0 here we will this too would be overwritten and herefor would be stored right this thing also will discuss how to code push and pop operation fine now suppose I am going to push four times one five six and seven one five six and seven again I am calling push eight now the stack is full Vegas capacity is only five right so now it should return what it is what an overflow condition we have discussed what is under flow condition now here this is what overflow condition if this dope is pointing to this maximum size minus one the index is for maximum size is five in that case it would return overflow condition you cannot insert any data in the stack because stack is full so this is what overflow condition and now here if you will call is full function means it will return true if the stack is full and now the condition is status full so it would return at this time is full function would return true right and when there is nothing in the stack suppose we have popped out all the data and after that we call is empty in that case it would return true because stack is empty how you are going to code these function we will see what so now what are the applications of stack see the very basic application is if you want to reverse a string or in reverse a word then we will use stack that is very simple suppose I want to reverse I have a string ABC and D so I want to reverse this I want to print a DC B and a so simply what I can do I can push this into stack first of all ABC and D and then pop out first of all D would be popped out then C then B then e this is what we have reversed to the string second application is for undo mechanism in text editor I guess everybody have used this undo mechanism suppose you have written something I have written ABCDE right in the text editor in text editor and you press ctrlz the shortcut key for undo then you would be deleted then D would be deleted then C then B then a this mechanism is performed using step in your text editors right third application maybe you can use it in recursion or you can say in function call when you are going to call a function then obviously something would be returned some value would be return like and recursion means it is you can say a chain or function call a function is calling itself again and again right so whenever that function would return something then that values would be stored in stack how actually recursion will work that also we will discuss when we will discuss recursion fourth may be to check the balance of the parentheses parentheses means like this the compiler use stab for verifying the balance of the parentheses means for each opening parenthesis there is proper closing parenthesis at right place right suppose here is opening again here I have opened again here I hope open so it means there should be three closing brackets right so this balance would be checked using step this thing also we will discuss in detail right fourth application may be in fix to postfix or prefix conversion when you are going to convert these expressions from infix to postfix or in fix to prefix in that case also starting to be used that thing also will discuss entity right and as well as in many algorithm stack data structure is used you can say in topological sorting in DFS we are using staff in Tower of Hanoi problem also we are going to use staff in tray traverser also we will use step right so there are many applications of staff and sixth you can say for the evaluation of postfix expression we will use step right that is also we'll discuss all the application we will discuss in detail this is just an introductory video of this tag to get you familiar with stack the logical representation of star how actually we are going to implement stack how we are actually going to code these operations we will discuss in next you fine so I'll see in the next video till then byebye take
